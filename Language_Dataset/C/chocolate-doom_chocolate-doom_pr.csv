chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,674,2016-03-08T09:47:12Z,2016-04-22T09:02:43Z,2016-04-22T09:02:43Z,CLOSED,False,1,1,1,https://github.com/jmtd,Refer to the correct sound effect in A_FireCGun,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/674,https://github.com/jmtd,1,https://github.com/chocolate-doom/chocolate-doom/pull/674,"A_FireCGun called S_StartSound with sfx_pistol as an argument.
Therefore the sfx_chgun sound effect is never selected, and the
various code paths that check for whether a sound effect is a
link or not are never executed (sfx_chgun is the only such sound
effect).
I hypothesise that this was changed at some point post Doom 1.2.,
possibly post 1.9 and prior to the linuxdoom source release.
If pitch shifting is turned on, this alters the base pitch for
the chaingun to be shifted upwards. This is consistent with
Doom 1.2's behaviour, although we might need/want to recalibrate
the shifting a little bit further.
Closes: #671.","A_FireCGun called S_StartSound with sfx_pistol as an argument.
Therefore the sfx_chgun sound effect is never selected, and the
various code paths that check for whether a sound effect is a
link or not are never executed (sfx_chgun is the only such sound
effect).
I hypothesise that this was changed at some point post Doom 1.2.,
possibly post 1.9 and prior to the linuxdoom source release.
If pitch shifting is turned on, this alters the base pitch for
the chaingun to be shifted upwards. This is consistent with
Doom 1.2's behaviour, although we might need/want to recalibrate
the shifting a little bit further.
Closes: #671.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,674,2016-03-08T09:47:12Z,2016-04-22T09:02:43Z,2016-04-22T09:02:43Z,CLOSED,False,1,1,1,https://github.com/jmtd,Refer to the correct sound effect in A_FireCGun,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/674,https://github.com/linguica,2,https://github.com/chocolate-doom/chocolate-doom/pull/674#issuecomment-198525479,"A_FireCGun called S_StartSound with sfx_pistol as an argument.
Therefore the sfx_chgun sound effect is never selected, and the
various code paths that check for whether a sound effect is a
link or not are never executed (sfx_chgun is the only such sound
effect).
I hypothesise that this was changed at some point post Doom 1.2.,
possibly post 1.9 and prior to the linuxdoom source release.
If pitch shifting is turned on, this alters the base pitch for
the chaingun to be shifted upwards. This is consistent with
Doom 1.2's behaviour, although we might need/want to recalibrate
the shifting a little bit further.
Closes: #671.","doom2.exe actually does call the pistol sound for the chaingun. I looked in IDA:

Note the MOV EDX, 1 which I believe is to load sound asset 1, i.e., sfx_pistol.
For comparison, here's another function:

with MOV EDX, 99, and the 99th sound in the list is indeed sfx_manatk.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,674,2016-03-08T09:47:12Z,2016-04-22T09:02:43Z,2016-04-22T09:02:43Z,CLOSED,False,1,1,1,https://github.com/jmtd,Refer to the correct sound effect in A_FireCGun,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/674,https://github.com/jmtd,3,https://github.com/chocolate-doom/chocolate-doom/pull/674#issuecomment-198550647,"A_FireCGun called S_StartSound with sfx_pistol as an argument.
Therefore the sfx_chgun sound effect is never selected, and the
various code paths that check for whether a sound effect is a
link or not are never executed (sfx_chgun is the only such sound
effect).
I hypothesise that this was changed at some point post Doom 1.2.,
possibly post 1.9 and prior to the linuxdoom source release.
If pitch shifting is turned on, this alters the base pitch for
the chaingun to be shifted upwards. This is consistent with
Doom 1.2's behaviour, although we might need/want to recalibrate
the shifting a little bit further.
Closes: #671.",@linguica that's pretty compelling. Which Doom version were you disassembling ? Would you care to try doom v1.2?,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,674,2016-03-08T09:47:12Z,2016-04-22T09:02:43Z,2016-04-22T09:02:43Z,CLOSED,False,1,1,1,https://github.com/jmtd,Refer to the correct sound effect in A_FireCGun,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/674,https://github.com/nukeykt,4,https://github.com/chocolate-doom/chocolate-doom/pull/674#issuecomment-212476749,"A_FireCGun called S_StartSound with sfx_pistol as an argument.
Therefore the sfx_chgun sound effect is never selected, and the
various code paths that check for whether a sound effect is a
link or not are never executed (sfx_chgun is the only such sound
effect).
I hypothesise that this was changed at some point post Doom 1.2.,
possibly post 1.9 and prior to the linuxdoom source release.
If pitch shifting is turned on, this alters the base pitch for
the chaingun to be shifted upwards. This is consistent with
Doom 1.2's behaviour, although we might need/want to recalibrate
the shifting a little bit further.
Closes: #671.",Just checked in disassembly. A_FireCGun plays sfx_pistol in Doom 1.2,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,674,2016-03-08T09:47:12Z,2016-04-22T09:02:43Z,2016-04-22T09:02:43Z,CLOSED,False,1,1,1,https://github.com/jmtd,Refer to the correct sound effect in A_FireCGun,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/674,https://github.com/jmtd,5,https://github.com/chocolate-doom/chocolate-doom/pull/674#issuecomment-213340487,"A_FireCGun called S_StartSound with sfx_pistol as an argument.
Therefore the sfx_chgun sound effect is never selected, and the
various code paths that check for whether a sound effect is a
link or not are never executed (sfx_chgun is the only such sound
effect).
I hypothesise that this was changed at some point post Doom 1.2.,
possibly post 1.9 and prior to the linuxdoom source release.
If pitch shifting is turned on, this alters the base pitch for
the chaingun to be shifted upwards. This is consistent with
Doom 1.2's behaviour, although we might need/want to recalibrate
the shifting a little bit further.
Closes: #671.","Just checked in disassembly. A_FireCGun plays sfx_pistol in Doom 1.2

Thanks for doing this. I'll close this PR then, as it's probably not the best way to adjust the chaingun pitch. I'm now wondering (not for the first time) if the chaingun pitch really was higher or whether it's a figment of people's imagination.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,679,2016-03-10T22:31:22Z,2016-03-10T22:47:32Z,2016-03-10T22:47:32Z,MERGED,True,17,0,2,https://github.com/jmtd,Add support for .lmp file formats to Mac Launcher,1,"['macOS', 'launcher', 'feature request']",https://github.com/chocolate-doom/chocolate-doom/pull/679,https://github.com/jmtd,1,https://github.com/chocolate-doom/chocolate-doom/pull/679,"Once the app has been launched at least once, double-clicking upon
an .lmp file should start the Chocolate Doom launcher and add
appropriate ""-playdemo"" command-line arguments.
Closes: #677.","Once the app has been launched at least once, double-clicking upon
an .lmp file should start the Chocolate Doom launcher and add
appropriate ""-playdemo"" command-line arguments.
Closes: #677.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,679,2016-03-10T22:31:22Z,2016-03-10T22:47:32Z,2016-03-10T22:47:32Z,MERGED,True,17,0,2,https://github.com/jmtd,Add support for .lmp file formats to Mac Launcher,1,"['macOS', 'launcher', 'feature request']",https://github.com/chocolate-doom/chocolate-doom/pull/679,https://github.com/fragglet,2,https://github.com/chocolate-doom/chocolate-doom/pull/679#issuecomment-195084812,"Once the app has been launched at least once, double-clicking upon
an .lmp file should start the Chocolate Doom launcher and add
appropriate ""-playdemo"" command-line arguments.
Closes: #677.","Cool, thanks!",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,682,2016-03-18T19:57:52Z,2016-06-06T14:46:38Z,2016-06-06T14:46:38Z,CLOSED,False,4,0,1,https://github.com/linguica,"Add ""-geom"" argument",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/682,https://github.com/linguica,1,https://github.com/chocolate-doom/chocolate-doom/pull/682,"PrBoom allows ""-geom"" as well as ""-geometry"" and I just tried to use it in Choco to no avail. Might as well just add it in for the sake of completeness.","PrBoom allows ""-geom"" as well as ""-geometry"" and I just tried to use it in Choco to no avail. Might as well just add it in for the sake of completeness.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,682,2016-03-18T19:57:52Z,2016-06-06T14:46:38Z,2016-06-06T14:46:38Z,CLOSED,False,4,0,1,https://github.com/linguica,"Add ""-geom"" argument",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/682,https://github.com/jmtd,2,https://github.com/chocolate-doom/chocolate-doom/pull/682#issuecomment-223981086,"PrBoom allows ""-geom"" as well as ""-geometry"" and I just tried to use it in Choco to no avail. Might as well just add it in for the sake of completeness.",I discussed this with @linguica ages ago and it was a throw away,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,683,2016-03-23T17:37:34Z,2016-03-23T18:14:21Z,2016-03-23T18:14:21Z,MERGED,True,1,0,1,https://github.com/nukeykt,Add me to AUTHORS,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/683,https://github.com/nukeykt,1,https://github.com/chocolate-doom/chocolate-doom/pull/683,,,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,684,2016-03-23T18:28:22Z,2016-04-01T14:50:47Z,2016-04-01T14:50:47Z,CLOSED,False,7,4,4,https://github.com/jmtd,WIP: Sdl2 branch input changes,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/684,https://github.com/jmtd,1,https://github.com/chocolate-doom/chocolate-doom/pull/684,"This is a Work In Progress: I've just opened it as a PR in case anyone is curious to see what approach I'm taking and for feedback specific to these changes (master issue for sdl2 is of course #450). You may wish to wait until I've ""de-wip""ed it before considering a merge.
So far some small changes to input in the engine, a precursor to possibly re-arranging how input works there and also fixing libtextscreen","This is a Work In Progress: I've just opened it as a PR in case anyone is curious to see what approach I'm taking and for feedback specific to these changes (master issue for sdl2 is of course #450). You may wish to wait until I've ""de-wip""ed it before considering a merge.
So far some small changes to input in the engine, a precursor to possibly re-arranging how input works there and also fixing libtextscreen",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,684,2016-03-23T18:28:22Z,2016-04-01T14:50:47Z,2016-04-01T14:50:47Z,CLOSED,False,7,4,4,https://github.com/jmtd,WIP: Sdl2 branch input changes,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/684,https://github.com/fragglet,2,https://github.com/chocolate-doom/chocolate-doom/pull/684#issuecomment-200508348,"This is a Work In Progress: I've just opened it as a PR in case anyone is curious to see what approach I'm taking and for feedback specific to these changes (master issue for sdl2 is of course #450). You may wish to wait until I've ""de-wip""ed it before considering a merge.
So far some small changes to input in the engine, a precursor to possibly re-arranging how input works there and also fixing libtextscreen","Not sure what further changes you're planning for i_input.[ch] - it should only be libtextscreen that needs fixing at this stage.
I think I kept the I_HandleKeyboardEvent() prototypes out of i_input.h since they're essentially a private interface between i_video.c and i_input.c and not part of the ""public"" input interface that the rest of the game sees. I'm quite keen to keep a clean abstraction boundary for the i_* code that hides the underlying SDL implementation.
I'd rather not change the default for vanilla_keyboard_mapping.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,684,2016-03-23T18:28:22Z,2016-04-01T14:50:47Z,2016-04-01T14:50:47Z,CLOSED,False,7,4,4,https://github.com/jmtd,WIP: Sdl2 branch input changes,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/684,https://github.com/jmtd,3,https://github.com/chocolate-doom/chocolate-doom/pull/684#issuecomment-200565557,"This is a Work In Progress: I've just opened it as a PR in case anyone is curious to see what approach I'm taking and for feedback specific to these changes (master issue for sdl2 is of course #450). You may wish to wait until I've ""de-wip""ed it before considering a merge.
So far some small changes to input in the engine, a precursor to possibly re-arranging how input works there and also fixing libtextscreen","I guess I'm learning what needs to be done to libtextscreen by exploring what's done in i_input. Truthfully I wasn't sure you had completed that work, it didn't seem to match up to what I thought was the ""right"" way to do it with sdl2. I came into it thinking that the gross hack linking key press events to text events could be avoided if the event loop in i_video captured text input events, and the ""if vanilla_keyboard_mapping"" switch was at a higher level, much closer to the event dispatch. However, I was labouring under a big comprehension error: you don't get text events for non-text related button presses, so you always need key events. I'm now much more of a fan of the ""it's a 101-button joystick"" school of thought (which corresponds to the current setting of vanilla_keyboard_mapping of course!) and will likely drop all of this :)",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,684,2016-03-23T18:28:22Z,2016-04-01T14:50:47Z,2016-04-01T14:50:47Z,CLOSED,False,7,4,4,https://github.com/jmtd,WIP: Sdl2 branch input changes,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/684,https://github.com/fragglet,4,https://github.com/chocolate-doom/chocolate-doom/pull/684#issuecomment-200601084,"This is a Work In Progress: I've just opened it as a PR in case anyone is curious to see what approach I'm taking and for feedback specific to these changes (master issue for sdl2 is of course #450). You may wish to wait until I've ""de-wip""ed it before considering a merge.
So far some small changes to input in the engine, a precursor to possibly re-arranging how input works there and also fixing libtextscreen","Yeah, I'm not proud of the input events hack, but trust me when I say that I spent considerable time looking into this and considering the various options, and that's the best solution I could devise :)",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,687,2016-03-24T21:26:19Z,2016-03-25T01:25:21Z,2016-07-14T17:49:06Z,MERGED,True,1,0,1,https://github.com/jmtd,Update INSTALL.template,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/687,https://github.com/jmtd,1,https://github.com/chocolate-doom/chocolate-doom/pull/687,"Add freedm.wad to the list of IWADs that can be used for chocolate-doom.
Closes: #666.","Add freedm.wad to the list of IWADs that can be used for chocolate-doom.
Closes: #666.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,688,2016-03-27T20:04:48Z,2016-03-27T22:30:06Z,2016-03-27T22:33:05Z,MERGED,True,5,1,1,https://github.com/jkbenaim,Heretic: Add map names for Episode 6,1,['Heretic'],https://github.com/chocolate-doom/chocolate-doom/pull/688,https://github.com/jkbenaim,1,https://github.com/chocolate-doom/chocolate-doom/pull/688,"Add blank map names for Episode 6.
This fixes a crash that can occur at the intermission screen after
completing a map in Episode 6.","Add blank map names for Episode 6.
This fixes a crash that can occur at the intermission screen after
completing a map in Episode 6.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,688,2016-03-27T20:04:48Z,2016-03-27T22:30:06Z,2016-03-27T22:33:05Z,MERGED,True,5,1,1,https://github.com/jkbenaim,Heretic: Add map names for Episode 6,1,['Heretic'],https://github.com/chocolate-doom/chocolate-doom/pull/688,https://github.com/fragglet,2,https://github.com/chocolate-doom/chocolate-doom/pull/688#issuecomment-202161614,"Add blank map names for Episode 6.
This fixes a crash that can occur at the intermission screen after
completing a map in Episode 6.",What's the vanilla behavior here?,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,688,2016-03-27T20:04:48Z,2016-03-27T22:30:06Z,2016-03-27T22:33:05Z,MERGED,True,5,1,1,https://github.com/jkbenaim,Heretic: Add map names for Episode 6,1,['Heretic'],https://github.com/chocolate-doom/chocolate-doom/pull/688,https://github.com/jkbenaim,3,https://github.com/chocolate-doom/chocolate-doom/pull/688#issuecomment-202162085,"Add blank map names for Episode 6.
This fixes a crash that can occur at the intermission screen after
completing a map in Episode 6.","It looks like vanilla's behavior is to show no map names on the intermission screen.
Here's Heretic v1.3 in DOSBox after beating E6M1:

And here's Chocolate Heretic with the patch applied:",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,688,2016-03-27T20:04:48Z,2016-03-27T22:30:06Z,2016-03-27T22:33:05Z,MERGED,True,5,1,1,https://github.com/jkbenaim,Heretic: Add map names for Episode 6,1,['Heretic'],https://github.com/chocolate-doom/chocolate-doom/pull/688,https://github.com/fragglet,4,https://github.com/chocolate-doom/chocolate-doom/pull/688#issuecomment-202162195,"Add blank map names for Episode 6.
This fixes a crash that can occur at the intermission screen after
completing a map in Episode 6.",Sounds good - thanks for clarifying :),True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,690,2016-04-01T08:30:32Z,2016-04-01T17:02:40Z,2016-04-02T15:28:46Z,CLOSED,False,17,7,1,https://github.com/jmtd,"Bring back the classic Doom ""hit enter"" behaviour",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/690,https://github.com/jmtd,1,https://github.com/chocolate-doom/chocolate-doom/pull/690,"When playing PWADs with classic Doom, you always got the ""this game
has been modified"" banner and had to hit enter to continue.  If you
played a lot of PWADs, you got used to hitting enter regularly.  It
became a core part of the Doom-playing experience. Even if you used
one of those lovely launchers that came on the shovelware CDs which
streamlined the PWAD choosing experience, you always had to hit the
enter key.
This commit restores this classic behaviour and allows those who
still have the muscle-memory ""hit enter"" behaviour permanently
burned into their nervous systems to finally be at peace.
TODO for a future commit: the coloured top-line of text (red for
1.666, blue for 1.9 iirc)","When playing PWADs with classic Doom, you always got the ""this game
has been modified"" banner and had to hit enter to continue.  If you
played a lot of PWADs, you got used to hitting enter regularly.  It
became a core part of the Doom-playing experience. Even if you used
one of those lovely launchers that came on the shovelware CDs which
streamlined the PWAD choosing experience, you always had to hit the
enter key.
This commit restores this classic behaviour and allows those who
still have the muscle-memory ""hit enter"" behaviour permanently
burned into their nervous systems to finally be at peace.
TODO for a future commit: the coloured top-line of text (red for
1.666, blue for 1.9 iirc)",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,690,2016-04-01T08:30:32Z,2016-04-01T17:02:40Z,2016-04-02T15:28:46Z,CLOSED,False,17,7,1,https://github.com/jmtd,"Bring back the classic Doom ""hit enter"" behaviour",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/690,https://github.com/chungy,2,https://github.com/chocolate-doom/chocolate-doom/pull/690#issuecomment-204402790,"When playing PWADs with classic Doom, you always got the ""this game
has been modified"" banner and had to hit enter to continue.  If you
played a lot of PWADs, you got used to hitting enter regularly.  It
became a core part of the Doom-playing experience. Even if you used
one of those lovely launchers that came on the shovelware CDs which
streamlined the PWAD choosing experience, you always had to hit the
enter key.
This commit restores this classic behaviour and allows those who
still have the muscle-memory ""hit enter"" behaviour permanently
burned into their nervous systems to finally be at peace.
TODO for a future commit: the coloured top-line of text (red for
1.666, blue for 1.9 iirc)","I don't believe this is really a valuable part of the core experience, and I have one question also: What about people that don't launch Chocolate Doom from the command line, and have no interactive terminal?
Edit: I was made a fool :-)",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,690,2016-04-01T08:30:32Z,2016-04-01T17:02:40Z,2016-04-02T15:28:46Z,CLOSED,False,17,7,1,https://github.com/jmtd,"Bring back the classic Doom ""hit enter"" behaviour",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/690,https://github.com/jmtd,3,https://github.com/chocolate-doom/chocolate-doom/pull/690#issuecomment-204408113,"When playing PWADs with classic Doom, you always got the ""this game
has been modified"" banner and had to hit enter to continue.  If you
played a lot of PWADs, you got used to hitting enter regularly.  It
became a core part of the Doom-playing experience. Even if you used
one of those lovely launchers that came on the shovelware CDs which
streamlined the PWAD choosing experience, you always had to hit the
enter key.
This commit restores this classic behaviour and allows those who
still have the muscle-memory ""hit enter"" behaviour permanently
burned into their nervous systems to finally be at peace.
TODO for a future commit: the coloured top-line of text (red for
1.666, blue for 1.9 iirc)","What about people that don't launch Chocolate Doom from the command line, and have no interactive terminal?

Good question. It probably needs some work for them. I don't know whether stdin will be closed or open in those situations, and thus whether getchar() will return or block. The whole situation would be resolved if the text pre-start was managed via libtextscreen (like ENDOOM handling). We could then also do all three stages (pre, game, endoom) in one OS Window.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,690,2016-04-01T08:30:32Z,2016-04-01T17:02:40Z,2016-04-02T15:28:46Z,CLOSED,False,17,7,1,https://github.com/jmtd,"Bring back the classic Doom ""hit enter"" behaviour",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/690,https://github.com/fragglet,4,https://github.com/chocolate-doom/chocolate-doom/pull/690#issuecomment-204429957,"When playing PWADs with classic Doom, you always got the ""this game
has been modified"" banner and had to hit enter to continue.  If you
played a lot of PWADs, you got used to hitting enter regularly.  It
became a core part of the Doom-playing experience. Even if you used
one of those lovely launchers that came on the shovelware CDs which
streamlined the PWAD choosing experience, you always had to hit the
enter key.
This commit restores this classic behaviour and allows those who
still have the muscle-memory ""hit enter"" behaviour permanently
burned into their nervous systems to finally be at peace.
TODO for a future commit: the coloured top-line of text (red for
1.666, blue for 1.9 iirc)","I agree with chungy - I'm not sufficiently convinced to see this as part of the core experience (if you like, imagine Chocolate Doom has stuffbuff.exe built in :)
I do like the idea of bringing back the colored banners though.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,690,2016-04-01T08:30:32Z,2016-04-01T17:02:40Z,2016-04-02T15:28:46Z,CLOSED,False,17,7,1,https://github.com/jmtd,"Bring back the classic Doom ""hit enter"" behaviour",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/690,https://github.com/linguica,5,https://github.com/chocolate-doom/chocolate-doom/pull/690#issuecomment-204430634,"When playing PWADs with classic Doom, you always got the ""this game
has been modified"" banner and had to hit enter to continue.  If you
played a lot of PWADs, you got used to hitting enter regularly.  It
became a core part of the Doom-playing experience. Even if you used
one of those lovely launchers that came on the shovelware CDs which
streamlined the PWAD choosing experience, you always had to hit the
enter key.
This commit restores this classic behaviour and allows those who
still have the muscle-memory ""hit enter"" behaviour permanently
burned into their nervous systems to finally be at peace.
TODO for a future commit: the coloured top-line of text (red for
1.666, blue for 1.9 iirc)",Is this the subtlest April Fools joke??,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,690,2016-04-01T08:30:32Z,2016-04-01T17:02:40Z,2016-04-02T15:28:46Z,CLOSED,False,17,7,1,https://github.com/jmtd,"Bring back the classic Doom ""hit enter"" behaviour",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/690,https://github.com/fragglet,6,https://github.com/chocolate-doom/chocolate-doom/pull/690#issuecomment-204431314,"When playing PWADs with classic Doom, you always got the ""this game
has been modified"" banner and had to hit enter to continue.  If you
played a lot of PWADs, you got used to hitting enter regularly.  It
became a core part of the Doom-playing experience. Even if you used
one of those lovely launchers that came on the shovelware CDs which
streamlined the PWAD choosing experience, you always had to hit the
enter key.
This commit restores this classic behaviour and allows those who
still have the muscle-memory ""hit enter"" behaviour permanently
burned into their nervous systems to finally be at peace.
TODO for a future commit: the coloured top-line of text (red for
1.666, blue for 1.9 iirc)",oh god,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,690,2016-04-01T08:30:32Z,2016-04-01T17:02:40Z,2016-04-02T15:28:46Z,CLOSED,False,17,7,1,https://github.com/jmtd,"Bring back the classic Doom ""hit enter"" behaviour",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/690,https://github.com/jmtd,7,https://github.com/chocolate-doom/chocolate-doom/pull/690#issuecomment-204436321,"When playing PWADs with classic Doom, you always got the ""this game
has been modified"" banner and had to hit enter to continue.  If you
played a lot of PWADs, you got used to hitting enter regularly.  It
became a core part of the Doom-playing experience. Even if you used
one of those lovely launchers that came on the shovelware CDs which
streamlined the PWAD choosing experience, you always had to hit the
enter key.
This commit restores this classic behaviour and allows those who
still have the muscle-memory ""hit enter"" behaviour permanently
burned into their nervous systems to finally be at peace.
TODO for a future commit: the coloured top-line of text (red for
1.666, blue for 1.9 iirc)","Is this the subtlest April Fools joke??

@linguica wins!!!",True,"{'HOORAY': ['https://github.com/sneakernets', 'https://github.com/mjc', 'https://github.com/mewsian', 'https://github.com/jwendell', 'https://github.com/bradharding', 'https://github.com/derekmd']}"
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,690,2016-04-01T08:30:32Z,2016-04-01T17:02:40Z,2016-04-02T15:28:46Z,CLOSED,False,17,7,1,https://github.com/jmtd,"Bring back the classic Doom ""hit enter"" behaviour",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/690,https://github.com/sneakernets,8,https://github.com/chocolate-doom/chocolate-doom/pull/690#issuecomment-204459799,"When playing PWADs with classic Doom, you always got the ""this game
has been modified"" banner and had to hit enter to continue.  If you
played a lot of PWADs, you got used to hitting enter regularly.  It
became a core part of the Doom-playing experience. Even if you used
one of those lovely launchers that came on the shovelware CDs which
streamlined the PWAD choosing experience, you always had to hit the
enter key.
This commit restores this classic behaviour and allows those who
still have the muscle-memory ""hit enter"" behaviour permanently
burned into their nervous systems to finally be at peace.
TODO for a future commit: the coloured top-line of text (red for
1.666, blue for 1.9 iirc)","I'm not going to lie on this one - I would love this if we ever make some sort of ""authentic"" mode, mimicking DOS font and all. ;)
SDL2 project anyone?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,690,2016-04-01T08:30:32Z,2016-04-01T17:02:40Z,2016-04-02T15:28:46Z,CLOSED,False,17,7,1,https://github.com/jmtd,"Bring back the classic Doom ""hit enter"" behaviour",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/690,https://github.com/fragglet,9,https://github.com/chocolate-doom/chocolate-doom/pull/690#issuecomment-204472171,"When playing PWADs with classic Doom, you always got the ""this game
has been modified"" banner and had to hit enter to continue.  If you
played a lot of PWADs, you got used to hitting enter regularly.  It
became a core part of the Doom-playing experience. Even if you used
one of those lovely launchers that came on the shovelware CDs which
streamlined the PWAD choosing experience, you always had to hit the
enter key.
This commit restores this classic behaviour and allows those who
still have the muscle-memory ""hit enter"" behaviour permanently
burned into their nervous systems to finally be at peace.
TODO for a future commit: the coloured top-line of text (red for
1.666, blue for 1.9 iirc)",This is the best kind of April Fools prank to be honest - right on the edge of something that someone might legitimately propose for Chocolate Doom. Who would have thought that Poe's Law would also apply to Doom source ports?,True,{'HOORAY': ['https://github.com/jmtd']}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,690,2016-04-01T08:30:32Z,2016-04-01T17:02:40Z,2016-04-02T15:28:46Z,CLOSED,False,17,7,1,https://github.com/jmtd,"Bring back the classic Doom ""hit enter"" behaviour",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/690,https://github.com/haleyjd,10,https://github.com/chocolate-doom/chocolate-doom/pull/690#issuecomment-204585569,"When playing PWADs with classic Doom, you always got the ""this game
has been modified"" banner and had to hit enter to continue.  If you
played a lot of PWADs, you got used to hitting enter regularly.  It
became a core part of the Doom-playing experience. Even if you used
one of those lovely launchers that came on the shovelware CDs which
streamlined the PWAD choosing experience, you always had to hit the
enter key.
This commit restores this classic behaviour and allows those who
still have the muscle-memory ""hit enter"" behaviour permanently
burned into their nervous systems to finally be at peace.
TODO for a future commit: the coloured top-line of text (red for
1.666, blue for 1.9 iirc)","The whole situation would be resolved if the text pre-start was managed via libtextscreen (like ENDOOM handling).

Actually that would be good for Heretic. Isn't its entire text mode intro currently unimplemented? :)",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,690,2016-04-01T08:30:32Z,2016-04-01T17:02:40Z,2016-04-02T15:28:46Z,CLOSED,False,17,7,1,https://github.com/jmtd,"Bring back the classic Doom ""hit enter"" behaviour",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/690,https://github.com/fragglet,11,https://github.com/chocolate-doom/chocolate-doom/pull/690#issuecomment-204586463,"When playing PWADs with classic Doom, you always got the ""this game
has been modified"" banner and had to hit enter to continue.  If you
played a lot of PWADs, you got used to hitting enter regularly.  It
became a core part of the Doom-playing experience. Even if you used
one of those lovely launchers that came on the shovelware CDs which
streamlined the PWAD choosing experience, you always had to hit the
enter key.
This commit restores this classic behaviour and allows those who
still have the muscle-memory ""hit enter"" behaviour permanently
burned into their nervous systems to finally be at peace.
TODO for a future commit: the coloured top-line of text (red for
1.666, blue for 1.9 iirc)","Nope, the Heretic text mode startup should be there.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,690,2016-04-01T08:30:32Z,2016-04-01T17:02:40Z,2016-04-02T15:28:46Z,CLOSED,False,17,7,1,https://github.com/jmtd,"Bring back the classic Doom ""hit enter"" behaviour",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/690,https://github.com/leilei-,12,https://github.com/chocolate-doom/chocolate-doom/pull/690#issuecomment-204630437,"When playing PWADs with classic Doom, you always got the ""this game
has been modified"" banner and had to hit enter to continue.  If you
played a lot of PWADs, you got used to hitting enter regularly.  It
became a core part of the Doom-playing experience. Even if you used
one of those lovely launchers that came on the shovelware CDs which
streamlined the PWAD choosing experience, you always had to hit the
enter key.
This commit restores this classic behaviour and allows those who
still have the muscle-memory ""hit enter"" behaviour permanently
burned into their nervous systems to finally be at peace.
TODO for a future commit: the coloured top-line of text (red for
1.666, blue for 1.9 iirc)","TODO for a future commit: the coloured top-line of text (red for 1.666, blue for 1.9 iirc)

It was darkblue/yellow from 0.99 till 1.666 when that turned DarkRed/white. 1.9 was darkwhite/lightblack",True,{'THUMBS_UP': ['https://github.com/jmtd']}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,690,2016-04-01T08:30:32Z,2016-04-01T17:02:40Z,2016-04-02T15:28:46Z,CLOSED,False,17,7,1,https://github.com/jmtd,"Bring back the classic Doom ""hit enter"" behaviour",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/690,https://github.com/fabiangreffrath,13,https://github.com/chocolate-doom/chocolate-doom/pull/690#issuecomment-204737556,"When playing PWADs with classic Doom, you always got the ""this game
has been modified"" banner and had to hit enter to continue.  If you
played a lot of PWADs, you got used to hitting enter regularly.  It
became a core part of the Doom-playing experience. Even if you used
one of those lovely launchers that came on the shovelware CDs which
streamlined the PWAD choosing experience, you always had to hit the
enter key.
This commit restores this classic behaviour and allows those who
still have the muscle-memory ""hit enter"" behaviour permanently
burned into their nervous systems to finally be at peace.
TODO for a future commit: the coloured top-line of text (red for
1.666, blue for 1.9 iirc)","Am Freitag, den 01.04.2016, 08:21 -0700 schrieb Jonathan Dowland:

Is this the subtlest April Fools joke??
@linguica wins!!!

Very well played, Jon! ;)
 - Fabian",True,{'THUMBS_UP': ['https://github.com/jmtd']}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,691,2016-04-04T21:04:46Z,2016-04-07T23:58:09Z,2016-04-08T20:48:30Z,MERGED,True,35,267,3,https://github.com/jmtd,Input-related fixups for textscreen/setup in SDL2,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/691,https://github.com/jmtd,1,https://github.com/chocolate-doom/chocolate-doom/pull/691,"Remove some ""SDL2-TODO"" comments where no further work is needed.
Simplify the resolution selection in setup by removing the windowed/fullscreen toggle and all the heuristic support code for finding a fullscreen resolution that is not relevant to the sdl2 approach.
Copy some of the input changes from i_input to textscreen to fix accessing menus etc. in setup.
Further work is needed on setup relating to text input, but nothing that is a regression from sdl1 so far as I can see!
(oddly this is a net code reduction of 220 lines)","Remove some ""SDL2-TODO"" comments where no further work is needed.
Simplify the resolution selection in setup by removing the windowed/fullscreen toggle and all the heuristic support code for finding a fullscreen resolution that is not relevant to the sdl2 approach.
Copy some of the input changes from i_input to textscreen to fix accessing menus etc. in setup.
Further work is needed on setup relating to text input, but nothing that is a regression from sdl1 so far as I can see!
(oddly this is a net code reduction of 220 lines)",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,691,2016-04-04T21:04:46Z,2016-04-07T23:58:09Z,2016-04-08T20:48:30Z,MERGED,True,35,267,3,https://github.com/jmtd,Input-related fixups for textscreen/setup in SDL2,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/691,https://github.com/jmtd,2,https://github.com/chocolate-doom/chocolate-doom/pull/691#issuecomment-205676823,"Remove some ""SDL2-TODO"" comments where no further work is needed.
Simplify the resolution selection in setup by removing the windowed/fullscreen toggle and all the heuristic support code for finding a fullscreen resolution that is not relevant to the sdl2 approach.
Copy some of the input changes from i_input to textscreen to fix accessing menus etc. in setup.
Further work is needed on setup relating to text input, but nothing that is a regression from sdl1 so far as I can see!
(oddly this is a net code reduction of 220 lines)",The same as if it were off:,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,691,2016-04-04T21:04:46Z,2016-04-07T23:58:09Z,2016-04-08T20:48:30Z,MERGED,True,35,267,3,https://github.com/jmtd,Input-related fixups for textscreen/setup in SDL2,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/691,https://github.com/fabiangreffrath,3,https://github.com/chocolate-doom/chocolate-doom/pull/691#issuecomment-206505464,"Remove some ""SDL2-TODO"" comments where no further work is needed.
Simplify the resolution selection in setup by removing the windowed/fullscreen toggle and all the heuristic support code for finding a fullscreen resolution that is not relevant to the sdl2 approach.
Copy some of the input changes from i_input to textscreen to fix accessing menus etc. in setup.
Further work is needed on setup relating to text input, but nothing that is a regression from sdl1 so far as I can see!
(oddly this is a net code reduction of 220 lines)","The ""Video scaling"" box shouldn't be there, it is misleading. In the SDL2-branch, in fullscreen mode the framebuffer content is scaled up to fill the entire screen, regardless of and without changing its original resolution.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,691,2016-04-04T21:04:46Z,2016-04-07T23:58:09Z,2016-04-08T20:48:30Z,MERGED,True,35,267,3,https://github.com/jmtd,Input-related fixups for textscreen/setup in SDL2,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/691,https://github.com/fragglet,4,https://github.com/chocolate-doom/chocolate-doom/pull/691#issuecomment-206520321,"Remove some ""SDL2-TODO"" comments where no further work is needed.
Simplify the resolution selection in setup by removing the windowed/fullscreen toggle and all the heuristic support code for finding a fullscreen resolution that is not relevant to the sdl2 approach.
Copy some of the input changes from i_input to textscreen to fix accessing menus etc. in setup.
Further work is needed on setup relating to text input, but nothing that is a regression from sdl1 so far as I can see!
(oddly this is a net code reduction of 220 lines)","I agree with Fabian that it's misleading - especially if people are coming from previous versions of Chocolate Doom where they'll expect that to mean the full screen resolution.
I'm wondering if there's any value in keeping the ability to set the fullscreen mode to use. My previous assumption was that would be what we'd do, but Fabian called that into question and I'm hard-pressed to justify it, given that most monitors nowadays are flatpanel LCDs and we should ideally just run at the native resolution.
Perhaps the simplest solution is to change the ""Video scaling"" label to something more appropriate, like ""Window size"" for example.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,691,2016-04-04T21:04:46Z,2016-04-07T23:58:09Z,2016-04-08T20:48:30Z,MERGED,True,35,267,3,https://github.com/jmtd,Input-related fixups for textscreen/setup in SDL2,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/691,https://github.com/jmtd,5,https://github.com/chocolate-doom/chocolate-doom/pull/691#issuecomment-206530162,"Remove some ""SDL2-TODO"" comments where no further work is needed.
Simplify the resolution selection in setup by removing the windowed/fullscreen toggle and all the heuristic support code for finding a fullscreen resolution that is not relevant to the sdl2 approach.
Copy some of the input changes from i_input to textscreen to fix accessing menus etc. in setup.
Further work is needed on setup relating to text input, but nothing that is a regression from sdl1 so far as I can see!
(oddly this is a net code reduction of 220 lines)","Gentlemen, just to be absolutely clear, the fullscreen radio is one thing, and the list of resolutions there is something else entirely: it's the windowed resolution, i.e. the software scaler. If you untoggle fullscreen, the list of resolutions there is unchanged. I deleted all the fullscreen resolution selection code from setup.
I guess this discussion makes it clear that the label ""Video scaling"" is a misleading label. I can't think of a better one right now. I'd perhaps consider moving the fullscreen radio below the list and adding a header toe the area with the fullscreen radio labelled 'options' to try and further emphasise that they are not related.
I'd agree that right now we should just not support changing the OS resolution (for the avoidance of confusion, I like to refer to that as mode-setting). If we bring it back in future, make it a buried advanced option and possibly require the user to supply integers for width/height rather than perform any probing.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,691,2016-04-04T21:04:46Z,2016-04-07T23:58:09Z,2016-04-08T20:48:30Z,MERGED,True,35,267,3,https://github.com/jmtd,Input-related fixups for textscreen/setup in SDL2,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/691,https://github.com/jmtd,6,https://github.com/chocolate-doom/chocolate-doom/pull/691#issuecomment-206556195,"Remove some ""SDL2-TODO"" comments where no further work is needed.
Simplify the resolution selection in setup by removing the windowed/fullscreen toggle and all the heuristic support code for finding a fullscreen resolution that is not relevant to the sdl2 approach.
Copy some of the input changes from i_input to textscreen to fix accessing menus etc. in setup.
Further work is needed on setup relating to text input, but nothing that is a regression from sdl1 so far as I can see!
(oddly this is a net code reduction of 220 lines)","OK I've force-pushed a rebase which does not rename ""Window size"" to ""Video scaling"". Hopefully that is a bit clearer, although it's obviously still potentially confusing since the option has relevance whether you are in fullscreen or not. I haven't re-arranged the order of widgets yet.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,691,2016-04-04T21:04:46Z,2016-04-07T23:58:09Z,2016-04-08T20:48:30Z,MERGED,True,35,267,3,https://github.com/jmtd,Input-related fixups for textscreen/setup in SDL2,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/691,https://github.com/jmtd,7,https://github.com/chocolate-doom/chocolate-doom/pull/691#issuecomment-206557977,"Remove some ""SDL2-TODO"" comments where no further work is needed.
Simplify the resolution selection in setup by removing the windowed/fullscreen toggle and all the heuristic support code for finding a fullscreen resolution that is not relevant to the sdl2 approach.
Copy some of the input changes from i_input to textscreen to fix accessing menus etc. in setup.
Further work is needed on setup relating to text input, but nothing that is a regression from sdl1 so far as I can see!
(oddly this is a net code reduction of 220 lines)",What do you think of this arrangement?,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,691,2016-04-04T21:04:46Z,2016-04-07T23:58:09Z,2016-04-08T20:48:30Z,MERGED,True,35,267,3,https://github.com/jmtd,Input-related fixups for textscreen/setup in SDL2,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/691,https://github.com/fragglet,8,https://github.com/chocolate-doom/chocolate-doom/pull/691#issuecomment-206559234,"Remove some ""SDL2-TODO"" comments where no further work is needed.
Simplify the resolution selection in setup by removing the windowed/fullscreen toggle and all the heuristic support code for finding a fullscreen resolution that is not relevant to the sdl2 approach.
Copy some of the input changes from i_input to textscreen to fix accessing menus etc. in setup.
Further work is needed on setup relating to text input, but nothing that is a regression from sdl1 so far as I can see!
(oddly this is a net code reduction of 220 lines)","Gentlemen, just to be absolutely clear, the fullscreen radio is one thing, and the list of resolutions there is something else entirely: it's the windowed resolution, i.e. the software scaler. If you untoggle fullscreen, the list of resolutions there is unchanged. I deleted all the fullscreen resolution selection code from setup.

Understood. It's just potentially confusing because the current behavior of Chocolate Doom is that the radio buttons indicate either screen mode or window size depending on whether fullscreen is enabled or not. Current users might be confused once that's no longer the case.

I'd agree that right now we should just not support changing the OS resolution (for the avoidance of confusion, I like to refer to that as mode-setting). If we bring it back in future, make it a buried advanced option and possibly require the user to supply integers for width/height rather than perform any probing.

I agree, and I think that this is one instance where instructing users to edit their chocolate-doom.cfg to achieve the desired effect is reasonable (not everything needs to be exposed in the setup tool interface, neither should it be).",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,691,2016-04-04T21:04:46Z,2016-04-07T23:58:09Z,2016-04-08T20:48:30Z,MERGED,True,35,267,3,https://github.com/jmtd,Input-related fixups for textscreen/setup in SDL2,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/691,https://github.com/jmtd,9,https://github.com/chocolate-doom/chocolate-doom/pull/691#issuecomment-206560054,"Remove some ""SDL2-TODO"" comments where no further work is needed.
Simplify the resolution selection in setup by removing the windowed/fullscreen toggle and all the heuristic support code for finding a fullscreen resolution that is not relevant to the sdl2 approach.
Copy some of the input changes from i_input to textscreen to fix accessing menus etc. in setup.
Further work is needed on setup relating to text input, but nothing that is a regression from sdl1 so far as I can see!
(oddly this is a net code reduction of 220 lines)",I've just pushed a clean-up that removes the code to change the option name and re-orders the elements as in that picture. I think it helps to clear things up.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,691,2016-04-04T21:04:46Z,2016-04-07T23:58:09Z,2016-04-08T20:48:30Z,MERGED,True,35,267,3,https://github.com/jmtd,Input-related fixups for textscreen/setup in SDL2,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/691,https://github.com/fragglet,10,https://github.com/chocolate-doom/chocolate-doom/pull/691#issuecomment-206560695,"Remove some ""SDL2-TODO"" comments where no further work is needed.
Simplify the resolution selection in setup by removing the windowed/fullscreen toggle and all the heuristic support code for finding a fullscreen resolution that is not relevant to the sdl2 approach.
Copy some of the input changes from i_input to textscreen to fix accessing menus etc. in setup.
Further work is needed on setup relating to text input, but nothing that is a regression from sdl1 so far as I can see!
(oddly this is a net code reduction of 220 lines)","What do you think of this arrangement?

Looks good. Note that one feature that should be in the v3 release is the ability to toggle between windowed/fullscreen. Once we do that, it might be nice to include a brief comment below the fullscreen checkbox explaining that this can be toggled in game using [whatever key combo we think is appropriate].",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,691,2016-04-04T21:04:46Z,2016-04-07T23:58:09Z,2016-04-08T20:48:30Z,MERGED,True,35,267,3,https://github.com/jmtd,Input-related fixups for textscreen/setup in SDL2,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/691,https://github.com/jmtd,11,https://github.com/chocolate-doom/chocolate-doom/pull/691#issuecomment-206561967,"Remove some ""SDL2-TODO"" comments where no further work is needed.
Simplify the resolution selection in setup by removing the windowed/fullscreen toggle and all the heuristic support code for finding a fullscreen resolution that is not relevant to the sdl2 approach.
Copy some of the input changes from i_input to textscreen to fix accessing menus etc. in setup.
Further work is needed on setup relating to text input, but nothing that is a regression from sdl1 so far as I can see!
(oddly this is a net code reduction of 220 lines)","Great -- any other changes you want here, please let me know. Next time I think I'll finally look at the joystick code (unless there's any help I can offer in nukeykt's PR)",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,691,2016-04-04T21:04:46Z,2016-04-07T23:58:09Z,2016-04-08T20:48:30Z,MERGED,True,35,267,3,https://github.com/jmtd,Input-related fixups for textscreen/setup in SDL2,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/691,https://github.com/fabiangreffrath,12,https://github.com/chocolate-doom/chocolate-doom/pull/691#issuecomment-207048532,"Remove some ""SDL2-TODO"" comments where no further work is needed.
Simplify the resolution selection in setup by removing the windowed/fullscreen toggle and all the heuristic support code for finding a fullscreen resolution that is not relevant to the sdl2 approach.
Copy some of the input changes from i_input to textscreen to fix accessing menus etc. in setup.
Further work is needed on setup relating to text input, but nothing that is a regression from sdl1 so far as I can see!
(oddly this is a net code reduction of 220 lines)","What do you think of this arrangement?

Better, but I am still not convinced. It just feels wrong to have a choice of resolution if ""Fullscreen"" is selected, regardless of the box is titled ""Window size"" or ""Video scaling"" or something else.  :/",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,691,2016-04-04T21:04:46Z,2016-04-07T23:58:09Z,2016-04-08T20:48:30Z,MERGED,True,35,267,3,https://github.com/jmtd,Input-related fixups for textscreen/setup in SDL2,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/691,https://github.com/fragglet,13,https://github.com/chocolate-doom/chocolate-doom/pull/691#issuecomment-207142514,"Remove some ""SDL2-TODO"" comments where no further work is needed.
Simplify the resolution selection in setup by removing the windowed/fullscreen toggle and all the heuristic support code for finding a fullscreen resolution that is not relevant to the sdl2 approach.
Copy some of the input changes from i_input to textscreen to fix accessing menus etc. in setup.
Further work is needed on setup relating to text input, but nothing that is a regression from sdl1 so far as I can see!
(oddly this is a net code reduction of 220 lines)",I share the same concerns but I'm not sure what would be a better setup here. Let's go with this unless or until we can think of something better.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,691,2016-04-04T21:04:46Z,2016-04-07T23:58:09Z,2016-04-08T20:48:30Z,MERGED,True,35,267,3,https://github.com/jmtd,Input-related fixups for textscreen/setup in SDL2,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/691,https://github.com/fabiangreffrath,14,https://github.com/chocolate-doom/chocolate-doom/pull/691#issuecomment-207599795,"Remove some ""SDL2-TODO"" comments where no further work is needed.
Simplify the resolution selection in setup by removing the windowed/fullscreen toggle and all the heuristic support code for finding a fullscreen resolution that is not relevant to the sdl2 approach.
Copy some of the input changes from i_input to textscreen to fix accessing menus etc. in setup.
Further work is needed on setup relating to text input, but nothing that is a regression from sdl1 so far as I can see!
(oddly this is a net code reduction of 220 lines)","Couldn't we just disable the resolution box entirely if ""Fullscreen"" is enabled? I am not familiar with libtextscreen's API at all, but I assume something like this is possible?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,695,2016-04-06T10:05:47Z,2016-06-15T08:06:30Z,2016-06-15T08:06:30Z,CLOSED,False,440,263,15,https://github.com/nukeykt,Improved video code for SDL2 branch,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/695,https://github.com/nukeykt,1,https://github.com/chocolate-doom/chocolate-doom/pull/695,"Implementation is based on my pcdoom port video code, which is very close to vanilla. It brings back dirty rect mechanism and HOM shimmering effect. Also it fixes disk icon issues.","Implementation is based on my pcdoom port video code, which is very close to vanilla. It brings back dirty rect mechanism and HOM shimmering effect. Also it fixes disk icon issues.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,695,2016-04-06T10:05:47Z,2016-06-15T08:06:30Z,2016-06-15T08:06:30Z,CLOSED,False,440,263,15,https://github.com/nukeykt,Improved video code for SDL2 branch,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/695,https://github.com/jmtd,2,https://github.com/chocolate-doom/chocolate-doom/pull/695#issuecomment-206501302,"Implementation is based on my pcdoom port video code, which is very close to vanilla. It brings back dirty rect mechanism and HOM shimmering effect. Also it fixes disk icon issues.","Nice, what a coincidence, I sat down this evening to basically try to do exactly this :)
I did wonder if it would be possible to revert the LUT (ylookup) back to just one table, calculated against the base I_VideoBuffer (screenbuffer->pixels), but all the lines that use ylookup apply an offset to the active buffer, so it is just handled with pointer arithmetic? I might try this tonight, if I get some time, to see if that looks ""cleaner"" too. However I haven't figured out what I_VideoBuffer is in your code now, it's not an SDL_Surface since you alloc it with ZMalloc, I guess I need to read this more carefully.
Finally I wondered whether to avoid adding a parameter to I_InitGraphics (and therefore having to update all callers, even ones not using mode y) and instead either have a separate init function to set mode_y or simply have the doom code set mode_y global directly before calling I_InitGraphics, but not sure if that would actually be nicer or not.
I like that the flashing disk icon code changes here are a net reduction in code. Am I reading this right that the whole screen is force updated on each BeginRead and EndRead call? Is that right?
I should probably add that one of @fragglet or I think @fabiangreffrath will have to decide to merge this.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,695,2016-04-06T10:05:47Z,2016-06-15T08:06:30Z,2016-06-15T08:06:30Z,CLOSED,False,440,263,15,https://github.com/nukeykt,Improved video code for SDL2 branch,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/695,https://github.com/jmtd,3,https://github.com/chocolate-doom/chocolate-doom/pull/695#issuecomment-223825017,"Implementation is based on my pcdoom port video code, which is very close to vanilla. It brings back dirty rect mechanism and HOM shimmering effect. Also it fixes disk icon issues.","Hi guys, it's great that we are seeing a lot of movement on the sdl2-branch at the moment, but would someone else be prepared to take a look at this before we drift too far from where it branched? It's a big scary change and people might have some opinions on the implementation, but the feature itself is great IMHO and it's something I'd love to see merged. I was a little surprised to see more work on diskicon take place before this was reviewed, since this/the related changes by nukeykt touch the same area.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,696,2016-04-07T07:19:53Z,2016-05-05T11:39:20Z,2016-05-05T11:39:20Z,MERGED,True,22,0,1,https://github.com/jmtd,[sdl2-branch] toggle fullscreen with cmd+enter,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/696,https://github.com/jmtd,1,https://github.com/chocolate-doom/chocolate-doom/pull/696,"This morning's breakfast coding... Only tested on Mac so far
Special-case listen for LGUI/RGUI + enter (which is Command on Mac;
Windows key on Windows; Meta or whatever on Linux) and toggle
fullscreen.
We might want to handle Mac slightly differently: I think the OS itself
basically does the equivalent of SDL's FULLSCREEN_WINDOWED whenever something
tries to become fullscreen. As things currently stand, this works on Mac, and
you can additionally fullscreen by clicking the green fullscreen (formerly
maximize) icon in the window titlebar. Switching from/to fullscreen between
fullscreen-via-shortcut or fullscreen-via-maximize button works as expected.
However, when you are fullscreen-via-maximize-button, if you push the mouse
pointer to the top edge, the titlebar scrolls down and you could click to
de-maximize. This does not happen if you are fullscreen-via-shortcut. Further
investigation required.","This morning's breakfast coding... Only tested on Mac so far
Special-case listen for LGUI/RGUI + enter (which is Command on Mac;
Windows key on Windows; Meta or whatever on Linux) and toggle
fullscreen.
We might want to handle Mac slightly differently: I think the OS itself
basically does the equivalent of SDL's FULLSCREEN_WINDOWED whenever something
tries to become fullscreen. As things currently stand, this works on Mac, and
you can additionally fullscreen by clicking the green fullscreen (formerly
maximize) icon in the window titlebar. Switching from/to fullscreen between
fullscreen-via-shortcut or fullscreen-via-maximize button works as expected.
However, when you are fullscreen-via-maximize-button, if you push the mouse
pointer to the top edge, the titlebar scrolls down and you could click to
de-maximize. This does not happen if you are fullscreen-via-shortcut. Further
investigation required.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,696,2016-04-07T07:19:53Z,2016-05-05T11:39:20Z,2016-05-05T11:39:20Z,MERGED,True,22,0,1,https://github.com/jmtd,[sdl2-branch] toggle fullscreen with cmd+enter,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/696,https://github.com/jmtd,2,https://github.com/chocolate-doom/chocolate-doom/pull/696#issuecomment-206736745,"This morning's breakfast coding... Only tested on Mac so far
Special-case listen for LGUI/RGUI + enter (which is Command on Mac;
Windows key on Windows; Meta or whatever on Linux) and toggle
fullscreen.
We might want to handle Mac slightly differently: I think the OS itself
basically does the equivalent of SDL's FULLSCREEN_WINDOWED whenever something
tries to become fullscreen. As things currently stand, this works on Mac, and
you can additionally fullscreen by clicking the green fullscreen (formerly
maximize) icon in the window titlebar. Switching from/to fullscreen between
fullscreen-via-shortcut or fullscreen-via-maximize button works as expected.
However, when you are fullscreen-via-maximize-button, if you push the mouse
pointer to the top edge, the titlebar scrolls down and you could click to
de-maximize. This does not happen if you are fullscreen-via-shortcut. Further
investigation required.","SDL_SetHint(SDL_HINT_VIDEO_MAC_FULLSCREEN_SPACES, ""1""); does not appear to be sufficient to improve the mac behaviour. OTOH, it seems that SDL2 is defaulting to using Spaces (what that hint asks for) anyway. I suspect the difference of behaviour between Command+Enter with this patch, and clicking the Maximize button, is an SDL2 issue or bug (and not all that serious)",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,696,2016-04-07T07:19:53Z,2016-05-05T11:39:20Z,2016-05-05T11:39:20Z,MERGED,True,22,0,1,https://github.com/jmtd,[sdl2-branch] toggle fullscreen with cmd+enter,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/696,https://github.com/fragglet,3,https://github.com/chocolate-doom/chocolate-doom/pull/696#issuecomment-207143447,"This morning's breakfast coding... Only tested on Mac so far
Special-case listen for LGUI/RGUI + enter (which is Command on Mac;
Windows key on Windows; Meta or whatever on Linux) and toggle
fullscreen.
We might want to handle Mac slightly differently: I think the OS itself
basically does the equivalent of SDL's FULLSCREEN_WINDOWED whenever something
tries to become fullscreen. As things currently stand, this works on Mac, and
you can additionally fullscreen by clicking the green fullscreen (formerly
maximize) icon in the window titlebar. Switching from/to fullscreen between
fullscreen-via-shortcut or fullscreen-via-maximize button works as expected.
However, when you are fullscreen-via-maximize-button, if you push the mouse
pointer to the top edge, the titlebar scrolls down and you could click to
de-maximize. This does not happen if you are fullscreen-via-shortcut. Further
investigation required.",Thanks for doing this!,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,696,2016-04-07T07:19:53Z,2016-05-05T11:39:20Z,2016-05-05T11:39:20Z,MERGED,True,22,0,1,https://github.com/jmtd,[sdl2-branch] toggle fullscreen with cmd+enter,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/696,https://github.com/jmtd,4,https://github.com/chocolate-doom/chocolate-doom/pull/696#issuecomment-207241187,"This morning's breakfast coding... Only tested on Mac so far
Special-case listen for LGUI/RGUI + enter (which is Command on Mac;
Windows key on Windows; Meta or whatever on Linux) and toggle
fullscreen.
We might want to handle Mac slightly differently: I think the OS itself
basically does the equivalent of SDL's FULLSCREEN_WINDOWED whenever something
tries to become fullscreen. As things currently stand, this works on Mac, and
you can additionally fullscreen by clicking the green fullscreen (formerly
maximize) icon in the window titlebar. Switching from/to fullscreen between
fullscreen-via-shortcut or fullscreen-via-maximize button works as expected.
However, when you are fullscreen-via-maximize-button, if you push the mouse
pointer to the top edge, the titlebar scrolls down and you could click to
de-maximize. This does not happen if you are fullscreen-via-shortcut. Further
investigation required.","Can you just move everything into i_video.c, since that's part of the input processing chain anyway? ie. intercept the fullscreen keypress before in I_GetEvent before it's even passed to the code in i_input.c.

That makes for a much smaller patch, thanks for the suggestion: force-pushed.

Thanks for doing this!

You're welcome!
I've just discovered a bug that is exposed by this patch (but not caused by it, kinda): If you start windowed, then switch to fullscreen and quit the game without returning to windowed,  your settings CFG has the desired (windowed) resolution changed up to something related to the fullscreen/display size. E.g. in my case up from 800x600 to 1280x960. (my native resolution is actually 2560x1600 though)
This happens without this patch if you trigger fullscreen by clicking the OS X ""fullscreen""/maximize button.
I'll take a look sometime soon...",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,696,2016-04-07T07:19:53Z,2016-05-05T11:39:20Z,2016-05-05T11:39:20Z,MERGED,True,22,0,1,https://github.com/jmtd,[sdl2-branch] toggle fullscreen with cmd+enter,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/696,https://github.com/linguica,5,https://github.com/chocolate-doom/chocolate-doom/pull/696#issuecomment-207471605,"This morning's breakfast coding... Only tested on Mac so far
Special-case listen for LGUI/RGUI + enter (which is Command on Mac;
Windows key on Windows; Meta or whatever on Linux) and toggle
fullscreen.
We might want to handle Mac slightly differently: I think the OS itself
basically does the equivalent of SDL's FULLSCREEN_WINDOWED whenever something
tries to become fullscreen. As things currently stand, this works on Mac, and
you can additionally fullscreen by clicking the green fullscreen (formerly
maximize) icon in the window titlebar. Switching from/to fullscreen between
fullscreen-via-shortcut or fullscreen-via-maximize button works as expected.
However, when you are fullscreen-via-maximize-button, if you push the mouse
pointer to the top edge, the titlebar scrolls down and you could click to
de-maximize. This does not happen if you are fullscreen-via-shortcut. Further
investigation required.","Please, please, please do not make Winkey+Enter the command for changing between windowed and fullscreen. I understand that using alt-enter might have an undesirable side effect if someone happens to be typing a chat message while continuing to hold down their strafe key (for some strange reason), but this extremely minor and unlikely occurrence is not worth breaking a universal key combination that has now been in use for... close to two decades I imagine?
edit: also FWIW, Dosbox on Mac uses option+enter for fullscreening, not cmd-enter.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,696,2016-04-07T07:19:53Z,2016-05-05T11:39:20Z,2016-05-05T11:39:20Z,MERGED,True,22,0,1,https://github.com/jmtd,[sdl2-branch] toggle fullscreen with cmd+enter,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/696,https://github.com/fragglet,6,https://github.com/chocolate-doom/chocolate-doom/pull/696#issuecomment-207477219,"This morning's breakfast coding... Only tested on Mac so far
Special-case listen for LGUI/RGUI + enter (which is Command on Mac;
Windows key on Windows; Meta or whatever on Linux) and toggle
fullscreen.
We might want to handle Mac slightly differently: I think the OS itself
basically does the equivalent of SDL's FULLSCREEN_WINDOWED whenever something
tries to become fullscreen. As things currently stand, this works on Mac, and
you can additionally fullscreen by clicking the green fullscreen (formerly
maximize) icon in the window titlebar. Switching from/to fullscreen between
fullscreen-via-shortcut or fullscreen-via-maximize button works as expected.
However, when you are fullscreen-via-maximize-button, if you push the mouse
pointer to the top edge, the titlebar scrolls down and you could click to
de-maximize. This does not happen if you are fullscreen-via-shortcut. Further
investigation required.","I guess Ling has a point. Winkey+Enter seemed like the safe choice just because Windows keys didn't even exist back when Doom was released, so there's no way for it to conflict. But alt+enter is universally recognized as the fullscreen toggle. You could even perhaps make the argument that it's somehow reproducing the behavior of Vanilla Doom running under Windows 95 :)
So yeah, I vote for changing this to alt+enter.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,696,2016-04-07T07:19:53Z,2016-05-05T11:39:20Z,2016-05-05T11:39:20Z,MERGED,True,22,0,1,https://github.com/jmtd,[sdl2-branch] toggle fullscreen with cmd+enter,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/696,https://github.com/fragglet,7,https://github.com/chocolate-doom/chocolate-doom/pull/696#issuecomment-207477832,"This morning's breakfast coding... Only tested on Mac so far
Special-case listen for LGUI/RGUI + enter (which is Command on Mac;
Windows key on Windows; Meta or whatever on Linux) and toggle
fullscreen.
We might want to handle Mac slightly differently: I think the OS itself
basically does the equivalent of SDL's FULLSCREEN_WINDOWED whenever something
tries to become fullscreen. As things currently stand, this works on Mac, and
you can additionally fullscreen by clicking the green fullscreen (formerly
maximize) icon in the window titlebar. Switching from/to fullscreen between
fullscreen-via-shortcut or fullscreen-via-maximize button works as expected.
However, when you are fullscreen-via-maximize-button, if you push the mouse
pointer to the top edge, the titlebar scrolls down and you could click to
de-maximize. This does not happen if you are fullscreen-via-shortcut. Further
investigation required.","your settings CFG has the desired (windowed) resolution changed up to something related to the fullscreen/display size.

Seems like this probably fits with the ""don't save video changes"" change I included in the v3 announce email (see #212).",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,696,2016-04-07T07:19:53Z,2016-05-05T11:39:20Z,2016-05-05T11:39:20Z,MERGED,True,22,0,1,https://github.com/jmtd,[sdl2-branch] toggle fullscreen with cmd+enter,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/696,https://github.com/jmtd,8,https://github.com/chocolate-doom/chocolate-doom/pull/696#issuecomment-207641594,"This morning's breakfast coding... Only tested on Mac so far
Special-case listen for LGUI/RGUI + enter (which is Command on Mac;
Windows key on Windows; Meta or whatever on Linux) and toggle
fullscreen.
We might want to handle Mac slightly differently: I think the OS itself
basically does the equivalent of SDL's FULLSCREEN_WINDOWED whenever something
tries to become fullscreen. As things currently stand, this works on Mac, and
you can additionally fullscreen by clicking the green fullscreen (formerly
maximize) icon in the window titlebar. Switching from/to fullscreen between
fullscreen-via-shortcut or fullscreen-via-maximize button works as expected.
However, when you are fullscreen-via-maximize-button, if you push the mouse
pointer to the top edge, the titlebar scrolls down and you could click to
de-maximize. This does not happen if you are fullscreen-via-shortcut. Further
investigation required.","I agree with @linguica's reasoning for Windows. I think consensus on other platforms is less clear, in particular command+enter seems (more) common on Mac. How's the new patch look: alt+enter on windows, command+enter everywhere else? It would also be easy to make the windows special-casing be additionally alt+enter.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,696,2016-04-07T07:19:53Z,2016-05-05T11:39:20Z,2016-05-05T11:39:20Z,MERGED,True,22,0,1,https://github.com/jmtd,[sdl2-branch] toggle fullscreen with cmd+enter,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/696,https://github.com/chungy,9,https://github.com/chocolate-doom/chocolate-doom/pull/696#issuecomment-207813125,"This morning's breakfast coding... Only tested on Mac so far
Special-case listen for LGUI/RGUI + enter (which is Command on Mac;
Windows key on Windows; Meta or whatever on Linux) and toggle
fullscreen.
We might want to handle Mac slightly differently: I think the OS itself
basically does the equivalent of SDL's FULLSCREEN_WINDOWED whenever something
tries to become fullscreen. As things currently stand, this works on Mac, and
you can additionally fullscreen by clicking the green fullscreen (formerly
maximize) icon in the window titlebar. Switching from/to fullscreen between
fullscreen-via-shortcut or fullscreen-via-maximize button works as expected.
However, when you are fullscreen-via-maximize-button, if you push the mouse
pointer to the top edge, the titlebar scrolls down and you could click to
de-maximize. This does not happen if you are fullscreen-via-shortcut. Further
investigation required.","Alt-Enter for everything would be best, honestly. I think DOSBox is an important enough precident to warrant it (even if it took the combination from Windows 9x).",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,696,2016-04-07T07:19:53Z,2016-05-05T11:39:20Z,2016-05-05T11:39:20Z,MERGED,True,22,0,1,https://github.com/jmtd,[sdl2-branch] toggle fullscreen with cmd+enter,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/696,https://github.com/jmtd,10,https://github.com/chocolate-doom/chocolate-doom/pull/696#issuecomment-207946510,"This morning's breakfast coding... Only tested on Mac so far
Special-case listen for LGUI/RGUI + enter (which is Command on Mac;
Windows key on Windows; Meta or whatever on Linux) and toggle
fullscreen.
We might want to handle Mac slightly differently: I think the OS itself
basically does the equivalent of SDL's FULLSCREEN_WINDOWED whenever something
tries to become fullscreen. As things currently stand, this works on Mac, and
you can additionally fullscreen by clicking the green fullscreen (formerly
maximize) icon in the window titlebar. Switching from/to fullscreen between
fullscreen-via-shortcut or fullscreen-via-maximize button works as expected.
However, when you are fullscreen-via-maximize-button, if you push the mouse
pointer to the top edge, the titlebar scrolls down and you could click to
de-maximize. This does not happen if you are fullscreen-via-shortcut. Further
investigation required.","I really think command+enter is a better choice on Mac. Option (alt) is rarely used as a primary modifier for any shortcut. It's true that DOSBox uses alt+enter on Mac, I suppose they've just gone with the same combination for all platforms. What about alt+enter on all platforms and special-casing command+enter in addition on Mac?
Edit: On a Mac, ""command"" is used for issuing commands, and ""option"" (aka alt) is used for changing the behaviour of a command that is being issued. You almost always see option being pressed at the same time as command. I think that's why it makes more sense to use command+enter on Mac.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,696,2016-04-07T07:19:53Z,2016-05-05T11:39:20Z,2016-05-05T11:39:20Z,MERGED,True,22,0,1,https://github.com/jmtd,[sdl2-branch] toggle fullscreen with cmd+enter,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/696,https://github.com/jmtd,11,https://github.com/chocolate-doom/chocolate-doom/pull/696#issuecomment-216477640,"This morning's breakfast coding... Only tested on Mac so far
Special-case listen for LGUI/RGUI + enter (which is Command on Mac;
Windows key on Windows; Meta or whatever on Linux) and toggle
fullscreen.
We might want to handle Mac slightly differently: I think the OS itself
basically does the equivalent of SDL's FULLSCREEN_WINDOWED whenever something
tries to become fullscreen. As things currently stand, this works on Mac, and
you can additionally fullscreen by clicking the green fullscreen (formerly
maximize) icon in the window titlebar. Switching from/to fullscreen between
fullscreen-via-shortcut or fullscreen-via-maximize button works as expected.
However, when you are fullscreen-via-maximize-button, if you push the mouse
pointer to the top edge, the titlebar scrolls down and you could click to
de-maximize. This does not happen if you are fullscreen-via-shortcut. Further
investigation required.",Does anyone have any further comments on this?,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,699,2016-04-11T15:59:22Z,2016-04-11T17:47:17Z,2016-04-11T17:47:17Z,MERGED,True,1,1,1,https://github.com/jmtd,remove 256x200 resolution option,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/699,https://github.com/jmtd,1,https://github.com/chocolate-doom/chocolate-doom/pull/699,"I cannot recall why 256x200 was included in the list, I guess there was a good
reason for it, perhaps there still is. But, I imagine it's a niche use-case, and at
present it's presented in the default list of resolutions, and also as the first one
in the list.
This resolution is a scale-down from Doom's native resolution (=lossy/lower quality).
The vast majority of chocolate-doom players will not want to use it. Balance out
the resolution table by adding 1920x1440 at the end, instead. (so the columns are
equal lengths)
Note it will still be possible for people to use 256x200 if they really
want to: you can supply any width or height in chocolate-doom.cfg, or drag to resize
the window yourself at run-time.","I cannot recall why 256x200 was included in the list, I guess there was a good
reason for it, perhaps there still is. But, I imagine it's a niche use-case, and at
present it's presented in the default list of resolutions, and also as the first one
in the list.
This resolution is a scale-down from Doom's native resolution (=lossy/lower quality).
The vast majority of chocolate-doom players will not want to use it. Balance out
the resolution table by adding 1920x1440 at the end, instead. (so the columns are
equal lengths)
Note it will still be possible for people to use 256x200 if they really
want to: you can supply any width or height in chocolate-doom.cfg, or drag to resize
the window yourself at run-time.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,699,2016-04-11T15:59:22Z,2016-04-11T17:47:17Z,2016-04-11T17:47:17Z,MERGED,True,1,1,1,https://github.com/jmtd,remove 256x200 resolution option,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/699,https://github.com/AXDOOMER,2,https://github.com/chocolate-doom/chocolate-doom/pull/699#issuecomment-208452773,"I cannot recall why 256x200 was included in the list, I guess there was a good
reason for it, perhaps there still is. But, I imagine it's a niche use-case, and at
present it's presented in the default list of resolutions, and also as the first one
in the list.
This resolution is a scale-down from Doom's native resolution (=lossy/lower quality).
The vast majority of chocolate-doom players will not want to use it. Balance out
the resolution table by adding 1920x1440 at the end, instead. (so the columns are
equal lengths)
Note it will still be possible for people to use 256x200 if they really
want to: you can supply any width or height in chocolate-doom.cfg, or drag to resize
the window yourself at run-time.",Chocolate-Doom for Windows CE is not even supported anymore. I believe 256x200 was for screens no larger than 240px.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,699,2016-04-11T15:59:22Z,2016-04-11T17:47:17Z,2016-04-11T17:47:17Z,MERGED,True,1,1,1,https://github.com/jmtd,remove 256x200 resolution option,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/699,https://github.com/fragglet,3,https://github.com/chocolate-doom/chocolate-doom/pull/699#issuecomment-208469569,"I cannot recall why 256x200 was included in the list, I guess there was a good
reason for it, perhaps there still is. But, I imagine it's a niche use-case, and at
present it's presented in the default list of resolutions, and also as the first one
in the list.
This resolution is a scale-down from Doom's native resolution (=lossy/lower quality).
The vast majority of chocolate-doom players will not want to use it. Balance out
the resolution table by adding 1920x1440 at the end, instead. (so the columns are
equal lengths)
Note it will still be possible for people to use 256x200 if they really
want to: you can supply any width or height in chocolate-doom.cfg, or drag to resize
the window yourself at run-time.","I think I mostly included it for completeness: I tried to include integer multiples of each axis (256x200 is 1x in the vertical). At one point I also had a crazy idea to do a Nintendo DS port and it would have been useful there.
But yeah, it's mostly pointless and shouldn't be in the UI. So let's get rid of it.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,700,2016-04-12T07:58:58Z,2016-06-05T04:40:46Z,2016-06-05T04:40:47Z,MERGED,True,1,1,1,https://github.com/nukeykt,opl: fix time calculation after tempo change,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/700,https://github.com/nukeykt,1,https://github.com/chocolate-doom/chocolate-doom/pull/700,Closes: #643,Closes: #643,True,"{'THUMBS_UP': ['https://github.com/jmtd', 'https://github.com/bb010g']}"
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,700,2016-04-12T07:58:58Z,2016-06-05T04:40:46Z,2016-06-05T04:40:47Z,MERGED,True,1,1,1,https://github.com/nukeykt,opl: fix time calculation after tempo change,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/700,https://github.com/jmtd,2,https://github.com/chocolate-doom/chocolate-doom/pull/700#issuecomment-208849281,Closes: #643,"LGTM! Tested av map20, seems fixed",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,701,2016-04-17T13:32:43Z,2016-04-18T13:52:35Z,2016-04-18T13:52:53Z,MERGED,True,0,4,1,https://github.com/krystalgamer,Removed non-existing files from project,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/701,https://github.com/krystalgamer,1,https://github.com/chocolate-doom/chocolate-doom/pull/701,Ttitle.,Ttitle.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,701,2016-04-17T13:32:43Z,2016-04-18T13:52:35Z,2016-04-18T13:52:53Z,MERGED,True,0,4,1,https://github.com/krystalgamer,Removed non-existing files from project,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/701,https://github.com/fragglet,2,https://github.com/chocolate-doom/chocolate-doom/pull/701#issuecomment-211390126,Ttitle.,"Thank you. For future PRs, please read CONTRIBUTING.md so you use the correct format for Git commit messages.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,702,2016-04-19T12:22:14Z,2016-05-05T14:29:58Z,2021-08-09T14:08:19Z,MERGED,True,1,1,1,https://github.com/chungy,doom: Always allow loading PWADs for Freedoom: Phase 1,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/702,https://github.com/chungy,1,https://github.com/chocolate-doom/chocolate-doom/pull/702,"With the combination of freedoom1.wad and -gameversion 1.666 through
1.9, Chocolate Doom would fail to pass the checks against loading
PWADs on the shareware version of Doom.  Checking for the FREEDOOM
lump resolves this.","With the combination of freedoom1.wad and -gameversion 1.666 through
1.9, Chocolate Doom would fail to pass the checks against loading
PWADs on the shareware version of Doom.  Checking for the FREEDOOM
lump resolves this.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,702,2016-04-19T12:22:14Z,2016-05-05T14:29:58Z,2021-08-09T14:08:19Z,MERGED,True,1,1,1,https://github.com/chungy,doom: Always allow loading PWADs for Freedoom: Phase 1,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/702,https://github.com/fabiangreffrath,2,https://github.com/chocolate-doom/chocolate-doom/pull/702#issuecomment-212070650,"With the combination of freedoom1.wad and -gameversion 1.666 through
1.9, Chocolate Doom would fail to pass the checks against loading
PWADs on the shareware version of Doom.  Checking for the FREEDOOM
lump resolves this.","Am Dienstag, den 19.04.2016, 05:22 -0700 schrieb Mike Swanson:

With the combination of freedoom1.wad and -gameversion 1.666 through
1.9, Chocolate Doom would fail to pass the checks against loading
PWADs on the shareware version of Doom. Checking for the FREEDOOM
lump resolves this.

I think it would even make sense to introduce another global variable,
e.g. gamevariant, alongside gamemode and gamemission that would
get set to either ""vanilla"", ""freedoom"", ""freedm"" or ""bfgedition"" once
at startup.
We currently have four checks for W_CheckNumForName(""FREEDOOM"") >= 0
in src/doom/*.c and already maintain a global variable bfgedition. 
What do you think?
 - Fabian",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,702,2016-04-19T12:22:14Z,2016-05-05T14:29:58Z,2021-08-09T14:08:19Z,MERGED,True,1,1,1,https://github.com/chungy,doom: Always allow loading PWADs for Freedoom: Phase 1,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/702,https://github.com/chungy,3,https://github.com/chocolate-doom/chocolate-doom/pull/702#issuecomment-212405992,"With the combination of freedoom1.wad and -gameversion 1.666 through
1.9, Chocolate Doom would fail to pass the checks against loading
PWADs on the shareware version of Doom.  Checking for the FREEDOOM
lump resolves this.","Sounds like a good idea to me, but I'd rather let fraggle make the decision :-)",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,702,2016-04-19T12:22:14Z,2016-05-05T14:29:58Z,2021-08-09T14:08:19Z,MERGED,True,1,1,1,https://github.com/chungy,doom: Always allow loading PWADs for Freedoom: Phase 1,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/702,https://github.com/fabiangreffrath,4,https://github.com/chocolate-doom/chocolate-doom/pull/702#issuecomment-212407881,"With the combination of freedoom1.wad and -gameversion 1.666 through
1.9, Chocolate Doom would fail to pass the checks against loading
PWADs on the shareware version of Doom.  Checking for the FREEDOOM
lump resolves this.","Sounds like a good idea to me, but I'd rather let fraggle make the
decision :-)

I'll file a PR soon.
Another concern: Which of these lumps is not present in freedoom1.wad
and why?
char name[23][8]=
 {
 ""e2m1"",""e2m2"",""e2m3"",""e2m4"",""e2m5"",""e2m6"",""e2m7"",""e2m8"",""e2m9"",
 ""e3m1"",""e3m3"",""e3m3"",""e3m4"",""e3m5"",""e3m6"",""e3m7"",""e3m8"",""e3m9"",
 ""dphoof"",""bfgga0"",""heada1"",""cybra1"",""spida1d1""
 };",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,702,2016-04-19T12:22:14Z,2016-05-05T14:29:58Z,2021-08-09T14:08:19Z,MERGED,True,1,1,1,https://github.com/chungy,doom: Always allow loading PWADs for Freedoom: Phase 1,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/702,https://github.com/chungy,5,https://github.com/chocolate-doom/chocolate-doom/pull/702#issuecomment-212417839,"With the combination of freedoom1.wad and -gameversion 1.666 through
1.9, Chocolate Doom would fail to pass the checks against loading
PWADs on the shareware version of Doom.  Checking for the FREEDOOM
lump resolves this.","I'm surprised that wasn't the first question. It would be spida1d1. I don't know why, actually, I want to investigate that, but I'd kind of rather nip the problem from the Chocolate Doom side anyway and avoid waiting for the perfect solution.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,702,2016-04-19T12:22:14Z,2016-05-05T14:29:58Z,2021-08-09T14:08:19Z,MERGED,True,1,1,1,https://github.com/chungy,doom: Always allow loading PWADs for Freedoom: Phase 1,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/702,https://github.com/fabiangreffrath,6,https://github.com/chocolate-doom/chocolate-doom/pull/702#issuecomment-212470545,"With the combination of freedoom1.wad and -gameversion 1.666 through
1.9, Chocolate Doom would fail to pass the checks against loading
PWADs on the shareware version of Doom.  Checking for the FREEDOOM
lump resolves this.","Am Mittwoch, den 20.04.2016, 06:11 -0700 schrieb Mike Swanson:

I'm surprised that wasn't the first question. It would be spida1d1.

Then I think that's a bug in FreeDoom, i.e. it doesn't comply with its
own design goal to provide a drop-in replacement for Vanilla DOOM.WAD.
If there are lumps missing that would be needed to identify it as
DOOM.WAD, this should get fixed in FreeDoom ASAP and not worked around
in Chocolate Doom (and possibly other source ports), IMHO.
 - Fabian",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,702,2016-04-19T12:22:14Z,2016-05-05T14:29:58Z,2021-08-09T14:08:19Z,MERGED,True,1,1,1,https://github.com/chungy,doom: Always allow loading PWADs for Freedoom: Phase 1,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/702,https://github.com/jmtd,7,https://github.com/chocolate-doom/chocolate-doom/pull/702#issuecomment-212599685,"With the combination of freedoom1.wad and -gameversion 1.666 through
1.9, Chocolate Doom would fail to pass the checks against loading
PWADs on the shareware version of Doom.  Checking for the FREEDOOM
lump resolves this.",Yes I think those lump tests are from vanilla so this needs fixing in Freedoom at least (if not instead),True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,702,2016-04-19T12:22:14Z,2016-05-05T14:29:58Z,2021-08-09T14:08:19Z,MERGED,True,1,1,1,https://github.com/chungy,doom: Always allow loading PWADs for Freedoom: Phase 1,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/702,https://github.com/chungy,8,https://github.com/chocolate-doom/chocolate-doom/pull/702#issuecomment-216018198,"With the combination of freedoom1.wad and -gameversion 1.666 through
1.9, Chocolate Doom would fail to pass the checks against loading
PWADs on the shareware version of Doom.  Checking for the FREEDOOM
lump resolves this.",Updated for the changes introduced with #703,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,702,2016-04-19T12:22:14Z,2016-05-05T14:29:58Z,2021-08-09T14:08:19Z,MERGED,True,1,1,1,https://github.com/chungy,doom: Always allow loading PWADs for Freedoom: Phase 1,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/702,https://github.com/jmtd,9,https://github.com/chocolate-doom/chocolate-doom/pull/702#issuecomment-217172990,"With the combination of freedoom1.wad and -gameversion 1.666 through
1.9, Chocolate Doom would fail to pass the checks against loading
PWADs on the shareware version of Doom.  Checking for the FREEDOOM
lump resolves this.","Fabian moved away from using bit-and for checking the gamevariant variable and just uses simple boolean equals, shouldn't we do the same for this test?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,702,2016-04-19T12:22:14Z,2016-05-05T14:29:58Z,2021-08-09T14:08:19Z,MERGED,True,1,1,1,https://github.com/chungy,doom: Always allow loading PWADs for Freedoom: Phase 1,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/702,https://github.com/chungy,10,https://github.com/chocolate-doom/chocolate-doom/pull/702#issuecomment-217175687,"With the combination of freedoom1.wad and -gameversion 1.666 through
1.9, Chocolate Doom would fail to pass the checks against loading
PWADs on the shareware version of Doom.  Checking for the FREEDOOM
lump resolves this.",D'oh. I must have missed that when scanning Fabian's commits. Thanks :),True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,702,2016-04-19T12:22:14Z,2016-05-05T14:29:58Z,2021-08-09T14:08:19Z,MERGED,True,1,1,1,https://github.com/chungy,doom: Always allow loading PWADs for Freedoom: Phase 1,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/702,https://github.com/Catoptromancy,11,https://github.com/chocolate-doom/chocolate-doom/pull/702#issuecomment-894878225,"With the combination of freedoom1.wad and -gameversion 1.666 through
1.9, Chocolate Doom would fail to pass the checks against loading
PWADs on the shareware version of Doom.  Checking for the FREEDOOM
lump resolves this.","Vanilla 1.9 and dsda-doom with -complevel 2 also do not display the fourth episode, while chocolate-doom does. I think chocolate should use the vanilla behavior and this should be fixed in freedoom.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,702,2016-04-19T12:22:14Z,2016-05-05T14:29:58Z,2021-08-09T14:08:19Z,MERGED,True,1,1,1,https://github.com/chungy,doom: Always allow loading PWADs for Freedoom: Phase 1,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/702,https://github.com/chungy,12,https://github.com/chocolate-doom/chocolate-doom/pull/702#issuecomment-895254208,"With the combination of freedoom1.wad and -gameversion 1.666 through
1.9, Chocolate Doom would fail to pass the checks against loading
PWADs on the shareware version of Doom.  Checking for the FREEDOOM
lump resolves this.","This isn't really the place to file an issue, but that being said: Chocolate Doom is doing the right thing of emulating the Ultimate Doom executable by default. If you want the other behavior, specify -gameversion 1.9",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,703,2016-04-20T15:09:01Z,2016-05-01T04:52:09Z,2016-11-17T20:34:08Z,MERGED,True,42,25,4,https://github.com/fabiangreffrath,"introduce a ""gamevariant"" variable to tell different IWADs apart",2,[],https://github.com/chocolate-doom/chocolate-doom/pull/703,https://github.com/fabiangreffrath,1,https://github.com/chocolate-doom/chocolate-doom/pull/703,"Chocolate Doom supports different variants that are available of the
IWADs, e.g. for Doom 2 it supports the Vanilla IWAD, the one shipped
with the Doom 3: BFG Edition as well as Freedoom: Phase 2 and FreeDM.
Each of these IWAD variants requires some specific special-casing and
the newly introduced global ""gamevariant"" variable can be used to keep
track of all of this.","Chocolate Doom supports different variants that are available of the
IWADs, e.g. for Doom 2 it supports the Vanilla IWAD, the one shipped
with the Doom 3: BFG Edition as well as Freedoom: Phase 2 and FreeDM.
Each of these IWAD variants requires some specific special-casing and
the newly introduced global ""gamevariant"" variable can be used to keep
track of all of this.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,703,2016-04-20T15:09:01Z,2016-05-01T04:52:09Z,2016-11-17T20:34:08Z,MERGED,True,42,25,4,https://github.com/fabiangreffrath,"introduce a ""gamevariant"" variable to tell different IWADs apart",2,[],https://github.com/chocolate-doom/chocolate-doom/pull/703,https://github.com/jmtd,2,https://github.com/chocolate-doom/chocolate-doom/pull/703#issuecomment-212598965,"Chocolate Doom supports different variants that are available of the
IWADs, e.g. for Doom 2 it supports the Vanilla IWAD, the one shipped
with the Doom 3: BFG Edition as well as Freedoom: Phase 2 and FreeDM.
Each of these IWAD variants requires some specific special-casing and
the newly introduced global ""gamevariant"" variable can be used to keep
track of all of this.","(golfing time from me!) In general I think this is much clearer, but one thing I would ask/suggest is, why not use boolean comparisons rather than bitwise AND when checking the gamevariant variable? I guess the one reason would be if something could be more than one at a time, but the only case that might apply to is freedoom and freedm, which seems to occur only once, so could just be gamemode == freedoom || gamemode == freedm and still be legible. In fact that would make line d_main line 1636 (if (gamevariant & freedoom && !(gamevariant & freedm))) simpler too. (I also left a specific line comment)
But as I say, golfing...",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,703,2016-04-20T15:09:01Z,2016-05-01T04:52:09Z,2016-11-17T20:34:08Z,MERGED,True,42,25,4,https://github.com/fabiangreffrath,"introduce a ""gamevariant"" variable to tell different IWADs apart",2,[],https://github.com/chocolate-doom/chocolate-doom/pull/703,https://github.com/jmtd,3,https://github.com/chocolate-doom/chocolate-doom/pull/703#issuecomment-213715382,"Chocolate Doom supports different variants that are available of the
IWADs, e.g. for Doom 2 it supports the Vanilla IWAD, the one shipped
with the Doom 3: BFG Edition as well as Freedoom: Phase 2 and FreeDM.
Each of these IWAD variants requires some specific special-casing and
the newly introduced global ""gamevariant"" variable can be used to keep
track of all of this.",I think that looks great. I haven' t tested it  but it looks good,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,703,2016-04-20T15:09:01Z,2016-05-01T04:52:09Z,2016-11-17T20:34:08Z,MERGED,True,42,25,4,https://github.com/fabiangreffrath,"introduce a ""gamevariant"" variable to tell different IWADs apart",2,[],https://github.com/chocolate-doom/chocolate-doom/pull/703,https://github.com/fabiangreffrath,4,https://github.com/chocolate-doom/chocolate-doom/pull/703#issuecomment-213725210,"Chocolate Doom supports different variants that are available of the
IWADs, e.g. for Doom 2 it supports the Vanilla IWAD, the one shipped
with the Doom 3: BFG Edition as well as Freedoom: Phase 2 and FreeDM.
Each of these IWAD variants requires some specific special-casing and
the newly introduced global ""gamevariant"" variable can be used to keep
track of all of this.","Am Samstag, den 23.04.2016, 03:38 -0700 schrieb Jonathan Dowland:

I think that looks great. I haven' t tested it but it looks good

Hehe, thank you!
 - Fabian",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,703,2016-04-20T15:09:01Z,2016-05-01T04:52:09Z,2016-11-17T20:34:08Z,MERGED,True,42,25,4,https://github.com/fabiangreffrath,"introduce a ""gamevariant"" variable to tell different IWADs apart",2,[],https://github.com/chocolate-doom/chocolate-doom/pull/703,https://github.com/fabiangreffrath,5,https://github.com/chocolate-doom/chocolate-doom/pull/703#issuecomment-215992086,"Chocolate Doom supports different variants that are available of the
IWADs, e.g. for Doom 2 it supports the Vanilla IWAD, the one shipped
with the Doom 3: BFG Edition as well as Freedoom: Phase 2 and FreeDM.
Each of these IWAD variants requires some specific special-casing and
the newly introduced global ""gamevariant"" variable can be used to keep
track of all of this.","Am Samstag, den 23.04.2016, 03:38 -0700 schrieb Jonathan Dowland:

I think that looks great. I haven' t tested it but it looks good

So, what does @fragglet think?
 - Fabian",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,703,2016-04-20T15:09:01Z,2016-05-01T04:52:09Z,2016-11-17T20:34:08Z,MERGED,True,42,25,4,https://github.com/fabiangreffrath,"introduce a ""gamevariant"" variable to tell different IWADs apart",2,[],https://github.com/chocolate-doom/chocolate-doom/pull/703,https://github.com/fragglet,6,https://github.com/chocolate-doom/chocolate-doom/pull/703#issuecomment-216016113,"Chocolate Doom supports different variants that are available of the
IWADs, e.g. for Doom 2 it supports the Vanilla IWAD, the one shipped
with the Doom 3: BFG Edition as well as Freedoom: Phase 2 and FreeDM.
Each of these IWAD variants requires some specific special-casing and
the newly introduced global ""gamevariant"" variable can be used to keep
track of all of this.",Looks good. Thanks!,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,705,2016-05-03T13:45:01Z,2016-05-14T18:17:03Z,2016-05-14T18:17:13Z,MERGED,True,33,5,1,https://github.com/nukeykt,"music: DMX's ""GUS instrument mappings bug"" emulation",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/705,https://github.com/nukeykt,1,https://github.com/chocolate-doom/chocolate-doom/pull/705,Closes: #704,Closes: #704,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,705,2016-05-03T13:45:01Z,2016-05-14T18:17:03Z,2016-05-14T18:17:13Z,MERGED,True,33,5,1,https://github.com/nukeykt,"music: DMX's ""GUS instrument mappings bug"" emulation",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/705,https://github.com/sneakernets,2,https://github.com/chocolate-doom/chocolate-doom/pull/705#issuecomment-216548497,Closes: #704,"I think this would be better off as a toggle-able option, since it does make some midis sound like garbage.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,705,2016-05-03T13:45:01Z,2016-05-14T18:17:03Z,2016-05-14T18:17:13Z,MERGED,True,33,5,1,https://github.com/nukeykt,"music: DMX's ""GUS instrument mappings bug"" emulation",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/705,https://github.com/fragglet,3,https://github.com/chocolate-doom/chocolate-doom/pull/705#issuecomment-216565465,Closes: #704,"I disagree. The point of the project is to emulate Vanilla. I'd rather not see superfluous options.
It's understandable people don't like this, but there's a simple solution if you want MIDI which sounds right. dgguspat.zip in the idgames archive includes multiple timidity.cfg files which you can use to get correct playback.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,705,2016-05-03T13:45:01Z,2016-05-14T18:17:03Z,2016-05-14T18:17:13Z,MERGED,True,33,5,1,https://github.com/nukeykt,"music: DMX's ""GUS instrument mappings bug"" emulation",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/705,https://github.com/sneakernets,4,https://github.com/chocolate-doom/chocolate-doom/pull/705#issuecomment-216567776,Closes: #704,"That's fine, but there is this:
timidity.cfg
 - This is the simplest configuration; it simply maps all the instruments
   from Doom's DMXGUSC lump into MIDI instruments. This is probably the
   ""best sounding"" configuration, but is historically inaccurate, because
   it uses more instruments than would ever be possible to use with a
   real GUS. If you just want to use the GUS patches, use this.

Will this still be usable, or will the instruments be mangled about?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,705,2016-05-03T13:45:01Z,2016-05-14T18:17:03Z,2016-05-14T18:17:13Z,MERGED,True,33,5,1,https://github.com/nukeykt,"music: DMX's ""GUS instrument mappings bug"" emulation",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/705,https://github.com/haleyjd,5,https://github.com/chocolate-doom/chocolate-doom/pull/705#issuecomment-216570896,Closes: #704,"Also, has this been confirmed to equally affect all 4 id Tech 1 games? Heretic & Hexen at the least use a different version of DMX so that requires consideration.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,705,2016-05-03T13:45:01Z,2016-05-14T18:17:03Z,2016-05-14T18:17:13Z,MERGED,True,33,5,1,https://github.com/nukeykt,"music: DMX's ""GUS instrument mappings bug"" emulation",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/705,https://github.com/fragglet,6,https://github.com/chocolate-doom/chocolate-doom/pull/705#issuecomment-216576135,Closes: #704,"@sneakernets - all the .cfg files in dgguspat.zip should sound ""correct"" (ie. as they currently do in Chocolate Doom) because I generated them before I knew the GUS instrument mappings bug existed.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,705,2016-05-03T13:45:01Z,2016-05-14T18:17:03Z,2016-05-14T18:17:13Z,MERGED,True,33,5,1,https://github.com/nukeykt,"music: DMX's ""GUS instrument mappings bug"" emulation",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/705,https://github.com/sneakernets,7,https://github.com/chocolate-doom/chocolate-doom/pull/705#issuecomment-216576758,Closes: #704,"Okay, thanks for clarifying - so new cfgs will be available I hope? 👍",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,705,2016-05-03T13:45:01Z,2016-05-14T18:17:03Z,2016-05-14T18:17:13Z,MERGED,True,33,5,1,https://github.com/nukeykt,"music: DMX's ""GUS instrument mappings bug"" emulation",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/705,https://github.com/fragglet,8,https://github.com/chocolate-doom/chocolate-doom/pull/705#issuecomment-216577224,Closes: #704,I'm not planning on updating dgguspat.zip. Maybe someone should leave a comment on its idgames page and mention the .cfgs are inaccurate.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,705,2016-05-03T13:45:01Z,2016-05-14T18:17:03Z,2016-05-14T18:17:13Z,MERGED,True,33,5,1,https://github.com/nukeykt,"music: DMX's ""GUS instrument mappings bug"" emulation",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/705,https://github.com/nukeykt,9,https://github.com/chocolate-doom/chocolate-doom/pull/705#issuecomment-216577805,Closes: #704,"@haleyjd I can confirm that this bug present in Doom 1.9 and DMX 3.7(I believe this version was used in Doom 1.8,1.9 and Strife) running in DOSBox. But i found cause of bug by looking DMX 3.4 source, which seems was used in Doom 2 1.666, Heretic and Hexen. So i guess all games are affected with this bug.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,705,2016-05-03T13:45:01Z,2016-05-14T18:17:03Z,2016-05-14T18:17:13Z,MERGED,True,33,5,1,https://github.com/nukeykt,"music: DMX's ""GUS instrument mappings bug"" emulation",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/705,https://github.com/fragglet,10,https://github.com/chocolate-doom/chocolate-doom/pull/705#issuecomment-219235129,Closes: #704,I think this is good to go.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,705,2016-05-03T13:45:01Z,2016-05-14T18:17:03Z,2016-05-14T18:17:13Z,MERGED,True,33,5,1,https://github.com/nukeykt,"music: DMX's ""GUS instrument mappings bug"" emulation",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/705,https://github.com/fragglet,11,https://github.com/chocolate-doom/chocolate-doom/pull/705#issuecomment-219235144,Closes: #704,Thanks @nukeykt.,True,{'THUMBS_UP': ['https://github.com/nukeykt']}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,708,2016-05-07T20:51:55Z,2016-05-07T20:53:06Z,2016-05-07T20:53:06Z,CLOSED,False,12,4,2,https://github.com/adarnon,Fixed Codeblocks projects,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/708,https://github.com/adarnon,1,https://github.com/chocolate-doom/chocolate-doom/pull/708,The codeblocks projects weren't maintained and failed compilation,The codeblocks projects weren't maintained and failed compilation,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,709,2016-05-07T20:55:40Z,2016-05-08T00:28:05Z,2016-05-09T21:56:38Z,MERGED,True,12,8,2,https://github.com/adarnon,Fixed Codeblocks projects,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/709,https://github.com/adarnon,1,https://github.com/chocolate-doom/chocolate-doom/pull/709,The codeblocks projects weren't maintained and failed compilation,The codeblocks projects weren't maintained and failed compilation,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,709,2016-05-07T20:55:40Z,2016-05-08T00:28:05Z,2016-05-09T21:56:38Z,MERGED,True,12,8,2,https://github.com/adarnon,Fixed Codeblocks projects,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/709,https://github.com/chungy,2,https://github.com/chocolate-doom/chocolate-doom/pull/709#issuecomment-217678655,The codeblocks projects weren't maintained and failed compilation,"Looks good, thanks.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,710,2016-05-08T21:10:58Z,2016-05-14T18:16:36Z,2016-05-14T18:16:36Z,MERGED,True,155,47,3,https://github.com/fragglet,joystick: Use SDL GUID to identify joysticks.,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/710,https://github.com/fragglet,1,https://github.com/chocolate-doom/chocolate-doom/pull/710,"The current configuration system uses joystick_index to identify
the joystick which is configured. This has the downside of assuming
a static configuration; joystick indexes can change if devices are
plugged or unplugged.
SDL2 introduces the idea of Joystick GUIDs which can uniquely
identify a class of device, so use this as the primary configuration
variable instead; that way, if the number or ordering of joystick
devices changes, we will still use the same device. As GUID can only
identify a ""class"" of device (eg. ""Xbox controller""), we still keep
joystick_index around to try to differentiate between devices when
there are multiple identical devices connected.","The current configuration system uses joystick_index to identify
the joystick which is configured. This has the downside of assuming
a static configuration; joystick indexes can change if devices are
plugged or unplugged.
SDL2 introduces the idea of Joystick GUIDs which can uniquely
identify a class of device, so use this as the primary configuration
variable instead; that way, if the number or ordering of joystick
devices changes, we will still use the same device. As GUID can only
identify a ""class"" of device (eg. ""Xbox controller""), we still keep
joystick_index around to try to differentiate between devices when
there are multiple identical devices connected.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,710,2016-05-08T21:10:58Z,2016-05-14T18:16:36Z,2016-05-14T18:16:36Z,MERGED,True,155,47,3,https://github.com/fragglet,joystick: Use SDL GUID to identify joysticks.,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/710,https://github.com/fragglet,2,https://github.com/chocolate-doom/chocolate-doom/pull/710#issuecomment-217752182,"The current configuration system uses joystick_index to identify
the joystick which is configured. This has the downside of assuming
a static configuration; joystick indexes can change if devices are
plugged or unplugged.
SDL2 introduces the idea of Joystick GUIDs which can uniquely
identify a class of device, so use this as the primary configuration
variable instead; that way, if the number or ordering of joystick
devices changes, we will still use the same device. As GUID can only
identify a ""class"" of device (eg. ""Xbox controller""), we still keep
joystick_index around to try to differentiate between devices when
there are multiple identical devices connected.","I promised to set an example by going through the code review process myself, so here's my first PR :)",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,710,2016-05-08T21:10:58Z,2016-05-14T18:16:36Z,2016-05-14T18:16:36Z,MERGED,True,155,47,3,https://github.com/fragglet,joystick: Use SDL GUID to identify joysticks.,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/710,https://github.com/fragglet,3,https://github.com/chocolate-doom/chocolate-doom/pull/710#issuecomment-218641021,"The current configuration system uses joystick_index to identify
the joystick which is configured. This has the downside of assuming
a static configuration; joystick indexes can change if devices are
plugged or unplugged.
SDL2 introduces the idea of Joystick GUIDs which can uniquely
identify a class of device, so use this as the primary configuration
variable instead; that way, if the number or ordering of joystick
devices changes, we will still use the same device. As GUID can only
identify a ""class"" of device (eg. ""Xbox controller""), we still keep
joystick_index around to try to differentiate between devices when
there are multiple identical devices connected.",Anyone?,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,711,2016-05-12T11:06:40Z,2016-05-12T14:49:15Z,2016-07-15T13:19:43Z,MERGED,True,183,177,9,https://github.com/adarnon,All projects now compile correctly on Windows,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/711,https://github.com/adarnon,1,https://github.com/chocolate-doom/chocolate-doom/pull/711,,,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,711,2016-05-12T11:06:40Z,2016-05-12T14:49:15Z,2016-07-15T13:19:43Z,MERGED,True,183,177,9,https://github.com/adarnon,All projects now compile correctly on Windows,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/711,https://github.com/fragglet,2,https://github.com/chocolate-doom/chocolate-doom/pull/711#issuecomment-218781001,,Thanks.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,714,2016-05-12T22:29:48Z,2018-01-06T22:36:31Z,2018-01-06T22:36:31Z,CLOSED,False,153,1,12,https://github.com/adarnon,Add log interface,1,['feature request'],https://github.com/chocolate-doom/chocolate-doom/pull/714,https://github.com/adarnon,1,https://github.com/chocolate-doom/chocolate-doom/pull/714,"As noted in issue #713.
The log can be initialized with I_LogInit().
I've added a call to the initialization routine in all games.","As noted in issue #713.
The log can be initialized with I_LogInit().
I've added a call to the initialization routine in all games.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,714,2016-05-12T22:29:48Z,2018-01-06T22:36:31Z,2018-01-06T22:36:31Z,CLOSED,False,153,1,12,https://github.com/adarnon,Add log interface,1,['feature request'],https://github.com/chocolate-doom/chocolate-doom/pull/714,https://github.com/jmtd,2,https://github.com/chocolate-doom/chocolate-doom/pull/714#issuecomment-281196553,"As noted in issue #713.
The log can be initialized with I_LogInit().
I've added a call to the initialization routine in all games.",This is next on my list to properly look at. Got to get this in before it's anniversary ;),True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,714,2016-05-12T22:29:48Z,2018-01-06T22:36:31Z,2018-01-06T22:36:31Z,CLOSED,False,153,1,12,https://github.com/adarnon,Add log interface,1,['feature request'],https://github.com/chocolate-doom/chocolate-doom/pull/714,https://github.com/adarnon,3,https://github.com/chocolate-doom/chocolate-doom/pull/714#issuecomment-281446630,"As noted in issue #713.
The log can be initialized with I_LogInit().
I've added a call to the initialization routine in all games.",Right now I'm kind of swamped with work but hopefully I'll be able to do this in the next couple of months,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,714,2016-05-12T22:29:48Z,2018-01-06T22:36:31Z,2018-01-06T22:36:31Z,CLOSED,False,153,1,12,https://github.com/adarnon,Add log interface,1,['feature request'],https://github.com/chocolate-doom/chocolate-doom/pull/714,https://github.com/jmtd,4,https://github.com/chocolate-doom/chocolate-doom/pull/714#issuecomment-282700427,"As noted in issue #713.
The log can be initialized with I_LogInit().
I've added a call to the initialization routine in all games.","Some brief notes from a review over the w/e. I thought this was completely done and we'd just been lax in reviewing it and merging it so sorry about the mix up. It looks good, but obviously needs hooking into some places. I tried with I_Error and that was relatively straightforward. However, we may need to think about line endings: I_Error added a \n and callers didn't need to specify it; we need to review the other print-like routines in the source and see if there's any consistency here or not. It might be worth always appending a newline in the log routines (or perhaps conditionally if one is not supplied?)",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,714,2016-05-12T22:29:48Z,2018-01-06T22:36:31Z,2018-01-06T22:36:31Z,CLOSED,False,153,1,12,https://github.com/adarnon,Add log interface,1,['feature request'],https://github.com/chocolate-doom/chocolate-doom/pull/714,https://github.com/fragglet,5,https://github.com/chocolate-doom/chocolate-doom/pull/714#issuecomment-355783161,"As noted in issue #713.
The log can be initialized with I_LogInit().
I've added a call to the initialization routine in all games.","This has been idle for a while, so I'm going to close, but feel free to reopen if you have time again to contribute. Thanks!",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,720,2016-05-22T15:37:57Z,2016-06-04T23:33:09Z,2016-06-05T00:23:22Z,MERGED,True,137,66,8,https://github.com/fragglet,Refactor loading disk icon code.,7,[],https://github.com/chocolate-doom/chocolate-doom/pull/720,https://github.com/fragglet,1,https://github.com/chocolate-doom/chocolate-doom/pull/720,"Only draw the disk icon just before doing the SDL blit to the screen,
and restore the background to I_VideoBuffer immediately after doing
so. This avoids the possibility of the disk remaining in the video
buffer and fixes #668.
Also centralize most loading disk code inside v_diskicon.c.","Only draw the disk icon just before doing the SDL blit to the screen,
and restore the background to I_VideoBuffer immediately after doing
so. This avoids the possibility of the disk remaining in the video
buffer and fixes #668.
Also centralize most loading disk code inside v_diskicon.c.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,720,2016-05-22T15:37:57Z,2016-06-04T23:33:09Z,2016-06-05T00:23:22Z,MERGED,True,137,66,8,https://github.com/fragglet,Refactor loading disk icon code.,7,[],https://github.com/chocolate-doom/chocolate-doom/pull/720,https://github.com/fragglet,2,https://github.com/chocolate-doom/chocolate-doom/pull/720#issuecomment-220916636,"Only draw the disk icon just before doing the SDL blit to the screen,
and restore the background to I_VideoBuffer immediately after doing
so. This avoids the possibility of the disk remaining in the video
buffer and fixes #668.
Also centralize most loading disk code inside v_diskicon.c.",@jmtd @fabiangreffrath to review,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,720,2016-05-22T15:37:57Z,2016-06-04T23:33:09Z,2016-06-05T00:23:22Z,MERGED,True,137,66,8,https://github.com/fragglet,Refactor loading disk icon code.,7,[],https://github.com/chocolate-doom/chocolate-doom/pull/720,https://github.com/nukeykt,3,https://github.com/chocolate-doom/chocolate-doom/pull/720#issuecomment-220928391,"Only draw the disk icon just before doing the SDL blit to the screen,
and restore the background to I_VideoBuffer immediately after doing
so. This avoids the possibility of the disk remaining in the video
buffer and fixes #668.
Also centralize most loading disk code inside v_diskicon.c.","Just checked in strife. it seems working.
Some strife specific notes:

Icon position should be x=320-16  y=3.
In vanilla strife icon has 16x16 black background. In chocolate icon is transparent.
EDIT:
Strife hasn't STCDROM lump. it always uses STDISK.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,720,2016-05-22T15:37:57Z,2016-06-04T23:33:09Z,2016-06-05T00:23:22Z,MERGED,True,137,66,8,https://github.com/fragglet,Refactor loading disk icon code.,7,[],https://github.com/chocolate-doom/chocolate-doom/pull/720,https://github.com/fabiangreffrath,4,https://github.com/chocolate-doom/chocolate-doom/pull/720#issuecomment-221367854,"Only draw the disk icon just before doing the SDL blit to the screen,
and restore the background to I_VideoBuffer immediately after doing
so. This avoids the possibility of the disk remaining in the video
buffer and fixes #668.
Also centralize most loading disk code inside v_diskicon.c.","The code looks got to me. It seems the disk_drawn variable is more or less what was missing before.
We should take @nukeykt 's objection into account, though, and maybe revert the (cleaner) usage of V_DrawPatch() again. :/",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,720,2016-05-22T15:37:57Z,2016-06-04T23:33:09Z,2016-06-05T00:23:22Z,MERGED,True,137,66,8,https://github.com/fragglet,Refactor loading disk icon code.,7,[],https://github.com/chocolate-doom/chocolate-doom/pull/720,https://github.com/fragglet,5,https://github.com/chocolate-doom/chocolate-doom/pull/720#issuecomment-222874471,"Only draw the disk icon just before doing the SDL blit to the screen,
and restore the background to I_VideoBuffer immediately after doing
so. This avoids the possibility of the disk remaining in the video
buffer and fixes #668.
Also centralize most loading disk code inside v_diskicon.c.","Comments addressed, PTAL.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,720,2016-05-22T15:37:57Z,2016-06-04T23:33:09Z,2016-06-05T00:23:22Z,MERGED,True,137,66,8,https://github.com/fragglet,Refactor loading disk icon code.,7,[],https://github.com/chocolate-doom/chocolate-doom/pull/720,https://github.com/chungy,6,https://github.com/chocolate-doom/chocolate-doom/pull/720#issuecomment-223784318,"Only draw the disk icon just before doing the SDL blit to the screen,
and restore the background to I_VideoBuffer immediately after doing
so. This avoids the possibility of the disk remaining in the video
buffer and fixes #668.
Also centralize most loading disk code inside v_diskicon.c.","With this resolved, is 2.3.0 ready?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,720,2016-05-22T15:37:57Z,2016-06-04T23:33:09Z,2016-06-05T00:23:22Z,MERGED,True,137,66,8,https://github.com/fragglet,Refactor loading disk icon code.,7,[],https://github.com/chocolate-doom/chocolate-doom/pull/720,https://github.com/fragglet,7,https://github.com/chocolate-doom/chocolate-doom/pull/720#issuecomment-223785831,"Only draw the disk icon just before doing the SDL blit to the screen,
and restore the background to I_VideoBuffer immediately after doing
so. This avoids the possibility of the disk remaining in the video
buffer and fixes #668.
Also centralize most loading disk code inside v_diskicon.c.","Should be good to go, yes.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,726,2016-06-07T05:58:22Z,2016-06-07T08:44:12Z,2016-06-07T15:26:06Z,MERGED,True,25,20,4,https://github.com/chungy,Convert README to Markdown,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/726,https://github.com/chungy,1,https://github.com/chocolate-doom/chocolate-doom/pull/726,"Only minor changes needed for this. It gains pretty-printing on GitHub, which in my opinion, looks a lot more attractive than the monospace unformatted version.
Fancier features could even included, such as in-line images, but I believe keeping this sane for viewing in a terminal or text editor should take greater priority.","Only minor changes needed for this. It gains pretty-printing on GitHub, which in my opinion, looks a lot more attractive than the monospace unformatted version.
Fancier features could even included, such as in-line images, but I believe keeping this sane for viewing in a terminal or text editor should take greater priority.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,726,2016-06-07T05:58:22Z,2016-06-07T08:44:12Z,2016-06-07T15:26:06Z,MERGED,True,25,20,4,https://github.com/chungy,Convert README to Markdown,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/726,https://github.com/jmtd,2,https://github.com/chocolate-doom/chocolate-doom/pull/726#issuecomment-224215174,"Only minor changes needed for this. It gains pretty-printing on GitHub, which in my opinion, looks a lot more attractive than the monospace unformatted version.
Fancier features could even included, such as in-line images, but I believe keeping this sane for viewing in a terminal or text editor should take greater priority.","Quoted from the Travis CI log:

make[2]: *** No rule to make target README', needed byall-am'.  Stop.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,726,2016-06-07T05:58:22Z,2016-06-07T08:44:12Z,2016-06-07T15:26:06Z,MERGED,True,25,20,4,https://github.com/chungy,Convert README to Markdown,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/726,https://github.com/fragglet,3,https://github.com/chocolate-doom/chocolate-doom/pull/726#issuecomment-224286844,"Only minor changes needed for this. It gains pretty-printing on GitHub, which in my opinion, looks a lot more attractive than the monospace unformatted version.
Fancier features could even included, such as in-line images, but I believe keeping this sane for viewing in a terminal or text editor should take greater priority.","Quoted from the Travis CI log:

What was the resolution for this?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,726,2016-06-07T05:58:22Z,2016-06-07T08:44:12Z,2016-06-07T15:26:06Z,MERGED,True,25,20,4,https://github.com/chungy,Convert README to Markdown,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/726,https://github.com/fragglet,4,https://github.com/chocolate-doom/chocolate-doom/pull/726#issuecomment-224289139,"Only minor changes needed for this. It gains pretty-printing on GitHub, which in my opinion, looks a lot more attractive than the monospace unformatted version.
Fancier features could even included, such as in-line images, but I believe keeping this sane for viewing in a terminal or text editor should take greater priority.","Also, feel free to convert other doc files to markdown too. I considered doing this myself but held off because I thought autotools still required plaintext (I guess maybe now it supports .md too?)",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,726,2016-06-07T05:58:22Z,2016-06-07T08:44:12Z,2016-06-07T15:26:06Z,MERGED,True,25,20,4,https://github.com/chungy,Convert README to Markdown,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/726,https://github.com/chungy,5,https://github.com/chocolate-doom/chocolate-doom/pull/726#issuecomment-224312093,"Only minor changes needed for this. It gains pretty-printing on GitHub, which in my opinion, looks a lot more attractive than the monospace unformatted version.
Fancier features could even included, such as in-line images, but I believe keeping this sane for viewing in a terminal or text editor should take greater priority.","What was the resolution for this?

I had forgotten to update the name change in Makefile.am

I considered doing this myself but held off because I thought autotools still required plaintext (I guess maybe now it supports .md too?)

Do autotools make any effort at parsing them? I don't see how it would be affected.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,726,2016-06-07T05:58:22Z,2016-06-07T08:44:12Z,2016-06-07T15:26:06Z,MERGED,True,25,20,4,https://github.com/chungy,Convert README to Markdown,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/726,https://github.com/fragglet,6,https://github.com/chocolate-doom/chocolate-doom/pull/726#issuecomment-224316690,"Only minor changes needed for this. It gains pretty-printing on GitHub, which in my opinion, looks a lot more attractive than the monospace unformatted version.
Fancier features could even included, such as in-line images, but I believe keeping this sane for viewing in a terminal or text editor should take greater priority.",I thought automake required there to be a README file in the top-level directory (among other files). So I'm surprised this worked.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,727,2016-06-09T12:39:46Z,2016-06-09T13:55:22Z,2016-06-09T13:55:22Z,MERGED,True,45,106,4,https://github.com/nukeykt,doom: Fix minor Ultimate/Final Doom and Chex emulation bugs.,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/727,https://github.com/nukeykt,1,https://github.com/chocolate-doom/chocolate-doom/pull/727,"Internally DOS Doom EXEs have no ""gamemode"" variable. They use a ""shareware"", ""registered"" and ""commercial"" boolean flags. But for the Ultimate Doom id Software didn't introduce new ""retail"" flag, instead they just hardcoded Ultimate Doom specific changes. So i replaced the ""gamemode"" checks with the ""gameversion"" checks.
""Read This!"" is also modified to behave exactly like in the vanilla doom.","Internally DOS Doom EXEs have no ""gamemode"" variable. They use a ""shareware"", ""registered"" and ""commercial"" boolean flags. But for the Ultimate Doom id Software didn't introduce new ""retail"" flag, instead they just hardcoded Ultimate Doom specific changes. So i replaced the ""gamemode"" checks with the ""gameversion"" checks.
""Read This!"" is also modified to behave exactly like in the vanilla doom.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,728,2016-06-10T04:12:36Z,2016-06-10T13:56:51Z,2016-06-10T13:56:51Z,MERGED,True,6,5,1,https://github.com/nukeykt,doom: Fix automap cheat handling when emulating older EXEs.,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/728,https://github.com/nukeykt,1,https://github.com/chocolate-doom/chocolate-doom/pull/728,,,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,730,2016-06-11T07:14:32Z,2016-06-11T18:09:05Z,2016-06-11T18:09:08Z,MERGED,True,9,40,2,https://github.com/nukeykt,opl: Nuked OPL3 v1.7.2,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/730,https://github.com/nukeykt,1,https://github.com/chocolate-doom/chocolate-doom/pull/730,,,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,730,2016-06-11T07:14:32Z,2016-06-11T18:09:05Z,2016-06-11T18:09:08Z,MERGED,True,9,40,2,https://github.com/nukeykt,opl: Nuked OPL3 v1.7.2,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/730,https://github.com/fragglet,2,https://github.com/chocolate-doom/chocolate-doom/pull/730#issuecomment-225381080,,Thanks!,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,732,2016-06-15T08:06:16Z,,2019-11-17T22:04:57Z,OPEN,False,256,61,12,https://github.com/nukeykt,Add HOM shimmering effect,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/732,https://github.com/nukeykt,1,https://github.com/chocolate-doom/chocolate-doom/pull/732,Updated to be compatible with later commits,Updated to be compatible with later commits,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,732,2016-06-15T08:06:16Z,,2019-11-17T22:04:57Z,OPEN,False,256,61,12,https://github.com/nukeykt,Add HOM shimmering effect,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/732,https://github.com/linguica,2,https://github.com/chocolate-doom/chocolate-doom/pull/732#issuecomment-287968371,Updated to be compatible with later commits,"Any chance of this being re-looked at? It would be nice if the official SDL2 release re-implemented ""real"" HOM so players could see it for the first time in ages.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,732,2016-06-15T08:06:16Z,,2019-11-17T22:04:57Z,OPEN,False,256,61,12,https://github.com/nukeykt,Add HOM shimmering effect,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/732,https://github.com/AXDOOMER,3,https://github.com/chocolate-doom/chocolate-doom/pull/732#issuecomment-287970043,Updated to be compatible with later commits,It works. I don't understand why this hasn't been merged yet.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,732,2016-06-15T08:06:16Z,,2019-11-17T22:04:57Z,OPEN,False,256,61,12,https://github.com/nukeykt,Add HOM shimmering effect,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/732,https://github.com/jmtd,4,https://github.com/chocolate-doom/chocolate-doom/pull/732#issuecomment-287993426,Updated to be compatible with later commits,"I've been meaning to revisit this. The first time I looked at it I thought the code changes were too large, but it's been a while and I might have changed my mind. I really want this and medusa emu in. (I've been working on that too)",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,732,2016-06-15T08:06:16Z,,2019-11-17T22:04:57Z,OPEN,False,256,61,12,https://github.com/nukeykt,Add HOM shimmering effect,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/732,https://github.com/jmtd,5,https://github.com/chocolate-doom/chocolate-doom/pull/732#issuecomment-288167477,Updated to be compatible with later commits,"For reference, #695 was the earlier version of this, some of the comments there might be relevant, I'll repeat them here if I deem them to be.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,733,2016-06-17T15:45:22Z,2016-06-17T22:04:07Z,2016-06-20T09:38:17Z,CLOSED,False,8014,8014,332,https://github.com/llgxela,Remove trailing spaces and tabs.,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/733,https://github.com/llgxela,1,https://github.com/chocolate-doom/chocolate-doom/pull/733,Cleaned up some code by removing all trailing spaces and tabs from non-binary files.,Cleaned up some code by removing all trailing spaces and tabs from non-binary files.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,733,2016-06-17T15:45:22Z,2016-06-17T22:04:07Z,2016-06-20T09:38:17Z,CLOSED,False,8014,8014,332,https://github.com/llgxela,Remove trailing spaces and tabs.,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/733,https://github.com/fragglet,2,https://github.com/chocolate-doom/chocolate-doom/pull/733#issuecomment-226892588,Cleaned up some code by removing all trailing spaces and tabs from non-binary files.,"Hi,
Thanks for taking the time to put this together but I don't want to make unnecessary changes that just change formatting, since it destroys the ability to use ""git blame"".",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,733,2016-06-17T15:45:22Z,2016-06-17T22:04:07Z,2016-06-20T09:38:17Z,CLOSED,False,8014,8014,332,https://github.com/llgxela,Remove trailing spaces and tabs.,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/733,https://github.com/llgxela,3,https://github.com/chocolate-doom/chocolate-doom/pull/733#issuecomment-226892875,Cleaned up some code by removing all trailing spaces and tabs from non-binary files.,"Sorry, no problem :)
2016-06-18 0:05 GMT+02:00 Simon Howard notifications@github.com:

Hi,
Thanks for taking the time to put this together but I don't want to make
unnecessary changes that just change formatting, since it destroys the
ability to use ""git blame"".
—
You are receiving this because you authored the thread.
Reply to this email directly, view it on GitHub
#733 (comment),
or mute the thread
https://github.com/notifications/unsubscribe/AGqpw34dOvW6xAHsZ6xzV85TrDGQ_nImks5qMxoPgaJpZM4I4fE5
.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,733,2016-06-17T15:45:22Z,2016-06-17T22:04:07Z,2016-06-20T09:38:17Z,CLOSED,False,8014,8014,332,https://github.com/llgxela,Remove trailing spaces and tabs.,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/733,https://github.com/jmtd,4,https://github.com/chocolate-doom/chocolate-doom/pull/733#issuecomment-227095444,Cleaned up some code by removing all trailing spaces and tabs from non-binary files.,"Whitespace changes can be ignored in git-blame using the -w flag. For example chungy's recent CR/LF changes (c996c12) make him the ""owner"" of those files in plain git-blame, but it goes back to the previous authors with -w.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,735,2016-06-23T23:37:05Z,2018-01-21T18:57:13Z,2018-01-21T18:57:13Z,CLOSED,False,18985,18623,297,https://github.com/jrhacker,Enable the use of SF2 sound fonts via a FluidSynth-enabled SDL,547,['music'],https://github.com/chocolate-doom/chocolate-doom/pull/735,https://github.com/jrhacker,1,https://github.com/chocolate-doom/chocolate-doom/pull/735,"Enable the use of SF2 sound fonts via a FluidSynth-enabled SDL.  The sound
font file to use is selected through a new setup/config variable.
Noted with FIXME comments that the features that are enabled/disabled by the
FEATURE_SOUND ifdef are inconsistent between m_config.c and i_sound.c.  Left
for resolution by the right person.","Enable the use of SF2 sound fonts via a FluidSynth-enabled SDL.  The sound
font file to use is selected through a new setup/config variable.
Noted with FIXME comments that the features that are enabled/disabled by the
FEATURE_SOUND ifdef are inconsistent between m_config.c and i_sound.c.  Left
for resolution by the right person.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,738,2016-06-27T20:54:50Z,2016-07-04T20:41:52Z,2016-07-04T20:41:52Z,MERGED,True,14,14,1,https://github.com/jmtd,sdl2: fix window_position config option,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/738,https://github.com/jmtd,1,https://github.com/chocolate-doom/chocolate-doom/pull/738,Closes: #724.,Closes: #724.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,738,2016-06-27T20:54:50Z,2016-07-04T20:41:52Z,2016-07-04T20:41:52Z,MERGED,True,14,14,1,https://github.com/jmtd,sdl2: fix window_position config option,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/738,https://github.com/jmtd,2,https://github.com/chocolate-doom/chocolate-doom/pull/738#issuecomment-229143851,Closes: #724.,Sure thing,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,739,2016-06-27T21:19:01Z,2017-02-28T17:23:46Z,2017-02-28T17:23:46Z,MERGED,True,13,6,3,https://github.com/jmtd,additionally fix hexen start-up window position for sdl2,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/739,https://github.com/jmtd,1,https://github.com/chocolate-doom/chocolate-doom/pull/739,"A superset of #738, also closing #724.
I'm not sure what you will think of this. It only addresses one more window than before, the libtextscreen windows are unaffected. I suspect that the business of creating the window and setting its properties should probably exist outside of all three existing window creation cases, and each phase should share the same window object, but that would involve a lot more reworking.","A superset of #738, also closing #724.
I'm not sure what you will think of this. It only addresses one more window than before, the libtextscreen windows are unaffected. I suspect that the business of creating the window and setting its properties should probably exist outside of all three existing window creation cases, and each phase should share the same window object, but that would involve a lot more reworking.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,739,2016-06-27T21:19:01Z,2017-02-28T17:23:46Z,2017-02-28T17:23:46Z,MERGED,True,13,6,3,https://github.com/jmtd,additionally fix hexen start-up window position for sdl2,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/739,https://github.com/jmtd,2,https://github.com/chocolate-doom/chocolate-doom/pull/739#issuecomment-229169498,"A superset of #738, also closing #724.
I'm not sure what you will think of this. It only addresses one more window than before, the libtextscreen windows are unaffected. I suspect that the business of creating the window and setting its properties should probably exist outside of all three existing window creation cases, and each phase should share the same window object, but that would involve a lot more reworking.","made that adjustment, rebased on #738 and force-pushed.
I'm not sure what I think about this, to be honest. It doesn't address ENDOOM; I suppose it's functionally a step in the right direction; A reasonably small change to libtextscreen would address ENDOOM and the Heretic startup sequence.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,739,2016-06-27T21:19:01Z,2017-02-28T17:23:46Z,2017-02-28T17:23:46Z,MERGED,True,13,6,3,https://github.com/jmtd,additionally fix hexen start-up window position for sdl2,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/739,https://github.com/jmtd,3,https://github.com/chocolate-doom/chocolate-doom/pull/739#issuecomment-230355744,"A superset of #738, also closing #724.
I'm not sure what you will think of this. It only addresses one more window than before, the libtextscreen windows are unaffected. I suspect that the business of creating the window and setting its properties should probably exist outside of all three existing window creation cases, and each phase should share the same window object, but that would involve a lot more reworking.","OK, I think a better solution would be if all the various windows that chocolate-* draws share the same OS window, that is, you get one window (or fullscreen) within which the game; the hexen graphical intro; the heretic text intro and all the ENDOOMs are rendered.
It would take a little bit of re-ordering and for libtextscreen to offer an alternative init entrypoint where the caller provided a handle for the top-level window in which to draw.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,744,2016-07-03T22:03:49Z,2016-07-04T20:38:22Z,2016-07-14T17:49:05Z,MERGED,True,54,0,3,https://github.com/jmtd,fix mousewheel for sdl2 by synthesising button events,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/744,https://github.com/jmtd,1,https://github.com/chocolate-doom/chocolate-doom/pull/744,"SDL2 treats mouse wheel events as different from buttons.
Assuming we want the wheel to emulate buttons as per SDL1,
map the mouse wheel events to buttons. Use the mappings in
textscreen (down = 3, up = 4).
Fixes #722.","SDL2 treats mouse wheel events as different from buttons.
Assuming we want the wheel to emulate buttons as per SDL1,
map the mouse wheel events to buttons. Use the mappings in
textscreen (down = 3, up = 4).
Fixes #722.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,744,2016-07-03T22:03:49Z,2016-07-04T20:38:22Z,2016-07-14T17:49:05Z,MERGED,True,54,0,3,https://github.com/jmtd,fix mousewheel for sdl2 by synthesising button events,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/744,https://github.com/jmtd,2,https://github.com/chocolate-doom/chocolate-doom/pull/744#issuecomment-230178508,"SDL2 treats mouse wheel events as different from buttons.
Assuming we want the wheel to emulate buttons as per SDL1,
map the mouse wheel events to buttons. Use the mappings in
textscreen (down = 3, up = 4).
Fixes #722.","Travis has failed, I guess it has SDL2 < 2.0.4, which is a requisite for SDL_MOUSEWHEEL_FLIPPED.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,744,2016-07-03T22:03:49Z,2016-07-04T20:38:22Z,2016-07-14T17:49:05Z,MERGED,True,54,0,3,https://github.com/jmtd,fix mousewheel for sdl2 by synthesising button events,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/744,https://github.com/jmtd,3,https://github.com/chocolate-doom/chocolate-doom/pull/744#issuecomment-230178592,"SDL2 treats mouse wheel events as different from buttons.
Assuming we want the wheel to emulate buttons as per SDL1,
map the mouse wheel events to buttons. Use the mappings in
textscreen (down = 3, up = 4).
Fixes #722.",Debian jessie has sdl2 2.0.2 so this would prevent builds on stable. Tomorrow I'll look into seeing if we can conditionally compile the sections using SDL_MOUSEWHEEL_FLIPPED,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,744,2016-07-03T22:03:49Z,2016-07-04T20:38:22Z,2016-07-14T17:49:05Z,MERGED,True,54,0,3,https://github.com/jmtd,fix mousewheel for sdl2 by synthesising button events,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/744,https://github.com/jmtd,4,https://github.com/chocolate-doom/chocolate-doom/pull/744#issuecomment-230341139,"SDL2 treats mouse wheel events as different from buttons.
Assuming we want the wheel to emulate buttons as per SDL1,
map the mouse wheel events to buttons. Use the mappings in
textscreen (down = 3, up = 4).
Fixes #722.",I'm poking at this a bit more to make it consistent with sdl1 chocolate doom,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,744,2016-07-03T22:03:49Z,2016-07-04T20:38:22Z,2016-07-14T17:49:05Z,MERGED,True,54,0,3,https://github.com/jmtd,fix mousewheel for sdl2 by synthesising button events,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/744,https://github.com/jmtd,5,https://github.com/chocolate-doom/chocolate-doom/pull/744#issuecomment-230349029,"SDL2 treats mouse wheel events as different from buttons.
Assuming we want the wheel to emulate buttons as per SDL1,
map the mouse wheel events to buttons. Use the mappings in
textscreen (down = 3, up = 4).
Fixes #722.","With SDL1, Mac OS X, default trackpad settings, using a usb mouse with a click-wheel on it

in setup, scrolling down = button 4, scrolling up = button 5. (binding to prev/next weapon)
resulting config file has prev/next buttons 3/4 (index is from 0, so, good)
in game, if I scroll up, it switches to the next weapon (good)

with this branch, (actually this but filing off the SDL_MOUSEWHEEL_FLIPPED checks)

setup behaviour is the same, and resulting config the same (good)
in game, scroll up switches to previous weapon (bad)",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,744,2016-07-03T22:03:49Z,2016-07-04T20:38:22Z,2016-07-14T17:49:05Z,MERGED,True,54,0,3,https://github.com/jmtd,fix mousewheel for sdl2 by synthesising button events,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/744,https://github.com/jmtd,6,https://github.com/chocolate-doom/chocolate-doom/pull/744#issuecomment-230351681,"SDL2 treats mouse wheel events as different from buttons.
Assuming we want the wheel to emulate buttons as per SDL1,
map the mouse wheel events to buttons. Use the mappings in
textscreen (down = 3, up = 4).
Fixes #722.","I'm happy this finally works now, so merging myself - forgiveness, permission, etc.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,745,2016-07-07T21:36:58Z,2016-07-14T16:59:57Z,2016-07-14T17:48:09Z,MERGED,True,66,12,6,https://github.com/jmtd,Add force_software_renderer video rendering option,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/745,https://github.com/jmtd,1,https://github.com/chocolate-doom/chocolate-doom/pull/745,,,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,745,2016-07-07T21:36:58Z,2016-07-14T16:59:57Z,2016-07-14T17:48:09Z,MERGED,True,66,12,6,https://github.com/jmtd,Add force_software_renderer video rendering option,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/745,https://github.com/jmtd,2,https://github.com/chocolate-doom/chocolate-doom/pull/745#issuecomment-231214994,,Relates to #741.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,745,2016-07-07T21:36:58Z,2016-07-14T16:59:57Z,2016-07-14T17:48:09Z,MERGED,True,66,12,6,https://github.com/jmtd,Add force_software_renderer video rendering option,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/745,https://github.com/jmtd,3,https://github.com/chocolate-doom/chocolate-doom/pull/745#issuecomment-231216018,,If you or someone ACKs this I would probably squash these two before merge; or we can wait until we have a Mesa-detection scheme working.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,745,2016-07-07T21:36:58Z,2016-07-14T16:59:57Z,2016-07-14T17:48:09Z,MERGED,True,66,12,6,https://github.com/jmtd,Add force_software_renderer video rendering option,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/745,https://github.com/jmtd,4,https://github.com/chocolate-doom/chocolate-doom/pull/745#issuecomment-232306645,,"I tested this on Linux, OS X and Windows yesterday. All are ""fine"", although I had to build on Windows via the VC project, which is broken and needs work for sdl2-branch, but needed less work than the official cygwin route (which I still haven't got working :))
Windows Remote Desktop returns null for GL_VENDOR or GL_VERSION. However, I still got around 275fps for timedemo demo1, versus around 100fps for force_software_renderer via Remote Desktop, which is interesting.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,745,2016-07-07T21:36:58Z,2016-07-14T16:59:57Z,2016-07-14T17:48:09Z,MERGED,True,66,12,6,https://github.com/jmtd,Add force_software_renderer video rendering option,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/745,https://github.com/jmtd,5,https://github.com/chocolate-doom/chocolate-doom/pull/745#issuecomment-232403202,,"On Windows not via remote desktop with an Nvidia GPU, I get null for GL_VENDOR and GL_VERSION too. It might be that the CheckGLVersion call happens too early and GL isn't initialised properly on that platform, I might try bumping it below the DrawRects that clears the screen (it must be initialised by then, right? even if there are delayed shenanigans happening in the background?)",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,745,2016-07-07T21:36:58Z,2016-07-14T16:59:57Z,2016-07-14T17:48:09Z,MERGED,True,66,12,6,https://github.com/jmtd,Add force_software_renderer video rendering option,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/745,https://github.com/fragglet,6,https://github.com/chocolate-doom/chocolate-doom/pull/745#issuecomment-232543287,,"Since you're just using one function, you can probably use SDL_GL_GetProcAddress() to avoid adding a hard dependency on OpenGL.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,745,2016-07-07T21:36:58Z,2016-07-14T16:59:57Z,2016-07-14T17:48:09Z,MERGED,True,66,12,6,https://github.com/jmtd,Add force_software_renderer video rendering option,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/745,https://github.com/jmtd,7,https://github.com/chocolate-doom/chocolate-doom/pull/745#issuecomment-232717380,,"WFM on Linux (native and via VNC) and OS X. Need to do a run-time test on Windows to make sure the GL context exists when this is called otherwise we'll just get ""(null)"" -- not that Mesa is likely to ever be a match on that platform. Let's see what Travis CI makes of it, hopefully happy now there's no additional GL dependency.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,745,2016-07-07T21:36:58Z,2016-07-14T16:59:57Z,2016-07-14T17:48:09Z,MERGED,True,66,12,6,https://github.com/jmtd,Add force_software_renderer video rendering option,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/745,https://github.com/fragglet,8,https://github.com/chocolate-doom/chocolate-doom/pull/745#issuecomment-232717967,,LGTM,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,748,2016-07-11T00:02:13Z,2016-07-11T02:57:04Z,2016-07-11T02:57:04Z,MERGED,True,12,10,2,https://github.com/nukeykt,opl: Nuked OPL3 v1.7.3,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/748,https://github.com/nukeykt,1,https://github.com/chocolate-doom/chocolate-doom/pull/748,,,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,749,2016-07-11T11:25:03Z,2017-01-02T14:12:35Z,2017-01-02T14:12:41Z,MERGED,True,222,47,2,https://github.com/nukeykt,strife: Add ASCII intro.,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/749,https://github.com/nukeykt,1,https://github.com/chocolate-doom/chocolate-doom/pull/749,Run game with -nograph,Run game with -nograph,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,749,2016-07-11T11:25:03Z,2017-01-02T14:12:35Z,2017-01-02T14:12:41Z,MERGED,True,222,47,2,https://github.com/nukeykt,strife: Add ASCII intro.,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/749,https://github.com/jmtd,2,https://github.com/chocolate-doom/chocolate-doom/pull/749#issuecomment-231718855,Run game with -nograph,"I get a segfault trying this out
frame #1: 0x0000000100011f87 chocolate-strife`V_DrawFilledBox(x=<unavailable>, y=<unavailable>, w=320, h=<unavailable>, c=0) + 215 at v_video.c:542
frame #2: 0x000000010002a821 chocolate-strife`D_IntroTick [inlined] D_IntroBackground + 35 at d_main.c:1246
frame #3: 0x000000010002a7fe chocolate-strife`D_IntroTick + 46 at d_main.c:1446
frame #4: 0x000000010002b83e chocolate-strife`D_DoomMain + 3534 at d_main.c:2061",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,749,2016-07-11T11:25:03Z,2017-01-02T14:12:35Z,2017-01-02T14:12:41Z,MERGED,True,222,47,2,https://github.com/nukeykt,strife: Add ASCII intro.,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/749,https://github.com/nukeykt,3,https://github.com/chocolate-doom/chocolate-doom/pull/749#issuecomment-231725071,Run game with -nograph,What is your command line arguments?,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,749,2016-07-11T11:25:03Z,2017-01-02T14:12:35Z,2017-01-02T14:12:41Z,MERGED,True,222,47,2,https://github.com/nukeykt,strife: Add ASCII intro.,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/749,https://github.com/jmtd,4,https://github.com/chocolate-doom/chocolate-doom/pull/749#issuecomment-231971655,Run game with -nograph,"./src/chocolate-strife -iwad ~/games/strife1.wad -nosound, first outside and then inside lldb. I linked against electric fence to get a useful backtrace. Stuff from my chocolate-strife.cfg:
graphical_startup             0
autoadjust_video_settings     1
fullscreen                    0
screen_width                  800
screen_height                 600
screen_bpp                    32",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,749,2016-07-11T11:25:03Z,2017-01-02T14:12:35Z,2017-01-02T14:12:41Z,MERGED,True,222,47,2,https://github.com/nukeykt,strife: Add ASCII intro.,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/749,https://github.com/nukeykt,5,https://github.com/chocolate-doom/chocolate-doom/pull/749#issuecomment-232031643,Run game with -nograph,"Fixed. Thanks!
graphical_startup must be true, and you should run game with -nograph.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,749,2016-07-11T11:25:03Z,2017-01-02T14:12:35Z,2017-01-02T14:12:41Z,MERGED,True,222,47,2,https://github.com/nukeykt,strife: Add ASCII intro.,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/749,https://github.com/chungy,6,https://github.com/chocolate-doom/chocolate-doom/pull/749#issuecomment-232100212,Run game with -nograph,"Can graphical_startup be made to have three states? I'm thinking 0 and 1 should behave as now, but introduce a 2 option that enables the ASCII intro instead.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,749,2016-07-11T11:25:03Z,2017-01-02T14:12:35Z,2017-01-02T14:12:41Z,MERGED,True,222,47,2,https://github.com/nukeykt,strife: Add ASCII intro.,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/749,https://github.com/fragglet,7,https://github.com/chocolate-doom/chocolate-doom/pull/749#issuecomment-269977451,Run game with -nograph,Thanks!,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,750,2016-07-14T03:20:14Z,2016-07-14T03:38:49Z,2016-07-14T03:38:49Z,MERGED,True,24,10,2,https://github.com/nukeykt,opl: Nuked OPL3 v1.7.4,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/750,https://github.com/nukeykt,1,https://github.com/chocolate-doom/chocolate-doom/pull/750,,,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,754,2016-07-14T22:58:36Z,2016-07-14T23:09:01Z,2018-01-14T08:59:17Z,MERGED,True,138,35,6,https://github.com/jmtd,Revert using SDL_Image for PNG screenshots,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/754,https://github.com/jmtd,1,https://github.com/chocolate-doom/chocolate-doom/pull/754,"This reverts commits 901ee2f and
07afb77.
This change broke PNG screenshots on OS X and resulted in 32bit PNGs
on other platforms (large file sizes). The former might be a SDL_Image
bug, the latter definitely is.
Fixes #752","This reverts commits 901ee2f and
07afb77.
This change broke PNG screenshots on OS X and resulted in 32bit PNGs
on other platforms (large file sizes). The former might be a SDL_Image
bug, the latter definitely is.
Fixes #752",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,754,2016-07-14T22:58:36Z,2016-07-14T23:09:01Z,2018-01-14T08:59:17Z,MERGED,True,138,35,6,https://github.com/jmtd,Revert using SDL_Image for PNG screenshots,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/754,https://github.com/fragglet,2,https://github.com/chocolate-doom/chocolate-doom/pull/754#issuecomment-232818432,"This reverts commits 901ee2f and
07afb77.
This change broke PNG screenshots on OS X and resulted in 32bit PNGs
on other platforms (large file sizes). The former might be a SDL_Image
bug, the latter definitely is.
Fixes #752",Looks good. I'm not sure depending on SDL_image buys us anything anyway (since it's only PNGs we really care about).,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,754,2016-07-14T22:58:36Z,2016-07-14T23:09:01Z,2018-01-14T08:59:17Z,MERGED,True,138,35,6,https://github.com/jmtd,Revert using SDL_Image for PNG screenshots,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/754,https://github.com/fabiangreffrath,3,https://github.com/chocolate-doom/chocolate-doom/pull/754#issuecomment-356908173,"This reverts commits 901ee2f and
07afb77.
This change broke PNG screenshots on OS X and resulted in 32bit PNGs
on other platforms (large file sizes). The former might be a SDL_Image
bug, the latter definitely is.
Fixes #752","@jmtd Hi there, now that we have 2018 and Choco 3.0 and SDL2_image 2.0.2 have been released, could you please test if

taking screenshots on OSX is still an issue
screenshots are saved as paletted images
so that we can finally revert back to using SDL2_image?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,754,2016-07-14T22:58:36Z,2016-07-14T23:09:01Z,2018-01-14T08:59:17Z,MERGED,True,138,35,6,https://github.com/jmtd,Revert using SDL_Image for PNG screenshots,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/754,https://github.com/fabiangreffrath,4,https://github.com/chocolate-doom/chocolate-doom/pull/754#issuecomment-357165866,"This reverts commits 901ee2f and
07afb77.
This change broke PNG screenshots on OS X and resulted in 32bit PNGs
on other platforms (large file sizes). The former might be a SDL_Image
bug, the latter definitely is.
Fixes #752","Sorry, I find this a bit hard to follow.
Please make sure to check against SDL2_Image 2.0.2 built with libpng support.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,754,2016-07-14T22:58:36Z,2016-07-14T23:09:01Z,2018-01-14T08:59:17Z,MERGED,True,138,35,6,https://github.com/jmtd,Revert using SDL_Image for PNG screenshots,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/754,https://github.com/fabiangreffrath,5,https://github.com/chocolate-doom/chocolate-doom/pull/754#issuecomment-357168528,"This reverts commits 901ee2f and
07afb77.
This change broke PNG screenshots on OS X and resulted in 32bit PNGs
on other platforms (large file sizes). The former might be a SDL_Image
bug, the latter definitely is.
Fixes #752","I guess the images get larger for corrected aspect ratios, because the buffer that we scale our framebuffer to is a 32-bit RGBA buffer.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,754,2016-07-14T22:58:36Z,2016-07-14T23:09:01Z,2018-01-14T08:59:17Z,MERGED,True,138,35,6,https://github.com/jmtd,Revert using SDL_Image for PNG screenshots,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/754,https://github.com/jmtd,6,https://github.com/chocolate-doom/chocolate-doom/pull/754#issuecomment-357291495,"This reverts commits 901ee2f and
07afb77.
This change broke PNG screenshots on OS X and resulted in 32bit PNGs
on other platforms (large file sizes). The former might be a SDL_Image
bug, the latter definitely is.
Fixes #752","Sorry for my stream-of-conciousness dump of comments. I intended to edit/delete them down to a summary last night but ran out of time. the patches rebased onto current master (conflicts resolved): https://github.com/jmtd/chocolate-doom/tree/fabian-sdl-image. . My findings:
On Debian, prior to applying these patches i.e. not using sdl2-image, for reference
https://jmtd.net/tmp/libpng_1600x1200.png (66K, 8 bit PNG)
On Debian, linking against sid's libsdl2-image (so yes libpng support), with these patches,
https://jmtd.net/tmp/sdl_image_1600x1200.png (128K-142K, RGBA) (note: image updated from earlier comment)
I did a built on OS X but I've just realised that I did not apply these patches so those results are invalid. I'll try again over the weekend.
Based just on the Debian results, I think there's two things to investigate further:

SDL2_image version is much larger
the output is not per-pixel identical. the SDL2_image output is offset by sub-pixels, looking at zoom-ins some of the blown-up pixels around the top and left edges are different sizes to the others

Is it still useful to test 32 bit powerpc (BE)?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,754,2016-07-14T22:58:36Z,2016-07-14T23:09:01Z,2018-01-14T08:59:17Z,MERGED,True,138,35,6,https://github.com/jmtd,Revert using SDL_Image for PNG screenshots,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/754,https://github.com/jmtd,7,https://github.com/chocolate-doom/chocolate-doom/pull/754#issuecomment-357322918,"This reverts commits 901ee2f and
07afb77.
This change broke PNG screenshots on OS X and resulted in 32bit PNGs
on other platforms (large file sizes). The former might be a SDL_Image
bug, the latter definitely is.
Fixes #752","OK tested properly on OS X. Sadly the outputs are still corrupted
https://jmtd.net/tmp/choco_osx_1600x1200.png (7.4K)
https://jmtd.net/tmp/choco_osx_320x200.png (83K)",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,754,2016-07-14T22:58:36Z,2016-07-14T23:09:01Z,2018-01-14T08:59:17Z,MERGED,True,138,35,6,https://github.com/jmtd,Revert using SDL_Image for PNG screenshots,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/754,https://github.com/fabiangreffrath,8,https://github.com/chocolate-doom/chocolate-doom/pull/754#issuecomment-357469979,"This reverts commits 901ee2f and
07afb77.
This change broke PNG screenshots on OS X and resulted in 32bit PNGs
on other platforms (large file sizes). The former might be a SDL_Image
bug, the latter definitely is.
Fixes #752","Ah, dammit, so there's still no way back... :(",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,754,2016-07-14T22:58:36Z,2016-07-14T23:09:01Z,2018-01-14T08:59:17Z,MERGED,True,138,35,6,https://github.com/jmtd,Revert using SDL_Image for PNG screenshots,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/754,https://github.com/jmtd,9,https://github.com/chocolate-doom/chocolate-doom/pull/754#issuecomment-357497624,"This reverts commits 901ee2f and
07afb77.
This change broke PNG screenshots on OS X and resulted in 32bit PNGs
on other platforms (large file sizes). The former might be a SDL_Image
bug, the latter definitely is.
Fixes #752",I guess the OS X issue needs fixing first. This was a separate laptop from the one I hit it in originally so that's useful but it would be nice for another OS X user to confirm it.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,755,2016-07-15T04:34:52Z,2016-07-15T08:49:26Z,2016-07-15T08:55:51Z,MERGED,True,25,32,7,https://github.com/chungy,Use SDL_GetPrefPath for the configuration directory.,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/755,https://github.com/chungy,1,https://github.com/chocolate-doom/chocolate-doom/pull/755,"The function requires two arguments: an organization name and an
application name.  Let’s set the organization name to an empty string.
This will not cause issues on POSIX-compliant systems, and hopefully
not on other kinds of systems too.  This just avoids an extra
directory to the configuration path.
This should pull Chocolate Doom into compliance with the XDG Base
Directory Specification, resolving #597.","The function requires two arguments: an organization name and an
application name.  Let’s set the organization name to an empty string.
This will not cause issues on POSIX-compliant systems, and hopefully
not on other kinds of systems too.  This just avoids an extra
directory to the configuration path.
This should pull Chocolate Doom into compliance with the XDG Base
Directory Specification, resolving #597.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,755,2016-07-15T04:34:52Z,2016-07-15T08:49:26Z,2016-07-15T08:55:51Z,MERGED,True,25,32,7,https://github.com/chungy,Use SDL_GetPrefPath for the configuration directory.,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/755,https://github.com/fabiangreffrath,2,https://github.com/chocolate-doom/chocolate-doom/pull/755#issuecomment-232867681,"The function requires two arguments: an organization name and an
application name.  Let’s set the organization name to an empty string.
This will not cause issues on POSIX-compliant systems, and hopefully
not on other kinds of systems too.  This just avoids an extra
directory to the configuration path.
This should pull Chocolate Doom into compliance with the XDG Base
Directory Specification, resolving #597.",What does SDL_GetPrefPath() typically return on Windows systems?,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,755,2016-07-15T04:34:52Z,2016-07-15T08:49:26Z,2016-07-15T08:55:51Z,MERGED,True,25,32,7,https://github.com/chungy,Use SDL_GetPrefPath for the configuration directory.,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/755,https://github.com/chungy,3,https://github.com/chocolate-doom/chocolate-doom/pull/755#issuecomment-232869732,"The function requires two arguments: an organization name and an
application name.  Let’s set the organization name to an empty string.
This will not cause issues on POSIX-compliant systems, and hopefully
not on other kinds of systems too.  This just avoids an extra
directory to the configuration path.
This should pull Chocolate Doom into compliance with the XDG Base
Directory Specification, resolving #597.","Probably a path in %AppData%, but it's not very relevant. The existing vanilla behavior should be preserved on Windows. I don't believe there's a strong argument to stray from that.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,755,2016-07-15T04:34:52Z,2016-07-15T08:49:26Z,2016-07-15T08:55:51Z,MERGED,True,25,32,7,https://github.com/chungy,Use SDL_GetPrefPath for the configuration directory.,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/755,https://github.com/jmtd,4,https://github.com/chocolate-doom/chocolate-doom/pull/755#issuecomment-232871378,"The function requires two arguments: an organization name and an
application name.  Let’s set the organization name to an empty string.
This will not cause issues on POSIX-compliant systems, and hopefully
not on other kinds of systems too.  This just avoids an extra
directory to the configuration path.
This should pull Chocolate Doom into compliance with the XDG Base
Directory Specification, resolving #597.","XDG paths are not typically used on OS X but they could be, so I think it's fine for this on OSX. What do you folks think about having migration code for configuration, saves etc. in the older path?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,755,2016-07-15T04:34:52Z,2016-07-15T08:49:26Z,2016-07-15T08:55:51Z,MERGED,True,25,32,7,https://github.com/chungy,Use SDL_GetPrefPath for the configuration directory.,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/755,https://github.com/chungy,5,https://github.com/chocolate-doom/chocolate-doom/pull/755#issuecomment-232875657,"The function requires two arguments: an organization name and an
application name.  Let’s set the organization name to an empty string.
This will not cause issues on POSIX-compliant systems, and hopefully
not on other kinds of systems too.  This just avoids an extra
directory to the configuration path.
This should pull Chocolate Doom into compliance with the XDG Base
Directory Specification, resolving #597.","Using SDL, it should do the right thing on a per-OS basis. The traditional Unices (Linux, BSD, illumos...) would use the XDG path. Mac should do whatever is typical on Mac. Windows gets vaniilla Doom treatment because it's the one OS with file system heritage and user expectations derived from DOS.
I don't believe we should do any automated migration, it'll be good enough for users to just manually move their configuration over if they wish (eg, ""mv .chocolate-doom .local/share/chocolate-doom""). This also allows you to continue using Chocolate 2.x without some of the config variables being deleted that no longer exist in 3.0.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,755,2016-07-15T04:34:52Z,2016-07-15T08:49:26Z,2016-07-15T08:55:51Z,MERGED,True,25,32,7,https://github.com/chungy,Use SDL_GetPrefPath for the configuration directory.,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/755,https://github.com/jmtd,6,https://github.com/chocolate-doom/chocolate-doom/pull/755#issuecomment-232888700,"The function requires two arguments: an organization name and an
application name.  Let’s set the organization name to an empty string.
This will not cause issues on POSIX-compliant systems, and hopefully
not on other kinds of systems too.  This just avoids an extra
directory to the configuration path.
This should pull Chocolate Doom into compliance with the XDG Base
Directory Specification, resolving #597.","Ah yes sorry I wasn't thinking straight, for the record it results in ~/Library/Application Support//chocolate-doom/ on Mac.

This also allows you to continue using Chocolate 2.x without some of the config variables being deleted that no longer exist in 3.0.

That's a good point yes.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,760,2016-07-21T15:34:51Z,2016-07-24T20:24:00Z,2016-08-11T20:20:02Z,MERGED,True,226,142,21,https://github.com/jmtd,"Add m_subrandom.{c,h} and fix P_Random ambiguities",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/760,https://github.com/jmtd,1,https://github.com/chocolate-doom/chocolate-doom/pull/760,"This morning's train hacking. I've raised a PR rather than push to master immediately simply because it's a huge commit, touching lots of behaviours, not all of which are covered by the base game demos (my normal means of testing random behaviour changes), so I want to spend a little more time getting confidence that there isn't a screwup somewhere, especially in the heretic/hexen changes. Feel free to merge if you are happy with it, or feel free to report ""yup, my favourite demo with a Heresiarch or Korax in it plays back fine!"" :)
A word on the introduction of m_subrandom.c. I considered some alternatives

Add P_SubRandom to heretic/m_random.{c,h} (heretic wins because it needs to expose rndindex) move heretic/m_random.{c,h} down a level, remove {strife,doom}/m_random.{c,h}; adjust all the Makefiles and project files (MSVC+blocks) accordingly. Motivated by a desire to avoid adding a new routine in four separate places. But I'd still need to add it to hexen/m_random.{c,h}, and furthermore extra care is needed to prevent the linker from linking the wrong m_random.o into chocolate-hexen (after all, they have almost identical ABI). A solution could be to rename hexen/m_random to hexen/h2_random, but that means changing a lot of hexen source files, so this ends up being a disruptive and messy approach.
Just add P_SubRandom to */m_random.{c,h}, so there are four copies in the code. I couldn't bring myself to do this.
Don't bother with P_SubRandom and just do int r = P_Random(); substitutions instead, a la Boom/MBF. There were enough places where P_SubRandom could be used (116) that I thought it worthwhile to add somewhere. However there are plenty of other uses of P_Random that needed cleaning up with intermediate variables too, which is why this commit is so large.

Commit message follows:
Doom/Heretic/Hexen frequently make use of a construct like
P_Random() - P_Random()

The order of evaluation of which is undefined in C. Watcom always evaluated
left-to-right. Add a P_SubRandom routine inspired by the same solution
implemented in Eternity that encapsulates this order of evaluation and use that
in place of the above. Thanks @haleyjd
Clean up other occurrences of undefined evaluation order with P_Random,
including where the new P_SubRandom() would be used ambiguously (!), almost all
of which was in the Heretic and Hexen code. (@haleyjd had already cleaned up
Strife)
Fixes #404","This morning's train hacking. I've raised a PR rather than push to master immediately simply because it's a huge commit, touching lots of behaviours, not all of which are covered by the base game demos (my normal means of testing random behaviour changes), so I want to spend a little more time getting confidence that there isn't a screwup somewhere, especially in the heretic/hexen changes. Feel free to merge if you are happy with it, or feel free to report ""yup, my favourite demo with a Heresiarch or Korax in it plays back fine!"" :)
A word on the introduction of m_subrandom.c. I considered some alternatives

Add P_SubRandom to heretic/m_random.{c,h} (heretic wins because it needs to expose rndindex) move heretic/m_random.{c,h} down a level, remove {strife,doom}/m_random.{c,h}; adjust all the Makefiles and project files (MSVC+blocks) accordingly. Motivated by a desire to avoid adding a new routine in four separate places. But I'd still need to add it to hexen/m_random.{c,h}, and furthermore extra care is needed to prevent the linker from linking the wrong m_random.o into chocolate-hexen (after all, they have almost identical ABI). A solution could be to rename hexen/m_random to hexen/h2_random, but that means changing a lot of hexen source files, so this ends up being a disruptive and messy approach.
Just add P_SubRandom to */m_random.{c,h}, so there are four copies in the code. I couldn't bring myself to do this.
Don't bother with P_SubRandom and just do int r = P_Random(); substitutions instead, a la Boom/MBF. There were enough places where P_SubRandom could be used (116) that I thought it worthwhile to add somewhere. However there are plenty of other uses of P_Random that needed cleaning up with intermediate variables too, which is why this commit is so large.

Commit message follows:
Doom/Heretic/Hexen frequently make use of a construct like
P_Random() - P_Random()

The order of evaluation of which is undefined in C. Watcom always evaluated
left-to-right. Add a P_SubRandom routine inspired by the same solution
implemented in Eternity that encapsulates this order of evaluation and use that
in place of the above. Thanks @haleyjd
Clean up other occurrences of undefined evaluation order with P_Random,
including where the new P_SubRandom() would be used ambiguously (!), almost all
of which was in the Heretic and Hexen code. (@haleyjd had already cleaned up
Strife)
Fixes #404",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,760,2016-07-21T15:34:51Z,2016-07-24T20:24:00Z,2016-08-11T20:20:02Z,MERGED,True,226,142,21,https://github.com/jmtd,"Add m_subrandom.{c,h} and fix P_Random ambiguities",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/760,https://github.com/fragglet,2,https://github.com/chocolate-doom/chocolate-doom/pull/760#issuecomment-234296899,"This morning's train hacking. I've raised a PR rather than push to master immediately simply because it's a huge commit, touching lots of behaviours, not all of which are covered by the base game demos (my normal means of testing random behaviour changes), so I want to spend a little more time getting confidence that there isn't a screwup somewhere, especially in the heretic/hexen changes. Feel free to merge if you are happy with it, or feel free to report ""yup, my favourite demo with a Heresiarch or Korax in it plays back fine!"" :)
A word on the introduction of m_subrandom.c. I considered some alternatives

Add P_SubRandom to heretic/m_random.{c,h} (heretic wins because it needs to expose rndindex) move heretic/m_random.{c,h} down a level, remove {strife,doom}/m_random.{c,h}; adjust all the Makefiles and project files (MSVC+blocks) accordingly. Motivated by a desire to avoid adding a new routine in four separate places. But I'd still need to add it to hexen/m_random.{c,h}, and furthermore extra care is needed to prevent the linker from linking the wrong m_random.o into chocolate-hexen (after all, they have almost identical ABI). A solution could be to rename hexen/m_random to hexen/h2_random, but that means changing a lot of hexen source files, so this ends up being a disruptive and messy approach.
Just add P_SubRandom to */m_random.{c,h}, so there are four copies in the code. I couldn't bring myself to do this.
Don't bother with P_SubRandom and just do int r = P_Random(); substitutions instead, a la Boom/MBF. There were enough places where P_SubRandom could be used (116) that I thought it worthwhile to add somewhere. However there are plenty of other uses of P_Random that needed cleaning up with intermediate variables too, which is why this commit is so large.

Commit message follows:
Doom/Heretic/Hexen frequently make use of a construct like
P_Random() - P_Random()

The order of evaluation of which is undefined in C. Watcom always evaluated
left-to-right. Add a P_SubRandom routine inspired by the same solution
implemented in Eternity that encapsulates this order of evaluation and use that
in place of the above. Thanks @haleyjd
Clean up other occurrences of undefined evaluation order with P_Random,
including where the new P_SubRandom() would be used ambiguously (!), almost all
of which was in the Heretic and Hexen code. (@haleyjd had already cleaned up
Strife)
Fixes #404",Looks good for the most part; my only criticism would be that this doesn't seem like something that properly deserves its own file. Probably it's less worse to duplicate the code across the different m_random.c files.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,760,2016-07-21T15:34:51Z,2016-07-24T20:24:00Z,2016-08-11T20:20:02Z,MERGED,True,226,142,21,https://github.com/jmtd,"Add m_subrandom.{c,h} and fix P_Random ambiguities",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/760,https://github.com/jmtd,3,https://github.com/chocolate-doom/chocolate-doom/pull/760#issuecomment-234320187,"This morning's train hacking. I've raised a PR rather than push to master immediately simply because it's a huge commit, touching lots of behaviours, not all of which are covered by the base game demos (my normal means of testing random behaviour changes), so I want to spend a little more time getting confidence that there isn't a screwup somewhere, especially in the heretic/hexen changes. Feel free to merge if you are happy with it, or feel free to report ""yup, my favourite demo with a Heresiarch or Korax in it plays back fine!"" :)
A word on the introduction of m_subrandom.c. I considered some alternatives

Add P_SubRandom to heretic/m_random.{c,h} (heretic wins because it needs to expose rndindex) move heretic/m_random.{c,h} down a level, remove {strife,doom}/m_random.{c,h}; adjust all the Makefiles and project files (MSVC+blocks) accordingly. Motivated by a desire to avoid adding a new routine in four separate places. But I'd still need to add it to hexen/m_random.{c,h}, and furthermore extra care is needed to prevent the linker from linking the wrong m_random.o into chocolate-hexen (after all, they have almost identical ABI). A solution could be to rename hexen/m_random to hexen/h2_random, but that means changing a lot of hexen source files, so this ends up being a disruptive and messy approach.
Just add P_SubRandom to */m_random.{c,h}, so there are four copies in the code. I couldn't bring myself to do this.
Don't bother with P_SubRandom and just do int r = P_Random(); substitutions instead, a la Boom/MBF. There were enough places where P_SubRandom could be used (116) that I thought it worthwhile to add somewhere. However there are plenty of other uses of P_Random that needed cleaning up with intermediate variables too, which is why this commit is so large.

Commit message follows:
Doom/Heretic/Hexen frequently make use of a construct like
P_Random() - P_Random()

The order of evaluation of which is undefined in C. Watcom always evaluated
left-to-right. Add a P_SubRandom routine inspired by the same solution
implemented in Eternity that encapsulates this order of evaluation and use that
in place of the above. Thanks @haleyjd
Clean up other occurrences of undefined evaluation order with P_Random,
including where the new P_SubRandom() would be used ambiguously (!), almost all
of which was in the Heretic and Hexen code. (@haleyjd had already cleaned up
Strife)
Fixes #404",You're probably right...,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,760,2016-07-21T15:34:51Z,2016-07-24T20:24:00Z,2016-08-11T20:20:02Z,MERGED,True,226,142,21,https://github.com/jmtd,"Add m_subrandom.{c,h} and fix P_Random ambiguities",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/760,https://github.com/jmtd,4,https://github.com/chocolate-doom/chocolate-doom/pull/760#issuecomment-234326392,"This morning's train hacking. I've raised a PR rather than push to master immediately simply because it's a huge commit, touching lots of behaviours, not all of which are covered by the base game demos (my normal means of testing random behaviour changes), so I want to spend a little more time getting confidence that there isn't a screwup somewhere, especially in the heretic/hexen changes. Feel free to merge if you are happy with it, or feel free to report ""yup, my favourite demo with a Heresiarch or Korax in it plays back fine!"" :)
A word on the introduction of m_subrandom.c. I considered some alternatives

Add P_SubRandom to heretic/m_random.{c,h} (heretic wins because it needs to expose rndindex) move heretic/m_random.{c,h} down a level, remove {strife,doom}/m_random.{c,h}; adjust all the Makefiles and project files (MSVC+blocks) accordingly. Motivated by a desire to avoid adding a new routine in four separate places. But I'd still need to add it to hexen/m_random.{c,h}, and furthermore extra care is needed to prevent the linker from linking the wrong m_random.o into chocolate-hexen (after all, they have almost identical ABI). A solution could be to rename hexen/m_random to hexen/h2_random, but that means changing a lot of hexen source files, so this ends up being a disruptive and messy approach.
Just add P_SubRandom to */m_random.{c,h}, so there are four copies in the code. I couldn't bring myself to do this.
Don't bother with P_SubRandom and just do int r = P_Random(); substitutions instead, a la Boom/MBF. There were enough places where P_SubRandom could be used (116) that I thought it worthwhile to add somewhere. However there are plenty of other uses of P_Random that needed cleaning up with intermediate variables too, which is why this commit is so large.

Commit message follows:
Doom/Heretic/Hexen frequently make use of a construct like
P_Random() - P_Random()

The order of evaluation of which is undefined in C. Watcom always evaluated
left-to-right. Add a P_SubRandom routine inspired by the same solution
implemented in Eternity that encapsulates this order of evaluation and use that
in place of the above. Thanks @haleyjd
Clean up other occurrences of undefined evaluation order with P_Random,
including where the new P_SubRandom() would be used ambiguously (!), almost all
of which was in the Heretic and Hexen code. (@haleyjd had already cleaned up
Strife)
Fixes #404",will push a rebase when I get a chance later,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,760,2016-07-21T15:34:51Z,2016-07-24T20:24:00Z,2016-08-11T20:20:02Z,MERGED,True,226,142,21,https://github.com/jmtd,"Add m_subrandom.{c,h} and fix P_Random ambiguities",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/760,https://github.com/jmtd,5,https://github.com/chocolate-doom/chocolate-doom/pull/760#issuecomment-234573886,"This morning's train hacking. I've raised a PR rather than push to master immediately simply because it's a huge commit, touching lots of behaviours, not all of which are covered by the base game demos (my normal means of testing random behaviour changes), so I want to spend a little more time getting confidence that there isn't a screwup somewhere, especially in the heretic/hexen changes. Feel free to merge if you are happy with it, or feel free to report ""yup, my favourite demo with a Heresiarch or Korax in it plays back fine!"" :)
A word on the introduction of m_subrandom.c. I considered some alternatives

Add P_SubRandom to heretic/m_random.{c,h} (heretic wins because it needs to expose rndindex) move heretic/m_random.{c,h} down a level, remove {strife,doom}/m_random.{c,h}; adjust all the Makefiles and project files (MSVC+blocks) accordingly. Motivated by a desire to avoid adding a new routine in four separate places. But I'd still need to add it to hexen/m_random.{c,h}, and furthermore extra care is needed to prevent the linker from linking the wrong m_random.o into chocolate-hexen (after all, they have almost identical ABI). A solution could be to rename hexen/m_random to hexen/h2_random, but that means changing a lot of hexen source files, so this ends up being a disruptive and messy approach.
Just add P_SubRandom to */m_random.{c,h}, so there are four copies in the code. I couldn't bring myself to do this.
Don't bother with P_SubRandom and just do int r = P_Random(); substitutions instead, a la Boom/MBF. There were enough places where P_SubRandom could be used (116) that I thought it worthwhile to add somewhere. However there are plenty of other uses of P_Random that needed cleaning up with intermediate variables too, which is why this commit is so large.

Commit message follows:
Doom/Heretic/Hexen frequently make use of a construct like
P_Random() - P_Random()

The order of evaluation of which is undefined in C. Watcom always evaluated
left-to-right. Add a P_SubRandom routine inspired by the same solution
implemented in Eternity that encapsulates this order of evaluation and use that
in place of the above. Thanks @haleyjd
Clean up other occurrences of undefined evaluation order with P_Random,
including where the new P_SubRandom() would be used ambiguously (!), almost all
of which was in the Heretic and Hexen code. (@haleyjd had already cleaned up
Strife)
Fixes #404","Read over this a bunch of times and I'm basically happy but I would be happier if there was some throwaway PWAD for hexen particularly with a wendigo , weredragon , all weapon parts and korax in it to test those routines with demo playback comparison.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,760,2016-07-21T15:34:51Z,2016-07-24T20:24:00Z,2016-08-11T20:20:02Z,MERGED,True,226,142,21,https://github.com/jmtd,"Add m_subrandom.{c,h} and fix P_Random ambiguities",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/760,https://github.com/jmtd,6,https://github.com/chocolate-doom/chocolate-doom/pull/760#issuecomment-234575661,"This morning's train hacking. I've raised a PR rather than push to master immediately simply because it's a huge commit, touching lots of behaviours, not all of which are covered by the base game demos (my normal means of testing random behaviour changes), so I want to spend a little more time getting confidence that there isn't a screwup somewhere, especially in the heretic/hexen changes. Feel free to merge if you are happy with it, or feel free to report ""yup, my favourite demo with a Heresiarch or Korax in it plays back fine!"" :)
A word on the introduction of m_subrandom.c. I considered some alternatives

Add P_SubRandom to heretic/m_random.{c,h} (heretic wins because it needs to expose rndindex) move heretic/m_random.{c,h} down a level, remove {strife,doom}/m_random.{c,h}; adjust all the Makefiles and project files (MSVC+blocks) accordingly. Motivated by a desire to avoid adding a new routine in four separate places. But I'd still need to add it to hexen/m_random.{c,h}, and furthermore extra care is needed to prevent the linker from linking the wrong m_random.o into chocolate-hexen (after all, they have almost identical ABI). A solution could be to rename hexen/m_random to hexen/h2_random, but that means changing a lot of hexen source files, so this ends up being a disruptive and messy approach.
Just add P_SubRandom to */m_random.{c,h}, so there are four copies in the code. I couldn't bring myself to do this.
Don't bother with P_SubRandom and just do int r = P_Random(); substitutions instead, a la Boom/MBF. There were enough places where P_SubRandom could be used (116) that I thought it worthwhile to add somewhere. However there are plenty of other uses of P_Random that needed cleaning up with intermediate variables too, which is why this commit is so large.

Commit message follows:
Doom/Heretic/Hexen frequently make use of a construct like
P_Random() - P_Random()

The order of evaluation of which is undefined in C. Watcom always evaluated
left-to-right. Add a P_SubRandom routine inspired by the same solution
implemented in Eternity that encapsulates this order of evaluation and use that
in place of the above. Thanks @haleyjd
Clean up other occurrences of undefined evaluation order with P_Random,
including where the new P_SubRandom() would be used ambiguously (!), almost all
of which was in the Heretic and Hexen code. (@haleyjd had already cleaned up
Strife)
Fixes #404","oh Eureka has Hexen support now, awesome",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,760,2016-07-21T15:34:51Z,2016-07-24T20:24:00Z,2016-08-11T20:20:02Z,MERGED,True,226,142,21,https://github.com/jmtd,"Add m_subrandom.{c,h} and fix P_Random ambiguities",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/760,https://github.com/jmtd,7,https://github.com/chocolate-doom/chocolate-doom/pull/760#issuecomment-234619766,"This morning's train hacking. I've raised a PR rather than push to master immediately simply because it's a huge commit, touching lots of behaviours, not all of which are covered by the base game demos (my normal means of testing random behaviour changes), so I want to spend a little more time getting confidence that there isn't a screwup somewhere, especially in the heretic/hexen changes. Feel free to merge if you are happy with it, or feel free to report ""yup, my favourite demo with a Heresiarch or Korax in it plays back fine!"" :)
A word on the introduction of m_subrandom.c. I considered some alternatives

Add P_SubRandom to heretic/m_random.{c,h} (heretic wins because it needs to expose rndindex) move heretic/m_random.{c,h} down a level, remove {strife,doom}/m_random.{c,h}; adjust all the Makefiles and project files (MSVC+blocks) accordingly. Motivated by a desire to avoid adding a new routine in four separate places. But I'd still need to add it to hexen/m_random.{c,h}, and furthermore extra care is needed to prevent the linker from linking the wrong m_random.o into chocolate-hexen (after all, they have almost identical ABI). A solution could be to rename hexen/m_random to hexen/h2_random, but that means changing a lot of hexen source files, so this ends up being a disruptive and messy approach.
Just add P_SubRandom to */m_random.{c,h}, so there are four copies in the code. I couldn't bring myself to do this.
Don't bother with P_SubRandom and just do int r = P_Random(); substitutions instead, a la Boom/MBF. There were enough places where P_SubRandom could be used (116) that I thought it worthwhile to add somewhere. However there are plenty of other uses of P_Random that needed cleaning up with intermediate variables too, which is why this commit is so large.

Commit message follows:
Doom/Heretic/Hexen frequently make use of a construct like
P_Random() - P_Random()

The order of evaluation of which is undefined in C. Watcom always evaluated
left-to-right. Add a P_SubRandom routine inspired by the same solution
implemented in Eternity that encapsulates this order of evaluation and use that
in place of the above. Thanks @haleyjd
Clean up other occurrences of undefined evaluation order with P_Random,
including where the new P_SubRandom() would be used ambiguously (!), almost all
of which was in the Heretic and Hexen code. (@haleyjd had already cleaned up
Strife)
Fixes #404","No luck with eureka, can't believe I forgot i can use wadc to knock up a test map!",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,760,2016-07-21T15:34:51Z,2016-07-24T20:24:00Z,2016-08-11T20:20:02Z,MERGED,True,226,142,21,https://github.com/jmtd,"Add m_subrandom.{c,h} and fix P_Random ambiguities",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/760,https://github.com/fabiangreffrath,8,https://github.com/chocolate-doom/chocolate-doom/pull/760#issuecomment-234715880,"This morning's train hacking. I've raised a PR rather than push to master immediately simply because it's a huge commit, touching lots of behaviours, not all of which are covered by the base game demos (my normal means of testing random behaviour changes), so I want to spend a little more time getting confidence that there isn't a screwup somewhere, especially in the heretic/hexen changes. Feel free to merge if you are happy with it, or feel free to report ""yup, my favourite demo with a Heresiarch or Korax in it plays back fine!"" :)
A word on the introduction of m_subrandom.c. I considered some alternatives

Add P_SubRandom to heretic/m_random.{c,h} (heretic wins because it needs to expose rndindex) move heretic/m_random.{c,h} down a level, remove {strife,doom}/m_random.{c,h}; adjust all the Makefiles and project files (MSVC+blocks) accordingly. Motivated by a desire to avoid adding a new routine in four separate places. But I'd still need to add it to hexen/m_random.{c,h}, and furthermore extra care is needed to prevent the linker from linking the wrong m_random.o into chocolate-hexen (after all, they have almost identical ABI). A solution could be to rename hexen/m_random to hexen/h2_random, but that means changing a lot of hexen source files, so this ends up being a disruptive and messy approach.
Just add P_SubRandom to */m_random.{c,h}, so there are four copies in the code. I couldn't bring myself to do this.
Don't bother with P_SubRandom and just do int r = P_Random(); substitutions instead, a la Boom/MBF. There were enough places where P_SubRandom could be used (116) that I thought it worthwhile to add somewhere. However there are plenty of other uses of P_Random that needed cleaning up with intermediate variables too, which is why this commit is so large.

Commit message follows:
Doom/Heretic/Hexen frequently make use of a construct like
P_Random() - P_Random()

The order of evaluation of which is undefined in C. Watcom always evaluated
left-to-right. Add a P_SubRandom routine inspired by the same solution
implemented in Eternity that encapsulates this order of evaluation and use that
in place of the above. Thanks @haleyjd
Clean up other occurrences of undefined evaluation order with P_Random,
including where the new P_SubRandom() would be used ambiguously (!), almost all
of which was in the Heretic and Hexen code. (@haleyjd had already cleaned up
Strife)
Fixes #404","Just add P_SubRandom to */m_random.{c,h}, so there are four copies in the code. I couldn't bring myself to do this.

Sorry, but I don't quite get it. We already have four copies of */m_random.[ch] in the source code. If you just added the P_SubRandom() function to each of them, this would be a patch adding ~6 lines to four files. Now compare this to the patch you proposed in terms of complexity.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,760,2016-07-21T15:34:51Z,2016-07-24T20:24:00Z,2016-08-11T20:20:02Z,MERGED,True,226,142,21,https://github.com/jmtd,"Add m_subrandom.{c,h} and fix P_Random ambiguities",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/760,https://github.com/fabiangreffrath,9,https://github.com/chocolate-doom/chocolate-doom/pull/760#issuecomment-234715993,"This morning's train hacking. I've raised a PR rather than push to master immediately simply because it's a huge commit, touching lots of behaviours, not all of which are covered by the base game demos (my normal means of testing random behaviour changes), so I want to spend a little more time getting confidence that there isn't a screwup somewhere, especially in the heretic/hexen changes. Feel free to merge if you are happy with it, or feel free to report ""yup, my favourite demo with a Heresiarch or Korax in it plays back fine!"" :)
A word on the introduction of m_subrandom.c. I considered some alternatives

Add P_SubRandom to heretic/m_random.{c,h} (heretic wins because it needs to expose rndindex) move heretic/m_random.{c,h} down a level, remove {strife,doom}/m_random.{c,h}; adjust all the Makefiles and project files (MSVC+blocks) accordingly. Motivated by a desire to avoid adding a new routine in four separate places. But I'd still need to add it to hexen/m_random.{c,h}, and furthermore extra care is needed to prevent the linker from linking the wrong m_random.o into chocolate-hexen (after all, they have almost identical ABI). A solution could be to rename hexen/m_random to hexen/h2_random, but that means changing a lot of hexen source files, so this ends up being a disruptive and messy approach.
Just add P_SubRandom to */m_random.{c,h}, so there are four copies in the code. I couldn't bring myself to do this.
Don't bother with P_SubRandom and just do int r = P_Random(); substitutions instead, a la Boom/MBF. There were enough places where P_SubRandom could be used (116) that I thought it worthwhile to add somewhere. However there are plenty of other uses of P_Random that needed cleaning up with intermediate variables too, which is why this commit is so large.

Commit message follows:
Doom/Heretic/Hexen frequently make use of a construct like
P_Random() - P_Random()

The order of evaluation of which is undefined in C. Watcom always evaluated
left-to-right. Add a P_SubRandom routine inspired by the same solution
implemented in Eternity that encapsulates this order of evaluation and use that
in place of the above. Thanks @haleyjd
Clean up other occurrences of undefined evaluation order with P_Random,
including where the new P_SubRandom() would be used ambiguously (!), almost all
of which was in the Heretic and Hexen code. (@haleyjd had already cleaned up
Strife)
Fixes #404","Sorry again, I must have missed that you have already changed the code into that direction. :/",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,760,2016-07-21T15:34:51Z,2016-07-24T20:24:00Z,2016-08-11T20:20:02Z,MERGED,True,226,142,21,https://github.com/jmtd,"Add m_subrandom.{c,h} and fix P_Random ambiguities",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/760,https://github.com/jmtd,10,https://github.com/chocolate-doom/chocolate-doom/pull/760#issuecomment-234799900,"This morning's train hacking. I've raised a PR rather than push to master immediately simply because it's a huge commit, touching lots of behaviours, not all of which are covered by the base game demos (my normal means of testing random behaviour changes), so I want to spend a little more time getting confidence that there isn't a screwup somewhere, especially in the heretic/hexen changes. Feel free to merge if you are happy with it, or feel free to report ""yup, my favourite demo with a Heresiarch or Korax in it plays back fine!"" :)
A word on the introduction of m_subrandom.c. I considered some alternatives

Add P_SubRandom to heretic/m_random.{c,h} (heretic wins because it needs to expose rndindex) move heretic/m_random.{c,h} down a level, remove {strife,doom}/m_random.{c,h}; adjust all the Makefiles and project files (MSVC+blocks) accordingly. Motivated by a desire to avoid adding a new routine in four separate places. But I'd still need to add it to hexen/m_random.{c,h}, and furthermore extra care is needed to prevent the linker from linking the wrong m_random.o into chocolate-hexen (after all, they have almost identical ABI). A solution could be to rename hexen/m_random to hexen/h2_random, but that means changing a lot of hexen source files, so this ends up being a disruptive and messy approach.
Just add P_SubRandom to */m_random.{c,h}, so there are four copies in the code. I couldn't bring myself to do this.
Don't bother with P_SubRandom and just do int r = P_Random(); substitutions instead, a la Boom/MBF. There were enough places where P_SubRandom could be used (116) that I thought it worthwhile to add somewhere. However there are plenty of other uses of P_Random that needed cleaning up with intermediate variables too, which is why this commit is so large.

Commit message follows:
Doom/Heretic/Hexen frequently make use of a construct like
P_Random() - P_Random()

The order of evaluation of which is undefined in C. Watcom always evaluated
left-to-right. Add a P_SubRandom routine inspired by the same solution
implemented in Eternity that encapsulates this order of evaluation and use that
in place of the above. Thanks @haleyjd
Clean up other occurrences of undefined evaluation order with P_Random,
including where the new P_SubRandom() would be used ambiguously (!), almost all
of which was in the Heretic and Hexen code. (@haleyjd had already cleaned up
Strife)
Fixes #404",I've finally convinced myself this is OK after testing lots more heretic and hexen behaviours with demos,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,760,2016-07-21T15:34:51Z,2016-07-24T20:24:00Z,2016-08-11T20:20:02Z,MERGED,True,226,142,21,https://github.com/jmtd,"Add m_subrandom.{c,h} and fix P_Random ambiguities",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/760,https://github.com/fragglet,11,https://github.com/chocolate-doom/chocolate-doom/pull/760#issuecomment-234832879,"This morning's train hacking. I've raised a PR rather than push to master immediately simply because it's a huge commit, touching lots of behaviours, not all of which are covered by the base game demos (my normal means of testing random behaviour changes), so I want to spend a little more time getting confidence that there isn't a screwup somewhere, especially in the heretic/hexen changes. Feel free to merge if you are happy with it, or feel free to report ""yup, my favourite demo with a Heresiarch or Korax in it plays back fine!"" :)
A word on the introduction of m_subrandom.c. I considered some alternatives

Add P_SubRandom to heretic/m_random.{c,h} (heretic wins because it needs to expose rndindex) move heretic/m_random.{c,h} down a level, remove {strife,doom}/m_random.{c,h}; adjust all the Makefiles and project files (MSVC+blocks) accordingly. Motivated by a desire to avoid adding a new routine in four separate places. But I'd still need to add it to hexen/m_random.{c,h}, and furthermore extra care is needed to prevent the linker from linking the wrong m_random.o into chocolate-hexen (after all, they have almost identical ABI). A solution could be to rename hexen/m_random to hexen/h2_random, but that means changing a lot of hexen source files, so this ends up being a disruptive and messy approach.
Just add P_SubRandom to */m_random.{c,h}, so there are four copies in the code. I couldn't bring myself to do this.
Don't bother with P_SubRandom and just do int r = P_Random(); substitutions instead, a la Boom/MBF. There were enough places where P_SubRandom could be used (116) that I thought it worthwhile to add somewhere. However there are plenty of other uses of P_Random that needed cleaning up with intermediate variables too, which is why this commit is so large.

Commit message follows:
Doom/Heretic/Hexen frequently make use of a construct like
P_Random() - P_Random()

The order of evaluation of which is undefined in C. Watcom always evaluated
left-to-right. Add a P_SubRandom routine inspired by the same solution
implemented in Eternity that encapsulates this order of evaluation and use that
in place of the above. Thanks @haleyjd
Clean up other occurrences of undefined evaluation order with P_Random,
including where the new P_SubRandom() would be used ambiguously (!), almost all
of which was in the Heretic and Hexen code. (@haleyjd had already cleaned up
Strife)
Fixes #404","Thoroughness appreciated - thanks for doing this!
It's a shame there isn't really a wealth of demos we can use for testing like there is for Doom.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,760,2016-07-21T15:34:51Z,2016-07-24T20:24:00Z,2016-08-11T20:20:02Z,MERGED,True,226,142,21,https://github.com/jmtd,"Add m_subrandom.{c,h} and fix P_Random ambiguities",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/760,https://github.com/jmtd,12,https://github.com/chocolate-doom/chocolate-doom/pull/760#issuecomment-234903826,"This morning's train hacking. I've raised a PR rather than push to master immediately simply because it's a huge commit, touching lots of behaviours, not all of which are covered by the base game demos (my normal means of testing random behaviour changes), so I want to spend a little more time getting confidence that there isn't a screwup somewhere, especially in the heretic/hexen changes. Feel free to merge if you are happy with it, or feel free to report ""yup, my favourite demo with a Heresiarch or Korax in it plays back fine!"" :)
A word on the introduction of m_subrandom.c. I considered some alternatives

Add P_SubRandom to heretic/m_random.{c,h} (heretic wins because it needs to expose rndindex) move heretic/m_random.{c,h} down a level, remove {strife,doom}/m_random.{c,h}; adjust all the Makefiles and project files (MSVC+blocks) accordingly. Motivated by a desire to avoid adding a new routine in four separate places. But I'd still need to add it to hexen/m_random.{c,h}, and furthermore extra care is needed to prevent the linker from linking the wrong m_random.o into chocolate-hexen (after all, they have almost identical ABI). A solution could be to rename hexen/m_random to hexen/h2_random, but that means changing a lot of hexen source files, so this ends up being a disruptive and messy approach.
Just add P_SubRandom to */m_random.{c,h}, so there are four copies in the code. I couldn't bring myself to do this.
Don't bother with P_SubRandom and just do int r = P_Random(); substitutions instead, a la Boom/MBF. There were enough places where P_SubRandom could be used (116) that I thought it worthwhile to add somewhere. However there are plenty of other uses of P_Random that needed cleaning up with intermediate variables too, which is why this commit is so large.

Commit message follows:
Doom/Heretic/Hexen frequently make use of a construct like
P_Random() - P_Random()

The order of evaluation of which is undefined in C. Watcom always evaluated
left-to-right. Add a P_SubRandom routine inspired by the same solution
implemented in Eternity that encapsulates this order of evaluation and use that
in place of the above. Thanks @haleyjd
Clean up other occurrences of undefined evaluation order with P_Random,
including where the new P_SubRandom() would be used ambiguously (!), almost all
of which was in the Heretic and Hexen code. (@haleyjd had already cleaned up
Strife)
Fixes #404","You're welcome. The process reminded me of the very first Choco hack I attempted back in 2006, to implement checksumming some game state on demo playback and work that into a regression test suite, but seems I never finished. (ISTR I was working it into prboom at the same time). I should take a look at your test stuff sometime :)",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,760,2016-07-21T15:34:51Z,2016-07-24T20:24:00Z,2016-08-11T20:20:02Z,MERGED,True,226,142,21,https://github.com/jmtd,"Add m_subrandom.{c,h} and fix P_Random ambiguities",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/760,https://github.com/haleyjd,13,https://github.com/chocolate-doom/chocolate-doom/pull/760#issuecomment-239279562,"This morning's train hacking. I've raised a PR rather than push to master immediately simply because it's a huge commit, touching lots of behaviours, not all of which are covered by the base game demos (my normal means of testing random behaviour changes), so I want to spend a little more time getting confidence that there isn't a screwup somewhere, especially in the heretic/hexen changes. Feel free to merge if you are happy with it, or feel free to report ""yup, my favourite demo with a Heresiarch or Korax in it plays back fine!"" :)
A word on the introduction of m_subrandom.c. I considered some alternatives

Add P_SubRandom to heretic/m_random.{c,h} (heretic wins because it needs to expose rndindex) move heretic/m_random.{c,h} down a level, remove {strife,doom}/m_random.{c,h}; adjust all the Makefiles and project files (MSVC+blocks) accordingly. Motivated by a desire to avoid adding a new routine in four separate places. But I'd still need to add it to hexen/m_random.{c,h}, and furthermore extra care is needed to prevent the linker from linking the wrong m_random.o into chocolate-hexen (after all, they have almost identical ABI). A solution could be to rename hexen/m_random to hexen/h2_random, but that means changing a lot of hexen source files, so this ends up being a disruptive and messy approach.
Just add P_SubRandom to */m_random.{c,h}, so there are four copies in the code. I couldn't bring myself to do this.
Don't bother with P_SubRandom and just do int r = P_Random(); substitutions instead, a la Boom/MBF. There were enough places where P_SubRandom could be used (116) that I thought it worthwhile to add somewhere. However there are plenty of other uses of P_Random that needed cleaning up with intermediate variables too, which is why this commit is so large.

Commit message follows:
Doom/Heretic/Hexen frequently make use of a construct like
P_Random() - P_Random()

The order of evaluation of which is undefined in C. Watcom always evaluated
left-to-right. Add a P_SubRandom routine inspired by the same solution
implemented in Eternity that encapsulates this order of evaluation and use that
in place of the above. Thanks @haleyjd
Clean up other occurrences of undefined evaluation order with P_Random,
including where the new P_SubRandom() would be used ambiguously (!), almost all
of which was in the Heretic and Hexen code. (@haleyjd had already cleaned up
Strife)
Fixes #404",Very pleased to see this resolved.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,762,2016-07-23T19:04:09Z,2016-10-12T20:14:43Z,2016-10-13T11:06:36Z,MERGED,True,27,0,3,https://github.com/jmtd,Add CheckACSPresent and gracefully exit,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/762,https://github.com/jmtd,1,https://github.com/chocolate-doom/chocolate-doom/pull/762,"Seems to do the job for me, haven't checked the Wyvern yet though.
Commit message follows

Avoid a segfault if Korax is included in a PWAD without the proper
ACS/MAPINFO/etc stuff, instead exit via I_Error.
Fixes #761","Seems to do the job for me, haven't checked the Wyvern yet though.
Commit message follows

Avoid a segfault if Korax is included in a PWAD without the proper
ACS/MAPINFO/etc stuff, instead exit via I_Error.
Fixes #761",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,762,2016-07-23T19:04:09Z,2016-10-12T20:14:43Z,2016-10-13T11:06:36Z,MERGED,True,27,0,3,https://github.com/jmtd,Add CheckACSPresent and gracefully exit,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/762,https://github.com/haleyjd,2,https://github.com/chocolate-doom/chocolate-doom/pull/762#issuecomment-252975720,"Seems to do the job for me, haven't checked the Wyvern yet though.
Commit message follows

Avoid a segfault if Korax is included in a PWAD without the proper
ACS/MAPINFO/etc stuff, instead exit via I_Error.
Fixes #761",What remains in order to merge this?,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,762,2016-07-23T19:04:09Z,2016-10-12T20:14:43Z,2016-10-13T11:06:36Z,MERGED,True,27,0,3,https://github.com/jmtd,Add CheckACSPresent and gracefully exit,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/762,https://github.com/chungy,3,https://github.com/chocolate-doom/chocolate-doom/pull/762#issuecomment-253325569,"Seems to do the job for me, haven't checked the Wyvern yet though.
Commit message follows

Avoid a segfault if Korax is included in a PWAD without the proper
ACS/MAPINFO/etc stuff, instead exit via I_Error.
Fixes #761","I believe the only thing that blocked it was my comment about magic numbers. Given CapnClever's comment in #762 (comment), I think they're more appropriately handled in a more general and wider issue. I'll merge this.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,762,2016-07-23T19:04:09Z,2016-10-12T20:14:43Z,2016-10-13T11:06:36Z,MERGED,True,27,0,3,https://github.com/jmtd,Add CheckACSPresent and gracefully exit,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/762,https://github.com/jmtd,4,https://github.com/chocolate-doom/chocolate-doom/pull/762#issuecomment-253483343,"Seems to do the job for me, haven't checked the Wyvern yet though.
Commit message follows

Avoid a segfault if Korax is included in a PWAD without the proper
ACS/MAPINFO/etc stuff, instead exit via I_Error.
Fixes #761",Thanks!,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,780,2016-10-09T23:30:28Z,2016-10-10T00:11:36Z,2016-11-11T03:17:20Z,MERGED,True,2,2,2,https://github.com/CapnClever,"Heretic/Hexen: Rebinding of ""Finish recording demo""",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/780,https://github.com/CapnClever,1,https://github.com/chocolate-doom/chocolate-doom/pull/780,Fix for #779. I changed the comment a bit to reflect the flexible binding of the command.,Fix for #779. I changed the comment a bit to reflect the flexible binding of the command.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,784,2016-10-16T08:29:01Z,2016-10-21T15:13:12Z,2016-10-21T15:13:13Z,MERGED,True,399,29,10,https://github.com/CapnClever,Additional Heretic/Hexen demo support,10,[],https://github.com/chocolate-doom/chocolate-doom/pull/784,https://github.com/CapnClever,1,https://github.com/chocolate-doom/chocolate-doom/pull/784,"Resolves #432 . I'll paste the summary of what I there:

-maxdemo support is added.
-timedemo was fixed to count realtics starting from the beginning of playback rather than the start of the map. It didn't matter before because you couldn't play back demos with more than one level anyway.
-longtics and corresponding ""lowres_turn"" compatibility was added. This also fixed up network game consistency problems when some players record demos and others don't.
New command -demoextend allows a demo to continue after a level exit or after a player respawn. Hexen required some additional code to prevent recording and playback to suddenly stop whenever a map loads, but I tried to be as minimally intrusive with respect to functionality as possible.
New command -shortticfix smooths out the mouse when recording with lowres turning, equivalent to Doom's handling. Heretic/Hexen lacks code that correctly manages shorttic turning resolution, and by default the turning control is incredibly sensitive to the right and difficult to finely adjust to the left.

The only piece I didn't include was ""unlimited demo size"" support. Since Heretic and Hexen are also missing the unlimited savegame size support as well, I decided to leave it for a separate implementation (as a partial implementation of the Compatibility features would needlessly complicate chocolate-setup compared to adding them together).
For anyone who already pulled in these changes earlier, I amended NEWS.md to the last commit so be aware of that tiny conflict.
EDIT: Accidentally referenced the wrong issue.","Resolves #432 . I'll paste the summary of what I there:

-maxdemo support is added.
-timedemo was fixed to count realtics starting from the beginning of playback rather than the start of the map. It didn't matter before because you couldn't play back demos with more than one level anyway.
-longtics and corresponding ""lowres_turn"" compatibility was added. This also fixed up network game consistency problems when some players record demos and others don't.
New command -demoextend allows a demo to continue after a level exit or after a player respawn. Hexen required some additional code to prevent recording and playback to suddenly stop whenever a map loads, but I tried to be as minimally intrusive with respect to functionality as possible.
New command -shortticfix smooths out the mouse when recording with lowres turning, equivalent to Doom's handling. Heretic/Hexen lacks code that correctly manages shorttic turning resolution, and by default the turning control is incredibly sensitive to the right and difficult to finely adjust to the left.

The only piece I didn't include was ""unlimited demo size"" support. Since Heretic and Hexen are also missing the unlimited savegame size support as well, I decided to leave it for a separate implementation (as a partial implementation of the Compatibility features would needlessly complicate chocolate-setup compared to adding them together).
For anyone who already pulled in these changes earlier, I amended NEWS.md to the last commit so be aware of that tiny conflict.
EDIT: Accidentally referenced the wrong issue.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,784,2016-10-16T08:29:01Z,2016-10-21T15:13:12Z,2016-10-21T15:13:13Z,MERGED,True,399,29,10,https://github.com/CapnClever,Additional Heretic/Hexen demo support,10,[],https://github.com/chocolate-doom/chocolate-doom/pull/784,https://github.com/chungy,2,https://github.com/chocolate-doom/chocolate-doom/pull/784#issuecomment-254268908,"Resolves #432 . I'll paste the summary of what I there:

-maxdemo support is added.
-timedemo was fixed to count realtics starting from the beginning of playback rather than the start of the map. It didn't matter before because you couldn't play back demos with more than one level anyway.
-longtics and corresponding ""lowres_turn"" compatibility was added. This also fixed up network game consistency problems when some players record demos and others don't.
New command -demoextend allows a demo to continue after a level exit or after a player respawn. Hexen required some additional code to prevent recording and playback to suddenly stop whenever a map loads, but I tried to be as minimally intrusive with respect to functionality as possible.
New command -shortticfix smooths out the mouse when recording with lowres turning, equivalent to Doom's handling. Heretic/Hexen lacks code that correctly manages shorttic turning resolution, and by default the turning control is incredibly sensitive to the right and difficult to finely adjust to the left.

The only piece I didn't include was ""unlimited demo size"" support. Since Heretic and Hexen are also missing the unlimited savegame size support as well, I decided to leave it for a separate implementation (as a partial implementation of the Compatibility features would needlessly complicate chocolate-setup compared to adding them together).
For anyone who already pulled in these changes earlier, I amended NEWS.md to the last commit so be aware of that tiny conflict.
EDIT: Accidentally referenced the wrong issue.","Looks all good to me. Should we be documenting the incompatibility, such as in heretic.template and hexen.template? These changes are a bit special, since playback requires the same demo extension options too (unlike Doom, where the lump header of v1.91 makes it clear to interpret with longtics), so players would probably want to make a text file when they record like this...",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,784,2016-10-16T08:29:01Z,2016-10-21T15:13:12Z,2016-10-21T15:13:13Z,MERGED,True,399,29,10,https://github.com/CapnClever,Additional Heretic/Hexen demo support,10,[],https://github.com/chocolate-doom/chocolate-doom/pull/784,https://github.com/CapnClever,3,https://github.com/chocolate-doom/chocolate-doom/pull/784#issuecomment-254678824,"Resolves #432 . I'll paste the summary of what I there:

-maxdemo support is added.
-timedemo was fixed to count realtics starting from the beginning of playback rather than the start of the map. It didn't matter before because you couldn't play back demos with more than one level anyway.
-longtics and corresponding ""lowres_turn"" compatibility was added. This also fixed up network game consistency problems when some players record demos and others don't.
New command -demoextend allows a demo to continue after a level exit or after a player respawn. Hexen required some additional code to prevent recording and playback to suddenly stop whenever a map loads, but I tried to be as minimally intrusive with respect to functionality as possible.
New command -shortticfix smooths out the mouse when recording with lowres turning, equivalent to Doom's handling. Heretic/Hexen lacks code that correctly manages shorttic turning resolution, and by default the turning control is incredibly sensitive to the right and difficult to finely adjust to the left.

The only piece I didn't include was ""unlimited demo size"" support. Since Heretic and Hexen are also missing the unlimited savegame size support as well, I decided to leave it for a separate implementation (as a partial implementation of the Compatibility features would needlessly complicate chocolate-setup compared to adding them together).
For anyone who already pulled in these changes earlier, I amended NEWS.md to the last commit so be aware of that tiny conflict.
EDIT: Accidentally referenced the wrong issue.","@fragglet For small changes like this, are you okay with a fresh commit that fixes them, or would you prefer I modify the original commits in-context and repush to make the commit history cleaner? I'm fine doing either.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,784,2016-10-16T08:29:01Z,2016-10-21T15:13:12Z,2016-10-21T15:13:13Z,MERGED,True,399,29,10,https://github.com/CapnClever,Additional Heretic/Hexen demo support,10,[],https://github.com/chocolate-doom/chocolate-doom/pull/784,https://github.com/fragglet,4,https://github.com/chocolate-doom/chocolate-doom/pull/784#issuecomment-254700416,"Resolves #432 . I'll paste the summary of what I there:

-maxdemo support is added.
-timedemo was fixed to count realtics starting from the beginning of playback rather than the start of the map. It didn't matter before because you couldn't play back demos with more than one level anyway.
-longtics and corresponding ""lowres_turn"" compatibility was added. This also fixed up network game consistency problems when some players record demos and others don't.
New command -demoextend allows a demo to continue after a level exit or after a player respawn. Hexen required some additional code to prevent recording and playback to suddenly stop whenever a map loads, but I tried to be as minimally intrusive with respect to functionality as possible.
New command -shortticfix smooths out the mouse when recording with lowres turning, equivalent to Doom's handling. Heretic/Hexen lacks code that correctly manages shorttic turning resolution, and by default the turning control is incredibly sensitive to the right and difficult to finely adjust to the left.

The only piece I didn't include was ""unlimited demo size"" support. Since Heretic and Hexen are also missing the unlimited savegame size support as well, I decided to leave it for a separate implementation (as a partial implementation of the Compatibility features would needlessly complicate chocolate-setup compared to adding them together).
For anyone who already pulled in these changes earlier, I amended NEWS.md to the last commit so be aware of that tiny conflict.
EDIT: Accidentally referenced the wrong issue.",It's fine to just add new commits to the branch.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,784,2016-10-16T08:29:01Z,2016-10-21T15:13:12Z,2016-10-21T15:13:13Z,MERGED,True,399,29,10,https://github.com/CapnClever,Additional Heretic/Hexen demo support,10,[],https://github.com/chocolate-doom/chocolate-doom/pull/784,https://github.com/CapnClever,5,https://github.com/chocolate-doom/chocolate-doom/pull/784#issuecomment-254708052,"Resolves #432 . I'll paste the summary of what I there:

-maxdemo support is added.
-timedemo was fixed to count realtics starting from the beginning of playback rather than the start of the map. It didn't matter before because you couldn't play back demos with more than one level anyway.
-longtics and corresponding ""lowres_turn"" compatibility was added. This also fixed up network game consistency problems when some players record demos and others don't.
New command -demoextend allows a demo to continue after a level exit or after a player respawn. Hexen required some additional code to prevent recording and playback to suddenly stop whenever a map loads, but I tried to be as minimally intrusive with respect to functionality as possible.
New command -shortticfix smooths out the mouse when recording with lowres turning, equivalent to Doom's handling. Heretic/Hexen lacks code that correctly manages shorttic turning resolution, and by default the turning control is incredibly sensitive to the right and difficult to finely adjust to the left.

The only piece I didn't include was ""unlimited demo size"" support. Since Heretic and Hexen are also missing the unlimited savegame size support as well, I decided to leave it for a separate implementation (as a partial implementation of the Compatibility features would needlessly complicate chocolate-setup compared to adding them together).
For anyone who already pulled in these changes earlier, I amended NEWS.md to the last commit so be aware of that tiny conflict.
EDIT: Accidentally referenced the wrong issue.","Updated with requested changes.
To give an idea of the legacy compatibility, I've included examples recorded using vanilla game patches that require the -demoextend parameter in the Chocolate ports: one for Heretic (H1SP-721.LMP using vvHeretic patch) and one for Hexen (HC10524L.LMP using Hexen-plus patch). (The Hexen one also requires -longtics, though it is somewhat amusing to see what happens when you don't.)
demoextend examples.zip",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,784,2016-10-16T08:29:01Z,2016-10-21T15:13:12Z,2016-10-21T15:13:13Z,MERGED,True,399,29,10,https://github.com/CapnClever,Additional Heretic/Hexen demo support,10,[],https://github.com/chocolate-doom/chocolate-doom/pull/784,https://github.com/CapnClever,6,https://github.com/chocolate-doom/chocolate-doom/pull/784#issuecomment-255130489,"Resolves #432 . I'll paste the summary of what I there:

-maxdemo support is added.
-timedemo was fixed to count realtics starting from the beginning of playback rather than the start of the map. It didn't matter before because you couldn't play back demos with more than one level anyway.
-longtics and corresponding ""lowres_turn"" compatibility was added. This also fixed up network game consistency problems when some players record demos and others don't.
New command -demoextend allows a demo to continue after a level exit or after a player respawn. Hexen required some additional code to prevent recording and playback to suddenly stop whenever a map loads, but I tried to be as minimally intrusive with respect to functionality as possible.
New command -shortticfix smooths out the mouse when recording with lowres turning, equivalent to Doom's handling. Heretic/Hexen lacks code that correctly manages shorttic turning resolution, and by default the turning control is incredibly sensitive to the right and difficult to finely adjust to the left.

The only piece I didn't include was ""unlimited demo size"" support. Since Heretic and Hexen are also missing the unlimited savegame size support as well, I decided to leave it for a separate implementation (as a partial implementation of the Compatibility features would needlessly complicate chocolate-setup compared to adding them together).
For anyone who already pulled in these changes earlier, I amended NEWS.md to the last commit so be aware of that tiny conflict.
EDIT: Accidentally referenced the wrong issue.","Updated. I also adjusted the longtics parameter description because Heretic/Hexen require that it be used for playback as well.
I'll try to keep in mind better functions for the future: many of these changes were copy-paste from Doom-equivalent code and I didn't think to look into now-existing alternatives.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,784,2016-10-16T08:29:01Z,2016-10-21T15:13:12Z,2016-10-21T15:13:13Z,MERGED,True,399,29,10,https://github.com/CapnClever,Additional Heretic/Hexen demo support,10,[],https://github.com/chocolate-doom/chocolate-doom/pull/784,https://github.com/CapnClever,7,https://github.com/chocolate-doom/chocolate-doom/pull/784#issuecomment-255250507,"Resolves #432 . I'll paste the summary of what I there:

-maxdemo support is added.
-timedemo was fixed to count realtics starting from the beginning of playback rather than the start of the map. It didn't matter before because you couldn't play back demos with more than one level anyway.
-longtics and corresponding ""lowres_turn"" compatibility was added. This also fixed up network game consistency problems when some players record demos and others don't.
New command -demoextend allows a demo to continue after a level exit or after a player respawn. Hexen required some additional code to prevent recording and playback to suddenly stop whenever a map loads, but I tried to be as minimally intrusive with respect to functionality as possible.
New command -shortticfix smooths out the mouse when recording with lowres turning, equivalent to Doom's handling. Heretic/Hexen lacks code that correctly manages shorttic turning resolution, and by default the turning control is incredibly sensitive to the right and difficult to finely adjust to the left.

The only piece I didn't include was ""unlimited demo size"" support. Since Heretic and Hexen are also missing the unlimited savegame size support as well, I decided to leave it for a separate implementation (as a partial implementation of the Compatibility features would needlessly complicate chocolate-setup compared to adding them together).
For anyone who already pulled in these changes earlier, I amended NEWS.md to the last commit so be aware of that tiny conflict.
EDIT: Accidentally referenced the wrong issue.","Added in the auto-playback of parameters for Heretic/Hexen. I couldn't test -respawn for Hexen because it doesn't actually do anything, but hey, the parameter's technically there. (If you think this is a problem in case we decide to ""enable"" respawn capability in Hexen and want to not allow playbacks of non-existent respawn to potentially desync those demos in the future, I can leave it out for now.)
Also, considering the # of update-commits, I could squash them together and re-push so long as you feel everything else is a-okay.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,785,2016-10-20T03:16:05Z,2016-10-20T14:14:59Z,2016-10-20T14:14:59Z,MERGED,True,8,0,2,https://github.com/CapnClever,Fix network player name binding in Heretic/Hexen,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/785,https://github.com/CapnClever,1,https://github.com/chocolate-doom/chocolate-doom/pull/785,"Resolves #612.
The player_name config variable only appeared as a result of starting/joining a network game: the addition of this function (which is just a copy-paste from Doom's equivalent file) ensures that the variable persists between sessions and regardless of the type of game.","Resolves #612.
The player_name config variable only appeared as a result of starting/joining a network game: the addition of this function (which is just a copy-paste from Doom's equivalent file) ensures that the variable persists between sessions and regardless of the type of game.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,785,2016-10-20T03:16:05Z,2016-10-20T14:14:59Z,2016-10-20T14:14:59Z,MERGED,True,8,0,2,https://github.com/CapnClever,Fix network player name binding in Heretic/Hexen,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/785,https://github.com/fragglet,2,https://github.com/chocolate-doom/chocolate-doom/pull/785#issuecomment-255118146,"Resolves #612.
The player_name config variable only appeared as a result of starting/joining a network game: the addition of this function (which is just a copy-paste from Doom's equivalent file) ensures that the variable persists between sessions and regardless of the type of game.",Thanks!,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,786,2016-10-23T20:38:05Z,2016-10-23T22:39:40Z,2016-11-11T03:17:20Z,MERGED,True,0,1,1,https://github.com/CapnClever,Hot fix for #432,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/786,https://github.com/CapnClever,1,https://github.com/chocolate-doom/chocolate-doom/pull/786,"I just want to apologize this error got into the master branch. You can accept the PR as a fix or anyone with push privileges can fix it themselves, this is only to indicate the problem. I went through the rest of my tests (single-player ones, nothing changed in the network code on the very last commit) and everything works as expected with the edit.","I just want to apologize this error got into the master branch. You can accept the PR as a fix or anyone with push privileges can fix it themselves, this is only to indicate the problem. I went through the rest of my tests (single-player ones, nothing changed in the network code on the very last commit) and everything works as expected with the edit.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,786,2016-10-23T20:38:05Z,2016-10-23T22:39:40Z,2016-11-11T03:17:20Z,MERGED,True,0,1,1,https://github.com/CapnClever,Hot fix for #432,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/786,https://github.com/fragglet,2,https://github.com/chocolate-doom/chocolate-doom/pull/786#issuecomment-255619790,"I just want to apologize this error got into the master branch. You can accept the PR as a fix or anyone with push privileges can fix it themselves, this is only to indicate the problem. I went through the rest of my tests (single-player ones, nothing changed in the network code on the very last commit) and everything works as expected with the edit.",No problem - thanks for the fix!,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,790,2016-10-29T00:59:20Z,2016-11-01T19:27:22Z,2016-11-11T03:17:20Z,MERGED,True,779,647,11,https://github.com/CapnClever,Compatibility options in Heretic and Hexen,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/790,https://github.com/CapnClever,1,https://github.com/chocolate-doom/chocolate-doom/pull/790,"Resolves #789. Forgot to include issue tags to the commits, though this was a self-made issue so hopefully not too concerning. Some notes:

I rewrote a little bit of Hexen's savegame code so read information from a file bytes at a time, as is done in Doom/Heretic: this ""solved"" the problem of loading or saving a game.
CopyFile was completely rewritten to read in chunks (0x10000) of saves at a time for the copy procedure: this virtually guarantees no allocation problems here. Hexen's compatibility WRT savegames is to attempt to read in the entire file, then immediately freeing the space if it succeeds.
Also did some renaming of Hexen's save-writing functions. Since I changed many lines for the save-reading anyway, I figure this isn't a big deal. (I could go back to using the GET_LONG, etc macros, but this is probably more straight-forward and this code's almost never been touched anyway so I don't think there's a git blame problem.)

The rest should be straight-forward.","Resolves #789. Forgot to include issue tags to the commits, though this was a self-made issue so hopefully not too concerning. Some notes:

I rewrote a little bit of Hexen's savegame code so read information from a file bytes at a time, as is done in Doom/Heretic: this ""solved"" the problem of loading or saving a game.
CopyFile was completely rewritten to read in chunks (0x10000) of saves at a time for the copy procedure: this virtually guarantees no allocation problems here. Hexen's compatibility WRT savegames is to attempt to read in the entire file, then immediately freeing the space if it succeeds.
Also did some renaming of Hexen's save-writing functions. Since I changed many lines for the save-reading anyway, I figure this isn't a big deal. (I could go back to using the GET_LONG, etc macros, but this is probably more straight-forward and this code's almost never been touched anyway so I don't think there's a git blame problem.)

The rest should be straight-forward.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,790,2016-10-29T00:59:20Z,2016-11-01T19:27:22Z,2016-11-11T03:17:20Z,MERGED,True,779,647,11,https://github.com/CapnClever,Compatibility options in Heretic and Hexen,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/790,https://github.com/CapnClever,2,https://github.com/chocolate-doom/chocolate-doom/pull/790#issuecomment-257368765,"Resolves #789. Forgot to include issue tags to the commits, though this was a self-made issue so hopefully not too concerning. Some notes:

I rewrote a little bit of Hexen's savegame code so read information from a file bytes at a time, as is done in Doom/Heretic: this ""solved"" the problem of loading or saving a game.
CopyFile was completely rewritten to read in chunks (0x10000) of saves at a time for the copy procedure: this virtually guarantees no allocation problems here. Hexen's compatibility WRT savegames is to attempt to read in the entire file, then immediately freeing the space if it succeeds.
Also did some renaming of Hexen's save-writing functions. Since I changed many lines for the save-reading anyway, I figure this isn't a big deal. (I could go back to using the GET_LONG, etc macros, but this is probably more straight-forward and this code's almost never been touched anyway so I don't think there's a git blame problem.)

The rest should be straight-forward.",Fixed up the problems. I noticed a couple variables going unused in heretic/p_saveg.c so I got rid of those as well.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,796,2016-11-08T02:18:32Z,2018-03-24T06:32:29Z,2018-03-24T06:32:29Z,MERGED,True,42,8,4,https://github.com/CapnClever,Emulate Doom2 map33 behavior,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/796,https://github.com/CapnClever,1,https://github.com/chocolate-doom/chocolate-doom/pull/796,"Resolves #157 in the following way:

In DOSBox, automap names are blank in Doom2 and TNT map33, map34, and map35; automap names in Plutonia map33-35 are equivalent to TNT's map01-03. The former is now emulated in Chocolate Doom, as the latter worked accurately prior to changes. (Presumably on a DOS machine the automap names would be junk data, as per the initial report, but unless there's a good way to emulate that, I considered this a reasonable solution.)
Map33's intermission screen now displays a ""FINISHED"" on the first line, and no partime value is displayed. (As with the automap issue, DOSBox chooses to set the partime value to zero so I have copied that: otherwise the ticker increases until it hits ""SUCKS"", and on a DOS machine it could range anywhere between the two.)

Here's the before and after of the map33 intermission screen, with the second image identical to how it appears in vanilla:","Resolves #157 in the following way:

In DOSBox, automap names are blank in Doom2 and TNT map33, map34, and map35; automap names in Plutonia map33-35 are equivalent to TNT's map01-03. The former is now emulated in Chocolate Doom, as the latter worked accurately prior to changes. (Presumably on a DOS machine the automap names would be junk data, as per the initial report, but unless there's a good way to emulate that, I considered this a reasonable solution.)
Map33's intermission screen now displays a ""FINISHED"" on the first line, and no partime value is displayed. (As with the automap issue, DOSBox chooses to set the partime value to zero so I have copied that: otherwise the ticker increases until it hits ""SUCKS"", and on a DOS machine it could range anywhere between the two.)

Here's the before and after of the map33 intermission screen, with the second image identical to how it appears in vanilla:",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,796,2016-11-08T02:18:32Z,2018-03-24T06:32:29Z,2018-03-24T06:32:29Z,MERGED,True,42,8,4,https://github.com/CapnClever,Emulate Doom2 map33 behavior,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/796,https://github.com/CapnClever,2,https://github.com/chocolate-doom/chocolate-doom/pull/796#issuecomment-260336923,"Resolves #157 in the following way:

In DOSBox, automap names are blank in Doom2 and TNT map33, map34, and map35; automap names in Plutonia map33-35 are equivalent to TNT's map01-03. The former is now emulated in Chocolate Doom, as the latter worked accurately prior to changes. (Presumably on a DOS machine the automap names would be junk data, as per the initial report, but unless there's a good way to emulate that, I considered this a reasonable solution.)
Map33's intermission screen now displays a ""FINISHED"" on the first line, and no partime value is displayed. (As with the automap issue, DOSBox chooses to set the partime value to zero so I have copied that: otherwise the ticker increases until it hits ""SUCKS"", and on a DOS machine it could range anywhere between the two.)

Here's the before and after of the map33 intermission screen, with the second image identical to how it appears in vanilla:","Okay, fixed up the mapnames_commercial array and instead added a condition when drawing the automap name to show up as blank for Doom II if the gameversion is v1.9 or lower.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,796,2016-11-08T02:18:32Z,2018-03-24T06:32:29Z,2018-03-24T06:32:29Z,MERGED,True,42,8,4,https://github.com/CapnClever,Emulate Doom2 map33 behavior,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/796,https://github.com/CapnClever,3,https://github.com/chocolate-doom/chocolate-doom/pull/796#issuecomment-261795617,"Resolves #157 in the following way:

In DOSBox, automap names are blank in Doom2 and TNT map33, map34, and map35; automap names in Plutonia map33-35 are equivalent to TNT's map01-03. The former is now emulated in Chocolate Doom, as the latter worked accurately prior to changes. (Presumably on a DOS machine the automap names would be junk data, as per the initial report, but unless there's a good way to emulate that, I considered this a reasonable solution.)
Map33's intermission screen now displays a ""FINISHED"" on the first line, and no partime value is displayed. (As with the automap issue, DOSBox chooses to set the partime value to zero so I have copied that: otherwise the ticker increases until it hits ""SUCKS"", and on a DOS machine it could range anywhere between the two.)

Here's the before and after of the map33 intermission screen, with the second image identical to how it appears in vanilla:",Just mentioning that the new force-push only added a comment to NEWS.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,796,2016-11-08T02:18:32Z,2018-03-24T06:32:29Z,2018-03-24T06:32:29Z,MERGED,True,42,8,4,https://github.com/CapnClever,Emulate Doom2 map33 behavior,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/796,https://github.com/chungy,4,https://github.com/chocolate-doom/chocolate-doom/pull/796#issuecomment-375850765,"Resolves #157 in the following way:

In DOSBox, automap names are blank in Doom2 and TNT map33, map34, and map35; automap names in Plutonia map33-35 are equivalent to TNT's map01-03. The former is now emulated in Chocolate Doom, as the latter worked accurately prior to changes. (Presumably on a DOS machine the automap names would be junk data, as per the initial report, but unless there's a good way to emulate that, I considered this a reasonable solution.)
Map33's intermission screen now displays a ""FINISHED"" on the first line, and no partime value is displayed. (As with the automap issue, DOSBox chooses to set the partime value to zero so I have copied that: otherwise the ticker increases until it hits ""SUCKS"", and on a DOS machine it could range anywhere between the two.)

Here's the before and after of the map33 intermission screen, with the second image identical to how it appears in vanilla:","Aside from the comma, which I'll fix in the merge comment, it looks like prior concerns were already addressed. Merging, and thanks :)",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,797,2016-11-08T02:40:06Z,2016-11-10T23:15:23Z,2016-11-11T03:17:20Z,MERGED,True,56,22,1,https://github.com/CapnClever,v_video.c: Enhance V_DrawMouseSpeedBox in non-acceleration cases,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/797,https://github.com/CapnClever,1,https://github.com/chocolate-doom/chocolate-doom/pull/797,"Resolves #791.
EDIT: Functionality has changed: see later comments for explanation. Original description below:

Since the box isn't drawn when acceleration is irrelevant to the thermometer, I went with the simplest solution and added mouse_threshold == 0 to the no-draw condition.","Resolves #791.
EDIT: Functionality has changed: see later comments for explanation. Original description below:

Since the box isn't drawn when acceleration is irrelevant to the thermometer, I went with the simplest solution and added mouse_threshold == 0 to the no-draw condition.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,797,2016-11-08T02:40:06Z,2016-11-10T23:15:23Z,2016-11-11T03:17:20Z,MERGED,True,56,22,1,https://github.com/CapnClever,v_video.c: Enhance V_DrawMouseSpeedBox in non-acceleration cases,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/797,https://github.com/fragglet,2,https://github.com/chocolate-doom/chocolate-doom/pull/797#issuecomment-259195534,"Resolves #791.
EDIT: Functionality has changed: see later comments for explanation. Original description below:

Since the box isn't drawn when acceleration is irrelevant to the thermometer, I went with the simplest solution and added mouse_threshold == 0 to the no-draw condition.","Your fix looks fine, but it seems a bit like surprising behavior that there are config settings that hide the calibration box. I wonder if we can change it so that it's still shown in all circumstances?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,797,2016-11-08T02:40:06Z,2016-11-10T23:15:23Z,2016-11-11T03:17:20Z,MERGED,True,56,22,1,https://github.com/CapnClever,v_video.c: Enhance V_DrawMouseSpeedBox in non-acceleration cases,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/797,https://github.com/CapnClever,3,https://github.com/chocolate-doom/chocolate-doom/pull/797#issuecomment-259297416,"Resolves #791.
EDIT: Functionality has changed: see later comments for explanation. Original description below:

Since the box isn't drawn when acceleration is irrelevant to the thermometer, I went with the simplest solution and added mouse_threshold == 0 to the no-draw condition.","I was actually working on such changes when I noticed the disabling condition, so I went with the simpler solution. I don't mind expanding the calibration box instead of suppressing it, though.
My original plan in the acceleration-less case was to make the mouse speed equal to the number of line-pixels. Thinking about it now, it's rather easy to hit this upper bound, so maybe whenever the value peaks (i.e., hits the top of the box) the thermometer's readout is halved to compensate: that way even a mouse with high DPI would get a reasonable understanding of relative speed.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,797,2016-11-08T02:40:06Z,2016-11-10T23:15:23Z,2016-11-11T03:17:20Z,MERGED,True,56,22,1,https://github.com/CapnClever,v_video.c: Enhance V_DrawMouseSpeedBox in non-acceleration cases,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/797,https://github.com/CapnClever,4,https://github.com/chocolate-doom/chocolate-doom/pull/797#issuecomment-259578409,"Resolves #791.
EDIT: Functionality has changed: see later comments for explanation. Original description below:

Since the box isn't drawn when acceleration is irrelevant to the thermometer, I went with the simplest solution and added mouse_threshold == 0 to the no-draw condition.","Changed functionality as per my suggestions. In addition, I included a horizontal bar (yellow in color) whenever the line resolution changes, so that a player can understand and track these changes easily.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,797,2016-11-08T02:40:06Z,2016-11-10T23:15:23Z,2016-11-11T03:17:20Z,MERGED,True,56,22,1,https://github.com/CapnClever,v_video.c: Enhance V_DrawMouseSpeedBox in non-acceleration cases,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/797,https://github.com/CapnClever,5,https://github.com/chocolate-doom/chocolate-doom/pull/797#issuecomment-259630948,"Resolves #791.
EDIT: Functionality has changed: see later comments for explanation. Original description below:

Since the box isn't drawn when acceleration is irrelevant to the thermometer, I went with the simplest solution and added mouse_threshold == 0 to the no-draw condition.",Fixed (force-pushed the change); I saw other lines in that function that could have improved alignments and adjusted them as well.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,797,2016-11-08T02:40:06Z,2016-11-10T23:15:23Z,2016-11-11T03:17:20Z,MERGED,True,56,22,1,https://github.com/CapnClever,v_video.c: Enhance V_DrawMouseSpeedBox in non-acceleration cases,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/797,https://github.com/fragglet,6,https://github.com/chocolate-doom/chocolate-doom/pull/797#issuecomment-259836379,"Resolves #791.
EDIT: Functionality has changed: see later comments for explanation. Original description below:

Since the box isn't drawn when acceleration is irrelevant to the thermometer, I went with the simplest solution and added mouse_threshold == 0 to the no-draw condition.",Thanks!,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,800,2016-11-08T07:45:07Z,2016-11-08T16:59:35Z,2016-11-09T14:06:37Z,MERGED,True,1,1,1,https://github.com/fabiangreffrath,p_saveg.c: initialize result in saveg_read8(),1,[],https://github.com/chocolate-doom/chocolate-doom/pull/800,https://github.com/fabiangreffrath,1,https://github.com/chocolate-doom/chocolate-doom/pull/800,"When Choco has reaches the end of a savegame file, further attempts to
read from this file with fread() will fail and the result variable
will not get set set. Since the result variable does not get initialized
either, saveg_read8() will return some ""random"" value.
However, as it turns out, the uninitlaized value of the result
variable isn't that random at all, but most often 0. Unfortunately, 0
has a specific meaning in the context of p_saveg.c, as it is the value
of tc_ceiling in enum specials_e. As a result, the tclass variable in
P_UnArchiveSpecials() will get interpreted as tc_ceiling and lead to
the construction of ceiling thinkers until Choco runs out of zone
memory.
What this little change does is initialize the result variable
returned by saveg_read8() to some arbitrary value that has no further
meaning in any of the enums in p_save.c. This will lead to Choco
erroring out with an ""unknown tclass"" message, which is consistent
with Vanilla. The actual tclass value may be different, but since it
is expected to be somehow ""random"" this isn't something I plan to
emulate any further at this point.
Fixes #794, #658, #85.","When Choco has reaches the end of a savegame file, further attempts to
read from this file with fread() will fail and the result variable
will not get set set. Since the result variable does not get initialized
either, saveg_read8() will return some ""random"" value.
However, as it turns out, the uninitlaized value of the result
variable isn't that random at all, but most often 0. Unfortunately, 0
has a specific meaning in the context of p_saveg.c, as it is the value
of tc_ceiling in enum specials_e. As a result, the tclass variable in
P_UnArchiveSpecials() will get interpreted as tc_ceiling and lead to
the construction of ceiling thinkers until Choco runs out of zone
memory.
What this little change does is initialize the result variable
returned by saveg_read8() to some arbitrary value that has no further
meaning in any of the enums in p_save.c. This will lead to Choco
erroring out with an ""unknown tclass"" message, which is consistent
with Vanilla. The actual tclass value may be different, but since it
is expected to be somehow ""random"" this isn't something I plan to
emulate any further at this point.
Fixes #794, #658, #85.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,800,2016-11-08T07:45:07Z,2016-11-08T16:59:35Z,2016-11-09T14:06:37Z,MERGED,True,1,1,1,https://github.com/fabiangreffrath,p_saveg.c: initialize result in saveg_read8(),1,[],https://github.com/chocolate-doom/chocolate-doom/pull/800,https://github.com/fragglet,2,https://github.com/chocolate-doom/chocolate-doom/pull/800#issuecomment-259194441,"When Choco has reaches the end of a savegame file, further attempts to
read from this file with fread() will fail and the result variable
will not get set set. Since the result variable does not get initialized
either, saveg_read8() will return some ""random"" value.
However, as it turns out, the uninitlaized value of the result
variable isn't that random at all, but most often 0. Unfortunately, 0
has a specific meaning in the context of p_saveg.c, as it is the value
of tc_ceiling in enum specials_e. As a result, the tclass variable in
P_UnArchiveSpecials() will get interpreted as tc_ceiling and lead to
the construction of ceiling thinkers until Choco runs out of zone
memory.
What this little change does is initialize the result variable
returned by saveg_read8() to some arbitrary value that has no further
meaning in any of the enums in p_save.c. This will lead to Choco
erroring out with an ""unknown tclass"" message, which is consistent
with Vanilla. The actual tclass value may be different, but since it
is expected to be somehow ""random"" this isn't something I plan to
emulate any further at this point.
Fixes #794, #658, #85.",Thanks!,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,804,2016-11-11T04:48:17Z,2016-11-11T15:10:54Z,2016-11-11T15:10:54Z,MERGED,True,10,6,2,https://github.com/CapnClever,g_game.c: Don't overwrite Heretic/Hexen demo playback arguments,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/804,https://github.com/CapnClever,1,https://github.com/chocolate-doom/chocolate-doom/pull/804,"Resolves #803.
The command line parameters -nomonsters and -respawn` didn't work when playing back demos, as is necessary when playing back vanilla demos, instead only setting values based on the special bits used by Chocolate to auto-detect them (when recorded specifically by Chocolate). This fix allows either to work.","Resolves #803.
The command line parameters -nomonsters and -respawn` didn't work when playing back demos, as is necessary when playing back vanilla demos, instead only setting values based on the special bits used by Chocolate to auto-detect them (when recorded specifically by Chocolate). This fix allows either to work.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,804,2016-11-11T04:48:17Z,2016-11-11T15:10:54Z,2016-11-11T15:10:54Z,MERGED,True,10,6,2,https://github.com/CapnClever,g_game.c: Don't overwrite Heretic/Hexen demo playback arguments,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/804,https://github.com/fragglet,2,https://github.com/chocolate-doom/chocolate-doom/pull/804#issuecomment-259977821,"Resolves #803.
The command line parameters -nomonsters and -respawn` didn't work when playing back demos, as is necessary when playing back vanilla demos, instead only setting values based on the special bits used by Chocolate to auto-detect them (when recorded specifically by Chocolate). This fix allows either to work.",Looks like a reasonable fix - thanks!,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,805,2016-11-12T01:36:31Z,2016-11-13T05:36:02Z,2016-11-13T05:36:07Z,MERGED,True,13,6,5,https://github.com/AXDOOMER,Fix number of joystick buttons so Chocolate-Setup doesn't crash,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/805,https://github.com/AXDOOMER,1,https://github.com/chocolate-doom/chocolate-doom/pull/805,This fixes #799,This fixes #799,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,805,2016-11-12T01:36:31Z,2016-11-13T05:36:02Z,2016-11-13T05:36:07Z,MERGED,True,13,6,5,https://github.com/AXDOOMER,Fix number of joystick buttons so Chocolate-Setup doesn't crash,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/805,https://github.com/fragglet,2,https://github.com/chocolate-doom/chocolate-doom/pull/805#issuecomment-260098118,This fixes #799,Please add a boundary check to CanonicalizeButtons() to stop the problem from potentially returning in the future if another joystick button is added.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,805,2016-11-12T01:36:31Z,2016-11-13T05:36:02Z,2016-11-13T05:36:07Z,MERGED,True,13,6,5,https://github.com/AXDOOMER,Fix number of joystick buttons so Chocolate-Setup doesn't crash,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/805,https://github.com/AXDOOMER,3,https://github.com/chocolate-doom/chocolate-doom/pull/805#issuecomment-260099428,This fixes #799,You want me to hide the bug if it happens again (bad practice) or show an error message (not necessary if it's done right next time a button is added)? I think it's a bad idea to do this. People should just add a new button properly next time.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,805,2016-11-12T01:36:31Z,2016-11-13T05:36:02Z,2016-11-13T05:36:07Z,MERGED,True,13,6,5,https://github.com/AXDOOMER,Fix number of joystick buttons so Chocolate-Setup doesn't crash,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/805,https://github.com/fragglet,4,https://github.com/chocolate-doom/chocolate-doom/pull/805#issuecomment-260100381,This fixes #799,"Point taken, but overrunning the buffer is not an acceptable way of handling the error. This has only been discovered now because someone happened to run it on OpenBSD that happens to have sufficiently clever stack protection to detect it.
I think that either silently ignoring the problem or calling I_Error() to immediately abort cleanly are both acceptable approaches. Saying ""people should just implement it properly"" is not a strategy.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,805,2016-11-12T01:36:31Z,2016-11-13T05:36:02Z,2016-11-13T05:36:07Z,MERGED,True,13,6,5,https://github.com/AXDOOMER,Fix number of joystick buttons so Chocolate-Setup doesn't crash,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/805,https://github.com/AXDOOMER,5,https://github.com/chocolate-doom/chocolate-doom/pull/805#issuecomment-260102619,This fixes #799,"I could use static_assert from C11 to halt compilation, but it won't compile on older compilers. That's the cleanest way to do  it. Is that Ok with you? Else I'll just add this at line 101:
    if (arrlen(all_joystick_buttons) != NUM_VIRTUAL_BUTTONS)
    {
        I_Error(""Wrong number of virtual buttons"");
    }",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,805,2016-11-12T01:36:31Z,2016-11-13T05:36:02Z,2016-11-13T05:36:07Z,MERGED,True,13,6,5,https://github.com/AXDOOMER,Fix number of joystick buttons so Chocolate-Setup doesn't crash,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/805,https://github.com/fragglet,6,https://github.com/chocolate-doom/chocolate-doom/pull/805#issuecomment-260102809,This fixes #799,Sounds good to me.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,805,2016-11-12T01:36:31Z,2016-11-13T05:36:02Z,2016-11-13T05:36:07Z,MERGED,True,13,6,5,https://github.com/AXDOOMER,Fix number of joystick buttons so Chocolate-Setup doesn't crash,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/805,https://github.com/AXDOOMER,7,https://github.com/chocolate-doom/chocolate-doom/pull/805#issuecomment-260108004,This fixes #799,"Ok, now I'm finished.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,805,2016-11-12T01:36:31Z,2016-11-13T05:36:02Z,2016-11-13T05:36:07Z,MERGED,True,13,6,5,https://github.com/AXDOOMER,Fix number of joystick buttons so Chocolate-Setup doesn't crash,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/805,https://github.com/AXDOOMER,8,https://github.com/chocolate-doom/chocolate-doom/pull/805#issuecomment-260166035,This fixes #799,"Fixed it like @haleyjd suggested earlier (thanks to him for the suggestion). If the array is too big, it will be detected at compile time and it will print a warning.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,805,2016-11-12T01:36:31Z,2016-11-13T05:36:02Z,2016-11-13T05:36:07Z,MERGED,True,13,6,5,https://github.com/AXDOOMER,Fix number of joystick buttons so Chocolate-Setup doesn't crash,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/805,https://github.com/fragglet,9,https://github.com/chocolate-doom/chocolate-doom/pull/805#issuecomment-260168184,This fixes #799,Thanks!,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,807,2016-11-14T16:43:24Z,2016-11-17T20:33:41Z,2016-11-17T20:33:48Z,CLOSED,False,30,1,1,https://github.com/fabiangreffrath,D_FindWADByName: try again with upper-case file name,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/807,https://github.com/fabiangreffrath,1,https://github.com/chocolate-doom/chocolate-doom/pull/807,"Only on OS with case-sensitive file systems, that is.","Only on OS with case-sensitive file systems, that is.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,807,2016-11-14T16:43:24Z,2016-11-17T20:33:41Z,2016-11-17T20:33:48Z,CLOSED,False,30,1,1,https://github.com/fabiangreffrath,D_FindWADByName: try again with upper-case file name,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/807,https://github.com/fragglet,2,https://github.com/chocolate-doom/chocolate-doom/pull/807#issuecomment-260394005,"Only on OS with case-sensitive file systems, that is.","From what I've seen there are more than just the two cases. It might be worth refactoring this to be more general; I'd consider covering the following:

doom2.wad (all lower case, what we have now)
DOOM2.WAD (filename all upper case, old FAT filesystem)
DOOM2.wad (filename lower case)
Doom2.wad (capitalized first letter - not sure, maybe I've seen this?)

Probably the best thing to do is write a new function that will check if a file exists - generate and test each of these variations. The function will return a matching filename if successful. That should avoid complicating the main logic.
You can probably get by without the platform-specific check - on systems like Windows or OS X it's just testing the same filename anyway, which is harmless.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,807,2016-11-14T16:43:24Z,2016-11-17T20:33:41Z,2016-11-17T20:33:48Z,CLOSED,False,30,1,1,https://github.com/fabiangreffrath,D_FindWADByName: try again with upper-case file name,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/807,https://github.com/fabiangreffrath,3,https://github.com/chocolate-doom/chocolate-doom/pull/807#issuecomment-260436251,"Only on OS with case-sensitive file systems, that is.","Ah, of course, I somehow forgot that there is more to it than plain all-lower and all-upper case. ;)
Maybe we could change M_FileExists() from boolean to char * type and let it check all the possible cases you stated above and then return the one file that exists or NULL else. Its result would need to get free()d afterwards, though.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,807,2016-11-14T16:43:24Z,2016-11-17T20:33:41Z,2016-11-17T20:33:48Z,CLOSED,False,30,1,1,https://github.com/fabiangreffrath,D_FindWADByName: try again with upper-case file name,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/807,https://github.com/fragglet,4,https://github.com/chocolate-doom/chocolate-doom/pull/807#issuecomment-260445875,"Only on OS with case-sensitive file systems, that is.",My suggestion was not to change M_FileExists() (which works perfectly fine as-is) but rather to build something on top of it to handle case insensitivity. It seems like that ought to be possible.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,807,2016-11-14T16:43:24Z,2016-11-17T20:33:41Z,2016-11-17T20:33:48Z,CLOSED,False,30,1,1,https://github.com/fabiangreffrath,D_FindWADByName: try again with upper-case file name,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/807,https://github.com/chungy,5,https://github.com/chocolate-doom/chocolate-doom/pull/807#issuecomment-260505922,"Only on OS with case-sensitive file systems, that is.","You can probably get by without the platform-specific check - on systems like Windows or OS X it's just testing the same filename anyway, which is harmless.

I agree, and it's in for a world of hurt as both Windows and OS X support case-sensitive names anyway, depending on file system and OS configuration. Windows will default to insensitive lookups if the application doesn't specify FILE_POSIX_SEMANTICS in the fopen call... but if somebody for some reason builds it for Cygwin with sensitivity enabled, #ifndef _WIN32 will still compile out the code... And then, let's mention Linux can be insensitive too depending on file system ;)
More relevant to the issue, I don't know how common variants that aren't all-lowercase or all-uppercase are. Both variants are easy to encounter, but other ones looks a bit... intentional from the end user?
The Doom Collector's Edition for example has all of doom.wad, DOOM2.WAD, tnt.wad, and plutonia.wad. All covered in Fabian's patch. The LHA archives from the Quake Shareware disc and Master Levels disc have all lowercase names -- but grant that installing them directly in DOSBox will result in an all-uppercase name for the host system. I have not checked the floppy disk versions of Doom, but I suspect the LHA archives are likewise all-lowercase.
Doom2.wad is how the file name would be apparently displayed on Windows 95, if it lacks any long filename records to alter the case, but that's only a display, and copies the file without generating a LFN either (otherwise, it might only be an issue if somebody used Windows 95 to copy to a NFS or SMB share...).
I really don't know any reasons that DOOM2.wad would exist except by an intentional rename.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,807,2016-11-14T16:43:24Z,2016-11-17T20:33:41Z,2016-11-17T20:33:48Z,CLOSED,False,30,1,1,https://github.com/fabiangreffrath,D_FindWADByName: try again with upper-case file name,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/807,https://github.com/fabiangreffrath,6,https://github.com/chocolate-doom/chocolate-doom/pull/807#issuecomment-260565265,"Only on OS with case-sensitive file systems, that is.","My suggestion was not to change  M_FileExists()  (which works perfectly fine as-is) but rather to build something on top of it to handle case insensitivity. It seems like that ought to be possible.

Sure that should be possible. However, M_FileExists() accepts full path names in its argument. Should we separate path and file names and switch cases only for the latter, or should we switch cases for the complete path names?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,807,2016-11-14T16:43:24Z,2016-11-17T20:33:41Z,2016-11-17T20:33:48Z,CLOSED,False,30,1,1,https://github.com/fabiangreffrath,D_FindWADByName: try again with upper-case file name,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/807,https://github.com/fragglet,7,https://github.com/chocolate-doom/chocolate-doom/pull/807#issuecomment-260636190,"Only on OS with case-sensitive file systems, that is.","Only the filename, otherwise you have a combinatorial explosion of possible
paths to test.
It's helpful to think of the use cases here - I'd guess one of the main
ones is ""I copied my IWADs off a CD or old (FAT format) hard drive""
On 15 Nov 2016 2:15 a.m., ""Fabian Greffrath"" notifications@github.com
wrote:

My suggestion was not to change M_FileExists() (which works perfectly fine
as-is) but rather to build something on top of it to handle case
insensitivity. It seems like that ought to be possible.
Sure that should be possible. However, M_FileExists() accepts full path
names in its argument. Should we separate path and file names and switch
cases only for the latter, or should we switch cases for the complete path
names?
—
You are receiving this because you commented.
Reply to this email directly, view it on GitHub
#807 (comment),
or mute the thread
https://github.com/notifications/unsubscribe-auth/AAF6NZopQJIX7LvtG6mlPGuC3JVATZipks5q-Vv4gaJpZM4KxiLn
.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,807,2016-11-14T16:43:24Z,2016-11-17T20:33:41Z,2016-11-17T20:33:48Z,CLOSED,False,30,1,1,https://github.com/fabiangreffrath,D_FindWADByName: try again with upper-case file name,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/807,https://github.com/fabiangreffrath,8,https://github.com/chocolate-doom/chocolate-doom/pull/807#issuecomment-261361411,"Only on OS with case-sensitive file systems, that is.",This approach doesn't lead anywhere. Discussion continues in #809 .,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,812,2016-11-20T16:16:20Z,2016-11-21T02:50:12Z,2016-11-21T02:50:12Z,MERGED,True,10,6,2,https://github.com/CapnClever,g_game.c: Don't overwrite Heretic/Hexen timedemo arguments,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/812,https://github.com/CapnClever,1,https://github.com/chocolate-doom/chocolate-doom/pull/812,"Additional resolution to #803: it's the same fix as before, this time for G_TimeDemo(). (Thanks to Doomworlder PVS for noticing the discrepancy, sorry for not getting it on the first pass.)","Additional resolution to #803: it's the same fix as before, this time for G_TimeDemo(). (Thanks to Doomworlder PVS for noticing the discrepancy, sorry for not getting it on the first pass.)",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,814,2016-11-20T18:26:47Z,2016-11-21T02:53:49Z,2016-11-21T02:53:49Z,MERGED,True,55,43,2,https://github.com/CapnClever,hexen/g_game.c: Include miscellaneous mouse functionality,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/814,https://github.com/CapnClever,1,https://github.com/chocolate-doom/chocolate-doom/pull/814,"Fixes #813 by resolving everything the issue mentions:

Move backward, strafe left, and strafe right mouse buttons all work now
'Double click acts as ""use""' option functions properly","Fixes #813 by resolving everything the issue mentions:

Move backward, strafe left, and strafe right mouse buttons all work now
'Double click acts as ""use""' option functions properly",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,814,2016-11-20T18:26:47Z,2016-11-21T02:53:49Z,2016-11-21T02:53:49Z,MERGED,True,55,43,2,https://github.com/CapnClever,hexen/g_game.c: Include miscellaneous mouse functionality,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/814,https://github.com/fragglet,2,https://github.com/chocolate-doom/chocolate-doom/pull/814#issuecomment-261830647,"Fixes #813 by resolving everything the issue mentions:

Move backward, strafe left, and strafe right mouse buttons all work now
'Double click acts as ""use""' option functions properly",Consistent with other games. Thanks.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,815,2016-11-21T10:25:33Z,2016-11-21T16:39:31Z,2016-11-21T16:39:34Z,MERGED,True,178,16,6,https://github.com/nukeykt,Minor improvements for Doom 1.2 emulation,5,[],https://github.com/chocolate-doom/chocolate-doom/pull/815,https://github.com/nukeykt,1,https://github.com/chocolate-doom/chocolate-doom/pull/815,"Make doom.wad v1.2 working as standalone IWAD
Moire error emulation","Make doom.wad v1.2 working as standalone IWAD
Moire error emulation",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,815,2016-11-21T10:25:33Z,2016-11-21T16:39:31Z,2016-11-21T16:39:34Z,MERGED,True,178,16,6,https://github.com/nukeykt,Minor improvements for Doom 1.2 emulation,5,[],https://github.com/chocolate-doom/chocolate-doom/pull/815,https://github.com/nukeykt,2,https://github.com/chocolate-doom/chocolate-doom/pull/815#issuecomment-261985058,"Make doom.wad v1.2 working as standalone IWAD
Moire error emulation",Fixed. Thanks!,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,815,2016-11-21T10:25:33Z,2016-11-21T16:39:31Z,2016-11-21T16:39:34Z,MERGED,True,178,16,6,https://github.com/nukeykt,Minor improvements for Doom 1.2 emulation,5,[],https://github.com/chocolate-doom/chocolate-doom/pull/815,https://github.com/nukeykt,3,https://github.com/chocolate-doom/chocolate-doom/pull/815#issuecomment-261990369,"Make doom.wad v1.2 working as standalone IWAD
Moire error emulation",Done,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,815,2016-11-21T10:25:33Z,2016-11-21T16:39:31Z,2016-11-21T16:39:34Z,MERGED,True,178,16,6,https://github.com/nukeykt,Minor improvements for Doom 1.2 emulation,5,[],https://github.com/chocolate-doom/chocolate-doom/pull/815,https://github.com/fragglet,4,https://github.com/chocolate-doom/chocolate-doom/pull/815#issuecomment-261992324,"Make doom.wad v1.2 working as standalone IWAD
Moire error emulation",Thanks,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,816,2016-11-21T17:13:48Z,2016-11-22T22:53:48Z,2017-02-01T07:51:24Z,MERGED,True,106,10,3,https://github.com/fabiangreffrath,Filecaseexist,10,[],https://github.com/chocolate-doom/chocolate-doom/pull/816,https://github.com/fabiangreffrath,1,https://github.com/chocolate-doom/chocolate-doom/pull/816,,,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,816,2016-11-21T17:13:48Z,2016-11-22T22:53:48Z,2017-02-01T07:51:24Z,MERGED,True,106,10,3,https://github.com/fabiangreffrath,Filecaseexist,10,[],https://github.com/chocolate-doom/chocolate-doom/pull/816,https://github.com/fragglet,2,https://github.com/chocolate-doom/chocolate-doom/pull/816#issuecomment-262390384,,Thanks!,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,818,2016-11-22T12:05:41Z,2016-11-22T13:31:30Z,2016-11-22T15:25:51Z,MERGED,True,4,3,1,https://github.com/CapnClever,"hexen/sv_save.c: revert 9e71dbb, fix fwrite check",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/818,https://github.com/CapnClever,1,https://github.com/chocolate-doom/chocolate-doom/pull/818,"I'm not sure if it's appropriate to include SHA-1 hashes in the commit info like that, let me know if I should change it.","I'm not sure if it's appropriate to include SHA-1 hashes in the commit info like that, let me know if I should change it.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,818,2016-11-22T12:05:41Z,2016-11-22T13:31:30Z,2016-11-22T15:25:51Z,MERGED,True,4,3,1,https://github.com/CapnClever,"hexen/sv_save.c: revert 9e71dbb, fix fwrite check",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/818,https://github.com/fabiangreffrath,2,https://github.com/chocolate-doom/chocolate-doom/pull/818#issuecomment-262241146,"I'm not sure if it's appropriate to include SHA-1 hashes in the commit info like that, let me know if I should change it.","Phew, glad we sorted this out. ;)",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,818,2016-11-22T12:05:41Z,2016-11-22T13:31:30Z,2016-11-22T15:25:51Z,MERGED,True,4,3,1,https://github.com/CapnClever,"hexen/sv_save.c: revert 9e71dbb, fix fwrite check",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/818,https://github.com/fragglet,3,https://github.com/chocolate-doom/chocolate-doom/pull/818#issuecomment-262270586,"I'm not sure if it's appropriate to include SHA-1 hashes in the commit info like that, let me know if I should change it.","I'm not sure if it's appropriate to include SHA-1 hashes in the commit info

That's fine and recommended - it's the usual way of referring to commits, and GitHub flavored markdown will also turn them into convenient links.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,819,2016-11-23T16:41:56Z,,2017-02-28T17:24:05Z,OPEN,False,1188,173,28,https://github.com/nukeykt,Doom v1.6 emulation,2,['Doom'],https://github.com/chocolate-doom/chocolate-doom/pull/819,https://github.com/nukeykt,1,https://github.com/chocolate-doom/chocolate-doom/pull/819,"Doom 1.6 emulation.
I was working on Doom 1.6 emulation this summer. It is nearly completed(including savegame compatiblity). The only issue i know is demo compatiblity. Some demos go out of sync. It is likely due to Pain Elementals.","Doom 1.6 emulation.
I was working on Doom 1.6 emulation this summer. It is nearly completed(including savegame compatiblity). The only issue i know is demo compatiblity. Some demos go out of sync. It is likely due to Pain Elementals.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,819,2016-11-23T16:41:56Z,,2017-02-28T17:24:05Z,OPEN,False,1188,173,28,https://github.com/nukeykt,Doom v1.6 emulation,2,['Doom'],https://github.com/chocolate-doom/chocolate-doom/pull/819,https://github.com/fragglet,2,https://github.com/chocolate-doom/chocolate-doom/pull/819#issuecomment-262599200,"Doom 1.6 emulation.
I was working on Doom 1.6 emulation this summer. It is nearly completed(including savegame compatiblity). The only issue i know is demo compatiblity. Some demos go out of sync. It is likely due to Pain Elementals.","This is certainly comprehensive. I'll need some time to properly review it.
OTOH: It isn't necessary to disable certain command line arguments when emulating old versions. For example you can get rid of the conditional code around -timer and -cdrom.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,819,2016-11-23T16:41:56Z,,2017-02-28T17:24:05Z,OPEN,False,1188,173,28,https://github.com/nukeykt,Doom v1.6 emulation,2,['Doom'],https://github.com/chocolate-doom/chocolate-doom/pull/819,https://github.com/fabiangreffrath,3,https://github.com/chocolate-doom/chocolate-doom/pull/819#issuecomment-262708213,"Doom 1.6 emulation.
I was working on Doom 1.6 emulation this summer. It is nearly completed(including savegame compatiblity). The only issue i know is demo compatiblity. Some demos go out of sync. It is likely due to Pain Elementals.","o_O Wow, what a massive effort.
Though, I really dislike the fact that it requires re-definition of most of info.c in d_compat.c. Is it possible to somehow circumvent this?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,819,2016-11-23T16:41:56Z,,2017-02-28T17:24:05Z,OPEN,False,1188,173,28,https://github.com/nukeykt,Doom v1.6 emulation,2,['Doom'],https://github.com/chocolate-doom/chocolate-doom/pull/819,https://github.com/chungy,4,https://github.com/chocolate-doom/chocolate-doom/pull/819#issuecomment-263036519,"Doom 1.6 emulation.
I was working on Doom 1.6 emulation this summer. It is nearly completed(including savegame compatiblity). The only issue i know is demo compatiblity. Some demos go out of sync. It is likely due to Pain Elementals.",Does this emulate the beta shareware or the leaked/hacked 1.6 patch?,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,819,2016-11-23T16:41:56Z,,2017-02-28T17:24:05Z,OPEN,False,1188,173,28,https://github.com/nukeykt,Doom v1.6 emulation,2,['Doom'],https://github.com/chocolate-doom/chocolate-doom/pull/819,https://github.com/nukeykt,5,https://github.com/chocolate-doom/chocolate-doom/pull/819#issuecomment-263037519,"Doom 1.6 emulation.
I was working on Doom 1.6 emulation this summer. It is nearly completed(including savegame compatiblity). The only issue i know is demo compatiblity. Some demos go out of sync. It is likely due to Pain Elementals.",This emulates beta shareware. But are their EXEs different?,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,819,2016-11-23T16:41:56Z,,2017-02-28T17:24:05Z,OPEN,False,1188,173,28,https://github.com/nukeykt,Doom v1.6 emulation,2,['Doom'],https://github.com/chocolate-doom/chocolate-doom/pull/819,https://github.com/chungy,6,https://github.com/chocolate-doom/chocolate-doom/pull/819#issuecomment-263046841,"Doom 1.6 emulation.
I was working on Doom 1.6 emulation this summer. It is nearly completed(including savegame compatiblity). The only issue i know is demo compatiblity. Some demos go out of sync. It is likely due to Pain Elementals.","I don't know, I haven't managed to find a copy of the other release.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,819,2016-11-23T16:41:56Z,,2017-02-28T17:24:05Z,OPEN,False,1188,173,28,https://github.com/nukeykt,Doom v1.6 emulation,2,['Doom'],https://github.com/chocolate-doom/chocolate-doom/pull/819,https://github.com/fragglet,7,https://github.com/chocolate-doom/chocolate-doom/pull/819#issuecomment-277294905,"Doom 1.6 emulation.
I was working on Doom 1.6 emulation this summer. It is nearly completed(including savegame compatiblity). The only issue i know is demo compatiblity. Some demos go out of sync. It is likely due to Pain Elementals.","So I've been blocking progress by not reviewing this and I apologize.
I have some reservations about the approach taken. First, this is a really big merge and it would make a lot more sense if this was broken up into a series of smaller changes, ideally on a branch that we can test things on. This is how we've developed other such large features.
In terms of the changes here, the main thing that I don't think is a good approach is the d_compat.c file, because:

It has almost no comments.
It does a bunch of state table changes in code rather than in tables.
The mapping functions in it are called throughout the codebase in places including the renderer.

From what I understand, this file is solving two problems:

Some of the table entries from info.c did not appear in older versions of Doom.
Some of the table entries in v1.6 were different and changed in development between the beta version and the v1.666 release.

In addressing (1), maybe a simpler approach is to just add a field to the types used in info.c documenting when each entry was added? For example, for D_Compat_MobjExists(m), you essentially are just trying to answer the question, ""is gameversion >= v, where v is the version of Doom in which m was added?"". These ""Exists"" methods then become so simple that you probably don't even need them as a function.
There are a few places where you need to map from one table index to another (D_Compat_SpriteToNew, D_Compat_SpriteToOld, etc.). I think these are limited to: savegames; dehacked; error messages. In each of these cases performance isn't important, so it should be possible to calculate the mapping in real time using a range scan over the table without needing to maintain a mapping table.
Regarding (2) above, I actually wonder whether this should be out of scope for the project. Or at the very least: is this best achieved in code? Could you get the same result by using an auxiliary dehacked patch? I suspect that you probably can, and it's probably a lot cleaner. There's already precedent for this with chexdeh.zip (see idgames) which stores the changes needed to emulate Chex Quest in Chocolate Doom. There's the additional advantage that you also make this work available to users of other source ports who may be interested to experience some of the differences from the v1.6 beta.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,819,2016-11-23T16:41:56Z,,2017-02-28T17:24:05Z,OPEN,False,1188,173,28,https://github.com/nukeykt,Doom v1.6 emulation,2,['Doom'],https://github.com/chocolate-doom/chocolate-doom/pull/819,https://github.com/nukeykt,8,https://github.com/chocolate-doom/chocolate-doom/pull/819#issuecomment-277529358,"Doom 1.6 emulation.
I was working on Doom 1.6 emulation this summer. It is nearly completed(including savegame compatiblity). The only issue i know is demo compatiblity. Some demos go out of sync. It is likely due to Pain Elementals.","Ok, Thanks for reply.
Unfortunately there are differences in sprite/state/mobj tables item sequence between 1.6 and 1.666 (e.g. Keen's states are next to torch in 1.6, but before in 1.666). So there will be some troubles with your suggested approach.
Dehacked patch seems to be interesting. I'll try to make patch soon. But on the another side there bunch of differences in action functions, that cannot be done via dehacked, which make it a bit useless in other ports.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,820,2016-11-25T06:52:41Z,2016-12-14T17:33:15Z,2016-12-14T17:33:21Z,MERGED,True,165,213,1,https://github.com/nukeykt,OPL driver bug fixes,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/820,https://github.com/nukeykt,1,https://github.com/chocolate-doom/chocolate-doom/pull/820,"This fixes some OPL driver issues i found recently.
Changelog:
-Do not check GENMIDI header as DMX does
-Make MIDI channels global.
-Sort voice list after pitch bend event as DMX does.
-Fix AM mode channel volume calculation. Fixes weird sounding snare drum in Raptor's genmidi.
-Emulate Doom 2 1.666 OPL crash","This fixes some OPL driver issues i found recently.
Changelog:
-Do not check GENMIDI header as DMX does
-Make MIDI channels global.
-Sort voice list after pitch bend event as DMX does.
-Fix AM mode channel volume calculation. Fixes weird sounding snare drum in Raptor's genmidi.
-Emulate Doom 2 1.666 OPL crash",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,820,2016-11-25T06:52:41Z,2016-12-14T17:33:15Z,2016-12-14T17:33:21Z,MERGED,True,165,213,1,https://github.com/nukeykt,OPL driver bug fixes,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/820,https://github.com/fragglet,2,https://github.com/chocolate-doom/chocolate-doom/pull/820#issuecomment-267099574,"This fixes some OPL driver issues i found recently.
Changelog:
-Do not check GENMIDI header as DMX does
-Make MIDI channels global.
-Sort voice list after pitch bend event as DMX does.
-Fix AM mode channel volume calculation. Fixes weird sounding snare drum in Raptor's genmidi.
-Emulate Doom 2 1.666 OPL crash",Thanks.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,823,2016-12-01T00:33:32Z,2017-01-02T14:02:33Z,2017-01-02T14:02:33Z,MERGED,True,66,23,4,https://github.com/CapnClever,"d_main.c: Add ""-savedir"" command line parameter",5,[],https://github.com/chocolate-doom/chocolate-doom/pull/823,https://github.com/CapnClever,1,https://github.com/chocolate-doom/chocolate-doom/pull/823,"Resolves #792. The change required was surprisingly minimal, as the handling of save directories through non-Windows cases contained all necessary pieces. The only odd bits are as follows:

Hexen required a static variable is used to store the value of ""savedir"" from hexen.cfg separately, since we don't want the -savedir parameter to overwrite anything in the config files.
Doom's fits squarely on top of the -cdrom check, which looks weird but is logically peachy.","Resolves #792. The change required was surprisingly minimal, as the handling of save directories through non-Windows cases contained all necessary pieces. The only odd bits are as follows:

Hexen required a static variable is used to store the value of ""savedir"" from hexen.cfg separately, since we don't want the -savedir parameter to overwrite anything in the config files.
Doom's fits squarely on top of the -cdrom check, which looks weird but is logically peachy.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,823,2016-12-01T00:33:32Z,2017-01-02T14:02:33Z,2017-01-02T14:02:33Z,MERGED,True,66,23,4,https://github.com/CapnClever,"d_main.c: Add ""-savedir"" command line parameter",5,[],https://github.com/chocolate-doom/chocolate-doom/pull/823,https://github.com/CapnClever,2,https://github.com/chocolate-doom/chocolate-doom/pull/823#issuecomment-264089032,"Resolves #792. The change required was surprisingly minimal, as the handling of save directories through non-Windows cases contained all necessary pieces. The only odd bits are as follows:

Hexen required a static variable is used to store the value of ""savedir"" from hexen.cfg separately, since we don't want the -savedir parameter to overwrite anything in the config files.
Doom's fits squarely on top of the -cdrom check, which looks weird but is logically peachy.","Should be fixed up now. The logic for Hexen took me a while but here's how it works:

First check for -savedir: if it's present, use the specified directory
Next check for -cdrom: if it's present,  use ""C:/hexndata""
Next check for a config directory: if one is found, set the save directory based on the input IWAD
Next check the savedir value in hexen.cfg: if there is one, use that
If none of these worked, use relative path ""hexndata""
Finally, if neither -savedir nor -cdrom was input to the command line, feed the save directory back into hexen.cfg for later use

This preserves existing behavior (notably the non-Windows default case and Windows users directly modifying hexen.cfg) while properly handling the priority parameters.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,828,2016-12-06T15:56:56Z,2016-12-06T17:43:14Z,2016-12-06T23:00:41Z,MERGED,True,10,10,1,https://github.com/nukeykt,heretic: fix random value order in function arguments to match disassembly,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/828,https://github.com/nukeykt,1,https://github.com/chocolate-doom/chocolate-doom/pull/828,Fixes #827,Fixes #827,True,{'THUMBS_UP': ['https://github.com/haleyjd']}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,828,2016-12-06T15:56:56Z,2016-12-06T17:43:14Z,2016-12-06T23:00:41Z,MERGED,True,10,10,1,https://github.com/nukeykt,heretic: fix random value order in function arguments to match disassembly,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/828,https://github.com/fragglet,2,https://github.com/chocolate-doom/chocolate-doom/pull/828#issuecomment-265218586,Fixes #827,Thanks.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,828,2016-12-06T15:56:56Z,2016-12-06T17:43:14Z,2016-12-06T23:00:41Z,MERGED,True,10,10,1,https://github.com/nukeykt,heretic: fix random value order in function arguments to match disassembly,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/828,https://github.com/chungy,3,https://github.com/chocolate-doom/chocolate-doom/pull/828#issuecomment-265301154,Fixes #827,@nukeykt can you verify Hexen's behavior as well?,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,829,2016-12-08T19:05:18Z,2016-12-09T15:21:51Z,2016-12-09T15:21:51Z,MERGED,True,47,37,5,https://github.com/nukeykt,hexen: fix random value order in function arguments to match disassembly,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/829,https://github.com/nukeykt,1,https://github.com/chocolate-doom/chocolate-doom/pull/829,,,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,829,2016-12-08T19:05:18Z,2016-12-09T15:21:51Z,2016-12-09T15:21:51Z,MERGED,True,47,37,5,https://github.com/nukeykt,hexen: fix random value order in function arguments to match disassembly,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/829,https://github.com/nukeykt,2,https://github.com/chocolate-doom/chocolate-doom/pull/829#issuecomment-265956060,,Fixed,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,838,2017-01-13T21:48:02Z,2017-01-14T00:08:26Z,2018-01-12T07:54:26Z,MERGED,True,68,62,11,https://github.com/fabiangreffrath,introduce a pixel_t type,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/838,https://github.com/fabiangreffrath,1,https://github.com/chocolate-doom/chocolate-doom/pull/838,"The pixel_t type is supposed to be the same type as the destination
frame buffer. Why?
Well, once the sdl2-branch is merged, I plan to switch Crispy Doom to
truecolor rendering. This means that each pixel in the framebuffer
will have to be represented by a int32_t type instead of a single
byte. For this, a lot of functions have to get modified and it would
makes things considerably easier to just flip a single typedef. Apart
from the cosmetic change this will not make any difference for Choco,
but it will make maintaining my fork easier and allow for a smaller
interdiff.
Ths patch is by far not complete, but should do alright for Doom
already. I file this pull request in order to check the mood and ask if a
change like this would be accepted at all? It is absolutely no problem
if you decide against it!
Thanks for considering,
Fabian","The pixel_t type is supposed to be the same type as the destination
frame buffer. Why?
Well, once the sdl2-branch is merged, I plan to switch Crispy Doom to
truecolor rendering. This means that each pixel in the framebuffer
will have to be represented by a int32_t type instead of a single
byte. For this, a lot of functions have to get modified and it would
makes things considerably easier to just flip a single typedef. Apart
from the cosmetic change this will not make any difference for Choco,
but it will make maintaining my fork easier and allow for a smaller
interdiff.
Ths patch is by far not complete, but should do alright for Doom
already. I file this pull request in order to check the mood and ask if a
change like this would be accepted at all? It is absolutely no problem
if you decide against it!
Thanks for considering,
Fabian",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,838,2017-01-13T21:48:02Z,2017-01-14T00:08:26Z,2018-01-12T07:54:26Z,MERGED,True,68,62,11,https://github.com/fabiangreffrath,introduce a pixel_t type,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/838,https://github.com/fragglet,2,https://github.com/chocolate-doom/chocolate-doom/pull/838#issuecomment-272581364,"The pixel_t type is supposed to be the same type as the destination
frame buffer. Why?
Well, once the sdl2-branch is merged, I plan to switch Crispy Doom to
truecolor rendering. This means that each pixel in the framebuffer
will have to be represented by a int32_t type instead of a single
byte. For this, a lot of functions have to get modified and it would
makes things considerably easier to just flip a single typedef. Apart
from the cosmetic change this will not make any difference for Choco,
but it will make maintaining my fork easier and allow for a smaller
interdiff.
Ths patch is by far not complete, but should do alright for Doom
already. I file this pull request in order to check the mood and ask if a
change like this would be accepted at all? It is absolutely no problem
if you decide against it!
Thanks for considering,
Fabian",Looks good. Thanks!,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,849,2017-01-27T18:29:50Z,2017-01-27T21:35:51Z,2017-01-27T21:35:51Z,CLOSED,False,17,61,1,https://github.com/jmtd,Rework use of zenity for I_Error,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/849,https://github.com/jmtd,1,https://github.com/chocolate-doom/chocolate-doom/pull/849,"Use fork/execl rather than system() for invoking zenity. This means
we don't use a shell and don't need to escape the argument for shell
commands. We can therefore delete EscapeShellString. We also remove
the need for any memory allocations or string copying.","Use fork/execl rather than system() for invoking zenity. This means
we don't use a shell and don't need to escape the argument for shell
commands. We can therefore delete EscapeShellString. We also remove
the need for any memory allocations or string copying.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,849,2017-01-27T18:29:50Z,2017-01-27T21:35:51Z,2017-01-27T21:35:51Z,CLOSED,False,17,61,1,https://github.com/jmtd,Rework use of zenity for I_Error,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/849,https://github.com/jmtd,2,https://github.com/chocolate-doom/chocolate-doom/pull/849#issuecomment-275767445,"Use fork/execl rather than system() for invoking zenity. This means
we don't use a shell and don't need to escape the argument for shell
commands. We can therefore delete EscapeShellString. We also remove
the need for any memory allocations or string copying.","I just pushed another patch that uses execlp so $PATH is used, but I think we can get rid of ZenityAvailable altogether and just handle the ENOENT case in ZenityErrorBox (meaning no need for wait, sys/types, sys/wait` etc. that I introduced here) so consider this WIP (and I'll address the column issue)
means it would work for /usr/local/bin/zenity etc",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,849,2017-01-27T18:29:50Z,2017-01-27T21:35:51Z,2017-01-27T21:35:51Z,CLOSED,False,17,61,1,https://github.com/jmtd,Rework use of zenity for I_Error,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/849,https://github.com/jmtd,3,https://github.com/chocolate-doom/chocolate-doom/pull/849#issuecomment-275767534,"Use fork/execl rather than system() for invoking zenity. This means
we don't use a shell and don't need to escape the argument for shell
commands. We can therefore delete EscapeShellString. We also remove
the need for any memory allocations or string copying.","I think execlp is widely supported, it's part of POSIX although some of the error return semantics are not strictly defined.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,849,2017-01-27T18:29:50Z,2017-01-27T21:35:51Z,2017-01-27T21:35:51Z,CLOSED,False,17,61,1,https://github.com/jmtd,Rework use of zenity for I_Error,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/849,https://github.com/jmtd,4,https://github.com/chocolate-doom/chocolate-doom/pull/849#issuecomment-275781030,"Use fork/execl rather than system() for invoking zenity. This means
we don't use a shell and don't need to escape the argument for shell
commands. We can therefore delete EscapeShellString. We also remove
the need for any memory allocations or string copying.",On reflection this hasn't got a future since we will move to sdl2 dialogs so I'll just consider this a fun exercise on the train ride home and close it.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,855,2017-02-04T23:17:23Z,2017-02-19T18:35:58Z,2018-01-12T07:54:24Z,MERGED,True,23,0,4,https://github.com/fabiangreffrath,Add option to force integer scales for resolution-independent rendering,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/855,https://github.com/fabiangreffrath,1,https://github.com/chocolate-doom/chocolate-doom/pull/855,Fixes #853,Fixes #853,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,855,2017-02-04T23:17:23Z,2017-02-19T18:35:58Z,2018-01-12T07:54:24Z,MERGED,True,23,0,4,https://github.com/fabiangreffrath,Add option to force integer scales for resolution-independent rendering,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/855,https://github.com/AXDOOMER,2,https://github.com/chocolate-doom/chocolate-doom/pull/855#issuecomment-277485534,Fixes #853,Cool! I'm going to test this.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,855,2017-02-04T23:17:23Z,2017-02-19T18:35:58Z,2018-01-12T07:54:24Z,MERGED,True,23,0,4,https://github.com/fabiangreffrath,Add option to force integer scales for resolution-independent rendering,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/855,https://github.com/AXDOOMER,3,https://github.com/chocolate-doom/chocolate-doom/pull/855#issuecomment-277490257,Fixes #853,"Thanks, it works great, but the user should be able to specify if he only wants to have integer scaling on one axis (example: 'y', like Chocolate-Doom's software scaler did on most resolutions). SDL_RenderSetIntegerScale does integer scaling, but on both axis at the same time.
So, there should be 4 scaling modes.
1- Default: Like the OpenGL scaler does right now
2- Integer scale on X (like Chocolate-Doom's software scaler did on some resolutions, such as 800x600)
3- Integer scale on Y (like Chocolate-Doom's software scaler did on most resolutions)
4- Integer scaling on both axis (like SDL_RenderSetIntegerScale does)",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,855,2017-02-04T23:17:23Z,2017-02-19T18:35:58Z,2018-01-12T07:54:24Z,MERGED,True,23,0,4,https://github.com/fabiangreffrath,Add option to force integer scales for resolution-independent rendering,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/855,https://github.com/fabiangreffrath,4,https://github.com/chocolate-doom/chocolate-doom/pull/855#issuecomment-277508755,Fixes #853,"So, there should be 4 scaling modes.

Are you serious? I mean, I was hesitating to even expose this switch in the UI and now you are asking for four different values which could only be told apart with a magnifying glass.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,855,2017-02-04T23:17:23Z,2017-02-19T18:35:58Z,2018-01-12T07:54:24Z,MERGED,True,23,0,4,https://github.com/fabiangreffrath,Add option to force integer scales for resolution-independent rendering,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/855,https://github.com/AXDOOMER,5,https://github.com/chocolate-doom/chocolate-doom/pull/855#issuecomment-277532432,Fixes #853,"It does the job for me, but Fraggle changed the title of the bug report to ""ability to force integer scaling in at least one axis"" and I thought this was even better because the user could choose to have integer scaling on only one axis. That's how I understood it.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,855,2017-02-04T23:17:23Z,2017-02-19T18:35:58Z,2018-01-12T07:54:24Z,MERGED,True,23,0,4,https://github.com/fabiangreffrath,Add option to force integer scales for resolution-independent rendering,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/855,https://github.com/fragglet,6,https://github.com/chocolate-doom/chocolate-doom/pull/855#issuecomment-277554972,Fixes #853,"I'm not convinced we need four modes either.
Regarding (4) - we can only do integer scaling in both axes if either aspect_ratio_correct=false or if the window is an exact multiple of 1600x1200 in size. But aspect_ratio_ratio_correct is turned off then either (2) or (3) will have the same effect anyway. So I don't think it's worth it.
I don't think the difference between (2) and (3) is significant enough that there needs to be an option to distinguish between them. We didn't even distinguish between them with the software scaler.
As long as at least one dimension is an integer multiple then the result should be good enough.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,855,2017-02-04T23:17:23Z,2017-02-19T18:35:58Z,2018-01-12T07:54:24Z,MERGED,True,23,0,4,https://github.com/fabiangreffrath,Add option to force integer scales for resolution-independent rendering,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/855,https://github.com/AXDOOMER,7,https://github.com/chocolate-doom/chocolate-doom/pull/855#issuecomment-277565978,Fixes #853,"As long as at least one dimension is an integer multiple then the result should be good enough.

That's a least the minimum to avoid pixels that looks like they have soft edges and also to have the minimal black borders around the screen, but from what I saw of SDL_RenderSetIntegerScale(), it does integer scaling on both axis.
The way Fraggle describes it is the way to go. It would be just like the software scaler did.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,855,2017-02-04T23:17:23Z,2017-02-19T18:35:58Z,2018-01-12T07:54:24Z,MERGED,True,23,0,4,https://github.com/fabiangreffrath,Add option to force integer scales for resolution-independent rendering,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/855,https://github.com/fabiangreffrath,8,https://github.com/chocolate-doom/chocolate-doom/pull/855#issuecomment-277605956,Fixes #853,So we can merge this branch?,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,855,2017-02-04T23:17:23Z,2017-02-19T18:35:58Z,2018-01-12T07:54:24Z,MERGED,True,23,0,4,https://github.com/fabiangreffrath,Add option to force integer scales for resolution-independent rendering,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/855,https://github.com/twipley,9,https://github.com/chocolate-doom/chocolate-doom/pull/855#issuecomment-280913673,Fixes #853,"I know this thread has been 'solved', but this might fit into this discussion:
I have this old note somewhere, that increasing the 'gl_max_scale' value to 5 or 6 contributes to attenuate the blur a little bit. Should someone with 'sharp eyes' fiddle with this setting, or is the new 'force integer scaling' option sufficient for their purposes?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,855,2017-02-04T23:17:23Z,2017-02-19T18:35:58Z,2018-01-12T07:54:24Z,MERGED,True,23,0,4,https://github.com/fabiangreffrath,Add option to force integer scales for resolution-independent rendering,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/855,https://github.com/fabiangreffrath,10,https://github.com/chocolate-doom/chocolate-doom/pull/855#issuecomment-280928166,Fixes #853,"It's not yet ""solved"", because this branch has not yet been merged into the main sdl2-branch.
We have already increased the maximum size of the intermediate texture and the integer scaling approach only helps if you can live with black borders around your screen (if your screen resolution is not an integer multiple of 320x240, that is). But it will provide a ""pixel-perfect"" screen then.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,855,2017-02-04T23:17:23Z,2017-02-19T18:35:58Z,2018-01-12T07:54:24Z,MERGED,True,23,0,4,https://github.com/fabiangreffrath,Add option to force integer scales for resolution-independent rendering,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/855,https://github.com/AXDOOMER,11,https://github.com/chocolate-doom/chocolate-doom/pull/855#issuecomment-280933903,Fixes #853,"somewhere, that increasing the 'gl_max_scale' value to 5 or 6 contributes to attenuate the blur a little bit. Should someone with 'sharp eyes' fiddle with this setting, or is the new 'force integer scaling' option sufficient for their purposes?

I already tried that. The engine still stretches the screen and creates intermediate pixels vertically and horizontally, so it still looks blurry. What @fabiangreffrath did is great, and I didn't notice when I tested, but @fragglet  says aspect_ratio_ratio_correct is respected, so it's even greater.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,861,2017-02-07T07:12:21Z,2017-02-07T12:00:28Z,2017-02-07T12:00:28Z,MERGED,True,4,0,1,https://github.com/JNechaevsky,Small CodeBlocks update,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/861,https://github.com/JNechaevsky,1,https://github.com/chocolate-doom/chocolate-doom/pull/861,Two important files was missing.,Two important files was missing.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,864,2017-02-13T19:23:44Z,2017-02-25T20:51:14Z,2017-02-25T20:51:17Z,MERGED,True,128,191,19,https://github.com/scfinniss,Support for Watcom C,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/864,https://github.com/scfinniss,1,https://github.com/chocolate-doom/chocolate-doom/pull/864,"These are the changes I needed to get chocolate doom to compile with the Open Watcom 1.9 compiler.
I've added a macro PACKEDPREFIX that prefixes all structs that need to be packed.
I think it's possible to achieve the features of PACKEDPREFIX and PACKEDATTR with a macro function, but I've not tried this myself.
A change was also made to src/doom/p_setup.c as the compiler suggested that line 680 required a constant value.
..\src\doom\p_setup.c(680): Error! E1054: Expression must be constant
Error: Compiler returned a bad status compiling ""..\src\doom\p_setup.c""
I have not included the make files used.
I have not confirmed that all the binaries compile (chocolate-heretic, setup, etc).","These are the changes I needed to get chocolate doom to compile with the Open Watcom 1.9 compiler.
I've added a macro PACKEDPREFIX that prefixes all structs that need to be packed.
I think it's possible to achieve the features of PACKEDPREFIX and PACKEDATTR with a macro function, but I've not tried this myself.
A change was also made to src/doom/p_setup.c as the compiler suggested that line 680 required a constant value.
..\src\doom\p_setup.c(680): Error! E1054: Expression must be constant
Error: Compiler returned a bad status compiling ""..\src\doom\p_setup.c""
I have not included the make files used.
I have not confirmed that all the binaries compile (chocolate-heretic, setup, etc).",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,864,2017-02-13T19:23:44Z,2017-02-25T20:51:14Z,2017-02-25T20:51:17Z,MERGED,True,128,191,19,https://github.com/scfinniss,Support for Watcom C,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/864,https://github.com/fragglet,2,https://github.com/chocolate-doom/chocolate-doom/pull/864#issuecomment-279520837,"These are the changes I needed to get chocolate doom to compile with the Open Watcom 1.9 compiler.
I've added a macro PACKEDPREFIX that prefixes all structs that need to be packed.
I think it's possible to achieve the features of PACKEDPREFIX and PACKEDATTR with a macro function, but I've not tried this myself.
A change was also made to src/doom/p_setup.c as the compiler suggested that line 680 required a constant value.
..\src\doom\p_setup.c(680): Error! E1054: Expression must be constant
Error: Compiler returned a bad status compiling ""..\src\doom\p_setup.c""
I have not included the make files used.
I have not confirmed that all the binaries compile (chocolate-heretic, setup, etc).","I think it's possible to achieve the features of PACKEDPREFIX and PACKEDATTR with a macro function, but I've not tried this myself.

You can probably achieve this with something like:
#define PACKED_STRUCT(x) PACKEDPREFIX struct x PACKEDATTR

Then to use in practice, eg.
typedef PACKED_STRUCT({
    short		x;
    short		y;
}) mapvertex_t;",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,864,2017-02-13T19:23:44Z,2017-02-25T20:51:14Z,2017-02-25T20:51:17Z,MERGED,True,128,191,19,https://github.com/scfinniss,Support for Watcom C,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/864,https://github.com/scfinniss,3,https://github.com/chocolate-doom/chocolate-doom/pull/864#issuecomment-279548823,"These are the changes I needed to get chocolate doom to compile with the Open Watcom 1.9 compiler.
I've added a macro PACKEDPREFIX that prefixes all structs that need to be packed.
I think it's possible to achieve the features of PACKEDPREFIX and PACKEDATTR with a macro function, but I've not tried this myself.
A change was also made to src/doom/p_setup.c as the compiler suggested that line 680 required a constant value.
..\src\doom\p_setup.c(680): Error! E1054: Expression must be constant
Error: Compiler returned a bad status compiling ""..\src\doom\p_setup.c""
I have not included the make files used.
I have not confirmed that all the binaries compile (chocolate-heretic, setup, etc).","I'll definitely change it to do that then.
I'm currently looking into getting the full project to compile so I can confirm everything compiles and runs correctly. The delay I'm having is getting it all done without having to write my own make files. Code Blocks does have support for OW, so that's where I've started.
The discussions over on the Doomworld forums at the moment are an interesting coincidence. :)",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,864,2017-02-13T19:23:44Z,2017-02-25T20:51:14Z,2017-02-25T20:51:17Z,MERGED,True,128,191,19,https://github.com/scfinniss,Support for Watcom C,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/864,https://github.com/fabiangreffrath,4,https://github.com/chocolate-doom/chocolate-doom/pull/864#issuecomment-279630892,"These are the changes I needed to get chocolate doom to compile with the Open Watcom 1.9 compiler.
I've added a macro PACKEDPREFIX that prefixes all structs that need to be packed.
I think it's possible to achieve the features of PACKEDPREFIX and PACKEDATTR with a macro function, but I've not tried this myself.
A change was also made to src/doom/p_setup.c as the compiler suggested that line 680 required a constant value.
..\src\doom\p_setup.c(680): Error! E1054: Expression must be constant
Error: Compiler returned a bad status compiling ""..\src\doom\p_setup.c""
I have not included the make files used.
I have not confirmed that all the binaries compile (chocolate-heretic, setup, etc).","A change was also made to  src/doom/p_setup.c  as the compiler suggested that line 680 required a constant value.

We should probably apply this anyway.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,864,2017-02-13T19:23:44Z,2017-02-25T20:51:14Z,2017-02-25T20:51:17Z,MERGED,True,128,191,19,https://github.com/scfinniss,Support for Watcom C,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/864,https://github.com/scfinniss,5,https://github.com/chocolate-doom/chocolate-doom/pull/864#issuecomment-282398926,"These are the changes I needed to get chocolate doom to compile with the Open Watcom 1.9 compiler.
I've added a macro PACKEDPREFIX that prefixes all structs that need to be packed.
I think it's possible to achieve the features of PACKEDPREFIX and PACKEDATTR with a macro function, but I've not tried this myself.
A change was also made to src/doom/p_setup.c as the compiler suggested that line 680 required a constant value.
..\src\doom\p_setup.c(680): Error! E1054: Expression must be constant
Error: Compiler returned a bad status compiling ""..\src\doom\p_setup.c""
I have not included the make files used.
I have not confirmed that all the binaries compile (chocolate-heretic, setup, etc).","Ok...

Applied the function macro as suggested with small modification as #define PACKED_STRUCT(...) PACKEDPREFIX struct __VA_ARGS__ PACKEDATTR otherwise it fails with structs from Heretic and Hexen defined as

typedef PACKED_STRUCT (
{
    short x, y; //thinks this is multiple variables to the macro
}) mapvertex_t;


In Heretic's d_main.c had to replace some #ifdef __WATCOMC__  with #if 0 because these were reviving dead code.


Added a header for Strife's m_saves.c


Strife's p_setup.c needed the same change as Doom's


v_patch.h contains some unnecessary white space changes, when trying to only stage the lines I changed it jumbled up the struct. Hopefully this is fine.


I have successfully compiled the following:
chocolate-doom.exe
chocolate-heretic.exe
chocolate-hexen.exe
chocolate-server.exe
chocolate-setup.exe
chocolate-strife.exe
Only issue I'm aware of is that Hexen will crash on startup if there's no config file present. Not entirely sure why this is a problem unique to Hexen. I know it has something to do with loading the defaults for the config, but I've not figured out what's going wrong yet.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,864,2017-02-13T19:23:44Z,2017-02-25T20:51:14Z,2017-02-25T20:51:17Z,MERGED,True,128,191,19,https://github.com/scfinniss,Support for Watcom C,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/864,https://github.com/jmtd,6,https://github.com/chocolate-doom/chocolate-doom/pull/864#issuecomment-282422997,"These are the changes I needed to get chocolate doom to compile with the Open Watcom 1.9 compiler.
I've added a macro PACKEDPREFIX that prefixes all structs that need to be packed.
I think it's possible to achieve the features of PACKEDPREFIX and PACKEDATTR with a macro function, but I've not tried this myself.
A change was also made to src/doom/p_setup.c as the compiler suggested that line 680 required a constant value.
..\src\doom\p_setup.c(680): Error! E1054: Expression must be constant
Error: Compiler returned a bad status compiling ""..\src\doom\p_setup.c""
I have not included the make files used.
I have not confirmed that all the binaries compile (chocolate-heretic, setup, etc).","In Heretic's d_main.c had to replace some #ifdef WATCOMC with #if 0 because these were reviving dead code.

Haha!
I think it would be nice if those were commented to indicate what is happening there. something like
 #if 0 // was __WATCOMC__ in raven sources, breaks open watcom

Other than that, on visual inspection only (haven't tried building the changes at all) it LGMT at least!",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,864,2017-02-13T19:23:44Z,2017-02-25T20:51:14Z,2017-02-25T20:51:17Z,MERGED,True,128,191,19,https://github.com/scfinniss,Support for Watcom C,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/864,https://github.com/chungy,7,https://github.com/chocolate-doom/chocolate-doom/pull/864#issuecomment-282428620,"These are the changes I needed to get chocolate doom to compile with the Open Watcom 1.9 compiler.
I've added a macro PACKEDPREFIX that prefixes all structs that need to be packed.
I think it's possible to achieve the features of PACKEDPREFIX and PACKEDATTR with a macro function, but I've not tried this myself.
A change was also made to src/doom/p_setup.c as the compiler suggested that line 680 required a constant value.
..\src\doom\p_setup.c(680): Error! E1054: Expression must be constant
Error: Compiler returned a bad status compiling ""..\src\doom\p_setup.c""
I have not included the make files used.
I have not confirmed that all the binaries compile (chocolate-heretic, setup, etc).","In my own opinion, I'd rather see dead code just deleted rather than #if'd out. the original source release won't disappear just because Chocolate cleans it up.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,864,2017-02-13T19:23:44Z,2017-02-25T20:51:14Z,2017-02-25T20:51:17Z,MERGED,True,128,191,19,https://github.com/scfinniss,Support for Watcom C,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/864,https://github.com/scfinniss,8,https://github.com/chocolate-doom/chocolate-doom/pull/864#issuecomment-282469852,"These are the changes I needed to get chocolate doom to compile with the Open Watcom 1.9 compiler.
I've added a macro PACKEDPREFIX that prefixes all structs that need to be packed.
I think it's possible to achieve the features of PACKEDPREFIX and PACKEDATTR with a macro function, but I've not tried this myself.
A change was also made to src/doom/p_setup.c as the compiler suggested that line 680 required a constant value.
..\src\doom\p_setup.c(680): Error! E1054: Expression must be constant
Error: Compiler returned a bad status compiling ""..\src\doom\p_setup.c""
I have not included the make files used.
I have not confirmed that all the binaries compile (chocolate-heretic, setup, etc).","I don't see the merit in keeping the dead code either, however with these changes I aimed to make as few changes to the original source as possible. My only intention was to get the code compiling with OW.
I had originally used something like
#if defined(__WATCOMC__) && (0)
However finding that #if 0 had been used elsewhere I went with that instead
Another option that we could consider is
#if defined(__WATCOMC__) && defined(__DOS__)
If we're interested in keeping history, this is nice because it accurately shows the code is for Watcom C's DOS target.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,864,2017-02-13T19:23:44Z,2017-02-25T20:51:14Z,2017-02-25T20:51:17Z,MERGED,True,128,191,19,https://github.com/scfinniss,Support for Watcom C,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/864,https://github.com/fragglet,9,https://github.com/chocolate-doom/chocolate-doom/pull/864#issuecomment-282501126,"These are the changes I needed to get chocolate doom to compile with the Open Watcom 1.9 compiler.
I've added a macro PACKEDPREFIX that prefixes all structs that need to be packed.
I think it's possible to achieve the features of PACKEDPREFIX and PACKEDATTR with a macro function, but I've not tried this myself.
A change was also made to src/doom/p_setup.c as the compiler suggested that line 680 required a constant value.
..\src\doom\p_setup.c(680): Error! E1054: Expression must be constant
Error: Compiler returned a bad status compiling ""..\src\doom\p_setup.c""
I have not included the make files used.
I have not confirmed that all the binaries compile (chocolate-heretic, setup, etc).",It looks like the only __WATCOMC__ code we still have is some text mode drawing stuff in heretic/d_main.c. Please just remove it - we should have removed it already.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,864,2017-02-13T19:23:44Z,2017-02-25T20:51:14Z,2017-02-25T20:51:17Z,MERGED,True,128,191,19,https://github.com/scfinniss,Support for Watcom C,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/864,https://github.com/scfinniss,10,https://github.com/chocolate-doom/chocolate-doom/pull/864#issuecomment-282506505,"These are the changes I needed to get chocolate doom to compile with the Open Watcom 1.9 compiler.
I've added a macro PACKEDPREFIX that prefixes all structs that need to be packed.
I think it's possible to achieve the features of PACKEDPREFIX and PACKEDATTR with a macro function, but I've not tried this myself.
A change was also made to src/doom/p_setup.c as the compiler suggested that line 680 required a constant value.
..\src\doom\p_setup.c(680): Error! E1054: Expression must be constant
Error: Compiler returned a bad status compiling ""..\src\doom\p_setup.c""
I have not included the make files used.
I have not confirmed that all the binaries compile (chocolate-heretic, setup, etc).","Removed dead code from Heretic's d_main.c.
Added null check for SavePathConfig in Hexen's h2_main.c. (Should this be handled elsewhere?)
Unless there's something I've missed that's it.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,864,2017-02-13T19:23:44Z,2017-02-25T20:51:14Z,2017-02-25T20:51:17Z,MERGED,True,128,191,19,https://github.com/scfinniss,Support for Watcom C,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/864,https://github.com/fragglet,11,https://github.com/chocolate-doom/chocolate-doom/pull/864#issuecomment-282511531,"These are the changes I needed to get chocolate doom to compile with the Open Watcom 1.9 compiler.
I've added a macro PACKEDPREFIX that prefixes all structs that need to be packed.
I think it's possible to achieve the features of PACKEDPREFIX and PACKEDATTR with a macro function, but I've not tried this myself.
A change was also made to src/doom/p_setup.c as the compiler suggested that line 680 required a constant value.
..\src\doom\p_setup.c(680): Error! E1054: Expression must be constant
Error: Compiler returned a bad status compiling ""..\src\doom\p_setup.c""
I have not included the make files used.
I have not confirmed that all the binaries compile (chocolate-heretic, setup, etc).",Thanks!,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,865,2017-02-17T09:16:14Z,2017-02-20T20:21:27Z,2017-02-21T10:04:50Z,MERGED,True,25,0,4,https://github.com/jmtd,VGA Porch border emulation,2,"['graphics', 'accuracy']",https://github.com/chocolate-doom/chocolate-doom/pull/865,https://github.com/jmtd,1,https://github.com/chocolate-doom/chocolate-doom/pull/865,"Set the renderer draw colour to the current palette's 0-index,
rather than just black. This means the pillars/letterboxes ""flash""
when the palette changes (such as item pick up, being hurt, etc.)
This emulates the behaviour of the VGA ""porch"" region with Vanilla.
Fixes #832.","Set the renderer draw colour to the current palette's 0-index,
rather than just black. This means the pillars/letterboxes ""flash""
when the palette changes (such as item pick up, being hurt, etc.)
This emulates the behaviour of the VGA ""porch"" region with Vanilla.
Fixes #832.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,865,2017-02-17T09:16:14Z,2017-02-20T20:21:27Z,2017-02-21T10:04:50Z,MERGED,True,25,0,4,https://github.com/jmtd,VGA Porch border emulation,2,"['graphics', 'accuracy']",https://github.com/chocolate-doom/chocolate-doom/pull/865,https://github.com/chungy,2,https://github.com/chocolate-doom/chocolate-doom/pull/865#issuecomment-280711982,"Set the renderer draw colour to the current palette's 0-index,
rather than just black. This means the pillars/letterboxes ""flash""
when the palette changes (such as item pick up, being hurt, etc.)
This emulates the behaviour of the VGA ""porch"" region with Vanilla.
Fixes #832.","May I recommend at least making this a configurable setting? In the setup program, Advanced Display Options should be about the right place.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,865,2017-02-17T09:16:14Z,2017-02-20T20:21:27Z,2017-02-21T10:04:50Z,MERGED,True,25,0,4,https://github.com/jmtd,VGA Porch border emulation,2,"['graphics', 'accuracy']",https://github.com/chocolate-doom/chocolate-doom/pull/865,https://github.com/jmtd,3,https://github.com/chocolate-doom/chocolate-doom/pull/865#issuecomment-280715805,"Set the renderer draw colour to the current palette's 0-index,
rather than just black. This means the pillars/letterboxes ""flash""
when the palette changes (such as item pick up, being hurt, etc.)
This emulates the behaviour of the VGA ""porch"" region with Vanilla.
Fixes #832.",Is anyone really going to be bothered enough by this to want to turn it off? It's a fairly subtle effect. I had to add debug prints to even convince myself it was working.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,865,2017-02-17T09:16:14Z,2017-02-20T20:21:27Z,2017-02-21T10:04:50Z,MERGED,True,25,0,4,https://github.com/jmtd,VGA Porch border emulation,2,"['graphics', 'accuracy']",https://github.com/chocolate-doom/chocolate-doom/pull/865,https://github.com/JNechaevsky,4,https://github.com/chocolate-doom/chocolate-doom/pull/865#issuecomment-280730883,"Set the renderer draw colour to the current palette's 0-index,
rather than just black. This means the pillars/letterboxes ""flash""
when the palette changes (such as item pick up, being hurt, etc.)
This emulates the behaviour of the VGA ""porch"" region with Vanilla.
Fixes #832.","Tested this effect locally and agreed with @chungy, let me please explain why:
I was testing it on 27"" monitor with Chocolate's aspect ratio correction. Technically this flash works just fine, but the problem is - on such a huge monitor flashing looks a bit ""agressive"", especially when picking up just one little bonus. No, it's not too agressive like flashbang grenade, but aesthetically annoying for eyes.
So yeah, it will be really good if this flashing will be optional, maybe even better if disabled by default, just in case of user may not figure out how to disable it.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,865,2017-02-17T09:16:14Z,2017-02-20T20:21:27Z,2017-02-21T10:04:50Z,MERGED,True,25,0,4,https://github.com/jmtd,VGA Porch border emulation,2,"['graphics', 'accuracy']",https://github.com/chocolate-doom/chocolate-doom/pull/865,https://github.com/chungy,5,https://github.com/chocolate-doom/chocolate-doom/pull/865#issuecomment-280732873,"Set the renderer draw colour to the current palette's 0-index,
rather than just black. This means the pillars/letterboxes ""flash""
when the palette changes (such as item pick up, being hurt, etc.)
This emulates the behaviour of the VGA ""porch"" region with Vanilla.
Fixes #832.","Yeah, that's why I was asking. I find the effect extremely distracting (and obvious, rather than subtle... heh).",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,865,2017-02-17T09:16:14Z,2017-02-20T20:21:27Z,2017-02-21T10:04:50Z,MERGED,True,25,0,4,https://github.com/jmtd,VGA Porch border emulation,2,"['graphics', 'accuracy']",https://github.com/chocolate-doom/chocolate-doom/pull/865,https://github.com/jmtd,6,https://github.com/chocolate-doom/chocolate-doom/pull/865#issuecomment-281029827,"Set the renderer draw colour to the current palette's 0-index,
rather than just black. This means the pillars/letterboxes ""flash""
when the palette changes (such as item pick up, being hurt, etc.)
This emulates the behaviour of the VGA ""porch"" region with Vanilla.
Fixes #832.","OK, thanks for the feedback. I'll push an option.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,865,2017-02-17T09:16:14Z,2017-02-20T20:21:27Z,2017-02-21T10:04:50Z,MERGED,True,25,0,4,https://github.com/jmtd,VGA Porch border emulation,2,"['graphics', 'accuracy']",https://github.com/chocolate-doom/chocolate-doom/pull/865,https://github.com/linguica,7,https://github.com/chocolate-doom/chocolate-doom/pull/865#issuecomment-281162731,"Set the renderer draw colour to the current palette's 0-index,
rather than just black. This means the pillars/letterboxes ""flash""
when the palette changes (such as item pick up, being hurt, etc.)
This emulates the behaviour of the VGA ""porch"" region with Vanilla.
Fixes #832.","Hmm, testing this out exposed a problem with the SDL2 branch, so thanks :)",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,865,2017-02-17T09:16:14Z,2017-02-20T20:21:27Z,2017-02-21T10:04:50Z,MERGED,True,25,0,4,https://github.com/jmtd,VGA Porch border emulation,2,"['graphics', 'accuracy']",https://github.com/chocolate-doom/chocolate-doom/pull/865,https://github.com/chungy,8,https://github.com/chocolate-doom/chocolate-doom/pull/865#issuecomment-281173240,"Set the renderer draw colour to the current palette's 0-index,
rather than just black. This means the pillars/letterboxes ""flash""
when the palette changes (such as item pick up, being hurt, etc.)
This emulates the behaviour of the VGA ""porch"" region with Vanilla.
Fixes #832.",Seems good and simple enough to me. Merging :),True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,865,2017-02-17T09:16:14Z,2017-02-20T20:21:27Z,2017-02-21T10:04:50Z,MERGED,True,25,0,4,https://github.com/jmtd,VGA Porch border emulation,2,"['graphics', 'accuracy']",https://github.com/chocolate-doom/chocolate-doom/pull/865,https://github.com/sneakernets,9,https://github.com/chocolate-doom/chocolate-doom/pull/865#issuecomment-281196350,"Set the renderer draw colour to the current palette's 0-index,
rather than just black. This means the pillars/letterboxes ""flash""
when the palette changes (such as item pick up, being hurt, etc.)
This emulates the behaviour of the VGA ""porch"" region with Vanilla.
Fixes #832.",This looks awesome! Definitely love this addition. Glad to see it in.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,865,2017-02-17T09:16:14Z,2017-02-20T20:21:27Z,2017-02-21T10:04:50Z,MERGED,True,25,0,4,https://github.com/jmtd,VGA Porch border emulation,2,"['graphics', 'accuracy']",https://github.com/chocolate-doom/chocolate-doom/pull/865,https://github.com/AXDOOMER,10,https://github.com/chocolate-doom/chocolate-doom/pull/865#issuecomment-281222739,"Set the renderer draw colour to the current palette's 0-index,
rather than just black. This means the pillars/letterboxes ""flash""
when the palette changes (such as item pick up, being hurt, etc.)
This emulates the behaviour of the VGA ""porch"" region with Vanilla.
Fixes #832.","Nice feature, but extremely distracting and annoying. Chocolate-Doom has a 4:3 aspect ratio and is running mostly inside 16:9 screens, so the borders are much bigger than what you had oin 4:3 CRTs (the borders on the left and on the right are huge in 16:9). The result is that this feature doesn't look so good.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,865,2017-02-17T09:16:14Z,2017-02-20T20:21:27Z,2017-02-21T10:04:50Z,MERGED,True,25,0,4,https://github.com/jmtd,VGA Porch border emulation,2,"['graphics', 'accuracy']",https://github.com/chocolate-doom/chocolate-doom/pull/865,https://github.com/linguica,11,https://github.com/chocolate-doom/chocolate-doom/pull/865#issuecomment-281226596,"Set the renderer draw colour to the current palette's 0-index,
rather than just black. This means the pillars/letterboxes ""flash""
when the palette changes (such as item pick up, being hurt, etc.)
This emulates the behaviour of the VGA ""porch"" region with Vanilla.
Fixes #832.","You say that, but the one guy out there with a 1024x768 monitor who chooses to run Chocolate Doom in fullscreen with precisely 3x horizontal scaling will appreciate his 32 / 24 pixel wide ""porch"" flashing.
…
Sent from my iPhone
 On Feb 20, 2017, at 5:50 PM, Alexandre-Xavier Labonté-Lamoureux ***@***.***> wrote:

 Nice feature, but extremely distracting. Chocolate-Doom has a 4:3 aspect ratio and is running mostly inside 16:9 screens, so the border is much bigger than what you hard with 4:3 CRTs. The result is that this feature doesn't look so good.

 —
 You are receiving this because you commented.
 Reply to this email directly, view it on GitHub, or mute the thread.",True,{'THUMBS_UP': ['https://github.com/AXDOOMER']}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,865,2017-02-17T09:16:14Z,2017-02-20T20:21:27Z,2017-02-21T10:04:50Z,MERGED,True,25,0,4,https://github.com/jmtd,VGA Porch border emulation,2,"['graphics', 'accuracy']",https://github.com/chocolate-doom/chocolate-doom/pull/865,https://github.com/sneakernets,12,https://github.com/chocolate-doom/chocolate-doom/pull/865#issuecomment-281231159,"Set the renderer draw colour to the current palette's 0-index,
rather than just black. This means the pillars/letterboxes ""flash""
when the palette changes (such as item pick up, being hurt, etc.)
This emulates the behaviour of the VGA ""porch"" region with Vanilla.
Fixes #832.","The only way to fix that it is to add black rectangles about 2-3 ""doom"" pixels from the sides. Or, use a 4:3 resolution and not stretch the resolution to 16:9. Surely monitors can do that now?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,865,2017-02-17T09:16:14Z,2017-02-20T20:21:27Z,2017-02-21T10:04:50Z,MERGED,True,25,0,4,https://github.com/jmtd,VGA Porch border emulation,2,"['graphics', 'accuracy']",https://github.com/chocolate-doom/chocolate-doom/pull/865,https://github.com/AXDOOMER,13,https://github.com/chocolate-doom/chocolate-doom/pull/865#issuecomment-281236198,"Set the renderer draw colour to the current palette's 0-index,
rather than just black. This means the pillars/letterboxes ""flash""
when the palette changes (such as item pick up, being hurt, etc.)
This emulates the behaviour of the VGA ""porch"" region with Vanilla.
Fixes #832.","black rectangles about 2-3 ""doom"" pixels

That doesn't sound scientific, but I don't have a CRT to test.
If you'd shrunk the screen to its minimum size on a CRT, would the entire borders flash?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,865,2017-02-17T09:16:14Z,2017-02-20T20:21:27Z,2017-02-21T10:04:50Z,MERGED,True,25,0,4,https://github.com/jmtd,VGA Porch border emulation,2,"['graphics', 'accuracy']",https://github.com/chocolate-doom/chocolate-doom/pull/865,https://github.com/jmtd,14,https://github.com/chocolate-doom/chocolate-doom/pull/865#issuecomment-281288719,"Set the renderer draw colour to the current palette's 0-index,
rather than just black. This means the pillars/letterboxes ""flash""
when the palette changes (such as item pick up, being hurt, etc.)
This emulates the behaviour of the VGA ""porch"" region with Vanilla.
Fixes #832.","The result is that this feature doesn't look so good.

Results vary depending on the specifics of your hardware, settings and personal taste. It defaults to off. (I quite like the effect, personally)

You say that, but the one guy out there with a 1024x768 monitor who chooses to run Chocolate Doom in fullscreen with precisely 3x horizontal scaling will appreciate his 32 / 24 pixel wide ""porch"" flashing.

Funnily enough that's the exact setup I have for my Raspberry Pi ;)
Edit: video of the PI setup, in full composite-bleeding glory https://youtu.be/TL4SxgpRPPA",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,866,2017-02-17T12:12:52Z,,2019-11-17T22:04:56Z,OPEN,False,18,18,2,https://github.com/NY00123,pcsound: Partial fix for #795,1,"['sfx', 'accuracy']",https://github.com/chocolate-doom/chocolate-doom/pull/866,https://github.com/NY00123,1,https://github.com/chocolate-doom/chocolate-doom/pull/866,"I've created this PR from the patch posted in issue #795.
A bit of a summary (partially covered in the issue's discussion):

This modifies the Linux and SDL drivers. The BSD and (currently-disabled) WIN32 drivers are untouched. I'm not sure about this, but doing direct I/O writes (as done in the OPL drivers) might work better for at least one of these drivers (although not on newer Windows setups).
A short description of the change: A new square wave is started when a different value (frequency) is read from the PC sound data, otherwise the current square wave (if any) is still being continuously generated.

While the issue's discussion already has a few sound recordings, it'll still be useful if anybody can make a recording from Vanilla Doom under DOS.
Note that this should be done under real DOS, not DOSBox (which currently doesn't faithfully recreate the sounds as fixed here).
Also, while using NTVDM or DOSEMU is a possibility, I found out that booting real DOS (even FreeDOS) instead might be more reliable. This is the case on non-vintage hardware, though, which may also have an impact.","I've created this PR from the patch posted in issue #795.
A bit of a summary (partially covered in the issue's discussion):

This modifies the Linux and SDL drivers. The BSD and (currently-disabled) WIN32 drivers are untouched. I'm not sure about this, but doing direct I/O writes (as done in the OPL drivers) might work better for at least one of these drivers (although not on newer Windows setups).
A short description of the change: A new square wave is started when a different value (frequency) is read from the PC sound data, otherwise the current square wave (if any) is still being continuously generated.

While the issue's discussion already has a few sound recordings, it'll still be useful if anybody can make a recording from Vanilla Doom under DOS.
Note that this should be done under real DOS, not DOSBox (which currently doesn't faithfully recreate the sounds as fixed here).
Also, while using NTVDM or DOSEMU is a possibility, I found out that booting real DOS (even FreeDOS) instead might be more reliable. This is the case on non-vintage hardware, though, which may also have an impact.",True,{'THUMBS_UP': ['https://github.com/bb010g']}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,866,2017-02-17T12:12:52Z,,2019-11-17T22:04:56Z,OPEN,False,18,18,2,https://github.com/NY00123,pcsound: Partial fix for #795,1,"['sfx', 'accuracy']",https://github.com/chocolate-doom/chocolate-doom/pull/866,https://github.com/AXDOOMER,2,https://github.com/chocolate-doom/chocolate-doom/pull/866#issuecomment-280720997,"I've created this PR from the patch posted in issue #795.
A bit of a summary (partially covered in the issue's discussion):

This modifies the Linux and SDL drivers. The BSD and (currently-disabled) WIN32 drivers are untouched. I'm not sure about this, but doing direct I/O writes (as done in the OPL drivers) might work better for at least one of these drivers (although not on newer Windows setups).
A short description of the change: A new square wave is started when a different value (frequency) is read from the PC sound data, otherwise the current square wave (if any) is still being continuously generated.

While the issue's discussion already has a few sound recordings, it'll still be useful if anybody can make a recording from Vanilla Doom under DOS.
Note that this should be done under real DOS, not DOSBox (which currently doesn't faithfully recreate the sounds as fixed here).
Also, while using NTVDM or DOSEMU is a possibility, I found out that booting real DOS (even FreeDOS) instead might be more reliable. This is the case on non-vintage hardware, though, which may also have an impact.",I should test this and provide PC speaker sound recording from DOS. I have the hardware to do this.,True,"{'THUMBS_UP': ['https://github.com/jmtd', 'https://github.com/bb010g']}"
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,866,2017-02-17T12:12:52Z,,2019-11-17T22:04:56Z,OPEN,False,18,18,2,https://github.com/NY00123,pcsound: Partial fix for #795,1,"['sfx', 'accuracy']",https://github.com/chocolate-doom/chocolate-doom/pull/866,https://github.com/AXDOOMER,3,https://github.com/chocolate-doom/chocolate-doom/pull/866#issuecomment-284202015,"I've created this PR from the patch posted in issue #795.
A bit of a summary (partially covered in the issue's discussion):

This modifies the Linux and SDL drivers. The BSD and (currently-disabled) WIN32 drivers are untouched. I'm not sure about this, but doing direct I/O writes (as done in the OPL drivers) might work better for at least one of these drivers (although not on newer Windows setups).
A short description of the change: A new square wave is started when a different value (frequency) is read from the PC sound data, otherwise the current square wave (if any) is still being continuously generated.

While the issue's discussion already has a few sound recordings, it'll still be useful if anybody can make a recording from Vanilla Doom under DOS.
Note that this should be done under real DOS, not DOSBox (which currently doesn't faithfully recreate the sounds as fixed here).
Also, while using NTVDM or DOSEMU is a possibility, I found out that booting real DOS (even FreeDOS) instead might be more reliable. This is the case on non-vintage hardware, though, which may also have an impact.","I cannot tell by listening to the sound generated by this new PC speaker emulation code if it's accurate compared to what I remember getting from my 20 years old PC (it's been a long time), but I definitively think it's a lot closer. My old PC has WIndows 98, but I can boot it in DOS mode. Can't test it right now because I'm away from home and I'm only going back at the end of April.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,866,2017-02-17T12:12:52Z,,2019-11-17T22:04:56Z,OPEN,False,18,18,2,https://github.com/NY00123,pcsound: Partial fix for #795,1,"['sfx', 'accuracy']",https://github.com/chocolate-doom/chocolate-doom/pull/866,https://github.com/JNechaevsky,4,https://github.com/chocolate-doom/chocolate-doom/pull/866#issuecomment-284511857,"I've created this PR from the patch posted in issue #795.
A bit of a summary (partially covered in the issue's discussion):

This modifies the Linux and SDL drivers. The BSD and (currently-disabled) WIN32 drivers are untouched. I'm not sure about this, but doing direct I/O writes (as done in the OPL drivers) might work better for at least one of these drivers (although not on newer Windows setups).
A short description of the change: A new square wave is started when a different value (frequency) is read from the PC sound data, otherwise the current square wave (if any) is still being continuously generated.

While the issue's discussion already has a few sound recordings, it'll still be useful if anybody can make a recording from Vanilla Doom under DOS.
Note that this should be done under real DOS, not DOSBox (which currently doesn't faithfully recreate the sounds as fixed here).
Also, while using NTVDM or DOSEMU is a possibility, I found out that booting real DOS (even FreeDOS) instead might be more reliable. This is the case on non-vintage hardware, though, which may also have an impact.","I think I can properly handle testing this case, since I have all necessary devices for this:

Video camera for live recording
Very sensitive condenser USB  microphone
Two old PC boxes: Compaq EVO and DELL OptiPlex 280 (Speaker sound not very good, not sure it is necessary to test on this PC at all). Was founded in depths of my wardrobe, both are Pentium 4 and loading fine from FreeDOS live usb stick, created using Rufus  software.

Photo of these stuff: http://i.imgur.com/SJ2bqNU.png
But before testing, I need a clear directions of what to test:

Doom II v1.9 for DOS
Chocolate Doom w/o commit 83b0a97
Chocolate Doom with commit 83b0a97

Is it right? Or maybe something else?
Also, even after brief testing, I have a feeling that this not pitch difference, neither frequency difference. Emulated sound from desktop audio speakers is simply much clear, making an illusion of it’s higher shifting. Maybe I’m wrong technically, but pretty sure that my ears aren’t tricking me. :)
Making such video is not awfully hard, but will require time for recording and editing.
So I have to ask directly - is it worth to put much effort on this?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,866,2017-02-17T12:12:52Z,,2019-11-17T22:04:56Z,OPEN,False,18,18,2,https://github.com/NY00123,pcsound: Partial fix for #795,1,"['sfx', 'accuracy']",https://github.com/chocolate-doom/chocolate-doom/pull/866,https://github.com/AXDOOMER,5,https://github.com/chocolate-doom/chocolate-doom/pull/866#issuecomment-284518005,"I've created this PR from the patch posted in issue #795.
A bit of a summary (partially covered in the issue's discussion):

This modifies the Linux and SDL drivers. The BSD and (currently-disabled) WIN32 drivers are untouched. I'm not sure about this, but doing direct I/O writes (as done in the OPL drivers) might work better for at least one of these drivers (although not on newer Windows setups).
A short description of the change: A new square wave is started when a different value (frequency) is read from the PC sound data, otherwise the current square wave (if any) is still being continuously generated.

While the issue's discussion already has a few sound recordings, it'll still be useful if anybody can make a recording from Vanilla Doom under DOS.
Note that this should be done under real DOS, not DOSBox (which currently doesn't faithfully recreate the sounds as fixed here).
Also, while using NTVDM or DOSEMU is a possibility, I found out that booting real DOS (even FreeDOS) instead might be more reliable. This is the case on non-vintage hardware, though, which may also have an impact.","@JNechaevsky Check which type of PC speaker they have. They may have Piezo speakers. It would be better to test in MS-DOS ratter than FreeDOS, just in case there is a difference.
I am willing to put effort in this, since I have been playing with the PC speaker much of my life. @NY00123's fix is good, but I just want to amass more data. We must have audio samples to compare. The accuracy of Chocolate-Doom is something that's important to me.

Emulated sound from desktop audio speakers is simply much clear, making an illusion of it’s higher shifting. Maybe I’m wrong technically, but pretty sure that my ears aren’t tricking me. :)

I might be wrong too when I explain the difference between both. I don't know how to explain the difference technically and I am not an audiophile, but I know that the PC speaker emulation sounds wrong.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,866,2017-02-17T12:12:52Z,,2019-11-17T22:04:56Z,OPEN,False,18,18,2,https://github.com/NY00123,pcsound: Partial fix for #795,1,"['sfx', 'accuracy']",https://github.com/chocolate-doom/chocolate-doom/pull/866,https://github.com/JNechaevsky,6,https://github.com/chocolate-doom/chocolate-doom/pull/866#issuecomment-284528332,"I've created this PR from the patch posted in issue #795.
A bit of a summary (partially covered in the issue's discussion):

This modifies the Linux and SDL drivers. The BSD and (currently-disabled) WIN32 drivers are untouched. I'm not sure about this, but doing direct I/O writes (as done in the OPL drivers) might work better for at least one of these drivers (although not on newer Windows setups).
A short description of the change: A new square wave is started when a different value (frequency) is read from the PC sound data, otherwise the current square wave (if any) is still being continuously generated.

While the issue's discussion already has a few sound recordings, it'll still be useful if anybody can make a recording from Vanilla Doom under DOS.
Note that this should be done under real DOS, not DOSBox (which currently doesn't faithfully recreate the sounds as fixed here).
Also, while using NTVDM or DOSEMU is a possibility, I found out that booting real DOS (even FreeDOS) instead might be more reliable. This is the case on non-vintage hardware, though, which may also have an impact.","@AXDOOMER, Unfortunately I don’t know anything about Piezo. Is it what we need?
Outside: http://i.imgur.com/Y9oEIpK.png
Inside: http://i.imgur.com/zDS2S4h.png
Digits on Speaker: http://i.imgur.com/TZQOQyO.png
I’m also not really sure that I can handle exactly DOS loading, but maybe there is some ways for live boot into 7.10. Just need to remember.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,866,2017-02-17T12:12:52Z,,2019-11-17T22:04:56Z,OPEN,False,18,18,2,https://github.com/NY00123,pcsound: Partial fix for #795,1,"['sfx', 'accuracy']",https://github.com/chocolate-doom/chocolate-doom/pull/866,https://github.com/NY00123,7,https://github.com/chocolate-doom/chocolate-doom/pull/866#issuecomment-284532835,"I've created this PR from the patch posted in issue #795.
A bit of a summary (partially covered in the issue's discussion):

This modifies the Linux and SDL drivers. The BSD and (currently-disabled) WIN32 drivers are untouched. I'm not sure about this, but doing direct I/O writes (as done in the OPL drivers) might work better for at least one of these drivers (although not on newer Windows setups).
A short description of the change: A new square wave is started when a different value (frequency) is read from the PC sound data, otherwise the current square wave (if any) is still being continuously generated.

While the issue's discussion already has a few sound recordings, it'll still be useful if anybody can make a recording from Vanilla Doom under DOS.
Note that this should be done under real DOS, not DOSBox (which currently doesn't faithfully recreate the sounds as fixed here).
Also, while using NTVDM or DOSEMU is a possibility, I found out that booting real DOS (even FreeDOS) instead might be more reliable. This is the case on non-vintage hardware, though, which may also have an impact.","Thanks to @AXDOOMER and @JNechaevsky for your interest in doing some audible comparisons!
But first, as a response to one of @AXDOOMER's recent posts, I've decided to make a recording of mine from this 2011-era PC, after booting FreeDOS (admittedly I generally cheat and use a patched DOSBox, heh). This has been done via a USB drive. I suspect the PC Speaker is the Piezo kind (it's quite small and doesn't appear to output much bass).
I've used a phone to do the recording and even had the PC's case open. There's still some noise, but hopefully there isn't a lot.
I have also made similar recordings of Chocolate Doom's SDL driver, before and after applying the patch. These have been done by redirecting the whole output to Audacity, using pavucontrol (with a Monitor Source).
It can be a bit difficult to see how similar/different is the recording from Vanilla Doom. Again, I guess there's less bass sound, but a couple of other games I checked under FreeDOS do sound more like the way I recall these from the 90s.
Note that I have not done similar recordings of Chocolate Doom's Linux driver, but I believe that it's more-or-less the same as the output under FreeDOS (well, assuming the patch is applied).
Link to sounds: https://www.dropbox.com/sh/ccqbf6kfle46w2h/AACCeDUDH0cLRcQOB24PQrN7a?dl=0",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,866,2017-02-17T12:12:52Z,,2019-11-17T22:04:56Z,OPEN,False,18,18,2,https://github.com/NY00123,pcsound: Partial fix for #795,1,"['sfx', 'accuracy']",https://github.com/chocolate-doom/chocolate-doom/pull/866,https://github.com/NY00123,8,https://github.com/chocolate-doom/chocolate-doom/pull/866#issuecomment-284533124,"I've created this PR from the patch posted in issue #795.
A bit of a summary (partially covered in the issue's discussion):

This modifies the Linux and SDL drivers. The BSD and (currently-disabled) WIN32 drivers are untouched. I'm not sure about this, but doing direct I/O writes (as done in the OPL drivers) might work better for at least one of these drivers (although not on newer Windows setups).
A short description of the change: A new square wave is started when a different value (frequency) is read from the PC sound data, otherwise the current square wave (if any) is still being continuously generated.

While the issue's discussion already has a few sound recordings, it'll still be useful if anybody can make a recording from Vanilla Doom under DOS.
Note that this should be done under real DOS, not DOSBox (which currently doesn't faithfully recreate the sounds as fixed here).
Also, while using NTVDM or DOSEMU is a possibility, I found out that booting real DOS (even FreeDOS) instead might be more reliable. This is the case on non-vintage hardware, though, which may also have an impact.","Now replying to @JNechaevsky:
Wow, you seem to take this quite seriously, possibly a bit too much, heh. The main thing is that I don't see the need for is video recording. Just the audio segments are what I think will be useful, although I guess you've imagined yourself uploading video playbacks.
Basically, if you already have some setup ready, you can use it, but otherwise, it's maybe not necessary to prepare it (unless you really want to do this).
I should've probably mentioned this earlier, but if there's any way to digitally capture the speaker's output (or alternatively, redirect its output to speakers connected to an actual sound card), this will probably be the best in terms of the ability to do comparisons (although somewhat less true to various vintage setups, I guess).
You're spot-on about what should be tested (Vanilla Doom, Chocolate Doom w/o commit, Chocolate Doom with commit). Playing a short recorded demo segment (as I've done above) is probably a good approach.
As for the actual differences between the sounds (as I aim to fix), I think it's mostly about transitions between square waves, that may be present or not. For more details you can see (some of) my comment here (look for mentions of ""square wave""): #795 (comment)
The lack of bass I've previously mentioned may also apply in your case.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,866,2017-02-17T12:12:52Z,,2019-11-17T22:04:56Z,OPEN,False,18,18,2,https://github.com/NY00123,pcsound: Partial fix for #795,1,"['sfx', 'accuracy']",https://github.com/chocolate-doom/chocolate-doom/pull/866,https://github.com/AXDOOMER,9,https://github.com/chocolate-doom/chocolate-doom/pull/866#issuecomment-284560494,"I've created this PR from the patch posted in issue #795.
A bit of a summary (partially covered in the issue's discussion):

This modifies the Linux and SDL drivers. The BSD and (currently-disabled) WIN32 drivers are untouched. I'm not sure about this, but doing direct I/O writes (as done in the OPL drivers) might work better for at least one of these drivers (although not on newer Windows setups).
A short description of the change: A new square wave is started when a different value (frequency) is read from the PC sound data, otherwise the current square wave (if any) is still being continuously generated.

While the issue's discussion already has a few sound recordings, it'll still be useful if anybody can make a recording from Vanilla Doom under DOS.
Note that this should be done under real DOS, not DOSBox (which currently doesn't faithfully recreate the sounds as fixed here).
Also, while using NTVDM or DOSEMU is a possibility, I found out that booting real DOS (even FreeDOS) instead might be more reliable. This is the case on non-vintage hardware, though, which may also have an impact.","@JNechaevsky You can make a bootable DOS usb flash disk. Install DOS on it and then copy your Doom folder. Then, restart you computer and boot your usb key. This should work if the usb drive was made bootable correctly.
I think Windows XP can make bootable USB devices with MS-DOS. I did it once. Else,  MS-DOS 6.22 can be found on the Internet. If you have Linux, you can install it with dd.
Your speaker looks fine. I guess it's good. It should be a good old 2.25 inch PC speaker.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,866,2017-02-17T12:12:52Z,,2019-11-17T22:04:56Z,OPEN,False,18,18,2,https://github.com/NY00123,pcsound: Partial fix for #795,1,"['sfx', 'accuracy']",https://github.com/chocolate-doom/chocolate-doom/pull/866,https://github.com/JNechaevsky,10,https://github.com/chocolate-doom/chocolate-doom/pull/866#issuecomment-285134461,"I've created this PR from the patch posted in issue #795.
A bit of a summary (partially covered in the issue's discussion):

This modifies the Linux and SDL drivers. The BSD and (currently-disabled) WIN32 drivers are untouched. I'm not sure about this, but doing direct I/O writes (as done in the OPL drivers) might work better for at least one of these drivers (although not on newer Windows setups).
A short description of the change: A new square wave is started when a different value (frequency) is read from the PC sound data, otherwise the current square wave (if any) is still being continuously generated.

While the issue's discussion already has a few sound recordings, it'll still be useful if anybody can make a recording from Vanilla Doom under DOS.
Note that this should be done under real DOS, not DOSBox (which currently doesn't faithfully recreate the sounds as fixed here).
Also, while using NTVDM or DOSEMU is a possibility, I found out that booting real DOS (even FreeDOS) instead might be more reliable. This is the case on non-vintage hardware, though, which may also have an impact.","Sorry for it takes more time than excepted.
@NY00123, two last days was having a craziest happiness, so it was hard to make some adequate depositions, that's why I was too serious. Hearing your records, I can't produce nothing more than simple audio record, it's done:
http://jnechaevsky.users.sourceforge.net/files/doom2-freedos.ogg
It's recorded under latest FreeDOS 1.2, without any noise reduction (no need to do this). I've only cutted it a bit by removing pauses. So, is it good enough?
@AXDOOMER, thanks for reminding, but I was not lucky with formatting USB stick to MS-DOS bootable using XP. For some reason formatting simply freezes upon creating file system, no idea why. I will look for another sticks, I'm sure I have them and it's worth to try to boot pure MS-DOS.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,866,2017-02-17T12:12:52Z,,2019-11-17T22:04:56Z,OPEN,False,18,18,2,https://github.com/NY00123,pcsound: Partial fix for #795,1,"['sfx', 'accuracy']",https://github.com/chocolate-doom/chocolate-doom/pull/866,https://github.com/AXDOOMER,11,https://github.com/chocolate-doom/chocolate-doom/pull/866#issuecomment-285157174,"I've created this PR from the patch posted in issue #795.
A bit of a summary (partially covered in the issue's discussion):

This modifies the Linux and SDL drivers. The BSD and (currently-disabled) WIN32 drivers are untouched. I'm not sure about this, but doing direct I/O writes (as done in the OPL drivers) might work better for at least one of these drivers (although not on newer Windows setups).
A short description of the change: A new square wave is started when a different value (frequency) is read from the PC sound data, otherwise the current square wave (if any) is still being continuously generated.

While the issue's discussion already has a few sound recordings, it'll still be useful if anybody can make a recording from Vanilla Doom under DOS.
Note that this should be done under real DOS, not DOSBox (which currently doesn't faithfully recreate the sounds as fixed here).
Also, while using NTVDM or DOSEMU is a possibility, I found out that booting real DOS (even FreeDOS) instead might be more reliable. This is the case on non-vintage hardware, though, which may also have an impact.","It's recorded under latest FreeDOS 1.2, without any noise reduction (no need to do this). I've only cutted it a bit by removing pauses. So, is it good enough?

Thank you for your recording. It sounds like the PC speaker under MS-DOS or Windows 9x as I remember, so it's fine.  Personally, I don't think there is a difference between MS-DOS, FreeDOS and Windows 9x.
If there is a difference, it may be small. The current PC speaker emulation sounds really different from the real PC speaker and this patch greatly improves its accuracy, resulting in something that's more faithful and authentic.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,866,2017-02-17T12:12:52Z,,2019-11-17T22:04:56Z,OPEN,False,18,18,2,https://github.com/NY00123,pcsound: Partial fix for #795,1,"['sfx', 'accuracy']",https://github.com/chocolate-doom/chocolate-doom/pull/866,https://github.com/NY00123,12,https://github.com/chocolate-doom/chocolate-doom/pull/866#issuecomment-285173411,"I've created this PR from the patch posted in issue #795.
A bit of a summary (partially covered in the issue's discussion):

This modifies the Linux and SDL drivers. The BSD and (currently-disabled) WIN32 drivers are untouched. I'm not sure about this, but doing direct I/O writes (as done in the OPL drivers) might work better for at least one of these drivers (although not on newer Windows setups).
A short description of the change: A new square wave is started when a different value (frequency) is read from the PC sound data, otherwise the current square wave (if any) is still being continuously generated.

While the issue's discussion already has a few sound recordings, it'll still be useful if anybody can make a recording from Vanilla Doom under DOS.
Note that this should be done under real DOS, not DOSBox (which currently doesn't faithfully recreate the sounds as fixed here).
Also, while using NTVDM or DOSEMU is a possibility, I found out that booting real DOS (even FreeDOS) instead might be more reliable. This is the case on non-vintage hardware, though, which may also have an impact.","@JNechaevsky No need to hurry as much!
It sounds quite good, and there's virtually no noise! Has this been done with your mic., or the sound was redirected to an actual sound card or other such device? Either way, I think it's spot on.
My recording from the patched Chocolate Doom may again have these additional low frequencies. Removing them with some High-Pass Filter (say by using Audacity with an appropriate plug-in) may get something a bit closer, but for now my code changes may be sufficient.
@AXDOOMER I think I've spotted a few differences again, while running Vanilla Doom under DOSEMU (using an adapted FreeDOS installation). It seems I've gotten (somewhat) more authentic output by booting FreeDOS from USB, though.
@AXDOOMER @JNechaevsky Installing DOS to a USB drive: I've used UNetBootin (tested on Ubuntu 14.04) to install some version of FreeDOS which it offers for me (1.0 to be specific). The drive may have to be formatted first, and the relevant partition should be flagged as bootable.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,866,2017-02-17T12:12:52Z,,2019-11-17T22:04:56Z,OPEN,False,18,18,2,https://github.com/NY00123,pcsound: Partial fix for #795,1,"['sfx', 'accuracy']",https://github.com/chocolate-doom/chocolate-doom/pull/866,https://github.com/JNechaevsky,13,https://github.com/chocolate-doom/chocolate-doom/pull/866#issuecomment-285183562,"I've created this PR from the patch posted in issue #795.
A bit of a summary (partially covered in the issue's discussion):

This modifies the Linux and SDL drivers. The BSD and (currently-disabled) WIN32 drivers are untouched. I'm not sure about this, but doing direct I/O writes (as done in the OPL drivers) might work better for at least one of these drivers (although not on newer Windows setups).
A short description of the change: A new square wave is started when a different value (frequency) is read from the PC sound data, otherwise the current square wave (if any) is still being continuously generated.

While the issue's discussion already has a few sound recordings, it'll still be useful if anybody can make a recording from Vanilla Doom under DOS.
Note that this should be done under real DOS, not DOSBox (which currently doesn't faithfully recreate the sounds as fixed here).
Also, while using NTVDM or DOSEMU is a possibility, I found out that booting real DOS (even FreeDOS) instead might be more reliable. This is the case on non-vintage hardware, though, which may also have an impact.","@NY00123, it's an air protection. Very specific, very funny, very cheap and very effective! 💃
Here it is, a pair of nylon socks: http://i.imgur.com/g5dTOh9.png
I have no problems with making FreeDOS USB stick, only with MS-DOS. But yeah, UNetBootin is a good thing AFAIK, especially for Linux distros.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,866,2017-02-17T12:12:52Z,,2019-11-17T22:04:56Z,OPEN,False,18,18,2,https://github.com/NY00123,pcsound: Partial fix for #795,1,"['sfx', 'accuracy']",https://github.com/chocolate-doom/chocolate-doom/pull/866,https://github.com/AXDOOMER,14,https://github.com/chocolate-doom/chocolate-doom/pull/866#issuecomment-285907128,"I've created this PR from the patch posted in issue #795.
A bit of a summary (partially covered in the issue's discussion):

This modifies the Linux and SDL drivers. The BSD and (currently-disabled) WIN32 drivers are untouched. I'm not sure about this, but doing direct I/O writes (as done in the OPL drivers) might work better for at least one of these drivers (although not on newer Windows setups).
A short description of the change: A new square wave is started when a different value (frequency) is read from the PC sound data, otherwise the current square wave (if any) is still being continuously generated.

While the issue's discussion already has a few sound recordings, it'll still be useful if anybody can make a recording from Vanilla Doom under DOS.
Note that this should be done under real DOS, not DOSBox (which currently doesn't faithfully recreate the sounds as fixed here).
Also, while using NTVDM or DOSEMU is a possibility, I found out that booting real DOS (even FreeDOS) instead might be more reliable. This is the case on non-vintage hardware, though, which may also have an impact.","If I do something like this, do you think it will work or I may break something?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,866,2017-02-17T12:12:52Z,,2019-11-17T22:04:56Z,OPEN,False,18,18,2,https://github.com/NY00123,pcsound: Partial fix for #795,1,"['sfx', 'accuracy']",https://github.com/chocolate-doom/chocolate-doom/pull/866,https://github.com/linguica,15,https://github.com/chocolate-doom/chocolate-doom/pull/866#issuecomment-285912382,"I've created this PR from the patch posted in issue #795.
A bit of a summary (partially covered in the issue's discussion):

This modifies the Linux and SDL drivers. The BSD and (currently-disabled) WIN32 drivers are untouched. I'm not sure about this, but doing direct I/O writes (as done in the OPL drivers) might work better for at least one of these drivers (although not on newer Windows setups).
A short description of the change: A new square wave is started when a different value (frequency) is read from the PC sound data, otherwise the current square wave (if any) is still being continuously generated.

While the issue's discussion already has a few sound recordings, it'll still be useful if anybody can make a recording from Vanilla Doom under DOS.
Note that this should be done under real DOS, not DOSBox (which currently doesn't faithfully recreate the sounds as fixed here).
Also, while using NTVDM or DOSEMU is a possibility, I found out that booting real DOS (even FreeDOS) instead might be more reliable. This is the case on non-vintage hardware, though, which may also have an impact.","That seems like a bad idea, I am pretty sure PC case speakers operate at a significantly higher voltage and impedance than ""normal"" aux-cord audio.
…
Sent from my iPhone
 On Mar 11, 2017, at 2:58 PM, Alexandre-Xavier Labonté-Lamoureux ***@***.***> wrote:

 If I do something like this, do you think it will work or I may break something?


 —
 You are receiving this because you are subscribed to this thread.
 Reply to this email directly, view it on GitHub, or mute the thread.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,866,2017-02-17T12:12:52Z,,2019-11-17T22:04:56Z,OPEN,False,18,18,2,https://github.com/NY00123,pcsound: Partial fix for #795,1,"['sfx', 'accuracy']",https://github.com/chocolate-doom/chocolate-doom/pull/866,https://github.com/NY00123,16,https://github.com/chocolate-doom/chocolate-doom/pull/866#issuecomment-287172613,"I've created this PR from the patch posted in issue #795.
A bit of a summary (partially covered in the issue's discussion):

This modifies the Linux and SDL drivers. The BSD and (currently-disabled) WIN32 drivers are untouched. I'm not sure about this, but doing direct I/O writes (as done in the OPL drivers) might work better for at least one of these drivers (although not on newer Windows setups).
A short description of the change: A new square wave is started when a different value (frequency) is read from the PC sound data, otherwise the current square wave (if any) is still being continuously generated.

While the issue's discussion already has a few sound recordings, it'll still be useful if anybody can make a recording from Vanilla Doom under DOS.
Note that this should be done under real DOS, not DOSBox (which currently doesn't faithfully recreate the sounds as fixed here).
Also, while using NTVDM or DOSEMU is a possibility, I found out that booting real DOS (even FreeDOS) instead might be more reliable. This is the case on non-vintage hardware, though, which may also have an impact.","Mainly for reference, I've applied a rough high-pass filter to the patched Chocolate Doom output, with a cut-off frequency of 1000Hz.
The additional sound file is available from the same link as beforehand: https://www.dropbox.com/sh/ccqbf6kfle46w2h/AACCeDUDH0cLRcQOB24PQrN7a?dl=0
It's still not exactly the same as actual PC Speaker output, but this may be a hint.
The filter is based on this: https://en.wikipedia.org/wiki/High-pass_filter#Discrete-time_realization
To summarize: y_n = alpha*(y_{n-1}+x_n-x_{n-1}), where alpha is 1/(2pi*f_c/f+1). In my case, f == 44100Hz and f_c == 1000Hz.
I don't think such a filter should be added to this pull-request, though. (It's also not necessarily clear what's the ""right"" filter, if even a single one may be sufficient.)
@JNechaevsky (about the microphone): Wow, looks like a great filter of its own!",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,866,2017-02-17T12:12:52Z,,2019-11-17T22:04:56Z,OPEN,False,18,18,2,https://github.com/NY00123,pcsound: Partial fix for #795,1,"['sfx', 'accuracy']",https://github.com/chocolate-doom/chocolate-doom/pull/866,https://github.com/AXDOOMER,17,https://github.com/chocolate-doom/chocolate-doom/pull/866#issuecomment-287584940,"I've created this PR from the patch posted in issue #795.
A bit of a summary (partially covered in the issue's discussion):

This modifies the Linux and SDL drivers. The BSD and (currently-disabled) WIN32 drivers are untouched. I'm not sure about this, but doing direct I/O writes (as done in the OPL drivers) might work better for at least one of these drivers (although not on newer Windows setups).
A short description of the change: A new square wave is started when a different value (frequency) is read from the PC sound data, otherwise the current square wave (if any) is still being continuously generated.

While the issue's discussion already has a few sound recordings, it'll still be useful if anybody can make a recording from Vanilla Doom under DOS.
Note that this should be done under real DOS, not DOSBox (which currently doesn't faithfully recreate the sounds as fixed here).
Also, while using NTVDM or DOSEMU is a possibility, I found out that booting real DOS (even FreeDOS) instead might be more reliable. This is the case on non-vintage hardware, though, which may also have an impact.","I recorded this in Windows 98's DOS. I've put my webcam mic just in front of my PC speaker. (without anything between both)
http://www.mediafire.com/file/acz8xdndg2mr81b/demo1_pcspeaker.ogg
Sounds exactly like @JNechaevsky's FreeDOS recording when I compare both. Ends up my Linux native PC speaker recording was very different from what it should have sounded like in DOS.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,866,2017-02-17T12:12:52Z,,2019-11-17T22:04:56Z,OPEN,False,18,18,2,https://github.com/NY00123,pcsound: Partial fix for #795,1,"['sfx', 'accuracy']",https://github.com/chocolate-doom/chocolate-doom/pull/866,https://github.com/NY00123,18,https://github.com/chocolate-doom/chocolate-doom/pull/866#issuecomment-551861362,"I've created this PR from the patch posted in issue #795.
A bit of a summary (partially covered in the issue's discussion):

This modifies the Linux and SDL drivers. The BSD and (currently-disabled) WIN32 drivers are untouched. I'm not sure about this, but doing direct I/O writes (as done in the OPL drivers) might work better for at least one of these drivers (although not on newer Windows setups).
A short description of the change: A new square wave is started when a different value (frequency) is read from the PC sound data, otherwise the current square wave (if any) is still being continuously generated.

While the issue's discussion already has a few sound recordings, it'll still be useful if anybody can make a recording from Vanilla Doom under DOS.
Note that this should be done under real DOS, not DOSBox (which currently doesn't faithfully recreate the sounds as fixed here).
Also, while using NTVDM or DOSEMU is a possibility, I found out that booting real DOS (even FreeDOS) instead might be more reliable. This is the case on non-vintage hardware, though, which may also have an impact.","So, I've recently been reminded of this PR, and wanted to see what's up with it.
I've forced-pushed my change after rebasing to master about 20 minutes earlier; Been easy, since only the call to SDL_CreateThread had changed, due to the migration to SDL 2.0.
It still sounds as I'd expect, before and after applying the patch.
In case you hear nothing, this might be a consequence of issue #1184.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,869,2017-02-20T22:13:02Z,2017-02-20T22:23:52Z,2017-02-20T22:23:55Z,MERGED,True,3,0,1,https://github.com/linguica,Add flag to activate vsync.,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/869,https://github.com/linguica,1,https://github.com/chocolate-doom/chocolate-doom/pull/869,"The current SDL2 build demonstrates screen tearing, which wasn't present on the original DOS version. Turning on vsync eliminates this.","The current SDL2 build demonstrates screen tearing, which wasn't present on the original DOS version. Turning on vsync eliminates this.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,869,2017-02-20T22:13:02Z,2017-02-20T22:23:52Z,2017-02-20T22:23:55Z,MERGED,True,3,0,1,https://github.com/linguica,Add flag to activate vsync.,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/869,https://github.com/jmtd,2,https://github.com/chocolate-doom/chocolate-doom/pull/869#issuecomment-281195690,"The current SDL2 build demonstrates screen tearing, which wasn't present on the original DOS version. Turning on vsync eliminates this.",Fixes #868,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,869,2017-02-20T22:13:02Z,2017-02-20T22:23:52Z,2017-02-20T22:23:55Z,MERGED,True,3,0,1,https://github.com/linguica,Add flag to activate vsync.,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/869,https://github.com/jmtd,3,https://github.com/chocolate-doom/chocolate-doom/pull/869#issuecomment-281195977,"The current SDL2 build demonstrates screen tearing, which wasn't present on the original DOS version. Turning on vsync eliminates this.",Thanks!,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,872,2017-02-27T00:18:39Z,,2020-06-04T13:39:32Z,OPEN,False,229,8,1,https://github.com/scfinniss,Alternate Steam Libraries,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/872,https://github.com/scfinniss,1,https://github.com/chocolate-doom/chocolate-doom/pull/872,"I noticed while working on the Watcom C stuff that Chocolate Doom was not locating my IWADs.
What I've done here is scrape the alternative library locations from Steam's libraryfolders.vdf file and use them to add more search paths. The file itself is mostly key value pairs with a header. Here is the file from my setup for reference.
""LibraryFolders""
{
	""TimeNextStatsReport""		""1488133041""
	""ContentStatsID""		""198096677914456296""
	""1""		""D:\\Steam""
	""2""		""E:\\Steam""
	""3""		""C:\\Steam""
}

I specifically ignore LibraryFolders, thereafter I assume every second string is a path, as long as the preceding key is numeric. I make no real effort to understand the structure of the file beyond this.
It's important to note that the unlisted C:\Program Files (x86)\Steam is also a library. Presumably Steam always considers its install path a library.
I believe this may resolve issue #482 (excluding Mac and Linux support).","I noticed while working on the Watcom C stuff that Chocolate Doom was not locating my IWADs.
What I've done here is scrape the alternative library locations from Steam's libraryfolders.vdf file and use them to add more search paths. The file itself is mostly key value pairs with a header. Here is the file from my setup for reference.
""LibraryFolders""
{
	""TimeNextStatsReport""		""1488133041""
	""ContentStatsID""		""198096677914456296""
	""1""		""D:\\Steam""
	""2""		""E:\\Steam""
	""3""		""C:\\Steam""
}

I specifically ignore LibraryFolders, thereafter I assume every second string is a path, as long as the preceding key is numeric. I make no real effort to understand the structure of the file beyond this.
It's important to note that the unlisted C:\Program Files (x86)\Steam is also a library. Presumably Steam always considers its install path a library.
I believe this may resolve issue #482 (excluding Mac and Linux support).",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,872,2017-02-27T00:18:39Z,,2020-06-04T13:39:32Z,OPEN,False,229,8,1,https://github.com/scfinniss,Alternate Steam Libraries,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/872,https://github.com/scfinniss,2,https://github.com/chocolate-doom/chocolate-doom/pull/872#issuecomment-282894641,"I noticed while working on the Watcom C stuff that Chocolate Doom was not locating my IWADs.
What I've done here is scrape the alternative library locations from Steam's libraryfolders.vdf file and use them to add more search paths. The file itself is mostly key value pairs with a header. Here is the file from my setup for reference.
""LibraryFolders""
{
	""TimeNextStatsReport""		""1488133041""
	""ContentStatsID""		""198096677914456296""
	""1""		""D:\\Steam""
	""2""		""E:\\Steam""
	""3""		""C:\\Steam""
}

I specifically ignore LibraryFolders, thereafter I assume every second string is a path, as long as the preceding key is numeric. I make no real effort to understand the structure of the file beyond this.
It's important to note that the unlisted C:\Program Files (x86)\Steam is also a library. Presumably Steam always considers its install path a library.
I believe this may resolve issue #482 (excluding Mac and Linux support).","The main change here is restructuring based on the feedback.
Changes in CheckSteamEdition have been mostly removed, replaced with one call to CheckSteamLibraries.
Then CheckSteamLibrary was replaced with

GetSteamNextLibPath
IsValidSteamLibKey
GetNextSteamLibToken
This hopefully makes the logic easier to follow.

Instances of long replaced with size_t, hopefully I've not introduced any style issues this time.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,872,2017-02-27T00:18:39Z,,2020-06-04T13:39:32Z,OPEN,False,229,8,1,https://github.com/scfinniss,Alternate Steam Libraries,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/872,https://github.com/scfinniss,3,https://github.com/chocolate-doom/chocolate-doom/pull/872#issuecomment-283067218,"I noticed while working on the Watcom C stuff that Chocolate Doom was not locating my IWADs.
What I've done here is scrape the alternative library locations from Steam's libraryfolders.vdf file and use them to add more search paths. The file itself is mostly key value pairs with a header. Here is the file from my setup for reference.
""LibraryFolders""
{
	""TimeNextStatsReport""		""1488133041""
	""ContentStatsID""		""198096677914456296""
	""1""		""D:\\Steam""
	""2""		""E:\\Steam""
	""3""		""C:\\Steam""
}

I specifically ignore LibraryFolders, thereafter I assume every second string is a path, as long as the preceding key is numeric. I make no real effort to understand the structure of the file beyond this.
It's important to note that the unlisted C:\Program Files (x86)\Steam is also a library. Presumably Steam always considers its install path a library.
I believe this may resolve issue #482 (excluding Mac and Linux support).","I'm going to use the reference from Valve to make some changes to how I parse the libraryfolders.vdf.
Is it worth moving this logic to a new file? (eg m_steam.h, m_steam.c)",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,872,2017-02-27T00:18:39Z,,2020-06-04T13:39:32Z,OPEN,False,229,8,1,https://github.com/scfinniss,Alternate Steam Libraries,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/872,https://github.com/scfinniss,4,https://github.com/chocolate-doom/chocolate-doom/pull/872#issuecomment-329976531,"I noticed while working on the Watcom C stuff that Chocolate Doom was not locating my IWADs.
What I've done here is scrape the alternative library locations from Steam's libraryfolders.vdf file and use them to add more search paths. The file itself is mostly key value pairs with a header. Here is the file from my setup for reference.
""LibraryFolders""
{
	""TimeNextStatsReport""		""1488133041""
	""ContentStatsID""		""198096677914456296""
	""1""		""D:\\Steam""
	""2""		""E:\\Steam""
	""3""		""C:\\Steam""
}

I specifically ignore LibraryFolders, thereafter I assume every second string is a path, as long as the preceding key is numeric. I make no real effort to understand the structure of the file beyond this.
It's important to note that the unlisted C:\Program Files (x86)\Steam is also a library. Presumably Steam always considers its install path a library.
I believe this may resolve issue #482 (excluding Mac and Linux support).","I've addressed the reviews, and also made the tokenizer understand VDF more completely.
The tokenizer now handles tokens that are not always quoted, as well as ones with escaped characters.
To make the parsing simpler I've avoided the issue of subkeys completely. I ignore closing braces and treat the opening ones as part of a regular unquoted token.
So
""LibraryFolders""
{
	""TimeNextStatsReport""		""1505818818""
	""ContentStatsID""		""198096677914456296""
	""1""		""D:\\Steam""
	""2""		""E:\\Steam""
	""3""		""C:\\Steam""
}

Get tokenized to
""LibraryFolders""
{
""TimeNextStatsReport""
""1505818818""
""ContentStatsID""
""198096677914456296""
""1""
""D:\\Steam""
""2""
""E:\\Steam""
""3""
""C:\\Steam""

Every odd token is a key, every even token is a value.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,872,2017-02-27T00:18:39Z,,2020-06-04T13:39:32Z,OPEN,False,229,8,1,https://github.com/scfinniss,Alternate Steam Libraries,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/872,https://github.com/scfinniss,5,https://github.com/chocolate-doom/chocolate-doom/pull/872#issuecomment-330004791,"I noticed while working on the Watcom C stuff that Chocolate Doom was not locating my IWADs.
What I've done here is scrape the alternative library locations from Steam's libraryfolders.vdf file and use them to add more search paths. The file itself is mostly key value pairs with a header. Here is the file from my setup for reference.
""LibraryFolders""
{
	""TimeNextStatsReport""		""1488133041""
	""ContentStatsID""		""198096677914456296""
	""1""		""D:\\Steam""
	""2""		""E:\\Steam""
	""3""		""C:\\Steam""
}

I specifically ignore LibraryFolders, thereafter I assume every second string is a path, as long as the preceding key is numeric. I make no real effort to understand the structure of the file beyond this.
It's important to note that the unlisted C:\Program Files (x86)\Steam is also a library. Presumably Steam always considers its install path a library.
I believe this may resolve issue #482 (excluding Mac and Linux support).","Thank you
I'm not disheartened, I appreciate the feedback and the time you've spent on it. I'm quite happy to improve this code so it better fits the Chocolate Doom codebase.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,872,2017-02-27T00:18:39Z,,2020-06-04T13:39:32Z,OPEN,False,229,8,1,https://github.com/scfinniss,Alternate Steam Libraries,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/872,https://github.com/mfrancis95,6,https://github.com/chocolate-doom/chocolate-doom/pull/872#issuecomment-638503421,"I noticed while working on the Watcom C stuff that Chocolate Doom was not locating my IWADs.
What I've done here is scrape the alternative library locations from Steam's libraryfolders.vdf file and use them to add more search paths. The file itself is mostly key value pairs with a header. Here is the file from my setup for reference.
""LibraryFolders""
{
	""TimeNextStatsReport""		""1488133041""
	""ContentStatsID""		""198096677914456296""
	""1""		""D:\\Steam""
	""2""		""E:\\Steam""
	""3""		""C:\\Steam""
}

I specifically ignore LibraryFolders, thereafter I assume every second string is a path, as long as the preceding key is numeric. I make no real effort to understand the structure of the file beyond this.
It's important to note that the unlisted C:\Program Files (x86)\Steam is also a library. Presumably Steam always considers its install path a library.
I believe this may resolve issue #482 (excluding Mac and Linux support).","@scfinniss any updates?
Otherwise I don't think it's good to keep a nearly 3 year-old PR up.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,872,2017-02-27T00:18:39Z,,2020-06-04T13:39:32Z,OPEN,False,229,8,1,https://github.com/scfinniss,Alternate Steam Libraries,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/872,https://github.com/scfinniss,7,https://github.com/chocolate-doom/chocolate-doom/pull/872#issuecomment-638538765,"I noticed while working on the Watcom C stuff that Chocolate Doom was not locating my IWADs.
What I've done here is scrape the alternative library locations from Steam's libraryfolders.vdf file and use them to add more search paths. The file itself is mostly key value pairs with a header. Here is the file from my setup for reference.
""LibraryFolders""
{
	""TimeNextStatsReport""		""1488133041""
	""ContentStatsID""		""198096677914456296""
	""1""		""D:\\Steam""
	""2""		""E:\\Steam""
	""3""		""C:\\Steam""
}

I specifically ignore LibraryFolders, thereafter I assume every second string is a path, as long as the preceding key is numeric. I make no real effort to understand the structure of the file beyond this.
It's important to note that the unlisted C:\Program Files (x86)\Steam is also a library. Presumably Steam always considers its install path a library.
I believe this may resolve issue #482 (excluding Mac and Linux support).","Real life got between me and finishing this, and I guess I forgot about it after awhile.
I'm not sure how much Chocolate Doom has changed since I worked on this, but I don't mind looking into it again if there's still interest in this feature?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,872,2017-02-27T00:18:39Z,,2020-06-04T13:39:32Z,OPEN,False,229,8,1,https://github.com/scfinniss,Alternate Steam Libraries,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/872,https://github.com/mfrancis95,8,https://github.com/chocolate-doom/chocolate-doom/pull/872#issuecomment-638853798,"I noticed while working on the Watcom C stuff that Chocolate Doom was not locating my IWADs.
What I've done here is scrape the alternative library locations from Steam's libraryfolders.vdf file and use them to add more search paths. The file itself is mostly key value pairs with a header. Here is the file from my setup for reference.
""LibraryFolders""
{
	""TimeNextStatsReport""		""1488133041""
	""ContentStatsID""		""198096677914456296""
	""1""		""D:\\Steam""
	""2""		""E:\\Steam""
	""3""		""C:\\Steam""
}

I specifically ignore LibraryFolders, thereafter I assume every second string is a path, as long as the preceding key is numeric. I make no real effort to understand the structure of the file beyond this.
It's important to note that the unlisted C:\Program Files (x86)\Steam is also a library. Presumably Steam always considers its install path a library.
I believe this may resolve issue #482 (excluding Mac and Linux support).","There have always been efforts to improve WAD-locating, even in recent times. I would say it's still worth it, but it just happens to be a fairly sizable undertaking.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,879,2017-03-06T02:52:20Z,2017-03-17T22:21:09Z,2017-03-17T23:02:26Z,MERGED,True,22,16,6,https://github.com/chungy,bash-completion: Use autoconf substitutions for the chocolate name,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/879,https://github.com/chungy,1,https://github.com/chocolate-doom/chocolate-doom/pull/879,"Introduce a new PROGRAM_SPREFIX variable in configure.ac, which is
basically identical to PROGRAM_PREFIX but without the trailing hyphen.
PROGRAM_PREFIX was also redefined so that it bases its name from
PACKAGE_SHORTNAME, reducing the number of hardcoded chocolates in the
source.
I tried to avoid a new autoconf variable and just have a hyphen-less version in configure.ac instead, editing all the other files to follow suit, but automake really doesn't like constructs like @PROGRAM_PREFIX@-doom.
This is an effort to resolve fabiangreffrath#158","Introduce a new PROGRAM_SPREFIX variable in configure.ac, which is
basically identical to PROGRAM_PREFIX but without the trailing hyphen.
PROGRAM_PREFIX was also redefined so that it bases its name from
PACKAGE_SHORTNAME, reducing the number of hardcoded chocolates in the
source.
I tried to avoid a new autoconf variable and just have a hyphen-less version in configure.ac instead, editing all the other files to follow suit, but automake really doesn't like constructs like @PROGRAM_PREFIX@-doom.
This is an effort to resolve fabiangreffrath#158",True,{'THUMBS_UP': ['https://github.com/fx02']}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,879,2017-03-06T02:52:20Z,2017-03-17T22:21:09Z,2017-03-17T23:02:26Z,MERGED,True,22,16,6,https://github.com/chungy,bash-completion: Use autoconf substitutions for the chocolate name,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/879,https://github.com/chungy,2,https://github.com/chocolate-doom/chocolate-doom/pull/879#issuecomment-286035390,"Introduce a new PROGRAM_SPREFIX variable in configure.ac, which is
basically identical to PROGRAM_PREFIX but without the trailing hyphen.
PROGRAM_PREFIX was also redefined so that it bases its name from
PACKAGE_SHORTNAME, reducing the number of hardcoded chocolates in the
source.
I tried to avoid a new autoconf variable and just have a hyphen-less version in configure.ac instead, editing all the other files to follow suit, but automake really doesn't like constructs like @PROGRAM_PREFIX@-doom.
This is an effort to resolve fabiangreffrath#158","Are there any comments for this?
I sent this change as a pull request because it involved adding a new variable (PROGRAM_SPREFIX) in configure.ac that is used only for the bash-completion scripts, and I'm not sure how that goes over for @fragglet -- I couldn't find an alternative to doing it that way.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,879,2017-03-06T02:52:20Z,2017-03-17T22:21:09Z,2017-03-17T23:02:26Z,MERGED,True,22,16,6,https://github.com/chungy,bash-completion: Use autoconf substitutions for the chocolate name,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/879,https://github.com/jmtd,3,https://github.com/chocolate-doom/chocolate-doom/pull/879#issuecomment-286081348,"Introduce a new PROGRAM_SPREFIX variable in configure.ac, which is
basically identical to PROGRAM_PREFIX but without the trailing hyphen.
PROGRAM_PREFIX was also redefined so that it bases its name from
PACKAGE_SHORTNAME, reducing the number of hardcoded chocolates in the
source.
I tried to avoid a new autoconf variable and just have a hyphen-less version in configure.ac instead, editing all the other files to follow suit, but automake really doesn't like constructs like @PROGRAM_PREFIX@-doom.
This is an effort to resolve fabiangreffrath#158","Results on OS X:
$ ./autogen.sh
...
$ make
/Applications/Xcode.app/Contents/Developer/usr/bin/make  all-recursive
Making all in textscreen
Making all in .
make[3]: Nothing to be done for `all-am'.
Making all in examples
make[3]: Nothing to be done for `all'.
Making all in opl
Making all in .
make[3]: Nothing to be done for `all-am'.
Making all in examples
make[3]: Nothing to be done for `all'.
Making all in pcsound
make[2]: Nothing to be done for `all'.
Making all in data
make[2]: Circular doom.png <- doom.png dependency dropped.
cp ../data/doom.png doom.png
cp: ../data/doom.png: No such file or directory
make[2]: *** [doom.png] Error 1
make[1]: *** [all-recursive] Error 1
make: *** [all] Error 2",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,879,2017-03-06T02:52:20Z,2017-03-17T22:21:09Z,2017-03-17T23:02:26Z,MERGED,True,22,16,6,https://github.com/chungy,bash-completion: Use autoconf substitutions for the chocolate name,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/879,https://github.com/jmtd,4,https://github.com/chocolate-doom/chocolate-doom/pull/879#issuecomment-287032083,"Introduce a new PROGRAM_SPREFIX variable in configure.ac, which is
basically identical to PROGRAM_PREFIX but without the trailing hyphen.
PROGRAM_PREFIX was also redefined so that it bases its name from
PACKAGE_SHORTNAME, reducing the number of hardcoded chocolates in the
source.
I tried to avoid a new autoconf variable and just have a hyphen-less version in configure.ac instead, editing all the other files to follow suit, but automake really doesn't like constructs like @PROGRAM_PREFIX@-doom.
This is an effort to resolve fabiangreffrath#158","Why is the merge-base for this ""master"" and not sdl2-branch?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,879,2017-03-06T02:52:20Z,2017-03-17T22:21:09Z,2017-03-17T23:02:26Z,MERGED,True,22,16,6,https://github.com/chungy,bash-completion: Use autoconf substitutions for the chocolate name,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/879,https://github.com/chungy,5,https://github.com/chocolate-doom/chocolate-doom/pull/879#issuecomment-287186276,"Introduce a new PROGRAM_SPREFIX variable in configure.ac, which is
basically identical to PROGRAM_PREFIX but without the trailing hyphen.
PROGRAM_PREFIX was also redefined so that it bases its name from
PACKAGE_SHORTNAME, reducing the number of hardcoded chocolates in the
source.
I tried to avoid a new autoconf variable and just have a hyphen-less version in configure.ac instead, editing all the other files to follow suit, but automake really doesn't like constructs like @PROGRAM_PREFIX@-doom.
This is an effort to resolve fabiangreffrath#158","Most of the intent is that Crispy Doom would get fixed automatically with this in the tree, which is currently based on master too.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,879,2017-03-06T02:52:20Z,2017-03-17T22:21:09Z,2017-03-17T23:02:26Z,MERGED,True,22,16,6,https://github.com/chungy,bash-completion: Use autoconf substitutions for the chocolate name,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/879,https://github.com/jmtd,6,https://github.com/chocolate-doom/chocolate-doom/pull/879#issuecomment-287209974,"Introduce a new PROGRAM_SPREFIX variable in configure.ac, which is
basically identical to PROGRAM_PREFIX but without the trailing hyphen.
PROGRAM_PREFIX was also redefined so that it bases its name from
PACKAGE_SHORTNAME, reducing the number of hardcoded chocolates in the
source.
I tried to avoid a new autoconf variable and just have a hyphen-less version in configure.ac instead, editing all the other files to follow suit, but automake really doesn't like constructs like @PROGRAM_PREFIX@-doom.
This is an effort to resolve fabiangreffrath#158",OK fair enough. And I think I read somewhere fraggle does expect to make another release from 2.x. I'm totally clueless as to why it's broken on OS X though.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,879,2017-03-06T02:52:20Z,2017-03-17T22:21:09Z,2017-03-17T23:02:26Z,MERGED,True,22,16,6,https://github.com/chungy,bash-completion: Use autoconf substitutions for the chocolate name,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/879,https://github.com/chungy,7,https://github.com/chocolate-doom/chocolate-doom/pull/879#issuecomment-287237938,"Introduce a new PROGRAM_SPREFIX variable in configure.ac, which is
basically identical to PROGRAM_PREFIX but without the trailing hyphen.
PROGRAM_PREFIX was also redefined so that it bases its name from
PACKAGE_SHORTNAME, reducing the number of hardcoded chocolates in the
source.
I tried to avoid a new autoconf variable and just have a hyphen-less version in configure.ac instead, editing all the other files to follow suit, but automake really doesn't like constructs like @PROGRAM_PREFIX@-doom.
This is an effort to resolve fabiangreffrath#158","I don't have a Mac myself so I can't really investigate.  Looking at the commit diff, I don't even have any guesses!",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,879,2017-03-06T02:52:20Z,2017-03-17T22:21:09Z,2017-03-17T23:02:26Z,MERGED,True,22,16,6,https://github.com/chungy,bash-completion: Use autoconf substitutions for the chocolate name,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/879,https://github.com/jmtd,8,https://github.com/chocolate-doom/chocolate-doom/pull/879#issuecomment-287311944,"Introduce a new PROGRAM_SPREFIX variable in configure.ac, which is
basically identical to PROGRAM_PREFIX but without the trailing hyphen.
PROGRAM_PREFIX was also redefined so that it bases its name from
PACKAGE_SHORTNAME, reducing the number of hardcoded chocolates in the
source.
I tried to avoid a new autoconf variable and just have a hyphen-less version in configure.ac instead, editing all the other files to follow suit, but automake really doesn't like constructs like @PROGRAM_PREFIX@-doom.
This is an effort to resolve fabiangreffrath#158","I don't have a Mac myself so I can't really investigate. Looking at the commit diff, I don't even have any guesses!

I appreciate that. But I hope you can appreciate we can't merge this until it's fixed on OS X. I will do my best to try and fix this and at the very least share as much debugging info as I can.
I don't think it is likely anything specifically OS X-y that is broken; the build I'm doing is in a terminal using normal GNU tools, not Xcode or anything -- autoreconf (GNU Autoconf) 2.69, automake (GNU automake) 1.15.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,879,2017-03-06T02:52:20Z,2017-03-17T22:21:09Z,2017-03-17T23:02:26Z,MERGED,True,22,16,6,https://github.com/chungy,bash-completion: Use autoconf substitutions for the chocolate name,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/879,https://github.com/jmtd,9,https://github.com/chocolate-doom/chocolate-doom/pull/879#issuecomment-287314124,"Introduce a new PROGRAM_SPREFIX variable in configure.ac, which is
basically identical to PROGRAM_PREFIX but without the trailing hyphen.
PROGRAM_PREFIX was also redefined so that it bases its name from
PACKAGE_SHORTNAME, reducing the number of hardcoded chocolates in the
source.
I tried to avoid a new autoconf variable and just have a hyphen-less version in configure.ac instead, editing all the other files to follow suit, but automake really doesn't like constructs like @PROGRAM_PREFIX@-doom.
This is an effort to resolve fabiangreffrath#158","OK I don't hit this problem in a clean clone. So there's something in my normal work tree that is causing the problem.
Can I take a brief moment to comment that, as time goes on, my faith in autotools keeps going down?
I have two local uncommitted helper scripts I use to keep things tidy
my-clean.sh:
test -f Makefile && {
    make clean
    make distclean
}
rm -rf Makefile.in aclocal.m4 autom4te.cache/ autotools/ config.hin config.hin~ configure^

I must be missing some autofoo cruft in this clean script that is lingering and causing problems with your branch.
my-autogen.sh:
export CFLAGS=""$(pkg-config --cflags samplerate libpng)""
export LDFLAGS=""$(pkg-config --libs samplerate libpng)""
./autogen.sh

I guess in an ideal world I wouldn't need either of these. Also can I just rant for a minute on how .gitignore actively gets in your way of trying to clean up autofo cruft. ARGHH",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,879,2017-03-06T02:52:20Z,2017-03-17T22:21:09Z,2017-03-17T23:02:26Z,MERGED,True,22,16,6,https://github.com/chungy,bash-completion: Use autoconf substitutions for the chocolate name,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/879,https://github.com/chungy,10,https://github.com/chocolate-doom/chocolate-doom/pull/879#issuecomment-287316676,"Introduce a new PROGRAM_SPREFIX variable in configure.ac, which is
basically identical to PROGRAM_PREFIX but without the trailing hyphen.
PROGRAM_PREFIX was also redefined so that it bases its name from
PACKAGE_SHORTNAME, reducing the number of hardcoded chocolates in the
source.
I tried to avoid a new autoconf variable and just have a hyphen-less version in configure.ac instead, editing all the other files to follow suit, but automake really doesn't like constructs like @PROGRAM_PREFIX@-doom.
This is an effort to resolve fabiangreffrath#158","Glad you found the cause.

I have two local uncommitted helper scripts I use to keep things tidy
my-clean.sh:

I don't quite get the benefit of this over git clean :/

Also can I just rant for a minute on how .gitignore actively gets in your way of trying to clean up autofo cruft. ARGHH

git status --ignored, perhaps?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,879,2017-03-06T02:52:20Z,2017-03-17T22:21:09Z,2017-03-17T23:02:26Z,MERGED,True,22,16,6,https://github.com/chungy,bash-completion: Use autoconf substitutions for the chocolate name,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/879,https://github.com/jmtd,11,https://github.com/chocolate-doom/chocolate-doom/pull/879#issuecomment-287391830,"Introduce a new PROGRAM_SPREFIX variable in configure.ac, which is
basically identical to PROGRAM_PREFIX but without the trailing hyphen.
PROGRAM_PREFIX was also redefined so that it bases its name from
PACKAGE_SHORTNAME, reducing the number of hardcoded chocolates in the
source.
I tried to avoid a new autoconf variable and just have a hyphen-less version in configure.ac instead, editing all the other files to follow suit, but automake really doesn't like constructs like @PROGRAM_PREFIX@-doom.
This is an effort to resolve fabiangreffrath#158","I don't quite get the benefit of this over git clean :/

I wasn't aware of git clean (or I forgot about it), thanks. There's no benefit over it. But it's still a crutch to fix up autofoo failures.

git status --ignored, perhaps?

that's very useful, thanks -- I wasn't aware of that either.
The other crap in my my-autoconf.sh is not necessary on sdl2-branch anymore, it seems.
And in totally clean branches, your change seems fine. PEBKAC. Although my faith in autofoo is even more diminished now. Sorry for the noise.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,879,2017-03-06T02:52:20Z,2017-03-17T22:21:09Z,2017-03-17T23:02:26Z,MERGED,True,22,16,6,https://github.com/chungy,bash-completion: Use autoconf substitutions for the chocolate name,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/879,https://github.com/jmtd,12,https://github.com/chocolate-doom/chocolate-doom/pull/879#issuecomment-287392691,"Introduce a new PROGRAM_SPREFIX variable in configure.ac, which is
basically identical to PROGRAM_PREFIX but without the trailing hyphen.
PROGRAM_PREFIX was also redefined so that it bases its name from
PACKAGE_SHORTNAME, reducing the number of hardcoded chocolates in the
source.
I tried to avoid a new autoconf variable and just have a hyphen-less version in configure.ac instead, editing all the other files to follow suit, but automake really doesn't like constructs like @PROGRAM_PREFIX@-doom.
This is an effort to resolve fabiangreffrath#158","...or not:
$ git clean -xfd
$ ./autogen.sh
$ make
...
Making all in data
make[2]: Circular doom.png <- doom.png dependency dropped.
make[2]: Circular setup.png <- setup.png dependency dropped.
make[2]: Nothing to be done for `all'.
...
Making all in src
Makefile:1351: warning: overriding commands for target `doom.appdata.xml'
Makefile:786: warning: ignoring old commands for target `doom.appdata.xml'
Makefile:1354: warning: overriding commands for target `heretic.appdata.xml'
Makefile:792: warning: ignoring old commands for target `heretic.appdata.xml'
Makefile:1357: warning: overriding commands for target `hexen.appdata.xml'
Makefile:796: warning: ignoring old commands for target `hexen.appdata.xml'
Makefile:1360: warning: overriding commands for target `strife.appdata.xml'
Makefile:804: warning: ignoring old commands for target `strife.appdata.xml'
Makefile:1363: warning: overriding commands for target `doom.desktop'
Makefile:788: warning: ignoring old commands for target `doom.desktop'
Makefile:1366: warning: overriding commands for target `heretic.desktop'
Makefile:794: warning: ignoring old commands for target `heretic.desktop'
Makefile:1369: warning: overriding commands for target `hexen.desktop'
Makefile:798: warning: ignoring old commands for target `hexen.desktop'
Makefile:1372: warning: overriding commands for target `strife.desktop'
Makefile:806: warning: ignoring old commands for target `strife.desktop'
Makefile:1375: warning: overriding commands for target `doom-screensaver.desktop'
Makefile:790: warning: ignoring old commands for target `doom-screensaver.desktop'
...
Making all in setup
Makefile:661: warning: overriding commands for target `setup.desktop'
Makefile:385: warning: ignoring old commands for target `setup.desktop'
...
make[3]: Circular setup.desktop <- setup.desktop dependency dropped.
Makefile:1351: warning: overriding commands for target `doom.appdata.xml'
Makefile:786: warning: ignoring old commands for target `doom.appdata.xml'
Makefile:1354: warning: overriding commands for target `heretic.appdata.xml'
Makefile:792: warning: ignoring old commands for target `heretic.appdata.xml'
Makefile:1357: warning: overriding commands for target `hexen.appdata.xml'
Makefile:796: warning: ignoring old commands for target `hexen.appdata.xml'
Makefile:1360: warning: overriding commands for target `strife.appdata.xml'
Makefile:804: warning: ignoring old commands for target `strife.appdata.xml'
Makefile:1363: warning: overriding commands for target `doom.desktop'
Makefile:788: warning: ignoring old commands for target `doom.desktop'
Makefile:1366: warning: overriding commands for target `heretic.desktop'
Makefile:794: warning: ignoring old commands for target `heretic.desktop'
Makefile:1369: warning: overriding commands for target `hexen.desktop'
Makefile:798: warning: ignoring old commands for target `hexen.desktop'
Makefile:1372: warning: overriding commands for target `strife.desktop'
Makefile:806: warning: ignoring old commands for target `strife.desktop'
Makefile:1375: warning: overriding commands for target `doom-screensaver.desktop'
Makefile:790: warning: ignoring old commands for target `doom-screensaver.desktop'
...
rm: doom: is a directory
make[3]: *** [doom] Error 1",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,879,2017-03-06T02:52:20Z,2017-03-17T22:21:09Z,2017-03-17T23:02:26Z,MERGED,True,22,16,6,https://github.com/chungy,bash-completion: Use autoconf substitutions for the chocolate name,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/879,https://github.com/jmtd,13,https://github.com/chocolate-doom/chocolate-doom/pull/879#issuecomment-287424864,"Introduce a new PROGRAM_SPREFIX variable in configure.ac, which is
basically identical to PROGRAM_PREFIX but without the trailing hyphen.
PROGRAM_PREFIX was also redefined so that it bases its name from
PACKAGE_SHORTNAME, reducing the number of hardcoded chocolates in the
source.
I tried to avoid a new autoconf variable and just have a hyphen-less version in configure.ac instead, editing all the other files to follow suit, but automake really doesn't like constructs like @PROGRAM_PREFIX@-doom.
This is an effort to resolve fabiangreffrath#158",config.log.txt,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,879,2017-03-06T02:52:20Z,2017-03-17T22:21:09Z,2017-03-17T23:02:26Z,MERGED,True,22,16,6,https://github.com/chungy,bash-completion: Use autoconf substitutions for the chocolate name,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/879,https://github.com/jmtd,14,https://github.com/chocolate-doom/chocolate-doom/pull/879#issuecomment-287426202,"Introduce a new PROGRAM_SPREFIX variable in configure.ac, which is
basically identical to PROGRAM_PREFIX but without the trailing hyphen.
PROGRAM_PREFIX was also redefined so that it bases its name from
PACKAGE_SHORTNAME, reducing the number of hardcoded chocolates in the
source.
I tried to avoid a new autoconf variable and just have a hyphen-less version in configure.ac instead, editing all the other files to follow suit, but automake really doesn't like constructs like @PROGRAM_PREFIX@-doom.
This is an effort to resolve fabiangreffrath#158","I'm not particularly experienced in interpreting config.log files, but I see PACKAGE_NAME is correct, PACKAGE_PREFIX and PACKAGE_SPREFIX are empty. Is ""PROGRAM_PREFIX=${PACKAGE_SHORTNAME,}-"" a bash language construct or some autofoo thing? (It's not a valid bash substitution).",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,879,2017-03-06T02:52:20Z,2017-03-17T22:21:09Z,2017-03-17T23:02:26Z,MERGED,True,22,16,6,https://github.com/chungy,bash-completion: Use autoconf substitutions for the chocolate name,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/879,https://github.com/jmtd,15,https://github.com/chocolate-doom/chocolate-doom/pull/879#issuecomment-287427355,"Introduce a new PROGRAM_SPREFIX variable in configure.ac, which is
basically identical to PROGRAM_PREFIX but without the trailing hyphen.
PROGRAM_PREFIX was also redefined so that it bases its name from
PACKAGE_SHORTNAME, reducing the number of hardcoded chocolates in the
source.
I tried to avoid a new autoconf variable and just have a hyphen-less version in configure.ac instead, editing all the other files to follow suit, but automake really doesn't like constructs like @PROGRAM_PREFIX@-doom.
This is an effort to resolve fabiangreffrath#158","GNU bash, version 3.2.57(1)-release (x86_64-apple-darwin15)
is this a bash 3-vs-4 problem?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,879,2017-03-06T02:52:20Z,2017-03-17T22:21:09Z,2017-03-17T23:02:26Z,MERGED,True,22,16,6,https://github.com/chungy,bash-completion: Use autoconf substitutions for the chocolate name,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/879,https://github.com/chungy,16,https://github.com/chocolate-doom/chocolate-doom/pull/879#issuecomment-287428675,"Introduce a new PROGRAM_SPREFIX variable in configure.ac, which is
basically identical to PROGRAM_PREFIX but without the trailing hyphen.
PROGRAM_PREFIX was also redefined so that it bases its name from
PACKAGE_SHORTNAME, reducing the number of hardcoded chocolates in the
source.
I tried to avoid a new autoconf variable and just have a hyphen-less version in configure.ac instead, editing all the other files to follow suit, but automake really doesn't like constructs like @PROGRAM_PREFIX@-doom.
This is an effort to resolve fabiangreffrath#158","Is ""PROGRAM_PREFIX=${PACKAGE_SHORTNAME,}-"" a bash language construct or some autofoo thing? (It's not a valid bash substitution).

It is a perfectly valid bash substitution: https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html

GNU bash, version 3.2.57(1)-release (x86_64-apple-darwin15)
is this a bash 3-vs-4 problem?

3.2 is extremely old... I don't know.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,879,2017-03-06T02:52:20Z,2017-03-17T22:21:09Z,2017-03-17T23:02:26Z,MERGED,True,22,16,6,https://github.com/chungy,bash-completion: Use autoconf substitutions for the chocolate name,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/879,https://github.com/jmtd,17,https://github.com/chocolate-doom/chocolate-doom/pull/879#issuecomment-287429453,"Introduce a new PROGRAM_SPREFIX variable in configure.ac, which is
basically identical to PROGRAM_PREFIX but without the trailing hyphen.
PROGRAM_PREFIX was also redefined so that it bases its name from
PACKAGE_SHORTNAME, reducing the number of hardcoded chocolates in the
source.
I tried to avoid a new autoconf variable and just have a hyphen-less version in configure.ac instead, editing all the other files to follow suit, but automake really doesn't like constructs like @PROGRAM_PREFIX@-doom.
This is an effort to resolve fabiangreffrath#158",Ok bash 3 is my current best guess as to the problem. This is the default version on OS X,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,879,2017-03-06T02:52:20Z,2017-03-17T22:21:09Z,2017-03-17T23:02:26Z,MERGED,True,22,16,6,https://github.com/chungy,bash-completion: Use autoconf substitutions for the chocolate name,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/879,https://github.com/jmtd,18,https://github.com/chocolate-doom/chocolate-doom/pull/879#issuecomment-287430583,"Introduce a new PROGRAM_SPREFIX variable in configure.ac, which is
basically identical to PROGRAM_PREFIX but without the trailing hyphen.
PROGRAM_PREFIX was also redefined so that it bases its name from
PACKAGE_SHORTNAME, reducing the number of hardcoded chocolates in the
source.
I tried to avoid a new autoconf variable and just have a hyphen-less version in configure.ac instead, editing all the other files to follow suit, but automake really doesn't like constructs like @PROGRAM_PREFIX@-doom.
This is an effort to resolve fabiangreffrath#158",Can we pipe to tr in this context?,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,879,2017-03-06T02:52:20Z,2017-03-17T22:21:09Z,2017-03-17T23:02:26Z,MERGED,True,22,16,6,https://github.com/chungy,bash-completion: Use autoconf substitutions for the chocolate name,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/879,https://github.com/chungy,19,https://github.com/chocolate-doom/chocolate-doom/pull/879#issuecomment-287434137,"Introduce a new PROGRAM_SPREFIX variable in configure.ac, which is
basically identical to PROGRAM_PREFIX but without the trailing hyphen.
PROGRAM_PREFIX was also redefined so that it bases its name from
PACKAGE_SHORTNAME, reducing the number of hardcoded chocolates in the
source.
I tried to avoid a new autoconf variable and just have a hyphen-less version in configure.ac instead, editing all the other files to follow suit, but automake really doesn't like constructs like @PROGRAM_PREFIX@-doom.
This is an effort to resolve fabiangreffrath#158","Added a new commit, please test this one. Thanks :)",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,879,2017-03-06T02:52:20Z,2017-03-17T22:21:09Z,2017-03-17T23:02:26Z,MERGED,True,22,16,6,https://github.com/chungy,bash-completion: Use autoconf substitutions for the chocolate name,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/879,https://github.com/jmtd,20,https://github.com/chocolate-doom/chocolate-doom/pull/879#issuecomment-287436920,"Introduce a new PROGRAM_SPREFIX variable in configure.ac, which is
basically identical to PROGRAM_PREFIX but without the trailing hyphen.
PROGRAM_PREFIX was also redefined so that it bases its name from
PACKAGE_SHORTNAME, reducing the number of hardcoded chocolates in the
source.
I tried to avoid a new autoconf variable and just have a hyphen-less version in configure.ac instead, editing all the other files to follow suit, but automake really doesn't like constructs like @PROGRAM_PREFIX@-doom.
This is an effort to resolve fabiangreffrath#158",Will do when I get a chance. Cheers :),True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,879,2017-03-06T02:52:20Z,2017-03-17T22:21:09Z,2017-03-17T23:02:26Z,MERGED,True,22,16,6,https://github.com/chungy,bash-completion: Use autoconf substitutions for the chocolate name,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/879,https://github.com/jmtd,21,https://github.com/chocolate-doom/chocolate-doom/pull/879#issuecomment-287485738,"Introduce a new PROGRAM_SPREFIX variable in configure.ac, which is
basically identical to PROGRAM_PREFIX but without the trailing hyphen.
PROGRAM_PREFIX was also redefined so that it bases its name from
PACKAGE_SHORTNAME, reducing the number of hardcoded chocolates in the
source.
I tried to avoid a new autoconf variable and just have a hyphen-less version in configure.ac instead, editing all the other files to follow suit, but automake really doesn't like constructs like @PROGRAM_PREFIX@-doom.
This is an effort to resolve fabiangreffrath#158",Worked a treat. Thanks,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,881,2017-03-09T05:37:25Z,2017-07-17T12:30:37Z,2017-07-17T12:30:37Z,MERGED,True,1402,6,13,https://github.com/AlexMax,Separately controllable MIDI volume on Windows Vista+,37,"['windows', 'music']",https://github.com/chocolate-doom/chocolate-doom/pull/881,https://github.com/AlexMax,1,https://github.com/chocolate-doom/chocolate-doom/pull/881,"This is the pull request to go with #862.  I am under no illusions that the code is perfect, but I do think that the code is ready for somebody else to look at it and tell me how bad it is, at least.  😁

The pull request is only used with Native Midi on Windows.
It is tested with what I currently have installed - Doom and Strife.
If the subprocess crashes or unexpectedly exits, no midi music is played, but the parent process is otherwise unaffected.
It takes into account the use of Timidty, and does not start if it is in use.
Music replacement packs are accounted for, the volume will behave correctly even if you are switching between replacement music and native MIDI.

Here are a couple of code concerns, straight out of the gate:

In order to locate the midiproc executable, I am removing the chocolate-doom/whatever filename from the path.  Is this something that I should common-ize and put in m_misc.c or something?  It's only done once.
In the midiproc main.c, in MidiPipe_RegisterSong I do a one-time writing of Int16's into a buffer.  I suppose I should move this into a function?  I was a little reluctant to do so, because it's a one-time conversion, and it might incur an obligation to create Int8/Int32/Buffer variants that aren't needed.
What kind of initialization/error messages does everybody expect to see from Midiproc upon bootup?  I feel like there should at least be some acknowledgement of the use of midiproc, since this is kind of an extra-ordinary code path compared to the others, but I couldn't convince myself for certain.
I feel like my usage of goto is justified, given the circumstances under which I use it - common cleanup code, in service of DRY.  If somebody insists, I can change it to something goto-less.","This is the pull request to go with #862.  I am under no illusions that the code is perfect, but I do think that the code is ready for somebody else to look at it and tell me how bad it is, at least.  😁

The pull request is only used with Native Midi on Windows.
It is tested with what I currently have installed - Doom and Strife.
If the subprocess crashes or unexpectedly exits, no midi music is played, but the parent process is otherwise unaffected.
It takes into account the use of Timidty, and does not start if it is in use.
Music replacement packs are accounted for, the volume will behave correctly even if you are switching between replacement music and native MIDI.

Here are a couple of code concerns, straight out of the gate:

In order to locate the midiproc executable, I am removing the chocolate-doom/whatever filename from the path.  Is this something that I should common-ize and put in m_misc.c or something?  It's only done once.
In the midiproc main.c, in MidiPipe_RegisterSong I do a one-time writing of Int16's into a buffer.  I suppose I should move this into a function?  I was a little reluctant to do so, because it's a one-time conversion, and it might incur an obligation to create Int8/Int32/Buffer variants that aren't needed.
What kind of initialization/error messages does everybody expect to see from Midiproc upon bootup?  I feel like there should at least be some acknowledgement of the use of midiproc, since this is kind of an extra-ordinary code path compared to the others, but I couldn't convince myself for certain.
I feel like my usage of goto is justified, given the circumstances under which I use it - common cleanup code, in service of DRY.  If somebody insists, I can change it to something goto-less.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,881,2017-03-09T05:37:25Z,2017-07-17T12:30:37Z,2017-07-17T12:30:37Z,MERGED,True,1402,6,13,https://github.com/AlexMax,Separately controllable MIDI volume on Windows Vista+,37,"['windows', 'music']",https://github.com/chocolate-doom/chocolate-doom/pull/881,https://github.com/jmtd,2,https://github.com/chocolate-doom/chocolate-doom/pull/881#issuecomment-285317430,"This is the pull request to go with #862.  I am under no illusions that the code is perfect, but I do think that the code is ready for somebody else to look at it and tell me how bad it is, at least.  😁

The pull request is only used with Native Midi on Windows.
It is tested with what I currently have installed - Doom and Strife.
If the subprocess crashes or unexpectedly exits, no midi music is played, but the parent process is otherwise unaffected.
It takes into account the use of Timidty, and does not start if it is in use.
Music replacement packs are accounted for, the volume will behave correctly even if you are switching between replacement music and native MIDI.

Here are a couple of code concerns, straight out of the gate:

In order to locate the midiproc executable, I am removing the chocolate-doom/whatever filename from the path.  Is this something that I should common-ize and put in m_misc.c or something?  It's only done once.
In the midiproc main.c, in MidiPipe_RegisterSong I do a one-time writing of Int16's into a buffer.  I suppose I should move this into a function?  I was a little reluctant to do so, because it's a one-time conversion, and it might incur an obligation to create Int8/Int32/Buffer variants that aren't needed.
What kind of initialization/error messages does everybody expect to see from Midiproc upon bootup?  I feel like there should at least be some acknowledgement of the use of midiproc, since this is kind of an extra-ordinary code path compared to the others, but I couldn't convince myself for certain.
I feel like my usage of goto is justified, given the circumstances under which I use it - common cleanup code, in service of DRY.  If somebody insists, I can change it to something goto-less.","Some code notes, I haven't tried building or running yet (no Windows
to hand). I'd say, it looks pretty good!

In order to locate the midiproc executable, I am removing the
chocolate-doom/whatever filename from the path. Is this something
that I should common-ize and put in m_misc.c or something? It's only
done once.

I wouldn't worry about moving it out of i_midipipe.c, but I would
consider moving that particular piece of logic into its own
static subroutine; I think that would aid clarity.

In the midiproc main.c, in MidiPipe_RegisterSong I do a one-time
writing of Int16's into a buffer. I suppose I should move this into
a function? I was a little reluctant to do so, because it's a
one-time conversion, and it might incur an obligation to create
Int8/Int32/Buffer variants that aren't needed.

My guideline would be: would it improve the legibility of the code?
Don't worry about obligations. If they aren't needed they shouldn't
be written (or merged).
My initial thoughts was you should break it out into a separate
subroutine because it would aid legibility (especially since int i
would be redundant)
But poking closer at what you are doing, I'm a bit confused. Are you
intentionally flipping the endianness? If you don't mean to, can you
not just do
*(uint16_t *)buffer = NET_MIDIPIPE_PACKET_TYPE_REGISTER_SONG_ACK;

Or pass the integer directly (cast to (char *)) in the call to
WriteFile?

What kind of initialization/error messages does everybody expect to
see from Midiproc upon bootup? I feel like there should at least be
some acknowledgement of the use of midiproc, since this is kind of
an extra-ordinary code path compared to the others, but I couldn't
convince myself for certain.

Might as well print an initialisation message, that seems to be common
for other subsystems.

I feel like my usage of goto is justified, given the circumstances
under which I use it - common cleanup code, in service of DRY. If
somebody insists, I can change it to something goto-less.

I agree with you in nearly all cases.
In i_midipipe.c ExpectPipe, the do/while loop, you could just use
""break"" rather than goto. You could also change the 'else if' on line
173 into a plain 'if'.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,881,2017-03-09T05:37:25Z,2017-07-17T12:30:37Z,2017-07-17T12:30:37Z,MERGED,True,1402,6,13,https://github.com/AlexMax,Separately controllable MIDI volume on Windows Vista+,37,"['windows', 'music']",https://github.com/chocolate-doom/chocolate-doom/pull/881,https://github.com/jmtd,3,https://github.com/chocolate-doom/chocolate-doom/pull/881#issuecomment-285328434,"This is the pull request to go with #862.  I am under no illusions that the code is perfect, but I do think that the code is ready for somebody else to look at it and tell me how bad it is, at least.  😁

The pull request is only used with Native Midi on Windows.
It is tested with what I currently have installed - Doom and Strife.
If the subprocess crashes or unexpectedly exits, no midi music is played, but the parent process is otherwise unaffected.
It takes into account the use of Timidty, and does not start if it is in use.
Music replacement packs are accounted for, the volume will behave correctly even if you are switching between replacement music and native MIDI.

Here are a couple of code concerns, straight out of the gate:

In order to locate the midiproc executable, I am removing the chocolate-doom/whatever filename from the path.  Is this something that I should common-ize and put in m_misc.c or something?  It's only done once.
In the midiproc main.c, in MidiPipe_RegisterSong I do a one-time writing of Int16's into a buffer.  I suppose I should move this into a function?  I was a little reluctant to do so, because it's a one-time conversion, and it might incur an obligation to create Int8/Int32/Buffer variants that aren't needed.
What kind of initialization/error messages does everybody expect to see from Midiproc upon bootup?  I feel like there should at least be some acknowledgement of the use of midiproc, since this is kind of an extra-ordinary code path compared to the others, but I couldn't convince myself for certain.
I feel like my usage of goto is justified, given the circumstances under which I use it - common cleanup code, in service of DRY.  If somebody insists, I can change it to something goto-less.","But poking closer at what you are doing, I'm a bit confused. Are you
intentionally flipping the endianness?

Ah, the other end is reading or writing via NET_* and thus is using big-endian in-transit, I see. For clarity, I'd suggest using the NET_* routines at this end, too, or failing that, at least htons or similar which clearly indicates that this is intended behaviour.
Any reason not to use net_packet.h in the midiproc binary?
Ah, a comment from the linked issue
@AlexMax  said:

Notably, I can not reuse any of the NET_* functionality that exposes high-level routines over UDP that already exists in Chocolate Doom, because they have other dependencies elsewhere in Doom's code that are not satisfied when I just pull in bits and pieces for the subprocess.

I guess that explains this, so you can't easily build and include net_packet.o into this separate process. I'd suggest then linking against winsock if that isn't too painful and using htons there, as the next best thing. Or maybe we should explore refactoring the net_* stuff until it's in a state where you can include these routines in midiproc.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,881,2017-03-09T05:37:25Z,2017-07-17T12:30:37Z,2017-07-17T12:30:37Z,MERGED,True,1402,6,13,https://github.com/AlexMax,Separately controllable MIDI volume on Windows Vista+,37,"['windows', 'music']",https://github.com/chocolate-doom/chocolate-doom/pull/881,https://github.com/fragglet,4,https://github.com/chocolate-doom/chocolate-doom/pull/881#issuecomment-285904274,"This is the pull request to go with #862.  I am under no illusions that the code is perfect, but I do think that the code is ready for somebody else to look at it and tell me how bad it is, at least.  😁

The pull request is only used with Native Midi on Windows.
It is tested with what I currently have installed - Doom and Strife.
If the subprocess crashes or unexpectedly exits, no midi music is played, but the parent process is otherwise unaffected.
It takes into account the use of Timidty, and does not start if it is in use.
Music replacement packs are accounted for, the volume will behave correctly even if you are switching between replacement music and native MIDI.

Here are a couple of code concerns, straight out of the gate:

In order to locate the midiproc executable, I am removing the chocolate-doom/whatever filename from the path.  Is this something that I should common-ize and put in m_misc.c or something?  It's only done once.
In the midiproc main.c, in MidiPipe_RegisterSong I do a one-time writing of Int16's into a buffer.  I suppose I should move this into a function?  I was a little reluctant to do so, because it's a one-time conversion, and it might incur an obligation to create Int8/Int32/Buffer variants that aren't needed.
What kind of initialization/error messages does everybody expect to see from Midiproc upon bootup?  I feel like there should at least be some acknowledgement of the use of midiproc, since this is kind of an extra-ordinary code path compared to the others, but I couldn't convince myself for certain.
I feel like my usage of goto is justified, given the circumstances under which I use it - common cleanup code, in service of DRY.  If somebody insists, I can change it to something goto-less.",One more thing: how are users going to configure this? Does it just happen by default?,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,881,2017-03-09T05:37:25Z,2017-07-17T12:30:37Z,2017-07-17T12:30:37Z,MERGED,True,1402,6,13,https://github.com/AlexMax,Separately controllable MIDI volume on Windows Vista+,37,"['windows', 'music']",https://github.com/chocolate-doom/chocolate-doom/pull/881,https://github.com/chungy,5,https://github.com/chocolate-doom/chocolate-doom/pull/881#issuecomment-286296360,"This is the pull request to go with #862.  I am under no illusions that the code is perfect, but I do think that the code is ready for somebody else to look at it and tell me how bad it is, at least.  😁

The pull request is only used with Native Midi on Windows.
It is tested with what I currently have installed - Doom and Strife.
If the subprocess crashes or unexpectedly exits, no midi music is played, but the parent process is otherwise unaffected.
It takes into account the use of Timidty, and does not start if it is in use.
Music replacement packs are accounted for, the volume will behave correctly even if you are switching between replacement music and native MIDI.

Here are a couple of code concerns, straight out of the gate:

In order to locate the midiproc executable, I am removing the chocolate-doom/whatever filename from the path.  Is this something that I should common-ize and put in m_misc.c or something?  It's only done once.
In the midiproc main.c, in MidiPipe_RegisterSong I do a one-time writing of Int16's into a buffer.  I suppose I should move this into a function?  I was a little reluctant to do so, because it's a one-time conversion, and it might incur an obligation to create Int8/Int32/Buffer variants that aren't needed.
What kind of initialization/error messages does everybody expect to see from Midiproc upon bootup?  I feel like there should at least be some acknowledgement of the use of midiproc, since this is kind of an extra-ordinary code path compared to the others, but I couldn't convince myself for certain.
I feel like my usage of goto is justified, given the circumstances under which I use it - common cleanup code, in service of DRY.  If somebody insists, I can change it to something goto-less.","One more thing: how are users going to configure this? Does it just happen by default?

It runs when Native MIDI is selected in the sound setup (the current default is OPL2 emulation).",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,881,2017-03-09T05:37:25Z,2017-07-17T12:30:37Z,2017-07-17T12:30:37Z,MERGED,True,1402,6,13,https://github.com/AlexMax,Separately controllable MIDI volume on Windows Vista+,37,"['windows', 'music']",https://github.com/chocolate-doom/chocolate-doom/pull/881,https://github.com/AlexMax,6,https://github.com/chocolate-doom/chocolate-doom/pull/881#issuecomment-286298128,"This is the pull request to go with #862.  I am under no illusions that the code is perfect, but I do think that the code is ready for somebody else to look at it and tell me how bad it is, at least.  😁

The pull request is only used with Native Midi on Windows.
It is tested with what I currently have installed - Doom and Strife.
If the subprocess crashes or unexpectedly exits, no midi music is played, but the parent process is otherwise unaffected.
It takes into account the use of Timidty, and does not start if it is in use.
Music replacement packs are accounted for, the volume will behave correctly even if you are switching between replacement music and native MIDI.

Here are a couple of code concerns, straight out of the gate:

In order to locate the midiproc executable, I am removing the chocolate-doom/whatever filename from the path.  Is this something that I should common-ize and put in m_misc.c or something?  It's only done once.
In the midiproc main.c, in MidiPipe_RegisterSong I do a one-time writing of Int16's into a buffer.  I suppose I should move this into a function?  I was a little reluctant to do so, because it's a one-time conversion, and it might incur an obligation to create Int8/Int32/Buffer variants that aren't needed.
What kind of initialization/error messages does everybody expect to see from Midiproc upon bootup?  I feel like there should at least be some acknowledgement of the use of midiproc, since this is kind of an extra-ordinary code path compared to the others, but I couldn't convince myself for certain.
I feel like my usage of goto is justified, given the circumstances under which I use it - common cleanup code, in service of DRY.  If somebody insists, I can change it to something goto-less.","One more thing: how are users going to configure this? Does it just happen by default?

It just happens by default when you select Native Midi from chocolate-setup.  I'm not really sure why anybody would have a reason to purposefully turn it off, even on Windows versions where it's not necessary.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,881,2017-03-09T05:37:25Z,2017-07-17T12:30:37Z,2017-07-17T12:30:37Z,MERGED,True,1402,6,13,https://github.com/AlexMax,Separately controllable MIDI volume on Windows Vista+,37,"['windows', 'music']",https://github.com/chocolate-doom/chocolate-doom/pull/881,https://github.com/jmtd,7,https://github.com/chocolate-doom/chocolate-doom/pull/881#issuecomment-290359588,"This is the pull request to go with #862.  I am under no illusions that the code is perfect, but I do think that the code is ready for somebody else to look at it and tell me how bad it is, at least.  😁

The pull request is only used with Native Midi on Windows.
It is tested with what I currently have installed - Doom and Strife.
If the subprocess crashes or unexpectedly exits, no midi music is played, but the parent process is otherwise unaffected.
It takes into account the use of Timidty, and does not start if it is in use.
Music replacement packs are accounted for, the volume will behave correctly even if you are switching between replacement music and native MIDI.

Here are a couple of code concerns, straight out of the gate:

In order to locate the midiproc executable, I am removing the chocolate-doom/whatever filename from the path.  Is this something that I should common-ize and put in m_misc.c or something?  It's only done once.
In the midiproc main.c, in MidiPipe_RegisterSong I do a one-time writing of Int16's into a buffer.  I suppose I should move this into a function?  I was a little reluctant to do so, because it's a one-time conversion, and it might incur an obligation to create Int8/Int32/Buffer variants that aren't needed.
What kind of initialization/error messages does everybody expect to see from Midiproc upon bootup?  I feel like there should at least be some acknowledgement of the use of midiproc, since this is kind of an extra-ordinary code path compared to the others, but I couldn't convince myself for certain.
I feel like my usage of goto is justified, given the circumstances under which I use it - common cleanup code, in service of DRY.  If somebody insists, I can change it to something goto-less.","GitHub doesn't make this very clear but I think you've addressed everything @fragglet raised in his review. With the possible exception of ""maybe it's simplest to just put stuff in a struct and write the contents to the stream?"", @fragglet would have to say whether he was satisfied with your take on that. Sounds reasonable to me.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,881,2017-03-09T05:37:25Z,2017-07-17T12:30:37Z,2017-07-17T12:30:37Z,MERGED,True,1402,6,13,https://github.com/AlexMax,Separately controllable MIDI volume on Windows Vista+,37,"['windows', 'music']",https://github.com/chocolate-doom/chocolate-doom/pull/881,https://github.com/JNechaevsky,8,https://github.com/chocolate-doom/chocolate-doom/pull/881#issuecomment-294769504,"This is the pull request to go with #862.  I am under no illusions that the code is perfect, but I do think that the code is ready for somebody else to look at it and tell me how bad it is, at least.  😁

The pull request is only used with Native Midi on Windows.
It is tested with what I currently have installed - Doom and Strife.
If the subprocess crashes or unexpectedly exits, no midi music is played, but the parent process is otherwise unaffected.
It takes into account the use of Timidty, and does not start if it is in use.
Music replacement packs are accounted for, the volume will behave correctly even if you are switching between replacement music and native MIDI.

Here are a couple of code concerns, straight out of the gate:

In order to locate the midiproc executable, I am removing the chocolate-doom/whatever filename from the path.  Is this something that I should common-ize and put in m_misc.c or something?  It's only done once.
In the midiproc main.c, in MidiPipe_RegisterSong I do a one-time writing of Int16's into a buffer.  I suppose I should move this into a function?  I was a little reluctant to do so, because it's a one-time conversion, and it might incur an obligation to create Int8/Int32/Buffer variants that aren't needed.
What kind of initialization/error messages does everybody expect to see from Midiproc upon bootup?  I feel like there should at least be some acknowledgement of the use of midiproc, since this is kind of an extra-ordinary code path compared to the others, but I couldn't convince myself for certain.
I feel like my usage of goto is justified, given the circumstances under which I use it - common cleanup code, in service of DRY.  If somebody insists, I can change it to something goto-less.","Oops, I have forgot to report testing results here on Git.
Few weeks ago I have tried this PR as precompiled binaries by @chungy - everything was okay.
Volume changes just fine, no problem even if few copies of game client started. Also, AFAIR, there was no problems if game volume was changed in Windows sound volume.
I believe it is completely safe to merge, but I will gladly repeat my tests in case of necessity or after requested changes will be made.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,881,2017-03-09T05:37:25Z,2017-07-17T12:30:37Z,2017-07-17T12:30:37Z,MERGED,True,1402,6,13,https://github.com/AlexMax,Separately controllable MIDI volume on Windows Vista+,37,"['windows', 'music']",https://github.com/chocolate-doom/chocolate-doom/pull/881,https://github.com/chungy,9,https://github.com/chocolate-doom/chocolate-doom/pull/881#issuecomment-315666423,"This is the pull request to go with #862.  I am under no illusions that the code is perfect, but I do think that the code is ready for somebody else to look at it and tell me how bad it is, at least.  😁

The pull request is only used with Native Midi on Windows.
It is tested with what I currently have installed - Doom and Strife.
If the subprocess crashes or unexpectedly exits, no midi music is played, but the parent process is otherwise unaffected.
It takes into account the use of Timidty, and does not start if it is in use.
Music replacement packs are accounted for, the volume will behave correctly even if you are switching between replacement music and native MIDI.

Here are a couple of code concerns, straight out of the gate:

In order to locate the midiproc executable, I am removing the chocolate-doom/whatever filename from the path.  Is this something that I should common-ize and put in m_misc.c or something?  It's only done once.
In the midiproc main.c, in MidiPipe_RegisterSong I do a one-time writing of Int16's into a buffer.  I suppose I should move this into a function?  I was a little reluctant to do so, because it's a one-time conversion, and it might incur an obligation to create Int8/Int32/Buffer variants that aren't needed.
What kind of initialization/error messages does everybody expect to see from Midiproc upon bootup?  I feel like there should at least be some acknowledgement of the use of midiproc, since this is kind of an extra-ordinary code path compared to the others, but I couldn't convince myself for certain.
I feel like my usage of goto is justified, given the circumstances under which I use it - common cleanup code, in service of DRY.  If somebody insists, I can change it to something goto-less.",Is there any good reason this hasn't been merged yet? I've re-read the existing comments and don't feel there is anything really actionable @AlexMax has to do.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,888,2017-03-17T19:24:36Z,2017-03-18T12:27:51Z,2017-03-24T12:58:56Z,CLOSED,False,43,7,4,https://github.com/Wintermute0110,Joystick axis detection fix,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/888,https://github.com/Wintermute0110,1,https://github.com/chocolate-doom/chocolate-doom/pull/888,"In my XBox 360 wireless gamepad chocolate-doom-setup used the wrong axis when configuring x_axis. Reason is that the Left trigger and Right trigger axes are always at maximum value and chocolate-doom-setup ignored IdentifyBadAxes(). Now, axis that are at maximum value of 32,678 when they should be centered are ignored.
In the future, to properly detect an axis a two step verification must be performed: first, the user should move the axis to one position (or leave it as it is if it's a trigger axis). Second, the user should move the axis to the opposite position. This 2 step verification is able to detect trigger axis and also does not require to identify bad axes.","In my XBox 360 wireless gamepad chocolate-doom-setup used the wrong axis when configuring x_axis. Reason is that the Left trigger and Right trigger axes are always at maximum value and chocolate-doom-setup ignored IdentifyBadAxes(). Now, axis that are at maximum value of 32,678 when they should be centered are ignored.
In the future, to properly detect an axis a two step verification must be performed: first, the user should move the axis to one position (or leave it as it is if it's a trigger axis). Second, the user should move the axis to the opposite position. This 2 step verification is able to detect trigger axis and also does not require to identify bad axes.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,888,2017-03-17T19:24:36Z,2017-03-18T12:27:51Z,2017-03-24T12:58:56Z,CLOSED,False,43,7,4,https://github.com/Wintermute0110,Joystick axis detection fix,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/888,https://github.com/fragglet,2,https://github.com/chocolate-doom/chocolate-doom/pull/888#issuecomment-287472382,"In my XBox 360 wireless gamepad chocolate-doom-setup used the wrong axis when configuring x_axis. Reason is that the Left trigger and Right trigger axes are always at maximum value and chocolate-doom-setup ignored IdentifyBadAxes(). Now, axis that are at maximum value of 32,678 when they should be centered are ignored.
In the future, to properly detect an axis a two step verification must be performed: first, the user should move the axis to one position (or leave it as it is if it's a trigger axis). Second, the user should move the axis to the opposite position. This 2 step verification is able to detect trigger axis and also does not require to identify bad axes.","Logic change looks fine, please just remove all the printf()s you have added.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,888,2017-03-17T19:24:36Z,2017-03-18T12:27:51Z,2017-03-24T12:58:56Z,CLOSED,False,43,7,4,https://github.com/Wintermute0110,Joystick axis detection fix,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/888,https://github.com/Wintermute0110,3,https://github.com/chocolate-doom/chocolate-doom/pull/888#issuecomment-287522773,"In my XBox 360 wireless gamepad chocolate-doom-setup used the wrong axis when configuring x_axis. Reason is that the Left trigger and Right trigger axes are always at maximum value and chocolate-doom-setup ignored IdentifyBadAxes(). Now, axis that are at maximum value of 32,678 when they should be centered are ignored.
In the future, to properly detect an axis a two step verification must be performed: first, the user should move the axis to one position (or leave it as it is if it's a trigger axis). Second, the user should move the axis to the opposite position. This 2 step verification is able to detect trigger axis and also does not require to identify bad axes.","Hi Fragglet, proper joystick support in Choco is far from perfect and I'm preparing more pull requests. Debug printf()s are encapsulated inside DEFINE tags. The other ones I need them to continue development (specially for multi-joystick support).",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,888,2017-03-17T19:24:36Z,2017-03-18T12:27:51Z,2017-03-24T12:58:56Z,CLOSED,False,43,7,4,https://github.com/Wintermute0110,Joystick axis detection fix,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/888,https://github.com/fragglet,4,https://github.com/chocolate-doom/chocolate-doom/pull/888#issuecomment-287529178,"In my XBox 360 wireless gamepad chocolate-doom-setup used the wrong axis when configuring x_axis. Reason is that the Left trigger and Right trigger axes are always at maximum value and chocolate-doom-setup ignored IdentifyBadAxes(). Now, axis that are at maximum value of 32,678 when they should be centered are ignored.
In the future, to properly detect an axis a two step verification must be performed: first, the user should move the axis to one position (or leave it as it is if it's a trigger axis). Second, the user should move the axis to the opposite position. This 2 step verification is able to detect trigger axis and also does not require to identify bad axes.","Understood. Please just remove the debug messages before opening a pull request. I won't be merging this as it is. Not all of the messages are inside #define tags, and even those that are, are not all appropriate.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,888,2017-03-17T19:24:36Z,2017-03-18T12:27:51Z,2017-03-24T12:58:56Z,CLOSED,False,43,7,4,https://github.com/Wintermute0110,Joystick axis detection fix,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/888,https://github.com/jmtd,5,https://github.com/chocolate-doom/chocolate-doom/pull/888#issuecomment-287531104,"In my XBox 360 wireless gamepad chocolate-doom-setup used the wrong axis when configuring x_axis. Reason is that the Left trigger and Right trigger axes are always at maximum value and chocolate-doom-setup ignored IdentifyBadAxes(). Now, axis that are at maximum value of 32,678 when they should be centered are ignored.
In the future, to properly detect an axis a two step verification must be performed: first, the user should move the axis to one position (or leave it as it is if it's a trigger axis). Second, the user should move the axis to the opposite position. This 2 step verification is able to detect trigger axis and also does not require to identify bad axes.","If you put the printfs into a separate commit, you could cherry pick the not-printf commit into a branch to raise a PR but keep the debug commit locally for further development.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,888,2017-03-17T19:24:36Z,2017-03-18T12:27:51Z,2017-03-24T12:58:56Z,CLOSED,False,43,7,4,https://github.com/Wintermute0110,Joystick axis detection fix,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/888,https://github.com/Wintermute0110,6,https://github.com/chocolate-doom/chocolate-doom/pull/888#issuecomment-287533457,"In my XBox 360 wireless gamepad chocolate-doom-setup used the wrong axis when configuring x_axis. Reason is that the Left trigger and Right trigger axes are always at maximum value and chocolate-doom-setup ignored IdentifyBadAxes(). Now, axis that are at maximum value of 32,678 when they should be centered are ignored.
In the future, to properly detect an axis a two step verification must be performed: first, the user should move the axis to one position (or leave it as it is if it's a trigger axis). Second, the user should move the axis to the opposite position. This 2 step verification is able to detect trigger axis and also does not require to identify bad axes.","@jmtd OK, how do I do that? I can separate the logic commit from the printf()s and put them in a separate commits on the same branch. How I open a PR with just one commit? Also, how do I keep the debug code but and then cherry pick what I want for a PR? How the git flow should be?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,888,2017-03-17T19:24:36Z,2017-03-18T12:27:51Z,2017-03-24T12:58:56Z,CLOSED,False,43,7,4,https://github.com/Wintermute0110,Joystick axis detection fix,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/888,https://github.com/jmtd,7,https://github.com/chocolate-doom/chocolate-doom/pull/888#issuecomment-287650491,"In my XBox 360 wireless gamepad chocolate-doom-setup used the wrong axis when configuring x_axis. Reason is that the Left trigger and Right trigger axes are always at maximum value and chocolate-doom-setup ignored IdentifyBadAxes(). Now, axis that are at maximum value of 32,678 when they should be centered are ignored.
In the future, to properly detect an axis a two step verification must be performed: first, the user should move the axis to one position (or leave it as it is if it's a trigger axis). Second, the user should move the axis to the opposite position. This 2 step verification is able to detect trigger axis and also does not require to identify bad axes.","Assuming the commit you want to open a branch for is $COMMITID, and assuming there's nothing in your working tree that would prevent you switching branches, you can do
git checkout -b sdl2-branch my-new-branch-name
git cherry-pick $COMMITID

and my-new-branch-name will just be your current sdl2-branch + $COMMITID.
You could also create a copy of your current branch and do an interactive rebase, only picking the commits you wanted to keep:
git checkout -b some-new-branch-name
git rebase -i sdl2-branch",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,889,2017-03-18T12:29:00Z,2017-03-20T19:05:32Z,2017-03-24T12:58:50Z,MERGED,True,11,5,2,https://github.com/Wintermute0110,Fix detection of triggers in XBox 360 wireless gamepad.,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/889,https://github.com/Wintermute0110,1,https://github.com/chocolate-doom/chocolate-doom/pull/889,Hopefully this time is OK.,Hopefully this time is OK.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,889,2017-03-18T12:29:00Z,2017-03-20T19:05:32Z,2017-03-24T12:58:50Z,MERGED,True,11,5,2,https://github.com/Wintermute0110,Fix detection of triggers in XBox 360 wireless gamepad.,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/889,https://github.com/Wintermute0110,2,https://github.com/chocolate-doom/chocolate-doom/pull/889#issuecomment-287775162,Hopefully this time is OK.,Done!,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,889,2017-03-18T12:29:00Z,2017-03-20T19:05:32Z,2017-03-24T12:58:50Z,MERGED,True,11,5,2,https://github.com/Wintermute0110,Fix detection of triggers in XBox 360 wireless gamepad.,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/889,https://github.com/fragglet,3,https://github.com/chocolate-doom/chocolate-doom/pull/889#issuecomment-287865040,Hopefully this time is OK.,Thank you.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,890,2017-03-18T16:40:00Z,2017-03-20T16:17:47Z,2017-03-24T12:58:48Z,MERGED,True,16,0,1,https://github.com/Wintermute0110,Simulate Y and N key presses with joypad when showing yes/no menus.,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/890,https://github.com/Wintermute0110,1,https://github.com/chocolate-doom/chocolate-doom/pull/890,New code is around line 1439. Diff looks bulky because I replaced some tab characters with spaces and made sure all the indentations have the correct value of 4 spaces.,New code is around line 1439. Diff looks bulky because I replaced some tab characters with spaces and made sure all the indentations have the correct value of 4 spaces.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,890,2017-03-18T16:40:00Z,2017-03-20T16:17:47Z,2017-03-24T12:58:48Z,MERGED,True,16,0,1,https://github.com/Wintermute0110,Simulate Y and N key presses with joypad when showing yes/no menus.,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/890,https://github.com/bb010g,2,https://github.com/chocolate-doom/chocolate-doom/pull/890#issuecomment-287563095,New code is around line 1439. Diff looks bulky because I replaced some tab characters with spaces and made sure all the indentations have the correct value of 4 spaces.,"Could you separate out your formatting into its own commit, preferably after a commit with just the new code?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,890,2017-03-18T16:40:00Z,2017-03-20T16:17:47Z,2017-03-24T12:58:48Z,MERGED,True,16,0,1,https://github.com/Wintermute0110,Simulate Y and N key presses with joypad when showing yes/no menus.,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/890,https://github.com/Wintermute0110,3,https://github.com/chocolate-doom/chocolate-doom/pull/890#issuecomment-287564607,New code is around line 1439. Diff looks bulky because I replaced some tab characters with spaces and made sure all the indentations have the correct value of 4 spaces.,It will be a lot of work... Took me some time to change all the tabs to spaces.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,890,2017-03-18T16:40:00Z,2017-03-20T16:17:47Z,2017-03-24T12:58:48Z,MERGED,True,16,0,1,https://github.com/Wintermute0110,Simulate Y and N key presses with joypad when showing yes/no menus.,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/890,https://github.com/chungy,4,https://github.com/chocolate-doom/chocolate-doom/pull/890#issuecomment-287568061,New code is around line 1439. Diff looks bulky because I replaced some tab characters with spaces and made sure all the indentations have the correct value of 4 spaces.,"Use git show -w to get a diff without whitespace changes, work from there.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,890,2017-03-18T16:40:00Z,2017-03-20T16:17:47Z,2017-03-24T12:58:48Z,MERGED,True,16,0,1,https://github.com/Wintermute0110,Simulate Y and N key presses with joypad when showing yes/no menus.,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/890,https://github.com/Wintermute0110,5,https://github.com/chocolate-doom/chocolate-doom/pull/890#issuecomment-287576436,New code is around line 1439. Diff looks bulky because I replaced some tab characters with spaces and made sure all the indentations have the correct value of 4 spaces.,"OK, I've just read in HACKING.md that old code should not be changed. I will prepare a new clean PR ASAP.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,890,2017-03-18T16:40:00Z,2017-03-20T16:17:47Z,2017-03-24T12:58:48Z,MERGED,True,16,0,1,https://github.com/Wintermute0110,Simulate Y and N key presses with joypad when showing yes/no menus.,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/890,https://github.com/jmtd,6,https://github.com/chocolate-doom/chocolate-doom/pull/890#issuecomment-287580846,New code is around line 1439. Diff looks bulky because I replaced some tab characters with spaces and made sure all the indentations have the correct value of 4 spaces.,Thanks!,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,890,2017-03-18T16:40:00Z,2017-03-20T16:17:47Z,2017-03-24T12:58:48Z,MERGED,True,16,0,1,https://github.com/Wintermute0110,Simulate Y and N key presses with joypad when showing yes/no menus.,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/890,https://github.com/Wintermute0110,7,https://github.com/chocolate-doom/chocolate-doom/pull/890#issuecomment-287781598,New code is around line 1439. Diff looks bulky because I replaced some tab characters with spaces and made sure all the indentations have the correct value of 4 spaces.,Done! @jmtd Thanks for your Git help in the previous PR comments.,True,{'THUMBS_UP': ['https://github.com/jmtd']}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,890,2017-03-18T16:40:00Z,2017-03-20T16:17:47Z,2017-03-24T12:58:48Z,MERGED,True,16,0,1,https://github.com/Wintermute0110,Simulate Y and N key presses with joypad when showing yes/no menus.,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/890,https://github.com/jmtd,8,https://github.com/chocolate-doom/chocolate-doom/pull/890#issuecomment-287812290,New code is around line 1439. Diff looks bulky because I replaced some tab characters with spaces and made sure all the indentations have the correct value of 4 spaces.,Good work!,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,890,2017-03-18T16:40:00Z,2017-03-20T16:17:47Z,2017-03-24T12:58:48Z,MERGED,True,16,0,1,https://github.com/Wintermute0110,Simulate Y and N key presses with joypad when showing yes/no menus.,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/890,https://github.com/jmtd,9,https://github.com/chocolate-doom/chocolate-doom/pull/890#issuecomment-287813402,New code is around line 1439. Diff looks bulky because I replaced some tab characters with spaces and made sure all the indentations have the correct value of 4 spaces.,Someone (doesn't have to be you :)) needs to port this stuff over to the other games (heretic etc.),True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,890,2017-03-18T16:40:00Z,2017-03-20T16:17:47Z,2017-03-24T12:58:48Z,MERGED,True,16,0,1,https://github.com/Wintermute0110,Simulate Y and N key presses with joypad when showing yes/no menus.,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/890,https://github.com/Wintermute0110,10,https://github.com/chocolate-doom/chocolate-doom/pull/890#issuecomment-287816639,New code is around line 1439. Diff looks bulky because I replaced some tab characters with spaces and made sure all the indentations have the correct value of 4 spaces.,Thanks for the merging. Maybe we can use the Doom engine to do all joystick-related code and once it's working like a charm port it to other engines.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,890,2017-03-18T16:40:00Z,2017-03-20T16:17:47Z,2017-03-24T12:58:48Z,MERGED,True,16,0,1,https://github.com/Wintermute0110,Simulate Y and N key presses with joypad when showing yes/no menus.,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/890,https://github.com/jmtd,11,https://github.com/chocolate-doom/chocolate-doom/pull/890#issuecomment-287820673,New code is around line 1439. Diff looks bulky because I replaced some tab characters with spaces and made sure all the indentations have the correct value of 4 spaces.,"Thanks for the merging. Maybe we can use the Doom engine to do all joystick-related code and once it's working like a charm port it to other engines.

Yeah I think that's the best approach.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,890,2017-03-18T16:40:00Z,2017-03-20T16:17:47Z,2017-03-24T12:58:48Z,MERGED,True,16,0,1,https://github.com/Wintermute0110,Simulate Y and N key presses with joypad when showing yes/no menus.,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/890,https://github.com/jmtd,12,https://github.com/chocolate-doom/chocolate-doom/pull/890#issuecomment-287911956,New code is around line 1439. Diff looks bulky because I replaced some tab characters with spaces and made sure all the indentations have the correct value of 4 spaces.,"I'm going to poke at this a wee bit more, the ifs in this patch are not quite right, they shouldnt' reference joybmenu at all since we aren't testing the ""menu"" joystick button. I'm also considering adding a define like #define JOY_BUTTON_PRESSED(x) ((x) >= 0 && (ev->data1 & (1 << (x)) != 0)) to clean up some of this file",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,893,2017-03-20T16:07:22Z,2017-03-21T17:14:05Z,2017-03-24T12:58:45Z,CLOSED,False,12,0,1,https://github.com/Wintermute0110,Create a savegame name by pressing Fire with joystick.,2,"['input', 'Doom']",https://github.com/chocolate-doom/chocolate-doom/pull/893,https://github.com/Wintermute0110,1,https://github.com/chocolate-doom/chocolate-doom/pull/893,"This PR generates and automatic Savegame name when pressing Fire with the joystick. There is a minor side effect: when a savegame name is generated after pressing Fire the game is saved and the current weapon is also Fired. Otherwise, it works OK.","This PR generates and automatic Savegame name when pressing Fire with the joystick. There is a minor side effect: when a savegame name is generated after pressing Fire the game is saved and the current weapon is also Fired. Otherwise, it works OK.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,893,2017-03-20T16:07:22Z,2017-03-21T17:14:05Z,2017-03-24T12:58:45Z,CLOSED,False,12,0,1,https://github.com/Wintermute0110,Create a savegame name by pressing Fire with joystick.,2,"['input', 'Doom']",https://github.com/chocolate-doom/chocolate-doom/pull/893,https://github.com/jmtd,2,https://github.com/chocolate-doom/chocolate-doom/pull/893#issuecomment-287812599,"This PR generates and automatic Savegame name when pressing Fire with the joystick. There is a minor side effect: when a savegame name is generated after pressing Fire the game is saved and the current weapon is also Fired. Otherwise, it works OK.","Nice. I started working on this and got myself tied in knots, rather than this simple scheme ""JOYSTICK SLOT"" I tried to derive a name from the IWAD, PWADs, etc. -- I prefer  your solution (and mine would fit on top, one day, if I decided to finish it)",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,893,2017-03-20T16:07:22Z,2017-03-21T17:14:05Z,2017-03-24T12:58:45Z,CLOSED,False,12,0,1,https://github.com/Wintermute0110,Create a savegame name by pressing Fire with joystick.,2,"['input', 'Doom']",https://github.com/chocolate-doom/chocolate-doom/pull/893,https://github.com/jmtd,3,https://github.com/chocolate-doom/chocolate-doom/pull/893#issuecomment-287816755,"This PR generates and automatic Savegame name when pressing Fire with the joystick. There is a minor side effect: when a savegame name is generated after pressing Fire the game is saved and the current weapon is also Fired. Otherwise, it works OK.","The behaviour currently seems to be: you get to the save screen, choose an empty slot, the slot clears and shows the input cursor, you can't do any input via joypad but fire saves anyway, if you go to load, the save got the default name. A better behaviour would be for when you hit fire on the empty save slot, it fills it with the generated name. See jmtd@87d253f for an example of how to do this (and the branch https://github.com/jmtd/chocolate-doom/commits/sdl2-joystickonly)",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,893,2017-03-20T16:07:22Z,2017-03-21T17:14:05Z,2017-03-24T12:58:45Z,CLOSED,False,12,0,1,https://github.com/Wintermute0110,Create a savegame name by pressing Fire with joystick.,2,"['input', 'Doom']",https://github.com/chocolate-doom/chocolate-doom/pull/893,https://github.com/Wintermute0110,4,https://github.com/chocolate-doom/chocolate-doom/pull/893#issuecomment-287828014,"This PR generates and automatic Savegame name when pressing Fire with the joystick. There is a minor side effect: when a savegame name is generated after pressing Fire the game is saved and the current weapon is also Fired. Otherwise, it works OK.","You solution is certainly more elegant and I like it. However, there is a problem with your approach: the savegame name will be generated whether the user is using a joystick for controlling the menu or not. Maybe a good idea would be to merge my patch and then you add your SetDefaultSaveName() to set a more beautiful name.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,893,2017-03-20T16:07:22Z,2017-03-21T17:14:05Z,2017-03-24T12:58:45Z,CLOSED,False,12,0,1,https://github.com/Wintermute0110,Create a savegame name by pressing Fire with joystick.,2,"['input', 'Doom']",https://github.com/chocolate-doom/chocolate-doom/pull/893,https://github.com/jmtd,5,https://github.com/chocolate-doom/chocolate-doom/pull/893#issuecomment-287906531,"This PR generates and automatic Savegame name when pressing Fire with the joystick. There is a minor side effect: when a savegame name is generated after pressing Fire the game is saved and the current weapon is also Fired. Otherwise, it works OK.","You solution is certainly more elegant and I like it. However, there is a problem with your approach: the savegame name will be generated whether the user is using a joystick for controlling the menu or not.

Ah yes I remember now, this part wasn't working.
What I was suggesting wasn't taking my enhanced name-choosing code, but changing the sequence of events from

user brings up save game menu
user selects an empty slot
user presses fire; empty slot is selected, contents is the Enter Text cursor ""_""
user presses fire again
save screen goes away
later, when loading, that save is marked ""JOYSTICK SLOT x""

As is the case with this PR currently, to

user brings up save game menu
user selects an empty slot
user presses fire; empty slot is selected, contents is  ""JOYSTICK SLOT x_""
user presses fire again
save screen goes away
later, when loading, that save is marked ""JOYSTICK SLOT x""

Which is to say, we pre-fill the slot at the point the user presses fire.
The trouble I had was you don't have access to the joybmenu or ev structures at the time M_SaveSelect is called.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,893,2017-03-20T16:07:22Z,2017-03-21T17:14:05Z,2017-03-24T12:58:45Z,CLOSED,False,12,0,1,https://github.com/Wintermute0110,Create a savegame name by pressing Fire with joystick.,2,"['input', 'Doom']",https://github.com/chocolate-doom/chocolate-doom/pull/893,https://github.com/jmtd,6,https://github.com/chocolate-doom/chocolate-doom/pull/893#issuecomment-287914258,"This PR generates and automatic Savegame name when pressing Fire with the joystick. There is a minor side effect: when a savegame name is generated after pressing Fire the game is saved and the current weapon is also Fired. Otherwise, it works OK.","Hmm I think I'm stumbling across some problems with this code that predate you working on it :) the ""X"" key which is by default unbound in Doom (jump for hexen) is acting as a key_menu_back, possibly because the mask check in there is too wide and there's junk in an array somewhere. I've ran out of time to look further tonight though.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,893,2017-03-20T16:07:22Z,2017-03-21T17:14:05Z,2017-03-24T12:58:45Z,CLOSED,False,12,0,1,https://github.com/Wintermute0110,Create a savegame name by pressing Fire with joystick.,2,"['input', 'Doom']",https://github.com/chocolate-doom/chocolate-doom/pull/893,https://github.com/jmtd,7,https://github.com/chocolate-doom/chocolate-doom/pull/893#issuecomment-288070882,"This PR generates and automatic Savegame name when pressing Fire with the joystick. There is a minor side effect: when a savegame name is generated after pressing Fire the game is saved and the current weapon is also Fired. Otherwise, it works OK.",This morning I managed to get something working by combining your work with my unfinished stuff. I'll tidy it up and push it after work today.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,893,2017-03-20T16:07:22Z,2017-03-21T17:14:05Z,2017-03-24T12:58:45Z,CLOSED,False,12,0,1,https://github.com/Wintermute0110,Create a savegame name by pressing Fire with joystick.,2,"['input', 'Doom']",https://github.com/chocolate-doom/chocolate-doom/pull/893,https://github.com/jmtd,8,https://github.com/chocolate-doom/chocolate-doom/pull/893#issuecomment-288150587,"This PR generates and automatic Savegame name when pressing Fire with the joystick. There is a minor side effect: when a savegame name is generated after pressing Fire the game is saved and the current weapon is also Fired. Otherwise, it works OK.","Closing this, as I've merged it outside of the Github UI (with some rework by me on top). I'll open a new issue to cover the fire-after-save issue . I figured it's better to have that bug introduced than the lack of feature by not merging now.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,894,2017-03-20T22:43:39Z,2017-03-21T13:00:44Z,2017-03-24T14:56:40Z,CLOSED,False,24,20,1,https://github.com/jmtd,WIP joystick cleanup,1,"['input', 'Doom']",https://github.com/chocolate-doom/chocolate-doom/pull/894,https://github.com/jmtd,1,https://github.com/chocolate-doom/chocolate-doom/pull/894,"this is Work In Progress for now, I just wanted to push it so people could comment, I'm too tired to be sure it's ready tonight
Introduce JOY_BUTTON_PRESSED to tidy up bitmask checks against the
event field which corresponds to joystick buttons.
Re-order the new context checks for Y/N questions so they are
nested under the existing checks for use/fire button presses.
This cleans up some double-presses and some undefined behaviour
with the unbound button X.","this is Work In Progress for now, I just wanted to push it so people could comment, I'm too tired to be sure it's ready tonight
Introduce JOY_BUTTON_PRESSED to tidy up bitmask checks against the
event field which corresponds to joystick buttons.
Re-order the new context checks for Y/N questions so they are
nested under the existing checks for use/fire button presses.
This cleans up some double-presses and some undefined behaviour
with the unbound button X.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,894,2017-03-20T22:43:39Z,2017-03-21T13:00:44Z,2017-03-24T14:56:40Z,CLOSED,False,24,20,1,https://github.com/jmtd,WIP joystick cleanup,1,"['input', 'Doom']",https://github.com/chocolate-doom/chocolate-doom/pull/894,https://github.com/Wintermute0110,2,https://github.com/chocolate-doom/chocolate-doom/pull/894#issuecomment-288008453,"this is Work In Progress for now, I just wanted to push it so people could comment, I'm too tired to be sure it's ready tonight
Introduce JOY_BUTTON_PRESSED to tidy up bitmask checks against the
event field which corresponds to joystick buttons.
Re-order the new context checks for Y/N questions so they are
nested under the existing checks for use/fire button presses.
This cleans up some double-presses and some undefined behaviour
with the unbound button X.",Looks good to me.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,900,2017-03-28T16:19:57Z,2017-03-28T16:21:57Z,2017-03-28T16:21:57Z,MERGED,True,13,6,4,https://github.com/jmtd,move joystick hysteresis to i_video,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/900,https://github.com/jmtd,1,https://github.com/chocolate-doom/chocolate-doom/pull/900,"Move the joywait global variable from doom/am_map and doom/m_menu to a public
global in i_video. Add a check for that variable in the main event dispatch
loop; we can therefore remove the tests further down the call stack in the
menu and automap code.
Set the joywait var forward 5 tics when the joypad is used to save a game
to avoid a fire event leaking through to the game after the menu is dismissed.
Work is still needed to adjust heretic/hexen/strife (but quite a lot of the
recent joystick improvements need porting to them once we're satisfied with
the implementation in Doom).
Fixes #895","Move the joywait global variable from doom/am_map and doom/m_menu to a public
global in i_video. Add a check for that variable in the main event dispatch
loop; we can therefore remove the tests further down the call stack in the
menu and automap code.
Set the joywait var forward 5 tics when the joypad is used to save a game
to avoid a fire event leaking through to the game after the menu is dismissed.
Work is still needed to adjust heretic/hexen/strife (but quite a lot of the
recent joystick improvements need porting to them once we're satisfied with
the implementation in Doom).
Fixes #895",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,904,2017-03-29T16:20:13Z,2017-04-03T15:08:55Z,2017-04-03T15:09:08Z,MERGED,True,69,7,1,https://github.com/jmtd,"Adjust NES30Pro joypad settings, add FC30 Pro",6,['input'],https://github.com/chocolate-doom/chocolate-doom/pull/904,https://github.com/jmtd,1,https://github.com/chocolate-doom/chocolate-doom/pull/904,"I'd like it if someone with a NES30 Pro (@fragglet?) could double-check this before merging.
I acquired an FC30 Pro which should be identical to the NES30 Pro except for Device IDs. However
the existing NES30 Pro mapping didn't match up. I've adjusted it to match to the controller I have here. I suspect that this mapping was added in the SDL1 branch and its out-of-date for SDL2.
Add known_joysticks entries for the FC30 Pro in USB and Bluetooth modes.","I'd like it if someone with a NES30 Pro (@fragglet?) could double-check this before merging.
I acquired an FC30 Pro which should be identical to the NES30 Pro except for Device IDs. However
the existing NES30 Pro mapping didn't match up. I've adjusted it to match to the controller I have here. I suspect that this mapping was added in the SDL1 branch and its out-of-date for SDL2.
Add known_joysticks entries for the FC30 Pro in USB and Bluetooth modes.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,909,2017-04-26T16:03:58Z,2017-05-02T17:11:18Z,2017-05-03T14:10:59Z,MERGED,True,53,6,1,https://github.com/jmtd,textscreen zenity chooser file filter tweaks,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/909,https://github.com/jmtd,1,https://github.com/chocolate-doom/chocolate-doom/pull/909,"Two tweaks

adjust patterns to be case-insensitive
add a . pattern so user can select any file if they wish","Two tweaks

adjust patterns to be case-insensitive
add a . pattern so user can select any file if they wish",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,909,2017-04-26T16:03:58Z,2017-05-02T17:11:18Z,2017-05-03T14:10:59Z,MERGED,True,53,6,1,https://github.com/jmtd,textscreen zenity chooser file filter tweaks,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/909,https://github.com/fragglet,2,https://github.com/chocolate-doom/chocolate-doom/pull/909#issuecomment-298699271,"Two tweaks

adjust patterns to be case-insensitive
add a . pattern so user can select any file if they wish",Thanks!,True,{'THUMBS_UP': ['https://github.com/jmtd']}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,912,2017-05-18T10:49:30Z,2017-05-31T06:16:48Z,2017-05-31T06:16:58Z,CLOSED,False,33,4,1,https://github.com/fabiangreffrath,video: conditionally allow window self-resizing by display server,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/912,https://github.com/fabiangreffrath,1,https://github.com/chocolate-doom/chocolate-doom/pull/912,"Some display servers support composing or tiled window managers
which are known to cause problems with self-resizing windows.
Allow the window to resize itself to match the right aspect ratio
only after checking for the used display server.
Fixes #856","Some display servers support composing or tiled window managers
which are known to cause problems with self-resizing windows.
Allow the window to resize itself to match the right aspect ratio
only after checking for the used display server.
Fixes #856",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,912,2017-05-18T10:49:30Z,2017-05-31T06:16:48Z,2017-05-31T06:16:58Z,CLOSED,False,33,4,1,https://github.com/fabiangreffrath,video: conditionally allow window self-resizing by display server,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/912,https://github.com/jmtd,2,https://github.com/chocolate-doom/chocolate-doom/pull/912#issuecomment-302370675,"Some display servers support composing or tiled window managers
which are known to cause problems with self-resizing windows.
Allow the window to resize itself to match the right aspect ratio
only after checking for the used display server.
Fixes #856","I'm going to hold off on judging this until I've tested it (and I plan to do that too) but I don't like the idea of the approach here, which amounts to whitelisting certain environments and is always going to suffer from edge cases (in both directions)",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,912,2017-05-18T10:49:30Z,2017-05-31T06:16:48Z,2017-05-31T06:16:58Z,CLOSED,False,33,4,1,https://github.com/fabiangreffrath,video: conditionally allow window self-resizing by display server,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/912,https://github.com/fabiangreffrath,3,https://github.com/chocolate-doom/chocolate-doom/pull/912#issuecomment-302400797,"Some display servers support composing or tiled window managers
which are known to cause problems with self-resizing windows.
Allow the window to resize itself to match the right aspect ratio
only after checking for the used display server.
Fixes #856",Thanks! I have committed another approach that re-introduces the 500 ms delay between a window resize action and the self-resizing of the window to match the expected aspect ratio.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,912,2017-05-18T10:49:30Z,2017-05-31T06:16:48Z,2017-05-31T06:16:58Z,CLOSED,False,33,4,1,https://github.com/fabiangreffrath,video: conditionally allow window self-resizing by display server,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/912,https://github.com/fabiangreffrath,4,https://github.com/chocolate-doom/chocolate-doom/pull/912#issuecomment-305094588,"Some display servers support composing or tiled window managers
which are known to cause problems with self-resizing windows.
Allow the window to resize itself to match the right aspect ratio
only after checking for the used display server.
Fixes #856","Obsolete, now that #913 has been merged.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,913,2017-05-18T16:47:40Z,2017-05-31T06:16:01Z,2017-05-31T06:16:05Z,MERGED,True,27,16,1,https://github.com/fabiangreffrath,video: apply windows self-resizing only after a 500 ms delay,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/913,https://github.com/fabiangreffrath,1,https://github.com/chocolate-doom/chocolate-doom/pull/913,"This hopefully reduced the flicker experienced with certain window
managers on certain display servers when the window is manually
resized and then resizes itself again to match the right aspect ratio.
Fixes #856","This hopefully reduced the flicker experienced with certain window
managers on certain display servers when the window is manually
resized and then resizes itself again to match the right aspect ratio.
Fixes #856",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,913,2017-05-18T16:47:40Z,2017-05-31T06:16:01Z,2017-05-31T06:16:05Z,MERGED,True,27,16,1,https://github.com/fabiangreffrath,video: apply windows self-resizing only after a 500 ms delay,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/913,https://github.com/fabiangreffrath,2,https://github.com/chocolate-doom/chocolate-doom/pull/913#issuecomment-302632682,"This hopefully reduced the flicker experienced with certain window
managers on certain display servers when the window is manually
resized and then resizes itself again to match the right aspect ratio.
Fixes #856",I have modified this branch to only update the viewport when the resizing is over. Let's please play around with this and then decide for one of the approaches (or another one) in the short term.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,917,2017-06-19T16:02:06Z,2017-06-21T13:24:55Z,2017-06-21T13:24:55Z,CLOSED,False,22,14,3,https://github.com/jmtd,Enable SDL_HINT_GRAB_KEYBOARD for special keys,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/917,https://github.com/jmtd,1,https://github.com/chocolate-doom/chocolate-doom/pull/917,"This enables grabbing they keyboard as well as the mouse when
enabling grabs, preventing other software (e.g. the Window Manager)
from filtering key events such as special keys including Print
Screen.
Enable grabs during the key input dialog in setup.
These two changes mean you can bind Print Screen and use it for
actions in-game.
The special keys only work when the grab is enabled: so in-game,
but not in menus: this is a regression to the SDL 1.2 behaviour.
Fixes #765.","This enables grabbing they keyboard as well as the mouse when
enabling grabs, preventing other software (e.g. the Window Manager)
from filtering key events such as special keys including Print
Screen.
Enable grabs during the key input dialog in setup.
These two changes mean you can bind Print Screen and use it for
actions in-game.
The special keys only work when the grab is enabled: so in-game,
but not in menus: this is a regression to the SDL 1.2 behaviour.
Fixes #765.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,917,2017-06-19T16:02:06Z,2017-06-21T13:24:55Z,2017-06-21T13:24:55Z,CLOSED,False,22,14,3,https://github.com/jmtd,Enable SDL_HINT_GRAB_KEYBOARD for special keys,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/917,https://github.com/jmtd,2,https://github.com/chocolate-doom/chocolate-doom/pull/917#issuecomment-309486356,"This enables grabbing they keyboard as well as the mouse when
enabling grabs, preventing other software (e.g. the Window Manager)
from filtering key events such as special keys including Print
Screen.
Enable grabs during the key input dialog in setup.
These two changes mean you can bind Print Screen and use it for
actions in-game.
The special keys only work when the grab is enabled: so in-game,
but not in menus: this is a regression to the SDL 1.2 behaviour.
Fixes #765.","Tested on Linux and Mac.
On Linux, this allows the Print Screen key to be bound in the setup tool, and to be used for actions during the game, so long as the mouse is grabbed at the time. Prior SDL2 behaviour was for the Print Screen and other keys to be unavailable in some situations (where the host environment has grabbed them). Prior to that, SDL 1.2 behaviour was for the key to work in all circumstances.
On Mac, I don't have a native Print Screen key, but when attaching a USB keyboard, it can be bound and used fine before and after this patch.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,917,2017-06-19T16:02:06Z,2017-06-21T13:24:55Z,2017-06-21T13:24:55Z,CLOSED,False,22,14,3,https://github.com/jmtd,Enable SDL_HINT_GRAB_KEYBOARD for special keys,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/917,https://github.com/jmtd,3,https://github.com/chocolate-doom/chocolate-doom/pull/917#issuecomment-309487132,"This enables grabbing they keyboard as well as the mouse when
enabling grabs, preventing other software (e.g. the Window Manager)
from filtering key events such as special keys including Print
Screen.
Enable grabs during the key input dialog in setup.
These two changes mean you can bind Print Screen and use it for
actions in-game.
The special keys only work when the grab is enabled: so in-game,
but not in menus: this is a regression to the SDL 1.2 behaviour.
Fixes #765.","In terms of implementation, you may feel that the stuff added to src/setup/txt_keyinput.c should instead be modifications to textscreen/*, either extending the textscreen API to add grab stuff or when the input mode is set to TXT_INPUT_RAW.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,917,2017-06-19T16:02:06Z,2017-06-21T13:24:55Z,2017-06-21T13:24:55Z,CLOSED,False,22,14,3,https://github.com/jmtd,Enable SDL_HINT_GRAB_KEYBOARD for special keys,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/917,https://github.com/jmtd,4,https://github.com/chocolate-doom/chocolate-doom/pull/917#issuecomment-309489808,"This enables grabbing they keyboard as well as the mouse when
enabling grabs, preventing other software (e.g. the Window Manager)
from filtering key events such as special keys including Print
Screen.
Enable grabs during the key input dialog in setup.
These two changes mean you can bind Print Screen and use it for
actions in-game.
The special keys only work when the grab is enabled: so in-game,
but not in menus: this is a regression to the SDL 1.2 behaviour.
Fixes #765.",OK I've implemented the clean-ups I think are necessary but I won't be able to test it properly until Tomorrow.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,917,2017-06-19T16:02:06Z,2017-06-21T13:24:55Z,2017-06-21T13:24:55Z,CLOSED,False,22,14,3,https://github.com/jmtd,Enable SDL_HINT_GRAB_KEYBOARD for special keys,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/917,https://github.com/jmtd,5,https://github.com/chocolate-doom/chocolate-doom/pull/917#issuecomment-309694758,"This enables grabbing they keyboard as well as the mouse when
enabling grabs, preventing other software (e.g. the Window Manager)
from filtering key events such as special keys including Print
Screen.
Enable grabs during the key input dialog in setup.
These two changes mean you can bind Print Screen and use it for
actions in-game.
The special keys only work when the grab is enabled: so in-game,
but not in menus: this is a regression to the SDL 1.2 behaviour.
Fixes #765.","Tested on Mac and Linux. Mac behaviour is unchanged by this PR. Summary of behaviours on Linux:
SDL1.2 behaviour:

special keys like print screen can be bound and used irrespective of whether the environment uses them

current SDL2 behaviour:

if the environment grabs a key (like print screen), chocolate-setup cannot bind it and chocolate-doom won't see keypress events

This PR behaviour:

chocolate-setup can bind such keys, but chocolate-doom only gets events when it has a ""grab"": so in game, but not in menus, when paused, etc.

If the PR behaviour sounds better on balance than the current behaviour, then we could merge this. I'd appreciate your opinions @chungy @fragglet @fabiangreffrath
I should add that I don't think it's possible to fully replicate the behaviour of SDL 1.2, it's either this half-measure or no support all, and it's a judgement call as to which is a better user experience IMHO.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,917,2017-06-19T16:02:06Z,2017-06-21T13:24:55Z,2017-06-21T13:24:55Z,CLOSED,False,22,14,3,https://github.com/jmtd,Enable SDL_HINT_GRAB_KEYBOARD for special keys,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/917,https://github.com/fabiangreffrath,6,https://github.com/chocolate-doom/chocolate-doom/pull/917#issuecomment-309791574,"This enables grabbing they keyboard as well as the mouse when
enabling grabs, preventing other software (e.g. the Window Manager)
from filtering key events such as special keys including Print
Screen.
Enable grabs during the key input dialog in setup.
These two changes mean you can bind Print Screen and use it for
actions in-game.
The special keys only work when the grab is enabled: so in-game,
but not in menus: this is a regression to the SDL 1.2 behaviour.
Fixes #765.","chocolate-setup can bind such keys, but chocolate-doom only gets events when it has a ""grab"": so in game, but not in menus, when paused, etc.

Does this mean I cannot press the ""Win"" key or Alt-Tab anymore to get away from the game? (That is, is is currently possible?)",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,917,2017-06-19T16:02:06Z,2017-06-21T13:24:55Z,2017-06-21T13:24:55Z,CLOSED,False,22,14,3,https://github.com/jmtd,Enable SDL_HINT_GRAB_KEYBOARD for special keys,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/917,https://github.com/jmtd,7,https://github.com/chocolate-doom/chocolate-doom/pull/917#issuecomment-309823108,"This enables grabbing they keyboard as well as the mouse when
enabling grabs, preventing other software (e.g. the Window Manager)
from filtering key events such as special keys including Print
Screen.
Enable grabs during the key input dialog in setup.
These two changes mean you can bind Print Screen and use it for
actions in-game.
The special keys only work when the grab is enabled: so in-game,
but not in menus: this is a regression to the SDL 1.2 behaviour.
Fixes #765.",I'll try to test those behaviours on Linux tomorrow.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,917,2017-06-19T16:02:06Z,2017-06-21T13:24:55Z,2017-06-21T13:24:55Z,CLOSED,False,22,14,3,https://github.com/jmtd,Enable SDL_HINT_GRAB_KEYBOARD for special keys,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/917,https://github.com/jmtd,8,https://github.com/chocolate-doom/chocolate-doom/pull/917#issuecomment-310005615,"This enables grabbing they keyboard as well as the mouse when
enabling grabs, preventing other software (e.g. the Window Manager)
from filtering key events such as special keys including Print
Screen.
Enable grabs during the key input dialog in setup.
These two changes mean you can bind Print Screen and use it for
actions in-game.
The special keys only work when the grab is enabled: so in-game,
but not in menus: this is a regression to the SDL 1.2 behaviour.
Fixes #765.","Does this mean I cannot press the ""Win"" key or Alt-Tab anymore to get away from the game? (That is, is is currently possible?)

Good catch, yes, this blocks those actions on Linux. Which is a Bad Thing imho.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,917,2017-06-19T16:02:06Z,2017-06-21T13:24:55Z,2017-06-21T13:24:55Z,CLOSED,False,22,14,3,https://github.com/jmtd,Enable SDL_HINT_GRAB_KEYBOARD for special keys,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/917,https://github.com/fabiangreffrath,9,https://github.com/chocolate-doom/chocolate-doom/pull/917#issuecomment-310040909,"This enables grabbing they keyboard as well as the mouse when
enabling grabs, preventing other software (e.g. the Window Manager)
from filtering key events such as special keys including Print
Screen.
Enable grabs during the key input dialog in setup.
These two changes mean you can bind Print Screen and use it for
actions in-game.
The special keys only work when the grab is enabled: so in-game,
but not in menus: this is a regression to the SDL 1.2 behaviour.
Fixes #765.","Bad Thing

indeed :(",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,917,2017-06-19T16:02:06Z,2017-06-21T13:24:55Z,2017-06-21T13:24:55Z,CLOSED,False,22,14,3,https://github.com/jmtd,Enable SDL_HINT_GRAB_KEYBOARD for special keys,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/917,https://github.com/jmtd,10,https://github.com/chocolate-doom/chocolate-doom/pull/917#issuecomment-310077248,"This enables grabbing they keyboard as well as the mouse when
enabling grabs, preventing other software (e.g. the Window Manager)
from filtering key events such as special keys including Print
Screen.
Enable grabs during the key input dialog in setup.
These two changes mean you can bind Print Screen and use it for
actions in-game.
The special keys only work when the grab is enabled: so in-game,
but not in menus: this is a regression to the SDL 1.2 behaviour.
Fixes #765.","I'm going to close this, I think we prefer the older behaviour to breaking alt-tab etc.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,918,2017-06-20T14:59:19Z,2017-06-20T15:13:58Z,2017-06-20T15:13:58Z,MERGED,True,1,0,1,https://github.com/devnexen,Tiny memory leak fix in call error path.,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/918,https://github.com/devnexen,1,https://github.com/chocolate-doom/chocolate-doom/pull/918,,,True,{'THUMBS_UP': ['https://github.com/jmtd']}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,918,2017-06-20T14:59:19Z,2017-06-20T15:13:58Z,2017-06-20T15:13:58Z,MERGED,True,1,0,1,https://github.com/devnexen,Tiny memory leak fix in call error path.,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/918,https://github.com/fabiangreffrath,2,https://github.com/chocolate-doom/chocolate-doom/pull/918#issuecomment-309791058,,"LGTM, thanks!",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,923,2017-07-22T16:57:24Z,2017-07-22T21:26:33Z,2017-08-12T15:47:00Z,MERGED,True,2,0,1,https://github.com/turol,setup: Fix missing va_end,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/923,https://github.com/turol,1,https://github.com/chocolate-doom/chocolate-doom/pull/923,Found with cppcheck,Found with cppcheck,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,925,2017-07-28T04:18:24Z,2017-08-13T18:50:24Z,2018-03-18T17:29:34Z,CLOSED,False,93,31,2,https://github.com/chungy,Write out aspect-corrected PCX or PNG screenshots based on game display settings,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/925,https://github.com/chungy,1,https://github.com/chocolate-doom/chocolate-doom/pull/925,"This is my proposed resolution to #920, decoupling the issue of aspect-corrected screenshots from the file format being used, adding the capability for 320×200 PNGs and 1600×1200 PCXs.","This is my proposed resolution to #920, decoupling the issue of aspect-corrected screenshots from the file format being used, adding the capability for 320×200 PNGs and 1600×1200 PCXs.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,925,2017-07-28T04:18:24Z,2017-08-13T18:50:24Z,2018-03-18T17:29:34Z,CLOSED,False,93,31,2,https://github.com/chungy,Write out aspect-corrected PCX or PNG screenshots based on game display settings,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/925,https://github.com/AXDOOMER,2,https://github.com/chocolate-doom/chocolate-doom/pull/925#issuecomment-318567047,"This is my proposed resolution to #920, decoupling the issue of aspect-corrected screenshots from the file format being used, adding the capability for 320×200 PNGs and 1600×1200 PCXs.",The PCX screenshots are probably the only thing in the discussion that people seemed to agree on and said that it shouldn't be changed. The PCX format is especially stated as obsolete in the Chocolate-Doom philosophy document and I find it surreal that anyone would want to save screenshots as 1600×1200 PCX files.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,925,2017-07-28T04:18:24Z,2017-08-13T18:50:24Z,2018-03-18T17:29:34Z,CLOSED,False,93,31,2,https://github.com/chungy,Write out aspect-corrected PCX or PNG screenshots based on game display settings,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/925,https://github.com/chungy,3,https://github.com/chocolate-doom/chocolate-doom/pull/925#issuecomment-318865149,"This is my proposed resolution to #920, decoupling the issue of aspect-corrected screenshots from the file format being used, adding the capability for 320×200 PNGs and 1600×1200 PCXs.","@fabiangreffrath in the other thread said (I believe directed at this PR):

Thank you, but I don't think anyone ever seriously asked for aspect ratio corrected PCX screenshots. As far as I understood it, the entire discussion was about PNG screenshots respecting the aspect ratio correction setting chosen for the rendering.

It seems dumb and arbitrary either way for me. I feel a little more comfortable with treating both file formats basically the same, but the PCX commit can easily be left out of a merge if that's the consensus.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,925,2017-07-28T04:18:24Z,2017-08-13T18:50:24Z,2018-03-18T17:29:34Z,CLOSED,False,93,31,2,https://github.com/chungy,Write out aspect-corrected PCX or PNG screenshots based on game display settings,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/925,https://github.com/chungy,4,https://github.com/chocolate-doom/chocolate-doom/pull/925#issuecomment-320525017,"This is my proposed resolution to #920, decoupling the issue of aspect-corrected screenshots from the file format being used, adding the capability for 320×200 PNGs and 1600×1200 PCXs.",Any updates on the route to go?,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,925,2017-07-28T04:18:24Z,2017-08-13T18:50:24Z,2018-03-18T17:29:34Z,CLOSED,False,93,31,2,https://github.com/chungy,Write out aspect-corrected PCX or PNG screenshots based on game display settings,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/925,https://github.com/AXDOOMER,5,https://github.com/chocolate-doom/chocolate-doom/pull/925#issuecomment-320810842,"This is my proposed resolution to #920, decoupling the issue of aspect-corrected screenshots from the file format being used, adding the capability for 320×200 PNGs and 1600×1200 PCXs.","The current behavior is fine. I don't see why it should be changed because a few people complained that the feature doesn't do what they expected.
In my case, I don't have any preference for the aspect-ratio that PNG screenshots should have, I just think that 1600x1200 screenshots show exactly how Doom is supposed to be displayed on a screen. We should keep doing this rather than going with anyone's personal preference.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,925,2017-07-28T04:18:24Z,2017-08-13T18:50:24Z,2018-03-18T17:29:34Z,CLOSED,False,93,31,2,https://github.com/chungy,Write out aspect-corrected PCX or PNG screenshots based on game display settings,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/925,https://github.com/bb010g,6,https://github.com/chocolate-doom/chocolate-doom/pull/925#issuecomment-321014499,"This is my proposed resolution to #920, decoupling the issue of aspect-corrected screenshots from the file format being used, adding the capability for 320×200 PNGs and 1600×1200 PCXs.","I don't think corrected PCXs are needed, but forcing you to convert to PNG to use your current aspect ratio seems weird. PNG is the format most people will be wanting screenshots in, and if we're already not copying PCX behaviour, using the current correction setting for PNG screenshots makes the most sense to me.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,925,2017-07-28T04:18:24Z,2017-08-13T18:50:24Z,2018-03-18T17:29:34Z,CLOSED,False,93,31,2,https://github.com/chungy,Write out aspect-corrected PCX or PNG screenshots based on game display settings,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/925,https://github.com/fragglet,7,https://github.com/chocolate-doom/chocolate-doom/pull/925#issuecomment-321056252,"This is my proposed resolution to #920, decoupling the issue of aspect-corrected screenshots from the file format being used, adding the capability for 320×200 PNGs and 1600×1200 PCXs.","I agree with not changing PCX files - ie. aspect ratio-corrected should always be PNG. In particular, the 1600x1200 (ie. ""huge"") PNGs are only considered ""okay"" because PNG has good enough compression that the file size doesn't become correspondingly huge. ISTR Linguica noted that a 1600x1200 PNG screenshot is smaller than a 320x200 PCX.
That means the question is whether PNG screenshots should be aspect ratio-corrected based on whether the user's screen is aspect ratio correct. I would suggest yes. Probably the most sensible logic is:


If !png_screenshots, write a 320x200 PCX.


If png_screenshots && aspect_ratio_correct, write a 1600x1200 PNG.


If png_screenshots && !aspect_ratio_correct, write a 320x200 PNG.


What do people think?",True,"{'THUMBS_UP': ['https://github.com/bb010g', 'https://github.com/chungy']}"
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,925,2017-07-28T04:18:24Z,2017-08-13T18:50:24Z,2018-03-18T17:29:34Z,CLOSED,False,93,31,2,https://github.com/chungy,Write out aspect-corrected PCX or PNG screenshots based on game display settings,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/925,https://github.com/chungy,8,https://github.com/chocolate-doom/chocolate-doom/pull/925#issuecomment-321058821,"This is my proposed resolution to #920, decoupling the issue of aspect-corrected screenshots from the file format being used, adding the capability for 320×200 PNGs and 1600×1200 PCXs.","I'm most inclined to agree with it, and that'd involve only merging 76d72fc.

ISTR Linguica noted that a 1600x1200 PNG screenshot is smaller than a 320x200 PCX.

It might remain true regardless, but some of this might be due to Chocolate Doom not really exploiting RLE in PCX, instead we just escape bytes that have the upper two bits set. At present, the smallest PCXes we can write are about 64KB even though it could just as well be 1KB. I'm just musing, I don't think it's worth pursuing anything complicated for RLE compressing our PCXes.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,925,2017-07-28T04:18:24Z,2017-08-13T18:50:24Z,2018-03-18T17:29:34Z,CLOSED,False,93,31,2,https://github.com/chungy,Write out aspect-corrected PCX or PNG screenshots based on game display settings,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/925,https://github.com/chungy,9,https://github.com/chocolate-doom/chocolate-doom/pull/925#issuecomment-322059915,"This is my proposed resolution to #920, decoupling the issue of aspect-corrected screenshots from the file format being used, adding the capability for 320×200 PNGs and 1600×1200 PCXs.",I'll go ahead and merge just that commit. I'll leave my branch around if it becomes useful in the future.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,925,2017-07-28T04:18:24Z,2017-08-13T18:50:24Z,2018-03-18T17:29:34Z,CLOSED,False,93,31,2,https://github.com/chungy,Write out aspect-corrected PCX or PNG screenshots based on game display settings,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/925,https://github.com/fragglet,10,https://github.com/chocolate-doom/chocolate-doom/pull/925#issuecomment-322089832,"This is my proposed resolution to #920, decoupling the issue of aspect-corrected screenshots from the file format being used, adding the capability for 320×200 PNGs and 1600×1200 PCXs.",Thanks!,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,926,2017-07-30T15:38:46Z,2017-07-30T15:41:35Z,2017-07-30T15:41:35Z,CLOSED,False,107,146,22,None,Trying to Merge the Master Fork w/ Mine,44,[],https://github.com/chocolate-doom/chocolate-doom/pull/926,None,1,https://github.com/chocolate-doom/chocolate-doom/pull/926,I still don't fucking understand GitHub,I still don't fucking understand GitHub,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,927,2017-08-04T16:39:58Z,2017-08-04T16:43:06Z,2017-08-04T16:43:06Z,CLOSED,False,14382,15912,195,https://github.com/fjrosario,Patch 1,308,[],https://github.com/chocolate-doom/chocolate-doom/pull/927,https://github.com/fjrosario,1,https://github.com/chocolate-doom/chocolate-doom/pull/927,Just fixed a grammatical error in README.md,Just fixed a grammatical error in README.md,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,928,2017-08-04T16:44:59Z,2017-08-04T16:50:15Z,2017-08-04T16:50:18Z,MERGED,True,1,1,1,https://github.com/fjrosario,Fixed grammar error in README.md,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/928,https://github.com/fjrosario,1,https://github.com/chocolate-doom/chocolate-doom/pull/928,Just fixed grammar error in README.,Just fixed grammar error in README.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,928,2017-08-04T16:44:59Z,2017-08-04T16:50:15Z,2017-08-04T16:50:18Z,MERGED,True,1,1,1,https://github.com/fjrosario,Fixed grammar error in README.md,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/928,https://github.com/chungy,2,https://github.com/chocolate-doom/chocolate-doom/pull/928#issuecomment-320298129,Just fixed grammar error in README.,Thanks!,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,932,2017-08-08T20:24:17Z,2017-08-08T20:44:14Z,2017-08-09T04:33:51Z,CLOSED,False,51,0,4,https://github.com/devnexen,Few memory leak fixes. at exit chained functions and,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/932,https://github.com/devnexen,1,https://github.com/chocolate-doom/chocolate-doom/pull/932,various string mem allocations.,various string mem allocations.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,932,2017-08-08T20:24:17Z,2017-08-08T20:44:14Z,2017-08-09T04:33:51Z,CLOSED,False,51,0,4,https://github.com/devnexen,Few memory leak fixes. at exit chained functions and,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/932,https://github.com/fragglet,2,https://github.com/chocolate-doom/chocolate-doom/pull/932#issuecomment-321073330,various string mem allocations.,"Can you explain why this ""string tracking and free"" system is needed?
Some context here on why I'm asking.
At the very least, there are various calls to M_StringDuplicate() and M_StringReplace() throughout the codebase that already do their own calls to free(), so it looks like this will be introducing a number of double-free errors.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,932,2017-08-08T20:24:17Z,2017-08-08T20:44:14Z,2017-08-09T04:33:51Z,CLOSED,False,51,0,4,https://github.com/devnexen,Few memory leak fixes. at exit chained functions and,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/932,https://github.com/fragglet,3,https://github.com/chocolate-doom/chocolate-doom/pull/932#issuecomment-321076420,various string mem allocations.,"Taking another look, there are a number of other bugs here, too (all strings will be randomly freed once 128 strings have been allocated; M_FreeStrings() won't be called if you have the show_endoom setting turned off). I'm going to go ahead and close this PR, but thank you for contributing nonetheless. Happy to discuss this further if you wish.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,932,2017-08-08T20:24:17Z,2017-08-08T20:44:14Z,2017-08-09T04:33:51Z,CLOSED,False,51,0,4,https://github.com/devnexen,Few memory leak fixes. at exit chained functions and,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/932,https://github.com/devnexen,4,https://github.com/chocolate-doom/chocolate-doom/pull/932#issuecomment-321077827,various string mem allocations.,Too bad I had modified meanwhile indeed I came to same conclusions for few M_StringDuplicate calls.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,932,2017-08-08T20:24:17Z,2017-08-08T20:44:14Z,2017-08-09T04:33:51Z,CLOSED,False,51,0,4,https://github.com/devnexen,Few memory leak fixes. at exit chained functions and,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/932,https://github.com/fragglet,5,https://github.com/chocolate-doom/chocolate-doom/pull/932#issuecomment-321079826,various string mem allocations.,My larger concern (and reason I closed the PR) is that I don't see that this solves any real problem. There's no need to free strings before exiting the program; see the page I linked in my previous comment.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,932,2017-08-08T20:24:17Z,2017-08-08T20:44:14Z,2017-08-09T04:33:51Z,CLOSED,False,51,0,4,https://github.com/devnexen,Few memory leak fixes. at exit chained functions and,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/932,https://github.com/devnexen,6,https://github.com/chocolate-doom/chocolate-doom/pull/932#issuecomment-321082846,various string mem allocations.,Fair points 😊,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,932,2017-08-08T20:24:17Z,2017-08-08T20:44:14Z,2017-08-09T04:33:51Z,CLOSED,False,51,0,4,https://github.com/devnexen,Few memory leak fixes. at exit chained functions and,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/932,https://github.com/turol,7,https://github.com/chocolate-doom/chocolate-doom/pull/932#issuecomment-321150085,various string mem allocations.,When using Valgrind and ASAN it's helpful to fix memory leaks even when you know the memory will be freed on exit since it cuts down on false positives and helps you see real memory leaks in the logs.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,933,2017-08-12T11:37:08Z,2017-08-12T22:55:51Z,2017-08-12T22:55:54Z,MERGED,True,3,0,1,https://github.com/turol,Fix resource leak on PNG saving failure paths,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/933,https://github.com/turol,1,https://github.com/chocolate-doom/chocolate-doom/pull/933,,,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,933,2017-08-12T11:37:08Z,2017-08-12T22:55:51Z,2017-08-12T22:55:54Z,MERGED,True,3,0,1,https://github.com/turol,Fix resource leak on PNG saving failure paths,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/933,https://github.com/fragglet,2,https://github.com/chocolate-doom/chocolate-doom/pull/933#issuecomment-322010904,,Thanks.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,936,2017-08-15T16:43:56Z,2017-08-23T10:18:44Z,2017-08-23T10:18:44Z,CLOSED,False,22,3,3,https://github.com/turol,Gracefully handle realloc failures,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/936,https://github.com/turol,1,https://github.com/chocolate-doom/chocolate-doom/pull/936,"Quit when realloc fails and make sure the original pointer is not lost. The pointers still leak because there are no atexit handlers for them.
I've only tested the first one of these.","Quit when realloc fails and make sure the original pointer is not lost. The pointers still leak because there are no atexit handlers for them.
I've only tested the first one of these.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,936,2017-08-15T16:43:56Z,2017-08-23T10:18:44Z,2017-08-23T10:18:44Z,CLOSED,False,22,3,3,https://github.com/turol,Gracefully handle realloc failures,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/936,https://github.com/fragglet,2,https://github.com/chocolate-doom/chocolate-doom/pull/936#issuecomment-322557777,"Quit when realloc fails and make sure the original pointer is not lost. The pointers still leak because there are no atexit handlers for them.
I've only tested the first one of these.","It's going to turn the codebase into a mess if you keep adding these. If you really must do this then I recommend adding a new low-level function called I_Realloc as a wrapper around realloc() that exits with an error if it fails.
But to be honest I kind of suspect it's a waste of time - on Linux for example, malloc never fails, and I suspect it will never fail in practice on any other system either.",True,{'THUMBS_UP': ['https://github.com/bb010g']}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,936,2017-08-15T16:43:56Z,2017-08-23T10:18:44Z,2017-08-23T10:18:44Z,CLOSED,False,22,3,3,https://github.com/turol,Gracefully handle realloc failures,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/936,https://github.com/turol,3,https://github.com/chocolate-doom/chocolate-doom/pull/936#issuecomment-322561228,"Quit when realloc fails and make sure the original pointer is not lost. The pointers still leak because there are no atexit handlers for them.
I've only tested the first one of these.","These are the only ones I intend to add. cppcheck complained about them and I'd like to add it to automatic travis checks so I need to shut them up first. I could add I_Realloc but that might adversely affect tools that check things like realloc usage.
Also a point of order, the linked blog post only tested sequential mallocs on 64-bit. malloc and especially realloc can also fail in presence of address space fragmentation. This is unlikely to be a problem in this case but I like to be neat about these things.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,936,2017-08-15T16:43:56Z,2017-08-23T10:18:44Z,2017-08-23T10:18:44Z,CLOSED,False,22,3,3,https://github.com/turol,Gracefully handle realloc failures,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/936,https://github.com/fragglet,4,https://github.com/chocolate-doom/chocolate-doom/pull/936#issuecomment-322572093,"Quit when realloc fails and make sure the original pointer is not lost. The pointers still leak because there are no atexit handlers for them.
I've only tested the first one of these.",Maybe it would be easier to just find out how to make your tool suppress warnings about realloc() not being checked - I'm happy with leaving this as-is and not adding these checks.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,936,2017-08-15T16:43:56Z,2017-08-23T10:18:44Z,2017-08-23T10:18:44Z,CLOSED,False,22,3,3,https://github.com/turol,Gracefully handle realloc failures,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/936,https://github.com/turol,5,https://github.com/chocolate-doom/chocolate-doom/pull/936#issuecomment-322574624,"Quit when realloc fails and make sure the original pointer is not lost. The pointers still leak because there are no atexit handlers for them.
I've only tested the first one of these.","cppcheck has a suppression mechanism but I consider it better to fix the problem in the code since a suppression for one tool will not affect all the other tools. In particular clang's static analyzer (and clang-tidy) might also warn about these and they don't have a nice suppression mechanism. And if someone runs the code through PVS-studio (commercial product, I don't have it) it has yet another suppression system so we could end up with multiple different suppressions vs. one fix.
Also for the 2nd fix (GetTargetForAddr) it might be theoretically possible for an attacker to force address space exhaustion by flooding fake responses and result in some nastiness. The other two are probably impossible to trigger.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,936,2017-08-15T16:43:56Z,2017-08-23T10:18:44Z,2017-08-23T10:18:44Z,CLOSED,False,22,3,3,https://github.com/turol,Gracefully handle realloc failures,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/936,https://github.com/fragglet,6,https://github.com/chocolate-doom/chocolate-doom/pull/936#issuecomment-322596419,"Quit when realloc fails and make sure the original pointer is not lost. The pointers still leak because there are no atexit handlers for them.
I've only tested the first one of these.","Sounds like my previous suggestion of adding I_Realloc is probably the best approach then. If you do that, feel free to replace all occurrences of realloc() under the src/ tree, and please add it to the list in HACKING.md.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,936,2017-08-15T16:43:56Z,2017-08-23T10:18:44Z,2017-08-23T10:18:44Z,CLOSED,False,22,3,3,https://github.com/turol,Gracefully handle realloc failures,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/936,https://github.com/fabiangreffrath,7,https://github.com/chocolate-doom/chocolate-doom/pull/936#issuecomment-323013088,"Quit when realloc fails and make sure the original pointer is not lost. The pointers still leak because there are no atexit handlers for them.
I've only tested the first one of these.","Maybe this will come in handy:
https://github.com/fabiangreffrath/crispy-doom/blob/master/src/z_zone.c#L561",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,936,2017-08-15T16:43:56Z,2017-08-23T10:18:44Z,2017-08-23T10:18:44Z,CLOSED,False,22,3,3,https://github.com/turol,Gracefully handle realloc failures,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/936,https://github.com/fragglet,8,https://github.com/chocolate-doom/chocolate-doom/pull/936#issuecomment-323167108,"Quit when realloc fails and make sure the original pointer is not lost. The pointers still leak because there are no atexit handlers for them.
I've only tested the first one of these.","Yes, that's kind of what I meant, but it doesn't belong in the zone memory module.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,936,2017-08-15T16:43:56Z,2017-08-23T10:18:44Z,2017-08-23T10:18:44Z,CLOSED,False,22,3,3,https://github.com/turol,Gracefully handle realloc failures,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/936,https://github.com/turol,9,https://github.com/chocolate-doom/chocolate-doom/pull/936#issuecomment-323170645,"Quit when realloc fails and make sure the original pointer is not lost. The pointers still leak because there are no atexit handlers for them.
I've only tested the first one of these.","So where does the code belong if not there?
Also there are at least two realloc calls which already check for failure and probably shouldn't be converted. w_wad.c must close a local file pointer before quitting and midifile.c must pass the failure upwards so eventually MIDI_LoadFile can close a local file pointer.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,936,2017-08-15T16:43:56Z,2017-08-23T10:18:44Z,2017-08-23T10:18:44Z,CLOSED,False,22,3,3,https://github.com/turol,Gracefully handle realloc failures,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/936,https://github.com/fragglet,10,https://github.com/chocolate-doom/chocolate-doom/pull/936#issuecomment-323427089,"Quit when realloc fails and make sure the original pointer is not lost. The pointers still leak because there are no atexit handlers for them.
I've only tested the first one of these.","i_system.c is probably an appropriate place for it.
…
On Aug 17, 2017 3:27 PM, ""turol"" ***@***.***> wrote:
 So where does the code belong if not there?

 Also there are at least two realloc calls which already check for failure
 and probably shouldn't be converted. w_wad.c
 <https://github.com/chocolate-doom/chocolate-doom/blob/sdl2-branch/src/w_wad.c#L209>
 must close a local file pointer before quitting and midifile.c
 <https://github.com/chocolate-doom/chocolate-doom/blob/sdl2-branch/src/midifile.c#L459>
 must pass the failure upwards so eventually MIDI_LoadFile can close a
 local file pointer.

 —
 You are receiving this because you commented.
 Reply to this email directly, view it on GitHub
 <#936 (comment)>,
 or mute the thread
 <https://github.com/notifications/unsubscribe-auth/AAF6NeZ2ULFQcn6OnV62MXvHEAzC8TpOks5sZJQqgaJpZM4O30uQ>
 .",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,936,2017-08-15T16:43:56Z,2017-08-23T10:18:44Z,2017-08-23T10:18:44Z,CLOSED,False,22,3,3,https://github.com/turol,Gracefully handle realloc failures,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/936,https://github.com/fabiangreffrath,11,https://github.com/chocolate-doom/chocolate-doom/pull/936#issuecomment-323695408,"Quit when realloc fails and make sure the original pointer is not lost. The pointers still leak because there are no atexit handlers for them.
I've only tested the first one of these.","i_system.c is probably an appropriate place for it.

Indeed it is.

Also there are at least two realloc calls which already check for failure and probably shouldn't be converted

I believe that memory allocation errors should always be fatal. The only case where it is ""alright"" for realloc() to return NULL is when it is called with the size parameter equal to 0, which should be impossible in the two cases that you point to.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,936,2017-08-15T16:43:56Z,2017-08-23T10:18:44Z,2017-08-23T10:18:44Z,CLOSED,False,22,3,3,https://github.com/turol,Gracefully handle realloc failures,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/936,https://github.com/turol,12,https://github.com/chocolate-doom/chocolate-doom/pull/936#issuecomment-323699071,"Quit when realloc fails and make sure the original pointer is not lost. The pointers still leak because there are no atexit handlers for them.
I've only tested the first one of these.","In those two cases being immediately fatal results in additional resource leaks so I don't think changing them is appropriate. Fixing them without explicit checks would require RAII and exceptions and I don't think you want to convert the whole project to C++.
I_Realloc should only be for cases where you know you don't need to clean up anything else because all of your important state is in globals which will get cleaned up by atexit() handlers.
What should I_Realloc do when passed 0 size? Returning NULL seems strange and I think if that happens something strange has already happened. I'd rather make that case also a fatal error.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,936,2017-08-15T16:43:56Z,2017-08-23T10:18:44Z,2017-08-23T10:18:44Z,CLOSED,False,22,3,3,https://github.com/turol,Gracefully handle realloc failures,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/936,https://github.com/fabiangreffrath,13,https://github.com/chocolate-doom/chocolate-doom/pull/936#issuecomment-323700367,"Quit when realloc fails and make sure the original pointer is not lost. The pointers still leak because there are no atexit handlers for them.
I've only tested the first one of these.","I have just pushed a branch that does this:
#937

What should I_Realloc do when passed 0 size?

Do what the standard says:
http://pubs.opengroup.org/onlinepubs/009695399/functions/realloc.html",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,936,2017-08-15T16:43:56Z,2017-08-23T10:18:44Z,2017-08-23T10:18:44Z,CLOSED,False,22,3,3,https://github.com/turol,Gracefully handle realloc failures,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/936,https://github.com/turol,14,https://github.com/chocolate-doom/chocolate-doom/pull/936#issuecomment-323702914,"Quit when realloc fails and make sure the original pointer is not lost. The pointers still leak because there are no atexit handlers for them.
I've only tested the first one of these.","I know the standard says the pointer is freed and NULL returned but is this something we want? I'm not sure that having the calling code have to check if the count is 0 is any better than checking if the return is NULL.
Also sometimes returning NULL prevents us from marking I_Realloc with ""never returns NULL"" compiler attribute.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,936,2017-08-15T16:43:56Z,2017-08-23T10:18:44Z,2017-08-23T10:18:44Z,CLOSED,False,22,3,3,https://github.com/turol,Gracefully handle realloc failures,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/936,https://github.com/fabiangreffrath,15,https://github.com/chocolate-doom/chocolate-doom/pull/936#issuecomment-323705228,"Quit when realloc fails and make sure the original pointer is not lost. The pointers still leak because there are no atexit handlers for them.
I've only tested the first one of these.","I'm not sure that having the calling code have to check if the count is 0 is any better than checking if the return is NULL.

The returned pointer may be NULL in the exact case that the size parameter is 0. So this is not an appropriate error indicator. Only if size is non-0 this means a memory allocation error.

Also sometimes returning NULL prevents us from marking I_Realloc with ""never returns NULL"" compiler attribute

Which attribute? The C standard tells us that realloc() may return NULL and that this isn't necessarily an error, so what are you fighting against here?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,936,2017-08-15T16:43:56Z,2017-08-23T10:18:44Z,2017-08-23T10:18:44Z,CLOSED,False,22,3,3,https://github.com/turol,Gracefully handle realloc failures,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/936,https://github.com/turol,16,https://github.com/chocolate-doom/chocolate-doom/pull/936#issuecomment-323710343,"Quit when realloc fails and make sure the original pointer is not lost. The pointers still leak because there are no atexit handlers for them.
I've only tested the first one of these.","I'm thinking of a situation where we have some static analyzer which we can tell that I_Realloc never returns NULL and it can then warn about redundant NULL checks or other possible bugs. But specifying a condition like ""returns NULL except when this parameter is 0"" is not possible.
Since we're writing our own wrapper for realloc it's not really important what realloc does, what matters is how we want to specify our wrapper to minimize the possibility of someone accidentally misusing it.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,936,2017-08-15T16:43:56Z,2017-08-23T10:18:44Z,2017-08-23T10:18:44Z,CLOSED,False,22,3,3,https://github.com/turol,Gracefully handle realloc failures,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/936,https://github.com/fragglet,17,https://github.com/chocolate-doom/chocolate-doom/pull/936#issuecomment-323815449,"Quit when realloc fails and make sure the original pointer is not lost. The pointers still leak because there are no atexit handlers for them.
I've only tested the first one of these.","In those two cases being immediately fatal results in additional resource leaks so I don't think changing them is appropriate.

There is no resource leak because the program immediately exits.

I know the standard says the pointer is freed and NULL returned but is this something we want? I'm not sure that having the calling code have to check if the count is 0 is any better than checking if the return is NULL.
Also sometimes returning NULL prevents us from marking I_Realloc with ""never returns NULL"" compiler attribute.

If this is really a problem, one option might be to change I_Realloc() so that if an attempt is made to allocate 0 bytes, we instead allocate 1 byte (potentially wastes a bit of memory in rare situations, but who cares?). Then we can be certain the result from I_Realloc() is never NULL.
One question: is there a particular tool you're using right now that needs this behavior? If not then I'd rather leave the current behavior in place (can return NULL if size=0). We can add the solution described above later if necessary.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,936,2017-08-15T16:43:56Z,2017-08-23T10:18:44Z,2017-08-23T10:18:44Z,CLOSED,False,22,3,3,https://github.com/turol,Gracefully handle realloc failures,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/936,https://github.com/turol,18,https://github.com/chocolate-doom/chocolate-doom/pull/936#issuecomment-323820422,"Quit when realloc fails and make sure the original pointer is not lost. The pointers still leak because there are no atexit handlers for them.
I've only tested the first one of these.","There is no resource leak because the program immediately exits.

But ASAN and Valgrind will complain about it if they see it and scan-build might pick it up. I haven't gotten that far yet.

If this is really a problem, one option might be to change I_Realloc() so that if an attempt is made to allocate 0 bytes, we instead allocate 1 byte (potentially wastes a bit of memory in rare situations, but who cares?). Then we can be certain the result from I_Realloc() is never NULL.

I'd prefer to just quit in that situation since the implicit promise of I_Realloc is that is always returns sufficiently large valid storage. Also asking for a 0-sized allocation usually means something else has gone wrong already.

is there a particular tool you're using right now that needs this behavior?

cppcheck picked up the bad reallocs and I might be able to convince it that I_Realloc never returns NULL if we implement it that way. scan-build might pick something up once I go through the ~40 reported issues, but I wanted to fix cppcheck first since the list is shorter and they're clearly real issues.
If someone else wants to set up coverity (free for open-source projects but you have to ask, I think) that might also complain about this.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,936,2017-08-15T16:43:56Z,2017-08-23T10:18:44Z,2017-08-23T10:18:44Z,CLOSED,False,22,3,3,https://github.com/turol,Gracefully handle realloc failures,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/936,https://github.com/fragglet,19,https://github.com/chocolate-doom/chocolate-doom/pull/936#issuecomment-323840397,"Quit when realloc fails and make sure the original pointer is not lost. The pointers still leak because there are no atexit handlers for them.
I've only tested the first one of these.","But ASAN and Valgrind will complain about it if they see it and scan-build might pick it up. I haven't gotten that far yet.

I don't really know these tools very well, but if there's some way to mark I_Error as a function that never returns then maybe that would be helpful. For example, gcc has __attribute__ ((__noreturn__) that you can attach to a function to indicate this.
I'm glad you're trying to help here, but I don't want us to have to jump through hoops to make static analysis tools happy. These are established, mature analysis tools so there should be some way to do the sensible thing that isn't ""code must be written in this particular way"".

I'd prefer to just quit in that situation since the implicit promise of I_Realloc is that is always returns sufficiently large valid storage. Also asking for a 0-sized allocation usually means something else has gone wrong already.

If you've asked for a 0-sized allocation, then even NULL is large enough :) In the general case I'm not sure it necessarily indicates an error, but in the scope of this project, exiting with an error might be reasonable. We have a limited number of calls to the function. As long as we don't end up with code that looks like this then I think we're good:
    if (size > 0) {
        foo = I_Realloc(foo, size);
    } else {
        foo = NULL;
    }",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,936,2017-08-15T16:43:56Z,2017-08-23T10:18:44Z,2017-08-23T10:18:44Z,CLOSED,False,22,3,3,https://github.com/turol,Gracefully handle realloc failures,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/936,https://github.com/fabiangreffrath,20,https://github.com/chocolate-doom/chocolate-doom/pull/936#issuecomment-323934441,"Quit when realloc fails and make sure the original pointer is not lost. The pointers still leak because there are no atexit handlers for them.
I've only tested the first one of these.","I have some code in Crispy that relies in realloc()'s documented behavior [1]. It iterates through all the lumps in all loaded WADs and reallocates a buffer big enough to hold the current lump. Lumps with size 0 such as MAP01 are just as common as every other size.
And regarding static code analysis tools, I know they can be useful. But I consider it not very useful if we have to bend our code around them!
[1] https://github.com/fabiangreffrath/crispy-doom/blob/master/src/w_merge.c#L760",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,936,2017-08-15T16:43:56Z,2017-08-23T10:18:44Z,2017-08-23T10:18:44Z,CLOSED,False,22,3,3,https://github.com/turol,Gracefully handle realloc failures,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/936,https://github.com/fabiangreffrath,21,https://github.com/chocolate-doom/chocolate-doom/pull/936#issuecomment-323934724,"Quit when realloc fails and make sure the original pointer is not lost. The pointers still leak because there are no atexit handlers for them.
I've only tested the first one of these.","As long as we don't end up with code that looks like this then I think we're good:

We won't, I_Realloc() takes care of exactly that.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,936,2017-08-15T16:43:56Z,2017-08-23T10:18:44Z,2017-08-23T10:18:44Z,CLOSED,False,22,3,3,https://github.com/turol,Gracefully handle realloc failures,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/936,https://github.com/turol,22,https://github.com/chocolate-doom/chocolate-doom/pull/936#issuecomment-324286476,"Quit when realloc fails and make sure the original pointer is not lost. The pointers still leak because there are no atexit handlers for them.
I've only tested the first one of these.",Obsolete now that #937 is merged.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,937,2017-08-21T09:51:50Z,2017-08-23T06:01:54Z,2017-09-25T09:48:43Z,MERGED,True,28,17,8,https://github.com/fabiangreffrath,Add an I_Realloc() function and use it instead of realloc(),5,[],https://github.com/chocolate-doom/chocolate-doom/pull/937,https://github.com/fabiangreffrath,1,https://github.com/chocolate-doom/chocolate-doom/pull/937,,,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,937,2017-08-21T09:51:50Z,2017-08-23T06:01:54Z,2017-09-25T09:48:43Z,MERGED,True,28,17,8,https://github.com/fabiangreffrath,Add an I_Realloc() function and use it instead of realloc(),5,[],https://github.com/chocolate-doom/chocolate-doom/pull/937,https://github.com/fragglet,2,https://github.com/chocolate-doom/chocolate-doom/pull/937#issuecomment-323814586,,"~~~~Can you fix w_checksum.c as well?~~~~
Never mind, I saw you already did.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,937,2017-08-21T09:51:50Z,2017-08-23T06:01:54Z,2017-09-25T09:48:43Z,MERGED,True,28,17,8,https://github.com/fabiangreffrath,Add an I_Realloc() function and use it instead of realloc(),5,[],https://github.com/chocolate-doom/chocolate-doom/pull/937,https://github.com/fabiangreffrath,3,https://github.com/chocolate-doom/chocolate-doom/pull/937#issuecomment-324282645,,"Sorry for the little mess that I created!
I initially merged this branch into the sdl2-branch as intended. But, I also wanted this change to be in the master branch as well, because I still merge into Crispy from there. So, I cherry-picked the five commits from sdl2-branch into master and then merged master back into sdl2-branch, because there was one small documentation change in master that wasn't already merged into sdl2-branch.
However, because of their different parent commits, GIT didn't realize that the commits I cherry-picked from sdl2-branch into master were already applied to sdl2-branch and re-applied them. Apart from the duplicate entries in the commit log this is harmless, but the actual addition of the I_Realloc() function was somehow applied twice in this course.
However, I think I cleaned it up now, so sorry again for that!",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,937,2017-08-21T09:51:50Z,2017-08-23T06:01:54Z,2017-09-25T09:48:43Z,MERGED,True,28,17,8,https://github.com/fabiangreffrath,Add an I_Realloc() function and use it instead of realloc(),5,[],https://github.com/chocolate-doom/chocolate-doom/pull/937,https://github.com/jmtd,4,https://github.com/chocolate-doom/chocolate-doom/pull/937#issuecomment-326542270,,"But, I also wanted this change to be in the master branch as well, because I still merge into Crispy from there.

I guess that will change when we get v3 out. I really hope we can get it out this year.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,937,2017-08-21T09:51:50Z,2017-08-23T06:01:54Z,2017-09-25T09:48:43Z,MERGED,True,28,17,8,https://github.com/fabiangreffrath,Add an I_Realloc() function and use it instead of realloc(),5,[],https://github.com/chocolate-doom/chocolate-doom/pull/937,https://github.com/fabiangreffrath,5,https://github.com/chocolate-doom/chocolate-doom/pull/937#issuecomment-326820690,,"I guess that will change when we get v3 out.

Yes, it will.

I really hope we can get it out this year.

Oh please!",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,937,2017-08-21T09:51:50Z,2017-08-23T06:01:54Z,2017-09-25T09:48:43Z,MERGED,True,28,17,8,https://github.com/fabiangreffrath,Add an I_Realloc() function and use it instead of realloc(),5,[],https://github.com/chocolate-doom/chocolate-doom/pull/937,https://github.com/fabiangreffrath,6,https://github.com/chocolate-doom/chocolate-doom/pull/937#issuecomment-326821574,,"In this context, we already leave the current master branch behind. I would love to merge the latest changes that @fragglet introduced into Crispy, but they were only applied to the sdl2-branch. :(",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,937,2017-08-21T09:51:50Z,2017-08-23T06:01:54Z,2017-09-25T09:48:43Z,MERGED,True,28,17,8,https://github.com/fabiangreffrath,Add an I_Realloc() function and use it instead of realloc(),5,[],https://github.com/chocolate-doom/chocolate-doom/pull/937,https://github.com/fabiangreffrath,7,https://github.com/chocolate-doom/chocolate-doom/pull/937#issuecomment-331829302,,"I guess that will change when we get v3 out. I really hope we can get it out this year.

Sorry for posting a related question in an unrelated thread:
Taken the following sequence of events:

I merge the current choco/sdl2-branch into crispy/master
The choco/sdl2-branch is merged into choco/master
I merge choco/master into crispy/master

Will I end up with duplicate commits and probably merge conflicts again?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,937,2017-08-21T09:51:50Z,2017-08-23T06:01:54Z,2017-09-25T09:48:43Z,MERGED,True,28,17,8,https://github.com/fabiangreffrath,Add an I_Realloc() function and use it instead of realloc(),5,[],https://github.com/chocolate-doom/chocolate-doom/pull/937,https://github.com/turol,8,https://github.com/chocolate-doom/chocolate-doom/pull/937#issuecomment-331832088,,You shouldn't have any problems on the second merge. At least as long as you do a real merge and don't just cherry-pick the commits.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,939,2017-09-02T13:12:52Z,2017-09-03T20:29:27Z,2017-09-03T20:29:27Z,MERGED,True,16,1,2,https://github.com/turol,Add cppcheck static analysis to travis build,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/939,https://github.com/turol,1,https://github.com/chocolate-doom/chocolate-doom/pull/939,"This runs cppcheck static analysis as part of travis build. If any warnings are found it should fail the check.
Currently I expect this to fail since there are some potential array out-of-bounds errors. Some of them are probably false positives. Someone who knows the code better should look at them and we need to discuss the best way to silence them. DON'T MERGE until that is done.
Side note: I'm using two cores (-j2) for cppcheck. Should we also enable this for normal builds?","This runs cppcheck static analysis as part of travis build. If any warnings are found it should fail the check.
Currently I expect this to fail since there are some potential array out-of-bounds errors. Some of them are probably false positives. Someone who knows the code better should look at them and we need to discuss the best way to silence them. DON'T MERGE until that is done.
Side note: I'm using two cores (-j2) for cppcheck. Should we also enable this for normal builds?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,939,2017-09-02T13:12:52Z,2017-09-03T20:29:27Z,2017-09-03T20:29:27Z,MERGED,True,16,1,2,https://github.com/turol,Add cppcheck static analysis to travis build,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/939,https://github.com/turol,2,https://github.com/chocolate-doom/chocolate-doom/pull/939#issuecomment-326744028,"This runs cppcheck static analysis as part of travis build. If any warnings are found it should fail the check.
Currently I expect this to fail since there are some potential array out-of-bounds errors. Some of them are probably false positives. Someone who knows the code better should look at them and we need to discuss the best way to silence them. DON'T MERGE until that is done.
Side note: I'm using two cores (-j2) for cppcheck. Should we also enable this for normal builds?","Well, that was not the failure I expected. Got this:
[textscreen/txt_fileselect.c:104]: (error) Common realloc mistake: 'result' nulled but not freed upon failure
when I was excepting something like this:
[src/doom/p_mobj.c:658]: (error) Array 'mobjinfo[137]' accessed at index 137, which is out of bounds.
[src/doom/p_switch.c:117]: (error) Array 'alphSwitchList[41]' accessed at index 49, which is out of bounds.
[src/heretic/p_switch.c:115]: (error) Array 'alphSwitchList[3]' accessed at index 49, which is out of bounds.
[src/strife/p_mobj.c:786]: (error) Array 'mobjinfo[344]' accessed at index 344, which is out of bounds.
[src/strife/p_switch.c:148]: (error) Array 'alphSwitchList[70]' accessed at index 79, which is out of bounds.

Looks like the cppcheck that travis installs is an older version which doesn't have this check.
On the positive side, we know it works and cppcheck warnings will cause travis failure. We should fix that realloc problem and then we could in theory merge this. This might cause a problem later when cppcheck updates though. Should we try to do something about those out-of-bounds bugs at this time?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,939,2017-09-02T13:12:52Z,2017-09-03T20:29:27Z,2017-09-03T20:29:27Z,MERGED,True,16,1,2,https://github.com/turol,Add cppcheck static analysis to travis build,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/939,https://github.com/turol,3,https://github.com/chocolate-doom/chocolate-doom/pull/939#issuecomment-326744103,"This runs cppcheck static analysis as part of travis build. If any warnings are found it should fail the check.
Currently I expect this to fail since there are some potential array out-of-bounds errors. Some of them are probably false positives. Someone who knows the code better should look at them and we need to discuss the best way to silence them. DON'T MERGE until that is done.
Side note: I'm using two cores (-j2) for cppcheck. Should we also enable this for normal builds?","Another thing, should I try to make the progress report visible? Progress is printed to stdout and warnings to stderr. Printing the warnings only at the end requires some trickery with files.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,939,2017-09-02T13:12:52Z,2017-09-03T20:29:27Z,2017-09-03T20:29:27Z,MERGED,True,16,1,2,https://github.com/turol,Add cppcheck static analysis to travis build,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/939,https://github.com/fragglet,4,https://github.com/chocolate-doom/chocolate-doom/pull/939#issuecomment-326773987,"This runs cppcheck static analysis as part of travis build. If any warnings are found it should fail the check.
Currently I expect this to fail since there are some potential array out-of-bounds errors. Some of them are probably false positives. Someone who knows the code better should look at them and we need to discuss the best way to silence them. DON'T MERGE until that is done.
Side note: I'm using two cores (-j2) for cppcheck. Should we also enable this for normal builds?","Fixed the txt_fileselect.c problem. Try again.

Looks like the cppcheck that travis installs is an older version which doesn't have this check.

That's unfortunate. I expect that Travis will catch up eventually; I'm happy leaving it as-is for now. Would be good if we could confirm that it's using an old version and that this isn't a configuration error?

On the positive side, we know it works and cppcheck warnings will cause travis failure. We should fix that realloc problem and then we could in theory merge this. This might cause a problem later when cppcheck updates though. Should we try to do something about those out-of-bounds bugs at this time?

If there's only this small handful of out-of-bounds bugs then I suggest we fix them before merging. Could be done as a separate PR.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,939,2017-09-02T13:12:52Z,2017-09-03T20:29:27Z,2017-09-03T20:29:27Z,MERGED,True,16,1,2,https://github.com/turol,Add cppcheck static analysis to travis build,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/939,https://github.com/fragglet,5,https://github.com/chocolate-doom/chocolate-doom/pull/939#issuecomment-326775051,"This runs cppcheck static analysis as part of travis build. If any warnings are found it should fail the check.
Currently I expect this to fail since there are some potential array out-of-bounds errors. Some of them are probably false positives. Someone who knows the code better should look at them and we need to discuss the best way to silence them. DON'T MERGE until that is done.
Side note: I'm using two cores (-j2) for cppcheck. Should we also enable this for normal builds?",Fixed the warnings mentioned in your comment above. Can you confirm whether this now passes cleanly?,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,939,2017-09-02T13:12:52Z,2017-09-03T20:29:27Z,2017-09-03T20:29:27Z,MERGED,True,16,1,2,https://github.com/turol,Add cppcheck static analysis to travis build,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/939,https://github.com/turol,6,https://github.com/chocolate-doom/chocolate-doom/pull/939#issuecomment-326784192,"This runs cppcheck static analysis as part of travis build. If any warnings are found it should fail the check.
Currently I expect this to fail since there are some potential array out-of-bounds errors. Some of them are probably false positives. Someone who knows the code better should look at them and we need to discuss the best way to silence them. DON'T MERGE until that is done.
Side note: I'm using two cores (-j2) for cppcheck. Should we also enable this for normal builds?","Local build (with cppcheck 1.80) is now clean, let's see what travis says.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,939,2017-09-02T13:12:52Z,2017-09-03T20:29:27Z,2017-09-03T20:29:27Z,MERGED,True,16,1,2,https://github.com/turol,Add cppcheck static analysis to travis build,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/939,https://github.com/turol,7,https://github.com/chocolate-doom/chocolate-doom/pull/939#issuecomment-326784508,"This runs cppcheck static analysis as part of travis build. If any warnings are found it should fail the check.
Currently I expect this to fail since there are some potential array out-of-bounds errors. Some of them are probably false positives. Someone who knows the code better should look at them and we need to discuss the best way to silence them. DON'T MERGE until that is done.
Side note: I'm using two cores (-j2) for cppcheck. Should we also enable this for normal builds?",Looks like it's clean. Do you want a progress report in the travis console or are you ok with it as it is?,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,939,2017-09-02T13:12:52Z,2017-09-03T20:29:27Z,2017-09-03T20:29:27Z,MERGED,True,16,1,2,https://github.com/turol,Add cppcheck static analysis to travis build,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/939,https://github.com/fragglet,8,https://github.com/chocolate-doom/chocolate-doom/pull/939#issuecomment-326829160,"This runs cppcheck static analysis as part of travis build. If any warnings are found it should fail the check.
Currently I expect this to fail since there are some potential array out-of-bounds errors. Some of them are probably false positives. Someone who knows the code better should look at them and we need to discuss the best way to silence them. DON'T MERGE until that is done.
Side note: I'm using two cores (-j2) for cppcheck. Should we also enable this for normal builds?",Looks good to me.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,940,2017-09-15T19:33:47Z,2017-09-15T21:32:58Z,2017-09-15T21:33:02Z,MERGED,True,7,5,2,https://github.com/fabiangreffrath,add a -shorttics command line option,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/940,https://github.com/fabiangreffrath,1,https://github.com/chocolate-doom/chocolate-doom/pull/940,"I was really surprised today when ZeroMaster010 told me that he always
has to start Doom with the -record parameter to practice for his
record runs, because there is no other way to enable low-resolution
turning during normal play.
Why is that? I mean, we have a command line switch to enable
full-resolution turning even when recording a demo, so why shouldn't
there be a switch to force low-esolution turning even when not
recording a demo. PrBoom+ already has this switch.","I was really surprised today when ZeroMaster010 told me that he always
has to start Doom with the -record parameter to practice for his
record runs, because there is no other way to enable low-resolution
turning during normal play.
Why is that? I mean, we have a command line switch to enable
full-resolution turning even when recording a demo, so why shouldn't
there be a switch to force low-esolution turning even when not
recording a demo. PrBoom+ already has this switch.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,942,2017-09-20T08:26:56Z,2017-09-20T13:52:23Z,2017-09-20T13:52:32Z,MERGED,True,14,0,1,https://github.com/fabiangreffrath,"Make ""make"" aware of convenience libraries in subdirectories",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/942,https://github.com/fabiangreffrath,1,https://github.com/chocolate-doom/chocolate-doom/pull/942,"This may not be the most sophisticated solution (i.e. I would have
preferred to use wildcards in the target rules), but it should be
good enough to fix #938.","This may not be the most sophisticated solution (i.e. I would have
preferred to use wildcards in the target rules), but it should be
good enough to fix #938.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,942,2017-09-20T08:26:56Z,2017-09-20T13:52:23Z,2017-09-20T13:52:32Z,MERGED,True,14,0,1,https://github.com/fabiangreffrath,"Make ""make"" aware of convenience libraries in subdirectories",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/942,https://github.com/fragglet,2,https://github.com/chocolate-doom/chocolate-doom/pull/942#issuecomment-330828759,"This may not be the most sophisticated solution (i.e. I would have
preferred to use wildcards in the target rules), but it should be
good enough to fix #938.","I don't particularly like it but I don't have a better suggestion at present, so I think this is okay.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,942,2017-09-20T08:26:56Z,2017-09-20T13:52:23Z,2017-09-20T13:52:32Z,MERGED,True,14,0,1,https://github.com/fabiangreffrath,"Make ""make"" aware of convenience libraries in subdirectories",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/942,https://github.com/fabiangreffrath,3,https://github.com/chocolate-doom/chocolate-doom/pull/942#issuecomment-330858232,"This may not be the most sophisticated solution (i.e. I would have
preferred to use wildcards in the target rules), but it should be
good enough to fix #938.",Thanks!,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,943,2017-09-28T03:45:09Z,2017-10-01T06:19:16Z,2017-10-01T06:19:16Z,MERGED,True,342,238,10,https://github.com/fragglet,Introduce a network protocol versioning scheme.,6,[],https://github.com/chocolate-doom/chocolate-doom/pull/943,https://github.com/fragglet,1,https://github.com/chocolate-doom/chocolate-doom/pull/943,"This changes how Chocolate Doom's network protocol is versioned; previously, we rejected clients if they were not running exactly the same version of Chocolate Doom as the server. Chocolate Doom is stable enough that we can be reasonably certain that different versions will be able to play together without desyncing, so just introduce the concept of a protocol number; if the network protocol changes we will introduce a new protocol, while still maintaining the ability to play games with older versions using old protocols.
The same scheme will also allow forks of Chocolate Doom to implement their own modified or extended protocols while retaining the ability to support the original protocol and play games with Chocolate Doom players if they wish. The protocol to use is automatically negotiated when a client connects to a server, by identifying a common protocol that both can support.
Fixes #686.","This changes how Chocolate Doom's network protocol is versioned; previously, we rejected clients if they were not running exactly the same version of Chocolate Doom as the server. Chocolate Doom is stable enough that we can be reasonably certain that different versions will be able to play together without desyncing, so just introduce the concept of a protocol number; if the network protocol changes we will introduce a new protocol, while still maintaining the ability to play games with older versions using old protocols.
The same scheme will also allow forks of Chocolate Doom to implement their own modified or extended protocols while retaining the ability to support the original protocol and play games with Chocolate Doom players if they wish. The protocol to use is automatically negotiated when a client connects to a server, by identifying a common protocol that both can support.
Fixes #686.",True,"{'HOORAY': ['https://github.com/bb010g', 'https://github.com/AXDOOMER']}"
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,943,2017-09-28T03:45:09Z,2017-10-01T06:19:16Z,2017-10-01T06:19:16Z,MERGED,True,342,238,10,https://github.com/fragglet,Introduce a network protocol versioning scheme.,6,[],https://github.com/chocolate-doom/chocolate-doom/pull/943,https://github.com/fragglet,2,https://github.com/chocolate-doom/chocolate-doom/pull/943#issuecomment-332719882,"This changes how Chocolate Doom's network protocol is versioned; previously, we rejected clients if they were not running exactly the same version of Chocolate Doom as the server. Chocolate Doom is stable enough that we can be reasonably certain that different versions will be able to play together without desyncing, so just introduce the concept of a protocol number; if the network protocol changes we will introduce a new protocol, while still maintaining the ability to play games with older versions using old protocols.
The same scheme will also allow forks of Chocolate Doom to implement their own modified or extended protocols while retaining the ability to support the original protocol and play games with Chocolate Doom players if they wish. The protocol to use is automatically negotiated when a client connects to a server, by identifying a common protocol that both can support.
Fixes #686.","I appreciate that not many people other than me know much about the Chocolate Doom networking code but I'm hoping someone can take a look at this anyway. In particular @fabiangreffrath if you could take a look, I'm expecting this to be useful for Crispy Doom. I've included detailed commit descriptions so if you can at least take a look and see if this is a scheme you think can work I'd appreciate it.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,943,2017-09-28T03:45:09Z,2017-10-01T06:19:16Z,2017-10-01T06:19:16Z,MERGED,True,342,238,10,https://github.com/fragglet,Introduce a network protocol versioning scheme.,6,[],https://github.com/chocolate-doom/chocolate-doom/pull/943,https://github.com/fabiangreffrath,3,https://github.com/chocolate-doom/chocolate-doom/pull/943#issuecomment-332934321,"This changes how Chocolate Doom's network protocol is versioned; previously, we rejected clients if they were not running exactly the same version of Chocolate Doom as the server. Chocolate Doom is stable enough that we can be reasonably certain that different versions will be able to play together without desyncing, so just introduce the concept of a protocol number; if the network protocol changes we will introduce a new protocol, while still maintaining the ability to play games with older versions using old protocols.
The same scheme will also allow forks of Chocolate Doom to implement their own modified or extended protocols while retaining the ability to support the original protocol and play games with Chocolate Doom players if they wish. The protocol to use is automatically negotiated when a client connects to a server, by identifying a common protocol that both can support.
Fixes #686.","Thanks for implementing this so promptly, @fragglet !
Let me please summarize and check if I have understood everything so far:
In order to remain network-compatible with Chocolate Doom, I would not have to change anything and just leave the ""CHOCOLATE_DOOM_0"" network protocol in-place. Should I ever decide to add a Crispy-specific but Choco-incompatible network protocol or game mode (that e.g. allows jumping or vertical aiming in network games), I would have to add this to the protocol array and handle the differences at run-time (where in the code would this decision be taken, in NET_CL_ParseSYN()?), right?
Another question: Say, there is a Crispy Doom server waiting for connections. The first client to connect is a Crispy Doom client so both server and client would negotiate on the Crispy-specific protocol. Then a Chocolate Doom client connects. Will this be rejected or will the server and the first client now decide to agree upon the Choco protocol, because that's the common denominator with the second client?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,943,2017-09-28T03:45:09Z,2017-10-01T06:19:16Z,2017-10-01T06:19:16Z,MERGED,True,342,238,10,https://github.com/fragglet,Introduce a network protocol versioning scheme.,6,[],https://github.com/chocolate-doom/chocolate-doom/pull/943,https://github.com/JNechaevsky,4,https://github.com/chocolate-doom/chocolate-doom/pull/943#issuecomment-332941382,"This changes how Chocolate Doom's network protocol is versioned; previously, we rejected clients if they were not running exactly the same version of Chocolate Doom as the server. Chocolate Doom is stable enough that we can be reasonably certain that different versions will be able to play together without desyncing, so just introduce the concept of a protocol number; if the network protocol changes we will introduce a new protocol, while still maintaining the ability to play games with older versions using old protocols.
The same scheme will also allow forks of Chocolate Doom to implement their own modified or extended protocols while retaining the ability to support the original protocol and play games with Chocolate Doom players if they wish. The protocol to use is automatically negotiated when a client connects to a server, by identifying a common protocol that both can support.
Fixes #686.","And one more question please - Crispy's CodeBlocks project file (config.h) have a special lines for compatibility:
/* Declare netcode-compatibility with Chocolate Doom */
#define NET_PACKAGE_STRING ""Chocolate Doom 2.3.0""

Should it be changed somehow? Or is it safe to leave them as is?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,943,2017-09-28T03:45:09Z,2017-10-01T06:19:16Z,2017-10-01T06:19:16Z,MERGED,True,342,238,10,https://github.com/fragglet,Introduce a network protocol versioning scheme.,6,[],https://github.com/chocolate-doom/chocolate-doom/pull/943,https://github.com/fabiangreffrath,5,https://github.com/chocolate-doom/chocolate-doom/pull/943#issuecomment-332942767,"This changes how Chocolate Doom's network protocol is versioned; previously, we rejected clients if they were not running exactly the same version of Chocolate Doom as the server. Chocolate Doom is stable enough that we can be reasonably certain that different versions will be able to play together without desyncing, so just introduce the concept of a protocol number; if the network protocol changes we will introduce a new protocol, while still maintaining the ability to play games with older versions using old protocols.
The same scheme will also allow forks of Chocolate Doom to implement their own modified or extended protocols while retaining the ability to support the original protocol and play games with Chocolate Doom players if they wish. The protocol to use is automatically negotiated when a client connects to a server, by identifying a common protocol that both can support.
Fixes #686.","Should it be changed somehow? Or is it safe to leave them as is?

AFAIUI, this will be obsolete as soon as this pull request has been merged into choco/sdl2-branch and I have merged choco/sdl2-branch into crispy/master.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,943,2017-09-28T03:45:09Z,2017-10-01T06:19:16Z,2017-10-01T06:19:16Z,MERGED,True,342,238,10,https://github.com/fragglet,Introduce a network protocol versioning scheme.,6,[],https://github.com/chocolate-doom/chocolate-doom/pull/943,https://github.com/fragglet,6,https://github.com/chocolate-doom/chocolate-doom/pull/943#issuecomment-332943429,"This changes how Chocolate Doom's network protocol is versioned; previously, we rejected clients if they were not running exactly the same version of Chocolate Doom as the server. Chocolate Doom is stable enough that we can be reasonably certain that different versions will be able to play together without desyncing, so just introduce the concept of a protocol number; if the network protocol changes we will introduce a new protocol, while still maintaining the ability to play games with older versions using old protocols.
The same scheme will also allow forks of Chocolate Doom to implement their own modified or extended protocols while retaining the ability to support the original protocol and play games with Chocolate Doom players if they wish. The protocol to use is automatically negotiated when a client connects to a server, by identifying a common protocol that both can support.
Fixes #686.","Should I ever decide to add a Crispy-specific but Choco-incompatible network protocol or game mode (that e.g. allows jumping or vertical aiming in network games), I would have to add this to the protocol array and handle the differences at run-time

Yes. For example: if the server needed to do something different with in crispy-specific network protocol, you might do something like:
    if (client->connection.protocol == NET_PROTOCOL_CRISPY_0) {
        ....

or for the equivalent in the client code it would be:
    if (client_connection.protocol == NET_PROTOCOL_CRISPY_0) {
        ...


(where in the code would this decision be taken, in NET_CL_ParseSYN()?), right?

Maybe, but not just there. That function processes the SYN packet received when a connection is established, and takes care of figuring out which protocol to use that is supported by both client and server. You'd probably still need protocol-specific if statements in other places; you give the example of transmitting other ticcmd data and this might require passing the protocol down into the NET_ReadTiccmdDiff and NET_WriteTiccmdDiff functions so that things like jumping and vertical aiming fields can be preserved when using the new protocol.

Another question: Say, there is a Crispy Doom server waiting for connections. The first client to connect is a Crispy Doom client so both server and client would negotiate on the Crispy-specific protocol. Then a Chocolate Doom client connects. Will this be rejected or will the server and the first client now decide to agree upon the Choco protocol, because that's the common denominator with the second client?

No, this should work fine. The protocol to use is specific to the particular client that has connected. A particular server might have different clients using different protocols. However, a protocol might imply some restrictions about the kinds of games that can be played. For example suppose if you have a Crispy Doom server with three Crispy clients and one Chocolate Doom client. Because there's a Chocolate Doom client in the mix, you'll need to turn off any game options that it won't understand (ie. disable jumping and freelook, etc.)",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,943,2017-09-28T03:45:09Z,2017-10-01T06:19:16Z,2017-10-01T06:19:16Z,MERGED,True,342,238,10,https://github.com/fragglet,Introduce a network protocol versioning scheme.,6,[],https://github.com/chocolate-doom/chocolate-doom/pull/943,https://github.com/fragglet,7,https://github.com/chocolate-doom/chocolate-doom/pull/943#issuecomment-333356476,"This changes how Chocolate Doom's network protocol is versioned; previously, we rejected clients if they were not running exactly the same version of Chocolate Doom as the server. Chocolate Doom is stable enough that we can be reasonably certain that different versions will be able to play together without desyncing, so just introduce the concept of a protocol number; if the network protocol changes we will introduce a new protocol, while still maintaining the ability to play games with older versions using old protocols.
The same scheme will also allow forks of Chocolate Doom to implement their own modified or extended protocols while retaining the ability to support the original protocol and play games with Chocolate Doom players if they wish. The protocol to use is automatically negotiated when a client connects to a server, by identifying a common protocol that both can support.
Fixes #686.","Great, thanks.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,946,2017-10-01T08:07:51Z,2017-10-01T14:37:23Z,2017-10-01T14:37:23Z,MERGED,True,1,0,1,https://github.com/devnexen,for strcmp,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/946,https://github.com/devnexen,1,https://github.com/chocolate-doom/chocolate-doom/pull/946,,,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,947,2017-10-01T08:27:22Z,2018-03-24T06:08:24Z,2018-03-24T06:08:24Z,MERGED,True,7,10,2,https://github.com/devnexen,Abs call fixes,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/947,https://github.com/devnexen,1,https://github.com/chocolate-doom/chocolate-doom/pull/947,,,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,947,2017-10-01T08:27:22Z,2018-03-24T06:08:24Z,2018-03-24T06:08:24Z,MERGED,True,7,10,2,https://github.com/devnexen,Abs call fixes,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/947,https://github.com/chungy,2,https://github.com/chocolate-doom/chocolate-doom/pull/947#issuecomment-375849864,,"Since it seems the only prior concern was already addressed, I'll merge this. Thanks, and sorry for the long delay!",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,948,2017-10-10T17:15:35Z,2017-10-13T09:17:15Z,2017-10-13T09:17:21Z,MERGED,True,72,12,7,https://github.com/jmtd,Permit binding of joystick axes to look up/down,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/948,https://github.com/jmtd,1,https://github.com/chocolate-doom/chocolate-doom/pull/948,"In games which support a look/down action (Heretic, Hexen, Strife)
permit binding a joystick axis to those actions.
Altazimuth was asking me some questions on IRC about how we handle
mouse wheel actions and that got me thinking about some of the
input stuff (specifically joystick stuff) that we hadn't finished
off.","In games which support a look/down action (Heretic, Hexen, Strife)
permit binding a joystick axis to those actions.
Altazimuth was asking me some questions on IRC about how we handle
mouse wheel actions and that got me thinking about some of the
input stuff (specifically joystick stuff) that we hadn't finished
off.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,948,2017-10-10T17:15:35Z,2017-10-13T09:17:15Z,2017-10-13T09:17:21Z,MERGED,True,72,12,7,https://github.com/jmtd,Permit binding of joystick axes to look up/down,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/948,https://github.com/jmtd,2,https://github.com/chocolate-doom/chocolate-doom/pull/948#issuecomment-335611399,"In games which support a look/down action (Heretic, Hexen, Strife)
permit binding a joystick axis to those actions.
Altazimuth was asking me some questions on IRC about how we handle
mouse wheel actions and that got me thinking about some of the
input stuff (specifically joystick stuff) that we hadn't finished
off.",It feels really nice to have this action bound to a perpendicular axis to turn left/right when using a joystick/gamepad.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,953,2017-10-31T20:54:38Z,2017-11-01T04:41:53Z,2017-11-01T04:41:53Z,MERGED,True,5,1,1,https://github.com/ericwa,Allocate large enough buffer for SDL_ConvertAudio.,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/953,https://github.com/ericwa,1,https://github.com/chocolate-doom/chocolate-doom/pull/953,"See: https://wiki.libsdl.org/SDL_AudioCVT
buf must be len * len_mult large; the existing code wasn't using len_mult but happened to work on 2.0.5 and below.
Fixes #945","See: https://wiki.libsdl.org/SDL_AudioCVT
buf must be len * len_mult large; the existing code wasn't using len_mult but happened to work on 2.0.5 and below.
Fixes #945",True,{'THUMBS_UP': ['https://github.com/ndrchvzz']}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,953,2017-10-31T20:54:38Z,2017-11-01T04:41:53Z,2017-11-01T04:41:53Z,MERGED,True,5,1,1,https://github.com/ericwa,Allocate large enough buffer for SDL_ConvertAudio.,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/953,https://github.com/ndrchvzz,2,https://github.com/chocolate-doom/chocolate-doom/pull/953#issuecomment-340912716,"See: https://wiki.libsdl.org/SDL_AudioCVT
buf must be len * len_mult large; the existing code wasn't using len_mult but happened to work on 2.0.5 and below.
Fixes #945","I can confirm it fixes the problem on Arch Linux with SDL 2.0.7.
It would be great if somebody could test that it also works fine with previous versions of SDL: 2.0.6, and especially 2.0.5 and older.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,953,2017-10-31T20:54:38Z,2017-11-01T04:41:53Z,2017-11-01T04:41:53Z,MERGED,True,5,1,1,https://github.com/ericwa,Allocate large enough buffer for SDL_ConvertAudio.,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/953,https://github.com/ndrchvzz,3,https://github.com/chocolate-doom/chocolate-doom/pull/953#issuecomment-340922802,"See: https://wiki.libsdl.org/SDL_AudioCVT
buf must be len * len_mult large; the existing code wasn't using len_mult but happened to work on 2.0.5 and below.
Fixes #945",I managed to test it on Arch Linux with SDL 2.0.5 and it also works fine.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,953,2017-10-31T20:54:38Z,2017-11-01T04:41:53Z,2017-11-01T04:41:53Z,MERGED,True,5,1,1,https://github.com/ericwa,Allocate large enough buffer for SDL_ConvertAudio.,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/953,https://github.com/fragglet,4,https://github.com/chocolate-doom/chocolate-doom/pull/953#issuecomment-340976629,"See: https://wiki.libsdl.org/SDL_AudioCVT
buf must be len * len_mult large; the existing code wasn't using len_mult but happened to work on 2.0.5 and below.
Fixes #945","Looks good, thanks for this.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,957,2017-11-20T00:08:38Z,2018-01-06T22:32:20Z,2018-01-06T22:39:33Z,MERGED,True,4,3,1,https://github.com/BlooD2oo1,Make 0 and 5 keys on the numeric keypad bindable for left handed users,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/957,https://github.com/BlooD2oo1,1,https://github.com/chocolate-doom/chocolate-doom/pull/957,Changing the binding of the numeric 0 and 5 keys also changed the normal 0 and 5 keys binding's so the rocket launcher was not selectable when the binding of the numeric 5 key was changed. This patch fixes that.,Changing the binding of the numeric 0 and 5 keys also changed the normal 0 and 5 keys binding's so the rocket launcher was not selectable when the binding of the numeric 5 key was changed. This patch fixes that.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,957,2017-11-20T00:08:38Z,2018-01-06T22:32:20Z,2018-01-06T22:39:33Z,MERGED,True,4,3,1,https://github.com/BlooD2oo1,Make 0 and 5 keys on the numeric keypad bindable for left handed users,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/957,https://github.com/jmtd,2,https://github.com/chocolate-doom/chocolate-doom/pull/957#issuecomment-346126493,Changing the binding of the numeric 0 and 5 keys also changed the normal 0 and 5 keys binding's so the rocket launcher was not selectable when the binding of the numeric 5 key was changed. This patch fixes that.,I'm in favour of this idea.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,957,2017-11-20T00:08:38Z,2018-01-06T22:32:20Z,2018-01-06T22:39:33Z,MERGED,True,4,3,1,https://github.com/BlooD2oo1,Make 0 and 5 keys on the numeric keypad bindable for left handed users,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/957,https://github.com/fragglet,3,https://github.com/chocolate-doom/chocolate-doom/pull/957#issuecomment-355782919,Changing the binding of the numeric 0 and 5 keys also changed the normal 0 and 5 keys binding's so the rocket launcher was not selectable when the binding of the numeric 5 key was changed. This patch fixes that.,"Thanks, this seems fine.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,957,2017-11-20T00:08:38Z,2018-01-06T22:32:20Z,2018-01-06T22:39:33Z,MERGED,True,4,3,1,https://github.com/BlooD2oo1,Make 0 and 5 keys on the numeric keypad bindable for left handed users,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/957,https://github.com/fragglet,4,https://github.com/chocolate-doom/chocolate-doom/pull/957#issuecomment-355783355,Changing the binding of the numeric 0 and 5 keys also changed the normal 0 and 5 keys binding's so the rocket launcher was not selectable when the binding of the numeric 5 key was changed. This patch fixes that.,As a quite note: early in Chocolate Doom's development I believe I copied vanilla Doom's keyboard layout in the interests of reproducing the exact behavior. But the project philosophy has evolved and we're now a lot looser about input support. Reproducing vanilla's exact key map seems less important than being able to bind these keys for use.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,962,2017-11-28T18:53:20Z,2018-01-09T17:20:51Z,2018-01-16T09:24:58Z,MERGED,True,242,193,13,https://github.com/jmtd,Manpage fixes,6,[],https://github.com/chocolate-doom/chocolate-doom/pull/962,https://github.com/jmtd,1,https://github.com/chocolate-doom/chocolate-doom/pull/962,"FIxes #959.
Overhaul documentation to parameterize PROGRAM_PREFIX (e.g. chocolate-), PACKAGE_NAME (e.g. Chocolate) as well as various other existing problems like the non-doom default cfg manpages referencing themselves as default.cfg, the chocolate-foo-setup manpages referencing chocolate-setup, etc.

 parameterize PROGRAM_PREFIX and PACKAGE_NAME in all manpage names
 parameterize PROGRAM_PREFIX and PACKAGE_NAME in all manpage texts
 more parameterization/expansion in INSTALL.*
 heretic/hexen/strife.cfg reference default.cfg/doom
 likewise -{heretic,hexen,strife}.cfg (default.cfg.template)
 remove chocolate-setup manpage (keep foo-bar-setup)
 *-foo-setup is referenced as just foo-setup in the text
 don't build chocolate-setup it's pragmatic to build it as an intermediary for the final binaries and we already don't install it","FIxes #959.
Overhaul documentation to parameterize PROGRAM_PREFIX (e.g. chocolate-), PACKAGE_NAME (e.g. Chocolate) as well as various other existing problems like the non-doom default cfg manpages referencing themselves as default.cfg, the chocolate-foo-setup manpages referencing chocolate-setup, etc.

 parameterize PROGRAM_PREFIX and PACKAGE_NAME in all manpage names
 parameterize PROGRAM_PREFIX and PACKAGE_NAME in all manpage texts
 more parameterization/expansion in INSTALL.*
 heretic/hexen/strife.cfg reference default.cfg/doom
 likewise -{heretic,hexen,strife}.cfg (default.cfg.template)
 remove chocolate-setup manpage (keep foo-bar-setup)
 *-foo-setup is referenced as just foo-setup in the text
 don't build chocolate-setup it's pragmatic to build it as an intermediary for the final binaries and we already don't install it",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,962,2017-11-28T18:53:20Z,2018-01-09T17:20:51Z,2018-01-16T09:24:58Z,MERGED,True,242,193,13,https://github.com/jmtd,Manpage fixes,6,[],https://github.com/chocolate-doom/chocolate-doom/pull/962,https://github.com/jmtd,2,https://github.com/chocolate-doom/chocolate-doom/pull/962#issuecomment-356352930,"FIxes #959.
Overhaul documentation to parameterize PROGRAM_PREFIX (e.g. chocolate-), PACKAGE_NAME (e.g. Chocolate) as well as various other existing problems like the non-doom default cfg manpages referencing themselves as default.cfg, the chocolate-foo-setup manpages referencing chocolate-setup, etc.

 parameterize PROGRAM_PREFIX and PACKAGE_NAME in all manpage names
 parameterize PROGRAM_PREFIX and PACKAGE_NAME in all manpage texts
 more parameterization/expansion in INSTALL.*
 heretic/hexen/strife.cfg reference default.cfg/doom
 likewise -{heretic,hexen,strife}.cfg (default.cfg.template)
 remove chocolate-setup manpage (keep foo-bar-setup)
 *-foo-setup is referenced as just foo-setup in the text
 don't build chocolate-setup it's pragmatic to build it as an intermediary for the final binaries and we already don't install it","Apart from the few nit-picks I commented last week this looks pretty good to me.

Thanks, and thanks for the comments - I've implemented the two changes I can find in this PR, but I still can't find the nits you are referring to here. If they are worth it please give me a clue where to look :)",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,962,2017-11-28T18:53:20Z,2018-01-09T17:20:51Z,2018-01-16T09:24:58Z,MERGED,True,242,193,13,https://github.com/jmtd,Manpage fixes,6,[],https://github.com/chocolate-doom/chocolate-doom/pull/962,https://github.com/fabiangreffrath,3,https://github.com/chocolate-doom/chocolate-doom/pull/962#issuecomment-356390062,"FIxes #959.
Overhaul documentation to parameterize PROGRAM_PREFIX (e.g. chocolate-), PACKAGE_NAME (e.g. Chocolate) as well as various other existing problems like the non-doom default cfg manpages referencing themselves as default.cfg, the chocolate-foo-setup manpages referencing chocolate-setup, etc.

 parameterize PROGRAM_PREFIX and PACKAGE_NAME in all manpage names
 parameterize PROGRAM_PREFIX and PACKAGE_NAME in all manpage texts
 more parameterization/expansion in INSTALL.*
 heretic/hexen/strife.cfg reference default.cfg/doom
 likewise -{heretic,hexen,strife}.cfg (default.cfg.template)
 remove chocolate-setup manpage (keep foo-bar-setup)
 *-foo-setup is referenced as just foo-setup in the text
 don't build chocolate-setup it's pragmatic to build it as an intermediary for the final binaries and we already don't install it","These two comments were my nits. Sorry, I believed this was obvious. ;)",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,962,2017-11-28T18:53:20Z,2018-01-09T17:20:51Z,2018-01-16T09:24:58Z,MERGED,True,242,193,13,https://github.com/jmtd,Manpage fixes,6,[],https://github.com/chocolate-doom/chocolate-doom/pull/962,https://github.com/fragglet,4,https://github.com/chocolate-doom/chocolate-doom/pull/962#issuecomment-357581855,"FIxes #959.
Overhaul documentation to parameterize PROGRAM_PREFIX (e.g. chocolate-), PACKAGE_NAME (e.g. Chocolate) as well as various other existing problems like the non-doom default cfg manpages referencing themselves as default.cfg, the chocolate-foo-setup manpages referencing chocolate-setup, etc.

 parameterize PROGRAM_PREFIX and PACKAGE_NAME in all manpage names
 parameterize PROGRAM_PREFIX and PACKAGE_NAME in all manpage texts
 more parameterization/expansion in INSTALL.*
 heretic/hexen/strife.cfg reference default.cfg/doom
 likewise -{heretic,hexen,strife}.cfg (default.cfg.template)
 remove chocolate-setup manpage (keep foo-bar-setup)
 *-foo-setup is referenced as just foo-setup in the text
 don't build chocolate-setup it's pragmatic to build it as an intermediary for the final binaries and we already don't install it","This has broken several things:

 Top-level INSTALL file included in source tarballs is not generated properly (reads as ""These are instructions for how to install and set up LONG_GAME_NAME...."") - top-level Makefile.am was not updated
 INSTALL file included in macOS packages has the same problem (pkg/osx/Makefile.am was not updated)
 INSTALL file included in win32 packages has the same problem (pkg/win32/Makefile.am was not updated)

Any chance you can fix these? I took a look but it looks a bit complicated; it might make most sense to centralize all file generation in man/Makefile.am and copy to other places where needed.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,962,2017-11-28T18:53:20Z,2018-01-09T17:20:51Z,2018-01-16T09:24:58Z,MERGED,True,242,193,13,https://github.com/jmtd,Manpage fixes,6,[],https://github.com/chocolate-doom/chocolate-doom/pull/962,https://github.com/jmtd,5,https://github.com/chocolate-doom/chocolate-doom/pull/962#issuecomment-357638663,"FIxes #959.
Overhaul documentation to parameterize PROGRAM_PREFIX (e.g. chocolate-), PACKAGE_NAME (e.g. Chocolate) as well as various other existing problems like the non-doom default cfg manpages referencing themselves as default.cfg, the chocolate-foo-setup manpages referencing chocolate-setup, etc.

 parameterize PROGRAM_PREFIX and PACKAGE_NAME in all manpage names
 parameterize PROGRAM_PREFIX and PACKAGE_NAME in all manpage texts
 more parameterization/expansion in INSTALL.*
 heretic/hexen/strife.cfg reference default.cfg/doom
 likewise -{heretic,hexen,strife}.cfg (default.cfg.template)
 remove chocolate-setup manpage (keep foo-bar-setup)
 *-foo-setup is referenced as just foo-setup in the text
 don't build chocolate-setup it's pragmatic to build it as an intermediary for the final binaries and we already don't install it",Hi @fragglet sorry for breaking stuff! Sure I'll try to fix it up.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,962,2017-11-28T18:53:20Z,2018-01-09T17:20:51Z,2018-01-16T09:24:58Z,MERGED,True,242,193,13,https://github.com/jmtd,Manpage fixes,6,[],https://github.com/chocolate-doom/chocolate-doom/pull/962,https://github.com/jmtd,6,https://github.com/chocolate-doom/chocolate-doom/pull/962#issuecomment-357762228,"FIxes #959.
Overhaul documentation to parameterize PROGRAM_PREFIX (e.g. chocolate-), PACKAGE_NAME (e.g. Chocolate) as well as various other existing problems like the non-doom default cfg manpages referencing themselves as default.cfg, the chocolate-foo-setup manpages referencing chocolate-setup, etc.

 parameterize PROGRAM_PREFIX and PACKAGE_NAME in all manpage names
 parameterize PROGRAM_PREFIX and PACKAGE_NAME in all manpage texts
 more parameterization/expansion in INSTALL.*
 heretic/hexen/strife.cfg reference default.cfg/doom
 likewise -{heretic,hexen,strife}.cfg (default.cfg.template)
 remove chocolate-setup manpage (keep foo-bar-setup)
 *-foo-setup is referenced as just foo-setup in the text
 don't build chocolate-setup it's pragmatic to build it as an intermediary for the final binaries and we already don't install it",I'll push fixes as separate patches to master as I go.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,962,2017-11-28T18:53:20Z,2018-01-09T17:20:51Z,2018-01-16T09:24:58Z,MERGED,True,242,193,13,https://github.com/jmtd,Manpage fixes,6,[],https://github.com/chocolate-doom/chocolate-doom/pull/962,https://github.com/jmtd,7,https://github.com/chocolate-doom/chocolate-doom/pull/962#issuecomment-357782122,"FIxes #959.
Overhaul documentation to parameterize PROGRAM_PREFIX (e.g. chocolate-), PACKAGE_NAME (e.g. Chocolate) as well as various other existing problems like the non-doom default cfg manpages referencing themselves as default.cfg, the chocolate-foo-setup manpages referencing chocolate-setup, etc.

 parameterize PROGRAM_PREFIX and PACKAGE_NAME in all manpage names
 parameterize PROGRAM_PREFIX and PACKAGE_NAME in all manpage texts
 more parameterization/expansion in INSTALL.*
 heretic/hexen/strife.cfg reference default.cfg/doom
 likewise -{heretic,hexen,strife}.cfg (default.cfg.template)
 remove chocolate-setup manpage (keep foo-bar-setup)
 *-foo-setup is referenced as just foo-setup in the text
 don't build chocolate-setup it's pragmatic to build it as an intermediary for the final binaries and we already don't install it","The GNUmakefiles for win32 and osx will now need to be autogen'd (so that they have expanded definitions of @PROGRAM_SHORTNAME@ etc.). Will that break your/a workflow?
(or I might be able to work around that if, e.g., they can just copy ../../INSTALL rather then generating it. I.e. if they can be confident it exists.)",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,962,2017-11-28T18:53:20Z,2018-01-09T17:20:51Z,2018-01-16T09:24:58Z,MERGED,True,242,193,13,https://github.com/jmtd,Manpage fixes,6,[],https://github.com/chocolate-doom/chocolate-doom/pull/962,https://github.com/fragglet,8,https://github.com/chocolate-doom/chocolate-doom/pull/962#issuecomment-357817601,"FIxes #959.
Overhaul documentation to parameterize PROGRAM_PREFIX (e.g. chocolate-), PACKAGE_NAME (e.g. Chocolate) as well as various other existing problems like the non-doom default cfg manpages referencing themselves as default.cfg, the chocolate-foo-setup manpages referencing chocolate-setup, etc.

 parameterize PROGRAM_PREFIX and PACKAGE_NAME in all manpage names
 parameterize PROGRAM_PREFIX and PACKAGE_NAME in all manpage texts
 more parameterization/expansion in INSTALL.*
 heretic/hexen/strife.cfg reference default.cfg/doom
 likewise -{heretic,hexen,strife}.cfg (default.cfg.template)
 remove chocolate-setup manpage (keep foo-bar-setup)
 *-foo-setup is referenced as just foo-setup in the text
 don't build chocolate-setup it's pragmatic to build it as an intermediary for the final binaries and we already don't install it","pkg/config.make is autogenerated by configure, and they import from that.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,962,2017-11-28T18:53:20Z,2018-01-09T17:20:51Z,2018-01-16T09:24:58Z,MERGED,True,242,193,13,https://github.com/jmtd,Manpage fixes,6,[],https://github.com/chocolate-doom/chocolate-doom/pull/962,https://github.com/jmtd,9,https://github.com/chocolate-doom/chocolate-doom/pull/962#issuecomment-357900903,"FIxes #959.
Overhaul documentation to parameterize PROGRAM_PREFIX (e.g. chocolate-), PACKAGE_NAME (e.g. Chocolate) as well as various other existing problems like the non-doom default cfg manpages referencing themselves as default.cfg, the chocolate-foo-setup manpages referencing chocolate-setup, etc.

 parameterize PROGRAM_PREFIX and PACKAGE_NAME in all manpage names
 parameterize PROGRAM_PREFIX and PACKAGE_NAME in all manpage texts
 more parameterization/expansion in INSTALL.*
 heretic/hexen/strife.cfg reference default.cfg/doom
 likewise -{heretic,hexen,strife}.cfg (default.cfg.template)
 remove chocolate-setup manpage (keep foo-bar-setup)
 *-foo-setup is referenced as just foo-setup in the text
 don't build chocolate-setup it's pragmatic to build it as an intermediary for the final binaries and we already don't install it","I've raised a PR with changes for those files (#981) because I can't properly test them in my environment: by breaking out the INSTALL stuff as a separate target I could test and am confident the simplecpp invocations are fixed, but just as a matter of good practice it would be nice if someone who has their environment set up for cross-compiling or whatever can make sure they're happy with it?
(I did consider pushing a patch that moved the INSTALL generation to a separate target but the spaces in filenames seemed too risky.)",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,966,2017-12-09T23:39:18Z,2018-01-06T21:07:21Z,2018-01-06T21:07:27Z,MERGED,True,2,2,2,https://github.com/duganchen,Install icons to PREFIX/share/icons/hicolor/128x128/apps,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/966,https://github.com/duganchen,1,https://github.com/chocolate-doom/chocolate-doom/pull/966,,,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,966,2017-12-09T23:39:18Z,2018-01-06T21:07:21Z,2018-01-06T21:07:27Z,MERGED,True,2,2,2,https://github.com/duganchen,Install icons to PREFIX/share/icons/hicolor/128x128/apps,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/966,https://github.com/fragglet,2,https://github.com/chocolate-doom/chocolate-doom/pull/966#issuecomment-355776903,,Thanks!,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,974,2018-01-06T13:37:50Z,2018-01-27T23:26:26Z,2018-01-28T09:35:09Z,MERGED,True,48,12,10,https://github.com/turol,Treat warnings as errors in travis build,11,[],https://github.com/chocolate-doom/chocolate-doom/pull/974,https://github.com/turol,1,https://github.com/chocolate-doom/chocolate-doom/pull/974,,,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,974,2018-01-06T13:37:50Z,2018-01-27T23:26:26Z,2018-01-28T09:35:09Z,MERGED,True,48,12,10,https://github.com/turol,Treat warnings as errors in travis build,11,[],https://github.com/chocolate-doom/chocolate-doom/pull/974,https://github.com/fragglet,2,https://github.com/chocolate-doom/chocolate-doom/pull/974#issuecomment-355766312,,Thanks for fixing these.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,974,2018-01-06T13:37:50Z,2018-01-27T23:26:26Z,2018-01-28T09:35:09Z,MERGED,True,48,12,10,https://github.com/turol,Treat warnings as errors in travis build,11,[],https://github.com/chocolate-doom/chocolate-doom/pull/974,https://github.com/turol,3,https://github.com/chocolate-doom/chocolate-doom/pull/974#issuecomment-356355466,,Made the requested changes.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,974,2018-01-06T13:37:50Z,2018-01-27T23:26:26Z,2018-01-28T09:35:09Z,MERGED,True,48,12,10,https://github.com/turol,Treat warnings as errors in travis build,11,[],https://github.com/chocolate-doom/chocolate-doom/pull/974,https://github.com/turol,4,https://github.com/chocolate-doom/chocolate-doom/pull/974#issuecomment-356361607,,It looks like the new condition I added to i_sdlmusic.c is terminating the loop instead of the f_eof condition. That should probably be handled in a separate issue instead of this PR.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,974,2018-01-06T13:37:50Z,2018-01-27T23:26:26Z,2018-01-28T09:35:09Z,MERGED,True,48,12,10,https://github.com/turol,Treat warnings as errors in travis build,11,[],https://github.com/chocolate-doom/chocolate-doom/pull/974,https://github.com/fabiangreffrath,5,https://github.com/chocolate-doom/chocolate-doom/pull/974#issuecomment-356389819,,"Nope, I am still against adding a parameter to configure to add a flag to CFLAGS.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,974,2018-01-06T13:37:50Z,2018-01-27T23:26:26Z,2018-01-28T09:35:09Z,MERGED,True,48,12,10,https://github.com/turol,Treat warnings as errors in travis build,11,[],https://github.com/chocolate-doom/chocolate-doom/pull/974,https://github.com/turol,6,https://github.com/chocolate-doom/chocolate-doom/pull/974#issuecomment-356393528,,"Unfortunately trying to add it directly to CFLAGS breaks because at least here (Debian testing, GCC 7.2) configure will fail to detect -lm if CFLAGS contains -Werror. To work it must be added in final stages of configure. The alternatives are to fix autoconf (haaahaaa, good one!) or move to cmake.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,974,2018-01-06T13:37:50Z,2018-01-27T23:26:26Z,2018-01-28T09:35:09Z,MERGED,True,48,12,10,https://github.com/turol,Treat warnings as errors in travis build,11,[],https://github.com/chocolate-doom/chocolate-doom/pull/974,https://github.com/fabiangreffrath,7,https://github.com/chocolate-doom/chocolate-doom/pull/974#issuecomment-356405225,,"I see, thanks for elaborating!",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,974,2018-01-06T13:37:50Z,2018-01-27T23:26:26Z,2018-01-28T09:35:09Z,MERGED,True,48,12,10,https://github.com/turol,Treat warnings as errors in travis build,11,[],https://github.com/chocolate-doom/chocolate-doom/pull/974,https://github.com/turol,8,https://github.com/chocolate-doom/chocolate-doom/pull/974#issuecomment-356405508,,Good news is that -Werror is a special case since it's the only warning flag which can turn a successful build into a failing one. Other warning flags should be fine when passed in through CFLAGS. Though UBsan and Asan might also need a dedicated configure flag since some of their variants can do the same.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,974,2018-01-06T13:37:50Z,2018-01-27T23:26:26Z,2018-01-28T09:35:09Z,MERGED,True,48,12,10,https://github.com/turol,Treat warnings as errors in travis build,11,[],https://github.com/chocolate-doom/chocolate-doom/pull/974,https://github.com/turol,9,https://github.com/chocolate-doom/chocolate-doom/pull/974#issuecomment-357194282,,@fragglet ping?,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,974,2018-01-06T13:37:50Z,2018-01-27T23:26:26Z,2018-01-28T09:35:09Z,MERGED,True,48,12,10,https://github.com/turol,Treat warnings as errors in travis build,11,[],https://github.com/chocolate-doom/chocolate-doom/pull/974,https://github.com/turol,10,https://github.com/chocolate-doom/chocolate-doom/pull/974#issuecomment-360989580,,Rebased.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,974,2018-01-06T13:37:50Z,2018-01-27T23:26:26Z,2018-01-28T09:35:09Z,MERGED,True,48,12,10,https://github.com/turol,Treat warnings as errors in travis build,11,[],https://github.com/chocolate-doom/chocolate-doom/pull/974,https://github.com/chungy,11,https://github.com/chocolate-doom/chocolate-doom/pull/974#issuecomment-361023982,,This looks fine. I'd have the same concern as Fabian with regard to configure.ac but I also accept the explaination. Thanks!,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,974,2018-01-06T13:37:50Z,2018-01-27T23:26:26Z,2018-01-28T09:35:09Z,MERGED,True,48,12,10,https://github.com/turol,Treat warnings as errors in travis build,11,[],https://github.com/chocolate-doom/chocolate-doom/pull/974,https://github.com/fragglet,12,https://github.com/chocolate-doom/chocolate-doom/pull/974#issuecomment-361040784,,Thanks again for doing this; I took a look at the updated changes and they look good.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,981,2018-01-16T09:23:20Z,2019-04-03T14:01:53Z,2019-04-03T14:01:53Z,CLOSED,False,5,1,3,https://github.com/jmtd,Gnumakefile doc fixes,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/981,https://github.com/jmtd,1,https://github.com/chocolate-doom/chocolate-doom/pull/981,Raising this as a separate PR because I'm not able to properly test it myself.,Raising this as a separate PR because I'm not able to properly test it myself.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,981,2018-01-16T09:23:20Z,2019-04-03T14:01:53Z,2019-04-03T14:01:53Z,CLOSED,False,5,1,3,https://github.com/jmtd,Gnumakefile doc fixes,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/981,https://github.com/chungy,2,https://github.com/chocolate-doom/chocolate-doom/pull/981#issuecomment-357908791,Raising this as a separate PR because I'm not able to properly test it myself.,at least the win32 makefile works properly.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,981,2018-01-16T09:23:20Z,2019-04-03T14:01:53Z,2019-04-03T14:01:53Z,CLOSED,False,5,1,3,https://github.com/jmtd,Gnumakefile doc fixes,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/981,https://github.com/chungy,3,https://github.com/chocolate-doom/chocolate-doom/pull/981#issuecomment-397022829,Raising this as a separate PR because I'm not able to properly test it myself.,"Is this PR still relevant? As far as win32 is concerned, there's no issue with the simplecpp invocation in master.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,981,2018-01-16T09:23:20Z,2019-04-03T14:01:53Z,2019-04-03T14:01:53Z,CLOSED,False,5,1,3,https://github.com/jmtd,Gnumakefile doc fixes,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/981,https://github.com/jmtd,4,https://github.com/chocolate-doom/chocolate-doom/pull/981#issuecomment-443457083,Raising this as a separate PR because I'm not able to properly test it myself.,"Is this PR still relevant? As far as win32 is concerned, there's no issue with the simplecpp invocation in master.

I can't remember. I'll try to look again this week.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,981,2018-01-16T09:23:20Z,2019-04-03T14:01:53Z,2019-04-03T14:01:53Z,CLOSED,False,5,1,3,https://github.com/jmtd,Gnumakefile doc fixes,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/981,https://github.com/jmtd,5,https://github.com/chocolate-doom/chocolate-doom/pull/981#issuecomment-479502614,Raising this as a separate PR because I'm not able to properly test it myself.,"I can't remember. I'll try to look again this week.

I didn't but might as well close this unless someone notices a problem.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,983,2018-01-21T19:11:09Z,2018-01-21T21:28:38Z,2018-01-21T21:28:38Z,CLOSED,False,42,0,4,https://github.com/jrhacker,Enable the use of SF2 sound fonts,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/983,https://github.com/jrhacker,1,https://github.com/chocolate-doom/chocolate-doom/pull/983,"Add the setup option and SDL2 calls necessary to use an SF2 sound font.  Requires that SDL2 was built with FluidSynth enabled.
The previous pull request was polluted with hundreds of intervening commits when I rebased to choc-3, so I have created a new one.","Add the setup option and SDL2 calls necessary to use an SF2 sound font.  Requires that SDL2 was built with FluidSynth enabled.
The previous pull request was polluted with hundreds of intervening commits when I rebased to choc-3, so I have created a new one.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,983,2018-01-21T19:11:09Z,2018-01-21T21:28:38Z,2018-01-21T21:28:38Z,CLOSED,False,42,0,4,https://github.com/jrhacker,Enable the use of SF2 sound fonts,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/983,https://github.com/fabiangreffrath,2,https://github.com/chocolate-doom/chocolate-doom/pull/983#issuecomment-359272717,"Add the setup option and SDL2 calls necessary to use an SF2 sound font.  Requires that SDL2 was built with FluidSynth enabled.
The previous pull request was polluted with hundreds of intervening commits when I rebased to choc-3, so I have created a new one.",Isn't it sufficient to just set the SDL_SOUNDFONTS environment variable to point to the desired soundfont file?,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,983,2018-01-21T19:11:09Z,2018-01-21T21:28:38Z,2018-01-21T21:28:38Z,CLOSED,False,42,0,4,https://github.com/jrhacker,Enable the use of SF2 sound fonts,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/983,https://github.com/jrhacker,3,https://github.com/chocolate-doom/chocolate-doom/pull/983#issuecomment-359273549,"Add the setup option and SDL2 calls necessary to use an SF2 sound font.  Requires that SDL2 was built with FluidSynth enabled.
The previous pull request was polluted with hundreds of intervening commits when I rebased to choc-3, so I have created a new one.",Nope.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,983,2018-01-21T19:11:09Z,2018-01-21T21:28:38Z,2018-01-21T21:28:38Z,CLOSED,False,42,0,4,https://github.com/jrhacker,Enable the use of SF2 sound fonts,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/983,https://github.com/jrhacker,4,https://github.com/chocolate-doom/chocolate-doom/pull/983#issuecomment-359273778,"Add the setup option and SDL2 calls necessary to use an SF2 sound font.  Requires that SDL2 was built with FluidSynth enabled.
The previous pull request was polluted with hundreds of intervening commits when I rebased to choc-3, so I have created a new one.",Looks like Travis is using the wrong version of SDL.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,983,2018-01-21T19:11:09Z,2018-01-21T21:28:38Z,2018-01-21T21:28:38Z,CLOSED,False,42,0,4,https://github.com/jrhacker,Enable the use of SF2 sound fonts,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/983,https://github.com/fabiangreffrath,5,https://github.com/chocolate-doom/chocolate-doom/pull/983#issuecomment-359275230,"Add the setup option and SDL2 calls necessary to use an SF2 sound font.  Requires that SDL2 was built with FluidSynth enabled.
The previous pull request was polluted with hundreds of intervening commits when I rebased to choc-3, so I have created a new one.","Nope.

""you either have to set the SDL_SOUNDFONTS environment variable to
some path or the game can call Mix_SetSoundFonts""
http://forums.libsdl.org/viewtopic.php?t=7092&sid=0b205331238f097f4d48193a5acac23b",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,983,2018-01-21T19:11:09Z,2018-01-21T21:28:38Z,2018-01-21T21:28:38Z,CLOSED,False,42,0,4,https://github.com/jrhacker,Enable the use of SF2 sound fonts,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/983,https://github.com/jrhacker,6,https://github.com/chocolate-doom/chocolate-doom/pull/983#issuecomment-359275793,"Add the setup option and SDL2 calls necessary to use an SF2 sound font.  Requires that SDL2 was built with FluidSynth enabled.
The previous pull request was polluted with hundreds of intervening commits when I rebased to choc-3, so I have created a new one.","Some environment variable may allow you to specify a sound font without the need for a setup config, but the sound font is not used unless the mixer is initialized.
Regarding the travis error, I am on SDL2_mixer-2.0.2, which is current.  They renamed the defines.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,986,2018-01-30T17:08:22Z,2018-03-18T03:44:16Z,2018-03-18T09:15:18Z,MERGED,True,25,17,2,https://github.com/turol,Read whole music substition config file at once,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/986,https://github.com/turol,1,https://github.com/chocolate-doom/chocolate-doom/pull/986,"As a followup #974 this cleans up i_sdlmusic.c. It reads the whole file at once, removes the redundant exit conditions from the parsing loop and gets rid of the ""Unexpected end of file"" warnings introduced previously.","As a followup #974 this cleans up i_sdlmusic.c. It reads the whole file at once, removes the redundant exit conditions from the parsing loop and gets rid of the ""Unexpected end of file"" warnings introduced previously.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,986,2018-01-30T17:08:22Z,2018-03-18T03:44:16Z,2018-03-18T09:15:18Z,MERGED,True,25,17,2,https://github.com/turol,Read whole music substition config file at once,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/986,https://github.com/turol,2,https://github.com/chocolate-doom/chocolate-doom/pull/986#issuecomment-362806180,"As a followup #974 this cleans up i_sdlmusic.c. It reads the whole file at once, removes the redundant exit conditions from the parsing loop and gets rid of the ""Unexpected end of file"" warnings introduced previously.",Made the requested changes.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,986,2018-01-30T17:08:22Z,2018-03-18T03:44:16Z,2018-03-18T09:15:18Z,MERGED,True,25,17,2,https://github.com/turol,Read whole music substition config file at once,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/986,https://github.com/chungy,3,https://github.com/chocolate-doom/chocolate-doom/pull/986#issuecomment-364738844,"As a followup #974 this cleans up i_sdlmusic.c. It reads the whole file at once, removes the redundant exit conditions from the parsing loop and gets rid of the ""Unexpected end of file"" warnings introduced previously.","Testing your branch, it seems to have a fatal flaw, it bombs out when a file doesn't exist, for example:
Couldn't read file /home/chungy/.local/share/chocolate-doom/music/heretic-music.cfg
This message appears regardless of game being played (I used Doom and Strife in testing), and only when the ""Native MIDI"" option is used in the particular engine. I don't have it set in Heretic, so that game still runs fine on its own.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,986,2018-01-30T17:08:22Z,2018-03-18T03:44:16Z,2018-03-18T09:15:18Z,MERGED,True,25,17,2,https://github.com/turol,Read whole music substition config file at once,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/986,https://github.com/turol,4,https://github.com/chocolate-doom/chocolate-doom/pull/986#issuecomment-364739779,"As a followup #974 this cleans up i_sdlmusic.c. It reads the whole file at once, removes the redundant exit conditions from the parsing loop and gets rid of the ""Unexpected end of file"" warnings introduced previously.","Interesting, I though this wouldn't be called at all if the substitue file didn't exist. It looks like this function is also responsible for checking that. That makes the suggestion of using M_ReadFile untenable since it will always error out if the file doesn't exist and changing it sounds like a really bad idea since it would affect lots of other places.
Looks like I'll have to go back to open-coding the file read. @fragglet thoughts?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,986,2018-01-30T17:08:22Z,2018-03-18T03:44:16Z,2018-03-18T09:15:18Z,MERGED,True,25,17,2,https://github.com/turol,Read whole music substition config file at once,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/986,https://github.com/chungy,5,https://github.com/chocolate-doom/chocolate-doom/pull/986#issuecomment-366321127,"As a followup #974 this cleans up i_sdlmusic.c. It reads the whole file at once, removes the redundant exit conditions from the parsing loop and gets rid of the ""Unexpected end of file"" warnings introduced previously.",You could wrap up that whole thing with if (M_FileExists(filename))...,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,986,2018-01-30T17:08:22Z,2018-03-18T03:44:16Z,2018-03-18T09:15:18Z,MERGED,True,25,17,2,https://github.com/turol,Read whole music substition config file at once,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/986,https://github.com/turol,6,https://github.com/chocolate-doom/chocolate-doom/pull/986#issuecomment-366444522,"As a followup #974 this cleans up i_sdlmusic.c. It reads the whole file at once, removes the redundant exit conditions from the parsing loop and gets rid of the ""Unexpected end of file"" warnings introduced previously.",That should work but M_FileExists opens the file and closes it immediately. There would an extra fopen which is not very elegant.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,986,2018-01-30T17:08:22Z,2018-03-18T03:44:16Z,2018-03-18T09:15:18Z,MERGED,True,25,17,2,https://github.com/turol,Read whole music substition config file at once,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/986,https://github.com/chungy,7,https://github.com/chocolate-doom/chocolate-doom/pull/986#issuecomment-367153087,"As a followup #974 this cleans up i_sdlmusic.c. It reads the whole file at once, removes the redundant exit conditions from the parsing loop and gets rid of the ""Unexpected end of file"" warnings introduced previously.","There's only a limited number of files to open anyway (half a dozen?), I seriously doubt optimizing against fopen() calls is valuable here, even slow systems probably won't show any impact.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,986,2018-01-30T17:08:22Z,2018-03-18T03:44:16Z,2018-03-18T09:15:18Z,MERGED,True,25,17,2,https://github.com/turol,Read whole music substition config file at once,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/986,https://github.com/turol,8,https://github.com/chocolate-doom/chocolate-doom/pull/986#issuecomment-368469435,"As a followup #974 this cleans up i_sdlmusic.c. It reads the whole file at once, removes the redundant exit conditions from the parsing loop and gets rid of the ""Unexpected end of file"" warnings introduced previously.",@fragglet ping,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,986,2018-01-30T17:08:22Z,2018-03-18T03:44:16Z,2018-03-18T09:15:18Z,MERGED,True,25,17,2,https://github.com/turol,Read whole music substition config file at once,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/986,https://github.com/turol,9,https://github.com/chocolate-doom/chocolate-doom/pull/986#issuecomment-373923856,"As a followup #974 this cleans up i_sdlmusic.c. It reads the whole file at once, removes the redundant exit conditions from the parsing loop and gets rid of the ""Unexpected end of file"" warnings introduced previously.","@fragglet This has been fixed for a month now, can you re-review and merge please?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,986,2018-01-30T17:08:22Z,2018-03-18T03:44:16Z,2018-03-18T09:15:18Z,MERGED,True,25,17,2,https://github.com/turol,Read whole music substition config file at once,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/986,https://github.com/fragglet,10,https://github.com/chocolate-doom/chocolate-doom/pull/986#issuecomment-373970713,"As a followup #974 this cleans up i_sdlmusic.c. It reads the whole file at once, removes the redundant exit conditions from the parsing loop and gets rid of the ""Unexpected end of file"" warnings introduced previously.","Looks good, thanks!",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,991,2018-02-13T18:05:39Z,2018-02-20T23:13:03Z,2018-03-13T20:37:27Z,MERGED,True,54,29,16,https://github.com/turol,Add GCC printf-like attribute to some functions,20,[],https://github.com/chocolate-doom/chocolate-doom/pull/991,https://github.com/turol,1,https://github.com/chocolate-doom/chocolate-doom/pull/991,"Mark some functions with GCC format attribute to make GCC check their parameters.
There are several others which could be marked but aren't, mostly because they expose some real warnings. Should I open separate issues about those or discuss them here?","Mark some functions with GCC format attribute to make GCC check their parameters.
There are several others which could be marked but aren't, mostly because they expose some real warnings. Should I open separate issues about those or discuss them here?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,991,2018-02-13T18:05:39Z,2018-02-20T23:13:03Z,2018-03-13T20:37:27Z,MERGED,True,54,29,16,https://github.com/turol,Add GCC printf-like attribute to some functions,20,[],https://github.com/chocolate-doom/chocolate-doom/pull/991,https://github.com/chungy,2,https://github.com/chocolate-doom/chocolate-doom/pull/991#issuecomment-366059245,"Mark some functions with GCC format attribute to make GCC check their parameters.
There are several others which could be marked but aren't, mostly because they expose some real warnings. Should I open separate issues about those or discuss them here?","There are several others which could be marked but aren't, mostly because they expose some real warnings. Should I open separate issues about those or discuss them here?

Sounds like it would be beneficial to add them. I'm assuming it still builds as it always has?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,991,2018-02-13T18:05:39Z,2018-02-20T23:13:03Z,2018-03-13T20:37:27Z,MERGED,True,54,29,16,https://github.com/turol,Add GCC printf-like attribute to some functions,20,[],https://github.com/chocolate-doom/chocolate-doom/pull/991,https://github.com/turol,3,https://github.com/chocolate-doom/chocolate-doom/pull/991#issuecomment-366061678,"Mark some functions with GCC format attribute to make GCC check their parameters.
There are several others which could be marked but aren't, mostly because they expose some real warnings. Should I open separate issues about those or discuss them here?","I'm assuming it still builds as it always has?

Standalone, yes. On Travis it will fail since it now has -Werror enabled.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,991,2018-02-13T18:05:39Z,2018-02-20T23:13:03Z,2018-03-13T20:37:27Z,MERGED,True,54,29,16,https://github.com/turol,Add GCC printf-like attribute to some functions,20,[],https://github.com/chocolate-doom/chocolate-doom/pull/991,https://github.com/chungy,4,https://github.com/chocolate-doom/chocolate-doom/pull/991#issuecomment-367154226,"Mark some functions with GCC format attribute to make GCC check their parameters.
There are several others which could be marked but aren't, mostly because they expose some real warnings. Should I open separate issues about those or discuss them here?",Thanks for this. We ought to get another branch started to fix the other stuff too.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,996,2018-03-01T03:10:51Z,2018-03-03T07:01:38Z,2018-03-03T22:23:35Z,MERGED,True,3,0,1,https://github.com/AXDOOMER,Fix exception thrown by Windows when debugging with GDB,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/996,https://github.com/AXDOOMER,1,https://github.com/chocolate-doom/chocolate-doom/pull/996,"This avoid In RaiseFailFastException () (C:\Windows\SysWoW64\KernelBase.dll) or
In RaiseException () (C:\WINDOWS\System32\KernelBase.dll which are exceptions thrown by the Windows kernel and prevent anyone from debugging Chocolate-Doom using GDB on Windows. We are telling SDL2 not to name threads, which on Windows is implemented by triggering a special exception. This hint must be set before calling any SDL2 function for the first time. I don't know if it affected Visual Studio as well, but the bug was reproduced with GDB 4.9 on Windows XP and GDB 7.1 on Windows 10.
https://wiki.libsdl.org/SDL_HINT_WINDOWS_DISABLE_THREAD_NAMING","This avoid In RaiseFailFastException () (C:\Windows\SysWoW64\KernelBase.dll) or
In RaiseException () (C:\WINDOWS\System32\KernelBase.dll which are exceptions thrown by the Windows kernel and prevent anyone from debugging Chocolate-Doom using GDB on Windows. We are telling SDL2 not to name threads, which on Windows is implemented by triggering a special exception. This hint must be set before calling any SDL2 function for the first time. I don't know if it affected Visual Studio as well, but the bug was reproduced with GDB 4.9 on Windows XP and GDB 7.1 on Windows 10.
https://wiki.libsdl.org/SDL_HINT_WINDOWS_DISABLE_THREAD_NAMING",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,996,2018-03-01T03:10:51Z,2018-03-03T07:01:38Z,2018-03-03T22:23:35Z,MERGED,True,3,0,1,https://github.com/AXDOOMER,Fix exception thrown by Windows when debugging with GDB,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/996,https://github.com/fabiangreffrath,2,https://github.com/chocolate-doom/chocolate-doom/pull/996#issuecomment-369557819,"This avoid In RaiseFailFastException () (C:\Windows\SysWoW64\KernelBase.dll) or
In RaiseException () (C:\WINDOWS\System32\KernelBase.dll which are exceptions thrown by the Windows kernel and prevent anyone from debugging Chocolate-Doom using GDB on Windows. We are telling SDL2 not to name threads, which on Windows is implemented by triggering a special exception. This hint must be set before calling any SDL2 function for the first time. I don't know if it affected Visual Studio as well, but the bug was reproduced with GDB 4.9 on Windows XP and GDB 7.1 on Windows 10.
https://wiki.libsdl.org/SDL_HINT_WINDOWS_DISABLE_THREAD_NAMING","So, we need to enforce unnamed threads for debugging to work at all on Windows? This sounds stupid somehow, but doesn't surprise me... ;)
I guess this code is missing a check for SDL >= 2.0.5!",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,996,2018-03-01T03:10:51Z,2018-03-03T07:01:38Z,2018-03-03T22:23:35Z,MERGED,True,3,0,1,https://github.com/AXDOOMER,Fix exception thrown by Windows when debugging with GDB,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/996,https://github.com/JNechaevsky,3,https://github.com/chocolate-doom/chocolate-doom/pull/996#issuecomment-369660828,"This avoid In RaiseFailFastException () (C:\Windows\SysWoW64\KernelBase.dll) or
In RaiseException () (C:\WINDOWS\System32\KernelBase.dll which are exceptions thrown by the Windows kernel and prevent anyone from debugging Chocolate-Doom using GDB on Windows. We are telling SDL2 not to name threads, which on Windows is implemented by triggering a special exception. This hint must be set before calling any SDL2 function for the first time. I don't know if it affected Visual Studio as well, but the bug was reproduced with GDB 4.9 on Windows XP and GDB 7.1 on Windows 10.
https://wiki.libsdl.org/SDL_HINT_WINDOWS_DISABLE_THREAD_NAMING",So... That's was the reason why I have no any output in GDB on Windows while trying to learn it? 😲,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,996,2018-03-01T03:10:51Z,2018-03-03T07:01:38Z,2018-03-03T22:23:35Z,MERGED,True,3,0,1,https://github.com/AXDOOMER,Fix exception thrown by Windows when debugging with GDB,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/996,https://github.com/chungy,4,https://github.com/chocolate-doom/chocolate-doom/pull/996#issuecomment-369662400,"This avoid In RaiseFailFastException () (C:\Windows\SysWoW64\KernelBase.dll) or
In RaiseException () (C:\WINDOWS\System32\KernelBase.dll which are exceptions thrown by the Windows kernel and prevent anyone from debugging Chocolate-Doom using GDB on Windows. We are telling SDL2 not to name threads, which on Windows is implemented by triggering a special exception. This hint must be set before calling any SDL2 function for the first time. I don't know if it affected Visual Studio as well, but the bug was reproduced with GDB 4.9 on Windows XP and GDB 7.1 on Windows 10.
https://wiki.libsdl.org/SDL_HINT_WINDOWS_DISABLE_THREAD_NAMING","I guess this code is missing a check for SDL >= 2.0.5!

indeed, the minimum version should be changed in configure.ac",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,996,2018-03-01T03:10:51Z,2018-03-03T07:01:38Z,2018-03-03T22:23:35Z,MERGED,True,3,0,1,https://github.com/AXDOOMER,Fix exception thrown by Windows when debugging with GDB,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/996,https://github.com/turol,5,https://github.com/chocolate-doom/chocolate-doom/pull/996#issuecomment-369683826,"This avoid In RaiseFailFastException () (C:\Windows\SysWoW64\KernelBase.dll) or
In RaiseException () (C:\WINDOWS\System32\KernelBase.dll which are exceptions thrown by the Windows kernel and prevent anyone from debugging Chocolate-Doom using GDB on Windows. We are telling SDL2 not to name threads, which on Windows is implemented by triggering a special exception. This hint must be set before calling any SDL2 function for the first time. I don't know if it affected Visual Studio as well, but the bug was reproduced with GDB 4.9 on Windows XP and GDB 7.1 on Windows 10.
https://wiki.libsdl.org/SDL_HINT_WINDOWS_DISABLE_THREAD_NAMING","Changing the minimum version would also probably fail on Travis unless you manually install newer SDL from somewhere.
Alternative way to fix this would be to only set the hint if it's defined.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,996,2018-03-01T03:10:51Z,2018-03-03T07:01:38Z,2018-03-03T22:23:35Z,MERGED,True,3,0,1,https://github.com/AXDOOMER,Fix exception thrown by Windows when debugging with GDB,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/996,https://github.com/AXDOOMER,6,https://github.com/chocolate-doom/chocolate-doom/pull/996#issuecomment-369711455,"This avoid In RaiseFailFastException () (C:\Windows\SysWoW64\KernelBase.dll) or
In RaiseException () (C:\WINDOWS\System32\KernelBase.dll which are exceptions thrown by the Windows kernel and prevent anyone from debugging Chocolate-Doom using GDB on Windows. We are telling SDL2 not to name threads, which on Windows is implemented by triggering a special exception. This hint must be set before calling any SDL2 function for the first time. I don't know if it affected Visual Studio as well, but the bug was reproduced with GDB 4.9 on Windows XP and GDB 7.1 on Windows 10.
https://wiki.libsdl.org/SDL_HINT_WINDOWS_DISABLE_THREAD_NAMING","So... That's was the reason why I have no any output in GDB on Windows while trying to learn it?

You should have seen an exception raised by the Windows kernel.

I guess this code is missing a check for SDL >= 2.0.5!

I'll do this. Thanks!",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,996,2018-03-01T03:10:51Z,2018-03-03T07:01:38Z,2018-03-03T22:23:35Z,MERGED,True,3,0,1,https://github.com/AXDOOMER,Fix exception thrown by Windows when debugging with GDB,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/996,https://github.com/AXDOOMER,7,https://github.com/chocolate-doom/chocolate-doom/pull/996#issuecomment-370070667,"This avoid In RaiseFailFastException () (C:\Windows\SysWoW64\KernelBase.dll) or
In RaiseException () (C:\WINDOWS\System32\KernelBase.dll which are exceptions thrown by the Windows kernel and prevent anyone from debugging Chocolate-Doom using GDB on Windows. We are telling SDL2 not to name threads, which on Windows is implemented by triggering a special exception. This hint must be set before calling any SDL2 function for the first time. I don't know if it affected Visual Studio as well, but the bug was reproduced with GDB 4.9 on Windows XP and GDB 7.1 on Windows 10.
https://wiki.libsdl.org/SDL_HINT_WINDOWS_DISABLE_THREAD_NAMING",I added a check so the code will compile with any SDL2 version.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,996,2018-03-01T03:10:51Z,2018-03-03T07:01:38Z,2018-03-03T22:23:35Z,MERGED,True,3,0,1,https://github.com/AXDOOMER,Fix exception thrown by Windows when debugging with GDB,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/996,https://github.com/fabiangreffrath,8,https://github.com/chocolate-doom/chocolate-doom/pull/996#issuecomment-370125432,"This avoid In RaiseFailFastException () (C:\Windows\SysWoW64\KernelBase.dll) or
In RaiseException () (C:\WINDOWS\System32\KernelBase.dll which are exceptions thrown by the Windows kernel and prevent anyone from debugging Chocolate-Doom using GDB on Windows. We are telling SDL2 not to name threads, which on Windows is implemented by triggering a special exception. This hint must be set before calling any SDL2 function for the first time. I don't know if it affected Visual Studio as well, but the bug was reproduced with GDB 4.9 on Windows XP and GDB 7.1 on Windows 10.
https://wiki.libsdl.org/SDL_HINT_WINDOWS_DISABLE_THREAD_NAMING",Thanks!,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,996,2018-03-01T03:10:51Z,2018-03-03T07:01:38Z,2018-03-03T22:23:35Z,MERGED,True,3,0,1,https://github.com/AXDOOMER,Fix exception thrown by Windows when debugging with GDB,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/996,https://github.com/chungy,9,https://github.com/chocolate-doom/chocolate-doom/pull/996#issuecomment-370181614,"This avoid In RaiseFailFastException () (C:\Windows\SysWoW64\KernelBase.dll) or
In RaiseException () (C:\WINDOWS\System32\KernelBase.dll which are exceptions thrown by the Windows kernel and prevent anyone from debugging Chocolate-Doom using GDB on Windows. We are telling SDL2 not to name threads, which on Windows is implemented by triggering a special exception. This hint must be set before calling any SDL2 function for the first time. I don't know if it affected Visual Studio as well, but the bug was reproduced with GDB 4.9 on Windows XP and GDB 7.1 on Windows 10.
https://wiki.libsdl.org/SDL_HINT_WINDOWS_DISABLE_THREAD_NAMING","@haleyjd raised a concern on IRC that this might actually be a bug in gdb. I've used gdb on Windows in the past without encountering this bug, so I don't really know how to reproduce it myself.
All the same, might it really be a bug in upstream GDB that should be reported/fixed there?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,996,2018-03-01T03:10:51Z,2018-03-03T07:01:38Z,2018-03-03T22:23:35Z,MERGED,True,3,0,1,https://github.com/AXDOOMER,Fix exception thrown by Windows when debugging with GDB,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/996,https://github.com/AXDOOMER,10,https://github.com/chocolate-doom/chocolate-doom/pull/996#issuecomment-370182848,"This avoid In RaiseFailFastException () (C:\Windows\SysWoW64\KernelBase.dll) or
In RaiseException () (C:\WINDOWS\System32\KernelBase.dll which are exceptions thrown by the Windows kernel and prevent anyone from debugging Chocolate-Doom using GDB on Windows. We are telling SDL2 not to name threads, which on Windows is implemented by triggering a special exception. This hint must be set before calling any SDL2 function for the first time. I don't know if it affected Visual Studio as well, but the bug was reproduced with GDB 4.9 on Windows XP and GDB 7.1 on Windows 10.
https://wiki.libsdl.org/SDL_HINT_WINDOWS_DISABLE_THREAD_NAMING","My fix tells SDL2 to not name threads so it doesn't raise the 0x406D1388 exception.
It may be that GDB can't handle this exception that's raised by SDL2 when it names threads.
https://stackoverflow.com/questions/43856252/sdl2-gdb-program-received-signal-unknown-signal
See this answer: https://stackoverflow.com/a/43923860/8460979
I've read that GDB 7.12 may have fixed that.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,996,2018-03-01T03:10:51Z,2018-03-03T07:01:38Z,2018-03-03T22:23:35Z,MERGED,True,3,0,1,https://github.com/AXDOOMER,Fix exception thrown by Windows when debugging with GDB,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/996,https://github.com/chungy,11,https://github.com/chocolate-doom/chocolate-doom/pull/996#issuecomment-370184420,"This avoid In RaiseFailFastException () (C:\Windows\SysWoW64\KernelBase.dll) or
In RaiseException () (C:\WINDOWS\System32\KernelBase.dll which are exceptions thrown by the Windows kernel and prevent anyone from debugging Chocolate-Doom using GDB on Windows. We are telling SDL2 not to name threads, which on Windows is implemented by triggering a special exception. This hint must be set before calling any SDL2 function for the first time. I don't know if it affected Visual Studio as well, but the bug was reproduced with GDB 4.9 on Windows XP and GDB 7.1 on Windows 10.
https://wiki.libsdl.org/SDL_HINT_WINDOWS_DISABLE_THREAD_NAMING","I've read that GDB 7.12 may have fixed that.

That might explain it. I think I was already running gdb 8.x the last time I used it on Windows.
If this is otherwise solvable by just running a newer version of GDB, do we really need this workaround?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,998,2018-03-05T15:43:00Z,2018-03-10T19:31:37Z,2018-03-12T11:46:09Z,MERGED,True,0,6691,19,https://github.com/jmtd,Remove the unmaintained MSVC project,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/998,https://github.com/jmtd,1,https://github.com/chocolate-doom/chocolate-doom/pull/998,"We've had several discussions, here and elsewhere, about the number of build
systems within the chocolate-doom repository. One solid outcome of this
discussion was that we will not increase the number of alternative build
systems that are present from the current number.
One of the current systems is MSVC, but the project files as committed are
out of date. This has caused some confusion from windows-oriented developers,
who are not familiar with the project, trying to try it out. (our official
build instructions still suggest using cygwin instead, and are still broken
too.)
We've had several attempts to get the MSVC projects updated, without success
(e.g. #751). Since the inclusion of the broken MSVC project procludes the
inclusion of another system, even one that someone is prepared to maintain
(e.g. #877), it should be fixed (which hasn't happened) or removed.","We've had several discussions, here and elsewhere, about the number of build
systems within the chocolate-doom repository. One solid outcome of this
discussion was that we will not increase the number of alternative build
systems that are present from the current number.
One of the current systems is MSVC, but the project files as committed are
out of date. This has caused some confusion from windows-oriented developers,
who are not familiar with the project, trying to try it out. (our official
build instructions still suggest using cygwin instead, and are still broken
too.)
We've had several attempts to get the MSVC projects updated, without success
(e.g. #751). Since the inclusion of the broken MSVC project procludes the
inclusion of another system, even one that someone is prepared to maintain
(e.g. #877), it should be fixed (which hasn't happened) or removed.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,998,2018-03-05T15:43:00Z,2018-03-10T19:31:37Z,2018-03-12T11:46:09Z,MERGED,True,0,6691,19,https://github.com/jmtd,Remove the unmaintained MSVC project,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/998,https://github.com/fragglet,2,https://github.com/chocolate-doom/chocolate-doom/pull/998#issuecomment-370499414,"We've had several discussions, here and elsewhere, about the number of build
systems within the chocolate-doom repository. One solid outcome of this
discussion was that we will not increase the number of alternative build
systems that are present from the current number.
One of the current systems is MSVC, but the project files as committed are
out of date. This has caused some confusion from windows-oriented developers,
who are not familiar with the project, trying to try it out. (our official
build instructions still suggest using cygwin instead, and are still broken
too.)
We've had several attempts to get the MSVC projects updated, without success
(e.g. #751). Since the inclusion of the broken MSVC project procludes the
inclusion of another system, even one that someone is prepared to maintain
(e.g. #877), it should be fixed (which hasn't happened) or removed.","If I understand correctly the expectation is that it gets replaced by a cmake-style build in the future.
I'm okay with this if @haleyjd is okay with it. As far as I'm concerned he has the deciding vote.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,998,2018-03-05T15:43:00Z,2018-03-10T19:31:37Z,2018-03-12T11:46:09Z,MERGED,True,0,6691,19,https://github.com/jmtd,Remove the unmaintained MSVC project,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/998,https://github.com/haleyjd,3,https://github.com/chocolate-doom/chocolate-doom/pull/998#issuecomment-370503138,"We've had several discussions, here and elsewhere, about the number of build
systems within the chocolate-doom repository. One solid outcome of this
discussion was that we will not increase the number of alternative build
systems that are present from the current number.
One of the current systems is MSVC, but the project files as committed are
out of date. This has caused some confusion from windows-oriented developers,
who are not familiar with the project, trying to try it out. (our official
build instructions still suggest using cygwin instead, and are still broken
too.)
We've had several attempts to get the MSVC projects updated, without success
(e.g. #751). Since the inclusion of the broken MSVC project procludes the
inclusion of another system, even one that someone is prepared to maintain
(e.g. #877), it should be fixed (which hasn't happened) or removed.","There are still many customized settings (optimization, building a .map file, etc) that no one has guaranteed me are going to be able to carry over to a different solution.
You can delete the project if you want but, whenever, if ever, I am working on Chocolate for whatever reason, what I will basically end up doing is creating my own private project to work with, I suppose. I'm not familiar nor comfortable with any other workflows and don't have time/desire to spend on learning them for a hobby project at this point.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,998,2018-03-05T15:43:00Z,2018-03-10T19:31:37Z,2018-03-12T11:46:09Z,MERGED,True,0,6691,19,https://github.com/jmtd,Remove the unmaintained MSVC project,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/998,https://github.com/jmtd,4,https://github.com/chocolate-doom/chocolate-doom/pull/998#issuecomment-370504600,"We've had several discussions, here and elsewhere, about the number of build
systems within the chocolate-doom repository. One solid outcome of this
discussion was that we will not increase the number of alternative build
systems that are present from the current number.
One of the current systems is MSVC, but the project files as committed are
out of date. This has caused some confusion from windows-oriented developers,
who are not familiar with the project, trying to try it out. (our official
build instructions still suggest using cygwin instead, and are still broken
too.)
We've had several attempts to get the MSVC projects updated, without success
(e.g. #751). Since the inclusion of the broken MSVC project procludes the
inclusion of another system, even one that someone is prepared to maintain
(e.g. #877), it should be fixed (which hasn't happened) or removed.","@haleyjd the alternative is, whenever you work on Choco next, you commit fixes to the MSVC project files in the repo.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,998,2018-03-05T15:43:00Z,2018-03-10T19:31:37Z,2018-03-12T11:46:09Z,MERGED,True,0,6691,19,https://github.com/jmtd,Remove the unmaintained MSVC project,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/998,https://github.com/jmtd,5,https://github.com/chocolate-doom/chocolate-doom/pull/998#issuecomment-370735576,"We've had several discussions, here and elsewhere, about the number of build
systems within the chocolate-doom repository. One solid outcome of this
discussion was that we will not increase the number of alternative build
systems that are present from the current number.
One of the current systems is MSVC, but the project files as committed are
out of date. This has caused some confusion from windows-oriented developers,
who are not familiar with the project, trying to try it out. (our official
build instructions still suggest using cygwin instead, and are still broken
too.)
We've had several attempts to get the MSVC projects updated, without success
(e.g. #751). Since the inclusion of the broken MSVC project procludes the
inclusion of another system, even one that someone is prepared to maintain
(e.g. #877), it should be fixed (which hasn't happened) or removed.","I wrote most of the above on my phone so let me elaborate. My position is we should either have an up-to-date and working MSVC project committed, or we shouldn't have it committed as it's misleading. If someone is prepared to update it, great; but that hasn't happened (#751 is 18 months old). If it's removed, then the argument that we have too many build systems does not apply in other discussions, such as the Cmake one; I am not making a judgement on that issue here, though, I think it remains a separate issue.
Removing it does not mean it cannot be brought back, or even easily recovered by someone who wants it despite it being broken.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,998,2018-03-05T15:43:00Z,2018-03-10T19:31:37Z,2018-03-12T11:46:09Z,MERGED,True,0,6691,19,https://github.com/jmtd,Remove the unmaintained MSVC project,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/998,https://github.com/fragglet,6,https://github.com/chocolate-doom/chocolate-doom/pull/998#issuecomment-370870906,"We've had several discussions, here and elsewhere, about the number of build
systems within the chocolate-doom repository. One solid outcome of this
discussion was that we will not increase the number of alternative build
systems that are present from the current number.
One of the current systems is MSVC, but the project files as committed are
out of date. This has caused some confusion from windows-oriented developers,
who are not familiar with the project, trying to try it out. (our official
build instructions still suggest using cygwin instead, and are still broken
too.)
We've had several attempts to get the MSVC projects updated, without success
(e.g. #751). Since the inclusion of the broken MSVC project procludes the
inclusion of another system, even one that someone is prepared to maintain
(e.g. #877), it should be fixed (which hasn't happened) or removed.","if ever, I am working on Chocolate for whatever reason, what I will basically end up doing is creating my own private project to work with, I suppose

I know you haven't been contributing much to the project recently (busy on many other things no doubt) but this nonetheless gives me pause; I really don't want to lose your input into the project. In particular I've always been careful to consider Chocolate Strife ""your project"" and don't want you to feel that we're in any way taking that away.
Is there an acceptable compromise we can maybe reach here that would leave you happy to contribute again in future if you have time? For example, I know that cmake can generate MSVC project files. Would it be sufficient if we set up cmake and replace the old project files with the ones it generates? (ie. we keep them checked in but they're synced from the cmake files). Then I presume you should be able to pick it up and get things building with minimal fuss.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,998,2018-03-05T15:43:00Z,2018-03-10T19:31:37Z,2018-03-12T11:46:09Z,MERGED,True,0,6691,19,https://github.com/jmtd,Remove the unmaintained MSVC project,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/998,https://github.com/chungy,7,https://github.com/chocolate-doom/chocolate-doom/pull/998#issuecomment-370884455,"We've had several discussions, here and elsewhere, about the number of build
systems within the chocolate-doom repository. One solid outcome of this
discussion was that we will not increase the number of alternative build
systems that are present from the current number.
One of the current systems is MSVC, but the project files as committed are
out of date. This has caused some confusion from windows-oriented developers,
who are not familiar with the project, trying to try it out. (our official
build instructions still suggest using cygwin instead, and are still broken
too.)
We've had several attempts to get the MSVC projects updated, without success
(e.g. #751). Since the inclusion of the broken MSVC project procludes the
inclusion of another system, even one that someone is prepared to maintain
(e.g. #877), it should be fixed (which hasn't happened) or removed.","If we did that, we'll also have to be careful enough to generate msvc files for exactly the right version via CMake (which it supports). MSVC projects are not compatible between different versions of MSVC (eg, between 2010, 2012, 2015...), and that has been a major sticking point people on IRC get hung up, that they have the ""wrong"" version of MSVC compared to what the project files are for, on top of them being broken even for the right version. The current files appear to be for the 2008 version, which is not just quite old, but it's also the last version that wasn't available free of charge.
@AlexMax might be able to shed more light on it, but I also think cmake doesn't make generalized project files, but instead hardcodes full paths in the files it generates. This is fine in its intended use-case being used by a single developer, but less good with committing autogenerated files.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,998,2018-03-05T15:43:00Z,2018-03-10T19:31:37Z,2018-03-12T11:46:09Z,MERGED,True,0,6691,19,https://github.com/jmtd,Remove the unmaintained MSVC project,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/998,https://github.com/AlexMax,8,https://github.com/chocolate-doom/chocolate-doom/pull/998#issuecomment-370985751,"We've had several discussions, here and elsewhere, about the number of build
systems within the chocolate-doom repository. One solid outcome of this
discussion was that we will not increase the number of alternative build
systems that are present from the current number.
One of the current systems is MSVC, but the project files as committed are
out of date. This has caused some confusion from windows-oriented developers,
who are not familiar with the project, trying to try it out. (our official
build instructions still suggest using cygwin instead, and are still broken
too.)
We've had several attempts to get the MSVC projects updated, without success
(e.g. #751). Since the inclusion of the broken MSVC project procludes the
inclusion of another system, even one that someone is prepared to maintain
(e.g. #877), it should be fixed (which hasn't happened) or removed.","CMake indeed does hardcode the paths.  You are not supposed to commit the contents of the build directory to your repository.  You are expected to use the CMake command or CMake GUI tool to generate your projects before you compile or begin to work on the project yourself.
@chungy is 100% on the money with his assessment of the shortcomings of keeping Visual Studio solutions in-tree.  If you don't have the exact version of Visual Studio as the repository, you have to go through an upgrade process, which usually works for me, but then any fixes you make to the project cannot be committed back to the source repository because of the upgrade process - you might lock out earlier versions.  I also assume that there is the potential for modifying the project in a way that makes assumptions about the local environment, though I can't speak to specifics.
I don't know of a build generator that supports Visual Studio and generates system-agnostic projects.  It might be possible, in theory, but I don't know near enough about the different versions of Visual Studio project/solution file formats to try.  To be frank, it was kind of irritating for me to get the Visual Studio solution in good-enough state to contribute uncapped framerate to Crispy Doom, and then having to do it again for midiproc was more annoying still since I had already gone through the rigmarole once, was doing it again, and nothing had changed.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,998,2018-03-05T15:43:00Z,2018-03-10T19:31:37Z,2018-03-12T11:46:09Z,MERGED,True,0,6691,19,https://github.com/jmtd,Remove the unmaintained MSVC project,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/998,https://github.com/haleyjd,9,https://github.com/chocolate-doom/chocolate-doom/pull/998#issuecomment-371003524,"We've had several discussions, here and elsewhere, about the number of build
systems within the chocolate-doom repository. One solid outcome of this
discussion was that we will not increase the number of alternative build
systems that are present from the current number.
One of the current systems is MSVC, but the project files as committed are
out of date. This has caused some confusion from windows-oriented developers,
who are not familiar with the project, trying to try it out. (our official
build instructions still suggest using cygwin instead, and are still broken
too.)
We've had several attempts to get the MSVC projects updated, without success
(e.g. #751). Since the inclusion of the broken MSVC project procludes the
inclusion of another system, even one that someone is prepared to maintain
(e.g. #877), it should be fixed (which hasn't happened) or removed.","I know you haven't been contributing much to the project recently (busy on many other things no doubt) but this nonetheless gives me pause; I really don't want to lose your input into the project.

@fragglet To be clear on this point I meant ""project"" in the context of Visual Studio, ie the project files. Not that I'd fork Chocolate just because of this issue. :)
I'd have no problem updating the project to 2015 and making everything build again, but the problem really is that it's a bandaid and I won't have time to be updating it after every single commit to the choco repo. So it's kind of a question as to whether or not it's worthwhile right now.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,998,2018-03-05T15:43:00Z,2018-03-10T19:31:37Z,2018-03-12T11:46:09Z,MERGED,True,0,6691,19,https://github.com/jmtd,Remove the unmaintained MSVC project,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/998,https://github.com/chungy,10,https://github.com/chocolate-doom/chocolate-doom/pull/998#issuecomment-371036801,"We've had several discussions, here and elsewhere, about the number of build
systems within the chocolate-doom repository. One solid outcome of this
discussion was that we will not increase the number of alternative build
systems that are present from the current number.
One of the current systems is MSVC, but the project files as committed are
out of date. This has caused some confusion from windows-oriented developers,
who are not familiar with the project, trying to try it out. (our official
build instructions still suggest using cygwin instead, and are still broken
too.)
We've had several attempts to get the MSVC projects updated, without success
(e.g. #751). Since the inclusion of the broken MSVC project procludes the
inclusion of another system, even one that someone is prepared to maintain
(e.g. #877), it should be fixed (which hasn't happened) or removed.","Updating the project doesn't seem to be resolving the underlying issue here, honestly, and 2015 isn't even the current version right now...
CMake generally doesn't break compatibility on new releases, it would at least secure us better against software upgrades; it's the same benefit that autotools gives us in the official build system of Chocolate Doom. Plus, given that CMake can generate make/ninja/whatever files for use on Unix, it might even be caught and repaired faster than MSVC files. (Maybe... I have doubts, but it certainly would be a lot easier.)",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,998,2018-03-05T15:43:00Z,2018-03-10T19:31:37Z,2018-03-12T11:46:09Z,MERGED,True,0,6691,19,https://github.com/jmtd,Remove the unmaintained MSVC project,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/998,https://github.com/jmtd,11,https://github.com/chocolate-doom/chocolate-doom/pull/998#issuecomment-371047314,"We've had several discussions, here and elsewhere, about the number of build
systems within the chocolate-doom repository. One solid outcome of this
discussion was that we will not increase the number of alternative build
systems that are present from the current number.
One of the current systems is MSVC, but the project files as committed are
out of date. This has caused some confusion from windows-oriented developers,
who are not familiar with the project, trying to try it out. (our official
build instructions still suggest using cygwin instead, and are still broken
too.)
We've had several attempts to get the MSVC projects updated, without success
(e.g. #751). Since the inclusion of the broken MSVC project procludes the
inclusion of another system, even one that someone is prepared to maintain
(e.g. #877), it should be fixed (which hasn't happened) or removed.","It would be interesting to see the vc output of cmake. Could we perhaps convert the cnake issue into a PR, and experiment with committing the generated MSVC files?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,998,2018-03-05T15:43:00Z,2018-03-10T19:31:37Z,2018-03-12T11:46:09Z,MERGED,True,0,6691,19,https://github.com/jmtd,Remove the unmaintained MSVC project,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/998,https://github.com/JNechaevsky,12,https://github.com/chocolate-doom/chocolate-doom/pull/998#issuecomment-371206381,"We've had several discussions, here and elsewhere, about the number of build
systems within the chocolate-doom repository. One solid outcome of this
discussion was that we will not increase the number of alternative build
systems that are present from the current number.
One of the current systems is MSVC, but the project files as committed are
out of date. This has caused some confusion from windows-oriented developers,
who are not familiar with the project, trying to try it out. (our official
build instructions still suggest using cygwin instead, and are still broken
too.)
We've had several attempts to get the MSVC projects updated, without success
(e.g. #751). Since the inclusion of the broken MSVC project procludes the
inclusion of another system, even one that someone is prepared to maintain
(e.g. #877), it should be fixed (which hasn't happened) or removed.","May I share some thoughts about this case? Couple of months ago I was lucky with resurrecting MSVC project files (in my fork, though). It is very easy to add missing and remove obsolete files from IDE itself to get a working build, but I probably will not handle it now by two reasons:

I have neither experience nor idea of what should be done in MSVC to build midiproc.exe.
For some unknown reason, while testing MSVC build I was having a crash on running net game from setup executable. Not sure it's because of my mess, I haven't touched netgame's code, and everything is fine with MinGW-w64 GCC (7.2.0) + CodeBlocks, so I decided to don't do further investigation.

Also, there is no necessity to update MSVC project after every commit into repository, nope, it is necessary to do this only after adding/deleting files from the project itself, which is not happening too often, especially in Chocolate project.
I'm also not a big fan of MSVC itself, but must admit that it's a de-facto for some (ahem, many) Windows developers, who are not familiar with CMake, so it's probably will be a good idea to have a working MSVC solution in the source package.
Thus, my suggestion here is to ask @haleyjd to spend some time on updating MSVC solution.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,998,2018-03-05T15:43:00Z,2018-03-10T19:31:37Z,2018-03-12T11:46:09Z,MERGED,True,0,6691,19,https://github.com/jmtd,Remove the unmaintained MSVC project,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/998,https://github.com/chungy,13,https://github.com/chocolate-doom/chocolate-doom/pull/998#issuecomment-371257068,"We've had several discussions, here and elsewhere, about the number of build
systems within the chocolate-doom repository. One solid outcome of this
discussion was that we will not increase the number of alternative build
systems that are present from the current number.
One of the current systems is MSVC, but the project files as committed are
out of date. This has caused some confusion from windows-oriented developers,
who are not familiar with the project, trying to try it out. (our official
build instructions still suggest using cygwin instead, and are still broken
too.)
We've had several attempts to get the MSVC projects updated, without success
(e.g. #751). Since the inclusion of the broken MSVC project procludes the
inclusion of another system, even one that someone is prepared to maintain
(e.g. #877), it should be fixed (which hasn't happened) or removed.","Visual Studio 2017 includes and integrates with CMake, which should honestly make the decision even easier: https://blogs.msdn.microsoft.com/vcblog/2016/10/05/cmake-support-in-visual-studio/",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,998,2018-03-05T15:43:00Z,2018-03-10T19:31:37Z,2018-03-12T11:46:09Z,MERGED,True,0,6691,19,https://github.com/jmtd,Remove the unmaintained MSVC project,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/998,https://github.com/haleyjd,14,https://github.com/chocolate-doom/chocolate-doom/pull/998#issuecomment-371282830,"We've had several discussions, here and elsewhere, about the number of build
systems within the chocolate-doom repository. One solid outcome of this
discussion was that we will not increase the number of alternative build
systems that are present from the current number.
One of the current systems is MSVC, but the project files as committed are
out of date. This has caused some confusion from windows-oriented developers,
who are not familiar with the project, trying to try it out. (our official
build instructions still suggest using cygwin instead, and are still broken
too.)
We've had several attempts to get the MSVC projects updated, without success
(e.g. #751). Since the inclusion of the broken MSVC project procludes the
inclusion of another system, even one that someone is prepared to maintain
(e.g. #877), it should be fixed (which hasn't happened) or removed.","Visual Studio 2017

I offered 2015 because I don't have 2017 installed yet and have no intention on installing it while I'm still on this PC (I'll be upgrading soon though). But, whatever.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,998,2018-03-05T15:43:00Z,2018-03-10T19:31:37Z,2018-03-12T11:46:09Z,MERGED,True,0,6691,19,https://github.com/jmtd,Remove the unmaintained MSVC project,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/998,https://github.com/AlexMax,15,https://github.com/chocolate-doom/chocolate-doom/pull/998#issuecomment-371339244,"We've had several discussions, here and elsewhere, about the number of build
systems within the chocolate-doom repository. One solid outcome of this
discussion was that we will not increase the number of alternative build
systems that are present from the current number.
One of the current systems is MSVC, but the project files as committed are
out of date. This has caused some confusion from windows-oriented developers,
who are not familiar with the project, trying to try it out. (our official
build instructions still suggest using cygwin instead, and are still broken
too.)
We've had several attempts to get the MSVC projects updated, without success
(e.g. #751). Since the inclusion of the broken MSVC project procludes the
inclusion of another system, even one that someone is prepared to maintain
(e.g. #877), it should be fixed (which hasn't happened) or removed.","@chungy Visual Studio's CMake integration is kind of half-baked at this moment in time.  As far as I can tell, there's no GUI interface to edit cache values, just a text file that you're expected to copy paste SDL paths and such into.  The official CMake GUI is much nicer.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,998,2018-03-05T15:43:00Z,2018-03-10T19:31:37Z,2018-03-12T11:46:09Z,MERGED,True,0,6691,19,https://github.com/jmtd,Remove the unmaintained MSVC project,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/998,https://github.com/turol,16,https://github.com/chocolate-doom/chocolate-doom/pull/998#issuecomment-372020131,"We've had several discussions, here and elsewhere, about the number of build
systems within the chocolate-doom repository. One solid outcome of this
discussion was that we will not increase the number of alternative build
systems that are present from the current number.
One of the current systems is MSVC, but the project files as committed are
out of date. This has caused some confusion from windows-oriented developers,
who are not familiar with the project, trying to try it out. (our official
build instructions still suggest using cygwin instead, and are still broken
too.)
We've had several attempts to get the MSVC projects updated, without success
(e.g. #751). Since the inclusion of the broken MSVC project procludes the
inclusion of another system, even one that someone is prepared to maintain
(e.g. #877), it should be fixed (which hasn't happened) or removed.","For whatever it's worth, I support removing MSVC projects and moving to CMake.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,998,2018-03-05T15:43:00Z,2018-03-10T19:31:37Z,2018-03-12T11:46:09Z,MERGED,True,0,6691,19,https://github.com/jmtd,Remove the unmaintained MSVC project,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/998,https://github.com/fragglet,17,https://github.com/chocolate-doom/chocolate-doom/pull/998#issuecomment-372058561,"We've had several discussions, here and elsewhere, about the number of build
systems within the chocolate-doom repository. One solid outcome of this
discussion was that we will not increase the number of alternative build
systems that are present from the current number.
One of the current systems is MSVC, but the project files as committed are
out of date. This has caused some confusion from windows-oriented developers,
who are not familiar with the project, trying to try it out. (our official
build instructions still suggest using cygwin instead, and are still broken
too.)
We've had several attempts to get the MSVC projects updated, without success
(e.g. #751). Since the inclusion of the broken MSVC project procludes the
inclusion of another system, even one that someone is prepared to maintain
(e.g. #877), it should be fixed (which hasn't happened) or removed.",It sounds like @haleyjd is okay with this so I'm going to merge. Thanks and let cmaking commence!,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,998,2018-03-05T15:43:00Z,2018-03-10T19:31:37Z,2018-03-12T11:46:09Z,MERGED,True,0,6691,19,https://github.com/jmtd,Remove the unmaintained MSVC project,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/998,https://github.com/fragglet,18,https://github.com/chocolate-doom/chocolate-doom/pull/998#issuecomment-372058649,"We've had several discussions, here and elsewhere, about the number of build
systems within the chocolate-doom repository. One solid outcome of this
discussion was that we will not increase the number of alternative build
systems that are present from the current number.
One of the current systems is MSVC, but the project files as committed are
out of date. This has caused some confusion from windows-oriented developers,
who are not familiar with the project, trying to try it out. (our official
build instructions still suggest using cygwin instead, and are still broken
too.)
We've had several attempts to get the MSVC projects updated, without success
(e.g. #751). Since the inclusion of the broken MSVC project procludes the
inclusion of another system, even one that someone is prepared to maintain
(e.g. #877), it should be fixed (which hasn't happened) or removed.",Also: I believe cmake has Codeblocks integration. Let's replace that too.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,998,2018-03-05T15:43:00Z,2018-03-10T19:31:37Z,2018-03-12T11:46:09Z,MERGED,True,0,6691,19,https://github.com/jmtd,Remove the unmaintained MSVC project,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/998,https://github.com/JNechaevsky,19,https://github.com/chocolate-doom/chocolate-doom/pull/998#issuecomment-372059948,"We've had several discussions, here and elsewhere, about the number of build
systems within the chocolate-doom repository. One solid outcome of this
discussion was that we will not increase the number of alternative build
systems that are present from the current number.
One of the current systems is MSVC, but the project files as committed are
out of date. This has caused some confusion from windows-oriented developers,
who are not familiar with the project, trying to try it out. (our official
build instructions still suggest using cygwin instead, and are still broken
too.)
We've had several attempts to get the MSVC projects updated, without success
(e.g. #751). Since the inclusion of the broken MSVC project procludes the
inclusion of another system, even one that someone is prepared to maintain
(e.g. #877), it should be fixed (which hasn't happened) or removed.","I believe cmake has Codeblocks integration.

Yes, it is. Unfortunately, for Codeblocks, Cmake merges all sub-projects (games, textscreen, setup and etc) in one piece, so user will not be able, for example, to build only Doom but not Heretic and Hexen. Sorry, not sure how to explain more properly, but any way, it is working.
I've also want to note that using MSYS is much easier (speaking for myself, of course) than any other previous ways to compile under Windows. And more of that, it gives all possible benefits like PNG screenshots, right from the box.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,998,2018-03-05T15:43:00Z,2018-03-10T19:31:37Z,2018-03-12T11:46:09Z,MERGED,True,0,6691,19,https://github.com/jmtd,Remove the unmaintained MSVC project,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/998,https://github.com/chungy,20,https://github.com/chocolate-doom/chocolate-doom/pull/998#issuecomment-372060814,"We've had several discussions, here and elsewhere, about the number of build
systems within the chocolate-doom repository. One solid outcome of this
discussion was that we will not increase the number of alternative build
systems that are present from the current number.
One of the current systems is MSVC, but the project files as committed are
out of date. This has caused some confusion from windows-oriented developers,
who are not familiar with the project, trying to try it out. (our official
build instructions still suggest using cygwin instead, and are still broken
too.)
We've had several attempts to get the MSVC projects updated, without success
(e.g. #751). Since the inclusion of the broken MSVC project procludes the
inclusion of another system, even one that someone is prepared to maintain
(e.g. #877), it should be fixed (which hasn't happened) or removed.","Unfortunately, for Codeblocks, Cmake merges all sub-projects (games, textscreen, setup and etc) in one piece, so user will not be able, for example, to build only Doom but not Heretic and Hexen.

That might just be an issue with how the CMakeLists.txt is created, rather than a technical limitation of CMake itself. Regardless, building the whole project doesn't really take much time, and once you have it built, I'd hope CodeBlocks doesn't recompile files that haven't been changed since the last build.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,998,2018-03-05T15:43:00Z,2018-03-10T19:31:37Z,2018-03-12T11:46:09Z,MERGED,True,0,6691,19,https://github.com/jmtd,Remove the unmaintained MSVC project,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/998,https://github.com/JNechaevsky,21,https://github.com/chocolate-doom/chocolate-doom/pull/998#issuecomment-372061113,"We've had several discussions, here and elsewhere, about the number of build
systems within the chocolate-doom repository. One solid outcome of this
discussion was that we will not increase the number of alternative build
systems that are present from the current number.
One of the current systems is MSVC, but the project files as committed are
out of date. This has caused some confusion from windows-oriented developers,
who are not familiar with the project, trying to try it out. (our official
build instructions still suggest using cygwin instead, and are still broken
too.)
We've had several attempts to get the MSVC projects updated, without success
(e.g. #751). Since the inclusion of the broken MSVC project procludes the
inclusion of another system, even one that someone is prepared to maintain
(e.g. #877), it should be fixed (which hasn't happened) or removed.","Sure, it recompiles only changed files.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,998,2018-03-05T15:43:00Z,2018-03-10T19:31:37Z,2018-03-12T11:46:09Z,MERGED,True,0,6691,19,https://github.com/jmtd,Remove the unmaintained MSVC project,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/998,https://github.com/AlexMax,22,https://github.com/chocolate-doom/chocolate-doom/pull/998#issuecomment-372070287,"We've had several discussions, here and elsewhere, about the number of build
systems within the chocolate-doom repository. One solid outcome of this
discussion was that we will not increase the number of alternative build
systems that are present from the current number.
One of the current systems is MSVC, but the project files as committed are
out of date. This has caused some confusion from windows-oriented developers,
who are not familiar with the project, trying to try it out. (our official
build instructions still suggest using cygwin instead, and are still broken
too.)
We've had several attempts to get the MSVC projects updated, without success
(e.g. #751). Since the inclusion of the broken MSVC project procludes the
inclusion of another system, even one that someone is prepared to maintain
(e.g. #877), it should be fixed (which hasn't happened) or removed.",Allrighty then cracks knuckles I'll get to working on the CMake files.,True,{'THUMBS_UP': ['https://github.com/fragglet']}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,999,2018-03-13T18:22:42Z,2018-03-17T05:00:18Z,2018-03-17T05:00:18Z,MERGED,True,91,91,31,https://github.com/turol,Improve const correctness,47,[],https://github.com/chocolate-doom/chocolate-doom/pull/999,https://github.com/turol,1,https://github.com/chocolate-doom/chocolate-doom/pull/999,This is consistent but it's nowhere near complete. These are only trivial changes. The eventual goal is to be able to enable -Wwrite-strings.,This is consistent but it's nowhere near complete. These are only trivial changes. The eventual goal is to be able to enable -Wwrite-strings.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,999,2018-03-13T18:22:42Z,2018-03-17T05:00:18Z,2018-03-17T05:00:18Z,MERGED,True,91,91,31,https://github.com/turol,Improve const correctness,47,[],https://github.com/chocolate-doom/chocolate-doom/pull/999,https://github.com/chungy,2,https://github.com/chocolate-doom/chocolate-doom/pull/999#issuecomment-373894737,This is consistent but it's nowhere near complete. These are only trivial changes. The eventual goal is to be able to enable -Wwrite-strings.,"looks good to me, thanks :)",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1001,2018-03-18T07:44:43Z,2018-03-18T17:17:04Z,2018-03-18T17:26:16Z,MERGED,True,87,27,2,https://github.com/ioan-chera,Fix TXT_SelectFile for macOS,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1001,https://github.com/ioan-chera,1,https://github.com/chocolate-doom/chocolate-doom/pull/1001,"First parameter needed to be const, and the content updated to work under this restriction.
It wouldn't compile on macOS otherwise.","First parameter needed to be const, and the content updated to work under this restriction.
It wouldn't compile on macOS otherwise.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1001,2018-03-18T07:44:43Z,2018-03-18T17:17:04Z,2018-03-18T17:26:16Z,MERGED,True,87,27,2,https://github.com/ioan-chera,Fix TXT_SelectFile for macOS,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1001,https://github.com/turol,2,https://github.com/chocolate-doom/chocolate-doom/pull/1001#issuecomment-373986604,"First parameter needed to be const, and the content updated to work under this restriction.
It wouldn't compile on macOS otherwise.",One commit should be one and only one logical change. You've mixed together five changes in one commit. It's really hard to review that.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1001,2018-03-18T07:44:43Z,2018-03-18T17:17:04Z,2018-03-18T17:26:16Z,MERGED,True,87,27,2,https://github.com/ioan-chera,Fix TXT_SelectFile for macOS,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1001,https://github.com/ioan-chera,3,https://github.com/chocolate-doom/chocolate-doom/pull/1001#issuecomment-373987201,"First parameter needed to be const, and the content updated to work under this restriction.
It wouldn't compile on macOS otherwise.","Sorry but they're linked. One leads to another, due to chaining of consts. I couldn't leave the buffer overflow in, could I? I couldn't commit it without testing it first, could I? Hell, it's not even that big a change in the library, it's only one part (the Mac part) of a single file. Any partial commit would result in some code that (one way or another) would have broken parts (either unchecked malloc, buffer overflow or misleading naming that doesn't tell the caller that the result should be freed).",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1001,2018-03-18T07:44:43Z,2018-03-18T17:17:04Z,2018-03-18T17:26:16Z,MERGED,True,87,27,2,https://github.com/ioan-chera,Fix TXT_SelectFile for macOS,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1001,https://github.com/turol,4,https://github.com/chocolate-doom/chocolate-doom/pull/1001#issuecomment-373987786,"First parameter needed to be const, and the content updated to work under this restriction.
It wouldn't compile on macOS otherwise.","The test change definitely doesn't belong in the same commit.
The name change doesn't belong. Yes, it improves readability but it's a separate issue.
The const changes could be done one function at a time. In this case it's harder since the build is already broken but you could make the changes locally and then commit one by one, moving the error down the stack and finally fixing it. Or just do one commit which does all the const at once. Matter of taste really.
You should remove the initial (and broken) commit from the history.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1001,2018-03-18T07:44:43Z,2018-03-18T17:17:04Z,2018-03-18T17:26:16Z,MERGED,True,87,27,2,https://github.com/ioan-chera,Fix TXT_SelectFile for macOS,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1001,https://github.com/ioan-chera,5,https://github.com/chocolate-doom/chocolate-doom/pull/1001#issuecomment-373988342,"First parameter needed to be const, and the content updated to work under this restriction.
It wouldn't compile on macOS otherwise.",Too bad. I'm not going to redo this. Take it or leave it. Also I'm not going to remove pushed history.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1001,2018-03-18T07:44:43Z,2018-03-18T17:17:04Z,2018-03-18T17:26:16Z,MERGED,True,87,27,2,https://github.com/ioan-chera,Fix TXT_SelectFile for macOS,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1001,https://github.com/fragglet,6,https://github.com/chocolate-doom/chocolate-doom/pull/1001#issuecomment-374018253,"First parameter needed to be const, and the content updated to work under this restriction.
It wouldn't compile on macOS otherwise.","I'd echo @turol's comments that changing many things in one commit makes things harder to review, though in this instance it's not so bad.
This looks good, thanks for the fix.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1001,2018-03-18T07:44:43Z,2018-03-18T17:17:04Z,2018-03-18T17:26:16Z,MERGED,True,87,27,2,https://github.com/ioan-chera,Fix TXT_SelectFile for macOS,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1001,https://github.com/chungy,7,https://github.com/chocolate-doom/chocolate-doom/pull/1001#issuecomment-374019456,"First parameter needed to be const, and the content updated to work under this restriction.
It wouldn't compile on macOS otherwise.","The commit message style also violates the guidelines, would be nice to see future contributions improve :)",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1002,2018-03-18T08:14:20Z,2018-03-25T00:21:00Z,2018-03-25T00:33:32Z,MERGED,True,21,12,3,https://github.com/chungy,video: Don't enforce an 8:5 ratio when correction is not enabled.,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/1002,https://github.com/chungy,1,https://github.com/chocolate-doom/chocolate-doom/pull/1002,"As outlined in #968, this removes the 8:5 ratio in both fullscreen
and windowed modes, allowing the game screen to scale to any arbitrary
resolution or window size, no black borders visible!","As outlined in #968, this removes the 8:5 ratio in both fullscreen
and windowed modes, allowing the game screen to scale to any arbitrary
resolution or window size, no black borders visible!",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1002,2018-03-18T08:14:20Z,2018-03-25T00:21:00Z,2018-03-25T00:33:32Z,MERGED,True,21,12,3,https://github.com/chungy,video: Don't enforce an 8:5 ratio when correction is not enabled.,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/1002,https://github.com/chungy,2,https://github.com/chocolate-doom/chocolate-doom/pull/1002#issuecomment-373980900,"As outlined in #968, this removes the 8:5 ratio in both fullscreen
and windowed modes, allowing the game screen to scale to any arbitrary
resolution or window size, no black borders visible!","I placed this as a pull request because there was a request in the issue thread for another option to preserve 8:5 ratio, but I don't really see the benefit in doing so. It complicates the code and configuration both to have three states.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1002,2018-03-18T08:14:20Z,2018-03-25T00:21:00Z,2018-03-25T00:33:32Z,MERGED,True,21,12,3,https://github.com/chungy,video: Don't enforce an 8:5 ratio when correction is not enabled.,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/1002,https://github.com/fragglet,3,https://github.com/chocolate-doom/chocolate-doom/pull/1002#issuecomment-374017666,"As outlined in #968, this removes the 8:5 ratio in both fullscreen
and windowed modes, allowing the game screen to scale to any arbitrary
resolution or window size, no black borders visible!","Left a comment on #968 to give my thoughts on this. I think I'm okay with it. Can you update the GUI label inside the setup tool so that instead of it being ""Fix aspect ratio"" it's ""Force correct aspect ratio""?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1002,2018-03-18T08:14:20Z,2018-03-25T00:21:00Z,2018-03-25T00:33:32Z,MERGED,True,21,12,3,https://github.com/chungy,video: Don't enforce an 8:5 ratio when correction is not enabled.,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/1002,https://github.com/chungy,4,https://github.com/chocolate-doom/chocolate-doom/pull/1002#issuecomment-374018346,"As outlined in #968, this removes the 8:5 ratio in both fullscreen
and windowed modes, allowing the game screen to scale to any arbitrary
resolution or window size, no black borders visible!",Sure thing :),True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1002,2018-03-18T08:14:20Z,2018-03-25T00:21:00Z,2018-03-25T00:33:32Z,MERGED,True,21,12,3,https://github.com/chungy,video: Don't enforce an 8:5 ratio when correction is not enabled.,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/1002,https://github.com/chungy,5,https://github.com/chocolate-doom/chocolate-doom/pull/1002#issuecomment-375932534,"As outlined in #968, this removes the 8:5 ratio in both fullscreen
and windowed modes, allowing the game screen to scale to any arbitrary
resolution or window size, no black borders visible!","Following the conversation in #968, I've pushed a new commit to handle the aspect_ratio_correct==false && integer_scaling==true case, where the 8:5 constraint is still appiled.
I think we can merge this now.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1002,2018-03-18T08:14:20Z,2018-03-25T00:21:00Z,2018-03-25T00:33:32Z,MERGED,True,21,12,3,https://github.com/chungy,video: Don't enforce an 8:5 ratio when correction is not enabled.,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/1002,https://github.com/fragglet,6,https://github.com/chocolate-doom/chocolate-doom/pull/1002#issuecomment-375935035,"As outlined in #968, this removes the 8:5 ratio in both fullscreen
and windowed modes, allowing the game screen to scale to any arbitrary
resolution or window size, no black borders visible!","Looks good, thanks!",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1003,2018-03-20T17:14:46Z,2018-03-20T19:08:06Z,2018-03-20T19:08:06Z,MERGED,True,4,4,1,https://github.com/turol,Non-trivial constness fix,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1003,https://github.com/turol,1,https://github.com/chocolate-doom/chocolate-doom/pull/1003,TXT_SelectFile was storing string constants in the same array as some allocated strings. Now it has some more allocations but it's easier to convince both yourself and the compiler that it's correct.,TXT_SelectFile was storing string constants in the same array as some allocated strings. Now it has some more allocations but it's easier to convince both yourself and the compiler that it's correct.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1004,2018-03-22T11:03:25Z,2018-03-23T15:22:26Z,2018-03-23T15:22:34Z,MERGED,True,305,328,2,https://github.com/nukeykt,opl: Nuked OPL3 v1.8,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1004,https://github.com/nukeykt,1,https://github.com/chocolate-doom/chocolate-doom/pull/1004,"Changelog:
-New envelope generator.
-Rhythm mode is 100% correct now.","Changelog:
-New envelope generator.
-Rhythm mode is 100% correct now.",True,{'THUMBS_UP': ['https://github.com/JNechaevsky']}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1004,2018-03-22T11:03:25Z,2018-03-23T15:22:26Z,2018-03-23T15:22:34Z,MERGED,True,305,328,2,https://github.com/nukeykt,opl: Nuked OPL3 v1.8,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1004,https://github.com/fragglet,2,https://github.com/chocolate-doom/chocolate-doom/pull/1004#issuecomment-375701095,"Changelog:
-New envelope generator.
-Rhythm mode is 100% correct now.","Cool, thanks!",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1005,2018-03-24T14:05:02Z,2018-03-24T23:08:55Z,2018-03-24T23:08:55Z,MERGED,True,18,18,5,https://github.com/turol,Make TXT_SelectFile extensions parameter const,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1005,https://github.com/turol,1,https://github.com/chocolate-doom/chocolate-doom/pull/1005,This is complicated because we must fix all the callers at the same time. @chungy @ioan-chera Please test this on windows/macOs before merge. I tried to fix all the variants but I can't compile-test it myself.,This is complicated because we must fix all the callers at the same time. @chungy @ioan-chera Please test this on windows/macOs before merge. I tried to fix all the variants but I can't compile-test it myself.,True,{'THUMBS_UP': ['https://github.com/ioan-chera']}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1005,2018-03-24T14:05:02Z,2018-03-24T23:08:55Z,2018-03-24T23:08:55Z,MERGED,True,18,18,5,https://github.com/turol,Make TXT_SelectFile extensions parameter const,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1005,https://github.com/chungy,2,https://github.com/chocolate-doom/chocolate-doom/pull/1005#issuecomment-375929022,This is complicated because we must fix all the callers at the same time. @chungy @ioan-chera Please test this on windows/macOs before merge. I tried to fix all the variants but I can't compile-test it myself.,Windows build seems fine,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1005,2018-03-24T14:05:02Z,2018-03-24T23:08:55Z,2018-03-24T23:08:55Z,MERGED,True,18,18,5,https://github.com/turol,Make TXT_SelectFile extensions parameter const,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1005,https://github.com/fragglet,3,https://github.com/chocolate-doom/chocolate-doom/pull/1005#issuecomment-375931566,This is complicated because we must fix all the callers at the same time. @chungy @ioan-chera Please test this on windows/macOs before merge. I tried to fix all the variants but I can't compile-test it myself.,OS X build is also good. Thanks,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1006,2018-03-27T16:32:11Z,2018-03-28T00:51:21Z,2018-03-28T00:51:21Z,MERGED,True,21,21,8,https://github.com/turol,More const correctness fixes,5,[],https://github.com/chocolate-doom/chocolate-doom/pull/1006,https://github.com/turol,1,https://github.com/chocolate-doom/chocolate-doom/pull/1006,This should take care of textscreen. TXT_NewDropdownList was a bit complicated because again needed to fix all callers at once.,This should take care of textscreen. TXT_NewDropdownList was a bit complicated because again needed to fix all callers at once.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1013,2018-03-31T14:59:00Z,2018-03-31T17:54:17Z,2018-03-31T17:54:17Z,MERGED,True,37,37,23,https://github.com/turol,Const correctness fixes,24,[],https://github.com/chocolate-doom/chocolate-doom/pull/1013,https://github.com/turol,1,https://github.com/chocolate-doom/chocolate-doom/pull/1013,Another batch of trivial fixes. Next thing is untangling the mess that is DEH_ which is not going to be trivial...,Another batch of trivial fixes. Next thing is untangling the mess that is DEH_ which is not going to be trivial...,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1019,2018-04-03T16:35:10Z,2018-04-22T20:19:20Z,2018-04-22T20:19:20Z,MERGED,True,9,9,5,https://github.com/turol,Fix some const correctness issues in doom-specific code,9,[],https://github.com/chocolate-doom/chocolate-doom/pull/1019,https://github.com/turol,1,https://github.com/chocolate-doom/chocolate-doom/pull/1019,"Mostly trivial but I noticed something wrong when fixing p_saveg.c
saveg_writep writes raw pointers to file and saveg_readp reads them back. This might have worked in DOS but can't possibly work on modern OSes. Is there something hackish going on which fixes the pointers afterwards or it is working just because of luck? In the latter case every call to saveg_readp needs to be rethough and rewritten.
@fragglet It looks like you wrote this code originally, @fabiangreffrath you added a cast to intptr_t (which is wrong too, it's immediately cast to 32-bit which truncates the pointer on 64-bit).","Mostly trivial but I noticed something wrong when fixing p_saveg.c
saveg_writep writes raw pointers to file and saveg_readp reads them back. This might have worked in DOS but can't possibly work on modern OSes. Is there something hackish going on which fixes the pointers afterwards or it is working just because of luck? In the latter case every call to saveg_readp needs to be rethough and rewritten.
@fragglet It looks like you wrote this code originally, @fabiangreffrath you added a cast to intptr_t (which is wrong too, it's immediately cast to 32-bit which truncates the pointer on 64-bit).",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1019,2018-04-03T16:35:10Z,2018-04-22T20:19:20Z,2018-04-22T20:19:20Z,MERGED,True,9,9,5,https://github.com/turol,Fix some const correctness issues in doom-specific code,9,[],https://github.com/chocolate-doom/chocolate-doom/pull/1019,https://github.com/fabiangreffrath,2,https://github.com/chocolate-doom/chocolate-doom/pull/1019#issuecomment-378364517,"Mostly trivial but I noticed something wrong when fixing p_saveg.c
saveg_writep writes raw pointers to file and saveg_readp reads them back. This might have worked in DOS but can't possibly work on modern OSes. Is there something hackish going on which fixes the pointers afterwards or it is working just because of luck? In the latter case every call to saveg_readp needs to be rethough and rewritten.
@fragglet It looks like you wrote this code originally, @fabiangreffrath you added a cast to intptr_t (which is wrong too, it's immediately cast to 32-bit which truncates the pointer on 64-bit).","No, of course we do not read pointers back from disk. The crucial ones are recreated and the other ones invalidated.
And no, adding the intermediate casts is not wrong. If you leave them away you will catch some ""cast pointer to integer of different size"" type compiler warnings on 64-bit systems.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1019,2018-04-03T16:35:10Z,2018-04-22T20:19:20Z,2018-04-22T20:19:20Z,MERGED,True,9,9,5,https://github.com/turol,Fix some const correctness issues in doom-specific code,9,[],https://github.com/chocolate-doom/chocolate-doom/pull/1019,https://github.com/turol,3,https://github.com/chocolate-doom/chocolate-doom/pull/1019#issuecomment-378536833,"Mostly trivial but I noticed something wrong when fixing p_saveg.c
saveg_writep writes raw pointers to file and saveg_readp reads them back. This might have worked in DOS but can't possibly work on modern OSes. Is there something hackish going on which fixes the pointers afterwards or it is working just because of luck? In the latter case every call to saveg_readp needs to be rethough and rewritten.
@fragglet It looks like you wrote this code originally, @fabiangreffrath you added a cast to intptr_t (which is wrong too, it's immediately cast to 32-bit which truncates the pointer on 64-bit).","On further examination it looks like at least some of those pointers are indeed invalidated. This should at least be documented at saveg_readp call sites. Better would be to execute saveg_readp (to keep the file pointer correct), discard the return value and just use NULL. This would make it easier to debug if it ever goes wrong.
The intermediate cast might avoid warning but it's still wrong in the sense that the truncated value is meaningless. Again, it should either be documented at all call sites or an explicit dummy value written to file.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1019,2018-04-03T16:35:10Z,2018-04-22T20:19:20Z,2018-04-22T20:19:20Z,MERGED,True,9,9,5,https://github.com/turol,Fix some const correctness issues in doom-specific code,9,[],https://github.com/chocolate-doom/chocolate-doom/pull/1019,https://github.com/fabiangreffrath,4,https://github.com/chocolate-doom/chocolate-doom/pull/1019#issuecomment-378837477,"Mostly trivial but I noticed something wrong when fixing p_saveg.c
saveg_writep writes raw pointers to file and saveg_readp reads them back. This might have worked in DOS but can't possibly work on modern OSes. Is there something hackish going on which fixes the pointers afterwards or it is working just because of luck? In the latter case every call to saveg_readp needs to be rethough and rewritten.
@fragglet It looks like you wrote this code originally, @fabiangreffrath you added a cast to intptr_t (which is wrong too, it's immediately cast to 32-bit which truncates the pointer on 64-bit).","The intermediate cast might avoid warning but it's still wrong in the sense that the truncated value is meaningless

Casting a pointer to an int of the exact same size is not wrong! And the following truncation to a 32-bit int is also not wrong if you discard the value anyway. I really don't see your point here.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1019,2018-04-03T16:35:10Z,2018-04-22T20:19:20Z,2018-04-22T20:19:20Z,MERGED,True,9,9,5,https://github.com/turol,Fix some const correctness issues in doom-specific code,9,[],https://github.com/chocolate-doom/chocolate-doom/pull/1019,https://github.com/turol,5,https://github.com/chocolate-doom/chocolate-doom/pull/1019#issuecomment-378840607,"Mostly trivial but I noticed something wrong when fixing p_saveg.c
saveg_writep writes raw pointers to file and saveg_readp reads them back. This might have worked in DOS but can't possibly work on modern OSes. Is there something hackish going on which fixes the pointers afterwards or it is working just because of luck? In the latter case every call to saveg_readp needs to be rethough and rewritten.
@fragglet It looks like you wrote this code originally, @fabiangreffrath you added a cast to intptr_t (which is wrong too, it's immediately cast to 32-bit which truncates the pointer on 64-bit).",The point is that the resulting value is completely meaningless and since we don't actually use it we should just discard the pointer value at that point and write a dummy value instead.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1019,2018-04-03T16:35:10Z,2018-04-22T20:19:20Z,2018-04-22T20:19:20Z,MERGED,True,9,9,5,https://github.com/turol,Fix some const correctness issues in doom-specific code,9,[],https://github.com/chocolate-doom/chocolate-doom/pull/1019,https://github.com/turol,6,https://github.com/chocolate-doom/chocolate-doom/pull/1019#issuecomment-383390911,"Mostly trivial but I noticed something wrong when fixing p_saveg.c
saveg_writep writes raw pointers to file and saveg_readp reads them back. This might have worked in DOS but can't possibly work on modern OSes. Is there something hackish going on which fixes the pointers afterwards or it is working just because of luck? In the latter case every call to saveg_readp needs to be rethough and rewritten.
@fragglet It looks like you wrote this code originally, @fabiangreffrath you added a cast to intptr_t (which is wrong too, it's immediately cast to 32-bit which truncates the pointer on 64-bit).","@fragglet Do you want to comment on this? Would you accept a PR which makes the pointer handling clearer (store expliticit dummy values, ignore the read values) in save/load code?
I any case this PR should be merged.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1019,2018-04-03T16:35:10Z,2018-04-22T20:19:20Z,2018-04-22T20:19:20Z,MERGED,True,9,9,5,https://github.com/turol,Fix some const correctness issues in doom-specific code,9,[],https://github.com/chocolate-doom/chocolate-doom/pull/1019,https://github.com/fragglet,7,https://github.com/chocolate-doom/chocolate-doom/pull/1019#issuecomment-383409363,"Mostly trivial but I noticed something wrong when fixing p_saveg.c
saveg_writep writes raw pointers to file and saveg_readp reads them back. This might have worked in DOS but can't possibly work on modern OSes. Is there something hackish going on which fixes the pointers afterwards or it is working just because of luck? In the latter case every call to saveg_readp needs to be rethough and rewritten.
@fragglet It looks like you wrote this code originally, @fabiangreffrath you added a cast to intptr_t (which is wrong too, it's immediately cast to 32-bit which truncates the pointer on 64-bit).","Yep, this is fine, and the savegame code is fine too.
The pointers which get written to disk aren't used. They could be just be written as zeros, but in practice we write the lower bits of the pointer to vaguely emulate what the DOS version does. It's more there as ""in case you want to write a tool to manipulate vanilla savegames which makes use of this somehow"".",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1023,2018-04-13T21:27:33Z,,2019-11-17T22:04:56Z,OPEN,False,11,1,1,https://github.com/mykola-ambar,Heretic multiplayer demo playback (Fix for #1022),3,[],https://github.com/chocolate-doom/chocolate-doom/pull/1023,https://github.com/mykola-ambar,1,https://github.com/chocolate-doom/chocolate-doom/pull/1023,"This PR adresses #1022, adding a command line switch that allows for demo playback in network mode.","This PR adresses #1022, adding a command line switch that allows for demo playback in network mode.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1023,2018-04-13T21:27:33Z,,2019-11-17T22:04:56Z,OPEN,False,11,1,1,https://github.com/mykola-ambar,Heretic multiplayer demo playback (Fix for #1022),3,[],https://github.com/chocolate-doom/chocolate-doom/pull/1023,https://github.com/chungy,2,https://github.com/chocolate-doom/chocolate-doom/pull/1023#issuecomment-381270053,"This PR adresses #1022, adding a command line switch that allows for demo playback in network mode.","Thanks for the contribution but I have a few concerns:

Vanilla compatibility

The behavior of the vanilla engine with multiplayer demos might be taken into consideration whether this patch makes sense. It's not a blocker (for example, we already have a working -timedemo where vanilla Heretic and Hexen are incapable), but if vanilla supports multiplayer demos, we ought to make sure we are fully compatible with it. If vanilla doesn't support it but the patch is this trivial, I think we can make a reasonable exception.

Extra command line parameter

In my opinion, these demos should ""just work"" without needing an extra -netdemo parameter.

Hexen support

Hexen probably requires a similar patch to this, would be nice to have it.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1023,2018-04-13T21:27:33Z,,2019-11-17T22:04:56Z,OPEN,False,11,1,1,https://github.com/mykola-ambar,Heretic multiplayer demo playback (Fix for #1022),3,[],https://github.com/chocolate-doom/chocolate-doom/pull/1023,https://github.com/mykola-ambar,3,https://github.com/chocolate-doom/chocolate-doom/pull/1023#issuecomment-381273560,"This PR adresses #1022, adding a command line switch that allows for demo playback in network mode.","IIRC The vanilla executable does not support multiplayer demos. I added a separate command line parameter to make sure the default behavior stays true to the expected vanilla behavior - but I can change it to be the default behavior if you want.
Hexen seems to have the same problem, I'll fix it there as well.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1023,2018-04-13T21:27:33Z,,2019-11-17T22:04:56Z,OPEN,False,11,1,1,https://github.com/mykola-ambar,Heretic multiplayer demo playback (Fix for #1022),3,[],https://github.com/chocolate-doom/chocolate-doom/pull/1023,https://github.com/mykola-ambar,4,https://github.com/chocolate-doom/chocolate-doom/pull/1023#issuecomment-381295956,"This PR adresses #1022, adding a command line switch that allows for demo playback in network mode.","I tested the vanilla v1.3 executable and it indeed does not support multiplayer demos (i wasn't 100% sure before). I've made the demos just work by default without needing the command line parameter.
I've also added some code to make the status bar correctly show the spectated player's stats, but I'm not sure if this change is ""vanilla"" enough for chocolate doom, what do you think?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1023,2018-04-13T21:27:33Z,,2019-11-17T22:04:56Z,OPEN,False,11,1,1,https://github.com/mykola-ambar,Heretic multiplayer demo playback (Fix for #1022),3,[],https://github.com/chocolate-doom/chocolate-doom/pull/1023,https://github.com/fragglet,5,https://github.com/chocolate-doom/chocolate-doom/pull/1023#issuecomment-381302503,"This PR adresses #1022, adding a command line switch that allows for demo playback in network mode.","It's a good question to be asking. I think there's genuine utility in being able to play back multiplayer demos, so it's worth adding. But it's also the case that vanilla Heretic can't play back multiplayer demos. We already have a framework for dealing with this kind of situation in the -strictdemos command line argument. So the correct way to do this is to gate the fix using the D_NonVanillaPlayback() function.
One other thing - please reduce the scope of this change to just fixing playback - it's not necessary to fix the status bar as well.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1023,2018-04-13T21:27:33Z,,2019-11-17T22:04:56Z,OPEN,False,11,1,1,https://github.com/mykola-ambar,Heretic multiplayer demo playback (Fix for #1022),3,[],https://github.com/chocolate-doom/chocolate-doom/pull/1023,https://github.com/Xindage,6,https://github.com/chocolate-doom/chocolate-doom/pull/1023#issuecomment-382214558,"This PR adresses #1022, adding a command line switch that allows for demo playback in network mode.","i id like to have the executable of this PR with the statusbar bar update if possible, so my friend can properly record our cooperative speedrun so people can see my hp and ammo too.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1023,2018-04-13T21:27:33Z,,2019-11-17T22:04:56Z,OPEN,False,11,1,1,https://github.com/mykola-ambar,Heretic multiplayer demo playback (Fix for #1022),3,[],https://github.com/chocolate-doom/chocolate-doom/pull/1023,https://github.com/jmtd,7,https://github.com/chocolate-doom/chocolate-doom/pull/1023#issuecomment-382336099,"This PR adresses #1022, adding a command line switch that allows for demo playback in network mode.",The status bar fix should be raised as a separate issue so it can be discussed there.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1024,2018-04-16T15:51:26Z,2018-04-16T22:14:40Z,2018-04-16T22:14:41Z,MERGED,True,0,28,1,https://github.com/jmtd,Remove the unreliable Software GL check,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1024,https://github.com/jmtd,1,https://github.com/chocolate-doom/chocolate-doom/pull/1024,"This check was designed to warn users if they did not have hardware
acceleration that performance might be poor and to suggest toggling
force_software_renderer. However the check is not reliable: it can't
determine whether hardware acceleration is taking place on Linux, as Mesa
front-ends both hardware and software implementations.
We explored alternatives (checking SDL_GL_ACCELERATED_VISUAL) but these
proved similarly unreliable.
On Linux, GLX offers glxIsDirect, but this is of no use where GLX is not
available, including (I think) Linux framebuffer or Wayland.
Rather than continue to mislead people, delete the test and warning.
Fixes #825.","This check was designed to warn users if they did not have hardware
acceleration that performance might be poor and to suggest toggling
force_software_renderer. However the check is not reliable: it can't
determine whether hardware acceleration is taking place on Linux, as Mesa
front-ends both hardware and software implementations.
We explored alternatives (checking SDL_GL_ACCELERATED_VISUAL) but these
proved similarly unreliable.
On Linux, GLX offers glxIsDirect, but this is of no use where GLX is not
available, including (I think) Linux framebuffer or Wayland.
Rather than continue to mislead people, delete the test and warning.
Fixes #825.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1026,2018-04-24T17:23:07Z,2018-04-28T19:13:17Z,2018-04-28T19:13:17Z,MERGED,True,76,108,11,https://github.com/turol,More const correctness,23,[],https://github.com/chocolate-doom/chocolate-doom/pull/1026,https://github.com/turol,1,https://github.com/chocolate-doom/chocolate-doom/pull/1026,"More const correctness work which is needed before changing DEH_String. This should take care of most things in doom and starts on heretic. The bad news is that the final change to fix DEH_String itself (not yet in this PR) will be one massive commit touching dozens of places because it has to change both the parameter and result value at the same time because there are places doing str = DEH_String(str) and those can't be change incrementally.
Also cleaned up some prototypes/dead code in menu code while I was in there.","More const correctness work which is needed before changing DEH_String. This should take care of most things in doom and starts on heretic. The bad news is that the final change to fix DEH_String itself (not yet in this PR) will be one massive commit touching dozens of places because it has to change both the parameter and result value at the same time because there are places doing str = DEH_String(str) and those can't be change incrementally.
Also cleaned up some prototypes/dead code in menu code while I was in there.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1033,2018-05-05T14:43:32Z,2018-05-12T03:33:09Z,2018-05-12T03:33:09Z,MERGED,True,29,29,10,https://github.com/turol,Const correctness,21,[],https://github.com/chocolate-doom/chocolate-doom/pull/1033,https://github.com/turol,1,https://github.com/chocolate-doom/chocolate-doom/pull/1033,Mostly in heretic.,Mostly in heretic.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1033,2018-05-05T14:43:32Z,2018-05-12T03:33:09Z,2018-05-12T03:33:09Z,MERGED,True,29,29,10,https://github.com/turol,Const correctness,21,[],https://github.com/chocolate-doom/chocolate-doom/pull/1033,https://github.com/turol,2,https://github.com/chocolate-doom/chocolate-doom/pull/1033#issuecomment-388337276,Mostly in heretic.,@fragglet ping,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1034,2018-05-05T18:01:47Z,2018-05-06T11:27:16Z,2018-05-06T11:29:37Z,MERGED,True,2,2,2,https://github.com/JNechaevsky,fix two compiler warnings on x64 build,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1034,https://github.com/JNechaevsky,1,https://github.com/chocolate-doom/chocolate-doom/pull/1034,"By the method and recommendation of @fabiangreffrath.
This fixes two compiler warnings on x64 build (gcc.exe (Rev2, Built by MSYS2 project) 7.3.0, x64):
Heretic:

p_saveg.c: In function 'SV_WritePtr':
p_saveg.c:126:16: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
     long val = (long) ptr;
                ^

Hexen:
sv_save.c: In function 'SV_WritePtr':
sv_save.c:3455:11: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
     ptr = (long) val;
           ^

For more details, see: JNechaevsky/russian-doom@7a20247","By the method and recommendation of @fabiangreffrath.
This fixes two compiler warnings on x64 build (gcc.exe (Rev2, Built by MSYS2 project) 7.3.0, x64):
Heretic:

p_saveg.c: In function 'SV_WritePtr':
p_saveg.c:126:16: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
     long val = (long) ptr;
                ^

Hexen:
sv_save.c: In function 'SV_WritePtr':
sv_save.c:3455:11: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
     ptr = (long) val;
           ^

For more details, see: JNechaevsky/russian-doom@7a20247",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1037,2018-05-13T13:02:44Z,2018-05-13T18:37:46Z,2018-05-13T19:38:04Z,MERGED,True,1,1,1,https://github.com/JNechaevsky,Don't read mouse movement events in inactive game window,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1037,https://github.com/JNechaevsky,1,https://github.com/chocolate-doom/chocolate-doom/pull/1037,"By the request of @fabiangreffrath.
This will prevent mouse looking / turning in inactive game window by moving mouse cursor above it. See JNechaevsky/russian-doom@7763003#commitcomment-28957384 for more details.","By the request of @fabiangreffrath.
This will prevent mouse looking / turning in inactive game window by moving mouse cursor above it. See JNechaevsky/russian-doom@7763003#commitcomment-28957384 for more details.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1037,2018-05-13T13:02:44Z,2018-05-13T18:37:46Z,2018-05-13T19:38:04Z,MERGED,True,1,1,1,https://github.com/JNechaevsky,Don't read mouse movement events in inactive game window,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1037,https://github.com/fabiangreffrath,2,https://github.com/chocolate-doom/chocolate-doom/pull/1037#issuecomment-388646953,"By the request of @fabiangreffrath.
This will prevent mouse looking / turning in inactive game window by moving mouse cursor above it. See JNechaevsky/russian-doom@7763003#commitcomment-28957384 for more details.","The condition is already exactly like this for I_HandleMouseEvent() in
https://github.com/chocolate-doom/chocolate-doom/blob/master/src/i_video.c#L436
so this fix should be quite obviously right.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1038,2018-05-15T17:28:55Z,2018-05-15T17:52:40Z,2018-05-15T17:52:40Z,MERGED,True,76,79,26,https://github.com/turol,Const correctness.,50,[],https://github.com/chocolate-doom/chocolate-doom/pull/1038,https://github.com/turol,1,https://github.com/chocolate-doom/chocolate-doom/pull/1038,"Mostly trivial. strife has only been compile-tested. Someone should actually try it before merging.
Interestingly hexen doesn't need fixes for this. It seems to be because hexeh doesn't have dehacked supported.","Mostly trivial. strife has only been compile-tested. Someone should actually try it before merging.
Interestingly hexen doesn't need fixes for this. It seems to be because hexeh doesn't have dehacked supported.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1041,2018-05-19T13:02:27Z,2018-05-26T02:34:54Z,2018-05-26T02:34:54Z,MERGED,True,29,29,17,https://github.com/turol,Fix const correctness in dehacked,14,[],https://github.com/chocolate-doom/chocolate-doom/pull/1041,https://github.com/turol,1,https://github.com/chocolate-doom/chocolate-doom/pull/1041,This should fix all dehacked -related places. I tested batman doom and it seems to work.,This should fix all dehacked -related places. I tested batman doom and it seems to work.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1043,2018-05-19T23:59:08Z,2018-05-20T00:52:59Z,2018-05-20T00:52:59Z,CLOSED,False,45,0,4,https://github.com/CamGenius,Chocolate Doom Installer for Windows,7,[],https://github.com/chocolate-doom/chocolate-doom/pull/1043,https://github.com/CamGenius,1,https://github.com/chocolate-doom/chocolate-doom/pull/1043,"I created and installer for Chocolate Doom on windows that is explained in the ""readme.md"" under the folder ""InstallerFiles"".","I created and installer for Chocolate Doom on windows that is explained in the ""readme.md"" under the folder ""InstallerFiles"".",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1043,2018-05-19T23:59:08Z,2018-05-20T00:52:59Z,2018-05-20T00:52:59Z,CLOSED,False,45,0,4,https://github.com/CamGenius,Chocolate Doom Installer for Windows,7,[],https://github.com/chocolate-doom/chocolate-doom/pull/1043,https://github.com/CamGenius,2,https://github.com/chocolate-doom/chocolate-doom/pull/1043#issuecomment-390441567,"I created and installer for Chocolate Doom on windows that is explained in the ""readme.md"" under the folder ""InstallerFiles"".",This installer is meant to be released under releases and not as a part of the source code.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1043,2018-05-19T23:59:08Z,2018-05-20T00:52:59Z,2018-05-20T00:52:59Z,CLOSED,False,45,0,4,https://github.com/CamGenius,Chocolate Doom Installer for Windows,7,[],https://github.com/chocolate-doom/chocolate-doom/pull/1043,https://github.com/fragglet,3,https://github.com/chocolate-doom/chocolate-doom/pull/1043#issuecomment-390446861,"I created and installer for Chocolate Doom on windows that is explained in the ""readme.md"" under the folder ""InstallerFiles"".",Thanks for the PR. This doesn't really work for us because the main content is just a single pregenerated .exe file. We can't accept contributions without source code because the project philosophy is that all content must be free software. From a more practical perspective it's not much use if the installer can't be changed or bugs fixed.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1044,2018-05-20T16:22:03Z,2018-05-20T18:31:25Z,2018-05-20T18:38:44Z,CLOSED,False,152,314796,701,https://github.com/CamGenius,Windows Installer,5,[],https://github.com/chocolate-doom/chocolate-doom/pull/1044,https://github.com/CamGenius,1,https://github.com/chocolate-doom/chocolate-doom/pull/1044,"Don't know if this is appropriate since the last issue of this was closed but I fixed the issues that closed the last pull request.
Just a simple installer to install chocolate doom on windows.
Added the .sed file which is the script that iexpress uses to make the exe file. (For fixing bugs.)
Only adds 2 files INSTALLER.BAT and UNINSTALL.BAT which are both put in the repository for viewing. (Open  Source/Free)
Added compiling instructions for anybody to compile. (Open Source/Free)
Readme points to another repository where I hosted the installer.","Don't know if this is appropriate since the last issue of this was closed but I fixed the issues that closed the last pull request.
Just a simple installer to install chocolate doom on windows.
Added the .sed file which is the script that iexpress uses to make the exe file. (For fixing bugs.)
Only adds 2 files INSTALLER.BAT and UNINSTALL.BAT which are both put in the repository for viewing. (Open  Source/Free)
Added compiling instructions for anybody to compile. (Open Source/Free)
Readme points to another repository where I hosted the installer.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1044,2018-05-20T16:22:03Z,2018-05-20T18:31:25Z,2018-05-20T18:38:44Z,CLOSED,False,152,314796,701,https://github.com/CamGenius,Windows Installer,5,[],https://github.com/chocolate-doom/chocolate-doom/pull/1044,https://github.com/fragglet,2,https://github.com/chocolate-doom/chocolate-doom/pull/1044#issuecomment-390501609,"Don't know if this is appropriate since the last issue of this was closed but I fixed the issues that closed the last pull request.
Just a simple installer to install chocolate doom on windows.
Added the .sed file which is the script that iexpress uses to make the exe file. (For fixing bugs.)
Only adds 2 files INSTALLER.BAT and UNINSTALL.BAT which are both put in the repository for viewing. (Open  Source/Free)
Added compiling instructions for anybody to compile. (Open Source/Free)
Readme points to another repository where I hosted the installer.","Sorry, I can't merge this because it removes all the Chocolate Doom source code.",True,"{'LAUGH': ['https://github.com/ketsuban', 'https://github.com/FozzeY']}"
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1044,2018-05-20T16:22:03Z,2018-05-20T18:31:25Z,2018-05-20T18:38:44Z,CLOSED,False,152,314796,701,https://github.com/CamGenius,Windows Installer,5,[],https://github.com/chocolate-doom/chocolate-doom/pull/1044,https://github.com/fragglet,3,https://github.com/chocolate-doom/chocolate-doom/pull/1044#issuecomment-390501973,"Don't know if this is appropriate since the last issue of this was closed but I fixed the issues that closed the last pull request.
Just a simple installer to install chocolate doom on windows.
Added the .sed file which is the script that iexpress uses to make the exe file. (For fixing bugs.)
Only adds 2 files INSTALLER.BAT and UNINSTALL.BAT which are both put in the repository for viewing. (Open  Source/Free)
Added compiling instructions for anybody to compile. (Open Source/Free)
Readme points to another repository where I hosted the installer.","Additional comments based on the source code you've supplied: a lot of the stuff in these files is hard-coded and going to be an additional burden to maintain. This doesn't really fit with the build system and release scripts we already have in place.
Thank you for going to the effort of trying to submit this but I think I'm going to make the decision that for now we'll stick with the current .zip file releases. You're of course welcome to release your own installer - I'd encourage you to share it on the Doomworld forums and see if people like it. If there's a lot of strong opinion in favour I'm open to reconsidering.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1044,2018-05-20T16:22:03Z,2018-05-20T18:31:25Z,2018-05-20T18:38:44Z,CLOSED,False,152,314796,701,https://github.com/CamGenius,Windows Installer,5,[],https://github.com/chocolate-doom/chocolate-doom/pull/1044,https://github.com/chungy,4,https://github.com/chocolate-doom/chocolate-doom/pull/1044#issuecomment-390502087,"Don't know if this is appropriate since the last issue of this was closed but I fixed the issues that closed the last pull request.
Just a simple installer to install chocolate doom on windows.
Added the .sed file which is the script that iexpress uses to make the exe file. (For fixing bugs.)
Only adds 2 files INSTALLER.BAT and UNINSTALL.BAT which are both put in the repository for viewing. (Open  Source/Free)
Added compiling instructions for anybody to compile. (Open Source/Free)
Readme points to another repository where I hosted the installer.","I think another problem is that this isn't very scriptable, the instructions requiring a user to go through GUI dialog boxes on a running Windows system.
Chocolate Doom is often built from non-Windows OSes, even for the Windows build, and not having it able to build the installer from such a system would be a major disadvantage. Even not being able to build the installer from just running make... and there are possible licensing concerns with releasing an *.exe file that contains Microsoft code.
Open source installation systems like NSIS exist that support cross-building from other OSes, and might be a better consideration than iexpress.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1047,2018-05-23T19:50:00Z,2018-05-28T01:57:44Z,2018-05-28T16:19:10Z,CLOSED,False,24,0,4,https://github.com/JNechaevsky,Properly resume music playing in G_DoLoadLevel,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1047,https://github.com/JNechaevsky,1,https://github.com/chocolate-doom/chocolate-doom/pull/1047,"By the request of @fabiangreffrath.
This will fix a pretty serious bug of Chocolate Doom on Windows, that we have investigated with Fabian (see https://github.com/JNechaevsky/russian-doom/issues/69). If there is no chocolate-midiproc.exe executable present, it is possible to lock up music playing by pausing intermission screen. This is happening only with OPL synth.
In case of using Native MIDI as musical playback on WIndows 7 (still without midiproc executable), the situation will be even worse: music may lock up completely. Sorry, I can't properly reproduce it now, since I have switched back to Windows 10 LTSB.
About the code: it's just copied over from G_InitNew func of every game, style (tabs/spaces/placement) is preserved. It seems to a safer approach.
Games are affected for sure are Doom and Heretic. Hexen and Strife does not have intermission screen, but maybe it's still worth to apply with fix, just for sure.
Video demonstration:

Chocolate Doom: https://youtu.be/jzLXqN52zQQ
Vanilla Doom: https://youtu.be/rvTVrk8ZaDo

Please also note: there are also few different ways/bugs to lock up music in Heretic and Hexen, but it's a vanilla behavior and not suggested to be fixed.","By the request of @fabiangreffrath.
This will fix a pretty serious bug of Chocolate Doom on Windows, that we have investigated with Fabian (see https://github.com/JNechaevsky/russian-doom/issues/69). If there is no chocolate-midiproc.exe executable present, it is possible to lock up music playing by pausing intermission screen. This is happening only with OPL synth.
In case of using Native MIDI as musical playback on WIndows 7 (still without midiproc executable), the situation will be even worse: music may lock up completely. Sorry, I can't properly reproduce it now, since I have switched back to Windows 10 LTSB.
About the code: it's just copied over from G_InitNew func of every game, style (tabs/spaces/placement) is preserved. It seems to a safer approach.
Games are affected for sure are Doom and Heretic. Hexen and Strife does not have intermission screen, but maybe it's still worth to apply with fix, just for sure.
Video demonstration:

Chocolate Doom: https://youtu.be/jzLXqN52zQQ
Vanilla Doom: https://youtu.be/rvTVrk8ZaDo

Please also note: there are also few different ways/bugs to lock up music in Heretic and Hexen, but it's a vanilla behavior and not suggested to be fixed.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1047,2018-05-23T19:50:00Z,2018-05-28T01:57:44Z,2018-05-28T16:19:10Z,CLOSED,False,24,0,4,https://github.com/JNechaevsky,Properly resume music playing in G_DoLoadLevel,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1047,https://github.com/fabiangreffrath,2,https://github.com/chocolate-doom/chocolate-doom/pull/1047#issuecomment-391478060,"By the request of @fabiangreffrath.
This will fix a pretty serious bug of Chocolate Doom on Windows, that we have investigated with Fabian (see https://github.com/JNechaevsky/russian-doom/issues/69). If there is no chocolate-midiproc.exe executable present, it is possible to lock up music playing by pausing intermission screen. This is happening only with OPL synth.
In case of using Native MIDI as musical playback on WIndows 7 (still without midiproc executable), the situation will be even worse: music may lock up completely. Sorry, I can't properly reproduce it now, since I have switched back to Windows 10 LTSB.
About the code: it's just copied over from G_InitNew func of every game, style (tabs/spaces/placement) is preserved. It seems to a safer approach.
Games are affected for sure are Doom and Heretic. Hexen and Strife does not have intermission screen, but maybe it's still worth to apply with fix, just for sure.
Video demonstration:

Chocolate Doom: https://youtu.be/jzLXqN52zQQ
Vanilla Doom: https://youtu.be/rvTVrk8ZaDo

Please also note: there are also few different ways/bugs to lock up music in Heretic and Hexen, but it's a vanilla behavior and not suggested to be fixed.","Thanks @JNechaevsky !
Long story short: The game is unconditionally un-paused in G_DoLoadLevel(), but the music isn't taken into account. That is, if you have paused the game during the intermission screen and entered the next map (yes, this is possible), the music will hang up.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1047,2018-05-23T19:50:00Z,2018-05-28T01:57:44Z,2018-05-28T16:19:10Z,CLOSED,False,24,0,4,https://github.com/JNechaevsky,Properly resume music playing in G_DoLoadLevel,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1047,https://github.com/fragglet,3,https://github.com/chocolate-doom/chocolate-doom/pull/1047#issuecomment-391517410,"By the request of @fabiangreffrath.
This will fix a pretty serious bug of Chocolate Doom on Windows, that we have investigated with Fabian (see https://github.com/JNechaevsky/russian-doom/issues/69). If there is no chocolate-midiproc.exe executable present, it is possible to lock up music playing by pausing intermission screen. This is happening only with OPL synth.
In case of using Native MIDI as musical playback on WIndows 7 (still without midiproc executable), the situation will be even worse: music may lock up completely. Sorry, I can't properly reproduce it now, since I have switched back to Windows 10 LTSB.
About the code: it's just copied over from G_InitNew func of every game, style (tabs/spaces/placement) is preserved. It seems to a safer approach.
Games are affected for sure are Doom and Heretic. Hexen and Strife does not have intermission screen, but maybe it's still worth to apply with fix, just for sure.
Video demonstration:

Chocolate Doom: https://youtu.be/jzLXqN52zQQ
Vanilla Doom: https://youtu.be/rvTVrk8ZaDo

Please also note: there are also few different ways/bugs to lock up music in Heretic and Hexen, but it's a vanilla behavior and not suggested to be fixed.","/cc @AlexMax since this seems midiproc related

If there is no chocolate-midiproc.exe executable present, it is possible to lock up music playing by pausing intermission screen. This is happening only with OPL synth.

I'm a bit confused here: the midiproc/midipipe mechanism is only used when using SDL_mixer music playback, so it's skipped when doing OPL playback. Are you sure that midiproc is related?
Reading through the bug and discussion my initial reaction is that the fix seems like it's at the wrong level of the system. That is: if the code works in other setups (non-OPL playback), why is that? This certainly fixes the intermission screen bug, but there may be other situations where you can pause the game and the music won't restart.
As you mention OPL playback I took a look at the code in i_oplmusic.c to remind myself what happens when OPL music is paused and resumed. You can see that OPL_SetPaused() is called in the PauseSong / ResumeSong functions to stop playback. If the resume function isn't called then the paused state hangs around when a new song is started. So it may be a more robust fix is just to call OPL_SetPaused(0) inside I_OPL_PlaySong().",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1047,2018-05-23T19:50:00Z,2018-05-28T01:57:44Z,2018-05-28T16:19:10Z,CLOSED,False,24,0,4,https://github.com/JNechaevsky,Properly resume music playing in G_DoLoadLevel,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1047,https://github.com/fabiangreffrath,4,https://github.com/chocolate-doom/chocolate-doom/pull/1047#issuecomment-391603408,"By the request of @fabiangreffrath.
This will fix a pretty serious bug of Chocolate Doom on Windows, that we have investigated with Fabian (see https://github.com/JNechaevsky/russian-doom/issues/69). If there is no chocolate-midiproc.exe executable present, it is possible to lock up music playing by pausing intermission screen. This is happening only with OPL synth.
In case of using Native MIDI as musical playback on WIndows 7 (still without midiproc executable), the situation will be even worse: music may lock up completely. Sorry, I can't properly reproduce it now, since I have switched back to Windows 10 LTSB.
About the code: it's just copied over from G_InitNew func of every game, style (tabs/spaces/placement) is preserved. It seems to a safer approach.
Games are affected for sure are Doom and Heretic. Hexen and Strife does not have intermission screen, but maybe it's still worth to apply with fix, just for sure.
Video demonstration:

Chocolate Doom: https://youtu.be/jzLXqN52zQQ
Vanilla Doom: https://youtu.be/rvTVrk8ZaDo

Please also note: there are also few different ways/bugs to lock up music in Heretic and Hexen, but it's a vanilla behavior and not suggested to be fixed.","Both @JNechaevsky and I have changed the sound code in our respective ports so that music is actually paused if its volume is set to zero. Otherwise it would be very low, but still audible with OPL emulation (@nukeykt confirmed to me that this is not a bug, but an actual restriction in how the OPL works). I am afraid that this fix would be undermined by the solution you suggest, i.e. by unconditionally un-pausing the OPL once the next song is played.
Also, why not fix the bug where it happens? I mean, the game state is unconditionally un-paused in G_DoLoadLevel(), but the music state is ignored. The code to handle in-game un-pausing already calls S_ResumeSound() (https://github.com/chocolate-doom/chocolate-doom/blob/master/src/doom/g_game.c#L973) and so does G_InitNew() for apparently the same reason (https://github.com/chocolate-doom/chocolate-doom/blob/master/src/doom/g_game.c#L1748).",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1047,2018-05-23T19:50:00Z,2018-05-28T01:57:44Z,2018-05-28T16:19:10Z,CLOSED,False,24,0,4,https://github.com/JNechaevsky,Properly resume music playing in G_DoLoadLevel,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1047,https://github.com/JNechaevsky,5,https://github.com/chocolate-doom/chocolate-doom/pull/1047#issuecomment-391623850,"By the request of @fabiangreffrath.
This will fix a pretty serious bug of Chocolate Doom on Windows, that we have investigated with Fabian (see https://github.com/JNechaevsky/russian-doom/issues/69). If there is no chocolate-midiproc.exe executable present, it is possible to lock up music playing by pausing intermission screen. This is happening only with OPL synth.
In case of using Native MIDI as musical playback on WIndows 7 (still without midiproc executable), the situation will be even worse: music may lock up completely. Sorry, I can't properly reproduce it now, since I have switched back to Windows 10 LTSB.
About the code: it's just copied over from G_InitNew func of every game, style (tabs/spaces/placement) is preserved. It seems to a safer approach.
Games are affected for sure are Doom and Heretic. Hexen and Strife does not have intermission screen, but maybe it's still worth to apply with fix, just for sure.
Video demonstration:

Chocolate Doom: https://youtu.be/jzLXqN52zQQ
Vanilla Doom: https://youtu.be/rvTVrk8ZaDo

Please also note: there are also few different ways/bugs to lock up music in Heretic and Hexen, but it's a vanilla behavior and not suggested to be fixed.","Uhh, it's complicated for me. I honestly have no idea why it is happening without midiproc, and why it's not with midiproc. I'm not using midiproc in my fork, and that's was a starting point for investigation.
The only thing I should do for sure - is to double-check it on Windows 7 with Native MIDI. Not sure I can provide a proper explanations for this, but perhaps video recordings will say and show it better.
So far I will need to do few more consolidated records, for both Windows 7 and Windows 10:

OPL synth, no midiproc
OPL synth, with midiproc
MIDI synth, no midiproc
MIDI synth, with midiproc",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1047,2018-05-23T19:50:00Z,2018-05-28T01:57:44Z,2018-05-28T16:19:10Z,CLOSED,False,24,0,4,https://github.com/JNechaevsky,Properly resume music playing in G_DoLoadLevel,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1047,https://github.com/fragglet,6,https://github.com/chocolate-doom/chocolate-doom/pull/1047#issuecomment-391732216,"By the request of @fabiangreffrath.
This will fix a pretty serious bug of Chocolate Doom on Windows, that we have investigated with Fabian (see https://github.com/JNechaevsky/russian-doom/issues/69). If there is no chocolate-midiproc.exe executable present, it is possible to lock up music playing by pausing intermission screen. This is happening only with OPL synth.
In case of using Native MIDI as musical playback on WIndows 7 (still without midiproc executable), the situation will be even worse: music may lock up completely. Sorry, I can't properly reproduce it now, since I have switched back to Windows 10 LTSB.
About the code: it's just copied over from G_InitNew func of every game, style (tabs/spaces/placement) is preserved. It seems to a safer approach.
Games are affected for sure are Doom and Heretic. Hexen and Strife does not have intermission screen, but maybe it's still worth to apply with fix, just for sure.
Video demonstration:

Chocolate Doom: https://youtu.be/jzLXqN52zQQ
Vanilla Doom: https://youtu.be/rvTVrk8ZaDo

Please also note: there are also few different ways/bugs to lock up music in Heretic and Hexen, but it's a vanilla behavior and not suggested to be fixed.","Also, why not fix the bug where it happens? I mean, the game state is unconditionally un-paused in G_DoLoadLevel(), but the music state is ignored.

Well, that's my point - I'm concerned that this fix doesn't actually fix the root cause here. Specifically I'm concerned that it may fix this one bug but there may be other variants of the same bug which aren't fixed. For example: suppose that you pause on an intermission screen before a text/story screen appears (after MAP06 for example). Does the music on the text screen appear? My guess is not.
You can try to work out and fix all these individual variants but it's probably easier to just fix the sound library. Certainly it seems like sensible semantics that a call to PlaySong should turn off pause. If vanilla doesn't have this bug then I suspect it's how DMX works too.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1047,2018-05-23T19:50:00Z,2018-05-28T01:57:44Z,2018-05-28T16:19:10Z,CLOSED,False,24,0,4,https://github.com/JNechaevsky,Properly resume music playing in G_DoLoadLevel,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1047,https://github.com/fragglet,7,https://github.com/chocolate-doom/chocolate-doom/pull/1047#issuecomment-392399266,"By the request of @fabiangreffrath.
This will fix a pretty serious bug of Chocolate Doom on Windows, that we have investigated with Fabian (see https://github.com/JNechaevsky/russian-doom/issues/69). If there is no chocolate-midiproc.exe executable present, it is possible to lock up music playing by pausing intermission screen. This is happening only with OPL synth.
In case of using Native MIDI as musical playback on WIndows 7 (still without midiproc executable), the situation will be even worse: music may lock up completely. Sorry, I can't properly reproduce it now, since I have switched back to Windows 10 LTSB.
About the code: it's just copied over from G_InitNew func of every game, style (tabs/spaces/placement) is preserved. It seems to a safer approach.
Games are affected for sure are Doom and Heretic. Hexen and Strife does not have intermission screen, but maybe it's still worth to apply with fix, just for sure.
Video demonstration:

Chocolate Doom: https://youtu.be/jzLXqN52zQQ
Vanilla Doom: https://youtu.be/rvTVrk8ZaDo

Please also note: there are also few different ways/bugs to lock up music in Heretic and Hexen, but it's a vanilla behavior and not suggested to be fixed.","Dug into this a bit myself and understood the issue more deeply. 214432e is my fix. I've confirmed that the bug is present on macOS too, so I don't think this is related to Windows or midiproc.
The sound code in s_sound.c actually already has specific code for handling the ""remember to resume music"" case, calling I_ResumeSong() inside S_StopMusic(). However, S_Start() (called on level start) resets mus_paused to false, so this doesn't work. I interpret this as meaning that the DMX call to start a new song implicitly unpauses music playback (actually, it looks like pausing is per-song, and since a new song is being played, the old paused state is lost). Therefore, I think this is the correct level of the code to be fixing the bug, rather than in the game code.
The one remaining issue is your pause-at-volume-0 optimization which I'm sure you want to keep working. It looks like you've implemented this at the s_sound.c level; I'd suggest that this also more naturally belongs in the lower-level sound libraries (works across all games; should be easier to express in terms of the API that's presented). Simply add some hooks to I_SetMusicVolume(), I_ResumeSong() and I_PlaySong() to track whether music is currently at zero volume and pause playback when it is.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1047,2018-05-23T19:50:00Z,2018-05-28T01:57:44Z,2018-05-28T16:19:10Z,CLOSED,False,24,0,4,https://github.com/JNechaevsky,Properly resume music playing in G_DoLoadLevel,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1047,https://github.com/JNechaevsky,8,https://github.com/chocolate-doom/chocolate-doom/pull/1047#issuecomment-392564605,"By the request of @fabiangreffrath.
This will fix a pretty serious bug of Chocolate Doom on Windows, that we have investigated with Fabian (see https://github.com/JNechaevsky/russian-doom/issues/69). If there is no chocolate-midiproc.exe executable present, it is possible to lock up music playing by pausing intermission screen. This is happening only with OPL synth.
In case of using Native MIDI as musical playback on WIndows 7 (still without midiproc executable), the situation will be even worse: music may lock up completely. Sorry, I can't properly reproduce it now, since I have switched back to Windows 10 LTSB.
About the code: it's just copied over from G_InitNew func of every game, style (tabs/spaces/placement) is preserved. It seems to a safer approach.
Games are affected for sure are Doom and Heretic. Hexen and Strife does not have intermission screen, but maybe it's still worth to apply with fix, just for sure.
Video demonstration:

Chocolate Doom: https://youtu.be/jzLXqN52zQQ
Vanilla Doom: https://youtu.be/rvTVrk8ZaDo

Please also note: there are also few different ways/bugs to lock up music in Heretic and Hexen, but it's a vanilla behavior and not suggested to be fixed.","Here's my tests after correct OPL fix. I've made a few steps, and results are:

OPL synth with midiproc. Absolutely OK.
OPL synth w/o midiproc. Absolutely OK.
MIDI synth with midiproc. Music freezes, sound not.
MIDI synth w/o midiproc. Music freezes, sound freezes (i.e. program's volume is set to 0 by OS).

Video: https://youtu.be/HZ19dD72-dM
@fragglet, could you please also investigate situation with MIDI then?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1050,2018-05-26T13:40:06Z,2018-06-01T22:49:40Z,2018-07-02T07:49:32Z,MERGED,True,47,47,10,https://github.com/turol,Const correctness,31,[],https://github.com/chocolate-doom/chocolate-doom/pull/1050,https://github.com/turol,1,https://github.com/chocolate-doom/chocolate-doom/pull/1050,"In d_iwad, config and some miscellaneous places.","In d_iwad, config and some miscellaneous places.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1050,2018-05-26T13:40:06Z,2018-06-01T22:49:40Z,2018-07-02T07:49:32Z,MERGED,True,47,47,10,https://github.com/turol,Const correctness,31,[],https://github.com/chocolate-doom/chocolate-doom/pull/1050,https://github.com/turol,2,https://github.com/chocolate-doom/chocolate-doom/pull/1050#issuecomment-393792506,"In d_iwad, config and some miscellaneous places.",@fragglet ping,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1050,2018-05-26T13:40:06Z,2018-06-01T22:49:40Z,2018-07-02T07:49:32Z,MERGED,True,47,47,10,https://github.com/turol,Const correctness,31,[],https://github.com/chocolate-doom/chocolate-doom/pull/1050,https://github.com/fabiangreffrath,3,https://github.com/chocolate-doom/chocolate-doom/pull/1050#issuecomment-401687498,"In d_iwad, config and some miscellaneous places.",@turol There are still some const-related warnings left if you configure Choco to build with -Wcast-qual. Maybe you would like to tackle these as well?,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1050,2018-05-26T13:40:06Z,2018-06-01T22:49:40Z,2018-07-02T07:49:32Z,MERGED,True,47,47,10,https://github.com/turol,Const correctness,31,[],https://github.com/chocolate-doom/chocolate-doom/pull/1050,https://github.com/turol,4,https://github.com/chocolate-doom/chocolate-doom/pull/1050#issuecomment-401700887,"In d_iwad, config and some miscellaneous places.","@fabiangreffrath
I'm currently short on time so I've been unable to work on followups to this. -Wwrite-strings is unfinished and I have not tried -Wcast-qual. I've picked most of the easy bits so only the hard stuff remains. If someone else wants to take a shot at it feel free. Otherwise I'll get back to it at some point.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1053,2018-05-30T20:14:45Z,2018-05-30T20:18:12Z,2018-05-31T16:23:49Z,MERGED,True,1,1,1,https://github.com/JNechaevsky,Update copyright year to 2018,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1053,https://github.com/JNechaevsky,1,https://github.com/chocolate-doom/chocolate-doom/pull/1053,,,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1054,2018-06-01T22:40:52Z,2018-06-05T00:54:04Z,2018-06-05T22:24:47Z,MERGED,True,1422,0,22,https://github.com/AlexMax,CMake Build FIles - Visual Studio project replacement,24,[],https://github.com/chocolate-doom/chocolate-doom/pull/1054,https://github.com/AlexMax,1,https://github.com/chocolate-doom/chocolate-doom/pull/1054,"Here are CMake build files
These build files have been designed for creating Visual Studio projects.  They also work well enough to support compiling under Linux as well.  I have not tested these with any flavor of MinGW or on macOS.
The currently supported targets are:

Chocolate Foo and all dependent libraries
Setup
midiproc
Standalone midiread
Standalone mus2mid

Other targets have not been implemented, such as manpage building.
SDL2, SDL2_mixer and SDL2_net are all required libraries.  libpng and libsamplerate are also optionally supported, and will be linked against if you point to them.
Instructions on how to use these build files are quite simple, and anybody who has ever used CMake before should feel right at home.  For novices, I recommend using CMake GUI.  In-tree builds are not supported, it is suggested that the user create a build folder in the checkout (which is also now a part of the .gitignore) and point CMake at that directory to create the project files or Makefiles or whatever.
The included SDL2 library finders also include specific cache variables called SDL2_DIR and similar.  If you download the Visual C++ ""Development Library"" from the SDL website, and unzip it into a specific folder, you can simply point the SDL2_DIR and friends at that folder, and CMake will find the proper include and library folders automatically.  On Linux, CMake will check pkg-config for hints on where to find the appropriate directories.
No external documentation is provided in this pull request.  Please tell me how you would prefer this build system be documented.
I have also gone out of my way to make the CMakeLists.txt files be laid out similarly to the autotools files - at least superficially - to aid with updating these build files at the same time as the autotools build.","Here are CMake build files
These build files have been designed for creating Visual Studio projects.  They also work well enough to support compiling under Linux as well.  I have not tested these with any flavor of MinGW or on macOS.
The currently supported targets are:

Chocolate Foo and all dependent libraries
Setup
midiproc
Standalone midiread
Standalone mus2mid

Other targets have not been implemented, such as manpage building.
SDL2, SDL2_mixer and SDL2_net are all required libraries.  libpng and libsamplerate are also optionally supported, and will be linked against if you point to them.
Instructions on how to use these build files are quite simple, and anybody who has ever used CMake before should feel right at home.  For novices, I recommend using CMake GUI.  In-tree builds are not supported, it is suggested that the user create a build folder in the checkout (which is also now a part of the .gitignore) and point CMake at that directory to create the project files or Makefiles or whatever.
The included SDL2 library finders also include specific cache variables called SDL2_DIR and similar.  If you download the Visual C++ ""Development Library"" from the SDL website, and unzip it into a specific folder, you can simply point the SDL2_DIR and friends at that folder, and CMake will find the proper include and library folders automatically.  On Linux, CMake will check pkg-config for hints on where to find the appropriate directories.
No external documentation is provided in this pull request.  Please tell me how you would prefer this build system be documented.
I have also gone out of my way to make the CMakeLists.txt files be laid out similarly to the autotools files - at least superficially - to aid with updating these build files at the same time as the autotools build.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1054,2018-06-01T22:40:52Z,2018-06-05T00:54:04Z,2018-06-05T22:24:47Z,MERGED,True,1422,0,22,https://github.com/AlexMax,CMake Build FIles - Visual Studio project replacement,24,[],https://github.com/chocolate-doom/chocolate-doom/pull/1054,https://github.com/turol,2,https://github.com/chocolate-doom/chocolate-doom/pull/1054#issuecomment-394071102,"Here are CMake build files
These build files have been designed for creating Visual Studio projects.  They also work well enough to support compiling under Linux as well.  I have not tested these with any flavor of MinGW or on macOS.
The currently supported targets are:

Chocolate Foo and all dependent libraries
Setup
midiproc
Standalone midiread
Standalone mus2mid

Other targets have not been implemented, such as manpage building.
SDL2, SDL2_mixer and SDL2_net are all required libraries.  libpng and libsamplerate are also optionally supported, and will be linked against if you point to them.
Instructions on how to use these build files are quite simple, and anybody who has ever used CMake before should feel right at home.  For novices, I recommend using CMake GUI.  In-tree builds are not supported, it is suggested that the user create a build folder in the checkout (which is also now a part of the .gitignore) and point CMake at that directory to create the project files or Makefiles or whatever.
The included SDL2 library finders also include specific cache variables called SDL2_DIR and similar.  If you download the Visual C++ ""Development Library"" from the SDL website, and unzip it into a specific folder, you can simply point the SDL2_DIR and friends at that folder, and CMake will find the proper include and library folders automatically.  On Linux, CMake will check pkg-config for hints on where to find the appropriate directories.
No external documentation is provided in this pull request.  Please tell me how you would prefer this build system be documented.
I have also gone out of my way to make the CMakeLists.txt files be laid out similarly to the autotools files - at least superficially - to aid with updating these build files at the same time as the autotools build.","Is there an easy way to treat warnings as errors like autoconf build --enable-werror? It should work on both GCC/clang and MSVC.
We should add a Travis Linux build with CMake so no-one accidentally breaks it.
And we should app Appveyour MSVC build at some point for the same reason.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1054,2018-06-01T22:40:52Z,2018-06-05T00:54:04Z,2018-06-05T22:24:47Z,MERGED,True,1422,0,22,https://github.com/AlexMax,CMake Build FIles - Visual Studio project replacement,24,[],https://github.com/chocolate-doom/chocolate-doom/pull/1054,https://github.com/chungy,3,https://github.com/chocolate-doom/chocolate-doom/pull/1054#issuecomment-394076069,"Here are CMake build files
These build files have been designed for creating Visual Studio projects.  They also work well enough to support compiling under Linux as well.  I have not tested these with any flavor of MinGW or on macOS.
The currently supported targets are:

Chocolate Foo and all dependent libraries
Setup
midiproc
Standalone midiread
Standalone mus2mid

Other targets have not been implemented, such as manpage building.
SDL2, SDL2_mixer and SDL2_net are all required libraries.  libpng and libsamplerate are also optionally supported, and will be linked against if you point to them.
Instructions on how to use these build files are quite simple, and anybody who has ever used CMake before should feel right at home.  For novices, I recommend using CMake GUI.  In-tree builds are not supported, it is suggested that the user create a build folder in the checkout (which is also now a part of the .gitignore) and point CMake at that directory to create the project files or Makefiles or whatever.
The included SDL2 library finders also include specific cache variables called SDL2_DIR and similar.  If you download the Visual C++ ""Development Library"" from the SDL website, and unzip it into a specific folder, you can simply point the SDL2_DIR and friends at that folder, and CMake will find the proper include and library folders automatically.  On Linux, CMake will check pkg-config for hints on where to find the appropriate directories.
No external documentation is provided in this pull request.  Please tell me how you would prefer this build system be documented.
I have also gone out of my way to make the CMakeLists.txt files be laid out similarly to the autotools files - at least superficially - to aid with updating these build files at the same time as the autotools build.",I'm not a fan of the new win32 top-level directory. These files seem to only be around to support MSVC with Strife; is it reasonable to just place them into src/strife?,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1054,2018-06-01T22:40:52Z,2018-06-05T00:54:04Z,2018-06-05T22:24:47Z,MERGED,True,1422,0,22,https://github.com/AlexMax,CMake Build FIles - Visual Studio project replacement,24,[],https://github.com/chocolate-doom/chocolate-doom/pull/1054,https://github.com/AlexMax,4,https://github.com/chocolate-doom/chocolate-doom/pull/1054#issuecomment-394120549,"Here are CMake build files
These build files have been designed for creating Visual Studio projects.  They also work well enough to support compiling under Linux as well.  I have not tested these with any flavor of MinGW or on macOS.
The currently supported targets are:

Chocolate Foo and all dependent libraries
Setup
midiproc
Standalone midiread
Standalone mus2mid

Other targets have not been implemented, such as manpage building.
SDL2, SDL2_mixer and SDL2_net are all required libraries.  libpng and libsamplerate are also optionally supported, and will be linked against if you point to them.
Instructions on how to use these build files are quite simple, and anybody who has ever used CMake before should feel right at home.  For novices, I recommend using CMake GUI.  In-tree builds are not supported, it is suggested that the user create a build folder in the checkout (which is also now a part of the .gitignore) and point CMake at that directory to create the project files or Makefiles or whatever.
The included SDL2 library finders also include specific cache variables called SDL2_DIR and similar.  If you download the Visual C++ ""Development Library"" from the SDL website, and unzip it into a specific folder, you can simply point the SDL2_DIR and friends at that folder, and CMake will find the proper include and library folders automatically.  On Linux, CMake will check pkg-config for hints on where to find the appropriate directories.
No external documentation is provided in this pull request.  Please tell me how you would prefer this build system be documented.
I have also gone out of my way to make the CMakeLists.txt files be laid out similarly to the autotools files - at least superficially - to aid with updating these build files at the same time as the autotools build.","@turol : You can add arbitrary compiler flags to all targets using the following invocation:
$ cmake <build_dir> -DCMAKE_C_FLAGS='-Werror'

It's also worth mentioning that you also get a choice of build types as well, at least in generators that use Makefiles or ninja files:
$ cmake <build_dir> -DCMAKE_BUILD_TYPE=Debug

That variable can be Debug, Release, RelWithDebInfo, or MinSizeRel, which adds -g, -O3 -DNDEBUG, -O2 -g -DNDEBUG, and -Os -DNDEBUG C compile flags respectively.  You can combine the two and CMake will correctly merge them.
You can use ccmake and cmake-gui to explore all possible cache values that can be set with -D.  All CMAKE_* cache variables are documented here, also available with man cmake-variables.  CMake documentation has poor tutorials and best practices, but are an excellent reference.
@chungy : I think @fragglet and I discussed where to put that file and we settled on win32.  I don't really care where it goes, though I kind of like the idea of keeping platform-specific files fenced off from the rest in some fashion, not just mixing them in.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1054,2018-06-01T22:40:52Z,2018-06-05T00:54:04Z,2018-06-05T22:24:47Z,MERGED,True,1422,0,22,https://github.com/AlexMax,CMake Build FIles - Visual Studio project replacement,24,[],https://github.com/chocolate-doom/chocolate-doom/pull/1054,https://github.com/turol,5,https://github.com/chocolate-doom/chocolate-doom/pull/1054#issuecomment-394145141,"Here are CMake build files
These build files have been designed for creating Visual Studio projects.  They also work well enough to support compiling under Linux as well.  I have not tested these with any flavor of MinGW or on macOS.
The currently supported targets are:

Chocolate Foo and all dependent libraries
Setup
midiproc
Standalone midiread
Standalone mus2mid

Other targets have not been implemented, such as manpage building.
SDL2, SDL2_mixer and SDL2_net are all required libraries.  libpng and libsamplerate are also optionally supported, and will be linked against if you point to them.
Instructions on how to use these build files are quite simple, and anybody who has ever used CMake before should feel right at home.  For novices, I recommend using CMake GUI.  In-tree builds are not supported, it is suggested that the user create a build folder in the checkout (which is also now a part of the .gitignore) and point CMake at that directory to create the project files or Makefiles or whatever.
The included SDL2 library finders also include specific cache variables called SDL2_DIR and similar.  If you download the Visual C++ ""Development Library"" from the SDL website, and unzip it into a specific folder, you can simply point the SDL2_DIR and friends at that folder, and CMake will find the proper include and library folders automatically.  On Linux, CMake will check pkg-config for hints on where to find the appropriate directories.
No external documentation is provided in this pull request.  Please tell me how you would prefer this build system be documented.
I have also gone out of my way to make the CMakeLists.txt files be laid out similarly to the autotools files - at least superficially - to aid with updating these build files at the same time as the autotools build.","@AlexMax: Have you tried that adding -Werror actually works? Trying that on autoconf will result in failure to detect -lm and a broken build, hence --enable-werror flag.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1054,2018-06-01T22:40:52Z,2018-06-05T00:54:04Z,2018-06-05T22:24:47Z,MERGED,True,1422,0,22,https://github.com/AlexMax,CMake Build FIles - Visual Studio project replacement,24,[],https://github.com/chocolate-doom/chocolate-doom/pull/1054,https://github.com/AlexMax,6,https://github.com/chocolate-doom/chocolate-doom/pull/1054#issuecomment-394167896,"Here are CMake build files
These build files have been designed for creating Visual Studio projects.  They also work well enough to support compiling under Linux as well.  I have not tested these with any flavor of MinGW or on macOS.
The currently supported targets are:

Chocolate Foo and all dependent libraries
Setup
midiproc
Standalone midiread
Standalone mus2mid

Other targets have not been implemented, such as manpage building.
SDL2, SDL2_mixer and SDL2_net are all required libraries.  libpng and libsamplerate are also optionally supported, and will be linked against if you point to them.
Instructions on how to use these build files are quite simple, and anybody who has ever used CMake before should feel right at home.  For novices, I recommend using CMake GUI.  In-tree builds are not supported, it is suggested that the user create a build folder in the checkout (which is also now a part of the .gitignore) and point CMake at that directory to create the project files or Makefiles or whatever.
The included SDL2 library finders also include specific cache variables called SDL2_DIR and similar.  If you download the Visual C++ ""Development Library"" from the SDL website, and unzip it into a specific folder, you can simply point the SDL2_DIR and friends at that folder, and CMake will find the proper include and library folders automatically.  On Linux, CMake will check pkg-config for hints on where to find the appropriate directories.
No external documentation is provided in this pull request.  Please tell me how you would prefer this build system be documented.
I have also gone out of my way to make the CMakeLists.txt files be laid out similarly to the autotools files - at least superficially - to aid with updating these build files at the same time as the autotools build.","@turol CMake doesn't do...whatever automake does to not find libm.
However, I ran the entire build through with -Werror and turns out that flag found a bug with strcasecmp detection.  When writing my original response, I hit ^C after seeing the first few files be compiled with -Werror, so I missed that.
You can look at the build output yourself by passing VERBOSE=1 to make or -v to ninja.
In any case, as of now, adding -Werror ought to work.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1054,2018-06-01T22:40:52Z,2018-06-05T00:54:04Z,2018-06-05T22:24:47Z,MERGED,True,1422,0,22,https://github.com/AlexMax,CMake Build FIles - Visual Studio project replacement,24,[],https://github.com/chocolate-doom/chocolate-doom/pull/1054,https://github.com/fragglet,7,https://github.com/chocolate-doom/chocolate-doom/pull/1054#issuecomment-394171612,"Here are CMake build files
These build files have been designed for creating Visual Studio projects.  They also work well enough to support compiling under Linux as well.  I have not tested these with any flavor of MinGW or on macOS.
The currently supported targets are:

Chocolate Foo and all dependent libraries
Setup
midiproc
Standalone midiread
Standalone mus2mid

Other targets have not been implemented, such as manpage building.
SDL2, SDL2_mixer and SDL2_net are all required libraries.  libpng and libsamplerate are also optionally supported, and will be linked against if you point to them.
Instructions on how to use these build files are quite simple, and anybody who has ever used CMake before should feel right at home.  For novices, I recommend using CMake GUI.  In-tree builds are not supported, it is suggested that the user create a build folder in the checkout (which is also now a part of the .gitignore) and point CMake at that directory to create the project files or Makefiles or whatever.
The included SDL2 library finders also include specific cache variables called SDL2_DIR and similar.  If you download the Visual C++ ""Development Library"" from the SDL website, and unzip it into a specific folder, you can simply point the SDL2_DIR and friends at that folder, and CMake will find the proper include and library folders automatically.  On Linux, CMake will check pkg-config for hints on where to find the appropriate directories.
No external documentation is provided in this pull request.  Please tell me how you would prefer this build system be documented.
I have also gone out of my way to make the CMakeLists.txt files be laid out similarly to the autotools files - at least superficially - to aid with updating these build files at the same time as the autotools build.","Thanks, overall this looks great!",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1054,2018-06-01T22:40:52Z,2018-06-05T00:54:04Z,2018-06-05T22:24:47Z,MERGED,True,1422,0,22,https://github.com/AlexMax,CMake Build FIles - Visual Studio project replacement,24,[],https://github.com/chocolate-doom/chocolate-doom/pull/1054,https://github.com/fragglet,8,https://github.com/chocolate-doom/chocolate-doom/pull/1054#issuecomment-394546110,"Here are CMake build files
These build files have been designed for creating Visual Studio projects.  They also work well enough to support compiling under Linux as well.  I have not tested these with any flavor of MinGW or on macOS.
The currently supported targets are:

Chocolate Foo and all dependent libraries
Setup
midiproc
Standalone midiread
Standalone mus2mid

Other targets have not been implemented, such as manpage building.
SDL2, SDL2_mixer and SDL2_net are all required libraries.  libpng and libsamplerate are also optionally supported, and will be linked against if you point to them.
Instructions on how to use these build files are quite simple, and anybody who has ever used CMake before should feel right at home.  For novices, I recommend using CMake GUI.  In-tree builds are not supported, it is suggested that the user create a build folder in the checkout (which is also now a part of the .gitignore) and point CMake at that directory to create the project files or Makefiles or whatever.
The included SDL2 library finders also include specific cache variables called SDL2_DIR and similar.  If you download the Visual C++ ""Development Library"" from the SDL website, and unzip it into a specific folder, you can simply point the SDL2_DIR and friends at that folder, and CMake will find the proper include and library folders automatically.  On Linux, CMake will check pkg-config for hints on where to find the appropriate directories.
No external documentation is provided in this pull request.  Please tell me how you would prefer this build system be documented.
I have also gone out of my way to make the CMakeLists.txt files be laid out similarly to the autotools files - at least superficially - to aid with updating these build files at the same time as the autotools build.","Merged, thanks!",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1062,2018-06-13T17:57:50Z,2018-06-14T00:01:22Z,2018-06-15T21:16:13Z,MERGED,True,3,2683,16,https://github.com/chungy,Remove the codeblocks project,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1062,https://github.com/chungy,1,https://github.com/chocolate-doom/chocolate-doom/pull/1062,"With both autotools and cmake build systems in the repository, we can accommodate pretty much every IDE there is without needing hand-crafted files for each one.
@JNechaevsky was the last known user of the Code::Blocks IDE, but in #1057 he mentioned that he even stopped using it in favor of the MSYS2 process. With a similar justification to removing MSVC project files, cmake can replace the need for these files entirely without diminishing users of Code::Blocks from still using the IDE.","With both autotools and cmake build systems in the repository, we can accommodate pretty much every IDE there is without needing hand-crafted files for each one.
@JNechaevsky was the last known user of the Code::Blocks IDE, but in #1057 he mentioned that he even stopped using it in favor of the MSYS2 process. With a similar justification to removing MSVC project files, cmake can replace the need for these files entirely without diminishing users of Code::Blocks from still using the IDE.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1062,2018-06-13T17:57:50Z,2018-06-14T00:01:22Z,2018-06-15T21:16:13Z,MERGED,True,3,2683,16,https://github.com/chungy,Remove the codeblocks project,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1062,https://github.com/fragglet,2,https://github.com/chocolate-doom/chocolate-doom/pull/1062#issuecomment-397124920,"With both autotools and cmake build systems in the repository, we can accommodate pretty much every IDE there is without needing hand-crafted files for each one.
@JNechaevsky was the last known user of the Code::Blocks IDE, but in #1057 he mentioned that he even stopped using it in favor of the MSYS2 process. With a similar justification to removing MSVC project files, cmake can replace the need for these files entirely without diminishing users of Code::Blocks from still using the IDE.",Thumbs up. Let's kill it.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1063,2018-06-16T17:25:48Z,2018-06-17T00:31:31Z,2018-06-17T00:31:31Z,MERGED,True,32,15,5,https://github.com/AlexMax,Get CMake working under MSYS2 + MinGW,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1063,https://github.com/AlexMax,1,https://github.com/chocolate-doom/chocolate-doom/pull/1063,Pretty much what it says on the tin - Chocolate Doom now builds properly in the MSYS2 environment using CMake.,Pretty much what it says on the tin - Chocolate Doom now builds properly in the MSYS2 environment using CMake.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1066,2018-06-20T10:24:25Z,2018-06-24T07:03:49Z,2018-06-24T07:03:49Z,CLOSED,False,27,0,1,https://github.com/e-minguez,Added rc script to start chocolate-server,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1066,https://github.com/e-minguez,1,https://github.com/chocolate-doom/chocolate-doom/pull/1066,"Based on https://gist.github.com/e-minguez/302e59877e8fe91f6c3db685b500b181
Once this is merged (hopefully!) the idea is to improve the port to
include this","Based on https://gist.github.com/e-minguez/302e59877e8fe91f6c3db685b500b181
Once this is merged (hopefully!) the idea is to improve the port to
include this",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1066,2018-06-20T10:24:25Z,2018-06-24T07:03:49Z,2018-06-24T07:03:49Z,CLOSED,False,27,0,1,https://github.com/e-minguez,Added rc script to start chocolate-server,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1066,https://github.com/chungy,2,https://github.com/chocolate-doom/chocolate-doom/pull/1066#issuecomment-398832995,"Based on https://gist.github.com/e-minguez/302e59877e8fe91f6c3db685b500b181
Once this is merged (hopefully!) the idea is to improve the port to
include this","chocolate-server will be going away, it is better to change out the command with chocolate-doom -dedicated.
On the utility, I think it makes more sense for each OS/distro to provide startup scripts for their packaging rather than trying to support all of it upstream. Nearly ever OS has ever-so-slightly-different ways of using an init system, and the port/package maintainers know best how to handle it.
Perhaps @fragglet will chime in :)",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1066,2018-06-20T10:24:25Z,2018-06-24T07:03:49Z,2018-06-24T07:03:49Z,CLOSED,False,27,0,1,https://github.com/e-minguez,Added rc script to start chocolate-server,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1066,https://github.com/fabiangreffrath,3,https://github.com/chocolate-doom/chocolate-doom/pull/1066#issuecomment-398840101,"Based on https://gist.github.com/e-minguez/302e59877e8fe91f6c3db685b500b181
Once this is merged (hopefully!) the idea is to improve the port to
include this","Ah, I was just going to submit a systemd user service unit file. 😉",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1066,2018-06-20T10:24:25Z,2018-06-24T07:03:49Z,2018-06-24T07:03:49Z,CLOSED,False,27,0,1,https://github.com/e-minguez,Added rc script to start chocolate-server,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1066,https://github.com/fragglet,4,https://github.com/chocolate-doom/chocolate-doom/pull/1066#issuecomment-399734602,"Based on https://gist.github.com/e-minguez/302e59877e8fe91f6c3db685b500b181
Once this is merged (hopefully!) the idea is to improve the port to
include this","I agree with @chungy, especially since this appears to be OpenBSD-specific. Scripts like this tend to be very specific to the particular OS they're written to support. I suggest you submit a patch to add this file to the OpenBSD chocolate-doom port:
http://cvsweb.openbsd.org/cgi-bin/cvsweb/ports/games/chocolate-doom/",True,{'THUMBS_UP': ['https://github.com/e-minguez']}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1067,2018-06-22T16:47:06Z,,2022-03-11T15:58:06Z,OPEN,False,142,12,12,https://github.com/WinterMute,Nintendo Switch Port,20,[],https://github.com/chocolate-doom/chocolate-doom/pull/1067,https://github.com/WinterMute,1,https://github.com/chocolate-doom/chocolate-doom/pull/1067,"This isn't quite ready for merging. I wanted to start the PR and get some advice on how best to approach some of this.
I'm not entirely keen on this kind of construction - https://github.com/WinterMute/chocolate-doom/blob/b89a85f15418bc6046b7ce7460fe54cdfa5919d2/src/Makefile.am#L12-L24. Would it perhaps be better to have something like an --enable-setup option for this?
For some reason use_joystick seems to not be bound in heretic and I can't really figure out why atm. For now I've just defaulted the joystick to enabled on Switch here - https://github.com/WinterMute/chocolate-doom/blob/b89a85f15418bc6046b7ce7460fe54cdfa5919d2/src/i_joystick.c#L43-L49
I have some more testing to do but so far it all seems to work quite well on hardware & I have some binaries uploaded @ https://github.com/WinterMute/chocolate-doom/releases/tag/switch-port-1.0.0-alpha
I'm also having trouble getting Strife to load its shareware wad & I see there's a fixme comment in the wad list for Strife. Any ideas what that's about?","This isn't quite ready for merging. I wanted to start the PR and get some advice on how best to approach some of this.
I'm not entirely keen on this kind of construction - https://github.com/WinterMute/chocolate-doom/blob/b89a85f15418bc6046b7ce7460fe54cdfa5919d2/src/Makefile.am#L12-L24. Would it perhaps be better to have something like an --enable-setup option for this?
For some reason use_joystick seems to not be bound in heretic and I can't really figure out why atm. For now I've just defaulted the joystick to enabled on Switch here - https://github.com/WinterMute/chocolate-doom/blob/b89a85f15418bc6046b7ce7460fe54cdfa5919d2/src/i_joystick.c#L43-L49
I have some more testing to do but so far it all seems to work quite well on hardware & I have some binaries uploaded @ https://github.com/WinterMute/chocolate-doom/releases/tag/switch-port-1.0.0-alpha
I'm also having trouble getting Strife to load its shareware wad & I see there's a fixme comment in the wad list for Strife. Any ideas what that's about?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1067,2018-06-22T16:47:06Z,,2022-03-11T15:58:06Z,OPEN,False,142,12,12,https://github.com/WinterMute,Nintendo Switch Port,20,[],https://github.com/chocolate-doom/chocolate-doom/pull/1067,https://github.com/WinterMute,2,https://github.com/chocolate-doom/chocolate-doom/pull/1067#issuecomment-400383174,"This isn't quite ready for merging. I wanted to start the PR and get some advice on how best to approach some of this.
I'm not entirely keen on this kind of construction - https://github.com/WinterMute/chocolate-doom/blob/b89a85f15418bc6046b7ce7460fe54cdfa5919d2/src/Makefile.am#L12-L24. Would it perhaps be better to have something like an --enable-setup option for this?
For some reason use_joystick seems to not be bound in heretic and I can't really figure out why atm. For now I've just defaulted the joystick to enabled on Switch here - https://github.com/WinterMute/chocolate-doom/blob/b89a85f15418bc6046b7ce7460fe54cdfa5919d2/src/i_joystick.c#L43-L49
I have some more testing to do but so far it all seems to work quite well on hardware & I have some binaries uploaded @ https://github.com/WinterMute/chocolate-doom/releases/tag/switch-port-1.0.0-alpha
I'm also having trouble getting Strife to load its shareware wad & I see there's a fixme comment in the wad list for Strife. Any ideas what that's about?","The setup tools failed to build when I started but that may actually be alleviated by pulling @LDFLAGS@ out of EXTRA_LIBS & some LDADD settings - part of the issue was getting double -specs arguments at link time.
I think it might be better to run up another PR with the more general fixes & see where we are from there. Would be nice to have the ability to build for Switch upstreamed but I'm hoping the patchset for that will be pretty minimal by the time I'm done anyway.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1067,2018-06-22T16:47:06Z,,2022-03-11T15:58:06Z,OPEN,False,142,12,12,https://github.com/WinterMute,Nintendo Switch Port,20,[],https://github.com/chocolate-doom/chocolate-doom/pull/1067,https://github.com/fragglet,3,https://github.com/chocolate-doom/chocolate-doom/pull/1067#issuecomment-400394280,"This isn't quite ready for merging. I wanted to start the PR and get some advice on how best to approach some of this.
I'm not entirely keen on this kind of construction - https://github.com/WinterMute/chocolate-doom/blob/b89a85f15418bc6046b7ce7460fe54cdfa5919d2/src/Makefile.am#L12-L24. Would it perhaps be better to have something like an --enable-setup option for this?
For some reason use_joystick seems to not be bound in heretic and I can't really figure out why atm. For now I've just defaulted the joystick to enabled on Switch here - https://github.com/WinterMute/chocolate-doom/blob/b89a85f15418bc6046b7ce7460fe54cdfa5919d2/src/i_joystick.c#L43-L49
I have some more testing to do but so far it all seems to work quite well on hardware & I have some binaries uploaded @ https://github.com/WinterMute/chocolate-doom/releases/tag/switch-port-1.0.0-alpha
I'm also having trouble getting Strife to load its shareware wad & I see there's a fixme comment in the wad list for Strife. Any ideas what that's about?",+1 to splitting out the general fixes into a separate PR.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1067,2018-06-22T16:47:06Z,,2022-03-11T15:58:06Z,OPEN,False,142,12,12,https://github.com/WinterMute,Nintendo Switch Port,20,[],https://github.com/chocolate-doom/chocolate-doom/pull/1067,https://github.com/fabiangreffrath,4,https://github.com/chocolate-doom/chocolate-doom/pull/1067#issuecomment-463935770,"This isn't quite ready for merging. I wanted to start the PR and get some advice on how best to approach some of this.
I'm not entirely keen on this kind of construction - https://github.com/WinterMute/chocolate-doom/blob/b89a85f15418bc6046b7ce7460fe54cdfa5919d2/src/Makefile.am#L12-L24. Would it perhaps be better to have something like an --enable-setup option for this?
For some reason use_joystick seems to not be bound in heretic and I can't really figure out why atm. For now I've just defaulted the joystick to enabled on Switch here - https://github.com/WinterMute/chocolate-doom/blob/b89a85f15418bc6046b7ce7460fe54cdfa5919d2/src/i_joystick.c#L43-L49
I have some more testing to do but so far it all seems to work quite well on hardware & I have some binaries uploaded @ https://github.com/WinterMute/chocolate-doom/releases/tag/switch-port-1.0.0-alpha
I'm also having trouble getting Strife to load its shareware wad & I see there's a fixme comment in the wad list for Strife. Any ideas what that's about?",@WinterMute My kids have a Switch. What do I have to do to play Choco Doom on it?,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1067,2018-06-22T16:47:06Z,,2022-03-11T15:58:06Z,OPEN,False,142,12,12,https://github.com/WinterMute,Nintendo Switch Port,20,[],https://github.com/chocolate-doom/chocolate-doom/pull/1067,https://github.com/ericcurtin,5,https://github.com/chocolate-doom/chocolate-doom/pull/1067#issuecomment-1065244678,"This isn't quite ready for merging. I wanted to start the PR and get some advice on how best to approach some of this.
I'm not entirely keen on this kind of construction - https://github.com/WinterMute/chocolate-doom/blob/b89a85f15418bc6046b7ce7460fe54cdfa5919d2/src/Makefile.am#L12-L24. Would it perhaps be better to have something like an --enable-setup option for this?
For some reason use_joystick seems to not be bound in heretic and I can't really figure out why atm. For now I've just defaulted the joystick to enabled on Switch here - https://github.com/WinterMute/chocolate-doom/blob/b89a85f15418bc6046b7ce7460fe54cdfa5919d2/src/i_joystick.c#L43-L49
I have some more testing to do but so far it all seems to work quite well on hardware & I have some binaries uploaded @ https://github.com/WinterMute/chocolate-doom/releases/tag/switch-port-1.0.0-alpha
I'm also having trouble getting Strife to load its shareware wad & I see there's a fixme comment in the wad list for Strife. Any ideas what that's about?","I'd love to take this fix here:
https://github.com/ericcurtin/opendoom",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1067,2018-06-22T16:47:06Z,,2022-03-11T15:58:06Z,OPEN,False,142,12,12,https://github.com/WinterMute,Nintendo Switch Port,20,[],https://github.com/chocolate-doom/chocolate-doom/pull/1067,https://github.com/ericcurtin,6,https://github.com/chocolate-doom/chocolate-doom/pull/1067#issuecomment-1065244914,"This isn't quite ready for merging. I wanted to start the PR and get some advice on how best to approach some of this.
I'm not entirely keen on this kind of construction - https://github.com/WinterMute/chocolate-doom/blob/b89a85f15418bc6046b7ce7460fe54cdfa5919d2/src/Makefile.am#L12-L24. Would it perhaps be better to have something like an --enable-setup option for this?
For some reason use_joystick seems to not be bound in heretic and I can't really figure out why atm. For now I've just defaulted the joystick to enabled on Switch here - https://github.com/WinterMute/chocolate-doom/blob/b89a85f15418bc6046b7ce7460fe54cdfa5919d2/src/i_joystick.c#L43-L49
I have some more testing to do but so far it all seems to work quite well on hardware & I have some binaries uploaded @ https://github.com/WinterMute/chocolate-doom/releases/tag/switch-port-1.0.0-alpha
I'm also having trouble getting Strife to load its shareware wad & I see there's a fixme comment in the wad list for Strife. Any ideas what that's about?",Without copyrighted stuff obviously,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1070,2018-07-21T14:13:42Z,2018-07-21T16:31:40Z,2018-07-23T06:05:27Z,MERGED,True,36,27,17,https://github.com/turol,More const correctness,15,[],https://github.com/chocolate-doom/chocolate-doom/pull/1070,https://github.com/turol,1,https://github.com/chocolate-doom/chocolate-doom/pull/1070,"Also fixes some potential memory leaks in WAD code.
You should compile-test on Windows before merge, this touches some Windows-specific code and I have not tested that.
Also I think warnings caused by -Wcast-qual can't be fixed easily because for some reason SDL_CreateRGBSurfaceFrom first parameter is not const.","Also fixes some potential memory leaks in WAD code.
You should compile-test on Windows before merge, this touches some Windows-specific code and I have not tested that.
Also I think warnings caused by -Wcast-qual can't be fixed easily because for some reason SDL_CreateRGBSurfaceFrom first parameter is not const.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1070,2018-07-21T14:13:42Z,2018-07-21T16:31:40Z,2018-07-23T06:05:27Z,MERGED,True,36,27,17,https://github.com/turol,More const correctness,15,[],https://github.com/chocolate-doom/chocolate-doom/pull/1070,https://github.com/chungy,2,https://github.com/chocolate-doom/chocolate-doom/pull/1070#issuecomment-406808156,"Also fixes some potential memory leaks in WAD code.
You should compile-test on Windows before merge, this touches some Windows-specific code and I have not tested that.
Also I think warnings caused by -Wcast-qual can't be fixed easily because for some reason SDL_CreateRGBSurfaceFrom first parameter is not const.",Thanks :),True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1070,2018-07-21T14:13:42Z,2018-07-21T16:31:40Z,2018-07-23T06:05:27Z,MERGED,True,36,27,17,https://github.com/turol,More const correctness,15,[],https://github.com/chocolate-doom/chocolate-doom/pull/1070,https://github.com/fabiangreffrath,3,https://github.com/chocolate-doom/chocolate-doom/pull/1070#issuecomment-406948907,"Also fixes some potential memory leaks in WAD code.
You should compile-test on Windows before merge, this touches some Windows-specific code and I have not tested that.
Also I think warnings caused by -Wcast-qual can't be fixed easily because for some reason SDL_CreateRGBSurfaceFrom first parameter is not const.","Compiles fine with MinGW-W64 on MSYS2, thanks!",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1071,2018-07-23T08:29:02Z,2018-07-27T07:21:58Z,2019-02-24T21:01:28Z,CLOSED,False,14,38,5,https://github.com/fabiangreffrath,"move common ""enum gamestate_t"" to the d_mode.h header",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1071,https://github.com/fabiangreffrath,1,https://github.com/chocolate-doom/chocolate-doom/pull/1071,"This makes no difference for Choco, but for derivatives it might be
interesting for the renderer to know the current gamestate in order
to decide whether to render e.g. with an uncapped framerate or not.","This makes no difference for Choco, but for derivatives it might be
interesting for the renderer to know the current gamestate in order
to decide whether to render e.g. with an uncapped framerate or not.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1071,2018-07-23T08:29:02Z,2018-07-27T07:21:58Z,2019-02-24T21:01:28Z,CLOSED,False,14,38,5,https://github.com/fabiangreffrath,"move common ""enum gamestate_t"" to the d_mode.h header",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1071,https://github.com/fabiangreffrath,2,https://github.com/chocolate-doom/chocolate-doom/pull/1071#issuecomment-407020939,"This makes no difference for Choco, but for derivatives it might be
interesting for the renderer to know the current gamestate in order
to decide whether to render e.g. with an uncapped framerate or not.",Any objections?,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1071,2018-07-23T08:29:02Z,2018-07-27T07:21:58Z,2019-02-24T21:01:28Z,CLOSED,False,14,38,5,https://github.com/fabiangreffrath,"move common ""enum gamestate_t"" to the d_mode.h header",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1071,https://github.com/jmtd,3,https://github.com/chocolate-doom/chocolate-doom/pull/1071#issuecomment-407045276,"This makes no difference for Choco, but for derivatives it might be
interesting for the renderer to know the current gamestate in order
to decide whether to render e.g. with an uncapped framerate or not.",LGTM,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1071,2018-07-23T08:29:02Z,2018-07-27T07:21:58Z,2019-02-24T21:01:28Z,CLOSED,False,14,38,5,https://github.com/fabiangreffrath,"move common ""enum gamestate_t"" to the d_mode.h header",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1071,https://github.com/fabiangreffrath,4,https://github.com/chocolate-doom/chocolate-doom/pull/1071#issuecomment-408334823,"This makes no difference for Choco, but for derivatives it might be
interesting for the renderer to know the current gamestate in order
to decide whether to render e.g. with an uncapped framerate or not.","Thanks for the approvals, but I think I have found a more subtle way to solve my issue:
fabiangreffrath@5903980",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1072,2018-07-28T12:54:52Z,2018-08-02T21:10:58Z,2018-08-02T21:10:58Z,MERGED,True,44,44,13,https://github.com/turol,More const correctness,26,[],https://github.com/chocolate-doom/chocolate-doom/pull/1072,https://github.com/turol,1,https://github.com/chocolate-doom/chocolate-doom/pull/1072,Some stragglers in d_iwad and then the trivial things in doom.,Some stragglers in d_iwad and then the trivial things in doom.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1072,2018-07-28T12:54:52Z,2018-08-02T21:10:58Z,2018-08-02T21:10:58Z,MERGED,True,44,44,13,https://github.com/turol,More const correctness,26,[],https://github.com/chocolate-doom/chocolate-doom/pull/1072,https://github.com/turol,2,https://github.com/chocolate-doom/chocolate-doom/pull/1072#issuecomment-409264047,Some stragglers in d_iwad and then the trivial things in doom.,@fragglet Fixed formatting.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1074,2018-08-07T01:12:46Z,2018-08-11T17:02:28Z,2018-08-11T17:02:28Z,MERGED,True,7,0,1,https://github.com/AXDOOMER,Heretic: Fix P_FindNextHighestFloor's behavior,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1074,https://github.com/AXDOOMER,1,https://github.com/chocolate-doom/chocolate-doom/pull/1074,"The floor would raise to INT_MAX if no surrounding sector was higher, which isn't how vanilla Heretic behaves.
This issue has been discussed on Doomworld here.
A map and a savegame are available here. Pressing the switch in the room on the right will cause the floor in front of the two pillars to raise. The floor bellow each pillar has been accidentally tagged with the same tag has the floor in front of them. The bug causes them to raise through the ceiling, but this doesn't happen in vanilla Heretic or with this fix.","The floor would raise to INT_MAX if no surrounding sector was higher, which isn't how vanilla Heretic behaves.
This issue has been discussed on Doomworld here.
A map and a savegame are available here. Pressing the switch in the room on the right will cause the floor in front of the two pillars to raise. The floor bellow each pillar has been accidentally tagged with the same tag has the floor in front of them. The bug causes them to raise through the ceiling, but this doesn't happen in vanilla Heretic or with this fix.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1075,2018-08-07T15:49:01Z,2018-08-18T04:48:20Z,2018-08-18T04:48:20Z,MERGED,True,54,54,12,https://github.com/turol,More const correctness,31,[],https://github.com/chocolate-doom/chocolate-doom/pull/1075,https://github.com/turol,1,https://github.com/chocolate-doom/chocolate-doom/pull/1075,Parts of Heretic and Hexen. One nasty commit where multiple things had to change at the same time.,Parts of Heretic and Hexen. One nasty commit where multiple things had to change at the same time.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1075,2018-08-07T15:49:01Z,2018-08-18T04:48:20Z,2018-08-18T04:48:20Z,MERGED,True,54,54,12,https://github.com/turol,More const correctness,31,[],https://github.com/chocolate-doom/chocolate-doom/pull/1075,https://github.com/turol,2,https://github.com/chocolate-doom/chocolate-doom/pull/1075#issuecomment-412471099,Parts of Heretic and Hexen. One nasty commit where multiple things had to change at the same time.,@fragglet ping,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1075,2018-08-07T15:49:01Z,2018-08-18T04:48:20Z,2018-08-18T04:48:20Z,MERGED,True,54,54,12,https://github.com/turol,More const correctness,31,[],https://github.com/chocolate-doom/chocolate-doom/pull/1075,https://github.com/jmtd,3,https://github.com/chocolate-doom/chocolate-doom/pull/1075#issuecomment-413318569,Parts of Heretic and Hexen. One nasty commit where multiple things had to change at the same time.,Can anyone give me some hints on how to review stuff like this? Then maybe I could help out. Should it reduce the volume of warning messages spewed by GCC? Do I need to set an environment variable or config option to stop automake/conf supressing them first? Thanks!,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1076,2018-08-11T14:26:22Z,,2019-11-17T22:04:55Z,OPEN,False,102,22,5,https://github.com/hifi,Implement analog joystick support,1,['input'],https://github.com/chocolate-doom/chocolate-doom/pull/1076,https://github.com/hifi,1,https://github.com/chocolate-doom/chocolate-doom/pull/1076,"This is an attempt to get smooth analog joystick support in. The dead zone is also configurable and is ignored when calculating the intensity of the axes so that you have the possibility to make very precise moves regardless of how large the dead zone needs to be.
It may be desired to implement even more configuration for analog input if the -32767+32767 scale is too wide for some controllers. There's a slight compensation given for rounding errors.
The changes to chocolate-doom-setup menu are horrible, I'm sorry. Please suggest how the new options should be arranged in there.
On lighter side, Doom is still too hard to play with a controller so there's that. I've tested this with a DualShock 4 controller.
Fixes #901 for Doom, after this PR is massaged enough, same changes would be need to be implemented for other games as well.","This is an attempt to get smooth analog joystick support in. The dead zone is also configurable and is ignored when calculating the intensity of the axes so that you have the possibility to make very precise moves regardless of how large the dead zone needs to be.
It may be desired to implement even more configuration for analog input if the -32767+32767 scale is too wide for some controllers. There's a slight compensation given for rounding errors.
The changes to chocolate-doom-setup menu are horrible, I'm sorry. Please suggest how the new options should be arranged in there.
On lighter side, Doom is still too hard to play with a controller so there's that. I've tested this with a DualShock 4 controller.
Fixes #901 for Doom, after this PR is massaged enough, same changes would be need to be implemented for other games as well.",True,{'THUMBS_UP': ['https://github.com/bb010g']}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1076,2018-08-11T14:26:22Z,,2019-11-17T22:04:55Z,OPEN,False,102,22,5,https://github.com/hifi,Implement analog joystick support,1,['input'],https://github.com/chocolate-doom/chocolate-doom/pull/1076,https://github.com/jmtd,2,https://github.com/chocolate-doom/chocolate-doom/pull/1076#issuecomment-413150867,"This is an attempt to get smooth analog joystick support in. The dead zone is also configurable and is ignored when calculating the intensity of the axes so that you have the possibility to make very precise moves regardless of how large the dead zone needs to be.
It may be desired to implement even more configuration for analog input if the -32767+32767 scale is too wide for some controllers. There's a slight compensation given for rounding errors.
The changes to chocolate-doom-setup menu are horrible, I'm sorry. Please suggest how the new options should be arranged in there.
On lighter side, Doom is still too hard to play with a controller so there's that. I've tested this with a DualShock 4 controller.
Fixes #901 for Doom, after this PR is massaged enough, same changes would be need to be implemented for other games as well.","Looking forward to trying this! I struggle to play doom with analog sticks (pre this PR, so, with no variable input) but found using them with look up/down turn left/right worked quite well in heretic and hexen, so I'll give it a spin with those.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1076,2018-08-11T14:26:22Z,,2019-11-17T22:04:55Z,OPEN,False,102,22,5,https://github.com/hifi,Implement analog joystick support,1,['input'],https://github.com/chocolate-doom/chocolate-doom/pull/1076,https://github.com/hifi,3,https://github.com/chocolate-doom/chocolate-doom/pull/1076#issuecomment-413242583,"This is an attempt to get smooth analog joystick support in. The dead zone is also configurable and is ignored when calculating the intensity of the axes so that you have the possibility to make very precise moves regardless of how large the dead zone needs to be.
It may be desired to implement even more configuration for analog input if the -32767+32767 scale is too wide for some controllers. There's a slight compensation given for rounding errors.
The changes to chocolate-doom-setup menu are horrible, I'm sorry. Please suggest how the new options should be arranged in there.
On lighter side, Doom is still too hard to play with a controller so there's that. I've tested this with a DualShock 4 controller.
Fixes #901 for Doom, after this PR is massaged enough, same changes would be need to be implemented for other games as well.","I tested with a modern FPS config of having the left stick do strafing + forward/back and right stick turning left/right and R2 to shoot, it works fairly well in my opinion.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1076,2018-08-11T14:26:22Z,,2019-11-17T22:04:55Z,OPEN,False,102,22,5,https://github.com/hifi,Implement analog joystick support,1,['input'],https://github.com/chocolate-doom/chocolate-doom/pull/1076,https://github.com/jmtd,4,https://github.com/chocolate-doom/chocolate-doom/pull/1076#issuecomment-413303962,"This is an attempt to get smooth analog joystick support in. The dead zone is also configurable and is ignored when calculating the intensity of the axes so that you have the possibility to make very precise moves regardless of how large the dead zone needs to be.
It may be desired to implement even more configuration for analog input if the -32767+32767 scale is too wide for some controllers. There's a slight compensation given for rounding errors.
The changes to chocolate-doom-setup menu are horrible, I'm sorry. Please suggest how the new options should be arranged in there.
On lighter side, Doom is still too hard to play with a controller so there's that. I've tested this with a DualShock 4 controller.
Fixes #901 for Doom, after this PR is massaged enough, same changes would be need to be implemented for other games as well.","Testing with an 8bitdo FC30 pro which has two analog sticks. I haven't (yet) ran the sdl2test programs to see what the analog input looks like from a data POV for this controller.
Well, it works... but it's mega-sensitive it seems, at least for turning. Whether I put turning on the left stick or right, with analog input turned on I constantly over-turn. I don't seem to over-strafe, it only seems to be an issue for turning. I wonder if we need to implement and expose some kind of sensitive adjustment?
Only tested in doom obviously since it's only applied to Doom so far.
Deadzone seems to work, although there's only a very subtle difference on my controller between 0 and 99.
Agreed setup UI could use some work. I'd experiment with moving the analog radio above the axis definitions, and making the dead zone option only appear if analog is selected, similar to how window size options only appear if fullscreen is deselected.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1076,2018-08-11T14:26:22Z,,2019-11-17T22:04:55Z,OPEN,False,102,22,5,https://github.com/hifi,Implement analog joystick support,1,['input'],https://github.com/chocolate-doom/chocolate-doom/pull/1076,https://github.com/jmtd,5,https://github.com/chocolate-doom/chocolate-doom/pull/1076#issuecomment-413318098,"This is an attempt to get smooth analog joystick support in. The dead zone is also configurable and is ignored when calculating the intensity of the axes so that you have the possibility to make very precise moves regardless of how large the dead zone needs to be.
It may be desired to implement even more configuration for analog input if the -32767+32767 scale is too wide for some controllers. There's a slight compensation given for rounding errors.
The changes to chocolate-doom-setup menu are horrible, I'm sorry. Please suggest how the new options should be arranged in there.
On lighter side, Doom is still too hard to play with a controller so there's that. I've tested this with a DualShock 4 controller.
Fixes #901 for Doom, after this PR is massaged enough, same changes would be need to be implemented for other games as well.","I thought I'd try a PS3 controller but I can't get any events out of it in Linux (not just to choco, but anything else either)",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1076,2018-08-11T14:26:22Z,,2019-11-17T22:04:55Z,OPEN,False,102,22,5,https://github.com/hifi,Implement analog joystick support,1,['input'],https://github.com/chocolate-doom/chocolate-doom/pull/1076,https://github.com/hifi,6,https://github.com/chocolate-doom/chocolate-doom/pull/1076#issuecomment-413406199,"This is an attempt to get smooth analog joystick support in. The dead zone is also configurable and is ignored when calculating the intensity of the axes so that you have the possibility to make very precise moves regardless of how large the dead zone needs to be.
It may be desired to implement even more configuration for analog input if the -32767+32767 scale is too wide for some controllers. There's a slight compensation given for rounding errors.
The changes to chocolate-doom-setup menu are horrible, I'm sorry. Please suggest how the new options should be arranged in there.
On lighter side, Doom is still too hard to play with a controller so there's that. I've tested this with a DualShock 4 controller.
Fixes #901 for Doom, after this PR is massaged enough, same changes would be need to be implemented for other games as well.","With the DualShock 4 controller, both sticks have almost linear input ranging from ~300 to 32768 and it requires virtually no dead zone.
It may be that your controller is in digital mode with the analog sticks sending low and high values instead of the full analog range.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1076,2018-08-11T14:26:22Z,,2019-11-17T22:04:55Z,OPEN,False,102,22,5,https://github.com/hifi,Implement analog joystick support,1,['input'],https://github.com/chocolate-doom/chocolate-doom/pull/1076,https://github.com/jmtd,7,https://github.com/chocolate-doom/chocolate-doom/pull/1076#issuecomment-413439813,"This is an attempt to get smooth analog joystick support in. The dead zone is also configurable and is ignored when calculating the intensity of the axes so that you have the possibility to make very precise moves regardless of how large the dead zone needs to be.
It may be desired to implement even more configuration for analog input if the -32767+32767 scale is too wide for some controllers. There's a slight compensation given for rounding errors.
The changes to chocolate-doom-setup menu are horrible, I'm sorry. Please suggest how the new options should be arranged in there.
On lighter side, Doom is still too hard to play with a controller so there's that. I've tested this with a DualShock 4 controller.
Fixes #901 for Doom, after this PR is massaged enough, same changes would be need to be implemented for other games as well.","I've found sdl2-jstest which I used to use to debug this stuff. I'm getting analog readings from the sticks, but they're just really sensitive. I'm going to read over the gamepad's manual and see whether that's configurable in firmware.
One bad joystick experience shouldn't nix this PR... but I'd love to see some of the other maintainers give it a go.
My PS3 controller finally showed up in Bluetooth this morning so I might have another go with it tonight.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1076,2018-08-11T14:26:22Z,,2019-11-17T22:04:55Z,OPEN,False,102,22,5,https://github.com/hifi,Implement analog joystick support,1,['input'],https://github.com/chocolate-doom/chocolate-doom/pull/1076,https://github.com/hifi,8,https://github.com/chocolate-doom/chocolate-doom/pull/1076#issuecomment-414289825,"This is an attempt to get smooth analog joystick support in. The dead zone is also configurable and is ignored when calculating the intensity of the axes so that you have the possibility to make very precise moves regardless of how large the dead zone needs to be.
It may be desired to implement even more configuration for analog input if the -32767+32767 scale is too wide for some controllers. There's a slight compensation given for rounding errors.
The changes to chocolate-doom-setup menu are horrible, I'm sorry. Please suggest how the new options should be arranged in there.
On lighter side, Doom is still too hard to play with a controller so there's that. I've tested this with a DualShock 4 controller.
Fixes #901 for Doom, after this PR is massaged enough, same changes would be need to be implemented for other games as well.",Cleaned up the menu a bit with the suggestion of having it as a sub-window. Arranging one checkbox and a spin control with label seems hard without a separating header.,True,{'THUMBS_UP': ['https://github.com/jmtd']}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1076,2018-08-11T14:26:22Z,,2019-11-17T22:04:55Z,OPEN,False,102,22,5,https://github.com/hifi,Implement analog joystick support,1,['input'],https://github.com/chocolate-doom/chocolate-doom/pull/1076,https://github.com/hifi,9,https://github.com/chocolate-doom/chocolate-doom/pull/1076#issuecomment-423558541,"This is an attempt to get smooth analog joystick support in. The dead zone is also configurable and is ignored when calculating the intensity of the axes so that you have the possibility to make very precise moves regardless of how large the dead zone needs to be.
It may be desired to implement even more configuration for analog input if the -32767+32767 scale is too wide for some controllers. There's a slight compensation given for rounding errors.
The changes to chocolate-doom-setup menu are horrible, I'm sorry. Please suggest how the new options should be arranged in there.
On lighter side, Doom is still too hard to play with a controller so there's that. I've tested this with a DualShock 4 controller.
Fixes #901 for Doom, after this PR is massaged enough, same changes would be need to be implemented for other games as well.","Meanwhile I bought the cheapest Sixaxis clone I could find for testing and I can agree that with bad analog input it's worse than having digital.
The analog range is very badly configured in the firmware making both sticks have different sensitivity in every direction and all of them max out way before the stick is at the edge.
I tested with jstest from the joystick package on Ubuntu and it can clearly be seen how the sticks work.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1076,2018-08-11T14:26:22Z,,2019-11-17T22:04:55Z,OPEN,False,102,22,5,https://github.com/hifi,Implement analog joystick support,1,['input'],https://github.com/chocolate-doom/chocolate-doom/pull/1076,https://github.com/jmtd,10,https://github.com/chocolate-doom/chocolate-doom/pull/1076#issuecomment-443457238,"This is an attempt to get smooth analog joystick support in. The dead zone is also configurable and is ignored when calculating the intensity of the axes so that you have the possibility to make very precise moves regardless of how large the dead zone needs to be.
It may be desired to implement even more configuration for analog input if the -32767+32767 scale is too wide for some controllers. There's a slight compensation given for rounding errors.
The changes to chocolate-doom-setup menu are horrible, I'm sorry. Please suggest how the new options should be arranged in there.
On lighter side, Doom is still too hard to play with a controller so there's that. I've tested this with a DualShock 4 controller.
Fixes #901 for Doom, after this PR is massaged enough, same changes would be need to be implemented for other games as well.","Just dropping a note that I hope that we can look at this again - I'll see what I can add, but hoping another maintainer with a better-behaving joystick can have a go :) (Or I'll attempt to get my ps3 controller to work)",True,{'THUMBS_UP': ['https://github.com/hifi']}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1076,2018-08-11T14:26:22Z,,2019-11-17T22:04:55Z,OPEN,False,102,22,5,https://github.com/hifi,Implement analog joystick support,1,['input'],https://github.com/chocolate-doom/chocolate-doom/pull/1076,https://github.com/AXDOOMER,11,https://github.com/chocolate-doom/chocolate-doom/pull/1076#issuecomment-445503066,"This is an attempt to get smooth analog joystick support in. The dead zone is also configurable and is ignored when calculating the intensity of the axes so that you have the possibility to make very precise moves regardless of how large the dead zone needs to be.
It may be desired to implement even more configuration for analog input if the -32767+32767 scale is too wide for some controllers. There's a slight compensation given for rounding errors.
The changes to chocolate-doom-setup menu are horrible, I'm sorry. Please suggest how the new options should be arranged in there.
On lighter side, Doom is still too hard to play with a controller so there's that. I've tested this with a DualShock 4 controller.
Fixes #901 for Doom, after this PR is massaged enough, same changes would be need to be implemented for other games as well.","I tried it on Open Suse with xboxdrv. Works great, although is it the normal behavior to have ""always-run"" activated when using a gamepad? You don't have to push the stick very far and the player is already turning very fast, so it makes it hard to aim.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1076,2018-08-11T14:26:22Z,,2019-11-17T22:04:55Z,OPEN,False,102,22,5,https://github.com/hifi,Implement analog joystick support,1,['input'],https://github.com/chocolate-doom/chocolate-doom/pull/1076,https://github.com/jmtd,12,https://github.com/chocolate-doom/chocolate-doom/pull/1076#issuecomment-445835800,"This is an attempt to get smooth analog joystick support in. The dead zone is also configurable and is ignored when calculating the intensity of the axes so that you have the possibility to make very precise moves regardless of how large the dead zone needs to be.
It may be desired to implement even more configuration for analog input if the -32767+32767 scale is too wide for some controllers. There's a slight compensation given for rounding errors.
The changes to chocolate-doom-setup menu are horrible, I'm sorry. Please suggest how the new options should be arranged in there.
On lighter side, Doom is still too hard to play with a controller so there's that. I've tested this with a DualShock 4 controller.
Fixes #901 for Doom, after this PR is massaged enough, same changes would be need to be implemented for other games as well.","@AXDOOMER did you find the ""always-run"" like behaviour only with analog input switched on, or with it off, too?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1076,2018-08-11T14:26:22Z,,2019-11-17T22:04:55Z,OPEN,False,102,22,5,https://github.com/hifi,Implement analog joystick support,1,['input'],https://github.com/chocolate-doom/chocolate-doom/pull/1076,https://github.com/AXDOOMER,13,https://github.com/chocolate-doom/chocolate-doom/pull/1076#issuecomment-445986664,"This is an attempt to get smooth analog joystick support in. The dead zone is also configurable and is ignored when calculating the intensity of the axes so that you have the possibility to make very precise moves regardless of how large the dead zone needs to be.
It may be desired to implement even more configuration for analog input if the -32767+32767 scale is too wide for some controllers. There's a slight compensation given for rounding errors.
The changes to chocolate-doom-setup menu are horrible, I'm sorry. Please suggest how the new options should be arranged in there.
On lighter side, Doom is still too hard to play with a controller so there's that. I've tested this with a DualShock 4 controller.
Fixes #901 for Doom, after this PR is massaged enough, same changes would be need to be implemented for other games as well.","@jmtd It ""always-runs"" only when the analog mode is activated.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1077,2018-08-12T09:02:21Z,2018-08-15T17:21:46Z,2018-08-15T18:59:12Z,MERGED,True,54,52,1,https://github.com/hifi,doom: Don't skip joy events when menu is closed,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1077,https://github.com/hifi,1,https://github.com/chocolate-doom/chocolate-doom/pull/1077,"The menu code incorrectly adds event processing delay to joystick events even when the menu is not open.
Fixes #1015.","The menu code incorrectly adds event processing delay to joystick events even when the menu is not open.
Fixes #1015.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1077,2018-08-12T09:02:21Z,2018-08-15T17:21:46Z,2018-08-15T18:59:12Z,MERGED,True,54,52,1,https://github.com/hifi,doom: Don't skip joy events when menu is closed,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1077,https://github.com/jmtd,2,https://github.com/chocolate-doom/chocolate-doom/pull/1077#issuecomment-413239409,"The menu code incorrectly adds event processing delay to joystick events even when the menu is not open.
Fixes #1015.","Thanks! LGTM, but I'm going to test it either tonight (or more realistically) Tomorrow. (aside: git show -w really is a godsend)
Good timing as I've been planning to cargo-cult that stuff into the corresponding parts of heretic and hexen for ages; better to cargo cult the fixed version!
(PS: nice handle!)",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1077,2018-08-12T09:02:21Z,2018-08-15T17:21:46Z,2018-08-15T18:59:12Z,MERGED,True,54,52,1,https://github.com/hifi,doom: Don't skip joy events when menu is closed,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1077,https://github.com/jmtd,3,https://github.com/chocolate-doom/chocolate-doom/pull/1077#issuecomment-413270338,"The menu code incorrectly adds event processing delay to joystick events even when the menu is not open.
Fixes #1015.","Thanks. I can't reproduce the issue at my end, but the code makes sense and it doesn't break anything",True,{'THUMBS_UP': ['https://github.com/hifi']}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1077,2018-08-12T09:02:21Z,2018-08-15T17:21:46Z,2018-08-15T18:59:12Z,MERGED,True,54,52,1,https://github.com/hifi,doom: Don't skip joy events when menu is closed,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1077,https://github.com/jmtd,4,https://github.com/chocolate-doom/chocolate-doom/pull/1077#issuecomment-413300109,"The menu code incorrectly adds event processing delay to joystick events even when the menu is not open.
Fixes #1015.",Ah I've managed to reproduce this now heh,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1078,2018-08-14T16:39:05Z,,2019-11-17T22:04:55Z,OPEN,False,112,97,23,https://github.com/snwh,New icon assets,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1078,https://github.com/snwh,1,https://github.com/chocolate-doom/chocolate-doom/pull/1078,"Hello, I've been creating icons for desktop (mostly Linux) applications for years and as an occasional user of this project and I'd thought propose and icon improvement!

My makefile-fu isn't the greatest so do let me know if this is busted (I was already having difficulties getting it to build on Fedora due to lack of proper dependencies) my strengths are in icon asset creation not deployment.","Hello, I've been creating icons for desktop (mostly Linux) applications for years and as an occasional user of this project and I'd thought propose and icon improvement!

My makefile-fu isn't the greatest so do let me know if this is busted (I was already having difficulties getting it to build on Fedora due to lack of proper dependencies) my strengths are in icon asset creation not deployment.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1078,2018-08-14T16:39:05Z,,2019-11-17T22:04:55Z,OPEN,False,112,97,23,https://github.com/snwh,New icon assets,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1078,https://github.com/jmtd,2,https://github.com/chocolate-doom/chocolate-doom/pull/1078#issuecomment-413138873,"Hello, I've been creating icons for desktop (mostly Linux) applications for years and as an occasional user of this project and I'd thought propose and icon improvement!

My makefile-fu isn't the greatest so do let me know if this is busted (I was already having difficulties getting it to build on Fedora due to lack of proper dependencies) my strengths are in icon asset creation not deployment.","Thanks for raising this! Did you create these as SVGs or another vector format, and if so do you have the vector sources? I think having vector sources in the repo would be a significant technical improvement on the current icons. I like the shape of the letter; I like the improved setup wrench; I think it's good to have the colour be brown (=chocolate) but I liked the nod to the original Doom logo in the current logo with the colour gradients, so I'd be interested to see some kind of compromise on that. I'm not sure about dropping the (raster) ice cream graphic. I'm interested to see what the other maintainers think!",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1078,2018-08-14T16:39:05Z,,2019-11-17T22:04:55Z,OPEN,False,112,97,23,https://github.com/snwh,New icon assets,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1078,https://github.com/snwh,3,https://github.com/chocolate-doom/chocolate-doom/pull/1078#issuecomment-413200875,"Hello, I've been creating icons for desktop (mostly Linux) applications for years and as an occasional user of this project and I'd thought propose and icon improvement!

My makefile-fu isn't the greatest so do let me know if this is busted (I was already having difficulties getting it to build on Fedora due to lack of proper dependencies) my strengths are in icon asset creation not deployment.","@jmtd my pleasure! Yes, these assets are derived from a vector (SVG) source, however PNG assets are still the best for icons due to technical shortcomings in librsvg.
I could make it look more like the original doom logo by making it two tones of ""chocolate"" or something like that in the way the original D has two tones.
My reasoning for dropping the ice cream cone was to simplify the metaphor; it is more likely to be interpreted as ""ice cream doom"" than ""chocolate doom"" with the cone in there. ;) Also, assets derived from photographs are usually not necessarily the best for icons, as they don't scale well.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1078,2018-08-14T16:39:05Z,,2019-11-17T22:04:55Z,OPEN,False,112,97,23,https://github.com/snwh,New icon assets,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1078,https://github.com/fabiangreffrath,4,https://github.com/chocolate-doom/chocolate-doom/pull/1078#issuecomment-413277360,"Hello, I've been creating icons for desktop (mostly Linux) applications for years and as an occasional user of this project and I'd thought propose and icon improvement!

My makefile-fu isn't the greatest so do let me know if this is busted (I was already having difficulties getting it to build on Fedora due to lack of proper dependencies) my strengths are in icon asset creation not deployment.","In general, I like the icon. But I think if we ever choose to change the current icon theme, we should introduce one that has a distinct icon for all four games. Anything else wouldn't be an improvement IMHO.
CF:
#965
#1020",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1078,2018-08-14T16:39:05Z,,2019-11-17T22:04:55Z,OPEN,False,112,97,23,https://github.com/snwh,New icon assets,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1078,https://github.com/fragglet,5,https://github.com/chocolate-doom/chocolate-doom/pull/1078#issuecomment-413278488,"Hello, I've been creating icons for desktop (mostly Linux) applications for years and as an occasional user of this project and I'd thought propose and icon improvement!

My makefile-fu isn't the greatest so do let me know if this is busted (I was already having difficulties getting it to build on Fedora due to lack of proper dependencies) my strengths are in icon asset creation not deployment.","I like it! Note that there is a separate repository (https://github.com/chocolate-doom/icon) for the icon so you might want to submit a PR there first.

Yes, these assets are derived from a vector (SVG) source, however PNG assets are still the best for icons due to technical shortcomings in librsvg.

I think what Jon was really asking was if we could have the original SVG source as well :) But that belongs in the other repo.

But I think if we ever choose to change the current icon theme, we should introduce one that has a distinct icon for all four games

Either one that works for all four games (difficult, I think), or similar icons of the same style for Heretic ('H'), Hexen ('X') and Strife ('S'). But this is ""nice to have"" and I don't want it to block improving the current icon.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1078,2018-08-14T16:39:05Z,,2019-11-17T22:04:55Z,OPEN,False,112,97,23,https://github.com/snwh,New icon assets,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1078,https://github.com/snwh,6,https://github.com/chocolate-doom/chocolate-doom/pull/1078#issuecomment-413300114,"Hello, I've been creating icons for desktop (mostly Linux) applications for years and as an occasional user of this project and I'd thought propose and icon improvement!

My makefile-fu isn't the greatest so do let me know if this is busted (I was already having difficulties getting it to build on Fedora due to lack of proper dependencies) my strengths are in icon asset creation not deployment.","@fragglet ah I wasn't aware of the other repo, I can absolutely do a PR over there. Making icons for the other 3 games shouldn't be an issue either, it'd just take me some time to come up with a design that works for those (in chocolate).",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1078,2018-08-14T16:39:05Z,,2019-11-17T22:04:55Z,OPEN,False,112,97,23,https://github.com/snwh,New icon assets,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1078,https://github.com/jmtd,7,https://github.com/chocolate-doom/chocolate-doom/pull/1078#issuecomment-413304597,"Hello, I've been creating icons for desktop (mostly Linux) applications for years and as an occasional user of this project and I'd thought propose and icon improvement!

My makefile-fu isn't the greatest so do let me know if this is busted (I was already having difficulties getting it to build on Fedora due to lack of proper dependencies) my strengths are in icon asset creation not deployment.","@fragglet ah I wasn't aware of the other repo, I can absolutely do a PR over there. Making icons for the other 3 games shouldn't be an issue either, it'd just take me some time to come up with a design that works for those (in chocolate).

Whilst I agree that we'll need the full suite of game icons, it might make sense to iterate on the ""D"" for doom first, then once that's pretty much final adapt it to the other games.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1078,2018-08-14T16:39:05Z,,2019-11-17T22:04:55Z,OPEN,False,112,97,23,https://github.com/snwh,New icon assets,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1078,https://github.com/fabiangreffrath,8,https://github.com/chocolate-doom/chocolate-doom/pull/1078#issuecomment-413315278,"Hello, I've been creating icons for desktop (mostly Linux) applications for years and as an occasional user of this project and I'd thought propose and icon improvement!

My makefile-fu isn't the greatest so do let me know if this is busted (I was already having difficulties getting it to build on Fedora due to lack of proper dependencies) my strengths are in icon asset creation not deployment.",We haven't made it this far in the past 10 years with the current icon. Why should this design be a better starting point?,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1078,2018-08-14T16:39:05Z,,2019-11-17T22:04:55Z,OPEN,False,112,97,23,https://github.com/snwh,New icon assets,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1078,https://github.com/Kroc,9,https://github.com/chocolate-doom/chocolate-doom/pull/1078#issuecomment-413324203,"Hello, I've been creating icons for desktop (mostly Linux) applications for years and as an occasional user of this project and I'd thought propose and icon improvement!

My makefile-fu isn't the greatest so do let me know if this is busted (I was already having difficulties getting it to build on Fedora due to lack of proper dependencies) my strengths are in icon asset creation not deployment.",Better scalability. Higher DPI / 4K screens means that OSes are asking for 512x521 icons. Something that is easier to scale and applies consistently across the range of engines would be good. I like what @snwh has done here. It could be combined with the vector spanner / wrench that appears in the #965 / #1020,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1078,2018-08-14T16:39:05Z,,2019-11-17T22:04:55Z,OPEN,False,112,97,23,https://github.com/snwh,New icon assets,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1078,https://github.com/jmtd,10,https://github.com/chocolate-doom/chocolate-doom/pull/1078#issuecomment-413440027,"Hello, I've been creating icons for desktop (mostly Linux) applications for years and as an occasional user of this project and I'd thought propose and icon improvement!

My makefile-fu isn't the greatest so do let me know if this is busted (I was already having difficulties getting it to build on Fedora due to lack of proper dependencies) my strengths are in icon asset creation not deployment.","We haven't made it this far in the past 10 years with the current icon. Why should this design be a better starting point?

I'm sorry I don't understand.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1078,2018-08-14T16:39:05Z,,2019-11-17T22:04:55Z,OPEN,False,112,97,23,https://github.com/snwh,New icon assets,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1078,https://github.com/fabiangreffrath,11,https://github.com/chocolate-doom/chocolate-doom/pull/1078#issuecomment-413665710,"Hello, I've been creating icons for desktop (mostly Linux) applications for years and as an occasional user of this project and I'd thought propose and icon improvement!

My makefile-fu isn't the greatest so do let me know if this is busted (I was already having difficulties getting it to build on Fedora due to lack of proper dependencies) my strengths are in icon asset creation not deployment.","I'm sorry I don't understand.

Ah, sorry. So, you suggested to start over with a new icon for Doom first and then adapt it to the other games. Well, we have an icon for Doom for at least 10 years now and yet we failed to adapt it to the other games. There were attempts in the other two issues that I mentioned, but even these have not yet gained much attention.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1078,2018-08-14T16:39:05Z,,2019-11-17T22:04:55Z,OPEN,False,112,97,23,https://github.com/snwh,New icon assets,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1078,https://github.com/fragglet,12,https://github.com/chocolate-doom/chocolate-doom/pull/1078#issuecomment-414019486,"Hello, I've been creating icons for desktop (mostly Linux) applications for years and as an occasional user of this project and I'd thought propose and icon improvement!

My makefile-fu isn't the greatest so do let me know if this is busted (I was already having difficulties getting it to build on Fedora due to lack of proper dependencies) my strengths are in icon asset creation not deployment.","@fragglet ah I wasn't aware of the other repo, I can absolutely do a PR over there.

Let's do it there first, and come back to this (feel free to leave this one open).
There are a few occurrences of the icon in this repo which will need to be fixed: icon.c and setup_icon.c (and you deleted the convert script which generates them?); and pkg/osx has some Mac format versions of the icons which will need updating.

Making icons for the other 3 games shouldn't be an issue either, it'd just take me some time to come up with a design that works for those (in chocolate).

Fantastic! Let's get the initial part merged first and then we can do that next. WDYT?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1078,2018-08-14T16:39:05Z,,2019-11-17T22:04:55Z,OPEN,False,112,97,23,https://github.com/snwh,New icon assets,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1078,https://github.com/fabiangreffrath,13,https://github.com/chocolate-doom/chocolate-doom/pull/1078#issuecomment-414029563,"Hello, I've been creating icons for desktop (mostly Linux) applications for years and as an occasional user of this project and I'd thought propose and icon improvement!

My makefile-fu isn't the greatest so do let me know if this is busted (I was already having difficulties getting it to build on Fedora due to lack of proper dependencies) my strengths are in icon asset creation not deployment.","With this approach, the chocolate-setup icon will always remain bound to the Doom icon's ""D"".",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1078,2018-08-14T16:39:05Z,,2019-11-17T22:04:55Z,OPEN,False,112,97,23,https://github.com/snwh,New icon assets,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1078,https://github.com/jmtd,14,https://github.com/chocolate-doom/chocolate-doom/pull/1078#issuecomment-443457349,"Hello, I've been creating icons for desktop (mostly Linux) applications for years and as an occasional user of this project and I'd thought propose and icon improvement!

My makefile-fu isn't the greatest so do let me know if this is busted (I was already having difficulties getting it to build on Fedora due to lack of proper dependencies) my strengths are in icon asset creation not deployment.","Hey @snwh it seems you never got around to raising a PR for this at https://github.com/chocolate-doom/icon , are you still happy to do this?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1079,2018-08-15T16:55:15Z,2018-08-18T04:47:56Z,2018-08-18T04:47:56Z,MERGED,True,20,20,14,https://github.com/hifi,setup: Use proper function signatures for callbacks,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1079,https://github.com/hifi,1,https://github.com/chocolate-doom/chocolate-doom/pull/1079,This prevents the setup main menu from crashing when the caller does not clean the stack.,This prevents the setup main menu from crashing when the caller does not clean the stack.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1079,2018-08-15T16:55:15Z,2018-08-18T04:47:56Z,2018-08-18T04:47:56Z,MERGED,True,20,20,14,https://github.com/hifi,setup: Use proper function signatures for callbacks,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1079,https://github.com/jmtd,2,https://github.com/chocolate-doom/chocolate-doom/pull/1079#issuecomment-413304106,This prevents the setup main menu from crashing when the caller does not clean the stack.,I'm guessing you hit this whilst working on #1076?,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1079,2018-08-15T16:55:15Z,2018-08-18T04:47:56Z,2018-08-18T04:47:56Z,MERGED,True,20,20,14,https://github.com/hifi,setup: Use proper function signatures for callbacks,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1079,https://github.com/hifi,3,https://github.com/chocolate-doom/chocolate-doom/pull/1079#issuecomment-413406493,This prevents the setup main menu from crashing when the caller does not clean the stack.,This was uncovered when working on #538.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1079,2018-08-15T16:55:15Z,2018-08-18T04:47:56Z,2018-08-18T04:47:56Z,MERGED,True,20,20,14,https://github.com/hifi,setup: Use proper function signatures for callbacks,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1079,https://github.com/turol,4,https://github.com/chocolate-doom/chocolate-doom/pull/1079#issuecomment-413830377,This prevents the setup main menu from crashing when the caller does not clean the stack.,Casting a function pointer to a different type and calling it is UB in C so emscripten is allowed to crash here. This patch looks correct to me.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1081,2018-08-24T13:29:49Z,2018-10-01T02:53:45Z,2018-10-01T02:53:50Z,MERGED,True,54,47,1,https://github.com/hifi,doom: Refactor wipe to advance once per frame,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1081,https://github.com/hifi,1,https://github.com/chocolate-doom/chocolate-doom/pull/1081,"This refactors wipe to run once per frame instead of preventing the main loop from running while the screen is being wiped.
Additionally all code required to run a single frame has been moved into D_RunFrame as preparation for #538.
I thought it would be easier to work the feature in as smaller easy to review PRs. The wipe/melt effect works just fine for me with these changes.
I know it's kind of wonky how I did this but please give feedback how you would like it being improved.","This refactors wipe to run once per frame instead of preventing the main loop from running while the screen is being wiped.
Additionally all code required to run a single frame has been moved into D_RunFrame as preparation for #538.
I thought it would be easier to work the feature in as smaller easy to review PRs. The wipe/melt effect works just fine for me with these changes.
I know it's kind of wonky how I did this but please give feedback how you would like it being improved.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1081,2018-08-24T13:29:49Z,2018-10-01T02:53:45Z,2018-10-01T02:53:50Z,MERGED,True,54,47,1,https://github.com/hifi,doom: Refactor wipe to advance once per frame,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1081,https://github.com/fabiangreffrath,2,https://github.com/chocolate-doom/chocolate-doom/pull/1081#issuecomment-415766077,"This refactors wipe to run once per frame instead of preventing the main loop from running while the screen is being wiped.
Additionally all code required to run a single frame has been moved into D_RunFrame as preparation for #538.
I thought it would be easier to work the feature in as smaller easy to review PRs. The wipe/melt effect works just fine for me with these changes.
I know it's kind of wonky how I did this but please give feedback how you would like it being improved.",Does this keep multi-level demos in sync if revenants are involved?,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1081,2018-08-24T13:29:49Z,2018-10-01T02:53:45Z,2018-10-01T02:53:50Z,MERGED,True,54,47,1,https://github.com/hifi,doom: Refactor wipe to advance once per frame,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1081,https://github.com/hifi,3,https://github.com/chocolate-doom/chocolate-doom/pull/1081#issuecomment-415766907,"This refactors wipe to run once per frame instead of preventing the main loop from running while the screen is being wiped.
Additionally all code required to run a single frame has been moved into D_RunFrame as preparation for #538.
I thought it would be easier to work the feature in as smaller easy to review PRs. The wipe/melt effect works just fine for me with these changes.
I know it's kind of wonky how I did this but please give feedback how you would like it being improved.","I have not tested that but as far as the changes go they shouldn't effectively change anything. Nothing else is being run during wipe than the same wipe code that was before in-lined.
Is there a demo somewhere I could run? I'm not a regular Doom developer so compatibility testing is rather new to me.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1081,2018-08-24T13:29:49Z,2018-10-01T02:53:45Z,2018-10-01T02:53:50Z,MERGED,True,54,47,1,https://github.com/hifi,doom: Refactor wipe to advance once per frame,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1081,https://github.com/fabiangreffrath,4,https://github.com/chocolate-doom/chocolate-doom/pull/1081#issuecomment-416059319,"This refactors wipe to run once per frame instead of preventing the main loop from running while the screen is being wiped.
Additionally all code required to run a single frame has been moved into D_RunFrame as preparation for #538.
I thought it would be easier to work the feature in as smaller easy to review PRs. The wipe/melt effect works just fine for me with these changes.
I know it's kind of wonky how I did this but please give feedback how you would like it being improved.","You could try with e.g. 30uvmax4.lmp (or any other complete speed-run recorded with Doom 2 v1.9) from this page:
http://doomedsda.us/wad945m240.html",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1081,2018-08-24T13:29:49Z,2018-10-01T02:53:45Z,2018-10-01T02:53:50Z,MERGED,True,54,47,1,https://github.com/hifi,doom: Refactor wipe to advance once per frame,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1081,https://github.com/hifi,5,https://github.com/chocolate-doom/chocolate-doom/pull/1081#issuecomment-416204934,"This refactors wipe to run once per frame instead of preventing the main loop from running while the screen is being wiped.
Additionally all code required to run a single frame has been moved into D_RunFrame as preparation for #538.
I thought it would be easier to work the feature in as smaller easy to review PRs. The wipe/melt effect works just fine for me with these changes.
I know it's kind of wonky how I did this but please give feedback how you would like it being improved.",I ran that demo in the background for over 20 levels and I didn't notice it being off or crashing during that time. Watched the screen being wiped between levels multiple times but didn't follow the game itself that much.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1081,2018-08-24T13:29:49Z,2018-10-01T02:53:45Z,2018-10-01T02:53:50Z,MERGED,True,54,47,1,https://github.com/hifi,doom: Refactor wipe to advance once per frame,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1081,https://github.com/chungy,6,https://github.com/chocolate-doom/chocolate-doom/pull/1081#issuecomment-416400768,"This refactors wipe to run once per frame instead of preventing the main loop from running while the screen is being wiped.
Additionally all code required to run a single frame has been moved into D_RunFrame as preparation for #538.
I thought it would be easier to work the feature in as smaller easy to review PRs. The wipe/melt effect works just fine for me with these changes.
I know it's kind of wonky how I did this but please give feedback how you would like it being improved.",Seems to complete fine (used -timedemo).,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1081,2018-08-24T13:29:49Z,2018-10-01T02:53:45Z,2018-10-01T02:53:50Z,MERGED,True,54,47,1,https://github.com/hifi,doom: Refactor wipe to advance once per frame,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1081,https://github.com/fragglet,7,https://github.com/chocolate-doom/chocolate-doom/pull/1081#issuecomment-425776954,"This refactors wipe to run once per frame instead of preventing the main loop from running while the screen is being wiped.
Additionally all code required to run a single frame has been moved into D_RunFrame as preparation for #538.
I thought it would be easier to work the feature in as smaller easy to review PRs. The wipe/melt effect works just fine for me with these changes.
I know it's kind of wonky how I did this but please give feedback how you would like it being improved.",Sorry for forgetting about this PR.,True,{'THUMBS_UP': ['https://github.com/hifi']}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1084,2018-09-16T12:20:03Z,2018-09-17T00:29:53Z,2018-09-17T19:04:48Z,MERGED,True,156,68,6,https://github.com/chungy,Use pandoc to generate HTML documentation files in win32 packages,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/1084,https://github.com/chungy,1,https://github.com/chocolate-doom/chocolate-doom/pull/1084,"This was mentioned in some conversation I cannot find, but it was suggested in the past to generate HTML instead of *.txt files in the win32 zip files, and these commits put in place everything to do that.
It requires pandoc to be installed when using make in pkg/win32, and being a bit heavy of a build-time dependency, I also made sure that all its commands are prefixed with - so make doesn't consider it an error if the command doesn't exist -- the utility for using pkg/win32 on Windows to generate a directory where chocolate-doom has all its runtime dependencies isn't diminished this way. I do hope it isn't considered critical if there is now a way for no documentation to be included (no pandoc installed).","This was mentioned in some conversation I cannot find, but it was suggested in the past to generate HTML instead of *.txt files in the win32 zip files, and these commits put in place everything to do that.
It requires pandoc to be installed when using make in pkg/win32, and being a bit heavy of a build-time dependency, I also made sure that all its commands are prefixed with - so make doesn't consider it an error if the command doesn't exist -- the utility for using pkg/win32 on Windows to generate a directory where chocolate-doom has all its runtime dependencies isn't diminished this way. I do hope it isn't considered critical if there is now a way for no documentation to be included (no pandoc installed).",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1084,2018-09-16T12:20:03Z,2018-09-17T00:29:53Z,2018-09-17T19:04:48Z,MERGED,True,156,68,6,https://github.com/chungy,Use pandoc to generate HTML documentation files in win32 packages,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/1084,https://github.com/fragglet,2,https://github.com/chocolate-doom/chocolate-doom/pull/1084#issuecomment-421859943,"This was mentioned in some conversation I cannot find, but it was suggested in the past to generate HTML instead of *.txt files in the win32 zip files, and these commits put in place everything to do that.
It requires pandoc to be installed when using make in pkg/win32, and being a bit heavy of a build-time dependency, I also made sure that all its commands are prefixed with - so make doesn't consider it an error if the command doesn't exist -- the utility for using pkg/win32 on Windows to generate a directory where chocolate-doom has all its runtime dependencies isn't diminished this way. I do hope it isn't considered critical if there is now a way for no documentation to be included (no pandoc installed).","Looks great, thanks!
I've made sure pandoc is installed on the build server before merging.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1084,2018-09-16T12:20:03Z,2018-09-17T00:29:53Z,2018-09-17T19:04:48Z,MERGED,True,156,68,6,https://github.com/chungy,Use pandoc to generate HTML documentation files in win32 packages,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/1084,https://github.com/chungy,3,https://github.com/chocolate-doom/chocolate-doom/pull/1084#issuecomment-422133104,"This was mentioned in some conversation I cannot find, but it was suggested in the past to generate HTML instead of *.txt files in the win32 zip files, and these commits put in place everything to do that.
It requires pandoc to be installed when using make in pkg/win32, and being a bit heavy of a build-time dependency, I also made sure that all its commands are prefixed with - so make doesn't consider it an error if the command doesn't exist -- the utility for using pkg/win32 on Windows to generate a directory where chocolate-doom has all its runtime dependencies isn't diminished this way. I do hope it isn't considered critical if there is now a way for no documentation to be included (no pandoc installed).","Looks like the build server isn't getting any HTML files output. It may be because I developed with pandoc 2.2 (from Arch) and the server uses (I believe) Debian stretch with 1.x. Fixing it would seem to be trivial by replacing gfm with markdown_github (which produces a warning about a deprecated name in 2.x), but at the same time it doesn't support the \| escape construct for tables, so CMDLINE ends up being wrong.
I would recommend manually installing a newer version. They provide a *.deb at https://github.com/jgm/pandoc/releases/latest",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1089,2018-10-01T22:43:12Z,2018-10-02T21:05:10Z,2018-10-02T21:05:27Z,MERGED,True,14,1,3,https://github.com/mfrancis95,Gracefully error out when player starts are missing,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1089,https://github.com/mfrancis95,1,https://github.com/chocolate-doom/chocolate-doom/pull/1089,"Fixes #1049, including the multiplayer case.","Fixes #1049, including the multiplayer case.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1089,2018-10-01T22:43:12Z,2018-10-02T21:05:10Z,2018-10-02T21:05:27Z,MERGED,True,14,1,3,https://github.com/mfrancis95,Gracefully error out when player starts are missing,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1089,https://github.com/chungy,2,https://github.com/chocolate-doom/chocolate-doom/pull/1089#issuecomment-426430120,"Fixes #1049, including the multiplayer case.",Thanks for this!,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1090,2018-10-02T05:53:33Z,2018-10-02T21:05:11Z,2018-10-05T11:22:24Z,MERGED,True,4,0,1,https://github.com/mfrancis95,Fix SIGINT being ignored when Dehacked SHA1 warning dialog is open,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1090,https://github.com/mfrancis95,1,https://github.com/chocolate-doom/chocolate-doom/pull/1090,Fixes #1048.,Fixes #1048.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1090,2018-10-02T05:53:33Z,2018-10-02T21:05:11Z,2018-10-05T11:22:24Z,MERGED,True,4,0,1,https://github.com/mfrancis95,Fix SIGINT being ignored when Dehacked SHA1 warning dialog is open,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1090,https://github.com/mfrancis95,2,https://github.com/chocolate-doom/chocolate-doom/pull/1090#issuecomment-426279199,Fixes #1048.,Not sure why the build is failing because it compiles fine for me.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1090,2018-10-02T05:53:33Z,2018-10-02T21:05:11Z,2018-10-05T11:22:24Z,MERGED,True,4,0,1,https://github.com/mfrancis95,Fix SIGINT being ignored when Dehacked SHA1 warning dialog is open,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1090,https://github.com/AXDOOMER,3,https://github.com/chocolate-doom/chocolate-doom/pull/1090#issuecomment-426306775,Fixes #1048.,Could be because SDL_HINT_NO_SIGNAL_HANDLERS is only available since SDL 2.0.4 and Chocolate-Doom uses an older version.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1090,2018-10-02T05:53:33Z,2018-10-02T21:05:11Z,2018-10-05T11:22:24Z,MERGED,True,4,0,1,https://github.com/mfrancis95,Fix SIGINT being ignored when Dehacked SHA1 warning dialog is open,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1090,https://github.com/mfrancis95,4,https://github.com/chocolate-doom/chocolate-doom/pull/1090#issuecomment-426422743,Fixes #1048.,Fixed.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1090,2018-10-02T05:53:33Z,2018-10-02T21:05:11Z,2018-10-05T11:22:24Z,MERGED,True,4,0,1,https://github.com/mfrancis95,Fix SIGINT being ignored when Dehacked SHA1 warning dialog is open,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1090,https://github.com/chungy,5,https://github.com/chocolate-doom/chocolate-doom/pull/1090#issuecomment-426430025,Fixes #1048.,"Looks good, thanks :)",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1094,2018-10-11T06:23:39Z,2018-10-14T14:59:28Z,2018-10-14T14:59:31Z,MERGED,True,3,0,1,https://github.com/mfrancis95,Heretic: Call W_GenerateHashTable(),1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1094,https://github.com/mfrancis95,1,https://github.com/chocolate-doom/chocolate-doom/pull/1094,One part of #976.,One part of #976.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1094,2018-10-11T06:23:39Z,2018-10-14T14:59:28Z,2018-10-14T14:59:31Z,MERGED,True,3,0,1,https://github.com/mfrancis95,Heretic: Call W_GenerateHashTable(),1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1094,https://github.com/fragglet,2,https://github.com/chocolate-doom/chocolate-doom/pull/1094#issuecomment-429633233,One part of #976.,Thanks!,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1096,2018-10-19T21:34:13Z,2018-11-28T05:35:55Z,2018-11-28T05:36:00Z,MERGED,True,3,0,1,https://github.com/AXDOOMER,Hexen: Call W_GenerateHashTable(),1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1096,https://github.com/AXDOOMER,1,https://github.com/chocolate-doom/chocolate-doom/pull/1096,"Since this has been done for Heretic, do it for Hexen.
This fixes #976. I call W_GenerateHashTable() once the main WAD functions have been called and the command line args have been parsed, following the way it's done for other games.","Since this has been done for Heretic, do it for Hexen.
This fixes #976. I call W_GenerateHashTable() once the main WAD functions have been called and the command line args have been parsed, following the way it's done for other games.",True,{'THUMBS_UP': ['https://github.com/mfrancis95']}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1096,2018-10-19T21:34:13Z,2018-11-28T05:35:55Z,2018-11-28T05:36:00Z,MERGED,True,3,0,1,https://github.com/AXDOOMER,Hexen: Call W_GenerateHashTable(),1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1096,https://github.com/AXDOOMER,2,https://github.com/chocolate-doom/chocolate-doom/pull/1096#issuecomment-441420795,"Since this has been done for Heretic, do it for Hexen.
This fixes #976. I call W_GenerateHashTable() once the main WAD functions have been called and the command line args have been parsed, following the way it's done for other games.",@fragglet  Please merge this PR.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1096,2018-10-19T21:34:13Z,2018-11-28T05:35:55Z,2018-11-28T05:36:00Z,MERGED,True,3,0,1,https://github.com/AXDOOMER,Hexen: Call W_GenerateHashTable(),1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1096,https://github.com/fragglet,3,https://github.com/chocolate-doom/chocolate-doom/pull/1096#issuecomment-442326008,"Since this has been done for Heretic, do it for Hexen.
This fixes #976. I call W_GenerateHashTable() once the main WAD functions have been called and the command line args have been parsed, following the way it's done for other games.",Thanks for ping,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1097,2018-10-21T06:15:06Z,2018-10-21T21:36:57Z,2018-10-21T21:37:01Z,MERGED,True,1,1,1,https://github.com/devnexen,Update angle_t type.,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1097,https://github.com/devnexen,1,https://github.com/chocolate-doom/chocolate-doom/pull/1097,Typically to avoid few overflows.,Typically to avoid few overflows.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1097,2018-10-21T06:15:06Z,2018-10-21T21:36:57Z,2018-10-21T21:37:01Z,MERGED,True,1,1,1,https://github.com/devnexen,Update angle_t type.,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1097,https://github.com/fabiangreffrath,2,https://github.com/chocolate-doom/chocolate-doom/pull/1097#issuecomment-431706230,Typically to avoid few overflows.,Thanks!,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1099,2018-10-29T20:22:08Z,2018-10-29T21:22:03Z,2018-10-29T21:22:09Z,MERGED,True,5,0,3,https://github.com/devnexen,cmake build fix,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1099,https://github.com/devnexen,1,https://github.com/chocolate-doom/chocolate-doom/pull/1099,undefined references due to missing bits.,undefined references due to missing bits.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1099,2018-10-29T20:22:08Z,2018-10-29T21:22:03Z,2018-10-29T21:22:09Z,MERGED,True,5,0,3,https://github.com/devnexen,cmake build fix,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1099,https://github.com/fragglet,2,https://github.com/chocolate-doom/chocolate-doom/pull/1099#issuecomment-434085094,undefined references due to missing bits.,Thanks.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1100,2018-11-03T13:45:12Z,2018-11-09T03:25:34Z,2018-11-20T16:29:08Z,MERGED,True,11,0,1,https://github.com/chungy,Add a -version parameter like most programs have,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1100,https://github.com/chungy,1,https://github.com/chocolate-doom/chocolate-doom/pull/1100,"Supports both -version and --version, even though the later breaks
the normal convention of Doom parameters, it is common enough with
any general program that it should be useful to include in this.
Only thing I'm uncertain about is putting this into i_main.c, but I don't know any better place for it to go. :)","Supports both -version and --version, even though the later breaks
the normal convention of Doom parameters, it is common enough with
any general program that it should be useful to include in this.
Only thing I'm uncertain about is putting this into i_main.c, but I don't know any better place for it to go. :)",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1100,2018-11-03T13:45:12Z,2018-11-09T03:25:34Z,2018-11-20T16:29:08Z,MERGED,True,11,0,1,https://github.com/chungy,Add a -version parameter like most programs have,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1100,https://github.com/chungy,2,https://github.com/chocolate-doom/chocolate-doom/pull/1100#issuecomment-435592245,"Supports both -version and --version, even though the later breaks
the normal convention of Doom parameters, it is common enough with
any general program that it should be useful to include in this.
Only thing I'm uncertain about is putting this into i_main.c, but I don't know any better place for it to go. :)","In the printf? Probably not. I thought it'd be nice, but can be removed :)",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1100,2018-11-03T13:45:12Z,2018-11-09T03:25:34Z,2018-11-20T16:29:08Z,MERGED,True,11,0,1,https://github.com/chungy,Add a -version parameter like most programs have,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1100,https://github.com/JNechaevsky,3,https://github.com/chocolate-doom/chocolate-doom/pull/1100#issuecomment-435596882,"Supports both -version and --version, even though the later breaks
the normal convention of Doom parameters, it is common enough with
any general program that it should be useful to include in this.
Only thing I'm uncertain about is putting this into i_main.c, but I don't know any better place for it to go. :)","Probably it is worth to use I_Error, otherwise there will no be any message on Windows.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1100,2018-11-03T13:45:12Z,2018-11-09T03:25:34Z,2018-11-20T16:29:08Z,MERGED,True,11,0,1,https://github.com/chungy,Add a -version parameter like most programs have,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1100,https://github.com/fragglet,4,https://github.com/chocolate-doom/chocolate-doom/pull/1100#issuecomment-436638412,"Supports both -version and --version, even though the later breaks
the normal convention of Doom parameters, it is common enough with
any general program that it should be useful to include in this.
Only thing I'm uncertain about is putting this into i_main.c, but I don't know any better place for it to go. :)",I suggest you just use puts().,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1100,2018-11-03T13:45:12Z,2018-11-09T03:25:34Z,2018-11-20T16:29:08Z,MERGED,True,11,0,1,https://github.com/chungy,Add a -version parameter like most programs have,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1100,https://github.com/chungy,5,https://github.com/chocolate-doom/chocolate-doom/pull/1100#issuecomment-437139676,"Supports both -version and --version, even though the later breaks
the normal convention of Doom parameters, it is common enough with
any general program that it should be useful to include in this.
Only thing I'm uncertain about is putting this into i_main.c, but I don't know any better place for it to go. :)",Was my first instinct :) sure,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1100,2018-11-03T13:45:12Z,2018-11-09T03:25:34Z,2018-11-20T16:29:08Z,MERGED,True,11,0,1,https://github.com/chungy,Add a -version parameter like most programs have,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1100,https://github.com/chungy,6,https://github.com/chocolate-doom/chocolate-doom/pull/1100#issuecomment-437237654,"Supports both -version and --version, even though the later breaks
the normal convention of Doom parameters, it is common enough with
any general program that it should be useful to include in this.
Only thing I'm uncertain about is putting this into i_main.c, but I don't know any better place for it to go. :)","It doesn't seem there's much further objection, I was mainly concerned about where to place this argument but that doesn't appear to be contested either. Thanks for all the input!",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1100,2018-11-03T13:45:12Z,2018-11-09T03:25:34Z,2018-11-20T16:29:08Z,MERGED,True,11,0,1,https://github.com/chungy,Add a -version parameter like most programs have,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1100,https://github.com/jmtd,7,https://github.com/chocolate-doom/chocolate-doom/pull/1100#issuecomment-439000709,"Supports both -version and --version, even though the later breaks
the normal convention of Doom parameters, it is common enough with
any general program that it should be useful to include in this.
Only thing I'm uncertain about is putting this into i_main.c, but I don't know any better place for it to go. :)","Here's my objection, albeit too late: --version is pointless clutter. The doom convention is single dash, so you should stick to that. long opts are a GNU thing.
I also think, perhaps as a project we shouldn't merge our own PRs.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1100,2018-11-03T13:45:12Z,2018-11-09T03:25:34Z,2018-11-20T16:29:08Z,MERGED,True,11,0,1,https://github.com/chungy,Add a -version parameter like most programs have,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1100,https://github.com/fabiangreffrath,8,https://github.com/chocolate-doom/chocolate-doom/pull/1100#issuecomment-439326939,"Supports both -version and --version, even though the later breaks
the normal convention of Doom parameters, it is common enough with
any general program that it should be useful to include in this.
Only thing I'm uncertain about is putting this into i_main.c, but I don't know any better place for it to go. :)","I also think, perhaps as a project we shouldn't merge our own PRs.

But do what instead?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1100,2018-11-03T13:45:12Z,2018-11-09T03:25:34Z,2018-11-20T16:29:08Z,MERGED,True,11,0,1,https://github.com/chungy,Add a -version parameter like most programs have,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1100,https://github.com/jmtd,9,https://github.com/chocolate-doom/chocolate-doom/pull/1100#issuecomment-440336820,"Supports both -version and --version, even though the later breaks
the normal convention of Doom parameters, it is common enough with
any general program that it should be useful to include in this.
Only thing I'm uncertain about is putting this into i_main.c, but I don't know any better place for it to go. :)","But do what instead?

Sorry. I still have the mental model of GH from before reviews. In which case, I always thought a reviewer should merge PRs rather than the author. But, I guess I need to catch up with the modern day, where (possibly multiple) reviewers approve PRs, and then it's fine for the author to merge.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1103,2018-11-08T19:02:35Z,2018-11-08T19:46:54Z,2018-11-08T19:47:04Z,MERGED,True,1,0,1,https://github.com/mfrancis95,Fix memory leak related to Steam directories,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1103,https://github.com/mfrancis95,1,https://github.com/chocolate-doom/chocolate-doom/pull/1103,"Valgrind report (with --leak-check=full) before the fix:
==30991== 40 bytes in 1 blocks are definitely lost in loss record 70 of 277
==30991==    at 0x4C2FB0F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==30991==    by 0x11B797: M_StringJoin (m_misc.c:575)
==30991==    by 0x11CCC6: AddSteamDirs (d_iwad.c:669)
==30991==    by 0x11CCC6: BuildIWADDirList.part.0 (d_iwad.c:735)
==30991==    by 0x11D032: BuildIWADDirList (d_iwad.c:484)
==30991==    by 0x11D032: D_FindIWAD (d_iwad.c:864)
==30991==    by 0x13840A: D_DoomMain (d_main.c:1415)
==30991==    by 0x11A2FD: main (i_main.c:52)","Valgrind report (with --leak-check=full) before the fix:
==30991== 40 bytes in 1 blocks are definitely lost in loss record 70 of 277
==30991==    at 0x4C2FB0F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==30991==    by 0x11B797: M_StringJoin (m_misc.c:575)
==30991==    by 0x11CCC6: AddSteamDirs (d_iwad.c:669)
==30991==    by 0x11CCC6: BuildIWADDirList.part.0 (d_iwad.c:735)
==30991==    by 0x11D032: BuildIWADDirList (d_iwad.c:484)
==30991==    by 0x11D032: D_FindIWAD (d_iwad.c:864)
==30991==    by 0x13840A: D_DoomMain (d_main.c:1415)
==30991==    by 0x11A2FD: main (i_main.c:52)",True,{'THUMBS_UP': ['https://github.com/fragglet']}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1103,2018-11-08T19:02:35Z,2018-11-08T19:46:54Z,2018-11-08T19:47:04Z,MERGED,True,1,0,1,https://github.com/mfrancis95,Fix memory leak related to Steam directories,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1103,https://github.com/fabiangreffrath,2,https://github.com/chocolate-doom/chocolate-doom/pull/1103#issuecomment-437131573,"Valgrind report (with --leak-check=full) before the fix:
==30991== 40 bytes in 1 blocks are definitely lost in loss record 70 of 277
==30991==    at 0x4C2FB0F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==30991==    by 0x11B797: M_StringJoin (m_misc.c:575)
==30991==    by 0x11CCC6: AddSteamDirs (d_iwad.c:669)
==30991==    by 0x11CCC6: BuildIWADDirList.part.0 (d_iwad.c:735)
==30991==    by 0x11D032: BuildIWADDirList (d_iwad.c:484)
==30991==    by 0x11D032: D_FindIWAD (d_iwad.c:864)
==30991==    by 0x13840A: D_DoomMain (d_main.c:1415)
==30991==    by 0x11A2FD: main (i_main.c:52)",Thanks!,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1107,2018-11-20T16:32:03Z,2019-04-03T14:01:10Z,2019-04-03T14:01:11Z,CLOSED,False,1,1,1,https://github.com/jmtd,Remove long-opt variant of version,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1107,https://github.com/jmtd,1,https://github.com/chocolate-doom/chocolate-doom/pull/1107,"Let's stick to single-dash delimited arguments, in common with the
existing ones. Double-dash are a GNU convention for ""long options"",
typically spelled out (so, -v or --version). We don't use the GNU
conventions in this project. Having the second option is out of
place and potentially causes unnecessary complexity in other places
(shell completion, documentation…)","Let's stick to single-dash delimited arguments, in common with the
existing ones. Double-dash are a GNU convention for ""long options"",
typically spelled out (so, -v or --version). We don't use the GNU
conventions in this project. Having the second option is out of
place and potentially causes unnecessary complexity in other places
(shell completion, documentation…)",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1107,2018-11-20T16:32:03Z,2019-04-03T14:01:10Z,2019-04-03T14:01:11Z,CLOSED,False,1,1,1,https://github.com/jmtd,Remove long-opt variant of version,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1107,https://github.com/jmtd,2,https://github.com/chocolate-doom/chocolate-doom/pull/1107#issuecomment-440338340,"Let's stick to single-dash delimited arguments, in common with the
existing ones. Double-dash are a GNU convention for ""long options"",
typically spelled out (so, -v or --version). We don't use the GNU
conventions in this project. Having the second option is out of
place and potentially causes unnecessary complexity in other places
(shell completion, documentation…)",I just want to quickly add that I think adding -version was a great idea and long overdue and thank you @chungy for doing it,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1107,2018-11-20T16:32:03Z,2019-04-03T14:01:10Z,2019-04-03T14:01:11Z,CLOSED,False,1,1,1,https://github.com/jmtd,Remove long-opt variant of version,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1107,https://github.com/chungy,3,https://github.com/chocolate-doom/chocolate-doom/pull/1107#issuecomment-440449474,"Let's stick to single-dash delimited arguments, in common with the
existing ones. Double-dash are a GNU convention for ""long options"",
typically spelled out (so, -v or --version). We don't use the GNU
conventions in this project. Having the second option is out of
place and potentially causes unnecessary complexity in other places
(shell completion, documentation…)","My own rebuttal here: I was aware of the break with Doom convention, I noted as much in my commit message. However, I also felt that it is common enough to expect --version generally, that breaking the convention in this singular instance is acceptable. I don't think being aware of Doom conventions necessarily should be a requirement to find its version number.
Even as far as completions or documentation goes, perhaps just by accident of only looking for the first instance of a string match, but only the -version variant of the option is actually documented or recorded in either of these.
My convictions on this issue are not strong, if fraggle agrees with you I won't be upset at all :)",True,{'THUMBS_UP': ['https://github.com/jmtd']}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1107,2018-11-20T16:32:03Z,2019-04-03T14:01:10Z,2019-04-03T14:01:11Z,CLOSED,False,1,1,1,https://github.com/jmtd,Remove long-opt variant of version,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1107,https://github.com/jmtd,4,https://github.com/chocolate-doom/chocolate-doom/pull/1107#issuecomment-440627853,"Let's stick to single-dash delimited arguments, in common with the
existing ones. Double-dash are a GNU convention for ""long options"",
typically spelled out (so, -v or --version). We don't use the GNU
conventions in this project. Having the second option is out of
place and potentially causes unnecessary complexity in other places
(shell completion, documentation…)","My convictions on this issue are not strong, if fraggle agrees with you I won't be upset at all :)

Likewise, I'll happily leave it to @fragglet or @fabiangreffrath to decide one way or another. Thanks for the rebuttal points :)",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1107,2018-11-20T16:32:03Z,2019-04-03T14:01:10Z,2019-04-03T14:01:11Z,CLOSED,False,1,1,1,https://github.com/jmtd,Remove long-opt variant of version,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1107,https://github.com/turol,5,https://github.com/chocolate-doom/chocolate-doom/pull/1107#issuecomment-440628980,"Let's stick to single-dash delimited arguments, in common with the
existing ones. Double-dash are a GNU convention for ""long options"",
typically spelled out (so, -v or --version). We don't use the GNU
conventions in this project. Having the second option is out of
place and potentially causes unnecessary complexity in other places
(shell completion, documentation…)",FWIW I support keeping the long version.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1107,2018-11-20T16:32:03Z,2019-04-03T14:01:10Z,2019-04-03T14:01:11Z,CLOSED,False,1,1,1,https://github.com/jmtd,Remove long-opt variant of version,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1107,https://github.com/fabiangreffrath,6,https://github.com/chocolate-doom/chocolate-doom/pull/1107#issuecomment-440694317,"Let's stick to single-dash delimited arguments, in common with the
existing ones. Double-dash are a GNU convention for ""long options"",
typically spelled out (so, -v or --version). We don't use the GNU
conventions in this project. Having the second option is out of
place and potentially causes unnecessary complexity in other places
(shell completion, documentation…)","I don't have a strong opinion, but I'd consider it strange if this was the only double-dash option that we supported. I'd say we should either support all options with both single and double-dash variants, or we support none. The former solution should probaly be implemented directly in M_CheckParmWithArgs().",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1107,2018-11-20T16:32:03Z,2019-04-03T14:01:10Z,2019-04-03T14:01:11Z,CLOSED,False,1,1,1,https://github.com/jmtd,Remove long-opt variant of version,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1107,https://github.com/fabiangreffrath,7,https://github.com/chocolate-doom/chocolate-doom/pull/1107#issuecomment-440709843,"Let's stick to single-dash delimited arguments, in common with the
existing ones. Double-dash are a GNU convention for ""long options"",
typically spelled out (so, -v or --version). We don't use the GNU
conventions in this project. Having the second option is out of
place and potentially causes unnecessary complexity in other places
(shell completion, documentation…)","Like e.g. this:
--- a/src/m_argv.c
+++ b/src/m_argv.c
@@ -46,7 +46,8 @@ int M_CheckParmWithArgs(const char *check, int num_args)

     for (i = 1; i < myargc - num_args; i++)
     {
-       if (!strcasecmp(check, myargv[i]))
+       if (!strcasecmp(check, myargv[i]) ||
+           (myargv[i][0] == '-' && !strcasecmp(check, myargv[i] + 1)))
            return i;
     }",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1107,2018-11-20T16:32:03Z,2019-04-03T14:01:10Z,2019-04-03T14:01:11Z,CLOSED,False,1,1,1,https://github.com/jmtd,Remove long-opt variant of version,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1107,https://github.com/jmtd,8,https://github.com/chocolate-doom/chocolate-doom/pull/1107#issuecomment-479502333,"Let's stick to single-dash delimited arguments, in common with the
existing ones. Double-dash are a GNU convention for ""long options"",
typically spelled out (so, -v or --version). We don't use the GNU
conventions in this project. Having the second option is out of
place and potentially causes unnecessary complexity in other places
(shell completion, documentation…)",There was no real consensus or enthusiasm on this.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1108,2018-11-21T18:07:52Z,2018-11-21T18:24:01Z,2018-11-21T18:24:05Z,MERGED,True,1,0,1,https://github.com/mfrancis95,Fix tiny memory leak when looking for IWADs,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1108,https://github.com/mfrancis95,1,https://github.com/chocolate-doom/chocolate-doom/pull/1108,Fixes #1104.,Fixes #1104.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1108,2018-11-21T18:07:52Z,2018-11-21T18:24:01Z,2018-11-21T18:24:05Z,MERGED,True,1,0,1,https://github.com/mfrancis95,Fix tiny memory leak when looking for IWADs,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1108,https://github.com/fragglet,2,https://github.com/chocolate-doom/chocolate-doom/pull/1108#issuecomment-440765424,Fixes #1104.,Thanks.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1112,2018-12-01T20:42:19Z,2020-06-18T10:50:40Z,2020-06-18T10:50:41Z,CLOSED,False,65,5,1,https://github.com/jmtd,WIP: joystick support to heretic menus,1,"['input', 'Heretic']",https://github.com/chocolate-doom/chocolate-doom/pull/1112,https://github.com/jmtd,1,https://github.com/chocolate-doom/chocolate-doom/pull/1112,"Porting from the same changes made in src/doom/m_menu.c
• some issues with initialising key and charTyped variables in some
paths
• the menu gets activated immediately on start for some reason
• save game handling not done yet
• menu left/right via joystick broken","Porting from the same changes made in src/doom/m_menu.c
• some issues with initialising key and charTyped variables in some
paths
• the menu gets activated immediately on start for some reason
• save game handling not done yet
• menu left/right via joystick broken",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1112,2018-12-01T20:42:19Z,2020-06-18T10:50:40Z,2020-06-18T10:50:41Z,CLOSED,False,65,5,1,https://github.com/jmtd,WIP: joystick support to heretic menus,1,"['input', 'Heretic']",https://github.com/chocolate-doom/chocolate-doom/pull/1112,https://github.com/fabiangreffrath,2,https://github.com/chocolate-doom/chocolate-doom/pull/1112#issuecomment-633897671,"Porting from the same changes made in src/doom/m_menu.c
• some issues with initialising key and charTyped variables in some
paths
• the menu gets activated immediately on start for some reason
• save game handling not done yet
• menu left/right via joystick broken",@jmtd Could you possibly fix the compiler warnings that let this branch fail during the Travis CI checks?,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1112,2018-12-01T20:42:19Z,2020-06-18T10:50:40Z,2020-06-18T10:50:41Z,CLOSED,False,65,5,1,https://github.com/jmtd,WIP: joystick support to heretic menus,1,"['input', 'Heretic']",https://github.com/chocolate-doom/chocolate-doom/pull/1112,https://github.com/jmtd,3,https://github.com/chocolate-doom/chocolate-doom/pull/1112#issuecomment-634073588,"Porting from the same changes made in src/doom/m_menu.c
• some issues with initialising key and charTyped variables in some
paths
• the menu gets activated immediately on start for some reason
• save game handling not done yet
• menu left/right via joystick broken",@fabiangreffrath I can try to take a look. I don't know if rebasing would be a lot of work in the 2Y since I wrote this. Is there a prospect of a review and merge if I do the necessary rework?,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1112,2018-12-01T20:42:19Z,2020-06-18T10:50:40Z,2020-06-18T10:50:41Z,CLOSED,False,65,5,1,https://github.com/jmtd,WIP: joystick support to heretic menus,1,"['input', 'Heretic']",https://github.com/chocolate-doom/chocolate-doom/pull/1112,https://github.com/fabiangreffrath,4,https://github.com/chocolate-doom/chocolate-doom/pull/1112#issuecomment-634095273,"Porting from the same changes made in src/doom/m_menu.c
• some issues with initialising key and charTyped variables in some
paths
• the menu gets activated immediately on start for some reason
• save game handling not done yet
• menu left/right via joystick broken","Yes, sure, you may request me as a reviewer.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1112,2018-12-01T20:42:19Z,2020-06-18T10:50:40Z,2020-06-18T10:50:41Z,CLOSED,False,65,5,1,https://github.com/jmtd,WIP: joystick support to heretic menus,1,"['input', 'Heretic']",https://github.com/chocolate-doom/chocolate-doom/pull/1112,https://github.com/jmtd,5,https://github.com/chocolate-doom/chocolate-doom/pull/1112#issuecomment-645940507,"Porting from the same changes made in src/doom/m_menu.c
• some issues with initialising key and charTyped variables in some
paths
• the menu gets activated immediately on start for some reason
• save game handling not done yet
• menu left/right via joystick broken","Hi, as I recall this is unfinished work anyway, so rebasing and resolving conflicts will not result in a useful PR. I haven't the time to work on this for the forseeable, so I'm going to close it. I might pick this up again one day eventually!",True,"{'CONFUSED': ['https://github.com/fabiangreffrath', 'https://github.com/mfrancis95']}"
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1113,2018-12-02T05:08:50Z,2018-12-02T08:57:28Z,2018-12-02T08:57:28Z,MERGED,True,4,0,1,https://github.com/jkbenaim,"Doom: don't divide by zero, but call I_Error instead.",2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1113,https://github.com/jkbenaim,1,https://github.com/chocolate-doom/chocolate-doom/pull/1113,"When loading from a save game, vanilla Doom forgets to initialize some
variables related to the final boss/Romero's head. In particular, a
count of the number of spawn points can end up being set to zero. Later,
when selecting a spawn target, a division by zero can occur. Vanilla
will simply crash. In Chocolate Doom, we should exit out gracefully
instead.","When loading from a save game, vanilla Doom forgets to initialize some
variables related to the final boss/Romero's head. In particular, a
count of the number of spawn points can end up being set to zero. Later,
when selecting a spawn target, a division by zero can occur. Vanilla
will simply crash. In Chocolate Doom, we should exit out gracefully
instead.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1113,2018-12-02T05:08:50Z,2018-12-02T08:57:28Z,2018-12-02T08:57:28Z,MERGED,True,4,0,1,https://github.com/jkbenaim,"Doom: don't divide by zero, but call I_Error instead.",2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1113,https://github.com/jkbenaim,2,https://github.com/chocolate-doom/chocolate-doom/pull/1113#issuecomment-443482308,"When loading from a save game, vanilla Doom forgets to initialize some
variables related to the final boss/Romero's head. In particular, a
count of the number of spawn points can end up being set to zero. Later,
when selecting a spawn target, a division by zero can occur. Vanilla
will simply crash. In Chocolate Doom, we should exit out gracefully
instead.","To trigger this:

Start Doom 2, go to map 30, and go through the teleporter.
Once a spawn cube is in flight, save the game.
Quit the game, start the game again, and load the save.
Without this patch: the game crashes with a floating point exception. With this patch: the game exits with an I_Error.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1113,2018-12-02T05:08:50Z,2018-12-02T08:57:28Z,2018-12-02T08:57:28Z,MERGED,True,4,0,1,https://github.com/jkbenaim,"Doom: don't divide by zero, but call I_Error instead.",2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1113,https://github.com/AXDOOMER,3,https://github.com/chocolate-doom/chocolate-doom/pull/1113#issuecomment-443487560,"When loading from a save game, vanilla Doom forgets to initialize some
variables related to the final boss/Romero's head. In particular, a
count of the number of spawn points can end up being set to zero. Later,
when selecting a spawn target, a division by zero can occur. Vanilla
will simply crash. In Chocolate Doom, we should exit out gracefully
instead.","Please, respect Chocolate-Doom's coding style. Also, you don't need a return; here because I_Error never returns.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1113,2018-12-02T05:08:50Z,2018-12-02T08:57:28Z,2018-12-02T08:57:28Z,MERGED,True,4,0,1,https://github.com/jkbenaim,"Doom: don't divide by zero, but call I_Error instead.",2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1113,https://github.com/jkbenaim,4,https://github.com/chocolate-doom/chocolate-doom/pull/1113#issuecomment-443491370,"When loading from a save game, vanilla Doom forgets to initialize some
variables related to the final boss/Romero's head. In particular, a
count of the number of spawn points can end up being set to zero. Later,
when selecting a spawn target, a division by zero can occur. Vanilla
will simply crash. In Chocolate Doom, we should exit out gracefully
instead.",I moved a bracket and removed the errant return statement.,True,{'THUMBS_UP': ['https://github.com/AXDOOMER']}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1114,2018-12-02T07:53:15Z,2018-12-02T09:19:55Z,2018-12-02T09:20:07Z,MERGED,True,1,0,1,https://github.com/mfrancis95,Improve #1089 by making sure playerstartsingame gets cleared,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1114,https://github.com/mfrancis95,1,https://github.com/chocolate-doom/chocolate-doom/pull/1114,,,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1114,2018-12-02T07:53:15Z,2018-12-02T09:19:55Z,2018-12-02T09:20:07Z,MERGED,True,1,0,1,https://github.com/mfrancis95,Improve #1089 by making sure playerstartsingame gets cleared,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1114,https://github.com/fabiangreffrath,2,https://github.com/chocolate-doom/chocolate-doom/pull/1114#issuecomment-443493220,,Thanks!,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1116,2018-12-08T15:01:54Z,2018-12-10T20:18:11Z,2018-12-10T20:18:11Z,MERGED,True,35,36,25,https://github.com/turol,"Const correctness, part N",22,[],https://github.com/chocolate-doom/chocolate-doom/pull/1116,https://github.com/turol,1,https://github.com/chocolate-doom/chocolate-doom/pull/1116,Mostly in hexen and heretic but also removes some unused variables.,Mostly in hexen and heretic but also removes some unused variables.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1116,2018-12-08T15:01:54Z,2018-12-10T20:18:11Z,2018-12-10T20:18:11Z,MERGED,True,35,36,25,https://github.com/turol,"Const correctness, part N",22,[],https://github.com/chocolate-doom/chocolate-doom/pull/1116,https://github.com/chungy,2,https://github.com/chocolate-doom/chocolate-doom/pull/1116#issuecomment-445957604,Mostly in hexen and heretic but also removes some unused variables.,thanks,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1119,2018-12-09T05:42:05Z,2018-12-12T20:00:57Z,2018-12-12T20:00:57Z,MERGED,True,3,4,1,https://github.com/mfrancis95,Fix memory leak in Strife related to finding voices.wad and make finding it case-insensitive,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1119,https://github.com/mfrancis95,1,https://github.com/chocolate-doom/chocolate-doom/pull/1119,,,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1119,2018-12-09T05:42:05Z,2018-12-12T20:00:57Z,2018-12-12T20:00:57Z,MERGED,True,3,4,1,https://github.com/mfrancis95,Fix memory leak in Strife related to finding voices.wad and make finding it case-insensitive,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1119,https://github.com/jmtd,2,https://github.com/chocolate-doom/chocolate-doom/pull/1119#issuecomment-445836423,,Does this fix the memory leak mentioned on line 861? If so can you remove the TODO comment too? thanks,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1119,2018-12-09T05:42:05Z,2018-12-12T20:00:57Z,2018-12-12T20:00:57Z,MERGED,True,3,4,1,https://github.com/mfrancis95,Fix memory leak in Strife related to finding voices.wad and make finding it case-insensitive,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1119,https://github.com/mfrancis95,3,https://github.com/chocolate-doom/chocolate-doom/pull/1119#issuecomment-446050145,,"As far as I've tested, it does. That 11-byte loss is no longer reported. I amended my commit with the TODO comment removed.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1119,2018-12-09T05:42:05Z,2018-12-12T20:00:57Z,2018-12-12T20:00:57Z,MERGED,True,3,4,1,https://github.com/mfrancis95,Fix memory leak in Strife related to finding voices.wad and make finding it case-insensitive,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1119,https://github.com/mfrancis95,4,https://github.com/chocolate-doom/chocolate-doom/pull/1119#issuecomment-446067920,,"One more amend. I handled the case where -iwad is used, where it'd have to be Z_Free'd instead of free'd.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1119,2018-12-09T05:42:05Z,2018-12-12T20:00:57Z,2018-12-12T20:00:57Z,MERGED,True,3,4,1,https://github.com/mfrancis95,Fix memory leak in Strife related to finding voices.wad and make finding it case-insensitive,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1119,https://github.com/mfrancis95,5,https://github.com/chocolate-doom/chocolate-doom/pull/1119#issuecomment-446692844,,Integrated @fabiangreffrath's patch and now #1120 is fixed too.,True,{'THUMBS_UP': ['https://github.com/jmtd']}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1119,2018-12-09T05:42:05Z,2018-12-12T20:00:57Z,2018-12-12T20:00:57Z,MERGED,True,3,4,1,https://github.com/mfrancis95,Fix memory leak in Strife related to finding voices.wad and make finding it case-insensitive,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1119,https://github.com/fabiangreffrath,6,https://github.com/chocolate-doom/chocolate-doom/pull/1119#issuecomment-446723888,,Thanks!,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1121,2018-12-12T10:05:46Z,2018-12-17T14:46:52Z,2018-12-17T14:46:53Z,MERGED,True,42,44,19,https://github.com/turol,Const correctness,32,[],https://github.com/chocolate-doom/chocolate-doom/pull/1121,https://github.com/turol,1,https://github.com/chocolate-doom/chocolate-doom/pull/1121,Some tricky bits in the networking code. I did a quick test and it still works but please look carefully at it anyway.,Some tricky bits in the networking code. I did a quick test and it still works but please look carefully at it anyway.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1121,2018-12-12T10:05:46Z,2018-12-17T14:46:52Z,2018-12-17T14:46:53Z,MERGED,True,42,44,19,https://github.com/turol,Const correctness,32,[],https://github.com/chocolate-doom/chocolate-doom/pull/1121,https://github.com/turol,2,https://github.com/chocolate-doom/chocolate-doom/pull/1121#issuecomment-446537735,Some tricky bits in the networking code. I did a quick test and it still works but please look carefully at it anyway.,Looks like I might have found a real bug. Putting '%' in client name (is that even possible?) might have triggered some bad behavior.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1121,2018-12-12T10:05:46Z,2018-12-17T14:46:52Z,2018-12-17T14:46:53Z,MERGED,True,42,44,19,https://github.com/turol,Const correctness,32,[],https://github.com/chocolate-doom/chocolate-doom/pull/1121,https://github.com/turol,3,https://github.com/chocolate-doom/chocolate-doom/pull/1121#issuecomment-447780280,Some tricky bits in the networking code. I did a quick test and it still works but please look carefully at it anyway.,@fragglet ping,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1124,2018-12-18T06:12:25Z,2018-12-19T13:39:47Z,2018-12-19T13:39:47Z,MERGED,True,15,0,3,https://github.com/mfrancis95,Heretic: Gracefully error out when player starts are missing (fix #1122),1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1124,https://github.com/mfrancis95,1,https://github.com/chocolate-doom/chocolate-doom/pull/1124,,,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1124,2018-12-18T06:12:25Z,2018-12-19T13:39:47Z,2018-12-19T13:39:47Z,MERGED,True,15,0,3,https://github.com/mfrancis95,Heretic: Gracefully error out when player starts are missing (fix #1122),1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1124,https://github.com/fabiangreffrath,2,https://github.com/chocolate-doom/chocolate-doom/pull/1124#issuecomment-448118779,,You forgot to add the part where playerstartsingame[i] is set to true.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1124,2018-12-18T06:12:25Z,2018-12-19T13:39:47Z,2018-12-19T13:39:47Z,MERGED,True,15,0,3,https://github.com/mfrancis95,Heretic: Gracefully error out when player starts are missing (fix #1122),1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1124,https://github.com/mfrancis95,3,https://github.com/chocolate-doom/chocolate-doom/pull/1124#issuecomment-448271126,,"Oops, I forgot to include that file in the commit. All good now.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1125,2018-12-20T09:19:12Z,2019-12-18T16:51:42Z,2019-12-18T16:51:42Z,CLOSED,False,57,53,12,https://github.com/fabiangreffrath,Add branch prediction to certain fatal conditions,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1125,https://github.com/fabiangreffrath,1,https://github.com/chocolate-doom/chocolate-doom/pull/1125,"Are we interested in this? This is from the Linux kernel.
There are many more occasions in the code where we could probably optimize conditions. I have so far just applied it to certain conditions which are evaluated rather often (say, about at least once per tic) and result in I_Error() in the unlikely case. But, as I said, there is much more to explore...","Are we interested in this? This is from the Linux kernel.
There are many more occasions in the code where we could probably optimize conditions. I have so far just applied it to certain conditions which are evaluated rather often (say, about at least once per tic) and result in I_Error() in the unlikely case. But, as I said, there is much more to explore...",True,{'THUMBS_UP': ['https://github.com/mfrancis95']}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1125,2018-12-20T09:19:12Z,2019-12-18T16:51:42Z,2019-12-18T16:51:42Z,CLOSED,False,57,53,12,https://github.com/fabiangreffrath,Add branch prediction to certain fatal conditions,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1125,https://github.com/mfrancis95,2,https://github.com/chocolate-doom/chocolate-doom/pull/1125#issuecomment-449066172,"Are we interested in this? This is from the Linux kernel.
There are many more occasions in the code where we could probably optimize conditions. I have so far just applied it to certain conditions which are evaluated rather often (say, about at least once per tic) and result in I_Error() in the unlikely case. But, as I said, there is much more to explore...","Some possible spots:


  
    
      chocolate-doom/src/doom/p_enemy.c
    
    
         Line 275
      in
      1f07cbb
    
  
  
    

        
          
           if ((unsigned)actor->movedir >= 8) 
        
    
  



  
    
      chocolate-doom/src/doom/p_enemy.c
    
    
         Line 363
      in
      1f07cbb
    
  
  
    

        
          
           if (!actor->target) 
        
    
  



  
    
      chocolate-doom/src/doom/p_inter.c
    
    
         Line 76
      in
      1f07cbb
    
  
  
    

        
          
           if (ammo > NUMAMMO)",True,{'THUMBS_UP': ['https://github.com/fabiangreffrath']}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1125,2018-12-20T09:19:12Z,2019-12-18T16:51:42Z,2019-12-18T16:51:42Z,CLOSED,False,57,53,12,https://github.com/fabiangreffrath,Add branch prediction to certain fatal conditions,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1125,https://github.com/AXDOOMER,3,https://github.com/chocolate-doom/chocolate-doom/pull/1125#issuecomment-449134099,"Are we interested in this? This is from the Linux kernel.
There are many more occasions in the code where we could probably optimize conditions. I have so far just applied it to certain conditions which are evaluated rather often (say, about at least once per tic) and result in I_Error() in the unlikely case. But, as I said, there is much more to explore...",Do you have benchmarks that show a speed enhancement?,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1125,2018-12-20T09:19:12Z,2019-12-18T16:51:42Z,2019-12-18T16:51:42Z,CLOSED,False,57,53,12,https://github.com/fabiangreffrath,Add branch prediction to certain fatal conditions,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1125,https://github.com/fragglet,4,https://github.com/chocolate-doom/chocolate-doom/pull/1125#issuecomment-449154186,"Are we interested in this? This is from the Linux kernel.
There are many more occasions in the code where we could probably optimize conditions. I have so far just applied it to certain conditions which are evaluated rather often (say, about at least once per tic) and result in I_Error() in the unlikely case. But, as I said, there is much more to explore...","It's a nice idea, though I'd echo @AXDOOMER in asking if there are benchmarks. Ideally this should be driven by benchmarks and only added where it's shown it can make an improvement.
(Side note, it's a slight shame that we don't have any automated way to run benchmarks. Maybe the statcheck approach could be adapted somehow?)",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1125,2018-12-20T09:19:12Z,2019-12-18T16:51:42Z,2019-12-18T16:51:42Z,CLOSED,False,57,53,12,https://github.com/fabiangreffrath,Add branch prediction to certain fatal conditions,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1125,https://github.com/fabiangreffrath,5,https://github.com/chocolate-doom/chocolate-doom/pull/1125#issuecomment-449278894,"Are we interested in this? This is from the Linux kernel.
There are many more occasions in the code where we could probably optimize conditions. I have so far just applied it to certain conditions which are evaluated rather often (say, about at least once per tic) and result in I_Error() in the unlikely case. But, as I said, there is much more to explore...","Sorry, I don't have any hard facts (yet), just a ""good feeling"" that this a the right thing . 😁",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1125,2018-12-20T09:19:12Z,2019-12-18T16:51:42Z,2019-12-18T16:51:42Z,CLOSED,False,57,53,12,https://github.com/fabiangreffrath,Add branch prediction to certain fatal conditions,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1125,https://github.com/mfrancis95,6,https://github.com/chocolate-doom/chocolate-doom/pull/1125#issuecomment-449286900,"Are we interested in this? This is from the Linux kernel.
There are many more occasions in the code where we could probably optimize conditions. I have so far just applied it to certain conditions which are evaluated rather often (say, about at least once per tic) and result in I_Error() in the unlikely case. But, as I said, there is much more to explore...","Maybe there might not be a noticeable improvement, but I don't see how adding this would hurt.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1125,2018-12-20T09:19:12Z,2019-12-18T16:51:42Z,2019-12-18T16:51:42Z,CLOSED,False,57,53,12,https://github.com/fabiangreffrath,Add branch prediction to certain fatal conditions,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1125,https://github.com/JNechaevsky,7,https://github.com/chocolate-doom/chocolate-doom/pull/1125#issuecomment-449295369,"Are we interested in this? This is from the Linux kernel.
There are many more occasions in the code where we could probably optimize conditions. I have so far just applied it to certain conditions which are evaluated rather often (say, about at least once per tic) and result in I_Error() in the unlikely case. But, as I said, there is much more to explore...","I've made a lots of -timedemo tests of comparison with and w/o defining RANGECHECK in the past, in both Choco and Crispy, in various maps and demos, in different screen sizes. Surprisingly, there were no any average fps differences. Not sure why, probably because of CPU is fast enough to handle RANGECHECK conditions without any performance impact.
But still, this looks interesting.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1125,2018-12-20T09:19:12Z,2019-12-18T16:51:42Z,2019-12-18T16:51:42Z,CLOSED,False,57,53,12,https://github.com/fabiangreffrath,Add branch prediction to certain fatal conditions,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1125,https://github.com/turol,8,https://github.com/chocolate-doom/chocolate-doom/pull/1125#issuecomment-449372250,"Are we interested in this? This is from the Linux kernel.
There are many more occasions in the code where we could probably optimize conditions. I have so far just applied it to certain conditions which are evaluated rather often (say, about at least once per tic) and result in I_Error() in the unlikely case. But, as I said, there is much more to explore...","I also suspect that this is a no-op. GCC has pretty good heuristics for branch prediction. For example branches containing noreturn functions like I_Error should already be considered unlikely.
I did some profiling a while back. On i7-2670QM CPU and GF560M GPU the bottleneck was copying the final image to GPU memory inside SDL texture update function. It consumed over half the CPU time. As long as that bottleneck remains any optimizations (or slight slowdowns like range check) are unlikely to affect performance.
For meaningful optimization we'd have to go to raw OpenGL 4.5/Vulkan/Metal and copy into a persistently-mapped buffer, then have our own shader to blit to screen. This would be very complicated and I doubt anyone would actually bother.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1125,2018-12-20T09:19:12Z,2019-12-18T16:51:42Z,2019-12-18T16:51:42Z,CLOSED,False,57,53,12,https://github.com/fabiangreffrath,Add branch prediction to certain fatal conditions,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1125,https://github.com/AXDOOMER,9,https://github.com/chocolate-doom/chocolate-doom/pull/1125#issuecomment-449469304,"Are we interested in this? This is from the Linux kernel.
There are many more occasions in the code where we could probably optimize conditions. I have so far just applied it to certain conditions which are evaluated rather often (say, about at least once per tic) and result in I_Error() in the unlikely case. But, as I said, there is much more to explore...","Also, modern CPUs do speculation, so it probably has already found out which branch to execute and executed it even before it has evaluated the condition even though doing this is out-of-order.
I only believe that there could have been a performance improvement on a Raspberry Pi. Its CPU is less intelligent and doesn't do out-of-order execution. Even there, Chocolate-Doom runs so fast, I don't believe it will ever need to be optimized.
The thing that may really slow down Chocolate-Doom is memory copy. Turol has found a good example:

the bottleneck was copying the final image to GPU memory inside SDL texture update function. It consumed over half the CPU time.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1125,2018-12-20T09:19:12Z,2019-12-18T16:51:42Z,2019-12-18T16:51:42Z,CLOSED,False,57,53,12,https://github.com/fabiangreffrath,Add branch prediction to certain fatal conditions,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1125,https://github.com/turol,10,https://github.com/chocolate-doom/chocolate-doom/pull/1125#issuecomment-449497201,"Are we interested in this? This is from the Linux kernel.
There are many more occasions in the code where we could probably optimize conditions. I have so far just applied it to certain conditions which are evaluated rather often (say, about at least once per tic) and result in I_Error() in the unlikely case. But, as I said, there is much more to explore...","It's not just a memory copy, it's 8bit->32bit conversion, copying to driver memory, copying over the PCI-E bus (unless on integrated GPU) and conversion to GPU internal fast texture format. With enough effort (and code) we could skip the redundant steps but why bother when it can already run over 500 FPS?",True,"{'THUMBS_UP': ['https://github.com/AXDOOMER', 'https://github.com/fabiangreffrath']}"
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1125,2018-12-20T09:19:12Z,2019-12-18T16:51:42Z,2019-12-18T16:51:42Z,CLOSED,False,57,53,12,https://github.com/fabiangreffrath,Add branch prediction to certain fatal conditions,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1125,https://github.com/turol,11,https://github.com/chocolate-doom/chocolate-doom/pull/1125#issuecomment-449500922,"Are we interested in this? This is from the Linux kernel.
There are many more occasions in the code where we could probably optimize conditions. I have so far just applied it to certain conditions which are evaluated rather often (say, about at least once per tic) and result in I_Error() in the unlikely case. But, as I said, there is much more to explore...","Flame graph of '-timedemo demo1':  https://gist.github.com/turol/14ea08e91cc8a81c4788431fe753dbeb
I couldn't find a way to embed it here directly. You might need to paste that into .svg to see the details.
As you can see, about 53% is spent inside nvidia's driver. About half of that is in kernel space...",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1125,2018-12-20T09:19:12Z,2019-12-18T16:51:42Z,2019-12-18T16:51:42Z,CLOSED,False,57,53,12,https://github.com/fabiangreffrath,Add branch prediction to certain fatal conditions,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1125,https://github.com/fabiangreffrath,12,https://github.com/chocolate-doom/chocolate-doom/pull/1125#issuecomment-449570821,"Are we interested in this? This is from the Linux kernel.
There are many more occasions in the code where we could probably optimize conditions. I have so far just applied it to certain conditions which are evaluated rather often (say, about at least once per tic) and result in I_Error() in the unlikely case. But, as I said, there is much more to explore...","why bother when it can already run over 500 FPS

I don't feel that way. Even if the real bottleneck is at a different stage in the rendering, I think it feels better to explicitly tell the compiler which is the unlikely branch instead of relying on its heuristics.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1125,2018-12-20T09:19:12Z,2019-12-18T16:51:42Z,2019-12-18T16:51:42Z,CLOSED,False,57,53,12,https://github.com/fabiangreffrath,Add branch prediction to certain fatal conditions,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1125,https://github.com/AXDOOMER,13,https://github.com/chocolate-doom/chocolate-doom/pull/1125#issuecomment-449615443,"Are we interested in this? This is from the Linux kernel.
There are many more occasions in the code where we could probably optimize conditions. I have so far just applied it to certain conditions which are evaluated rather often (say, about at least once per tic) and result in I_Error() in the unlikely case. But, as I said, there is much more to explore...","It's overkill to use these macros there. They are usually used in the Linux kernel for branch predilection before a branch loads something that can use a big part of the CPU cache. To make sure the right thing gets loaded into the cache, the Linux kernel uses them. Linux is also mostly used in embedded systems which use old CPUs and don't have a lot of cache (sometimes a few kilobytes), so it's a good reason to use these macros in this case.
In our case, you use UNLIKELY before I_Error is called. If the assembly causes the CPU to mispredicts,  I_Error is not a function that's going to cause the cache to be cleared. It's simply too small and it doesn't do memory intensive tasks. Moreover, Chocolate-Doom doesn't have the same use case, so I don't believe anyone is using it on old embedded systems. A consumer CPU from 10 years ago can even fit the entire Chocolate-Doom executable one or more times in its L2 cache.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1125,2018-12-20T09:19:12Z,2019-12-18T16:51:42Z,2019-12-18T16:51:42Z,CLOSED,False,57,53,12,https://github.com/fabiangreffrath,Add branch prediction to certain fatal conditions,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1125,https://github.com/fragglet,14,https://github.com/chocolate-doom/chocolate-doom/pull/1125#issuecomment-567117425,"Are we interested in this? This is from the Linux kernel.
There are many more occasions in the code where we could probably optimize conditions. I have so far just applied it to certain conditions which are evaluated rather often (say, about at least once per tic) and result in I_Error() in the unlikely case. But, as I said, there is much more to explore...",Closing based on discussion.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1128,2018-12-30T13:12:56Z,2019-02-28T20:21:11Z,2019-02-28T20:21:11Z,MERGED,True,11,8,2,https://github.com/Altazimuth,Fix i_glob.c compilation under MSVC (and CMake),2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1128,https://github.com/Altazimuth,1,https://github.com/chocolate-doom/chocolate-doom/pull/1128,"This fixes issue #1109, which I have commented on. The changes to i_glob.c are minimal (defining S_ISDIR and including sys/stat.h). The CMake changes impact the chocolate-(doom|heretic|hexen|strife) projects. Hopefully everything is fine, but I'm good to make whatever changes are necessary.","This fixes issue #1109, which I have commented on. The changes to i_glob.c are minimal (defining S_ISDIR and including sys/stat.h). The CMake changes impact the chocolate-(doom|heretic|hexen|strife) projects. Hopefully everything is fine, but I'm good to make whatever changes are necessary.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1128,2018-12-30T13:12:56Z,2019-02-28T20:21:11Z,2019-02-28T20:21:11Z,MERGED,True,11,8,2,https://github.com/Altazimuth,Fix i_glob.c compilation under MSVC (and CMake),2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1128,https://github.com/Altazimuth,2,https://github.com/chocolate-doom/chocolate-doom/pull/1128#issuecomment-451036973,"This fixes issue #1109, which I have commented on. The changes to i_glob.c are minimal (defining S_ISDIR and including sys/stat.h). The CMake changes impact the chocolate-(doom|heretic|hexen|strife) projects. Hopefully everything is fine, but I'm good to make whatever changes are necessary.",It should be noted I have since tested this on Arch Linux (after the second commit I made) and it worked just fine.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1129,2019-01-01T08:19:25Z,2019-01-23T20:01:31Z,2019-01-23T20:01:31Z,MERGED,True,1,6,1,https://github.com/mfrancis95,Apply @fabiangreffrath's patch to fix a memory error in Hexen,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1129,https://github.com/mfrancis95,1,https://github.com/chocolate-doom/chocolate-doom/pull/1129,One part of #1117.,One part of #1117.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1129,2019-01-01T08:19:25Z,2019-01-23T20:01:31Z,2019-01-23T20:01:31Z,MERGED,True,1,6,1,https://github.com/mfrancis95,Apply @fabiangreffrath's patch to fix a memory error in Hexen,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1129,https://github.com/mfrancis95,2,https://github.com/chocolate-doom/chocolate-doom/pull/1129#issuecomment-453795244,One part of #1117.,@fragglet it was changed.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1129,2019-01-01T08:19:25Z,2019-01-23T20:01:31Z,2019-01-23T20:01:31Z,MERGED,True,1,6,1,https://github.com/mfrancis95,Apply @fabiangreffrath's patch to fix a memory error in Hexen,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1129,https://github.com/fragglet,3,https://github.com/chocolate-doom/chocolate-doom/pull/1129#issuecomment-456945554,One part of #1117.,Looks good - thanks!,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1130,2019-01-07T13:36:21Z,2019-01-25T07:31:47Z,2019-01-25T11:31:36Z,MERGED,True,33,2,5,https://github.com/fabiangreffrath,default save name is map name and containing WAD file name,8,[],https://github.com/chocolate-doom/chocolate-doom/pull/1130,https://github.com/fabiangreffrath,1,https://github.com/chocolate-doom/chocolate-doom/pull/1130,,,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1130,2019-01-07T13:36:21Z,2019-01-25T07:31:47Z,2019-01-25T11:31:36Z,MERGED,True,33,2,5,https://github.com/fabiangreffrath,default save name is map name and containing WAD file name,8,[],https://github.com/chocolate-doom/chocolate-doom/pull/1130,https://github.com/fabiangreffrath,2,https://github.com/chocolate-doom/chocolate-doom/pull/1130#issuecomment-452198729,,"Alright, I have addressed the raised issues.
Another idea: Omit prefixing the containing WAD file name if its the IWAD. What do you think?
So, instead of e.g.
doom2.wad: map01
requiem.wad: map02

this would be
map01
requiem.wad: map02",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1130,2019-01-07T13:36:21Z,2019-01-25T07:31:47Z,2019-01-25T11:31:36Z,MERGED,True,33,2,5,https://github.com/fabiangreffrath,default save name is map name and containing WAD file name,8,[],https://github.com/chocolate-doom/chocolate-doom/pull/1130,https://github.com/jmtd,3,https://github.com/chocolate-doom/chocolate-doom/pull/1130#issuecomment-452222770,,"I take it this is for all save paths, not just joystick? It's quite a departure from vanilla behaviour.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1130,2019-01-07T13:36:21Z,2019-01-25T07:31:47Z,2019-01-25T11:31:36Z,MERGED,True,33,2,5,https://github.com/fabiangreffrath,default save name is map name and containing WAD file name,8,[],https://github.com/chocolate-doom/chocolate-doom/pull/1130,https://github.com/fabiangreffrath,4,https://github.com/chocolate-doom/chocolate-doom/pull/1130#issuecomment-452232090,,"I take it this is for all save paths, not just joystick? It's quite a departure from vanilla behaviour.

No, just for joysticks.",True,{'THUMBS_UP': ['https://github.com/jmtd']}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1130,2019-01-07T13:36:21Z,2019-01-25T07:31:47Z,2019-01-25T11:31:36Z,MERGED,True,33,2,5,https://github.com/fabiangreffrath,default save name is map name and containing WAD file name,8,[],https://github.com/chocolate-doom/chocolate-doom/pull/1130,https://github.com/fabiangreffrath,5,https://github.com/chocolate-doom/chocolate-doom/pull/1130#issuecomment-457097117,,"One last idea before I merge this:
I think I'll factor out the ""lumpinfo from IWAD?"" check and the ""WAD basename from lumpinfo"" stuff into separate helper functions in w_wad.c. These are a bit too low-level for m_menu.c from my point of view.
@fragglet What do you think?",True,{'THUMBS_UP': ['https://github.com/jmtd']}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1130,2019-01-07T13:36:21Z,2019-01-25T07:31:47Z,2019-01-25T11:31:36Z,MERGED,True,33,2,5,https://github.com/fabiangreffrath,default save name is map name and containing WAD file name,8,[],https://github.com/chocolate-doom/chocolate-doom/pull/1130,https://github.com/fabiangreffrath,6,https://github.com/chocolate-doom/chocolate-doom/pull/1130#issuecomment-457168128,,"Like this. I am still a bit unsure about the functions names, though (suggestions, please!).
--- a/src/w_wad.c
+++ b/src/w_wad.c
@@ -618,3 +618,12 @@ void W_Reload(void)
     W_GenerateHashTable();
 }

+const char *W_WADBaseNameFromLumpInfo(const lumpinfo_t *lump)
+{
+       return M_BaseName(lump->wad_file->path);
+}
+
+boolean W_CheckLumpInfoFromIWAD(const lumpinfo_t *lump)
+{
+       return lump->wad_file == lumpinfo[0]->wad_file;
+}",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1130,2019-01-07T13:36:21Z,2019-01-25T07:31:47Z,2019-01-25T11:31:36Z,MERGED,True,33,2,5,https://github.com/fabiangreffrath,default save name is map name and containing WAD file name,8,[],https://github.com/chocolate-doom/chocolate-doom/pull/1130,https://github.com/fragglet,7,https://github.com/chocolate-doom/chocolate-doom/pull/1130#issuecomment-457228827,,"How about:

W_WadNameForLump
W_IsIWADLump (I always like to name functions that return a boolean so they read like questions)",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1130,2019-01-07T13:36:21Z,2019-01-25T07:31:47Z,2019-01-25T11:31:36Z,MERGED,True,33,2,5,https://github.com/fabiangreffrath,default save name is map name and containing WAD file name,8,[],https://github.com/chocolate-doom/chocolate-doom/pull/1130,https://github.com/fabiangreffrath,8,https://github.com/chocolate-doom/chocolate-doom/pull/1130#issuecomment-457478821,,"W_WadNameForLump
W_IsIWADLump

These are perfect, thanks!",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1130,2019-01-07T13:36:21Z,2019-01-25T07:31:47Z,2019-01-25T11:31:36Z,MERGED,True,33,2,5,https://github.com/fabiangreffrath,default save name is map name and containing WAD file name,8,[],https://github.com/chocolate-doom/chocolate-doom/pull/1130,https://github.com/fabiangreffrath,9,https://github.com/chocolate-doom/chocolate-doom/pull/1130#issuecomment-457481945,,Future idea: Add leveltime in a human readable hh:mm:ss format.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1130,2019-01-07T13:36:21Z,2019-01-25T07:31:47Z,2019-01-25T11:31:36Z,MERGED,True,33,2,5,https://github.com/fabiangreffrath,default save name is map name and containing WAD file name,8,[],https://github.com/chocolate-doom/chocolate-doom/pull/1130,https://github.com/fabiangreffrath,10,https://github.com/chocolate-doom/chocolate-doom/pull/1130#issuecomment-457544803,,"Add leveltime in a human readable hh:mm:ss format.

Probably not. 😦
ABCDEFGH.WAD: MAPXY already takes up 19 bytes and SAVESTRINGSIZE is only 24.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1132,2019-01-22T17:30:32Z,2019-01-23T16:28:26Z,2019-01-23T16:28:30Z,MERGED,True,26,26,11,https://github.com/turol,Const correctness fixes in setup program,19,[],https://github.com/chocolate-doom/chocolate-doom/pull/1132,https://github.com/turol,1,https://github.com/chocolate-doom/chocolate-doom/pull/1132,"Trivial but only lightly tested. It compiles and most of the options seem to work.
After this one only fixes to Strife remain and then we get into the non-trivial bits.","Trivial but only lightly tested. It compiles and most of the options seem to work.
After this one only fixes to Strife remain and then we get into the non-trivial bits.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1132,2019-01-22T17:30:32Z,2019-01-23T16:28:26Z,2019-01-23T16:28:30Z,MERGED,True,26,26,11,https://github.com/turol,Const correctness fixes in setup program,19,[],https://github.com/chocolate-doom/chocolate-doom/pull/1132,https://github.com/fragglet,2,https://github.com/chocolate-doom/chocolate-doom/pull/1132#issuecomment-456869120,"Trivial but only lightly tested. It compiles and most of the options seem to work.
After this one only fixes to Strife remain and then we get into the non-trivial bits.",Thanks as ever!,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1133,2019-01-24T03:33:21Z,2019-01-24T15:00:42Z,2019-01-24T15:01:17Z,CLOSED,False,1,1,1,https://github.com/nikolas,Update setup instructions: the INSTALL file isn't around anymore,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1133,https://github.com/nikolas,1,https://github.com/chocolate-doom/chocolate-doom/pull/1133,,,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1133,2019-01-24T03:33:21Z,2019-01-24T15:00:42Z,2019-01-24T15:01:17Z,CLOSED,False,1,1,1,https://github.com/nikolas,Update setup instructions: the INSTALL file isn't around anymore,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1133,https://github.com/jmtd,2,https://github.com/chocolate-doom/chocolate-doom/pull/1133#issuecomment-457153313,,"The INSTALL file isn't in the source tree but its generated at build-time and ends up in the distributed source tarballs - e.g. chocolate-doom-3.0.0.tar.gz (not the github auto-generated ones, the ones produced by make dist)
On the one hand, I agree that referencing the INSTALL from the README, which is part of the real source tree, is odd; on the other, it makes sense in the context of the dist tarballs.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1133,2019-01-24T03:33:21Z,2019-01-24T15:00:42Z,2019-01-24T15:01:17Z,CLOSED,False,1,1,1,https://github.com/nikolas,Update setup instructions: the INSTALL file isn't around anymore,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1133,https://github.com/fragglet,3,https://github.com/chocolate-doom/chocolate-doom/pull/1133#issuecomment-457227895,,"A bit counterintuitive that it's in the README, I'll grant, but it's not a huge issue.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1135,2019-01-28T11:22:39Z,2019-02-18T15:03:03Z,2019-02-24T21:01:21Z,MERGED,True,69,65,2,https://github.com/fabiangreffrath,doom: use separate pointers and buffers for demo recording and playback,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1135,https://github.com/fabiangreffrath,1,https://github.com/chocolate-doom/chocolate-doom/pull/1135,"This makes no difference for Chocolate Doom but acts as a preparation
for a continue-recording feature that @fragglet proposed for Crispy Doom in
fabiangreffrath#376
It helps maintaining a reasonably small interdiff between both ports.","This makes no difference for Chocolate Doom but acts as a preparation
for a continue-recording feature that @fragglet proposed for Crispy Doom in
fabiangreffrath#376
It helps maintaining a reasonably small interdiff between both ports.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1135,2019-01-28T11:22:39Z,2019-02-18T15:03:03Z,2019-02-24T21:01:21Z,MERGED,True,69,65,2,https://github.com/fabiangreffrath,doom: use separate pointers and buffers for demo recording and playback,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1135,https://github.com/fabiangreffrath,2,https://github.com/chocolate-doom/chocolate-doom/pull/1135#issuecomment-460081408,"This makes no difference for Chocolate Doom but acts as a preparation
for a continue-recording feature that @fragglet proposed for Crispy Doom in
fabiangreffrath#376
It helps maintaining a reasonably small interdiff between both ports.","@fragglet this is your own code, but I am hesitant to merge it, because it was initially intended for Crispy. Would you mind giving me your ACK/NACK to merge this part of the patch for Choco?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1135,2019-01-28T11:22:39Z,2019-02-18T15:03:03Z,2019-02-24T21:01:21Z,MERGED,True,69,65,2,https://github.com/fabiangreffrath,doom: use separate pointers and buffers for demo recording and playback,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1135,https://github.com/fabiangreffrath,3,https://github.com/chocolate-doom/chocolate-doom/pull/1135#issuecomment-462168288,"This makes no difference for Chocolate Doom but acts as a preparation
for a continue-recording feature that @fragglet proposed for Crispy Doom in
fabiangreffrath#376
It helps maintaining a reasonably small interdiff between both ports.",@fragglet ping,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1135,2019-01-28T11:22:39Z,2019-02-18T15:03:03Z,2019-02-24T21:01:21Z,MERGED,True,69,65,2,https://github.com/fabiangreffrath,doom: use separate pointers and buffers for demo recording and playback,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1135,https://github.com/fabiangreffrath,4,https://github.com/chocolate-doom/chocolate-doom/pull/1135#issuecomment-463935590,"This makes no difference for Chocolate Doom but acts as a preparation
for a continue-recording feature that @fragglet proposed for Crispy Doom in
fabiangreffrath#376
It helps maintaining a reasonably small interdiff between both ports.",And I'd also like to apply this on Monday.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1135,2019-01-28T11:22:39Z,2019-02-18T15:03:03Z,2019-02-24T21:01:21Z,MERGED,True,69,65,2,https://github.com/fabiangreffrath,doom: use separate pointers and buffers for demo recording and playback,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1135,https://github.com/fragglet,5,https://github.com/chocolate-doom/chocolate-doom/pull/1135#issuecomment-464833241,"This makes no difference for Chocolate Doom but acts as a preparation
for a continue-recording feature that @fragglet proposed for Crispy Doom in
fabiangreffrath#376
It helps maintaining a reasonably small interdiff between both ports.",Sorry! Looks good.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1135,2019-01-28T11:22:39Z,2019-02-18T15:03:03Z,2019-02-24T21:01:21Z,MERGED,True,69,65,2,https://github.com/fabiangreffrath,doom: use separate pointers and buffers for demo recording and playback,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1135,https://github.com/fabiangreffrath,6,https://github.com/chocolate-doom/chocolate-doom/pull/1135#issuecomment-464839987,"This makes no difference for Chocolate Doom but acts as a preparation
for a continue-recording feature that @fragglet proposed for Crispy Doom in
fabiangreffrath#376
It helps maintaining a reasonably small interdiff between both ports.","There is still one bug in the code that i need to figure out. No big deal, but demo recording currently segfaults. I know where ut happens and will fix it.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1135,2019-01-28T11:22:39Z,2019-02-18T15:03:03Z,2019-02-24T21:01:21Z,MERGED,True,69,65,2,https://github.com/fabiangreffrath,doom: use separate pointers and buffers for demo recording and playback,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1135,https://github.com/fabiangreffrath,7,https://github.com/chocolate-doom/chocolate-doom/pull/1135#issuecomment-464860128,"This makes no difference for Chocolate Doom but acts as a preparation
for a continue-recording feature that @fragglet proposed for Crispy Doom in
fabiangreffrath#376
It helps maintaining a reasonably small interdiff between both ports.","The problem is that the pointer in G_ReadDemoTiccmd() is now ambigious, since this function is called during demo recording as well as playback. the following patch solves the issue, but I am not sure about the double-pointer style. Is this considered alright for Choco or would you prefer the function to return a pointer instead?
diff --git a/src/doom/g_game.c b/src/doom/g_game.c
index daf31445..2c05e2aa 100644
--- a/src/doom/g_game.c
+++ b/src/doom/g_game.c
@@ -76,7 +76,7 @@
 
 #define SAVEGAMESIZE	0x2c000
 
-void	G_ReadDemoTiccmd (ticcmd_t* cmd); 
+void	G_ReadDemoTiccmd (ticcmd_t* cmd, byte **demo_pp);
 void	G_WriteDemoTiccmd (ticcmd_t* cmd); 
 void	G_PlayerReborn (int player); 
  
@@ -917,7 +917,7 @@ void G_Ticker (void)
 	    memcpy(cmd, &netcmds[i], sizeof(ticcmd_t));
 
 	    if (demoplayback) 
-		G_ReadDemoTiccmd (cmd); 
+		G_ReadDemoTiccmd (cmd, &demo_in_p);
 	    if (demorecording) 
 		G_WriteDemoTiccmd (cmd);
 	    
@@ -1910,30 +1910,34 @@ G_InitNew
 #define DEMOMARKER		0x80
 
 
-void G_ReadDemoTiccmd (ticcmd_t* cmd) 
+void G_ReadDemoTiccmd (ticcmd_t* cmd, byte **demo_pp)
 { 
-    if (*demo_in_p == DEMOMARKER)
+    byte *demo_p = *demo_pp;
+
+    if (*demo_p == DEMOMARKER)
     {
 	// end of demo data stream
 	G_CheckDemoStatus ();
 	return;
     }
-    cmd->forwardmove = ((signed char)*demo_in_p++);
-    cmd->sidemove = ((signed char)*demo_in_p++);
+    cmd->forwardmove = ((signed char)*demo_p++);
+    cmd->sidemove = ((signed char)*demo_p++);
 
     // If this is a longtics demo, read back in higher resolution
 
     if (longtics)
     {
-        cmd->angleturn = *demo_in_p++;
-        cmd->angleturn |= (*demo_in_p++) << 8;
+        cmd->angleturn = *demo_p++;
+        cmd->angleturn |= (*demo_p++) << 8;
     }
     else
     {
-        cmd->angleturn = ((unsigned char) *demo_in_p++)<<8;
+        cmd->angleturn = ((unsigned char) *demo_p++)<<8;
     }
 
-    cmd->buttons = (unsigned char)*demo_in_p++;
+    cmd->buttons = (unsigned char)*demo_p++;
+
+    *demo_pp = demo_p;
 } 
 
 // Increase the size of the demo buffer to allow unlimited demos
@@ -2019,7 +2023,7 @@ void G_WriteDemoTiccmd (ticcmd_t* cmd)
         }
     } 
 	
-    G_ReadDemoTiccmd (cmd);         // make SURE it is exactly the same 
+    G_ReadDemoTiccmd (cmd, &demo_out_p);         // make SURE it is exactly the same
 }",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1135,2019-01-28T11:22:39Z,2019-02-18T15:03:03Z,2019-02-24T21:01:21Z,MERGED,True,69,65,2,https://github.com/fabiangreffrath,doom: use separate pointers and buffers for demo recording and playback,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1135,https://github.com/fabiangreffrath,8,https://github.com/chocolate-doom/chocolate-doom/pull/1135#issuecomment-464861360,"This makes no difference for Chocolate Doom but acts as a preparation
for a continue-recording feature that @fragglet proposed for Crispy Doom in
fabiangreffrath#376
It helps maintaining a reasonably small interdiff between both ports.","Alternative approach:
diff --git a/src/doom/g_game.c b/src/doom/g_game.c
index daf31445..bc441307 100644
--- a/src/doom/g_game.c
+++ b/src/doom/g_game.c
@@ -76,7 +76,7 @@
 
 #define SAVEGAMESIZE	0x2c000
 
-void	G_ReadDemoTiccmd (ticcmd_t* cmd); 
+byte	*G_ReadDemoTiccmd (ticcmd_t* cmd, byte *demo_p);
 void	G_WriteDemoTiccmd (ticcmd_t* cmd); 
 void	G_PlayerReborn (int player); 
  
@@ -917,7 +917,7 @@ void G_Ticker (void)
 	    memcpy(cmd, &netcmds[i], sizeof(ticcmd_t));
 
 	    if (demoplayback) 
-		G_ReadDemoTiccmd (cmd); 
+		demo_in_p = G_ReadDemoTiccmd (cmd, demo_in_p);
 	    if (demorecording) 
 		G_WriteDemoTiccmd (cmd);
 	    
@@ -1910,30 +1910,32 @@ G_InitNew
 #define DEMOMARKER		0x80
 
 
-void G_ReadDemoTiccmd (ticcmd_t* cmd) 
+byte *G_ReadDemoTiccmd (ticcmd_t* cmd, byte *demo_p)
 { 
-    if (*demo_in_p == DEMOMARKER)
+    if (*demo_p == DEMOMARKER)
     {
 	// end of demo data stream
 	G_CheckDemoStatus ();
-	return;
+	return demo_p;
     }
-    cmd->forwardmove = ((signed char)*demo_in_p++);
-    cmd->sidemove = ((signed char)*demo_in_p++);
+    cmd->forwardmove = ((signed char)*demo_p++);
+    cmd->sidemove = ((signed char)*demo_p++);
 
     // If this is a longtics demo, read back in higher resolution
 
     if (longtics)
     {
-        cmd->angleturn = *demo_in_p++;
-        cmd->angleturn |= (*demo_in_p++) << 8;
+        cmd->angleturn = *demo_p++;
+        cmd->angleturn |= (*demo_p++) << 8;
     }
     else
     {
-        cmd->angleturn = ((unsigned char) *demo_in_p++)<<8;
+        cmd->angleturn = ((unsigned char) *demo_p++)<<8;
     }
 
-    cmd->buttons = (unsigned char)*demo_in_p++;
+    cmd->buttons = (unsigned char)*demo_p++;
+
+    return demo_p;
 } 
 
 // Increase the size of the demo buffer to allow unlimited demos
@@ -2019,7 +2021,7 @@ void G_WriteDemoTiccmd (ticcmd_t* cmd)
         }
     } 
 	
-    G_ReadDemoTiccmd (cmd);         // make SURE it is exactly the same 
+    demo_out_p = G_ReadDemoTiccmd (cmd, demo_out_p);         // make SURE it is exactly the same
 }",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1136,2019-01-29T18:08:50Z,2019-02-10T17:41:39Z,2019-02-10T17:41:50Z,MERGED,True,38,39,20,https://github.com/turol,Const correctness fixes in Strife,20,[],https://github.com/chocolate-doom/chocolate-doom/pull/1136,https://github.com/turol,1,https://github.com/chocolate-doom/chocolate-doom/pull/1136,Trivial but only minimally tested. The game starts up but I don't know if it actually works since I haven't played it.,Trivial but only minimally tested. The game starts up but I don't know if it actually works since I haven't played it.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1136,2019-01-29T18:08:50Z,2019-02-10T17:41:39Z,2019-02-10T17:41:50Z,MERGED,True,38,39,20,https://github.com/turol,Const correctness fixes in Strife,20,[],https://github.com/chocolate-doom/chocolate-doom/pull/1136,https://github.com/turol,2,https://github.com/chocolate-doom/chocolate-doom/pull/1136#issuecomment-460079068,Trivial but only minimally tested. The game starts up but I don't know if it actually works since I haven't played it.,@fragglet ping,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1136,2019-01-29T18:08:50Z,2019-02-10T17:41:39Z,2019-02-10T17:41:50Z,MERGED,True,38,39,20,https://github.com/turol,Const correctness fixes in Strife,20,[],https://github.com/chocolate-doom/chocolate-doom/pull/1136,https://github.com/turol,3,https://github.com/chocolate-doom/chocolate-doom/pull/1136#issuecomment-462122231,Trivial but only minimally tested. The game starts up but I don't know if it actually works since I haven't played it.,@fragglet ping again,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1136,2019-01-29T18:08:50Z,2019-02-10T17:41:39Z,2019-02-10T17:41:50Z,MERGED,True,38,39,20,https://github.com/turol,Const correctness fixes in Strife,20,[],https://github.com/chocolate-doom/chocolate-doom/pull/1136,https://github.com/fragglet,4,https://github.com/chocolate-doom/chocolate-doom/pull/1136#issuecomment-462154684,Trivial but only minimally tested. The game starts up but I don't know if it actually works since I haven't played it.,Apologies and thank you!,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1137,2019-02-11T20:57:12Z,2019-02-18T11:33:55Z,2019-02-18T11:34:00Z,MERGED,True,10,2,1,https://github.com/fabiangreffrath,doom: fix initialization value of floor->crush in EV_BuildStairs(),2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1137,https://github.com/fabiangreffrath,1,https://github.com/chocolate-doom/chocolate-doom/pull/1137,"Dammit! I think I have made a mistake when I added initialization for
the floor->type and floor->crush fields in EV_BuildStairs() in commit
12b7676.
I was under the assumption that, because 10 != false, it means the
same as true -- but this is wrong. The code in question explicitly
checks for (floor->crush == true) and not merely (floor->crush),
i.e. its value being unequal to zero.
This will have lead to a desyncing TNT demo reported in
https://www.doomworld.com/forum/topic/55558-final-doom-demos-complevel-4/?do=findComment&comment=1961738
I need an extra pair of eyes this time. Guys, please double-check
against the code in PrBoom+. The relevant piece of code starts here:
https://github.com/coelckers/prboom-plus/blob/master/prboom2/src/p_floor.c#L797","Dammit! I think I have made a mistake when I added initialization for
the floor->type and floor->crush fields in EV_BuildStairs() in commit
12b7676.
I was under the assumption that, because 10 != false, it means the
same as true -- but this is wrong. The code in question explicitly
checks for (floor->crush == true) and not merely (floor->crush),
i.e. its value being unequal to zero.
This will have lead to a desyncing TNT demo reported in
https://www.doomworld.com/forum/topic/55558-final-doom-demos-complevel-4/?do=findComment&comment=1961738
I need an extra pair of eyes this time. Guys, please double-check
against the code in PrBoom+. The relevant piece of code starts here:
https://github.com/coelckers/prboom-plus/blob/master/prboom2/src/p_floor.c#L797",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1137,2019-02-11T20:57:12Z,2019-02-18T11:33:55Z,2019-02-18T11:34:00Z,MERGED,True,10,2,1,https://github.com/fabiangreffrath,doom: fix initialization value of floor->crush in EV_BuildStairs(),2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1137,https://github.com/fabiangreffrath,2,https://github.com/chocolate-doom/chocolate-doom/pull/1137#issuecomment-462491540,"Dammit! I think I have made a mistake when I added initialization for
the floor->type and floor->crush fields in EV_BuildStairs() in commit
12b7676.
I was under the assumption that, because 10 != false, it means the
same as true -- but this is wrong. The code in question explicitly
checks for (floor->crush == true) and not merely (floor->crush),
i.e. its value being unequal to zero.
This will have lead to a desyncing TNT demo reported in
https://www.doomworld.com/forum/topic/55558-final-doom-demos-complevel-4/?do=findComment&comment=1961738
I need an extra pair of eyes this time. Guys, please double-check
against the code in PrBoom+. The relevant piece of code starts here:
https://github.com/coelckers/prboom-plus/blob/master/prboom2/src/p_floor.c#L797","BTW, the mm09-512.lmp demo, which was the reason for the faulty commit, still remains in sync after this change.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1137,2019-02-11T20:57:12Z,2019-02-18T11:33:55Z,2019-02-18T11:34:00Z,MERGED,True,10,2,1,https://github.com/fabiangreffrath,doom: fix initialization value of floor->crush in EV_BuildStairs(),2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1137,https://github.com/fabiangreffrath,3,https://github.com/chocolate-doom/chocolate-doom/pull/1137#issuecomment-463935286,"Dammit! I think I have made a mistake when I added initialization for
the floor->type and floor->crush fields in EV_BuildStairs() in commit
12b7676.
I was under the assumption that, because 10 != false, it means the
same as true -- but this is wrong. The code in question explicitly
checks for (floor->crush == true) and not merely (floor->crush),
i.e. its value being unequal to zero.
This will have lead to a desyncing TNT demo reported in
https://www.doomworld.com/forum/topic/55558-final-doom-demos-complevel-4/?do=findComment&comment=1961738
I need an extra pair of eyes this time. Guys, please double-check
against the code in PrBoom+. The relevant piece of code starts here:
https://github.com/coelckers/prboom-plus/blob/master/prboom2/src/p_floor.c#L797",I'd like to apply this on Monday if nobody objects.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1142,2019-02-28T11:42:57Z,2019-03-01T03:15:52Z,2019-03-01T03:15:56Z,MERGED,True,145,36,6,https://github.com/jmtd,"Generate a random ""pet"" player username",8,[],https://github.com/chocolate-doom/chocolate-doom/pull/1142,https://github.com/jmtd,1,https://github.com/chocolate-doom/chocolate-doom/pull/1142,"Instead of using environment variables like USER etc which might
leak private information accidentally, generate a random player
name from a pool of nouns and adjectives (e.g. ""Feisty Cacodemon"").
Inspired by Dustin Kirkland's ""petname"" library.
Fixes #1141.","Instead of using environment variables like USER etc which might
leak private information accidentally, generate a random player
name from a pool of nouns and adjectives (e.g. ""Feisty Cacodemon"").
Inspired by Dustin Kirkland's ""petname"" library.
Fixes #1141.",True,{'THUMBS_UP': ['https://github.com/fabiangreffrath']}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1142,2019-02-28T11:42:57Z,2019-03-01T03:15:52Z,2019-03-01T03:15:56Z,MERGED,True,145,36,6,https://github.com/jmtd,"Generate a random ""pet"" player username",8,[],https://github.com/chocolate-doom/chocolate-doom/pull/1142,https://github.com/fabiangreffrath,2,https://github.com/chocolate-doom/chocolate-doom/pull/1142#issuecomment-468282313,"Instead of using environment variables like USER etc which might
leak private information accidentally, generate a random player
name from a pool of nouns and adjectives (e.g. ""Feisty Cacodemon"").
Inspired by Dustin Kirkland's ""petname"" library.
Fixes #1141.","Unfortunately, this doesn't build on Windows due to the lack of srandom() and random().
We could probably implement a simple LCG for this (e.g. https://stackoverflow.com/a/15173515) or somehow use M_Random()?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1142,2019-02-28T11:42:57Z,2019-03-01T03:15:52Z,2019-03-01T03:15:56Z,MERGED,True,145,36,6,https://github.com/jmtd,"Generate a random ""pet"" player username",8,[],https://github.com/chocolate-doom/chocolate-doom/pull/1142,https://github.com/fabiangreffrath,3,https://github.com/chocolate-doom/chocolate-doom/pull/1142#issuecomment-468282530,"Instead of using environment variables like USER etc which might
leak private information accidentally, generate a random player
name from a pool of nouns and adjectives (e.g. ""Feisty Cacodemon"").
Inspired by Dustin Kirkland's ""petname"" library.
Fixes #1141.","Also, what was the source for the ""adjectives"" array?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1142,2019-02-28T11:42:57Z,2019-03-01T03:15:52Z,2019-03-01T03:15:56Z,MERGED,True,145,36,6,https://github.com/jmtd,"Generate a random ""pet"" player username",8,[],https://github.com/chocolate-doom/chocolate-doom/pull/1142,https://github.com/JNechaevsky,4,https://github.com/chocolate-doom/chocolate-doom/pull/1142#issuecomment-468294892,"Instead of using environment variables like USER etc which might
leak private information accidentally, generate a random player
name from a pool of nouns and adjectives (e.g. ""Feisty Cacodemon"").
Inspired by Dustin Kirkland's ""petname"" library.
Fixes #1141.","Gentlemen, excuse me, this feature looking good, but isn't it too... liberal? I mean, having a funky names may not fit well with archaic and conservative Doom reality.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1142,2019-02-28T11:42:57Z,2019-03-01T03:15:52Z,2019-03-01T03:15:56Z,MERGED,True,145,36,6,https://github.com/jmtd,"Generate a random ""pet"" player username",8,[],https://github.com/chocolate-doom/chocolate-doom/pull/1142,https://github.com/jmtd,5,https://github.com/chocolate-doom/chocolate-doom/pull/1142#issuecomment-468317778,"Instead of using environment variables like USER etc which might
leak private information accidentally, generate a random player
name from a pool of nouns and adjectives (e.g. ""Feisty Cacodemon"").
Inspired by Dustin Kirkland's ""petname"" library.
Fixes #1141.","Unfortunately, this doesn't build on Windows due to the lack of srandom() and random().

Bugger. I thought these were in the C standard (or I thought windows implemented all of that). I couldn't use M_Random since nothing in setup uses it already; unless I also did something to move the pointer around. Maybe something hooked into the event loop. I'm surprised SDL2 doesn't have a simple random API. I'll reconsider using M_Random.

Also, what was the source for the ""adjectives"" array?

Entirely off the top of my head. I deliberately did not look at the golang-petname database since it's Apache licensed. I briefly looked at the copyright of /usr/share/dict/words and decided that was a can of worms. So I just picked ones off the top of my head instead.

Gentlemen, excuse me, this feature looking good, but isn't it too... liberal? I mean, having a funky names may not fit well with archaic and conservative Doom reality

Is there a specific adjective (or noun) that you think might be troublesome? I avoided ones that I thought could have double-meanings or out of context problems, like ""pissed"", or Bishop (although Disciple sneaked in)",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1142,2019-02-28T11:42:57Z,2019-03-01T03:15:52Z,2019-03-01T03:15:56Z,MERGED,True,145,36,6,https://github.com/jmtd,"Generate a random ""pet"" player username",8,[],https://github.com/chocolate-doom/chocolate-doom/pull/1142,https://github.com/jmtd,6,https://github.com/chocolate-doom/chocolate-doom/pull/1142#issuecomment-468381306,"Instead of using environment variables like USER etc which might
leak private information accidentally, generate a random player
name from a pool of nouns and adjectives (e.g. ""Feisty Cacodemon"").
Inspired by Dustin Kirkland's ""petname"" library.
Fixes #1141.",I think I'll link setup against libdoom to get M_Random (can't see why not) and just call M_Random every time the event handler polls to move the pointer around unpredictably,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1142,2019-02-28T11:42:57Z,2019-03-01T03:15:52Z,2019-03-01T03:15:56Z,MERGED,True,145,36,6,https://github.com/jmtd,"Generate a random ""pet"" player username",8,[],https://github.com/chocolate-doom/chocolate-doom/pull/1142,https://github.com/fragglet,7,https://github.com/chocolate-doom/chocolate-doom/pull/1142#issuecomment-468423131,"Instead of using environment variables like USER etc which might
leak private information accidentally, generate a random player
name from a pool of nouns and adjectives (e.g. ""Feisty Cacodemon"").
Inspired by Dustin Kirkland's ""petname"" library.
Fixes #1141.",Additional comment: I initially thought this was a bit too cutesy and that the privacy thing seemed a bit overstated. But after reading #1141 I think it's a legitimate bug and this is a reasonable solution. Looking forward to when we get the first Doom community member who names themself based on their randomly-generated name :),True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1142,2019-02-28T11:42:57Z,2019-03-01T03:15:52Z,2019-03-01T03:15:56Z,MERGED,True,145,36,6,https://github.com/jmtd,"Generate a random ""pet"" player username",8,[],https://github.com/chocolate-doom/chocolate-doom/pull/1142,https://github.com/jmtd,8,https://github.com/chocolate-doom/chocolate-doom/pull/1142#issuecomment-468431588,"Instead of using environment variables like USER etc which might
leak private information accidentally, generate a random player
name from a pool of nouns and adjectives (e.g. ""Feisty Cacodemon"").
Inspired by Dustin Kirkland's ""petname"" library.
Fixes #1141.","Looking forward to when we get the first Doom community member who names themself based on their randomly-generated name :)

I did consider throwing in some old abandoned IRC nicknames (teppic? mystican?)…

I'd rather not link setup against libdoom as it will balloon the executable size massively.

OK. It's also impossible to link libdoom against the other games, and having petname.c in src/ needing m_random is a problem.

ANSI C defines rand() and srand() as standard library functions - can you use those?

Thanks! Yes I can't see why not. I think I just mis-remembered which routines were ANSI C. Thanks! Believe it or not it took me a few goes to remember which set of parenthesis characters to use for C arrays…",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1142,2019-02-28T11:42:57Z,2019-03-01T03:15:52Z,2019-03-01T03:15:56Z,MERGED,True,145,36,6,https://github.com/jmtd,"Generate a random ""pet"" player username",8,[],https://github.com/chocolate-doom/chocolate-doom/pull/1142,https://github.com/JNechaevsky,9,https://github.com/chocolate-doom/chocolate-doom/pull/1142#issuecomment-468439220,"Instead of using environment variables like USER etc which might
leak private information accidentally, generate a random player
name from a pool of nouns and adjectives (e.g. ""Feisty Cacodemon"").
Inspired by Dustin Kirkland's ""petname"" library.
Fixes #1141.","Is there a specific adjective (or noun) that you think might be troublesome? I avoided ones that I thought could have double-meanings or out of context problems, like ""pissed"", or Bishop (although Disciple sneaked in)

No-no, nothing wrong there. I just thought about something conservative like PlayerXXXX where X is just a random number.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1145,2019-03-02T02:22:04Z,2019-03-02T06:09:00Z,2019-03-02T06:31:26Z,MERGED,True,36,42,1,https://github.com/AXDOOMER,NEWS: Replace all names refering to AXDOOMER with 'AXDOOMER',1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1145,https://github.com/AXDOOMER,1,https://github.com/chocolate-doom/chocolate-doom/pull/1145,"It kind of bothers me that I have been credited using four different names in NEWS.md. I replaced all of them with 'AXDOOMER' because that's the last name under which I have been credited. It will make easier to know which name to use, because it's my Github username and most people are credited under their username.
I made sure that the lines that I modified follow the format of the file. The lines that I modified are not longer than 71 characters.
Thanks,
Alexandre","It kind of bothers me that I have been credited using four different names in NEWS.md. I replaced all of them with 'AXDOOMER' because that's the last name under which I have been credited. It will make easier to know which name to use, because it's my Github username and most people are credited under their username.
I made sure that the lines that I modified follow the format of the file. The lines that I modified are not longer than 71 characters.
Thanks,
Alexandre",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1145,2019-03-02T02:22:04Z,2019-03-02T06:09:00Z,2019-03-02T06:31:26Z,MERGED,True,36,42,1,https://github.com/AXDOOMER,NEWS: Replace all names refering to AXDOOMER with 'AXDOOMER',1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1145,https://github.com/chungy,2,https://github.com/chocolate-doom/chocolate-doom/pull/1145#issuecomment-468889946,"It kind of bothers me that I have been credited using four different names in NEWS.md. I replaced all of them with 'AXDOOMER' because that's the last name under which I have been credited. It will make easier to know which name to use, because it's my Github username and most people are credited under their username.
I made sure that the lines that I modified follow the format of the file. The lines that I modified are not longer than 71 characters.
Thanks,
Alexandre","Perfect, thanks :)",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1145,2019-03-02T02:22:04Z,2019-03-02T06:09:00Z,2019-03-02T06:31:26Z,MERGED,True,36,42,1,https://github.com/AXDOOMER,NEWS: Replace all names refering to AXDOOMER with 'AXDOOMER',1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1145,https://github.com/chungy,3,https://github.com/chocolate-doom/chocolate-doom/pull/1145#issuecomment-468890100,"It kind of bothers me that I have been credited using four different names in NEWS.md. I replaced all of them with 'AXDOOMER' because that's the last name under which I have been credited. It will make easier to know which name to use, because it's my Github username and most people are credited under their username.
I made sure that the lines that I modified follow the format of the file. The lines that I modified are not longer than 71 characters.
Thanks,
Alexandre","On second look, it seems your commit wasn't quite based on the HEAD of the repository, so other references still remain. I will try to clean it up. If I miss any, feel free to submit another PR.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1145,2019-03-02T02:22:04Z,2019-03-02T06:09:00Z,2019-03-02T06:31:26Z,MERGED,True,36,42,1,https://github.com/AXDOOMER,NEWS: Replace all names refering to AXDOOMER with 'AXDOOMER',1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1145,https://github.com/AXDOOMER,4,https://github.com/chocolate-doom/chocolate-doom/pull/1145#issuecomment-468890894,"It kind of bothers me that I have been credited using four different names in NEWS.md. I replaced all of them with 'AXDOOMER' because that's the last name under which I have been credited. It will make easier to know which name to use, because it's my Github username and most people are credited under their username.
I made sure that the lines that I modified follow the format of the file. The lines that I modified are not longer than 71 characters.
Thanks,
Alexandre","That's weird. Something went wrong and I used an older version.
I see: I forked and already had a fork of Chocolate-Doom on my account, so it didn't do anything and I didn't notice.
> git log:
commit d2cb788b2be38d6e4d3bf8aa499fee1f03fd2ca1 (HEAD -> master, origin/master, origin/HEAD)
Author: Alexandre-Xavier Labonté-Lamoureux <alexandrexavier@live.ca>
Date:   Fri Mar 1 21:13:57 2019 -0500

    NEWS: Replace all names refering to AXDOOMER with 'AXDOOMER'

commit 3de5232454854ac0b64801baf2350add8f777923
Author: Alexandre-Xavier Labonté-Lamoureux <alexandrexavier@live.ca>
Date:   Fri Oct 19 17:27:18 2018 -0400

    Hexen: Call W_GenerateHashTable()",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1145,2019-03-02T02:22:04Z,2019-03-02T06:09:00Z,2019-03-02T06:31:26Z,MERGED,True,36,42,1,https://github.com/AXDOOMER,NEWS: Replace all names refering to AXDOOMER with 'AXDOOMER',1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1145,https://github.com/AXDOOMER,5,https://github.com/chocolate-doom/chocolate-doom/pull/1145#issuecomment-468891105,"It kind of bothers me that I have been credited using four different names in NEWS.md. I replaced all of them with 'AXDOOMER' because that's the last name under which I have been credited. It will make easier to know which name to use, because it's my Github username and most people are credited under their username.
I made sure that the lines that I modified follow the format of the file. The lines that I modified are not longer than 71 characters.
Thanks,
Alexandre","Thanks @chungy , I checked NEWS.md and you didn't miss any.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1150,2019-03-13T07:52:54Z,2019-03-14T21:16:21Z,2019-03-15T05:57:04Z,MERGED,True,8,0,2,https://github.com/fabiangreffrath,sound: Initialize SDL_Mixer for digital/MIDI music playback,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/1150,https://github.com/fabiangreffrath,1,https://github.com/chocolate-doom/chocolate-doom/pull/1150,"This will lead to Mix_GetMusicDecoder() actually returning the
avaiable music backends and thus get midiproc back to working again.
Fixes #1147","This will lead to Mix_GetMusicDecoder() actually returning the
avaiable music backends and thus get midiproc back to working again.
Fixes #1147",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1150,2019-03-13T07:52:54Z,2019-03-14T21:16:21Z,2019-03-15T05:57:04Z,MERGED,True,8,0,2,https://github.com/fabiangreffrath,sound: Initialize SDL_Mixer for digital/MIDI music playback,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/1150,https://github.com/fabiangreffrath,2,https://github.com/chocolate-doom/chocolate-doom/pull/1150#issuecomment-472801849,"This will lead to Mix_GetMusicDecoder() actually returning the
avaiable music backends and thus get midiproc back to working again.
Fixes #1147","@fragglet I filed this as a pull request, because you expressed interest in where the Mix_Init() function is getting called. Could you take a glance over this, please?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1150,2019-03-13T07:52:54Z,2019-03-14T21:16:21Z,2019-03-15T05:57:04Z,MERGED,True,8,0,2,https://github.com/fabiangreffrath,sound: Initialize SDL_Mixer for digital/MIDI music playback,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/1150,https://github.com/fragglet,3,https://github.com/chocolate-doom/chocolate-doom/pull/1150#issuecomment-473066441,"This will lead to Mix_GetMusicDecoder() actually returning the
avaiable music backends and thus get midiproc back to working again.
Fixes #1147",Thanks!,True,{'THUMBS_UP': ['https://github.com/fabiangreffrath']}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1154,2019-03-19T16:14:06Z,2019-03-19T16:52:14Z,2019-03-19T16:52:14Z,MERGED,True,2,0,1,https://github.com/SoDOOManiac,Romero blue for netgame start screen background,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1154,https://github.com/SoDOOManiac,1,https://github.com/chocolate-doom/chocolate-doom/pull/1154,"@fragglet

Please send a pull request to fix the netgame wait screen if the inconsistency really bugs you.
Here you are :)","@fragglet

Please send a pull request to fix the netgame wait screen if the inconsistency really bugs you.
Here you are :)",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1156,2019-04-01T18:43:45Z,2020-04-19T16:50:34Z,2020-04-19T16:50:35Z,MERGED,True,11,4,1,https://github.com/devnexen,Checking possible wrong mapping in memory and other little tweaks.,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1156,https://github.com/devnexen,1,https://github.com/chocolate-doom/chocolate-doom/pull/1156,,,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1156,2019-04-01T18:43:45Z,2020-04-19T16:50:34Z,2020-04-19T16:50:35Z,MERGED,True,11,4,1,https://github.com/devnexen,Checking possible wrong mapping in memory and other little tweaks.,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1156,https://github.com/fabiangreffrath,2,https://github.com/chocolate-doom/chocolate-doom/pull/1156#issuecomment-499882162,,"The build throws some errors. Are you going to sort them out or should we close this PR?
  CC       w_file_posix.o
w_file_posix.c: In function ‘W_POSIX_OpenFile’:
w_file_posix.c:97:16: error: ‘wad_file_t {aka struct _wad_file_s}’ has no member named ‘result’
     result->wad.result = NULL;
                ^
w_file_posix.c: In function ‘W_POSIX_CloseFile’:
w_file_posix.c:117:18: error: ‘posix_wad_file_t {aka struct <anonymous>}’ has no member named ‘mapped’
     if (posix_wad->mapped)
                  ^
w_file_posix.c:119:24: error: ‘posix_wad_file_t {aka struct <anonymous>}’ has no member named ‘mapped’
        munmap(posix_wad->mapped, posix_wad->length);
                        ^
w_file_posix.c:119:43: error: ‘posix_wad_file_t {aka struct <anonymous>}’ has no member named ‘length’
        munmap(posix_wad->mapped, posix_wad->length);
                                           ^
Makefile:982: recipe for target 'w_file_posix.o' failed
make[3]: *** [w_file_posix.o] Error 1",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1162,2019-05-12T09:05:26Z,2019-05-12T14:00:56Z,2019-05-12T14:01:00Z,MERGED,True,15,2,1,https://github.com/jmtd,Report number of scrollers when there are too many,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1162,https://github.com/jmtd,1,https://github.com/chocolate-doom/chocolate-doom/pull/1162,"When bailing out after the vanilla scrolling wall limit is reached,
report the number of scrolling walls in the current map as part of
the error message. This aids mappers who are working as close to
the limit as possible.","When bailing out after the vanilla scrolling wall limit is reached,
report the number of scrolling walls in the current map as part of
the error message. This aids mappers who are working as close to
the limit as possible.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1163,2019-05-13T10:20:32Z,2019-05-16T20:48:46Z,2019-05-16T20:49:36Z,CLOSED,False,52,0,2,https://github.com/fabiangreffrath,support for adding PWADs and DEHACKED patches by drag-and-drop,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1163,https://github.com/fabiangreffrath,1,https://github.com/chocolate-doom/chocolate-doom/pull/1163,"Scan the command line for WAD or DEH filenames without any preceeding
regular parameters and add them as if they were passed to the -merge
or -deh parameters, respectively.
This allows for loading PWADs and DEHACKED patches by dragging them
onto the game executable in e.g. Windows Explorer.
Fixes #1161","Scan the command line for WAD or DEH filenames without any preceeding
regular parameters and add them as if they were passed to the -merge
or -deh parameters, respectively.
This allows for loading PWADs and DEHACKED patches by dragging them
onto the game executable in e.g. Windows Explorer.
Fixes #1161",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1163,2019-05-13T10:20:32Z,2019-05-16T20:48:46Z,2019-05-16T20:49:36Z,CLOSED,False,52,0,2,https://github.com/fabiangreffrath,support for adding PWADs and DEHACKED patches by drag-and-drop,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1163,https://github.com/jmtd,2,https://github.com/chocolate-doom/chocolate-doom/pull/1163#issuecomment-491897425,"Scan the command line for WAD or DEH filenames without any preceeding
regular parameters and add them as if they were passed to the -merge
or -deh parameters, respectively.
This allows for loading PWADs and DEHACKED patches by dragging them
onto the game executable in e.g. Windows Explorer.
Fixes #1161","That’s a tricky one, but demo lumps are by far the most common usage, so probably that.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1163,2019-05-13T10:20:32Z,2019-05-16T20:48:46Z,2019-05-16T20:49:36Z,CLOSED,False,52,0,2,https://github.com/fabiangreffrath,support for adding PWADs and DEHACKED patches by drag-and-drop,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1163,https://github.com/fragglet,3,https://github.com/chocolate-doom/chocolate-doom/pull/1163#issuecomment-491920859,"Scan the command line for WAD or DEH filenames without any preceeding
regular parameters and add them as if they were passed to the -merge
or -deh parameters, respectively.
This allows for loading PWADs and DEHACKED patches by dragging them
onto the game executable in e.g. Windows Explorer.
Fixes #1161","I've wanted to do this for a while, so thanks for putting the patch together. Can I recommend a different approach?
I would like if we could limit this so that it specifically only takes place if drag and drop was used. Unfortunately that can only really be done in a heuristic fashion as there's no way to find out how the program was invoked. Also, the patch as it currently stands looks like it will automatically pick out any filenames it finds inside the args list, which is definitely too magic.
How about this:

First, put everything in a #ifdef _WIN32 block so that this only works on Windows (we can potentially open up other platforms later; the macOS launcher already supports drag and drop)
Add something in i_main.c that detects the specific case where the command line only consists of WAD/DEH/HHE/SEH file paths (you can check for the extensions and make sure there are no arguments in the list which start with '-'). Then transform the command line appropriately. For example, [""c:\\a\\b\\c\\foo.wad"", ""e:\\b\\e\\f\\x.deh""] becomes [""-merge"", ""c:\\a\\b\\c\\foo.wad"", ""-deh"", ""e:\\b\\e\\f\\x.deh""].
Are there other heuristic things we can do on startup to check for drag and drop? For example, does Explorer always provide fully-qualified file paths that start [a-z]:\\? That might be something else to look for.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1163,2019-05-13T10:20:32Z,2019-05-16T20:48:46Z,2019-05-16T20:49:36Z,CLOSED,False,52,0,2,https://github.com/fabiangreffrath,support for adding PWADs and DEHACKED patches by drag-and-drop,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1163,https://github.com/fabiangreffrath,4,https://github.com/chocolate-doom/chocolate-doom/pull/1163#issuecomment-491935947,"Scan the command line for WAD or DEH filenames without any preceeding
regular parameters and add them as if they were passed to the -merge
or -deh parameters, respectively.
This allows for loading PWADs and DEHACKED patches by dragging them
onto the game executable in e.g. Windows Explorer.
Fixes #1161",Thanks for the feedback! I'll craft a new patch based on your suggested approach within the next few days.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1165,2019-05-16T20:48:21Z,2019-05-24T12:29:41Z,2019-05-24T12:29:48Z,CLOSED,False,128,0,3,https://github.com/fabiangreffrath,allow for loading PWADs and DEHACKED patches by drag-and-drop (take 2),4,[],https://github.com/chocolate-doom/chocolate-doom/pull/1165,https://github.com/fabiangreffrath,1,https://github.com/chocolate-doom/chocolate-doom/pull/1165,"Compose a proper command line from loose file names passed as
arguments. This allows for loading PWADs and DEHACKED patches by
dragging them onto the game executable in e.g. Windows Explorer.
Implementation loosely based on the one from PrBoom+, but vastly
simplified, since we don't support mixing with regular command line
parameters or response files.
Fixes #1161","Compose a proper command line from loose file names passed as
arguments. This allows for loading PWADs and DEHACKED patches by
dragging them onto the game executable in e.g. Windows Explorer.
Implementation loosely based on the one from PrBoom+, but vastly
simplified, since we don't support mixing with regular command line
parameters or response files.
Fixes #1161",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1165,2019-05-16T20:48:21Z,2019-05-24T12:29:41Z,2019-05-24T12:29:48Z,CLOSED,False,128,0,3,https://github.com/fabiangreffrath,allow for loading PWADs and DEHACKED patches by drag-and-drop (take 2),4,[],https://github.com/chocolate-doom/chocolate-doom/pull/1165,https://github.com/fabiangreffrath,2,https://github.com/chocolate-doom/chocolate-doom/pull/1165#issuecomment-493338902,"Compose a proper command line from loose file names passed as
arguments. This allows for loading PWADs and DEHACKED patches by
dragging them onto the game executable in e.g. Windows Explorer.
Implementation loosely based on the one from PrBoom+, but vastly
simplified, since we don't support mixing with regular command line
parameters or response files.
Fixes #1161",Ready for review. 😁,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1165,2019-05-16T20:48:21Z,2019-05-24T12:29:41Z,2019-05-24T12:29:48Z,CLOSED,False,128,0,3,https://github.com/fabiangreffrath,allow for loading PWADs and DEHACKED patches by drag-and-drop (take 2),4,[],https://github.com/chocolate-doom/chocolate-doom/pull/1165,https://github.com/fabiangreffrath,3,https://github.com/chocolate-doom/chocolate-doom/pull/1165#issuecomment-493396608,"Compose a proper command line from loose file names passed as
arguments. This allows for loading PWADs and DEHACKED patches by
dragging them onto the game executable in e.g. Windows Explorer.
Implementation loosely based on the one from PrBoom+, but vastly
simplified, since we don't support mixing with regular command line
parameters or response files.
Fixes #1161","Are there other heuristic things we can do on startup to check for drag and drop? For example, does Explorer always provide fully-qualified file paths that start [a-z]:\? That might be something else to look for.

Just tried with Windows 7 and indeed Explorer always passes the full file path to the executable if a file is dragged upon it. However, if I drag a file from a network share, the full path starts with \\ instead of [A-Z]:\. So, how far do we want to drive such heuristics?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1165,2019-05-16T20:48:21Z,2019-05-24T12:29:41Z,2019-05-24T12:29:48Z,CLOSED,False,128,0,3,https://github.com/fabiangreffrath,allow for loading PWADs and DEHACKED patches by drag-and-drop (take 2),4,[],https://github.com/chocolate-doom/chocolate-doom/pull/1165,https://github.com/fabiangreffrath,4,https://github.com/chocolate-doom/chocolate-doom/pull/1165#issuecomment-493410347,"Compose a proper command line from loose file names passed as
arguments. This allows for loading PWADs and DEHACKED patches by
dragging them onto the game executable in e.g. Windows Explorer.
Implementation loosely based on the one from PrBoom+, but vastly
simplified, since we don't support mixing with regular command line
parameters or response files.
Fixes #1161",if (strlen(myargv[i]) > 3 && (((myargv[i][0] | 0x20) >= 'A' && (myargv[i][0] | 0x20) <= 'Z' && myargv[i][1] == ':' && myargv[i][2] == '\\') || (myargv[i][0] == '\\' && myargv[i][1] == '\\'))),True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1168,2019-05-24T12:29:22Z,2019-06-02T23:29:29Z,2019-06-03T04:16:57Z,MERGED,True,175,0,6,https://github.com/fabiangreffrath,allow for loading WAD files and DEHACKED patches by drag-and-drop (take 3),1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1168,https://github.com/fabiangreffrath,1,https://github.com/chocolate-doom/chocolate-doom/pull/1168,"Compose a proper command line from loose file paths passed as
arguments. This allows for loading WAD files and DEHACKED patches by
dragging them onto the game executable in e.g. Windows Explorer.
Completely new implementation turned into a sorting problem and
extended with some heuristics to make sure the command line only
consists of fully-qualified path names.
Fixes #1161.","Compose a proper command line from loose file paths passed as
arguments. This allows for loading WAD files and DEHACKED patches by
dragging them onto the game executable in e.g. Windows Explorer.
Completely new implementation turned into a sorting problem and
extended with some heuristics to make sure the command line only
consists of fully-qualified path names.
Fixes #1161.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1168,2019-05-24T12:29:22Z,2019-06-02T23:29:29Z,2019-06-03T04:16:57Z,MERGED,True,175,0,6,https://github.com/fabiangreffrath,allow for loading WAD files and DEHACKED patches by drag-and-drop (take 3),1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1168,https://github.com/fragglet,2,https://github.com/chocolate-doom/chocolate-doom/pull/1168#issuecomment-498074306,"Compose a proper command line from loose file paths passed as
arguments. This allows for loading WAD files and DEHACKED patches by
dragging them onto the game executable in e.g. Windows Explorer.
Completely new implementation turned into a sorting problem and
extended with some heuristics to make sure the command line only
consists of fully-qualified path names.
Fixes #1161.",Looks great - thanks!,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1172,2019-06-03T06:46:52Z,2019-07-10T18:13:02Z,2019-07-10T18:13:03Z,MERGED,True,9,11,1,https://github.com/mfrancis95,Always try to load SKY3 when starting a new game in Doom II (resolve …,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1172,https://github.com/mfrancis95,1,https://github.com/chocolate-doom/chocolate-doom/pull/1172,…#921),…#921),True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1172,2019-06-03T06:46:52Z,2019-07-10T18:13:02Z,2019-07-10T18:13:03Z,MERGED,True,9,11,1,https://github.com/mfrancis95,Always try to load SKY3 when starting a new game in Doom II (resolve …,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1172,https://github.com/fabiangreffrath,2,https://github.com/chocolate-doom/chocolate-doom/pull/1172#issuecomment-508672341,…#921),"Did you check if the same logic is applied in all relevant versions of the EXE, i.e. 1.9, Ultimate and Final?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1172,2019-06-03T06:46:52Z,2019-07-10T18:13:02Z,2019-07-10T18:13:03Z,MERGED,True,9,11,1,https://github.com/mfrancis95,Always try to load SKY3 when starting a new game in Doom II (resolve …,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1172,https://github.com/nukeykt,3,https://github.com/chocolate-doom/chocolate-doom/pull/1172#issuecomment-508737601,…#921),"As this behavior is relevant for Linux Doom, i'd assume that all variants of 1.9 are affected too",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1172,2019-06-03T06:46:52Z,2019-07-10T18:13:02Z,2019-07-10T18:13:03Z,MERGED,True,9,11,1,https://github.com/mfrancis95,Always try to load SKY3 when starting a new game in Doom II (resolve …,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1172,https://github.com/mfrancis95,4,https://github.com/chocolate-doom/chocolate-doom/pull/1172#issuecomment-510151371,…#921),Here's the Linux Doom code for reference: https://github.com/id-Software/DOOM/blob/master/linuxdoom-1.10/g_game.c#L1455-L1479,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1172,2019-06-03T06:46:52Z,2019-07-10T18:13:02Z,2019-07-10T18:13:03Z,MERGED,True,9,11,1,https://github.com/mfrancis95,Always try to load SKY3 when starting a new game in Doom II (resolve …,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1172,https://github.com/fabiangreffrath,5,https://github.com/chocolate-doom/chocolate-doom/pull/1172#issuecomment-510170606,…#921),"Indeed, PrBoom+ has the same code:
https://github.com/coelckers/prboom-plus/blob/master/prboom2/src/g_game.c#L776
So, Choco's code seems to be a Chocoism.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1177,2019-06-07T12:56:59Z,2019-06-07T13:22:05Z,2019-06-07T13:22:05Z,MERGED,True,1,1,1,https://github.com/vilhelmgray,textscreen: Fix ambiguous textscreen CMake line,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1177,https://github.com/vilhelmgray,1,https://github.com/chocolate-doom/chocolate-doom/pull/1177,"The add_library CMake line for textscreen does not specify the type of
library, thus leaving the build behavior ambiguous. This can cause
problems when certain build systems are configured for dynamic linkage
build mode (e.g. Gentoo Linux defaults to ""BUILD_SHARE_LIBS=ON""),
causing the internal textscreen library to be compiled but not linked to
the chocolate-doom executable as would be expected.
This patch fixes the ambiguity by specifying a STATIC type for the
internal textscreen library, thus resolving the build issues experienced
on Gentoo Linux and other similar system environments.","The add_library CMake line for textscreen does not specify the type of
library, thus leaving the build behavior ambiguous. This can cause
problems when certain build systems are configured for dynamic linkage
build mode (e.g. Gentoo Linux defaults to ""BUILD_SHARE_LIBS=ON""),
causing the internal textscreen library to be compiled but not linked to
the chocolate-doom executable as would be expected.
This patch fixes the ambiguity by specifying a STATIC type for the
internal textscreen library, thus resolving the build issues experienced
on Gentoo Linux and other similar system environments.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1177,2019-06-07T12:56:59Z,2019-06-07T13:22:05Z,2019-06-07T13:22:05Z,MERGED,True,1,1,1,https://github.com/vilhelmgray,textscreen: Fix ambiguous textscreen CMake line,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1177,https://github.com/fabiangreffrath,2,https://github.com/chocolate-doom/chocolate-doom/pull/1177#issuecomment-499882461,"The add_library CMake line for textscreen does not specify the type of
library, thus leaving the build behavior ambiguous. This can cause
problems when certain build systems are configured for dynamic linkage
build mode (e.g. Gentoo Linux defaults to ""BUILD_SHARE_LIBS=ON""),
causing the internal textscreen library to be compiled but not linked to
the chocolate-doom executable as would be expected.
This patch fixes the ambiguity by specifying a STATIC type for the
internal textscreen library, thus resolving the build issues experienced
on Gentoo Linux and other similar system environments.",Yay CMake!,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1179,2019-06-17T07:02:44Z,2019-08-04T05:05:34Z,2019-09-11T07:01:21Z,CLOSED,False,22,2,3,https://github.com/fabiangreffrath,tolerate up to 1s delay when opening a file for writing,2,['help wanted'],https://github.com/chocolate-doom/chocolate-doom/pull/1179,https://github.com/fabiangreffrath,1,https://github.com/chocolate-doom/chocolate-doom/pull/1179,"This mitigates a racing condition that may occur when using midiproc
with an advanced audio backend, e.g. fluidsynth with a soundfont for
MIDI rendering.
Before a new song can be played, the main process sends to midiproc
the signal to stop playing the current song. However, it does not
wait for midiproc to succeed with this. Thus, it may happen that the
main process already attempts to override the music lump file on
disc with a new lump, before the previous one has been released by
the music backend. The attempt to open the music file for writing will
fail, but this is actually never checked in the code.
This approach repeatedly tries to open the file for writing for up to
about 1 second, which should be enough time for the music backend to
shut down the previous song and release the file handle.
Reportedly, this fixes #963.
Context: https://github.com/JNechaevsky/russian-doom/issues/127","This mitigates a racing condition that may occur when using midiproc
with an advanced audio backend, e.g. fluidsynth with a soundfont for
MIDI rendering.
Before a new song can be played, the main process sends to midiproc
the signal to stop playing the current song. However, it does not
wait for midiproc to succeed with this. Thus, it may happen that the
main process already attempts to override the music lump file on
disc with a new lump, before the previous one has been released by
the music backend. The attempt to open the music file for writing will
fail, but this is actually never checked in the code.
This approach repeatedly tries to open the file for writing for up to
about 1 second, which should be enough time for the music backend to
shut down the previous song and release the file handle.
Reportedly, this fixes #963.
Context: https://github.com/JNechaevsky/russian-doom/issues/127",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1179,2019-06-17T07:02:44Z,2019-08-04T05:05:34Z,2019-09-11T07:01:21Z,CLOSED,False,22,2,3,https://github.com/fabiangreffrath,tolerate up to 1s delay when opening a file for writing,2,['help wanted'],https://github.com/chocolate-doom/chocolate-doom/pull/1179,https://github.com/fabiangreffrath,2,https://github.com/chocolate-doom/chocolate-doom/pull/1179#issuecomment-504773434,"This mitigates a racing condition that may occur when using midiproc
with an advanced audio backend, e.g. fluidsynth with a soundfont for
MIDI rendering.
Before a new song can be played, the main process sends to midiproc
the signal to stop playing the current song. However, it does not
wait for midiproc to succeed with this. Thus, it may happen that the
main process already attempts to override the music lump file on
disc with a new lump, before the previous one has been released by
the music backend. The attempt to open the music file for writing will
fail, but this is actually never checked in the code.
This approach repeatedly tries to open the file for writing for up to
about 1 second, which should be enough time for the music backend to
shut down the previous song and release the file handle.
Reportedly, this fixes #963.
Context: https://github.com/JNechaevsky/russian-doom/issues/127",Some ack/nack would be nice.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1179,2019-06-17T07:02:44Z,2019-08-04T05:05:34Z,2019-09-11T07:01:21Z,CLOSED,False,22,2,3,https://github.com/fabiangreffrath,tolerate up to 1s delay when opening a file for writing,2,['help wanted'],https://github.com/chocolate-doom/chocolate-doom/pull/1179,https://github.com/fabiangreffrath,3,https://github.com/chocolate-doom/chocolate-doom/pull/1179#issuecomment-507961033,"This mitigates a racing condition that may occur when using midiproc
with an advanced audio backend, e.g. fluidsynth with a soundfont for
MIDI rendering.
Before a new song can be played, the main process sends to midiproc
the signal to stop playing the current song. However, it does not
wait for midiproc to succeed with this. Thus, it may happen that the
main process already attempts to override the music lump file on
disc with a new lump, before the previous one has been released by
the music backend. The attempt to open the music file for writing will
fail, but this is actually never checked in the code.
This approach repeatedly tries to open the file for writing for up to
about 1 second, which should be enough time for the music backend to
shut down the previous song and release the file handle.
Reportedly, this fixes #963.
Context: https://github.com/JNechaevsky/russian-doom/issues/127",I'll merge this after the weekend if nobody objects until then.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1179,2019-06-17T07:02:44Z,2019-08-04T05:05:34Z,2019-09-11T07:01:21Z,CLOSED,False,22,2,3,https://github.com/fabiangreffrath,tolerate up to 1s delay when opening a file for writing,2,['help wanted'],https://github.com/chocolate-doom/chocolate-doom/pull/1179,https://github.com/fragglet,4,https://github.com/chocolate-doom/chocolate-doom/pull/1179#issuecomment-508815537,"This mitigates a racing condition that may occur when using midiproc
with an advanced audio backend, e.g. fluidsynth with a soundfont for
MIDI rendering.
Before a new song can be played, the main process sends to midiproc
the signal to stop playing the current song. However, it does not
wait for midiproc to succeed with this. Thus, it may happen that the
main process already attempts to override the music lump file on
disc with a new lump, before the previous one has been released by
the music backend. The attempt to open the music file for writing will
fail, but this is actually never checked in the code.
This approach repeatedly tries to open the file for writing for up to
about 1 second, which should be enough time for the music backend to
shut down the previous song and release the file handle.
Reportedly, this fixes #963.
Context: https://github.com/JNechaevsky/russian-doom/issues/127","Going to have to nack this. This is a weird internal API to be adding and looks like the wrong solution to the problem.
Reading through some of the context it looks like fabiangreffrath/crispy-doom@a8fd660 was the right solution to the problem - this is a synchronization issue. However, it looks like in that commit, nothing actually waits on the ACK to be received?
I would take it a step further: all commands sent to midiproc ought to be acked, and the API calls to issue the commands ought to block until the command has completed. I see there's already a similar command type in place for RegisterSong.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1179,2019-06-17T07:02:44Z,2019-08-04T05:05:34Z,2019-09-11T07:01:21Z,CLOSED,False,22,2,3,https://github.com/fabiangreffrath,tolerate up to 1s delay when opening a file for writing,2,['help wanted'],https://github.com/chocolate-doom/chocolate-doom/pull/1179,https://github.com/fragglet,5,https://github.com/chocolate-doom/chocolate-doom/pull/1179#issuecomment-508816213,"This mitigates a racing condition that may occur when using midiproc
with an advanced audio backend, e.g. fluidsynth with a soundfont for
MIDI rendering.
Before a new song can be played, the main process sends to midiproc
the signal to stop playing the current song. However, it does not
wait for midiproc to succeed with this. Thus, it may happen that the
main process already attempts to override the music lump file on
disc with a new lump, before the previous one has been released by
the music backend. The attempt to open the music file for writing will
fail, but this is actually never checked in the code.
This approach repeatedly tries to open the file for writing for up to
about 1 second, which should be enough time for the music backend to
shut down the previous song and release the file handle.
Reportedly, this fixes #963.
Context: https://github.com/JNechaevsky/russian-doom/issues/127","Oh, my mistake - I missed the ExpectPipe() call. So that commit of yours ought to work - any idea why it doesn't?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1179,2019-06-17T07:02:44Z,2019-08-04T05:05:34Z,2019-09-11T07:01:21Z,CLOSED,False,22,2,3,https://github.com/fabiangreffrath,tolerate up to 1s delay when opening a file for writing,2,['help wanted'],https://github.com/chocolate-doom/chocolate-doom/pull/1179,https://github.com/fragglet,6,https://github.com/chocolate-doom/chocolate-doom/pull/1179#issuecomment-508818579,"This mitigates a racing condition that may occur when using midiproc
with an advanced audio backend, e.g. fluidsynth with a soundfont for
MIDI rendering.
Before a new song can be played, the main process sends to midiproc
the signal to stop playing the current song. However, it does not
wait for midiproc to succeed with this. Thus, it may happen that the
main process already attempts to override the music lump file on
disc with a new lump, before the previous one has been released by
the music backend. The attempt to open the music file for writing will
fail, but this is actually never checked in the code.
This approach repeatedly tries to open the file for writing for up to
about 1 second, which should be enough time for the music backend to
shut down the previous song and release the file handle.
Reportedly, this fixes #963.
Context: https://github.com/JNechaevsky/russian-doom/issues/127","Okay, so here's my analysis after looking at this a bit more:
First off, I stand by what I said: the functions which send commands to midiproc (eg. I_MidiPipe_StopSong) should always block until an ack has been received back from midiproc to confirm that the command has completed. No exceptions. It's almost impossible to reason about these kinds of problems if there's no form of synchronization.
Secondly, there's an asymmetry in the midiproc API which I think makes things more complicated: there's a command for MIDIPIPE_PACKET_TYPE_REGISTER_SONG but none for MIDIPIPE_PACKET_TYPE_UNREGISTER_SONG. I can see in your commit that you're trying to patch around the issue by making StopSong also call UnregisterSong. Let's keep things simple and just plumb through UnregisterSong as well.
I suspect if you do these two things the race condition will go away.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1179,2019-06-17T07:02:44Z,2019-08-04T05:05:34Z,2019-09-11T07:01:21Z,CLOSED,False,22,2,3,https://github.com/fabiangreffrath,tolerate up to 1s delay when opening a file for writing,2,['help wanted'],https://github.com/chocolate-doom/chocolate-doom/pull/1179,https://github.com/fabiangreffrath,7,https://github.com/chocolate-doom/chocolate-doom/pull/1179#issuecomment-510176844,"This mitigates a racing condition that may occur when using midiproc
with an advanced audio backend, e.g. fluidsynth with a soundfont for
MIDI rendering.
Before a new song can be played, the main process sends to midiproc
the signal to stop playing the current song. However, it does not
wait for midiproc to succeed with this. Thus, it may happen that the
main process already attempts to override the music lump file on
disc with a new lump, before the previous one has been released by
the music backend. The attempt to open the music file for writing will
fail, but this is actually never checked in the code.
This approach repeatedly tries to open the file for writing for up to
about 1 second, which should be enough time for the music backend to
shut down the previous song and release the file handle.
Reportedly, this fixes #963.
Context: https://github.com/JNechaevsky/russian-doom/issues/127",I have no idea when I'll find time to look after this.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1179,2019-06-17T07:02:44Z,2019-08-04T05:05:34Z,2019-09-11T07:01:21Z,CLOSED,False,22,2,3,https://github.com/fabiangreffrath,tolerate up to 1s delay when opening a file for writing,2,['help wanted'],https://github.com/chocolate-doom/chocolate-doom/pull/1179,https://github.com/fragglet,8,https://github.com/chocolate-doom/chocolate-doom/pull/1179#issuecomment-510551286,"This mitigates a racing condition that may occur when using midiproc
with an advanced audio backend, e.g. fluidsynth with a soundfont for
MIDI rendering.
Before a new song can be played, the main process sends to midiproc
the signal to stop playing the current song. However, it does not
wait for midiproc to succeed with this. Thus, it may happen that the
main process already attempts to override the music lump file on
disc with a new lump, before the previous one has been released by
the music backend. The attempt to open the music file for writing will
fail, but this is actually never checked in the code.
This approach repeatedly tries to open the file for writing for up to
about 1 second, which should be enough time for the music backend to
shut down the previous song and release the file handle.
Reportedly, this fixes #963.
Context: https://github.com/JNechaevsky/russian-doom/issues/127",Sorry to rain on your parade Fabian. I do want to see the bug get fixed but I just don't think this is the right solution.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1179,2019-06-17T07:02:44Z,2019-08-04T05:05:34Z,2019-09-11T07:01:21Z,CLOSED,False,22,2,3,https://github.com/fabiangreffrath,tolerate up to 1s delay when opening a file for writing,2,['help wanted'],https://github.com/chocolate-doom/chocolate-doom/pull/1179,https://github.com/fabiangreffrath,9,https://github.com/chocolate-doom/chocolate-doom/pull/1179#issuecomment-510580672,"This mitigates a racing condition that may occur when using midiproc
with an advanced audio backend, e.g. fluidsynth with a soundfont for
MIDI rendering.
Before a new song can be played, the main process sends to midiproc
the signal to stop playing the current song. However, it does not
wait for midiproc to succeed with this. Thus, it may happen that the
main process already attempts to override the music lump file on
disc with a new lump, before the previous one has been released by
the music backend. The attempt to open the music file for writing will
fail, but this is actually never checked in the code.
This approach repeatedly tries to open the file for writing for up to
about 1 second, which should be enough time for the music backend to
shut down the previous song and release the file handle.
Reportedly, this fixes #963.
Context: https://github.com/JNechaevsky/russian-doom/issues/127","No reason to feel sorry, I perfectly agree with you! The reason why I came up with this pragmatic hack is that I believed I had already tried out any reasonable alternative. But you just showed up two more points to consider for a cleaner implementation.
I will try these out, the question is just when. I am currently mostly home alone with our new baby for the next 8 weeks (parenting time in Germany) and implementing something complex like this on Windows requires both time and patience -- and I am currently short of both. 😉",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1179,2019-06-17T07:02:44Z,2019-08-04T05:05:34Z,2019-09-11T07:01:21Z,CLOSED,False,22,2,3,https://github.com/fabiangreffrath,tolerate up to 1s delay when opening a file for writing,2,['help wanted'],https://github.com/chocolate-doom/chocolate-doom/pull/1179,https://github.com/fragglet,10,https://github.com/chocolate-doom/chocolate-doom/pull/1179#issuecomment-510610124,"This mitigates a racing condition that may occur when using midiproc
with an advanced audio backend, e.g. fluidsynth with a soundfont for
MIDI rendering.
Before a new song can be played, the main process sends to midiproc
the signal to stop playing the current song. However, it does not
wait for midiproc to succeed with this. Thus, it may happen that the
main process already attempts to override the music lump file on
disc with a new lump, before the previous one has been released by
the music backend. The attempt to open the music file for writing will
fail, but this is actually never checked in the code.
This approach repeatedly tries to open the file for writing for up to
about 1 second, which should be enough time for the music backend to
shut down the previous song and release the file handle.
Reportedly, this fixes #963.
Context: https://github.com/JNechaevsky/russian-doom/issues/127",Congrats on the new baby!,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1183,2019-06-26T09:46:51Z,2019-07-11T16:20:34Z,2019-07-11T16:20:43Z,MERGED,True,10,0,1,https://github.com/fabiangreffrath,doom: support common auto-loaded files for all Doom flavors,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1183,https://github.com/fabiangreffrath,1,https://github.com/chocolate-doom/chocolate-doom/pull/1183,Fixes: #1182,Fixes: #1182,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1183,2019-06-26T09:46:51Z,2019-07-11T16:20:34Z,2019-07-11T16:20:43Z,MERGED,True,10,0,1,https://github.com/fabiangreffrath,doom: support common auto-loaded files for all Doom flavors,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1183,https://github.com/fabiangreffrath,2,https://github.com/chocolate-doom/chocolate-doom/pull/1183#issuecomment-506273593,Fixes: #1182,"To provide some more context: I have a similar feature in Crispy that I'd currently like to get rid of, but it applies to all IWADs.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1183,2019-06-26T09:46:51Z,2019-07-11T16:20:34Z,2019-07-11T16:20:43Z,MERGED,True,10,0,1,https://github.com/fabiangreffrath,doom: support common auto-loaded files for all Doom flavors,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1183,https://github.com/fabiangreffrath,3,https://github.com/chocolate-doom/chocolate-doom/pull/1183#issuecomment-507961066,Fixes: #1182,I'll merge this after the weekend if nobody objects until then.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1183,2019-06-26T09:46:51Z,2019-07-11T16:20:34Z,2019-07-11T16:20:43Z,MERGED,True,10,0,1,https://github.com/fabiangreffrath,doom: support common auto-loaded files for all Doom flavors,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1183,https://github.com/fragglet,4,https://github.com/chocolate-doom/chocolate-doom/pull/1183#issuecomment-508819460,Fixes: #1182,"Seems good. Only question: is ""common"" a good name? These only get loaded with Doom IWADs, not Heretic/Hexen/Strife - this is correct behavior but the name might suggest they would get loaded with all of them.
I can't think of a better name OTOH so I'm happy going with ""common"" but maybe you can think of something.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1183,2019-06-26T09:46:51Z,2019-07-11T16:20:34Z,2019-07-11T16:20:43Z,MERGED,True,10,0,1,https://github.com/fabiangreffrath,doom: support common auto-loaded files for all Doom flavors,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1183,https://github.com/fabiangreffrath,5,https://github.com/chocolate-doom/chocolate-doom/pull/1183#issuecomment-509139503,Fixes: #1182,"We could add ""doom"" to the directory name and call it something like
doom-common
common-doom
doom-any
any-doom
doom-all
all-doom
or whatever you prefer. 😉",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1183,2019-06-26T09:46:51Z,2019-07-11T16:20:34Z,2019-07-11T16:20:43Z,MERGED,True,10,0,1,https://github.com/fabiangreffrath,doom: support common auto-loaded files for all Doom flavors,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1183,https://github.com/fragglet,6,https://github.com/chocolate-doom/chocolate-doom/pull/1183#issuecomment-510550913,Fixes: #1182,Let's go with doom-all then.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1183,2019-06-26T09:46:51Z,2019-07-11T16:20:34Z,2019-07-11T16:20:43Z,MERGED,True,10,0,1,https://github.com/fabiangreffrath,doom: support common auto-loaded files for all Doom flavors,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1183,https://github.com/fabiangreffrath,7,https://github.com/chocolate-doom/chocolate-doom/pull/1183#issuecomment-510555226,Fixes: #1182,"Done so, thanks!",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1185,2019-07-07T23:49:16Z,2019-07-11T16:07:30Z,2019-07-11T16:07:30Z,CLOSED,False,33,1,1,https://github.com/barspinoff,"Fixed playback on PC Speaker, added x64 support",2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1185,https://github.com/barspinoff,1,https://github.com/chocolate-doom/chocolate-doom/pull/1185,For work you need a library InpOut32.dll (https://www.dropbox.com/s/i6yqhj4ywx6fxg6/inpout32.dll?dl=0),For work you need a library InpOut32.dll (https://www.dropbox.com/s/i6yqhj4ywx6fxg6/inpout32.dll?dl=0),True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1185,2019-07-07T23:49:16Z,2019-07-11T16:07:30Z,2019-07-11T16:07:30Z,CLOSED,False,33,1,1,https://github.com/barspinoff,"Fixed playback on PC Speaker, added x64 support",2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1185,https://github.com/jmtd,2,https://github.com/chocolate-doom/chocolate-doom/pull/1185#issuecomment-509560395,For work you need a library InpOut32.dll (https://www.dropbox.com/s/i6yqhj4ywx6fxg6/inpout32.dll?dl=0),I think we need to know more about the provenance of InpOut32.dll: What is it? Who wrote it? Who holds the copyright for it? Is it from an open source project? Thanks!,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1185,2019-07-07T23:49:16Z,2019-07-11T16:07:30Z,2019-07-11T16:07:30Z,CLOSED,False,33,1,1,https://github.com/barspinoff,"Fixed playback on PC Speaker, added x64 support",2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1185,https://github.com/barspinoff,3,https://github.com/chocolate-doom/chocolate-doom/pull/1185#issuecomment-510164622,For work you need a library InpOut32.dll (https://www.dropbox.com/s/i6yqhj4ywx6fxg6/inpout32.dll?dl=0),"InpOut32 (http://www.highrez.co.uk/downloads/inpout32) it's a free open-source library written by Logix4U that provides access to I/O ports using self driver on modern Windows systems. With a InpOut32 you can directly access to hardware, that makes it possible to use pc speaker in x64 if connected",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1185,2019-07-07T23:49:16Z,2019-07-11T16:07:30Z,2019-07-11T16:07:30Z,CLOSED,False,33,1,1,https://github.com/barspinoff,"Fixed playback on PC Speaker, added x64 support",2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1185,https://github.com/chungy,4,https://github.com/chocolate-doom/chocolate-doom/pull/1185#issuecomment-510323322,For work you need a library InpOut32.dll (https://www.dropbox.com/s/i6yqhj4ywx6fxg6/inpout32.dll?dl=0),"I don't think I'd be comfortable with relying on this library, especially since it requires the user to install a special driver on their system.
The source code does appear to be licensed in a MIT source of way, which is good, though it only comes with visual studio build files and might be a problem to compile it as such. (We for sure wouldn't just be linking to some Dropbox account)",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1185,2019-07-07T23:49:16Z,2019-07-11T16:07:30Z,2019-07-11T16:07:30Z,CLOSED,False,33,1,1,https://github.com/barspinoff,"Fixed playback on PC Speaker, added x64 support",2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1185,https://github.com/fabiangreffrath,5,https://github.com/chocolate-doom/chocolate-doom/pull/1185#issuecomment-510395839,For work you need a library InpOut32.dll (https://www.dropbox.com/s/i6yqhj4ywx6fxg6/inpout32.dll?dl=0),I agree this looks a bit dubious.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1185,2019-07-07T23:49:16Z,2019-07-11T16:07:30Z,2019-07-11T16:07:30Z,CLOSED,False,33,1,1,https://github.com/barspinoff,"Fixed playback on PC Speaker, added x64 support",2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1185,https://github.com/barspinoff,6,https://github.com/chocolate-doom/chocolate-doom/pull/1185#issuecomment-510455614,For work you need a library InpOut32.dll (https://www.dropbox.com/s/i6yqhj4ywx6fxg6/inpout32.dll?dl=0),"This driver does not contain malware and is designed exclusively for working with ports. In addition, it's set automatically",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1185,2019-07-07T23:49:16Z,2019-07-11T16:07:30Z,2019-07-11T16:07:30Z,CLOSED,False,33,1,1,https://github.com/barspinoff,"Fixed playback on PC Speaker, added x64 support",2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1185,https://github.com/fragglet,7,https://github.com/chocolate-doom/chocolate-doom/pull/1185#issuecomment-510550309,For work you need a library InpOut32.dll (https://www.dropbox.com/s/i6yqhj4ywx6fxg6/inpout32.dll?dl=0),"I'm going to summarily close this for several reasons:

Firstly, I don't believe this does what it claims to do: it adds a new function named MyBeep that is not called anywhere, while re-enabling other code that is known to be broken.
Third party library dependency is okay but I'm not thrilled about the fact that this does direct hardware access. To be honest I think I'd rather just direct users to use the SDL-based PC speaker emulation. It's a niche enough feature that I don't think this is worth doing.
Code quality issues: there is an abundance of magic numbers being used here with no constants or even comments which explain their meaning
Finally, this doesn't meet the formatting guidelines laid out in HACKING.md - specifically the mixing of tabs and spaces.

Thanks for taking the time to open the PR though and I don't want to discourage you from making future contributions to the project.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1186,2019-07-14T04:07:07Z,2019-08-04T05:05:24Z,2019-09-11T07:01:21Z,MERGED,True,76,32,5,https://github.com/fragglet,Clean up of midiproc interface to prevent race conditions.,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/1186,https://github.com/fragglet,1,https://github.com/chocolate-doom/chocolate-doom/pull/1186,"This implements my suggested fix for #963  as described in #1179:
Firstly, functions which send commands to midiproc (eg. I_MidiPipe_StopSong) should always block until an ack has been received back from midiproc to confirm that the command has completed. No exceptions. It's almost impossible to reason about these kinds of bugs if there's no form of synchronization.
Secondly, there's an asymmetry in the midiproc API which I think makes things more complicated: there's a command for MIDIPIPE_PACKET_TYPE_REGISTER_SONG but none for MIDIPIPE_PACKET_TYPE_UNREGISTER_SONG. This can cause problems because unregistration happens in a different way when using the midiproc. Let's keep things simple and just plumb through UnregisterSong as well.","This implements my suggested fix for #963  as described in #1179:
Firstly, functions which send commands to midiproc (eg. I_MidiPipe_StopSong) should always block until an ack has been received back from midiproc to confirm that the command has completed. No exceptions. It's almost impossible to reason about these kinds of bugs if there's no form of synchronization.
Secondly, there's an asymmetry in the midiproc API which I think makes things more complicated: there's a command for MIDIPIPE_PACKET_TYPE_REGISTER_SONG but none for MIDIPIPE_PACKET_TYPE_UNREGISTER_SONG. This can cause problems because unregistration happens in a different way when using the midiproc. Let's keep things simple and just plumb through UnregisterSong as well.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1186,2019-07-14T04:07:07Z,2019-08-04T05:05:24Z,2019-09-11T07:01:21Z,MERGED,True,76,32,5,https://github.com/fragglet,Clean up of midiproc interface to prevent race conditions.,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/1186,https://github.com/fragglet,2,https://github.com/chocolate-doom/chocolate-doom/pull/1186#issuecomment-511171533,"This implements my suggested fix for #963  as described in #1179:
Firstly, functions which send commands to midiproc (eg. I_MidiPipe_StopSong) should always block until an ack has been received back from midiproc to confirm that the command has completed. No exceptions. It's almost impossible to reason about these kinds of bugs if there's no form of synchronization.
Secondly, there's an asymmetry in the midiproc API which I think makes things more complicated: there's a command for MIDIPIPE_PACKET_TYPE_REGISTER_SONG but none for MIDIPIPE_PACKET_TYPE_UNREGISTER_SONG. This can cause problems because unregistration happens in a different way when using the midiproc. Let's keep things simple and just plumb through UnregisterSong as well.",@fabiangreffrath @AlexMax to review,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1186,2019-07-14T04:07:07Z,2019-08-04T05:05:24Z,2019-09-11T07:01:21Z,MERGED,True,76,32,5,https://github.com/fragglet,Clean up of midiproc interface to prevent race conditions.,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/1186,https://github.com/fragglet,3,https://github.com/chocolate-doom/chocolate-doom/pull/1186#issuecomment-511171556,"This implements my suggested fix for #963  as described in #1179:
Firstly, functions which send commands to midiproc (eg. I_MidiPipe_StopSong) should always block until an ack has been received back from midiproc to confirm that the command has completed. No exceptions. It's almost impossible to reason about these kinds of bugs if there's no form of synchronization.
Secondly, there's an asymmetry in the midiproc API which I think makes things more complicated: there's a command for MIDIPIPE_PACKET_TYPE_REGISTER_SONG but none for MIDIPIPE_PACKET_TYPE_UNREGISTER_SONG. This can cause problems because unregistration happens in a different way when using the midiproc. Let's keep things simple and just plumb through UnregisterSong as well.",I haven't tested this on a real Windows system so if someone can try it out and confirm that it doesn't break midiproc entirely that would be great.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1186,2019-07-14T04:07:07Z,2019-08-04T05:05:24Z,2019-09-11T07:01:21Z,MERGED,True,76,32,5,https://github.com/fragglet,Clean up of midiproc interface to prevent race conditions.,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/1186,https://github.com/fabiangreffrath,4,https://github.com/chocolate-doom/chocolate-doom/pull/1186#issuecomment-511292372,"This implements my suggested fix for #963  as described in #1179:
Firstly, functions which send commands to midiproc (eg. I_MidiPipe_StopSong) should always block until an ack has been received back from midiproc to confirm that the command has completed. No exceptions. It's almost impossible to reason about these kinds of bugs if there's no form of synchronization.
Secondly, there's an asymmetry in the midiproc API which I think makes things more complicated: there's a command for MIDIPIPE_PACKET_TYPE_REGISTER_SONG but none for MIDIPIPE_PACKET_TYPE_UNREGISTER_SONG. This can cause problems because unregistration happens in a different way when using the midiproc. Let's keep things simple and just plumb through UnregisterSong as well.","It looks good, but I currently don't have access to a Windows system to test this more thoroughly.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1186,2019-07-14T04:07:07Z,2019-08-04T05:05:24Z,2019-09-11T07:01:21Z,MERGED,True,76,32,5,https://github.com/fragglet,Clean up of midiproc interface to prevent race conditions.,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/1186,https://github.com/AlexMax,5,https://github.com/chocolate-doom/chocolate-doom/pull/1186#issuecomment-511638625,"This implements my suggested fix for #963  as described in #1179:
Firstly, functions which send commands to midiproc (eg. I_MidiPipe_StopSong) should always block until an ack has been received back from midiproc to confirm that the command has completed. No exceptions. It's almost impossible to reason about these kinds of bugs if there's no form of synchronization.
Secondly, there's an asymmetry in the midiproc API which I think makes things more complicated: there's a command for MIDIPIPE_PACKET_TYPE_REGISTER_SONG but none for MIDIPIPE_PACKET_TYPE_UNREGISTER_SONG. This can cause problems because unregistration happens in a different way when using the midiproc. Let's keep things simple and just plumb through UnregisterSong as well.","I had to fix some stuff to get a working build on Windows, but when I did, the sound and music volume were tied together even with the midiproc executable in the same directory, so something is up.  I'll take a closer look at what's going on.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1186,2019-07-14T04:07:07Z,2019-08-04T05:05:24Z,2019-09-11T07:01:21Z,MERGED,True,76,32,5,https://github.com/fragglet,Clean up of midiproc interface to prevent race conditions.,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/1186,https://github.com/fabiangreffrath,6,https://github.com/chocolate-doom/chocolate-doom/pull/1186#issuecomment-511728337,"This implements my suggested fix for #963  as described in #1179:
Firstly, functions which send commands to midiproc (eg. I_MidiPipe_StopSong) should always block until an ack has been received back from midiproc to confirm that the command has completed. No exceptions. It's almost impossible to reason about these kinds of bugs if there's no form of synchronization.
Secondly, there's an asymmetry in the midiproc API which I think makes things more complicated: there's a command for MIDIPIPE_PACKET_TYPE_REGISTER_SONG but none for MIDIPIPE_PACKET_TYPE_UNREGISTER_SONG. This can cause problems because unregistration happens in a different way when using the midiproc. Let's keep things simple and just plumb through UnregisterSong as well.","I had to fix some stuff to get a working build on Windows

Could you post what you needed to change, please?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1186,2019-07-14T04:07:07Z,2019-08-04T05:05:24Z,2019-09-11T07:01:21Z,MERGED,True,76,32,5,https://github.com/fragglet,Clean up of midiproc interface to prevent race conditions.,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/1186,https://github.com/AlexMax,7,https://github.com/chocolate-doom/chocolate-doom/pull/1186#issuecomment-512581146,"This implements my suggested fix for #963  as described in #1179:
Firstly, functions which send commands to midiproc (eg. I_MidiPipe_StopSong) should always block until an ack has been received back from midiproc to confirm that the command has completed. No exceptions. It's almost impossible to reason about these kinds of bugs if there's no form of synchronization.
Secondly, there's an asymmetry in the midiproc API which I think makes things more complicated: there's a command for MIDIPIPE_PACKET_TYPE_REGISTER_SONG but none for MIDIPIPE_PACKET_TYPE_UNREGISTER_SONG. This can cause problems because unregistration happens in a different way when using the midiproc. Let's keep things simple and just plumb through UnregisterSong as well.","@fabiangreffrath Sure, check out #1187",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1186,2019-07-14T04:07:07Z,2019-08-04T05:05:24Z,2019-09-11T07:01:21Z,MERGED,True,76,32,5,https://github.com/fragglet,Clean up of midiproc interface to prevent race conditions.,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/1186,https://github.com/fragglet,8,https://github.com/chocolate-doom/chocolate-doom/pull/1186#issuecomment-517953485,"This implements my suggested fix for #963  as described in #1179:
Firstly, functions which send commands to midiproc (eg. I_MidiPipe_StopSong) should always block until an ack has been received back from midiproc to confirm that the command has completed. No exceptions. It's almost impossible to reason about these kinds of bugs if there's no form of synchronization.
Secondly, there's an asymmetry in the midiproc API which I think makes things more complicated: there's a command for MIDIPIPE_PACKET_TYPE_REGISTER_SONG but none for MIDIPIPE_PACKET_TYPE_UNREGISTER_SONG. This can cause problems because unregistration happens in a different way when using the midiproc. Let's keep things simple and just plumb through UnregisterSong as well.",Thanks! Now fixed.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1186,2019-07-14T04:07:07Z,2019-08-04T05:05:24Z,2019-09-11T07:01:21Z,MERGED,True,76,32,5,https://github.com/fragglet,Clean up of midiproc interface to prevent race conditions.,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/1186,https://github.com/fragglet,9,https://github.com/chocolate-doom/chocolate-doom/pull/1186#issuecomment-517974135,"This implements my suggested fix for #963  as described in #1179:
Firstly, functions which send commands to midiproc (eg. I_MidiPipe_StopSong) should always block until an ack has been received back from midiproc to confirm that the command has completed. No exceptions. It's almost impossible to reason about these kinds of bugs if there's no form of synchronization.
Secondly, there's an asymmetry in the midiproc API which I think makes things more complicated: there's a command for MIDIPIPE_PACKET_TYPE_REGISTER_SONG but none for MIDIPIPE_PACKET_TYPE_UNREGISTER_SONG. This can cause problems because unregistration happens in a different way when using the midiproc. Let's keep things simple and just plumb through UnregisterSong as well.","Yes, this occurred to me to - I figured that it's going to break anything by leaving a tombstone enum value, while not leaving one might. I'm probably excessively paranoid though.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1187,2019-07-17T21:45:55Z,2019-07-17T23:12:46Z,2019-07-17T23:12:46Z,MERGED,True,20,17,2,https://github.com/AlexMax,Windows + CMake fixes,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1187,https://github.com/AlexMax,1,https://github.com/chocolate-doom/chocolate-doom/pull/1187,Stuff I ran into while trying to compile Chocolate Doom on Windows using CMake,Stuff I ran into while trying to compile Chocolate Doom on Windows using CMake,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1187,2019-07-17T21:45:55Z,2019-07-17T23:12:46Z,2019-07-17T23:12:46Z,MERGED,True,20,17,2,https://github.com/AlexMax,Windows + CMake fixes,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1187,https://github.com/chungy,2,https://github.com/chocolate-doom/chocolate-doom/pull/1187#issuecomment-512601999,Stuff I ran into while trying to compile Chocolate Doom on Windows using CMake,Same for me before and after on Linux using i686-w64-mingw32-cmake. thanks :),True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1194,2019-09-01T16:11:26Z,2019-09-02T08:14:37Z,2019-09-02T08:14:37Z,MERGED,True,3,3,3,https://github.com/SoDOOManiac,Updated font headers with Python 3 Pillow.,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1194,https://github.com/SoDOOManiac,1,https://github.com/chocolate-doom/chocolate-doom/pull/1194,"I have installed Python 3 Pillow as well as everything mentioned in https://www.chocolate-doom.org/wiki/index.php/Building_Chocolate_Doom_on_Windows.
and it updates the font header files when building Choco.","I have installed Python 3 Pillow as well as everything mentioned in https://www.chocolate-doom.org/wiki/index.php/Building_Chocolate_Doom_on_Windows.
and it updates the font header files when building Choco.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1194,2019-09-01T16:11:26Z,2019-09-02T08:14:37Z,2019-09-02T08:14:37Z,MERGED,True,3,3,3,https://github.com/SoDOOManiac,Updated font headers with Python 3 Pillow.,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1194,https://github.com/fabiangreffrath,2,https://github.com/chocolate-doom/chocolate-doom/pull/1194#issuecomment-527049470,"I have installed Python 3 Pillow as well as everything mentioned in https://www.chocolate-doom.org/wiki/index.php/Building_Chocolate_Doom_on_Windows.
and it updates the font header files when building Choco.",Looks reasonable.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1195,2019-09-09T01:07:06Z,2019-09-11T03:52:39Z,2019-09-12T22:03:35Z,MERGED,True,22,32,2,https://github.com/AlexMax,Use inherited handles to communicate with midiproc,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1195,https://github.com/AlexMax,1,https://github.com/chocolate-doom/chocolate-doom/pull/1195,"Hopefully this prevents libraries that print error messages to standard
streams from disrupting communication with the subprocess.","Hopefully this prevents libraries that print error messages to standard
streams from disrupting communication with the subprocess.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1195,2019-09-09T01:07:06Z,2019-09-11T03:52:39Z,2019-09-12T22:03:35Z,MERGED,True,22,32,2,https://github.com/AlexMax,Use inherited handles to communicate with midiproc,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1195,https://github.com/chungy,2,https://github.com/chocolate-doom/chocolate-doom/pull/1195#issuecomment-530208350,"Hopefully this prevents libraries that print error messages to standard
streams from disrupting communication with the subprocess.","You are our only active Windows developer, so I assume this change is sensible enough on the platform. Thanks",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1195,2019-09-09T01:07:06Z,2019-09-11T03:52:39Z,2019-09-12T22:03:35Z,MERGED,True,22,32,2,https://github.com/AlexMax,Use inherited handles to communicate with midiproc,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1195,https://github.com/chungy,3,https://github.com/chocolate-doom/chocolate-doom/pull/1195#issuecomment-530324496,"Hopefully this prevents libraries that print error messages to standard
streams from disrupting communication with the subprocess.","Looks like this introduced a few warnings when building with mingw. Might be great if you fixed them :)
make[2]: Entering directory '/home/chungy/Games/doom/src/chocolate-doom/midiproc'
  CC       main.o
main.c: In function ‘SDL_main’:
main.c:434:17: warning: initialization of ‘HANDLE’ {aka ‘void *’} from ‘long int’ makes pointer from integer without a cast [-Wint-conversion]
  434 |     HANDLE in = strtol(argv[3], NULL, 10);
      |                 ^~~~~~
main.c:434:5: warning: ISO C90 forbids mixed declarations and code [-Wdeclaration-after-statement]
  434 |     HANDLE in = strtol(argv[3], NULL, 10);
      |     ^~~~~~
main.c:440:18: warning: initialization of ‘HANDLE’ {aka ‘void *’} from ‘long int’ makes pointer from integer without a cast [-Wint-conversion]
  440 |     HANDLE out = strtol(argv[4], NULL, 10);
      |                  ^~~~~~
main.c:440:5: warning: ISO C90 forbids mixed declarations and code [-Wdeclaration-after-statement]
  440 |     HANDLE out = strtol(argv[4], NULL, 10);
      |     ^~~~~~

make[3]: Entering directory '/home/chungy/Games/doom/src/chocolate-doom/src'
  CC       i_midipipe.o
i_midipipe.c: In function ‘I_MidiPipe_InitServer’:
i_midipipe.c:474:54: warning: format ‘%Iu’ expects argument of type ‘size_t’, but argument 5 has type ‘HANDLE’ {aka ‘void *’} [-Wformat=]
  474 |     M_snprintf(params_buf, sizeof(params_buf), ""%d %Iu %Iu"",
      |                                                    ~~^
      |                                                      |
      |                                                      unsigned int
      |                                                    %p
  475 |         snd_samplerate, midi_process_in_reader, midi_process_out_writer);
      |                         ~~~~~~~~~~~~~~~~~~~~~~        
      |                         |
      |                         HANDLE {aka void *}
i_midipipe.c:474:58: warning: format ‘%Iu’ expects argument of type ‘size_t’, but argument 6 has type ‘HANDLE’ {aka ‘void *’} [-Wformat=]
  474 |     M_snprintf(params_buf, sizeof(params_buf), ""%d %Iu %Iu"",
      |                                                        ~~^
      |                                                          |
      |                                                          unsigned int
      |                                                        %p
  475 |         snd_samplerate, midi_process_in_reader, midi_process_out_writer);
      |                                                 ~~~~~~~~~~~~~~~~~~~~~~~
      |                                                 |
      |                                                 HANDLE {aka void *}",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1195,2019-09-09T01:07:06Z,2019-09-11T03:52:39Z,2019-09-12T22:03:35Z,MERGED,True,22,32,2,https://github.com/AlexMax,Use inherited handles to communicate with midiproc,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1195,https://github.com/fabiangreffrath,4,https://github.com/chocolate-doom/chocolate-doom/pull/1195#issuecomment-530717725,"Hopefully this prevents libraries that print error messages to standard
streams from disrupting communication with the subprocess.",I just fixed the compiler warnings.,True,"{'THUMBS_UP': ['https://github.com/chungy', 'https://github.com/AlexMax']}"
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1195,2019-09-09T01:07:06Z,2019-09-11T03:52:39Z,2019-09-12T22:03:35Z,MERGED,True,22,32,2,https://github.com/AlexMax,Use inherited handles to communicate with midiproc,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1195,https://github.com/AlexMax,5,https://github.com/chocolate-doom/chocolate-doom/pull/1195#issuecomment-531024858,"Hopefully this prevents libraries that print error messages to standard
streams from disrupting communication with the subprocess.","Thanks, that's precisely the fix I would have written.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1196,2019-09-11T02:23:20Z,2019-09-11T03:51:30Z,2019-11-08T11:51:21Z,MERGED,True,2,2,1,https://github.com/mikeday0,fix .lvimrc looking for configure.in instead of configure.ac,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1196,https://github.com/mikeday0,1,https://github.com/chocolate-doom/chocolate-doom/pull/1196,Not sure that many contributors are using vim but I noticed this script was looking for the old autoconf file to establish the top-level directory.,Not sure that many contributors are using vim but I noticed this script was looking for the old autoconf file to establish the top-level directory.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1196,2019-09-11T02:23:20Z,2019-09-11T03:51:30Z,2019-11-08T11:51:21Z,MERGED,True,2,2,1,https://github.com/mikeday0,fix .lvimrc looking for configure.in instead of configure.ac,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1196,https://github.com/chungy,2,https://github.com/chocolate-doom/chocolate-doom/pull/1196#issuecomment-530208133,Not sure that many contributors are using vim but I noticed this script was looking for the old autoconf file to establish the top-level directory.,"probably safe to say they don't, if this hasn't been noticed; but it's a good change nonetheless. Thanks :)",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1196,2019-09-11T02:23:20Z,2019-09-11T03:51:30Z,2019-11-08T11:51:21Z,MERGED,True,2,2,1,https://github.com/mikeday0,fix .lvimrc looking for configure.in instead of configure.ac,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1196,https://github.com/jmtd,3,https://github.com/chocolate-doom/chocolate-doom/pull/1196#issuecomment-551656202,Not sure that many contributors are using vim but I noticed this script was looking for the old autoconf file to establish the top-level directory.,I use vim (or neovim) all the time but I've never even noticed this file before. TIL!,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1201,2019-10-06T09:22:34Z,2019-10-08T02:24:18Z,2019-10-08T02:24:23Z,MERGED,True,4,1,1,https://github.com/TsarFox,Use SDL_free with SDL pointers.,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1201,https://github.com/TsarFox,1,https://github.com/chocolate-doom/chocolate-doom/pull/1201,In reference to #1110,In reference to #1110,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1201,2019-10-06T09:22:34Z,2019-10-08T02:24:18Z,2019-10-08T02:24:23Z,MERGED,True,4,1,1,https://github.com/TsarFox,Use SDL_free with SDL pointers.,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1201,https://github.com/fragglet,2,https://github.com/chocolate-doom/chocolate-doom/pull/1201#issuecomment-539284108,In reference to #1110,Thanks!,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1202,2019-10-07T19:25:55Z,2019-10-07T19:26:18Z,2019-10-07T19:27:43Z,CLOSED,False,25322,7052,224,https://github.com/fabiangreffrath,Overlay on top,2006,[],https://github.com/chocolate-doom/chocolate-doom/pull/1202,https://github.com/fabiangreffrath,1,https://github.com/chocolate-doom/chocolate-doom/pull/1202,,,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1203,2019-10-10T06:35:57Z,2019-10-10T07:54:34Z,2019-10-11T22:12:48Z,MERGED,True,1,1,1,https://github.com/JNechaevsky,Update copyright year to 2019 in PACKAGE_COPYRIGHT,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1203,https://github.com/JNechaevsky,1,https://github.com/chocolate-doom/chocolate-doom/pull/1203,"Hopefully, a new version will be released in this year. This is also necessary for Crispy Doom.
🎄","Hopefully, a new version will be released in this year. This is also necessary for Crispy Doom.
🎄",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1203,2019-10-10T06:35:57Z,2019-10-10T07:54:34Z,2019-10-11T22:12:48Z,MERGED,True,1,1,1,https://github.com/JNechaevsky,Update copyright year to 2019 in PACKAGE_COPYRIGHT,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1203,https://github.com/chungy,2,https://github.com/chocolate-doom/chocolate-doom/pull/1203#issuecomment-540446256,"Hopefully, a new version will be released in this year. This is also necessary for Crispy Doom.
🎄",Thanks :),True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1203,2019-10-10T06:35:57Z,2019-10-10T07:54:34Z,2019-10-11T22:12:48Z,MERGED,True,1,1,1,https://github.com/JNechaevsky,Update copyright year to 2019 in PACKAGE_COPYRIGHT,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1203,https://github.com/JNechaevsky,3,https://github.com/chocolate-doom/chocolate-doom/pull/1203#issuecomment-540447579,"Hopefully, a new version will be released in this year. This is also necessary for Crispy Doom.
🎄",Glad to be of service! 😊,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1203,2019-10-10T06:35:57Z,2019-10-10T07:54:34Z,2019-10-11T22:12:48Z,MERGED,True,1,1,1,https://github.com/JNechaevsky,Update copyright year to 2019 in PACKAGE_COPYRIGHT,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1203,https://github.com/fragglet,4,https://github.com/chocolate-doom/chocolate-doom/pull/1203#issuecomment-541241457,"Hopefully, a new version will be released in this year. This is also necessary for Crispy Doom.
🎄",A belated happy new year to all. Thanks.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1205,2019-10-13T19:53:14Z,2019-10-18T16:50:19Z,2019-10-27T20:33:53Z,MERGED,True,201,62,14,https://github.com/SmileTheory,Doom 1.2 demo support,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/1205,https://github.com/SmileTheory,1,https://github.com/chocolate-doom/chocolate-doom/pull/1205,"So @fabiangreffrath asked me to make a pull request here for this patch (previously fabiangreffrath#478 ), so here it is.
I noticed some easy changes I could grab from Prboom-plus, so I did, and made a patch.
I've tested the three demos in Doom 1.2 shareware and they seem to work. I've also tried recording a quick demo in crispy-doom with the Doom 1.2 shareware wad and it played ok in the original exe under dosbox.
Also included are a few minor changes that get the Doom 0.99 shareware WAD running without immediately crashing, though the demos desynch within seconds and there's an invisible nightmare difficulty setting.","So @fabiangreffrath asked me to make a pull request here for this patch (previously fabiangreffrath#478 ), so here it is.
I noticed some easy changes I could grab from Prboom-plus, so I did, and made a patch.
I've tested the three demos in Doom 1.2 shareware and they seem to work. I've also tried recording a quick demo in crispy-doom with the Doom 1.2 shareware wad and it played ok in the original exe under dosbox.
Also included are a few minor changes that get the Doom 0.99 shareware WAD running without immediately crashing, though the demos desynch within seconds and there's an invisible nightmare difficulty setting.",True,{'ROCKET': ['https://github.com/fabiangreffrath']}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1205,2019-10-13T19:53:14Z,2019-10-18T16:50:19Z,2019-10-27T20:33:53Z,MERGED,True,201,62,14,https://github.com/SmileTheory,Doom 1.2 demo support,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/1205,https://github.com/fragglet,2,https://github.com/chocolate-doom/chocolate-doom/pull/1205#issuecomment-543833828,"So @fabiangreffrath asked me to make a pull request here for this patch (previously fabiangreffrath#478 ), so here it is.
I noticed some easy changes I could grab from Prboom-plus, so I did, and made a patch.
I've tested the three demos in Doom 1.2 shareware and they seem to work. I've also tried recording a quick demo in crispy-doom with the Doom 1.2 shareware wad and it played ok in the original exe under dosbox.
Also included are a few minor changes that get the Doom 0.99 shareware WAD running without immediately crashing, though the demos desynch within seconds and there's an invisible nightmare difficulty setting.","Bit outside of the scope of this pull request but I wonder: are there demos in the Compet-N repository recorded with v1.2 that we can use to test this? I have an automated build that runs every Friday building the latest version of Chocolate Doom and running through the entire Compet-N archive, so it would be neat to expand the test coverage.
https://github.com/chocolate-doom/statcheck",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1205,2019-10-13T19:53:14Z,2019-10-18T16:50:19Z,2019-10-27T20:33:53Z,MERGED,True,201,62,14,https://github.com/SmileTheory,Doom 1.2 demo support,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/1205,https://github.com/fragglet,3,https://github.com/chocolate-doom/chocolate-doom/pull/1205#issuecomment-543848862,"So @fabiangreffrath asked me to make a pull request here for this patch (previously fabiangreffrath#478 ), so here it is.
I noticed some easy changes I could grab from Prboom-plus, so I did, and made a patch.
I've tested the three demos in Doom 1.2 shareware and they seem to work. I've also tried recording a quick demo in crispy-doom with the Doom 1.2 shareware wad and it played ok in the original exe under dosbox.
Also included are a few minor changes that get the Doom 0.99 shareware WAD running without immediately crashing, though the demos desynch within seconds and there's an invisible nightmare difficulty setting.","Ah never mind - it turns out that Doom v1.2 doesn't have the -statcopy command line argument, so it won't be possible to use statcheck.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1205,2019-10-13T19:53:14Z,2019-10-18T16:50:19Z,2019-10-27T20:33:53Z,MERGED,True,201,62,14,https://github.com/SmileTheory,Doom 1.2 demo support,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/1205,https://github.com/fabiangreffrath,4,https://github.com/chocolate-doom/chocolate-doom/pull/1205#issuecomment-544138824,"So @fabiangreffrath asked me to make a pull request here for this patch (previously fabiangreffrath#478 ), so here it is.
I noticed some easy changes I could grab from Prboom-plus, so I did, and made a patch.
I've tested the three demos in Doom 1.2 shareware and they seem to work. I've also tried recording a quick demo in crispy-doom with the Doom 1.2 shareware wad and it played ok in the original exe under dosbox.
Also included are a few minor changes that get the Doom 0.99 shareware WAD running without immediately crashing, though the demos desynch within seconds and there's an invisible nightmare difficulty setting.","I have an automated build that runs every Friday building the latest version of Chocolate Doom and running through the entire Compet-N archive

I know I have asked this before and I don't want to be a nuisance, but could you probably extend this to cover Crispy Doom as well, please?
Are the results reported anywhere publicly?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1205,2019-10-13T19:53:14Z,2019-10-18T16:50:19Z,2019-10-27T20:33:53Z,MERGED,True,201,62,14,https://github.com/SmileTheory,Doom 1.2 demo support,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/1205,https://github.com/fragglet,5,https://github.com/chocolate-doom/chocolate-doom/pull/1205#issuecomment-546421059,"So @fabiangreffrath asked me to make a pull request here for this patch (previously fabiangreffrath#478 ), so here it is.
I noticed some easy changes I could grab from Prboom-plus, so I did, and made a patch.
I've tested the three demos in Doom 1.2 shareware and they seem to work. I've also tried recording a quick demo in crispy-doom with the Doom 1.2 shareware wad and it played ok in the original exe under dosbox.
Also included are a few minor changes that get the Doom 0.99 shareware WAD running without immediately crashing, though the demos desynch within seconds and there's an invisible nightmare difficulty setting.","Could do, yes. The machine I use is quite slow so it takes the best part of a day to run through the whole set of demos. An email gets sent to the dev list if some demo failures occur.
I'd probably have to set up the Crispy run to run on a different day.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1205,2019-10-13T19:53:14Z,2019-10-18T16:50:19Z,2019-10-27T20:33:53Z,MERGED,True,201,62,14,https://github.com/SmileTheory,Doom 1.2 demo support,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/1205,https://github.com/fabiangreffrath,6,https://github.com/chocolate-doom/chocolate-doom/pull/1205#issuecomment-546731611,"So @fabiangreffrath asked me to make a pull request here for this patch (previously fabiangreffrath#478 ), so here it is.
I noticed some easy changes I could grab from Prboom-plus, so I did, and made a patch.
I've tested the three demos in Doom 1.2 shareware and they seem to work. I've also tried recording a quick demo in crispy-doom with the Doom 1.2 shareware wad and it played ok in the original exe under dosbox.
Also included are a few minor changes that get the Doom 0.99 shareware WAD running without immediately crashing, though the demos desynch within seconds and there's an invisible nightmare difficulty setting.","I'd probably have to set up the Crispy run to run on a different day.

That would be absolutely great! It would be even fine for me if the cron job an only once per month or something like this.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1207,2019-10-19T12:18:57Z,,2020-02-03T20:27:47Z,OPEN,False,798,110,34,https://github.com/SmileTheory,Doom v0.99 demo support.,24,[],https://github.com/chocolate-doom/chocolate-doom/pull/1207,https://github.com/SmileTheory,1,https://github.com/chocolate-doom/chocolate-doom/pull/1207,"This one is like #1205 , but for v0.99.
Note that v1.1 demos very much don't work.
Yet.","This one is like #1205 , but for v0.99.
Note that v1.1 demos very much don't work.
Yet.",True,{'HEART': ['https://github.com/tpoppins']}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1207,2019-10-19T12:18:57Z,,2020-02-03T20:27:47Z,OPEN,False,798,110,34,https://github.com/SmileTheory,Doom v0.99 demo support.,24,[],https://github.com/chocolate-doom/chocolate-doom/pull/1207,https://github.com/SmileTheory,2,https://github.com/chocolate-doom/chocolate-doom/pull/1207#issuecomment-544204644,"This one is like #1205 , but for v0.99.
Note that v1.1 demos very much don't work.
Yet.","A decompiler (http://derevenets.com/ ), a hex editor, a memory dump from dosbox, and a whole lot of reading and comparing code. :)",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1207,2019-10-19T12:18:57Z,,2020-02-03T20:27:47Z,OPEN,False,798,110,34,https://github.com/SmileTheory,Doom v0.99 demo support.,24,[],https://github.com/chocolate-doom/chocolate-doom/pull/1207,https://github.com/SmileTheory,3,https://github.com/chocolate-doom/chocolate-doom/pull/1207#issuecomment-544236289,"This one is like #1205 , but for v0.99.
Note that v1.1 demos very much don't work.
Yet.","Without the 900 denominator they're the exact values, pulled straight out of my memory dump from dosbox, no floats involved.
If you used them directly, they'd be encoded inaccurately when recording a demo.  The original 1.0/1.1 divided movement values by 900 when writing a demo and multiplied by 900 when reading them.
To be honest I haven't actually tested recording demos, though.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1207,2019-10-19T12:18:57Z,,2020-02-03T20:27:47Z,OPEN,False,798,110,34,https://github.com/SmileTheory,Doom v0.99 demo support.,24,[],https://github.com/chocolate-doom/chocolate-doom/pull/1207,https://github.com/SmileTheory,4,https://github.com/chocolate-doom/chocolate-doom/pull/1207#issuecomment-544404995,"This one is like #1205 , but for v0.99.
Note that v1.1 demos very much don't work.
Yet.","Bleh, I managed to record a v1.0 video that plays out differently in the original exe and in chocolate doom.
Attached, also still trying to figure out why that imp at the end moves differently.
1.zip",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1207,2019-10-19T12:18:57Z,,2020-02-03T20:27:47Z,OPEN,False,798,110,34,https://github.com/SmileTheory,Doom v0.99 demo support.,24,[],https://github.com/chocolate-doom/chocolate-doom/pull/1207,https://github.com/SmileTheory,5,https://github.com/chocolate-doom/chocolate-doom/pull/1207#issuecomment-544446657,"This one is like #1205 , but for v0.99.
Note that v1.1 demos very much don't work.
Yet.",fa7bcca appears to fix the demo.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1207,2019-10-19T12:18:57Z,,2020-02-03T20:27:47Z,OPEN,False,798,110,34,https://github.com/SmileTheory,Doom v0.99 demo support.,24,[],https://github.com/chocolate-doom/chocolate-doom/pull/1207,https://github.com/SmileTheory,6,https://github.com/chocolate-doom/chocolate-doom/pull/1207#issuecomment-547820055,"This one is like #1205 , but for v0.99.
Note that v1.1 demos very much don't work.
Yet.","As an aside, I figured out how the various trig tables are calculated for Doom v1.0 and versions after, and put code for them into https://gist.github.com/SmileTheory/02e6a13bc615efa3b6c31decc0ea049a .",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1207,2019-10-19T12:18:57Z,,2020-02-03T20:27:47Z,OPEN,False,798,110,34,https://github.com/SmileTheory,Doom v0.99 demo support.,24,[],https://github.com/chocolate-doom/chocolate-doom/pull/1207,https://github.com/drfrag666,7,https://github.com/chocolate-doom/chocolate-doom/pull/1207#issuecomment-549313395,"This one is like #1205 , but for v0.99.
Note that v1.1 demos very much don't work.
Yet.","""In versions of Doom 1.2 and earlier, armor percentage was not limited to 200.""
https://doomwiki.org/wiki/Armor_percentage_rollover",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1207,2019-10-19T12:18:57Z,,2020-02-03T20:27:47Z,OPEN,False,798,110,34,https://github.com/SmileTheory,Doom v0.99 demo support.,24,[],https://github.com/chocolate-doom/chocolate-doom/pull/1207,https://github.com/SmileTheory,8,https://github.com/chocolate-doom/chocolate-doom/pull/1207#issuecomment-549379143,"This one is like #1205 , but for v0.99.
Note that v1.1 demos very much don't work.
Yet.","""In versions of Doom 1.2 and earlier, armor percentage was not limited to 200.""
https://doomwiki.org/wiki/Armor_percentage_rollover

This was in the old pull request:
9eae89d#diff-79f9cf84b40c123971d3775511e0a3e3R385
If that's too hard to read, here's a comment:
0e72254#diff-79f9cf84b40c123971d3775511e0a3e3R385",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1207,2019-10-19T12:18:57Z,,2020-02-03T20:27:47Z,OPEN,False,798,110,34,https://github.com/SmileTheory,Doom v0.99 demo support.,24,[],https://github.com/chocolate-doom/chocolate-doom/pull/1207,https://github.com/drfrag666,9,https://github.com/chocolate-doom/chocolate-doom/pull/1207#issuecomment-549411031,"This one is like #1205 , but for v0.99.
Note that v1.1 demos very much don't work.
Yet.",Someone commented it at doomworld and i was not aware it was already in.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1207,2019-10-19T12:18:57Z,,2020-02-03T20:27:47Z,OPEN,False,798,110,34,https://github.com/SmileTheory,Doom v0.99 demo support.,24,[],https://github.com/chocolate-doom/chocolate-doom/pull/1207,https://github.com/SmileTheory,10,https://github.com/chocolate-doom/chocolate-doom/pull/1207#issuecomment-550596554,"This one is like #1205 , but for v0.99.
Note that v1.1 demos very much don't work.
Yet.","I had the idea of making a struct with all the various constants and flags enabling old version behavior, but the existence of such would imply that they can be turned on and off at will, and doing that outside of emulating specific versions isn't something I wish to enable.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1207,2019-10-19T12:18:57Z,,2020-02-03T20:27:47Z,OPEN,False,798,110,34,https://github.com/SmileTheory,Doom v0.99 demo support.,24,[],https://github.com/chocolate-doom/chocolate-doom/pull/1207,https://github.com/drfrag666,11,https://github.com/chocolate-doom/chocolate-doom/pull/1207#issuecomment-557890137,"This one is like #1205 , but for v0.99.
Note that v1.1 demos very much don't work.
Yet.",Are 1.1 demos supported already?,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1207,2019-10-19T12:18:57Z,,2020-02-03T20:27:47Z,OPEN,False,798,110,34,https://github.com/SmileTheory,Doom v0.99 demo support.,24,[],https://github.com/chocolate-doom/chocolate-doom/pull/1207,https://github.com/SmileTheory,12,https://github.com/chocolate-doom/chocolate-doom/pull/1207#issuecomment-558048318,"This one is like #1205 , but for v0.99.
Note that v1.1 demos very much don't work.
Yet.","Are 1.1 demos supported already?

The demos in the Doom 1.1 shareware wad work, but beyond that I haven't tested too much.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1207,2019-10-19T12:18:57Z,,2020-02-03T20:27:47Z,OPEN,False,798,110,34,https://github.com/SmileTheory,Doom v0.99 demo support.,24,[],https://github.com/chocolate-doom/chocolate-doom/pull/1207,https://github.com/sinisterseed,13,https://github.com/chocolate-doom/chocolate-doom/pull/1207#issuecomment-558157893,"This one is like #1205 , but for v0.99.
Note that v1.1 demos very much don't work.
Yet.","Are 1.1 demos supported already?

The demos in the Doom 1.1 shareware wad work, but beyond that I haven't tested too much.

Only in Shareware? They don't work in the registered/full version?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1207,2019-10-19T12:18:57Z,,2020-02-03T20:27:47Z,OPEN,False,798,110,34,https://github.com/SmileTheory,Doom v0.99 demo support.,24,[],https://github.com/chocolate-doom/chocolate-doom/pull/1207,https://github.com/SmileTheory,14,https://github.com/chocolate-doom/chocolate-doom/pull/1207#issuecomment-558647525,"This one is like #1205 , but for v0.99.
Note that v1.1 demos very much don't work.
Yet.","Are 1.1 demos supported already?

The demos in the Doom 1.1 shareware wad work, but beyond that I haven't tested too much.

Only in Shareware? They don't work in the registered/full version?

In 1.1 registered, DEMO1 and DEMO2 work, but DEMO3 desynchs a bit after getting the chainsaw.
It doesn't seem chainsaw related though, comparing with the original 1.1 exe shows that the cacos on the left are in slightly different positions, and the lost soul that actually causes the desynch takes a few tics longer to attack on the 1.1 exe than with this patch.
I've been investigating this for a while but I haven't been able to figure it out yet.",True,{'HEART': ['https://github.com/sinisterseed']}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1207,2019-10-19T12:18:57Z,,2020-02-03T20:27:47Z,OPEN,False,798,110,34,https://github.com/SmileTheory,Doom v0.99 demo support.,24,[],https://github.com/chocolate-doom/chocolate-doom/pull/1207,https://github.com/sinisterseed,15,https://github.com/chocolate-doom/chocolate-doom/pull/1207#issuecomment-558697503,"This one is like #1205 , but for v0.99.
Note that v1.1 demos very much don't work.
Yet.","Are 1.1 demos supported already?

The demos in the Doom 1.1 shareware wad work, but beyond that I haven't tested too much.

Only in Shareware? They don't work in the registered/full version?

In 1.1 registered, DEMO1 and DEMO2 work, but DEMO3 desynchs a bit after getting the chainsaw.
It doesn't seem chainsaw related though, comparing with the original 1.1 exe shows that the cacos on the left are in slightly different positions, and the lost soul that actually causes the desynch takes a few tics longer to attack on the 1.1 exe than with this patch.
I've been investigating this for a while but I haven't been able to figure it out yet.

Interesting, I wonder what else is there that could cause potential desyncs.
I could make some demos after this eventually gets solved and the PR gets merged to see if everything is fine (DOSBox gives me grief though... ugh). Thanks a lot for your work by the way, older versions of Doom are something I'm personally interested in too, it's so good to see support for those versions finally becoming a thing :) .",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1207,2019-10-19T12:18:57Z,,2020-02-03T20:27:47Z,OPEN,False,798,110,34,https://github.com/SmileTheory,Doom v0.99 demo support.,24,[],https://github.com/chocolate-doom/chocolate-doom/pull/1207,https://github.com/drfrag666,16,https://github.com/chocolate-doom/chocolate-doom/pull/1207#issuecomment-559074334,"This one is like #1205 , but for v0.99.
Note that v1.1 demos very much don't work.
Yet.",You rule! :),True,{'THUMBS_UP': ['https://github.com/sinisterseed']}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1207,2019-10-19T12:18:57Z,,2020-02-03T20:27:47Z,OPEN,False,798,110,34,https://github.com/SmileTheory,Doom v0.99 demo support.,24,[],https://github.com/chocolate-doom/chocolate-doom/pull/1207,https://github.com/sinisterseed,17,https://github.com/chocolate-doom/chocolate-doom/pull/1207#issuecomment-559090410,"This one is like #1205 , but for v0.99.
Note that v1.1 demos very much don't work.
Yet.","Funny, it was sorted out shortly after the comment was made, awesome :) .
Now then, someone on Doomworld recently claimed to have discovered something interesting about Doom v1.1. Given the nature of the PR, I figured I'd leave the said comment here, if it turns out to be true indeed, and also possible to implement:

""Wallrunning doesn't work in Doom v1.1 (North-South and East-West walls), except for some diagonal walls for which it's the same as Doom v1.9.""",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1207,2019-10-19T12:18:57Z,,2020-02-03T20:27:47Z,OPEN,False,798,110,34,https://github.com/SmileTheory,Doom v0.99 demo support.,24,[],https://github.com/chocolate-doom/chocolate-doom/pull/1207,https://github.com/SmileTheory,18,https://github.com/chocolate-doom/chocolate-doom/pull/1207#issuecomment-559098469,"This one is like #1205 , but for v0.99.
Note that v1.1 demos very much don't work.
Yet.","""Wallrunning doesn't work in Doom v1.1 (North-South and East-West walls), except for some diagonal walls for which it's the same as Doom v1.9.""


I'd guess that this is a consequence of the half step movement code not being implemented until Doom v1.2. (https://github.com/chocolate-doom/chocolate-doom/pull/1207/files#diff-9b3d1e95726cd7eaef62f94a3d6caf92R158 )
More info at https://doomwiki.org/wiki/Wallrunning#Technical .",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1207,2019-10-19T12:18:57Z,,2020-02-03T20:27:47Z,OPEN,False,798,110,34,https://github.com/SmileTheory,Doom v0.99 demo support.,24,[],https://github.com/chocolate-doom/chocolate-doom/pull/1207,https://github.com/sinisterseed,19,https://github.com/chocolate-doom/chocolate-doom/pull/1207#issuecomment-559109160,"This one is like #1205 , but for v0.99.
Note that v1.1 demos very much don't work.
Yet.","""Wallrunning doesn't work in Doom v1.1 (North-South and East-West walls), except for some diagonal walls for which it's the same as Doom v1.9.""


I'd guess that this is a consequence of the half step movement code not being implemented until Doom v1.2. (https://github.com/chocolate-doom/chocolate-doom/pull/1207/files#diff-9b3d1e95726cd7eaef62f94a3d6caf92R158 )
More info at https://doomwiki.org/wiki/Wallrunning#Technical .

Oh it's already included as part of the PR? Groovy.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1207,2019-10-19T12:18:57Z,,2020-02-03T20:27:47Z,OPEN,False,798,110,34,https://github.com/SmileTheory,Doom v0.99 demo support.,24,[],https://github.com/chocolate-doom/chocolate-doom/pull/1207,https://github.com/drfrag666,20,https://github.com/chocolate-doom/chocolate-doom/pull/1207#issuecomment-560427599,"This one is like #1205 , but for v0.99.
Note that v1.1 demos very much don't work.
Yet.","Okay i've merged this and done some testing. For me it's broken after ""Requested changes"". You can't start a new game until the first demo plays, the game quits inmediately or after the wipe hence you can't play demo2 or demo3 with playdemo. Besides after the demo ends the wipe is shown twice.
That is with the 1.1 iwad. Does it work for you?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1207,2019-10-19T12:18:57Z,,2020-02-03T20:27:47Z,OPEN,False,798,110,34,https://github.com/SmileTheory,Doom v0.99 demo support.,24,[],https://github.com/chocolate-doom/chocolate-doom/pull/1207,https://github.com/SmileTheory,21,https://github.com/chocolate-doom/chocolate-doom/pull/1207#issuecomment-560570371,"This one is like #1205 , but for v0.99.
Note that v1.1 demos very much don't work.
Yet.","Okay i've merged this and done some testing. For me it's broken after ""Requested changes"". You can't start a new game until the first demo plays, the game quits inmediately or after the wipe hence you can't play demo2 or demo3 with playdemo. Besides after the demo ends the wipe is shown twice.
That is with the 1.1 iwad. Does it work for you?

It works fine with 1.1 registered and 1.1 shareware for me.  Leaving it to run moves on to demo2 as normal instead of quitting, and I can start a game at any point.
Are you using cmake to build?  I haven't tested cmake since I can never get the thing to work properly. :)
Otherwise, did the branch merge cleanly?  The only other thing I can think of is some conflict, unless you're using a clean version of chocolate doom.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1207,2019-10-19T12:18:57Z,,2020-02-03T20:27:47Z,OPEN,False,798,110,34,https://github.com/SmileTheory,Doom v0.99 demo support.,24,[],https://github.com/chocolate-doom/chocolate-doom/pull/1207,https://github.com/drfrag666,22,https://github.com/chocolate-doom/chocolate-doom/pull/1207#issuecomment-560808048,"This one is like #1205 , but for v0.99.
Note that v1.1 demos very much don't work.
Yet.","Sorry, it was a bad merge of ""Fix inaccurate v1.0/v1.1/v1.2 sight calculations"". Now it works, BTW i've lost my internet connection.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1207,2019-10-19T12:18:57Z,,2020-02-03T20:27:47Z,OPEN,False,798,110,34,https://github.com/SmileTheory,Doom v0.99 demo support.,24,[],https://github.com/chocolate-doom/chocolate-doom/pull/1207,https://github.com/drfrag666,23,https://github.com/chocolate-doom/chocolate-doom/pull/1207#issuecomment-561651091,"This one is like #1205 , but for v0.99.
Note that v1.1 demos very much don't work.
Yet.","I've released a test build with this PR in order to help with old demos here:
https://github.com/drfrag666/chocolate-doom/releases/tag/2.5.0a",True,{'THUMBS_UP': ['https://github.com/sinisterseed']}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1207,2019-10-19T12:18:57Z,,2020-02-03T20:27:47Z,OPEN,False,798,110,34,https://github.com/SmileTheory,Doom v0.99 demo support.,24,[],https://github.com/chocolate-doom/chocolate-doom/pull/1207,https://github.com/drfrag666,24,https://github.com/chocolate-doom/chocolate-doom/pull/1207#issuecomment-562838440,"This one is like #1205 , but for v0.99.
Note that v1.1 demos very much don't work.
Yet.","Uploaded another test build with the latest changes:
https://github.com/drfrag666/chocolate-doom/releases/download/2.5.0b/RUDE-2.5.0b-win32.zip",True,"{'THUMBS_UP': ['https://github.com/sinisterseed', 'https://github.com/tpoppins']}"
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1207,2019-10-19T12:18:57Z,,2020-02-03T20:27:47Z,OPEN,False,798,110,34,https://github.com/SmileTheory,Doom v0.99 demo support.,24,[],https://github.com/chocolate-doom/chocolate-doom/pull/1207,https://github.com/tpoppins,25,https://github.com/chocolate-doom/chocolate-doom/pull/1207#issuecomment-565741612,"This one is like #1205 , but for v0.99.
Note that v1.1 demos very much don't work.
Yet.","Thank you for the test build, Dr. Frag666!
Here is a set of demos recorded on E2 and E3 of the registered v1.1 in February-March '94: VDOOM2_3.ZIP. It doesn't include a demo for E3M9, and the E3M6 one terminates prematurely due to reaching the default demo size. Of the other 16 demos all but three play to the end with RUDE v2.5.0b.
The desyncing demos are those for E3M1, E3M5 and E3M7. Vanilla v1.1 plays these successfully (i.e. the player reaches the exit and exits the level).
This set should provide some extra testing material.",True,"{'THUMBS_UP': ['https://github.com/drfrag666', 'https://github.com/sinisterseed']}"
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1207,2019-10-19T12:18:57Z,,2020-02-03T20:27:47Z,OPEN,False,798,110,34,https://github.com/SmileTheory,Doom v0.99 demo support.,24,[],https://github.com/chocolate-doom/chocolate-doom/pull/1207,https://github.com/drfrag666,26,https://github.com/chocolate-doom/chocolate-doom/pull/1207#issuecomment-565747359,"This one is like #1205 , but for v0.99.
Note that v1.1 demos very much don't work.
Yet.",Thanks. These are useful. E3M1 desyncs becouse the door-lift closes too early. E3M5 becouse the bfg doesn't kill a demon near the end. E3M7 becouse the bridge is missing apparently. We'll know more when SmileTheory tries them with his build.,True,{'THUMBS_UP': ['https://github.com/sinisterseed']}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1207,2019-10-19T12:18:57Z,,2020-02-03T20:27:47Z,OPEN,False,798,110,34,https://github.com/SmileTheory,Doom v0.99 demo support.,24,[],https://github.com/chocolate-doom/chocolate-doom/pull/1207,https://github.com/drfrag666,27,https://github.com/chocolate-doom/chocolate-doom/pull/1207#issuecomment-566508177,"This one is like #1205 , but for v0.99.
Note that v1.1 demos very much don't work.
Yet.","I've released a new test build with the latest changes.
https://github.com/drfrag666/chocolate-doom/releases/tag/2.5.0c",True,{'ROCKET': ['https://github.com/sinisterseed']}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1207,2019-10-19T12:18:57Z,,2020-02-03T20:27:47Z,OPEN,False,798,110,34,https://github.com/SmileTheory,Doom v0.99 demo support.,24,[],https://github.com/chocolate-doom/chocolate-doom/pull/1207,https://github.com/tpoppins,28,https://github.com/chocolate-doom/chocolate-doom/pull/1207#issuecomment-566729165,"This one is like #1205 , but for v0.99.
Note that v1.1 demos very much don't work.
Yet.","Good job, SmileTheory: all three demos mentioned above complete successfully now in RUDE Doom 2.5.0c!
@drfrag666: thank you for the bins. Would you email me (tpoppins at juno dot com) please, I can't compile your fork in either CodeBlocks or MSYS2.",True,{'THUMBS_UP': ['https://github.com/drfrag666']}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1207,2019-10-19T12:18:57Z,,2020-02-03T20:27:47Z,OPEN,False,798,110,34,https://github.com/SmileTheory,Doom v0.99 demo support.,24,[],https://github.com/chocolate-doom/chocolate-doom/pull/1207,https://github.com/drfrag666,29,https://github.com/chocolate-doom/chocolate-doom/pull/1207#issuecomment-567019720,"This one is like #1205 , but for v0.99.
Note that v1.1 demos very much don't work.
Yet.","I've enabled issues, post your problem there and i'll reply ASAP.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1207,2019-10-19T12:18:57Z,,2020-02-03T20:27:47Z,OPEN,False,798,110,34,https://github.com/SmileTheory,Doom v0.99 demo support.,24,[],https://github.com/chocolate-doom/chocolate-doom/pull/1207,https://github.com/drfrag666,30,https://github.com/chocolate-doom/chocolate-doom/pull/1207#issuecomment-581602746,"This one is like #1205 , but for v0.99.
Note that v1.1 demos very much don't work.
Yet.",Any issue left here?,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1210,2019-11-03T20:00:00Z,2019-11-05T15:55:54Z,2019-12-11T20:50:11Z,MERGED,True,95,45,7,https://github.com/fragglet,First-class support for Freedoom single player IWADs,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/1210,https://github.com/fragglet,1,https://github.com/chocolate-doom/chocolate-doom/pull/1210,Recent Freedoom releases are (90+% at least) vanilla compatible so let's go ahead and mark them as supported.,Recent Freedoom releases are (90+% at least) vanilla compatible so let's go ahead and mark them as supported.,True,{'THUMBS_UP': ['https://github.com/mc776']}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1210,2019-11-03T20:00:00Z,2019-11-05T15:55:54Z,2019-12-11T20:50:11Z,MERGED,True,95,45,7,https://github.com/fragglet,First-class support for Freedoom single player IWADs,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/1210,https://github.com/chungy,2,https://github.com/chocolate-doom/chocolate-doom/pull/1210#issuecomment-549585937,Recent Freedoom releases are (90+% at least) vanilla compatible so let's go ahead and mark them as supported.,"Seems all good to me, and appropriate too (might have possibly been considered with Freedoom 0.11, but we didn't actually have an official stance on the vanilla-ness yet).",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1210,2019-11-03T20:00:00Z,2019-11-05T15:55:54Z,2019-12-11T20:50:11Z,MERGED,True,95,45,7,https://github.com/fragglet,First-class support for Freedoom single player IWADs,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/1210,https://github.com/fabiangreffrath,3,https://github.com/chocolate-doom/chocolate-doom/pull/1210#issuecomment-549705218,Recent Freedoom releases are (90+% at least) vanilla compatible so let's go ahead and mark them as supported.,Good idea to move freedoom before freedm priority wise!,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1210,2019-11-03T20:00:00Z,2019-11-05T15:55:54Z,2019-12-11T20:50:11Z,MERGED,True,95,45,7,https://github.com/fragglet,First-class support for Freedoom single player IWADs,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/1210,https://github.com/fragglet,4,https://github.com/chocolate-doom/chocolate-doom/pull/1210#issuecomment-549884903,Recent Freedoom releases are (90+% at least) vanilla compatible so let's go ahead and mark them as supported.,Thanks folks. I also updated the wiki page; it's a lot briefer now.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1212,2019-11-05T22:22:42Z,2020-09-04T02:59:56Z,2020-09-04T03:00:03Z,CLOSED,False,5,3,1,None,Fix Math for Loremaster Hook Effect,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1212,None,1,https://github.com/chocolate-doom/chocolate-doom/pull/1212,"This code change fixes a bug in which the Loremaster's hook, which is meant to throw the player into the air, has nearly no effect on the player's Z momentum. Because of this, the player is not thrown into the air, only moved slightly in the x and y directions- rendering the Loremaster nearly harmless.
The problem was that the ""temp"" variable was being assigned a fixed point value (which, in this context, almost always works out to a very large integer), then being divided by the target's mass (a normal integer, relatively small in size), yielding a very large, nonsense number. The momz calculation calls for the (fixed point) z distance between the target and source to be divided by the temp value. However, since the (small) z distance is being divided by the (very large) nonsense temp value, the resulting momz is virtually zero almost every time.
This fix converts the player's mass to fixed point in the calculation and replaces ""/"" operators with proper fixed point math functions, yielding the correct z momentum.
To test the difference, warp to MAP27 to face the Loremaster, or use the GRAPPLE.SEH patch on the SeHackEd Doomworld page, which also uses the hook effect (the hook replaces the electric crossbow). In the vanilla Strife DOS exe and this fork, the player should properly be thrown into the air, while in the master branch as of writing, the player is only moved in the x and y directions.","This code change fixes a bug in which the Loremaster's hook, which is meant to throw the player into the air, has nearly no effect on the player's Z momentum. Because of this, the player is not thrown into the air, only moved slightly in the x and y directions- rendering the Loremaster nearly harmless.
The problem was that the ""temp"" variable was being assigned a fixed point value (which, in this context, almost always works out to a very large integer), then being divided by the target's mass (a normal integer, relatively small in size), yielding a very large, nonsense number. The momz calculation calls for the (fixed point) z distance between the target and source to be divided by the temp value. However, since the (small) z distance is being divided by the (very large) nonsense temp value, the resulting momz is virtually zero almost every time.
This fix converts the player's mass to fixed point in the calculation and replaces ""/"" operators with proper fixed point math functions, yielding the correct z momentum.
To test the difference, warp to MAP27 to face the Loremaster, or use the GRAPPLE.SEH patch on the SeHackEd Doomworld page, which also uses the hook effect (the hook replaces the electric crossbow). In the vanilla Strife DOS exe and this fork, the player should properly be thrown into the air, while in the master branch as of writing, the player is only moved in the x and y directions.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1212,2019-11-05T22:22:42Z,2020-09-04T02:59:56Z,2020-09-04T03:00:03Z,CLOSED,False,5,3,1,None,Fix Math for Loremaster Hook Effect,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1212,https://github.com/fabiangreffrath,2,https://github.com/chocolate-doom/chocolate-doom/pull/1212#issuecomment-550276133,"This code change fixes a bug in which the Loremaster's hook, which is meant to throw the player into the air, has nearly no effect on the player's Z momentum. Because of this, the player is not thrown into the air, only moved slightly in the x and y directions- rendering the Loremaster nearly harmless.
The problem was that the ""temp"" variable was being assigned a fixed point value (which, in this context, almost always works out to a very large integer), then being divided by the target's mass (a normal integer, relatively small in size), yielding a very large, nonsense number. The momz calculation calls for the (fixed point) z distance between the target and source to be divided by the temp value. However, since the (small) z distance is being divided by the (very large) nonsense temp value, the resulting momz is virtually zero almost every time.
This fix converts the player's mass to fixed point in the calculation and replaces ""/"" operators with proper fixed point math functions, yielding the correct z momentum.
To test the difference, warp to MAP27 to face the Loremaster, or use the GRAPPLE.SEH patch on the SeHackEd Doomworld page, which also uses the hook effect (the hook replaces the electric crossbow). In the vanilla Strife DOS exe and this fork, the player should properly be thrown into the air, while in the master branch as of writing, the player is only moved in the x and y directions.","Looks reasonable, though the comments are a bit excessive. A mere ""fix fixed point math"" or smiliar might have sufficed.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1212,2019-11-05T22:22:42Z,2020-09-04T02:59:56Z,2020-09-04T03:00:03Z,CLOSED,False,5,3,1,None,Fix Math for Loremaster Hook Effect,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1212,None,3,https://github.com/chocolate-doom/chocolate-doom/pull/1212#issuecomment-550289251,"This code change fixes a bug in which the Loremaster's hook, which is meant to throw the player into the air, has nearly no effect on the player's Z momentum. Because of this, the player is not thrown into the air, only moved slightly in the x and y directions- rendering the Loremaster nearly harmless.
The problem was that the ""temp"" variable was being assigned a fixed point value (which, in this context, almost always works out to a very large integer), then being divided by the target's mass (a normal integer, relatively small in size), yielding a very large, nonsense number. The momz calculation calls for the (fixed point) z distance between the target and source to be divided by the temp value. However, since the (small) z distance is being divided by the (very large) nonsense temp value, the resulting momz is virtually zero almost every time.
This fix converts the player's mass to fixed point in the calculation and replaces ""/"" operators with proper fixed point math functions, yielding the correct z momentum.
To test the difference, warp to MAP27 to face the Loremaster, or use the GRAPPLE.SEH patch on the SeHackEd Doomworld page, which also uses the hook effect (the hook replaces the electric crossbow). In the vanilla Strife DOS exe and this fork, the player should properly be thrown into the air, while in the master branch as of writing, the player is only moved in the x and y directions.","OK, I've cleaned that up.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1212,2019-11-05T22:22:42Z,2020-09-04T02:59:56Z,2020-09-04T03:00:03Z,CLOSED,False,5,3,1,None,Fix Math for Loremaster Hook Effect,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1212,https://github.com/nukeykt,4,https://github.com/chocolate-doom/chocolate-doom/pull/1212#issuecomment-610192490,"This code change fixes a bug in which the Loremaster's hook, which is meant to throw the player into the air, has nearly no effect on the player's Z momentum. Because of this, the player is not thrown into the air, only moved slightly in the x and y directions- rendering the Loremaster nearly harmless.
The problem was that the ""temp"" variable was being assigned a fixed point value (which, in this context, almost always works out to a very large integer), then being divided by the target's mass (a normal integer, relatively small in size), yielding a very large, nonsense number. The momz calculation calls for the (fixed point) z distance between the target and source to be divided by the temp value. However, since the (small) z distance is being divided by the (very large) nonsense temp value, the resulting momz is virtually zero almost every time.
This fix converts the player's mass to fixed point in the calculation and replaces ""/"" operators with proper fixed point math functions, yielding the correct z momentum.
To test the difference, warp to MAP27 to face the Loremaster, or use the GRAPPLE.SEH patch on the SeHackEd Doomworld page, which also uses the hook effect (the hook replaces the electric crossbow). In the vanilla Strife DOS exe and this fork, the player should properly be thrown into the air, while in the master branch as of writing, the player is only moved in the x and y directions.","Made quick look to disassembled code, neither your or chocolate code are correct from what i see.
            case MT_HOOKSHOT:
                // haleyjd 20110203: should use source, not inflictor
                ang = R_PointToAngle2(
                        target->x,
                        target->y,
                        source->x,
                        source->y) >> ANGLETOFINESHIFT;

                thrust = (12750*FRACUNIT) / target->info->mass;

                target->momx += FixedMul(thrust, finecosine[ang]);
                target->momy += FixedMul(thrust, finesine[ang]);
                target->reactiontime += 10;

                temp = P_AproxDistance(target->x - source->x, target->y - source->y);
                temp /= thrust;

                if(temp < 1)
                    temp = 1;

                target->momz = (source->z - target->z) / temp;
                break;",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1217,2019-11-18T13:10:49Z,2019-11-19T00:48:10Z,2019-11-19T07:37:01Z,MERGED,True,2,1,1,https://github.com/fabiangreffrath,travis: determine program prefix from config.h,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1217,https://github.com/fabiangreffrath,1,https://github.com/chocolate-doom/chocolate-doom/pull/1217,,,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1218,2019-11-22T20:31:41Z,2019-11-25T19:58:47Z,2019-11-25T19:58:54Z,MERGED,True,9,3,2,https://github.com/fabiangreffrath,doom: correctly determine the par time for MAP33,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1218,https://github.com/fabiangreffrath,1,https://github.com/chocolate-doom/chocolate-doom/pull/1218,"The par time for MAP33 is read from beyond the cpars[] array and
corresponds to the first four bytes (""Gamm"") of the GAMMALVL0 string
literal interpreted as a 32-bit integer. This has been checked and
proven for the three regular DOOM.EXEs (i.e. 1.9, Ultimate, Final).
Fixes #1209.
Thanks @turol for the pointer to use memcpy() instead of pointer
casting.
While at it, change the data type for leveltime and partime to type
short in the statdump code to match the output of the DOS executable.","The par time for MAP33 is read from beyond the cpars[] array and
corresponds to the first four bytes (""Gamm"") of the GAMMALVL0 string
literal interpreted as a 32-bit integer. This has been checked and
proven for the three regular DOOM.EXEs (i.e. 1.9, Ultimate, Final).
Fixes #1209.
Thanks @turol for the pointer to use memcpy() instead of pointer
casting.
While at it, change the data type for leveltime and partime to type
short in the statdump code to match the output of the DOS executable.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1220,2019-11-26T20:44:25Z,2019-12-02T15:26:49Z,2019-12-02T15:40:40Z,MERGED,True,1,6,1,https://github.com/fabiangreffrath,doom: revert erroneous part of code,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1220,https://github.com/fabiangreffrath,1,https://github.com/chocolate-doom/chocolate-doom/pull/1220,"That is, remove the part that checks if the map just finished is MAP33
to omit drawing the par time if this is the case.
While it is true that no par time for MAP33 is drawn in Vanilla Doom,
this isn't because there is a condition that checks for it, but
because the par time for MAP33 is read from beyond the cpars[] array
and the four bytes following it are interpreted as a negative 32-bit
integer. The WI_drawTime() function, however, returns early if the
time it is supposed to draw is negative.
This can be easily checked by using DEHACKED to change the GAMMALVL0
string so that its first four bytes are interpreted as a positive
32-bit integer, e.g. by replacing it with ""   "" (four spaces). Then,
even Vanilla Doom (e.g. DOOM2.EXE) will start to draw a par time when
MAP33 is finished but will eventually end up drawing the ""SUCKS!""
patch.
This may be regarded as the second part of commit 00d2024, it reverts
another part of commit e1f113a.","That is, remove the part that checks if the map just finished is MAP33
to omit drawing the par time if this is the case.
While it is true that no par time for MAP33 is drawn in Vanilla Doom,
this isn't because there is a condition that checks for it, but
because the par time for MAP33 is read from beyond the cpars[] array
and the four bytes following it are interpreted as a negative 32-bit
integer. The WI_drawTime() function, however, returns early if the
time it is supposed to draw is negative.
This can be easily checked by using DEHACKED to change the GAMMALVL0
string so that its first four bytes are interpreted as a positive
32-bit integer, e.g. by replacing it with ""   "" (four spaces). Then,
even Vanilla Doom (e.g. DOOM2.EXE) will start to draw a par time when
MAP33 is finished but will eventually end up drawing the ""SUCKS!""
patch.
This may be regarded as the second part of commit 00d2024, it reverts
another part of commit e1f113a.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1220,2019-11-26T20:44:25Z,2019-12-02T15:26:49Z,2019-12-02T15:40:40Z,MERGED,True,1,6,1,https://github.com/fabiangreffrath,doom: revert erroneous part of code,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1220,https://github.com/fabiangreffrath,2,https://github.com/chocolate-doom/chocolate-doom/pull/1220#issuecomment-558978384,"That is, remove the part that checks if the map just finished is MAP33
to omit drawing the par time if this is the case.
While it is true that no par time for MAP33 is drawn in Vanilla Doom,
this isn't because there is a condition that checks for it, but
because the par time for MAP33 is read from beyond the cpars[] array
and the four bytes following it are interpreted as a negative 32-bit
integer. The WI_drawTime() function, however, returns early if the
time it is supposed to draw is negative.
This can be easily checked by using DEHACKED to change the GAMMALVL0
string so that its first four bytes are interpreted as a positive
32-bit integer, e.g. by replacing it with ""   "" (four spaces). Then,
even Vanilla Doom (e.g. DOOM2.EXE) will start to draw a par time when
MAP33 is finished but will eventually end up drawing the ""SUCKS!""
patch.
This may be regarded as the second part of commit 00d2024, it reverts
another part of commit e1f113a.","In this context: Does anybody know a good EXE-debugger which preferably also runs on Linux? I'd like to locate the mapnames_commercial[] array in the EXE and see where its 33rd element would point to. Finding the actual string literals in the EXE is easy, but I have not yet found the array of pointers to them. @SmileTheory probably?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1220,2019-11-26T20:44:25Z,2019-12-02T15:26:49Z,2019-12-02T15:40:40Z,MERGED,True,1,6,1,https://github.com/fabiangreffrath,doom: revert erroneous part of code,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1220,https://github.com/SmileTheory,3,https://github.com/chocolate-doom/chocolate-doom/pull/1220#issuecomment-559104854,"That is, remove the part that checks if the map just finished is MAP33
to omit drawing the par time if this is the case.
While it is true that no par time for MAP33 is drawn in Vanilla Doom,
this isn't because there is a condition that checks for it, but
because the par time for MAP33 is read from beyond the cpars[] array
and the four bytes following it are interpreted as a negative 32-bit
integer. The WI_drawTime() function, however, returns early if the
time it is supposed to draw is negative.
This can be easily checked by using DEHACKED to change the GAMMALVL0
string so that its first four bytes are interpreted as a positive
32-bit integer, e.g. by replacing it with ""   "" (four spaces). Then,
even Vanilla Doom (e.g. DOOM2.EXE) will start to draw a par time when
MAP33 is finished but will eventually end up drawing the ""SUCKS!""
patch.
This may be regarded as the second part of commit 00d2024, it reverts
another part of commit e1f113a.","In this context: Does anybody know a good EXE-debugger which preferably also runs on Linux? I'd like to locate the mapnames_commercial[] array in the EXE and see where its 33rd element would point to. Finding the actual string literals in the EXE is easy, but I have not yet found the array of pointers to them. @SmileTheory probably?

I've used Dosbox-X (https://github.com/joncampbell123/dosbox-x/releases ) 's debugger to get memory dumps before, but to find arrays and such I've mostly been using Snowman (http://derevenets.com/ ) to find array addresses in the code, then finding one of those arrays in a memory dump or EXE hex dump and using subtraction and addition to find the other arrays.
Unfortunately I believe Snowman standalone is windows only.
Thinking about it though, it should be possible to make a list of deltas based on the differences between locations of each string in the mapnames_commercial[] array, then look for a list of values that each differ by those deltas, but that sounds like work. :)",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1220,2019-11-26T20:44:25Z,2019-12-02T15:26:49Z,2019-12-02T15:40:40Z,MERGED,True,1,6,1,https://github.com/fabiangreffrath,doom: revert erroneous part of code,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1220,https://github.com/fabiangreffrath,4,https://github.com/chocolate-doom/chocolate-doom/pull/1220#issuecomment-559775842,"That is, remove the part that checks if the map just finished is MAP33
to omit drawing the par time if this is the case.
While it is true that no par time for MAP33 is drawn in Vanilla Doom,
this isn't because there is a condition that checks for it, but
because the par time for MAP33 is read from beyond the cpars[] array
and the four bytes following it are interpreted as a negative 32-bit
integer. The WI_drawTime() function, however, returns early if the
time it is supposed to draw is negative.
This can be easily checked by using DEHACKED to change the GAMMALVL0
string so that its first four bytes are interpreted as a positive
32-bit integer, e.g. by replacing it with ""   "" (four spaces). Then,
even Vanilla Doom (e.g. DOOM2.EXE) will start to draw a par time when
MAP33 is finished but will eventually end up drawing the ""SUCKS!""
patch.
This may be regarded as the second part of commit 00d2024, it reverts
another part of commit e1f113a.","Thinking about it though, it should be possible to make a list of deltas based on the differences between locations of each string in the mapnames_commercial[] array, then look for a list of values that each differ by those deltas, but that sounds like work. :)

In the end, I found myself implementing exactly this. 😁
With this method, I located the mapnames_commercial[] array, i.e. its [0] element, at position 638160 in DOOM2.EXE. The numerical value of a uint32 at this position is 148388. Going 31*4 bytes further to the [31] element we end up at position 638284 in the EXE and the numerical value of a uint32 at this position is 149140.
I located the HUSTR_1 string literal at position 705464 in the EXE and HUSTR_32 at position 706216. The difference between these two addresses is 752 bytes, which is the exact same as the difference between 149140 and 148388. So I assume that what I have found is indeed an array of pointers to the HUSTR_* string literals relative to a given offset. This offset is calculated as the difference between the numerical value at mapnames_commercial[0], i.e. 148388, and the actual address of the HUSTR_1 string literal, i.e. 705464., which is 557076. I assume that this position marks the start of the DATA section in DOOM2.EXE.
Now comes the crucial question: Where does mapnames_commercial[32], i.e. the map name for MAP33, point to? The disappoiting answer is that the numerical value at position 638288 in the EXE is 50462976. This value interpreted as an address is way out of of the size if the DATA section, of the executable itself and most certainly even out of the memory region allocated for the game - and even out of the usual amount of RAM available when DOOM2 was released. So, in the end, the most plausible answer is probably ""undefined behaviour"".
I was hoping to find a pointer to some other value in the DATA section that would be under our control as source port developers, but it seems that we are already as close as we could probably get with just having the map name point to an empty string.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1220,2019-11-26T20:44:25Z,2019-12-02T15:26:49Z,2019-12-02T15:40:40Z,MERGED,True,1,6,1,https://github.com/fabiangreffrath,doom: revert erroneous part of code,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1220,https://github.com/fabiangreffrath,5,https://github.com/chocolate-doom/chocolate-doom/pull/1220#issuecomment-560245368,"That is, remove the part that checks if the map just finished is MAP33
to omit drawing the par time if this is the case.
While it is true that no par time for MAP33 is drawn in Vanilla Doom,
this isn't because there is a condition that checks for it, but
because the par time for MAP33 is read from beyond the cpars[] array
and the four bytes following it are interpreted as a negative 32-bit
integer. The WI_drawTime() function, however, returns early if the
time it is supposed to draw is negative.
This can be easily checked by using DEHACKED to change the GAMMALVL0
string so that its first four bytes are interpreted as a positive
32-bit integer, e.g. by replacing it with ""   "" (four spaces). Then,
even Vanilla Doom (e.g. DOOM2.EXE) will start to draw a par time when
MAP33 is finished but will eventually end up drawing the ""SUCKS!""
patch.
This may be regarded as the second part of commit 00d2024, it reverts
another part of commit e1f113a.",Could we please merge this?,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1220,2019-11-26T20:44:25Z,2019-12-02T15:26:49Z,2019-12-02T15:40:40Z,MERGED,True,1,6,1,https://github.com/fabiangreffrath,doom: revert erroneous part of code,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1220,https://github.com/fabiangreffrath,6,https://github.com/chocolate-doom/chocolate-doom/pull/1220#issuecomment-560450618,"That is, remove the part that checks if the map just finished is MAP33
to omit drawing the par time if this is the case.
While it is true that no par time for MAP33 is drawn in Vanilla Doom,
this isn't because there is a condition that checks for it, but
because the par time for MAP33 is read from beyond the cpars[] array
and the four bytes following it are interpreted as a negative 32-bit
integer. The WI_drawTime() function, however, returns early if the
time it is supposed to draw is negative.
This can be easily checked by using DEHACKED to change the GAMMALVL0
string so that its first four bytes are interpreted as a positive
32-bit integer, e.g. by replacing it with ""   "" (four spaces). Then,
even Vanilla Doom (e.g. DOOM2.EXE) will start to draw a par time when
MAP33 is finished but will eventually end up drawing the ""SUCKS!""
patch.
This may be regarded as the second part of commit 00d2024, it reverts
another part of commit e1f113a.",Thank you!,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1221,2019-12-03T08:32:03Z,2019-12-06T11:59:58Z,2019-12-09T16:37:12Z,MERGED,True,17,0,1,https://github.com/fabiangreffrath,"video: if renderer creation failed, try again without acceleration",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1221,https://github.com/fabiangreffrath,1,https://github.com/chocolate-doom/chocolate-doom/pull/1221,"Currently, we enable hardware acceleration by default. If SDL fails to
create a matching renderer for that, e.g. because the graphic hardware
or driver do not properly support hardware acceleration, we show an
error message and quit. At this point users do either complain or turn
their back on our software and never come back. Whenever users complain,
we recommend them to enable the force_software_renderer option and
try again.
However, we can do better and try again ourselves without hardware
acceleration if the renderer creation failed with the default flags.
If it still fails even then, we know for sure that something is
really wrong.","Currently, we enable hardware acceleration by default. If SDL fails to
create a matching renderer for that, e.g. because the graphic hardware
or driver do not properly support hardware acceleration, we show an
error message and quit. At this point users do either complain or turn
their back on our software and never come back. Whenever users complain,
we recommend them to enable the force_software_renderer option and
try again.
However, we can do better and try again ourselves without hardware
acceleration if the renderer creation failed with the default flags.
If it still fails even then, we know for sure that something is
really wrong.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1221,2019-12-03T08:32:03Z,2019-12-06T11:59:58Z,2019-12-09T16:37:12Z,MERGED,True,17,0,1,https://github.com/fabiangreffrath,"video: if renderer creation failed, try again without acceleration",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1221,https://github.com/fabiangreffrath,2,https://github.com/chocolate-doom/chocolate-doom/pull/1221#issuecomment-562484233,"Currently, we enable hardware acceleration by default. If SDL fails to
create a matching renderer for that, e.g. because the graphic hardware
or driver do not properly support hardware acceleration, we show an
error message and quit. At this point users do either complain or turn
their back on our software and never come back. Whenever users complain,
we recommend them to enable the force_software_renderer option and
try again.
However, we can do better and try again ourselves without hardware
acceleration if the renderer creation failed with the default flags.
If it still fails even then, we know for sure that something is
really wrong.",Review requirement is getting in the way. Few days ago I would have pushed this without even asking...,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1221,2019-12-03T08:32:03Z,2019-12-06T11:59:58Z,2019-12-09T16:37:12Z,MERGED,True,17,0,1,https://github.com/fabiangreffrath,"video: if renderer creation failed, try again without acceleration",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1221,https://github.com/fabiangreffrath,3,https://github.com/chocolate-doom/chocolate-doom/pull/1221#issuecomment-562551705,"Currently, we enable hardware acceleration by default. If SDL fails to
create a matching renderer for that, e.g. because the graphic hardware
or driver do not properly support hardware acceleration, we show an
error message and quit. At this point users do either complain or turn
their back on our software and never come back. Whenever users complain,
we recommend them to enable the force_software_renderer option and
try again.
However, we can do better and try again ourselves without hardware
acceleration if the renderer creation failed with the default flags.
If it still fails even then, we know for sure that something is
really wrong.",Thank you!,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1221,2019-12-03T08:32:03Z,2019-12-06T11:59:58Z,2019-12-09T16:37:12Z,MERGED,True,17,0,1,https://github.com/fabiangreffrath,"video: if renderer creation failed, try again without acceleration",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1221,https://github.com/fragglet,4,https://github.com/chocolate-doom/chocolate-doom/pull/1221#issuecomment-563302444,"Currently, we enable hardware acceleration by default. If SDL fails to
create a matching renderer for that, e.g. because the graphic hardware
or driver do not properly support hardware acceleration, we show an
error message and quit. At this point users do either complain or turn
their back on our software and never come back. Whenever users complain,
we recommend them to enable the force_software_renderer option and
try again.
However, we can do better and try again ourselves without hardware
acceleration if the renderer creation failed with the default flags.
If it still fails even then, we know for sure that something is
really wrong.","Review requirement is getting in the way. Few days ago I would have pushed this without even asking...

Frustration acknowledged. In response I've invited @mfrancis95 and @turol to become developers in the Chocolate Doom org (they've both been making some sizable contributions over the past couple of years so it's well deserved!). I hope that having additional people in the reviewers pool will help to speed things up a bit.",True,{'HEART': ['https://github.com/mfrancis95']}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1221,2019-12-03T08:32:03Z,2019-12-06T11:59:58Z,2019-12-09T16:37:12Z,MERGED,True,17,0,1,https://github.com/fabiangreffrath,"video: if renderer creation failed, try again without acceleration",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1221,https://github.com/fabiangreffrath,5,https://github.com/chocolate-doom/chocolate-doom/pull/1221#issuecomment-563323015,"Currently, we enable hardware acceleration by default. If SDL fails to
create a matching renderer for that, e.g. because the graphic hardware
or driver do not properly support hardware acceleration, we show an
error message and quit. At this point users do either complain or turn
their back on our software and never come back. Whenever users complain,
we recommend them to enable the force_software_renderer option and
try again.
However, we can do better and try again ourselves without hardware
acceleration if the renderer creation failed with the default flags.
If it still fails even then, we know for sure that something is
really wrong.","Cool, thanks, and welcome to the team @mfrancis95 and @turol!",True,{'HOORAY': ['https://github.com/mfrancis95']}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1224,2019-12-06T02:38:13Z,2019-12-06T08:39:54Z,2019-12-06T08:39:54Z,MERGED,True,5,0,1,https://github.com/AlexMax,Additional CMake ignores,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1224,https://github.com/AlexMax,1,https://github.com/chocolate-doom/chocolate-doom/pull/1224,"Visual Studio 2019 supports CMake natively when opening a project
folder, and these files and folders are created by VS on first open.","Visual Studio 2019 supports CMake natively when opening a project
folder, and these files and folders are created by VS on first open.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1225,2019-12-08T21:55:55Z,2021-03-23T02:54:11Z,2021-03-23T02:54:12Z,CLOSED,False,47,0,1,https://github.com/mikeday0,musicpack: Use SDL_Mixer built-in looping,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1225,https://github.com/mikeday0,1,https://github.com/chocolate-doom/chocolate-doom/pull/1225,"Starting with version 2.0.5, SDL_Mixer will natively support OGG and FLAC looping with ZDOOM-style metadata-defined loop points. This means that Chocolate Doom no longer has to manage this function. The old looping code is being retained as a fallback in case of SDL_Mixer versions older than 2.0.5.
This should fix #1178 and #1208.","Starting with version 2.0.5, SDL_Mixer will natively support OGG and FLAC looping with ZDOOM-style metadata-defined loop points. This means that Chocolate Doom no longer has to manage this function. The old looping code is being retained as a fallback in case of SDL_Mixer versions older than 2.0.5.
This should fix #1178 and #1208.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1226,2019-12-09T03:28:44Z,2019-12-09T15:44:59Z,2019-12-23T01:20:18Z,MERGED,True,0,6,1,https://github.com/mfrancis95,Remove unnecessary checks in EV_DoLockedDoor,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1226,https://github.com/mfrancis95,1,https://github.com/chocolate-doom/chocolate-doom/pull/1226,,,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1226,2019-12-09T03:28:44Z,2019-12-09T15:44:59Z,2019-12-23T01:20:18Z,MERGED,True,0,6,1,https://github.com/mfrancis95,Remove unnecessary checks in EV_DoLockedDoor,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1226,https://github.com/mfrancis95,2,https://github.com/chocolate-doom/chocolate-doom/pull/1226#issuecomment-563065690,,"Yep, it's also worth noting that those checks were removed in prboom, and likely other ports.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1226,2019-12-09T03:28:44Z,2019-12-09T15:44:59Z,2019-12-23T01:20:18Z,MERGED,True,0,6,1,https://github.com/mfrancis95,Remove unnecessary checks in EV_DoLockedDoor,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1226,https://github.com/fabiangreffrath,3,https://github.com/chocolate-doom/chocolate-doom/pull/1226#issuecomment-563112867,,"Since this is original id code, I'd prefer if we could merely comment it out instead of killing it entirely. But that's just my taste...",True,{'THUMBS_DOWN': ['https://github.com/fragglet']}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1226,2019-12-09T03:28:44Z,2019-12-09T15:44:59Z,2019-12-23T01:20:18Z,MERGED,True,0,6,1,https://github.com/mfrancis95,Remove unnecessary checks in EV_DoLockedDoor,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1226,https://github.com/fragglet,4,https://github.com/chocolate-doom/chocolate-doom/pull/1226#issuecomment-563299208,,"Look good. To give my opinion: I'm against leaving commented-out code in the codebase, since it's just clutter. It's always possible to go back and compare against the original id source release if necessary.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1227,2019-12-09T05:08:12Z,2019-12-09T15:45:49Z,2019-12-23T01:20:17Z,MERGED,True,18,18,8,https://github.com/mfrancis95,Fix printf warnings from cppcheck,8,[],https://github.com/chocolate-doom/chocolate-doom/pull/1227,https://github.com/mfrancis95,1,https://github.com/chocolate-doom/chocolate-doom/pull/1227,All of these warnings relate to printing an unsigned integer as %i instead of %u.,All of these warnings relate to printing an unsigned integer as %i instead of %u.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1227,2019-12-09T05:08:12Z,2019-12-09T15:45:49Z,2019-12-23T01:20:17Z,MERGED,True,18,18,8,https://github.com/mfrancis95,Fix printf warnings from cppcheck,8,[],https://github.com/chocolate-doom/chocolate-doom/pull/1227,https://github.com/turol,2,https://github.com/chocolate-doom/chocolate-doom/pull/1227#issuecomment-563237539,All of these warnings relate to printing an unsigned integer as %i instead of %u.,Side note: cppcheck is part of our Travis build (I added it!) but it's an old version which doesn't generate the same warnings as the latest release. Also last time I checked newer cppcheck also warns about some bad bit shifts. It might be useful to figure out how to get latest cppcheck package installed on Travis.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1227,2019-12-09T05:08:12Z,2019-12-09T15:45:49Z,2019-12-23T01:20:17Z,MERGED,True,18,18,8,https://github.com/mfrancis95,Fix printf warnings from cppcheck,8,[],https://github.com/chocolate-doom/chocolate-doom/pull/1227,https://github.com/mfrancis95,3,https://github.com/chocolate-doom/chocolate-doom/pull/1227#issuecomment-563241424,All of these warnings relate to printing an unsigned integer as %i instead of %u.,I know one way to get the latest cppcheck on Travis would be to use a Docker image like https://hub.docker.com/r/neszt/cppcheck-docker/.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1228,2019-12-10T00:40:50Z,2019-12-16T13:53:47Z,2019-12-23T01:20:15Z,MERGED,True,19,34,3,https://github.com/mfrancis95,Remove unnecessary checks in Hexen,3,['Hexen'],https://github.com/chocolate-doom/chocolate-doom/pull/1228,https://github.com/mfrancis95,1,https://github.com/chocolate-doom/chocolate-doom/pull/1228,,,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1228,2019-12-10T00:40:50Z,2019-12-16T13:53:47Z,2019-12-23T01:20:15Z,MERGED,True,19,34,3,https://github.com/mfrancis95,Remove unnecessary checks in Hexen,3,['Hexen'],https://github.com/chocolate-doom/chocolate-doom/pull/1228,https://github.com/mfrancis95,2,https://github.com/chocolate-doom/chocolate-doom/pull/1228#issuecomment-565817779,,@turol,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1228,2019-12-10T00:40:50Z,2019-12-16T13:53:47Z,2019-12-23T01:20:15Z,MERGED,True,19,34,3,https://github.com/mfrancis95,Remove unnecessary checks in Hexen,3,['Hexen'],https://github.com/chocolate-doom/chocolate-doom/pull/1228,https://github.com/turol,3,https://github.com/chocolate-doom/chocolate-doom/pull/1228#issuecomment-565825139,,"For the future, it's git convention to have a short log message which fits on the first line of the message and then a longer message after that. Only the short one is shown by default, making the list of changes more readable.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1228,2019-12-10T00:40:50Z,2019-12-16T13:53:47Z,2019-12-23T01:20:15Z,MERGED,True,19,34,3,https://github.com/mfrancis95,Remove unnecessary checks in Hexen,3,['Hexen'],https://github.com/chocolate-doom/chocolate-doom/pull/1228,https://github.com/turol,4,https://github.com/chocolate-doom/chocolate-doom/pull/1228#issuecomment-566022153,,@mfrancis95 Do you want to push merge or should I?,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1229,2019-12-10T11:51:56Z,2019-12-11T10:23:38Z,2019-12-11T20:49:58Z,MERGED,True,6,0,1,https://github.com/fabiangreffrath,fix packed attribute for structs when compiling with MSVC,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1229,https://github.com/fabiangreffrath,1,https://github.com/chocolate-doom/chocolate-doom/pull/1229,Thanks @drfrag666 for confirming this fix.,Thanks @drfrag666 for confirming this fix.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1232,2019-12-25T16:29:46Z,2019-12-25T16:51:02Z,2019-12-25T19:16:02Z,CLOSED,False,26054,7712,228,https://github.com/antjmartino,OS X Compilation and Installation Guide,2088,[],https://github.com/chocolate-doom/chocolate-doom/pull/1232,https://github.com/antjmartino,1,https://github.com/chocolate-doom/chocolate-doom/pull/1232,"Detailed guide to installing CrispyDoom from source on OS X for individuals with no knowledge of the terminal.
CrispyDoom-MacInstallation.txt","Detailed guide to installing CrispyDoom from source on OS X for individuals with no knowledge of the terminal.
CrispyDoom-MacInstallation.txt",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1232,2019-12-25T16:29:46Z,2019-12-25T16:51:02Z,2019-12-25T19:16:02Z,CLOSED,False,26054,7712,228,https://github.com/antjmartino,OS X Compilation and Installation Guide,2088,[],https://github.com/chocolate-doom/chocolate-doom/pull/1232,https://github.com/fabiangreffrath,2,https://github.com/chocolate-doom/chocolate-doom/pull/1232#issuecomment-568915517,"Detailed guide to installing CrispyDoom from source on OS X for individuals with no knowledge of the terminal.
CrispyDoom-MacInstallation.txt",This would apply half of Crispy Doom to the Chocolate master branch. I don't think so. ;-),True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1232,2019-12-25T16:29:46Z,2019-12-25T16:51:02Z,2019-12-25T19:16:02Z,CLOSED,False,26054,7712,228,https://github.com/antjmartino,OS X Compilation and Installation Guide,2088,[],https://github.com/chocolate-doom/chocolate-doom/pull/1232,https://github.com/antjmartino,3,https://github.com/chocolate-doom/chocolate-doom/pull/1232#issuecomment-568924002,"Detailed guide to installing CrispyDoom from source on OS X for individuals with no knowledge of the terminal.
CrispyDoom-MacInstallation.txt","Sorry, not too familiar with Github, the whole merge/pull request thing really confused me.  I'm guessing I messed that up.
What I was trying to do was submit an installation guide for Crispy Doom on Mac OS if you wanted to include it somewhere for people to follow, maybe in the readme.  Nothing to do with chocolate doom.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1232,2019-12-25T16:29:46Z,2019-12-25T16:51:02Z,2019-12-25T19:16:02Z,CLOSED,False,26054,7712,228,https://github.com/antjmartino,OS X Compilation and Installation Guide,2088,[],https://github.com/chocolate-doom/chocolate-doom/pull/1232,https://github.com/antjmartino,4,https://github.com/chocolate-doom/chocolate-doom/pull/1232#issuecomment-568924253,"Detailed guide to installing CrispyDoom from source on OS X for individuals with no knowledge of the terminal.
CrispyDoom-MacInstallation.txt",I'll try to figure it out for my own sake and I'll submit another pull request for you to review,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1234,2020-01-03T15:05:13Z,2020-01-03T16:09:32Z,2020-01-03T16:09:32Z,MERGED,True,1,1,1,https://github.com/JNechaevsky,Update copyright year to 2020 in PACKAGE_COPYRIGHT,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1234,https://github.com/JNechaevsky,1,https://github.com/chocolate-doom/chocolate-doom/pull/1234,Happy New Year!,Happy New Year!,True,{'HOORAY': ['https://github.com/fragglet']}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1235,2020-01-08T12:57:28Z,2020-01-08T18:40:33Z,2020-01-30T12:11:56Z,MERGED,True,1,1,1,https://github.com/fabiangreffrath,travis: change to dist: bionic,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1235,https://github.com/fabiangreffrath,1,https://github.com/chocolate-doom/chocolate-doom/pull/1235,,,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1235,2020-01-08T12:57:28Z,2020-01-08T18:40:33Z,2020-01-30T12:11:56Z,MERGED,True,1,1,1,https://github.com/fabiangreffrath,travis: change to dist: bionic,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1235,https://github.com/mfrancis95,2,https://github.com/chocolate-doom/chocolate-doom/pull/1235#issuecomment-572074835,,"Thinking back to #1227, does this also upgrade the version of cppcheck being used?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1235,2020-01-08T12:57:28Z,2020-01-08T18:40:33Z,2020-01-30T12:11:56Z,MERGED,True,1,1,1,https://github.com/fabiangreffrath,travis: change to dist: bionic,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1235,https://github.com/turol,3,https://github.com/chocolate-doom/chocolate-doom/pull/1235#issuecomment-572075612,,Looks like it does but it's still not the latest. No new warnings though.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1236,2020-01-08T19:45:42Z,2020-01-09T19:53:05Z,2020-01-10T11:19:50Z,CLOSED,False,165,3,6,https://github.com/JNechaevsky,Heretic: artifacts can be binded to own keys,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/1236,https://github.com/JNechaevsky,1,https://github.com/chocolate-doom/chocolate-doom/pull/1236,"By the request of @fabiangreffrath, see: JNechaevsky/russian-doom@d035694#commitcomment-36712800","By the request of @fabiangreffrath, see: JNechaevsky/russian-doom@d035694#commitcomment-36712800",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1236,2020-01-08T19:45:42Z,2020-01-09T19:53:05Z,2020-01-10T11:19:50Z,CLOSED,False,165,3,6,https://github.com/JNechaevsky,Heretic: artifacts can be binded to own keys,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/1236,https://github.com/fabiangreffrath,2,https://github.com/chocolate-doom/chocolate-doom/pull/1236#issuecomment-572264395,"By the request of @fabiangreffrath, see: JNechaevsky/russian-doom@d035694#commitcomment-36712800","This was quick, thanks!",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1236,2020-01-08T19:45:42Z,2020-01-09T19:53:05Z,2020-01-10T11:19:50Z,CLOSED,False,165,3,6,https://github.com/JNechaevsky,Heretic: artifacts can be binded to own keys,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/1236,https://github.com/mfrancis95,3,https://github.com/chocolate-doom/chocolate-doom/pull/1236#issuecomment-572561493,"By the request of @fabiangreffrath, see: JNechaevsky/russian-doom@d035694#commitcomment-36712800",What's the need of including !cmd->arti in every condition when you can just have that checked once?,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1236,2020-01-08T19:45:42Z,2020-01-09T19:53:05Z,2020-01-10T11:19:50Z,CLOSED,False,165,3,6,https://github.com/JNechaevsky,Heretic: artifacts can be binded to own keys,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/1236,https://github.com/JNechaevsky,4,https://github.com/chocolate-doom/chocolate-doom/pull/1236#issuecomment-572624177,"By the request of @fabiangreffrath, see: JNechaevsky/russian-doom@d035694#commitcomment-36712800","@fabiangreffrath, done one, done two: 76fa96e
@mfrancis95, no idea, I wasn't seeking for simplifying, it's just replicates an existing code. Worth to change somehow?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1236,2020-01-08T19:45:42Z,2020-01-09T19:53:05Z,2020-01-10T11:19:50Z,CLOSED,False,165,3,6,https://github.com/JNechaevsky,Heretic: artifacts can be binded to own keys,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/1236,https://github.com/fabiangreffrath,5,https://github.com/chocolate-doom/chocolate-doom/pull/1236#issuecomment-572668620,"By the request of @fabiangreffrath, see: JNechaevsky/russian-doom@d035694#commitcomment-36712800","Wait a minute, you pushed the enter key change to the same branch!",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1236,2020-01-08T19:45:42Z,2020-01-09T19:53:05Z,2020-01-10T11:19:50Z,CLOSED,False,165,3,6,https://github.com/JNechaevsky,Heretic: artifacts can be binded to own keys,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/1236,https://github.com/JNechaevsky,6,https://github.com/chocolate-doom/chocolate-doom/pull/1236#issuecomment-572669722,"By the request of @fabiangreffrath, see: JNechaevsky/russian-doom@d035694#commitcomment-36712800","Oh st*t! Looks likes I have messed up with commits, sorry for this. Here's a proper commit that I have prepared for PR: JNechaevsky@83fed55
Can we roll back enter key changes somehow?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1236,2020-01-08T19:45:42Z,2020-01-09T19:53:05Z,2020-01-10T11:19:50Z,CLOSED,False,165,3,6,https://github.com/JNechaevsky,Heretic: artifacts can be binded to own keys,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/1236,https://github.com/turol,7,https://github.com/chocolate-doom/chocolate-doom/pull/1236#issuecomment-572671209,"By the request of @fabiangreffrath, see: JNechaevsky/russian-doom@d035694#commitcomment-36712800",You can force-push the older commit to this branch and that will roll it back.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1236,2020-01-08T19:45:42Z,2020-01-09T19:53:05Z,2020-01-10T11:19:50Z,CLOSED,False,165,3,6,https://github.com/JNechaevsky,Heretic: artifacts can be binded to own keys,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/1236,https://github.com/JNechaevsky,8,https://github.com/chocolate-doom/chocolate-doom/pull/1236#issuecomment-572672117,"By the request of @fabiangreffrath, see: JNechaevsky/russian-doom@d035694#commitcomment-36712800",I'm afraid I don't know how to do this. 😱,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1236,2020-01-08T19:45:42Z,2020-01-09T19:53:05Z,2020-01-10T11:19:50Z,CLOSED,False,165,3,6,https://github.com/JNechaevsky,Heretic: artifacts can be binded to own keys,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/1236,https://github.com/JNechaevsky,9,https://github.com/chocolate-doom/chocolate-doom/pull/1236#issuecomment-572678199,"By the request of @fabiangreffrath, see: JNechaevsky/russian-doom@d035694#commitcomment-36712800","Allright, since master branch was deleted, now I can't revert ""enter key"", nothing happens after this: JNechaevsky@99e93a9
It's my huge f*ck up, and that's an official reason why I'm trying to avoid to make a PRs to forks with all costs...",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1236,2020-01-08T19:45:42Z,2020-01-09T19:53:05Z,2020-01-10T11:19:50Z,CLOSED,False,165,3,6,https://github.com/JNechaevsky,Heretic: artifacts can be binded to own keys,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/1236,https://github.com/fabiangreffrath,10,https://github.com/chocolate-doom/chocolate-doom/pull/1236#issuecomment-572727126,"By the request of @fabiangreffrath, see: JNechaevsky/russian-doom@d035694#commitcomment-36712800","Not that bad after all. You could still open a new pull request with the changes in a single commit. But, please, never do pull requests from your repository's master branch, always create a separate branch before.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1236,2020-01-08T19:45:42Z,2020-01-09T19:53:05Z,2020-01-10T11:19:50Z,CLOSED,False,165,3,6,https://github.com/JNechaevsky,Heretic: artifacts can be binded to own keys,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/1236,https://github.com/fragglet,11,https://github.com/chocolate-doom/chocolate-doom/pull/1236#issuecomment-572928284,"By the request of @fabiangreffrath, see: JNechaevsky/russian-doom@d035694#commitcomment-36712800","Heh, whoops. Never mind, the enter key change looks fine to me anyway.
No shame or blame, let's just take it as a learning experience and concentrate on what we can do differently next time. Fabian's comment about always creating a second branch is really good advice and I'm going to make sure I follow it too.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1236,2020-01-08T19:45:42Z,2020-01-09T19:53:05Z,2020-01-10T11:19:50Z,CLOSED,False,165,3,6,https://github.com/JNechaevsky,Heretic: artifacts can be binded to own keys,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/1236,https://github.com/fabiangreffrath,12,https://github.com/chocolate-doom/chocolate-doom/pull/1236#issuecomment-572961173,"By the request of @fabiangreffrath, see: JNechaevsky/russian-doom@d035694#commitcomment-36712800","I have cleaned the mess up a bit. Here are the two new PRs:
#1238
#1237",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1236,2020-01-08T19:45:42Z,2020-01-09T19:53:05Z,2020-01-10T11:19:50Z,CLOSED,False,165,3,6,https://github.com/JNechaevsky,Heretic: artifacts can be binded to own keys,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/1236,https://github.com/JNechaevsky,13,https://github.com/chocolate-doom/chocolate-doom/pull/1236#issuecomment-572996411,"By the request of @fabiangreffrath, see: JNechaevsky/russian-doom@d035694#commitcomment-36712800","Thanks for understanding, and please take my apologies for a little bit too emotional lexis. While trying to make a good thing, only mess happens including double amount of work. Honestly, after few years of using Github Desktop I'm pretty fine with working on own repository, but making a PR's between other projects, especially with multiple files, still something unlearned for me.
However, I'm worried about one thing: I'm don't have a Mac at hands and have no idea is there a second ""Enter"" key, and thus, can't check what will actually happens as a result. My girlfriend have a Macbook Air, but AFAIR there is only one Enter key (a), and she'll slap me on hands for even a simple word about Xcode (b, should never happen!).",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1237,2020-01-10T10:01:51Z,2020-01-10T10:56:02Z,2020-01-30T12:11:54Z,MERGED,True,2,1,1,https://github.com/fabiangreffrath,Allow to toggle full screen using Enter on num. keyboard,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1237,https://github.com/fabiangreffrath,1,https://github.com/chocolate-doom/chocolate-doom/pull/1237,,,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1237,2020-01-10T10:01:51Z,2020-01-10T10:56:02Z,2020-01-30T12:11:54Z,MERGED,True,2,1,1,https://github.com/fabiangreffrath,Allow to toggle full screen using Enter on num. keyboard,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1237,https://github.com/chungy,2,https://github.com/chocolate-doom/chocolate-doom/pull/1237#issuecomment-572988282,,Sensible change; no reason the two enter keys need to be distinct.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1238,2020-01-10T10:02:19Z,2020-01-20T23:17:58Z,2020-01-30T12:11:52Z,MERGED,True,163,2,5,https://github.com/fabiangreffrath,Heretic: artifacts can be binded to own keys,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/1238,https://github.com/fabiangreffrath,1,https://github.com/chocolate-doom/chocolate-doom/pull/1238,,,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1240,2020-01-13T10:47:04Z,2020-01-14T10:42:15Z,2020-01-14T10:42:19Z,MERGED,True,2,0,2,https://github.com/turol,Fix use of uninitialized memory in heretic and hexen,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1240,https://github.com/turol,1,https://github.com/chocolate-doom/chocolate-doom/pull/1240,"Fix use of uninitialized memory in heretic and hexen.
As seen in #1117
@mfrancis95 Does this close all of it?","Fix use of uninitialized memory in heretic and hexen.
As seen in #1117
@mfrancis95 Does this close all of it?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1243,2020-01-20T21:19:05Z,2020-01-20T23:16:53Z,2020-01-30T12:11:52Z,MERGED,True,10,10,2,https://github.com/fabiangreffrath,improvements to the statdump implementation,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1243,https://github.com/fabiangreffrath,1,https://github.com/chocolate-doom/chocolate-doom/pull/1243,,,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1245,2020-01-27T12:58:05Z,2020-01-27T20:13:19Z,2021-08-18T08:59:47Z,MERGED,True,1,0,1,https://github.com/mfrancis95,Fix memory leak when iwad not found (fix #1241),1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1245,https://github.com/mfrancis95,1,https://github.com/chocolate-doom/chocolate-doom/pull/1245,,,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1246,2020-01-28T09:42:42Z,2022-03-20T07:29:58Z,2022-03-20T07:30:02Z,MERGED,True,0,18,1,https://github.com/fabiangreffrath,always precache sounds,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1246,https://github.com/fabiangreffrath,1,https://github.com/chocolate-doom/chocolate-doom/pull/1246,"Currently, sound effects are only precached if Choco has been built
with libsamplerate support and if this is enabled at run-time.
However, I don't see a reason why we would not want to precache all
sounds if libsamplerate is either not available or disabled.
Precaching sounds only takes a second more at start-up but prevents
nasty hick-ups during playing if sounds are loaded and have their
samplerates converted over and over again.
This is inspired by the following bug report by @vanfanel:
fabiangreffrath#508 (comment)","Currently, sound effects are only precached if Choco has been built
with libsamplerate support and if this is enabled at run-time.
However, I don't see a reason why we would not want to precache all
sounds if libsamplerate is either not available or disabled.
Precaching sounds only takes a second more at start-up but prevents
nasty hick-ups during playing if sounds are loaded and have their
samplerates converted over and over again.
This is inspired by the following bug report by @vanfanel:
fabiangreffrath#508 (comment)",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1246,2020-01-28T09:42:42Z,2022-03-20T07:29:58Z,2022-03-20T07:30:02Z,MERGED,True,0,18,1,https://github.com/fabiangreffrath,always precache sounds,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1246,https://github.com/fabiangreffrath,2,https://github.com/chocolate-doom/chocolate-doom/pull/1246#issuecomment-581613075,"Currently, sound effects are only precached if Choco has been built
with libsamplerate support and if this is enabled at run-time.
However, I don't see a reason why we would not want to precache all
sounds if libsamplerate is either not available or disabled.
Precaching sounds only takes a second more at start-up but prevents
nasty hick-ups during playing if sounds are loaded and have their
samplerates converted over and over again.
This is inspired by the following bug report by @vanfanel:
fabiangreffrath#508 (comment)",Any opinions? @fragglet do you remember why you restricted sound precaching to the libsamplerate-enabled case?,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1246,2020-01-28T09:42:42Z,2022-03-20T07:29:58Z,2022-03-20T07:30:02Z,MERGED,True,0,18,1,https://github.com/fabiangreffrath,always precache sounds,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1246,https://github.com/mfrancis95,3,https://github.com/chocolate-doom/chocolate-doom/pull/1246#issuecomment-583785749,"Currently, sound effects are only precached if Choco has been built
with libsamplerate support and if this is enabled at run-time.
However, I don't see a reason why we would not want to precache all
sounds if libsamplerate is either not available or disabled.
Precaching sounds only takes a second more at start-up but prevents
nasty hick-ups during playing if sounds are loaded and have their
samplerates converted over and over again.
This is inspired by the following bug report by @vanfanel:
fabiangreffrath#508 (comment)",I'm all for optimisations like this.,True,{'THUMBS_UP': ['https://github.com/fx02']}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1246,2020-01-28T09:42:42Z,2022-03-20T07:29:58Z,2022-03-20T07:30:02Z,MERGED,True,0,18,1,https://github.com/fabiangreffrath,always precache sounds,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1246,https://github.com/fragglet,4,https://github.com/chocolate-doom/chocolate-doom/pull/1246#issuecomment-584220057,"Currently, sound effects are only precached if Choco has been built
with libsamplerate support and if this is enabled at run-time.
However, I don't see a reason why we would not want to precache all
sounds if libsamplerate is either not available or disabled.
Precaching sounds only takes a second more at start-up but prevents
nasty hick-ups during playing if sounds are loaded and have their
samplerates converted over and over again.
This is inspired by the following bug report by @vanfanel:
fabiangreffrath#508 (comment)","It should be okay since the conversion when not using libsamplerate is trivial - when doing the high quality libsamplerate precache it takes longer since the conversion is more CPU intensive. The only drawback is that it wastes a lot of RAM. Modern systems have enough RAM that I'm not too concerned about doing that.
However, the precaching in general is an anachronism that I'd like to just get rid of. SDL_mixer's API only lets you play a complete sample, which is why we have to present it with a fully-converted sound effect. There's no reason why sample conversions (via libsamplerate or not) can't just be done on the fly as sounds are played, except that the API doesn't allow it. Indeed, recent versions of SDL have the new audio streaming API that can even call into libsamplerate behind the scenes and do exactly this, so maybe it's worth taking a look?
https://wiki.libsdl.org/Tutorials/AudioStream",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1246,2020-01-28T09:42:42Z,2022-03-20T07:29:58Z,2022-03-20T07:30:02Z,MERGED,True,0,18,1,https://github.com/fabiangreffrath,always precache sounds,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1246,https://github.com/fabiangreffrath,5,https://github.com/chocolate-doom/chocolate-doom/pull/1246#issuecomment-607906055,"Currently, sound effects are only precached if Choco has been built
with libsamplerate support and if this is enabled at run-time.
However, I don't see a reason why we would not want to precache all
sounds if libsamplerate is either not available or disabled.
Precaching sounds only takes a second more at start-up but prevents
nasty hick-ups during playing if sounds are loaded and have their
samplerates converted over and over again.
This is inspired by the following bug report by @vanfanel:
fabiangreffrath#508 (comment)","However, the precaching in general is an anachronism that I'd like to just get rid of.

For the time being, my proposed fix doesn't solve this, but probably increases performance on weak systems until a different path is chosen. At least it won't hurt.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1246,2020-01-28T09:42:42Z,2022-03-20T07:29:58Z,2022-03-20T07:30:02Z,MERGED,True,0,18,1,https://github.com/fabiangreffrath,always precache sounds,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1246,https://github.com/jmtd,6,https://github.com/chocolate-doom/chocolate-doom/pull/1246#issuecomment-634074597,"Currently, sound effects are only precached if Choco has been built
with libsamplerate support and if this is enabled at run-time.
However, I don't see a reason why we would not want to precache all
sounds if libsamplerate is either not available or disabled.
Precaching sounds only takes a second more at start-up but prevents
nasty hick-ups during playing if sounds are loaded and have their
samplerates converted over and over again.
This is inspired by the following bug report by @vanfanel:
fabiangreffrath#508 (comment)","On such systems, how bad is the RAM utilisation from caching if pitch shifting is enabled?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1246,2020-01-28T09:42:42Z,2022-03-20T07:29:58Z,2022-03-20T07:30:02Z,MERGED,True,0,18,1,https://github.com/fabiangreffrath,always precache sounds,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1246,https://github.com/fabiangreffrath,7,https://github.com/chocolate-doom/chocolate-doom/pull/1246#issuecomment-634103936,"Currently, sound effects are only precached if Choco has been built
with libsamplerate support and if this is enabled at run-time.
However, I don't see a reason why we would not want to precache all
sounds if libsamplerate is either not available or disabled.
Precaching sounds only takes a second more at start-up but prevents
nasty hick-ups during playing if sounds are loaded and have their
samplerates converted over and over again.
This is inspired by the following bug report by @vanfanel:
fabiangreffrath#508 (comment)","How do you measure ""how bad""?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1246,2020-01-28T09:42:42Z,2022-03-20T07:29:58Z,2022-03-20T07:30:02Z,MERGED,True,0,18,1,https://github.com/fabiangreffrath,always precache sounds,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1246,https://github.com/drfrag666,8,https://github.com/chocolate-doom/chocolate-doom/pull/1246#issuecomment-680837232,"Currently, sound effects are only precached if Choco has been built
with libsamplerate support and if this is enabled at run-time.
However, I don't see a reason why we would not want to precache all
sounds if libsamplerate is either not available or disabled.
Precaching sounds only takes a second more at start-up but prevents
nasty hick-ups during playing if sounds are loaded and have their
samplerates converted over and over again.
This is inspired by the following bug report by @vanfanel:
fabiangreffrath#508 (comment)",I've merged this but guarded it with the -noprecachesounds parameter to prevent high ram usage,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1246,2020-01-28T09:42:42Z,2022-03-20T07:29:58Z,2022-03-20T07:30:02Z,MERGED,True,0,18,1,https://github.com/fabiangreffrath,always precache sounds,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1246,https://github.com/vanfanel,9,https://github.com/chocolate-doom/chocolate-doom/pull/1246#issuecomment-690805121,"Currently, sound effects are only precached if Choco has been built
with libsamplerate support and if this is enabled at run-time.
However, I don't see a reason why we would not want to precache all
sounds if libsamplerate is either not available or disabled.
Precaching sounds only takes a second more at start-up but prevents
nasty hick-ups during playing if sounds are loaded and have their
samplerates converted over and over again.
This is inspired by the following bug report by @vanfanel:
fabiangreffrath#508 (comment)","@fragglet Any chances this gets merged into Chocolate-Doom? For weak systems like the Raspberry Pi, it's important to avoid stalls during gameplay...
Also, and option to fully caching the game WAD so SD card doesn't have to be accessed in such systems would be prefect!
DoomRetro does all this, and tuns PERFECT in the Pi.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1246,2020-01-28T09:42:42Z,2022-03-20T07:29:58Z,2022-03-20T07:30:02Z,MERGED,True,0,18,1,https://github.com/fabiangreffrath,always precache sounds,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1246,https://github.com/fabiangreffrath,10,https://github.com/chocolate-doom/chocolate-doom/pull/1246#issuecomment-882853646,"Currently, sound effects are only precached if Choco has been built
with libsamplerate support and if this is enabled at run-time.
However, I don't see a reason why we would not want to precache all
sounds if libsamplerate is either not available or disabled.
Precaching sounds only takes a second more at start-up but prevents
nasty hick-ups during playing if sounds are loaded and have their
samplerates converted over and over again.
This is inspired by the following bug report by @vanfanel:
fabiangreffrath#508 (comment)",@fragglet Can't we please just merge this until we can come up with something better?,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1246,2020-01-28T09:42:42Z,2022-03-20T07:29:58Z,2022-03-20T07:30:02Z,MERGED,True,0,18,1,https://github.com/fabiangreffrath,always precache sounds,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1246,https://github.com/fabiangreffrath,11,https://github.com/chocolate-doom/chocolate-doom/pull/1246#issuecomment-966227614,"Currently, sound effects are only precached if Choco has been built
with libsamplerate support and if this is enabled at run-time.
However, I don't see a reason why we would not want to precache all
sounds if libsamplerate is either not available or disabled.
Precaching sounds only takes a second more at start-up but prevents
nasty hick-ups during playing if sounds are loaded and have their
samplerates converted over and over again.
This is inspired by the following bug report by @vanfanel:
fabiangreffrath#508 (comment)","I'd really still like to get this merged. It may not be the optimal solution, but it's a small optimization that doesn't keep us from developing one, either.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1250,2020-02-04T12:05:01Z,2020-04-02T16:58:18Z,2020-04-02T18:27:33Z,MERGED,True,26,18,3,https://github.com/turol,Clean up gamedescription and improve const correctness,11,[],https://github.com/chocolate-doom/chocolate-doom/pull/1250,https://github.com/turol,1,https://github.com/chocolate-doom/chocolate-doom/pull/1250,"Clean up doom gamedescription handling and make GetGameName parameter properly const.
Closes #1138","Clean up doom gamedescription handling and make GetGameName parameter properly const.
Closes #1138",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1250,2020-02-04T12:05:01Z,2020-04-02T16:58:18Z,2020-04-02T18:27:33Z,MERGED,True,26,18,3,https://github.com/turol,Clean up gamedescription and improve const correctness,11,[],https://github.com/chocolate-doom/chocolate-doom/pull/1250,https://github.com/turol,2,https://github.com/chocolate-doom/chocolate-doom/pull/1250#issuecomment-581878836,"Clean up doom gamedescription handling and make GetGameName parameter properly const.
Closes #1138",Also the DEH path has not been thoroughly tested. I tested with Batman Doom but it doesn't appear to change the game description. Does someone know of a WAD that does that so I could test it?,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1250,2020-02-04T12:05:01Z,2020-04-02T16:58:18Z,2020-04-02T18:27:33Z,MERGED,True,26,18,3,https://github.com/turol,Clean up gamedescription and improve const correctness,11,[],https://github.com/chocolate-doom/chocolate-doom/pull/1250,https://github.com/turol,3,https://github.com/chocolate-doom/chocolate-doom/pull/1250#issuecomment-583738114,"Clean up doom gamedescription handling and make GetGameName parameter properly const.
Closes #1138",@fragglet  ping,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1250,2020-02-04T12:05:01Z,2020-04-02T16:58:18Z,2020-04-02T18:27:33Z,MERGED,True,26,18,3,https://github.com/turol,Clean up gamedescription and improve const correctness,11,[],https://github.com/chocolate-doom/chocolate-doom/pull/1250,https://github.com/turol,4,https://github.com/chocolate-doom/chocolate-doom/pull/1250#issuecomment-588877770,"Clean up doom gamedescription handling and make GetGameName parameter properly const.
Closes #1138",@fragglet ping,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1250,2020-02-04T12:05:01Z,2020-04-02T16:58:18Z,2020-04-02T18:27:33Z,MERGED,True,26,18,3,https://github.com/turol,Clean up gamedescription and improve const correctness,11,[],https://github.com/chocolate-doom/chocolate-doom/pull/1250,https://github.com/turol,5,https://github.com/chocolate-doom/chocolate-doom/pull/1250#issuecomment-601879282,"Clean up doom gamedescription handling and make GetGameName parameter properly const.
Closes #1138","@fragglet any objections?
This has been hanging for a while now, can someone else review as well?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1253,2020-02-20T15:36:56Z,2020-02-20T18:07:29Z,2020-02-20T18:13:20Z,MERGED,True,5,1,1,https://github.com/JNechaevsky,Fix GUS emulation with Midiproc.exe,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1253,https://github.com/JNechaevsky,1,https://github.com/chocolate-doom/chocolate-doom/pull/1253,By approval of @AlexMax and @fabiangreffrath. Fixes #1244.,By approval of @AlexMax and @fabiangreffrath. Fixes #1244.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1253,2020-02-20T15:36:56Z,2020-02-20T18:07:29Z,2020-02-20T18:13:20Z,MERGED,True,5,1,1,https://github.com/JNechaevsky,Fix GUS emulation with Midiproc.exe,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1253,https://github.com/JNechaevsky,2,https://github.com/chocolate-doom/chocolate-doom/pull/1253#issuecomment-589218227,By approval of @AlexMax and @fabiangreffrath. Fixes #1244.,"Oh, I see. Should be:
    // Don't enable it for GUS, since it handles its own volume just fine.
    if (snd_musicdevice != SNDDEVICE_GUS)
    {
        I_MidiPipe_InitServer();
    }

Right?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1253,2020-02-20T15:36:56Z,2020-02-20T18:07:29Z,2020-02-20T18:13:20Z,MERGED,True,5,1,1,https://github.com/JNechaevsky,Fix GUS emulation with Midiproc.exe,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1253,https://github.com/fabiangreffrath,3,https://github.com/chocolate-doom/chocolate-doom/pull/1253#issuecomment-589220800,By approval of @AlexMax and @fabiangreffrath. Fixes #1244.,Yep.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1253,2020-02-20T15:36:56Z,2020-02-20T18:07:29Z,2020-02-20T18:13:20Z,MERGED,True,5,1,1,https://github.com/JNechaevsky,Fix GUS emulation with Midiproc.exe,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1253,https://github.com/JNechaevsky,4,https://github.com/chocolate-doom/chocolate-doom/pull/1253#issuecomment-589223116,By approval of @AlexMax and @fabiangreffrath. Fixes #1244.,"Fixed, apologies for carelessness.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1253,2020-02-20T15:36:56Z,2020-02-20T18:07:29Z,2020-02-20T18:13:20Z,MERGED,True,5,1,1,https://github.com/JNechaevsky,Fix GUS emulation with Midiproc.exe,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1253,https://github.com/fabiangreffrath,5,https://github.com/chocolate-doom/chocolate-doom/pull/1253#issuecomment-589230454,By approval of @AlexMax and @fabiangreffrath. Fixes #1244.,Thanks!,True,{'HEART': ['https://github.com/JNechaevsky']}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1255,2020-03-12T09:35:20Z,2020-03-12T11:49:27Z,2020-03-12T11:49:35Z,MERGED,True,3,3,1,https://github.com/wellslutw,Fix segmentation fault when running on rgb565 screen,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1255,https://github.com/wellslutw,1,https://github.com/chocolate-doom/chocolate-doom/pull/1255,"Pixel depth of rgb565 format is 16, instead of 32.
Using fixed value of 32 causes Segmentation fault when run
the statement:
SDL_LowerBlit(screenbuffer, &blit_rect, rgbabuffer, &blit_rect)","Pixel depth of rgb565 format is 16, instead of 32.
Using fixed value of 32 causes Segmentation fault when run
the statement:
SDL_LowerBlit(screenbuffer, &blit_rect, rgbabuffer, &blit_rect)",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1255,2020-03-12T09:35:20Z,2020-03-12T11:49:27Z,2020-03-12T11:49:35Z,MERGED,True,3,3,1,https://github.com/wellslutw,Fix segmentation fault when running on rgb565 screen,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1255,https://github.com/fabiangreffrath,2,https://github.com/chocolate-doom/chocolate-doom/pull/1255#issuecomment-598105588,"Pixel depth of rgb565 format is 16, instead of 32.
Using fixed value of 32 causes Segmentation fault when run
the statement:
SDL_LowerBlit(screenbuffer, &blit_rect, rgbabuffer, &blit_rect)","Out of sheer interest, which hardware runs a rgb565 screen?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1255,2020-03-12T09:35:20Z,2020-03-12T11:49:27Z,2020-03-12T11:49:35Z,MERGED,True,3,3,1,https://github.com/wellslutw,Fix segmentation fault when running on rgb565 screen,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1255,https://github.com/wellslutw,3,https://github.com/chocolate-doom/chocolate-doom/pull/1255#issuecomment-598118479,"Pixel depth of rgb565 format is 16, instead of 32.
Using fixed value of 32 causes Segmentation fault when run
the statement:
SDL_LowerBlit(screenbuffer, &blit_rect, rgbabuffer, &blit_rect)","It is Banana Pi BPI-F2S in which a Sunplus SOC SP7021 is used.
Refer to: http://wiki.banana-pi.org/Banana_Pi_BPI-F2S",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1255,2020-03-12T09:35:20Z,2020-03-12T11:49:27Z,2020-03-12T11:49:35Z,MERGED,True,3,3,1,https://github.com/wellslutw,Fix segmentation fault when running on rgb565 screen,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1255,https://github.com/fabiangreffrath,4,https://github.com/chocolate-doom/chocolate-doom/pull/1255#issuecomment-598133482,"Pixel depth of rgb565 format is 16, instead of 32.
Using fixed value of 32 causes Segmentation fault when run
the statement:
SDL_LowerBlit(screenbuffer, &blit_rect, rgbabuffer, &blit_rect)",And with your small fix Choco will run on this board?,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1255,2020-03-12T09:35:20Z,2020-03-12T11:49:27Z,2020-03-12T11:49:35Z,MERGED,True,3,3,1,https://github.com/wellslutw,Fix segmentation fault when running on rgb565 screen,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1255,https://github.com/wellslutw,5,https://github.com/chocolate-doom/chocolate-doom/pull/1255#issuecomment-598141835,"Pixel depth of rgb565 format is 16, instead of 32.
Using fixed value of 32 causes Segmentation fault when run
the statement:
SDL_LowerBlit(screenbuffer, &blit_rect, rgbabuffer, &blit_rect)","And with your small fix Choco will run on this board?

Yes, it does.
I did not play the game for long time. Just ran several minutes.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1255,2020-03-12T09:35:20Z,2020-03-12T11:49:27Z,2020-03-12T11:49:35Z,MERGED,True,3,3,1,https://github.com/wellslutw,Fix segmentation fault when running on rgb565 screen,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1255,https://github.com/fabiangreffrath,6,https://github.com/chocolate-doom/chocolate-doom/pull/1255#issuecomment-598144680,"Pixel depth of rgb565 format is 16, instead of 32.
Using fixed value of 32 causes Segmentation fault when run
the statement:
SDL_LowerBlit(screenbuffer, &blit_rect, rgbabuffer, &blit_rect)","Cool, thanks!",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1256,2020-03-14T14:30:05Z,2020-03-19T03:02:57Z,2020-03-19T16:10:49Z,MERGED,True,99,40,5,https://github.com/kraflab,Add heretic mouse inventory buttons,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1256,https://github.com/kraflab,1,https://github.com/chocolate-doom/chocolate-doom/pull/1256,"Hello 👋
This PR adds mouse buttons for moving the inventory cursor in heretic. I find using keys is quite cumbersome, especially when going for speed, whereas the mouse wheel is perfect for this task. Maybe someone else agrees 😉
I extracted the inventory left / right code into separate functions so we don't duplicate the code for key and mouse. I tried to follow the general pattern I saw for other mouse buttons, so hopefully the implementation makes sense.
I originally opened this for crispy, but Fabian recommended I open it up for chocolate directly.
Let me know if there are any issues!","Hello 👋
This PR adds mouse buttons for moving the inventory cursor in heretic. I find using keys is quite cumbersome, especially when going for speed, whereas the mouse wheel is perfect for this task. Maybe someone else agrees 😉
I extracted the inventory left / right code into separate functions so we don't duplicate the code for key and mouse. I tried to follow the general pattern I saw for other mouse buttons, so hopefully the implementation makes sense.
I originally opened this for crispy, but Fabian recommended I open it up for chocolate directly.
Let me know if there are any issues!",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1256,2020-03-14T14:30:05Z,2020-03-19T03:02:57Z,2020-03-19T16:10:49Z,MERGED,True,99,40,5,https://github.com/kraflab,Add heretic mouse inventory buttons,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1256,https://github.com/fabiangreffrath,2,https://github.com/chocolate-doom/chocolate-doom/pull/1256#issuecomment-599188188,"Hello 👋
This PR adds mouse buttons for moving the inventory cursor in heretic. I find using keys is quite cumbersome, especially when going for speed, whereas the mouse wheel is perfect for this task. Maybe someone else agrees 😉
I extracted the inventory left / right code into separate functions so we don't duplicate the code for key and mouse. I tried to follow the general pattern I saw for other mouse buttons, so hopefully the implementation makes sense.
I originally opened this for crispy, but Fabian recommended I open it up for chocolate directly.
Let me know if there are any issues!",@fragglet Okay to merge?,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1256,2020-03-14T14:30:05Z,2020-03-19T03:02:57Z,2020-03-19T16:10:49Z,MERGED,True,99,40,5,https://github.com/kraflab,Add heretic mouse inventory buttons,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1256,https://github.com/fragglet,3,https://github.com/chocolate-doom/chocolate-doom/pull/1256#issuecomment-600962606,"Hello 👋
This PR adds mouse buttons for moving the inventory cursor in heretic. I find using keys is quite cumbersome, especially when going for speed, whereas the mouse wheel is perfect for this task. Maybe someone else agrees 😉
I extracted the inventory left / right code into separate functions so we don't duplicate the code for key and mouse. I tried to follow the general pattern I saw for other mouse buttons, so hopefully the implementation makes sense.
I originally opened this for crispy, but Fabian recommended I open it up for chocolate directly.
Let me know if there are any issues!",Nice! Thanks for this.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1257,2020-03-15T22:43:20Z,2020-03-19T03:03:23Z,2020-03-19T17:49:56Z,MERGED,True,0,1,1,https://github.com/xordspar0,Remove redundant demoextend definition,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1257,https://github.com/xordspar0,1,https://github.com/chocolate-doom/chocolate-doom/pull/1257,"GCC 10 enables -fno-common by default, which causes the linker to fail when
there are multple definitions of a global variable.
See https://gcc.gnu.org/gcc-10/porting_to.html
This is causing a build failure in the upcoming Fedora 32: https://bugzilla.redhat.com/show_bug.cgi?id=1799222","GCC 10 enables -fno-common by default, which causes the linker to fail when
there are multple definitions of a global variable.
See https://gcc.gnu.org/gcc-10/porting_to.html
This is causing a build failure in the upcoming Fedora 32: https://bugzilla.redhat.com/show_bug.cgi?id=1799222",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1257,2020-03-15T22:43:20Z,2020-03-19T03:03:23Z,2020-03-19T17:49:56Z,MERGED,True,0,1,1,https://github.com/xordspar0,Remove redundant demoextend definition,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1257,https://github.com/xordspar0,2,https://github.com/chocolate-doom/chocolate-doom/pull/1257#issuecomment-601324485,"GCC 10 enables -fno-common by default, which causes the linker to fail when
there are multple definitions of a global variable.
See https://gcc.gnu.org/gcc-10/porting_to.html
This is causing a build failure in the upcoming Fedora 32: https://bugzilla.redhat.com/show_bug.cgi?id=1799222",🎉,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1263,2020-04-04T16:59:06Z,2020-04-05T11:15:40Z,2020-04-11T23:51:14Z,MERGED,True,10,0,9,https://github.com/drfrag666,Fixed compilation with Code::Blocks and TDM-GCC 5.1,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1263,https://github.com/drfrag666,1,https://github.com/chocolate-doom/chocolate-doom/pull/1263,,,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1263,2020-04-04T16:59:06Z,2020-04-05T11:15:40Z,2020-04-11T23:51:14Z,MERGED,True,10,0,9,https://github.com/drfrag666,Fixed compilation with Code::Blocks and TDM-GCC 5.1,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1263,https://github.com/turol,2,https://github.com/chocolate-doom/chocolate-doom/pull/1263#issuecomment-609062848,,The commit message could be better. It should say that it's adding includes and should not start with a dash.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1263,2020-04-04T16:59:06Z,2020-04-05T11:15:40Z,2020-04-11T23:51:14Z,MERGED,True,10,0,9,https://github.com/drfrag666,Fixed compilation with Code::Blocks and TDM-GCC 5.1,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1263,https://github.com/drfrag666,3,https://github.com/chocolate-doom/chocolate-doom/pull/1263#issuecomment-609066063,,Changed.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1264,2020-04-04T19:51:27Z,2020-04-04T20:39:39Z,2021-08-18T09:00:06Z,MERGED,True,2,0,1,https://github.com/fragglet,Add active branches to Travis build.,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1264,https://github.com/fragglet,1,https://github.com/chocolate-doom/chocolate-doom/pull/1264,,,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1265,2020-04-06T19:38:11Z,2021-09-25T21:35:56Z,2021-09-25T21:35:56Z,CLOSED,False,806,196,17,https://github.com/madebr,Chocolate: cmake + autotools updates,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/1265,https://github.com/madebr,1,https://github.com/chocolate-doom/chocolate-doom/pull/1265,"Changes to the cmake build system:

compile the common doom/heretix/hexen/strife libraries as static libraries and link them together. This reduces the build time a little (13s -> 11s on my system using -j9)
the project variables are parsed from configure.ac.
add generation of the mans+bash completion+desktop icon+...
add install target. The installed tree is the same as the one of autotools. The only difference is that it doesn't copy chocolate-server to chocolate-server-{doom,heretic,hexen,strife} but creates symbolic links.

Changes to autotools + cmake:

generate headers from the images and include these (instead of .c files)
Use PACKAGE_BUGREPORT everywhere. Before, a mixture of PACKAGE_ISSUES and PACKAGE_BUGREPORT as used (but not both were set).","Changes to the cmake build system:

compile the common doom/heretix/hexen/strife libraries as static libraries and link them together. This reduces the build time a little (13s -> 11s on my system using -j9)
the project variables are parsed from configure.ac.
add generation of the mans+bash completion+desktop icon+...
add install target. The installed tree is the same as the one of autotools. The only difference is that it doesn't copy chocolate-server to chocolate-server-{doom,heretic,hexen,strife} but creates symbolic links.

Changes to autotools + cmake:

generate headers from the images and include these (instead of .c files)
Use PACKAGE_BUGREPORT everywhere. Before, a mixture of PACKAGE_ISSUES and PACKAGE_BUGREPORT as used (but not both were set).",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1265,2020-04-06T19:38:11Z,2021-09-25T21:35:56Z,2021-09-25T21:35:56Z,CLOSED,False,806,196,17,https://github.com/madebr,Chocolate: cmake + autotools updates,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/1265,https://github.com/fragglet,2,https://github.com/chocolate-doom/chocolate-doom/pull/1265#issuecomment-610448167,"Changes to the cmake build system:

compile the common doom/heretix/hexen/strife libraries as static libraries and link them together. This reduces the build time a little (13s -> 11s on my system using -j9)
the project variables are parsed from configure.ac.
add generation of the mans+bash completion+desktop icon+...
add install target. The installed tree is the same as the one of autotools. The only difference is that it doesn't copy chocolate-server to chocolate-server-{doom,heretic,hexen,strife} but creates symbolic links.

Changes to autotools + cmake:

generate headers from the images and include these (instead of .c files)
Use PACKAGE_BUGREPORT everywhere. Before, a mixture of PACKAGE_ISSUES and PACKAGE_BUGREPORT as used (but not both were set).",@AlexMax can you take a look?,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1265,2020-04-06T19:38:11Z,2021-09-25T21:35:56Z,2021-09-25T21:35:56Z,CLOSED,False,806,196,17,https://github.com/madebr,Chocolate: cmake + autotools updates,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/1265,https://github.com/fragglet,3,https://github.com/chocolate-doom/chocolate-doom/pull/1265#issuecomment-610453248,"Changes to the cmake build system:

compile the common doom/heretix/hexen/strife libraries as static libraries and link them together. This reduces the build time a little (13s -> 11s on my system using -j9)
the project variables are parsed from configure.ac.
add generation of the mans+bash completion+desktop icon+...
add install target. The installed tree is the same as the one of autotools. The only difference is that it doesn't copy chocolate-server to chocolate-server-{doom,heretic,hexen,strife} but creates symbolic links.

Changes to autotools + cmake:

generate headers from the images and include these (instead of .c files)
Use PACKAGE_BUGREPORT everywhere. Before, a mixture of PACKAGE_ISSUES and PACKAGE_BUGREPORT as used (but not both were set).","My immediate reaction from a quick look at the diff is that this appears to be changing too many things all together. It would be better if you broke this up into several distinct pull requests so that it can be more easily reviewed. For example:

Why is there an unrelated change to the convert-icon script in this PR?
Can you submit the formatting changes separately so that we can get those in before we consider the rest?
Same with the change to the BUGREPORT variable - submit that separately.
Please remove the icon.c -> icon.h file renames.

The module that uses regexs to pull variables out of configure.ac also looks a bit too clever for my liking.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1265,2020-04-06T19:38:11Z,2021-09-25T21:35:56Z,2021-09-25T21:35:56Z,CLOSED,False,806,196,17,https://github.com/madebr,Chocolate: cmake + autotools updates,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/1265,https://github.com/madebr,4,https://github.com/chocolate-doom/chocolate-doom/pull/1265#issuecomment-610459843,"Changes to the cmake build system:

compile the common doom/heretix/hexen/strife libraries as static libraries and link them together. This reduces the build time a little (13s -> 11s on my system using -j9)
the project variables are parsed from configure.ac.
add generation of the mans+bash completion+desktop icon+...
add install target. The installed tree is the same as the one of autotools. The only difference is that it doesn't copy chocolate-server to chocolate-server-{doom,heretic,hexen,strife} but creates symbolic links.

Changes to autotools + cmake:

generate headers from the images and include these (instead of .c files)
Use PACKAGE_BUGREPORT everywhere. Before, a mixture of PACKAGE_ISSUES and PACKAGE_BUGREPORT as used (but not both were set).","* Why is there an unrelated change to the `convert-icon` script in this PR?


It's related and unrelated. Using current master, if Python Pillow is not installed, the generation of the icon sources fails silently, which is never ok imho. I'll open a pr for this.

* Can you submit the formatting changes separately so that we can get those in before we consider the rest?


I didn't mean to do any reformatting changes. I'll keep it to a low.

* Same with the change to the `BUGREPORT` variable - submit that separately.


ok

* Please remove the `icon.c` -> `icon.h` file renames.


Ok to create pr for this? It's weird to include a .c file in another source, as was also mentioned in the c++ weekly stream.
I've also made these headers because cmake requires generated sources to be added to the dependency list. Because of that, icon.c is compiled separately and emits warnings because its static variables are not used.

The module that uses regexs to pull variables out of configure.ac also looks a bit too clever for my liking.

I did this to reduce code duplication. If you are ok with updating the variables in both configure.ac and CMakeLists.txt, I'll remove the regex'es.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1265,2020-04-06T19:38:11Z,2021-09-25T21:35:56Z,2021-09-25T21:35:56Z,CLOSED,False,806,196,17,https://github.com/madebr,Chocolate: cmake + autotools updates,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/1265,https://github.com/AlexMax,5,https://github.com/chocolate-doom/chocolate-doom/pull/1265#issuecomment-610497007,"Changes to the cmake build system:

compile the common doom/heretix/hexen/strife libraries as static libraries and link them together. This reduces the build time a little (13s -> 11s on my system using -j9)
the project variables are parsed from configure.ac.
add generation of the mans+bash completion+desktop icon+...
add install target. The installed tree is the same as the one of autotools. The only difference is that it doesn't copy chocolate-server to chocolate-server-{doom,heretic,hexen,strife} but creates symbolic links.

Changes to autotools + cmake:

generate headers from the images and include these (instead of .c files)
Use PACKAGE_BUGREPORT everywhere. Before, a mixture of PACKAGE_ISSUES and PACKAGE_BUGREPORT as used (but not both were set).","I agree with fraggle, there's a LOT of changes in here to pick through.  I'm going to need a little bit of time to do some testing.
The only thing that jumps out to me as problematic on a quick glance-through is your check to see if the project is included as add_subdirectory.  ExternalProject is a much better way to compile dependencies, because unlike add_subdirectory it doesn't pollute the parent project's cache variables and such.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1265,2020-04-06T19:38:11Z,2021-09-25T21:35:56Z,2021-09-25T21:35:56Z,CLOSED,False,806,196,17,https://github.com/madebr,Chocolate: cmake + autotools updates,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/1265,https://github.com/madebr,6,https://github.com/chocolate-doom/chocolate-doom/pull/1265#issuecomment-610499767,"Changes to the cmake build system:

compile the common doom/heretix/hexen/strife libraries as static libraries and link them together. This reduces the build time a little (13s -> 11s on my system using -j9)
the project variables are parsed from configure.ac.
add generation of the mans+bash completion+desktop icon+...
add install target. The installed tree is the same as the one of autotools. The only difference is that it doesn't copy chocolate-server to chocolate-server-{doom,heretic,hexen,strife} but creates symbolic links.

Changes to autotools + cmake:

generate headers from the images and include these (instead of .c files)
Use PACKAGE_BUGREPORT everywhere. Before, a mixture of PACKAGE_ISSUES and PACKAGE_BUGREPORT as used (but not both were set).","The only thing that jumps out to me as problematic on a quick glance-through is your check to see if the project is included as add_subdirectory. ExternalProject is a much better way to compile dependencies, because unlike add_subdirectory it doesn't pollute the parent project's cache variables and such.

The check is done for the default value of enabling the install target.
Because users who add chocolate-doom as a subproject might not want to install it.
This enables inclusion as a git submodule instead of downloading.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1265,2020-04-06T19:38:11Z,2021-09-25T21:35:56Z,2021-09-25T21:35:56Z,CLOSED,False,806,196,17,https://github.com/madebr,Chocolate: cmake + autotools updates,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/1265,https://github.com/AlexMax,7,https://github.com/chocolate-doom/chocolate-doom/pull/1265#issuecomment-610500979,"Changes to the cmake build system:

compile the common doom/heretix/hexen/strife libraries as static libraries and link them together. This reduces the build time a little (13s -> 11s on my system using -j9)
the project variables are parsed from configure.ac.
add generation of the mans+bash completion+desktop icon+...
add install target. The installed tree is the same as the one of autotools. The only difference is that it doesn't copy chocolate-server to chocolate-server-{doom,heretic,hexen,strife} but creates symbolic links.

Changes to autotools + cmake:

generate headers from the images and include these (instead of .c files)
Use PACKAGE_BUGREPORT everywhere. Before, a mixture of PACKAGE_ISSUES and PACKAGE_BUGREPORT as used (but not both were set).","The only thing that jumps out to me as problematic on a quick glance-through is your check to see if the project is included as add_subdirectory. ExternalProject is a much better way to compile dependencies, because unlike add_subdirectory it doesn't pollute the parent project's cache variables and such.

The check is done for the default value of enabling the install target.
Because users who add chocolate-doom as a subproject might not want to install it.

Right, and I'm saying that doing that in the first place is probably not a good idea, and that they would probably be better served by using ExternalProject, which compiles the subproject in a vacuum without any pollution of the parent project.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1265,2020-04-06T19:38:11Z,2021-09-25T21:35:56Z,2021-09-25T21:35:56Z,CLOSED,False,806,196,17,https://github.com/madebr,Chocolate: cmake + autotools updates,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/1265,https://github.com/madebr,8,https://github.com/chocolate-doom/chocolate-doom/pull/1265#issuecomment-610502495,"Changes to the cmake build system:

compile the common doom/heretix/hexen/strife libraries as static libraries and link them together. This reduces the build time a little (13s -> 11s on my system using -j9)
the project variables are parsed from configure.ac.
add generation of the mans+bash completion+desktop icon+...
add install target. The installed tree is the same as the one of autotools. The only difference is that it doesn't copy chocolate-server to chocolate-server-{doom,heretic,hexen,strife} but creates symbolic links.

Changes to autotools + cmake:

generate headers from the images and include these (instead of .c files)
Use PACKAGE_BUGREPORT everywhere. Before, a mixture of PACKAGE_ISSUES and PACKAGE_BUGREPORT as used (but not both were set).","Right, and I'm saying that doing that in the first place is probably not a good idea, and that they would probably be better served by using ExternalProject, which compiles the subproject in a vacuum without any pollution of the parent project.

The project might always be inserted as a git submodule. Pollution of cache variables is not a concern if those variables are prepended carefully (using DOOM_ for example).",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1265,2020-04-06T19:38:11Z,2021-09-25T21:35:56Z,2021-09-25T21:35:56Z,CLOSED,False,806,196,17,https://github.com/madebr,Chocolate: cmake + autotools updates,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/1265,https://github.com/AlexMax,9,https://github.com/chocolate-doom/chocolate-doom/pull/1265#issuecomment-610505598,"Changes to the cmake build system:

compile the common doom/heretix/hexen/strife libraries as static libraries and link them together. This reduces the build time a little (13s -> 11s on my system using -j9)
the project variables are parsed from configure.ac.
add generation of the mans+bash completion+desktop icon+...
add install target. The installed tree is the same as the one of autotools. The only difference is that it doesn't copy chocolate-server to chocolate-server-{doom,heretic,hexen,strife} but creates symbolic links.

Changes to autotools + cmake:

generate headers from the images and include these (instead of .c files)
Use PACKAGE_BUGREPORT everywhere. Before, a mixture of PACKAGE_ISSUES and PACKAGE_BUGREPORT as used (but not both were set).","Right, and I'm saying that doing that in the first place is probably not a good idea, and that they would probably be better served by using ExternalProject, which compiles the subproject in a vacuum without any pollution of the parent project.

The project might always be inserted as a git submodule.

There's no reason the download step can't be skipped - or overridden to checkout the submodule.

Pollution of cache variables is not a concern if those variables are prepended carefully (using DOOM_ for example).

Pollution goes both ways, and if there's a conflict with something like SDL or one of the CMake variables then things can go south incredibly quickly.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1265,2020-04-06T19:38:11Z,2021-09-25T21:35:56Z,2021-09-25T21:35:56Z,CLOSED,False,806,196,17,https://github.com/madebr,Chocolate: cmake + autotools updates,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/1265,https://github.com/madebr,10,https://github.com/chocolate-doom/chocolate-doom/pull/1265#issuecomment-610510506,"Changes to the cmake build system:

compile the common doom/heretix/hexen/strife libraries as static libraries and link them together. This reduces the build time a little (13s -> 11s on my system using -j9)
the project variables are parsed from configure.ac.
add generation of the mans+bash completion+desktop icon+...
add install target. The installed tree is the same as the one of autotools. The only difference is that it doesn't copy chocolate-server to chocolate-server-{doom,heretic,hexen,strife} but creates symbolic links.

Changes to autotools + cmake:

generate headers from the images and include these (instead of .c files)
Use PACKAGE_BUGREPORT everywhere. Before, a mixture of PACKAGE_ISSUES and PACKAGE_BUGREPORT as used (but not both were set).","The project might always be inserted as a git submodule.

There's no reason the download step can't be skipped - or overridden to checkout the submodule.

I meant adding doom as a subproject and not using ExternalProject.
Using a submodule allows users to make changes to doom whereas ExternalProject requires patches (=not easy).
Using an optional install, as proposed by this pr, does not exclude using ExternalProject.


Pollution of cache variables is not a concern if those variables are prepended carefully (using DOOM_ for example).

Pollution goes both ways, and if there's a conflict with something like SDL or one of the CMake variables then things can go south incredibly quickly.

Agreed,  but users can always shoot in their own foot.
Even now, if a users passes a bad SDL2_DIR, the build will fail. Garbage in, garbage out.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1266,2020-04-06T20:14:20Z,2020-04-11T00:08:05Z,2020-04-11T00:08:05Z,MERGED,True,2,0,1,https://github.com/NY00123,hexen: Disable checks in A_SoAExplode not present in version 1.1,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1266,https://github.com/NY00123,1,https://github.com/chocolate-doom/chocolate-doom/pull/1266,"I've recently inspected version 1.1 of the Hexen EXE for DOS. Following earlier hints from Nuke.YKT, I've used (for the purpose of building a DOS EXE only) the DMX 33gs headers and the DMX 34a lib, along with Watcom C32 10.0 and Turbo Assembler 3.1, in order to build an EXE. The build command is ""M F"". I've then found out one difference in A_SoAExplode.
After disabling the checks as described in my suggested commit, I've gotten an EXE which is - probably - more-or-less binary identical to the original. I believe that it differs from the latter just by the lack of the DOS/4GW Professional loader, the VERSIONTEXT macro and garbage data inserted by Watcom C32 10.0 between C string literals (at least for most).
Nuke.YKT has then found out that this difference is still present in the Chocolate Doom codebase, thus leading me to here with this patch.
I haven't actually checked what impact does this have on the game, thus I'm simply adding the patch so it isn't forgotten.","I've recently inspected version 1.1 of the Hexen EXE for DOS. Following earlier hints from Nuke.YKT, I've used (for the purpose of building a DOS EXE only) the DMX 33gs headers and the DMX 34a lib, along with Watcom C32 10.0 and Turbo Assembler 3.1, in order to build an EXE. The build command is ""M F"". I've then found out one difference in A_SoAExplode.
After disabling the checks as described in my suggested commit, I've gotten an EXE which is - probably - more-or-less binary identical to the original. I believe that it differs from the latter just by the lack of the DOS/4GW Professional loader, the VERSIONTEXT macro and garbage data inserted by Watcom C32 10.0 between C string literals (at least for most).
Nuke.YKT has then found out that this difference is still present in the Chocolate Doom codebase, thus leading me to here with this patch.
I haven't actually checked what impact does this have on the game, thus I'm simply adding the patch so it isn't forgotten.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1266,2020-04-06T20:14:20Z,2020-04-11T00:08:05Z,2020-04-11T00:08:05Z,MERGED,True,2,0,1,https://github.com/NY00123,hexen: Disable checks in A_SoAExplode not present in version 1.1,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1266,https://github.com/NY00123,2,https://github.com/chocolate-doom/chocolate-doom/pull/1266#issuecomment-611494838,"I've recently inspected version 1.1 of the Hexen EXE for DOS. Following earlier hints from Nuke.YKT, I've used (for the purpose of building a DOS EXE only) the DMX 33gs headers and the DMX 34a lib, along with Watcom C32 10.0 and Turbo Assembler 3.1, in order to build an EXE. The build command is ""M F"". I've then found out one difference in A_SoAExplode.
After disabling the checks as described in my suggested commit, I've gotten an EXE which is - probably - more-or-less binary identical to the original. I believe that it differs from the latter just by the lack of the DOS/4GW Professional loader, the VERSIONTEXT macro and garbage data inserted by Watcom C32 10.0 between C string literals (at least for most).
Nuke.YKT has then found out that this difference is still present in the Chocolate Doom codebase, thus leading me to here with this patch.
I haven't actually checked what impact does this have on the game, thus I'm simply adding the patch so it isn't forgotten.","Thanks for having a look.
I've just checked this in Hexen: Deathkings of the Dark Citadel. This can be reproduced in the first hub's secret map, Pyre.
See attached saved game and screenshot with coordinates.
Steps to reproduce:

Start DK via the original DOS EXE with the -nomonsters parameter, and then load the attached saved game.
Break the suit of armor in front of you.
Repeat the same but with Chocolate Hexen.

What happens in this case, is that a dark bishop is unexpectedly spawned if the DOS EXE is used. Inheriting a bug fix from the open-source release, it is currently not spawned in Chocolate Hexen.
hex11tst
hexendk_007",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1267,2020-04-07T15:41:18Z,2020-04-08T00:56:32Z,2020-04-08T02:02:00Z,MERGED,True,6,6,5,https://github.com/madebr,Use PACKAGE_BUGREPORT (instead of PACKAGE_ISSUES),1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1267,https://github.com/madebr,1,https://github.com/chocolate-doom/chocolate-doom/pull/1267,"Extracted from #1265
Use PACKAGE_BUGREPORT everywhere.
Before, a mixture of PACKAGE_ISSUES and PACKAGE_BUGREPORT was used (but not both were set).","Extracted from #1265
Use PACKAGE_BUGREPORT everywhere.
Before, a mixture of PACKAGE_ISSUES and PACKAGE_BUGREPORT was used (but not both were set).",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1267,2020-04-07T15:41:18Z,2020-04-08T00:56:32Z,2020-04-08T02:02:00Z,MERGED,True,6,6,5,https://github.com/madebr,Use PACKAGE_BUGREPORT (instead of PACKAGE_ISSUES),1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1267,https://github.com/fragglet,2,https://github.com/chocolate-doom/chocolate-doom/pull/1267#issuecomment-610692675,"Extracted from #1265
Use PACKAGE_BUGREPORT everywhere.
Before, a mixture of PACKAGE_ISSUES and PACKAGE_BUGREPORT was used (but not both were set).",Thanks!,True,{'HEART': ['https://github.com/madebr']}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1268,2020-04-07T16:30:57Z,,2020-04-07T16:36:54Z,OPEN,False,7,6,7,https://github.com/madebr,generate and include icon as .h instead of .c,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1268,https://github.com/madebr,1,https://github.com/chocolate-doom/chocolate-doom/pull/1268,"See #1265
generate headers from the images and include these (instead of .c files)","See #1265
generate headers from the images and include these (instead of .c files)",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1272,2020-04-20T14:25:38Z,2020-04-20T14:25:53Z,2020-04-20T14:26:01Z,CLOSED,False,27278,7842,239,https://github.com/fabiangreffrath,Masterlevelsfile,2215,[],https://github.com/chocolate-doom/chocolate-doom/pull/1272,https://github.com/fabiangreffrath,1,https://github.com/chocolate-doom/chocolate-doom/pull/1272,,,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1273,2020-04-22T21:02:31Z,2020-04-23T11:39:18Z,2020-04-25T20:04:51Z,MERGED,True,19,1,5,https://github.com/kitchen-ace,Heretic: Allow Morph Ovum to be bound to a key,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1273,https://github.com/kitchen-ace,1,https://github.com/chocolate-doom/chocolate-doom/pull/1273,"It was forgotten in the previous commit that added hotkeys for artifacts.
I followed the previous commit's method of not duplicating Hexen artifact keys, and so the new key is key_arti_morph.
@JNechaevsky you might want to add this to Russian Doom. (er, Russian Heretic that is)","It was forgotten in the previous commit that added hotkeys for artifacts.
I followed the previous commit's method of not duplicating Hexen artifact keys, and so the new key is key_arti_morph.
@JNechaevsky you might want to add this to Russian Doom. (er, Russian Heretic that is)",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1273,2020-04-22T21:02:31Z,2020-04-23T11:39:18Z,2020-04-25T20:04:51Z,MERGED,True,19,1,5,https://github.com/kitchen-ace,Heretic: Allow Morph Ovum to be bound to a key,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1273,https://github.com/fabiangreffrath,2,https://github.com/chocolate-doom/chocolate-doom/pull/1273#issuecomment-618352207,"It was forgotten in the previous commit that added hotkeys for artifacts.
I followed the previous commit's method of not duplicating Hexen artifact keys, and so the new key is key_arti_morph.
@JNechaevsky you might want to add this to Russian Doom. (er, Russian Heretic that is)",Thanks!,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1273,2020-04-22T21:02:31Z,2020-04-23T11:39:18Z,2020-04-25T20:04:51Z,MERGED,True,19,1,5,https://github.com/kitchen-ace,Heretic: Allow Morph Ovum to be bound to a key,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1273,https://github.com/JNechaevsky,3,https://github.com/chocolate-doom/chocolate-doom/pull/1273#issuecomment-619433489,"It was forgotten in the previous commit that added hotkeys for artifacts.
I followed the previous commit's method of not duplicating Hexen artifact keys, and so the new key is key_arti_morph.
@JNechaevsky you might want to add this to Russian Doom. (er, Russian Heretic that is)","@kitchen-ace, looks likes I'm already have it: https://github.com/JNechaevsky/russian-doom/blob/master/src/heretic/g_game.c#L595
Thanks anyway!",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1274,2020-04-26T13:26:54Z,2020-04-27T16:37:24Z,2020-04-27T16:37:30Z,MERGED,True,18,13,2,https://github.com/turol,doom: Refactor chat macro defaults for const correctness,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1274,https://github.com/turol,1,https://github.com/chocolate-doom/chocolate-doom/pull/1274,"chat_macros is passed to M_BindStringVariable which might ovewrite
its contents so it can't be const. But the default values are constants
so it should be const. Solve this by moving defaults to their own list
and initializing chat_macros in D_BindVariables just before they're
bound to string variables.
This might cause some memory leaks but I'm leaving that until later since it would require some refactoring and a lot of checking of the string config variable handling.","chat_macros is passed to M_BindStringVariable which might ovewrite
its contents so it can't be const. But the default values are constants
so it should be const. Solve this by moving defaults to their own list
and initializing chat_macros in D_BindVariables just before they're
bound to string variables.
This might cause some memory leaks but I'm leaving that until later since it would require some refactoring and a lot of checking of the string config variable handling.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1276,2020-04-29T19:03:18Z,2020-05-01T00:52:23Z,2020-05-01T09:21:52Z,MERGED,True,37,26,5,https://github.com/turol,More const correctness,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/1276,https://github.com/turol,1,https://github.com/chocolate-doom/chocolate-doom/pull/1276,Hexen/Strife version of the previous Doom fix and one more trivial bit.,Hexen/Strife version of the previous Doom fix and one more trivial bit.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1278,2020-05-02T13:07:37Z,2020-05-02T16:50:31Z,2020-05-02T16:50:36Z,MERGED,True,19,19,16,https://github.com/turol,Even more const correctness,13,[],https://github.com/chocolate-doom/chocolate-doom/pull/1278,https://github.com/turol,1,https://github.com/chocolate-doom/chocolate-doom/pull/1278,,,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1280,2020-05-03T21:16:53Z,2020-05-04T15:28:52Z,2021-08-18T09:00:08Z,MERGED,True,7,1,1,https://github.com/fragglet,music: Disable Fluidsynth when we want Timidity.,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1280,https://github.com/fragglet,1,https://github.com/chocolate-doom/chocolate-doom/pull/1280,"When timidity_cfg_path is set, or we're using GUS pseudo-emulation, set the
SDL_mixer environment variable to disable Fluidsynth, because Fluidsynth has a
higher priority than Timidity inside SDL_mixer, and if it's configured
properly it will circumvent Timidity entirely along with any configuration
we've set up.
Thanks to DagothKronk for reporting this bug on Doomworld:
https://www.doomworld.com/forum/topic/86366-chocolate-doom/?do=findComment&comment=2105318","When timidity_cfg_path is set, or we're using GUS pseudo-emulation, set the
SDL_mixer environment variable to disable Fluidsynth, because Fluidsynth has a
higher priority than Timidity inside SDL_mixer, and if it's configured
properly it will circumvent Timidity entirely along with any configuration
we've set up.
Thanks to DagothKronk for reporting this bug on Doomworld:
https://www.doomworld.com/forum/topic/86366-chocolate-doom/?do=findComment&comment=2105318",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1281,2020-05-07T14:54:24Z,2020-05-12T07:32:49Z,2020-05-12T07:32:50Z,MERGED,True,10,10,5,https://github.com/turol,Fix clang warnings,8,[],https://github.com/chocolate-doom/chocolate-doom/pull/1281,https://github.com/turol,1,https://github.com/chocolate-doom/chocolate-doom/pull/1281,"Closes #882
Fixes clang warnings about use of abs  on unsigned values. It seems some similar warnings were already fixed in Doom by adding int casts. I did the same. However I'm not certain this is the right thing to do. Some of these were in gameplay code and some demos might have been relying on the old behavior.
WIP because I haven't tested this yet.","Closes #882
Fixes clang warnings about use of abs  on unsigned values. It seems some similar warnings were already fixed in Doom by adding int casts. I did the same. However I'm not certain this is the right thing to do. Some of these were in gameplay code and some demos might have been relying on the old behavior.
WIP because I haven't tested this yet.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1281,2020-05-07T14:54:24Z,2020-05-12T07:32:49Z,2020-05-12T07:32:50Z,MERGED,True,10,10,5,https://github.com/turol,Fix clang warnings,8,[],https://github.com/chocolate-doom/chocolate-doom/pull/1281,https://github.com/mfrancis95,2,https://github.com/chocolate-doom/chocolate-doom/pull/1281#issuecomment-625337836,"Closes #882
Fixes clang warnings about use of abs  on unsigned values. It seems some similar warnings were already fixed in Doom by adding int casts. I did the same. However I'm not certain this is the right thing to do. Some of these were in gameplay code and some demos might have been relying on the old behavior.
WIP because I haven't tested this yet.",Would it be worth it to add a clang compilation to our CI?,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1281,2020-05-07T14:54:24Z,2020-05-12T07:32:49Z,2020-05-12T07:32:50Z,MERGED,True,10,10,5,https://github.com/turol,Fix clang warnings,8,[],https://github.com/chocolate-doom/chocolate-doom/pull/1281,https://github.com/turol,3,https://github.com/chocolate-doom/chocolate-doom/pull/1281#issuecomment-625343955,"Closes #882
Fixes clang warnings about use of abs  on unsigned values. It seems some similar warnings were already fixed in Doom by adding int casts. I did the same. However I'm not certain this is the right thing to do. Some of these were in gameplay code and some demos might have been relying on the old behavior.
WIP because I haven't tested this yet.",It's on my list.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1281,2020-05-07T14:54:24Z,2020-05-12T07:32:49Z,2020-05-12T07:32:50Z,MERGED,True,10,10,5,https://github.com/turol,Fix clang warnings,8,[],https://github.com/chocolate-doom/chocolate-doom/pull/1281,https://github.com/fabiangreffrath,4,https://github.com/chocolate-doom/chocolate-doom/pull/1281#issuecomment-626614181,"Closes #882
Fixes clang warnings about use of abs  on unsigned values. It seems some similar warnings were already fixed in Doom by adding int casts. I did the same. However I'm not certain this is the right thing to do. Some of these were in gameplay code and some demos might have been relying on the old behavior.
WIP because I haven't tested this yet.","Not sure, what behavior does the compiler fall back to? I mean, does it cast arguments to int implicitly or is using abs() on unsigned variables actually a no-op?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1281,2020-05-07T14:54:24Z,2020-05-12T07:32:49Z,2020-05-12T07:32:50Z,MERGED,True,10,10,5,https://github.com/turol,Fix clang warnings,8,[],https://github.com/chocolate-doom/chocolate-doom/pull/1281,https://github.com/turol,5,https://github.com/chocolate-doom/chocolate-doom/pull/1281#issuecomment-626835915,"Closes #882
Fixes clang warnings about use of abs  on unsigned values. It seems some similar warnings were already fixed in Doom by adding int casts. I did the same. However I'm not certain this is the right thing to do. Some of these were in gameplay code and some demos might have been relying on the old behavior.
WIP because I haven't tested this yet.","These appear to generate the exact same code:
https://godbolt.org/z/JyRCc2
So this should be safe.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1282,2020-05-10T12:11:03Z,2020-05-10T12:44:17Z,2020-05-10T12:44:17Z,CLOSED,False,1,1,1,https://github.com/nicolas-robin,opl_linux: fix number of port requested by ioperm(),1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1282,https://github.com/nicolas-robin,1,https://github.com/chocolate-doom/chocolate-doom/pull/1282,,,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1283,2020-05-10T12:52:05Z,2020-07-26T16:53:27Z,2020-07-26T16:53:31Z,MERGED,True,1,1,1,https://github.com/nicolas-robin,opl_linux: fix number of port requested by ioperm(),1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1283,https://github.com/nicolas-robin,1,https://github.com/chocolate-doom/chocolate-doom/pull/1283,"These 3 port are used :
typedef enum
{
    OPL_REGISTER_PORT = 0,
    OPL_DATA_PORT = 1,
    OPL_REGISTER_PORT_OPL3 = 2
} opl_port_t;

but only 2 was requested, causing a crash.","These 3 port are used :
typedef enum
{
    OPL_REGISTER_PORT = 0,
    OPL_DATA_PORT = 1,
    OPL_REGISTER_PORT_OPL3 = 2
} opl_port_t;

but only 2 was requested, causing a crash.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1283,2020-05-10T12:52:05Z,2020-07-26T16:53:27Z,2020-07-26T16:53:31Z,MERGED,True,1,1,1,https://github.com/nicolas-robin,opl_linux: fix number of port requested by ioperm(),1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1283,https://github.com/fragglet,2,https://github.com/chocolate-doom/chocolate-doom/pull/1283#issuecomment-664012823,"These 3 port are used :
typedef enum
{
    OPL_REGISTER_PORT = 0,
    OPL_DATA_PORT = 1,
    OPL_REGISTER_PORT_OPL3 = 2
} opl_port_t;

but only 2 was requested, causing a crash.",Thank you.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1285,2020-05-12T18:15:22Z,2020-05-12T18:59:58Z,2020-05-12T18:59:58Z,MERGED,True,9,4,1,https://github.com/turol,Add clang to Travis CI,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1285,https://github.com/turol,1,https://github.com/chocolate-doom/chocolate-doom/pull/1285,,,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1286,2020-05-26T10:05:14Z,2022-03-22T19:59:05Z,2022-03-22T19:59:08Z,MERGED,True,19,6,1,https://github.com/fabiangreffrath,M_DirName()/M_BaseName(): accept forward slash on Windows,5,[],https://github.com/chocolate-doom/chocolate-doom/pull/1286,https://github.com/fabiangreffrath,1,https://github.com/chocolate-doom/chocolate-doom/pull/1286,"Windows allows for both backward and forward slashes as path
separators. So, if we cannot find the former, try the latter
instead, but don't accept mixed forms.
Actually, the latter is the prefered form when using Unix-like
shells on Windows like e.g. Cygwin or MSYS2.
Fixes: #1271 and fabiangreffrath#618","Windows allows for both backward and forward slashes as path
separators. So, if we cannot find the former, try the latter
instead, but don't accept mixed forms.
Actually, the latter is the prefered form when using Unix-like
shells on Windows like e.g. Cygwin or MSYS2.
Fixes: #1271 and fabiangreffrath#618",True,{'HOORAY': ['https://github.com/jackrjli']}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1286,2020-05-26T10:05:14Z,2022-03-22T19:59:05Z,2022-03-22T19:59:08Z,MERGED,True,19,6,1,https://github.com/fabiangreffrath,M_DirName()/M_BaseName(): accept forward slash on Windows,5,[],https://github.com/chocolate-doom/chocolate-doom/pull/1286,https://github.com/mfrancis95,2,https://github.com/chocolate-doom/chocolate-doom/pull/1286#issuecomment-641471007,"Windows allows for both backward and forward slashes as path
separators. So, if we cannot find the former, try the latter
instead, but don't accept mixed forms.
Actually, the latter is the prefered form when using Unix-like
shells on Windows like e.g. Cygwin or MSYS2.
Fixes: #1271 and fabiangreffrath#618","Glad this wasn't merged yet because I wanted to point out that M_NormalizeSlashes() does exist in the Strife section of the codebase: https://github.com/chocolate-doom/chocolate-doom/blob/master/src/strife/m_saves.c#L365-L396.
@fabiangreffrath",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1286,2020-05-26T10:05:14Z,2022-03-22T19:59:05Z,2022-03-22T19:59:08Z,MERGED,True,19,6,1,https://github.com/fabiangreffrath,M_DirName()/M_BaseName(): accept forward slash on Windows,5,[],https://github.com/chocolate-doom/chocolate-doom/pull/1286,https://github.com/fabiangreffrath,3,https://github.com/chocolate-doom/chocolate-doom/pull/1286#issuecomment-641524482,"Windows allows for both backward and forward slashes as path
separators. So, if we cannot find the former, try the latter
instead, but don't accept mixed forms.
Actually, the latter is the prefered form when using Unix-like
shells on Windows like e.g. Cygwin or MSYS2.
Fixes: #1271 and fabiangreffrath#618","Cool, let's move this to m_misc.c and run it over every path name supplied on the command line. Would you like to craft a PR for that?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1286,2020-05-26T10:05:14Z,2022-03-22T19:59:05Z,2022-03-22T19:59:08Z,MERGED,True,19,6,1,https://github.com/fabiangreffrath,M_DirName()/M_BaseName(): accept forward slash on Windows,5,[],https://github.com/chocolate-doom/chocolate-doom/pull/1286,https://github.com/mfrancis95,4,https://github.com/chocolate-doom/chocolate-doom/pull/1286#issuecomment-642014057,"Windows allows for both backward and forward slashes as path
separators. So, if we cannot find the former, try the latter
instead, but don't accept mixed forms.
Actually, the latter is the prefered form when using Unix-like
shells on Windows like e.g. Cygwin or MSYS2.
Fixes: #1271 and fabiangreffrath#618",I can take it on. I would be happy to do it because it would be in the spirit of #1126.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1286,2020-05-26T10:05:14Z,2022-03-22T19:59:05Z,2022-03-22T19:59:08Z,MERGED,True,19,6,1,https://github.com/fabiangreffrath,M_DirName()/M_BaseName(): accept forward slash on Windows,5,[],https://github.com/chocolate-doom/chocolate-doom/pull/1286,https://github.com/fabiangreffrath,5,https://github.com/chocolate-doom/chocolate-doom/pull/1286#issuecomment-642031235,"Windows allows for both backward and forward slashes as path
separators. So, if we cannot find the former, try the latter
instead, but don't accept mixed forms.
Actually, the latter is the prefered form when using Unix-like
shells on Windows like e.g. Cygwin or MSYS2.
Fixes: #1271 and fabiangreffrath#618","Cool! Please make sure to adapt the function to the style guidelines, though, when moving it over to the common code.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1286,2020-05-26T10:05:14Z,2022-03-22T19:59:05Z,2022-03-22T19:59:08Z,MERGED,True,19,6,1,https://github.com/fabiangreffrath,M_DirName()/M_BaseName(): accept forward slash on Windows,5,[],https://github.com/chocolate-doom/chocolate-doom/pull/1286,https://github.com/fabiangreffrath,6,https://github.com/chocolate-doom/chocolate-doom/pull/1286#issuecomment-1073607392,"Windows allows for both backward and forward slashes as path
separators. So, if we cannot find the former, try the latter
instead, but don't accept mixed forms.
Actually, the latter is the prefered form when using Unix-like
shells on Windows like e.g. Cygwin or MSYS2.
Fixes: #1271 and fabiangreffrath#618","Some 1.5 years later and M_NormalizeSlashes() is still not used anywhere outside of the src/strife directory. However, this isn't necessarily a bad sign, since not every string containing paths is necessarily under our own control, e.g. argv[]. Anyway, Windows allows for using both backward and forward slashes as path separators - even mixed forms - and we currently simply ignore this fact. I have thus updated the implementation in this branch with the one from Woof!.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1286,2020-05-26T10:05:14Z,2022-03-22T19:59:05Z,2022-03-22T19:59:08Z,MERGED,True,19,6,1,https://github.com/fabiangreffrath,M_DirName()/M_BaseName(): accept forward slash on Windows,5,[],https://github.com/chocolate-doom/chocolate-doom/pull/1286,https://github.com/turol,7,https://github.com/chocolate-doom/chocolate-doom/pull/1286#issuecomment-1075580886,"Windows allows for both backward and forward slashes as path
separators. So, if we cannot find the former, try the latter
instead, but don't accept mixed forms.
Actually, the latter is the prefered form when using Unix-like
shells on Windows like e.g. Cygwin or MSYS2.
Fixes: #1271 and fabiangreffrath#618",An explicit CDOOM_MIN would be easier to read than a tristate but this is okay too.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1288,2020-06-02T15:30:44Z,2020-06-03T07:32:29Z,2020-06-03T08:46:24Z,MERGED,True,6,4,2,https://github.com/turol,Fix GCC 10 warning,6,[],https://github.com/chocolate-doom/chocolate-doom/pull/1288,https://github.com/turol,1,https://github.com/chocolate-doom/chocolate-doom/pull/1288,"When everything else fails, refactor mercilessly.
Closes  #1249","When everything else fails, refactor mercilessly.
Closes  #1249",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1288,2020-06-02T15:30:44Z,2020-06-03T07:32:29Z,2020-06-03T08:46:24Z,MERGED,True,6,4,2,https://github.com/turol,Fix GCC 10 warning,6,[],https://github.com/chocolate-doom/chocolate-doom/pull/1288,https://github.com/fabiangreffrath,2,https://github.com/chocolate-doom/chocolate-doom/pull/1288#issuecomment-638021237,"When everything else fails, refactor mercilessly.
Closes  #1249","Thanks, though I'd prefer if you could stash-and-merge commits that form a logical unit.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1288,2020-06-02T15:30:44Z,2020-06-03T07:32:29Z,2020-06-03T08:46:24Z,MERGED,True,6,4,2,https://github.com/turol,Fix GCC 10 warning,6,[],https://github.com/chocolate-doom/chocolate-doom/pull/1288,https://github.com/fabiangreffrath,3,https://github.com/chocolate-doom/chocolate-doom/pull/1288#issuecomment-638021721,"When everything else fails, refactor mercilessly.
Closes  #1249",Squash-and-merge in Github nomenclature.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1288,2020-06-02T15:30:44Z,2020-06-03T07:32:29Z,2020-06-03T08:46:24Z,MERGED,True,6,4,2,https://github.com/turol,Fix GCC 10 warning,6,[],https://github.com/chocolate-doom/chocolate-doom/pull/1288,https://github.com/turol,4,https://github.com/chocolate-doom/chocolate-doom/pull/1288#issuecomment-638054680,"When everything else fails, refactor mercilessly.
Closes  #1249",I prefer making commits that are small enough to be trivially correct and leaving them as-is when merging. It makes it easier to bisect and/or revert them if they turn out to be bad.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1289,2020-06-03T04:30:02Z,,2020-07-26T16:49:54Z,OPEN,False,16,0,4,https://github.com/MistUnky,Blockmap Size Error Checking (Fixes bug #1287),10,[],https://github.com/chocolate-doom/chocolate-doom/pull/1289,https://github.com/MistUnky,1,https://github.com/chocolate-doom/chocolate-doom/pull/1289,This checks for a large blockmap size and produces an error instead of allowing the map to mess up memory and cause a segfault.,This checks for a large blockmap size and produces an error instead of allowing the map to mess up memory and cause a segfault.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1289,2020-06-03T04:30:02Z,,2020-07-26T16:49:54Z,OPEN,False,16,0,4,https://github.com/MistUnky,Blockmap Size Error Checking (Fixes bug #1287),10,[],https://github.com/chocolate-doom/chocolate-doom/pull/1289,https://github.com/MistUnky,2,https://github.com/chocolate-doom/chocolate-doom/pull/1289#issuecomment-637963799,This checks for a large blockmap size and produces an error instead of allowing the map to mess up memory and cause a segfault.,"Apparently this breaks demo compatibility.

How so? Demos seem to work fine when I'm running them.
EDIT: Oh, some demos seem to take advantage of the size limit to overwrite themselves in certain custom maps. I don't think the above code breaks the demos, but it should probably be checked first.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1289,2020-06-03T04:30:02Z,,2020-07-26T16:49:54Z,OPEN,False,16,0,4,https://github.com/MistUnky,Blockmap Size Error Checking (Fixes bug #1287),10,[],https://github.com/chocolate-doom/chocolate-doom/pull/1289,https://github.com/fabiangreffrath,3,https://github.com/chocolate-doom/chocolate-doom/pull/1289#issuecomment-637969108,This checks for a large blockmap size and produces an error instead of allowing the map to mess up memory and cause a segfault.,"Well, refusing to load a map that played back before qualifies as breakage, I guess. 😉",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1289,2020-06-03T04:30:02Z,,2020-07-26T16:49:54Z,OPEN,False,16,0,4,https://github.com/MistUnky,Blockmap Size Error Checking (Fixes bug #1287),10,[],https://github.com/chocolate-doom/chocolate-doom/pull/1289,https://github.com/MistUnky,4,https://github.com/chocolate-doom/chocolate-doom/pull/1289#issuecomment-637974563,This checks for a large blockmap size and produces an error instead of allowing the map to mess up memory and cause a segfault.,"Is there another way to check if the blockmap will crash? It seems it should be possible to make a way so that any list starting points past the 65536th byte won't load, but everything else will, so that it doesn't break compatibility. I'm not so sure about the internals of that, so I don't know how it would be implemented in the source code.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1290,2020-06-06T14:28:28Z,2020-06-24T00:04:54Z,2020-06-24T00:04:54Z,MERGED,True,6,6,4,https://github.com/turol,C++ fixes,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/1290,https://github.com/turol,1,https://github.com/chocolate-doom/chocolate-doom/pull/1290,"A few fixes.
This really needs to be rebased before (eventually) merging to master, there are completely broken commits in its history. That will screw things up for anyone trying to bisect past it.","A few fixes.
This really needs to be rebased before (eventually) merging to master, there are completely broken commits in its history. That will screw things up for anyone trying to bisect past it.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1294,2020-06-23T17:35:03Z,2020-06-24T00:04:03Z,2020-06-24T00:04:03Z,MERGED,True,54,7,7,https://github.com/vilhelmgray,"Introduce configure options for bash-completion, doc, fonts, and icons",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1294,https://github.com/vilhelmgray,1,https://github.com/chocolate-doom/chocolate-doom/pull/1294,"This patch introduces the --enable-bash-completion, --enable-doc,
--enable-fonts, and --enable-icons configuration options to control the
build of bash-completion, documentation, fonts, and icons respectively.
This is useful for users of systems such as Gentoo which allow custom
configuration of packages, or for package maintainers in general who
would like finer control over the components built when compiling
Chocolate Doom.","This patch introduces the --enable-bash-completion, --enable-doc,
--enable-fonts, and --enable-icons configuration options to control the
build of bash-completion, documentation, fonts, and icons respectively.
This is useful for users of systems such as Gentoo which allow custom
configuration of packages, or for package maintainers in general who
would like finer control over the components built when compiling
Chocolate Doom.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1295,2020-06-24T10:51:31Z,2020-06-25T02:52:20Z,2020-06-26T06:20:46Z,MERGED,True,6,1,2,https://github.com/fabiangreffrath,CVE-2020-14983,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1295,https://github.com/fabiangreffrath,1,https://github.com/chocolate-doom/chocolate-doom/pull/1295,,,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1295,2020-06-24T10:51:31Z,2020-06-25T02:52:20Z,2020-06-26T06:20:46Z,MERGED,True,6,1,2,https://github.com/fabiangreffrath,CVE-2020-14983,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1295,https://github.com/fragglet,2,https://github.com/chocolate-doom/chocolate-doom/pull/1295#issuecomment-649182881,,Thanks for taking care of this. I'm going to do a 3.0.1 patch release with the fix.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1295,2020-06-24T10:51:31Z,2020-06-25T02:52:20Z,2020-06-26T06:20:46Z,MERGED,True,6,1,2,https://github.com/fabiangreffrath,CVE-2020-14983,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1295,https://github.com/chungy,3,https://github.com/chocolate-doom/chocolate-doom/pull/1295#issuecomment-649202551,,"Would 3.1.0 make sense at this time, instead?",True,{'HEART': ['https://github.com/AXDOOMER']}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1295,2020-06-24T10:51:31Z,2020-06-25T02:52:20Z,2020-06-26T06:20:46Z,MERGED,True,6,1,2,https://github.com/fabiangreffrath,CVE-2020-14983,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1295,https://github.com/AXDOOMER,4,https://github.com/chocolate-doom/chocolate-doom/pull/1295#issuecomment-649208200,,"In my opinion, it makes sense because the previous release was more than two years ago and the development speed didn't slow down. There were also changes to the multiplayer code which results in difficulty in setuping a game between the latest release and the bleeding edge version.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1295,2020-06-24T10:51:31Z,2020-06-25T02:52:20Z,2020-06-26T06:20:46Z,MERGED,True,6,1,2,https://github.com/fabiangreffrath,CVE-2020-14983,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1295,https://github.com/fragglet,5,https://github.com/chocolate-doom/chocolate-doom/pull/1295#issuecomment-649613344,,I want to do a 3.1.0 release anyway in the near future - it's been long enough.,True,"{'THUMBS_UP': ['https://github.com/chungy', 'https://github.com/AXDOOMER']}"
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1296,2020-06-24T19:12:41Z,,2020-07-28T16:48:44Z,OPEN,False,4,0,1,https://github.com/devnexen,Haiku build fix proposal.,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1296,https://github.com/devnexen,1,https://github.com/chocolate-doom/chocolate-doom/pull/1296,No SDL2main library.,No SDL2main library.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1296,2020-06-24T19:12:41Z,,2020-07-28T16:48:44Z,OPEN,False,4,0,1,https://github.com/devnexen,Haiku build fix proposal.,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1296,https://github.com/fabiangreffrath,2,https://github.com/chocolate-doom/chocolate-doom/pull/1296#issuecomment-649024041,No SDL2main library.,"This isn't limited to Haiku, please find a more general solution. Hint: fabiangreffrath/woof@68e6203",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1296,2020-06-24T19:12:41Z,,2020-07-28T16:48:44Z,OPEN,False,4,0,1,https://github.com/devnexen,Haiku build fix proposal.,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1296,https://github.com/fragglet,3,https://github.com/chocolate-doom/chocolate-doom/pull/1296#issuecomment-664011802,No SDL2main library.,@AlexMax ptal,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1297,2020-06-25T15:34:41Z,2020-06-25T16:59:46Z,2020-06-25T16:59:46Z,MERGED,True,5,1,3,https://github.com/vilhelmgray,Add support for /usr/share/doom IWAD search path,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1297,https://github.com/vilhelmgray,1,https://github.com/chocolate-doom/chocolate-doom/pull/1297,"Some Linux distros such as Gentoo have deprecated the /usr/share/games
directory. IWADs are typically installed under the /usr/share directory
for these distros.","Some Linux distros such as Gentoo have deprecated the /usr/share/games
directory. IWADs are typically installed under the /usr/share directory
for these distros.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1298,2020-06-27T03:26:17Z,2020-09-30T17:41:47Z,2021-04-25T04:58:14Z,MERGED,True,44,35,4,https://github.com/mfrancis95,Run M_NormalizeSlashes on paths,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1298,https://github.com/mfrancis95,1,https://github.com/chocolate-doom/chocolate-doom/pull/1298,"Move M_NormalizeSlashes from strife/m_saves to d_iwad
Change the return type of M_NormalizeSlashes from void to char * and return the modified string
Run M_NormalizeSlashes on paths provided by -iwad
Run M_NormalizeSlashes on paths provided by $DOOMWADDIR
Run M_NormalizeSlashes on paths provided by $DOOMWADPATH
Run M_NormalizeSlashes on paths provided by -merge
Run M_NormalizeSlashes on paths provided by -nwtmerge
Run M_NormalizeSlashes on paths provided by -af
Run M_NormalizeSlashes on paths provided by -as
Run M_NormalizeSlashes on paths provided by -aa
Run M_NormalizeSlashes on paths provided by -file","Move M_NormalizeSlashes from strife/m_saves to d_iwad
Change the return type of M_NormalizeSlashes from void to char * and return the modified string
Run M_NormalizeSlashes on paths provided by -iwad
Run M_NormalizeSlashes on paths provided by $DOOMWADDIR
Run M_NormalizeSlashes on paths provided by $DOOMWADPATH
Run M_NormalizeSlashes on paths provided by -merge
Run M_NormalizeSlashes on paths provided by -nwtmerge
Run M_NormalizeSlashes on paths provided by -af
Run M_NormalizeSlashes on paths provided by -as
Run M_NormalizeSlashes on paths provided by -aa
Run M_NormalizeSlashes on paths provided by -file",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1298,2020-06-27T03:26:17Z,2020-09-30T17:41:47Z,2021-04-25T04:58:14Z,MERGED,True,44,35,4,https://github.com/mfrancis95,Run M_NormalizeSlashes on paths,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1298,https://github.com/mfrancis95,2,https://github.com/chocolate-doom/chocolate-doom/pull/1298#issuecomment-650481137,"Move M_NormalizeSlashes from strife/m_saves to d_iwad
Change the return type of M_NormalizeSlashes from void to char * and return the modified string
Run M_NormalizeSlashes on paths provided by -iwad
Run M_NormalizeSlashes on paths provided by $DOOMWADDIR
Run M_NormalizeSlashes on paths provided by $DOOMWADPATH
Run M_NormalizeSlashes on paths provided by -merge
Run M_NormalizeSlashes on paths provided by -nwtmerge
Run M_NormalizeSlashes on paths provided by -af
Run M_NormalizeSlashes on paths provided by -as
Run M_NormalizeSlashes on paths provided by -aa
Run M_NormalizeSlashes on paths provided by -file",Alternative to #1286. Let me know if I missed anything.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1298,2020-06-27T03:26:17Z,2020-09-30T17:41:47Z,2021-04-25T04:58:14Z,MERGED,True,44,35,4,https://github.com/mfrancis95,Run M_NormalizeSlashes on paths,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1298,https://github.com/turol,3,https://github.com/chocolate-doom/chocolate-doom/pull/1298#issuecomment-650566284,"Move M_NormalizeSlashes from strife/m_saves to d_iwad
Change the return type of M_NormalizeSlashes from void to char * and return the modified string
Run M_NormalizeSlashes on paths provided by -iwad
Run M_NormalizeSlashes on paths provided by $DOOMWADDIR
Run M_NormalizeSlashes on paths provided by $DOOMWADPATH
Run M_NormalizeSlashes on paths provided by -merge
Run M_NormalizeSlashes on paths provided by -nwtmerge
Run M_NormalizeSlashes on paths provided by -af
Run M_NormalizeSlashes on paths provided by -as
Run M_NormalizeSlashes on paths provided by -aa
Run M_NormalizeSlashes on paths provided by -file","Moving code and changing functionality should be in separate commits.
myargv comes directly from system and contains pointers to strings we don't own and aren't allowed to change. See #1279",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1298,2020-06-27T03:26:17Z,2020-09-30T17:41:47Z,2021-04-25T04:58:14Z,MERGED,True,44,35,4,https://github.com/mfrancis95,Run M_NormalizeSlashes on paths,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1298,https://github.com/mfrancis95,4,https://github.com/chocolate-doom/chocolate-doom/pull/1298#issuecomment-650576215,"Move M_NormalizeSlashes from strife/m_saves to d_iwad
Change the return type of M_NormalizeSlashes from void to char * and return the modified string
Run M_NormalizeSlashes on paths provided by -iwad
Run M_NormalizeSlashes on paths provided by $DOOMWADDIR
Run M_NormalizeSlashes on paths provided by $DOOMWADPATH
Run M_NormalizeSlashes on paths provided by -merge
Run M_NormalizeSlashes on paths provided by -nwtmerge
Run M_NormalizeSlashes on paths provided by -af
Run M_NormalizeSlashes on paths provided by -as
Run M_NormalizeSlashes on paths provided by -aa
Run M_NormalizeSlashes on paths provided by -file","@turol for 2, are you planning on making myargv owned by us in that issue? If so, then I can wait and merge that in when it's ready.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1300,2020-07-03T03:37:31Z,2020-07-10T01:07:47Z,2021-04-25T04:58:15Z,MERGED,True,6,6,3,https://github.com/mfrancis95,"When running sscanf on numbers in hex or octal, make sure the argumen…",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1300,https://github.com/mfrancis95,1,https://github.com/chocolate-doom/chocolate-doom/pull/1300,"…t type is unsigned int *
This fixes warnings that were showing up in cppcheck.
I figured in src/i_video, it would be safe to change the type of winid from int to unsigned int since that was just being used for a printout. For the other cases, I wanted to preserve the return and argument types.","…t type is unsigned int *
This fixes warnings that were showing up in cppcheck.
I figured in src/i_video, it would be safe to change the type of winid from int to unsigned int since that was just being used for a printout. For the other cases, I wanted to preserve the return and argument types.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1300,2020-07-03T03:37:31Z,2020-07-10T01:07:47Z,2021-04-25T04:58:15Z,MERGED,True,6,6,3,https://github.com/mfrancis95,"When running sscanf on numbers in hex or octal, make sure the argumen…",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1300,https://github.com/fabiangreffrath,2,https://github.com/chocolate-doom/chocolate-doom/pull/1300#issuecomment-653342211,"…t type is unsigned int *
This fixes warnings that were showing up in cppcheck.
I figured in src/i_video, it would be safe to change the type of winid from int to unsigned int since that was just being used for a printout. For the other cases, I wanted to preserve the return and argument types.",I don't understand. Why can't 0xffffffff be -1 anymore,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1300,2020-07-03T03:37:31Z,2020-07-10T01:07:47Z,2021-04-25T04:58:15Z,MERGED,True,6,6,3,https://github.com/mfrancis95,"When running sscanf on numbers in hex or octal, make sure the argumen…",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1300,https://github.com/mfrancis95,3,https://github.com/chocolate-doom/chocolate-doom/pull/1300#issuecomment-653523939,"…t type is unsigned int *
This fixes warnings that were showing up in cppcheck.
I figured in src/i_video, it would be safe to change the type of winid from int to unsigned int since that was just being used for a printout. For the other cases, I wanted to preserve the return and argument types.",@fabiangreffrath I'm not following. Can you elucidate please?,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1300,2020-07-03T03:37:31Z,2020-07-10T01:07:47Z,2021-04-25T04:58:15Z,MERGED,True,6,6,3,https://github.com/mfrancis95,"When running sscanf on numbers in hex or octal, make sure the argumen…",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1300,https://github.com/fabiangreffrath,4,https://github.com/chocolate-doom/chocolate-doom/pull/1300#issuecomment-653528081,"…t type is unsigned int *
This fixes warnings that were showing up in cppcheck.
I figured in src/i_video, it would be safe to change the type of winid from int to unsigned int since that was just being used for a printout. For the other cases, I wanted to preserve the return and argument types.","Your suggested change means that whenever a number is read from a string, and that number is formatted in a hexadecimal way with a 0x prefix, that number should be unsigned. However, 0xFFFFFFFF is such a hexadecimal representation for a number and its meaning is -1 for signed int types or 4294967295 for unsigned int types, respectively. I don't understand why one should be a valid representation, but not the other one?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1300,2020-07-03T03:37:31Z,2020-07-10T01:07:47Z,2021-04-25T04:58:15Z,MERGED,True,6,6,3,https://github.com/mfrancis95,"When running sscanf on numbers in hex or octal, make sure the argumen…",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1300,https://github.com/fabiangreffrath,5,https://github.com/chocolate-doom/chocolate-doom/pull/1300#issuecomment-653529633,"…t type is unsigned int *
This fixes warnings that were showing up in cppcheck.
I figured in src/i_video, it would be safe to change the type of winid from int to unsigned int since that was just being used for a printout. For the other cases, I wanted to preserve the return and argument types.","Alright, got it:
""In the absence of a size modifier, the application shall ensure that the corresponding argument is a pointer to unsigned.""
https://pubs.opengroup.org/onlinepubs/9699919799/functions/fscanf.html",True,{'THUMBS_UP': ['https://github.com/mfrancis95']}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1303,2020-07-05T16:24:40Z,2020-07-26T16:42:45Z,2021-04-25T04:58:21Z,MERGED,True,20,5,3,https://github.com/mfrancis95,Add separate savegame directories for Freedoom (resolve #896),1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1303,https://github.com/mfrancis95,1,https://github.com/chocolate-doom/chocolate-doom/pull/1303,"Tackling an old issue here.
I'm not particularly fond of this approach because it's written as too much of an edge case for Freedoom.","Tackling an old issue here.
I'm not particularly fond of this approach because it's written as too much of an edge case for Freedoom.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1303,2020-07-05T16:24:40Z,2020-07-26T16:42:45Z,2021-04-25T04:58:21Z,MERGED,True,20,5,3,https://github.com/mfrancis95,Add separate savegame directories for Freedoom (resolve #896),1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1303,https://github.com/mfrancis95,2,https://github.com/chocolate-doom/chocolate-doom/pull/1303#issuecomment-653951939,"Tackling an old issue here.
I'm not particularly fond of this approach because it's written as too much of an edge case for Freedoom.",@fabiangreffrath I force-pushed with the correction.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1303,2020-07-05T16:24:40Z,2020-07-26T16:42:45Z,2021-04-25T04:58:21Z,MERGED,True,20,5,3,https://github.com/mfrancis95,Add separate savegame directories for Freedoom (resolve #896),1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1303,https://github.com/fragglet,3,https://github.com/chocolate-doom/chocolate-doom/pull/1303#issuecomment-664011602,"Tackling an old issue here.
I'm not particularly fond of this approach because it's written as too much of an edge case for Freedoom.","Hi folks - if you approve, please also merge. Thanks!",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1304,2020-07-06T16:16:40Z,,2020-07-26T20:40:36Z,OPEN,False,3,0,1,https://github.com/datajake1999,"If Nuked OPL3 is running at 49716 Hz, the emulator output isn't passe…",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1304,https://github.com/datajake1999,1,https://github.com/chocolate-doom/chocolate-doom/pull/1304,…d through the linear resampler when using OPL3_GenerateStream.,…d through the linear resampler when using OPL3_GenerateStream.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1304,2020-07-06T16:16:40Z,,2020-07-26T20:40:36Z,OPEN,False,3,0,1,https://github.com/datajake1999,"If Nuked OPL3 is running at 49716 Hz, the emulator output isn't passe…",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1304,https://github.com/fragglet,2,https://github.com/chocolate-doom/chocolate-doom/pull/1304#issuecomment-664011477,…d through the linear resampler when using OPL3_GenerateStream.,"Please give some context about the purpose of this change. It looks like maybe this is supposed to make the code more efficient if the output frequency is 49716hz? If so, that seems redundant because most audio hardware will not run at that sample rate anyway.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1304,2020-07-06T16:16:40Z,,2020-07-26T20:40:36Z,OPEN,False,3,0,1,https://github.com/datajake1999,"If Nuked OPL3 is running at 49716 Hz, the emulator output isn't passe…",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1304,https://github.com/datajake1999,3,https://github.com/chocolate-doom/chocolate-doom/pull/1304#issuecomment-664037502,…d through the linear resampler when using OPL3_GenerateStream.,"Yes, that is correct. Some projects initialize OPL3 emulation at 49716 Hz, so this fix is for these kinds of situations where internal resampling isn't needed.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1308,2020-08-24T13:06:23Z,2020-08-25T05:20:29Z,2020-08-25T05:20:58Z,MERGED,True,4,4,1,https://github.com/vilhelmgray,"Fix Python check for doc, bash-completion, fonts, and icons options",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1308,https://github.com/vilhelmgray,1,https://github.com/chocolate-doom/chocolate-doom/pull/1308,"Fixes: cfc56fa (""Introduce configure options for bash-completion, doc, fonts, and icons"")","Fixes: cfc56fa (""Introduce configure options for bash-completion, doc, fonts, and icons"")",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1308,2020-08-24T13:06:23Z,2020-08-25T05:20:29Z,2020-08-25T05:20:58Z,MERGED,True,4,4,1,https://github.com/vilhelmgray,"Fix Python check for doc, bash-completion, fonts, and icons options",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1308,https://github.com/fabiangreffrath,2,https://github.com/chocolate-doom/chocolate-doom/pull/1308#issuecomment-679358935,"Fixes: cfc56fa (""Introduce configure options for bash-completion, doc, fonts, and icons"")","Sigh, this is somehow stuck in Travis CI.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1308,2020-08-24T13:06:23Z,2020-08-25T05:20:29Z,2020-08-25T05:20:58Z,MERGED,True,4,4,1,https://github.com/vilhelmgray,"Fix Python check for doc, bash-completion, fonts, and icons options",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1308,https://github.com/vilhelmgray,3,https://github.com/chocolate-doom/chocolate-doom/pull/1308#issuecomment-679422834,"Fixes: cfc56fa (""Introduce configure options for bash-completion, doc, fonts, and icons"")","That's strange, it looks like the checks passed but it wasn't reported to Github for some reason: https://travis-ci.org/github/chocolate-doom/chocolate-doom/builds/720636596
Is there a way to restart the checks?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1308,2020-08-24T13:06:23Z,2020-08-25T05:20:29Z,2020-08-25T05:20:58Z,MERGED,True,4,4,1,https://github.com/vilhelmgray,"Fix Python check for doc, bash-completion, fonts, and icons options",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1308,https://github.com/fabiangreffrath,4,https://github.com/chocolate-doom/chocolate-doom/pull/1308#issuecomment-679692371,"Fixes: cfc56fa (""Introduce configure options for bash-completion, doc, fonts, and icons"")","Is there a way to restart the checks?

Yes, there is, but you need to be logged in. Just did so, thanks again!",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1309,2020-08-25T10:14:36Z,2020-08-25T11:59:05Z,2021-08-18T08:58:48Z,MERGED,True,11,30,10,https://github.com/fabiangreffrath,replace uses of Mix_OpenAudio() with Mix_OpenAudioDevice(),4,[],https://github.com/chocolate-doom/chocolate-doom/pull/1309,https://github.com/fabiangreffrath,1,https://github.com/chocolate-doom/chocolate-doom/pull/1309,"Presently in SDL2_Mixer, Mix_OpenAudio() will by default always open
the ""best matching"" channel count it can of the sound driver. Certain
headphones only report a 7.1 output to the device driver which means
it will always open 8 channels, even if you only specify 2. This may
end up causing the audio buffer to come out malformed with sounds
playing too fast and producing corruption, failing to produce
directional audio and crashing in rather obscure ways.
It is concluded by SDL2 upstream that Mix_OpenAudio() should be
considered deprecated, and that Mix_OpenAudioDevice() should be called
instead directly with the additional flag removed that adapts the
channel count that Mix_OpenAudio() always uses. Reportedly, this fixes
all the problems.
Thanks to Edward850 for pointing this issue out and proposing the
fix.","Presently in SDL2_Mixer, Mix_OpenAudio() will by default always open
the ""best matching"" channel count it can of the sound driver. Certain
headphones only report a 7.1 output to the device driver which means
it will always open 8 channels, even if you only specify 2. This may
end up causing the audio buffer to come out malformed with sounds
playing too fast and producing corruption, failing to produce
directional audio and crashing in rather obscure ways.
It is concluded by SDL2 upstream that Mix_OpenAudio() should be
considered deprecated, and that Mix_OpenAudioDevice() should be called
instead directly with the additional flag removed that adapts the
channel count that Mix_OpenAudio() always uses. Reportedly, this fixes
all the problems.
Thanks to Edward850 for pointing this issue out and proposing the
fix.",True,{'THUMBS_UP': ['https://github.com/haleyjd']}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1312,2020-09-15T18:27:44Z,2020-09-15T20:04:01Z,2020-09-15T20:04:01Z,CLOSED,False,28584,7975,247,https://github.com/El-Juancho,Add widescreen in heretic,2295,[],https://github.com/chocolate-doom/chocolate-doom/pull/1312,https://github.com/El-Juancho,1,https://github.com/chocolate-doom/chocolate-doom/pull/1312,Please!,Please!,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1312,2020-09-15T18:27:44Z,2020-09-15T20:04:01Z,2020-09-15T20:04:01Z,CLOSED,False,28584,7975,247,https://github.com/El-Juancho,Add widescreen in heretic,2295,[],https://github.com/chocolate-doom/chocolate-doom/pull/1312,https://github.com/fabiangreffrath,2,https://github.com/chocolate-doom/chocolate-doom/pull/1312#issuecomment-692949042,Please!,I guess you've clicked the wrong button.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1315,2020-09-23T06:25:02Z,2020-09-30T17:37:36Z,2021-08-18T08:58:49Z,MERGED,True,1,1,1,https://github.com/fabiangreffrath,textscreen: deliberately create a software renderer,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1315,https://github.com/fabiangreffrath,1,https://github.com/chocolate-doom/chocolate-doom/pull/1315,"On systems which lack sufficient hardware acceleration capabilities we
would have no chance to open the setup window otherwise.
Fixes fabiangreffrath#670.","On systems which lack sufficient hardware acceleration capabilities we
would have no chance to open the setup window otherwise.
Fixes fabiangreffrath#670.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1317,2020-09-27T23:00:58Z,2020-09-30T17:39:10Z,2020-10-25T14:17:28Z,CLOSED,False,157,8,7,https://github.com/SmileTheory, Support for Unity IWADs with widescreen assets.,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1317,https://github.com/SmileTheory,1,https://github.com/chocolate-doom/chocolate-doom/pull/1317,Seemed like some low-hanging fruit.,Seemed like some low-hanging fruit.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1317,2020-09-27T23:00:58Z,2020-09-30T17:39:10Z,2020-10-25T14:17:28Z,CLOSED,False,157,8,7,https://github.com/SmileTheory, Support for Unity IWADs with widescreen assets.,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1317,https://github.com/fragglet,2,https://github.com/chocolate-doom/chocolate-doom/pull/1317#issuecomment-701539182,Seemed like some low-hanging fruit.,"This PR is too intrusive IMO. I've done some inquiries and confirmed that the Unity ports are distributed with the original unaltered IWAD files, so this should be unnecessary.
Thanks regardless for taking the time to put this together.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1317,2020-09-27T23:00:58Z,2020-09-30T17:39:10Z,2020-10-25T14:17:28Z,CLOSED,False,157,8,7,https://github.com/SmileTheory, Support for Unity IWADs with widescreen assets.,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1317,https://github.com/drfrag666,3,https://github.com/chocolate-doom/chocolate-doom/pull/1317#issuecomment-706585942,Seemed like some low-hanging fruit.,"I'm interested and i'll try to merge this into RUDE, there the wide mode framebuffer is 400 pixels wide.
https://github.com/drfrag666/RUDE",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1317,2020-09-27T23:00:58Z,2020-09-30T17:39:10Z,2020-10-25T14:17:28Z,CLOSED,False,157,8,7,https://github.com/SmileTheory, Support for Unity IWADs with widescreen assets.,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1317,https://github.com/drfrag666,4,https://github.com/chocolate-doom/chocolate-doom/pull/1317#issuecomment-706691650,Seemed like some low-hanging fruit.,"This can't be merged, i'll adjust Crispy's PR when i have time and my personal situation hopefully gets better.
I don't even own the iwad.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1317,2020-09-27T23:00:58Z,2020-09-30T17:39:10Z,2020-10-25T14:17:28Z,CLOSED,False,157,8,7,https://github.com/SmileTheory, Support for Unity IWADs with widescreen assets.,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1317,https://github.com/chungy,5,https://github.com/chocolate-doom/chocolate-doom/pull/1317#issuecomment-706749023,Seemed like some low-hanging fruit.,"I don't even own the iwad.

Not all that big of a problem",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1317,2020-09-27T23:00:58Z,2020-09-30T17:39:10Z,2020-10-25T14:17:28Z,CLOSED,False,157,8,7,https://github.com/SmileTheory, Support for Unity IWADs with widescreen assets.,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1317,https://github.com/drfrag666,6,https://github.com/chocolate-doom/chocolate-doom/pull/1317#issuecomment-707028361,Seemed like some low-hanging fruit.,"Thanks, that solves the iwad problem.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1317,2020-09-27T23:00:58Z,2020-09-30T17:39:10Z,2020-10-25T14:17:28Z,CLOSED,False,157,8,7,https://github.com/SmileTheory, Support for Unity IWADs with widescreen assets.,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1317,https://github.com/drfrag666,7,https://github.com/chocolate-doom/chocolate-doom/pull/1317#issuecomment-716033799,Seemed like some low-hanging fruit.,"Done but for now without the full statusbar and bunny scroller (Crispy PR). I'm not sure it's worth, that's more sophisticated.
drfrag666@013541d",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1317,2020-09-27T23:00:58Z,2020-09-30T17:39:10Z,2020-10-25T14:17:28Z,CLOSED,False,157,8,7,https://github.com/SmileTheory, Support for Unity IWADs with widescreen assets.,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1317,https://github.com/drfrag666,8,https://github.com/chocolate-doom/chocolate-doom/pull/1317#issuecomment-716155569,Seemed like some low-hanging fruit.,"All done:
drfrag666@545fa2f
drfrag666@6851482",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1321,2020-10-05T19:42:49Z,2020-10-07T06:46:38Z,2020-10-23T12:11:58Z,MERGED,True,1,1,1,https://github.com/AXDOOMER,textscreen: Fix SetBufferFromValue to copy the right amount of data,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1321,https://github.com/AXDOOMER,1,https://github.com/chocolate-doom/chocolate-doom/pull/1321,"Fix the amount of data that must be copied from the value pointer to the inputbox buffer. This fixes a bug with ASCII where the last character would be deleted if the inputbox is completely filled up. This also fixes a bug where UTF8 input would be truncated. Truncating UTF8 data could lead to a buffer overflow.
This fixes #1320
Note that invalid UTF8 characters can possibly still be read from the config file. I haven't tested to see if I could trigger a buffer overflow this way, but I have found other bugs which I will document or fix once I understand them better. Although, with this fix, it's not possible to trigger bugs from Chocolate-Setup's UI and bugs stated in the first paragraph are fixed.","Fix the amount of data that must be copied from the value pointer to the inputbox buffer. This fixes a bug with ASCII where the last character would be deleted if the inputbox is completely filled up. This also fixes a bug where UTF8 input would be truncated. Truncating UTF8 data could lead to a buffer overflow.
This fixes #1320
Note that invalid UTF8 characters can possibly still be read from the config file. I haven't tested to see if I could trigger a buffer overflow this way, but I have found other bugs which I will document or fix once I understand them better. Although, with this fix, it's not possible to trigger bugs from Chocolate-Setup's UI and bugs stated in the first paragraph are fixed.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1321,2020-10-05T19:42:49Z,2020-10-07T06:46:38Z,2020-10-23T12:11:58Z,MERGED,True,1,1,1,https://github.com/AXDOOMER,textscreen: Fix SetBufferFromValue to copy the right amount of data,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1321,https://github.com/fabiangreffrath,2,https://github.com/chocolate-doom/chocolate-doom/pull/1321#issuecomment-704494924,"Fix the amount of data that must be copied from the value pointer to the inputbox buffer. This fixes a bug with ASCII where the last character would be deleted if the inputbox is completely filled up. This also fixes a bug where UTF8 input would be truncated. Truncating UTF8 data could lead to a buffer overflow.
This fixes #1320
Note that invalid UTF8 characters can possibly still be read from the config file. I haven't tested to see if I could trigger a buffer overflow this way, but I have found other bugs which I will document or fix once I understand them better. Although, with this fix, it's not possible to trigger bugs from Chocolate-Setup's UI and bugs stated in the first paragraph are fixed.","I'd love to approve this, but honestly, I don't have a clue of the code you are changing here. 😉",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1321,2020-10-05T19:42:49Z,2020-10-07T06:46:38Z,2020-10-23T12:11:58Z,MERGED,True,1,1,1,https://github.com/AXDOOMER,textscreen: Fix SetBufferFromValue to copy the right amount of data,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1321,https://github.com/AXDOOMER,3,https://github.com/chocolate-doom/chocolate-doom/pull/1321#issuecomment-704684875,"Fix the amount of data that must be copied from the value pointer to the inputbox buffer. This fixes a bug with ASCII where the last character would be deleted if the inputbox is completely filled up. This also fixes a bug where UTF8 input would be truncated. Truncating UTF8 data could lead to a buffer overflow.
This fixes #1320
Note that invalid UTF8 characters can possibly still be read from the config file. I haven't tested to see if I could trigger a buffer overflow this way, but I have found other bugs which I will document or fix once I understand them better. Although, with this fix, it's not possible to trigger bugs from Chocolate-Setup's UI and bugs stated in the first paragraph are fixed.","Yeah, it's a bit hard to understand. It took me a few hours to find the source of the bug and find the appropriate solution.
An inputbox is initialized like this:

  
    
      chocolate-doom/textscreen/txt_inputbox.c
    
    
        Lines 326 to 332
      in
      7dce8d5
    
  
  
    

        
          
           inputbox->value = value; 
        

        
          
           inputbox->size = size; 
        

        
          
           // 'size' is the maximum number of characters that can be entered, 
        

        
          
           // but for a UTF-8 string, each character can take up to four 
        

        
          
           // characters. 
        

        
          
           inputbox->buffer_len = size * 4 + 1; 
        

        
          
           inputbox->buffer = malloc(inputbox->buffer_len); 
        
    
  


If you look at my patch, you can see that TXT_StringCopy() was wrongly given size (number of characters that can be shown on the screen) rather than the length of the buffer. The buffer is four times bigger than size because UTF8 characters take up more space. There's a +1 added to that to accommodate a null terminator in buffer_len. buffer_len should have been used instead of size.
This first bug:

To explain why I add +1 to the length of the string after strnlen(), it's because the destination buffer will always be the maximum size of a source string plus one more byte for a null terminator. strnlen() doesn't account for the null terminator. TXT_StringCopy() stops copying the string at dest_len - 1 and makes sure the buffer ends with a null terminator. Without the +1, it would strip the last character from my string to replace it with a null terminator.
This second bug:",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1321,2020-10-05T19:42:49Z,2020-10-07T06:46:38Z,2020-10-23T12:11:58Z,MERGED,True,1,1,1,https://github.com/AXDOOMER,textscreen: Fix SetBufferFromValue to copy the right amount of data,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1321,https://github.com/fabiangreffrath,4,https://github.com/chocolate-doom/chocolate-doom/pull/1321#issuecomment-704731912,"Fix the amount of data that must be copied from the value pointer to the inputbox buffer. This fixes a bug with ASCII where the last character would be deleted if the inputbox is completely filled up. This also fixes a bug where UTF8 input would be truncated. Truncating UTF8 data could lead to a buffer overflow.
This fixes #1320
Note that invalid UTF8 characters can possibly still be read from the config file. I haven't tested to see if I could trigger a buffer overflow this way, but I have found other bugs which I will document or fix once I understand them better. Although, with this fix, it's not possible to trigger bugs from Chocolate-Setup's UI and bugs stated in the first paragraph are fixed.",Thank you for elaborating!,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1321,2020-10-05T19:42:49Z,2020-10-07T06:46:38Z,2020-10-23T12:11:58Z,MERGED,True,1,1,1,https://github.com/AXDOOMER,textscreen: Fix SetBufferFromValue to copy the right amount of data,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1321,https://github.com/drfrag666,5,https://github.com/chocolate-doom/chocolate-doom/pull/1321#issuecomment-715279002,"Fix the amount of data that must be copied from the value pointer to the inputbox buffer. This fixes a bug with ASCII where the last character would be deleted if the inputbox is completely filled up. This also fixes a bug where UTF8 input would be truncated. Truncating UTF8 data could lead to a buffer overflow.
This fixes #1320
Note that invalid UTF8 characters can possibly still be read from the config file. I haven't tested to see if I could trigger a buffer overflow this way, but I have found other bugs which I will document or fix once I understand them better. Although, with this fix, it's not possible to trigger bugs from Chocolate-Setup's UI and bugs stated in the first paragraph are fixed.","But strnlen is not a standard C function or at least it was POSIX only until very recently (last year?) so this break compilation with ""old"" compilers on windows such as MinGW. I've fixed it using a custom mystrnlen function.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1321,2020-10-05T19:42:49Z,2020-10-07T06:46:38Z,2020-10-23T12:11:58Z,MERGED,True,1,1,1,https://github.com/AXDOOMER,textscreen: Fix SetBufferFromValue to copy the right amount of data,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1321,https://github.com/fabiangreffrath,6,https://github.com/chocolate-doom/chocolate-doom/pull/1321#issuecomment-715289173,"Fix the amount of data that must be copied from the value pointer to the inputbox buffer. This fixes a bug with ASCII where the last character would be deleted if the inputbox is completely filled up. This also fixes a bug where UTF8 input would be truncated. Truncating UTF8 data could lead to a buffer overflow.
This fixes #1320
Note that invalid UTF8 characters can possibly still be read from the config file. I haven't tested to see if I could trigger a buffer overflow this way, but I have found other bugs which I will document or fix once I understand them better. Although, with this fix, it's not possible to trigger bugs from Chocolate-Setup's UI and bugs stated in the first paragraph are fixed.","According to this it's even defined in C89:
https://man7.org/linux/man-pages/man3/strlen.3.html#top_of_page",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1321,2020-10-05T19:42:49Z,2020-10-07T06:46:38Z,2020-10-23T12:11:58Z,MERGED,True,1,1,1,https://github.com/AXDOOMER,textscreen: Fix SetBufferFromValue to copy the right amount of data,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1321,https://github.com/drfrag666,7,https://github.com/chocolate-doom/chocolate-doom/pull/1321#issuecomment-715299661,"Fix the amount of data that must be copied from the value pointer to the inputbox buffer. This fixes a bug with ASCII where the last character would be deleted if the inputbox is completely filled up. This also fixes a bug where UTF8 input would be truncated. Truncating UTF8 data could lead to a buffer overflow.
This fixes #1320
Note that invalid UTF8 characters can possibly still be read from the config file. I haven't tested to see if I could trigger a buffer overflow this way, but I have found other bugs which I will document or fix once I understand them better. Although, with this fix, it's not possible to trigger bugs from Chocolate-Setup's UI and bugs stated in the first paragraph are fixed.",You're confusing strlen with strnlen.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1321,2020-10-05T19:42:49Z,2020-10-07T06:46:38Z,2020-10-23T12:11:58Z,MERGED,True,1,1,1,https://github.com/AXDOOMER,textscreen: Fix SetBufferFromValue to copy the right amount of data,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1321,https://github.com/fabiangreffrath,8,https://github.com/chocolate-doom/chocolate-doom/pull/1321#issuecomment-715303932,"Fix the amount of data that must be copied from the value pointer to the inputbox buffer. This fixes a bug with ASCII where the last character would be deleted if the inputbox is completely filled up. This also fixes a bug where UTF8 input would be truncated. Truncating UTF8 data could lead to a buffer overflow.
This fixes #1320
Note that invalid UTF8 characters can possibly still be read from the config file. I haven't tested to see if I could trigger a buffer overflow this way, but I have found other bugs which I will document or fix once I understand them better. Although, with this fix, it's not possible to trigger bugs from Chocolate-Setup's UI and bugs stated in the first paragraph are fixed.","Ah, right, sorry! The latter is indeed POSIX2008.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1322,2020-10-08T21:39:32Z,2020-10-08T23:19:11Z,2021-04-25T04:58:24Z,MERGED,True,4,8,4,https://github.com/mfrancis95,"Remove unused variable ""state"" in P_MovePsprites",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1322,https://github.com/mfrancis95,1,https://github.com/chocolate-doom/chocolate-doom/pull/1322,This fixes a warning generated by cppcheck.,This fixes a warning generated by cppcheck.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1323,2020-10-15T23:05:39Z,2020-10-21T16:05:00Z,2020-10-21T16:05:10Z,MERGED,True,1,23,12,https://github.com/mfrancis95,Remove extra assignments of variables,7,[],https://github.com/chocolate-doom/chocolate-doom/pull/1323,https://github.com/mfrancis95,1,https://github.com/chocolate-doom/chocolate-doom/pull/1323,This fixes more warnings generated by cppcheck.,This fixes more warnings generated by cppcheck.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1323,2020-10-15T23:05:39Z,2020-10-21T16:05:00Z,2020-10-21T16:05:10Z,MERGED,True,1,23,12,https://github.com/mfrancis95,Remove extra assignments of variables,7,[],https://github.com/chocolate-doom/chocolate-doom/pull/1323,https://github.com/turol,2,https://github.com/chocolate-doom/chocolate-doom/pull/1323#issuecomment-710011078,This fixes more warnings generated by cppcheck.,This seems to contain some unrelated commits. Can you remove them?,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1323,2020-10-15T23:05:39Z,2020-10-21T16:05:00Z,2020-10-21T16:05:10Z,MERGED,True,1,23,12,https://github.com/mfrancis95,Remove extra assignments of variables,7,[],https://github.com/chocolate-doom/chocolate-doom/pull/1323,https://github.com/fragglet,3,https://github.com/chocolate-doom/chocolate-doom/pull/1323#issuecomment-713684447,This fixes more warnings generated by cppcheck.,Resolved by doing a squash merge,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1326,2020-10-24T02:40:02Z,,2020-11-29T03:26:22Z,OPEN,False,2,0,1,https://github.com/orbea,Workaround SDL_WINDOW_FULLSCREEN_DESKTOP issues.,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1326,https://github.com/orbea,1,https://github.com/chocolate-doom/chocolate-doom/pull/1326,"On some environments using SDL_WINDOW_FULLSCREEN_DESKTOP will result in the program losing its fullscreen property when switching workspaces, moving the program to a different workspace and maybe some other scenarios.
This can be worked in the user's environment with:
SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS=0

But its better to set the hint in chocolate-doom directly.","On some environments using SDL_WINDOW_FULLSCREEN_DESKTOP will result in the program losing its fullscreen property when switching workspaces, moving the program to a different workspace and maybe some other scenarios.
This can be worked in the user's environment with:
SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS=0

But its better to set the hint in chocolate-doom directly.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1326,2020-10-24T02:40:02Z,,2020-11-29T03:26:22Z,OPEN,False,2,0,1,https://github.com/orbea,Workaround SDL_WINDOW_FULLSCREEN_DESKTOP issues.,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1326,https://github.com/fragglet,2,https://github.com/chocolate-doom/chocolate-doom/pull/1326#issuecomment-730517645,"On some environments using SDL_WINDOW_FULLSCREEN_DESKTOP will result in the program losing its fullscreen property when switching workspaces, moving the program to a different workspace and maybe some other scenarios.
This can be worked in the user's environment with:
SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS=0

But its better to set the hint in chocolate-doom directly.","Can you clarify what ""environments"" you're talking about?
Minimizing if the window loses focus seems like a surprising (and potentially annoying) behavior and I'd rather understand the bug in more depth before proceeding with this change.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1326,2020-10-24T02:40:02Z,,2020-11-29T03:26:22Z,OPEN,False,2,0,1,https://github.com/orbea,Workaround SDL_WINDOW_FULLSCREEN_DESKTOP issues.,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1326,https://github.com/orbea,3,https://github.com/chocolate-doom/chocolate-doom/pull/1326#issuecomment-735337591,"On some environments using SDL_WINDOW_FULLSCREEN_DESKTOP will result in the program losing its fullscreen property when switching workspaces, moving the program to a different workspace and maybe some other scenarios.
This can be worked in the user's environment with:
SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS=0

But its better to set the hint in chocolate-doom directly.","@fragglet Apologies for the slow reply.
I am experiencing this problem the tiling wm spectrwm, but I believe other tiling wm often expose this issue too.
The basic problem is that when SDL2 loses focus on a window such as when changing workspaces the default behavior is to minimize the window and then proceeds to lose the fullscreen. This can be mitigated by simply changing the default where applicable.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1328,2020-10-27T09:04:34Z,2020-10-28T14:36:30Z,2020-10-28T18:29:08Z,MERGED,True,5,3,1,https://github.com/fabiangreffrath,heretic: allow for arbitrarily long demo file names,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1328,https://github.com/fabiangreffrath,1,https://github.com/chocolate-doom/chocolate-doom/pull/1328,,,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1328,2020-10-27T09:04:34Z,2020-10-28T14:36:30Z,2020-10-28T18:29:08Z,MERGED,True,5,3,1,https://github.com/fabiangreffrath,heretic: allow for arbitrarily long demo file names,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1328,https://github.com/turol,2,https://github.com/chocolate-doom/chocolate-doom/pull/1328#issuecomment-717951625,,Do other games require this as well?,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1328,2020-10-27T09:04:34Z,2020-10-28T14:36:30Z,2020-10-28T18:29:08Z,MERGED,True,5,3,1,https://github.com/fabiangreffrath,heretic: allow for arbitrarily long demo file names,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1328,https://github.com/fabiangreffrath,3,https://github.com/chocolate-doom/chocolate-doom/pull/1328#issuecomment-717957655,,I only checked for Heretic.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1328,2020-10-27T09:04:34Z,2020-10-28T14:36:30Z,2020-10-28T18:29:08Z,MERGED,True,5,3,1,https://github.com/fabiangreffrath,heretic: allow for arbitrarily long demo file names,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1328,https://github.com/fabiangreffrath,4,https://github.com/chocolate-doom/chocolate-doom/pull/1328#issuecomment-718126380,,"Seems like only Hexen still has a static array. Doom, Strife and now Heretic allocate dynamically.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1329,2020-10-29T11:27:33Z,2020-10-29T14:01:56Z,2020-10-29T14:02:11Z,MERGED,True,5,3,1,https://github.com/fabiangreffrath,hexen: allow for arbitrarily long demo file names,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1329,https://github.com/fabiangreffrath,1,https://github.com/chocolate-doom/chocolate-doom/pull/1329,,,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1329,2020-10-29T11:27:33Z,2020-10-29T14:01:56Z,2020-10-29T14:02:11Z,MERGED,True,5,3,1,https://github.com/fabiangreffrath,hexen: allow for arbitrarily long demo file names,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1329,https://github.com/fabiangreffrath,2,https://github.com/chocolate-doom/chocolate-doom/pull/1329#issuecomment-718773265,,Thanks!,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1330,2020-11-27T08:21:44Z,2020-11-30T22:48:24Z,2021-08-18T08:51:35Z,MERGED,True,6,6,6,https://github.com/fabiangreffrath,build: use python3 exclusively,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1330,https://github.com/fabiangreffrath,1,https://github.com/chocolate-doom/chocolate-doom/pull/1330,"Python 2 is deprecated and is going to be removed from Linux
distributions in the short term [1,2]. Thus, (parts of) the build
process will fail on current systems like e.g. Debian unstable.
The /bin/python binary is not going to exist anymore. The canonical
name for the Python 3 binary is, you guess it, /bin/python3. So, let's
just use this during our build process and go future proof.
Fixes #1158.
[1] https://wiki.debian.org/Python#Python_in_Debian
[2] https://wiki.debian.org/Python/2Removal","Python 2 is deprecated and is going to be removed from Linux
distributions in the short term [1,2]. Thus, (parts of) the build
process will fail on current systems like e.g. Debian unstable.
The /bin/python binary is not going to exist anymore. The canonical
name for the Python 3 binary is, you guess it, /bin/python3. So, let's
just use this during our build process and go future proof.
Fixes #1158.
[1] https://wiki.debian.org/Python#Python_in_Debian
[2] https://wiki.debian.org/Python/2Removal",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1330,2020-11-27T08:21:44Z,2020-11-30T22:48:24Z,2021-08-18T08:51:35Z,MERGED,True,6,6,6,https://github.com/fabiangreffrath,build: use python3 exclusively,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1330,https://github.com/fabiangreffrath,2,https://github.com/chocolate-doom/chocolate-doom/pull/1330#issuecomment-735995038,"Python 2 is deprecated and is going to be removed from Linux
distributions in the short term [1,2]. Thus, (parts of) the build
process will fail on current systems like e.g. Debian unstable.
The /bin/python binary is not going to exist anymore. The canonical
name for the Python 3 binary is, you guess it, /bin/python3. So, let's
just use this during our build process and go future proof.
Fixes #1158.
[1] https://wiki.debian.org/Python#Python_in_Debian
[2] https://wiki.debian.org/Python/2Removal",@fragglet Sorry for the mis-click!,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1331,2020-11-27T11:41:46Z,,2022-03-21T20:50:31Z,OPEN,False,65,17,9,https://github.com/fabiangreffrath,show ENDOOM screen in the same window as the game,6,[],https://github.com/chocolate-doom/chocolate-doom/pull/1331,https://github.com/fabiangreffrath,1,https://github.com/chocolate-doom/chocolate-doom/pull/1331,"This may not be the most beautiful implementation, but this is
what I have come up with after an hour of free time today.
Open for discussion and suggestions.","This may not be the most beautiful implementation, but this is
what I have come up with after an hour of free time today.
Open for discussion and suggestions.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1331,2020-11-27T11:41:46Z,,2022-03-21T20:50:31Z,OPEN,False,65,17,9,https://github.com/fabiangreffrath,show ENDOOM screen in the same window as the game,6,[],https://github.com/chocolate-doom/chocolate-doom/pull/1331,https://github.com/drfrag666,2,https://github.com/chocolate-doom/chocolate-doom/pull/1331#issuecomment-746710396,"This may not be the most beautiful implementation, but this is
what I have come up with after an hour of free time today.
Open for discussion and suggestions.",I've tested this and in fullscreen mode the text screen is small and centered (surrounded by a black area). In windowed mode if the window is smaller part of it is cut outside. Is there any way to scale it?,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1331,2020-11-27T11:41:46Z,,2022-03-21T20:50:31Z,OPEN,False,65,17,9,https://github.com/fabiangreffrath,show ENDOOM screen in the same window as the game,6,[],https://github.com/chocolate-doom/chocolate-doom/pull/1331,https://github.com/drfrag666,3,https://github.com/chocolate-doom/chocolate-doom/pull/1331#issuecomment-746739510,"This may not be the most beautiful implementation, but this is
what I have come up with after an hour of free time today.
Open for discussion and suggestions.",Now that i think of it the startup console also it's in a different window and closes when you close the game so then i'd need to recreate it using the library to integrate it in the game window too.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1331,2020-11-27T11:41:46Z,,2022-03-21T20:50:31Z,OPEN,False,65,17,9,https://github.com/fabiangreffrath,show ENDOOM screen in the same window as the game,6,[],https://github.com/chocolate-doom/chocolate-doom/pull/1331,https://github.com/fabiangreffrath,4,https://github.com/chocolate-doom/chocolate-doom/pull/1331#issuecomment-747949361,"This may not be the most beautiful implementation, but this is
what I have come up with after an hour of free time today.
Open for discussion and suggestions.","The ENDOOM content is smaller than the rendered game content, just like in the original implementation where the ENDOOM window is smaller than the actual game window. The is no scaling applied yet, as I have tried to keep this initial PR as small as possible and let is serve as a base for improvement.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1331,2020-11-27T11:41:46Z,,2022-03-21T20:50:31Z,OPEN,False,65,17,9,https://github.com/fabiangreffrath,show ENDOOM screen in the same window as the game,6,[],https://github.com/chocolate-doom/chocolate-doom/pull/1331,https://github.com/drfrag666,5,https://github.com/chocolate-doom/chocolate-doom/pull/1331#issuecomment-748249558,"This may not be the most beautiful implementation, but this is
what I have come up with after an hour of free time today.
Open for discussion and suggestions.",Of course i know. Let's see what @fragglet thinks then. I think it's a good idea as long as the content is scaled.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1331,2020-11-27T11:41:46Z,,2022-03-21T20:50:31Z,OPEN,False,65,17,9,https://github.com/fabiangreffrath,show ENDOOM screen in the same window as the game,6,[],https://github.com/chocolate-doom/chocolate-doom/pull/1331,https://github.com/fabiangreffrath,6,https://github.com/chocolate-doom/chocolate-doom/pull/1331#issuecomment-1074402932,"This may not be the most beautiful implementation, but this is
what I have come up with after an hour of free time today.
Open for discussion and suggestions.","I would like to see this rebased and split into more meaningful commits but if you don't want to I won't really require it.

It was a series of commits in Woof!. I just copied the relevant changes here.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1331,2020-11-27T11:41:46Z,,2022-03-21T20:50:31Z,OPEN,False,65,17,9,https://github.com/fabiangreffrath,show ENDOOM screen in the same window as the game,6,[],https://github.com/chocolate-doom/chocolate-doom/pull/1331,https://github.com/fabiangreffrath,7,https://github.com/chocolate-doom/chocolate-doom/pull/1331#issuecomment-1074404937,"This may not be the most beautiful implementation, but this is
what I have come up with after an hour of free time today.
Open for discussion and suggestions.","This reminds me, should probably check the animated intro screens for thd non-Doom games as well.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1334,2020-12-09T11:12:32Z,2020-12-09T19:41:45Z,2020-12-09T19:41:45Z,MERGED,True,4,4,4,https://github.com/timgates42,"docs: fix simple typo, apropriate -> appropriate",2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1334,https://github.com/timgates42,1,https://github.com/chocolate-doom/chocolate-doom/pull/1334,"There is a small typo in src/doom/p_mobj.c, src/heretic/p_mobj.c, src/strife/p_mobj.c.
Should read appropriate rather than apropriate.
Semi-automated pull request generated by
https://github.com/timgates42/meticulous/blob/master/docs/NOTE.md","There is a small typo in src/doom/p_mobj.c, src/heretic/p_mobj.c, src/strife/p_mobj.c.
Should read appropriate rather than apropriate.
Semi-automated pull request generated by
https://github.com/timgates42/meticulous/blob/master/docs/NOTE.md",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1334,2020-12-09T11:12:32Z,2020-12-09T19:41:45Z,2020-12-09T19:41:45Z,MERGED,True,4,4,4,https://github.com/timgates42,"docs: fix simple typo, apropriate -> appropriate",2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1334,https://github.com/fabiangreffrath,2,https://github.com/chocolate-doom/chocolate-doom/pull/1334#issuecomment-741706645,"There is a small typo in src/doom/p_mobj.c, src/heretic/p_mobj.c, src/strife/p_mobj.c.
Should read appropriate rather than apropriate.
Semi-automated pull request generated by
https://github.com/timgates42/meticulous/blob/master/docs/NOTE.md","Ha, and there is another one:
heretic/d_main.c
1092:// start the apropriate game based on parms",True,{'THUMBS_UP': ['https://github.com/timgates42']}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1334,2020-12-09T11:12:32Z,2020-12-09T19:41:45Z,2020-12-09T19:41:45Z,MERGED,True,4,4,4,https://github.com/timgates42,"docs: fix simple typo, apropriate -> appropriate",2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1334,https://github.com/timgates42,3,https://github.com/chocolate-doom/chocolate-doom/pull/1334#issuecomment-741958273,"There is a small typo in src/doom/p_mobj.c, src/heretic/p_mobj.c, src/strife/p_mobj.c.
Should read appropriate rather than apropriate.
Semi-automated pull request generated by
https://github.com/timgates42/meticulous/blob/master/docs/NOTE.md",Thx @fabiangreffrath added that too,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1338,2020-12-21T23:19:00Z,2020-12-22T06:50:22Z,2020-12-22T06:50:22Z,MERGED,True,24,0,1,https://github.com/chungy,iwad: Support autoloading GOG.com releases of Heretic and Hexen,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1338,https://github.com/chungy,1,https://github.com/chocolate-doom/chocolate-doom/pull/1338,"Verified myself by installing the games from the GOG releases, installing them (via Wine), and then building both 32- and 64-bit versions of Chocolate Heretic/Hexen and checking they work.","Verified myself by installing the games from the GOG releases, installing them (via Wine), and then building both 32- and 64-bit versions of Chocolate Heretic/Hexen and checking they work.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1343,2021-01-02T10:04:20Z,2021-01-03T03:43:11Z,2021-01-03T03:43:11Z,MERGED,True,1,1,1,https://github.com/JNechaevsky,Update copyright year to 2021,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1343,https://github.com/JNechaevsky,1,https://github.com/chocolate-doom/chocolate-doom/pull/1343,Happy New Year! 🎄,Happy New Year! 🎄,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1346,2021-02-01T13:59:49Z,2021-08-27T18:39:25Z,2021-08-27T18:39:28Z,MERGED,True,33,4,2,https://github.com/turol,Refactor myargv and fix const correctness issue,8,[],https://github.com/chocolate-doom/chocolate-doom/pull/1346,https://github.com/turol,1,https://github.com/chocolate-doom/chocolate-doom/pull/1346,"Refactor myargv so it's always a buffer allocated and owned by us (instead of copied from system argv) and contains strings allocated by us. Then use that to fix a const correctness issue. Also fixes some memory leaks when using response files (because the file contents were not freed).
I did test the response file functionality and it seems to work for me but if you are using it for something please also test.
Some caveats:

Hexen might store one of the strings sc_ScriptsDir. Because of this myargv should not be altered after the game has started. This could be fixed if someone wants to still change it later. As far as I can tell all the other uses of myargv are strictly temporary and should be safe.
The strings and buffer theoretically leak (as detected by Valgrind/ASan) but since they're still reachable this is considered OK. There's already a lot of other similar cases.

Fixes #1279","Refactor myargv so it's always a buffer allocated and owned by us (instead of copied from system argv) and contains strings allocated by us. Then use that to fix a const correctness issue. Also fixes some memory leaks when using response files (because the file contents were not freed).
I did test the response file functionality and it seems to work for me but if you are using it for something please also test.
Some caveats:

Hexen might store one of the strings sc_ScriptsDir. Because of this myargv should not be altered after the game has started. This could be fixed if someone wants to still change it later. As far as I can tell all the other uses of myargv are strictly temporary and should be safe.
The strings and buffer theoretically leak (as detected by Valgrind/ASan) but since they're still reachable this is considered OK. There's already a lot of other similar cases.

Fixes #1279",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1346,2021-02-01T13:59:49Z,2021-08-27T18:39:25Z,2021-08-27T18:39:28Z,MERGED,True,33,4,2,https://github.com/turol,Refactor myargv and fix const correctness issue,8,[],https://github.com/chocolate-doom/chocolate-doom/pull/1346,https://github.com/turol,2,https://github.com/chocolate-doom/chocolate-doom/pull/1346#issuecomment-774673856,"Refactor myargv so it's always a buffer allocated and owned by us (instead of copied from system argv) and contains strings allocated by us. Then use that to fix a const correctness issue. Also fixes some memory leaks when using response files (because the file contents were not freed).
I did test the response file functionality and it seems to work for me but if you are using it for something please also test.
Some caveats:

Hexen might store one of the strings sc_ScriptsDir. Because of this myargv should not be altered after the game has started. This could be fixed if someone wants to still change it later. As far as I can tell all the other uses of myargv are strictly temporary and should be safe.
The strings and buffer theoretically leak (as detected by Valgrind/ASan) but since they're still reachable this is considered OK. There's already a lot of other similar cases.

Fixes #1279",@fragglet ping,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1346,2021-02-01T13:59:49Z,2021-08-27T18:39:25Z,2021-08-27T18:39:28Z,MERGED,True,33,4,2,https://github.com/turol,Refactor myargv and fix const correctness issue,8,[],https://github.com/chocolate-doom/chocolate-doom/pull/1346,https://github.com/turol,3,https://github.com/chocolate-doom/chocolate-doom/pull/1346#issuecomment-778132074,"Refactor myargv so it's always a buffer allocated and owned by us (instead of copied from system argv) and contains strings allocated by us. Then use that to fix a const correctness issue. Also fixes some memory leaks when using response files (because the file contents were not freed).
I did test the response file functionality and it seems to work for me but if you are using it for something please also test.
Some caveats:

Hexen might store one of the strings sc_ScriptsDir. Because of this myargv should not be altered after the game has started. This could be fixed if someone wants to still change it later. As far as I can tell all the other uses of myargv are strictly temporary and should be safe.
The strings and buffer theoretically leak (as detected by Valgrind/ASan) but since they're still reachable this is considered OK. There's already a lot of other similar cases.

Fixes #1279",Anybody? Merging is blocked until someone reviews this...,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1346,2021-02-01T13:59:49Z,2021-08-27T18:39:25Z,2021-08-27T18:39:28Z,MERGED,True,33,4,2,https://github.com/turol,Refactor myargv and fix const correctness issue,8,[],https://github.com/chocolate-doom/chocolate-doom/pull/1346,https://github.com/fabiangreffrath,4,https://github.com/chocolate-doom/chocolate-doom/pull/1346#issuecomment-779046227,"Refactor myargv so it's always a buffer allocated and owned by us (instead of copied from system argv) and contains strings allocated by us. Then use that to fix a const correctness issue. Also fixes some memory leaks when using response files (because the file contents were not freed).
I did test the response file functionality and it seems to work for me but if you are using it for something please also test.
Some caveats:

Hexen might store one of the strings sc_ScriptsDir. Because of this myargv should not be altered after the game has started. This could be fixed if someone wants to still change it later. As far as I can tell all the other uses of myargv are strictly temporary and should be safe.
The strings and buffer theoretically leak (as detected by Valgrind/ASan) but since they're still reachable this is considered OK. There's already a lot of other similar cases.

Fixes #1279","@turol Did you check if this works cleanly with (_WIN32 only) this?

  
    
      chocolate-doom/src/m_argv.c
    
    
         Line 328
      in
      7a0db31
    
  
  
    

        
          
           void M_AddLooseFiles(void)",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1346,2021-02-01T13:59:49Z,2021-08-27T18:39:25Z,2021-08-27T18:39:28Z,MERGED,True,33,4,2,https://github.com/turol,Refactor myargv and fix const correctness issue,8,[],https://github.com/chocolate-doom/chocolate-doom/pull/1346,https://github.com/turol,5,https://github.com/chocolate-doom/chocolate-doom/pull/1346#issuecomment-779132620,"Refactor myargv so it's always a buffer allocated and owned by us (instead of copied from system argv) and contains strings allocated by us. Then use that to fix a const correctness issue. Also fixes some memory leaks when using response files (because the file contents were not freed).
I did test the response file functionality and it seems to work for me but if you are using it for something please also test.
Some caveats:

Hexen might store one of the strings sc_ScriptsDir. Because of this myargv should not be altered after the game has started. This could be fixed if someone wants to still change it later. As far as I can tell all the other uses of myargv are strictly temporary and should be safe.
The strings and buffer theoretically leak (as detected by Valgrind/ASan) but since they're still reachable this is considered OK. There's already a lot of other similar cases.

Fixes #1279","No, I did not. I don't have a windows build environment nor a real windows test environment. However based on review of the code it should work, it would just leak some memory. Can someone who does have access to windows test it? If not, I can look into setting up a mingw build/wine testing environment.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1346,2021-02-01T13:59:49Z,2021-08-27T18:39:25Z,2021-08-27T18:39:28Z,MERGED,True,33,4,2,https://github.com/turol,Refactor myargv and fix const correctness issue,8,[],https://github.com/chocolate-doom/chocolate-doom/pull/1346,https://github.com/fabiangreffrath,6,https://github.com/chocolate-doom/chocolate-doom/pull/1346#issuecomment-792533840,"Refactor myargv so it's always a buffer allocated and owned by us (instead of copied from system argv) and contains strings allocated by us. Then use that to fix a const correctness issue. Also fixes some memory leaks when using response files (because the file contents were not freed).
I did test the response file functionality and it seems to work for me but if you are using it for something please also test.
Some caveats:

Hexen might store one of the strings sc_ScriptsDir. Because of this myargv should not be altered after the game has started. This could be fixed if someone wants to still change it later. As far as I can tell all the other uses of myargv are strictly temporary and should be safe.
The strings and buffer theoretically leak (as detected by Valgrind/ASan) but since they're still reachable this is considered OK. There's already a lot of other similar cases.

Fixes #1279","No, I did not. I don't have a windows build environment nor a real windows test environment. However based on review of the code it should work, it would just leak some memory. Can someone who does have access to windows test it? If not, I can look into setting up a mingw build/wine testing environment.

The code in question isn't really Windows-specific, i.e. it doesn't use any Win32 API or similar. It is just disabled on non-Win32, because other systems do not have the concept of drag-and-drop of files onto program icons. If you like, you can just compile it and pass some random path names pointing to WAD or DEH files on the command line (without any other parameter starting with a dash, that is) to check if it works.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1346,2021-02-01T13:59:49Z,2021-08-27T18:39:25Z,2021-08-27T18:39:28Z,MERGED,True,33,4,2,https://github.com/turol,Refactor myargv and fix const correctness issue,8,[],https://github.com/chocolate-doom/chocolate-doom/pull/1346,https://github.com/turol,7,https://github.com/chocolate-doom/chocolate-doom/pull/1346#issuecomment-804769863,"Refactor myargv so it's always a buffer allocated and owned by us (instead of copied from system argv) and contains strings allocated by us. Then use that to fix a const correctness issue. Also fixes some memory leaks when using response files (because the file contents were not freed).
I did test the response file functionality and it seems to work for me but if you are using it for something please also test.
Some caveats:

Hexen might store one of the strings sc_ScriptsDir. Because of this myargv should not be altered after the game has started. This could be fixed if someone wants to still change it later. As far as I can tell all the other uses of myargv are strictly temporary and should be safe.
The strings and buffer theoretically leak (as detected by Valgrind/ASan) but since they're still reachable this is considered OK. There's already a lot of other similar cases.

Fixes #1279","Rebased.
I tested loose files on Linux by enabling the M_AddLooseFiles call in i_main.c and enabling the code itself in m_argv.c. However it seems to not work, even without my changes. Does it actually work on Windows with current master?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1346,2021-02-01T13:59:49Z,2021-08-27T18:39:25Z,2021-08-27T18:39:28Z,MERGED,True,33,4,2,https://github.com/turol,Refactor myargv and fix const correctness issue,8,[],https://github.com/chocolate-doom/chocolate-doom/pull/1346,https://github.com/fabiangreffrath,8,https://github.com/chocolate-doom/chocolate-doom/pull/1346#issuecomment-804788648,"Refactor myargv so it's always a buffer allocated and owned by us (instead of copied from system argv) and contains strings allocated by us. Then use that to fix a const correctness issue. Also fixes some memory leaks when using response files (because the file contents were not freed).
I did test the response file functionality and it seems to work for me but if you are using it for something please also test.
Some caveats:

Hexen might store one of the strings sc_ScriptsDir. Because of this myargv should not be altered after the game has started. This could be fixed if someone wants to still change it later. As far as I can tell all the other uses of myargv are strictly temporary and should be safe.
The strings and buffer theoretically leak (as detected by Valgrind/ASan) but since they're still reachable this is considered OK. There's already a lot of other similar cases.

Fixes #1279","How did you actually test it? It should rearrange files passed on the command line without any further arguments into a clean sequence of arguments and parameters. For example
./chocolate-doom my_mod.deh my_fav.wad doom.wad my_fix.deh

should become
./chocolate-doom -iwad doom.wad -file my_fav.wad -deh my_mod.deh my_fix.deh",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1346,2021-02-01T13:59:49Z,2021-08-27T18:39:25Z,2021-08-27T18:39:28Z,MERGED,True,33,4,2,https://github.com/turol,Refactor myargv and fix const correctness issue,8,[],https://github.com/chocolate-doom/chocolate-doom/pull/1346,https://github.com/turol,9,https://github.com/chocolate-doom/chocolate-doom/pull/1346#issuecomment-804790147,"Refactor myargv so it's always a buffer allocated and owned by us (instead of copied from system argv) and contains strings allocated by us. Then use that to fix a const correctness issue. Also fixes some memory leaks when using response files (because the file contents were not freed).
I did test the response file functionality and it seems to work for me but if you are using it for something please also test.
Some caveats:

Hexen might store one of the strings sc_ScriptsDir. Because of this myargv should not be altered after the game has started. This could be fixed if someone wants to still change it later. As far as I can tell all the other uses of myargv are strictly temporary and should be safe.
The strings and buffer theoretically leak (as detected by Valgrind/ASan) but since they're still reachable this is considered OK. There's already a lot of other similar cases.

Fixes #1279","I tried
/path/to/build/chocolate-doom ultrawad.wad

It should have replaced all levels. It did not. Using
/path/to/build/chocolate-doom -file ultrawad.wad

worked.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1346,2021-02-01T13:59:49Z,2021-08-27T18:39:25Z,2021-08-27T18:39:28Z,MERGED,True,33,4,2,https://github.com/turol,Refactor myargv and fix const correctness issue,8,[],https://github.com/chocolate-doom/chocolate-doom/pull/1346,https://github.com/fabiangreffrath,10,https://github.com/chocolate-doom/chocolate-doom/pull/1346#issuecomment-804791487,"Refactor myargv so it's always a buffer allocated and owned by us (instead of copied from system argv) and contains strings allocated by us. Then use that to fix a const correctness issue. Also fixes some memory leaks when using response files (because the file contents were not freed).
I did test the response file functionality and it seems to work for me but if you are using it for something please also test.
Some caveats:

Hexen might store one of the strings sc_ScriptsDir. Because of this myargv should not be altered after the game has started. This could be fixed if someone wants to still change it later. As far as I can tell all the other uses of myargv are strictly temporary and should be safe.
The strings and buffer theoretically leak (as detected by Valgrind/ASan) but since they're still reachable this is considered OK. There's already a lot of other similar cases.

Fixes #1279",Would be interesting to know how the myargv[] array looked like after running through M_AddLooseFiles?,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1346,2021-02-01T13:59:49Z,2021-08-27T18:39:25Z,2021-08-27T18:39:28Z,MERGED,True,33,4,2,https://github.com/turol,Refactor myargv and fix const correctness issue,8,[],https://github.com/chocolate-doom/chocolate-doom/pull/1346,https://github.com/turol,11,https://github.com/chocolate-doom/chocolate-doom/pull/1346#issuecomment-804794549,"Refactor myargv so it's always a buffer allocated and owned by us (instead of copied from system argv) and contains strings allocated by us. Then use that to fix a const correctness issue. Also fixes some memory leaks when using response files (because the file contents were not freed).
I did test the response file functionality and it seems to work for me but if you are using it for something please also test.
Some caveats:

Hexen might store one of the strings sc_ScriptsDir. Because of this myargv should not be altered after the game has started. This could be fixed if someone wants to still change it later. As far as I can tell all the other uses of myargv are strictly temporary and should be safe.
The strings and buffer theoretically leak (as detected by Valgrind/ASan) but since they're still reachable this is considered OK. There's already a lot of other similar cases.

Fixes #1279","No change, it contained the path to binary and the wad file name. No extra parameters, argc still 2.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1346,2021-02-01T13:59:49Z,2021-08-27T18:39:25Z,2021-08-27T18:39:28Z,MERGED,True,33,4,2,https://github.com/turol,Refactor myargv and fix const correctness issue,8,[],https://github.com/chocolate-doom/chocolate-doom/pull/1346,https://github.com/fabiangreffrath,12,https://github.com/chocolate-doom/chocolate-doom/pull/1346#issuecomment-804795874,"Refactor myargv so it's always a buffer allocated and owned by us (instead of copied from system argv) and contains strings allocated by us. Then use that to fix a const correctness issue. Also fixes some memory leaks when using response files (because the file contents were not freed).
I did test the response file functionality and it seems to work for me but if you are using it for something please also test.
Some caveats:

Hexen might store one of the strings sc_ScriptsDir. Because of this myargv should not be altered after the game has started. This could be fixed if someone wants to still change it later. As far as I can tell all the other uses of myargv are strictly temporary and should be safe.
The strings and buffer theoretically leak (as detected by Valgrind/ASan) but since they're still reachable this is considered OK. There's already a lot of other similar cases.

Fixes #1279","Make sure to use backslashes in paths, even if starting from a MSYS2 command line.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1346,2021-02-01T13:59:49Z,2021-08-27T18:39:25Z,2021-08-27T18:39:28Z,MERGED,True,33,4,2,https://github.com/turol,Refactor myargv and fix const correctness issue,8,[],https://github.com/chocolate-doom/chocolate-doom/pull/1346,https://github.com/turol,13,https://github.com/chocolate-doom/chocolate-doom/pull/1346#issuecomment-804795989,"Refactor myargv so it's always a buffer allocated and owned by us (instead of copied from system argv) and contains strings allocated by us. Then use that to fix a const correctness issue. Also fixes some memory leaks when using response files (because the file contents were not freed).
I did test the response file functionality and it seems to work for me but if you are using it for something please also test.
Some caveats:

Hexen might store one of the strings sc_ScriptsDir. Because of this myargv should not be altered after the game has started. This could be fixed if someone wants to still change it later. As far as I can tell all the other uses of myargv are strictly temporary and should be safe.
The strings and buffer theoretically leak (as detected by Valgrind/ASan) but since they're still reachable this is considered OK. There's already a lot of other similar cases.

Fixes #1279","I think the problem is here:

  
    
      chocolate-doom/src/m_argv.c
    
    
         Line 356
      in
      7a0db31
    
  
  
    

        
          
           ((!isalpha(arg[0]) || arg[1] != ':' || arg[2] != '\\') && 
        
    
  


It checks that there's a : and a backslash. So this is in fact highly Windows-specific code and it requires an absolute path. So testing with Windows (or wine) is required.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1346,2021-02-01T13:59:49Z,2021-08-27T18:39:25Z,2021-08-27T18:39:28Z,MERGED,True,33,4,2,https://github.com/turol,Refactor myargv and fix const correctness issue,8,[],https://github.com/chocolate-doom/chocolate-doom/pull/1346,https://github.com/fabiangreffrath,14,https://github.com/chocolate-doom/chocolate-doom/pull/1346#issuecomment-804796622,"Refactor myargv so it's always a buffer allocated and owned by us (instead of copied from system argv) and contains strings allocated by us. Then use that to fix a const correctness issue. Also fixes some memory leaks when using response files (because the file contents were not freed).
I did test the response file functionality and it seems to work for me but if you are using it for something please also test.
Some caveats:

Hexen might store one of the strings sc_ScriptsDir. Because of this myargv should not be altered after the game has started. This could be fixed if someone wants to still change it later. As far as I can tell all the other uses of myargv are strictly temporary and should be safe.
The strings and buffer theoretically leak (as detected by Valgrind/ASan) but since they're still reachable this is considered OK. There's already a lot of other similar cases.

Fixes #1279","You can pass canonical Windows paths in an MSYS2 shell when quoting it in double-quotes, e.g.
./chocolate-doom ""D:\path\to\example.wad""",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1346,2021-02-01T13:59:49Z,2021-08-27T18:39:25Z,2021-08-27T18:39:28Z,MERGED,True,33,4,2,https://github.com/turol,Refactor myargv and fix const correctness issue,8,[],https://github.com/chocolate-doom/chocolate-doom/pull/1346,https://github.com/turol,15,https://github.com/chocolate-doom/chocolate-doom/pull/1346#issuecomment-804797213,"Refactor myargv so it's always a buffer allocated and owned by us (instead of copied from system argv) and contains strings allocated by us. Then use that to fix a const correctness issue. Also fixes some memory leaks when using response files (because the file contents were not freed).
I did test the response file functionality and it seems to work for me but if you are using it for something please also test.
Some caveats:

Hexen might store one of the strings sc_ScriptsDir. Because of this myargv should not be altered after the game has started. This could be fixed if someone wants to still change it later. As far as I can tell all the other uses of myargv are strictly temporary and should be safe.
The strings and buffer theoretically leak (as detected by Valgrind/ASan) but since they're still reachable this is considered OK. There's already a lot of other similar cases.

Fixes #1279",But that requires a Windows binary and either a real Windows or a wine installation. I don't have those set up at the moment.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1346,2021-02-01T13:59:49Z,2021-08-27T18:39:25Z,2021-08-27T18:39:28Z,MERGED,True,33,4,2,https://github.com/turol,Refactor myargv and fix const correctness issue,8,[],https://github.com/chocolate-doom/chocolate-doom/pull/1346,https://github.com/fabiangreffrath,16,https://github.com/chocolate-doom/chocolate-doom/pull/1346#issuecomment-804851366,"Refactor myargv so it's always a buffer allocated and owned by us (instead of copied from system argv) and contains strings allocated by us. Then use that to fix a const correctness issue. Also fixes some memory leaks when using response files (because the file contents were not freed).
I did test the response file functionality and it seems to work for me but if you are using it for something please also test.
Some caveats:

Hexen might store one of the strings sc_ScriptsDir. Because of this myargv should not be altered after the game has started. This could be fixed if someone wants to still change it later. As far as I can tell all the other uses of myargv are strictly temporary and should be safe.
The strings and buffer theoretically leak (as detected by Valgrind/ASan) but since they're still reachable this is considered OK. There's already a lot of other similar cases.

Fixes #1279",Random idea: The reordering of the command line arguments should work regardless of the strings being valid path names on your OS or not.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1346,2021-02-01T13:59:49Z,2021-08-27T18:39:25Z,2021-08-27T18:39:28Z,MERGED,True,33,4,2,https://github.com/turol,Refactor myargv and fix const correctness issue,8,[],https://github.com/chocolate-doom/chocolate-doom/pull/1346,https://github.com/fabiangreffrath,17,https://github.com/chocolate-doom/chocolate-doom/pull/1346#issuecomment-805579866,"Refactor myargv so it's always a buffer allocated and owned by us (instead of copied from system argv) and contains strings allocated by us. Then use that to fix a const correctness issue. Also fixes some memory leaks when using response files (because the file contents were not freed).
I did test the response file functionality and it seems to work for me but if you are using it for something please also test.
Some caveats:

Hexen might store one of the strings sc_ScriptsDir. Because of this myargv should not be altered after the game has started. This could be fixed if someone wants to still change it later. As far as I can tell all the other uses of myargv are strictly temporary and should be safe.
The strings and buffer theoretically leak (as detected by Valgrind/ASan) but since they're still reachable this is considered OK. There's already a lot of other similar cases.

Fixes #1279","For your checks, you may simply comment out this condition. It is really just there to check if full paths without proper arguments have been given on the command line, as a hint that the command line has been constructed by drag-and-dropping the files on the game icon. They don't play any further role...",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1346,2021-02-01T13:59:49Z,2021-08-27T18:39:25Z,2021-08-27T18:39:28Z,MERGED,True,33,4,2,https://github.com/turol,Refactor myargv and fix const correctness issue,8,[],https://github.com/chocolate-doom/chocolate-doom/pull/1346,https://github.com/fabiangreffrath,18,https://github.com/chocolate-doom/chocolate-doom/pull/1346#issuecomment-813956675,"Refactor myargv so it's always a buffer allocated and owned by us (instead of copied from system argv) and contains strings allocated by us. Then use that to fix a const correctness issue. Also fixes some memory leaks when using response files (because the file contents were not freed).
I did test the response file functionality and it seems to work for me but if you are using it for something please also test.
Some caveats:

Hexen might store one of the strings sc_ScriptsDir. Because of this myargv should not be altered after the game has started. This could be fixed if someone wants to still change it later. As far as I can tell all the other uses of myargv are strictly temporary and should be safe.
The strings and buffer theoretically leak (as detected by Valgrind/ASan) but since they're still reachable this is considered OK. There's already a lot of other similar cases.

Fixes #1279","This should be sufficient to test your patch on Linux:
diff --git a/src/i_main.c b/src/i_main.c
index 176538df..167930b1 100644
--- a/src/i_main.c
+++ b/src/i_main.c
@@ -50,11 +50,9 @@ int main(int argc, char **argv)
         exit(0);
     }
 
-#if defined(_WIN32)
     // compose a proper command line from loose file paths passed as arguments
     // to allow for loading WADs and DEHACKED patches by drag-and-drop
     M_AddLooseFiles();
-#endif
 
     M_FindResponseFile();
     M_SetExeDir();
diff --git a/src/m_argv.c b/src/m_argv.c
index 921008aa..899f1701 100644
--- a/src/m_argv.c
+++ b/src/m_argv.c
@@ -264,7 +264,6 @@ void M_FindResponseFile(void)
     }
 }
 
-#if defined(_WIN32)
 enum
 {
     FILETYPE_UNKNOWN = 0x0,
@@ -352,9 +351,7 @@ void M_AddLooseFiles(void)
 
         if (strlen(arg) < 3 ||
             arg[0] == '-' ||
-            arg[0] == '@' ||
-            ((!isalpha(arg[0]) || arg[1] != ':' || arg[2] != '\\') &&
-            (arg[0] != '\\' || arg[1] != '\\')))
+            arg[0] == '@')
         {
             free(arguments);
             return;
@@ -408,7 +405,6 @@ void M_AddLooseFiles(void)
 
     myargv = newargv;
 }
-#endif
 
 // Return the name of the executable used to start the program:",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1346,2021-02-01T13:59:49Z,2021-08-27T18:39:25Z,2021-08-27T18:39:28Z,MERGED,True,33,4,2,https://github.com/turol,Refactor myargv and fix const correctness issue,8,[],https://github.com/chocolate-doom/chocolate-doom/pull/1346,https://github.com/turol,19,https://github.com/chocolate-doom/chocolate-doom/pull/1346#issuecomment-813962031,"Refactor myargv so it's always a buffer allocated and owned by us (instead of copied from system argv) and contains strings allocated by us. Then use that to fix a const correctness issue. Also fixes some memory leaks when using response files (because the file contents were not freed).
I did test the response file functionality and it seems to work for me but if you are using it for something please also test.
Some caveats:

Hexen might store one of the strings sc_ScriptsDir. Because of this myargv should not be altered after the game has started. This could be fixed if someone wants to still change it later. As far as I can tell all the other uses of myargv are strictly temporary and should be safe.
The strings and buffer theoretically leak (as detected by Valgrind/ASan) but since they're still reachable this is considered OK. There's already a lot of other similar cases.

Fixes #1279","@fabiangreffrath Thanks, I figured it should be something like that. Now I just need to find some time to test this...",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1346,2021-02-01T13:59:49Z,2021-08-27T18:39:25Z,2021-08-27T18:39:28Z,MERGED,True,33,4,2,https://github.com/turol,Refactor myargv and fix const correctness issue,8,[],https://github.com/chocolate-doom/chocolate-doom/pull/1346,https://github.com/turol,20,https://github.com/chocolate-doom/chocolate-doom/pull/1346#issuecomment-904769678,"Refactor myargv so it's always a buffer allocated and owned by us (instead of copied from system argv) and contains strings allocated by us. Then use that to fix a const correctness issue. Also fixes some memory leaks when using response files (because the file contents were not freed).
I did test the response file functionality and it seems to work for me but if you are using it for something please also test.
Some caveats:

Hexen might store one of the strings sc_ScriptsDir. Because of this myargv should not be altered after the game has started. This could be fixed if someone wants to still change it later. As far as I can tell all the other uses of myargv are strictly temporary and should be safe.
The strings and buffer theoretically leak (as detected by Valgrind/ASan) but since they're still reachable this is considered OK. There's already a lot of other similar cases.

Fixes #1279",Rebased and tested by hacking the windows-specific code to also be used on Linux. Seems to work.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1346,2021-02-01T13:59:49Z,2021-08-27T18:39:25Z,2021-08-27T18:39:28Z,MERGED,True,33,4,2,https://github.com/turol,Refactor myargv and fix const correctness issue,8,[],https://github.com/chocolate-doom/chocolate-doom/pull/1346,https://github.com/turol,21,https://github.com/chocolate-doom/chocolate-doom/pull/1346#issuecomment-906229836,"Refactor myargv so it's always a buffer allocated and owned by us (instead of copied from system argv) and contains strings allocated by us. Then use that to fix a const correctness issue. Also fixes some memory leaks when using response files (because the file contents were not freed).
I did test the response file functionality and it seems to work for me but if you are using it for something please also test.
Some caveats:

Hexen might store one of the strings sc_ScriptsDir. Because of this myargv should not be altered after the game has started. This could be fixed if someone wants to still change it later. As far as I can tell all the other uses of myargv are strictly temporary and should be safe.
The strings and buffer theoretically leak (as detected by Valgrind/ASan) but since they're still reachable this is considered OK. There's already a lot of other similar cases.

Fixes #1279",@fabiangreffrath @fragglet ping,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1346,2021-02-01T13:59:49Z,2021-08-27T18:39:25Z,2021-08-27T18:39:28Z,MERGED,True,33,4,2,https://github.com/turol,Refactor myargv and fix const correctness issue,8,[],https://github.com/chocolate-doom/chocolate-doom/pull/1346,https://github.com/turol,22,https://github.com/chocolate-doom/chocolate-doom/pull/1346#issuecomment-906244573,"Refactor myargv so it's always a buffer allocated and owned by us (instead of copied from system argv) and contains strings allocated by us. Then use that to fix a const correctness issue. Also fixes some memory leaks when using response files (because the file contents were not freed).
I did test the response file functionality and it seems to work for me but if you are using it for something please also test.
Some caveats:

Hexen might store one of the strings sc_ScriptsDir. Because of this myargv should not be altered after the game has started. This could be fixed if someone wants to still change it later. As far as I can tell all the other uses of myargv are strictly temporary and should be safe.
The strings and buffer theoretically leak (as detected by Valgrind/ASan) but since they're still reachable this is considered OK. There's already a lot of other similar cases.

Fixes #1279",I'll merge this tomorrow unless someone disagrees.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1350,2021-02-17T08:01:54Z,2021-02-17T11:38:48Z,2021-02-17T11:38:51Z,MERGED,True,1,1,1,https://github.com/fabiangreffrath,fix padvalue typo in the REJECT buffer overflow emulation,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1350,https://github.com/fabiangreffrath,1,https://github.com/chocolate-doom/chocolate-doom/pull/1350,,,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1352,2021-02-23T14:00:31Z,2021-02-23T14:16:15Z,2021-02-23T14:16:23Z,MERGED,True,1,1,1,https://github.com/tpoppins,Fixes #1345,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1352,https://github.com/tpoppins,1,https://github.com/chocolate-doom/chocolate-doom/pull/1352,Replaced the numerical value for the player's mobj with a ref to a define in deh_misc.h.,Replaced the numerical value for the player's mobj with a ref to a define in deh_misc.h.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1352,2021-02-23T14:00:31Z,2021-02-23T14:16:15Z,2021-02-23T14:16:23Z,MERGED,True,1,1,1,https://github.com/tpoppins,Fixes #1345,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1352,https://github.com/fabiangreffrath,2,https://github.com/chocolate-doom/chocolate-doom/pull/1352#issuecomment-784233644,Replaced the numerical value for the player's mobj with a ref to a define in deh_misc.h.,Thanks!,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1353,2021-02-23T14:32:21Z,2021-02-23T16:21:32Z,2021-08-18T08:58:49Z,MERGED,True,1,1,1,https://github.com/fabiangreffrath,save config in executable directory on Windows,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1353,https://github.com/fabiangreffrath,1,https://github.com/chocolate-doom/chocolate-doom/pull/1353,Fixes #1351,Fixes #1351,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1354,2021-02-25T09:23:06Z,,2021-02-25T10:08:47Z,OPEN,False,6,0,1,https://github.com/tpoppins,Substitute dummy sidedef for missing 1st sidedef (fix from Crispy),1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1354,https://github.com/tpoppins,1,https://github.com/chocolate-doom/chocolate-doom/pull/1354,Fixes #1305 (Segfault on wc_v2.wad),Fixes #1305 (Segfault on wc_v2.wad),True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1354,2021-02-25T09:23:06Z,,2021-02-25T10:08:47Z,OPEN,False,6,0,1,https://github.com/tpoppins,Substitute dummy sidedef for missing 1st sidedef (fix from Crispy),1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1354,https://github.com/fabiangreffrath,2,https://github.com/chocolate-doom/chocolate-doom/pull/1354#issuecomment-785778237,Fixes #1305 (Segfault on wc_v2.wad),"Well, while that patch is pretty pragmatic, I doubt it is in line with Choco's philosophy. A ""proper"" fix would be to gather the memory content of sides[-1] and use this instead of merely replacing sides[-1] with sides[0].",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1356,2021-03-03T06:25:38Z,2021-03-18T21:03:33Z,2021-03-20T20:31:49Z,MERGED,True,14,1,1,https://github.com/Acts19quiz,Add chex.exe par times for chex.wad.,8,[],https://github.com/chocolate-doom/chocolate-doom/pull/1356,https://github.com/Acts19quiz,1,https://github.com/chocolate-doom/chocolate-doom/pull/1356,"Potential changes to address issue #1355 but in short this is one (potential) way to add a new array containing the chex.exe par times. Default behaviour for chex.exe, if players happen to mess about and -warp or something into Ultimate DOOM levels, is for the DOOM music, pars, etc. to display, so the other 22 pars from Ultimate DOOM/""retail"" are kept intact.","Potential changes to address issue #1355 but in short this is one (potential) way to add a new array containing the chex.exe par times. Default behaviour for chex.exe, if players happen to mess about and -warp or something into Ultimate DOOM levels, is for the DOOM music, pars, etc. to display, so the other 22 pars from Ultimate DOOM/""retail"" are kept intact.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1356,2021-03-03T06:25:38Z,2021-03-18T21:03:33Z,2021-03-20T20:31:49Z,MERGED,True,14,1,1,https://github.com/Acts19quiz,Add chex.exe par times for chex.wad.,8,[],https://github.com/chocolate-doom/chocolate-doom/pull/1356,https://github.com/fabiangreffrath,2,https://github.com/chocolate-doom/chocolate-doom/pull/1356#issuecomment-789518536,"Potential changes to address issue #1355 but in short this is one (potential) way to add a new array containing the chex.exe par times. Default behaviour for chex.exe, if players happen to mess about and -warp or something into Ultimate DOOM levels, is for the DOOM music, pars, etc. to display, so the other 22 pars from Ultimate DOOM/""retail"" are kept intact.","LGTM.
You could get away with a shorter array and less duplicate entries if you extended the check to e.g. if (gameversion == exe_chex && gameepisode == 1).
Also, why qpars[]? Wouldn't e.g. chexpars[] sound better somehow?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1356,2021-03-03T06:25:38Z,2021-03-18T21:03:33Z,2021-03-20T20:31:49Z,MERGED,True,14,1,1,https://github.com/Acts19quiz,Add chex.exe par times for chex.wad.,8,[],https://github.com/chocolate-doom/chocolate-doom/pull/1356,https://github.com/Acts19quiz,3,https://github.com/chocolate-doom/chocolate-doom/pull/1356#issuecomment-789832956,"Potential changes to address issue #1355 but in short this is one (potential) way to add a new array containing the chex.exe par times. Default behaviour for chex.exe, if players happen to mess about and -warp or something into Ultimate DOOM levels, is for the DOOM music, pars, etc. to display, so the other 22 pars from Ultimate DOOM/""retail"" are kept intact.","You could get away with a shorter array and less duplicate entries if you extended the check to e.g. if (gameversion == exe_chex && gameepisode == 1).

Duly noted. That's why I said ""one potential way"". :)

Also, why qpars[]? Wouldn't e.g. chexpars[] sound better somehow?

It would definitely be better. I was just keeping form with the (super) short array names (""pars"" for generic, ""cpars"" for commercial/DOOM II).

This should be static const. So should pars and cpars above but that should be a separate commit (and PR). Can dehacked change these? Based on a quick source inspection it would seem not in the current implementation.

Everything that can be done with DeHackEd/chex.deh has been done. Par time changing is exclusive to BEX/Boom extensions, which I think is outside the scope of Chocolate Doom.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1356,2021-03-03T06:25:38Z,2021-03-18T21:03:33Z,2021-03-20T20:31:49Z,MERGED,True,14,1,1,https://github.com/Acts19quiz,Add chex.exe par times for chex.wad.,8,[],https://github.com/chocolate-doom/chocolate-doom/pull/1356,https://github.com/fabiangreffrath,4,https://github.com/chocolate-doom/chocolate-doom/pull/1356#issuecomment-801471851,"Potential changes to address issue #1355 but in short this is one (potential) way to add a new array containing the chex.exe par times. Default behaviour for chex.exe, if players happen to mess about and -warp or something into Ultimate DOOM levels, is for the DOOM music, pars, etc. to display, so the other 22 pars from Ultimate DOOM/""retail"" are kept intact.",@Acts19quiz Are you going to work on the change requests?,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1356,2021-03-03T06:25:38Z,2021-03-18T21:03:33Z,2021-03-20T20:31:49Z,MERGED,True,14,1,1,https://github.com/Acts19quiz,Add chex.exe par times for chex.wad.,8,[],https://github.com/chocolate-doom/chocolate-doom/pull/1356,https://github.com/Acts19quiz,5,https://github.com/chocolate-doom/chocolate-doom/pull/1356#issuecomment-801506707,"Potential changes to address issue #1355 but in short this is one (potential) way to add a new array containing the chex.exe par times. Default behaviour for chex.exe, if players happen to mess about and -warp or something into Ultimate DOOM levels, is for the DOOM music, pars, etc. to display, so the other 22 pars from Ultimate DOOM/""retail"" are kept intact.","I had just assumed you'd either accept the pull request (an improbability since this is my first here) or if you liked the idea or concept of it, revise my revisions and use them in Choco proper (as it's a pull request for an open GPL project, I would of course be okay with that as per that little message the board here gave me when I filled out the form). Would you like for me to revise my PR here? I wouldn't know how to do that beyond making a new PR, though I could certainly give that a whack if that's what you want. Since I'm not familiar with the etiquette or procedures here, I wanted to defer to the maintainers on how they would have this handled.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1356,2021-03-03T06:25:38Z,2021-03-18T21:03:33Z,2021-03-20T20:31:49Z,MERGED,True,14,1,1,https://github.com/Acts19quiz,Add chex.exe par times for chex.wad.,8,[],https://github.com/chocolate-doom/chocolate-doom/pull/1356,https://github.com/fabiangreffrath,6,https://github.com/chocolate-doom/chocolate-doom/pull/1356#issuecomment-801676981,"Potential changes to address issue #1355 but in short this is one (potential) way to add a new array containing the chex.exe par times. Default behaviour for chex.exe, if players happen to mess about and -warp or something into Ultimate DOOM levels, is for the DOOM music, pars, etc. to display, so the other 22 pars from Ultimate DOOM/""retail"" are kept intact.","Choco being an open source project means that everybody is invited to contribute. It does not mean, in turn, that users present a rough idea and the devs do the rest. 😉 I always like see this a a ""Do-ocracy"": If you want something to change, care for it yourself. We have given you hints how to improve your pull request, so if you care enough about par times for Chex Quest (which you apparently do, else you wouldn't have done the first step by filing this request), please follow our advice.
Any change you commit to your own ""Acts19quiz_chex_partimes"" branch will modify this pull request once pushed to the repository on Github. Good luck!",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1356,2021-03-03T06:25:38Z,2021-03-18T21:03:33Z,2021-03-20T20:31:49Z,MERGED,True,14,1,1,https://github.com/Acts19quiz,Add chex.exe par times for chex.wad.,8,[],https://github.com/chocolate-doom/chocolate-doom/pull/1356,https://github.com/Acts19quiz,7,https://github.com/chocolate-doom/chocolate-doom/pull/1356#issuecomment-802103737,"Potential changes to address issue #1355 but in short this is one (potential) way to add a new array containing the chex.exe par times. Default behaviour for chex.exe, if players happen to mess about and -warp or something into Ultimate DOOM levels, is for the DOOM music, pars, etc. to display, so the other 22 pars from Ultimate DOOM/""retail"" are kept intact.","I'm aware of this, I'm currently setting up MSYS64 on my end so I can tinker around without tripping the Travis builder every time I want to tinker around.
Per other stuff, it's by no means at all that I want other people to do ""the rest"", dump a load off, etc. There appeared to be a minor disagreement on how to handle the array, so as much as anything else, apprehension stems from wanting you (all) to resolve things the way you want, and wanting to respect the way you want the code handled internally.
(also, I have amateur experience fiddling with id Tech 1 in C++, so while basic C logic is within my grasp, as primarily an armchair player like any other, if I come across something like say a complex rendering error in Crispy Doom, I'm outta luck and can only report, not pull--but that's another topic for another day)",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1356,2021-03-03T06:25:38Z,2021-03-18T21:03:33Z,2021-03-20T20:31:49Z,MERGED,True,14,1,1,https://github.com/Acts19quiz,Add chex.exe par times for chex.wad.,8,[],https://github.com/chocolate-doom/chocolate-doom/pull/1356,https://github.com/Acts19quiz,8,https://github.com/chocolate-doom/chocolate-doom/pull/1356#issuecomment-802229057,"Potential changes to address issue #1355 but in short this is one (potential) way to add a new array containing the chex.exe par times. Default behaviour for chex.exe, if players happen to mess about and -warp or something into Ultimate DOOM levels, is for the DOOM music, pars, etc. to display, so the other 22 pars from Ultimate DOOM/""retail"" are kept intact.","I ran into errors compiling with MSYS2 (Mingw32), possibly related to Crispy issue 425, but the archlinux archive only goes as far back as 2.0.9 for SDL2. That again, though, is another issue for another time. This time my commit is ready for review.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1356,2021-03-03T06:25:38Z,2021-03-18T21:03:33Z,2021-03-20T20:31:49Z,MERGED,True,14,1,1,https://github.com/Acts19quiz,Add chex.exe par times for chex.wad.,8,[],https://github.com/chocolate-doom/chocolate-doom/pull/1356,https://github.com/fabiangreffrath,9,https://github.com/chocolate-doom/chocolate-doom/pull/1356#issuecomment-802297454,"Potential changes to address issue #1355 but in short this is one (potential) way to add a new array containing the chex.exe par times. Default behaviour for chex.exe, if players happen to mess about and -warp or something into Ultimate DOOM levels, is for the DOOM music, pars, etc. to display, so the other 22 pars from Ultimate DOOM/""retail"" are kept intact.",Thank you!,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1356,2021-03-03T06:25:38Z,2021-03-18T21:03:33Z,2021-03-20T20:31:49Z,MERGED,True,14,1,1,https://github.com/Acts19quiz,Add chex.exe par times for chex.wad.,8,[],https://github.com/chocolate-doom/chocolate-doom/pull/1356,https://github.com/Acts19quiz,10,https://github.com/chocolate-doom/chocolate-doom/pull/1356#issuecomment-802301549,"Potential changes to address issue #1355 but in short this is one (potential) way to add a new array containing the chex.exe par times. Default behaviour for chex.exe, if players happen to mess about and -warp or something into Ultimate DOOM levels, is for the DOOM music, pars, etc. to display, so the other 22 pars from Ultimate DOOM/""retail"" are kept intact.","No problem. The idea behind doing this here is that it will eventually filter its way into child ports (e.g., Crispy), and hopefully the addressed issue #1355 will be checked by community input on the next official release just to double check that it will work in normal gameplay as it looks like the fix should.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1356,2021-03-03T06:25:38Z,2021-03-18T21:03:33Z,2021-03-20T20:31:49Z,MERGED,True,14,1,1,https://github.com/Acts19quiz,Add chex.exe par times for chex.wad.,8,[],https://github.com/chocolate-doom/chocolate-doom/pull/1356,https://github.com/fabiangreffrath,11,https://github.com/chocolate-doom/chocolate-doom/pull/1356#issuecomment-802632602,"Potential changes to address issue #1355 but in short this is one (potential) way to add a new array containing the chex.exe par times. Default behaviour for chex.exe, if players happen to mess about and -warp or something into Ultimate DOOM levels, is for the DOOM music, pars, etc. to display, so the other 22 pars from Ultimate DOOM/""retail"" are kept intact.","Just merged the commit into crispy, thanks again!",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1356,2021-03-03T06:25:38Z,2021-03-18T21:03:33Z,2021-03-20T20:31:49Z,MERGED,True,14,1,1,https://github.com/Acts19quiz,Add chex.exe par times for chex.wad.,8,[],https://github.com/chocolate-doom/chocolate-doom/pull/1356,https://github.com/turol,12,https://github.com/chocolate-doom/chocolate-doom/pull/1356#issuecomment-802697020,"Potential changes to address issue #1355 but in short this is one (potential) way to add a new array containing the chex.exe par times. Default behaviour for chex.exe, if players happen to mess about and -warp or something into Ultimate DOOM levels, is for the DOOM music, pars, etc. to display, so the other 22 pars from Ultimate DOOM/""retail"" are kept intact.","@Acts19quiz
As a followup can you make those arrays (all of them) static const?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1356,2021-03-03T06:25:38Z,2021-03-18T21:03:33Z,2021-03-20T20:31:49Z,MERGED,True,14,1,1,https://github.com/Acts19quiz,Add chex.exe par times for chex.wad.,8,[],https://github.com/chocolate-doom/chocolate-doom/pull/1356,https://github.com/Acts19quiz,13,https://github.com/chocolate-doom/chocolate-doom/pull/1356#issuecomment-803459174,"Potential changes to address issue #1355 but in short this is one (potential) way to add a new array containing the chex.exe par times. Default behaviour for chex.exe, if players happen to mess about and -warp or something into Ultimate DOOM levels, is for the DOOM music, pars, etc. to display, so the other 22 pars from Ultimate DOOM/""retail"" are kept intact.","I think changing the way the existing code works and numbers are stored is beyond the scope of this PR. As you mentioned, a new PR is probably in order for that (the one note I'll provide, possibly relevant, is that in testing Crispy Doom acknowledged BEX-extension par time additions, but not Chocolate Doom, though that appears to be a general [and intentional] lack of BEX support in Choco as opposed to anything BEX-specific).",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1357,2021-03-10T09:28:10Z,2021-03-10T19:19:06Z,2021-03-10T19:19:10Z,MERGED,True,8,4,1,https://github.com/fabiangreffrath,append a path delimiter to the default config dir on Windows,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1357,https://github.com/fabiangreffrath,1,https://github.com/chocolate-doom/chocolate-doom/pull/1357,https://www.doomworld.com/forum/topic/86366-chocolate-doom/?page=28&tab=comments#comment-2272910,https://www.doomworld.com/forum/topic/86366-chocolate-doom/?page=28&tab=comments#comment-2272910,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1357,2021-03-10T09:28:10Z,2021-03-10T19:19:06Z,2021-03-10T19:19:10Z,MERGED,True,8,4,1,https://github.com/fabiangreffrath,append a path delimiter to the default config dir on Windows,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1357,https://github.com/turol,2,https://github.com/chocolate-doom/chocolate-doom/pull/1357#issuecomment-795339515,https://www.doomworld.com/forum/topic/86366-chocolate-doom/?page=28&tab=comments#comment-2272910,M_DirName returns a new string which needs to be freed by the caller. You're now leaking it.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1357,2021-03-10T09:28:10Z,2021-03-10T19:19:06Z,2021-03-10T19:19:10Z,MERGED,True,8,4,1,https://github.com/fabiangreffrath,append a path delimiter to the default config dir on Windows,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1357,https://github.com/fabiangreffrath,3,https://github.com/chocolate-doom/chocolate-doom/pull/1357#issuecomment-795350103,https://www.doomworld.com/forum/topic/86366-chocolate-doom/?page=28&tab=comments#comment-2272910,"It was M_StringDuplicate("""") before the last (erroneous) commit, so at least we are not introducing a regression here.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1357,2021-03-10T09:28:10Z,2021-03-10T19:19:06Z,2021-03-10T19:19:10Z,MERGED,True,8,4,1,https://github.com/fabiangreffrath,append a path delimiter to the default config dir on Windows,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1357,https://github.com/chungy,4,https://github.com/chocolate-doom/chocolate-doom/pull/1357#issuecomment-795843792,https://www.doomworld.com/forum/topic/86366-chocolate-doom/?page=28&tab=comments#comment-2272910,"Seems to fix the basic issue while running under Wine, but it still leaves a ""savegames"" directory in the executable's directory rather than using it directly for saved games. That has been one of the features Chocolate Doom was explicit about, handling save games in the same manner as vanilla Doom while on Windows (the only platform where the DOS behavior still makes sense).",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1358,2021-03-12T14:24:03Z,2021-03-12T15:12:58Z,2021-03-12T15:18:43Z,MERGED,True,27,1,1,https://github.com/kraflab,Fix heretic coop demos,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1358,https://github.com/kraflab,1,https://github.com/chocolate-doom/chocolate-doom/pull/1358,"Fixes #1027
This netgame / netdemo handling code is copied over from doom/g_game.c - it was just missing in heretic's copy.
The reason the netgame = true and netdemo = true lines are split into separate if blocks is because of how G_InitNew in heretic works. It needs to know it's a netgame in order to spawn things correctly, but it also resets the demo playback globals, so they need to be set afterwords.","Fixes #1027
This netgame / netdemo handling code is copied over from doom/g_game.c - it was just missing in heretic's copy.
The reason the netgame = true and netdemo = true lines are split into separate if blocks is because of how G_InitNew in heretic works. It needs to know it's a netgame in order to spawn things correctly, but it also resets the demo playback globals, so they need to be set afterwords.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1360,2021-03-17T08:07:51Z,2021-03-18T14:03:30Z,2021-03-18T14:03:37Z,MERGED,True,21,11,5,https://github.com/fabiangreffrath,fix savegame directory on Windows,5,[],https://github.com/chocolate-doom/chocolate-doom/pull/1360,https://github.com/fabiangreffrath,1,https://github.com/chocolate-doom/chocolate-doom/pull/1360,"On Windows, we are supposed to put savegames into the current
directory instead of a ""savegames"" subdirectory unless the
-savedir parameter was given.
Hopefully fixes #1359 for good.","On Windows, we are supposed to put savegames into the current
directory instead of a ""savegames"" subdirectory unless the
-savedir parameter was given.
Hopefully fixes #1359 for good.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1360,2021-03-17T08:07:51Z,2021-03-18T14:03:30Z,2021-03-18T14:03:37Z,MERGED,True,21,11,5,https://github.com/fabiangreffrath,fix savegame directory on Windows,5,[],https://github.com/chocolate-doom/chocolate-doom/pull/1360,https://github.com/turol,2,https://github.com/chocolate-doom/chocolate-doom/pull/1360#issuecomment-801012892,"On Windows, we are supposed to put savegames into the current
directory instead of a ""savegames"" subdirectory unless the
-savedir parameter was given.
Hopefully fixes #1359 for good.","This is... extremely ugly. The behavior of GetDefaultConfigDir now depends on the platform. On win32 it will return a string ""owned"" by exedir in GetExeDir and on other platforms it will be owned by the caller. Comparing C strings by pointer like that is dangerous. In this case it might work since the other pointer might also have been returned by GetExeDir() but at the very least it requires comments about why it's safe and it might still produce false negatives.
I don't recommend merging this in its current state.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1360,2021-03-17T08:07:51Z,2021-03-18T14:03:30Z,2021-03-18T14:03:37Z,MERGED,True,21,11,5,https://github.com/fabiangreffrath,fix savegame directory on Windows,5,[],https://github.com/chocolate-doom/chocolate-doom/pull/1360,https://github.com/fabiangreffrath,3,https://github.com/chocolate-doom/chocolate-doom/pull/1360#issuecomment-801027222,"On Windows, we are supposed to put savegames into the current
directory instead of a ""savegames"" subdirectory unless the
-savedir parameter was given.
Hopefully fixes #1359 for good.","Hm, what if we turn exedir into a global variable, just like configdir?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1360,2021-03-17T08:07:51Z,2021-03-18T14:03:30Z,2021-03-18T14:03:37Z,MERGED,True,21,11,5,https://github.com/fabiangreffrath,fix savegame directory on Windows,5,[],https://github.com/chocolate-doom/chocolate-doom/pull/1360,https://github.com/turol,4,https://github.com/chocolate-doom/chocolate-doom/pull/1360#issuecomment-801034087,"On Windows, we are supposed to put savegames into the current
directory instead of a ""savegames"" subdirectory unless the
-savedir parameter was given.
Hopefully fixes #1359 for good.",That might help some if you can use it to get rid of GetExeDir.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1360,2021-03-17T08:07:51Z,2021-03-18T14:03:30Z,2021-03-18T14:03:37Z,MERGED,True,21,11,5,https://github.com/fabiangreffrath,fix savegame directory on Windows,5,[],https://github.com/chocolate-doom/chocolate-doom/pull/1360,https://github.com/fabiangreffrath,5,https://github.com/chocolate-doom/chocolate-doom/pull/1360#issuecomment-801045262,"On Windows, we are supposed to put savegames into the current
directory instead of a ""savegames"" subdirectory unless the
-savedir parameter was given.
Hopefully fixes #1359 for good.","Not entirely getting rid of it, the pointer has to be set somewhere...",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1360,2021-03-17T08:07:51Z,2021-03-18T14:03:30Z,2021-03-18T14:03:37Z,MERGED,True,21,11,5,https://github.com/fabiangreffrath,fix savegame directory on Windows,5,[],https://github.com/chocolate-doom/chocolate-doom/pull/1360,https://github.com/turol,6,https://github.com/chocolate-doom/chocolate-doom/pull/1360#issuecomment-801049237,"On Windows, we are supposed to put savegames into the current
directory instead of a ""savegames"" subdirectory unless the
-savedir parameter was given.
Hopefully fixes #1359 for good.",Don't make M_SetExeDir static and call it from main in i_main.c? That way we can be sure it's been called consistently. Also you still need to fix the compares. Either restore the strcmp or add comments explaining why it's comparing pointers and why it's safe. And this should be squashed into one commit.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1360,2021-03-17T08:07:51Z,2021-03-18T14:03:30Z,2021-03-18T14:03:37Z,MERGED,True,21,11,5,https://github.com/fabiangreffrath,fix savegame directory on Windows,5,[],https://github.com/chocolate-doom/chocolate-doom/pull/1360,https://github.com/turol,7,https://github.com/chocolate-doom/chocolate-doom/pull/1360#issuecomment-801942273,"On Windows, we are supposed to put savegames into the current
directory instead of a ""savegames"" subdirectory unless the
-savedir parameter was given.
Hopefully fixes #1359 for good.","Looks good to me. Did a quick test on Linux, seems to work. Now it requires a squash and maybe a review by someone else.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1360,2021-03-17T08:07:51Z,2021-03-18T14:03:30Z,2021-03-18T14:03:37Z,MERGED,True,21,11,5,https://github.com/fabiangreffrath,fix savegame directory on Windows,5,[],https://github.com/chocolate-doom/chocolate-doom/pull/1360,https://github.com/fabiangreffrath,8,https://github.com/chocolate-doom/chocolate-doom/pull/1360#issuecomment-801945064,"On Windows, we are supposed to put savegames into the current
directory instead of a ""savegames"" subdirectory unless the
-savedir parameter was given.
Hopefully fixes #1359 for good.","You just need to click the approve button, then I can squash-merge it myself.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1360,2021-03-17T08:07:51Z,2021-03-18T14:03:30Z,2021-03-18T14:03:37Z,MERGED,True,21,11,5,https://github.com/fabiangreffrath,fix savegame directory on Windows,5,[],https://github.com/chocolate-doom/chocolate-doom/pull/1360,https://github.com/fabiangreffrath,9,https://github.com/chocolate-doom/chocolate-doom/pull/1360#issuecomment-801954846,"On Windows, we are supposed to put savegames into the current
directory instead of a ""savegames"" subdirectory unless the
-savedir parameter was given.
Hopefully fixes #1359 for good.",Thanks!,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1363,2021-03-20T20:12:49Z,2021-03-20T21:06:06Z,2021-03-20T21:06:12Z,MERGED,True,3,3,1,https://github.com/fabiangreffrath,declare par time arrays as static const,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1363,https://github.com/fabiangreffrath,1,https://github.com/chocolate-doom/chocolate-doom/pull/1363,,,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1364,2021-03-24T02:37:24Z,2021-04-05T19:52:15Z,2021-11-12T18:54:23Z,MERGED,True,7,2,1,https://github.com/mikeday0,Fix max volume musicpack at startup,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1364,https://github.com/mikeday0,1,https://github.com/chocolate-doom/chocolate-doom/pull/1364,"Whenever I_SetMusicVolume is called, set the volume for both music_module and music_pack_module. Previously the music_pack_module volume would never get set at the first call of I_SetMusicVolume during initialization. Therefore, its volume would default to max.","Whenever I_SetMusicVolume is called, set the volume for both music_module and music_pack_module. Previously the music_pack_module volume would never get set at the first call of I_SetMusicVolume during initialization. Therefore, its volume would default to max.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1364,2021-03-24T02:37:24Z,2021-04-05T19:52:15Z,2021-11-12T18:54:23Z,MERGED,True,7,2,1,https://github.com/mikeday0,Fix max volume musicpack at startup,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1364,https://github.com/fabiangreffrath,2,https://github.com/chocolate-doom/chocolate-doom/pull/1364#issuecomment-813612709,"Whenever I_SetMusicVolume is called, set the volume for both music_module and music_pack_module. Previously the music_pack_module volume would never get set at the first call of I_SetMusicVolume during initialization. Therefore, its volume would default to max.","Finally understood the issue, thank you!",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1365,2021-04-06T09:06:02Z,2021-04-06T10:38:12Z,2021-04-06T10:55:02Z,MERGED,True,7,1,1,https://github.com/fabiangreffrath,textscreen: try to create a VSync enabled renderer first,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1365,https://github.com/fabiangreffrath,1,https://github.com/chocolate-doom/chocolate-doom/pull/1365,"Fall back to creating a software renderer only if that fails.
@vanfanel","Fall back to creating a software renderer only if that fails.
@vanfanel",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1365,2021-04-06T09:06:02Z,2021-04-06T10:38:12Z,2021-04-06T10:55:02Z,MERGED,True,7,1,1,https://github.com/fabiangreffrath,textscreen: try to create a VSync enabled renderer first,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1365,https://github.com/vanfanel,2,https://github.com/chocolate-doom/chocolate-doom/pull/1365#issuecomment-814026293,"Fall back to creating a software renderer only if that fails.
@vanfanel",@fabiangreffrath Good! Thanks :),True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1366,2021-04-06T09:26:38Z,2021-04-09T15:33:47Z,2021-08-18T08:58:50Z,MERGED,True,47,21,8,https://github.com/fabiangreffrath,add mouse button bindings for turning left/right,5,[],https://github.com/chocolate-doom/chocolate-doom/pull/1366,https://github.com/fabiangreffrath,1,https://github.com/chocolate-doom/chocolate-doom/pull/1366,,,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1366,2021-04-06T09:26:38Z,2021-04-09T15:33:47Z,2021-08-18T08:58:50Z,MERGED,True,47,21,8,https://github.com/fabiangreffrath,add mouse button bindings for turning left/right,5,[],https://github.com/chocolate-doom/chocolate-doom/pull/1366,https://github.com/AXDOOMER,2,https://github.com/chocolate-doom/chocolate-doom/pull/1366#issuecomment-814163110,,What's the use case for having mouse button bindings for turning left and right when the mouse is already a means of  turning left and right that's more accurate than buttons?,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1366,2021-04-06T09:26:38Z,2021-04-09T15:33:47Z,2021-08-18T08:58:50Z,MERGED,True,47,21,8,https://github.com/fabiangreffrath,add mouse button bindings for turning left/right,5,[],https://github.com/chocolate-doom/chocolate-doom/pull/1366,https://github.com/fabiangreffrath,3,https://github.com/chocolate-doom/chocolate-doom/pull/1366#issuecomment-814192456,,"I was asking the same, but there seems to be a demand for this:
fabiangreffrath#725",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1366,2021-04-06T09:26:38Z,2021-04-09T15:33:47Z,2021-08-18T08:58:50Z,MERGED,True,47,21,8,https://github.com/fabiangreffrath,add mouse button bindings for turning left/right,5,[],https://github.com/chocolate-doom/chocolate-doom/pull/1366,https://github.com/fragglet,4,https://github.com/chocolate-doom/chocolate-doom/pull/1366#issuecomment-814477901,,"This seems like a niche/unusual setup. I'm a bit hesitant about cluttering up the setup UI with mostly-useless (to most people) bindings like this. My suggestion would be to either not merge this (make it a Crispy feature if necessary) or add the feature, but not include it in the setup UI - for such obscure/niche cases it's reasonable to tell people to edit a .cfg file to get what they want.",True,"{'THUMBS_UP': ['https://github.com/AXDOOMER', 'https://github.com/turol', 'https://github.com/tpoppins']}"
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1366,2021-04-06T09:26:38Z,2021-04-09T15:33:47Z,2021-08-18T08:58:50Z,MERGED,True,47,21,8,https://github.com/fabiangreffrath,add mouse button bindings for turning left/right,5,[],https://github.com/chocolate-doom/chocolate-doom/pull/1366,https://github.com/fabiangreffrath,5,https://github.com/chocolate-doom/chocolate-doom/pull/1366#issuecomment-815653911,,"add the feature, but not include it in the setup UI

Alright, I have gone that way.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1366,2021-04-06T09:26:38Z,2021-04-09T15:33:47Z,2021-08-18T08:58:50Z,MERGED,True,47,21,8,https://github.com/fabiangreffrath,add mouse button bindings for turning left/right,5,[],https://github.com/chocolate-doom/chocolate-doom/pull/1366,https://github.com/fragglet,6,https://github.com/chocolate-doom/chocolate-doom/pull/1366#issuecomment-816767515,,Thanks!,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1368,2021-04-07T18:50:04Z,,2021-04-07T21:21:13Z,OPEN,False,52,3,5,https://github.com/vanfanel,[WIP] Add option to use an axis to fire (triggers).,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1368,https://github.com/vanfanel,1,https://github.com/chocolate-doom/chocolate-doom/pull/1368,,,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1371,2021-04-17T23:39:13Z,2021-04-18T19:40:48Z,2021-08-18T09:00:11Z,MERGED,True,2,0,1,https://github.com/mfrancis95,Add #1037 to 3.1.0 changelog,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1371,https://github.com/mfrancis95,1,https://github.com/chocolate-doom/chocolate-doom/pull/1371,Figured we should start preparing for a new release and get the changelog up-to-date as a lot has happened since 2018.,Figured we should start preparing for a new release and get the changelog up-to-date as a lot has happened since 2018.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1372,2021-04-25T04:54:52Z,2021-04-25T04:55:02Z,2021-04-25T04:58:09Z,CLOSED,False,21,0,1,https://github.com/mfrancis95,Patch2,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/1372,https://github.com/mfrancis95,1,https://github.com/chocolate-doom/chocolate-doom/pull/1372,,,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1374,2021-04-28T22:56:18Z,2021-05-04T16:12:56Z,2021-05-04T16:54:06Z,MERGED,True,35,0,1,https://github.com/mfrancis95,Onboard GitHub Actions,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1374,https://github.com/mfrancis95,1,https://github.com/chocolate-doom/chocolate-doom/pull/1374,"Use the same Ubuntu version as Travis
Run cppcheck
Build with clang and gcc

Let me know if you have any questions, comments, concerns.","Use the same Ubuntu version as Travis
Run cppcheck
Build with clang and gcc

Let me know if you have any questions, comments, concerns.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1374,2021-04-28T22:56:18Z,2021-05-04T16:12:56Z,2021-05-04T16:54:06Z,MERGED,True,35,0,1,https://github.com/mfrancis95,Onboard GitHub Actions,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1374,https://github.com/mfrancis95,2,https://github.com/chocolate-doom/chocolate-doom/pull/1374#issuecomment-832092014,"Use the same Ubuntu version as Travis
Run cppcheck
Build with clang and gcc

Let me know if you have any questions, comments, concerns.",Hey @fragglet one more thing. Does this building need to be enabled for c++-clean and vanilla-net as well? Saw those in .travis.yml but wasn't sure what the status is on those branches.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1377,2021-05-10T17:14:13Z,2021-05-23T22:50:00Z,2021-05-23T22:50:00Z,MERGED,True,16,7,1,https://github.com/mfrancis95,GitHub Actions: Move cppcheck into its own job,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1377,https://github.com/mfrancis95,1,https://github.com/chocolate-doom/chocolate-doom/pull/1377,Also replace the get-package action with a manual apt-get update and install since it stopped working.,Also replace the get-package action with a manual apt-get update and install since it stopped working.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1380,2021-06-29T02:16:26Z,2021-07-19T18:49:47Z,2021-11-12T18:54:24Z,MERGED,True,5,4,2,https://github.com/mikeday0,Fix PC speaker emulation when using OPL,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1380,https://github.com/mikeday0,1,https://github.com/chocolate-doom/chocolate-doom/pull/1380,"Replace Mix_SetPostMix calls with Mix_RegisterEffect calls. Mix_SetPostMix allows only one callback to be registered, while Mix_RegisterEffect can handle multiple.
This fixes an issue where PC speaker effects would not work when used simultaneously with OPL emulation.
Fixes #1184.","Replace Mix_SetPostMix calls with Mix_RegisterEffect calls. Mix_SetPostMix allows only one callback to be registered, while Mix_RegisterEffect can handle multiple.
This fixes an issue where PC speaker effects would not work when used simultaneously with OPL emulation.
Fixes #1184.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1380,2021-06-29T02:16:26Z,2021-07-19T18:49:47Z,2021-11-12T18:54:24Z,MERGED,True,5,4,2,https://github.com/mikeday0,Fix PC speaker emulation when using OPL,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1380,https://github.com/fabiangreffrath,2,https://github.com/chocolate-doom/chocolate-doom/pull/1380#issuecomment-871355841,"Replace Mix_SetPostMix calls with Mix_RegisterEffect calls. Mix_SetPostMix allows only one callback to be registered, while Mix_RegisterEffect can handle multiple.
This fixes an issue where PC speaker effects would not work when used simultaneously with OPL emulation.
Fixes #1184.","For some reason one of the CI checks is still pending, so this cannot get merged.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1380,2021-06-29T02:16:26Z,2021-07-19T18:49:47Z,2021-11-12T18:54:24Z,MERGED,True,5,4,2,https://github.com/mikeday0,Fix PC speaker emulation when using OPL,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1380,https://github.com/mikeday0,3,https://github.com/chocolate-doom/chocolate-doom/pull/1380#issuecomment-871364820,"Replace Mix_SetPostMix calls with Mix_RegisterEffect calls. Mix_SetPostMix allows only one callback to be registered, while Mix_RegisterEffect can handle multiple.
This fixes an issue where PC speaker effects would not work when used simultaneously with OPL emulation.
Fixes #1184.","For some reason one of the CI checks is still pending, so this cannot get merged.

No worries. I see from recent commits that you guys are in the process of changing to GH Actions. I'm guessing it has something to do with that? Let me know if there's anything I can do on my side to help with the debug effort.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1380,2021-06-29T02:16:26Z,2021-07-19T18:49:47Z,2021-11-12T18:54:24Z,MERGED,True,5,4,2,https://github.com/mikeday0,Fix PC speaker emulation when using OPL,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1380,https://github.com/fabiangreffrath,4,https://github.com/chocolate-doom/chocolate-doom/pull/1380#issuecomment-871372096,"Replace Mix_SetPostMix calls with Mix_RegisterEffect calls. Mix_SetPostMix allows only one callback to be registered, while Mix_RegisterEffect can handle multiple.
This fixes an issue where PC speaker effects would not work when used simultaneously with OPL emulation.
Fixes #1184.",@fragglet Could you merge this?,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1380,2021-06-29T02:16:26Z,2021-07-19T18:49:47Z,2021-11-12T18:54:24Z,MERGED,True,5,4,2,https://github.com/mikeday0,Fix PC speaker emulation when using OPL,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1380,https://github.com/fragglet,5,https://github.com/chocolate-doom/chocolate-doom/pull/1380#issuecomment-882777426,"Replace Mix_SetPostMix calls with Mix_RegisterEffect calls. Mix_SetPostMix allows only one callback to be registered, while Mix_RegisterEffect can handle multiple.
This fixes an issue where PC speaker effects would not work when used simultaneously with OPL emulation.
Fixes #1184.",Sorry for radio silence. I've removed the travis-ci.org hooks which are now dead.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1382,2021-07-23T14:11:27Z,2021-07-25T19:55:34Z,2021-07-25T21:13:11Z,MERGED,True,27,1,1,https://github.com/kraflab,Fix hexen coop demo playback,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1382,https://github.com/kraflab,1,https://github.com/chocolate-doom/chocolate-doom/pull/1382,"See #1358
cc @fabiangreffrath","See #1358
cc @fabiangreffrath",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1382,2021-07-23T14:11:27Z,2021-07-25T19:55:34Z,2021-07-25T21:13:11Z,MERGED,True,27,1,1,https://github.com/kraflab,Fix hexen coop demo playback,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1382,https://github.com/fragglet,2,https://github.com/chocolate-doom/chocolate-doom/pull/1382#issuecomment-886249888,"See #1358
cc @fabiangreffrath",Thanks.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1383,2021-07-23T14:33:06Z,,2021-07-27T06:47:20Z,OPEN,False,27,9,1,https://github.com/kraflab,Fix hexen P_LookForPlayers desync,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1383,https://github.com/kraflab,1,https://github.com/chocolate-doom/chocolate-doom/pull/1383,This fixes 7 desyncing demos.,This fixes 7 desyncing demos.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1384,2021-07-23T17:51:04Z,,2021-07-27T11:06:15Z,OPEN,False,60,0,2,https://github.com/kraflab,Add -consoleplayer for hexen / heretic,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1384,https://github.com/kraflab,1,https://github.com/chocolate-doom/chocolate-doom/pull/1384,"Hexen and heretic don't store the console player in the demo for coop runs, so demo playback always picks the first player. This PR adds -consoleplayer as a command-line option to manually set the console player.","Hexen and heretic don't store the console player in the demo for coop runs, so demo playback always picks the first player. This PR adds -consoleplayer as a command-line option to manually set the console player.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1385,2021-07-29T18:52:20Z,2021-08-18T13:45:15Z,2021-09-14T16:59:12Z,MERGED,True,23,23,8,https://github.com/jrtc27,Fixes to support CHERI/Morello,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/1385,https://github.com/jrtc27,1,https://github.com/chocolate-doom/chocolate-doom/pull/1385,"This is needed to support CHERI, and thus Arm's experimental Morello prototype, where pointers are implemented using unforgeable capabilities that include bounds and permissions metadata to provide fine-grained spatial and referential memory safety, as well as revocation by sweeping memory to provide heap temporal memory safety.
The middle commit is what is strictly necessary to support CHERI. The first commit is an issue I found trying to do out-of-tree builds. The final commit is additional cleanup that I noticed could be done for efficiency and to better convey programmer intent when I was sweeping through the codebase looking for all uses of PRIiPTR/PRIuPTR (which, it turns out, there are now none of, as they were all either wrong or for unnecessary uses of intptr_t).","This is needed to support CHERI, and thus Arm's experimental Morello prototype, where pointers are implemented using unforgeable capabilities that include bounds and permissions metadata to provide fine-grained spatial and referential memory safety, as well as revocation by sweeping memory to provide heap temporal memory safety.
The middle commit is what is strictly necessary to support CHERI. The first commit is an issue I found trying to do out-of-tree builds. The final commit is additional cleanup that I noticed could be done for efficiency and to better convey programmer intent when I was sweeping through the codebase looking for all uses of PRIiPTR/PRIuPTR (which, it turns out, there are now none of, as they were all either wrong or for unnecessary uses of intptr_t).",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1385,2021-07-29T18:52:20Z,2021-08-18T13:45:15Z,2021-09-14T16:59:12Z,MERGED,True,23,23,8,https://github.com/jrtc27,Fixes to support CHERI/Morello,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/1385,https://github.com/fabiangreffrath,2,https://github.com/chocolate-doom/chocolate-doom/pull/1385#issuecomment-889673021,"This is needed to support CHERI, and thus Arm's experimental Morello prototype, where pointers are implemented using unforgeable capabilities that include bounds and permissions metadata to provide fine-grained spatial and referential memory safety, as well as revocation by sweeping memory to provide heap temporal memory safety.
The middle commit is what is strictly necessary to support CHERI. The first commit is an issue I found trying to do out-of-tree builds. The final commit is additional cleanup that I noticed could be done for efficiency and to better convey programmer intent when I was sweeping through the codebase looking for all uses of PRIiPTR/PRIuPTR (which, it turns out, there are now none of, as they were all either wrong or for unnecessary uses of intptr_t).","Thus, use the correct C99 format strings for these.

Does this mean this raises our requirements WRT minimum supported C standard by the compiler?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1385,2021-07-29T18:52:20Z,2021-08-18T13:45:15Z,2021-09-14T16:59:12Z,MERGED,True,23,23,8,https://github.com/jrtc27,Fixes to support CHERI/Morello,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/1385,https://github.com/jrtc27,3,https://github.com/chocolate-doom/chocolate-doom/pull/1385#issuecomment-889896775,"This is needed to support CHERI, and thus Arm's experimental Morello prototype, where pointers are implemented using unforgeable capabilities that include bounds and permissions metadata to provide fine-grained spatial and referential memory safety, as well as revocation by sweeping memory to provide heap temporal memory safety.
The middle commit is what is strictly necessary to support CHERI. The first commit is an issue I found trying to do out-of-tree builds. The final commit is additional cleanup that I noticed could be done for efficiency and to better convey programmer intent when I was sweeping through the codebase looking for all uses of PRIiPTR/PRIuPTR (which, it turns out, there are now none of, as they were all either wrong or for unnecessary uses of intptr_t).","Thus, use the correct C99 format strings for these.

Does this mean this raises our requirements WRT minimum supported C standard by the compiler?

HACKING.md says:

Use Doom’s byte data type for byte data. int is assumed to be a 32-bit integer, and short is a 16-bit integer. You can also use the ISO C99 data types: intN_t and uintN_t where N is 8, 16, 32, 64.

intptr_t is already used all over the place, as was PRIiPTR/PRIuPTR, all of which are also C99 additions. So Chocolate Doom is already relying on having a C99 compiler.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1385,2021-07-29T18:52:20Z,2021-08-18T13:45:15Z,2021-09-14T16:59:12Z,MERGED,True,23,23,8,https://github.com/jrtc27,Fixes to support CHERI/Morello,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/1385,https://github.com/jrtc27,4,https://github.com/chocolate-doom/chocolate-doom/pull/1385#issuecomment-901125971,"This is needed to support CHERI, and thus Arm's experimental Morello prototype, where pointers are implemented using unforgeable capabilities that include bounds and permissions metadata to provide fine-grained spatial and referential memory safety, as well as revocation by sweeping memory to provide heap temporal memory safety.
The middle commit is what is strictly necessary to support CHERI. The first commit is an issue I found trying to do out-of-tree builds. The final commit is additional cleanup that I noticed could be done for efficiency and to better convey programmer intent when I was sweeping through the codebase looking for all uses of PRIiPTR/PRIuPTR (which, it turns out, there are now none of, as they were all either wrong or for unnecessary uses of intptr_t).",Ping?,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1385,2021-07-29T18:52:20Z,2021-08-18T13:45:15Z,2021-09-14T16:59:12Z,MERGED,True,23,23,8,https://github.com/jrtc27,Fixes to support CHERI/Morello,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/1385,https://github.com/drfrag666,5,https://github.com/chocolate-doom/chocolate-doom/pull/1385#issuecomment-919082204,"This is needed to support CHERI, and thus Arm's experimental Morello prototype, where pointers are implemented using unforgeable capabilities that include bounds and permissions metadata to provide fine-grained spatial and referential memory safety, as well as revocation by sweeping memory to provide heap temporal memory safety.
The middle commit is what is strictly necessary to support CHERI. The first commit is an issue I found trying to do out-of-tree builds. The final commit is additional cleanup that I noticed could be done for efficiency and to better convey programmer intent when I was sweeping through the codebase looking for all uses of PRIiPTR/PRIuPTR (which, it turns out, there are now none of, as they were all either wrong or for unnecessary uses of intptr_t).","No, i get several warnings with tdm-gcc 5.1 (MinGW) and full C99 support was added recently in VS i believe.
BTW i don't even know what CHERI is.
C:\DEV\rude\src\doom\r_plane.c|417|warning: unknown conversion type character 't' in format [-Wformat=]|
C:\DEV\rude\src\i_system.c|346|warning: unknown conversion type character 'z' in format [-Wformat=]|",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1385,2021-07-29T18:52:20Z,2021-08-18T13:45:15Z,2021-09-14T16:59:12Z,MERGED,True,23,23,8,https://github.com/jrtc27,Fixes to support CHERI/Morello,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/1385,https://github.com/jrtc27,6,https://github.com/chocolate-doom/chocolate-doom/pull/1385#issuecomment-919234015,"This is needed to support CHERI, and thus Arm's experimental Morello prototype, where pointers are implemented using unforgeable capabilities that include bounds and permissions metadata to provide fine-grained spatial and referential memory safety, as well as revocation by sweeping memory to provide heap temporal memory safety.
The middle commit is what is strictly necessary to support CHERI. The first commit is an issue I found trying to do out-of-tree builds. The final commit is additional cleanup that I noticed could be done for efficiency and to better convey programmer intent when I was sweeping through the codebase looking for all uses of PRIiPTR/PRIuPTR (which, it turns out, there are now none of, as they were all either wrong or for unnecessary uses of intptr_t).","No, i get several warnings with tdm-gcc 5.1 (MinGW) and full C99 support was added recently in VS i believe.
BTW i don't even know what CHERI is.
C:\DEV\rude\src\doom\r_plane.c|417|warning: unknown conversion type character 't' in format [-Wformat=]|
C:\DEV\rude\src\i_system.c|346|warning: unknown conversion type character 'z' in format [-Wformat=]|


It works in the oldest version of MSVC available on godbolt.org (which requires using the Wine versions; the true Windows versions only go back to 2017 Update 7 there, which supports both length modifiers, and for the Wine versions it goes back to 2015 Update 3 which still supports both), so it's supported at least as far back as 2015 Update 3. I don't know at what point support was added but I don't think that's unreasonable to require for MSVC.
Clang support goes back to at least 3.0 (oldest godbolt.org has, released in 2011). GCC support goes back to at least 4.1.2 (oldest godbolt.org has, released in 2007). So I'm not sure what's up with your MinGW compiler but it sure isn't GCC 5.1.
So I'm not sure what the right path is here. From my point of view, the code as written was wrong and is now correct, relying on C99 from 22 years ago, with all major compilers supporting it from at least 6 years ago, possibly longer for MSVC, and much longer for the Unix compilers. The code base already relied on C99 support in various places, it just so happened this feature was not one that was required until now, and it seems that somehow you have a very confused GCC 5.1 that thinks it's more than one whole major version older than it is. I imagine adding macros for these that can be defined to something else for your compiler would be accepted, but I don't know how to identify your broken compiler.
As for what CHERI is, the most relevant page is probably that for Arm's Morello program (https://developer.arm.com/architectures/cpu-architecture/a-profile/morello), which is a prototype (with real silicon; around 1000 developer boards with quad-core processors are being produced) of bringing CHERI to AArch64 and a revised version will likely be included in future official versions of AArch64 should the program prove successful.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1385,2021-07-29T18:52:20Z,2021-08-18T13:45:15Z,2021-09-14T16:59:12Z,MERGED,True,23,23,8,https://github.com/jrtc27,Fixes to support CHERI/Morello,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/1385,https://github.com/drfrag666,7,https://github.com/chocolate-doom/chocolate-doom/pull/1385#issuecomment-919339343,"This is needed to support CHERI, and thus Arm's experimental Morello prototype, where pointers are implemented using unforgeable capabilities that include bounds and permissions metadata to provide fine-grained spatial and referential memory safety, as well as revocation by sweeping memory to provide heap temporal memory safety.
The middle commit is what is strictly necessary to support CHERI. The first commit is an issue I found trying to do out-of-tree builds. The final commit is additional cleanup that I noticed could be done for efficiency and to better convey programmer intent when I was sweeping through the codebase looking for all uses of PRIiPTR/PRIuPTR (which, it turns out, there are now none of, as they were all either wrong or for unnecessary uses of intptr_t).","No big deal but for me it's inconvenient to update the compiler for my project, it was a well known compiler included with Code::Blocks 17.12 and it was based on gcc 5.1.0 so i don't know what's going on. I normally use VS 2017 for C++.
So i'll revert that commit in my fork i guess.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1386,2021-08-06T04:12:27Z,2021-09-04T13:20:10Z,2021-11-12T18:54:27Z,MERGED,True,28,8,1,https://github.com/mikeday0,deh: Handle orphan carriage returns,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1386,https://github.com/mikeday0,1,https://github.com/chocolate-doom/chocolate-doom/pull/1386,"Previously, the DeHacked parsing filtered out any carriage return (\r) characters. The assumption is that they will always be paired with linefeed characters (\n). However, there exist DeHacked substitution strings which contain ""orphan"" carriage returns which do not have adjoining linefeeds. If the parser encounters such a string, there will be a mismatch in the character count and this can break the parsing for all lines thereafter.
When encountering carriage returns during DeHacked parsing, check the next character to see if it's a linefeed. If so, filter out the \r and return the \n as before. If it's not a linefeed, return the ""orphan"" \r.
This has not been subject to much testing, but it seems to work on the ""Doom 2 In Spain Only"" deh file that first created the issue.
Fixes #1375.","Previously, the DeHacked parsing filtered out any carriage return (\r) characters. The assumption is that they will always be paired with linefeed characters (\n). However, there exist DeHacked substitution strings which contain ""orphan"" carriage returns which do not have adjoining linefeeds. If the parser encounters such a string, there will be a mismatch in the character count and this can break the parsing for all lines thereafter.
When encountering carriage returns during DeHacked parsing, check the next character to see if it's a linefeed. If so, filter out the \r and return the \n as before. If it's not a linefeed, return the ""orphan"" \r.
This has not been subject to much testing, but it seems to work on the ""Doom 2 In Spain Only"" deh file that first created the issue.
Fixes #1375.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1386,2021-08-06T04:12:27Z,2021-09-04T13:20:10Z,2021-11-12T18:54:27Z,MERGED,True,28,8,1,https://github.com/mikeday0,deh: Handle orphan carriage returns,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1386,https://github.com/turol,2,https://github.com/chocolate-doom/chocolate-doom/pull/1386#issuecomment-906234934,"Previously, the DeHacked parsing filtered out any carriage return (\r) characters. The assumption is that they will always be paired with linefeed characters (\n). However, there exist DeHacked substitution strings which contain ""orphan"" carriage returns which do not have adjoining linefeeds. If the parser encounters such a string, there will be a mismatch in the character count and this can break the parsing for all lines thereafter.
When encountering carriage returns during DeHacked parsing, check the next character to see if it's a linefeed. If so, filter out the \r and return the \n as before. If it's not a linefeed, return the ""orphan"" \r.
This has not been subject to much testing, but it seems to work on the ""Doom 2 In Spain Only"" deh file that first created the issue.
Fixes #1375.","Have you tested this with other .deh files? It looks right to me but the code is rather complex because it can read from either a buffer or a file. A better solution would be to read the whole .deh into a buffer, do the necessary conversion first and only then parse it. On modern computers memory use shouldn't be a problem.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1386,2021-08-06T04:12:27Z,2021-09-04T13:20:10Z,2021-11-12T18:54:27Z,MERGED,True,28,8,1,https://github.com/mikeday0,deh: Handle orphan carriage returns,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1386,https://github.com/mikeday0,3,https://github.com/chocolate-doom/chocolate-doom/pull/1386#issuecomment-906754707,"Previously, the DeHacked parsing filtered out any carriage return (\r) characters. The assumption is that they will always be paired with linefeed characters (\n). However, there exist DeHacked substitution strings which contain ""orphan"" carriage returns which do not have adjoining linefeeds. If the parser encounters such a string, there will be a mismatch in the character count and this can break the parsing for all lines thereafter.
When encountering carriage returns during DeHacked parsing, check the next character to see if it's a linefeed. If so, filter out the \r and return the \n as before. If it's not a linefeed, return the ""orphan"" \r.
This has not been subject to much testing, but it seems to work on the ""Doom 2 In Spain Only"" deh file that first created the issue.
Fixes #1375.","Thank you for your comments! I did check out a few (maybe 3 or 4) other .deh files. There was no regression that I observed.
I will size up the effort involved in buffering up the .deh file. My attempt at a fix here was intended to be low impact and not too disruptive to the existing code.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1387,2021-08-14T03:23:01Z,2021-08-24T18:36:35Z,2021-11-12T18:54:35Z,MERGED,True,26,0,4,https://github.com/mikeday0,Set soundfont path directly from Chocolate,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/1387,https://github.com/mikeday0,1,https://github.com/chocolate-doom/chocolate-doom/pull/1387,"As a convenience to the user, allow them to specify the path their preferred soundfont file in the setup program. If a soundfont path is provided, pass this to the SDL Mixer FluidSynth backend via Mix_SetSoundFonts. SDL Mixer assigns higher priority to programatically-set soundfont paths, so this avoids the problem where a soundfont path set by environment variable gets overruled by a default OS path or other compile-time path.
As a bonus this also eliminates the need for users to mess around with environment variables, which should lead to less friction in getting FluidSynth up and working.","As a convenience to the user, allow them to specify the path their preferred soundfont file in the setup program. If a soundfont path is provided, pass this to the SDL Mixer FluidSynth backend via Mix_SetSoundFonts. SDL Mixer assigns higher priority to programatically-set soundfont paths, so this avoids the problem where a soundfont path set by environment variable gets overruled by a default OS path or other compile-time path.
As a bonus this also eliminates the need for users to mess around with environment variables, which should lead to less friction in getting FluidSynth up and working.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1387,2021-08-14T03:23:01Z,2021-08-24T18:36:35Z,2021-11-12T18:54:35Z,MERGED,True,26,0,4,https://github.com/mikeday0,Set soundfont path directly from Chocolate,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/1387,https://github.com/mikeday0,2,https://github.com/chocolate-doom/chocolate-doom/pull/1387#issuecomment-963784365,"As a convenience to the user, allow them to specify the path their preferred soundfont file in the setup program. If a soundfont path is provided, pass this to the SDL Mixer FluidSynth backend via Mix_SetSoundFonts. SDL Mixer assigns higher priority to programatically-set soundfont paths, so this avoids the problem where a soundfont path set by environment variable gets overruled by a default OS path or other compile-time path.
As a bonus this also eliminates the need for users to mess around with environment variables, which should lead to less friction in getting FluidSynth up and working.","Sorry for the trouble, but I found a small bug with my implementation. If you run the setup tool and the fluidsynth_sf_path variable is not present in the config file, the default value which gets written to fluidsynth_sf_path is the text (null), not an empty string as expected. The fix is simple:
diff --git a/src/setup/sound.c b/src/setup/sound.c
index b1bde41d..57b5f327 100644
--- a/src/setup/sound.c
+++ b/src/setup/sound.c
@@ -247,6 +247,7 @@ void BindSoundVariables(void)
     music_pack_path = M_StringDuplicate("""");
     timidity_cfg_path = M_StringDuplicate("""");
     gus_patch_path = M_StringDuplicate("""");
+    fluidsynth_sf_path = M_StringDuplicate("""");
 
     // All versions of Heretic and Hexen did pitch-shifting.
     // Most versions of Doom did not and Strife never did.
I am happy to submit this as a PR but if a maintainer would like to commit the fix directly please do so.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1387,2021-08-14T03:23:01Z,2021-08-24T18:36:35Z,2021-11-12T18:54:35Z,MERGED,True,26,0,4,https://github.com/mikeday0,Set soundfont path directly from Chocolate,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/1387,https://github.com/fragglet,3,https://github.com/chocolate-doom/chocolate-doom/pull/1387#issuecomment-965324385,"As a convenience to the user, allow them to specify the path their preferred soundfont file in the setup program. If a soundfont path is provided, pass this to the SDL Mixer FluidSynth backend via Mix_SetSoundFonts. SDL Mixer assigns higher priority to programatically-set soundfont paths, so this avoids the problem where a soundfont path set by environment variable gets overruled by a default OS path or other compile-time path.
As a bonus this also eliminates the need for users to mess around with environment variables, which should lead to less friction in getting FluidSynth up and working.",Please do submit a PR!,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1388,2021-08-28T14:10:54Z,2021-09-07T15:21:47Z,2021-09-07T15:21:50Z,MERGED,True,18,10,5,https://github.com/turol,Const correctness fixes,9,[],https://github.com/chocolate-doom/chocolate-doom/pull/1388,https://github.com/turol,1,https://github.com/chocolate-doom/chocolate-doom/pull/1388,"Mostly trivial. Some notes:
iwad_dirs can contain both constants and allocated strings. Making it const prevents freeing them but we don't care about that kind of leak since a pointer to them still exists. Someone could refactor it the be correctly freed later (by making all of the strings allocated) if they want.
The hack in I_InitTimidityConfig is silly but apparently required for correct usage of putenv.
The end messages in Strife appear to be unused. Should I just remove them instead?","Mostly trivial. Some notes:
iwad_dirs can contain both constants and allocated strings. Making it const prevents freeing them but we don't care about that kind of leak since a pointer to them still exists. Someone could refactor it the be correctly freed later (by making all of the strings allocated) if they want.
The hack in I_InitTimidityConfig is silly but apparently required for correct usage of putenv.
The end messages in Strife appear to be unused. Should I just remove them instead?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1388,2021-08-28T14:10:54Z,2021-09-07T15:21:47Z,2021-09-07T15:21:50Z,MERGED,True,18,10,5,https://github.com/turol,Const correctness fixes,9,[],https://github.com/chocolate-doom/chocolate-doom/pull/1388,https://github.com/turol,2,https://github.com/chocolate-doom/chocolate-doom/pull/1388#issuecomment-914110775,"Mostly trivial. Some notes:
iwad_dirs can contain both constants and allocated strings. Making it const prevents freeing them but we don't care about that kind of leak since a pointer to them still exists. Someone could refactor it the be correctly freed later (by making all of the strings allocated) if they want.
The hack in I_InitTimidityConfig is silly but apparently required for correct usage of putenv.
The end messages in Strife appear to be unused. Should I just remove them instead?",@fabiangreffrath ping,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1390,2021-08-31T10:47:18Z,2022-03-11T16:04:49Z,2022-03-12T11:42:42Z,MERGED,True,36,1,1,https://github.com/fabiangreffrath,convert first non-digit to locale's decimal in float value parsing,5,[],https://github.com/chocolate-doom/chocolate-doom/pull/1390,https://github.com/fabiangreffrath,1,https://github.com/chocolate-doom/chocolate-doom/pull/1390,"Different locales use different characters as decimal separators.
Since the currently used locale isn't always under our own control
(c.f. fabiangreffrath#620) this
commit makes sure to translate the first non-digit character in a
string that is going to get parsed as a float value into the current
locale's decimal separator.
Fixes fabiangreffrath#758.","Different locales use different characters as decimal separators.
Since the currently used locale isn't always under our own control
(c.f. fabiangreffrath#620) this
commit makes sure to translate the first non-digit character in a
string that is going to get parsed as a float value into the current
locale's decimal separator.
Fixes fabiangreffrath#758.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1390,2021-08-31T10:47:18Z,2022-03-11T16:04:49Z,2022-03-12T11:42:42Z,MERGED,True,36,1,1,https://github.com/fabiangreffrath,convert first non-digit to locale's decimal in float value parsing,5,[],https://github.com/chocolate-doom/chocolate-doom/pull/1390,https://github.com/turol,2,https://github.com/chocolate-doom/chocolate-doom/pull/1390#issuecomment-912973687,"Different locales use different characters as decimal separators.
Since the currently used locale isn't always under our own control
(c.f. fabiangreffrath#620) this
commit makes sure to translate the first non-digit character in a
string that is going to get parsed as a float value into the current
locale's decimal separator.
Fixes fabiangreffrath#758.","This is a nasty hack. Isn't there a better way? C++17 has from_chars, is there a pure C implementation we could use? Or any kind of portable C float parsing routine we could borrow from somewhere.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1390,2021-08-31T10:47:18Z,2022-03-11T16:04:49Z,2022-03-12T11:42:42Z,MERGED,True,36,1,1,https://github.com/fabiangreffrath,convert first non-digit to locale's decimal in float value parsing,5,[],https://github.com/chocolate-doom/chocolate-doom/pull/1390,https://github.com/fabiangreffrath,3,https://github.com/chocolate-doom/chocolate-doom/pull/1390#issuecomment-913008490,"Different locales use different characters as decimal separators.
Since the currently used locale isn't always under our own control
(c.f. fabiangreffrath#620) this
commit makes sure to translate the first non-digit character in a
string that is going to get parsed as a float value into the current
locale's decimal separator.
Fixes fabiangreffrath#758.","This is a nasty hack.

Never claimed anything else. 😉",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1390,2021-08-31T10:47:18Z,2022-03-11T16:04:49Z,2022-03-12T11:42:42Z,MERGED,True,36,1,1,https://github.com/fabiangreffrath,convert first non-digit to locale's decimal in float value parsing,5,[],https://github.com/chocolate-doom/chocolate-doom/pull/1390,https://github.com/turol,4,https://github.com/chocolate-doom/chocolate-doom/pull/1390#issuecomment-914405045,"Different locales use different characters as decimal separators.
Since the currently used locale isn't always under our own control
(c.f. fabiangreffrath#620) this
commit makes sure to translate the first non-digit character in a
string that is going to get parsed as a float value into the current
locale's decimal separator.
Fixes fabiangreffrath#758.","I couldn't find any string to float conversion algorithms in C. There's this for C++: https://github.com/fastfloat/fast_float. Can someone else find one?
If not, it appears that this hack is our only choice. In that case this needs commenting. Add a comment about 1) what bug is being fixed 2) why atof does the wrong thing and 3) what exactly we're doing to work around that.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1390,2021-08-31T10:47:18Z,2022-03-11T16:04:49Z,2022-03-12T11:42:42Z,MERGED,True,36,1,1,https://github.com/fabiangreffrath,convert first non-digit to locale's decimal in float value parsing,5,[],https://github.com/chocolate-doom/chocolate-doom/pull/1390,https://github.com/fabiangreffrath,5,https://github.com/chocolate-doom/chocolate-doom/pull/1390#issuecomment-914965634,"Different locales use different characters as decimal separators.
Since the currently used locale isn't always under our own control
(c.f. fabiangreffrath#620) this
commit makes sure to translate the first non-digit character in a
string that is going to get parsed as a float value into the current
locale's decimal separator.
Fixes fabiangreffrath#758.","Ack, I have added an elaborate comment.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1390,2021-08-31T10:47:18Z,2022-03-11T16:04:49Z,2022-03-12T11:42:42Z,MERGED,True,36,1,1,https://github.com/fabiangreffrath,convert first non-digit to locale's decimal in float value parsing,5,[],https://github.com/chocolate-doom/chocolate-doom/pull/1390,https://github.com/fabiangreffrath,6,https://github.com/chocolate-doom/chocolate-doom/pull/1390#issuecomment-917198081,"Different locales use different characters as decimal separators.
Since the currently used locale isn't always under our own control
(c.f. fabiangreffrath#620) this
commit makes sure to translate the first non-digit character in a
string that is going to get parsed as a float value into the current
locale's decimal separator.
Fixes fabiangreffrath#758.","I am a bit confused now. So, do we want solution that attempts to sanitize the string before parsing or do we just want to prevent the variables getting overridden with zero?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1390,2021-08-31T10:47:18Z,2022-03-11T16:04:49Z,2022-03-12T11:42:42Z,MERGED,True,36,1,1,https://github.com/fabiangreffrath,convert first non-digit to locale's decimal in float value parsing,5,[],https://github.com/chocolate-doom/chocolate-doom/pull/1390,https://github.com/fabiangreffrath,7,https://github.com/chocolate-doom/chocolate-doom/pull/1390#issuecomment-964946217,"Different locales use different characters as decimal separators.
Since the currently used locale isn't always under our own control
(c.f. fabiangreffrath#620) this
commit makes sure to translate the first non-digit character in a
string that is going to get parsed as a float value into the current
locale's decimal separator.
Fixes fabiangreffrath#758.",Could we please get a final word on this?!,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1390,2021-08-31T10:47:18Z,2022-03-11T16:04:49Z,2022-03-12T11:42:42Z,MERGED,True,36,1,1,https://github.com/fabiangreffrath,convert first non-digit to locale's decimal in float value parsing,5,[],https://github.com/chocolate-doom/chocolate-doom/pull/1390,https://github.com/ericcurtin,8,https://github.com/chocolate-doom/chocolate-doom/pull/1390#issuecomment-1065241924,"Different locales use different characters as decimal separators.
Since the currently used locale isn't always under our own control
(c.f. fabiangreffrath#620) this
commit makes sure to translate the first non-digit character in a
string that is going to get parsed as a float value into the current
locale's decimal separator.
Fixes fabiangreffrath#758.","Do you mind if I merge this here @fabiangreffrath ?
https://github.com/ericcurtin/opendoom
Don't want to be waiting forever on fixes like this",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1390,2021-08-31T10:47:18Z,2022-03-11T16:04:49Z,2022-03-12T11:42:42Z,MERGED,True,36,1,1,https://github.com/fabiangreffrath,convert first non-digit to locale's decimal in float value parsing,5,[],https://github.com/chocolate-doom/chocolate-doom/pull/1390,https://github.com/fabiangreffrath,9,https://github.com/chocolate-doom/chocolate-doom/pull/1390#issuecomment-1065250393,"Different locales use different characters as decimal separators.
Since the currently used locale isn't always under our own control
(c.f. fabiangreffrath#620) this
commit makes sure to translate the first non-digit character in a
string that is going to get parsed as a float value into the current
locale's decimal separator.
Fixes fabiangreffrath#758.","Of course, feel free!",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1390,2021-08-31T10:47:18Z,2022-03-11T16:04:49Z,2022-03-12T11:42:42Z,MERGED,True,36,1,1,https://github.com/fabiangreffrath,convert first non-digit to locale's decimal in float value parsing,5,[],https://github.com/chocolate-doom/chocolate-doom/pull/1390,https://github.com/fabiangreffrath,10,https://github.com/chocolate-doom/chocolate-doom/pull/1390#issuecomment-1065251499,"Different locales use different characters as decimal separators.
Since the currently used locale isn't always under our own control
(c.f. fabiangreffrath#620) this
commit makes sure to translate the first non-digit character in a
string that is going to get parsed as a float value into the current
locale's decimal separator.
Fixes fabiangreffrath#758.","Or, you know what, I just merge this myself. 😉",True,{'THUMBS_UP': ['https://github.com/ericcurtin']}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1390,2021-08-31T10:47:18Z,2022-03-11T16:04:49Z,2022-03-12T11:42:42Z,MERGED,True,36,1,1,https://github.com/fabiangreffrath,convert first non-digit to locale's decimal in float value parsing,5,[],https://github.com/chocolate-doom/chocolate-doom/pull/1390,https://github.com/ericcurtin,11,https://github.com/chocolate-doom/chocolate-doom/pull/1390#issuecomment-1065251910,"Different locales use different characters as decimal separators.
Since the currently used locale isn't always under our own control
(c.f. fabiangreffrath#620) this
commit makes sure to translate the first non-digit character in a
string that is going to get parsed as a float value into the current
locale's decimal separator.
Fixes fabiangreffrath#758.","Makes sense, it was opened in 2021 😄",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1390,2021-08-31T10:47:18Z,2022-03-11T16:04:49Z,2022-03-12T11:42:42Z,MERGED,True,36,1,1,https://github.com/fabiangreffrath,convert first non-digit to locale's decimal in float value parsing,5,[],https://github.com/chocolate-doom/chocolate-doom/pull/1390,https://github.com/ericcurtin,12,https://github.com/chocolate-doom/chocolate-doom/pull/1390#issuecomment-1065867512,"Different locales use different characters as decimal separators.
Since the currently used locale isn't always under our own control
(c.f. fabiangreffrath#620) this
commit makes sure to translate the first non-digit character in a
string that is going to get parsed as a float value into the current
locale's decimal separator.
Fixes fabiangreffrath#758.","https://github.com/fmtlib/fmt provides a way of doing this also (if C++ is allowed). But it may be overkill to add this dependency just based on one thing here, I don't know how portable it is (although I know it works on Windows, Linux, macOS, x86 and aarch64). What I do know is it's even faster than C conversion operations like sprintf, etc. which is pretty impressive. It's also shoe horned for future C++ standard (as C++20 std::format). That format library is my favourite personally but I normally end up using the standard C conversion functions to avoid adding more dependencies to projects.
But this certainly isn't a nasty hack by any means, this the type of code that is used to do conversions in real life, come on guys read an actual implementation of sprintf or something similar at least once, this is the kind of thing that happens under the hood in every OS. It's not just magic.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1394,2021-09-30T19:42:21Z,,2021-12-28T15:53:22Z,OPEN,False,90,5,7,https://github.com/NY00123,Hexen: Support two variations of v1.1 with -gameversion,5,[],https://github.com/chocolate-doom/chocolate-doom/pull/1394,https://github.com/NY00123,1,https://github.com/chocolate-doom/chocolate-doom/pull/1394,"This is a continuation of PR #1266, and it covers issue #1378.
Possibly less related changes, like adjustments to spacing, are done in their own commits.
The bash-completion addition remains untested. It couldn't work for me, possibly since at the most, I installed the binaries to a subdir within the home directory.
To summarize what matters here:

Originally, PR #1266 reverted the behaviors of A_SoAExplode to cover a Vanilla Bug. This turned out to be somewhat wrong, as there are actually two DOS EXEs identified as ""1.1"" floating around: One with the bug, and another one without it.
Thus, as of this PR, Hexen gets the -gameversion switch, letting you choose between versions identified as 1.1 and 1.1r2. 1.1r2 is the one which covers a fix for the bug, impacting a few maps in DK when used with -nomonsters.
The added code is mostly based on existing code used for Doom.
One thing which PR #1266 missed was a change to HEXEN_VERSIONTEXT. This is now covered here.
Note that I made no change involving the support for the demo IWAD. In particular, I added no separate game version for the demo.
Before starting a multiplayer game, all players should ensure they use the same version, in case it's changed. I don't think this differs from the situation with Doom, though.

hex11tst
hexendk_007","This is a continuation of PR #1266, and it covers issue #1378.
Possibly less related changes, like adjustments to spacing, are done in their own commits.
The bash-completion addition remains untested. It couldn't work for me, possibly since at the most, I installed the binaries to a subdir within the home directory.
To summarize what matters here:

Originally, PR #1266 reverted the behaviors of A_SoAExplode to cover a Vanilla Bug. This turned out to be somewhat wrong, as there are actually two DOS EXEs identified as ""1.1"" floating around: One with the bug, and another one without it.
Thus, as of this PR, Hexen gets the -gameversion switch, letting you choose between versions identified as 1.1 and 1.1r2. 1.1r2 is the one which covers a fix for the bug, impacting a few maps in DK when used with -nomonsters.
The added code is mostly based on existing code used for Doom.
One thing which PR #1266 missed was a change to HEXEN_VERSIONTEXT. This is now covered here.
Note that I made no change involving the support for the demo IWAD. In particular, I added no separate game version for the demo.
Before starting a multiplayer game, all players should ensure they use the same version, in case it's changed. I don't think this differs from the situation with Doom, though.

hex11tst
hexendk_007",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1394,2021-09-30T19:42:21Z,,2021-12-28T15:53:22Z,OPEN,False,90,5,7,https://github.com/NY00123,Hexen: Support two variations of v1.1 with -gameversion,5,[],https://github.com/chocolate-doom/chocolate-doom/pull/1394,https://github.com/fabiangreffrath,2,https://github.com/chocolate-doom/chocolate-doom/pull/1394#issuecomment-931927834,"This is a continuation of PR #1266, and it covers issue #1378.
Possibly less related changes, like adjustments to spacing, are done in their own commits.
The bash-completion addition remains untested. It couldn't work for me, possibly since at the most, I installed the binaries to a subdir within the home directory.
To summarize what matters here:

Originally, PR #1266 reverted the behaviors of A_SoAExplode to cover a Vanilla Bug. This turned out to be somewhat wrong, as there are actually two DOS EXEs identified as ""1.1"" floating around: One with the bug, and another one without it.
Thus, as of this PR, Hexen gets the -gameversion switch, letting you choose between versions identified as 1.1 and 1.1r2. 1.1r2 is the one which covers a fix for the bug, impacting a few maps in DK when used with -nomonsters.
The added code is mostly based on existing code used for Doom.
One thing which PR #1266 missed was a change to HEXEN_VERSIONTEXT. This is now covered here.
Note that I made no change involving the support for the demo IWAD. In particular, I added no separate game version for the demo.
Before starting a multiplayer game, all players should ensure they use the same version, in case it's changed. I don't think this differs from the situation with Doom, though.

hex11tst
hexendk_007","Thus, as of this PR, Hexen gets the -gameversion switch, letting you choose between versions identified as 1.1 and 1.1r2. 1.1r2 is the one which covers a fix for the bug, impacting a few maps in DK when used with -nomonsters.


I find this naming scheme a bit random - or are the executables canonically called like this anywhere? I'd suggest to name the two versions just as they identify themselves in the version cheat, i.e. ""1.1cbi"" and ""1.1bcp"". BTW, does anyone know what these three letters stand for?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1394,2021-09-30T19:42:21Z,,2021-12-28T15:53:22Z,OPEN,False,90,5,7,https://github.com/NY00123,Hexen: Support two variations of v1.1 with -gameversion,5,[],https://github.com/chocolate-doom/chocolate-doom/pull/1394,https://github.com/NY00123,3,https://github.com/chocolate-doom/chocolate-doom/pull/1394#issuecomment-932049548,"This is a continuation of PR #1266, and it covers issue #1378.
Possibly less related changes, like adjustments to spacing, are done in their own commits.
The bash-completion addition remains untested. It couldn't work for me, possibly since at the most, I installed the binaries to a subdir within the home directory.
To summarize what matters here:

Originally, PR #1266 reverted the behaviors of A_SoAExplode to cover a Vanilla Bug. This turned out to be somewhat wrong, as there are actually two DOS EXEs identified as ""1.1"" floating around: One with the bug, and another one without it.
Thus, as of this PR, Hexen gets the -gameversion switch, letting you choose between versions identified as 1.1 and 1.1r2. 1.1r2 is the one which covers a fix for the bug, impacting a few maps in DK when used with -nomonsters.
The added code is mostly based on existing code used for Doom.
One thing which PR #1266 missed was a change to HEXEN_VERSIONTEXT. This is now covered here.
Note that I made no change involving the support for the demo IWAD. In particular, I added no separate game version for the demo.
Before starting a multiplayer game, all players should ensure they use the same version, in case it's changed. I don't think this differs from the situation with Doom, though.

hex11tst
hexendk_007","I find this naming scheme a bit random - or are the executables canonically called like this anywhere? I'd suggest to name the two versions just as they identify themselves in the version cheat, i.e. ""1.1cbi"" and ""1.1bcp"". BTW, does anyone know what these three letters stand for?

My choice of ""1.1r2"" came from here (mainly the first URL):

#1378 (comment)
Doom-Utils/iwad-patches@f6291cc

The original source, also mentioning ""1.0r1"", ""1.0r2"" and ""1.1r1"":
https://www.doomworld.com/forum/topic/121524-hexen-v11-to-retail-store-beta-downgrader/?tab=comments#comment-2301779
As written in issue #1378, this should be similar to the two Final Doom versions being identified as ""final"" and ""final2"". As far as I know, ""1.1"" is otherwise the identification in official Hexen documentation, say ""DM.DOC"" or ""README - DK.TXT"".
I don't currently know the meaning of the three letters of CBI or BCP. What I do know is that in the open-source release (which is matching ""1.1r2""), H2DEF.H defines VER_ID as ""DVL"" in case it wasn't already defined from the makefile. On the other hand, based on my investigation, VER_ID wasn't used at all in known versions preceding 1.1.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1394,2021-09-30T19:42:21Z,,2021-12-28T15:53:22Z,OPEN,False,90,5,7,https://github.com/NY00123,Hexen: Support two variations of v1.1 with -gameversion,5,[],https://github.com/chocolate-doom/chocolate-doom/pull/1394,https://github.com/fabiangreffrath,4,https://github.com/chocolate-doom/chocolate-doom/pull/1394#issuecomment-932080686,"This is a continuation of PR #1266, and it covers issue #1378.
Possibly less related changes, like adjustments to spacing, are done in their own commits.
The bash-completion addition remains untested. It couldn't work for me, possibly since at the most, I installed the binaries to a subdir within the home directory.
To summarize what matters here:

Originally, PR #1266 reverted the behaviors of A_SoAExplode to cover a Vanilla Bug. This turned out to be somewhat wrong, as there are actually two DOS EXEs identified as ""1.1"" floating around: One with the bug, and another one without it.
Thus, as of this PR, Hexen gets the -gameversion switch, letting you choose between versions identified as 1.1 and 1.1r2. 1.1r2 is the one which covers a fix for the bug, impacting a few maps in DK when used with -nomonsters.
The added code is mostly based on existing code used for Doom.
One thing which PR #1266 missed was a change to HEXEN_VERSIONTEXT. This is now covered here.
Note that I made no change involving the support for the demo IWAD. In particular, I added no separate game version for the demo.
Before starting a multiplayer game, all players should ensure they use the same version, in case it's changed. I don't think this differs from the situation with Doom, though.

hex11tst
hexendk_007","I see, thank you! How about consistently naming them ""1.1r1"" and ""1.1r2"" then?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1394,2021-09-30T19:42:21Z,,2021-12-28T15:53:22Z,OPEN,False,90,5,7,https://github.com/NY00123,Hexen: Support two variations of v1.1 with -gameversion,5,[],https://github.com/chocolate-doom/chocolate-doom/pull/1394,https://github.com/NY00123,5,https://github.com/chocolate-doom/chocolate-doom/pull/1394#issuecomment-932122351,"This is a continuation of PR #1266, and it covers issue #1378.
Possibly less related changes, like adjustments to spacing, are done in their own commits.
The bash-completion addition remains untested. It couldn't work for me, possibly since at the most, I installed the binaries to a subdir within the home directory.
To summarize what matters here:

Originally, PR #1266 reverted the behaviors of A_SoAExplode to cover a Vanilla Bug. This turned out to be somewhat wrong, as there are actually two DOS EXEs identified as ""1.1"" floating around: One with the bug, and another one without it.
Thus, as of this PR, Hexen gets the -gameversion switch, letting you choose between versions identified as 1.1 and 1.1r2. 1.1r2 is the one which covers a fix for the bug, impacting a few maps in DK when used with -nomonsters.
The added code is mostly based on existing code used for Doom.
One thing which PR #1266 missed was a change to HEXEN_VERSIONTEXT. This is now covered here.
Note that I made no change involving the support for the demo IWAD. In particular, I added no separate game version for the demo.
Before starting a multiplayer game, all players should ensure they use the same version, in case it's changed. I don't think this differs from the situation with Doom, though.

hex11tst
hexendk_007","I see, thank you! How about consistently naming them ""1.1r1"" and ""1.1r2"" then?

You're welcome! Let's see if there's another comment given here. As written in the aforementioned DW thread, a Quake Shareware CD is currently the only known source covering a build of Hexen ""1.1r2"" (which is unlockable with a key); Thus,""1.1r1"" appears to be the most common variation of 1.1.
The situation with 1.0 might differ, but my understanding is that ""1.0r1"" is more common than ""1.0r2"", according to an investigation described in the same DW thread.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1394,2021-09-30T19:42:21Z,,2021-12-28T15:53:22Z,OPEN,False,90,5,7,https://github.com/NY00123,Hexen: Support two variations of v1.1 with -gameversion,5,[],https://github.com/chocolate-doom/chocolate-doom/pull/1394,https://github.com/fragglet,6,https://github.com/chocolate-doom/chocolate-doom/pull/1394#issuecomment-933021246,"This is a continuation of PR #1266, and it covers issue #1378.
Possibly less related changes, like adjustments to spacing, are done in their own commits.
The bash-completion addition remains untested. It couldn't work for me, possibly since at the most, I installed the binaries to a subdir within the home directory.
To summarize what matters here:

Originally, PR #1266 reverted the behaviors of A_SoAExplode to cover a Vanilla Bug. This turned out to be somewhat wrong, as there are actually two DOS EXEs identified as ""1.1"" floating around: One with the bug, and another one without it.
Thus, as of this PR, Hexen gets the -gameversion switch, letting you choose between versions identified as 1.1 and 1.1r2. 1.1r2 is the one which covers a fix for the bug, impacting a few maps in DK when used with -nomonsters.
The added code is mostly based on existing code used for Doom.
One thing which PR #1266 missed was a change to HEXEN_VERSIONTEXT. This is now covered here.
Note that I made no change involving the support for the demo IWAD. In particular, I added no separate game version for the demo.
Before starting a multiplayer game, all players should ensure they use the same version, in case it's changed. I don't think this differs from the situation with Doom, though.

hex11tst
hexendk_007","How many versions of v1.1 are there? The change to PHILOSOPHY mentions ""quite a few"" suggesting more than two. If that's the case, how are we deciding that one is ""r1"" while another is ""r2"", and if we decide to add support for more v1.1s in the future are they going to end up in an awkward order?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1394,2021-09-30T19:42:21Z,,2021-12-28T15:53:22Z,OPEN,False,90,5,7,https://github.com/NY00123,Hexen: Support two variations of v1.1 with -gameversion,5,[],https://github.com/chocolate-doom/chocolate-doom/pull/1394,https://github.com/NY00123,7,https://github.com/chocolate-doom/chocolate-doom/pull/1394#issuecomment-933168464,"This is a continuation of PR #1266, and it covers issue #1378.
Possibly less related changes, like adjustments to spacing, are done in their own commits.
The bash-completion addition remains untested. It couldn't work for me, possibly since at the most, I installed the binaries to a subdir within the home directory.
To summarize what matters here:

Originally, PR #1266 reverted the behaviors of A_SoAExplode to cover a Vanilla Bug. This turned out to be somewhat wrong, as there are actually two DOS EXEs identified as ""1.1"" floating around: One with the bug, and another one without it.
Thus, as of this PR, Hexen gets the -gameversion switch, letting you choose between versions identified as 1.1 and 1.1r2. 1.1r2 is the one which covers a fix for the bug, impacting a few maps in DK when used with -nomonsters.
The added code is mostly based on existing code used for Doom.
One thing which PR #1266 missed was a change to HEXEN_VERSIONTEXT. This is now covered here.
Note that I made no change involving the support for the demo IWAD. In particular, I added no separate game version for the demo.
Before starting a multiplayer game, all players should ensure they use the same version, in case it's changed. I don't think this differs from the situation with Doom, though.

hex11tst
hexendk_007","How many versions of v1.1 are there? The change to PHILOSOPHY mentions ""quite a few"" suggesting more than two. If that's the case, how are we deciding that one is ""r1"" while another is ""r2"", and if we decide to add support for more v1.1s in the future are they going to end up in an awkward order?

I'm currently aware of two versions. I wrote ""quite a few"" to cover the case another one might be revealed later. In particular, I didn't know if Hexen95 would count, albeit given what PHILOSOPHY says about Doom 95, it probably shouldn't.
According to this post of PVS, there's a CD with Hexen95 and DOS version ""1.1r1"", and Hexen95 has a fix for the A_SoAExplode bug (unlike 1.1r1): https://www.doomworld.com/forum/topic/114031-restoration-of-differing-heretic-and-hexen-exe-revisions-also-done-for-other-games/?tab=comments#comment-2129783
When it comes to naming the versions, in case a new variation of 1.1 is actually discovered in the future, I guess that we'll have the same problem as in the case of a discovery of another revision of the Final Doom EXE.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1394,2021-09-30T19:42:21Z,,2021-12-28T15:53:22Z,OPEN,False,90,5,7,https://github.com/NY00123,Hexen: Support two variations of v1.1 with -gameversion,5,[],https://github.com/chocolate-doom/chocolate-doom/pull/1394,https://github.com/fabiangreffrath,8,https://github.com/chocolate-doom/chocolate-doom/pull/1394#issuecomment-933190602,"This is a continuation of PR #1266, and it covers issue #1378.
Possibly less related changes, like adjustments to spacing, are done in their own commits.
The bash-completion addition remains untested. It couldn't work for me, possibly since at the most, I installed the binaries to a subdir within the home directory.
To summarize what matters here:

Originally, PR #1266 reverted the behaviors of A_SoAExplode to cover a Vanilla Bug. This turned out to be somewhat wrong, as there are actually two DOS EXEs identified as ""1.1"" floating around: One with the bug, and another one without it.
Thus, as of this PR, Hexen gets the -gameversion switch, letting you choose between versions identified as 1.1 and 1.1r2. 1.1r2 is the one which covers a fix for the bug, impacting a few maps in DK when used with -nomonsters.
The added code is mostly based on existing code used for Doom.
One thing which PR #1266 missed was a change to HEXEN_VERSIONTEXT. This is now covered here.
Note that I made no change involving the support for the demo IWAD. In particular, I added no separate game version for the demo.
Before starting a multiplayer game, all players should ensure they use the same version, in case it's changed. I don't think this differs from the situation with Doom, though.

hex11tst
hexendk_007","Maybe it would be less ambigious if you wrote ""at least two"" rather than ""quite a few"".",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1394,2021-09-30T19:42:21Z,,2021-12-28T15:53:22Z,OPEN,False,90,5,7,https://github.com/NY00123,Hexen: Support two variations of v1.1 with -gameversion,5,[],https://github.com/chocolate-doom/chocolate-doom/pull/1394,https://github.com/NY00123,9,https://github.com/chocolate-doom/chocolate-doom/pull/1394#issuecomment-934629217,"This is a continuation of PR #1266, and it covers issue #1378.
Possibly less related changes, like adjustments to spacing, are done in their own commits.
The bash-completion addition remains untested. It couldn't work for me, possibly since at the most, I installed the binaries to a subdir within the home directory.
To summarize what matters here:

Originally, PR #1266 reverted the behaviors of A_SoAExplode to cover a Vanilla Bug. This turned out to be somewhat wrong, as there are actually two DOS EXEs identified as ""1.1"" floating around: One with the bug, and another one without it.
Thus, as of this PR, Hexen gets the -gameversion switch, letting you choose between versions identified as 1.1 and 1.1r2. 1.1r2 is the one which covers a fix for the bug, impacting a few maps in DK when used with -nomonsters.
The added code is mostly based on existing code used for Doom.
One thing which PR #1266 missed was a change to HEXEN_VERSIONTEXT. This is now covered here.
Note that I made no change involving the support for the demo IWAD. In particular, I added no separate game version for the demo.
Before starting a multiplayer game, all players should ensure they use the same version, in case it's changed. I don't think this differs from the situation with Doom, though.

hex11tst
hexendk_007","Maybe it would be less ambigious if you wrote ""at least two"" rather than ""quite a few"".

That's a good option, indeed. Another one is there are actually two known “1.1”s, but I'm unsure which option sounds better.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1394,2021-09-30T19:42:21Z,,2021-12-28T15:53:22Z,OPEN,False,90,5,7,https://github.com/NY00123,Hexen: Support two variations of v1.1 with -gameversion,5,[],https://github.com/chocolate-doom/chocolate-doom/pull/1394,https://github.com/chungy,10,https://github.com/chocolate-doom/chocolate-doom/pull/1394#issuecomment-937246416,"This is a continuation of PR #1266, and it covers issue #1378.
Possibly less related changes, like adjustments to spacing, are done in their own commits.
The bash-completion addition remains untested. It couldn't work for me, possibly since at the most, I installed the binaries to a subdir within the home directory.
To summarize what matters here:

Originally, PR #1266 reverted the behaviors of A_SoAExplode to cover a Vanilla Bug. This turned out to be somewhat wrong, as there are actually two DOS EXEs identified as ""1.1"" floating around: One with the bug, and another one without it.
Thus, as of this PR, Hexen gets the -gameversion switch, letting you choose between versions identified as 1.1 and 1.1r2. 1.1r2 is the one which covers a fix for the bug, impacting a few maps in DK when used with -nomonsters.
The added code is mostly based on existing code used for Doom.
One thing which PR #1266 missed was a change to HEXEN_VERSIONTEXT. This is now covered here.
Note that I made no change involving the support for the demo IWAD. In particular, I added no separate game version for the demo.
Before starting a multiplayer game, all players should ensure they use the same version, in case it's changed. I don't think this differs from the situation with Doom, though.

hex11tst
hexendk_007","Hexen engine variants are down the obscurity hole enough, I don't think it's worth changing the PHILOSOPHY document to note the peculiarity. Doom is a different case: being fairly well-known that shareware/Doom2, Ultimate, and Final Doom are different revisions with distinct behavior.
I'd also recommend not using a commit I made in another repository to claim that ""1.1r2"" is an official moniker anywhere, it just happened to be a convenient disambiguation for community purposes. I think -gameversion 1.1 is fine for the original and apparently more common release of Hexen; demos are more likely to have been made with this version and I believe it's a sane default. ""1.1r2"" (or whatever else it might be called) should be explicitly asked for.
This is also consistent with the way our Doom gameversion works: does the right thing by default for any particular IWAD, while still allowing for an override.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1394,2021-09-30T19:42:21Z,,2021-12-28T15:53:22Z,OPEN,False,90,5,7,https://github.com/NY00123,Hexen: Support two variations of v1.1 with -gameversion,5,[],https://github.com/chocolate-doom/chocolate-doom/pull/1394,https://github.com/NY00123,11,https://github.com/chocolate-doom/chocolate-doom/pull/1394#issuecomment-938453408,"This is a continuation of PR #1266, and it covers issue #1378.
Possibly less related changes, like adjustments to spacing, are done in their own commits.
The bash-completion addition remains untested. It couldn't work for me, possibly since at the most, I installed the binaries to a subdir within the home directory.
To summarize what matters here:

Originally, PR #1266 reverted the behaviors of A_SoAExplode to cover a Vanilla Bug. This turned out to be somewhat wrong, as there are actually two DOS EXEs identified as ""1.1"" floating around: One with the bug, and another one without it.
Thus, as of this PR, Hexen gets the -gameversion switch, letting you choose between versions identified as 1.1 and 1.1r2. 1.1r2 is the one which covers a fix for the bug, impacting a few maps in DK when used with -nomonsters.
The added code is mostly based on existing code used for Doom.
One thing which PR #1266 missed was a change to HEXEN_VERSIONTEXT. This is now covered here.
Note that I made no change involving the support for the demo IWAD. In particular, I added no separate game version for the demo.
Before starting a multiplayer game, all players should ensure they use the same version, in case it's changed. I don't think this differs from the situation with Doom, though.

hex11tst
hexendk_007","Hexen engine variants are down the obscurity hole enough, I don't think it's worth changing the PHILOSOPHY document to note the peculiarity. Doom is a different case: being fairly well-known that shareware/Doom2, Ultimate, and Final Doom are different revisions with distinct behavior.

This might indeed be less commonly known for Hexen. Maybe it's still worthwhile to add a comment to PHILOSOPHY, in order to increase awareness. The differing EXEs can lead to unexpected behaviors, possibly also involving external programs, based on the following post of ETTiNGRiNDER: https://www.doomworld.com/forum/topic/114031-restoration-of-differing-heretic-and-hexen-exe-revisions-also-done-for-other-games/?tab=comments#comment-2129274

I think -gameversion 1.1 is fine for the original and apparently more common release of Hexen; demos are more likely to have been made with this version and I believe it's a sane default. ""1.1r2"" (or whatever else it might be called) should be explicitly asked for.

I've had some thought about the topic of demos. When it comes to the original DOS exes, it might be true that ""1.1r1"" is more commonly used for recording demos.
But the situation must differ for demos recorded with source ports, given that the open-source release matches ""1.1r2"". This also applies to Chocolate Doom, at least before my commit reverting the behaviors.
In theory, a database can be inspected for possibly impacted demos before a decision is made here. But I'm not sure it'll matter in practice.

First of all, I think that speedrun demos tend to be recorded with monsters.
Outside of possible exceptions like automated testing, the most common use case for recording demos with -nomonsters is probably deathmatch games. I suppose there are not too many such demos (if any) which occur in maps with suits of armors that contain monsters.
Finally, it looks like -nomonsters disables monster spawning in Doom v1.2, Heretic and Hexen, even during demos which were originally recorded with monsters. This leads to desyncs. Checking the source codes, Heretic and Hexen don't write the ""nomonsters"" flag to the demo file at all. Chocolate Doom does this for Doom versions later than 1.2, as well as ""longtics"" demos.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1394,2021-09-30T19:42:21Z,,2021-12-28T15:53:22Z,OPEN,False,90,5,7,https://github.com/NY00123,Hexen: Support two variations of v1.1 with -gameversion,5,[],https://github.com/chocolate-doom/chocolate-doom/pull/1394,https://github.com/NY00123,12,https://github.com/chocolate-doom/chocolate-doom/pull/1394#issuecomment-975917358,"This is a continuation of PR #1266, and it covers issue #1378.
Possibly less related changes, like adjustments to spacing, are done in their own commits.
The bash-completion addition remains untested. It couldn't work for me, possibly since at the most, I installed the binaries to a subdir within the home directory.
To summarize what matters here:

Originally, PR #1266 reverted the behaviors of A_SoAExplode to cover a Vanilla Bug. This turned out to be somewhat wrong, as there are actually two DOS EXEs identified as ""1.1"" floating around: One with the bug, and another one without it.
Thus, as of this PR, Hexen gets the -gameversion switch, letting you choose between versions identified as 1.1 and 1.1r2. 1.1r2 is the one which covers a fix for the bug, impacting a few maps in DK when used with -nomonsters.
The added code is mostly based on existing code used for Doom.
One thing which PR #1266 missed was a change to HEXEN_VERSIONTEXT. This is now covered here.
Note that I made no change involving the support for the demo IWAD. In particular, I added no separate game version for the demo.
Before starting a multiplayer game, all players should ensure they use the same version, in case it's changed. I don't think this differs from the situation with Doom, though.

hex11tst
hexendk_007","I've re-pushed the commits, modifying the edit to PHILOSOPHY.md. It now says: DOS Hexen 1.1 (although there are actually two known “1.1”s).
I've made no change to the version strings, as it looks like there isn't a common decision. For now, it still kinda follows the convention previously used with final and final2, just with 1.1 and 1.1r2 instead. One thing which I won't do is using version strings like 1.1a. Apart from looking like an official version string, it's a part of an unofficial DOS EXE named ""Hexen v1.1a"": https://redarchive.drdteam.org/files/Hexen/EXE%20Hacks/hexen_1.1a.zip
I tried to check in a Doomworld thread if there are Hexen demos which depend on -nomonsters. As expected, this should probably not be much of a worry; PVS wrote that there are hubs which can't be completed with -nomonsters (just like a few Doom maps cannot be), and also that -nomonsters demos with monsters are probably not allowed in the database of demos: https://www.doomworld.com/forum/topic/107427-the-next-iteration-of-dsda/?page=15&tab=comments#comment-2417837
Come to think of it, there are probably very few Hexen ports which are both commonly used and sufficiently demo-compatible; Not to mention that apart from PVS' own test demo attached in a thread of mine, there might currently be no -nomonsters demo which behaves differently between 1.1r1 and 1.1r2.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1395,2021-10-16T04:43:19Z,2021-10-16T13:30:28Z,2021-10-16T13:30:28Z,MERGED,True,1,0,1,https://github.com/AXDOOMER,"Fix Setup's ""Add WADs"" feature",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1395,https://github.com/AXDOOMER,1,https://github.com/chocolate-doom/chocolate-doom/pull/1395,"This bug prevented players from adding multiple files. Because this variable was never set to 1, Setup would pass the parameter -file btsx_e1a.wad -file btsx_e1b.wad to the engine, thus the only added wad would be btsx_e1a.wad because the engine only parses the first -file argument.","This bug prevented players from adding multiple files. Because this variable was never set to 1, Setup would pass the parameter -file btsx_e1a.wad -file btsx_e1b.wad to the engine, thus the only added wad would be btsx_e1a.wad because the engine only parses the first -file argument.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1397,2021-10-21T19:22:16Z,2021-12-27T10:19:25Z,2021-12-27T10:19:25Z,MERGED,True,12,0,1,https://github.com/tpoppins,Fixes Alt+Tab bug with SDL2 v2.0.14+ on Windows,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/1397,https://github.com/tpoppins,1,https://github.com/chocolate-doom/chocolate-doom/pull/1397,"Fixes #1396.
Adapted from kraflab's coelckers/prboom-plus@74e8a55, based on a fix in Woof taken from Doom Retro.","Fixes #1396.
Adapted from kraflab's coelckers/prboom-plus@74e8a55, based on a fix in Woof taken from Doom Retro.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1397,2021-10-21T19:22:16Z,2021-12-27T10:19:25Z,2021-12-27T10:19:25Z,MERGED,True,12,0,1,https://github.com/tpoppins,Fixes Alt+Tab bug with SDL2 v2.0.14+ on Windows,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/1397,https://github.com/turol,2,https://github.com/chocolate-doom/chocolate-doom/pull/1397#issuecomment-952082570,"Fixes #1396.
Adapted from kraflab's coelckers/prboom-plus@74e8a55, based on a fix in Woof taken from Doom Retro.",What happens if this is fixed in SDL at some point?,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1397,2021-10-21T19:22:16Z,2021-12-27T10:19:25Z,2021-12-27T10:19:25Z,MERGED,True,12,0,1,https://github.com/tpoppins,Fixes Alt+Tab bug with SDL2 v2.0.14+ on Windows,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/1397,https://github.com/fabiangreffrath,3,https://github.com/chocolate-doom/chocolate-doom/pull/1397#issuecomment-952108907,"Fixes #1396.
Adapted from kraflab's coelckers/prboom-plus@74e8a55, based on a fix in Woof taken from Doom Retro.",Then we'll add a ver.patch < xy condition.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1399,2021-10-23T19:13:37Z,2021-11-10T15:00:05Z,2021-11-11T02:14:16Z,MERGED,True,591,1412,20,https://github.com/rfomin,Replace midiproc with native Windows MIDI support,5,[],https://github.com/chocolate-doom/chocolate-doom/pull/1399,https://github.com/rfomin,1,https://github.com/chocolate-doom/chocolate-doom/pull/1399,"This is an implementation of native Windows MIDI playback using midiStreamOut API. It modifies MIDI control events on the fly, thus avoiding music volume issues.
Adapted from Woof: https://github.com/fabiangreffrath/woof/blob/master/Source/i_winmusic.c","This is an implementation of native Windows MIDI playback using midiStreamOut API. It modifies MIDI control events on the fly, thus avoiding music volume issues.
Adapted from Woof: https://github.com/fabiangreffrath/woof/blob/master/Source/i_winmusic.c",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1399,2021-10-23T19:13:37Z,2021-11-10T15:00:05Z,2021-11-11T02:14:16Z,MERGED,True,591,1412,20,https://github.com/rfomin,Replace midiproc with native Windows MIDI support,5,[],https://github.com/chocolate-doom/chocolate-doom/pull/1399,https://github.com/fabiangreffrath,2,https://github.com/chocolate-doom/chocolate-doom/pull/1399#issuecomment-953544564,"This is an implementation of native Windows MIDI playback using midiStreamOut API. It modifies MIDI control events on the fly, thus avoiding music volume issues.
Adapted from Woof: https://github.com/fabiangreffrath/woof/blob/master/Source/i_winmusic.c","I know @rfomin from his work on Woof! and his contributions have always been excellent! This commit gets us rid of the separate midiproc process for music playback and volume management. The midiproc process has proven to be a source for bugs in the past and I consider it a single net improvement if Choco could go on without it. There haven't been any complaints from Windows users since we released Woof! 7.0.0 with this native implementation replacing midiproc some four weeks ago.
The code is good and proven and I can review it here a second time. What's still missing then is someone who can actually play test this on Windows - because I never play on Windows (only available Windows system is at work which isn't the best place to test for a game music implementation).",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1399,2021-10-23T19:13:37Z,2021-11-10T15:00:05Z,2021-11-11T02:14:16Z,MERGED,True,591,1412,20,https://github.com/rfomin,Replace midiproc with native Windows MIDI support,5,[],https://github.com/chocolate-doom/chocolate-doom/pull/1399,https://github.com/tpoppins,3,https://github.com/chocolate-doom/chocolate-doom/pull/1399#issuecomment-954835269,"This is an implementation of native Windows MIDI playback using midiStreamOut API. It modifies MIDI control events on the fly, thus avoiding music volume issues.
Adapted from Woof: https://github.com/fabiangreffrath/woof/blob/master/Source/i_winmusic.c","I checked out and built @rfomin's branch under MSYS2/Win 7 x64 Pro SP1, then ran through the first six levels of TNT with -nomonsters, with the Native MIDI music cranked up. Warped to MAP31 for good measure.
Everything appears to work and sound as expected. And the SFX and the music sliders don't affect each other. Had a look at Woof v7.0.0 yesterday, same there.
Good work.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1399,2021-10-23T19:13:37Z,2021-11-10T15:00:05Z,2021-11-11T02:14:16Z,MERGED,True,591,1412,20,https://github.com/rfomin,Replace midiproc with native Windows MIDI support,5,[],https://github.com/chocolate-doom/chocolate-doom/pull/1399,https://github.com/fabiangreffrath,4,https://github.com/chocolate-doom/chocolate-doom/pull/1399#issuecomment-965688183,"This is an implementation of native Windows MIDI playback using midiStreamOut API. It modifies MIDI control events on the fly, thus avoiding music volume issues.
Adapted from Woof: https://github.com/fabiangreffrath/woof/blob/master/Source/i_winmusic.c",Thank you for merging!,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1401,2021-11-10T20:05:33Z,2021-11-10T21:08:12Z,2021-11-10T21:37:45Z,MERGED,True,1,0,1,https://github.com/FozzeY,Fix builtin-declaration-mismatch,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1401,https://github.com/FozzeY,1,https://github.com/chocolate-doom/chocolate-doom/pull/1401,Fix compiler warnings 'incompatible implicit declaration of built-in function 'malloc'/'free' in i_winmusic.c introduced by #1399.,Fix compiler warnings 'incompatible implicit declaration of built-in function 'malloc'/'free' in i_winmusic.c introduced by #1399.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1402,2021-11-11T10:30:36Z,2021-11-11T10:36:09Z,2021-11-11T10:36:19Z,MERGED,True,16,7,3,https://github.com/rfomin,Fix Windows native MIDI playback for Heretic/Hexen,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1402,https://github.com/rfomin,1,https://github.com/chocolate-doom/chocolate-doom/pull/1402,,,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1403,2021-11-12T16:04:56Z,2022-02-18T18:25:34Z,2022-02-18T18:25:34Z,CLOSED,False,1,0,1,None,Fix Alt+Tab bug in fullscreen mode on Linux,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1403,None,1,https://github.com/chocolate-doom/chocolate-doom/pull/1403,This commit fixes the window content remaining invisible upon restoring the window on Linux. The bug happened when the game was in fullscreen mode before using Alt+Tab.,This commit fixes the window content remaining invisible upon restoring the window on Linux. The bug happened when the game was in fullscreen mode before using Alt+Tab.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1403,2021-11-12T16:04:56Z,2022-02-18T18:25:34Z,2022-02-18T18:25:34Z,CLOSED,False,1,0,1,None,Fix Alt+Tab bug in fullscreen mode on Linux,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1403,https://github.com/fabiangreffrath,2,https://github.com/chocolate-doom/chocolate-doom/pull/1403#issuecomment-968089752,This commit fixes the window content remaining invisible upon restoring the window on Linux. The bug happened when the game was in fullscreen mode before using Alt+Tab.,I cannot reproduce this on Debian testing. Do you experience this with the standard settings or do you have fullscreen_width/fullscreen_height set? Do you know if your session runs under Wayland or X11?,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1403,2021-11-12T16:04:56Z,2022-02-18T18:25:34Z,2022-02-18T18:25:34Z,CLOSED,False,1,0,1,None,Fix Alt+Tab bug in fullscreen mode on Linux,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1403,None,3,https://github.com/chocolate-doom/chocolate-doom/pull/1403#issuecomment-968106219,This commit fixes the window content remaining invisible upon restoring the window on Linux. The bug happened when the game was in fullscreen mode before using Alt+Tab.,"My OS is Lubuntu 20.04 and my session runs under X11. Standard settings are used, fullscreen_width and fullscreen_height are not set.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1403,2021-11-12T16:04:56Z,2022-02-18T18:25:34Z,2022-02-18T18:25:34Z,CLOSED,False,1,0,1,None,Fix Alt+Tab bug in fullscreen mode on Linux,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1403,None,4,https://github.com/chocolate-doom/chocolate-doom/pull/1403#issuecomment-1003125229,This commit fixes the window content remaining invisible upon restoring the window on Linux. The bug happened when the game was in fullscreen mode before using Alt+Tab.,The bug occurs with SDL 2.0.10 (this version is used in the repositories of Ubuntu 20.04). Tested again with SDL 2.0.16 (version used in debian testing as of November 13) and 2.0.18 and can no longer reproduce the bug. So this bug is SDL version specific.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1404,2021-11-12T17:50:29Z,2021-11-14T11:53:17Z,2021-11-14T16:48:10Z,MERGED,True,17,2,1,https://github.com/rfomin,Fix Fluidsynth support for Windows,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/1404,https://github.com/rfomin,1,https://github.com/chocolate-doom/chocolate-doom/pull/1404,Enable Fluidsynth support on Windows if soundfont path is set. Please note that the current SDL_Mixer 2.0.4 has this bug: https://www.fluidsynth.org/news/2021/01/23/sdl2-mixer-bug/,Enable Fluidsynth support on Windows if soundfont path is set. Please note that the current SDL_Mixer 2.0.4 has this bug: https://www.fluidsynth.org/news/2021/01/23/sdl2-mixer-bug/,True,{'THUMBS_UP': ['https://github.com/FozzeY']}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1404,2021-11-12T17:50:29Z,2021-11-14T11:53:17Z,2021-11-14T16:48:10Z,MERGED,True,17,2,1,https://github.com/rfomin,Fix Fluidsynth support for Windows,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/1404,https://github.com/fabiangreffrath,2,https://github.com/chocolate-doom/chocolate-doom/pull/1404#issuecomment-967707043,Enable Fluidsynth support on Windows if soundfont path is set. Please note that the current SDL_Mixer 2.0.4 has this bug: https://www.fluidsynth.org/news/2021/01/23/sdl2-mixer-bug/,"I have to say that I liked your first approach better. It's a bit ugly, but if you turn fluidsynth_sf_is_set into a global variable, I guess the warning will go away.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1404,2021-11-12T17:50:29Z,2021-11-14T11:53:17Z,2021-11-14T16:48:10Z,MERGED,True,17,2,1,https://github.com/rfomin,Fix Fluidsynth support for Windows,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/1404,https://github.com/rfomin,3,https://github.com/chocolate-doom/chocolate-doom/pull/1404#issuecomment-967767903,Enable Fluidsynth support on Windows if soundfont path is set. Please note that the current SDL_Mixer 2.0.4 has this bug: https://www.fluidsynth.org/news/2021/01/23/sdl2-mixer-bug/,"Maybe this approach is even uglier, not sure: 74aa907",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1405,2021-11-13T04:03:09Z,2021-11-13T08:23:35Z,2022-03-24T01:30:37Z,MERGED,True,1,0,1,https://github.com/mikeday0,Set default soundfont path to empty string in setup,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1405,https://github.com/mikeday0,1,https://github.com/chocolate-doom/chocolate-doom/pull/1405,"This is a follow-up PR for #1387. This fixes an issue where the setup tool can assign the string ""(null)"" to the fluidsynth_sf_path config variable. Instead, assign an empty string as expected.","This is a follow-up PR for #1387. This fixes an issue where the setup tool can assign the string ""(null)"" to the fluidsynth_sf_path config variable. Instead, assign an empty string as expected.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1406,2021-11-13T22:21:23Z,2021-11-28T00:49:41Z,2021-11-28T23:48:49Z,MERGED,True,16,5,1,https://github.com/bensuperpc,Update github CI,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1406,https://github.com/bensuperpc,1,https://github.com/chocolate-doom/chocolate-doom/pull/1406,"Add ubuntu-20.04 in CI
Add CMake build in CI
Signed-off-by: Bensuperpc bensuperpc@gmail.com","Add ubuntu-20.04 in CI
Add CMake build in CI
Signed-off-by: Bensuperpc bensuperpc@gmail.com",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1406,2021-11-13T22:21:23Z,2021-11-28T00:49:41Z,2021-11-28T23:48:49Z,MERGED,True,16,5,1,https://github.com/bensuperpc,Update github CI,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1406,https://github.com/fabiangreffrath,2,https://github.com/chocolate-doom/chocolate-doom/pull/1406#issuecomment-968350982,"Add ubuntu-20.04 in CI
Add CMake build in CI
Signed-off-by: Bensuperpc bensuperpc@gmail.com","Hm, I'd prefer if we could just get away with ubuntu-latest.",True,"{'THUMBS_UP': ['https://github.com/bensuperpc', 'https://github.com/fragglet']}"
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1406,2021-11-13T22:21:23Z,2021-11-28T00:49:41Z,2021-11-28T23:48:49Z,MERGED,True,16,5,1,https://github.com/bensuperpc,Update github CI,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1406,https://github.com/fabiangreffrath,3,https://github.com/chocolate-doom/chocolate-doom/pull/1406#issuecomment-968351332,"Add ubuntu-20.04 in CI
Add CMake build in CI
Signed-off-by: Bensuperpc bensuperpc@gmail.com","Also, it is strictly not necessary to build all branches on pull requests or even on push events.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1406,2021-11-13T22:21:23Z,2021-11-28T00:49:41Z,2021-11-28T23:48:49Z,MERGED,True,16,5,1,https://github.com/bensuperpc,Update github CI,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1406,https://github.com/bensuperpc,4,https://github.com/chocolate-doom/chocolate-doom/pull/1406#issuecomment-968361879,"Add ubuntu-20.04 in CI
Add CMake build in CI
Signed-off-by: Bensuperpc bensuperpc@gmail.com","Also, it is strictly not necessary to build all branches on pull requests or even on push events.

I think it is more practical to be able to launch github action on branches for tests, to keep the master clean for updates...
I updated according to your suggestions",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1406,2021-11-13T22:21:23Z,2021-11-28T00:49:41Z,2021-11-28T23:48:49Z,MERGED,True,16,5,1,https://github.com/bensuperpc,Update github CI,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1406,https://github.com/bensuperpc,5,https://github.com/chocolate-doom/chocolate-doom/pull/1406#issuecomment-980606086,"Add ubuntu-20.04 in CI
Add CMake build in CI
Signed-off-by: Bensuperpc bensuperpc@gmail.com",@fabiangreffrath Are there things to improve in PR ?,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1406,2021-11-13T22:21:23Z,2021-11-28T00:49:41Z,2021-11-28T23:48:49Z,MERGED,True,16,5,1,https://github.com/bensuperpc,Update github CI,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1406,https://github.com/fragglet,6,https://github.com/chocolate-doom/chocolate-doom/pull/1406#issuecomment-981176825,"Add ubuntu-20.04 in CI
Add CMake build in CI
Signed-off-by: Bensuperpc bensuperpc@gmail.com",Thanks for this!,True,{'THUMBS_UP': ['https://github.com/bensuperpc']}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1408,2021-11-27T04:45:14Z,2021-11-27T07:43:55Z,2021-11-27T07:47:43Z,MERGED,True,1,0,1,https://github.com/rfomin,win midi: Fix memory leak,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1408,https://github.com/rfomin,1,https://github.com/chocolate-doom/chocolate-doom/pull/1408,,,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1409,2021-11-27T05:08:14Z,2021-11-27T07:44:44Z,2021-11-27T07:47:31Z,MERGED,True,35,11,1,https://github.com/rfomin,win midi: Non-linear volume control,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1409,https://github.com/rfomin,1,https://github.com/chocolate-doom/chocolate-doom/pull/1409,"The documentation for midiOutSetVolume says: ""Volume settings are interpreted logarithmically.""
volume_correnction table is taken from here: native-instruments.com","The documentation for midiOutSetVolume says: ""Volume settings are interpreted logarithmically.""
volume_correnction table is taken from here: native-instruments.com",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1410,2021-11-30T19:56:18Z,2021-11-30T19:56:55Z,2021-11-30T20:00:01Z,CLOSED,False,1597,4212,112,https://github.com/atsb,Merges,38,[],https://github.com/chocolate-doom/chocolate-doom/pull/1410,https://github.com/atsb,1,https://github.com/chocolate-doom/chocolate-doom/pull/1410,,,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1410,2021-11-30T19:56:18Z,2021-11-30T19:56:55Z,2021-11-30T20:00:01Z,CLOSED,False,1597,4212,112,https://github.com/atsb,Merges,38,[],https://github.com/chocolate-doom/chocolate-doom/pull/1410,https://github.com/atsb,2,https://github.com/chocolate-doom/chocolate-doom/pull/1410#issuecomment-982973208,,"Sorry!  My bad, I accidentally compared to choco instead of my fork :)",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1412,2021-12-06T09:18:38Z,2021-12-06T09:31:03Z,2021-12-06T09:31:09Z,MERGED,True,23,0,1,https://github.com/rfomin,win midi: Reset pitch bend range when stopping song,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1412,https://github.com/rfomin,1,https://github.com/chocolate-doom/chocolate-doom/pull/1412,Taken from PrBoom+: coelckers/prboom-plus@d1fdf95,Taken from PrBoom+: coelckers/prboom-plus@d1fdf95,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1413,2021-12-07T03:22:31Z,2021-12-07T05:16:07Z,2022-01-14T06:25:49Z,MERGED,True,1,0,1,https://github.com/rfomin,win midi: Fix missing declaration,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1413,https://github.com/rfomin,1,https://github.com/chocolate-doom/chocolate-doom/pull/1413,,,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1414,2021-12-12T06:32:10Z,2021-12-12T08:21:22Z,2022-01-14T06:25:47Z,MERGED,True,21,37,1,https://github.com/rfomin,win midi: Fix volume issues,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1414,https://github.com/rfomin,1,https://github.com/chocolate-doom/chocolate-doom/pull/1414,"Non-linear volume correction changes the relative volume of the instruments, which affects the sound of some MIDI files with volume control events, so I think it is better to remove it.
Update the volume when the song starts playing fixes DWANGO5 map11 MIDI (thanks @OpenRift412)","Non-linear volume correction changes the relative volume of the instruments, which affects the sound of some MIDI files with volume control events, so I think it is better to remove it.
Update the volume when the song starts playing fixes DWANGO5 map11 MIDI (thanks @OpenRift412)",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1415,2021-12-14T23:43:29Z,2022-01-23T23:45:15Z,2022-01-24T02:06:42Z,MERGED,True,22,6,10,https://github.com/Archenoth,Add ability to map mouse buttons to run!,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/1415,https://github.com/Archenoth,1,https://github.com/chocolate-doom/chocolate-doom/pull/1415,"Under the ""More controls"" menu in mouse setup, I added ""Run on"" as a command you can set to a mouse button..!
This allows for using right click to mouse run, which is a common control scheme with people who usually use RMB for jump (A mouse command that exists already) in games where running is your jump~ (It's also popular with people who've played Marathon, since that's how you ran in those games, but that's just a bonus)
Before:

After:

I also put it in the hole under ""Strafe on"", since it seemed like all the other mouse commands were paired into logical groups, and ""Run on"" seemed like the appropriate missing counterpart to ""Strafe on"", since those are the two main movement modifiers in Doom engine games!","Under the ""More controls"" menu in mouse setup, I added ""Run on"" as a command you can set to a mouse button..!
This allows for using right click to mouse run, which is a common control scheme with people who usually use RMB for jump (A mouse command that exists already) in games where running is your jump~ (It's also popular with people who've played Marathon, since that's how you ran in those games, but that's just a bonus)
Before:

After:

I also put it in the hole under ""Strafe on"", since it seemed like all the other mouse commands were paired into logical groups, and ""Run on"" seemed like the appropriate missing counterpart to ""Strafe on"", since those are the two main movement modifiers in Doom engine games!",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1415,2021-12-14T23:43:29Z,2022-01-23T23:45:15Z,2022-01-24T02:06:42Z,MERGED,True,22,6,10,https://github.com/Archenoth,Add ability to map mouse buttons to run!,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/1415,https://github.com/Archenoth,2,https://github.com/chocolate-doom/chocolate-doom/pull/1415#issuecomment-1019645198,"Under the ""More controls"" menu in mouse setup, I added ""Run on"" as a command you can set to a mouse button..!
This allows for using right click to mouse run, which is a common control scheme with people who usually use RMB for jump (A mouse command that exists already) in games where running is your jump~ (It's also popular with people who've played Marathon, since that's how you ran in those games, but that's just a bonus)
Before:

After:

I also put it in the hole under ""Strafe on"", since it seemed like all the other mouse commands were paired into logical groups, and ""Run on"" seemed like the appropriate missing counterpart to ""Strafe on"", since those are the two main movement modifiers in Doom engine games!","Oh wow. That merge commit has one heck of a hash

(Also thank you..!)",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1418,2021-12-31T17:33:14Z,2022-01-29T23:45:46Z,2022-01-30T07:25:34Z,MERGED,True,46,0,3,https://github.com/Acts19quiz,"Add detection and search for doom2f.wad and french.deh, respectively.",5,[],https://github.com/chocolate-doom/chocolate-doom/pull/1418,https://github.com/Acts19quiz,1,https://github.com/chocolate-doom/chocolate-doom/pull/1418,"Chocolate Doom can currently load and play French DOOM II (DOOM2F.WAD), however the text strings are obviously English. I think accurate French DOOM2.EXE v1.8 behaviour reproduction falls within the scope of accurately replicating all behaviour of the original EXEs past v1.6.
What I propose is specific acknowledgement of doom2f.wad as an IWAD, then performing some lump checks to make sure it's French before, taking inspiration from the chex.wad handling, looking for fraggle's french.deh, and handling it identically to chex.wad/.deh. There's obviously a few different ways to handle this, and there could be some differences in line spacing or whatever, but I wanted to float this by all the same and see what the thoughts are about completing Chocolate Doom's library.
EDIT: Something I would have liked is rather than error-ing out for failure to produce french.deh, just give a warning message box before loading. Unlike chex.deh, it doesn't affect gameplay or engine mechanics. DOOM2F.WAD is otherwise playable with English text, it just isn't correct. However, I can't find such a generic start-up message in i_system, and I'm skittish on trying to monkey around there for a PR with undetermined status.","Chocolate Doom can currently load and play French DOOM II (DOOM2F.WAD), however the text strings are obviously English. I think accurate French DOOM2.EXE v1.8 behaviour reproduction falls within the scope of accurately replicating all behaviour of the original EXEs past v1.6.
What I propose is specific acknowledgement of doom2f.wad as an IWAD, then performing some lump checks to make sure it's French before, taking inspiration from the chex.wad handling, looking for fraggle's french.deh, and handling it identically to chex.wad/.deh. There's obviously a few different ways to handle this, and there could be some differences in line spacing or whatever, but I wanted to float this by all the same and see what the thoughts are about completing Chocolate Doom's library.
EDIT: Something I would have liked is rather than error-ing out for failure to produce french.deh, just give a warning message box before loading. Unlike chex.deh, it doesn't affect gameplay or engine mechanics. DOOM2F.WAD is otherwise playable with English text, it just isn't correct. However, I can't find such a generic start-up message in i_system, and I'm skittish on trying to monkey around there for a PR with undetermined status.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1418,2021-12-31T17:33:14Z,2022-01-29T23:45:46Z,2022-01-30T07:25:34Z,MERGED,True,46,0,3,https://github.com/Acts19quiz,"Add detection and search for doom2f.wad and french.deh, respectively.",5,[],https://github.com/chocolate-doom/chocolate-doom/pull/1418,https://github.com/fragglet,2,https://github.com/chocolate-doom/chocolate-doom/pull/1418#issuecomment-1025008539,"Chocolate Doom can currently load and play French DOOM II (DOOM2F.WAD), however the text strings are obviously English. I think accurate French DOOM2.EXE v1.8 behaviour reproduction falls within the scope of accurately replicating all behaviour of the original EXEs past v1.6.
What I propose is specific acknowledgement of doom2f.wad as an IWAD, then performing some lump checks to make sure it's French before, taking inspiration from the chex.wad handling, looking for fraggle's french.deh, and handling it identically to chex.wad/.deh. There's obviously a few different ways to handle this, and there could be some differences in line spacing or whatever, but I wanted to float this by all the same and see what the thoughts are about completing Chocolate Doom's library.
EDIT: Something I would have liked is rather than error-ing out for failure to produce french.deh, just give a warning message box before loading. Unlike chex.deh, it doesn't affect gameplay or engine mechanics. DOOM2F.WAD is otherwise playable with English text, it just isn't correct. However, I can't find such a generic start-up message in i_system, and I'm skittish on trying to monkey around there for a PR with undetermined status.",Thanks!,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1418,2021-12-31T17:33:14Z,2022-01-29T23:45:46Z,2022-01-30T07:25:34Z,MERGED,True,46,0,3,https://github.com/Acts19quiz,"Add detection and search for doom2f.wad and french.deh, respectively.",5,[],https://github.com/chocolate-doom/chocolate-doom/pull/1418,https://github.com/Acts19quiz,3,https://github.com/chocolate-doom/chocolate-doom/pull/1418#issuecomment-1025087111,"Chocolate Doom can currently load and play French DOOM II (DOOM2F.WAD), however the text strings are obviously English. I think accurate French DOOM2.EXE v1.8 behaviour reproduction falls within the scope of accurately replicating all behaviour of the original EXEs past v1.6.
What I propose is specific acknowledgement of doom2f.wad as an IWAD, then performing some lump checks to make sure it's French before, taking inspiration from the chex.wad handling, looking for fraggle's french.deh, and handling it identically to chex.wad/.deh. There's obviously a few different ways to handle this, and there could be some differences in line spacing or whatever, but I wanted to float this by all the same and see what the thoughts are about completing Chocolate Doom's library.
EDIT: Something I would have liked is rather than error-ing out for failure to produce french.deh, just give a warning message box before loading. Unlike chex.deh, it doesn't affect gameplay or engine mechanics. DOOM2F.WAD is otherwise playable with English text, it just isn't correct. However, I can't find such a generic start-up message in i_system, and I'm skittish on trying to monkey around there for a PR with undetermined status.","No problem, and you're welcome.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1419,2022-01-02T20:27:28Z,2022-01-03T04:01:01Z,2022-01-03T04:01:01Z,MERGED,True,2,2,2,https://github.com/JNechaevsky,Update copyright year to 2022,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1419,https://github.com/JNechaevsky,1,https://github.com/chocolate-doom/chocolate-doom/pull/1419,Happy New Year! 🎄,Happy New Year! 🎄,True,{'HOORAY': ['https://github.com/mfrancis95']}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1420,2022-01-03T04:00:08Z,2022-01-04T03:00:59Z,2022-01-04T03:00:59Z,MERGED,True,3,3,1,https://github.com/mfrancis95,Replace deprecated autoconf macros with up-to-date equivalents,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1420,https://github.com/mfrancis95,1,https://github.com/chocolate-doom/chocolate-doom/pull/1420,,,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1421,2022-01-03T04:03:50Z,2022-01-04T03:00:49Z,2022-01-04T03:00:50Z,MERGED,True,0,34,1,https://github.com/mfrancis95,"Remove .travis.yml, which has been replaced with GitHub Actions",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1421,https://github.com/mfrancis95,1,https://github.com/chocolate-doom/chocolate-doom/pull/1421,,,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1422,2022-01-03T05:19:24Z,2022-01-03T05:19:28Z,2022-01-03T05:19:28Z,CLOSED,False,9,1,1,https://github.com/mfrancis95,Add Windows to GH Actions build matrix,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1422,https://github.com/mfrancis95,1,https://github.com/chocolate-doom/chocolate-doom/pull/1422,,,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1423,2022-01-03T07:18:59Z,2022-01-05T01:42:37Z,2022-01-05T01:42:37Z,MERGED,True,1,1,1,https://github.com/mfrancis95,Fix bug in net_server.c where a player's receive window was not being…,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1423,https://github.com/mfrancis95,1,https://github.com/chocolate-doom/chocolate-doom/pull/1423,… checked properly in deadlock scenarios,… checked properly in deadlock scenarios,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1423,2022-01-03T07:18:59Z,2022-01-05T01:42:37Z,2022-01-05T01:42:37Z,MERGED,True,1,1,1,https://github.com/mfrancis95,Fix bug in net_server.c where a player's receive window was not being…,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1423,https://github.com/fabiangreffrath,2,https://github.com/chocolate-doom/chocolate-doom/pull/1423#issuecomment-1004388112,… checked properly in deadlock scenarios,@rfomin same bug in Woof?,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1423,2022-01-03T07:18:59Z,2022-01-05T01:42:37Z,2022-01-05T01:42:37Z,MERGED,True,1,1,1,https://github.com/mfrancis95,Fix bug in net_server.c where a player's receive window was not being…,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1423,https://github.com/rfomin,3,https://github.com/chocolate-doom/chocolate-doom/pull/1423#issuecomment-1004518043,… checked properly in deadlock scenarios,"@rfomin same bug in Woof?

It was clang warning. I fixed and forgot about it: https://github.com/fabiangreffrath/woof/blob/77ac05d70e8b5a229f8a3a5b0ff20ea5a80c7aac/Source/net_server.c#L1723",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1424,2022-01-03T08:20:59Z,2022-01-04T03:00:40Z,2022-01-04T03:00:40Z,MERGED,True,0,36,5,https://github.com/mfrancis95,Remove unused frac and totalwidth variables,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1424,https://github.com/mfrancis95,1,https://github.com/chocolate-doom/chocolate-doom/pull/1424,,,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1430,2022-01-14T07:24:19Z,2022-01-14T07:31:37Z,2022-01-14T07:33:06Z,MERGED,True,33,0,3,https://github.com/rfomin,win midi: Proper pause/resume,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1430,https://github.com/rfomin,1,https://github.com/chocolate-doom/chocolate-doom/pull/1430,,,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1431,2022-01-14T08:01:35Z,2022-01-14T08:07:59Z,2022-01-14T08:08:09Z,MERGED,True,20,10,1,https://github.com/rfomin,Fix Fluidsynth pause on Windows,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1431,https://github.com/rfomin,1,https://github.com/chocolate-doom/chocolate-doom/pull/1431,SDL_Mixer don't support pause in Fluidsynth backend: https://github.com/libsdl-org/SDL_mixer/blob/60a82b21bdbf2f4626eebee11600f29cebbe1c49/src/codecs/music_fluidsynth.c#L366,SDL_Mixer don't support pause in Fluidsynth backend: https://github.com/libsdl-org/SDL_mixer/blob/60a82b21bdbf2f4626eebee11600f29cebbe1c49/src/codecs/music_fluidsynth.c#L366,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1432,2022-01-17T21:59:09Z,2022-01-17T22:00:29Z,2022-01-17T22:00:29Z,CLOSED,False,17,1,2,https://github.com/fabiangreffrath,cross-build for Windows during CI,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1432,https://github.com/fabiangreffrath,1,https://github.com/chocolate-doom/chocolate-doom/pull/1432,,,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1433,2022-01-21T23:53:15Z,2022-01-22T06:36:21Z,2022-01-22T06:36:25Z,MERGED,True,1,1,1,https://github.com/fragglet,Change setup tool to use -merge instead of -file.,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1433,https://github.com/fragglet,1,https://github.com/chocolate-doom/chocolate-doom/pull/1433,"This is the more ""ergonomic"" option to use that correctly handles WADs
that use sprites, and is consistent with what we do in the macOS launcher
and when doing drag-and-drop.","This is the more ""ergonomic"" option to use that correctly handles WADs
that use sprites, and is consistent with what we do in the macOS launcher
and when doing drag-and-drop.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1433,2022-01-21T23:53:15Z,2022-01-22T06:36:21Z,2022-01-22T06:36:25Z,MERGED,True,1,1,1,https://github.com/fragglet,Change setup tool to use -merge instead of -file.,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1433,https://github.com/AXDOOMER,2,https://github.com/chocolate-doom/chocolate-doom/pull/1433#issuecomment-1018978352,"This is the more ""ergonomic"" option to use that correctly handles WADs
that use sprites, and is consistent with what we do in the macOS launcher
and when doing drag-and-drop.",I think it's a great idea. I have even thought of doing a PR before.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1435,2022-01-29T23:52:34Z,,2022-01-30T08:40:17Z,OPEN,False,16,0,1,https://github.com/fragglet,Update NEWS.,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1435,https://github.com/fragglet,1,https://github.com/chocolate-doom/chocolate-doom/pull/1435,,,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1439,2022-02-04T02:48:26Z,,2022-02-04T02:54:09Z,OPEN,False,23,5,1,https://github.com/Acts19quiz,Final DOOM Anthology IWADs default to Anthology EXE.,5,[],https://github.com/chocolate-doom/chocolate-doom/pull/1439,https://github.com/Acts19quiz,1,https://github.com/chocolate-doom/chocolate-doom/pull/1439,"The current philosophy behind the handling of Final DOOM's IWADs is to default to ""final[1]"", not ""final2"", since that's what most people might reasonably be expecting, given that those are the common IWAD variants used. I think that's a good idea (not that it matters, but I digress). However, players that (apparently) go out of their way enough to use the rarer Anthology/GOG variants probably know what they have, and likely want accurate reproduction of those IWADs' engine 'out of the box'.
The idea then is of course to scan the IWADs' (plutonia.wad and tnt.wad) lumps to determine what is what. I believe there are enough differences to create a concrete, grief-proof search. Feel free to chime in if I missed an esoteric variant.
gamemission must be either pack_tnt or pack_plut
+P1_START
+P1_END
+F1_START
+F1_END
-DMAPINFO (weeds out Classic Unity variants which fulfill the above requirements--Classic Unity support is an unrelated can of worms)","The current philosophy behind the handling of Final DOOM's IWADs is to default to ""final[1]"", not ""final2"", since that's what most people might reasonably be expecting, given that those are the common IWAD variants used. I think that's a good idea (not that it matters, but I digress). However, players that (apparently) go out of their way enough to use the rarer Anthology/GOG variants probably know what they have, and likely want accurate reproduction of those IWADs' engine 'out of the box'.
The idea then is of course to scan the IWADs' (plutonia.wad and tnt.wad) lumps to determine what is what. I believe there are enough differences to create a concrete, grief-proof search. Feel free to chime in if I missed an esoteric variant.
gamemission must be either pack_tnt or pack_plut
+P1_START
+P1_END
+F1_START
+F1_END
-DMAPINFO (weeds out Classic Unity variants which fulfill the above requirements--Classic Unity support is an unrelated can of worms)",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1440,2022-02-06T14:57:44Z,,2022-02-11T15:33:48Z,OPEN,False,15,3,4,https://github.com/RamonUnch,Fix Mouse wheel conflict with Xbuttons 1&2,6,[],https://github.com/chocolate-doom/chocolate-doom/pull/1440,https://github.com/RamonUnch,1,https://github.com/chocolate-doom/chocolate-doom/pull/1440,"Fixes: #1344
Also display wheel up/down instead of button 4/5 in the chocolate-setup
I could not test it myself last year, but now I got a 5 button mouse...
This patch separates properly between mouse buttons and the mouse wheel.
Previously the wheel was mapped to button 4 and 5 and so where XButtons 1&2.
Now the wheel up/down is still mapped internally to button 3/4 and XButtons are mapped to button 5 and 6.
Ther are no more conflicts and the config file are not broken, except for people that had 5 mouse buttons and favored XButtons over the whee. I guess it concerns few people that will be happy of the upgrade anyway...","Fixes: #1344
Also display wheel up/down instead of button 4/5 in the chocolate-setup
I could not test it myself last year, but now I got a 5 button mouse...
This patch separates properly between mouse buttons and the mouse wheel.
Previously the wheel was mapped to button 4 and 5 and so where XButtons 1&2.
Now the wheel up/down is still mapped internally to button 3/4 and XButtons are mapped to button 5 and 6.
Ther are no more conflicts and the config file are not broken, except for people that had 5 mouse buttons and favored XButtons over the whee. I guess it concerns few people that will be happy of the upgrade anyway...",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1440,2022-02-06T14:57:44Z,,2022-02-11T15:33:48Z,OPEN,False,15,3,4,https://github.com/RamonUnch,Fix Mouse wheel conflict with Xbuttons 1&2,6,[],https://github.com/chocolate-doom/chocolate-doom/pull/1440,https://github.com/fabiangreffrath,2,https://github.com/chocolate-doom/chocolate-doom/pull/1440#issuecomment-1030868349,"Fixes: #1344
Also display wheel up/down instead of button 4/5 in the chocolate-setup
I could not test it myself last year, but now I got a 5 button mouse...
This patch separates properly between mouse buttons and the mouse wheel.
Previously the wheel was mapped to button 4 and 5 and so where XButtons 1&2.
Now the wheel up/down is still mapped internally to button 3/4 and XButtons are mapped to button 5 and 6.
Ther are no more conflicts and the config file are not broken, except for people that had 5 mouse buttons and favored XButtons over the whee. I guess it concerns few people that will be happy of the upgrade anyway...",The (only but) obvious downside is that this clashes with peoples' existing setups.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1440,2022-02-06T14:57:44Z,,2022-02-11T15:33:48Z,OPEN,False,15,3,4,https://github.com/RamonUnch,Fix Mouse wheel conflict with Xbuttons 1&2,6,[],https://github.com/chocolate-doom/chocolate-doom/pull/1440,https://github.com/RamonUnch,3,https://github.com/chocolate-doom/chocolate-doom/pull/1440#issuecomment-1030879138,"Fixes: #1344
Also display wheel up/down instead of button 4/5 in the chocolate-setup
I could not test it myself last year, but now I got a 5 button mouse...
This patch separates properly between mouse buttons and the mouse wheel.
Previously the wheel was mapped to button 4 and 5 and so where XButtons 1&2.
Now the wheel up/down is still mapped internally to button 3/4 and XButtons are mapped to button 5 and 6.
Ther are no more conflicts and the config file are not broken, except for people that had 5 mouse buttons and favored XButtons over the whee. I guess it concerns few people that will be happy of the upgrade anyway...","I was hesitant to keep the wheel mapped to the button 4&5 and to remap the xbutton to 6&7 but it would be more messy...
Maybe backward compat is worth it.
This is still ""outside"" of the default.cfg.
If config compatibility is a must, then I can do this other mapping.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1440,2022-02-06T14:57:44Z,,2022-02-11T15:33:48Z,OPEN,False,15,3,4,https://github.com/RamonUnch,Fix Mouse wheel conflict with Xbuttons 1&2,6,[],https://github.com/chocolate-doom/chocolate-doom/pull/1440,https://github.com/RamonUnch,4,https://github.com/chocolate-doom/chocolate-doom/pull/1440#issuecomment-1036338068,"Fixes: #1344
Also display wheel up/down instead of button 4/5 in the chocolate-setup
I could not test it myself last year, but now I got a 5 button mouse...
This patch separates properly between mouse buttons and the mouse wheel.
Previously the wheel was mapped to button 4 and 5 and so where XButtons 1&2.
Now the wheel up/down is still mapped internally to button 3/4 and XButtons are mapped to button 5 and 6.
Ther are no more conflicts and the config file are not broken, except for people that had 5 mouse buttons and favored XButtons over the whee. I guess it concerns few people that will be happy of the upgrade anyway...","I updated the patch so that the old configs are no longer broken.
It is actually not more complex than the previous patch.
Can anyone else give a try?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1442,2022-02-09T03:55:18Z,2022-02-12T08:11:33Z,2022-02-12T08:11:33Z,MERGED,True,101,0,8,https://github.com/fsufitch,Support for Docker container-based development for ease and consistency,7,[],https://github.com/chocolate-doom/chocolate-doom/pull/1442,https://github.com/fsufitch,1,https://github.com/chocolate-doom/chocolate-doom/pull/1442,,,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1444,2022-02-13T22:54:39Z,,2022-05-07T19:05:41Z,OPEN,False,34,3,4,https://github.com/fsufitch,Textscreen: support for forcing software rendering,6,[],https://github.com/chocolate-doom/chocolate-doom/pull/1444,https://github.com/fsufitch,1,https://github.com/chocolate-doom/chocolate-doom/pull/1444,"Added a TXT_SetForceSoftwareRenderer function to set a global configuration flag for textscreen, plus support for a TXT_FORCE_SOFTWARE_RENDERER environment variable. Setting either of these has the same effect on how SDL_CreateRenderer is called as the force_software_renderer option in Choco's config does.
Additionally, Setup and Endoom call TXT_Init, call TXT_SetForceSoftwareRenderer as appropriate given the configurations they are operating under.

Motivation for this change: I am using Chocolate Doom on a Raspberry Pi 1A, and while SDL can initialize its regular OpenGL environment, it is excruciatingly slow (0.5-1 FPS) even for something as simple as Textscreen. Forcing it to use software rendering instead of pretending to be a GPU fixes this.
Thus, this change greatly improves support of very low spec hardware.","Added a TXT_SetForceSoftwareRenderer function to set a global configuration flag for textscreen, plus support for a TXT_FORCE_SOFTWARE_RENDERER environment variable. Setting either of these has the same effect on how SDL_CreateRenderer is called as the force_software_renderer option in Choco's config does.
Additionally, Setup and Endoom call TXT_Init, call TXT_SetForceSoftwareRenderer as appropriate given the configurations they are operating under.

Motivation for this change: I am using Chocolate Doom on a Raspberry Pi 1A, and while SDL can initialize its regular OpenGL environment, it is excruciatingly slow (0.5-1 FPS) even for something as simple as Textscreen. Forcing it to use software rendering instead of pretending to be a GPU fixes this.
Thus, this change greatly improves support of very low spec hardware.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1444,2022-02-13T22:54:39Z,,2022-05-07T19:05:41Z,OPEN,False,34,3,4,https://github.com/fsufitch,Textscreen: support for forcing software rendering,6,[],https://github.com/chocolate-doom/chocolate-doom/pull/1444,https://github.com/turol,2,https://github.com/chocolate-doom/chocolate-doom/pull/1444#issuecomment-1120266162,"Added a TXT_SetForceSoftwareRenderer function to set a global configuration flag for textscreen, plus support for a TXT_FORCE_SOFTWARE_RENDERER environment variable. Setting either of these has the same effect on how SDL_CreateRenderer is called as the force_software_renderer option in Choco's config does.
Additionally, Setup and Endoom call TXT_Init, call TXT_SetForceSoftwareRenderer as appropriate given the configurations they are operating under.

Motivation for this change: I am using Chocolate Doom on a Raspberry Pi 1A, and while SDL can initialize its regular OpenGL environment, it is excruciatingly slow (0.5-1 FPS) even for something as simple as Textscreen. Forcing it to use software rendering instead of pretending to be a GPU fixes this.
Thus, this change greatly improves support of very low spec hardware.",Looks OK other than the code style. Do you want to rebase/squash this into one commit or should it be done when merging?,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1449,2022-03-11T13:44:06Z,2022-03-11T14:22:03Z,2022-03-11T16:39:01Z,CLOSED,False,17,3,2,https://github.com/ericcurtin,If running Doom as a daemon subprocess prefpath gets set to null pointer,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1449,https://github.com/ericcurtin,1,https://github.com/chocolate-doom/chocolate-doom/pull/1449,Instead set to default directory in this case.,Instead set to default directory in this case.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1450,2022-03-11T16:55:15Z,2022-03-12T12:03:24Z,2022-03-12T19:03:19Z,MERGED,True,40,15,5,https://github.com/turol,Gracefully handle SDL_GetPrefPath returning NULL,6,[],https://github.com/chocolate-doom/chocolate-doom/pull/1450,https://github.com/turol,1,https://github.com/chocolate-doom/chocolate-doom/pull/1450,"SDL_GetPrefPath can return NULL under strange circumstances. Gracefully error out instead of crashing. It would also be possible to not error out but users of M_GetAutoloadDir would need to be fixed to check for NULL.
On Linux this can be tested like this:
XDG_DATA_DIR="""" HOME="""" /path/to/chocolate-doom/src/chocolate-doom","SDL_GetPrefPath can return NULL under strange circumstances. Gracefully error out instead of crashing. It would also be possible to not error out but users of M_GetAutoloadDir would need to be fixed to check for NULL.
On Linux this can be tested like this:
XDG_DATA_DIR="""" HOME="""" /path/to/chocolate-doom/src/chocolate-doom",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1450,2022-03-11T16:55:15Z,2022-03-12T12:03:24Z,2022-03-12T19:03:19Z,MERGED,True,40,15,5,https://github.com/turol,Gracefully handle SDL_GetPrefPath returning NULL,6,[],https://github.com/chocolate-doom/chocolate-doom/pull/1450,https://github.com/ericcurtin,2,https://github.com/chocolate-doom/chocolate-doom/pull/1450#issuecomment-1065340287,"SDL_GetPrefPath can return NULL under strange circumstances. Gracefully error out instead of crashing. It would also be possible to not error out but users of M_GetAutoloadDir would need to be fixed to check for NULL.
On Linux this can be tested like this:
XDG_DATA_DIR="""" HOME="""" /path/to/chocolate-doom/src/chocolate-doom","You broke the build @turol , you clearly don't test anything.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1450,2022-03-11T16:55:15Z,2022-03-12T12:03:24Z,2022-03-12T19:03:19Z,MERGED,True,40,15,5,https://github.com/turol,Gracefully handle SDL_GetPrefPath returning NULL,6,[],https://github.com/chocolate-doom/chocolate-doom/pull/1450,https://github.com/ericcurtin,3,https://github.com/chocolate-doom/chocolate-doom/pull/1450#issuecomment-1065341124,"SDL_GetPrefPath can return NULL under strange circumstances. Gracefully error out instead of crashing. It would also be possible to not error out but users of M_GetAutoloadDir would need to be fixed to check for NULL.
On Linux this can be tested like this:
XDG_DATA_DIR="""" HOME="""" /path/to/chocolate-doom/src/chocolate-doom","In multiple places I might add, just to show how completely wrong this overly complex fix is",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1450,2022-03-11T16:55:15Z,2022-03-12T12:03:24Z,2022-03-12T19:03:19Z,MERGED,True,40,15,5,https://github.com/turol,Gracefully handle SDL_GetPrefPath returning NULL,6,[],https://github.com/chocolate-doom/chocolate-doom/pull/1450,https://github.com/fabiangreffrath,4,https://github.com/chocolate-doom/chocolate-doom/pull/1450#issuecomment-1065344579,"SDL_GetPrefPath can return NULL under strange circumstances. Gracefully error out instead of crashing. It would also be possible to not error out but users of M_GetAutoloadDir would need to be fixed to check for NULL.
On Linux this can be tested like this:
XDG_DATA_DIR="""" HOME="""" /path/to/chocolate-doom/src/chocolate-doom","In multiple places I might add, just to show how completely wrong this overly complex fix is

Stop this now.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1450,2022-03-11T16:55:15Z,2022-03-12T12:03:24Z,2022-03-12T19:03:19Z,MERGED,True,40,15,5,https://github.com/turol,Gracefully handle SDL_GetPrefPath returning NULL,6,[],https://github.com/chocolate-doom/chocolate-doom/pull/1450,https://github.com/ericcurtin,5,https://github.com/chocolate-doom/chocolate-doom/pull/1450#issuecomment-1065346953,"SDL_GetPrefPath can return NULL under strange circumstances. Gracefully error out instead of crashing. It would also be possible to not error out but users of M_GetAutoloadDir would need to be fixed to check for NULL.
On Linux this can be tested like this:
XDG_DATA_DIR="""" HOME="""" /path/to/chocolate-doom/src/chocolate-doom","It's ok for maintainers such as @turol to repeat the phrase ""completely wrong"" and be completely unapologetic about it.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1454,2022-03-21T09:05:47Z,2022-03-22T19:59:53Z,2022-04-07T14:30:01Z,MERGED,True,8,0,1,https://github.com/patricia-gallardo,Fix for issue #1453,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1454,https://github.com/patricia-gallardo,1,https://github.com/chocolate-doom/chocolate-doom/pull/1454,Check that the pointers are stil pointing at the block before the unlink is performed,Check that the pointers are stil pointing at the block before the unlink is performed,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1454,2022-03-21T09:05:47Z,2022-03-22T19:59:53Z,2022-04-07T14:30:01Z,MERGED,True,8,0,1,https://github.com/patricia-gallardo,Fix for issue #1453,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1454,https://github.com/patricia-gallardo,2,https://github.com/chocolate-doom/chocolate-doom/pull/1454#issuecomment-1074368042,Check that the pointers are stil pointing at the block before the unlink is performed,"The ""native"" implementation of the API seems to be used in mus2mid, midiread, setup and server from my reading of the CMakeLists.txt.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1454,2022-03-21T09:05:47Z,2022-03-22T19:59:53Z,2022-04-07T14:30:01Z,MERGED,True,8,0,1,https://github.com/patricia-gallardo,Fix for issue #1453,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1454,https://github.com/turol,3,https://github.com/chocolate-doom/chocolate-doom/pull/1454#issuecomment-1074370665,Check that the pointers are stil pointing at the block before the unlink is performed,"On second thought, is I_Error the right thing to do here? If we hit these we've already corrupted memory and clean shutdown is probably not a good idea. A straight abort() might be better. Thoughts @fabiangreffrath @fragglet ?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1454,2022-03-21T09:05:47Z,2022-03-22T19:59:53Z,2022-04-07T14:30:01Z,MERGED,True,8,0,1,https://github.com/patricia-gallardo,Fix for issue #1453,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1454,https://github.com/patricia-gallardo,4,https://github.com/chocolate-doom/chocolate-doom/pull/1454#issuecomment-1074373886,Check that the pointers are stil pointing at the block before the unlink is performed,"On second thought, is I_Error the right thing to do here? If we hit these we've already corrupted memory and clean shutdown is probably not a good idea. A straight abort() might be better. Thoughts @fabiangreffrath @fragglet ?

I did this since this is what is done in Z_CheckHeap, but I am not married to this solution :)",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1454,2022-03-21T09:05:47Z,2022-03-22T19:59:53Z,2022-04-07T14:30:01Z,MERGED,True,8,0,1,https://github.com/patricia-gallardo,Fix for issue #1453,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1454,https://github.com/fabiangreffrath,5,https://github.com/chocolate-doom/chocolate-doom/pull/1454#issuecomment-1074414953,Check that the pointers are stil pointing at the block before the unlink is performed,I think I_Error() is okay. It's our clean way out when an error is catched and at least it prints an error message.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1454,2022-03-21T09:05:47Z,2022-03-22T19:59:53Z,2022-04-07T14:30:01Z,MERGED,True,8,0,1,https://github.com/patricia-gallardo,Fix for issue #1453,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1454,https://github.com/turol,6,https://github.com/chocolate-doom/chocolate-doom/pull/1454#issuecomment-1075578765,Check that the pointers are stil pointing at the block before the unlink is performed,Since we're already using I_Error I'll let it pass. But I did check the code and it walks the error handler list and calls them. If someone is actually trying to exploit the code that is probably helpful to them. We should really think of replacing these cases with a puts/abort combination.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1454,2022-03-21T09:05:47Z,2022-03-22T19:59:53Z,2022-04-07T14:30:01Z,MERGED,True,8,0,1,https://github.com/patricia-gallardo,Fix for issue #1453,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1454,https://github.com/fragglet,7,https://github.com/chocolate-doom/chocolate-doom/pull/1454#issuecomment-1081229018,Check that the pointers are stil pointing at the block before the unlink is performed,Thanks for the fix!,True,{'THUMBS_UP': ['https://github.com/patricia-gallardo']}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1454,2022-03-21T09:05:47Z,2022-03-22T19:59:53Z,2022-04-07T14:30:01Z,MERGED,True,8,0,1,https://github.com/patricia-gallardo,Fix for issue #1453,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1454,https://github.com/fabiangreffrath,8,https://github.com/chocolate-doom/chocolate-doom/pull/1454#issuecomment-1091136738,Check that the pointers are stil pointing at the block before the unlink is performed,"BTW, will this get a CVE number?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1454,2022-03-21T09:05:47Z,2022-03-22T19:59:53Z,2022-04-07T14:30:01Z,MERGED,True,8,0,1,https://github.com/patricia-gallardo,Fix for issue #1453,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1454,https://github.com/AXDOOMER,9,https://github.com/chocolate-doom/chocolate-doom/pull/1454#issuecomment-1091814253,Check that the pointers are stil pointing at the block before the unlink is performed,"This itself doesn't fix a vulnerability, but hardens the memory allocator by adding protection against certain heap exploitation techniques that could be used if a heap buffer overflow is found.",True,{'THUMBS_UP': ['https://github.com/fabiangreffrath']}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1458,2022-04-21T02:31:32Z,2022-04-25T14:08:27Z,2022-04-25T15:09:31Z,MERGED,True,79,40,3,https://github.com/mikeday0,Hexen: Add mouse inventory buttons,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/1458,https://github.com/mikeday0,1,https://github.com/chocolate-doom/chocolate-doom/pull/1458,"Duplication of e9e76ed, but for Hexen. All credit to @kraflab. I copied and pasted the Heretic implementation and it seems to work perfectly.","Duplication of e9e76ed, but for Hexen. All credit to @kraflab. I copied and pasted the Heretic implementation and it seems to work perfectly.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1458,2022-04-21T02:31:32Z,2022-04-25T14:08:27Z,2022-04-25T15:09:31Z,MERGED,True,79,40,3,https://github.com/mikeday0,Hexen: Add mouse inventory buttons,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/1458,https://github.com/turol,2,https://github.com/chocolate-doom/chocolate-doom/pull/1458#issuecomment-1105155681,"Duplication of e9e76ed, but for Hexen. All credit to @kraflab. I copied and pasted the Heretic implementation and it seems to work perfectly.","I'd prefer this split into two commits: first add the helper functions, then the mouse buttons.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1458,2022-04-21T02:31:32Z,2022-04-25T14:08:27Z,2022-04-25T15:09:31Z,MERGED,True,79,40,3,https://github.com/mikeday0,Hexen: Add mouse inventory buttons,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/1458,https://github.com/mikeday0,3,https://github.com/chocolate-doom/chocolate-doom/pull/1458#issuecomment-1105164174,"Duplication of e9e76ed, but for Hexen. All credit to @kraflab. I copied and pasted the Heretic implementation and it seems to work perfectly.","I'd prefer this split into two commits: first add the helper functions, then the mouse buttons.

No problem. I assume it's okay to force push to do this?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1458,2022-04-21T02:31:32Z,2022-04-25T14:08:27Z,2022-04-25T15:09:31Z,MERGED,True,79,40,3,https://github.com/mikeday0,Hexen: Add mouse inventory buttons,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/1458,https://github.com/turol,4,https://github.com/chocolate-doom/chocolate-doom/pull/1458#issuecomment-1105181565,"Duplication of e9e76ed, but for Hexen. All credit to @kraflab. I copied and pasted the Heretic implementation and it seems to work perfectly.","Yes, force-pushing your own branches is OK.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1458,2022-04-21T02:31:32Z,2022-04-25T14:08:27Z,2022-04-25T15:09:31Z,MERGED,True,79,40,3,https://github.com/mikeday0,Hexen: Add mouse inventory buttons,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/1458,https://github.com/mikeday0,5,https://github.com/chocolate-doom/chocolate-doom/pull/1458#issuecomment-1107616013,"Duplication of e9e76ed, but for Hexen. All credit to @kraflab. I copied and pasted the Heretic implementation and it seems to work perfectly.","How would you feel about me adding a mouse button for ""use artifact""?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1458,2022-04-21T02:31:32Z,2022-04-25T14:08:27Z,2022-04-25T15:09:31Z,MERGED,True,79,40,3,https://github.com/mikeday0,Hexen: Add mouse inventory buttons,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/1458,https://github.com/fabiangreffrath,6,https://github.com/chocolate-doom/chocolate-doom/pull/1458#issuecomment-1108127703,"Duplication of e9e76ed, but for Hexen. All credit to @kraflab. I copied and pasted the Heretic implementation and it seems to work perfectly.","How would you feel about me adding a mouse button for ""use artifact""?

Fine with me!",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1458,2022-04-21T02:31:32Z,2022-04-25T14:08:27Z,2022-04-25T15:09:31Z,MERGED,True,79,40,3,https://github.com/mikeday0,Hexen: Add mouse inventory buttons,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/1458,https://github.com/fabiangreffrath,7,https://github.com/chocolate-doom/chocolate-doom/pull/1458#issuecomment-1108588272,"Duplication of e9e76ed, but for Hexen. All credit to @kraflab. I copied and pasted the Heretic implementation and it seems to work perfectly.","How would you feel about me adding a mouse button for ""use artifact""?

Would you like to add it to this PR? Because else I'd like to merge this as is.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1458,2022-04-21T02:31:32Z,2022-04-25T14:08:27Z,2022-04-25T15:09:31Z,MERGED,True,79,40,3,https://github.com/mikeday0,Hexen: Add mouse inventory buttons,4,[],https://github.com/chocolate-doom/chocolate-doom/pull/1458,https://github.com/mikeday0,8,https://github.com/chocolate-doom/chocolate-doom/pull/1458#issuecomment-1108610801,"Duplication of e9e76ed, but for Hexen. All credit to @kraflab. I copied and pasted the Heretic implementation and it seems to work perfectly.","How would you feel about me adding a mouse button for ""use artifact""?

Would you like to add it to this PR? Because else I'd like to merge this as is.

Feel free to go ahead with the merge, it's probably cleaner to do this with a separate PR.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1459,2022-04-27T01:40:25Z,2022-04-27T15:06:11Z,2022-04-27T15:06:11Z,MERGED,True,39,2,6,https://github.com/mikeday0,"Heretic/Hexen: Add mouse button for ""use artifact'",3,[],https://github.com/chocolate-doom/chocolate-doom/pull/1459,https://github.com/mikeday0,1,https://github.com/chocolate-doom/chocolate-doom/pull/1459,Follow-up PR to #1458.,Follow-up PR to #1458.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1460,2022-04-27T16:58:45Z,2022-04-27T17:13:04Z,2022-04-27T17:13:20Z,MERGED,True,1,9,3,https://github.com/turol,Fix warnings,3,[],https://github.com/chocolate-doom/chocolate-doom/pull/1460,https://github.com/turol,1,https://github.com/chocolate-doom/chocolate-doom/pull/1460,"New compilers, new warnings","New compilers, new warnings",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1461,2022-04-28T14:34:40Z,2022-05-31T14:31:34Z,2022-05-31T14:31:37Z,MERGED,True,12,8,1,https://github.com/turol,"Fix ""array subscript is above array bounds"" warning in strife",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1461,https://github.com/turol,1,https://github.com/chocolate-doom/chocolate-doom/pull/1461,"GCC 11 and 12 warn about this. Refactor an if ladder into a switch and then explicitly ignore
NUMPOWERS value which should never happen. This makes the compiler shut up.
Note that I haven't actually tried this since I don't really play Strife.","GCC 11 and 12 warn about this. Refactor an if ladder into a switch and then explicitly ignore
NUMPOWERS value which should never happen. This makes the compiler shut up.
Note that I haven't actually tried this since I don't really play Strife.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1461,2022-04-28T14:34:40Z,2022-05-31T14:31:34Z,2022-05-31T14:31:37Z,MERGED,True,12,8,1,https://github.com/turol,"Fix ""array subscript is above array bounds"" warning in strife",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1461,https://github.com/fabiangreffrath,2,https://github.com/chocolate-doom/chocolate-doom/pull/1461#issuecomment-1112426142,"GCC 11 and 12 warn about this. Refactor an if ladder into a switch and then explicitly ignore
NUMPOWERS value which should never happen. This makes the compiler shut up.
Note that I haven't actually tried this since I don't really play Strife.",Couldn't you just increase array size by 1?,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1461,2022-04-28T14:34:40Z,2022-05-31T14:31:34Z,2022-05-31T14:31:37Z,MERGED,True,12,8,1,https://github.com/turol,"Fix ""array subscript is above array bounds"" warning in strife",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1461,https://github.com/turol,3,https://github.com/chocolate-doom/chocolate-doom/pull/1461#issuecomment-1112450013,"GCC 11 and 12 warn about this. Refactor an if ladder into a switch and then explicitly ignore
NUMPOWERS value which should never happen. This makes the compiler shut up.
Note that I haven't actually tried this since I don't really play Strife.","The array gets its size from NUMPOWERS:

  
    
      chocolate-doom/src/strife/d_player.h
    
    
         Line 122
      in
      a7cd250
    
  
  
    

        
          
           int			powers[NUMPOWERS]; 
        
    
  


It's clearly meant to never be actually used.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1461,2022-04-28T14:34:40Z,2022-05-31T14:31:34Z,2022-05-31T14:31:37Z,MERGED,True,12,8,1,https://github.com/turol,"Fix ""array subscript is above array bounds"" warning in strife",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1461,https://github.com/fabiangreffrath,4,https://github.com/chocolate-doom/chocolate-doom/pull/1461#issuecomment-1112528444,"GCC 11 and 12 warn about this. Refactor an if ladder into a switch and then explicitly ignore
NUMPOWERS value which should never happen. This makes the compiler shut up.
Note that I haven't actually tried this since I don't really play Strife.","Yes, I know. You could make it
powers[NUMPOWERS+1]",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1461,2022-04-28T14:34:40Z,2022-05-31T14:31:34Z,2022-05-31T14:31:37Z,MERGED,True,12,8,1,https://github.com/turol,"Fix ""array subscript is above array bounds"" warning in strife",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1461,https://github.com/turol,5,https://github.com/chocolate-doom/chocolate-doom/pull/1461#issuecomment-1112535305,"GCC 11 and 12 warn about this. Refactor an if ladder into a switch and then explicitly ignore
NUMPOWERS value which should never happen. This makes the compiler shut up.
Note that I haven't actually tried this since I don't really play Strife.","That would be wasteful. As far as I can tell NUMPOWERS is never assigned to a variable, only used for the array size and some loops. This is a common C idiom for declaring an enum and iterating over it.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1461,2022-04-28T14:34:40Z,2022-05-31T14:31:34Z,2022-05-31T14:31:37Z,MERGED,True,12,8,1,https://github.com/turol,"Fix ""array subscript is above array bounds"" warning in strife",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1461,https://github.com/turol,6,https://github.com/chocolate-doom/chocolate-doom/pull/1461#issuecomment-1120266229,"GCC 11 and 12 warn about this. Refactor an if ladder into a switch and then explicitly ignore
NUMPOWERS value which should never happen. This makes the compiler shut up.
Note that I haven't actually tried this since I don't really play Strife.",@fragglet @haleyjd ping,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1461,2022-04-28T14:34:40Z,2022-05-31T14:31:34Z,2022-05-31T14:31:37Z,MERGED,True,12,8,1,https://github.com/turol,"Fix ""array subscript is above array bounds"" warning in strife",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1461,https://github.com/turol,7,https://github.com/chocolate-doom/chocolate-doom/pull/1461#issuecomment-1142204488,"GCC 11 and 12 warn about this. Refactor an if ladder into a switch and then explicitly ignore
NUMPOWERS value which should never happen. This makes the compiler shut up.
Note that I haven't actually tried this since I don't really play Strife.","I think silence means no objections...
@fabiangreffrath Can you approve please?",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1461,2022-04-28T14:34:40Z,2022-05-31T14:31:34Z,2022-05-31T14:31:37Z,MERGED,True,12,8,1,https://github.com/turol,"Fix ""array subscript is above array bounds"" warning in strife",1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1461,https://github.com/turol,8,https://github.com/chocolate-doom/chocolate-doom/pull/1461#issuecomment-1142213819,"GCC 11 and 12 warn about this. Refactor an if ladder into a switch and then explicitly ignore
NUMPOWERS value which should never happen. This makes the compiler shut up.
Note that I haven't actually tried this since I don't really play Strife.",I prefer to avoid default labels. In the (this case unlikely) situation that someone adds new values to the enum the existing switches might silently do the wrong think. Without default cases you should at least get a warning that you need to check the code. Modern languages can even enforce this with errors but C/C++ don't.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1462,2022-05-04T15:56:08Z,2022-05-31T14:30:57Z,2022-05-31T14:58:34Z,MERGED,True,175,0,2,https://github.com/turol,Automatically check formatting of modified files,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1462,https://github.com/turol,1,https://github.com/chocolate-doom/chocolate-doom/pull/1462,Part of #1451.,Part of #1451.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1462,2022-05-04T15:56:08Z,2022-05-31T14:30:57Z,2022-05-31T14:58:34Z,MERGED,True,175,0,2,https://github.com/turol,Automatically check formatting of modified files,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1462,https://github.com/turol,2,https://github.com/chocolate-doom/chocolate-doom/pull/1462#issuecomment-1117532272,Part of #1451.,It didn't run after the force push. I wonder what's wrong.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1462,2022-05-04T15:56:08Z,2022-05-31T14:30:57Z,2022-05-31T14:58:34Z,MERGED,True,175,0,2,https://github.com/turol,Automatically check formatting of modified files,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1462,https://github.com/turol,3,https://github.com/chocolate-doom/chocolate-doom/pull/1462#issuecomment-1117538532,Part of #1451.,It didn't fire on force push. Maybe it does on a normal push? The syntax was taken directly from the instructions but it's possible it's wrong.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1462,2022-05-04T15:56:08Z,2022-05-31T14:30:57Z,2022-05-31T14:58:34Z,MERGED,True,175,0,2,https://github.com/turol,Automatically check formatting of modified files,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1462,https://github.com/turol,4,https://github.com/chocolate-doom/chocolate-doom/pull/1462#issuecomment-1142203305,Part of #1451.,@fragglet ping. Is this OK? I'd really like tog get this in to see if it works correctly on PRs.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1462,2022-05-04T15:56:08Z,2022-05-31T14:30:57Z,2022-05-31T14:58:34Z,MERGED,True,175,0,2,https://github.com/turol,Automatically check formatting of modified files,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1462,https://github.com/fragglet,5,https://github.com/chocolate-doom/chocolate-doom/pull/1462#issuecomment-1142207099,Part of #1451.,"Nice! Thanks for doing this, I've used clang-format at work and i thoroughly approve.",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1462,2022-05-04T15:56:08Z,2022-05-31T14:30:57Z,2022-05-31T14:58:34Z,MERGED,True,175,0,2,https://github.com/turol,Automatically check formatting of modified files,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1462,https://github.com/fragglet,6,https://github.com/chocolate-doom/chocolate-doom/pull/1462#issuecomment-1142248419,Part of #1451.,@turol - I just noticed you're still not listed in AUTHORS. Please do add yourself :),True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1463,2022-05-17T03:52:42Z,,2022-05-31T17:02:59Z,OPEN,False,225,80,29,https://github.com/rfomin,Add support for non-latin paths and filenames on Windows,9,[],https://github.com/chocolate-doom/chocolate-doom/pull/1463,https://github.com/rfomin,1,https://github.com/chocolate-doom/chocolate-doom/pull/1463,Adapted from Woof: https://github.com/fabiangreffrath/woof/blob/master/win32/win_fopen.c,Adapted from Woof: https://github.com/fabiangreffrath/woof/blob/master/win32/win_fopen.c,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1463,2022-05-17T03:52:42Z,,2022-05-31T17:02:59Z,OPEN,False,225,80,29,https://github.com/rfomin,Add support for non-latin paths and filenames on Windows,9,[],https://github.com/chocolate-doom/chocolate-doom/pull/1463,https://github.com/mikeday0,2,https://github.com/chocolate-doom/chocolate-doom/pull/1463#issuecomment-1129335160,Adapted from Woof: https://github.com/fabiangreffrath/woof/blob/master/win32/win_fopen.c,I hope this effort is not completely discarded. I think if the error messaging and leaks are addressed it could definitely be used as a basis to be further improved upon. At the very least it will fix the current issue with UTF16 Windows file paths.,True,"{'THUMBS_UP': ['https://github.com/fabiangreffrath', 'https://github.com/fragglet']}"
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1463,2022-05-17T03:52:42Z,,2022-05-31T17:02:59Z,OPEN,False,225,80,29,https://github.com/rfomin,Add support for non-latin paths and filenames on Windows,9,[],https://github.com/chocolate-doom/chocolate-doom/pull/1463,https://github.com/rfomin,3,https://github.com/chocolate-doom/chocolate-doom/pull/1463#issuecomment-1129481973,Adapted from Woof: https://github.com/fabiangreffrath/woof/blob/master/win32/win_fopen.c,This work was inspired by the win_opendir.c file in the Choco win32 directory. I think we shouldn't write a complete set of stdio.h wrappers because of the Windows implementation.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1463,2022-05-17T03:52:42Z,,2022-05-31T17:02:59Z,OPEN,False,225,80,29,https://github.com/rfomin,Add support for non-latin paths and filenames on Windows,9,[],https://github.com/chocolate-doom/chocolate-doom/pull/1463,https://github.com/turol,4,https://github.com/chocolate-doom/chocolate-doom/pull/1463#issuecomment-1142201242,Adapted from Woof: https://github.com/fabiangreffrath/woof/blob/master/win32/win_fopen.c,@fragglet Do you want a transparent or an explicit wrapper?,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1463,2022-05-17T03:52:42Z,,2022-05-31T17:02:59Z,OPEN,False,225,80,29,https://github.com/rfomin,Add support for non-latin paths and filenames on Windows,9,[],https://github.com/chocolate-doom/chocolate-doom/pull/1463,https://github.com/fragglet,5,https://github.com/chocolate-doom/chocolate-doom/pull/1463#issuecomment-1142236916,Adapted from Woof: https://github.com/fabiangreffrath/woof/blob/master/win32/win_fopen.c,Just want to add my voice to the chorus and say that this is great work! I know that a switch to using a wrapper might require quite a bit of refactoring work but it's definitely worth it. I will be delighted to see the problems with non-Latin paths fixed at last. Thank you!,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1463,2022-05-17T03:52:42Z,,2022-05-31T17:02:59Z,OPEN,False,225,80,29,https://github.com/rfomin,Add support for non-latin paths and filenames on Windows,9,[],https://github.com/chocolate-doom/chocolate-doom/pull/1463,https://github.com/rfomin,6,https://github.com/chocolate-doom/chocolate-doom/pull/1463#issuecomment-1142391508,Adapted from Woof: https://github.com/fabiangreffrath/woof/blob/master/win32/win_fopen.c,I rewrote it to use explicit wrappers. I hope I haven't missed anything.,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1464,2022-05-20T08:52:21Z,2022-05-20T08:53:37Z,2022-05-20T08:54:07Z,CLOSED,False,9346,7066,233,https://github.com/atsb,Good Luck for Merging Widescreen!,103,[],https://github.com/chocolate-doom/chocolate-doom/pull/1464,https://github.com/atsb,1,https://github.com/chocolate-doom/chocolate-doom/pull/1464,"Here we goooooooo!
Widescreen support + lots of fixes that were required from Crispy and Inter.  A little magic from me with some sprinkles and we're done!","Here we goooooooo!
Widescreen support + lots of fixes that were required from Crispy and Inter.  A little magic from me with some sprinkles and we're done!",True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1464,2022-05-20T08:52:21Z,2022-05-20T08:53:37Z,2022-05-20T08:54:07Z,CLOSED,False,9346,7066,233,https://github.com/atsb,Good Luck for Merging Widescreen!,103,[],https://github.com/chocolate-doom/chocolate-doom/pull/1464,https://github.com/atsb,2,https://github.com/chocolate-doom/chocolate-doom/pull/1464#issuecomment-1132650908,"Here we goooooooo!
Widescreen support + lots of fixes that were required from Crispy and Inter.  A little magic from me with some sprinkles and we're done!",Serves me right for not paying attention :D,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1465,2022-05-21T21:59:48Z,2022-05-29T18:00:20Z,2022-05-29T19:25:40Z,MERGED,True,15,0,1,https://github.com/Mailaender,Completed the AppStream metadata,2,[],https://github.com/chocolate-doom/chocolate-doom/pull/1465,https://github.com/Mailaender,1,https://github.com/chocolate-doom/chocolate-doom/pull/1465,See https://freedesktop.org/software/appstream/docs/ and https://hughsie.github.io/oars/,See https://freedesktop.org/software/appstream/docs/ and https://hughsie.github.io/oars/,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1467,2022-05-23T20:21:16Z,2022-05-29T17:05:05Z,2022-05-29T17:38:36Z,MERGED,True,2,0,1,https://github.com/Mailaender,Added mandatory fields to AppSteam metadata,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1467,https://github.com/Mailaender,1,https://github.com/chocolate-doom/chocolate-doom/pull/1467,Required for flathub/flathub#3185,Required for flathub/flathub#3185,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1467,2022-05-23T20:21:16Z,2022-05-29T17:05:05Z,2022-05-29T17:38:36Z,MERGED,True,2,0,1,https://github.com/Mailaender,Added mandatory fields to AppSteam metadata,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1467,https://github.com/fragglet,2,https://github.com/chocolate-doom/chocolate-doom/pull/1467#issuecomment-1140487983,Required for flathub/flathub#3185,Thank you!,True,{}
chocolate-doom/chocolate-doom,https://github.com/chocolate-doom/chocolate-doom,1468,2022-05-30T16:30:14Z,,2022-05-31T14:28:23Z,OPEN,False,1,1,1,https://github.com/the-sageman,Fix out of bounds bug in the keyboard bind handling of setup,1,[],https://github.com/chocolate-doom/chocolate-doom/pull/1468,https://github.com/the-sageman,1,https://github.com/chocolate-doom/chocolate-doom/pull/1468,,,True,{}
