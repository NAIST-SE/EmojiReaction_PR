nothings/stb,https://github.com/nothings/stb,253,2016-03-02T21:07:48Z,2016-04-02T11:52:05Z,2016-04-02T11:52:05Z,MERGED,True,30,21,2,https://github.com/tulrich,"Allocate large structures on the heap, not stack",2,"['4 enhancement', '1 stb_image']",https://github.com/nothings/stb/pull/253,https://github.com/tulrich,1,https://github.com/nothings/stb/pull/253,"This is so we can compile in our environment, which limits stack frames to < 16Kb.","This is so we can compile in our environment, which limits stack frames to < 16Kb.",True,{}
nothings/stb,https://github.com/nothings/stb,255,2016-03-10T18:51:22Z,2016-04-02T04:46:42Z,2016-04-02T04:46:42Z,MERGED,True,1,0,1,https://github.com/corporateshark,Added PoissonGenerator.h,1,[],https://github.com/nothings/stb/pull/255,https://github.com/corporateshark,1,https://github.com/nothings/stb/pull/255,"Header-only Poisson disk generator library
https://github.com/corporateshark/poisson-disk-generator","Header-only Poisson disk generator library
https://github.com/corporateshark/poisson-disk-generator",True,{}
nothings/stb,https://github.com/nothings/stb,257,2016-03-11T12:56:14Z,2016-04-02T11:52:05Z,2016-04-02T11:52:06Z,MERGED,True,2,2,1,https://github.com/kinetiknz,Fix typo in stbi__parse_uncompressed_block,1,"['2 bug', '1 stb_image']",https://github.com/nothings/stb/pull/257,https://github.com/kinetiknz,1,https://github.com/nothings/stb/pull/257,,,True,{}
nothings/stb,https://github.com/nothings/stb,258,2016-03-14T15:28:44Z,2016-03-14T15:30:55Z,2016-03-14T15:30:55Z,CLOSED,False,1,1,1,https://github.com/karimnaaji,Fix uniform type for model_view matrix,1,[],https://github.com/nothings/stb/pull/258,https://github.com/karimnaaji,1,https://github.com/nothings/stb/pull/258,,,True,{}
nothings/stb,https://github.com/nothings/stb,258,2016-03-14T15:28:44Z,2016-03-14T15:30:55Z,2016-03-14T15:30:55Z,CLOSED,False,1,1,1,https://github.com/karimnaaji,Fix uniform type for model_view matrix,1,[],https://github.com/nothings/stb/pull/258,https://github.com/karimnaaji,2,https://github.com/nothings/stb/pull/258#issuecomment-196369243,,"duplicate of #197, closing",True,{}
nothings/stb,https://github.com/nothings/stb,261,2016-03-17T08:28:24Z,2016-04-02T11:52:06Z,2016-04-02T11:52:06Z,MERGED,True,6,0,1,https://github.com/manxorist,Fix memory leak in decode_residue() and inverse_mdct() when redefining temp_alloc() and temp_free(),1,"['2 bug', '1 stb_vorbis']",https://github.com/nothings/stb/pull/261,https://github.com/manxorist,1,https://github.com/nothings/stb/pull/261,"Fixes #260:
temp_alloc() and temp_free() are documented as customization points in section ""MEMORY ALLOCATION"" (stb_vorbis.c:81).
However, in decode_residue() and inverse_mdct() (via temp_block_array() and temp_alloc() respectively), stb_vorbis allocates temporary memory but does not call temp_free() when finished. It does call temp_alloc_restore() though, but there is no sane way to provide an implementation thereof when using a malloc()/free()-like allocation backend.
Adding calls to temp_free() before the respective calls to temp_alloc_restore() is safe, because in case of a non-empty temp_alloc_restore() implementation, temp_free() would simply be implemented empty (the current implementation of temp_*() is fine in this regard). That way, all possible temporary memory allocation schemes (i.e. alloca(), custom provided alloc_buffer, malloc()) are handled properly.
Add the appropriate temp_free() calls.","Fixes #260:
temp_alloc() and temp_free() are documented as customization points in section ""MEMORY ALLOCATION"" (stb_vorbis.c:81).
However, in decode_residue() and inverse_mdct() (via temp_block_array() and temp_alloc() respectively), stb_vorbis allocates temporary memory but does not call temp_free() when finished. It does call temp_alloc_restore() though, but there is no sane way to provide an implementation thereof when using a malloc()/free()-like allocation backend.
Adding calls to temp_free() before the respective calls to temp_alloc_restore() is safe, because in case of a non-empty temp_alloc_restore() implementation, temp_free() would simply be implemented empty (the current implementation of temp_*() is fine in this regard). That way, all possible temporary memory allocation schemes (i.e. alloca(), custom provided alloc_buffer, malloc()) are handled properly.
Add the appropriate temp_free() calls.",True,{}
nothings/stb,https://github.com/nothings/stb,266,2016-03-24T17:26:40Z,2016-04-02T11:52:06Z,2016-04-02T11:52:06Z,MERGED,True,1,2,1,https://github.com/manxorist,stb_vorbis: Fix memory leak in start_decoder().,1,"['2 bug', '1 stb_vorbis']",https://github.com/nothings/stb/pull/266,https://github.com/manxorist,1,https://github.com/nothings/stb/pull/266,Fixes issue #265.,Fixes issue #265.,True,{}
nothings/stb,https://github.com/nothings/stb,269,2016-03-26T08:18:53Z,2016-03-26T11:09:39Z,2016-03-26T11:12:57Z,CLOSED,False,6,5,1,https://github.com/tido64,Fixed dangling else warnings.,1,[],https://github.com/nothings/stb/pull/269,https://github.com/tido64,1,https://github.com/nothings/stb/pull/269,Fixed -Wdangling-else (add explicit braces to avoid dangling else) thrown by Clang.,Fixed -Wdangling-else (add explicit braces to avoid dangling else) thrown by Clang.,True,{}
nothings/stb,https://github.com/nothings/stb,269,2016-03-26T08:18:53Z,2016-03-26T11:09:39Z,2016-03-26T11:12:57Z,CLOSED,False,6,5,1,https://github.com/tido64,Fixed dangling else warnings.,1,[],https://github.com/nothings/stb/pull/269,https://github.com/nothings,2,https://github.com/nothings/stb/pull/269#issuecomment-201734436,Fixed -Wdangling-else (add explicit braces to avoid dangling else) thrown by Clang.,What do the warnings look like?,True,{}
nothings/stb,https://github.com/nothings/stb,269,2016-03-26T08:18:53Z,2016-03-26T11:09:39Z,2016-03-26T11:12:57Z,CLOSED,False,6,5,1,https://github.com/tido64,Fixed dangling else warnings.,1,[],https://github.com/nothings/stb/pull/269,https://github.com/tido64,3,https://github.com/nothings/stb/pull/269#issuecomment-201745564,Fixed -Wdangling-else (add explicit braces to avoid dangling else) thrown by Clang.,"lib/imgui/stb_truetype.h:1891:4: error: add explicit braces to avoid dangling else [-Werror,-Wdangling-else]
   else
   ^
lib/imgui/stb_truetype.h:1889:4: error: add explicit braces to avoid dangling else [-Werror,-Wdangling-else]
   else if (x0 >= x+1)
   ^
lib/imgui/stb_truetype.h:1887:4: error: add explicit braces to avoid dangling else [-Werror,-Wdangling-else]
   else if (x0 <= x)
   ^
lib/imgui/stb_truetype.h:1885:4: error: add explicit braces to avoid dangling else [-Werror,-Wdangling-else]
   else if (x0 == x+1)
   ^
4 errors generated.",True,{}
nothings/stb,https://github.com/nothings/stb,269,2016-03-26T08:18:53Z,2016-03-26T11:09:39Z,2016-03-26T11:12:57Z,CLOSED,False,6,5,1,https://github.com/tido64,Fixed dangling else warnings.,1,[],https://github.com/nothings/stb/pull/269,https://github.com/tido64,4,https://github.com/nothings/stb/pull/269#issuecomment-201745898,Fixed -Wdangling-else (add explicit braces to avoid dangling else) thrown by Clang.,"The compiler in question:
$ clang --version
Apple LLVM version 7.0.2 (clang-700.1.81)
Target: x86_64-apple-darwin14.5.0
Thread model: posix",True,{}
nothings/stb,https://github.com/nothings/stb,269,2016-03-26T08:18:53Z,2016-03-26T11:09:39Z,2016-03-26T11:12:57Z,CLOSED,False,6,5,1,https://github.com/tido64,Fixed dangling else warnings.,1,[],https://github.com/nothings/stb/pull/269,https://github.com/nothings,5,https://github.com/nothings/stb/pull/269#issuecomment-201752575,Fixed -Wdangling-else (add explicit braces to avoid dangling else) thrown by Clang.,"Are you using your own definition of STBTT_assert?
As far as I can see on the net, dangling else is supposed to be for 'if(x) if(y) z; else w;' where there's two if()s in a row so it's possible to be confused about which one the 'else' binds to. But this code is strictly 'if() else if() else if() else'. So the only way I see for this to happen (if my understanding of when this happens is right) is if you have either an unsafe definition of STBTT_assert which has an 'if' without a matching 'else', or if it does have a 'safe' definition with an if and an else, but they're at top level, instead of being wrapped in a do..while(0) or a similar safe construction, which is now necessary now that many compilers complain in various circumstances when you use a '#define foo if(x)y; else' type of definition.
Now, if this is using apple's definition of assert(), then it's their bug, but it's probably not going to make sense to wait for it to be fixed. But if it's your definition, you should just fix your definition.",True,{}
nothings/stb,https://github.com/nothings/stb,269,2016-03-26T08:18:53Z,2016-03-26T11:09:39Z,2016-03-26T11:12:57Z,CLOSED,False,6,5,1,https://github.com/tido64,Fixed dangling else warnings.,1,[],https://github.com/nothings/stb/pull/269,https://github.com/tido64,6,https://github.com/nothings/stb/pull/269#issuecomment-201754033,Fixed -Wdangling-else (add explicit braces to avoid dangling else) thrown by Clang.,"I don't have my own definition of assert, so it's probably Apple's as you say. From what I've found, it's defined as:
#define assert(e) \
    (__builtin_expect(!(e), 0) ? __assert_rtn(__func__, __FILE__, __LINE__, #e) : (void)0)",True,{}
nothings/stb,https://github.com/nothings/stb,269,2016-03-26T08:18:53Z,2016-03-26T11:09:39Z,2016-03-26T11:12:57Z,CLOSED,False,6,5,1,https://github.com/tido64,Fixed dangling else warnings.,1,[],https://github.com/nothings/stb/pull/269,https://github.com/nothings,7,https://github.com/nothings/stb/pull/269#issuecomment-201757469,Fixed -Wdangling-else (add explicit braces to avoid dangling else) thrown by Clang.,"Hmm, then the explanation of the dangling else warning on the net must be wrong. Mysterious.",True,{}
nothings/stb,https://github.com/nothings/stb,269,2016-03-26T08:18:53Z,2016-03-26T11:09:39Z,2016-03-26T11:12:57Z,CLOSED,False,6,5,1,https://github.com/tido64,Fixed dangling else warnings.,1,[],https://github.com/nothings/stb/pull/269,https://github.com/tido64,8,https://github.com/nothings/stb/pull/269#issuecomment-201761846,Fixed -Wdangling-else (add explicit braces to avoid dangling else) thrown by Clang.,I found the real culprit of the warning. Closing this request.,True,{}
nothings/stb,https://github.com/nothings/stb,269,2016-03-26T08:18:53Z,2016-03-26T11:09:39Z,2016-03-26T11:12:57Z,CLOSED,False,6,5,1,https://github.com/tido64,Fixed dangling else warnings.,1,[],https://github.com/nothings/stb/pull/269,https://github.com/nothings,9,https://github.com/nothings/stb/pull/269#issuecomment-201762390,Fixed -Wdangling-else (add explicit braces to avoid dangling else) thrown by Clang.,Thanks for investigating it.,True,{}
nothings/stb,https://github.com/nothings/stb,269,2016-03-26T08:18:53Z,2016-03-26T11:09:39Z,2016-03-26T11:12:57Z,CLOSED,False,6,5,1,https://github.com/tido64,Fixed dangling else warnings.,1,[],https://github.com/nothings/stb/pull/269,https://github.com/tido64,10,https://github.com/nothings/stb/pull/269#issuecomment-201764172,Fixed -Wdangling-else (add explicit braces to avoid dangling else) thrown by Clang.,Thanks for your time.,True,{}
nothings/stb,https://github.com/nothings/stb,271,2016-04-02T18:14:57Z,2016-04-02T20:48:41Z,2016-04-02T20:48:41Z,CLOSED,False,1,0,1,https://github.com/ocornut,stb_truetype: very minor unused variable warning fix in V2 rasterizer path,1,[],https://github.com/nothings/stb/pull/271,https://github.com/ocornut,1,https://github.com/nothings/stb/pull/271,"(That or remove ""vsubsample"" name in declaration, I forgot if Ansi C allows that.)","(That or remove ""vsubsample"" name in declaration, I forgot if Ansi C allows that.)",True,{}
nothings/stb,https://github.com/nothings/stb,271,2016-04-02T18:14:57Z,2016-04-02T20:48:41Z,2016-04-02T20:48:41Z,CLOSED,False,1,0,1,https://github.com/ocornut,stb_truetype: very minor unused variable warning fix in V2 rasterizer path,1,[],https://github.com/nothings/stb/pull/271,https://github.com/nothings,2,https://github.com/nothings/stb/pull/271#issuecomment-204803001,"(That or remove ""vsubsample"" name in declaration, I forgot if Ansi C allows that.)","Fixed a different way, since unused variable suppression varies between compilers
(C89 does allow omitting unused parameter names, but I avoid it for style reasons.)",True,{}
nothings/stb,https://github.com/nothings/stb,272,2016-04-02T20:09:01Z,2016-04-02T20:49:16Z,2016-04-13T07:05:29Z,CLOSED,False,1,1,1,https://github.com/sergof,Fix typo in README,1,[],https://github.com/nothings/stb/pull/272,https://github.com/sergof,1,https://github.com/nothings/stb/pull/272,"Small change, but since there is an actual stb_image.c in the repository and it's deprecated the readme should be talking about stb_image.h.
It confused me for a second :)","Small change, but since there is an actual stb_image.c in the repository and it's deprecated the readme should be talking about stb_image.h.
It confused me for a second :)",True,{}
nothings/stb,https://github.com/nothings/stb,272,2016-04-02T20:09:01Z,2016-04-02T20:49:16Z,2016-04-13T07:05:29Z,CLOSED,False,1,1,1,https://github.com/sergof,Fix typo in README,1,[],https://github.com/nothings/stb/pull/272,https://github.com/nothings,2,https://github.com/nothings/stb/pull/272#issuecomment-204803037,"Small change, but since there is an actual stb_image.c in the repository and it's deprecated the readme should be talking about stb_image.h.
It confused me for a second :)","Fixed (readme.md is a generated file so I didn't actually merge this PR, just fixed it from scratch).",True,{}
nothings/stb,https://github.com/nothings/stb,273,2016-04-02T22:10:12Z,2016-08-27T19:33:13Z,2016-08-27T19:33:13Z,MERGED,True,35,26,1,https://github.com/ocornut,stb_textedit: Add support for custom move word left/right handlers,1,"['4 enhancement', '1 stb library w/no tag']",https://github.com/nothings/stb/pull/273,https://github.com/ocornut,1,https://github.com/nothings/stb/pull/273,"EDIT Minor edits applied since first posting.
Sorry to submit that right after you've done a bunch yesterday!
This patch allows the user to optionally define two functions to override ctrl-arrow style per-word movement, STB_TEXTEDIT_MOVEWORDLEFT(obj,i) and STB_TEXTEDIT_MOVEWORDRIGHT(obj,i)
STB_TEXTEDIT_IS_SPACE(ch) is still supported and will generate default handlers for those, matching the existing code.
The reasoning is to allow applications to:

Support OS X style word-jumping (move-to-next-word moves to the end of the current word instead of moving you to the beginning of the next word) to have an app be more friendly to OS. Someone made various mods to ImGui to match OS X behaviour and that was the only change they wanted that had to be done on textedit-side.
Perform other/custom tailored word-jumping, where different tokens in a programming language may lead to slightly different moving behaviour.

Minor notes:

I called them MOVEWORDLEFT/MOVEWORDRIGHT to match the WORDLEFT-WORDRIGHT terminology expressed in the public key definitions, whereas some of the internal code used ""previous"" ""next"". Also note that the existing STB_TEXTEDIT_IS_SPACE with underscore should be called ``STB_TEXTEDIT_ISSPACE` to strictly be consistent with the other function names. It doesn't really matter, but that is why the new define don't have underscores.
I put the ""burden"" of passing state->cursor-1 or state->cursor+1 to the main key handling switch in textedit. Depending what you feel is best, the switch could pass state->cursor to both those functions and leave it to the handlers to do -1/+1. It may actually make more sense like that! (just realizing this as I'm typing this message, I could amend the PR for that if you want).
Coding style: Some functions near the affected code used _arg for function arguments instead of arg commonly used in the rest of the code. I haven't changed that to minimize the patch overhead but kept one argument name c also to reduce the patch size and make it easier for you to parse it. I'm not sure if there was a reasoning for the extra underscore or if it came accidentally with another patch. While you are there you might want to rename the very few occurences of _str to str to make the code more consistent.

Thanks!","EDIT Minor edits applied since first posting.
Sorry to submit that right after you've done a bunch yesterday!
This patch allows the user to optionally define two functions to override ctrl-arrow style per-word movement, STB_TEXTEDIT_MOVEWORDLEFT(obj,i) and STB_TEXTEDIT_MOVEWORDRIGHT(obj,i)
STB_TEXTEDIT_IS_SPACE(ch) is still supported and will generate default handlers for those, matching the existing code.
The reasoning is to allow applications to:

Support OS X style word-jumping (move-to-next-word moves to the end of the current word instead of moving you to the beginning of the next word) to have an app be more friendly to OS. Someone made various mods to ImGui to match OS X behaviour and that was the only change they wanted that had to be done on textedit-side.
Perform other/custom tailored word-jumping, where different tokens in a programming language may lead to slightly different moving behaviour.

Minor notes:

I called them MOVEWORDLEFT/MOVEWORDRIGHT to match the WORDLEFT-WORDRIGHT terminology expressed in the public key definitions, whereas some of the internal code used ""previous"" ""next"". Also note that the existing STB_TEXTEDIT_IS_SPACE with underscore should be called ``STB_TEXTEDIT_ISSPACE` to strictly be consistent with the other function names. It doesn't really matter, but that is why the new define don't have underscores.
I put the ""burden"" of passing state->cursor-1 or state->cursor+1 to the main key handling switch in textedit. Depending what you feel is best, the switch could pass state->cursor to both those functions and leave it to the handlers to do -1/+1. It may actually make more sense like that! (just realizing this as I'm typing this message, I could amend the PR for that if you want).
Coding style: Some functions near the affected code used _arg for function arguments instead of arg commonly used in the rest of the code. I haven't changed that to minimize the patch overhead but kept one argument name c also to reduce the patch size and make it easier for you to parse it. I'm not sure if there was a reasoning for the extra underscore or if it came accidentally with another patch. While you are there you might want to rename the very few occurences of _str to str to make the code more consistent.

Thanks!",True,{}
nothings/stb,https://github.com/nothings/stb,273,2016-04-02T22:10:12Z,2016-08-27T19:33:13Z,2016-08-27T19:33:13Z,MERGED,True,35,26,1,https://github.com/ocornut,stb_textedit: Add support for custom move word left/right handlers,1,"['4 enhancement', '1 stb library w/no tag']",https://github.com/nothings/stb/pull/273,https://github.com/nothings,2,https://github.com/nothings/stb/pull/273#issuecomment-242936252,"EDIT Minor edits applied since first posting.
Sorry to submit that right after you've done a bunch yesterday!
This patch allows the user to optionally define two functions to override ctrl-arrow style per-word movement, STB_TEXTEDIT_MOVEWORDLEFT(obj,i) and STB_TEXTEDIT_MOVEWORDRIGHT(obj,i)
STB_TEXTEDIT_IS_SPACE(ch) is still supported and will generate default handlers for those, matching the existing code.
The reasoning is to allow applications to:

Support OS X style word-jumping (move-to-next-word moves to the end of the current word instead of moving you to the beginning of the next word) to have an app be more friendly to OS. Someone made various mods to ImGui to match OS X behaviour and that was the only change they wanted that had to be done on textedit-side.
Perform other/custom tailored word-jumping, where different tokens in a programming language may lead to slightly different moving behaviour.

Minor notes:

I called them MOVEWORDLEFT/MOVEWORDRIGHT to match the WORDLEFT-WORDRIGHT terminology expressed in the public key definitions, whereas some of the internal code used ""previous"" ""next"". Also note that the existing STB_TEXTEDIT_IS_SPACE with underscore should be called ``STB_TEXTEDIT_ISSPACE` to strictly be consistent with the other function names. It doesn't really matter, but that is why the new define don't have underscores.
I put the ""burden"" of passing state->cursor-1 or state->cursor+1 to the main key handling switch in textedit. Depending what you feel is best, the switch could pass state->cursor to both those functions and leave it to the handlers to do -1/+1. It may actually make more sense like that! (just realizing this as I'm typing this message, I could amend the PR for that if you want).
Coding style: Some functions near the affected code used _arg for function arguments instead of arg commonly used in the rest of the code. I haven't changed that to minimize the patch overhead but kept one argument name c also to reduce the patch size and make it easier for you to parse it. I'm not sure if there was a reasoning for the extra underscore or if it came accidentally with another patch. While you are there you might want to rename the very few occurences of _str to str to make the code more consistent.

Thanks!","I cleaned up the obvious initial-underscore identifiers, and I removed the forced -1/+1 in the keyhandler as you suggested so when you switch to this version you'll need to adjust your existing handlers to compensate.
Unfortunately I'm not set up to test textedit, so these changes compile but it's possible I broke something.",True,{'THUMBS_UP': ['https://github.com/ocornut']}
nothings/stb,https://github.com/nothings/stb,275,2016-04-05T07:13:30Z,2016-04-05T07:28:56Z,2016-04-05T07:29:28Z,CLOSED,False,2,2,1,https://github.com/LysanderGG,stb_image_write: Remove useless stbiw__paeth calls in stbi_write_png_to_mem,1,['1 stb_image_write'],https://github.com/nothings/stb/pull/275,https://github.com/LysanderGG,1,https://github.com/nothings/stb/pull/275,"If I am not mistaken,
stbiw__paeth(a, 0, 0) gives a
stbiw__paeth(0, b, 0) gives b
I also removed a cast to signed char as it was used in one case only.
If there were a reason for this, please put it back.
Thank you for your time and your great libs!","If I am not mistaken,
stbiw__paeth(a, 0, 0) gives a
stbiw__paeth(0, b, 0) gives b
I also removed a cast to signed char as it was used in one case only.
If there were a reason for this, please put it back.
Thank you for your time and your great libs!",True,{}
nothings/stb,https://github.com/nothings/stb,275,2016-04-05T07:13:30Z,2016-04-05T07:28:56Z,2016-04-05T07:29:28Z,CLOSED,False,2,2,1,https://github.com/LysanderGG,stb_image_write: Remove useless stbiw__paeth calls in stbi_write_png_to_mem,1,['1 stb_image_write'],https://github.com/nothings/stb/pull/275,https://github.com/nothings,2,https://github.com/nothings/stb/pull/275#issuecomment-205696670,"If I am not mistaken,
stbiw__paeth(a, 0, 0) gives a
stbiw__paeth(0, b, 0) gives b
I also removed a cast to signed char as it was used in one case only.
If there were a reason for this, please put it back.
Thank you for your time and your great libs!","I'm rejecting this patch because:

the stbiw__paeth(0) calls are not on the critical path; they're called on the first row and first column of pixels; so it's not performance critical to optimize
they are the cases where the paeth filter would otherwise sample off the edge. still calling stbiw__paeth but passing in 0 makes explicit that this is still the stbiw__paeth (i.e. writing it this way makes it most explicitly map to the specification)
the compiler can optimize the stbiw__paeth() calls with 0s in them without us doing it ourselves anyway (by inlining and then simplifying out the 0s)

I have to assume the signed-char cast is there for a reason; guessing it's not, releasing it, and having it break in some compiler somewhere would be a waste of everyone's time, whereas removing it doesn't really accomplish much.
Feel free to reply further.",True,{}
nothings/stb,https://github.com/nothings/stb,278,2016-04-07T13:18:12Z,2016-08-27T19:12:31Z,2016-10-16T09:46:30Z,CLOSED,False,1,1,1,https://github.com/ocornut,stb_vorbis: Fixed PS4/FreeBSD missing malloc.h,1,"['2 bug', '1 stb_vorbis']",https://github.com/nothings/stb/pull/278,https://github.com/ocornut,1,https://github.com/nothings/stb/pull/278,"Including malloc.h failed on PS4/Orbis target.
AFAIK PS4 uses FreeBsd and testing for for __FreeBSD__ should be right but I haven't tested on an actual ""normal"" FreeBSD system. Some man pages refer to stdlib.h (which would already be included), some refer to a sys/malloc.h (there's no sys/malloc.h on PS4 FreeBSD at least).
Could possibly replace the test for __FreeBSD__ by __ORBIS__ to be on the safe side if you can't test on FreeBSD and whoever may be using FreeBSD may or not apply their own fix later.","Including malloc.h failed on PS4/Orbis target.
AFAIK PS4 uses FreeBsd and testing for for __FreeBSD__ should be right but I haven't tested on an actual ""normal"" FreeBSD system. Some man pages refer to stdlib.h (which would already be included), some refer to a sys/malloc.h (there's no sys/malloc.h on PS4 FreeBSD at least).
Could possibly replace the test for __FreeBSD__ by __ORBIS__ to be on the safe side if you can't test on FreeBSD and whoever may be using FreeBSD may or not apply their own fix later.",True,{}
nothings/stb,https://github.com/nothings/stb,278,2016-04-07T13:18:12Z,2016-08-27T19:12:31Z,2016-10-16T09:46:30Z,CLOSED,False,1,1,1,https://github.com/ocornut,stb_vorbis: Fixed PS4/FreeBSD missing malloc.h,1,"['2 bug', '1 stb_vorbis']",https://github.com/nothings/stb/pull/278,https://github.com/DanielGibson,2,https://github.com/nothings/stb/pull/278#issuecomment-215711253,"Including malloc.h failed on PS4/Orbis target.
AFAIK PS4 uses FreeBsd and testing for for __FreeBSD__ should be right but I haven't tested on an actual ""normal"" FreeBSD system. Some man pages refer to stdlib.h (which would already be included), some refer to a sys/malloc.h (there's no sys/malloc.h on PS4 FreeBSD at least).
Could possibly replace the test for __FreeBSD__ by __ORBIS__ to be on the safe side if you can't test on FreeBSD and whoever may be using FreeBSD may or not apply their own fix later.","Real FreeBSD wants stdlib.h, not malloc.h (it'll give you deprecation warnings when using malloc.h).
No idea about PS4.",True,{}
nothings/stb,https://github.com/nothings/stb,278,2016-04-07T13:18:12Z,2016-08-27T19:12:31Z,2016-10-16T09:46:30Z,CLOSED,False,1,1,1,https://github.com/ocornut,stb_vorbis: Fixed PS4/FreeBSD missing malloc.h,1,"['2 bug', '1 stb_vorbis']",https://github.com/nothings/stb/pull/278,https://github.com/nothings,3,https://github.com/nothings/stb/pull/278#issuecomment-242935281,"Including malloc.h failed on PS4/Orbis target.
AFAIK PS4 uses FreeBsd and testing for for __FreeBSD__ should be right but I haven't tested on an actual ""normal"" FreeBSD system. Some man pages refer to stdlib.h (which would already be included), some refer to a sys/malloc.h (there's no sys/malloc.h on PS4 FreeBSD at least).
Could possibly replace the test for __FreeBSD__ by __ORBIS__ to be on the safe side if you can't test on FreeBSD and whoever may be using FreeBSD may or not apply their own fix later.",I've switched the '#include <malloc.h>' to be a list of compilers/platforms that require it. Please open new issues/PRs to report platforms that need it.,True,{}
nothings/stb,https://github.com/nothings/stb,278,2016-04-07T13:18:12Z,2016-08-27T19:12:31Z,2016-10-16T09:46:30Z,CLOSED,False,1,1,1,https://github.com/ocornut,stb_vorbis: Fixed PS4/FreeBSD missing malloc.h,1,"['2 bug', '1 stb_vorbis']",https://github.com/nothings/stb/pull/278,https://github.com/ocornut,4,https://github.com/nothings/stb/pull/278#issuecomment-254037342,"Including malloc.h failed on PS4/Orbis target.
AFAIK PS4 uses FreeBsd and testing for for __FreeBSD__ should be right but I haven't tested on an actual ""normal"" FreeBSD system. Some man pages refer to stdlib.h (which would already be included), some refer to a sys/malloc.h (there's no sys/malloc.h on PS4 FreeBSD at least).
Could possibly replace the test for __FreeBSD__ by __ORBIS__ to be on the safe side if you can't test on FreeBSD and whoever may be using FreeBSD may or not apply their own fix later.","Just updated today and it works on all my platforms including PS4/Orbis with no changes.
(Currently used block. It works. No action needed)
   #ifdef _MSC_VER
      #include <malloc.h>
   #endif
   #if defined(__linux__) || defined(__linux) || defined(__EMSCRIPTEN__)
      #include <alloca.h>
   #endif

Thanks Sean!",True,{}
nothings/stb,https://github.com/nothings/stb,286,2016-04-19T11:27:59Z,2016-04-19T14:57:08Z,2016-04-19T14:57:08Z,MERGED,True,2,1,1,https://github.com/tversteeg,Add @vurtun his nuklear library to Other Libraries,2,[],https://github.com/nothings/stb/pull/286,https://github.com/tversteeg,1,https://github.com/nothings/stb/pull/286,"I think this library fits perfectly

It's a single source file
The license is included in the file itself
It's a really useful tool","I think this library fits perfectly

It's a single source file
The license is included in the file itself
It's a really useful tool",True,{}
nothings/stb,https://github.com/nothings/stb,286,2016-04-19T11:27:59Z,2016-04-19T14:57:08Z,2016-04-19T14:57:08Z,MERGED,True,2,1,1,https://github.com/tversteeg,Add @vurtun his nuklear library to Other Libraries,2,[],https://github.com/nothings/stb/pull/286,https://github.com/nothings,2,https://github.com/nothings/stb/pull/286#issuecomment-211931110,"I think this library fits perfectly

It's a single source file
The license is included in the file itself
It's a really useful tool","Is it only usable from C, or is it usable from C/C++?",True,{}
nothings/stb,https://github.com/nothings/stb,286,2016-04-19T11:27:59Z,2016-04-19T14:57:08Z,2016-04-19T14:57:08Z,MERGED,True,2,1,1,https://github.com/tversteeg,Add @vurtun his nuklear library to Other Libraries,2,[],https://github.com/nothings/stb/pull/286,https://github.com/tversteeg,3,https://github.com/nothings/stb/pull/286#issuecomment-211933414,"I think this library fits perfectly

It's a single source file
The license is included in the file itself
It's a really useful tool","It is usable by both, my mistake. I will change it.",True,{}
nothings/stb,https://github.com/nothings/stb,288,2016-04-20T13:20:36Z,2016-06-12T13:24:35Z,2016-06-12T17:27:54Z,CLOSED,False,1,0,1,https://github.com/Gargaj,add jsonxx,1,[],https://github.com/nothings/stb/pull/288,https://github.com/Gargaj,1,https://github.com/nothings/stb/pull/288,Just a very nice library,Just a very nice library,True,{}
nothings/stb,https://github.com/nothings/stb,288,2016-04-20T13:20:36Z,2016-06-12T13:24:35Z,2016-06-12T17:27:54Z,CLOSED,False,1,0,1,https://github.com/Gargaj,add jsonxx,1,[],https://github.com/nothings/stb/pull/288,https://github.com/nothings,2,https://github.com/nothings/stb/pull/288#issuecomment-225438087,Just a very nice library,Why closed?,True,{}
nothings/stb,https://github.com/nothings/stb,288,2016-04-20T13:20:36Z,2016-06-12T13:24:35Z,2016-06-12T17:27:54Z,CLOSED,False,1,0,1,https://github.com/Gargaj,add jsonxx,1,[],https://github.com/nothings/stb/pull/288,https://github.com/Gargaj,3,https://github.com/nothings/stb/pull/288#issuecomment-225449511,Just a very nice library,I saw you included a link to a comparison of various JSON parsers; I considered that a superset :),True,{}
nothings/stb,https://github.com/nothings/stb,290,2016-04-21T05:35:22Z,2017-03-03T18:38:11Z,2017-03-03T18:38:11Z,CLOSED,False,95,14,1,https://github.com/jackmott,Perlin performance improvements and fractal noise,5,"['4 enhancement', '1 stb library w/no tag', 'performance']",https://github.com/nothings/stb/pull/290,https://github.com/jackmott,1,https://github.com/nothings/stb/pull/290,"stb__perlin_fastfloor which results in a ~14% speed increase on my recent i7 laptop with the VS2015 Update 2 compiler, optimization settings on full.  Also removes the need to include math.h, downside is that overflows will not be handled in the normal way. Usually people have their inputs to perlin noise hovering around [0,1] so this may be acceptable.
stb__perlin_randtab changed to unsigned char.  I've never seen this change the speed of execution in isolated benchmarks on either of my machines. However it will use slightly less memory and run the same speed. So perhaps that is desirable. Also perhaps in the context of a larger program it would thrash the cache less, but that is just speculation.","stb__perlin_fastfloor which results in a ~14% speed increase on my recent i7 laptop with the VS2015 Update 2 compiler, optimization settings on full.  Also removes the need to include math.h, downside is that overflows will not be handled in the normal way. Usually people have their inputs to perlin noise hovering around [0,1] so this may be acceptable.
stb__perlin_randtab changed to unsigned char.  I've never seen this change the speed of execution in isolated benchmarks on either of my machines. However it will use slightly less memory and run the same speed. So perhaps that is desirable. Also perhaps in the context of a larger program it would thrash the cache less, but that is just speculation.",True,{'THUMBS_UP': ['https://github.com/looki']}
nothings/stb,https://github.com/nothings/stb,290,2016-04-21T05:35:22Z,2017-03-03T18:38:11Z,2017-03-03T18:38:11Z,CLOSED,False,95,14,1,https://github.com/jackmott,Perlin performance improvements and fractal noise,5,"['4 enhancement', '1 stb library w/no tag', 'performance']",https://github.com/nothings/stb/pull/290,https://github.com/jackmott,2,https://github.com/nothings/stb/pull/290#issuecomment-213860901,"stb__perlin_fastfloor which results in a ~14% speed increase on my recent i7 laptop with the VS2015 Update 2 compiler, optimization settings on full.  Also removes the need to include math.h, downside is that overflows will not be handled in the normal way. Usually people have their inputs to perlin noise hovering around [0,1] so this may be acceptable.
stb__perlin_randtab changed to unsigned char.  I've never seen this change the speed of execution in isolated benchmarks on either of my machines. However it will use slightly less memory and run the same speed. So perhaps that is desirable. Also perhaps in the context of a larger program it would thrash the cache less, but that is just speculation.","I've also added 3 fractal noise functions.  Ridge, turbulence, and fractal brownian motion.",True,{}
nothings/stb,https://github.com/nothings/stb,290,2016-04-21T05:35:22Z,2017-03-03T18:38:11Z,2017-03-03T18:38:11Z,CLOSED,False,95,14,1,https://github.com/jackmott,Perlin performance improvements and fractal noise,5,"['4 enhancement', '1 stb library w/no tag', 'performance']",https://github.com/nothings/stb/pull/290,https://github.com/nothings,3,https://github.com/nothings/stb/pull/290#issuecomment-284034546,"stb__perlin_fastfloor which results in a ~14% speed increase on my recent i7 laptop with the VS2015 Update 2 compiler, optimization settings on full.  Also removes the need to include math.h, downside is that overflows will not be handled in the normal way. Usually people have their inputs to perlin noise hovering around [0,1] so this may be acceptable.
stb__perlin_randtab changed to unsigned char.  I've never seen this change the speed of execution in isolated benchmarks on either of my machines. However it will use slightly less memory and run the same speed. So perhaps that is desirable. Also perhaps in the context of a larger program it would thrash the cache less, but that is just speculation.","Patch seems to be deleted, manually merged in next release.",True,{}
nothings/stb,https://github.com/nothings/stb,293,2016-04-29T02:57:07Z,2016-08-27T19:33:13Z,2016-08-27T19:33:13Z,MERGED,True,2,3,1,https://github.com/kritzikratzi,stb_textedit/stb_text_locate_coord:,1,"['2 bug', '1 stb library w/no tag']",https://github.com/nothings/stb/pull/293,https://github.com/kritzikratzi,1,https://github.com/nothings/stb/pull/293,"fix cursor position in the ""shouldn't happen, but if it does, fall through to end-of-line case"" case (i=0 causes problems with the return values in this case).
in my case this happened because STB_TEXTEDIT_LAYOUTROW reported 296.5 pixels, but the individual character sum only made it to 295.5 pixels. the result was the cursor in the middle of the textfield when i was clicking the last pixel of the last character in the last line.","fix cursor position in the ""shouldn't happen, but if it does, fall through to end-of-line case"" case (i=0 causes problems with the return values in this case).
in my case this happened because STB_TEXTEDIT_LAYOUTROW reported 296.5 pixels, but the individual character sum only made it to 295.5 pixels. the result was the cursor in the middle of the textfield when i was clicking the last pixel of the last character in the last line.",True,{}
nothings/stb,https://github.com/nothings/stb,293,2016-04-29T02:57:07Z,2016-08-27T19:33:13Z,2016-08-27T19:33:13Z,MERGED,True,2,3,1,https://github.com/kritzikratzi,stb_textedit/stb_text_locate_coord:,1,"['2 bug', '1 stb library w/no tag']",https://github.com/nothings/stb/pull/293,https://github.com/kritzikratzi,2,https://github.com/nothings/stb/pull/293#issuecomment-216265744,"fix cursor position in the ""shouldn't happen, but if it does, fall through to end-of-line case"" case (i=0 causes problems with the return values in this case).
in my case this happened because STB_TEXTEDIT_LAYOUTROW reported 296.5 pixels, but the individual character sum only made it to 295.5 pixels. the result was the cursor in the middle of the textfield when i was clicking the last pixel of the last character in the last line.","ps. the error happens after the code in the commit. see 
  
    
      stb/stb_textedit.h
    
    
        Lines 418 to 439
      in
      6e41547
    
  
  
    

        
          
           if (x < r.x1) { 
        

        
          
              // search characters in row for one that straddles 'x' 
        

        
          
              k = i; 
        

        
          
              prev_x = r.x0; 
        

        
          
              for (i=0; i < r.num_chars; ++i) { 
        

        
          
                 float w = STB_TEXTEDIT_GETWIDTH(str, k, i); 
        

        
          
                 if (x < prev_x+w) { 
        

        
          
                    if (x < prev_x+w/2) 
        

        
          
                       return k+i; 
        

        
          
                    else 
        

        
          
                       return k+i+1; 
        

        
          
                 } 
        

        
          
                 prev_x += w; 
        

        
          
              } 
        

        
          
              // shouldn't happen, but if it does, fall through to end-of-line case 
        

        
          
           } 
        

        
          
            
        

        
          
           // if the last character is a newline, return that. otherwise return 'after' the last character 
        

        
          
           if (STB_TEXTEDIT_GETCHAR(str, i+r.num_chars-1) == STB_TEXTEDIT_NEWLINE) 
        

        
          
              return i+r.num_chars-1; 
        

        
          
           else 
        

        
          
              return i+r.num_chars; 
        
    
  


at the end i is used, but because of the k=i; for(i=0....)  assignments i has a useless value. using k as the loop variable instead seems the simplest option (doing i=k after the loop would be another option).",True,{}
nothings/stb,https://github.com/nothings/stb,294,2016-05-03T21:38:19Z,2016-08-27T19:39:01Z,2016-08-27T19:39:01Z,CLOSED,False,11,2,1,https://github.com/cosmy1,Minor fixes.,1,"['2 bug', '1 stb library w/no tag']",https://github.com/nothings/stb/pull/294,https://github.com/cosmy1,1,https://github.com/nothings/stb/pull/294,,,True,{}
nothings/stb,https://github.com/nothings/stb,294,2016-05-03T21:38:19Z,2016-08-27T19:39:01Z,2016-08-27T19:39:01Z,CLOSED,False,11,2,1,https://github.com/cosmy1,Minor fixes.,1,"['2 bug', '1 stb library w/no tag']",https://github.com/nothings/stb/pull/294,https://github.com/nothings,2,https://github.com/nothings/stb/pull/294#issuecomment-242936665,,"Merged, git automatic merge detection doesn't work for this.",True,{}
nothings/stb,https://github.com/nothings/stb,296,2016-05-04T23:08:10Z,2016-05-05T07:01:30Z,2016-05-05T20:56:48Z,MERGED,True,1,1,1,https://github.com/jimon,tigr now supports osx,1,[],https://github.com/nothings/stb/pull/296,https://github.com/jimon,1,https://github.com/nothings/stb/pull/296,👍,👍,True,{}
nothings/stb,https://github.com/nothings/stb,297,2016-05-05T19:46:34Z,2016-08-27T19:55:23Z,2016-08-27T19:55:23Z,MERGED,True,4,3,1,https://github.com/kieselsteini,Added sts_net / sts_mixer to other libraries list,1,[],https://github.com/nothings/stb/pull/297,https://github.com/kieselsteini,1,https://github.com/nothings/stb/pull/297,,,True,{}
nothings/stb,https://github.com/nothings/stb,298,2016-05-05T23:14:52Z,2016-08-27T19:55:23Z,2016-08-27T19:55:24Z,MERGED,True,1,0,1,https://github.com/DanielGibson,Add DG_dynarr.h to other_libs.md,1,[],https://github.com/nothings/stb/pull/298,https://github.com/DanielGibson,1,https://github.com/nothings/stb/pull/298,"It provides typesafe dynamic arrays for plain C, but in contrast to stretchy_buffers.h/stb_arr it uses a struct that contains the pointer + count/capacity, which makes it easier to pass the arrays around and modify them elsewhere, with the drawback of having to type arr.p[i] instead of arr[i] to access elements (otherwise it's pretty similar to stb_arr)","It provides typesafe dynamic arrays for plain C, but in contrast to stretchy_buffers.h/stb_arr it uses a struct that contains the pointer + count/capacity, which makes it easier to pass the arrays around and modify them elsewhere, with the drawback of having to type arr.p[i] instead of arr[i] to access elements (otherwise it's pretty similar to stb_arr)",True,{}
nothings/stb,https://github.com/nothings/stb,299,2016-05-07T09:33:10Z,2016-08-27T19:55:24Z,2016-08-27T19:55:24Z,MERGED,True,1,0,1,https://github.com/jobtalle,Add ccVector.h to other_libs.md,3,[],https://github.com/nothings/stb/pull/299,https://github.com/jobtalle,1,https://github.com/nothings/stb/pull/299,"ccVector.h is a single file, C/C++ linear algebra library aimed at graphics development. It provides vectors, quaternions and matrices with utility functions.
All naming schemes are flexible and can be changed to the users preference in the top of the header.
If a vector or matrix with a dimension above 4 or 4x4 needs to be used, a new type and its functions can be created by the macro CCV_DEFINE_VEC(x) or CCV_DEFINE_MAT(x).","ccVector.h is a single file, C/C++ linear algebra library aimed at graphics development. It provides vectors, quaternions and matrices with utility functions.
All naming schemes are flexible and can be changed to the users preference in the top of the header.
If a vector or matrix with a dimension above 4 or 4x4 needs to be used, a new type and its functions can be created by the macro CCV_DEFINE_VEC(x) or CCV_DEFINE_MAT(x).",True,{}
nothings/stb,https://github.com/nothings/stb,300,2016-05-08T17:09:38Z,2016-08-27T19:55:24Z,2016-08-27T19:55:24Z,MERGED,True,3,2,1,https://github.com/xelatihy,updated description of yocto/GL libraries in other_libs,1,[],https://github.com/nothings/stb/pull/300,https://github.com/xelatihy,1,https://github.com/nothings/stb/pull/300,,,True,{}
nothings/stb,https://github.com/nothings/stb,301,2016-05-11T03:43:41Z,2016-05-11T05:29:23Z,2016-05-11T05:29:23Z,CLOSED,False,1,1,1,https://github.com/abortabort,fix wrong components problem in png loading,1,[],https://github.com/nothings/stb/pull/301,https://github.com/abortabort,1,https://github.com/nothings/stb/pull/301,number of components returned is wrong in png loading if req is not equal zero.,number of components returned is wrong in png loading if req is not equal zero.,True,{}
nothings/stb,https://github.com/nothings/stb,303,2016-05-17T02:50:17Z,2018-01-29T10:46:26Z,2018-01-29T10:46:26Z,CLOSED,False,236,2,5,https://github.com/haikarainen,Added flipping functionality for stb_image_write.h,2,"['4 enhancement', '1 stb_image_write']",https://github.com/nothings/stb/pull/303,https://github.com/haikarainen,1,https://github.com/nothings/stb/pull/303,"See #302
Please review this code. Proper testing added! I have NOT written tests or properly tested all changes as I'm not accustomed to your unit testing methods. I have, however, manually tested it in my project and there it works just fine.
I feel confident to merge this, but it is of course your call @nothings
The code that is doing the magic is copy-pasted from stb_image.h.
Please be gentle, it has been a while since I worked on a C-project, and I'm still getting used to creating pull requests.
.","See #302
Please review this code. Proper testing added! I have NOT written tests or properly tested all changes as I'm not accustomed to your unit testing methods. I have, however, manually tested it in my project and there it works just fine.
I feel confident to merge this, but it is of course your call @nothings
The code that is doing the magic is copy-pasted from stb_image.h.
Please be gentle, it has been a while since I worked on a C-project, and I'm still getting used to creating pull requests.
.",True,{}
nothings/stb,https://github.com/nothings/stb,303,2016-05-17T02:50:17Z,2018-01-29T10:46:26Z,2018-01-29T10:46:26Z,CLOSED,False,236,2,5,https://github.com/haikarainen,Added flipping functionality for stb_image_write.h,2,"['4 enhancement', '1 stb_image_write']",https://github.com/nothings/stb/pull/303,https://github.com/haikarainen,2,https://github.com/nothings/stb/pull/303#issuecomment-219754543,"See #302
Please review this code. Proper testing added! I have NOT written tests or properly tested all changes as I'm not accustomed to your unit testing methods. I have, however, manually tested it in my project and there it works just fine.
I feel confident to merge this, but it is of course your call @nothings
The code that is doing the magic is copy-pasted from stb_image.h.
Please be gentle, it has been a while since I worked on a C-project, and I'm still getting used to creating pull requests.
.","Allright, tests are pushed and working over here. Simply compile with gcc stbiw_flip_test.c -lm -o stbiw_flip_test inside the tests folder and then just run ./stbiw_flip_test",True,{}
nothings/stb,https://github.com/nothings/stb,303,2016-05-17T02:50:17Z,2018-01-29T10:46:26Z,2018-01-29T10:46:26Z,CLOSED,False,236,2,5,https://github.com/haikarainen,Added flipping functionality for stb_image_write.h,2,"['4 enhancement', '1 stb_image_write']",https://github.com/nothings/stb/pull/303,https://github.com/nothings,3,https://github.com/nothings/stb/pull/303#issuecomment-270024323,"See #302
Please review this code. Proper testing added! I have NOT written tests or properly tested all changes as I'm not accustomed to your unit testing methods. I have, however, manually tested it in my project and there it works just fine.
I feel confident to merge this, but it is of course your call @nothings
The code that is doing the magic is copy-pasted from stb_image.h.
Please be gentle, it has been a while since I worked on a C-project, and I'm still getting used to creating pull requests.
.","I know it's much later, but can you explain what this comment means?

Please note that this function modifies the data parameter you pass to any
of the stb_write functions. Copy it using memcpy or likewise if you want to
preserve or reuse it later.",True,{}
nothings/stb,https://github.com/nothings/stb,303,2016-05-17T02:50:17Z,2018-01-29T10:46:26Z,2018-01-29T10:46:26Z,CLOSED,False,236,2,5,https://github.com/haikarainen,Added flipping functionality for stb_image_write.h,2,"['4 enhancement', '1 stb_image_write']",https://github.com/nothings/stb/pull/303,https://github.com/haikarainen,4,https://github.com/nothings/stb/pull/303#issuecomment-270047271,"See #302
Please review this code. Proper testing added! I have NOT written tests or properly tested all changes as I'm not accustomed to your unit testing methods. I have, however, manually tested it in my project and there it works just fine.
I feel confident to merge this, but it is of course your call @nothings
The code that is doing the magic is copy-pasted from stb_image.h.
Please be gentle, it has been a while since I worked on a C-project, and I'm still getting used to creating pull requests.
.","@nothings Sure, take a look at this function for example (stbi_write_png):
45f4eed#diff-469d4cb48b9965801e6c8cb7b92e46feR1041
It takes a const void * data as a parameter, but this is casted to a void * and modified inside the function (dirty I know), which means that the raw data you pass to write to an image file will actually be flipped in memory. I know this is somewhat bad practice, and it puts the user of the library as responsible for making a copy of the data before you pass it (if you want to preserve it). It does, however come with the benefit of letting the user skip a datacopy if it's not neccessary.
I can see a few different things you can do to clean this up (change constness of parameter, actually copy the data every time etc), but in the end it's your library (and should probably be your call).
Disclaimer: It was quite a long time ago I wrote this so I might have missed some detail",True,{}
nothings/stb,https://github.com/nothings/stb,303,2016-05-17T02:50:17Z,2018-01-29T10:46:26Z,2018-01-29T10:46:26Z,CLOSED,False,236,2,5,https://github.com/haikarainen,Added flipping functionality for stb_image_write.h,2,"['4 enhancement', '1 stb_image_write']",https://github.com/nothings/stb/pull/303,https://github.com/nothings,5,https://github.com/nothings/stb/pull/303#issuecomment-270049081,"See #302
Please review this code. Proper testing added! I have NOT written tests or properly tested all changes as I'm not accustomed to your unit testing methods. I have, however, manually tested it in my project and there it works just fine.
I feel confident to merge this, but it is of course your call @nothings
The code that is doing the magic is copy-pasted from stb_image.h.
Please be gentle, it has been a while since I worked on a C-project, and I'm still getting used to creating pull requests.
.","Ah, it modifies the pixel data, ok. Yeah, I think it would be better to just traverse the input data in reverse while writing it instead, I'll look at changing it work that way.",True,{}
nothings/stb,https://github.com/nothings/stb,303,2016-05-17T02:50:17Z,2018-01-29T10:46:26Z,2018-01-29T10:46:26Z,CLOSED,False,236,2,5,https://github.com/haikarainen,Added flipping functionality for stb_image_write.h,2,"['4 enhancement', '1 stb_image_write']",https://github.com/nothings/stb/pull/303,https://github.com/FredGithub,6,https://github.com/nothings/stb/pull/303#issuecomment-343676082,"See #302
Please review this code. Proper testing added! I have NOT written tests or properly tested all changes as I'm not accustomed to your unit testing methods. I have, however, manually tested it in my project and there it works just fine.
I feel confident to merge this, but it is of course your call @nothings
The code that is doing the magic is copy-pasted from stb_image.h.
Please be gentle, it has been a while since I worked on a C-project, and I'm still getting used to creating pull requests.
.","Aww, I was so happy to find this until I noticed it's not merged yet! It's okay though :)",True,{}
nothings/stb,https://github.com/nothings/stb,303,2016-05-17T02:50:17Z,2018-01-29T10:46:26Z,2018-01-29T10:46:26Z,CLOSED,False,236,2,5,https://github.com/haikarainen,Added flipping functionality for stb_image_write.h,2,"['4 enhancement', '1 stb_image_write']",https://github.com/nothings/stb/pull/303,https://github.com/haikarainen,7,https://github.com/nothings/stb/pull/303#issuecomment-343679832,"See #302
Please review this code. Proper testing added! I have NOT written tests or properly tested all changes as I'm not accustomed to your unit testing methods. I have, however, manually tested it in my project and there it works just fine.
I feel confident to merge this, but it is of course your call @nothings
The code that is doing the magic is copy-pasted from stb_image.h.
Please be gentle, it has been a while since I worked on a C-project, and I'm still getting used to creating pull requests.
.","@FredGithub You could always just clone my pull request, unless you need something that has been added later.",True,{}
nothings/stb,https://github.com/nothings/stb,303,2016-05-17T02:50:17Z,2018-01-29T10:46:26Z,2018-01-29T10:46:26Z,CLOSED,False,236,2,5,https://github.com/haikarainen,Added flipping functionality for stb_image_write.h,2,"['4 enhancement', '1 stb_image_write']",https://github.com/nothings/stb/pull/303,https://github.com/FredGithub,8,https://github.com/nothings/stb/pull/303#issuecomment-343685211,"See #302
Please review this code. Proper testing added! I have NOT written tests or properly tested all changes as I'm not accustomed to your unit testing methods. I have, however, manually tested it in my project and there it works just fine.
I feel confident to merge this, but it is of course your call @nothings
The code that is doing the magic is copy-pasted from stb_image.h.
Please be gentle, it has been a while since I worked on a C-project, and I'm still getting used to creating pull requests.
.",Thanks! I'll take a look,True,{}
nothings/stb,https://github.com/nothings/stb,303,2016-05-17T02:50:17Z,2018-01-29T10:46:26Z,2018-01-29T10:46:26Z,CLOSED,False,236,2,5,https://github.com/haikarainen,Added flipping functionality for stb_image_write.h,2,"['4 enhancement', '1 stb_image_write']",https://github.com/nothings/stb/pull/303,https://github.com/andrewcorrigan,9,https://github.com/nothings/stb/pull/303#issuecomment-347990692,"See #302
Please review this code. Proper testing added! I have NOT written tests or properly tested all changes as I'm not accustomed to your unit testing methods. I have, however, manually tested it in my project and there it works just fine.
I feel confident to merge this, but it is of course your call @nothings
The code that is doing the magic is copy-pasted from stb_image.h.
Please be gentle, it has been a while since I worked on a C-project, and I'm still getting used to creating pull requests.
.","This would be a super useful feature, especially if it's done as suggested above, without modifying the input data.",True,{}
nothings/stb,https://github.com/nothings/stb,303,2016-05-17T02:50:17Z,2018-01-29T10:46:26Z,2018-01-29T10:46:26Z,CLOSED,False,236,2,5,https://github.com/haikarainen,Added flipping functionality for stb_image_write.h,2,"['4 enhancement', '1 stb_image_write']",https://github.com/nothings/stb/pull/303,https://github.com/felipeek,10,https://github.com/nothings/stb/pull/303#issuecomment-352653035,"See #302
Please review this code. Proper testing added! I have NOT written tests or properly tested all changes as I'm not accustomed to your unit testing methods. I have, however, manually tested it in my project and there it works just fine.
I feel confident to merge this, but it is of course your call @nothings
The code that is doing the magic is copy-pasted from stb_image.h.
Please be gentle, it has been a while since I worked on a C-project, and I'm still getting used to creating pull requests.
.","really helpful, thx :)",True,{}
nothings/stb,https://github.com/nothings/stb,303,2016-05-17T02:50:17Z,2018-01-29T10:46:26Z,2018-01-29T10:46:26Z,CLOSED,False,236,2,5,https://github.com/haikarainen,Added flipping functionality for stb_image_write.h,2,"['4 enhancement', '1 stb_image_write']",https://github.com/nothings/stb/pull/303,https://github.com/nothings,11,https://github.com/nothings/stb/pull/303#issuecomment-361207528,"See #302
Please review this code. Proper testing added! I have NOT written tests or properly tested all changes as I'm not accustomed to your unit testing methods. I have, however, manually tested it in my project and there it works just fine.
I feel confident to merge this, but it is of course your call @nothings
The code that is doing the magic is copy-pasted from stb_image.h.
Please be gentle, it has been a while since I worked on a C-project, and I'm still getting used to creating pull requests.
.","Added a version of this in the next release, flips w/o modifying input data, all five formats supported, untested.",True,{}
nothings/stb,https://github.com/nothings/stb,306,2016-05-18T16:59:14Z,2016-10-07T15:38:41Z,2016-10-07T15:58:09Z,MERGED,True,1,0,1,https://github.com/codeplea,Added Genann (neural networks),1,[],https://github.com/nothings/stb/pull/306,https://github.com/codeplea,1,https://github.com/nothings/stb/pull/306,"Hi,
I was wondering if you'd add Genann to your other_libs list? It's a neural network library in C - one source file, one header file, callable from C++, zlib license.
Thanks!","Hi,
I was wondering if you'd add Genann to your other_libs list? It's a neural network library in C - one source file, one header file, callable from C++, zlib license.
Thanks!",True,"{'THUMBS_UP': ['https://github.com/piperswe', 'https://github.com/TyOverby']}"
nothings/stb,https://github.com/nothings/stb,308,2016-05-19T13:14:38Z,2017-03-03T18:44:58Z,2017-03-03T18:44:59Z,CLOSED,False,2,2,1,https://github.com/rotoglup,stb.h: Fix arguments given to `swprintf` in `stb__dirtree_scandir`,1,['stb.h'],https://github.com/nothings/stb/pull/308,https://github.com/rotoglup,1,https://github.com/nothings/stb/pull/308,"Initially detected by MSVC2015 /W4 build
stb.h(6916): warning C4047: 'function': 'const size_t' differs in levels of indirection from 'unsigned short [4]'
stb.h(6916): warning C4024: 'swprintf': different types for formal and actual parameter 2
stb.h(6918): warning C4047: 'function': 'const size_t' differs in levels of indirection from 'unsigned short [5]'
stb.h(6918): warning C4024: 'swprintf': different types for formal and actual parameter 2","Initially detected by MSVC2015 /W4 build
stb.h(6916): warning C4047: 'function': 'const size_t' differs in levels of indirection from 'unsigned short [4]'
stb.h(6916): warning C4024: 'swprintf': different types for formal and actual parameter 2
stb.h(6918): warning C4047: 'function': 'const size_t' differs in levels of indirection from 'unsigned short [5]'
stb.h(6918): warning C4024: 'swprintf': different types for formal and actual parameter 2",True,{}
nothings/stb,https://github.com/nothings/stb,308,2016-05-19T13:14:38Z,2017-03-03T18:44:58Z,2017-03-03T18:44:59Z,CLOSED,False,2,2,1,https://github.com/rotoglup,stb.h: Fix arguments given to `swprintf` in `stb__dirtree_scandir`,1,['stb.h'],https://github.com/nothings/stb/pull/308,https://github.com/nothings,2,https://github.com/nothings/stb/pull/308#issuecomment-220401567,"Initially detected by MSVC2015 /W4 build
stb.h(6916): warning C4047: 'function': 'const size_t' differs in levels of indirection from 'unsigned short [4]'
stb.h(6916): warning C4024: 'swprintf': different types for formal and actual parameter 2
stb.h(6918): warning C4047: 'function': 'const size_t' differs in levels of indirection from 'unsigned short [5]'
stb.h(6918): warning C4024: 'swprintf': different types for formal and actual parameter 2","That won't compile correctly on my machine.
The signature of swprintf in VC2015 is different than in VC6. It appears that the changeover occured between VC2003 and VC2005. So need to do a version check using #If __MSC_VER to choose which version of the code to use.",True,{}
nothings/stb,https://github.com/nothings/stb,308,2016-05-19T13:14:38Z,2017-03-03T18:44:58Z,2017-03-03T18:44:59Z,CLOSED,False,2,2,1,https://github.com/rotoglup,stb.h: Fix arguments given to `swprintf` in `stb__dirtree_scandir`,1,['stb.h'],https://github.com/nothings/stb/pull/308,https://github.com/rotoglup,3,https://github.com/nothings/stb/pull/308#issuecomment-220580714,"Initially detected by MSVC2015 /W4 build
stb.h(6916): warning C4047: 'function': 'const size_t' differs in levels of indirection from 'unsigned short [4]'
stb.h(6916): warning C4024: 'swprintf': different types for formal and actual parameter 2
stb.h(6918): warning C4047: 'function': 'const size_t' differs in levels of indirection from 'unsigned short [5]'
stb.h(6918): warning C4024: 'swprintf': different types for formal and actual parameter 2","Sorry, it was obviously too obvious to be that that easy !
I'll review this.
Le 19 mai 2016 7:51 PM, ""Sean Barrett"" notifications@github.com a écrit :

That won't compile correctly on my machine.
The signature of swprintf in VC2015 is different than in VC6. It appears
that the changeover occured between VC2003 and VC2005. So need to do a
version check using #If __MSC_VER to choose which version of the code to
use.
—
You are receiving this because you authored the thread.
Reply to this email directly or view it on GitHub
#308 (comment)",True,{}
nothings/stb,https://github.com/nothings/stb,308,2016-05-19T13:14:38Z,2017-03-03T18:44:58Z,2017-03-03T18:44:59Z,CLOSED,False,2,2,1,https://github.com/rotoglup,stb.h: Fix arguments given to `swprintf` in `stb__dirtree_scandir`,1,['stb.h'],https://github.com/nothings/stb/pull/308,https://github.com/nothings,4,https://github.com/nothings/stb/pull/308#issuecomment-284036384,"Initially detected by MSVC2015 /W4 build
stb.h(6916): warning C4047: 'function': 'const size_t' differs in levels of indirection from 'unsigned short [4]'
stb.h(6916): warning C4024: 'swprintf': different types for formal and actual parameter 2
stb.h(6918): warning C4047: 'function': 'const size_t' differs in levels of indirection from 'unsigned short [5]'
stb.h(6918): warning C4024: 'swprintf': different types for formal and actual parameter 2",Fixed in next release.,True,{}
nothings/stb,https://github.com/nothings/stb,316,2016-05-25T13:46:15Z,2016-10-07T15:31:23Z,2016-10-07T15:31:23Z,MERGED,True,1,0,1,https://github.com/onqtam,added doctest to the list with single header libraries,1,[],https://github.com/nothings/stb/pull/316,https://github.com/onqtam,1,https://github.com/nothings/stb/pull/316,,,True,{'THUMBS_UP': ['https://github.com/onqtam']}
nothings/stb,https://github.com/nothings/stb,316,2016-05-25T13:46:15Z,2016-10-07T15:31:23Z,2016-10-07T15:31:23Z,MERGED,True,1,0,1,https://github.com/onqtam,added doctest to the list with single header libraries,1,[],https://github.com/nothings/stb/pull/316,https://github.com/onqtam,2,https://github.com/nothings/stb/pull/316#issuecomment-237465159,,should I change anything?,True,{}
nothings/stb,https://github.com/nothings/stb,316,2016-05-25T13:46:15Z,2016-10-07T15:31:23Z,2016-10-07T15:31:23Z,MERGED,True,1,0,1,https://github.com/onqtam,added doctest to the list with single header libraries,1,[],https://github.com/nothings/stb/pull/316,https://github.com/nothings,3,https://github.com/nothings/stb/pull/316#issuecomment-237974956,,"No, I just have to make a pass through updating everything, sorry.",True,{'THUMBS_UP': ['https://github.com/onqtam']}
nothings/stb,https://github.com/nothings/stb,319,2016-05-26T22:21:16Z,2016-10-07T15:31:23Z,2016-10-08T09:32:31Z,MERGED,True,24,21,2,https://github.com/1ace,README.md: add direct links to files,1,['4 enhancement'],https://github.com/nothings/stb/pull/319,https://github.com/1ace,1,https://github.com/nothings/stb/pull/319,"As the title suggests, this replaces the (truncated) plain filenames with links pointing directly to the relevant files. I probably don't need to tell you that you can see the rendered result on my fork :)
Note: the generated file was missing README.header.md's contents, but that seems unrelated to my code change, so I just didn't check that bit of the change in. I had a quick look at the code, and couldn't find anything wrong. Probably not worth raising an issue either, esp. considering the importance of that piece of code compared to the rest of the repo :)","As the title suggests, this replaces the (truncated) plain filenames with links pointing directly to the relevant files. I probably don't need to tell you that you can see the rendered result on my fork :)
Note: the generated file was missing README.header.md's contents, but that seems unrelated to my code change, so I just didn't check that bit of the change in. I had a quick look at the code, and couldn't find anything wrong. Probably not worth raising an issue either, esp. considering the importance of that piece of code compared to the rest of the repo :)",True,{}
nothings/stb,https://github.com/nothings/stb,320,2016-06-04T08:44:25Z,2016-08-27T19:55:24Z,2016-08-27T19:55:24Z,MERGED,True,1,1,1,https://github.com/dbohdan,other_libs.md: Update link for LIL,1,[],https://github.com/nothings/stb/pull/320,https://github.com/dbohdan,1,https://github.com/nothings/stb/pull/320,,,True,{}
nothings/stb,https://github.com/nothings/stb,323,2016-06-15T08:40:39Z,2017-03-03T16:41:17Z,2017-03-03T16:41:17Z,MERGED,True,1,3,1,https://github.com/pboettch,image-write: fix monochrome bitmap writing from 8-bit-buffers,1,"['2 bug', '1 stb_image_write']",https://github.com/nothings/stb/pull/323,https://github.com/pboettch,1,https://github.com/nothings/stb/pull/323,"Now writing out monochrome bitmaps from 8-bit arrays works as it does when using PNG. Bitmaps need 3 bytes per pixel.
I noticed that this was not working when switching from write_png to write_bmp with the same uint8_t-buffer.
Feel free to integrate.","Now writing out monochrome bitmaps from 8-bit arrays works as it does when using PNG. Bitmaps need 3 bytes per pixel.
I noticed that this was not working when switching from write_png to write_bmp with the same uint8_t-buffer.
Feel free to integrate.",True,{}
nothings/stb,https://github.com/nothings/stb,324,2016-06-15T21:17:48Z,2016-12-04T13:21:32Z,2016-12-04T13:21:32Z,CLOSED,False,1,1,1,https://github.com/philippwiesemann,Fix crash if out of memory in stb_image.h,1,"['2 bug', '1 stb_image']",https://github.com/nothings/stb/pull/324,https://github.com/philippwiesemann,1,https://github.com/nothings/stb/pull/324,"The wrong variable was checked for NULL.
Found by cppcheck.
Thanks!","The wrong variable was checked for NULL.
Found by cppcheck.
Thanks!",True,{}
nothings/stb,https://github.com/nothings/stb,324,2016-06-15T21:17:48Z,2016-12-04T13:21:32Z,2016-12-04T13:21:32Z,CLOSED,False,1,1,1,https://github.com/philippwiesemann,Fix crash if out of memory in stb_image.h,1,"['2 bug', '1 stb_image']",https://github.com/nothings/stb/pull/324,https://github.com/nothings,2,https://github.com/nothings/stb/pull/324#issuecomment-264703631,"The wrong variable was checked for NULL.
Found by cppcheck.
Thanks!",fixed by another PR.,True,{}
nothings/stb,https://github.com/nothings/stb,327,2016-06-22T00:16:31Z,2016-06-22T14:24:50Z,2016-06-22T14:24:50Z,CLOSED,False,59,7,1,https://github.com/TimothyWrightSoftware,stretchy_buffer can work with C++ with some macro changes.,2,[],https://github.com/nothings/stb/pull/327,https://github.com/TimothyWrightSoftware,1,https://github.com/nothings/stb/pull/327,This has been tested on my Widows 10 machine and Ubuntu 14.04.  Please let me know if there are any problems.,This has been tested on my Widows 10 machine and Ubuntu 14.04.  Please let me know if there are any problems.,True,{}
nothings/stb,https://github.com/nothings/stb,327,2016-06-22T00:16:31Z,2016-06-22T14:24:50Z,2016-06-22T14:24:50Z,CLOSED,False,59,7,1,https://github.com/TimothyWrightSoftware,stretchy_buffer can work with C++ with some macro changes.,2,[],https://github.com/nothings/stb/pull/327,https://github.com/DanielGibson,2,https://github.com/nothings/stb/pull/327#issuecomment-227621179,This has been tested on my Widows 10 machine and Ubuntu 14.04.  Please let me know if there are any problems.,"The neat thing about the stretchy_buffers.h approach (in contrast to some other dynamic array implementations for C) is that you don't have to pass the element type all the time.
Furthermore, having different APIs for C vs C++ makes it pretty useless - IMHO the only usecase to use this in C++ (instead of a proper dynamic array class that makes sure copy/move constructors are called when moving data around etc, like std::vector) I see is C code that should also compile as C++ (like stb-like libs) - obviously that won't work this way.
#250 (comment) has a nice, short solution for the problem without changing the API.",True,{}
nothings/stb,https://github.com/nothings/stb,327,2016-06-22T00:16:31Z,2016-06-22T14:24:50Z,2016-06-22T14:24:50Z,CLOSED,False,59,7,1,https://github.com/TimothyWrightSoftware,stretchy_buffer can work with C++ with some macro changes.,2,[],https://github.com/nothings/stb/pull/327,https://github.com/nothings,3,https://github.com/nothings/stb/pull/327#issuecomment-227639606,This has been tested on my Widows 10 machine and Ubuntu 14.04.  Please let me know if there are any problems.,"I agree with @DanielGibson. @TimothyWrightSoftware, what exactly are you trying to accomplish here, e.g. what's your use case?",True,{}
nothings/stb,https://github.com/nothings/stb,327,2016-06-22T00:16:31Z,2016-06-22T14:24:50Z,2016-06-22T14:24:50Z,CLOSED,False,59,7,1,https://github.com/TimothyWrightSoftware,stretchy_buffer can work with C++ with some macro changes.,2,[],https://github.com/nothings/stb/pull/327,https://github.com/TimothyWrightSoftware,4,https://github.com/nothings/stb/pull/327#issuecomment-227702816,This has been tested on my Widows 10 machine and Ubuntu 14.04.  Please let me know if there are any problems.,"You still don't have to pass the type in if this already works for you, but because this was marked as working with C++ and then changed back to not working with C++, I was curious if it could be done without templates, presumably because anyone using an stb library doesn't like C++",True,{}
nothings/stb,https://github.com/nothings/stb,327,2016-06-22T00:16:31Z,2016-06-22T14:24:50Z,2016-06-22T14:24:50Z,CLOSED,False,59,7,1,https://github.com/TimothyWrightSoftware,stretchy_buffer can work with C++ with some macro changes.,2,[],https://github.com/nothings/stb/pull/327,https://github.com/TimothyWrightSoftware,5,https://github.com/nothings/stb/pull/327#issuecomment-227726443,This has been tested on my Widows 10 machine and Ubuntu 14.04.  Please let me know if there are any problems.,But I do see your point about having two different API.  I Didn't think about that.,True,{}
nothings/stb,https://github.com/nothings/stb,327,2016-06-22T00:16:31Z,2016-06-22T14:24:50Z,2016-06-22T14:24:50Z,CLOSED,False,59,7,1,https://github.com/TimothyWrightSoftware,stretchy_buffer can work with C++ with some macro changes.,2,[],https://github.com/nothings/stb/pull/327,https://github.com/DanielGibson,6,https://github.com/nothings/stb/pull/327#issuecomment-227733868,This has been tested on my Widows 10 machine and Ubuntu 14.04.  Please let me know if there are any problems.,"presumably because anyone using an stb library doesn't like C++

well either you use C++ and can live with using a simple templated function or you don't use C++ and then the non-templated version of the function is used, I don't see the problem. Using C++ and insisting on not using templates at all (even in 3rd-party code as an implementation detail) is just silly.
People use stb-libs with C++ all the time, it makes perfect sense: Just because your code is C++ (possibly Orthodox C++) it doesn't mean you insist on all libs you're using being written in C++ (in case of Orthodox C++, they actually prefer C libs to ones using ""modern C++"" or even just using STL). And of course the alternatives (libpng, libjpeg, ... for stb_image, freetype for stb_truetype, ...) are also plain C, so C++ fans don't lose anything by using stb libs anyway.
You could look at Dear ImGui for an example: It's written in C++ (but doesn't use STL) and uses several stb libs.",True,{}
nothings/stb,https://github.com/nothings/stb,328,2016-06-23T10:36:40Z,2016-09-20T04:47:59Z,2016-09-20T04:49:02Z,CLOSED,False,1,0,1,https://github.com/red75prime,Fix segfault on loading malformed HDR image,1,"['2 bug', '1 stb_image']",https://github.com/nothings/stb/pull/328,https://github.com/red75prime,1,https://github.com/nothings/stb/pull/328,,,True,{}
nothings/stb,https://github.com/nothings/stb,328,2016-06-23T10:36:40Z,2016-09-20T04:47:59Z,2016-09-20T04:49:02Z,CLOSED,False,1,0,1,https://github.com/red75prime,Fix segfault on loading malformed HDR image,1,"['2 bug', '1 stb_image']",https://github.com/nothings/stb/pull/328,https://github.com/red75prime,2,https://github.com/nothings/stb/pull/328#issuecomment-248200616,,Will be fixed by #343,True,{}
nothings/stb,https://github.com/nothings/stb,330,2016-06-30T18:48:33Z,2017-01-02T23:22:54Z,2017-01-02T23:22:54Z,MERGED,True,2,2,1,https://github.com/aras-p,stb_image_resize: Fix crash when resizing large images (signed integer overflow),1,"['2 bug', '1 stb library w/no tag']",https://github.com/nothings/stb/pull/330,https://github.com/aras-p,1,https://github.com/nothings/stb/pull/330,"For example when used on source image of 24000x24000, calculation of in_buffer_row_offset was wrong. Switched to size_t instead.
Test program that was crashing before:
#define STB_IMAGE_RESIZE_IMPLEMENTATION
#include ""stb_image_resize.h""
#include <memory.h>
int main()
{
    size_t kW = 24000;
    size_t kH = 24000;
    size_t kOutW = 500;
    size_t kOutH = 500;
    unsigned char* input = (unsigned char*)malloc(kW*kH*4);
    unsigned char* output = (unsigned char*)malloc(kOutW*kOutH*4);
    stbir_resize_uint8(input, kW, kH, 0, output, kOutW, kOutH, 0, 4);
    free(input);
    free(output);
    return 0;
}","For example when used on source image of 24000x24000, calculation of in_buffer_row_offset was wrong. Switched to size_t instead.
Test program that was crashing before:
#define STB_IMAGE_RESIZE_IMPLEMENTATION
#include ""stb_image_resize.h""
#include <memory.h>
int main()
{
    size_t kW = 24000;
    size_t kH = 24000;
    size_t kOutW = 500;
    size_t kOutH = 500;
    unsigned char* input = (unsigned char*)malloc(kW*kH*4);
    unsigned char* output = (unsigned char*)malloc(kOutW*kOutH*4);
    stbir_resize_uint8(input, kW, kH, 0, output, kOutW, kOutH, 0, 4);
    free(input);
    free(output);
    return 0;
}",True,{}
nothings/stb,https://github.com/nothings/stb,331,2016-07-01T18:47:12Z,2016-07-01T18:52:42Z,2016-07-01T19:16:25Z,CLOSED,False,1,1,1,https://github.com/r-lyeh-archived,Possible byte overflow ,1,[],https://github.com/nothings/stb/pull/331,https://github.com/r-lyeh-archived,1,https://github.com/nothings/stb/pull/331,,,True,{}
nothings/stb,https://github.com/nothings/stb,331,2016-07-01T18:47:12Z,2016-07-01T18:52:42Z,2016-07-01T19:16:25Z,CLOSED,False,1,1,1,https://github.com/r-lyeh-archived,Possible byte overflow ,1,[],https://github.com/nothings/stb/pull/331,https://github.com/r-lyeh-archived,2,https://github.com/nothings/stb/pull/331#issuecomment-230022235,,Nah it was ok! :),True,{}
nothings/stb,https://github.com/nothings/stb,331,2016-07-01T18:47:12Z,2016-07-01T18:52:42Z,2016-07-01T19:16:25Z,CLOSED,False,1,1,1,https://github.com/r-lyeh-archived,Possible byte overflow ,1,[],https://github.com/nothings/stb/pull/331,https://github.com/r-lyeh-archived,3,https://github.com/nothings/stb/pull/331#issuecomment-230027134,,It would be nice to have stbi__getn to consume as many bytes as possible though (so the the mem interface behaves closer to the s.io_read/fread interface),True,{}
nothings/stb,https://github.com/nothings/stb,336,2016-07-27T20:08:43Z,2016-08-27T19:12:05Z,2016-08-27T19:12:05Z,CLOSED,False,1,1,1,https://github.com/Martinfx,"Fix error on FreeBSD ""#error malloc.h has been replaced by stdlib.h""",1,"['2 bug', '1 stb_vorbis']",https://github.com/nothings/stb/pull/336,https://github.com/Martinfx,1,https://github.com/nothings/stb/pull/336,"Fixed error ""#error malloc.h has been replaced by stdlib.h""","Fixed error ""#error malloc.h has been replaced by stdlib.h""",True,{}
nothings/stb,https://github.com/nothings/stb,336,2016-07-27T20:08:43Z,2016-08-27T19:12:05Z,2016-08-27T19:12:05Z,CLOSED,False,1,1,1,https://github.com/Martinfx,"Fix error on FreeBSD ""#error malloc.h has been replaced by stdlib.h""",1,"['2 bug', '1 stb_vorbis']",https://github.com/nothings/stb/pull/336,https://github.com/manxorist,2,https://github.com/nothings/stb/pull/336#issuecomment-241808359,"Fixed error ""#error malloc.h has been replaced by stdlib.h""","For what it's worth, at least for FreeBSD, both malloc() and alloca() are documented as declared by stdlib.h even back to FreeBSD 1.0:
https://www.freebsd.org/cgi/man.cgi?query=malloc&apropos=0&sektion=3&manpath=FreeBSD+1.0-RELEASE&arch=default&format=html
https://www.freebsd.org/cgi/man.cgi?query=alloca&apropos=0&sektion=3&manpath=FreeBSD+1.0-RELEASE&arch=default&format=html
Thus, the change is obviously safe.",True,{}
nothings/stb,https://github.com/nothings/stb,336,2016-07-27T20:08:43Z,2016-08-27T19:12:05Z,2016-08-27T19:12:05Z,CLOSED,False,1,1,1,https://github.com/Martinfx,"Fix error on FreeBSD ""#error malloc.h has been replaced by stdlib.h""",1,"['2 bug', '1 stb_vorbis']",https://github.com/nothings/stb/pull/336,https://github.com/fahickman,3,https://github.com/nothings/stb/pull/336#issuecomment-241931276,"Fixed error ""#error malloc.h has been replaced by stdlib.h""","Just out of curiosity, I checked VC6, and it does have malloc in stdlib.h. C89/C90 specifies that location for malloc (http://port70.net/~nsz/c/c89/c89-draft.html#4.10.3.3), so I'd be surprised if any compiler in use actually needs malloc.h.",True,{}
nothings/stb,https://github.com/nothings/stb,336,2016-07-27T20:08:43Z,2016-08-27T19:12:05Z,2016-08-27T19:12:05Z,CLOSED,False,1,1,1,https://github.com/Martinfx,"Fix error on FreeBSD ""#error malloc.h has been replaced by stdlib.h""",1,"['2 bug', '1 stb_vorbis']",https://github.com/nothings/stb/pull/336,https://github.com/nothings,4,https://github.com/nothings/stb/pull/336#issuecomment-242935001,"Fixed error ""#error malloc.h has been replaced by stdlib.h""","@fahickman I believe the inclusion of malloc.h is not for malloc(), but for alloca(). The question is still which platforms need it.",True,{}
nothings/stb,https://github.com/nothings/stb,336,2016-07-27T20:08:43Z,2016-08-27T19:12:05Z,2016-08-27T19:12:05Z,CLOSED,False,1,1,1,https://github.com/Martinfx,"Fix error on FreeBSD ""#error malloc.h has been replaced by stdlib.h""",1,"['2 bug', '1 stb_vorbis']",https://github.com/nothings/stb/pull/336,https://github.com/nothings,5,https://github.com/nothings/stb/pull/336#issuecomment-242935257,"Fixed error ""#error malloc.h has been replaced by stdlib.h""",I've switched the '#include <malloc.h>' to be a list of compilers/platforms that require it. Please open new issues/PRs to report platforms that need it.,True,{}
nothings/stb,https://github.com/nothings/stb,337,2016-07-30T00:38:38Z,2016-07-30T00:39:33Z,2016-07-30T06:01:29Z,CLOSED,False,1,0,1,https://github.com/Clever-Boy,Develop,2,[],https://github.com/nothings/stb/pull/337,https://github.com/Clever-Boy,1,https://github.com/nothings/stb/pull/337,merge with master,merge with master,True,{}
nothings/stb,https://github.com/nothings/stb,337,2016-07-30T00:38:38Z,2016-07-30T00:39:33Z,2016-07-30T06:01:29Z,CLOSED,False,1,0,1,https://github.com/Clever-Boy,Develop,2,[],https://github.com/nothings/stb/pull/337,https://github.com/nabijaczleweli,2,https://github.com/nothings/stb/pull/337#issuecomment-236326826,merge with master,wtf,True,{}
nothings/stb,https://github.com/nothings/stb,338,2016-08-02T15:49:57Z,2017-01-04T03:04:25Z,2018-10-12T05:31:37Z,CLOSED,False,182,1,1,https://github.com/wesleygriffin,add PAM reading to stb_image.h,2,"['4 enhancement', '1 stb_image']",https://github.com/nothings/stb/pull/338,https://github.com/wesleygriffin,1,https://github.com/nothings/stb/pull/338,The PAM format is a generic Netpbm format that can represent PBM/PGM/PPM along with higher channel images.,The PAM format is a generic Netpbm format that can represent PBM/PGM/PPM along with higher channel images.,True,{}
nothings/stb,https://github.com/nothings/stb,338,2016-08-02T15:49:57Z,2017-01-04T03:04:25Z,2018-10-12T05:31:37Z,CLOSED,False,182,1,1,https://github.com/wesleygriffin,add PAM reading to stb_image.h,2,"['4 enhancement', '1 stb_image']",https://github.com/nothings/stb/pull/338,https://github.com/nothings,2,https://github.com/nothings/stb/pull/338#issuecomment-270024516,The PAM format is a generic Netpbm format that can represent PBM/PGM/PPM along with higher channel images.,"When you say ""represent"", do you mean ""code the same images"", or do you mean ""has an identical file format""? Like, should this replace the existing PNM loaders?",True,{}
nothings/stb,https://github.com/nothings/stb,338,2016-08-02T15:49:57Z,2017-01-04T03:04:25Z,2018-10-12T05:31:37Z,CLOSED,False,182,1,1,https://github.com/wesleygriffin,add PAM reading to stb_image.h,2,"['4 enhancement', '1 stb_image']",https://github.com/nothings/stb/pull/338,https://github.com/nothings,3,https://github.com/nothings/stb/pull/338#issuecomment-270024643,The PAM format is a generic Netpbm format that can represent PBM/PGM/PPM along with higher channel images.,"I see Wikipedia says:

As of 2015 PAM is not widely accepted or produced by graphics systems; e.g., XnView and FFmpeg support it.",True,{}
nothings/stb,https://github.com/nothings/stb,338,2016-08-02T15:49:57Z,2017-01-04T03:04:25Z,2018-10-12T05:31:37Z,CLOSED,False,182,1,1,https://github.com/wesleygriffin,add PAM reading to stb_image.h,2,"['4 enhancement', '1 stb_image']",https://github.com/nothings/stb/pull/338,https://github.com/wesleygriffin,4,https://github.com/nothings/stb/pull/338#issuecomment-270136769,The PAM format is a generic Netpbm format that can represent PBM/PGM/PPM along with higher channel images.,"It can code the same images. The header format is different. I do not think it should replace the existing loaders.
Unlike PGM (1 channel) and PPM (3 channel), PAM supports arbitrary channels. I most often use it for 4 channel images.
I might have to edit the Wikipedia page - I see PAM used frequently in academia, its a very simple format that's easy to read and write. My pull request is simply a way to not have to maintain a separate PAM I/O path.
I'm happy to resolve the conflicts if you plan on merging.
Thanks,
Wes",True,{}
nothings/stb,https://github.com/nothings/stb,338,2016-08-02T15:49:57Z,2017-01-04T03:04:25Z,2018-10-12T05:31:37Z,CLOSED,False,182,1,1,https://github.com/wesleygriffin,add PAM reading to stb_image.h,2,"['4 enhancement', '1 stb_image']",https://github.com/nothings/stb/pull/338,https://github.com/nothings,5,https://github.com/nothings/stb/pull/338#issuecomment-270193637,The PAM format is a generic Netpbm format that can represent PBM/PGM/PPM along with higher channel images.,"The main issue is that stb_image is now getting widely deployed, to the point I suspect people are now using it in places where they don't control the image inputs. That means we're trying to be more careful about security in stb_image, which means we're not adding new image formats unless they're extremely popular, to reduce risk.",True,{}
nothings/stb,https://github.com/nothings/stb,338,2016-08-02T15:49:57Z,2017-01-04T03:04:25Z,2018-10-12T05:31:37Z,CLOSED,False,182,1,1,https://github.com/wesleygriffin,add PAM reading to stb_image.h,2,"['4 enhancement', '1 stb_image']",https://github.com/nothings/stb/pull/338,https://github.com/wesleygriffin,6,https://github.com/nothings/stb/pull/338#issuecomment-270204080,The PAM format is a generic Netpbm format that can represent PBM/PGM/PPM along with higher channel images.,That's a fine argument to not merge. I'm not really interested in trying to ensure the code is safe for uncontrolled inputs.,True,{}
nothings/stb,https://github.com/nothings/stb,338,2016-08-02T15:49:57Z,2017-01-04T03:04:25Z,2018-10-12T05:31:37Z,CLOSED,False,182,1,1,https://github.com/wesleygriffin,add PAM reading to stb_image.h,2,"['4 enhancement', '1 stb_image']",https://github.com/nothings/stb/pull/338,https://github.com/cheako,7,https://github.com/nothings/stb/pull/338#issuecomment-429209036,The PAM format is a generic Netpbm format that can represent PBM/PGM/PPM along with higher channel images.,Duplicate of #39,True,{}
nothings/stb,https://github.com/nothings/stb,339,2016-08-04T20:40:41Z,2017-03-03T17:38:34Z,2017-03-03T17:38:34Z,MERGED,True,2,0,1,https://github.com/bryonglodencissp,stb_c_lexer self-test doesn't clean up if file is not found,1,"['2 bug', '1 stb library w/no tag']",https://github.com/nothings/stb/pull/339,https://github.com/bryonglodencissp,1,https://github.com/nothings/stb/pull/339,"[stb_c_lexer.h:801]: (error) Memory leak: text
[stb_c_lexer.h:801]: (error) Resource leak: f

Found by https://github.com/bryongloden/cppcheck","[stb_c_lexer.h:801]: (error) Memory leak: text
[stb_c_lexer.h:801]: (error) Resource leak: f

Found by https://github.com/bryongloden/cppcheck",True,{}
nothings/stb,https://github.com/nothings/stb,339,2016-08-04T20:40:41Z,2017-03-03T17:38:34Z,2017-03-03T17:38:34Z,MERGED,True,2,0,1,https://github.com/bryonglodencissp,stb_c_lexer self-test doesn't clean up if file is not found,1,"['2 bug', '1 stb library w/no tag']",https://github.com/nothings/stb/pull/339,https://github.com/nothings,2,https://github.com/nothings/stb/pull/339#issuecomment-272804867,"[stb_c_lexer.h:801]: (error) Memory leak: text
[stb_c_lexer.h:801]: (error) Resource leak: f

Found by https://github.com/bryongloden/cppcheck","Neither of these are errors if you're exiting. (In general, though not so much in this case, it is actually more efficient to not free everything on exit; numerous programs through the years have made the mistake of freeing everything on exit, unnecessarily thrashing and slowing down the exit.)",True,"{'LAUGH': ['https://github.com/bryonglodencissp'], 'THUMBS_UP': ['https://github.com/bryonglodencissp']}"
nothings/stb,https://github.com/nothings/stb,341,2016-08-11T19:46:04Z,2016-08-27T19:55:25Z,2016-08-27T19:55:25Z,MERGED,True,1,1,1,https://github.com/terrehbyte,Fix link to tinyobjloader-c,1,[],https://github.com/nothings/stb/pull/341,https://github.com/terrehbyte,1,https://github.com/nothings/stb/pull/341,The repository has been been relocated by syoyo from tinyobjloader_c to tinyobjloader-c (note the dash).,The repository has been been relocated by syoyo from tinyobjloader_c to tinyobjloader-c (note the dash).,True,{}
nothings/stb,https://github.com/nothings/stb,341,2016-08-11T19:46:04Z,2016-08-27T19:55:25Z,2016-08-27T19:55:25Z,MERGED,True,1,1,1,https://github.com/terrehbyte,Fix link to tinyobjloader-c,1,[],https://github.com/nothings/stb/pull/341,https://github.com/nabijaczleweli,2,https://github.com/nothings/stb/pull/341#issuecomment-239281138,The repository has been been relocated by syoyo from tinyobjloader_c to tinyobjloader-c (note the dash).,👍,True,{}
nothings/stb,https://github.com/nothings/stb,343,2016-08-13T00:57:33Z,2016-12-04T13:40:44Z,2019-03-02T02:46:54Z,MERGED,True,234,101,1,https://github.com/rygorous,Fix several bugs.,4,"['2 bug', '1 stb_image']",https://github.com/nothings/stb/pull/343,https://github.com/rygorous,1,https://github.com/nothings/stb/pull/343,"Fix several bugs found by fuzzing or plain old inspection.
Fixes #310, #311, #312, #313, #314, #315, #317, #318. (All confirmed fixed
on Linux running GCC-6.1.1 with ASan using provided repro files)","Fix several bugs found by fuzzing or plain old inspection.
Fixes #310, #311, #312, #313, #314, #315, #317, #318. (All confirmed fixed
on Linux running GCC-6.1.1 with ASan using provided repro files)",True,"{'HEART': ['https://github.com/jlnr', 'https://github.com/hthh'], 'THUMBS_UP': ['https://github.com/jlnr']}"
nothings/stb,https://github.com/nothings/stb,344,2016-08-13T03:55:41Z,2016-12-04T13:41:41Z,2016-12-04T13:41:42Z,CLOSED,False,52,26,1,https://github.com/grim210,Fix GCC misleading-indentation warnings.,1,"['1 stb_image', '2 warning']",https://github.com/nothings/stb/pull/344,https://github.com/grim210,1,https://github.com/nothings/stb/pull/344,"I like to compile with -Wall and -Werror on, and these fixes keep GCC from throwing errors during compilation.","I like to compile with -Wall and -Werror on, and these fixes keep GCC from throwing errors during compilation.",True,{'HEART': ['https://github.com/jeff-upton-sp']}
nothings/stb,https://github.com/nothings/stb,344,2016-08-13T03:55:41Z,2016-12-04T13:41:41Z,2016-12-04T13:41:42Z,CLOSED,False,52,26,1,https://github.com/grim210,Fix GCC misleading-indentation warnings.,1,"['1 stb_image', '2 warning']",https://github.com/nothings/stb/pull/344,https://github.com/festlv,2,https://github.com/nothings/stb/pull/344#issuecomment-264695105,"I like to compile with -Wall and -Werror on, and these fixes keep GCC from throwing errors during compilation.",Accepting this PR would also help projects using stb: tiny-dnn/tiny-dnn#440,True,{'THUMBS_UP': ['https://github.com/bhack']}
nothings/stb,https://github.com/nothings/stb,344,2016-08-13T03:55:41Z,2016-12-04T13:41:41Z,2016-12-04T13:41:42Z,CLOSED,False,52,26,1,https://github.com/grim210,Fix GCC misleading-indentation warnings.,1,"['1 stb_image', '2 warning']",https://github.com/nothings/stb/pull/344,https://github.com/nothings,3,https://github.com/nothings/stb/pull/344#issuecomment-264704592,"I like to compile with -Wall and -Werror on, and these fixes keep GCC from throwing errors during compilation.",Fixed in a different way in current release.,True,{'THUMBS_UP': ['https://github.com/festlv']}
nothings/stb,https://github.com/nothings/stb,345,2016-08-15T02:00:43Z,2017-03-03T17:38:34Z,2017-03-03T17:38:34Z,MERGED,True,132,35,1,https://github.com/fahickman,stb_c_lexer.h: C99 hex float literals and several fixes when not using CRT.,2,"['2 bug', '1 stb library w/no tag']",https://github.com/nothings/stb/pull/345,https://github.com/fahickman,1,https://github.com/nothings/stb/pull/345,,,True,{}
nothings/stb,https://github.com/nothings/stb,351,2016-08-22T15:19:28Z,2016-08-23T19:02:40Z,2016-08-23T19:02:56Z,CLOSED,False,1,1,1,https://github.com/manxorist,stb_vorbis: Do not include <malloc.h> on FreeBSD.,1,[],https://github.com/nothings/stb/pull/351,https://github.com/manxorist,1,https://github.com/nothings/stb/pull/351,"On FreeBSD, <malloc.h> is deprecated. FreeBSD enforces this by making the compilation fail if <malloc.h> is included. Both, malloc() and alloca() are provided by <stdlib.h>, which is already included by stb_vorbis anyway.","On FreeBSD, <malloc.h> is deprecated. FreeBSD enforces this by making the compilation fail if <malloc.h> is included. Both, malloc() and alloca() are provided by <stdlib.h>, which is already included by stb_vorbis anyway.",True,{}
nothings/stb,https://github.com/nothings/stb,351,2016-08-22T15:19:28Z,2016-08-23T19:02:40Z,2016-08-23T19:02:56Z,CLOSED,False,1,1,1,https://github.com/manxorist,stb_vorbis: Do not include <malloc.h> on FreeBSD.,1,[],https://github.com/nothings/stb/pull/351,https://github.com/nabijaczleweli,2,https://github.com/nothings/stb/pull/351#issuecomment-241449198,"On FreeBSD, <malloc.h> is deprecated. FreeBSD enforces this by making the compilation fail if <malloc.h> is included. Both, malloc() and alloca() are provided by <stdlib.h>, which is already included by stb_vorbis anyway.",Are provided by what?,True,{}
nothings/stb,https://github.com/nothings/stb,351,2016-08-22T15:19:28Z,2016-08-23T19:02:40Z,2016-08-23T19:02:56Z,CLOSED,False,1,1,1,https://github.com/manxorist,stb_vorbis: Do not include <malloc.h> on FreeBSD.,1,[],https://github.com/nothings/stb/pull/351,https://github.com/manxorist,3,https://github.com/nothings/stb/pull/351#issuecomment-241456171,"On FreeBSD, <malloc.h> is deprecated. FreeBSD enforces this by making the compilation fail if <malloc.h> is included. Both, malloc() and alloca() are provided by <stdlib.h>, which is already included by stb_vorbis anyway.","Are provided by what?

Sorry, I missed that Github markdown ate the < and > characters in the text when generating the pull request message.
Updated original pull request message.",True,{}
nothings/stb,https://github.com/nothings/stb,351,2016-08-22T15:19:28Z,2016-08-23T19:02:40Z,2016-08-23T19:02:56Z,CLOSED,False,1,1,1,https://github.com/manxorist,stb_vorbis: Do not include <malloc.h> on FreeBSD.,1,[],https://github.com/nothings/stb/pull/351,https://github.com/DanielGibson,4,https://github.com/nothings/stb/pull/351#issuecomment-241798797,"On FreeBSD, <malloc.h> is deprecated. FreeBSD enforces this by making the compilation fail if <malloc.h> is included. Both, malloc() and alloca() are provided by <stdlib.h>, which is already included by stb_vorbis anyway.",This looks like a duplicate of #336,True,{}
nothings/stb,https://github.com/nothings/stb,351,2016-08-22T15:19:28Z,2016-08-23T19:02:40Z,2016-08-23T19:02:56Z,CLOSED,False,1,1,1,https://github.com/manxorist,stb_vorbis: Do not include <malloc.h> on FreeBSD.,1,[],https://github.com/nothings/stb/pull/351,https://github.com/manxorist,5,https://github.com/nothings/stb/pull/351#issuecomment-241807197,"On FreeBSD, <malloc.h> is deprecated. FreeBSD enforces this by making the compilation fail if <malloc.h> is included. Both, malloc() and alloca() are provided by <stdlib.h>, which is already included by stb_vorbis anyway.","Yes, this is a duplicate of #336. Not sure how I missed that one.",True,{}
nothings/stb,https://github.com/nothings/stb,351,2016-08-22T15:19:28Z,2016-08-23T19:02:40Z,2016-08-23T19:02:56Z,CLOSED,False,1,1,1,https://github.com/manxorist,stb_vorbis: Do not include <malloc.h> on FreeBSD.,1,[],https://github.com/nothings/stb/pull/351,https://github.com/nothings,6,https://github.com/nothings/stb/pull/351#issuecomment-241841514,"On FreeBSD, <malloc.h> is deprecated. FreeBSD enforces this by making the compilation fail if <malloc.h> is included. Both, malloc() and alloca() are provided by <stdlib.h>, which is already included by stb_vorbis anyway.","Yeah, sorry, I'll see if I can do a pass this weekend. Closing as duplicate.",True,{}
nothings/stb,https://github.com/nothings/stb,352,2016-08-25T11:32:23Z,2016-12-04T13:41:27Z,2016-12-04T13:41:27Z,CLOSED,False,1,1,1,https://github.com/r-lyeh-archived,Fix duplicate symbols when lib is included statically more than once,1,"['2 bug', '1 stb_image']",https://github.com/nothings/stb/pull/352,https://github.com/r-lyeh-archived,1,https://github.com/nothings/stb/pull/352,Quick fix,Quick fix,True,{}
nothings/stb,https://github.com/nothings/stb,352,2016-08-25T11:32:23Z,2016-12-04T13:41:27Z,2016-12-04T13:41:27Z,CLOSED,False,1,1,1,https://github.com/r-lyeh-archived,Fix duplicate symbols when lib is included statically more than once,1,"['2 bug', '1 stb_image']",https://github.com/nothings/stb/pull/352,https://github.com/nothings,2,https://github.com/nothings/stb/pull/352#issuecomment-264703909,Quick fix,Fixed in next version.,True,{}
nothings/stb,https://github.com/nothings/stb,354,2016-08-29T15:31:37Z,2016-08-29T17:49:33Z,2016-08-29T17:49:33Z,CLOSED,False,19,19,1,https://github.com/Takadimi,Added convenience links to library desc. table,1,[],https://github.com/nothings/stb/pull/354,https://github.com/Takadimi,1,https://github.com/nothings/stb/pull/354,,,True,{}
nothings/stb,https://github.com/nothings/stb,354,2016-08-29T15:31:37Z,2016-08-29T17:49:33Z,2016-08-29T17:49:33Z,CLOSED,False,19,19,1,https://github.com/Takadimi,Added convenience links to library desc. table,1,[],https://github.com/nothings/stb/pull/354,https://github.com/nothings,2,https://github.com/nothings/stb/pull/354#issuecomment-243199278,,"README.md is a generated file, you can't change it directly.
Also, this is fixed properly by #319",True,{}
nothings/stb,https://github.com/nothings/stb,356,2016-09-05T21:11:48Z,2016-10-27T10:23:24Z,2016-10-27T10:23:24Z,CLOSED,False,1,0,1,https://github.com/squarewave,Added labrat to the tests section,1,[],https://github.com/nothings/stb/pull/356,https://github.com/squarewave,1,https://github.com/nothings/stb/pull/356,,,True,{}
nothings/stb,https://github.com/nothings/stb,356,2016-09-05T21:11:48Z,2016-10-27T10:23:24Z,2016-10-27T10:23:24Z,CLOSED,False,1,0,1,https://github.com/squarewave,Added labrat to the tests section,1,[],https://github.com/nothings/stb/pull/356,https://github.com/nothings,2,https://github.com/nothings/stb/pull/356#issuecomment-256604400,,Manually added to the new other_libs project. https://github.com/nothings/single_file_libs,True,{}
nothings/stb,https://github.com/nothings/stb,357,2016-09-06T19:08:52Z,2017-03-03T16:41:17Z,2019-03-02T02:46:56Z,MERGED,True,7,6,1,https://github.com/rygorous,stb_vorbis: Fix handling of negative numbers in ilog.,1,"['2 bug', '1 stb_vorbis']",https://github.com/nothings/stb/pull/357,https://github.com/rygorous,1,https://github.com/nothings/stb/pull/357,"For negative n, the original code went down the ""n < (1<<4)""
path and performed an out-of-bounds array access. Fix the code
to agree with section 9.2.1 of the Vorbis spec. (Verified by
exhaustive testing of all 32-bit ints.)
Fixes issue #355.","For negative n, the original code went down the ""n < (1<<4)""
path and performed an out-of-bounds array access. Fix the code
to agree with section 9.2.1 of the Vorbis spec. (Verified by
exhaustive testing of all 32-bit ints.)
Fixes issue #355.",True,{}
nothings/stb,https://github.com/nothings/stb,361,2016-09-24T11:37:05Z,2017-01-02T23:22:55Z,2017-01-02T23:46:12Z,MERGED,True,711,11,1,https://github.com/dougallj,CFF and Type 2 charstream parsing in stb_truetype,1,"['4 enhancement', '1 stb_truetype']",https://github.com/nothings/stb/pull/361,https://github.com/dougallj,1,https://github.com/nothings/stb/pull/361,"This adds partial implementation of the CFF and Type 2 Charstring specifications. It allows stb_truetype to read most OTF files (or, to be precise, all files I've found to test at the moment).
A few notes:

This primarily replaces the implementations of stbtt_GetGlyphBox and stbtt_GetGlyphShape to use the CFF data, but lets the existing TTF code handle everything else. This seems to be pretty sensible - CFF2 explicitly removes almost all the data I'm currently ignoring.
This adds fields to the stbtt_vertex structure, which may be backwards incompatible (as this struct can be replace by the including project).
It implements all operators from the charstring specification, except for some that were removed in CFF2, and I haven't seen used anywhere.
Performance is worse - there's room for optimisation (especially with API changes), but I don't know how important performance is.
The cubic bezier tessellation is mostly based on superstition, could be improved.
No hinting, and the (rarely used) ""flex"" operator always draws beziers, even at low resolutions.
Kerning information may only be present in the GPOS table, which looks much harder to parse, so I haven't tried. HarfBuzz might be the easiest approach for users who care.

I'd be interested in feedback, or any real fonts with a ""CFF "" or ""CFF2"" table that this can't handle (e.g. glyphs appear blank). I haven't implemented CFF2 support, because I doubt anyone is using it, but it would be trivial.
Should stb_truetype even support non-truetype fonts?
""Fixes"" issue #340.
Edit: Added the flex operator, fixed a couple of small bugs, and diagnosed the performance problems as mostly being caused by poor cubic tessellation.
Edit 2: Made the tessellation less terrible, made ""flex"" draw beziers, cleaned up the interpreter a bit.","This adds partial implementation of the CFF and Type 2 Charstring specifications. It allows stb_truetype to read most OTF files (or, to be precise, all files I've found to test at the moment).
A few notes:

This primarily replaces the implementations of stbtt_GetGlyphBox and stbtt_GetGlyphShape to use the CFF data, but lets the existing TTF code handle everything else. This seems to be pretty sensible - CFF2 explicitly removes almost all the data I'm currently ignoring.
This adds fields to the stbtt_vertex structure, which may be backwards incompatible (as this struct can be replace by the including project).
It implements all operators from the charstring specification, except for some that were removed in CFF2, and I haven't seen used anywhere.
Performance is worse - there's room for optimisation (especially with API changes), but I don't know how important performance is.
The cubic bezier tessellation is mostly based on superstition, could be improved.
No hinting, and the (rarely used) ""flex"" operator always draws beziers, even at low resolutions.
Kerning information may only be present in the GPOS table, which looks much harder to parse, so I haven't tried. HarfBuzz might be the easiest approach for users who care.

I'd be interested in feedback, or any real fonts with a ""CFF "" or ""CFF2"" table that this can't handle (e.g. glyphs appear blank). I haven't implemented CFF2 support, because I doubt anyone is using it, but it would be trivial.
Should stb_truetype even support non-truetype fonts?
""Fixes"" issue #340.
Edit: Added the flex operator, fixed a couple of small bugs, and diagnosed the performance problems as mostly being caused by poor cubic tessellation.
Edit 2: Made the tessellation less terrible, made ""flex"" draw beziers, cleaned up the interpreter a bit.",True,{'THUMBS_UP': ['https://github.com/ringoz']}
nothings/stb,https://github.com/nothings/stb,361,2016-09-24T11:37:05Z,2017-01-02T23:22:55Z,2017-01-02T23:46:12Z,MERGED,True,711,11,1,https://github.com/dougallj,CFF and Type 2 charstream parsing in stb_truetype,1,"['4 enhancement', '1 stb_truetype']",https://github.com/nothings/stb/pull/361,https://github.com/nothings,2,https://github.com/nothings/stb/pull/361#issuecomment-256081768,"This adds partial implementation of the CFF and Type 2 Charstring specifications. It allows stb_truetype to read most OTF files (or, to be precise, all files I've found to test at the moment).
A few notes:

This primarily replaces the implementations of stbtt_GetGlyphBox and stbtt_GetGlyphShape to use the CFF data, but lets the existing TTF code handle everything else. This seems to be pretty sensible - CFF2 explicitly removes almost all the data I'm currently ignoring.
This adds fields to the stbtt_vertex structure, which may be backwards incompatible (as this struct can be replace by the including project).
It implements all operators from the charstring specification, except for some that were removed in CFF2, and I haven't seen used anywhere.
Performance is worse - there's room for optimisation (especially with API changes), but I don't know how important performance is.
The cubic bezier tessellation is mostly based on superstition, could be improved.
No hinting, and the (rarely used) ""flex"" operator always draws beziers, even at low resolutions.
Kerning information may only be present in the GPOS table, which looks much harder to parse, so I haven't tried. HarfBuzz might be the easiest approach for users who care.

I'd be interested in feedback, or any real fonts with a ""CFF "" or ""CFF2"" table that this can't handle (e.g. glyphs appear blank). I haven't implemented CFF2 support, because I doubt anyone is using it, but it would be trivial.
Should stb_truetype even support non-truetype fonts?
""Fixes"" issue #340.
Edit: Added the flex operator, fixed a couple of small bugs, and diagnosed the performance problems as mostly being caused by poor cubic tessellation.
Edit 2: Made the tessellation less terrible, made ""flex"" draw beziers, cleaned up the interpreter a bit.","BTW this is super awesome and I hope to get to it soon. My reading of the spec had suggested it was necessary to parse and build big auxiliary structures to handle opentype, I'm glad to see I misunderstood.
As to the ""should"" question: yes, absolutely. A lot of places you can buy fonts don't distinguish between TrueType and OpenType, so it sucks for someone to license a ""TrueType"" font and then discover that it actually doesn't work in their software because it uses stb_truetype.",True,{}
nothings/stb,https://github.com/nothings/stb,361,2016-09-24T11:37:05Z,2017-01-02T23:22:55Z,2017-01-02T23:46:12Z,MERGED,True,711,11,1,https://github.com/dougallj,CFF and Type 2 charstream parsing in stb_truetype,1,"['4 enhancement', '1 stb_truetype']",https://github.com/nothings/stb/pull/361,https://github.com/nothings,3,https://github.com/nothings/stb/pull/361#issuecomment-270030272,"This adds partial implementation of the CFF and Type 2 Charstring specifications. It allows stb_truetype to read most OTF files (or, to be precise, all files I've found to test at the moment).
A few notes:

This primarily replaces the implementations of stbtt_GetGlyphBox and stbtt_GetGlyphShape to use the CFF data, but lets the existing TTF code handle everything else. This seems to be pretty sensible - CFF2 explicitly removes almost all the data I'm currently ignoring.
This adds fields to the stbtt_vertex structure, which may be backwards incompatible (as this struct can be replace by the including project).
It implements all operators from the charstring specification, except for some that were removed in CFF2, and I haven't seen used anywhere.
Performance is worse - there's room for optimisation (especially with API changes), but I don't know how important performance is.
The cubic bezier tessellation is mostly based on superstition, could be improved.
No hinting, and the (rarely used) ""flex"" operator always draws beziers, even at low resolutions.
Kerning information may only be present in the GPOS table, which looks much harder to parse, so I haven't tried. HarfBuzz might be the easiest approach for users who care.

I'd be interested in feedback, or any real fonts with a ""CFF "" or ""CFF2"" table that this can't handle (e.g. glyphs appear blank). I haven't implemented CFF2 support, because I doubt anyone is using it, but it would be trivial.
Should stb_truetype even support non-truetype fonts?
""Fixes"" issue #340.
Edit: Added the flex operator, fixed a couple of small bugs, and diagnosed the performance problems as mostly being caused by poor cubic tessellation.
Edit 2: Made the tessellation less terrible, made ""flex"" draw beziers, cleaned up the interpreter a bit.","I note that the use of the new stbtt__buf structure expands the size of stbtt_fontinfo from ballpark 14 dwords to ballpark 38 dwords. I'm not asking you to make any changes here, I just want info--do all of them actually require caching that full state? E.g. I imagine the cursors don't actually need to be stored across calls, so they could be stored separately. But if the only thing that could be avoided would be the cursors, then due to alignment of storing 64-bit ptr + 32-bit size there's really no more efficient way to store them anyway.
Overall there's not much reason to worry anyway (if the extra data would need to be stored on the stack anyway while the functions are running, it's basically no worse this way, and possibly better if the stbtt_fontinfo isn't on the stack); I just want to have some clue why it's this way.",True,{}
nothings/stb,https://github.com/nothings/stb,361,2016-09-24T11:37:05Z,2017-01-02T23:22:55Z,2017-01-02T23:46:12Z,MERGED,True,711,11,1,https://github.com/dougallj,CFF and Type 2 charstream parsing in stb_truetype,1,"['4 enhancement', '1 stb_truetype']",https://github.com/nothings/stb/pull/361,https://github.com/dougallj,4,https://github.com/nothings/stb/pull/361#issuecomment-270033586,"This adds partial implementation of the CFF and Type 2 Charstring specifications. It allows stb_truetype to read most OTF files (or, to be precise, all files I've found to test at the moment).
A few notes:

This primarily replaces the implementations of stbtt_GetGlyphBox and stbtt_GetGlyphShape to use the CFF data, but lets the existing TTF code handle everything else. This seems to be pretty sensible - CFF2 explicitly removes almost all the data I'm currently ignoring.
This adds fields to the stbtt_vertex structure, which may be backwards incompatible (as this struct can be replace by the including project).
It implements all operators from the charstring specification, except for some that were removed in CFF2, and I haven't seen used anywhere.
Performance is worse - there's room for optimisation (especially with API changes), but I don't know how important performance is.
The cubic bezier tessellation is mostly based on superstition, could be improved.
No hinting, and the (rarely used) ""flex"" operator always draws beziers, even at low resolutions.
Kerning information may only be present in the GPOS table, which looks much harder to parse, so I haven't tried. HarfBuzz might be the easiest approach for users who care.

I'd be interested in feedback, or any real fonts with a ""CFF "" or ""CFF2"" table that this can't handle (e.g. glyphs appear blank). I haven't implemented CFF2 support, because I doubt anyone is using it, but it would be trivial.
Should stb_truetype even support non-truetype fonts?
""Fixes"" issue #340.
Edit: Added the flex operator, fixed a couple of small bugs, and diagnosed the performance problems as mostly being caused by poor cubic tessellation.
Edit 2: Made the tessellation less terrible, made ""flex"" draw beziers, cleaned up the interpreter a bit.","Mainly simplicity and code size, as well as ease-of-bounds-checking (since crashproof on bad data  is near the top of the TODOs I didn't want to make it any harder).
Plenty of room for optimization:

info->cff could just store location and size (or even just offset, with 0 meaning no CFF data, as I'm handwaving a 512MB size at the moment)
info->gsubrs, info->subrs, info->fontdicts and info->charstrings are all indexes within the cff data, so you could just store a file offset (and use stbtt__cff_get_index on access)
info->fdselect needs both length and size, I think

(I'd want to double check that before changing the code, but I think that's right)
So every cached stbtt_buf is oversized, none of the cursor fields are used (except to copy the value ""0"" to another structure - iirc they're always zero), some sizes can be calculated later, and all the pointers could be 32-bit offsets. We waste around 100 bytes, but plausibly save about the same in code size? Not sure how it would come out if I changed it.
Happy new year, and thanks for merging this!",True,{}
nothings/stb,https://github.com/nothings/stb,362,2016-09-26T10:23:32Z,2017-03-03T17:02:16Z,2017-03-03T17:02:16Z,CLOSED,False,1,1,1,https://github.com/corporateshark,Fixed 'printf' : unknown type field character,1,"['2 bug', '1 stb library w/no tag']",https://github.com/nothings/stb/pull/362,https://github.com/corporateshark,1,https://github.com/nothings/stb/pull/362,,,True,{}
nothings/stb,https://github.com/nothings/stb,362,2016-09-26T10:23:32Z,2017-03-03T17:02:16Z,2017-03-03T17:02:16Z,CLOSED,False,1,1,1,https://github.com/corporateshark,Fixed 'printf' : unknown type field character,1,"['2 bug', '1 stb library w/no tag']",https://github.com/nothings/stb/pull/362,https://github.com/nothings,2,https://github.com/nothings/stb/pull/362#issuecomment-284010117,,This appears to have been fixed by some other PR or some other change.,True,{}
nothings/stb,https://github.com/nothings/stb,363,2016-09-30T08:13:10Z,2017-01-02T23:15:16Z,2017-01-02T23:15:16Z,MERGED,True,1,1,1,https://github.com/mgerhardy,Shouldn't this be 6?,1,"['2 bug', '1 tests']",https://github.com/nothings/stb/pull/363,https://github.com/mgerhardy,1,https://github.com/nothings/stb/pull/363,,,True,{}
nothings/stb,https://github.com/nothings/stb,363,2016-09-30T08:13:10Z,2017-01-02T23:15:16Z,2017-01-02T23:15:16Z,MERGED,True,1,1,1,https://github.com/mgerhardy,Shouldn't this be 6?,1,"['2 bug', '1 tests']",https://github.com/nothings/stb/pull/363,https://github.com/nothings,2,https://github.com/nothings/stb/pull/363#issuecomment-250687699,,"Yep. If plane #5 is the far plane it won't make any difference. If it's the near plane it might manage to skip rendering maybe 1 chunk, which won't make much difference, but still no excuse.",True,{}
nothings/stb,https://github.com/nothings/stb,364,2016-10-08T00:01:04Z,2017-03-03T18:08:00Z,2017-03-03T18:08:00Z,MERGED,True,12,3,1,https://github.com/guitarfreak,stb_voxel_render: Added block_selector,3,['2 bug'],https://github.com/nothings/stb/pull/364,https://github.com/guitarfreak,1,https://github.com/nothings/stb/pull/364,,,True,{}
nothings/stb,https://github.com/nothings/stb,364,2016-10-08T00:01:04Z,2017-03-03T18:08:00Z,2017-03-03T18:08:00Z,MERGED,True,12,3,1,https://github.com/guitarfreak,stb_voxel_render: Added block_selector,3,['2 bug'],https://github.com/nothings/stb/pull/364,https://github.com/nothings,2,https://github.com/nothings/stb/pull/364#issuecomment-252388821,,"It's not meaningful to try to extract the rotation from the block_selector. Rotation (which way each block is facing) needs to be independent of selection (which mesh each face is output to).
There are two alternatives for selection:

Store an explicit output mesh index for each cube in the world. This is input.selector. Because this uses one byte per cube in the world, and you probably don't need 256 output meshes (because typically you'd want, say, a mesh for opaque things and a mesh for transparent things), we overload selector (which is unique per block) to also store a unique rotation per block.
Use the basic block type for the cube to determine which output mesh to use. This is input.block_selector. This only needs to store an extra 256 bytes (one per block type, not one per cube in the world), and will be strictly correlated with basic block type, so trying to store rotation in here would be equivalent to storing block_rotation[], i.e. having each block type specify its final rotation, which isn't really meaningful.

Hence you really only want to assign 'mesh' from block_selector, not try to update 'rot'.",True,{}
nothings/stb,https://github.com/nothings/stb,365,2016-10-16T11:50:17Z,2017-03-03T19:13:32Z,2017-03-03T19:13:32Z,MERGED,True,22,22,1,https://github.com/ocornut,stb_textedit.h: fix LINESTART when cursor is at end of buffer + simplifications/optimisations,1,"['2 bug', '1 stb library w/no tag']",https://github.com/nothings/stb/pull/365,https://github.com/ocornut,1,https://github.com/nothings/stb/pull/365,"Sean,
Trying to fix an edge case where the Home key (=LINESTART event) wouldn't work if the cursor is the last character of a multi-line buffer and that character isn't a trailing \n.
(
User reports: ocornut/imgui#588
User proposed a fix in stb_textedit_find_charpos() but I felt it was too complex and risky: https://github.com/ocornut/imgui/pull/815/files
)
Upon closer inspection today, I stumbled on the fact that the LINESTART*, LINEEND* events shouldn't really be using stb_textedit_find_charpos().
It is really overkill: the function calculate a lot of things and is rather confusing already. The fact that it is called from those 4 events increase the confusion and expectation. It is a layout function and effectively does lot of spatial computation that we don't need for those events. And then the LINEEND* event needed a special case because of it.
Instead, just handling LINESTART LINEEND the dumb way with a for loop produces code with the same total line count, remove the dependency on stb_textedit_find_charpos() and therefore the extra complexity of having different use cases, fixes the bug on using the Home key on the last character, cherry on top it is way faster (not that performances were a problem in the first place).
Thanks!","Sean,
Trying to fix an edge case where the Home key (=LINESTART event) wouldn't work if the cursor is the last character of a multi-line buffer and that character isn't a trailing \n.
(
User reports: ocornut/imgui#588
User proposed a fix in stb_textedit_find_charpos() but I felt it was too complex and risky: https://github.com/ocornut/imgui/pull/815/files
)
Upon closer inspection today, I stumbled on the fact that the LINESTART*, LINEEND* events shouldn't really be using stb_textedit_find_charpos().
It is really overkill: the function calculate a lot of things and is rather confusing already. The fact that it is called from those 4 events increase the confusion and expectation. It is a layout function and effectively does lot of spatial computation that we don't need for those events. And then the LINEEND* event needed a special case because of it.
Instead, just handling LINESTART LINEEND the dumb way with a for loop produces code with the same total line count, remove the dependency on stb_textedit_find_charpos() and therefore the extra complexity of having different use cases, fixes the bug on using the Home key on the last character, cherry on top it is way faster (not that performances were a problem in the first place).
Thanks!",True,{}
nothings/stb,https://github.com/nothings/stb,367,2016-10-22T10:56:44Z,2016-10-25T16:08:49Z,2016-10-25T16:08:49Z,CLOSED,False,28,28,3,https://github.com/samhocevar,Fix const correctness in some functions.,1,['2 warning'],https://github.com/nothings/stb/pull/367,https://github.com/samhocevar,1,https://github.com/nothings/stb/pull/367,"This patch fixes a lot of casts that were unnecessarily removing
const from pointer variables.","This patch fixes a lot of casts that were unnecessarily removing
const from pointer variables.",True,{}
nothings/stb,https://github.com/nothings/stb,367,2016-10-22T10:56:44Z,2016-10-25T16:08:49Z,2016-10-25T16:08:49Z,CLOSED,False,28,28,3,https://github.com/samhocevar,Fix const correctness in some functions.,1,['2 warning'],https://github.com/nothings/stb/pull/367,https://github.com/nothings,2,https://github.com/nothings/stb/pull/367#issuecomment-255527939,"This patch fixes a lot of casts that were unnecessarily removing
const from pointer variables.","Const-correctness is a code style choice. The stb libraries have const-correct APIs, but not const-correct internals.
Unless you can point to a reason for this other than code style, it's not a bug.",True,{}
nothings/stb,https://github.com/nothings/stb,367,2016-10-22T10:56:44Z,2016-10-25T16:08:49Z,2016-10-25T16:08:49Z,CLOSED,False,28,28,3,https://github.com/samhocevar,Fix const correctness in some functions.,1,['2 warning'],https://github.com/nothings/stb/pull/367,https://github.com/samhocevar,3,https://github.com/nothings/stb/pull/367#issuecomment-255534512,"This patch fixes a lot of casts that were unnecessarily removing
const from pointer variables.",The reason would be that projects using stb headers get polluted with compiler warnings that are hard to suppress. It’s a style choice that extends beyond the library internals.,True,{}
nothings/stb,https://github.com/nothings/stb,367,2016-10-22T10:56:44Z,2016-10-25T16:08:49Z,2016-10-25T16:08:49Z,CLOSED,False,28,28,3,https://github.com/samhocevar,Fix const correctness in some functions.,1,['2 warning'],https://github.com/nothings/stb/pull/367,https://github.com/RichardGale,4,https://github.com/nothings/stb/pull/367#issuecomment-255534953,"This patch fixes a lot of casts that were unnecessarily removing
const from pointer variables.",I put #pragmas around the includes to inhibit warnings.,True,{}
nothings/stb,https://github.com/nothings/stb,367,2016-10-22T10:56:44Z,2016-10-25T16:08:49Z,2016-10-25T16:08:49Z,CLOSED,False,28,28,3,https://github.com/samhocevar,Fix const correctness in some functions.,1,['2 warning'],https://github.com/nothings/stb/pull/367,https://github.com/samhocevar,5,https://github.com/nothings/stb/pull/367#issuecomment-255535611,"This patch fixes a lot of casts that were unnecessarily removing
const from pointer variables.","Unfortunately, #pragma is not portable across compilers.",True,{}
nothings/stb,https://github.com/nothings/stb,367,2016-10-22T10:56:44Z,2016-10-25T16:08:49Z,2016-10-25T16:08:49Z,CLOSED,False,28,28,3,https://github.com/samhocevar,Fix const correctness in some functions.,1,['2 warning'],https://github.com/nothings/stb/pull/367,https://github.com/BSVino,6,https://github.com/nothings/stb/pull/367#issuecomment-255540129,"This patch fixes a lot of casts that were unnecessarily removing
const from pointer variables.","Warnings in general aren't 'portable' across compilers. I #include all of my single-file library imports in one file, for which I set my build system to turn all warnings off. It's external code so I don't care about warnings from it.",True,{}
nothings/stb,https://github.com/nothings/stb,367,2016-10-22T10:56:44Z,2016-10-25T16:08:49Z,2016-10-25T16:08:49Z,CLOSED,False,28,28,3,https://github.com/samhocevar,Fix const correctness in some functions.,1,['2 warning'],https://github.com/nothings/stb/pull/367,https://github.com/nothings,7,https://github.com/nothings/stb/pull/367#issuecomment-255541194,"This patch fixes a lot of casts that were unnecessarily removing
const from pointer variables.","Sure, compiler warnings are a real problem, but enforcing a style rule may not be the appropriate solution to them.
Compilers have to let you compile away const at least some of the time, so we just need to find out what is the best practice for that and follow it. So, what compiler is producing warnings, and what exactly is the warning?",True,{}
nothings/stb,https://github.com/nothings/stb,367,2016-10-22T10:56:44Z,2016-10-25T16:08:49Z,2016-10-25T16:08:49Z,CLOSED,False,28,28,3,https://github.com/samhocevar,Fix const correctness in some functions.,1,['2 warning'],https://github.com/nothings/stb/pull/367,https://github.com/nothings,8,https://github.com/nothings/stb/pull/367#issuecomment-255541731,"This patch fixes a lot of casts that were unnecessarily removing
const from pointer variables.","Ok, I looked at the dear imgui report, I see it's gcc's -Wcast-qual.
As far as I can find on the internet, there's no good way to work around this except to explicitly disable the warning:
http://bytes.com/topic/c/answers/706939-casting-away-constness
http://stackoverflow.com/questions/13249756/explicit-ignore-warning-from-wcast-qual-cast-discards-attribute-const
Doing that w/o disabling it elsewhere requires ""#pragma GCC diagnostic push"", which requires a minimum of GCC 4.6. (Really? GCC has no way of dealing with this properly pre-4.6???)
Probably the best solution is to take all of the problematic API functions and rename them to be internal only functions, then wrap them with new one-line public functions that just cast-away const and call the internal functions. Then can use a single properly-#ifdef'd #pragma wrapping around that whole block of functions.",True,{}
nothings/stb,https://github.com/nothings/stb,367,2016-10-22T10:56:44Z,2016-10-25T16:08:49Z,2016-10-25T16:08:49Z,CLOSED,False,28,28,3,https://github.com/samhocevar,Fix const correctness in some functions.,1,['2 warning'],https://github.com/nothings/stb/pull/367,https://github.com/samhocevar,9,https://github.com/nothings/stb/pull/367#issuecomment-255541738,"This patch fixes a lot of casts that were unnecessarily removing
const from pointer variables.",I am compiling imgui using GCC 6.2 (though clang 3.8.1 also qualifies). The relevant compilation flag is -Wcast-qual and the emitted warnings related to stb can be found here: http://paste.debian.net/887369/,True,{}
nothings/stb,https://github.com/nothings/stb,367,2016-10-22T10:56:44Z,2016-10-25T16:08:49Z,2016-10-25T16:08:49Z,CLOSED,False,28,28,3,https://github.com/samhocevar,Fix const correctness in some functions.,1,['2 warning'],https://github.com/nothings/stb/pull/367,https://github.com/nothings,10,https://github.com/nothings/stb/pull/367#issuecomment-255541894,"This patch fixes a lot of casts that were unnecessarily removing
const from pointer variables.","@samhocevar If my description above makes sense, I can take a shot at doing it and emailing you the files for you to test. Email me if that seems worthwhile (so that I have an address to email them to you).",True,{}
nothings/stb,https://github.com/nothings/stb,367,2016-10-22T10:56:44Z,2016-10-25T16:08:49Z,2016-10-25T16:08:49Z,CLOSED,False,28,28,3,https://github.com/samhocevar,Fix const correctness in some functions.,1,['2 warning'],https://github.com/nothings/stb/pull/367,https://github.com/samhocevar,11,https://github.com/nothings/stb/pull/367#issuecomment-255542152,"This patch fixes a lot of casts that were unnecessarily removing
const from pointer variables.","Thanks, I’ll happily test any changes (my address is sam@hocevar.net).
But I was under the impression that the “best” solution (in terms of effort) would be to just change the few places where a foo const * is cast to a foo *; is there a real problem with that approach that I am overlooking?",True,{}
nothings/stb,https://github.com/nothings/stb,367,2016-10-22T10:56:44Z,2016-10-25T16:08:49Z,2016-10-25T16:08:49Z,CLOSED,False,28,28,3,https://github.com/samhocevar,Fix const correctness in some functions.,1,['2 warning'],https://github.com/nothings/stb/pull/367,https://github.com/nothings,12,https://github.com/nothings/stb/pull/367#issuecomment-255542434,"This patch fixes a lot of casts that were unnecessarily removing
const from pointer variables.","You've only tackled three libraries. I assume in many other libraries one would have to propagate the const many levels down, and it would be a significant change there. That is, the real problem is that it's imposing a style change on the libraries--you're proposing either that some of the libraries be written const-correct and some be const-incorrect, or, alternatively, that all the libraries everywhere should be const-correct.
Doing what I describe makes it easier for future maintainence work to keep all the libraries consistently const-incorrect, and makes it easy to add new functions that have const-correct API.
However, your fixes to the qsort-comparison functions are correct as-is, since they're not part of the public API, they're part of interacting with the C stdlib API.",True,{}
nothings/stb,https://github.com/nothings/stb,367,2016-10-22T10:56:44Z,2016-10-25T16:08:49Z,2016-10-25T16:08:49Z,CLOSED,False,28,28,3,https://github.com/samhocevar,Fix const correctness in some functions.,1,['2 warning'],https://github.com/nothings/stb/pull/367,https://github.com/nothings,13,https://github.com/nothings/stb/pull/367#issuecomment-256081458,"This patch fixes a lot of casts that were unnecessarily removing
const from pointer variables.","Revised way to fix this was validated by email, checked-in now.",True,{}
nothings/stb,https://github.com/nothings/stb,370,2016-11-26T15:00:26Z,2017-03-03T16:58:08Z,2017-03-03T19:12:13Z,MERGED,True,7,0,1,https://github.com/archo5,stb_dxt: 3Dc support,1,"['4 enhancement', 'stb_dxt']",https://github.com/nothings/stb/pull/370,https://github.com/archo5,1,https://github.com/nothings/stb/pull/370,"As I wanted to compress some tangent space normal maps, I read some articles about the topic and found out that the 3Dc format is very good, and it is actually two DXT5 alpha blocks added together.
The commit shows how easy it would be to support 3Dc here. And that's really about it, since I wasn't sure what to do with the unused 'mode' variable as well as the padding bytes that 'src' requires (they didn't matter for me but they might for someone else).
Any chance you're interested in supporting 3Dc compression explicitly in this library?","As I wanted to compress some tangent space normal maps, I read some articles about the topic and found out that the 3Dc format is very good, and it is actually two DXT5 alpha blocks added together.
The commit shows how easy it would be to support 3Dc here. And that's really about it, since I wasn't sure what to do with the unused 'mode' variable as well as the padding bytes that 'src' requires (they didn't matter for me but they might for someone else).
Any chance you're interested in supporting 3Dc compression explicitly in this library?",True,{'THUMBS_UP': ['https://github.com/wizzard0']}
nothings/stb,https://github.com/nothings/stb,370,2016-11-26T15:00:26Z,2017-03-03T16:58:08Z,2017-03-03T19:12:13Z,MERGED,True,7,0,1,https://github.com/archo5,stb_dxt: 3Dc support,1,"['4 enhancement', 'stb_dxt']",https://github.com/nothings/stb/pull/370,https://github.com/nothings,2,https://github.com/nothings/stb/pull/370#issuecomment-284008193,"As I wanted to compress some tangent space normal maps, I read some articles about the topic and found out that the 3Dc format is very good, and it is actually two DXT5 alpha blocks added together.
The commit shows how easy it would be to support 3Dc here. And that's really about it, since I wasn't sure what to do with the unused 'mode' variable as well as the padding bytes that 'src' requires (they didn't matter for me but they might for someone else).
Any chance you're interested in supporting 3Dc compression explicitly in this library?","merged in next version, I got rid of the padding bytes and mode and renamed to BC5 rather than 3DC; however, it's untested so please test!",True,{}
nothings/stb,https://github.com/nothings/stb,370,2016-11-26T15:00:26Z,2017-03-03T16:58:08Z,2017-03-03T19:12:13Z,MERGED,True,7,0,1,https://github.com/archo5,stb_dxt: 3Dc support,1,"['4 enhancement', 'stb_dxt']",https://github.com/nothings/stb/pull/370,https://github.com/archo5,3,https://github.com/nothings/stb/pull/370#issuecomment-284040479,"As I wanted to compress some tangent space normal maps, I read some articles about the topic and found out that the 3Dc format is very good, and it is actually two DXT5 alpha blocks added together.
The commit shows how easy it would be to support 3Dc here. And that's really about it, since I wasn't sure what to do with the unused 'mode' variable as well as the padding bytes that 'src' requires (they didn't matter for me but they might for someone else).
Any chance you're interested in supporting 3Dc compression explicitly in this library?","Two things:

function declaration did not match the definition
there were a few more changes needed to stb__CompressAlphaBlock

Patch: https://gist.github.com/snake5/2baf14237c7c20f5ad8a1e3d91106f03",True,{}
nothings/stb,https://github.com/nothings/stb,370,2016-11-26T15:00:26Z,2017-03-03T16:58:08Z,2017-03-03T19:12:13Z,MERGED,True,7,0,1,https://github.com/archo5,stb_dxt: 3Dc support,1,"['4 enhancement', 'stb_dxt']",https://github.com/nothings/stb/pull/370,https://github.com/nothings,4,https://github.com/nothings/stb/pull/370#issuecomment-284043526,"As I wanted to compress some tangent space normal maps, I read some articles about the topic and found out that the 3Dc format is very good, and it is actually two DXT5 alpha blocks added together.
The commit shows how easy it would be to support 3Dc here. And that's really about it, since I wasn't sure what to do with the unused 'mode' variable as well as the padding bytes that 'src' requires (they didn't matter for me but they might for someone else).
Any chance you're interested in supporting 3Dc compression explicitly in this library?","fix will go up in a minute, thanks!",True,{}
nothings/stb,https://github.com/nothings/stb,371,2016-11-28T22:25:15Z,2016-12-04T13:40:45Z,2016-12-04T13:40:45Z,MERGED,True,16,11,1,https://github.com/Zelex,Improved .HDR file compatability. Warnings fixes for VS2015,2,"['4 enhancement', '1 stb_image', '2 warning']",https://github.com/nothings/stb/pull/371,https://github.com/Zelex,1,https://github.com/nothings/stb/pull/371,,,True,{}
nothings/stb,https://github.com/nothings/stb,373,2016-11-30T21:56:04Z,2017-03-03T18:08:00Z,2017-03-03T18:08:00Z,MERGED,True,14,5,1,https://github.com/IntellectualKitty,Return all_rects_packed status from stbrp_pack_rects.,1,"['4 enhancement', 'stb_rect_pack']",https://github.com/nothings/stb/pull/373,https://github.com/IntellectualKitty,1,https://github.com/nothings/stb/pull/373,This is an extremely minor change.  stbrp_pack_rects returns a result to indicate whether all rects were successfully packed.  It saves having to iterate through the list of rects yourself afterward to determine this.,This is an extremely minor change.  stbrp_pack_rects returns a result to indicate whether all rects were successfully packed.  It saves having to iterate through the list of rects yourself afterward to determine this.,True,{}
nothings/stb,https://github.com/nothings/stb,373,2016-11-30T21:56:04Z,2017-03-03T18:08:00Z,2017-03-03T18:08:00Z,MERGED,True,14,5,1,https://github.com/IntellectualKitty,Return all_rects_packed status from stbrp_pack_rects.,1,"['4 enhancement', 'stb_rect_pack']",https://github.com/nothings/stb/pull/373,https://github.com/nothings,2,https://github.com/nothings/stb/pull/373#issuecomment-264028477,This is an extremely minor change.  stbrp_pack_rects returns a result to indicate whether all rects were successfully packed.  It saves having to iterate through the list of rects yourself afterward to determine this.,Good idea.,True,{}
nothings/stb,https://github.com/nothings/stb,373,2016-11-30T21:56:04Z,2017-03-03T18:08:00Z,2017-03-03T18:08:00Z,MERGED,True,14,5,1,https://github.com/IntellectualKitty,Return all_rects_packed status from stbrp_pack_rects.,1,"['4 enhancement', 'stb_rect_pack']",https://github.com/nothings/stb/pull/373,https://github.com/nothings,3,https://github.com/nothings/stb/pull/373#issuecomment-264625013,This is an extremely minor change.  stbrp_pack_rects returns a result to indicate whether all rects were successfully packed.  It saves having to iterate through the list of rects yourself afterward to determine this.,"Yeah, that seems pretty specialized to me, so I don't think I'd take it up.
Make sure you don't push anything else on this branch before I merge it.",True,{}
nothings/stb,https://github.com/nothings/stb,373,2016-11-30T21:56:04Z,2017-03-03T18:08:00Z,2017-03-03T18:08:00Z,MERGED,True,14,5,1,https://github.com/IntellectualKitty,Return all_rects_packed status from stbrp_pack_rects.,1,"['4 enhancement', 'stb_rect_pack']",https://github.com/nothings/stb/pull/373,https://github.com/IntellectualKitty,4,https://github.com/nothings/stb/pull/373#issuecomment-264626568,This is an extremely minor change.  stbrp_pack_rects returns a result to indicate whether all rects were successfully packed.  It saves having to iterate through the list of rects yourself afterward to determine this.,"I haven't seen anything like what I needed which is why I wrote it.  Also, I didn't plan to add anything else to your code base (and I would have put it in a separate branch if I had), but I still wanted to share this in case it was useful.",True,{}
nothings/stb,https://github.com/nothings/stb,373,2016-11-30T21:56:04Z,2017-03-03T18:08:00Z,2017-03-03T18:08:00Z,MERGED,True,14,5,1,https://github.com/IntellectualKitty,Return all_rects_packed status from stbrp_pack_rects.,1,"['4 enhancement', 'stb_rect_pack']",https://github.com/nothings/stb/pull/373,https://github.com/nothings,5,https://github.com/nothings/stb/pull/373#issuecomment-264626977,This is an extremely minor change.  stbrp_pack_rects returns a result to indicate whether all rects were successfully packed.  It saves having to iterate through the list of rects yourself afterward to determine this.,"No worries, some people just don't realize how github PRs work.",True,{}
nothings/stb,https://github.com/nothings/stb,373,2016-11-30T21:56:04Z,2017-03-03T18:08:00Z,2017-03-03T18:08:00Z,MERGED,True,14,5,1,https://github.com/IntellectualKitty,Return all_rects_packed status from stbrp_pack_rects.,1,"['4 enhancement', 'stb_rect_pack']",https://github.com/nothings/stb/pull/373,https://github.com/IntellectualKitty,6,https://github.com/nothings/stb/pull/373#issuecomment-264627663,This is an extremely minor change.  stbrp_pack_rects returns a result to indicate whether all rects were successfully packed.  It saves having to iterate through the list of rects yourself afterward to determine this.,"No problem.  I'm still not the most proficient with GitHub, but I certainly understand the importance of keeping PRs small and focused.",True,{}
nothings/stb,https://github.com/nothings/stb,373,2016-11-30T21:56:04Z,2017-03-03T18:08:00Z,2017-03-03T18:08:00Z,MERGED,True,14,5,1,https://github.com/IntellectualKitty,Return all_rects_packed status from stbrp_pack_rects.,1,"['4 enhancement', 'stb_rect_pack']",https://github.com/nothings/stb/pull/373,https://github.com/IntellectualKitty,7,https://github.com/nothings/stb/pull/373#issuecomment-264686914,This is an extremely minor change.  stbrp_pack_rects returns a result to indicate whether all rects were successfully packed.  It saves having to iterate through the list of rects yourself afterward to determine this.,"I removed the comment including my code.  I've been pleased with the results, and since you didn't feel like it would benefit you, I've decided to keep it for myself.",True,{}
nothings/stb,https://github.com/nothings/stb,374,2016-12-04T20:17:49Z,2017-01-16T08:51:43Z,2017-01-16T15:24:19Z,MERGED,True,1,1,1,https://github.com/poppolopoppo,"Fix ""#ifndef STBI_WRITE_NO_STDIO"" scope for stbi_write_hdr()",1,"['2 bug', '1 stb_image_write']",https://github.com/nothings/stb/pull/374,https://github.com/poppolopoppo,1,https://github.com/nothings/stb/pull/374,"stbi_write_hdr_to_func() should still be available without STBI_WRITE_NO_STDIO,
just like other formats.","stbi_write_hdr_to_func() should still be available without STBI_WRITE_NO_STDIO,
just like other formats.",True,{}
nothings/stb,https://github.com/nothings/stb,375,2016-12-04T23:20:35Z,2017-01-02T23:22:55Z,2017-01-02T23:22:55Z,MERGED,True,1,0,1,https://github.com/IntellectualKitty,Apple TrueType fonts,1,"['2 bug', '1 stb_truetype']",https://github.com/nothings/stb/pull/375,https://github.com/IntellectualKitty,1,https://github.com/nothings/stb/pull/375,"This adds a check for the tag 'true' in stbtt__isfont to support Apple TrueType fonts.
I found this reference at www.microsoft.com/typography/otspec/otff.htm:
NOTE: The Apple specification for TrueType fonts allows for 'true' and 'typ1' for sfnt version.

I've attached an Apple font containing the 'true' tag for testing: Apple Chancery.ttf.zip","This adds a check for the tag 'true' in stbtt__isfont to support Apple TrueType fonts.
I found this reference at www.microsoft.com/typography/otspec/otff.htm:
NOTE: The Apple specification for TrueType fonts allows for 'true' and 'typ1' for sfnt version.

I've attached an Apple font containing the 'true' tag for testing: Apple Chancery.ttf.zip",True,{}
nothings/stb,https://github.com/nothings/stb,376,2016-12-05T00:08:01Z,2017-01-02T23:22:56Z,2017-01-02T23:22:56Z,MERGED,True,29,1,1,https://github.com/IntellectualKitty,Number of fonts in a TrueType file,2,"['4 enhancement', '1 stb_truetype']",https://github.com/nothings/stb/pull/376,https://github.com/IntellectualKitty,1,https://github.com/nothings/stb/pull/376,"This PR adds the function stbtt_GetNumberOfFonts to determine the number of fonts in a .ttc or .ttf file.  It uses the same basic code as asstbtt_GetFontOffsetForIndex, as well as following the structure of encapsulating internal methods from the API (stbtt_GetNumberOfFonts calls stbtt_GetNumberOfFonts_internal).
Note that the code to check for Apple TrueType fonts from PR #375 is NOT included in this PR.","This PR adds the function stbtt_GetNumberOfFonts to determine the number of fonts in a .ttc or .ttf file.  It uses the same basic code as asstbtt_GetFontOffsetForIndex, as well as following the structure of encapsulating internal methods from the API (stbtt_GetNumberOfFonts calls stbtt_GetNumberOfFonts_internal).
Note that the code to check for Apple TrueType fonts from PR #375 is NOT included in this PR.",True,{}
nothings/stb,https://github.com/nothings/stb,376,2016-12-05T00:08:01Z,2017-01-02T23:22:56Z,2017-01-02T23:22:56Z,MERGED,True,29,1,1,https://github.com/IntellectualKitty,Number of fonts in a TrueType file,2,"['4 enhancement', '1 stb_truetype']",https://github.com/nothings/stb/pull/376,https://github.com/nothings,2,https://github.com/nothings/stb/pull/376#issuecomment-270031332,"This PR adds the function stbtt_GetNumberOfFonts to determine the number of fonts in a .ttc or .ttf file.  It uses the same basic code as asstbtt_GetFontOffsetForIndex, as well as following the structure of encapsulating internal methods from the API (stbtt_GetNumberOfFonts calls stbtt_GetNumberOfFonts_internal).
Note that the code to check for Apple TrueType fonts from PR #375 is NOT included in this PR.","FWIW I never added this originally because you can just repeatedly call stbtt_GetFontOffsetForIndex until it fails, but I'm going ahead and adding it anyway.",True,{}
nothings/stb,https://github.com/nothings/stb,377,2016-12-05T12:49:56Z,2016-12-05T13:58:30Z,2016-12-05T13:58:30Z,MERGED,True,1,1,1,https://github.com/aras-p,stb_sprintf: seperators -> separators typo in comment,1,[],https://github.com/nothings/stb/pull/377,https://github.com/aras-p,1,https://github.com/nothings/stb/pull/377,,,True,{}
nothings/stb,https://github.com/nothings/stb,379,2016-12-05T13:01:47Z,2017-03-03T18:08:00Z,2017-03-03T18:08:00Z,MERGED,True,61,6,1,https://github.com/jarikomppa,"The Si prefixes for mega, giga and tera are upper case",3,"['2 bug', '4 enhancement', '1 stb_sprintf']",https://github.com/nothings/stb/pull/379,https://github.com/jarikomppa,1,https://github.com/nothings/stb/pull/379,"(lower case m is not mega but milli)
More proper fix would probably make these ""Kibibytes"" etc, as they're 1024 and not 1000 divisors, but this is pretty harmless change.","(lower case m is not mega but milli)
More proper fix would probably make these ""Kibibytes"" etc, as they're 1024 and not 1000 divisors, but this is pretty harmless change.",True,{}
nothings/stb,https://github.com/nothings/stb,379,2016-12-05T13:01:47Z,2017-03-03T18:08:00Z,2017-03-03T18:08:00Z,MERGED,True,61,6,1,https://github.com/jarikomppa,"The Si prefixes for mega, giga and tera are upper case",3,"['2 bug', '4 enhancement', '1 stb_sprintf']",https://github.com/nothings/stb/pull/379,https://github.com/jarikomppa,2,https://github.com/nothings/stb/pull/379#issuecomment-264849749,"(lower case m is not mega but milli)
More proper fix would probably make these ""Kibibytes"" etc, as they're 1024 and not 1000 divisors, but this is pretty harmless change.","Okay, added the Ki stuff to the patch.",True,{}
nothings/stb,https://github.com/nothings/stb,379,2016-12-05T13:01:47Z,2017-03-03T18:08:00Z,2017-03-03T18:08:00Z,MERGED,True,61,6,1,https://github.com/jarikomppa,"The Si prefixes for mega, giga and tera are upper case",3,"['2 bug', '4 enhancement', '1 stb_sprintf']",https://github.com/nothings/stb/pull/379,https://github.com/nothings,3,https://github.com/nothings/stb/pull/379#issuecomment-264864180,"(lower case m is not mega but milli)
More proper fix would probably make these ""Kibibytes"" etc, as they're 1024 and not 1000 divisors, but this is pretty harmless change.",I think the right thing to do here is support both power-of-1000 and power-of-1024.,True,{}
nothings/stb,https://github.com/nothings/stb,379,2016-12-05T13:01:47Z,2017-03-03T18:08:00Z,2017-03-03T18:08:00Z,MERGED,True,61,6,1,https://github.com/jarikomppa,"The Si prefixes for mega, giga and tera are upper case",3,"['2 bug', '4 enhancement', '1 stb_sprintf']",https://github.com/nothings/stb/pull/379,https://github.com/jarikomppa,4,https://github.com/nothings/stb/pull/379#issuecomment-264870122,"(lower case m is not mega but milli)
More proper fix would probably make these ""Kibibytes"" etc, as they're 1024 and not 1000 divisors, but this is pretty harmless change.","Sure, but the power-of-1000 would be a different prefix.
…
On Mon, Dec 5, 2016 at 4:15 PM, Sean Barrett ***@***.***> wrote:
 I think the right thing to do here is support both power-of-1000 and
 power-of-1024.

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub
 <#379 (comment)>, or mute
 the thread
 <https://github.com/notifications/unsubscribe-auth/AEQ_Rxqn_hJuMdYeOBxiI3ZEWK6kktKgks5rFBx6gaJpZM4LEMpR>
 .",True,{}
nothings/stb,https://github.com/nothings/stb,379,2016-12-05T13:01:47Z,2017-03-03T18:08:00Z,2017-03-03T18:08:00Z,MERGED,True,61,6,1,https://github.com/jarikomppa,"The Si prefixes for mega, giga and tera are upper case",3,"['2 bug', '4 enhancement', '1 stb_sprintf']",https://github.com/nothings/stb/pull/379,https://github.com/nothings,5,https://github.com/nothings/stb/pull/379#issuecomment-264872354,"(lower case m is not mega but milli)
More proper fix would probably make these ""Kibibytes"" etc, as they're 1024 and not 1000 divisors, but this is pretty harmless change.","Ok, I didn't really explain my vague thoughts, but the point is it presumably shouldn't be on a #define. I guess there are three cases (1000-as-K, 1024-as-Ki, 1024-as-K) overall, so the question is whether it makes sense to lock the last two to a #define or not.",True,{}
nothings/stb,https://github.com/nothings/stb,379,2016-12-05T13:01:47Z,2017-03-03T18:08:00Z,2017-03-03T18:08:00Z,MERGED,True,61,6,1,https://github.com/jarikomppa,"The Si prefixes for mega, giga and tera are upper case",3,"['2 bug', '4 enhancement', '1 stb_sprintf']",https://github.com/nothings/stb/pull/379,https://github.com/jarikomppa,6,https://github.com/nothings/stb/pull/379#issuecomment-264873108,"(lower case m is not mega but milli)
More proper fix would probably make these ""Kibibytes"" etc, as they're 1024 and not 1000 divisors, but this is pretty harmless change.","Yeah, better have it configurable on the fly; the change I did was minimal
change that should be safe to integrate. I'll look into how the prefixes
are parsed to see if there's a simple way to add more configurability (and
if not, how to add more prefixes).
…
On Mon, Dec 5, 2016 at 4:47 PM, Sean Barrett ***@***.***> wrote:
 Ok, I didn't really explain my vague thoughts, but the point is it
 presumably shouldn't be on a #define. I guess there are three cases
 (1000-as-K, 1024-as-Ki, 1024-as-K) overall, so the question is whether it
 makes sense to lock the last two to a #define or not.

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub
 <#379 (comment)>, or mute
 the thread
 <https://github.com/notifications/unsubscribe-auth/AEQ_Rw13-Ah6Yr6z8qaRXROAZfKt4h6jks5rFCQfgaJpZM4LEMpR>
 .",True,{}
nothings/stb,https://github.com/nothings/stb,379,2016-12-05T13:01:47Z,2017-03-03T18:08:00Z,2017-03-03T18:08:00Z,MERGED,True,61,6,1,https://github.com/jarikomppa,"The Si prefixes for mega, giga and tera are upper case",3,"['2 bug', '4 enhancement', '1 stb_sprintf']",https://github.com/nothings/stb/pull/379,https://github.com/jarikomppa,7,https://github.com/nothings/stb/pull/379#issuecomment-264874486,"(lower case m is not mega but milli)
More proper fix would probably make these ""Kibibytes"" etc, as they're 1024 and not 1000 divisors, but this is pretty harmless change.","Would this work:
$ - SI 1000->k
$$ - SI 1024->Ki
$$$ - JEDEC 1024->K

I'd also like the space between numbers and the SI prefix to be optional,
but that's a different dimension (and having more than three $'s in a
format would be overly messy)
…
On Mon, Dec 5, 2016 at 4:50 PM, Jari Komppa ***@***.***> wrote:
 Yeah, better have it configurable on the fly; the change I did was minimal
 change that should be safe to integrate. I'll look into how the prefixes
 are parsed to see if there's a simple way to add more configurability (and
 if not, how to add more prefixes).

 On Mon, Dec 5, 2016 at 4:47 PM, Sean Barrett ***@***.***>
 wrote:

> Ok, I didn't really explain my vague thoughts, but the point is it
> presumably shouldn't be on a #define. I guess there are three cases
> (1000-as-K, 1024-as-Ki, 1024-as-K) overall, so the question is whether it
> makes sense to lock the last two to a #define or not.
>
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> <#379 (comment)>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/AEQ_Rw13-Ah6Yr6z8qaRXROAZfKt4h6jks5rFCQfgaJpZM4LEMpR>
> .
>",True,{}
nothings/stb,https://github.com/nothings/stb,379,2016-12-05T13:01:47Z,2017-03-03T18:08:00Z,2017-03-03T18:08:00Z,MERGED,True,61,6,1,https://github.com/jarikomppa,"The Si prefixes for mega, giga and tera are upper case",3,"['2 bug', '4 enhancement', '1 stb_sprintf']",https://github.com/nothings/stb/pull/379,https://github.com/nothings,8,https://github.com/nothings/stb/pull/379#issuecomment-264881968,"(lower case m is not mega but milli)
More proper fix would probably make these ""Kibibytes"" etc, as they're 1024 and not 1000 divisors, but this is pretty harmless change.","Is $ a modifier or is it a terminal character of the %-sequence? If the latter, it would be bad to have $/$$/$$$, since then there's no way to print a bare '$' after the sequence if the type is $ or $$.",True,{}
nothings/stb,https://github.com/nothings/stb,379,2016-12-05T13:01:47Z,2017-03-03T18:08:00Z,2017-03-03T18:08:00Z,MERGED,True,61,6,1,https://github.com/jarikomppa,"The Si prefixes for mega, giga and tera are upper case",3,"['2 bug', '4 enhancement', '1 stb_sprintf']",https://github.com/nothings/stb/pull/379,https://github.com/jarikomppa,9,https://github.com/nothings/stb/pull/379#issuecomment-264883616,"(lower case m is not mega but milli)
More proper fix would probably make these ""Kibibytes"" etc, as they're 1024 and not 1000 divisors, but this is pretty harmless change.","A bit more involved change. I tried to follow the code style somewhat, but probably failed miserably. Anyway, the results look like this:
stbsp_sprintf(temp, ""%10d %$d %$$d %$$$d  %_$d %_$_$d %$$$_d"",v,v,v,v,v,v,v);

2147483647 2.1 G 2.0 Gi 2.0 G  2.1G 2.0Gi 2.0G
1073741823 1.1 G 1024.0 Mi 1024.0 M  1.1G 1024.0Mi 1024.0M
 536870911 536.9 M 512.0 Mi 512.0 M  536.9M 512.0Mi 512.0M
 268435455 268.4 M 256.0 Mi 256.0 M  268.4M 256.0Mi 256.0M
 134217727 134.2 M 128.0 Mi 128.0 M  134.2M 128.0Mi 128.0M
  67108863 67.1 M 64.0 Mi 64.0 M  67.1M 64.0Mi 64.0M
  33554431 33.6 M 32.0 Mi 32.0 M  33.6M 32.0Mi 32.0M
  16777215 16.8 M 16.0 Mi 16.0 M  16.8M 16.0Mi 16.0M
   8388607 8.4 M 8.0 Mi 8.0 M  8.4M 8.0Mi 8.0M
   4194303 4.2 M 4.0 Mi 4.0 M  4.2M 4.0Mi 4.0M
   2097151 2.1 M 2.0 Mi 2.0 M  2.1M 2.0Mi 2.0M
   1048575 1.0 M 1024.0 Ki 1024.0 K  1.0M 1024.0Ki 1024.0K
    524287 524.3 k 512.0 Ki 512.0 K  524.3k 512.0Ki 512.0K
    262143 262.1 k 256.0 Ki 256.0 K  262.1k 256.0Ki 256.0K
    131071 131.1 k 128.0 Ki 128.0 K  131.1k 128.0Ki 128.0K
     65535 65.5 k 64.0 Ki 64.0 K  65.5k 64.0Ki 64.0K
     32767 32.8 k 32.0 Ki 32.0 K  32.8k 32.0Ki 32.0K
     16383 16.4 k 16.0 Ki 16.0 K  16.4k 16.0Ki 16.0K
      8191 8.2 k 8.0 Ki 8.0 K  8.2k 8.0Ki 8.0K
      4095 4.1 k 4.0 Ki 4.0 K  4.1k 4.0Ki 4.0K
      2047 2.0 k 2.0 Ki 2.0 K  2.0k 2.0Ki 2.0K
      1023 1 k 1023  1023   1k 1023 1023
       511 511  511  511   511 511 511
       255 255  255  255   255 255 255

I did notice while doing this that the $-formatted stuff doesn't work with the padding parameters (so doing %5$d, for example, doesn't work).",True,{}
nothings/stb,https://github.com/nothings/stb,379,2016-12-05T13:01:47Z,2017-03-03T18:08:00Z,2017-03-03T18:08:00Z,MERGED,True,61,6,1,https://github.com/jarikomppa,"The Si prefixes for mega, giga and tera are upper case",3,"['2 bug', '4 enhancement', '1 stb_sprintf']",https://github.com/nothings/stb/pull/379,https://github.com/jarikomppa,10,https://github.com/nothings/stb/pull/379#issuecomment-264892125,"(lower case m is not mega but milli)
More proper fix would probably make these ""Kibibytes"" etc, as they're 1024 and not 1000 divisors, but this is pretty harmless change.","It's a modifier.
…
On Monday, December 5, 2016, Sean Barrett ***@***.***> wrote:
 Is $ a modifier or is it a terminal character of the %-sequence? If the
 latter, it would be bad to have $/$$/$$$, since then there's no way to
 print a bare '$' after the sequence if the type is $ or $$.

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub
 <#379 (comment)>, or mute
 the thread
 <https://github.com/notifications/unsubscribe-auth/AEQ_R_zbTbu9o7xc3f8OWCl34JDvNTSfks5rFCxMgaJpZM4LEMpR>
 .",True,{}
nothings/stb,https://github.com/nothings/stb,379,2016-12-05T13:01:47Z,2017-03-03T18:08:00Z,2017-03-03T18:08:00Z,MERGED,True,61,6,1,https://github.com/jarikomppa,"The Si prefixes for mega, giga and tera are upper case",3,"['2 bug', '4 enhancement', '1 stb_sprintf']",https://github.com/nothings/stb/pull/379,https://github.com/jarikomppa,11,https://github.com/nothings/stb/pull/379#issuecomment-264939375,"(lower case m is not mega but milli)
More proper fix would probably make these ""Kibibytes"" etc, as they're 1024 and not 1000 divisors, but this is pretty harmless change.",The $ character has to be a modifier because otherwise printf wouldn't know what format the source data is in. I also added the _ modifier to get rid of the space between number and the postfix.,True,{}
nothings/stb,https://github.com/nothings/stb,380,2016-12-05T16:24:08Z,2016-12-05T22:48:25Z,2016-12-05T22:48:25Z,CLOSED,False,3,3,1,https://github.com/Kelimion,Fix comments where rr* functions hadn't been renamed yet.,1,[],https://github.com/nothings/stb/pull/380,https://github.com/Kelimion,1,https://github.com/nothings/stb/pull/380,Just a bit of janitorial work. The original functions seem to have been called rr* and not all comments had been updated to reflect the new names yet.,Just a bit of janitorial work. The original functions seem to have been called rr* and not all comments had been updated to reflect the new names yet.,True,{}
nothings/stb,https://github.com/nothings/stb,380,2016-12-05T16:24:08Z,2016-12-05T22:48:25Z,2016-12-05T22:48:25Z,CLOSED,False,3,3,1,https://github.com/Kelimion,Fix comments where rr* functions hadn't been renamed yet.,1,[],https://github.com/nothings/stb/pull/380,https://github.com/nothings,2,https://github.com/nothings/stb/pull/380#issuecomment-265003220,Just a bit of janitorial work. The original functions seem to have been called rr* and not all comments had been updated to reflect the new names yet.,This was fixed independently.,True,{}
nothings/stb,https://github.com/nothings/stb,381,2016-12-05T21:07:11Z,2017-01-16T08:51:43Z,2017-01-16T08:51:43Z,MERGED,True,4,1,1,https://github.com/d26435,Fix the check for a percent character,1,"['4 enhancement', 'code quality', '1 stb_sprintf']",https://github.com/nothings/stb/pull/381,https://github.com/d26435,1,https://github.com/nothings/stb/pull/381,"It was matching everything less than 0x26, so could cause a minor performance loss. Also made the second if statement superfluous.","It was matching everything less than 0x26, so could cause a minor performance loss. Also made the second if statement superfluous.",True,{}
nothings/stb,https://github.com/nothings/stb,381,2016-12-05T21:07:11Z,2017-01-16T08:51:43Z,2017-01-16T08:51:43Z,MERGED,True,4,1,1,https://github.com/d26435,Fix the check for a percent character,1,"['4 enhancement', 'code quality', '1 stb_sprintf']",https://github.com/nothings/stb/pull/381,https://github.com/jeffatrad,2,https://github.com/nothings/stb/pull/381#issuecomment-266663243,"It was matching everything less than 0x26, so could cause a minor performance loss. Also made the second if statement superfluous.",Cool - nice catch!!,True,{}
nothings/stb,https://github.com/nothings/stb,382,2016-12-06T00:20:31Z,2017-03-03T18:08:01Z,2017-03-03T18:08:01Z,MERGED,True,16,7,1,https://github.com/rohit-n,stb_printf.h: Reuse code for assigning lead sign.,1,"['code quality', '1 stb_sprintf']",https://github.com/nothings/stb/pull/382,https://github.com/rohit-n,1,https://github.com/nothings/stb/pull/382,The reused code is also easier to read.,The reused code is also easier to read.,True,{}
nothings/stb,https://github.com/nothings/stb,386,2016-12-16T04:51:38Z,2017-01-16T08:51:43Z,2017-01-16T08:51:43Z,MERGED,True,1,1,1,https://github.com/sammyhw,allow for all 16 bits,1,"['2 bug', '1 stb_image']",https://github.com/nothings/stb/pull/386,https://github.com/sammyhw,1,https://github.com/nothings/stb/pull/386,stbi_uc was truncating to an 8 bits,stbi_uc was truncating to an 8 bits,True,{}
nothings/stb,https://github.com/nothings/stb,389,2016-12-26T15:07:25Z,2017-03-03T16:41:18Z,2017-03-03T16:41:18Z,MERGED,True,1,0,1,https://github.com/alxprd,Error control in stb_vorbis_open_memory.,1,"['4 enhancement', '1 stb_vorbis']",https://github.com/nothings/stb/pull/389,https://github.com/alxprd,1,https://github.com/nothings/stb/pull/389,Overwrites error parameter in stb_vorbis_open_memory when there is no error. This avoid confusion due to previous values.,Overwrites error parameter in stb_vorbis_open_memory when there is no error. This avoid confusion due to previous values.,True,{}
nothings/stb,https://github.com/nothings/stb,391,2016-12-27T11:15:25Z,2017-03-03T16:41:19Z,2017-03-04T06:02:15Z,MERGED,True,4,4,1,https://github.com/jlnr,stb_vorbis: Rename Point to stbv__point,1,"['2 bug', '1 stb_vorbis']",https://github.com/nothings/stb/pull/391,https://github.com/jlnr,1,https://github.com/nothings/stb/pull/391,"Point clashes with the struct of the same name in MacTypes.h (included by CoreFoundation.h on macOS/iOS), which breaks stb_vorbis.c when a precompiled header includes these files. (Admittedly, this is only an issue because of my oddball project setup...)
The stb_image libraries use the stbi__ prefix for internal structs/functions, so I've prefixed this struct with stbv__.
I'm not sure that ""point"" is a descriptive name to begin with. The struct is only used in one place, and the comment states that it's not really a point, but repurposed as something else. Is there a better name for what it is? An ""X with index""? Should I rather rename the struct instead of prefixing it?","Point clashes with the struct of the same name in MacTypes.h (included by CoreFoundation.h on macOS/iOS), which breaks stb_vorbis.c when a precompiled header includes these files. (Admittedly, this is only an issue because of my oddball project setup...)
The stb_image libraries use the stbi__ prefix for internal structs/functions, so I've prefixed this struct with stbv__.
I'm not sure that ""point"" is a descriptive name to begin with. The struct is only used in one place, and the comment states that it's not really a point, but repurposed as something else. Is there a better name for what it is? An ""X with index""? Should I rather rename the struct instead of prefixing it?",True,{}
nothings/stb,https://github.com/nothings/stb,391,2016-12-27T11:15:25Z,2017-03-03T16:41:19Z,2017-03-04T06:02:15Z,MERGED,True,4,4,1,https://github.com/jlnr,stb_vorbis: Rename Point to stbv__point,1,"['2 bug', '1 stb_vorbis']",https://github.com/nothings/stb/pull/391,https://github.com/nothings,2,https://github.com/nothings/stb/pull/391#issuecomment-283974263,"Point clashes with the struct of the same name in MacTypes.h (included by CoreFoundation.h on macOS/iOS), which breaks stb_vorbis.c when a precompiled header includes these files. (Admittedly, this is only an issue because of my oddball project setup...)
The stb_image libraries use the stbi__ prefix for internal structs/functions, so I've prefixed this struct with stbv__.
I'm not sure that ""point"" is a descriptive name to begin with. The struct is only used in one place, and the comment states that it's not really a point, but repurposed as something else. Is there a better name for what it is? An ""X with index""? Should I rather rename the struct instead of prefixing it?",I renamed this further as you suggested.,True,{}
nothings/stb,https://github.com/nothings/stb,392,2016-12-28T13:19:53Z,2017-03-03T16:41:19Z,2017-03-03T16:41:19Z,MERGED,True,5,4,1,https://github.com/RufUsul,stb_image.h: large structures on the stack,1,"['4 enhancement', '1 stb_image']",https://github.com/nothings/stb/pull/392,https://github.com/RufUsul,1,https://github.com/nothings/stb/pull/392,"more of ""allocate large structures on the stack"", this time in the forgotten stbi__jpeg_test
-> avoids the infamous _chkstk() when working without CRT in VisualC++","more of ""allocate large structures on the stack"", this time in the forgotten stbi__jpeg_test
-> avoids the infamous _chkstk() when working without CRT in VisualC++",True,{'THUMBS_UP': ['https://github.com/Dennis1000']}
nothings/stb,https://github.com/nothings/stb,394,2017-01-02T18:58:13Z,2019-03-05T06:46:56Z,2019-03-05T06:46:56Z,CLOSED,False,8,5,1,https://github.com/obiwanus,stretchy_buffer: Add sb_reserve feature,1,"['4 enhancement', '1 stb library w/no tag']",https://github.com/nothings/stb/pull/394,https://github.com/obiwanus,1,https://github.com/nothings/stb/pull/394,"If you know you will need at least n elements in your array, you may wish to reserve space beforehand in order to avoid the first few reallocations","If you know you will need at least n elements in your array, you may wish to reserve space beforehand in order to avoid the first few reallocations",True,{}
nothings/stb,https://github.com/nothings/stb,394,2017-01-02T18:58:13Z,2019-03-05T06:46:56Z,2019-03-05T06:46:56Z,CLOSED,False,8,5,1,https://github.com/obiwanus,stretchy_buffer: Add sb_reserve feature,1,"['4 enhancement', '1 stb library w/no tag']",https://github.com/nothings/stb/pull/394,https://github.com/nothings,2,https://github.com/nothings/stb/pull/394#issuecomment-270010010,"If you know you will need at least n elements in your array, you may wish to reserve space beforehand in order to avoid the first few reallocations",See this discussion regarding adding new features to stretchy_buffer: #35,True,{}
nothings/stb,https://github.com/nothings/stb,394,2017-01-02T18:58:13Z,2019-03-05T06:46:56Z,2019-03-05T06:46:56Z,CLOSED,False,8,5,1,https://github.com/obiwanus,stretchy_buffer: Add sb_reserve feature,1,"['4 enhancement', '1 stb library w/no tag']",https://github.com/nothings/stb/pull/394,https://github.com/nothings,3,https://github.com/nothings/stb/pull/394#issuecomment-270015911,"If you know you will need at least n elements in your array, you may wish to reserve space beforehand in order to avoid the first few reallocations","Well, I didn't close it, because of course that discussion was in 2015, and the point was instead of doing it piecemeal to just grab ALL the functions, but I've never done it, so.",True,{}
nothings/stb,https://github.com/nothings/stb,394,2017-01-02T18:58:13Z,2019-03-05T06:46:56Z,2019-03-05T06:46:56Z,CLOSED,False,8,5,1,https://github.com/obiwanus,stretchy_buffer: Add sb_reserve feature,1,"['4 enhancement', '1 stb library w/no tag']",https://github.com/nothings/stb/pull/394,https://github.com/nothings,4,https://github.com/nothings/stb/pull/394#issuecomment-469560754,"If you know you will need at least n elements in your array, you may wish to reserve space beforehand in order to avoid the first few reallocations",deprecating this since stb_ds.h is replacing stretchy_buffer,True,{}
nothings/stb,https://github.com/nothings/stb,395,2017-01-03T02:08:44Z,2017-01-03T02:15:09Z,2017-01-03T02:15:09Z,MERGED,True,6,6,1,https://github.com/dougallj,stb_truetype: Fix a couple of CFF bugs,1,[],https://github.com/nothings/stb/pull/395,https://github.com/dougallj,1,https://github.com/nothings/stb/pull/395,"The CFF/Type 2 changes broke including without STB_TRUETYPE_IMPLEMENTATION defined, and had a typo. Sorry!","The CFF/Type 2 changes broke including without STB_TRUETYPE_IMPLEMENTATION defined, and had a typo. Sorry!",True,{}
nothings/stb,https://github.com/nothings/stb,395,2017-01-03T02:08:44Z,2017-01-03T02:15:09Z,2017-01-03T02:15:09Z,MERGED,True,6,6,1,https://github.com/dougallj,stb_truetype: Fix a couple of CFF bugs,1,[],https://github.com/nothings/stb/pull/395,https://github.com/nothings,2,https://github.com/nothings/stb/pull/395#issuecomment-270042505,"The CFF/Type 2 changes broke including without STB_TRUETYPE_IMPLEMENTATION defined, and had a typo. Sorry!","I didn't test that it did more than build, thanks. Since I didn't announce the release yet, I'm not bumping the version number.",True,{}
nothings/stb,https://github.com/nothings/stb,401,2017-01-16T10:13:15Z,2017-01-16T11:17:56Z,2017-01-16T11:17:56Z,MERGED,True,1,1,1,https://github.com/themanagainstthetank,update stb_image.h,1,[],https://github.com/nothings/stb/pull/401,https://github.com/themanagainstthetank,1,https://github.com/nothings/stb/pull/401,"int raw_data[4] to 0, or the compiler bugs   line:5378","int raw_data[4] to 0, or the compiler bugs   line:5378",True,{}
nothings/stb,https://github.com/nothings/stb,402,2017-01-18T18:48:44Z,2017-01-18T18:51:24Z,2017-05-29T18:21:58Z,CLOSED,False,2,2,1,https://github.com/jellyfishcoder,Fixed Duplicate Symbols Linker Error,1,[],https://github.com/nothings/stb/pull/402,https://github.com/jellyfishcoder,1,https://github.com/nothings/stb/pull/402,"When including the header stb_image.h from another header, included from a source file. It makes duplicate symbols and causes 33 linker errors. Simply changing the functions to inline preserves all functionality and fixes the errors.","When including the header stb_image.h from another header, included from a source file. It makes duplicate symbols and causes 33 linker errors. Simply changing the functions to inline preserves all functionality and fixes the errors.",True,{}
nothings/stb,https://github.com/nothings/stb,402,2017-01-18T18:48:44Z,2017-01-18T18:51:24Z,2017-05-29T18:21:58Z,CLOSED,False,2,2,1,https://github.com/jellyfishcoder,Fixed Duplicate Symbols Linker Error,1,[],https://github.com/nothings/stb/pull/402,https://github.com/maluramichael,2,https://github.com/nothings/stb/pull/402#issuecomment-302088142,"When including the header stb_image.h from another header, included from a source file. It makes duplicate symbols and causes 33 linker errors. Simply changing the functions to inline preserves all functionality and fixes the errors.",Got exactly the same problem. Why does this work? And could this be merged with the main repository?,True,{}
nothings/stb,https://github.com/nothings/stb,402,2017-01-18T18:48:44Z,2017-01-18T18:51:24Z,2017-05-29T18:21:58Z,CLOSED,False,2,2,1,https://github.com/jellyfishcoder,Fixed Duplicate Symbols Linker Error,1,[],https://github.com/nothings/stb/pull/402,https://github.com/denisdemaisbr,3,https://github.com/nothings/stb/pull/402#issuecomment-302139265,"When including the header stb_image.h from another header, included from a source file. It makes duplicate symbols and causes 33 linker errors. Simply changing the functions to inline preserves all functionality and fixes the errors.",it work's but generate a duplicated data segment (file size),True,{}
nothings/stb,https://github.com/nothings/stb,402,2017-01-18T18:48:44Z,2017-01-18T18:51:24Z,2017-05-29T18:21:58Z,CLOSED,False,2,2,1,https://github.com/jellyfishcoder,Fixed Duplicate Symbols Linker Error,1,[],https://github.com/nothings/stb/pull/402,https://github.com/nothings,4,https://github.com/nothings/stb/pull/402#issuecomment-302195759,"When including the header stb_image.h from another header, included from a source file. It makes duplicate symbols and causes 33 linker errors. Simply changing the functions to inline preserves all functionality and fixes the errors.","Changing to 'inline' is not a solution for pre-C99 compilers, since 'inline' isn't a thing before C99, so a list of what's actually failing here would be helpful so I can investigate.",True,{}
nothings/stb,https://github.com/nothings/stb,402,2017-01-18T18:48:44Z,2017-01-18T18:51:24Z,2017-05-29T18:21:58Z,CLOSED,False,2,2,1,https://github.com/jellyfishcoder,Fixed Duplicate Symbols Linker Error,1,[],https://github.com/nothings/stb/pull/402,https://github.com/nothings,5,https://github.com/nothings/stb/pull/402#issuecomment-302195940,"When including the header stb_image.h from another header, included from a source file. It makes duplicate symbols and causes 33 linker errors. Simply changing the functions to inline preserves all functionality and fixes the errors.",Another possibility is just that you're doing 'STB_IMAGE_IMPLEMENTATION' in more than one file.,True,{'THUMBS_UP': ['https://github.com/denisdemaisbr']}
nothings/stb,https://github.com/nothings/stb,402,2017-01-18T18:48:44Z,2017-01-18T18:51:24Z,2017-05-29T18:21:58Z,CLOSED,False,2,2,1,https://github.com/jellyfishcoder,Fixed Duplicate Symbols Linker Error,1,[],https://github.com/nothings/stb/pull/402,https://github.com/maluramichael,6,https://github.com/nothings/stb/pull/402#issuecomment-302314837,"When including the header stb_image.h from another header, included from a source file. It makes duplicate symbols and causes 33 linker errors. Simply changing the functions to inline preserves all functionality and fixes the errors.","As you can see here https://github.com/maluramichael/pancake/blob/master/Pancake/Texture.h i include stb_image.h. The Texture.h is of course used in multiple places. But i tried to add include guards and pragma once everywhere, still getting the error from above.
The only way to get this working is by adding the inline. I would like to use your files the way they are intendet, so what am i doing wrong :/?",True,{}
nothings/stb,https://github.com/nothings/stb,402,2017-01-18T18:48:44Z,2017-01-18T18:51:24Z,2017-05-29T18:21:58Z,CLOSED,False,2,2,1,https://github.com/jellyfishcoder,Fixed Duplicate Symbols Linker Error,1,[],https://github.com/nothings/stb/pull/402,https://github.com/nothings,7,https://github.com/nothings/stb/pull/402#issuecomment-302323719,"When including the header stb_image.h from another header, included from a source file. It makes duplicate symbols and causes 33 linker errors. Simply changing the functions to inline preserves all functionality and fixes the errors.",I need to see the errors. Nobody in the thread has given me the actual errors.,True,{'THUMBS_UP': ['https://github.com/maluramichael']}
nothings/stb,https://github.com/nothings/stb,402,2017-01-18T18:48:44Z,2017-01-18T18:51:24Z,2017-05-29T18:21:58Z,CLOSED,False,2,2,1,https://github.com/jellyfishcoder,Fixed Duplicate Symbols Linker Error,1,[],https://github.com/nothings/stb/pull/402,https://github.com/maluramichael,8,https://github.com/nothings/stb/pull/402#issuecomment-302335024,"When including the header stb_image.h from another header, included from a source file. It makes duplicate symbols and causes 33 linker errors. Simply changing the functions to inline preserves all functionality and fixes the errors.","You are right
""/Users/michaelmalura/Library/Application Support/JetBrains/Toolbox/apps/CLion/ch-0/171.4073.41/CLion.app/Contents/bin/cmake/bin/cmake"" --build /Users/michaelmalura/Development/Private/gamecollection/cmake-build-debug --target uitest -- -j 8
Scanning dependencies of target uitest
[  3%] Building CXX object games/uitest/CMakeFiles/uitest.dir/main.cpp.o
[  9%] Building CXX object games/uitest/CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Assets.cpp.o
[  9%] Building CXX object games/uitest/CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/BaseGame.cpp.o
[ 16%] Building CXX object games/uitest/CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Painter.cpp.o
[ 16%] Building CXX object games/uitest/CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Texture.cpp.o
[ 19%] Linking CXX executable ../../../bin/uitest
duplicate symbol _stbi_is_hdr_from_memory in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Assets.cpp.o
duplicate symbol _stbi_info_from_memory in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Assets.cpp.o
duplicate symbol _stbi_loadf_from_memory in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Assets.cpp.o
duplicate symbol _stbi_load_from_memory in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Assets.cpp.o
duplicate symbol _stbi_is_hdr_from_callbacks in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Assets.cpp.o
duplicate symbol _stbi_info_from_callbacks in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Assets.cpp.o
duplicate symbol _stbi_loadf_from_callbacks in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Assets.cpp.o
duplicate symbol _stbi_load_from_callbacks in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Assets.cpp.o
duplicate symbol _stbi_zlib_decode_noheader_buffer in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Assets.cpp.o
duplicate symbol _stbi_zlib_decode_buffer in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Assets.cpp.o
duplicate symbol _stbi_is_hdr in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Assets.cpp.o
duplicate symbol _stbi_info in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Assets.cpp.o
duplicate symbol _stbi_failure_reason in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Assets.cpp.o
duplicate symbol _stbi_zlib_decode_malloc_guesssize_headerflag in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Assets.cpp.o
duplicate symbol _stbi_loadf in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Assets.cpp.o
duplicate symbol _stbi_zlib_decode_malloc_guesssize in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Assets.cpp.o
duplicate symbol _stbi_is_hdr_from_file in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Assets.cpp.o
duplicate symbol _stbi_info_from_file in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Assets.cpp.o
duplicate symbol _stbi_loadf_from_file in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Assets.cpp.o
duplicate symbol _stbi_load_from_file in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Assets.cpp.o
duplicate symbol _stbi_hdr_to_ldr_scale in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Assets.cpp.o
duplicate symbol _stbi_ldr_to_hdr_scale in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Assets.cpp.o
duplicate symbol _stbi_image_free in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Assets.cpp.o
duplicate symbol _stbi_set_unpremultiply_on_load in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Assets.cpp.o
duplicate symbol _stbi_set_flip_vertically_on_load in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Assets.cpp.o
duplicate symbol _stbi_load in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Assets.cpp.o
duplicate symbol _stbi_zlib_decode_noheader_malloc in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Assets.cpp.o
duplicate symbol _stbi_zlib_decode_malloc in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Assets.cpp.o
duplicate symbol _stbi_convert_iphone_png_to_rgb in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Assets.cpp.o
duplicate symbol _stbi_hdr_to_ldr_gamma in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Assets.cpp.o
duplicate symbol _stbi_ldr_to_hdr_gamma in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Assets.cpp.o
duplicate symbol _stbi_load_from_file_16 in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Assets.cpp.o
duplicate symbol _stbi_load_16 in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Assets.cpp.o
duplicate symbol _stbi_is_hdr_from_memory in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/BaseGame.cpp.o
duplicate symbol _stbi_info_from_memory in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/BaseGame.cpp.o
duplicate symbol _stbi_loadf_from_memory in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/BaseGame.cpp.o
duplicate symbol _stbi_load_from_memory in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/BaseGame.cpp.o
duplicate symbol _stbi_is_hdr_from_callbacks in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/BaseGame.cpp.o
duplicate symbol _stbi_info_from_callbacks in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/BaseGame.cpp.o
duplicate symbol _stbi_loadf_from_callbacks in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/BaseGame.cpp.o
duplicate symbol _stbi_load_from_callbacks in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/BaseGame.cpp.o
duplicate symbol _stbi_zlib_decode_noheader_buffer in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/BaseGame.cpp.o
duplicate symbol _stbi_zlib_decode_buffer in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/BaseGame.cpp.o
duplicate symbol _stbi_is_hdr in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/BaseGame.cpp.o
duplicate symbol _stbi_info in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/BaseGame.cpp.o
duplicate symbol _stbi_failure_reason in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/BaseGame.cpp.o
duplicate symbol _stbi_zlib_decode_malloc_guesssize_headerflag in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/BaseGame.cpp.o
duplicate symbol _stbi_loadf in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/BaseGame.cpp.o
duplicate symbol _stbi_zlib_decode_malloc_guesssize in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/BaseGame.cpp.o
duplicate symbol _stbi_is_hdr_from_file in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/BaseGame.cpp.o
duplicate symbol _stbi_info_from_file in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/BaseGame.cpp.o
duplicate symbol _stbi_loadf_from_file in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/BaseGame.cpp.o
duplicate symbol _stbi_load_from_file in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/BaseGame.cpp.o
duplicate symbol _stbi_hdr_to_ldr_scale in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/BaseGame.cpp.o
duplicate symbol _stbi_ldr_to_hdr_scale in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/BaseGame.cpp.o
duplicate symbol _stbi_image_free in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/BaseGame.cpp.o
duplicate symbol _stbi_set_unpremultiply_on_load in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/BaseGame.cpp.o
duplicate symbol _stbi_set_flip_vertically_on_load in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/BaseGame.cpp.o
duplicate symbol _stbi_load in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/BaseGame.cpp.o
duplicate symbol _stbi_zlib_decode_noheader_malloc in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/BaseGame.cpp.o
duplicate symbol _stbi_zlib_decode_malloc in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/BaseGame.cpp.o
duplicate symbol _stbi_convert_iphone_png_to_rgb in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/BaseGame.cpp.o
duplicate symbol _stbi_hdr_to_ldr_gamma in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/BaseGame.cpp.o
duplicate symbol _stbi_ldr_to_hdr_gamma in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/BaseGame.cpp.o
duplicate symbol _stbi_load_from_file_16 in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/BaseGame.cpp.o
duplicate symbol _stbi_load_16 in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/BaseGame.cpp.o
duplicate symbol _stbi_is_hdr_from_memory in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Painter.cpp.o
duplicate symbol _stbi_info_from_memory in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Painter.cpp.o
duplicate symbol _stbi_loadf_from_memory in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Painter.cpp.o
duplicate symbol _stbi_load_from_memory in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Painter.cpp.o
duplicate symbol _stbi_is_hdr_from_callbacks in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Painter.cpp.o
duplicate symbol _stbi_info_from_callbacks in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Painter.cpp.o
duplicate symbol _stbi_loadf_from_callbacks in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Painter.cpp.o
duplicate symbol _stbi_load_from_callbacks in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Painter.cpp.o
duplicate symbol _stbi_zlib_decode_noheader_buffer in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Painter.cpp.o
duplicate symbol _stbi_zlib_decode_buffer in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Painter.cpp.o
duplicate symbol _stbi_is_hdr in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Painter.cpp.o
duplicate symbol _stbi_info in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Painter.cpp.o
duplicate symbol _stbi_failure_reason in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Painter.cpp.o
duplicate symbol _stbi_zlib_decode_malloc_guesssize_headerflag in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Painter.cpp.o
duplicate symbol _stbi_loadf in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Painter.cpp.o
duplicate symbol _stbi_zlib_decode_malloc_guesssize in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Painter.cpp.o
duplicate symbol _stbi_is_hdr_from_file in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Painter.cpp.o
duplicate symbol _stbi_info_from_file in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Painter.cpp.o
duplicate symbol _stbi_loadf_from_file in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Painter.cpp.o
duplicate symbol _stbi_load_from_file in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Painter.cpp.o
duplicate symbol _stbi_hdr_to_ldr_scale in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Painter.cpp.o
duplicate symbol _stbi_ldr_to_hdr_scale in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Painter.cpp.o
duplicate symbol _stbi_image_free in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Painter.cpp.o
duplicate symbol _stbi_set_unpremultiply_on_load in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Painter.cpp.o
duplicate symbol _stbi_set_flip_vertically_on_load in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Painter.cpp.o
duplicate symbol _stbi_load in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Painter.cpp.o
duplicate symbol _stbi_zlib_decode_noheader_malloc in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Painter.cpp.o
duplicate symbol _stbi_zlib_decode_malloc in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Painter.cpp.o
duplicate symbol _stbi_convert_iphone_png_to_rgb in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Painter.cpp.o
duplicate symbol _stbi_hdr_to_ldr_gamma in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Painter.cpp.o
duplicate symbol _stbi_ldr_to_hdr_gamma in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Painter.cpp.o
duplicate symbol _stbi_load_from_file_16 in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Painter.cpp.o
duplicate symbol _stbi_load_16 in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Painter.cpp.o
duplicate symbol _stbi_is_hdr_from_memory in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Texture.cpp.o
duplicate symbol _stbi_info_from_memory in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Texture.cpp.o
duplicate symbol _stbi_loadf_from_memory in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Texture.cpp.o
duplicate symbol _stbi_load_from_memory in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Texture.cpp.o
duplicate symbol _stbi_is_hdr_from_callbacks in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Texture.cpp.o
duplicate symbol _stbi_info_from_callbacks in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Texture.cpp.o
duplicate symbol _stbi_loadf_from_callbacks in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Texture.cpp.o
duplicate symbol _stbi_load_from_callbacks in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Texture.cpp.o
duplicate symbol _stbi_zlib_decode_noheader_buffer in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Texture.cpp.o
duplicate symbol _stbi_zlib_decode_buffer in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Texture.cpp.o
duplicate symbol _stbi_is_hdr in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Texture.cpp.o
duplicate symbol _stbi_info in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Texture.cpp.o
duplicate symbol _stbi_failure_reason in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Texture.cpp.o
duplicate symbol _stbi_zlib_decode_malloc_guesssize_headerflag in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Texture.cpp.o
duplicate symbol _stbi_loadf in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Texture.cpp.o
duplicate symbol _stbi_zlib_decode_malloc_guesssize in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Texture.cpp.o
duplicate symbol _stbi_is_hdr_from_file in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Texture.cpp.o
duplicate symbol _stbi_info_from_file in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Texture.cpp.o
duplicate symbol _stbi_loadf_from_file in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Texture.cpp.o
duplicate symbol _stbi_load_from_file in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Texture.cpp.o
duplicate symbol _stbi_hdr_to_ldr_scale in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Texture.cpp.o
duplicate symbol _stbi_ldr_to_hdr_scale in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Texture.cpp.o
duplicate symbol _stbi_image_free in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Texture.cpp.o
duplicate symbol _stbi_set_unpremultiply_on_load in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Texture.cpp.o
duplicate symbol _stbi_set_flip_vertically_on_load in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Texture.cpp.o
duplicate symbol _stbi_load in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Texture.cpp.o
duplicate symbol _stbi_zlib_decode_noheader_malloc in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Texture.cpp.o
duplicate symbol _stbi_zlib_decode_malloc in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Texture.cpp.o
duplicate symbol _stbi_convert_iphone_png_to_rgb in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Texture.cpp.o
duplicate symbol _stbi_hdr_to_ldr_gamma in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Texture.cpp.o
duplicate symbol _stbi_ldr_to_hdr_gamma in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Texture.cpp.o
duplicate symbol _stbi_load_from_file_16 in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Texture.cpp.o
duplicate symbol _stbi_load_16 in:
    CMakeFiles/uitest.dir/main.cpp.o
    CMakeFiles/uitest.dir/__/__/libs/pancake/Pancake/Texture.cpp.o
ld: 132 duplicate symbols for architecture x86_64
clang: error: linker command failed with exit code 1 (use -v to see invocation)
make[3]: *** [../bin/uitest] Error 1
make[2]: *** [games/uitest/CMakeFiles/uitest.dir/all] Error 2
make[1]: *** [games/uitest/CMakeFiles/uitest.dir/rule] Error 2
make: *** [uitest] Error 2",True,{}
nothings/stb,https://github.com/nothings/stb,402,2017-01-18T18:48:44Z,2017-01-18T18:51:24Z,2017-05-29T18:21:58Z,CLOSED,False,2,2,1,https://github.com/jellyfishcoder,Fixed Duplicate Symbols Linker Error,1,[],https://github.com/nothings/stb/pull/402,https://github.com/nothings,9,https://github.com/nothings/stb/pull/402#issuecomment-302447258,"When including the header stb_image.h from another header, included from a source file. It makes duplicate symbols and causes 33 linker errors. Simply changing the functions to inline preserves all functionality and fixes the errors.",How do you define STB_IMAGE_IMPLEMENTATION ?,True,{}
nothings/stb,https://github.com/nothings/stb,402,2017-01-18T18:48:44Z,2017-01-18T18:51:24Z,2017-05-29T18:21:58Z,CLOSED,False,2,2,1,https://github.com/jellyfishcoder,Fixed Duplicate Symbols Linker Error,1,[],https://github.com/nothings/stb/pull/402,https://github.com/maluramichael,10,https://github.com/nothings/stb/pull/402#issuecomment-302511452,"When including the header stb_image.h from another header, included from a source file. It makes duplicate symbols and causes 33 linker errors. Simply changing the functions to inline preserves all functionality and fixes the errors.","like this https://github.com/maluramichael/pancake/blob/master/Pancake/Texture.h#L12
#pragma once

#ifndef PANCAKE_GRAPHICS_TEXTURE_H
#define PANCAKE_GRAPHICS_TEXTURE_H

#include <string>
#include <iostream>

#include <SDL2/SDL_image.h>
#include <GL/glew.h>

#define STB_IMAGE_IMPLEMENTATION
#include ""stb_image.h""

#include ""Vector2.h""",True,{}
nothings/stb,https://github.com/nothings/stb,402,2017-01-18T18:48:44Z,2017-01-18T18:51:24Z,2017-05-29T18:21:58Z,CLOSED,False,2,2,1,https://github.com/jellyfishcoder,Fixed Duplicate Symbols Linker Error,1,[],https://github.com/nothings/stb/pull/402,https://github.com/nothings,11,https://github.com/nothings/stb/pull/402#issuecomment-302523414,"When including the header stb_image.h from another header, included from a source file. It makes duplicate symbols and causes 33 linker errors. Simply changing the functions to inline preserves all functionality and fixes the errors.","You have to put it in a cpp/c file, not in an H file.",True,{'THUMBS_UP': ['https://github.com/maluramichael']}
nothings/stb,https://github.com/nothings/stb,402,2017-01-18T18:48:44Z,2017-01-18T18:51:24Z,2017-05-29T18:21:58Z,CLOSED,False,2,2,1,https://github.com/jellyfishcoder,Fixed Duplicate Symbols Linker Error,1,[],https://github.com/nothings/stb/pull/402,https://github.com/maluramichael,12,https://github.com/nothings/stb/pull/402#issuecomment-302534070,"When including the header stb_image.h from another header, included from a source file. It makes duplicate symbols and causes 33 linker errors. Simply changing the functions to inline preserves all functionality and fixes the errors.",This worked. Thank you.,True,{}
nothings/stb,https://github.com/nothings/stb,402,2017-01-18T18:48:44Z,2017-01-18T18:51:24Z,2017-05-29T18:21:58Z,CLOSED,False,2,2,1,https://github.com/jellyfishcoder,Fixed Duplicate Symbols Linker Error,1,[],https://github.com/nothings/stb/pull/402,https://github.com/maluramichael,13,https://github.com/nothings/stb/pull/402#issuecomment-304659761,"When including the header stb_image.h from another header, included from a source file. It makes duplicate symbols and causes 33 linker errors. Simply changing the functions to inline preserves all functionality and fixes the errors.","@nothings  One more question. Let's say i have a class Foo.
Is it the correct way to #include <stb_*.h> inside my Foo.h without #define STB_*_IMPLEMENTATION and then #include <stb_*.h> inside the Foo.cpp with the define?
This way i get no linking errors and i have all functions, types etc. available in my Foo.h.",True,{}
nothings/stb,https://github.com/nothings/stb,402,2017-01-18T18:48:44Z,2017-01-18T18:51:24Z,2017-05-29T18:21:58Z,CLOSED,False,2,2,1,https://github.com/jellyfishcoder,Fixed Duplicate Symbols Linker Error,1,[],https://github.com/nothings/stb/pull/402,https://github.com/nothings,14,https://github.com/nothings/stb/pull/402#issuecomment-304710489,"When including the header stb_image.h from another header, included from a source file. It makes duplicate symbols and causes 33 linker errors. Simply changing the functions to inline preserves all functionality and fixes the errors.",Yes.,True,{'THUMBS_UP': ['https://github.com/maluramichael']}
nothings/stb,https://github.com/nothings/stb,402,2017-01-18T18:48:44Z,2017-01-18T18:51:24Z,2017-05-29T18:21:58Z,CLOSED,False,2,2,1,https://github.com/jellyfishcoder,Fixed Duplicate Symbols Linker Error,1,[],https://github.com/nothings/stb/pull/402,https://github.com/maluramichael,15,https://github.com/nothings/stb/pull/402#issuecomment-304710880,"When including the header stb_image.h from another header, included from a source file. It makes duplicate symbols and causes 33 linker errors. Simply changing the functions to inline preserves all functionality and fixes the errors.",Nice thank you so much,True,{}
nothings/stb,https://github.com/nothings/stb,407,2017-01-29T20:33:46Z,2017-03-03T18:46:44Z,2017-03-03T19:14:32Z,MERGED,True,24,20,1,https://github.com/BSVino,Floating point rounding causes stbir__calculate_sample_range_upsample…,1,"['2 bug', '2 good-no changes needed', '1 stb library w/no tag']",https://github.com/nothings/stb/pull/407,https://github.com/BSVino,1,https://github.com/nothings/stb/pull/407,"… to sometimes think it needs one more scanline than it really does. This patch adds one extra entry to the ringbuffer to avoid the problem.
Ran the tests, no asserts and the output ones look OK.","… to sometimes think it needs one more scanline than it really does. This patch adds one extra entry to the ringbuffer to avoid the problem.
Ran the tests, no asserts and the output ones look OK.",True,{}
nothings/stb,https://github.com/nothings/stb,412,2017-02-14T02:35:10Z,2017-03-03T17:38:35Z,2017-03-06T19:24:26Z,MERGED,True,7,6,1,https://github.com/cdwfs,stb_truetype: chardata can be const in GetBakedQuad() and GetPackedQuad(),1,"['2 bug', '1 stb_truetype']",https://github.com/nothings/stb/pull/412,https://github.com/cdwfs,1,https://github.com/nothings/stb/pull/412,"Re: today's DMs -- I found a few cases in stb_truetype where function parameters could safely be const'd. There could very well be others, but these are the ones I hit during my integration. Thanks!","Re: today's DMs -- I found a few cases in stb_truetype where function parameters could safely be const'd. There could very well be others, but these are the ones I hit during my integration. Thanks!",True,{}
nothings/stb,https://github.com/nothings/stb,415,2017-02-22T18:19:22Z,2017-03-03T16:57:19Z,2017-03-03T18:39:15Z,CLOSED,False,8,0,1,https://github.com/Mokosha,Add C++ linkage to stb_dxt,1,"['2 bug', 'stb_dxt']",https://github.com/nothings/stb/pull/415,https://github.com/Mokosha,1,https://github.com/nothings/stb/pull/415,"Just adds the extern ""C"" to the header to match the other files so that we can use it with C++ compilers, too.","Just adds the extern ""C"" to the header to match the other files so that we can use it with C++ compilers, too.",True,{}
nothings/stb,https://github.com/nothings/stb,415,2017-02-22T18:19:22Z,2017-03-03T16:57:19Z,2017-03-03T18:39:15Z,CLOSED,False,8,0,1,https://github.com/Mokosha,Add C++ linkage to stb_dxt,1,"['2 bug', 'stb_dxt']",https://github.com/nothings/stb/pull/415,https://github.com/nothings,2,https://github.com/nothings/stb/pull/415#issuecomment-284008698,"Just adds the extern ""C"" to the header to match the other files so that we can use it with C++ compilers, too.","added for next version, doesn't actually use the pull request for random reasons",True,{}
nothings/stb,https://github.com/nothings/stb,415,2017-02-22T18:19:22Z,2017-03-03T16:57:19Z,2017-03-03T18:39:15Z,CLOSED,False,8,0,1,https://github.com/Mokosha,Add C++ linkage to stb_dxt,1,"['2 bug', 'stb_dxt']",https://github.com/nothings/stb/pull/415,https://github.com/Mokosha,3,https://github.com/nothings/stb/pull/415#issuecomment-284034819,"Just adds the extern ""C"" to the header to match the other files so that we can use it with C++ compilers, too.","OK, thanks!",True,{}
nothings/stb,https://github.com/nothings/stb,418,2017-03-03T02:26:44Z,2017-03-03T16:41:19Z,2017-03-21T00:31:23Z,MERGED,True,15,7,1,https://github.com/jeremysawicki,stb_image: JPEG: Convert RGB to grayscale properly,2,"['2 bug', '1 stb_image']",https://github.com/nothings/stb/pull/418,https://github.com/jeremysawicki,1,https://github.com/nothings/stb/pull/418,"When reading an RGB JPEG and producing grayscale output, compute Y from RGB instead of outputting R.","When reading an RGB JPEG and producing grayscale output, compute Y from RGB instead of outputting R.",True,{}
nothings/stb,https://github.com/nothings/stb,419,2017-03-03T05:47:04Z,2017-03-03T16:41:20Z,2017-03-21T00:44:32Z,MERGED,True,2,7,1,https://github.com/jeremysawicki,stb_image: JPEG: Accept any component IDs,1,"['2 bug', '1 stb_image']",https://github.com/nothings/stb/pull/419,https://github.com/jeremysawicki,1,https://github.com/nothings/stb/pull/419,"Accept JPEG files with any component IDs.
This fix is needed by 6995 images in the ImageNet dataset:

6176 have component IDs X, 2, 3 for various values of X (40 values in total, all multiples of 4)
714 have component IDs 'Y', 'U', 'V'
105 are grayscale with various component IDs (15 values in total, mostly but not all multiples of 4)

At this point it seems best to accept any component IDs rather than trying to code rules for all variants seen in the wild.","Accept JPEG files with any component IDs.
This fix is needed by 6995 images in the ImageNet dataset:

6176 have component IDs X, 2, 3 for various values of X (40 values in total, all multiples of 4)
714 have component IDs 'Y', 'U', 'V'
105 are grayscale with various component IDs (15 values in total, mostly but not all multiples of 4)

At this point it seems best to accept any component IDs rather than trying to code rules for all variants seen in the wild.",True,{}
nothings/stb,https://github.com/nothings/stb,420,2017-03-03T06:35:58Z,2017-03-03T16:41:20Z,2017-03-21T00:45:24Z,MERGED,True,6,6,1,https://github.com/jeremysawicki,stb_image: JPEG: Accept 16-bit quantization tables,1,"['2 bug', '1 stb_image']",https://github.com/nothings/stb/pull/420,https://github.com/jeremysawicki,1,https://github.com/nothings/stb/pull/420,"Accept JPEG files with 16-bit quantization tables.
This fix is needed by 625 images in the ImageNet dataset.","Accept JPEG files with 16-bit quantization tables.
This fix is needed by 625 images in the ImageNet dataset.",True,{}
nothings/stb,https://github.com/nothings/stb,421,2017-03-03T07:12:54Z,2017-03-03T16:41:20Z,2017-03-21T00:46:15Z,MERGED,True,1,0,1,https://github.com/jeremysawicki,stb_image: JPEG: Accept fill bytes in stbi__grow_buffer_unsafe,1,"['2 bug', '1 stb_image']",https://github.com/nothings/stb/pull/421,https://github.com/jeremysawicki,1,https://github.com/nothings/stb/pull/421,"Accept JPEG files with fill bytes (extra 0xff bytes) before markers while huffman decoding.  Fill bytes are currently accepted in stbi__get_marker but not stbi__grow_buffer_unsafe.
This fix is needed by 138 images in the ImageNet dataset.","Accept JPEG files with fill bytes (extra 0xff bytes) before markers while huffman decoding.  Fill bytes are currently accepted in stbi__get_marker but not stbi__grow_buffer_unsafe.
This fix is needed by 138 images in the ImageNet dataset.",True,{}
nothings/stb,https://github.com/nothings/stb,422,2017-03-03T07:52:20Z,2017-03-03T16:41:20Z,2017-03-21T00:49:26Z,MERGED,True,0,2,1,https://github.com/jeremysawicki,stb_image: JPEG: Accept non-zero junk bytes at the end of image data,1,"['2 bug', '1 stb_image']",https://github.com/nothings/stb/pull/422,https://github.com/jeremysawicki,1,https://github.com/nothings/stb/pull/422,"Accept junk bytes having any value (instead of only 0x00) before the marker at the end of image data.
This fix is needed by 2 images in the ImageNet dataset.  Both have a junk byte of 0x7f.","Accept junk bytes having any value (instead of only 0x00) before the marker at the end of image data.
This fix is needed by 2 images in the ImageNet dataset.  Both have a junk byte of 0x7f.",True,{}
nothings/stb,https://github.com/nothings/stb,423,2017-03-03T08:16:27Z,2017-03-03T16:41:21Z,2017-03-21T00:50:53Z,MERGED,True,5,0,1,https://github.com/jeremysawicki,stb_image: JPEG: Accept DNL segment,1,"['2 bug', '1 stb_image']",https://github.com/nothings/stb/pull/423,https://github.com/jeremysawicki,1,https://github.com/nothings/stb/pull/423,"Accept JPEG files containing a DNL segment.
This fix is needed by 1 image in the ImageNet dataset.
Note that the image height still must be specified in the frame header, and cannot be delayed until the DNL segment.  This fix just accepts the DNL segment and checks that the height matches the frame header.","Accept JPEG files containing a DNL segment.
This fix is needed by 1 image in the ImageNet dataset.
Note that the image height still must be specified in the frame header, and cannot be delayed until the DNL segment.  This fix just accepts the DNL segment and checks that the height matches the frame header.",True,{}
nothings/stb,https://github.com/nothings/stb,424,2017-03-03T09:15:19Z,2017-03-03T16:41:21Z,2017-03-21T00:53:17Z,MERGED,True,1,1,1,https://github.com/jeremysawicki,stb_image: JPEG: Provide failure reason for unknown marker,1,"['2 bug', '1 stb_image']",https://github.com/nothings/stb/pull/424,https://github.com/jeremysawicki,1,https://github.com/nothings/stb/pull/424,"Provide a failure reason when an unknown marker is encountered in a JPEG file.
This is the only case of a missing failure reason that I encountered in the ImageNet data set, though others exist in the code (e.g. ""return L==0;"" in the same function).","Provide a failure reason when an unknown marker is encountered in a JPEG file.
This is the only case of a missing failure reason that I encountered in the ImageNet data set, though others exist in the code (e.g. ""return L==0;"" in the same function).",True,{}
nothings/stb,https://github.com/nothings/stb,424,2017-03-03T09:15:19Z,2017-03-03T16:41:21Z,2017-03-21T00:53:17Z,MERGED,True,1,1,1,https://github.com/jeremysawicki,stb_image: JPEG: Provide failure reason for unknown marker,1,"['2 bug', '1 stb_image']",https://github.com/nothings/stb/pull/424,https://github.com/nothings,2,https://github.com/nothings/stb/pull/424#issuecomment-283905390,"Provide a failure reason when an unknown marker is encountered in a JPEG file.
This is the only case of a missing failure reason that I encountered in the ImageNet data set, though others exist in the code (e.g. ""return L==0;"" in the same function).",Thank you for all this work!,True,{}
nothings/stb,https://github.com/nothings/stb,424,2017-03-03T09:15:19Z,2017-03-03T16:41:21Z,2017-03-21T00:53:17Z,MERGED,True,1,1,1,https://github.com/jeremysawicki,stb_image: JPEG: Provide failure reason for unknown marker,1,"['2 bug', '1 stb_image']",https://github.com/nothings/stb/pull/424,https://github.com/nothings,3,https://github.com/nothings/stb/pull/424#issuecomment-283999696,"Provide a failure reason when an unknown marker is encountered in a JPEG file.
This is the only case of a missing failure reason that I encountered in the ImageNet data set, though others exist in the code (e.g. ""return L==0;"" in the same function).","Do all the images from ImageNet now work, or is there still more to do?",True,{}
nothings/stb,https://github.com/nothings/stb,424,2017-03-03T09:15:19Z,2017-03-03T16:41:21Z,2017-03-21T00:53:17Z,MERGED,True,1,1,1,https://github.com/jeremysawicki,stb_image: JPEG: Provide failure reason for unknown marker,1,"['2 bug', '1 stb_image']",https://github.com/nothings/stb/pull/424,https://github.com/jeremysawicki,4,https://github.com/nothings/stb/pull/424#issuecomment-284037831,"Provide a failure reason when an unknown marker is encountered in a JPEG file.
This is the only case of a missing failure reason that I encountered in the ImageNet data set, though others exist in the code (e.g. ""return L==0;"" in the same function).","I still have a couple more changes to send your way:


Support for 4-component CMYK/YCCK JPEGs.  That is the last set of ImageNet files that cannot be decoded.  The changes may or may not be suitable for inclusion though.  Proper CMYK->RGB conversion requires dealing with color profiles, etc., which gets fairly complex.  I am just merging the black and treating CMY as 1-RGB, which results in colors that look somewhat reasonable but are not exactly correct.  I don't know if you'll fall on the side of ""something is better than nothing"" or ""nothing is better than wrong"".


A better test for RGB JPEGs that detects some more cases.  I just worked out how to do it without false positives.",True,{}
nothings/stb,https://github.com/nothings/stb,425,2017-03-03T19:21:34Z,2017-03-19T01:55:56Z,2017-03-19T01:55:56Z,MERGED,True,38,37,1,https://github.com/GrayHatter,Fix a pair of warnings in stb_image.h,1,[],https://github.com/nothings/stb/pull/425,https://github.com/GrayHatter,1,https://github.com/nothings/stb/pull/425,"We're using stbi in https://github.com/uTox/uTox and are working towards -Werror, we're willing to disable the indentation warnings, but can't disable these two.
Also, the bit shift was UB, and according to the internet some compilers will and DO optimize out that line.","We're using stbi in https://github.com/uTox/uTox and are working towards -Werror, we're willing to disable the indentation warnings, but can't disable these two.
Also, the bit shift was UB, and according to the internet some compilers will and DO optimize out that line.",True,{}
nothings/stb,https://github.com/nothings/stb,425,2017-03-03T19:21:34Z,2017-03-19T01:55:56Z,2017-03-19T01:55:56Z,MERGED,True,38,37,1,https://github.com/GrayHatter,Fix a pair of warnings in stb_image.h,1,[],https://github.com/nothings/stb/pull/425,https://github.com/GrayHatter,2,https://github.com/nothings/stb/pull/425#issuecomment-284046179,"We're using stbi in https://github.com/uTox/uTox and are working towards -Werror, we're willing to disable the indentation warnings, but can't disable these two.
Also, the bit shift was UB, and according to the internet some compilers will and DO optimize out that line.","Ignoring the white space changes makes this easier to parse https://github.com/nothings/stb/pull/425/files?w=1
One line of tab replacement, the rest are spaces at EOL",True,{}
nothings/stb,https://github.com/nothings/stb,425,2017-03-03T19:21:34Z,2017-03-19T01:55:56Z,2017-03-19T01:55:56Z,MERGED,True,38,37,1,https://github.com/GrayHatter,Fix a pair of warnings in stb_image.h,1,[],https://github.com/nothings/stb/pull/425,https://github.com/rygorous,3,https://github.com/nothings/stb/pull/425#issuecomment-284058940,"We're using stbi in https://github.com/uTox/uTox and are working towards -Werror, we're willing to disable the indentation warnings, but can't disable these two.
Also, the bit shift was UB, and according to the internet some compilers will and DO optimize out that line.","As-is, the ""(void) ri;"" breaks C98 compilation.

Can you split whitespace changes into a separate commit?

Maybe change the magnitude update to be just ""-= (1<<magbits) - 1"" and
sidestep both signed left shift/twos complement issues entirely.
…
On Mar 3, 2017 11:46, ""Gregory Mullen"" ***@***.***> wrote:
 We're using stbi in https://github.com/uTox/uTox and are working towards
 -Werror, we're willing to disable the indentation warnings, but can't
 disable these two.

 Also, the bit shift was UB, and according to the internet some compilers
 will and DO optimize out that line.
 ------------------------------
 You can view, comment on, or merge this pull request online at:

   #425
 Commit Summary

    - Fix a pair of warnings in stb_image.h

 File Changes

    - *M* stb_image.h
    <https://github.com/nothings/stb/pull/425/files#diff-0> (73)

 Patch Links:

    - https://github.com/nothings/stb/pull/425.patch
    - https://github.com/nothings/stb/pull/425.diff

 —
 You are receiving this because you are subscribed to this thread.
 Reply to this email directly, view it on GitHub
 <#425>, or mute the thread
 <https://github.com/notifications/unsubscribe-auth/ABBw-FKY_MdJYsCAPKJFZtbRtpgvkv71ks5riGhBgaJpZM4MSpQB>
 .",True,{}
nothings/stb,https://github.com/nothings/stb,425,2017-03-03T19:21:34Z,2017-03-19T01:55:56Z,2017-03-19T01:55:56Z,MERGED,True,38,37,1,https://github.com/GrayHatter,Fix a pair of warnings in stb_image.h,1,[],https://github.com/nothings/stb/pull/425,https://github.com/nothings,4,https://github.com/nothings/stb/pull/425#issuecomment-284068400,"We're using stbi in https://github.com/uTox/uTox and are working towards -Werror, we're willing to disable the indentation warnings, but can't disable these two.
Also, the bit shift was UB, and according to the internet some compilers will and DO optimize out that line.","FWIW, I'm fine with the PR as is.",True,{}
nothings/stb,https://github.com/nothings/stb,426,2017-03-04T00:32:38Z,2017-03-19T01:55:56Z,2017-03-21T00:56:39Z,MERGED,True,50,5,1,https://github.com/jeremysawicki,stb_image: JPEG: Improved detection of RGB images,1,[],https://github.com/nothings/stb/pull/426,https://github.com/jeremysawicki,1,https://github.com/nothings/stb/pull/426,"This fix uses the Adobe APP14 segment and JFIF APP0 segment to detect RGB JPEG files that don't use component IDs 'R', 'G', 'B'.
In the ImageNet dataset, the APP14 check finds 79 additional images but 10 are false positives.  The JFIF check eliminates the false positives.  (Of course I don't know if there are more undetected RGB JPEGs among the 14+ million images in the dataset.)
Some references:

http://fileformats.archiveteam.org/wiki/JPEG#Color_format
http://www.sno.phy.queensu.ca/~phil/exiftool/TagNames/JPEG.html#Adobe
https://docs.oracle.com/javase/7/docs/api/javax/imageio/metadata/doc-files/jpeg_metadata.html#color","This fix uses the Adobe APP14 segment and JFIF APP0 segment to detect RGB JPEG files that don't use component IDs 'R', 'G', 'B'.
In the ImageNet dataset, the APP14 check finds 79 additional images but 10 are false positives.  The JFIF check eliminates the false positives.  (Of course I don't know if there are more undetected RGB JPEGs among the 14+ million images in the dataset.)
Some references:

http://fileformats.archiveteam.org/wiki/JPEG#Color_format
http://www.sno.phy.queensu.ca/~phil/exiftool/TagNames/JPEG.html#Adobe
https://docs.oracle.com/javase/7/docs/api/javax/imageio/metadata/doc-files/jpeg_metadata.html#color",True,{}
nothings/stb,https://github.com/nothings/stb,427,2017-03-04T02:55:37Z,2017-03-19T01:57:05Z,2017-03-21T01:15:46Z,CLOSED,False,75,7,1,https://github.com/jeremysawicki,stb_image: JPEG: Support 4-channel CMYK/YCCK images,1,[],https://github.com/nothings/stb/pull/427,https://github.com/jeremysawicki,1,https://github.com/nothings/stb/pull/427,"The ImageNet dataset contains 320 4-channel JPEGs:

247 with an Adobe APP14 segment that specifies color transform 0x02, meaning YCCK.
71 with an Adobe APP14 segment that specifies color transform 0x00, meaning CMYK.  These also use component IDs 'C', 'M', 'Y', 'K'.
2 with no Adobe APP14 segment.

This fix uses the APP14 segment to distinguish the first two cases, ignoring the component IDs.
The final two images contain only 0xff bytes in the fourth channel, so it is hard to tell whether that channel represents black or alpha or something else.  One of the images needs to be decoded like a normal YCbCr JPEG to look correct.  The other is an abstract geometric shape, so it is hard to tell what the correct colors are.  My best guess is that they are some form of YCbCr + alpha.  This fix decodes them as YCbCr and ignores the fourth channel.
This fix does not do proper CMYK->RGB conversion with color profiles, etc., so while the resulting colors look somewhat reasonable they are not exactly correct.
Some changes overlap with RGB detection (#426) -- sorry for any conflicts.","The ImageNet dataset contains 320 4-channel JPEGs:

247 with an Adobe APP14 segment that specifies color transform 0x02, meaning YCCK.
71 with an Adobe APP14 segment that specifies color transform 0x00, meaning CMYK.  These also use component IDs 'C', 'M', 'Y', 'K'.
2 with no Adobe APP14 segment.

This fix uses the APP14 segment to distinguish the first two cases, ignoring the component IDs.
The final two images contain only 0xff bytes in the fourth channel, so it is hard to tell whether that channel represents black or alpha or something else.  One of the images needs to be decoded like a normal YCbCr JPEG to look correct.  The other is an abstract geometric shape, so it is hard to tell what the correct colors are.  My best guess is that they are some form of YCbCr + alpha.  This fix decodes them as YCbCr and ignores the fourth channel.
This fix does not do proper CMYK->RGB conversion with color profiles, etc., so while the resulting colors look somewhat reasonable they are not exactly correct.
Some changes overlap with RGB detection (#426) -- sorry for any conflicts.",True,{}
nothings/stb,https://github.com/nothings/stb,427,2017-03-04T02:55:37Z,2017-03-19T01:57:05Z,2017-03-21T01:15:46Z,CLOSED,False,75,7,1,https://github.com/jeremysawicki,stb_image: JPEG: Support 4-channel CMYK/YCCK images,1,[],https://github.com/nothings/stb/pull/427,https://github.com/jeremysawicki,2,https://github.com/nothings/stb/pull/427#issuecomment-284122512,"The ImageNet dataset contains 320 4-channel JPEGs:

247 with an Adobe APP14 segment that specifies color transform 0x02, meaning YCCK.
71 with an Adobe APP14 segment that specifies color transform 0x00, meaning CMYK.  These also use component IDs 'C', 'M', 'Y', 'K'.
2 with no Adobe APP14 segment.

This fix uses the APP14 segment to distinguish the first two cases, ignoring the component IDs.
The final two images contain only 0xff bytes in the fourth channel, so it is hard to tell whether that channel represents black or alpha or something else.  One of the images needs to be decoded like a normal YCbCr JPEG to look correct.  The other is an abstract geometric shape, so it is hard to tell what the correct colors are.  My best guess is that they are some form of YCbCr + alpha.  This fix decodes them as YCbCr and ignores the fourth channel.
This fix does not do proper CMYK->RGB conversion with color profiles, etc., so while the resulting colors look somewhat reasonable they are not exactly correct.
Some changes overlap with RGB detection (#426) -- sorry for any conflicts.","This is the last change to handle all images in the ImageNet dataset.
(Actually, the dataset includes 26 gzip-compressed JPEGs for some reason, but that seems outside the scope of stb_image.)",True,{}
nothings/stb,https://github.com/nothings/stb,427,2017-03-04T02:55:37Z,2017-03-19T01:57:05Z,2017-03-21T01:15:46Z,CLOSED,False,75,7,1,https://github.com/jeremysawicki,stb_image: JPEG: Support 4-channel CMYK/YCCK images,1,[],https://github.com/nothings/stb/pull/427,https://github.com/nothings,3,https://github.com/nothings/stb/pull/427#issuecomment-287587370,"The ImageNet dataset contains 320 4-channel JPEGs:

247 with an Adobe APP14 segment that specifies color transform 0x02, meaning YCCK.
71 with an Adobe APP14 segment that specifies color transform 0x00, meaning CMYK.  These also use component IDs 'C', 'M', 'Y', 'K'.
2 with no Adobe APP14 segment.

This fix uses the APP14 segment to distinguish the first two cases, ignoring the component IDs.
The final two images contain only 0xff bytes in the fourth channel, so it is hard to tell whether that channel represents black or alpha or something else.  One of the images needs to be decoded like a normal YCbCr JPEG to look correct.  The other is an abstract geometric shape, so it is hard to tell what the correct colors are.  My best guess is that they are some form of YCbCr + alpha.  This fix decodes them as YCbCr and ignores the fourth channel.
This fix does not do proper CMYK->RGB conversion with color profiles, etc., so while the resulting colors look somewhat reasonable they are not exactly correct.
Some changes overlap with RGB detection (#426) -- sorry for any conflicts.","FWIW, I replaced the (a*b+128)/255 for CMYK->RGB conversion with this code (from an algorithm by Jim Blinn):
// fast 0..255 * 0..255 => 0..255 rounded multiplication
static stbi_uc stbi__blinn_8x8(stbi_uc x, stbi_uc y)
{
   unsigned int t = x*y + 128;
   return (stbi_uc) ((t + (t >>8)) >> 8);
}",True,{}
nothings/stb,https://github.com/nothings/stb,427,2017-03-04T02:55:37Z,2017-03-19T01:57:05Z,2017-03-21T01:15:46Z,CLOSED,False,75,7,1,https://github.com/jeremysawicki,stb_image: JPEG: Support 4-channel CMYK/YCCK images,1,[],https://github.com/nothings/stb/pull/427,https://github.com/nothings,4,https://github.com/nothings/stb/pull/427#issuecomment-287587409,"The ImageNet dataset contains 320 4-channel JPEGs:

247 with an Adobe APP14 segment that specifies color transform 0x02, meaning YCCK.
71 with an Adobe APP14 segment that specifies color transform 0x00, meaning CMYK.  These also use component IDs 'C', 'M', 'Y', 'K'.
2 with no Adobe APP14 segment.

This fix uses the APP14 segment to distinguish the first two cases, ignoring the component IDs.
The final two images contain only 0xff bytes in the fourth channel, so it is hard to tell whether that channel represents black or alpha or something else.  One of the images needs to be decoded like a normal YCbCr JPEG to look correct.  The other is an abstract geometric shape, so it is hard to tell what the correct colors are.  My best guess is that they are some form of YCbCr + alpha.  This fix decodes them as YCbCr and ignores the fourth channel.
This fix does not do proper CMYK->RGB conversion with color profiles, etc., so while the resulting colors look somewhat reasonable they are not exactly correct.
Some changes overlap with RGB detection (#426) -- sorry for any conflicts.","Also, I did have to manually fix a bunch of merge errors between this and rgb-detection (especially since I foolishly tweaked that before I did this merge), so you might want to retest to make sure I didn't inadvertently break anything.",True,{}
nothings/stb,https://github.com/nothings/stb,427,2017-03-04T02:55:37Z,2017-03-19T01:57:05Z,2017-03-21T01:15:46Z,CLOSED,False,75,7,1,https://github.com/jeremysawicki,stb_image: JPEG: Support 4-channel CMYK/YCCK images,1,[],https://github.com/nothings/stb/pull/427,https://github.com/nothings,5,https://github.com/nothings/stb/pull/427#issuecomment-287588439,"The ImageNet dataset contains 320 4-channel JPEGs:

247 with an Adobe APP14 segment that specifies color transform 0x02, meaning YCCK.
71 with an Adobe APP14 segment that specifies color transform 0x00, meaning CMYK.  These also use component IDs 'C', 'M', 'Y', 'K'.
2 with no Adobe APP14 segment.

This fix uses the APP14 segment to distinguish the first two cases, ignoring the component IDs.
The final two images contain only 0xff bytes in the fourth channel, so it is hard to tell whether that channel represents black or alpha or something else.  One of the images needs to be decoded like a normal YCbCr JPEG to look correct.  The other is an abstract geometric shape, so it is hard to tell what the correct colors are.  My best guess is that they are some form of YCbCr + alpha.  This fix decodes them as YCbCr and ignores the fourth channel.
This fix does not do proper CMYK->RGB conversion with color profiles, etc., so while the resulting colors look somewhat reasonable they are not exactly correct.
Some changes overlap with RGB detection (#426) -- sorry for any conflicts.",merged,True,{}
nothings/stb,https://github.com/nothings/stb,427,2017-03-04T02:55:37Z,2017-03-19T01:57:05Z,2017-03-21T01:15:46Z,CLOSED,False,75,7,1,https://github.com/jeremysawicki,stb_image: JPEG: Support 4-channel CMYK/YCCK images,1,[],https://github.com/nothings/stb/pull/427,https://github.com/jeremysawicki,6,https://github.com/nothings/stb/pull/427#issuecomment-287946087,"The ImageNet dataset contains 320 4-channel JPEGs:

247 with an Adobe APP14 segment that specifies color transform 0x02, meaning YCCK.
71 with an Adobe APP14 segment that specifies color transform 0x00, meaning CMYK.  These also use component IDs 'C', 'M', 'Y', 'K'.
2 with no Adobe APP14 segment.

This fix uses the APP14 segment to distinguish the first two cases, ignoring the component IDs.
The final two images contain only 0xff bytes in the fourth channel, so it is hard to tell whether that channel represents black or alpha or something else.  One of the images needs to be decoded like a normal YCbCr JPEG to look correct.  The other is an abstract geometric shape, so it is hard to tell what the correct colors are.  My best guess is that they are some form of YCbCr + alpha.  This fix decodes them as YCbCr and ignores the fourth channel.
This fix does not do proper CMYK->RGB conversion with color profiles, etc., so while the resulting colors look somewhat reasonable they are not exactly correct.
Some changes overlap with RGB detection (#426) -- sorry for any conflicts.","I verified that all ImageNet images still decode, and the 4-channel and RGB images still look right.  Thanks for incorporating all these changes.
Also, nice improvement for the division by 255.",True,{}
nothings/stb,https://github.com/nothings/stb,427,2017-03-04T02:55:37Z,2017-03-19T01:57:05Z,2017-03-21T01:15:46Z,CLOSED,False,75,7,1,https://github.com/jeremysawicki,stb_image: JPEG: Support 4-channel CMYK/YCCK images,1,[],https://github.com/nothings/stb/pull/427,https://github.com/nothings,7,https://github.com/nothings/stb/pull/427#issuecomment-287947297,"The ImageNet dataset contains 320 4-channel JPEGs:

247 with an Adobe APP14 segment that specifies color transform 0x02, meaning YCCK.
71 with an Adobe APP14 segment that specifies color transform 0x00, meaning CMYK.  These also use component IDs 'C', 'M', 'Y', 'K'.
2 with no Adobe APP14 segment.

This fix uses the APP14 segment to distinguish the first two cases, ignoring the component IDs.
The final two images contain only 0xff bytes in the fourth channel, so it is hard to tell whether that channel represents black or alpha or something else.  One of the images needs to be decoded like a normal YCbCr JPEG to look correct.  The other is an abstract geometric shape, so it is hard to tell what the correct colors are.  My best guess is that they are some form of YCbCr + alpha.  This fix decodes them as YCbCr and ignores the fourth channel.
This fix does not do proper CMYK->RGB conversion with color profiles, etc., so while the resulting colors look somewhat reasonable they are not exactly correct.
Some changes overlap with RGB detection (#426) -- sorry for any conflicts.",Thanks for testing and for your fixes!,True,{}
nothings/stb,https://github.com/nothings/stb,428,2017-03-05T04:55:11Z,2017-03-19T01:55:56Z,2019-03-02T02:46:53Z,MERGED,True,11,13,1,https://github.com/rygorous,stb_image: Give up trying to runtime-detect SSE2 on GCC.,1,[],https://github.com/nothings/stb/pull/428,https://github.com/rygorous,1,https://github.com/nothings/stb/pull/428,"We tried but it was nothing but trouble. New rule: with GCC/Clang, if you're compiling with -msse2, you get always-on SSE2 code, otherwise you don't get any. Trying to ship anything with proper runtime dispatch requires both working around certain bugs and some fiddling with build settings, which runs contrary to the intent of a one-file library, so bail on it entirely.
Fixes issue #280.
Fixes issue #410.","We tried but it was nothing but trouble. New rule: with GCC/Clang, if you're compiling with -msse2, you get always-on SSE2 code, otherwise you don't get any. Trying to ship anything with proper runtime dispatch requires both working around certain bugs and some fiddling with build settings, which runs contrary to the intent of a one-file library, so bail on it entirely.
Fixes issue #280.
Fixes issue #410.",True,{}
nothings/stb,https://github.com/nothings/stb,429,2017-03-05T05:21:40Z,2017-03-19T01:55:56Z,2019-03-02T02:46:47Z,MERGED,True,28,10,1,https://github.com/rygorous,stb_image: Support optional args consistently.,1,[],https://github.com/nothings/stb/pull/429,https://github.com/rygorous,1,https://github.com/nothings/stb/pull/429,"My guideline for the rules is the PNG loader (which I consider ""canonical""). In the _load functions, x and y are required but comp is optional; in the _info functions, all three are optional.
Fixes issue #411 (and other related, unreported issues).","My guideline for the rules is the PNG loader (which I consider ""canonical""). In the _load functions, x and y are required but comp is optional; in the _info functions, all three are optional.
Fixes issue #411 (and other related, unreported issues).",True,{}
nothings/stb,https://github.com/nothings/stb,431,2017-03-08T16:22:57Z,2017-03-19T01:55:56Z,2017-03-19T01:55:56Z,MERGED,True,29,5,1,https://github.com/phprus,stb_image: Static initialization of constants,1,[],https://github.com/nothings/stb/pull/431,https://github.com/phprus,1,https://github.com/nothings/stb/pull/431,Static initialization of constants stbi__zdefault_length and stbi__zdefault_distance.,Static initialization of constants stbi__zdefault_length and stbi__zdefault_distance.,True,{}
nothings/stb,https://github.com/nothings/stb,432,2017-03-11T18:11:33Z,2017-07-23T21:14:52Z,2017-07-23T21:14:52Z,MERGED,True,366,5,1,https://github.com/DanielGibson,stb_image_write.h: JPEG writing support based on jo_jpeg.cpp,3,['1 stb_image_write'],https://github.com/nothings/stb/pull/432,https://github.com/DanielGibson,1,https://github.com/nothings/stb/pull/432,"I ported Jon Olick's awesome public domain jo_jpeg.cpp to plain C and to use the stbiw__write_context abstraction instead of plain stdio.
Tested on 64bit Linux with GCC and clang and WinXP with MSVC6.
I noticed that some of the stbi_write_* function definitions were missing STBIWDEF, so I added that.","I ported Jon Olick's awesome public domain jo_jpeg.cpp to plain C and to use the stbiw__write_context abstraction instead of plain stdio.
Tested on 64bit Linux with GCC and clang and WinXP with MSVC6.
I noticed that some of the stbi_write_* function definitions were missing STBIWDEF, so I added that.",True,{'THUMBS_UP': ['https://github.com/r-lyeh-archived']}
nothings/stb,https://github.com/nothings/stb,432,2017-03-11T18:11:33Z,2017-07-23T21:14:52Z,2017-07-23T21:14:52Z,MERGED,True,366,5,1,https://github.com/DanielGibson,stb_image_write.h: JPEG writing support based on jo_jpeg.cpp,3,['1 stb_image_write'],https://github.com/nothings/stb/pull/432,https://github.com/nothings,2,https://github.com/nothings/stb/pull/432#issuecomment-285891410,"I ported Jon Olick's awesome public domain jo_jpeg.cpp to plain C and to use the stbiw__write_context abstraction instead of plain stdio.
Tested on 64bit Linux with GCC and clang and WinXP with MSVC6.
I noticed that some of the stbi_write_* function definitions were missing STBIWDEF, so I added that.",I generally prefer not to turn other people's single-file public domain libraries into stb libraries. I realize that C++ => C is useful; maybe you should just make a repo for a 'jo_jpeg.c' (or 'jo_jpeg.h')?,True,{}
nothings/stb,https://github.com/nothings/stb,432,2017-03-11T18:11:33Z,2017-07-23T21:14:52Z,2017-07-23T21:14:52Z,MERGED,True,366,5,1,https://github.com/DanielGibson,stb_image_write.h: JPEG writing support based on jo_jpeg.cpp,3,['1 stb_image_write'],https://github.com/nothings/stb/pull/432,https://github.com/DanielGibson,3,https://github.com/nothings/stb/pull/432#issuecomment-285892631,"I ported Jon Olick's awesome public domain jo_jpeg.cpp to plain C and to use the stbiw__write_context abstraction instead of plain stdio.
Tested on 64bit Linux with GCC and clang and WinXP with MSVC6.
I noticed that some of the stbi_write_* function definitions were missing STBIWDEF, so I added that.","C++ => C is one useful thing, but I think supporting stbi_write_func is also pretty neat.
And of course having one more supported file type in stb_image_write.
I don't see how (from the original authors point of view) me providing jp_jpeg.h is that different from integrating it into stb_image_write.h
Maybe I should have first asked Jon what he thinks about it..
(He liked and retweeted https://twitter.com/Doomed_Daniel/status/840630124294897664 so I guess he approves)",True,{}
nothings/stb,https://github.com/nothings/stb,432,2017-03-11T18:11:33Z,2017-07-23T21:14:52Z,2017-07-23T21:14:52Z,MERGED,True,366,5,1,https://github.com/DanielGibson,stb_image_write.h: JPEG writing support based on jo_jpeg.cpp,3,['1 stb_image_write'],https://github.com/nothings/stb/pull/432,https://github.com/nothings,4,https://github.com/nothings/stb/pull/432#issuecomment-312800919,"I ported Jon Olick's awesome public domain jo_jpeg.cpp to plain C and to use the stbiw__write_context abstraction instead of plain stdio.
Tested on 64bit Linux with GCC and clang and WinXP with MSVC6.
I noticed that some of the stbi_write_* function definitions were missing STBIWDEF, so I added that.","Given Olick's retweet, yeah, I will integrate this, just need to ""get around to it™"". Thanks for the fixes.",True,{}
nothings/stb,https://github.com/nothings/stb,432,2017-03-11T18:11:33Z,2017-07-23T21:14:52Z,2017-07-23T21:14:52Z,MERGED,True,366,5,1,https://github.com/DanielGibson,stb_image_write.h: JPEG writing support based on jo_jpeg.cpp,3,['1 stb_image_write'],https://github.com/nothings/stb/pull/432,https://github.com/DanielGibson,5,https://github.com/nothings/stb/pull/432#issuecomment-312902224,"I ported Jon Olick's awesome public domain jo_jpeg.cpp to plain C and to use the stbiw__write_context abstraction instead of plain stdio.
Tested on 64bit Linux with GCC and clang and WinXP with MSVC6.
I noticed that some of the stbi_write_* function definitions were missing STBIWDEF, so I added that.","Thanks for pointing this out, @kieselnb, just pushed a fix for this (works for me, tested with clang++ 3.8 on Linux amd64)
Sounds good @nothings, thanks! :)",True,{}
nothings/stb,https://github.com/nothings/stb,436,2017-03-15T02:40:41Z,2017-03-19T01:55:57Z,2017-03-19T02:40:50Z,MERGED,True,57,54,3,https://github.com/BSVino,Fix some STBIR warnings,3,[],https://github.com/nothings/stb/pull/436,https://github.com/BSVino,1,https://github.com/nothings/stb/pull/436,"Apple clang -Wall and -Wextra warnings are all fixed, and all of the MSVC /W4 warnings worth fixing are fixed. Ran the test cases, everything OK.","Apple clang -Wall and -Wextra warnings are all fixed, and all of the MSVC /W4 warnings worth fixing are fixed. Ran the test cases, everything OK.",True,{}
nothings/stb,https://github.com/nothings/stb,436,2017-03-15T02:40:41Z,2017-03-19T01:55:57Z,2017-03-19T02:40:50Z,MERGED,True,57,54,3,https://github.com/BSVino,Fix some STBIR warnings,3,[],https://github.com/nothings/stb/pull/436,https://github.com/BSVino,2,https://github.com/nothings/stb/pull/436#issuecomment-286624318,"Apple clang -Wall and -Wextra warnings are all fixed, and all of the MSVC /W4 warnings worth fixing are fixed. Ran the test cases, everything OK.",Resolves #417,True,{}
nothings/stb,https://github.com/nothings/stb,437,2017-03-18T13:33:55Z,2017-03-18T17:52:29Z,2017-03-18T18:28:42Z,CLOSED,False,1,0,1,https://github.com/rds1983,Added zeroing of the out after it is allocated in the function stbi__create_png_image_raw,1,[],https://github.com/nothings/stb/pull/437,https://github.com/rds1983,1,https://github.com/nothings/stb/pull/437,"As that out contents are used in the encoding.
I.e. in that line:
case STBI__F_up         : cur[k] = STBI__BYTECAST(raw[k] + prior[k]); break;
In that code prior points to out.
p.s. Thanks for the awesome library. I work on porting it to C#: https://github.com/rds1983/StbSharp","As that out contents are used in the encoding.
I.e. in that line:
case STBI__F_up         : cur[k] = STBI__BYTECAST(raw[k] + prior[k]); break;
In that code prior points to out.
p.s. Thanks for the awesome library. I work on porting it to C#: https://github.com/rds1983/StbSharp",True,{}
nothings/stb,https://github.com/nothings/stb,437,2017-03-18T13:33:55Z,2017-03-18T17:52:29Z,2017-03-18T18:28:42Z,CLOSED,False,1,0,1,https://github.com/rds1983,Added zeroing of the out after it is allocated in the function stbi__create_png_image_raw,1,[],https://github.com/nothings/stb/pull/437,https://github.com/nothings,2,https://github.com/nothings/stb/pull/437#issuecomment-287559104,"As that out contents are used in the encoding.
I.e. in that line:
case STBI__F_up         : cur[k] = STBI__BYTECAST(raw[k] + prior[k]); break;
In that code prior points to out.
p.s. Thanks for the awesome library. I work on porting it to C#: https://github.com/rds1983/StbSharp","Have you seen this go wrong, or are you just guessing it is wrong based on trying to port it?
Because this shouldn't affect the code for two reasons:


'prior' points to 'out'  ""higher up"" in the image, which has always been decoded already, or it points outside the image (when cur is on the first line) which is random memory even after adding the memset.


When cur is on the first line the code doesn't actually even use 'prior' because of the use of first_row_filter[] means none of the paths that sample 'prior' are used.",True,{}
nothings/stb,https://github.com/nothings/stb,437,2017-03-18T13:33:55Z,2017-03-18T17:52:29Z,2017-03-18T18:28:42Z,CLOSED,False,1,0,1,https://github.com/rds1983,Added zeroing of the out after it is allocated in the function stbi__create_png_image_raw,1,[],https://github.com/nothings/stb/pull/437,https://github.com/rds1983,3,https://github.com/nothings/stb/pull/437#issuecomment-287561238,"As that out contents are used in the encoding.
I.e. in that line:
case STBI__F_up         : cur[k] = STBI__BYTECAST(raw[k] + prior[k]); break;
In that code prior points to out.
p.s. Thanks for the awesome library. I work on porting it to C#: https://github.com/rds1983/StbSharp","I've noticed that it produces different result depending on what 'out' is filled with.
I am attaching a small project that confirms it. It loads the same image(stored at byte array) twice: first time when 'out' is filled with 255s, second - with zeroes. Then it compares amount of different bytes. It gives 1756 different bytes on my end.
StbTest.zip",True,{}
nothings/stb,https://github.com/nothings/stb,437,2017-03-18T13:33:55Z,2017-03-18T17:52:29Z,2017-03-18T18:28:42Z,CLOSED,False,1,0,1,https://github.com/rds1983,Added zeroing of the out after it is allocated in the function stbi__create_png_image_raw,1,[],https://github.com/nothings/stb/pull/437,https://github.com/nothings,4,https://github.com/nothings/stb/pull/437#issuecomment-287562733,"As that out contents are used in the encoding.
I.e. in that line:
case STBI__F_up         : cur[k] = STBI__BYTECAST(raw[k] + prior[k]); break;
In that code prior points to out.
p.s. Thanks for the awesome library. I work on porting it to C#: https://github.com/rds1983/StbSharp","That file isn't decoded correctly with your fix (and even if it were, memsetting the entire image to 0 is an unnecessary slowdown on very large images). Clarification: I didn't actually compare the case with your image before and after changing the fix, so maybe your fix did by chance decode it correctly--but in general it wouldn't not have affected other files that hit the bug.
The correct fix is in stbi__create_png_image_raw, it is necessary inside the j<y loop to recompute 'prior = cur - stride' in the 'depth < 8' branch after the code updates 'cur'.
This will be fixed in the next release of stb_image. Thanks for reporting the bug!",True,{}
nothings/stb,https://github.com/nothings/stb,437,2017-03-18T13:33:55Z,2017-03-18T17:52:29Z,2017-03-18T18:28:42Z,CLOSED,False,1,0,1,https://github.com/rds1983,Added zeroing of the out after it is allocated in the function stbi__create_png_image_raw,1,[],https://github.com/nothings/stb/pull/437,https://github.com/nothings,5,https://github.com/nothings/stb/pull/437#issuecomment-287563230,"As that out contents are used in the encoding.
I.e. in that line:
case STBI__F_up         : cur[k] = STBI__BYTECAST(raw[k] + prior[k]); break;
In that code prior points to out.
p.s. Thanks for the awesome library. I work on porting it to C#: https://github.com/rds1983/StbSharp","Also, just because you're going to run into this eventually--you're using the API wrong, if you request 4 channels per pixel (STBI_rgb_alpha), the image that comes back to you has 4 channels per pixel, but 'comp' returns you NOT how many channels were returned to you, but how many were in the file, so your test code looking for differences is only looping over x * y * 3 instead of x * y * 4 of the bytes. (This is documented but not well enough, a lot of people make this mistake. The API has this unintuitive behavior for historical reasons.)",True,{}
nothings/stb,https://github.com/nothings/stb,437,2017-03-18T13:33:55Z,2017-03-18T17:52:29Z,2017-03-18T18:28:42Z,CLOSED,False,1,0,1,https://github.com/rds1983,Added zeroing of the out after it is allocated in the function stbi__create_png_image_raw,1,[],https://github.com/nothings/stb/pull/437,https://github.com/rds1983,6,https://github.com/nothings/stb/pull/437#issuecomment-287564923,"As that out contents are used in the encoding.
I.e. in that line:
case STBI__F_up         : cur[k] = STBI__BYTECAST(raw[k] + prior[k]); break;
In that code prior points to out.
p.s. Thanks for the awesome library. I work on porting it to C#: https://github.com/rds1983/StbSharp",Thanks for the help. I've tried that fix(recomputing of 'prior' inside 'depth<8') and now there are no difference in results with different filler. Even after changing 'x * y * comp' to 'x * y * 4'.,True,{'THUMBS_UP': ['https://github.com/nothings']}
nothings/stb,https://github.com/nothings/stb,438,2017-03-29T04:39:15Z,2017-07-23T21:14:52Z,2017-07-23T21:14:52Z,MERGED,True,4,4,1,https://github.com/cdwfs,stb_truetype: fontdata can be const in stbtt_PackFontRange[s](),1,['1 stb_truetype'],https://github.com/nothings/stb/pull/438,https://github.com/cdwfs,1,https://github.com/nothings/stb/pull/438,"I found a few more function parameters that I believe can be safely const'd, when you have a moment. Thanks!","I found a few more function parameters that I believe can be safely const'd, when you have a moment. Thanks!",True,{}
nothings/stb,https://github.com/nothings/stb,439,2017-04-18T16:38:17Z,2017-07-23T21:14:53Z,2017-07-23T21:14:53Z,MERGED,True,25,7,1,https://github.com/h-s-c,"stb_dxt: Add STBD_ABS, STBD_FABS and STBD_MEMSET macros",2,['stb_dxt'],https://github.com/nothings/stb/pull/439,https://github.com/h-s-c,1,https://github.com/nothings/stb/pull/439,,,True,{}
nothings/stb,https://github.com/nothings/stb,440,2017-04-18T16:39:46Z,2017-07-23T21:14:53Z,2017-07-23T21:14:53Z,MERGED,True,6,6,1,https://github.com/h-s-c,stb_image: Fix STBI_NO_STDIO,2,['1 stb_image'],https://github.com/nothings/stb/pull/440,https://github.com/h-s-c,1,https://github.com/nothings/stb/pull/440,,,True,{}
nothings/stb,https://github.com/nothings/stb,441,2017-04-18T16:42:43Z,2017-07-23T21:14:53Z,2017-07-23T21:14:53Z,MERGED,True,11,2,1,https://github.com/h-s-c,stb_dxt: 	Add STB_DXT_STATIC option,2,['stb_dxt'],https://github.com/nothings/stb/pull/441,https://github.com/h-s-c,1,https://github.com/nothings/stb/pull/441,,,True,{}
nothings/stb,https://github.com/nothings/stb,442,2017-04-18T16:44:34Z,2020-02-02T15:50:16Z,2020-02-02T15:51:25Z,CLOSED,False,21,8,1,https://github.com/h-s-c,stb_sprintf: Improve ASan workaround,2,['1 stb_sprintf'],https://github.com/nothings/stb/pull/442,https://github.com/h-s-c,1,https://github.com/nothings/stb/pull/442,Adds support for more versions of clang and gcc.,Adds support for more versions of clang and gcc.,True,{}
nothings/stb,https://github.com/nothings/stb,442,2017-04-18T16:44:34Z,2020-02-02T15:50:16Z,2020-02-02T15:51:25Z,CLOSED,False,21,8,1,https://github.com/h-s-c,stb_sprintf: Improve ASan workaround,2,['1 stb_sprintf'],https://github.com/nothings/stb/pull/442,https://github.com/rygorous,2,https://github.com/nothings/stb/pull/442#issuecomment-317214060,Adds support for more versions of clang and gcc.,"This seems super-dodgy to me.
I think we should fix ASAN-reported issues, not add ever more boilerplate to suppress them.",True,{}
nothings/stb,https://github.com/nothings/stb,442,2017-04-18T16:44:34Z,2020-02-02T15:50:16Z,2020-02-02T15:51:25Z,CLOSED,False,21,8,1,https://github.com/h-s-c,stb_sprintf: Improve ASan workaround,2,['1 stb_sprintf'],https://github.com/nothings/stb/pull/442,https://github.com/h-s-c,3,https://github.com/nothings/stb/pull/442#issuecomment-319824400,Adds support for more versions of clang and gcc.,"According to the original ASan issue thread this should be ok.
#393

Multiple places in the code will trigger this. It's because it relies on assumptions on how literal and heap allocated strings are aligned in memory and read them in 4-byte blocks. It's almost always safe to do so but it's technically undefined behaviour to read past the string.",True,{}
nothings/stb,https://github.com/nothings/stb,442,2017-04-18T16:44:34Z,2020-02-02T15:50:16Z,2020-02-02T15:51:25Z,CLOSED,False,21,8,1,https://github.com/h-s-c,stb_sprintf: Improve ASan workaround,2,['1 stb_sprintf'],https://github.com/nothings/stb/pull/442,https://github.com/nothings,4,https://github.com/nothings/stb/pull/442#issuecomment-581148237,Adds support for more versions of clang and gcc.,"Whoops, wrote comment on wrong PR. Merged in next release.",True,{}
nothings/stb,https://github.com/nothings/stb,443,2017-04-19T01:56:36Z,2018-01-29T16:22:40Z,2018-01-29T16:22:40Z,MERGED,True,5,1,1,https://github.com/ZenToad,Fixing void * compile error for C++,1,['1 stb library w/no tag'],https://github.com/nothings/stb/pull/443,https://github.com/ZenToad,1,https://github.com/nothings/stb/pull/443,,,True,{}
nothings/stb,https://github.com/nothings/stb,444,2017-04-20T09:56:39Z,2017-07-23T21:14:53Z,2017-07-23T21:14:53Z,MERGED,True,3,0,2,https://github.com/Infatum,fix: Build on MinGW32,1,['stb.h'],https://github.com/nothings/stb/pull/444,https://github.com/Infatum,1,https://github.com/nothings/stb/pull/444,Add include to stb.h and predefine alloca function for MINGW,Add include to stb.h and predefine alloca function for MINGW,True,{}
nothings/stb,https://github.com/nothings/stb,445,2017-04-25T19:07:35Z,2017-07-23T21:14:54Z,2017-07-23T21:14:54Z,MERGED,True,2,2,1,https://github.com/realitix,Robustify stbi__sse2_available in stb_image.h,1,['1 stb_image'],https://github.com/nothings/stb/pull/445,https://github.com/realitix,1,https://github.com/nothings/stb/pull/445,"Function stbi__sse2_available takes no argument,
we should be explicit by passing void as argument.
It will remove warnings from 'some' compilers.","Function stbi__sse2_available takes no argument,
we should be explicit by passing void as argument.
It will remove warnings from 'some' compilers.",True,{}
nothings/stb,https://github.com/nothings/stb,447,2017-04-27T15:51:25Z,2017-07-23T21:14:54Z,2017-07-23T21:14:54Z,MERGED,True,6,0,1,https://github.com/ppiastucki,Add support for BC4,1,['stb_dxt'],https://github.com/nothings/stb/pull/447,https://github.com/ppiastucki,1,https://github.com/nothings/stb/pull/447,This PR leverages the changes introduced for BC5 and adds support for BC4.,This PR leverages the changes introduced for BC5 and adds support for BC4.,True,{}
nothings/stb,https://github.com/nothings/stb,449,2017-04-28T14:36:23Z,2017-08-10T22:56:20Z,2017-08-10T22:56:20Z,CLOSED,False,4,2,1,https://github.com/wojdyr,stb_sprintf: avoid GCC 6 misleading-indentation warnings,1,['1 stb_sprintf'],https://github.com/nothings/stb/pull/449,https://github.com/wojdyr,1,https://github.com/nothings/stb/pull/449,"with minimal changes - two line breaks only
(I didn't add myself to the list of contributors as it's only whitespace)
FTR the warnings were:
stb_sprintf.h: In function ‘int stbsp_vsprintfcb(char* (*)(char*, void*, int), void*, char*, const char*, __va_list_tag*)’:
stb_sprintf.h:507:9: warning: this ‘if’ clause does not guard... [-Wmisleading-indentation]
         if ( l > (stbsp__uint32)pr ) l = pr; while ((l>1)&&(pr)&&(sn[l-1]=='0')) { --pr; --l; }
         ^~
stb_sprintf.h:507:46: note: ...this statement, but the latter is misleadingly indented as if it is guarded by the ‘if’
         if ( l > (stbsp__uint32)pr ) l = pr; while ((l>1)&&(pr)&&(sn[l-1]=='0')) { --pr; --l; }
                                              ^~~~~
stb_sprintf.h:588:11: warning: this ‘if’ clause does not guard... [-Wmisleading-indentation]
           if ((stbsp__int32)(l+n)>pr) l=pr-n; i=l; while(i) { *s++=*sn++; --i; }
           ^~
stb_sprintf.h:588:47: note: ...this statement, but the latter is misleadingly indented as if it is guarded by the ‘if’
           if ((stbsp__int32)(l+n)>pr) l=pr-n; i=l; while(i) { *s++=*sn++; --i; }","with minimal changes - two line breaks only
(I didn't add myself to the list of contributors as it's only whitespace)
FTR the warnings were:
stb_sprintf.h: In function ‘int stbsp_vsprintfcb(char* (*)(char*, void*, int), void*, char*, const char*, __va_list_tag*)’:
stb_sprintf.h:507:9: warning: this ‘if’ clause does not guard... [-Wmisleading-indentation]
         if ( l > (stbsp__uint32)pr ) l = pr; while ((l>1)&&(pr)&&(sn[l-1]=='0')) { --pr; --l; }
         ^~
stb_sprintf.h:507:46: note: ...this statement, but the latter is misleadingly indented as if it is guarded by the ‘if’
         if ( l > (stbsp__uint32)pr ) l = pr; while ((l>1)&&(pr)&&(sn[l-1]=='0')) { --pr; --l; }
                                              ^~~~~
stb_sprintf.h:588:11: warning: this ‘if’ clause does not guard... [-Wmisleading-indentation]
           if ((stbsp__int32)(l+n)>pr) l=pr-n; i=l; while(i) { *s++=*sn++; --i; }
           ^~
stb_sprintf.h:588:47: note: ...this statement, but the latter is misleadingly indented as if it is guarded by the ‘if’
           if ((stbsp__int32)(l+n)>pr) l=pr-n; i=l; while(i) { *s++=*sn++; --i; }",True,{}
nothings/stb,https://github.com/nothings/stb,449,2017-04-28T14:36:23Z,2017-08-10T22:56:20Z,2017-08-10T22:56:20Z,CLOSED,False,4,2,1,https://github.com/wojdyr,stb_sprintf: avoid GCC 6 misleading-indentation warnings,1,['1 stb_sprintf'],https://github.com/nothings/stb/pull/449,https://github.com/rygorous,2,https://github.com/nothings/stb/pull/449#issuecomment-317214449,"with minimal changes - two line breaks only
(I didn't add myself to the list of contributors as it's only whitespace)
FTR the warnings were:
stb_sprintf.h: In function ‘int stbsp_vsprintfcb(char* (*)(char*, void*, int), void*, char*, const char*, __va_list_tag*)’:
stb_sprintf.h:507:9: warning: this ‘if’ clause does not guard... [-Wmisleading-indentation]
         if ( l > (stbsp__uint32)pr ) l = pr; while ((l>1)&&(pr)&&(sn[l-1]=='0')) { --pr; --l; }
         ^~
stb_sprintf.h:507:46: note: ...this statement, but the latter is misleadingly indented as if it is guarded by the ‘if’
         if ( l > (stbsp__uint32)pr ) l = pr; while ((l>1)&&(pr)&&(sn[l-1]=='0')) { --pr; --l; }
                                              ^~~~~
stb_sprintf.h:588:11: warning: this ‘if’ clause does not guard... [-Wmisleading-indentation]
           if ((stbsp__int32)(l+n)>pr) l=pr-n; i=l; while(i) { *s++=*sn++; --i; }
           ^~
stb_sprintf.h:588:47: note: ...this statement, but the latter is misleadingly indented as if it is guarded by the ‘if’
           if ((stbsp__int32)(l+n)>pr) l=pr-n; i=l; while(i) { *s++=*sn++; --i; }","Putting this on ice for now since we have a full mechanical reformat of stb_sprintf (via clang-format) in the pipe. Doing one big batch reforrmat makes more sense than merging indentation fixes piecemeal.
I'll leave this issue around and close when it's merged!",True,{}
nothings/stb,https://github.com/nothings/stb,451,2017-05-04T13:36:53Z,2019-02-07T16:59:54Z,2019-02-07T16:59:54Z,CLOSED,False,39,10,3,https://github.com/beru,STBIDEF STBIRDEF STBIWDEF inline,2,"['1 stb_image', '1 stb_image_write', '2 warning', '4 need data']",https://github.com/nothings/stb/pull/451,https://github.com/beru,1,https://github.com/nothings/stb/pull/451,"Hi, this PR staticinlines stb_image, stb_image_resize, stb_image_write.","Hi, this PR staticinlines stb_image, stb_image_resize, stb_image_write.",True,{}
nothings/stb,https://github.com/nothings/stb,451,2017-05-04T13:36:53Z,2019-02-07T16:59:54Z,2019-02-07T16:59:54Z,CLOSED,False,39,10,3,https://github.com/beru,STBIDEF STBIRDEF STBIWDEF inline,2,"['1 stb_image', '1 stb_image_write', '2 warning', '4 need data']",https://github.com/nothings/stb/pull/451,https://github.com/nothings,2,https://github.com/nothings/stb/pull/451#issuecomment-299194148,"Hi, this PR staticinlines stb_image, stb_image_resize, stb_image_write.","Inline isn't standard in C before C99, so you can't just turn it on for STB_IMAGE_STATIC etc. (You could version test to see if it's C99 though.)


What is the benefit to doing it? For example, in stb_image, the only functions annoted with STBIDEF are the API functions, which generally aren't doing a lot, but might be called from multiple places in user code, needlessly expanding the generated code without seeing any performance benefit.",True,{}
nothings/stb,https://github.com/nothings/stb,451,2017-05-04T13:36:53Z,2019-02-07T16:59:54Z,2019-02-07T16:59:54Z,CLOSED,False,39,10,3,https://github.com/beru,STBIDEF STBIRDEF STBIWDEF inline,2,"['1 stb_image', '1 stb_image_write', '2 warning', '4 need data']",https://github.com/nothings/stb/pull/451,https://github.com/beru,3,https://github.com/nothings/stb/pull/451#issuecomment-299257120,"Hi, this PR staticinlines stb_image, stb_image_resize, stb_image_write.","Inline isn't standard in C before C99, so you can't just turn it on for STB_IMAGE_STATIC etc. (You could version test to see if it's C99 though.)


Please check the code again, I tweaked preprocessor macros based on your comment.
Maybe a bit ugly....
Some old compilers support inlining with __inline or __inline__, but those are not supported with this PR. I wish 20th century ghosts won't haunt me...


What is the benefit to doing it? For example, in stb_image, the only functions annoted with STBIDEF are the API functions, which generally aren't doing a lot, but might be called from multiple places in user code, needlessly expanding the generated code without seeing any performance benefit.


By using inline keywords, I can remove defined but not used [-Wunused-function] warnings when I use stb library from header-only C++ library.
tiny-dnn/tiny-dnn#685 is related.",True,{}
nothings/stb,https://github.com/nothings/stb,451,2017-05-04T13:36:53Z,2019-02-07T16:59:54Z,2019-02-07T16:59:54Z,CLOSED,False,39,10,3,https://github.com/beru,STBIDEF STBIRDEF STBIWDEF inline,2,"['1 stb_image', '1 stb_image_write', '2 warning', '4 need data']",https://github.com/nothings/stb/pull/451,https://github.com/nothings,4,https://github.com/nothings/stb/pull/451#issuecomment-299264202,"Hi, this PR staticinlines stb_image, stb_image_resize, stb_image_write.","By using inline keywords, I can remove defined but not used [-Wunused-function] warnings when I use >stb library from header-only C++ library.

Makes sense. But what about all the functions that aren't STBIDEF? They're not warned about being unused since they're referenced by a static inline function? This feels like a hack that may not work for all time, I suppose there's no better way to turn off the warning locally to that block of code?",True,{}
nothings/stb,https://github.com/nothings/stb,451,2017-05-04T13:36:53Z,2019-02-07T16:59:54Z,2019-02-07T16:59:54Z,CLOSED,False,39,10,3,https://github.com/beru,STBIDEF STBIRDEF STBIWDEF inline,2,"['1 stb_image', '1 stb_image_write', '2 warning', '4 need data']",https://github.com/nothings/stb/pull/451,https://github.com/beru,5,https://github.com/nothings/stb/pull/451#issuecomment-299267742,"Hi, this PR staticinlines stb_image, stb_image_resize, stb_image_write.","I don't know much about gcc but according to this page.
https://gcc.gnu.org/onlinedocs/gcc-3.4.3/gcc/Warning-Options.html

-Wunused-function
Warn whenever a static function is declared but not defined or a non-inline static function is unused.

So using inline keyword might be the only way to take a hike?
Or stop using -Wall or -Wunused-function option is less-distressful but people are spartan to hunt bugs.",True,{}
nothings/stb,https://github.com/nothings/stb,451,2017-05-04T13:36:53Z,2019-02-07T16:59:54Z,2019-02-07T16:59:54Z,CLOSED,False,39,10,3,https://github.com/beru,STBIDEF STBIRDEF STBIWDEF inline,2,"['1 stb_image', '1 stb_image_write', '2 warning', '4 need data']",https://github.com/nothings/stb/pull/451,https://github.com/beru,6,https://github.com/nothings/stb/pull/451#issuecomment-299270715,"Hi, this PR staticinlines stb_image, stb_image_resize, stb_image_write.","Makes sense. But what about all the functions that aren't STBIDEF? They're not warned about being unused since they're referenced by a static inline function? This feels like a hack that may not work for all time, I suppose there's no better way to turn off the warning locally to that block of code?

Actually, I haven't deeply tried to find other ways to turn off the warnings.
#define STB_IMAGE_IMPLEMENTATION
#define STBIDEF inline
#undef STB_IMAGE_STATIC
#include ""stb/stb_image.h""
This might work...",True,{}
nothings/stb,https://github.com/nothings/stb,451,2017-05-04T13:36:53Z,2019-02-07T16:59:54Z,2019-02-07T16:59:54Z,CLOSED,False,39,10,3,https://github.com/beru,STBIDEF STBIRDEF STBIWDEF inline,2,"['1 stb_image', '1 stb_image_write', '2 warning', '4 need data']",https://github.com/nothings/stb/pull/451,https://github.com/indianakernick,7,https://github.com/nothings/stb/pull/451#issuecomment-364623346,"Hi, this PR staticinlines stb_image, stb_image_resize, stb_image_write.","Would declaring every function as STBI_DEF and then letting the client set STBI_DEF completely break everything?
I'm using stb_image in a header-only C++ library. I had to manually declare every function as inline to get it to work but I would rather the preprocessor do that for me.
// define functions as inline
#define STBIDEF inline
// define globals as static
#define STB_IMAGE_STATIC
#define STB_IMAGE_IMPLEMENTATION
#include ""stb_image.h""",True,{}
nothings/stb,https://github.com/nothings/stb,451,2017-05-04T13:36:53Z,2019-02-07T16:59:54Z,2019-02-07T16:59:54Z,CLOSED,False,39,10,3,https://github.com/beru,STBIDEF STBIRDEF STBIWDEF inline,2,"['1 stb_image', '1 stb_image_write', '2 warning', '4 need data']",https://github.com/nothings/stb/pull/451,https://github.com/nothings,8,https://github.com/nothings/stb/pull/451#issuecomment-364777772,"Hi, this PR staticinlines stb_image, stb_image_resize, stb_image_write.","Letting the client define STBIDEF for public functions and a STBIDEFPRIVATE for internal functions or some such might be the best way around this, yeah. The latter doesn't seem to be needed right now but might someday.",True,{}
nothings/stb,https://github.com/nothings/stb,451,2017-05-04T13:36:53Z,2019-02-07T16:59:54Z,2019-02-07T16:59:54Z,CLOSED,False,39,10,3,https://github.com/beru,STBIDEF STBIRDEF STBIWDEF inline,2,"['1 stb_image', '1 stb_image_write', '2 warning', '4 need data']",https://github.com/nothings/stb/pull/451,https://github.com/nothings,9,https://github.com/nothings/stb/pull/451#issuecomment-364780310,"Hi, this PR staticinlines stb_image, stb_image_resize, stb_image_write.","In the next release, STB_IMAGE_WRITE supports setting STBIWDEF before you include it. Let me know if this is a workable solution and I'll do it to the others.",True,{}
nothings/stb,https://github.com/nothings/stb,451,2017-05-04T13:36:53Z,2019-02-07T16:59:54Z,2019-02-07T16:59:54Z,CLOSED,False,39,10,3,https://github.com/beru,STBIDEF STBIRDEF STBIWDEF inline,2,"['1 stb_image', '1 stb_image_write', '2 warning', '4 need data']",https://github.com/nothings/stb/pull/451,https://github.com/indianakernick,10,https://github.com/nothings/stb/pull/451#issuecomment-364799377,"Hi, this PR staticinlines stb_image, stb_image_resize, stb_image_write.","It looks like defining STBIWDEF actually isn't necessary. Sorry about that. It would seem that I have forgotten the meaning of static. And I call myself a programmer...
The reason I was getting linker errors the first time around was because some of the private functions in image_write aren't static. So I just thought, ""oh, duplicate symbol, EVERYTHING MUST BE INLINE"". When in fact, all I had to do was define STB_IMAGE_WRITE_STATIC.
These private functions in stb_image_write are not static

stbi_zlib_compress
stbi_write_png_to_mem
stbiw__write_run_data
stbiw__write_dump_data
stbiw__write_hdr_scanline
stbiw__linear_to_rgb

There could be more in the other libraries. It's an easy mistake to make. All you have to do is put this
#define STB_XXX_STATIC
#define STB_XXX_IMPLEMENTATION
#include ""stb_xxx.h""

in two separate C files and then link them together and you'll find the rest.
I also just downloaded the latest version of stb_image and found an occurrence of STBI_REALLOC being used instead of STBI_REALLOC_SIZED. Luckily, there's only two and they're right next to each other. Inside stbi__load_gif_main at lines 6526 and 6528.",True,{}
nothings/stb,https://github.com/nothings/stb,451,2017-05-04T13:36:53Z,2019-02-07T16:59:54Z,2019-02-07T16:59:54Z,CLOSED,False,39,10,3,https://github.com/beru,STBIDEF STBIRDEF STBIWDEF inline,2,"['1 stb_image', '1 stb_image_write', '2 warning', '4 need data']",https://github.com/nothings/stb/pull/451,https://github.com/nothings,11,https://github.com/nothings/stb/pull/451#issuecomment-461510874,"Hi, this PR staticinlines stb_image, stb_image_resize, stb_image_write.","added a compile test and fixed all the non-static functions in stb_image, stb_image_write, and stb_truetype. for next release",True,{'THUMBS_UP': ['https://github.com/beru']}
nothings/stb,https://github.com/nothings/stb,452,2017-05-04T22:47:36Z,2017-07-23T21:14:54Z,2017-07-23T21:14:54Z,MERGED,True,16,1,1,https://github.com/poppolopoppo,Add stbi_load_16() variants to load from callbacks or memory,1,['1 stb_image'],https://github.com/nothings/stb/pull/452,https://github.com/poppolopoppo,1,https://github.com/nothings/stb/pull/452,Very small patch to complete the experimental 16 bits interface.,Very small patch to complete the experimental 16 bits interface.,True,{'THUMBS_UP': ['https://github.com/kosmolot']}
nothings/stb,https://github.com/nothings/stb,453,2017-05-04T22:54:06Z,2017-07-22T22:47:20Z,2017-07-22T22:47:20Z,CLOSED,False,19,4,1,https://github.com/poppolopoppo,"Fix scope for stbi_load(), stbi_load_16() & stbi_loadf() when STBI_NO_STDIO",1,['1 stb_image'],https://github.com/nothings/stb/pull/453,https://github.com/poppolopoppo,1,https://github.com/nothings/stb/pull/453,The 'filename' variant of these 3 functions were declared but not defined.,The 'filename' variant of these 3 functions were declared but not defined.,True,{}
nothings/stb,https://github.com/nothings/stb,453,2017-05-04T22:54:06Z,2017-07-22T22:47:20Z,2017-07-22T22:47:20Z,CLOSED,False,19,4,1,https://github.com/poppolopoppo,"Fix scope for stbi_load(), stbi_load_16() & stbi_loadf() when STBI_NO_STDIO",1,['1 stb_image'],https://github.com/nothings/stb/pull/453,https://github.com/rygorous,2,https://github.com/nothings/stb/pull/453#issuecomment-317215238,The 'filename' variant of these 3 functions were declared but not defined.,Duplicate of #440. I've merged both #440 and your earlier #452 into the dev branch; closing.,True,{}
nothings/stb,https://github.com/nothings/stb,454,2017-05-12T06:03:08Z,2017-07-23T21:14:54Z,2017-07-23T21:14:54Z,MERGED,True,19,17,2,https://github.com/Reedbeta,Fix VS2015 warnings,5,"['1 stb_image', '1 stb library w/no tag']",https://github.com/nothings/stb/pull/454,https://github.com/Reedbeta,1,https://github.com/nothings/stb/pull/454,Fix a few compiler warnings I found when using /W4 on VS 2015.,Fix a few compiler warnings I found when using /W4 on VS 2015.,True,"{'THUMBS_UP': ['https://github.com/maluramichael', 'https://github.com/jpcy', 'https://github.com/glampert']}"
nothings/stb,https://github.com/nothings/stb,455,2017-05-16T15:28:41Z,2017-07-23T21:14:56Z,2017-07-23T21:14:56Z,CLOSED,False,4,3,1,https://github.com/cfloisand,Fixes unpremultiply truncation bug.,1,"['2 bug', '1 stb_image']",https://github.com/nothings/stb/pull/455,https://github.com/cfloisand,1,https://github.com/nothings/stb/pull/455,"I came across this issue when using stb_image & stb_image_write for a steganography project. So for instance, creating/saving a PNG on desktop and then opening the image on an iPhone with the unpremultiply flag set to on will cause some of the colors to be slightly off from their original values due to truncation.","I came across this issue when using stb_image & stb_image_write for a steganography project. So for instance, creating/saving a PNG on desktop and then opening the image on an iPhone with the unpremultiply flag set to on will cause some of the colors to be slightly off from their original values due to truncation.",True,{'THUMBS_UP': ['https://github.com/nothings']}
nothings/stb,https://github.com/nothings/stb,456,2017-05-22T09:33:41Z,2017-07-22T23:52:24Z,2019-02-25T19:26:59Z,CLOSED,False,242,3,1,https://github.com/nicebyte,Add I/O callback support to stb_vorbis,4,['1 stb_vorbis'],https://github.com/nothings/stb/pull/456,https://github.com/nicebyte,1,https://github.com/nothings/stb/pull/456,"This change adds support for generic I/O callbacks to stb_vorbis.
This serves the same purpose as the pushdata api - to be able to feed bytes from a custom source into the library. However, I found that pushdata was less suitable for my particular use case and felt that a file-like abstraction was a better approach.
Note: I deliberately did not reimplement stdio-based functionality in terms of the new API. My assumption is that users should be able to use stdio-based functionality without relying on the callbacks API whatsoever. If you think otherwise, please let me know.
Testing: I tested decoding a short OGG file, with the following combinations of #defines:

(no additional defines)
STB_VORBIS_NO_STDIO only
STB_VORBIS_NO_IOCALLBACKS only","This change adds support for generic I/O callbacks to stb_vorbis.
This serves the same purpose as the pushdata api - to be able to feed bytes from a custom source into the library. However, I found that pushdata was less suitable for my particular use case and felt that a file-like abstraction was a better approach.
Note: I deliberately did not reimplement stdio-based functionality in terms of the new API. My assumption is that users should be able to use stdio-based functionality without relying on the callbacks API whatsoever. If you think otherwise, please let me know.
Testing: I tested decoding a short OGG file, with the following combinations of #defines:

(no additional defines)
STB_VORBIS_NO_STDIO only
STB_VORBIS_NO_IOCALLBACKS only",True,{}
nothings/stb,https://github.com/nothings/stb,456,2017-05-22T09:33:41Z,2017-07-22T23:52:24Z,2019-02-25T19:26:59Z,CLOSED,False,242,3,1,https://github.com/nicebyte,Add I/O callback support to stb_vorbis,4,['1 stb_vorbis'],https://github.com/nothings/stb/pull/456,https://github.com/rygorous,2,https://github.com/nothings/stb/pull/456#issuecomment-317218021,"This change adds support for generic I/O callbacks to stb_vorbis.
This serves the same purpose as the pushdata api - to be able to feed bytes from a custom source into the library. However, I found that pushdata was less suitable for my particular use case and felt that a file-like abstraction was a better approach.
Note: I deliberately did not reimplement stdio-based functionality in terms of the new API. My assumption is that users should be able to use stdio-based functionality without relying on the callbacks API whatsoever. If you think otherwise, please let me know.
Testing: I tested decoding a short OGG file, with the following combinations of #defines:

(no additional defines)
STB_VORBIS_NO_STDIO only
STB_VORBIS_NO_IOCALLBACKS only","This is effectively a feature request (I added a new issue #478 for it), but I'm vetoing this particular implementation.
My specific concerns are this:

The API surface for the installable IO callbacks is way too large. Having both read and a more specific getcharacter is redundant and means extra work for everyone who wants to use the IO callbacks. Similarly, configurable values for EOF, SEEK_SET etc. add, not remove, complexity on both sides.
Having a getcharacter callback is a really bad idea. getc and fgetc are traditionally implemented as macros that directly manipulate the internal FILE buffer pointers, and stb_vorbis implicitly relies on get8 being inlined; actually doing a callback for every single byte read is really expensive and to be avoided.
Adding yet more #ifdefs (and also ifs at run-time when the installable IO callback support isn't disabled) makes what is already code that's messier than it should be even worse.

If we want all three of ""regular stdio"", ""decode from memory"" and ""IO callbacks"", the best way to do that is to map all three to a built-in buffered IO layer - I think that's the direction such a patch should go, and I'll look into it.",True,{}
nothings/stb,https://github.com/nothings/stb,459,2017-05-30T01:54:37Z,2017-07-23T21:14:56Z,2017-07-23T21:14:56Z,CLOSED,False,1,1,1,https://github.com/corporateshark,Fixed 'printf' : unknown type field character,1,['1 stb library w/no tag'],https://github.com/nothings/stb/pull/459,https://github.com/corporateshark,1,https://github.com/nothings/stb/pull/459,,,True,{}
nothings/stb,https://github.com/nothings/stb,459,2017-05-30T01:54:37Z,2017-07-23T21:14:56Z,2017-07-23T21:14:56Z,CLOSED,False,1,1,1,https://github.com/corporateshark,Fixed 'printf' : unknown type field character,1,['1 stb library w/no tag'],https://github.com/nothings/stb/pull/459,https://github.com/rygorous,2,https://github.com/nothings/stb/pull/459#issuecomment-317219627,,"Can you be more precise about what issue is this ""fixing""?
As-is, this breaks the code on every Visual C++ version before VS2015 (because they don't support %zd), so it would need a platform #ifdef at the very least.",True,{}
nothings/stb,https://github.com/nothings/stb,459,2017-05-30T01:54:37Z,2017-07-23T21:14:56Z,2017-07-23T21:14:56Z,CLOSED,False,1,1,1,https://github.com/corporateshark,Fixed 'printf' : unknown type field character,1,['1 stb library w/no tag'],https://github.com/nothings/stb/pull/459,https://github.com/corporateshark,3,https://github.com/nothings/stb/pull/459#issuecomment-317219730,,It fixes a warning on VS 2017.,True,{}
nothings/stb,https://github.com/nothings/stb,459,2017-05-30T01:54:37Z,2017-07-23T21:14:56Z,2017-07-23T21:14:56Z,CLOSED,False,1,1,1,https://github.com/corporateshark,Fixed 'printf' : unknown type field character,1,['1 stb library w/no tag'],https://github.com/nothings/stb/pull/459,https://github.com/rygorous,4,https://github.com/nothings/stb/pull/459#issuecomment-317221509,,"Alright, fix that should work with other VC++ vers is checked in with commit 501812f, will make it to master whenever we next cut a release.",True,{}
nothings/stb,https://github.com/nothings/stb,460,2017-05-30T02:09:02Z,2019-02-07T12:48:21Z,2019-02-07T12:48:22Z,CLOSED,False,9,0,1,https://github.com/corporateshark,Disabled Clang pedantic warning (equality comparison with extraneous …,1,"['1 stb_image', '2 warning', '4 need data']",https://github.com/nothings/stb/pull/460,https://github.com/corporateshark,1,https://github.com/nothings/stb/pull/460,,,True,{}
nothings/stb,https://github.com/nothings/stb,460,2017-05-30T02:09:02Z,2019-02-07T12:48:21Z,2019-02-07T12:48:22Z,CLOSED,False,9,0,1,https://github.com/corporateshark,Disabled Clang pedantic warning (equality comparison with extraneous …,1,"['1 stb_image', '2 warning', '4 need data']",https://github.com/nothings/stb/pull/460,https://github.com/rygorous,2,https://github.com/nothings/stb/pull/460#issuecomment-317219895,,"I'm totally OK with fixing the code that causes warning,s but stb_image (and other stb libraries) really shouldn't get in the business of locally disabling compiler warnings via #pragmas. This code gets used on a bunch of exotic compiler/platform combinations and disabling warnings, especially at the more marginal (-Wextra / -pedantic etc.) levels, quickly gets out of hand.
What platform and Clang version are you getting warnings with?",True,"{'THUMBS_UP': ['https://github.com/AndyMender', 'https://github.com/jamesdolan', 'https://github.com/jlnr']}"
nothings/stb,https://github.com/nothings/stb,460,2017-05-30T02:09:02Z,2019-02-07T12:48:21Z,2019-02-07T12:48:22Z,CLOSED,False,9,0,1,https://github.com/corporateshark,Disabled Clang pedantic warning (equality comparison with extraneous …,1,"['1 stb_image', '2 warning', '4 need data']",https://github.com/nothings/stb/pull/460,https://github.com/corporateshark,3,https://github.com/nothings/stb/pull/460#issuecomment-317220547,,"Android clang version 5.0.300080  (based on LLVM 5.0.300080)
Target: x86_64-unknown-linux

The code that causes the warning is in the same file actually.",True,{}
nothings/stb,https://github.com/nothings/stb,460,2017-05-30T02:09:02Z,2019-02-07T12:48:21Z,2019-02-07T12:48:22Z,CLOSED,False,9,0,1,https://github.com/corporateshark,Disabled Clang pedantic warning (equality comparison with extraneous …,1,"['1 stb_image', '2 warning', '4 need data']",https://github.com/nothings/stb/pull/460,https://github.com/nothings,4,https://github.com/nothings/stb/pull/460#issuecomment-361208509,,"Sorry, I should have said earlier, I need to know which line(s) are actually producing warnings so they can be fixed manually, not using #pragmas.",True,{}
nothings/stb,https://github.com/nothings/stb,460,2017-05-30T02:09:02Z,2019-02-07T12:48:21Z,2019-02-07T12:48:22Z,CLOSED,False,9,0,1,https://github.com/corporateshark,Disabled Clang pedantic warning (equality comparison with extraneous …,1,"['1 stb_image', '2 warning', '4 need data']",https://github.com/nothings/stb/pull/460,https://github.com/nothings,5,https://github.com/nothings/stb/pull/460#issuecomment-461405774,,Closing this since it's been a year without a response.,True,{}
nothings/stb,https://github.com/nothings/stb,462,2017-06-07T11:30:47Z,2017-07-23T21:14:56Z,2017-07-23T21:14:56Z,CLOSED,False,28,15,1,https://github.com/jmaargh,stb_image optimise vertical flip,3,[],https://github.com/nothings/stb/pull/462,https://github.com/jmaargh,1,https://github.com/nothings/stb/pull/462,"A simple optimisation to have the current ""vertically_flip_on_load"" work by using memcpy for each row, rather than each channel value individually for each pixel.","A simple optimisation to have the current ""vertically_flip_on_load"" work by using memcpy for each row, rather than each channel value individually for each pixel.",True,{}
nothings/stb,https://github.com/nothings/stb,462,2017-06-07T11:30:47Z,2017-07-23T21:14:56Z,2017-07-23T21:14:56Z,CLOSED,False,28,15,1,https://github.com/jmaargh,stb_image optimise vertical flip,3,[],https://github.com/nothings/stb/pull/462,https://github.com/nothings,2,https://github.com/nothings/stb/pull/462#issuecomment-307006807,"A simple optimisation to have the current ""vertically_flip_on_load"" work by using memcpy for each row, rather than each channel value individually for each pixel.","stb_image doesn't allow declare-anywhere in interests of working on pre-C99 compilers (you can see the failure from the Travis CI in the thread)


How about avoiding malloc some of the time? E.g. declare a 2KB or 4KB buffer on the stack, and then malloc if that size isn't large enough. (This is why it wasn't written with memcpy in the first place and was a @todo.)",True,{}
nothings/stb,https://github.com/nothings/stb,462,2017-06-07T11:30:47Z,2017-07-23T21:14:56Z,2017-07-23T21:14:56Z,CLOSED,False,28,15,1,https://github.com/jmaargh,stb_image optimise vertical flip,3,[],https://github.com/nothings/stb/pull/462,https://github.com/jmaargh,3,https://github.com/nothings/stb/pull/462#issuecomment-307554547,"A simple optimisation to have the current ""vertically_flip_on_load"" work by using memcpy for each row, rather than each channel value individually for each pixel.",Made those changes,True,{}
nothings/stb,https://github.com/nothings/stb,463,2017-06-07T18:14:35Z,2017-07-23T21:14:56Z,2017-07-23T21:14:56Z,CLOSED,False,42,1,1,https://github.com/ornitorrincos,adds OS/2 table metrics to stb_truetype,2,['1 stb_truetype'],https://github.com/nothings/stb/pull/463,https://github.com/ornitorrincos,1,https://github.com/nothings/stb/pull/463,"Adds what in theory are only microsoft specific OS/2 table and gets typoascend/descend/linegap, which are different form the ones found on the hhea table","Adds what in theory are only microsoft specific OS/2 table and gets typoascend/descend/linegap, which are different form the ones found on the hhea table",True,{}
nothings/stb,https://github.com/nothings/stb,463,2017-06-07T18:14:35Z,2017-07-23T21:14:56Z,2017-07-23T21:14:56Z,CLOSED,False,42,1,1,https://github.com/ornitorrincos,adds OS/2 table metrics to stb_truetype,2,['1 stb_truetype'],https://github.com/nothings/stb/pull/463,https://github.com/nothings,2,https://github.com/nothings/stb/pull/463#issuecomment-307037697,"Adds what in theory are only microsoft specific OS/2 table and gets typoascend/descend/linegap, which are different form the ones found on the hhea table",Does the updated commit mean you hadn't actually tested the first version?,True,{}
nothings/stb,https://github.com/nothings/stb,463,2017-06-07T18:14:35Z,2017-07-23T21:14:56Z,2017-07-23T21:14:56Z,CLOSED,False,42,1,1,https://github.com/ornitorrincos,adds OS/2 table metrics to stb_truetype,2,['1 stb_truetype'],https://github.com/nothings/stb/pull/463,https://github.com/ornitorrincos,3,https://github.com/nothings/stb/pull/463#issuecomment-307068370,"Adds what in theory are only microsoft specific OS/2 table and gets typoascend/descend/linegap, which are different form the ones found on the hhea table","I had a bug that I didn't actually catch, second version is tested and being used, sorry",True,{}
nothings/stb,https://github.com/nothings/stb,463,2017-06-07T18:14:35Z,2017-07-23T21:14:56Z,2017-07-23T21:14:56Z,CLOSED,False,42,1,1,https://github.com/ornitorrincos,adds OS/2 table metrics to stb_truetype,2,['1 stb_truetype'],https://github.com/nothings/stb/pull/463,https://github.com/rygorous,4,https://github.com/nothings/stb/pull/463#issuecomment-317224284,"Adds what in theory are only microsoft specific OS/2 table and gets typoascend/descend/linegap, which are different form the ones found on the hhea table","I implemented the equivalent in commit 30c7c6b (but with less code), renamed the function to GetFontVMetricsOS2, and added you to the authors list. And yes, I tested it. :)",True,{}
nothings/stb,https://github.com/nothings/stb,470,2017-07-04T17:01:09Z,2018-01-29T16:22:40Z,2018-01-29T16:22:41Z,MERGED,True,29,5,1,https://github.com/DanielGibson,stb_image_write.h: PNG: allow setting zlib compr. level and custom compress function,2,['1 stb_image_write'],https://github.com/nothings/stb/pull/470,https://github.com/DanielGibson,1,https://github.com/nothings/stb/pull/470,"I think it's useful if the compression level can be configured, and it was an easy change, as the builtin compression function already has a ""quality"" argument.
I just added a global variable (int stbi_write_png_level, analogous to stbi_write_tga_with_rle) for this.
As it has been pointed out in #113, letting stbi_write_png() use an optimized deflate implementation (like from zlib) creates smaller PNGs, closer to libpng. My second commit allows doing that.
I think this is useful, even if it adds an (optional!) dependency, because many projects use zlib, miniz or similar anyway, but might prefer stb_image(_write) over libpng because it's easier to integrate and has a nicer API.","I think it's useful if the compression level can be configured, and it was an easy change, as the builtin compression function already has a ""quality"" argument.
I just added a global variable (int stbi_write_png_level, analogous to stbi_write_tga_with_rle) for this.
As it has been pointed out in #113, letting stbi_write_png() use an optimized deflate implementation (like from zlib) creates smaller PNGs, closer to libpng. My second commit allows doing that.
I think this is useful, even if it adds an (optional!) dependency, because many projects use zlib, miniz or similar anyway, but might prefer stb_image(_write) over libpng because it's easier to integrate and has a nicer API.",True,{}
nothings/stb,https://github.com/nothings/stb,470,2017-07-04T17:01:09Z,2018-01-29T16:22:40Z,2018-01-29T16:22:41Z,MERGED,True,29,5,1,https://github.com/DanielGibson,stb_image_write.h: PNG: allow setting zlib compr. level and custom compress function,2,['1 stb_image_write'],https://github.com/nothings/stb/pull/470,https://github.com/bvgastel,2,https://github.com/nothings/stb/pull/470#issuecomment-325816968,"I think it's useful if the compression level can be configured, and it was an easy change, as the builtin compression function already has a ""quality"" argument.
I just added a global variable (int stbi_write_png_level, analogous to stbi_write_tga_with_rle) for this.
As it has been pointed out in #113, letting stbi_write_png() use an optimized deflate implementation (like from zlib) creates smaller PNGs, closer to libpng. My second commit allows doing that.
I think this is useful, even if it adds an (optional!) dependency, because many projects use zlib, miniz or similar anyway, but might prefer stb_image(_write) over libpng because it's easier to integrate and has a nicer API.","This is very useful, thanks! Please merge this change.",True,{}
nothings/stb,https://github.com/nothings/stb,471,2017-07-10T17:58:43Z,2017-07-23T21:14:56Z,2017-07-23T21:14:56Z,CLOSED,False,1,1,1,https://github.com/oyvindjam,Fix typo in documentation,1,['1 stb_truetype'],https://github.com/nothings/stb/pull/471,https://github.com/oyvindjam,1,https://github.com/nothings/stb/pull/471,,,True,{}
nothings/stb,https://github.com/nothings/stb,472,2017-07-17T13:29:42Z,2017-07-17T13:33:51Z,2017-07-17T13:34:03Z,CLOSED,False,41,3,1,https://github.com/gasparitiago,stb_image_write: Support pgm format,1,[],https://github.com/nothings/stb/pull/472,https://github.com/gasparitiago,1,https://github.com/nothings/stb/pull/472,Initial implementation for writing 8-bit grayscale images on pgm format.,Initial implementation for writing 8-bit grayscale images on pgm format.,True,{}
nothings/stb,https://github.com/nothings/stb,473,2017-07-17T13:41:51Z,2017-07-17T17:41:20Z,2017-07-17T17:41:20Z,CLOSED,False,41,3,1,https://github.com/gasparitiago,stb_image_write: Support pgm support,1,[],https://github.com/nothings/stb/pull/473,https://github.com/gasparitiago,1,https://github.com/nothings/stb/pull/473,Initial implementation for writing 8-bit grayscale images on pgm format.,Initial implementation for writing 8-bit grayscale images on pgm format.,True,{}
nothings/stb,https://github.com/nothings/stb,473,2017-07-17T13:41:51Z,2017-07-17T17:41:20Z,2017-07-17T17:41:20Z,CLOSED,False,41,3,1,https://github.com/gasparitiago,stb_image_write: Support pgm support,1,[],https://github.com/nothings/stb/pull/473,https://github.com/nothings,2,https://github.com/nothings/stb/pull/473#issuecomment-315760356,Initial implementation for writing 8-bit grayscale images on pgm format.,I generally do not plan on adding new file formats to stb_image_write. Is there any particular reason you think pgm is needed?,True,{}
nothings/stb,https://github.com/nothings/stb,473,2017-07-17T13:41:51Z,2017-07-17T17:41:20Z,2017-07-17T17:41:20Z,CLOSED,False,41,3,1,https://github.com/gasparitiago,stb_image_write: Support pgm support,1,[],https://github.com/nothings/stb/pull/473,https://github.com/gasparitiago,3,https://github.com/nothings/stb/pull/473#issuecomment-315762021,Initial implementation for writing 8-bit grayscale images on pgm format.,"I was working with some processing image libraries that uses this format (related to kinect data streams) and the lacking of writing the image on PGM format was an issue.
I know there is another libraries that saves in this format, like OpenCV, but for simple projects it's much more easy to include only the headers from STB than the OpenCV.
But, like you said that you don't plan to add new file formats, please close the pull request.",True,{}
nothings/stb,https://github.com/nothings/stb,474,2017-07-22T03:35:07Z,2017-07-23T21:14:55Z,2019-03-02T02:46:46Z,MERGED,True,1450,843,1,https://github.com/rygorous,Sprintf reformat,3,['1 stb_sprintf'],https://github.com/nothings/stb/pull/474,https://github.com/rygorous,1,https://github.com/nothings/stb/pull/474,"This is an attempt to make stb_sprintf at least a bit more readable.
Start with clang-format configured to produce a reasonable semblance of ""normal"" stb style, then manually fix up a few dodgy pieces of formatting in the result, and finally remove some really gratuitous gotos.","This is an attempt to make stb_sprintf at least a bit more readable.
Start with clang-format configured to produce a reasonable semblance of ""normal"" stb style, then manually fix up a few dodgy pieces of formatting in the result, and finally remove some really gratuitous gotos.",True,{}
nothings/stb,https://github.com/nothings/stb,474,2017-07-22T03:35:07Z,2017-07-23T21:14:55Z,2019-03-02T02:46:46Z,MERGED,True,1450,843,1,https://github.com/rygorous,Sprintf reformat,3,['1 stb_sprintf'],https://github.com/nothings/stb/pull/474,https://github.com/nothings,2,https://github.com/nothings/stb/pull/474#issuecomment-317193619,"This is an attempt to make stb_sprintf at least a bit more readable.
Start with clang-format configured to produce a reasonable semblance of ""normal"" stb style, then manually fix up a few dodgy pieces of formatting in the result, and finally remove some really gratuitous gotos.",This is great but I think we should merge the other stb_sprintf pull requests first because redoing them after the fact will be harder than fixing up this PR. Seem reasonable?,True,{}
nothings/stb,https://github.com/nothings/stb,474,2017-07-22T03:35:07Z,2017-07-23T21:14:55Z,2019-03-02T02:46:46Z,MERGED,True,1450,843,1,https://github.com/rygorous,Sprintf reformat,3,['1 stb_sprintf'],https://github.com/nothings/stb/pull/474,https://github.com/rygorous,3,https://github.com/nothings/stb/pull/474#issuecomment-317204623,"This is an attempt to make stb_sprintf at least a bit more readable.
Start with clang-format configured to produce a reasonable semblance of ""normal"" stb style, then manually fix up a few dodgy pieces of formatting in the result, and finally remove some really gratuitous gotos.","Sure!
…
On Jul 22, 2017 09:15, ""Sean Barrett"" ***@***.***> wrote:
 This is great but I think we should merge the other stb_sprintf pull
 requests first because redoing them after the fact will be harder than
 fixing up this PR. Seem reasonable?

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub
 <#474 (comment)>, or mute
 the thread
 <https://github.com/notifications/unsubscribe-auth/ABBw-NIoPx_N3g__QED4N4e3MWXBLORtks5sQiAVgaJpZM4OgDic>
 .",True,{}
nothings/stb,https://github.com/nothings/stb,474,2017-07-22T03:35:07Z,2017-07-23T21:14:55Z,2019-03-02T02:46:46Z,MERGED,True,1450,843,1,https://github.com/rygorous,Sprintf reformat,3,['1 stb_sprintf'],https://github.com/nothings/stb/pull/474,https://github.com/rygorous,4,https://github.com/nothings/stb/pull/474#issuecomment-317212260,"This is an attempt to make stb_sprintf at least a bit more readable.
Start with clang-format configured to produce a reasonable semblance of ""normal"" stb style, then manually fix up a few dodgy pieces of formatting in the result, and finally remove some really gratuitous gotos.","I think #449 is obsoleted by this, though.",True,{}
nothings/stb,https://github.com/nothings/stb,474,2017-07-22T03:35:07Z,2017-07-23T21:14:55Z,2019-03-02T02:46:46Z,MERGED,True,1450,843,1,https://github.com/rygorous,Sprintf reformat,3,['1 stb_sprintf'],https://github.com/nothings/stb/pull/474,https://github.com/rygorous,5,https://github.com/nothings/stb/pull/474#issuecomment-317224443,"This is an attempt to make stb_sprintf at least a bit more readable.
Start with clang-format configured to produce a reasonable semblance of ""normal"" stb style, then manually fix up a few dodgy pieces of formatting in the result, and finally remove some really gratuitous gotos.","Yeah, there are two outstanding pull requests; one is just formatting changes and subsumed by this one, and the other is just #defines at the top to add yet more ways to turn off Address Sanitizer (on different compilers).
The latter will be just as easy to merge after, but I think we should instead fix the code so ASan has nothing to complain about. So I'm merging this one now. :)",True,{}
nothings/stb,https://github.com/nothings/stb,475,2017-07-22T04:58:39Z,2017-07-23T21:14:56Z,2019-03-02T02:46:45Z,MERGED,True,4,5,1,https://github.com/rygorous,stb_image: Relax raw_len validation for non-interlaced PNGs.,1,['1 stb_image'],https://github.com/nothings/stb/pull/475,https://github.com/rygorous,1,https://github.com/nothings/stb/pull/475,"We used to require exact match between img_len and raw_len for
non-interlaced PNGs, but the PNG in issue #276 has extra bytes
(all zeros) at the end of the compressed DEFLATE stream.
The PNG spec doesn't have anything to say about it (that I
can tell), and if libpng accepts this, who are we to judge.
Fixes issue #276.","We used to require exact match between img_len and raw_len for
non-interlaced PNGs, but the PNG in issue #276 has extra bytes
(all zeros) at the end of the compressed DEFLATE stream.
The PNG spec doesn't have anything to say about it (that I
can tell), and if libpng accepts this, who are we to judge.
Fixes issue #276.",True,{}
nothings/stb,https://github.com/nothings/stb,476,2017-07-22T05:36:21Z,2017-07-23T21:14:56Z,2019-03-02T02:46:44Z,MERGED,True,11,10,1,https://github.com/rygorous,stb_image: Documentation fixes.,1,['1 stb_image'],https://github.com/nothings/stb/pull/476,https://github.com/rygorous,1,https://github.com/nothings/stb/pull/476,"req_comp is now desired_channels and *comp is *channels_in_file.
Fixes issue #466.","req_comp is now desired_channels and *comp is *channels_in_file.
Fixes issue #466.",True,{}
nothings/stb,https://github.com/nothings/stb,477,2017-07-22T21:41:15Z,2017-07-23T21:14:56Z,2019-03-02T02:46:43Z,MERGED,True,1,1,1,https://github.com/rygorous,stb_vorbis: MinGW has alloca defined in malloc.h.,1,['1 stb_vorbis'],https://github.com/nothings/stb/pull/477,https://github.com/rygorous,1,https://github.com/nothings/stb/pull/477,Fixes issue #461.,Fixes issue #461.,True,{}
nothings/stb,https://github.com/nothings/stb,485,2017-07-28T05:08:57Z,2018-01-29T16:22:41Z,2018-01-29T16:22:41Z,MERGED,True,3,2,1,https://github.com/rohit-n,stb_sprintf.h: Don't compare uninitialized value when using zero.,1,[],https://github.com/nothings/stb/pull/485,https://github.com/rohit-n,1,https://github.com/nothings/stb/pull/485,"Haven't tested extensively, but this silences about 800 valgrind errors when starting my game up, with no other issues.","Haven't tested extensively, but this silences about 800 valgrind errors when starting my game up, with no other issues.",True,{}
nothings/stb,https://github.com/nothings/stb,485,2017-07-28T05:08:57Z,2018-01-29T16:22:41Z,2018-01-29T16:22:41Z,MERGED,True,3,2,1,https://github.com/rohit-n,stb_sprintf.h: Don't compare uninitialized value when using zero.,1,[],https://github.com/nothings/stb/pull/485,https://github.com/nothings,2,https://github.com/nothings/stb/pull/485#issuecomment-318678480,"Haven't tested extensively, but this silences about 800 valgrind errors when starting my game up, with no other issues.","What's then ""when using zero"" mean in this context?",True,{}
nothings/stb,https://github.com/nothings/stb,485,2017-07-28T05:08:57Z,2018-01-29T16:22:41Z,2018-01-29T16:22:41Z,MERGED,True,3,2,1,https://github.com/rohit-n,stb_sprintf.h: Don't compare uninitialized value when using zero.,1,[],https://github.com/nothings/stb/pull/485,https://github.com/rohit-n,3,https://github.com/nothings/stb/pull/485#issuecomment-318679472,"Haven't tested extensively, but this silences about 800 valgrind errors when starting my game up, with no other issues.","Using zero in the additional arguments to replace %i. Example:
char buffer[32];
stbsp_sprintf(buffer, ""test%i"", 0);",True,{}
nothings/stb,https://github.com/nothings/stb,486,2017-08-01T05:25:44Z,2018-01-29T16:22:41Z,2018-01-29T16:22:41Z,MERGED,True,1,1,1,https://github.com/Benjins,Correct function signature in stbi_write_jpg usage documentation.,1,[],https://github.com/nothings/stb/pull/486,https://github.com/Benjins,1,https://github.com/nothings/stb/pull/486,"Previously, the usage documentation stbi_write_jpg did not include the quality parameter. This PR simply adds it into the usage docs at the top of the file.","Previously, the usage documentation stbi_write_jpg did not include the quality parameter. This PR simply adds it into the usage docs at the top of the file.",True,{}
nothings/stb,https://github.com/nothings/stb,488,2017-08-07T12:07:30Z,2018-01-29T16:22:41Z,2018-01-29T16:22:41Z,MERGED,True,70,38,1,https://github.com/akx,stb_image_write: allow forcing PNG filter and compression,1,[],https://github.com/nothings/stb/pull/488,https://github.com/akx,1,https://github.com/nothings/stb/pull/488,"This adds a new stbi_write_png_to_mem_ex function with two new parameters:

force_filter being < 0 means the original behavior (i.e. figure out the best-performing filter per scanline); any other values 0 <= x <= 4 correspond to PNG filters (0 = none, 1 = sub, 2 = up, 3 = average, 4 = Paeth).
compression_level being < 0 equals compression_level 8 (the previous value). The higher this is, the better the compression should be (though it will use more memory).

These new parameters are not (yet) exposed for the higher-level API functions, and the documented API does not change as of this commit.
For what it's worth, encoding a 1920x1080 image  with force_filter=0 is about 45% faster than force_filter=-1 on my particular machine.","This adds a new stbi_write_png_to_mem_ex function with two new parameters:

force_filter being < 0 means the original behavior (i.e. figure out the best-performing filter per scanline); any other values 0 <= x <= 4 correspond to PNG filters (0 = none, 1 = sub, 2 = up, 3 = average, 4 = Paeth).
compression_level being < 0 equals compression_level 8 (the previous value). The higher this is, the better the compression should be (though it will use more memory).

These new parameters are not (yet) exposed for the higher-level API functions, and the documented API does not change as of this commit.
For what it's worth, encoding a 1920x1080 image  with force_filter=0 is about 45% faster than force_filter=-1 on my particular machine.",True,{}
nothings/stb,https://github.com/nothings/stb,488,2017-08-07T12:07:30Z,2018-01-29T16:22:41Z,2018-01-29T16:22:41Z,MERGED,True,70,38,1,https://github.com/akx,stb_image_write: allow forcing PNG filter and compression,1,[],https://github.com/nothings/stb/pull/488,https://github.com/akx,2,https://github.com/nothings/stb/pull/488#issuecomment-320646792,"This adds a new stbi_write_png_to_mem_ex function with two new parameters:

force_filter being < 0 means the original behavior (i.e. figure out the best-performing filter per scanline); any other values 0 <= x <= 4 correspond to PNG filters (0 = none, 1 = sub, 2 = up, 3 = average, 4 = Paeth).
compression_level being < 0 equals compression_level 8 (the previous value). The higher this is, the better the compression should be (though it will use more memory).

These new parameters are not (yet) exposed for the higher-level API functions, and the documented API does not change as of this commit.
For what it's worth, encoding a 1920x1080 image  with force_filter=0 is about 45% faster than force_filter=-1 on my particular machine.","Oh, and there's one TODO in the code:

TODO: What's the upper limit for compression_level?

I couldn't divine the semantics of the quality parameter for stbi_zlib_compress...",True,{}
nothings/stb,https://github.com/nothings/stb,488,2017-08-07T12:07:30Z,2018-01-29T16:22:41Z,2018-01-29T16:22:41Z,MERGED,True,70,38,1,https://github.com/akx,stb_image_write: allow forcing PNG filter and compression,1,[],https://github.com/nothings/stb/pull/488,https://github.com/nothings,3,https://github.com/nothings/stb/pull/488#issuecomment-361214052,"This adds a new stbi_write_png_to_mem_ex function with two new parameters:

force_filter being < 0 means the original behavior (i.e. figure out the best-performing filter per scanline); any other values 0 <= x <= 4 correspond to PNG filters (0 = none, 1 = sub, 2 = up, 3 = average, 4 = Paeth).
compression_level being < 0 equals compression_level 8 (the previous value). The higher this is, the better the compression should be (though it will use more memory).

These new parameters are not (yet) exposed for the higher-level API functions, and the documented API does not change as of this commit.
For what it's worth, encoding a 1920x1080 image  with force_filter=0 is about 45% faster than force_filter=-1 on my particular machine.",I changed the API to this so it's through global variables so there's no new functions.,True,{'THUMBS_UP': ['https://github.com/akx']}
nothings/stb,https://github.com/nothings/stb,491,2017-08-10T23:20:30Z,2018-01-29T16:22:41Z,2018-01-29T16:22:42Z,MERGED,True,1,1,1,https://github.com/wojdyr,avoid GCC7 implicit-fallthrough warning,1,[],https://github.com/nothings/stb/pull/491,https://github.com/wojdyr,1,https://github.com/nothings/stb/pull/491,(GCC recognizes certain strings in comments),(GCC recognizes certain strings in comments),True,{}
nothings/stb,https://github.com/nothings/stb,495,2017-08-24T18:34:55Z,2018-02-11T19:58:14Z,2018-02-11T19:58:15Z,MERGED,True,238,3,1,https://github.com/danielmaciel,Add basic GPOS kerning,1,"['4 enhancement', '1 stb_truetype']",https://github.com/nothings/stb/pull/495,https://github.com/danielmaciel,1,https://github.com/nothings/stb/pull/495,"@nothings  @dougallj I have implemented a very simple 'stbtt_GetGlyphGPOSAdvance' function which retrieves GPOS-based kerning advances. It is far from complete (Horizontal latin stuff mostly), but it works for all the GPOS-based fonts I'm currently using plus a few others.
I have added some asserts which people might hit in case their fonts require a specific unimplemented format. Let me know if you hit one of those.
I have also not implemented any binary searching, so it is a little bit slow. I'm not sure how important it is to implement binary search there, I might experiment with it at some point maybe on this or next week?
Best regards,
Daniel","@nothings  @dougallj I have implemented a very simple 'stbtt_GetGlyphGPOSAdvance' function which retrieves GPOS-based kerning advances. It is far from complete (Horizontal latin stuff mostly), but it works for all the GPOS-based fonts I'm currently using plus a few others.
I have added some asserts which people might hit in case their fonts require a specific unimplemented format. Let me know if you hit one of those.
I have also not implemented any binary searching, so it is a little bit slow. I'm not sure how important it is to implement binary search there, I might experiment with it at some point maybe on this or next week?
Best regards,
Daniel",True,{}
nothings/stb,https://github.com/nothings/stb,495,2017-08-24T18:34:55Z,2018-02-11T19:58:14Z,2018-02-11T19:58:15Z,MERGED,True,238,3,1,https://github.com/danielmaciel,Add basic GPOS kerning,1,"['4 enhancement', '1 stb_truetype']",https://github.com/nothings/stb/pull/495,https://github.com/nothings,2,https://github.com/nothings/stb/pull/495#issuecomment-324722518,"@nothings  @dougallj I have implemented a very simple 'stbtt_GetGlyphGPOSAdvance' function which retrieves GPOS-based kerning advances. It is far from complete (Horizontal latin stuff mostly), but it works for all the GPOS-based fonts I'm currently using plus a few others.
I have added some asserts which people might hit in case their fonts require a specific unimplemented format. Let me know if you hit one of those.
I have also not implemented any binary searching, so it is a little bit slow. I'm not sure how important it is to implement binary search there, I might experiment with it at some point maybe on this or next week?
Best regards,
Daniel","Is GPOS kerning different from the user's point of view from the existing kerning, i.e. should this just be part of the existing function? (Regardless, it presumably shouldn't be couldn't GPOS because that implies people knowing about the file format.)",True,{}
nothings/stb,https://github.com/nothings/stb,495,2017-08-24T18:34:55Z,2018-02-11T19:58:14Z,2018-02-11T19:58:15Z,MERGED,True,238,3,1,https://github.com/danielmaciel,Add basic GPOS kerning,1,"['4 enhancement', '1 stb_truetype']",https://github.com/nothings/stb/pull/495,https://github.com/danielmaciel,3,https://github.com/nothings/stb/pull/495#issuecomment-324727257,"@nothings  @dougallj I have implemented a very simple 'stbtt_GetGlyphGPOSAdvance' function which retrieves GPOS-based kerning advances. It is far from complete (Horizontal latin stuff mostly), but it works for all the GPOS-based fonts I'm currently using plus a few others.
I have added some asserts which people might hit in case their fonts require a specific unimplemented format. Let me know if you hit one of those.
I have also not implemented any binary searching, so it is a little bit slow. I'm not sure how important it is to implement binary search there, I might experiment with it at some point maybe on this or next week?
Best regards,
Daniel","'GPOS' kerning is pretty much the same thing as 'kern' kerning. I assumed the 'KernAdvance' function related to the 'kern' info, so I created a 'GPOS' version of it. Want me to pack them together?",True,{}
nothings/stb,https://github.com/nothings/stb,495,2017-08-24T18:34:55Z,2018-02-11T19:58:14Z,2018-02-11T19:58:15Z,MERGED,True,238,3,1,https://github.com/danielmaciel,Add basic GPOS kerning,1,"['4 enhancement', '1 stb_truetype']",https://github.com/nothings/stb/pull/495,https://github.com/nothings,4,https://github.com/nothings/stb/pull/495#issuecomment-324728396,"@nothings  @dougallj I have implemented a very simple 'stbtt_GetGlyphGPOSAdvance' function which retrieves GPOS-based kerning advances. It is far from complete (Horizontal latin stuff mostly), but it works for all the GPOS-based fonts I'm currently using plus a few others.
I have added some asserts which people might hit in case their fonts require a specific unimplemented format. Let me know if you hit one of those.
I have also not implemented any binary searching, so it is a little bit slow. I'm not sure how important it is to implement binary search there, I might experiment with it at some point maybe on this or next week?
Best regards,
Daniel","Yeah, ""KernAdvance"" maybe should have been ""KerningAdvance"" to avoid that ambiguity, but too late to change now. So they should definitely be integrated so people using KernAdvance just automatically get support for it. If GPOS can also support vertical,  then at some point we'll probably need to add a new function that can support both, but there's no need to do it now if your patch doesn't do it.",True,{}
nothings/stb,https://github.com/nothings/stb,495,2017-08-24T18:34:55Z,2018-02-11T19:58:14Z,2018-02-11T19:58:15Z,MERGED,True,238,3,1,https://github.com/danielmaciel,Add basic GPOS kerning,1,"['4 enhancement', '1 stb_truetype']",https://github.com/nothings/stb/pull/495,https://github.com/danielmaciel,5,https://github.com/nothings/stb/pull/495#issuecomment-324728577,"@nothings  @dougallj I have implemented a very simple 'stbtt_GetGlyphGPOSAdvance' function which retrieves GPOS-based kerning advances. It is far from complete (Horizontal latin stuff mostly), but it works for all the GPOS-based fonts I'm currently using plus a few others.
I have added some asserts which people might hit in case their fonts require a specific unimplemented format. Let me know if you hit one of those.
I have also not implemented any binary searching, so it is a little bit slow. I'm not sure how important it is to implement binary search there, I might experiment with it at some point maybe on this or next week?
Best regards,
Daniel",Okay! Working on it.,True,{}
nothings/stb,https://github.com/nothings/stb,495,2017-08-24T18:34:55Z,2018-02-11T19:58:14Z,2018-02-11T19:58:15Z,MERGED,True,238,3,1,https://github.com/danielmaciel,Add basic GPOS kerning,1,"['4 enhancement', '1 stb_truetype']",https://github.com/nothings/stb/pull/495,https://github.com/danielmaciel,6,https://github.com/nothings/stb/pull/495#issuecomment-324736690,"@nothings  @dougallj I have implemented a very simple 'stbtt_GetGlyphGPOSAdvance' function which retrieves GPOS-based kerning advances. It is far from complete (Horizontal latin stuff mostly), but it works for all the GPOS-based fonts I'm currently using plus a few others.
I have added some asserts which people might hit in case their fonts require a specific unimplemented format. Let me know if you hit one of those.
I have also not implemented any binary searching, so it is a little bit slow. I'm not sure how important it is to implement binary search there, I might experiment with it at some point maybe on this or next week?
Best regards,
Daniel","@nothings I'm done!
About the vertical stuff: I have not implemented it. Might do someday if needed.
I might also implement some GSUB (ligature and contextual) things at some point - will send you a pull request if I do.",True,{}
nothings/stb,https://github.com/nothings/stb,495,2017-08-24T18:34:55Z,2018-02-11T19:58:14Z,2018-02-11T19:58:15Z,MERGED,True,238,3,1,https://github.com/danielmaciel,Add basic GPOS kerning,1,"['4 enhancement', '1 stb_truetype']",https://github.com/nothings/stb/pull/495,https://github.com/danielmaciel,7,https://github.com/nothings/stb/pull/495#issuecomment-324739609,"@nothings  @dougallj I have implemented a very simple 'stbtt_GetGlyphGPOSAdvance' function which retrieves GPOS-based kerning advances. It is far from complete (Horizontal latin stuff mostly), but it works for all the GPOS-based fonts I'm currently using plus a few others.
I have added some asserts which people might hit in case their fonts require a specific unimplemented format. Let me know if you hit one of those.
I have also not implemented any binary searching, so it is a little bit slow. I'm not sure how important it is to implement binary search there, I might experiment with it at some point maybe on this or next week?
Best regards,
Daniel","I have also made the asserts on 'not implemented yet' formats disabled by default since it might annoy people.
One can still enable them by changing the define for STBTT_GPOS_TODO_assert(x) if wanted.",True,{}
nothings/stb,https://github.com/nothings/stb,495,2017-08-24T18:34:55Z,2018-02-11T19:58:14Z,2018-02-11T19:58:15Z,MERGED,True,238,3,1,https://github.com/danielmaciel,Add basic GPOS kerning,1,"['4 enhancement', '1 stb_truetype']",https://github.com/nothings/stb/pull/495,https://github.com/nothings,8,https://github.com/nothings/stb/pull/495#issuecomment-324740965,"@nothings  @dougallj I have implemented a very simple 'stbtt_GetGlyphGPOSAdvance' function which retrieves GPOS-based kerning advances. It is far from complete (Horizontal latin stuff mostly), but it works for all the GPOS-based fonts I'm currently using plus a few others.
I have added some asserts which people might hit in case their fonts require a specific unimplemented format. Let me know if you hit one of those.
I have also not implemented any binary searching, so it is a little bit slow. I'm not sure how important it is to implement binary search there, I might experiment with it at some point maybe on this or next week?
Best regards,
Daniel","Also, yeah, binary search is probably worth doing, since pretty much every other table accessed multiple times is binary searched. Otherwise if there's a large table, querying all the data in the table takes O(N^2) time.",True,{}
nothings/stb,https://github.com/nothings/stb,495,2017-08-24T18:34:55Z,2018-02-11T19:58:14Z,2018-02-11T19:58:15Z,MERGED,True,238,3,1,https://github.com/danielmaciel,Add basic GPOS kerning,1,"['4 enhancement', '1 stb_truetype']",https://github.com/nothings/stb/pull/495,https://github.com/danielmaciel,9,https://github.com/nothings/stb/pull/495#issuecomment-324741463,"@nothings  @dougallj I have implemented a very simple 'stbtt_GetGlyphGPOSAdvance' function which retrieves GPOS-based kerning advances. It is far from complete (Horizontal latin stuff mostly), but it works for all the GPOS-based fonts I'm currently using plus a few others.
I have added some asserts which people might hit in case their fonts require a specific unimplemented format. Let me know if you hit one of those.
I have also not implemented any binary searching, so it is a little bit slow. I'm not sure how important it is to implement binary search there, I might experiment with it at some point maybe on this or next week?
Best regards,
Daniel","Okay! Gonna work on binary searches later today, will ping when done.",True,{}
nothings/stb,https://github.com/nothings/stb,495,2017-08-24T18:34:55Z,2018-02-11T19:58:14Z,2018-02-11T19:58:15Z,MERGED,True,238,3,1,https://github.com/danielmaciel,Add basic GPOS kerning,1,"['4 enhancement', '1 stb_truetype']",https://github.com/nothings/stb/pull/495,https://github.com/nothings,10,https://github.com/nothings/stb/pull/495#issuecomment-324747704,"@nothings  @dougallj I have implemented a very simple 'stbtt_GetGlyphGPOSAdvance' function which retrieves GPOS-based kerning advances. It is far from complete (Horizontal latin stuff mostly), but it works for all the GPOS-based fonts I'm currently using plus a few others.
I have added some asserts which people might hit in case their fonts require a specific unimplemented format. Let me know if you hit one of those.
I have also not implemented any binary searching, so it is a little bit slow. I'm not sure how important it is to implement binary search there, I might experiment with it at some point maybe on this or next week?
Best regards,
Daniel","There's no hurry, it'll probably be a while before I integrate it.",True,{}
nothings/stb,https://github.com/nothings/stb,495,2017-08-24T18:34:55Z,2018-02-11T19:58:14Z,2018-02-11T19:58:15Z,MERGED,True,238,3,1,https://github.com/danielmaciel,Add basic GPOS kerning,1,"['4 enhancement', '1 stb_truetype']",https://github.com/nothings/stb/pull/495,https://github.com/danielmaciel,11,https://github.com/nothings/stb/pull/495#issuecomment-324750825,"@nothings  @dougallj I have implemented a very simple 'stbtt_GetGlyphGPOSAdvance' function which retrieves GPOS-based kerning advances. It is far from complete (Horizontal latin stuff mostly), but it works for all the GPOS-based fonts I'm currently using plus a few others.
I have added some asserts which people might hit in case their fonts require a specific unimplemented format. Let me know if you hit one of those.
I have also not implemented any binary searching, so it is a little bit slow. I'm not sure how important it is to implement binary search there, I might experiment with it at some point maybe on this or next week?
Best regards,
Daniel",Done with them binary searches. You were right - it is about 2x faster now on my scenarios.,True,{}
nothings/stb,https://github.com/nothings/stb,495,2017-08-24T18:34:55Z,2018-02-11T19:58:14Z,2018-02-11T19:58:15Z,MERGED,True,238,3,1,https://github.com/danielmaciel,Add basic GPOS kerning,1,"['4 enhancement', '1 stb_truetype']",https://github.com/nothings/stb/pull/495,https://github.com/danielmaciel,12,https://github.com/nothings/stb/pull/495#issuecomment-324764652,"@nothings  @dougallj I have implemented a very simple 'stbtt_GetGlyphGPOSAdvance' function which retrieves GPOS-based kerning advances. It is far from complete (Horizontal latin stuff mostly), but it works for all the GPOS-based fonts I'm currently using plus a few others.
I have added some asserts which people might hit in case their fonts require a specific unimplemented format. Let me know if you hit one of those.
I have also not implemented any binary searching, so it is a little bit slow. I'm not sure how important it is to implement binary search there, I might experiment with it at some point maybe on this or next week?
Best regards,
Daniel",Just fixed a bug on a specific format (posFormat 1) while testing more fonts,True,{}
nothings/stb,https://github.com/nothings/stb,495,2017-08-24T18:34:55Z,2018-02-11T19:58:14Z,2018-02-11T19:58:15Z,MERGED,True,238,3,1,https://github.com/danielmaciel,Add basic GPOS kerning,1,"['4 enhancement', '1 stb_truetype']",https://github.com/nothings/stb/pull/495,https://github.com/danielmaciel,13,https://github.com/nothings/stb/pull/495#issuecomment-325094755,"@nothings  @dougallj I have implemented a very simple 'stbtt_GetGlyphGPOSAdvance' function which retrieves GPOS-based kerning advances. It is far from complete (Horizontal latin stuff mostly), but it works for all the GPOS-based fonts I'm currently using plus a few others.
I have added some asserts which people might hit in case their fonts require a specific unimplemented format. Let me know if you hit one of those.
I have also not implemented any binary searching, so it is a little bit slow. I'm not sure how important it is to implement binary search there, I might experiment with it at some point maybe on this or next week?
Best regards,
Daniel","I have noticed an off-by-one error on my binsearches. Sorry about that. Unfortunately I have no access to a dev machine atm, can't fix them before Monday. Will ping you when I do.",True,{}
nothings/stb,https://github.com/nothings/stb,495,2017-08-24T18:34:55Z,2018-02-11T19:58:14Z,2018-02-11T19:58:15Z,MERGED,True,238,3,1,https://github.com/danielmaciel,Add basic GPOS kerning,1,"['4 enhancement', '1 stb_truetype']",https://github.com/nothings/stb/pull/495,https://github.com/danielmaciel,14,https://github.com/nothings/stb/pull/495#issuecomment-325702837,"@nothings  @dougallj I have implemented a very simple 'stbtt_GetGlyphGPOSAdvance' function which retrieves GPOS-based kerning advances. It is far from complete (Horizontal latin stuff mostly), but it works for all the GPOS-based fonts I'm currently using plus a few others.
I have added some asserts which people might hit in case their fonts require a specific unimplemented format. Let me know if you hit one of those.
I have also not implemented any binary searching, so it is a little bit slow. I'm not sure how important it is to implement binary search there, I might experiment with it at some point maybe on this or next week?
Best regards,
Daniel","Sorry, forgot to ping. Fixed the off-by-one stuff yesterday. Cheers.",True,{}
nothings/stb,https://github.com/nothings/stb,495,2017-08-24T18:34:55Z,2018-02-11T19:58:14Z,2018-02-11T19:58:15Z,MERGED,True,238,3,1,https://github.com/danielmaciel,Add basic GPOS kerning,1,"['4 enhancement', '1 stb_truetype']",https://github.com/nothings/stb/pull/495,https://github.com/danielmaciel,15,https://github.com/nothings/stb/pull/495#issuecomment-361454795,"@nothings  @dougallj I have implemented a very simple 'stbtt_GetGlyphGPOSAdvance' function which retrieves GPOS-based kerning advances. It is far from complete (Horizontal latin stuff mostly), but it works for all the GPOS-based fonts I'm currently using plus a few others.
I have added some asserts which people might hit in case their fonts require a specific unimplemented format. Let me know if you hit one of those.
I have also not implemented any binary searching, so it is a little bit slow. I'm not sure how important it is to implement binary search there, I might experiment with it at some point maybe on this or next week?
Best regards,
Daniel",Rebased to your stbtt current.,True,{'THUMBS_UP': ['https://github.com/nothings']}
nothings/stb,https://github.com/nothings/stb,496,2017-08-25T17:26:04Z,2018-01-29T16:22:42Z,2018-01-29T16:22:42Z,MERGED,True,37,35,1,https://github.com/croepha,Fix compile errors on clang++,2,[],https://github.com/nothings/stb/pull/496,https://github.com/croepha,1,https://github.com/nothings/stb/pull/496,"Someone should double check that that I didn't change
the behavior of any of the code.  I'm not using most (if any)
of the code I touched, just wanted it to compile...","Someone should double check that that I didn't change
the behavior of any of the code.  I'm not using most (if any)
of the code I touched, just wanted it to compile...",True,{}
nothings/stb,https://github.com/nothings/stb,498,2017-08-29T06:15:45Z,2018-01-29T16:22:42Z,2018-01-29T17:48:06Z,MERGED,True,1,1,1,https://github.com/twoscomplement,Remove argument from STBD_MEMSET macro,1,"['2 bug', 'stb_dxt']",https://github.com/nothings/stb/pull/498,https://github.com/twoscomplement,1,https://github.com/nothings/stb/pull/498,"My clang doesn't like the macro defined this way, choking at the callsite on line 195 with ""too many arguments provided to function-like macro invocation""
This change matches what is done for STBTT_memset in stb_truetype.h","My clang doesn't like the macro defined this way, choking at the callsite on line 195 with ""too many arguments provided to function-like macro invocation""
This change matches what is done for STBTT_memset in stb_truetype.h",True,{}
nothings/stb,https://github.com/nothings/stb,499,2017-08-31T16:36:37Z,2018-01-29T16:22:42Z,2018-01-29T16:22:42Z,MERGED,True,11,11,1,https://github.com/lieff,place const tables to protected .rdata section,1,[],https://github.com/nothings/stb/pull/499,https://github.com/lieff,1,https://github.com/nothings/stb/pull/499,"It's better to use const qualifier for const tables, data placed to protected .rdata section and duplicates are removed.","It's better to use const qualifier for const tables, data placed to protected .rdata section and duplicates are removed.",True,{}
nothings/stb,https://github.com/nothings/stb,500,2017-08-31T23:10:48Z,2018-01-29T16:22:43Z,2018-01-29T16:22:43Z,MERGED,True,36,19,1,https://github.com/plzombie,stb_image: support for 1-bit BMP,1,[],https://github.com/nothings/stb/pull/500,https://github.com/plzombie,1,https://github.com/nothings/stb/pull/500,Add some code to load 1-bit BMP's,Add some code to load 1-bit BMP's,True,{}
nothings/stb,https://github.com/nothings/stb,502,2017-09-04T12:02:57Z,2018-01-29T16:22:43Z,2018-01-29T22:51:21Z,MERGED,True,5,1,1,https://github.com/darealshinji,Use stbi__mad4sizes_valid() only if STBI_NO_LINEAR or STBI_NO_HDR are defined,1,[],https://github.com/nothings/stb/pull/502,https://github.com/darealshinji,1,https://github.com/nothings/stb/pull/502,"Or else I get this:
stb_image.h:896:12: warning: ‘stbi__mad4sizes_valid’ defined but not used [-Wunused-function]
 static int stbi__mad4sizes_valid(int a, int b, int c, int d, int add)
            ^","Or else I get this:
stb_image.h:896:12: warning: ‘stbi__mad4sizes_valid’ defined but not used [-Wunused-function]
 static int stbi__mad4sizes_valid(int a, int b, int c, int d, int add)
            ^",True,{}
nothings/stb,https://github.com/nothings/stb,505,2017-09-19T03:33:47Z,2018-02-11T19:32:56Z,2018-02-11T19:32:56Z,CLOSED,False,22,0,1,https://github.com/crcunningham,Add a function to create a copy of a stretchy buffer,3,[],https://github.com/nothings/stb/pull/505,https://github.com/crcunningham,1,https://github.com/nothings/stb/pull/505,I needed a way to copy the buffer and didn't want to make assumptions in my code that uses the buffer about the size of the header.,I needed a way to copy the buffer and didn't want to make assumptions in my code that uses the buffer about the size of the header.,True,{}
nothings/stb,https://github.com/nothings/stb,505,2017-09-19T03:33:47Z,2018-02-11T19:32:56Z,2018-02-11T19:32:56Z,CLOSED,False,22,0,1,https://github.com/crcunningham,Add a function to create a copy of a stretchy buffer,3,[],https://github.com/nothings/stb/pull/505,https://github.com/nothings,2,https://github.com/nothings/stb/pull/505#issuecomment-330419901,I needed a way to copy the buffer and didn't want to make assumptions in my code that uses the buffer about the size of the header.,Probably this just be part of full revamp discussed in #35,True,{'THUMBS_UP': ['https://github.com/crcunningham']}
nothings/stb,https://github.com/nothings/stb,506,2017-09-21T03:28:25Z,2018-01-29T11:28:37Z,2018-01-29T11:33:04Z,CLOSED,False,2,2,1,https://github.com/alculquicondor,Fix implicit-fallthrough warning,1,[],https://github.com/nothings/stb/pull/506,https://github.com/alculquicondor,1,https://github.com/nothings/stb/pull/506,"This comment matches the required regex from GCC when -Wimplicit-fallthrough=3, which is the default with -Wextra.","This comment matches the required regex from GCC when -Wimplicit-fallthrough=3, which is the default with -Wextra.",True,{}
nothings/stb,https://github.com/nothings/stb,506,2017-09-21T03:28:25Z,2018-01-29T11:28:37Z,2018-01-29T11:33:04Z,CLOSED,False,2,2,1,https://github.com/alculquicondor,Fix implicit-fallthrough warning,1,[],https://github.com/nothings/stb/pull/506,https://github.com/nothings,2,https://github.com/nothings/stb/pull/506#issuecomment-361217601,"This comment matches the required regex from GCC when -Wimplicit-fallthrough=3, which is the default with -Wextra.",fixed this by hand rather than deal with the merge conflict i'd've gotten from the name in the credits list. in next release.,True,{}
nothings/stb,https://github.com/nothings/stb,506,2017-09-21T03:28:25Z,2018-01-29T11:28:37Z,2018-01-29T11:33:04Z,CLOSED,False,2,2,1,https://github.com/alculquicondor,Fix implicit-fallthrough warning,1,[],https://github.com/nothings/stb/pull/506,https://github.com/alculquicondor,3,https://github.com/nothings/stb/pull/506#issuecomment-361218513,"This comment matches the required regex from GCC when -Wimplicit-fallthrough=3, which is the default with -Wextra.",Thanks. No worries.,True,{}
nothings/stb,https://github.com/nothings/stb,511,2017-10-14T01:24:25Z,2018-01-29T16:22:43Z,2018-01-29T16:22:43Z,MERGED,True,5,7,1,https://github.com/dougallj,CFF/Type2 fixes,2,[],https://github.com/nothings/stb/pull/511,https://github.com/dougallj,1,https://github.com/nothings/stb/pull/511,Just a couple of long overdue fixes. Sorry about that.,Just a couple of long overdue fixes. Sorry about that.,True,"{'THUMBS_UP': ['https://github.com/metafloor', 'https://github.com/danielmaciel']}"
nothings/stb,https://github.com/nothings/stb,513,2017-10-16T17:32:45Z,2018-01-29T16:22:44Z,2018-01-29T16:22:44Z,MERGED,True,4,4,2,https://github.com/alculquicondor,Fix tests compilation,1,"['1 stb library w/no tag', '2 warning']",https://github.com/nothings/stb/pull/513,https://github.com/alculquicondor,1,https://github.com/nothings/stb/pull/513,I have another PR which already adds me to contributors.,I have another PR which already adds me to contributors.,True,{}
nothings/stb,https://github.com/nothings/stb,517,2017-11-04T08:41:52Z,2018-01-29T16:22:44Z,2018-01-29T16:22:44Z,MERGED,True,19,5,2,https://github.com/kphillisjr,stb_truetype.h: Fixes,2,[],https://github.com/nothings/stb/pull/517,https://github.com/kphillisjr,1,https://github.com/nothings/stb/pull/517,"This is fixes for the stb_truetype header and tests.

stb_truetype.h - Fix missing function as per bug report #516.
tests/test_truetype.c: Fix Compiler error on MSVC 2015 or newer.
tests/test_truetype.c: Fix compiler warning about unsigned/signed conversion.
tests/test_truetype.c: Fix the png writer.","This is fixes for the stb_truetype header and tests.

stb_truetype.h - Fix missing function as per bug report #516.
tests/test_truetype.c: Fix Compiler error on MSVC 2015 or newer.
tests/test_truetype.c: Fix compiler warning about unsigned/signed conversion.
tests/test_truetype.c: Fix the png writer.",True,{}
nothings/stb,https://github.com/nothings/stb,521,2017-11-24T13:43:15Z,2018-01-29T16:22:44Z,2018-01-29T16:22:44Z,MERGED,True,97,3,1,https://github.com/anael-seghezzi,stbi_is_16,3,[],https://github.com/nothings/stb/pull/521,https://github.com/anael-seghezzi,1,https://github.com/nothings/stb/pull/521,"To test for 16 bit images.
I also modified stbi__psd_info to not return 0 in case of 16 bit (to be consistent with stbi__psd_load).","To test for 16 bit images.
I also modified stbi__psd_info to not return 0 in case of 16 bit (to be consistent with stbi__psd_load).",True,{}
nothings/stb,https://github.com/nothings/stb,522,2017-11-25T09:27:27Z,2018-01-29T16:22:44Z,2018-01-29T16:22:44Z,MERGED,True,1,1,1,https://github.com/jlnr,Avoid warning about unused stbi__float_postprocess,1,[],https://github.com/nothings/stb/pull/522,https://github.com/jlnr,1,https://github.com/nothings/stb/pull/522,"This is similar in spirit to #502
stbi__float_postprocess is only used when both STBI_NO_HDR and STBI_NO_LINEAR are undefined. If I compile stb_image with only STBI_NO_LINEAR but without STBI_NO_HDR, Xcode (8/9) complains about the now-unused function.","This is similar in spirit to #502
stbi__float_postprocess is only used when both STBI_NO_HDR and STBI_NO_LINEAR are undefined. If I compile stb_image with only STBI_NO_LINEAR but without STBI_NO_HDR, Xcode (8/9) complains about the now-unused function.",True,{}
nothings/stb,https://github.com/nothings/stb,524,2017-11-26T02:00:59Z,2019-03-05T06:57:14Z,2019-03-05T06:57:14Z,CLOSED,False,15,12,1,https://github.com/stolk,Fix warning on unused stbi__sse2_available when skipping JPEG support.,1,"['1 stb_image', '2 warning', '4 need data']",https://github.com/nothings/stb/pull/524,https://github.com/stolk,1,https://github.com/nothings/stb/pull/524,"If you use stb_image.h without the JPEG support, then the compiler will warn:
/home/bram/src/stb/stb_image.h:651:12: warning: unused function 'stbi__sse2_available'
      [-Wunused-function]
static int stbi__sse2_available(void)

This function is only needed if you use the JPEG support.","If you use stb_image.h without the JPEG support, then the compiler will warn:
/home/bram/src/stb/stb_image.h:651:12: warning: unused function 'stbi__sse2_available'
      [-Wunused-function]
static int stbi__sse2_available(void)

This function is only needed if you use the JPEG support.",True,{}
nothings/stb,https://github.com/nothings/stb,524,2017-11-26T02:00:59Z,2019-03-05T06:57:14Z,2019-03-05T06:57:14Z,CLOSED,False,15,12,1,https://github.com/stolk,Fix warning on unused stbi__sse2_available when skipping JPEG support.,1,"['1 stb_image', '2 warning', '4 need data']",https://github.com/nothings/stb/pull/524,https://github.com/nothings,2,https://github.com/nothings/stb/pull/524#issuecomment-361221612,"If you use stb_image.h without the JPEG support, then the compiler will warn:
/home/bram/src/stb/stb_image.h:651:12: warning: unused function 'stbi__sse2_available'
      [-Wunused-function]
static int stbi__sse2_available(void)

This function is only needed if you use the JPEG support.",Check the 'files changed' tab here--most of the changes are whitespace insertion between '#' and 'define' and similar. Can you please remove those changes so I can see the meaningful changes more easily?,True,{'THUMBS_UP': ['https://github.com/technosaurus']}
nothings/stb,https://github.com/nothings/stb,524,2017-11-26T02:00:59Z,2019-03-05T06:57:14Z,2019-03-05T06:57:14Z,CLOSED,False,15,12,1,https://github.com/stolk,Fix warning on unused stbi__sse2_available when skipping JPEG support.,1,"['1 stb_image', '2 warning', '4 need data']",https://github.com/nothings/stb/pull/524,https://github.com/technosaurus,3,https://github.com/nothings/stb/pull/524#issuecomment-384104324,"If you use stb_image.h without the JPEG support, then the compiler will warn:
/home/bram/src/stb/stb_image.h:651:12: warning: unused function 'stbi__sse2_available'
      [-Wunused-function]
static int stbi__sse2_available(void)

This function is only needed if you use the JPEG support.","It just wraps stbi__sse2_available functions in #ifndef STBI_NO_JPEG, but this happened when sse2 was removed for gcc, so it is a stopgap.",True,{}
nothings/stb,https://github.com/nothings/stb,524,2017-11-26T02:00:59Z,2019-03-05T06:57:14Z,2019-03-05T06:57:14Z,CLOSED,False,15,12,1,https://github.com/stolk,Fix warning on unused stbi__sse2_available when skipping JPEG support.,1,"['1 stb_image', '2 warning', '4 need data']",https://github.com/nothings/stb/pull/524,https://github.com/nothings,4,https://github.com/nothings/stb/pull/524#issuecomment-469563027,"If you use stb_image.h without the JPEG support, then the compiler will warn:
/home/bram/src/stb/stb_image.h:651:12: warning: unused function 'stbi__sse2_available'
      [-Wunused-function]
static int stbi__sse2_available(void)

This function is only needed if you use the JPEG support.",Looks to me like this bug was fixed independently.,True,{}
nothings/stb,https://github.com/nothings/stb,526,2017-11-28T05:40:33Z,2018-01-29T16:22:45Z,2018-01-29T16:22:45Z,MERGED,True,218,80,1,https://github.com/tocchan,Feature/gif frames,4,[],https://github.com/nothings/stb/pull/526,https://github.com/tocchan,1,https://github.com/nothings/stb/pull/526,"Loads all frames of a gif in a format well suited for Texture2DArray's.  Also can pull frames delays.

Only have a version for loading from memory, but can add a file version if desired.
Only tested with VS2017, but tried to keep to the standard of surrounding code, so... fingers crossed?
No idea if this is a feature desired by stb_image, but had students asking for it, so figure, hey, at least now it is public and I can point them at this fork, and maybe it can be useful for others.

Thanks for the great library!","Loads all frames of a gif in a format well suited for Texture2DArray's.  Also can pull frames delays.

Only have a version for loading from memory, but can add a file version if desired.
Only tested with VS2017, but tried to keep to the standard of surrounding code, so... fingers crossed?
No idea if this is a feature desired by stb_image, but had students asking for it, so figure, hey, at least now it is public and I can point them at this fork, and maybe it can be useful for others.

Thanks for the great library!",True,{'THUMBS_UP': ['https://github.com/OvermindDL1']}
nothings/stb,https://github.com/nothings/stb,527,2017-12-07T15:32:28Z,2018-01-29T16:22:45Z,2018-01-29T16:22:45Z,MERGED,True,1,1,1,https://github.com/wojdyr,remove duplicated `pr = 0`,1,[],https://github.com/nothings/stb/pull/527,https://github.com/wojdyr,1,https://github.com/nothings/stb/pull/527,"avoid warning:

Variable 'pr' is reassigned a value before the old one has been used

caused by:
fw = pr = fl = 0;
...
pr = 0;","avoid warning:

Variable 'pr' is reassigned a value before the old one has been used

caused by:
fw = pr = fl = 0;
...
pr = 0;",True,{}
nothings/stb,https://github.com/nothings/stb,528,2017-12-13T03:34:10Z,2017-12-15T16:16:16Z,2017-12-15T16:16:16Z,CLOSED,False,175,0,1,https://github.com/zmatsuo,Add test/CMakeLists.txt,1,[],https://github.com/nothings/stb/pull/528,https://github.com/zmatsuo,1,https://github.com/nothings/stb/pull/528,"I use Visual Stduio 2017. I try to read/convert dsp/dsw file, but I can't.
So I create CMakeLists.txt based on original dsp/dsw files for create solution and project files.
Some errors occur at compile time.
I will investigate errors by VS2017 or not.","I use Visual Stduio 2017. I try to read/convert dsp/dsw file, but I can't.
So I create CMakeLists.txt based on original dsp/dsw files for create solution and project files.
Some errors occur at compile time.
I will investigate errors by VS2017 or not.",True,{}
nothings/stb,https://github.com/nothings/stb,528,2017-12-13T03:34:10Z,2017-12-15T16:16:16Z,2017-12-15T16:16:16Z,CLOSED,False,175,0,1,https://github.com/zmatsuo,Add test/CMakeLists.txt,1,[],https://github.com/nothings/stb/pull/528,https://github.com/zmatsuo,2,https://github.com/nothings/stb/pull/528#issuecomment-352046103,"I use Visual Stduio 2017. I try to read/convert dsp/dsw file, but I can't.
So I create CMakeLists.txt based on original dsp/dsw files for create solution and project files.
Some errors occur at compile time.
I will investigate errors by VS2017 or not.",marged #529,True,{}
nothings/stb,https://github.com/nothings/stb,529,2017-12-13T03:43:43Z,2018-02-06T03:50:43Z,2018-02-06T03:50:43Z,CLOSED,False,471,55,5,https://github.com/zmatsuo,Add functions with wchar_t to stb_image.h and stb_image_write.h,5,[],https://github.com/nothings/stb/pull/529,https://github.com/zmatsuo,1,https://github.com/nothings/stb/pull/529,"wfopen (UNICODE,wchar_t) version will use UNICODE version (CreateW) API.

CJK support
In CJK environment wchar_t support is important.
ex. (CP932)
""C:\Documents and Settings\佐藤\デスクトップ\可能性の表.txt""
hex dump

00000000: 433a 5c44 6f63 756d 656e 7473 2061 6e64  C:\Documents and
00000010: 2053 6574 7469 6e67 735c 8db2 93a1 5c83   Settings\....\.
00000020: 6683 5883 4e83 6783 6283 765c 89c2 945c  f.X.N.g.b.v\...\
00000030: 90ab 82cc 955c 2e74 7874                 .....\.txt

filename includes path separator charactor('\'). it's dangerous.


UNC
""\server\share..""
""\server@SSL\path..""


MAX_PATH limit
MAX_PATH -> 32767


see
https://msdn.microsoft.com/ja-jp/library/windows/desktop/aa365247(v=vs.85).aspx","wfopen (UNICODE,wchar_t) version will use UNICODE version (CreateW) API.

CJK support
In CJK environment wchar_t support is important.
ex. (CP932)
""C:\Documents and Settings\佐藤\デスクトップ\可能性の表.txt""
hex dump

00000000: 433a 5c44 6f63 756d 656e 7473 2061 6e64  C:\Documents and
00000010: 2053 6574 7469 6e67 735c 8db2 93a1 5c83   Settings\....\.
00000020: 6683 5883 4e83 6783 6283 765c 89c2 945c  f.X.N.g.b.v\...\
00000030: 90ab 82cc 955c 2e74 7874                 .....\.txt

filename includes path separator charactor('\'). it's dangerous.


UNC
""\server\share..""
""\server@SSL\path..""


MAX_PATH limit
MAX_PATH -> 32767


see
https://msdn.microsoft.com/ja-jp/library/windows/desktop/aa365247(v=vs.85).aspx",True,{}
nothings/stb,https://github.com/nothings/stb,529,2017-12-13T03:43:43Z,2018-02-06T03:50:43Z,2018-02-06T03:50:43Z,CLOSED,False,471,55,5,https://github.com/zmatsuo,Add functions with wchar_t to stb_image.h and stb_image_write.h,5,[],https://github.com/nothings/stb/pull/529,https://github.com/rygorous,2,https://github.com/nothings/stb/pull/529#issuecomment-351429469,"wfopen (UNICODE,wchar_t) version will use UNICODE version (CreateW) API.

CJK support
In CJK environment wchar_t support is important.
ex. (CP932)
""C:\Documents and Settings\佐藤\デスクトップ\可能性の表.txt""
hex dump

00000000: 433a 5c44 6f63 756d 656e 7473 2061 6e64  C:\Documents and
00000010: 2053 6574 7469 6e67 735c 8db2 93a1 5c83   Settings\....\.
00000020: 6683 5883 4e83 6783 6283 765c 89c2 945c  f.X.N.g.b.v\...\
00000030: 90ab 82cc 955c 2e74 7874                 .....\.txt

filename includes path separator charactor('\'). it's dangerous.


UNC
""\server\share..""
""\server@SSL\path..""


MAX_PATH limit
MAX_PATH -> 32767


see
https://msdn.microsoft.com/ja-jp/library/windows/desktop/aa365247(v=vs.85).aspx","Unicode support in filenames is a valid request, but I'm quite strongly opposed to stacking yet another 2x factor on top of the combinatorial explosion of functions we have. There's already too many of them.
At this point, on pretty much every other platform except Windows, regular fopen just takes UTF-8 file names. I would much prefer for us to do that on Windows as well, have the functions to keep their existing signatures and add a STBI_UTF8 (or similar name) #define that, on Windows, makes the fopen calls go through a wrapper that converts the passed-in file name from UTF8 to UTF16 and calls _wfopen. (We want to keep the existing path that keeps using code pages as the default for backwards compatibility.)",True,{'THUMBS_UP': ['https://github.com/usagi']}
nothings/stb,https://github.com/nothings/stb,529,2017-12-13T03:43:43Z,2018-02-06T03:50:43Z,2018-02-06T03:50:43Z,CLOSED,False,471,55,5,https://github.com/zmatsuo,Add functions with wchar_t to stb_image.h and stb_image_write.h,5,[],https://github.com/nothings/stb/pull/529,https://github.com/nothings,3,https://github.com/nothings/stb/pull/529#issuecomment-351500317,"wfopen (UNICODE,wchar_t) version will use UNICODE version (CreateW) API.

CJK support
In CJK environment wchar_t support is important.
ex. (CP932)
""C:\Documents and Settings\佐藤\デスクトップ\可能性の表.txt""
hex dump

00000000: 433a 5c44 6f63 756d 656e 7473 2061 6e64  C:\Documents and
00000010: 2053 6574 7469 6e67 735c 8db2 93a1 5c83   Settings\....\.
00000020: 6683 5883 4e83 6783 6283 765c 89c2 945c  f.X.N.g.b.v\...\
00000030: 90ab 82cc 955c 2e74 7874                 .....\.txt

filename includes path separator charactor('\'). it's dangerous.


UNC
""\server\share..""
""\server@SSL\path..""


MAX_PATH limit
MAX_PATH -> 32767


see
https://msdn.microsoft.com/ja-jp/library/windows/desktop/aa365247(v=vs.85).aspx",Concur.,True,{}
nothings/stb,https://github.com/nothings/stb,529,2017-12-13T03:43:43Z,2018-02-06T03:50:43Z,2018-02-06T03:50:43Z,CLOSED,False,471,55,5,https://github.com/zmatsuo,Add functions with wchar_t to stb_image.h and stb_image_write.h,5,[],https://github.com/nothings/stb/pull/529,https://github.com/zmatsuo,4,https://github.com/nothings/stb/pull/529#issuecomment-352049180,"wfopen (UNICODE,wchar_t) version will use UNICODE version (CreateW) API.

CJK support
In CJK environment wchar_t support is important.
ex. (CP932)
""C:\Documents and Settings\佐藤\デスクトップ\可能性の表.txt""
hex dump

00000000: 433a 5c44 6f63 756d 656e 7473 2061 6e64  C:\Documents and
00000010: 2053 6574 7469 6e67 735c 8db2 93a1 5c83   Settings\....\.
00000020: 6683 5883 4e83 6783 6283 765c 89c2 945c  f.X.N.g.b.v\...\
00000030: 90ab 82cc 955c 2e74 7874                 .....\.txt

filename includes path separator charactor('\'). it's dangerous.


UNC
""\server\share..""
""\server@SSL\path..""


MAX_PATH limit
MAX_PATH -> 32767


see
https://msdn.microsoft.com/ja-jp/library/windows/desktop/aa365247(v=vs.85).aspx","I remove wchar_t filename fnctions from stb_image.h and stb_image_write.h.
I modify stbi_write_XXX_to_file() in stb_image_write.h .
stbi_write_XXX_to_file() works similarly to stbi_XXXX_from_file().
We can use fopen variations(utf8,acp,utf16 filename..) through these function.
And I add test/image_test_wchar.c.
This file is test code for stbi_write_XXX_to_file() and stbi_XXXX_from_file(),
And This file is fopen variation sample.",True,{}
nothings/stb,https://github.com/nothings/stb,529,2017-12-13T03:43:43Z,2018-02-06T03:50:43Z,2018-02-06T03:50:43Z,CLOSED,False,471,55,5,https://github.com/zmatsuo,Add functions with wchar_t to stb_image.h and stb_image_write.h,5,[],https://github.com/nothings/stb/pull/529,https://github.com/nothings,5,https://github.com/nothings/stb/pull/529#issuecomment-361223070,"wfopen (UNICODE,wchar_t) version will use UNICODE version (CreateW) API.

CJK support
In CJK environment wchar_t support is important.
ex. (CP932)
""C:\Documents and Settings\佐藤\デスクトップ\可能性の表.txt""
hex dump

00000000: 433a 5c44 6f63 756d 656e 7473 2061 6e64  C:\Documents and
00000010: 2053 6574 7469 6e67 735c 8db2 93a1 5c83   Settings\....\.
00000020: 6683 5883 4e83 6783 6283 765c 89c2 945c  f.X.N.g.b.v\...\
00000030: 90ab 82cc 955c 2e74 7874                 .....\.txt

filename includes path separator charactor('\'). it's dangerous.


UNC
""\server\share..""
""\server@SSL\path..""


MAX_PATH limit
MAX_PATH -> 32767


see
https://msdn.microsoft.com/ja-jp/library/windows/desktop/aa365247(v=vs.85).aspx",What is the purpose of the stbi__fopen_rb change in stb_image.h?,True,{}
nothings/stb,https://github.com/nothings/stb,529,2017-12-13T03:43:43Z,2018-02-06T03:50:43Z,2018-02-06T03:50:43Z,CLOSED,False,471,55,5,https://github.com/zmatsuo,Add functions with wchar_t to stb_image.h and stb_image_write.h,5,[],https://github.com/nothings/stb/pull/529,https://github.com/nothings,6,https://github.com/nothings/stb/pull/529#issuecomment-361223342,"wfopen (UNICODE,wchar_t) version will use UNICODE version (CreateW) API.

CJK support
In CJK environment wchar_t support is important.
ex. (CP932)
""C:\Documents and Settings\佐藤\デスクトップ\可能性の表.txt""
hex dump

00000000: 433a 5c44 6f63 756d 656e 7473 2061 6e64  C:\Documents and
00000010: 2053 6574 7469 6e67 735c 8db2 93a1 5c83   Settings\....\.
00000020: 6683 5883 4e83 6783 6283 765c 89c2 945c  f.X.N.g.b.v\...\
00000030: 90ab 82cc 955c 2e74 7874                 .....\.txt

filename includes path separator charactor('\'). it's dangerous.


UNC
""\server\share..""
""\server@SSL\path..""


MAX_PATH limit
MAX_PATH -> 32767


see
https://msdn.microsoft.com/ja-jp/library/windows/desktop/aa365247(v=vs.85).aspx","Oh, I bet that was leftover because the wchar_t version of fopen takes wchar mode strings. So you presumably should just get rid of the stb_image.h changes entirely.",True,{}
nothings/stb,https://github.com/nothings/stb,529,2017-12-13T03:43:43Z,2018-02-06T03:50:43Z,2018-02-06T03:50:43Z,CLOSED,False,471,55,5,https://github.com/zmatsuo,Add functions with wchar_t to stb_image.h and stb_image_write.h,5,[],https://github.com/nothings/stb/pull/529,https://github.com/nothings,7,https://github.com/nothings/stb/pull/529#issuecomment-361223958,"wfopen (UNICODE,wchar_t) version will use UNICODE version (CreateW) API.

CJK support
In CJK environment wchar_t support is important.
ex. (CP932)
""C:\Documents and Settings\佐藤\デスクトップ\可能性の表.txt""
hex dump

00000000: 433a 5c44 6f63 756d 656e 7473 2061 6e64  C:\Documents and
00000010: 2053 6574 7469 6e67 735c 8db2 93a1 5c83   Settings\....\.
00000020: 6683 5883 4e83 6783 6283 765c 89c2 945c  f.X.N.g.b.v\...\
00000030: 90ab 82cc 955c 2e74 7874                 .....\.txt

filename includes path separator charactor('\'). it's dangerous.


UNC
""\server\share..""
""\server@SSL\path..""


MAX_PATH limit
MAX_PATH -> 32767


see
https://msdn.microsoft.com/ja-jp/library/windows/desktop/aa365247(v=vs.85).aspx","The _to_file approach isn't unreasonable, but I think the idea outlined by rygorous above is better since we avoid exploding the API functions. If we include a UTF8->UTF16 that works internally on windows, and also add a UTF16->UTF8 helper function so people on windows who already have a utf16 filename can use that helper, I think that would be pretty ideal.
Does that sound reasonable?",True,{}
nothings/stb,https://github.com/nothings/stb,529,2017-12-13T03:43:43Z,2018-02-06T03:50:43Z,2018-02-06T03:50:43Z,CLOSED,False,471,55,5,https://github.com/zmatsuo,Add functions with wchar_t to stb_image.h and stb_image_write.h,5,[],https://github.com/nothings/stb/pull/529,https://github.com/DanielGibson,8,https://github.com/nothings/stb/pull/529#issuecomment-361256954,"wfopen (UNICODE,wchar_t) version will use UNICODE version (CreateW) API.

CJK support
In CJK environment wchar_t support is important.
ex. (CP932)
""C:\Documents and Settings\佐藤\デスクトップ\可能性の表.txt""
hex dump

00000000: 433a 5c44 6f63 756d 656e 7473 2061 6e64  C:\Documents and
00000010: 2053 6574 7469 6e67 735c 8db2 93a1 5c83   Settings\....\.
00000020: 6683 5883 4e83 6783 6283 765c 89c2 945c  f.X.N.g.b.v\...\
00000030: 90ab 82cc 955c 2e74 7874                 .....\.txt

filename includes path separator charactor('\'). it's dangerous.


UNC
""\server\share..""
""\server@SSL\path..""


MAX_PATH limit
MAX_PATH -> 32767


see
https://msdn.microsoft.com/ja-jp/library/windows/desktop/aa365247(v=vs.85).aspx","See https://github.com/DanielGibson/Snippets/blob/filehandling/DG_filehandling.h#L445-L458 for an example for such a fopen-wrapper (yes, it's public domain code)
For UTF16->UTF8 conversion something like WideCharToMultiByte(CP_UTF8, 0, wCharString, -1, utf8outBuffer, utf8outBufferSize, NULL, NULL) can be used
WideCharToMultiByte() and MultiByteToWideChar() are in kernel32.dll, i.e. it should always be available and doesn't create a dependency on a CRT",True,{}
nothings/stb,https://github.com/nothings/stb,529,2017-12-13T03:43:43Z,2018-02-06T03:50:43Z,2018-02-06T03:50:43Z,CLOSED,False,471,55,5,https://github.com/zmatsuo,Add functions with wchar_t to stb_image.h and stb_image_write.h,5,[],https://github.com/nothings/stb/pull/529,https://github.com/zmatsuo,9,https://github.com/nothings/stb/pull/529#issuecomment-362327728,"wfopen (UNICODE,wchar_t) version will use UNICODE version (CreateW) API.

CJK support
In CJK environment wchar_t support is important.
ex. (CP932)
""C:\Documents and Settings\佐藤\デスクトップ\可能性の表.txt""
hex dump

00000000: 433a 5c44 6f63 756d 656e 7473 2061 6e64  C:\Documents and
00000010: 2053 6574 7469 6e67 735c 8db2 93a1 5c83   Settings\....\.
00000020: 6683 5883 4e83 6783 6283 765c 89c2 945c  f.X.N.g.b.v\...\
00000030: 90ab 82cc 955c 2e74 7874                 .....\.txt

filename includes path separator charactor('\'). it's dangerous.


UNC
""\server\share..""
""\server@SSL\path..""


MAX_PATH limit
MAX_PATH -> 32767


see
https://msdn.microsoft.com/ja-jp/library/windows/desktop/aa365247(v=vs.85).aspx","FILE *f = stbi__fopen(filename, ""rb"");  // 1
  FILE *f = stbi__fopen_rb(filename);     // 2

I think that compiler will create smaller code than 1.
All stbi_fopen() in stb_image.h has ""rb"".
It is a very very small improvement :-)",True,{}
nothings/stb,https://github.com/nothings/stb,529,2017-12-13T03:43:43Z,2018-02-06T03:50:43Z,2018-02-06T03:50:43Z,CLOSED,False,471,55,5,https://github.com/zmatsuo,Add functions with wchar_t to stb_image.h and stb_image_write.h,5,[],https://github.com/nothings/stb/pull/529,https://github.com/zmatsuo,10,https://github.com/nothings/stb/pull/529#issuecomment-362329040,"wfopen (UNICODE,wchar_t) version will use UNICODE version (CreateW) API.

CJK support
In CJK environment wchar_t support is important.
ex. (CP932)
""C:\Documents and Settings\佐藤\デスクトップ\可能性の表.txt""
hex dump

00000000: 433a 5c44 6f63 756d 656e 7473 2061 6e64  C:\Documents and
00000010: 2053 6574 7469 6e67 735c 8db2 93a1 5c83   Settings\....\.
00000020: 6683 5883 4e83 6783 6283 765c 89c2 945c  f.X.N.g.b.v\...\
00000030: 90ab 82cc 955c 2e74 7874                 .....\.txt

filename includes path separator charactor('\'). it's dangerous.


UNC
""\server\share..""
""\server@SSL\path..""


MAX_PATH limit
MAX_PATH -> 32767


see
https://msdn.microsoft.com/ja-jp/library/windows/desktop/aa365247(v=vs.85).aspx","UTF-16(wchar_t string)
|
| [helper function]
|
v
UTF-8 string
|
v
stbi_write_XXX()  (API require UTF-8 strings)

Now, stbi_write_XXX() APIs use fopen(). fopen() use ANSI codepage string on Windows (see https://en.wikipedia.org/wiki/Windows_code_page#ANSI_code_page and https://www.google.co.jp/search?q=getacp+windows ).
APIs which require ANSI codepage string filename parameter are necessary.
If APIs require UTF-8 string..
ANSI code page string(char string)
|
| [helper function]
|
v
UTF-8 string
|
v
stbi_write_XXX()  (API require UTF-8 strings)

It is not reasonable.
If we add APIs which require UTF-8 strings, thay are unnecessary in environment using UTF-8 string (linux etc).
When we add APIs which use wchar_t strings,
string conversion is unnecessary.
I think it is very reasonable.
stbi_write_XXX_to_file() API can be used like stbi_load_from_file() in stb_image.h. This api has no filename parameter. The user of the header can decide encoding of the file name and pass FILE *.
And we can also use to_file() and from_file() APIs to serialize multiple images (and data) into one data file.
ex. (pseudo code)
  FILE *fp = _wfopen(L""data.bin"", L""wb"");
  fwrite(..., fp);
  stbi_write_png_to_file(fp, ...);
  fwrite(..., fp);
  stbi_write_png_to_file(fp, ...);
  fwrite(..., fp);
  stbi_write_png_to_file(fp, ...);
  fclose(fp);

  FILE *fp = fopen(""data.bin"", ""rb"");
  fread(..., fp);
  stbi_load_from_file(fp, ...);
  fread(..., fp);
  stbi_load_from_file(fp, ...);
  fread(..., fp);
  stbi_load_from_file(fp, ...);
  fclose(fp);

If we can add the wchar_t string filename APIs, we can easily use it from Visual Studio. In Visual Studio, wchar_t is commonly used as a character string encoded by Unicode (UTF-16LE), and it can easily be written as L ""filename.txt"" in the source. There is no compatibility problem with both exeutable file and OS setting on Windows (https://www.google.co.jp/search?q=windows+control+panel+Region+language+non+unicode).
I agree that the number of APIs increases.
And I think that wchar_t string (and char string) filename APIs will become a small wrapper of stbi_write_XXX_to_fileto().",True,{}
nothings/stb,https://github.com/nothings/stb,529,2017-12-13T03:43:43Z,2018-02-06T03:50:43Z,2018-02-06T03:50:43Z,CLOSED,False,471,55,5,https://github.com/zmatsuo,Add functions with wchar_t to stb_image.h and stb_image_write.h,5,[],https://github.com/nothings/stb/pull/529,https://github.com/DanielGibson,11,https://github.com/nothings/stb/pull/529#issuecomment-362336511,"wfopen (UNICODE,wchar_t) version will use UNICODE version (CreateW) API.

CJK support
In CJK environment wchar_t support is important.
ex. (CP932)
""C:\Documents and Settings\佐藤\デスクトップ\可能性の表.txt""
hex dump

00000000: 433a 5c44 6f63 756d 656e 7473 2061 6e64  C:\Documents and
00000010: 2053 6574 7469 6e67 735c 8db2 93a1 5c83   Settings\....\.
00000020: 6683 5883 4e83 6783 6283 765c 89c2 945c  f.X.N.g.b.v\...\
00000030: 90ab 82cc 955c 2e74 7874                 .....\.txt

filename includes path separator charactor('\'). it's dangerous.


UNC
""\server\share..""
""\server@SSL\path..""


MAX_PATH limit
MAX_PATH -> 32767


see
https://msdn.microsoft.com/ja-jp/library/windows/desktop/aa365247(v=vs.85).aspx","If I understood correctly, what @rygorous  and @nothings are suggesting is:

The API remains as it is
On Windows, the const char* arguments should be handled as UTF-8, and converted to wchar_t which is then passed to _wfopen().

no change on other platforms, they should all support UTF-8 directly
even on Windows, this changed behavior should only be used #ifdef STBI_WIN32_UTF8_FILENAMES (or similar name), otherwise (for backwards compatibility reasons) const char* is still treated as ANSI and regular fopen() is used
it's the users problem how they get a UTF-8 filename/path
to help with that, maybe add a wchar_t* -> UTF-8 string conversion function they can use",True,{}
nothings/stb,https://github.com/nothings/stb,529,2017-12-13T03:43:43Z,2018-02-06T03:50:43Z,2018-02-06T03:50:43Z,CLOSED,False,471,55,5,https://github.com/zmatsuo,Add functions with wchar_t to stb_image.h and stb_image_write.h,5,[],https://github.com/nothings/stb/pull/529,https://github.com/nothings,12,https://github.com/nothings/stb/pull/529#issuecomment-362353392,"wfopen (UNICODE,wchar_t) version will use UNICODE version (CreateW) API.

CJK support
In CJK environment wchar_t support is important.
ex. (CP932)
""C:\Documents and Settings\佐藤\デスクトップ\可能性の表.txt""
hex dump

00000000: 433a 5c44 6f63 756d 656e 7473 2061 6e64  C:\Documents and
00000010: 2053 6574 7469 6e67 735c 8db2 93a1 5c83   Settings\....\.
00000020: 6683 5883 4e83 6783 6283 765c 89c2 945c  f.X.N.g.b.v\...\
00000030: 90ab 82cc 955c 2e74 7874                 .....\.txt

filename includes path separator charactor('\'). it's dangerous.


UNC
""\server\share..""
""\server@SSL\path..""


MAX_PATH limit
MAX_PATH -> 32767


see
https://msdn.microsoft.com/ja-jp/library/windows/desktop/aa365247(v=vs.85).aspx","@zmatsuo


I'm not concerned with small optimizations like fopen_rb. Not worth it.


Maybe your issue is that the thing @rygorous proposed and I concurred with will result in double-conversion on Windows if you start with wchar_t filenames -- you'll convert them to utf8, and then they will be converted back to wchar_t. I don't care about the inefficiency of this double conversion. I prefer the reduced complexity of not doubling the number of filename API functions to worrying about performance conversion of filenames (especially when decoding images is going to take much longer anyway).",True,{}
nothings/stb,https://github.com/nothings/stb,529,2017-12-13T03:43:43Z,2018-02-06T03:50:43Z,2018-02-06T03:50:43Z,CLOSED,False,471,55,5,https://github.com/zmatsuo,Add functions with wchar_t to stb_image.h and stb_image_write.h,5,[],https://github.com/nothings/stb/pull/529,https://github.com/zmatsuo,13,https://github.com/nothings/stb/pull/529#issuecomment-363301508,"wfopen (UNICODE,wchar_t) version will use UNICODE version (CreateW) API.

CJK support
In CJK environment wchar_t support is important.
ex. (CP932)
""C:\Documents and Settings\佐藤\デスクトップ\可能性の表.txt""
hex dump

00000000: 433a 5c44 6f63 756d 656e 7473 2061 6e64  C:\Documents and
00000010: 2053 6574 7469 6e67 735c 8db2 93a1 5c83   Settings\....\.
00000020: 6683 5883 4e83 6783 6283 765c 89c2 945c  f.X.N.g.b.v\...\
00000030: 90ab 82cc 955c 2e74 7874                 .....\.txt

filename includes path separator charactor('\'). it's dangerous.


UNC
""\server\share..""
""\server@SSL\path..""


MAX_PATH limit
MAX_PATH -> 32767


see
https://msdn.microsoft.com/ja-jp/library/windows/desktop/aa365247(v=vs.85).aspx","I think that it is useful if we can use UTF-8 string file name.
(However, it is useful for me to have a function of wchar_t version, but I understand that you do not like increasing functions :-)
I will call the APIs with file name converted to UTF-8 from wchar_t string.
In code page 1252 (ISO 8859), in effect, conversion of UTF-8 string may not be necessary.
The CJK environment is inconvenient.
Please close this PR.",True,{}
nothings/stb,https://github.com/nothings/stb,531,2017-12-24T18:57:17Z,2017-12-24T18:57:41Z,2017-12-24T18:57:41Z,CLOSED,False,3,2,1,https://github.com/RobLoach,Silence compilation warnings of winding_lengths,1,[],https://github.com/nothings/stb/pull/531,https://github.com/RobLoach,1,https://github.com/nothings/stb/pull/531,"Coverty scan shows potential warnings of winding_lengths. Forcing it to be a NULL fixes the issue.

Delete this list before clicking CREATE PULL REQUEST
Make sure you're using a special branch just for this pull request. (Sometimes people unknowingly use a default branch, then later update that branch, which updates the pull request with the other changes if it hasn't been merged yet.)
Do NOT update the version number in the file. (This just causes conflicts.)
Do add your name to the list of contributors. (Don't worry about the formatting.) I'll try to remember to add it if you don't, but I sometimes forget as it's an extra step.

If you get something above wrong, don't fret it, it's not the end of the world.","Coverty scan shows potential warnings of winding_lengths. Forcing it to be a NULL fixes the issue.

Delete this list before clicking CREATE PULL REQUEST
Make sure you're using a special branch just for this pull request. (Sometimes people unknowingly use a default branch, then later update that branch, which updates the pull request with the other changes if it hasn't been merged yet.)
Do NOT update the version number in the file. (This just causes conflicts.)
Do add your name to the list of contributors. (Don't worry about the formatting.) I'll try to remember to add it if you don't, but I sometimes forget as it's an extra step.

If you get something above wrong, don't fret it, it's not the end of the world.",True,{}
nothings/stb,https://github.com/nothings/stb,532,2017-12-24T18:58:35Z,2018-01-29T16:22:45Z,2018-01-29T16:22:45Z,MERGED,True,3,2,1,https://github.com/RobLoach,stb_truetype: Silence compilation warnings of winding_lengths,1,[],https://github.com/nothings/stb/pull/532,https://github.com/RobLoach,1,https://github.com/nothings/stb/pull/532,Coverty scan shows potential warnings of winding_lengths. Forcing it to be a NULL fixes the issue.,Coverty scan shows potential warnings of winding_lengths. Forcing it to be a NULL fixes the issue.,True,{}
nothings/stb,https://github.com/nothings/stb,534,2018-01-02T00:23:32Z,2018-01-29T16:22:46Z,2018-01-29T16:22:46Z,MERGED,True,19,1,1,https://github.com/xeekworx,Using secure CRT calls to avoid MSVC compile errors,5,[],https://github.com/nothings/stb/pull/534,https://github.com/xeekworx,1,https://github.com/nothings/stb/pull/534,"Fixes #533 for CRT calls that the Microsoft C/C++ compiler considers deprecated and errors when used. The proposed changes are to use the secure versions of these calls if a Microsoft compiler is being used. For this fix, namely, fopen and sprintf.
If you're using an extremely old version of a Microsoft compiler this might be a problem without being more detailed about the _MSC_VER macro.","Fixes #533 for CRT calls that the Microsoft C/C++ compiler considers deprecated and errors when used. The proposed changes are to use the secure versions of these calls if a Microsoft compiler is being used. For this fix, namely, fopen and sprintf.
If you're using an extremely old version of a Microsoft compiler this might be a problem without being more detailed about the _MSC_VER macro.",True,{}
nothings/stb,https://github.com/nothings/stb,534,2018-01-02T00:23:32Z,2018-01-29T16:22:46Z,2018-01-29T16:22:46Z,MERGED,True,19,1,1,https://github.com/xeekworx,Using secure CRT calls to avoid MSVC compile errors,5,[],https://github.com/nothings/stb/pull/534,https://github.com/nothings,2,https://github.com/nothings/stb/pull/534#issuecomment-354689879,"Fixes #533 for CRT calls that the Microsoft C/C++ compiler considers deprecated and errors when used. The proposed changes are to use the secure versions of these calls if a Microsoft compiler is being used. For this fix, namely, fopen and sprintf.
If you're using an extremely old version of a Microsoft compiler this might be a problem without being more detailed about the _MSC_VER macro.","Cool. I'll update this for old MSVC compilers, you don't have to worry about it.",True,{}
nothings/stb,https://github.com/nothings/stb,534,2018-01-02T00:23:32Z,2018-01-29T16:22:46Z,2018-01-29T16:22:46Z,MERGED,True,19,1,1,https://github.com/xeekworx,Using secure CRT calls to avoid MSVC compile errors,5,[],https://github.com/nothings/stb/pull/534,https://github.com/nothings,3,https://github.com/nothings/stb/pull/534#issuecomment-361224640,"Fixes #533 for CRT calls that the Microsoft C/C++ compiler considers deprecated and errors when used. The proposed changes are to use the secure versions of these calls if a Microsoft compiler is being used. For this fix, namely, fopen and sprintf.
If you're using an extremely old version of a Microsoft compiler this might be a problem without being more detailed about the _MSC_VER macro.","Actually, since you made it ifdef'd on an explicit setting, I'll leave it as is since on old compilers you just won't turn it on.",True,{}
nothings/stb,https://github.com/nothings/stb,534,2018-01-02T00:23:32Z,2018-01-29T16:22:46Z,2018-01-29T16:22:46Z,MERGED,True,19,1,1,https://github.com/xeekworx,Using secure CRT calls to avoid MSVC compile errors,5,[],https://github.com/nothings/stb/pull/534,https://github.com/nothings,4,https://github.com/nothings/stb/pull/534#issuecomment-361254638,"Fixes #533 for CRT calls that the Microsoft C/C++ compiler considers deprecated and errors when used. The proposed changes are to use the secure versions of these calls if a Microsoft compiler is being used. For this fix, namely, fopen and sprintf.
If you're using an extremely old version of a Microsoft compiler this might be a problem without being more detailed about the _MSC_VER macro.","I'll fix it on the assumption that it doesn't, thanks @DanielGibson",True,{}
nothings/stb,https://github.com/nothings/stb,536,2018-01-10T14:27:34Z,2018-01-29T12:13:17Z,2018-01-29T12:28:26Z,CLOSED,False,31,13,1,https://github.com/r-lyeh-archived,Fix #430,1,[],https://github.com/nothings/stb/pull/536,https://github.com/r-lyeh-archived,1,https://github.com/nothings/stb/pull/536,,,True,{}
nothings/stb,https://github.com/nothings/stb,536,2018-01-10T14:27:34Z,2018-01-29T12:13:17Z,2018-01-29T12:28:26Z,CLOSED,False,31,13,1,https://github.com/r-lyeh-archived,Fix #430,1,[],https://github.com/nothings/stb/pull/536,https://github.com/nothings,2,https://github.com/nothings/stb/pull/536#issuecomment-361226206,,"So, github shows the mergeinstructions for this as a patch instead of a full PR. Did you create it in a different than normal way?
The problem is that the merge instructions github shows for it are:
git checkout -b r-lyeh-archived-master master
curl -L https://github.com/nothings/stb/pull/536.patch | git am -3

But if I run the curl command I get ""Sorry, this diff is unavailable"".",True,{}
nothings/stb,https://github.com/nothings/stb,536,2018-01-10T14:27:34Z,2018-01-29T12:13:17Z,2018-01-29T12:28:26Z,CLOSED,False,31,13,1,https://github.com/r-lyeh-archived,Fix #430,1,[],https://github.com/nothings/stb/pull/536,https://github.com/nothings,3,https://github.com/nothings/stb/pull/536#issuecomment-361226646,,I guess I can just merge it by c&p from the web since it's only two blocks.,True,{}
nothings/stb,https://github.com/nothings/stb,536,2018-01-10T14:27:34Z,2018-01-29T12:13:17Z,2018-01-29T12:28:26Z,CLOSED,False,31,13,1,https://github.com/r-lyeh-archived,Fix #430,1,[],https://github.com/nothings/stb/pull/536,https://github.com/nothings,4,https://github.com/nothings/stb/pull/536#issuecomment-361227242,,"Yeah, ok, I did that. Fixed in next release.",True,{}
nothings/stb,https://github.com/nothings/stb,536,2018-01-10T14:27:34Z,2018-01-29T12:13:17Z,2018-01-29T12:28:26Z,CLOSED,False,31,13,1,https://github.com/r-lyeh-archived,Fix #430,1,[],https://github.com/nothings/stb/pull/536,https://github.com/nothings,5,https://github.com/nothings/stb/pull/536#issuecomment-361228792,,"Oh right, this was paniq's fix from issue 430 anyway. (Because the 430 was only in the title, no link to it was automatically generated.)",True,{}
nothings/stb,https://github.com/nothings/stb,536,2018-01-10T14:27:34Z,2018-01-29T12:13:17Z,2018-01-29T12:28:26Z,CLOSED,False,31,13,1,https://github.com/r-lyeh-archived,Fix #430,1,[],https://github.com/nothings/stb/pull/536,https://github.com/r-lyeh,6,https://github.com/nothings/stb/pull/536#issuecomment-361230580,,"It was a regular PR but I have archived that github account few days ago, so I guess the PR is not available for some reason :)
Anyways, good that you merged it somehow!",True,{}
nothings/stb,https://github.com/nothings/stb,538,2018-01-29T23:23:51Z,2019-02-07T12:58:14Z,2019-02-07T12:58:14Z,CLOSED,False,82,50,1,https://github.com/Auburn,"Perlin, added seed, fixed fractal wrapping, performance increase",3,"['4 enhancement', '1 stb library w/no tag']",https://github.com/nothings/stb/pull/538,https://github.com/Auburn,1,https://github.com/nothings/stb/pull/538,"Added seed argument to stb_perlin_noise3 this allowed me to fix the fractal artifact, but it is also a great option to have for noise generation. Since the seed is an unsigned char it can be added to the first permutation lookup without any risk of out of bounds array lookups, this also means it has virtually zero performance impact.
Changed the final permutation table lookup to use a version of stb__perlin_randtab with all values mod 12. This removes the need for the indicies table in stb__perlin_grad since the value is already within the possible gradient indies. It also does a better job of reducing the gradient bias. Removing this extra array lookup gave me a 3% performance increase, MSVC17.
Made each octave of the fractals use a different seed, this prevents this artifact from happening at the origin. This happens because each octave is using very similar positions to the previous octave, having a different seed per octave guarantees a different noise output despite the similar position.
Removed wrap arguments from the fractal functions as they cannot function correctly in a fractal due to each octave wrapping at a different offset.","Added seed argument to stb_perlin_noise3 this allowed me to fix the fractal artifact, but it is also a great option to have for noise generation. Since the seed is an unsigned char it can be added to the first permutation lookup without any risk of out of bounds array lookups, this also means it has virtually zero performance impact.
Changed the final permutation table lookup to use a version of stb__perlin_randtab with all values mod 12. This removes the need for the indicies table in stb__perlin_grad since the value is already within the possible gradient indies. It also does a better job of reducing the gradient bias. Removing this extra array lookup gave me a 3% performance increase, MSVC17.
Made each octave of the fractals use a different seed, this prevents this artifact from happening at the origin. This happens because each octave is using very similar positions to the previous octave, having a different seed per octave guarantees a different noise output despite the similar position.
Removed wrap arguments from the fractal functions as they cannot function correctly in a fractal due to each octave wrapping at a different offset.",True,{}
nothings/stb,https://github.com/nothings/stb,538,2018-01-29T23:23:51Z,2019-02-07T12:58:14Z,2019-02-07T12:58:14Z,CLOSED,False,82,50,1,https://github.com/Auburn,"Perlin, added seed, fixed fractal wrapping, performance increase",3,"['4 enhancement', '1 stb library w/no tag']",https://github.com/nothings/stb/pull/538,https://github.com/Auburn,2,https://github.com/nothings/stb/pull/538#issuecomment-361422776,"Added seed argument to stb_perlin_noise3 this allowed me to fix the fractal artifact, but it is also a great option to have for noise generation. Since the seed is an unsigned char it can be added to the first permutation lookup without any risk of out of bounds array lookups, this also means it has virtually zero performance impact.
Changed the final permutation table lookup to use a version of stb__perlin_randtab with all values mod 12. This removes the need for the indicies table in stb__perlin_grad since the value is already within the possible gradient indies. It also does a better job of reducing the gradient bias. Removing this extra array lookup gave me a 3% performance increase, MSVC17.
Made each octave of the fractals use a different seed, this prevents this artifact from happening at the origin. This happens because each octave is using very similar positions to the previous octave, having a different seed per octave guarantees a different noise output despite the similar position.
Removed wrap arguments from the fractal functions as they cannot function correctly in a fractal due to each octave wrapping at a different offset.","As a note, this change will cause a reseed of all noise produced compared to before, due to a new method for selecting gradients.",True,{}
nothings/stb,https://github.com/nothings/stb,538,2018-01-29T23:23:51Z,2019-02-07T12:58:14Z,2019-02-07T12:58:14Z,CLOSED,False,82,50,1,https://github.com/Auburn,"Perlin, added seed, fixed fractal wrapping, performance increase",3,"['4 enhancement', '1 stb library w/no tag']",https://github.com/nothings/stb/pull/538,https://github.com/nothings,3,https://github.com/nothings/stb/pull/538#issuecomment-361424240,"Added seed argument to stb_perlin_noise3 this allowed me to fix the fractal artifact, but it is also a great option to have for noise generation. Since the seed is an unsigned char it can be added to the first permutation lookup without any risk of out of bounds array lookups, this also means it has virtually zero performance impact.
Changed the final permutation table lookup to use a version of stb__perlin_randtab with all values mod 12. This removes the need for the indicies table in stb__perlin_grad since the value is already within the possible gradient indies. It also does a better job of reducing the gradient bias. Removing this extra array lookup gave me a 3% performance increase, MSVC17.
Made each octave of the fractals use a different seed, this prevents this artifact from happening at the origin. This happens because each octave is using very similar positions to the previous octave, having a different seed per octave guarantees a different noise output despite the similar position.
Removed wrap arguments from the fractal functions as they cannot function correctly in a fractal due to each octave wrapping at a different offset.","I assume the argument for removing the wrapping is not because they have different offsets (which shouldn't affect wrapping at all), but that they have non-power-of-two lacunarity, so they don't actually wrap. (The whole purpose of the wrap parameters in noise3 is that you can making wrapping multi-octave noise, but only if you use power-of-two scales and corresponding wrapping.)


The intent has always been that the third coordinate of 3D noise can be used as a seed parameter when you want 2D noise. Is there actual demand for seeded 3D noise?


I don't think a 3% speedup is worth breaking back-compatibility of noise3. (I'm less concerned about breaking back-compatibility of ridge/fbm/turbulent noise.) But I'm not clear why noise3's behavior changed, since the table changes you described don't seem like they would change gradient selection.",True,{}
nothings/stb,https://github.com/nothings/stb,538,2018-01-29T23:23:51Z,2019-02-07T12:58:14Z,2019-02-07T12:58:14Z,CLOSED,False,82,50,1,https://github.com/Auburn,"Perlin, added seed, fixed fractal wrapping, performance increase",3,"['4 enhancement', '1 stb library w/no tag']",https://github.com/nothings/stb/pull/538,https://github.com/OvermindDL1,4,https://github.com/nothings/stb/pull/538#issuecomment-361426202,"Added seed argument to stb_perlin_noise3 this allowed me to fix the fractal artifact, but it is also a great option to have for noise generation. Since the seed is an unsigned char it can be added to the first permutation lookup without any risk of out of bounds array lookups, this also means it has virtually zero performance impact.
Changed the final permutation table lookup to use a version of stb__perlin_randtab with all values mod 12. This removes the need for the indicies table in stb__perlin_grad since the value is already within the possible gradient indies. It also does a better job of reducing the gradient bias. Removing this extra array lookup gave me a 3% performance increase, MSVC17.
Made each octave of the fractals use a different seed, this prevents this artifact from happening at the origin. This happens because each octave is using very similar positions to the previous octave, having a different seed per octave guarantees a different noise output despite the similar position.
Removed wrap arguments from the fractal functions as they cannot function correctly in a fractal due to each octave wrapping at a different offset.","Is there actual demand for seeded 3D noise?

Yes, definitely.  Especially in voxel setups.  In a few cases I've even used up to 6 dimensional perlin noise (yay C++ templates for that horror, abstracted it out into N dimensions long ago).",True,{}
nothings/stb,https://github.com/nothings/stb,538,2018-01-29T23:23:51Z,2019-02-07T12:58:14Z,2019-02-07T12:58:14Z,CLOSED,False,82,50,1,https://github.com/Auburn,"Perlin, added seed, fixed fractal wrapping, performance increase",3,"['4 enhancement', '1 stb library w/no tag']",https://github.com/nothings/stb/pull/538,https://github.com/Auburn,5,https://github.com/nothings/stb/pull/538#issuecomment-361427172,"Added seed argument to stb_perlin_noise3 this allowed me to fix the fractal artifact, but it is also a great option to have for noise generation. Since the seed is an unsigned char it can be added to the first permutation lookup without any risk of out of bounds array lookups, this also means it has virtually zero performance impact.
Changed the final permutation table lookup to use a version of stb__perlin_randtab with all values mod 12. This removes the need for the indicies table in stb__perlin_grad since the value is already within the possible gradient indies. It also does a better job of reducing the gradient bias. Removing this extra array lookup gave me a 3% performance increase, MSVC17.
Made each octave of the fractals use a different seed, this prevents this artifact from happening at the origin. This happens because each octave is using very similar positions to the previous octave, having a different seed per octave guarantees a different noise output despite the similar position.
Removed wrap arguments from the fractal functions as they cannot function correctly in a fractal due to each octave wrapping at a different offset.","1. Yes sorry I should have been more clear. The wrapping would still
basically work if using lacunarity=power-of-two, although the higher
octaves would be repeating unnecessarily. If wrapping was to be implemented
for fractals it would have to enforce that lacunarity=power-of-two and it
should correctly be adjusted for higher octaves so they also wrap at the
same location as the base octave.

2. The seed for perlin was mainly to fix the artifact issue for fractals.
And it adds the option to seed 3D noise, since this has negligible
performance impact I feel it is a good addition.

3. Since I replaced the indicies table with the mod12 table it will give a
different hash resulting in a different gradient being selected. I could
remove this change without affecting any of the other changes, you could
then produce the same output as before using a seed of 0.",True,{}
nothings/stb,https://github.com/nothings/stb,538,2018-01-29T23:23:51Z,2019-02-07T12:58:14Z,2019-02-07T12:58:14Z,CLOSED,False,82,50,1,https://github.com/Auburn,"Perlin, added seed, fixed fractal wrapping, performance increase",3,"['4 enhancement', '1 stb library w/no tag']",https://github.com/nothings/stb/pull/538,https://github.com/nothings,6,https://github.com/nothings/stb/pull/538#issuecomment-361429059,"Added seed argument to stb_perlin_noise3 this allowed me to fix the fractal artifact, but it is also a great option to have for noise generation. Since the seed is an unsigned char it can be added to the first permutation lookup without any risk of out of bounds array lookups, this also means it has virtually zero performance impact.
Changed the final permutation table lookup to use a version of stb__perlin_randtab with all values mod 12. This removes the need for the indicies table in stb__perlin_grad since the value is already within the possible gradient indies. It also does a better job of reducing the gradient bias. Removing this extra array lookup gave me a 3% performance increase, MSVC17.
Made each octave of the fractals use a different seed, this prevents this artifact from happening at the origin. This happens because each octave is using very similar positions to the previous octave, having a different seed per octave guarantees a different noise output despite the similar position.
Removed wrap arguments from the fractal functions as they cannot function correctly in a fractal due to each octave wrapping at a different offset.","Re: 3: my point is instead of setting new_table[i] to old_table[i]%12, you could instead set new_table to indices[old_table[i]&63], thus eliminating the lookup without changing the old behavior.

If the main point is to fix the artifact issues for fractals, I'd prefer it to not change the API to noise3. (Alternatively, if noise3's public API is going to have a seed, it should be more than 8-bits. But that would require a different implementation.)

So assuming that's not worth tackling (since it would cause a slowdown), change your current stb_perlin_noise3 to stb_perline_noise_internal, add an stb_perlin_noise3 that just calls it with 0 as the seed, and have the other functions call perline_noise3_internal with their seed.
To be clear about this, noise3 is what I implemented, and the other stuff is something that someone else added that I don't care about particularly. So changing those to be better behaved is fine, but I don't want to change noise3 unnecessarily. Here, that shows up as avoiding changing the API (the seed) and avoiding changing the behavior back-compatibility-wise.",True,{}
nothings/stb,https://github.com/nothings/stb,538,2018-01-29T23:23:51Z,2019-02-07T12:58:14Z,2019-02-07T12:58:14Z,CLOSED,False,82,50,1,https://github.com/Auburn,"Perlin, added seed, fixed fractal wrapping, performance increase",3,"['4 enhancement', '1 stb library w/no tag']",https://github.com/nothings/stb/pull/538,https://github.com/nothings,7,https://github.com/nothings/stb/pull/538#issuecomment-361739741,"Added seed argument to stb_perlin_noise3 this allowed me to fix the fractal artifact, but it is also a great option to have for noise generation. Since the seed is an unsigned char it can be added to the first permutation lookup without any risk of out of bounds array lookups, this also means it has virtually zero performance impact.
Changed the final permutation table lookup to use a version of stb__perlin_randtab with all values mod 12. This removes the need for the indicies table in stb__perlin_grad since the value is already within the possible gradient indies. It also does a better job of reducing the gradient bias. Removing this extra array lookup gave me a 3% performance increase, MSVC17.
Made each octave of the fractals use a different seed, this prevents this artifact from happening at the origin. This happens because each octave is using very similar positions to the previous octave, having a different seed per octave guarantees a different noise output despite the similar position.
Removed wrap arguments from the fractal functions as they cannot function correctly in a fractal due to each octave wrapping at a different offset.","Looks good, will integrate soon.",True,{}
nothings/stb,https://github.com/nothings/stb,538,2018-01-29T23:23:51Z,2019-02-07T12:58:14Z,2019-02-07T12:58:14Z,CLOSED,False,82,50,1,https://github.com/Auburn,"Perlin, added seed, fixed fractal wrapping, performance increase",3,"['4 enhancement', '1 stb library w/no tag']",https://github.com/nothings/stb/pull/538,https://github.com/nothings,8,https://github.com/nothings/stb/pull/538#issuecomment-461408680,"Added seed argument to stb_perlin_noise3 this allowed me to fix the fractal artifact, but it is also a great option to have for noise generation. Since the seed is an unsigned char it can be added to the first permutation lookup without any risk of out of bounds array lookups, this also means it has virtually zero performance impact.
Changed the final permutation table lookup to use a version of stb__perlin_randtab with all values mod 12. This removes the need for the indicies table in stb__perlin_grad since the value is already within the possible gradient indies. It also does a better job of reducing the gradient bias. Removing this extra array lookup gave me a 3% performance increase, MSVC17.
Made each octave of the fractals use a different seed, this prevents this artifact from happening at the origin. This happens because each octave is using very similar positions to the previous octave, having a different seed per octave guarantees a different noise output despite the similar position.
Removed wrap arguments from the fractal functions as they cannot function correctly in a fractal due to each octave wrapping at a different offset.","""soon"", sigh.
In next release.",True,{'LAUGH': ['https://github.com/Manuzor']}
nothings/stb,https://github.com/nothings/stb,547,2018-02-01T07:13:10Z,2018-02-01T07:55:19Z,2018-02-01T07:55:19Z,CLOSED,False,8,2,1,https://github.com/pmttavara,Replace raw math calls with STBTT_* decorated variants,2,[],https://github.com/nothings/stb/pull/547,https://github.com/pmttavara,1,https://github.com/nothings/stb/pull/547,"Also, adds STBTT_fmod(x,y) to the list of define-able math functions.
This lets the lib be able to build without the CRT, as (I assume) was intended.
This is not hard to fix user-side, but I thought it might as well work out of the box.
I put my name in the contributors because the rules said so, but this is a pretty trivial change.","Also, adds STBTT_fmod(x,y) to the list of define-able math functions.
This lets the lib be able to build without the CRT, as (I assume) was intended.
This is not hard to fix user-side, but I thought it might as well work out of the box.
I put my name in the contributors because the rules said so, but this is a pretty trivial change.",True,{}
nothings/stb,https://github.com/nothings/stb,547,2018-02-01T07:13:10Z,2018-02-01T07:55:19Z,2018-02-01T07:55:19Z,CLOSED,False,8,2,1,https://github.com/pmttavara,Replace raw math calls with STBTT_* decorated variants,2,[],https://github.com/nothings/stb/pull/547,https://github.com/nothings,2,https://github.com/nothings/stb/pull/547#issuecomment-362186383,"Also, adds STBTT_fmod(x,y) to the list of define-able math functions.
This lets the lib be able to build without the CRT, as (I assume) was intended.
This is not hard to fix user-side, but I thought it might as well work out of the box.
I put my name in the contributors because the rules said so, but this is a pretty trivial change.","Fix already made for next version, thanks though!",True,{'THUMBS_UP': ['https://github.com/pmttavara']}
nothings/stb,https://github.com/nothings/stb,550,2018-02-03T03:47:26Z,2018-02-11T19:24:36Z,2018-02-11T19:24:36Z,CLOSED,False,88,3,1,https://github.com/XProger,fix stb_vorbis.c,6,"['2 bug', '1 stb_vorbis']",https://github.com/nothings/stb/pull/550,https://github.com/XProger,1,https://github.com/nothings/stb/pull/550,"fix FPU exception on PlayStation Portable (cmp NAN with ZERO) at the first ""INVERSE COUPLING"" stage","fix FPU exception on PlayStation Portable (cmp NAN with ZERO) at the first ""INVERSE COUPLING"" stage",True,{}
nothings/stb,https://github.com/nothings/stb,550,2018-02-03T03:47:26Z,2018-02-11T19:24:36Z,2018-02-11T19:24:36Z,CLOSED,False,88,3,1,https://github.com/XProger,fix stb_vorbis.c,6,"['2 bug', '1 stb_vorbis']",https://github.com/nothings/stb/pull/550,https://github.com/nothings,2,https://github.com/nothings/stb/pull/550#issuecomment-364779565,"fix FPU exception on PlayStation Portable (cmp NAN with ZERO) at the first ""INVERSE COUPLING"" stage","I manually added the final memset from your PR, which is I assume the part relevant to this bug, and left out the STB_VORBIS_FAST_INIT stuff. In next release.",True,{}
nothings/stb,https://github.com/nothings/stb,553,2018-02-04T19:39:01Z,2018-02-11T19:58:15Z,2018-02-11T19:58:15Z,MERGED,True,7,6,1,https://github.com/kosua20,stb_image_write: Fix error when saving PNG with the stbi__flip_vertically_on_write flag on.,1,"['2 bug', '1 stb_image_write']",https://github.com/nothings/stb/pull/553,https://github.com/kosua20,1,https://github.com/nothings/stb/pull/553,"When computing the PNG filters for the n-th row of pixel, the n-1-th of the input image was used in all cases (even if the vertical flip flag was true). If the image is to be flipped, the row to use is instead the n+1-th row of the initial image. This pull request fixes stbiw__encode_png_line() to take this into account.","When computing the PNG filters for the n-th row of pixel, the n-1-th of the input image was used in all cases (even if the vertical flip flag was true). If the image is to be flipped, the row to use is instead the n+1-th row of the initial image. This pull request fixes stbiw__encode_png_line() to take this into account.",True,"{'THUMBS_UP': ['https://github.com/cap', 'https://github.com/nothings']}"
nothings/stb,https://github.com/nothings/stb,554,2018-02-05T06:38:05Z,2018-02-11T19:58:15Z,2018-02-11T19:58:15Z,MERGED,True,5,4,1,https://github.com/cap,stb_image_write: fix png compression level typos,1,"['2 bug', '1 stb_image_write']",https://github.com/nothings/stb/pull/554,https://github.com/cap,1,https://github.com/nothings/stb/pull/554,,,True,{}
nothings/stb,https://github.com/nothings/stb,556,2018-02-05T18:24:41Z,2018-02-11T19:11:30Z,2018-02-11T19:11:30Z,CLOSED,False,2,2,1,https://github.com/ITikhonov,Fix syntactic errors when compiling stb_image_write statically,1,"['2 bug', '1 stb_image_write']",https://github.com/nothings/stb/pull/556,https://github.com/ITikhonov,1,https://github.com/nothings/stb/pull/556,"Compiling stb_image_write.h with #define STB_IMAGE_WRITE_STATIC does not work. The reason are accidentally botched declarations inside of ifdef block. This particular problem is not present in dev branch as it was totally rewritten.
+ gcc -std=gnu99 -g -Wall -Werror -Wno-unused-function ...
In file included from splines.c:47:0:
stb_image_write.h:236:8: error: type defaults to ‘int’ in declaration of ‘stbi__flip_vertically_on_write’ [-Werror=implicit-int]
 static stbi__flip_vertically_on_write=0;
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
stb_image_write.h:237:39: error: expected ‘=’, ‘,’, ‘;’, ‘asm’ or ‘__attribute__’ before ‘level’
 static int stbi_write_png_compression level = 8;
                                       ^~~~~
In file included from splines.c:47:0:
stb_image_write.h: In function ‘stbi_write_png_to_mem’:
stb_image_write.h:1062:55: error: ‘stbi_write_png_compression_level’ undeclared (first use in this function); did you mean ‘stbi_write_png_comperssion_level’?
    zlib = stbi_zlib_compress(filt, y*( x*n+1), &zlen, stbi_write_png_compression_level);
                                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                                       stbi_write_png_comperssion_level
stb_image_write.h:1062:55: note: each undeclared identifier is reported only once for each function it appears in
In file included from splines.c:47:0:
At top level:
stb_image_write.h:157:14: error: ‘stbi_write_png_comperssion_level’ defined but not used [-Werror=unused-variable]
 STBIWDEF int stbi_write_png_comperssion_level;
              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cc1: all warnings being treated as errors","Compiling stb_image_write.h with #define STB_IMAGE_WRITE_STATIC does not work. The reason are accidentally botched declarations inside of ifdef block. This particular problem is not present in dev branch as it was totally rewritten.
+ gcc -std=gnu99 -g -Wall -Werror -Wno-unused-function ...
In file included from splines.c:47:0:
stb_image_write.h:236:8: error: type defaults to ‘int’ in declaration of ‘stbi__flip_vertically_on_write’ [-Werror=implicit-int]
 static stbi__flip_vertically_on_write=0;
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
stb_image_write.h:237:39: error: expected ‘=’, ‘,’, ‘;’, ‘asm’ or ‘__attribute__’ before ‘level’
 static int stbi_write_png_compression level = 8;
                                       ^~~~~
In file included from splines.c:47:0:
stb_image_write.h: In function ‘stbi_write_png_to_mem’:
stb_image_write.h:1062:55: error: ‘stbi_write_png_compression_level’ undeclared (first use in this function); did you mean ‘stbi_write_png_comperssion_level’?
    zlib = stbi_zlib_compress(filt, y*( x*n+1), &zlen, stbi_write_png_compression_level);
                                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                                       stbi_write_png_comperssion_level
stb_image_write.h:1062:55: note: each undeclared identifier is reported only once for each function it appears in
In file included from splines.c:47:0:
At top level:
stb_image_write.h:157:14: error: ‘stbi_write_png_comperssion_level’ defined but not used [-Werror=unused-variable]
 STBIWDEF int stbi_write_png_comperssion_level;
              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cc1: all warnings being treated as errors",True,{}
nothings/stb,https://github.com/nothings/stb,556,2018-02-05T18:24:41Z,2018-02-11T19:11:30Z,2018-02-11T19:11:30Z,CLOSED,False,2,2,1,https://github.com/ITikhonov,Fix syntactic errors when compiling stb_image_write statically,1,"['2 bug', '1 stb_image_write']",https://github.com/nothings/stb/pull/556,https://github.com/nothings,2,https://github.com/nothings/stb/pull/556#issuecomment-363193925,"Compiling stb_image_write.h with #define STB_IMAGE_WRITE_STATIC does not work. The reason are accidentally botched declarations inside of ifdef block. This particular problem is not present in dev branch as it was totally rewritten.
+ gcc -std=gnu99 -g -Wall -Werror -Wno-unused-function ...
In file included from splines.c:47:0:
stb_image_write.h:236:8: error: type defaults to ‘int’ in declaration of ‘stbi__flip_vertically_on_write’ [-Werror=implicit-int]
 static stbi__flip_vertically_on_write=0;
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
stb_image_write.h:237:39: error: expected ‘=’, ‘,’, ‘;’, ‘asm’ or ‘__attribute__’ before ‘level’
 static int stbi_write_png_compression level = 8;
                                       ^~~~~
In file included from splines.c:47:0:
stb_image_write.h: In function ‘stbi_write_png_to_mem’:
stb_image_write.h:1062:55: error: ‘stbi_write_png_compression_level’ undeclared (first use in this function); did you mean ‘stbi_write_png_comperssion_level’?
    zlib = stbi_zlib_compress(filt, y*( x*n+1), &zlen, stbi_write_png_compression_level);
                                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                                       stbi_write_png_comperssion_level
stb_image_write.h:1062:55: note: each undeclared identifier is reported only once for each function it appears in
In file included from splines.c:47:0:
At top level:
stb_image_write.h:157:14: error: ‘stbi_write_png_comperssion_level’ defined but not used [-Werror=unused-variable]
 STBIWDEF int stbi_write_png_comperssion_level;
              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cc1: all warnings being treated as errors","If this particular problem ""is not present in dev branch"", where exactly is it present? If you look at the diff of your pull request on github, it looks to me like it doesn't do much (it swaps two lines and adds an 'int' [which should be there but shouldn't break without it]).",True,{}
nothings/stb,https://github.com/nothings/stb,556,2018-02-05T18:24:41Z,2018-02-11T19:11:30Z,2018-02-11T19:11:30Z,CLOSED,False,2,2,1,https://github.com/ITikhonov,Fix syntactic errors when compiling stb_image_write statically,1,"['2 bug', '1 stb_image_write']",https://github.com/nothings/stb/pull/556,https://github.com/ITikhonov,3,https://github.com/nothings/stb/pull/556#issuecomment-363201860,"Compiling stb_image_write.h with #define STB_IMAGE_WRITE_STATIC does not work. The reason are accidentally botched declarations inside of ifdef block. This particular problem is not present in dev branch as it was totally rewritten.
+ gcc -std=gnu99 -g -Wall -Werror -Wno-unused-function ...
In file included from splines.c:47:0:
stb_image_write.h:236:8: error: type defaults to ‘int’ in declaration of ‘stbi__flip_vertically_on_write’ [-Werror=implicit-int]
 static stbi__flip_vertically_on_write=0;
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
stb_image_write.h:237:39: error: expected ‘=’, ‘,’, ‘;’, ‘asm’ or ‘__attribute__’ before ‘level’
 static int stbi_write_png_compression level = 8;
                                       ^~~~~
In file included from splines.c:47:0:
stb_image_write.h: In function ‘stbi_write_png_to_mem’:
stb_image_write.h:1062:55: error: ‘stbi_write_png_compression_level’ undeclared (first use in this function); did you mean ‘stbi_write_png_comperssion_level’?
    zlib = stbi_zlib_compress(filt, y*( x*n+1), &zlen, stbi_write_png_compression_level);
                                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                                       stbi_write_png_comperssion_level
stb_image_write.h:1062:55: note: each undeclared identifier is reported only once for each function it appears in
In file included from splines.c:47:0:
At top level:
stb_image_write.h:157:14: error: ‘stbi_write_png_comperssion_level’ defined but not used [-Werror=unused-variable]
 STBIWDEF int stbi_write_png_comperssion_level;
              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cc1: all warnings being treated as errors","In the
 -static int stbi_write_png_compression level = 8; 

there is a space instead of an underscore.",True,{}
nothings/stb,https://github.com/nothings/stb,556,2018-02-05T18:24:41Z,2018-02-11T19:11:30Z,2018-02-11T19:11:30Z,CLOSED,False,2,2,1,https://github.com/ITikhonov,Fix syntactic errors when compiling stb_image_write statically,1,"['2 bug', '1 stb_image_write']",https://github.com/nothings/stb/pull/556,https://github.com/nothings,4,https://github.com/nothings/stb/pull/556#issuecomment-363302197,"Compiling stb_image_write.h with #define STB_IMAGE_WRITE_STATIC does not work. The reason are accidentally botched declarations inside of ifdef block. This particular problem is not present in dev branch as it was totally rewritten.
+ gcc -std=gnu99 -g -Wall -Werror -Wno-unused-function ...
In file included from splines.c:47:0:
stb_image_write.h:236:8: error: type defaults to ‘int’ in declaration of ‘stbi__flip_vertically_on_write’ [-Werror=implicit-int]
 static stbi__flip_vertically_on_write=0;
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
stb_image_write.h:237:39: error: expected ‘=’, ‘,’, ‘;’, ‘asm’ or ‘__attribute__’ before ‘level’
 static int stbi_write_png_compression level = 8;
                                       ^~~~~
In file included from splines.c:47:0:
stb_image_write.h: In function ‘stbi_write_png_to_mem’:
stb_image_write.h:1062:55: error: ‘stbi_write_png_compression_level’ undeclared (first use in this function); did you mean ‘stbi_write_png_comperssion_level’?
    zlib = stbi_zlib_compress(filt, y*( x*n+1), &zlen, stbi_write_png_compression_level);
                                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                                       stbi_write_png_comperssion_level
stb_image_write.h:1062:55: note: each undeclared identifier is reported only once for each function it appears in
In file included from splines.c:47:0:
At top level:
stb_image_write.h:157:14: error: ‘stbi_write_png_comperssion_level’ defined but not used [-Werror=unused-variable]
 STBIWDEF int stbi_write_png_comperssion_level;
              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cc1: all warnings being treated as errors","Ah yes, so there is, it was very hard to see in the diff.",True,{}
nothings/stb,https://github.com/nothings/stb,556,2018-02-05T18:24:41Z,2018-02-11T19:11:30Z,2018-02-11T19:11:30Z,CLOSED,False,2,2,1,https://github.com/ITikhonov,Fix syntactic errors when compiling stb_image_write statically,1,"['2 bug', '1 stb_image_write']",https://github.com/nothings/stb/pull/556,https://github.com/ITikhonov,5,https://github.com/nothings/stb/pull/556#issuecomment-363572745,"Compiling stb_image_write.h with #define STB_IMAGE_WRITE_STATIC does not work. The reason are accidentally botched declarations inside of ifdef block. This particular problem is not present in dev branch as it was totally rewritten.
+ gcc -std=gnu99 -g -Wall -Werror -Wno-unused-function ...
In file included from splines.c:47:0:
stb_image_write.h:236:8: error: type defaults to ‘int’ in declaration of ‘stbi__flip_vertically_on_write’ [-Werror=implicit-int]
 static stbi__flip_vertically_on_write=0;
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
stb_image_write.h:237:39: error: expected ‘=’, ‘,’, ‘;’, ‘asm’ or ‘__attribute__’ before ‘level’
 static int stbi_write_png_compression level = 8;
                                       ^~~~~
In file included from splines.c:47:0:
stb_image_write.h: In function ‘stbi_write_png_to_mem’:
stb_image_write.h:1062:55: error: ‘stbi_write_png_compression_level’ undeclared (first use in this function); did you mean ‘stbi_write_png_comperssion_level’?
    zlib = stbi_zlib_compress(filt, y*( x*n+1), &zlen, stbi_write_png_compression_level);
                                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                                       stbi_write_png_comperssion_level
stb_image_write.h:1062:55: note: each undeclared identifier is reported only once for each function it appears in
In file included from splines.c:47:0:
At top level:
stb_image_write.h:157:14: error: ‘stbi_write_png_comperssion_level’ defined but not used [-Werror=unused-variable]
 STBIWDEF int stbi_write_png_comperssion_level;
              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cc1: all warnings being treated as errors","Sorry, my bad. Should have made it clear in a first comment.",True,{}
nothings/stb,https://github.com/nothings/stb,556,2018-02-05T18:24:41Z,2018-02-11T19:11:30Z,2018-02-11T19:11:30Z,CLOSED,False,2,2,1,https://github.com/ITikhonov,Fix syntactic errors when compiling stb_image_write statically,1,"['2 bug', '1 stb_image_write']",https://github.com/nothings/stb/pull/556,https://github.com/nothings,6,https://github.com/nothings/stb/pull/556#issuecomment-364778570,"Compiling stb_image_write.h with #define STB_IMAGE_WRITE_STATIC does not work. The reason are accidentally botched declarations inside of ifdef block. This particular problem is not present in dev branch as it was totally rewritten.
+ gcc -std=gnu99 -g -Wall -Werror -Wno-unused-function ...
In file included from splines.c:47:0:
stb_image_write.h:236:8: error: type defaults to ‘int’ in declaration of ‘stbi__flip_vertically_on_write’ [-Werror=implicit-int]
 static stbi__flip_vertically_on_write=0;
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
stb_image_write.h:237:39: error: expected ‘=’, ‘,’, ‘;’, ‘asm’ or ‘__attribute__’ before ‘level’
 static int stbi_write_png_compression level = 8;
                                       ^~~~~
In file included from splines.c:47:0:
stb_image_write.h: In function ‘stbi_write_png_to_mem’:
stb_image_write.h:1062:55: error: ‘stbi_write_png_compression_level’ undeclared (first use in this function); did you mean ‘stbi_write_png_comperssion_level’?
    zlib = stbi_zlib_compress(filt, y*( x*n+1), &zlen, stbi_write_png_compression_level);
                                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                                       stbi_write_png_comperssion_level
stb_image_write.h:1062:55: note: each undeclared identifier is reported only once for each function it appears in
In file included from splines.c:47:0:
At top level:
stb_image_write.h:157:14: error: ‘stbi_write_png_comperssion_level’ defined but not used [-Werror=unused-variable]
 STBIWDEF int stbi_write_png_comperssion_level;
              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cc1: all warnings being treated as errors","I took another PR that had this fix it it, so it should be fixed w/ the next release.",True,{}
nothings/stb,https://github.com/nothings/stb,559,2018-02-12T01:52:11Z,2018-02-21T01:35:29Z,2018-02-21T01:35:29Z,CLOSED,False,96,25,2,https://github.com/jrsmith17,Support for loading files with unicode names,8,[],https://github.com/nothings/stb/pull/559,https://github.com/jrsmith17,1,https://github.com/nothings/stb/pull/559,"Referencing issue #557
Coincidentally, I was already working on this issue separate from the discussion that happened on PR529.
Notes:

I didn't make any formal test cases, but I did test reading two texture files called ""test-dotsひらがな.tga"" and ""test-dotß.tga"". The files loaded with my modifications passed through to my OpenGL code as expected. I also tested writing the same filenames in a pet ray tracer (and the image contents matched between unicode and non unicode filenames)
I saw discussion between using #ifdef UNICODE or STBI_UTF8. I opted for UNICODE because I figured someone who wanted to load a unicode named file probably already has that defined.
If I understood the consensus correctly, you wanted the user to provide a correct char* filename as input. I used this library for my personal test cases, but also provided the requested wchar_t to utf-8 utility function.","Referencing issue #557
Coincidentally, I was already working on this issue separate from the discussion that happened on PR529.
Notes:

I didn't make any formal test cases, but I did test reading two texture files called ""test-dotsひらがな.tga"" and ""test-dotß.tga"". The files loaded with my modifications passed through to my OpenGL code as expected. I also tested writing the same filenames in a pet ray tracer (and the image contents matched between unicode and non unicode filenames)
I saw discussion between using #ifdef UNICODE or STBI_UTF8. I opted for UNICODE because I figured someone who wanted to load a unicode named file probably already has that defined.
If I understood the consensus correctly, you wanted the user to provide a correct char* filename as input. I used this library for my personal test cases, but also provided the requested wchar_t to utf-8 utility function.",True,{}
nothings/stb,https://github.com/nothings/stb,559,2018-02-12T01:52:11Z,2018-02-21T01:35:29Z,2018-02-21T01:35:29Z,CLOSED,False,96,25,2,https://github.com/jrsmith17,Support for loading files with unicode names,8,[],https://github.com/nothings/stb/pull/559,https://github.com/rygorous,2,https://github.com/nothings/stb/pull/559#issuecomment-367183769,"Referencing issue #557
Coincidentally, I was already working on this issue separate from the discussion that happened on PR529.
Notes:

I didn't make any formal test cases, but I did test reading two texture files called ""test-dotsひらがな.tga"" and ""test-dotß.tga"". The files loaded with my modifications passed through to my OpenGL code as expected. I also tested writing the same filenames in a pet ray tracer (and the image contents matched between unicode and non unicode filenames)
I saw discussion between using #ifdef UNICODE or STBI_UTF8. I opted for UNICODE because I figured someone who wanted to load a unicode named file probably already has that defined.
If I understood the consensus correctly, you wanted the user to provide a correct char* filename as input. I used this library for my personal test cases, but also provided the requested wchar_t to utf-8 utility function.","This pull request currently rewrites both files entirely. Also note the original files use 3-spaces indenting, not 2-spaces indenting.
As-is, this pull request is basically impossible to review, and will make the entirely of the per-line file histories for stb_image and stb_image_write useless, so I'm rejecting this particular PR.
Can you clean this up by replicating the changes without all the erroneous formatting changes in another branch, and turn that into a pull request? You should be able to cherry-pick that from this branch.",True,{}
nothings/stb,https://github.com/nothings/stb,560,2018-02-12T07:07:46Z,2018-02-12T08:11:38Z,2018-02-12T08:11:48Z,CLOSED,False,4,1,1,https://github.com/Nuk510,GIMP 32-bit ABGR BMP support,1,[],https://github.com/nothings/stb/pull/560,https://github.com/Nuk510,1,https://github.com/nothings/stb/pull/560,"I was getting this error when loading a 32-bit ABGR BMP exported from GIMP:
stb_image.h:5047: stbi__shiftsigned: Assertion `v >= 0 && v < 256' failed.
Aborted

This pull request contains a fix for that.
Image used for testing: GIMP-ABGR8.bmp.zip
I also used stb_write_image.h (stbi_write_png) to write a .png of the loaded .bmp:

Success!","I was getting this error when loading a 32-bit ABGR BMP exported from GIMP:
stb_image.h:5047: stbi__shiftsigned: Assertion `v >= 0 && v < 256' failed.
Aborted

This pull request contains a fix for that.
Image used for testing: GIMP-ABGR8.bmp.zip
I also used stb_write_image.h (stbi_write_png) to write a .png of the loaded .bmp:

Success!",True,{}
nothings/stb,https://github.com/nothings/stb,560,2018-02-12T07:07:46Z,2018-02-12T08:11:38Z,2018-02-12T08:11:48Z,CLOSED,False,4,1,1,https://github.com/Nuk510,GIMP 32-bit ABGR BMP support,1,[],https://github.com/nothings/stb/pull/560,https://github.com/nothings,2,https://github.com/nothings/stb/pull/560#issuecomment-364852123,"I was getting this error when loading a 32-bit ABGR BMP exported from GIMP:
stb_image.h:5047: stbi__shiftsigned: Assertion `v >= 0 && v < 256' failed.
Aborted

This pull request contains a fix for that.
Image used for testing: GIMP-ABGR8.bmp.zip
I also used stb_write_image.h (stbi_write_png) to write a .png of the loaded .bmp:

Success!","The correct fix is to change
static int stbi__shiftsigned(int v, int shift, int bits)

to
static int stbi__shiftsigned(unsigned int v, int shift, int bits)

Fixed for next release.",True,{'THUMBS_UP': ['https://github.com/Nuk510']}
nothings/stb,https://github.com/nothings/stb,561,2018-02-12T18:16:34Z,2019-02-07T13:00:51Z,2019-02-07T17:44:56Z,CLOSED,False,33,33,12,https://github.com/luzpaz,Misc. comment typos,1,"['1 stb_image', '1 stb_image_write', 'stb.h', '1 stb_truetype', '1 stb_vorbis', 'stb_rect_pack', '1 stb library w/no tag', 'stb_dxt', '1 stb_sprintf']",https://github.com/nothings/stb/pull/561,https://github.com/luzpaz,1,https://github.com/nothings/stb/pull/561,Found via codespell -q 3,Found via codespell -q 3,True,{}
nothings/stb,https://github.com/nothings/stb,561,2018-02-12T18:16:34Z,2019-02-07T13:00:51Z,2019-02-07T17:44:56Z,CLOSED,False,33,33,12,https://github.com/luzpaz,Misc. comment typos,1,"['1 stb_image', '1 stb_image_write', 'stb.h', '1 stb_truetype', '1 stb_vorbis', 'stb_rect_pack', '1 stb library w/no tag', 'stb_dxt', '1 stb_sprintf']",https://github.com/nothings/stb/pull/561,https://github.com/nothings,2,https://github.com/nothings/stb/pull/561#issuecomment-365014932,Found via codespell -q 3,"If you back out the changes to deprecated/rrsprintf.h and deprecated/stb_image.c, I'll gladly merge this.",True,{}
nothings/stb,https://github.com/nothings/stb,561,2018-02-12T18:16:34Z,2019-02-07T13:00:51Z,2019-02-07T17:44:56Z,CLOSED,False,33,33,12,https://github.com/luzpaz,Misc. comment typos,1,"['1 stb_image', '1 stb_image_write', 'stb.h', '1 stb_truetype', '1 stb_vorbis', 'stb_rect_pack', '1 stb library w/no tag', 'stb_dxt', '1 stb_sprintf']",https://github.com/nothings/stb/pull/561,https://github.com/luzpaz,3,https://github.com/nothings/stb/pull/561#issuecomment-365042538,Found via codespell -q 3,Done.,True,"{'THUMBS_UP': ['https://github.com/nothings', 'https://github.com/luzpaz']}"
nothings/stb,https://github.com/nothings/stb,561,2018-02-12T18:16:34Z,2019-02-07T13:00:51Z,2019-02-07T17:44:56Z,CLOSED,False,33,33,12,https://github.com/luzpaz,Misc. comment typos,1,"['1 stb_image', '1 stb_image_write', 'stb.h', '1 stb_truetype', '1 stb_vorbis', 'stb_rect_pack', '1 stb library w/no tag', 'stb_dxt', '1 stb_sprintf']",https://github.com/nothings/stb/pull/561,https://github.com/luzpaz,4,https://github.com/nothings/stb/pull/561#issuecomment-377316573,Found via codespell -q 3,"Please merge
memononen/nanovg#457",True,{}
nothings/stb,https://github.com/nothings/stb,561,2018-02-12T18:16:34Z,2019-02-07T13:00:51Z,2019-02-07T17:44:56Z,CLOSED,False,33,33,12,https://github.com/luzpaz,Misc. comment typos,1,"['1 stb_image', '1 stb_image_write', 'stb.h', '1 stb_truetype', '1 stb_vorbis', 'stb_rect_pack', '1 stb library w/no tag', 'stb_dxt', '1 stb_sprintf']",https://github.com/nothings/stb/pull/561,https://github.com/luzpaz,5,https://github.com/nothings/stb/pull/561#issuecomment-388674386,Found via codespell -q 3,Soft bump,True,{}
nothings/stb,https://github.com/nothings/stb,561,2018-02-12T18:16:34Z,2019-02-07T13:00:51Z,2019-02-07T17:44:56Z,CLOSED,False,33,33,12,https://github.com/luzpaz,Misc. comment typos,1,"['1 stb_image', '1 stb_image_write', 'stb.h', '1 stb_truetype', '1 stb_vorbis', 'stb_rect_pack', '1 stb library w/no tag', 'stb_dxt', '1 stb_sprintf']",https://github.com/nothings/stb/pull/561,https://github.com/nothings,6,https://github.com/nothings/stb/pull/561#issuecomment-388692914,Found via codespell -q 3,"You don't need to bump, I'll get to it when I get to it.",True,{}
nothings/stb,https://github.com/nothings/stb,561,2018-02-12T18:16:34Z,2019-02-07T13:00:51Z,2019-02-07T17:44:56Z,CLOSED,False,33,33,12,https://github.com/luzpaz,Misc. comment typos,1,"['1 stb_image', '1 stb_image_write', 'stb.h', '1 stb_truetype', '1 stb_vorbis', 'stb_rect_pack', '1 stb library w/no tag', 'stb_dxt', '1 stb_sprintf']",https://github.com/nothings/stb/pull/561,https://github.com/nothings,7,https://github.com/nothings/stb/pull/561#issuecomment-461409452,Found via codespell -q 3,"Finally merged for next release, thank you for your submission and your patience.",True,{'THUMBS_UP': ['https://github.com/luzpaz']}
nothings/stb,https://github.com/nothings/stb,562,2018-02-13T10:27:11Z,2019-02-07T18:25:14Z,2019-02-07T18:25:14Z,MERGED,True,0,3,1,https://github.com/ocornut,stb_reck_pack: Removed unused assigned variables warnings,1,['1 stb library w/no tag'],https://github.com/nothings/stb/pull/562,https://github.com/ocornut,1,https://github.com/nothings/stb/pull/562,"There's a block of code under #ifdef _DEBUG wrap that has those two unused variables.
The full block prior to the patch is copied below. L1/L2 are assigned in the loop but never read.
It's possible that they are frequently useful to have when using a debugger, then instead of merging this patch you could perhaps comment the three lines out?
Copied the patch reported here:
bkaradzic/imgui@1496d97#commitcomment-27523479
#ifdef _DEBUG
   cur = context->active_head;
   while (cur->x < context->width) {
      STBRP_ASSERT(cur->x < cur->next->x);
      cur = cur->next;
   }
   STBRP_ASSERT(cur->next == NULL);

   {
      stbrp_node *L1 = NULL, *L2 = NULL;
      int count=0;
      cur = context->active_head;
      while (cur) {
         L1 = cur;
         cur = cur->next;
         ++count;
      }
      cur = context->free_head;
      while (cur) {
         L2 = cur;
         cur = cur->next;
         ++count;
      }
      STBRP_ASSERT(count == context->num_nodes+2);
   }
#endif

Thank you!","There's a block of code under #ifdef _DEBUG wrap that has those two unused variables.
The full block prior to the patch is copied below. L1/L2 are assigned in the loop but never read.
It's possible that they are frequently useful to have when using a debugger, then instead of merging this patch you could perhaps comment the three lines out?
Copied the patch reported here:
bkaradzic/imgui@1496d97#commitcomment-27523479
#ifdef _DEBUG
   cur = context->active_head;
   while (cur->x < context->width) {
      STBRP_ASSERT(cur->x < cur->next->x);
      cur = cur->next;
   }
   STBRP_ASSERT(cur->next == NULL);

   {
      stbrp_node *L1 = NULL, *L2 = NULL;
      int count=0;
      cur = context->active_head;
      while (cur) {
         L1 = cur;
         cur = cur->next;
         ++count;
      }
      cur = context->free_head;
      while (cur) {
         L2 = cur;
         cur = cur->next;
         ++count;
      }
      STBRP_ASSERT(count == context->num_nodes+2);
   }
#endif

Thank you!",True,{}
nothings/stb,https://github.com/nothings/stb,563,2018-02-13T18:36:23Z,2019-02-07T08:17:20Z,2019-02-07T08:17:20Z,CLOSED,False,7,7,1,https://github.com/jamesdolan,fixed 'unreferenced formal parameter' warnings in stb_image,1,[],https://github.com/nothings/stb/pull/563,https://github.com/jamesdolan,1,https://github.com/nothings/stb/pull/563,"Fixed some warnings introduced recently.
stb_image.h(6339): error C2220: warning treated as error - no 'object' file generated
stb_image.h(6339): warning C4100: 'req_comp': unreferenced formal parameter
stb_image.h(6563): warning C4100: 'ri': unreferenced formal parameter","Fixed some warnings introduced recently.
stb_image.h(6339): error C2220: warning treated as error - no 'object' file generated
stb_image.h(6339): warning C4100: 'req_comp': unreferenced formal parameter
stb_image.h(6563): warning C4100: 'ri': unreferenced formal parameter",True,{}
nothings/stb,https://github.com/nothings/stb,563,2018-02-13T18:36:23Z,2019-02-07T08:17:20Z,2019-02-07T08:17:20Z,CLOSED,False,7,7,1,https://github.com/jamesdolan,fixed 'unreferenced formal parameter' warnings in stb_image,1,[],https://github.com/nothings/stb/pull/563,https://github.com/technosaurus,2,https://github.com/nothings/stb/pull/563#issuecomment-384056090,"Fixed some warnings introduced recently.
stb_image.h(6339): error C2220: warning treated as error - no 'object' file generated
stb_image.h(6339): warning C4100: 'req_comp': unreferenced formal parameter
stb_image.h(6563): warning C4100: 'ri': unreferenced formal parameter","You can just use (void)param; to silence the warning where the parameter is not used.
As it is, it removes functionality where it was used and deletes the wrong parameter in others.
Do not merge as is.",True,{}
nothings/stb,https://github.com/nothings/stb,563,2018-02-13T18:36:23Z,2019-02-07T08:17:20Z,2019-02-07T08:17:20Z,CLOSED,False,7,7,1,https://github.com/jamesdolan,fixed 'unreferenced formal parameter' warnings in stb_image,1,[],https://github.com/nothings/stb/pull/563,https://github.com/nothings,3,https://github.com/nothings/stb/pull/563#issuecomment-461324939,"Fixed some warnings introduced recently.
stb_image.h(6339): error C2220: warning treated as error - no 'object' file generated
stb_image.h(6339): warning C4100: 'req_comp': unreferenced formal parameter
stb_image.h(6563): warning C4100: 'ri': unreferenced formal parameter",Superseded by #662.,True,{}
nothings/stb,https://github.com/nothings/stb,564,2018-02-15T15:15:36Z,2018-02-15T15:16:05Z,2018-02-15T15:16:05Z,CLOSED,False,1210,0,10,https://github.com/mattparks,Merged from master,2,[],https://github.com/nothings/stb/pull/564,https://github.com/mattparks,1,https://github.com/nothings/stb/pull/564,"Delete this list before clicking CREATE PULL REQUEST
Make sure you're using a special branch just for this pull request. (Sometimes people unknowingly use a default branch, then later update that branch, which updates the pull request with the other changes if it hasn't been merged yet.)
Do NOT update the version number in the file. (This just causes conflicts.)
Do add your name to the list of contributors. (Don't worry about the formatting.) I'll try to remember to add it if you don't, but I sometimes forget as it's an extra step.

If you get something above wrong, don't fret it, it's not the end of the world.","Delete this list before clicking CREATE PULL REQUEST
Make sure you're using a special branch just for this pull request. (Sometimes people unknowingly use a default branch, then later update that branch, which updates the pull request with the other changes if it hasn't been merged yet.)
Do NOT update the version number in the file. (This just causes conflicts.)
Do add your name to the list of contributors. (Don't worry about the formatting.) I'll try to remember to add it if you don't, but I sometimes forget as it's an extra step.

If you get something above wrong, don't fret it, it's not the end of the world.",True,{}
nothings/stb,https://github.com/nothings/stb,568,2018-02-21T02:40:46Z,2019-02-07T13:56:57Z,2019-02-07T14:04:11Z,CLOSED,False,60,0,2,https://github.com/jrsmith17,Re added unicode filename support for stb_image and stb_image_write w…,1,"['1 stb_image', '1 stb_image_write']",https://github.com/nothings/stb/pull/568,https://github.com/jrsmith17,1,https://github.com/nothings/stb/pull/568,"@rygorous
Apologies for needing to do this twice. I thought I had gone back and cleaned up enough of the white space issues to be clear, but I definitely missed some.
Original PR can be referenced here","@rygorous
Apologies for needing to do this twice. I thought I had gone back and cleaned up enough of the white space issues to be clear, but I definitely missed some.
Original PR can be referenced here",True,"{'THUMBS_UP': ['https://github.com/Pokechu22', 'https://github.com/KodeAndGame']}"
nothings/stb,https://github.com/nothings/stb,568,2018-02-21T02:40:46Z,2019-02-07T13:56:57Z,2019-02-07T14:04:11Z,CLOSED,False,60,0,2,https://github.com/jrsmith17,Re added unicode filename support for stb_image and stb_image_write w…,1,"['1 stb_image', '1 stb_image_write']",https://github.com/nothings/stb/pull/568,https://github.com/rygorous,2,https://github.com/nothings/stb/pull/568#issuecomment-367202306,"@rygorous
Apologies for needing to do this twice. I thought I had gone back and cleaned up enough of the white space issues to be clear, but I definitely missed some.
Original PR can be referenced here","You don't need to apologize! I was just trying to explain why the giant diffs are bad news. :)
This looks much clearer, thanks. We'll have a look at this for the next release.",True,{}
nothings/stb,https://github.com/nothings/stb,568,2018-02-21T02:40:46Z,2019-02-07T13:56:57Z,2019-02-07T14:04:11Z,CLOSED,False,60,0,2,https://github.com/jrsmith17,Re added unicode filename support for stb_image and stb_image_write w…,1,"['1 stb_image', '1 stb_image_write']",https://github.com/nothings/stb/pull/568,https://github.com/nothings,3,https://github.com/nothings/stb/pull/568#issuecomment-461428582,"@rygorous
Apologies for needing to do this twice. I thought I had gone back and cleaned up enough of the white space issues to be clear, but I definitely missed some.
Original PR can be referenced here","Merged for next release. Thanks for your patience.
I significantly changed it to eliminate the mallocs and to add an explicit #define that triggers it.",True,{'THUMBS_UP': ['https://github.com/jrsmith17']}
nothings/stb,https://github.com/nothings/stb,570,2018-02-23T02:37:34Z,2020-02-02T15:17:35Z,2020-02-02T15:17:35Z,CLOSED,False,17,12,1,https://github.com/pps83,stb_dxt: fix constant color check,2,"['stb_dxt', '4 need data']",https://github.com/nothings/stb/pull/570,https://github.com/pps83,1,https://github.com/nothings/stb/pull/570,"original constant color check fix obviously didn't work when request was to compress without alpha.
Code is updated to fix the issue and avoid creating temporary copy of the input buffer.
Spurious spaces were also picked up by my editor, if you prefer I may update Cl to remove them.
Thanks for stb.","original constant color check fix obviously didn't work when request was to compress without alpha.
Code is updated to fix the issue and avoid creating temporary copy of the input buffer.
Spurious spaces were also picked up by my editor, if you prefer I may update Cl to remove them.
Thanks for stb.",True,{}
nothings/stb,https://github.com/nothings/stb,570,2018-02-23T02:37:34Z,2020-02-02T15:17:35Z,2020-02-02T15:17:35Z,CLOSED,False,17,12,1,https://github.com/pps83,stb_dxt: fix constant color check,2,"['stb_dxt', '4 need data']",https://github.com/nothings/stb/pull/570,https://github.com/pps83,2,https://github.com/nothings/stb/pull/570#issuecomment-367895797,"original constant color check fix obviously didn't work when request was to compress without alpha.
Code is updated to fix the issue and avoid creating temporary copy of the input buffer.
Spurious spaces were also picked up by my editor, if you prefer I may update Cl to remove them.
Thanks for stb.",second commit adds constant alpha optimization,True,{}
nothings/stb,https://github.com/nothings/stb,570,2018-02-23T02:37:34Z,2020-02-02T15:17:35Z,2020-02-02T15:17:35Z,CLOSED,False,17,12,1,https://github.com/pps83,stb_dxt: fix constant color check,2,"['stb_dxt', '4 need data']",https://github.com/nothings/stb/pull/570,https://github.com/nothings,3,https://github.com/nothings/stb/pull/570#issuecomment-367901038,"original constant color check fix obviously didn't work when request was to compress without alpha.
Code is updated to fix the issue and avoid creating temporary copy of the input buffer.
Spurious spaces were also picked up by my editor, if you prefer I may update Cl to remove them.
Thanks for stb.","Yeah, please remove the whitespace changes (you can submit them as a separate PR if you want), it makes it too hard to read the diffs on the web.",True,{}
nothings/stb,https://github.com/nothings/stb,570,2018-02-23T02:37:34Z,2020-02-02T15:17:35Z,2020-02-02T15:17:35Z,CLOSED,False,17,12,1,https://github.com/pps83,stb_dxt: fix constant color check,2,"['stb_dxt', '4 need data']",https://github.com/nothings/stb/pull/570,https://github.com/pps83,4,https://github.com/nothings/stb/pull/570#issuecomment-367921322,"original constant color check fix obviously didn't work when request was to compress without alpha.
Code is updated to fix the issue and avoid creating temporary copy of the input buffer.
Spurious spaces were also picked up by my editor, if you prefer I may update Cl to remove them.
Thanks for stb.","yes, github is missing ignore whitespace button. PR updated, whitespace changes removed.",True,{}
nothings/stb,https://github.com/nothings/stb,570,2018-02-23T02:37:34Z,2020-02-02T15:17:35Z,2020-02-02T15:17:35Z,CLOSED,False,17,12,1,https://github.com/pps83,stb_dxt: fix constant color check,2,"['stb_dxt', '4 need data']",https://github.com/nothings/stb/pull/570,https://github.com/nothings,5,https://github.com/nothings/stb/pull/570#issuecomment-462123787,"original constant color check fix obviously didn't work when request was to compress without alpha.
Code is updated to fix the issue and avoid creating temporary copy of the input buffer.
Spurious spaces were also picked up by my editor, if you prefer I may update Cl to remove them.
Thanks for stb.","I'm confused what the actual bug is, other than the documentation not being clear. You always have to pass RGBA color, and if you're not compressing with alpha, the A should be constant across all pixels. If you do that, I don't think there's a bug?
As far as I can tell your fix handles the case where the user passes in RGBA with varying A and says to ignore the alpha (which I agree the current documentation makes it sound like it's ok). But your fix introduces the assumption that the platform is little-endian, which will become a drawback if big-endian machines ever become popular again. So just changing the documentation to match the implementation is probably a safer fix.",True,{}
nothings/stb,https://github.com/nothings/stb,570,2018-02-23T02:37:34Z,2020-02-02T15:17:35Z,2020-02-02T15:17:35Z,CLOSED,False,17,12,1,https://github.com/pps83,stb_dxt: fix constant color check,2,"['stb_dxt', '4 need data']",https://github.com/nothings/stb/pull/570,https://github.com/pps83,6,https://github.com/nothings/stb/pull/570#issuecomment-462144938,"original constant color check fix obviously didn't work when request was to compress without alpha.
Code is updated to fix the issue and avoid creating temporary copy of the input buffer.
Spurious spaces were also picked up by my editor, if you prefer I may update Cl to remove them.
Thanks for stb.","I'm confused what the actual bug is, other than the documentation not being clear. You always have to pass RGBA color, and if you're not compressing with alpha, the A should be constant across all pixels. If you do that, I don't think there's a bug?

Title of the commit could be improved to properly reflect what the change does. Overall, these are the changes:

properly handle color data with varying alpha even if alpha=false is specified
avoid copying to temporary stack buffer and clearing alpha if alpha=true is specified
fast path check for constant alpha (similar to fast path for constant color).

currently fast path for constant color won't work if alpha=false and color data actually contains varying alpha.

As far as I can tell your fix handles the case where the user passes in RGBA with varying A and says to ignore the alpha (which I agree the current documentation makes it sound like it's ok). But your fix introduces the assumption that the platform is little-endian, which will become a drawback if big-endian machines ever become popular again. So just changing the documentation to match the implementation is probably a safer fix.

My code doesn't introduce that assumption, it was always there:

data[i][3] = 255;

Also, imo it's not not about BE being popular one day again (which is unlikely), but about what color format is expected by dxt compressor: even on BE platform you'd probably need to have colors in in the same format.",True,{}
nothings/stb,https://github.com/nothings/stb,570,2018-02-23T02:37:34Z,2020-02-02T15:17:35Z,2020-02-02T15:17:35Z,CLOSED,False,17,12,1,https://github.com/pps83,stb_dxt: fix constant color check,2,"['stb_dxt', '4 need data']",https://github.com/nothings/stb/pull/570,https://github.com/nothings,7,https://github.com/nothings/stb/pull/570#issuecomment-462161046,"original constant color check fix obviously didn't work when request was to compress without alpha.
Code is updated to fix the issue and avoid creating temporary copy of the input buffer.
Spurious spaces were also picked up by my editor, if you prefer I may update Cl to remove them.
Thanks for stb.","The old code assumed byte-order RGBA without any assumptions about endianness. In other words, I believe (although I'm not 100% certain) that it never converts between bytes and dwords anywhere other than that constant check.",True,{}
nothings/stb,https://github.com/nothings/stb,570,2018-02-23T02:37:34Z,2020-02-02T15:17:35Z,2020-02-02T15:17:35Z,CLOSED,False,17,12,1,https://github.com/pps83,stb_dxt: fix constant color check,2,"['stb_dxt', '4 need data']",https://github.com/nothings/stb/pull/570,https://github.com/pps83,8,https://github.com/nothings/stb/pull/570#issuecomment-462205563,"original constant color check fix obviously didn't work when request was to compress without alpha.
Code is updated to fix the issue and avoid creating temporary copy of the input buffer.
Spurious spaces were also picked up by my editor, if you prefer I may update Cl to remove them.
Thanks for stb.","Yes, you are correct, my mistake. Code would need to be updated to handle BE platforms.",True,{}
nothings/stb,https://github.com/nothings/stb,570,2018-02-23T02:37:34Z,2020-02-02T15:17:35Z,2020-02-02T15:17:35Z,CLOSED,False,17,12,1,https://github.com/pps83,stb_dxt: fix constant color check,2,"['stb_dxt', '4 need data']",https://github.com/nothings/stb/pull/570,https://github.com/nothings,9,https://github.com/nothings/stb/pull/570#issuecomment-462207319,"original constant color check fix obviously didn't work when request was to compress without alpha.
Code is updated to fix the issue and avoid creating temporary copy of the input buffer.
Spurious spaces were also picked up by my editor, if you prefer I may update Cl to remove them.
Thanks for stb.","Right, so I think it's better to just say that the ""dummy"" alpha channel has to be constant if you're not using alpha, rather than change the code. Make sense?",True,{}
nothings/stb,https://github.com/nothings/stb,570,2018-02-23T02:37:34Z,2020-02-02T15:17:35Z,2020-02-02T15:17:35Z,CLOSED,False,17,12,1,https://github.com/pps83,stb_dxt: fix constant color check,2,"['stb_dxt', '4 need data']",https://github.com/nothings/stb/pull/570,https://github.com/pps83,10,https://github.com/nothings/stb/pull/570#issuecomment-463080018,"original constant color check fix obviously didn't work when request was to compress without alpha.
Code is updated to fix the issue and avoid creating temporary copy of the input buffer.
Spurious spaces were also picked up by my editor, if you prefer I may update Cl to remove them.
Thanks for stb.","Right, so I think it's better to just say that the ""dummy"" alpha channel has to be constant if you're not using alpha, rather than change the code. Make sense?

Proper ""fix"" would be to update the title of the PR: it's adds a few improvements (2,3) rather than fixing anything.
In any case, constant alpha optimization is a very common case:, why would you compress something that doesn't need to be compressed?",True,{}
nothings/stb,https://github.com/nothings/stb,570,2018-02-23T02:37:34Z,2020-02-02T15:17:35Z,2020-02-02T15:17:35Z,CLOSED,False,17,12,1,https://github.com/pps83,stb_dxt: fix constant color check,2,"['stb_dxt', '4 need data']",https://github.com/nothings/stb/pull/570,https://github.com/nothings,11,https://github.com/nothings/stb/pull/570#issuecomment-469565278,"original constant color check fix obviously didn't work when request was to compress without alpha.
Code is updated to fix the issue and avoid creating temporary copy of the input buffer.
Spurious spaces were also picked up by my editor, if you prefer I may update Cl to remove them.
Thanks for stb.","Is item 2 actually an improvement? Copying introduces overhead, but so does making the color test more complicated. Without performance testing it's not clear to me it's worth changing, and it's definitely not worth changing if it introduces an endianness dependency.
Item 3 seems like a perfectly reasonable idea, although shouldn't the index data be just all 0s? Maybe I'm missing something.",True,{}
nothings/stb,https://github.com/nothings/stb,570,2018-02-23T02:37:34Z,2020-02-02T15:17:35Z,2020-02-02T15:17:35Z,CLOSED,False,17,12,1,https://github.com/pps83,stb_dxt: fix constant color check,2,"['stb_dxt', '4 need data']",https://github.com/nothings/stb/pull/570,https://github.com/nothings,12,https://github.com/nothings/stb/pull/570#issuecomment-581145310,"original constant color check fix obviously didn't work when request was to compress without alpha.
Code is updated to fix the issue and avoid creating temporary copy of the input buffer.
Spurious spaces were also picked up by my editor, if you prefer I may update Cl to remove them.
Thanks for stb.","Ok, submitter didn't reply to my questions, so I'm just going to make the suggested documentation change. Anything that still needs to change can be resubmitted, preferably as separate pull requests given the issues I had with this.",True,{}
nothings/stb,https://github.com/nothings/stb,571,2018-02-23T10:13:56Z,2019-02-07T14:04:25Z,2019-02-07T14:04:25Z,CLOSED,False,1,0,1,https://github.com/ocornut,stb_truetype: fix unused variable warning when asserts are disabled.,1,"['1 stb_truetype', '2 warning']",https://github.com/nothings/stb/pull/571,https://github.com/ocornut,1,https://github.com/nothings/stb/pull/571,"Minor warning fix when asserts are off, pairSetCount is only used for an assert.
(reported to me here ocornut/imgui#1642)","Minor warning fix when asserts are off, pairSetCount is only used for an assert.
(reported to me here ocornut/imgui#1642)",True,{}
nothings/stb,https://github.com/nothings/stb,571,2018-02-23T10:13:56Z,2019-02-07T14:04:25Z,2019-02-07T14:04:25Z,CLOSED,False,1,0,1,https://github.com/ocornut,stb_truetype: fix unused variable warning when asserts are disabled.,1,"['1 stb_truetype', '2 warning']",https://github.com/nothings/stb/pull/571,https://github.com/nothings,2,https://github.com/nothings/stb/pull/571#issuecomment-461431338,"Minor warning fix when asserts are off, pairSetCount is only used for an assert.
(reported to me here ocornut/imgui#1642)",merged for next release,True,{}
nothings/stb,https://github.com/nothings/stb,572,2018-02-26T23:12:44Z,2019-02-07T14:04:37Z,2019-02-07T14:04:37Z,CLOSED,False,1,1,1,https://github.com/poppolopoppo,Fix overflow in stbi_write_hdr_core(),1,"['2 bug', '1 stb_image_write']",https://github.com/nothings/stb/pull/572,https://github.com/poppolopoppo,1,https://github.com/nothings/stb/pull/572,"b056850 left an additional multiplication by x,
leading to overflow in stbiw__write_hdr_scanline().
just removed this little rascal.","b056850 left an additional multiplication by x,
leading to overflow in stbiw__write_hdr_scanline().
just removed this little rascal.",True,{}
nothings/stb,https://github.com/nothings/stb,572,2018-02-26T23:12:44Z,2019-02-07T14:04:37Z,2019-02-07T14:04:37Z,CLOSED,False,1,1,1,https://github.com/poppolopoppo,Fix overflow in stbi_write_hdr_core(),1,"['2 bug', '1 stb_image_write']",https://github.com/nothings/stb/pull/572,https://github.com/nothings,2,https://github.com/nothings/stb/pull/572#issuecomment-368691022,"b056850 left an additional multiplication by x,
leading to overflow in stbiw__write_hdr_scanline().
just removed this little rascal.","haha whoops, thanks!",True,{}
nothings/stb,https://github.com/nothings/stb,572,2018-02-26T23:12:44Z,2019-02-07T14:04:37Z,2019-02-07T14:04:37Z,CLOSED,False,1,1,1,https://github.com/poppolopoppo,Fix overflow in stbi_write_hdr_core(),1,"['2 bug', '1 stb_image_write']",https://github.com/nothings/stb/pull/572,https://github.com/nothings,3,https://github.com/nothings/stb/pull/572#issuecomment-461431416,"b056850 left an additional multiplication by x,
leading to overflow in stbiw__write_hdr_scanline().
just removed this little rascal.",merged for next release,True,{}
nothings/stb,https://github.com/nothings/stb,575,2018-03-08T16:16:23Z,2019-02-07T14:05:58Z,2019-02-07T14:05:58Z,CLOSED,False,1,0,1,https://github.com/ocornut,stb_truetype: Added comment about stbtt_FindGlyphIndex() return value.,1,"['1 stb_truetype', '3 documentation fix']",https://github.com/nothings/stb/pull/575,https://github.com/ocornut,1,https://github.com/nothings/stb/pull/575,"Added a simple comment:
Returns 0 if the character codepoint is not defined in the font.
Based on this thread:
https://twitter.com/ocornut/status/971757064983924742
Looking at the implementation for stbtt_FindGlyphIndex, it's clearly intended at the error value, but it is not obvious to me that that 0 isn't also valid index.","Added a simple comment:
Returns 0 if the character codepoint is not defined in the font.
Based on this thread:
https://twitter.com/ocornut/status/971757064983924742
Looking at the implementation for stbtt_FindGlyphIndex, it's clearly intended at the error value, but it is not obvious to me that that 0 isn't also valid index.",True,{}
nothings/stb,https://github.com/nothings/stb,575,2018-03-08T16:16:23Z,2019-02-07T14:05:58Z,2019-02-07T14:05:58Z,CLOSED,False,1,0,1,https://github.com/ocornut,stb_truetype: Added comment about stbtt_FindGlyphIndex() return value.,1,"['1 stb_truetype', '3 documentation fix']",https://github.com/nothings/stb/pull/575,https://github.com/nothings,2,https://github.com/nothings/stb/pull/575#issuecomment-461431908,"Added a simple comment:
Returns 0 if the character codepoint is not defined in the font.
Based on this thread:
https://twitter.com/ocornut/status/971757064983924742
Looking at the implementation for stbtt_FindGlyphIndex, it's clearly intended at the error value, but it is not obvious to me that that 0 isn't also valid index.",merged in next release,True,{}
nothings/stb,https://github.com/nothings/stb,577,2018-03-12T14:27:46Z,2019-02-07T14:08:10Z,2019-02-07T14:08:22Z,CLOSED,False,288,7,3,https://github.com/zmatsuo,add indexed color image bmp,1,['1 stb_image_write'],https://github.com/nothings/stb/pull/577,https://github.com/zmatsuo,1,https://github.com/nothings/stb/pull/577,"I add indexed color bmp in stbi_write_bmp().
With this PR, we will able to save 1,4,8 bit per pixel.
Please review this.","I add indexed color bmp in stbi_write_bmp().
With this PR, we will able to save 1,4,8 bit per pixel.
Please review this.",True,{}
nothings/stb,https://github.com/nothings/stb,577,2018-03-12T14:27:46Z,2019-02-07T14:08:10Z,2019-02-07T14:08:22Z,CLOSED,False,288,7,3,https://github.com/zmatsuo,add indexed color image bmp,1,['1 stb_image_write'],https://github.com/nothings/stb/pull/577,https://github.com/nothings,2,https://github.com/nothings/stb/pull/577#issuecomment-461432755,"I add indexed color bmp in stbi_write_bmp().
With this PR, we will able to save 1,4,8 bit per pixel.
Please review this.","I think I'd rather stay away from the complexity of indexed/paletted colored support in this library, since that's a huge can of worms. Thanks for your effort though.",True,{}
nothings/stb,https://github.com/nothings/stb,578,2018-03-12T14:45:40Z,2019-03-05T07:10:48Z,2019-03-05T07:10:48Z,CLOSED,False,65,13,2,https://github.com/zmatsuo,Unicode file support 0312,2,['1 stb_image'],https://github.com/nothings/stb/pull/578,https://github.com/zmatsuo,1,https://github.com/nothings/stb/pull/578,cleanup stbi_write_png(),cleanup stbi_write_png(),True,{}
nothings/stb,https://github.com/nothings/stb,578,2018-03-12T14:45:40Z,2019-03-05T07:10:48Z,2019-03-05T07:10:48Z,CLOSED,False,65,13,2,https://github.com/zmatsuo,Unicode file support 0312,2,['1 stb_image'],https://github.com/nothings/stb/pull/578,https://github.com/zmatsuo,2,https://github.com/nothings/stb/pull/578#issuecomment-372538219,cleanup stbi_write_png(),"In order To modify PR a bit, I have created a new PR.
I'm sorry I made it complicated.
#529 (Closed) Add functions with wchar_t to stb_image.h and stb_image_write.h
↓
#557 stb_image unicode support
↓
↓ #559 Support for loading files with unicode names
↓ ↓
#568 Re added unicode filename support for stb_image and stb_image_write w…
↓
#578 Unicode file support 0312
Please close this PR when it becomes unnecessary.",True,{}
nothings/stb,https://github.com/nothings/stb,578,2018-03-12T14:45:40Z,2019-03-05T07:10:48Z,2019-03-05T07:10:48Z,CLOSED,False,65,13,2,https://github.com/zmatsuo,Unicode file support 0312,2,['1 stb_image'],https://github.com/nothings/stb/pull/578,https://github.com/nothings,3,https://github.com/nothings/stb/pull/578#issuecomment-469566051,cleanup stbi_write_png(),Fixed and released a couple weeks ago.,True,{}
nothings/stb,https://github.com/nothings/stb,585,2018-03-22T16:31:08Z,2018-11-23T03:47:14Z,2018-11-23T03:47:14Z,CLOSED,False,1,1,1,https://github.com/syoyo,"Fix `x` was multipled twice, resulting buffer-overrun bug. Fixes #567.",1,[],https://github.com/nothings/stb/pull/585,https://github.com/syoyo,1,https://github.com/nothings/stb/pull/585,This PR should fix #567. I can provide unit test if required.,This PR should fix #567. I can provide unit test if required.,True,"{'THUMBS_UP': ['https://github.com/mosra', 'https://github.com/RichardGe']}"
nothings/stb,https://github.com/nothings/stb,585,2018-03-22T16:31:08Z,2018-11-23T03:47:14Z,2018-11-23T03:47:14Z,CLOSED,False,1,1,1,https://github.com/syoyo,"Fix `x` was multipled twice, resulting buffer-overrun bug. Fixes #567.",1,[],https://github.com/nothings/stb/pull/585,https://github.com/mosra,2,https://github.com/nothings/stb/pull/585#issuecomment-408065099,This PR should fix #567. I can provide unit test if required.,"And fix #619 as well. Any chance this could get merged? :) I'm currently staying on 1.07 to have my code working. For the record, this is the change that introduced the bug.",True,{}
nothings/stb,https://github.com/nothings/stb,585,2018-03-22T16:31:08Z,2018-11-23T03:47:14Z,2018-11-23T03:47:14Z,CLOSED,False,1,1,1,https://github.com/syoyo,"Fix `x` was multipled twice, resulting buffer-overrun bug. Fixes #567.",1,[],https://github.com/nothings/stb/pull/585,https://github.com/rygorous,3,https://github.com/nothings/stb/pull/585#issuecomment-441151411,This PR should fix #567. I can provide unit test if required.,I nominated PR #644 for the fix. We got multiple submissions. Thanks anyway! :),True,{'HOORAY': ['https://github.com/syoyo']}
nothings/stb,https://github.com/nothings/stb,593,2018-04-08T23:27:46Z,2019-02-07T14:51:15Z,2019-02-07T14:51:15Z,CLOSED,False,8,6,1,https://github.com/DanielGibson,stb_image_write.h: Fix jpg flipping for non-multiple-of-8 sizes,1,"['2 bug', '1 stb_image']",https://github.com/nothings/stb/pull/593,https://github.com/DanielGibson,1,https://github.com/nothings/stb/pull/593,"JPG always encodes 8x8 pixel blocks. If the input image does not have
a width or height that's a multiple of 8, the last column or row is just
used multiple times for the remaining pixels of the block.
The original code first calculated p (the index into the pixel data)
with the ""imaginary"" row/colum (that might be up to 7 pixels too far
into each direction) and then subtracted the necessary amount of bytes
if row >= height or col >= width.
That was a bit cryptic (IMHO), and didn't get more readable/obvious when
vertical flipping was added - which introduced a bug, by not taking
stbi__flip_vertically_on_write into account when adjusting p for
row >= height, which lead to negative p, which lead to a crash...
The code should be more obvious (and less buggy) now.
(I wasn't sure about the comments, are they too obvious to be helpful?)
This fixes bug #592","JPG always encodes 8x8 pixel blocks. If the input image does not have
a width or height that's a multiple of 8, the last column or row is just
used multiple times for the remaining pixels of the block.
The original code first calculated p (the index into the pixel data)
with the ""imaginary"" row/colum (that might be up to 7 pixels too far
into each direction) and then subtracted the necessary amount of bytes
if row >= height or col >= width.
That was a bit cryptic (IMHO), and didn't get more readable/obvious when
vertical flipping was added - which introduced a bug, by not taking
stbi__flip_vertically_on_write into account when adjusting p for
row >= height, which lead to negative p, which lead to a crash...
The code should be more obvious (and less buggy) now.
(I wasn't sure about the comments, are they too obvious to be helpful?)
This fixes bug #592",True,{}
nothings/stb,https://github.com/nothings/stb,593,2018-04-08T23:27:46Z,2019-02-07T14:51:15Z,2019-02-07T14:51:15Z,CLOSED,False,8,6,1,https://github.com/DanielGibson,stb_image_write.h: Fix jpg flipping for non-multiple-of-8 sizes,1,"['2 bug', '1 stb_image']",https://github.com/nothings/stb/pull/593,https://github.com/rygorous,2,https://github.com/nothings/stb/pull/593#issuecomment-432073263,"JPG always encodes 8x8 pixel blocks. If the input image does not have
a width or height that's a multiple of 8, the last column or row is just
used multiple times for the remaining pixels of the block.
The original code first calculated p (the index into the pixel data)
with the ""imaginary"" row/colum (that might be up to 7 pixels too far
into each direction) and then subtracted the necessary amount of bytes
if row >= height or col >= width.
That was a bit cryptic (IMHO), and didn't get more readable/obvious when
vertical flipping was added - which introduced a bug, by not taking
stbi__flip_vertically_on_write into account when adjusting p for
row >= height, which lead to negative p, which lead to a crash...
The code should be more obvious (and less buggy) now.
(I wasn't sure about the comments, are they too obvious to be helpful?)
This fixes bug #592","Patch looks good but I'll probably change it before merging to compute the clamped row in the outer loop, because this just feels bad as-is. :)
Anyway, thanks, will merge this soon-ish.",True,{}
nothings/stb,https://github.com/nothings/stb,593,2018-04-08T23:27:46Z,2019-02-07T14:51:15Z,2019-02-07T14:51:15Z,CLOSED,False,8,6,1,https://github.com/DanielGibson,stb_image_write.h: Fix jpg flipping for non-multiple-of-8 sizes,1,"['2 bug', '1 stb_image']",https://github.com/nothings/stb/pull/593,https://github.com/fungos,3,https://github.com/nothings/stb/pull/593#issuecomment-437230917,"JPG always encodes 8x8 pixel blocks. If the input image does not have
a width or height that's a multiple of 8, the last column or row is just
used multiple times for the remaining pixels of the block.
The original code first calculated p (the index into the pixel data)
with the ""imaginary"" row/colum (that might be up to 7 pixels too far
into each direction) and then subtracted the necessary amount of bytes
if row >= height or col >= width.
That was a bit cryptic (IMHO), and didn't get more readable/obvious when
vertical flipping was added - which introduced a bug, by not taking
stbi__flip_vertically_on_write into account when adjusting p for
row >= height, which lead to negative p, which lead to a crash...
The code should be more obvious (and less buggy) now.
(I wasn't sure about the comments, are they too obvious to be helpful?)
This fixes bug #592",Just got bitten by this one. I'm now using the patch from @DanielGibson.,True,{}
nothings/stb,https://github.com/nothings/stb,593,2018-04-08T23:27:46Z,2019-02-07T14:51:15Z,2019-02-07T14:51:15Z,CLOSED,False,8,6,1,https://github.com/DanielGibson,stb_image_write.h: Fix jpg flipping for non-multiple-of-8 sizes,1,"['2 bug', '1 stb_image']",https://github.com/nothings/stb/pull/593,https://github.com/nothings,4,https://github.com/nothings/stb/pull/593#issuecomment-461451898,"JPG always encodes 8x8 pixel blocks. If the input image does not have
a width or height that's a multiple of 8, the last column or row is just
used multiple times for the remaining pixels of the block.
The original code first calculated p (the index into the pixel data)
with the ""imaginary"" row/colum (that might be up to 7 pixels too far
into each direction) and then subtracted the necessary amount of bytes
if row >= height or col >= width.
That was a bit cryptic (IMHO), and didn't get more readable/obvious when
vertical flipping was added - which introduced a bug, by not taking
stbi__flip_vertically_on_write into account when adjusting p for
row >= height, which lead to negative p, which lead to a crash...
The code should be more obvious (and less buggy) now.
(I wasn't sure about the comments, are they too obvious to be helpful?)
This fixes bug #592",merged for next release,True,{}
nothings/stb,https://github.com/nothings/stb,594,2018-04-11T10:56:42Z,2018-06-13T14:35:46Z,2018-06-13T14:35:46Z,CLOSED,False,1,1,1,https://github.com/kopaka1822,fixed a bug in stbi_write_hdr_core that prevented hdr images from bei…,1,[],https://github.com/nothings/stb/pull/594,https://github.com/kopaka1822,1,https://github.com/nothings/stb/pull/594,The scanline offset was multiplied by x*x instead of just x,The scanline offset was multiplied by x*x instead of just x,True,{}
nothings/stb,https://github.com/nothings/stb,594,2018-04-11T10:56:42Z,2018-06-13T14:35:46Z,2018-06-13T14:35:46Z,CLOSED,False,1,1,1,https://github.com/kopaka1822,fixed a bug in stbi_write_hdr_core that prevented hdr images from bei…,1,[],https://github.com/nothings/stb/pull/594,https://github.com/nothings,2,https://github.com/nothings/stb/pull/594#issuecomment-396960343,The scanline offset was multiplied by x*x instead of just x,dupe of #572,True,{}
nothings/stb,https://github.com/nothings/stb,596,2018-04-25T12:20:34Z,2019-02-07T14:58:20Z,2019-03-03T16:57:35Z,CLOSED,False,21,21,1,https://github.com/kroko,fix comma warnings when building with -Wcomma,1,"['1 stb_image', '2 warning Wall/static-analysis']",https://github.com/nothings/stb/pull/596,https://github.com/kroko,1,https://github.com/nothings/stb/pull/596,"as the title says, this fixes comma warnings when building with -Wcomma.  it also addresses  #515 as vanilla Xcode project configuration will call clang with this flag.","as the title says, this fixes comma warnings when building with -Wcomma.  it also addresses  #515 as vanilla Xcode project configuration will call clang with this flag.",True,{}
nothings/stb,https://github.com/nothings/stb,596,2018-04-25T12:20:34Z,2019-02-07T14:58:20Z,2019-03-03T16:57:35Z,CLOSED,False,21,21,1,https://github.com/kroko,fix comma warnings when building with -Wcomma,1,"['1 stb_image', '2 warning Wall/static-analysis']",https://github.com/nothings/stb/pull/596,https://github.com/nothings,2,https://github.com/nothings/stb/pull/596#issuecomment-461454811,"as the title says, this fixes comma warnings when building with -Wcomma.  it also addresses  #515 as vanilla Xcode project configuration will call clang with this flag.","This is pretty lame, because I use commas as a way to show a semantic grouping, like assigning all four channels of an RGBA pixel at once... but merged for next release.",True,{'THUMBS_UP': ['https://github.com/kroko']}
nothings/stb,https://github.com/nothings/stb,596,2018-04-25T12:20:34Z,2019-02-07T14:58:20Z,2019-03-03T16:57:35Z,CLOSED,False,21,21,1,https://github.com/kroko,fix comma warnings when building with -Wcomma,1,"['1 stb_image', '2 warning Wall/static-analysis']",https://github.com/nothings/stb/pull/596,https://github.com/kroko,3,https://github.com/nothings/stb/pull/596#issuecomment-469041576,"as the title says, this fixes comma warnings when building with -Wcomma.  it also addresses  #515 as vanilla Xcode project configuration will call clang with this flag.","well, don't be sad, because IMHO semantic grouping stays as you are doing these assignments in one line meaning
a=1 b=2 c=3
insted of
a=1
b=2
c=3
and it already serves as semantic grouping.
thank you!",True,{}
nothings/stb,https://github.com/nothings/stb,598,2018-04-28T05:40:02Z,,2019-03-12T06:13:18Z,OPEN,False,58,0,2,https://github.com/AndrewJDR,Added appveyor support for Windows builds.,1,"['1 tests', 'needs significant new work']",https://github.com/nothings/stb/pull/598,https://github.com/AndrewJDR,1,https://github.com/nothings/stb/pull/598,"This adds appveyor.com support for VS2008 - VS2017. This works similarly to travis-ci, giving build success/failure reports any time someone submits a PR. You can see what it looks like here:
https://ci.appveyor.com/project/AndrewJDR/stb/build/1.0.24
And on my fork (see green checkmark): https://github.com/AndrewJDR/stb/commits/add_appveyor_windows
It also runs the test executables just to make sure they don't crash or whatever. Not sure if that's necessary, but why not.
You'll have to sign up for it to work, similar to travis-ci. Signup is straightforward, and free for OSS projects. Build-wise, I used nmake for now by making a copy of the original tests/Makefile and removing a few flags that cl doesn't understand, but you can replace nmake with whatever you want later by changing these lines in appveyor.yml:
  - call ""C:\\Program Files (x86)\\%VSINSTALL%\vcvarsall.bat"" %platform%
  - cd tests
  - nmake /f Makefile.nmake

I don't think travis supports windows, or I would have just used that. travis + appveyor seems to be a common combination on OSS projects for this reason.","This adds appveyor.com support for VS2008 - VS2017. This works similarly to travis-ci, giving build success/failure reports any time someone submits a PR. You can see what it looks like here:
https://ci.appveyor.com/project/AndrewJDR/stb/build/1.0.24
And on my fork (see green checkmark): https://github.com/AndrewJDR/stb/commits/add_appveyor_windows
It also runs the test executables just to make sure they don't crash or whatever. Not sure if that's necessary, but why not.
You'll have to sign up for it to work, similar to travis-ci. Signup is straightforward, and free for OSS projects. Build-wise, I used nmake for now by making a copy of the original tests/Makefile and removing a few flags that cl doesn't understand, but you can replace nmake with whatever you want later by changing these lines in appveyor.yml:
  - call ""C:\\Program Files (x86)\\%VSINSTALL%\vcvarsall.bat"" %platform%
  - cd tests
  - nmake /f Makefile.nmake

I don't think travis supports windows, or I would have just used that. travis + appveyor seems to be a common combination on OSS projects for this reason.",True,{'HOORAY': ['https://github.com/zao']}
nothings/stb,https://github.com/nothings/stb,598,2018-04-28T05:40:02Z,,2019-03-12T06:13:18Z,OPEN,False,58,0,2,https://github.com/AndrewJDR,Added appveyor support for Windows builds.,1,"['1 tests', 'needs significant new work']",https://github.com/nothings/stb/pull/598,https://github.com/AndrewJDR,2,https://github.com/nothings/stb/pull/598#issuecomment-385142904,"This adds appveyor.com support for VS2008 - VS2017. This works similarly to travis-ci, giving build success/failure reports any time someone submits a PR. You can see what it looks like here:
https://ci.appveyor.com/project/AndrewJDR/stb/build/1.0.24
And on my fork (see green checkmark): https://github.com/AndrewJDR/stb/commits/add_appveyor_windows
It also runs the test executables just to make sure they don't crash or whatever. Not sure if that's necessary, but why not.
You'll have to sign up for it to work, similar to travis-ci. Signup is straightforward, and free for OSS projects. Build-wise, I used nmake for now by making a copy of the original tests/Makefile and removing a few flags that cl doesn't understand, but you can replace nmake with whatever you want later by changing these lines in appveyor.yml:
  - call ""C:\\Program Files (x86)\\%VSINSTALL%\vcvarsall.bat"" %platform%
  - cd tests
  - nmake /f Makefile.nmake

I don't think travis supports windows, or I would have just used that. travis + appveyor seems to be a common combination on OSS projects for this reason.","Another quick note -- it does both x86 and x64 builds for vs2013-vs2017, but with vs2008-vs2012, x64 builds are not very nicely supported with appveyor so I just stuck with x86 there.",True,{}
nothings/stb,https://github.com/nothings/stb,598,2018-04-28T05:40:02Z,,2019-03-12T06:13:18Z,OPEN,False,58,0,2,https://github.com/AndrewJDR,Added appveyor support for Windows builds.,1,"['1 tests', 'needs significant new work']",https://github.com/nothings/stb/pull/598,https://github.com/nothings,3,https://github.com/nothings/stb/pull/598#issuecomment-469567534,"This adds appveyor.com support for VS2008 - VS2017. This works similarly to travis-ci, giving build success/failure reports any time someone submits a PR. You can see what it looks like here:
https://ci.appveyor.com/project/AndrewJDR/stb/build/1.0.24
And on my fork (see green checkmark): https://github.com/AndrewJDR/stb/commits/add_appveyor_windows
It also runs the test executables just to make sure they don't crash or whatever. Not sure if that's necessary, but why not.
You'll have to sign up for it to work, similar to travis-ci. Signup is straightforward, and free for OSS projects. Build-wise, I used nmake for now by making a copy of the original tests/Makefile and removing a few flags that cl doesn't understand, but you can replace nmake with whatever you want later by changing these lines in appveyor.yml:
  - call ""C:\\Program Files (x86)\\%VSINSTALL%\vcvarsall.bat"" %platform%
  - cd tests
  - nmake /f Makefile.nmake

I don't think travis supports windows, or I would have just used that. travis + appveyor seems to be a common combination on OSS projects for this reason.","At this point I already have two different makefile-like things--the Makefile for travis, and my build matrix for my local VS builds, test.sbm: https://github.com/nothings/stb/blob/master/tests/test.sbm
I don't want to maintain yet ANOTHER redundant Makefile, so I don't think I'm going to do this until I'm ready to have a single program generate all the makefiles/etc. from a single list of tests.
It doesn't need to be a complicated input file, e.g. it could just be each line is a list of all the c/cpp files to link for a single project, and then generate the rest of the Makefile by very simple logic with that. I wouldn't recommend anybody try to implement that without talking to me first, because I'm not sure what it'll take for it to be a system I'm comfortable with having.",True,{}
nothings/stb,https://github.com/nothings/stb,598,2018-04-28T05:40:02Z,,2019-03-12T06:13:18Z,OPEN,False,58,0,2,https://github.com/AndrewJDR,Added appveyor support for Windows builds.,1,"['1 tests', 'needs significant new work']",https://github.com/nothings/stb/pull/598,https://github.com/AndrewJDR,4,https://github.com/nothings/stb/pull/598#issuecomment-469588188,"This adds appveyor.com support for VS2008 - VS2017. This works similarly to travis-ci, giving build success/failure reports any time someone submits a PR. You can see what it looks like here:
https://ci.appveyor.com/project/AndrewJDR/stb/build/1.0.24
And on my fork (see green checkmark): https://github.com/AndrewJDR/stb/commits/add_appveyor_windows
It also runs the test executables just to make sure they don't crash or whatever. Not sure if that's necessary, but why not.
You'll have to sign up for it to work, similar to travis-ci. Signup is straightforward, and free for OSS projects. Build-wise, I used nmake for now by making a copy of the original tests/Makefile and removing a few flags that cl doesn't understand, but you can replace nmake with whatever you want later by changing these lines in appveyor.yml:
  - call ""C:\\Program Files (x86)\\%VSINSTALL%\vcvarsall.bat"" %platform%
  - cd tests
  - nmake /f Makefile.nmake

I don't think travis supports windows, or I would have just used that. travis + appveyor seems to be a common combination on OSS projects for this reason.","@nothings It may be quite possible to re-use the travis makefile for appveyor with very few changes to it, so that we are not adding an additional makefile into the mix.
Is that something you'd be interested in merging? If so, I can look into it.",True,{}
nothings/stb,https://github.com/nothings/stb,598,2018-04-28T05:40:02Z,,2019-03-12T06:13:18Z,OPEN,False,58,0,2,https://github.com/AndrewJDR,Added appveyor support for Windows builds.,1,"['1 tests', 'needs significant new work']",https://github.com/nothings/stb/pull/598,https://github.com/nothings,5,https://github.com/nothings/stb/pull/598#issuecomment-469665167,"This adds appveyor.com support for VS2008 - VS2017. This works similarly to travis-ci, giving build success/failure reports any time someone submits a PR. You can see what it looks like here:
https://ci.appveyor.com/project/AndrewJDR/stb/build/1.0.24
And on my fork (see green checkmark): https://github.com/AndrewJDR/stb/commits/add_appveyor_windows
It also runs the test executables just to make sure they don't crash or whatever. Not sure if that's necessary, but why not.
You'll have to sign up for it to work, similar to travis-ci. Signup is straightforward, and free for OSS projects. Build-wise, I used nmake for now by making a copy of the original tests/Makefile and removing a few flags that cl doesn't understand, but you can replace nmake with whatever you want later by changing these lines in appveyor.yml:
  - call ""C:\\Program Files (x86)\\%VSINSTALL%\vcvarsall.bat"" %platform%
  - cd tests
  - nmake /f Makefile.nmake

I don't think travis supports windows, or I would have just used that. travis + appveyor seems to be a common combination on OSS projects for this reason.",Sure.,True,{}
nothings/stb,https://github.com/nothings/stb,598,2018-04-28T05:40:02Z,,2019-03-12T06:13:18Z,OPEN,False,58,0,2,https://github.com/AndrewJDR,Added appveyor support for Windows builds.,1,"['1 tests', 'needs significant new work']",https://github.com/nothings/stb/pull/598,https://github.com/AndrewJDR,6,https://github.com/nothings/stb/pull/598#issuecomment-471802456,"This adds appveyor.com support for VS2008 - VS2017. This works similarly to travis-ci, giving build success/failure reports any time someone submits a PR. You can see what it looks like here:
https://ci.appveyor.com/project/AndrewJDR/stb/build/1.0.24
And on my fork (see green checkmark): https://github.com/AndrewJDR/stb/commits/add_appveyor_windows
It also runs the test executables just to make sure they don't crash or whatever. Not sure if that's necessary, but why not.
You'll have to sign up for it to work, similar to travis-ci. Signup is straightforward, and free for OSS projects. Build-wise, I used nmake for now by making a copy of the original tests/Makefile and removing a few flags that cl doesn't understand, but you can replace nmake with whatever you want later by changing these lines in appveyor.yml:
  - call ""C:\\Program Files (x86)\\%VSINSTALL%\vcvarsall.bat"" %platform%
  - cd tests
  - nmake /f Makefile.nmake

I don't think travis supports windows, or I would have just used that. travis + appveyor seems to be a common combination on OSS projects for this reason.","I looked into it, but nmake and gnu make lack a unified way of expressing an if statement, so it's not trivial and clean.
Is the logic so simple that it could be expressed via the C preprocessor? If both the input file and the simple logic you described are sufficiently simple, the input file could just be run through cpp (unix) / cl /E (windows) to create the needed makefiles...",True,{}
nothings/stb,https://github.com/nothings/stb,598,2018-04-28T05:40:02Z,,2019-03-12T06:13:18Z,OPEN,False,58,0,2,https://github.com/AndrewJDR,Added appveyor support for Windows builds.,1,"['1 tests', 'needs significant new work']",https://github.com/nothings/stb/pull/598,https://github.com/nothings,7,https://github.com/nothings/stb/pull/598#issuecomment-471817597,"This adds appveyor.com support for VS2008 - VS2017. This works similarly to travis-ci, giving build success/failure reports any time someone submits a PR. You can see what it looks like here:
https://ci.appveyor.com/project/AndrewJDR/stb/build/1.0.24
And on my fork (see green checkmark): https://github.com/AndrewJDR/stb/commits/add_appveyor_windows
It also runs the test executables just to make sure they don't crash or whatever. Not sure if that's necessary, but why not.
You'll have to sign up for it to work, similar to travis-ci. Signup is straightforward, and free for OSS projects. Build-wise, I used nmake for now by making a copy of the original tests/Makefile and removing a few flags that cl doesn't understand, but you can replace nmake with whatever you want later by changing these lines in appveyor.yml:
  - call ""C:\\Program Files (x86)\\%VSINSTALL%\vcvarsall.bat"" %platform%
  - cd tests
  - nmake /f Makefile.nmake

I don't think travis supports windows, or I would have just used that. travis + appveyor seems to be a common combination on OSS projects for this reason.",I'd rather not use the C preprocessor. It probably makes more sense to just have a little program that generates the makefile and test.sbm anyway. Possibly use a revised test.sbm itself as the input.,True,{}
nothings/stb,https://github.com/nothings/stb,598,2018-04-28T05:40:02Z,,2019-03-12T06:13:18Z,OPEN,False,58,0,2,https://github.com/AndrewJDR,Added appveyor support for Windows builds.,1,"['1 tests', 'needs significant new work']",https://github.com/nothings/stb/pull/598,https://github.com/AndrewJDR,8,https://github.com/nothings/stb/pull/598#issuecomment-471870765,"This adds appveyor.com support for VS2008 - VS2017. This works similarly to travis-ci, giving build success/failure reports any time someone submits a PR. You can see what it looks like here:
https://ci.appveyor.com/project/AndrewJDR/stb/build/1.0.24
And on my fork (see green checkmark): https://github.com/AndrewJDR/stb/commits/add_appveyor_windows
It also runs the test executables just to make sure they don't crash or whatever. Not sure if that's necessary, but why not.
You'll have to sign up for it to work, similar to travis-ci. Signup is straightforward, and free for OSS projects. Build-wise, I used nmake for now by making a copy of the original tests/Makefile and removing a few flags that cl doesn't understand, but you can replace nmake with whatever you want later by changing these lines in appveyor.yml:
  - call ""C:\\Program Files (x86)\\%VSINSTALL%\vcvarsall.bat"" %platform%
  - cd tests
  - nmake /f Makefile.nmake

I don't think travis supports windows, or I would have just used that. travis + appveyor seems to be a common combination on OSS projects for this reason.","I wouldn't recommend anybody try to implement that without talking to me first, because I'm not sure what it'll take for it to be a system I'm comfortable with having.

I could take a crack at it, if you care to write a bit about what you're looking for. I'm busy on a project so it would just happen on a weekend or day where I find myself with some time to spare and/or I need a break. If I had to guess, sometime within the next 3-4 months?
If you see yourself most likely taking care of it yourself before then, it may not be worth your time to describe it.",True,{}
nothings/stb,https://github.com/nothings/stb,599,2018-04-29T17:06:56Z,2020-02-02T19:33:27Z,2020-02-02T19:33:27Z,MERGED,True,177,1,1,https://github.com/wojdyr,add tests to tests/test_sprintf.c,1,"['1 tests', 'code quality', '1 stb_sprintf']",https://github.com/nothings/stb/pull/599,https://github.com/wojdyr,1,https://github.com/nothings/stb/pull/599,"I wanted to have some tests for stb_sprintf.c because I was making a few changes to this library. I tried to get good coverage with not too many tests. It's kind of fun watching as the coverage numbers go up. They went up to 99% of lines and 88% of branches.
The tests can be run with either stb_sprintf or glibc sprintf. To run it with glibc change 1 to 0 in the line:
#define USE_STB 1
When the output differs I included both version (see #if USE_STB in the file). For example, default precision of %a differs, capitalization of inf/nan differs, and a couple of other insignificant details.
As for my changes in stb_sprintf.c -- I'm not proposing them here because they add dependency on string.h and de-optimize the library a bit. But they avoid UB and warnings from sanitizers.
stb_sprintf is a fantastic library. For me the best feature is that it's locale-independent, so I can have locale-specific number formatting in the UI and locale-independent one in data files.","I wanted to have some tests for stb_sprintf.c because I was making a few changes to this library. I tried to get good coverage with not too many tests. It's kind of fun watching as the coverage numbers go up. They went up to 99% of lines and 88% of branches.
The tests can be run with either stb_sprintf or glibc sprintf. To run it with glibc change 1 to 0 in the line:
#define USE_STB 1
When the output differs I included both version (see #if USE_STB in the file). For example, default precision of %a differs, capitalization of inf/nan differs, and a couple of other insignificant details.
As for my changes in stb_sprintf.c -- I'm not proposing them here because they add dependency on string.h and de-optimize the library a bit. But they avoid UB and warnings from sanitizers.
stb_sprintf is a fantastic library. For me the best feature is that it's locale-independent, so I can have locale-specific number formatting in the UI and locale-independent one in data files.",True,{}
nothings/stb,https://github.com/nothings/stb,599,2018-04-29T17:06:56Z,2020-02-02T19:33:27Z,2020-02-02T19:33:27Z,MERGED,True,177,1,1,https://github.com/wojdyr,add tests to tests/test_sprintf.c,1,"['1 tests', 'code quality', '1 stb_sprintf']",https://github.com/nothings/stb/pull/599,https://github.com/cheako,2,https://github.com/nothings/stb/pull/599#issuecomment-429206601,"I wanted to have some tests for stb_sprintf.c because I was making a few changes to this library. I tried to get good coverage with not too many tests. It's kind of fun watching as the coverage numbers go up. They went up to 99% of lines and 88% of branches.
The tests can be run with either stb_sprintf or glibc sprintf. To run it with glibc change 1 to 0 in the line:
#define USE_STB 1
When the output differs I included both version (see #if USE_STB in the file). For example, default precision of %a differs, capitalization of inf/nan differs, and a couple of other insignificant details.
As for my changes in stb_sprintf.c -- I'm not proposing them here because they add dependency on string.h and de-optimize the library a bit. But they avoid UB and warnings from sanitizers.
stb_sprintf is a fantastic library. For me the best feature is that it's locale-independent, so I can have locale-specific number formatting in the UI and locale-independent one in data files.","Why was this ignored?  I'm interested in working on stb_image and want to attempt detection of regressions.
Edit:
I see the file would never be run as travis-ci.org just calls make in tests and the Makefile only builds the files.",True,{}
nothings/stb,https://github.com/nothings/stb,599,2018-04-29T17:06:56Z,2020-02-02T19:33:27Z,2020-02-02T19:33:27Z,MERGED,True,177,1,1,https://github.com/wojdyr,add tests to tests/test_sprintf.c,1,"['1 tests', 'code quality', '1 stb_sprintf']",https://github.com/nothings/stb/pull/599,https://github.com/nothings,3,https://github.com/nothings/stb/pull/599#issuecomment-461456215,"I wanted to have some tests for stb_sprintf.c because I was making a few changes to this library. I tried to get good coverage with not too many tests. It's kind of fun watching as the coverage numbers go up. They went up to 99% of lines and 88% of branches.
The tests can be run with either stb_sprintf or glibc sprintf. To run it with glibc change 1 to 0 in the line:
#define USE_STB 1
When the output differs I included both version (see #if USE_STB in the file). For example, default precision of %a differs, capitalization of inf/nan differs, and a couple of other insignificant details.
As for my changes in stb_sprintf.c -- I'm not proposing them here because they add dependency on string.h and de-optimize the library a bit. But they avoid UB and warnings from sanitizers.
stb_sprintf is a fantastic library. For me the best feature is that it's locale-independent, so I can have locale-specific number formatting in the UI and locale-independent one in data files.",I do still hope to merge this at some point.,True,{}
nothings/stb,https://github.com/nothings/stb,599,2018-04-29T17:06:56Z,2020-02-02T19:33:27Z,2020-02-02T19:33:27Z,MERGED,True,177,1,1,https://github.com/wojdyr,add tests to tests/test_sprintf.c,1,"['1 tests', 'code quality', '1 stb_sprintf']",https://github.com/nothings/stb/pull/599,https://github.com/nothings,4,https://github.com/nothings/stb/pull/599#issuecomment-581146996,"I wanted to have some tests for stb_sprintf.c because I was making a few changes to this library. I tried to get good coverage with not too many tests. It's kind of fun watching as the coverage numbers go up. They went up to 99% of lines and 88% of branches.
The tests can be run with either stb_sprintf or glibc sprintf. To run it with glibc change 1 to 0 in the line:
#define USE_STB 1
When the output differs I included both version (see #if USE_STB in the file). For example, default precision of %a differs, capitalization of inf/nan differs, and a couple of other insignificant details.
As for my changes in stb_sprintf.c -- I'm not proposing them here because they add dependency on string.h and de-optimize the library a bit. But they avoid UB and warnings from sanitizers.
stb_sprintf is a fantastic library. For me the best feature is that it's locale-independent, so I can have locale-specific number formatting in the UI and locale-independent one in data files.","I had to drastically change this to make it VC6 compatible. Also, you changed the semantics of the existing test_sprintf.c file; I changed it back so it can link with the other tests, but maybe it should be moved to a separate file.",True,{}
nothings/stb,https://github.com/nothings/stb,599,2018-04-29T17:06:56Z,2020-02-02T19:33:27Z,2020-02-02T19:33:27Z,MERGED,True,177,1,1,https://github.com/wojdyr,add tests to tests/test_sprintf.c,1,"['1 tests', 'code quality', '1 stb_sprintf']",https://github.com/nothings/stb/pull/599,https://github.com/wojdyr,5,https://github.com/nothings/stb/pull/599#issuecomment-581148819,"I wanted to have some tests for stb_sprintf.c because I was making a few changes to this library. I tried to get good coverage with not too many tests. It's kind of fun watching as the coverage numbers go up. They went up to 99% of lines and 88% of branches.
The tests can be run with either stb_sprintf or glibc sprintf. To run it with glibc change 1 to 0 in the line:
#define USE_STB 1
When the output differs I included both version (see #if USE_STB in the file). For example, default precision of %a differs, capitalization of inf/nan differs, and a couple of other insignificant details.
As for my changes in stb_sprintf.c -- I'm not proposing them here because they add dependency on string.h and de-optimize the library a bit. But they avoid UB and warnings from sanitizers.
stb_sprintf is a fantastic library. For me the best feature is that it's locale-independent, so I can have locale-specific number formatting in the UI and locale-independent one in data files.","but maybe it should be moved to a separate file.

Maybe -- I don't have any opinion here.",True,{}
nothings/stb,https://github.com/nothings/stb,599,2018-04-29T17:06:56Z,2020-02-02T19:33:27Z,2020-02-02T19:33:27Z,MERGED,True,177,1,1,https://github.com/wojdyr,add tests to tests/test_sprintf.c,1,"['1 tests', 'code quality', '1 stb_sprintf']",https://github.com/nothings/stb/pull/599,https://github.com/nothings,6,https://github.com/nothings/stb/pull/599#issuecomment-581152065,"I wanted to have some tests for stb_sprintf.c because I was making a few changes to this library. I tried to get good coverage with not too many tests. It's kind of fun watching as the coverage numbers go up. They went up to 99% of lines and 88% of branches.
The tests can be run with either stb_sprintf or glibc sprintf. To run it with glibc change 1 to 0 in the line:
#define USE_STB 1
When the output differs I included both version (see #if USE_STB in the file). For example, default precision of %a differs, capitalization of inf/nan differs, and a couple of other insignificant details.
As for my changes in stb_sprintf.c -- I'm not proposing them here because they add dependency on string.h and de-optimize the library a bit. But they avoid UB and warnings from sanitizers.
stb_sprintf is a fantastic library. For me the best feature is that it's locale-independent, so I can have locale-specific number formatting in the UI and locale-independent one in data files.","Yeah, I realize you may not be actively working on it anymore.",True,{}
nothings/stb,https://github.com/nothings/stb,604,2018-05-02T07:14:28Z,2018-06-13T14:36:03Z,2018-06-13T14:36:03Z,CLOSED,False,2,1,1,https://github.com/tviksand,Fix hdr scanline error,2,[],https://github.com/nothings/stb/pull/604,https://github.com/tviksand,1,https://github.com/nothings/stb/pull/604,"Minor bugfix, hdr_write had an array out of bounds access due to a minor typo.","Minor bugfix, hdr_write had an array out of bounds access due to a minor typo.",True,{}
nothings/stb,https://github.com/nothings/stb,604,2018-05-02T07:14:28Z,2018-06-13T14:36:03Z,2018-06-13T14:36:03Z,CLOSED,False,2,1,1,https://github.com/tviksand,Fix hdr scanline error,2,[],https://github.com/nothings/stb/pull/604,https://github.com/nothings,2,https://github.com/nothings/stb/pull/604#issuecomment-396960434,"Minor bugfix, hdr_write had an array out of bounds access due to a minor typo.",dupe of #572,True,{}
nothings/stb,https://github.com/nothings/stb,606,2018-05-06T10:41:36Z,2019-02-07T15:01:41Z,2019-02-07T22:38:45Z,CLOSED,False,0,1,1,https://github.com/mastensg,stb_textedit: remove double initialization,1,"['1 stb library w/no tag', '2 warning Wall/static-analysis']",https://github.com/nothings/stb/pull/606,https://github.com/mastensg,1,https://github.com/nothings/stb/pull/606,clang's scan-build found this,clang's scan-build found this,True,{}
nothings/stb,https://github.com/nothings/stb,606,2018-05-06T10:41:36Z,2019-02-07T15:01:41Z,2019-02-07T22:38:45Z,CLOSED,False,0,1,1,https://github.com/mastensg,stb_textedit: remove double initialization,1,"['1 stb library w/no tag', '2 warning Wall/static-analysis']",https://github.com/nothings/stb/pull/606,https://github.com/nothings,2,https://github.com/nothings/stb/pull/606#issuecomment-461456702,clang's scan-build found this,merged for next release,True,{}
nothings/stb,https://github.com/nothings/stb,607,2018-05-07T14:52:51Z,2019-02-07T18:25:15Z,2019-02-07T18:25:15Z,MERGED,True,12,8,1,https://github.com/ocornut,stb_truetype: stbtt_PackFontRanges skip missing glyphs.,1,['1 stb_truetype'],https://github.com/nothings/stb/pull/607,https://github.com/ocornut,1,https://github.com/nothings/stb/pull/607,"The functions used by stbtt_PackFontRanges() don't skip glyphs that are missing in the font, which result in packing and rasterizing whatever the ""fallback"" font glyph is. I am using the word ""fallback"" but I am not sure I really understand if stbtt_FindGlyphIndex() returning 0 could also be a valid glyph.
See #575 about stbtt_FindGlyphIndex() documentation.
If I'm taking ""Arial Unicode.ttf"" and trying to e.g. 32 to 255, notice the squares about 127:

Notice they take space in the font atlas:

(I disabled oversampling here to make this more readable)
While this extraneous space is bearable for a typical ASCII set, when you work with larger sizes, international font ranges, icon font ranges it can be taking more space.
Additionally, this also means that stbtt_PackFontRanges() provide no information on whether a character was successfully found/packed/rasterized: from the user's point of view, all of the glyphs packing are successful.
As an explicit problematic case: FontAwesome version 5 (latest version of a very popular icon font) recently started shipping over multiple font files instead of a single one, which makes is more difficult to use those icons by specifying a single font range (as all the fonts files are now sharing the same range, but each individual font file only cover some of the codepoint within that range).
One workaround right now is for the user to call stbtt_FindGlyphIndex() and recreate font ranges manually from the input font ranges. It's possible but not really trivial for a casual end-user application, and the number of holes may easily turn a single range into hundreds of ranges (this would be the case for the icon fonts mentioned above).
PROPOSED SOLUTION
The proposed PR skips missing glyphs.
This requires the end-user to check that the output stbtt_packedchar are valid by testing positions, e.g.
            for (int char_idx = 0; char_idx < range.num_chars; char_idx += 1)
            {
                const stbtt_packedchar* pc = &range.chardata_for_range[char_idx];
                if (!pc->x0 && !pc->x1 && !pc->y0 && !pc->y1)
                    continue;
This was in theory already required in the past but I think it would only happen on actual packing failure (no room) which arguably is rarer, so it's possible that some code didn't test for it. I don't imagine it to make much of a difference.
Note that the ""square"" shown in Arial Unicode above is a glyph itself and not all font show something that looks like a square at all.
HOWEVER
This is reliant on stbtt_FindGlyphIndex() == 0 being always an error value. It's unclear to me if some legit glyph could return 0, since the data is being pulled from font files and there are various code paths. I would expect that for something called ""index"" the value is 0 would be valid, and perhaps stbtt_FindGlyphIndex() should/could have be designed to return -1 on error. The only documentation I have is Sean's tweet in #575. I added asserts in stbtt_FindGlyphIndex() to verify that non-error return values are != 0 but I'm not hitting all return paths and either way it could depend on the font data. Perhaps stbtt_FindGlyphIndex() should be changed to return -1 instead of 0 (and maybe the public facing version would turn -1 into 0 for compatibility?). Or maybe 0 is always an error and then this is a non-issue.
OPTIONAL?
Perhaps still should be added as an option? e.g.
STBTT_DEF void stbtt_PackSetSkipMissingGlyphs(stbtt_pack_context *spc, int skip);
Which would set a flag in stbtt_pack_context and checked by the stbtt_PackFontRanges** function?
I'll change the PR to become that if you think it would be better this way.
( Ref ocornut/imgui#1703 ocornut/imgui#1671 )
Thank you for reading and considering this.","The functions used by stbtt_PackFontRanges() don't skip glyphs that are missing in the font, which result in packing and rasterizing whatever the ""fallback"" font glyph is. I am using the word ""fallback"" but I am not sure I really understand if stbtt_FindGlyphIndex() returning 0 could also be a valid glyph.
See #575 about stbtt_FindGlyphIndex() documentation.
If I'm taking ""Arial Unicode.ttf"" and trying to e.g. 32 to 255, notice the squares about 127:

Notice they take space in the font atlas:

(I disabled oversampling here to make this more readable)
While this extraneous space is bearable for a typical ASCII set, when you work with larger sizes, international font ranges, icon font ranges it can be taking more space.
Additionally, this also means that stbtt_PackFontRanges() provide no information on whether a character was successfully found/packed/rasterized: from the user's point of view, all of the glyphs packing are successful.
As an explicit problematic case: FontAwesome version 5 (latest version of a very popular icon font) recently started shipping over multiple font files instead of a single one, which makes is more difficult to use those icons by specifying a single font range (as all the fonts files are now sharing the same range, but each individual font file only cover some of the codepoint within that range).
One workaround right now is for the user to call stbtt_FindGlyphIndex() and recreate font ranges manually from the input font ranges. It's possible but not really trivial for a casual end-user application, and the number of holes may easily turn a single range into hundreds of ranges (this would be the case for the icon fonts mentioned above).
PROPOSED SOLUTION
The proposed PR skips missing glyphs.
This requires the end-user to check that the output stbtt_packedchar are valid by testing positions, e.g.
            for (int char_idx = 0; char_idx < range.num_chars; char_idx += 1)
            {
                const stbtt_packedchar* pc = &range.chardata_for_range[char_idx];
                if (!pc->x0 && !pc->x1 && !pc->y0 && !pc->y1)
                    continue;
This was in theory already required in the past but I think it would only happen on actual packing failure (no room) which arguably is rarer, so it's possible that some code didn't test for it. I don't imagine it to make much of a difference.
Note that the ""square"" shown in Arial Unicode above is a glyph itself and not all font show something that looks like a square at all.
HOWEVER
This is reliant on stbtt_FindGlyphIndex() == 0 being always an error value. It's unclear to me if some legit glyph could return 0, since the data is being pulled from font files and there are various code paths. I would expect that for something called ""index"" the value is 0 would be valid, and perhaps stbtt_FindGlyphIndex() should/could have be designed to return -1 on error. The only documentation I have is Sean's tweet in #575. I added asserts in stbtt_FindGlyphIndex() to verify that non-error return values are != 0 but I'm not hitting all return paths and either way it could depend on the font data. Perhaps stbtt_FindGlyphIndex() should be changed to return -1 instead of 0 (and maybe the public facing version would turn -1 into 0 for compatibility?). Or maybe 0 is always an error and then this is a non-issue.
OPTIONAL?
Perhaps still should be added as an option? e.g.
STBTT_DEF void stbtt_PackSetSkipMissingGlyphs(stbtt_pack_context *spc, int skip);
Which would set a flag in stbtt_pack_context and checked by the stbtt_PackFontRanges** function?
I'll change the PR to become that if you think it would be better this way.
( Ref ocornut/imgui#1703 ocornut/imgui#1671 )
Thank you for reading and considering this.",True,{}
nothings/stb,https://github.com/nothings/stb,607,2018-05-07T14:52:51Z,2019-02-07T18:25:15Z,2019-02-07T18:25:15Z,MERGED,True,12,8,1,https://github.com/ocornut,stb_truetype: stbtt_PackFontRanges skip missing glyphs.,1,['1 stb_truetype'],https://github.com/nothings/stb/pull/607,https://github.com/nothings,2,https://github.com/nothings/stb/pull/607#issuecomment-387124230,"The functions used by stbtt_PackFontRanges() don't skip glyphs that are missing in the font, which result in packing and rasterizing whatever the ""fallback"" font glyph is. I am using the word ""fallback"" but I am not sure I really understand if stbtt_FindGlyphIndex() returning 0 could also be a valid glyph.
See #575 about stbtt_FindGlyphIndex() documentation.
If I'm taking ""Arial Unicode.ttf"" and trying to e.g. 32 to 255, notice the squares about 127:

Notice they take space in the font atlas:

(I disabled oversampling here to make this more readable)
While this extraneous space is bearable for a typical ASCII set, when you work with larger sizes, international font ranges, icon font ranges it can be taking more space.
Additionally, this also means that stbtt_PackFontRanges() provide no information on whether a character was successfully found/packed/rasterized: from the user's point of view, all of the glyphs packing are successful.
As an explicit problematic case: FontAwesome version 5 (latest version of a very popular icon font) recently started shipping over multiple font files instead of a single one, which makes is more difficult to use those icons by specifying a single font range (as all the fonts files are now sharing the same range, but each individual font file only cover some of the codepoint within that range).
One workaround right now is for the user to call stbtt_FindGlyphIndex() and recreate font ranges manually from the input font ranges. It's possible but not really trivial for a casual end-user application, and the number of holes may easily turn a single range into hundreds of ranges (this would be the case for the icon fonts mentioned above).
PROPOSED SOLUTION
The proposed PR skips missing glyphs.
This requires the end-user to check that the output stbtt_packedchar are valid by testing positions, e.g.
            for (int char_idx = 0; char_idx < range.num_chars; char_idx += 1)
            {
                const stbtt_packedchar* pc = &range.chardata_for_range[char_idx];
                if (!pc->x0 && !pc->x1 && !pc->y0 && !pc->y1)
                    continue;
This was in theory already required in the past but I think it would only happen on actual packing failure (no room) which arguably is rarer, so it's possible that some code didn't test for it. I don't imagine it to make much of a difference.
Note that the ""square"" shown in Arial Unicode above is a glyph itself and not all font show something that looks like a square at all.
HOWEVER
This is reliant on stbtt_FindGlyphIndex() == 0 being always an error value. It's unclear to me if some legit glyph could return 0, since the data is being pulled from font files and there are various code paths. I would expect that for something called ""index"" the value is 0 would be valid, and perhaps stbtt_FindGlyphIndex() should/could have be designed to return -1 on error. The only documentation I have is Sean's tweet in #575. I added asserts in stbtt_FindGlyphIndex() to verify that non-error return values are != 0 but I'm not hitting all return paths and either way it could depend on the font data. Perhaps stbtt_FindGlyphIndex() should be changed to return -1 instead of 0 (and maybe the public facing version would turn -1 into 0 for compatibility?). Or maybe 0 is always an error and then this is a non-issue.
OPTIONAL?
Perhaps still should be added as an option? e.g.
STBTT_DEF void stbtt_PackSetSkipMissingGlyphs(stbtt_pack_context *spc, int skip);
Which would set a flag in stbtt_pack_context and checked by the stbtt_PackFontRanges** function?
I'll change the PR to become that if you think it would be better this way.
( Ref ocornut/imgui#1703 ocornut/imgui#1671 )
Thank you for reading and considering this.","The semantics of index 0 are passed straight through from truetype; see https://docs.microsoft.com/en-us/typography/opentype/spec/loca.

By definition, index zero points to the “missing character”, which is the character that appears if a character is not found in the font. The missing character is commonly represented by a blank box or a space.

(The intent is that the user doesn't need to know that this is the truetype definition, but as you note the return value of FindGlyphIndex hasn't documented in the first place.)


The intent is that 0 is returned on 'error' for glyph ids, but if you ask for a codepoint that is not present in the font, you get the index-0 box glyph. This means it is not an error! If you ask for a glyph that's not present in the font, you're not supposed to get nothing, you're supposed to get the fallback 'failure' glyph so that you (the programmer) don't have to do anything else. See nearly every app everywhere which has this behavior when you insert unicode characters not supported in the current font (browsers, word processors, etc). Also note that this is how stbtt works if you use the functions that are codepoint-based instead of glyph-based.


Requesting a codepoint be added with PackFontRanges is interpreted as 'asking for a codepoint' for the sake of (2).


Thus, getting the empty box character for each codepoint in a range that you requested is the intended behavior. The intent was that the burden was on you to only ask for characters you actually wanted. This is why PackFontRanges exists (so you can specify an arbitrary number of ranges, some/all of which could be single characters).
Now there are several possible approaches to fixing this:

Do nothing. The behavior as-is is ""correct"".
Share the box glyph in the atlas (i.e. still take up an stbtt_packedchar for each missing character, but only allocate one copy of the glyph per font).
Change the semantics
Add a function for batch requesting for a bunch of codepoints whether they're defined in the font (and possibly make the return value of that fill out font range structures ready to be sent to PackFontRanges).

Your solution is a form of (3) ""change the semantics"". I think I would prefer (2) or (4), since I prefer to maintain the semantics of 'if you ask for a codepoint you get some glyph, possibly the fallback'.
If we went with your solution, it has the issue that it conflates 'character didn't fit' and 'character wasn't present', which I think is bad. This could be addressed by adding a 'failure reason' to each packedchar struct (this wouldn't break anything since nobody would currently have been checking them, though it makes everyone pay with a small amount of memory). I would definitely want skipping-missing-chars to be optional (though it could be on a #define instead of adding a new runtime API).
(Note that technically approach (2) is orthogonal to both your-solution-if-optional and fix (4), but your solution and (4) are basically redundant.)",True,{}
nothings/stb,https://github.com/nothings/stb,607,2018-05-07T14:52:51Z,2019-02-07T18:25:15Z,2019-02-07T18:25:15Z,MERGED,True,12,8,1,https://github.com/ocornut,stb_truetype: stbtt_PackFontRanges skip missing glyphs.,1,['1 stb_truetype'],https://github.com/nothings/stb/pull/607,https://github.com/nothings,3,https://github.com/nothings/stb/pull/607#issuecomment-387125245,"The functions used by stbtt_PackFontRanges() don't skip glyphs that are missing in the font, which result in packing and rasterizing whatever the ""fallback"" font glyph is. I am using the word ""fallback"" but I am not sure I really understand if stbtt_FindGlyphIndex() returning 0 could also be a valid glyph.
See #575 about stbtt_FindGlyphIndex() documentation.
If I'm taking ""Arial Unicode.ttf"" and trying to e.g. 32 to 255, notice the squares about 127:

Notice they take space in the font atlas:

(I disabled oversampling here to make this more readable)
While this extraneous space is bearable for a typical ASCII set, when you work with larger sizes, international font ranges, icon font ranges it can be taking more space.
Additionally, this also means that stbtt_PackFontRanges() provide no information on whether a character was successfully found/packed/rasterized: from the user's point of view, all of the glyphs packing are successful.
As an explicit problematic case: FontAwesome version 5 (latest version of a very popular icon font) recently started shipping over multiple font files instead of a single one, which makes is more difficult to use those icons by specifying a single font range (as all the fonts files are now sharing the same range, but each individual font file only cover some of the codepoint within that range).
One workaround right now is for the user to call stbtt_FindGlyphIndex() and recreate font ranges manually from the input font ranges. It's possible but not really trivial for a casual end-user application, and the number of holes may easily turn a single range into hundreds of ranges (this would be the case for the icon fonts mentioned above).
PROPOSED SOLUTION
The proposed PR skips missing glyphs.
This requires the end-user to check that the output stbtt_packedchar are valid by testing positions, e.g.
            for (int char_idx = 0; char_idx < range.num_chars; char_idx += 1)
            {
                const stbtt_packedchar* pc = &range.chardata_for_range[char_idx];
                if (!pc->x0 && !pc->x1 && !pc->y0 && !pc->y1)
                    continue;
This was in theory already required in the past but I think it would only happen on actual packing failure (no room) which arguably is rarer, so it's possible that some code didn't test for it. I don't imagine it to make much of a difference.
Note that the ""square"" shown in Arial Unicode above is a glyph itself and not all font show something that looks like a square at all.
HOWEVER
This is reliant on stbtt_FindGlyphIndex() == 0 being always an error value. It's unclear to me if some legit glyph could return 0, since the data is being pulled from font files and there are various code paths. I would expect that for something called ""index"" the value is 0 would be valid, and perhaps stbtt_FindGlyphIndex() should/could have be designed to return -1 on error. The only documentation I have is Sean's tweet in #575. I added asserts in stbtt_FindGlyphIndex() to verify that non-error return values are != 0 but I'm not hitting all return paths and either way it could depend on the font data. Perhaps stbtt_FindGlyphIndex() should be changed to return -1 instead of 0 (and maybe the public facing version would turn -1 into 0 for compatibility?). Or maybe 0 is always an error and then this is a non-issue.
OPTIONAL?
Perhaps still should be added as an option? e.g.
STBTT_DEF void stbtt_PackSetSkipMissingGlyphs(stbtt_pack_context *spc, int skip);
Which would set a flag in stbtt_pack_context and checked by the stbtt_PackFontRanges** function?
I'll change the PR to become that if you think it would be better this way.
( Ref ocornut/imgui#1703 ocornut/imgui#1671 )
Thank you for reading and considering this.","Note, to clarify, the truetype specification isn't clear whether any character could legitimately use index 0 (e.g. if there were a unicode 'box' codepoint). This is part of why I passed this definition through rather than treat it as an explicit error.
I would assume the intent was ""no, it can't"", but since they don't explicitly forbid it, who knows. (And even if they did explicitly forbid it, who knows.)",True,{}
nothings/stb,https://github.com/nothings/stb,607,2018-05-07T14:52:51Z,2019-02-07T18:25:15Z,2019-02-07T18:25:15Z,MERGED,True,12,8,1,https://github.com/ocornut,stb_truetype: stbtt_PackFontRanges skip missing glyphs.,1,['1 stb_truetype'],https://github.com/nothings/stb/pull/607,https://github.com/ocornut,4,https://github.com/nothings/stb/pull/607#issuecomment-387147251,"The functions used by stbtt_PackFontRanges() don't skip glyphs that are missing in the font, which result in packing and rasterizing whatever the ""fallback"" font glyph is. I am using the word ""fallback"" but I am not sure I really understand if stbtt_FindGlyphIndex() returning 0 could also be a valid glyph.
See #575 about stbtt_FindGlyphIndex() documentation.
If I'm taking ""Arial Unicode.ttf"" and trying to e.g. 32 to 255, notice the squares about 127:

Notice they take space in the font atlas:

(I disabled oversampling here to make this more readable)
While this extraneous space is bearable for a typical ASCII set, when you work with larger sizes, international font ranges, icon font ranges it can be taking more space.
Additionally, this also means that stbtt_PackFontRanges() provide no information on whether a character was successfully found/packed/rasterized: from the user's point of view, all of the glyphs packing are successful.
As an explicit problematic case: FontAwesome version 5 (latest version of a very popular icon font) recently started shipping over multiple font files instead of a single one, which makes is more difficult to use those icons by specifying a single font range (as all the fonts files are now sharing the same range, but each individual font file only cover some of the codepoint within that range).
One workaround right now is for the user to call stbtt_FindGlyphIndex() and recreate font ranges manually from the input font ranges. It's possible but not really trivial for a casual end-user application, and the number of holes may easily turn a single range into hundreds of ranges (this would be the case for the icon fonts mentioned above).
PROPOSED SOLUTION
The proposed PR skips missing glyphs.
This requires the end-user to check that the output stbtt_packedchar are valid by testing positions, e.g.
            for (int char_idx = 0; char_idx < range.num_chars; char_idx += 1)
            {
                const stbtt_packedchar* pc = &range.chardata_for_range[char_idx];
                if (!pc->x0 && !pc->x1 && !pc->y0 && !pc->y1)
                    continue;
This was in theory already required in the past but I think it would only happen on actual packing failure (no room) which arguably is rarer, so it's possible that some code didn't test for it. I don't imagine it to make much of a difference.
Note that the ""square"" shown in Arial Unicode above is a glyph itself and not all font show something that looks like a square at all.
HOWEVER
This is reliant on stbtt_FindGlyphIndex() == 0 being always an error value. It's unclear to me if some legit glyph could return 0, since the data is being pulled from font files and there are various code paths. I would expect that for something called ""index"" the value is 0 would be valid, and perhaps stbtt_FindGlyphIndex() should/could have be designed to return -1 on error. The only documentation I have is Sean's tweet in #575. I added asserts in stbtt_FindGlyphIndex() to verify that non-error return values are != 0 but I'm not hitting all return paths and either way it could depend on the font data. Perhaps stbtt_FindGlyphIndex() should be changed to return -1 instead of 0 (and maybe the public facing version would turn -1 into 0 for compatibility?). Or maybe 0 is always an error and then this is a non-issue.
OPTIONAL?
Perhaps still should be added as an option? e.g.
STBTT_DEF void stbtt_PackSetSkipMissingGlyphs(stbtt_pack_context *spc, int skip);
Which would set a flag in stbtt_pack_context and checked by the stbtt_PackFontRanges** function?
I'll change the PR to become that if you think it would be better this way.
( Ref ocornut/imgui#1703 ocornut/imgui#1671 )
Thank you for reading and considering this.","Thanks for looking into it and the detailed answer.

Let me prefix my answer with the fact that I have came back to this again now and found a simpler user-side workaround (which involve looping twice and calling stbtt_FindGlyphIndex a third time. Being initialization code i'm not too fussed with the extra cost here *.
(* If the cost of stbtt_FindGlyphIndex matters, you could store the result the first time in stbrp_rect as it's already called twice per glyph in PackRanges.)
So my lazy work-around ""only"" calls it a third time and then overwrite r->w = r->h = 0 between GatherRects and actual packing. Then after packing resets the r->was_packed flag so the render function can ignore them. This works because I have a custom version of the outer PackRanges function.
The second change of my PR, the line stbtt_PackFontRangesRenderIntoRects() that tests for non-zero width/height could possibly be safely merged:
if (r->was_packed && r->w != 0 && r->h != 0) {
Which would allow me to remove the second (simpler) loop, and the user code would crash or misbehave if either is zero anyway (unsigned values would underflow leading to 64k-sized glyphs etc.).

For the sake of pursuing this idea, but I could live with my workaround:
(you may want to just close and forget this.)


Share the box glyph in the atlas


Yes, and yes to being orthogonal to both 4 and my suggestion (since it wouldn't solve the problem for easily merging fonts that share overlapping ranges,).


Add a function for batch requesting for a bunch of codepoints whether they're defined in the font (and possibly make the return value of that fill out font range structures ready to be sent to PackFontRanges)


Yes. And possibly also make a function that returns the list of codepoints in the font?
One advantage of my solution is that it comes with less processing/allocs. I think the error code would be stored along with int was_packed in stbrp_rect and not in packedchar (where all-zero positions are enough to signify ""no output""). was_packed currently is an int, there wouldn't be an extra memory cost. But stb_rect_pack implement the same structure so I guess they may have to be updated together.",True,{}
nothings/stb,https://github.com/nothings/stb,607,2018-05-07T14:52:51Z,2019-02-07T18:25:15Z,2019-02-07T18:25:15Z,MERGED,True,12,8,1,https://github.com/ocornut,stb_truetype: stbtt_PackFontRanges skip missing glyphs.,1,['1 stb_truetype'],https://github.com/nothings/stb/pull/607,https://github.com/nothings,5,https://github.com/nothings/stb/pull/607#issuecomment-461462038,"The functions used by stbtt_PackFontRanges() don't skip glyphs that are missing in the font, which result in packing and rasterizing whatever the ""fallback"" font glyph is. I am using the word ""fallback"" but I am not sure I really understand if stbtt_FindGlyphIndex() returning 0 could also be a valid glyph.
See #575 about stbtt_FindGlyphIndex() documentation.
If I'm taking ""Arial Unicode.ttf"" and trying to e.g. 32 to 255, notice the squares about 127:

Notice they take space in the font atlas:

(I disabled oversampling here to make this more readable)
While this extraneous space is bearable for a typical ASCII set, when you work with larger sizes, international font ranges, icon font ranges it can be taking more space.
Additionally, this also means that stbtt_PackFontRanges() provide no information on whether a character was successfully found/packed/rasterized: from the user's point of view, all of the glyphs packing are successful.
As an explicit problematic case: FontAwesome version 5 (latest version of a very popular icon font) recently started shipping over multiple font files instead of a single one, which makes is more difficult to use those icons by specifying a single font range (as all the fonts files are now sharing the same range, but each individual font file only cover some of the codepoint within that range).
One workaround right now is for the user to call stbtt_FindGlyphIndex() and recreate font ranges manually from the input font ranges. It's possible but not really trivial for a casual end-user application, and the number of holes may easily turn a single range into hundreds of ranges (this would be the case for the icon fonts mentioned above).
PROPOSED SOLUTION
The proposed PR skips missing glyphs.
This requires the end-user to check that the output stbtt_packedchar are valid by testing positions, e.g.
            for (int char_idx = 0; char_idx < range.num_chars; char_idx += 1)
            {
                const stbtt_packedchar* pc = &range.chardata_for_range[char_idx];
                if (!pc->x0 && !pc->x1 && !pc->y0 && !pc->y1)
                    continue;
This was in theory already required in the past but I think it would only happen on actual packing failure (no room) which arguably is rarer, so it's possible that some code didn't test for it. I don't imagine it to make much of a difference.
Note that the ""square"" shown in Arial Unicode above is a glyph itself and not all font show something that looks like a square at all.
HOWEVER
This is reliant on stbtt_FindGlyphIndex() == 0 being always an error value. It's unclear to me if some legit glyph could return 0, since the data is being pulled from font files and there are various code paths. I would expect that for something called ""index"" the value is 0 would be valid, and perhaps stbtt_FindGlyphIndex() should/could have be designed to return -1 on error. The only documentation I have is Sean's tweet in #575. I added asserts in stbtt_FindGlyphIndex() to verify that non-error return values are != 0 but I'm not hitting all return paths and either way it could depend on the font data. Perhaps stbtt_FindGlyphIndex() should be changed to return -1 instead of 0 (and maybe the public facing version would turn -1 into 0 for compatibility?). Or maybe 0 is always an error and then this is a non-issue.
OPTIONAL?
Perhaps still should be added as an option? e.g.
STBTT_DEF void stbtt_PackSetSkipMissingGlyphs(stbtt_pack_context *spc, int skip);
Which would set a flag in stbtt_pack_context and checked by the stbtt_PackFontRanges** function?
I'll change the PR to become that if you think it would be better this way.
( Ref ocornut/imgui#1703 ocornut/imgui#1671 )
Thank you for reading and considering this.","Coming back to this again, what do you think of just having a #define that determines whether the pack functions embed glyph 0 or discard it? Still leave room for future revision where if you allow the box character (the old behavior) we implement a shared-box-character that doesn't bloat the atlas.",True,{}
nothings/stb,https://github.com/nothings/stb,607,2018-05-07T14:52:51Z,2019-02-07T18:25:15Z,2019-02-07T18:25:15Z,MERGED,True,12,8,1,https://github.com/ocornut,stb_truetype: stbtt_PackFontRanges skip missing glyphs.,1,['1 stb_truetype'],https://github.com/nothings/stb/pull/607,https://github.com/ocornut,6,https://github.com/nothings/stb/pull/607#issuecomment-461486777,"The functions used by stbtt_PackFontRanges() don't skip glyphs that are missing in the font, which result in packing and rasterizing whatever the ""fallback"" font glyph is. I am using the word ""fallback"" but I am not sure I really understand if stbtt_FindGlyphIndex() returning 0 could also be a valid glyph.
See #575 about stbtt_FindGlyphIndex() documentation.
If I'm taking ""Arial Unicode.ttf"" and trying to e.g. 32 to 255, notice the squares about 127:

Notice they take space in the font atlas:

(I disabled oversampling here to make this more readable)
While this extraneous space is bearable for a typical ASCII set, when you work with larger sizes, international font ranges, icon font ranges it can be taking more space.
Additionally, this also means that stbtt_PackFontRanges() provide no information on whether a character was successfully found/packed/rasterized: from the user's point of view, all of the glyphs packing are successful.
As an explicit problematic case: FontAwesome version 5 (latest version of a very popular icon font) recently started shipping over multiple font files instead of a single one, which makes is more difficult to use those icons by specifying a single font range (as all the fonts files are now sharing the same range, but each individual font file only cover some of the codepoint within that range).
One workaround right now is for the user to call stbtt_FindGlyphIndex() and recreate font ranges manually from the input font ranges. It's possible but not really trivial for a casual end-user application, and the number of holes may easily turn a single range into hundreds of ranges (this would be the case for the icon fonts mentioned above).
PROPOSED SOLUTION
The proposed PR skips missing glyphs.
This requires the end-user to check that the output stbtt_packedchar are valid by testing positions, e.g.
            for (int char_idx = 0; char_idx < range.num_chars; char_idx += 1)
            {
                const stbtt_packedchar* pc = &range.chardata_for_range[char_idx];
                if (!pc->x0 && !pc->x1 && !pc->y0 && !pc->y1)
                    continue;
This was in theory already required in the past but I think it would only happen on actual packing failure (no room) which arguably is rarer, so it's possible that some code didn't test for it. I don't imagine it to make much of a difference.
Note that the ""square"" shown in Arial Unicode above is a glyph itself and not all font show something that looks like a square at all.
HOWEVER
This is reliant on stbtt_FindGlyphIndex() == 0 being always an error value. It's unclear to me if some legit glyph could return 0, since the data is being pulled from font files and there are various code paths. I would expect that for something called ""index"" the value is 0 would be valid, and perhaps stbtt_FindGlyphIndex() should/could have be designed to return -1 on error. The only documentation I have is Sean's tweet in #575. I added asserts in stbtt_FindGlyphIndex() to verify that non-error return values are != 0 but I'm not hitting all return paths and either way it could depend on the font data. Perhaps stbtt_FindGlyphIndex() should be changed to return -1 instead of 0 (and maybe the public facing version would turn -1 into 0 for compatibility?). Or maybe 0 is always an error and then this is a non-issue.
OPTIONAL?
Perhaps still should be added as an option? e.g.
STBTT_DEF void stbtt_PackSetSkipMissingGlyphs(stbtt_pack_context *spc, int skip);
Which would set a flag in stbtt_pack_context and checked by the stbtt_PackFontRanges** function?
I'll change the PR to become that if you think it would be better this way.
( Ref ocornut/imgui#1703 ocornut/imgui#1671 )
Thank you for reading and considering this.","(To first clarify, my code evolved since May 2018 post and this is a non-issue for me now. I'm first doing a pass calling stbtt_FindGlyphIndex() from which I am building the intersection of requested glyphs and available glyphs, and then passing that in array_of_unicode_codepoints. So I am not directly affected by this).

Coming back to this again, what do you think of just having a #define that determines whether the pack functions embed glyph 0 or discard it?

I believe since we have a stbtt_pack_context structure and its initialization is opaque, it would do no harm to just have this flag in the runtime structure (as suggested in the later ""OPTIONAL"" part of my post).
That additional storage/check is not going to affect performance either way, technically the runtime flag makes things a little more flexible, and amount of code is going to be similar.
I can rewrite the PR to make this a compile-time or runtime option as you prefer (but it should be trivial enough you may want to just do it). I agree that either will be better than current PR.",True,{}
nothings/stb,https://github.com/nothings/stb,607,2018-05-07T14:52:51Z,2019-02-07T18:25:15Z,2019-02-07T18:25:15Z,MERGED,True,12,8,1,https://github.com/ocornut,stb_truetype: stbtt_PackFontRanges skip missing glyphs.,1,['1 stb_truetype'],https://github.com/nothings/stb/pull/607,https://github.com/nothings,7,https://github.com/nothings/stb/pull/607#issuecomment-461496449,"The functions used by stbtt_PackFontRanges() don't skip glyphs that are missing in the font, which result in packing and rasterizing whatever the ""fallback"" font glyph is. I am using the word ""fallback"" but I am not sure I really understand if stbtt_FindGlyphIndex() returning 0 could also be a valid glyph.
See #575 about stbtt_FindGlyphIndex() documentation.
If I'm taking ""Arial Unicode.ttf"" and trying to e.g. 32 to 255, notice the squares about 127:

Notice they take space in the font atlas:

(I disabled oversampling here to make this more readable)
While this extraneous space is bearable for a typical ASCII set, when you work with larger sizes, international font ranges, icon font ranges it can be taking more space.
Additionally, this also means that stbtt_PackFontRanges() provide no information on whether a character was successfully found/packed/rasterized: from the user's point of view, all of the glyphs packing are successful.
As an explicit problematic case: FontAwesome version 5 (latest version of a very popular icon font) recently started shipping over multiple font files instead of a single one, which makes is more difficult to use those icons by specifying a single font range (as all the fonts files are now sharing the same range, but each individual font file only cover some of the codepoint within that range).
One workaround right now is for the user to call stbtt_FindGlyphIndex() and recreate font ranges manually from the input font ranges. It's possible but not really trivial for a casual end-user application, and the number of holes may easily turn a single range into hundreds of ranges (this would be the case for the icon fonts mentioned above).
PROPOSED SOLUTION
The proposed PR skips missing glyphs.
This requires the end-user to check that the output stbtt_packedchar are valid by testing positions, e.g.
            for (int char_idx = 0; char_idx < range.num_chars; char_idx += 1)
            {
                const stbtt_packedchar* pc = &range.chardata_for_range[char_idx];
                if (!pc->x0 && !pc->x1 && !pc->y0 && !pc->y1)
                    continue;
This was in theory already required in the past but I think it would only happen on actual packing failure (no room) which arguably is rarer, so it's possible that some code didn't test for it. I don't imagine it to make much of a difference.
Note that the ""square"" shown in Arial Unicode above is a glyph itself and not all font show something that looks like a square at all.
HOWEVER
This is reliant on stbtt_FindGlyphIndex() == 0 being always an error value. It's unclear to me if some legit glyph could return 0, since the data is being pulled from font files and there are various code paths. I would expect that for something called ""index"" the value is 0 would be valid, and perhaps stbtt_FindGlyphIndex() should/could have be designed to return -1 on error. The only documentation I have is Sean's tweet in #575. I added asserts in stbtt_FindGlyphIndex() to verify that non-error return values are != 0 but I'm not hitting all return paths and either way it could depend on the font data. Perhaps stbtt_FindGlyphIndex() should be changed to return -1 instead of 0 (and maybe the public facing version would turn -1 into 0 for compatibility?). Or maybe 0 is always an error and then this is a non-issue.
OPTIONAL?
Perhaps still should be added as an option? e.g.
STBTT_DEF void stbtt_PackSetSkipMissingGlyphs(stbtt_pack_context *spc, int skip);
Which would set a flag in stbtt_pack_context and checked by the stbtt_PackFontRanges** function?
I'll change the PR to become that if you think it would be better this way.
( Ref ocornut/imgui#1703 ocornut/imgui#1671 )
Thank you for reading and considering this.","Yeah, I realized from the previous comment you'd worked around it, but I still value your opinion!
The only reason I was thinking compile time instead of runtime was to avoid API bloat and complexity, but given that there's already a context anyway, you're right, it's not like a single function vs a single #define is that big a deal. Given the amount of code, I can do it myself, especially if you're not even likely to use it yourself.",True,{'THUMBS_UP': ['https://github.com/ocornut']}
nothings/stb,https://github.com/nothings/stb,607,2018-05-07T14:52:51Z,2019-02-07T18:25:15Z,2019-02-07T18:25:15Z,MERGED,True,12,8,1,https://github.com/ocornut,stb_truetype: stbtt_PackFontRanges skip missing glyphs.,1,['1 stb_truetype'],https://github.com/nothings/stb/pull/607,https://github.com/nothings,8,https://github.com/nothings/stb/pull/607#issuecomment-461516219,"The functions used by stbtt_PackFontRanges() don't skip glyphs that are missing in the font, which result in packing and rasterizing whatever the ""fallback"" font glyph is. I am using the word ""fallback"" but I am not sure I really understand if stbtt_FindGlyphIndex() returning 0 could also be a valid glyph.
See #575 about stbtt_FindGlyphIndex() documentation.
If I'm taking ""Arial Unicode.ttf"" and trying to e.g. 32 to 255, notice the squares about 127:

Notice they take space in the font atlas:

(I disabled oversampling here to make this more readable)
While this extraneous space is bearable for a typical ASCII set, when you work with larger sizes, international font ranges, icon font ranges it can be taking more space.
Additionally, this also means that stbtt_PackFontRanges() provide no information on whether a character was successfully found/packed/rasterized: from the user's point of view, all of the glyphs packing are successful.
As an explicit problematic case: FontAwesome version 5 (latest version of a very popular icon font) recently started shipping over multiple font files instead of a single one, which makes is more difficult to use those icons by specifying a single font range (as all the fonts files are now sharing the same range, but each individual font file only cover some of the codepoint within that range).
One workaround right now is for the user to call stbtt_FindGlyphIndex() and recreate font ranges manually from the input font ranges. It's possible but not really trivial for a casual end-user application, and the number of holes may easily turn a single range into hundreds of ranges (this would be the case for the icon fonts mentioned above).
PROPOSED SOLUTION
The proposed PR skips missing glyphs.
This requires the end-user to check that the output stbtt_packedchar are valid by testing positions, e.g.
            for (int char_idx = 0; char_idx < range.num_chars; char_idx += 1)
            {
                const stbtt_packedchar* pc = &range.chardata_for_range[char_idx];
                if (!pc->x0 && !pc->x1 && !pc->y0 && !pc->y1)
                    continue;
This was in theory already required in the past but I think it would only happen on actual packing failure (no room) which arguably is rarer, so it's possible that some code didn't test for it. I don't imagine it to make much of a difference.
Note that the ""square"" shown in Arial Unicode above is a glyph itself and not all font show something that looks like a square at all.
HOWEVER
This is reliant on stbtt_FindGlyphIndex() == 0 being always an error value. It's unclear to me if some legit glyph could return 0, since the data is being pulled from font files and there are various code paths. I would expect that for something called ""index"" the value is 0 would be valid, and perhaps stbtt_FindGlyphIndex() should/could have be designed to return -1 on error. The only documentation I have is Sean's tweet in #575. I added asserts in stbtt_FindGlyphIndex() to verify that non-error return values are != 0 but I'm not hitting all return paths and either way it could depend on the font data. Perhaps stbtt_FindGlyphIndex() should be changed to return -1 instead of 0 (and maybe the public facing version would turn -1 into 0 for compatibility?). Or maybe 0 is always an error and then this is a non-issue.
OPTIONAL?
Perhaps still should be added as an option? e.g.
STBTT_DEF void stbtt_PackSetSkipMissingGlyphs(stbtt_pack_context *spc, int skip);
Which would set a flag in stbtt_pack_context and checked by the stbtt_PackFontRanges** function?
I'll change the PR to become that if you think it would be better this way.
( Ref ocornut/imgui#1703 ocornut/imgui#1671 )
Thank you for reading and considering this.","Ok, there's a subtlety I missed here. You've set it up so some info is returned in the stbrp_rect, but my intent is that those are opaque, just storage for PackFont to do its work, which should never be looked at by the client. In theory any info about failed packing should be returned in the stbtt_packedchar.
However, I'm guessing your intention here is that when you have multiple fonts with disjoint ranges, you want to use the same stbtt_packedchar, rather than one per font, so you don't want to stomp existing data that's in them? I think that's fine, we can just say you should initialize your stbtt_packedchar to 0, and then you can tell that a character failed if the results are all 0.",True,{}
nothings/stb,https://github.com/nothings/stb,607,2018-05-07T14:52:51Z,2019-02-07T18:25:15Z,2019-02-07T18:25:15Z,MERGED,True,12,8,1,https://github.com/ocornut,stb_truetype: stbtt_PackFontRanges skip missing glyphs.,1,['1 stb_truetype'],https://github.com/nothings/stb/pull/607,https://github.com/nothings,9,https://github.com/nothings/stb/pull/607#issuecomment-461517114,"The functions used by stbtt_PackFontRanges() don't skip glyphs that are missing in the font, which result in packing and rasterizing whatever the ""fallback"" font glyph is. I am using the word ""fallback"" but I am not sure I really understand if stbtt_FindGlyphIndex() returning 0 could also be a valid glyph.
See #575 about stbtt_FindGlyphIndex() documentation.
If I'm taking ""Arial Unicode.ttf"" and trying to e.g. 32 to 255, notice the squares about 127:

Notice they take space in the font atlas:

(I disabled oversampling here to make this more readable)
While this extraneous space is bearable for a typical ASCII set, when you work with larger sizes, international font ranges, icon font ranges it can be taking more space.
Additionally, this also means that stbtt_PackFontRanges() provide no information on whether a character was successfully found/packed/rasterized: from the user's point of view, all of the glyphs packing are successful.
As an explicit problematic case: FontAwesome version 5 (latest version of a very popular icon font) recently started shipping over multiple font files instead of a single one, which makes is more difficult to use those icons by specifying a single font range (as all the fonts files are now sharing the same range, but each individual font file only cover some of the codepoint within that range).
One workaround right now is for the user to call stbtt_FindGlyphIndex() and recreate font ranges manually from the input font ranges. It's possible but not really trivial for a casual end-user application, and the number of holes may easily turn a single range into hundreds of ranges (this would be the case for the icon fonts mentioned above).
PROPOSED SOLUTION
The proposed PR skips missing glyphs.
This requires the end-user to check that the output stbtt_packedchar are valid by testing positions, e.g.
            for (int char_idx = 0; char_idx < range.num_chars; char_idx += 1)
            {
                const stbtt_packedchar* pc = &range.chardata_for_range[char_idx];
                if (!pc->x0 && !pc->x1 && !pc->y0 && !pc->y1)
                    continue;
This was in theory already required in the past but I think it would only happen on actual packing failure (no room) which arguably is rarer, so it's possible that some code didn't test for it. I don't imagine it to make much of a difference.
Note that the ""square"" shown in Arial Unicode above is a glyph itself and not all font show something that looks like a square at all.
HOWEVER
This is reliant on stbtt_FindGlyphIndex() == 0 being always an error value. It's unclear to me if some legit glyph could return 0, since the data is being pulled from font files and there are various code paths. I would expect that for something called ""index"" the value is 0 would be valid, and perhaps stbtt_FindGlyphIndex() should/could have be designed to return -1 on error. The only documentation I have is Sean's tweet in #575. I added asserts in stbtt_FindGlyphIndex() to verify that non-error return values are != 0 but I'm not hitting all return paths and either way it could depend on the font data. Perhaps stbtt_FindGlyphIndex() should be changed to return -1 instead of 0 (and maybe the public facing version would turn -1 into 0 for compatibility?). Or maybe 0 is always an error and then this is a non-issue.
OPTIONAL?
Perhaps still should be added as an option? e.g.
STBTT_DEF void stbtt_PackSetSkipMissingGlyphs(stbtt_pack_context *spc, int skip);
Which would set a flag in stbtt_pack_context and checked by the stbtt_PackFontRanges** function?
I'll change the PR to become that if you think it would be better this way.
( Ref ocornut/imgui#1703 ocornut/imgui#1671 )
Thank you for reading and considering this.","Sorry, my point was correct but I was misremembering the details. If you use the broken-out functions that take stbrp_rects, then you can look at them if you want. But if you use the main function, stbtt_PackFontRanges, you never even see the stbrp_rects at all.",True,{}
nothings/stb,https://github.com/nothings/stb,607,2018-05-07T14:52:51Z,2019-02-07T18:25:15Z,2019-02-07T18:25:15Z,MERGED,True,12,8,1,https://github.com/ocornut,stb_truetype: stbtt_PackFontRanges skip missing glyphs.,1,['1 stb_truetype'],https://github.com/nothings/stb/pull/607,https://github.com/ocornut,10,https://github.com/nothings/stb/pull/607#issuecomment-461520116,"The functions used by stbtt_PackFontRanges() don't skip glyphs that are missing in the font, which result in packing and rasterizing whatever the ""fallback"" font glyph is. I am using the word ""fallback"" but I am not sure I really understand if stbtt_FindGlyphIndex() returning 0 could also be a valid glyph.
See #575 about stbtt_FindGlyphIndex() documentation.
If I'm taking ""Arial Unicode.ttf"" and trying to e.g. 32 to 255, notice the squares about 127:

Notice they take space in the font atlas:

(I disabled oversampling here to make this more readable)
While this extraneous space is bearable for a typical ASCII set, when you work with larger sizes, international font ranges, icon font ranges it can be taking more space.
Additionally, this also means that stbtt_PackFontRanges() provide no information on whether a character was successfully found/packed/rasterized: from the user's point of view, all of the glyphs packing are successful.
As an explicit problematic case: FontAwesome version 5 (latest version of a very popular icon font) recently started shipping over multiple font files instead of a single one, which makes is more difficult to use those icons by specifying a single font range (as all the fonts files are now sharing the same range, but each individual font file only cover some of the codepoint within that range).
One workaround right now is for the user to call stbtt_FindGlyphIndex() and recreate font ranges manually from the input font ranges. It's possible but not really trivial for a casual end-user application, and the number of holes may easily turn a single range into hundreds of ranges (this would be the case for the icon fonts mentioned above).
PROPOSED SOLUTION
The proposed PR skips missing glyphs.
This requires the end-user to check that the output stbtt_packedchar are valid by testing positions, e.g.
            for (int char_idx = 0; char_idx < range.num_chars; char_idx += 1)
            {
                const stbtt_packedchar* pc = &range.chardata_for_range[char_idx];
                if (!pc->x0 && !pc->x1 && !pc->y0 && !pc->y1)
                    continue;
This was in theory already required in the past but I think it would only happen on actual packing failure (no room) which arguably is rarer, so it's possible that some code didn't test for it. I don't imagine it to make much of a difference.
Note that the ""square"" shown in Arial Unicode above is a glyph itself and not all font show something that looks like a square at all.
HOWEVER
This is reliant on stbtt_FindGlyphIndex() == 0 being always an error value. It's unclear to me if some legit glyph could return 0, since the data is being pulled from font files and there are various code paths. I would expect that for something called ""index"" the value is 0 would be valid, and perhaps stbtt_FindGlyphIndex() should/could have be designed to return -1 on error. The only documentation I have is Sean's tweet in #575. I added asserts in stbtt_FindGlyphIndex() to verify that non-error return values are != 0 but I'm not hitting all return paths and either way it could depend on the font data. Perhaps stbtt_FindGlyphIndex() should be changed to return -1 instead of 0 (and maybe the public facing version would turn -1 into 0 for compatibility?). Or maybe 0 is always an error and then this is a non-issue.
OPTIONAL?
Perhaps still should be added as an option? e.g.
STBTT_DEF void stbtt_PackSetSkipMissingGlyphs(stbtt_pack_context *spc, int skip);
Which would set a flag in stbtt_pack_context and checked by the stbtt_PackFontRanges** function?
I'll change the PR to become that if you think it would be better this way.
( Ref ocornut/imgui#1703 ocornut/imgui#1671 )
Thank you for reading and considering this.","It wasn't my intention that user code would ever peek into a stbrp_rect structure.
The proposed PR only had stb_truetype code looking into them and eventually leading to stbtt_packedchar output to be zero.
I forgot it is officially documented that a zero width/height stbtt_packedchar is a failure, it was until now essentially a packing failure. The change would make it a packing failure OR a missing glyph failure.",True,{}
nothings/stb,https://github.com/nothings/stb,607,2018-05-07T14:52:51Z,2019-02-07T18:25:15Z,2019-02-07T18:25:15Z,MERGED,True,12,8,1,https://github.com/ocornut,stb_truetype: stbtt_PackFontRanges skip missing glyphs.,1,['1 stb_truetype'],https://github.com/nothings/stb/pull/607,https://github.com/ocornut,11,https://github.com/nothings/stb/pull/607#issuecomment-461521940,"The functions used by stbtt_PackFontRanges() don't skip glyphs that are missing in the font, which result in packing and rasterizing whatever the ""fallback"" font glyph is. I am using the word ""fallback"" but I am not sure I really understand if stbtt_FindGlyphIndex() returning 0 could also be a valid glyph.
See #575 about stbtt_FindGlyphIndex() documentation.
If I'm taking ""Arial Unicode.ttf"" and trying to e.g. 32 to 255, notice the squares about 127:

Notice they take space in the font atlas:

(I disabled oversampling here to make this more readable)
While this extraneous space is bearable for a typical ASCII set, when you work with larger sizes, international font ranges, icon font ranges it can be taking more space.
Additionally, this also means that stbtt_PackFontRanges() provide no information on whether a character was successfully found/packed/rasterized: from the user's point of view, all of the glyphs packing are successful.
As an explicit problematic case: FontAwesome version 5 (latest version of a very popular icon font) recently started shipping over multiple font files instead of a single one, which makes is more difficult to use those icons by specifying a single font range (as all the fonts files are now sharing the same range, but each individual font file only cover some of the codepoint within that range).
One workaround right now is for the user to call stbtt_FindGlyphIndex() and recreate font ranges manually from the input font ranges. It's possible but not really trivial for a casual end-user application, and the number of holes may easily turn a single range into hundreds of ranges (this would be the case for the icon fonts mentioned above).
PROPOSED SOLUTION
The proposed PR skips missing glyphs.
This requires the end-user to check that the output stbtt_packedchar are valid by testing positions, e.g.
            for (int char_idx = 0; char_idx < range.num_chars; char_idx += 1)
            {
                const stbtt_packedchar* pc = &range.chardata_for_range[char_idx];
                if (!pc->x0 && !pc->x1 && !pc->y0 && !pc->y1)
                    continue;
This was in theory already required in the past but I think it would only happen on actual packing failure (no room) which arguably is rarer, so it's possible that some code didn't test for it. I don't imagine it to make much of a difference.
Note that the ""square"" shown in Arial Unicode above is a glyph itself and not all font show something that looks like a square at all.
HOWEVER
This is reliant on stbtt_FindGlyphIndex() == 0 being always an error value. It's unclear to me if some legit glyph could return 0, since the data is being pulled from font files and there are various code paths. I would expect that for something called ""index"" the value is 0 would be valid, and perhaps stbtt_FindGlyphIndex() should/could have be designed to return -1 on error. The only documentation I have is Sean's tweet in #575. I added asserts in stbtt_FindGlyphIndex() to verify that non-error return values are != 0 but I'm not hitting all return paths and either way it could depend on the font data. Perhaps stbtt_FindGlyphIndex() should be changed to return -1 instead of 0 (and maybe the public facing version would turn -1 into 0 for compatibility?). Or maybe 0 is always an error and then this is a non-issue.
OPTIONAL?
Perhaps still should be added as an option? e.g.
STBTT_DEF void stbtt_PackSetSkipMissingGlyphs(stbtt_pack_context *spc, int skip);
Which would set a flag in stbtt_pack_context and checked by the stbtt_PackFontRanges** function?
I'll change the PR to become that if you think it would be better this way.
( Ref ocornut/imgui#1703 ocornut/imgui#1671 )
Thank you for reading and considering this.","To clarify, I believe that based on the discussion above, if you add a flag in the context structure + the corresponding function, then you can use existing PR as a base and only replace:
if (glyph != 0) {
with
if (glyph != 0 || !spc->skip_missing_glyphs) {
char skip_missing_glyphs being the new member, defaulting to 0.
It only makes it more evident that zero-sized packedchar are failure (they were already failures but less likely to happen so perhaps less likely to be handled by user code, which is a good reason for defaulting the new option to 0).",True,{}
nothings/stb,https://github.com/nothings/stb,607,2018-05-07T14:52:51Z,2019-02-07T18:25:15Z,2019-02-07T18:25:15Z,MERGED,True,12,8,1,https://github.com/ocornut,stb_truetype: stbtt_PackFontRanges skip missing glyphs.,1,['1 stb_truetype'],https://github.com/nothings/stb/pull/607,https://github.com/nothings,12,https://github.com/nothings/stb/pull/607#issuecomment-461522513,"The functions used by stbtt_PackFontRanges() don't skip glyphs that are missing in the font, which result in packing and rasterizing whatever the ""fallback"" font glyph is. I am using the word ""fallback"" but I am not sure I really understand if stbtt_FindGlyphIndex() returning 0 could also be a valid glyph.
See #575 about stbtt_FindGlyphIndex() documentation.
If I'm taking ""Arial Unicode.ttf"" and trying to e.g. 32 to 255, notice the squares about 127:

Notice they take space in the font atlas:

(I disabled oversampling here to make this more readable)
While this extraneous space is bearable for a typical ASCII set, when you work with larger sizes, international font ranges, icon font ranges it can be taking more space.
Additionally, this also means that stbtt_PackFontRanges() provide no information on whether a character was successfully found/packed/rasterized: from the user's point of view, all of the glyphs packing are successful.
As an explicit problematic case: FontAwesome version 5 (latest version of a very popular icon font) recently started shipping over multiple font files instead of a single one, which makes is more difficult to use those icons by specifying a single font range (as all the fonts files are now sharing the same range, but each individual font file only cover some of the codepoint within that range).
One workaround right now is for the user to call stbtt_FindGlyphIndex() and recreate font ranges manually from the input font ranges. It's possible but not really trivial for a casual end-user application, and the number of holes may easily turn a single range into hundreds of ranges (this would be the case for the icon fonts mentioned above).
PROPOSED SOLUTION
The proposed PR skips missing glyphs.
This requires the end-user to check that the output stbtt_packedchar are valid by testing positions, e.g.
            for (int char_idx = 0; char_idx < range.num_chars; char_idx += 1)
            {
                const stbtt_packedchar* pc = &range.chardata_for_range[char_idx];
                if (!pc->x0 && !pc->x1 && !pc->y0 && !pc->y1)
                    continue;
This was in theory already required in the past but I think it would only happen on actual packing failure (no room) which arguably is rarer, so it's possible that some code didn't test for it. I don't imagine it to make much of a difference.
Note that the ""square"" shown in Arial Unicode above is a glyph itself and not all font show something that looks like a square at all.
HOWEVER
This is reliant on stbtt_FindGlyphIndex() == 0 being always an error value. It's unclear to me if some legit glyph could return 0, since the data is being pulled from font files and there are various code paths. I would expect that for something called ""index"" the value is 0 would be valid, and perhaps stbtt_FindGlyphIndex() should/could have be designed to return -1 on error. The only documentation I have is Sean's tweet in #575. I added asserts in stbtt_FindGlyphIndex() to verify that non-error return values are != 0 but I'm not hitting all return paths and either way it could depend on the font data. Perhaps stbtt_FindGlyphIndex() should be changed to return -1 instead of 0 (and maybe the public facing version would turn -1 into 0 for compatibility?). Or maybe 0 is always an error and then this is a non-issue.
OPTIONAL?
Perhaps still should be added as an option? e.g.
STBTT_DEF void stbtt_PackSetSkipMissingGlyphs(stbtt_pack_context *spc, int skip);
Which would set a flag in stbtt_pack_context and checked by the stbtt_PackFontRanges** function?
I'll change the PR to become that if you think it would be better this way.
( Ref ocornut/imgui#1703 ocornut/imgui#1671 )
Thank you for reading and considering this.","Oh yeah, you're right, the packedchars are 0'd at init, I missed that.",True,{}
nothings/stb,https://github.com/nothings/stb,607,2018-05-07T14:52:51Z,2019-02-07T18:25:15Z,2019-02-07T18:25:15Z,MERGED,True,12,8,1,https://github.com/ocornut,stb_truetype: stbtt_PackFontRanges skip missing glyphs.,1,['1 stb_truetype'],https://github.com/nothings/stb/pull/607,https://github.com/nothings,13,https://github.com/nothings/stb/pull/607#issuecomment-461523495,"The functions used by stbtt_PackFontRanges() don't skip glyphs that are missing in the font, which result in packing and rasterizing whatever the ""fallback"" font glyph is. I am using the word ""fallback"" but I am not sure I really understand if stbtt_FindGlyphIndex() returning 0 could also be a valid glyph.
See #575 about stbtt_FindGlyphIndex() documentation.
If I'm taking ""Arial Unicode.ttf"" and trying to e.g. 32 to 255, notice the squares about 127:

Notice they take space in the font atlas:

(I disabled oversampling here to make this more readable)
While this extraneous space is bearable for a typical ASCII set, when you work with larger sizes, international font ranges, icon font ranges it can be taking more space.
Additionally, this also means that stbtt_PackFontRanges() provide no information on whether a character was successfully found/packed/rasterized: from the user's point of view, all of the glyphs packing are successful.
As an explicit problematic case: FontAwesome version 5 (latest version of a very popular icon font) recently started shipping over multiple font files instead of a single one, which makes is more difficult to use those icons by specifying a single font range (as all the fonts files are now sharing the same range, but each individual font file only cover some of the codepoint within that range).
One workaround right now is for the user to call stbtt_FindGlyphIndex() and recreate font ranges manually from the input font ranges. It's possible but not really trivial for a casual end-user application, and the number of holes may easily turn a single range into hundreds of ranges (this would be the case for the icon fonts mentioned above).
PROPOSED SOLUTION
The proposed PR skips missing glyphs.
This requires the end-user to check that the output stbtt_packedchar are valid by testing positions, e.g.
            for (int char_idx = 0; char_idx < range.num_chars; char_idx += 1)
            {
                const stbtt_packedchar* pc = &range.chardata_for_range[char_idx];
                if (!pc->x0 && !pc->x1 && !pc->y0 && !pc->y1)
                    continue;
This was in theory already required in the past but I think it would only happen on actual packing failure (no room) which arguably is rarer, so it's possible that some code didn't test for it. I don't imagine it to make much of a difference.
Note that the ""square"" shown in Arial Unicode above is a glyph itself and not all font show something that looks like a square at all.
HOWEVER
This is reliant on stbtt_FindGlyphIndex() == 0 being always an error value. It's unclear to me if some legit glyph could return 0, since the data is being pulled from font files and there are various code paths. I would expect that for something called ""index"" the value is 0 would be valid, and perhaps stbtt_FindGlyphIndex() should/could have be designed to return -1 on error. The only documentation I have is Sean's tweet in #575. I added asserts in stbtt_FindGlyphIndex() to verify that non-error return values are != 0 but I'm not hitting all return paths and either way it could depend on the font data. Perhaps stbtt_FindGlyphIndex() should be changed to return -1 instead of 0 (and maybe the public facing version would turn -1 into 0 for compatibility?). Or maybe 0 is always an error and then this is a non-issue.
OPTIONAL?
Perhaps still should be added as an option? e.g.
STBTT_DEF void stbtt_PackSetSkipMissingGlyphs(stbtt_pack_context *spc, int skip);
Which would set a flag in stbtt_pack_context and checked by the stbtt_PackFontRanges** function?
I'll change the PR to become that if you think it would be better this way.
( Ref ocornut/imgui#1703 ocornut/imgui#1671 )
Thank you for reading and considering this.","Anyway, yeah, your suggested change above is exactly what I had in my code (until I rewrote the test as 'glyph == 0 && spc->skip_missing' because I find the other form harder to reason about)",True,{'THUMBS_UP': ['https://github.com/ocornut']}
nothings/stb,https://github.com/nothings/stb,610,2018-05-09T21:49:34Z,2019-02-07T15:23:43Z,2019-07-11T20:54:11Z,CLOSED,False,9,1,1,https://github.com/dp304,stb_image: fix three unused function warnings,1,"['1 stb_image', '2 good-no changes needed', '2 warning']",https://github.com/nothings/stb/pull/610,https://github.com/dp304,1,https://github.com/nothings/stb/pull/610,Some new and fixed preprocessor checks with the aim of fixing #609,Some new and fixed preprocessor checks with the aim of fixing #609,True,{'THUMBS_UP': ['https://github.com/JCash']}
nothings/stb,https://github.com/nothings/stb,610,2018-05-09T21:49:34Z,2019-02-07T15:23:43Z,2019-07-11T20:54:11Z,CLOSED,False,9,1,1,https://github.com/dp304,stb_image: fix three unused function warnings,1,"['1 stb_image', '2 good-no changes needed', '2 warning']",https://github.com/nothings/stb/pull/610,https://github.com/nothings,2,https://github.com/nothings/stb/pull/610#issuecomment-461467106,Some new and fixed preprocessor checks with the aim of fixing #609,merged for next release,True,{}
nothings/stb,https://github.com/nothings/stb,611,2018-05-15T07:29:14Z,2019-03-05T07:18:11Z,2019-03-05T07:18:11Z,CLOSED,False,76,72,1,https://github.com/jalloulik,Silenced 2 unused parameters warnings,1,"['1 stb_image', 'needs changes']",https://github.com/nothings/stb/pull/611,https://github.com/jalloulik,1,https://github.com/nothings/stb/pull/611,"Silenced 2 warnings. My editor also seems to have removed a few spaces at the end of some lines, which worried me for a bit at first in case they were there by choice, but their presence wasn't consistent enough to believe that was the case.","Silenced 2 warnings. My editor also seems to have removed a few spaces at the end of some lines, which worried me for a bit at first in case they were there by choice, but their presence wasn't consistent enough to believe that was the case.",True,{}
nothings/stb,https://github.com/nothings/stb,611,2018-05-15T07:29:14Z,2019-03-05T07:18:11Z,2019-03-05T07:18:11Z,CLOSED,False,76,72,1,https://github.com/jalloulik,Silenced 2 unused parameters warnings,1,"['1 stb_image', 'needs changes']",https://github.com/nothings/stb/pull/611,https://github.com/nothings,2,https://github.com/nothings/stb/pull/611#issuecomment-461321287,"Silenced 2 warnings. My editor also seems to have removed a few spaces at the end of some lines, which worried me for a bit at first in case they were there by choice, but their presence wasn't consistent enough to believe that was the case.","Sorry I didn't get to this before now.
The problem with the unrelated space changes is it makes the diff on github useless, so I can't see the actual changes. The extra spaces are definitely not needed, but it would be best to remove them in a separate pull request.",True,{}
nothings/stb,https://github.com/nothings/stb,611,2018-05-15T07:29:14Z,2019-03-05T07:18:11Z,2019-03-05T07:18:11Z,CLOSED,False,76,72,1,https://github.com/jalloulik,Silenced 2 unused parameters warnings,1,"['1 stb_image', 'needs changes']",https://github.com/nothings/stb/pull/611,https://github.com/nothings,3,https://github.com/nothings/stb/pull/611#issuecomment-461511899,"Silenced 2 warnings. My editor also seems to have removed a few spaces at the end of some lines, which worried me for a bit at first in case they were there by choice, but their presence wasn't consistent enough to believe that was the case.","Also it's probable these warnings have been fixed by another PR that I've integrated and am about to release, since I can't tell what the changes were.",True,{}
nothings/stb,https://github.com/nothings/stb,611,2018-05-15T07:29:14Z,2019-03-05T07:18:11Z,2019-03-05T07:18:11Z,CLOSED,False,76,72,1,https://github.com/jalloulik,Silenced 2 unused parameters warnings,1,"['1 stb_image', 'needs changes']",https://github.com/nothings/stb/pull/611,https://github.com/jalloulik,4,https://github.com/nothings/stb/pull/611#issuecomment-461555030,"Silenced 2 warnings. My editor also seems to have removed a few spaces at the end of some lines, which worried me for a bit at first in case they were there by choice, but their presence wasn't consistent enough to believe that was the case.","Also it's probable these warnings have been fixed by another PR that I've integrated and am about to release, since I can't tell what the changes were.

No worries, thanks for the reply. This was my first PR online, I should have paid more attention to the spaces. Thank you for the hard work though, your library helped me for a school project. Feel free to close this.",True,{}
nothings/stb,https://github.com/nothings/stb,613,2018-05-22T08:57:03Z,2020-02-02T15:51:31Z,2020-02-02T15:51:32Z,CLOSED,False,95,13,3,https://github.com/Leandros,stb_sprintf: fix return value to follow libc spec,2,['1 stb_sprintf'],https://github.com/nothings/stb/pull/613,https://github.com/Leandros,1,https://github.com/nothings/stb/pull/613,"Pull request to fix #612. This is achieved by simply continuing to write into the temporary buffer, and counting the length in another variable.","Pull request to fix #612. This is achieved by simply continuing to write into the temporary buffer, and counting the length in another variable.",True,{}
nothings/stb,https://github.com/nothings/stb,613,2018-05-22T08:57:03Z,2020-02-02T15:51:31Z,2020-02-02T15:51:32Z,CLOSED,False,95,13,3,https://github.com/Leandros,stb_sprintf: fix return value to follow libc spec,2,['1 stb_sprintf'],https://github.com/nothings/stb/pull/613,https://github.com/nothings,2,https://github.com/nothings/stb/pull/613#issuecomment-581148347,"Pull request to fix #612. This is achieved by simply continuing to write into the temporary buffer, and counting the length in another variable.",Had to merge this manually because I didn't want the Makefile or test_sprintf.c changes. Hope I didn't screw anything up!,True,{}
nothings/stb,https://github.com/nothings/stb,615,2018-05-26T02:47:43Z,2019-02-07T15:27:57Z,2019-02-07T15:27:57Z,CLOSED,False,4,2,1,https://github.com/sherjilozair,Update stb_tilemap_editor.h,2,['3 documentation fix'],https://github.com/nothings/stb/pull/615,https://github.com/sherjilozair,1,https://github.com/nothings/stb/pull/615,Let's just use the proper name. More helpful for beginners.,Let's just use the proper name. More helpful for beginners.,True,{'THUMBS_UP': ['https://github.com/nothings']}
nothings/stb,https://github.com/nothings/stb,615,2018-05-26T02:47:43Z,2019-02-07T15:27:57Z,2019-02-07T15:27:57Z,CLOSED,False,4,2,1,https://github.com/sherjilozair,Update stb_tilemap_editor.h,2,['3 documentation fix'],https://github.com/nothings/stb/pull/615,https://github.com/nothings,2,https://github.com/nothings/stb/pull/615#issuecomment-461469255,Let's just use the proper name. More helpful for beginners.,merged in next release,True,{}
nothings/stb,https://github.com/nothings/stb,621,2018-06-05T20:46:35Z,2019-02-07T15:28:50Z,2019-02-07T15:28:50Z,CLOSED,False,15,15,1,https://github.com/ocornut,stb_textedit: fix undo/redo after pasting large amount of text at once,1,"['2 bug', '1 stb library w/no tag']",https://github.com/nothings/stb/pull/621,https://github.com/ocornut,1,https://github.com/nothings/stb/pull/621,"Fixes #620.
Suggested line for Changelog:

fix undo/redo from corrupting data after pasting large amount of text at once (over 32 KB)

(
I first tried to use an inferred STB_TEXTEDIT_UNDOCHARPOSITIONTYPE that would be either short either int, however since there is code mixing undo_char_pos and insert_length it didn't make much sense, so just switched to int and it is simpler.
NB: The documentation incorrectly suggested the size would be:
[4 + sizeof(STB_TEXTEDIT_POSITIONTYPE)] * STB_TEXTEDIT_UNDOSTATE_COUNT
It should have said:
[6 + sizeof(STB_TEXTEDIT_POSITIONTYPE)] * STB_TEXTEDIT_UNDOSTATE_COUNT
And now it became
[4 + 3 * sizeof(STB_TEXTEDIT_POSITIONTYPE)] * STB_TEXTEDIT_UNDOSTATE_COUNT
)","Fixes #620.
Suggested line for Changelog:

fix undo/redo from corrupting data after pasting large amount of text at once (over 32 KB)

(
I first tried to use an inferred STB_TEXTEDIT_UNDOCHARPOSITIONTYPE that would be either short either int, however since there is code mixing undo_char_pos and insert_length it didn't make much sense, so just switched to int and it is simpler.
NB: The documentation incorrectly suggested the size would be:
[4 + sizeof(STB_TEXTEDIT_POSITIONTYPE)] * STB_TEXTEDIT_UNDOSTATE_COUNT
It should have said:
[6 + sizeof(STB_TEXTEDIT_POSITIONTYPE)] * STB_TEXTEDIT_UNDOSTATE_COUNT
And now it became
[4 + 3 * sizeof(STB_TEXTEDIT_POSITIONTYPE)] * STB_TEXTEDIT_UNDOSTATE_COUNT
)",True,{}
nothings/stb,https://github.com/nothings/stb,621,2018-06-05T20:46:35Z,2019-02-07T15:28:50Z,2019-02-07T15:28:50Z,CLOSED,False,15,15,1,https://github.com/ocornut,stb_textedit: fix undo/redo after pasting large amount of text at once,1,"['2 bug', '1 stb library w/no tag']",https://github.com/nothings/stb/pull/621,https://github.com/nothings,2,https://github.com/nothings/stb/pull/621#issuecomment-461469687,"Fixes #620.
Suggested line for Changelog:

fix undo/redo from corrupting data after pasting large amount of text at once (over 32 KB)

(
I first tried to use an inferred STB_TEXTEDIT_UNDOCHARPOSITIONTYPE that would be either short either int, however since there is code mixing undo_char_pos and insert_length it didn't make much sense, so just switched to int and it is simpler.
NB: The documentation incorrectly suggested the size would be:
[4 + sizeof(STB_TEXTEDIT_POSITIONTYPE)] * STB_TEXTEDIT_UNDOSTATE_COUNT
It should have said:
[6 + sizeof(STB_TEXTEDIT_POSITIONTYPE)] * STB_TEXTEDIT_UNDOSTATE_COUNT
And now it became
[4 + 3 * sizeof(STB_TEXTEDIT_POSITIONTYPE)] * STB_TEXTEDIT_UNDOSTATE_COUNT
)",merged for next release,True,{}
nothings/stb,https://github.com/nothings/stb,623,2018-06-08T04:44:18Z,2019-02-07T15:31:15Z,2019-02-07T15:31:15Z,CLOSED,False,2,0,1,https://github.com/plzombie,Fix 1bit bmp,2,"['2 bug', '1 stb_image']",https://github.com/nothings/stb/pull/623,https://github.com/plzombie,1,https://github.com/nothings/stb/pull/623,"Fix to my previous pull request #500.
Loading 1bit bmp now works properly if req == 4 or if s->img_x divisible by 8.
Sorry for not testing it before.","Fix to my previous pull request #500.
Loading 1bit bmp now works properly if req == 4 or if s->img_x divisible by 8.
Sorry for not testing it before.",True,{'THUMBS_UP': ['https://github.com/andwn']}
nothings/stb,https://github.com/nothings/stb,623,2018-06-08T04:44:18Z,2019-02-07T15:31:15Z,2019-02-07T15:31:15Z,CLOSED,False,2,0,1,https://github.com/plzombie,Fix 1bit bmp,2,"['2 bug', '1 stb_image']",https://github.com/nothings/stb/pull/623,https://github.com/nothings,2,https://github.com/nothings/stb/pull/623#issuecomment-461470887,"Fix to my previous pull request #500.
Loading 1bit bmp now works properly if req == 4 or if s->img_x divisible by 8.
Sorry for not testing it before.",merged for next release,True,{}
nothings/stb,https://github.com/nothings/stb,624,2018-06-08T07:42:08Z,2019-02-07T15:34:20Z,2019-02-07T15:34:28Z,CLOSED,False,6,1,1,https://github.com/technik,Optimize stbi  ldr to hdr,2,"['1 stb_image', 'performance']",https://github.com/nothings/stb/pull/624,https://github.com/technik,1,https://github.com/nothings/stb/pull/624,"Optimize stbi__ldr_to_ldr.
Break a for loop into two parts, and extract an if out of it #622","Optimize stbi__ldr_to_ldr.
Break a for loop into two parts, and extract an if out of it #622",True,{}
nothings/stb,https://github.com/nothings/stb,624,2018-06-08T07:42:08Z,2019-02-07T15:34:20Z,2019-02-07T15:34:28Z,CLOSED,False,6,1,1,https://github.com/technik,Optimize stbi  ldr to hdr,2,"['1 stb_image', 'performance']",https://github.com/nothings/stb/pull/624,https://github.com/nothings,2,https://github.com/nothings/stb/pull/624#issuecomment-461472365,"Optimize stbi__ldr_to_ldr.
Break a for loop into two parts, and extract an if out of it #622",merged in next release,True,{}
nothings/stb,https://github.com/nothings/stb,625,2018-06-13T10:01:08Z,2019-02-07T07:53:10Z,2019-02-07T07:53:10Z,CLOSED,False,598,64,1,https://github.com/jcredmond,stb_image: add APNG support,3,[],https://github.com/nothings/stb/pull/625,https://github.com/jcredmond,1,https://github.com/nothings/stb/pull/625,"I use stb_image in one of my projects and I needed to work with APNG files. To make my life easier I added APNG support to stb_image.h rather than having to pull in a patched libpng.
I know new formats aren't encouraged, but I'm contributing the code back just in case it is useful for someone else since the changes are not too invasive: it's essentially adding a couple of chunk types with error checking and some minor tweaks to the current PNG functions. The core PNG code has not been changed other than to remove the hardcoded assumption that the default image is the image being decoded.
I chose to pack the results so that the memory buffer returned can be free()'ed with one call and the user doesn't need to remember to free some other structures or some type of linked list. This makes it completely compatible with normal PNG files, and due to APNG being backward compatible itself the user doesn't pay for the animation data they may not use. I think this approach could be generalized for e.g. animated GIF, at the cost of adding a size_t pointer to the main API. Technical details are in the commit message and I'm open to changing around the internals.","I use stb_image in one of my projects and I needed to work with APNG files. To make my life easier I added APNG support to stb_image.h rather than having to pull in a patched libpng.
I know new formats aren't encouraged, but I'm contributing the code back just in case it is useful for someone else since the changes are not too invasive: it's essentially adding a couple of chunk types with error checking and some minor tweaks to the current PNG functions. The core PNG code has not been changed other than to remove the hardcoded assumption that the default image is the image being decoded.
I chose to pack the results so that the memory buffer returned can be free()'ed with one call and the user doesn't need to remember to free some other structures or some type of linked list. This makes it completely compatible with normal PNG files, and due to APNG being backward compatible itself the user doesn't pay for the animation data they may not use. I think this approach could be generalized for e.g. animated GIF, at the cost of adding a size_t pointer to the main API. Technical details are in the commit message and I'm open to changing around the internals.",True,{}
nothings/stb,https://github.com/nothings/stb,625,2018-06-13T10:01:08Z,2019-02-07T07:53:10Z,2019-02-07T07:53:10Z,CLOSED,False,598,64,1,https://github.com/jcredmond,stb_image: add APNG support,3,[],https://github.com/nothings/stb/pull/625,https://github.com/nothings,2,https://github.com/nothings/stb/pull/625#issuecomment-396976411,"I use stb_image in one of my projects and I needed to work with APNG files. To make my life easier I added APNG support to stb_image.h rather than having to pull in a patched libpng.
I know new formats aren't encouraged, but I'm contributing the code back just in case it is useful for someone else since the changes are not too invasive: it's essentially adding a couple of chunk types with error checking and some minor tweaks to the current PNG functions. The core PNG code has not been changed other than to remove the hardcoded assumption that the default image is the image being decoded.
I chose to pack the results so that the memory buffer returned can be free()'ed with one call and the user doesn't need to remember to free some other structures or some type of linked list. This makes it completely compatible with normal PNG files, and due to APNG being backward compatible itself the user doesn't pay for the animation data they may not use. I think this approach could be generalized for e.g. animated GIF, at the cost of adding a size_t pointer to the main API. Technical details are in the commit message and I'm open to changing around the internals.","I'm sorry since it looks like you've done an awful lot of work on this, but I think it's is outside the scope of what we want to support in stb_image.",True,{}
nothings/stb,https://github.com/nothings/stb,625,2018-06-13T10:01:08Z,2019-02-07T07:53:10Z,2019-02-07T07:53:10Z,CLOSED,False,598,64,1,https://github.com/jcredmond,stb_image: add APNG support,3,[],https://github.com/nothings/stb/pull/625,https://github.com/jcredmond,3,https://github.com/nothings/stb/pull/625#issuecomment-396979968,"I use stb_image in one of my projects and I needed to work with APNG files. To make my life easier I added APNG support to stb_image.h rather than having to pull in a patched libpng.
I know new formats aren't encouraged, but I'm contributing the code back just in case it is useful for someone else since the changes are not too invasive: it's essentially adding a couple of chunk types with error checking and some minor tweaks to the current PNG functions. The core PNG code has not been changed other than to remove the hardcoded assumption that the default image is the image being decoded.
I chose to pack the results so that the memory buffer returned can be free()'ed with one call and the user doesn't need to remember to free some other structures or some type of linked list. This makes it completely compatible with normal PNG files, and due to APNG being backward compatible itself the user doesn't pay for the animation data they may not use. I think this approach could be generalized for e.g. animated GIF, at the cost of adding a size_t pointer to the main API. Technical details are in the commit message and I'm open to changing around the internals.","No problem. I use stb_image for all texture / image loading, and I much preferred this to pulling in a modified libpng. It was only a couple days work, and since stb_image has animated GIF I thought I'd formalize it in a PR just in case anyone else has a use for it.
Thanks for the great libraries!",True,{}
nothings/stb,https://github.com/nothings/stb,626,2018-06-13T10:13:09Z,2018-06-13T14:36:12Z,2018-06-13T14:36:12Z,CLOSED,False,1,1,1,https://github.com/troughton,Fix double multiplication by width in write_hdr_core,1,[],https://github.com/nothings/stb/pull/626,https://github.com/troughton,1,https://github.com/nothings/stb/pull/626,stbiw__write_hdr_scanline was overrunning the buffer due to multiplying by the width twice when calculating the row address.,stbiw__write_hdr_scanline was overrunning the buffer due to multiplying by the width twice when calculating the row address.,True,{}
nothings/stb,https://github.com/nothings/stb,626,2018-06-13T10:13:09Z,2018-06-13T14:36:12Z,2018-06-13T14:36:12Z,CLOSED,False,1,1,1,https://github.com/troughton,Fix double multiplication by width in write_hdr_core,1,[],https://github.com/nothings/stb/pull/626,https://github.com/nothings,2,https://github.com/nothings/stb/pull/626#issuecomment-396960496,stbiw__write_hdr_scanline was overrunning the buffer due to multiplying by the width twice when calculating the row address.,dupe of #572,True,{}
nothings/stb,https://github.com/nothings/stb,629,2018-06-18T02:32:59Z,2019-03-05T07:22:28Z,2019-03-06T01:15:10Z,CLOSED,False,1,1,1,https://github.com/jmarshallstewart,Add sizeOfBuffer argument for sprintf_s when STBI_MSC_SECURE_CRT is defined.,1,"['2 bug', '1 stb_image_write', '4 need data']",https://github.com/nothings/stb/pull/629,https://github.com/jmarshallstewart,1,https://github.com/nothings/stb/pull/629,,,True,{}
nothings/stb,https://github.com/nothings/stb,629,2018-06-18T02:32:59Z,2019-03-05T07:22:28Z,2019-03-06T01:15:10Z,CLOSED,False,1,1,1,https://github.com/jmarshallstewart,Add sizeOfBuffer argument for sprintf_s when STBI_MSC_SECURE_CRT is defined.,1,"['2 bug', '1 stb_image_write', '4 need data']",https://github.com/nothings/stb/pull/629,https://github.com/nothings,2,https://github.com/nothings/stb/pull/629#issuecomment-461474310,,"This doesn't add a new #ifdef branch, but changes an existing one to add a new argument. Is it possible there was some version of MSVC where the old call (with one fewer arguments) is correct? This has happened with other snprintf variations in the past, so I would hate to break one. On the other hand I'm not sure how one could ever have an sprintf_s without the size of the buffer, so maybe it just never worked?",True,{}
nothings/stb,https://github.com/nothings/stb,629,2018-06-18T02:32:59Z,2019-03-05T07:22:28Z,2019-03-06T01:15:10Z,CLOSED,False,1,1,1,https://github.com/jmarshallstewart,Add sizeOfBuffer argument for sprintf_s when STBI_MSC_SECURE_CRT is defined.,1,"['2 bug', '1 stb_image_write', '4 need data']",https://github.com/nothings/stb/pull/629,https://github.com/nothings,3,https://github.com/nothings/stb/pull/629#issuecomment-469568750,,"This has been fixed in a different way. If you still have a problem with it, please report again or reopen.",True,{}
nothings/stb,https://github.com/nothings/stb,629,2018-06-18T02:32:59Z,2019-03-05T07:22:28Z,2019-03-06T01:15:10Z,CLOSED,False,1,1,1,https://github.com/jmarshallstewart,Add sizeOfBuffer argument for sprintf_s when STBI_MSC_SECURE_CRT is defined.,1,"['2 bug', '1 stb_image_write', '4 need data']",https://github.com/nothings/stb/pull/629,https://github.com/jmarshallstewart,4,https://github.com/nothings/stb/pull/629#issuecomment-469925728,,"No problems here, thanks for the fix (and for STB in general).",True,{}
nothings/stb,https://github.com/nothings/stb,630,2018-06-21T14:02:24Z,2019-02-07T15:40:09Z,2019-02-07T15:40:09Z,CLOSED,False,0,3,1,https://github.com/rombankzero,stb_rect_pack: Silence gcc warning by removing always-true assert,1,"['stb_rect_pack', '2 warning']",https://github.com/nothings/stb/pull/630,https://github.com/rombankzero,1,https://github.com/nothings/stb/pull/630,"I removed an assert that was always true, since it was just asserting that a value was within its data type's normal numeric limits (a uint16 is always <= 0xffff). The comparison tripped gcc's -Wtype-limits warning (also enabled by -Wextra).
Related issue: #558.","I removed an assert that was always true, since it was just asserting that a value was within its data type's normal numeric limits (a uint16 is always <= 0xffff). The comparison tripped gcc's -Wtype-limits warning (also enabled by -Wextra).
Related issue: #558.",True,{}
nothings/stb,https://github.com/nothings/stb,630,2018-06-21T14:02:24Z,2019-02-07T15:40:09Z,2019-02-07T15:40:09Z,CLOSED,False,0,3,1,https://github.com/rombankzero,stb_rect_pack: Silence gcc warning by removing always-true assert,1,"['stb_rect_pack', '2 warning']",https://github.com/nothings/stb/pull/630,https://github.com/nothings,2,https://github.com/nothings/stb/pull/630#issuecomment-461475245,"I removed an assert that was always true, since it was just asserting that a value was within its data type's normal numeric limits (a uint16 is always <= 0xffff). The comparison tripped gcc's -Wtype-limits warning (also enabled by -Wextra).
Related issue: #558.",merged in next release,True,{}
nothings/stb,https://github.com/nothings/stb,631,2018-06-27T08:40:51Z,2019-02-07T15:42:24Z,2019-02-07T15:42:24Z,CLOSED,False,11,1,1,https://github.com/stefano-zanotti-88,stb_sprintf: fix unaligned access,1,"['2 bug', '1 stb_sprintf']",https://github.com/nothings/stb/pull/631,https://github.com/stefano-zanotti-88,1,https://github.com/nothings/stb/pull/631,"Fix an unaligned 32-bit access even if STB_SPRINTF_NOUNALIGNED was defined.
STB_SPRINTF_NOUNALIGNED prevented unaligned accesses to the format string but not to the destination buffer.
The bug (and crash) appears only when a sequence of 4 or more chars is to be copied from the format string to the destination buffer, and the current pointer into the format string is aligned, and the current pointer into the destination buffer is not aligned.
Exactly three of the following calls produced an unaligned access to 'buf':
#define STB_SPRINTF_IMPLEMENTATION
#define STB_SPRINTF_NOUNALIGNED
#include ""stb_sprintf.h""

int main(void) {
    char buf[8];
    stbsp_sprintf(buf + 0, ""1234"");
    stbsp_sprintf(buf + 1, ""1234"");
    stbsp_sprintf(buf + 2, ""1234"");
    stbsp_sprintf(buf + 3, ""1234"");
}

The proposed fix is just the simplest working fix; I have no idea what impact it has on performance since it messes with the innermost loop of the function; however, it has no effect if STB_SPRINTF_NOUNALIGNED is not defined.","Fix an unaligned 32-bit access even if STB_SPRINTF_NOUNALIGNED was defined.
STB_SPRINTF_NOUNALIGNED prevented unaligned accesses to the format string but not to the destination buffer.
The bug (and crash) appears only when a sequence of 4 or more chars is to be copied from the format string to the destination buffer, and the current pointer into the format string is aligned, and the current pointer into the destination buffer is not aligned.
Exactly three of the following calls produced an unaligned access to 'buf':
#define STB_SPRINTF_IMPLEMENTATION
#define STB_SPRINTF_NOUNALIGNED
#include ""stb_sprintf.h""

int main(void) {
    char buf[8];
    stbsp_sprintf(buf + 0, ""1234"");
    stbsp_sprintf(buf + 1, ""1234"");
    stbsp_sprintf(buf + 2, ""1234"");
    stbsp_sprintf(buf + 3, ""1234"");
}

The proposed fix is just the simplest working fix; I have no idea what impact it has on performance since it messes with the innermost loop of the function; however, it has no effect if STB_SPRINTF_NOUNALIGNED is not defined.",True,{}
nothings/stb,https://github.com/nothings/stb,631,2018-06-27T08:40:51Z,2019-02-07T15:42:24Z,2019-02-07T15:42:24Z,CLOSED,False,11,1,1,https://github.com/stefano-zanotti-88,stb_sprintf: fix unaligned access,1,"['2 bug', '1 stb_sprintf']",https://github.com/nothings/stb/pull/631,https://github.com/nothings,2,https://github.com/nothings/stb/pull/631#issuecomment-461476293,"Fix an unaligned 32-bit access even if STB_SPRINTF_NOUNALIGNED was defined.
STB_SPRINTF_NOUNALIGNED prevented unaligned accesses to the format string but not to the destination buffer.
The bug (and crash) appears only when a sequence of 4 or more chars is to be copied from the format string to the destination buffer, and the current pointer into the format string is aligned, and the current pointer into the destination buffer is not aligned.
Exactly three of the following calls produced an unaligned access to 'buf':
#define STB_SPRINTF_IMPLEMENTATION
#define STB_SPRINTF_NOUNALIGNED
#include ""stb_sprintf.h""

int main(void) {
    char buf[8];
    stbsp_sprintf(buf + 0, ""1234"");
    stbsp_sprintf(buf + 1, ""1234"");
    stbsp_sprintf(buf + 2, ""1234"");
    stbsp_sprintf(buf + 3, ""1234"");
}

The proposed fix is just the simplest working fix; I have no idea what impact it has on performance since it messes with the innermost loop of the function; however, it has no effect if STB_SPRINTF_NOUNALIGNED is not defined.","Seems reasonable to me. Merged for next release, sorry for the delay.",True,{}
nothings/stb,https://github.com/nothings/stb,633,2018-07-03T09:03:26Z,2019-02-07T15:52:02Z,2019-02-08T13:39:51Z,CLOSED,False,9,3,1,https://github.com/stefano-zanotti-88,"stb_sprintf: fix wrong integer width for modifiers 'j', 'z', 't'",1,[],https://github.com/nothings/stb/pull/633,https://github.com/stefano-zanotti-88,1,https://github.com/nothings/stb/pull/633,"The 'j', 'z', 't' modifiers now behave according to the table at
http://www.cplusplus.com/reference/cstdio/printf/
A couple of new #include's were necessary for the fix.
To avoid them, the following hacks might be used, but I haven't tested them on various platforms to check that they actually work.
sizeof(size_t)     ==  sizeof(sizeof(0))
sizeof(intmax_t)   ==  sizeof(long long)
sizeof(ptrdiff_t)  ==  sizeof((char*)0 - (char*)0)","The 'j', 'z', 't' modifiers now behave according to the table at
http://www.cplusplus.com/reference/cstdio/printf/
A couple of new #include's were necessary for the fix.
To avoid them, the following hacks might be used, but I haven't tested them on various platforms to check that they actually work.
sizeof(size_t)     ==  sizeof(sizeof(0))
sizeof(intmax_t)   ==  sizeof(long long)
sizeof(ptrdiff_t)  ==  sizeof((char*)0 - (char*)0)",True,{}
nothings/stb,https://github.com/nothings/stb,633,2018-07-03T09:03:26Z,2019-02-07T15:52:02Z,2019-02-08T13:39:51Z,CLOSED,False,9,3,1,https://github.com/stefano-zanotti-88,"stb_sprintf: fix wrong integer width for modifiers 'j', 'z', 't'",1,[],https://github.com/nothings/stb/pull/633,https://github.com/rygorous,2,https://github.com/nothings/stb/pull/633#issuecomment-432071401,"The 'j', 'z', 't' modifiers now behave according to the table at
http://www.cplusplus.com/reference/cstdio/printf/
A couple of new #include's were necessary for the fix.
To avoid them, the following hacks might be used, but I haven't tested them on various platforms to check that they actually work.
sizeof(size_t)     ==  sizeof(sizeof(0))
sizeof(intmax_t)   ==  sizeof(long long)
sizeof(ptrdiff_t)  ==  sizeof((char*)0 - (char*)0)","Can't just #include <stdint.h>, sadly, because we still support some pre-C99 compilers that don't have it!
Otherwise looks good, will merge next time we do a release.",True,{}
nothings/stb,https://github.com/nothings/stb,633,2018-07-03T09:03:26Z,2019-02-07T15:52:02Z,2019-02-08T13:39:51Z,CLOSED,False,9,3,1,https://github.com/stefano-zanotti-88,"stb_sprintf: fix wrong integer width for modifiers 'j', 'z', 't'",1,[],https://github.com/nothings/stb/pull/633,https://github.com/stefano-zanotti-88,3,https://github.com/nothings/stb/pull/633#issuecomment-432229406,"The 'j', 'z', 't' modifiers now behave according to the table at
http://www.cplusplus.com/reference/cstdio/printf/
A couple of new #include's were necessary for the fix.
To avoid them, the following hacks might be used, but I haven't tested them on various platforms to check that they actually work.
sizeof(size_t)     ==  sizeof(sizeof(0))
sizeof(intmax_t)   ==  sizeof(long long)
sizeof(ptrdiff_t)  ==  sizeof((char*)0 - (char*)0)","You could also #include <stdint.h> if supported (based on the value of STDC_VERSION, maybe?), and fall back to the hacks that I mentioned in the comment in case the compiler really is pre-C99.
Something like: #if defined(STDC_VERSION) && STDC_VERSION >= 199901L
Do you think that this could do?",True,{}
nothings/stb,https://github.com/nothings/stb,633,2018-07-03T09:03:26Z,2019-02-07T15:52:02Z,2019-02-08T13:39:51Z,CLOSED,False,9,3,1,https://github.com/stefano-zanotti-88,"stb_sprintf: fix wrong integer width for modifiers 'j', 'z', 't'",1,[],https://github.com/nothings/stb/pull/633,https://github.com/Manuzor,4,https://github.com/nothings/stb/pull/633#issuecomment-433329907,"The 'j', 'z', 't' modifiers now behave according to the table at
http://www.cplusplus.com/reference/cstdio/printf/
A couple of new #include's were necessary for the fix.
To avoid them, the following hacks might be used, but I haven't tested them on various platforms to check that they actually work.
sizeof(size_t)     ==  sizeof(sizeof(0))
sizeof(intmax_t)   ==  sizeof(long long)
sizeof(ptrdiff_t)  ==  sizeof((char*)0 - (char*)0)",Isn't sizeof(void*) reliable to check for current bitness?,True,{}
nothings/stb,https://github.com/nothings/stb,633,2018-07-03T09:03:26Z,2019-02-07T15:52:02Z,2019-02-08T13:39:51Z,CLOSED,False,9,3,1,https://github.com/stefano-zanotti-88,"stb_sprintf: fix wrong integer width for modifiers 'j', 'z', 't'",1,[],https://github.com/nothings/stb/pull/633,https://github.com/rygorous,5,https://github.com/nothings/stb/pull/633#issuecomment-433334316,"The 'j', 'z', 't' modifiers now behave according to the table at
http://www.cplusplus.com/reference/cstdio/printf/
A couple of new #include's were necessary for the fix.
To avoid them, the following hacks might be used, but I haven't tested them on various platforms to check that they actually work.
sizeof(size_t)     ==  sizeof(sizeof(0))
sizeof(intmax_t)   ==  sizeof(long long)
sizeof(ptrdiff_t)  ==  sizeof((char*)0 - (char*)0)","Nope! There are targets with 64-bit registers (and 64-bit (u)intmax_t) but
32-bit pointers, size_t and ptrdiff_t. For example, Linux with the x32 ABI
on 64-bit x86, the PS3, or the Xbox 360. Admittedly, all three are becoming
less relevant with every passing year.
…
On Fri, Oct 26, 2018, 01:27 Manuel M. ***@***.***> wrote:
 Isn't sizeof(void*) reliable to check for current bitness?

 —
 You are receiving this because you commented.
 Reply to this email directly, view it on GitHub
 <#633 (comment)>, or mute
 the thread
 <https://github.com/notifications/unsubscribe-auth/ABBw-EChyxU2qbPeH9P1GxBNi8bDauFJks5uoseNgaJpZM4VAj08>
 .",True,{'HEART': ['https://github.com/Manuzor']}
nothings/stb,https://github.com/nothings/stb,633,2018-07-03T09:03:26Z,2019-02-07T15:52:02Z,2019-02-08T13:39:51Z,CLOSED,False,9,3,1,https://github.com/stefano-zanotti-88,"stb_sprintf: fix wrong integer width for modifiers 'j', 'z', 't'",1,[],https://github.com/nothings/stb/pull/633,https://github.com/nothings,6,https://github.com/nothings/stb/pull/633#issuecomment-461480957,"The 'j', 'z', 't' modifiers now behave according to the table at
http://www.cplusplus.com/reference/cstdio/printf/
A couple of new #include's were necessary for the fix.
To avoid them, the following hacks might be used, but I haven't tested them on various platforms to check that they actually work.
sizeof(size_t)     ==  sizeof(sizeof(0))
sizeof(intmax_t)   ==  sizeof(long long)
sizeof(ptrdiff_t)  ==  sizeof((char*)0 - (char*)0)","size_t and ptrdiff_t are fine, but I just assumed 64-bit for intmax_t to avoid the stdint problem. if that's not a reasonable fix let me know.
fixed for next release (not a merge as I redid the changes by hand)",True,{}
nothings/stb,https://github.com/nothings/stb,633,2018-07-03T09:03:26Z,2019-02-07T15:52:02Z,2019-02-08T13:39:51Z,CLOSED,False,9,3,1,https://github.com/stefano-zanotti-88,"stb_sprintf: fix wrong integer width for modifiers 'j', 'z', 't'",1,[],https://github.com/nothings/stb/pull/633,https://github.com/stefano-zanotti-88,7,https://github.com/nothings/stb/pull/633#issuecomment-461805734,"The 'j', 'z', 't' modifiers now behave according to the table at
http://www.cplusplus.com/reference/cstdio/printf/
A couple of new #include's were necessary for the fix.
To avoid them, the following hacks might be used, but I haven't tested them on various platforms to check that they actually work.
sizeof(size_t)     ==  sizeof(sizeof(0))
sizeof(intmax_t)   ==  sizeof(long long)
sizeof(ptrdiff_t)  ==  sizeof((char*)0 - (char*)0)","As far as I know, intmax_t is required to be >= 64 bit, and no compiler has 128-bit integers among their standard types (just as extensions), so the assumption is ok, also because handling 128-bit numbers would require far more extensive changes to the library, I guess.",True,{'THUMBS_UP': ['https://github.com/nothings']}
nothings/stb,https://github.com/nothings/stb,637,2018-07-20T23:53:39Z,2019-02-07T08:20:28Z,2019-02-07T08:20:28Z,CLOSED,False,3,2,1,https://github.com/tweenk,Fix unused variable warning.,1,"['duplicate', '1 stb_truetype', '2 warning']",https://github.com/nothings/stb/pull/637,https://github.com/tweenk,1,https://github.com/nothings/stb/pull/637,"pairSetCount is only used in an assertion. When STBTT_assert is defined to
nothing, this triggers an unused variable warning.","pairSetCount is only used in an assertion. When STBTT_assert is defined to
nothing, this triggers an unused variable warning.",True,{}
nothings/stb,https://github.com/nothings/stb,637,2018-07-20T23:53:39Z,2019-02-07T08:20:28Z,2019-02-07T08:20:28Z,CLOSED,False,3,2,1,https://github.com/tweenk,Fix unused variable warning.,1,"['duplicate', '1 stb_truetype', '2 warning']",https://github.com/nothings/stb/pull/637,https://github.com/nothings,2,https://github.com/nothings/stb/pull/637#issuecomment-461325725,"pairSetCount is only used in an assertion. When STBTT_assert is defined to
nothing, this triggers an unused variable warning.",Dupe of #571,True,{}
nothings/stb,https://github.com/nothings/stb,638,2018-07-27T07:48:46Z,2019-02-07T16:14:58Z,2019-02-07T16:14:58Z,CLOSED,False,12,0,1,https://github.com/jarnoh,stb_image_write optimization for faster uncompressed writes with zlib define override,2,['1 stb_image_write'],https://github.com/nothings/stb/pull/638,https://github.com/jarnoh,1,https://github.com/nothings/stb/pull/638,"I've been writing uncompressed PNG files, but I after timing my renders, I noticed that writing the actual files is still slow, even when I use zlib (with STBIW_ZLIB_COMPRESS) and set stbi_write_force_png_filter=0 and stbi_write_png_compression_level=0.  (note that for uncompressed data you want to have zlib 1.2.11, there is a huge performance benefit compared to 1.2.8)
I profiled my use case and most of the time was spent computing crc32 checksums.  stb_image_write's internal crc32 function is pretty oldschool, so I added new define STBIW_CRC32 which makes it possible to override it. zlib's crc32 function is 35x faster, and it is now simple to integrate it if you need the speed.
Another optimization is to skip loops when PNG is encoded with type=0 and just use memcpy.  Doesn't look like the current generation of compilers can optimize the switch case inside for loop, at least Xcode 9 does not do it.
With these changes, my use case (uncompressed PNG, zlib for compression and crc32) is now 4x faster, saving 4 megapixels image is down from 100ms per file to 25ms.","I've been writing uncompressed PNG files, but I after timing my renders, I noticed that writing the actual files is still slow, even when I use zlib (with STBIW_ZLIB_COMPRESS) and set stbi_write_force_png_filter=0 and stbi_write_png_compression_level=0.  (note that for uncompressed data you want to have zlib 1.2.11, there is a huge performance benefit compared to 1.2.8)
I profiled my use case and most of the time was spent computing crc32 checksums.  stb_image_write's internal crc32 function is pretty oldschool, so I added new define STBIW_CRC32 which makes it possible to override it. zlib's crc32 function is 35x faster, and it is now simple to integrate it if you need the speed.
Another optimization is to skip loops when PNG is encoded with type=0 and just use memcpy.  Doesn't look like the current generation of compilers can optimize the switch case inside for loop, at least Xcode 9 does not do it.
With these changes, my use case (uncompressed PNG, zlib for compression and crc32) is now 4x faster, saving 4 megapixels image is down from 100ms per file to 25ms.",True,{}
nothings/stb,https://github.com/nothings/stb,638,2018-07-27T07:48:46Z,2019-02-07T16:14:58Z,2019-02-07T16:14:58Z,CLOSED,False,12,0,1,https://github.com/jarnoh,stb_image_write optimization for faster uncompressed writes with zlib define override,2,['1 stb_image_write'],https://github.com/nothings/stb/pull/638,https://github.com/nothings,2,https://github.com/nothings/stb/pull/638#issuecomment-461492042,"I've been writing uncompressed PNG files, but I after timing my renders, I noticed that writing the actual files is still slow, even when I use zlib (with STBIW_ZLIB_COMPRESS) and set stbi_write_force_png_filter=0 and stbi_write_png_compression_level=0.  (note that for uncompressed data you want to have zlib 1.2.11, there is a huge performance benefit compared to 1.2.8)
I profiled my use case and most of the time was spent computing crc32 checksums.  stb_image_write's internal crc32 function is pretty oldschool, so I added new define STBIW_CRC32 which makes it possible to override it. zlib's crc32 function is 35x faster, and it is now simple to integrate it if you need the speed.
Another optimization is to skip loops when PNG is encoded with type=0 and just use memcpy.  Doesn't look like the current generation of compilers can optimize the switch case inside for loop, at least Xcode 9 does not do it.
With these changes, my use case (uncompressed PNG, zlib for compression and crc32) is now 4x faster, saving 4 megapixels image is down from 100ms per file to 25ms.","Merged in next release, and I optimized the non-type-0 loops.",True,{}
nothings/stb,https://github.com/nothings/stb,640,2018-08-08T18:43:49Z,2018-11-23T02:34:38Z,2018-11-23T02:34:38Z,CLOSED,False,2,1,1,https://github.com/cedricpinson,Fixes crash when writing hdr files,1,[],https://github.com/nothings/stb/pull/640,https://github.com/cedricpinson,1,https://github.com/nothings/stb/pull/640,,,True,{}
nothings/stb,https://github.com/nothings/stb,640,2018-08-08T18:43:49Z,2018-11-23T02:34:38Z,2018-11-23T02:34:38Z,CLOSED,False,2,1,1,https://github.com/cedricpinson,Fixes crash when writing hdr files,1,[],https://github.com/nothings/stb/pull/640,https://github.com/rygorous,2,https://github.com/nothings/stb/pull/640#issuecomment-441145601,,"We have multiple candidate fixes for that one and #644 won by virtue of being the first I looked at, so I'm closing this PR.",True,{}
nothings/stb,https://github.com/nothings/stb,644,2018-08-17T14:35:59Z,2019-02-07T16:16:25Z,2019-02-07T16:16:25Z,CLOSED,False,1,1,1,https://github.com/hb3p8,Fix typo in stb_image_write.h,1,"['duplicate', '1 stb_image_write']",https://github.com/nothings/stb/pull/644,https://github.com/hb3p8,1,https://github.com/nothings/stb/pull/644,"There was a redundant multiply by X in stbi_write_hdr_core while computing a scan-line address.
Probably introduced in b056850","There was a redundant multiply by X in stbi_write_hdr_core while computing a scan-line address.
Probably introduced in b056850",True,{'THUMBS_UP': ['https://github.com/PazerOP']}
nothings/stb,https://github.com/nothings/stb,644,2018-08-17T14:35:59Z,2019-02-07T16:16:25Z,2019-02-07T16:16:25Z,CLOSED,False,1,1,1,https://github.com/hb3p8,Fix typo in stb_image_write.h,1,"['duplicate', '1 stb_image_write']",https://github.com/nothings/stb/pull/644,https://github.com/rygorous,2,https://github.com/nothings/stb/pull/644#issuecomment-441145514,"There was a redundant multiply by X in stbi_write_hdr_core while computing a scan-line address.
Probably introduced in b056850",This should fix #567.,True,{}
nothings/stb,https://github.com/nothings/stb,646,2018-08-19T22:55:49Z,2018-11-23T02:31:40Z,2018-11-24T20:17:18Z,CLOSED,False,377,15,2,https://github.com/slomp,added Portable FloatMap (pfm) support:,3,[],https://github.com/nothings/stb/pull/646,https://github.com/slomp,1,https://github.com/nothings/stb/pull/646,"About PFM:

lossless float32-based format for HDR images
monochromatic (Y) or trichromatic (RGB) -- no alpha
negative values permitted

Specs: http://www.pauldebevec.com/Research/HDR/PFM/","About PFM:

lossless float32-based format for HDR images
monochromatic (Y) or trichromatic (RGB) -- no alpha
negative values permitted

Specs: http://www.pauldebevec.com/Research/HDR/PFM/",True,{}
nothings/stb,https://github.com/nothings/stb,646,2018-08-19T22:55:49Z,2018-11-23T02:31:40Z,2018-11-24T20:17:18Z,CLOSED,False,377,15,2,https://github.com/slomp,added Portable FloatMap (pfm) support:,3,[],https://github.com/nothings/stb/pull/646,https://github.com/rygorous,2,https://github.com/nothings/stb/pull/646#issuecomment-441145363,"About PFM:

lossless float32-based format for HDR images
monochromatic (Y) or trichromatic (RGB) -- no alpha
negative values permitted

Specs: http://www.pauldebevec.com/Research/HDR/PFM/","The effort is appreciated, but I wish you'd asked first before going through all the trouble of integrating this into stb_image, because we do not currently accept patches for new image formats.
The problem is that every new format we supports adds an ongoing maintenance burden and is another potential vector for exploits. We already support too many formats, in the sense that several of the formats we do support have more bugs reported via fuzz testing than they have active users. :)
There are libraries that aim to support every image format under the sun, but stb_image isn't one of those.",True,{}
nothings/stb,https://github.com/nothings/stb,646,2018-08-19T22:55:49Z,2018-11-23T02:31:40Z,2018-11-24T20:17:18Z,CLOSED,False,377,15,2,https://github.com/slomp,added Portable FloatMap (pfm) support:,3,[],https://github.com/nothings/stb/pull/646,https://github.com/slomp,3,https://github.com/nothings/stb/pull/646#issuecomment-441393003,"About PFM:

lossless float32-based format for HDR images
monochromatic (Y) or trichromatic (RGB) -- no alpha
negative values permitted

Specs: http://www.pauldebevec.com/Research/HDR/PFM/","No worries, and thanks for the feedback. I'll just keep it in my fork, since it is handy for me.
I often find myself in need of a lossless float image format when working on research projects or when debugging intermediate image/vision/dnn steps, but I understand that such tasks might be tangential to what stb-image aims for.",True,{}
nothings/stb,https://github.com/nothings/stb,650,2018-08-26T02:09:21Z,2018-08-26T02:56:39Z,2018-08-26T16:23:40Z,CLOSED,False,18929,1,3,https://github.com/mean-ui-thread,stb_gl - OpenGL/OpenGLES extension wrangler.,1,[],https://github.com/nothings/stb/pull/650,https://github.com/mean-ui-thread,1,https://github.com/nothings/stb/pull/650,,,True,{}
nothings/stb,https://github.com/nothings/stb,650,2018-08-26T02:09:21Z,2018-08-26T02:56:39Z,2018-08-26T16:23:40Z,CLOSED,False,18929,1,3,https://github.com/mean-ui-thread,stb_gl - OpenGL/OpenGLES extension wrangler.,1,[],https://github.com/nothings/stb/pull/650,https://github.com/nothings,2,https://github.com/nothings/stb/pull/650#issuecomment-416010179,,"I don't want to have to maintain this library. You're welcome to submit it to single_file_libs, though. I recommend changing the name, though, since it's not an stb library (and I in fact have my own stb_gl.h).",True,{}
nothings/stb,https://github.com/nothings/stb,650,2018-08-26T02:09:21Z,2018-08-26T02:56:39Z,2018-08-26T16:23:40Z,CLOSED,False,18929,1,3,https://github.com/mean-ui-thread,stb_gl - OpenGL/OpenGLES extension wrangler.,1,[],https://github.com/nothings/stb/pull/650,https://github.com/mean-ui-thread,3,https://github.com/nothings/stb/pull/650#issuecomment-416050687,,:-(,True,{}
nothings/stb,https://github.com/nothings/stb,653,2018-09-04T12:58:00Z,,2019-05-30T09:39:34Z,OPEN,False,967,959,1,https://github.com/BareRose,Convert stb_vorbis to header-only library,1,['1 stb_vorbis'],https://github.com/nothings/stb/pull/653,https://github.com/BareRose,1,https://github.com/nothings/stb/pull/653,"I wanted to use stb_vorbis as it's the only public domain vorbis decoder I'm aware of, but it was in this weird sort-of-a-source-file-but-also-not state that made it unusable for me, meaning it would need to be converted to a proper header-only library. Since there was already demand for this in #25 I decided to bite the bullet and do the conversion myself based on the suggestions in that issue.
All I did was prefix everything with stbv_ or STBV_ respectively and add a STB_VORBIS_STATIC option similar to the one in stb_image. Still took me like two hours because of the sheer amount of code to go through. I also made a small fix regarding alloca getting redefined and breaking compilation on my MinGW.
On some other stb libraries the prefixes used for internals have two underscores, if this is preferred all you'll need to do is case-sensitively search-replace stbv_ to stbv__ and STBV_ to STBV__. Personally I think a single underscore is sufficient here, but the decision is ultimately up to the maintainer(s).
Here's some additional things I noticed while going through the code for my prefixing:


The check_endianness() macro (now stbv_check_endianness()) does nothing. I suspect this is a leftover from an earlier implementation needing to do endian-specific stuff. If it really isn't needed anymore, it should be removed.


Using __forceinline seems more of a hassle than it's worth (see the issue with MinGW) and modern compilers are smart enough to inline stuff themselves anyway. Could be replaced either with inline if a hint to the compiler is desired, or removed entirely, thus letting the compiler make its own inlining decisions.


The VORBIS_packet_comment enum (now STBV_VORBIS_packet_comment) appears to be unused, possibly another leftover from something long-removed.


In the new header-only form the various #ifndef checks in the header section are likely not going to do anything. I've left them in because maybe there's a use to them that I'm not seeing, but if there isn't they probably should be removed and replaced with notices describing which functions are disabled by which defines.


I've added myself to the contributors list as ""BareRose"", hope that's okay.","I wanted to use stb_vorbis as it's the only public domain vorbis decoder I'm aware of, but it was in this weird sort-of-a-source-file-but-also-not state that made it unusable for me, meaning it would need to be converted to a proper header-only library. Since there was already demand for this in #25 I decided to bite the bullet and do the conversion myself based on the suggestions in that issue.
All I did was prefix everything with stbv_ or STBV_ respectively and add a STB_VORBIS_STATIC option similar to the one in stb_image. Still took me like two hours because of the sheer amount of code to go through. I also made a small fix regarding alloca getting redefined and breaking compilation on my MinGW.
On some other stb libraries the prefixes used for internals have two underscores, if this is preferred all you'll need to do is case-sensitively search-replace stbv_ to stbv__ and STBV_ to STBV__. Personally I think a single underscore is sufficient here, but the decision is ultimately up to the maintainer(s).
Here's some additional things I noticed while going through the code for my prefixing:


The check_endianness() macro (now stbv_check_endianness()) does nothing. I suspect this is a leftover from an earlier implementation needing to do endian-specific stuff. If it really isn't needed anymore, it should be removed.


Using __forceinline seems more of a hassle than it's worth (see the issue with MinGW) and modern compilers are smart enough to inline stuff themselves anyway. Could be replaced either with inline if a hint to the compiler is desired, or removed entirely, thus letting the compiler make its own inlining decisions.


The VORBIS_packet_comment enum (now STBV_VORBIS_packet_comment) appears to be unused, possibly another leftover from something long-removed.


In the new header-only form the various #ifndef checks in the header section are likely not going to do anything. I've left them in because maybe there's a use to them that I'm not seeing, but if there isn't they probably should be removed and replaced with notices describing which functions are disabled by which defines.


I've added myself to the contributors list as ""BareRose"", hope that's okay.",True,{'THUMBS_UP': ['https://github.com/criptych']}
nothings/stb,https://github.com/nothings/stb,653,2018-09-04T12:58:00Z,,2019-05-30T09:39:34Z,OPEN,False,967,959,1,https://github.com/BareRose,Convert stb_vorbis to header-only library,1,['1 stb_vorbis'],https://github.com/nothings/stb/pull/653,https://github.com/BareRose,2,https://github.com/nothings/stb/pull/653#issuecomment-418361840,"I wanted to use stb_vorbis as it's the only public domain vorbis decoder I'm aware of, but it was in this weird sort-of-a-source-file-but-also-not state that made it unusable for me, meaning it would need to be converted to a proper header-only library. Since there was already demand for this in #25 I decided to bite the bullet and do the conversion myself based on the suggestions in that issue.
All I did was prefix everything with stbv_ or STBV_ respectively and add a STB_VORBIS_STATIC option similar to the one in stb_image. Still took me like two hours because of the sheer amount of code to go through. I also made a small fix regarding alloca getting redefined and breaking compilation on my MinGW.
On some other stb libraries the prefixes used for internals have two underscores, if this is preferred all you'll need to do is case-sensitively search-replace stbv_ to stbv__ and STBV_ to STBV__. Personally I think a single underscore is sufficient here, but the decision is ultimately up to the maintainer(s).
Here's some additional things I noticed while going through the code for my prefixing:


The check_endianness() macro (now stbv_check_endianness()) does nothing. I suspect this is a leftover from an earlier implementation needing to do endian-specific stuff. If it really isn't needed anymore, it should be removed.


Using __forceinline seems more of a hassle than it's worth (see the issue with MinGW) and modern compilers are smart enough to inline stuff themselves anyway. Could be replaced either with inline if a hint to the compiler is desired, or removed entirely, thus letting the compiler make its own inlining decisions.


The VORBIS_packet_comment enum (now STBV_VORBIS_packet_comment) appears to be unused, possibly another leftover from something long-removed.


In the new header-only form the various #ifndef checks in the header section are likely not going to do anything. I've left them in because maybe there's a use to them that I'm not seeing, but if there isn't they probably should be removed and replaced with notices describing which functions are disabled by which defines.


I've added myself to the contributors list as ""BareRose"", hope that's okay.","Looks like travis is getting thrown off by the renaming of the file. Not much I can do about this, you'll need to update your travis configuration to use the new filename.",True,{}
nothings/stb,https://github.com/nothings/stb,653,2018-09-04T12:58:00Z,,2019-05-30T09:39:34Z,OPEN,False,967,959,1,https://github.com/BareRose,Convert stb_vorbis to header-only library,1,['1 stb_vorbis'],https://github.com/nothings/stb/pull/653,https://github.com/BareRose,3,https://github.com/nothings/stb/pull/653#issuecomment-427312346,"I wanted to use stb_vorbis as it's the only public domain vorbis decoder I'm aware of, but it was in this weird sort-of-a-source-file-but-also-not state that made it unusable for me, meaning it would need to be converted to a proper header-only library. Since there was already demand for this in #25 I decided to bite the bullet and do the conversion myself based on the suggestions in that issue.
All I did was prefix everything with stbv_ or STBV_ respectively and add a STB_VORBIS_STATIC option similar to the one in stb_image. Still took me like two hours because of the sheer amount of code to go through. I also made a small fix regarding alloca getting redefined and breaking compilation on my MinGW.
On some other stb libraries the prefixes used for internals have two underscores, if this is preferred all you'll need to do is case-sensitively search-replace stbv_ to stbv__ and STBV_ to STBV__. Personally I think a single underscore is sufficient here, but the decision is ultimately up to the maintainer(s).
Here's some additional things I noticed while going through the code for my prefixing:


The check_endianness() macro (now stbv_check_endianness()) does nothing. I suspect this is a leftover from an earlier implementation needing to do endian-specific stuff. If it really isn't needed anymore, it should be removed.


Using __forceinline seems more of a hassle than it's worth (see the issue with MinGW) and modern compilers are smart enough to inline stuff themselves anyway. Could be replaced either with inline if a hint to the compiler is desired, or removed entirely, thus letting the compiler make its own inlining decisions.


The VORBIS_packet_comment enum (now STBV_VORBIS_packet_comment) appears to be unused, possibly another leftover from something long-removed.


In the new header-only form the various #ifndef checks in the header section are likely not going to do anything. I've left them in because maybe there's a use to them that I'm not seeing, but if there isn't they probably should be removed and replaced with notices describing which functions are disabled by which defines.


I've added myself to the contributors list as ""BareRose"", hope that's okay.",@nothings Am I going to get any response here? Is there something wrong with my changes?,True,{}
nothings/stb,https://github.com/nothings/stb,653,2018-09-04T12:58:00Z,,2019-05-30T09:39:34Z,OPEN,False,967,959,1,https://github.com/BareRose,Convert stb_vorbis to header-only library,1,['1 stb_vorbis'],https://github.com/nothings/stb/pull/653,https://github.com/rygorous,4,https://github.com/nothings/stb/pull/653#issuecomment-427316862,"I wanted to use stb_vorbis as it's the only public domain vorbis decoder I'm aware of, but it was in this weird sort-of-a-source-file-but-also-not state that made it unusable for me, meaning it would need to be converted to a proper header-only library. Since there was already demand for this in #25 I decided to bite the bullet and do the conversion myself based on the suggestions in that issue.
All I did was prefix everything with stbv_ or STBV_ respectively and add a STB_VORBIS_STATIC option similar to the one in stb_image. Still took me like two hours because of the sheer amount of code to go through. I also made a small fix regarding alloca getting redefined and breaking compilation on my MinGW.
On some other stb libraries the prefixes used for internals have two underscores, if this is preferred all you'll need to do is case-sensitively search-replace stbv_ to stbv__ and STBV_ to STBV__. Personally I think a single underscore is sufficient here, but the decision is ultimately up to the maintainer(s).
Here's some additional things I noticed while going through the code for my prefixing:


The check_endianness() macro (now stbv_check_endianness()) does nothing. I suspect this is a leftover from an earlier implementation needing to do endian-specific stuff. If it really isn't needed anymore, it should be removed.


Using __forceinline seems more of a hassle than it's worth (see the issue with MinGW) and modern compilers are smart enough to inline stuff themselves anyway. Could be replaced either with inline if a hint to the compiler is desired, or removed entirely, thus letting the compiler make its own inlining decisions.


The VORBIS_packet_comment enum (now STBV_VORBIS_packet_comment) appears to be unused, possibly another leftover from something long-removed.


In the new header-only form the various #ifndef checks in the header section are likely not going to do anything. I've left them in because maybe there's a use to them that I'm not seeing, but if there isn't they probably should be removed and replaced with notices describing which functions are disabled by which defines.


I've added myself to the contributors list as ""BareRose"", hope that's okay.","Sean or me will review it when we next merge PRs and prepare a new release,
but barring major outstanding problems we do that maybe once or twice a
year, so it might be a while longer until we get around to it.
…
On Fri, Oct 5, 2018, 03:05 BareRose ***@***.***> wrote:
 @nothings <https://github.com/nothings> Am I going to get any response
 here? Is there something wrong with my changes?

 —
 You are receiving this because you are subscribed to this thread.
 Reply to this email directly, view it on GitHub
 <#653 (comment)>, or mute
 the thread
 <https://github.com/notifications/unsubscribe-auth/ABBw-B3qNTUDyeXDh1lMLKhEzCJuyr2wks5uhy8GgaJpZM4WY7rv>
 .",True,{}
nothings/stb,https://github.com/nothings/stb,653,2018-09-04T12:58:00Z,,2019-05-30T09:39:34Z,OPEN,False,967,959,1,https://github.com/BareRose,Convert stb_vorbis to header-only library,1,['1 stb_vorbis'],https://github.com/nothings/stb/pull/653,https://github.com/nothings,5,https://github.com/nothings/stb/pull/653#issuecomment-461496816,"I wanted to use stb_vorbis as it's the only public domain vorbis decoder I'm aware of, but it was in this weird sort-of-a-source-file-but-also-not state that made it unusable for me, meaning it would need to be converted to a proper header-only library. Since there was already demand for this in #25 I decided to bite the bullet and do the conversion myself based on the suggestions in that issue.
All I did was prefix everything with stbv_ or STBV_ respectively and add a STB_VORBIS_STATIC option similar to the one in stb_image. Still took me like two hours because of the sheer amount of code to go through. I also made a small fix regarding alloca getting redefined and breaking compilation on my MinGW.
On some other stb libraries the prefixes used for internals have two underscores, if this is preferred all you'll need to do is case-sensitively search-replace stbv_ to stbv__ and STBV_ to STBV__. Personally I think a single underscore is sufficient here, but the decision is ultimately up to the maintainer(s).
Here's some additional things I noticed while going through the code for my prefixing:


The check_endianness() macro (now stbv_check_endianness()) does nothing. I suspect this is a leftover from an earlier implementation needing to do endian-specific stuff. If it really isn't needed anymore, it should be removed.


Using __forceinline seems more of a hassle than it's worth (see the issue with MinGW) and modern compilers are smart enough to inline stuff themselves anyway. Could be replaced either with inline if a hint to the compiler is desired, or removed entirely, thus letting the compiler make its own inlining decisions.


The VORBIS_packet_comment enum (now STBV_VORBIS_packet_comment) appears to be unused, possibly another leftover from something long-removed.


In the new header-only form the various #ifndef checks in the header section are likely not going to do anything. I've left them in because maybe there's a use to them that I'm not seeing, but if there isn't they probably should be removed and replaced with notices describing which functions are disabled by which defines.


I've added myself to the contributors list as ""BareRose"", hope that's okay.","This is still a valuable submission, it's just a lot of work to review so I've continued putting it off, sorry.",True,{}
nothings/stb,https://github.com/nothings/stb,653,2018-09-04T12:58:00Z,,2019-05-30T09:39:34Z,OPEN,False,967,959,1,https://github.com/BareRose,Convert stb_vorbis to header-only library,1,['1 stb_vorbis'],https://github.com/nothings/stb/pull/653,https://github.com/kerskuchen,6,https://github.com/nothings/stb/pull/653#issuecomment-497270381,"I wanted to use stb_vorbis as it's the only public domain vorbis decoder I'm aware of, but it was in this weird sort-of-a-source-file-but-also-not state that made it unusable for me, meaning it would need to be converted to a proper header-only library. Since there was already demand for this in #25 I decided to bite the bullet and do the conversion myself based on the suggestions in that issue.
All I did was prefix everything with stbv_ or STBV_ respectively and add a STB_VORBIS_STATIC option similar to the one in stb_image. Still took me like two hours because of the sheer amount of code to go through. I also made a small fix regarding alloca getting redefined and breaking compilation on my MinGW.
On some other stb libraries the prefixes used for internals have two underscores, if this is preferred all you'll need to do is case-sensitively search-replace stbv_ to stbv__ and STBV_ to STBV__. Personally I think a single underscore is sufficient here, but the decision is ultimately up to the maintainer(s).
Here's some additional things I noticed while going through the code for my prefixing:


The check_endianness() macro (now stbv_check_endianness()) does nothing. I suspect this is a leftover from an earlier implementation needing to do endian-specific stuff. If it really isn't needed anymore, it should be removed.


Using __forceinline seems more of a hassle than it's worth (see the issue with MinGW) and modern compilers are smart enough to inline stuff themselves anyway. Could be replaced either with inline if a hint to the compiler is desired, or removed entirely, thus letting the compiler make its own inlining decisions.


The VORBIS_packet_comment enum (now STBV_VORBIS_packet_comment) appears to be unused, possibly another leftover from something long-removed.


In the new header-only form the various #ifndef checks in the header section are likely not going to do anything. I've left them in because maybe there's a use to them that I'm not seeing, but if there isn't they probably should be removed and replaced with notices describing which functions are disabled by which defines.


I've added myself to the contributors list as ""BareRose"", hope that's okay.","Using this in a unity-build with STB_VORBIS_IMPLEMENTATION and STB_VORBIS_NO_CRT defined will hammer malloc, free and realloc for everything under the #include ""stb_vorbis.h"" line. I would suggest defining STB_VORBIS_MALLOC and friends and using them instead of raw malloc etc. This would also be a more recognizable API for users of stb_image.h. :)",True,{'HEART': ['https://github.com/zao']}
nothings/stb,https://github.com/nothings/stb,654,2018-09-10T08:50:38Z,,2019-08-11T11:21:01Z,OPEN,False,5,4,1,https://github.com/neoedmund,More robust. eg. loading wqy-microhei.ttc,1,"['1 stb_truetype', 'needs significant new work']",https://github.com/nothings/stb/pull/654,https://github.com/neoedmund,1,https://github.com/nothings/stb/pull/654,,,True,{}
nothings/stb,https://github.com/nothings/stb,654,2018-09-10T08:50:38Z,,2019-08-11T11:21:01Z,OPEN,False,5,4,1,https://github.com/neoedmund,More robust. eg. loading wqy-microhei.ttc,1,"['1 stb_truetype', 'needs significant new work']",https://github.com/nothings/stb/pull/654,https://github.com/nothings,2,https://github.com/nothings/stb/pull/654#issuecomment-420139716,,Does this fix a bug?,True,{}
nothings/stb,https://github.com/nothings/stb,654,2018-09-10T08:50:38Z,,2019-08-11T11:21:01Z,OPEN,False,5,4,1,https://github.com/neoedmund,More robust. eg. loading wqy-microhei.ttc,1,"['1 stb_truetype', 'needs significant new work']",https://github.com/nothings/stb/pull/654,https://github.com/nothings,3,https://github.com/nothings/stb/pull/654#issuecomment-420139816,,"Oh, I see from the title the implication is it does. Can you be specific about what character at what size fails?",True,{}
nothings/stb,https://github.com/nothings/stb,654,2018-09-10T08:50:38Z,,2019-08-11T11:21:01Z,OPEN,False,5,4,1,https://github.com/neoedmund,More robust. eg. loading wqy-microhei.ttc,1,"['1 stb_truetype', 'needs significant new work']",https://github.com/nothings/stb/pull/654,https://github.com/neoedmund,4,https://github.com/nothings/stb/pull/654#issuecomment-420153090,,"The font file  ""wqy-microhei.ttc"" is from
https://packages.ubuntu.com/xenial/all/fonts-wqy-microhei/filelist ,  it contains thousands of Unicode CJK characters and the font should be widely used.


I tested with imgui which uses stb_truetype.h , it seems try to load all characters to generate a large texture for rendering in opengl.


I don't know how this code(stb_truetype.h) works, and what is it about. But after change the code, It seems worked good. (the font size is 16.0f)
The values(z->ey, scan_y_top) be skipped are:


-13.187839 , -11.000000
-11.855061 , -11.000000
-11.228655 , -11.000000
-11.088713 , -11.000000
-12.321533 , -11.000000
-12.321533 , -11.000000
-12.321533 , -11.000000
-12.321533 , -11.000000
-11.002083 , -11.000000
-11.002083 , -11.000000
-12.001666 , -12.000000
-12.208246 , -12.000000
-12.468139 , -11.000000
-12.394835 , -11.000000
-11.588505 , -11.000000
-11.588505 , -11.000000
-16.912952 , -12.000000
-16.912952 , -12.000000
-14.733861 , -12.000000
-14.733861 , -12.000000
-13.134527 , -12.000000
-13.134527 , -12.000000
-12.048313 , -12.000000
-12.194919 , -12.000000
-12.408163 , -12.000000
-12.041650 , -12.000000
-11.301957 , -11.000000


hope this helps.",True,{}
nothings/stb,https://github.com/nothings/stb,654,2018-09-10T08:50:38Z,,2019-08-11T11:21:01Z,OPEN,False,5,4,1,https://github.com/neoedmund,More robust. eg. loading wqy-microhei.ttc,1,"['1 stb_truetype', 'needs significant new work']",https://github.com/nothings/stb/pull/654,https://github.com/nothings,5,https://github.com/nothings/stb/pull/654#issuecomment-461494601,,"This seems like it's hiding an actual bug, since it implies some edges are discarded without ever being processed. I'll need to look at the actual cases that are failing (I can figure out for myself from the above info, I think).",True,{}
nothings/stb,https://github.com/nothings/stb,661,2018-10-01T18:29:26Z,2018-11-03T10:14:41Z,2018-11-03T10:14:48Z,CLOSED,False,47,3,1,https://github.com/kmar,hash through match in stb_compress to achieve slightly better compresion,2,[],https://github.com/nothings/stb/pull/661,https://github.com/kmar,1,https://github.com/nothings/stb/pull/661,"results (improvement over old compressor):
3.3% silesia [but 20% slower compression]
4.3% calgary
5.4% enwik8 [but 39% slower compression]
13.5% stb.h
16.4% ProggyClean.ttf
so not stellar for big files but decent for small ones, probably related to block size and/or window size","results (improvement over old compressor):
3.3% silesia [but 20% slower compression]
4.3% calgary
5.4% enwik8 [but 39% slower compression]
13.5% stb.h
16.4% ProggyClean.ttf
so not stellar for big files but decent for small ones, probably related to block size and/or window size",True,{}
nothings/stb,https://github.com/nothings/stb,661,2018-10-01T18:29:26Z,2018-11-03T10:14:41Z,2018-11-03T10:14:48Z,CLOSED,False,47,3,1,https://github.com/kmar,hash through match in stb_compress to achieve slightly better compresion,2,[],https://github.com/nothings/stb/pull/661,https://github.com/nothings,2,https://github.com/nothings/stb/pull/661#issuecomment-426089544,"results (improvement over old compressor):
3.3% silesia [but 20% slower compression]
4.3% calgary
5.4% enwik8 [but 39% slower compression]
13.5% stb.h
16.4% ProggyClean.ttf
so not stellar for big files but decent for small ones, probably related to block size and/or window size",I think I intentionally didn't do this for speed reasons? I guess could make it a controllable switch.,True,{}
nothings/stb,https://github.com/nothings/stb,661,2018-10-01T18:29:26Z,2018-11-03T10:14:41Z,2018-11-03T10:14:48Z,CLOSED,False,47,3,1,https://github.com/kmar,hash through match in stb_compress to achieve slightly better compresion,2,[],https://github.com/nothings/stb/pull/661,https://github.com/kmar,3,https://github.com/nothings/stb/pull/661#issuecomment-426778358,"results (improvement over old compressor):
3.3% silesia [but 20% slower compression]
4.3% calgary
5.4% enwik8 [but 39% slower compression]
13.5% stb.h
16.4% ProggyClean.ttf
so not stellar for big files but decent for small ones, probably related to block size and/or window size","Yes, performance reasons was my first guess. I added stb_compress_level() for finer control, defaults to fast compression.",True,{}
nothings/stb,https://github.com/nothings/stb,662,2018-10-05T22:21:49Z,2019-02-07T16:32:16Z,2019-02-07T16:32:16Z,CLOSED,False,5,0,1,https://github.com/vasumahesh1,fix warnings for unreferenced formal parameter in stb_image,1,"['duplicate', '1 stb_image']",https://github.com/nothings/stb/pull/662,https://github.com/vasumahesh1,1,https://github.com/nothings/stb/pull/662,"Hi,
This is a tiny change to silence the unused parameter warning. Apparently PR #539 already tried this but the PR was dead. I followed up with the message left there and fixed it.
Warnings generated that were fixed:
stb_image.h(6339): error C2220: warning treated as error - no 'object' file generated
stb_image.h(6339): warning C4100: 'req_comp': unreferenced formal parameter
stb_image.h(6563): warning C4100: 'ri': unreferenced formal parameter

Let me know if I need to change some things.
Thanks!","Hi,
This is a tiny change to silence the unused parameter warning. Apparently PR #539 already tried this but the PR was dead. I followed up with the message left there and fixed it.
Warnings generated that were fixed:
stb_image.h(6339): error C2220: warning treated as error - no 'object' file generated
stb_image.h(6339): warning C4100: 'req_comp': unreferenced formal parameter
stb_image.h(6563): warning C4100: 'ri': unreferenced formal parameter

Let me know if I need to change some things.
Thanks!",True,{}
nothings/stb,https://github.com/nothings/stb,662,2018-10-05T22:21:49Z,2019-02-07T16:32:16Z,2019-02-07T16:32:16Z,CLOSED,False,5,0,1,https://github.com/vasumahesh1,fix warnings for unreferenced formal parameter in stb_image,1,"['duplicate', '1 stb_image']",https://github.com/nothings/stb/pull/662,https://github.com/PedDavid,2,https://github.com/nothings/stb/pull/662#issuecomment-427964476,"Hi,
This is a tiny change to silence the unused parameter warning. Apparently PR #539 already tried this but the PR was dead. I followed up with the message left there and fixed it.
Warnings generated that were fixed:
stb_image.h(6339): error C2220: warning treated as error - no 'object' file generated
stb_image.h(6339): warning C4100: 'req_comp': unreferenced formal parameter
stb_image.h(6563): warning C4100: 'ri': unreferenced formal parameter

Let me know if I need to change some things.
Thanks!",Why not comment the parameter name?,True,{}
nothings/stb,https://github.com/nothings/stb,662,2018-10-05T22:21:49Z,2019-02-07T16:32:16Z,2019-02-07T16:32:16Z,CLOSED,False,5,0,1,https://github.com/vasumahesh1,fix warnings for unreferenced formal parameter in stb_image,1,"['duplicate', '1 stb_image']",https://github.com/nothings/stb/pull/662,https://github.com/nothings,3,https://github.com/nothings/stb/pull/662#issuecomment-427968186,"Hi,
This is a tiny change to silence the unused parameter warning. Apparently PR #539 already tried this but the PR was dead. I followed up with the message left there and fixed it.
Warnings generated that were fixed:
stb_image.h(6339): error C2220: warning treated as error - no 'object' file generated
stb_image.h(6339): warning C4100: 'req_comp': unreferenced formal parameter
stb_image.h(6563): warning C4100: 'ri': unreferenced formal parameter

Let me know if I need to change some things.
Thanks!","That's C++ only, not C.",True,{}
nothings/stb,https://github.com/nothings/stb,662,2018-10-05T22:21:49Z,2019-02-07T16:32:16Z,2019-02-07T16:32:16Z,CLOSED,False,5,0,1,https://github.com/vasumahesh1,fix warnings for unreferenced formal parameter in stb_image,1,"['duplicate', '1 stb_image']",https://github.com/nothings/stb/pull/662,https://github.com/LysanderGG,4,https://github.com/nothings/stb/pull/662#issuecomment-428028848,"Hi,
This is a tiny change to silence the unused parameter warning. Apparently PR #539 already tried this but the PR was dead. I followed up with the message left there and fixed it.
Warnings generated that were fixed:
stb_image.h(6339): error C2220: warning treated as error - no 'object' file generated
stb_image.h(6339): warning C4100: 'req_comp': unreferenced formal parameter
stb_image.h(6563): warning C4100: 'ri': unreferenced formal parameter

Let me know if I need to change some things.
Thanks!",You should probably use the already defined macro STBI_NOTUSED.,True,{'THUMBS_UP': ['https://github.com/PedDavid']}
nothings/stb,https://github.com/nothings/stb,662,2018-10-05T22:21:49Z,2019-02-07T16:32:16Z,2019-02-07T16:32:16Z,CLOSED,False,5,0,1,https://github.com/vasumahesh1,fix warnings for unreferenced formal parameter in stb_image,1,"['duplicate', '1 stb_image']",https://github.com/nothings/stb/pull/662,https://github.com/vasumahesh1,5,https://github.com/nothings/stb/pull/662#issuecomment-428323146,"Hi,
This is a tiny change to silence the unused parameter warning. Apparently PR #539 already tried this but the PR was dead. I followed up with the message left there and fixed it.
Warnings generated that were fixed:
stb_image.h(6339): error C2220: warning treated as error - no 'object' file generated
stb_image.h(6339): warning C4100: 'req_comp': unreferenced formal parameter
stb_image.h(6563): warning C4100: 'ri': unreferenced formal parameter

Let me know if I need to change some things.
Thanks!","Thanks, I'll have a look at that macro! Will update the PR soon!",True,{}
nothings/stb,https://github.com/nothings/stb,662,2018-10-05T22:21:49Z,2019-02-07T16:32:16Z,2019-02-07T16:32:16Z,CLOSED,False,5,0,1,https://github.com/vasumahesh1,fix warnings for unreferenced formal parameter in stb_image,1,"['duplicate', '1 stb_image']",https://github.com/nothings/stb/pull/662,https://github.com/vasumahesh1,6,https://github.com/nothings/stb/pull/662#issuecomment-428335961,"Hi,
This is a tiny change to silence the unused parameter warning. Apparently PR #539 already tried this but the PR was dead. I followed up with the message left there and fixed it.
Warnings generated that were fixed:
stb_image.h(6339): error C2220: warning treated as error - no 'object' file generated
stb_image.h(6339): warning C4100: 'req_comp': unreferenced formal parameter
stb_image.h(6563): warning C4100: 'ri': unreferenced formal parameter

Let me know if I need to change some things.
Thanks!",Updated the PR.,True,{}
nothings/stb,https://github.com/nothings/stb,662,2018-10-05T22:21:49Z,2019-02-07T16:32:16Z,2019-02-07T16:32:16Z,CLOSED,False,5,0,1,https://github.com/vasumahesh1,fix warnings for unreferenced formal parameter in stb_image,1,"['duplicate', '1 stb_image']",https://github.com/nothings/stb/pull/662,https://github.com/nothings,7,https://github.com/nothings/stb/pull/662#issuecomment-461324729,"Hi,
This is a tiny change to silence the unused parameter warning. Apparently PR #539 already tried this but the PR was dead. I followed up with the message left there and fixed it.
Warnings generated that were fixed:
stb_image.h(6339): error C2220: warning treated as error - no 'object' file generated
stb_image.h(6339): warning C4100: 'req_comp': unreferenced formal parameter
stb_image.h(6563): warning C4100: 'ri': unreferenced formal parameter

Let me know if I need to change some things.
Thanks!","BTW, for future reference, old PRs that are still open aren't dead, I'm just slow.",True,{}
nothings/stb,https://github.com/nothings/stb,662,2018-10-05T22:21:49Z,2019-02-07T16:32:16Z,2019-02-07T16:32:16Z,CLOSED,False,5,0,1,https://github.com/vasumahesh1,fix warnings for unreferenced formal parameter in stb_image,1,"['duplicate', '1 stb_image']",https://github.com/nothings/stb/pull/662,https://github.com/nothings,8,https://github.com/nothings/stb/pull/662#issuecomment-461500151,"Hi,
This is a tiny change to silence the unused parameter warning. Apparently PR #539 already tried this but the PR was dead. I followed up with the message left there and fixed it.
Warnings generated that were fixed:
stb_image.h(6339): error C2220: warning treated as error - no 'object' file generated
stb_image.h(6339): warning C4100: 'req_comp': unreferenced formal parameter
stb_image.h(6563): warning C4100: 'ri': unreferenced formal parameter

Let me know if I need to change some things.
Thanks!",this ended up being redundant to another PR,True,{}
nothings/stb,https://github.com/nothings/stb,663,2018-10-12T11:29:27Z,2019-02-07T16:35:20Z,2019-02-07T16:35:21Z,CLOSED,False,15,11,1,https://github.com/Clownacy,Fixes for stb_leakcheck.h,7,['1 stb library w/no tag'],https://github.com/nothings/stb/pull/663,https://github.com/Clownacy,1,https://github.com/nothings/stb/pull/663,"I ran into a couple of problems while trying to use this with my program:
My compiler (64-bit MinGW-w64 GCC 8.2.0) complained about not recognising %lld format specifiers.
The compiler also warned about non-guarding ifs. I ignored it at first, but then I noticed my program crashed when it ran stb_leakcheck_dumpmem. Making the ifs guard fixed that.
After that, the lib worked until I changed how it was included: instead of tacking a debug-only #include at the start of every file, I switched to using GCC's -include option to force-include it in every file. But doing that gave me errors about size_t not being defined. And after fixing that, I instead got errors about the #defines messing with stdlib.h. So to fix those I made the declaration-only part of the header include stdlib.h.
EDIT: One last ""fix"" was needed to make this work with my program, but I'm not sure if it's worth adding. stb_leakcheck.h was included in C++ code, but the implementation was in a C source file. To get them to play along, I had to wrap the header's contents in an extern ""C"".","I ran into a couple of problems while trying to use this with my program:
My compiler (64-bit MinGW-w64 GCC 8.2.0) complained about not recognising %lld format specifiers.
The compiler also warned about non-guarding ifs. I ignored it at first, but then I noticed my program crashed when it ran stb_leakcheck_dumpmem. Making the ifs guard fixed that.
After that, the lib worked until I changed how it was included: instead of tacking a debug-only #include at the start of every file, I switched to using GCC's -include option to force-include it in every file. But doing that gave me errors about size_t not being defined. And after fixing that, I instead got errors about the #defines messing with stdlib.h. So to fix those I made the declaration-only part of the header include stdlib.h.
EDIT: One last ""fix"" was needed to make this work with my program, but I'm not sure if it's worth adding. stb_leakcheck.h was included in C++ code, but the implementation was in a C source file. To get them to play along, I had to wrap the header's contents in an extern ""C"".",True,{}
nothings/stb,https://github.com/nothings/stb,663,2018-10-12T11:29:27Z,2019-02-07T16:35:20Z,2019-02-07T16:35:21Z,CLOSED,False,15,11,1,https://github.com/Clownacy,Fixes for stb_leakcheck.h,7,['1 stb library w/no tag'],https://github.com/nothings/stb/pull/663,https://github.com/Clownacy,2,https://github.com/nothings/stb/pull/663#issuecomment-435227125,"I ran into a couple of problems while trying to use this with my program:
My compiler (64-bit MinGW-w64 GCC 8.2.0) complained about not recognising %lld format specifiers.
The compiler also warned about non-guarding ifs. I ignored it at first, but then I noticed my program crashed when it ran stb_leakcheck_dumpmem. Making the ifs guard fixed that.
After that, the lib worked until I changed how it was included: instead of tacking a debug-only #include at the start of every file, I switched to using GCC's -include option to force-include it in every file. But doing that gave me errors about size_t not being defined. And after fixing that, I instead got errors about the #defines messing with stdlib.h. So to fix those I made the declaration-only part of the header include stdlib.h.
EDIT: One last ""fix"" was needed to make this work with my program, but I'm not sure if it's worth adding. stb_leakcheck.h was included in C++ code, but the implementation was in a C source file. To get them to play along, I had to wrap the header's contents in an extern ""C"".",I think I've figured out how to use %zd on MinGW-w64. Not sure if it's backwards-compatible with the original MinGW.,True,{}
nothings/stb,https://github.com/nothings/stb,663,2018-10-12T11:29:27Z,2019-02-07T16:35:20Z,2019-02-07T16:35:21Z,CLOSED,False,15,11,1,https://github.com/Clownacy,Fixes for stb_leakcheck.h,7,['1 stb library w/no tag'],https://github.com/nothings/stb/pull/663,https://github.com/nothings,3,https://github.com/nothings/stb/pull/663#issuecomment-461501399,"I ran into a couple of problems while trying to use this with my program:
My compiler (64-bit MinGW-w64 GCC 8.2.0) complained about not recognising %lld format specifiers.
The compiler also warned about non-guarding ifs. I ignored it at first, but then I noticed my program crashed when it ran stb_leakcheck_dumpmem. Making the ifs guard fixed that.
After that, the lib worked until I changed how it was included: instead of tacking a debug-only #include at the start of every file, I switched to using GCC's -include option to force-include it in every file. But doing that gave me errors about size_t not being defined. And after fixing that, I instead got errors about the #defines messing with stdlib.h. So to fix those I made the declaration-only part of the header include stdlib.h.
EDIT: One last ""fix"" was needed to make this work with my program, but I'm not sure if it's worth adding. stb_leakcheck.h was included in C++ code, but the implementation was in a C source file. To get them to play along, I had to wrap the header's contents in an extern ""C"".",merged for next release,True,{}
nothings/stb,https://github.com/nothings/stb,665,2018-10-12T18:06:37Z,2018-11-23T21:17:45Z,2018-11-23T21:17:45Z,CLOSED,False,13,1,1,https://github.com/cheako,Image pnm decimal overrun,2,['1 stb_image'],https://github.com/nothings/stb/pull/665,https://github.com/cheako,1,https://github.com/nothings/stb/pull/665,"Function stbi__pnm_getinteger can return negative numbers if the value in ascii decimal is too large.  This patch checks for values that should not be negative and fails, zeroing the value in question.","Function stbi__pnm_getinteger can return negative numbers if the value in ascii decimal is too large.  This patch checks for values that should not be negative and fails, zeroing the value in question.",True,{}
nothings/stb,https://github.com/nothings/stb,665,2018-10-12T18:06:37Z,2018-11-23T21:17:45Z,2018-11-23T21:17:45Z,CLOSED,False,13,1,1,https://github.com/cheako,Image pnm decimal overrun,2,['1 stb_image'],https://github.com/nothings/stb/pull/665,https://github.com/rygorous,2,https://github.com/nothings/stb/pull/665#issuecomment-441144256,"Function stbi__pnm_getinteger can return negative numbers if the value in ascii decimal is too large.  This patch checks for values that should not be negative and fails, zeroing the value in question.",This one LGTM but for trivial indent issues which we can resolve when we merge.,True,{}
nothings/stb,https://github.com/nothings/stb,666,2018-10-12T19:40:42Z,2018-11-23T21:17:45Z,2018-11-23T21:17:45Z,CLOSED,False,591,68,24,https://github.com/cheako,Unit tests,15,['1 stb_image'],https://github.com/nothings/stb/pull/666,https://github.com/cheako,1,https://github.com/nothings/stb/pull/666,"This extends travis testing to include application code that produces perl's TAP, that is then processed by prove(an application that ships with perl).
Three example test are included that each test 4 things.  The 4 things are image pnm's ability to read and process headers and data in both pgm and ppm formats.  Of the three tests only one is implemented, binary reading when pnm's max value is 255.  The other two, reading in ascii formatted and low color count images, is either not supported or not supported correctly respectively.
The goal is to reduce or eliminate regressions and to provide targets for work currently in progress.  There is a lot of political baggage this introduces, but I'm ignoring this fact.","This extends travis testing to include application code that produces perl's TAP, that is then processed by prove(an application that ships with perl).
Three example test are included that each test 4 things.  The 4 things are image pnm's ability to read and process headers and data in both pgm and ppm formats.  Of the three tests only one is implemented, binary reading when pnm's max value is 255.  The other two, reading in ascii formatted and low color count images, is either not supported or not supported correctly respectively.
The goal is to reduce or eliminate regressions and to provide targets for work currently in progress.  There is a lot of political baggage this introduces, but I'm ignoring this fact.",True,{}
nothings/stb,https://github.com/nothings/stb,666,2018-10-12T19:40:42Z,2018-11-23T21:17:45Z,2018-11-23T21:17:45Z,CLOSED,False,591,68,24,https://github.com/cheako,Unit tests,15,['1 stb_image'],https://github.com/nothings/stb/pull/666,https://github.com/nothings,2,https://github.com/nothings/stb/pull/666#issuecomment-429569211,"This extends travis testing to include application code that produces perl's TAP, that is then processed by prove(an application that ships with perl).
Three example test are included that each test 4 things.  The 4 things are image pnm's ability to read and process headers and data in both pgm and ppm formats.  Of the three tests only one is implemented, binary reading when pnm's max value is 255.  The other two, reading in ascii formatted and low color count images, is either not supported or not supported correctly respectively.
The goal is to reduce or eliminate regressions and to provide targets for work currently in progress.  There is a lot of political baggage this introduces, but I'm ignoring this fact.","Why the directory 't'?
Why are there files with a "".t"" extension?
Why is the indentation of the C files random when I look at the ""Files changed"" tab?",True,{}
nothings/stb,https://github.com/nothings/stb,666,2018-10-12T19:40:42Z,2018-11-23T21:17:45Z,2018-11-23T21:17:45Z,CLOSED,False,591,68,24,https://github.com/cheako,Unit tests,15,['1 stb_image'],https://github.com/nothings/stb/pull/666,https://github.com/cheako,3,https://github.com/nothings/stb/pull/666#issuecomment-429569780,"This extends travis testing to include application code that produces perl's TAP, that is then processed by prove(an application that ships with perl).
Three example test are included that each test 4 things.  The 4 things are image pnm's ability to read and process headers and data in both pgm and ppm formats.  Of the three tests only one is implemented, binary reading when pnm's max value is 255.  The other two, reading in ascii formatted and low color count images, is either not supported or not supported correctly respectively.
The goal is to reduce or eliminate regressions and to provide targets for work currently in progress.  There is a lot of political baggage this introduces, but I'm ignoring this fact.","https://perldoc.perl.org/prove.html#Default-Test-Directory should answer the first few questions.
The 3rd answer is that API code is differentiated from the test code by indentation for no reason at all.",True,{}
nothings/stb,https://github.com/nothings/stb,668,2018-10-14T20:35:41Z,2018-11-23T02:14:34Z,2018-11-23T21:17:46Z,CLOSED,False,322,21,19,https://github.com/cheako,Image pnm color adjust,4,[],https://github.com/nothings/stb/pull/668,https://github.com/cheako,1,https://github.com/nothings/stb/pull/668,"See #664.
I've also implemented detection of the various pnm formats, intended to ease implementing these formats in the future.","See #664.
I've also implemented detection of the various pnm formats, intended to ease implementing these formats in the future.",True,{}
nothings/stb,https://github.com/nothings/stb,668,2018-10-14T20:35:41Z,2018-11-23T02:14:34Z,2018-11-23T21:17:46Z,CLOSED,False,322,21,19,https://github.com/cheako,Image pnm color adjust,4,[],https://github.com/nothings/stb/pull/668,https://github.com/rygorous,2,https://github.com/nothings/stb/pull/668#issuecomment-441144109,"See #664.
I've also implemented detection of the various pnm formats, intended to ease implementing these formats in the future.",See comments in #670.,True,{}
nothings/stb,https://github.com/nothings/stb,669,2018-10-15T22:33:57Z,2018-11-23T02:13:58Z,2018-11-23T21:17:48Z,CLOSED,False,378,21,20,https://github.com/cheako,Image pnm ascii,5,[],https://github.com/nothings/stb/pull/669,https://github.com/cheako,1,https://github.com/nothings/stb/pull/669,The long awaited support for ascii images and initial support for binary bitmap images.,The long awaited support for ascii images and initial support for binary bitmap images.,True,{}
nothings/stb,https://github.com/nothings/stb,669,2018-10-15T22:33:57Z,2018-11-23T02:13:58Z,2018-11-23T21:17:48Z,CLOSED,False,378,21,20,https://github.com/cheako,Image pnm ascii,5,[],https://github.com/nothings/stb/pull/669,https://github.com/rygorous,2,https://github.com/nothings/stb/pull/669#issuecomment-441144049,The long awaited support for ascii images and initial support for binary bitmap images.,See comments in #670.,True,{}
nothings/stb,https://github.com/nothings/stb,670,2018-10-16T16:13:27Z,2018-11-23T02:12:35Z,2018-11-24T02:20:32Z,CLOSED,False,395,25,20,https://github.com/cheako,Image pnm decimal overrun rebase,7,[],https://github.com/nothings/stb/pull/670,https://github.com/cheako,1,https://github.com/nothings/stb/pull/670,This is a rebase since the underlying code changed.,This is a rebase since the underlying code changed.,True,{}
nothings/stb,https://github.com/nothings/stb,670,2018-10-16T16:13:27Z,2018-11-23T02:12:35Z,2018-11-24T02:20:32Z,CLOSED,False,395,25,20,https://github.com/cheako,Image pnm decimal overrun rebase,7,[],https://github.com/nothings/stb/pull/670,https://github.com/rygorous,2,https://github.com/nothings/stb/pull/670#issuecomment-441143946,This is a rebase since the underlying code changed.,"This has unfixed merge conflicts in it and touches a lot of code with no good reason that I can tell? Also there are definitely several problems in there:

The ""<<<< HEAD"" thing in there indicates something went wrong with your rebase, please check and fix it up.
That check for t in stb_image.h:7002 should be rewritten ""t < '1' || t > '6'"", I think. :)
Put ""maxv"" (renamed to ""pnm_maxv"") and ""pnm_format"" into stbi__context directly and remove stbi__pnm, that seems total overkill for two integer fields.
the STBI__PNM_BITMAP handling looks really wrong to me on multiple counts, and I'm pretty sure it's never been tested.


it assumes signed 9-bit bytes?!? (ctr counts up to 9, and there are 9 cases in the switch.)
no stbi_get8() on the first byte (only after ctr has counted to 9)
ctr needs to get reset to 0 on every row. (PBM spec: ""[..] with don't care bits to fill out the last byte in the row."")
the handling for ""case 0"" assumes the MSB is the sign bit. Why are you using signed chars at all here, or reusing c for that matter? Should be ""stbi_uc"" (the unsigned char type returned be stbi_get8) instead.
Those bit masks you're using are octal literals, not binary. They are not testing the right bits!


lroundf is C99 and later or C++11 and later and does not exist in several compilers we support. Nor is there any real reason to use floating-point here. Just use int adjust = (255 << 16) / p.maxv and out[i] = (out[i] * adjust + 0x8000) >> 16 here.

Could you fix these and submit another PR?",True,{}
nothings/stb,https://github.com/nothings/stb,670,2018-10-16T16:13:27Z,2018-11-23T02:12:35Z,2018-11-24T02:20:32Z,CLOSED,False,395,25,20,https://github.com/cheako,Image pnm decimal overrun rebase,7,[],https://github.com/nothings/stb/pull/670,https://github.com/cheako,3,https://github.com/nothings/stb/pull/670#issuecomment-441147112,This is a rebase since the underlying code changed.,"We need to round floats because 16 is only an example, just as 15 or 14 and we can't use shifts in those cases.",True,{}
nothings/stb,https://github.com/nothings/stb,670,2018-10-16T16:13:27Z,2018-11-23T02:12:35Z,2018-11-24T02:20:32Z,CLOSED,False,395,25,20,https://github.com/cheako,Image pnm decimal overrun rebase,7,[],https://github.com/nothings/stb/pull/670,https://github.com/rygorous,4,https://github.com/nothings/stb/pull/670#issuecomment-441150872,This is a rebase since the underlying code changed.,"The calculation I posted expands to 8.24 fixed point and then scales down, with rounding. It handles arbitrary values of maxv between 1 and 255. (Which is checked for elsewhere.)",True,{}
nothings/stb,https://github.com/nothings/stb,670,2018-10-16T16:13:27Z,2018-11-23T02:12:35Z,2018-11-24T02:20:32Z,CLOSED,False,395,25,20,https://github.com/cheako,Image pnm decimal overrun rebase,7,[],https://github.com/nothings/stb/pull/670,https://github.com/rygorous,5,https://github.com/nothings/stb/pull/670#issuecomment-441150903,This is a rebase since the underlying code changed.,"Eh, sorry, 8.16 fixed point, not 8.24. My bad.",True,{}
nothings/stb,https://github.com/nothings/stb,670,2018-10-16T16:13:27Z,2018-11-23T02:12:35Z,2018-11-24T02:20:32Z,CLOSED,False,395,25,20,https://github.com/cheako,Image pnm decimal overrun rebase,7,[],https://github.com/nothings/stb/pull/670,https://github.com/cheako,6,https://github.com/nothings/stb/pull/670#issuecomment-441185616,This is a rebase since the underlying code changed.,"I tried varying the precision of your equation, but it gets slightly different results on some edge cases for each.
https://onlinegdb.com/ryWybrS0m
Though I do wonder what is correct?
Edit: 18 has 19 possible values,  so 9 is as far above half way as 8 is below.  So I think neither is correct...  but 127(the proposal)can't be right.",True,{}
nothings/stb,https://github.com/nothings/stb,670,2018-10-16T16:13:27Z,2018-11-23T02:12:35Z,2018-11-24T02:20:32Z,CLOSED,False,395,25,20,https://github.com/cheako,Image pnm decimal overrun rebase,7,[],https://github.com/nothings/stb/pull/670,https://github.com/rygorous,7,https://github.com/nothings/stb/pull/670#issuecomment-441192168,This is a rebase since the underlying code changed.,"If you want to compare to a reference version, you should not compare against one using floats, since that's approximate and subject to round-off error too. In particular, your float version has the same basic issue of multiplying by a finite-precision approximation of 255/maxv. In addition, the rounding semantics of lroundf and friends are somewhat biased, so they're not an ideal ""best"" reference either. But one thing at a time.
For an exact reference without rounding (or alternatively, rounding towards zero, which in this case is the same as truncation since all numbers in question are nonnegative), you just do the entire calculation in integers: (x * 255) / maxv.
For non-negative values, the rounding rule implemented by lroundf (towards nearest, round ties away from zero) is equivalent to adding 1/2 then truncating, i.e. floor(x + 0.5) (computed in infinite precision with no intermediate rounding). Still staying in exact integer form, and with even maxv (it usually isn't, but it's the easier case so let's do it first) this is readily expressed as (x * 255 + maxv/2) / maxv. To handle odd maxv, the easiest thing is to just scale the whole thing by another factor of two: (x * (255*2) + maxv) / (2*maxv). This is an exact (no intermediate rounding ever) version of your lroundf(x * 255.0f / maxv) expression, but you could still argue whether it's correct, because it exhibits a slight bias: values that fall exactly on the halfway point between two representable integers will always get rounded up, which is a systematic error. Numerical computations normally use a different tie-breaker rule that guarantees exact halfway cases get rounded up and down equally as often, the most common being the round-to-nearest-breaking-ties-toward-even rule (""RTNE"") - i.e. round exact halfway ties in the direction that makes the result even (LSB is 0). You could add something like that here as well but all of this really is complete overkill; practically speaking the accuracy of either your float version or the fixed-point approximation I posted is more than sufficient for this problem.
I suppose if you want to make it as precise as possible, and are concerned about cost (indeed an integer divide per pixel seems excessive), you could just compute a small 256-entry table of what byte values the inputs 0..maxv should map to. Then setting up the table can get fancy (I still wouldn't bother with round-to-nearest-even here though) but the actual per-pixel ""computation"" ends up being just a single table lookup.",True,{}
nothings/stb,https://github.com/nothings/stb,670,2018-10-16T16:13:27Z,2018-11-23T02:12:35Z,2018-11-24T02:20:32Z,CLOSED,False,395,25,20,https://github.com/cheako,Image pnm decimal overrun rebase,7,[],https://github.com/nothings/stb/pull/670,https://github.com/rygorous,8,https://github.com/nothings/stb/pull/670#issuecomment-441198552,This is a rebase since the underlying code changed.,"Separately: why does your test say you want to support maxv up to 0xffff? Where is that coming from?
Don't take this the wrong way, but this patch series keeps moving the goalposts with every new iteration and I'm getting a bit concerned about the scope creep. Extending our max supported maxv up to 0xffff means we would need a path that reads the image as 16 bits/channel, which needs twice the memory, so either we have end up with two versions of the reading code (one that supports up to 8 bits and one for up to 16 bits) or we waste a lot of extra memory on 8-bit/channel images. It means that tricks like using a table of all possible values to remap from [0,maxv] to a canonical range (e.g. [0,255]) become unwieldy enough to be really unappealing. It means we need to deal with converting 16-bit/channel PNMs to 8-bit (when loaded through the 8-bit API), it means we need to plumb the PBM code into the load_16/loadf APIs so you can get at the unscaled values (else 16-bit/channel support isn't very meaningful); that's a fair amount of code that would all be part of the library going forward.
And if there's an actual demand to load 16-bit/channel PPMs or PGMs, all of that is justifiable, but is there? Are there 16-bit/channel PPMs or PGMs that you would like to load through stb_image but can't right now?
I'm OK with supporting ASCII PNMs, because it's a fairly small change on top of the code that is already there, and they're definitely around. I'm likewise fine with the maxv fix, because it likewise isn't that big and seems like the Right Thing to do. I'm not so sure about the PBM support because that code looks like it was written out of a feeling of obligation ""this is in the spec too..."" but then never actually tested, and things like that don't belong in stb_image, which generally intentionally skips support for rare format variants, like 12-bit JPEGs or arithmetically coded JPEGs. 16-bit/channel PNMs to me belong in that same category, and I'd much rather not support it than have a lot of extra code that is never run and probably buggy.",True,{}
nothings/stb,https://github.com/nothings/stb,670,2018-10-16T16:13:27Z,2018-11-23T02:12:35Z,2018-11-24T02:20:32Z,CLOSED,False,395,25,20,https://github.com/cheako,Image pnm decimal overrun rebase,7,[],https://github.com/nothings/stb/pull/670,https://github.com/cheako,9,https://github.com/nothings/stb/pull/670#issuecomment-441296289,This is a rebase since the underlying code changed.,Thanks for letting me know more about the goals of the stb project.   What I don't want to do is write a remap that would be another obstacle for 16bit support.,True,{}
nothings/stb,https://github.com/nothings/stb,670,2018-10-16T16:13:27Z,2018-11-23T02:12:35Z,2018-11-24T02:20:32Z,CLOSED,False,395,25,20,https://github.com/cheako,Image pnm decimal overrun rebase,7,[],https://github.com/nothings/stb/pull/670,https://github.com/cheako,10,https://github.com/nothings/stb/pull/670#issuecomment-441297152,This is a rebase since the underlying code changed.,"I take back my edit, 19 is an odd number so there should be at least one input that produces 127 as an output.",True,{}
nothings/stb,https://github.com/nothings/stb,670,2018-10-16T16:13:27Z,2018-11-23T02:12:35Z,2018-11-24T02:20:32Z,CLOSED,False,395,25,20,https://github.com/cheako,Image pnm decimal overrun rebase,7,[],https://github.com/nothings/stb/pull/670,https://github.com/rygorous,11,https://github.com/nothings/stb/pull/670#issuecomment-441332956,This is a rebase since the underlying code changed.,"If we decide to add 16bit support later, we can worry about the remapping then; it's not a big deal either way. (Hey, it's a single integer expression.) For now, let's worry about the cases we actually support!",True,{}
nothings/stb,https://github.com/nothings/stb,670,2018-10-16T16:13:27Z,2018-11-23T02:12:35Z,2018-11-24T02:20:32Z,CLOSED,False,395,25,20,https://github.com/cheako,Image pnm decimal overrun rebase,7,[],https://github.com/nothings/stb/pull/670,https://github.com/cheako,12,https://github.com/nothings/stb/pull/670#issuecomment-441337733,This is a rebase since the underlying code changed.,"I tested the code @rygorous provided and it did indeed support up to 16bit on the arch I tested.
https://onlinegdb.com/ryWybrS0m
Edit: I don't know what onlinegdb did with my code, but it's not too hard to recreate.  Just change the if() to also accept ""out == new_out - 1"" as good.
I've finished and created a another PR.",True,{}
nothings/stb,https://github.com/nothings/stb,673,2018-10-24T14:10:35Z,2019-02-07T16:40:25Z,2019-03-05T08:03:37Z,CLOSED,False,15,8,1,https://github.com/AdamAllison,Strict aliasing rules and implementation defined shifting changes.,2,['1 stb_sprintf'],https://github.com/nothings/stb/pull/673,https://github.com/AdamAllison,1,https://github.com/nothings/stb/pull/673,"3 minor fixes,
1 strict alignment, I don't think the C standard requires alignment on global variables other that what is required for that type. I could be wrong, but my compiler spit out warnings, so that prompted the change
1 right shifting of something to get the sign bit is 'implementation defined', so I cast it to a u64.
1 minor casting of variable 'l' (length) to match 'pr' (precision).
Thank you,
Adam Allison
Here is want I used to test it:
#include <stdio.h>
#define STB_SPRINTF_IMPLEMENTATION 1
#define STB_SPRINTF_NOUNALIGNED 1
#define STB_SPRINTF_STATIC 1
#include ""stb_sprintf.h""
/* expected is 1.01 12345 0x1.028F5CP+0 -0x1.028F5CP+0 -1.01 */
int main(void)
{
char buffer[512];
stbsp_snprintf(buffer, 512, ""%G"", 1.01F);
puts(buffer);

stbsp_snprintf(buffer, 512, ""%d"", 12345);
puts(buffer);

stbsp_snprintf(buffer, 512, ""%A"", 1.01F);
puts(buffer);
stbsp_snprintf(buffer, 512, ""%A"", -1.01F);
puts(buffer);

stbsp_snprintf(buffer, 512, ""%G"", -1.01F);
puts(buffer);

return 0;

}","3 minor fixes,
1 strict alignment, I don't think the C standard requires alignment on global variables other that what is required for that type. I could be wrong, but my compiler spit out warnings, so that prompted the change
1 right shifting of something to get the sign bit is 'implementation defined', so I cast it to a u64.
1 minor casting of variable 'l' (length) to match 'pr' (precision).
Thank you,
Adam Allison
Here is want I used to test it:
#include <stdio.h>
#define STB_SPRINTF_IMPLEMENTATION 1
#define STB_SPRINTF_NOUNALIGNED 1
#define STB_SPRINTF_STATIC 1
#include ""stb_sprintf.h""
/* expected is 1.01 12345 0x1.028F5CP+0 -0x1.028F5CP+0 -1.01 */
int main(void)
{
char buffer[512];
stbsp_snprintf(buffer, 512, ""%G"", 1.01F);
puts(buffer);

stbsp_snprintf(buffer, 512, ""%d"", 12345);
puts(buffer);

stbsp_snprintf(buffer, 512, ""%A"", 1.01F);
puts(buffer);
stbsp_snprintf(buffer, 512, ""%A"", -1.01F);
puts(buffer);

stbsp_snprintf(buffer, 512, ""%G"", -1.01F);
puts(buffer);

return 0;

}",True,{}
nothings/stb,https://github.com/nothings/stb,673,2018-10-24T14:10:35Z,2019-02-07T16:40:25Z,2019-03-05T08:03:37Z,CLOSED,False,15,8,1,https://github.com/AdamAllison,Strict aliasing rules and implementation defined shifting changes.,2,['1 stb_sprintf'],https://github.com/nothings/stb/pull/673,https://github.com/nothings,2,https://github.com/nothings/stb/pull/673#issuecomment-461503394,"3 minor fixes,
1 strict alignment, I don't think the C standard requires alignment on global variables other that what is required for that type. I could be wrong, but my compiler spit out warnings, so that prompted the change
1 right shifting of something to get the sign bit is 'implementation defined', so I cast it to a u64.
1 minor casting of variable 'l' (length) to match 'pr' (precision).
Thank you,
Adam Allison
Here is want I used to test it:
#include <stdio.h>
#define STB_SPRINTF_IMPLEMENTATION 1
#define STB_SPRINTF_NOUNALIGNED 1
#define STB_SPRINTF_STATIC 1
#include ""stb_sprintf.h""
/* expected is 1.01 12345 0x1.028F5CP+0 -0x1.028F5CP+0 -1.01 */
int main(void)
{
char buffer[512];
stbsp_snprintf(buffer, 512, ""%G"", 1.01F);
puts(buffer);

stbsp_snprintf(buffer, 512, ""%d"", 12345);
puts(buffer);

stbsp_snprintf(buffer, 512, ""%A"", 1.01F);
puts(buffer);
stbsp_snprintf(buffer, 512, ""%A"", -1.01F);
puts(buffer);

stbsp_snprintf(buffer, 512, ""%G"", -1.01F);
puts(buffer);

return 0;

}","I re-did these changes manually with a simpler way of forcing digitpair[] to have the right alignment (I hope). Nothing wrong with the way you did it, I just wanted to make the delta smaller.
In the next release.",True,{}
nothings/stb,https://github.com/nothings/stb,675,2018-11-09T15:00:50Z,2019-02-07T17:23:38Z,2019-02-07T17:23:38Z,CLOSED,False,1,0,1,https://github.com/account-login,stb_sprintf: fix integer size for %ld,1,['1 stb_sprintf'],https://github.com/nothings/stb/pull/675,https://github.com/account-login,1,https://github.com/nothings/stb/pull/675,long int may be 64 bit on some systems.,long int may be 64 bit on some systems.,True,{}
nothings/stb,https://github.com/nothings/stb,675,2018-11-09T15:00:50Z,2019-02-07T17:23:38Z,2019-02-07T17:23:38Z,CLOSED,False,1,0,1,https://github.com/account-login,stb_sprintf: fix integer size for %ld,1,['1 stb_sprintf'],https://github.com/nothings/stb/pull/675,https://github.com/nothings,2,https://github.com/nothings/stb/pull/675#issuecomment-461518347,long int may be 64 bit on some systems.,"yep, merged for next release",True,{}
nothings/stb,https://github.com/nothings/stb,678,2018-11-18T05:50:28Z,2019-02-07T16:46:31Z,2019-02-07T16:46:31Z,CLOSED,False,18,2,1,https://github.com/kcgen,Add detection for Ogg skeleton metadata,2,['1 stb_vorbis'],https://github.com/nothings/stb/pull/678,https://github.com/kcgen,1,https://github.com/nothings/stb/pull/678,"Regarding #676: if a valid Ogg stream contains skeleton metadata, stb_vorbis will exit with VORBIS_invalid_first_page.
This pull request will detect the skeleton metadata and exit with VORBIS_ogg_skeleton_not_supported, which is a small but helpful refinement.","Regarding #676: if a valid Ogg stream contains skeleton metadata, stb_vorbis will exit with VORBIS_invalid_first_page.
This pull request will detect the skeleton metadata and exit with VORBIS_ogg_skeleton_not_supported, which is a small but helpful refinement.",True,{}
nothings/stb,https://github.com/nothings/stb,678,2018-11-18T05:50:28Z,2019-02-07T16:46:31Z,2019-02-07T16:46:31Z,CLOSED,False,18,2,1,https://github.com/kcgen,Add detection for Ogg skeleton metadata,2,['1 stb_vorbis'],https://github.com/nothings/stb/pull/678,https://github.com/nothings,2,https://github.com/nothings/stb/pull/678#issuecomment-461505643,"Regarding #676: if a valid Ogg stream contains skeleton metadata, stb_vorbis will exit with VORBIS_invalid_first_page.
This pull request will detect the skeleton metadata and exit with VORBIS_ogg_skeleton_not_supported, which is a small but helpful refinement.",merged for next release,True,{}
nothings/stb,https://github.com/nothings/stb,679,2018-11-23T23:48:40Z,2020-02-02T15:53:06Z,2020-02-02T15:53:06Z,CLOSED,False,357,25,20,https://github.com/cheako,Image pnm improvements 112318,6,"['1 stb_image', 'needs changes']",https://github.com/nothings/stb/pull/679,https://github.com/cheako,1,https://github.com/nothings/stb/pull/679,"introduce unit tests
stb_image: pnm max value adjustment, detect format
stb_image: pnm add ascii image support
stb_image: pnm protect from decimal value overflow","introduce unit tests
stb_image: pnm max value adjustment, detect format
stb_image: pnm add ascii image support
stb_image: pnm protect from decimal value overflow",True,{}
nothings/stb,https://github.com/nothings/stb,679,2018-11-23T23:48:40Z,2020-02-02T15:53:06Z,2020-02-02T15:53:06Z,CLOSED,False,357,25,20,https://github.com/cheako,Image pnm improvements 112318,6,"['1 stb_image', 'needs changes']",https://github.com/nothings/stb/pull/679,https://github.com/cheako,2,https://github.com/nothings/stb/pull/679#issuecomment-441338534,"introduce unit tests
stb_image: pnm max value adjustment, detect format
stb_image: pnm add ascii image support
stb_image: pnm protect from decimal value overflow",I forgot about folding the struct for pnm header fields into the core image handle struct..,True,{}
nothings/stb,https://github.com/nothings/stb,679,2018-11-23T23:48:40Z,2020-02-02T15:53:06Z,2020-02-02T15:53:06Z,CLOSED,False,357,25,20,https://github.com/cheako,Image pnm improvements 112318,6,"['1 stb_image', 'needs changes']",https://github.com/nothings/stb/pull/679,https://github.com/nothings,3,https://github.com/nothings/stb/pull/679#issuecomment-461507009,"introduce unit tests
stb_image: pnm max value adjustment, detect format
stb_image: pnm add ascii image support
stb_image: pnm protect from decimal value overflow","I'm concerned about adding the dependency on ""prove"", as I'm not clear how much value it adds in return for adding another dependency that's a PITA for Windows.
(I seem to remember starting to discuss this issue elsewhere but I can't find the PR with it.)",True,{}
nothings/stb,https://github.com/nothings/stb,679,2018-11-23T23:48:40Z,2020-02-02T15:53:06Z,2020-02-02T15:53:06Z,CLOSED,False,357,25,20,https://github.com/cheako,Image pnm improvements 112318,6,"['1 stb_image', 'needs changes']",https://github.com/nothings/stb/pull/679,https://github.com/cheako,4,https://github.com/nothings/stb/pull/679#issuecomment-461562967,"introduce unit tests
stb_image: pnm max value adjustment, detect format
stb_image: pnm add ascii image support
stb_image: pnm protect from decimal value overflow","Prove doesn't NEED to do much more than run the tests, so there could just be a small prove.bat that does that.  Make sure to run the compiled executables and not the perl...  if u have perl than u also have prove.",True,{}
nothings/stb,https://github.com/nothings/stb,679,2018-11-23T23:48:40Z,2020-02-02T15:53:06Z,2020-02-02T15:53:06Z,CLOSED,False,357,25,20,https://github.com/cheako,Image pnm improvements 112318,6,"['1 stb_image', 'needs changes']",https://github.com/nothings/stb/pull/679,https://github.com/nothings,5,https://github.com/nothings/stb/pull/679#issuecomment-469570614,"introduce unit tests
stb_image: pnm max value adjustment, detect format
stb_image: pnm add ascii image support
stb_image: pnm protect from decimal value overflow","If it's possible for you to separate this into three or four PRs, that would be helpful:

fixes/improvements to PNM decoder
unit tests embedded in stb_image
external test programs and images
integration with prove

You can skip the fourth one as I'm almost certainly going to replace that with something else, but if it makes your life simpler to keep it around that's fine, or if things don't divide cleanly along those lines you can divide them differently.",True,{}
nothings/stb,https://github.com/nothings/stb,679,2018-11-23T23:48:40Z,2020-02-02T15:53:06Z,2020-02-02T15:53:06Z,CLOSED,False,357,25,20,https://github.com/cheako,Image pnm improvements 112318,6,"['1 stb_image', 'needs changes']",https://github.com/nothings/stb/pull/679,https://github.com/nothings,6,https://github.com/nothings/stb/pull/679#issuecomment-469579918,"introduce unit tests
stb_image: pnm max value adjustment, detect format
stb_image: pnm add ascii image support
stb_image: pnm protect from decimal value overflow",Previous PR on the prove tester was #666,True,{}
nothings/stb,https://github.com/nothings/stb,679,2018-11-23T23:48:40Z,2020-02-02T15:53:06Z,2020-02-02T15:53:06Z,CLOSED,False,357,25,20,https://github.com/cheako,Image pnm improvements 112318,6,"['1 stb_image', 'needs changes']",https://github.com/nothings/stb/pull/679,https://github.com/nothings,7,https://github.com/nothings/stb/pull/679#issuecomment-581148484,"introduce unit tests
stb_image: pnm max value adjustment, detect format
stb_image: pnm add ascii image support
stb_image: pnm protect from decimal value overflow",Submitter never followed up on the request to split the PR.,True,{}
nothings/stb,https://github.com/nothings/stb,683,2018-12-17T20:22:56Z,,2021-12-23T16:56:41Z,OPEN,False,4,18,1,https://github.com/Nuk510,Some GIF fixes stb_image,2,"['2 bug', '1 stb_image']",https://github.com/nothings/stb/pull/683,https://github.com/Nuk510,1,https://github.com/nothings/stb/pull/683,"Fix 1: Disposal method 2 clears canvas
The old code was restoring pixels from an earlier frame with disposal method 2 in this test GIF. This disposal method should instead clear the canvas.
Left: Original GIF
Right: stb_image.h behavior, pre-fix
 
Fix 2: First frame preserves transparency for unspecified pixels.
The old code was clearing the pixels surrounding the first frame to a background color. They should instead remain transparent.
Left: Boundaries of first frame
Center: Original GIF
Right: stb_image.h behavior, pre-fix","Fix 1: Disposal method 2 clears canvas
The old code was restoring pixels from an earlier frame with disposal method 2 in this test GIF. This disposal method should instead clear the canvas.
Left: Original GIF
Right: stb_image.h behavior, pre-fix
 
Fix 2: First frame preserves transparency for unspecified pixels.
The old code was clearing the pixels surrounding the first frame to a background color. They should instead remain transparent.
Left: Boundaries of first frame
Center: Original GIF
Right: stb_image.h behavior, pre-fix",True,{}
nothings/stb,https://github.com/nothings/stb,683,2018-12-17T20:22:56Z,,2021-12-23T16:56:41Z,OPEN,False,4,18,1,https://github.com/Nuk510,Some GIF fixes stb_image,2,"['2 bug', '1 stb_image']",https://github.com/nothings/stb/pull/683,https://github.com/nothings,2,https://github.com/nothings/stb/pull/683#issuecomment-461508082,"Fix 1: Disposal method 2 clears canvas
The old code was restoring pixels from an earlier frame with disposal method 2 in this test GIF. This disposal method should instead clear the canvas.
Left: Original GIF
Right: stb_image.h behavior, pre-fix
 
Fix 2: First frame preserves transparency for unspecified pixels.
The old code was clearing the pixels surrounding the first frame to a background color. They should instead remain transparent.
Left: Boundaries of first frame
Center: Original GIF
Right: stb_image.h behavior, pre-fix","Should g.background even be allocated anymore? It looks to me like you've removed the only use of it, unless I'm missing something. Which then makes me wonder if this fix is even correct or if it's possible you've broken other cases.",True,{}
nothings/stb,https://github.com/nothings/stb,683,2018-12-17T20:22:56Z,,2021-12-23T16:56:41Z,OPEN,False,4,18,1,https://github.com/Nuk510,Some GIF fixes stb_image,2,"['2 bug', '1 stb_image']",https://github.com/nothings/stb/pull/683,https://github.com/nothings,3,https://github.com/nothings/stb/pull/683#issuecomment-469574297,"Fix 1: Disposal method 2 clears canvas
The old code was restoring pixels from an earlier frame with disposal method 2 in this test GIF. This disposal method should instead clear the canvas.
Left: Original GIF
Right: stb_image.h behavior, pre-fix
 
Fix 2: First frame preserves transparency for unspecified pixels.
The old code was clearing the pixels surrounding the first frame to a background color. They should instead remain transparent.
Left: Boundaries of first frame
Center: Original GIF
Right: stb_image.h behavior, pre-fix","@rygorous is going to investigate some related issues in this code at some point, so I'm assigning it to him.",True,{}
nothings/stb,https://github.com/nothings/stb,683,2018-12-17T20:22:56Z,,2021-12-23T16:56:41Z,OPEN,False,4,18,1,https://github.com/Nuk510,Some GIF fixes stb_image,2,"['2 bug', '1 stb_image']",https://github.com/nothings/stb/pull/683,https://github.com/nothings,4,https://github.com/nothings/stb/pull/683#issuecomment-581148547,"Fix 1: Disposal method 2 clears canvas
The old code was restoring pixels from an earlier frame with disposal method 2 in this test GIF. This disposal method should instead clear the canvas.
Left: Original GIF
Right: stb_image.h behavior, pre-fix
 
Fix 2: First frame preserves transparency for unspecified pixels.
The old code was clearing the pixels surrounding the first frame to a background color. They should instead remain transparent.
Left: Boundaries of first frame
Center: Original GIF
Right: stb_image.h behavior, pre-fix",Pinging @rygorous,True,{}
nothings/stb,https://github.com/nothings/stb,683,2018-12-17T20:22:56Z,,2021-12-23T16:56:41Z,OPEN,False,4,18,1,https://github.com/Nuk510,Some GIF fixes stb_image,2,"['2 bug', '1 stb_image']",https://github.com/nothings/stb/pull/683,https://github.com/mosra,5,https://github.com/nothings/stb/pull/683#issuecomment-609878098,"Fix 1: Disposal method 2 clears canvas
The old code was restoring pixels from an earlier frame with disposal method 2 in this test GIF. This disposal method should instead clear the canvas.
Left: Original GIF
Right: stb_image.h behavior, pre-fix
 
Fix 2: First frame preserves transparency for unspecified pixels.
The old code was clearing the pixels surrounding the first frame to a background color. They should instead remain transparent.
Left: Boundaries of first frame
Center: Original GIF
Right: stb_image.h behavior, pre-fix","Just a note from a random passerby in a hope it will be useful -- I was dealing with GIF animations recently and while looking for test files I found dispose_bgnd.gif, dispose_none.gif and dispose_prev.gif in the Pillow repository. At least the first one renders differently with stb_image than in the browser, didn't check the other two.",True,{}
nothings/stb,https://github.com/nothings/stb,683,2018-12-17T20:22:56Z,,2021-12-23T16:56:41Z,OPEN,False,4,18,1,https://github.com/Nuk510,Some GIF fixes stb_image,2,"['2 bug', '1 stb_image']",https://github.com/nothings/stb/pull/683,https://github.com/Biohazard90,6,https://github.com/nothings/stb/pull/683#issuecomment-671370927,"Fix 1: Disposal method 2 clears canvas
The old code was restoring pixels from an earlier frame with disposal method 2 in this test GIF. This disposal method should instead clear the canvas.
Left: Original GIF
Right: stb_image.h behavior, pre-fix
 
Fix 2: First frame preserves transparency for unspecified pixels.
The old code was clearing the pixels surrounding the first frame to a background color. They should instead remain transparent.
Left: Boundaries of first frame
Center: Original GIF
Right: stb_image.h behavior, pre-fix","I have issues with GIF decoding as well and this PR unfortunately isn't quite right either.
The g->background array is not needed. This is used for dispose method 2. But instead the specification says it should be cleared to the background color which is g->pal[g->bgindex]. So to fix dispose method 2 one needs to copy g->pal[g->bgindex] over the array. Not use the g->background array and neither just set it to 0, like in this PR.
The PR also removes the block that begins with ""if (first_frame && (g->bgindex > 0))"" but I think that's wrong too. The condition should be changed to ""if (first_frame && (g->bgindex > 0) && (g->eflags & 0x01) == 0)"" instead.",True,{}
nothings/stb,https://github.com/nothings/stb,683,2018-12-17T20:22:56Z,,2021-12-23T16:56:41Z,OPEN,False,4,18,1,https://github.com/Nuk510,Some GIF fixes stb_image,2,"['2 bug', '1 stb_image']",https://github.com/nothings/stb/pull/683,https://github.com/Biohazard90,7,https://github.com/nothings/stb/pull/683#issuecomment-671419684,"Fix 1: Disposal method 2 clears canvas
The old code was restoring pixels from an earlier frame with disposal method 2 in this test GIF. This disposal method should instead clear the canvas.
Left: Original GIF
Right: stb_image.h behavior, pre-fix
 
Fix 2: First frame preserves transparency for unspecified pixels.
The old code was clearing the pixels surrounding the first frame to a background color. They should instead remain transparent.
Left: Boundaries of first frame
Center: Original GIF
Right: stb_image.h behavior, pre-fix","There is also another problem, but with dispose method 3. I think to get the correct behavior, it should revert to the last non-disposable frame (dispose 0 or 1).
This is something that must be fixed in the client code, but the parameter name two_back should be renamed to last_non_disposable or something. Then the client should store the values for this parameter by checking for (dispose == 0 || dispose == 1). Hope that makes sense.
All three GIFs mentioned by @mosra work for me now with the fixes I explained here.",True,{}
nothings/stb,https://github.com/nothings/stb,683,2018-12-17T20:22:56Z,,2021-12-23T16:56:41Z,OPEN,False,4,18,1,https://github.com/Nuk510,Some GIF fixes stb_image,2,"['2 bug', '1 stb_image']",https://github.com/nothings/stb/pull/683,https://github.com/nothings,8,https://github.com/nothings/stb/pull/683#issuecomment-877878358,"Fix 1: Disposal method 2 clears canvas
The old code was restoring pixels from an earlier frame with disposal method 2 in this test GIF. This disposal method should instead clear the canvas.
Left: Original GIF
Right: stb_image.h behavior, pre-fix
 
Fix 2: First frame preserves transparency for unspecified pixels.
The old code was clearing the pixels surrounding the first frame to a background color. They should instead remain transparent.
Left: Boundaries of first frame
Center: Original GIF
Right: stb_image.h behavior, pre-fix","We're going to fork animated gif support into a separate library, and this will have to be adapted when that happens.",True,{}
nothings/stb,https://github.com/nothings/stb,683,2018-12-17T20:22:56Z,,2021-12-23T16:56:41Z,OPEN,False,4,18,1,https://github.com/Nuk510,Some GIF fixes stb_image,2,"['2 bug', '1 stb_image']",https://github.com/nothings/stb/pull/683,https://github.com/sam20908,9,https://github.com/nothings/stb/pull/683#issuecomment-1000423968,"Fix 1: Disposal method 2 clears canvas
The old code was restoring pixels from an earlier frame with disposal method 2 in this test GIF. This disposal method should instead clear the canvas.
Left: Original GIF
Right: stb_image.h behavior, pre-fix
 
Fix 2: First frame preserves transparency for unspecified pixels.
The old code was clearing the pixels surrounding the first frame to a background color. They should instead remain transparent.
Left: Boundaries of first frame
Center: Original GIF
Right: stb_image.h behavior, pre-fix","We're going to fork animated gif support into a separate library, and this will have to be adapted when that happens.

Oh cool! What's the library called?",True,{}
nothings/stb,https://github.com/nothings/stb,697,2019-01-23T00:34:53Z,2019-02-07T15:17:48Z,2019-03-05T08:02:29Z,CLOSED,False,8,6,2,https://github.com/ab-cpp,fix compiler warnings and const error,2,"['1 stb_image', '2 warning']",https://github.com/nothings/stb/pull/697,https://github.com/ab-cpp,1,https://github.com/nothings/stb/pull/697,2 unused parameter warnings and a few parameters that should be 'const'.,2 unused parameter warnings and a few parameters that should be 'const'.,True,{}
nothings/stb,https://github.com/nothings/stb,697,2019-01-23T00:34:53Z,2019-02-07T15:17:48Z,2019-03-05T08:02:29Z,CLOSED,False,8,6,2,https://github.com/ab-cpp,fix compiler warnings and const error,2,"['1 stb_image', '2 warning']",https://github.com/nothings/stb/pull/697,https://github.com/nothings,2,https://github.com/nothings/stb/pull/697#issuecomment-461317091,2 unused parameter warnings and a few parameters that should be 'const'.,"Unused parameters need to use STBI_UNUSED in the function body for C compatibility.
write_png const fix is good, but the static function shouldn't get const, it should be cast away in the caller (stb_image convention is no const in internal functions, only on API).",True,{}
nothings/stb,https://github.com/nothings/stb,697,2019-01-23T00:34:53Z,2019-02-07T15:17:48Z,2019-03-05T08:02:29Z,CLOSED,False,8,6,2,https://github.com/ab-cpp,fix compiler warnings and const error,2,"['1 stb_image', '2 warning']",https://github.com/nothings/stb/pull/697,https://github.com/ab-cpp,3,https://github.com/nothings/stb/pull/697#issuecomment-461401349,2 unused parameter warnings and a few parameters that should be 'const'.,Thanks for your feedback ! Requested changes made.,True,{}
nothings/stb,https://github.com/nothings/stb,697,2019-01-23T00:34:53Z,2019-02-07T15:17:48Z,2019-03-05T08:02:29Z,CLOSED,False,8,6,2,https://github.com/ab-cpp,fix compiler warnings and const error,2,"['1 stb_image', '2 warning']",https://github.com/nothings/stb/pull/697,https://github.com/nothings,4,https://github.com/nothings/stb/pull/697#issuecomment-461464231,2 unused parameter warnings and a few parameters that should be 'const'.,"Great, thanks for the speedy fix! Merged for next release.",True,{}
nothings/stb,https://github.com/nothings/stb,697,2019-01-23T00:34:53Z,2019-02-07T15:17:48Z,2019-03-05T08:02:29Z,CLOSED,False,8,6,2,https://github.com/ab-cpp,fix compiler warnings and const error,2,"['1 stb_image', '2 warning']",https://github.com/nothings/stb/pull/697,https://github.com/nothings,5,https://github.com/nothings/stb/pull/697#issuecomment-461466740,2 unused parameter warnings and a few parameters that should be 'const'.,"(FWIW you put a bunch of C++ -isms in that I had to fix since it has to build as both C and C++, but no big deal.)",True,{}
nothings/stb,https://github.com/nothings/stb,697,2019-01-23T00:34:53Z,2019-02-07T15:17:48Z,2019-03-05T08:02:29Z,CLOSED,False,8,6,2,https://github.com/ab-cpp,fix compiler warnings and const error,2,"['1 stb_image', '2 warning']",https://github.com/nothings/stb/pull/697,https://github.com/ab-cpp,6,https://github.com/nothings/stb/pull/697#issuecomment-461481500,2 unused parameter warnings and a few parameters that should be 'const'.,"Aah, thanks, I forgot the C constraint (I guess const_cast<> didn't work so well :)",True,{}
nothings/stb,https://github.com/nothings/stb,698,2019-01-23T13:59:05Z,2019-02-07T07:39:51Z,2019-02-07T07:39:51Z,CLOSED,False,1,1,1,https://github.com/jdupuy,hdr export segfault fix,1,"['2 bug', 'duplicate', '1 stb_image_write']",https://github.com/nothings/stb/pull/698,https://github.com/jdupuy,1,https://github.com/nothings/stb/pull/698,The width of the image is used twice to offset the data causing a segfault when writing an hdr image. This commit fixes the issue.,The width of the image is used twice to offset the data causing a segfault when writing an hdr image. This commit fixes the issue.,True,{}
nothings/stb,https://github.com/nothings/stb,699,2019-01-29T06:44:07Z,2019-02-07T16:53:39Z,2019-03-05T08:01:58Z,CLOSED,False,1,1,1,https://github.com/Nuk510,Silence warning 'tc' may be used uninitialized in this function,1,"['1 stb_image', '2 good-no changes needed', '2 warning']",https://github.com/nothings/stb/pull/699,https://github.com/Nuk510,1,https://github.com/nothings/stb/pull/699,,,True,{}
nothings/stb,https://github.com/nothings/stb,699,2019-01-29T06:44:07Z,2019-02-07T16:53:39Z,2019-03-05T08:01:58Z,CLOSED,False,1,1,1,https://github.com/Nuk510,Silence warning 'tc' may be used uninitialized in this function,1,"['1 stb_image', '2 good-no changes needed', '2 warning']",https://github.com/nothings/stb/pull/699,https://github.com/nothings,2,https://github.com/nothings/stb/pull/699#issuecomment-461508323,,merged in next release,True,{}
nothings/stb,https://github.com/nothings/stb,703,2019-02-07T00:48:56Z,2019-02-07T08:20:00Z,2019-02-07T18:05:11Z,CLOSED,False,4,1,1,https://github.com/scramsby,Fix build warning in stb_truetype.h when asserts are disabled,1,"['duplicate', '1 stb_truetype', '2 warning']",https://github.com/nothings/stb/pull/703,https://github.com/scramsby,1,https://github.com/nothings/stb/pull/703,,,True,{}
nothings/stb,https://github.com/nothings/stb,703,2019-02-07T00:48:56Z,2019-02-07T08:20:00Z,2019-02-07T18:05:11Z,CLOSED,False,4,1,1,https://github.com/scramsby,Fix build warning in stb_truetype.h when asserts are disabled,1,"['duplicate', '1 stb_truetype', '2 warning']",https://github.com/nothings/stb/pull/703,https://github.com/nothings,2,https://github.com/nothings/stb/pull/703#issuecomment-461316066,,Note to self: remove the variable entirely and move computation into assert.,True,{}
nothings/stb,https://github.com/nothings/stb,703,2019-02-07T00:48:56Z,2019-02-07T08:20:00Z,2019-02-07T18:05:11Z,CLOSED,False,4,1,1,https://github.com/scramsby,Fix build warning in stb_truetype.h when asserts are disabled,1,"['duplicate', '1 stb_truetype', '2 warning']",https://github.com/nothings/stb/pull/703,https://github.com/nothings,3,https://github.com/nothings/stb/pull/703#issuecomment-461325609,,"Actually, this is a dupe of #571, thanks though!",True,{}
nothings/stb,https://github.com/nothings/stb,704,2019-02-07T17:43:53Z,2021-07-07T03:41:56Z,2021-07-07T03:41:56Z,CLOSED,False,0,5,2,https://github.com/ocornut,Fix minor warnings emitted by PVS Studio.,1,"['2 bug', '1 stb_truetype']",https://github.com/nothings/stb/pull/704,https://github.com/ocornut,1,https://github.com/nothings/stb/pull/704,"Fix 3 warnings emitted by PVS Studio static analyzer for Visual Studio.
in stb_textedit.h:

variable i is assigned twice.

in stb_truetype.h

variable classDefTable assigned but never used afterwards.
Those assignments might be useful documentation in case of further modifications, and may be commented out instead.

(
FYI there are a dozen more warnings emitted by PVS Studio, the others being mostly false positive or less obvious to fix. Therefore those 3 fixes are a little superfluous in the sense that a user of PVS Studio will stumble on more. I can paste you the other warnings if you want.
PVS Studio offers free licence for open-source developers:
https://www.viva64.com/en/open-source-license/
)","Fix 3 warnings emitted by PVS Studio static analyzer for Visual Studio.
in stb_textedit.h:

variable i is assigned twice.

in stb_truetype.h

variable classDefTable assigned but never used afterwards.
Those assignments might be useful documentation in case of further modifications, and may be commented out instead.

(
FYI there are a dozen more warnings emitted by PVS Studio, the others being mostly false positive or less obvious to fix. Therefore those 3 fixes are a little superfluous in the sense that a user of PVS Studio will stumble on more. I can paste you the other warnings if you want.
PVS Studio offers free licence for open-source developers:
https://www.viva64.com/en/open-source-license/
)",True,{}
nothings/stb,https://github.com/nothings/stb,704,2019-02-07T17:43:53Z,2021-07-07T03:41:56Z,2021-07-07T03:41:56Z,CLOSED,False,0,5,2,https://github.com/ocornut,Fix minor warnings emitted by PVS Studio.,1,"['2 bug', '1 stb_truetype']",https://github.com/nothings/stb/pull/704,https://github.com/nothings,2,https://github.com/nothings/stb/pull/704#issuecomment-461535096,"Fix 3 warnings emitted by PVS Studio static analyzer for Visual Studio.
in stb_textedit.h:

variable i is assigned twice.

in stb_truetype.h

variable classDefTable assigned but never used afterwards.
Those assignments might be useful documentation in case of further modifications, and may be commented out instead.

(
FYI there are a dozen more warnings emitted by PVS Studio, the others being mostly false positive or less obvious to fix. Therefore those 3 fixes are a little superfluous in the sense that a user of PVS Studio will stumble on more. I can paste you the other warnings if you want.
PVS Studio offers free licence for open-source developers:
https://www.viva64.com/en/open-source-license/
)","The stb_textedit one is already fixed locally from another PR.
The stb_truetype one look like it might be an incomplete implementation? It's not my code, so I'll have to dig into the table documentation and see what might be going on there. Leaving this PR open to stand in for an equivalent issue.",True,{'THUMBS_UP': ['https://github.com/ocornut']}
nothings/stb,https://github.com/nothings/stb,704,2019-02-07T17:43:53Z,2021-07-07T03:41:56Z,2021-07-07T03:41:56Z,CLOSED,False,0,5,2,https://github.com/ocornut,Fix minor warnings emitted by PVS Studio.,1,"['2 bug', '1 stb_truetype']",https://github.com/nothings/stb/pull/704,https://github.com/rygorous,3,https://github.com/nothings/stb/pull/704#issuecomment-875249375,"Fix 3 warnings emitted by PVS Studio static analyzer for Visual Studio.
in stb_textedit.h:

variable i is assigned twice.

in stb_truetype.h

variable classDefTable assigned but never used afterwards.
Those assignments might be useful documentation in case of further modifications, and may be commented out instead.

(
FYI there are a dozen more warnings emitted by PVS Studio, the others being mostly false positive or less obvious to fix. Therefore those 3 fixes are a little superfluous in the sense that a user of PVS Studio will stumble on more. I can paste you the other warnings if you want.
PVS Studio offers free licence for open-source developers:
https://www.viva64.com/en/open-source-license/
)","There was nothing missing there (see https://docs.microsoft.com/en-us/typography/opentype/spec/chapter2#classDefTbl).
Removed those assignments in the dev branch, will be in the next release.",True,{}
nothings/stb,https://github.com/nothings/stb,708,2019-02-11T20:39:23Z,2019-02-25T19:14:05Z,2019-03-05T08:01:17Z,CLOSED,False,4,4,1,https://github.com/lamarqua,Remove trailing whitespace after backslash,2,[],https://github.com/nothings/stb/pull/708,https://github.com/lamarqua,1,https://github.com/nothings/stb/pull/708,"Remove trailing whitespace after backslash in stb_truetype.h that causes warnings on clang and GCC
""backslash and newline separated by space [-Wblackslash-newline-escape]""
Fixes #707","Remove trailing whitespace after backslash in stb_truetype.h that causes warnings on clang and GCC
""backslash and newline separated by space [-Wblackslash-newline-escape]""
Fixes #707",True,{}
nothings/stb,https://github.com/nothings/stb,708,2019-02-11T20:39:23Z,2019-02-25T19:14:05Z,2019-03-05T08:01:17Z,CLOSED,False,4,4,1,https://github.com/lamarqua,Remove trailing whitespace after backslash,2,[],https://github.com/nothings/stb/pull/708,https://github.com/nothings,2,https://github.com/nothings/stb/pull/708#issuecomment-462492026,"Remove trailing whitespace after backslash in stb_truetype.h that causes warnings on clang and GCC
""backslash and newline separated by space [-Wblackslash-newline-escape]""
Fixes #707","This isn't usable, as it will cause warnings on other compilers which complain about comments ending in backslash (which is why the trailing whitespace was added originally). This is why #707 suggested eliminating the backslash entirely.",True,{}
nothings/stb,https://github.com/nothings/stb,708,2019-02-11T20:39:23Z,2019-02-25T19:14:05Z,2019-03-05T08:01:17Z,CLOSED,False,4,4,1,https://github.com/lamarqua,Remove trailing whitespace after backslash,2,[],https://github.com/nothings/stb/pull/708,https://github.com/lamarqua,3,https://github.com/nothings/stb/pull/708#issuecomment-464283482,"Remove trailing whitespace after backslash in stb_truetype.h that causes warnings on clang and GCC
""backslash and newline separated by space [-Wblackslash-newline-escape]""
Fixes #707","This is a slight variation, I've just added some filler ... which are visually light and should fix both cases of trailing whitespace after backslash and backslash in comment. If you prefer I can also just remove the backslashes and use | and +.",True,{}
nothings/stb,https://github.com/nothings/stb,708,2019-02-11T20:39:23Z,2019-02-25T19:14:05Z,2019-03-05T08:01:17Z,CLOSED,False,4,4,1,https://github.com/lamarqua,Remove trailing whitespace after backslash,2,[],https://github.com/nothings/stb/pull/708,https://github.com/nothings,4,https://github.com/nothings/stb/pull/708#issuecomment-467142260,"Remove trailing whitespace after backslash in stb_truetype.h that causes warnings on clang and GCC
""backslash and newline separated by space [-Wblackslash-newline-escape]""
Fixes #707",I've just deleted the section entirely as it was out of date anyway.,True,{'THUMBS_UP': ['https://github.com/lamarqua']}
nothings/stb,https://github.com/nothings/stb,710,2019-02-13T14:54:26Z,2020-02-02T15:58:36Z,2020-02-02T15:58:37Z,CLOSED,False,8,4,1,https://github.com/stefano-zanotti-88,stb_sprintf: support for 'hh' modifier,1,"['4 enhancement', '1 stb_sprintf']",https://github.com/nothings/stb/pull/710,https://github.com/stefano-zanotti-88,1,https://github.com/nothings/stb/pull/710,"The following code is now supported:
#include <inttypes.h>
char buff[3];
stbsp_snprintf(buff, sizeof(buff), ""%"" PRIX8, (uint8_t)0xAB); // the format string expands to ""%hhX""","The following code is now supported:
#include <inttypes.h>
char buff[3];
stbsp_snprintf(buff, sizeof(buff), ""%"" PRIX8, (uint8_t)0xAB); // the format string expands to ""%hhX""",True,{}
nothings/stb,https://github.com/nothings/stb,710,2019-02-13T14:54:26Z,2020-02-02T15:58:36Z,2020-02-02T15:58:37Z,CLOSED,False,8,4,1,https://github.com/stefano-zanotti-88,stb_sprintf: support for 'hh' modifier,1,"['4 enhancement', '1 stb_sprintf']",https://github.com/nothings/stb/pull/710,https://github.com/nothings,2,https://github.com/nothings/stb/pull/710#issuecomment-581148922,"The following code is now supported:
#include <inttypes.h>
char buff[3];
stbsp_snprintf(buff, sizeof(buff), ""%"" PRIX8, (uint8_t)0xAB); // the format string expands to ""%hhX""",I manually added the 'hh' support without removing the HALFWIDTH tracking just to minimize the changes.,True,{}
nothings/stb,https://github.com/nothings/stb,712,2019-02-18T15:56:11Z,2019-02-25T19:49:36Z,2019-02-25T19:50:10Z,MERGED,True,6,5,1,https://github.com/flibitijibibo,stb.h rand: A few more long->int fixes,1,[],https://github.com/nothings/stb/pull/712,https://github.com/flibitijibibo,1,https://github.com/nothings/stb/pull/712,"Continuing on the changes made in d85e594, this replaces the rest of the unsigned longs with unsigned ints in the stb_rand implementation.","Continuing on the changes made in d85e594, this replaces the rest of the unsigned longs with unsigned ints in the stb_rand implementation.",True,{}
nothings/stb,https://github.com/nothings/stb,712,2019-02-18T15:56:11Z,2019-02-25T19:49:36Z,2019-02-25T19:50:10Z,MERGED,True,6,5,1,https://github.com/flibitijibibo,stb.h rand: A few more long->int fixes,1,[],https://github.com/nothings/stb/pull/712,https://github.com/nothings,2,https://github.com/nothings/stb/pull/712#issuecomment-467141731,"Continuing on the changes made in d85e594, this replaces the rest of the unsigned longs with unsigned ints in the stb_rand implementation.",Thanks!,True,{}
nothings/stb,https://github.com/nothings/stb,713,2019-02-19T22:32:25Z,2019-02-19T22:35:43Z,2019-03-05T08:01:04Z,CLOSED,False,4,0,1,https://github.com/JerwuQu,stretchy_buffer: Add sb_clear,1,['duplicate'],https://github.com/nothings/stb/pull/713,https://github.com/JerwuQu,1,https://github.com/nothings/stb/pull/713,I needed this for one of my hobby projects :),I needed this for one of my hobby projects :),True,{}
nothings/stb,https://github.com/nothings/stb,713,2019-02-19T22:32:25Z,2019-02-19T22:35:43Z,2019-03-05T08:01:04Z,CLOSED,False,4,0,1,https://github.com/JerwuQu,stretchy_buffer: Add sb_clear,1,['duplicate'],https://github.com/nothings/stb/pull/713,https://github.com/JerwuQu,2,https://github.com/nothings/stb/pull/713#issuecomment-465339330,I needed this for one of my hobby projects :),"Whoops, duplicate of #35",True,{}
nothings/stb,https://github.com/nothings/stb,714,2019-02-21T18:47:59Z,2019-02-21T20:06:35Z,2019-03-05T08:00:55Z,CLOSED,False,902,488,22,https://github.com/rpvelloso,"Support for custom stream using callbacks (i.e., C++ std::istream)",88,[],https://github.com/nothings/stb/pull/714,https://github.com/rpvelloso,1,https://github.com/nothings/stb/pull/714,"added stb_vorbis_open() to the API. This function receives a stream handle and four callbacks to manipulate a custom stream fgetc_cb, fseek_cb, ftell_cb, fread_cb. The stream is not closed along with decoder handler.


stb_vorbis_open_file()/filename()/file_section() are all using above callbacks with default values (i.e., stdio's fgetc, fseek, ftell, fread, fclose). There is an overload to mantain the existing API interface without callbacks as parameters.


supressed USE_MEMORY() as this is no longer necessary, the callbacks are set when a handler is created.


As an example, I'm using the callback open() to play from an C++ std::istream with the following callbacks supplied as parameters:


int fgetc_cb(void *h) {
	auto stream = (std::istream *)h;
	return stream->get();
}

int fseek_cb(void *h, long int off, int dir) {
	auto stream = (std::istream *)h;
	stream->seekg(off, (std::ios_base::seekdir)dir);
	return 0;
}

long int ftell_cb(void *h) {
	auto stream = (std::istream *)h;
	return stream->tellg();
}

size_t fread_cb(void *buf, size_t len, size_t count, void *h) {
	auto stream = (std::istream *)h;
	size_t ret = stream->read((char *)buf, len*count).gcount();
	return ret == (len*count)?count:0;
}

auto stream = std::fstream(""filename.ogg"", std::ios::binary|std::ios::in);
auto stbvHandle = stb_vorbis_open(&stream, &err, nullptr, fgetc_cb, fseek_cb, ftell_cb, fread_cb);","added stb_vorbis_open() to the API. This function receives a stream handle and four callbacks to manipulate a custom stream fgetc_cb, fseek_cb, ftell_cb, fread_cb. The stream is not closed along with decoder handler.


stb_vorbis_open_file()/filename()/file_section() are all using above callbacks with default values (i.e., stdio's fgetc, fseek, ftell, fread, fclose). There is an overload to mantain the existing API interface without callbacks as parameters.


supressed USE_MEMORY() as this is no longer necessary, the callbacks are set when a handler is created.


As an example, I'm using the callback open() to play from an C++ std::istream with the following callbacks supplied as parameters:


int fgetc_cb(void *h) {
	auto stream = (std::istream *)h;
	return stream->get();
}

int fseek_cb(void *h, long int off, int dir) {
	auto stream = (std::istream *)h;
	stream->seekg(off, (std::ios_base::seekdir)dir);
	return 0;
}

long int ftell_cb(void *h) {
	auto stream = (std::istream *)h;
	return stream->tellg();
}

size_t fread_cb(void *buf, size_t len, size_t count, void *h) {
	auto stream = (std::istream *)h;
	size_t ret = stream->read((char *)buf, len*count).gcount();
	return ret == (len*count)?count:0;
}

auto stream = std::fstream(""filename.ogg"", std::ios::binary|std::ios::in);
auto stbvHandle = stb_vorbis_open(&stream, &err, nullptr, fgetc_cb, fseek_cb, ftell_cb, fread_cb);",True,{}
nothings/stb,https://github.com/nothings/stb,714,2019-02-21T18:47:59Z,2019-02-21T20:06:35Z,2019-03-05T08:00:55Z,CLOSED,False,902,488,22,https://github.com/rpvelloso,"Support for custom stream using callbacks (i.e., C++ std::istream)",88,[],https://github.com/nothings/stb/pull/714,https://github.com/rpvelloso,2,https://github.com/nothings/stb/pull/714#issuecomment-466139834,"added stb_vorbis_open() to the API. This function receives a stream handle and four callbacks to manipulate a custom stream fgetc_cb, fseek_cb, ftell_cb, fread_cb. The stream is not closed along with decoder handler.


stb_vorbis_open_file()/filename()/file_section() are all using above callbacks with default values (i.e., stdio's fgetc, fseek, ftell, fread, fclose). There is an overload to mantain the existing API interface without callbacks as parameters.


supressed USE_MEMORY() as this is no longer necessary, the callbacks are set when a handler is created.


As an example, I'm using the callback open() to play from an C++ std::istream with the following callbacks supplied as parameters:


int fgetc_cb(void *h) {
	auto stream = (std::istream *)h;
	return stream->get();
}

int fseek_cb(void *h, long int off, int dir) {
	auto stream = (std::istream *)h;
	stream->seekg(off, (std::ios_base::seekdir)dir);
	return 0;
}

long int ftell_cb(void *h) {
	auto stream = (std::istream *)h;
	return stream->tellg();
}

size_t fread_cb(void *buf, size_t len, size_t count, void *h) {
	auto stream = (std::istream *)h;
	size_t ret = stream->read((char *)buf, len*count).gcount();
	return ret == (len*count)?count:0;
}

auto stream = std::fstream(""filename.ogg"", std::ios::binary|std::ios::in);
auto stbvHandle = stb_vorbis_open(&stream, &err, nullptr, fgetc_cb, fseek_cb, ftell_cb, fread_cb);","I have changed a single file from master branch, only: 55f2934
Don't know why all those commits are showing here.",True,{}
nothings/stb,https://github.com/nothings/stb,715,2019-02-21T20:12:30Z,2019-02-23T10:52:34Z,2019-03-05T08:00:27Z,CLOSED,False,266,190,1,https://github.com/rpvelloso,"Support for custom stream using callbacks (i.e., C++ std::istream)",1,[],https://github.com/nothings/stb/pull/715,https://github.com/rpvelloso,1,https://github.com/nothings/stb/pull/715,"added stb_vorbis_open() to the API. This function receives a stream handle and four callbacks to manipulate a custom stream fgetc_cb, fseek_cb, ftell_cb, fread_cb. The stream is not closed along with decoder handler.


stb_vorbis_open_file()/filename()/file_section() are all using above callbacks with default values (i.e., stdio's fgetc, fseek, ftell, fread, fclose). There is an overload to mantain the existing API interface without callbacks as parameters.


supressed USE_MEMORY() as this is no longer necessary, the callbacks are set when a handler is created.


As an example, I'm using the callback open() to play from an C++ std::istream with the following callbacks supplied as parameters:


int fgetc_cb(void *h) {
	auto stream = (std::istream *)h;
	return stream->get();
}

int fseek_cb(void *h, long int off, int dir) {
	auto stream = (std::istream *)h;
	stream->seekg(off, (std::ios_base::seekdir)dir);
	return 0;
}

long int ftell_cb(void *h) {
	auto stream = (std::istream *)h;
	return stream->tellg();
}

size_t fread_cb(void *buf, size_t len, size_t count, void *h) {
	auto stream = (std::istream *)h;
	size_t ret = stream->read((char *)buf, len*count).gcount();
	return ret == (len*count)?count:0;
}

auto stream = std::fstream(""filename.ogg"", std::ios::binary|std::ios::in);
auto stbvHandle = stb_vorbis_open(&stream, &err, nullptr, fgetc_cb, fseek_cb, ftell_cb, fread_cb);","added stb_vorbis_open() to the API. This function receives a stream handle and four callbacks to manipulate a custom stream fgetc_cb, fseek_cb, ftell_cb, fread_cb. The stream is not closed along with decoder handler.


stb_vorbis_open_file()/filename()/file_section() are all using above callbacks with default values (i.e., stdio's fgetc, fseek, ftell, fread, fclose). There is an overload to mantain the existing API interface without callbacks as parameters.


supressed USE_MEMORY() as this is no longer necessary, the callbacks are set when a handler is created.


As an example, I'm using the callback open() to play from an C++ std::istream with the following callbacks supplied as parameters:


int fgetc_cb(void *h) {
	auto stream = (std::istream *)h;
	return stream->get();
}

int fseek_cb(void *h, long int off, int dir) {
	auto stream = (std::istream *)h;
	stream->seekg(off, (std::ios_base::seekdir)dir);
	return 0;
}

long int ftell_cb(void *h) {
	auto stream = (std::istream *)h;
	return stream->tellg();
}

size_t fread_cb(void *buf, size_t len, size_t count, void *h) {
	auto stream = (std::istream *)h;
	size_t ret = stream->read((char *)buf, len*count).gcount();
	return ret == (len*count)?count:0;
}

auto stream = std::fstream(""filename.ogg"", std::ios::binary|std::ios::in);
auto stbvHandle = stb_vorbis_open(&stream, &err, nullptr, fgetc_cb, fseek_cb, ftell_cb, fread_cb);",True,{}
nothings/stb,https://github.com/nothings/stb,715,2019-02-21T20:12:30Z,2019-02-23T10:52:34Z,2019-03-05T08:00:27Z,CLOSED,False,266,190,1,https://github.com/rpvelloso,"Support for custom stream using callbacks (i.e., C++ std::istream)",1,[],https://github.com/nothings/stb/pull/715,https://github.com/rygorous,2,https://github.com/nothings/stb/pull/715#issuecomment-466638241,"added stb_vorbis_open() to the API. This function receives a stream handle and four callbacks to manipulate a custom stream fgetc_cb, fseek_cb, ftell_cb, fread_cb. The stream is not closed along with decoder handler.


stb_vorbis_open_file()/filename()/file_section() are all using above callbacks with default values (i.e., stdio's fgetc, fseek, ftell, fread, fclose). There is an overload to mantain the existing API interface without callbacks as parameters.


supressed USE_MEMORY() as this is no longer necessary, the callbacks are set when a handler is created.


As an example, I'm using the callback open() to play from an C++ std::istream with the following callbacks supplied as parameters:


int fgetc_cb(void *h) {
	auto stream = (std::istream *)h;
	return stream->get();
}

int fseek_cb(void *h, long int off, int dir) {
	auto stream = (std::istream *)h;
	stream->seekg(off, (std::ios_base::seekdir)dir);
	return 0;
}

long int ftell_cb(void *h) {
	auto stream = (std::istream *)h;
	return stream->tellg();
}

size_t fread_cb(void *buf, size_t len, size_t count, void *h) {
	auto stream = (std::istream *)h;
	size_t ret = stream->read((char *)buf, len*count).gcount();
	return ret == (len*count)?count:0;
}

auto stream = std::fstream(""filename.ogg"", std::ios::binary|std::ios::in);
auto stbvHandle = stb_vorbis_open(&stream, &err, nullptr, fgetc_cb, fseek_cb, ftell_cb, fread_cb);","Your heart's in the right place, but please don't submit big pull requests adding major features without asking first (and getting the design reviewed). In this particular instance we've gotten a very similar pull request before, and I rejected it for reasons that apply equally to this one:
#456
In this particular instance, while replacing the load-from-memory paths with a generic implementation is the right direction, it is still not OK for get8 to invoke a callback every time. A suitable replacement needs to have some buffering on the stb_vorbis side and only invoke a ""refill"" callback when its local buffer space runs out, not call back every single time.
stb_image already has an internal buffering layer of that sort that shows how it works: https://github.com/nothings/stb/blob/master/stb_image.h#L1448 - and while I'm mentioning stb_image, I think a pluggable IO interface should be similar or identical to stb_image's stbi_io_callbacks (https://github.com/nothings/stb/blob/master/stb_image.h#L356) if at all possible.",True,{}
nothings/stb,https://github.com/nothings/stb,715,2019-02-21T20:12:30Z,2019-02-23T10:52:34Z,2019-03-05T08:00:27Z,CLOSED,False,266,190,1,https://github.com/rpvelloso,"Support for custom stream using callbacks (i.e., C++ std::istream)",1,[],https://github.com/nothings/stb/pull/715,https://github.com/rpvelloso,3,https://github.com/nothings/stb/pull/715#issuecomment-467147880,"added stb_vorbis_open() to the API. This function receives a stream handle and four callbacks to manipulate a custom stream fgetc_cb, fseek_cb, ftell_cb, fread_cb. The stream is not closed along with decoder handler.


stb_vorbis_open_file()/filename()/file_section() are all using above callbacks with default values (i.e., stdio's fgetc, fseek, ftell, fread, fclose). There is an overload to mantain the existing API interface without callbacks as parameters.


supressed USE_MEMORY() as this is no longer necessary, the callbacks are set when a handler is created.


As an example, I'm using the callback open() to play from an C++ std::istream with the following callbacks supplied as parameters:


int fgetc_cb(void *h) {
	auto stream = (std::istream *)h;
	return stream->get();
}

int fseek_cb(void *h, long int off, int dir) {
	auto stream = (std::istream *)h;
	stream->seekg(off, (std::ios_base::seekdir)dir);
	return 0;
}

long int ftell_cb(void *h) {
	auto stream = (std::istream *)h;
	return stream->tellg();
}

size_t fread_cb(void *buf, size_t len, size_t count, void *h) {
	auto stream = (std::istream *)h;
	size_t ret = stream->read((char *)buf, len*count).gcount();
	return ret == (len*count)?count:0;
}

auto stream = std::fstream(""filename.ogg"", std::ios::binary|std::ios::in);
auto stbvHandle = stb_vorbis_open(&stream, &err, nullptr, fgetc_cb, fseek_cb, ftell_cb, fread_cb);","@rygorous, using callbacks the user can do the caching as he/she sees fit. IMHO caching is not a decoder responsibility. Anyway, caching is just another layer on top of this PR, I think this is a step further in the right direction.",True,{}
nothings/stb,https://github.com/nothings/stb,716,2019-02-22T22:17:47Z,2019-02-24T12:30:52Z,2019-02-25T03:42:10Z,CLOSED,False,4,4,1,https://github.com/zellski,Fix recent optimisation; bring back pre-existing logic.,1,[],https://github.com/nothings/stb/pull/716,https://github.com/zellski,1,https://github.com/nothings/stb/pull/716,"It seems to me that e5d4d6f#diff-469d4cb48b9965801e6c8cb7b92e46fe introduced a logic issue, by repeatedly incrementing p? InI now see reproducible SIGSEVs. This fix, while likely suboptimal, does at least revert the regression.","It seems to me that e5d4d6f#diff-469d4cb48b9965801e6c8cb7b92e46fe introduced a logic issue, by repeatedly incrementing p? InI now see reproducible SIGSEVs. This fix, while likely suboptimal, does at least revert the regression.",True,{}
nothings/stb,https://github.com/nothings/stb,716,2019-02-22T22:17:47Z,2019-02-24T12:30:52Z,2019-02-25T03:42:10Z,CLOSED,False,4,4,1,https://github.com/zellski,Fix recent optimisation; bring back pre-existing logic.,1,[],https://github.com/nothings/stb/pull/716,https://github.com/nothings,2,https://github.com/nothings/stb/pull/716#issuecomment-466769904,"It seems to me that e5d4d6f#diff-469d4cb48b9965801e6c8cb7b92e46fe introduced a logic issue, by repeatedly incrementing p? InI now see reproducible SIGSEVs. This fix, while likely suboptimal, does at least revert the regression.",Duplicate of #719,True,{}
nothings/stb,https://github.com/nothings/stb,719,2019-02-23T13:20:48Z,2019-02-25T19:49:36Z,2019-03-02T02:46:17Z,MERGED,True,57,8,3,https://github.com/rygorous,Fix issue 706,2,[],https://github.com/nothings/stb/pull/719,https://github.com/rygorous,1,https://github.com/nothings/stb/pull/719,"Also adding a simple tester app to hopefully reduce this kind of breakage in the future.
(This test works on x64 Linux using clang 7.0.0 with no ASan warnings.)","Also adding a simple tester app to hopefully reduce this kind of breakage in the future.
(This test works on x64 Linux using clang 7.0.0 with no ASan warnings.)",True,{}
nothings/stb,https://github.com/nothings/stb,719,2019-02-23T13:20:48Z,2019-02-25T19:49:36Z,2019-03-02T02:46:17Z,MERGED,True,57,8,3,https://github.com/rygorous,Fix issue 706,2,[],https://github.com/nothings/stb/pull/719,https://github.com/rygorous,2,https://github.com/nothings/stb/pull/719#issuecomment-466648494,"Also adding a simple tester app to hopefully reduce this kind of breakage in the future.
(This test works on x64 Linux using clang 7.0.0 with no ASan warnings.)",Fixes #706.,True,{}
nothings/stb,https://github.com/nothings/stb,719,2019-02-23T13:20:48Z,2019-02-25T19:49:36Z,2019-03-02T02:46:17Z,MERGED,True,57,8,3,https://github.com/rygorous,Fix issue 706,2,[],https://github.com/nothings/stb/pull/719,https://github.com/nothings,3,https://github.com/nothings/stb/pull/719#issuecomment-466658551,"Also adding a simple tester app to hopefully reduce this kind of breakage in the future.
(This test works on x64 Linux using clang 7.0.0 with no ASan warnings.)","FWIW, there's already a test that reads and writes images with stb_image / stb_image_write, I apparently just forgot to run it after making these changes: https://github.com/nothings/stb/blob/master/tests/image_test.c",True,{}
nothings/stb,https://github.com/nothings/stb,719,2019-02-23T13:20:48Z,2019-02-25T19:49:36Z,2019-03-02T02:46:17Z,MERGED,True,57,8,3,https://github.com/rygorous,Fix issue 706,2,[],https://github.com/nothings/stb/pull/719,https://github.com/nothings,4,https://github.com/nothings/stb/pull/719#issuecomment-466658673,"Also adding a simple tester app to hopefully reduce this kind of breakage in the future.
(This test works on x64 Linux using clang 7.0.0 with no ASan warnings.)","Oh, no, the bug is that that test doesn't write jpgs, because I never updated this after adding the jpeg writer.",True,{}
nothings/stb,https://github.com/nothings/stb,719,2019-02-23T13:20:48Z,2019-02-25T19:49:36Z,2019-03-02T02:46:17Z,MERGED,True,57,8,3,https://github.com/rygorous,Fix issue 706,2,[],https://github.com/nothings/stb/pull/719,https://github.com/rygorous,5,https://github.com/nothings/stb/pull/719#issuecomment-466661303,"Also adding a simple tester app to hopefully reduce this kind of breakage in the future.
(This test works on x64 Linux using clang 7.0.0 with no ASan warnings.)","I modeled the naming of the new test program after the existing image_test but
a) I didn't actually have a handy image to start from on hand (and either way I would prefer something self-contained)
b) the image_test doesn't exercise the vertical flipping which has been the source of problems in the past
and the new test solves both of these issues. :)",True,{}
nothings/stb,https://github.com/nothings/stb,719,2019-02-23T13:20:48Z,2019-02-25T19:49:36Z,2019-03-02T02:46:17Z,MERGED,True,57,8,3,https://github.com/rygorous,Fix issue 706,2,[],https://github.com/nothings/stb/pull/719,https://github.com/nothings,6,https://github.com/nothings/stb/pull/719#issuecomment-466665485,"Also adding a simple tester app to hopefully reduce this kind of breakage in the future.
(This test works on x64 Linux using clang 7.0.0 with no ASan warnings.)","Makes sense. (I have a whole test suite of images, but I don't have rights to put them on github unfortunately.)",True,{}
nothings/stb,https://github.com/nothings/stb,720,2019-02-23T13:26:56Z,2019-02-25T19:49:36Z,2019-03-02T02:46:08Z,MERGED,True,1,1,1,https://github.com/rygorous,stb_image: Fix typo in comment.,1,[],https://github.com/nothings/stb/pull/720,https://github.com/rygorous,1,https://github.com/nothings/stb/pull/720,Fixes issue #705.,Fixes issue #705.,True,{}
nothings/stb,https://github.com/nothings/stb,721,2019-02-23T13:34:21Z,2019-02-24T12:28:08Z,2019-03-05T07:58:32Z,CLOSED,False,6,6,1,https://github.com/rygorous,stb_truetype: Fix warning in comment.,1,[],https://github.com/nothings/stb/pull/721,https://github.com/rygorous,1,https://github.com/nothings/stb/pull/721,"Replace ASCII art with slightly crappier ASCII art that is not
going to make compilers complain about trailing backslashes.
Fixes issue #707.","Replace ASCII art with slightly crappier ASCII art that is not
going to make compilers complain about trailing backslashes.
Fixes issue #707.",True,{}
nothings/stb,https://github.com/nothings/stb,721,2019-02-23T13:34:21Z,2019-02-24T12:28:08Z,2019-03-05T07:58:32Z,CLOSED,False,6,6,1,https://github.com/rygorous,stb_truetype: Fix warning in comment.,1,[],https://github.com/nothings/stb/pull/721,https://github.com/nothings,2,https://github.com/nothings/stb/pull/721#issuecomment-466769710,"Replace ASCII art with slightly crappier ASCII art that is not
going to make compilers complain about trailing backslashes.
Fixes issue #707.",Those comments were so out of date and so irrelevant anyway I just deleted them.,True,{}
nothings/stb,https://github.com/nothings/stb,722,2019-02-23T13:49:18Z,2019-02-25T19:49:37Z,2019-03-02T02:45:53Z,MERGED,True,9,1,1,https://github.com/rygorous,stb_rect_pack: Fix two bugs.,1,[],https://github.com/nothings/stb/pull/722,https://github.com/rygorous,1,https://github.com/nothings/stb/pull/722,"stbrp__skyline_find_best_pos didn't correctly handle rects too
large to ever fit inside the context. Since that function also
pads the width up to a multiple of the alignment, it makes the
most sense to do that check right after (but before entering
the main packing loop).
While we're here, also fix an off-by-1 bug in the best-fit
heuristic where it didn't want to use the last row in
certain cases.
Fixes issue #701.","stbrp__skyline_find_best_pos didn't correctly handle rects too
large to ever fit inside the context. Since that function also
pads the width up to a multiple of the alignment, it makes the
most sense to do that check right after (but before entering
the main packing loop).
While we're here, also fix an off-by-1 bug in the best-fit
heuristic where it didn't want to use the last row in
certain cases.
Fixes issue #701.",True,{}
nothings/stb,https://github.com/nothings/stb,723,2019-02-26T12:38:36Z,2019-03-04T23:12:28Z,2019-03-05T11:39:20Z,MERGED,True,4,1,1,https://github.com/rsachetto,Add arrpop function to stb_ds,2,['1 stb_ds'],https://github.com/nothings/stb/pull/723,https://github.com/rsachetto,1,https://github.com/nothings/stb/pull/723,Small documentation correction on the stb_ds.h,Small documentation correction on the stb_ds.h,True,{}
nothings/stb,https://github.com/nothings/stb,723,2019-02-26T12:38:36Z,2019-03-04T23:12:28Z,2019-03-05T11:39:20Z,MERGED,True,4,1,1,https://github.com/rsachetto,Add arrpop function to stb_ds,2,['1 stb_ds'],https://github.com/nothings/stb/pull/723,https://github.com/nothings,2,https://github.com/nothings/stb/pull/723#issuecomment-469458104,Small documentation correction on the stb_ds.h,"This was a code change, not a document change, but I couldn't actually find anywhere this was documented? But it's worth adding regardless.",True,{}
nothings/stb,https://github.com/nothings/stb,723,2019-02-26T12:38:36Z,2019-03-04T23:12:28Z,2019-03-05T11:39:20Z,MERGED,True,4,1,1,https://github.com/rsachetto,Add arrpop function to stb_ds,2,['1 stb_ds'],https://github.com/nothings/stb/pull/723,https://github.com/nothings,3,https://github.com/nothings/stb/pull/723#issuecomment-469458393,Small documentation correction on the stb_ds.h,"Oh I see, it's both a documentation change and an unrelated addition--you probably didn't realize you were updating the pull request. I'll take it anyway.",True,{}
nothings/stb,https://github.com/nothings/stb,723,2019-02-26T12:38:36Z,2019-03-04T23:12:28Z,2019-03-05T11:39:20Z,MERGED,True,4,1,1,https://github.com/rsachetto,Add arrpop function to stb_ds,2,['1 stb_ds'],https://github.com/nothings/stb/pull/723,https://github.com/zao,4,https://github.com/nothings/stb/pull/723#issuecomment-469648786,Small documentation correction on the stb_ds.h,"@rsachetto To expand on Sean's note, pull requests are considering all the current and future commits to a branch, even if you didn't intend them to participate in the pull request. As your pull request is from your master, any additional work you do on it will show up in the request.
It's often hygienic to create a new branch for each pull request to keep things neat and under control.",True,"{'THUMBS_UP': ['https://github.com/nothings', 'https://github.com/rsachetto']}"
nothings/stb,https://github.com/nothings/stb,725,2019-03-02T03:23:45Z,2019-03-04T23:12:29Z,2019-03-04T23:12:29Z,MERGED,True,23,9,1,https://github.com/rygorous,stb_image: Fix multiple bugs in GIF decoder.,2,[],https://github.com/nothings/stb/pull/725,https://github.com/rygorous,1,https://github.com/nothings/stb/pull/725,"Check not just g->out allocation for failure; also make sure
that the image allocs don't overflow.
If an image descriptor specified a 0-width image, this could be
used to produce an out-of-bounds write.
Fix memory leak in case an error occurs during decoding.

Fixes issue #614.
Fixes issue #656.","Check not just g->out allocation for failure; also make sure
that the image allocs don't overflow.
If an image descriptor specified a 0-width image, this could be
used to produce an out-of-bounds write.
Fix memory leak in case an error occurs during decoding.

Fixes issue #614.
Fixes issue #656.",True,{}
nothings/stb,https://github.com/nothings/stb,726,2019-03-02T03:58:03Z,2019-03-04T23:12:29Z,2019-03-04T23:12:29Z,MERGED,True,1,1,1,https://github.com/rygorous,stb_image: Pacify some MSVC warnings.,1,[],https://github.com/nothings/stb/pull/726,https://github.com/rygorous,1,https://github.com/nothings/stb/pull/726,"Convince the compiler's dataflow analysis that yes, we are not
reading uninitialized values of coutput.
Fixes issue #608.","Convince the compiler's dataflow analysis that yes, we are not
reading uninitialized values of coutput.
Fixes issue #608.",True,{}
nothings/stb,https://github.com/nothings/stb,726,2019-03-02T03:58:03Z,2019-03-04T23:12:29Z,2019-03-04T23:12:29Z,MERGED,True,1,1,1,https://github.com/rygorous,stb_image: Pacify some MSVC warnings.,1,[],https://github.com/nothings/stb/pull/726,https://github.com/nothings,2,https://github.com/nothings/stb/pull/726#issuecomment-468881439,"Convince the compiler's dataflow analysis that yes, we are not
reading uninitialized values of coutput.
Fixes issue #608.","FWIW I have a huge suite of changes I'm in the middle of which remove all warnings from all MSVC compilers from VC6 to VS 2015 with /W2, as well as clang at -W2.
(I set up a thing last year to build everything with all the MSVC compilers I have installed, but it turned out they were building at default warning level, not /W2.)",True,{}
nothings/stb,https://github.com/nothings/stb,726,2019-03-02T03:58:03Z,2019-03-04T23:12:29Z,2019-03-04T23:12:29Z,MERGED,True,1,1,1,https://github.com/rygorous,stb_image: Pacify some MSVC warnings.,1,[],https://github.com/nothings/stb/pull/726,https://github.com/rygorous,3,https://github.com/nothings/stb/pull/726#issuecomment-469010973,"Convince the compiler's dataflow analysis that yes, we are not
reading uninitialized values of coutput.
Fixes issue #608.","I'm currently setting up fuzz testing. I did this mostly on Linux to start
with then noticed that apparently current Clang nightly has ASan +
libfuzzer support on Windows! It'll be a while before that's in a stable
release, but it seems to be working fine so far in my tests.

WIP branch at https://github.com/rygorous/stb/tree/image-fuzz, I'll turn
this into a PR once I've hammered on it a bit more (so far, mostly it just
runs out of memory or times out when files state huge sizes in their
header). That said the TGA loader legit takes around 49s (and over 2GB of
memory) to process a 48-byte file and that doesn't sit well with me; I have
a reworked TGA loader that's not quite as abysmally slow in progress (and
the reworking also results in a good place to put a ""did we have any IO
errors? If so, bail"" check) but I'm not going to turn that into a PR until
I've done a lot more testing. I want to make sure that the stuff that's in
there actually works.
…
-Fabian
On Fri, Mar 1, 2019 at 8:03 PM Sean Barrett ***@***.***> wrote:
 FWIW I have a huge suite of changes I'm in the middle of which remove all
 warnings from all MSVC compilers to 2015 with /W2, as well as clang at -W2.

 (I set up a thing last year to build everything with all the MSVC
 compilers I have installed, but it turned out they were building at default
 warning level, not /W2.)

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub
 <#726 (comment)>, or mute
 the thread
 <https://github.com/notifications/unsubscribe-auth/ABBw-NNrsmwWHpfsh4YQIOVrrUwQM1ZSks5vSfgigaJpZM4baKD3>
 .",True,{}
nothings/stb,https://github.com/nothings/stb,727,2019-03-03T16:50:09Z,2019-03-04T23:12:29Z,2019-03-04T23:12:30Z,MERGED,True,9,8,1,https://github.com/kroko,fix comma warnings when building with -Wcomma,1,[],https://github.com/nothings/stb/pull/727,https://github.com/kroko,1,https://github.com/nothings/stb/pull/727,"this fixes comma warnings when building with -Wcomma
same stuff i pulled for stb_image.h #596 😄
thanks!","this fixes comma warnings when building with -Wcomma
same stuff i pulled for stb_image.h #596 😄
thanks!",True,{}
nothings/stb,https://github.com/nothings/stb,728,2019-03-04T12:46:15Z,2020-02-02T19:28:09Z,2020-02-02T19:28:09Z,CLOSED,False,851,851,21,https://github.com/akien-mga,Remove trailing whitespace,1,[],https://github.com/nothings/stb/pull/728,https://github.com/akien-mga,1,https://github.com/nothings/stb/pull/728,"This is a suggestion for code quality, feel free to reject it if you think it's not worth the change (there are definitely pros and cons).
Many IDEs nowadays tend to automatically remove trailing whitespace on save, which can make for ugly commits downstream if you're not careful, and then ugly diffs the next time when you want to sync with upstream.
I suggest to remove all this trailing whitespace, which should have no impact on code formatting nor function. You can append ?w=1 to the GitHub diff view to ignore whitespace changes and confirm that this PR does only that: diff of this PR. (I opened and saved all files in the Kate IDE with the ""trim whitespace on save"" option enabled.)
Pros:

More readable/less visual noise in editors which display whitespace (e.g. git diff: screenshot_20190304_133912)
More readable diffs when updating versions downstream, provided that upstream takes care not to re-add trailing whitespace

Cons:

Needs some control to ensure that contributors don't readd trailing whitespace. Can be done via a check in a Travis build job (I can PR that if you're interested), and additionally prevented upfront with a pre-commit hook and/or a tool like clang-format. This can add some extra steps for contributors if they want to set up their build environment to avoid adding trailing whitespace.
This one-time change will pollute git blame as this commit will be the first blame on all lines changed here. It can be worked around with git blame -w (ignores whitespace), but not everyone knows about the option.

Files like .editorconfig can provide hints to some IDEs (didn't check which ones) about the need to trim trailing whitespace or not. See e.g. https://github.com/godotengine/godot/blob/master/.editorconfig","This is a suggestion for code quality, feel free to reject it if you think it's not worth the change (there are definitely pros and cons).
Many IDEs nowadays tend to automatically remove trailing whitespace on save, which can make for ugly commits downstream if you're not careful, and then ugly diffs the next time when you want to sync with upstream.
I suggest to remove all this trailing whitespace, which should have no impact on code formatting nor function. You can append ?w=1 to the GitHub diff view to ignore whitespace changes and confirm that this PR does only that: diff of this PR. (I opened and saved all files in the Kate IDE with the ""trim whitespace on save"" option enabled.)
Pros:

More readable/less visual noise in editors which display whitespace (e.g. git diff: screenshot_20190304_133912)
More readable diffs when updating versions downstream, provided that upstream takes care not to re-add trailing whitespace

Cons:

Needs some control to ensure that contributors don't readd trailing whitespace. Can be done via a check in a Travis build job (I can PR that if you're interested), and additionally prevented upfront with a pre-commit hook and/or a tool like clang-format. This can add some extra steps for contributors if they want to set up their build environment to avoid adding trailing whitespace.
This one-time change will pollute git blame as this commit will be the first blame on all lines changed here. It can be worked around with git blame -w (ignores whitespace), but not everyone knows about the option.

Files like .editorconfig can provide hints to some IDEs (didn't check which ones) about the need to trim trailing whitespace or not. See e.g. https://github.com/godotengine/godot/blob/master/.editorconfig",True,{}
nothings/stb,https://github.com/nothings/stb,728,2019-03-04T12:46:15Z,2020-02-02T19:28:09Z,2020-02-02T19:28:09Z,CLOSED,False,851,851,21,https://github.com/akien-mga,Remove trailing whitespace,1,[],https://github.com/nothings/stb/pull/728,https://github.com/nothings,2,https://github.com/nothings/stb/pull/728#issuecomment-469574949,"This is a suggestion for code quality, feel free to reject it if you think it's not worth the change (there are definitely pros and cons).
Many IDEs nowadays tend to automatically remove trailing whitespace on save, which can make for ugly commits downstream if you're not careful, and then ugly diffs the next time when you want to sync with upstream.
I suggest to remove all this trailing whitespace, which should have no impact on code formatting nor function. You can append ?w=1 to the GitHub diff view to ignore whitespace changes and confirm that this PR does only that: diff of this PR. (I opened and saved all files in the Kate IDE with the ""trim whitespace on save"" option enabled.)
Pros:

More readable/less visual noise in editors which display whitespace (e.g. git diff: screenshot_20190304_133912)
More readable diffs when updating versions downstream, provided that upstream takes care not to re-add trailing whitespace

Cons:

Needs some control to ensure that contributors don't readd trailing whitespace. Can be done via a check in a Travis build job (I can PR that if you're interested), and additionally prevented upfront with a pre-commit hook and/or a tool like clang-format. This can add some extra steps for contributors if they want to set up their build environment to avoid adding trailing whitespace.
This one-time change will pollute git blame as this commit will be the first blame on all lines changed here. It can be worked around with git blame -w (ignores whitespace), but not everyone knows about the option.

Files like .editorconfig can provide hints to some IDEs (didn't check which ones) about the need to trim trailing whitespace or not. See e.g. https://github.com/godotengine/godot/blob/master/.editorconfig","Unfortunately this dropped while I had a huge set of pending changes that fixed warnings throughout the codebase, so it's not auto-merging. If you're willing to fix it back up, I'll try to merge it very soon so it won't happen again.",True,{}
nothings/stb,https://github.com/nothings/stb,728,2019-03-04T12:46:15Z,2020-02-02T19:28:09Z,2020-02-02T19:28:09Z,CLOSED,False,851,851,21,https://github.com/akien-mga,Remove trailing whitespace,1,[],https://github.com/nothings/stb/pull/728,https://github.com/akien-mga,3,https://github.com/nothings/stb/pull/728#issuecomment-469634240,"This is a suggestion for code quality, feel free to reject it if you think it's not worth the change (there are definitely pros and cons).
Many IDEs nowadays tend to automatically remove trailing whitespace on save, which can make for ugly commits downstream if you're not careful, and then ugly diffs the next time when you want to sync with upstream.
I suggest to remove all this trailing whitespace, which should have no impact on code formatting nor function. You can append ?w=1 to the GitHub diff view to ignore whitespace changes and confirm that this PR does only that: diff of this PR. (I opened and saved all files in the Kate IDE with the ""trim whitespace on save"" option enabled.)
Pros:

More readable/less visual noise in editors which display whitespace (e.g. git diff: screenshot_20190304_133912)
More readable diffs when updating versions downstream, provided that upstream takes care not to re-add trailing whitespace

Cons:

Needs some control to ensure that contributors don't readd trailing whitespace. Can be done via a check in a Travis build job (I can PR that if you're interested), and additionally prevented upfront with a pre-commit hook and/or a tool like clang-format. This can add some extra steps for contributors if they want to set up their build environment to avoid adding trailing whitespace.
This one-time change will pollute git blame as this commit will be the first blame on all lines changed here. It can be worked around with git blame -w (ignores whitespace), but not everyone knows about the option.

Files like .editorconfig can provide hints to some IDEs (didn't check which ones) about the need to trim trailing whitespace or not. See e.g. https://github.com/godotengine/godot/blob/master/.editorconfig","No problem, I'll rebase. That's another con I forgot to mention: it will add likely add conflicts with most pending PRs/feature branches.",True,{}
nothings/stb,https://github.com/nothings/stb,728,2019-03-04T12:46:15Z,2020-02-02T19:28:09Z,2020-02-02T19:28:09Z,CLOSED,False,851,851,21,https://github.com/akien-mga,Remove trailing whitespace,1,[],https://github.com/nothings/stb/pull/728,https://github.com/akien-mga,4,https://github.com/nothings/stb/pull/728#issuecomment-510391481,"This is a suggestion for code quality, feel free to reject it if you think it's not worth the change (there are definitely pros and cons).
Many IDEs nowadays tend to automatically remove trailing whitespace on save, which can make for ugly commits downstream if you're not careful, and then ugly diffs the next time when you want to sync with upstream.
I suggest to remove all this trailing whitespace, which should have no impact on code formatting nor function. You can append ?w=1 to the GitHub diff view to ignore whitespace changes and confirm that this PR does only that: diff of this PR. (I opened and saved all files in the Kate IDE with the ""trim whitespace on save"" option enabled.)
Pros:

More readable/less visual noise in editors which display whitespace (e.g. git diff: screenshot_20190304_133912)
More readable diffs when updating versions downstream, provided that upstream takes care not to re-add trailing whitespace

Cons:

Needs some control to ensure that contributors don't readd trailing whitespace. Can be done via a check in a Travis build job (I can PR that if you're interested), and additionally prevented upfront with a pre-commit hook and/or a tool like clang-format. This can add some extra steps for contributors if they want to set up their build environment to avoid adding trailing whitespace.
This one-time change will pollute git blame as this commit will be the first blame on all lines changed here. It can be worked around with git blame -w (ignores whitespace), but not everyone knows about the option.

Files like .editorconfig can provide hints to some IDEs (didn't check which ones) about the need to trim trailing whitespace or not. See e.g. https://github.com/godotengine/godot/blob/master/.editorconfig","Rebased again.
As before, append ?w=1 to the GitHub diff URL to confirm that it's only whitespace changes: https://github.com/nothings/stb/pull/728/files?w=1
I simply opened all files in the Kate editor and let it strip trailing whitespace.",True,{}
nothings/stb,https://github.com/nothings/stb,728,2019-03-04T12:46:15Z,2020-02-02T19:28:09Z,2020-02-02T19:28:09Z,CLOSED,False,851,851,21,https://github.com/akien-mga,Remove trailing whitespace,1,[],https://github.com/nothings/stb/pull/728,https://github.com/nothings,5,https://github.com/nothings/stb/pull/728#issuecomment-581148992,"This is a suggestion for code quality, feel free to reject it if you think it's not worth the change (there are definitely pros and cons).
Many IDEs nowadays tend to automatically remove trailing whitespace on save, which can make for ugly commits downstream if you're not careful, and then ugly diffs the next time when you want to sync with upstream.
I suggest to remove all this trailing whitespace, which should have no impact on code formatting nor function. You can append ?w=1 to the GitHub diff view to ignore whitespace changes and confirm that this PR does only that: diff of this PR. (I opened and saved all files in the Kate IDE with the ""trim whitespace on save"" option enabled.)
Pros:

More readable/less visual noise in editors which display whitespace (e.g. git diff: screenshot_20190304_133912)
More readable diffs when updating versions downstream, provided that upstream takes care not to re-add trailing whitespace

Cons:

Needs some control to ensure that contributors don't readd trailing whitespace. Can be done via a check in a Travis build job (I can PR that if you're interested), and additionally prevented upfront with a pre-commit hook and/or a tool like clang-format. This can add some extra steps for contributors if they want to set up their build environment to avoid adding trailing whitespace.
This one-time change will pollute git blame as this commit will be the first blame on all lines changed here. It can be worked around with git blame -w (ignores whitespace), but not everyone knows about the option.

Files like .editorconfig can provide hints to some IDEs (didn't check which ones) about the need to trim trailing whitespace or not. See e.g. https://github.com/godotengine/godot/blob/master/.editorconfig","Sigh, I forgot to do this right away.",True,{}
nothings/stb,https://github.com/nothings/stb,728,2019-03-04T12:46:15Z,2020-02-02T19:28:09Z,2020-02-02T19:28:09Z,CLOSED,False,851,851,21,https://github.com/akien-mga,Remove trailing whitespace,1,[],https://github.com/nothings/stb/pull/728,https://github.com/nothings,6,https://github.com/nothings/stb/pull/728#issuecomment-581168211,"This is a suggestion for code quality, feel free to reject it if you think it's not worth the change (there are definitely pros and cons).
Many IDEs nowadays tend to automatically remove trailing whitespace on save, which can make for ugly commits downstream if you're not careful, and then ugly diffs the next time when you want to sync with upstream.
I suggest to remove all this trailing whitespace, which should have no impact on code formatting nor function. You can append ?w=1 to the GitHub diff view to ignore whitespace changes and confirm that this PR does only that: diff of this PR. (I opened and saved all files in the Kate IDE with the ""trim whitespace on save"" option enabled.)
Pros:

More readable/less visual noise in editors which display whitespace (e.g. git diff: screenshot_20190304_133912)
More readable diffs when updating versions downstream, provided that upstream takes care not to re-add trailing whitespace

Cons:

Needs some control to ensure that contributors don't readd trailing whitespace. Can be done via a check in a Travis build job (I can PR that if you're interested), and additionally prevented upfront with a pre-commit hook and/or a tool like clang-format. This can add some extra steps for contributors if they want to set up their build environment to avoid adding trailing whitespace.
This one-time change will pollute git blame as this commit will be the first blame on all lines changed here. It can be worked around with git blame -w (ignores whitespace), but not everyone knows about the option.

Files like .editorconfig can provide hints to some IDEs (didn't check which ones) about the need to trim trailing whitespace or not. See e.g. https://github.com/godotengine/godot/blob/master/.editorconfig",I've written a standalone tool to do this from the command-line.,True,{}
nothings/stb,https://github.com/nothings/stb,730,2019-03-06T17:42:37Z,2019-08-11T12:39:56Z,2019-08-11T12:39:56Z,MERGED,True,2,6,1,https://github.com/kaesve,Remove redundant scale check in stbtt_GetGlyphSDF,1,['1 stb_truetype'],https://github.com/nothings/stb/pull/730,https://github.com/kaesve,1,https://github.com/nothings/stb/pull/730,"As described through twitter, scale_x and scale_y are both set from scale, so it is redundant to check both of them.
Working on this, I noticed some inconsistent white space in stbtt_solve_cubic, using both tabs and spaces. Would you like me to fix this and add it to this pull request?","As described through twitter, scale_x and scale_y are both set from scale, so it is redundant to check both of them.
Working on this, I noticed some inconsistent white space in stbtt_solve_cubic, using both tabs and spaces. Would you like me to fix this and add it to this pull request?",True,{}
nothings/stb,https://github.com/nothings/stb,730,2019-03-06T17:42:37Z,2019-08-11T12:39:56Z,2019-08-11T12:39:56Z,MERGED,True,2,6,1,https://github.com/kaesve,Remove redundant scale check in stbtt_GetGlyphSDF,1,['1 stb_truetype'],https://github.com/nothings/stb/pull/730,https://github.com/nothings,2,https://github.com/nothings/stb/pull/730#issuecomment-470209913,"As described through twitter, scale_x and scale_y are both set from scale, so it is redundant to check both of them.
Working on this, I noticed some inconsistent white space in stbtt_solve_cubic, using both tabs and spaces. Would you like me to fix this and add it to this pull request?",I prefer not to mix changes & whitespace fixes in the same PR.,True,{}
nothings/stb,https://github.com/nothings/stb,731,2019-03-07T12:00:09Z,2019-03-11T16:10:20Z,2019-03-11T16:10:20Z,CLOSED,False,7,0,1,https://github.com/rsachetto,"Adding arrreset(n) as a shortcut to arrsetlen(a,0)",1,[],https://github.com/nothings/stb/pull/731,https://github.com/rsachetto,1,https://github.com/nothings/stb/pull/731,"Adding arrreset(n) as a shortcut to arrsetlen(a,0).","Adding arrreset(n) as a shortcut to arrsetlen(a,0).",True,{}
nothings/stb,https://github.com/nothings/stb,732,2019-03-08T01:52:43Z,2019-08-11T12:39:56Z,2019-08-11T12:39:56Z,MERGED,True,13,2,1,https://github.com/rgriege, stb_truetype: reduce missing glyph duplication,2,['1 stb_truetype'],https://github.com/nothings/stb/pull/732,https://github.com/rgriege,1,https://github.com/nothings/stb/pull/732,"When calling stbtt_PackFontRanges, multiple missing glyphs in the range of codepoints will cause multiple copies of the font's missing glyph to be added to the pixel buffer.  Instead, the first codepoint that maps to the missing glyph can add it to the pixel buffer, and all subsequent glyphs can simply copy the stbtt_packedchar data to reference the same region of the buffer.
This change does NOT prevent duplication in multiple calls to stbtt_PackFontRange(s) - that would require modifying the packing context, which could be nice but is a bit more intrusive.  I'm open to making the change, but it wasn't necessary for my use case and (I suspect) is a much less significant cause of duplication.
Or, maybe the way I'm using the library is pretty naive, and the missing glyphs are just a result.","When calling stbtt_PackFontRanges, multiple missing glyphs in the range of codepoints will cause multiple copies of the font's missing glyph to be added to the pixel buffer.  Instead, the first codepoint that maps to the missing glyph can add it to the pixel buffer, and all subsequent glyphs can simply copy the stbtt_packedchar data to reference the same region of the buffer.
This change does NOT prevent duplication in multiple calls to stbtt_PackFontRange(s) - that would require modifying the packing context, which could be nice but is a bit more intrusive.  I'm open to making the change, but it wasn't necessary for my use case and (I suspect) is a much less significant cause of duplication.
Or, maybe the way I'm using the library is pretty naive, and the missing glyphs are just a result.",True,{}
nothings/stb,https://github.com/nothings/stb,735,2019-03-11T16:18:14Z,2019-06-17T12:29:29Z,2019-06-17T12:29:29Z,CLOSED,False,8,2,1,https://github.com/rsachetto,Suppressing compiler warnings on stb_ds.h,1,[],https://github.com/nothings/stb/pull/735,https://github.com/rsachetto,1,https://github.com/nothings/stb/pull/735,Suppressing compiler warnings on stb_ds.h by using the return value of realloc inside an if statement,Suppressing compiler warnings on stb_ds.h by using the return value of realloc inside an if statement,True,{}
nothings/stb,https://github.com/nothings/stb,735,2019-03-11T16:18:14Z,2019-06-17T12:29:29Z,2019-06-17T12:29:29Z,CLOSED,False,8,2,1,https://github.com/rsachetto,Suppressing compiler warnings on stb_ds.h,1,[],https://github.com/nothings/stb/pull/735,https://github.com/nothings,2,https://github.com/nothings/stb/pull/735#issuecomment-502662490,Suppressing compiler warnings on stb_ds.h by using the return value of realloc inside an if statement,This is fixed in a better way by #769,True,{}
nothings/stb,https://github.com/nothings/stb,737,2019-03-12T00:15:08Z,2020-02-02T19:33:25Z,2020-05-18T11:42:40Z,MERGED,True,29,0,10,https://github.com/randy408,stb_image: add png fuzz target,3,['1 stb_image'],https://github.com/nothings/stb/pull/737,https://github.com/randy408,1,https://github.com/nothings/stb/pull/737,"This adds a fuzz target, dictionary and iphone png's for fuzzing the png reader. My plan is to eventually integrate with OSS-Fuzz which would continuously fuzz the code in stb_image.h.","This adds a fuzz target, dictionary and iphone png's for fuzzing the png reader. My plan is to eventually integrate with OSS-Fuzz which would continuously fuzz the code in stb_image.h.",True,{}
nothings/stb,https://github.com/nothings/stb,737,2019-03-12T00:15:08Z,2020-02-02T19:33:25Z,2020-05-18T11:42:40Z,MERGED,True,29,0,10,https://github.com/randy408,stb_image: add png fuzz target,3,['1 stb_image'],https://github.com/nothings/stb/pull/737,https://github.com/Google-Autofuzz,2,https://github.com/nothings/stb/pull/737#issuecomment-525318718,"This adds a fuzz target, dictionary and iphone png's for fuzzing the png reader. My plan is to eventually integrate with OSS-Fuzz which would continuously fuzz the code in stb_image.h.","Is this ready to be merged?
@nothings @phprus",True,{}
nothings/stb,https://github.com/nothings/stb,737,2019-03-12T00:15:08Z,2020-02-02T19:33:25Z,2020-05-18T11:42:40Z,MERGED,True,29,0,10,https://github.com/randy408,stb_image: add png fuzz target,3,['1 stb_image'],https://github.com/nothings/stb/pull/737,https://github.com/randy408,3,https://github.com/nothings/stb/pull/737#issuecomment-552800938,"This adds a fuzz target, dictionary and iphone png's for fuzzing the png reader. My plan is to eventually integrate with OSS-Fuzz which would continuously fuzz the code in stb_image.h.","At this stage it would suffice if the initial integration through my fork was approved, this could be merged later once there is enough code coverage.
@nothings",True,{'THUMBS_UP': ['https://github.com/Google-Autofuzz']}
nothings/stb,https://github.com/nothings/stb,737,2019-03-12T00:15:08Z,2020-02-02T19:33:25Z,2020-05-18T11:42:40Z,MERGED,True,29,0,10,https://github.com/randy408,stb_image: add png fuzz target,3,['1 stb_image'],https://github.com/nothings/stb/pull/737,https://github.com/nothings,4,https://github.com/nothings/stb/pull/737#issuecomment-581149265,"This adds a fuzz target, dictionary and iphone png's for fuzzing the png reader. My plan is to eventually integrate with OSS-Fuzz which would continuously fuzz the code in stb_image.h.","This doesn't compile for me -- uint8_t isn't defined in stb_png_read_fuzzer.cpp
But I'm merging it anyway.",True,{}
nothings/stb,https://github.com/nothings/stb,737,2019-03-12T00:15:08Z,2020-02-02T19:33:25Z,2020-05-18T11:42:40Z,MERGED,True,29,0,10,https://github.com/randy408,stb_image: add png fuzz target,3,['1 stb_image'],https://github.com/nothings/stb/pull/737,https://github.com/nothings,5,https://github.com/nothings/stb/pull/737#issuecomment-583649362,"This adds a fuzz target, dictionary and iphone png's for fuzzing the png reader. My plan is to eventually integrate with OSS-Fuzz which would continuously fuzz the code in stb_image.h.","Hi, somebody is creating issues on bugs.chromium.org/p/oss-fuzz, presumably related to this, and I'm getting notification of the issues by the bug tracker emailed to sean@n...org, but I do not have permission to view the issues with my normal google account, which is NOT that email address. I don't have a google account for the sean@ email.",True,{}
nothings/stb,https://github.com/nothings/stb,737,2019-03-12T00:15:08Z,2020-02-02T19:33:25Z,2020-05-18T11:42:40Z,MERGED,True,29,0,10,https://github.com/randy408,stb_image: add png fuzz target,3,['1 stb_image'],https://github.com/nothings/stb/pull/737,https://github.com/randy408,6,https://github.com/nothings/stb/pull/737#issuecomment-583720972,"This adds a fuzz target, dictionary and iphone png's for fuzzing the png reader. My plan is to eventually integrate with OSS-Fuzz which would continuously fuzz the code in stb_image.h.","Those issues are created automatically, it has been a while this MR was created and forgot about the Google account requirement (https://google.github.io/oss-fuzz/faq/#why-do-you-require-a-google-account-for-authentication), AFAIK there's no way around it. If you give me a Google account I'll update it (leave off the @gmail.com if you're worried about spam).",True,{}
nothings/stb,https://github.com/nothings/stb,737,2019-03-12T00:15:08Z,2020-02-02T19:33:25Z,2020-05-18T11:42:40Z,MERGED,True,29,0,10,https://github.com/randy408,stb_image: add png fuzz target,3,['1 stb_image'],https://github.com/nothings/stb/pull/737,https://github.com/nothings,7,https://github.com/nothings/stb/pull/737#issuecomment-583732733,"This adds a fuzz target, dictionary and iphone png's for fuzzing the png reader. My plan is to eventually integrate with OSS-Fuzz which would continuously fuzz the code in stb_image.h.",nothings.org@,True,{}
nothings/stb,https://github.com/nothings/stb,737,2019-03-12T00:15:08Z,2020-02-02T19:33:25Z,2020-05-18T11:42:40Z,MERGED,True,29,0,10,https://github.com/randy408,stb_image: add png fuzz target,3,['1 stb_image'],https://github.com/nothings/stb/pull/737,https://github.com/nothings,8,https://github.com/nothings/stb/pull/737#issuecomment-583767895,"This adds a fuzz target, dictionary and iphone png's for fuzzing the png reader. My plan is to eventually integrate with OSS-Fuzz which would continuously fuzz the code in stb_image.h.","Great, now I'm getting notifications to BOTH email accounts.
Seriously, why do I need to receive these at all?",True,{}
nothings/stb,https://github.com/nothings/stb,737,2019-03-12T00:15:08Z,2020-02-02T19:33:25Z,2020-05-18T11:42:40Z,MERGED,True,29,0,10,https://github.com/randy408,stb_image: add png fuzz target,3,['1 stb_image'],https://github.com/nothings/stb/pull/737,https://github.com/randy408,9,https://github.com/nothings/stb/pull/737#issuecomment-583770348,"This adds a fuzz target, dictionary and iphone png's for fuzzing the png reader. My plan is to eventually integrate with OSS-Fuzz which would continuously fuzz the code in stb_image.h.","I received duplicate notifications for the existing issues, it might be temporary.",True,{}
nothings/stb,https://github.com/nothings/stb,737,2019-03-12T00:15:08Z,2020-02-02T19:33:25Z,2020-05-18T11:42:40Z,MERGED,True,29,0,10,https://github.com/randy408,stb_image: add png fuzz target,3,['1 stb_image'],https://github.com/nothings/stb/pull/737,https://github.com/nothings,10,https://github.com/nothings/stb/pull/737#issuecomment-583770843,"This adds a fuzz target, dictionary and iphone png's for fuzzing the png reader. My plan is to eventually integrate with OSS-Fuzz which would continuously fuzz the code in stb_image.h.","Ok, but why do I need to be CC'd on this at all?",True,{}
nothings/stb,https://github.com/nothings/stb,737,2019-03-12T00:15:08Z,2020-02-02T19:33:25Z,2020-05-18T11:42:40Z,MERGED,True,29,0,10,https://github.com/randy408,stb_image: add png fuzz target,3,['1 stb_image'],https://github.com/nothings/stb/pull/737,https://github.com/randy408,11,https://github.com/nothings/stb/pull/737#issuecomment-583776414,"This adds a fuzz target, dictionary and iphone png's for fuzzing the png reader. My plan is to eventually integrate with OSS-Fuzz which would continuously fuzz the code in stb_image.h.","These notifications are for potential security issues, I assume you already know about OSS-Fuzz (#792), stb_image was integrated using the code and test images from this PR. If you don't want to be CC'd notifications can be disabled here: https://bugs.chromium.org/hosting/settings.",True,{}
nothings/stb,https://github.com/nothings/stb,737,2019-03-12T00:15:08Z,2020-02-02T19:33:25Z,2020-05-18T11:42:40Z,MERGED,True,29,0,10,https://github.com/randy408,stb_image: add png fuzz target,3,['1 stb_image'],https://github.com/nothings/stb/pull/737,https://github.com/nothings,12,https://github.com/nothings/stb/pull/737#issuecomment-583786008,"This adds a fuzz target, dictionary and iphone png's for fuzzing the png reader. My plan is to eventually integrate with OSS-Fuzz which would continuously fuzz the code in stb_image.h.","Is there any reason to think those bugs are more of a security risk than the dozens of open issues that already exist on the github issue tracker that are already public? (Indeed, how many of the bugs on the oss-fuzz page are duplicates of already existing bugs on the github tracker?)
Did anything in this PR description explain that it was going to open up a parallel, independent issue tracking page that I am supposed to care about? (Nothing on the page you linked in the initial PR description makes that clear.)
And finally, if I don't want to be CC'd notifications about the bugs, there's one simple solution, which is to NOT PUT ME ON THE CC field. If somebody's email has to be CC'd for the system to work, then you can put your email there, because I don't want it. Your suggestion (changing the settings) doesn't make sense because the sean@ address doesn't have a google account so can't change those settings, whereas for the nothings.org@ I don't want to change my notification settings chromium-bugs wide. I want to be notified about bugs I interact with on bugs.chromium, just not random bugs on bugs.chromium/oss-fuzz. I can spam block them, but what the fuck.
At this point, it looks like merging this PR was a mistake, and I'm of a mind to undo it.",True,{}
nothings/stb,https://github.com/nothings/stb,737,2019-03-12T00:15:08Z,2020-02-02T19:33:25Z,2020-05-18T11:42:40Z,MERGED,True,29,0,10,https://github.com/randy408,stb_image: add png fuzz target,3,['1 stb_image'],https://github.com/nothings/stb/pull/737,https://github.com/LindleyF,13,https://github.com/nothings/stb/pull/737#issuecomment-584290239,"This adds a fuzz target, dictionary and iphone png's for fuzzing the png reader. My plan is to eventually integrate with OSS-Fuzz which would continuously fuzz the code in stb_image.h.","I know little about how the alerting is set up on this, and I don't know much about what other bugs may be already tracked or how they relate in severity, but I have OWNERS on the Google-internal version of this code so I should offer my opinion.
Which is, ""this test is failing, so please disable the test"" is rarely the right attitude.
There are three possible outcomes of a failing test:

A problem with the test. Disabling it may be appropriate in this case.
A problem with the code under test which is easily fixable. Fixing it is appropriate in this case.
A problem with the code under test which reveals fundamental problems that would take a major effort to fix. In this case, re-evaluating whether that code should be used at all is appropriate.

Too much testing is impossible, and failing tests are the best kind of tests because it means they're turning up actual issues. So I'd be against removing the fuzz testing altogether. I would be in favor of its results being reported in a way that's minimally spammy and consistent with other bug reporting on this component, if possible. In the extreme case, I'd be okay with fuzz testing remaining Google-internal and only upstreaming to github the fixes that arise from it, but that's not preferred because every difference makes pulling down updates from github harder in the future.",True,{}
nothings/stb,https://github.com/nothings/stb,737,2019-03-12T00:15:08Z,2020-02-02T19:33:25Z,2020-05-18T11:42:40Z,MERGED,True,29,0,10,https://github.com/randy408,stb_image: add png fuzz target,3,['1 stb_image'],https://github.com/nothings/stb/pull/737,https://github.com/nothings,14,https://github.com/nothings/stb/pull/737#issuecomment-584303001,"This adds a fuzz target, dictionary and iphone png's for fuzzing the png reader. My plan is to eventually integrate with OSS-Fuzz which would continuously fuzz the code in stb_image.h.","I know little about how the alerting is set up on this, and I don't know much about what other bugs may be already tracked or how they relate in severity, but I have OWNERS on the Google-internal version of this code so I should offer my opinion.
Which is, ""this test is failing, so please disable the test"" is rarely the right attitude.

So, I understand your impulse, but it has nothing to do with anything.
I have no problem with testing! I'm not saying anyone should disable the test.
But the reality is that I have dozens of unfixed bugs and limited time to work on them. I don't think I've fixed more than one or two bugs in the last two years myself, instead bugs get fixed primarily by PRs from other contributors. So (a) adding more friction to me dealing with this already-overwhelming open source project helps NOBODY, just takes away time from me working on it, and (b) bugs on a closed tracker that nobody else can see means nobody else is going to make PRs to fix them.
How do we compare severity of oss-fuzz bugs vs. existing bugs? Well, who knows, but for example, we can assume that they're the same average severity as existing bugs found by fuzz testing. So you could just run a search on this repo for 'fuzz'. Most people who fuzz test don't mention that they fuzz test, so this is a lower bound on the results of fuzz-testing, and in fact there are 7 existing issues that mention fuzzing. So I bet we already have 14+ bugs due to fuzz-testing. So how are 5 non-public fuzz-tested bugs on oss-fuzz worthwhile?
And now that I know how long it took, I should never have wasted my time replying to this.",True,{'THUMBS_UP': ['https://github.com/RanXacT']}
nothings/stb,https://github.com/nothings/stb,737,2019-03-12T00:15:08Z,2020-02-02T19:33:25Z,2020-05-18T11:42:40Z,MERGED,True,29,0,10,https://github.com/randy408,stb_image: add png fuzz target,3,['1 stb_image'],https://github.com/nothings/stb/pull/737,https://github.com/randy408,15,https://github.com/nothings/stb/pull/737#issuecomment-584705103,"This adds a fuzz target, dictionary and iphone png's for fuzzing the png reader. My plan is to eventually integrate with OSS-Fuzz which would continuously fuzz the code in stb_image.h.","The timeout bug reported by OSS-Fuzz looks like it could consistently lead to DoS and the integer overflow bug could lead to allocating undersized buffers and possibly out-of-bounds writes, there are bugs on github with the same severity, there are no duplicates for those two. I don't think bug reports from fuzz testing belong in a public GitHub issue, they're usually more serious and less likely to be a false positive than warnings from e.g. a static analyzer.
The initial PR was created almost a year ago, the linked README at the time described the integration process (including the separate bug tracker) but this was moved to the documentation a few months ago, I admit that detail wasn't obvious when this was merged.
The duplicate notifications got sent when the old address was replaced with the @gmail.com one, it's probably a one-time bug and the old address should not receive any more notifications.

If somebody's email has to be CC'd for the system to work, then you can put your email there, because I don't want it.

My address is also on the CC list and I am intending to fix the bugs reported by OSS-Fuzz. Usually the project owner is required to have access to the private bugs (this is controlled with the CC field), I suppose removing your email from the CC field is an option while also keeping the tests running. Assuming that can be done, are you willing to keep this PR merged and accept future PRs maybe once every 1-2 months?",True,{}
nothings/stb,https://github.com/nothings/stb,737,2019-03-12T00:15:08Z,2020-02-02T19:33:25Z,2020-05-18T11:42:40Z,MERGED,True,29,0,10,https://github.com/randy408,stb_image: add png fuzz target,3,['1 stb_image'],https://github.com/nothings/stb/pull/737,https://github.com/nothings,16,https://github.com/nothings/stb/pull/737#issuecomment-584726451,"This adds a fuzz target, dictionary and iphone png's for fuzzing the png reader. My plan is to eventually integrate with OSS-Fuzz which would continuously fuzz the code in stb_image.h.","I don't think bug reports from fuzz testing belong in a public GitHub issue, they're usually more serious and less likely to be a false positive than warnings from e.g. a static analyzer.

I guarantee you there are equally serious bugs in public Github issues. This is not how security is handled on this project. That may seem irresponsible to you, but it's just how it is.",True,{}
nothings/stb,https://github.com/nothings/stb,737,2019-03-12T00:15:08Z,2020-02-02T19:33:25Z,2020-05-18T11:42:40Z,MERGED,True,29,0,10,https://github.com/randy408,stb_image: add png fuzz target,3,['1 stb_image'],https://github.com/nothings/stb/pull/737,https://github.com/nothings,17,https://github.com/nothings/stb/pull/737#issuecomment-584727668,"This adds a fuzz target, dictionary and iphone png's for fuzzing the png reader. My plan is to eventually integrate with OSS-Fuzz which would continuously fuzz the code in stb_image.h.","The duplicate notifications got sent when the old address was replaced with the @gmail.com one, it's probably a one-time bug and the old address should not receive any more notifications.

Or it's not a one-time bug, given that the wrong email address is STILL listed in the CC: field of the old bugs. It may not receive notifications for new bugs, but it hasn't actually been replaced/removed in that sense.",True,{}
nothings/stb,https://github.com/nothings/stb,737,2019-03-12T00:15:08Z,2020-02-02T19:33:25Z,2020-05-18T11:42:40Z,MERGED,True,29,0,10,https://github.com/randy408,stb_image: add png fuzz target,3,['1 stb_image'],https://github.com/nothings/stb/pull/737,https://github.com/nothings,18,https://github.com/nothings/stb/pull/737#issuecomment-584729272,"This adds a fuzz target, dictionary and iphone png's for fuzzing the png reader. My plan is to eventually integrate with OSS-Fuzz which would continuously fuzz the code in stb_image.h.","The initial PR was created almost a year ago, the linked README at the time described the integration process (including the separate bug tracker) but this was moved to the documentation a few months ago,

Ok, fair.",True,{}
nothings/stb,https://github.com/nothings/stb,737,2019-03-12T00:15:08Z,2020-02-02T19:33:25Z,2020-05-18T11:42:40Z,MERGED,True,29,0,10,https://github.com/randy408,stb_image: add png fuzz target,3,['1 stb_image'],https://github.com/nothings/stb/pull/737,https://github.com/randy408,19,https://github.com/nothings/stb/pull/737#issuecomment-588991570,"This adds a fuzz target, dictionary and iphone png's for fuzzing the png reader. My plan is to eventually integrate with OSS-Fuzz which would continuously fuzz the code in stb_image.h.","Or it's not a one-time bug, given that the wrong email address is STILL listed in the CC: field of the old bugs. It may not receive notifications for new bugs, but it hasn't actually been replaced/removed in that sense.

You're right, it will only be removed for new bugs (google/oss-fuzz#3373), if filtering the notifications is not an option I will ask the OSS-Fuzz team if fuzzing can continue with just me on the CC field.",True,{}
nothings/stb,https://github.com/nothings/stb,737,2019-03-12T00:15:08Z,2020-02-02T19:33:25Z,2020-05-18T11:42:40Z,MERGED,True,29,0,10,https://github.com/randy408,stb_image: add png fuzz target,3,['1 stb_image'],https://github.com/nothings/stb/pull/737,https://github.com/randy408,20,https://github.com/nothings/stb/pull/737#issuecomment-630126095,"This adds a fuzz target, dictionary and iphone png's for fuzzing the png reader. My plan is to eventually integrate with OSS-Fuzz which would continuously fuzz the code in stb_image.h.","I'm planning on extending code coverage for this with google/oss-fuzz#3784, this will trigger a lot of bug notifications for your gmail account, @nothings if you haven't blocked these or want your email removed entirely let me know.",True,{}
nothings/stb,https://github.com/nothings/stb,738,2019-03-16T22:02:33Z,2020-02-02T19:33:25Z,2020-02-02T19:33:25Z,MERGED,True,1,1,1,https://github.com/StylishTriangles,Fix gcc warning: expression always true,1,['1 stb_image'],https://github.com/nothings/stb/pull/738,https://github.com/StylishTriangles,1,https://github.com/nothings/stb/pull/738,"stb_image.h:5113:18: warning: comparison of unsigned expression >= 0 is always true [-Wtype-limits]
STBI_ASSERT(v >= 0 && v < 256);
This warning appears when using g++ 8.2 with -Wall -Wextra","stb_image.h:5113:18: warning: comparison of unsigned expression >= 0 is always true [-Wtype-limits]
STBI_ASSERT(v >= 0 && v < 256);
This warning appears when using g++ 8.2 with -Wall -Wextra",True,{}
nothings/stb,https://github.com/nothings/stb,742,2019-03-30T17:41:25Z,2019-06-17T12:35:41Z,2019-06-17T12:35:41Z,CLOSED,False,1,1,1,https://github.com/ErikWallstrom,Removed unnecessary part of assertion,1,[],https://github.com/nothings/stb/pull/742,https://github.com/ErikWallstrom,1,https://github.com/nothings/stb/pull/742,"v >= 0 is unnecessary since v is unsigned, which means it is guaranteed to be more than or equal to zero. It also caused warnings when compiled in gcc with -Wall -Wextra.","v >= 0 is unnecessary since v is unsigned, which means it is guaranteed to be more than or equal to zero. It also caused warnings when compiled in gcc with -Wall -Wextra.",True,{}
nothings/stb,https://github.com/nothings/stb,742,2019-03-30T17:41:25Z,2019-06-17T12:35:41Z,2019-06-17T12:35:41Z,CLOSED,False,1,1,1,https://github.com/ErikWallstrom,Removed unnecessary part of assertion,1,[],https://github.com/nothings/stb/pull/742,https://github.com/nothings,2,https://github.com/nothings/stb/pull/742#issuecomment-502664430,"v >= 0 is unnecessary since v is unsigned, which means it is guaranteed to be more than or equal to zero. It also caused warnings when compiled in gcc with -Wall -Wextra.",Duplicate of #738.,True,{}
nothings/stb,https://github.com/nothings/stb,743,2019-04-04T03:40:32Z,2020-02-02T19:33:24Z,2020-02-02T19:33:24Z,MERGED,True,14,6,1,https://github.com/yangfl,stb_divide: use return value to indicate errors,1,"['4 enhancement', '1 stb library w/no tag']",https://github.com/nothings/stb/pull/743,https://github.com/yangfl,1,https://github.com/nothings/stb/pull/743,,,True,{}
nothings/stb,https://github.com/nothings/stb,750,2019-04-14T17:35:06Z,2020-02-02T19:33:24Z,2020-02-02T19:33:24Z,MERGED,True,52,1,1,https://github.com/chris-y,Add functions to extract SVG glyphs from font.,1,['1 stb_truetype'],https://github.com/nothings/stb/pull/750,https://github.com/chris-y,1,https://github.com/nothings/stb/pull/750,"The functions are:
stbtt_GetCodepointSVG - provides a pointer to the SVG data in the supplied argument, and returns the length of this data
stbtt_GetGlyphSVG - As above but takes the glyph index instead of the codepoint
These are low-level functions to get access to the data, and make no attempt to decompress it or render a glyph from it!
Fixes #748","The functions are:
stbtt_GetCodepointSVG - provides a pointer to the SVG data in the supplied argument, and returns the length of this data
stbtt_GetGlyphSVG - As above but takes the glyph index instead of the codepoint
These are low-level functions to get access to the data, and make no attempt to decompress it or render a glyph from it!
Fixes #748",True,{}
nothings/stb,https://github.com/nothings/stb,750,2019-04-14T17:35:06Z,2020-02-02T19:33:24Z,2020-02-02T19:33:24Z,MERGED,True,52,1,1,https://github.com/chris-y,Add functions to extract SVG glyphs from font.,1,['1 stb_truetype'],https://github.com/nothings/stb/pull/750,https://github.com/nothings,2,https://github.com/nothings/stb/pull/750#issuecomment-581150200,"The functions are:
stbtt_GetCodepointSVG - provides a pointer to the SVG data in the supplied argument, and returns the length of this data
stbtt_GetGlyphSVG - As above but takes the glyph index instead of the codepoint
These are low-level functions to get access to the data, and make no attempt to decompress it or render a glyph from it!
Fixes #748",I did some rewriting of this so you might want to make sure I didn't break it.,True,{}
nothings/stb,https://github.com/nothings/stb,753,2019-04-22T08:40:51Z,2019-04-22T11:38:37Z,2019-04-22T11:38:37Z,CLOSED,False,2845,349,33,https://github.com/GMacharadze,stb_image.h: fixed common realloc mistake,112,[],https://github.com/nothings/stb/pull/753,https://github.com/GMacharadze,1,https://github.com/nothings/stb/pull/753,This error was caught by cppcheck.,This error was caught by cppcheck.,True,{}
nothings/stb,https://github.com/nothings/stb,753,2019-04-22T08:40:51Z,2019-04-22T11:38:37Z,2019-04-22T11:38:37Z,CLOSED,False,2845,349,33,https://github.com/GMacharadze,stb_image.h: fixed common realloc mistake,112,[],https://github.com/nothings/stb/pull/753,https://github.com/nothings,2,https://github.com/nothings/stb/pull/753#issuecomment-485368146,This error was caught by cppcheck.,"Your submission contains 109 different commits, I'm not sure hwat went wrong.",True,{}
nothings/stb,https://github.com/nothings/stb,755,2019-04-22T11:31:28Z,2020-02-02T19:33:23Z,2020-02-02T19:33:23Z,MERGED,True,9,1,1,https://github.com/GMacharadze,stb_image: fixed 'out' nulled but not freed upon failure,1,"['2 bug', '1 stb_image']",https://github.com/nothings/stb/pull/755,https://github.com/GMacharadze,1,https://github.com/nothings/stb/pull/755,"If realloc fails it returns NULL and out pointer becomes invalid. To
fix this it is necessary to store realloc return value in temporary
pointer and then compare it with NULL. If it equals NULL then return
error and source pointer will still valid.
This error was caught by cppcheck:
Common realloc mistake: 'out' nulled but not freed upon failure.","If realloc fails it returns NULL and out pointer becomes invalid. To
fix this it is necessary to store realloc return value in temporary
pointer and then compare it with NULL. If it equals NULL then return
error and source pointer will still valid.
This error was caught by cppcheck:
Common realloc mistake: 'out' nulled but not freed upon failure.",True,{}
nothings/stb,https://github.com/nothings/stb,758,2019-04-30T12:46:20Z,,2020-07-13T09:23:50Z,OPEN,False,3,0,1,https://github.com/Brotcrunsher,stb_truetype: Fixed a memory leak in example code,1,"['1 stb_truetype', 'needs significant new work']",https://github.com/nothings/stb/pull/758,https://github.com/Brotcrunsher,1,https://github.com/nothings/stb/pull/758,"The example code previously created a bitmap via stbtt_GetCodepointBitmap but never freed it, effectively creating a memory leak. This commit calls the proper stbtt free function stbtt_FreeBitmap.","The example code previously created a bitmap via stbtt_GetCodepointBitmap but never freed it, effectively creating a memory leak. This commit calls the proper stbtt free function stbtt_FreeBitmap.",True,{}
nothings/stb,https://github.com/nothings/stb,758,2019-04-30T12:46:20Z,,2020-07-13T09:23:50Z,OPEN,False,3,0,1,https://github.com/Brotcrunsher,stb_truetype: Fixed a memory leak in example code,1,"['1 stb_truetype', 'needs significant new work']",https://github.com/nothings/stb/pull/758,https://github.com/Brotcrunsher,2,https://github.com/nothings/stb/pull/758#issuecomment-487941384,"The example code previously created a bitmap via stbtt_GetCodepointBitmap but never freed it, effectively creating a memory leak. This commit calls the proper stbtt free function stbtt_FreeBitmap.",As a side note: The example also never calls fclose to the corresponding fopen. This however could be seen as an irrelevant best practice thing which has nothing to do with the topic of the example code: showing stb_truetype.,True,{}
nothings/stb,https://github.com/nothings/stb,758,2019-04-30T12:46:20Z,,2020-07-13T09:23:50Z,OPEN,False,3,0,1,https://github.com/Brotcrunsher,stb_truetype: Fixed a memory leak in example code,1,"['1 stb_truetype', 'needs significant new work']",https://github.com/nothings/stb/pull/758,https://github.com/nothings,3,https://github.com/nothings/stb/pull/758#issuecomment-520219589,"The example code previously created a bitmap via stbtt_GetCodepointBitmap but never freed it, effectively creating a memory leak. This commit calls the proper stbtt free function stbtt_FreeBitmap.","Yes, the sample code didn't do any cleanup of anything, which was consistent. It also doesn't do any error checking. I thought it was clearly supposed to be throw-away sample code, not cut-and-paste-able sample code, but clearly I was wrong, so I need to rethink this.",True,"{'THUMBS_UP': ['https://github.com/follower'], 'LAUGH': ['https://github.com/follower']}"
nothings/stb,https://github.com/nothings/stb,758,2019-04-30T12:46:20Z,,2020-07-13T09:23:50Z,OPEN,False,3,0,1,https://github.com/Brotcrunsher,stb_truetype: Fixed a memory leak in example code,1,"['1 stb_truetype', 'needs significant new work']",https://github.com/nothings/stb/pull/758,https://github.com/Brotcrunsher,4,https://github.com/nothings/stb/pull/758#issuecomment-608336093,"The example code previously created a bitmap via stbtt_GetCodepointBitmap but never freed it, effectively creating a memory leak. This commit calls the proper stbtt free function stbtt_FreeBitmap.","I volunteer to do this for stb_truetype. If you want this, just name me the scope of the checks:
1.) Should memory leaks be checked?
2.) Should return values be checked?
3.) Should C library functions be handled properly?
4.) Anything else that I miss?",True,{'THUMBS_UP': ['https://github.com/follower']}
nothings/stb,https://github.com/nothings/stb,758,2019-04-30T12:46:20Z,,2020-07-13T09:23:50Z,OPEN,False,3,0,1,https://github.com/Brotcrunsher,stb_truetype: Fixed a memory leak in example code,1,"['1 stb_truetype', 'needs significant new work']",https://github.com/nothings/stb/pull/758,https://github.com/nothings,5,https://github.com/nothings/stb/pull/758#issuecomment-657437647,"The example code previously created a bitmap via stbtt_GetCodepointBitmap but never freed it, effectively creating a memory leak. This commit calls the proper stbtt free function stbtt_FreeBitmap.","@Brotcrunsher :

I volunteer to do this for stb_truetype. If you want this, just name me the scope of the checks:
1.) Should memory leaks be checked?
2.) Should return values be checked?
3.) Should C library functions be handled properly?
4.) Anything else that I miss?

I appreciate the volunteering, but since the sample code is embedded in the library I need to trade off all of these choices with length, so I have to do it myself I think.",True,{}
nothings/stb,https://github.com/nothings/stb,759,2019-04-30T14:30:49Z,2020-02-02T19:33:22Z,2020-02-02T19:33:22Z,MERGED,True,1,4,1,https://github.com/Brotcrunsher,Allowing Compound Glyphs with `numberOfContours < -1`,1,['1 stb_truetype'],https://github.com/nothings/stb/pull/759,https://github.com/Brotcrunsher,1,https://github.com/nothings/stb/pull/759,"While it is recommended that the numberOfContours are set to -1 for compound glyphs, it is allowed to have any negative value. Source: https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6glyf.html
However, I don't know if this happens in practice.","While it is recommended that the numberOfContours are set to -1 for compound glyphs, it is allowed to have any negative value. Source: https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6glyf.html
However, I don't know if this happens in practice.",True,{}
nothings/stb,https://github.com/nothings/stb,760,2019-05-04T21:14:13Z,2019-08-11T12:39:58Z,2019-08-11T12:39:58Z,MERGED,True,1,1,1,https://github.com/mastensg,stb_textedit: fix typo: STB_TEXTED_K_RIGHT,1,['1 stb library w/no tag'],https://github.com/nothings/stb/pull/760,https://github.com/mastensg,1,https://github.com/nothings/stb/pull/760,,,True,{}
nothings/stb,https://github.com/nothings/stb,762,2019-05-07T13:00:23Z,2019-06-17T12:34:07Z,2019-06-17T12:34:08Z,CLOSED,False,1,1,1,https://github.com/BaCaRoZzo,Remove check due to warning,1,['1 stb_image'],https://github.com/nothings/stb/pull/762,https://github.com/BaCaRoZzo,1,https://github.com/nothings/stb/pull/762,Since variable v is unsigned the first part of the check generates a warning which creates issues in our CI system. The first check is simply removed.,Since variable v is unsigned the first part of the check generates a warning which creates issues in our CI system. The first check is simply removed.,True,{}
nothings/stb,https://github.com/nothings/stb,762,2019-05-07T13:00:23Z,2019-06-17T12:34:07Z,2019-06-17T12:34:08Z,CLOSED,False,1,1,1,https://github.com/BaCaRoZzo,Remove check due to warning,1,['1 stb_image'],https://github.com/nothings/stb/pull/762,https://github.com/Brotcrunsher,2,https://github.com/nothings/stb/pull/762#issuecomment-490808760,Since variable v is unsigned the first part of the check generates a warning which creates issues in our CI system. The first check is simply removed.,"Duplicate of: #738
Dunno why it's not already in as it seems to be a reasonable change to me, probably a lack of time.",True,{}
nothings/stb,https://github.com/nothings/stb,762,2019-05-07T13:00:23Z,2019-06-17T12:34:07Z,2019-06-17T12:34:08Z,CLOSED,False,1,1,1,https://github.com/BaCaRoZzo,Remove check due to warning,1,['1 stb_image'],https://github.com/nothings/stb/pull/762,https://github.com/BaCaRoZzo,3,https://github.com/nothings/stb/pull/762#issuecomment-490810416,Since variable v is unsigned the first part of the check generates a warning which creates issues in our CI system. The first check is simply removed.,Oh I see. Sorry for the duplicate. Do you think it is possible to have it merged soon? The lib is used from another lib we use and our CI system does not love to have such warnings hanging around. 😭,True,{}
nothings/stb,https://github.com/nothings/stb,762,2019-05-07T13:00:23Z,2019-06-17T12:34:07Z,2019-06-17T12:34:08Z,CLOSED,False,1,1,1,https://github.com/BaCaRoZzo,Remove check due to warning,1,['1 stb_image'],https://github.com/nothings/stb/pull/762,https://github.com/nothings,4,https://github.com/nothings/stb/pull/762#issuecomment-502663972,Since variable v is unsigned the first part of the check generates a warning which creates issues in our CI system. The first check is simply removed.,"Closed as duplicate. (It'll get merged when it gets merged, there's no schedule.)",True,{}
nothings/stb,https://github.com/nothings/stb,763,2019-05-11T11:41:11Z,,2022-05-02T19:00:24Z,OPEN,False,137,18,3,https://github.com/WearerOfShoes,Add write support for 16-bit PNG,1,['1 stb_image_write'],https://github.com/nothings/stb/pull/763,https://github.com/WearerOfShoes,1,https://github.com/nothings/stb/pull/763,"This patch adds write support for 16-bit PNG.
I tried to mimic the way it is done on the read side, by having a special _16 function. I didn't modify the interface of any previously exposed functions.
Most of the functionality is shared with the 8-bit PNG writer, and I expect it to get a comparable performance and compression ratio. But I admit I haven't measured it.","This patch adds write support for 16-bit PNG.
I tried to mimic the way it is done on the read side, by having a special _16 function. I didn't modify the interface of any previously exposed functions.
Most of the functionality is shared with the 8-bit PNG writer, and I expect it to get a comparable performance and compression ratio. But I admit I haven't measured it.",True,{}
nothings/stb,https://github.com/nothings/stb,763,2019-05-11T11:41:11Z,,2022-05-02T19:00:24Z,OPEN,False,137,18,3,https://github.com/WearerOfShoes,Add write support for 16-bit PNG,1,['1 stb_image_write'],https://github.com/nothings/stb/pull/763,https://github.com/nothings,2,https://github.com/nothings/stb/pull/763#issuecomment-581150852,"This patch adds write support for 16-bit PNG.
I tried to mimic the way it is done on the read side, by having a special _16 function. I didn't modify the interface of any previously exposed functions.
Most of the functionality is shared with the 8-bit PNG writer, and I expect it to get a comparable performance and compression ratio. But I admit I haven't measured it.","Because this implementation supports both 8- and 16-bit channels by treating them as 1 or 2 bytes and using a multiply by the component count, it will slow down the common case of 1-byte channels unacceptably. It needs to use a separate path for the pixel loops.",True,{}
nothings/stb,https://github.com/nothings/stb,763,2019-05-11T11:41:11Z,,2022-05-02T19:00:24Z,OPEN,False,137,18,3,https://github.com/WearerOfShoes,Add write support for 16-bit PNG,1,['1 stb_image_write'],https://github.com/nothings/stb/pull/763,https://github.com/WearerOfShoes,3,https://github.com/nothings/stb/pull/763#issuecomment-581206177,"This patch adds write support for 16-bit PNG.
I tried to mimic the way it is done on the read side, by having a special _16 function. I didn't modify the interface of any previously exposed functions.
Most of the functionality is shared with the 8-bit PNG writer, and I expect it to get a comparable performance and compression ratio. But I admit I haven't measured it.","Thanks for review, Sean.
Updated commit. Overhead per frame in 8-bit mode with patch vs current master:
2 mul, 1 div, 2 branches",True,{}
nothings/stb,https://github.com/nothings/stb,763,2019-05-11T11:41:11Z,,2022-05-02T19:00:24Z,OPEN,False,137,18,3,https://github.com/WearerOfShoes,Add write support for 16-bit PNG,1,['1 stb_image_write'],https://github.com/nothings/stb/pull/763,https://github.com/nothings,4,https://github.com/nothings/stb/pull/763#issuecomment-581209945,"This patch adds write support for 16-bit PNG.
I tried to mimic the way it is done on the read side, by having a special _16 function. I didn't modify the interface of any previously exposed functions.
Most of the functionality is shared with the 8-bit PNG writer, and I expect it to get a comparable performance and compression ratio. But I admit I haven't measured it.","ok, yeah, that works too. i didn't realize it was a loop-constant that compiler MIGHT have fixed, but still worth changing.",True,{}
nothings/stb,https://github.com/nothings/stb,764,2019-05-15T07:15:46Z,2020-02-02T19:33:21Z,2020-02-02T22:40:46Z,MERGED,True,3,0,1,https://github.com/BlackMATov,stb_image: fix warning (unused parameter ‘bpc’),1,['1 stb_image'],https://github.com/nothings/stb/pull/764,https://github.com/BlackMATov,1,https://github.com/nothings/stb/pull/764,Fixes issue #745.,Fixes issue #745.,True,{}
nothings/stb,https://github.com/nothings/stb,764,2019-05-15T07:15:46Z,2020-02-02T19:33:21Z,2020-02-02T22:40:46Z,MERGED,True,3,0,1,https://github.com/BlackMATov,stb_image: fix warning (unused parameter ‘bpc’),1,['1 stb_image'],https://github.com/nothings/stb/pull/764,https://github.com/nothings,2,https://github.com/nothings/stb/pull/764#issuecomment-581150959,Fixes issue #745.,Fixes #745.,True,{}
nothings/stb,https://github.com/nothings/stb,769,2019-05-27T09:27:09Z,2019-06-17T12:44:33Z,2019-06-17T12:44:33Z,MERGED,True,33,10,1,https://github.com/vfig,"Use free() to free instead of realloc() - Fixes #768, #733",3,[],https://github.com/nothings/stb/pull/769,https://github.com/vfig,1,https://github.com/nothings/stb/pull/769,"Three commits: take 1, or 1 and 2, or all:


Just  use free() instead of realloc(x, 0), no other changes.


Use STBDS_REALLOC and STBDS_FREE defines so user can override (globally, ugh).


Require STBDS_REALLOC and STBDS_FREE overrides in implementation only (needed stbds_free() wrapper function).","Three commits: take 1, or 1 and 2, or all:


Just  use free() instead of realloc(x, 0), no other changes.


Use STBDS_REALLOC and STBDS_FREE defines so user can override (globally, ugh).


Require STBDS_REALLOC and STBDS_FREE overrides in implementation only (needed stbds_free() wrapper function).",True,{}
nothings/stb,https://github.com/nothings/stb,769,2019-05-27T09:27:09Z,2019-06-17T12:44:33Z,2019-06-17T12:44:33Z,MERGED,True,33,10,1,https://github.com/vfig,"Use free() to free instead of realloc() - Fixes #768, #733",3,[],https://github.com/nothings/stb/pull/769,https://github.com/nothings,2,https://github.com/nothings/stb/pull/769#issuecomment-502661063,"Three commits: take 1, or 1 and 2, or all:


Just  use free() instead of realloc(x, 0), no other changes.


Use STBDS_REALLOC and STBDS_FREE defines so user can override (globally, ugh).


Require STBDS_REALLOC and STBDS_FREE overrides in implementation only (needed stbds_free() wrapper function).","I added a 'context' parameter for STBDS_REALLOC/STBDS_FREE for future expansion, it's always passed NULL for now.
I removed the stbds_free() function that wrapped STBDS_FREE as I couldn't see any purpose to it.",True,{}
nothings/stb,https://github.com/nothings/stb,771,2019-06-01T09:11:23Z,2019-06-17T12:44:33Z,2019-06-17T12:44:34Z,MERGED,True,3,2,1,https://github.com/phoekz,stb_ds.h: hmlen and hmlenu now returns 0 on NULL pointer,2,[],https://github.com/nothings/stb/pull/771,https://github.com/phoekz,1,https://github.com/nothings/stb/pull/771,#770,#770,True,{}
nothings/stb,https://github.com/nothings/stb,778,2019-07-08T20:43:57Z,2020-02-02T19:35:13Z,2020-02-02T19:35:13Z,CLOSED,False,30,15,2,https://github.com/podsvirov,stb_easy_font: split declarations and definitions,1,['1 stb library w/no tag'],https://github.com/nothings/stb/pull/778,https://github.com/podsvirov,1,https://github.com/nothings/stb/pull/778,"Check STB_EASY_FONT_IMPLEMENTATION before define implementation.
Closes #777","Check STB_EASY_FONT_IMPLEMENTATION before define implementation.
Closes #777",True,{}
nothings/stb,https://github.com/nothings/stb,778,2019-07-08T20:43:57Z,2020-02-02T19:35:13Z,2020-02-02T19:35:13Z,CLOSED,False,30,15,2,https://github.com/podsvirov,stb_easy_font: split declarations and definitions,1,['1 stb library w/no tag'],https://github.com/nothings/stb/pull/778,https://github.com/nothings,2,https://github.com/nothings/stb/pull/778#issuecomment-581151218,"Check STB_EASY_FONT_IMPLEMENTATION before define implementation.
Closes #777",closed in favor of #779,True,{}
nothings/stb,https://github.com/nothings/stb,779,2019-07-09T19:32:18Z,2020-02-02T19:33:21Z,2020-02-29T15:47:50Z,MERGED,True,6,5,1,https://github.com/podsvirov,stb_easy_font: fix multiple definition errors,1,['1 stb library w/no tag'],https://github.com/nothings/stb/pull/779,https://github.com/podsvirov,1,https://github.com/nothings/stb/pull/779,"There changes fix posible multiple definition errors when
include stb_easy_font.h header to more then one source file.
Closes #777","There changes fix posible multiple definition errors when
include stb_easy_font.h header to more then one source file.
Closes #777",True,{}
nothings/stb,https://github.com/nothings/stb,779,2019-07-09T19:32:18Z,2020-02-02T19:33:21Z,2020-02-29T15:47:50Z,MERGED,True,6,5,1,https://github.com/podsvirov,stb_easy_font: fix multiple definition errors,1,['1 stb library w/no tag'],https://github.com/nothings/stb/pull/779,https://github.com/podsvirov,2,https://github.com/nothings/stb/pull/779#issuecomment-581114245,"There changes fix posible multiple definition errors when
include stb_easy_font.h header to more then one source file.
Closes #777","Hello @nothings, the #777 was closed, but what about to merge this PR?",True,{}
nothings/stb,https://github.com/nothings/stb,779,2019-07-09T19:32:18Z,2020-02-02T19:33:21Z,2020-02-29T15:47:50Z,MERGED,True,6,5,1,https://github.com/podsvirov,stb_easy_font: fix multiple definition errors,1,['1 stb library w/no tag'],https://github.com/nothings/stb/pull/779,https://github.com/nothings,3,https://github.com/nothings/stb/pull/779#issuecomment-581131807,"There changes fix posible multiple definition errors when
include stb_easy_font.h header to more then one source file.
Closes #777",You're not helping.,True,{}
nothings/stb,https://github.com/nothings/stb,779,2019-07-09T19:32:18Z,2020-02-02T19:33:21Z,2020-02-29T15:47:50Z,MERGED,True,6,5,1,https://github.com/podsvirov,stb_easy_font: fix multiple definition errors,1,['1 stb library w/no tag'],https://github.com/nothings/stb/pull/779,https://github.com/podsvirov,4,https://github.com/nothings/stb/pull/779#issuecomment-581132721,"There changes fix posible multiple definition errors when
include stb_easy_font.h header to more then one source file.
Closes #777",How I can helping?,True,{}
nothings/stb,https://github.com/nothings/stb,779,2019-07-09T19:32:18Z,2020-02-02T19:33:21Z,2020-02-29T15:47:50Z,MERGED,True,6,5,1,https://github.com/podsvirov,stb_easy_font: fix multiple definition errors,1,['1 stb library w/no tag'],https://github.com/nothings/stb/pull/779,https://github.com/nothings,5,https://github.com/nothings/stb/pull/779#issuecomment-581135556,"There changes fix posible multiple definition errors when
include stb_easy_font.h header to more then one source file.
Closes #777",Stop posting unhelpful messages to the issue tracker. They just slow me down.,True,{}
nothings/stb,https://github.com/nothings/stb,781,2019-07-17T15:56:20Z,2019-08-11T11:46:36Z,2019-08-11T12:01:34Z,CLOSED,False,30,29,1,https://github.com/sjml,stb_ds.h: shgeti does not return -1 on missing key,2,['1 stb_ds'],https://github.com/nothings/stb/pull/781,https://github.com/sjml,1,https://github.com/nothings/stb/pull/781,"The documentation (and behavior of hmgeti) indicate that shgeti should return -1 if the key is not present in the hashmap. However, it seems to return 0 in that case.
Here is a minimal program that displays the bug.
#include <assert.h>

#include ""stb_ds.h""

int main (int argc, char *argv[]) {
    struct { int   key; int value; } *intToIntMap = NULL;
    struct { char* key; int value; } *stringToIntMap = NULL;

    assert(hmgeti(intToIntMap, 10) < 0);
    assert(shgeti(stringToIntMap, ""10"") < 0); // <-- assertion fails without patch
    
    hmput(intToIntMap, 10, 12);
    shput(stringToIntMap, ""10"", 12);
    
    assert(hmgeti(intToIntMap, 10) == 0);
    assert(shgeti(stringToIntMap, ""10"") == 0);
    assert(shget(stringToIntMap, ""10"") == 12);
}
I'll admit that I don't fully grok everything that's happening in stb_ds.h, but it looks like there's an off-by-one adjustment being made in hmgeti that is not repeated in shgeti. The change in this PR makes the example program run without assertion, but I haven't performed any more extensive tests than that.","The documentation (and behavior of hmgeti) indicate that shgeti should return -1 if the key is not present in the hashmap. However, it seems to return 0 in that case.
Here is a minimal program that displays the bug.
#include <assert.h>

#include ""stb_ds.h""

int main (int argc, char *argv[]) {
    struct { int   key; int value; } *intToIntMap = NULL;
    struct { char* key; int value; } *stringToIntMap = NULL;

    assert(hmgeti(intToIntMap, 10) < 0);
    assert(shgeti(stringToIntMap, ""10"") < 0); // <-- assertion fails without patch
    
    hmput(intToIntMap, 10, 12);
    shput(stringToIntMap, ""10"", 12);
    
    assert(hmgeti(intToIntMap, 10) == 0);
    assert(shgeti(stringToIntMap, ""10"") == 0);
    assert(shget(stringToIntMap, ""10"") == 12);
}
I'll admit that I don't fully grok everything that's happening in stb_ds.h, but it looks like there's an off-by-one adjustment being made in hmgeti that is not repeated in shgeti. The change in this PR makes the example program run without assertion, but I haven't performed any more extensive tests than that.",True,{}
nothings/stb,https://github.com/nothings/stb,781,2019-07-17T15:56:20Z,2019-08-11T11:46:36Z,2019-08-11T12:01:34Z,CLOSED,False,30,29,1,https://github.com/sjml,stb_ds.h: shgeti does not return -1 on missing key,2,['1 stb_ds'],https://github.com/nothings/stb/pull/781,https://github.com/nothings,2,https://github.com/nothings/stb/pull/781#issuecomment-512589435,"The documentation (and behavior of hmgeti) indicate that shgeti should return -1 if the key is not present in the hashmap. However, it seems to return 0 in that case.
Here is a minimal program that displays the bug.
#include <assert.h>

#include ""stb_ds.h""

int main (int argc, char *argv[]) {
    struct { int   key; int value; } *intToIntMap = NULL;
    struct { char* key; int value; } *stringToIntMap = NULL;

    assert(hmgeti(intToIntMap, 10) < 0);
    assert(shgeti(stringToIntMap, ""10"") < 0); // <-- assertion fails without patch
    
    hmput(intToIntMap, 10, 12);
    shput(stringToIntMap, ""10"", 12);
    
    assert(hmgeti(intToIntMap, 10) == 0);
    assert(shgeti(stringToIntMap, ""10"") == 0);
    assert(shget(stringToIntMap, ""10"") == 12);
}
I'll admit that I don't fully grok everything that's happening in stb_ds.h, but it looks like there's an off-by-one adjustment being made in hmgeti that is not repeated in shgeti. The change in this PR makes the example program run without assertion, but I haven't performed any more extensive tests than that.","#771/#770 was related, should probably make a pass through all the functions and make sure they're all right/consistent.",True,{}
nothings/stb,https://github.com/nothings/stb,781,2019-07-17T15:56:20Z,2019-08-11T11:46:36Z,2019-08-11T12:01:34Z,CLOSED,False,30,29,1,https://github.com/sjml,stb_ds.h: shgeti does not return -1 on missing key,2,['1 stb_ds'],https://github.com/nothings/stb/pull/781,https://github.com/sjml,3,https://github.com/nothings/stb/pull/781#issuecomment-512676077,"The documentation (and behavior of hmgeti) indicate that shgeti should return -1 if the key is not present in the hashmap. However, it seems to return 0 in that case.
Here is a minimal program that displays the bug.
#include <assert.h>

#include ""stb_ds.h""

int main (int argc, char *argv[]) {
    struct { int   key; int value; } *intToIntMap = NULL;
    struct { char* key; int value; } *stringToIntMap = NULL;

    assert(hmgeti(intToIntMap, 10) < 0);
    assert(shgeti(stringToIntMap, ""10"") < 0); // <-- assertion fails without patch
    
    hmput(intToIntMap, 10, 12);
    shput(stringToIntMap, ""10"", 12);
    
    assert(hmgeti(intToIntMap, 10) == 0);
    assert(shgeti(stringToIntMap, ""10"") == 0);
    assert(shget(stringToIntMap, ""10"") == 12);
}
I'll admit that I don't fully grok everything that's happening in stb_ds.h, but it looks like there's an off-by-one adjustment being made in hmgeti that is not repeated in shgeti. The change in this PR makes the example program run without assertion, but I haven't performed any more extensive tests than that.","If it would be useful, I could put together a test file to run the functions through their paces. I didn’t see any issues with NULL returns, so long as the empty map is properly set to NULL instead of uninitialized.",True,{}
nothings/stb,https://github.com/nothings/stb,781,2019-07-17T15:56:20Z,2019-08-11T11:46:36Z,2019-08-11T12:01:34Z,CLOSED,False,30,29,1,https://github.com/sjml,stb_ds.h: shgeti does not return -1 on missing key,2,['1 stb_ds'],https://github.com/nothings/stb/pull/781,https://github.com/nakst,4,https://github.com/nothings/stb/pull/781#issuecomment-516453256,"The documentation (and behavior of hmgeti) indicate that shgeti should return -1 if the key is not present in the hashmap. However, it seems to return 0 in that case.
Here is a minimal program that displays the bug.
#include <assert.h>

#include ""stb_ds.h""

int main (int argc, char *argv[]) {
    struct { int   key; int value; } *intToIntMap = NULL;
    struct { char* key; int value; } *stringToIntMap = NULL;

    assert(hmgeti(intToIntMap, 10) < 0);
    assert(shgeti(stringToIntMap, ""10"") < 0); // <-- assertion fails without patch
    
    hmput(intToIntMap, 10, 12);
    shput(stringToIntMap, ""10"", 12);
    
    assert(hmgeti(intToIntMap, 10) == 0);
    assert(shgeti(stringToIntMap, ""10"") == 0);
    assert(shget(stringToIntMap, ""10"") == 12);
}
I'll admit that I don't fully grok everything that's happening in stb_ds.h, but it looks like there's an off-by-one adjustment being made in hmgeti that is not repeated in shgeti. The change in this PR makes the example program run without assertion, but I haven't performed any more extensive tests than that.","I have also experienced this problem, and the fix in this pull request is the same that I discovered.",True,{}
nothings/stb,https://github.com/nothings/stb,781,2019-07-17T15:56:20Z,2019-08-11T11:46:36Z,2019-08-11T12:01:34Z,CLOSED,False,30,29,1,https://github.com/sjml,stb_ds.h: shgeti does not return -1 on missing key,2,['1 stb_ds'],https://github.com/nothings/stb/pull/781,https://github.com/nakst,5,https://github.com/nothings/stb/pull/781#issuecomment-516454262,"The documentation (and behavior of hmgeti) indicate that shgeti should return -1 if the key is not present in the hashmap. However, it seems to return 0 in that case.
Here is a minimal program that displays the bug.
#include <assert.h>

#include ""stb_ds.h""

int main (int argc, char *argv[]) {
    struct { int   key; int value; } *intToIntMap = NULL;
    struct { char* key; int value; } *stringToIntMap = NULL;

    assert(hmgeti(intToIntMap, 10) < 0);
    assert(shgeti(stringToIntMap, ""10"") < 0); // <-- assertion fails without patch
    
    hmput(intToIntMap, 10, 12);
    shput(stringToIntMap, ""10"", 12);
    
    assert(hmgeti(intToIntMap, 10) == 0);
    assert(shgeti(stringToIntMap, ""10"") == 0);
    assert(shget(stringToIntMap, ""10"") == 12);
}
I'll admit that I don't fully grok everything that's happening in stb_ds.h, but it looks like there's an off-by-one adjustment being made in hmgeti that is not repeated in shgeti. The change in this PR makes the example program run without assertion, but I haven't performed any more extensive tests than that.","You may also wish to wrap the ""t"" in brackets, as is done in hm~ functions.",True,{}
nothings/stb,https://github.com/nothings/stb,781,2019-07-17T15:56:20Z,2019-08-11T11:46:36Z,2019-08-11T12:01:34Z,CLOSED,False,30,29,1,https://github.com/sjml,stb_ds.h: shgeti does not return -1 on missing key,2,['1 stb_ds'],https://github.com/nothings/stb/pull/781,https://github.com/phoekz,6,https://github.com/nothings/stb/pull/781#issuecomment-518687428,"The documentation (and behavior of hmgeti) indicate that shgeti should return -1 if the key is not present in the hashmap. However, it seems to return 0 in that case.
Here is a minimal program that displays the bug.
#include <assert.h>

#include ""stb_ds.h""

int main (int argc, char *argv[]) {
    struct { int   key; int value; } *intToIntMap = NULL;
    struct { char* key; int value; } *stringToIntMap = NULL;

    assert(hmgeti(intToIntMap, 10) < 0);
    assert(shgeti(stringToIntMap, ""10"") < 0); // <-- assertion fails without patch
    
    hmput(intToIntMap, 10, 12);
    shput(stringToIntMap, ""10"", 12);
    
    assert(hmgeti(intToIntMap, 10) == 0);
    assert(shgeti(stringToIntMap, ""10"") == 0);
    assert(shget(stringToIntMap, ""10"") == 12);
}
I'll admit that I don't fully grok everything that's happening in stb_ds.h, but it looks like there's an off-by-one adjustment being made in hmgeti that is not repeated in shgeti. The change in this PR makes the example program run without assertion, but I haven't performed any more extensive tests than that.",I independently ran into the exact same problem and the exact same fix 😄.,True,{}
nothings/stb,https://github.com/nothings/stb,781,2019-07-17T15:56:20Z,2019-08-11T11:46:36Z,2019-08-11T12:01:34Z,CLOSED,False,30,29,1,https://github.com/sjml,stb_ds.h: shgeti does not return -1 on missing key,2,['1 stb_ds'],https://github.com/nothings/stb/pull/781,https://github.com/nothings,7,https://github.com/nothings/stb/pull/781#issuecomment-520221680,"The documentation (and behavior of hmgeti) indicate that shgeti should return -1 if the key is not present in the hashmap. However, it seems to return 0 in that case.
Here is a minimal program that displays the bug.
#include <assert.h>

#include ""stb_ds.h""

int main (int argc, char *argv[]) {
    struct { int   key; int value; } *intToIntMap = NULL;
    struct { char* key; int value; } *stringToIntMap = NULL;

    assert(hmgeti(intToIntMap, 10) < 0);
    assert(shgeti(stringToIntMap, ""10"") < 0); // <-- assertion fails without patch
    
    hmput(intToIntMap, 10, 12);
    shput(stringToIntMap, ""10"", 12);
    
    assert(hmgeti(intToIntMap, 10) == 0);
    assert(shgeti(stringToIntMap, ""10"") == 0);
    assert(shget(stringToIntMap, ""10"") == 12);
}
I'll admit that I don't fully grok everything that's happening in stb_ds.h, but it looks like there's an off-by-one adjustment being made in hmgeti that is not repeated in shgeti. The change in this PR makes the example program run without assertion, but I haven't performed any more extensive tests than that.","I fixed this independently, as the provided fix also had whitespace changes. I also added cases to trigger this to the existing unit tests. In next version.",True,{}
nothings/stb,https://github.com/nothings/stb,781,2019-07-17T15:56:20Z,2019-08-11T11:46:36Z,2019-08-11T12:01:34Z,CLOSED,False,30,29,1,https://github.com/sjml,stb_ds.h: shgeti does not return -1 on missing key,2,['1 stb_ds'],https://github.com/nothings/stb/pull/781,https://github.com/sjml,8,https://github.com/nothings/stb/pull/781#issuecomment-520222561,"The documentation (and behavior of hmgeti) indicate that shgeti should return -1 if the key is not present in the hashmap. However, it seems to return 0 in that case.
Here is a minimal program that displays the bug.
#include <assert.h>

#include ""stb_ds.h""

int main (int argc, char *argv[]) {
    struct { int   key; int value; } *intToIntMap = NULL;
    struct { char* key; int value; } *stringToIntMap = NULL;

    assert(hmgeti(intToIntMap, 10) < 0);
    assert(shgeti(stringToIntMap, ""10"") < 0); // <-- assertion fails without patch
    
    hmput(intToIntMap, 10, 12);
    shput(stringToIntMap, ""10"", 12);
    
    assert(hmgeti(intToIntMap, 10) == 0);
    assert(shgeti(stringToIntMap, ""10"") == 0);
    assert(shget(stringToIntMap, ""10"") == 12);
}
I'll admit that I don't fully grok everything that's happening in stb_ds.h, but it looks like there's an off-by-one adjustment being made in hmgeti that is not repeated in shgeti. The change in this PR makes the example program run without assertion, but I haven't performed any more extensive tests than that.",Thanks! Sorry for the whitespace changes; my editor can be overly aggro at times.,True,{}
nothings/stb,https://github.com/nothings/stb,782,2019-07-18T12:57:21Z,2019-08-11T12:24:09Z,2019-08-11T12:24:09Z,CLOSED,False,1,2,1,https://github.com/nikolaydio,Prefer gpos over kern table. By default some newer font tools export …,1,['1 stb_truetype'],https://github.com/nothings/stb/pull/782,https://github.com/nikolaydio,1,https://github.com/nothings/stb/pull/782,…both tables(for backwards compatiblity) and it seems we should be using only gpos if both are available.(Or otherwise we get kern values * 2),…both tables(for backwards compatiblity) and it seems we should be using only gpos if both are available.(Or otherwise we get kern values * 2),True,{}
nothings/stb,https://github.com/nothings/stb,782,2019-07-18T12:57:21Z,2019-08-11T12:24:09Z,2019-08-11T12:24:09Z,CLOSED,False,1,2,1,https://github.com/nikolaydio,Prefer gpos over kern table. By default some newer font tools export …,1,['1 stb_truetype'],https://github.com/nothings/stb/pull/782,https://github.com/NiLuJe,2,https://github.com/nothings/stb/pull/782#issuecomment-512869308,…both tables(for backwards compatiblity) and it seems we should be using only gpos if both are available.(Or otherwise we get kern values * 2),"This doesn't work if there's a GPOS table, but with data in a format that stb doesn't understand, while the kern table is usable. I think Noto is a good testcase for this, IIRC. This leads to no kerning being done instead of using the kern table.
I settled for
   if (info->gpos)
      xAdvance += stbtt__GetGlyphGPOSInfoAdvance(info, g1, g2);
   if (info->kern && xAdvance == 0)
      xAdvance += stbtt__GetGlyphKernInfoAdvance(info, g1, g2);
which looks fairly terrible, and assumes that nothing will ever actually set a kerning of 0 somewhere, but appears to behave.
Could possibly be made less terrible if gpos/kern had sentinel values meaning 'actually usable', instead of simply 'present'.",True,{'THUMBS_UP': ['https://github.com/JoshuaWebb']}
nothings/stb,https://github.com/nothings/stb,782,2019-07-18T12:57:21Z,2019-08-11T12:24:09Z,2019-08-11T12:24:09Z,CLOSED,False,1,2,1,https://github.com/nikolaydio,Prefer gpos over kern table. By default some newer font tools export …,1,['1 stb_truetype'],https://github.com/nothings/stb/pull/782,https://github.com/nikolaydio,3,https://github.com/nothings/stb/pull/782#issuecomment-513125975,…both tables(for backwards compatiblity) and it seems we should be using only gpos if both are available.(Or otherwise we get kern values * 2),"Well, your solution looks fine. I don't think it is terrible at all.
It would be nice, however, if this was patched anyhow, since the default solution to font issues is to validate the font is rendered correctly by other software and update the truetype library.
And in this case the patch is a single line, regardless of the way we go, and the issue is known since January.
#691",True,{}
nothings/stb,https://github.com/nothings/stb,782,2019-07-18T12:57:21Z,2019-08-11T12:24:09Z,2019-08-11T12:24:09Z,CLOSED,False,1,2,1,https://github.com/nikolaydio,Prefer gpos over kern table. By default some newer font tools export …,1,['1 stb_truetype'],https://github.com/nothings/stb/pull/782,https://github.com/nothings,4,https://github.com/nothings/stb/pull/782#issuecomment-520223951,…both tables(for backwards compatiblity) and it seems we should be using only gpos if both are available.(Or otherwise we get kern values * 2),The if..else construct is in the newest forthcoming release.,True,{}
nothings/stb,https://github.com/nothings/stb,786,2019-08-04T01:20:14Z,2020-02-02T19:33:20Z,2020-02-02T19:33:20Z,MERGED,True,1,0,1,None,stb_perlin: extern stb_perlin_noise3_seed,1,['1 stb library w/no tag'],https://github.com/nothings/stb/pull/786,None,1,https://github.com/nothings/stb/pull/786,"Make sure you're using a special branch just for this pull request. (Sometimes people unknowingly use a default branch, then later update that branch, which updates the pull request with the other changes if it hasn't been merged yet.)

Whoops. Anyways, this is needed for doing custom fractal stuff.","Make sure you're using a special branch just for this pull request. (Sometimes people unknowingly use a default branch, then later update that branch, which updates the pull request with the other changes if it hasn't been merged yet.)

Whoops. Anyways, this is needed for doing custom fractal stuff.",True,{}
nothings/stb,https://github.com/nothings/stb,786,2019-08-04T01:20:14Z,2020-02-02T19:33:20Z,2020-02-02T19:33:20Z,MERGED,True,1,0,1,None,stb_perlin: extern stb_perlin_noise3_seed,1,['1 stb library w/no tag'],https://github.com/nothings/stb/pull/786,None,2,https://github.com/nothings/stb/pull/786#issuecomment-522431993,"Make sure you're using a special branch just for this pull request. (Sometimes people unknowingly use a default branch, then later update that branch, which updates the pull request with the other changes if it hasn't been merged yet.)

Whoops. Anyways, this is needed for doing custom fractal stuff.",Any reason you're hesitating to merge this?,True,{}
nothings/stb,https://github.com/nothings/stb,786,2019-08-04T01:20:14Z,2020-02-02T19:33:20Z,2020-02-02T19:33:20Z,MERGED,True,1,0,1,None,stb_perlin: extern stb_perlin_noise3_seed,1,['1 stb library w/no tag'],https://github.com/nothings/stb/pull/786,https://github.com/nothings,3,https://github.com/nothings/stb/pull/786#issuecomment-522433546,"Make sure you're using a special branch just for this pull request. (Sometimes people unknowingly use a default branch, then later update that branch, which updates the pull request with the other changes if it hasn't been merged yet.)

Whoops. Anyways, this is needed for doing custom fractal stuff.","I only process PRs in batches every several months, not as they come in.",True,{}
nothings/stb,https://github.com/nothings/stb,786,2019-08-04T01:20:14Z,2020-02-02T19:33:20Z,2020-02-02T19:33:20Z,MERGED,True,1,0,1,None,stb_perlin: extern stb_perlin_noise3_seed,1,['1 stb library w/no tag'],https://github.com/nothings/stb/pull/786,None,4,https://github.com/nothings/stb/pull/786#issuecomment-522463831,"Make sure you're using a special branch just for this pull request. (Sometimes people unknowingly use a default branch, then later update that branch, which updates the pull request with the other changes if it hasn't been merged yet.)

Whoops. Anyways, this is needed for doing custom fractal stuff.","Ok. For this one, you changed the file so it might better for you to just add the export yourself and close the PR.
…
On August 19, 2019 12:38:34 AM MDT, Sean Barrett ***@***.***> wrote:
I only process PRs in batches every several months, not as they come
in.

--
You are receiving this because you authored the thread.
Reply to this email directly or view it on GitHub:
#786 (comment)",True,{}
nothings/stb,https://github.com/nothings/stb,786,2019-08-04T01:20:14Z,2020-02-02T19:33:20Z,2020-02-02T19:33:20Z,MERGED,True,1,0,1,None,stb_perlin: extern stb_perlin_noise3_seed,1,['1 stb library w/no tag'],https://github.com/nothings/stb/pull/786,https://github.com/nothings,5,https://github.com/nothings/stb/pull/786#issuecomment-522471727,"Make sure you're using a special branch just for this pull request. (Sometimes people unknowingly use a default branch, then later update that branch, which updates the pull request with the other changes if it hasn't been merged yet.)

Whoops. Anyways, this is needed for doing custom fractal stuff.","git is smart enough to merge it properly.
BTW, it must have semed weird that i changed this file and didn't process your PR, but what happened is I had made a local change to this file like 3 months ago, and since all the libs are in the same repository it was easier to just release that change while I was processing some other things. I didn't fully triage all the open PRs, just tagged them with which lib they were in and only processed the bugs for some libs, not this one.",True,{}
nothings/stb,https://github.com/nothings/stb,786,2019-08-04T01:20:14Z,2020-02-02T19:33:20Z,2020-02-02T19:33:20Z,MERGED,True,1,0,1,None,stb_perlin: extern stb_perlin_noise3_seed,1,['1 stb library w/no tag'],https://github.com/nothings/stb/pull/786,None,6,https://github.com/nothings/stb/pull/786#issuecomment-522478198,"Make sure you're using a special branch just for this pull request. (Sometimes people unknowingly use a default branch, then later update that branch, which updates the pull request with the other changes if it hasn't been merged yet.)

Whoops. Anyways, this is needed for doing custom fractal stuff.","Magic!
…
On August 19, 2019 2:40:42 AM MDT, Sean Barrett ***@***.***> wrote:
git is smart enough to merge it properly.

BTW, it must have semed weird that i changed this file and didn't
process your PR, but what happened is I had made a local change to this
file like 3 months ago, and since all the libs are in the same
repository it was easier to just release that change while I was
processing some other things. I didn't fully triage all the open PRs,
just tagged them with which lib they were in and only processed the
bugs for some libs, not this one.

--
You are receiving this because you authored the thread.
Reply to this email directly or view it on GitHub:
#786 (comment)",True,{}
nothings/stb,https://github.com/nothings/stb,788,2019-08-05T23:01:54Z,2019-08-11T12:12:08Z,2019-08-11T12:12:08Z,CLOSED,False,122,28,1,https://github.com/kg,"[prototype changeset] Indexed PNGs, configurable buffer size",1,['1 stb_image'],https://github.com/nothings/stb/pull/788,https://github.com/kg,1,https://github.com/nothings/stb/pull/788,"Hi, this is a small set of prototype changes I wanted to submit for review. I am happy to make any formatting changes or otherwise and I can remove any changes you don't want to merge. I can also split this into separate PRs, it was just easiest to submit a single diff (and I would hope this is easier for you to review). The changes are as follows:

Add API for loading 8-bit indexed color PNGs or TGAs without converting them to RGBA.
Palette is stored into an input buffer provided by the caller.
Fix erroneous SOI error when testing whether an image is a JPEG (#787).
Allow configuring the buffer size when including stb_image.
This improves load performance.","Hi, this is a small set of prototype changes I wanted to submit for review. I am happy to make any formatting changes or otherwise and I can remove any changes you don't want to merge. I can also split this into separate PRs, it was just easiest to submit a single diff (and I would hope this is easier for you to review). The changes are as follows:

Add API for loading 8-bit indexed color PNGs or TGAs without converting them to RGBA.
Palette is stored into an input buffer provided by the caller.
Fix erroneous SOI error when testing whether an image is a JPEG (#787).
Allow configuring the buffer size when including stb_image.
This improves load performance.",True,{}
nothings/stb,https://github.com/nothings/stb,788,2019-08-05T23:01:54Z,2019-08-11T12:12:08Z,2019-08-11T12:12:08Z,CLOSED,False,122,28,1,https://github.com/kg,"[prototype changeset] Indexed PNGs, configurable buffer size",1,['1 stb_image'],https://github.com/nothings/stb/pull/788,https://github.com/nothings,2,https://github.com/nothings/stb/pull/788#issuecomment-520219508,"Hi, this is a small set of prototype changes I wanted to submit for review. I am happy to make any formatting changes or otherwise and I can remove any changes you don't want to merge. I can also split this into separate PRs, it was just easiest to submit a single diff (and I would hope this is easier for you to review). The changes are as follows:

Add API for loading 8-bit indexed color PNGs or TGAs without converting them to RGBA.
Palette is stored into an input buffer provided by the caller.
Fix erroneous SOI error when testing whether an image is a JPEG (#787).
Allow configuring the buffer size when including stb_image.
This improves load performance.","Can you back out the SOI changes, given the discussion in #787?",True,{}
nothings/stb,https://github.com/nothings/stb,788,2019-08-05T23:01:54Z,2019-08-11T12:12:08Z,2019-08-11T12:12:08Z,CLOSED,False,122,28,1,https://github.com/kg,"[prototype changeset] Indexed PNGs, configurable buffer size",1,['1 stb_image'],https://github.com/nothings/stb/pull/788,https://github.com/kg,3,https://github.com/nothings/stb/pull/788#issuecomment-520220485,"Hi, this is a small set of prototype changes I wanted to submit for review. I am happy to make any formatting changes or otherwise and I can remove any changes you don't want to merge. I can also split this into separate PRs, it was just easiest to submit a single diff (and I would hope this is easier for you to review). The changes are as follows:

Add API for loading 8-bit indexed color PNGs or TGAs without converting them to RGBA.
Palette is stored into an input buffer provided by the caller.
Fix erroneous SOI error when testing whether an image is a JPEG (#787).
Allow configuring the buffer size when including stb_image.
This improves load performance.",Should be gone now.,True,{}
nothings/stb,https://github.com/nothings/stb,788,2019-08-05T23:01:54Z,2019-08-11T12:12:08Z,2019-08-11T12:12:08Z,CLOSED,False,122,28,1,https://github.com/kg,"[prototype changeset] Indexed PNGs, configurable buffer size",1,['1 stb_image'],https://github.com/nothings/stb/pull/788,https://github.com/nothings,4,https://github.com/nothings/stb/pull/788#issuecomment-520221988,"Hi, this is a small set of prototype changes I wanted to submit for review. I am happy to make any formatting changes or otherwise and I can remove any changes you don't want to merge. I can also split this into separate PRs, it was just easiest to submit a single diff (and I would hope this is easier for you to review). The changes are as follows:

Add API for loading 8-bit indexed color PNGs or TGAs without converting them to RGBA.
Palette is stored into an input buffer provided by the caller.
Fix erroneous SOI error when testing whether an image is a JPEG (#787).
Allow configuring the buffer size when including stb_image.
This improves load performance.","Actually, after thinking about it, I don't think I want to take the paletted/indexed PNG changes. I don't think I like either the increased API footprint or the extra code that needs to be maintained (and really, it should be even MORE code, since all other paletted formats should do this as well).
I'm sure you have a need for it, so I guess you'll have to live with keeping a fork of it. :(
I see the 'STBI_BUFFER_SIZE' definition, but I don't see it being used anywhere?",True,{}
nothings/stb,https://github.com/nothings/stb,788,2019-08-05T23:01:54Z,2019-08-11T12:12:08Z,2019-08-11T12:12:08Z,CLOSED,False,122,28,1,https://github.com/kg,"[prototype changeset] Indexed PNGs, configurable buffer size",1,['1 stb_image'],https://github.com/nothings/stb/pull/788,https://github.com/kg,5,https://github.com/nothings/stb/pull/788#issuecomment-520223224,"Hi, this is a small set of prototype changes I wanted to submit for review. I am happy to make any formatting changes or otherwise and I can remove any changes you don't want to merge. I can also split this into separate PRs, it was just easiest to submit a single diff (and I would hope this is easier for you to review). The changes are as follows:

Add API for loading 8-bit indexed color PNGs or TGAs without converting them to RGBA.
Palette is stored into an input buffer provided by the caller.
Fix erroneous SOI error when testing whether an image is a JPEG (#787).
Allow configuring the buffer size when including stb_image.
This improves load performance.","The buffer size probably got lost in the merge, since I wrote this originally on a few-months-old version of stbi.
No worries, I agree that it adds a lot of complexity. Thanks for the review!",True,{}
nothings/stb,https://github.com/nothings/stb,789,2019-08-11T21:03:49Z,2019-08-11T21:08:33Z,2019-08-11T21:08:33Z,MERGED,True,1,1,1,https://github.com/sjml,typo in credit comment,1,[],https://github.com/nothings/stb/pull/789,https://github.com/sjml,1,https://github.com/nothings/stb/pull/789,"This is the opposite of urgent or even that important, but just for the sake of my vanity, my name was misspelled here.","This is the opposite of urgent or even that important, but just for the sake of my vanity, my name was misspelled here.",True,{}
nothings/stb,https://github.com/nothings/stb,791,2019-08-13T10:13:11Z,2020-02-02T19:33:19Z,2020-02-02T20:44:49Z,MERGED,True,8,4,1,https://github.com/dimkr,stb_leakcheck: add support for output to stderr,1,['1 stb library w/no tag'],https://github.com/nothings/stb/pull/791,https://github.com/dimkr,1,https://github.com/nothings/stb/pull/791,"In some use cases, like low-memory situations on devices without persistent storage, redirecting stdout to a file is not an option. But if we want to redirect only the list of leaks, writing it to stderr and redirecting only stderr to a file is a good solution.","In some use cases, like low-memory situations on devices without persistent storage, redirecting stdout to a file is not an option. But if we want to redirect only the list of leaks, writing it to stderr and redirecting only stderr to a file is a good solution.",True,{}
nothings/stb,https://github.com/nothings/stb,795,2019-08-18T17:33:24Z,2020-01-23T06:19:38Z,2020-01-23T06:43:59Z,CLOSED,False,1,1,1,https://github.com/rds1983,stb_truetype.h is actual font text rasterizer,1,[],https://github.com/nothings/stb/pull/795,https://github.com/rds1983,1,https://github.com/nothings/stb/pull/795,Just a small README.md fix,Just a small README.md fix,True,{}
nothings/stb,https://github.com/nothings/stb,795,2019-08-18T17:33:24Z,2020-01-23T06:19:38Z,2020-01-23T06:43:59Z,CLOSED,False,1,1,1,https://github.com/rds1983,stb_truetype.h is actual font text rasterizer,1,[],https://github.com/nothings/stb/pull/795,https://github.com/rds1983,2,https://github.com/nothings/stb/pull/795#issuecomment-540039434,Just a small README.md fix,"Up.
README.me still states that stb_textedit.h is ""font text rasterizer"".",True,{}
nothings/stb,https://github.com/nothings/stb,795,2019-08-18T17:33:24Z,2020-01-23T06:19:38Z,2020-01-23T06:43:59Z,CLOSED,False,1,1,1,https://github.com/rds1983,stb_truetype.h is actual font text rasterizer,1,[],https://github.com/nothings/stb/pull/795,https://github.com/zao,3,https://github.com/nothings/stb/pull/795#issuecomment-540046887,Just a small README.md fix,"@rds1983 Sean processes PRs in batches every now and then, it's normal for PRs to be inert for a long while in this repository.",True,{}
nothings/stb,https://github.com/nothings/stb,795,2019-08-18T17:33:24Z,2020-01-23T06:19:38Z,2020-01-23T06:43:59Z,CLOSED,False,1,1,1,https://github.com/rds1983,stb_truetype.h is actual font text rasterizer,1,[],https://github.com/nothings/stb/pull/795,https://github.com/rds1983,4,https://github.com/nothings/stb/pull/795#issuecomment-540048754,Just a small README.md fix,@zao I see. I was just worried - what if I havent explained what this PR is about clearly.,True,"{'HEART': ['https://github.com/zao'], 'THUMBS_UP': ['https://github.com/nothings']}"
nothings/stb,https://github.com/nothings/stb,795,2019-08-18T17:33:24Z,2020-01-23T06:19:38Z,2020-01-23T06:43:59Z,CLOSED,False,1,1,1,https://github.com/rds1983,stb_truetype.h is actual font text rasterizer,1,[],https://github.com/nothings/stb/pull/795,https://github.com/nothings,5,https://github.com/nothings/stb/pull/795#issuecomment-577527969,Just a small README.md fix,"Yeah, the issue here was that the README.md is actually a generated file, so fixing it there didn't actually fix it correctly, which I did at one point, but then it got overwritten the next time I regenerated it. I had to update the files it's generated from.",True,{}
nothings/stb,https://github.com/nothings/stb,795,2019-08-18T17:33:24Z,2020-01-23T06:19:38Z,2020-01-23T06:43:59Z,CLOSED,False,1,1,1,https://github.com/rds1983,stb_truetype.h is actual font text rasterizer,1,[],https://github.com/nothings/stb/pull/795,https://github.com/rds1983,6,https://github.com/nothings/stb/pull/795#issuecomment-577528985,Just a small README.md fix,I see.,True,{}
nothings/stb,https://github.com/nothings/stb,796,2019-08-22T03:29:18Z,2020-02-02T19:33:19Z,2020-02-02T22:41:32Z,MERGED,True,3,0,1,https://github.com/BlackMATov,stb_image.h: fix warning about unused function 'stbi__err',1,['1 stb_image'],https://github.com/nothings/stb/pull/796,https://github.com/BlackMATov,1,https://github.com/nothings/stb/pull/796,Fixes issue #746.,Fixes issue #746.,True,{}
nothings/stb,https://github.com/nothings/stb,804,2019-09-13T00:19:59Z,2020-02-02T19:33:18Z,2020-02-02T19:33:18Z,MERGED,True,77,1,1,https://github.com/audinowho,Add comment support to stb_vorbis,1,['1 stb_vorbis'],https://github.com/nothings/stb/pull/804,https://github.com/audinowho,1,https://github.com/nothings/stb/pull/804,"This PR implements the the reading of ogg comments from the Second packet in the vorbis specification https://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-820005
The comment reading should be page-agnostic and be able to serve cases where the comment packet spans multiple segments or pages.
I'm not sure which errors to throw when encountering invalid data in this packet.  I have used VORBIS_invalid_setup for these cases but let me know if there's something better.","This PR implements the the reading of ogg comments from the Second packet in the vorbis specification https://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-820005
The comment reading should be page-agnostic and be able to serve cases where the comment packet spans multiple segments or pages.
I'm not sure which errors to throw when encountering invalid data in this packet.  I have used VORBIS_invalid_setup for these cases but let me know if there's something better.",True,{}
nothings/stb,https://github.com/nothings/stb,807,2019-09-30T18:48:53Z,2020-02-01T13:14:30Z,2020-02-01T13:14:30Z,CLOSED,False,0,0,0,https://github.com/KoulickS,Open Source,3,[],https://github.com/nothings/stb/pull/807,https://github.com/KoulickS,1,https://github.com/nothings/stb/pull/807,I love open source,I love open source,True,{}
nothings/stb,https://github.com/nothings/stb,808,2019-09-30T18:54:27Z,2020-02-02T19:33:18Z,2020-02-02T19:33:18Z,MERGED,True,54,0,1,https://github.com/classsic-bot,ckjpr1,1,['1 stb_truetype'],https://github.com/nothings/stb/pull/808,https://github.com/classsic-bot,1,https://github.com/nothings/stb/pull/808,ckpr1,ckpr1,True,{}
nothings/stb,https://github.com/nothings/stb,808,2019-09-30T18:54:27Z,2020-02-02T19:33:18Z,2020-02-02T19:33:18Z,MERGED,True,54,0,1,https://github.com/classsic-bot,ckjpr1,1,['1 stb_truetype'],https://github.com/nothings/stb/pull/808,https://github.com/nothings,2,https://github.com/nothings/stb/pull/808#issuecomment-581167056,ckpr1,"I'm merging this, but it's not actually consistent with how the library currently does kerning, which is now a combination of two tables, based on some previous PR.",True,{}
nothings/stb,https://github.com/nothings/stb,809,2019-09-30T18:54:35Z,2020-02-02T19:33:17Z,2020-02-02T19:33:17Z,MERGED,True,3,3,1,https://github.com/KoulickS,C++ commits,1,['1 stb_sprintf'],https://github.com/nothings/stb/pull/809,https://github.com/KoulickS,1,https://github.com/nothings/stb/pull/809,I love programming,I love programming,True,{}
nothings/stb,https://github.com/nothings/stb,810,2019-09-30T18:57:02Z,2020-02-01T13:13:33Z,2020-02-01T13:13:33Z,CLOSED,False,10179,968,293,https://github.com/classsic-bot,ckpr2,181,[],https://github.com/nothings/stb/pull/810,https://github.com/classsic-bot,1,https://github.com/nothings/stb/pull/810,ckpr2,ckpr2,True,{}
nothings/stb,https://github.com/nothings/stb,810,2019-09-30T18:57:02Z,2020-02-01T13:13:33Z,2020-02-01T13:13:33Z,CLOSED,False,10179,968,293,https://github.com/classsic-bot,ckpr2,181,[],https://github.com/nothings/stb/pull/810,https://github.com/nothings,2,https://github.com/nothings/stb/pull/810#issuecomment-536707171,ckpr2,Umm...,True,{'THUMBS_UP': ['https://github.com/joel16']}
nothings/stb,https://github.com/nothings/stb,810,2019-09-30T18:57:02Z,2020-02-01T13:13:33Z,2020-02-01T13:13:33Z,CLOSED,False,10179,968,293,https://github.com/classsic-bot,ckpr2,181,[],https://github.com/nothings/stb/pull/810,https://github.com/nothings,3,https://github.com/nothings/stb/pull/810#issuecomment-581029019,ckpr2,"Submitter never corrected this submission, I'm closing, feel free to re-submit it properly.",True,{}
nothings/stb,https://github.com/nothings/stb,811,2019-09-30T18:57:19Z,2021-07-07T03:14:37Z,2021-07-07T03:14:37Z,CLOSED,False,66,48,1,https://github.com/KoulickS,C++14,2,['stb.h'],https://github.com/nothings/stb/pull/811,https://github.com/KoulickS,1,https://github.com/nothings/stb/pull/811,Programming is life,Programming is life,True,{}
nothings/stb,https://github.com/nothings/stb,811,2019-09-30T18:57:19Z,2021-07-07T03:14:37Z,2021-07-07T03:14:37Z,CLOSED,False,66,48,1,https://github.com/KoulickS,C++14,2,['stb.h'],https://github.com/nothings/stb/pull/811,https://github.com/nothings,2,https://github.com/nothings/stb/pull/811#issuecomment-581158571,Programming is life,These have a lot of conflicts with current version of stb.h (to be released).,True,{}
nothings/stb,https://github.com/nothings/stb,811,2019-09-30T18:57:19Z,2021-07-07T03:14:37Z,2021-07-07T03:14:37Z,CLOSED,False,66,48,1,https://github.com/KoulickS,C++14,2,['stb.h'],https://github.com/nothings/stb/pull/811,https://github.com/rygorous,3,https://github.com/nothings/stb/pull/811#issuecomment-875239330,Programming is life,"Also introduces some other problems with typecasts we'd have to fix later, and finally stb.h is now deprecated; closing this PR.",True,{}
nothings/stb,https://github.com/nothings/stb,812,2019-09-30T19:06:56Z,2020-07-13T09:39:55Z,2020-07-13T09:39:55Z,CLOSED,False,3,3,1,https://github.com/classsic-bot,ckpr3,1,['stb.h'],https://github.com/nothings/stb/pull/812,https://github.com/classsic-bot,1,https://github.com/nothings/stb/pull/812,ckpr3,ckpr3,True,{}
nothings/stb,https://github.com/nothings/stb,812,2019-09-30T19:06:56Z,2020-07-13T09:39:55Z,2020-07-13T09:39:55Z,CLOSED,False,3,3,1,https://github.com/classsic-bot,ckpr3,1,['stb.h'],https://github.com/nothings/stb/pull/812,https://github.com/nothings,2,https://github.com/nothings/stb/pull/812#issuecomment-581158629,ckpr3,intrptr_t isn't available in most older MSVCs,True,{}
nothings/stb,https://github.com/nothings/stb,812,2019-09-30T19:06:56Z,2020-07-13T09:39:55Z,2020-07-13T09:39:55Z,CLOSED,False,3,3,1,https://github.com/classsic-bot,ckpr3,1,['stb.h'],https://github.com/nothings/stb/pull/812,https://github.com/nothings,3,https://github.com/nothings/stb/pull/812#issuecomment-657447678,ckpr3,"closing due to lack of reply (account has habit of doing this, apparently)",True,{}
nothings/stb,https://github.com/nothings/stb,815,2019-10-03T10:55:34Z,2020-02-02T19:33:16Z,2020-02-02T19:33:16Z,MERGED,True,2,2,1,https://github.com/zanshi,stb_image_write: fix clang warning,1,['1 stb_image_write'],https://github.com/nothings/stb/pull/815,https://github.com/zanshi,1,https://github.com/nothings/stb/pull/815,"fix -Wmissing-variable-declarations clang warning
stbi__flip_vertically_on_write is now static like stbi__vertically_flip_on_load in stb_image.h","fix -Wmissing-variable-declarations clang warning
stbi__flip_vertically_on_write is now static like stbi__vertically_flip_on_load in stb_image.h",True,{}
nothings/stb,https://github.com/nothings/stb,818,2019-10-04T23:16:11Z,2020-02-02T17:41:18Z,2020-02-02T17:41:19Z,CLOSED,False,2,2,1,https://github.com/nsauzede,Suppress a warning about always true comparison,1,['1 stb_image'],https://github.com/nothings/stb/pull/818,https://github.com/nsauzede,1,https://github.com/nothings/stb/pull/818,"With nothings/stb 052dce1, in stb_image.h, I get this warning :
../stb/stb_image.h: In function ‘int stbi__shiftsigned(unsigned int, int, int)’:
../stb/stb_image.h:5114:18: error: comparison of unsigned expression >= 0 is always true [-Werror=type-limits]
 5114 |    STBI_ASSERT(v >= 0 && v < 256); // v is unsigned int, so '>= 0' is always true
      |                ~~^~~~
../stb/stb_image.h:5114:4: note: in expansion of macro ‘STBI_ASSERT’
 5114 |    STBI_ASSERT(v >= 0 && v < 256); // v is unsigned int, so '>= 0' is always true
      |    ^~~~~~~~~~~

Using this compiler :
$ g++ --version
g++ (Clear Linux OS for Intel Architecture) 9.2.1 20191001 gcc-9-branch@276412
Copyright (C) 2019 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

This trivial, one liner, PR fixes just that (but leaves the commented test, to not lose the original intent)","With nothings/stb 052dce1, in stb_image.h, I get this warning :
../stb/stb_image.h: In function ‘int stbi__shiftsigned(unsigned int, int, int)’:
../stb/stb_image.h:5114:18: error: comparison of unsigned expression >= 0 is always true [-Werror=type-limits]
 5114 |    STBI_ASSERT(v >= 0 && v < 256); // v is unsigned int, so '>= 0' is always true
      |                ~~^~~~
../stb/stb_image.h:5114:4: note: in expansion of macro ‘STBI_ASSERT’
 5114 |    STBI_ASSERT(v >= 0 && v < 256); // v is unsigned int, so '>= 0' is always true
      |    ^~~~~~~~~~~

Using this compiler :
$ g++ --version
g++ (Clear Linux OS for Intel Architecture) 9.2.1 20191001 gcc-9-branch@276412
Copyright (C) 2019 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

This trivial, one liner, PR fixes just that (but leaves the commented test, to not lose the original intent)",True,{}
nothings/stb,https://github.com/nothings/stb,818,2019-10-04T23:16:11Z,2020-02-02T17:41:18Z,2020-02-02T17:41:19Z,CLOSED,False,2,2,1,https://github.com/nsauzede,Suppress a warning about always true comparison,1,['1 stb_image'],https://github.com/nothings/stb/pull/818,https://github.com/nsauzede,2,https://github.com/nothings/stb/pull/818#issuecomment-554267807,"With nothings/stb 052dce1, in stb_image.h, I get this warning :
../stb/stb_image.h: In function ‘int stbi__shiftsigned(unsigned int, int, int)’:
../stb/stb_image.h:5114:18: error: comparison of unsigned expression >= 0 is always true [-Werror=type-limits]
 5114 |    STBI_ASSERT(v >= 0 && v < 256); // v is unsigned int, so '>= 0' is always true
      |                ~~^~~~
../stb/stb_image.h:5114:4: note: in expansion of macro ‘STBI_ASSERT’
 5114 |    STBI_ASSERT(v >= 0 && v < 256); // v is unsigned int, so '>= 0' is always true
      |    ^~~~~~~~~~~

Using this compiler :
$ g++ --version
g++ (Clear Linux OS for Intel Architecture) 9.2.1 20191001 gcc-9-branch@276412
Copyright (C) 2019 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

This trivial, one liner, PR fixes just that (but leaves the commented test, to not lose the original intent)","Hello,
any chance to review this trivial PR ?
It causes issues when building applications using the great stb_image, with -Wall -Wextra -Werror",True,{'THUMBS_UP': ['https://github.com/mupfdev']}
nothings/stb,https://github.com/nothings/stb,818,2019-10-04T23:16:11Z,2020-02-02T17:41:18Z,2020-02-02T17:41:19Z,CLOSED,False,2,2,1,https://github.com/nsauzede,Suppress a warning about always true comparison,1,['1 stb_image'],https://github.com/nothings/stb/pull/818,https://github.com/mupfdev,3,https://github.com/nothings/stb/pull/818#issuecomment-554299794,"With nothings/stb 052dce1, in stb_image.h, I get this warning :
../stb/stb_image.h: In function ‘int stbi__shiftsigned(unsigned int, int, int)’:
../stb/stb_image.h:5114:18: error: comparison of unsigned expression >= 0 is always true [-Werror=type-limits]
 5114 |    STBI_ASSERT(v >= 0 && v < 256); // v is unsigned int, so '>= 0' is always true
      |                ~~^~~~
../stb/stb_image.h:5114:4: note: in expansion of macro ‘STBI_ASSERT’
 5114 |    STBI_ASSERT(v >= 0 && v < 256); // v is unsigned int, so '>= 0' is always true
      |    ^~~~~~~~~~~

Using this compiler :
$ g++ --version
g++ (Clear Linux OS for Intel Architecture) 9.2.1 20191001 gcc-9-branch@276412
Copyright (C) 2019 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

This trivial, one liner, PR fixes just that (but leaves the commented test, to not lose the original intent)","I agree, this compile-time assertion is kinda pointless and can safely be removed. It would even be appropriate here to limit the data type to a size of 8 bits (instead of checking if the value goes beyond that).",True,{}
nothings/stb,https://github.com/nothings/stb,818,2019-10-04T23:16:11Z,2020-02-02T17:41:18Z,2020-02-02T17:41:19Z,CLOSED,False,2,2,1,https://github.com/nsauzede,Suppress a warning about always true comparison,1,['1 stb_image'],https://github.com/nothings/stb/pull/818,https://github.com/zao,4,https://github.com/nothings/stb/pull/818#issuecomment-554354670,"With nothings/stb 052dce1, in stb_image.h, I get this warning :
../stb/stb_image.h: In function ‘int stbi__shiftsigned(unsigned int, int, int)’:
../stb/stb_image.h:5114:18: error: comparison of unsigned expression >= 0 is always true [-Werror=type-limits]
 5114 |    STBI_ASSERT(v >= 0 && v < 256); // v is unsigned int, so '>= 0' is always true
      |                ~~^~~~
../stb/stb_image.h:5114:4: note: in expansion of macro ‘STBI_ASSERT’
 5114 |    STBI_ASSERT(v >= 0 && v < 256); // v is unsigned int, so '>= 0' is always true
      |    ^~~~~~~~~~~

Using this compiler :
$ g++ --version
g++ (Clear Linux OS for Intel Architecture) 9.2.1 20191001 gcc-9-branch@276412
Copyright (C) 2019 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

This trivial, one liner, PR fixes just that (but leaves the commented test, to not lose the original intent)","I would like to mention that PRs in this repo are processed in bulk when Sean gets around to it, it's quite normal to take time and shouldn't be considered a problem with the PR itself.",True,{}
nothings/stb,https://github.com/nothings/stb,818,2019-10-04T23:16:11Z,2020-02-02T17:41:18Z,2020-02-02T17:41:19Z,CLOSED,False,2,2,1,https://github.com/nsauzede,Suppress a warning about always true comparison,1,['1 stb_image'],https://github.com/nothings/stb/pull/818,https://github.com/nsauzede,5,https://github.com/nothings/stb/pull/818#issuecomment-554368060,"With nothings/stb 052dce1, in stb_image.h, I get this warning :
../stb/stb_image.h: In function ‘int stbi__shiftsigned(unsigned int, int, int)’:
../stb/stb_image.h:5114:18: error: comparison of unsigned expression >= 0 is always true [-Werror=type-limits]
 5114 |    STBI_ASSERT(v >= 0 && v < 256); // v is unsigned int, so '>= 0' is always true
      |                ~~^~~~
../stb/stb_image.h:5114:4: note: in expansion of macro ‘STBI_ASSERT’
 5114 |    STBI_ASSERT(v >= 0 && v < 256); // v is unsigned int, so '>= 0' is always true
      |    ^~~~~~~~~~~

Using this compiler :
$ g++ --version
g++ (Clear Linux OS for Intel Architecture) 9.2.1 20191001 gcc-9-branch@276412
Copyright (C) 2019 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

This trivial, one liner, PR fixes just that (but leaves the commented test, to not lose the original intent)","aah ok, sorry for the newbie question ;-)
and thanks for the information",True,{}
nothings/stb,https://github.com/nothings/stb,818,2019-10-04T23:16:11Z,2020-02-02T17:41:18Z,2020-02-02T17:41:19Z,CLOSED,False,2,2,1,https://github.com/nsauzede,Suppress a warning about always true comparison,1,['1 stb_image'],https://github.com/nothings/stb/pull/818,https://github.com/nsauzede,6,https://github.com/nothings/stb/pull/818#issuecomment-574818202,"With nothings/stb 052dce1, in stb_image.h, I get this warning :
../stb/stb_image.h: In function ‘int stbi__shiftsigned(unsigned int, int, int)’:
../stb/stb_image.h:5114:18: error: comparison of unsigned expression >= 0 is always true [-Werror=type-limits]
 5114 |    STBI_ASSERT(v >= 0 && v < 256); // v is unsigned int, so '>= 0' is always true
      |                ~~^~~~
../stb/stb_image.h:5114:4: note: in expansion of macro ‘STBI_ASSERT’
 5114 |    STBI_ASSERT(v >= 0 && v < 256); // v is unsigned int, so '>= 0' is always true
      |    ^~~~~~~~~~~

Using this compiler :
$ g++ --version
g++ (Clear Linux OS for Intel Architecture) 9.2.1 20191001 gcc-9-branch@276412
Copyright (C) 2019 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

This trivial, one liner, PR fixes just that (but leaves the commented test, to not lose the original intent)",Hello ?,True,{}
nothings/stb,https://github.com/nothings/stb,818,2019-10-04T23:16:11Z,2020-02-02T17:41:18Z,2020-02-02T17:41:19Z,CLOSED,False,2,2,1,https://github.com/nsauzede,Suppress a warning about always true comparison,1,['1 stb_image'],https://github.com/nothings/stb/pull/818,https://github.com/nothings,7,https://github.com/nothings/stb/pull/818#issuecomment-574967369,"With nothings/stb 052dce1, in stb_image.h, I get this warning :
../stb/stb_image.h: In function ‘int stbi__shiftsigned(unsigned int, int, int)’:
../stb/stb_image.h:5114:18: error: comparison of unsigned expression >= 0 is always true [-Werror=type-limits]
 5114 |    STBI_ASSERT(v >= 0 && v < 256); // v is unsigned int, so '>= 0' is always true
      |                ~~^~~~
../stb/stb_image.h:5114:4: note: in expansion of macro ‘STBI_ASSERT’
 5114 |    STBI_ASSERT(v >= 0 && v < 256); // v is unsigned int, so '>= 0' is always true
      |    ^~~~~~~~~~~

Using this compiler :
$ g++ --version
g++ (Clear Linux OS for Intel Architecture) 9.2.1 20191001 gcc-9-branch@276412
Copyright (C) 2019 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

This trivial, one liner, PR fixes just that (but leaves the commented test, to not lose the original intent)","I would like to mention that PRs in this repo are processed in bulk when Sean gets around to it, it's quite normal to take time and shouldn't be considered a problem with the PR itself.",True,{}
nothings/stb,https://github.com/nothings/stb,818,2019-10-04T23:16:11Z,2020-02-02T17:41:18Z,2020-02-02T17:41:19Z,CLOSED,False,2,2,1,https://github.com/nsauzede,Suppress a warning about always true comparison,1,['1 stb_image'],https://github.com/nothings/stb/pull/818,https://github.com/nothings,8,https://github.com/nothings/stb/pull/818#issuecomment-581158755,"With nothings/stb 052dce1, in stb_image.h, I get this warning :
../stb/stb_image.h: In function ‘int stbi__shiftsigned(unsigned int, int, int)’:
../stb/stb_image.h:5114:18: error: comparison of unsigned expression >= 0 is always true [-Werror=type-limits]
 5114 |    STBI_ASSERT(v >= 0 && v < 256); // v is unsigned int, so '>= 0' is always true
      |                ~~^~~~
../stb/stb_image.h:5114:4: note: in expansion of macro ‘STBI_ASSERT’
 5114 |    STBI_ASSERT(v >= 0 && v < 256); // v is unsigned int, so '>= 0' is always true
      |    ^~~~~~~~~~~

Using this compiler :
$ g++ --version
g++ (Clear Linux OS for Intel Architecture) 9.2.1 20191001 gcc-9-branch@276412
Copyright (C) 2019 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

This trivial, one liner, PR fixes just that (but leaves the commented test, to not lose the original intent)",dupe,True,{}
nothings/stb,https://github.com/nothings/stb,819,2019-10-09T06:41:57Z,2020-02-02T19:33:16Z,2020-02-03T00:53:28Z,MERGED,True,1,1,1,https://github.com/cnlohr,Fix bare backslash n as being a valid whitespace character.,1,['1 stb library w/no tag'],https://github.com/nothings/stb/pull/819,https://github.com/cnlohr,1,https://github.com/nothings/stb/pull/819,The current implementation has trouble with the #inject feature on *nix systems.  Didn't add name to authors list because it was only one line.,The current implementation has trouble with the #inject feature on *nix systems.  Didn't add name to authors list because it was only one line.,True,{'THUMBS_UP': ['https://github.com/nothings']}
nothings/stb,https://github.com/nothings/stb,819,2019-10-09T06:41:57Z,2020-02-02T19:33:16Z,2020-02-03T00:53:28Z,MERGED,True,1,1,1,https://github.com/cnlohr,Fix bare backslash n as being a valid whitespace character.,1,['1 stb library w/no tag'],https://github.com/nothings/stb/pull/819,https://github.com/cnlohr,2,https://github.com/nothings/stb/pull/819#issuecomment-542415059,The current implementation has trouble with the #inject feature on *nix systems.  Didn't add name to authors list because it was only one line.,"I have never made a pull request to STB.  (ok feels a little weird to use his name) but, I wanted to know if I did everything here correctly.",True,{}
nothings/stb,https://github.com/nothings/stb,819,2019-10-09T06:41:57Z,2020-02-02T19:33:16Z,2020-02-03T00:53:28Z,MERGED,True,1,1,1,https://github.com/cnlohr,Fix bare backslash n as being a valid whitespace character.,1,['1 stb library w/no tag'],https://github.com/nothings/stb/pull/819,https://github.com/nothings,3,https://github.com/nothings/stb/pull/819#issuecomment-542420076,The current implementation has trouble with the #inject feature on *nix systems.  Didn't add name to authors list because it was only one line.,"Yes, looks good, I process PRs in batches every few months, so it may be a while.",True,{}
nothings/stb,https://github.com/nothings/stb,819,2019-10-09T06:41:57Z,2020-02-02T19:33:16Z,2020-02-03T00:53:28Z,MERGED,True,1,1,1,https://github.com/cnlohr,Fix bare backslash n as being a valid whitespace character.,1,['1 stb library w/no tag'],https://github.com/nothings/stb/pull/819,https://github.com/cnlohr,4,https://github.com/nothings/stb/pull/819#issuecomment-542838074,The current implementation has trouble with the #inject feature on *nix systems.  Didn't add name to authors list because it was only one line.,Thank you!,True,{}
nothings/stb,https://github.com/nothings/stb,821,2019-10-14T12:14:41Z,2020-02-02T19:33:15Z,2020-02-02T19:33:15Z,MERGED,True,19,19,1,https://github.com/haferburg,stb_dxt: Fixed compiler warnings C4244 conversion from 'int' to 'unsigned char…,4,['stb_dxt'],https://github.com/nothings/stb/pull/821,https://github.com/haferburg,1,https://github.com/nothings/stb/pull/821,"…'/'unsigned short'.
These changes fix the warnings for me, on VS 2017. Let me know if this is not the preferred way.","…'/'unsigned short'.
These changes fix the warnings for me, on VS 2017. Let me know if this is not the preferred way.",True,{}
nothings/stb,https://github.com/nothings/stb,823,2019-10-21T10:15:52Z,2020-02-02T19:33:15Z,2020-02-02T19:33:15Z,MERGED,True,45,31,1,https://github.com/dougallj,stb_vorbis seek (and invalid file) fixes,6,['1 stb_vorbis'],https://github.com/nothings/stb/pull/823,https://github.com/dougallj,1,https://github.com/nothings/stb/pull/823,"This is a collection of fixes - let me know if you'd like this broken up into separate PRs.
The most important fix is a bad check in seek_to_sample_coarse that causes errors when seeking near the end of some pages in many valid files (explained a bit more at #580 (comment) )
The next two fixes are for files with audio data in the header pages. As described in #274 these files violate the spec, but it seems like enough people have had this problem (issues #259,  #580, #597 and #682) to fix it. The fix is different for pushdata, where we can just remove some validation, and pulldata, which already mostly worked, but broke stb_vorbis_seek_start.
I also fixed a theoretical bug in my seek code, where seeking near the end of a crazy file might end up doing a linear scan through the entire file. It's extremely unlikely such files exist, but I'd rather be safe.
Finally, I tested all these changes pretty thoroughly, downloading hundreds of Ogg Vorbis files from different sources using a modified version of gamozolabs/flounder. I found a handful of files on the internet had invalid ogg timing data which didn't match the vorbis data, and this failed assertions in the seek code, so I changed these asserts to soft errors.","This is a collection of fixes - let me know if you'd like this broken up into separate PRs.
The most important fix is a bad check in seek_to_sample_coarse that causes errors when seeking near the end of some pages in many valid files (explained a bit more at #580 (comment) )
The next two fixes are for files with audio data in the header pages. As described in #274 these files violate the spec, but it seems like enough people have had this problem (issues #259,  #580, #597 and #682) to fix it. The fix is different for pushdata, where we can just remove some validation, and pulldata, which already mostly worked, but broke stb_vorbis_seek_start.
I also fixed a theoretical bug in my seek code, where seeking near the end of a crazy file might end up doing a linear scan through the entire file. It's extremely unlikely such files exist, but I'd rather be safe.
Finally, I tested all these changes pretty thoroughly, downloading hundreds of Ogg Vorbis files from different sources using a modified version of gamozolabs/flounder. I found a handful of files on the internet had invalid ogg timing data which didn't match the vorbis data, and this failed assertions in the seek code, so I changed these asserts to soft errors.",True,{}
nothings/stb,https://github.com/nothings/stb,825,2019-10-24T13:39:54Z,2019-10-24T16:37:19Z,2019-10-24T16:37:19Z,CLOSED,False,1,1,1,https://github.com/Amlan-007,Update stb_vorbis.c,1,[],https://github.com/nothings/stb/pull/825,https://github.com/Amlan-007,1,https://github.com/nothings/stb/pull/825,"the order of work* Delete this list before clicking CREATE PULL REQUEST

Make sure you're using a special branch just for this pull request. (Sometimes people unknowingly use a default branch, then later update that branch, which updates the pull request with the other changes if it hasn't been merged yet.)
Do NOT update the version number in the file. (This just causes conflicts.)
Do add your name to the list of contributors. (Don't worry about the formatting.) I'll try to remember to add it if you don't, but I sometimes forget as it's an extra step.

If you get something above wrong, don't fret it, it's not the end of the world.","the order of work* Delete this list before clicking CREATE PULL REQUEST

Make sure you're using a special branch just for this pull request. (Sometimes people unknowingly use a default branch, then later update that branch, which updates the pull request with the other changes if it hasn't been merged yet.)
Do NOT update the version number in the file. (This just causes conflicts.)
Do add your name to the list of contributors. (Don't worry about the formatting.) I'll try to remember to add it if you don't, but I sometimes forget as it's an extra step.

If you get something above wrong, don't fret it, it's not the end of the world.",True,{}
nothings/stb,https://github.com/nothings/stb,825,2019-10-24T13:39:54Z,2019-10-24T16:37:19Z,2019-10-24T16:37:19Z,CLOSED,False,1,1,1,https://github.com/Amlan-007,Update stb_vorbis.c,1,[],https://github.com/nothings/stb/pull/825,https://github.com/zao,2,https://github.com/nothings/stb/pull/825#issuecomment-545940729,"the order of work* Delete this list before clicking CREATE PULL REQUEST

Make sure you're using a special branch just for this pull request. (Sometimes people unknowingly use a default branch, then later update that branch, which updates the pull request with the other changes if it hasn't been merged yet.)
Do NOT update the version number in the file. (This just causes conflicts.)
Do add your name to the list of contributors. (Don't worry about the formatting.) I'll try to remember to add it if you don't, but I sometimes forget as it's an extra step.

If you get something above wrong, don't fret it, it's not the end of the world.","@Amlan-007 What is the intended purpose of this pull request?
There's nothing meaningful in the commit, nor is there any description of what the pull request is intended to do. You have also missed the part where you're supposed to delete the list in the pull request template.
I've seen several of these no-effort PRs pop up recently. Are you taking some sort of course in Open Source Software that tells you to go pollute repositories with nonsense work? If so, please consider doing such work in a repository controlled by your peers or your tutor.",True,{'THUMBS_UP': ['https://github.com/joel16']}
nothings/stb,https://github.com/nothings/stb,825,2019-10-24T13:39:54Z,2019-10-24T16:37:19Z,2019-10-24T16:37:19Z,CLOSED,False,1,1,1,https://github.com/Amlan-007,Update stb_vorbis.c,1,[],https://github.com/nothings/stb/pull/825,https://github.com/nothings,3,https://github.com/nothings/stb/pull/825#issuecomment-546001165,"the order of work* Delete this list before clicking CREATE PULL REQUEST

Make sure you're using a special branch just for this pull request. (Sometimes people unknowingly use a default branch, then later update that branch, which updates the pull request with the other changes if it hasn't been merged yet.)
Do NOT update the version number in the file. (This just causes conflicts.)
Do add your name to the list of contributors. (Don't worry about the formatting.) I'll try to remember to add it if you don't, but I sometimes forget as it's an extra step.

If you get something above wrong, don't fret it, it's not the end of the world.","I've seen several of these no-effort PRs pop up recently. Are you taking some sort of course in Open Source Software that tells you to go pollute repositories with nonsense work?

Suddenly I understand what this tweet I saw last night meant.",True,{}
nothings/stb,https://github.com/nothings/stb,828,2019-10-26T17:28:03Z,2019-10-26T18:05:09Z,2019-10-26T18:05:09Z,CLOSED,False,2,1,1,https://github.com/rnkjoshi,Update stb_vorbis.c,1,[],https://github.com/nothings/stb/pull/828,https://github.com/rnkjoshi,1,https://github.com/nothings/stb/pull/828,these change may prevent value of variable val from changing before its use.,these change may prevent value of variable val from changing before its use.,True,{}
nothings/stb,https://github.com/nothings/stb,828,2019-10-26T17:28:03Z,2019-10-26T18:05:09Z,2019-10-26T18:05:09Z,CLOSED,False,2,1,1,https://github.com/rnkjoshi,Update stb_vorbis.c,1,[],https://github.com/nothings/stb/pull/828,https://github.com/nothings,2,https://github.com/nothings/stb/pull/828#issuecomment-546626088,these change may prevent value of variable val from changing before its use.,Not a bug.,True,{}
nothings/stb,https://github.com/nothings/stb,831,2019-11-05T16:45:07Z,2020-02-02T19:33:14Z,2020-02-02T19:33:14Z,MERGED,True,2,1,1,https://github.com/kolbma,fix: stb_sprintf - gcc defines __powerpc64__,2,['1 stb_sprintf'],https://github.com/nothings/stb/pull/831,https://github.com/kolbma,1,https://github.com/nothings/stb/pull/831,fixes #806,fixes #806,True,{}
nothings/stb,https://github.com/nothings/stb,832,2019-11-11T13:22:28Z,2020-02-02T19:33:13Z,2020-02-02T19:33:13Z,MERGED,True,9,2,1,https://github.com/sp0lsh,stb_include: fix stb_include_strings iteration,2,['1 stb library w/no tag'],https://github.com/nothings/stb/pull/832,https://github.com/sp0lsh,1,https://github.com/nothings/stb/pull/832,Upper bound was incremented each loop instead of iterator causing endless loop when called.,Upper bound was incremented each loop instead of iterator causing endless loop when called.,True,{}
nothings/stb,https://github.com/nothings/stb,832,2019-11-11T13:22:28Z,2020-02-02T19:33:13Z,2020-02-02T19:33:13Z,MERGED,True,9,2,1,https://github.com/sp0lsh,stb_include: fix stb_include_strings iteration,2,['1 stb library w/no tag'],https://github.com/nothings/stb/pull/832,https://github.com/nothings,2,https://github.com/nothings/stb/pull/832#issuecomment-581159225,Upper bound was incremented each loop instead of iterator causing endless loop when called.,"haha, guess i never actually used that part",True,{}
nothings/stb,https://github.com/nothings/stb,834,2019-11-16T08:25:47Z,2020-02-02T19:33:13Z,2020-02-10T20:31:30Z,MERGED,True,2,2,2,https://github.com/a-e-k,Quell -Wcast-align warnings from Clang,1,"['1 stb_image', '2 warning']",https://github.com/nothings/stb/pull/834,https://github.com/a-e-k,1,https://github.com/nothings/stb/pull/834,"The stbi__sbraw() macro in stb_image_write.h causes Clang to spew about 24 warnings complaining that ""cast from 'unsigned char *' to 'int *' increases required alignment from 1 to 4"" when compiled with the -Wcast-align option.
In practice, this is spurious so long as STBIW_MALLOC() and STBIW_REALLOC() follow the usual alignment semantics for malloc() and realloc() in that they align sufficiently for any built-in type.
To quell the warning, we can cast through a void pointer as an intermediary.","The stbi__sbraw() macro in stb_image_write.h causes Clang to spew about 24 warnings complaining that ""cast from 'unsigned char *' to 'int *' increases required alignment from 1 to 4"" when compiled with the -Wcast-align option.
In practice, this is spurious so long as STBIW_MALLOC() and STBIW_REALLOC() follow the usual alignment semantics for malloc() and realloc() in that they align sufficiently for any built-in type.
To quell the warning, we can cast through a void pointer as an intermediary.",True,{}
nothings/stb,https://github.com/nothings/stb,834,2019-11-16T08:25:47Z,2020-02-02T19:33:13Z,2020-02-10T20:31:30Z,MERGED,True,2,2,2,https://github.com/a-e-k,Quell -Wcast-align warnings from Clang,1,"['1 stb_image', '2 warning']",https://github.com/nothings/stb/pull/834,https://github.com/nothings,2,https://github.com/nothings/stb/pull/834#issuecomment-581159673,"The stbi__sbraw() macro in stb_image_write.h causes Clang to spew about 24 warnings complaining that ""cast from 'unsigned char *' to 'int *' increases required alignment from 1 to 4"" when compiled with the -Wcast-align option.
In practice, this is spurious so long as STBIW_MALLOC() and STBIW_REALLOC() follow the usual alignment semantics for malloc() and realloc() in that they align sufficiently for any built-in type.
To quell the warning, we can cast through a void pointer as an intermediary.",since it's inside an implementation macro i guess it's fine,True,{}
nothings/stb,https://github.com/nothings/stb,834,2019-11-16T08:25:47Z,2020-02-02T19:33:13Z,2020-02-10T20:31:30Z,MERGED,True,2,2,2,https://github.com/a-e-k,Quell -Wcast-align warnings from Clang,1,"['1 stb_image', '2 warning']",https://github.com/nothings/stb/pull/834,https://github.com/a-e-k,3,https://github.com/nothings/stb/pull/834#issuecomment-584339227,"The stbi__sbraw() macro in stb_image_write.h causes Clang to spew about 24 warnings complaining that ""cast from 'unsigned char *' to 'int *' increases required alignment from 1 to 4"" when compiled with the -Wcast-align option.
In practice, this is spurious so long as STBIW_MALLOC() and STBIW_REALLOC() follow the usual alignment semantics for malloc() and realloc() in that they align sufficiently for any built-in type.
To quell the warning, we can cast through a void pointer as an intermediary.",Thanks!,True,{}
nothings/stb,https://github.com/nothings/stb,835,2019-11-18T18:37:46Z,2020-02-02T19:33:12Z,2020-02-02T19:33:12Z,MERGED,True,3,1,1,https://github.com/Try,stb_image: fix CRC reading at the end of IEND chunk in png file,1,"['2 bug', '1 stb_image']",https://github.com/nothings/stb/pull/835,https://github.com/Try,1,https://github.com/nothings/stb/pull/835,"The problem
stb consistently under reads last 4 bytes of *png file.
Why this happends
in function stbi__parse_png_file we have a code:
static int stbi__parse_png_file(stbi__png *z, int scan, int req_comp)
{
...
   for (;;) {
      stbi__pngchunk c = stbi__get_chunk_header(s);
      switch(c.type) {
        ...
        case STBI__PNG_TYPE('I','E','N','D'): {
            ...
            return 1; // <--- CRC-read, will be skipped because of this 'return'
        }
      }
      ...
      stbi__get32be(s); // for normal chunk stb reading CRC here
   }
}
Why this is a problem
In my video-game I have a screen-shoot inside save-file binary:
[ header ][ png-priview ][ data ]

And to make it work I need a byte-exact png-reader/writer.","The problem
stb consistently under reads last 4 bytes of *png file.
Why this happends
in function stbi__parse_png_file we have a code:
static int stbi__parse_png_file(stbi__png *z, int scan, int req_comp)
{
...
   for (;;) {
      stbi__pngchunk c = stbi__get_chunk_header(s);
      switch(c.type) {
        ...
        case STBI__PNG_TYPE('I','E','N','D'): {
            ...
            return 1; // <--- CRC-read, will be skipped because of this 'return'
        }
      }
      ...
      stbi__get32be(s); // for normal chunk stb reading CRC here
   }
}
Why this is a problem
In my video-game I have a screen-shoot inside save-file binary:
[ header ][ png-priview ][ data ]

And to make it work I need a byte-exact png-reader/writer.",True,{}
nothings/stb,https://github.com/nothings/stb,835,2019-11-18T18:37:46Z,2020-02-02T19:33:12Z,2020-02-02T19:33:12Z,MERGED,True,3,1,1,https://github.com/Try,stb_image: fix CRC reading at the end of IEND chunk in png file,1,"['2 bug', '1 stb_image']",https://github.com/nothings/stb/pull/835,https://github.com/nothings,2,https://github.com/nothings/stb/pull/835#issuecomment-555215745,"The problem
stb consistently under reads last 4 bytes of *png file.
Why this happends
in function stbi__parse_png_file we have a code:
static int stbi__parse_png_file(stbi__png *z, int scan, int req_comp)
{
...
   for (;;) {
      stbi__pngchunk c = stbi__get_chunk_header(s);
      switch(c.type) {
        ...
        case STBI__PNG_TYPE('I','E','N','D'): {
            ...
            return 1; // <--- CRC-read, will be skipped because of this 'return'
        }
      }
      ...
      stbi__get32be(s); // for normal chunk stb reading CRC here
   }
}
Why this is a problem
In my video-game I have a screen-shoot inside save-file binary:
[ header ][ png-priview ][ data ]

And to make it work I need a byte-exact png-reader/writer.",Makes sense.,True,{}
nothings/stb,https://github.com/nothings/stb,848,2019-11-26T03:47:13Z,2020-02-01T13:07:39Z,2020-02-01T13:07:39Z,CLOSED,False,6,7,1,https://github.com/compSciKai,University student documentation edits,1,[],https://github.com/nothings/stb/pull/848,https://github.com/compSciKai,1,https://github.com/nothings/stb/pull/848,"Hello! I am a university student taking a technical writing course. For one project we need to make suggested edits to repos on github.
Please use the following suggestions at your discretion :)

removed use of contractions to increase formality
Reduce use of pronoun 'you' to increase formality
supplemented other pronouns with subject to increase clarity


Delete this list before clicking CREATE PULL REQUEST
Make sure you're using a special branch just for this pull request. (Sometimes people unknowingly use a default branch, then later update that branch, which updates the pull request with the other changes if it hasn't been merged yet.)
Do NOT update the version number in the file. (This just causes conflicts.)
Do add your name to the list of contributors. (Don't worry about the formatting.) I'll try to remember to add it if you don't, but I sometimes forget as it's an extra step.

If you get something above wrong, don't fret it, it's not the end of the world.","Hello! I am a university student taking a technical writing course. For one project we need to make suggested edits to repos on github.
Please use the following suggestions at your discretion :)

removed use of contractions to increase formality
Reduce use of pronoun 'you' to increase formality
supplemented other pronouns with subject to increase clarity


Delete this list before clicking CREATE PULL REQUEST
Make sure you're using a special branch just for this pull request. (Sometimes people unknowingly use a default branch, then later update that branch, which updates the pull request with the other changes if it hasn't been merged yet.)
Do NOT update the version number in the file. (This just causes conflicts.)
Do add your name to the list of contributors. (Don't worry about the formatting.) I'll try to remember to add it if you don't, but I sometimes forget as it's an extra step.

If you get something above wrong, don't fret it, it's not the end of the world.",True,{}
nothings/stb,https://github.com/nothings/stb,848,2019-11-26T03:47:13Z,2020-02-01T13:07:39Z,2020-02-01T13:07:39Z,CLOSED,False,6,7,1,https://github.com/compSciKai,University student documentation edits,1,[],https://github.com/nothings/stb/pull/848,https://github.com/nothings,2,https://github.com/nothings/stb/pull/848#issuecomment-581028608,"Hello! I am a university student taking a technical writing course. For one project we need to make suggested edits to repos on github.
Please use the following suggestions at your discretion :)

removed use of contractions to increase formality
Reduce use of pronoun 'you' to increase formality
supplemented other pronouns with subject to increase clarity


Delete this list before clicking CREATE PULL REQUEST
Make sure you're using a special branch just for this pull request. (Sometimes people unknowingly use a default branch, then later update that branch, which updates the pull request with the other changes if it hasn't been merged yet.)
Do NOT update the version number in the file. (This just causes conflicts.)
Do add your name to the list of contributors. (Don't worry about the formatting.) I'll try to remember to add it if you don't, but I sometimes forget as it's an extra step.

If you get something above wrong, don't fret it, it's not the end of the world.","Submission changes wrong file; README.md begins with ""THIS FILE IS AUTOMATICALLY GENERATED, DO NOT CHANGE BY HAND"" and submitter couldn't be bothered to read that OR to read the ""delete this list"" requirements for making pull requests.
""increase formailty"" is not something I'm interested in.

So I'm closing this without reviewing the actual changes.",True,{}
nothings/stb,https://github.com/nothings/stb,849,2019-11-27T16:36:09Z,2020-02-05T11:23:42Z,2020-02-05T13:22:10Z,CLOSED,False,646,106,1,https://github.com/AdamAllison,Updates to snprintf to handle char32/char16,7,"['4 enhancement', '1 stb_sprintf']",https://github.com/nothings/stb/pull/849,https://github.com/AdamAllison,1,https://github.com/nothings/stb/pull/849,"Added support for char32, char16 as the destination buffer,
Added '%S' support (char16 string)
Added '%lS' support (char32 string)
created vsprintfcbAny
change vsprintfcb to use vsprintfcbAny
duplicated snprintf functions with 'c16/c32'
created 'stbsp__push_char' macro to handle the old *bf++ = c
All original signatures are the same,
I only erase the types at the lowest level.
ie char*-> void* , or
stbsp__char32* -> void*
stbsp__char16* -> void*
I don't know if the older stats are impacted. any compiler should see
that size_per_char is either 1, or sizeof(char16/char32) and doesn't change during the function
I haven't had any problems on testing on my end.
The whole thing has to be enabled with STB_SPRINTF_MULTICHAR 1
Thanks,
Adam","Added support for char32, char16 as the destination buffer,
Added '%S' support (char16 string)
Added '%lS' support (char32 string)
created vsprintfcbAny
change vsprintfcb to use vsprintfcbAny
duplicated snprintf functions with 'c16/c32'
created 'stbsp__push_char' macro to handle the old *bf++ = c
All original signatures are the same,
I only erase the types at the lowest level.
ie char*-> void* , or
stbsp__char32* -> void*
stbsp__char16* -> void*
I don't know if the older stats are impacted. any compiler should see
that size_per_char is either 1, or sizeof(char16/char32) and doesn't change during the function
I haven't had any problems on testing on my end.
The whole thing has to be enabled with STB_SPRINTF_MULTICHAR 1
Thanks,
Adam",True,{}
nothings/stb,https://github.com/nothings/stb,849,2019-11-27T16:36:09Z,2020-02-05T11:23:42Z,2020-02-05T13:22:10Z,CLOSED,False,646,106,1,https://github.com/AdamAllison,Updates to snprintf to handle char32/char16,7,"['4 enhancement', '1 stb_sprintf']",https://github.com/nothings/stb/pull/849,https://github.com/nothings,2,https://github.com/nothings/stb/pull/849#issuecomment-581160456,"Added support for char32, char16 as the destination buffer,
Added '%S' support (char16 string)
Added '%lS' support (char32 string)
created vsprintfcbAny
change vsprintfcb to use vsprintfcbAny
duplicated snprintf functions with 'c16/c32'
created 'stbsp__push_char' macro to handle the old *bf++ = c
All original signatures are the same,
I only erase the types at the lowest level.
ie char*-> void* , or
stbsp__char32* -> void*
stbsp__char16* -> void*
I don't know if the older stats are impacted. any compiler should see
that size_per_char is either 1, or sizeof(char16/char32) and doesn't change during the function
I haven't had any problems on testing on my end.
The whole thing has to be enabled with STB_SPRINTF_MULTICHAR 1
Thanks,
Adam",I have to think about this because it's a pretty big change.,True,{}
nothings/stb,https://github.com/nothings/stb,849,2019-11-27T16:36:09Z,2020-02-05T11:23:42Z,2020-02-05T13:22:10Z,CLOSED,False,646,106,1,https://github.com/AdamAllison,Updates to snprintf to handle char32/char16,7,"['4 enhancement', '1 stb_sprintf']",https://github.com/nothings/stb/pull/849,https://github.com/AdamAllison,3,https://github.com/nothings/stb/pull/849#issuecomment-581161007,"Added support for char32, char16 as the destination buffer,
Added '%S' support (char16 string)
Added '%lS' support (char32 string)
created vsprintfcbAny
change vsprintfcb to use vsprintfcbAny
duplicated snprintf functions with 'c16/c32'
created 'stbsp__push_char' macro to handle the old *bf++ = c
All original signatures are the same,
I only erase the types at the lowest level.
ie char*-> void* , or
stbsp__char32* -> void*
stbsp__char16* -> void*
I don't know if the older stats are impacted. any compiler should see
that size_per_char is either 1, or sizeof(char16/char32) and doesn't change during the function
I haven't had any problems on testing on my end.
The whole thing has to be enabled with STB_SPRINTF_MULTICHAR 1
Thanks,
Adam","No problem, let me know if you have questions.
…
On Sun, Feb 2, 2020, 12:00 PM Sean Barrett ***@***.***> wrote:
 I have to think about this because it's a pretty big change.

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub
 <#849?email_source=notifications&email_token=ABUILR2FA2GB3WCFUBLW4YTRA4C2NA5CNFSM4JSJNUK2YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOEKR44CA#issuecomment-581160456>,
 or unsubscribe
 <https://github.com/notifications/unsubscribe-auth/ABUILR22QHBBSQJPDY3DKN3RA4C2NANCNFSM4JSJNUKQ>
 .",True,{}
nothings/stb,https://github.com/nothings/stb,849,2019-11-27T16:36:09Z,2020-02-05T11:23:42Z,2020-02-05T13:22:10Z,CLOSED,False,646,106,1,https://github.com/AdamAllison,Updates to snprintf to handle char32/char16,7,"['4 enhancement', '1 stb_sprintf']",https://github.com/nothings/stb/pull/849,https://github.com/nothings,4,https://github.com/nothings/stb/pull/849#issuecomment-582363055,"Added support for char32, char16 as the destination buffer,
Added '%S' support (char16 string)
Added '%lS' support (char32 string)
created vsprintfcbAny
change vsprintfcb to use vsprintfcbAny
duplicated snprintf functions with 'c16/c32'
created 'stbsp__push_char' macro to handle the old *bf++ = c
All original signatures are the same,
I only erase the types at the lowest level.
ie char*-> void* , or
stbsp__char32* -> void*
stbsp__char16* -> void*
I don't know if the older stats are impacted. any compiler should see
that size_per_char is either 1, or sizeof(char16/char32) and doesn't change during the function
I haven't had any problems on testing on my end.
The whole thing has to be enabled with STB_SPRINTF_MULTICHAR 1
Thanks,
Adam","I think we don't want to take on this complexity. If you want to fork it and maintain it, feel free!
We probably want to add support for printing wchar_t strings TO char*, i.e. doing UTF16/32 -> UTF-8 conversion, but I think we only want to support UTF-8 output. If the ability to print wide strings was present, then you could always use the callback function and do char -> char32/char16 conversion there. (This wouldn't be super-efficient, of course, since you'd be converting UTF32 to UTF-8 while printing, then converting back at the end.)",True,{}
nothings/stb,https://github.com/nothings/stb,849,2019-11-27T16:36:09Z,2020-02-05T11:23:42Z,2020-02-05T13:22:10Z,CLOSED,False,646,106,1,https://github.com/AdamAllison,Updates to snprintf to handle char32/char16,7,"['4 enhancement', '1 stb_sprintf']",https://github.com/nothings/stb/pull/849,https://github.com/AdamAllison,5,https://github.com/nothings/stb/pull/849#issuecomment-582404510,"Added support for char32, char16 as the destination buffer,
Added '%S' support (char16 string)
Added '%lS' support (char32 string)
created vsprintfcbAny
change vsprintfcb to use vsprintfcbAny
duplicated snprintf functions with 'c16/c32'
created 'stbsp__push_char' macro to handle the old *bf++ = c
All original signatures are the same,
I only erase the types at the lowest level.
ie char*-> void* , or
stbsp__char32* -> void*
stbsp__char16* -> void*
I don't know if the older stats are impacted. any compiler should see
that size_per_char is either 1, or sizeof(char16/char32) and doesn't change during the function
I haven't had any problems on testing on my end.
The whole thing has to be enabled with STB_SPRINTF_MULTICHAR 1
Thanks,
Adam","No problem,
An interesting side note wchar_t: is an int in gcc, and a short in windows.

Thank you,
Adam
…
On Wed, Feb 5, 2020 at 5:23 AM Sean Barrett ***@***.***> wrote:
 Closed #849 <#849>.

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub
 <#849?email_source=notifications&email_token=ABUILR64LZ2LFD6OYAQFR5LRBKOT7A5CNFSM4JSJNUK2YY3PNVWWK3TUL52HS4DFWZEXG43VMVCXMZLOORHG65DJMZUWGYLUNFXW5KTDN5WW2ZLOORPWSZGOWNRQJ5Q#event-3009610998>,
 or unsubscribe
 <https://github.com/notifications/unsubscribe-auth/ABUILR4K3O7YPUWR5LVVHXTRBKOT7ANCNFSM4JSJNUKQ>
 .",True,{}
nothings/stb,https://github.com/nothings/stb,850,2019-11-29T14:42:27Z,2020-02-02T19:33:12Z,2020-02-02T19:33:12Z,MERGED,True,76,33,1,https://github.com/DanielGibson,stb_image_write: Update JPEG code to jo_jpeg 1.60,1,['1 stb_image_write'],https://github.com/nothings/stb/pull/850,https://github.com/DanielGibson,1,https://github.com/nothings/stb/pull/850,"For quality <= 90, it now supports subsampling U and V so it encodes smaller files.
https://www.jonolick.com/home/jo_jpeg-release-160 has more information about jo_jpeg 1.60","For quality <= 90, it now supports subsampling U and V so it encodes smaller files.
https://www.jonolick.com/home/jo_jpeg-release-160 has more information about jo_jpeg 1.60",True,{'HEART': ['https://github.com/jtorresfabra']}
nothings/stb,https://github.com/nothings/stb,852,2019-11-30T22:40:36Z,2020-02-02T19:33:11Z,2021-09-06T18:37:49Z,MERGED,True,1,1,1,https://github.com/Reedbeta,Fix VS2019 warning,1,['1 stb library w/no tag'],https://github.com/nothings/stb/pull/852,https://github.com/Reedbeta,1,https://github.com/nothings/stb/pull/852,VS2019 on /W4 warns about applying '*' to enums. Fixed by casting to int.,VS2019 on /W4 warns about applying '*' to enums. Fixed by casting to int.,True,{}
nothings/stb,https://github.com/nothings/stb,853,2019-12-03T05:45:20Z,2019-12-03T19:58:37Z,2019-12-03T19:58:37Z,CLOSED,False,5120,864,48,https://github.com/lemmus19,Calculator on C,168,[],https://github.com/nothings/stb/pull/853,https://github.com/lemmus19,1,https://github.com/nothings/stb/pull/853,"int main() {
char operator;
double firstNumber,secondNumber;
printf(""Enter an operator (+, -, ,): "");
scanf(""%c"", &operator);
printf(""Enter two operands: "");
scanf(""%lf %lf"",&firstNumber, &secondNumber);
switch(operator)
{
case '+':
printf(""%.1lf + %.1lf = %.1lf"",firstNumber, secondNumber, firstNumber + secondNumber);
break;
case '-':
printf(""%.1lf - %.1lf = %.1lf"",firstNumber, secondNumber, firstNumber - secondNumber);
break;
case '':
printf(""%.1lf * %.1lf = %.1lf"",firstNumber, secondNumber, firstNumber * secondNumber);
break;
case '/':
printf(""%.1lf / %.1lf = %.1lf"",firstNumber, secondNumber, firstNumber / secondNumber);
break;
// operator doesn't match any case constant (+, -, *, /)
default:
printf(""Error! operator is not correct"");
}
return 0;

}","int main() {
char operator;
double firstNumber,secondNumber;
printf(""Enter an operator (+, -, ,): "");
scanf(""%c"", &operator);
printf(""Enter two operands: "");
scanf(""%lf %lf"",&firstNumber, &secondNumber);
switch(operator)
{
case '+':
printf(""%.1lf + %.1lf = %.1lf"",firstNumber, secondNumber, firstNumber + secondNumber);
break;
case '-':
printf(""%.1lf - %.1lf = %.1lf"",firstNumber, secondNumber, firstNumber - secondNumber);
break;
case '':
printf(""%.1lf * %.1lf = %.1lf"",firstNumber, secondNumber, firstNumber * secondNumber);
break;
case '/':
printf(""%.1lf / %.1lf = %.1lf"",firstNumber, secondNumber, firstNumber / secondNumber);
break;
// operator doesn't match any case constant (+, -, *, /)
default:
printf(""Error! operator is not correct"");
}
return 0;

}",True,{}
nothings/stb,https://github.com/nothings/stb,853,2019-12-03T05:45:20Z,2019-12-03T19:58:37Z,2019-12-03T19:58:37Z,CLOSED,False,5120,864,48,https://github.com/lemmus19,Calculator on C,168,[],https://github.com/nothings/stb/pull/853,https://github.com/zao,2,https://github.com/nothings/stb/pull/853#issuecomment-561235514,"int main() {
char operator;
double firstNumber,secondNumber;
printf(""Enter an operator (+, -, ,): "");
scanf(""%c"", &operator);
printf(""Enter two operands: "");
scanf(""%lf %lf"",&firstNumber, &secondNumber);
switch(operator)
{
case '+':
printf(""%.1lf + %.1lf = %.1lf"",firstNumber, secondNumber, firstNumber + secondNumber);
break;
case '-':
printf(""%.1lf - %.1lf = %.1lf"",firstNumber, secondNumber, firstNumber - secondNumber);
break;
case '':
printf(""%.1lf * %.1lf = %.1lf"",firstNumber, secondNumber, firstNumber * secondNumber);
break;
case '/':
printf(""%.1lf / %.1lf = %.1lf"",firstNumber, secondNumber, firstNumber / secondNumber);
break;
// operator doesn't match any case constant (+, -, *, /)
default:
printf(""Error! operator is not correct"");
}
return 0;

}","@lemmus19 This does not appear to be a meaningful pull request to the repository.
If you are learning programming, Git, or GitHub, I strongly recommend playing around with repositories that you control.",True,{'THUMBS_UP': ['https://github.com/joel16']}
nothings/stb,https://github.com/nothings/stb,854,2019-12-05T05:15:09Z,2020-02-02T19:33:10Z,2020-02-02T19:35:18Z,MERGED,True,1,41,1,https://github.com/kcgen,STB Vorbis: Coverity static-analysis scan fixes,2,['1 stb_vorbis'],https://github.com/nothings/stb/pull/854,https://github.com/kcgen,1,https://github.com/nothings/stb/pull/854,"This PR consists of fixes for confirmed bugs in a Coverity Scan of the latest stb_vorbis version.
Commit 59e93f5 fixes #839.
Commit 0cbb6ee fixes #842.","This PR consists of fixes for confirmed bugs in a Coverity Scan of the latest stb_vorbis version.
Commit 59e93f5 fixes #839.
Commit 0cbb6ee fixes #842.",True,{}
nothings/stb,https://github.com/nothings/stb,854,2019-12-05T05:15:09Z,2020-02-02T19:33:10Z,2020-02-02T19:35:18Z,MERGED,True,1,41,1,https://github.com/kcgen,STB Vorbis: Coverity static-analysis scan fixes,2,['1 stb_vorbis'],https://github.com/nothings/stb/pull/854,https://github.com/kcgen,2,https://github.com/nothings/stb/pull/854#issuecomment-581168889,"This PR consists of fixes for confirmed bugs in a Coverity Scan of the latest stb_vorbis version.
Commit 59e93f5 fixes #839.
Commit 0cbb6ee fixes #842.",Thanks @nothings !,True,{}
nothings/stb,https://github.com/nothings/stb,858,2019-12-23T04:41:11Z,2020-02-02T19:33:10Z,2020-02-02T19:33:10Z,MERGED,True,1,1,1,https://github.com/christopher-hesse,fix possible bug in uniform sample code,1,[],https://github.com/nothings/stb/pull/858,https://github.com/christopher-hesse,1,https://github.com/nothings/stb/pull/858,"I copied and pasted the uniform sample code for stb_voxel_render.h, but it was skipping the ambient value because that was mapped to location 0.  I suspect that this was supposed to check if the value was -1, indicating that there was no variable with that name (at least in the version of opengl I am using).","I copied and pasted the uniform sample code for stb_voxel_render.h, but it was skipping the ambient value because that was mapped to location 0.  I suspect that this was supposed to check if the value was -1, indicating that there was no variable with that name (at least in the version of opengl I am using).",True,{}
nothings/stb,https://github.com/nothings/stb,860,2019-12-29T23:01:05Z,2020-02-02T19:33:09Z,2020-02-02T19:33:10Z,MERGED,True,3,3,1,https://github.com/pwaller,"Pad allocations in setup_{,temp_}malloc for 8-byte alignment",1,['1 stb_vorbis'],https://github.com/nothings/stb/pull/860,https://github.com/pwaller,1,https://github.com/nothings/stb/pull/860,"4-byte alignment triggered warnings with clang and -fsanitize=undefined.
Fix #799.
As requested, I looked for a list of contributors to add myself to, but didn't immediately see one. Might be useful to update your pull request template to be explicit where to look.","4-byte alignment triggered warnings with clang and -fsanitize=undefined.
Fix #799.
As requested, I looked for a list of contributors to add myself to, but didn't immediately see one. Might be useful to update your pull request template to be explicit where to look.",True,{'HOORAY': ['https://github.com/qarmin']}
nothings/stb,https://github.com/nothings/stb,860,2019-12-29T23:01:05Z,2020-02-02T19:33:09Z,2020-02-02T19:33:10Z,MERGED,True,3,3,1,https://github.com/pwaller,"Pad allocations in setup_{,temp_}malloc for 8-byte alignment",1,['1 stb_vorbis'],https://github.com/nothings/stb/pull/860,https://github.com/pwaller,2,https://github.com/nothings/stb/pull/860#issuecomment-569550101,"4-byte alignment triggered warnings with clang and -fsanitize=undefined.
Fix #799.
As requested, I looked for a list of contributors to add myself to, but didn't immediately see one. Might be useful to update your pull request template to be explicit where to look.","Note for reviewers: I'm submitting this solely on the basis of reasoning about the code and running it under the sanitizer. Please run your own tests and check for obvious breakage, since I have done very little on that front. This is more of a suggested change.",True,{}
nothings/stb,https://github.com/nothings/stb,860,2019-12-29T23:01:05Z,2020-02-02T19:33:09Z,2020-02-02T19:33:10Z,MERGED,True,3,3,1,https://github.com/pwaller,"Pad allocations in setup_{,temp_}malloc for 8-byte alignment",1,['1 stb_vorbis'],https://github.com/nothings/stb/pull/860,https://github.com/akien-mga,3,https://github.com/nothings/stb/pull/860#issuecomment-570165869,"4-byte alignment triggered warnings with clang and -fsanitize=undefined.
Fix #799.
As requested, I looked for a list of contributors to add myself to, but didn't immediately see one. Might be useful to update your pull request template to be explicit where to look.","As requested, I looked for a list of contributors to add myself to, but didn't immediately see one. Might be useful to update your pull request template to be explicit where to look.

I believe that would be this list:

  
    
      stb/stb_vorbis.c
    
    
        Lines 25 to 33
      in
      546edda
    
  
  
    

        
          
           // Bugfix/warning contributors: 
        

        
          
           //    Terje Mathisen     Niklas Frykholm     Andy Hill 
        

        
          
           //    Casey Muratori     John Bolton         Gargaj 
        

        
          
           //    Laurent Gomila     Marc LeBlanc        Ronny Chevalier 
        

        
          
           //    Bernhard Wodo      Evan Balster        alxprd@github 
        

        
          
           //    Tom Beaumont       Ingo Leitgeb        Nicolas Guillemot 
        

        
          
           //    Phillip Bennefall  Rohit               Thiago Goulart 
        

        
          
           //    manxorist@github   saga musix          github:infatum 
        

        
          
           //    Timur Gagiev       Maxwell Koo",True,{}
nothings/stb,https://github.com/nothings/stb,860,2019-12-29T23:01:05Z,2020-02-02T19:33:09Z,2020-02-02T19:33:10Z,MERGED,True,3,3,1,https://github.com/pwaller,"Pad allocations in setup_{,temp_}malloc for 8-byte alignment",1,['1 stb_vorbis'],https://github.com/nothings/stb/pull/860,https://github.com/pwaller,4,https://github.com/nothings/stb/pull/860#issuecomment-570174218,"4-byte alignment triggered warnings with clang and -fsanitize=undefined.
Fix #799.
As requested, I looked for a list of contributors to add myself to, but didn't immediately see one. Might be useful to update your pull request template to be explicit where to look.","Force update to add myself to warnings list.
One implication of my change is that if the majority of allocations were of 4-byte objects, then my change potentially doubles the memory consumption in that worst case. I don't know much about this library to know whether this is the case or not, nor whether a doubling is problematic or not.",True,{}
nothings/stb,https://github.com/nothings/stb,882,2020-01-19T22:52:13Z,2020-02-02T19:33:09Z,2020-02-02T19:33:09Z,MERGED,True,4,4,1,https://github.com/bcollins526,Fix for buffer bugs in stb__splitpath_raw and stb_strncpy,4,['stb.h'],https://github.com/nothings/stb/pull/882,https://github.com/bcollins526,1,https://github.com/nothings/stb/pull/882,"The stb__splitpath_raw function was incorrectly referring to buffer instead of path while parsing, and was passing the size of the buffer pointer (4 or 8 bytes) rather than the size of the buffer itself, which was causing a crash. Ideally the public interface would take the size of the destination buffer as a parameter also, but in lieu of that, changed to use stb_strncpy because it appeared to already be dealing with this by just assuming target buffer size is n+1.
Also, stb_strncpy had an off-by-1 bug that was truncating the last valid character of the string.","The stb__splitpath_raw function was incorrectly referring to buffer instead of path while parsing, and was passing the size of the buffer pointer (4 or 8 bytes) rather than the size of the buffer itself, which was causing a crash. Ideally the public interface would take the size of the destination buffer as a parameter also, but in lieu of that, changed to use stb_strncpy because it appeared to already be dealing with this by just assuming target buffer size is n+1.
Also, stb_strncpy had an off-by-1 bug that was truncating the last valid character of the string.",True,{}
nothings/stb,https://github.com/nothings/stb,890,2020-02-01T19:48:52Z,2020-02-02T19:33:08Z,2020-02-02T19:33:08Z,MERGED,True,41,2,1,https://github.com/BradleyMarie,Fix clang unused function compile warnings when compiling with a single decoder,1,[],https://github.com/nothings/stb/pull/890,https://github.com/BradleyMarie,1,https://github.com/nothings/stb/pull/890,"When building with clang and STB_PNG_ONLY, I got a compile warning about unused functions. This PR fixes this warning. For good measure, I also repeated the same process with all of the following build options:
STBI_ONLY_JPEG
STBI_ONLY_PNG
STBI_ONLY_BMP
STBI_ONLY_PSD
STBI_ONLY_TGA
STBI_ONLY_GIF
STBI_ONLY_HDR
STBI_ONLY_PIC
STBI_ONLY_PNM
The conventions for #ifdef-ing out a block of code seemed to vary throughout the file, so I did my best to match my #ifdefs with the surrounding ones.","When building with clang and STB_PNG_ONLY, I got a compile warning about unused functions. This PR fixes this warning. For good measure, I also repeated the same process with all of the following build options:
STBI_ONLY_JPEG
STBI_ONLY_PNG
STBI_ONLY_BMP
STBI_ONLY_PSD
STBI_ONLY_TGA
STBI_ONLY_GIF
STBI_ONLY_HDR
STBI_ONLY_PIC
STBI_ONLY_PNM
The conventions for #ifdef-ing out a block of code seemed to vary throughout the file, so I did my best to match my #ifdefs with the surrounding ones.",True,{}
nothings/stb,https://github.com/nothings/stb,890,2020-02-01T19:48:52Z,2020-02-02T19:33:08Z,2020-02-02T19:33:08Z,MERGED,True,41,2,1,https://github.com/BradleyMarie,Fix clang unused function compile warnings when compiling with a single decoder,1,[],https://github.com/nothings/stb/pull/890,https://github.com/nothings,2,https://github.com/nothings/stb/pull/890#issuecomment-581161300,"When building with clang and STB_PNG_ONLY, I got a compile warning about unused functions. This PR fixes this warning. For good measure, I also repeated the same process with all of the following build options:
STBI_ONLY_JPEG
STBI_ONLY_PNG
STBI_ONLY_BMP
STBI_ONLY_PSD
STBI_ONLY_TGA
STBI_ONLY_GIF
STBI_ONLY_HDR
STBI_ONLY_PIC
STBI_ONLY_PNM
The conventions for #ifdef-ing out a block of code seemed to vary throughout the file, so I did my best to match my #ifdefs with the surrounding ones.","That's gonna be a nightmare to maintain, probably should find a better way to do this in the future, but it'll do for now.",True,{}
nothings/stb,https://github.com/nothings/stb,891,2020-02-02T01:14:50Z,2020-02-02T19:33:08Z,2020-02-02T20:06:55Z,MERGED,True,37,0,1,https://github.com/Croydon,Create separate LICENSE file,1,[],https://github.com/nothings/stb/pull/891,https://github.com/Croydon,1,https://github.com/nothings/stb/pull/891,"The text is copied without modifications from 
  
    
      stb/stb.h
    
    
         Line 14415
      in
      2f870b3
    
  
  
    

        
          
           This software is available under 2 licenses -- choose whichever you prefer. 
        
    
  


This makes it a lot easier to find, access and copy LICENSE information.
I'm specifically interested in this as I'm packaging stb for the C/C++ package manager Conan","The text is copied without modifications from 
  
    
      stb/stb.h
    
    
         Line 14415
      in
      2f870b3
    
  
  
    

        
          
           This software is available under 2 licenses -- choose whichever you prefer. 
        
    
  


This makes it a lot easier to find, access and copy LICENSE information.
I'm specifically interested in this as I'm packaging stb for the C/C++ package manager Conan",True,{}
nothings/stb,https://github.com/nothings/stb,891,2020-02-02T01:14:50Z,2020-02-02T19:33:08Z,2020-02-02T20:06:55Z,MERGED,True,37,0,1,https://github.com/Croydon,Create separate LICENSE file,1,[],https://github.com/nothings/stb/pull/891,https://github.com/nothings,2,https://github.com/nothings/stb/pull/891#issuecomment-581087547,"The text is copied without modifications from 
  
    
      stb/stb.h
    
    
         Line 14415
      in
      2f870b3
    
  
  
    

        
          
           This software is available under 2 licenses -- choose whichever you prefer. 
        
    
  


This makes it a lot easier to find, access and copy LICENSE information.
I'm specifically interested in this as I'm packaging stb for the C/C++ package manager Conan","It's a problem if I ever want to release a library under a different license, which could happen e.g. if I have to start from some pre-existing library and use its license.",True,{}
nothings/stb,https://github.com/nothings/stb,891,2020-02-02T01:14:50Z,2020-02-02T19:33:08Z,2020-02-02T20:06:55Z,MERGED,True,37,0,1,https://github.com/Croydon,Create separate LICENSE file,1,[],https://github.com/nothings/stb/pull/891,https://github.com/Croydon,3,https://github.com/nothings/stb/pull/891#issuecomment-581090651,"The text is copied without modifications from 
  
    
      stb/stb.h
    
    
         Line 14415
      in
      2f870b3
    
  
  
    

        
          
           This software is available under 2 licenses -- choose whichever you prefer. 
        
    
  


This makes it a lot easier to find, access and copy LICENSE information.
I'm specifically interested in this as I'm packaging stb for the C/C++ package manager Conan","If this happens, then you could still modify the LICENSE file further with the new information or delete it, if absolutely necessary",True,{}
nothings/stb,https://github.com/nothings/stb,891,2020-02-02T01:14:50Z,2020-02-02T19:33:08Z,2020-02-02T20:06:55Z,MERGED,True,37,0,1,https://github.com/Croydon,Create separate LICENSE file,1,[],https://github.com/nothings/stb/pull/891,https://github.com/nothings,4,https://github.com/nothings/stb/pull/891#issuecomment-581161408,"The text is copied without modifications from 
  
    
      stb/stb.h
    
    
         Line 14415
      in
      2f870b3
    
  
  
    

        
          
           This software is available under 2 licenses -- choose whichever you prefer. 
        
    
  


This makes it a lot easier to find, access and copy LICENSE information.
I'm specifically interested in this as I'm packaging stb for the C/C++ package manager Conan",fair,True,{}
nothings/stb,https://github.com/nothings/stb,893,2020-02-03T02:44:15Z,2020-02-03T04:31:31Z,2020-02-03T04:47:29Z,CLOSED,False,3,3,1,https://github.com/NiLuJe,Fix a small typo in the __STDC_VERSION__ constant name,2,[],https://github.com/nothings/stb/pull/893,https://github.com/NiLuJe,1,https://github.com/nothings/stb/pull/893,"Introduced in today's update ;).
I haven't checked if it creeped into other libs, FWIW ;).
(This tripped a -Wundef warning).","Introduced in today's update ;).
I haven't checked if it creeped into other libs, FWIW ;).
(This tripped a -Wundef warning).",True,{}
nothings/stb,https://github.com/nothings/stb,893,2020-02-03T02:44:15Z,2020-02-03T04:31:31Z,2020-02-03T04:47:29Z,CLOSED,False,3,3,1,https://github.com/NiLuJe,Fix a small typo in the __STDC_VERSION__ constant name,2,[],https://github.com/nothings/stb/pull/893,https://github.com/nothings,2,https://github.com/nothings/stb/pull/893#issuecomment-581215898,"Introduced in today's update ;).
I haven't checked if it creeped into other libs, FWIW ;).
(This tripped a -Wundef warning).","Wait, if that triggers an undef warning, why doesn't __cplusplus or the other tests?",True,{}
nothings/stb,https://github.com/nothings/stb,893,2020-02-03T02:44:15Z,2020-02-03T04:31:31Z,2020-02-03T04:47:29Z,CLOSED,False,3,3,1,https://github.com/NiLuJe,Fix a small typo in the __STDC_VERSION__ constant name,2,[],https://github.com/nothings/stb/pull/893,https://github.com/NiLuJe,3,https://github.com/nothings/stb/pull/893#issuecomment-581228757,"Introduced in today's update ;).
I haven't checked if it creeped into other libs, FWIW ;).
(This tripped a -Wundef warning).","__cplusplus does too (at least with a C compiler), but I'm not sure if there's a way around that?",True,{}
nothings/stb,https://github.com/nothings/stb,893,2020-02-03T02:44:15Z,2020-02-03T04:31:31Z,2020-02-03T04:47:29Z,CLOSED,False,3,3,1,https://github.com/NiLuJe,Fix a small typo in the __STDC_VERSION__ constant name,2,[],https://github.com/nothings/stb/pull/893,https://github.com/NiLuJe,4,https://github.com/nothings/stb/pull/893#issuecomment-581228941,"Introduced in today's update ;).
I haven't checked if it creeped into other libs, FWIW ;).
(This tripped a -Wundef warning).","Actual GCC output:
stb_image.h:476:5: warning: ""__cplusplus"" is not defined, evaluates to 0 [-Wundef]
 #if __cplusplus >= 201103L || __STDC_VERSION__ >= 201112L || defined(__GNUC__) || defined(_MSC_VER)
     ^~~~~~~~~~~",True,{}
nothings/stb,https://github.com/nothings/stb,893,2020-02-03T02:44:15Z,2020-02-03T04:31:31Z,2020-02-03T04:47:29Z,CLOSED,False,3,3,1,https://github.com/NiLuJe,Fix a small typo in the __STDC_VERSION__ constant name,2,[],https://github.com/nothings/stb/pull/893,https://github.com/NiLuJe,5,https://github.com/nothings/stb/pull/893#issuecomment-581229357,"Introduced in today's update ;).
I haven't checked if it creeped into other libs, FWIW ;).
(This tripped a -Wundef warning).","Something like that, maybe (i.e., only do the comparison if it's actually defined. Other checks don't do a comparison, hence the lack of warnings))?
diff --git a/stb_image.h b/stb_image.h
index 8292642..4611aed 100644
--- a/stb_image.h
+++ b/stb_image.h
@@ -473,7 +473,7 @@ STBIDEF void stbi_set_flip_vertically_on_load(int flag_true_if_should_flip);
 // as above, but only applies to images loaded on the thread that calls the function
 // this function is only available if your compiler supports thread-local variables;
 // calling it will fail to link if your compiler doesn't
-#if __cplusplus >= 201103L || __STDC_VERSION__ >= 201112L || defined(__GNUC__) || defined(_MSC_VER)
+#if (defined(__cplusplus) && __cplusplus >= 201103L) || __STDC_VERSION__ >= 201112L || defined(__GNUC__) || defined(_MSC_VER)
 STBIDEF void stbi_set_flip_vertically_on_load_thread(int flag_true_if_should_flip);
 #endif
 
@@ -574,7 +574,7 @@ STBIDEF int   stbi_zlib_decode_noheader_buffer(char *obuffer, int olen, const ch
 #endif
 
 #ifndef STBI_NO_THREAD_LOCALS
-   #if __cplusplus >= 201103L
+   #if (defined(__cplusplus) && __cplusplus >= 201103L)
       #define STBI_THREAD_LOCAL       thread_local
    #elif __STDC_VERSION__ >= 201112L
       #define STBI_THREAD_LOCAL       _Thread_local
(Fair warning: 5AM brain, I may be spouting complete nonsense).
(That certainly shuts GCC up, though).",True,{}
nothings/stb,https://github.com/nothings/stb,893,2020-02-03T02:44:15Z,2020-02-03T04:31:31Z,2020-02-03T04:47:29Z,CLOSED,False,3,3,1,https://github.com/NiLuJe,Fix a small typo in the __STDC_VERSION__ constant name,2,[],https://github.com/nothings/stb/pull/893,https://github.com/nothings,6,https://github.com/nothings/stb/pull/893#issuecomment-581231248,"Introduced in today's update ;).
I haven't checked if it creeped into other libs, FWIW ;).
(This tripped a -Wundef warning).","Yes, you can use defined() to avoid it, I didn't bother doing this because I had recently read the C99 spec that just said 'undefined macros have value 0' without anything about issuing diagnostics for it, so I didn't realize modern compilers were doing that.
But of course they are.
Also nobody flagged it when I asked for a code review on twitter. :(",True,{}
nothings/stb,https://github.com/nothings/stb,893,2020-02-03T02:44:15Z,2020-02-03T04:31:31Z,2020-02-03T04:47:29Z,CLOSED,False,3,3,1,https://github.com/NiLuJe,Fix a small typo in the __STDC_VERSION__ constant name,2,[],https://github.com/nothings/stb/pull/893,https://github.com/nothings,7,https://github.com/nothings/stb/pull/893#issuecomment-581231307,"Introduced in today's update ;).
I haven't checked if it creeped into other libs, FWIW ;).
(This tripped a -Wundef warning).","Anyway, I'll fix that, but it's separate from this PR.",True,{}
nothings/stb,https://github.com/nothings/stb,893,2020-02-03T02:44:15Z,2020-02-03T04:31:31Z,2020-02-03T04:47:29Z,CLOSED,False,3,3,1,https://github.com/NiLuJe,Fix a small typo in the __STDC_VERSION__ constant name,2,[],https://github.com/nothings/stb/pull/893,https://github.com/nothings,8,https://github.com/nothings/stb/pull/893#issuecomment-581231735,"Introduced in today's update ;).
I haven't checked if it creeped into other libs, FWIW ;).
(This tripped a -Wundef warning).","Here's my fix:
// as above, but only applies to images loaded on the thread that calls the function
// this function is only available if your compiler supports thread-local variables;
// calling it will fail to link if your compiler doesn't
STBIDEF void stbi_set_flip_vertically_on_load_thread(int flag_true_if_should_flip);

:)",True,{}
nothings/stb,https://github.com/nothings/stb,893,2020-02-03T02:44:15Z,2020-02-03T04:31:31Z,2020-02-03T04:47:29Z,CLOSED,False,3,3,1,https://github.com/NiLuJe,Fix a small typo in the __STDC_VERSION__ constant name,2,[],https://github.com/nothings/stb/pull/893,https://github.com/nothings,9,https://github.com/nothings/stb/pull/893#issuecomment-581232200,"Introduced in today's update ;).
I haven't checked if it creeped into other libs, FWIW ;).
(This tripped a -Wundef warning).","Released a fix, let me know if it doesn't work.",True,{}
nothings/stb,https://github.com/nothings/stb,893,2020-02-03T02:44:15Z,2020-02-03T04:31:31Z,2020-02-03T04:47:29Z,CLOSED,False,3,3,1,https://github.com/NiLuJe,Fix a small typo in the __STDC_VERSION__ constant name,2,[],https://github.com/nothings/stb/pull/893,https://github.com/NiLuJe,10,https://github.com/nothings/stb/pull/893#issuecomment-581235618,"Introduced in today's update ;).
I haven't checked if it creeped into other libs, FWIW ;).
(This tripped a -Wundef warning).","Yup, that did the trick ;).",True,{}
nothings/stb,https://github.com/nothings/stb,894,2020-02-03T02:45:44Z,2020-02-05T12:38:21Z,2020-02-05T12:38:22Z,CLOSED,False,1,1,1,https://github.com/NiLuJe,Squish a -Wparentheses warning,1,[],https://github.com/nothings/stb/pull/894,https://github.com/NiLuJe,1,https://github.com/nothings/stb/pull/894,Introduced in today's updates.,Introduced in today's updates.,True,{}
nothings/stb,https://github.com/nothings/stb,894,2020-02-03T02:45:44Z,2020-02-05T12:38:21Z,2020-02-05T12:38:22Z,CLOSED,False,1,1,1,https://github.com/NiLuJe,Squish a -Wparentheses warning,1,[],https://github.com/nothings/stb/pull/894,https://github.com/NiLuJe,2,https://github.com/nothings/stb/pull/894#issuecomment-582388246,Introduced in today's updates.,"Closing, fixed an hour ago ;).",True,{}
nothings/stb,https://github.com/nothings/stb,895,2020-02-03T08:18:26Z,2020-02-05T11:19:29Z,2020-02-05T13:52:47Z,MERGED,True,1,1,1,https://github.com/metab0t,Fix typo in stbds_hmget_key_ts_wrapper,1,[],https://github.com/nothings/stb/pull/895,https://github.com/metab0t,1,https://github.com/nothings/stb/pull/895,,,True,{}
nothings/stb,https://github.com/nothings/stb,896,2020-02-03T13:27:58Z,2020-02-05T12:14:14Z,2020-02-05T12:32:57Z,CLOSED,False,10,6,1,https://github.com/wojdyr,fix test_sprintf.c,3,[],https://github.com/nothings/stb/pull/896,https://github.com/wojdyr,1,https://github.com/nothings/stb/pull/896,"Thanks for merging the test_sprintf PR yesterday. I'd like to add three commits:


fix compilation (CHECK1 -> CHECK2)


update expected return values from stbsp_snprintf - it now returns the same value as snprintf, i.e. the number of characters that would be printed if the buffer was big enough


if TEST_SPRINTF is defined include the implementation (I hope it doesn't affect other possible uses of test_sprintf.c), so that this test only can be run with:
cc -I. -DTEST_SPRINTF tests/test_sprintf.c && ./a.out","Thanks for merging the test_sprintf PR yesterday. I'd like to add three commits:


fix compilation (CHECK1 -> CHECK2)


update expected return values from stbsp_snprintf - it now returns the same value as snprintf, i.e. the number of characters that would be printed if the buffer was big enough


if TEST_SPRINTF is defined include the implementation (I hope it doesn't affect other possible uses of test_sprintf.c), so that this test only can be run with:
cc -I. -DTEST_SPRINTF tests/test_sprintf.c && ./a.out",True,{}
nothings/stb,https://github.com/nothings/stb,896,2020-02-03T13:27:58Z,2020-02-05T12:14:14Z,2020-02-05T12:32:57Z,CLOSED,False,10,6,1,https://github.com/wojdyr,fix test_sprintf.c,3,[],https://github.com/nothings/stb/pull/896,https://github.com/nothings,2,https://github.com/nothings/stb/pull/896#issuecomment-582356630,"Thanks for merging the test_sprintf PR yesterday. I'd like to add three commits:


fix compilation (CHECK1 -> CHECK2)


update expected return values from stbsp_snprintf - it now returns the same value as snprintf, i.e. the number of characters that would be printed if the buffer was big enough


if TEST_SPRINTF is defined include the implementation (I hope it doesn't affect other possible uses of test_sprintf.c), so that this test only can be run with:
cc -I. -DTEST_SPRINTF tests/test_sprintf.c && ./a.out","Yeah, this is what I meant about breaking the semantics and possibly making this a separate new file. I link all the test_ files together in a single test application, one of which already defines STB_SPRINTF_IMPLEMENTATION, so it breaks my existing codebase to do this. So if you want a standalone test, define a new file instead of piggybacking off of an existing file that intentionally doesn't have the implementation.",True,{}
nothings/stb,https://github.com/nothings/stb,896,2020-02-03T13:27:58Z,2020-02-05T12:14:14Z,2020-02-05T12:32:57Z,CLOSED,False,10,6,1,https://github.com/wojdyr,fix test_sprintf.c,3,[],https://github.com/nothings/stb/pull/896,https://github.com/nothings,3,https://github.com/nothings/stb/pull/896#issuecomment-582361933,"Thanks for merging the test_sprintf PR yesterday. I'd like to add three commits:


fix compilation (CHECK1 -> CHECK2)


update expected return values from stbsp_snprintf - it now returns the same value as snprintf, i.e. the number of characters that would be printed if the buffer was big enough


if TEST_SPRINTF is defined include the implementation (I hope it doesn't affect other possible uses of test_sprintf.c), so that this test only can be run with:
cc -I. -DTEST_SPRINTF tests/test_sprintf.c && ./a.out","I fixed the first two issues manually, hopefully correctly.",True,{}
nothings/stb,https://github.com/nothings/stb,896,2020-02-03T13:27:58Z,2020-02-05T12:14:14Z,2020-02-05T12:32:57Z,CLOSED,False,10,6,1,https://github.com/wojdyr,fix test_sprintf.c,3,[],https://github.com/nothings/stb/pull/896,https://github.com/wojdyr,4,https://github.com/nothings/stb/pull/896#issuecomment-582362774,"Thanks for merging the test_sprintf PR yesterday. I'd like to add three commits:


fix compilation (CHECK1 -> CHECK2)


update expected return values from stbsp_snprintf - it now returns the same value as snprintf, i.e. the number of characters that would be printed if the buffer was big enough


if TEST_SPRINTF is defined include the implementation (I hope it doesn't affect other possible uses of test_sprintf.c), so that this test only can be run with:
cc -I. -DTEST_SPRINTF tests/test_sprintf.c && ./a.out","The compilation should not be broken, this PR moves STB_SPRINTF_IMPLEMENTATION to be guarded by #ifdef TEST_SPRINTF.
But since it breaks the semantics I can move it to another file (and leave only the #include statement in test_sprintf.c, as it was before?).
Can you propose a new filename?",True,{}
nothings/stb,https://github.com/nothings/stb,896,2020-02-03T13:27:58Z,2020-02-05T12:14:14Z,2020-02-05T12:32:57Z,CLOSED,False,10,6,1,https://github.com/wojdyr,fix test_sprintf.c,3,[],https://github.com/nothings/stb/pull/896,https://github.com/nothings,5,https://github.com/nothings/stb/pull/896#issuecomment-582366130,"Thanks for merging the test_sprintf PR yesterday. I'd like to add three commits:


fix compilation (CHECK1 -> CHECK2)


update expected return values from stbsp_snprintf - it now returns the same value as snprintf, i.e. the number of characters that would be printed if the buffer was big enough


if TEST_SPRINTF is defined include the implementation (I hope it doesn't affect other possible uses of test_sprintf.c), so that this test only can be run with:
cc -I. -DTEST_SPRINTF tests/test_sprintf.c && ./a.out","Putting it in ifdef TEST_SPRINTF doesn't address my issue. I compile all the test_* files into one program, which includes test_c_compilation.c which already does STB_SPRINTF_IMPLEMENTATION. Then I flip on one of the TEST_SPRINTF or TEST_TRUETYPE or etc. flags to choose which main() I get. You could put it inside ANOTHER flag, like ""STANDALONE_SPRINTF"", and have that define STB_SPRINTF_IMPLEMENTATION, or you can put it in another file.
The name can be anything really, as long as it's not an existing file in the directory. ""sprintf_test.c"" or whatever.
It's still useful for me to have the tests in my test app as well, maybe the ""standalone"" test can #include ""test_sprintf.c""? Or maybe better to put the guts into ""test_sprintf.inl"" and include it from both C files.",True,{}
nothings/stb,https://github.com/nothings/stb,896,2020-02-03T13:27:58Z,2020-02-05T12:14:14Z,2020-02-05T12:32:57Z,CLOSED,False,10,6,1,https://github.com/wojdyr,fix test_sprintf.c,3,[],https://github.com/nothings/stb/pull/896,https://github.com/nothings,6,https://github.com/nothings/stb/pull/896#issuecomment-582366256,"Thanks for merging the test_sprintf PR yesterday. I'd like to add three commits:


fix compilation (CHECK1 -> CHECK2)


update expected return values from stbsp_snprintf - it now returns the same value as snprintf, i.e. the number of characters that would be printed if the buffer was big enough


if TEST_SPRINTF is defined include the implementation (I hope it doesn't affect other possible uses of test_sprintf.c), so that this test only can be run with:
cc -I. -DTEST_SPRINTF tests/test_sprintf.c && ./a.out","Note that ""I fixed the first two issues manually"" means I released a new version of it.",True,{}
nothings/stb,https://github.com/nothings/stb,896,2020-02-03T13:27:58Z,2020-02-05T12:14:14Z,2020-02-05T12:32:57Z,CLOSED,False,10,6,1,https://github.com/wojdyr,fix test_sprintf.c,3,[],https://github.com/nothings/stb/pull/896,https://github.com/wojdyr,7,https://github.com/nothings/stb/pull/896#issuecomment-582379881,"Thanks for merging the test_sprintf PR yesterday. I'd like to add three commits:


fix compilation (CHECK1 -> CHECK2)


update expected return values from stbsp_snprintf - it now returns the same value as snprintf, i.e. the number of characters that would be printed if the buffer was big enough


if TEST_SPRINTF is defined include the implementation (I hope it doesn't affect other possible uses of test_sprintf.c), so that this test only can be run with:
cc -I. -DTEST_SPRINTF tests/test_sprintf.c && ./a.out","If the the tests are useful where they are, I can simply compile it with -D STB_SPRINTF_IMPLEMENTATION.
For this, I'd need one of the #includes removed from test_sprintf.c:
# include ""stb_sprintf.h""
//# define STB_SPRINTF_IMPLEMENTATION
# include ""stb_sprintf.h""
Thanks for maintaining these libraries!",True,{}
nothings/stb,https://github.com/nothings/stb,896,2020-02-03T13:27:58Z,2020-02-05T12:14:14Z,2020-02-05T12:32:57Z,CLOSED,False,10,6,1,https://github.com/wojdyr,fix test_sprintf.c,3,[],https://github.com/nothings/stb/pull/896,https://github.com/nothings,8,https://github.com/nothings/stb/pull/896#issuecomment-582386248,"Thanks for merging the test_sprintf PR yesterday. I'd like to add three commits:


fix compilation (CHECK1 -> CHECK2)


update expected return values from stbsp_snprintf - it now returns the same value as snprintf, i.e. the number of characters that would be printed if the buffer was big enough


if TEST_SPRINTF is defined include the implementation (I hope it doesn't affect other possible uses of test_sprintf.c), so that this test only can be run with:
cc -I. -DTEST_SPRINTF tests/test_sprintf.c && ./a.out",released the removed redundant #include,True,{}
nothings/stb,https://github.com/nothings/stb,898,2020-02-03T13:47:16Z,2020-02-05T11:19:28Z,2020-02-05T11:19:28Z,MERGED,True,1,0,1,https://github.com/wojdyr,stb_sprintf.h: fix unused-parameter warning,1,[],https://github.com/nothings/stb/pull/898,https://github.com/wojdyr,1,https://github.com/nothings/stb/pull/898,"avoid this warning:
./stb_sprintf.h:1393:51: warning: unused parameter ‘buf’ [-Wunused-parameter]
 1393 | static char * stbsp__count_clamp_callback( char * buf, void * user, int len )
      |                                            ~~~~~~~^~~","avoid this warning:
./stb_sprintf.h:1393:51: warning: unused parameter ‘buf’ [-Wunused-parameter]
 1393 | static char * stbsp__count_clamp_callback( char * buf, void * user, int len )
      |                                            ~~~~~~~^~~",True,{}
nothings/stb,https://github.com/nothings/stb,899,2020-02-03T19:23:01Z,2020-02-05T11:19:27Z,2020-02-05T11:19:27Z,MERGED,True,2,1,2,https://github.com/wojdyr,stb_sprintf: avoid left shift of negative value,1,[],https://github.com/nothings/stb/pull/899,https://github.com/wojdyr,1,https://github.com/nothings/stb/pull/899,"Fix undefined behaviour reported by UBSan:
runtime error: left shift of negative value -9223372036854775808

and add a test case.
fixes #800","Fix undefined behaviour reported by UBSan:
runtime error: left shift of negative value -9223372036854775808

and add a test case.
fixes #800",True,{}
nothings/stb,https://github.com/nothings/stb,900,2020-02-04T16:05:10Z,2020-02-05T11:19:26Z,2020-02-05T11:19:26Z,MERGED,True,13,13,2,https://github.com/MarcoLizza,Fixing some pedantic warnings for GCC,3,[],https://github.com/nothings/stb/pull/900,https://github.com/MarcoLizza,1,https://github.com/nothings/stb/pull/900,Hi there. I fixed some warnings that GCC issues when in pedantic mode. Hope it helps.,Hi there. I fixed some warnings that GCC issues when in pedantic mode. Hope it helps.,True,{}
nothings/stb,https://github.com/nothings/stb,902,2020-02-08T01:24:31Z,2020-07-13T11:39:57Z,2020-07-13T11:39:57Z,MERGED,True,8,0,1,https://github.com/hashitaku,stb_ds.h: fix unused parameter warning,1,"['2 good-no changes needed', '2 warning', '1 stb_ds']",https://github.com/nothings/stb/pull/902,https://github.com/hashitaku,1,https://github.com/nothings/stb/pull/902,close #801,close #801,True,{}
nothings/stb,https://github.com/nothings/stb,904,2020-02-13T13:13:44Z,2020-07-13T11:39:56Z,2020-07-13T11:39:56Z,MERGED,True,13,4,1,https://github.com/SasLuca,Refactored stbi__load_gif_main to use STBI_REALLOC_SIZED instead of STBI_REALLOC,1,[],https://github.com/nothings/stb/pull/904,https://github.com/SasLuca,1,https://github.com/nothings/stb/pull/904,"This is a pretty straightforward fix. I introduce 2 new integer variables to keep track of the sizes of 2 buffers and replaced the calls to STBI_REALLOC with STBI_REALLOC_SIZED.
This also fixes issue #765","This is a pretty straightforward fix. I introduce 2 new integer variables to keep track of the sizes of 2 buffers and replaced the calls to STBI_REALLOC with STBI_REALLOC_SIZED.
This also fixes issue #765",True,{'HEART': ['https://github.com/e455a81e-d3ba-41a2-bc6d-7aafb1d9a5cd']}
nothings/stb,https://github.com/nothings/stb,906,2020-02-14T21:30:21Z,2020-07-13T11:39:56Z,2020-07-13T11:39:56Z,MERGED,True,2,0,1,https://github.com/mackron,stb_vorbis: Fix macro redefinition warning on MinGW.,1,[],https://github.com/nothings/stb/pull/906,https://github.com/mackron,1,https://github.com/nothings/stb/pull/906,Some distributions of MinGW define alloca themselves which causes warnings about stb_vorbis' alloca macro being a redefinition. This change just wraps it in a #ifndef / #endif block.,Some distributions of MinGW define alloca themselves which causes warnings about stb_vorbis' alloca macro being a redefinition. This change just wraps it in a #ifndef / #endif block.,True,{}
nothings/stb,https://github.com/nothings/stb,918,2020-02-27T15:59:21Z,2020-05-11T08:39:48Z,2020-05-11T08:39:49Z,CLOSED,False,8,5,1,https://github.com/randy408,fix integer arithmetic in stbi__zexpand(),2,[],https://github.com/nothings/stb/pull/918,https://github.com/randy408,1,https://github.com/nothings/stb/pull/918,"Adds overflow checks, changing the variable type to unsigned simplifies the patch, fixes: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=20572
The testcase is linked in the report, should I include it here?","Adds overflow checks, changing the variable type to unsigned simplifies the patch, fixes: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=20572
The testcase is linked in the report, should I include it here?",True,{}
nothings/stb,https://github.com/nothings/stb,918,2020-02-27T15:59:21Z,2020-05-11T08:39:48Z,2020-05-11T08:39:49Z,CLOSED,False,8,5,1,https://github.com/randy408,fix integer arithmetic in stbi__zexpand(),2,[],https://github.com/nothings/stb/pull/918,https://github.com/randy408,2,https://github.com/nothings/stb/pull/918#issuecomment-626559657,"Adds overflow checks, changing the variable type to unsigned simplifies the patch, fixes: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=20572
The testcase is linked in the report, should I include it here?","This PR is obsolete, the fix is included in #960.",True,{}
nothings/stb,https://github.com/nothings/stb,922,2020-03-15T09:31:55Z,2020-03-15T09:38:49Z,2020-03-15T09:38:49Z,CLOSED,False,2,0,1,https://github.com/czarnota,Add #undef BUFFER_SIZE to avoid multiple definitions,1,[],https://github.com/nothings/stb/pull/922,https://github.com/czarnota,1,https://github.com/nothings/stb/pull/922,"When including stb_vorbis.c in other C file that also defines BUFFER_SIZE, you get a warning:
warning: ""BUFFER_SIZE"" redefined

It is a quite common name. This is simply fixed by #undef BUFFER_SIZE","When including stb_vorbis.c in other C file that also defines BUFFER_SIZE, you get a warning:
warning: ""BUFFER_SIZE"" redefined

It is a quite common name. This is simply fixed by #undef BUFFER_SIZE",True,{}
nothings/stb,https://github.com/nothings/stb,922,2020-03-15T09:31:55Z,2020-03-15T09:38:49Z,2020-03-15T09:38:49Z,CLOSED,False,2,0,1,https://github.com/czarnota,Add #undef BUFFER_SIZE to avoid multiple definitions,1,[],https://github.com/nothings/stb/pull/922,https://github.com/nothings,2,https://github.com/nothings/stb/pull/922#issuecomment-599187645,"When including stb_vorbis.c in other C file that also defines BUFFER_SIZE, you get a warning:
warning: ""BUFFER_SIZE"" redefined

It is a quite common name. This is simply fixed by #undef BUFFER_SIZE",stb_vorbis.c is not intended to be #included,True,{}
nothings/stb,https://github.com/nothings/stb,926,2020-03-20T06:42:25Z,2020-07-13T11:39:55Z,2020-07-13T11:39:55Z,MERGED,True,31,16,1,https://github.com/castano,Perfect quantization of DXT endpoints,1,[],https://github.com/nothings/stb/pull/926,https://github.com/castano,1,https://github.com/nothings/stb/pull/926,A small change to quantize floating point endpoints to RGB565 exactly. This improves quality slightly. For more info see: https://gist.github.com/castano/c92c7626f288f9e99e158520b14a61cf,A small change to quantize floating point endpoints to RGB565 exactly. This improves quality slightly. For more info see: https://gist.github.com/castano/c92c7626f288f9e99e158520b14a61cf,True,{}
nothings/stb,https://github.com/nothings/stb,926,2020-03-20T06:42:25Z,2020-07-13T11:39:55Z,2020-07-13T11:39:55Z,MERGED,True,31,16,1,https://github.com/castano,Perfect quantization of DXT endpoints,1,[],https://github.com/nothings/stb/pull/926,https://github.com/nothings,2,https://github.com/nothings/stb/pull/926#issuecomment-601569287,A small change to quantize floating point endpoints to RGB565 exactly. This improves quality slightly. For more info see: https://gist.github.com/castano/c92c7626f288f9e99e158520b14a61cf,thanks!,True,{}
nothings/stb,https://github.com/nothings/stb,932,2020-03-24T14:39:07Z,2020-07-13T11:39:55Z,2020-09-29T04:11:44Z,MERGED,True,15,3,1,https://github.com/HeroicKatora,Fix arraddn returning index instead of pointer,3,[],https://github.com/nothings/stb/pull/932,https://github.com/HeroicKatora,1,https://github.com/nothings/stb/pull/932,"The documentation of that operation already said:

Returns a pointer to the first uninitialized item added.

This also makes a lot of sense, allowing easy initialization. But the
implementation returned the index of the first uninitialized element
instead.","The documentation of that operation already said:

Returns a pointer to the first uninitialized item added.

This also makes a lot of sense, allowing easy initialization. But the
implementation returned the index of the first uninitialized element
instead.",True,{}
nothings/stb,https://github.com/nothings/stb,932,2020-03-24T14:39:07Z,2020-07-13T11:39:55Z,2020-09-29T04:11:44Z,MERGED,True,15,3,1,https://github.com/HeroicKatora,Fix arraddn returning index instead of pointer,3,[],https://github.com/nothings/stb/pull/932,https://github.com/nothings,2,https://github.com/nothings/stb/pull/932#issuecomment-603297907,"The documentation of that operation already said:

Returns a pointer to the first uninitialized item added.

This also makes a lot of sense, allowing easy initialization. But the
implementation returned the index of the first uninitialized element
instead.",Fixes #923.,True,{}
nothings/stb,https://github.com/nothings/stb,932,2020-03-24T14:39:07Z,2020-07-13T11:39:55Z,2020-09-29T04:11:44Z,MERGED,True,15,3,1,https://github.com/HeroicKatora,Fix arraddn returning index instead of pointer,3,[],https://github.com/nothings/stb/pull/932,https://github.com/nothings,3,https://github.com/nothings/stb/pull/932#issuecomment-603298596,"The documentation of that operation already said:

Returns a pointer to the first uninitialized item added.

This also makes a lot of sense, allowing easy initialization. But the
implementation returned the index of the first uninitialized element
instead.","Both behaviors are useful and you can't easily implement one with the other, so the ideal solution is probably to have arraddn() which returns the index and arraddnp() which returns the pointer, or some such.",True,{}
nothings/stb,https://github.com/nothings/stb,932,2020-03-24T14:39:07Z,2020-07-13T11:39:55Z,2020-09-29T04:11:44Z,MERGED,True,15,3,1,https://github.com/HeroicKatora,Fix arraddn returning index instead of pointer,3,[],https://github.com/nothings/stb/pull/932,https://github.com/HeroicKatora,4,https://github.com/nothings/stb/pull/932#issuecomment-603387039,"The documentation of that operation already said:

Returns a pointer to the first uninitialized item added.

This also makes a lot of sense, allowing easy initialization. But the
implementation returned the index of the first uninitialized element
instead.","I find the current functionality (and a manual replacement thereof) more trivial: It is essentially calling arrlen prior to arraddn or it can be recalculated by subtracting the newly returned pointer from the new base. In comparison, getting a pointer to the new element must be done afterwards as the array could have reallocated and requires pointer arithmetic. Both parts are subjectively more error prone.",True,{}
nothings/stb,https://github.com/nothings/stb,932,2020-03-24T14:39:07Z,2020-07-13T11:39:55Z,2020-09-29T04:11:44Z,MERGED,True,15,3,1,https://github.com/HeroicKatora,Fix arraddn returning index instead of pointer,3,[],https://github.com/nothings/stb/pull/932,https://github.com/nothings,5,https://github.com/nothings/stb/pull/932#issuecomment-603405682,"The documentation of that operation already said:

Returns a pointer to the first uninitialized item added.

This also makes a lot of sense, allowing easy initialization. But the
implementation returned the index of the first uninitialized element
instead.","My point is that both of these are broken:
   item *newitem_ptr = arr + arraddn(arr,n);
   ptrdiff_t offset = arraddnp(arr,n) - arr;

because in both cases if the array relocates the computation may be wrong. So my preference is to provide both functions so people don't try to do either of these. You're correct that one is easier to synthesize, but, shrug.",True,{}
nothings/stb,https://github.com/nothings/stb,932,2020-03-24T14:39:07Z,2020-07-13T11:39:55Z,2020-09-29T04:11:44Z,MERGED,True,15,3,1,https://github.com/HeroicKatora,Fix arraddn returning index instead of pointer,3,[],https://github.com/nothings/stb/pull/932,https://github.com/HeroicKatora,6,https://github.com/nothings/stb/pull/932#issuecomment-603418719,"The documentation of that operation already said:

Returns a pointer to the first uninitialized item added.

This also makes a lot of sense, allowing easy initialization. But the
implementation returned the index of the first uninitialized element
instead.","I didn't quite think anyone would write the second line but probably better to be cautious. But the naming of arraddn vs. arraddnp also doesn't seem quite distinct enough, very easy to miss, and wouldn't address that the current documentation may have already some buggy use. Maybe we can come up with slightly more distinct and descriptive names?",True,{}
nothings/stb,https://github.com/nothings/stb,932,2020-03-24T14:39:07Z,2020-07-13T11:39:55Z,2020-09-29T04:11:44Z,MERGED,True,15,3,1,https://github.com/HeroicKatora,Fix arraddn returning index instead of pointer,3,[],https://github.com/nothings/stb/pull/932,https://github.com/nothings,7,https://github.com/nothings/stb/pull/932#issuecomment-603445441,"The documentation of that operation already said:

Returns a pointer to the first uninitialized item added.

This also makes a lot of sense, allowing easy initialization. But the
implementation returned the index of the first uninitialized element
instead.","arraddnptr
arraddnoff
?",True,{}
nothings/stb,https://github.com/nothings/stb,932,2020-03-24T14:39:07Z,2020-07-13T11:39:55Z,2020-09-29T04:11:44Z,MERGED,True,15,3,1,https://github.com/HeroicKatora,Fix arraddn returning index instead of pointer,3,[],https://github.com/nothings/stb/pull/932,https://github.com/nothings,8,https://github.com/nothings/stb/pull/932#issuecomment-604043017,"The documentation of that operation already said:

Returns a pointer to the first uninitialized item added.

This also makes a lot of sense, allowing easy initialization. But the
implementation returned the index of the first uninitialized element
instead.","Great.
As loathe as I am to keep expanding the API, for the sake of not breaking existing code, let's also add an ""arraddn()"" which is explicitly cast to void so you can't use the return value. It doesn't need to be documented, just there to keep existing code that doesn't use the return value from breaking. So just a comment ""// deprecated"" on the #define is all that's needed.",True,"{'THUMBS_UP': ['https://github.com/HeroicKatora', 'https://github.com/gustavolsson']}"
nothings/stb,https://github.com/nothings/stb,932,2020-03-24T14:39:07Z,2020-07-13T11:39:55Z,2020-09-29T04:11:44Z,MERGED,True,15,3,1,https://github.com/HeroicKatora,Fix arraddn returning index instead of pointer,3,[],https://github.com/nothings/stb/pull/932,https://github.com/nothings,9,https://github.com/nothings/stb/pull/932#issuecomment-657524197,"The documentation of that operation already said:

Returns a pointer to the first uninitialized item added.

This also makes a lot of sense, allowing easy initialization. But the
implementation returned the index of the first uninitialized element
instead.","Note that I renamed arraddnoff to arraddnindex, but you probably weren't using that one anyway.",True,{}
nothings/stb,https://github.com/nothings/stb,932,2020-03-24T14:39:07Z,2020-07-13T11:39:55Z,2020-09-29T04:11:44Z,MERGED,True,15,3,1,https://github.com/HeroicKatora,Fix arraddn returning index instead of pointer,3,[],https://github.com/nothings/stb/pull/932,https://github.com/shachaf,10,https://github.com/nothings/stb/pull/932#issuecomment-700414470,"The documentation of that operation already said:

Returns a pointer to the first uninitialized item added.

This also makes a lot of sense, allowing easy initialization. But the
implementation returned the index of the first uninitialized element
instead.","Note that I renamed arraddnoff to arraddnindex, but you probably weren't using that one anyway.

It looks like the rename wasn't quite done -- arraddnindex is defined to stbds_arraddnindex, but the stbds_ version is still called stbds_arraddnoff.",True,{}
nothings/stb,https://github.com/nothings/stb,934,2020-03-24T22:41:26Z,2020-07-13T11:39:54Z,2020-07-13T11:39:54Z,MERGED,True,7,3,1,https://github.com/zturtleman,stb_image: fix assert failing when loading BMP,1,[],https://github.com/nothings/stb/pull/934,https://github.com/zturtleman,1,https://github.com/nothings/stb/pull/934,"This fixes two issues with an assert failing. I tested that the first part fixes #909 and the second fixes #897.
A.  Loading 16/24/32-bit BMP from memory caused an assert to fail (excluding 16-bit BMP with hsz 12).
img_buffer offset was always compared with the buffer for stbi_load_from_file() but stbi_load_from_memory() uses an external buffer.
Resolution: Change s->buffer_start to s->img_buffer_original.
B. Loading BMP with large header from file caused assert to fail.
img_buffer points to stbi_uc buffer_start[128] but the largest BMP supported has a 138 byte header (hsz 124) causing img_buffer to wrap around to an offset of 10. The assert fails because 138 (header size) != 10 (offset in temp read buffer).
Resolution: Add the previously read bytes to the offset in temp read buffer to get the absolute offset.
Fixes bug introduced in c440a53 (""stb_image: fix reading BMP with explicit masks"")

The image attached to #909 only triggered the assert when loaded using stbi_load_from_memory() due to small BMP header size. The image attached to #897 triggered the assert in both cases (stbi_load_from_memory() and stbi_load_from_file()).
I personally ran into the issue with a 32-bit BMP exported from GIMP 2.10 which triggered the assert in both cases like #897 . Zipped BMP: clover.zip","This fixes two issues with an assert failing. I tested that the first part fixes #909 and the second fixes #897.
A.  Loading 16/24/32-bit BMP from memory caused an assert to fail (excluding 16-bit BMP with hsz 12).
img_buffer offset was always compared with the buffer for stbi_load_from_file() but stbi_load_from_memory() uses an external buffer.
Resolution: Change s->buffer_start to s->img_buffer_original.
B. Loading BMP with large header from file caused assert to fail.
img_buffer points to stbi_uc buffer_start[128] but the largest BMP supported has a 138 byte header (hsz 124) causing img_buffer to wrap around to an offset of 10. The assert fails because 138 (header size) != 10 (offset in temp read buffer).
Resolution: Add the previously read bytes to the offset in temp read buffer to get the absolute offset.
Fixes bug introduced in c440a53 (""stb_image: fix reading BMP with explicit masks"")

The image attached to #909 only triggered the assert when loaded using stbi_load_from_memory() due to small BMP header size. The image attached to #897 triggered the assert in both cases (stbi_load_from_memory() and stbi_load_from_file()).
I personally ran into the issue with a 32-bit BMP exported from GIMP 2.10 which triggered the assert in both cases like #897 . Zipped BMP: clover.zip",True,{'THUMBS_UP': ['https://github.com/mike10004']}
nothings/stb,https://github.com/nothings/stb,934,2020-03-24T22:41:26Z,2020-07-13T11:39:54Z,2020-07-13T11:39:54Z,MERGED,True,7,3,1,https://github.com/zturtleman,stb_image: fix assert failing when loading BMP,1,[],https://github.com/nothings/stb/pull/934,https://github.com/nothings,2,https://github.com/nothings/stb/pull/934#issuecomment-603557241,"This fixes two issues with an assert failing. I tested that the first part fixes #909 and the second fixes #897.
A.  Loading 16/24/32-bit BMP from memory caused an assert to fail (excluding 16-bit BMP with hsz 12).
img_buffer offset was always compared with the buffer for stbi_load_from_file() but stbi_load_from_memory() uses an external buffer.
Resolution: Change s->buffer_start to s->img_buffer_original.
B. Loading BMP with large header from file caused assert to fail.
img_buffer points to stbi_uc buffer_start[128] but the largest BMP supported has a 138 byte header (hsz 124) causing img_buffer to wrap around to an offset of 10. The assert fails because 138 (header size) != 10 (offset in temp read buffer).
Resolution: Add the previously read bytes to the offset in temp read buffer to get the absolute offset.
Fixes bug introduced in c440a53 (""stb_image: fix reading BMP with explicit masks"")

The image attached to #909 only triggered the assert when loaded using stbi_load_from_memory() due to small BMP header size. The image attached to #897 triggered the assert in both cases (stbi_load_from_memory() and stbi_load_from_file()).
I personally ran into the issue with a 32-bit BMP exported from GIMP 2.10 which triggered the assert in both cases like #897 . Zipped BMP: clover.zip","Looks good, except your ""Fixes: c440a53"" doesn't make any sense. I understand it fixes #909 and #897, but I'm not sure what that comment means. Does it fix a bug introduced by c440a53?",True,{}
nothings/stb,https://github.com/nothings/stb,934,2020-03-24T22:41:26Z,2020-07-13T11:39:54Z,2020-07-13T11:39:54Z,MERGED,True,7,3,1,https://github.com/zturtleman,stb_image: fix assert failing when loading BMP,1,[],https://github.com/nothings/stb/pull/934,https://github.com/zturtleman,3,https://github.com/nothings/stb/pull/934#issuecomment-603606370,"This fixes two issues with an assert failing. I tested that the first part fixes #909 and the second fixes #897.
A.  Loading 16/24/32-bit BMP from memory caused an assert to fail (excluding 16-bit BMP with hsz 12).
img_buffer offset was always compared with the buffer for stbi_load_from_file() but stbi_load_from_memory() uses an external buffer.
Resolution: Change s->buffer_start to s->img_buffer_original.
B. Loading BMP with large header from file caused assert to fail.
img_buffer points to stbi_uc buffer_start[128] but the largest BMP supported has a 138 byte header (hsz 124) causing img_buffer to wrap around to an offset of 10. The assert fails because 138 (header size) != 10 (offset in temp read buffer).
Resolution: Add the previously read bytes to the offset in temp read buffer to get the absolute offset.
Fixes bug introduced in c440a53 (""stb_image: fix reading BMP with explicit masks"")

The image attached to #909 only triggered the assert when loaded using stbi_load_from_memory() due to small BMP header size. The image attached to #897 triggered the assert in both cases (stbi_load_from_memory() and stbi_load_from_file()).
I personally ran into the issue with a 32-bit BMP exported from GIMP 2.10 which triggered the assert in both cases like #897 . Zipped BMP: clover.zip","Yes, the issues were introduced by that commit. I've change the commit message to say this.
Fixes: commit-id (""message"") format is used by the Linux kernel, and to a lesser extent Mesa 3D, to mean this commit fixes an issue introduced in the specified commit. I think it's used to help backport bug fixes to stable releases. Anyway, sorry for the confusion.",True,"{'THUMBS_UP': ['https://github.com/nothings', 'https://github.com/halx99']}"
nothings/stb,https://github.com/nothings/stb,934,2020-03-24T22:41:26Z,2020-07-13T11:39:54Z,2020-07-13T11:39:54Z,MERGED,True,7,3,1,https://github.com/zturtleman,stb_image: fix assert failing when loading BMP,1,[],https://github.com/nothings/stb/pull/934,https://github.com/nothings,4,https://github.com/nothings/stb/pull/934#issuecomment-603607505,"This fixes two issues with an assert failing. I tested that the first part fixes #909 and the second fixes #897.
A.  Loading 16/24/32-bit BMP from memory caused an assert to fail (excluding 16-bit BMP with hsz 12).
img_buffer offset was always compared with the buffer for stbi_load_from_file() but stbi_load_from_memory() uses an external buffer.
Resolution: Change s->buffer_start to s->img_buffer_original.
B. Loading BMP with large header from file caused assert to fail.
img_buffer points to stbi_uc buffer_start[128] but the largest BMP supported has a 138 byte header (hsz 124) causing img_buffer to wrap around to an offset of 10. The assert fails because 138 (header size) != 10 (offset in temp read buffer).
Resolution: Add the previously read bytes to the offset in temp read buffer to get the absolute offset.
Fixes bug introduced in c440a53 (""stb_image: fix reading BMP with explicit masks"")

The image attached to #909 only triggered the assert when loaded using stbi_load_from_memory() due to small BMP header size. The image attached to #897 triggered the assert in both cases (stbi_load_from_memory() and stbi_load_from_file()).
I personally ran into the issue with a 32-bit BMP exported from GIMP 2.10 which triggered the assert in both cases like #897 . Zipped BMP: clover.zip",No problem.,True,{}
nothings/stb,https://github.com/nothings/stb,934,2020-03-24T22:41:26Z,2020-07-13T11:39:54Z,2020-07-13T11:39:54Z,MERGED,True,7,3,1,https://github.com/zturtleman,stb_image: fix assert failing when loading BMP,1,[],https://github.com/nothings/stb/pull/934,https://github.com/cxw42,5,https://github.com/nothings/stb/pull/934#issuecomment-611134356,"This fixes two issues with an assert failing. I tested that the first part fixes #909 and the second fixes #897.
A.  Loading 16/24/32-bit BMP from memory caused an assert to fail (excluding 16-bit BMP with hsz 12).
img_buffer offset was always compared with the buffer for stbi_load_from_file() but stbi_load_from_memory() uses an external buffer.
Resolution: Change s->buffer_start to s->img_buffer_original.
B. Loading BMP with large header from file caused assert to fail.
img_buffer points to stbi_uc buffer_start[128] but the largest BMP supported has a 138 byte header (hsz 124) causing img_buffer to wrap around to an offset of 10. The assert fails because 138 (header size) != 10 (offset in temp read buffer).
Resolution: Add the previously read bytes to the offset in temp read buffer to get the absolute offset.
Fixes bug introduced in c440a53 (""stb_image: fix reading BMP with explicit masks"")

The image attached to #909 only triggered the assert when loaded using stbi_load_from_memory() due to small BMP header size. The image attached to #897 triggered the assert in both cases (stbi_load_from_memory() and stbi_load_from_file()).
I personally ran into the issue with a 32-bit BMP exported from GIMP 2.10 which triggered the assert in both cases like #897 . Zipped BMP: clover.zip","I also have a file exhibiting #897, and this PR (at commit e919bcd) fixed the assertion violation for me.  Thanks @zturtleman!",True,{'THUMBS_UP': ['https://github.com/zturtleman']}
nothings/stb,https://github.com/nothings/stb,934,2020-03-24T22:41:26Z,2020-07-13T11:39:54Z,2020-07-13T11:39:54Z,MERGED,True,7,3,1,https://github.com/zturtleman,stb_image: fix assert failing when loading BMP,1,[],https://github.com/nothings/stb/pull/934,https://github.com/nothings,6,https://github.com/nothings/stb/pull/934#issuecomment-643762653,"This fixes two issues with an assert failing. I tested that the first part fixes #909 and the second fixes #897.
A.  Loading 16/24/32-bit BMP from memory caused an assert to fail (excluding 16-bit BMP with hsz 12).
img_buffer offset was always compared with the buffer for stbi_load_from_file() but stbi_load_from_memory() uses an external buffer.
Resolution: Change s->buffer_start to s->img_buffer_original.
B. Loading BMP with large header from file caused assert to fail.
img_buffer points to stbi_uc buffer_start[128] but the largest BMP supported has a 138 byte header (hsz 124) causing img_buffer to wrap around to an offset of 10. The assert fails because 138 (header size) != 10 (offset in temp read buffer).
Resolution: Add the previously read bytes to the offset in temp read buffer to get the absolute offset.
Fixes bug introduced in c440a53 (""stb_image: fix reading BMP with explicit masks"")

The image attached to #909 only triggered the assert when loaded using stbi_load_from_memory() due to small BMP header size. The image attached to #897 triggered the assert in both cases (stbi_load_from_memory() and stbi_load_from_file()).
I personally ran into the issue with a 32-bit BMP exported from GIMP 2.10 which triggered the assert in both cases like #897 . Zipped BMP: clover.zip","It's time to merge this PR?

Don't post unhelpful comments.",True,{}
nothings/stb,https://github.com/nothings/stb,935,2020-03-24T23:49:28Z,2020-07-13T11:39:53Z,2020-07-13T11:39:53Z,MERGED,True,3,1,1,https://github.com/vickit144,Added assert(f->valid_bits >= n); on line 1604,2,[],https://github.com/nothings/stb/pull/935,https://github.com/vickit144,1,https://github.com/nothings/stb/pull/935,"I propose to remove this line because  f->valid_bits will never be less than zero since, in the while loop, you're adding 8 to it. Therefore, it will always evaluate to false. This is to help remove redundant code!","I propose to remove this line because  f->valid_bits will never be less than zero since, in the while loop, you're adding 8 to it. Therefore, it will always evaluate to false. This is to help remove redundant code!",True,{}
nothings/stb,https://github.com/nothings/stb,935,2020-03-24T23:49:28Z,2020-07-13T11:39:53Z,2020-07-13T11:39:53Z,MERGED,True,3,1,1,https://github.com/vickit144,Added assert(f->valid_bits >= n); on line 1604,2,[],https://github.com/nothings/stb/pull/935,https://github.com/nothings,2,https://github.com/nothings/stb/pull/935#issuecomment-603572176,"I propose to remove this line because  f->valid_bits will never be less than zero since, in the while loop, you're adding 8 to it. Therefore, it will always evaluate to false. This is to help remove redundant code!",It would be better to turn it into an assert >= n.,True,{}
nothings/stb,https://github.com/nothings/stb,935,2020-03-24T23:49:28Z,2020-07-13T11:39:53Z,2020-07-13T11:39:53Z,MERGED,True,3,1,1,https://github.com/vickit144,Added assert(f->valid_bits >= n); on line 1604,2,[],https://github.com/nothings/stb/pull/935,https://github.com/vickit144,3,https://github.com/nothings/stb/pull/935#issuecomment-603580298,"I propose to remove this line because  f->valid_bits will never be less than zero since, in the while loop, you're adding 8 to it. Therefore, it will always evaluate to false. This is to help remove redundant code!",Good idea! I just committed the change to my branch.,True,{}
nothings/stb,https://github.com/nothings/stb,938,2020-03-26T17:18:06Z,2020-03-27T07:52:18Z,2020-03-27T07:52:18Z,CLOSED,False,42,0,1,https://github.com/Manuzor,Implement %S specifier to support string structs,1,[],https://github.com/nothings/stb/pull/938,https://github.com/Manuzor,1,https://github.com/nothings/stb/pull/938,This adds support for passing strings represented as length+ptr structs. The struct layout can be configured with #define STB_SPRINTF_STRSTRUCT struct my_custom_string_layout. Documentation has also been added to describe this change with a short example.,This adds support for passing strings represented as length+ptr structs. The struct layout can be configured with #define STB_SPRINTF_STRSTRUCT struct my_custom_string_layout. Documentation has also been added to describe this change with a short example.,True,{}
nothings/stb,https://github.com/nothings/stb,938,2020-03-26T17:18:06Z,2020-03-27T07:52:18Z,2020-03-27T07:52:18Z,CLOSED,False,42,0,1,https://github.com/Manuzor,Implement %S specifier to support string structs,1,[],https://github.com/nothings/stb/pull/938,https://github.com/rygorous,2,https://github.com/nothings/stb/pull/938#issuecomment-604667364,This adds support for passing strings represented as length+ptr structs. The struct layout can be configured with #define STB_SPRINTF_STRSTRUCT struct my_custom_string_layout. Documentation has also been added to describe this change with a short example.,"I don't think we should accept this PR.
%S is already used by both the Single Unix Specification v2 and the Microsoft CRT to indicate a wchar_t string. The last thing stb_sprintf should do is start gratuitously overloading format specifiers that have a different meaning everywhere else.
Furthermore, if you want to print strings given by a length + payload, you can already do so using standard C format specifiers via printf(""like this: %.*s"", len, ptr), which works on every printf implementation.
Feel free to maintain your own copy with your own modifications and do whatever you want with them, but this kind of thing does not belong in the ""official"" copy.",True,{}
nothings/stb,https://github.com/nothings/stb,938,2020-03-26T17:18:06Z,2020-03-27T07:52:18Z,2020-03-27T07:52:18Z,CLOSED,False,42,0,1,https://github.com/Manuzor,Implement %S specifier to support string structs,1,[],https://github.com/nothings/stb/pull/938,https://github.com/Manuzor,3,https://github.com/nothings/stb/pull/938#issuecomment-604856936,This adds support for passing strings represented as length+ptr structs. The struct layout can be configured with #define STB_SPRINTF_STRSTRUCT struct my_custom_string_layout. Documentation has also been added to describe this change with a short example.,"Thank you for your thorough response. I thought already that this one was a little out of bounds but I still wanted to share it just in case it's useful to you. Feel free to close this PR.
I didn't know about the %S specifier already being used so broadly. I think I'll keep my changes in my own copy, like you said, but since using %S doesn't sound like a good idea I suppose I should find a more suitable letter that's less likely to conflict. Suggestions would be welcome.
The %.*s combo is what I've been using so far. But in a code base where you mainly have strings in a length+ptr format it becomes tedious to always be required to have a local variable of your string, passing the internals of it separately. As far as I can see there's no way of wrapping calls to or extending stb_sprintf in a way that lets me handle just the unwrapping of my strings and let stb_sprintf do the rest. That's why I dug in and added it directly.",True,{}
nothings/stb,https://github.com/nothings/stb,940,2020-03-27T21:23:59Z,2020-03-27T21:34:56Z,2020-03-27T21:35:10Z,CLOSED,False,10,10,2,https://github.com/brankoku,`MinGW` UTF8 string support in `stb_image` and `stb_image_write`,2,[],https://github.com/nothings/stb/pull/940,https://github.com/brankoku,1,https://github.com/nothings/stb/pull/940,Related to issues #729 and #925,Related to issues #729 and #925,True,{}
nothings/stb,https://github.com/nothings/stb,941,2020-03-27T21:36:54Z,2021-07-03T07:49:09Z,2021-07-03T07:49:09Z,CLOSED,False,6,6,2,https://github.com/brankoku,`stb_image` and `stb_image_write`: `MinGW` UTF8 filename support,2,"['1 stb_image', '1 stb_image_write', '2 good-no changes needed']",https://github.com/nothings/stb/pull/941,https://github.com/brankoku,1,https://github.com/nothings/stb/pull/941,Related to issues #729 and #925.,Related to issues #729 and #925.,True,{'THUMBS_UP': ['https://github.com/nothings']}
nothings/stb,https://github.com/nothings/stb,941,2020-03-27T21:36:54Z,2021-07-03T07:49:09Z,2021-07-03T07:49:09Z,CLOSED,False,6,6,2,https://github.com/brankoku,`stb_image` and `stb_image_write`: `MinGW` UTF8 filename support,2,"['1 stb_image', '1 stb_image_write', '2 good-no changes needed']",https://github.com/nothings/stb/pull/941,https://github.com/nothings,2,https://github.com/nothings/stb/pull/941#issuecomment-657465292,Related to issues #729 and #925.,"Closes #729, closes #925 . (so github automatically closes those issues when PR is merged)",True,{}
nothings/stb,https://github.com/nothings/stb,941,2020-03-27T21:36:54Z,2021-07-03T07:49:09Z,2021-07-03T07:49:09Z,CLOSED,False,6,6,2,https://github.com/brankoku,`stb_image` and `stb_image_write`: `MinGW` UTF8 filename support,2,"['1 stb_image', '1 stb_image_write', '2 good-no changes needed']",https://github.com/nothings/stb/pull/941,https://github.com/rygorous,3,https://github.com/nothings/stb/pull/941#issuecomment-873364643,Related to issues #729 and #925.,"A different fix for this is now merged into the dev branch, closing this PR.",True,{}
nothings/stb,https://github.com/nothings/stb,943,2020-03-31T02:19:05Z,2020-07-13T11:39:52Z,2020-07-13T11:39:52Z,MERGED,True,2,3,1,https://github.com/Vawx,remove + 1 from stb_strscpy and offset of -1 (n--) in readdir_raw,1,[],https://github.com/nothings/stb/pull/943,https://github.com/Vawx,1,https://github.com/nothings/stb/pull/943,"Fix to buffer issue where stb_strscpy would use + 1 for buffer length when stb_p_strcpy_s is called, causing a stack variable corrupted issue.
Fix to readdir_raw to no longer account for stb_strscpy having + 1 in buffer length.","Fix to buffer issue where stb_strscpy would use + 1 for buffer length when stb_p_strcpy_s is called, causing a stack variable corrupted issue.
Fix to readdir_raw to no longer account for stb_strscpy having + 1 in buffer length.",True,{}
nothings/stb,https://github.com/nothings/stb,945,2020-04-01T15:11:53Z,2021-07-07T03:53:35Z,2021-07-07T03:53:36Z,CLOSED,False,14,5,1,https://github.com/pixelmager,Fixes writing alpha-channel for BMP,1,['1 stb_image_write'],https://github.com/nothings/stb/pull/945,https://github.com/pixelmager,1,https://github.com/nothings/stb/pull/945,"See #368
An alternative approach could be to calculate values from the comp-variable. Adding a separate path for RGBA seemed like the most pragmatic approach though, as 24bit/32bit are the most common uses for the format.","See #368
An alternative approach could be to calculate values from the comp-variable. Adding a separate path for RGBA seemed like the most pragmatic approach though, as 24bit/32bit are the most common uses for the format.",True,{}
nothings/stb,https://github.com/nothings/stb,945,2020-04-01T15:11:53Z,2021-07-07T03:53:35Z,2021-07-07T03:53:36Z,CLOSED,False,14,5,1,https://github.com/pixelmager,Fixes writing alpha-channel for BMP,1,['1 stb_image_write'],https://github.com/nothings/stb/pull/945,https://github.com/rygorous,2,https://github.com/nothings/stb/pull/945#issuecomment-875253299,"See #368
An alternative approach could be to calculate values from the comp-variable. Adding a separate path for RGBA seemed like the most pragmatic approach though, as 24bit/32bit are the most common uses for the format.","I'll add an issue for this but this PR is broken, that's a malformed BMP; BMPs with alpha need to use a v4 or v5 header (even 32bpp v1 BMPs don't have alpha if you're being strict) and the size computation is wrong. I'll discard this PR and try to do an alternative implementation.",True,{'THUMBS_UP': ['https://github.com/pixelmager']}
nothings/stb,https://github.com/nothings/stb,946,2020-04-01T17:57:23Z,2020-04-01T18:12:06Z,2020-04-02T20:12:29Z,CLOSED,False,69,6,1,https://github.com/flibitijibibo,stb_image_write: Add support for disabling encoders,1,[],https://github.com/nothings/stb/pull/946,https://github.com/flibitijibibo,1,https://github.com/nothings/stb/pull/946,Title says it all. This is designed exactly the same as stb_image.h's configuration defines.,Title says it all. This is designed exactly the same as stb_image.h's configuration defines.,True,{}
nothings/stb,https://github.com/nothings/stb,946,2020-04-01T17:57:23Z,2020-04-01T18:12:06Z,2020-04-02T20:12:29Z,CLOSED,False,69,6,1,https://github.com/flibitijibibo,stb_image_write: Add support for disabling encoders,1,[],https://github.com/nothings/stb/pull/946,https://github.com/rygorous,2,https://github.com/nothings/stb/pull/946#issuecomment-607409059,Title says it all. This is designed exactly the same as stb_image.h's configuration defines.,"We regret having the individual disable switches for codecs in stb_image
because giving the user N independent binary toggles means 2^N possible
configurations with potential to cause problems such as warnings about
unused functions at high warning levels. This in turn results in a
profusion of #ifdefs all over the code to work around this, or #ifdefs
elsewhere to locally disable warnings via compiler-specific pragmas, one
set per compiler.

The switches in stb_image are not going away any time soon because we're
several years into this mess and don't want to break people's builds
unnecessarily, but having this has caused a disproportionately large
maintenance headache for a feature that very few people actually use, and
we're not eager to repeat this mistake, especially since stb_image_write
has a different entry point per format anyway.

Feel free to delete the functions you don't want in your local copy if you
don't want to use -ffunction-sections or similar to let the linker do the
dead stripping for you, but especially in stb_image_write, this offers next
to no benefit for what we already know will be painful to maintain in the
long run.
…
On Wed, Apr 1, 2020 at 10:57 AM Ethan Lee ***@***.***> wrote:
 Title says it all. This is designed exactly the same as stb_image.h's
 configuration defines.
 ------------------------------
 You can view, comment on, or merge this pull request online at:

   #946
 Commit Summary

    - stb_image_write: Add support for disabling encoders

 File Changes

    - *M* stb_image_write.h
    <https://github.com/nothings/stb/pull/946/files#diff-469d4cb48b9965801e6c8cb7b92e46fe>
    (75)

 Patch Links:

    - https://github.com/nothings/stb/pull/946.patch
    - https://github.com/nothings/stb/pull/946.diff

 —
 You are receiving this because you are subscribed to this thread.
 Reply to this email directly, view it on GitHub
 <#946>, or unsubscribe
 <https://github.com/notifications/unsubscribe-auth/AAIHB6D5AFPJXCNSUJHI6MTRKN6BRANCNFSM4LZKBD7A>
 .",True,{'THUMBS_UP': ['https://github.com/nothings']}
nothings/stb,https://github.com/nothings/stb,946,2020-04-01T17:57:23Z,2020-04-01T18:12:06Z,2020-04-02T20:12:29Z,CLOSED,False,69,6,1,https://github.com/flibitijibibo,stb_image_write: Add support for disabling encoders,1,[],https://github.com/nothings/stb/pull/946,https://github.com/kg,3,https://github.com/nothings/stb/pull/946#issuecomment-607703309,Title says it all. This is designed exactly the same as stb_image.h's configuration defines.,"The file size is MUCH bigger without disabling codecs, though. Is there a method you recommend for mitigating this? For my project it's on the order of a few hundred KB and that matters a lot for browser builds and demos.",True,{}
nothings/stb,https://github.com/nothings/stb,946,2020-04-01T17:57:23Z,2020-04-01T18:12:06Z,2020-04-02T20:12:29Z,CLOSED,False,69,6,1,https://github.com/flibitijibibo,stb_image_write: Add support for disabling encoders,1,[],https://github.com/nothings/stb/pull/946,https://github.com/rygorous,4,https://github.com/nothings/stb/pull/946#issuecomment-608078266,Title says it all. This is designed exactly the same as stb_image.h's configuration defines.,"As said, compile with -ffunction-sections and you should only get the
encoders you use.
…
On Thu, Apr 2, 2020 at 1:35 AM Katelyn Gadd ***@***.***> wrote:
 The file size is MUCH bigger without disabling codecs, though. Is there a
 method you recommend for mitigating this? For my project it's on the order
 of a few hundred KB and that matters a lot for browser builds and demos.

 —
 You are receiving this because you modified the open/close state.
 Reply to this email directly, view it on GitHub
 <#946 (comment)>, or
 unsubscribe
 <https://github.com/notifications/unsubscribe-auth/AAIHB6EE75554VKTELFVZETRKRE3TANCNFSM4LZKBD7A>
 .",True,{}
nothings/stb,https://github.com/nothings/stb,947,2020-04-02T16:21:38Z,2020-08-23T11:35:33Z,2020-08-23T11:35:33Z,CLOSED,False,3,1,1,https://github.com/nmdnm,stb_vorbis: Fix unused parameter warnings,1,[],https://github.com/nothings/stb/pull/947,https://github.com/nmdnm,1,https://github.com/nothings/stb/pull/947,"stb_vorbis.c: In function 'do_floor':
stb_vorbis.c:3053:95: warning: unused parameter 'step2_flag' [-Wunused-parameter]
 3053 | static int do_floor(vorb *f, Mapping *map, int i, int n, float *target, YTYPE *finalY, uint8 *step2_flag)
      |                                                                                        ~~~~~~~^~~~~~~~~~
stb_vorbis.c: In function 'vorbis_decode_packet_rest':
stb_vorbis.c:3161:86: warning: unused parameter 'left_end' [-Wunused-parameter]
 3161 | static int vorbis_decode_packet_rest(vorb *f, int *len, Mode *m, int left_start, int left_end, int right_start, int right_end, int *p_left)
      |                                                                                  ~~~~^~~~~~~~","stb_vorbis.c: In function 'do_floor':
stb_vorbis.c:3053:95: warning: unused parameter 'step2_flag' [-Wunused-parameter]
 3053 | static int do_floor(vorb *f, Mapping *map, int i, int n, float *target, YTYPE *finalY, uint8 *step2_flag)
      |                                                                                        ~~~~~~~^~~~~~~~~~
stb_vorbis.c: In function 'vorbis_decode_packet_rest':
stb_vorbis.c:3161:86: warning: unused parameter 'left_end' [-Wunused-parameter]
 3161 | static int vorbis_decode_packet_rest(vorb *f, int *len, Mode *m, int left_start, int left_end, int right_start, int right_end, int *p_left)
      |                                                                                  ~~~~^~~~~~~~",True,{}
nothings/stb,https://github.com/nothings/stb,947,2020-04-02T16:21:38Z,2020-08-23T11:35:33Z,2020-08-23T11:35:33Z,CLOSED,False,3,1,1,https://github.com/nmdnm,stb_vorbis: Fix unused parameter warnings,1,[],https://github.com/nothings/stb/pull/947,https://github.com/nothings,2,https://github.com/nothings/stb/pull/947#issuecomment-657474040,"stb_vorbis.c: In function 'do_floor':
stb_vorbis.c:3053:95: warning: unused parameter 'step2_flag' [-Wunused-parameter]
 3053 | static int do_floor(vorb *f, Mapping *map, int i, int n, float *target, YTYPE *finalY, uint8 *step2_flag)
      |                                                                                        ~~~~~~~^~~~~~~~~~
stb_vorbis.c: In function 'vorbis_decode_packet_rest':
stb_vorbis.c:3161:86: warning: unused parameter 'left_end' [-Wunused-parameter]
 3161 | static int vorbis_decode_packet_rest(vorb *f, int *len, Mode *m, int left_start, int left_end, int right_start, int right_end, int *p_left)
      |                                                                                  ~~~~^~~~~~~~","Needs to be done with a proper macro to allow updating when compilers change things, and the macro needs to be more than a void cast, which doesn't work on all compilers. See STBI_NOTUSED in stb_image.h",True,{}
nothings/stb,https://github.com/nothings/stb,949,2020-04-06T03:39:58Z,2020-07-13T11:39:51Z,2020-07-13T11:39:51Z,MERGED,True,8,7,1,https://github.com/castano,Integrate more accurate index selection by Rich Geldreich.,1,"['2 good-no changes needed', '1 stb library w/no tag']",https://github.com/nothings/stb/pull/949,https://github.com/castano,1,https://github.com/nothings/stb/pull/949,"Integrate Rich's changes as discussed here:
https://twitter.com/richgel999/status/1246212783445770248
I've confirmed the changes improve quality slightly. I don't have exact numbers at hand right now, but if in doubt I can run my tests again.","Integrate Rich's changes as discussed here:
https://twitter.com/richgel999/status/1246212783445770248
I've confirmed the changes improve quality slightly. I don't have exact numbers at hand right now, but if in doubt I can run my tests again.",True,{}
nothings/stb,https://github.com/nothings/stb,950,2020-04-06T16:33:43Z,2021-07-12T00:25:45Z,2021-07-12T00:25:45Z,CLOSED,False,33,4,1,https://github.com/mosra,stb_image: make unpremultiply and de-iPhone flags thread_local as well,1,"['1 stb_image', '5 merged-dev']",https://github.com/nothings/stb/pull/950,https://github.com/mosra,1,https://github.com/nothings/stb/pull/950,"Follows the change done for vertical flipping in eb48fbd for these two options as well -- I'm using these three flags basically the same way, and if one is thread_local, why not the others.
Tried to follow existing code style as closely as possible, let me know if something is off :)","Follows the change done for vertical flipping in eb48fbd for these two options as well -- I'm using these three flags basically the same way, and if one is thread_local, why not the others.
Tried to follow existing code style as closely as possible, let me know if something is off :)",True,{}
nothings/stb,https://github.com/nothings/stb,950,2020-04-06T16:33:43Z,2021-07-12T00:25:45Z,2021-07-12T00:25:45Z,CLOSED,False,33,4,1,https://github.com/mosra,stb_image: make unpremultiply and de-iPhone flags thread_local as well,1,"['1 stb_image', '5 merged-dev']",https://github.com/nothings/stb/pull/950,https://github.com/nothings,2,https://github.com/nothings/stb/pull/950#issuecomment-609928514,"Follows the change done for vertical flipping in eb48fbd for these two options as well -- I'm using these three flags basically the same way, and if one is thread_local, why not the others.
Tried to follow existing code style as closely as possible, let me know if something is off :)","I'd actually prefer to just remove unpremultiply and de-iphone from stb_image entirely. Doing so poses a difficult management/release problem, so maybe I won't, in which case this is reasonable. But I may sit on this for a while.",True,{}
nothings/stb,https://github.com/nothings/stb,950,2020-04-06T16:33:43Z,2021-07-12T00:25:45Z,2021-07-12T00:25:45Z,CLOSED,False,33,4,1,https://github.com/mosra,stb_image: make unpremultiply and de-iPhone flags thread_local as well,1,"['1 stb_image', '5 merged-dev']",https://github.com/nothings/stb/pull/950,https://github.com/mosra,3,https://github.com/nothings/stb/pull/950#issuecomment-609936910,"Follows the change done for vertical flipping in eb48fbd for these two options as well -- I'm using these three flags basically the same way, and if one is thread_local, why not the others.
Tried to follow existing code style as closely as possible, let me know if something is off :)","Okay, good to know -- then I'll gradually move this processing to the application instead.
To make the deprecation/removal easier, maybe it might make sense to wrap those two in an #ifdef at first, and then switch it off at some point?",True,{}
nothings/stb,https://github.com/nothings/stb,950,2020-04-06T16:33:43Z,2021-07-12T00:25:45Z,2021-07-12T00:25:45Z,CLOSED,False,33,4,1,https://github.com/mosra,stb_image: make unpremultiply and de-iPhone flags thread_local as well,1,"['1 stb_image', '5 merged-dev']",https://github.com/nothings/stb/pull/950,https://github.com/rygorous,4,https://github.com/nothings/stb/pull/950#issuecomment-875252043,"Follows the change done for vertical flipping in eb48fbd for these two options as well -- I'm using these three flags basically the same way, and if one is thread_local, why not the others.
Tried to follow existing code style as closely as possible, let me know if something is off :)","The iPhone format PNGs still seem to be a thing (unfortunately), so whatever, I'll take it. This is now merged into the dev branch and will be in the next release.",True,{'THUMBS_UP': ['https://github.com/mosra']}
nothings/stb,https://github.com/nothings/stb,951,2020-04-09T15:30:25Z,2020-07-13T11:39:50Z,2020-07-13T11:39:50Z,MERGED,True,74,0,1,https://github.com/AdamKorcz,Added fuzzer for stb_c_lexer,1,[],https://github.com/nothings/stb/pull/951,https://github.com/AdamKorcz,1,https://github.com/nothings/stb/pull/951,I will get a pull request going on OSS-fuzz for the necessary updates in the build to run this fuzzer.,I will get a pull request going on OSS-fuzz for the necessary updates in the build to run this fuzzer.,True,{}
nothings/stb,https://github.com/nothings/stb,951,2020-04-09T15:30:25Z,2020-07-13T11:39:50Z,2020-07-13T11:39:50Z,MERGED,True,74,0,1,https://github.com/AdamKorcz,Added fuzzer for stb_c_lexer,1,[],https://github.com/nothings/stb/pull/951,https://github.com/AdamKorcz,2,https://github.com/nothings/stb/pull/951#issuecomment-615878874,I will get a pull request going on OSS-fuzz for the necessary updates in the build to run this fuzzer.,"@nothings
In case you are waiting for something from me, please let me know.
My intention was to update the build-process over on OSS-fuzz once the fuzzer was merged here, but if you prefer to have the build-script updated before merging the fuzzer, I can get a PR going on OSS-fuzz.",True,{}
nothings/stb,https://github.com/nothings/stb,951,2020-04-09T15:30:25Z,2020-07-13T11:39:50Z,2020-07-13T11:39:50Z,MERGED,True,74,0,1,https://github.com/AdamKorcz,Added fuzzer for stb_c_lexer,1,[],https://github.com/nothings/stb/pull/951,https://github.com/rygorous,3,https://github.com/nothings/stb/pull/951#issuecomment-616019960,I will get a pull request going on OSS-fuzz for the necessary updates in the build to run this fuzzer.,"We only get around to merging PRs and going over issues once or twice a
year. It'll just take time.
…
On Sat, Apr 18, 2020 at 7:16 AM AdamKorcz ***@***.***> wrote:
 @nothings <https://github.com/nothings>
 In case you are waiting for something from me, please let me know.
 My intention was to update the build-process over on OSS-fuzz once the
 fuzzer was merged here, but if you prefer to have the build-script updated
 before merging the fuzzer, I can get a PR going on OSS-fuzz.

 —
 You are receiving this because you are subscribed to this thread.
 Reply to this email directly, view it on GitHub
 <#951 (comment)>, or
 unsubscribe
 <https://github.com/notifications/unsubscribe-auth/AAIHB6GNTVUGSCPXMHZVMDLRNGY4ZANCNFSM4ME2GGYQ>
 .",True,{}
nothings/stb,https://github.com/nothings/stb,951,2020-04-09T15:30:25Z,2020-07-13T11:39:50Z,2020-07-13T11:39:50Z,MERGED,True,74,0,1,https://github.com/AdamKorcz,Added fuzzer for stb_c_lexer,1,[],https://github.com/nothings/stb/pull/951,https://github.com/AdamKorcz,4,https://github.com/nothings/stb/pull/951#issuecomment-617695169,I will get a pull request going on OSS-fuzz for the necessary updates in the build to run this fuzzer.,@rygorous Duly noted. Thanks!,True,{}
nothings/stb,https://github.com/nothings/stb,955,2020-04-24T17:49:49Z,2020-07-13T11:39:50Z,2020-07-13T11:39:50Z,MERGED,True,2,2,1,https://github.com/Clownacy,stb_vorbis.c - Use `__NEWLIB__` for detecting alloca.h,2,[],https://github.com/nothings/stb/pull/955,https://github.com/Clownacy,1,https://github.com/nothings/stb/pull/955,"This is needed for stb_vorbis.c to compile for the Wii U using devkitPro.
This should theoretically also fix compilation for the Nintendo Switch, 3DS, and Wii (with devkitPro, that is) as they all use Newlib.
Newlib is also used by Cygwin:
https://cygwin.com/git/?p=newlib-cygwin.git;a=blob;f=newlib/libc/include/alloca.h;h=5d36318914282280b353aed457e1b1f64947b584;hb=HEAD
And the Google Native Client:
https://chromium.googlesource.com/native_client/nacl-newlib/+/refs/heads/master/newlib/libc/include/alloca.h
As you can see from these links, they both provide alloca.h as well, so it appears to be a safe bet that alloca.h is available in Newlib.","This is needed for stb_vorbis.c to compile for the Wii U using devkitPro.
This should theoretically also fix compilation for the Nintendo Switch, 3DS, and Wii (with devkitPro, that is) as they all use Newlib.
Newlib is also used by Cygwin:
https://cygwin.com/git/?p=newlib-cygwin.git;a=blob;f=newlib/libc/include/alloca.h;h=5d36318914282280b353aed457e1b1f64947b584;hb=HEAD
And the Google Native Client:
https://chromium.googlesource.com/native_client/nacl-newlib/+/refs/heads/master/newlib/libc/include/alloca.h
As you can see from these links, they both provide alloca.h as well, so it appears to be a safe bet that alloca.h is available in Newlib.",True,{}
nothings/stb,https://github.com/nothings/stb,959,2020-04-27T20:08:49Z,2020-04-28T18:53:15Z,2020-04-28T18:53:44Z,CLOSED,False,7,2,1,https://github.com/icculus,Fix infinite loops when using stdio callbacks,3,[],https://github.com/nothings/stb/pull/959,https://github.com/icculus,1,https://github.com/nothings/stb/pull/959,"This pull request fixes some cases where stb_image, with maliciously-crafted input, can get into an infinite loop if using the stdio callbacks, because stdio has some subtle quirks.
The fseek change is the most local fix for the described issue, but it's possible a better fix is not setting read_from_callbacks to zero, but I didn't want to risk unforeseen ramifications by messing with that.
I've been fuzzing stb_image after some discussion on Twitter, so there's probably going to be some other pull requests coming soon. Sorry in advance!  :)","This pull request fixes some cases where stb_image, with maliciously-crafted input, can get into an infinite loop if using the stdio callbacks, because stdio has some subtle quirks.
The fseek change is the most local fix for the described issue, but it's possible a better fix is not setting read_from_callbacks to zero, but I didn't want to risk unforeseen ramifications by messing with that.
I've been fuzzing stb_image after some discussion on Twitter, so there's probably going to be some other pull requests coming soon. Sorry in advance!  :)",True,{}
nothings/stb,https://github.com/nothings/stb,959,2020-04-27T20:08:49Z,2020-04-28T18:53:15Z,2020-04-28T18:53:44Z,CLOSED,False,7,2,1,https://github.com/icculus,Fix infinite loops when using stdio callbacks,3,[],https://github.com/nothings/stb/pull/959,https://github.com/nothings,2,https://github.com/nothings/stb/pull/959#issuecomment-620211031,"This pull request fixes some cases where stb_image, with maliciously-crafted input, can get into an infinite loop if using the stdio callbacks, because stdio has some subtle quirks.
The fseek change is the most local fix for the described issue, but it's possible a better fix is not setting read_from_callbacks to zero, but I didn't want to risk unforeseen ramifications by messing with that.
I've been fuzzing stb_image after some discussion on Twitter, so there's probably going to be some other pull requests coming soon. Sorry in advance!  :)","Thanks, Ryan. All PRs are appreciated!",True,{}
nothings/stb,https://github.com/nothings/stb,959,2020-04-27T20:08:49Z,2020-04-28T18:53:15Z,2020-04-28T18:53:44Z,CLOSED,False,7,2,1,https://github.com/icculus,Fix infinite loops when using stdio callbacks,3,[],https://github.com/nothings/stb/pull/959,https://github.com/icculus,3,https://github.com/nothings/stb/pull/959#issuecomment-620791805,"This pull request fixes some cases where stb_image, with maliciously-crafted input, can get into an infinite loop if using the stdio callbacks, because stdio has some subtle quirks.
The fseek change is the most local fix for the described issue, but it's possible a better fix is not setting read_from_callbacks to zero, but I didn't want to risk unforeseen ramifications by messing with that.
I've been fuzzing stb_image after some discussion on Twitter, so there's probably going to be some other pull requests coming soon. Sorry in advance!  :)","I'm going to close this PR and start a new one with this and the rest of the fuzzing fixes, so there's no confusion and everything merges cleanly.
Ignore this and look at #960 instead, thanks!",True,{'THUMBS_UP': ['https://github.com/nothings']}
nothings/stb,https://github.com/nothings/stb,960,2020-04-28T18:52:46Z,2020-07-13T11:39:49Z,2021-03-18T07:34:40Z,MERGED,True,107,28,1,https://github.com/icculus,stb_image fuzzing fixes,11,[],https://github.com/nothings/stb/pull/960,https://github.com/icculus,1,https://github.com/nothings/stb/pull/960,"This PR has all the hardening work I did on stb_image:

Fuzzing inputs with AFL, using a 2x2 image in bmp, gif, jpg, hdr, png, pnm, psd, and tga. (pic not tested). Those files are available in stbi_afl.zip .
Running this testsuite through Valgrind and AddressSanitizer: https://code.google.com/archive/p/imagetestsuite/downloads

Testing was done with and without SSE2 support.","This PR has all the hardening work I did on stb_image:

Fuzzing inputs with AFL, using a 2x2 image in bmp, gif, jpg, hdr, png, pnm, psd, and tga. (pic not tested). Those files are available in stbi_afl.zip .
Running this testsuite through Valgrind and AddressSanitizer: https://code.google.com/archive/p/imagetestsuite/downloads

Testing was done with and without SSE2 support.",True,"{'HEART': ['https://github.com/DanielGibson', 'https://github.com/floooh', 'https://github.com/AndrewJDR', 'https://github.com/ands', 'https://github.com/bqqbarbhg', 'https://github.com/qarmin', 'https://github.com/akien-mga', 'https://github.com/bartwe', 'https://github.com/adamkewley', 'https://github.com/sthagen'], 'THUMBS_UP': ['https://github.com/MiKom']}"
nothings/stb,https://github.com/nothings/stb,960,2020-04-28T18:52:46Z,2020-07-13T11:39:49Z,2021-03-18T07:34:40Z,MERGED,True,107,28,1,https://github.com/icculus,stb_image fuzzing fixes,11,[],https://github.com/nothings/stb/pull/960,https://github.com/randy408,2,https://github.com/nothings/stb/pull/960#issuecomment-621304200,"This PR has all the hardening work I did on stb_image:

Fuzzing inputs with AFL, using a 2x2 image in bmp, gif, jpg, hdr, png, pnm, psd, and tga. (pic not tested). Those files are available in stbi_afl.zip .
Running this testsuite through Valgrind and AddressSanitizer: https://code.google.com/archive/p/imagetestsuite/downloads

Testing was done with and without SSE2 support.","I maintain a PNG-only fuzzer on OSS-Fuzz that found this which doesn't seem to be addressed by this PR. I'm the only one who looks at the bug reports for that fuzzer so It hasn't been expanded to other formats because I reckoned there would too many  bug reports for me to handle.
If you're willing to address the bug reports that would come up from increasing code coverage I could add you as a contact for the project. Overall it's a simple process, issues are automatically created on chromium.org with test cases and are auto-closed when the fix is in master.",True,{}
nothings/stb,https://github.com/nothings/stb,960,2020-04-28T18:52:46Z,2020-07-13T11:39:49Z,2021-03-18T07:34:40Z,MERGED,True,107,28,1,https://github.com/icculus,stb_image fuzzing fixes,11,[],https://github.com/nothings/stb/pull/960,https://github.com/icculus,3,https://github.com/nothings/stb/pull/960#issuecomment-621382690,"This PR has all the hardening work I did on stb_image:

Fuzzing inputs with AFL, using a 2x2 image in bmp, gif, jpg, hdr, png, pnm, psd, and tga. (pic not tested). Those files are available in stbi_afl.zip .
Running this testsuite through Valgrind and AddressSanitizer: https://code.google.com/archive/p/imagetestsuite/downloads

Testing was done with and without SSE2 support.","I maintain a PNG-only fuzzer on OSS-Fuzz that found this which doesn't seem to be addressed by this PR.

I added your fix to this PR (commit credited to you, of course!). It's possible other changes made mitigated the immediate need for this fix, and it's also possible my fuzzing just missed it, but it looked like a correct, localized and reasonable change in any case, so I added it in.

If you're willing to address the bug reports that would come up from increasing code coverage I could add you as a contact for the project.

Thanks, but I don't have time to take on that responsibility.",True,{'THUMBS_UP': ['https://github.com/adamkewley']}
nothings/stb,https://github.com/nothings/stb,961,2020-05-03T00:36:53Z,2020-07-13T11:39:48Z,2020-08-03T09:13:44Z,MERGED,True,2,2,1,https://github.com/RandomShaper,stb_vorbis.c: Fix missing update to 64-bit alignment,1,[],https://github.com/nothings/stb/pull/961,https://github.com/RandomShaper,1,https://github.com/nothings/stb/pull/961,"After updating this file to 1.19 we started having crashes in Godot engine.
It seems there was a change to 64-bit alignment that missed setup_temp_free(). This PR fixes the crashes caused by that.
Greetings from Godot!","After updating this file to 1.19 we started having crashes in Godot engine.
It seems there was a change to 64-bit alignment that missed setup_temp_free(). This PR fixes the crashes caused by that.
Greetings from Godot!",True,"{'THUMBS_UP': ['https://github.com/rafaeldelboni', 'https://github.com/akien-mga', 'https://github.com/k6l2']}"
nothings/stb,https://github.com/nothings/stb,961,2020-05-03T00:36:53Z,2020-07-13T11:39:48Z,2020-08-03T09:13:44Z,MERGED,True,2,2,1,https://github.com/RandomShaper,stb_vorbis.c: Fix missing update to 64-bit alignment,1,[],https://github.com/nothings/stb/pull/961,https://github.com/nothings,2,https://github.com/nothings/stb/pull/961#issuecomment-634368038,"After updating this file to 1.19 we started having crashes in Godot engine.
It seems there was a change to 64-bit alignment that missed setup_temp_free(). This PR fixes the crashes caused by that.
Greetings from Godot!",Fixes #972,True,{}
nothings/stb,https://github.com/nothings/stb,961,2020-05-03T00:36:53Z,2020-07-13T11:39:48Z,2020-08-03T09:13:44Z,MERGED,True,2,2,1,https://github.com/RandomShaper,stb_vorbis.c: Fix missing update to 64-bit alignment,1,[],https://github.com/nothings/stb/pull/961,https://github.com/akien-mga,3,https://github.com/nothings/stb/pull/961#issuecomment-654714790,"After updating this file to 1.19 we started having crashes in Godot engine.
It seems there was a change to 64-bit alignment that missed setup_temp_free(). This PR fixes the crashes caused by that.
Greetings from Godot!","@RandomShaper BTW, I found another occurrence of ~3, should it be changed too?
diff --git a/thirdparty/misc/stb_vorbis.c b/thirdparty/misc/stb_vorbis.c
index b0d79b1724..3b23d50b43 100644
--- a/thirdparty/misc/stb_vorbis.c
+++ b/thirdparty/misc/stb_vorbis.c
@@ -4253,7 +4253,7 @@ static void vorbis_init(stb_vorbis *p, const stb_vorbis_alloc *z)
    memset(p, 0, sizeof(*p)); // NULL out all malloc'd pointers to start
    if (z) {
       p->alloc = *z;
-      p->alloc.alloc_buffer_length_in_bytes = (p->alloc.alloc_buffer_length_in_bytes+3) & ~3;
+      p->alloc.alloc_buffer_length_in_bytes = (p->alloc.alloc_buffer_length_in_bytes+7) & ~7;
       p->temp_offset = p->alloc.alloc_buffer_length_in_bytes;
    }
    p->eof = 0;",True,{}
nothings/stb,https://github.com/nothings/stb,961,2020-05-03T00:36:53Z,2020-07-13T11:39:48Z,2020-08-03T09:13:44Z,MERGED,True,2,2,1,https://github.com/RandomShaper,stb_vorbis.c: Fix missing update to 64-bit alignment,1,[],https://github.com/nothings/stb/pull/961,https://github.com/nothings,4,https://github.com/nothings/stb/pull/961#issuecomment-657491332,"After updating this file to 1.19 we started having crashes in Godot engine.
It seems there was a change to 64-bit alignment that missed setup_temp_free(). This PR fixes the crashes caused by that.
Greetings from Godot!","@RandomShaper BTW, I found another occurrence of ~3, should it be changed too?
diff --git a/thirdparty/misc/stb_vorbis.c b/thirdparty/misc/stb_vorbis.c
index b0d79b1724..3b23d50b43 100644
--- a/thirdparty/misc/stb_vorbis.c
+++ b/thirdparty/misc/stb_vorbis.c
@@ -4253,7 +4253,7 @@ static void vorbis_init(stb_vorbis *p, const stb_vorbis_alloc *z)
    memset(p, 0, sizeof(*p)); // NULL out all malloc'd pointers to start
    if (z) {
       p->alloc = *z;
-      p->alloc.alloc_buffer_length_in_bytes = (p->alloc.alloc_buffer_length_in_bytes+3) & ~3;
+      p->alloc.alloc_buffer_length_in_bytes = (p->alloc.alloc_buffer_length_in_bytes+7) & ~7;
       p->temp_offset = p->alloc.alloc_buffer_length_in_bytes;
    }
    p->eof = 0;

I changed it to
     p->alloc.alloc_buffer_length_in_bytes &= ~7;

since it's actually pointing to the end of the buffer and it doesn't make sense to increase it past the end",True,{}
nothings/stb,https://github.com/nothings/stb,971,2020-05-25T21:08:17Z,2020-07-13T11:39:47Z,2020-07-14T08:06:26Z,MERGED,True,10,4,1,https://github.com/recp,stbi: fix thread local selector,2,[],https://github.com/nothings/stb/pull/971,https://github.com/recp,1,https://github.com/nothings/stb/pull/971,"GCC < 5 supports __thread and GCC >= 5 supports C11 with _Thread_local
Skip _Thread_local for MSVC because it may not be supported


See #967

Also I have found these:

Bug 203066 _Thread_local detection is broken with GCC < 4.9
 _Thread_local detection is broken with GCC < 4.9

I have updated thread selector like this:
before:
#ifndef STBI_NO_THREAD_LOCALS
   #if defined(__cplusplus) &&  __cplusplus >= 201103L
      #define STBI_THREAD_LOCAL       thread_local
   #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L
      #define STBI_THREAD_LOCAL       _Thread_local
   #elif defined(__GNUC__)
      #define STBI_THREAD_LOCAL       __thread
   #elif defined(_MSC_VER)
      #define STBI_THREAD_LOCAL       __declspec(thread)
#endif
#endif
after:
#ifndef STBI_NO_THREAD_LOCALS
   #if defined(__cplusplus) &&  __cplusplus >= 201103L
      #define STBI_THREAD_LOCAL       thread_local
   #elif defined(__GNUC__) && __GNUC__ < 5
      #define STBI_THREAD_LOCAL       __thread
   #elif defined(_MSC_VER)
      #define STBI_THREAD_LOCAL       __declspec(thread)
   #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L && !defined(__STDC_NO_THREADS__)
      #define STBI_THREAD_LOCAL       _Thread_local
   #endif
#endif
Now if GCC's version is lower than 5 e.g. 4.8 than __thread will be used. Because AFAIK, C11 is supported since GCC 5.","GCC < 5 supports __thread and GCC >= 5 supports C11 with _Thread_local
Skip _Thread_local for MSVC because it may not be supported


See #967

Also I have found these:

Bug 203066 _Thread_local detection is broken with GCC < 4.9
 _Thread_local detection is broken with GCC < 4.9

I have updated thread selector like this:
before:
#ifndef STBI_NO_THREAD_LOCALS
   #if defined(__cplusplus) &&  __cplusplus >= 201103L
      #define STBI_THREAD_LOCAL       thread_local
   #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L
      #define STBI_THREAD_LOCAL       _Thread_local
   #elif defined(__GNUC__)
      #define STBI_THREAD_LOCAL       __thread
   #elif defined(_MSC_VER)
      #define STBI_THREAD_LOCAL       __declspec(thread)
#endif
#endif
after:
#ifndef STBI_NO_THREAD_LOCALS
   #if defined(__cplusplus) &&  __cplusplus >= 201103L
      #define STBI_THREAD_LOCAL       thread_local
   #elif defined(__GNUC__) && __GNUC__ < 5
      #define STBI_THREAD_LOCAL       __thread
   #elif defined(_MSC_VER)
      #define STBI_THREAD_LOCAL       __declspec(thread)
   #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L && !defined(__STDC_NO_THREADS__)
      #define STBI_THREAD_LOCAL       _Thread_local
   #endif
#endif
Now if GCC's version is lower than 5 e.g. 4.8 than __thread will be used. Because AFAIK, C11 is supported since GCC 5.",True,{}
nothings/stb,https://github.com/nothings/stb,971,2020-05-25T21:08:17Z,2020-07-13T11:39:47Z,2020-07-14T08:06:26Z,MERGED,True,10,4,1,https://github.com/recp,stbi: fix thread local selector,2,[],https://github.com/nothings/stb/pull/971,https://github.com/nothings,2,https://github.com/nothings/stb/pull/971#issuecomment-633836332,"GCC < 5 supports __thread and GCC >= 5 supports C11 with _Thread_local
Skip _Thread_local for MSVC because it may not be supported


See #967

Also I have found these:

Bug 203066 _Thread_local detection is broken with GCC < 4.9
 _Thread_local detection is broken with GCC < 4.9

I have updated thread selector like this:
before:
#ifndef STBI_NO_THREAD_LOCALS
   #if defined(__cplusplus) &&  __cplusplus >= 201103L
      #define STBI_THREAD_LOCAL       thread_local
   #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L
      #define STBI_THREAD_LOCAL       _Thread_local
   #elif defined(__GNUC__)
      #define STBI_THREAD_LOCAL       __thread
   #elif defined(_MSC_VER)
      #define STBI_THREAD_LOCAL       __declspec(thread)
#endif
#endif
after:
#ifndef STBI_NO_THREAD_LOCALS
   #if defined(__cplusplus) &&  __cplusplus >= 201103L
      #define STBI_THREAD_LOCAL       thread_local
   #elif defined(__GNUC__) && __GNUC__ < 5
      #define STBI_THREAD_LOCAL       __thread
   #elif defined(_MSC_VER)
      #define STBI_THREAD_LOCAL       __declspec(thread)
   #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L && !defined(__STDC_NO_THREADS__)
      #define STBI_THREAD_LOCAL       _Thread_local
   #endif
#endif
Now if GCC's version is lower than 5 e.g. 4.8 than __thread will be used. Because AFAIK, C11 is supported since GCC 5.",Makes sense! Thanks for doing the investigative work.,True,"{'THUMBS_UP': ['https://github.com/recp'], 'HEART': ['https://github.com/recp']}"
nothings/stb,https://github.com/nothings/stb,971,2020-05-25T21:08:17Z,2020-07-13T11:39:47Z,2020-07-14T08:06:26Z,MERGED,True,10,4,1,https://github.com/recp,stbi: fix thread local selector,2,[],https://github.com/nothings/stb/pull/971,https://github.com/recp,3,https://github.com/nothings/stb/pull/971#issuecomment-635417970,"GCC < 5 supports __thread and GCC >= 5 supports C11 with _Thread_local
Skip _Thread_local for MSVC because it may not be supported


See #967

Also I have found these:

Bug 203066 _Thread_local detection is broken with GCC < 4.9
 _Thread_local detection is broken with GCC < 4.9

I have updated thread selector like this:
before:
#ifndef STBI_NO_THREAD_LOCALS
   #if defined(__cplusplus) &&  __cplusplus >= 201103L
      #define STBI_THREAD_LOCAL       thread_local
   #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L
      #define STBI_THREAD_LOCAL       _Thread_local
   #elif defined(__GNUC__)
      #define STBI_THREAD_LOCAL       __thread
   #elif defined(_MSC_VER)
      #define STBI_THREAD_LOCAL       __declspec(thread)
#endif
#endif
after:
#ifndef STBI_NO_THREAD_LOCALS
   #if defined(__cplusplus) &&  __cplusplus >= 201103L
      #define STBI_THREAD_LOCAL       thread_local
   #elif defined(__GNUC__) && __GNUC__ < 5
      #define STBI_THREAD_LOCAL       __thread
   #elif defined(_MSC_VER)
      #define STBI_THREAD_LOCAL       __declspec(thread)
   #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L && !defined(__STDC_NO_THREADS__)
      #define STBI_THREAD_LOCAL       _Thread_local
   #endif
#endif
Now if GCC's version is lower than 5 e.g. 4.8 than __thread will be used. Because AFAIK, C11 is supported since GCC 5.",@nothings any chance to merge this soon?,True,{}
nothings/stb,https://github.com/nothings/stb,971,2020-05-25T21:08:17Z,2020-07-13T11:39:47Z,2020-07-14T08:06:26Z,MERGED,True,10,4,1,https://github.com/recp,stbi: fix thread local selector,2,[],https://github.com/nothings/stb/pull/971,https://github.com/nothings,4,https://github.com/nothings/stb/pull/971#issuecomment-657492203,"GCC < 5 supports __thread and GCC >= 5 supports C11 with _Thread_local
Skip _Thread_local for MSVC because it may not be supported


See #967

Also I have found these:

Bug 203066 _Thread_local detection is broken with GCC < 4.9
 _Thread_local detection is broken with GCC < 4.9

I have updated thread selector like this:
before:
#ifndef STBI_NO_THREAD_LOCALS
   #if defined(__cplusplus) &&  __cplusplus >= 201103L
      #define STBI_THREAD_LOCAL       thread_local
   #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L
      #define STBI_THREAD_LOCAL       _Thread_local
   #elif defined(__GNUC__)
      #define STBI_THREAD_LOCAL       __thread
   #elif defined(_MSC_VER)
      #define STBI_THREAD_LOCAL       __declspec(thread)
#endif
#endif
after:
#ifndef STBI_NO_THREAD_LOCALS
   #if defined(__cplusplus) &&  __cplusplus >= 201103L
      #define STBI_THREAD_LOCAL       thread_local
   #elif defined(__GNUC__) && __GNUC__ < 5
      #define STBI_THREAD_LOCAL       __thread
   #elif defined(_MSC_VER)
      #define STBI_THREAD_LOCAL       __declspec(thread)
   #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L && !defined(__STDC_NO_THREADS__)
      #define STBI_THREAD_LOCAL       _Thread_local
   #endif
#endif
Now if GCC's version is lower than 5 e.g. 4.8 than __thread will be used. Because AFAIK, C11 is supported since GCC 5.","Note that I only push to github when doing releases, so merges only retire on github when there's a release.",True,{}
nothings/stb,https://github.com/nothings/stb,971,2020-05-25T21:08:17Z,2020-07-13T11:39:47Z,2020-07-14T08:06:26Z,MERGED,True,10,4,1,https://github.com/recp,stbi: fix thread local selector,2,[],https://github.com/nothings/stb/pull/971,https://github.com/recp,5,https://github.com/nothings/stb/pull/971#issuecomment-658035953,"GCC < 5 supports __thread and GCC >= 5 supports C11 with _Thread_local
Skip _Thread_local for MSVC because it may not be supported


See #967

Also I have found these:

Bug 203066 _Thread_local detection is broken with GCC < 4.9
 _Thread_local detection is broken with GCC < 4.9

I have updated thread selector like this:
before:
#ifndef STBI_NO_THREAD_LOCALS
   #if defined(__cplusplus) &&  __cplusplus >= 201103L
      #define STBI_THREAD_LOCAL       thread_local
   #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L
      #define STBI_THREAD_LOCAL       _Thread_local
   #elif defined(__GNUC__)
      #define STBI_THREAD_LOCAL       __thread
   #elif defined(_MSC_VER)
      #define STBI_THREAD_LOCAL       __declspec(thread)
#endif
#endif
after:
#ifndef STBI_NO_THREAD_LOCALS
   #if defined(__cplusplus) &&  __cplusplus >= 201103L
      #define STBI_THREAD_LOCAL       thread_local
   #elif defined(__GNUC__) && __GNUC__ < 5
      #define STBI_THREAD_LOCAL       __thread
   #elif defined(_MSC_VER)
      #define STBI_THREAD_LOCAL       __declspec(thread)
   #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L && !defined(__STDC_NO_THREADS__)
      #define STBI_THREAD_LOCAL       _Thread_local
   #endif
#endif
Now if GCC's version is lower than 5 e.g. 4.8 than __thread will be used. Because AFAIK, C11 is supported since GCC 5.",@nothings thanks,True,{}
nothings/stb,https://github.com/nothings/stb,973,2020-05-30T20:44:47Z,2020-07-13T11:39:47Z,2020-07-13T11:39:47Z,MERGED,True,1,1,1,https://github.com/coltongit,Fix minor typo in comment on line 6532,1,[],https://github.com/nothings/stb/pull/973,https://github.com/coltongit,1,https://github.com/nothings/stb/pull/973,Is as it says on the tin. Found a minor typo in one of the comments and fixed it.,Is as it says on the tin. Found a minor typo in one of the comments and fixed it.,True,{}
nothings/stb,https://github.com/nothings/stb,974,2020-06-01T04:49:35Z,2020-07-13T11:39:46Z,2020-07-13T11:39:46Z,MERGED,True,93,5,5,https://github.com/randy408,Update image fuzzer,10,[],https://github.com/nothings/stb/pull/974,https://github.com/randy408,1,https://github.com/nothings/stb/pull/974,"All of the supported image formats are now fuzzed on OSS-Fuzz, the fuzz target has been renamed to indicate that.
The entry point fuzz_main.c provides the main() function for the fuzz target and has been added to the Makefile, this can be used to reproduce test cases produced by OSS-Fuzz. It takes a  filename as commandline argument, it will also be useful for the fuzzer introduced by #951.
The ossfuzz.sh build script has no use outside of a OSS-Fuzz environment but is supposed to be upstreamed, stb_png_read_fuzzer.options is no longer needed.","All of the supported image formats are now fuzzed on OSS-Fuzz, the fuzz target has been renamed to indicate that.
The entry point fuzz_main.c provides the main() function for the fuzz target and has been added to the Makefile, this can be used to reproduce test cases produced by OSS-Fuzz. It takes a  filename as commandline argument, it will also be useful for the fuzzer introduced by #951.
The ossfuzz.sh build script has no use outside of a OSS-Fuzz environment but is supposed to be upstreamed, stb_png_read_fuzzer.options is no longer needed.",True,{}
nothings/stb,https://github.com/nothings/stb,979,2020-06-23T15:09:34Z,2020-06-25T03:40:19Z,2020-06-25T03:58:21Z,CLOSED,False,1,0,1,https://github.com/ITikhonov,Added missing prototype for stbtt_FindSVGDoc(),1,[],https://github.com/nothings/stb/pull/979,https://github.com/ITikhonov,1,https://github.com/nothings/stb/pull/979,"Was getting an error:
./stb_truetype.h:2690:24: error: no previous prototype for function 'stbtt_FindSVGDoc' [-Werror,-Wmissing-prototypes]
Or may be it was intended to be static function?","Was getting an error:
./stb_truetype.h:2690:24: error: no previous prototype for function 'stbtt_FindSVGDoc' [-Werror,-Wmissing-prototypes]
Or may be it was intended to be static function?",True,{}
nothings/stb,https://github.com/nothings/stb,979,2020-06-23T15:09:34Z,2020-06-25T03:40:19Z,2020-06-25T03:58:21Z,CLOSED,False,1,0,1,https://github.com/ITikhonov,Added missing prototype for stbtt_FindSVGDoc(),1,[],https://github.com/nothings/stb/pull/979,https://github.com/nothings,2,https://github.com/nothings/stb/pull/979#issuecomment-649200638,"Was getting an error:
./stb_truetype.h:2690:24: error: no previous prototype for function 'stbtt_FindSVGDoc' [-Werror,-Wmissing-prototypes]
Or may be it was intended to be static function?",?,True,{}
nothings/stb,https://github.com/nothings/stb,981,2020-06-25T08:50:09Z,2020-06-25T13:55:41Z,2020-06-25T13:55:41Z,CLOSED,False,2,1,1,https://github.com/gustavolsson,stb_ds: fix bug where arraddn would return index instead of pointer,1,[],https://github.com/nothings/stb/pull/981,https://github.com/gustavolsson,1,https://github.com/nothings/stb/pull/981,"I ported some code over from stretchy_buffer to stb_ds and found that arraddn returns the index of the first of the newly added items instead of a pointer to it (as it states in the documentation).
This PR makes the behavior consistent with what is stated in the documentation and with stretchy_buffer's sb_add implementation.","I ported some code over from stretchy_buffer to stb_ds and found that arraddn returns the index of the first of the newly added items instead of a pointer to it (as it states in the documentation).
This PR makes the behavior consistent with what is stated in the documentation and with stretchy_buffer's sb_add implementation.",True,{}
nothings/stb,https://github.com/nothings/stb,981,2020-06-25T08:50:09Z,2020-06-25T13:55:41Z,2020-06-25T13:55:41Z,CLOSED,False,2,1,1,https://github.com/gustavolsson,stb_ds: fix bug where arraddn would return index instead of pointer,1,[],https://github.com/nothings/stb/pull/981,https://github.com/nothings,2,https://github.com/nothings/stb/pull/981#issuecomment-649556734,"I ported some code over from stretchy_buffer to stb_ds and found that arraddn returns the index of the first of the newly added items instead of a pointer to it (as it states in the documentation).
This PR makes the behavior consistent with what is stated in the documentation and with stretchy_buffer's sb_add implementation.",duplicate of #932,True,{'THUMBS_UP': ['https://github.com/gustavolsson']}
nothings/stb,https://github.com/nothings/stb,983,2020-06-30T06:58:19Z,2020-06-30T07:04:38Z,2020-06-30T07:04:38Z,CLOSED,False,3,3,1,https://github.com/daemyung,stb_image: fix build errors,1,[],https://github.com/nothings/stb/pull/983,https://github.com/daemyung,1,https://github.com/nothings/stb/pull/983,Build errors are occured on MSVC 14.26.28801.,Build errors are occured on MSVC 14.26.28801.,True,{}
nothings/stb,https://github.com/nothings/stb,984,2020-06-30T07:12:31Z,2020-07-13T11:14:26Z,2020-07-13T22:55:51Z,CLOSED,False,3,3,1,https://github.com/daemyung,stb_image: fix build errors,1,[],https://github.com/nothings/stb/pull/984,https://github.com/daemyung,1,https://github.com/nothings/stb/pull/984,"Build errors are generated on Microsoft (R) C/C++ Optimizing Compiler Version 19.26.28806 for x64.
Error messages are below:
stb_image.h(1681,10): error C2196: case value '17' already used
stb_image.h(1683,10): error C2196: case value '12' already used
stb_image.h(1684,10): error C2196: case value '9' already used
stb_image.h(1685,10): error C2196: case value '10' already used
stb_image.h(1688,10): error C2196: case value '33' already used
stb_image.h(1738,10): error C2196: case value '17' already used
stb_image.h(1740,10): error C2196: case value '12' already used
stb_image.h(1741,10): error C2196: case value '9' already used
stb_image.h(1742,10): error C2196: case value '10' already used
stb_image.h(1745,10): error C2196: case value '33' already used","Build errors are generated on Microsoft (R) C/C++ Optimizing Compiler Version 19.26.28806 for x64.
Error messages are below:
stb_image.h(1681,10): error C2196: case value '17' already used
stb_image.h(1683,10): error C2196: case value '12' already used
stb_image.h(1684,10): error C2196: case value '9' already used
stb_image.h(1685,10): error C2196: case value '10' already used
stb_image.h(1688,10): error C2196: case value '33' already used
stb_image.h(1738,10): error C2196: case value '17' already used
stb_image.h(1740,10): error C2196: case value '12' already used
stb_image.h(1741,10): error C2196: case value '9' already used
stb_image.h(1742,10): error C2196: case value '10' already used
stb_image.h(1745,10): error C2196: case value '33' already used",True,{}
nothings/stb,https://github.com/nothings/stb,984,2020-06-30T07:12:31Z,2020-07-13T11:14:26Z,2020-07-13T22:55:51Z,CLOSED,False,3,3,1,https://github.com/daemyung,stb_image: fix build errors,1,[],https://github.com/nothings/stb/pull/984,https://github.com/nothings,2,https://github.com/nothings/stb/pull/984#issuecomment-651624056,"Build errors are generated on Microsoft (R) C/C++ Optimizing Compiler Version 19.26.28806 for x64.
Error messages are below:
stb_image.h(1681,10): error C2196: case value '17' already used
stb_image.h(1683,10): error C2196: case value '12' already used
stb_image.h(1684,10): error C2196: case value '9' already used
stb_image.h(1685,10): error C2196: case value '10' already used
stb_image.h(1688,10): error C2196: case value '33' already used
stb_image.h(1738,10): error C2196: case value '17' already used
stb_image.h(1740,10): error C2196: case value '12' already used
stb_image.h(1741,10): error C2196: case value '9' already used
stb_image.h(1742,10): error C2196: case value '10' already used
stb_image.h(1745,10): error C2196: case value '33' already used","That fix doesn't make any sense, the STBI_COMBO macro right above it is what generates the case expression, and it's parenthesized properly, so I don't see how that could fix it.",True,{}
nothings/stb,https://github.com/nothings/stb,984,2020-06-30T07:12:31Z,2020-07-13T11:14:26Z,2020-07-13T22:55:51Z,CLOSED,False,3,3,1,https://github.com/daemyung,stb_image: fix build errors,1,[],https://github.com/nothings/stb/pull/984,https://github.com/nothings,3,https://github.com/nothings/stb/pull/984#issuecomment-651625580,"Build errors are generated on Microsoft (R) C/C++ Optimizing Compiler Version 19.26.28806 for x64.
Error messages are below:
stb_image.h(1681,10): error C2196: case value '17' already used
stb_image.h(1683,10): error C2196: case value '12' already used
stb_image.h(1684,10): error C2196: case value '9' already used
stb_image.h(1685,10): error C2196: case value '10' already used
stb_image.h(1688,10): error C2196: case value '33' already used
stb_image.h(1738,10): error C2196: case value '17' already used
stb_image.h(1740,10): error C2196: case value '12' already used
stb_image.h(1741,10): error C2196: case value '9' already used
stb_image.h(1742,10): error C2196: case value '10' already used
stb_image.h(1745,10): error C2196: case value '33' already used","I mean, the proposed fix is clearly better code quality regardless, I just don't understand how the bug arises. Is this some very new version of MSVC? It seems like a compiler bug, but maybe I'm missing something.",True,{}
nothings/stb,https://github.com/nothings/stb,984,2020-06-30T07:12:31Z,2020-07-13T11:14:26Z,2020-07-13T22:55:51Z,CLOSED,False,3,3,1,https://github.com/daemyung,stb_image: fix build errors,1,[],https://github.com/nothings/stb/pull/984,https://github.com/daemyung,4,https://github.com/nothings/stb/pull/984#issuecomment-651628591,"Build errors are generated on Microsoft (R) C/C++ Optimizing Compiler Version 19.26.28806 for x64.
Error messages are below:
stb_image.h(1681,10): error C2196: case value '17' already used
stb_image.h(1683,10): error C2196: case value '12' already used
stb_image.h(1684,10): error C2196: case value '9' already used
stb_image.h(1685,10): error C2196: case value '10' already used
stb_image.h(1688,10): error C2196: case value '33' already used
stb_image.h(1738,10): error C2196: case value '17' already used
stb_image.h(1740,10): error C2196: case value '12' already used
stb_image.h(1741,10): error C2196: case value '9' already used
stb_image.h(1742,10): error C2196: case value '10' already used
stb_image.h(1745,10): error C2196: case value '33' already used","I agree your oppinion. Actually there is no different between previous code and new code. I don't know why this errors are generated on the latest MSVC compiler. It's up to you merging this patch. If you don't want, I will use it on my local. But as far as you know this patch also enhances better code quality. :)",True,{}
nothings/stb,https://github.com/nothings/stb,984,2020-06-30T07:12:31Z,2020-07-13T11:14:26Z,2020-07-13T22:55:51Z,CLOSED,False,3,3,1,https://github.com/daemyung,stb_image: fix build errors,1,[],https://github.com/nothings/stb/pull/984,https://github.com/daemyung,5,https://github.com/nothings/stb/pull/984#issuecomment-651633220,"Build errors are generated on Microsoft (R) C/C++ Optimizing Compiler Version 19.26.28806 for x64.
Error messages are below:
stb_image.h(1681,10): error C2196: case value '17' already used
stb_image.h(1683,10): error C2196: case value '12' already used
stb_image.h(1684,10): error C2196: case value '9' already used
stb_image.h(1685,10): error C2196: case value '10' already used
stb_image.h(1688,10): error C2196: case value '33' already used
stb_image.h(1738,10): error C2196: case value '17' already used
stb_image.h(1740,10): error C2196: case value '12' already used
stb_image.h(1741,10): error C2196: case value '9' already used
stb_image.h(1742,10): error C2196: case value '10' already used
stb_image.h(1745,10): error C2196: case value '33' already used","This is MSVC compiler information on my machine.
PS C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.26.28801\bin\Hostx64\x64> ./cl.exe
Microsoft (R) C/C++ Optimizing Compiler Version 19.26.28806 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.",True,{}
nothings/stb,https://github.com/nothings/stb,984,2020-06-30T07:12:31Z,2020-07-13T11:14:26Z,2020-07-13T22:55:51Z,CLOSED,False,3,3,1,https://github.com/daemyung,stb_image: fix build errors,1,[],https://github.com/nothings/stb/pull/984,https://github.com/nothings,6,https://github.com/nothings/stb/pull/984#issuecomment-657497331,"Build errors are generated on Microsoft (R) C/C++ Optimizing Compiler Version 19.26.28806 for x64.
Error messages are below:
stb_image.h(1681,10): error C2196: case value '17' already used
stb_image.h(1683,10): error C2196: case value '12' already used
stb_image.h(1684,10): error C2196: case value '9' already used
stb_image.h(1685,10): error C2196: case value '10' already used
stb_image.h(1688,10): error C2196: case value '33' already used
stb_image.h(1738,10): error C2196: case value '17' already used
stb_image.h(1740,10): error C2196: case value '12' already used
stb_image.h(1741,10): error C2196: case value '9' already used
stb_image.h(1742,10): error C2196: case value '10' already used
stb_image.h(1745,10): error C2196: case value '33' already used","Actually, looking at it in context, this is a pretty common convention for me to not parenthesize that kind of macro. There's no way for it to go wrong.",True,{}
nothings/stb,https://github.com/nothings/stb,985,2020-06-30T07:29:25Z,2020-06-30T08:06:23Z,2020-07-18T05:06:55Z,CLOSED,False,267,267,44,https://github.com/aaronfranke,Make file formatting comply with POSIX standards and remove trailing space characters,2,[],https://github.com/nothings/stb/pull/985,https://github.com/aaronfranke,1,https://github.com/nothings/stb/pull/985,"This PR does two things, split up into two commits:


Add newlines to the ends of text files where they are missing (mostly in the tests/ folder). To comply with POSIX standards, and for best compatibility with command-line tools, text files must end in newline characters. Also, GCC will refuse to compile files that don't end in newline characters when you're targeting old C++ versions.


Remove trailing space characters. They do nothing, they are pointless just take up disk space.


I did not commit any changes to dsp files because I wasn't sure what those are, and I don't want to break anything.
If desired, I can make a follow-up PR to provide you with the script I used, and a CI config for automatically running checks.","This PR does two things, split up into two commits:


Add newlines to the ends of text files where they are missing (mostly in the tests/ folder). To comply with POSIX standards, and for best compatibility with command-line tools, text files must end in newline characters. Also, GCC will refuse to compile files that don't end in newline characters when you're targeting old C++ versions.


Remove trailing space characters. They do nothing, they are pointless just take up disk space.


I did not commit any changes to dsp files because I wasn't sure what those are, and I don't want to break anything.
If desired, I can make a follow-up PR to provide you with the script I used, and a CI config for automatically running checks.",True,{}
nothings/stb,https://github.com/nothings/stb,985,2020-06-30T07:29:25Z,2020-06-30T08:06:23Z,2020-07-18T05:06:55Z,CLOSED,False,267,267,44,https://github.com/aaronfranke,Make file formatting comply with POSIX standards and remove trailing space characters,2,[],https://github.com/nothings/stb/pull/985,https://github.com/nothings,2,https://github.com/nothings/stb/pull/985#issuecomment-651627060,"This PR does two things, split up into two commits:


Add newlines to the ends of text files where they are missing (mostly in the tests/ folder). To comply with POSIX standards, and for best compatibility with command-line tools, text files must end in newline characters. Also, GCC will refuse to compile files that don't end in newline characters when you're targeting old C++ versions.


Remove trailing space characters. They do nothing, they are pointless just take up disk space.


I did not commit any changes to dsp files because I wasn't sure what those are, and I don't want to break anything.
If desired, I can make a follow-up PR to provide you with the script I used, and a CI config for automatically running checks.","See #728, I just need to remember to run the tool.",True,{}
nothings/stb,https://github.com/nothings/stb,985,2020-06-30T07:29:25Z,2020-06-30T08:06:23Z,2020-07-18T05:06:55Z,CLOSED,False,267,267,44,https://github.com/aaronfranke,Make file formatting comply with POSIX standards and remove trailing space characters,2,[],https://github.com/nothings/stb/pull/985,https://github.com/aaronfranke,3,https://github.com/nothings/stb/pull/985#issuecomment-660426730,"This PR does two things, split up into two commits:


Add newlines to the ends of text files where they are missing (mostly in the tests/ folder). To comply with POSIX standards, and for best compatibility with command-line tools, text files must end in newline characters. Also, GCC will refuse to compile files that don't end in newline characters when you're targeting old C++ versions.


Remove trailing space characters. They do nothing, they are pointless just take up disk space.


I did not commit any changes to dsp files because I wasn't sure what those are, and I don't want to break anything.
If desired, I can make a follow-up PR to provide you with the script I used, and a CI config for automatically running checks.","@nothings I see that you made a commit recently to remove trailing spaces, but there are still a ton of trailing spaces in this repo. Here is what happens when I run my formatting script on this repo: https://github.com/aaronfranke/stb/commit/dac00094c9a35c2013c4827881992fd639d5f6cc
In particular, the tests/, tools/, and deprecated/ folders have a ton of trailing spaces.",True,{}
nothings/stb,https://github.com/nothings/stb,989,2020-07-07T09:42:52Z,2020-07-13T11:39:45Z,2020-07-13T11:39:45Z,MERGED,True,4,1,1,https://github.com/akien-mga,stb_vorbis: Add missing error checks in comment reading mallocs,1,[],https://github.com/nothings/stb/pull/989,https://github.com/akien-mga,1,https://github.com/nothings/stb/pull/989,"Fixes #988.
(The credit update will conflict with #961, but both @RandomShaper and I are happy to rebase our PRs within a few hours once the other is merged.)","Fixes #988.
(The credit update will conflict with #961, but both @RandomShaper and I are happy to rebase our PRs within a few hours once the other is merged.)",True,{}
nothings/stb,https://github.com/nothings/stb,993,2020-07-12T14:28:22Z,2020-07-13T11:39:44Z,2020-07-13T11:39:44Z,MERGED,True,37,5,1,https://github.com/srdjanstipic,stb_ds: fix shputs() for strdup and arena hash table,1,[],https://github.com/nothings/stb/pull/993,https://github.com/srdjanstipic,1,https://github.com/nothings/stb/pull/993,"This commit fixes the issue of inserting a struct to strdup and arena hastable.
Downside of this change is that it introduces additional instructions (also for default string hashtable)
but inserted code should have negligible overhead because it is easy to predict.
Feel free to reject this change if you think that it does not make sense
or it is not worth additional complexity.","This commit fixes the issue of inserting a struct to strdup and arena hastable.
Downside of this change is that it introduces additional instructions (also for default string hashtable)
but inserted code should have negligible overhead because it is easy to predict.
Feel free to reject this change if you think that it does not make sense
or it is not worth additional complexity.",True,{}
nothings/stb,https://github.com/nothings/stb,993,2020-07-12T14:28:22Z,2020-07-13T11:39:44Z,2020-07-13T11:39:44Z,MERGED,True,37,5,1,https://github.com/srdjanstipic,stb_ds: fix shputs() for strdup and arena hash table,1,[],https://github.com/nothings/stb/pull/993,https://github.com/nothings,2,https://github.com/nothings/stb/pull/993#issuecomment-657234648,"This commit fixes the issue of inserting a struct to strdup and arena hastable.
Downside of this change is that it introduces additional instructions (also for default string hashtable)
but inserted code should have negligible overhead because it is easy to predict.
Feel free to reject this change if you think that it does not make sense
or it is not worth additional complexity.","Yeah, I was thinking about whether this would really be that hacky last night, and given the existing temp, it's not so bad. The only thing I would change is to just always write the key regardless, rather than bothering to test the hash table type.",True,{}
nothings/stb,https://github.com/nothings/stb,993,2020-07-12T14:28:22Z,2020-07-13T11:39:44Z,2020-07-13T11:39:44Z,MERGED,True,37,5,1,https://github.com/srdjanstipic,stb_ds: fix shputs() for strdup and arena hash table,1,[],https://github.com/nothings/stb/pull/993,https://github.com/srdjanstipic,3,https://github.com/nothings/stb/pull/993#issuecomment-657246375,"This commit fixes the issue of inserting a struct to strdup and arena hastable.
Downside of this change is that it introduces additional instructions (also for default string hashtable)
but inserted code should have negligible overhead because it is easy to predict.
Feel free to reject this change if you think that it does not make sense
or it is not worth additional complexity.","My initial solution was always writing the key but I thought that we could minimize number of writes.
I will modify the PR to update the key always.",True,{}
nothings/stb,https://github.com/nothings/stb,993,2020-07-12T14:28:22Z,2020-07-13T11:39:44Z,2020-07-13T11:39:44Z,MERGED,True,37,5,1,https://github.com/srdjanstipic,stb_ds: fix shputs() for strdup and arena hash table,1,[],https://github.com/nothings/stb/pull/993,https://github.com/srdjanstipic,4,https://github.com/nothings/stb/pull/993#issuecomment-657249319,"This commit fixes the issue of inserting a struct to strdup and arena hastable.
Downside of this change is that it introduces additional instructions (also for default string hashtable)
but inserted code should have negligible overhead because it is easy to predict.
Feel free to reject this change if you think that it does not make sense
or it is not worth additional complexity.","The only thing I would change is to just always write the key regardless,
rather than bothering to test the hash table type.

Done",True,{}
nothings/stb,https://github.com/nothings/stb,993,2020-07-12T14:28:22Z,2020-07-13T11:39:44Z,2020-07-13T11:39:44Z,MERGED,True,37,5,1,https://github.com/srdjanstipic,stb_ds: fix shputs() for strdup and arena hash table,1,[],https://github.com/nothings/stb/pull/993,https://github.com/nothings,5,https://github.com/nothings/stb/pull/993#issuecomment-657251850,"This commit fixes the issue of inserting a struct to strdup and arena hastable.
Downside of this change is that it introduces additional instructions (also for default string hashtable)
but inserted code should have negligible overhead because it is easy to predict.
Feel free to reject this change if you think that it does not make sense
or it is not worth additional complexity.","The cost of writing the key is small since we just wrote the structure, so it will still be in cache, and loading the temp key is cheap since we just wrote it into the temp field during the function call. Of course the cost the other way is also small, as the branch will always predict correctly (if it's in the branch predictor's buffer), since a given code path is likely to only be ever used for a single class of hash table. So the decisive factor is that it's slightly less code to just always do it.",True,{}
nothings/stb,https://github.com/nothings/stb,993,2020-07-12T14:28:22Z,2020-07-13T11:39:44Z,2020-07-13T11:39:44Z,MERGED,True,37,5,1,https://github.com/srdjanstipic,stb_ds: fix shputs() for strdup and arena hash table,1,[],https://github.com/nothings/stb/pull/993,https://github.com/srdjanstipic,6,https://github.com/nothings/stb/pull/993#issuecomment-657420293,"This commit fixes the issue of inserting a struct to strdup and arena hastable.
Downside of this change is that it introduces additional instructions (also for default string hashtable)
but inserted code should have negligible overhead because it is easy to predict.
Feel free to reject this change if you think that it does not make sense
or it is not worth additional complexity.","So the decisive factor is that it's slightly less code to just always do it

I agree.
Should I fix some other things in the PR?",True,{}
nothings/stb,https://github.com/nothings/stb,993,2020-07-12T14:28:22Z,2020-07-13T11:39:44Z,2020-07-13T11:39:44Z,MERGED,True,37,5,1,https://github.com/srdjanstipic,stb_ds: fix shputs() for strdup and arena hash table,1,[],https://github.com/nothings/stb/pull/993,https://github.com/nothings,7,https://github.com/nothings/stb/pull/993#issuecomment-657451620,"This commit fixes the issue of inserting a struct to strdup and arena hastable.
Downside of this change is that it introduces additional instructions (also for default string hashtable)
but inserted code should have negligible overhead because it is easy to predict.
Feel free to reject this change if you think that it does not make sense
or it is not worth additional complexity.","no, it's fine. I only use github for releasing, so you won't see the PR merged until the next release.",True,{'THUMBS_UP': ['https://github.com/srdjanstipic']}
nothings/stb,https://github.com/nothings/stb,993,2020-07-12T14:28:22Z,2020-07-13T11:39:44Z,2020-07-13T11:39:44Z,MERGED,True,37,5,1,https://github.com/srdjanstipic,stb_ds: fix shputs() for strdup and arena hash table,1,[],https://github.com/nothings/stb/pull/993,https://github.com/nothings,8,https://github.com/nothings/stb/pull/993#issuecomment-657502499,"This commit fixes the issue of inserting a struct to strdup and arena hastable.
Downside of this change is that it introduces additional instructions (also for default string hashtable)
but inserted code should have negligible overhead because it is easy to predict.
Feel free to reject this change if you think that it does not make sense
or it is not worth additional complexity.","I moved the temp_key storage into the hash_table structure because the existing struct is used by arrays as well as hash tables, and I didn't want arrays to have to pay the storage overhead. This makes loading the temp key require one more indirection, but it should still all be in cache so it still doesn't matter.",True,{'THUMBS_UP': ['https://github.com/srdjanstipic']}
nothings/stb,https://github.com/nothings/stb,998,2020-07-18T06:17:25Z,2021-07-03T07:57:34Z,2021-07-03T07:57:34Z,CLOSED,False,11,2,1,https://github.com/jwatte,stb_image: Fix gcc 7.5.0 compiler warnings,1,['1 stb_image'],https://github.com/nothings/stb/pull/998,https://github.com/jwatte,1,https://github.com/nothings/stb/pull/998,"sizeof() returns unsigned, so cast it to compare to signed.
STB_REALLOC_SIZED() by default swallows the ""oldsz"" argument,
which generates a ""set but not used"" warning, so define a
static function (that gets inlined) to swallow this warning.
Provided by Jon Watte (github.com/jwatte) and released under
the STB Image license or the ""public domain"" license,
whichever you prefer.","sizeof() returns unsigned, so cast it to compare to signed.
STB_REALLOC_SIZED() by default swallows the ""oldsz"" argument,
which generates a ""set but not used"" warning, so define a
static function (that gets inlined) to swallow this warning.
Provided by Jon Watte (github.com/jwatte) and released under
the STB Image license or the ""public domain"" license,
whichever you prefer.",True,{}
nothings/stb,https://github.com/nothings/stb,998,2020-07-18T06:17:25Z,2021-07-03T07:57:34Z,2021-07-03T07:57:34Z,CLOSED,False,11,2,1,https://github.com/jwatte,stb_image: Fix gcc 7.5.0 compiler warnings,1,['1 stb_image'],https://github.com/nothings/stb/pull/998,https://github.com/rygorous,2,https://github.com/nothings/stb/pull/998#issuecomment-873365647,"sizeof() returns unsigned, so cast it to compare to signed.
STB_REALLOC_SIZED() by default swallows the ""oldsz"" argument,
which generates a ""set but not used"" warning, so define a
static function (that gets inlined) to swallow this warning.
Provided by Jon Watte (github.com/jwatte) and released under
the STB Image license or the ""public domain"" license,
whichever you prefer.","These are fixed (in a different way) in the current dev branch, closing this PR.",True,{}
nothings/stb,https://github.com/nothings/stb,999,2020-07-20T02:43:05Z,2020-07-20T02:44:27Z,2020-07-20T02:44:27Z,CLOSED,False,2,2,1,None,stb_image_write.h: Fixed compiler warnings,1,[],https://github.com/nothings/stb/pull/999,None,1,https://github.com/nothings/stb/pull/999,"Delete this list before clicking CREATE PULL REQUEST
Make sure you're using a special branch just for this pull request. (Sometimes people unknowingly use a default branch, then later update that branch, which updates the pull request with the other changes if it hasn't been merged yet.)
Do NOT update the version number in the file. (This just causes conflicts.)
Do add your name to the list of contributors. (Don't worry about the formatting.) I'll try to remember to add it if you don't, but I sometimes forget as it's an extra step.

If you get something above wrong, don't fret it, it's not the end of the world.","Delete this list before clicking CREATE PULL REQUEST
Make sure you're using a special branch just for this pull request. (Sometimes people unknowingly use a default branch, then later update that branch, which updates the pull request with the other changes if it hasn't been merged yet.)
Do NOT update the version number in the file. (This just causes conflicts.)
Do add your name to the list of contributors. (Don't worry about the formatting.) I'll try to remember to add it if you don't, but I sometimes forget as it's an extra step.

If you get something above wrong, don't fret it, it's not the end of the world.",True,{}
nothings/stb,https://github.com/nothings/stb,999,2020-07-20T02:43:05Z,2020-07-20T02:44:27Z,2020-07-20T02:44:27Z,CLOSED,False,2,2,1,None,stb_image_write.h: Fixed compiler warnings,1,[],https://github.com/nothings/stb/pull/999,None,2,https://github.com/nothings/stb/pull/999#issuecomment-660769868,"Delete this list before clicking CREATE PULL REQUEST
Make sure you're using a special branch just for this pull request. (Sometimes people unknowingly use a default branch, then later update that branch, which updates the pull request with the other changes if it hasn't been merged yet.)
Do NOT update the version number in the file. (This just causes conflicts.)
Do add your name to the list of contributors. (Don't worry about the formatting.) I'll try to remember to add it if you don't, but I sometimes forget as it's an extra step.

If you get something above wrong, don't fret it, it's not the end of the world.",Whoops! Guess I should've paid more attention!,True,{}
nothings/stb,https://github.com/nothings/stb,1000,2020-07-20T02:48:49Z,2021-07-04T07:13:56Z,2021-07-04T07:13:56Z,CLOSED,False,3,2,1,None,stb_image_write.h: Fixed compiler warnings,2,['1 stb_image_write'],https://github.com/nothings/stb/pull/1000,None,1,https://github.com/nothings/stb/pull/1000,Replicate with gcc -Wall -Wextra -fsyntax-only stb_image_write.h,Replicate with gcc -Wall -Wextra -fsyntax-only stb_image_write.h,True,{}
nothings/stb,https://github.com/nothings/stb,1000,2020-07-20T02:48:49Z,2021-07-04T07:13:56Z,2021-07-04T07:13:56Z,CLOSED,False,3,2,1,None,stb_image_write.h: Fixed compiler warnings,2,['1 stb_image_write'],https://github.com/nothings/stb/pull/1000,https://github.com/mgerhardy,2,https://github.com/nothings/stb/pull/1000#issuecomment-676710253,Replicate with gcc -Wall -Wextra -fsyntax-only stb_image_write.h,#1020,True,{}
nothings/stb,https://github.com/nothings/stb,1000,2020-07-20T02:48:49Z,2021-07-04T07:13:56Z,2021-07-04T07:13:56Z,CLOSED,False,3,2,1,None,stb_image_write.h: Fixed compiler warnings,2,['1 stb_image_write'],https://github.com/nothings/stb/pull/1000,https://github.com/rygorous,3,https://github.com/nothings/stb/pull/1000#issuecomment-873536118,Replicate with gcc -Wall -Wextra -fsyntax-only stb_image_write.h,"This is already fixed in the dev branch, closing this PR.",True,{}
nothings/stb,https://github.com/nothings/stb,1001,2020-07-21T14:14:30Z,2020-07-21T14:24:45Z,2020-07-21T14:24:45Z,CLOSED,False,165,0,1,https://github.com/sandhyabhan,Fix Missing Word,1,[],https://github.com/nothings/stb/pull/1001,https://github.com/sandhyabhan,1,https://github.com/nothings/stb/pull/1001,"Delete this list before clicking CREATE PULL REQUEST
Make sure you're using a special branch just for this pull request. (Sometimes people unknowingly use a default branch, then later update that branch, which updates the pull request with the other changes if it hasn't been merged yet.)
Do NOT update the version number in the file. (This just causes conflicts.)
Do add your name to the list of contributors. (Don't worry about the formatting.) I'll try to remember to add it if you don't, but I sometimes forget as it's an extra step.

If you get something above wrong, don't fret it, it's not the end of the world.","Delete this list before clicking CREATE PULL REQUEST
Make sure you're using a special branch just for this pull request. (Sometimes people unknowingly use a default branch, then later update that branch, which updates the pull request with the other changes if it hasn't been merged yet.)
Do NOT update the version number in the file. (This just causes conflicts.)
Do add your name to the list of contributors. (Don't worry about the formatting.) I'll try to remember to add it if you don't, but I sometimes forget as it's an extra step.

If you get something above wrong, don't fret it, it's not the end of the world.",True,{}
nothings/stb,https://github.com/nothings/stb,1002,2020-07-23T09:41:55Z,2021-07-03T07:51:33Z,2021-07-03T07:51:33Z,CLOSED,False,5,5,1,https://github.com/toxieainc,fix potential MultiByteToWideChar buffer overflow in stbi__fopen,1,"['1 stb_image', '2 good-no changes needed']",https://github.com/nothings/stb/pull/1002,https://github.com/toxieainc,1,https://github.com/nothings/stb/pull/1002,nt,nt,True,{}
nothings/stb,https://github.com/nothings/stb,1002,2020-07-23T09:41:55Z,2021-07-03T07:51:33Z,2021-07-03T07:51:33Z,CLOSED,False,5,5,1,https://github.com/toxieainc,fix potential MultiByteToWideChar buffer overflow in stbi__fopen,1,"['1 stb_image', '2 good-no changes needed']",https://github.com/nothings/stb/pull/1002,https://github.com/rygorous,2,https://github.com/nothings/stb/pull/1002#issuecomment-873364930,nt,"A different fix for this is now merged into the dev branch, closing this PR.",True,{}
nothings/stb,https://github.com/nothings/stb,1003,2020-07-24T15:09:49Z,2021-04-15T21:20:17Z,2021-06-07T07:23:11Z,CLOSED,False,2,2,1,https://github.com/Vzaa,stb_ds: hmgetp_null stbds_temp usage fix,1,[],https://github.com/nothings/stb/pull/1003,https://github.com/Vzaa,1,https://github.com/nothings/stb/pull/1003,"I was testing out stb_ds.h's hashmap and I believe I may have found an error in hmgetp_null.
I was getting invalid pointers when using hmgetp_null while hmgetp was working fine. Comparing the macros I've noticed hmgetp uses stbds_temp((t)-1) while  hmgetp_null uses stbds_temp(t)-1. Changing the macro fixed the issue for me.
The assertions in the code below were failing before for me on gcc 7.5.0 and clang 10.0.1
#include <stdio.h>
#include <assert.h>

#define STB_DS_IMPLEMENTATION
#include ""stb_ds.h""

typedef struct {
	int key;
	int value;
} foo_t;

int main(int argc, char const *argv[])
{
	foo_t *hash = NULL;
	foo_t *a;
	foo_t *b;

	hmput(hash, 1, 42);
	hmput(hash, 2, 43);

	a = hmgetp(hash, 1);
	b = hmgetp_null(hash, 1);
	assert(a == b);

	a = hmgetp(hash, 2);
	b = hmgetp_null(hash, 2);
	assert(a == b);

	hmfree(hash);
}","I was testing out stb_ds.h's hashmap and I believe I may have found an error in hmgetp_null.
I was getting invalid pointers when using hmgetp_null while hmgetp was working fine. Comparing the macros I've noticed hmgetp uses stbds_temp((t)-1) while  hmgetp_null uses stbds_temp(t)-1. Changing the macro fixed the issue for me.
The assertions in the code below were failing before for me on gcc 7.5.0 and clang 10.0.1
#include <stdio.h>
#include <assert.h>

#define STB_DS_IMPLEMENTATION
#include ""stb_ds.h""

typedef struct {
	int key;
	int value;
} foo_t;

int main(int argc, char const *argv[])
{
	foo_t *hash = NULL;
	foo_t *a;
	foo_t *b;

	hmput(hash, 1, 42);
	hmput(hash, 2, 43);

	a = hmgetp(hash, 1);
	b = hmgetp_null(hash, 1);
	assert(a == b);

	a = hmgetp(hash, 2);
	b = hmgetp_null(hash, 2);
	assert(a == b);

	hmfree(hash);
}",True,{'THUMBS_UP': ['https://github.com/pixelherodev']}
nothings/stb,https://github.com/nothings/stb,1003,2020-07-24T15:09:49Z,2021-04-15T21:20:17Z,2021-06-07T07:23:11Z,CLOSED,False,2,2,1,https://github.com/Vzaa,stb_ds: hmgetp_null stbds_temp usage fix,1,[],https://github.com/nothings/stb/pull/1003,https://github.com/pixelherodev,2,https://github.com/nothings/stb/pull/1003#issuecomment-675736090,"I was testing out stb_ds.h's hashmap and I believe I may have found an error in hmgetp_null.
I was getting invalid pointers when using hmgetp_null while hmgetp was working fine. Comparing the macros I've noticed hmgetp uses stbds_temp((t)-1) while  hmgetp_null uses stbds_temp(t)-1. Changing the macro fixed the issue for me.
The assertions in the code below were failing before for me on gcc 7.5.0 and clang 10.0.1
#include <stdio.h>
#include <assert.h>

#define STB_DS_IMPLEMENTATION
#include ""stb_ds.h""

typedef struct {
	int key;
	int value;
} foo_t;

int main(int argc, char const *argv[])
{
	foo_t *hash = NULL;
	foo_t *a;
	foo_t *b;

	hmput(hash, 1, 42);
	hmput(hash, 2, 43);

	a = hmgetp(hash, 1);
	b = hmgetp_null(hash, 1);
	assert(a == b);

	a = hmgetp(hash, 2);
	b = hmgetp_null(hash, 2);
	assert(a == b);

	hmfree(hash);
}",I can confirm this. The issue is present in both hmgetp and shgetp. I patched them both manually and was going to submit them here when I saw this PR.,True,{}
nothings/stb,https://github.com/nothings/stb,1003,2020-07-24T15:09:49Z,2021-04-15T21:20:17Z,2021-06-07T07:23:11Z,CLOSED,False,2,2,1,https://github.com/Vzaa,stb_ds: hmgetp_null stbds_temp usage fix,1,[],https://github.com/nothings/stb/pull/1003,https://github.com/Vzaa,3,https://github.com/nothings/stb/pull/1003#issuecomment-675903972,"I was testing out stb_ds.h's hashmap and I believe I may have found an error in hmgetp_null.
I was getting invalid pointers when using hmgetp_null while hmgetp was working fine. Comparing the macros I've noticed hmgetp uses stbds_temp((t)-1) while  hmgetp_null uses stbds_temp(t)-1. Changing the macro fixed the issue for me.
The assertions in the code below were failing before for me on gcc 7.5.0 and clang 10.0.1
#include <stdio.h>
#include <assert.h>

#define STB_DS_IMPLEMENTATION
#include ""stb_ds.h""

typedef struct {
	int key;
	int value;
} foo_t;

int main(int argc, char const *argv[])
{
	foo_t *hash = NULL;
	foo_t *a;
	foo_t *b;

	hmput(hash, 1, 42);
	hmput(hash, 2, 43);

	a = hmgetp(hash, 1);
	b = hmgetp_null(hash, 1);
	assert(a == b);

	a = hmgetp(hash, 2);
	b = hmgetp_null(hash, 2);
	assert(a == b);

	hmfree(hash);
}","I can confirm this. The issue is present in both hmgetp and shgetp. I patched them both manually and was going to submit them here when I saw this PR.

You're right. I've updated the PR to change both.",True,{}
nothings/stb,https://github.com/nothings/stb,1003,2020-07-24T15:09:49Z,2021-04-15T21:20:17Z,2021-06-07T07:23:11Z,CLOSED,False,2,2,1,https://github.com/Vzaa,stb_ds: hmgetp_null stbds_temp usage fix,1,[],https://github.com/nothings/stb/pull/1003,https://github.com/nothings,4,https://github.com/nothings/stb/pull/1003#issuecomment-820738770,"I was testing out stb_ds.h's hashmap and I believe I may have found an error in hmgetp_null.
I was getting invalid pointers when using hmgetp_null while hmgetp was working fine. Comparing the macros I've noticed hmgetp uses stbds_temp((t)-1) while  hmgetp_null uses stbds_temp(t)-1. Changing the macro fixed the issue for me.
The assertions in the code below were failing before for me on gcc 7.5.0 and clang 10.0.1
#include <stdio.h>
#include <assert.h>

#define STB_DS_IMPLEMENTATION
#include ""stb_ds.h""

typedef struct {
	int key;
	int value;
} foo_t;

int main(int argc, char const *argv[])
{
	foo_t *hash = NULL;
	foo_t *a;
	foo_t *b;

	hmput(hash, 1, 42);
	hmput(hash, 2, 43);

	a = hmgetp(hash, 1);
	b = hmgetp_null(hash, 1);
	assert(a == b);

	a = hmgetp(hash, 2);
	b = hmgetp_null(hash, 2);
	assert(a == b);

	hmfree(hash);
}",fixed in next release,True,{}
nothings/stb,https://github.com/nothings/stb,1003,2020-07-24T15:09:49Z,2021-04-15T21:20:17Z,2021-06-07T07:23:11Z,CLOSED,False,2,2,1,https://github.com/Vzaa,stb_ds: hmgetp_null stbds_temp usage fix,1,[],https://github.com/nothings/stb/pull/1003,https://github.com/pixelherodev,5,https://github.com/nothings/stb/pull/1003#issuecomment-821146932,"I was testing out stb_ds.h's hashmap and I believe I may have found an error in hmgetp_null.
I was getting invalid pointers when using hmgetp_null while hmgetp was working fine. Comparing the macros I've noticed hmgetp uses stbds_temp((t)-1) while  hmgetp_null uses stbds_temp(t)-1. Changing the macro fixed the issue for me.
The assertions in the code below were failing before for me on gcc 7.5.0 and clang 10.0.1
#include <stdio.h>
#include <assert.h>

#define STB_DS_IMPLEMENTATION
#include ""stb_ds.h""

typedef struct {
	int key;
	int value;
} foo_t;

int main(int argc, char const *argv[])
{
	foo_t *hash = NULL;
	foo_t *a;
	foo_t *b;

	hmput(hash, 1, 42);
	hmput(hash, 2, 43);

	a = hmgetp(hash, 1);
	b = hmgetp_null(hash, 1);
	assert(a == b);

	a = hmgetp(hash, 2);
	b = hmgetp_null(hash, 2);
	assert(a == b);

	hmfree(hash);
}",Thanks!,True,{}
nothings/stb,https://github.com/nothings/stb,1003,2020-07-24T15:09:49Z,2021-04-15T21:20:17Z,2021-06-07T07:23:11Z,CLOSED,False,2,2,1,https://github.com/Vzaa,stb_ds: hmgetp_null stbds_temp usage fix,1,[],https://github.com/nothings/stb/pull/1003,https://github.com/makuto,6,https://github.com/nothings/stb/pull/1003#issuecomment-851799901,"I was testing out stb_ds.h's hashmap and I believe I may have found an error in hmgetp_null.
I was getting invalid pointers when using hmgetp_null while hmgetp was working fine. Comparing the macros I've noticed hmgetp uses stbds_temp((t)-1) while  hmgetp_null uses stbds_temp(t)-1. Changing the macro fixed the issue for me.
The assertions in the code below were failing before for me on gcc 7.5.0 and clang 10.0.1
#include <stdio.h>
#include <assert.h>

#define STB_DS_IMPLEMENTATION
#include ""stb_ds.h""

typedef struct {
	int key;
	int value;
} foo_t;

int main(int argc, char const *argv[])
{
	foo_t *hash = NULL;
	foo_t *a;
	foo_t *b;

	hmput(hash, 1, 42);
	hmput(hash, 2, 43);

	a = hmgetp(hash, 1);
	b = hmgetp_null(hash, 1);
	assert(a == b);

	a = hmgetp(hash, 2);
	b = hmgetp_null(hash, 2);
	assert(a == b);

	hmfree(hash);
}","When is the next release coming? I just ran into this issue as well, with c9064e3.",True,{}
nothings/stb,https://github.com/nothings/stb,1003,2020-07-24T15:09:49Z,2021-04-15T21:20:17Z,2021-06-07T07:23:11Z,CLOSED,False,2,2,1,https://github.com/Vzaa,stb_ds: hmgetp_null stbds_temp usage fix,1,[],https://github.com/nothings/stb/pull/1003,https://github.com/makuto,7,https://github.com/nothings/stb/pull/1003#issuecomment-855158574,"I was testing out stb_ds.h's hashmap and I believe I may have found an error in hmgetp_null.
I was getting invalid pointers when using hmgetp_null while hmgetp was working fine. Comparing the macros I've noticed hmgetp uses stbds_temp((t)-1) while  hmgetp_null uses stbds_temp(t)-1. Changing the macro fixed the issue for me.
The assertions in the code below were failing before for me on gcc 7.5.0 and clang 10.0.1
#include <stdio.h>
#include <assert.h>

#define STB_DS_IMPLEMENTATION
#include ""stb_ds.h""

typedef struct {
	int key;
	int value;
} foo_t;

int main(int argc, char const *argv[])
{
	foo_t *hash = NULL;
	foo_t *a;
	foo_t *b;

	hmput(hash, 1, 42);
	hmput(hash, 2, 43);

	a = hmgetp(hash, 1);
	b = hmgetp_null(hash, 1);
	assert(a == b);

	a = hmgetp(hash, 2);
	b = hmgetp_null(hash, 2);
	assert(a == b);

	hmfree(hash);
}","I saw this is now fixed with 781609b, so should be closed.",True,{'THUMBS_UP': ['https://github.com/Vzaa']}
nothings/stb,https://github.com/nothings/stb,1003,2020-07-24T15:09:49Z,2021-04-15T21:20:17Z,2021-06-07T07:23:11Z,CLOSED,False,2,2,1,https://github.com/Vzaa,stb_ds: hmgetp_null stbds_temp usage fix,1,[],https://github.com/nothings/stb/pull/1003,https://github.com/nothings,8,https://github.com/nothings/stb/pull/1003#issuecomment-855163236,"I was testing out stb_ds.h's hashmap and I believe I may have found an error in hmgetp_null.
I was getting invalid pointers when using hmgetp_null while hmgetp was working fine. Comparing the macros I've noticed hmgetp uses stbds_temp((t)-1) while  hmgetp_null uses stbds_temp(t)-1. Changing the macro fixed the issue for me.
The assertions in the code below were failing before for me on gcc 7.5.0 and clang 10.0.1
#include <stdio.h>
#include <assert.h>

#define STB_DS_IMPLEMENTATION
#include ""stb_ds.h""

typedef struct {
	int key;
	int value;
} foo_t;

int main(int argc, char const *argv[])
{
	foo_t *hash = NULL;
	foo_t *a;
	foo_t *b;

	hmput(hash, 1, 42);
	hmput(hash, 2, 43);

	a = hmgetp(hash, 1);
	b = hmgetp_null(hash, 1);
	assert(a == b);

	a = hmgetp(hash, 2);
	b = hmgetp_null(hash, 2);
	assert(a == b);

	hmfree(hash);
}",It's already closed.,True,{}
nothings/stb,https://github.com/nothings/stb,1003,2020-07-24T15:09:49Z,2021-04-15T21:20:17Z,2021-06-07T07:23:11Z,CLOSED,False,2,2,1,https://github.com/Vzaa,stb_ds: hmgetp_null stbds_temp usage fix,1,[],https://github.com/nothings/stb/pull/1003,https://github.com/Vzaa,9,https://github.com/nothings/stb/pull/1003#issuecomment-855666667,"I was testing out stb_ds.h's hashmap and I believe I may have found an error in hmgetp_null.
I was getting invalid pointers when using hmgetp_null while hmgetp was working fine. Comparing the macros I've noticed hmgetp uses stbds_temp((t)-1) while  hmgetp_null uses stbds_temp(t)-1. Changing the macro fixed the issue for me.
The assertions in the code below were failing before for me on gcc 7.5.0 and clang 10.0.1
#include <stdio.h>
#include <assert.h>

#define STB_DS_IMPLEMENTATION
#include ""stb_ds.h""

typedef struct {
	int key;
	int value;
} foo_t;

int main(int argc, char const *argv[])
{
	foo_t *hash = NULL;
	foo_t *a;
	foo_t *b;

	hmput(hash, 1, 42);
	hmput(hash, 2, 43);

	a = hmgetp(hash, 1);
	b = hmgetp_null(hash, 1);
	assert(a == b);

	a = hmgetp(hash, 2);
	b = hmgetp_null(hash, 2);
	assert(a == b);

	hmfree(hash);
}",Thank you,True,{}
nothings/stb,https://github.com/nothings/stb,1005,2020-07-27T22:46:13Z,2021-07-02T13:58:42Z,2021-07-02T14:29:45Z,CLOSED,False,8,2,1,https://github.com/bqqbarbhg,stb_vorbis: Allocate memory for empty buffers in setup_malloc(),3,"['2 bug', '1 stb_vorbis']",https://github.com/nothings/stb/pull/1005,https://github.com/bqqbarbhg,1,https://github.com/nothings/stb/pull/1005,"I had a valid file failing with VORBIS_outofmem as the comment list was empty and I wasn't using an allocation buffer causing setup_malloc() to return NULL that gets interpreted as an allocation failure. You could return a sentinel value here and check against it in setup_free() as an optimization, but I'm not sure if it's worth the complexity as you'd want to use an allocation buffer if you care about performance anyway.
In my case f->comment_list_length was zero here, which I assume is valid. Applying the fix in the PR made stb_vorbis able to decode the file without any further issues.
   f->comment_list = (char**)setup_malloc(f, sizeof(char*) * (f->comment_list_length));
   if (f->comment_list == NULL)                     return error(f, VORBIS_outofmem);","I had a valid file failing with VORBIS_outofmem as the comment list was empty and I wasn't using an allocation buffer causing setup_malloc() to return NULL that gets interpreted as an allocation failure. You could return a sentinel value here and check against it in setup_free() as an optimization, but I'm not sure if it's worth the complexity as you'd want to use an allocation buffer if you care about performance anyway.
In my case f->comment_list_length was zero here, which I assume is valid. Applying the fix in the PR made stb_vorbis able to decode the file without any further issues.
   f->comment_list = (char**)setup_malloc(f, sizeof(char*) * (f->comment_list_length));
   if (f->comment_list == NULL)                     return error(f, VORBIS_outofmem);",True,{'THUMBS_UP': ['https://github.com/Ealrann']}
nothings/stb,https://github.com/nothings/stb,1005,2020-07-27T22:46:13Z,2021-07-02T13:58:42Z,2021-07-02T14:29:45Z,CLOSED,False,8,2,1,https://github.com/bqqbarbhg,stb_vorbis: Allocate memory for empty buffers in setup_malloc(),3,"['2 bug', '1 stb_vorbis']",https://github.com/nothings/stb/pull/1005,https://github.com/nothings,2,https://github.com/nothings/stb/pull/1005#issuecomment-664682940,"I had a valid file failing with VORBIS_outofmem as the comment list was empty and I wasn't using an allocation buffer causing setup_malloc() to return NULL that gets interpreted as an allocation failure. You could return a sentinel value here and check against it in setup_free() as an optimization, but I'm not sure if it's worth the complexity as you'd want to use an allocation buffer if you care about performance anyway.
In my case f->comment_list_length was zero here, which I assume is valid. Applying the fix in the PR made stb_vorbis able to decode the file without any further issues.
   f->comment_list = (char**)setup_malloc(f, sizeof(char*) * (f->comment_list_length));
   if (f->comment_list == NULL)                     return error(f, VORBIS_outofmem);",Thank you for the clear explanation!,True,{}
nothings/stb,https://github.com/nothings/stb,1005,2020-07-27T22:46:13Z,2021-07-02T13:58:42Z,2021-07-02T14:29:45Z,CLOSED,False,8,2,1,https://github.com/bqqbarbhg,stb_vorbis: Allocate memory for empty buffers in setup_malloc(),3,"['2 bug', '1 stb_vorbis']",https://github.com/nothings/stb/pull/1005,https://github.com/astralinux,3,https://github.com/nothings/stb/pull/1005#issuecomment-667652115,"I had a valid file failing with VORBIS_outofmem as the comment list was empty and I wasn't using an allocation buffer causing setup_malloc() to return NULL that gets interpreted as an allocation failure. You could return a sentinel value here and check against it in setup_free() as an optimization, but I'm not sure if it's worth the complexity as you'd want to use an allocation buffer if you care about performance anyway.
In my case f->comment_list_length was zero here, which I assume is valid. Applying the fix in the PR made stb_vorbis able to decode the file without any further issues.
   f->comment_list = (char**)setup_malloc(f, sizeof(char*) * (f->comment_list_length));
   if (f->comment_list == NULL)                     return error(f, VORBIS_outofmem);","Proposed patch replaces ""return sz ? malloc(sz) : NULL;"" with ""return malloc(sz);"". It is implementation dependent. If sz is 0 then malloc(0) may return 0 or some value suitable for free. If it returns 0 then there will be the same trouble as before patch.",True,{}
nothings/stb,https://github.com/nothings/stb,1005,2020-07-27T22:46:13Z,2021-07-02T13:58:42Z,2021-07-02T14:29:45Z,CLOSED,False,8,2,1,https://github.com/bqqbarbhg,stb_vorbis: Allocate memory for empty buffers in setup_malloc(),3,"['2 bug', '1 stb_vorbis']",https://github.com/nothings/stb/pull/1005,https://github.com/bqqbarbhg,4,https://github.com/nothings/stb/pull/1005#issuecomment-667670646,"I had a valid file failing with VORBIS_outofmem as the comment list was empty and I wasn't using an allocation buffer causing setup_malloc() to return NULL that gets interpreted as an allocation failure. You could return a sentinel value here and check against it in setup_free() as an optimization, but I'm not sure if it's worth the complexity as you'd want to use an allocation buffer if you care about performance anyway.
In my case f->comment_list_length was zero here, which I assume is valid. Applying the fix in the PR made stb_vorbis able to decode the file without any further issues.
   f->comment_list = (char**)setup_malloc(f, sizeof(char*) * (f->comment_list_length));
   if (f->comment_list == NULL)                     return error(f, VORBIS_outofmem);","@astralinux interesting, I thought malloc(0) was specified to return a non-zero pointer since that's the only thing I've observed. I fixed this PR to return a sentinel buffer that is checked against in setup_free().",True,{}
nothings/stb,https://github.com/nothings/stb,1005,2020-07-27T22:46:13Z,2021-07-02T13:58:42Z,2021-07-02T14:29:45Z,CLOSED,False,8,2,1,https://github.com/bqqbarbhg,stb_vorbis: Allocate memory for empty buffers in setup_malloc(),3,"['2 bug', '1 stb_vorbis']",https://github.com/nothings/stb/pull/1005,https://github.com/Flix01,5,https://github.com/nothings/stb/pull/1005#issuecomment-674200292,"I had a valid file failing with VORBIS_outofmem as the comment list was empty and I wasn't using an allocation buffer causing setup_malloc() to return NULL that gets interpreted as an allocation failure. You could return a sentinel value here and check against it in setup_free() as an optimization, but I'm not sure if it's worth the complexity as you'd want to use an allocation buffer if you care about performance anyway.
In my case f->comment_list_length was zero here, which I assume is valid. Applying the fix in the PR made stb_vorbis able to decode the file without any further issues.
   f->comment_list = (char**)setup_malloc(f, sizeof(char*) * (f->comment_list_length));
   if (f->comment_list == NULL)                     return error(f, VORBIS_outofmem);","@bqqbarbhg: that fixed some code I'm writing to decode internet radio streams (for some radios stb_vorbis_open_pushdata(...) returned the error VORBIS_outofmem, and then Valgrind complained about the line return sz ? malloc(sz) : NULL; AFAIR).
The only issue is that my version of gcc complains that setup_malloc_null_buffer is uninitialized, so I'm using:
static const char setup_malloc_null_buffer[1] = {0};
[Edit] well, it's not simply ""my version of gcc""; it's just that I'm compiling it as c++ (because I'm including the implementations of some header-only libraries together in a single c++ file). In fact:
gcc -c stb_vorbis.c -lm
works, but instead
g++ -c stb_vorbis.c -lm
stb_vorbis.c:937:19: error: uninitialized const ‘setup_malloc_null_buffer’ [-fpermissive]
  937 | static const char setup_malloc_null_buffer[1];
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~
I think it's better to fix it in any case.",True,{}
nothings/stb,https://github.com/nothings/stb,1005,2020-07-27T22:46:13Z,2021-07-02T13:58:42Z,2021-07-02T14:29:45Z,CLOSED,False,8,2,1,https://github.com/bqqbarbhg,stb_vorbis: Allocate memory for empty buffers in setup_malloc(),3,"['2 bug', '1 stb_vorbis']",https://github.com/nothings/stb/pull/1005,https://github.com/bqqbarbhg,6,https://github.com/nothings/stb/pull/1005#issuecomment-674389859,"I had a valid file failing with VORBIS_outofmem as the comment list was empty and I wasn't using an allocation buffer causing setup_malloc() to return NULL that gets interpreted as an allocation failure. You could return a sentinel value here and check against it in setup_free() as an optimization, but I'm not sure if it's worth the complexity as you'd want to use an allocation buffer if you care about performance anyway.
In my case f->comment_list_length was zero here, which I assume is valid. Applying the fix in the PR made stb_vorbis able to decode the file without any further issues.
   f->comment_list = (char**)setup_malloc(f, sizeof(char*) * (f->comment_list_length));
   if (f->comment_list == NULL)                     return error(f, VORBIS_outofmem);","@Flix01 good point, I think MSVC is grumpy about const-data without an initializer too! Committed a fix to this PR.",True,{}
nothings/stb,https://github.com/nothings/stb,1005,2020-07-27T22:46:13Z,2021-07-02T13:58:42Z,2021-07-02T14:29:45Z,CLOSED,False,8,2,1,https://github.com/bqqbarbhg,stb_vorbis: Allocate memory for empty buffers in setup_malloc(),3,"['2 bug', '1 stb_vorbis']",https://github.com/nothings/stb/pull/1005,https://github.com/bplu4t2f,7,https://github.com/nothings/stb/pull/1005#issuecomment-678475412,"I had a valid file failing with VORBIS_outofmem as the comment list was empty and I wasn't using an allocation buffer causing setup_malloc() to return NULL that gets interpreted as an allocation failure. You could return a sentinel value here and check against it in setup_free() as an optimization, but I'm not sure if it's worth the complexity as you'd want to use an allocation buffer if you care about performance anyway.
In my case f->comment_list_length was zero here, which I assume is valid. Applying the fix in the PR made stb_vorbis able to decode the file without any further issues.
   f->comment_list = (char**)setup_malloc(f, sizeof(char*) * (f->comment_list_length));
   if (f->comment_list == NULL)                     return error(f, VORBIS_outofmem);","Just ran into this issue and would like to confirm that ogg files without ""comments"" do indeed exist and are valid.
As far as I can tell, having the comment_list member be null causes no internal conflicts in stb_vorbis. However, it could cause a problem in user code, because then user code could get a null list when calling stb_vorbis_get_comment.
Since I don't particularly care, my own ""fix"" is simply
   f->comment_list_length = get32_packet(f);
   if (f->comment_list_length != 0) {
      f->comment_list = (char**)setup_malloc(f, sizeof(char*) * (f->comment_list_length));
      if (f->comment_list == NULL)                  return error(f, VORBIS_outofmem);
   } else {
      f->comment_list = NULL;
   }",True,{}
nothings/stb,https://github.com/nothings/stb,1005,2020-07-27T22:46:13Z,2021-07-02T13:58:42Z,2021-07-02T14:29:45Z,CLOSED,False,8,2,1,https://github.com/bqqbarbhg,stb_vorbis: Allocate memory for empty buffers in setup_malloc(),3,"['2 bug', '1 stb_vorbis']",https://github.com/nothings/stb/pull/1005,https://github.com/flibitijibibo,8,https://github.com/nothings/stb/pull/1005#issuecomment-686810355,"I had a valid file failing with VORBIS_outofmem as the comment list was empty and I wasn't using an allocation buffer causing setup_malloc() to return NULL that gets interpreted as an allocation failure. You could return a sentinel value here and check against it in setup_free() as an optimization, but I'm not sure if it's worth the complexity as you'd want to use an allocation buffer if you care about performance anyway.
In my case f->comment_list_length was zero here, which I assume is valid. Applying the fix in the PR made stb_vorbis able to decode the file without any further issues.
   f->comment_list = (char**)setup_malloc(f, sizeof(char*) * (f->comment_list_length));
   if (f->comment_list == NULL)                     return error(f, VORBIS_outofmem);","We ended up pushing a similar fix to FAudio's copy of stb_vorbis:
FNA-XNA/FAudio@345586a",True,{}
nothings/stb,https://github.com/nothings/stb,1005,2020-07-27T22:46:13Z,2021-07-02T13:58:42Z,2021-07-02T14:29:45Z,CLOSED,False,8,2,1,https://github.com/bqqbarbhg,stb_vorbis: Allocate memory for empty buffers in setup_malloc(),3,"['2 bug', '1 stb_vorbis']",https://github.com/nothings/stb/pull/1005,https://github.com/julianxhokaxhiu,9,https://github.com/nothings/stb/pull/1005#issuecomment-695831879,"I had a valid file failing with VORBIS_outofmem as the comment list was empty and I wasn't using an allocation buffer causing setup_malloc() to return NULL that gets interpreted as an allocation failure. You could return a sentinel value here and check against it in setup_free() as an optimization, but I'm not sure if it's worth the complexity as you'd want to use an allocation buffer if you care about performance anyway.
In my case f->comment_list_length was zero here, which I assume is valid. Applying the fix in the PR made stb_vorbis able to decode the file without any further issues.
   f->comment_list = (char**)setup_malloc(f, sizeof(char*) * (f->comment_list_length));
   if (f->comment_list == NULL)                     return error(f, VORBIS_outofmem);","I have found the very same issues after I upraded the stb_vorbis.c file on SoLoud to 1.20.
The file I'm currently using to test is this one: https://github.com/maxmods/bah.mod/blob/7dd86d73d6f6b9d9acc3a7637aa5393a38b02a16/soloud.mod/examples/audio/windy_ambience.ogg
Would you consider merging this fix?",True,{}
nothings/stb,https://github.com/nothings/stb,1005,2020-07-27T22:46:13Z,2021-07-02T13:58:42Z,2021-07-02T14:29:45Z,CLOSED,False,8,2,1,https://github.com/bqqbarbhg,stb_vorbis: Allocate memory for empty buffers in setup_malloc(),3,"['2 bug', '1 stb_vorbis']",https://github.com/nothings/stb/pull/1005,https://github.com/DanielGibson,10,https://github.com/nothings/stb/pull/1005#issuecomment-814636288,"I had a valid file failing with VORBIS_outofmem as the comment list was empty and I wasn't using an allocation buffer causing setup_malloc() to return NULL that gets interpreted as an allocation failure. You could return a sentinel value here and check against it in setup_free() as an optimization, but I'm not sure if it's worth the complexity as you'd want to use an allocation buffer if you care about performance anyway.
In my case f->comment_list_length was zero here, which I assume is valid. Applying the fix in the PR made stb_vorbis able to decode the file without any further issues.
   f->comment_list = (char**)setup_malloc(f, sizeof(char*) * (f->comment_list_length));
   if (f->comment_list == NULL)                     return error(f, VORBIS_outofmem);","I think this is overkill - f->comment_list being NULL should be ok, unless I missed something it's only accessed if f->comment_list_length > 0, so just leaving it at NULL (and not returning an error) should suffice to fix the issue (and works for me)",True,{}
nothings/stb,https://github.com/nothings/stb,1005,2020-07-27T22:46:13Z,2021-07-02T13:58:42Z,2021-07-02T14:29:45Z,CLOSED,False,8,2,1,https://github.com/bqqbarbhg,stb_vorbis: Allocate memory for empty buffers in setup_malloc(),3,"['2 bug', '1 stb_vorbis']",https://github.com/nothings/stb/pull/1005,https://github.com/nothings,11,https://github.com/nothings/stb/pull/1005#issuecomment-873020087,"I had a valid file failing with VORBIS_outofmem as the comment list was empty and I wasn't using an allocation buffer causing setup_malloc() to return NULL that gets interpreted as an allocation failure. You could return a sentinel value here and check against it in setup_free() as an optimization, but I'm not sure if it's worth the complexity as you'd want to use an allocation buffer if you care about performance anyway.
In my case f->comment_list_length was zero here, which I assume is valid. Applying the fix in the PR made stb_vorbis able to decode the file without any further issues.
   f->comment_list = (char**)setup_malloc(f, sizeof(char*) * (f->comment_list_length));
   if (f->comment_list == NULL)                     return error(f, VORBIS_outofmem);","Fixed this a different way. Thank you for reporting, my apologies for how long it took to address.",True,{'HOORAY': ['https://github.com/julianxhokaxhiu']}
nothings/stb,https://github.com/nothings/stb,1005,2020-07-27T22:46:13Z,2021-07-02T13:58:42Z,2021-07-02T14:29:45Z,CLOSED,False,8,2,1,https://github.com/bqqbarbhg,stb_vorbis: Allocate memory for empty buffers in setup_malloc(),3,"['2 bug', '1 stb_vorbis']",https://github.com/nothings/stb/pull/1005,https://github.com/julianxhokaxhiu,12,https://github.com/nothings/stb/pull/1005#issuecomment-873036048,"I had a valid file failing with VORBIS_outofmem as the comment list was empty and I wasn't using an allocation buffer causing setup_malloc() to return NULL that gets interpreted as an allocation failure. You could return a sentinel value here and check against it in setup_free() as an optimization, but I'm not sure if it's worth the complexity as you'd want to use an allocation buffer if you care about performance anyway.
In my case f->comment_list_length was zero here, which I assume is valid. Applying the fix in the PR made stb_vorbis able to decode the file without any further issues.
   f->comment_list = (char**)setup_malloc(f, sizeof(char*) * (f->comment_list_length));
   if (f->comment_list == NULL)                     return error(f, VORBIS_outofmem);",Can you please let me know how or let me know which version can I pull to get this fixed? Thank you in advance!,True,{}
nothings/stb,https://github.com/nothings/stb,1005,2020-07-27T22:46:13Z,2021-07-02T13:58:42Z,2021-07-02T14:29:45Z,CLOSED,False,8,2,1,https://github.com/bqqbarbhg,stb_vorbis: Allocate memory for empty buffers in setup_malloc(),3,"['2 bug', '1 stb_vorbis']",https://github.com/nothings/stb/pull/1005,https://github.com/nothings,13,https://github.com/nothings/stb/pull/1005#issuecomment-873041699,"I had a valid file failing with VORBIS_outofmem as the comment list was empty and I wasn't using an allocation buffer causing setup_malloc() to return NULL that gets interpreted as an allocation failure. You could return a sentinel value here and check against it in setup_free() as an optimization, but I'm not sure if it's worth the complexity as you'd want to use an allocation buffer if you care about performance anyway.
In my case f->comment_list_length was zero here, which I assume is valid. Applying the fix in the PR made stb_vorbis able to decode the file without any further issues.
   f->comment_list = (char**)setup_malloc(f, sizeof(char*) * (f->comment_list_length));
   if (f->comment_list == NULL)                     return error(f, VORBIS_outofmem);",pull current master. it's fixed in 1.21,True,{'THUMBS_UP': ['https://github.com/julianxhokaxhiu']}
nothings/stb,https://github.com/nothings/stb,1006,2020-07-29T20:14:01Z,2021-07-04T09:58:43Z,2021-07-04T09:58:43Z,CLOSED,False,7,1,1,https://github.com/GabrielRavier,Fix alloca in stb_vorbis for Sun platforms and add generic fallback for platforms with GCC,1,['1 stb_vorbis'],https://github.com/nothings/stb/pull/1006,https://github.com/GabrielRavier,1,https://github.com/nothings/stb/pull/1006,"Should be pretty self-explanatory. Yes, this is not a joke, I do indeed use OpenIndiana. But so yeah, the first part of the PR should fix compilation on Sun platforms, and the second part should fix compilation on any platform that doesn't define alloca in stdlib.h, is not supported by the checks we do and uses GCC.","Should be pretty self-explanatory. Yes, this is not a joke, I do indeed use OpenIndiana. But so yeah, the first part of the PR should fix compilation on Sun platforms, and the second part should fix compilation on any platform that doesn't define alloca in stdlib.h, is not supported by the checks we do and uses GCC.",True,{}
nothings/stb,https://github.com/nothings/stb,1006,2020-07-29T20:14:01Z,2021-07-04T09:58:43Z,2021-07-04T09:58:43Z,CLOSED,False,7,1,1,https://github.com/GabrielRavier,Fix alloca in stb_vorbis for Sun platforms and add generic fallback for platforms with GCC,1,['1 stb_vorbis'],https://github.com/nothings/stb/pull/1006,https://github.com/rygorous,2,https://github.com/nothings/stb/pull/1006#issuecomment-873557610,"Should be pretty self-explanatory. Yes, this is not a joke, I do indeed use OpenIndiana. But so yeah, the first part of the PR should fix compilation on Sun platforms, and the second part should fix compilation on any platform that doesn't define alloca in stdlib.h, is not supported by the checks we do and uses GCC.",I'll take the fix for Sun platforms but not compiling when the right header to include for the target wasn't detected is a feature not a bug as far as I'm concerned.,True,{}
nothings/stb,https://github.com/nothings/stb,1007,2020-07-30T21:35:08Z,2021-07-02T00:50:29Z,2021-07-02T00:50:29Z,CLOSED,False,1,1,1,https://github.com/voidbert,Updated stb_image_write description,1,"['2 good-no changes needed', '3 documentation fix']",https://github.com/nothings/stb/pull/1007,https://github.com/voidbert,1,https://github.com/nothings/stb/pull/1007,The header supports saving JPEG and HDR images but it wasn't in the description yet.,The header supports saving JPEG and HDR images but it wasn't in the description yet.,True,{}
nothings/stb,https://github.com/nothings/stb,1007,2020-07-30T21:35:08Z,2021-07-02T00:50:29Z,2021-07-02T00:50:29Z,CLOSED,False,1,1,1,https://github.com/voidbert,Updated stb_image_write description,1,"['2 good-no changes needed', '3 documentation fix']",https://github.com/nothings/stb/pull/1007,https://github.com/rygorous,2,https://github.com/nothings/stb/pull/1007#issuecomment-872636774,The header supports saving JPEG and HDR images but it wasn't in the description yet.,Has been updated in the dev branch but not with this PR (since there was a missing format in stb_image as well). Will be fixed when we next do a release.,True,{}
nothings/stb,https://github.com/nothings/stb,1008,2020-08-01T19:09:51Z,2020-08-02T14:34:24Z,2020-08-02T18:12:33Z,CLOSED,False,18,14,1,https://github.com/astralinux,Update stb_vorbis.c,1,[],https://github.com/nothings/stb/pull/1008,https://github.com/astralinux,1,https://github.com/nothings/stb/pull/1008,"If vendor or user comments omitted then do not setup_malloc() with zero length, do not report ""out of memory errors"", but just continue decoding.","If vendor or user comments omitted then do not setup_malloc() with zero length, do not report ""out of memory errors"", but just continue decoding.",True,{}
nothings/stb,https://github.com/nothings/stb,1008,2020-08-01T19:09:51Z,2020-08-02T14:34:24Z,2020-08-02T18:12:33Z,CLOSED,False,18,14,1,https://github.com/astralinux,Update stb_vorbis.c,1,[],https://github.com/nothings/stb/pull/1008,https://github.com/nothings,2,https://github.com/nothings/stb/pull/1008#issuecomment-667578990,"If vendor or user comments omitted then do not setup_malloc() with zero length, do not report ""out of memory errors"", but just continue decoding.","Is the fixing the same thing as #1005, which is a much simpler fix?",True,{}
nothings/stb,https://github.com/nothings/stb,1008,2020-08-01T19:09:51Z,2020-08-02T14:34:24Z,2020-08-02T18:12:33Z,CLOSED,False,18,14,1,https://github.com/astralinux,Update stb_vorbis.c,1,[],https://github.com/nothings/stb/pull/1008,https://github.com/astralinux,3,https://github.com/nothings/stb/pull/1008#issuecomment-667579832,"If vendor or user comments omitted then do not setup_malloc() with zero length, do not report ""out of memory errors"", but just continue decoding.",Not sure.  Proposed there malloc(sz) - implementation dependent if sz is 0.,True,{}
nothings/stb,https://github.com/nothings/stb,1008,2020-08-01T19:09:51Z,2020-08-02T14:34:24Z,2020-08-02T18:12:33Z,CLOSED,False,18,14,1,https://github.com/astralinux,Update stb_vorbis.c,1,[],https://github.com/nothings/stb/pull/1008,https://github.com/bqqbarbhg,4,https://github.com/nothings/stb/pull/1008#issuecomment-667670882,"If vendor or user comments omitted then do not setup_malloc() with zero length, do not report ""out of memory errors"", but just continue decoding.",If this solution is preferable to #1005 which is now fixed should probably add an assert(sz > 0) to setup_malloc() as it's not supported.,True,{}
nothings/stb,https://github.com/nothings/stb,1008,2020-08-01T19:09:51Z,2020-08-02T14:34:24Z,2020-08-02T18:12:33Z,CLOSED,False,18,14,1,https://github.com/astralinux,Update stb_vorbis.c,1,[],https://github.com/nothings/stb/pull/1008,https://github.com/astralinux,5,https://github.com/nothings/stb/pull/1008#issuecomment-667677860,"If vendor or user comments omitted then do not setup_malloc() with zero length, do not report ""out of memory errors"", but just continue decoding.","#1005 is OK now
this my commit can be discarded",True,{}
nothings/stb,https://github.com/nothings/stb,1008,2020-08-01T19:09:51Z,2020-08-02T14:34:24Z,2020-08-02T18:12:33Z,CLOSED,False,18,14,1,https://github.com/astralinux,Update stb_vorbis.c,1,[],https://github.com/nothings/stb/pull/1008,https://github.com/nothings,6,https://github.com/nothings/stb/pull/1008#issuecomment-667681671,"If vendor or user comments omitted then do not setup_malloc() with zero length, do not report ""out of memory errors"", but just continue decoding.",thanks.,True,{}
nothings/stb,https://github.com/nothings/stb,1009,2020-08-03T08:18:25Z,2021-07-07T03:13:05Z,2021-07-07T03:13:05Z,CLOSED,False,21,21,1,https://github.com/adrianlizarraga,Fix comment and indentation in stbtt_solve_cubic,1,['1 stb_truetype'],https://github.com/nothings/stb/pull/1009,https://github.com/adrianlizarraga,1,https://github.com/nothings/stb/pull/1009,"This branch fixes:

The comment above stbtt__solve_cubic to reflect the actual usage of parameters in solving the cubic equation. Refer to https://en.wikipedia.org/wiki/Cubic_equation
The indentation in the same function (tab => 3 spaces)

These are very minor updates to a private implementation function, but in the words of Hilary Duff ""Why not?"".","This branch fixes:

The comment above stbtt__solve_cubic to reflect the actual usage of parameters in solving the cubic equation. Refer to https://en.wikipedia.org/wiki/Cubic_equation
The indentation in the same function (tab => 3 spaces)

These are very minor updates to a private implementation function, but in the words of Hilary Duff ""Why not?"".",True,{}
nothings/stb,https://github.com/nothings/stb,1009,2020-08-03T08:18:25Z,2021-07-07T03:13:05Z,2021-07-07T03:13:05Z,CLOSED,False,21,21,1,https://github.com/adrianlizarraga,Fix comment and indentation in stbtt_solve_cubic,1,['1 stb_truetype'],https://github.com/nothings/stb/pull/1009,https://github.com/rygorous,2,https://github.com/nothings/stb/pull/1009#issuecomment-875238642,"This branch fixes:

The comment above stbtt__solve_cubic to reflect the actual usage of parameters in solving the cubic equation. Refer to https://en.wikipedia.org/wiki/Cubic_equation
The indentation in the same function (tab => 3 spaces)

These are very minor updates to a private implementation function, but in the words of Hilary Duff ""Why not?"".","This is now fixed in the dev branch, although not by merging this PR.",True,{}
nothings/stb,https://github.com/nothings/stb,1012,2020-08-06T02:47:42Z,2020-08-06T04:34:11Z,2020-08-06T21:01:29Z,CLOSED,False,270,270,45,https://github.com/aaronfranke,[deleted because the original poster opted to be nonproductive as seen below],1,[],https://github.com/nothings/stb/pull/1012,https://github.com/aaronfranke,1,https://github.com/nothings/stb/pull/1012,[deleted because the original poster opted to be nonproductive as seen below],[deleted because the original poster opted to be nonproductive as seen below],True,{}
nothings/stb,https://github.com/nothings/stb,1012,2020-08-06T02:47:42Z,2020-08-06T04:34:11Z,2020-08-06T21:01:29Z,CLOSED,False,270,270,45,https://github.com/aaronfranke,[deleted because the original poster opted to be nonproductive as seen below],1,[],https://github.com/nothings/stb/pull/1012,https://github.com/nothings,2,https://github.com/nothings/stb/pull/1012#issuecomment-669671398,[deleted because the original poster opted to be nonproductive as seen below],[deleted because the original poster opted to be nonproductive as seen below],True,{}
nothings/stb,https://github.com/nothings/stb,1012,2020-08-06T02:47:42Z,2020-08-06T04:34:11Z,2020-08-06T21:01:29Z,CLOSED,False,270,270,45,https://github.com/aaronfranke,[deleted because the original poster opted to be nonproductive as seen below],1,[],https://github.com/nothings/stb/pull/1012,https://github.com/aaronfranke,3,https://github.com/nothings/stb/pull/1012#issuecomment-669677739,[deleted because the original poster opted to be nonproductive as seen below],"(a) I am unlikely to ever accept a PR like this since it's going to cause too many conflicts with other PRs

Of course it will, but the alternative is that you never fix formatting problems, which sucks.
This kind of PR is very easy to re-create, so if you want to merge other PRs first, I can re-create this again.

(b) listing the actual actionable issues would be more useful. E.g. you say this PR ""removes trailing spaces, UTF-8, LF no BOM, and newlines at the end of files"". Are you actually saying there are instances of UTF-8 and BOM in the source tree? Because that's what your choice of words says, but I'd be pretty surprised.

Sorry for the confusion. This PR only removes trailing spaces and adds EOL at EOF, it does not remove any BOMs or CRs because there are none, but I just wanted to tell you what settings my formatting script uses.

(c) congrats, I don't give a crap about the contents of tests/ or tools/ when it comes to trailing newlines, and I don't know why you do. Like, what is the actual problem you're trying to solve? Why do you think I care about solving it?

The problem I am trying to solve is bad formatting, which affects downstream projects. The easiest, most comprehensive, and overall best fix is to format the entire upstream repo, rather than just a specific set of files that are used downstream (besides, how can you know what's used downstream? maybe downstream uses tests or the tools?).
The question I have for you is, why don't you want well-formatted code everywhere?

(d) I don't want your scripting solution because every time somebody says this it turns out they mean ""something that requires some program that windows machines don't have installed by default"". It's either going to get fixed long-term by having a program to do it in the tools/ directory that compiles on windows, or it's not going to get fixed.

The idea is to have it in CI checks on GitHub, to alert you of issues before merging PRs. If a user is unable to run the script on their local machine, they can still just push and let GitHub tell them if there's anything wrong.",True,{}
nothings/stb,https://github.com/nothings/stb,1012,2020-08-06T02:47:42Z,2020-08-06T04:34:11Z,2020-08-06T21:01:29Z,CLOSED,False,270,270,45,https://github.com/aaronfranke,[deleted because the original poster opted to be nonproductive as seen below],1,[],https://github.com/nothings/stb/pull/1012,https://github.com/nothings,4,https://github.com/nothings/stb/pull/1012#issuecomment-669679318,[deleted because the original poster opted to be nonproductive as seen below],[deleted because the original poster opted to be nonproductive as seen below],True,{}
nothings/stb,https://github.com/nothings/stb,1016,2020-08-15T15:34:49Z,2021-07-12T00:25:41Z,2021-07-12T00:25:41Z,CLOSED,False,8,2,1,https://github.com/jackodirks,"stb_image.h: Suppress warnings about out_size, delay_size",2,"['1 stb_image', '2 warning', '5 merged-dev']",https://github.com/nothings/stb/pull/1016,https://github.com/jackodirks,1,https://github.com/nothings/stb/pull/1016,"These two variables are unused in a Linux environment (the macros that use them actually do not
use them), which generate warnings. But the macros are set up like this
for compatibility with other environments, so that these warnings are
not easily avoided.
This fix just tells the compiler that these variables might not be used,
and that it should not warn, which seems the best of all worlds.","These two variables are unused in a Linux environment (the macros that use them actually do not
use them), which generate warnings. But the macros are set up like this
for compatibility with other environments, so that these warnings are
not easily avoided.
This fix just tells the compiler that these variables might not be used,
and that it should not warn, which seems the best of all worlds.",True,{}
nothings/stb,https://github.com/nothings/stb,1016,2020-08-15T15:34:49Z,2021-07-12T00:25:41Z,2021-07-12T00:25:41Z,CLOSED,False,8,2,1,https://github.com/jackodirks,"stb_image.h: Suppress warnings about out_size, delay_size",2,"['1 stb_image', '2 warning', '5 merged-dev']",https://github.com/nothings/stb/pull/1016,https://github.com/nothings,2,https://github.com/nothings/stb/pull/1016#issuecomment-674414280,"These two variables are unused in a Linux environment (the macros that use them actually do not
use them), which generate warnings. But the macros are set up like this
for compatibility with other environments, so that these warnings are
not easily avoided.
This fix just tells the compiler that these variables might not be used,
and that it should not warn, which seems the best of all worlds.","Instead of casting to void, there is an STBI_NOTUSED macro for this.",True,{}
nothings/stb,https://github.com/nothings/stb,1016,2020-08-15T15:34:49Z,2021-07-12T00:25:41Z,2021-07-12T00:25:41Z,CLOSED,False,8,2,1,https://github.com/jackodirks,"stb_image.h: Suppress warnings about out_size, delay_size",2,"['1 stb_image', '2 warning', '5 merged-dev']",https://github.com/nothings/stb/pull/1016,https://github.com/jackodirks,3,https://github.com/nothings/stb/pull/1016#issuecomment-675449046,"These two variables are unused in a Linux environment (the macros that use them actually do not
use them), which generate warnings. But the macros are set up like this
for compatibility with other environments, so that these warnings are
not easily avoided.
This fix just tells the compiler that these variables might not be used,
and that it should not warn, which seems the best of all worlds.",Thank you for the feedback. I changed my commit (hence the force push) and also replaced the (void) part with STDI_NOTUSED somewhere else in the header.,True,{}
nothings/stb,https://github.com/nothings/stb,1016,2020-08-15T15:34:49Z,2021-07-12T00:25:41Z,2021-07-12T00:25:41Z,CLOSED,False,8,2,1,https://github.com/jackodirks,"stb_image.h: Suppress warnings about out_size, delay_size",2,"['1 stb_image', '2 warning', '5 merged-dev']",https://github.com/nothings/stb/pull/1016,https://github.com/rygorous,4,https://github.com/nothings/stb/pull/1016#issuecomment-872629217,"These two variables are unused in a Linux environment (the macros that use them actually do not
use them), which generate warnings. But the macros are set up like this
for compatibility with other environments, so that these warnings are
not easily avoided.
This fix just tells the compiler that these variables might not be used,
and that it should not warn, which seems the best of all worlds.","Merged into dev branch, will be in the next release.",True,{}
nothings/stb,https://github.com/nothings/stb,1024,2020-09-02T21:36:59Z,2021-07-03T07:53:05Z,2021-07-03T07:53:05Z,CLOSED,False,5,1,1,https://github.com/Bargor,Added cast to match types,2,['1 stb_image'],https://github.com/nothings/stb/pull/1024,https://github.com/Bargor,1,https://github.com/nothings/stb/pull/1024,"Fixes issue #1019 :
../../src/modules/image/stb_image.h: In function ‘int stbi__zhuffman_decode_slowpath(stbi__zbuf*, stbi__zhuffman*)’:
../../src/modules/image/stb_image.h:4123:10: warning: comparison of integer expressions of different signedness: ‘int’ and ‘long unsigned int’ [-Wsign-compare]
4123 |    if (b >= sizeof (z->size)) return -1; // some data was corrupt somewhere!
|        ~~^~~~~~~~~~~~~~~~~~~","Fixes issue #1019 :
../../src/modules/image/stb_image.h: In function ‘int stbi__zhuffman_decode_slowpath(stbi__zbuf*, stbi__zhuffman*)’:
../../src/modules/image/stb_image.h:4123:10: warning: comparison of integer expressions of different signedness: ‘int’ and ‘long unsigned int’ [-Wsign-compare]
4123 |    if (b >= sizeof (z->size)) return -1; // some data was corrupt somewhere!
|        ~~^~~~~~~~~~~~~~~~~~~",True,{}
nothings/stb,https://github.com/nothings/stb,1024,2020-09-02T21:36:59Z,2021-07-03T07:53:05Z,2021-07-03T07:53:05Z,CLOSED,False,5,1,1,https://github.com/Bargor,Added cast to match types,2,['1 stb_image'],https://github.com/nothings/stb/pull/1024,https://github.com/rygorous,2,https://github.com/nothings/stb/pull/1024#issuecomment-873365118,"Fixes issue #1019 :
../../src/modules/image/stb_image.h: In function ‘int stbi__zhuffman_decode_slowpath(stbi__zbuf*, stbi__zhuffman*)’:
../../src/modules/image/stb_image.h:4123:10: warning: comparison of integer expressions of different signedness: ‘int’ and ‘long unsigned int’ [-Wsign-compare]
4123 |    if (b >= sizeof (z->size)) return -1; // some data was corrupt somewhere!
|        ~~^~~~~~~~~~~~~~~~~~~","This bug is fixed (in a different way) in the dev branch, closing this PR.",True,{}
nothings/stb,https://github.com/nothings/stb,1025,2020-09-05T02:22:41Z,,2021-06-05T19:41:04Z,OPEN,False,1323,0,1,https://github.com/Lokno,Initial commit of stand-alone animated gif library stb_gif.h,1,['1 stb_image'],https://github.com/nothings/stb/pull/1025,https://github.com/Lokno,1,https://github.com/nothings/stb/pull/1025,"As requested by STB (https://twitter.com/nothings/status/1298821179206115328) I have refactored the animated GIF code out of stb_image.h and into its own library, called stb_gif.h
The code is basically the same, with changes to the API to make it more directly interact with the animated GIF loading code.
stbgif_load() loads a GIF with all of its layers
compare to stbi_load() in stb_image.h that loads a single layer.
The functionality of stbi_load() on a GIF format image exists in this file as stbgif__load_first_layer()
stbgif_info() determines the x and y dimensions of the GIF, and the number of components (3-4). This mirrors the functionality of stbi_info() in stb_image.h
Adding a feature to read the comment extension to determine the number of layers is left as future work.","As requested by STB (https://twitter.com/nothings/status/1298821179206115328) I have refactored the animated GIF code out of stb_image.h and into its own library, called stb_gif.h
The code is basically the same, with changes to the API to make it more directly interact with the animated GIF loading code.
stbgif_load() loads a GIF with all of its layers
compare to stbi_load() in stb_image.h that loads a single layer.
The functionality of stbi_load() on a GIF format image exists in this file as stbgif__load_first_layer()
stbgif_info() determines the x and y dimensions of the GIF, and the number of components (3-4). This mirrors the functionality of stbi_info() in stb_image.h
Adding a feature to read the comment extension to determine the number of layers is left as future work.",True,{}
nothings/stb,https://github.com/nothings/stb,1025,2020-09-05T02:22:41Z,,2021-06-05T19:41:04Z,OPEN,False,1323,0,1,https://github.com/Lokno,Initial commit of stand-alone animated gif library stb_gif.h,1,['1 stb_image'],https://github.com/nothings/stb/pull/1025,https://github.com/nothings,2,https://github.com/nothings/stb/pull/1025#issuecomment-687561441,"As requested by STB (https://twitter.com/nothings/status/1298821179206115328) I have refactored the animated GIF code out of stb_image.h and into its own library, called stb_gif.h
The code is basically the same, with changes to the API to make it more directly interact with the animated GIF loading code.
stbgif_load() loads a GIF with all of its layers
compare to stbi_load() in stb_image.h that loads a single layer.
The functionality of stbi_load() on a GIF format image exists in this file as stbgif__load_first_layer()
stbgif_info() determines the x and y dimensions of the GIF, and the number of components (3-4). This mirrors the functionality of stbi_info() in stb_image.h
Adding a feature to read the comment extension to determine the number of layers is left as future work.","There's also this attempt that I was also informed of today, I will have to compare them. dc1248@c372da3",True,{}
nothings/stb,https://github.com/nothings/stb,1027,2020-09-20T21:42:24Z,2021-07-02T00:19:55Z,2021-07-02T00:19:55Z,CLOSED,False,3,0,1,https://github.com/tanmayaeron,added documnetation ,2,['1 stb_image'],https://github.com/nothings/stb/pull/1027,https://github.com/tanmayaeron,1,https://github.com/nothings/stb/pull/1027,#1026 added documentation,#1026 added documentation,True,{}
nothings/stb,https://github.com/nothings/stb,1027,2020-09-20T21:42:24Z,2021-07-02T00:19:55Z,2021-07-02T00:19:55Z,CLOSED,False,3,0,1,https://github.com/tanmayaeron,added documnetation ,2,['1 stb_image'],https://github.com/nothings/stb/pull/1027,https://github.com/rygorous,2,https://github.com/nothings/stb/pull/1027#issuecomment-872627014,#1026 added documentation,A different version of this fix was pushed to the dev branch and will be in the next release.,True,{}
nothings/stb,https://github.com/nothings/stb,1029,2020-09-28T13:59:36Z,2021-07-04T07:13:21Z,2021-07-04T07:13:21Z,CLOSED,False,8,8,1,https://github.com/RufUsul,stb_image_write.h: fixed some more warnings (GCC v8.3.0),1,['1 stb_image_write'],https://github.com/nothings/stb/pull/1029,https://github.com/RufUsul,1,https://github.com/nothings/stb/pull/1029,"mgerhardy opened an issue for these in #1020
ghost already fixed the other ones in #1000","mgerhardy opened an issue for these in #1020
ghost already fixed the other ones in #1000",True,{}
nothings/stb,https://github.com/nothings/stb,1029,2020-09-28T13:59:36Z,2021-07-04T07:13:21Z,2021-07-04T07:13:21Z,CLOSED,False,8,8,1,https://github.com/RufUsul,stb_image_write.h: fixed some more warnings (GCC v8.3.0),1,['1 stb_image_write'],https://github.com/nothings/stb/pull/1029,https://github.com/rygorous,2,https://github.com/nothings/stb/pull/1029#issuecomment-873536046,"mgerhardy opened an issue for these in #1020
ghost already fixed the other ones in #1000","This ""fix"" is incorrect. The write_contexts should be initialized, leaving them uninitialized and hoping for the best is not OK.",True,{}
nothings/stb,https://github.com/nothings/stb,1031,2020-10-01T00:34:58Z,2021-07-12T00:25:38Z,2021-09-15T19:41:41Z,CLOSED,False,4,1,1,https://github.com/eugenegff,fix building by MSVC for Windows 10 on ARM,1,"['1 stb_image', '5 merged-dev']",https://github.com/nothings/stb/pull/1031,https://github.com/eugenegff,1,https://github.com/nothings/stb/pull/1031,"I recently enabled NEON support for Windows 10 on ARM for Ogre3D project, https://github.com/OGRECave/ogre-next/, and this is all that was needed to build STB with MSVC for ARM64.","I recently enabled NEON support for Windows 10 on ARM for Ogre3D project, https://github.com/OGRECave/ogre-next/, and this is all that was needed to build STB with MSVC for ARM64.",True,{}
nothings/stb,https://github.com/nothings/stb,1031,2020-10-01T00:34:58Z,2021-07-12T00:25:38Z,2021-09-15T19:41:41Z,CLOSED,False,4,1,1,https://github.com/eugenegff,fix building by MSVC for Windows 10 on ARM,1,"['1 stb_image', '5 merged-dev']",https://github.com/nothings/stb/pull/1031,https://github.com/rygorous,2,https://github.com/nothings/stb/pull/1031#issuecomment-873366215,"I recently enabled NEON support for Windows 10 on ARM for Ogre3D project, https://github.com/OGRECave/ogre-next/, and this is all that was needed to build STB with MSVC for ARM64.",This is now merged on the dev branch and will be in the next version.,True,{}
nothings/stb,https://github.com/nothings/stb,1032,2020-10-01T06:14:59Z,2020-10-01T08:26:35Z,2020-10-02T12:50:55Z,CLOSED,False,3,3,1,https://github.com/kamit9171,Update README.list,1,['invalid'],https://github.com/nothings/stb/pull/1032,https://github.com/kamit9171,1,https://github.com/nothings/stb/pull/1032,"correction in README.list

Delete this list before clicking CREATE PULL REQUEST
Make sure you're using a special branch just for this pull request. (Sometimes people unknowingly use a default branch, then later update that branch, which updates the pull request with the other changes if it hasn't been merged yet.)
Do NOT update the version number in the file. (This just causes conflicts.)
Do add your name to the list of contributors. (Don't worry about the formatting.) I'll try to remember to add it if you don't, but I sometimes forget as it's an extra step.

If you get something above wrong, don't fret it, it's not the end of the world.","correction in README.list

Delete this list before clicking CREATE PULL REQUEST
Make sure you're using a special branch just for this pull request. (Sometimes people unknowingly use a default branch, then later update that branch, which updates the pull request with the other changes if it hasn't been merged yet.)
Do NOT update the version number in the file. (This just causes conflicts.)
Do add your name to the list of contributors. (Don't worry about the formatting.) I'll try to remember to add it if you don't, but I sometimes forget as it's an extra step.

If you get something above wrong, don't fret it, it's not the end of the world.",True,{}
nothings/stb,https://github.com/nothings/stb,1033,2020-10-01T16:05:35Z,2020-10-01T20:47:49Z,2020-10-02T12:50:47Z,CLOSED,False,4,4,1,https://github.com/Ronnie1011,Update file,1,['invalid'],https://github.com/nothings/stb/pull/1033,https://github.com/Ronnie1011,1,https://github.com/nothings/stb/pull/1033,"Delete this list before clicking CREATE PULL REQUEST
Make sure you're using a special branch just for this pull request. (Sometimes people unknowingly use a default branch, then later update that branch, which updates the pull request with the other changes if it hasn't been merged yet.)
Do NOT update the version number in the file. (This just causes conflicts.)
Do add your name to the list of contributors. (Don't worry about the formatting.) I'll try to remember to add it if you don't, but I sometimes forget as it's an extra step.

If you get something above wrong, don't fret it, it's not the end of the world.","Delete this list before clicking CREATE PULL REQUEST
Make sure you're using a special branch just for this pull request. (Sometimes people unknowingly use a default branch, then later update that branch, which updates the pull request with the other changes if it hasn't been merged yet.)
Do NOT update the version number in the file. (This just causes conflicts.)
Do add your name to the list of contributors. (Don't worry about the formatting.) I'll try to remember to add it if you don't, but I sometimes forget as it's an extra step.

If you get something above wrong, don't fret it, it's not the end of the world.",True,{}
nothings/stb,https://github.com/nothings/stb,1034,2020-10-02T09:47:10Z,2020-10-02T10:30:30Z,2020-10-02T12:50:41Z,CLOSED,False,18,0,1,https://github.com/anjali0981,Create C++,1,['invalid'],https://github.com/nothings/stb/pull/1034,https://github.com/anjali0981,1,https://github.com/nothings/stb/pull/1034,"Program to Add Two Integers.

Delete this list before clicking CREATE PULL REQUEST
Make sure you're using a special branch just for this pull request. (Sometimes people unknowingly use a default branch, then later update that branch, which updates the pull request with the other changes if it hasn't been merged yet.)
Do NOT update the version number in the file. (This just causes conflicts.)
Do add your name to the list of contributors. (Don't worry about the formatting.) I'll try to remember to add it if you don't, but I sometimes forget as it's an extra step.

If you get something above wrong, don't fret it, it's not the end of the world.","Program to Add Two Integers.

Delete this list before clicking CREATE PULL REQUEST
Make sure you're using a special branch just for this pull request. (Sometimes people unknowingly use a default branch, then later update that branch, which updates the pull request with the other changes if it hasn't been merged yet.)
Do NOT update the version number in the file. (This just causes conflicts.)
Do add your name to the list of contributors. (Don't worry about the formatting.) I'll try to remember to add it if you don't, but I sometimes forget as it's an extra step.

If you get something above wrong, don't fret it, it's not the end of the world.",True,{}
nothings/stb,https://github.com/nothings/stb,1034,2020-10-02T09:47:10Z,2020-10-02T10:30:30Z,2020-10-02T12:50:41Z,CLOSED,False,18,0,1,https://github.com/anjali0981,Create C++,1,['invalid'],https://github.com/nothings/stb/pull/1034,https://github.com/nabijaczleweli,2,https://github.com/nothings/stb/pull/1034#issuecomment-702657585,"Program to Add Two Integers.

Delete this list before clicking CREATE PULL REQUEST
Make sure you're using a special branch just for this pull request. (Sometimes people unknowingly use a default branch, then later update that branch, which updates the pull request with the other changes if it hasn't been merged yet.)
Do NOT update the version number in the file. (This just causes conflicts.)
Do add your name to the list of contributors. (Don't worry about the formatting.) I'll try to remember to add it if you don't, but I sometimes forget as it's an extra step.

If you get something above wrong, don't fret it, it's not the end of the world.","These are very likely submitted for ""hacktoberfest"" in attempt to win some sweatshop merch. Tagging these PRs ""spam"" or ""invalid"" will (a) prevent the poster from getting it, and more importantly (b) add to the statistics so maybe digitalocean shuts this trash down next year.",True,"{'THUMBS_UP': ['https://github.com/turol', 'https://github.com/DeadMG', 'https://github.com/vendethiel', 'https://github.com/alxklk', 'https://github.com/nothings']}"
nothings/stb,https://github.com/nothings/stb,1035,2020-10-14T12:00:11Z,2021-07-07T10:14:20Z,2021-07-07T10:14:21Z,CLOSED,False,5,7,1,https://github.com/kawa-yoiko,stb_truetype: fix disregarded GPOS kern pairs,1,['1 stb_truetype'],https://github.com/nothings/stb/pull/1035,https://github.com/kawa-yoiko,1,https://github.com/nothings/stb/pull/1035,"stb_truetype incorrectly drops some kerning in the GPOS table (example at the end). The OpenType spec (related section) specifies that in a ClassDef table, ""All glyphs not assigned to a class fall into Class 0."" In stb_truetype however, the function stbtt__GetGlyphClass returns -1 for glyphs with unassigned classes, so all their kerning info are disregarded. This patch fixes the bug.
Example: extract the kerning info from Mali-Regular.ttf.
#define STB_TRUETYPE_IMPLEMENTATION
#include ""stb_truetype.h""
#include <stdio.h>

int main()
{
  stbtt_fontinfo font;
  static unsigned char buffer[1 << 20];

  fread(buffer, 1, sizeof buffer, fopen(""Mali-Regular.ttf"", ""rb""));
  stbtt_InitFont(&font, buffer, 0);

  printf(""VA %d\n"", stbtt_GetCodepointKernAdvance(&font, 'V', 'A'));
  printf(""AV %d\n"", stbtt_GetCodepointKernAdvance(&font, 'A', 'V'));
  printf(""CA %d\n"", stbtt_GetCodepointKernAdvance(&font, 'C', 'A'));
  printf(""AC %d\n"", stbtt_GetCodepointKernAdvance(&font, 'A', 'C'));

  return 0;
}
Actual output:
VA -150
AV 0
CA 0
AC 0

Expected output (cross-checked with FontForge, fontTools ttx, and multiple GUI applications; corrected by the patch):
VA -150
AV -150
CA 0
AC -60

Details: the glyph ""A"" appears in the Coverage table but not in the ClassDef1 table, and thus falls into Class 0. Kern pairs with Class 0 as the first glyph are ignored in the unpatched version.","stb_truetype incorrectly drops some kerning in the GPOS table (example at the end). The OpenType spec (related section) specifies that in a ClassDef table, ""All glyphs not assigned to a class fall into Class 0."" In stb_truetype however, the function stbtt__GetGlyphClass returns -1 for glyphs with unassigned classes, so all their kerning info are disregarded. This patch fixes the bug.
Example: extract the kerning info from Mali-Regular.ttf.
#define STB_TRUETYPE_IMPLEMENTATION
#include ""stb_truetype.h""
#include <stdio.h>

int main()
{
  stbtt_fontinfo font;
  static unsigned char buffer[1 << 20];

  fread(buffer, 1, sizeof buffer, fopen(""Mali-Regular.ttf"", ""rb""));
  stbtt_InitFont(&font, buffer, 0);

  printf(""VA %d\n"", stbtt_GetCodepointKernAdvance(&font, 'V', 'A'));
  printf(""AV %d\n"", stbtt_GetCodepointKernAdvance(&font, 'A', 'V'));
  printf(""CA %d\n"", stbtt_GetCodepointKernAdvance(&font, 'C', 'A'));
  printf(""AC %d\n"", stbtt_GetCodepointKernAdvance(&font, 'A', 'C'));

  return 0;
}
Actual output:
VA -150
AV 0
CA 0
AC 0

Expected output (cross-checked with FontForge, fontTools ttx, and multiple GUI applications; corrected by the patch):
VA -150
AV -150
CA 0
AC -60

Details: the glyph ""A"" appears in the Coverage table but not in the ClassDef1 table, and thus falls into Class 0. Kern pairs with Class 0 as the first glyph are ignored in the unpatched version.",True,{'THUMBS_UP': ['https://github.com/guzba']}
nothings/stb,https://github.com/nothings/stb,1035,2020-10-14T12:00:11Z,2021-07-07T10:14:20Z,2021-07-07T10:14:21Z,CLOSED,False,5,7,1,https://github.com/kawa-yoiko,stb_truetype: fix disregarded GPOS kern pairs,1,['1 stb_truetype'],https://github.com/nothings/stb/pull/1035,https://github.com/rygorous,2,https://github.com/nothings/stb/pull/1035#issuecomment-875479119,"stb_truetype incorrectly drops some kerning in the GPOS table (example at the end). The OpenType spec (related section) specifies that in a ClassDef table, ""All glyphs not assigned to a class fall into Class 0."" In stb_truetype however, the function stbtt__GetGlyphClass returns -1 for glyphs with unassigned classes, so all their kerning info are disregarded. This patch fixes the bug.
Example: extract the kerning info from Mali-Regular.ttf.
#define STB_TRUETYPE_IMPLEMENTATION
#include ""stb_truetype.h""
#include <stdio.h>

int main()
{
  stbtt_fontinfo font;
  static unsigned char buffer[1 << 20];

  fread(buffer, 1, sizeof buffer, fopen(""Mali-Regular.ttf"", ""rb""));
  stbtt_InitFont(&font, buffer, 0);

  printf(""VA %d\n"", stbtt_GetCodepointKernAdvance(&font, 'V', 'A'));
  printf(""AV %d\n"", stbtt_GetCodepointKernAdvance(&font, 'A', 'V'));
  printf(""CA %d\n"", stbtt_GetCodepointKernAdvance(&font, 'C', 'A'));
  printf(""AC %d\n"", stbtt_GetCodepointKernAdvance(&font, 'A', 'C'));

  return 0;
}
Actual output:
VA -150
AV 0
CA 0
AC 0

Expected output (cross-checked with FontForge, fontTools ttx, and multiple GUI applications; corrected by the patch):
VA -150
AV -150
CA 0
AC -60

Details: the glyph ""A"" appears in the Coverage table but not in the ClassDef1 table, and thus falls into Class 0. Kern pairs with Class 0 as the first glyph are ignored in the unpatched version.","This issue is now fixed in the dev branch, but with a different patch that also fixes some other issues in the surrounding GPOS handling code. Closing this PR, fix will land in a release soon.",True,{'THUMBS_UP': ['https://github.com/kawa-yoiko']}
nothings/stb,https://github.com/nothings/stb,1036,2020-10-15T01:39:27Z,2021-07-03T07:52:38Z,2021-07-03T07:52:38Z,CLOSED,False,7,3,2,https://github.com/dfirebaugh,fixing some warnings in stb_image and stb_image_write,1,"['1 stb_image', '1 stb_image_write']",https://github.com/nothings/stb/pull/1036,https://github.com/dfirebaugh,1,https://github.com/nothings/stb/pull/1036,Fixing a few warnings found with gcc CFLAGS -Wall -Werror --pedantic,Fixing a few warnings found with gcc CFLAGS -Wall -Werror --pedantic,True,"{'HEART': ['https://github.com/krox'], 'THUMBS_UP': ['https://github.com/Satoshi-Yoda']}"
nothings/stb,https://github.com/nothings/stb,1036,2020-10-15T01:39:27Z,2021-07-03T07:52:38Z,2021-07-03T07:52:38Z,CLOSED,False,7,3,2,https://github.com/dfirebaugh,fixing some warnings in stb_image and stb_image_write,1,"['1 stb_image', '1 stb_image_write']",https://github.com/nothings/stb/pull/1036,https://github.com/rygorous,2,https://github.com/nothings/stb/pull/1036#issuecomment-873365047,Fixing a few warnings found with gcc CFLAGS -Wall -Werror --pedantic,"All the issues affected by that file are now fixed in the dev branch, albeit somewhat differently, closing this PR.",True,{}
nothings/stb,https://github.com/nothings/stb,1037,2020-10-16T14:26:46Z,,2021-07-11T23:30:19Z,OPEN,False,51,0,1,https://github.com/Cryru,stb_truetype Added a function for getting the default english name of a font,2,"['1 stb_truetype', 'needs significant new work']",https://github.com/nothings/stb/pull/1037,https://github.com/Cryru,1,https://github.com/nothings/stb/pull/1037,,,True,{'THUMBS_UP': ['https://github.com/SoulboundMalady']}
nothings/stb,https://github.com/nothings/stb,1037,2020-10-16T14:26:46Z,,2021-07-11T23:30:19Z,OPEN,False,51,0,1,https://github.com/Cryru,stb_truetype Added a function for getting the default english name of a font,2,"['1 stb_truetype', 'needs significant new work']",https://github.com/nothings/stb/pull/1037,https://github.com/Cryru,2,https://github.com/nothings/stb/pull/1037#issuecomment-710082261,,"stbtt_GetFontNameString is cool and all, but I figure most projects don't want to deal with platformID, languageID, encodings and such. How about we add a function that covers most use cases and just returns the name of the font?",True,{}
nothings/stb,https://github.com/nothings/stb,1037,2020-10-16T14:26:46Z,,2021-07-11T23:30:19Z,OPEN,False,51,0,1,https://github.com/Cryru,stb_truetype Added a function for getting the default english name of a font,2,"['1 stb_truetype', 'needs significant new work']",https://github.com/nothings/stb/pull/1037,https://github.com/Cryru,3,https://github.com/nothings/stb/pull/1037#issuecomment-710086733,,That allocation there is probably a bad idea. Maybe we can allocate it once and store the name in the font struct?,True,{}
nothings/stb,https://github.com/nothings/stb,1037,2020-10-16T14:26:46Z,,2021-07-11T23:30:19Z,OPEN,False,51,0,1,https://github.com/Cryru,stb_truetype Added a function for getting the default english name of a font,2,"['1 stb_truetype', 'needs significant new work']",https://github.com/nothings/stb/pull/1037,https://github.com/nothings,4,https://github.com/nothings/stb/pull/1037#issuecomment-710751801,,"How about we add a function that covers most use cases and just returns the name of the font?


Does this cover most use cases? Do 100% of fonts define this? The lack of information about this is why I didn't implement it in the first place.
Why not implement this new function by calling stbtt_GetFontNameString internally? That is, why iterate the table yourself?",True,{}
nothings/stb,https://github.com/nothings/stb,1037,2020-10-16T14:26:46Z,,2021-07-11T23:30:19Z,OPEN,False,51,0,1,https://github.com/Cryru,stb_truetype Added a function for getting the default english name of a font,2,"['1 stb_truetype', 'needs significant new work']",https://github.com/nothings/stb/pull/1037,https://github.com/Cryru,5,https://github.com/nothings/stb/pull/1037#issuecomment-710776324,,"For sure there are other english encodings (Mac ones?) but I couldn't find any information on them. I've never seen a font without an English full name attribute (4) but there sure could be one.
I would have to call it multiple times with different arguments, it didn't seem right when I could just loop through once.",True,{}
nothings/stb,https://github.com/nothings/stb,1037,2020-10-16T14:26:46Z,,2021-07-11T23:30:19Z,OPEN,False,51,0,1,https://github.com/Cryru,stb_truetype Added a function for getting the default english name of a font,2,"['1 stb_truetype', 'needs significant new work']",https://github.com/nothings/stb/pull/1037,https://github.com/nothings,6,https://github.com/nothings/stb/pull/1037#issuecomment-710779536,,"So the problem with your reply to item 1 is, what is a user of the library supposed to do. ""This probably returns the English name of the font, but it may return NULL, in which case good luck, you'll have to fall back to stbtt_GetFontNameString and write all that code anyway."" doesn't seem like much of an improvement.


Unless you're worried about performance, that doesn't seem like a very good argument. And why worry about performance for a function that's going to be called once per font and probably isn't slow (how big is a typical name table?).",True,{}
nothings/stb,https://github.com/nothings/stb,1037,2020-10-16T14:26:46Z,,2021-07-11T23:30:19Z,OPEN,False,51,0,1,https://github.com/Cryru,stb_truetype Added a function for getting the default english name of a font,2,"['1 stb_truetype', 'needs significant new work']",https://github.com/nothings/stb/pull/1037,https://github.com/Cryru,7,https://github.com/nothings/stb/pull/1037#issuecomment-710782956,,"I think it covers enough cases to be reliable, of course with the vastness of font variations you can never guarantee it will always work. It sure beats having to research platformId, encodingId and such in addition to storing whether the string you got was UTF16-BE (and which combinations of the above arguments result in one) and then using a special function to check for those cases.


That's fair - I'll rework it if we resolve point 1.",True,{}
nothings/stb,https://github.com/nothings/stb,1037,2020-10-16T14:26:46Z,,2021-07-11T23:30:19Z,OPEN,False,51,0,1,https://github.com/Cryru,stb_truetype Added a function for getting the default english name of a font,2,"['1 stb_truetype', 'needs significant new work']",https://github.com/nothings/stb/pull/1037,https://github.com/nothings,8,https://github.com/nothings/stb/pull/1037#issuecomment-710783278,,I guess maybe somebody (not necessarily you) needs to like download 1000 fonts from various sources and check how many it works on. If it's 99% I guess I'm ok with it.,True,{}
nothings/stb,https://github.com/nothings/stb,1037,2020-10-16T14:26:46Z,,2021-07-11T23:30:19Z,OPEN,False,51,0,1,https://github.com/Cryru,stb_truetype Added a function for getting the default english name of a font,2,"['1 stb_truetype', 'needs significant new work']",https://github.com/nothings/stb/pull/1037,https://github.com/Cryru,9,https://github.com/nothings/stb/pull/1037#issuecomment-710783445,,I'm on it,True,{}
nothings/stb,https://github.com/nothings/stb,1037,2020-10-16T14:26:46Z,,2021-07-11T23:30:19Z,OPEN,False,51,0,1,https://github.com/Cryru,stb_truetype Added a function for getting the default english name of a font,2,"['1 stb_truetype', 'needs significant new work']",https://github.com/nothings/stb/pull/1037,https://github.com/nothings,10,https://github.com/nothings/stb/pull/1037#issuecomment-710784738,,"The most important (but tedious) thing is that they come from multiple sources. Not 1000 sources, but ""enough"". Like, my Windows/Fonts directory has 500 ttf files in it, but I wouldn't want to use more than 50-100 of them.",True,{}
nothings/stb,https://github.com/nothings/stb,1037,2020-10-16T14:26:46Z,,2021-07-11T23:30:19Z,OPEN,False,51,0,1,https://github.com/Cryru,stb_truetype Added a function for getting the default english name of a font,2,"['1 stb_truetype', 'needs significant new work']",https://github.com/nothings/stb/pull/1037,https://github.com/Cryru,11,https://github.com/nothings/stb/pull/1037#issuecomment-710786151,,"Right.
Regarding point 2, using stbtt_GetFontNameString might not be best idea as it would take away the ability to cast a wide net on some of the argument pairs. (Such as the various Unicode platformId encodings)",True,{}
nothings/stb,https://github.com/nothings/stb,1037,2020-10-16T14:26:46Z,,2021-07-11T23:30:19Z,OPEN,False,51,0,1,https://github.com/Cryru,stb_truetype Added a function for getting the default english name of a font,2,"['1 stb_truetype', 'needs significant new work']",https://github.com/nothings/stb/pull/1037,https://github.com/Cryru,12,https://github.com/nothings/stb/pull/1037#issuecomment-710793212,,"I tested it against the Google fonts repository (https://github.com/google/fonts) and got a 100% success rate. Here's a list of the fonts tested: https://pastebin.com/j0WgdyFN
That's 3869 fonts.",True,{}
nothings/stb,https://github.com/nothings/stb,1037,2020-10-16T14:26:46Z,,2021-07-11T23:30:19Z,OPEN,False,51,0,1,https://github.com/Cryru,stb_truetype Added a function for getting the default english name of a font,2,"['1 stb_truetype', 'needs significant new work']",https://github.com/nothings/stb/pull/1037,https://github.com/nothings,13,https://github.com/nothings/stb/pull/1037#issuecomment-711038190,,"But that's 3869 fonts from a single source. Even if some of them were authored somewhere else, Google might have a policy about going through and setting an English name field.",True,{}
nothings/stb,https://github.com/nothings/stb,1037,2020-10-16T14:26:46Z,,2021-07-11T23:30:19Z,OPEN,False,51,0,1,https://github.com/Cryru,stb_truetype Added a function for getting the default english name of a font,2,"['1 stb_truetype', 'needs significant new work']",https://github.com/nothings/stb/pull/1037,https://github.com/Cryru,14,https://github.com/nothings/stb/pull/1037#issuecomment-711078539,,"Right, I was just noting. There was a nice variety in encodings and platformIds in that sample size.
I'll look for more sources.
Edit:
I collected and tested 6959 fonts (https://pastebin.com/Na6X97u8) from various sources. Out of them the function failed for 14 fonts (https://pastebin.com/EMNk2Ejf)
These failed due to containing non-English characters in the English name field. Handling multi-byte characters in the UTF8 conversion function would solve that.",True,{}
nothings/stb,https://github.com/nothings/stb,1037,2020-10-16T14:26:46Z,,2021-07-11T23:30:19Z,OPEN,False,51,0,1,https://github.com/Cryru,stb_truetype Added a function for getting the default english name of a font,2,"['1 stb_truetype', 'needs significant new work']",https://github.com/nothings/stb/pull/1037,https://github.com/nothings,15,https://github.com/nothings/stb/pull/1037#issuecomment-855287366,,"These failed due to containing non-English characters in the English name field. Handling multi-byte characters in the UTF8 conversion function would solve that.

Sounds good to me. There's already a function call to compare UTF16 to UTF8 strings which works by converting the UTF16 string to UTF8, so adapting that (rather than using a platform-provided function) should be straightforward.",True,{'THUMBS_UP': ['https://github.com/Cryru']}
nothings/stb,https://github.com/nothings/stb,1037,2020-10-16T14:26:46Z,,2021-07-11T23:30:19Z,OPEN,False,51,0,1,https://github.com/Cryru,stb_truetype Added a function for getting the default english name of a font,2,"['1 stb_truetype', 'needs significant new work']",https://github.com/nothings/stb/pull/1037,https://github.com/Cryru,16,https://github.com/nothings/stb/pull/1037#issuecomment-856579041,,"I tried to standardize the return value of stbtt_GetFontNameDefault by converting the string to UTF8 if it isn't. Though my conversion function doesn't handle all cases.
If we don't want the function to perform the conversion automatically but have the user use the appropriate comparison function we would need to indicate in some way what the format of the returned string is.",True,{}
nothings/stb,https://github.com/nothings/stb,1038,2020-10-18T08:28:26Z,2020-10-18T12:16:39Z,2020-10-18T12:16:39Z,CLOSED,False,2,1,2,https://github.com/akashwebdesigns,hgcgccccg,2,['invalid'],https://github.com/nothings/stb/pull/1038,https://github.com/akashwebdesigns,1,https://github.com/nothings/stb/pull/1038,"Delete this list before clicking CREATE PULL REQUEST
Make sure you're using a special branch just for this pull request. (Sometimes people unknowingly use a default branch, then later update that branch, which updates the pull request with the other changes if it hasn't been merged yet.)
Do NOT update the version number in the file. (This just causes conflicts.)
Do add your name to the list of contributors. (Don't worry about the formatting.) I'll try to remember to add it if you don't, but I sometimes forget as it's an extra step.

If you get something above wrong, don't fret it, it's not the end of the world.","Delete this list before clicking CREATE PULL REQUEST
Make sure you're using a special branch just for this pull request. (Sometimes people unknowingly use a default branch, then later update that branch, which updates the pull request with the other changes if it hasn't been merged yet.)
Do NOT update the version number in the file. (This just causes conflicts.)
Do add your name to the list of contributors. (Don't worry about the formatting.) I'll try to remember to add it if you don't, but I sometimes forget as it's an extra step.

If you get something above wrong, don't fret it, it's not the end of the world.",True,"{'THUMBS_DOWN': ['https://github.com/egorsmkv', 'https://github.com/alxklk']}"
nothings/stb,https://github.com/nothings/stb,1039,2020-10-28T13:14:01Z,2021-07-12T00:25:35Z,2021-07-12T00:25:35Z,CLOSED,False,1,3,1,https://github.com/vlenhart,stb_sprintf.h: stdlib.h is not needed,1,"['1 stb_sprintf', '5 merged-dev']",https://github.com/nothings/stb/pull/1039,https://github.com/vlenhart,1,https://github.com/nothings/stb/pull/1039,"va_arg() is in stdarg.h, which is already being included","va_arg() is in stdarg.h, which is already being included",True,{}
nothings/stb,https://github.com/nothings/stb,1039,2020-10-28T13:14:01Z,2021-07-12T00:25:35Z,2021-07-12T00:25:35Z,CLOSED,False,1,3,1,https://github.com/vlenhart,stb_sprintf.h: stdlib.h is not needed,1,"['1 stb_sprintf', '5 merged-dev']",https://github.com/nothings/stb/pull/1039,https://github.com/nothings,2,https://github.com/nothings/stb/pull/1039#issuecomment-717927089,"va_arg() is in stdarg.h, which is already being included",can you be sure that nothing else in the file needs stdlib.h on all platforms?,True,{}
nothings/stb,https://github.com/nothings/stb,1039,2020-10-28T13:14:01Z,2021-07-12T00:25:35Z,2021-07-12T00:25:35Z,CLOSED,False,1,3,1,https://github.com/vlenhart,stb_sprintf.h: stdlib.h is not needed,1,"['1 stb_sprintf', '5 merged-dev']",https://github.com/nothings/stb/pull/1039,https://github.com/vlenhart,3,https://github.com/nothings/stb/pull/1039#issuecomment-718219298,"va_arg() is in stdarg.h, which is already being included","I'm currently going through all the compilers on https://godbolt.org/
I have not yet found a compiler that had problems compiling without the line.
Do you have any hints on what else I should test?",True,{}
nothings/stb,https://github.com/nothings/stb,1039,2020-10-28T13:14:01Z,2021-07-12T00:25:35Z,2021-07-12T00:25:35Z,CLOSED,False,1,3,1,https://github.com/vlenhart,stb_sprintf.h: stdlib.h is not needed,1,"['1 stb_sprintf', '5 merged-dev']",https://github.com/nothings/stb/pull/1039,https://github.com/nothings,4,https://github.com/nothings/stb/pull/1039#issuecomment-718226349,"va_arg() is in stdarg.h, which is already being included",that'll be fine,True,{}
nothings/stb,https://github.com/nothings/stb,1039,2020-10-28T13:14:01Z,2021-07-12T00:25:35Z,2021-07-12T00:25:35Z,CLOSED,False,1,3,1,https://github.com/vlenhart,stb_sprintf.h: stdlib.h is not needed,1,"['1 stb_sprintf', '5 merged-dev']",https://github.com/nothings/stb/pull/1039,https://github.com/vlenhart,5,https://github.com/nothings/stb/pull/1039#issuecomment-719022066,"va_arg() is in stdarg.h, which is already being included","I could not find any problems related to my change.
My testing strategy was this:

put ""#define STB_SPRINTF_IMPLEMENTATION"" in front of the contents of stb_sprintf.h
apply my change (comment out the include)
compiler using every available compiler
in case of an error check if it is related to the change by undoing it (most of the problems were obviously not related but i did this regardless)

A problem I see with this result is that older compilers are underrepresented.
Here are the details (no comment means compile passes without problems):
C++
ARM GCC
ARM gcc 9.2.1 (none)
ARM gcc 8.3.1 (none)
ARM64 gcc 8.2
ARM gcc 8.2 (WinCE)
ARM gcc 8.2
ARM64 gcc 7.3
ARM gcc 7.3
ARM gcc 7.2.1 (none)
ARM64 gcc 6.4
ARM gcc 6.4
ARM64 gcc 6.3.0 (linux)
ARM gcc 6.3.0 (linux)
ARM gcc 5.4.1 (none)
ARM64 gcc 5.4 (linux)
ARM gcc 5.4 (linux)
ARM gcc 4.6.4 (linux)
ARM gcc 4.5.4 (linux)
AVR GCC
AVR gcc 9.2.0               -> unrelated issues
AVR gcc 5.4.0               -> unrelated issues
AVR gcc 4.6.4               -> unrelated issues
AVR gcc 4.5.4               -> unrelated issues
Arm 32-bit clang
armv7-a clang (trunk)
armv7-a clang 11.0.0
armv7-a clang 10.0.1
armv7-a clang 10.0.0
armv7-a clang 9.0.0
Arm 64-bit clang
armv8-a clang (trunk)
armv8-a clang (trunk, all architectural features)
armv8-a clang 11.0.0
armv8-a clang 10.0.1
armv8-a clang 10.0.0
armv8-a clang 9.0.0
Clang RISC-V
RISC-V rv32gc clang (trunk)
RISC-V rv64gc clang (trunk)               -> unrelated issues
Clang WebAssembly
WebAssembly clang (trunk)
Clang x86-64
x86-64 clang (experimental -Wlifetime)               -> unrelated issues
x86-64 clang (experimental P1144)
x86-64 clang (experimental P1221)
x86-64 clang (experimental auto NSDMI)
x86-64 clang (old concepts branch)
x86-64 clang (std::embed)
x86-64 clang (trunk)
x86-64 clang 11.0.0
x86-64 clang 10.0.1
x86-64 clang 10.0.0
x86-64 clang 9.0.0
x86-64 clang 8.0.0
x86-64 clang 7.0.0
x86-64 clang 6.0.0
x86-64 clang 5.0.0
x86-64 clang 4.0.1
x86-64 clang 4.0.0
x86-64 clang 3.9.1
x86-64 clang 3.9.0
x86-64 clang 3.8.1
x86-64 clang 3.8
x86-64 clang 3.7.1
x86-64 clang 3.7
x86-64 clang 3.6
x86-64 clang 3.5.2
x86-64 clang 3.5.1
x86-64 clang 3.5
x86-64 clang 3.4.1
x86-64 clang 3.3
x86-64 clang 3.2
x86-64 clang 3.1
x86-64 clang 3.0.0
DJGPP x86
x86 djgpp 7.2.0
x86 djgpp 6.4.0
x86 djgpp 5.5.0
x86 djgpp 4.9.4
ELLCC
ellcc 2017-07-16
ellcc 0.1.34
ellcc 0.1.33
GCC x86-64
x86-64 gcc (contracts)
x86-64 gcc (coroutines)
x86-64 gcc (modules)
x86-64 gcc (static analysis)
x86-64 gcc (std::embed)
x86-64 gcc (trunk)
x86-64 gcc 10.2
x86-64 gcc 10.1
x86-64 gcc 9.3
x86-64 gcc 9.2
x86-64 gcc 9.1
x86-64 gcc 8.3
x86-64 gcc 8.2
x86-64 gcc 8.1
x86-64 gcc 7.5
x86-64 gcc 7.4
x86-64 gcc 7.3
x86-64 gcc 7.2
x86-64 gcc 7.1
x86-64 gcc 6.4
x86-64 gcc 6.3
x86-64 gcc 6.2
x86-64 gcc 6.1
x86-64 gcc 5.5
x86-64 gcc 5.4
x86-64 gcc 5.3
x86-64 gcc 5.2
x86-64 gcc 5.1
x86-64 gcc 4.9.4
x86-64 gcc 4.9.3
x86-64 gcc 4.9.2
x86-64 gcc 4.9.1
x86-64 gcc 4.9.0
x86-64 gcc 4.8.5
x86-64 gcc 4.8.4
x86-64 gcc 4.8.3
x86-64 gcc 4.8.2
x86-64 gcc 4.8.1
x86-64 gcc 4.7.4
x86-64 gcc 4.7.3
x86-64 gcc 4.7.2
x86-64 gcc 4.7.1
x86-64 gcc 4.6.4
x86-64 gcc 4.5.3
x86-64 gcc 4.4.7
x86-64 gcc 4.1.2
ICC x86-64
x86-64 icc 21.1.9
x86-64 icc 21.1.8
x86-64 icc 19.0.1
x86-64 icc 19.0.0
x86-64 icc 18.0.0
x86-64 icc 17.0.0
x86-64 icc 16.0.3
x86-64 icc 13.0.1
Kalray MPPA GCC
KVX gcc 7.5 (ACB 4.1.0-cd1)               -> unrelated issues
KVX gcc 7.5 (ACB 4.1.0)               -> unrelated issues
MIPS GCC
MIPS64 gcc 5.4 (el)               -> unrelated issues
MIPS64 gcc 5.4               -> unrelated issues
MIPS gcc 5.4 (el)
MIPS gcc 5.4
MSP GCC
MSP430 gcc 6.2.1               -> unrelated issues
MSP430 gcc 5.3.0               -> unrelated issues
MSP430 gcc 4.5.3               -> unrelated issues
MSVC x64
x64 msvc v19.27
x64 msvc v19.25
x64 msvc v19.24
x64 msvc v19.23
x64 msvc v19.22
x64 msvc v19.21
x64 msvc v19.20
x64 msvc v19.16
x64 msvc v19.15
x64 msvc v19.14
MSVC x86
x86 msvc v19.27
x86 msvc v19.25
x86 msvc v19.24
x86 msvc v19.23
x86 msvc v19.22
x86 msvc v19.21
x86 msvc v19.20
x86 msvc v19.15
x86 msvc v19.14
POWER Compilers
power64 AT12.0
power64 AT13.0
power64le AT12.0
power64le AT13.0
power64le clang (trunk)
powerpc64 clang (trunk)
power64le gcc 6.3.0
PowerPC gcc 4.8.5
Platform Specific Compilers
Raspbian Buster
FRC 2020
Raspbian Stretch
FRC 2019
Arduino Uno (1.8.9)               -> unrelated issues
Arduino Mega (1.8.9)               -> unrelated issues
RISC-V GCC
RISC-V gcc 8.2.0               -> unrelated issues
WINE MSVC 2015
x86 msvc v19.0 (WINE)
x64 msvc v19.0 (WINE)
ARM msvc v19.0 (WINE)               -> unrelated issues
WINE MSVC 2017
x86 msvc v19.10 (WINE)
x64 msvc v19.10 (WINE)
ARM msvc v19.10 (WINE)               -> unrelated issues
WINE MSVC 2017
x86 msvc v19.14 (WINE)
x64 msvc v19.14 (WINE)
ARM64 msvc v19.14 (WINE)               -> unrelated issues
ARM msvc v19.14 (WINE)               -> unrelated issues
zapcc
x86-64 Zapcc 190308
C
GCC x86
x86 gcc 1.27               -> unrelated issues
Kalray MPPA GCC
K1C gcc 7.5               -> unrelated issues
K1C gcc 7.4               -> unrelated issues
POWER Compilers
power64 AT12.0 (gcc8)
power64 AT13.0 (gcc9)
power64le AT12.0 (gcc8)
power64le AT13.0 (gcc9)
SDCC
SDCC 4.0.0               -> unrelated issues
TenDRA x86
x86 tendra (trunk)               -> unrelated issues
cc65
6502 cc65 trunk               -> unrelated issues
6502 cc65 2.17               -> unrelated issues
ppci
ppci 0.5.5               -> unrelated issues",True,{}
nothings/stb,https://github.com/nothings/stb,1039,2020-10-28T13:14:01Z,2021-07-12T00:25:35Z,2021-07-12T00:25:35Z,CLOSED,False,1,3,1,https://github.com/vlenhart,stb_sprintf.h: stdlib.h is not needed,1,"['1 stb_sprintf', '5 merged-dev']",https://github.com/nothings/stb/pull/1039,https://github.com/nothings,6,https://github.com/nothings/stb/pull/1039#issuecomment-719031115,"va_arg() is in stdarg.h, which is already being included","Geez, I'm very sorry you felt it necessary to go to such lengths! FWIW, one or two versions of each compiler would have been plenty!",True,{}
nothings/stb,https://github.com/nothings/stb,1039,2020-10-28T13:14:01Z,2021-07-12T00:25:35Z,2021-07-12T00:25:35Z,CLOSED,False,1,3,1,https://github.com/vlenhart,stb_sprintf.h: stdlib.h is not needed,1,"['1 stb_sprintf', '5 merged-dev']",https://github.com/nothings/stb/pull/1039,https://github.com/vlenhart,7,https://github.com/nothings/stb/pull/1039#issuecomment-719975887,"va_arg() is in stdarg.h, which is already being included","Yes I might have gone a bit overboard on this one, don't worry about it.",True,"{'THUMBS_UP': ['https://github.com/AlbertHu650615', 'https://github.com/nothings']}"
nothings/stb,https://github.com/nothings/stb,1039,2020-10-28T13:14:01Z,2021-07-12T00:25:35Z,2021-07-12T00:25:35Z,CLOSED,False,1,3,1,https://github.com/vlenhart,stb_sprintf.h: stdlib.h is not needed,1,"['1 stb_sprintf', '5 merged-dev']",https://github.com/nothings/stb/pull/1039,https://github.com/rygorous,8,https://github.com/nothings/stb/pull/1039#issuecomment-872616840,"va_arg() is in stdarg.h, which is already being included","Merged into dev branch, will be in the next release.",True,{}
nothings/stb,https://github.com/nothings/stb,1040,2020-11-01T20:21:08Z,2020-11-05T12:59:30Z,2020-11-05T12:59:30Z,CLOSED,False,18,0,1,https://github.com/noah1510,Creating meson.build to allow easy use with meson build system,4,[],https://github.com/nothings/stb/pull/1040,https://github.com/noah1510,1,https://github.com/nothings/stb/pull/1040,"The title says it all.
There is only one new file with 17 lines that probably won't change in the near future.
This file allows developers to easily use stb with the meson build system.","The title says it all.
There is only one new file with 17 lines that probably won't change in the near future.
This file allows developers to easily use stb with the meson build system.",True,{}
nothings/stb,https://github.com/nothings/stb,1040,2020-11-01T20:21:08Z,2020-11-05T12:59:30Z,2020-11-05T12:59:30Z,CLOSED,False,18,0,1,https://github.com/noah1510,Creating meson.build to allow easy use with meson build system,4,[],https://github.com/nothings/stb/pull/1040,https://github.com/nothings,2,https://github.com/nothings/stb/pull/1040#issuecomment-720156207,"The title says it all.
There is only one new file with 17 lines that probably won't change in the near future.
This file allows developers to easily use stb with the meson build system.","There are two obvious problems with this.


I have no idea what the point of this is. What does it accomplish? One of the points of the stb libraries is to not require interaction with the build system at all.


It doesn't scale. There are hundreds of build systems out there. I'm not going to support them all.",True,{}
nothings/stb,https://github.com/nothings/stb,1040,2020-11-01T20:21:08Z,2020-11-05T12:59:30Z,2020-11-05T12:59:30Z,CLOSED,False,18,0,1,https://github.com/noah1510,Creating meson.build to allow easy use with meson build system,4,[],https://github.com/nothings/stb/pull/1040,https://github.com/noah1510,3,https://github.com/nothings/stb/pull/1040#issuecomment-722316466,"The title says it all.
There is only one new file with 17 lines that probably won't change in the near future.
This file allows developers to easily use stb with the meson build system.","I have no idea what the point of this is. What does it accomplish? One of the points of the stb libraries is to not require interaction with the build system at all.

This file removes the need for a subproject if meson is used as build system because the build system will automatically download the repository and include the header files into the project.
This also removes the need to write scripts that copy the header files, some specific compiler flags or simply having very outdated versions of those headers.
The interaction with the build system is very minimal.
All it does is declare that the whole folder should be include and define the dependency that can be included, so this fill will not need to change.

It doesn't scale. There are hundreds of build systems out there. I'm not going to support them all.

I get that and I would agree if the files are larger than this.
The change needed is so small and need basically no maintenance that I personally think the advantages are bigger than the loss.",True,{}
nothings/stb,https://github.com/nothings/stb,1040,2020-11-01T20:21:08Z,2020-11-05T12:59:30Z,2020-11-05T12:59:30Z,CLOSED,False,18,0,1,https://github.com/noah1510,Creating meson.build to allow easy use with meson build system,4,[],https://github.com/nothings/stb/pull/1040,https://github.com/nothings,4,https://github.com/nothings/stb/pull/1040#issuecomment-722362470,"The title says it all.
There is only one new file with 17 lines that probably won't change in the near future.
This file allows developers to easily use stb with the meson build system.","Nope, not interested. Feel free to fork if you want.",True,{'THUMBS_DOWN': ['https://github.com/Tachi107']}
nothings/stb,https://github.com/nothings/stb,1042,2020-11-05T16:51:59Z,2021-07-02T00:09:12Z,2021-07-02T00:09:13Z,CLOSED,False,2,2,1,https://github.com/JoshMarshall756,Fixes #1041,1,"['1 stb library w/no tag', '3 documentation fix']",https://github.com/nothings/stb/pull/1042,https://github.com/JoshMarshall756,1,https://github.com/nothings/stb/pull/1042,"Fixes typos in stb_textedit.h
In the header comments STB_TEXTEDIT_UNDOSTATECOUNT is misspelled as STB_TEXTEDIT_UNDOSTATE_COUNT and STB_TEXTEDIT_UNDOCHARCOUNT is misspelled as STB_UNDOCHAR_COUNT.","Fixes typos in stb_textedit.h
In the header comments STB_TEXTEDIT_UNDOSTATECOUNT is misspelled as STB_TEXTEDIT_UNDOSTATE_COUNT and STB_TEXTEDIT_UNDOCHARCOUNT is misspelled as STB_UNDOCHAR_COUNT.",True,{}
nothings/stb,https://github.com/nothings/stb,1042,2020-11-05T16:51:59Z,2021-07-02T00:09:12Z,2021-07-02T00:09:13Z,CLOSED,False,2,2,1,https://github.com/JoshMarshall756,Fixes #1041,1,"['1 stb library w/no tag', '3 documentation fix']",https://github.com/nothings/stb/pull/1042,https://github.com/rygorous,2,https://github.com/nothings/stb/pull/1042#issuecomment-872623347,"Fixes typos in stb_textedit.h
In the header comments STB_TEXTEDIT_UNDOSTATECOUNT is misspelled as STB_TEXTEDIT_UNDOSTATE_COUNT and STB_TEXTEDIT_UNDOCHARCOUNT is misspelled as STB_UNDOCHAR_COUNT.",Fix is in dev branch and will be in the next release.,True,{}
nothings/stb,https://github.com/nothings/stb,1043,2020-11-05T18:38:16Z,2020-11-05T18:46:56Z,2020-11-05T19:07:30Z,CLOSED,False,3,3,2,https://github.com/JoshMarshall756,Fixes #994,2,[],https://github.com/nothings/stb/pull/1043,https://github.com/JoshMarshall756,1,https://github.com/nothings/stb/pull/1043,Implements the fix in #994 (comment),Implements the fix in #994 (comment),True,{}
nothings/stb,https://github.com/nothings/stb,1043,2020-11-05T18:38:16Z,2020-11-05T18:46:56Z,2020-11-05T19:07:30Z,CLOSED,False,3,3,2,https://github.com/JoshMarshall756,Fixes #994,2,[],https://github.com/nothings/stb/pull/1043,https://github.com/JoshMarshall756,2,https://github.com/nothings/stb/pull/1043#issuecomment-722566722,Implements the fix in #994 (comment),I am not sure if this PR is required but it seemed the bug was still in the source code and I was looking for some small PR's to practice the workflow.,True,{}
nothings/stb,https://github.com/nothings/stb,1044,2020-11-05T19:03:58Z,2021-07-02T00:12:41Z,2021-07-02T00:12:41Z,CLOSED,False,1,1,1,https://github.com/JoshMarshall756,Fixes issue #994,1,['1 stb_image'],https://github.com/nothings/stb/pull/1044,https://github.com/JoshMarshall756,1,https://github.com/nothings/stb/pull/1044,"Uses the fix suggested in the comments.
Made a new pull request because I made a mistake in the previous one by branching from another branch and not master. I didn't know how to fix the previous PR tidily.","Uses the fix suggested in the comments.
Made a new pull request because I made a mistake in the previous one by branching from another branch and not master. I didn't know how to fix the previous PR tidily.",True,{}
nothings/stb,https://github.com/nothings/stb,1044,2020-11-05T19:03:58Z,2021-07-02T00:12:41Z,2021-07-02T00:12:41Z,CLOSED,False,1,1,1,https://github.com/JoshMarshall756,Fixes issue #994,1,['1 stb_image'],https://github.com/nothings/stb/pull/1044,https://github.com/rygorous,2,https://github.com/nothings/stb/pull/1044#issuecomment-872624580,"Uses the fix suggested in the comments.
Made a new pull request because I made a mistake in the previous one by branching from another branch and not master. I didn't know how to fix the previous PR tidily.","Fix is pushed in dev branch, will be in the next release.",True,{}
nothings/stb,https://github.com/nothings/stb,1045,2020-11-06T19:49:13Z,2021-07-03T07:50:10Z,2021-07-03T07:50:10Z,CLOSED,False,1,1,1,https://github.com/stolk,Fix comparison of different signs.,1,['1 stb_image'],https://github.com/nothings/stb/pull/1045,https://github.com/stolk,1,https://github.com/nothings/stb/pull/1045,"Addresses a compiler warning on comparing integers of different signs:
/home/bram/src/stb/stb_image.h:4123:10: warning: comparison of integers of different signs: 'int' and 'unsigned long' [-Wsign-compare]
   if (b >= sizeof (z->size)) return -1; // some data was corrupt somewhere!","Addresses a compiler warning on comparing integers of different signs:
/home/bram/src/stb/stb_image.h:4123:10: warning: comparison of integers of different signs: 'int' and 'unsigned long' [-Wsign-compare]
   if (b >= sizeof (z->size)) return -1; // some data was corrupt somewhere!",True,{}
nothings/stb,https://github.com/nothings/stb,1045,2020-11-06T19:49:13Z,2021-07-03T07:50:10Z,2021-07-03T07:50:10Z,CLOSED,False,1,1,1,https://github.com/stolk,Fix comparison of different signs.,1,['1 stb_image'],https://github.com/nothings/stb/pull/1045,https://github.com/rygorous,2,https://github.com/nothings/stb/pull/1045#issuecomment-873364756,"Addresses a compiler warning on comparing integers of different signs:
/home/bram/src/stb/stb_image.h:4123:10: warning: comparison of integers of different signs: 'int' and 'unsigned long' [-Wsign-compare]
   if (b >= sizeof (z->size)) return -1; // some data was corrupt somewhere!","A different fix for this is now in the dev branch and will be in the next version, closing this PR.",True,{}
nothings/stb,https://github.com/nothings/stb,1048,2020-11-15T06:00:42Z,2021-07-03T07:56:48Z,2021-07-03T07:56:48Z,CLOSED,False,2,2,1,https://github.com/jeannekamikaze,Fix warnings under -Wall -Wextra -Wpedantic.,1,['1 stb_image'],https://github.com/nothings/stb/pull/1048,https://github.com/jeannekamikaze,1,https://github.com/nothings/stb/pull/1048,,,True,{}
nothings/stb,https://github.com/nothings/stb,1048,2020-11-15T06:00:42Z,2021-07-03T07:56:48Z,2021-07-03T07:56:48Z,CLOSED,False,2,2,1,https://github.com/jeannekamikaze,Fix warnings under -Wall -Wextra -Wpedantic.,1,['1 stb_image'],https://github.com/nothings/stb/pull/1048,https://github.com/rygorous,2,https://github.com/nothings/stb/pull/1048#issuecomment-873365556,,"The second fix (size check) is present in the dev branch (albeit in a different way), the first fix causes warnings on other compilers, closing this PR; if you continue to have a problem with the realloc_sized warning after the recent batch of fixes is released (it should be fixed now anyway but I don't know what compiler/target to test since you didn't say) feel free to open an issue and we'll work it out.",True,{}
nothings/stb,https://github.com/nothings/stb,1050,2020-11-19T15:07:54Z,2021-07-12T00:25:30Z,2021-07-12T00:25:30Z,CLOSED,False,48,23,1,https://github.com/Xipiryon,stb_textedit: Support for Page Up/Down,1,"['1 stb library w/no tag', '5 merged-dev']",https://github.com/nothings/stb/pull/1050,https://github.com/Xipiryon,1,https://github.com/nothings/stb/pull/1050,I've made some changes in stb_textedit to support Page Up/Down from Dear ImGui (ocornut/imgui@ec945f44),I've made some changes in stb_textedit to support Page Up/Down from Dear ImGui (ocornut/imgui@ec945f44),True,{}
nothings/stb,https://github.com/nothings/stb,1050,2020-11-19T15:07:54Z,2021-07-12T00:25:30Z,2021-07-12T00:25:30Z,CLOSED,False,48,23,1,https://github.com/Xipiryon,stb_textedit: Support for Page Up/Down,1,"['1 stb library w/no tag', '5 merged-dev']",https://github.com/nothings/stb/pull/1050,https://github.com/Xipiryon,2,https://github.com/nothings/stb/pull/1050#issuecomment-753980163,I've made some changes in stb_textedit to support Page Up/Down from Dear ImGui (ocornut/imgui@ec945f44),"Just a bit of additional info: this code was tested in the ImGui internal tests suite project (there is a unit test for it) on a resizeable text input widget, by simply moving around the cursor, with and without being in selection mode, from start/middle/end of line/document.",True,{}
nothings/stb,https://github.com/nothings/stb,1050,2020-11-19T15:07:54Z,2021-07-12T00:25:30Z,2021-07-12T00:25:30Z,CLOSED,False,48,23,1,https://github.com/Xipiryon,stb_textedit: Support for Page Up/Down,1,"['1 stb library w/no tag', '5 merged-dev']",https://github.com/nothings/stb/pull/1050,https://github.com/ocornut,3,https://github.com/nothings/stb/pull/1050#issuecomment-758700187,I've made some changes in stb_textedit to support Page Up/Down from Dear ImGui (ocornut/imgui@ec945f44),"About the tests mentioned above: while it's not something you can repro with raw stb_textedit we ought to mention they existed as it might increase confidence in the validity of this PR.
And we shipped with PageUp/PageDown in the multi-line inputs in early October with no issue reported since.
Here's a GIF and Log of aforementioned test (written by Xipiryon above)

[0000] -- WindowRef 'Test Window' 00000000
[0001] -- ItemInput 'Field' > 00000000
[0024] OK imgui_tests_widgets.cpp:886 'state != NULL'
[0024] -- KeyPressMap(UpArrow, 1)
[0027] OK imgui_tests_widgets.cpp:915 'stb.cursor [0] == 0 [0]'
[0027] -- KeyPressMap(LeftArrow, 1)
[0030] OK imgui_tests_widgets.cpp:917 'stb.cursor [0] == 0 [0]'
[0030] -- KeyPressMap(DownArrow, 1)
[0033] OK imgui_tests_widgets.cpp:919 'stb.cursor [10] == char_count_per_line [10]'
[0033] -- KeyPressMap(RightArrow, 1)
[0036] OK imgui_tests_widgets.cpp:921 'stb.cursor [1] == 1 [1]'
[0036] -- KeyPressMap(UpArrow, 1)
[0039] OK imgui_tests_widgets.cpp:925 'stb.cursor [9] == cursor_pos_end_of_first_line [9]'
[0039] -- KeyPressMap(LeftArrow, 1)
[0042] OK imgui_tests_widgets.cpp:927 'stb.cursor [8] == cursor_pos_end_of_first_line - 1 [8]'
[0042] -- KeyPressMap(DownArrow, 1)
[0045] OK imgui_tests_widgets.cpp:929 'stb.cursor [19] == cursor_pos_end_of_first_line + char_count_per_line [19]'
[0045] -- KeyPressMap(RightArrow, 1)
[0048] OK imgui_tests_widgets.cpp:931 'stb.cursor [10] == cursor_pos_end_of_first_line + 1 [10]'
[0048] -- KeyPressMap(UpArrow, 1)
[0051] OK imgui_tests_widgets.cpp:935 'stb.cursor [80] == cursor_pos_begin_of_last_line - char_count_per_line [80]'
[0051] -- KeyPressMap(LeftArrow, 1)
[0054] OK imgui_tests_widgets.cpp:937 'stb.cursor [89] == cursor_pos_begin_of_last_line - 1 [89]'
[0054] -- KeyPressMap(DownArrow, 1)
[0057] OK imgui_tests_widgets.cpp:939 'stb.cursor [90] == has_trailing_line_feed ? eof : cursor_pos_begin_of_last_line [90]'
[0057] -- KeyPressMap(RightArrow, 1)
[0060] OK imgui_tests_widgets.cpp:941 'stb.cursor [91] == cursor_pos_begin_of_last_line + 1 [91]'
[0060] -- KeyPressMap(UpArrow, 1)
[0063] -- KeyPressMap(LeftArrow, 1)
[0066] OK imgui_tests_widgets.cpp:947 'stb.cursor [98] == cursor_pos_end_of_last_line - 1 [98]'
[0066] -- KeyPressMap(DownArrow, 1)
[0069] OK imgui_tests_widgets.cpp:949 'stb.cursor [99] == has_trailing_line_feed ? eof : cursor_pos_end_of_last_line [99]'
[0069] -- KeyPressMap(RightArrow, 1)
[0072] OK imgui_tests_widgets.cpp:951 'stb.cursor [99] == cursor_pos_end_of_last_line + (has_trailing_line_feed ? 1 : 0) [99]'
[0072] -- KeyPressMap(UpArrow, 1)
[0075] OK imgui_tests_widgets.cpp:955 'stb.cursor [39] == cursor_pos_middle - char_count_per_line [39]'
[0075] -- KeyPressMap(LeftArrow, 1)
[0078] OK imgui_tests_widgets.cpp:957 'stb.cursor [48] == cursor_pos_middle - 1 [48]'
[0078] -- KeyPressMap(DownArrow, 1)
[0081] OK imgui_tests_widgets.cpp:959 'stb.cursor [59] == cursor_pos_middle + char_count_per_line [59]'
[0081] -- KeyPressMap(RightArrow, 1)
[0084] OK imgui_tests_widgets.cpp:961 'stb.cursor [50] == cursor_pos_middle + 1 [50]'
[0084] -- KeyPressMap(Home, 1)
[0087] OK imgui_tests_widgets.cpp:965 'stb.cursor [40] == ((vars.LineCount / 2) - 1) * char_count_per_line [40]'
[0087] -- KeyPressMap(End, 1)
[0090] OK imgui_tests_widgets.cpp:967 'stb.cursor [49] == (vars.LineCount / 2) * char_count_per_line - 1 [49]'
[0090] -- KeyPressMap(Ctrl+Home, 1)
[0093] OK imgui_tests_widgets.cpp:971 'stb.cursor [0] == 0 [0]'
[0093] -- KeyPressMap(Ctrl+End, 1)
[0096] OK imgui_tests_widgets.cpp:973 'stb.cursor [99] == cursor_pos_end_of_last_line + (has_trailing_line_feed ? 1 : 0) [99]'
[0096] -- KeyPressMap(PageDown, 1)
[0099] OK imgui_tests_widgets.cpp:977 'stb.cursor [40] == cursor_pos_begin_of_first_line + char_count_per_line * page_size [40]'
[0099] -- KeyPressMap(PageUp, 1)
[0102] OK imgui_tests_widgets.cpp:979 'stb.cursor [0] == cursor_pos_begin_of_first_line [0]'
[0102] -- KeyPressMap(PageDown, 1)
[0105] OK imgui_tests_widgets.cpp:983 'stb.cursor [45] == cursor_pos_middle_of_first_line + char_count_per_line * page_size [45]'
[0105] -- KeyPressMap(PageDown, 1)
[0108] OK imgui_tests_widgets.cpp:985 'stb.cursor [85] == cursor_pos_middle_of_first_line + char_count_per_line * page_size * 2 [85]'
[0108] -- KeyPressMap(PageDown, 1)
[0111] OK imgui_tests_widgets.cpp:987 'stb.cursor [95] == has_trailing_line_feed ? eof : eof - (char_count_per_line / 2) + 1 [95]'
[0111] -- KeyPressMap(PageUp, 1)
[0114] OK imgui_tests_widgets.cpp:993 'stb.cursor [55] == cursor_pos_begin_current_line - (page_size * char_count_per_line) + (char_count_per_line / 2) [55]'
[0114] -- KeyCharsAppend('
')
[0121] -- KeyPressMap(UpArrow, 1)
[0124] OK imgui_tests_widgets.cpp:915 'stb.cursor [0] == 0 [0]'
[0124] -- KeyPressMap(LeftArrow, 1)
[0127] OK imgui_tests_widgets.cpp:917 'stb.cursor [0] == 0 [0]'
[0127] -- KeyPressMap(DownArrow, 1)
[0130] OK imgui_tests_widgets.cpp:919 'stb.cursor [10] == char_count_per_line [10]'
[0130] -- KeyPressMap(RightArrow, 1)
[0133] OK imgui_tests_widgets.cpp:921 'stb.cursor [1] == 1 [1]'
[0133] -- KeyPressMap(UpArrow, 1)
[0136] OK imgui_tests_widgets.cpp:925 'stb.cursor [9] == cursor_pos_end_of_first_line [9]'
[0136] -- KeyPressMap(LeftArrow, 1)
[0139] OK imgui_tests_widgets.cpp:927 'stb.cursor [8] == cursor_pos_end_of_first_line - 1 [8]'
[0139] -- KeyPressMap(DownArrow, 1)
[0142] OK imgui_tests_widgets.cpp:929 'stb.cursor [19] == cursor_pos_end_of_first_line + char_count_per_line [19]'
[0142] -- KeyPressMap(RightArrow, 1)
[0145] OK imgui_tests_widgets.cpp:931 'stb.cursor [10] == cursor_pos_end_of_first_line + 1 [10]'
[0145] -- KeyPressMap(UpArrow, 1)
[0148] OK imgui_tests_widgets.cpp:935 'stb.cursor [80] == cursor_pos_begin_of_last_line - char_count_per_line [80]'
[0148] -- KeyPressMap(LeftArrow, 1)
[0151] OK imgui_tests_widgets.cpp:937 'stb.cursor [89] == cursor_pos_begin_of_last_line - 1 [89]'
[0151] -- KeyPressMap(DownArrow, 1)
[0154] OK imgui_tests_widgets.cpp:939 'stb.cursor [100] == has_trailing_line_feed ? eof : cursor_pos_begin_of_last_line [100]'
[0154] -- KeyPressMap(RightArrow, 1)
[0157] OK imgui_tests_widgets.cpp:941 'stb.cursor [91] == cursor_pos_begin_of_last_line + 1 [91]'
[0157] -- KeyPressMap(UpArrow, 1)
[0160] -- KeyPressMap(LeftArrow, 1)
[0163] OK imgui_tests_widgets.cpp:947 'stb.cursor [98] == cursor_pos_end_of_last_line - 1 [98]'
[0163] -- KeyPressMap(DownArrow, 1)
[0166] OK imgui_tests_widgets.cpp:949 'stb.cursor [100] == has_trailing_line_feed ? eof : cursor_pos_end_of_last_line [100]'
[0166] -- KeyPressMap(RightArrow, 1)
[0169] OK imgui_tests_widgets.cpp:951 'stb.cursor [100] == cursor_pos_end_of_last_line + (has_trailing_line_feed ? 1 : 0) [100]'
[0169] -- KeyPressMap(UpArrow, 1)
[0172] OK imgui_tests_widgets.cpp:955 'stb.cursor [39] == cursor_pos_middle - char_count_per_line [39]'
[0172] -- KeyPressMap(LeftArrow, 1)
[0175] OK imgui_tests_widgets.cpp:957 'stb.cursor [48] == cursor_pos_middle - 1 [48]'
[0175] -- KeyPressMap(DownArrow, 1)
[0178] OK imgui_tests_widgets.cpp:959 'stb.cursor [59] == cursor_pos_middle + char_count_per_line [59]'
[0178] -- KeyPressMap(RightArrow, 1)
[0181] OK imgui_tests_widgets.cpp:961 'stb.cursor [50] == cursor_pos_middle + 1 [50]'
[0181] -- KeyPressMap(Home, 1)
[0184] OK imgui_tests_widgets.cpp:965 'stb.cursor [40] == ((vars.LineCount / 2) - 1) * char_count_per_line [40]'
[0184] -- KeyPressMap(End, 1)
[0187] OK imgui_tests_widgets.cpp:967 'stb.cursor [49] == (vars.LineCount / 2) * char_count_per_line - 1 [49]'
[0187] -- KeyPressMap(Ctrl+Home, 1)
[0190] OK imgui_tests_widgets.cpp:971 'stb.cursor [0] == 0 [0]'
[0190] -- KeyPressMap(Ctrl+End, 1)
[0193] OK imgui_tests_widgets.cpp:973 'stb.cursor [100] == cursor_pos_end_of_last_line + (has_trailing_line_feed ? 1 : 0) [100]'
[0193] -- KeyPressMap(PageDown, 1)
[0196] OK imgui_tests_widgets.cpp:977 'stb.cursor [40] == cursor_pos_begin_of_first_line + char_count_per_line * page_size [40]'
[0196] -- KeyPressMap(PageUp, 1)
[0199] OK imgui_tests_widgets.cpp:979 'stb.cursor [0] == cursor_pos_begin_of_first_line [0]'
[0199] -- KeyPressMap(PageDown, 1)
[0202] OK imgui_tests_widgets.cpp:983 'stb.cursor [45] == cursor_pos_middle_of_first_line + char_count_per_line * page_size [45]'
[0202] -- KeyPressMap(PageDown, 1)
[0205] OK imgui_tests_widgets.cpp:985 'stb.cursor [85] == cursor_pos_middle_of_first_line + char_count_per_line * page_size * 2 [85]'
[0205] -- KeyPressMap(PageDown, 1)
[0208] OK imgui_tests_widgets.cpp:987 'stb.cursor [100] == has_trailing_line_feed ? eof : eof - (char_count_per_line / 2) + 1 [100]'
[0208] -- KeyPressMap(PageUp, 1)
[0211] OK imgui_tests_widgets.cpp:993 'stb.cursor [65] == cursor_pos_begin_current_line - (page_size * char_count_per_line) + (char_count_per_line / 2) [65]'
[0229] Success.",True,{}
nothings/stb,https://github.com/nothings/stb,1050,2020-11-19T15:07:54Z,2021-07-12T00:25:30Z,2021-07-12T00:25:30Z,CLOSED,False,48,23,1,https://github.com/Xipiryon,stb_textedit: Support for Page Up/Down,1,"['1 stb library w/no tag', '5 merged-dev']",https://github.com/nothings/stb/pull/1050,https://github.com/nothings,4,https://github.com/nothings/stb/pull/1050#issuecomment-758702309,I've made some changes in stb_textedit to support Page Up/Down from Dear ImGui (ocornut/imgui@ec945f44),"thanks for clarification.
I've just gotten even slower at processing PRs since covid, and I was already slow.",True,{}
nothings/stb,https://github.com/nothings/stb,1050,2020-11-19T15:07:54Z,2021-07-12T00:25:30Z,2021-07-12T00:25:30Z,CLOSED,False,48,23,1,https://github.com/Xipiryon,stb_textedit: Support for Page Up/Down,1,"['1 stb library w/no tag', '5 merged-dev']",https://github.com/nothings/stb/pull/1050,https://github.com/ocornut,5,https://github.com/nothings/stb/pull/1050#issuecomment-758728719,I've made some changes in stb_textedit to support Page Up/Down from Dear ImGui (ocornut/imgui@ec945f44),"Absolutely no peer pressure on our side, we've been happily running with a few patches for a while and it's not an issue here.
We just felt that adding the extra clarification may be beneficial for the day you can look at them.
Thank you as always <3",True,"{'THUMBS_UP': ['https://github.com/nothings', 'https://github.com/falkTX']}"
nothings/stb,https://github.com/nothings/stb,1050,2020-11-19T15:07:54Z,2021-07-12T00:25:30Z,2021-07-12T00:25:30Z,CLOSED,False,48,23,1,https://github.com/Xipiryon,stb_textedit: Support for Page Up/Down,1,"['1 stb library w/no tag', '5 merged-dev']",https://github.com/nothings/stb/pull/1050,https://github.com/rygorous,6,https://github.com/nothings/stb/pull/1050#issuecomment-875244863,I've made some changes in stb_textedit to support Page Up/Down from Dear ImGui (ocornut/imgui@ec945f44),LGTM. This is now merged into the dev branch and will be in the next release.,True,{'HOORAY': ['https://github.com/ocornut']}
nothings/stb,https://github.com/nothings/stb,1052,2020-11-25T07:48:26Z,2021-07-12T00:25:25Z,2021-07-12T00:25:25Z,CLOSED,False,3,0,1,https://github.com/dthadi3,Travis-ci: added support for ppc64le,1,['5 merged-dev'],https://github.com/nothings/stb/pull/1052,https://github.com/dthadi3,1,https://github.com/nothings/stb/pull/1052,Added power support for the travis.yml file with ppc64le. This is part of the Ubuntu distribution for ppc64le. This helps us simplify testing later when distributions are re-building and re-releasing.,Added power support for the travis.yml file with ppc64le. This is part of the Ubuntu distribution for ppc64le. This helps us simplify testing later when distributions are re-building and re-releasing.,True,{'EYES': ['https://github.com/dthadi3']}
nothings/stb,https://github.com/nothings/stb,1052,2020-11-25T07:48:26Z,2021-07-12T00:25:25Z,2021-07-12T00:25:25Z,CLOSED,False,3,0,1,https://github.com/dthadi3,Travis-ci: added support for ppc64le,1,['5 merged-dev'],https://github.com/nothings/stb/pull/1052,https://github.com/rygorous,2,https://github.com/nothings/stb/pull/1052#issuecomment-875274159,Added power support for the travis.yml file with ppc64le. This is part of the Ubuntu distribution for ppc64le. This helps us simplify testing later when distributions are re-building and re-releasing.,"Merged into the dev branch, will become live with the next release.",True,{}
nothings/stb,https://github.com/nothings/stb,1053,2020-11-26T08:04:57Z,2021-07-12T00:25:22Z,2021-07-12T00:25:22Z,CLOSED,False,6,2,7,https://github.com/randy408,ossfuzz: improve code coverage,1,['5 merged-dev'],https://github.com/nothings/stb/pull/1053,https://github.com/randy408,1,https://github.com/nothings/stb/pull/1053,"fix .gif pattern matching in ossfuzz.sh
add netpbm test images derived from the public domain pngsuite
added more image types (downloaded in Dockerfile)","fix .gif pattern matching in ossfuzz.sh
add netpbm test images derived from the public domain pngsuite
added more image types (downloaded in Dockerfile)",True,{}
nothings/stb,https://github.com/nothings/stb,1053,2020-11-26T08:04:57Z,2021-07-12T00:25:22Z,2021-07-12T00:25:22Z,CLOSED,False,6,2,7,https://github.com/randy408,ossfuzz: improve code coverage,1,['5 merged-dev'],https://github.com/nothings/stb/pull/1053,https://github.com/rygorous,2,https://github.com/nothings/stb/pull/1053#issuecomment-875275947,"fix .gif pattern matching in ossfuzz.sh
add netpbm test images derived from the public domain pngsuite
added more image types (downloaded in Dockerfile)","Merged into dev branch, should go live later this week.",True,{}
nothings/stb,https://github.com/nothings/stb,1054,2020-12-10T03:44:07Z,2021-06-05T19:38:41Z,2021-06-05T19:38:41Z,CLOSED,False,11,10,1,https://github.com/samhattangady,fix C4456 warning,1,[],https://github.com/nothings/stb/pull/1054,https://github.com/samhattangady,1,https://github.com/nothings/stb/pull/1054,"When I was compiling my program with level 4 warnings I saw this error:
...\stb_ds.h(1422): warning C4456: declaration of 'i' hides previous local declaration
...\stb_ds.h(1362): note: see declaration of 'i'
Link on Microsoft Docs
https://docs.microsoft.com/en-us/cpp/error-messages/compiler-warnings/compiler-warning-level-4-c4456?view=msvc-160
To fix this, I have renamed the variable from i to j in the scope.
Thanks.","When I was compiling my program with level 4 warnings I saw this error:
...\stb_ds.h(1422): warning C4456: declaration of 'i' hides previous local declaration
...\stb_ds.h(1362): note: see declaration of 'i'
Link on Microsoft Docs
https://docs.microsoft.com/en-us/cpp/error-messages/compiler-warnings/compiler-warning-level-4-c4456?view=msvc-160
To fix this, I have renamed the variable from i to j in the scope.
Thanks.",True,{}
nothings/stb,https://github.com/nothings/stb,1054,2020-12-10T03:44:07Z,2021-06-05T19:38:41Z,2021-06-05T19:38:41Z,CLOSED,False,11,10,1,https://github.com/samhattangady,fix C4456 warning,1,[],https://github.com/nothings/stb/pull/1054,https://github.com/nothings,2,https://github.com/nothings/stb/pull/1054#issuecomment-855286130,"When I was compiling my program with level 4 warnings I saw this error:
...\stb_ds.h(1422): warning C4456: declaration of 'i' hides previous local declaration
...\stb_ds.h(1362): note: see declaration of 'i'
Link on Microsoft Docs
https://docs.microsoft.com/en-us/cpp/error-messages/compiler-warnings/compiler-warning-level-4-c4456?view=msvc-160
To fix this, I have renamed the variable from i to j in the scope.
Thanks.",thank you for your submission. i fixed this in a different way which was a smaller change (but hopefully still fixes it),True,{}
nothings/stb,https://github.com/nothings/stb,1058,2020-12-14T12:34:34Z,2021-07-12T00:25:19Z,2021-07-12T00:25:19Z,CLOSED,False,23,0,1,https://github.com/randy408,oss-fuzz: integrate with CIFuzz,1,['5 merged-dev'],https://github.com/nothings/stb/pull/1058,https://github.com/randy408,1,https://github.com/nothings/stb/pull/1058,"This adds a GitHub Action to PR's to verify code changes do not introduce new bugs or cause the OSS-Fuzz build to break.
For more info: https://google.github.io/oss-fuzz/getting-started/continuous-integration/","This adds a GitHub Action to PR's to verify code changes do not introduce new bugs or cause the OSS-Fuzz build to break.
For more info: https://google.github.io/oss-fuzz/getting-started/continuous-integration/",True,{'HEART': ['https://github.com/ell1e']}
nothings/stb,https://github.com/nothings/stb,1058,2020-12-14T12:34:34Z,2021-07-12T00:25:19Z,2021-07-12T00:25:19Z,CLOSED,False,23,0,1,https://github.com/randy408,oss-fuzz: integrate with CIFuzz,1,['5 merged-dev'],https://github.com/nothings/stb/pull/1058,https://github.com/rygorous,2,https://github.com/nothings/stb/pull/1058#issuecomment-875274729,"This adds a GitHub Action to PR's to verify code changes do not introduce new bugs or cause the OSS-Fuzz build to break.
For more info: https://google.github.io/oss-fuzz/getting-started/continuous-integration/","Merged into dev branch, will go live when we next do a release. (Should be in a few days.)",True,{}
nothings/stb,https://github.com/nothings/stb,1058,2020-12-14T12:34:34Z,2021-07-12T00:25:19Z,2021-07-12T00:25:19Z,CLOSED,False,23,0,1,https://github.com/randy408,oss-fuzz: integrate with CIFuzz,1,['5 merged-dev'],https://github.com/nothings/stb/pull/1058,https://github.com/rygorous,3,https://github.com/nothings/stb/pull/1058#issuecomment-877541210,"This adds a GitHub Action to PR's to verify code changes do not introduce new bugs or cause the OSS-Fuzz build to break.
For more info: https://google.github.io/oss-fuzz/getting-started/continuous-integration/","This does not currently work, see https://github.com/nothings/stb/pull/1161/checks?check_run_id=3028530474.
The tar xvzf $SRC/stb/jpg.tar.gz fails even though the earlier wget seems to have completed successfully. It looks like $SRC is not set to anything which seems wrong. This looks to be a configuration issue but I have no idea how the Docker containers here are meant to be configured in the first place, whether SRC is supposed to get set to anything, and what sets it if so, and the docs for oss-fuzz I can find don't seem to explain this either.
Can you have a look, randy?",True,{}
nothings/stb,https://github.com/nothings/stb,1058,2020-12-14T12:34:34Z,2021-07-12T00:25:19Z,2021-07-12T00:25:19Z,CLOSED,False,23,0,1,https://github.com/randy408,oss-fuzz: integrate with CIFuzz,1,['5 merged-dev'],https://github.com/nothings/stb/pull/1058,https://github.com/randy408,4,https://github.com/nothings/stb/pull/1058#issuecomment-877648132,"This adds a GitHub Action to PR's to verify code changes do not introduce new bugs or cause the OSS-Fuzz build to break.
For more info: https://google.github.io/oss-fuzz/getting-started/continuous-integration/","This does not currently work, see https://github.com/nothings/stb/pull/1161/checks?check_run_id=3028530474.
The tar xvzf $SRC/stb/jpg.tar.gz fails even though the earlier wget seems to have completed successfully. It looks like $SRC is not set to anything which seems wrong. This looks to be a configuration issue but I have no idea how the Docker containers here are meant to be configured in the first place, whether SRC is supposed to get set to anything, and what sets it if so, and the docs for oss-fuzz I can find don't seem to explain this either.
Can you have a look, randy?

CIFuzz is overwriting $SRC/stb, I have a fix which involves changes to the Dockerfile in the oss-fuzz repo and the build script here, it would fix CIFuzz checks but break OSS-Fuzz builds which pulls from master, should I point the Dockerfile to the dev branch temporarily?",True,{}
nothings/stb,https://github.com/nothings/stb,1058,2020-12-14T12:34:34Z,2021-07-12T00:25:19Z,2021-07-12T00:25:19Z,CLOSED,False,23,0,1,https://github.com/randy408,oss-fuzz: integrate with CIFuzz,1,['5 merged-dev'],https://github.com/nothings/stb/pull/1058,https://github.com/rygorous,5,https://github.com/nothings/stb/pull/1058#issuecomment-877736188,"This adds a GitHub Action to PR's to verify code changes do not introduce new bugs or cause the OSS-Fuzz build to break.
For more info: https://google.github.io/oss-fuzz/getting-started/continuous-integration/","Is this going to be required for CIFuzz from any branches to work, or is this just a temporary thing while the integration isn't merged to master yet?
If it's the former, a solution would be desirable, if it's just until the current staged changes from dev land in master when we next cut a release (due soon), don't worry about it.",True,{}
nothings/stb,https://github.com/nothings/stb,1064,2020-12-16T23:26:38Z,2021-07-02T13:57:20Z,2021-07-02T13:58:00Z,MERGED,True,7,2,1,https://github.com/anthofoxo,Fixed vorbis files with no comments emitting outofmemory error,4,['1 stb_vorbis'],https://github.com/nothings/stb/pull/1064,https://github.com/anthofoxo,1,https://github.com/nothings/stb/pull/1064,,,True,{}
nothings/stb,https://github.com/nothings/stb,1064,2020-12-16T23:26:38Z,2021-07-02T13:57:20Z,2021-07-02T13:58:00Z,MERGED,True,7,2,1,https://github.com/anthofoxo,Fixed vorbis files with no comments emitting outofmemory error,4,['1 stb_vorbis'],https://github.com/nothings/stb/pull/1064,https://github.com/nothings,2,https://github.com/nothings/stb/pull/1064#issuecomment-747164684,,"This appears to be the same issue as #1005, but a very different fix. I'd like to know whether this actually addresses all the cases that fix does, since this is much simpler.",True,{}
nothings/stb,https://github.com/nothings/stb,1064,2020-12-16T23:26:38Z,2021-07-02T13:57:20Z,2021-07-02T13:58:00Z,MERGED,True,7,2,1,https://github.com/anthofoxo,Fixed vorbis files with no comments emitting outofmemory error,4,['1 stb_vorbis'],https://github.com/nothings/stb/pull/1064,https://github.com/anthofoxo,3,https://github.com/nothings/stb/pull/1064#issuecomment-747842741,,"I am unsure if it covers all cases, but in the case of me streaming audio it does.",True,{}
nothings/stb,https://github.com/nothings/stb,1064,2020-12-16T23:26:38Z,2021-07-02T13:57:20Z,2021-07-02T13:58:00Z,MERGED,True,7,2,1,https://github.com/anthofoxo,Fixed vorbis files with no comments emitting outofmemory error,4,['1 stb_vorbis'],https://github.com/nothings/stb/pull/1064,https://github.com/sagamusix,4,https://github.com/nothings/stb/pull/1064#issuecomment-761113687,,I arrived at the same conclusion as this PR and would say that it's more elegant than the one in the other PR.,True,{}
nothings/stb,https://github.com/nothings/stb,1064,2020-12-16T23:26:38Z,2021-07-02T13:57:20Z,2021-07-02T13:58:00Z,MERGED,True,7,2,1,https://github.com/anthofoxo,Fixed vorbis files with no comments emitting outofmemory error,4,['1 stb_vorbis'],https://github.com/nothings/stb/pull/1064,https://github.com/anthofoxo,5,https://github.com/nothings/stb/pull/1064#issuecomment-767212196,,I added a small commit to my branch will will guard the call to setup_malloc as suggested by @bsdunx in #1063 (my old thread),True,{}
nothings/stb,https://github.com/nothings/stb,1064,2020-12-16T23:26:38Z,2021-07-02T13:57:20Z,2021-07-02T13:58:00Z,MERGED,True,7,2,1,https://github.com/anthofoxo,Fixed vorbis files with no comments emitting outofmemory error,4,['1 stb_vorbis'],https://github.com/nothings/stb/pull/1064,https://github.com/DanielGibson,6,https://github.com/nothings/stb/pull/1064#issuecomment-814633707,,for this to work the if (f->comment_list == NULL)  return error(..) needs to be guarded by if (f->comment_list_length > 0) as well.,True,{}
nothings/stb,https://github.com/nothings/stb,1064,2020-12-16T23:26:38Z,2021-07-02T13:57:20Z,2021-07-02T13:58:00Z,MERGED,True,7,2,1,https://github.com/anthofoxo,Fixed vorbis files with no comments emitting outofmemory error,4,['1 stb_vorbis'],https://github.com/nothings/stb/pull/1064,https://github.com/sagamusix,7,https://github.com/nothings/stb/pull/1064#issuecomment-815071527,,"Alternatively, if (f->comment_list_length > 0 && f->comment_list == NULL) return error(f, VORBIS_outofmem); (this is what I used when I said above that I arrived at the same fix, but it's in fact slightly different).",True,{'THUMBS_UP': ['https://github.com/bkacjios']}
nothings/stb,https://github.com/nothings/stb,1064,2020-12-16T23:26:38Z,2021-07-02T13:57:20Z,2021-07-02T13:58:00Z,MERGED,True,7,2,1,https://github.com/anthofoxo,Fixed vorbis files with no comments emitting outofmemory error,4,['1 stb_vorbis'],https://github.com/nothings/stb/pull/1064,https://github.com/anthofoxo,8,https://github.com/nothings/stb/pull/1064#issuecomment-818748310,,"i went back to fix that little issue, should be all good now",True,{'THUMBS_UP': ['https://github.com/DanielGibson']}
nothings/stb,https://github.com/nothings/stb,1064,2020-12-16T23:26:38Z,2021-07-02T13:57:20Z,2021-07-02T13:58:00Z,MERGED,True,7,2,1,https://github.com/anthofoxo,Fixed vorbis files with no comments emitting outofmemory error,4,['1 stb_vorbis'],https://github.com/nothings/stb/pull/1064,https://github.com/DanielGibson,9,https://github.com/nothings/stb/pull/1064#issuecomment-818810357,,"yes, this looks good!",True,{}
nothings/stb,https://github.com/nothings/stb,1064,2020-12-16T23:26:38Z,2021-07-02T13:57:20Z,2021-07-02T13:58:00Z,MERGED,True,7,2,1,https://github.com/anthofoxo,Fixed vorbis files with no comments emitting outofmemory error,4,['1 stb_vorbis'],https://github.com/nothings/stb/pull/1064,https://github.com/nothings,10,https://github.com/nothings/stb/pull/1064#issuecomment-873019506,,"Thank you for this submission, my apologies for how long it took to integrate.",True,{'HOORAY': ['https://github.com/anthofoxo']}
nothings/stb,https://github.com/nothings/stb,1066,2020-12-17T12:09:24Z,2021-07-02T00:06:41Z,2021-07-02T00:06:41Z,CLOSED,False,1,1,1,https://github.com/leoxupku,fix stb's illegal memory access when find glyph beyond glyph table,2,['1 stb_truetype'],https://github.com/nothings/stb/pull/1066,https://github.com/leoxupku,1,https://github.com/nothings/stb/pull/1066,,,True,{'THUMBS_UP': ['https://github.com/bvgastel']}
nothings/stb,https://github.com/nothings/stb,1066,2020-12-17T12:09:24Z,2021-07-02T00:06:41Z,2021-07-02T00:06:41Z,CLOSED,False,1,1,1,https://github.com/leoxupku,fix stb's illegal memory access when find glyph beyond glyph table,2,['1 stb_truetype'],https://github.com/nothings/stb/pull/1066,https://github.com/rygorous,2,https://github.com/nothings/stb/pull/1066#issuecomment-872622283,,Not using this particular PR but a slightly different fix is pushed to the dev branch and will be in the next release.,True,{}
nothings/stb,https://github.com/nothings/stb,1067,2020-12-23T23:04:32Z,2020-12-23T23:06:58Z,2020-12-23T23:06:58Z,CLOSED,False,19,12,1,https://github.com/Phildo,Vorbis fix,3,[],https://github.com/nothings/stb/pull/1067,https://github.com/Phildo,1,https://github.com/nothings/stb/pull/1067,"If comment_list_length returns 0, it previously attempted to malloc 0 bytes, and interpreted that failing as VORBIS_outofmem. This fix instead checks if the length is 0, and skips any malloc for comment_list.","If comment_list_length returns 0, it previously attempted to malloc 0 bytes, and interpreted that failing as VORBIS_outofmem. This fix instead checks if the length is 0, and skips any malloc for comment_list.",True,{}
nothings/stb,https://github.com/nothings/stb,1067,2020-12-23T23:04:32Z,2020-12-23T23:06:58Z,2020-12-23T23:06:58Z,CLOSED,False,19,12,1,https://github.com/Phildo,Vorbis fix,3,[],https://github.com/nothings/stb/pull/1067,https://github.com/Phildo,2,https://github.com/nothings/stb/pull/1067#issuecomment-750534532,"If comment_list_length returns 0, it previously attempted to malloc 0 bytes, and interpreted that failing as VORBIS_outofmem. This fix instead checks if the length is 0, and skips any malloc for comment_list.",Ah- just realized a similar pull request already exists (#1064). Nevermind!,True,{}
nothings/stb,https://github.com/nothings/stb,1069,2020-12-30T16:35:25Z,2021-07-07T08:19:52Z,2021-07-07T08:19:52Z,CLOSED,False,4,2,1,https://github.com/TobiasBohnen,stb_truetype: fixes SDF rendering artifacts with some fonts,1,['1 stb_truetype'],https://github.com/nothings/stb/pull/1069,https://github.com/TobiasBohnen,1,https://github.com/nothings/stb/pull/1069,"Affects e.g. DejaVuSans' ""u"" and Calibri's ""&"".
Before and after:

Fix based on: https://bugzilla.gnome.org/show_bug.cgi?id=665384","Affects e.g. DejaVuSans' ""u"" and Calibri's ""&"".
Before and after:

Fix based on: https://bugzilla.gnome.org/show_bug.cgi?id=665384",True,{}
nothings/stb,https://github.com/nothings/stb,1069,2020-12-30T16:35:25Z,2021-07-07T08:19:52Z,2021-07-07T08:19:52Z,CLOSED,False,4,2,1,https://github.com/TobiasBohnen,stb_truetype: fixes SDF rendering artifacts with some fonts,1,['1 stb_truetype'],https://github.com/nothings/stb/pull/1069,https://github.com/nothings,2,https://github.com/nothings/stb/pull/1069#issuecomment-875375732,"Affects e.g. DejaVuSans' ""u"" and Calibri's ""&"".
Before and after:

Fix based on: https://bugzilla.gnome.org/show_bug.cgi?id=665384","This is already correctly handled on the rasterization path, so I'd prefer not to make changes that potentially affect that path as well. (For example, I don't think this implementation will handle the case of multiple move_tos at the end). So I'll try to fix it directly in the SDF generator.",True,{}
nothings/stb,https://github.com/nothings/stb,1069,2020-12-30T16:35:25Z,2021-07-07T08:19:52Z,2021-07-07T08:19:52Z,CLOSED,False,4,2,1,https://github.com/TobiasBohnen,stb_truetype: fixes SDF rendering artifacts with some fonts,1,['1 stb_truetype'],https://github.com/nothings/stb/pull/1069,https://github.com/nothings,3,https://github.com/nothings/stb/pull/1069#issuecomment-875396099,"Affects e.g. DejaVuSans' ""u"" and Calibri's ""&"".
Before and after:

Fix based on: https://bugzilla.gnome.org/show_bug.cgi?id=665384","Fixed in dev branch.
Before:

After:",True,{'THUMBS_UP': ['https://github.com/TobiasBohnen']}
nothings/stb,https://github.com/nothings/stb,1073,2021-01-08T23:24:54Z,2021-01-08T23:34:26Z,2021-01-09T00:13:59Z,CLOSED,False,2,0,3,https://github.com/samuelintheforest,Add DLL files,11,[],https://github.com/nothings/stb/pull/1073,https://github.com/samuelintheforest,1,https://github.com/nothings/stb/pull/1073,"Add the prebuilt dlls (Built with MSVC 2019 [64-bit, 32-bit]). Some edit in the README file to get a better understanding.","Add the prebuilt dlls (Built with MSVC 2019 [64-bit, 32-bit]). Some edit in the README file to get a better understanding.",True,{}
nothings/stb,https://github.com/nothings/stb,1073,2021-01-08T23:24:54Z,2021-01-08T23:34:26Z,2021-01-09T00:13:59Z,CLOSED,False,2,0,3,https://github.com/samuelintheforest,Add DLL files,11,[],https://github.com/nothings/stb/pull/1073,https://github.com/nothings,2,https://github.com/nothings/stb/pull/1073#issuecomment-757048446,"Add the prebuilt dlls (Built with MSVC 2019 [64-bit, 32-bit]). Some edit in the README file to get a better understanding.",out of scope for this project. feel free to host them somewhere else though!,True,{}
nothings/stb,https://github.com/nothings/stb,1073,2021-01-08T23:24:54Z,2021-01-08T23:34:26Z,2021-01-09T00:13:59Z,CLOSED,False,2,0,3,https://github.com/samuelintheforest,Add DLL files,11,[],https://github.com/nothings/stb/pull/1073,https://github.com/samuelintheforest,3,https://github.com/nothings/stb/pull/1073#issuecomment-757057688,"Add the prebuilt dlls (Built with MSVC 2019 [64-bit, 32-bit]). Some edit in the README file to get a better understanding.",Ok! No problem! 😁,True,{}
nothings/stb,https://github.com/nothings/stb,1074,2021-01-09T22:14:32Z,2021-07-07T07:43:12Z,2021-07-07T07:43:12Z,CLOSED,False,1,1,1,https://github.com/TheSandvichMaker,Fix compiler error when using STB_C_LEX_0_IS_EOF in stb_c_lexer.h,1,['stb_c_lexer'],https://github.com/nothings/stb/pull/1074,https://github.com/TheSandvichMaker,1,https://github.com/nothings/stb/pull/1074,"On line 611 in stb_c_lexer.h there is a variable ""tok"" used which does not exist, and should be ""lexer"" instead.","On line 611 in stb_c_lexer.h there is a variable ""tok"" used which does not exist, and should be ""lexer"" instead.",True,{}
nothings/stb,https://github.com/nothings/stb,1074,2021-01-09T22:14:32Z,2021-07-07T07:43:12Z,2021-07-07T07:43:12Z,CLOSED,False,1,1,1,https://github.com/TheSandvichMaker,Fix compiler error when using STB_C_LEX_0_IS_EOF in stb_c_lexer.h,1,['stb_c_lexer'],https://github.com/nothings/stb/pull/1074,https://github.com/nothings,2,https://github.com/nothings/stb/pull/1074#issuecomment-875369456,"On line 611 in stb_c_lexer.h there is a variable ""tok"" used which does not exist, and should be ""lexer"" instead.","Fixed independently, thank you for your PR anyway.",True,{}
nothings/stb,https://github.com/nothings/stb,1075,2021-01-09T22:27:27Z,,2022-01-17T14:30:47Z,OPEN,False,5,2,1,https://github.com/TheSandvichMaker,Replaced ldexp when decoding .hdr images with bit op equivalent,2,"['4 enhancement', '1 stb_image']",https://github.com/nothings/stb/pull/1075,https://github.com/TheSandvichMaker,1,https://github.com/nothings/stb/pull/1075,This speeds up loading .hdr images somewhere between 2.6x-2.8x on my machine.,This speeds up loading .hdr images somewhere between 2.6x-2.8x on my machine.,True,{}
nothings/stb,https://github.com/nothings/stb,1075,2021-01-09T22:27:27Z,,2022-01-17T14:30:47Z,OPEN,False,5,2,1,https://github.com/TheSandvichMaker,Replaced ldexp when decoding .hdr images with bit op equivalent,2,"['4 enhancement', '1 stb_image']",https://github.com/nothings/stb/pull/1075,https://github.com/nothings,2,https://github.com/nothings/stb/pull/1075#issuecomment-854928055,This speeds up loading .hdr images somewhere between 2.6x-2.8x on my machine.,"This is not a safe way to do bit operations between float and int. Current practice is to use a union to convert between them, although there are indications that compiler writers have decided that that is also undefined behavior as well and there's some other thing we're supposed to be doing, I don't even remember what that is.",True,{}
nothings/stb,https://github.com/nothings/stb,1075,2021-01-09T22:27:27Z,,2022-01-17T14:30:47Z,OPEN,False,5,2,1,https://github.com/TheSandvichMaker,Replaced ldexp when decoding .hdr images with bit op equivalent,2,"['4 enhancement', '1 stb_image']",https://github.com/nothings/stb/pull/1075,https://github.com/TheSandvichMaker,3,https://github.com/nothings/stb/pull/1075#issuecomment-855070380,This speeds up loading .hdr images somewhere between 2.6x-2.8x on my machine.,"Probing the Molly Rocket discord, the answer for C89 appears to be memcpy, union isn't considered safe until C99.
Modern C/C++ compilers seem to happily do the right thing with memcpy:
C: https://godbolt.org/z/oYTb8oj9M
C++: https://godbolt.org/z/Msdn5393G",True,{'THUMBS_UP': ['https://github.com/nothings']}
nothings/stb,https://github.com/nothings/stb,1075,2021-01-09T22:27:27Z,,2022-01-17T14:30:47Z,OPEN,False,5,2,1,https://github.com/TheSandvichMaker,Replaced ldexp when decoding .hdr images with bit op equivalent,2,"['4 enhancement', '1 stb_image']",https://github.com/nothings/stb/pull/1075,https://github.com/nothings,4,https://github.com/nothings/stb/pull/1075#issuecomment-855242665,This speeds up loading .hdr images somewhere between 2.6x-2.8x on my machine.,"One concern is that on older compilers they may explicitly do a memory copy, which will behave correctly, but maybe will be even slower than ldexp?",True,{}
nothings/stb,https://github.com/nothings/stb,1075,2021-01-09T22:27:27Z,,2022-01-17T14:30:47Z,OPEN,False,5,2,1,https://github.com/TheSandvichMaker,Replaced ldexp when decoding .hdr images with bit op equivalent,2,"['4 enhancement', '1 stb_image']",https://github.com/nothings/stb/pull/1075,https://github.com/TheSandvichMaker,5,https://github.com/nothings/stb/pull/1075#issuecomment-855260283,This speeds up loading .hdr images somewhere between 2.6x-2.8x on my machine.,"Yeah, that is a relevant point. Testing the oldest version available on godbolt of each of the ""major three"" still behaves correctly, but I can't speak for VC6 for example. Since type punning through unions appears to be happening in the stb codebases anyway, should I just switch to that?
EDIT: I am also amusingly reminded that type punning through unions is undefined behaviour in C++ too... Imagine how many codebases would break...",True,{}
nothings/stb,https://github.com/nothings/stb,1075,2021-01-09T22:27:27Z,,2022-01-17T14:30:47Z,OPEN,False,5,2,1,https://github.com/TheSandvichMaker,Replaced ldexp when decoding .hdr images with bit op equivalent,2,"['4 enhancement', '1 stb_image']",https://github.com/nothings/stb/pull/1075,https://github.com/nothings,6,https://github.com/nothings/stb/pull/1075#issuecomment-855264249,This speeds up loading .hdr images somewhere between 2.6x-2.8x on my machine.,"I don't think VC6 performance is worth holding things up, so if it works on oldest versions on godbolt, I'm ok with that. (You don't use VC6 for perfomance. It's still optimizing for Pentium Pro.)",True,{}
nothings/stb,https://github.com/nothings/stb,1075,2021-01-09T22:27:27Z,,2022-01-17T14:30:47Z,OPEN,False,5,2,1,https://github.com/TheSandvichMaker,Replaced ldexp when decoding .hdr images with bit op equivalent,2,"['4 enhancement', '1 stb_image']",https://github.com/nothings/stb/pull/1075,https://github.com/N-R-K,7,https://github.com/nothings/stb/pull/1075#issuecomment-1014432299,This speeds up loading .hdr images somewhere between 2.6x-2.8x on my machine.,"union isn't considered safe until C99.

Hi, C11 adds following footnote (95) regarding type punning through unions. I don't see anything similar in C99, so it's probably unsafe in C99 as well unless I've missed something.

If the member used to read the contents of a union object is not the same as the member last used to store a value in the object, the appropriate part of the object representation of the value is reinterpreted as an object representation in the new type as described in 6.2.6 (a process sometimes called ""type punning""). This might be a trap representation.",True,{}
nothings/stb,https://github.com/nothings/stb,1075,2021-01-09T22:27:27Z,,2022-01-17T14:30:47Z,OPEN,False,5,2,1,https://github.com/TheSandvichMaker,Replaced ldexp when decoding .hdr images with bit op equivalent,2,"['4 enhancement', '1 stb_image']",https://github.com/nothings/stb/pull/1075,https://github.com/musicinmybrain,8,https://github.com/nothings/stb/pull/1075#issuecomment-1014605945,This speeds up loading .hdr images somewhere between 2.6x-2.8x on my machine.,"StackOverflow discussion on type-punning through unions under various C standards. TLDR: that footnote was also added to C99 via a Technical Corrigendum, although the paranoid note that footnotes are not normative.
I’ve never heard of a C compiler where type-punning via unions didn’t work, it’s a widespread practice, and the footnote makes it even less likely that it will be broken by compiler writers in the future, so problems seem unlikely in C.
As @TheSandvichMaker noted, the same can’t be said for C++, where it’s definitively not officially OK to type-pun via unions (even though you’ll probably find it works today in practice).
I think memcpy is still safer overall as long as you can rely on inlining on compilers of interest.",True,{'THUMBS_UP': ['https://github.com/N-R-K']}
nothings/stb,https://github.com/nothings/stb,1078,2021-01-16T14:06:04Z,2021-07-12T00:25:04Z,2021-07-12T00:25:04Z,CLOSED,False,11,9,1,https://github.com/sagamusix,rename BUFFER_SIZE macro to STB_BUFFER_SIZE,1,"['1 stb_vorbis', '5 merged-dev']",https://github.com/nothings/stb/pull/1078,https://github.com/sagamusix,1,https://github.com/nothings/stb/pull/1078,"Avoid conflicts with other code which may use this very generic macro name.
Fixes #1076","Avoid conflicts with other code which may use this very generic macro name.
Fixes #1076",True,{}
nothings/stb,https://github.com/nothings/stb,1078,2021-01-16T14:06:04Z,2021-07-12T00:25:04Z,2021-07-12T00:25:04Z,CLOSED,False,11,9,1,https://github.com/sagamusix,rename BUFFER_SIZE macro to STB_BUFFER_SIZE,1,"['1 stb_vorbis', '5 merged-dev']",https://github.com/nothings/stb/pull/1078,https://github.com/rygorous,2,https://github.com/nothings/stb/pull/1078#issuecomment-873554235,"Avoid conflicts with other code which may use this very generic macro name.
Fixes #1076","LGTM, merged to dev branch, will be in the next release.",True,{}
nothings/stb,https://github.com/nothings/stb,1081,2021-01-25T20:07:43Z,2021-01-27T09:12:05Z,2021-01-27T09:12:05Z,CLOSED,False,3,3,2,https://github.com/goblinhack,gcc fixes,1,[],https://github.com/nothings/stb/pull/1081,https://github.com/goblinhack,1,https://github.com/nothings/stb/pull/1081,,,True,{}
nothings/stb,https://github.com/nothings/stb,1081,2021-01-25T20:07:43Z,2021-01-27T09:12:05Z,2021-01-27T09:12:05Z,CLOSED,False,3,3,2,https://github.com/goblinhack,gcc fixes,1,[],https://github.com/nothings/stb/pull/1081,https://github.com/nothings,2,https://github.com/nothings/stb/pull/1081#issuecomment-767085038,,do these warnings occur without -Wall ?,True,{}
nothings/stb,https://github.com/nothings/stb,1081,2021-01-25T20:07:43Z,2021-01-27T09:12:05Z,2021-01-27T09:12:05Z,CLOSED,False,3,3,2,https://github.com/goblinhack,gcc fixes,1,[],https://github.com/nothings/stb/pull/1081,https://github.com/goblinhack,3,https://github.com/nothings/stb/pull/1081#issuecomment-767405017,,Good point - only with -Wall I think,True,{}
nothings/stb,https://github.com/nothings/stb,1081,2021-01-25T20:07:43Z,2021-01-27T09:12:05Z,2021-01-27T09:12:05Z,CLOSED,False,3,3,2,https://github.com/goblinhack,gcc fixes,1,[],https://github.com/nothings/stb/pull/1081,https://github.com/goblinhack,4,https://github.com/nothings/stb/pull/1081#issuecomment-767424920,,"There are some others too that popped up with latest ubuntu and -Wall - not sure how to work around these: fyi:
In file included from stb_image.cpp:3:
stb_image.h: In function 'void* stbi__load_gif_main(stbi__context*, int**, int*, int*, int*, int*, int)':
stb_image.h:6778:11: warning: variable 'out_size' set but not used [-Wunused-but-set-variable]
6778 |       int out_size = 0;
|           ^~~~~~~~
stb_image.h:6779:11: warning: variable 'delays_size' set but not used [-Wunused-but-set-variable]
6779 |       int delays_size = 0;
|           ^~~~~~~~~~~",True,{}
nothings/stb,https://github.com/nothings/stb,1081,2021-01-25T20:07:43Z,2021-01-27T09:12:05Z,2021-01-27T09:12:05Z,CLOSED,False,3,3,2,https://github.com/goblinhack,gcc fixes,1,[],https://github.com/nothings/stb/pull/1081,https://github.com/nothings,5,https://github.com/nothings/stb/pull/1081#issuecomment-767448532,,I don't generally fix things that only show up with -Wall.,True,{}
nothings/stb,https://github.com/nothings/stb,1081,2021-01-25T20:07:43Z,2021-01-27T09:12:05Z,2021-01-27T09:12:05Z,CLOSED,False,3,3,2,https://github.com/goblinhack,gcc fixes,1,[],https://github.com/nothings/stb/pull/1081,https://github.com/goblinhack,6,https://github.com/nothings/stb/pull/1081#issuecomment-767581089,,"np
…
On Tue, 26 Jan 2021 at 10:24, Sean Barrett ***@***.***> wrote:
 I don't generally fix things that only show up with -Wall.

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub
 <#1081 (comment)>, or
 unsubscribe
 <https://github.com/notifications/unsubscribe-auth/AADA3HYCZ3KQQRCXVJ56USDS32J6NANCNFSM4WSJIJ5Q>
 .",True,{}
nothings/stb,https://github.com/nothings/stb,1083,2021-01-27T17:42:04Z,2021-07-12T00:25:01Z,2021-07-12T00:25:01Z,CLOSED,False,1,1,1,https://github.com/visualdoj,* fix an argument name in stbsp__ddtoS64: ph -> xh,1,"['2 good-no changes needed', '1 stb_sprintf', '5 merged-dev']",https://github.com/nothings/stb/pull/1083,https://github.com/visualdoj,1,https://github.com/nothings/stb/pull/1083,,,True,{}
nothings/stb,https://github.com/nothings/stb,1083,2021-01-27T17:42:04Z,2021-07-12T00:25:01Z,2021-07-12T00:25:01Z,CLOSED,False,1,1,1,https://github.com/visualdoj,* fix an argument name in stbsp__ddtoS64: ph -> xh,1,"['2 good-no changes needed', '1 stb_sprintf', '5 merged-dev']",https://github.com/nothings/stb/pull/1083,https://github.com/rygorous,2,https://github.com/nothings/stb/pull/1083#issuecomment-872619355,,"Merged into dev branch, will be in the next release.",True,{}
nothings/stb,https://github.com/nothings/stb,1084,2021-01-27T18:09:52Z,2021-07-12T00:24:17Z,2021-07-12T00:24:17Z,CLOSED,False,1,1,1,https://github.com/rsachetto,Fix compilation warnings in the s390x architecture. Fixes #1082.,1,"['2 good-no changes needed', '1 stb_sprintf', '5 merged-dev']",https://github.com/nothings/stb/pull/1084,https://github.com/rsachetto,1,https://github.com/nothings/stb/pull/1084,Fix compilation warnings in the s390x architecture.  Tested using the IBM platform.,Fix compilation warnings in the s390x architecture.  Tested using the IBM platform.,True,"{'THUMBS_UP': ['https://github.com/skriesch', 'https://github.com/hYdos']}"
nothings/stb,https://github.com/nothings/stb,1084,2021-01-27T18:09:52Z,2021-07-12T00:24:17Z,2021-07-12T00:24:17Z,CLOSED,False,1,1,1,https://github.com/rsachetto,Fix compilation warnings in the s390x architecture. Fixes #1082.,1,"['2 good-no changes needed', '1 stb_sprintf', '5 merged-dev']",https://github.com/nothings/stb/pull/1084,https://github.com/rygorous,2,https://github.com/nothings/stb/pull/1084#issuecomment-872617655,Fix compilation warnings in the s390x architecture.  Tested using the IBM platform.,"Merged into dev branch, will be in the next release.",True,{}
nothings/stb,https://github.com/nothings/stb,1088,2021-02-01T13:00:18Z,2021-02-01T16:21:25Z,2021-02-01T16:21:25Z,CLOSED,False,100,19,1,https://github.com/flriancu,avoid global vars for PNG and TGA,2,[],https://github.com/nothings/stb/pull/1088,https://github.com/flriancu,1,https://github.com/nothings/stb/pull/1088,"Hi!
This PR relates to ticket #1087 .
As far as I can tell, this patch does not break the existing API.
Please let me know what you think. Thanks!","Hi!
This PR relates to ticket #1087 .
As far as I can tell, this patch does not break the existing API.
Please let me know what you think. Thanks!",True,{}
nothings/stb,https://github.com/nothings/stb,1088,2021-02-01T13:00:18Z,2021-02-01T16:21:25Z,2021-02-01T16:21:25Z,CLOSED,False,100,19,1,https://github.com/flriancu,avoid global vars for PNG and TGA,2,[],https://github.com/nothings/stb/pull/1088,https://github.com/flriancu,2,https://github.com/nothings/stb/pull/1088#issuecomment-770843970,"Hi!
This PR relates to ticket #1087 .
As far as I can tell, this patch does not break the existing API.
Please let me know what you think. Thanks!","I'm not sure if stbi_write_png_to_mem is (also) meant to be used from the outside. If not, I reckon it can be deleted.",True,{}
nothings/stb,https://github.com/nothings/stb,1088,2021-02-01T13:00:18Z,2021-02-01T16:21:25Z,2021-02-01T16:21:25Z,CLOSED,False,100,19,1,https://github.com/flriancu,avoid global vars for PNG and TGA,2,[],https://github.com/nothings/stb/pull/1088,https://github.com/flriancu,3,https://github.com/nothings/stb/pull/1088#issuecomment-770977384,"Hi!
This PR relates to ticket #1087 .
As far as I can tell, this patch does not break the existing API.
Please let me know what you think. Thanks!",Closing per discussion in ticket #1087 .,True,{}
nothings/stb,https://github.com/nothings/stb,1095,2021-02-13T07:11:30Z,2021-07-04T09:50:47Z,2021-07-04T09:50:47Z,CLOSED,False,1,1,1,https://github.com/VirtuosoChris,Prevent out of memory error and return when the vorbis file has no comment list,1,['1 stb_vorbis'],https://github.com/nothings/stb/pull/1095,https://github.com/VirtuosoChris,1,https://github.com/nothings/stb/pull/1095,,,True,{'THUMBS_UP': ['https://github.com/DanielGibson']}
nothings/stb,https://github.com/nothings/stb,1095,2021-02-13T07:11:30Z,2021-07-04T09:50:47Z,2021-07-04T09:50:47Z,CLOSED,False,1,1,1,https://github.com/VirtuosoChris,Prevent out of memory error and return when the vorbis file has no comment list,1,['1 stb_vorbis'],https://github.com/nothings/stb/pull/1095,https://github.com/huwpascoe,2,https://github.com/nothings/stb/pull/1095#issuecomment-796765506,,👍 Please merge,True,{}
nothings/stb,https://github.com/nothings/stb,1095,2021-02-13T07:11:30Z,2021-07-04T09:50:47Z,2021-07-04T09:50:47Z,CLOSED,False,1,1,1,https://github.com/VirtuosoChris,Prevent out of memory error and return when the vorbis file has no comment list,1,['1 stb_vorbis'],https://github.com/nothings/stb/pull/1095,https://github.com/DanielGibson,3,https://github.com/nothings/stb/pull/1095#issuecomment-814627109,,"This is one of three pull requests for this issue; I'd prefer this one as it's shortest (but correct, as far as I can tell).
@nothings: Please merge a fix for this issue, not being able to load .ogg files that have no comment is a bit frustrating, even more so as one needs to debug it to figure out why it fails (with VORBIS_outofmem).
Thanks in advance! :-)",True,{}
nothings/stb,https://github.com/nothings/stb,1095,2021-02-13T07:11:30Z,2021-07-04T09:50:47Z,2021-07-04T09:50:47Z,CLOSED,False,1,1,1,https://github.com/VirtuosoChris,Prevent out of memory error and return when the vorbis file has no comment list,1,['1 stb_vorbis'],https://github.com/nothings/stb/pull/1095,https://github.com/rygorous,4,https://github.com/nothings/stb/pull/1095#issuecomment-873556547,,"A different fix for this was merged into mainline 2 days ago, closing this PR.",True,{}
nothings/stb,https://github.com/nothings/stb,1098,2021-02-14T16:34:53Z,2021-07-03T01:45:27Z,2021-07-03T01:45:27Z,CLOSED,False,3,3,2,https://github.com/flriancu,"stb_image, stb_image_write: fix gcc/clang sign-compare warnings",1,"['1 stb_image', '1 stb_image_write']",https://github.com/nothings/stb/pull/1098,https://github.com/flriancu,1,https://github.com/nothings/stb/pull/1098,"See #1100 . Fixes the following warnings on GCC 9.3.0 and clang 10.0.0:
[...]/stb_image.h: In function ‘int stbi__zhuffman_decode_slowpath(stbi__zbuf*, stbi__zhuffman*)’:
[...]/stb_image.h:4123:10: warning: comparison of integer expressions of different signedness: ‘int’ and ‘long unsigned int’ [-Wsign-compare]
 4123 |    if (b >= sizeof (z->size)) return -1; // some data was corrupt somewhere!
      |        ~~^~~~~~~~~~~~~~~~~~~
[...]/stb_image_write.h: In function ‘void stbiw__write1(stbi__write_context*, unsigned char)’:
[...]/stb_image_write.h:400:24: warning: comparison of integer expressions of different signedness: ‘int’ and ‘long unsigned int’ [-Wsign-compare]
  400 |    if (s->buf_used + 1 > sizeof(s->buffer))
      |        ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~
[...]/stb_image_write.h: In function ‘void stbiw__write3(stbi__write_context*, unsigned char, unsigned char, unsigned char)’:
[...]/stb_image_write.h:408:24: warning: comparison of integer expressions of different signedness: ‘int’ and ‘long unsigned int’ [-Wsign-compare]
  408 |    if (s->buf_used + 3 > sizeof(s->buffer))
      |        ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~","See #1100 . Fixes the following warnings on GCC 9.3.0 and clang 10.0.0:
[...]/stb_image.h: In function ‘int stbi__zhuffman_decode_slowpath(stbi__zbuf*, stbi__zhuffman*)’:
[...]/stb_image.h:4123:10: warning: comparison of integer expressions of different signedness: ‘int’ and ‘long unsigned int’ [-Wsign-compare]
 4123 |    if (b >= sizeof (z->size)) return -1; // some data was corrupt somewhere!
      |        ~~^~~~~~~~~~~~~~~~~~~
[...]/stb_image_write.h: In function ‘void stbiw__write1(stbi__write_context*, unsigned char)’:
[...]/stb_image_write.h:400:24: warning: comparison of integer expressions of different signedness: ‘int’ and ‘long unsigned int’ [-Wsign-compare]
  400 |    if (s->buf_used + 1 > sizeof(s->buffer))
      |        ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~
[...]/stb_image_write.h: In function ‘void stbiw__write3(stbi__write_context*, unsigned char, unsigned char, unsigned char)’:
[...]/stb_image_write.h:408:24: warning: comparison of integer expressions of different signedness: ‘int’ and ‘long unsigned int’ [-Wsign-compare]
  408 |    if (s->buf_used + 3 > sizeof(s->buffer))
      |        ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~",True,{}
nothings/stb,https://github.com/nothings/stb,1098,2021-02-14T16:34:53Z,2021-07-03T01:45:27Z,2021-07-03T01:45:27Z,CLOSED,False,3,3,2,https://github.com/flriancu,"stb_image, stb_image_write: fix gcc/clang sign-compare warnings",1,"['1 stb_image', '1 stb_image_write']",https://github.com/nothings/stb/pull/1098,https://github.com/rygorous,2,https://github.com/nothings/stb/pull/1098#issuecomment-873325353,"See #1100 . Fixes the following warnings on GCC 9.3.0 and clang 10.0.0:
[...]/stb_image.h: In function ‘int stbi__zhuffman_decode_slowpath(stbi__zbuf*, stbi__zhuffman*)’:
[...]/stb_image.h:4123:10: warning: comparison of integer expressions of different signedness: ‘int’ and ‘long unsigned int’ [-Wsign-compare]
 4123 |    if (b >= sizeof (z->size)) return -1; // some data was corrupt somewhere!
      |        ~~^~~~~~~~~~~~~~~~~~~
[...]/stb_image_write.h: In function ‘void stbiw__write1(stbi__write_context*, unsigned char)’:
[...]/stb_image_write.h:400:24: warning: comparison of integer expressions of different signedness: ‘int’ and ‘long unsigned int’ [-Wsign-compare]
  400 |    if (s->buf_used + 1 > sizeof(s->buffer))
      |        ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~
[...]/stb_image_write.h: In function ‘void stbiw__write3(stbi__write_context*, unsigned char, unsigned char, unsigned char)’:
[...]/stb_image_write.h:408:24: warning: comparison of integer expressions of different signedness: ‘int’ and ‘long unsigned int’ [-Wsign-compare]
  408 |    if (s->buf_used + 3 > sizeof(s->buffer))
      |        ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~","This issue is now fixed in the dev branch but with a slightly different fix. Will be in the next release, closing this PR.",True,{}
nothings/stb,https://github.com/nothings/stb,1102,2021-02-20T07:15:14Z,2021-07-02T00:47:03Z,2021-07-02T00:47:04Z,CLOSED,False,1,1,1,https://github.com/DaydreamCoding,Fix stbi_load_from_memory of stbi__bmp_load,1,"['2 bug', '1 stb_image', '2 good-no changes needed']",https://github.com/nothings/stb/pull/1102,https://github.com/DaydreamCoding,1,https://github.com/nothings/stb/pull/1102,stbi_load_from_memory do not have buffer,stbi_load_from_memory do not have buffer,True,"{'THUMBS_UP': ['https://github.com/fq19851220', 'https://github.com/zchrissirhcz']}"
nothings/stb,https://github.com/nothings/stb,1102,2021-02-20T07:15:14Z,2021-07-02T00:47:03Z,2021-07-02T00:47:04Z,CLOSED,False,1,1,1,https://github.com/DaydreamCoding,Fix stbi_load_from_memory of stbi__bmp_load,1,"['2 bug', '1 stb_image', '2 good-no changes needed']",https://github.com/nothings/stb/pull/1102,https://github.com/zchrissirhcz,2,https://github.com/nothings/stb/pull/1102#issuecomment-820017830,stbi_load_from_memory do not have buffer,"@nothings Hi, I met same problem and was trying make an Pull Request ... and just find this unmerged PR, and it really works. Could we merge this PR? Thanks.",True,{}
nothings/stb,https://github.com/nothings/stb,1102,2021-02-20T07:15:14Z,2021-07-02T00:47:03Z,2021-07-02T00:47:04Z,CLOSED,False,1,1,1,https://github.com/DaydreamCoding,Fix stbi_load_from_memory of stbi__bmp_load,1,"['2 bug', '1 stb_image', '2 good-no changes needed']",https://github.com/nothings/stb/pull/1102,https://github.com/zchrissirhcz,3,https://github.com/nothings/stb/pull/1102#issuecomment-820021203,stbi_load_from_memory do not have buffer,"To reproduce this issue, use this code:
#define STB_IMAGE_IMPLEMENTATION
#define STBI_NO_PSD
#define STBI_NO_TGA
#define STBI_NO_GIF
#define STBI_NO_HDR
#define STBI_NO_PIC
#include ""stb_image.h""

#define STB_IMAGE_WRITE_IMPLEMENTATION
#include ""stb_image_write.h""

#include <stdlib.h>
#include <string.h>
#include <string>

// read ""IU.bmp"" image by stbi_load_from_memory()
// then save as ""result.png""
int main() {
    const char* filename = ""IU.bmp"";
    const char* savename = ""result.png"";

    int height;
    int width;
    int channels;
    
#if 0
    unsigned char* raw_data = stbi_load(filename, &width, &height, &channels, 0);
#else
    FILE* fin = fopen(filename, ""rb"");
    if (fin == NULL) {
        LOGE(""failed to open file %s\n"", filename);
        exit(1);
    }
    fseek(fin, 0, SEEK_END);
    long buffer_size = ftell(fin);
    rewind(fin);
    unsigned char* buffer = (unsigned char*)malloc(buffer_size);
    if (buffer == NULL) {
        LOGE(""failed to allocate memory\n"");
        exit(2);
    }
    size_t result = fread(buffer, 1, buffer_size, fin);
    if (result != buffer_size) {
        LOGE(""failed to read from file %s\n"", filename);
        exit(3);
    }
    fclose(fin);

    unsigned char* raw_data =
        stbi_load_from_memory(buffer, buffer_size, &width, &height, &channels, 0);
     free(buffer);
     buffer = NULL;
#endif

    printf(""message: %s\n"", stbi_failure_reason());
    printf(""image info: width=%d, height=%d, channels=%d\n"", width, height, channels);
    
    int stride_in_bytes = width * 3;
    stbi_write_png(savename, width, height, 3, raw_data, stride_in_bytes);

    free(raw_data);

    return 0;
}",True,{}
nothings/stb,https://github.com/nothings/stb,1102,2021-02-20T07:15:14Z,2021-07-02T00:47:03Z,2021-07-02T00:47:04Z,CLOSED,False,1,1,1,https://github.com/DaydreamCoding,Fix stbi_load_from_memory of stbi__bmp_load,1,"['2 bug', '1 stb_image', '2 good-no changes needed']",https://github.com/nothings/stb/pull/1102,https://github.com/rygorous,4,https://github.com/nothings/stb/pull/1102#issuecomment-872635939,stbi_load_from_memory do not have buffer,"This is the wrong fix; see issue #994 for the correct one. Either way, this is fixed in dev branch and will be in the next release.",True,{}
nothings/stb,https://github.com/nothings/stb,1106,2021-02-28T13:53:09Z,,2022-06-03T12:49:15Z,OPEN,False,2,1,1,https://github.com/jspohr,stb_image_resize: Fix edge reflect overflow,2,['stb_image_resize'],https://github.com/nothings/stb/pull/1106,https://github.com/jspohr,1,https://github.com/nothings/stb/pull/1106,"Noticed that my lowest mipmaps contained random colors after switching to STBIR_EDGE_REFLECT. I believe this is the correct fix, but please correct me if I'm wrong. Cheers!","Noticed that my lowest mipmaps contained random colors after switching to STBIR_EDGE_REFLECT. I believe this is the correct fix, but please correct me if I'm wrong. Cheers!",True,{}
nothings/stb,https://github.com/nothings/stb,1106,2021-02-28T13:53:09Z,,2022-06-03T12:49:15Z,OPEN,False,2,1,1,https://github.com/jspohr,stb_image_resize: Fix edge reflect overflow,2,['stb_image_resize'],https://github.com/nothings/stb/pull/1106,https://github.com/sezero,2,https://github.com/nothings/stb/pull/1106#issuecomment-1143870229,"Noticed that my lowest mipmaps contained random colors after switching to STBIR_EDGE_REFLECT. I believe this is the correct fix, but please correct me if I'm wrong. Cheers!",Has this patch been reviewed / well-tested?,True,{}
nothings/stb,https://github.com/nothings/stb,1106,2021-02-28T13:53:09Z,,2022-06-03T12:49:15Z,OPEN,False,2,1,1,https://github.com/jspohr,stb_image_resize: Fix edge reflect overflow,2,['stb_image_resize'],https://github.com/nothings/stb/pull/1106,https://github.com/jspohr,3,https://github.com/nothings/stb/pull/1106#issuecomment-1145826959,"Noticed that my lowest mipmaps contained random colors after switching to STBIR_EDGE_REFLECT. I believe this is the correct fix, but please correct me if I'm wrong. Cheers!","Reviewed - not as far as I know.
Tested - it worked for me on Windows and Linux. We were using the EDGE_REFLECT mode only rarely, though.",True,{}
nothings/stb,https://github.com/nothings/stb,1106,2021-02-28T13:53:09Z,,2022-06-03T12:49:15Z,OPEN,False,2,1,1,https://github.com/jspohr,stb_image_resize: Fix edge reflect overflow,2,['stb_image_resize'],https://github.com/nothings/stb/pull/1106,https://github.com/sezero,4,https://github.com/nothings/stb/pull/1106#issuecomment-1145930527,"Noticed that my lowest mipmaps contained random colors after switching to STBIR_EDGE_REFLECT. I believe this is the correct fix, but please correct me if I'm wrong. Cheers!","OK, thanks.",True,{}
nothings/stb,https://github.com/nothings/stb,1107,2021-03-02T12:53:55Z,2021-07-12T00:08:45Z,2021-07-12T16:59:35Z,MERGED,True,18,18,1,https://github.com/t-mw,Rename arraddnoff -> arraddnindex,1,"['1 stb_ds', '5 merged-dev']",https://github.com/nothings/stb/pull/1107,https://github.com/t-mw,1,https://github.com/nothings/stb/pull/1107,"Fixes #1011.
As intended according to #932 (comment).","Fixes #1011.
As intended according to #932 (comment).",True,{'THUMBS_UP': ['https://github.com/nothings']}
nothings/stb,https://github.com/nothings/stb,1110,2021-03-11T20:20:42Z,2021-07-12T00:24:13Z,2021-07-12T00:24:13Z,CLOSED,False,2,0,1,https://github.com/fluffels,Note GL blend state for stb_truetype,1,"['1 stb_truetype', '3 documentation fix', '5 merged-dev']",https://github.com/nothings/stb/pull/1110,https://github.com/fluffels,1,https://github.com/nothings/stb/pull/1110,Maybe worth adding these as a note to the example in the documentation. Don't know about other people but I always forget them :),Maybe worth adding these as a note to the example in the documentation. Don't know about other people but I always forget them :),True,"{'THUMBS_UP': ['https://github.com/sthagen', 'https://github.com/AqilCont']}"
nothings/stb,https://github.com/nothings/stb,1110,2021-03-11T20:20:42Z,2021-07-12T00:24:13Z,2021-07-12T00:24:13Z,CLOSED,False,2,0,1,https://github.com/fluffels,Note GL blend state for stb_truetype,1,"['1 stb_truetype', '3 documentation fix', '5 merged-dev']",https://github.com/nothings/stb/pull/1110,https://github.com/rygorous,2,https://github.com/nothings/stb/pull/1110#issuecomment-872618228,Maybe worth adding these as a note to the example in the documentation. Don't know about other people but I always forget them :),"Merged into dev branch, will be in the next release.",True,{}
nothings/stb,https://github.com/nothings/stb,1111,2021-03-12T14:32:03Z,2021-07-12T00:24:10Z,2021-07-12T00:24:10Z,CLOSED,False,1,0,1,https://github.com/morlad,Fix #1051 - memory leak in stb_vorbis,1,"['1 stb_vorbis', '5 merged-dev']",https://github.com/nothings/stb/pull/1111,https://github.com/morlad,1,https://github.com/nothings/stb/pull/1111,"When start_decoder() fails it may already have allocated memory
for .vendor and/or .comment_list. Call vorbis_deinit() to free
any allocated memory.","When start_decoder() fails it may already have allocated memory
for .vendor and/or .comment_list. Call vorbis_deinit() to free
any allocated memory.",True,{}
nothings/stb,https://github.com/nothings/stb,1111,2021-03-12T14:32:03Z,2021-07-12T00:24:10Z,2021-07-12T00:24:10Z,CLOSED,False,1,0,1,https://github.com/morlad,Fix #1051 - memory leak in stb_vorbis,1,"['1 stb_vorbis', '5 merged-dev']",https://github.com/nothings/stb/pull/1111,https://github.com/rygorous,2,https://github.com/nothings/stb/pull/1111#issuecomment-873556978,"When start_decoder() fails it may already have allocated memory
for .vendor and/or .comment_list. Call vorbis_deinit() to free
any allocated memory.","Thanks for the PR, it's merged into the dev branch and will be in the next release.",True,{}
nothings/stb,https://github.com/nothings/stb,1113,2021-03-13T03:39:12Z,2021-07-02T13:59:11Z,2021-07-02T13:59:11Z,CLOSED,False,26,14,1,https://github.com/romanshuvalov,stb_vorbis bug fix: audiofiles with empty comment section was unable to load,1,['1 stb_vorbis'],https://github.com/nothings/stb/pull/1113,https://github.com/romanshuvalov,1,https://github.com/nothings/stb/pull/1113,Fixed an error which triggered VORBIS_outofmem when loading a file without comment section (comment_list_length==0). Also fixed couple of warnings about unused parameters.,Fixed an error which triggered VORBIS_outofmem when loading a file without comment section (comment_list_length==0). Also fixed couple of warnings about unused parameters.,True,{}
nothings/stb,https://github.com/nothings/stb,1113,2021-03-13T03:39:12Z,2021-07-02T13:59:11Z,2021-07-02T13:59:11Z,CLOSED,False,26,14,1,https://github.com/romanshuvalov,stb_vorbis bug fix: audiofiles with empty comment section was unable to load,1,['1 stb_vorbis'],https://github.com/nothings/stb/pull/1113,https://github.com/ROTARTSI82,2,https://github.com/nothings/stb/pull/1113#issuecomment-828042791,Fixed an error which triggered VORBIS_outofmem when loading a file without comment section (comment_list_length==0). Also fixed couple of warnings about unused parameters.,"I noticed this bug in my code when it suddenly stopped working :\
Also, this can be fixed by only changing this to  if (f->comment_list_length && f->comment_list == NULL) ...

  
    
      stb/stb_vorbis.c
    
    
         Line 3646
      in
      c9064e3
    
  
  
    

        
          
           if (f->comment_list == NULL)                     return error(f, VORBIS_outofmem); 
        
    
  


and adding that null check.",True,{}
nothings/stb,https://github.com/nothings/stb,1113,2021-03-13T03:39:12Z,2021-07-02T13:59:11Z,2021-07-02T13:59:11Z,CLOSED,False,26,14,1,https://github.com/romanshuvalov,stb_vorbis bug fix: audiofiles with empty comment section was unable to load,1,['1 stb_vorbis'],https://github.com/nothings/stb/pull/1113,https://github.com/nothings,3,https://github.com/nothings/stb/pull/1113#issuecomment-873020406,Fixed an error which triggered VORBIS_outofmem when loading a file without comment section (comment_list_length==0). Also fixed couple of warnings about unused parameters.,"Integrated a different PR with this fix. Thank you for reporting, my apologies for how long it took to address.",True,{}
nothings/stb,https://github.com/nothings/stb,1114,2021-03-15T04:35:49Z,2021-07-07T03:20:56Z,2021-07-07T03:20:56Z,CLOSED,False,6,6,1,https://github.com/StellaSmith,Replaced macro _MSV_VER to _WIN32 inside readdir_raw,1,['stb.h'],https://github.com/nothings/stb/pull/1114,https://github.com/StellaSmith,1,https://github.com/nothings/stb/pull/1114,This was done to fix a compilation error in msys2.,This was done to fix a compilation error in msys2.,True,{}
nothings/stb,https://github.com/nothings/stb,1114,2021-03-15T04:35:49Z,2021-07-07T03:20:56Z,2021-07-07T03:20:56Z,CLOSED,False,6,6,1,https://github.com/StellaSmith,Replaced macro _MSV_VER to _WIN32 inside readdir_raw,1,['stb.h'],https://github.com/nothings/stb/pull/1114,https://github.com/rygorous,2,https://github.com/nothings/stb/pull/1114#issuecomment-875241904,This was done to fix a compilation error in msys2.,"This is now fixed in the dev branch, although not via this PR.",True,{}
nothings/stb,https://github.com/nothings/stb,1116,2021-03-23T04:42:03Z,2021-07-12T00:24:06Z,2021-07-12T00:24:07Z,CLOSED,False,8,6,1,https://github.com/ybungalobill,stb_truetype -- fix artifacts in generated SDF,4,"['1 stb_truetype', '5 merged-dev']",https://github.com/nothings/stb/pull/1116,https://github.com/ybungalobill,1,https://github.com/nothings/stb/pull/1116,See #1115,See #1115,True,{}
nothings/stb,https://github.com/nothings/stb,1121,2021-03-29T00:00:23Z,2021-07-01T22:44:29Z,2021-07-01T22:44:30Z,CLOSED,False,9,0,1,https://github.com/TylerGlaiel,make stb_dxt thread-safe (ish),1,['1 stb library w/no tag'],https://github.com/nothings/stb/pull/1121,https://github.com/TylerGlaiel,1,https://github.com/nothings/stb/pull/1121,"added stb_warmup_dxt
call stb_warmup_dxt on the main thread to make stb_compress_dxt_block fully thread safe","added stb_warmup_dxt
call stb_warmup_dxt on the main thread to make stb_compress_dxt_block fully thread safe",True,{}
nothings/stb,https://github.com/nothings/stb,1121,2021-03-29T00:00:23Z,2021-07-01T22:44:29Z,2021-07-01T22:44:30Z,CLOSED,False,9,0,1,https://github.com/TylerGlaiel,make stb_dxt thread-safe (ish),1,['1 stb library w/no tag'],https://github.com/nothings/stb/pull/1121,https://github.com/nothings,2,https://github.com/nothings/stb/pull/1121#issuecomment-808988861,"added stb_warmup_dxt
call stb_warmup_dxt on the main thread to make stb_compress_dxt_block fully thread safe","Obviously this works, but I'd prerfer to do it properly--change the init variable from function static to global-static, and have the init function set the global.",True,{}
nothings/stb,https://github.com/nothings/stb,1121,2021-03-29T00:00:23Z,2021-07-01T22:44:29Z,2021-07-01T22:44:30Z,CLOSED,False,9,0,1,https://github.com/TylerGlaiel,make stb_dxt thread-safe (ish),1,['1 stb library w/no tag'],https://github.com/nothings/stb/pull/1121,https://github.com/rygorous,3,https://github.com/nothings/stb/pull/1121#issuecomment-872593840,"added stb_warmup_dxt
call stb_warmup_dxt on the main thread to make stb_compress_dxt_block fully thread safe","Closing this, it's superseded by #1137 which I'm about to merge (with some modifications) into dev.",True,{}
nothings/stb,https://github.com/nothings/stb,1130,2021-04-09T18:13:37Z,2021-07-12T00:24:04Z,2021-07-12T10:11:21Z,CLOSED,False,26,4,1,https://github.com/wernsey, stb_tilemap_editor.h - Re-added calls to `stbte__hittest()`; fixed some compiler errors.,1,"['1 stb library w/no tag', '5 merged-dev']",https://github.com/nothings/stb/pull/1130,https://github.com/wernsey,1,https://github.com/nothings/stb/pull/1130,"Some earlier commit removed calls to stbte__hittest(), which meant that mouse clicks were no longer working.
I just added those calls back from an older version, but removed the over local variables which were causing compiler warnings.
I also fixed some GCC warnings about unused variables when STBTE__COLORPICKER and STBTE_ALLOW_LINK is not defined
Also, the STBTE_DRAW_TILE(x,y,t->id, slot == tm->cur_tile,0); statement at line 3519 caused a compiler error because the line that declared it was removed, so I added it back (line 3512).","Some earlier commit removed calls to stbte__hittest(), which meant that mouse clicks were no longer working.
I just added those calls back from an older version, but removed the over local variables which were causing compiler warnings.
I also fixed some GCC warnings about unused variables when STBTE__COLORPICKER and STBTE_ALLOW_LINK is not defined
Also, the STBTE_DRAW_TILE(x,y,t->id, slot == tm->cur_tile,0); statement at line 3519 caused a compiler error because the line that declared it was removed, so I added it back (line 3512).",True,{}
nothings/stb,https://github.com/nothings/stb,1130,2021-04-09T18:13:37Z,2021-07-12T00:24:04Z,2021-07-12T10:11:21Z,CLOSED,False,26,4,1,https://github.com/wernsey, stb_tilemap_editor.h - Re-added calls to `stbte__hittest()`; fixed some compiler errors.,1,"['1 stb library w/no tag', '5 merged-dev']",https://github.com/nothings/stb/pull/1130,https://github.com/rygorous,2,https://github.com/nothings/stb/pull/1130#issuecomment-875266352,"Some earlier commit removed calls to stbte__hittest(), which meant that mouse clicks were no longer working.
I just added those calls back from an older version, but removed the over local variables which were causing compiler warnings.
I also fixed some GCC warnings about unused variables when STBTE__COLORPICKER and STBTE_ALLOW_LINK is not defined
Also, the STBTE_DRAW_TILE(x,y,t->id, slot == tm->cur_tile,0); statement at line 3519 caused a compiler error because the line that declared it was removed, so I added it back (line 3512).","LGTM, merged into the dev branch with minor changes, will be in the next release.",True,{}
nothings/stb,https://github.com/nothings/stb,1133,2021-04-16T08:23:24Z,2021-07-07T14:22:46Z,2021-07-07T14:22:46Z,CLOSED,False,2,2,1,https://github.com/RobLoach,tilemap_editor: Fix undefined variables,1,"['1 stb library w/no tag', '5 merged-dev']",https://github.com/nothings/stb/pull/1133,https://github.com/RobLoach,1,https://github.com/nothings/stb/pull/1133,"I'm not sure if this is correct, but it does fix compilation and rendering.","I'm not sure if this is correct, but it does fix compilation and rendering.",True,{}
nothings/stb,https://github.com/nothings/stb,1133,2021-04-16T08:23:24Z,2021-07-07T14:22:46Z,2021-07-07T14:22:46Z,CLOSED,False,2,2,1,https://github.com/RobLoach,tilemap_editor: Fix undefined variables,1,"['1 stb library w/no tag', '5 merged-dev']",https://github.com/nothings/stb/pull/1133,https://github.com/rygorous,2,https://github.com/nothings/stb/pull/1133#issuecomment-875259046,"I'm not sure if this is correct, but it does fix compilation and rendering.","Fix LGTM. Merged into dev branch, will be in the next release.",True,{}
nothings/stb,https://github.com/nothings/stb,1133,2021-04-16T08:23:24Z,2021-07-07T14:22:46Z,2021-07-07T14:22:46Z,CLOSED,False,2,2,1,https://github.com/RobLoach,tilemap_editor: Fix undefined variables,1,"['1 stb library w/no tag', '5 merged-dev']",https://github.com/nothings/stb/pull/1133,https://github.com/RobLoach,3,https://github.com/nothings/stb/pull/1133#issuecomment-875648282,"I'm not sure if this is correct, but it does fix compilation and rendering.",Thanks!,True,{}
nothings/stb,https://github.com/nothings/stb,1135,2021-04-18T22:12:34Z,2021-04-18T22:57:27Z,2021-04-21T19:07:09Z,CLOSED,False,167,1,1,https://github.com/pabloko,Glyph layered color font support (CPAL/COLR),2,[],https://github.com/nothings/stb/pull/1135,https://github.com/pabloko,1,https://github.com/nothings/stb/pull/1135,"Continuing from #512 this PR adds support for opentype's extension tables CPAL and COLR
https://docs.microsoft.com/es-es/typography/opentype/spec/cpal (version 0 as it seems theres no fonts using CPAL v1)
https://docs.microsoft.com/es-es/typography/opentype/spec/colr
Also keeping an eye on CPAL/COLR spec proposals
https://github.com/googlefonts/colr-gradients-spec/blob/main/OFF_AMD2_WD.md
The tables load the first time when this new api is called imitating the SVG loading mechanism, Color palettes can also be used with SVG data as per specification. During the first lookup of COLR table i've choosen to pre swap the bytes on the Layer Records Table in order to be able to cast this memory for the operation result. This was not needed on CPAL since the union allows to access separate color components and BGRA color is what opengl/d3d uses. This may cause trouble in some marginal cases using 3rd party libs (harfbuzz-ot-color) to read this table AND using this api subset at the same time, i think the benefit of pre-swapping the table is far superior so the user dont have to use more api to read the values.
This api has been tested with:  Segoe UI Emoji (old/new),  FlagsWorldColor,  FirefoxEmoji, RocherColor and others.
If someone has a font specimen with CPAL v1 please reach me to update this PR, but this extension isn't very juicy anyway. (palette flags for dark/clear bg, and names)
New api proposed:
//// Color palettes (CPAL) ///////////////////////////////////////////////////
typedef union {
    unsigned int color;
    struct {
        unsigned char b, g, r, a;
    } argb;
} stbtt_color;
STBTT_DEF bool stbtt_FontHasPalette(const stbtt_fontinfo *info);
STBTT_DEF unsigned short stbtt_FontPaletteCount(const stbtt_fontinfo *info);
STBTT_DEF unsigned short stbtt_FontPaletteGetColors(const stbtt_fontinfo *info, unsigned short paletteIndex, stbtt_color **colorPalette);
//// Glyph layers (COLR) /////////////////////////////////////////////////////
typedef struct {
    unsigned short glyphid, colorid;
} stbtt_glyphlayer;
STBTT_DEF bool stbtt_FontHasLayers(const stbtt_fontinfo *info);
STBTT_DEF unsigned short stbtt_GetGlyphLayers(const stbtt_fontinfo *info, unsigned short glypId, stbtt_glyphlayer **glyphLayer);
STBTT_DEF unsigned short stbtt_GetCodepointLayers(const stbtt_fontinfo *info, unsigned short codePoint, stbtt_glyphlayer **glyphLayer);
Test harness results (d3d9) - Original + Color + Glyph layers + Palette

SegoeUI Emoji (new)

RocherColor ""HelloSTB"" where each letter uses a different palette","Continuing from #512 this PR adds support for opentype's extension tables CPAL and COLR
https://docs.microsoft.com/es-es/typography/opentype/spec/cpal (version 0 as it seems theres no fonts using CPAL v1)
https://docs.microsoft.com/es-es/typography/opentype/spec/colr
Also keeping an eye on CPAL/COLR spec proposals
https://github.com/googlefonts/colr-gradients-spec/blob/main/OFF_AMD2_WD.md
The tables load the first time when this new api is called imitating the SVG loading mechanism, Color palettes can also be used with SVG data as per specification. During the first lookup of COLR table i've choosen to pre swap the bytes on the Layer Records Table in order to be able to cast this memory for the operation result. This was not needed on CPAL since the union allows to access separate color components and BGRA color is what opengl/d3d uses. This may cause trouble in some marginal cases using 3rd party libs (harfbuzz-ot-color) to read this table AND using this api subset at the same time, i think the benefit of pre-swapping the table is far superior so the user dont have to use more api to read the values.
This api has been tested with:  Segoe UI Emoji (old/new),  FlagsWorldColor,  FirefoxEmoji, RocherColor and others.
If someone has a font specimen with CPAL v1 please reach me to update this PR, but this extension isn't very juicy anyway. (palette flags for dark/clear bg, and names)
New api proposed:
//// Color palettes (CPAL) ///////////////////////////////////////////////////
typedef union {
    unsigned int color;
    struct {
        unsigned char b, g, r, a;
    } argb;
} stbtt_color;
STBTT_DEF bool stbtt_FontHasPalette(const stbtt_fontinfo *info);
STBTT_DEF unsigned short stbtt_FontPaletteCount(const stbtt_fontinfo *info);
STBTT_DEF unsigned short stbtt_FontPaletteGetColors(const stbtt_fontinfo *info, unsigned short paletteIndex, stbtt_color **colorPalette);
//// Glyph layers (COLR) /////////////////////////////////////////////////////
typedef struct {
    unsigned short glyphid, colorid;
} stbtt_glyphlayer;
STBTT_DEF bool stbtt_FontHasLayers(const stbtt_fontinfo *info);
STBTT_DEF unsigned short stbtt_GetGlyphLayers(const stbtt_fontinfo *info, unsigned short glypId, stbtt_glyphlayer **glyphLayer);
STBTT_DEF unsigned short stbtt_GetCodepointLayers(const stbtt_fontinfo *info, unsigned short codePoint, stbtt_glyphlayer **glyphLayer);
Test harness results (d3d9) - Original + Color + Glyph layers + Palette

SegoeUI Emoji (new)

RocherColor ""HelloSTB"" where each letter uses a different palette",True,"{'THUMBS_UP': ['https://github.com/bldd14', 'https://github.com/internationalizationist', 'https://github.com/daumiller']}"
nothings/stb,https://github.com/nothings/stb,1135,2021-04-18T22:12:34Z,2021-04-18T22:57:27Z,2021-04-21T19:07:09Z,CLOSED,False,167,1,1,https://github.com/pabloko,Glyph layered color font support (CPAL/COLR),2,[],https://github.com/nothings/stb/pull/1135,https://github.com/nothings,2,https://github.com/nothings/stb/pull/1135#issuecomment-822076854,"Continuing from #512 this PR adds support for opentype's extension tables CPAL and COLR
https://docs.microsoft.com/es-es/typography/opentype/spec/cpal (version 0 as it seems theres no fonts using CPAL v1)
https://docs.microsoft.com/es-es/typography/opentype/spec/colr
Also keeping an eye on CPAL/COLR spec proposals
https://github.com/googlefonts/colr-gradients-spec/blob/main/OFF_AMD2_WD.md
The tables load the first time when this new api is called imitating the SVG loading mechanism, Color palettes can also be used with SVG data as per specification. During the first lookup of COLR table i've choosen to pre swap the bytes on the Layer Records Table in order to be able to cast this memory for the operation result. This was not needed on CPAL since the union allows to access separate color components and BGRA color is what opengl/d3d uses. This may cause trouble in some marginal cases using 3rd party libs (harfbuzz-ot-color) to read this table AND using this api subset at the same time, i think the benefit of pre-swapping the table is far superior so the user dont have to use more api to read the values.
This api has been tested with:  Segoe UI Emoji (old/new),  FlagsWorldColor,  FirefoxEmoji, RocherColor and others.
If someone has a font specimen with CPAL v1 please reach me to update this PR, but this extension isn't very juicy anyway. (palette flags for dark/clear bg, and names)
New api proposed:
//// Color palettes (CPAL) ///////////////////////////////////////////////////
typedef union {
    unsigned int color;
    struct {
        unsigned char b, g, r, a;
    } argb;
} stbtt_color;
STBTT_DEF bool stbtt_FontHasPalette(const stbtt_fontinfo *info);
STBTT_DEF unsigned short stbtt_FontPaletteCount(const stbtt_fontinfo *info);
STBTT_DEF unsigned short stbtt_FontPaletteGetColors(const stbtt_fontinfo *info, unsigned short paletteIndex, stbtt_color **colorPalette);
//// Glyph layers (COLR) /////////////////////////////////////////////////////
typedef struct {
    unsigned short glyphid, colorid;
} stbtt_glyphlayer;
STBTT_DEF bool stbtt_FontHasLayers(const stbtt_fontinfo *info);
STBTT_DEF unsigned short stbtt_GetGlyphLayers(const stbtt_fontinfo *info, unsigned short glypId, stbtt_glyphlayer **glyphLayer);
STBTT_DEF unsigned short stbtt_GetCodepointLayers(const stbtt_fontinfo *info, unsigned short codePoint, stbtt_glyphlayer **glyphLayer);
Test harness results (d3d9) - Original + Color + Glyph layers + Palette

SegoeUI Emoji (new)

RocherColor ""HelloSTB"" where each letter uses a different palette","You're gonna have to fork the library if you want to do this. I don't want to expand the feature set of stb_truetype. I don't wnat to have it be a loading interface that doesn't implement the corresponding functionality, AND I don't want to implement or even maintain the corresponding functionality either.",True,{}
nothings/stb,https://github.com/nothings/stb,1135,2021-04-18T22:12:34Z,2021-04-18T22:57:27Z,2021-04-21T19:07:09Z,CLOSED,False,167,1,1,https://github.com/pabloko,Glyph layered color font support (CPAL/COLR),2,[],https://github.com/nothings/stb/pull/1135,https://github.com/pabloko,3,https://github.com/nothings/stb/pull/1135#issuecomment-822081020,"Continuing from #512 this PR adds support for opentype's extension tables CPAL and COLR
https://docs.microsoft.com/es-es/typography/opentype/spec/cpal (version 0 as it seems theres no fonts using CPAL v1)
https://docs.microsoft.com/es-es/typography/opentype/spec/colr
Also keeping an eye on CPAL/COLR spec proposals
https://github.com/googlefonts/colr-gradients-spec/blob/main/OFF_AMD2_WD.md
The tables load the first time when this new api is called imitating the SVG loading mechanism, Color palettes can also be used with SVG data as per specification. During the first lookup of COLR table i've choosen to pre swap the bytes on the Layer Records Table in order to be able to cast this memory for the operation result. This was not needed on CPAL since the union allows to access separate color components and BGRA color is what opengl/d3d uses. This may cause trouble in some marginal cases using 3rd party libs (harfbuzz-ot-color) to read this table AND using this api subset at the same time, i think the benefit of pre-swapping the table is far superior so the user dont have to use more api to read the values.
This api has been tested with:  Segoe UI Emoji (old/new),  FlagsWorldColor,  FirefoxEmoji, RocherColor and others.
If someone has a font specimen with CPAL v1 please reach me to update this PR, but this extension isn't very juicy anyway. (palette flags for dark/clear bg, and names)
New api proposed:
//// Color palettes (CPAL) ///////////////////////////////////////////////////
typedef union {
    unsigned int color;
    struct {
        unsigned char b, g, r, a;
    } argb;
} stbtt_color;
STBTT_DEF bool stbtt_FontHasPalette(const stbtt_fontinfo *info);
STBTT_DEF unsigned short stbtt_FontPaletteCount(const stbtt_fontinfo *info);
STBTT_DEF unsigned short stbtt_FontPaletteGetColors(const stbtt_fontinfo *info, unsigned short paletteIndex, stbtt_color **colorPalette);
//// Glyph layers (COLR) /////////////////////////////////////////////////////
typedef struct {
    unsigned short glyphid, colorid;
} stbtt_glyphlayer;
STBTT_DEF bool stbtt_FontHasLayers(const stbtt_fontinfo *info);
STBTT_DEF unsigned short stbtt_GetGlyphLayers(const stbtt_fontinfo *info, unsigned short glypId, stbtt_glyphlayer **glyphLayer);
STBTT_DEF unsigned short stbtt_GetCodepointLayers(const stbtt_fontinfo *info, unsigned short codePoint, stbtt_glyphlayer **glyphLayer);
Test harness results (d3d9) - Original + Color + Glyph layers + Palette

SegoeUI Emoji (new)

RocherColor ""HelloSTB"" where each letter uses a different palette","Well I respect if you dont want to expand the feature set, but the last year SVG was added and it falls on the same category as COLR, or even worse because with SVG theres no rendering mechanism while glyph rendering is the core of this lib.
I don't understand the second part of your comment either... the interface i've posted is just a snip of the commited code, that is actually implemented and tested for full coverage. Did you took a look at the changes?",True,{}
nothings/stb,https://github.com/nothings/stb,1135,2021-04-18T22:12:34Z,2021-04-18T22:57:27Z,2021-04-21T19:07:09Z,CLOSED,False,167,1,1,https://github.com/pabloko,Glyph layered color font support (CPAL/COLR),2,[],https://github.com/nothings/stb/pull/1135,https://github.com/nothings,4,https://github.com/nothings/stb/pull/1135#issuecomment-822082961,"Continuing from #512 this PR adds support for opentype's extension tables CPAL and COLR
https://docs.microsoft.com/es-es/typography/opentype/spec/cpal (version 0 as it seems theres no fonts using CPAL v1)
https://docs.microsoft.com/es-es/typography/opentype/spec/colr
Also keeping an eye on CPAL/COLR spec proposals
https://github.com/googlefonts/colr-gradients-spec/blob/main/OFF_AMD2_WD.md
The tables load the first time when this new api is called imitating the SVG loading mechanism, Color palettes can also be used with SVG data as per specification. During the first lookup of COLR table i've choosen to pre swap the bytes on the Layer Records Table in order to be able to cast this memory for the operation result. This was not needed on CPAL since the union allows to access separate color components and BGRA color is what opengl/d3d uses. This may cause trouble in some marginal cases using 3rd party libs (harfbuzz-ot-color) to read this table AND using this api subset at the same time, i think the benefit of pre-swapping the table is far superior so the user dont have to use more api to read the values.
This api has been tested with:  Segoe UI Emoji (old/new),  FlagsWorldColor,  FirefoxEmoji, RocherColor and others.
If someone has a font specimen with CPAL v1 please reach me to update this PR, but this extension isn't very juicy anyway. (palette flags for dark/clear bg, and names)
New api proposed:
//// Color palettes (CPAL) ///////////////////////////////////////////////////
typedef union {
    unsigned int color;
    struct {
        unsigned char b, g, r, a;
    } argb;
} stbtt_color;
STBTT_DEF bool stbtt_FontHasPalette(const stbtt_fontinfo *info);
STBTT_DEF unsigned short stbtt_FontPaletteCount(const stbtt_fontinfo *info);
STBTT_DEF unsigned short stbtt_FontPaletteGetColors(const stbtt_fontinfo *info, unsigned short paletteIndex, stbtt_color **colorPalette);
//// Glyph layers (COLR) /////////////////////////////////////////////////////
typedef struct {
    unsigned short glyphid, colorid;
} stbtt_glyphlayer;
STBTT_DEF bool stbtt_FontHasLayers(const stbtt_fontinfo *info);
STBTT_DEF unsigned short stbtt_GetGlyphLayers(const stbtt_fontinfo *info, unsigned short glypId, stbtt_glyphlayer **glyphLayer);
STBTT_DEF unsigned short stbtt_GetCodepointLayers(const stbtt_fontinfo *info, unsigned short codePoint, stbtt_glyphlayer **glyphLayer);
Test harness results (d3d9) - Original + Color + Glyph layers + Palette

SegoeUI Emoji (new)

RocherColor ""HelloSTB"" where each letter uses a different palette","You implemented the ability for clients of stbtt to access the data in these tables themselves, you didn't implement anything to DO anything with those tables, e.g. render colored bitmaps. stb_truetype is not a library for accessing data out of tables, it is a library for making font bitmaps. It doesn't make any sense to add functionality accessing data but not to provide any rendering for it. But I also don't want to support rendering color bitmaps (or SVG, for that matter).",True,{}
nothings/stb,https://github.com/nothings/stb,1135,2021-04-18T22:12:34Z,2021-04-18T22:57:27Z,2021-04-21T19:07:09Z,CLOSED,False,167,1,1,https://github.com/pabloko,Glyph layered color font support (CPAL/COLR),2,[],https://github.com/nothings/stb/pull/1135,https://github.com/pabloko,5,https://github.com/nothings/stb/pull/1135#issuecomment-822085801,"Continuing from #512 this PR adds support for opentype's extension tables CPAL and COLR
https://docs.microsoft.com/es-es/typography/opentype/spec/cpal (version 0 as it seems theres no fonts using CPAL v1)
https://docs.microsoft.com/es-es/typography/opentype/spec/colr
Also keeping an eye on CPAL/COLR spec proposals
https://github.com/googlefonts/colr-gradients-spec/blob/main/OFF_AMD2_WD.md
The tables load the first time when this new api is called imitating the SVG loading mechanism, Color palettes can also be used with SVG data as per specification. During the first lookup of COLR table i've choosen to pre swap the bytes on the Layer Records Table in order to be able to cast this memory for the operation result. This was not needed on CPAL since the union allows to access separate color components and BGRA color is what opengl/d3d uses. This may cause trouble in some marginal cases using 3rd party libs (harfbuzz-ot-color) to read this table AND using this api subset at the same time, i think the benefit of pre-swapping the table is far superior so the user dont have to use more api to read the values.
This api has been tested with:  Segoe UI Emoji (old/new),  FlagsWorldColor,  FirefoxEmoji, RocherColor and others.
If someone has a font specimen with CPAL v1 please reach me to update this PR, but this extension isn't very juicy anyway. (palette flags for dark/clear bg, and names)
New api proposed:
//// Color palettes (CPAL) ///////////////////////////////////////////////////
typedef union {
    unsigned int color;
    struct {
        unsigned char b, g, r, a;
    } argb;
} stbtt_color;
STBTT_DEF bool stbtt_FontHasPalette(const stbtt_fontinfo *info);
STBTT_DEF unsigned short stbtt_FontPaletteCount(const stbtt_fontinfo *info);
STBTT_DEF unsigned short stbtt_FontPaletteGetColors(const stbtt_fontinfo *info, unsigned short paletteIndex, stbtt_color **colorPalette);
//// Glyph layers (COLR) /////////////////////////////////////////////////////
typedef struct {
    unsigned short glyphid, colorid;
} stbtt_glyphlayer;
STBTT_DEF bool stbtt_FontHasLayers(const stbtt_fontinfo *info);
STBTT_DEF unsigned short stbtt_GetGlyphLayers(const stbtt_fontinfo *info, unsigned short glypId, stbtt_glyphlayer **glyphLayer);
STBTT_DEF unsigned short stbtt_GetCodepointLayers(const stbtt_fontinfo *info, unsigned short codePoint, stbtt_glyphlayer **glyphLayer);
Test harness results (d3d9) - Original + Color + Glyph layers + Palette

SegoeUI Emoji (new)

RocherColor ""HelloSTB"" where each letter uses a different palette","The only rendering api needed for COLR is stbtt_MakeGlyphBitmap. The aim of this PR is not to access those tables, but provides palette colors and searching corresponding glyph substitution with arrays of glyphs to compose a layered colored glyph.
I'd like to know why #750 is fine but this not...",True,{}
nothings/stb,https://github.com/nothings/stb,1136,2021-04-19T16:18:21Z,2021-04-19T17:11:31Z,2021-04-19T17:27:00Z,CLOSED,False,967,0,1,https://github.com/Nitesh2503, .md new file created,1,['invalid'],https://github.com/nothings/stb/pull/1136,https://github.com/Nitesh2503,1,https://github.com/nothings/stb/pull/1136,"Delete this list before clicking CREATE PULL REQUEST
Make sure you're using a special branch just for this pull request. (Sometimes people unknowingly use a default branch, then later update that branch, which updates the pull request with the other changes if it hasn't been merged yet.)
Do NOT update the version number in the file. (This just causes conflicts.)
Do add your name to the list of contributors. (Don't worry about the formatting.) I'll try to remember to add it if you don't, but I sometimes forget as it's an extra step.

If you get something above wrong, don't fret it, it's not the end of the world.","Delete this list before clicking CREATE PULL REQUEST
Make sure you're using a special branch just for this pull request. (Sometimes people unknowingly use a default branch, then later update that branch, which updates the pull request with the other changes if it hasn't been merged yet.)
Do NOT update the version number in the file. (This just causes conflicts.)
Do add your name to the list of contributors. (Don't worry about the formatting.) I'll try to remember to add it if you don't, but I sometimes forget as it's an extra step.

If you get something above wrong, don't fret it, it's not the end of the world.",True,{}
nothings/stb,https://github.com/nothings/stb,1136,2021-04-19T16:18:21Z,2021-04-19T17:11:31Z,2021-04-19T17:27:00Z,CLOSED,False,967,0,1,https://github.com/Nitesh2503, .md new file created,1,['invalid'],https://github.com/nothings/stb/pull/1136,https://github.com/nothings,2,https://github.com/nothings/stb/pull/1136#issuecomment-822633765,"Delete this list before clicking CREATE PULL REQUEST
Make sure you're using a special branch just for this pull request. (Sometimes people unknowingly use a default branch, then later update that branch, which updates the pull request with the other changes if it hasn't been merged yet.)
Do NOT update the version number in the file. (This just causes conflicts.)
Do add your name to the list of contributors. (Don't worry about the formatting.) I'll try to remember to add it if you don't, but I sometimes forget as it's an extra step.

If you get something above wrong, don't fret it, it's not the end of the world.",please don't spam real projects with nonsense Pull Requests. real live humans get notification emails and have to clean up.,True,{}
nothings/stb,https://github.com/nothings/stb,1137,2021-04-24T20:12:05Z,2021-07-12T00:24:01Z,2021-07-12T00:24:01Z,CLOSED,False,125,68,1,https://github.com/fahickman,stb_dxt: Initialize tables at compile time,1,"['stb_dxt', '5 merged-dev']",https://github.com/nothings/stb/pull/1137,https://github.com/fahickman,1,https://github.com/nothings/stb/pull/1137,"Also fix a ""potentially uninitialized variable"" warning.
Resolves #1117","Also fix a ""potentially uninitialized variable"" warning.
Resolves #1117",True,{}
nothings/stb,https://github.com/nothings/stb,1137,2021-04-24T20:12:05Z,2021-07-12T00:24:01Z,2021-07-12T00:24:01Z,CLOSED,False,125,68,1,https://github.com/fahickman,stb_dxt: Initialize tables at compile time,1,"['stb_dxt', '5 merged-dev']",https://github.com/nothings/stb/pull/1137,https://github.com/rygorous,2,https://github.com/nothings/stb/pull/1137#issuecomment-870138230,"Also fix a ""potentially uninitialized variable"" warning.
Resolves #1117",(Comment to self) this will need some minor reworking to include the table generator in some form. (It's fine for the tables to be static data but the code that generates them should be in the repo somewhere.),True,{}
nothings/stb,https://github.com/nothings/stb,1137,2021-04-24T20:12:05Z,2021-07-12T00:24:01Z,2021-07-12T00:24:01Z,CLOSED,False,125,68,1,https://github.com/fahickman,stb_dxt: Initialize tables at compile time,1,"['stb_dxt', '5 merged-dev']",https://github.com/nothings/stb/pull/1137,https://github.com/rygorous,3,https://github.com/nothings/stb/pull/1137#issuecomment-872614713,"Also fix a ""potentially uninitialized variable"" warning.
Resolves #1117",Merged into dev branch.,True,{}
nothings/stb,https://github.com/nothings/stb,1142,2021-05-11T11:33:00Z,2021-07-12T00:23:58Z,2021-07-12T00:23:58Z,CLOSED,False,23,9,1,https://github.com/sbreuss,Adds 16-bit support for pnm files.,1,"['1 stb_image', '5 merged-dev']",https://github.com/nothings/stb/pull/1142,https://github.com/sbreuss,1,https://github.com/nothings/stb/pull/1142,This PR adds support for reading of 16-bit PNM images.,This PR adds support for reading of 16-bit PNM images.,True,{}
nothings/stb,https://github.com/nothings/stb,1142,2021-05-11T11:33:00Z,2021-07-12T00:23:58Z,2021-07-12T00:23:58Z,CLOSED,False,23,9,1,https://github.com/sbreuss,Adds 16-bit support for pnm files.,1,"['1 stb_image', '5 merged-dev']",https://github.com/nothings/stb/pull/1142,https://github.com/rygorous,2,https://github.com/nothings/stb/pull/1142#issuecomment-872632715,This PR adds support for reading of 16-bit PNM images.,"LGTM! Merged into dev branch, will be in the next release.",True,{}
nothings/stb,https://github.com/nothings/stb,1143,2021-05-11T15:52:23Z,2021-07-08T07:35:22Z,2021-07-08T07:35:22Z,CLOSED,False,6,6,1,https://github.com/rollraw,expose STBRP__MAXVAL define even if STB_RECT_PACK_IMPLEMENTATION isn't defined,1,['stb_rect_pack'],https://github.com/nothings/stb/pull/1143,https://github.com/rollraw,1,https://github.com/nothings/stb/pull/1143,"e.g. i intend to limit packed rect boundaries by STBRP__MAXVAL for backward compability in my header file (font.h for example) but i doesn't need full implemetation because this header included in other files where stb_rectpack.h will be unused, so it makes me possible to include ""std_rectpack.h"" in my font.h to use STBRP__MAXVAL define and define STB_RECT_PACK_IMPLEMENTATION before including font.h in font.cpp file where implementation used","e.g. i intend to limit packed rect boundaries by STBRP__MAXVAL for backward compability in my header file (font.h for example) but i doesn't need full implemetation because this header included in other files where stb_rectpack.h will be unused, so it makes me possible to include ""std_rectpack.h"" in my font.h to use STBRP__MAXVAL define and define STB_RECT_PACK_IMPLEMENTATION before including font.h in font.cpp file where implementation used",True,{}
nothings/stb,https://github.com/nothings/stb,1143,2021-05-11T15:52:23Z,2021-07-08T07:35:22Z,2021-07-08T07:35:22Z,CLOSED,False,6,6,1,https://github.com/rollraw,expose STBRP__MAXVAL define even if STB_RECT_PACK_IMPLEMENTATION isn't defined,1,['stb_rect_pack'],https://github.com/nothings/stb/pull/1143,https://github.com/nothings,2,https://github.com/nothings/stb/pull/1143#issuecomment-838972501,"e.g. i intend to limit packed rect boundaries by STBRP__MAXVAL for backward compability in my header file (font.h for example) but i doesn't need full implemetation because this header included in other files where stb_rectpack.h will be unused, so it makes me possible to include ""std_rectpack.h"" in my font.h to use STBRP__MAXVAL define and define STB_RECT_PACK_IMPLEMENTATION before including font.h in font.cpp file where implementation used","STBRP_LARGE_RECTS is a configuration macro that is only required to be defined in the file that creates the implementation. (I.e. it can be a #define in that file, rather than a global macro defined in the build system.) This is a consistent design feature in all stb libraries to make it easier to use.
This means that during the ""header file"" section of stb_rectpack, the value of STBRP_LARGE_RECTS is unknown. If it's in the implementation file, it must be the final value, but anywhere else, it's unknown.
Since STBRP_MAXVAL is computed from STBRP_LARGE_RECTS, it's impossible to know in the header file section (i.e. not in the implementation file) what the value of STBRP_LARGE_RECTS is.
If font.h is a single-file library, that means it's impossible to automatically know what the value of STBRP__MAXVAL is in your header file at compile time.
If you need it at compile time (e.g. to size a data structure), the best approach is to require the user to pass it in to you: require '#define FONT_SBTRP_LARGE_RECTS' or '#define FONT_STBRP_MAXVAL ' be defined by the user.
If you only need it at run time (e.g. to rangecheck a parameter), we can add a function to stb_rectpack that returns STBRP__MAXVAL.
If font.h isn't part of a single-file library, then just make your own MAXVAL define for your own use. Since the values are determined by datatype sizes, the values in stb_rectpack will never change.",True,{}
nothings/stb,https://github.com/nothings/stb,1143,2021-05-11T15:52:23Z,2021-07-08T07:35:22Z,2021-07-08T07:35:22Z,CLOSED,False,6,6,1,https://github.com/rollraw,expose STBRP__MAXVAL define even if STB_RECT_PACK_IMPLEMENTATION isn't defined,1,['stb_rect_pack'],https://github.com/nothings/stb/pull/1143,https://github.com/rollraw,3,https://github.com/nothings/stb/pull/1143#issuecomment-839122999,"e.g. i intend to limit packed rect boundaries by STBRP__MAXVAL for backward compability in my header file (font.h for example) but i doesn't need full implemetation because this header included in other files where stb_rectpack.h will be unused, so it makes me possible to include ""std_rectpack.h"" in my font.h to use STBRP__MAXVAL define and define STB_RECT_PACK_IMPLEMENTATION before including font.h in font.cpp file where implementation used","thanks for answering
then i not fully understand why stbrp_coord is exposed before STB_RECT_PACK_IMPLEMENTATION when it also depends on STBRP_LARGE_RECTS

  
    
      stb/stb_rect_pack.h
    
    
        Lines 78 to 82
      in
      c9064e3
    
  
  
    

        
          
           #ifdef STBRP_LARGE_RECTS 
        

        
          
           typedef int            stbrp_coord; 
        

        
          
           #else 
        

        
          
           typedef unsigned short stbrp_coord; 
        

        
          
           #endif",True,{}
nothings/stb,https://github.com/nothings/stb,1143,2021-05-11T15:52:23Z,2021-07-08T07:35:22Z,2021-07-08T07:35:22Z,CLOSED,False,6,6,1,https://github.com/rollraw,expose STBRP__MAXVAL define even if STB_RECT_PACK_IMPLEMENTATION isn't defined,1,['stb_rect_pack'],https://github.com/nothings/stb/pull/1143,https://github.com/nothings,4,https://github.com/nothings/stb/pull/1143#issuecomment-839158204,"e.g. i intend to limit packed rect boundaries by STBRP__MAXVAL for backward compability in my header file (font.h for example) but i doesn't need full implemetation because this header included in other files where stb_rectpack.h will be unused, so it makes me possible to include ""std_rectpack.h"" in my font.h to use STBRP__MAXVAL define and define STB_RECT_PACK_IMPLEMENTATION before including font.h in font.cpp file where implementation used","Ah, my mistake. Yeah, that one doesn't play by the normal stb rules because of that. I'll have to think about the design. Probably I should just force STBRP_LARGE_RECTS to always be true and not worry about the memory wasted.",True,{}
nothings/stb,https://github.com/nothings/stb,1143,2021-05-11T15:52:23Z,2021-07-08T07:35:22Z,2021-07-08T07:35:22Z,CLOSED,False,6,6,1,https://github.com/rollraw,expose STBRP__MAXVAL define even if STB_RECT_PACK_IMPLEMENTATION isn't defined,1,['stb_rect_pack'],https://github.com/nothings/stb/pull/1143,https://github.com/rygorous,5,https://github.com/nothings/stb/pull/1143#issuecomment-876205686,"e.g. i intend to limit packed rect boundaries by STBRP__MAXVAL for backward compability in my header file (font.h for example) but i doesn't need full implemetation because this header included in other files where stb_rectpack.h will be unused, so it makes me possible to include ""std_rectpack.h"" in my font.h to use STBRP__MAXVAL define and define STB_RECT_PACK_IMPLEMENTATION before including font.h in font.cpp file where implementation used","This functionality is now in the dev branch, although with a slightly different implementation, and will be in the next release. Closing this PR.",True,{}
nothings/stb,https://github.com/nothings/stb,1144,2021-05-11T20:56:51Z,2021-06-04T18:39:07Z,2021-06-23T10:28:57Z,MERGED,True,8,1,1,https://github.com/avennstrom,Fix custom realloc/free bug in stb_ds,3,"['2 good-no changes needed', '1 stb_ds']",https://github.com/nothings/stb/pull/1144,https://github.com/avennstrom,1,https://github.com/nothings/stb/pull/1144,Fixes issue described in #1141,Fixes issue described in #1141,True,{'THUMBS_UP': ['https://github.com/nothings']}
nothings/stb,https://github.com/nothings/stb,1145,2021-06-01T02:57:48Z,2021-06-04T18:39:07Z,2021-06-04T18:39:07Z,MERGED,True,3,0,1,https://github.com/makuto,shputs duplicate insert: fix stale temp_key,2,[],https://github.com/nothings/stb/pull/1145,https://github.com/makuto,1,https://github.com/nothings/stb/pull/1145,"Fix temp_key being stale on key re-insert. This pull request re-uses the existing key, which matches the previous behavior. Before the fix, there was a chance that temp_key would be the last inserted key, or effectively garbage data. This manifested for me in double frees and entries with incorrect keys.
See issue #992 and pull request #993.","Fix temp_key being stale on key re-insert. This pull request re-uses the existing key, which matches the previous behavior. Before the fix, there was a chance that temp_key would be the last inserted key, or effectively garbage data. This manifested for me in double frees and entries with incorrect keys.
See issue #992 and pull request #993.",True,{}
nothings/stb,https://github.com/nothings/stb,1145,2021-06-01T02:57:48Z,2021-06-04T18:39:07Z,2021-06-04T18:39:07Z,MERGED,True,3,0,1,https://github.com/makuto,shputs duplicate insert: fix stale temp_key,2,[],https://github.com/nothings/stb/pull/1145,https://github.com/makuto,2,https://github.com/nothings/stb/pull/1145#issuecomment-851769894,"Fix temp_key being stale on key re-insert. This pull request re-uses the existing key, which matches the previous behavior. Before the fix, there was a chance that temp_key would be the last inserted key, or effectively garbage data. This manifested for me in double frees and entries with incorrect keys.
See issue #992 and pull request #993.","To reproduce the double-free issue:
    s.key = ""a"", s.value = 1;
    sh_new_strdup(strmap);
    shputs(strmap, s);
    s.key = ""b"", s.value = 1;
    shputs(strmap, s);
    // At this moment, the ""a"" entry will actually receive the stale ""b"" temp_key
    s.key = ""a"", s.value = 1;
    shputs(strmap, s);",True,{}
nothings/stb,https://github.com/nothings/stb,1147,2021-06-07T18:37:21Z,2021-07-12T00:23:28Z,2021-07-30T13:44:07Z,CLOSED,False,2,1,1,https://github.com/mundusnine,Fix custom types having a string_len of 0(always),2,"['5 merged-dev', 'stb_c_lexer']",https://github.com/nothings/stb/pull/1147,https://github.com/mundusnine,1,https://github.com/nothings/stb/pull/1147,,,True,{}
nothings/stb,https://github.com/nothings/stb,1148,2021-06-11T07:46:40Z,2021-06-16T09:45:52Z,2021-06-16T09:46:08Z,CLOSED,False,17,0,1,https://github.com/gimpycpu,"Added 2 new macros, arrappn and arrappda",2,[],https://github.com/nothings/stb/pull/1148,https://github.com/gimpycpu,1,https://github.com/nothings/stb/pull/1148,"Added 2 new macros
arrappn:
void arrappn(T* a, T* v, int n);
Appends n elements of v at the end of a, capacity might increase due to
arrsetcap being called
arrappda:
void arrappda(T* a, T* v);
Appends dynamic array v at the end of a, capacity might increase due to
arrsetcap being called
unless I missed something I dont think there were any?
I used them with success while pushing vertices, while loading a mesh data for example.
vec3* da = NULL;
//Iterate over all mesh
for (unsigned int i = 0; i < scene->mNumMeshes; i++)
{
    aiMesh* mesh = scene->mMeshes[i]; 
    stbds_arrappn(da, mesh->mVertices, mesh->mNumVertices); //append all vertices of the mesh to the dynamic array
}","Added 2 new macros
arrappn:
void arrappn(T* a, T* v, int n);
Appends n elements of v at the end of a, capacity might increase due to
arrsetcap being called
arrappda:
void arrappda(T* a, T* v);
Appends dynamic array v at the end of a, capacity might increase due to
arrsetcap being called
unless I missed something I dont think there were any?
I used them with success while pushing vertices, while loading a mesh data for example.
vec3* da = NULL;
//Iterate over all mesh
for (unsigned int i = 0; i < scene->mNumMeshes; i++)
{
    aiMesh* mesh = scene->mMeshes[i]; 
    stbds_arrappn(da, mesh->mVertices, mesh->mNumVertices); //append all vertices of the mesh to the dynamic array
}",True,{}
nothings/stb,https://github.com/nothings/stb,1148,2021-06-11T07:46:40Z,2021-06-16T09:45:52Z,2021-06-16T09:46:08Z,CLOSED,False,17,0,1,https://github.com/gimpycpu,"Added 2 new macros, arrappn and arrappda",2,[],https://github.com/nothings/stb/pull/1148,https://github.com/gimpycpu,2,https://github.com/nothings/stb/pull/1148#issuecomment-862215533,"Added 2 new macros
arrappn:
void arrappn(T* a, T* v, int n);
Appends n elements of v at the end of a, capacity might increase due to
arrsetcap being called
arrappda:
void arrappda(T* a, T* v);
Appends dynamic array v at the end of a, capacity might increase due to
arrsetcap being called
unless I missed something I dont think there were any?
I used them with success while pushing vertices, while loading a mesh data for example.
vec3* da = NULL;
//Iterate over all mesh
for (unsigned int i = 0; i < scene->mNumMeshes; i++)
{
    aiMesh* mesh = scene->mMeshes[i]; 
    stbds_arrappn(da, mesh->mVertices, mesh->mNumVertices); //append all vertices of the mesh to the dynamic array
}","Found an issue, fixing",True,{}
nothings/stb,https://github.com/nothings/stb,1150,2021-06-14T18:46:04Z,2021-07-12T00:23:12Z,2021-07-12T06:20:24Z,CLOSED,False,13,2,1,https://github.com/aganm,Attribute format,2,"['2 good-no changes needed', '1 stb_sprintf', '5 merged-dev']",https://github.com/nothings/stb/pull/1150,https://github.com/aganm,1,https://github.com/nothings/stb/pull/1150,To solve this issue #1149,To solve this issue #1149,True,{}
nothings/stb,https://github.com/nothings/stb,1150,2021-06-14T18:46:04Z,2021-07-12T00:23:12Z,2021-07-12T06:20:24Z,CLOSED,False,13,2,1,https://github.com/aganm,Attribute format,2,"['2 good-no changes needed', '1 stb_sprintf', '5 merged-dev']",https://github.com/nothings/stb/pull/1150,https://github.com/rygorous,2,https://github.com/nothings/stb/pull/1150#issuecomment-872593066,To solve this issue #1149,Merged into dev branch.,True,{}
nothings/stb,https://github.com/nothings/stb,1155,2021-07-04T02:38:23Z,2021-07-07T03:18:00Z,2021-07-07T09:18:37Z,CLOSED,False,2,2,1,https://github.com/jdeokkim,Fix typos in function prototypes in DOCUMENTATION,1,['1 stb_ds'],https://github.com/nothings/stb/pull/1155,https://github.com/jdeokkim,1,https://github.com/nothings/stb/pull/1155,Fixes small typos,Fixes small typos,True,{}
nothings/stb,https://github.com/nothings/stb,1155,2021-07-04T02:38:23Z,2021-07-07T03:18:00Z,2021-07-07T09:18:37Z,CLOSED,False,2,2,1,https://github.com/jdeokkim,Fix typos in function prototypes in DOCUMENTATION,1,['1 stb_ds'],https://github.com/nothings/stb/pull/1155,https://github.com/nothings,2,https://github.com/nothings/stb/pull/1155#issuecomment-873506758,Fixes small typos,"the  lack of semicolons is intentonal, not a typo",True,{'THUMBS_UP': ['https://github.com/jdeokkim']}
nothings/stb,https://github.com/nothings/stb,1155,2021-07-04T02:38:23Z,2021-07-07T03:18:00Z,2021-07-07T09:18:37Z,CLOSED,False,2,2,1,https://github.com/jdeokkim,Fix typos in function prototypes in DOCUMENTATION,1,['1 stb_ds'],https://github.com/nothings/stb/pull/1155,https://github.com/jdeokkim,3,https://github.com/nothings/stb/pull/1155#issuecomment-873526466,Fixes small typos,"@nothings I reverted the semicolon changes in the latest commit, could you check it out?",True,{'THUMBS_UP': ['https://github.com/nothings']}
nothings/stb,https://github.com/nothings/stb,1155,2021-07-04T02:38:23Z,2021-07-07T03:18:00Z,2021-07-07T09:18:37Z,CLOSED,False,2,2,1,https://github.com/jdeokkim,Fix typos in function prototypes in DOCUMENTATION,1,['1 stb_ds'],https://github.com/nothings/stb/pull/1155,https://github.com/rygorous,4,https://github.com/nothings/stb/pull/1155#issuecomment-875240687,Fixes small typos,"This is now fixed in the dev branch, although not via this PR. Closing.",True,{'THUMBS_UP': ['https://github.com/jdeokkim']}
nothings/stb,https://github.com/nothings/stb,1156,2021-07-04T07:37:35Z,2021-07-12T00:23:07Z,2021-07-12T00:23:07Z,CLOSED,False,17,0,1,https://github.com/a-e-k,stb_image_write: Store uncompressed if compression was worse,1,"['1 stb_image_write', '5 merged-dev']",https://github.com/nothings/stb/pull/1156,https://github.com/a-e-k,1,https://github.com/nothings/stb/pull/1156,"If the data was uncompressible and this deflate implementation expanded by more than the overhead of simply storing it uncompressed, fall back to deflate's uncompressed storage mode.  This bounds the worst-case maximum deflated size at the original size plus an overhead of 6 fixed bytes with another 5 bytes per 32767 byte block.","If the data was uncompressible and this deflate implementation expanded by more than the overhead of simply storing it uncompressed, fall back to deflate's uncompressed storage mode.  This bounds the worst-case maximum deflated size at the original size plus an overhead of 6 fixed bytes with another 5 bytes per 32767 byte block.",True,{}
nothings/stb,https://github.com/nothings/stb,1156,2021-07-04T07:37:35Z,2021-07-12T00:23:07Z,2021-07-12T00:23:07Z,CLOSED,False,17,0,1,https://github.com/a-e-k,stb_image_write: Store uncompressed if compression was worse,1,"['1 stb_image_write', '5 merged-dev']",https://github.com/nothings/stb/pull/1156,https://github.com/rygorous,2,https://github.com/nothings/stb/pull/1156#issuecomment-875450800,"If the data was uncompressible and this deflate implementation expanded by more than the overhead of simply storing it uncompressed, fall back to deflate's uncompressed storage mode.  This bounds the worst-case maximum deflated size at the original size plus an overhead of 6 fixed bytes with another 5 bytes per 32767 byte block.","Merged into dev branch, will be in the next release, thanks for the fix!",True,{}
nothings/stb,https://github.com/nothings/stb,1157,2021-07-04T07:57:20Z,,2022-05-03T08:36:07Z,OPEN,False,128,10,1,https://github.com/a-e-k,stb_image_write: Add writer for OpenEXR images,1,['1 stb_image_write'],https://github.com/nothings/stb/pull/1157,https://github.com/a-e-k,1,https://github.com/nothings/stb/pull/1157,"This writer takes linear float data and losslessly outputs files with the same number of components as the input.  The images it writes contain 32-bit full floats from the original data (half floats are not supported) stored with the ""ZIP"" compression mode which deflates blocks of scan lines.
As with the PNG writer, the files encoded with this writer are a bit bigger than those written by the reference OpenEXR library or by tinyexr.  This is because it relies on the same built-in zlib deflate code as the PNG writer (which can therefore be swapped out to mitigate this.)
I realize that there's some hesitancy about adding new image types to the image writer library.  However, I would argue that EXR is superior to the existing Radiance HDR format for HDR data:

It stores the original floating point data unmodified, rather than lossily reducing to RGBE.
It supports the full range of 1 to 4 components, and with the same interpretation as the PNG writer (Y, YA, RGB, or RGBA).
It compresses using zlib deflate instead of the more limited RLE.","This writer takes linear float data and losslessly outputs files with the same number of components as the input.  The images it writes contain 32-bit full floats from the original data (half floats are not supported) stored with the ""ZIP"" compression mode which deflates blocks of scan lines.
As with the PNG writer, the files encoded with this writer are a bit bigger than those written by the reference OpenEXR library or by tinyexr.  This is because it relies on the same built-in zlib deflate code as the PNG writer (which can therefore be swapped out to mitigate this.)
I realize that there's some hesitancy about adding new image types to the image writer library.  However, I would argue that EXR is superior to the existing Radiance HDR format for HDR data:

It stores the original floating point data unmodified, rather than lossily reducing to RGBE.
It supports the full range of 1 to 4 components, and with the same interpretation as the PNG writer (Y, YA, RGB, or RGBA).
It compresses using zlib deflate instead of the more limited RLE.",True,{}
nothings/stb,https://github.com/nothings/stb,1157,2021-07-04T07:57:20Z,,2022-05-03T08:36:07Z,OPEN,False,128,10,1,https://github.com/a-e-k,stb_image_write: Add writer for OpenEXR images,1,['1 stb_image_write'],https://github.com/nothings/stb/pull/1157,https://github.com/rygorous,2,https://github.com/nothings/stb/pull/1157#issuecomment-873550039,"This writer takes linear float data and losslessly outputs files with the same number of components as the input.  The images it writes contain 32-bit full floats from the original data (half floats are not supported) stored with the ""ZIP"" compression mode which deflates blocks of scan lines.
As with the PNG writer, the files encoded with this writer are a bit bigger than those written by the reference OpenEXR library or by tinyexr.  This is because it relies on the same built-in zlib deflate code as the PNG writer (which can therefore be swapped out to mitigate this.)
I realize that there's some hesitancy about adding new image types to the image writer library.  However, I would argue that EXR is superior to the existing Radiance HDR format for HDR data:

It stores the original floating point data unmodified, rather than lossily reducing to RGBE.
It supports the full range of 1 to 4 components, and with the same interpretation as the PNG writer (Y, YA, RGB, or RGBA).
It compresses using zlib deflate instead of the more limited RLE.","We definitely don't want new formats for stb_image, but stb_image_write is not as pressing a concern because unlike stb_image, adding new formats does not introduce new exploitation opportunities.
I'll need to have a look at this, but ~100 lines to add EXR support seems fairly reasonable.",True,{'THUMBS_UP': ['https://github.com/nothings']}
nothings/stb,https://github.com/nothings/stb,1157,2021-07-04T07:57:20Z,,2022-05-03T08:36:07Z,OPEN,False,128,10,1,https://github.com/a-e-k,stb_image_write: Add writer for OpenEXR images,1,['1 stb_image_write'],https://github.com/nothings/stb/pull/1157,https://github.com/a-e-k,3,https://github.com/nothings/stb/pull/1157#issuecomment-873924896,"This writer takes linear float data and losslessly outputs files with the same number of components as the input.  The images it writes contain 32-bit full floats from the original data (half floats are not supported) stored with the ""ZIP"" compression mode which deflates blocks of scan lines.
As with the PNG writer, the files encoded with this writer are a bit bigger than those written by the reference OpenEXR library or by tinyexr.  This is because it relies on the same built-in zlib deflate code as the PNG writer (which can therefore be swapped out to mitigate this.)
I realize that there's some hesitancy about adding new image types to the image writer library.  However, I would argue that EXR is superior to the existing Radiance HDR format for HDR data:

It stores the original floating point data unmodified, rather than lossily reducing to RGBE.
It supports the full range of 1 to 4 components, and with the same interpretation as the PNG writer (Y, YA, RGB, or RGBA).
It compresses using zlib deflate instead of the more limited RLE.","Thanks for considering this addition.  That's a very reasonable justification regarding stb_image.
One other benefit compared to HDR that I'd forgot to mention is that it should work fine with STBI_WRITE_NO_STDIO.
I did realize today after looking at pull request #1075, that line 1631 might be of concern to you since I type-punned via a pointer cast.  I can easily change that over to use the memcpy() method and amend the commit if you prefer.",True,{}
nothings/stb,https://github.com/nothings/stb,1157,2021-07-04T07:57:20Z,,2022-05-03T08:36:07Z,OPEN,False,128,10,1,https://github.com/a-e-k,stb_image_write: Add writer for OpenEXR images,1,['1 stb_image_write'],https://github.com/nothings/stb/pull/1157,https://github.com/meshula,4,https://github.com/nothings/stb/pull/1157#issuecomment-874248662,"This writer takes linear float data and losslessly outputs files with the same number of components as the input.  The images it writes contain 32-bit full floats from the original data (half floats are not supported) stored with the ""ZIP"" compression mode which deflates blocks of scan lines.
As with the PNG writer, the files encoded with this writer are a bit bigger than those written by the reference OpenEXR library or by tinyexr.  This is because it relies on the same built-in zlib deflate code as the PNG writer (which can therefore be swapped out to mitigate this.)
I realize that there's some hesitancy about adding new image types to the image writer library.  However, I would argue that EXR is superior to the existing Radiance HDR format for HDR data:

It stores the original floating point data unmodified, rather than lossily reducing to RGBE.
It supports the full range of 1 to 4 components, and with the same interpretation as the PNG writer (Y, YA, RGB, or RGBA).
It compresses using zlib deflate instead of the more limited RLE.","That's the smallest EXR writer I've ever seen! Speaking as one of the OpenEXR authors, I'd definitely use this to feed into a tools pipeline from systems that aren't linking OpenEXR. As a very minor suggestion, I think it would be straight forward to also support fp16 data with the framework you've got in place. It's less critical, but for tiny devices originating exr data, the much smaller file sizes might make a difference where memory and bandwidth are an issue. We get queries from embedded manufacturers from time to time, and with or without fp16, this will be a great thing to point them to.",True,{}
nothings/stb,https://github.com/nothings/stb,1157,2021-07-04T07:57:20Z,,2022-05-03T08:36:07Z,OPEN,False,128,10,1,https://github.com/a-e-k,stb_image_write: Add writer for OpenEXR images,1,['1 stb_image_write'],https://github.com/nothings/stb/pull/1157,https://github.com/nothings,5,https://github.com/nothings/stb/pull/1157#issuecomment-874330328,"This writer takes linear float data and losslessly outputs files with the same number of components as the input.  The images it writes contain 32-bit full floats from the original data (half floats are not supported) stored with the ""ZIP"" compression mode which deflates blocks of scan lines.
As with the PNG writer, the files encoded with this writer are a bit bigger than those written by the reference OpenEXR library or by tinyexr.  This is because it relies on the same built-in zlib deflate code as the PNG writer (which can therefore be swapped out to mitigate this.)
I realize that there's some hesitancy about adding new image types to the image writer library.  However, I would argue that EXR is superior to the existing Radiance HDR format for HDR data:

It stores the original floating point data unmodified, rather than lossily reducing to RGBE.
It supports the full range of 1 to 4 components, and with the same interpretation as the PNG writer (Y, YA, RGB, or RGBA).
It compresses using zlib deflate instead of the more limited RLE.","My biggest concern is that this leads to stb_image_write creating a file format that stb_image can't read, which I can 100% gaurantee will cause friction in the future.",True,{}
nothings/stb,https://github.com/nothings/stb,1157,2021-07-04T07:57:20Z,,2022-05-03T08:36:07Z,OPEN,False,128,10,1,https://github.com/a-e-k,stb_image_write: Add writer for OpenEXR images,1,['1 stb_image_write'],https://github.com/nothings/stb/pull/1157,https://github.com/nothings,6,https://github.com/nothings/stb/pull/1157#issuecomment-877889647,"This writer takes linear float data and losslessly outputs files with the same number of components as the input.  The images it writes contain 32-bit full floats from the original data (half floats are not supported) stored with the ""ZIP"" compression mode which deflates blocks of scan lines.
As with the PNG writer, the files encoded with this writer are a bit bigger than those written by the reference OpenEXR library or by tinyexr.  This is because it relies on the same built-in zlib deflate code as the PNG writer (which can therefore be swapped out to mitigate this.)
I realize that there's some hesitancy about adding new image types to the image writer library.  However, I would argue that EXR is superior to the existing Radiance HDR format for HDR data:

It stores the original floating point data unmodified, rather than lossily reducing to RGBE.
It supports the full range of 1 to 4 components, and with the same interpretation as the PNG writer (Y, YA, RGB, or RGBA).
It compresses using zlib deflate instead of the more limited RLE.","Given there's no way we're going to have an EXR reader, and the issue I raised about reading what we write, I think maybe the best solution is to separate this into its own library. One possibility is to release it yourself, in which case it will be clear that stb_image.h isn't expected to support it. We could release it as stb_image_write_exr.h, but I worry that will still create some expectations.",True,{}
nothings/stb,https://github.com/nothings/stb,1157,2021-07-04T07:57:20Z,,2022-05-03T08:36:07Z,OPEN,False,128,10,1,https://github.com/a-e-k,stb_image_write: Add writer for OpenEXR images,1,['1 stb_image_write'],https://github.com/nothings/stb/pull/1157,https://github.com/meshula,7,https://github.com/nothings/stb/pull/1157#issuecomment-877945721,"This writer takes linear float data and losslessly outputs files with the same number of components as the input.  The images it writes contain 32-bit full floats from the original data (half floats are not supported) stored with the ""ZIP"" compression mode which deflates blocks of scan lines.
As with the PNG writer, the files encoded with this writer are a bit bigger than those written by the reference OpenEXR library or by tinyexr.  This is because it relies on the same built-in zlib deflate code as the PNG writer (which can therefore be swapped out to mitigate this.)
I realize that there's some hesitancy about adding new image types to the image writer library.  However, I would argue that EXR is superior to the existing Radiance HDR format for HDR data:

It stores the original floating point data unmodified, rather than lossily reducing to RGBE.
It supports the full range of 1 to 4 components, and with the same interpretation as the PNG writer (Y, YA, RGB, or RGBA).
It compresses using zlib deflate instead of the more limited RLE.","Random thought - is there an ""idiomatic"" pattern to extend stb_image in this way outside of the stb repo? i.e. an accepted pattern for extending stb_image by reaching into it's guts? One option might be to pitch the OpenEXR TSC (I'm a TSC member) on the idea of hosting an exr writing stb extension in our OpenEXR/contrib area. If accompanied by a test, it could be added to our CI unit testing to verify that images from this extension are consumable by the full OpenEXR library....",True,{}
nothings/stb,https://github.com/nothings/stb,1157,2021-07-04T07:57:20Z,,2022-05-03T08:36:07Z,OPEN,False,128,10,1,https://github.com/a-e-k,stb_image_write: Add writer for OpenEXR images,1,['1 stb_image_write'],https://github.com/nothings/stb/pull/1157,https://github.com/a-e-k,8,https://github.com/nothings/stb/pull/1157#issuecomment-878824521,"This writer takes linear float data and losslessly outputs files with the same number of components as the input.  The images it writes contain 32-bit full floats from the original data (half floats are not supported) stored with the ""ZIP"" compression mode which deflates blocks of scan lines.
As with the PNG writer, the files encoded with this writer are a bit bigger than those written by the reference OpenEXR library or by tinyexr.  This is because it relies on the same built-in zlib deflate code as the PNG writer (which can therefore be swapped out to mitigate this.)
I realize that there's some hesitancy about adding new image types to the image writer library.  However, I would argue that EXR is superior to the existing Radiance HDR format for HDR data:

It stores the original floating point data unmodified, rather than lossily reducing to RGBE.
It supports the full range of 1 to 4 components, and with the same interpretation as the PNG writer (Y, YA, RGB, or RGBA).
It compresses using zlib deflate instead of the more limited RLE.","Thanks for the consideration.  I had a feeling you'd say that.
I'm not so sure that there's a clean way to extend stb_image_write by reaching into its guts from the outside.  If my implementation includes stb_image_write.h with STB_IMAGE_WRITE_IMPLEMENTATION defined so that it can use the zlib, then users would have to be warned not to also include stb_image_write.h with STB_IMAGE_WRITE_IMPLEMENTATION in their code or else they'll get clashes.  That's doable, I suppose, but feels a bit odd.  It leads me to think that a standalone library may be the best way to go.
Right now, I see one possibility as spinning this out as into separate library, pulling in the minimal zlib stuff from stb_image_write and changing the prefix to avoid clashes (with appropriate credit given, of course).  That would have all the usual downsides of a fork.  Or I could try my own hand at implementing deflate.  I'll have to ponder this.  Either way, I'm still keen on the idea of a very tiny stb_image{,_write}-style subset of EXR.  It's definitely an itch that I've had in the past.",True,{}
nothings/stb,https://github.com/nothings/stb,1157,2021-07-04T07:57:20Z,,2022-05-03T08:36:07Z,OPEN,False,128,10,1,https://github.com/a-e-k,stb_image_write: Add writer for OpenEXR images,1,['1 stb_image_write'],https://github.com/nothings/stb/pull/1157,https://github.com/nothings,9,https://github.com/nothings/stb/pull/1157#issuecomment-878894493,"This writer takes linear float data and losslessly outputs files with the same number of components as the input.  The images it writes contain 32-bit full floats from the original data (half floats are not supported) stored with the ""ZIP"" compression mode which deflates blocks of scan lines.
As with the PNG writer, the files encoded with this writer are a bit bigger than those written by the reference OpenEXR library or by tinyexr.  This is because it relies on the same built-in zlib deflate code as the PNG writer (which can therefore be swapped out to mitigate this.)
I realize that there's some hesitancy about adding new image types to the image writer library.  However, I would argue that EXR is superior to the existing Radiance HDR format for HDR data:

It stores the original floating point data unmodified, rather than lossily reducing to RGBE.
It supports the full range of 1 to 4 components, and with the same interpretation as the PNG writer (Y, YA, RGB, or RGBA).
It compresses using zlib deflate instead of the more limited RLE.","There's no way to progammatically extend stb_image. I imagine people have probably added requests for extensions to allow adding new formats externally, but it really doesn't make sense.
You can always wrap stbi_load in your own function which tries other loaders before/after trying stbi_load instead. You can even make this function take extra parameters as needed if EXR supports extra stuff that you want to expose.",True,{}
nothings/stb,https://github.com/nothings/stb,1157,2021-07-04T07:57:20Z,,2022-05-03T08:36:07Z,OPEN,False,128,10,1,https://github.com/a-e-k,stb_image_write: Add writer for OpenEXR images,1,['1 stb_image_write'],https://github.com/nothings/stb/pull/1157,https://github.com/cesss,10,https://github.com/nothings/stb/pull/1157#issuecomment-1115394268,"This writer takes linear float data and losslessly outputs files with the same number of components as the input.  The images it writes contain 32-bit full floats from the original data (half floats are not supported) stored with the ""ZIP"" compression mode which deflates blocks of scan lines.
As with the PNG writer, the files encoded with this writer are a bit bigger than those written by the reference OpenEXR library or by tinyexr.  This is because it relies on the same built-in zlib deflate code as the PNG writer (which can therefore be swapped out to mitigate this.)
I realize that there's some hesitancy about adding new image types to the image writer library.  However, I would argue that EXR is superior to the existing Radiance HDR format for HDR data:

It stores the original floating point data unmodified, rather than lossily reducing to RGBE.
It supports the full range of 1 to 4 components, and with the same interpretation as the PNG writer (Y, YA, RGB, or RGBA).
It compresses using zlib deflate instead of the more limited RLE.","I don't know if you are still following this, @a-e-k , but I'd love to have a C-only minimalistic OpenEXR loader+writer single-file lib. I'm not aware of any C implementation of OpenEXR, and there are situations where you really need C rather than C++. If this doesn't fit in stb_image[_write] I really encourage you to release your own lib, like Sean suggested. I would use it as soon as you release it.",True,{}
nothings/stb,https://github.com/nothings/stb,1157,2021-07-04T07:57:20Z,,2022-05-03T08:36:07Z,OPEN,False,128,10,1,https://github.com/a-e-k,stb_image_write: Add writer for OpenEXR images,1,['1 stb_image_write'],https://github.com/nothings/stb/pull/1157,https://github.com/meshula,11,https://github.com/nothings/stb/pull/1157#issuecomment-1115415380,"This writer takes linear float data and losslessly outputs files with the same number of components as the input.  The images it writes contain 32-bit full floats from the original data (half floats are not supported) stored with the ""ZIP"" compression mode which deflates blocks of scan lines.
As with the PNG writer, the files encoded with this writer are a bit bigger than those written by the reference OpenEXR library or by tinyexr.  This is because it relies on the same built-in zlib deflate code as the PNG writer (which can therefore be swapped out to mitigate this.)
I realize that there's some hesitancy about adding new image types to the image writer library.  However, I would argue that EXR is superior to the existing Radiance HDR format for HDR data:

It stores the original floating point data unmodified, rather than lossily reducing to RGBE.
It supports the full range of 1 to 4 components, and with the same interpretation as the PNG writer (Y, YA, RGB, or RGBA).
It compresses using zlib deflate instead of the more limited RLE.","@cesss OpenEXR is written in C. https://github.com/AcademySoftwareFoundation/openexr/tree/main/src/lib/OpenEXRCore
The C++ layer is ... a layer.
The nice thing about using the official library code is that it's guaranteed to work properly. There's no reason you couldn't combine the C files into a single C file if you want a minimal number of files ~ honestly if you look at any of the alternative implementations, they aren't any smaller than the actual library, they just tend to be really, really, long header files with an implementation macro guard.",True,{}
nothings/stb,https://github.com/nothings/stb,1157,2021-07-04T07:57:20Z,,2022-05-03T08:36:07Z,OPEN,False,128,10,1,https://github.com/a-e-k,stb_image_write: Add writer for OpenEXR images,1,['1 stb_image_write'],https://github.com/nothings/stb/pull/1157,https://github.com/a-e-k,12,https://github.com/nothings/stb/pull/1157#issuecomment-1115819954,"This writer takes linear float data and losslessly outputs files with the same number of components as the input.  The images it writes contain 32-bit full floats from the original data (half floats are not supported) stored with the ""ZIP"" compression mode which deflates blocks of scan lines.
As with the PNG writer, the files encoded with this writer are a bit bigger than those written by the reference OpenEXR library or by tinyexr.  This is because it relies on the same built-in zlib deflate code as the PNG writer (which can therefore be swapped out to mitigate this.)
I realize that there's some hesitancy about adding new image types to the image writer library.  However, I would argue that EXR is superior to the existing Radiance HDR format for HDR data:

It stores the original floating point data unmodified, rather than lossily reducing to RGBE.
It supports the full range of 1 to 4 components, and with the same interpretation as the PNG writer (Y, YA, RGB, or RGBA).
It compresses using zlib deflate instead of the more limited RLE.","@cesss -- Thanks for the nudge.  I actually had been working on a standalone single-file EXR writer lib.  But I also have another fun single-header library that I've been working on for a lot longer and wanted to finally get out the door first.  I'll definitely remember to comment on this thread, though, once I release the EXR writer.",True,{}
nothings/stb,https://github.com/nothings/stb,1157,2021-07-04T07:57:20Z,,2022-05-03T08:36:07Z,OPEN,False,128,10,1,https://github.com/a-e-k,stb_image_write: Add writer for OpenEXR images,1,['1 stb_image_write'],https://github.com/nothings/stb/pull/1157,https://github.com/cesss,13,https://github.com/nothings/stb/pull/1157#issuecomment-1115859727,"This writer takes linear float data and losslessly outputs files with the same number of components as the input.  The images it writes contain 32-bit full floats from the original data (half floats are not supported) stored with the ""ZIP"" compression mode which deflates blocks of scan lines.
As with the PNG writer, the files encoded with this writer are a bit bigger than those written by the reference OpenEXR library or by tinyexr.  This is because it relies on the same built-in zlib deflate code as the PNG writer (which can therefore be swapped out to mitigate this.)
I realize that there's some hesitancy about adding new image types to the image writer library.  However, I would argue that EXR is superior to the existing Radiance HDR format for HDR data:

It stores the original floating point data unmodified, rather than lossily reducing to RGBE.
It supports the full range of 1 to 4 components, and with the same interpretation as the PNG writer (Y, YA, RGB, or RGBA).
It compresses using zlib deflate instead of the more limited RLE.","Thanks a lot, @meshula and @a-e-k . I didn't know that the core of the OpenEXR lib was C. That's very interesting, and it certainly opens many possibilities!",True,{}
nothings/stb,https://github.com/nothings/stb,1158,2021-07-05T15:27:50Z,2021-07-12T00:22:57Z,2021-07-12T00:22:57Z,CLOSED,False,1,3,1,https://github.com/ocornut,stb_textedit: Fix paste failure handling breaking undo stack (could lead to freezes),1,"['2 good-no changes needed', '1 stb library w/no tag', '5 merged-dev']",https://github.com/nothings/stb/pull/1158,https://github.com/ocornut,1,https://github.com/nothings/stb/pull/1158,"This implement ""Fix v1"" described in #734 on the ground that it is simple.
(I can change it to ""Fix v2"" if deemed preferable)
Ended up spending a few hours researching and confirming this but in terms of crediting note that the actual fix was first suggested by Edward @Unit2Ed in #734.

The failure conditions that are fixed are:
(A)

pasting does happen but WITHOUT a selection, stb_textedit_delete_selection() doesn't insert a undo point
insertion fails
code erroneously removed undo point

and
(B)

pasting happens with a selection, but undo point cannot be created (deleted text larger than STB_TEXTEDIT_UNDOCHARCOUNT).
insertion fails
code erroneously removed undo point


Repro
ocornut/imgui#4038 has a repro which should be easy to replicate outside of Dear ImGui (by using same inputs sequence and same buffer size). Dear ImGui doesn't change the default value of STB_TEXTEDIT_UNDOCHARCOUNT/STB_TEXTEDIT_UNDOSTATECOUNT.","This implement ""Fix v1"" described in #734 on the ground that it is simple.
(I can change it to ""Fix v2"" if deemed preferable)
Ended up spending a few hours researching and confirming this but in terms of crediting note that the actual fix was first suggested by Edward @Unit2Ed in #734.

The failure conditions that are fixed are:
(A)

pasting does happen but WITHOUT a selection, stb_textedit_delete_selection() doesn't insert a undo point
insertion fails
code erroneously removed undo point

and
(B)

pasting happens with a selection, but undo point cannot be created (deleted text larger than STB_TEXTEDIT_UNDOCHARCOUNT).
insertion fails
code erroneously removed undo point


Repro
ocornut/imgui#4038 has a repro which should be easy to replicate outside of Dear ImGui (by using same inputs sequence and same buffer size). Dear ImGui doesn't change the default value of STB_TEXTEDIT_UNDOCHARCOUNT/STB_TEXTEDIT_UNDOSTATECOUNT.",True,{}
nothings/stb,https://github.com/nothings/stb,1158,2021-07-05T15:27:50Z,2021-07-12T00:22:57Z,2021-07-12T00:22:57Z,CLOSED,False,1,3,1,https://github.com/ocornut,stb_textedit: Fix paste failure handling breaking undo stack (could lead to freezes),1,"['2 good-no changes needed', '1 stb library w/no tag', '5 merged-dev']",https://github.com/nothings/stb/pull/1158,https://github.com/rygorous,2,https://github.com/nothings/stb/pull/1158#issuecomment-875246082,"This implement ""Fix v1"" described in #734 on the ground that it is simple.
(I can change it to ""Fix v2"" if deemed preferable)
Ended up spending a few hours researching and confirming this but in terms of crediting note that the actual fix was first suggested by Edward @Unit2Ed in #734.

The failure conditions that are fixed are:
(A)

pasting does happen but WITHOUT a selection, stb_textedit_delete_selection() doesn't insert a undo point
insertion fails
code erroneously removed undo point

and
(B)

pasting happens with a selection, but undo point cannot be created (deleted text larger than STB_TEXTEDIT_UNDOCHARCOUNT).
insertion fails
code erroneously removed undo point


Repro
ocornut/imgui#4038 has a repro which should be easy to replicate outside of Dear ImGui (by using same inputs sequence and same buffer size). Dear ImGui doesn't change the default value of STB_TEXTEDIT_UNDOCHARCOUNT/STB_TEXTEDIT_UNDOSTATECOUNT.","LGTM, merged into dev branch, will be in the next release.",True,{}
nothings/stb,https://github.com/nothings/stb,1160,2021-07-09T11:18:44Z,2021-07-09T11:20:21Z,2021-07-09T11:20:22Z,CLOSED,False,1130,2140,26,https://github.com/ocornut,stb_rect_pack: making sort functions cdecl,132,[],https://github.com/nothings/stb/pull/1160,https://github.com/ocornut,1,https://github.com/nothings/stb/pull/1160,"Hello,
If you use stb_rect_pack without redefining STBRP_SORT it'll call qsort(), which expect the compare function to be using CDECL calling convention. If the default calling convention of the compile unit is not cdecl, compiler will choke on calling qsort rect_height_compare() and rect_original_order().
I solved this on my side by adding a STBRP__CDECL  to those functions, based on the ground it won't hurt if those functions are always cdecl.
Grepping qsort in stb/ folder the only other uses are: stb.h (ignoring) and stb_vorbis.c, which for the 2 functions used with qsort() does a similar thing:
#ifdef _MSC_VER
#define STBV_CDECL __cdecl
#else
#define STBV_CDECL
#endif

static int STBV_CDECL uint32_compare(const void *p, const void *q)
{
   uint32 x = * (uint32 *) p;
   uint32 y = * (uint32 *) q;
   return x < y ? -1 : x > y;
}","Hello,
If you use stb_rect_pack without redefining STBRP_SORT it'll call qsort(), which expect the compare function to be using CDECL calling convention. If the default calling convention of the compile unit is not cdecl, compiler will choke on calling qsort rect_height_compare() and rect_original_order().
I solved this on my side by adding a STBRP__CDECL  to those functions, based on the ground it won't hurt if those functions are always cdecl.
Grepping qsort in stb/ folder the only other uses are: stb.h (ignoring) and stb_vorbis.c, which for the 2 functions used with qsort() does a similar thing:
#ifdef _MSC_VER
#define STBV_CDECL __cdecl
#else
#define STBV_CDECL
#endif

static int STBV_CDECL uint32_compare(const void *p, const void *q)
{
   uint32 x = * (uint32 *) p;
   uint32 y = * (uint32 *) q;
   return x < y ? -1 : x > y;
}",True,{}
nothings/stb,https://github.com/nothings/stb,1160,2021-07-09T11:18:44Z,2021-07-09T11:20:21Z,2021-07-09T11:20:22Z,CLOSED,False,1130,2140,26,https://github.com/ocornut,stb_rect_pack: making sort functions cdecl,132,[],https://github.com/nothings/stb/pull/1160,https://github.com/ocornut,2,https://github.com/nothings/stb/pull/1160#issuecomment-877113609,"Hello,
If you use stb_rect_pack without redefining STBRP_SORT it'll call qsort(), which expect the compare function to be using CDECL calling convention. If the default calling convention of the compile unit is not cdecl, compiler will choke on calling qsort rect_height_compare() and rect_original_order().
I solved this on my side by adding a STBRP__CDECL  to those functions, based on the ground it won't hurt if those functions are always cdecl.
Grepping qsort in stb/ folder the only other uses are: stb.h (ignoring) and stb_vorbis.c, which for the 2 functions used with qsort() does a similar thing:
#ifdef _MSC_VER
#define STBV_CDECL __cdecl
#else
#define STBV_CDECL
#endif

static int STBV_CDECL uint32_compare(const void *p, const void *q)
{
   uint32 x = * (uint32 *) p;
   uint32 y = * (uint32 *) q;
   return x < y ? -1 : x > y;
}","Apologies made PR based on dev against master leading to commit spam, closing this and reopening fixed now.",True,{}
nothings/stb,https://github.com/nothings/stb,1161,2021-07-09T11:22:02Z,2021-07-16T01:39:53Z,2021-07-16T11:03:32Z,CLOSED,False,4,2,1,https://github.com/ocornut,stb_rect_pack: making functions cdecl for msvc qsort,1,"['2 good-no changes needed', 'stb_rect_pack', '5 merged-dev']",https://github.com/nothings/stb/pull/1161,https://github.com/ocornut,1,https://github.com/nothings/stb/pull/1161,"(redoing #1160 without the branch fuckup)
Hello,
If you use stb_rect_pack without redefining STBRP_SORT it'll call qsort(), which expect the compare function to be using CDECL calling convention. If the default calling convention of the compile unit is not cdecl, compiler will choke on calling qsort rect_height_compare() and rect_original_order().
I solved this on my side by adding a STBRP__CDECL  to those functions, based on the ground it won't hurt if those functions are always cdecl.
Grepping qsort in stb/ folder the only other uses are: stb.h (ignoring) and stb_vorbis.c, which for the 2 functions used with qsort() does a similar thing:
#ifdef _MSC_VER
#define STBV_CDECL __cdecl
#else
#define STBV_CDECL
#endif

static int STBV_CDECL uint32_compare(const void *p, const void *q)
{
   uint32 x = * (uint32 *) p;
   uint32 y = * (uint32 *) q;
   return x < y ? -1 : x > y;
}","(redoing #1160 without the branch fuckup)
Hello,
If you use stb_rect_pack without redefining STBRP_SORT it'll call qsort(), which expect the compare function to be using CDECL calling convention. If the default calling convention of the compile unit is not cdecl, compiler will choke on calling qsort rect_height_compare() and rect_original_order().
I solved this on my side by adding a STBRP__CDECL  to those functions, based on the ground it won't hurt if those functions are always cdecl.
Grepping qsort in stb/ folder the only other uses are: stb.h (ignoring) and stb_vorbis.c, which for the 2 functions used with qsort() does a similar thing:
#ifdef _MSC_VER
#define STBV_CDECL __cdecl
#else
#define STBV_CDECL
#endif

static int STBV_CDECL uint32_compare(const void *p, const void *q)
{
   uint32 x = * (uint32 *) p;
   uint32 y = * (uint32 *) q;
   return x < y ? -1 : x > y;
}",True,{}
nothings/stb,https://github.com/nothings/stb,1161,2021-07-09T11:22:02Z,2021-07-16T01:39:53Z,2021-07-16T11:03:32Z,CLOSED,False,4,2,1,https://github.com/ocornut,stb_rect_pack: making functions cdecl for msvc qsort,1,"['2 good-no changes needed', 'stb_rect_pack', '5 merged-dev']",https://github.com/nothings/stb/pull/1161,https://github.com/rygorous,2,https://github.com/nothings/stb/pull/1161#issuecomment-877541605,"(redoing #1160 without the branch fuckup)
Hello,
If you use stb_rect_pack without redefining STBRP_SORT it'll call qsort(), which expect the compare function to be using CDECL calling convention. If the default calling convention of the compile unit is not cdecl, compiler will choke on calling qsort rect_height_compare() and rect_original_order().
I solved this on my side by adding a STBRP__CDECL  to those functions, based on the ground it won't hurt if those functions are always cdecl.
Grepping qsort in stb/ folder the only other uses are: stb.h (ignoring) and stb_vorbis.c, which for the 2 functions used with qsort() does a similar thing:
#ifdef _MSC_VER
#define STBV_CDECL __cdecl
#else
#define STBV_CDECL
#endif

static int STBV_CDECL uint32_compare(const void *p, const void *q)
{
   uint32 x = * (uint32 *) p;
   uint32 y = * (uint32 *) q;
   return x < y ? -1 : x > y;
}","Merged into dev branch, will be in the next release. (Ignore the CIFuzz failure, that's a problem with the CIFuzz integration, talking to Randy about how to debug that.)",True,{}
nothings/stb,https://github.com/nothings/stb,1161,2021-07-09T11:22:02Z,2021-07-16T01:39:53Z,2021-07-16T11:03:32Z,CLOSED,False,4,2,1,https://github.com/ocornut,stb_rect_pack: making functions cdecl for msvc qsort,1,"['2 good-no changes needed', 'stb_rect_pack', '5 merged-dev']",https://github.com/nothings/stb/pull/1161,https://github.com/nothings,3,https://github.com/nothings/stb/pull/1161#issuecomment-881158465,"(redoing #1160 without the branch fuckup)
Hello,
If you use stb_rect_pack without redefining STBRP_SORT it'll call qsort(), which expect the compare function to be using CDECL calling convention. If the default calling convention of the compile unit is not cdecl, compiler will choke on calling qsort rect_height_compare() and rect_original_order().
I solved this on my side by adding a STBRP__CDECL  to those functions, based on the ground it won't hurt if those functions are always cdecl.
Grepping qsort in stb/ folder the only other uses are: stb.h (ignoring) and stb_vorbis.c, which for the 2 functions used with qsort() does a similar thing:
#ifdef _MSC_VER
#define STBV_CDECL __cdecl
#else
#define STBV_CDECL
#endif

static int STBV_CDECL uint32_compare(const void *p, const void *q)
{
   uint32 x = * (uint32 *) p;
   uint32 y = * (uint32 *) q;
   return x < y ? -1 : x > y;
}","@rygorous, this includes a report about it being a potential issue in vorbis, has that been addressed or is there a separate issue for it?",True,{}
nothings/stb,https://github.com/nothings/stb,1161,2021-07-09T11:22:02Z,2021-07-16T01:39:53Z,2021-07-16T11:03:32Z,CLOSED,False,4,2,1,https://github.com/ocornut,stb_rect_pack: making functions cdecl for msvc qsort,1,"['2 good-no changes needed', 'stb_rect_pack', '5 merged-dev']",https://github.com/nothings/stb/pull/1161,https://github.com/ocornut,4,https://github.com/nothings/stb/pull/1161#issuecomment-881274475,"(redoing #1160 without the branch fuckup)
Hello,
If you use stb_rect_pack without redefining STBRP_SORT it'll call qsort(), which expect the compare function to be using CDECL calling convention. If the default calling convention of the compile unit is not cdecl, compiler will choke on calling qsort rect_height_compare() and rect_original_order().
I solved this on my side by adding a STBRP__CDECL  to those functions, based on the ground it won't hurt if those functions are always cdecl.
Grepping qsort in stb/ folder the only other uses are: stb.h (ignoring) and stb_vorbis.c, which for the 2 functions used with qsort() does a similar thing:
#ifdef _MSC_VER
#define STBV_CDECL __cdecl
#else
#define STBV_CDECL
#endif

static int STBV_CDECL uint32_compare(const void *p, const void *q)
{
   uint32 x = * (uint32 *) p;
   uint32 y = * (uint32 *) q;
   return x < y ? -1 : x > y;
}","Not an issue, was using this as an exemple that you already solved the same problem in the same way in stb_vorbis",True,{'THUMBS_UP': ['https://github.com/nothings']}
nothings/stb,https://github.com/nothings/stb,1161,2021-07-09T11:22:02Z,2021-07-16T01:39:53Z,2021-07-16T11:03:32Z,CLOSED,False,4,2,1,https://github.com/ocornut,stb_rect_pack: making functions cdecl for msvc qsort,1,"['2 good-no changes needed', 'stb_rect_pack', '5 merged-dev']",https://github.com/nothings/stb/pull/1161,https://github.com/nothings,5,https://github.com/nothings/stb/pull/1161#issuecomment-881364980,"(redoing #1160 without the branch fuckup)
Hello,
If you use stb_rect_pack without redefining STBRP_SORT it'll call qsort(), which expect the compare function to be using CDECL calling convention. If the default calling convention of the compile unit is not cdecl, compiler will choke on calling qsort rect_height_compare() and rect_original_order().
I solved this on my side by adding a STBRP__CDECL  to those functions, based on the ground it won't hurt if those functions are always cdecl.
Grepping qsort in stb/ folder the only other uses are: stb.h (ignoring) and stb_vorbis.c, which for the 2 functions used with qsort() does a similar thing:
#ifdef _MSC_VER
#define STBV_CDECL __cdecl
#else
#define STBV_CDECL
#endif

static int STBV_CDECL uint32_compare(const void *p, const void *q)
{
   uint32 x = * (uint32 *) p;
   uint32 y = * (uint32 *) q;
   return x < y ? -1 : x > y;
}","Ah, I read it reversed from that. All good!",True,{}
nothings/stb,https://github.com/nothings/stb,1165,2021-07-11T20:21:37Z,2021-07-11T20:28:24Z,2021-07-11T20:32:51Z,MERGED,True,6,6,1,https://github.com/randy408,Fix CIFuzz integration,2,[],https://github.com/nothings/stb/pull/1165,https://github.com/randy408,1,https://github.com/nothings/stb/pull/1165,"Follow-up from #1058 (comment), by the way changes to the Dockerfile didn't break builds with master and everything should keep working after the merge, the solution wasn't that messy: https://github.com/google/oss-fuzz/pull/6023/files#diff-37336c5e77cb828028037c3ed7fa8f099fa00a0d25693f6b3f612e46bd119557R35","Follow-up from #1058 (comment), by the way changes to the Dockerfile didn't break builds with master and everything should keep working after the merge, the solution wasn't that messy: https://github.com/google/oss-fuzz/pull/6023/files#diff-37336c5e77cb828028037c3ed7fa8f099fa00a0d25693f6b3f612e46bd119557R35",True,{}
nothings/stb,https://github.com/nothings/stb,1165,2021-07-11T20:21:37Z,2021-07-11T20:28:24Z,2021-07-11T20:32:51Z,MERGED,True,6,6,1,https://github.com/randy408,Fix CIFuzz integration,2,[],https://github.com/nothings/stb/pull/1165,https://github.com/randy408,2,https://github.com/nothings/stb/pull/1165#issuecomment-877856914,"Follow-up from #1058 (comment), by the way changes to the Dockerfile didn't break builds with master and everything should keep working after the merge, the solution wasn't that messy: https://github.com/google/oss-fuzz/pull/6023/files#diff-37336c5e77cb828028037c3ed7fa8f099fa00a0d25693f6b3f612e46bd119557R35","Changes to the Dockerfile were merged a couple minutes ago, based on the logs CIFuzz is still using the older revision, might take a day for it to update.",True,"{'THUMBS_UP': ['https://github.com/nothings', 'https://github.com/rygorous']}"
nothings/stb,https://github.com/nothings/stb,1169,2021-07-15T16:01:59Z,,2021-07-31T20:57:03Z,OPEN,False,1,1,1,https://github.com/SkaillZ,Fix issue in stb_tilemap_editor.h which caused tiles in palette to be rendered incorrectly,1,"['2 bug', '2 good-no changes needed', '1 stb library w/no tag']",https://github.com/nothings/stb/pull/1169,https://github.com/SkaillZ,1,https://github.com/nothings/stb/pull/1169,"The STBTE__ID was used instead of the ID, so an incorrect ID was passed to the STBTE_DRAW_TILE function.","The STBTE__ID was used instead of the ID, so an incorrect ID was passed to the STBTE_DRAW_TILE function.",True,{}
nothings/stb,https://github.com/nothings/stb,1169,2021-07-15T16:01:59Z,,2021-07-31T20:57:03Z,OPEN,False,1,1,1,https://github.com/SkaillZ,Fix issue in stb_tilemap_editor.h which caused tiles in palette to be rendered incorrectly,1,"['2 bug', '2 good-no changes needed', '1 stb library w/no tag']",https://github.com/nothings/stb/pull/1169,https://github.com/nothings,2,https://github.com/nothings/stb/pull/1169#issuecomment-880831548,"The STBTE__ID was used instead of the ID, so an incorrect ID was passed to the STBTE_DRAW_TILE function.","I don't think that fix is correct, you don't want to send back the internal slot number. It's only working because you're assigning IDs from 0..n-1 which matches the internal slot number. I think the correct value is t->id, but I haven't tested.",True,{}
nothings/stb,https://github.com/nothings/stb,1169,2021-07-15T16:01:59Z,,2021-07-31T20:57:03Z,OPEN,False,1,1,1,https://github.com/SkaillZ,Fix issue in stb_tilemap_editor.h which caused tiles in palette to be rendered incorrectly,1,"['2 bug', '2 good-no changes needed', '1 stb library w/no tag']",https://github.com/nothings/stb/pull/1169,https://github.com/SkaillZ,3,https://github.com/nothings/stb/pull/1169#issuecomment-880875910,"The STBTE__ID was used instead of the ID, so an incorrect ID was passed to the STBTE_DRAW_TILE function.","ah right thanks, I've updated it to use t->id",True,{'THUMBS_UP': ['https://github.com/nothings']}
nothings/stb,https://github.com/nothings/stb,1169,2021-07-15T16:01:59Z,,2021-07-31T20:57:03Z,OPEN,False,1,1,1,https://github.com/SkaillZ,Fix issue in stb_tilemap_editor.h which caused tiles in palette to be rendered incorrectly,1,"['2 bug', '2 good-no changes needed', '1 stb library w/no tag']",https://github.com/nothings/stb/pull/1169,https://github.com/SushilRagoonath,4,https://github.com/nothings/stb/pull/1169#issuecomment-890403176,"The STBTE__ID was used instead of the ID, so an incorrect ID was passed to the STBTE_DRAW_TILE function.","Thanks for this fix, saved me from debugging it myself",True,{}
nothings/stb,https://github.com/nothings/stb,1172,2021-07-16T00:42:53Z,,2021-07-16T01:39:14Z,OPEN,False,5,2,1,https://github.com/AliceLR,stb_vorbis: fix -Wmaybe-uninitialized warnings in get_seek_page_info.,1,"['1 stb_vorbis', '2 good-no changes needed']",https://github.com/nothings/stb/pull/1172,https://github.com/AliceLR,1,https://github.com/nothings/stb/pull/1172,"The first of what should be several patches I'm porting from libxmp: with some configurations that I haven't 100% pinned down (edit: it looks like STB_VORBIS_NO_STDIO is sufficient to cause it with MSYS2/MINGW64 GCC 10.3.0), line 4653 can cause compilers to emit -Wmaybe-uninitialized warnings. The easy fix for this (and potentially other UMRs in this function) is to just check the return values of the two uses of getn in this function.","The first of what should be several patches I'm porting from libxmp: with some configurations that I haven't 100% pinned down (edit: it looks like STB_VORBIS_NO_STDIO is sufficient to cause it with MSYS2/MINGW64 GCC 10.3.0), line 4653 can cause compilers to emit -Wmaybe-uninitialized warnings. The easy fix for this (and potentially other UMRs in this function) is to just check the return values of the two uses of getn in this function.",True,{}
nothings/stb,https://github.com/nothings/stb,1173,2021-07-16T01:49:50Z,,2021-07-16T04:02:54Z,OPEN,False,16,0,1,https://github.com/AliceLR,stb_vorbis: add STB_VORBIS_NO_COMMENTS to allow disabling comments.,1,"['4 enhancement', '1 stb_vorbis']",https://github.com/nothings/stb/pull/1173,https://github.com/AliceLR,1,https://github.com/nothings/stb/pull/1173,"Another patch from libxmp, this time by @ccawley2011 (based on a separate patch by @sezero): adds a STB_VORBIS_NO_COMMENTS define to allow turning off comments support. This probably doesn't reduce code size very much, but being able to disallow arbitrary-sized allocations when they aren't needed seems useful.
edit: sample OGG file that attempts a large allocation via comments, pulled from a fuzzer file. absurd_comment_size.ogg.zip","Another patch from libxmp, this time by @ccawley2011 (based on a separate patch by @sezero): adds a STB_VORBIS_NO_COMMENTS define to allow turning off comments support. This probably doesn't reduce code size very much, but being able to disallow arbitrary-sized allocations when they aren't needed seems useful.
edit: sample OGG file that attempts a large allocation via comments, pulled from a fuzzer file. absurd_comment_size.ogg.zip",True,{}
nothings/stb,https://github.com/nothings/stb,1173,2021-07-16T01:49:50Z,,2021-07-16T04:02:54Z,OPEN,False,16,0,1,https://github.com/AliceLR,stb_vorbis: add STB_VORBIS_NO_COMMENTS to allow disabling comments.,1,"['4 enhancement', '1 stb_vorbis']",https://github.com/nothings/stb/pull/1173,https://github.com/nothings,2,https://github.com/nothings/stb/pull/1173#issuecomment-881159276,"Another patch from libxmp, this time by @ccawley2011 (based on a separate patch by @sezero): adds a STB_VORBIS_NO_COMMENTS define to allow turning off comments support. This probably doesn't reduce code size very much, but being able to disallow arbitrary-sized allocations when they aren't needed seems useful.
edit: sample OGG file that attempts a large allocation via comments, pulled from a fuzzer file. absurd_comment_size.ogg.zip","I believe this would be better solved by addressing #937, which would be more flexible and addresses the core issue.",True,{'THUMBS_UP': ['https://github.com/AliceLR']}
nothings/stb,https://github.com/nothings/stb,1174,2021-07-16T03:50:15Z,,2022-01-01T11:48:30Z,OPEN,False,46,17,1,https://github.com/AliceLR,stb_vorbis: fix slow loads and leaks in start_decoder.,2,"['2 bug', '1 stb_vorbis']",https://github.com/nothings/stb/pull/1174,https://github.com/AliceLR,1,https://github.com/nothings/stb/pull/1174,"This patch from libxmp fixes the following issues:

Error checks in start_decoder when loading the lengths could return without freeing the lengths array, causing leaks. OGG_leaks.zip
Missing EOF checks in start_decoder could contribute to very slow loads with corrupt/invalid files. This includes one check that originally checked for an EOP return value from get_bits—as far as I can tell, get_bits never actually returns this value. I don't remember exactly which of these missing checks contributed the most to slow loads, but IIRC I added most of them after reading values that get iterated on by loops. OGG_slow_loads.zip","This patch from libxmp fixes the following issues:

Error checks in start_decoder when loading the lengths could return without freeing the lengths array, causing leaks. OGG_leaks.zip
Missing EOF checks in start_decoder could contribute to very slow loads with corrupt/invalid files. This includes one check that originally checked for an EOP return value from get_bits—as far as I can tell, get_bits never actually returns this value. I don't remember exactly which of these missing checks contributed the most to slow loads, but IIRC I added most of them after reading values that get iterated on by loops. OGG_slow_loads.zip",True,{}
nothings/stb,https://github.com/nothings/stb,1174,2021-07-16T03:50:15Z,,2022-01-01T11:48:30Z,OPEN,False,46,17,1,https://github.com/AliceLR,stb_vorbis: fix slow loads and leaks in start_decoder.,2,"['2 bug', '1 stb_vorbis']",https://github.com/nothings/stb/pull/1174,https://github.com/nothings,2,https://github.com/nothings/stb/pull/1174#issuecomment-881162741,"This patch from libxmp fixes the following issues:

Error checks in start_decoder when loading the lengths could return without freeing the lengths array, causing leaks. OGG_leaks.zip
Missing EOF checks in start_decoder could contribute to very slow loads with corrupt/invalid files. This includes one check that originally checked for an EOP return value from get_bits—as far as I can tell, get_bits never actually returns this value. I don't remember exactly which of these missing checks contributed the most to slow loads, but IIRC I added most of them after reading values that get iterated on by loops. OGG_slow_loads.zip","This looks reasonable, but I wonder if we should instead do some systematic thing for the setup_temp_frees where they're all tracked and vorbis_deinit() cleans them up if they didn't get deallocated explicitly. I.e. make 'setup temp free' explicitly zero the pointer it's handed, and then they're all explicitly stored off of f-> or c->. If you're using f->alloc.alloc_buffer we do nothing with temp mem during deinit(), which means deinit() doesn't have to worry about freeing the allocations in stack order.",True,{}
nothings/stb,https://github.com/nothings/stb,1174,2021-07-16T03:50:15Z,,2022-01-01T11:48:30Z,OPEN,False,46,17,1,https://github.com/AliceLR,stb_vorbis: fix slow loads and leaks in start_decoder.,2,"['2 bug', '1 stb_vorbis']",https://github.com/nothings/stb/pull/1174,https://github.com/AliceLR,3,https://github.com/nothings/stb/pull/1174#issuecomment-881216179,"This patch from libxmp fixes the following issues:

Error checks in start_decoder when loading the lengths could return without freeing the lengths array, causing leaks. OGG_leaks.zip
Missing EOF checks in start_decoder could contribute to very slow loads with corrupt/invalid files. This includes one check that originally checked for an EOP return value from get_bits—as far as I can tell, get_bits never actually returns this value. I don't remember exactly which of these missing checks contributed the most to slow loads, but IIRC I added most of them after reading values that get iterated on by loops. OGG_slow_loads.zip",I pushed an update that implements (roughly) what you described. Since the buffers are never allocated for more than one codebook at a time I put them all in f->.,True,{}
nothings/stb,https://github.com/nothings/stb,1174,2021-07-16T03:50:15Z,,2022-01-01T11:48:30Z,OPEN,False,46,17,1,https://github.com/AliceLR,stb_vorbis: fix slow loads and leaks in start_decoder.,2,"['2 bug', '1 stb_vorbis']",https://github.com/nothings/stb/pull/1174,https://github.com/nothings,4,https://github.com/nothings/stb/pull/1174#issuecomment-881227952,"This patch from libxmp fixes the following issues:

Error checks in start_decoder when loading the lengths could return without freeing the lengths array, causing leaks. OGG_leaks.zip
Missing EOF checks in start_decoder could contribute to very slow loads with corrupt/invalid files. This includes one check that originally checked for an EOP return value from get_bits—as far as I can tell, get_bits never actually returns this value. I don't remember exactly which of these missing checks contributed the most to slow loads, but IIRC I added most of them after reading values that get iterated on by loops. OGG_slow_loads.zip","Looks good to me with github diff, I'll need to review it more carefully in the full file.",True,{}
nothings/stb,https://github.com/nothings/stb,1174,2021-07-16T03:50:15Z,,2022-01-01T11:48:30Z,OPEN,False,46,17,1,https://github.com/AliceLR,stb_vorbis: fix slow loads and leaks in start_decoder.,2,"['2 bug', '1 stb_vorbis']",https://github.com/nothings/stb/pull/1174,https://github.com/AliceLR,5,https://github.com/nothings/stb/pull/1174#issuecomment-881287288,"This patch from libxmp fixes the following issues:

Error checks in start_decoder when loading the lengths could return without freeing the lengths array, causing leaks. OGG_leaks.zip
Missing EOF checks in start_decoder could contribute to very slow loads with corrupt/invalid files. This includes one check that originally checked for an EOP return value from get_bits—as far as I can tell, get_bits never actually returns this value. I don't remember exactly which of these missing checks contributed the most to slow loads, but IIRC I added most of them after reading values that get iterated on by loops. OGG_slow_loads.zip","Ran a brief libFuzzer+ASan run on this patch and it looks like there are still issues to work out—will update.
edit: specifically the issue is that storing the temporary codewords allocation to both c->codewords and f->temp_codewords predictably causes issues in vorbis_deinit.",True,{}
nothings/stb,https://github.com/nothings/stb,1174,2021-07-16T03:50:15Z,,2022-01-01T11:48:30Z,OPEN,False,46,17,1,https://github.com/AliceLR,stb_vorbis: fix slow loads and leaks in start_decoder.,2,"['2 bug', '1 stb_vorbis']",https://github.com/nothings/stb/pull/1174,https://github.com/nothings,6,https://github.com/nothings/stb/pull/1174#issuecomment-881372056,"This patch from libxmp fixes the following issues:

Error checks in start_decoder when loading the lengths could return without freeing the lengths array, causing leaks. OGG_leaks.zip
Missing EOF checks in start_decoder could contribute to very slow loads with corrupt/invalid files. This includes one check that originally checked for an EOP return value from get_bits—as far as I can tell, get_bits never actually returns this value. I don't remember exactly which of these missing checks contributed the most to slow loads, but IIRC I added most of them after reading values that get iterated on by loops. OGG_slow_loads.zip","Do you have more tests you can run, or is that it?",True,{}
nothings/stb,https://github.com/nothings/stb,1174,2021-07-16T03:50:15Z,,2022-01-01T11:48:30Z,OPEN,False,46,17,1,https://github.com/AliceLR,stb_vorbis: fix slow loads and leaks in start_decoder.,2,"['2 bug', '1 stb_vorbis']",https://github.com/nothings/stb/pull/1174,https://github.com/AliceLR,7,https://github.com/nothings/stb/pull/1174#issuecomment-881403370,"This patch from libxmp fixes the following issues:

Error checks in start_decoder when loading the lengths could return without freeing the lengths array, causing leaks. OGG_leaks.zip
Missing EOF checks in start_decoder could contribute to very slow loads with corrupt/invalid files. This includes one check that originally checked for an EOP return value from get_bits—as far as I can tell, get_bits never actually returns this value. I don't remember exactly which of these missing checks contributed the most to slow loads, but IIRC I added most of them after reading values that get iterated on by loops. OGG_slow_loads.zip","I don't have any other tests that would be relevant to finding leaks/double frees, nor do I have a particularly good variety of invalid files to test against. No other issues related to this patch have showed up yet in my limited fuzzing.",True,{}
nothings/stb,https://github.com/nothings/stb,1174,2021-07-16T03:50:15Z,,2022-01-01T11:48:30Z,OPEN,False,46,17,1,https://github.com/AliceLR,stb_vorbis: fix slow loads and leaks in start_decoder.,2,"['2 bug', '1 stb_vorbis']",https://github.com/nothings/stb/pull/1174,https://github.com/AliceLR,8,https://github.com/nothings/stb/pull/1174#issuecomment-881739948,"This patch from libxmp fixes the following issues:

Error checks in start_decoder when loading the lengths could return without freeing the lengths array, causing leaks. OGG_leaks.zip
Missing EOF checks in start_decoder could contribute to very slow loads with corrupt/invalid files. This includes one check that originally checked for an EOP return value from get_bits—as far as I can tell, get_bits never actually returns this value. I don't remember exactly which of these missing checks contributed the most to slow loads, but IIRC I added most of them after reading values that get iterated on by loops. OGG_slow_loads.zip","My tester found some new slow load cases that might be due to another missed EOF check here, will follow up again: OGG_slow_loads2.zip
No further crashes related to this patch, though it looks like there may be an unrelated buffer overflow in codebook_decode_deinterleave_repeat.",True,{}
nothings/stb,https://github.com/nothings/stb,1174,2021-07-16T03:50:15Z,,2022-01-01T11:48:30Z,OPEN,False,46,17,1,https://github.com/AliceLR,stb_vorbis: fix slow loads and leaks in start_decoder.,2,"['2 bug', '1 stb_vorbis']",https://github.com/nothings/stb/pull/1174,https://github.com/AliceLR,9,https://github.com/nothings/stb/pull/1174#issuecomment-881743258,"This patch from libxmp fixes the following issues:

Error checks in start_decoder when loading the lengths could return without freeing the lengths array, causing leaks. OGG_leaks.zip
Missing EOF checks in start_decoder could contribute to very slow loads with corrupt/invalid files. This includes one check that originally checked for an EOP return value from get_bits—as far as I can tell, get_bits never actually returns this value. I don't remember exactly which of these missing checks contributed the most to slow loads, but IIRC I added most of them after reading values that get iterated on by loops. OGG_slow_loads.zip","It looks like the path the slow loads follow is valid: when ordered is true, the codebook can contain an absurd number of entries without needing to read most of them. There is an EOF check for this, it just doesn't read enough data to matter. (The slow portion of the load is calling qsort on 16m entries.)",True,{}
nothings/stb,https://github.com/nothings/stb,1174,2021-07-16T03:50:15Z,,2022-01-01T11:48:30Z,OPEN,False,46,17,1,https://github.com/AliceLR,stb_vorbis: fix slow loads and leaks in start_decoder.,2,"['2 bug', '1 stb_vorbis']",https://github.com/nothings/stb/pull/1174,https://github.com/AliceLR,10,https://github.com/nothings/stb/pull/1174#issuecomment-1003546721,"This patch from libxmp fixes the following issues:

Error checks in start_decoder when loading the lengths could return without freeing the lengths array, causing leaks. OGG_leaks.zip
Missing EOF checks in start_decoder could contribute to very slow loads with corrupt/invalid files. This includes one check that originally checked for an EOP return value from get_bits—as far as I can tell, get_bits never actually returns this value. I don't remember exactly which of these missing checks contributed the most to slow loads, but IIRC I added most of them after reading values that get iterated on by loops. OGG_slow_loads.zip","I've updated this patch to remove (void **)&pointer usage, which flags warnings in old GCC versions (cited version was 4.2) as well as newer versions with -fstrict-aliasing -Wstrict-aliasing=2 (tested with GCC 11.2). (Found and patched by @sezero.)",True,{}
nothings/stb,https://github.com/nothings/stb,1175,2021-07-16T21:40:25Z,,2021-07-16T21:45:20Z,OPEN,False,8,1,1,https://github.com/cajomar,"stb_ds.h: add arrclear(), cast values to ptrdiff_t in arrsetlen() comparision",1,[],https://github.com/nothings/stb/pull/1175,https://github.com/cajomar,1,https://github.com/nothings/stb/pull/1175,Pull request for issue #1170.,Pull request for issue #1170.,True,{}
nothings/stb,https://github.com/nothings/stb,1176,2021-07-18T12:55:57Z,,2021-07-18T13:48:10Z,OPEN,False,6,1,1,https://github.com/laurelkeys,stb_ds.h: update docs and changes overwritten by merge commit,2,"['2 bug', '2 good-no changes needed', '1 stb_ds']",https://github.com/nothings/stb/pull/1176,https://github.com/laurelkeys,1,https://github.com/nothings/stb/pull/1176,"Added missing documentation for arrlast and arrpush
Fixed two changes overwritten by the merge commit a32aeef :

Readded call to custom free function in stbds_arrfree, from #1144
Removed stbds_arraddnoff, which was rename to stbds_arraddnindex in #1107 (since it isn't referenced anywhere else in the code and there's no short name arraddnoff, it doesn't seem necessary to keep it as a ""synonym"")","Added missing documentation for arrlast and arrpush
Fixed two changes overwritten by the merge commit a32aeef :

Readded call to custom free function in stbds_arrfree, from #1144
Removed stbds_arraddnoff, which was rename to stbds_arraddnindex in #1107 (since it isn't referenced anywhere else in the code and there's no short name arraddnoff, it doesn't seem necessary to keep it as a ""synonym"")",True,{}
nothings/stb,https://github.com/nothings/stb,1176,2021-07-18T12:55:57Z,,2021-07-18T13:48:10Z,OPEN,False,6,1,1,https://github.com/laurelkeys,stb_ds.h: update docs and changes overwritten by merge commit,2,"['2 bug', '2 good-no changes needed', '1 stb_ds']",https://github.com/nothings/stb/pull/1176,https://github.com/nothings,2,https://github.com/nothings/stb/pull/1176#issuecomment-882056313,"Added missing documentation for arrlast and arrpush
Fixed two changes overwritten by the merge commit a32aeef :

Readded call to custom free function in stbds_arrfree, from #1144
Removed stbds_arraddnoff, which was rename to stbds_arraddnindex in #1107 (since it isn't referenced anywhere else in the code and there's no short name arraddnoff, it doesn't seem necessary to keep it as a ""synonym"")","I intentionally re-added stbds_arraddnoff just in case anybody was using it; it's possible people aren't using the short names, in which case they could have been using it.
arrpush is intentionally undocumented, as it as a compatibility definition for people used to stb_arr_push from stb.h, but arrput is the official name.",True,{}
nothings/stb,https://github.com/nothings/stb,1176,2021-07-18T12:55:57Z,,2021-07-18T13:48:10Z,OPEN,False,6,1,1,https://github.com/laurelkeys,stb_ds.h: update docs and changes overwritten by merge commit,2,"['2 bug', '2 good-no changes needed', '1 stb_ds']",https://github.com/nothings/stb/pull/1176,https://github.com/laurelkeys,3,https://github.com/nothings/stb/pull/1176#issuecomment-882057682,"Added missing documentation for arrlast and arrpush
Fixed two changes overwritten by the merge commit a32aeef :

Readded call to custom free function in stbds_arrfree, from #1144
Removed stbds_arraddnoff, which was rename to stbds_arraddnindex in #1107 (since it isn't referenced anywhere else in the code and there's no short name arraddnoff, it doesn't seem necessary to keep it as a ""synonym"")","Oh, got it (my bad)! I removed arrpush from the documentation and re-added stbds_arraddnoff.",True,{}
nothings/stb,https://github.com/nothings/stb,1177,2021-07-18T14:21:47Z,2021-07-18T17:14:42Z,2021-07-19T02:14:07Z,CLOSED,False,122,1,1,https://github.com/KivApple, Optional PNG text chunks support for stb_image,3,[],https://github.com/nothings/stb/pull/1177,https://github.com/KivApple,1,https://github.com/nothings/stb/pull/1177,"I am using stb_image for my small game engine project and thought that it would be great to embed a metadata (for example, char map for a bitmap font) in PNG files using some standard-conforming way. PNG specification (https://www.w3.org/TR/PNG-Chunks.html) allows compressed and uncompressed text chunks (""zTXt"" and ""tEXt"" respectively) with keys (either standard like Title, Author etc or user defined) and some software and libraries (e. g. lodepng, libpng) support it. I've added this functional to stb_image, because it can be added just only by few lines of code.
Now you can set PNG text chunks handler (by default the option is completely disabled and shouldn't affect performance of the parser at all) and it would be called on each text chunk (both compressed and uncompressed chunks are supported). You can set some universal handler (also there is user_data pointer to be able to use the same handler multiple times with different behaivor or data structures) or change it before each decoding (and ever disable it again by passing NULL instead of the handler).
As I know there are similar features in some other formats (GIF comment extensions, JPEG APPn markers), so maybe it would be better to rename added functions in some format-agnostic way so it would be possible to add suport for other formats in future without introducing new APIs.
Thank you for your time!
P. S.: I am not sure how optimal I've implemented compressed text chunks handling - there are three allocations during the handling, but I am not enough familiar with stb_image source code :-(","I am using stb_image for my small game engine project and thought that it would be great to embed a metadata (for example, char map for a bitmap font) in PNG files using some standard-conforming way. PNG specification (https://www.w3.org/TR/PNG-Chunks.html) allows compressed and uncompressed text chunks (""zTXt"" and ""tEXt"" respectively) with keys (either standard like Title, Author etc or user defined) and some software and libraries (e. g. lodepng, libpng) support it. I've added this functional to stb_image, because it can be added just only by few lines of code.
Now you can set PNG text chunks handler (by default the option is completely disabled and shouldn't affect performance of the parser at all) and it would be called on each text chunk (both compressed and uncompressed chunks are supported). You can set some universal handler (also there is user_data pointer to be able to use the same handler multiple times with different behaivor or data structures) or change it before each decoding (and ever disable it again by passing NULL instead of the handler).
As I know there are similar features in some other formats (GIF comment extensions, JPEG APPn markers), so maybe it would be better to rename added functions in some format-agnostic way so it would be possible to add suport for other formats in future without introducing new APIs.
Thank you for your time!
P. S.: I am not sure how optimal I've implemented compressed text chunks handling - there are three allocations during the handling, but I am not enough familiar with stb_image source code :-(",True,{}
nothings/stb,https://github.com/nothings/stb,1177,2021-07-18T14:21:47Z,2021-07-18T17:14:42Z,2021-07-19T02:14:07Z,CLOSED,False,122,1,1,https://github.com/KivApple, Optional PNG text chunks support for stb_image,3,[],https://github.com/nothings/stb/pull/1177,https://github.com/nothings,2,https://github.com/nothings/stb/pull/1177#issuecomment-882089338,"I am using stb_image for my small game engine project and thought that it would be great to embed a metadata (for example, char map for a bitmap font) in PNG files using some standard-conforming way. PNG specification (https://www.w3.org/TR/PNG-Chunks.html) allows compressed and uncompressed text chunks (""zTXt"" and ""tEXt"" respectively) with keys (either standard like Title, Author etc or user defined) and some software and libraries (e. g. lodepng, libpng) support it. I've added this functional to stb_image, because it can be added just only by few lines of code.
Now you can set PNG text chunks handler (by default the option is completely disabled and shouldn't affect performance of the parser at all) and it would be called on each text chunk (both compressed and uncompressed chunks are supported). You can set some universal handler (also there is user_data pointer to be able to use the same handler multiple times with different behaivor or data structures) or change it before each decoding (and ever disable it again by passing NULL instead of the handler).
As I know there are similar features in some other formats (GIF comment extensions, JPEG APPn markers), so maybe it would be better to rename added functions in some format-agnostic way so it would be possible to add suport for other formats in future without introducing new APIs.
Thank you for your time!
P. S.: I am not sure how optimal I've implemented compressed text chunks handling - there are three allocations during the handling, but I am not enough familiar with stb_image source code :-(","We want to keep stb_image as simple as possible for multiple reasons, so features like this are outside the scope of what we want to support.",True,{}
nothings/stb,https://github.com/nothings/stb,1177,2021-07-18T14:21:47Z,2021-07-18T17:14:42Z,2021-07-19T02:14:07Z,CLOSED,False,122,1,1,https://github.com/KivApple, Optional PNG text chunks support for stb_image,3,[],https://github.com/nothings/stb/pull/1177,https://github.com/KivApple,3,https://github.com/nothings/stb/pull/1177#issuecomment-882103223,"I am using stb_image for my small game engine project and thought that it would be great to embed a metadata (for example, char map for a bitmap font) in PNG files using some standard-conforming way. PNG specification (https://www.w3.org/TR/PNG-Chunks.html) allows compressed and uncompressed text chunks (""zTXt"" and ""tEXt"" respectively) with keys (either standard like Title, Author etc or user defined) and some software and libraries (e. g. lodepng, libpng) support it. I've added this functional to stb_image, because it can be added just only by few lines of code.
Now you can set PNG text chunks handler (by default the option is completely disabled and shouldn't affect performance of the parser at all) and it would be called on each text chunk (both compressed and uncompressed chunks are supported). You can set some universal handler (also there is user_data pointer to be able to use the same handler multiple times with different behaivor or data structures) or change it before each decoding (and ever disable it again by passing NULL instead of the handler).
As I know there are similar features in some other formats (GIF comment extensions, JPEG APPn markers), so maybe it would be better to rename added functions in some format-agnostic way so it would be possible to add suport for other formats in future without introducing new APIs.
Thank you for your time!
P. S.: I am not sure how optimal I've implemented compressed text chunks handling - there are three allocations during the handling, but I am not enough familiar with stb_image source code :-(","@nothings Maybe it is at least possible to give users generic ability to set extra chunk handlers? It would give ability to implement any custom metadata handling (including text chunks), but it won't uncontrollable increase the complexity of the library in future (not something like ""if there are already text chunks handling - let's implement one more special chunk type handling"").",True,{}
nothings/stb,https://github.com/nothings/stb,1177,2021-07-18T14:21:47Z,2021-07-18T17:14:42Z,2021-07-19T02:14:07Z,CLOSED,False,122,1,1,https://github.com/KivApple, Optional PNG text chunks support for stb_image,3,[],https://github.com/nothings/stb/pull/1177,https://github.com/rygorous,4,https://github.com/nothings/stb/pull/1177#issuecomment-882179316,"I am using stb_image for my small game engine project and thought that it would be great to embed a metadata (for example, char map for a bitmap font) in PNG files using some standard-conforming way. PNG specification (https://www.w3.org/TR/PNG-Chunks.html) allows compressed and uncompressed text chunks (""zTXt"" and ""tEXt"" respectively) with keys (either standard like Title, Author etc or user defined) and some software and libraries (e. g. lodepng, libpng) support it. I've added this functional to stb_image, because it can be added just only by few lines of code.
Now you can set PNG text chunks handler (by default the option is completely disabled and shouldn't affect performance of the parser at all) and it would be called on each text chunk (both compressed and uncompressed chunks are supported). You can set some universal handler (also there is user_data pointer to be able to use the same handler multiple times with different behaivor or data structures) or change it before each decoding (and ever disable it again by passing NULL instead of the handler).
As I know there are similar features in some other formats (GIF comment extensions, JPEG APPn markers), so maybe it would be better to rename added functions in some format-agnostic way so it would be possible to add suport for other formats in future without introducing new APIs.
Thank you for your time!
P. S.: I am not sure how optimal I've implemented compressed text chunks handling - there are three allocations during the handling, but I am not enough familiar with stb_image source code :-(","Sorry, but no. stb_image is for when all you want is the pixel data stored in a file. Everything else is out of scope.
We have been down this road before, more than once. Any such feature we add to the public API comes with an unspoken promise that it actually works robustly, which, no offense, it never does on the first try, and a subsequent flurry of bug reports, pull requests and security issues, as well as requests to add similar support for some of the other image formats. Even if we just add a ""unknown chunk"" callback for PNGs, we would be getting a steady stream of questions about how to use that API, as well as requests of assistance to debug incorrect uses, as a result.
The amount of spare time Sean and I have to spend on the stb libraries is very limited and we have learned the hard way just how much time even the tiniest-seeming feature additions end up costing us in the long run.",True,{}
nothings/stb,https://github.com/nothings/stb,1179,2021-07-24T13:52:10Z,,2021-07-24T13:52:10Z,OPEN,False,12,0,1,https://github.com/shonrb,Add calloc support to stb_leakcheck.h,1,[],https://github.com/nothings/stb/pull/1179,https://github.com/shonrb,1,https://github.com/nothings/stb/pull/1179,Partially addresses #520.,Partially addresses #520.,True,{}
nothings/stb,https://github.com/nothings/stb,1181,2021-07-27T15:57:26Z,,2021-08-11T09:52:17Z,OPEN,False,135,52,1,https://github.com/ocornut,"stb_sprintf: support for ""format"" being a non-zero terminated string view?",4,[],https://github.com/nothings/stb/pull/1181,https://github.com/ocornut,1,https://github.com/nothings/stb/pull/1181,"Note: this is NOT a complete patch, more like opening a discussion.
To improve support for languages like Rust (and a growing tendency for C++ users to support string view/spans) we've been working toward supporting non-zero terminated strings in Dear ImGui. I found it has many extra advantages since many high-level languages and string types already have a length field calculated, and for literals the strlen() call can be done at compile-time.
We have a working branch but one niggle is that the sprintf functions we rely on (stdlib one or stb_sprintf) need a zero terminator for the format string parameter, which forces us to copy and zero-terminate them all. (I'm specifically taking about the format string itself needing to be zero-terminated, I am aware we can use for %.*s for other string arguments). Some of our functions tend to lead users to pass long decorated format strings (e.g. ImGui::Text(""Hello world %d %s"", ...) being a prime candidate for people sending large amount of text in a format string).
So I investigated the possibility of completely switching to embedding stb_sprintf and patching it to support this. Note that I'm not already using stb_printf, but I know some Dear ImGui are using it.
It's not a difficult change to implement BUT as I think stb_sprintf was designed for performances I mostly worry that the change of logic may have meaningful side effects.
If I was wondering if you or Jeff had unpublished perf tests you could run?
What this patch does:

At the top of the vsprintfcb code it adds const char* f_end = f + strlen(fmt); and then for the entire function makes small changes to use that pointer as an end marker and not rely on zero-termination, aka in theory it should never read from f_end[0].
This is a WIP patch solely designed to measure the potential side-effects (perf wise) of changing the main code.
Hastily coded and not thoroughly tested, but pass test_sprintf (which btw has a failing test on 32-bit arch, commented that one out) but there aren't many things tested.

Performance consideration:

Adding various (f < f_end) tests in the main function may add up overhead but I don't imagine so much. Might be beneficial to tweak that (e.g. use a decrementing counter?). people like jeff/ryg/sean may have better instinct what to do as I don't really know much about cpu/compilers.
The strlen() is going to touch all of the memory early on, may not be so much of an issue as cache would be primed for the main work? Pathological case if format string is very large (e.g. larger than cache)?

If there a decision that perfs were ok, and that we could move onward:
The remaining work would be, ihmo:

Add a new function e.g. _vsprintfcbn() with const char* fmt, const char* fmt_end parameter (or const char* fmt, size_t fmt_len, either way would work).
All other functions instead of calling _vsprintfcb() would call _vsprintfcbn() with a strlen().
Can we come up with some tests to validate that we are not reading past the limit? (allocate near page boundaries, with end-marker just at the frontier?)
Make sure I didn't break anything.

(tagging @simonvanbernem who seems interested too)","Note: this is NOT a complete patch, more like opening a discussion.
To improve support for languages like Rust (and a growing tendency for C++ users to support string view/spans) we've been working toward supporting non-zero terminated strings in Dear ImGui. I found it has many extra advantages since many high-level languages and string types already have a length field calculated, and for literals the strlen() call can be done at compile-time.
We have a working branch but one niggle is that the sprintf functions we rely on (stdlib one or stb_sprintf) need a zero terminator for the format string parameter, which forces us to copy and zero-terminate them all. (I'm specifically taking about the format string itself needing to be zero-terminated, I am aware we can use for %.*s for other string arguments). Some of our functions tend to lead users to pass long decorated format strings (e.g. ImGui::Text(""Hello world %d %s"", ...) being a prime candidate for people sending large amount of text in a format string).
So I investigated the possibility of completely switching to embedding stb_sprintf and patching it to support this. Note that I'm not already using stb_printf, but I know some Dear ImGui are using it.
It's not a difficult change to implement BUT as I think stb_sprintf was designed for performances I mostly worry that the change of logic may have meaningful side effects.
If I was wondering if you or Jeff had unpublished perf tests you could run?
What this patch does:

At the top of the vsprintfcb code it adds const char* f_end = f + strlen(fmt); and then for the entire function makes small changes to use that pointer as an end marker and not rely on zero-termination, aka in theory it should never read from f_end[0].
This is a WIP patch solely designed to measure the potential side-effects (perf wise) of changing the main code.
Hastily coded and not thoroughly tested, but pass test_sprintf (which btw has a failing test on 32-bit arch, commented that one out) but there aren't many things tested.

Performance consideration:

Adding various (f < f_end) tests in the main function may add up overhead but I don't imagine so much. Might be beneficial to tweak that (e.g. use a decrementing counter?). people like jeff/ryg/sean may have better instinct what to do as I don't really know much about cpu/compilers.
The strlen() is going to touch all of the memory early on, may not be so much of an issue as cache would be primed for the main work? Pathological case if format string is very large (e.g. larger than cache)?

If there a decision that perfs were ok, and that we could move onward:
The remaining work would be, ihmo:

Add a new function e.g. _vsprintfcbn() with const char* fmt, const char* fmt_end parameter (or const char* fmt, size_t fmt_len, either way would work).
All other functions instead of calling _vsprintfcb() would call _vsprintfcbn() with a strlen().
Can we come up with some tests to validate that we are not reading past the limit? (allocate near page boundaries, with end-marker just at the frontier?)
Make sure I didn't break anything.

(tagging @simonvanbernem who seems interested too)",True,"{'THUMBS_UP': ['https://github.com/simonvanbernem', 'https://github.com/emoon'], 'ROCKET': ['https://github.com/PathogenDavid']}"
nothings/stb,https://github.com/nothings/stb,1181,2021-07-27T15:57:26Z,,2021-08-11T09:52:17Z,OPEN,False,135,52,1,https://github.com/ocornut,"stb_sprintf: support for ""format"" being a non-zero terminated string view?",4,[],https://github.com/nothings/stb/pull/1181,https://github.com/ocornut,2,https://github.com/nothings/stb/pull/1181#issuecomment-887634388,"Note: this is NOT a complete patch, more like opening a discussion.
To improve support for languages like Rust (and a growing tendency for C++ users to support string view/spans) we've been working toward supporting non-zero terminated strings in Dear ImGui. I found it has many extra advantages since many high-level languages and string types already have a length field calculated, and for literals the strlen() call can be done at compile-time.
We have a working branch but one niggle is that the sprintf functions we rely on (stdlib one or stb_sprintf) need a zero terminator for the format string parameter, which forces us to copy and zero-terminate them all. (I'm specifically taking about the format string itself needing to be zero-terminated, I am aware we can use for %.*s for other string arguments). Some of our functions tend to lead users to pass long decorated format strings (e.g. ImGui::Text(""Hello world %d %s"", ...) being a prime candidate for people sending large amount of text in a format string).
So I investigated the possibility of completely switching to embedding stb_sprintf and patching it to support this. Note that I'm not already using stb_printf, but I know some Dear ImGui are using it.
It's not a difficult change to implement BUT as I think stb_sprintf was designed for performances I mostly worry that the change of logic may have meaningful side effects.
If I was wondering if you or Jeff had unpublished perf tests you could run?
What this patch does:

At the top of the vsprintfcb code it adds const char* f_end = f + strlen(fmt); and then for the entire function makes small changes to use that pointer as an end marker and not rely on zero-termination, aka in theory it should never read from f_end[0].
This is a WIP patch solely designed to measure the potential side-effects (perf wise) of changing the main code.
Hastily coded and not thoroughly tested, but pass test_sprintf (which btw has a failing test on 32-bit arch, commented that one out) but there aren't many things tested.

Performance consideration:

Adding various (f < f_end) tests in the main function may add up overhead but I don't imagine so much. Might be beneficial to tweak that (e.g. use a decrementing counter?). people like jeff/ryg/sean may have better instinct what to do as I don't really know much about cpu/compilers.
The strlen() is going to touch all of the memory early on, may not be so much of an issue as cache would be primed for the main work? Pathological case if format string is very large (e.g. larger than cache)?

If there a decision that perfs were ok, and that we could move onward:
The remaining work would be, ihmo:

Add a new function e.g. _vsprintfcbn() with const char* fmt, const char* fmt_end parameter (or const char* fmt, size_t fmt_len, either way would work).
All other functions instead of calling _vsprintfcb() would call _vsprintfcbn() with a strlen().
Can we come up with some tests to validate that we are not reading past the limit? (allocate near page boundaries, with end-marker just at the frontier?)
Make sure I didn't break anything.

(tagging @simonvanbernem who seems interested too)","I ran some indicative general Dear ImGui perf tests.

There aren't designed as sprintf tests, more like testing average use of dear imgui. ""perf_demo_all"" is opening all of dear imgui demo/examples windows, which would lead to thousands of calls to sprintf and also a million other things happening. The other tests are spamming thousands of widgets (stuff like ""perf_stress_button"" is not expected to call sprintf at all, so it's a neutral test, the ""coloredit"" and ""slider"" ones would call sprintf)
Our perf test framework may not be super precise not great. I manually removed a few outliers from the samples.

green = Using msvc2019 sprintf
blue = using stb_sprintf
orange = using stb_printf with my patch
That's merely there to give a rough confirmation that: using stb_sprintf in dear imgui makes a small but measurable improvement, my patch seems to slow things down a little (but maybe some RAD magic can improve that).
x64 release

x64 ""debug"" (everything is slower, printf impact gets drowned)",True,{}
nothings/stb,https://github.com/nothings/stb,1181,2021-07-27T15:57:26Z,,2021-08-11T09:52:17Z,OPEN,False,135,52,1,https://github.com/ocornut,"stb_sprintf: support for ""format"" being a non-zero terminated string view?",4,[],https://github.com/nothings/stb/pull/1181,https://github.com/nothings,3,https://github.com/nothings/stb/pull/1181#issuecomment-887635595,"Note: this is NOT a complete patch, more like opening a discussion.
To improve support for languages like Rust (and a growing tendency for C++ users to support string view/spans) we've been working toward supporting non-zero terminated strings in Dear ImGui. I found it has many extra advantages since many high-level languages and string types already have a length field calculated, and for literals the strlen() call can be done at compile-time.
We have a working branch but one niggle is that the sprintf functions we rely on (stdlib one or stb_sprintf) need a zero terminator for the format string parameter, which forces us to copy and zero-terminate them all. (I'm specifically taking about the format string itself needing to be zero-terminated, I am aware we can use for %.*s for other string arguments). Some of our functions tend to lead users to pass long decorated format strings (e.g. ImGui::Text(""Hello world %d %s"", ...) being a prime candidate for people sending large amount of text in a format string).
So I investigated the possibility of completely switching to embedding stb_sprintf and patching it to support this. Note that I'm not already using stb_printf, but I know some Dear ImGui are using it.
It's not a difficult change to implement BUT as I think stb_sprintf was designed for performances I mostly worry that the change of logic may have meaningful side effects.
If I was wondering if you or Jeff had unpublished perf tests you could run?
What this patch does:

At the top of the vsprintfcb code it adds const char* f_end = f + strlen(fmt); and then for the entire function makes small changes to use that pointer as an end marker and not rely on zero-termination, aka in theory it should never read from f_end[0].
This is a WIP patch solely designed to measure the potential side-effects (perf wise) of changing the main code.
Hastily coded and not thoroughly tested, but pass test_sprintf (which btw has a failing test on 32-bit arch, commented that one out) but there aren't many things tested.

Performance consideration:

Adding various (f < f_end) tests in the main function may add up overhead but I don't imagine so much. Might be beneficial to tweak that (e.g. use a decrementing counter?). people like jeff/ryg/sean may have better instinct what to do as I don't really know much about cpu/compilers.
The strlen() is going to touch all of the memory early on, may not be so much of an issue as cache would be primed for the main work? Pathological case if format string is very large (e.g. larger than cache)?

If there a decision that perfs were ok, and that we could move onward:
The remaining work would be, ihmo:

Add a new function e.g. _vsprintfcbn() with const char* fmt, const char* fmt_end parameter (or const char* fmt, size_t fmt_len, either way would work).
All other functions instead of calling _vsprintfcb() would call _vsprintfcbn() with a strlen().
Can we come up with some tests to validate that we are not reading past the limit? (allocate near page boundaries, with end-marker just at the frontier?)
Make sure I didn't break anything.

(tagging @simonvanbernem who seems interested too)","There are unpublished tests, but I don't know if they're performance tests or just correctness. I'll ask Jeff.",True,{'THUMBS_UP': ['https://github.com/ocornut']}
nothings/stb,https://github.com/nothings/stb,1181,2021-07-27T15:57:26Z,,2021-08-11T09:52:17Z,OPEN,False,135,52,1,https://github.com/ocornut,"stb_sprintf: support for ""format"" being a non-zero terminated string view?",4,[],https://github.com/nothings/stb/pull/1181,https://github.com/nothings,4,https://github.com/nothings/stb/pull/1181#issuecomment-887655341,"Note: this is NOT a complete patch, more like opening a discussion.
To improve support for languages like Rust (and a growing tendency for C++ users to support string view/spans) we've been working toward supporting non-zero terminated strings in Dear ImGui. I found it has many extra advantages since many high-level languages and string types already have a length field calculated, and for literals the strlen() call can be done at compile-time.
We have a working branch but one niggle is that the sprintf functions we rely on (stdlib one or stb_sprintf) need a zero terminator for the format string parameter, which forces us to copy and zero-terminate them all. (I'm specifically taking about the format string itself needing to be zero-terminated, I am aware we can use for %.*s for other string arguments). Some of our functions tend to lead users to pass long decorated format strings (e.g. ImGui::Text(""Hello world %d %s"", ...) being a prime candidate for people sending large amount of text in a format string).
So I investigated the possibility of completely switching to embedding stb_sprintf and patching it to support this. Note that I'm not already using stb_printf, but I know some Dear ImGui are using it.
It's not a difficult change to implement BUT as I think stb_sprintf was designed for performances I mostly worry that the change of logic may have meaningful side effects.
If I was wondering if you or Jeff had unpublished perf tests you could run?
What this patch does:

At the top of the vsprintfcb code it adds const char* f_end = f + strlen(fmt); and then for the entire function makes small changes to use that pointer as an end marker and not rely on zero-termination, aka in theory it should never read from f_end[0].
This is a WIP patch solely designed to measure the potential side-effects (perf wise) of changing the main code.
Hastily coded and not thoroughly tested, but pass test_sprintf (which btw has a failing test on 32-bit arch, commented that one out) but there aren't many things tested.

Performance consideration:

Adding various (f < f_end) tests in the main function may add up overhead but I don't imagine so much. Might be beneficial to tweak that (e.g. use a decrementing counter?). people like jeff/ryg/sean may have better instinct what to do as I don't really know much about cpu/compilers.
The strlen() is going to touch all of the memory early on, may not be so much of an issue as cache would be primed for the main work? Pathological case if format string is very large (e.g. larger than cache)?

If there a decision that perfs were ok, and that we could move onward:
The remaining work would be, ihmo:

Add a new function e.g. _vsprintfcbn() with const char* fmt, const char* fmt_end parameter (or const char* fmt, size_t fmt_len, either way would work).
All other functions instead of calling _vsprintfcb() would call _vsprintfcbn() with a strlen().
Can we come up with some tests to validate that we are not reading past the limit? (allocate near page boundaries, with end-marker just at the frontier?)
Make sure I didn't break anything.

(tagging @simonvanbernem who seems interested too)","Ok, clearly ""rrsprintfspeed.c"" is a speed test (rrsprintf is the RAD-internal name for stb_sprintf). I'll see if I can get it building this weekend, although I also can just send it to you if you want to try it sooner. It does stuff like exhautisvely tests all non-NAN floats, don't know how long it takes to run.",True,{}
nothings/stb,https://github.com/nothings/stb,1181,2021-07-27T15:57:26Z,,2021-08-11T09:52:17Z,OPEN,False,135,52,1,https://github.com/ocornut,"stb_sprintf: support for ""format"" being a non-zero terminated string view?",4,[],https://github.com/nothings/stb/pull/1181,https://github.com/ocornut,5,https://github.com/nothings/stb/pull/1181#issuecomment-887658659,"Note: this is NOT a complete patch, more like opening a discussion.
To improve support for languages like Rust (and a growing tendency for C++ users to support string view/spans) we've been working toward supporting non-zero terminated strings in Dear ImGui. I found it has many extra advantages since many high-level languages and string types already have a length field calculated, and for literals the strlen() call can be done at compile-time.
We have a working branch but one niggle is that the sprintf functions we rely on (stdlib one or stb_sprintf) need a zero terminator for the format string parameter, which forces us to copy and zero-terminate them all. (I'm specifically taking about the format string itself needing to be zero-terminated, I am aware we can use for %.*s for other string arguments). Some of our functions tend to lead users to pass long decorated format strings (e.g. ImGui::Text(""Hello world %d %s"", ...) being a prime candidate for people sending large amount of text in a format string).
So I investigated the possibility of completely switching to embedding stb_sprintf and patching it to support this. Note that I'm not already using stb_printf, but I know some Dear ImGui are using it.
It's not a difficult change to implement BUT as I think stb_sprintf was designed for performances I mostly worry that the change of logic may have meaningful side effects.
If I was wondering if you or Jeff had unpublished perf tests you could run?
What this patch does:

At the top of the vsprintfcb code it adds const char* f_end = f + strlen(fmt); and then for the entire function makes small changes to use that pointer as an end marker and not rely on zero-termination, aka in theory it should never read from f_end[0].
This is a WIP patch solely designed to measure the potential side-effects (perf wise) of changing the main code.
Hastily coded and not thoroughly tested, but pass test_sprintf (which btw has a failing test on 32-bit arch, commented that one out) but there aren't many things tested.

Performance consideration:

Adding various (f < f_end) tests in the main function may add up overhead but I don't imagine so much. Might be beneficial to tweak that (e.g. use a decrementing counter?). people like jeff/ryg/sean may have better instinct what to do as I don't really know much about cpu/compilers.
The strlen() is going to touch all of the memory early on, may not be so much of an issue as cache would be primed for the main work? Pathological case if format string is very large (e.g. larger than cache)?

If there a decision that perfs were ok, and that we could move onward:
The remaining work would be, ihmo:

Add a new function e.g. _vsprintfcbn() with const char* fmt, const char* fmt_end parameter (or const char* fmt, size_t fmt_len, either way would work).
All other functions instead of calling _vsprintfcb() would call _vsprintfcbn() with a strlen().
Can we come up with some tests to validate that we are not reading past the limit? (allocate near page boundaries, with end-marker just at the frontier?)
Make sure I didn't break anything.

(tagging @simonvanbernem who seems interested too)","Thanks for looking! If at a glance it looks like something you think I'll be able to build/run I don't mind trying.
(omar AT dearimgui dot org)",True,{}
nothings/stb,https://github.com/nothings/stb,1181,2021-07-27T15:57:26Z,,2021-08-11T09:52:17Z,OPEN,False,135,52,1,https://github.com/ocornut,"stb_sprintf: support for ""format"" being a non-zero terminated string view?",4,[],https://github.com/nothings/stb/pull/1181,https://github.com/nothings,6,https://github.com/nothings/stb/pull/1181#issuecomment-887662551,"Note: this is NOT a complete patch, more like opening a discussion.
To improve support for languages like Rust (and a growing tendency for C++ users to support string view/spans) we've been working toward supporting non-zero terminated strings in Dear ImGui. I found it has many extra advantages since many high-level languages and string types already have a length field calculated, and for literals the strlen() call can be done at compile-time.
We have a working branch but one niggle is that the sprintf functions we rely on (stdlib one or stb_sprintf) need a zero terminator for the format string parameter, which forces us to copy and zero-terminate them all. (I'm specifically taking about the format string itself needing to be zero-terminated, I am aware we can use for %.*s for other string arguments). Some of our functions tend to lead users to pass long decorated format strings (e.g. ImGui::Text(""Hello world %d %s"", ...) being a prime candidate for people sending large amount of text in a format string).
So I investigated the possibility of completely switching to embedding stb_sprintf and patching it to support this. Note that I'm not already using stb_printf, but I know some Dear ImGui are using it.
It's not a difficult change to implement BUT as I think stb_sprintf was designed for performances I mostly worry that the change of logic may have meaningful side effects.
If I was wondering if you or Jeff had unpublished perf tests you could run?
What this patch does:

At the top of the vsprintfcb code it adds const char* f_end = f + strlen(fmt); and then for the entire function makes small changes to use that pointer as an end marker and not rely on zero-termination, aka in theory it should never read from f_end[0].
This is a WIP patch solely designed to measure the potential side-effects (perf wise) of changing the main code.
Hastily coded and not thoroughly tested, but pass test_sprintf (which btw has a failing test on 32-bit arch, commented that one out) but there aren't many things tested.

Performance consideration:

Adding various (f < f_end) tests in the main function may add up overhead but I don't imagine so much. Might be beneficial to tweak that (e.g. use a decrementing counter?). people like jeff/ryg/sean may have better instinct what to do as I don't really know much about cpu/compilers.
The strlen() is going to touch all of the memory early on, may not be so much of an issue as cache would be primed for the main work? Pathological case if format string is very large (e.g. larger than cache)?

If there a decision that perfs were ok, and that we could move onward:
The remaining work would be, ihmo:

Add a new function e.g. _vsprintfcbn() with const char* fmt, const char* fmt_end parameter (or const char* fmt, size_t fmt_len, either way would work).
All other functions instead of calling _vsprintfcb() would call _vsprintfcbn() with a strlen().
Can we come up with some tests to validate that we are not reading past the limit? (allocate near page boundaries, with end-marker just at the frontier?)
Make sure I didn't break anything.

(tagging @simonvanbernem who seems interested too)",sent,True,{'THUMBS_UP': ['https://github.com/ocornut']}
nothings/stb,https://github.com/nothings/stb,1181,2021-07-27T15:57:26Z,,2021-08-11T09:52:17Z,OPEN,False,135,52,1,https://github.com/ocornut,"stb_sprintf: support for ""format"" being a non-zero terminated string view?",4,[],https://github.com/nothings/stb/pull/1181,https://github.com/ocornut,7,https://github.com/nothings/stb/pull/1181#issuecomment-888296764,"Note: this is NOT a complete patch, more like opening a discussion.
To improve support for languages like Rust (and a growing tendency for C++ users to support string view/spans) we've been working toward supporting non-zero terminated strings in Dear ImGui. I found it has many extra advantages since many high-level languages and string types already have a length field calculated, and for literals the strlen() call can be done at compile-time.
We have a working branch but one niggle is that the sprintf functions we rely on (stdlib one or stb_sprintf) need a zero terminator for the format string parameter, which forces us to copy and zero-terminate them all. (I'm specifically taking about the format string itself needing to be zero-terminated, I am aware we can use for %.*s for other string arguments). Some of our functions tend to lead users to pass long decorated format strings (e.g. ImGui::Text(""Hello world %d %s"", ...) being a prime candidate for people sending large amount of text in a format string).
So I investigated the possibility of completely switching to embedding stb_sprintf and patching it to support this. Note that I'm not already using stb_printf, but I know some Dear ImGui are using it.
It's not a difficult change to implement BUT as I think stb_sprintf was designed for performances I mostly worry that the change of logic may have meaningful side effects.
If I was wondering if you or Jeff had unpublished perf tests you could run?
What this patch does:

At the top of the vsprintfcb code it adds const char* f_end = f + strlen(fmt); and then for the entire function makes small changes to use that pointer as an end marker and not rely on zero-termination, aka in theory it should never read from f_end[0].
This is a WIP patch solely designed to measure the potential side-effects (perf wise) of changing the main code.
Hastily coded and not thoroughly tested, but pass test_sprintf (which btw has a failing test on 32-bit arch, commented that one out) but there aren't many things tested.

Performance consideration:

Adding various (f < f_end) tests in the main function may add up overhead but I don't imagine so much. Might be beneficial to tweak that (e.g. use a decrementing counter?). people like jeff/ryg/sean may have better instinct what to do as I don't really know much about cpu/compilers.
The strlen() is going to touch all of the memory early on, may not be so much of an issue as cache would be primed for the main work? Pathological case if format string is very large (e.g. larger than cache)?

If there a decision that perfs were ok, and that we could move onward:
The remaining work would be, ihmo:

Add a new function e.g. _vsprintfcbn() with const char* fmt, const char* fmt_end parameter (or const char* fmt, size_t fmt_len, either way would work).
All other functions instead of calling _vsprintfcb() would call _vsprintfcbn() with a strlen().
Can we come up with some tests to validate that we are not reading past the limit? (allocate near page boundaries, with end-marker just at the frontier?)
Make sure I didn't break anything.

(tagging @simonvanbernem who seems interested too)","I ran the tests sent by Sean (they more or less run through all possible values for many types).
Here's one of the run: (stbsp_sprintf  = vanilla, stbsp_sprintf2 my changes)
Due to how I ran tests, sprintf was tested twice, left that in the samples.
(you may skim this part)
sprintf time for 'stringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstring': 152775
sprintf time for 'stringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstring': 152395
stbsp_sprintf  time for 'stringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstring': 2575
stbsp_sprintf2 time for 'stringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstring': 6508

sprintf time for 'strin stringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring': 152651
sprintf time for 'strin stringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring': 152328
stbsp_sprintf time for 'strin stringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring': 2558
stbsp_sprintf2 time for 'strin stringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring': 6391

sprintf time for '%d': 68
sprintf time for '%d': 69
stbsp_sprintf time for '%d': 26
stbsp_sprintf2 time for '%d': 27

sprintf time for '%24d': 171346
sprintf time for '%24d': 167891
stbsp_sprintf time for '%24d': 41285
stbsp_sprintf2 time for '%24d': 39217

sprintf time for '%x': 82907
sprintf time for '%x': 82572
stbsp_sprintf time for '%x': 27779
stbsp_sprintf2 time for '%x': 28397

sprintf time for '%08x': 137956
sprintf time for '%08x': 133784
stbsp_sprintf time for '%08x': 30877
stbsp_sprintf2 time for '%08x': 29870

sprintf time for '%f': 76285
sprintf time for '%f': 76139
stbsp_printf time for '%f': 33368
stbsp_printf2 time for '%f': 33988

sprintf time for '%e': 77539
sprintf time for '%e': 78304
stbsp_printf time for '%e': 34007
stbsp_printf2 time for '%e': 34195

sprintf time for '%g': 78729
sprintf time for '%g': 80720
stbsp_printf time for '%g': 33007
stbsp_printf2 time for '%g': 33386

sprintf time for '%f l': 125701
sprintf time for '%f l': 123365
stbsp_sprintf time for '%f l': 31882
stbsp_sprintf2 time for '%f l': 33326

sprintf time for '%f b': 507478
sprintf time for '%f b': 483318
stbsp_sprintf time for '%f b': 25873
stbsp_sprintf2 time for '%f b': 27983

sprintf time for '%e l': 129690
sprintf time for '%e l': 128700
stbsp_sprintf time for '%e l': 34656
stbsp_sprintf2 time for '%e l': 34839

sprintf time for '%e b': 111196
sprintf time for '%e b': 111247
stbsp_sprintf time for '%e b': 34471
stbsp_sprintf2 time for '%e b': 33943

sprintf time for '%.320f': 495866
sprintf time for '%.320f': 468650
stbsp_sprintf time for '%.320f': 22945
stbsp_sprintf2 time for '%.320f': 22968

sprintf time for '%a': 51489
sprintf time for '%a': 54392
stbsp_sprintf time for '%a': 17358
stbsp_sprintf2 time for '%a': 17036

sprintf time for '%I64d': 80013
sprintf time for '%I64d': 79855
stbsp_sprintf time for '%I64d': 25714
stbsp_sprintf2 time for '%I64d': 28589

sprintf time for '%I64d': 83257
sprintf time for '%I64d': 83446
stbsp_sprintf time for '%I64d': 16415
stbsp_sprintf2 time for '%I64d': 17243

sprintf time for '%s%s%s': 10314
sprintf time for '%s%s%s': 9861
stbsp_sprintf time for '%s%s%s': 5652
stbsp_sprintf2 time for '%s%s%s': 4904

sprintf time for '0123456789012345678901234567890123456789012345678901234567890123%d': 234932
sprintf time for '0123456789012345678901234567890123456789012345678901234567890123%d': 235027
stbsp_sprintf time for '0123456789012345678901234567890123456789012345678901234567890123%d': 10493
stbsp_sprintf2 time for '0123456789012345678901234567890123456789012345678901234567890123%d': 14550

I did other runs to narrow down the noise. The meaningful differences are on those three tests:
stbsp_sprintf time for 'stringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstring': 2540
stbsp_sprintf time for 'strin stringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring': 2547
stbsp_sprintf time for '0123456789012345678901234567890123456789012345678901234567890123%d': 10275

stbsp_sprintf2 time for 'stringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstring': 6681
stbsp_sprintf2 time for 'strin stringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring': 6596
stbsp_sprintf2 time for '0123456789012345678901234567890123456789012345678901234567890123%d': 14625

Difference basically amount to the code that copies the unformatted chunks of text until finding a %.
Technically speaking the tests don't spend too much time measuring parsing of many options/flags.
I believe my changes would make that part also slower but in the grand scheme of this that time should be not important compared to A) the dumb-copy throughput, and B) general formatted output (for which the code is unchanged)
So basically it comes down to optimize that one loop:
Original
// fast copy everything up to the next % (or end of string)
for (;;) {
 while (((stbsp__uintptr)f) & 3) {
 schk1:
    if (f[0] == '%')
       goto scandd;
 schk2:
    if (f[0] == 0)
       goto endfmt;
    stbsp__chk_cb_buf(1);
    *bf++ = f[0];
    ++f;
 }
 for (;;) {
    // Check if the next 4 bytes contain %(0x25) or end of string.
    // Using the 'hasless' trick:
    // https://graphics.stanford.edu/~seander/bithacks.html#HasLessInWord
    stbsp__uint32 v, c;
    v = *(stbsp__uint32 *)f;
    c = (~v) & 0x80808080;
    if (((v ^ 0x25252525) - 0x01010101) & c)
       goto schk1;
    if ((v - 0x01010101) & c)
       goto schk2;
    if (callback)
       if ((STB_SPRINTF_MIN - (int)(bf - buf)) < 4)
          goto schk1;
    #ifdef STB_SPRINTF_NOUNALIGNED
        if(((stbsp__uintptr)bf) & 3) {
            bf[0] = f[0];
            bf[1] = f[1];
            bf[2] = f[2];
            bf[3] = f[3];
        } else
    #endif
    {
        *(stbsp__uint32 *)bf = v;
    }
    bf += 4;
    f += 4;
 }
}
scandd:
My initial version (slower)
// fast copy everything up to the next % (or end of string)
for (;;) {
 while (((stbsp__uintptr)f) & 3) {
 schk1:
    if (f == f_end)
       goto endfmt;
 schk2:
    if (f[0] == '%')
       goto scandd;
    stbsp__chk_cb_buf(1);
    *bf++ = f[0];
    ++f;
 }
 for (;;) {
    // Check if the next 4 bytes contain %(0x25) or end of string.
    // Using the 'hasless' trick:
    // https://graphics.stanford.edu/~seander/bithacks.html#HasLessInWord
    stbsp__uint32 v, c;
    v = *(stbsp__uint32 *)f;
    c = (~v) & 0x80808080;
    if (((v ^ 0x25252525) - 0x01010101) & c)
       goto schk2;
    if (f_end - f < 4)
        goto schk1;
    if (callback)
       if ((STB_SPRINTF_MIN - (int)(bf - buf)) < 4)
          goto schk1;
    #ifdef STB_SPRINTF_NOUNALIGNED
        if(((stbsp__uintptr)bf) & 3) {
            bf[0] = f[0];
            bf[1] = f[1];
            bf[2] = f[2];
            bf[3] = f[3];
        } else
    #endif
    {
        *(stbsp__uint32 *)bf = v;
    }
    bf += 4;
    f += 4;
 }
}
scandd:
I'll see if I can come up with an optimization...",True,{}
nothings/stb,https://github.com/nothings/stb,1181,2021-07-27T15:57:26Z,,2021-08-11T09:52:17Z,OPEN,False,135,52,1,https://github.com/ocornut,"stb_sprintf: support for ""format"" being a non-zero terminated string view?",4,[],https://github.com/nothings/stb/pull/1181,https://github.com/simonvanbernem,8,https://github.com/nothings/stb/pull/1181#issuecomment-888310600,"Note: this is NOT a complete patch, more like opening a discussion.
To improve support for languages like Rust (and a growing tendency for C++ users to support string view/spans) we've been working toward supporting non-zero terminated strings in Dear ImGui. I found it has many extra advantages since many high-level languages and string types already have a length field calculated, and for literals the strlen() call can be done at compile-time.
We have a working branch but one niggle is that the sprintf functions we rely on (stdlib one or stb_sprintf) need a zero terminator for the format string parameter, which forces us to copy and zero-terminate them all. (I'm specifically taking about the format string itself needing to be zero-terminated, I am aware we can use for %.*s for other string arguments). Some of our functions tend to lead users to pass long decorated format strings (e.g. ImGui::Text(""Hello world %d %s"", ...) being a prime candidate for people sending large amount of text in a format string).
So I investigated the possibility of completely switching to embedding stb_sprintf and patching it to support this. Note that I'm not already using stb_printf, but I know some Dear ImGui are using it.
It's not a difficult change to implement BUT as I think stb_sprintf was designed for performances I mostly worry that the change of logic may have meaningful side effects.
If I was wondering if you or Jeff had unpublished perf tests you could run?
What this patch does:

At the top of the vsprintfcb code it adds const char* f_end = f + strlen(fmt); and then for the entire function makes small changes to use that pointer as an end marker and not rely on zero-termination, aka in theory it should never read from f_end[0].
This is a WIP patch solely designed to measure the potential side-effects (perf wise) of changing the main code.
Hastily coded and not thoroughly tested, but pass test_sprintf (which btw has a failing test on 32-bit arch, commented that one out) but there aren't many things tested.

Performance consideration:

Adding various (f < f_end) tests in the main function may add up overhead but I don't imagine so much. Might be beneficial to tweak that (e.g. use a decrementing counter?). people like jeff/ryg/sean may have better instinct what to do as I don't really know much about cpu/compilers.
The strlen() is going to touch all of the memory early on, may not be so much of an issue as cache would be primed for the main work? Pathological case if format string is very large (e.g. larger than cache)?

If there a decision that perfs were ok, and that we could move onward:
The remaining work would be, ihmo:

Add a new function e.g. _vsprintfcbn() with const char* fmt, const char* fmt_end parameter (or const char* fmt, size_t fmt_len, either way would work).
All other functions instead of calling _vsprintfcb() would call _vsprintfcbn() with a strlen().
Can we come up with some tests to validate that we are not reading past the limit? (allocate near page boundaries, with end-marker just at the frontier?)
Make sure I didn't break anything.

(tagging @simonvanbernem who seems interested too)","The way you swapped the goto-Labels and the two checks in the first loop, we won't check for end-of-string anymore, if the ""if (((v ^ 0x25252525) - 0x01010101) & c)"" branch is taken. Is this intended?",True,{}
nothings/stb,https://github.com/nothings/stb,1181,2021-07-27T15:57:26Z,,2021-08-11T09:52:17Z,OPEN,False,135,52,1,https://github.com/ocornut,"stb_sprintf: support for ""format"" being a non-zero terminated string view?",4,[],https://github.com/nothings/stb/pull/1181,https://github.com/nothings,9,https://github.com/nothings/stb/pull/1181#issuecomment-888318651,"Note: this is NOT a complete patch, more like opening a discussion.
To improve support for languages like Rust (and a growing tendency for C++ users to support string view/spans) we've been working toward supporting non-zero terminated strings in Dear ImGui. I found it has many extra advantages since many high-level languages and string types already have a length field calculated, and for literals the strlen() call can be done at compile-time.
We have a working branch but one niggle is that the sprintf functions we rely on (stdlib one or stb_sprintf) need a zero terminator for the format string parameter, which forces us to copy and zero-terminate them all. (I'm specifically taking about the format string itself needing to be zero-terminated, I am aware we can use for %.*s for other string arguments). Some of our functions tend to lead users to pass long decorated format strings (e.g. ImGui::Text(""Hello world %d %s"", ...) being a prime candidate for people sending large amount of text in a format string).
So I investigated the possibility of completely switching to embedding stb_sprintf and patching it to support this. Note that I'm not already using stb_printf, but I know some Dear ImGui are using it.
It's not a difficult change to implement BUT as I think stb_sprintf was designed for performances I mostly worry that the change of logic may have meaningful side effects.
If I was wondering if you or Jeff had unpublished perf tests you could run?
What this patch does:

At the top of the vsprintfcb code it adds const char* f_end = f + strlen(fmt); and then for the entire function makes small changes to use that pointer as an end marker and not rely on zero-termination, aka in theory it should never read from f_end[0].
This is a WIP patch solely designed to measure the potential side-effects (perf wise) of changing the main code.
Hastily coded and not thoroughly tested, but pass test_sprintf (which btw has a failing test on 32-bit arch, commented that one out) but there aren't many things tested.

Performance consideration:

Adding various (f < f_end) tests in the main function may add up overhead but I don't imagine so much. Might be beneficial to tweak that (e.g. use a decrementing counter?). people like jeff/ryg/sean may have better instinct what to do as I don't really know much about cpu/compilers.
The strlen() is going to touch all of the memory early on, may not be so much of an issue as cache would be primed for the main work? Pathological case if format string is very large (e.g. larger than cache)?

If there a decision that perfs were ok, and that we could move onward:
The remaining work would be, ihmo:

Add a new function e.g. _vsprintfcbn() with const char* fmt, const char* fmt_end parameter (or const char* fmt, size_t fmt_len, either way would work).
All other functions instead of calling _vsprintfcb() would call _vsprintfcbn() with a strlen().
Can we come up with some tests to validate that we are not reading past the limit? (allocate near page boundaries, with end-marker just at the frontier?)
Make sure I didn't break anything.

(tagging @simonvanbernem who seems interested too)","There are two cases of performance change to look at:

How much slower is the non-NUL-terminated new version vs. the old version of the library.
How much slower is the NUL-terminated new version vs. the old version of the library.

I imagine for your personal use, you kind of care about case 1, but not THAT much since it's more a question of performance vs. your alternatives; NUL-terminated isn't an option for the new version. And you can always embed it into ImGui regardless so you don't need to worry about regressing stb_sprintf.h performance.
For the possibility of integrating this into stb_sprintf itself, case 2 matters, because we don't want to cause a significant performance loss for people using this library from C/C++, which is the primary use case.
I'm not 100% sure which case you're testing here, especially as your initial description seemed addressed to the possibility of embedding it rather than making a shippable PR? But presumably the test harness would be easier to adapt using the NUL interface.
So anyway, if you are testing case 2, another possibility is you're at least partly looking at the overhead of scanning the string twice; once for strlen() and once for non-NUL-sprintf(). I'm not 100% sure how realistic any of these tests are since the string is going to be fully in cache after the first iteration, but for the hot-case I would guess it's plausible that iterating the string twice could be a significant cost. If that IS the case (I guess I wouldn't expect it to triple the time though), one possible workaround would be to have the outer layer of stb_sprintf, which contains the strlen, to scan & copy up to the first % before doing the strlen and then hand off to sprintf. (Actually, should handle %% as well.) This wouldn't cover cases where there's a lot of unformatted text AFTER the first formatted item, but I don't see a good way to address that case and this would be pretty easy to do.",True,{'THUMBS_UP': ['https://github.com/ocornut']}
nothings/stb,https://github.com/nothings/stb,1181,2021-07-27T15:57:26Z,,2021-08-11T09:52:17Z,OPEN,False,135,52,1,https://github.com/ocornut,"stb_sprintf: support for ""format"" being a non-zero terminated string view?",4,[],https://github.com/nothings/stb/pull/1181,https://github.com/nothings,10,https://github.com/nothings/stb/pull/1181#issuecomment-888322084,"Note: this is NOT a complete patch, more like opening a discussion.
To improve support for languages like Rust (and a growing tendency for C++ users to support string view/spans) we've been working toward supporting non-zero terminated strings in Dear ImGui. I found it has many extra advantages since many high-level languages and string types already have a length field calculated, and for literals the strlen() call can be done at compile-time.
We have a working branch but one niggle is that the sprintf functions we rely on (stdlib one or stb_sprintf) need a zero terminator for the format string parameter, which forces us to copy and zero-terminate them all. (I'm specifically taking about the format string itself needing to be zero-terminated, I am aware we can use for %.*s for other string arguments). Some of our functions tend to lead users to pass long decorated format strings (e.g. ImGui::Text(""Hello world %d %s"", ...) being a prime candidate for people sending large amount of text in a format string).
So I investigated the possibility of completely switching to embedding stb_sprintf and patching it to support this. Note that I'm not already using stb_printf, but I know some Dear ImGui are using it.
It's not a difficult change to implement BUT as I think stb_sprintf was designed for performances I mostly worry that the change of logic may have meaningful side effects.
If I was wondering if you or Jeff had unpublished perf tests you could run?
What this patch does:

At the top of the vsprintfcb code it adds const char* f_end = f + strlen(fmt); and then for the entire function makes small changes to use that pointer as an end marker and not rely on zero-termination, aka in theory it should never read from f_end[0].
This is a WIP patch solely designed to measure the potential side-effects (perf wise) of changing the main code.
Hastily coded and not thoroughly tested, but pass test_sprintf (which btw has a failing test on 32-bit arch, commented that one out) but there aren't many things tested.

Performance consideration:

Adding various (f < f_end) tests in the main function may add up overhead but I don't imagine so much. Might be beneficial to tweak that (e.g. use a decrementing counter?). people like jeff/ryg/sean may have better instinct what to do as I don't really know much about cpu/compilers.
The strlen() is going to touch all of the memory early on, may not be so much of an issue as cache would be primed for the main work? Pathological case if format string is very large (e.g. larger than cache)?

If there a decision that perfs were ok, and that we could move onward:
The remaining work would be, ihmo:

Add a new function e.g. _vsprintfcbn() with const char* fmt, const char* fmt_end parameter (or const char* fmt, size_t fmt_len, either way would work).
All other functions instead of calling _vsprintfcb() would call _vsprintfcbn() with a strlen().
Can we come up with some tests to validate that we are not reading past the limit? (allocate near page boundaries, with end-marker just at the frontier?)
Make sure I didn't break anything.

(tagging @simonvanbernem who seems interested too)","BTW, it looks like the tests don't have any cases like ""%6.2f"", which is the sort of thing I tend to use in profilers so might be an important case for you. Probably not significantly affected by the NUL stuff though so not worth worrying about here, but maybe worth testing against regular sprintf.",True,{}
nothings/stb,https://github.com/nothings/stb,1181,2021-07-27T15:57:26Z,,2021-08-11T09:52:17Z,OPEN,False,135,52,1,https://github.com/ocornut,"stb_sprintf: support for ""format"" being a non-zero terminated string view?",4,[],https://github.com/nothings/stb/pull/1181,https://github.com/ocornut,11,https://github.com/nothings/stb/pull/1181#issuecomment-888404383,"Note: this is NOT a complete patch, more like opening a discussion.
To improve support for languages like Rust (and a growing tendency for C++ users to support string view/spans) we've been working toward supporting non-zero terminated strings in Dear ImGui. I found it has many extra advantages since many high-level languages and string types already have a length field calculated, and for literals the strlen() call can be done at compile-time.
We have a working branch but one niggle is that the sprintf functions we rely on (stdlib one or stb_sprintf) need a zero terminator for the format string parameter, which forces us to copy and zero-terminate them all. (I'm specifically taking about the format string itself needing to be zero-terminated, I am aware we can use for %.*s for other string arguments). Some of our functions tend to lead users to pass long decorated format strings (e.g. ImGui::Text(""Hello world %d %s"", ...) being a prime candidate for people sending large amount of text in a format string).
So I investigated the possibility of completely switching to embedding stb_sprintf and patching it to support this. Note that I'm not already using stb_printf, but I know some Dear ImGui are using it.
It's not a difficult change to implement BUT as I think stb_sprintf was designed for performances I mostly worry that the change of logic may have meaningful side effects.
If I was wondering if you or Jeff had unpublished perf tests you could run?
What this patch does:

At the top of the vsprintfcb code it adds const char* f_end = f + strlen(fmt); and then for the entire function makes small changes to use that pointer as an end marker and not rely on zero-termination, aka in theory it should never read from f_end[0].
This is a WIP patch solely designed to measure the potential side-effects (perf wise) of changing the main code.
Hastily coded and not thoroughly tested, but pass test_sprintf (which btw has a failing test on 32-bit arch, commented that one out) but there aren't many things tested.

Performance consideration:

Adding various (f < f_end) tests in the main function may add up overhead but I don't imagine so much. Might be beneficial to tweak that (e.g. use a decrementing counter?). people like jeff/ryg/sean may have better instinct what to do as I don't really know much about cpu/compilers.
The strlen() is going to touch all of the memory early on, may not be so much of an issue as cache would be primed for the main work? Pathological case if format string is very large (e.g. larger than cache)?

If there a decision that perfs were ok, and that we could move onward:
The remaining work would be, ihmo:

Add a new function e.g. _vsprintfcbn() with const char* fmt, const char* fmt_end parameter (or const char* fmt, size_t fmt_len, either way would work).
All other functions instead of calling _vsprintfcb() would call _vsprintfcbn() with a strlen().
Can we come up with some tests to validate that we are not reading past the limit? (allocate near page boundaries, with end-marker just at the frontier?)
Make sure I didn't break anything.

(tagging @simonvanbernem who seems interested too)","The way you swapped the goto-Labels and the two checks in the first loop, we won't check for end-of-string anymore, if the ""if (((v ^ 0x25252525) - 0x01010101) & c)"" branch is taken. Is this intended?

Right, if within the same 4 bytes there are both a % and end of string, the first iteration won't check for end-of-string, so I guess the goto schk2 can be changed to goto schk1, my bad.

I'm not 100% sure which case you're testing here, especially as your initial description seemed addressed to the possibility of embedding it rather than making a shippable PR? But presumably the test harness would be easier to adapt using the NUL interface.

In the current test I'm adding a strlen() so I'm essentially testing case 2, as the assumption is that we'd only have one version of the inner-loop which would function with an end pointer. Of course that's only a viable assumption is we can make keep it fast enough.
(Case 1 will always be a little faster than case 2 for the stb_printf call tree since there's no strlen)
Thanks for the suggestion, that's a good idea. First I'm going to see if I can make the existing loop as fast as previous version.

BTW, it looks like the tests don't have any cases like ""%6.2f"", which is the sort of thing I tend to use in profilers so might be an important case for you

Right. Adding to my test cases. As an indication:
sprintf       time for '%6.2f': 54103
stbsp_printf  time for '%6.2f': 16920
stbsp_printf2 time for '%6.2f': 17275

EDIT: Using stbsp__strlen() (simplified version of stbsp__strlen_limited() instead of strlen yield measurable wins.
original zero-terminated
stbsp_sprintf time 2540 for 'stringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstring'
stbsp_sprintf time 2547 for 'strin stringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring'
stbsp_sprintf time 10275 for '0123456789012345678901234567890123456789012345678901234567890123%d'

vs new zero-terminated using strlen + non-zero terminated code
stbsp_sprintf2 time 3956 for 'stringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstring'
stbsp_sprintf2 time 3968 for 'strin stringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring'
stbsp_sprintf2 time 11679 for '0123456789012345678901234567890123456789012345678901234567890123%d'",True,"{'THUMBS_UP': ['https://github.com/nothings', 'https://github.com/simonvanbernem']}"
nothings/stb,https://github.com/nothings/stb,1181,2021-07-27T15:57:26Z,,2021-08-11T09:52:17Z,OPEN,False,135,52,1,https://github.com/ocornut,"stb_sprintf: support for ""format"" being a non-zero terminated string view?",4,[],https://github.com/nothings/stb/pull/1181,https://github.com/nothings,12,https://github.com/nothings/stb/pull/1181#issuecomment-888432442,"Note: this is NOT a complete patch, more like opening a discussion.
To improve support for languages like Rust (and a growing tendency for C++ users to support string view/spans) we've been working toward supporting non-zero terminated strings in Dear ImGui. I found it has many extra advantages since many high-level languages and string types already have a length field calculated, and for literals the strlen() call can be done at compile-time.
We have a working branch but one niggle is that the sprintf functions we rely on (stdlib one or stb_sprintf) need a zero terminator for the format string parameter, which forces us to copy and zero-terminate them all. (I'm specifically taking about the format string itself needing to be zero-terminated, I am aware we can use for %.*s for other string arguments). Some of our functions tend to lead users to pass long decorated format strings (e.g. ImGui::Text(""Hello world %d %s"", ...) being a prime candidate for people sending large amount of text in a format string).
So I investigated the possibility of completely switching to embedding stb_sprintf and patching it to support this. Note that I'm not already using stb_printf, but I know some Dear ImGui are using it.
It's not a difficult change to implement BUT as I think stb_sprintf was designed for performances I mostly worry that the change of logic may have meaningful side effects.
If I was wondering if you or Jeff had unpublished perf tests you could run?
What this patch does:

At the top of the vsprintfcb code it adds const char* f_end = f + strlen(fmt); and then for the entire function makes small changes to use that pointer as an end marker and not rely on zero-termination, aka in theory it should never read from f_end[0].
This is a WIP patch solely designed to measure the potential side-effects (perf wise) of changing the main code.
Hastily coded and not thoroughly tested, but pass test_sprintf (which btw has a failing test on 32-bit arch, commented that one out) but there aren't many things tested.

Performance consideration:

Adding various (f < f_end) tests in the main function may add up overhead but I don't imagine so much. Might be beneficial to tweak that (e.g. use a decrementing counter?). people like jeff/ryg/sean may have better instinct what to do as I don't really know much about cpu/compilers.
The strlen() is going to touch all of the memory early on, may not be so much of an issue as cache would be primed for the main work? Pathological case if format string is very large (e.g. larger than cache)?

If there a decision that perfs were ok, and that we could move onward:
The remaining work would be, ihmo:

Add a new function e.g. _vsprintfcbn() with const char* fmt, const char* fmt_end parameter (or const char* fmt, size_t fmt_len, either way would work).
All other functions instead of calling _vsprintfcb() would call _vsprintfcbn() with a strlen().
Can we come up with some tests to validate that we are not reading past the limit? (allocate near page boundaries, with end-marker just at the frontier?)
Make sure I didn't break anything.

(tagging @simonvanbernem who seems interested too)","EDIT: Using stbsp__strlen() (simplified version of stbsp__strlen_limited() instead of strlen yield measurable wins.
original zero-terminated

Kind of depressing since it means strlen() on whichever platform you're using isn't already doing four-at-a-time (or even SIMD).",True,{}
nothings/stb,https://github.com/nothings/stb,1181,2021-07-27T15:57:26Z,,2021-08-11T09:52:17Z,OPEN,False,135,52,1,https://github.com/ocornut,"stb_sprintf: support for ""format"" being a non-zero terminated string view?",4,[],https://github.com/nothings/stb/pull/1181,https://github.com/ocornut,13,https://github.com/nothings/stb/pull/1181#issuecomment-888444778,"Note: this is NOT a complete patch, more like opening a discussion.
To improve support for languages like Rust (and a growing tendency for C++ users to support string view/spans) we've been working toward supporting non-zero terminated strings in Dear ImGui. I found it has many extra advantages since many high-level languages and string types already have a length field calculated, and for literals the strlen() call can be done at compile-time.
We have a working branch but one niggle is that the sprintf functions we rely on (stdlib one or stb_sprintf) need a zero terminator for the format string parameter, which forces us to copy and zero-terminate them all. (I'm specifically taking about the format string itself needing to be zero-terminated, I am aware we can use for %.*s for other string arguments). Some of our functions tend to lead users to pass long decorated format strings (e.g. ImGui::Text(""Hello world %d %s"", ...) being a prime candidate for people sending large amount of text in a format string).
So I investigated the possibility of completely switching to embedding stb_sprintf and patching it to support this. Note that I'm not already using stb_printf, but I know some Dear ImGui are using it.
It's not a difficult change to implement BUT as I think stb_sprintf was designed for performances I mostly worry that the change of logic may have meaningful side effects.
If I was wondering if you or Jeff had unpublished perf tests you could run?
What this patch does:

At the top of the vsprintfcb code it adds const char* f_end = f + strlen(fmt); and then for the entire function makes small changes to use that pointer as an end marker and not rely on zero-termination, aka in theory it should never read from f_end[0].
This is a WIP patch solely designed to measure the potential side-effects (perf wise) of changing the main code.
Hastily coded and not thoroughly tested, but pass test_sprintf (which btw has a failing test on 32-bit arch, commented that one out) but there aren't many things tested.

Performance consideration:

Adding various (f < f_end) tests in the main function may add up overhead but I don't imagine so much. Might be beneficial to tweak that (e.g. use a decrementing counter?). people like jeff/ryg/sean may have better instinct what to do as I don't really know much about cpu/compilers.
The strlen() is going to touch all of the memory early on, may not be so much of an issue as cache would be primed for the main work? Pathological case if format string is very large (e.g. larger than cache)?

If there a decision that perfs were ok, and that we could move onward:
The remaining work would be, ihmo:

Add a new function e.g. _vsprintfcbn() with const char* fmt, const char* fmt_end parameter (or const char* fmt, size_t fmt_len, either way would work).
All other functions instead of calling _vsprintfcb() would call _vsprintfcbn() with a strlen().
Can we come up with some tests to validate that we are not reading past the limit? (allocate near page boundaries, with end-marker just at the frontier?)
Make sure I didn't break anything.

(tagging @simonvanbernem who seems interested too)","Kind of depressing since it means strlen() on whichever platform you're using isn't already doing four-at-a-time (or even SIMD).

VS2015 and VS2019 ""Release"" build are inlining a dumb version when intrinsic are enabled....
int fmt_len = strlen(fmt);// stbsp__strlen(fmt);
00007FF75C8445EA 49 C7 C2 FF FF FF FF mov         r10,0FFFFFFFFFFFFFFFFh  
00007FF75C8445F1 49 FF C2             inc         r10  
00007FF75C8445F4 43 80 3C 10 00       cmp         byte ptr [r8+r10],0  
00007FF75C8445F9 75 F6                jne         stbsp_vsnprintf+21h (07FF75C8445F1h)  

Confirmed....
https://developercommunity.visualstudio.com/t/it-seems-that-visual-studios-cpp-compiler-creates/737594
https://developercommunity.visualstudio.com/t/msconnect-1218177-inlined-intrinsic-strlen-is-not/204272
EDIT: Amusingly it means that in ""Debug"" build even with the additional jumps hoops we end up in a faster version within ucrtbased.dll.... (it does it 8 at a times on my config)",True,{'THUMBS_UP': ['https://github.com/nothings']}
nothings/stb,https://github.com/nothings/stb,1181,2021-07-27T15:57:26Z,,2021-08-11T09:52:17Z,OPEN,False,135,52,1,https://github.com/ocornut,"stb_sprintf: support for ""format"" being a non-zero terminated string view?",4,[],https://github.com/nothings/stb/pull/1181,https://github.com/ocornut,14,https://github.com/nothings/stb/pull/1181#issuecomment-888497458,"Note: this is NOT a complete patch, more like opening a discussion.
To improve support for languages like Rust (and a growing tendency for C++ users to support string view/spans) we've been working toward supporting non-zero terminated strings in Dear ImGui. I found it has many extra advantages since many high-level languages and string types already have a length field calculated, and for literals the strlen() call can be done at compile-time.
We have a working branch but one niggle is that the sprintf functions we rely on (stdlib one or stb_sprintf) need a zero terminator for the format string parameter, which forces us to copy and zero-terminate them all. (I'm specifically taking about the format string itself needing to be zero-terminated, I am aware we can use for %.*s for other string arguments). Some of our functions tend to lead users to pass long decorated format strings (e.g. ImGui::Text(""Hello world %d %s"", ...) being a prime candidate for people sending large amount of text in a format string).
So I investigated the possibility of completely switching to embedding stb_sprintf and patching it to support this. Note that I'm not already using stb_printf, but I know some Dear ImGui are using it.
It's not a difficult change to implement BUT as I think stb_sprintf was designed for performances I mostly worry that the change of logic may have meaningful side effects.
If I was wondering if you or Jeff had unpublished perf tests you could run?
What this patch does:

At the top of the vsprintfcb code it adds const char* f_end = f + strlen(fmt); and then for the entire function makes small changes to use that pointer as an end marker and not rely on zero-termination, aka in theory it should never read from f_end[0].
This is a WIP patch solely designed to measure the potential side-effects (perf wise) of changing the main code.
Hastily coded and not thoroughly tested, but pass test_sprintf (which btw has a failing test on 32-bit arch, commented that one out) but there aren't many things tested.

Performance consideration:

Adding various (f < f_end) tests in the main function may add up overhead but I don't imagine so much. Might be beneficial to tweak that (e.g. use a decrementing counter?). people like jeff/ryg/sean may have better instinct what to do as I don't really know much about cpu/compilers.
The strlen() is going to touch all of the memory early on, may not be so much of an issue as cache would be primed for the main work? Pathological case if format string is very large (e.g. larger than cache)?

If there a decision that perfs were ok, and that we could move onward:
The remaining work would be, ihmo:

Add a new function e.g. _vsprintfcbn() with const char* fmt, const char* fmt_end parameter (or const char* fmt, size_t fmt_len, either way would work).
All other functions instead of calling _vsprintfcb() would call _vsprintfcbn() with a strlen().
Can we come up with some tests to validate that we are not reading past the limit? (allocate near page boundaries, with end-marker just at the frontier?)
Make sure I didn't break anything.

(tagging @simonvanbernem who seems interested too)","I duplicated the copying loop (~42 lines) to provide both a zero-terminated and a pointer-terminated version.
fmt_end gets set to ~0 when using a zero-terminated function. The flag parsing code always test for f < fmt_end.
Technically speaking we could provide two versions of the whole function but this seems like a good compromise.
// v0 (vanilla stb_printf, zero-terminated input)
stbsp_sprintf  time 2553  for 'stringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstring'
stbsp_sprintf  time 2550  for 'strin stringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring'
stbsp_printf   time 6596  for '%6.2f'
stbsp_sprintf  time 10379 for '0123456789012345678901234567890123456789012345678901234567890123%d'

// v5 (dual path, zero-terminated input)
stbsp_sprintf  time 2610 for 'stringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstring'
stbsp_sprintf  time 2604 for 'strin stringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring'
stbsp_printf   time 6606 for '%6.2f'
stbsp_sprintf  time 9681 for '0123456789012345678901234567890123456789012345678901234567890123%d'

// v5 (dual path, not zero-terminated input, fmt_end provided by caller)
stbsp_sprintf  time 2493 for 'stringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstring'
stbsp_sprintf  time 2493 for 'strin stringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring'
stbsp_printf   time 6634 for '%6.2f'
stbsp_sprintf  time 10558 for '0123456789012345678901234567890123456789012345678901234567890123%d'

For reference, those two earlier versions are giving an indication of the cost of the extra stbsp_strlen() done everytime:
// v3 (zero-terminated input + code supporting non-zero-terminated + function always calling our strlen)
stbsp_sprintf time 3970 for 'stringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstring'
stbsp_sprintf time 3970 for 'strin stringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring'
stbsp_printf  time 6658 for '%6.2f'
stbsp_sprintf time 11809 for '0123456789012345678901234567890123456789012345678901234567890123%d'

// v4 (non-zero terminated input: with fmt_end provided by caller)
stbsp_sprintf time 2470 for 'stringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstring'
stbsp_sprintf time 2467 for 'strin stringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring'
stbsp_printf  time 6642 for '%6.2f'
stbsp_sprintf time 9461 for '0123456789012345678901234567890123456789012345678901234567890123%d'

Difference between v3 and v4 is only that v4 is providing fmt_end at the call site (doing strlen once).
Will run entire test suite again but rough idea is that the typical zero-terminated path may generally be 3-5% slower with that change, while providing non-zero terminated support. Considering that stb_printf claims x35 speed compared to VS on long strings, and x5 to x12 on various data types, the +5% loss may be ok? (other solution is to compile-time define all of it)",True,{}
nothings/stb,https://github.com/nothings/stb,1181,2021-07-27T15:57:26Z,,2021-08-11T09:52:17Z,OPEN,False,135,52,1,https://github.com/ocornut,"stb_sprintf: support for ""format"" being a non-zero terminated string view?",4,[],https://github.com/nothings/stb/pull/1181,https://github.com/nothings,15,https://github.com/nothings/stb/pull/1181#issuecomment-888505101,"Note: this is NOT a complete patch, more like opening a discussion.
To improve support for languages like Rust (and a growing tendency for C++ users to support string view/spans) we've been working toward supporting non-zero terminated strings in Dear ImGui. I found it has many extra advantages since many high-level languages and string types already have a length field calculated, and for literals the strlen() call can be done at compile-time.
We have a working branch but one niggle is that the sprintf functions we rely on (stdlib one or stb_sprintf) need a zero terminator for the format string parameter, which forces us to copy and zero-terminate them all. (I'm specifically taking about the format string itself needing to be zero-terminated, I am aware we can use for %.*s for other string arguments). Some of our functions tend to lead users to pass long decorated format strings (e.g. ImGui::Text(""Hello world %d %s"", ...) being a prime candidate for people sending large amount of text in a format string).
So I investigated the possibility of completely switching to embedding stb_sprintf and patching it to support this. Note that I'm not already using stb_printf, but I know some Dear ImGui are using it.
It's not a difficult change to implement BUT as I think stb_sprintf was designed for performances I mostly worry that the change of logic may have meaningful side effects.
If I was wondering if you or Jeff had unpublished perf tests you could run?
What this patch does:

At the top of the vsprintfcb code it adds const char* f_end = f + strlen(fmt); and then for the entire function makes small changes to use that pointer as an end marker and not rely on zero-termination, aka in theory it should never read from f_end[0].
This is a WIP patch solely designed to measure the potential side-effects (perf wise) of changing the main code.
Hastily coded and not thoroughly tested, but pass test_sprintf (which btw has a failing test on 32-bit arch, commented that one out) but there aren't many things tested.

Performance consideration:

Adding various (f < f_end) tests in the main function may add up overhead but I don't imagine so much. Might be beneficial to tweak that (e.g. use a decrementing counter?). people like jeff/ryg/sean may have better instinct what to do as I don't really know much about cpu/compilers.
The strlen() is going to touch all of the memory early on, may not be so much of an issue as cache would be primed for the main work? Pathological case if format string is very large (e.g. larger than cache)?

If there a decision that perfs were ok, and that we could move onward:
The remaining work would be, ihmo:

Add a new function e.g. _vsprintfcbn() with const char* fmt, const char* fmt_end parameter (or const char* fmt, size_t fmt_len, either way would work).
All other functions instead of calling _vsprintfcb() would call _vsprintfcbn() with a strlen().
Can we come up with some tests to validate that we are not reading past the limit? (allocate near page boundaries, with end-marker just at the frontier?)
Make sure I didn't break anything.

(tagging @simonvanbernem who seems interested too)","Looking pretty close. I notice v5 non-nul terminated is now slower than the nul-teriminated for the unformatted strings case, is this still using your ""initial version"" of the copying loop for the fmt_end case, or have you made further optimizations to it?",True,{}
nothings/stb,https://github.com/nothings/stb,1181,2021-07-27T15:57:26Z,,2021-08-11T09:52:17Z,OPEN,False,135,52,1,https://github.com/ocornut,"stb_sprintf: support for ""format"" being a non-zero terminated string view?",4,[],https://github.com/nothings/stb/pull/1181,https://github.com/nothings,16,https://github.com/nothings/stb/pull/1181#issuecomment-888508799,"Note: this is NOT a complete patch, more like opening a discussion.
To improve support for languages like Rust (and a growing tendency for C++ users to support string view/spans) we've been working toward supporting non-zero terminated strings in Dear ImGui. I found it has many extra advantages since many high-level languages and string types already have a length field calculated, and for literals the strlen() call can be done at compile-time.
We have a working branch but one niggle is that the sprintf functions we rely on (stdlib one or stb_sprintf) need a zero terminator for the format string parameter, which forces us to copy and zero-terminate them all. (I'm specifically taking about the format string itself needing to be zero-terminated, I am aware we can use for %.*s for other string arguments). Some of our functions tend to lead users to pass long decorated format strings (e.g. ImGui::Text(""Hello world %d %s"", ...) being a prime candidate for people sending large amount of text in a format string).
So I investigated the possibility of completely switching to embedding stb_sprintf and patching it to support this. Note that I'm not already using stb_printf, but I know some Dear ImGui are using it.
It's not a difficult change to implement BUT as I think stb_sprintf was designed for performances I mostly worry that the change of logic may have meaningful side effects.
If I was wondering if you or Jeff had unpublished perf tests you could run?
What this patch does:

At the top of the vsprintfcb code it adds const char* f_end = f + strlen(fmt); and then for the entire function makes small changes to use that pointer as an end marker and not rely on zero-termination, aka in theory it should never read from f_end[0].
This is a WIP patch solely designed to measure the potential side-effects (perf wise) of changing the main code.
Hastily coded and not thoroughly tested, but pass test_sprintf (which btw has a failing test on 32-bit arch, commented that one out) but there aren't many things tested.

Performance consideration:

Adding various (f < f_end) tests in the main function may add up overhead but I don't imagine so much. Might be beneficial to tweak that (e.g. use a decrementing counter?). people like jeff/ryg/sean may have better instinct what to do as I don't really know much about cpu/compilers.
The strlen() is going to touch all of the memory early on, may not be so much of an issue as cache would be primed for the main work? Pathological case if format string is very large (e.g. larger than cache)?

If there a decision that perfs were ok, and that we could move onward:
The remaining work would be, ihmo:

Add a new function e.g. _vsprintfcbn() with const char* fmt, const char* fmt_end parameter (or const char* fmt, size_t fmt_len, either way would work).
All other functions instead of calling _vsprintfcb() would call _vsprintfcbn() with a strlen().
Can we come up with some tests to validate that we are not reading past the limit? (allocate near page boundaries, with end-marker just at the frontier?)
Make sure I didn't break anything.

(tagging @simonvanbernem who seems interested too)","the typical zero-terminated path may generally be 3-5% slower with that change, while providing non-zero terminated support. Considering that stb_printf claims x35 speed compared to VS on long strings, and x5 to x12 on various data types, the +5% loss may be ok?

I think I'd be generally ok with the perf lost for the feature gain, but some thoughts:

my initial reaction was that this is a pretty frivolous feature and not worth a perf loss ever (given you could just embed your version yourself), but on reflection it's possibly interesting to have access to C-style printf from other languages AT ALL. In the early days of stb_image, one of the first hits for ""stb_image"" on google was a Haskell wrapper.
my one caveat to the perf loss being acceptable is it only makes sense if there's not a lot of new code (i'm ok with changes). so two versions of a 42-line copy loop is a bit awkward, as is having our own strlen implementation. OTOH if we can get the slowdown closer to 0% I'd be willing to accept a bigger increase in size.
but maybe if I give it some time to reflect on it, I'll be ok with it as is anyway",True,{'THUMBS_UP': ['https://github.com/ocornut']}
nothings/stb,https://github.com/nothings/stb,1181,2021-07-27T15:57:26Z,,2021-08-11T09:52:17Z,OPEN,False,135,52,1,https://github.com/ocornut,"stb_sprintf: support for ""format"" being a non-zero terminated string view?",4,[],https://github.com/nothings/stb/pull/1181,https://github.com/PathogenDavid,17,https://github.com/nothings/stb/pull/1181#issuecomment-888514551,"Note: this is NOT a complete patch, more like opening a discussion.
To improve support for languages like Rust (and a growing tendency for C++ users to support string view/spans) we've been working toward supporting non-zero terminated strings in Dear ImGui. I found it has many extra advantages since many high-level languages and string types already have a length field calculated, and for literals the strlen() call can be done at compile-time.
We have a working branch but one niggle is that the sprintf functions we rely on (stdlib one or stb_sprintf) need a zero terminator for the format string parameter, which forces us to copy and zero-terminate them all. (I'm specifically taking about the format string itself needing to be zero-terminated, I am aware we can use for %.*s for other string arguments). Some of our functions tend to lead users to pass long decorated format strings (e.g. ImGui::Text(""Hello world %d %s"", ...) being a prime candidate for people sending large amount of text in a format string).
So I investigated the possibility of completely switching to embedding stb_sprintf and patching it to support this. Note that I'm not already using stb_printf, but I know some Dear ImGui are using it.
It's not a difficult change to implement BUT as I think stb_sprintf was designed for performances I mostly worry that the change of logic may have meaningful side effects.
If I was wondering if you or Jeff had unpublished perf tests you could run?
What this patch does:

At the top of the vsprintfcb code it adds const char* f_end = f + strlen(fmt); and then for the entire function makes small changes to use that pointer as an end marker and not rely on zero-termination, aka in theory it should never read from f_end[0].
This is a WIP patch solely designed to measure the potential side-effects (perf wise) of changing the main code.
Hastily coded and not thoroughly tested, but pass test_sprintf (which btw has a failing test on 32-bit arch, commented that one out) but there aren't many things tested.

Performance consideration:

Adding various (f < f_end) tests in the main function may add up overhead but I don't imagine so much. Might be beneficial to tweak that (e.g. use a decrementing counter?). people like jeff/ryg/sean may have better instinct what to do as I don't really know much about cpu/compilers.
The strlen() is going to touch all of the memory early on, may not be so much of an issue as cache would be primed for the main work? Pathological case if format string is very large (e.g. larger than cache)?

If there a decision that perfs were ok, and that we could move onward:
The remaining work would be, ihmo:

Add a new function e.g. _vsprintfcbn() with const char* fmt, const char* fmt_end parameter (or const char* fmt, size_t fmt_len, either way would work).
All other functions instead of calling _vsprintfcb() would call _vsprintfcbn() with a strlen().
Can we come up with some tests to validate that we are not reading past the limit? (allocate near page boundaries, with end-marker just at the frontier?)
Make sure I didn't break anything.

(tagging @simonvanbernem who seems interested too)","VS2015 and VS2019 ""Release"" build are inlining a dumb version when intrinsic are enabled....

This got me curious so I did a little digging. Short version: Turns out Microsoft only optimized strnlen for some reason, might be worth trying it in the context of this PR.

For some reason Microsoft is still using frumpy old hand-written assembly for their strlen implementation. (You can read the x64 version in C:\Program Files (x86)\Windows Kits\10\Source\10.0.19041.0\ucrt\string\amd64\strlen.asm)
Interestingly, strnlen is written in C++ and has alternate paths for AVX2 and SSE2. (C:\Program Files (x86)\Windows Kits\10\Source\10.0.19041.0\ucrt\string\strnlen.cpp)
I did a quick and dirty microbenchmark with strnlen imitating strlen (IE: strnlen(str, ((size_t)-1) - ((size_t)str));), and indeed strnlen is around 10 times faster in x64 release builds:
Testing with 55316 character string with 1000000 iterations...
 strlen: 55316000000, 55316, time: 149116311 ticks total, 14911.631100 ns per iteration
strnlen: 55316000000, 55316, time: 14182812 ticks total, 1418.281200 ns per iteration
strnlen is 10.513875 faster than strlen


(Funnily enough, `strlen` still wins in debug builds.)
Testing with 55316 character string with 1000000 iterations...
 strlen: 55316000000, 55316, time: 37479447 ticks total, 3747.944700 ns per iteration
strnlen: 55316000000, 55316, time: 142507789 ticks total, 14250.778900 ns per iteration
strnlen is 0.262999 faster than strlen",True,{}
nothings/stb,https://github.com/nothings/stb,1181,2021-07-27T15:57:26Z,,2021-08-11T09:52:17Z,OPEN,False,135,52,1,https://github.com/ocornut,"stb_sprintf: support for ""format"" being a non-zero terminated string view?",4,[],https://github.com/nothings/stb/pull/1181,https://github.com/ocornut,18,https://github.com/nothings/stb/pull/1181#issuecomment-888520688,"Note: this is NOT a complete patch, more like opening a discussion.
To improve support for languages like Rust (and a growing tendency for C++ users to support string view/spans) we've been working toward supporting non-zero terminated strings in Dear ImGui. I found it has many extra advantages since many high-level languages and string types already have a length field calculated, and for literals the strlen() call can be done at compile-time.
We have a working branch but one niggle is that the sprintf functions we rely on (stdlib one or stb_sprintf) need a zero terminator for the format string parameter, which forces us to copy and zero-terminate them all. (I'm specifically taking about the format string itself needing to be zero-terminated, I am aware we can use for %.*s for other string arguments). Some of our functions tend to lead users to pass long decorated format strings (e.g. ImGui::Text(""Hello world %d %s"", ...) being a prime candidate for people sending large amount of text in a format string).
So I investigated the possibility of completely switching to embedding stb_sprintf and patching it to support this. Note that I'm not already using stb_printf, but I know some Dear ImGui are using it.
It's not a difficult change to implement BUT as I think stb_sprintf was designed for performances I mostly worry that the change of logic may have meaningful side effects.
If I was wondering if you or Jeff had unpublished perf tests you could run?
What this patch does:

At the top of the vsprintfcb code it adds const char* f_end = f + strlen(fmt); and then for the entire function makes small changes to use that pointer as an end marker and not rely on zero-termination, aka in theory it should never read from f_end[0].
This is a WIP patch solely designed to measure the potential side-effects (perf wise) of changing the main code.
Hastily coded and not thoroughly tested, but pass test_sprintf (which btw has a failing test on 32-bit arch, commented that one out) but there aren't many things tested.

Performance consideration:

Adding various (f < f_end) tests in the main function may add up overhead but I don't imagine so much. Might be beneficial to tweak that (e.g. use a decrementing counter?). people like jeff/ryg/sean may have better instinct what to do as I don't really know much about cpu/compilers.
The strlen() is going to touch all of the memory early on, may not be so much of an issue as cache would be primed for the main work? Pathological case if format string is very large (e.g. larger than cache)?

If there a decision that perfs were ok, and that we could move onward:
The remaining work would be, ihmo:

Add a new function e.g. _vsprintfcbn() with const char* fmt, const char* fmt_end parameter (or const char* fmt, size_t fmt_len, either way would work).
All other functions instead of calling _vsprintfcb() would call _vsprintfcbn() with a strlen().
Can we come up with some tests to validate that we are not reading past the limit? (allocate near page boundaries, with end-marker just at the frontier?)
Make sure I didn't break anything.

(tagging @simonvanbernem who seems interested too)","as is having our own strlen implementation.

That part got actually removed in v5, since the zero-terminating case doesn't need it anymore.
(fyi stb_printf already had stbsp__strlen_limited(), the one I added in v2 was a trimmed down version)
Quick stats
Current version goes from 1477 to 1544 lines (+67 lines) and introduce two new symbols vsprintfcbnz and sprintfnz. The later sprintfnz I only added to make it easier for benchmark (adds +11 lines because of the va_list cruft). We could either decide to only provide the new parameter in the ""most-complete"" function vsprintfcbnz() or add **nz versions to all of them.
Your question on the loop:
The non-zerminated loop has changed from initial version
            // Check if the next 4 bytes contain %(0x25) or end of string.
            // Using the 'hasless' trick:
            // https://graphics.stanford.edu/~seander/bithacks.html#HasLessInWord
            stbsp__uint32 v, c;
            v = *(stbsp__uint32 *)f;
            c = (~v) & 0x80808080;
            if (((v ^ 0x25252525) - 0x01010101) & c)
               goto schk2;
            if (f_end - f < 4)
               goto schk1;
            if (callback)
               if ((STB_SPRINTF_MIN - (int)(bf - buf)) < 4)
                  goto schk2;

to
            // Check if the next 4 bytes contain %(0x25) or end of string.
            // Using the 'hasless' trick:
            // https://graphics.stanford.edu/~seander/bithacks.html#HasLessInWord
            if (f_end - f < 4)
               goto schk1;
            stbsp__uint32 v, c;
            v = *(stbsp__uint32 *)f;
            c = (~v) & 0x80808080;
            if (((v ^ 0x25252525) - 0x01010101) & c)
               goto schk1;
            if (callback)
               if ((STB_SPRINTF_MIN - (int)(bf - buf)) < 4)
                  goto schk1; 

As I could reliable measure a difference.
I can't well explain the result there (notice the last one has a %d at the end), but the measurements comes back generally the same every time I run them.
// v0 (vanilla)
stbsp_sprintf time 2556 for 'stringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstring'
stbsp_sprintf time 2551 for 'strin stringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring'

// v5 (dual path, zero-terminated input)
stbsp_sprintf  time 2610 for 'stringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstring'
stbsp_sprintf  time 2604 for 'strin stringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring'
stbsp_sprintf  time 9681 for '0123456789012345678901234567890123456789012345678901234567890123%d'

// v5 (dual path, not zero-terminated input, fmt_end provided by caller)
stbsp_sprintf  time 2493 for 'stringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstring'
stbsp_sprintf  time 2493 for 'strin stringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring'
stbsp_sprintf  time 10558 for '0123456789012345678901234567890123456789012345678901234567890123%d'

Adding a %d in two first long strings:
// v0 (vanilla)
stbsp_sprintf time 2974 for 'stringstringstringstringstring%dstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstring'
stbsp_sprintf time 2970 for 'strin stringstring tringstring tringstring%d tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring'

// v5 (dual path, zero-terminated input)
stbsp_sprintf time 2999 for 'stringstringstringstringstring%dstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstring'
stbsp_sprintf time 2971 for 'strin stringstring tringstring tringstring%d tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring'

// v5 (dual path, not zero-terminated input, fmt_end provided by caller)
stbsp_sprintf time 2992 for 'stringstringstringstringstring%dstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstring'
stbsp_sprintf time 2962 for 'strin stringstring tringstring tringstring%d tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring'",True,{}
nothings/stb,https://github.com/nothings/stb,1181,2021-07-27T15:57:26Z,,2021-08-11T09:52:17Z,OPEN,False,135,52,1,https://github.com/ocornut,"stb_sprintf: support for ""format"" being a non-zero terminated string view?",4,[],https://github.com/nothings/stb/pull/1181,https://github.com/nothings,19,https://github.com/nothings/stb/pull/1181#issuecomment-888530631,"Note: this is NOT a complete patch, more like opening a discussion.
To improve support for languages like Rust (and a growing tendency for C++ users to support string view/spans) we've been working toward supporting non-zero terminated strings in Dear ImGui. I found it has many extra advantages since many high-level languages and string types already have a length field calculated, and for literals the strlen() call can be done at compile-time.
We have a working branch but one niggle is that the sprintf functions we rely on (stdlib one or stb_sprintf) need a zero terminator for the format string parameter, which forces us to copy and zero-terminate them all. (I'm specifically taking about the format string itself needing to be zero-terminated, I am aware we can use for %.*s for other string arguments). Some of our functions tend to lead users to pass long decorated format strings (e.g. ImGui::Text(""Hello world %d %s"", ...) being a prime candidate for people sending large amount of text in a format string).
So I investigated the possibility of completely switching to embedding stb_sprintf and patching it to support this. Note that I'm not already using stb_printf, but I know some Dear ImGui are using it.
It's not a difficult change to implement BUT as I think stb_sprintf was designed for performances I mostly worry that the change of logic may have meaningful side effects.
If I was wondering if you or Jeff had unpublished perf tests you could run?
What this patch does:

At the top of the vsprintfcb code it adds const char* f_end = f + strlen(fmt); and then for the entire function makes small changes to use that pointer as an end marker and not rely on zero-termination, aka in theory it should never read from f_end[0].
This is a WIP patch solely designed to measure the potential side-effects (perf wise) of changing the main code.
Hastily coded and not thoroughly tested, but pass test_sprintf (which btw has a failing test on 32-bit arch, commented that one out) but there aren't many things tested.

Performance consideration:

Adding various (f < f_end) tests in the main function may add up overhead but I don't imagine so much. Might be beneficial to tweak that (e.g. use a decrementing counter?). people like jeff/ryg/sean may have better instinct what to do as I don't really know much about cpu/compilers.
The strlen() is going to touch all of the memory early on, may not be so much of an issue as cache would be primed for the main work? Pathological case if format string is very large (e.g. larger than cache)?

If there a decision that perfs were ok, and that we could move onward:
The remaining work would be, ihmo:

Add a new function e.g. _vsprintfcbn() with const char* fmt, const char* fmt_end parameter (or const char* fmt, size_t fmt_len, either way would work).
All other functions instead of calling _vsprintfcb() would call _vsprintfcbn() with a strlen().
Can we come up with some tests to validate that we are not reading past the limit? (allocate near page boundaries, with end-marker just at the frontier?)
Make sure I didn't break anything.

(tagging @simonvanbernem who seems interested too)","Current version goes from 1477 to 1544 lines (+67 lines) and introduce two new symbols vsprintfcbnz and sprintfnz.

Sounds reasonable. (I wish we could get by with just the strlen() in front and all the code shared, but clearly that isn't happening.)

The later sprintfnz I only added to make it easier for benchmark (adds +11 lines because of the va_list cruft). We could either decide to only provide the new parameter in the ""most-complete"" function vsprintfcbnz() or add **nz versions to all of them.

I'm ok with having nz versions for all three functions. But there are five  I think, so that brings us to another issue. I'd recommend only implementing versions of nz functions that take an explicit output length, but moreover, they probably should write nz output. So we probably need a way to return that output length?",True,{}
nothings/stb,https://github.com/nothings/stb,1181,2021-07-27T15:57:26Z,,2021-08-11T09:52:17Z,OPEN,False,135,52,1,https://github.com/ocornut,"stb_sprintf: support for ""format"" being a non-zero terminated string view?",4,[],https://github.com/nothings/stb/pull/1181,https://github.com/ocornut,20,https://github.com/nothings/stb/pull/1181#issuecomment-888583818,"Note: this is NOT a complete patch, more like opening a discussion.
To improve support for languages like Rust (and a growing tendency for C++ users to support string view/spans) we've been working toward supporting non-zero terminated strings in Dear ImGui. I found it has many extra advantages since many high-level languages and string types already have a length field calculated, and for literals the strlen() call can be done at compile-time.
We have a working branch but one niggle is that the sprintf functions we rely on (stdlib one or stb_sprintf) need a zero terminator for the format string parameter, which forces us to copy and zero-terminate them all. (I'm specifically taking about the format string itself needing to be zero-terminated, I am aware we can use for %.*s for other string arguments). Some of our functions tend to lead users to pass long decorated format strings (e.g. ImGui::Text(""Hello world %d %s"", ...) being a prime candidate for people sending large amount of text in a format string).
So I investigated the possibility of completely switching to embedding stb_sprintf and patching it to support this. Note that I'm not already using stb_printf, but I know some Dear ImGui are using it.
It's not a difficult change to implement BUT as I think stb_sprintf was designed for performances I mostly worry that the change of logic may have meaningful side effects.
If I was wondering if you or Jeff had unpublished perf tests you could run?
What this patch does:

At the top of the vsprintfcb code it adds const char* f_end = f + strlen(fmt); and then for the entire function makes small changes to use that pointer as an end marker and not rely on zero-termination, aka in theory it should never read from f_end[0].
This is a WIP patch solely designed to measure the potential side-effects (perf wise) of changing the main code.
Hastily coded and not thoroughly tested, but pass test_sprintf (which btw has a failing test on 32-bit arch, commented that one out) but there aren't many things tested.

Performance consideration:

Adding various (f < f_end) tests in the main function may add up overhead but I don't imagine so much. Might be beneficial to tweak that (e.g. use a decrementing counter?). people like jeff/ryg/sean may have better instinct what to do as I don't really know much about cpu/compilers.
The strlen() is going to touch all of the memory early on, may not be so much of an issue as cache would be primed for the main work? Pathological case if format string is very large (e.g. larger than cache)?

If there a decision that perfs were ok, and that we could move onward:
The remaining work would be, ihmo:

Add a new function e.g. _vsprintfcbn() with const char* fmt, const char* fmt_end parameter (or const char* fmt, size_t fmt_len, either way would work).
All other functions instead of calling _vsprintfcb() would call _vsprintfcbn() with a strlen().
Can we come up with some tests to validate that we are not reading past the limit? (allocate near page boundaries, with end-marker just at the frontier?)
Make sure I didn't break anything.

(tagging @simonvanbernem who seems interested too)","I'd recommend only implementing versions of nz functions that take an explicit output length, but moreover, they probably should write nz output. So we probably need a way to return that output length?

Don't we already always return output length? (not sure I understand all the callback stuff and specs when not fitting).
EDIT
  char buf[256];
  int n;
  n = stbsp_snprintf(buf, 10, ""hellohellohello"");
  printf(""%d\n"", n);
  printf(""'%s'\n"", buf);

15
'hellohell'

Right, so I think it'd be great to add for completeness. But now I am getting paranoid about adding parameters (read below).

And this is what a compile-time option version would roughly look like
60a999d

(
Except currently I am running into a hard to understand thing were the compiler starts optimizing  differently based on something I don't understand. Spent the last hour combing through it, but basically if I revert to vanilla version and add int fmt_len parameter (UNUSED) + one replacement wrapping function:
STBSP__PUBLICDEC int STB_SPRINTF_DECORATE(vsprintfcbnz)(STBSP_SPRINTFCB* callback, void* user, char* buf, char const* fmt, int /*fmt_len*/, va_list va); + vsprintfcb() now calling vsprintfcbnz()
Then my numbers for some tests are instantly slower by 20%...
If I move fmt_len to first parameter I am back at the original speed. I assume there's some code reuse or tail-call thing happening with matching stack layout, but I'm surprised by the large difference and I don't really understand it. [Note that I am currently technically compiling in C++]
And so it happens on vanilla codebase but also adding that #ifdef stuff over v5 made it happen and I'm super puzzled.
EDIT: I was wondering why callback, user parameters were the first and not last ones in vsprintfcb() and I wonder if it is due to the same thing.
)",True,{}
nothings/stb,https://github.com/nothings/stb,1181,2021-07-27T15:57:26Z,,2021-08-11T09:52:17Z,OPEN,False,135,52,1,https://github.com/ocornut,"stb_sprintf: support for ""format"" being a non-zero terminated string view?",4,[],https://github.com/nothings/stb/pull/1181,https://github.com/nothings,21,https://github.com/nothings/stb/pull/1181#issuecomment-888602556,"Note: this is NOT a complete patch, more like opening a discussion.
To improve support for languages like Rust (and a growing tendency for C++ users to support string view/spans) we've been working toward supporting non-zero terminated strings in Dear ImGui. I found it has many extra advantages since many high-level languages and string types already have a length field calculated, and for literals the strlen() call can be done at compile-time.
We have a working branch but one niggle is that the sprintf functions we rely on (stdlib one or stb_sprintf) need a zero terminator for the format string parameter, which forces us to copy and zero-terminate them all. (I'm specifically taking about the format string itself needing to be zero-terminated, I am aware we can use for %.*s for other string arguments). Some of our functions tend to lead users to pass long decorated format strings (e.g. ImGui::Text(""Hello world %d %s"", ...) being a prime candidate for people sending large amount of text in a format string).
So I investigated the possibility of completely switching to embedding stb_sprintf and patching it to support this. Note that I'm not already using stb_printf, but I know some Dear ImGui are using it.
It's not a difficult change to implement BUT as I think stb_sprintf was designed for performances I mostly worry that the change of logic may have meaningful side effects.
If I was wondering if you or Jeff had unpublished perf tests you could run?
What this patch does:

At the top of the vsprintfcb code it adds const char* f_end = f + strlen(fmt); and then for the entire function makes small changes to use that pointer as an end marker and not rely on zero-termination, aka in theory it should never read from f_end[0].
This is a WIP patch solely designed to measure the potential side-effects (perf wise) of changing the main code.
Hastily coded and not thoroughly tested, but pass test_sprintf (which btw has a failing test on 32-bit arch, commented that one out) but there aren't many things tested.

Performance consideration:

Adding various (f < f_end) tests in the main function may add up overhead but I don't imagine so much. Might be beneficial to tweak that (e.g. use a decrementing counter?). people like jeff/ryg/sean may have better instinct what to do as I don't really know much about cpu/compilers.
The strlen() is going to touch all of the memory early on, may not be so much of an issue as cache would be primed for the main work? Pathological case if format string is very large (e.g. larger than cache)?

If there a decision that perfs were ok, and that we could move onward:
The remaining work would be, ihmo:

Add a new function e.g. _vsprintfcbn() with const char* fmt, const char* fmt_end parameter (or const char* fmt, size_t fmt_len, either way would work).
All other functions instead of calling _vsprintfcb() would call _vsprintfcbn() with a strlen().
Can we come up with some tests to validate that we are not reading past the limit? (allocate near page boundaries, with end-marker just at the frontier?)
Make sure I didn't break anything.

(tagging @simonvanbernem who seems interested too)","I'd recommend only implementing versions of nz functions that take an explicit output length, but moreover, they probably should write nz output. So we probably need a way to return that output length?

Don't we already always return output length? (not sure I understand all the callback stuff and specs when not fitting).

Oh yes, of course we do always return output length.
However, it probably includes the length of the terminating NUL. We should presumably engineer the nz API so it (a) returns the number of non-NUL characters, (b) doesn't write the NUL, and (c) if you give it a buffer of length 10, it will write 10 non-NUL characters to it. (We can presumably do that by lying about the buffer length to ourselves and then suppressing the terminating NUL.)

Right, so I think it'd be great to add for completeness. But now I am getting paranoid about adding parameters (read below).

I think we changed the behavior of this, I think it used to return the length written, but for compatibility with other sprintfs it was changed to always return the full required length? Hmm, no, that seems the opposite of what other sprintfs do. Pretty sure it changed at some point, or at least that people have complained about this.
But the nz versions can do their own thing regardless. Although they could return the full required length and let the caller do a min() on the passed-in length, we can also just change the semantics for nz and have it only give the full length on passing in NUL.
I think the argument for the current behavior is the scenario where you have a small buffer on the stack, and you'll malloc a large buffer if it's not enough. You want to call sprintf once with the stack, and if that's enough you're done. If that's not enough, you don't want to make ANOTHER sprintf call to find out the required length, malloc, and then make a THIRD sprintf call if you can do it all with two calls. (This sounds like a Jeff argument to me.)",True,{}
nothings/stb,https://github.com/nothings/stb,1181,2021-07-27T15:57:26Z,,2021-08-11T09:52:17Z,OPEN,False,135,52,1,https://github.com/ocornut,"stb_sprintf: support for ""format"" being a non-zero terminated string view?",4,[],https://github.com/nothings/stb/pull/1181,https://github.com/ocornut,22,https://github.com/nothings/stb/pull/1181#issuecomment-888608402,"Note: this is NOT a complete patch, more like opening a discussion.
To improve support for languages like Rust (and a growing tendency for C++ users to support string view/spans) we've been working toward supporting non-zero terminated strings in Dear ImGui. I found it has many extra advantages since many high-level languages and string types already have a length field calculated, and for literals the strlen() call can be done at compile-time.
We have a working branch but one niggle is that the sprintf functions we rely on (stdlib one or stb_sprintf) need a zero terminator for the format string parameter, which forces us to copy and zero-terminate them all. (I'm specifically taking about the format string itself needing to be zero-terminated, I am aware we can use for %.*s for other string arguments). Some of our functions tend to lead users to pass long decorated format strings (e.g. ImGui::Text(""Hello world %d %s"", ...) being a prime candidate for people sending large amount of text in a format string).
So I investigated the possibility of completely switching to embedding stb_sprintf and patching it to support this. Note that I'm not already using stb_printf, but I know some Dear ImGui are using it.
It's not a difficult change to implement BUT as I think stb_sprintf was designed for performances I mostly worry that the change of logic may have meaningful side effects.
If I was wondering if you or Jeff had unpublished perf tests you could run?
What this patch does:

At the top of the vsprintfcb code it adds const char* f_end = f + strlen(fmt); and then for the entire function makes small changes to use that pointer as an end marker and not rely on zero-termination, aka in theory it should never read from f_end[0].
This is a WIP patch solely designed to measure the potential side-effects (perf wise) of changing the main code.
Hastily coded and not thoroughly tested, but pass test_sprintf (which btw has a failing test on 32-bit arch, commented that one out) but there aren't many things tested.

Performance consideration:

Adding various (f < f_end) tests in the main function may add up overhead but I don't imagine so much. Might be beneficial to tweak that (e.g. use a decrementing counter?). people like jeff/ryg/sean may have better instinct what to do as I don't really know much about cpu/compilers.
The strlen() is going to touch all of the memory early on, may not be so much of an issue as cache would be primed for the main work? Pathological case if format string is very large (e.g. larger than cache)?

If there a decision that perfs were ok, and that we could move onward:
The remaining work would be, ihmo:

Add a new function e.g. _vsprintfcbn() with const char* fmt, const char* fmt_end parameter (or const char* fmt, size_t fmt_len, either way would work).
All other functions instead of calling _vsprintfcb() would call _vsprintfcbn() with a strlen().
Can we come up with some tests to validate that we are not reading past the limit? (allocate near page boundaries, with end-marker just at the frontier?)
Make sure I didn't break anything.

(tagging @simonvanbernem who seems interested too)","Current behavior seems fine, and I recall the thread arguing for matching standard (I probably voted for that).
IMHO the only value/purpose of adding nz output support would to save 1 character and allow users to retrieve a 10-long string when providing a 10-long buffer.
It's possible but seems like it would add unnecessary complexity/confusion to the whole mix?
When wrapped to other languages I don't assume many (if any) languages would care about user providing precisely size buffers, and expecting the last char to be used. In those languages people are more likely to wrap things. Actually even in C++ I'd expect people to wrap stb_printf if they use it with fancy non-zero terminated string types, so the user-specified size is not going to ever be a hard requirement (""I need ten digits to fit in my char[10]"") ? Also we'd not be breaking anything by not adding that.",True,{}
nothings/stb,https://github.com/nothings/stb,1181,2021-07-27T15:57:26Z,,2021-08-11T09:52:17Z,OPEN,False,135,52,1,https://github.com/ocornut,"stb_sprintf: support for ""format"" being a non-zero terminated string view?",4,[],https://github.com/nothings/stb/pull/1181,https://github.com/nothings,23,https://github.com/nothings/stb/pull/1181#issuecomment-888610806,"Note: this is NOT a complete patch, more like opening a discussion.
To improve support for languages like Rust (and a growing tendency for C++ users to support string view/spans) we've been working toward supporting non-zero terminated strings in Dear ImGui. I found it has many extra advantages since many high-level languages and string types already have a length field calculated, and for literals the strlen() call can be done at compile-time.
We have a working branch but one niggle is that the sprintf functions we rely on (stdlib one or stb_sprintf) need a zero terminator for the format string parameter, which forces us to copy and zero-terminate them all. (I'm specifically taking about the format string itself needing to be zero-terminated, I am aware we can use for %.*s for other string arguments). Some of our functions tend to lead users to pass long decorated format strings (e.g. ImGui::Text(""Hello world %d %s"", ...) being a prime candidate for people sending large amount of text in a format string).
So I investigated the possibility of completely switching to embedding stb_sprintf and patching it to support this. Note that I'm not already using stb_printf, but I know some Dear ImGui are using it.
It's not a difficult change to implement BUT as I think stb_sprintf was designed for performances I mostly worry that the change of logic may have meaningful side effects.
If I was wondering if you or Jeff had unpublished perf tests you could run?
What this patch does:

At the top of the vsprintfcb code it adds const char* f_end = f + strlen(fmt); and then for the entire function makes small changes to use that pointer as an end marker and not rely on zero-termination, aka in theory it should never read from f_end[0].
This is a WIP patch solely designed to measure the potential side-effects (perf wise) of changing the main code.
Hastily coded and not thoroughly tested, but pass test_sprintf (which btw has a failing test on 32-bit arch, commented that one out) but there aren't many things tested.

Performance consideration:

Adding various (f < f_end) tests in the main function may add up overhead but I don't imagine so much. Might be beneficial to tweak that (e.g. use a decrementing counter?). people like jeff/ryg/sean may have better instinct what to do as I don't really know much about cpu/compilers.
The strlen() is going to touch all of the memory early on, may not be so much of an issue as cache would be primed for the main work? Pathological case if format string is very large (e.g. larger than cache)?

If there a decision that perfs were ok, and that we could move onward:
The remaining work would be, ihmo:

Add a new function e.g. _vsprintfcbn() with const char* fmt, const char* fmt_end parameter (or const char* fmt, size_t fmt_len, either way would work).
All other functions instead of calling _vsprintfcb() would call _vsprintfcbn() with a strlen().
Can we come up with some tests to validate that we are not reading past the limit? (allocate near page boundaries, with end-marker just at the frontier?)
Make sure I didn't break anything.

(tagging @simonvanbernem who seems interested too)","I'm thinking of systems languages like Rust or  whatever, where maybe people super do pay attention to the sizes of things. I'm concerned about somebody going ""I'm going to print this 16-bit integer into a 5-byte buffer"". You can't fix this by wrapping it, you have to specify ""you must pass in a buffer one larger than you actually want"".",True,{}
nothings/stb,https://github.com/nothings/stb,1181,2021-07-27T15:57:26Z,,2021-08-11T09:52:17Z,OPEN,False,135,52,1,https://github.com/ocornut,"stb_sprintf: support for ""format"" being a non-zero terminated string view?",4,[],https://github.com/nothings/stb/pull/1181,https://github.com/nothings,24,https://github.com/nothings/stb/pull/1181#issuecomment-888612276,"Note: this is NOT a complete patch, more like opening a discussion.
To improve support for languages like Rust (and a growing tendency for C++ users to support string view/spans) we've been working toward supporting non-zero terminated strings in Dear ImGui. I found it has many extra advantages since many high-level languages and string types already have a length field calculated, and for literals the strlen() call can be done at compile-time.
We have a working branch but one niggle is that the sprintf functions we rely on (stdlib one or stb_sprintf) need a zero terminator for the format string parameter, which forces us to copy and zero-terminate them all. (I'm specifically taking about the format string itself needing to be zero-terminated, I am aware we can use for %.*s for other string arguments). Some of our functions tend to lead users to pass long decorated format strings (e.g. ImGui::Text(""Hello world %d %s"", ...) being a prime candidate for people sending large amount of text in a format string).
So I investigated the possibility of completely switching to embedding stb_sprintf and patching it to support this. Note that I'm not already using stb_printf, but I know some Dear ImGui are using it.
It's not a difficult change to implement BUT as I think stb_sprintf was designed for performances I mostly worry that the change of logic may have meaningful side effects.
If I was wondering if you or Jeff had unpublished perf tests you could run?
What this patch does:

At the top of the vsprintfcb code it adds const char* f_end = f + strlen(fmt); and then for the entire function makes small changes to use that pointer as an end marker and not rely on zero-termination, aka in theory it should never read from f_end[0].
This is a WIP patch solely designed to measure the potential side-effects (perf wise) of changing the main code.
Hastily coded and not thoroughly tested, but pass test_sprintf (which btw has a failing test on 32-bit arch, commented that one out) but there aren't many things tested.

Performance consideration:

Adding various (f < f_end) tests in the main function may add up overhead but I don't imagine so much. Might be beneficial to tweak that (e.g. use a decrementing counter?). people like jeff/ryg/sean may have better instinct what to do as I don't really know much about cpu/compilers.
The strlen() is going to touch all of the memory early on, may not be so much of an issue as cache would be primed for the main work? Pathological case if format string is very large (e.g. larger than cache)?

If there a decision that perfs were ok, and that we could move onward:
The remaining work would be, ihmo:

Add a new function e.g. _vsprintfcbn() with const char* fmt, const char* fmt_end parameter (or const char* fmt, size_t fmt_len, either way would work).
All other functions instead of calling _vsprintfcb() would call _vsprintfcbn() with a strlen().
Can we come up with some tests to validate that we are not reading past the limit? (allocate near page boundaries, with end-marker just at the frontier?)
Make sure I didn't break anything.

(tagging @simonvanbernem who seems interested too)","Can we make the core function not append a NUL, and have the NUL-supporting ""wrapper"" (that used to do a strlen) add the NUL? And then one or the other of the wrappers can add or subtract one from the buffer length as needed. (It would be semantically clear if the lib was purely non-NUL-outputting with a no-NUL buffer size, and the NUL-supporting wrapper subtracts one from the buffer size.)",True,{'THUMBS_UP': ['https://github.com/ocornut']}
nothings/stb,https://github.com/nothings/stb,1181,2021-07-27T15:57:26Z,,2021-08-11T09:52:17Z,OPEN,False,135,52,1,https://github.com/ocornut,"stb_sprintf: support for ""format"" being a non-zero terminated string view?",4,[],https://github.com/nothings/stb/pull/1181,https://github.com/ocornut,25,https://github.com/nothings/stb/pull/1181#issuecomment-888614046,"Note: this is NOT a complete patch, more like opening a discussion.
To improve support for languages like Rust (and a growing tendency for C++ users to support string view/spans) we've been working toward supporting non-zero terminated strings in Dear ImGui. I found it has many extra advantages since many high-level languages and string types already have a length field calculated, and for literals the strlen() call can be done at compile-time.
We have a working branch but one niggle is that the sprintf functions we rely on (stdlib one or stb_sprintf) need a zero terminator for the format string parameter, which forces us to copy and zero-terminate them all. (I'm specifically taking about the format string itself needing to be zero-terminated, I am aware we can use for %.*s for other string arguments). Some of our functions tend to lead users to pass long decorated format strings (e.g. ImGui::Text(""Hello world %d %s"", ...) being a prime candidate for people sending large amount of text in a format string).
So I investigated the possibility of completely switching to embedding stb_sprintf and patching it to support this. Note that I'm not already using stb_printf, but I know some Dear ImGui are using it.
It's not a difficult change to implement BUT as I think stb_sprintf was designed for performances I mostly worry that the change of logic may have meaningful side effects.
If I was wondering if you or Jeff had unpublished perf tests you could run?
What this patch does:

At the top of the vsprintfcb code it adds const char* f_end = f + strlen(fmt); and then for the entire function makes small changes to use that pointer as an end marker and not rely on zero-termination, aka in theory it should never read from f_end[0].
This is a WIP patch solely designed to measure the potential side-effects (perf wise) of changing the main code.
Hastily coded and not thoroughly tested, but pass test_sprintf (which btw has a failing test on 32-bit arch, commented that one out) but there aren't many things tested.

Performance consideration:

Adding various (f < f_end) tests in the main function may add up overhead but I don't imagine so much. Might be beneficial to tweak that (e.g. use a decrementing counter?). people like jeff/ryg/sean may have better instinct what to do as I don't really know much about cpu/compilers.
The strlen() is going to touch all of the memory early on, may not be so much of an issue as cache would be primed for the main work? Pathological case if format string is very large (e.g. larger than cache)?

If there a decision that perfs were ok, and that we could move onward:
The remaining work would be, ihmo:

Add a new function e.g. _vsprintfcbn() with const char* fmt, const char* fmt_end parameter (or const char* fmt, size_t fmt_len, either way would work).
All other functions instead of calling _vsprintfcb() would call _vsprintfcbn() with a strlen().
Can we come up with some tests to validate that we are not reading past the limit? (allocate near page boundaries, with end-marker just at the frontier?)
Make sure I didn't break anything.

(tagging @simonvanbernem who seems interested too)",Will look into that (may do a separate PR to be able to get that one out of the way soon).,True,{}
nothings/stb,https://github.com/nothings/stb,1181,2021-07-27T15:57:26Z,,2021-08-11T09:52:17Z,OPEN,False,135,52,1,https://github.com/ocornut,"stb_sprintf: support for ""format"" being a non-zero terminated string view?",4,[],https://github.com/nothings/stb/pull/1181,https://github.com/ocornut,26,https://github.com/nothings/stb/pull/1181#issuecomment-888645109,"Note: this is NOT a complete patch, more like opening a discussion.
To improve support for languages like Rust (and a growing tendency for C++ users to support string view/spans) we've been working toward supporting non-zero terminated strings in Dear ImGui. I found it has many extra advantages since many high-level languages and string types already have a length field calculated, and for literals the strlen() call can be done at compile-time.
We have a working branch but one niggle is that the sprintf functions we rely on (stdlib one or stb_sprintf) need a zero terminator for the format string parameter, which forces us to copy and zero-terminate them all. (I'm specifically taking about the format string itself needing to be zero-terminated, I am aware we can use for %.*s for other string arguments). Some of our functions tend to lead users to pass long decorated format strings (e.g. ImGui::Text(""Hello world %d %s"", ...) being a prime candidate for people sending large amount of text in a format string).
So I investigated the possibility of completely switching to embedding stb_sprintf and patching it to support this. Note that I'm not already using stb_printf, but I know some Dear ImGui are using it.
It's not a difficult change to implement BUT as I think stb_sprintf was designed for performances I mostly worry that the change of logic may have meaningful side effects.
If I was wondering if you or Jeff had unpublished perf tests you could run?
What this patch does:

At the top of the vsprintfcb code it adds const char* f_end = f + strlen(fmt); and then for the entire function makes small changes to use that pointer as an end marker and not rely on zero-termination, aka in theory it should never read from f_end[0].
This is a WIP patch solely designed to measure the potential side-effects (perf wise) of changing the main code.
Hastily coded and not thoroughly tested, but pass test_sprintf (which btw has a failing test on 32-bit arch, commented that one out) but there aren't many things tested.

Performance consideration:

Adding various (f < f_end) tests in the main function may add up overhead but I don't imagine so much. Might be beneficial to tweak that (e.g. use a decrementing counter?). people like jeff/ryg/sean may have better instinct what to do as I don't really know much about cpu/compilers.
The strlen() is going to touch all of the memory early on, may not be so much of an issue as cache would be primed for the main work? Pathological case if format string is very large (e.g. larger than cache)?

If there a decision that perfs were ok, and that we could move onward:
The remaining work would be, ihmo:

Add a new function e.g. _vsprintfcbn() with const char* fmt, const char* fmt_end parameter (or const char* fmt, size_t fmt_len, either way would work).
All other functions instead of calling _vsprintfcb() would call _vsprintfcbn() with a strlen().
Can we come up with some tests to validate that we are not reading past the limit? (allocate near page boundaries, with end-marker just at the frontier?)
Make sure I didn't break anything.

(tagging @simonvanbernem who seems interested too)","FYI results from all tests (VS2019, x64, /Ox)
// std sprintf
sprintf       time 152775 for 'stringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstring'
sprintf       time 152651 for 'strin stringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring'
sprintf       time 68     for '%d'
sprintf       time 171346 for '%24d'
sprintf       time 82907  for '%x'
sprintf       time 137956 for '%08x'
sprintf       time 76285  for '%f'
sprintf       time 77539  for '%e'
sprintf       time 78729  for '%g'
sprintf       time 125701 for '%f l'
sprintf       time 507478 for '%f b'
sprintf       time 129690 for '%e l'
sprintf       time 111196 for '%e b'
sprintf       time 495866 for '%.320f'
sprintf       time 51489  for '%a'
sprintf       time 80013  for '%I64d'
sprintf       time 83257  for '%I64d'
sprintf       time 10314  for '%s%s%s'
sprintf       time 234932 for '0123456789012345678901234567890123456789012345678901234567890123%d'

// v0
stbsp_sprintf time 2554  for 'stringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstring'
stbsp_sprintf time 2555  for 'strin stringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring'
stbsp_sprintf time 33    for '%d'
stbsp_sprintf time 40001 for '%24d'
stbsp_sprintf time 27725 for '%x'
stbsp_sprintf time 30809 for '%08x'
stbsp_printf  time 33505 for '%f'
stbsp_printf  time 34493 for '%e'
stbsp_printf  time 33246 for '%g'
stbsp_printf  time 6588  for '%6.2f'
stbsp_sprintf time 31861 for '%f l'
stbsp_sprintf time 25672 for '%f b'
stbsp_sprintf time 34911 for '%e l'
stbsp_sprintf time 34951 for '%e b'
stbsp_sprintf time 22265 for '%.320f'
stbsp_sprintf time 17445 for '%a'
stbsp_sprintf time 24924 for '%I64d'
stbsp_sprintf time 15995 for '%I64d'
stbsp_sprintf time 5756  for '%s%s%s'
stbsp_sprintf time 10420 for '0123456789012345678901234567890123456789012345678901234567890123%d'

// v5 (zero-terminated)
stbsp_sprintf time 2597 for 'stringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstring'
stbsp_sprintf time 2596 for 'strin stringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring'
stbsp_sprintf time 27    for '%d'
stbsp_sprintf time 40363 for '%24d'
stbsp_sprintf time 28935 for '%x'
stbsp_sprintf time 32287 for '%08x'
stbsp_printf  time 33717 for '%f'
stbsp_printf  time 34429 for '%e'
stbsp_printf  time 33507 for '%g'
stbsp_printf  time 6610  for '%6.2f'
stbsp_sprintf time 33054 for '%f l'
stbsp_sprintf time 29306 for '%f b'
stbsp_sprintf time 35913 for '%e l'
stbsp_sprintf time 34340 for '%e b'
stbsp_sprintf time 25474 for '%.320f'
stbsp_sprintf time 17332 for '%a'
stbsp_sprintf time 25826 for '%I64d'
stbsp_sprintf time 16131 for '%I64d'
stbsp_sprintf time 5826  for '%s%s%s'
stbsp_sprintf time 9720  for '0123456789012345678901234567890123456789012345678901234567890123%d'

// v5 (non zero-terminated, length of ""format"" calculated once at call-site)
stbsp_sprintf time 2496  for 'stringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstring'
stbsp_sprintf time 2491  for 'strin stringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring tringstring'
stbsp_sprintf time 26    for '%d'
stbsp_sprintf time 42418 for '%24d'
stbsp_sprintf time 29202 for '%x'
stbsp_sprintf time 32067 for '%08x'
stbsp_printf  time 33865 for '%f'
stbsp_printf  time 34555 for '%e'
stbsp_printf  time 33557 for '%g'
stbsp_printf  time 6659  for '%6.2f'
stbsp_sprintf time 32878 for '%f l'
stbsp_sprintf time 29036 for '%f b'
stbsp_sprintf time 35627 for '%e l'
stbsp_sprintf time 33958 for '%e b'
stbsp_sprintf time 25323 for '%.320f'
stbsp_sprintf time 17255 for '%a'
stbsp_sprintf time 26509 for '%I64d'
stbsp_sprintf time 16606 for '%I64d'
stbsp_sprintf time 5871  for '%s%s%s'
stbsp_sprintf time 10502 for '0123456789012345678901234567890123456789012345678901234567890123%d'",True,{}
nothings/stb,https://github.com/nothings/stb,1181,2021-07-27T15:57:26Z,,2021-08-11T09:52:17Z,OPEN,False,135,52,1,https://github.com/ocornut,"stb_sprintf: support for ""format"" being a non-zero terminated string view?",4,[],https://github.com/nothings/stb/pull/1181,https://github.com/nothings,27,https://github.com/nothings/stb/pull/1181#issuecomment-888660557,"Note: this is NOT a complete patch, more like opening a discussion.
To improve support for languages like Rust (and a growing tendency for C++ users to support string view/spans) we've been working toward supporting non-zero terminated strings in Dear ImGui. I found it has many extra advantages since many high-level languages and string types already have a length field calculated, and for literals the strlen() call can be done at compile-time.
We have a working branch but one niggle is that the sprintf functions we rely on (stdlib one or stb_sprintf) need a zero terminator for the format string parameter, which forces us to copy and zero-terminate them all. (I'm specifically taking about the format string itself needing to be zero-terminated, I am aware we can use for %.*s for other string arguments). Some of our functions tend to lead users to pass long decorated format strings (e.g. ImGui::Text(""Hello world %d %s"", ...) being a prime candidate for people sending large amount of text in a format string).
So I investigated the possibility of completely switching to embedding stb_sprintf and patching it to support this. Note that I'm not already using stb_printf, but I know some Dear ImGui are using it.
It's not a difficult change to implement BUT as I think stb_sprintf was designed for performances I mostly worry that the change of logic may have meaningful side effects.
If I was wondering if you or Jeff had unpublished perf tests you could run?
What this patch does:

At the top of the vsprintfcb code it adds const char* f_end = f + strlen(fmt); and then for the entire function makes small changes to use that pointer as an end marker and not rely on zero-termination, aka in theory it should never read from f_end[0].
This is a WIP patch solely designed to measure the potential side-effects (perf wise) of changing the main code.
Hastily coded and not thoroughly tested, but pass test_sprintf (which btw has a failing test on 32-bit arch, commented that one out) but there aren't many things tested.

Performance consideration:

Adding various (f < f_end) tests in the main function may add up overhead but I don't imagine so much. Might be beneficial to tweak that (e.g. use a decrementing counter?). people like jeff/ryg/sean may have better instinct what to do as I don't really know much about cpu/compilers.
The strlen() is going to touch all of the memory early on, may not be so much of an issue as cache would be primed for the main work? Pathological case if format string is very large (e.g. larger than cache)?

If there a decision that perfs were ok, and that we could move onward:
The remaining work would be, ihmo:

Add a new function e.g. _vsprintfcbn() with const char* fmt, const char* fmt_end parameter (or const char* fmt, size_t fmt_len, either way would work).
All other functions instead of calling _vsprintfcb() would call _vsprintfcbn() with a strlen().
Can we come up with some tests to validate that we are not reading past the limit? (allocate near page boundaries, with end-marker just at the frontier?)
Make sure I didn't break anything.

(tagging @simonvanbernem who seems interested too)","I put it in a spreadsheet. Should look at those 0.87/0.88 x slowdowns and see if they're repeatable, because it shouldn't be spending much time parsing the format string. (""speedup"" columns are the speedup going from the column immediately on the left to the column immediately on the right.)



sprintf
v0 speedup
stbsp v0
v5 speedup
stbsp v5
fmt




152775
59.82
2554
0.98
2597
for 'stringstringstringstringstring..'.


152651
59.75
2555
0.98
2596
for 'strin stringstring tringstring...'


68
2.06
33
1.22
27
for '%d'


171346
4.28
40001
0.99
40363
for '%24d'


82907
2.99
27725
0.96
28935
for '%x'


137956
4.48
30809
0.95
32287
for '%08x'


76285
2.28
33505
0.99
33717
for '%f'


77539
2.25
34493
1.00
34429
for '%e'


78729
2.37
33246
0.99
33507
for '%g'




6588
1.00
6610
for '%6.2f'


125701
3.95
31861
0.96
33054
for '%f l'


507478
19.77
25672
0.88
29306
for '%f b'


129690
3.71
34911
0.97
35913
for '%e l'


111196
3.18
34951
1.02
34340
for '%e b'


495866
22.27
22265
0.87
25474
for '%.320f'


51489
2.95
17445
1.01
17332
for '%a'


80013
3.21
24924
0.97
25826
for '%I64d'


83257
5.21
15995
0.99
16131
for '%I64d'


10314
1.79
5756
0.99
5826
for '%s%s%s'


234932
22.55
10420
1.07
9720
for '012345678901234567890123456...%d'",True,{'THUMBS_UP': ['https://github.com/ocornut']}
nothings/stb,https://github.com/nothings/stb,1181,2021-07-27T15:57:26Z,,2021-08-11T09:52:17Z,OPEN,False,135,52,1,https://github.com/ocornut,"stb_sprintf: support for ""format"" being a non-zero terminated string view?",4,[],https://github.com/nothings/stb/pull/1181,https://github.com/nothings,28,https://github.com/nothings/stb/pull/1181#issuecomment-896356127,"Note: this is NOT a complete patch, more like opening a discussion.
To improve support for languages like Rust (and a growing tendency for C++ users to support string view/spans) we've been working toward supporting non-zero terminated strings in Dear ImGui. I found it has many extra advantages since many high-level languages and string types already have a length field calculated, and for literals the strlen() call can be done at compile-time.
We have a working branch but one niggle is that the sprintf functions we rely on (stdlib one or stb_sprintf) need a zero terminator for the format string parameter, which forces us to copy and zero-terminate them all. (I'm specifically taking about the format string itself needing to be zero-terminated, I am aware we can use for %.*s for other string arguments). Some of our functions tend to lead users to pass long decorated format strings (e.g. ImGui::Text(""Hello world %d %s"", ...) being a prime candidate for people sending large amount of text in a format string).
So I investigated the possibility of completely switching to embedding stb_sprintf and patching it to support this. Note that I'm not already using stb_printf, but I know some Dear ImGui are using it.
It's not a difficult change to implement BUT as I think stb_sprintf was designed for performances I mostly worry that the change of logic may have meaningful side effects.
If I was wondering if you or Jeff had unpublished perf tests you could run?
What this patch does:

At the top of the vsprintfcb code it adds const char* f_end = f + strlen(fmt); and then for the entire function makes small changes to use that pointer as an end marker and not rely on zero-termination, aka in theory it should never read from f_end[0].
This is a WIP patch solely designed to measure the potential side-effects (perf wise) of changing the main code.
Hastily coded and not thoroughly tested, but pass test_sprintf (which btw has a failing test on 32-bit arch, commented that one out) but there aren't many things tested.

Performance consideration:

Adding various (f < f_end) tests in the main function may add up overhead but I don't imagine so much. Might be beneficial to tweak that (e.g. use a decrementing counter?). people like jeff/ryg/sean may have better instinct what to do as I don't really know much about cpu/compilers.
The strlen() is going to touch all of the memory early on, may not be so much of an issue as cache would be primed for the main work? Pathological case if format string is very large (e.g. larger than cache)?

If there a decision that perfs were ok, and that we could move onward:
The remaining work would be, ihmo:

Add a new function e.g. _vsprintfcbn() with const char* fmt, const char* fmt_end parameter (or const char* fmt, size_t fmt_len, either way would work).
All other functions instead of calling _vsprintfcb() would call _vsprintfcbn() with a strlen().
Can we come up with some tests to validate that we are not reading past the limit? (allocate near page boundaries, with end-marker just at the frontier?)
Make sure I didn't break anything.

(tagging @simonvanbernem who seems interested too)","Jeff suggests that the 0.87 ""speedup"" for '%.320f' can't possibly have anything to do with the time spent scanning the format string, so it must be due to some unrelated change like alignment or optimizations.",True,{}
nothings/stb,https://github.com/nothings/stb,1181,2021-07-27T15:57:26Z,,2021-08-11T09:52:17Z,OPEN,False,135,52,1,https://github.com/ocornut,"stb_sprintf: support for ""format"" being a non-zero terminated string view?",4,[],https://github.com/nothings/stb/pull/1181,https://github.com/ocornut,29,https://github.com/nothings/stb/pull/1181#issuecomment-896563407,"Note: this is NOT a complete patch, more like opening a discussion.
To improve support for languages like Rust (and a growing tendency for C++ users to support string view/spans) we've been working toward supporting non-zero terminated strings in Dear ImGui. I found it has many extra advantages since many high-level languages and string types already have a length field calculated, and for literals the strlen() call can be done at compile-time.
We have a working branch but one niggle is that the sprintf functions we rely on (stdlib one or stb_sprintf) need a zero terminator for the format string parameter, which forces us to copy and zero-terminate them all. (I'm specifically taking about the format string itself needing to be zero-terminated, I am aware we can use for %.*s for other string arguments). Some of our functions tend to lead users to pass long decorated format strings (e.g. ImGui::Text(""Hello world %d %s"", ...) being a prime candidate for people sending large amount of text in a format string).
So I investigated the possibility of completely switching to embedding stb_sprintf and patching it to support this. Note that I'm not already using stb_printf, but I know some Dear ImGui are using it.
It's not a difficult change to implement BUT as I think stb_sprintf was designed for performances I mostly worry that the change of logic may have meaningful side effects.
If I was wondering if you or Jeff had unpublished perf tests you could run?
What this patch does:

At the top of the vsprintfcb code it adds const char* f_end = f + strlen(fmt); and then for the entire function makes small changes to use that pointer as an end marker and not rely on zero-termination, aka in theory it should never read from f_end[0].
This is a WIP patch solely designed to measure the potential side-effects (perf wise) of changing the main code.
Hastily coded and not thoroughly tested, but pass test_sprintf (which btw has a failing test on 32-bit arch, commented that one out) but there aren't many things tested.

Performance consideration:

Adding various (f < f_end) tests in the main function may add up overhead but I don't imagine so much. Might be beneficial to tweak that (e.g. use a decrementing counter?). people like jeff/ryg/sean may have better instinct what to do as I don't really know much about cpu/compilers.
The strlen() is going to touch all of the memory early on, may not be so much of an issue as cache would be primed for the main work? Pathological case if format string is very large (e.g. larger than cache)?

If there a decision that perfs were ok, and that we could move onward:
The remaining work would be, ihmo:

Add a new function e.g. _vsprintfcbn() with const char* fmt, const char* fmt_end parameter (or const char* fmt, size_t fmt_len, either way would work).
All other functions instead of calling _vsprintfcb() would call _vsprintfcbn() with a strlen().
Can we come up with some tests to validate that we are not reading past the limit? (allocate near page boundaries, with end-marker just at the frontier?)
Make sure I didn't break anything.

(tagging @simonvanbernem who seems interested too)","(Sorry been in holidays and put that aside, will get back to it but I’d rather be on same computer to follow up on that)",True,{}
nothings/stb,https://github.com/nothings/stb,1183,2021-08-01T14:29:55Z,2021-08-01T21:23:08Z,2021-08-01T21:23:08Z,CLOSED,False,9,0,1,https://github.com/laurelkeys,Add a getter for stbi__vertically_flip_on_load,1,[],https://github.com/nothings/stb/pull/1183,https://github.com/laurelkeys,1,https://github.com/nothings/stb/pull/1183,"Added a getter for the flag stbi__vertically_flip_on_load, so that we can restore it to its previous value after calling stbi_set_flip_vertically_on_load(), e.g.:
int restore_flag = stbi_get_flip_vertically_on_load();

int x,y,n;
stbi_set_flip_vertically_on_load(true);
unsigned char *data = stbi_load(filename, &x, &y, &n, 0);

stbi_set_flip_vertically_on_load(restore_flag);","Added a getter for the flag stbi__vertically_flip_on_load, so that we can restore it to its previous value after calling stbi_set_flip_vertically_on_load(), e.g.:
int restore_flag = stbi_get_flip_vertically_on_load();

int x,y,n;
stbi_set_flip_vertically_on_load(true);
unsigned char *data = stbi_load(filename, &x, &y, &n, 0);

stbi_set_flip_vertically_on_load(restore_flag);",True,{}
nothings/stb,https://github.com/nothings/stb,1183,2021-08-01T14:29:55Z,2021-08-01T21:23:08Z,2021-08-01T21:23:08Z,CLOSED,False,9,0,1,https://github.com/laurelkeys,Add a getter for stbi__vertically_flip_on_load,1,[],https://github.com/nothings/stb/pull/1183,https://github.com/nothings,2,https://github.com/nothings/stb/pull/1183#issuecomment-890557166,"Added a getter for the flag stbi__vertically_flip_on_load, so that we can restore it to its previous value after calling stbi_set_flip_vertically_on_load(), e.g.:
int restore_flag = stbi_get_flip_vertically_on_load();

int x,y,n;
stbi_set_flip_vertically_on_load(true);
unsigned char *data = stbi_load(filename, &x, &y, &n, 0);

stbi_set_flip_vertically_on_load(restore_flag);","From reading it, I don't think this interacts correctly with the thread-local support.",True,{}
nothings/stb,https://github.com/nothings/stb,1183,2021-08-01T14:29:55Z,2021-08-01T21:23:08Z,2021-08-01T21:23:08Z,CLOSED,False,9,0,1,https://github.com/laurelkeys,Add a getter for stbi__vertically_flip_on_load,1,[],https://github.com/nothings/stb/pull/1183,https://github.com/laurelkeys,3,https://github.com/nothings/stb/pull/1183#issuecomment-890572933,"Added a getter for the flag stbi__vertically_flip_on_load, so that we can restore it to its previous value after calling stbi_set_flip_vertically_on_load(), e.g.:
int restore_flag = stbi_get_flip_vertically_on_load();

int x,y,n;
stbi_set_flip_vertically_on_load(true);
unsigned char *data = stbi_load(filename, &x, &y, &n, 0);

stbi_set_flip_vertically_on_load(restore_flag);","I'm not really familiar with the use of thread-local variables, so I am sorry if this might not be a good example (code at the end).
Here I created a 1x2 image and launched 10 different threads that:

save the current value of stbi__vertically_flip_on_load
set it to a new value based on whether the thread number is even or odd, then load the test image
check if the pixels are correctly flipped (or not), and that stbi_get_flip_vertically_on_load() returns the expected value
restores stbi__vertically_flip_on_load, and checks its value once again with stbi_get_flip_vertically_on_load()

Please let me know if there's some test case you have in mind.

Testing it on MSVC, GCC (MingW) and GCC on WSL2, I have gotten the results I expected (i.e. they all match):



#include <cstdio>
#include <thread>

#define STB_IMAGE_IMPLEMENTATION
#include ""stb/stb_image.h""

// @Note: test_image.png is an image with a (top) red pixel stacked on a
// (bottom) mid-gray pixel. Their values are: 0xff0000 and 0x808080.

#define RGB(pRGB) (((pRGB)[0] << 16) | ((pRGB)[1] << 8) | ((pRGB)[2] << 0))
#define TOP 0xff0000
#define BOTTOM 0x808080

void test_thread_local(int i, int set, int top, int bottom)
{
    int old = stbi_get_flip_vertically_on_load();
    stbi_set_flip_vertically_on_load_thread(set);

    int x, y, n;
    unsigned char *data = stbi_load(""test_image.png"", &x, &y, &n, 0);
    assert(x == 1 && y == 2 && n == 3);

    int get = stbi_get_flip_vertically_on_load();
    std::printf("" %d %s %d  |  %x   %x  |  %x   %x  (thread: %d)\n"",
        set, ((set == get) ? ""=="" : ""!=""), get,
        top, RGB(data), bottom, RGB(data + 3), i);

    stbi_set_flip_vertically_on_load_thread(old);
    assert(stbi_get_flip_vertically_on_load() == old);
}

int main()
{
    std::printf(""set  get |   top      top    |  bottom   bottom\n"");

    std::thread threads[10]; // @Note: flip vertically on even threads.
    for (int i = 0; i < 10; ++i) {
        if ((i % 2) == 0) {
            threads[i] = std::thread(test_thread_local, i, /*set=*/1, BOTTOM, TOP);
        } else {
            threads[i] = std::thread(test_thread_local, i, /*set=*/0, TOP, BOTTOM);
        }
    }
    for (int i = 0; i < 10; ++i) threads[i].join();

    std::printf(""           (actual) (expect) | (actual) (expect)\n"");
}",True,{}
nothings/stb,https://github.com/nothings/stb,1183,2021-08-01T14:29:55Z,2021-08-01T21:23:08Z,2021-08-01T21:23:08Z,CLOSED,False,9,0,1,https://github.com/laurelkeys,Add a getter for stbi__vertically_flip_on_load,1,[],https://github.com/nothings/stb/pull/1183,https://github.com/nothings,4,https://github.com/nothings/stb/pull/1183#issuecomment-890575298,"Added a getter for the flag stbi__vertically_flip_on_load, so that we can restore it to its previous value after calling stbi_set_flip_vertically_on_load(), e.g.:
int restore_flag = stbi_get_flip_vertically_on_load();

int x,y,n;
stbi_set_flip_vertically_on_load(true);
unsigned char *data = stbi_load(filename, &x, &y, &n, 0);

stbi_set_flip_vertically_on_load(restore_flag);","1. save the current value of `stbi__vertically_flip_on_load`
2. **set it to a new value based on whether the thread number is even or odd, then load the test image**
3. check if the pixels are correctly flipped (or not), and that `stbi_get_flip_vertically_on_load()` returns the expected value
4. restores `stbi__vertically_flip_on_load`, and checks its value once again with `stbi_get_flip_vertically_on_load()`


what function did you call in step 2?",True,{}
nothings/stb,https://github.com/nothings/stb,1183,2021-08-01T14:29:55Z,2021-08-01T21:23:08Z,2021-08-01T21:23:08Z,CLOSED,False,9,0,1,https://github.com/laurelkeys,Add a getter for stbi__vertically_flip_on_load,1,[],https://github.com/nothings/stb/pull/1183,https://github.com/laurelkeys,5,https://github.com/nothings/stb/pull/1183#issuecomment-890577800,"Added a getter for the flag stbi__vertically_flip_on_load, so that we can restore it to its previous value after calling stbi_set_flip_vertically_on_load(), e.g.:
int restore_flag = stbi_get_flip_vertically_on_load();

int x,y,n;
stbi_set_flip_vertically_on_load(true);
unsigned char *data = stbi_load(filename, &x, &y, &n, 0);

stbi_set_flip_vertically_on_load(restore_flag);","what function did you call in step 2?

I used stbi_set_flip_vertically_on_load_thread(), same for step 4.
I believe it should be ok to have a single ""getter"" implementation, since the macro stbi__vertically_flip_on_load is the value that is always being checked before calls to stbi__vertical_flip().",True,{}
nothings/stb,https://github.com/nothings/stb,1183,2021-08-01T14:29:55Z,2021-08-01T21:23:08Z,2021-08-01T21:23:08Z,CLOSED,False,9,0,1,https://github.com/laurelkeys,Add a getter for stbi__vertically_flip_on_load,1,[],https://github.com/nothings/stb/pull/1183,https://github.com/nothings,6,https://github.com/nothings/stb/pull/1183#issuecomment-890580196,"Added a getter for the flag stbi__vertically_flip_on_load, so that we can restore it to its previous value after calling stbi_set_flip_vertically_on_load(), e.g.:
int restore_flag = stbi_get_flip_vertically_on_load();

int x,y,n;
stbi_set_flip_vertically_on_load(true);
unsigned char *data = stbi_load(filename, &x, &y, &n, 0);

stbi_set_flip_vertically_on_load(restore_flag);","I agree it correctly produces the value that will get used, but it's not possible to correctly restore the state since you can't tell whether you're getting the global or the thread-local value if you're using a mix of set calls. It only works right if you only use the _thread() setter.
Now, I don't think it makes much sense to use a mix of the set calls, but I'm not sure that a getter that exposes that underlying behavior in an awkward, unrecoverable way is really a good thing to commit to for all time. I would argue that it will be more effective to not use get.
First, an example. It is possible that at some future time we will provide a new API that takes additional parameters, and those parameters will include flags like vertically_flip whose value would be used directly, ignoring the globals. Most people would accept that this is a better API, as it avoids complexities with e.g. thread local variables. In that situation, obviously get would have no utility since any value it could get would be ignored. There's no need to restore a hidden variable to its old value if the correct value is always supplied on every call.
However, you can right now write code that behaves in the same way, by simply always calling stbi_set_flip_vertically_on_load_thread() explicitly before every call to stbi_load(). This will behave exactly the same as that future API. So if you do this, there's no need for a get function, by the same argument.
Due to the complexities of the thread local variables (which were written that way to preserve back-compatibility), a straightforward get implementation is possible but will not actually work correctly in all cases for saving/restoring the hidden variables, and there is (as far as I know) no other use for such a getter. Rather than try to engineer something that handles that complexity, we can dictate by fiat that those cases aren't important. But if we can dictate that, we can just dictate ""always set vertically_flip on every call if you ever set it"".",True,{}
nothings/stb,https://github.com/nothings/stb,1183,2021-08-01T14:29:55Z,2021-08-01T21:23:08Z,2021-08-01T21:23:08Z,CLOSED,False,9,0,1,https://github.com/laurelkeys,Add a getter for stbi__vertically_flip_on_load,1,[],https://github.com/nothings/stb/pull/1183,https://github.com/laurelkeys,7,https://github.com/nothings/stb/pull/1183#issuecomment-890589099,"Added a getter for the flag stbi__vertically_flip_on_load, so that we can restore it to its previous value after calling stbi_set_flip_vertically_on_load(), e.g.:
int restore_flag = stbi_get_flip_vertically_on_load();

int x,y,n;
stbi_set_flip_vertically_on_load(true);
unsigned char *data = stbi_load(filename, &x, &y, &n, 0);

stbi_set_flip_vertically_on_load(restore_flag);","(...) It is possible that at some future time we will provide a new API that takes additional parameters, and those parameters will include flags like vertically_flip whose value would be used directly, ignoring the globals. Most people would accept that this is a better API (...)
(...) you can right now write code that behaves in the same way, by simply always calling stbi_set_flip_vertically_on_load_thread() explicitly before every call to stbi_load() (...)

Totally agree! I'm already calling stbi_set_flip_vertically_on_load() before every call to stbi_load(), but this can ""pollute the global state"" when interacting with other code that doesn't do the same (e.g. the vertically_flip flags are false by default, so if I set it to true, some library function that also uses stb_image will behave incorrectly if it expects it to be false).
However, considering the need for backwards compatibility, I think it's best not to add this function to the API (as a function like you suggested above would be the optimal solution). Hence, I am closing the PR.",True,{}
nothings/stb,https://github.com/nothings/stb,1184,2021-08-02T02:36:55Z,,2021-08-02T02:36:55Z,OPEN,False,2,2,1,https://github.com/oyvindjam,stb_truetype.h: Use STBTT_assert macro,1,[],https://github.com/nothings/stb/pull/1184,https://github.com/oyvindjam,1,https://github.com/nothings/stb/pull/1184,Replaced two direct calls to assert with STBTT_assert macro.,Replaced two direct calls to assert with STBTT_assert macro.,True,{'THUMBS_UP': ['https://github.com/Clownacy']}
nothings/stb,https://github.com/nothings/stb,1188,2021-08-09T19:41:33Z,,2021-08-09T21:19:33Z,OPEN,False,7,6,1,https://github.com/cap,stb_ds: fix hash collisions,1,"['2 bug', '2 good-no changes needed', '1 stb_ds']",https://github.com/nothings/stb/pull/1188,https://github.com/cap,1,https://github.com/nothings/stb/pull/1188,"While using the stb_ds hash functions to hash pairs of 32 bit signed
ints, I noticed that if the first value was negative, the hash would
collide with all pairs with the same first value regardless of the
second value.
More precisely, for any 8 byte chunk of input data, if the msb of the
4th byte was set, then bytes 5-8 would be ignored in the resulting
hash. This behavior was consistent across 64 bit builds with clang,
gcc, and msvc.
The code which built a size_t from the raw input data attempted to
left shift an unsigned char by 24 bits. The unsigned char was promoted
to a signed int on which the left shift by 24 was undefined behavior.
On all three compilers tested, a sign extension set the high 32 bits
of the result, making moot the subsequent OR of bytes 5-8 of the input
data.
Casting the unsigned char before shifting gives the intended behavior.","While using the stb_ds hash functions to hash pairs of 32 bit signed
ints, I noticed that if the first value was negative, the hash would
collide with all pairs with the same first value regardless of the
second value.
More precisely, for any 8 byte chunk of input data, if the msb of the
4th byte was set, then bytes 5-8 would be ignored in the resulting
hash. This behavior was consistent across 64 bit builds with clang,
gcc, and msvc.
The code which built a size_t from the raw input data attempted to
left shift an unsigned char by 24 bits. The unsigned char was promoted
to a signed int on which the left shift by 24 was undefined behavior.
On all three compilers tested, a sign extension set the high 32 bits
of the result, making moot the subsequent OR of bytes 5-8 of the input
data.
Casting the unsigned char before shifting gives the intended behavior.",True,{'THUMBS_UP': ['https://github.com/nothings']}
nothings/stb,https://github.com/nothings/stb,1194,2021-08-18T04:36:21Z,,2021-08-18T04:36:21Z,OPEN,False,63,49,4,https://github.com/musicinmybrain,Fix undefined behavior from array “shape-punning”,1,[],https://github.com/nothings/stb/pull/1194,https://github.com/musicinmybrain,1,https://github.com/nothings/stb/pull/1194,"In stb_voxel_render.h, there were three cases where a 2D array of dimension [X][Y] was iterated as a 1D array of dimension [1][X*Y]. While this is clever and is correct in terms of the actual memory layout, a second index outside the corresponding dimension ([i][j], j >= Y]) actually produces undefined behavior and gives the compiler freedom to do all sorts of terrible things.
The same thing happens in stb_tilemap_editor.h, tests/caveview/cave_mesher.c, and tests/resample_test.cpp.
Prior to this commit, a compiler warning regarding the undefined behavior appears on gcc 11.2.1 for at least some of these cases when the tests are compiled with -Waggressive-loop-optimizations (included in -Wall). For example:
test_c_compilation.c: In function ‘stbvox_make_mesh_for_block_with_geo’:
../stb_voxel_render.h:3134:46: warning: iteration 4 invokes undefined behavior [-Waggressive-loop-optimizations]
 3134 |          int vert = stbvox_vertex_selector[0][i];
      |                     ~~~~~~~~~~~~~~~~~~~~~~~~~^~~
../stb_voxel_render.h:3133:19: note: within this loop
 3133 |       for (i=0; i < 6*4; ++i) {
      |                 ~~^~~~~
../stb_voxel_render.h:3280:49: warning: iteration 4 invokes undefined behavior [-Waggressive-loop-optimizations]
 3280 |             int vert = stbvox_vertex_selector[0][i];
      |                        ~~~~~~~~~~~~~~~~~~~~~~~~~^~~

This commit fixes the undefined behavior by iterating these 2D arrays with the conventional nested loops.
(This is an important but conceptually trivial fix, originally suggested by Jerry James. I don’t believe it warrants adding anyone to the list of contributors.)","In stb_voxel_render.h, there were three cases where a 2D array of dimension [X][Y] was iterated as a 1D array of dimension [1][X*Y]. While this is clever and is correct in terms of the actual memory layout, a second index outside the corresponding dimension ([i][j], j >= Y]) actually produces undefined behavior and gives the compiler freedom to do all sorts of terrible things.
The same thing happens in stb_tilemap_editor.h, tests/caveview/cave_mesher.c, and tests/resample_test.cpp.
Prior to this commit, a compiler warning regarding the undefined behavior appears on gcc 11.2.1 for at least some of these cases when the tests are compiled with -Waggressive-loop-optimizations (included in -Wall). For example:
test_c_compilation.c: In function ‘stbvox_make_mesh_for_block_with_geo’:
../stb_voxel_render.h:3134:46: warning: iteration 4 invokes undefined behavior [-Waggressive-loop-optimizations]
 3134 |          int vert = stbvox_vertex_selector[0][i];
      |                     ~~~~~~~~~~~~~~~~~~~~~~~~~^~~
../stb_voxel_render.h:3133:19: note: within this loop
 3133 |       for (i=0; i < 6*4; ++i) {
      |                 ~~^~~~~
../stb_voxel_render.h:3280:49: warning: iteration 4 invokes undefined behavior [-Waggressive-loop-optimizations]
 3280 |             int vert = stbvox_vertex_selector[0][i];
      |                        ~~~~~~~~~~~~~~~~~~~~~~~~~^~~

This commit fixes the undefined behavior by iterating these 2D arrays with the conventional nested loops.
(This is an important but conceptually trivial fix, originally suggested by Jerry James. I don’t believe it warrants adding anyone to the list of contributors.)",True,{}
nothings/stb,https://github.com/nothings/stb,1195,2021-08-18T17:42:20Z,,2021-08-18T17:42:20Z,OPEN,False,6,3,1,https://github.com/musicinmybrain,Fix misleading indentation in stb_divide.h,1,[],https://github.com/nothings/stb/pull/1195,https://github.com/musicinmybrain,1,https://github.com/nothings/stb/pull/1195,"With -Wmisleading-indentation (part of -Wall), gcc 11.2.1 warns:
  In file included from test_c_compilation.c:22:
  ../stb_divide.h: In function 'test':
  ../stb_divide.h:316:4: warning: this 'if' clause does not guard... [-Wmisleading-indentation]
    316 |    if (show) printf(""(%+11d,%+2d)  "", q,r); stbdiv_check(q,r,a,b, ""trunc"",a);
        |    ^~
  ../stb_divide.h:316:45: note: ...this statement, but the latter is misleadingly indented as if it were guarded by the 'if'
    316 |    if (show) printf(""(%+11d,%+2d)  "", q,r); stbdiv_check(q,r,a,b, ""trunc"",a);
        |                                             ^~~~~~~~~~~~
  ../stb_divide.h:318:4: warning: this 'if' clause does not guard... [-Wmisleading-indentation]
    318 |    if (show) printf(""(%+11d,%+2d)  "", q,r); stbdiv_check(q,r,a,b, ""floor"",b);
        |    ^~
  ../stb_divide.h:318:45: note: ...this statement, but the latter is misleadingly indented as if it were guarded by the 'if'
    318 |    if (show) printf(""(%+11d,%+2d)  "", q,r); stbdiv_check(q,r,a,b, ""floor"",b);
        |                                             ^~~~~~~~~~~~
  ../stb_divide.h:320:4: warning: this 'if' clause does not guard... [-Wmisleading-indentation]
    320 |    if (show) printf(""(%+11d,%+2d)\n"", q,r); stbdiv_check(q,r,a,b, ""euclidean"",1);
        |    ^~
  ../stb_divide.h:320:45: note: ...this statement, but the latter is misleadingly indented as if it were guarded by the 'if'
    320 |    if (show) printf(""(%+11d,%+2d)\n"", q,r); stbdiv_check(q,r,a,b, ""euclidean"",1);
        |                                             ^~~~~~~~~~~~

This commit moves each call to stbdiv_check(…) to the following line to make clear that it is unconditional and to resolve the warning.
(This is a trivial fix; no need to add me to the list of contributors.)","With -Wmisleading-indentation (part of -Wall), gcc 11.2.1 warns:
  In file included from test_c_compilation.c:22:
  ../stb_divide.h: In function 'test':
  ../stb_divide.h:316:4: warning: this 'if' clause does not guard... [-Wmisleading-indentation]
    316 |    if (show) printf(""(%+11d,%+2d)  "", q,r); stbdiv_check(q,r,a,b, ""trunc"",a);
        |    ^~
  ../stb_divide.h:316:45: note: ...this statement, but the latter is misleadingly indented as if it were guarded by the 'if'
    316 |    if (show) printf(""(%+11d,%+2d)  "", q,r); stbdiv_check(q,r,a,b, ""trunc"",a);
        |                                             ^~~~~~~~~~~~
  ../stb_divide.h:318:4: warning: this 'if' clause does not guard... [-Wmisleading-indentation]
    318 |    if (show) printf(""(%+11d,%+2d)  "", q,r); stbdiv_check(q,r,a,b, ""floor"",b);
        |    ^~
  ../stb_divide.h:318:45: note: ...this statement, but the latter is misleadingly indented as if it were guarded by the 'if'
    318 |    if (show) printf(""(%+11d,%+2d)  "", q,r); stbdiv_check(q,r,a,b, ""floor"",b);
        |                                             ^~~~~~~~~~~~
  ../stb_divide.h:320:4: warning: this 'if' clause does not guard... [-Wmisleading-indentation]
    320 |    if (show) printf(""(%+11d,%+2d)\n"", q,r); stbdiv_check(q,r,a,b, ""euclidean"",1);
        |    ^~
  ../stb_divide.h:320:45: note: ...this statement, but the latter is misleadingly indented as if it were guarded by the 'if'
    320 |    if (show) printf(""(%+11d,%+2d)\n"", q,r); stbdiv_check(q,r,a,b, ""euclidean"",1);
        |                                             ^~~~~~~~~~~~

This commit moves each call to stbdiv_check(…) to the following line to make clear that it is unconditional and to resolve the warning.
(This is a trivial fix; no need to add me to the list of contributors.)",True,{}
nothings/stb,https://github.com/nothings/stb,1196,2021-08-19T17:01:26Z,,2021-08-19T17:01:26Z,OPEN,False,1,1,1,https://github.com/musicinmybrain,Add missing initializer braces in stb_easy_font.h,1,[],https://github.com/nothings/stb/pull/1196,https://github.com/musicinmybrain,1,https://github.com/nothings/stb/pull/1196,"See the following compiler warning from gcc 11.2.1 with -Wall:
In file included from test_easyfont.c:1:
../stb_easy_font.h: In function 'stb_easy_font_print':
../stb_easy_font.h:205:29: warning: missing braces around initializer [-Wmissing-braces]
  205 |     stb_easy_font_color c = { 255,255,255,255 }; // use structure copying to avoid needing depending on memcpy()
      |                             ^
      |                               {               }

There should be one set of braces for the structure stb_easy_font_color, and then another to contain the elements of the array member c. This is a pedantic fix, as typical compilers will compile it correctly and will at most warn rather than erroring.
No contributors list entry is needed for this trivial contribution.","See the following compiler warning from gcc 11.2.1 with -Wall:
In file included from test_easyfont.c:1:
../stb_easy_font.h: In function 'stb_easy_font_print':
../stb_easy_font.h:205:29: warning: missing braces around initializer [-Wmissing-braces]
  205 |     stb_easy_font_color c = { 255,255,255,255 }; // use structure copying to avoid needing depending on memcpy()
      |                             ^
      |                               {               }

There should be one set of braces for the structure stb_easy_font_color, and then another to contain the elements of the array member c. This is a pedantic fix, as typical compilers will compile it correctly and will at most warn rather than erroring.
No contributors list entry is needed for this trivial contribution.",True,{}
nothings/stb,https://github.com/nothings/stb,1198,2021-08-24T15:50:30Z,,2021-08-25T18:27:48Z,OPEN,False,2,2,1,https://github.com/musicinmybrain,Fix signature of dummy realloc() for STB_VORBIS_NO_CRT,1,[],https://github.com/nothings/stb/pull/1198,https://github.com/musicinmybrain,1,https://github.com/nothings/stb/pull/1198,"Fixes errors like error: macro ""realloc"" passed 2 arguments, but takes just 1 from stb_vorbis.c when STB_VORBIS_NO_CRT is set.
Additionally, the parameter to the dummy malloc is renamed from s to p to establish a consistent s=size, p=pointer convention in the dummy macros.
This is a trivial fix, and I don’t feel it requires a contributor acknowledgement.","Fixes errors like error: macro ""realloc"" passed 2 arguments, but takes just 1 from stb_vorbis.c when STB_VORBIS_NO_CRT is set.
Additionally, the parameter to the dummy malloc is renamed from s to p to establish a consistent s=size, p=pointer convention in the dummy macros.
This is a trivial fix, and I don’t feel it requires a contributor acknowledgement.",True,{}
nothings/stb,https://github.com/nothings/stb,1198,2021-08-24T15:50:30Z,,2021-08-25T18:27:48Z,OPEN,False,2,2,1,https://github.com/musicinmybrain,Fix signature of dummy realloc() for STB_VORBIS_NO_CRT,1,[],https://github.com/nothings/stb/pull/1198,https://github.com/musicinmybrain,2,https://github.com/nothings/stb/pull/1198#issuecomment-905740509,"Fixes errors like error: macro ""realloc"" passed 2 arguments, but takes just 1 from stb_vorbis.c when STB_VORBIS_NO_CRT is set.
Additionally, the parameter to the dummy malloc is renamed from s to p to establish a consistent s=size, p=pointer convention in the dummy macros.
This is a trivial fix, and I don’t feel it requires a contributor acknowledgement.","A couple of additional observations:

It would probably be better if there all occurrences of malloc/realloc/free in stb_vorbis.c were replaced with something like stbv_malloc/stb_realloc/stb_free, and then:
#ifndef STB_VORBIS_NO_CRT
   /* (Several lines omitted) */
   #define stbv_malloc(s)   malloc(s)
   #define stbv_free(p)     free(p)
   #define stbv_realloc(p, s)  realloc(p, s)
#else // STB_VORBIS_NO_CRT
   #define NULL 0
   #define stbv_malloc(s)   0
   #define stbv_free(p)     ((void) 0)
   #define stbv_realloc(p, s)  0
#endif // STB_VORBIS_NO_CRT
so that the redefinitions of malloc/realloc/free do not unexpectedly break any other code that might be present in the translation unit where stb_vorbis.c is included.

Perhaps assert() should be treated similarly. When STB_VORBIS_NO_CRT is defined, <assert.h> is not included (makes sense, as it generally uses abort from libc), but assert() is still used in the implementation, so the library does not compile unless assert is defined externally.",True,{}
nothings/stb,https://github.com/nothings/stb,1198,2021-08-24T15:50:30Z,,2021-08-25T18:27:48Z,OPEN,False,2,2,1,https://github.com/musicinmybrain,Fix signature of dummy realloc() for STB_VORBIS_NO_CRT,1,[],https://github.com/nothings/stb/pull/1198,https://github.com/nothings,3,https://github.com/nothings/stb/pull/1198#issuecomment-905746913,"Fixes errors like error: macro ""realloc"" passed 2 arguments, but takes just 1 from stb_vorbis.c when STB_VORBIS_NO_CRT is set.
Additionally, the parameter to the dummy malloc is renamed from s to p to establish a consistent s=size, p=pointer convention in the dummy macros.
This is a trivial fix, and I don’t feel it requires a contributor acknowledgement.","Because stb_vorbis is a C file and not an H file, it's never had this sort of thing properly tackled systematically, since the only way to use the features is with command-line -D options, versus the ease of setting options in the H-file libraries.
Which is not to say we should change it to an H file before fixing these things, just to clarify why it's in such a poor state.",True,{}
nothings/stb,https://github.com/nothings/stb,1198,2021-08-24T15:50:30Z,,2021-08-25T18:27:48Z,OPEN,False,2,2,1,https://github.com/musicinmybrain,Fix signature of dummy realloc() for STB_VORBIS_NO_CRT,1,[],https://github.com/nothings/stb/pull/1198,https://github.com/nothings,4,https://github.com/nothings/stb/pull/1198#issuecomment-905750208,"Fixes errors like error: macro ""realloc"" passed 2 arguments, but takes just 1 from stb_vorbis.c when STB_VORBIS_NO_CRT is set.
Additionally, the parameter to the dummy malloc is renamed from s to p to establish a consistent s=size, p=pointer convention in the dummy macros.
This is a trivial fix, and I don’t feel it requires a contributor acknowledgement.","In fact, never having used it, I""m not sure how STB_VORBIS_NO_CRT can ever be used, since it still NEEDS to malloc and realloc. It would make more sense if STB_VORBIS_NO_CRT just wrapped the include and did nothing else, so you could -D malloc and realloc (or stbv_malloc and stbv_realloc) to your own implementation as needed. But if we define an stbv_malloc / stbv_realloc for STB_VORBIS_NO_CRT (as we do for malloc/realloc), you're going to get a compile error trying to redefine them if you override them with -Dstbv_malloc.
Perhaps nobody has ever used this because it's impossible to use, and it should be removed?
Certainly most of the other stb libraries require CRT. stb_vorbis was very early, and I think I put in NO_CRT support because Casey Muratori said it was important to him, but I'm not sure he ever used it then, and he certainly doesn't now.",True,{}
nothings/stb,https://github.com/nothings/stb,1198,2021-08-24T15:50:30Z,,2021-08-25T18:27:48Z,OPEN,False,2,2,1,https://github.com/musicinmybrain,Fix signature of dummy realloc() for STB_VORBIS_NO_CRT,1,[],https://github.com/nothings/stb/pull/1198,https://github.com/musicinmybrain,5,https://github.com/nothings/stb/pull/1198#issuecomment-905758885,"Fixes errors like error: macro ""realloc"" passed 2 arguments, but takes just 1 from stb_vorbis.c when STB_VORBIS_NO_CRT is set.
Additionally, the parameter to the dummy malloc is renamed from s to p to establish a consistent s=size, p=pointer convention in the dummy macros.
This is a trivial fix, and I don’t feel it requires a contributor acknowledgement.","An interesting question!
I know that RetroArch defines STB_VORBIS_NO_CRT, but at the same time they use a version of stb_vorbis that is called stb_vorbis.h, seems to have been forked in 2017, and doesn’t actually do anything different in response to STB_VORBIS_NO_CRT anyway—so that doesn’t actually provide any useful information.",True,{}
nothings/stb,https://github.com/nothings/stb,1198,2021-08-24T15:50:30Z,,2021-08-25T18:27:48Z,OPEN,False,2,2,1,https://github.com/musicinmybrain,Fix signature of dummy realloc() for STB_VORBIS_NO_CRT,1,[],https://github.com/nothings/stb/pull/1198,https://github.com/nothings,6,https://github.com/nothings/stb/pull/1198#issuecomment-905772488,"Fixes errors like error: macro ""realloc"" passed 2 arguments, but takes just 1 from stb_vorbis.c when STB_VORBIS_NO_CRT is set.
Additionally, the parameter to the dummy malloc is renamed from s to p to establish a consistent s=size, p=pointer convention in the dummy macros.
This is a trivial fix, and I don’t feel it requires a contributor acknowledgement.","Ah, I found the commit where the dummy definitions were added. I forgot stb_vorbis has a way to just pass in a big block of memory that it allocates from, which is the expected use case for STB_VORBIS_NO_CRT. In which case the current dummy definitions seem perfectly reasonable. As noted, you're NOT supposed to include stb_vorbis.c, so if the definitions in it break you, that's on you (you can always undefined them yourself after the include).
But the actual PR here is fine.",True,{}
nothings/stb,https://github.com/nothings/stb,1199,2021-08-27T03:29:27Z,,2022-03-10T09:47:38Z,OPEN,False,2,1,1,https://github.com/mgood7123,variable bt may be uninitialized: stbsp__int64 bt,1,[],https://github.com/nothings/stb/pull/1199,https://github.com/mgood7123,1,https://github.com/nothings/stb/pull/1199,,,True,{}
nothings/stb,https://github.com/nothings/stb,1199,2021-08-27T03:29:27Z,,2022-03-10T09:47:38Z,OPEN,False,2,1,1,https://github.com/mgood7123,variable bt may be uninitialized: stbsp__int64 bt,1,[],https://github.com/nothings/stb/pull/1199,https://github.com/moon-chilled,2,https://github.com/nothings/stb/pull/1199#issuecomment-1062559961,,The warning is bogus.  It is misleading to initialise twice.,True,{}
nothings/stb,https://github.com/nothings/stb,1199,2021-08-27T03:29:27Z,,2022-03-10T09:47:38Z,OPEN,False,2,1,1,https://github.com/mgood7123,variable bt may be uninitialized: stbsp__int64 bt,1,[],https://github.com/nothings/stb/pull/1199,https://github.com/mgood7123,3,https://github.com/nothings/stb/pull/1199#issuecomment-1063862193,,"The warning is bogus. It is misleading to initialise twice.

oh :/
can this warning be silenced in some way?",True,{}
nothings/stb,https://github.com/nothings/stb,1204,2021-09-08T23:22:57Z,,2021-10-28T20:47:06Z,OPEN,False,2,15,6,https://github.com/musicinmybrain,Remove stb_perlin from tests,1,[],https://github.com/nothings/stb/pull/1204,https://github.com/musicinmybrain,1,https://github.com/nothings/stb/pull/1204,"Since stb_perlin.h was removed in 59e7dec, this PR removes it from the tests.","Since stb_perlin.h was removed in 59e7dec, this PR removes it from the tests.",True,{}
nothings/stb,https://github.com/nothings/stb,1207,2021-09-15T00:40:57Z,,2021-09-15T10:54:10Z,OPEN,False,2,0,1,https://github.com/makuto,Fix temp_key being stale on shput key re-insert,4,"['2 bug', '2 good-no changes needed', '1 stb_ds']",https://github.com/nothings/stb/pull/1207,https://github.com/makuto,1,https://github.com/nothings/stb/pull/1207,"63e4ada copied the found key to temp_key so it would be re-used when a matching entry is found. However, I failed to add this to the beginning of bucket to pos search, so it only failed in a relatively rare circumstance where that branch was being used.
This fixes problems where re-inserting an entry (e.g. to update its data) will create a new entry with an identical key.
See previous issue #992 and pull request #993.","63e4ada copied the found key to temp_key so it would be re-used when a matching entry is found. However, I failed to add this to the beginning of bucket to pos search, so it only failed in a relatively rare circumstance where that branch was being used.
This fixes problems where re-inserting an entry (e.g. to update its data) will create a new entry with an identical key.
See previous issue #992 and pull request #993.",True,{}
nothings/stb,https://github.com/nothings/stb,1207,2021-09-15T00:40:57Z,,2021-09-15T10:54:10Z,OPEN,False,2,0,1,https://github.com/makuto,Fix temp_key being stale on shput key re-insert,4,"['2 bug', '2 good-no changes needed', '1 stb_ds']",https://github.com/nothings/stb/pull/1207,https://github.com/makuto,2,https://github.com/nothings/stb/pull/1207#issuecomment-919609906,"63e4ada copied the found key to temp_key so it would be re-used when a matching entry is found. However, I failed to add this to the beginning of bucket to pos search, so it only failed in a relatively rare circumstance where that branch was being used.
This fixes problems where re-inserting an entry (e.g. to update its data) will create a new entry with an identical key.
See previous issue #992 and pull request #993.","I was unsure how to re-use my existing branch after merging changes from master. If I need to create a new clone off master to remove those extra commits, I can do that.",True,{}
nothings/stb,https://github.com/nothings/stb,1208,2021-09-16T10:20:43Z,,2022-02-28T18:55:29Z,OPEN,False,2,1,1,https://github.com/Robyt3,Avoid sign-compare warning in stb_sprintf with GCC 7.5.0,1,[],https://github.com/nothings/stb/pull/1208,https://github.com/Robyt3,1,https://github.com/nothings/stb/pull/1208,"This avoids the warning/error ""signed and unsigned type in conditional expression [-Werror=sign-compare]"" with GCC 7.5.0 on Ubuntu 18.04.","This avoids the warning/error ""signed and unsigned type in conditional expression [-Werror=sign-compare]"" with GCC 7.5.0 on Ubuntu 18.04.",True,{'THUMBS_UP': ['https://github.com/gonzus']}
nothings/stb,https://github.com/nothings/stb,1208,2021-09-16T10:20:43Z,,2022-02-28T18:55:29Z,OPEN,False,2,1,1,https://github.com/Robyt3,Avoid sign-compare warning in stb_sprintf with GCC 7.5.0,1,[],https://github.com/nothings/stb/pull/1208,https://github.com/gonzus,2,https://github.com/nothings/stb/pull/1208#issuecomment-1054563576,"This avoids the warning/error ""signed and unsigned type in conditional expression [-Werror=sign-compare]"" with GCC 7.5.0 on Ubuntu 18.04.",Please count this as an endorsement for this PR. Thanks!,True,{}
nothings/stb,https://github.com/nothings/stb,1211,2021-09-21T20:50:22Z,,2021-09-21T20:50:22Z,OPEN,False,11,0,1,https://github.com/mossx-dev,stb_truetype: added stbtt_ScaleForPixelWidth,1,[],https://github.com/nothings/stb/pull/1211,https://github.com/mossx-dev,1,https://github.com/nothings/stb/pull/1211,Added a function to calculate the pixel width of a letter. This is done by getting the start of the line gap and subtracting it by the end. This is done exactly like stbtt_ScaleForPixelHeight with different offsets.,Added a function to calculate the pixel width of a letter. This is done by getting the start of the line gap and subtracting it by the end. This is done exactly like stbtt_ScaleForPixelHeight with different offsets.,True,{}
nothings/stb,https://github.com/nothings/stb,1217,2021-09-28T21:48:26Z,,2021-09-29T11:18:07Z,OPEN,False,12,10,1,https://github.com/GercogKaban,High resolution image saving bug fix,4,[],https://github.com/nothings/stb/pull/1217,https://github.com/GercogKaban,1,https://github.com/nothings/stb/pull/1217,"Some variables types are changed to int64_t, because in some cases, for example, when saving an image in 32768x32768 resolution, int variable overflows (it is obvious to see that image size = 32768 * 32768 * 4 = 2^32 bigger than 2^32/2 (unsigned integer part).
Unfortunately, I was unable to find solution to fix png format saving.","Some variables types are changed to int64_t, because in some cases, for example, when saving an image in 32768x32768 resolution, int variable overflows (it is obvious to see that image size = 32768 * 32768 * 4 = 2^32 bigger than 2^32/2 (unsigned integer part).
Unfortunately, I was unable to find solution to fix png format saving.",True,{}
nothings/stb,https://github.com/nothings/stb,1217,2021-09-28T21:48:26Z,,2021-09-29T11:18:07Z,OPEN,False,12,10,1,https://github.com/GercogKaban,High resolution image saving bug fix,4,[],https://github.com/nothings/stb/pull/1217,https://github.com/nothings,2,https://github.com/nothings/stb/pull/1217#issuecomment-929780340,"Some variables types are changed to int64_t, because in some cases, for example, when saving an image in 32768x32768 resolution, int variable overflows (it is obvious to see that image size = 32768 * 32768 * 4 = 2^32 bigger than 2^32/2 (unsigned integer part).
Unfortunately, I was unable to find solution to fix png format saving.","I'm not sure this is a good idea, as the stb_image reader has a similar 32-bit issue and cannot handle very large images. It would be a bit problematic if stb_image_write could write images that stb_image couldn't read.",True,{}
nothings/stb,https://github.com/nothings/stb,1217,2021-09-28T21:48:26Z,,2021-09-29T11:18:07Z,OPEN,False,12,10,1,https://github.com/GercogKaban,High resolution image saving bug fix,4,[],https://github.com/nothings/stb/pull/1217,https://github.com/GercogKaban,3,https://github.com/nothings/stb/pull/1217#issuecomment-930082935,"Some variables types are changed to int64_t, because in some cases, for example, when saving an image in 32768x32768 resolution, int variable overflows (it is obvious to see that image size = 32768 * 32768 * 4 = 2^32 bigger than 2^32/2 (unsigned integer part).
Unfortunately, I was unable to find solution to fix png format saving.","Oh, i didn't think about it. I'm trying to implement megatexture in my graphics engine and it doesn't require loading big images into the memory.
Then, at least, i propose to handle this issue in code (raise exception in C++) and point on it in ""documentation"", because then we get an access violation error.
Btw, thank you for quick response.",True,{}
nothings/stb,https://github.com/nothings/stb,1219,2021-09-30T16:10:21Z,2021-10-01T13:02:06Z,2021-10-01T13:02:06Z,CLOSED,False,1,1,1,https://github.com/susi132002,Doc Update,1,['invalid'],https://github.com/nothings/stb/pull/1219,https://github.com/susi132002,1,https://github.com/nothings/stb/pull/1219,Please consider this update,Please consider this update,True,{}
nothings/stb,https://github.com/nothings/stb,1220,2021-10-03T16:36:30Z,2021-10-03T16:50:41Z,2021-10-03T16:50:41Z,CLOSED,False,135,23,9,https://github.com/shubhangsingh6023,please check the required changes,7,['invalid'],https://github.com/nothings/stb/pull/1220,https://github.com/shubhangsingh6023,1,https://github.com/nothings/stb/pull/1220,,,True,{}
nothings/stb,https://github.com/nothings/stb,1223,2021-10-07T20:04:39Z,,2022-02-23T22:22:31Z,OPEN,False,12,5,1,https://github.com/NeilBickford-NV,Fixes a crash and an infinite loop in stb_image that could occur with specially constructed PGM and HDR files,1,[],https://github.com/nothings/stb/pull/1223,https://github.com/NeilBickford-NV,1,https://github.com/nothings/stb/pull/1223,"Fixes two availability issues in stb_image that could occur with specially
constructed HDR and PGM files. Please see issues #1224 and #1225 for full descriptions.
HDR: In certain conditions, the RLE decoder can get stuck in the decoding loop
at the end of a stream: stbi__get8() always returns 0 when at the end of a
stream, which is interpreted as a count and results in an infinite loop.
I believe the solution is to treat a run of 0 as invalid, following the
RGBE_ReadPixels_RLE() function in Bruce Walter's
https://www.graphics.cornell.edu/~bjw/rgbe/rgbe.c.
PGM: Loading large monochrome 16-bit PGM files would cause an access violation
due to reading out of bounds when comverting from 16-bit to 8-bit. In addition,
when loading 16-bit PGM files, stbi__pnm_load() would call
stbi__convert_format() instead of stbi__convert_format16() to convert from
monochrome to the required number of channels, so the buffer would be
interpreted as the wrong type. This pull request also adds an error nessage for
when the stbi__getn() call fails.
Thanks!","Fixes two availability issues in stb_image that could occur with specially
constructed HDR and PGM files. Please see issues #1224 and #1225 for full descriptions.
HDR: In certain conditions, the RLE decoder can get stuck in the decoding loop
at the end of a stream: stbi__get8() always returns 0 when at the end of a
stream, which is interpreted as a count and results in an infinite loop.
I believe the solution is to treat a run of 0 as invalid, following the
RGBE_ReadPixels_RLE() function in Bruce Walter's
https://www.graphics.cornell.edu/~bjw/rgbe/rgbe.c.
PGM: Loading large monochrome 16-bit PGM files would cause an access violation
due to reading out of bounds when comverting from 16-bit to 8-bit. In addition,
when loading 16-bit PGM files, stbi__pnm_load() would call
stbi__convert_format() instead of stbi__convert_format16() to convert from
monochrome to the required number of channels, so the buffer would be
interpreted as the wrong type. This pull request also adds an error nessage for
when the stbi__getn() call fails.
Thanks!",True,{}
nothings/stb,https://github.com/nothings/stb,1223,2021-10-07T20:04:39Z,,2022-02-23T22:22:31Z,OPEN,False,12,5,1,https://github.com/NeilBickford-NV,Fixes a crash and an infinite loop in stb_image that could occur with specially constructed PGM and HDR files,1,[],https://github.com/nothings/stb/pull/1223,https://github.com/NeilBickford-NV,2,https://github.com/nothings/stb/pull/1223#issuecomment-1006897096,"Fixes two availability issues in stb_image that could occur with specially
constructed HDR and PGM files. Please see issues #1224 and #1225 for full descriptions.
HDR: In certain conditions, the RLE decoder can get stuck in the decoding loop
at the end of a stream: stbi__get8() always returns 0 when at the end of a
stream, which is interpreted as a count and results in an infinite loop.
I believe the solution is to treat a run of 0 as invalid, following the
RGBE_ReadPixels_RLE() function in Bruce Walter's
https://www.graphics.cornell.edu/~bjw/rgbe/rgbe.c.
PGM: Loading large monochrome 16-bit PGM files would cause an access violation
due to reading out of bounds when comverting from 16-bit to 8-bit. In addition,
when loading 16-bit PGM files, stbi__pnm_load() would call
stbi__convert_format() instead of stbi__convert_format16() to convert from
monochrome to the required number of channels, so the buffer would be
interpreted as the wrong type. This pull request also adds an error nessage for
when the stbi__getn() call fails.
Thanks!",Following up on this - is there anything I can change to help merge this in? Thanks!,True,{'EYES': ['https://github.com/musicinmybrain']}
nothings/stb,https://github.com/nothings/stb,1223,2021-10-07T20:04:39Z,,2022-02-23T22:22:31Z,OPEN,False,12,5,1,https://github.com/NeilBickford-NV,Fixes a crash and an infinite loop in stb_image that could occur with specially constructed PGM and HDR files,1,[],https://github.com/nothings/stb/pull/1223,https://github.com/nothings,3,https://github.com/nothings/stb/pull/1223#issuecomment-1007062940,"Fixes two availability issues in stb_image that could occur with specially
constructed HDR and PGM files. Please see issues #1224 and #1225 for full descriptions.
HDR: In certain conditions, the RLE decoder can get stuck in the decoding loop
at the end of a stream: stbi__get8() always returns 0 when at the end of a
stream, which is interpreted as a count and results in an infinite loop.
I believe the solution is to treat a run of 0 as invalid, following the
RGBE_ReadPixels_RLE() function in Bruce Walter's
https://www.graphics.cornell.edu/~bjw/rgbe/rgbe.c.
PGM: Loading large monochrome 16-bit PGM files would cause an access violation
due to reading out of bounds when comverting from 16-bit to 8-bit. In addition,
when loading 16-bit PGM files, stbi__pnm_load() would call
stbi__convert_format() instead of stbi__convert_format16() to convert from
monochrome to the required number of channels, so the buffer would be
interpreted as the wrong type. This pull request also adds an error nessage for
when the stbi__getn() call fails.
Thanks!",stb repository is just slow for me to update,True,{}
nothings/stb,https://github.com/nothings/stb,1223,2021-10-07T20:04:39Z,,2022-02-23T22:22:31Z,OPEN,False,12,5,1,https://github.com/NeilBickford-NV,Fixes a crash and an infinite loop in stb_image that could occur with specially constructed PGM and HDR files,1,[],https://github.com/nothings/stb/pull/1223,https://github.com/NeilBickford-NV,4,https://github.com/nothings/stb/pull/1223#issuecomment-1049271974,"Fixes two availability issues in stb_image that could occur with specially
constructed HDR and PGM files. Please see issues #1224 and #1225 for full descriptions.
HDR: In certain conditions, the RLE decoder can get stuck in the decoding loop
at the end of a stream: stbi__get8() always returns 0 when at the end of a
stream, which is interpreted as a count and results in an infinite loop.
I believe the solution is to treat a run of 0 as invalid, following the
RGBE_ReadPixels_RLE() function in Bruce Walter's
https://www.graphics.cornell.edu/~bjw/rgbe/rgbe.c.
PGM: Loading large monochrome 16-bit PGM files would cause an access violation
due to reading out of bounds when comverting from 16-bit to 8-bit. In addition,
when loading 16-bit PGM files, stbi__pnm_load() would call
stbi__convert_format() instead of stbi__convert_format16() to convert from
monochrome to the required number of channels, so the buffer would be
interpreted as the wrong type. This pull request also adds an error nessage for
when the stbi__getn() call fails.
Thanks!",Quick note from the survey of the first 10 ossfuzz issues I did: I think this pull request might resolve ossfuzz issues https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=37628&q=proj%3Dstb&can=2 (this seems to be the infinite HDR reader error) and https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=38394&q=proj%3Dstb&can=2 (I think this is due to the PGM issue). I'm unable to reproduce ossfuzz's crashes with these fixes on Windows with Address Sanitizer enabled.,True,{}
nothings/stb,https://github.com/nothings/stb,1228,2021-10-12T19:34:57Z,,2021-10-12T22:03:15Z,OPEN,False,1,1,1,https://github.com/travisdoor,stb_ds: Fix arrfree when custom allocators are used.,1,"['2 bug', '2 good-no changes needed', '1 stb_ds']",https://github.com/nothings/stb/pull/1228,https://github.com/travisdoor,1,https://github.com/nothings/stb/pull/1228,"Originally STBDS_FREE macro was used directly in arrfree definition,
this leads to invalid replacement in case custom realloc and free
are specified and arrfree is not used in ""implementation"" unit.","Originally STBDS_FREE macro was used directly in arrfree definition,
this leads to invalid replacement in case custom realloc and free
are specified and arrfree is not used in ""implementation"" unit.",True,{}
nothings/stb,https://github.com/nothings/stb,1228,2021-10-12T19:34:57Z,,2021-10-12T22:03:15Z,OPEN,False,1,1,1,https://github.com/travisdoor,stb_ds: Fix arrfree when custom allocators are used.,1,"['2 bug', '2 good-no changes needed', '1 stb_ds']",https://github.com/nothings/stb/pull/1228,https://github.com/nothings,2,https://github.com/nothings/stb/pull/1228#issuecomment-941414285,"Originally STBDS_FREE macro was used directly in arrfree definition,
this leads to invalid replacement in case custom realloc and free
are specified and arrfree is not used in ""implementation"" unit.","I don't see any harm in the change, but I don't understand the purpose, as arrfreef is not meant to be replaceable. What is the failure mode?",True,{}
nothings/stb,https://github.com/nothings/stb,1228,2021-10-12T19:34:57Z,,2021-10-12T22:03:15Z,OPEN,False,1,1,1,https://github.com/travisdoor,stb_ds: Fix arrfree when custom allocators are used.,1,"['2 bug', '2 good-no changes needed', '1 stb_ds']",https://github.com/nothings/stb/pull/1228,https://github.com/travisdoor,3,https://github.com/nothings/stb/pull/1228#issuecomment-941512930,"Originally STBDS_FREE macro was used directly in arrfree definition,
this leads to invalid replacement in case custom realloc and free
are specified and arrfree is not used in ""implementation"" unit.","Maybe I used it wrong, my configuration looks like this:
common.c

#define STB_DS_IMPLEMENTATION
#define STBDS_REALLOC(context, ptr, size) bl_realloc(ptr, size)
#define STBDS_FREE(context, ptr) bl_free(ptr)
#include ""stb_ds.h""

Now when I use arrfree in common.c file, everything is OK, the original free is replaced with bl_free, however, in other files only including stb_ds.h without any additional defines, I get default free instead of bl_free. So i.e. an array allocated from common.c and freed from a different file causes failure (bl_realloc vs default free).
My small change is just to replace STBDS_FREE in arrfree macro with a function call (having correct free in its implementation).",True,{}
nothings/stb,https://github.com/nothings/stb,1228,2021-10-12T19:34:57Z,,2021-10-12T22:03:15Z,OPEN,False,1,1,1,https://github.com/travisdoor,stb_ds: Fix arrfree when custom allocators are used.,1,"['2 bug', '2 good-no changes needed', '1 stb_ds']",https://github.com/nothings/stb/pull/1228,https://github.com/nothings,4,https://github.com/nothings/stb/pull/1228#issuecomment-941533336,"Originally STBDS_FREE macro was used directly in arrfree definition,
this leads to invalid replacement in case custom realloc and free
are specified and arrfree is not used in ""implementation"" unit.","oh, yes. this was fixed before, but i guess it got lost? https://github.com/nothings/stb/pull/1144/files",True,{}
nothings/stb,https://github.com/nothings/stb,1228,2021-10-12T19:34:57Z,,2021-10-12T22:03:15Z,OPEN,False,1,1,1,https://github.com/travisdoor,stb_ds: Fix arrfree when custom allocators are used.,1,"['2 bug', '2 good-no changes needed', '1 stb_ds']",https://github.com/nothings/stb/pull/1228,https://github.com/travisdoor,5,https://github.com/nothings/stb/pull/1228#issuecomment-941617087,"Originally STBDS_FREE macro was used directly in arrfree definition,
this leads to invalid replacement in case custom realloc and free
are specified and arrfree is not used in ""implementation"" unit.","hmm seems to be lost, or not being present in master 
  
    
      stb/stb_ds.h
    
    
         Line 551
      in
      af1a5bc
    
  
  
    

        
          
           #define stbds_arrfree(a)       ((void) ((a) ? STBDS_FREE(NULL,stbds_header(a)) : (void)0), (a)=NULL)",True,{}
nothings/stb,https://github.com/nothings/stb,1228,2021-10-12T19:34:57Z,,2021-10-12T22:03:15Z,OPEN,False,1,1,1,https://github.com/travisdoor,stb_ds: Fix arrfree when custom allocators are used.,1,"['2 bug', '2 good-no changes needed', '1 stb_ds']",https://github.com/nothings/stb/pull/1228,https://github.com/nothings,6,https://github.com/nothings/stb/pull/1228#issuecomment-941632426,"Originally STBDS_FREE macro was used directly in arrfree definition,
this leads to invalid replacement in case custom realloc and free
are specified and arrfree is not used in ""implementation"" unit.","yep, it's clear from the diff for your PR (in the ""files changed"" tab) that it's missing now",True,{}
nothings/stb,https://github.com/nothings/stb,1230,2021-10-15T18:57:00Z,,2022-02-23T22:26:35Z,OPEN,False,2,1,1,https://github.com/NeilBickford-NV,"stb_image PNG reader: Adds checks for invalid DEFLATE codes, fixing an infinite loop found by ossfuzz.",1,"['1 stb_image', '2 good-no changes needed', '2 bug w/ repro']",https://github.com/nothings/stb/pull/1230,https://github.com/NeilBickford-NV,1,https://github.com/nothings/stb/pull/1230,"This pull request attempts to fix an issue where a specially formatted PNG file
could cause an infinite loop in stbi__parse_huffman_block (ossfuzz issue 24232)
The file in ossfuzz issue 24232 appears to cause an infinite loop by making
literal 0 correspond to length 0, and then truncating the file early (resulting
in reading a stream of 0s). More specifically, the file contains a Huffman
length table in which literal 0 decodes to length code 287. It turns out that
length codes 286 and 287 are in fact invalid codes - they're illegal symbols,
but they're there because they're required for constructing the canonical
Huffman tree! stb_image handles these codes by setting len, the number of
bytes to output, to 0. However, the result is that the loops on lines 4274 and
4276 do not advance the state. By doing some necessary setup (so that the range
checks on lines 4265-4267 pass) and then truncating the file early (so that
stbi__zreceive always returns 0, like in issue #1224), reading the ossfuzz
file results in an infinite loop.
Since length codes 286 and 287 are illegal, this pull request adds a branch to
reject them (which fixes the issue with this file).
This also adds a check to reject invalid distance codes 30 and 31 for completeness
(I think the only effect of setting dist to 0 by using a specially formatted
distance table would be that uninitialized data would be left in the output).
Another approach would be to check that len != 0 after line 4261.
However, I think it's possible for 0 to appear as a valid literal value, 256,
in the fixed Huffman length table (RFC 1951 section 3.2.6 - or maybe
256 also represents ""end of block"" there?)
(This does not adjust the credits to avoid merge conflicts with PR #1223)
Some references used when checking that length codes 286 and 287 and distance
codes 30 and 31 are indeed invalid:
RFC 1951 (DEFLATE Compressed Data Format Specification) sections 3.2.5-3.2.7: https://datatracker.ietf.org/doc/html/rfc1951#page-11


The tables in 3.2.5 present instructions for only length codes 0-285, and distance codes 0-29.


Section 3.2.6 states


         Literal/length values 286-287 will never actually
         occur in the compressed data, but participate in the code
         construction.

         Distance codes 0-31 are represented by (fixed-length) 5-bit
         codes, with possible additional bits as shown in the table
         shown in Paragraph 3.2.5, above.  Note that distance codes 30-
         31 will never actually occur in the compressed data.

https://en.wikipedia.org/wiki/Deflate#Bit_reduction lists
286, 287: not used, reserved and illegal but still part of the tree.

and
30–31: not used, reserved and illegal but still part of the tree.

Thanks!","This pull request attempts to fix an issue where a specially formatted PNG file
could cause an infinite loop in stbi__parse_huffman_block (ossfuzz issue 24232)
The file in ossfuzz issue 24232 appears to cause an infinite loop by making
literal 0 correspond to length 0, and then truncating the file early (resulting
in reading a stream of 0s). More specifically, the file contains a Huffman
length table in which literal 0 decodes to length code 287. It turns out that
length codes 286 and 287 are in fact invalid codes - they're illegal symbols,
but they're there because they're required for constructing the canonical
Huffman tree! stb_image handles these codes by setting len, the number of
bytes to output, to 0. However, the result is that the loops on lines 4274 and
4276 do not advance the state. By doing some necessary setup (so that the range
checks on lines 4265-4267 pass) and then truncating the file early (so that
stbi__zreceive always returns 0, like in issue #1224), reading the ossfuzz
file results in an infinite loop.
Since length codes 286 and 287 are illegal, this pull request adds a branch to
reject them (which fixes the issue with this file).
This also adds a check to reject invalid distance codes 30 and 31 for completeness
(I think the only effect of setting dist to 0 by using a specially formatted
distance table would be that uninitialized data would be left in the output).
Another approach would be to check that len != 0 after line 4261.
However, I think it's possible for 0 to appear as a valid literal value, 256,
in the fixed Huffman length table (RFC 1951 section 3.2.6 - or maybe
256 also represents ""end of block"" there?)
(This does not adjust the credits to avoid merge conflicts with PR #1223)
Some references used when checking that length codes 286 and 287 and distance
codes 30 and 31 are indeed invalid:
RFC 1951 (DEFLATE Compressed Data Format Specification) sections 3.2.5-3.2.7: https://datatracker.ietf.org/doc/html/rfc1951#page-11


The tables in 3.2.5 present instructions for only length codes 0-285, and distance codes 0-29.


Section 3.2.6 states


         Literal/length values 286-287 will never actually
         occur in the compressed data, but participate in the code
         construction.

         Distance codes 0-31 are represented by (fixed-length) 5-bit
         codes, with possible additional bits as shown in the table
         shown in Paragraph 3.2.5, above.  Note that distance codes 30-
         31 will never actually occur in the compressed data.

https://en.wikipedia.org/wiki/Deflate#Bit_reduction lists
286, 287: not used, reserved and illegal but still part of the tree.

and
30–31: not used, reserved and illegal but still part of the tree.

Thanks!",True,{'THUMBS_UP': ['https://github.com/randy408']}
nothings/stb,https://github.com/nothings/stb,1230,2021-10-15T18:57:00Z,,2022-02-23T22:26:35Z,OPEN,False,2,1,1,https://github.com/NeilBickford-NV,"stb_image PNG reader: Adds checks for invalid DEFLATE codes, fixing an infinite loop found by ossfuzz.",1,"['1 stb_image', '2 good-no changes needed', '2 bug w/ repro']",https://github.com/nothings/stb/pull/1230,https://github.com/NeilBickford-NV,2,https://github.com/nothings/stb/pull/1230#issuecomment-1006900205,"This pull request attempts to fix an issue where a specially formatted PNG file
could cause an infinite loop in stbi__parse_huffman_block (ossfuzz issue 24232)
The file in ossfuzz issue 24232 appears to cause an infinite loop by making
literal 0 correspond to length 0, and then truncating the file early (resulting
in reading a stream of 0s). More specifically, the file contains a Huffman
length table in which literal 0 decodes to length code 287. It turns out that
length codes 286 and 287 are in fact invalid codes - they're illegal symbols,
but they're there because they're required for constructing the canonical
Huffman tree! stb_image handles these codes by setting len, the number of
bytes to output, to 0. However, the result is that the loops on lines 4274 and
4276 do not advance the state. By doing some necessary setup (so that the range
checks on lines 4265-4267 pass) and then truncating the file early (so that
stbi__zreceive always returns 0, like in issue #1224), reading the ossfuzz
file results in an infinite loop.
Since length codes 286 and 287 are illegal, this pull request adds a branch to
reject them (which fixes the issue with this file).
This also adds a check to reject invalid distance codes 30 and 31 for completeness
(I think the only effect of setting dist to 0 by using a specially formatted
distance table would be that uninitialized data would be left in the output).
Another approach would be to check that len != 0 after line 4261.
However, I think it's possible for 0 to appear as a valid literal value, 256,
in the fixed Huffman length table (RFC 1951 section 3.2.6 - or maybe
256 also represents ""end of block"" there?)
(This does not adjust the credits to avoid merge conflicts with PR #1223)
Some references used when checking that length codes 286 and 287 and distance
codes 30 and 31 are indeed invalid:
RFC 1951 (DEFLATE Compressed Data Format Specification) sections 3.2.5-3.2.7: https://datatracker.ietf.org/doc/html/rfc1951#page-11


The tables in 3.2.5 present instructions for only length codes 0-285, and distance codes 0-29.


Section 3.2.6 states


         Literal/length values 286-287 will never actually
         occur in the compressed data, but participate in the code
         construction.

         Distance codes 0-31 are represented by (fixed-length) 5-bit
         codes, with possible additional bits as shown in the table
         shown in Paragraph 3.2.5, above.  Note that distance codes 30-
         31 will never actually occur in the compressed data.

https://en.wikipedia.org/wiki/Deflate#Bit_reduction lists
286, 287: not used, reserved and illegal but still part of the tree.

and
30–31: not used, reserved and illegal but still part of the tree.

Thanks!","Also following up on this - is there anything I can do to help merge this in?
I'm hoping to have a go at fixing the remaining ossfuzz issues, but was holding off since I feel like queueing up too many merge requests at once could be difficult to handle - if queueing up the pull requests to fix those would be the way to go, though, please let me know.
Thanks again!",True,{}
nothings/stb,https://github.com/nothings/stb,1230,2021-10-15T18:57:00Z,,2022-02-23T22:26:35Z,OPEN,False,2,1,1,https://github.com/NeilBickford-NV,"stb_image PNG reader: Adds checks for invalid DEFLATE codes, fixing an infinite loop found by ossfuzz.",1,"['1 stb_image', '2 good-no changes needed', '2 bug w/ repro']",https://github.com/nothings/stb/pull/1230,https://github.com/nothings,3,https://github.com/nothings/stb/pull/1230#issuecomment-1007063294,"This pull request attempts to fix an issue where a specially formatted PNG file
could cause an infinite loop in stbi__parse_huffman_block (ossfuzz issue 24232)
The file in ossfuzz issue 24232 appears to cause an infinite loop by making
literal 0 correspond to length 0, and then truncating the file early (resulting
in reading a stream of 0s). More specifically, the file contains a Huffman
length table in which literal 0 decodes to length code 287. It turns out that
length codes 286 and 287 are in fact invalid codes - they're illegal symbols,
but they're there because they're required for constructing the canonical
Huffman tree! stb_image handles these codes by setting len, the number of
bytes to output, to 0. However, the result is that the loops on lines 4274 and
4276 do not advance the state. By doing some necessary setup (so that the range
checks on lines 4265-4267 pass) and then truncating the file early (so that
stbi__zreceive always returns 0, like in issue #1224), reading the ossfuzz
file results in an infinite loop.
Since length codes 286 and 287 are illegal, this pull request adds a branch to
reject them (which fixes the issue with this file).
This also adds a check to reject invalid distance codes 30 and 31 for completeness
(I think the only effect of setting dist to 0 by using a specially formatted
distance table would be that uninitialized data would be left in the output).
Another approach would be to check that len != 0 after line 4261.
However, I think it's possible for 0 to appear as a valid literal value, 256,
in the fixed Huffman length table (RFC 1951 section 3.2.6 - or maybe
256 also represents ""end of block"" there?)
(This does not adjust the credits to avoid merge conflicts with PR #1223)
Some references used when checking that length codes 286 and 287 and distance
codes 30 and 31 are indeed invalid:
RFC 1951 (DEFLATE Compressed Data Format Specification) sections 3.2.5-3.2.7: https://datatracker.ietf.org/doc/html/rfc1951#page-11


The tables in 3.2.5 present instructions for only length codes 0-285, and distance codes 0-29.


Section 3.2.6 states


         Literal/length values 286-287 will never actually
         occur in the compressed data, but participate in the code
         construction.

         Distance codes 0-31 are represented by (fixed-length) 5-bit
         codes, with possible additional bits as shown in the table
         shown in Paragraph 3.2.5, above.  Note that distance codes 30-
         31 will never actually occur in the compressed data.

https://en.wikipedia.org/wiki/Deflate#Bit_reduction lists
286, 287: not used, reserved and illegal but still part of the tree.

and
30–31: not used, reserved and illegal but still part of the tree.

Thanks!","feel free to queue up more, i tend to process PRs in batches",True,{}
nothings/stb,https://github.com/nothings/stb,1230,2021-10-15T18:57:00Z,,2022-02-23T22:26:35Z,OPEN,False,2,1,1,https://github.com/NeilBickford-NV,"stb_image PNG reader: Adds checks for invalid DEFLATE codes, fixing an infinite loop found by ossfuzz.",1,"['1 stb_image', '2 good-no changes needed', '2 bug w/ repro']",https://github.com/nothings/stb/pull/1230,https://github.com/NeilBickford-NV,4,https://github.com/nothings/stb/pull/1230#issuecomment-1007063571,"This pull request attempts to fix an issue where a specially formatted PNG file
could cause an infinite loop in stbi__parse_huffman_block (ossfuzz issue 24232)
The file in ossfuzz issue 24232 appears to cause an infinite loop by making
literal 0 correspond to length 0, and then truncating the file early (resulting
in reading a stream of 0s). More specifically, the file contains a Huffman
length table in which literal 0 decodes to length code 287. It turns out that
length codes 286 and 287 are in fact invalid codes - they're illegal symbols,
but they're there because they're required for constructing the canonical
Huffman tree! stb_image handles these codes by setting len, the number of
bytes to output, to 0. However, the result is that the loops on lines 4274 and
4276 do not advance the state. By doing some necessary setup (so that the range
checks on lines 4265-4267 pass) and then truncating the file early (so that
stbi__zreceive always returns 0, like in issue #1224), reading the ossfuzz
file results in an infinite loop.
Since length codes 286 and 287 are illegal, this pull request adds a branch to
reject them (which fixes the issue with this file).
This also adds a check to reject invalid distance codes 30 and 31 for completeness
(I think the only effect of setting dist to 0 by using a specially formatted
distance table would be that uninitialized data would be left in the output).
Another approach would be to check that len != 0 after line 4261.
However, I think it's possible for 0 to appear as a valid literal value, 256,
in the fixed Huffman length table (RFC 1951 section 3.2.6 - or maybe
256 also represents ""end of block"" there?)
(This does not adjust the credits to avoid merge conflicts with PR #1223)
Some references used when checking that length codes 286 and 287 and distance
codes 30 and 31 are indeed invalid:
RFC 1951 (DEFLATE Compressed Data Format Specification) sections 3.2.5-3.2.7: https://datatracker.ietf.org/doc/html/rfc1951#page-11


The tables in 3.2.5 present instructions for only length codes 0-285, and distance codes 0-29.


Section 3.2.6 states


         Literal/length values 286-287 will never actually
         occur in the compressed data, but participate in the code
         construction.

         Distance codes 0-31 are represented by (fixed-length) 5-bit
         codes, with possible additional bits as shown in the table
         shown in Paragraph 3.2.5, above.  Note that distance codes 30-
         31 will never actually occur in the compressed data.

https://en.wikipedia.org/wiki/Deflate#Bit_reduction lists
286, 287: not used, reserved and illegal but still part of the tree.

and
30–31: not used, reserved and illegal but still part of the tree.

Thanks!","Awesome - thank you, will do!",True,{}
nothings/stb,https://github.com/nothings/stb,1230,2021-10-15T18:57:00Z,,2022-02-23T22:26:35Z,OPEN,False,2,1,1,https://github.com/NeilBickford-NV,"stb_image PNG reader: Adds checks for invalid DEFLATE codes, fixing an infinite loop found by ossfuzz.",1,"['1 stb_image', '2 good-no changes needed', '2 bug w/ repro']",https://github.com/nothings/stb/pull/1230,https://github.com/NeilBickford-NV,5,https://github.com/nothings/stb/pull/1230#issuecomment-1049274749,"This pull request attempts to fix an issue where a specially formatted PNG file
could cause an infinite loop in stbi__parse_huffman_block (ossfuzz issue 24232)
The file in ossfuzz issue 24232 appears to cause an infinite loop by making
literal 0 correspond to length 0, and then truncating the file early (resulting
in reading a stream of 0s). More specifically, the file contains a Huffman
length table in which literal 0 decodes to length code 287. It turns out that
length codes 286 and 287 are in fact invalid codes - they're illegal symbols,
but they're there because they're required for constructing the canonical
Huffman tree! stb_image handles these codes by setting len, the number of
bytes to output, to 0. However, the result is that the loops on lines 4274 and
4276 do not advance the state. By doing some necessary setup (so that the range
checks on lines 4265-4267 pass) and then truncating the file early (so that
stbi__zreceive always returns 0, like in issue #1224), reading the ossfuzz
file results in an infinite loop.
Since length codes 286 and 287 are illegal, this pull request adds a branch to
reject them (which fixes the issue with this file).
This also adds a check to reject invalid distance codes 30 and 31 for completeness
(I think the only effect of setting dist to 0 by using a specially formatted
distance table would be that uninitialized data would be left in the output).
Another approach would be to check that len != 0 after line 4261.
However, I think it's possible for 0 to appear as a valid literal value, 256,
in the fixed Huffman length table (RFC 1951 section 3.2.6 - or maybe
256 also represents ""end of block"" there?)
(This does not adjust the credits to avoid merge conflicts with PR #1223)
Some references used when checking that length codes 286 and 287 and distance
codes 30 and 31 are indeed invalid:
RFC 1951 (DEFLATE Compressed Data Format Specification) sections 3.2.5-3.2.7: https://datatracker.ietf.org/doc/html/rfc1951#page-11


The tables in 3.2.5 present instructions for only length codes 0-285, and distance codes 0-29.


Section 3.2.6 states


         Literal/length values 286-287 will never actually
         occur in the compressed data, but participate in the code
         construction.

         Distance codes 0-31 are represented by (fixed-length) 5-bit
         codes, with possible additional bits as shown in the table
         shown in Paragraph 3.2.5, above.  Note that distance codes 30-
         31 will never actually occur in the compressed data.

https://en.wikipedia.org/wiki/Deflate#Bit_reduction lists
286, 287: not used, reserved and illegal but still part of the tree.

and
30–31: not used, reserved and illegal but still part of the tree.

Thanks!","Quick update from the survey of the first 10 ossfuzz issues I did: I think this pull request fixes ossfuzz issues https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=24232&q=proj%3Dstb&can=2 and https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=24235&q=proj%3Dstb&can=2 (the latter seems to be a Huffman table that produces a really large run of blocks). It might also fix https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=37896&q=proj%3Dstb&can=2 and https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=24186&q=proj%3Dstb&can=2 .
The last one (24186) is a bit odd, though: what seems to be happening is that in stbi__png_load, z->expanded isn't written past the first byte. That corresponds to a 1-byte filter, plus uninitialized raw data. This data is copied into the output; then when the else branch of stbi__compute_transparency16 compares tc (which is initialized) against p, we get use of an uninitialized value. It's possible that the file the fuzzer produced just happens to have an invalid Huffman code, and maybe there's a deeper issue underlying issue 24186. Probably the best way to find out (if I had to guess) would be to let the fuzzer run on the code with the pull request merged in, to see if it finds a way of getting uninitialized data to stbi__compute_transparency16 without bad Huffman codes.
Thanks!",True,{}
nothings/stb,https://github.com/nothings/stb,1235,2021-10-22T18:24:05Z,2021-10-22T18:34:18Z,2021-10-22T18:34:18Z,CLOSED,False,28,0,1,https://github.com/ryhor-spivak,Add Laczos 3 filter to stb_image_resize,2,[],https://github.com/nothings/stb/pull/1235,https://github.com/ryhor-spivak,1,https://github.com/nothings/stb/pull/1235,This adds Lanczos 3 filter. It may be useful for downscaling as it produce a bit sharper results than any other filter.,This adds Lanczos 3 filter. It may be useful for downscaling as it produce a bit sharper results than any other filter.,True,{}
nothings/stb,https://github.com/nothings/stb,1235,2021-10-22T18:24:05Z,2021-10-22T18:34:18Z,2021-10-22T18:34:18Z,CLOSED,False,28,0,1,https://github.com/ryhor-spivak,Add Laczos 3 filter to stb_image_resize,2,[],https://github.com/nothings/stb/pull/1235,https://github.com/nothings,2,https://github.com/nothings/stb/pull/1235#issuecomment-949873501,This adds Lanczos 3 filter. It may be useful for downscaling as it produce a bit sharper results than any other filter.,"We're not taking any non-bug PRs on the current version of stb_image_resize since we have a significant rewrite mostly done, just waiting on some final touches to be released.",True,{}
nothings/stb,https://github.com/nothings/stb,1236,2021-10-26T04:32:14Z,,2021-10-28T20:43:29Z,OPEN,False,2,0,1,https://github.com/Ryan1729,Forward declare stbhw__process struct to fix warnings,1,[],https://github.com/nothings/stb/pull/1236,https://github.com/Ryan1729,1,https://github.com/nothings/stb/pull/1236,"stb_herringbone_wang_tile.h is currently producing warnings on clang and gcc relating to the stbhw__process_rect typedef. This includes when compiling the herringbone_map.c and herringbone_generator.c files in the tests directory.
This PR forward declares the struct which fixes those warnings.
Output of clang -o herringbone_map herringbone_map.c -lm:
In file included from herringbone_map.c:7:
./../stb_herringbone_wang_tile.h:369:41: warning: declaration of 'struct stbhw__process' will not be visible outside of this function [-Wvisibility]
typedef void stbhw__process_rect(struct stbhw__process *p, int xpos, int ypos,
                                        ^
./../stb_herringbone_wang_tile.h:401:43: warning: incompatible pointer types passing 'stbhw__process *' (aka 'struct stbhw__process *') to parameter of type 'struct stbhw__process *' [-Wincompatible-pointer-types]
                        p->process_h_rect(p, xpos, ypos, a,b,c,d,e,f);
                                          ^
./../stb_herringbone_wang_tile.h:425:43: warning: incompatible pointer types passing 'stbhw__process *' (aka 'struct stbhw__process *') to parameter of type 'struct stbhw__process *' [-Wincompatible-pointer-types]
                        p->process_v_rect(p, xpos, ypos, a,b,c,d,e,f);
                                          ^
./../stb_herringbone_wang_tile.h:929:21: warning: incompatible pointer types assigning to 'stbhw__process_rect *' (aka 'void (*)(struct stbhw__process *, int, int, int, int, int, int, int, int)') from 'void (stbhw__process *, int, int, int, int, int, int, int, int)' (aka 'void (struct stbhw__process *, int, int, int, int, int, int, int, int)') [-Wincompatible-pointer-types]
   p.process_h_rect = stbhw__parse_h_rect;
                    ^ ~~~~~~~~~~~~~~~~~~~
./../stb_herringbone_wang_tile.h:930:21: warning: incompatible pointer types assigning to 'stbhw__process_rect *' (aka 'void (*)(struct stbhw__process *, int, int, int, int, int, int, int, int)') from 'void (stbhw__process *, int, int, int, int, int, int, int, int)' (aka 'void (struct stbhw__process *, int, int, int, int, int, int, int, int)') [-Wincompatible-pointer-types]
   p.process_v_rect = stbhw__parse_v_rect;
                    ^ ~~~~~~~~~~~~~~~~~~~
./../stb_herringbone_wang_tile.h:1186:24: warning: incompatible pointer types assigning to 'stbhw__process_rect *' (aka 'void (*)(struct stbhw__process *, int, int, int, int, int, int, int, int)') from 'void (stbhw__process *, int, int, int, int, int, int, int, int)' (aka 'void (struct stbhw__process *, int, int, int, int, int, int, int, int)') [-Wincompatible-pointer-types]
      p.process_h_rect = stbhw__corner_process_h_rect;
                       ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./../stb_herringbone_wang_tile.h:1187:24: warning: incompatible pointer types assigning to 'stbhw__process_rect *' (aka 'void (*)(struct stbhw__process *, int, int, int, int, int, int, int, int)') from 'void (stbhw__process *, int, int, int, int, int, int, int, int)' (aka 'void (struct stbhw__process *, int, int, int, int, int, int, int, int)') [-Wincompatible-pointer-types]
      p.process_v_rect = stbhw__corner_process_v_rect;
                       ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./../stb_herringbone_wang_tile.h:1189:24: warning: incompatible pointer types assigning to 'stbhw__process_rect *' (aka 'void (*)(struct stbhw__process *, int, int, int, int, int, int, int, int)') from 'void (stbhw__process *, int, int, int, int, int, int, int, int)' (aka 'void (struct stbhw__process *, int, int, int, int, int, int, int, int)') [-Wincompatible-pointer-types]
      p.process_h_rect = stbhw__edge_process_h_rect;
                       ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~
./../stb_herringbone_wang_tile.h:1190:24: warning: incompatible pointer types assigning to 'stbhw__process_rect *' (aka 'void (*)(struct stbhw__process *, int, int, int, int, int, int, int, int)') from 'void (stbhw__process *, int, int, int, int, int, int, int, int)' (aka 'void (struct stbhw__process *, int, int, int, int, int, int, int, int)') [-Wincompatible-pointer-types]
      p.process_v_rect = stbhw__edge_process_v_rect;
                       ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~
9 warnings generated.

Output of clang --version:
clang version 10.0.0-4ubuntu1
Target: x86_64-pc-linux-gnu
Thread model: posix
InstalledDir: /usr/bin

gcc outputs a similar set of warnings but gcc appears not to have a flag to silence the first warning.","stb_herringbone_wang_tile.h is currently producing warnings on clang and gcc relating to the stbhw__process_rect typedef. This includes when compiling the herringbone_map.c and herringbone_generator.c files in the tests directory.
This PR forward declares the struct which fixes those warnings.
Output of clang -o herringbone_map herringbone_map.c -lm:
In file included from herringbone_map.c:7:
./../stb_herringbone_wang_tile.h:369:41: warning: declaration of 'struct stbhw__process' will not be visible outside of this function [-Wvisibility]
typedef void stbhw__process_rect(struct stbhw__process *p, int xpos, int ypos,
                                        ^
./../stb_herringbone_wang_tile.h:401:43: warning: incompatible pointer types passing 'stbhw__process *' (aka 'struct stbhw__process *') to parameter of type 'struct stbhw__process *' [-Wincompatible-pointer-types]
                        p->process_h_rect(p, xpos, ypos, a,b,c,d,e,f);
                                          ^
./../stb_herringbone_wang_tile.h:425:43: warning: incompatible pointer types passing 'stbhw__process *' (aka 'struct stbhw__process *') to parameter of type 'struct stbhw__process *' [-Wincompatible-pointer-types]
                        p->process_v_rect(p, xpos, ypos, a,b,c,d,e,f);
                                          ^
./../stb_herringbone_wang_tile.h:929:21: warning: incompatible pointer types assigning to 'stbhw__process_rect *' (aka 'void (*)(struct stbhw__process *, int, int, int, int, int, int, int, int)') from 'void (stbhw__process *, int, int, int, int, int, int, int, int)' (aka 'void (struct stbhw__process *, int, int, int, int, int, int, int, int)') [-Wincompatible-pointer-types]
   p.process_h_rect = stbhw__parse_h_rect;
                    ^ ~~~~~~~~~~~~~~~~~~~
./../stb_herringbone_wang_tile.h:930:21: warning: incompatible pointer types assigning to 'stbhw__process_rect *' (aka 'void (*)(struct stbhw__process *, int, int, int, int, int, int, int, int)') from 'void (stbhw__process *, int, int, int, int, int, int, int, int)' (aka 'void (struct stbhw__process *, int, int, int, int, int, int, int, int)') [-Wincompatible-pointer-types]
   p.process_v_rect = stbhw__parse_v_rect;
                    ^ ~~~~~~~~~~~~~~~~~~~
./../stb_herringbone_wang_tile.h:1186:24: warning: incompatible pointer types assigning to 'stbhw__process_rect *' (aka 'void (*)(struct stbhw__process *, int, int, int, int, int, int, int, int)') from 'void (stbhw__process *, int, int, int, int, int, int, int, int)' (aka 'void (struct stbhw__process *, int, int, int, int, int, int, int, int)') [-Wincompatible-pointer-types]
      p.process_h_rect = stbhw__corner_process_h_rect;
                       ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./../stb_herringbone_wang_tile.h:1187:24: warning: incompatible pointer types assigning to 'stbhw__process_rect *' (aka 'void (*)(struct stbhw__process *, int, int, int, int, int, int, int, int)') from 'void (stbhw__process *, int, int, int, int, int, int, int, int)' (aka 'void (struct stbhw__process *, int, int, int, int, int, int, int, int)') [-Wincompatible-pointer-types]
      p.process_v_rect = stbhw__corner_process_v_rect;
                       ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./../stb_herringbone_wang_tile.h:1189:24: warning: incompatible pointer types assigning to 'stbhw__process_rect *' (aka 'void (*)(struct stbhw__process *, int, int, int, int, int, int, int, int)') from 'void (stbhw__process *, int, int, int, int, int, int, int, int)' (aka 'void (struct stbhw__process *, int, int, int, int, int, int, int, int)') [-Wincompatible-pointer-types]
      p.process_h_rect = stbhw__edge_process_h_rect;
                       ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~
./../stb_herringbone_wang_tile.h:1190:24: warning: incompatible pointer types assigning to 'stbhw__process_rect *' (aka 'void (*)(struct stbhw__process *, int, int, int, int, int, int, int, int)') from 'void (stbhw__process *, int, int, int, int, int, int, int, int)' (aka 'void (struct stbhw__process *, int, int, int, int, int, int, int, int)') [-Wincompatible-pointer-types]
      p.process_v_rect = stbhw__edge_process_v_rect;
                       ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~
9 warnings generated.

Output of clang --version:
clang version 10.0.0-4ubuntu1
Target: x86_64-pc-linux-gnu
Thread model: posix
InstalledDir: /usr/bin

gcc outputs a similar set of warnings but gcc appears not to have a flag to silence the first warning.",True,{}
nothings/stb,https://github.com/nothings/stb,1241,2021-10-31T21:02:21Z,,2021-11-21T16:46:20Z,OPEN,False,21,1,1,https://github.com/Underdisc,Added another sample program and updated a sample OpenGL call.,1,[],https://github.com/nothings/stb/pull/1241,https://github.com/Underdisc,1,https://github.com/nothings/stb/pull/1241,"I posted this question #1238 and ended up solving my own problem. I wouldn't have encountered this issue had it been demonstrated in a snippet within the file. It wasn't much effort to add and I thought it would be a useful hint to those that fall into the same trap.
Like I said in the bottom of #1238, GL_ALPHA is not a valid option in recent versions of OpenGL. This also updates that to use working parameters.","I posted this question #1238 and ended up solving my own problem. I wouldn't have encountered this issue had it been demonstrated in a snippet within the file. It wasn't much effort to add and I thought it would be a useful hint to those that fall into the same trap.
Like I said in the bottom of #1238, GL_ALPHA is not a valid option in recent versions of OpenGL. This also updates that to use working parameters.",True,{}
nothings/stb,https://github.com/nothings/stb,1241,2021-10-31T21:02:21Z,,2021-11-21T16:46:20Z,OPEN,False,21,1,1,https://github.com/Underdisc,Added another sample program and updated a sample OpenGL call.,1,[],https://github.com/nothings/stb/pull/1241,https://github.com/Underdisc,2,https://github.com/nothings/stb/pull/1241#issuecomment-974738821,"I posted this question #1238 and ended up solving my own problem. I wouldn't have encountered this issue had it been demonstrated in a snippet within the file. It wasn't much effort to add and I thought it would be a useful hint to those that fall into the same trap.
Like I said in the bottom of #1238, GL_ALPHA is not a valid option in recent versions of OpenGL. This also updates that to use working parameters.",Feel free to close if this addition isn't desirable. Figuring out my problem took a while but passionately making a pr afterwards did not. I can understand why it might not be wanted since sample code shouldn't lean heavily towards a specific graphics api.,True,{}
nothings/stb,https://github.com/nothings/stb,1241,2021-10-31T21:02:21Z,,2021-11-21T16:46:20Z,OPEN,False,21,1,1,https://github.com/Underdisc,Added another sample program and updated a sample OpenGL call.,1,[],https://github.com/nothings/stb/pull/1241,https://github.com/nothings,3,https://github.com/nothings/stb/pull/1241#issuecomment-974742251,"I posted this question #1238 and ended up solving my own problem. I wouldn't have encountered this issue had it been demonstrated in a snippet within the file. It wasn't much effort to add and I thought it would be a useful hint to those that fall into the same trap.
Like I said in the bottom of #1238, GL_ALPHA is not a valid option in recent versions of OpenGL. This also updates that to use working parameters.","The problem is that GL_R8 doesn't work in OLDER versions of OpenGL. It's not possible to have something work with both because OpenGL decided to break back-compatiblity. (Indeed, I'm surprised you didn't complain about the immediate mode stuff not being supported anymore--the glVertex() stuff.)
All in all, I'm more likely to just delete the examples entirely than try to solve that conundrum.",True,{}
nothings/stb,https://github.com/nothings/stb,1241,2021-10-31T21:02:21Z,,2021-11-21T16:46:20Z,OPEN,False,21,1,1,https://github.com/Underdisc,Added another sample program and updated a sample OpenGL call.,1,[],https://github.com/nothings/stb/pull/1241,https://github.com/Underdisc,4,https://github.com/nothings/stb/pull/1241#issuecomment-974837499,"I posted this question #1238 and ended up solving my own problem. I wouldn't have encountered this issue had it been demonstrated in a snippet within the file. It wasn't much effort to add and I thought it would be a useful hint to those that fall into the same trap.
Like I said in the bottom of #1238, GL_ALPHA is not a valid option in recent versions of OpenGL. This also updates that to use working parameters.","True. I didn't even notice the glVertex stuff because I am using a single vertex buffer to render all of the glyphs. I just focused on dealing with all the scaling issues that come with that.
If having the examples be compliant with older versions is necessary, removing examples that call any OpenGL functions is good to get rid of the confusion. The non OpenGL examples are still nice to have, though, and aren't restricted by the same constraint. What's the reason for keeping the example code compliant with old versions of the OpenGL api?",True,{}
nothings/stb,https://github.com/nothings/stb,1241,2021-10-31T21:02:21Z,,2021-11-21T16:46:20Z,OPEN,False,21,1,1,https://github.com/Underdisc,Added another sample program and updated a sample OpenGL call.,1,[],https://github.com/nothings/stb/pull/1241,https://github.com/nothings,5,https://github.com/nothings/stb/pull/1241#issuecomment-974852732,"I posted this question #1238 and ended up solving my own problem. I wouldn't have encountered this issue had it been demonstrated in a snippet within the file. It wasn't much effort to add and I thought it would be a useful hint to those that fall into the same trap.
Like I said in the bottom of #1238, GL_ALPHA is not a valid option in recent versions of OpenGL. This also updates that to use working parameters.","because (a) the examples are simple and don't need to set up vertex buffers etc, and (b) because Windows opengl headers are still 1.1 so is the eaiest version to target on that platform",True,{}
nothings/stb,https://github.com/nothings/stb,1243,2021-11-08T00:57:04Z,,2021-11-08T02:10:27Z,OPEN,False,114,50,1,https://github.com/Voldakk,stb_image: Added support for RLE compressed BMP,2,[],https://github.com/nothings/stb/pull/1243,https://github.com/Voldakk,1,https://github.com/nothings/stb/pull/1243,"I was using stb_image to convert a ton of BMPs from an old game to PNG and some failed due to them being RLE compressed, so I added support for 4 and 8-bit RLE compressed BMPs.
While this isn't a new file format i guess it will still increase the attack surface of stb_image, though I think it should be added for completeness.","I was using stb_image to convert a ton of BMPs from an old game to PNG and some failed due to them being RLE compressed, so I added support for 4 and 8-bit RLE compressed BMPs.
While this isn't a new file format i guess it will still increase the attack surface of stb_image, though I think it should be added for completeness.",True,{}
nothings/stb,https://github.com/nothings/stb,1255,2021-12-03T14:37:53Z,,2021-12-03T14:40:50Z,OPEN,False,4,0,1,https://github.com/ryuukk,stb_image: new define to allow compilation for wasm32 target,1,[],https://github.com/nothings/stb/pull/1255,https://github.com/ryuukk,1,https://github.com/nothings/stb/pull/1255,"This lets us use std image when we target wasm32 without emscripten, therefore without libc
EDIT:
Now that i think about it, i should also create a test for it! so.. not ready to be merged!","This lets us use std image when we target wasm32 without emscripten, therefore without libc
EDIT:
Now that i think about it, i should also create a test for it! so.. not ready to be merged!",True,{}
nothings/stb,https://github.com/nothings/stb,1257,2021-12-07T08:42:42Z,,2021-12-07T09:06:08Z,OPEN,False,1,1,1,https://github.com/prodeveloper0,Edit for MSVC,1,"['1 stb_image_write', '2 warning']",https://github.com/nothings/stb/pull/1257,https://github.com/prodeveloper0,1,https://github.com/nothings/stb/pull/1257,Suppress _CRT_SECURE_NO_WARNINGS warning for MSVC.,Suppress _CRT_SECURE_NO_WARNINGS warning for MSVC.,True,{}
nothings/stb,https://github.com/nothings/stb,1261,2021-12-17T23:54:25Z,,2021-12-19T09:59:51Z,OPEN,False,1,1,1,https://github.com/aganm,Fix a typo in stb_rect_pack,1,['2 good-no changes needed'],https://github.com/nothings/stb/pull/1261,https://github.com/aganm,1,https://github.com/nothings/stb/pull/1261,,,True,{}
nothings/stb,https://github.com/nothings/stb,1263,2021-12-19T10:03:42Z,2021-12-19T14:30:24Z,2021-12-19T14:30:24Z,CLOSED,False,1,1,1,https://github.com/RobLoach,std_truetype: Fix typo of received,1,[],https://github.com/nothings/stb/pull/1263,https://github.com/RobLoach,1,https://github.com/nothings/stb/pull/1263,Small typo fix for recived to received.,Small typo fix for recived to received.,True,{}
nothings/stb,https://github.com/nothings/stb,1263,2021-12-19T10:03:42Z,2021-12-19T14:30:24Z,2021-12-19T14:30:24Z,CLOSED,False,1,1,1,https://github.com/RobLoach,std_truetype: Fix typo of received,1,[],https://github.com/nothings/stb/pull/1263,https://github.com/nothings,2,https://github.com/nothings/stb/pull/1263#issuecomment-997402226,Small typo fix for recived to received.,nope,True,{'CONFUSED': ['https://github.com/wmcnamara']}
nothings/stb,https://github.com/nothings/stb,1266,2021-12-24T09:21:32Z,2021-12-24T22:06:53Z,2021-12-24T22:06:53Z,CLOSED,False,8,0,1,https://github.com/sezero,stb_vorbis: allow disabling the seek api,1,[],https://github.com/nothings/stb/pull/1266,https://github.com/sezero,1,https://github.com/nothings/stb/pull/1266,Bound to the new STB_VORBIS_NO_SEEK_API define.,Bound to the new STB_VORBIS_NO_SEEK_API define.,True,{}
nothings/stb,https://github.com/nothings/stb,1266,2021-12-24T09:21:32Z,2021-12-24T22:06:53Z,2021-12-24T22:06:53Z,CLOSED,False,8,0,1,https://github.com/sezero,stb_vorbis: allow disabling the seek api,1,[],https://github.com/nothings/stb/pull/1266,https://github.com/nothings,2,https://github.com/nothings/stb/pull/1266#issuecomment-1000924962,Bound to the new STB_VORBIS_NO_SEEK_API define.,what problem does this solve?,True,{}
nothings/stb,https://github.com/nothings/stb,1266,2021-12-24T09:21:32Z,2021-12-24T22:06:53Z,2021-12-24T22:06:53Z,CLOSED,False,8,0,1,https://github.com/sezero,stb_vorbis: allow disabling the seek api,1,[],https://github.com/nothings/stb/pull/1266,https://github.com/sezero,3,https://github.com/nothings/stb/pull/1266#issuecomment-1000925988,Bound to the new STB_VORBIS_NO_SEEK_API define.,It helps with users discard code which is dead to them,True,{}
nothings/stb,https://github.com/nothings/stb,1266,2021-12-24T09:21:32Z,2021-12-24T22:06:53Z,2021-12-24T22:06:53Z,CLOSED,False,8,0,1,https://github.com/sezero,stb_vorbis: allow disabling the seek api,1,[],https://github.com/nothings/stb/pull/1266,https://github.com/nothings,4,https://github.com/nothings/stb/pull/1266#issuecomment-1000928817,Bound to the new STB_VORBIS_NO_SEEK_API define.,"It's not worth doing a feature-by-feature disabling, as it becomes too hard to maintain the code due to all the various combinations of flags.",True,{}
nothings/stb,https://github.com/nothings/stb,1266,2021-12-24T09:21:32Z,2021-12-24T22:06:53Z,2021-12-24T22:06:53Z,CLOSED,False,8,0,1,https://github.com/sezero,stb_vorbis: allow disabling the seek api,1,[],https://github.com/nothings/stb/pull/1266,https://github.com/sezero,5,https://github.com/nothings/stb/pull/1266#issuecomment-1000931047,Bound to the new STB_VORBIS_NO_SEEK_API define.,"As you wish, feel free to close.",True,{}
nothings/stb,https://github.com/nothings/stb,1269,2021-12-29T17:32:19Z,,2021-12-29T18:19:31Z,OPEN,False,44,27,18,https://github.com/peternewman,Add a codespell action and fix the typos it found,2,[],https://github.com/nothings/stb/pull/1269,https://github.com/peternewman,1,https://github.com/nothings/stb/pull/1269,Inspired by #1261,Inspired by #1261,True,{}
nothings/stb,https://github.com/nothings/stb,1270,2021-12-29T18:18:20Z,,2021-12-29T18:19:02Z,OPEN,False,2,2,2,https://github.com/peternewman,Clarify where contributors list is,2,[],https://github.com/nothings/stb/pull/1270,https://github.com/peternewman,1,https://github.com/nothings/stb/pull/1270,,,True,{}
nothings/stb,https://github.com/nothings/stb,1272,2022-01-04T14:52:54Z,,2022-01-06T10:11:52Z,OPEN,False,41,28,1,https://github.com/git-bruh,add missing shget*ts and don't reassign hashmap in hmget*ts,4,[],https://github.com/nothings/stb/pull/1272,https://github.com/git-bruh,1,https://github.com/nothings/stb/pull/1272,closes #1271,closes #1271,True,{}
nothings/stb,https://github.com/nothings/stb,1272,2022-01-04T14:52:54Z,,2022-01-06T10:11:52Z,OPEN,False,41,28,1,https://github.com/git-bruh,add missing shget*ts and don't reassign hashmap in hmget*ts,4,[],https://github.com/nothings/stb/pull/1272,https://github.com/nothings,2,https://github.com/nothings/stb/pull/1272#issuecomment-1005138084,closes #1271,"in addition to not reassigning the pointer in the wrapper macros, the implementation function of the get*_ts should be changed to not reallocate on NULL at all, just assign the empty index to the temp and return. the code that allocates it should be moved from hmget_key_ts implementation to hmget_key.
Behavior-wise, this means that as written, current hmget_ts will crash on NULL and hmgetp_ts will return an invalid but not-NULL pointer pointer, but hmgeti_ts will be well-behaved. In addition to this change, the wrapper for hmgetp_ts can probably be made to return NULL, but that's not consistent with how the other hmgetp's work; I wonder if this should be changed to return NULL instead of returning a pointer to the hidden 'default' slot in the hash table array.",True,{}
nothings/stb,https://github.com/nothings/stb,1272,2022-01-04T14:52:54Z,,2022-01-06T10:11:52Z,OPEN,False,41,28,1,https://github.com/git-bruh,add missing shget*ts and don't reassign hashmap in hmget*ts,4,[],https://github.com/nothings/stb/pull/1272,https://github.com/nothings,3,https://github.com/nothings/stb/pull/1272#issuecomment-1006393977,closes #1271,"Other than the above, this looks good to me.",True,{}
nothings/stb,https://github.com/nothings/stb,1272,2022-01-04T14:52:54Z,,2022-01-06T10:11:52Z,OPEN,False,41,28,1,https://github.com/git-bruh,add missing shget*ts and don't reassign hashmap in hmget*ts,4,[],https://github.com/nothings/stb/pull/1272,https://github.com/nothings,4,https://github.com/nothings/stb/pull/1272#issuecomment-1006440163,closes #1271,"looks good, thank you for your contribution",True,{'THUMBS_UP': ['https://github.com/git-bruh']}
nothings/stb,https://github.com/nothings/stb,1276,2022-01-16T09:38:12Z,,2022-01-16T10:04:11Z,OPEN,False,1,1,1,https://github.com/N-R-K,stb_image: fix function name,1,"['2 bug', '1 stb_image', '2 good-no changes needed']",https://github.com/nothings/stb/pull/1276,https://github.com/N-R-K,1,https://github.com/nothings/stb/pull/1276,"i'm assuming it was a typo. fixes the following warning:
stb_image.h:4958:14: warning: no previous prototype for 'stbi__unpremultiply_on_load_thread' [-Wmissing-prototypes]
 4958 | STBIDEF void stbi__unpremultiply_on_load_thread(int flag_true_if_should_unpremultiply)
      |              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","i'm assuming it was a typo. fixes the following warning:
stb_image.h:4958:14: warning: no previous prototype for 'stbi__unpremultiply_on_load_thread' [-Wmissing-prototypes]
 4958 | STBIDEF void stbi__unpremultiply_on_load_thread(int flag_true_if_should_unpremultiply)
      |              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",True,{}
nothings/stb,https://github.com/nothings/stb,1278,2022-01-23T13:46:17Z,2022-03-31T05:30:49Z,2022-03-31T05:30:49Z,CLOSED,False,1,1,1,https://github.com/kennethjohnsen,Remove sz cast to int in stb_leakcheck_malloc.,1,"['2 good-no changes needed', '2 warning']",https://github.com/nothings/stb/pull/1278,https://github.com/kennethjohnsen,1,https://github.com/nothings/stb/pull/1278,"Casting sz to an int before storing it in mi->size is flagged as a warning with -Wconversion.
Very new to the STB libraries, so forgive me if I'm missing something.","Casting sz to an int before storing it in mi->size is flagged as a warning with -Wconversion.
Very new to the STB libraries, so forgive me if I'm missing something.",True,{}
nothings/stb,https://github.com/nothings/stb,1278,2022-01-23T13:46:17Z,2022-03-31T05:30:49Z,2022-03-31T05:30:49Z,CLOSED,False,1,1,1,https://github.com/kennethjohnsen,Remove sz cast to int in stb_leakcheck_malloc.,1,"['2 good-no changes needed', '2 warning']",https://github.com/nothings/stb/pull/1278,https://github.com/nothings,2,https://github.com/nothings/stb/pull/1278#issuecomment-1019491746,"Casting sz to an int before storing it in mi->size is flagged as a warning with -Wconversion.
Very new to the STB libraries, so forgive me if I'm missing something.","yep, probably a historical artifact",True,{}
nothings/stb,https://github.com/nothings/stb,1279,2022-01-24T10:07:42Z,,2022-01-24T10:07:42Z,OPEN,False,1,1,1,https://github.com/andreas-schwab,stb_sprintf.h: handle LP64 platforms,1,[],https://github.com/nothings/stb/pull/1279,https://github.com/andreas-schwab,1,https://github.com/nothings/stb/pull/1279,,,True,{}
nothings/stb,https://github.com/nothings/stb,1290,2022-02-17T15:11:35Z,,2022-03-11T22:37:51Z,OPEN,False,12,4,1,https://github.com/wmcnamara,Added fallthrough macro to suppress C++17 fallthrough warnings on MSVC and other compilers,4,[],https://github.com/nothings/stb/pull/1290,https://github.com/wmcnamara,1,https://github.com/nothings/stb/pull/1290,"This PR adds a STBI_FALLTHROUGH macro to fix warnings on Visual Studio about switch fallthrough.
The STBI_FALLTHROUGH macro is written to be defined if C++17 is enabled, and if it is enabled it will define STBI_FALLTHROUGH as [[fallthrough]], which stops the warnings.","This PR adds a STBI_FALLTHROUGH macro to fix warnings on Visual Studio about switch fallthrough.
The STBI_FALLTHROUGH macro is written to be defined if C++17 is enabled, and if it is enabled it will define STBI_FALLTHROUGH as [[fallthrough]], which stops the warnings.",True,{}
nothings/stb,https://github.com/nothings/stb,1290,2022-02-17T15:11:35Z,,2022-03-11T22:37:51Z,OPEN,False,12,4,1,https://github.com/wmcnamara,Added fallthrough macro to suppress C++17 fallthrough warnings on MSVC and other compilers,4,[],https://github.com/nothings/stb/pull/1290,https://github.com/Wohlstand,2,https://github.com/nothings/stb/pull/1290#issuecomment-1045110881,"This PR adds a STBI_FALLTHROUGH macro to fix warnings on Visual Studio about switch fallthrough.
The STBI_FALLTHROUGH macro is written to be defined if C++17 is enabled, and if it is enabled it will define STBI_FALLTHROUGH as [[fallthrough]], which stops the warnings.","Please keep comment lines (you may append macro being before comment, but don't remove comments), they are required to shut up the GCC 7+ and CLang warnings (even with older standards than C++17, I do have C++11 at my projects, and this warning always pops up if don't add the ""// fallthrough"" or ""/* fallthrough */"" comment line)",True,{'THUMBS_UP': ['https://github.com/wmcnamara']}
nothings/stb,https://github.com/nothings/stb,1290,2022-02-17T15:11:35Z,,2022-03-11T22:37:51Z,OPEN,False,12,4,1,https://github.com/wmcnamara,Added fallthrough macro to suppress C++17 fallthrough warnings on MSVC and other compilers,4,[],https://github.com/nothings/stb/pull/1290,https://github.com/wmcnamara,3,https://github.com/nothings/stb/pull/1290#issuecomment-1045121611,"This PR adds a STBI_FALLTHROUGH macro to fix warnings on Visual Studio about switch fallthrough.
The STBI_FALLTHROUGH macro is written to be defined if C++17 is enabled, and if it is enabled it will define STBI_FALLTHROUGH as [[fallthrough]], which stops the warnings.",Thank you for catching this! I had no idea. I've added the comment to the end of the macro!,True,{}
nothings/stb,https://github.com/nothings/stb,1290,2022-02-17T15:11:35Z,,2022-03-11T22:37:51Z,OPEN,False,12,4,1,https://github.com/wmcnamara,Added fallthrough macro to suppress C++17 fallthrough warnings on MSVC and other compilers,4,[],https://github.com/nothings/stb/pull/1290,https://github.com/Wohlstand,4,https://github.com/nothings/stb/pull/1290#issuecomment-1045125451,"This PR adds a STBI_FALLTHROUGH macro to fix warnings on Visual Studio about switch fallthrough.
The STBI_FALLTHROUGH macro is written to be defined if C++17 is enabled, and if it is enabled it will define STBI_FALLTHROUGH as [[fallthrough]], which stops the warnings.","Lol, not that I actually meant, you just now made that both [[fallthrough]] and comment will appear at C++17 and some special conditions. I meant, comments should be always, at all standards. So:
//C++17 fallthrough macro
#if (__cplusplus >= 201703L) || (defined(_MSVC_LANG) && (_MSVC_LANG >= 201703L) && (_MSC_VER >= 1913)) 
#define STBI_FALLTHROUGH [[fallthrough]];         // <------ Keep this as-is
#else
#define STBI_FALLTHROUGH
#endif

....
switch(x)
{
case 1:
case 2: STBI_FALLTHROUGH /* fallthrough */         //  <------------ Comment must be always at the here
case 3:
}",True,{}
nothings/stb,https://github.com/nothings/stb,1290,2022-02-17T15:11:35Z,,2022-03-11T22:37:51Z,OPEN,False,12,4,1,https://github.com/wmcnamara,Added fallthrough macro to suppress C++17 fallthrough warnings on MSVC and other compilers,4,[],https://github.com/nothings/stb/pull/1290,https://github.com/Wohlstand,5,https://github.com/nothings/stb/pull/1290#issuecomment-1045129428,"This PR adds a STBI_FALLTHROUGH macro to fix warnings on Visual Studio about switch fallthrough.
The STBI_FALLTHROUGH macro is written to be defined if C++17 is enabled, and if it is enabled it will define STBI_FALLTHROUGH as [[fallthrough]], which stops the warnings.","P.S. I doubt comments will be assed by macros, will need to run the preprocessor and see what it actually generated on output...",True,{}
nothings/stb,https://github.com/nothings/stb,1290,2022-02-17T15:11:35Z,,2022-03-11T22:37:51Z,OPEN,False,12,4,1,https://github.com/wmcnamara,Added fallthrough macro to suppress C++17 fallthrough warnings on MSVC and other compilers,4,[],https://github.com/nothings/stb/pull/1290,https://github.com/wmcnamara,6,https://github.com/nothings/stb/pull/1290#issuecomment-1045130162,"This PR adds a STBI_FALLTHROUGH macro to fix warnings on Visual Studio about switch fallthrough.
The STBI_FALLTHROUGH macro is written to be defined if C++17 is enabled, and if it is enabled it will define STBI_FALLTHROUGH as [[fallthrough]], which stops the warnings.","Oops, yeah I wasnt really thinking about that when I wrote it...
I'll go ahead and change that",True,{'THUMBS_UP': ['https://github.com/Wohlstand']}
nothings/stb,https://github.com/nothings/stb,1290,2022-02-17T15:11:35Z,,2022-03-11T22:37:51Z,OPEN,False,12,4,1,https://github.com/wmcnamara,Added fallthrough macro to suppress C++17 fallthrough warnings on MSVC and other compilers,4,[],https://github.com/nothings/stb/pull/1290,https://github.com/Wohlstand,7,https://github.com/nothings/stb/pull/1290#issuecomment-1045131983,"This PR adds a STBI_FALLTHROUGH macro to fix warnings on Visual Studio about switch fallthrough.
The STBI_FALLTHROUGH macro is written to be defined if C++17 is enabled, and if it is enabled it will define STBI_FALLTHROUGH as [[fallthrough]], which stops the warnings.","I did an exact test:
With GCC:

With CLang:

So, adding that comment at macro has absolutely no sense",True,{}
nothings/stb,https://github.com/nothings/stb,1290,2022-02-17T15:11:35Z,,2022-03-11T22:37:51Z,OPEN,False,12,4,1,https://github.com/wmcnamara,Added fallthrough macro to suppress C++17 fallthrough warnings on MSVC and other compilers,4,[],https://github.com/nothings/stb/pull/1290,https://github.com/Wohlstand,8,https://github.com/nothings/stb/pull/1290#issuecomment-1045158759,"This PR adds a STBI_FALLTHROUGH macro to fix warnings on Visual Studio about switch fallthrough.
The STBI_FALLTHROUGH macro is written to be defined if C++17 is enabled, and if it is enabled it will define STBI_FALLTHROUGH as [[fallthrough]], which stops the warnings.",Now looks way better 🦊 👍,True,{'ROCKET': ['https://github.com/wmcnamara']}
nothings/stb,https://github.com/nothings/stb,1290,2022-02-17T15:11:35Z,,2022-03-11T22:37:51Z,OPEN,False,12,4,1,https://github.com/wmcnamara,Added fallthrough macro to suppress C++17 fallthrough warnings on MSVC and other compilers,4,[],https://github.com/nothings/stb/pull/1290,https://github.com/moon-chilled,9,https://github.com/nothings/stb/pull/1290#issuecomment-1062558402,"This PR adds a STBI_FALLTHROUGH macro to fix warnings on Visual Studio about switch fallthrough.
The STBI_FALLTHROUGH macro is written to be defined if C++17 is enabled, and if it is enabled it will define STBI_FALLTHROUGH as [[fallthrough]], which stops the warnings.","It seems redundant to have both the comment and the explicit declaration.  Why not this instead?
#elif defined(__GNUC__)
# define STBI_FALLTHROUGH __attribute__((fallthrough))",True,{}
nothings/stb,https://github.com/nothings/stb,1290,2022-02-17T15:11:35Z,,2022-03-11T22:37:51Z,OPEN,False,12,4,1,https://github.com/wmcnamara,Added fallthrough macro to suppress C++17 fallthrough warnings on MSVC and other compilers,4,[],https://github.com/nothings/stb/pull/1290,https://github.com/wmcnamara,10,https://github.com/nothings/stb/pull/1290#issuecomment-1065480128,"This PR adds a STBI_FALLTHROUGH macro to fix warnings on Visual Studio about switch fallthrough.
The STBI_FALLTHROUGH macro is written to be defined if C++17 is enabled, and if it is enabled it will define STBI_FALLTHROUGH as [[fallthrough]], which stops the warnings.","Thats definitely a much nicer solution.
@Wohlstand Does this fix the issue aswell on your end?",True,{}
nothings/stb,https://github.com/nothings/stb,1290,2022-02-17T15:11:35Z,,2022-03-11T22:37:51Z,OPEN,False,12,4,1,https://github.com/wmcnamara,Added fallthrough macro to suppress C++17 fallthrough warnings on MSVC and other compilers,4,[],https://github.com/nothings/stb/pull/1290,https://github.com/Wohlstand,11,https://github.com/nothings/stb/pull/1290#issuecomment-1065487041,"This PR adds a STBI_FALLTHROUGH macro to fix warnings on Visual Studio about switch fallthrough.
The STBI_FALLTHROUGH macro is written to be defined if C++17 is enabled, and if it is enabled it will define STBI_FALLTHROUGH as [[fallthrough]], which stops the warnings.","It seems redundant to have both the comment and the explicit declaration. Why not this instead?

Old compilers would get hurt (such as GCC 5 and below), gonna check some to make sure all clear.",True,{}
nothings/stb,https://github.com/nothings/stb,1290,2022-02-17T15:11:35Z,,2022-03-11T22:37:51Z,OPEN,False,12,4,1,https://github.com/wmcnamara,Added fallthrough macro to suppress C++17 fallthrough warnings on MSVC and other compilers,4,[],https://github.com/nothings/stb/pull/1290,https://github.com/Wohlstand,12,https://github.com/nothings/stb/pull/1290#issuecomment-1065493282,"This PR adds a STBI_FALLTHROUGH macro to fix warnings on Visual Studio about switch fallthrough.
The STBI_FALLTHROUGH macro is written to be defined if C++17 is enabled, and if it is enabled it will define STBI_FALLTHROUGH as [[fallthrough]], which stops the warnings.","On GCC 4.8 the next warning appears:
# gcc -c fallthrough.c -o fallthrough.o
fallthrough.c: В функции «main»:
fallthrough.c:11:9: предупреждение: пустая декларация [по умолчанию включена]
         __attribute__((fallthrough));
         ^

""Empty declaration""
p.s. This code I tried to compile:
#include <stdio.h>

int main()
{
    int cond = 42;

    switch (cond)
    {
    case 42:
        printf(""Hello"");
        __attribute__((fallthrough));
    case 43:
        printf("" world!\n"");
    }

    return 0;
}
on GCC 9 it doesn't gives any warnings",True,{}
nothings/stb,https://github.com/nothings/stb,1290,2022-02-17T15:11:35Z,,2022-03-11T22:37:51Z,OPEN,False,12,4,1,https://github.com/wmcnamara,Added fallthrough macro to suppress C++17 fallthrough warnings on MSVC and other compilers,4,[],https://github.com/nothings/stb/pull/1290,https://github.com/moon-chilled,13,https://github.com/nothings/stb/pull/1290#issuecomment-1065585327,"This PR adds a STBI_FALLTHROUGH macro to fix warnings on Visual Studio about switch fallthrough.
The STBI_FALLTHROUGH macro is written to be defined if C++17 is enabled, and if it is enabled it will define STBI_FALLTHROUGH as [[fallthrough]], which stops the warnings.",I think it is reasonable to give worse diagnostics on older compiler versions.  But yeah there should be a check for minimum gcc version.,True,{}
nothings/stb,https://github.com/nothings/stb,1290,2022-02-17T15:11:35Z,,2022-03-11T22:37:51Z,OPEN,False,12,4,1,https://github.com/wmcnamara,Added fallthrough macro to suppress C++17 fallthrough warnings on MSVC and other compilers,4,[],https://github.com/nothings/stb/pull/1290,https://github.com/Wohlstand,14,https://github.com/nothings/stb/pull/1290#issuecomment-1065600406,"This PR adds a STBI_FALLTHROUGH macro to fix warnings on Visual Studio about switch fallthrough.
The STBI_FALLTHROUGH macro is written to be defined if C++17 is enabled, and if it is enabled it will define STBI_FALLTHROUGH as [[fallthrough]], which stops the warnings.","So, the best and most universal solution would be just keeping the /*fallthrough*/ comment which doesn't break old compilers and is approvable by modern compilers to not have the warning here. Speaking about MSVC compilers, they were the most painful compared to others (exclusively everything older than MSVC2015). There is still be the annoying case against friend templates in classes and the painful inability to take the pointer to the member of the sub-structure (everything works, but MSVC just fails).",True,{}
nothings/stb,https://github.com/nothings/stb,1295,2022-02-18T20:00:49Z,,2022-02-18T20:00:49Z,OPEN,False,31,1,1,https://github.com/Wohlstand,stb_vorbis: report the sample-accurate offset,1,[],https://github.com/nothings/stb/pull/1295,https://github.com/Wohlstand,1,https://github.com/nothings/stb/pull/1295,"Added the stb_vorbis_get_playback_sample_offset() call that reports the sample-accurate position which is required for several operations such as loop range processing.
Fixes #1294","Added the stb_vorbis_get_playback_sample_offset() call that reports the sample-accurate position which is required for several operations such as loop range processing.
Fixes #1294",True,{}
nothings/stb,https://github.com/nothings/stb,1297,2022-02-23T22:02:29Z,,2022-02-27T05:00:45Z,OPEN,False,44,2,1,https://github.com/NeilBickford-NV,"Additional stb_image fixes for bugs from ossfuzz and issues 1289, 1291, 1292, and 1293",4,[],https://github.com/nothings/stb/pull/1297,https://github.com/NeilBickford-NV,1,https://github.com/nothings/stb/pull/1297,"Hi stb maintainers! I went through the first ten ossfuzz issues (up to and including ossfuzz issue 38394) and put together fixes for them. About half were duplicates of previous issues, but three were new and are fixed in this PR.
I also went through the test files in issues #1289, #1291, #1292, and #1293 and fixed ASan+UBSan reports from loading those issues' repro cases which weren't already fixed by #1223 or #1230.
Here are the bugs, some quick analyses, and their fixes:
https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=22620&q=proj%3Dstb&can=2 :
This is a PNM file with specifies a width of 3333333333. Parsing this integer overflows a signed 32-bit integer.
The fix I chose isn't the most elegant: I check to see if value * 10 + (*c - 0) would overflow a signed int, and then propagate an error up two levels. This also makes loading a 0-width or 0-height PNM file more explicitly an error (previously, this would produce an error for other reasons). However, I can think of a few other good ways of fixing this (e.g. simplifying the condition by limiting the maximum size a bit further, or changing value to an unsigned int and letting later error-handing handle it.) Please let me know if you would prefer any of these other ways!
https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=32803&q=proj%3Dstb&can=2 :
The reproducer file here is a PNG file with a second IDAT chunk with a c.length of 0x68088c86. The IDAT handler increases idata_limit to fit this amount of memory, and then reallocates space for 0xcce48000 bytes, causing an ossfuzz out-of-memory error (since this is greater than ossfuzz's limit of 2560 MB). The stbi__getn call later fails.
I'm not totally sure about my fix for this one, which is to reject IDAT sections larger than 1 GiB (the ossfuzz OOM threshold is 2560 MB). Comparing against the compressed data size would be ideal - but we don't have the data size in a callback context, right?
https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=36193&q=proj%3Dstb&can=2 :
The reproducer here is a JPEG file that manages to set j->code_bits to -8 in stbi__grow_buffer_unsafe! This results in a left shift of 32 bits on a 32-bit type, which is undefined behavior. This happens by getting into a situation where code_bits is 1, but the combined length s to read is 9.
This PR checks for this situation and returns an error if it happens.
Issue #1289:
Will post analysis in issue. This PR avoids this crash by bounds-checking c.
Issue #1291, file id_000154,sig_06,src_002783+000969,time_39921237,op_splice,rep_4,trial_1492432:
Will post analysis in issue. This pull request adds checks to both the h->size[k++] loop in stbi__build_huffman and the ""DHT - define huffman table"" code to verify that writes are in-bounds.
Since creating this pull request, I also put together fixes for several other files in issues 1292 and 1293:
Issue #1292, files id_000118,sig_06,src_003303,time_27343468,op_havoc,rep_16,trial_1496823 and id_000130,sig_06,src_002266+002478,time_16238914,op_splice,rep_16,trial_1492432:
These files all produce signed integer overflows (which are undefined behavior) when decoding the DC coefficient of a JPEG block or when accumulating delta codes (i.e. in the lines data[0] = (shirt) (dc * dequant[0]);, data[0] = (short) (dc * (1 << j->succ_low));, and dc = j->img_comp[b].dc_pred + diff;). This MR adds two functions, stbi__addints_valid and stbi__mul2shorts_valid, that check for overflow of addition of two 32-bit signed ints and multiplication of two signed shorts, respectively; if there's overflow here, we return an error. These two functions are maybe a bit more complex than ideal; maybe wrapping is OK here (in which case, casting to a signed type would make the overflow defined)?
Issue #1293, files id_000115,sig_06,src_003085,time_21982593,op_havoc,rep_8,trial_1497271, id_000157,sig_06,src_003484,time_46825823,op_havoc,rep_16,trial_1492432, and id_000212,sig_06,src_005033,time_18133274,op_havoc,rep_4,trial_1499760:
These are all relatively similar to ossfuzz issue 36193 above: the decoder exhausts its code buffer, then calls stbi__grow_buffer_unsafe (which I think implements NEXTBIT in ITU-T81), which immediately reaches a fill followed by a marker, leaving code_bits at 0. Any of a number of functions try to read some number of code bits from stbi__jpeg and decrease stbi__jpeg::code_bits, making it negative (e.g. -8 or -9)! The next time control returns to stbi__grow_buffer_unsafe and a byte is read that's not 0xff, the j->code_buffer |= b << (24 - j->code_bits); line left shifts by more than 32 bits.
I sort of manually patched each of the places where stbi__grow_buffer_unsafe(j); can be called followed by decreasing j->code_bits by making sure that the required number of bits were actually read. If not enough bits were read, I have the code act as if all 0s were read or return an error. This could be better - perhaps the best solution would be to implement NEXTBIT more closely and handle error propagation here? - but seems to work.
Thanks!","Hi stb maintainers! I went through the first ten ossfuzz issues (up to and including ossfuzz issue 38394) and put together fixes for them. About half were duplicates of previous issues, but three were new and are fixed in this PR.
I also went through the test files in issues #1289, #1291, #1292, and #1293 and fixed ASan+UBSan reports from loading those issues' repro cases which weren't already fixed by #1223 or #1230.
Here are the bugs, some quick analyses, and their fixes:
https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=22620&q=proj%3Dstb&can=2 :
This is a PNM file with specifies a width of 3333333333. Parsing this integer overflows a signed 32-bit integer.
The fix I chose isn't the most elegant: I check to see if value * 10 + (*c - 0) would overflow a signed int, and then propagate an error up two levels. This also makes loading a 0-width or 0-height PNM file more explicitly an error (previously, this would produce an error for other reasons). However, I can think of a few other good ways of fixing this (e.g. simplifying the condition by limiting the maximum size a bit further, or changing value to an unsigned int and letting later error-handing handle it.) Please let me know if you would prefer any of these other ways!
https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=32803&q=proj%3Dstb&can=2 :
The reproducer file here is a PNG file with a second IDAT chunk with a c.length of 0x68088c86. The IDAT handler increases idata_limit to fit this amount of memory, and then reallocates space for 0xcce48000 bytes, causing an ossfuzz out-of-memory error (since this is greater than ossfuzz's limit of 2560 MB). The stbi__getn call later fails.
I'm not totally sure about my fix for this one, which is to reject IDAT sections larger than 1 GiB (the ossfuzz OOM threshold is 2560 MB). Comparing against the compressed data size would be ideal - but we don't have the data size in a callback context, right?
https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=36193&q=proj%3Dstb&can=2 :
The reproducer here is a JPEG file that manages to set j->code_bits to -8 in stbi__grow_buffer_unsafe! This results in a left shift of 32 bits on a 32-bit type, which is undefined behavior. This happens by getting into a situation where code_bits is 1, but the combined length s to read is 9.
This PR checks for this situation and returns an error if it happens.
Issue #1289:
Will post analysis in issue. This PR avoids this crash by bounds-checking c.
Issue #1291, file id_000154,sig_06,src_002783+000969,time_39921237,op_splice,rep_4,trial_1492432:
Will post analysis in issue. This pull request adds checks to both the h->size[k++] loop in stbi__build_huffman and the ""DHT - define huffman table"" code to verify that writes are in-bounds.
Since creating this pull request, I also put together fixes for several other files in issues 1292 and 1293:
Issue #1292, files id_000118,sig_06,src_003303,time_27343468,op_havoc,rep_16,trial_1496823 and id_000130,sig_06,src_002266+002478,time_16238914,op_splice,rep_16,trial_1492432:
These files all produce signed integer overflows (which are undefined behavior) when decoding the DC coefficient of a JPEG block or when accumulating delta codes (i.e. in the lines data[0] = (shirt) (dc * dequant[0]);, data[0] = (short) (dc * (1 << j->succ_low));, and dc = j->img_comp[b].dc_pred + diff;). This MR adds two functions, stbi__addints_valid and stbi__mul2shorts_valid, that check for overflow of addition of two 32-bit signed ints and multiplication of two signed shorts, respectively; if there's overflow here, we return an error. These two functions are maybe a bit more complex than ideal; maybe wrapping is OK here (in which case, casting to a signed type would make the overflow defined)?
Issue #1293, files id_000115,sig_06,src_003085,time_21982593,op_havoc,rep_8,trial_1497271, id_000157,sig_06,src_003484,time_46825823,op_havoc,rep_16,trial_1492432, and id_000212,sig_06,src_005033,time_18133274,op_havoc,rep_4,trial_1499760:
These are all relatively similar to ossfuzz issue 36193 above: the decoder exhausts its code buffer, then calls stbi__grow_buffer_unsafe (which I think implements NEXTBIT in ITU-T81), which immediately reaches a fill followed by a marker, leaving code_bits at 0. Any of a number of functions try to read some number of code bits from stbi__jpeg and decrease stbi__jpeg::code_bits, making it negative (e.g. -8 or -9)! The next time control returns to stbi__grow_buffer_unsafe and a byte is read that's not 0xff, the j->code_buffer |= b << (24 - j->code_bits); line left shifts by more than 32 bits.
I sort of manually patched each of the places where stbi__grow_buffer_unsafe(j); can be called followed by decreasing j->code_bits by making sure that the required number of bits were actually read. If not enough bits were read, I have the code act as if all 0s were read or return an error. This could be better - perhaps the best solution would be to implement NEXTBIT more closely and handle error propagation here? - but seems to work.
Thanks!",True,{}
nothings/stb,https://github.com/nothings/stb,1297,2022-02-23T22:02:29Z,,2022-02-27T05:00:45Z,OPEN,False,44,2,1,https://github.com/NeilBickford-NV,"Additional stb_image fixes for bugs from ossfuzz and issues 1289, 1291, 1292, and 1293",4,[],https://github.com/nothings/stb/pull/1297,https://github.com/NeilBickford-NV,2,https://github.com/nothings/stb/pull/1297#issuecomment-1049277234,"Hi stb maintainers! I went through the first ten ossfuzz issues (up to and including ossfuzz issue 38394) and put together fixes for them. About half were duplicates of previous issues, but three were new and are fixed in this PR.
I also went through the test files in issues #1289, #1291, #1292, and #1293 and fixed ASan+UBSan reports from loading those issues' repro cases which weren't already fixed by #1223 or #1230.
Here are the bugs, some quick analyses, and their fixes:
https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=22620&q=proj%3Dstb&can=2 :
This is a PNM file with specifies a width of 3333333333. Parsing this integer overflows a signed 32-bit integer.
The fix I chose isn't the most elegant: I check to see if value * 10 + (*c - 0) would overflow a signed int, and then propagate an error up two levels. This also makes loading a 0-width or 0-height PNM file more explicitly an error (previously, this would produce an error for other reasons). However, I can think of a few other good ways of fixing this (e.g. simplifying the condition by limiting the maximum size a bit further, or changing value to an unsigned int and letting later error-handing handle it.) Please let me know if you would prefer any of these other ways!
https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=32803&q=proj%3Dstb&can=2 :
The reproducer file here is a PNG file with a second IDAT chunk with a c.length of 0x68088c86. The IDAT handler increases idata_limit to fit this amount of memory, and then reallocates space for 0xcce48000 bytes, causing an ossfuzz out-of-memory error (since this is greater than ossfuzz's limit of 2560 MB). The stbi__getn call later fails.
I'm not totally sure about my fix for this one, which is to reject IDAT sections larger than 1 GiB (the ossfuzz OOM threshold is 2560 MB). Comparing against the compressed data size would be ideal - but we don't have the data size in a callback context, right?
https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=36193&q=proj%3Dstb&can=2 :
The reproducer here is a JPEG file that manages to set j->code_bits to -8 in stbi__grow_buffer_unsafe! This results in a left shift of 32 bits on a 32-bit type, which is undefined behavior. This happens by getting into a situation where code_bits is 1, but the combined length s to read is 9.
This PR checks for this situation and returns an error if it happens.
Issue #1289:
Will post analysis in issue. This PR avoids this crash by bounds-checking c.
Issue #1291, file id_000154,sig_06,src_002783+000969,time_39921237,op_splice,rep_4,trial_1492432:
Will post analysis in issue. This pull request adds checks to both the h->size[k++] loop in stbi__build_huffman and the ""DHT - define huffman table"" code to verify that writes are in-bounds.
Since creating this pull request, I also put together fixes for several other files in issues 1292 and 1293:
Issue #1292, files id_000118,sig_06,src_003303,time_27343468,op_havoc,rep_16,trial_1496823 and id_000130,sig_06,src_002266+002478,time_16238914,op_splice,rep_16,trial_1492432:
These files all produce signed integer overflows (which are undefined behavior) when decoding the DC coefficient of a JPEG block or when accumulating delta codes (i.e. in the lines data[0] = (shirt) (dc * dequant[0]);, data[0] = (short) (dc * (1 << j->succ_low));, and dc = j->img_comp[b].dc_pred + diff;). This MR adds two functions, stbi__addints_valid and stbi__mul2shorts_valid, that check for overflow of addition of two 32-bit signed ints and multiplication of two signed shorts, respectively; if there's overflow here, we return an error. These two functions are maybe a bit more complex than ideal; maybe wrapping is OK here (in which case, casting to a signed type would make the overflow defined)?
Issue #1293, files id_000115,sig_06,src_003085,time_21982593,op_havoc,rep_8,trial_1497271, id_000157,sig_06,src_003484,time_46825823,op_havoc,rep_16,trial_1492432, and id_000212,sig_06,src_005033,time_18133274,op_havoc,rep_4,trial_1499760:
These are all relatively similar to ossfuzz issue 36193 above: the decoder exhausts its code buffer, then calls stbi__grow_buffer_unsafe (which I think implements NEXTBIT in ITU-T81), which immediately reaches a fill followed by a marker, leaving code_bits at 0. Any of a number of functions try to read some number of code bits from stbi__jpeg and decrease stbi__jpeg::code_bits, making it negative (e.g. -8 or -9)! The next time control returns to stbi__grow_buffer_unsafe and a byte is read that's not 0xff, the j->code_buffer |= b << (24 - j->code_bits); line left shifts by more than 32 bits.
I sort of manually patched each of the places where stbi__grow_buffer_unsafe(j); can be called followed by decreasing j->code_bits by making sure that the required number of bits were actually read. If not enough bits were read, I have the code act as if all 0s were read or return an error. This could be better - perhaps the best solution would be to implement NEXTBIT more closely and handle error propagation here? - but seems to work.
Thanks!","By the way, I've made another branch at https://github.com/NeilBickford-NV/stb/tree/neilbickford/all-fixes which contains the fixes from this pull request and the other pull requests to fix fuzzer-found issues (#1223 and #1230), in case that's easier to look at or to merge in when the time comes to process everything. Thanks again!",True,{}
nothings/stb,https://github.com/nothings/stb,1297,2022-02-23T22:02:29Z,,2022-02-27T05:00:45Z,OPEN,False,44,2,1,https://github.com/NeilBickford-NV,"Additional stb_image fixes for bugs from ossfuzz and issues 1289, 1291, 1292, and 1293",4,[],https://github.com/nothings/stb/pull/1297,https://github.com/NeilBickford-NV,3,https://github.com/nothings/stb/pull/1297#issuecomment-1049598508,"Hi stb maintainers! I went through the first ten ossfuzz issues (up to and including ossfuzz issue 38394) and put together fixes for them. About half were duplicates of previous issues, but three were new and are fixed in this PR.
I also went through the test files in issues #1289, #1291, #1292, and #1293 and fixed ASan+UBSan reports from loading those issues' repro cases which weren't already fixed by #1223 or #1230.
Here are the bugs, some quick analyses, and their fixes:
https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=22620&q=proj%3Dstb&can=2 :
This is a PNM file with specifies a width of 3333333333. Parsing this integer overflows a signed 32-bit integer.
The fix I chose isn't the most elegant: I check to see if value * 10 + (*c - 0) would overflow a signed int, and then propagate an error up two levels. This also makes loading a 0-width or 0-height PNM file more explicitly an error (previously, this would produce an error for other reasons). However, I can think of a few other good ways of fixing this (e.g. simplifying the condition by limiting the maximum size a bit further, or changing value to an unsigned int and letting later error-handing handle it.) Please let me know if you would prefer any of these other ways!
https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=32803&q=proj%3Dstb&can=2 :
The reproducer file here is a PNG file with a second IDAT chunk with a c.length of 0x68088c86. The IDAT handler increases idata_limit to fit this amount of memory, and then reallocates space for 0xcce48000 bytes, causing an ossfuzz out-of-memory error (since this is greater than ossfuzz's limit of 2560 MB). The stbi__getn call later fails.
I'm not totally sure about my fix for this one, which is to reject IDAT sections larger than 1 GiB (the ossfuzz OOM threshold is 2560 MB). Comparing against the compressed data size would be ideal - but we don't have the data size in a callback context, right?
https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=36193&q=proj%3Dstb&can=2 :
The reproducer here is a JPEG file that manages to set j->code_bits to -8 in stbi__grow_buffer_unsafe! This results in a left shift of 32 bits on a 32-bit type, which is undefined behavior. This happens by getting into a situation where code_bits is 1, but the combined length s to read is 9.
This PR checks for this situation and returns an error if it happens.
Issue #1289:
Will post analysis in issue. This PR avoids this crash by bounds-checking c.
Issue #1291, file id_000154,sig_06,src_002783+000969,time_39921237,op_splice,rep_4,trial_1492432:
Will post analysis in issue. This pull request adds checks to both the h->size[k++] loop in stbi__build_huffman and the ""DHT - define huffman table"" code to verify that writes are in-bounds.
Since creating this pull request, I also put together fixes for several other files in issues 1292 and 1293:
Issue #1292, files id_000118,sig_06,src_003303,time_27343468,op_havoc,rep_16,trial_1496823 and id_000130,sig_06,src_002266+002478,time_16238914,op_splice,rep_16,trial_1492432:
These files all produce signed integer overflows (which are undefined behavior) when decoding the DC coefficient of a JPEG block or when accumulating delta codes (i.e. in the lines data[0] = (shirt) (dc * dequant[0]);, data[0] = (short) (dc * (1 << j->succ_low));, and dc = j->img_comp[b].dc_pred + diff;). This MR adds two functions, stbi__addints_valid and stbi__mul2shorts_valid, that check for overflow of addition of two 32-bit signed ints and multiplication of two signed shorts, respectively; if there's overflow here, we return an error. These two functions are maybe a bit more complex than ideal; maybe wrapping is OK here (in which case, casting to a signed type would make the overflow defined)?
Issue #1293, files id_000115,sig_06,src_003085,time_21982593,op_havoc,rep_8,trial_1497271, id_000157,sig_06,src_003484,time_46825823,op_havoc,rep_16,trial_1492432, and id_000212,sig_06,src_005033,time_18133274,op_havoc,rep_4,trial_1499760:
These are all relatively similar to ossfuzz issue 36193 above: the decoder exhausts its code buffer, then calls stbi__grow_buffer_unsafe (which I think implements NEXTBIT in ITU-T81), which immediately reaches a fill followed by a marker, leaving code_bits at 0. Any of a number of functions try to read some number of code bits from stbi__jpeg and decrease stbi__jpeg::code_bits, making it negative (e.g. -8 or -9)! The next time control returns to stbi__grow_buffer_unsafe and a byte is read that's not 0xff, the j->code_buffer |= b << (24 - j->code_bits); line left shifts by more than 32 bits.
I sort of manually patched each of the places where stbi__grow_buffer_unsafe(j); can be called followed by decreasing j->code_bits by making sure that the required number of bits were actually read. If not enough bits were read, I have the code act as if all 0s were read or return an error. This could be better - perhaps the best solution would be to implement NEXTBIT more closely and handle error propagation here? - but seems to work.
Thanks!",I've added some additional checks to fix issues reported in bugs 1292 and 1293; looks like there could still be at least one out-of-memory issue from fuzz-testing with libFuzzer.,True,{}
nothings/stb,https://github.com/nothings/stb,1297,2022-02-23T22:02:29Z,,2022-02-27T05:00:45Z,OPEN,False,44,2,1,https://github.com/NeilBickford-NV,"Additional stb_image fixes for bugs from ossfuzz and issues 1289, 1291, 1292, and 1293",4,[],https://github.com/nothings/stb/pull/1297,https://github.com/NeilBickford-NV,4,https://github.com/nothings/stb/pull/1297#issuecomment-1049604321,"Hi stb maintainers! I went through the first ten ossfuzz issues (up to and including ossfuzz issue 38394) and put together fixes for them. About half were duplicates of previous issues, but three were new and are fixed in this PR.
I also went through the test files in issues #1289, #1291, #1292, and #1293 and fixed ASan+UBSan reports from loading those issues' repro cases which weren't already fixed by #1223 or #1230.
Here are the bugs, some quick analyses, and their fixes:
https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=22620&q=proj%3Dstb&can=2 :
This is a PNM file with specifies a width of 3333333333. Parsing this integer overflows a signed 32-bit integer.
The fix I chose isn't the most elegant: I check to see if value * 10 + (*c - 0) would overflow a signed int, and then propagate an error up two levels. This also makes loading a 0-width or 0-height PNM file more explicitly an error (previously, this would produce an error for other reasons). However, I can think of a few other good ways of fixing this (e.g. simplifying the condition by limiting the maximum size a bit further, or changing value to an unsigned int and letting later error-handing handle it.) Please let me know if you would prefer any of these other ways!
https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=32803&q=proj%3Dstb&can=2 :
The reproducer file here is a PNG file with a second IDAT chunk with a c.length of 0x68088c86. The IDAT handler increases idata_limit to fit this amount of memory, and then reallocates space for 0xcce48000 bytes, causing an ossfuzz out-of-memory error (since this is greater than ossfuzz's limit of 2560 MB). The stbi__getn call later fails.
I'm not totally sure about my fix for this one, which is to reject IDAT sections larger than 1 GiB (the ossfuzz OOM threshold is 2560 MB). Comparing against the compressed data size would be ideal - but we don't have the data size in a callback context, right?
https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=36193&q=proj%3Dstb&can=2 :
The reproducer here is a JPEG file that manages to set j->code_bits to -8 in stbi__grow_buffer_unsafe! This results in a left shift of 32 bits on a 32-bit type, which is undefined behavior. This happens by getting into a situation where code_bits is 1, but the combined length s to read is 9.
This PR checks for this situation and returns an error if it happens.
Issue #1289:
Will post analysis in issue. This PR avoids this crash by bounds-checking c.
Issue #1291, file id_000154,sig_06,src_002783+000969,time_39921237,op_splice,rep_4,trial_1492432:
Will post analysis in issue. This pull request adds checks to both the h->size[k++] loop in stbi__build_huffman and the ""DHT - define huffman table"" code to verify that writes are in-bounds.
Since creating this pull request, I also put together fixes for several other files in issues 1292 and 1293:
Issue #1292, files id_000118,sig_06,src_003303,time_27343468,op_havoc,rep_16,trial_1496823 and id_000130,sig_06,src_002266+002478,time_16238914,op_splice,rep_16,trial_1492432:
These files all produce signed integer overflows (which are undefined behavior) when decoding the DC coefficient of a JPEG block or when accumulating delta codes (i.e. in the lines data[0] = (shirt) (dc * dequant[0]);, data[0] = (short) (dc * (1 << j->succ_low));, and dc = j->img_comp[b].dc_pred + diff;). This MR adds two functions, stbi__addints_valid and stbi__mul2shorts_valid, that check for overflow of addition of two 32-bit signed ints and multiplication of two signed shorts, respectively; if there's overflow here, we return an error. These two functions are maybe a bit more complex than ideal; maybe wrapping is OK here (in which case, casting to a signed type would make the overflow defined)?
Issue #1293, files id_000115,sig_06,src_003085,time_21982593,op_havoc,rep_8,trial_1497271, id_000157,sig_06,src_003484,time_46825823,op_havoc,rep_16,trial_1492432, and id_000212,sig_06,src_005033,time_18133274,op_havoc,rep_4,trial_1499760:
These are all relatively similar to ossfuzz issue 36193 above: the decoder exhausts its code buffer, then calls stbi__grow_buffer_unsafe (which I think implements NEXTBIT in ITU-T81), which immediately reaches a fill followed by a marker, leaving code_bits at 0. Any of a number of functions try to read some number of code bits from stbi__jpeg and decrease stbi__jpeg::code_bits, making it negative (e.g. -8 or -9)! The next time control returns to stbi__grow_buffer_unsafe and a byte is read that's not 0xff, the j->code_buffer |= b << (24 - j->code_bits); line left shifts by more than 32 bits.
I sort of manually patched each of the places where stbi__grow_buffer_unsafe(j); can be called followed by decreasing j->code_bits by making sure that the required number of bits were actually read. If not enough bits were read, I have the code act as if all 0s were read or return an error. This could be better - perhaps the best solution would be to implement NEXTBIT more closely and handle error propagation here? - but seems to work.
Thanks!","Update: Looks like the file causing last comment's out-of-memory issue was in fact correctly reaching the 2^30 byte PNG IDAT section limit implemented in this merge request; the fuzzer set c.length to exactly 2^30 - 1, resulting in an allocation of 2^32 bytes. This went just over libFuzzer's default limit of 2048 Mb of memory, although it didn't go much higher than that. I guess checking against the file size when we're not reading data from streams might be a good idea, though!",True,{}
nothings/stb,https://github.com/nothings/stb,1297,2022-02-23T22:02:29Z,,2022-02-27T05:00:45Z,OPEN,False,44,2,1,https://github.com/NeilBickford-NV,"Additional stb_image fixes for bugs from ossfuzz and issues 1289, 1291, 1292, and 1293",4,[],https://github.com/nothings/stb/pull/1297,https://github.com/NeilBickford-NV,5,https://github.com/nothings/stb/pull/1297#issuecomment-1051329128,"Hi stb maintainers! I went through the first ten ossfuzz issues (up to and including ossfuzz issue 38394) and put together fixes for them. About half were duplicates of previous issues, but three were new and are fixed in this PR.
I also went through the test files in issues #1289, #1291, #1292, and #1293 and fixed ASan+UBSan reports from loading those issues' repro cases which weren't already fixed by #1223 or #1230.
Here are the bugs, some quick analyses, and their fixes:
https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=22620&q=proj%3Dstb&can=2 :
This is a PNM file with specifies a width of 3333333333. Parsing this integer overflows a signed 32-bit integer.
The fix I chose isn't the most elegant: I check to see if value * 10 + (*c - 0) would overflow a signed int, and then propagate an error up two levels. This also makes loading a 0-width or 0-height PNM file more explicitly an error (previously, this would produce an error for other reasons). However, I can think of a few other good ways of fixing this (e.g. simplifying the condition by limiting the maximum size a bit further, or changing value to an unsigned int and letting later error-handing handle it.) Please let me know if you would prefer any of these other ways!
https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=32803&q=proj%3Dstb&can=2 :
The reproducer file here is a PNG file with a second IDAT chunk with a c.length of 0x68088c86. The IDAT handler increases idata_limit to fit this amount of memory, and then reallocates space for 0xcce48000 bytes, causing an ossfuzz out-of-memory error (since this is greater than ossfuzz's limit of 2560 MB). The stbi__getn call later fails.
I'm not totally sure about my fix for this one, which is to reject IDAT sections larger than 1 GiB (the ossfuzz OOM threshold is 2560 MB). Comparing against the compressed data size would be ideal - but we don't have the data size in a callback context, right?
https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=36193&q=proj%3Dstb&can=2 :
The reproducer here is a JPEG file that manages to set j->code_bits to -8 in stbi__grow_buffer_unsafe! This results in a left shift of 32 bits on a 32-bit type, which is undefined behavior. This happens by getting into a situation where code_bits is 1, but the combined length s to read is 9.
This PR checks for this situation and returns an error if it happens.
Issue #1289:
Will post analysis in issue. This PR avoids this crash by bounds-checking c.
Issue #1291, file id_000154,sig_06,src_002783+000969,time_39921237,op_splice,rep_4,trial_1492432:
Will post analysis in issue. This pull request adds checks to both the h->size[k++] loop in stbi__build_huffman and the ""DHT - define huffman table"" code to verify that writes are in-bounds.
Since creating this pull request, I also put together fixes for several other files in issues 1292 and 1293:
Issue #1292, files id_000118,sig_06,src_003303,time_27343468,op_havoc,rep_16,trial_1496823 and id_000130,sig_06,src_002266+002478,time_16238914,op_splice,rep_16,trial_1492432:
These files all produce signed integer overflows (which are undefined behavior) when decoding the DC coefficient of a JPEG block or when accumulating delta codes (i.e. in the lines data[0] = (shirt) (dc * dequant[0]);, data[0] = (short) (dc * (1 << j->succ_low));, and dc = j->img_comp[b].dc_pred + diff;). This MR adds two functions, stbi__addints_valid and stbi__mul2shorts_valid, that check for overflow of addition of two 32-bit signed ints and multiplication of two signed shorts, respectively; if there's overflow here, we return an error. These two functions are maybe a bit more complex than ideal; maybe wrapping is OK here (in which case, casting to a signed type would make the overflow defined)?
Issue #1293, files id_000115,sig_06,src_003085,time_21982593,op_havoc,rep_8,trial_1497271, id_000157,sig_06,src_003484,time_46825823,op_havoc,rep_16,trial_1492432, and id_000212,sig_06,src_005033,time_18133274,op_havoc,rep_4,trial_1499760:
These are all relatively similar to ossfuzz issue 36193 above: the decoder exhausts its code buffer, then calls stbi__grow_buffer_unsafe (which I think implements NEXTBIT in ITU-T81), which immediately reaches a fill followed by a marker, leaving code_bits at 0. Any of a number of functions try to read some number of code bits from stbi__jpeg and decrease stbi__jpeg::code_bits, making it negative (e.g. -8 or -9)! The next time control returns to stbi__grow_buffer_unsafe and a byte is read that's not 0xff, the j->code_buffer |= b << (24 - j->code_bits); line left shifts by more than 32 bits.
I sort of manually patched each of the places where stbi__grow_buffer_unsafe(j); can be called followed by decreasing j->code_bits by making sure that the required number of bits were actually read. If not enough bits were read, I have the code act as if all 0s were read or return an error. This could be better - perhaps the best solution would be to implement NEXTBIT more closely and handle error propagation here? - but seems to work.
Thanks!","One more change in this latest commit: Running libFuzzer on stbi_read_fuzzer locally, I was seeing occasional out-of-bounds errors from UndefinedBehaviorSanitizer when accessing stbi__bmask in the line
   STBI_ASSERT((((j->code_buffer) >> (32 - h->size[c])) & stbi__bmask[h->size[c]]) == h->code[c]);

Unlike the previous bugs, I wasn't able to reproduce this one when loading an individual file, since it looks like it's due to reading from an uninitialized value. Specifically, it looks like it's possible for control to reach stbi__jpeg_huff_decode without setting the values inside the stbi__huffman struct, which would normally be set inside stbi__build_huffman (called from stbi__process_marker). So, my suspicion is that this was due to how stbi__jpeg_load doesn't clear the stbi__jpeg struct it allocates; malloc probably returned a memory block that was written by an earlier file during fuzz testing, which just happens to have the right values where calling stbi__jpeg_huff_decode without building the Huffman tables first indexes out of bounds.
Calling memset(j, 0, sizeof(stbi__jpeg)); after allocating the stbi__jpeg struct appears to fix these intermittent errors. It's possible I've added it in more places than strictly necessary: it might not be necessary to zero-initialize it in stbi__jpeg_test and stbi__jpeg_info, and it might only be necessary to zero-initialize stbi__jpeg::huff_dc and stbi__jpeg::huff_ac. I decided to err on the side of caution here, but please let me know if you would like any modifications!
I've now been able to run libFuzzer through about 30 million test cases (on a branch with all 3 pull requests combined) without crashes, but will likely run libFuzzer for a few more days to see if it finds anything.",True,{}
nothings/stb,https://github.com/nothings/stb,1297,2022-02-23T22:02:29Z,,2022-02-27T05:00:45Z,OPEN,False,44,2,1,https://github.com/NeilBickford-NV,"Additional stb_image fixes for bugs from ossfuzz and issues 1289, 1291, 1292, and 1293",4,[],https://github.com/nothings/stb/pull/1297,https://github.com/nothings,6,https://github.com/nothings/stb/pull/1297#issuecomment-1051331137,"Hi stb maintainers! I went through the first ten ossfuzz issues (up to and including ossfuzz issue 38394) and put together fixes for them. About half were duplicates of previous issues, but three were new and are fixed in this PR.
I also went through the test files in issues #1289, #1291, #1292, and #1293 and fixed ASan+UBSan reports from loading those issues' repro cases which weren't already fixed by #1223 or #1230.
Here are the bugs, some quick analyses, and their fixes:
https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=22620&q=proj%3Dstb&can=2 :
This is a PNM file with specifies a width of 3333333333. Parsing this integer overflows a signed 32-bit integer.
The fix I chose isn't the most elegant: I check to see if value * 10 + (*c - 0) would overflow a signed int, and then propagate an error up two levels. This also makes loading a 0-width or 0-height PNM file more explicitly an error (previously, this would produce an error for other reasons). However, I can think of a few other good ways of fixing this (e.g. simplifying the condition by limiting the maximum size a bit further, or changing value to an unsigned int and letting later error-handing handle it.) Please let me know if you would prefer any of these other ways!
https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=32803&q=proj%3Dstb&can=2 :
The reproducer file here is a PNG file with a second IDAT chunk with a c.length of 0x68088c86. The IDAT handler increases idata_limit to fit this amount of memory, and then reallocates space for 0xcce48000 bytes, causing an ossfuzz out-of-memory error (since this is greater than ossfuzz's limit of 2560 MB). The stbi__getn call later fails.
I'm not totally sure about my fix for this one, which is to reject IDAT sections larger than 1 GiB (the ossfuzz OOM threshold is 2560 MB). Comparing against the compressed data size would be ideal - but we don't have the data size in a callback context, right?
https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=36193&q=proj%3Dstb&can=2 :
The reproducer here is a JPEG file that manages to set j->code_bits to -8 in stbi__grow_buffer_unsafe! This results in a left shift of 32 bits on a 32-bit type, which is undefined behavior. This happens by getting into a situation where code_bits is 1, but the combined length s to read is 9.
This PR checks for this situation and returns an error if it happens.
Issue #1289:
Will post analysis in issue. This PR avoids this crash by bounds-checking c.
Issue #1291, file id_000154,sig_06,src_002783+000969,time_39921237,op_splice,rep_4,trial_1492432:
Will post analysis in issue. This pull request adds checks to both the h->size[k++] loop in stbi__build_huffman and the ""DHT - define huffman table"" code to verify that writes are in-bounds.
Since creating this pull request, I also put together fixes for several other files in issues 1292 and 1293:
Issue #1292, files id_000118,sig_06,src_003303,time_27343468,op_havoc,rep_16,trial_1496823 and id_000130,sig_06,src_002266+002478,time_16238914,op_splice,rep_16,trial_1492432:
These files all produce signed integer overflows (which are undefined behavior) when decoding the DC coefficient of a JPEG block or when accumulating delta codes (i.e. in the lines data[0] = (shirt) (dc * dequant[0]);, data[0] = (short) (dc * (1 << j->succ_low));, and dc = j->img_comp[b].dc_pred + diff;). This MR adds two functions, stbi__addints_valid and stbi__mul2shorts_valid, that check for overflow of addition of two 32-bit signed ints and multiplication of two signed shorts, respectively; if there's overflow here, we return an error. These two functions are maybe a bit more complex than ideal; maybe wrapping is OK here (in which case, casting to a signed type would make the overflow defined)?
Issue #1293, files id_000115,sig_06,src_003085,time_21982593,op_havoc,rep_8,trial_1497271, id_000157,sig_06,src_003484,time_46825823,op_havoc,rep_16,trial_1492432, and id_000212,sig_06,src_005033,time_18133274,op_havoc,rep_4,trial_1499760:
These are all relatively similar to ossfuzz issue 36193 above: the decoder exhausts its code buffer, then calls stbi__grow_buffer_unsafe (which I think implements NEXTBIT in ITU-T81), which immediately reaches a fill followed by a marker, leaving code_bits at 0. Any of a number of functions try to read some number of code bits from stbi__jpeg and decrease stbi__jpeg::code_bits, making it negative (e.g. -8 or -9)! The next time control returns to stbi__grow_buffer_unsafe and a byte is read that's not 0xff, the j->code_buffer |= b << (24 - j->code_bits); line left shifts by more than 32 bits.
I sort of manually patched each of the places where stbi__grow_buffer_unsafe(j); can be called followed by decreasing j->code_bits by making sure that the required number of bits were actually read. If not enough bits were read, I have the code act as if all 0s were read or return an error. This could be better - perhaps the best solution would be to implement NEXTBIT more closely and handle error propagation here? - but seems to work.
Thanks!",it's perfectly fine to zero-initialize excessively,True,{}
nothings/stb,https://github.com/nothings/stb,1297,2022-02-23T22:02:29Z,,2022-02-27T05:00:45Z,OPEN,False,44,2,1,https://github.com/NeilBickford-NV,"Additional stb_image fixes for bugs from ossfuzz and issues 1289, 1291, 1292, and 1293",4,[],https://github.com/nothings/stb/pull/1297,https://github.com/NeilBickford-NV,7,https://github.com/nothings/stb/pull/1297#issuecomment-1051332337,"Hi stb maintainers! I went through the first ten ossfuzz issues (up to and including ossfuzz issue 38394) and put together fixes for them. About half were duplicates of previous issues, but three were new and are fixed in this PR.
I also went through the test files in issues #1289, #1291, #1292, and #1293 and fixed ASan+UBSan reports from loading those issues' repro cases which weren't already fixed by #1223 or #1230.
Here are the bugs, some quick analyses, and their fixes:
https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=22620&q=proj%3Dstb&can=2 :
This is a PNM file with specifies a width of 3333333333. Parsing this integer overflows a signed 32-bit integer.
The fix I chose isn't the most elegant: I check to see if value * 10 + (*c - 0) would overflow a signed int, and then propagate an error up two levels. This also makes loading a 0-width or 0-height PNM file more explicitly an error (previously, this would produce an error for other reasons). However, I can think of a few other good ways of fixing this (e.g. simplifying the condition by limiting the maximum size a bit further, or changing value to an unsigned int and letting later error-handing handle it.) Please let me know if you would prefer any of these other ways!
https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=32803&q=proj%3Dstb&can=2 :
The reproducer file here is a PNG file with a second IDAT chunk with a c.length of 0x68088c86. The IDAT handler increases idata_limit to fit this amount of memory, and then reallocates space for 0xcce48000 bytes, causing an ossfuzz out-of-memory error (since this is greater than ossfuzz's limit of 2560 MB). The stbi__getn call later fails.
I'm not totally sure about my fix for this one, which is to reject IDAT sections larger than 1 GiB (the ossfuzz OOM threshold is 2560 MB). Comparing against the compressed data size would be ideal - but we don't have the data size in a callback context, right?
https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=36193&q=proj%3Dstb&can=2 :
The reproducer here is a JPEG file that manages to set j->code_bits to -8 in stbi__grow_buffer_unsafe! This results in a left shift of 32 bits on a 32-bit type, which is undefined behavior. This happens by getting into a situation where code_bits is 1, but the combined length s to read is 9.
This PR checks for this situation and returns an error if it happens.
Issue #1289:
Will post analysis in issue. This PR avoids this crash by bounds-checking c.
Issue #1291, file id_000154,sig_06,src_002783+000969,time_39921237,op_splice,rep_4,trial_1492432:
Will post analysis in issue. This pull request adds checks to both the h->size[k++] loop in stbi__build_huffman and the ""DHT - define huffman table"" code to verify that writes are in-bounds.
Since creating this pull request, I also put together fixes for several other files in issues 1292 and 1293:
Issue #1292, files id_000118,sig_06,src_003303,time_27343468,op_havoc,rep_16,trial_1496823 and id_000130,sig_06,src_002266+002478,time_16238914,op_splice,rep_16,trial_1492432:
These files all produce signed integer overflows (which are undefined behavior) when decoding the DC coefficient of a JPEG block or when accumulating delta codes (i.e. in the lines data[0] = (shirt) (dc * dequant[0]);, data[0] = (short) (dc * (1 << j->succ_low));, and dc = j->img_comp[b].dc_pred + diff;). This MR adds two functions, stbi__addints_valid and stbi__mul2shorts_valid, that check for overflow of addition of two 32-bit signed ints and multiplication of two signed shorts, respectively; if there's overflow here, we return an error. These two functions are maybe a bit more complex than ideal; maybe wrapping is OK here (in which case, casting to a signed type would make the overflow defined)?
Issue #1293, files id_000115,sig_06,src_003085,time_21982593,op_havoc,rep_8,trial_1497271, id_000157,sig_06,src_003484,time_46825823,op_havoc,rep_16,trial_1492432, and id_000212,sig_06,src_005033,time_18133274,op_havoc,rep_4,trial_1499760:
These are all relatively similar to ossfuzz issue 36193 above: the decoder exhausts its code buffer, then calls stbi__grow_buffer_unsafe (which I think implements NEXTBIT in ITU-T81), which immediately reaches a fill followed by a marker, leaving code_bits at 0. Any of a number of functions try to read some number of code bits from stbi__jpeg and decrease stbi__jpeg::code_bits, making it negative (e.g. -8 or -9)! The next time control returns to stbi__grow_buffer_unsafe and a byte is read that's not 0xff, the j->code_buffer |= b << (24 - j->code_bits); line left shifts by more than 32 bits.
I sort of manually patched each of the places where stbi__grow_buffer_unsafe(j); can be called followed by decreasing j->code_bits by making sure that the required number of bits were actually read. If not enough bits were read, I have the code act as if all 0s were read or return an error. This could be better - perhaps the best solution would be to implement NEXTBIT more closely and handle error propagation here? - but seems to work.
Thanks!","Thanks, that's good to hear! I can have the fuzzer search for other cases where it winds up reading from uninitialized values and add fixes for those, if that would be good?",True,{}
nothings/stb,https://github.com/nothings/stb,1297,2022-02-23T22:02:29Z,,2022-02-27T05:00:45Z,OPEN,False,44,2,1,https://github.com/NeilBickford-NV,"Additional stb_image fixes for bugs from ossfuzz and issues 1289, 1291, 1292, and 1293",4,[],https://github.com/nothings/stb/pull/1297,https://github.com/NeilBickford-NV,8,https://github.com/nothings/stb/pull/1297#issuecomment-1051339678,"Hi stb maintainers! I went through the first ten ossfuzz issues (up to and including ossfuzz issue 38394) and put together fixes for them. About half were duplicates of previous issues, but three were new and are fixed in this PR.
I also went through the test files in issues #1289, #1291, #1292, and #1293 and fixed ASan+UBSan reports from loading those issues' repro cases which weren't already fixed by #1223 or #1230.
Here are the bugs, some quick analyses, and their fixes:
https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=22620&q=proj%3Dstb&can=2 :
This is a PNM file with specifies a width of 3333333333. Parsing this integer overflows a signed 32-bit integer.
The fix I chose isn't the most elegant: I check to see if value * 10 + (*c - 0) would overflow a signed int, and then propagate an error up two levels. This also makes loading a 0-width or 0-height PNM file more explicitly an error (previously, this would produce an error for other reasons). However, I can think of a few other good ways of fixing this (e.g. simplifying the condition by limiting the maximum size a bit further, or changing value to an unsigned int and letting later error-handing handle it.) Please let me know if you would prefer any of these other ways!
https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=32803&q=proj%3Dstb&can=2 :
The reproducer file here is a PNG file with a second IDAT chunk with a c.length of 0x68088c86. The IDAT handler increases idata_limit to fit this amount of memory, and then reallocates space for 0xcce48000 bytes, causing an ossfuzz out-of-memory error (since this is greater than ossfuzz's limit of 2560 MB). The stbi__getn call later fails.
I'm not totally sure about my fix for this one, which is to reject IDAT sections larger than 1 GiB (the ossfuzz OOM threshold is 2560 MB). Comparing against the compressed data size would be ideal - but we don't have the data size in a callback context, right?
https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=36193&q=proj%3Dstb&can=2 :
The reproducer here is a JPEG file that manages to set j->code_bits to -8 in stbi__grow_buffer_unsafe! This results in a left shift of 32 bits on a 32-bit type, which is undefined behavior. This happens by getting into a situation where code_bits is 1, but the combined length s to read is 9.
This PR checks for this situation and returns an error if it happens.
Issue #1289:
Will post analysis in issue. This PR avoids this crash by bounds-checking c.
Issue #1291, file id_000154,sig_06,src_002783+000969,time_39921237,op_splice,rep_4,trial_1492432:
Will post analysis in issue. This pull request adds checks to both the h->size[k++] loop in stbi__build_huffman and the ""DHT - define huffman table"" code to verify that writes are in-bounds.
Since creating this pull request, I also put together fixes for several other files in issues 1292 and 1293:
Issue #1292, files id_000118,sig_06,src_003303,time_27343468,op_havoc,rep_16,trial_1496823 and id_000130,sig_06,src_002266+002478,time_16238914,op_splice,rep_16,trial_1492432:
These files all produce signed integer overflows (which are undefined behavior) when decoding the DC coefficient of a JPEG block or when accumulating delta codes (i.e. in the lines data[0] = (shirt) (dc * dequant[0]);, data[0] = (short) (dc * (1 << j->succ_low));, and dc = j->img_comp[b].dc_pred + diff;). This MR adds two functions, stbi__addints_valid and stbi__mul2shorts_valid, that check for overflow of addition of two 32-bit signed ints and multiplication of two signed shorts, respectively; if there's overflow here, we return an error. These two functions are maybe a bit more complex than ideal; maybe wrapping is OK here (in which case, casting to a signed type would make the overflow defined)?
Issue #1293, files id_000115,sig_06,src_003085,time_21982593,op_havoc,rep_8,trial_1497271, id_000157,sig_06,src_003484,time_46825823,op_havoc,rep_16,trial_1492432, and id_000212,sig_06,src_005033,time_18133274,op_havoc,rep_4,trial_1499760:
These are all relatively similar to ossfuzz issue 36193 above: the decoder exhausts its code buffer, then calls stbi__grow_buffer_unsafe (which I think implements NEXTBIT in ITU-T81), which immediately reaches a fill followed by a marker, leaving code_bits at 0. Any of a number of functions try to read some number of code bits from stbi__jpeg and decrease stbi__jpeg::code_bits, making it negative (e.g. -8 or -9)! The next time control returns to stbi__grow_buffer_unsafe and a byte is read that's not 0xff, the j->code_buffer |= b << (24 - j->code_bits); line left shifts by more than 32 bits.
I sort of manually patched each of the places where stbi__grow_buffer_unsafe(j); can be called followed by decreasing j->code_bits by making sure that the required number of bits were actually read. If not enough bits were read, I have the code act as if all 0s were read or return an error. This could be better - perhaps the best solution would be to implement NEXTBIT more closely and handle error propagation here? - but seems to work.
Thanks!","Also, looks like the ossfuzz continuous integration check ran into the PNM crash from #1225 again - should I see if I can replace these 3 pull requests with a single pull request that combines them all? I think ossfuzz may well run cleanly on that. Thanks again!",True,{}
nothings/stb,https://github.com/nothings/stb,1297,2022-02-23T22:02:29Z,,2022-02-27T05:00:45Z,OPEN,False,44,2,1,https://github.com/NeilBickford-NV,"Additional stb_image fixes for bugs from ossfuzz and issues 1289, 1291, 1292, and 1293",4,[],https://github.com/nothings/stb/pull/1297,https://github.com/nothings,9,https://github.com/nothings/stb/pull/1297#issuecomment-1051359748,"Hi stb maintainers! I went through the first ten ossfuzz issues (up to and including ossfuzz issue 38394) and put together fixes for them. About half were duplicates of previous issues, but three were new and are fixed in this PR.
I also went through the test files in issues #1289, #1291, #1292, and #1293 and fixed ASan+UBSan reports from loading those issues' repro cases which weren't already fixed by #1223 or #1230.
Here are the bugs, some quick analyses, and their fixes:
https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=22620&q=proj%3Dstb&can=2 :
This is a PNM file with specifies a width of 3333333333. Parsing this integer overflows a signed 32-bit integer.
The fix I chose isn't the most elegant: I check to see if value * 10 + (*c - 0) would overflow a signed int, and then propagate an error up two levels. This also makes loading a 0-width or 0-height PNM file more explicitly an error (previously, this would produce an error for other reasons). However, I can think of a few other good ways of fixing this (e.g. simplifying the condition by limiting the maximum size a bit further, or changing value to an unsigned int and letting later error-handing handle it.) Please let me know if you would prefer any of these other ways!
https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=32803&q=proj%3Dstb&can=2 :
The reproducer file here is a PNG file with a second IDAT chunk with a c.length of 0x68088c86. The IDAT handler increases idata_limit to fit this amount of memory, and then reallocates space for 0xcce48000 bytes, causing an ossfuzz out-of-memory error (since this is greater than ossfuzz's limit of 2560 MB). The stbi__getn call later fails.
I'm not totally sure about my fix for this one, which is to reject IDAT sections larger than 1 GiB (the ossfuzz OOM threshold is 2560 MB). Comparing against the compressed data size would be ideal - but we don't have the data size in a callback context, right?
https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=36193&q=proj%3Dstb&can=2 :
The reproducer here is a JPEG file that manages to set j->code_bits to -8 in stbi__grow_buffer_unsafe! This results in a left shift of 32 bits on a 32-bit type, which is undefined behavior. This happens by getting into a situation where code_bits is 1, but the combined length s to read is 9.
This PR checks for this situation and returns an error if it happens.
Issue #1289:
Will post analysis in issue. This PR avoids this crash by bounds-checking c.
Issue #1291, file id_000154,sig_06,src_002783+000969,time_39921237,op_splice,rep_4,trial_1492432:
Will post analysis in issue. This pull request adds checks to both the h->size[k++] loop in stbi__build_huffman and the ""DHT - define huffman table"" code to verify that writes are in-bounds.
Since creating this pull request, I also put together fixes for several other files in issues 1292 and 1293:
Issue #1292, files id_000118,sig_06,src_003303,time_27343468,op_havoc,rep_16,trial_1496823 and id_000130,sig_06,src_002266+002478,time_16238914,op_splice,rep_16,trial_1492432:
These files all produce signed integer overflows (which are undefined behavior) when decoding the DC coefficient of a JPEG block or when accumulating delta codes (i.e. in the lines data[0] = (shirt) (dc * dequant[0]);, data[0] = (short) (dc * (1 << j->succ_low));, and dc = j->img_comp[b].dc_pred + diff;). This MR adds two functions, stbi__addints_valid and stbi__mul2shorts_valid, that check for overflow of addition of two 32-bit signed ints and multiplication of two signed shorts, respectively; if there's overflow here, we return an error. These two functions are maybe a bit more complex than ideal; maybe wrapping is OK here (in which case, casting to a signed type would make the overflow defined)?
Issue #1293, files id_000115,sig_06,src_003085,time_21982593,op_havoc,rep_8,trial_1497271, id_000157,sig_06,src_003484,time_46825823,op_havoc,rep_16,trial_1492432, and id_000212,sig_06,src_005033,time_18133274,op_havoc,rep_4,trial_1499760:
These are all relatively similar to ossfuzz issue 36193 above: the decoder exhausts its code buffer, then calls stbi__grow_buffer_unsafe (which I think implements NEXTBIT in ITU-T81), which immediately reaches a fill followed by a marker, leaving code_bits at 0. Any of a number of functions try to read some number of code bits from stbi__jpeg and decrease stbi__jpeg::code_bits, making it negative (e.g. -8 or -9)! The next time control returns to stbi__grow_buffer_unsafe and a byte is read that's not 0xff, the j->code_buffer |= b << (24 - j->code_bits); line left shifts by more than 32 bits.
I sort of manually patched each of the places where stbi__grow_buffer_unsafe(j); can be called followed by decreasing j->code_bits by making sure that the required number of bits were actually read. If not enough bits were read, I have the code act as if all 0s were read or return an error. This could be better - perhaps the best solution would be to implement NEXTBIT more closely and handle error propagation here? - but seems to work.
Thanks!","should I see if I can replace these 3 pull requests with a single pull request that combines them all?

Whatever is easiest or best for you; I tend to process PRs in batches anyway, so it doesn't matter too much to me.",True,{}
nothings/stb,https://github.com/nothings/stb,1297,2022-02-23T22:02:29Z,,2022-02-27T05:00:45Z,OPEN,False,44,2,1,https://github.com/NeilBickford-NV,"Additional stb_image fixes for bugs from ossfuzz and issues 1289, 1291, 1292, and 1293",4,[],https://github.com/nothings/stb/pull/1297,https://github.com/NeilBickford-NV,10,https://github.com/nothings/stb/pull/1297#issuecomment-1053136629,"Hi stb maintainers! I went through the first ten ossfuzz issues (up to and including ossfuzz issue 38394) and put together fixes for them. About half were duplicates of previous issues, but three were new and are fixed in this PR.
I also went through the test files in issues #1289, #1291, #1292, and #1293 and fixed ASan+UBSan reports from loading those issues' repro cases which weren't already fixed by #1223 or #1230.
Here are the bugs, some quick analyses, and their fixes:
https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=22620&q=proj%3Dstb&can=2 :
This is a PNM file with specifies a width of 3333333333. Parsing this integer overflows a signed 32-bit integer.
The fix I chose isn't the most elegant: I check to see if value * 10 + (*c - 0) would overflow a signed int, and then propagate an error up two levels. This also makes loading a 0-width or 0-height PNM file more explicitly an error (previously, this would produce an error for other reasons). However, I can think of a few other good ways of fixing this (e.g. simplifying the condition by limiting the maximum size a bit further, or changing value to an unsigned int and letting later error-handing handle it.) Please let me know if you would prefer any of these other ways!
https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=32803&q=proj%3Dstb&can=2 :
The reproducer file here is a PNG file with a second IDAT chunk with a c.length of 0x68088c86. The IDAT handler increases idata_limit to fit this amount of memory, and then reallocates space for 0xcce48000 bytes, causing an ossfuzz out-of-memory error (since this is greater than ossfuzz's limit of 2560 MB). The stbi__getn call later fails.
I'm not totally sure about my fix for this one, which is to reject IDAT sections larger than 1 GiB (the ossfuzz OOM threshold is 2560 MB). Comparing against the compressed data size would be ideal - but we don't have the data size in a callback context, right?
https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=36193&q=proj%3Dstb&can=2 :
The reproducer here is a JPEG file that manages to set j->code_bits to -8 in stbi__grow_buffer_unsafe! This results in a left shift of 32 bits on a 32-bit type, which is undefined behavior. This happens by getting into a situation where code_bits is 1, but the combined length s to read is 9.
This PR checks for this situation and returns an error if it happens.
Issue #1289:
Will post analysis in issue. This PR avoids this crash by bounds-checking c.
Issue #1291, file id_000154,sig_06,src_002783+000969,time_39921237,op_splice,rep_4,trial_1492432:
Will post analysis in issue. This pull request adds checks to both the h->size[k++] loop in stbi__build_huffman and the ""DHT - define huffman table"" code to verify that writes are in-bounds.
Since creating this pull request, I also put together fixes for several other files in issues 1292 and 1293:
Issue #1292, files id_000118,sig_06,src_003303,time_27343468,op_havoc,rep_16,trial_1496823 and id_000130,sig_06,src_002266+002478,time_16238914,op_splice,rep_16,trial_1492432:
These files all produce signed integer overflows (which are undefined behavior) when decoding the DC coefficient of a JPEG block or when accumulating delta codes (i.e. in the lines data[0] = (shirt) (dc * dequant[0]);, data[0] = (short) (dc * (1 << j->succ_low));, and dc = j->img_comp[b].dc_pred + diff;). This MR adds two functions, stbi__addints_valid and stbi__mul2shorts_valid, that check for overflow of addition of two 32-bit signed ints and multiplication of two signed shorts, respectively; if there's overflow here, we return an error. These two functions are maybe a bit more complex than ideal; maybe wrapping is OK here (in which case, casting to a signed type would make the overflow defined)?
Issue #1293, files id_000115,sig_06,src_003085,time_21982593,op_havoc,rep_8,trial_1497271, id_000157,sig_06,src_003484,time_46825823,op_havoc,rep_16,trial_1492432, and id_000212,sig_06,src_005033,time_18133274,op_havoc,rep_4,trial_1499760:
These are all relatively similar to ossfuzz issue 36193 above: the decoder exhausts its code buffer, then calls stbi__grow_buffer_unsafe (which I think implements NEXTBIT in ITU-T81), which immediately reaches a fill followed by a marker, leaving code_bits at 0. Any of a number of functions try to read some number of code bits from stbi__jpeg and decrease stbi__jpeg::code_bits, making it negative (e.g. -8 or -9)! The next time control returns to stbi__grow_buffer_unsafe and a byte is read that's not 0xff, the j->code_buffer |= b << (24 - j->code_bits); line left shifts by more than 32 bits.
I sort of manually patched each of the places where stbi__grow_buffer_unsafe(j); can be called followed by decreasing j->code_bits by making sure that the required number of bits were actually read. If not enough bits were read, I have the code act as if all 0s were read or return an error. This could be better - perhaps the best solution would be to implement NEXTBIT more closely and handle error propagation here? - but seems to work.
Thanks!","OK! I don't have too much of a preference either way and the PRs don't conflict with each other, so I'll leave it as is.",True,{}
nothings/stb,https://github.com/nothings/stb,1299,2022-03-02T13:56:47Z,,2022-03-02T15:56:38Z,OPEN,False,6,1,1,https://github.com/jsimmons,stb_rect_pack: make rect_height_compare a stable sort,1,"['2 good-no changes needed', 'stb_rect_pack']",https://github.com/nothings/stb/pull/1299,https://github.com/jsimmons,1,https://github.com/nothings/stb/pull/1299,"stb_rect_pack was producing different results on different platforms due to differing qsort implementations.
This change uses the existing was_packed field to make the sort stable.","stb_rect_pack was producing different results on different platforms due to differing qsort implementations.
This change uses the existing was_packed field to make the sort stable.",True,{}
nothings/stb,https://github.com/nothings/stb,1299,2022-03-02T13:56:47Z,,2022-03-02T15:56:38Z,OPEN,False,6,1,1,https://github.com/jsimmons,stb_rect_pack: make rect_height_compare a stable sort,1,"['2 good-no changes needed', 'stb_rect_pack']",https://github.com/nothings/stb/pull/1299,https://github.com/nothings,2,https://github.com/nothings/stb/pull/1299#issuecomment-1057087637,"stb_rect_pack was producing different results on different platforms due to differing qsort implementations.
This change uses the existing was_packed field to make the sort stable.","ah, good call",True,{}
nothings/stb,https://github.com/nothings/stb,1306,2022-03-06T23:12:54Z,,2022-03-12T10:14:49Z,OPEN,False,78,36,11,https://github.com/artem-smotrakov,Set up CodeQL scans and fixed several numeric overflows,4,[],https://github.com/nothings/stb/pull/1306,https://github.com/artem-smotrakov,1,https://github.com/nothings/stb/pull/1306,"I'd like to suggest setting CodeQL scans for stb. CodeQL is a static-analysis engine that can help with detecting security and other issues. It can be easily run in a GitHub workflow. The suggested config runs scans on PRs and the main branch. Findings are going to be posted as comments in pull requests.
CodeQL reported several findings, mostly multiplication overflows and one suspicious check for pointer overflow. I've tried to fix them but this definitely needs a review because I have not writtten C code for a long time :)
I also noticed that make -C tests all fails because the tests still use stb_perlin.h. I've updated the tests, otherwise CodeQL jobs would fail.","I'd like to suggest setting CodeQL scans for stb. CodeQL is a static-analysis engine that can help with detecting security and other issues. It can be easily run in a GitHub workflow. The suggested config runs scans on PRs and the main branch. Findings are going to be posted as comments in pull requests.
CodeQL reported several findings, mostly multiplication overflows and one suspicious check for pointer overflow. I've tried to fix them but this definitely needs a review because I have not writtten C code for a long time :)
I also noticed that make -C tests all fails because the tests still use stb_perlin.h. I've updated the tests, otherwise CodeQL jobs would fail.",True,{}
nothings/stb,https://github.com/nothings/stb,1306,2022-03-06T23:12:54Z,,2022-03-12T10:14:49Z,OPEN,False,78,36,11,https://github.com/artem-smotrakov,Set up CodeQL scans and fixed several numeric overflows,4,[],https://github.com/nothings/stb/pull/1306,https://github.com/nothings,2,https://github.com/nothings/stb/pull/1306#issuecomment-1060109115,"I'd like to suggest setting CodeQL scans for stb. CodeQL is a static-analysis engine that can help with detecting security and other issues. It can be easily run in a GitHub workflow. The suggested config runs scans on PRs and the main branch. Findings are going to be posted as comments in pull requests.
CodeQL reported several findings, mostly multiplication overflows and one suspicious check for pointer overflow. I've tried to fix them but this definitely needs a review because I have not writtten C code for a long time :)
I also noticed that make -C tests all fails because the tests still use stb_perlin.h. I've updated the tests, otherwise CodeQL jobs would fail.","the perlin noise patent expired, so stb_perlin is coming back, so that's why nothing else involving it was changed",True,{'THUMBS_UP': ['https://github.com/artem-smotrakov']}
nothings/stb,https://github.com/nothings/stb,1306,2022-03-06T23:12:54Z,,2022-03-12T10:14:49Z,OPEN,False,78,36,11,https://github.com/artem-smotrakov,Set up CodeQL scans and fixed several numeric overflows,4,[],https://github.com/nothings/stb/pull/1306,https://github.com/artem-smotrakov,3,https://github.com/nothings/stb/pull/1306#issuecomment-1060358704,"I'd like to suggest setting CodeQL scans for stb. CodeQL is a static-analysis engine that can help with detecting security and other issues. It can be easily run in a GitHub workflow. The suggested config runs scans on PRs and the main branch. Findings are going to be posted as comments in pull requests.
CodeQL reported several findings, mostly multiplication overflows and one suspicious check for pointer overflow. I've tried to fix them but this definitely needs a review because I have not writtten C code for a long time :)
I also noticed that make -C tests all fails because the tests still use stb_perlin.h. I've updated the tests, otherwise CodeQL jobs would fail.","the perlin noise patent expired, so stb_perlin is coming back, so that's why nothing else involving it was changed

Then, I think, test_perlin.c can be just temporarily removed fromMakefile.",True,{}
nothings/stb,https://github.com/nothings/stb,1306,2022-03-06T23:12:54Z,,2022-03-12T10:14:49Z,OPEN,False,78,36,11,https://github.com/artem-smotrakov,Set up CodeQL scans and fixed several numeric overflows,4,[],https://github.com/nothings/stb/pull/1306,https://github.com/artem-smotrakov,4,https://github.com/nothings/stb/pull/1306#issuecomment-1065856373,"I'd like to suggest setting CodeQL scans for stb. CodeQL is a static-analysis engine that can help with detecting security and other issues. It can be easily run in a GitHub workflow. The suggested config runs scans on PRs and the main branch. Findings are going to be posted as comments in pull requests.
CodeQL reported several findings, mostly multiplication overflows and one suspicious check for pointer overflow. I've tried to fix them but this definitely needs a review because I have not writtten C code for a long time :)
I also noticed that make -C tests all fails because the tests still use stb_perlin.h. I've updated the tests, otherwise CodeQL jobs would fail.",I've restored test_perlin.c and commented out stb_perlin.h.,True,{}
nothings/stb,https://github.com/nothings/stb,1310,2022-03-12T11:03:30Z,,2022-03-12T11:03:30Z,OPEN,False,4,1,1,https://github.com/N-R-K,stb_include: close file if malloc fails,1,[],https://github.com/nothings/stb/pull/1310,https://github.com/N-R-K,1,https://github.com/nothings/stb/pull/1310,,,True,{}
nothings/stb,https://github.com/nothings/stb,1311,2022-03-13T07:49:20Z,,2022-03-16T15:35:55Z,OPEN,False,16,8,1,https://github.com/N-R-K,stb_image_write: silence C++ warnings for = {0},1,[],https://github.com/nothings/stb/pull/1311,https://github.com/N-R-K,1,https://github.com/nothings/stb/pull/1311,"Closes: #1099

Grep finds a couple more instances of { 0 } being used:
$ grep -Hnr --exclude-dir=tests --exclude-dir=.git --exclude-dir=deprecated -E ""\{ ?0 ?}""
stb_vorbis.c:5137:   { 0 },
stb_vorbis.c:5248:      static int channel_selector[3][2] = { {0}, {PLAYBACK_MONO}, {PLAYBACK_LEFT, PLAYBACK_RIGHT} };
stb_voxel_render.h:2044:   stbvox_mesh_face face_data = { 0 };
stb_voxel_render.h:2683:   stbvox_mesh_vertex p1[4] = { 0 };
stb_ds.h:481:// this is a simple string arena allocator, initialize with e.g. 'stbds_string_arena my_arena={0}'.
stb_ds.h:764:  stbds_array_header temp={0}; // force debugging
stb_ds.h:1662:  stbds_string_arena                        sa      = { 0 };
stb_image.h:5026:   stbi_uc has_trans=0, tc[3]={0};
stb_image.h:5815:   unsigned char raw_data[4] = {0};
stb_herringbone_wang_tile.h:877:   stbhw_config c = { 0 };
stb_herringbone_wang_tile.h:878:   stbhw__process p = { 0 };
stb_connected_components.h:415:   unsigned char num_adj[STBCC__MAX_CLUMPS_PER_CLUSTER] = { 0 };
stb_connected_components.h:713:   unsigned char connected[STBCC__MAX_EDGE_CLUMPS_PER_CLUSTER][STBCC__MAX_EDGE_CLUMPS_PER_CLUSTER/8] = { { 0 } };
stb_connected_components.h:777:   unsigned char disconnected[STBCC__MAX_EDGE_CLUMPS_PER_CLUSTER][STBCC__MAX_EDGE_CLUMPS_PER_CLUSTER/8] = { { 0 } };
Fixing them should be the same as this PR, should I go ahead and update those too?","Closes: #1099

Grep finds a couple more instances of { 0 } being used:
$ grep -Hnr --exclude-dir=tests --exclude-dir=.git --exclude-dir=deprecated -E ""\{ ?0 ?}""
stb_vorbis.c:5137:   { 0 },
stb_vorbis.c:5248:      static int channel_selector[3][2] = { {0}, {PLAYBACK_MONO}, {PLAYBACK_LEFT, PLAYBACK_RIGHT} };
stb_voxel_render.h:2044:   stbvox_mesh_face face_data = { 0 };
stb_voxel_render.h:2683:   stbvox_mesh_vertex p1[4] = { 0 };
stb_ds.h:481:// this is a simple string arena allocator, initialize with e.g. 'stbds_string_arena my_arena={0}'.
stb_ds.h:764:  stbds_array_header temp={0}; // force debugging
stb_ds.h:1662:  stbds_string_arena                        sa      = { 0 };
stb_image.h:5026:   stbi_uc has_trans=0, tc[3]={0};
stb_image.h:5815:   unsigned char raw_data[4] = {0};
stb_herringbone_wang_tile.h:877:   stbhw_config c = { 0 };
stb_herringbone_wang_tile.h:878:   stbhw__process p = { 0 };
stb_connected_components.h:415:   unsigned char num_adj[STBCC__MAX_CLUMPS_PER_CLUSTER] = { 0 };
stb_connected_components.h:713:   unsigned char connected[STBCC__MAX_EDGE_CLUMPS_PER_CLUSTER][STBCC__MAX_EDGE_CLUMPS_PER_CLUSTER/8] = { { 0 } };
stb_connected_components.h:777:   unsigned char disconnected[STBCC__MAX_EDGE_CLUMPS_PER_CLUSTER][STBCC__MAX_EDGE_CLUMPS_PER_CLUSTER/8] = { { 0 } };
Fixing them should be the same as this PR, should I go ahead and update those too?",True,{}
nothings/stb,https://github.com/nothings/stb,1311,2022-03-13T07:49:20Z,,2022-03-16T15:35:55Z,OPEN,False,16,8,1,https://github.com/N-R-K,stb_image_write: silence C++ warnings for = {0},1,[],https://github.com/nothings/stb/pull/1311,https://github.com/nothings,2,https://github.com/nothings/stb/pull/1311#issuecomment-1066108586,"Closes: #1099

Grep finds a couple more instances of { 0 } being used:
$ grep -Hnr --exclude-dir=tests --exclude-dir=.git --exclude-dir=deprecated -E ""\{ ?0 ?}""
stb_vorbis.c:5137:   { 0 },
stb_vorbis.c:5248:      static int channel_selector[3][2] = { {0}, {PLAYBACK_MONO}, {PLAYBACK_LEFT, PLAYBACK_RIGHT} };
stb_voxel_render.h:2044:   stbvox_mesh_face face_data = { 0 };
stb_voxel_render.h:2683:   stbvox_mesh_vertex p1[4] = { 0 };
stb_ds.h:481:// this is a simple string arena allocator, initialize with e.g. 'stbds_string_arena my_arena={0}'.
stb_ds.h:764:  stbds_array_header temp={0}; // force debugging
stb_ds.h:1662:  stbds_string_arena                        sa      = { 0 };
stb_image.h:5026:   stbi_uc has_trans=0, tc[3]={0};
stb_image.h:5815:   unsigned char raw_data[4] = {0};
stb_herringbone_wang_tile.h:877:   stbhw_config c = { 0 };
stb_herringbone_wang_tile.h:878:   stbhw__process p = { 0 };
stb_connected_components.h:415:   unsigned char num_adj[STBCC__MAX_CLUMPS_PER_CLUSTER] = { 0 };
stb_connected_components.h:713:   unsigned char connected[STBCC__MAX_EDGE_CLUMPS_PER_CLUSTER][STBCC__MAX_EDGE_CLUMPS_PER_CLUSTER/8] = { { 0 } };
stb_connected_components.h:777:   unsigned char disconnected[STBCC__MAX_EDGE_CLUMPS_PER_CLUSTER][STBCC__MAX_EDGE_CLUMPS_PER_CLUSTER/8] = { { 0 } };
Fixing them should be the same as this PR, should I go ahead and update those too?","We didn't really resolve this in #1099. I'm not a big fan of using memset() because it's ugly, but I'm not really a big fan of ZERO_INIT because it introduces the #ifdef. I mean, I understand it's harmless, it's just ugly in its own way.
If we did take this PR, it needs to be STBIW_ZERO_INIT and etc. for each library, so they don't interfere if the user has ""ZERO_INIT"" in their code with some other meaning. (And simply #undefing at the end isn't sufficient, since they could #define it before including us.)",True,{}
nothings/stb,https://github.com/nothings/stb,1311,2022-03-13T07:49:20Z,,2022-03-16T15:35:55Z,OPEN,False,16,8,1,https://github.com/N-R-K,stb_image_write: silence C++ warnings for = {0},1,[],https://github.com/nothings/stb/pull/1311,https://github.com/N-R-K,3,https://github.com/nothings/stb/pull/1311#issuecomment-1066110695,"Closes: #1099

Grep finds a couple more instances of { 0 } being used:
$ grep -Hnr --exclude-dir=tests --exclude-dir=.git --exclude-dir=deprecated -E ""\{ ?0 ?}""
stb_vorbis.c:5137:   { 0 },
stb_vorbis.c:5248:      static int channel_selector[3][2] = { {0}, {PLAYBACK_MONO}, {PLAYBACK_LEFT, PLAYBACK_RIGHT} };
stb_voxel_render.h:2044:   stbvox_mesh_face face_data = { 0 };
stb_voxel_render.h:2683:   stbvox_mesh_vertex p1[4] = { 0 };
stb_ds.h:481:// this is a simple string arena allocator, initialize with e.g. 'stbds_string_arena my_arena={0}'.
stb_ds.h:764:  stbds_array_header temp={0}; // force debugging
stb_ds.h:1662:  stbds_string_arena                        sa      = { 0 };
stb_image.h:5026:   stbi_uc has_trans=0, tc[3]={0};
stb_image.h:5815:   unsigned char raw_data[4] = {0};
stb_herringbone_wang_tile.h:877:   stbhw_config c = { 0 };
stb_herringbone_wang_tile.h:878:   stbhw__process p = { 0 };
stb_connected_components.h:415:   unsigned char num_adj[STBCC__MAX_CLUMPS_PER_CLUSTER] = { 0 };
stb_connected_components.h:713:   unsigned char connected[STBCC__MAX_EDGE_CLUMPS_PER_CLUSTER][STBCC__MAX_EDGE_CLUMPS_PER_CLUSTER/8] = { { 0 } };
stb_connected_components.h:777:   unsigned char disconnected[STBCC__MAX_EDGE_CLUMPS_PER_CLUSTER][STBCC__MAX_EDGE_CLUMPS_PER_CLUSTER/8] = { { 0 } };
Fixing them should be the same as this PR, should I go ahead and update those too?","I'm not a big fan of using memset() because it's ugly, but I'm not really a big fan of ZERO_INIT because it introduces the #ifdef. I mean, I understand it's harmless, it's just ugly in its own way.

I agree actually.

If we did take this PR, it needs to be STBIW_ZERO_INIT and etc. for each library, so they don't interfere if the user has ""ZERO_INIT"" in their code with some other meaning.

That's true. I'll wait until you make up your mind on it before updating the PR then.
NB: I'm fine if this is rejected, only opened it because you agreed to use memset() which I think is more ugly than the macro.",True,{}
nothings/stb,https://github.com/nothings/stb,1311,2022-03-13T07:49:20Z,,2022-03-16T15:35:55Z,OPEN,False,16,8,1,https://github.com/N-R-K,stb_image_write: silence C++ warnings for = {0},1,[],https://github.com/nothings/stb/pull/1311,https://github.com/N-R-K,4,https://github.com/nothings/stb/pull/1311#issuecomment-1066125506,"Closes: #1099

Grep finds a couple more instances of { 0 } being used:
$ grep -Hnr --exclude-dir=tests --exclude-dir=.git --exclude-dir=deprecated -E ""\{ ?0 ?}""
stb_vorbis.c:5137:   { 0 },
stb_vorbis.c:5248:      static int channel_selector[3][2] = { {0}, {PLAYBACK_MONO}, {PLAYBACK_LEFT, PLAYBACK_RIGHT} };
stb_voxel_render.h:2044:   stbvox_mesh_face face_data = { 0 };
stb_voxel_render.h:2683:   stbvox_mesh_vertex p1[4] = { 0 };
stb_ds.h:481:// this is a simple string arena allocator, initialize with e.g. 'stbds_string_arena my_arena={0}'.
stb_ds.h:764:  stbds_array_header temp={0}; // force debugging
stb_ds.h:1662:  stbds_string_arena                        sa      = { 0 };
stb_image.h:5026:   stbi_uc has_trans=0, tc[3]={0};
stb_image.h:5815:   unsigned char raw_data[4] = {0};
stb_herringbone_wang_tile.h:877:   stbhw_config c = { 0 };
stb_herringbone_wang_tile.h:878:   stbhw__process p = { 0 };
stb_connected_components.h:415:   unsigned char num_adj[STBCC__MAX_CLUMPS_PER_CLUSTER] = { 0 };
stb_connected_components.h:713:   unsigned char connected[STBCC__MAX_EDGE_CLUMPS_PER_CLUSTER][STBCC__MAX_EDGE_CLUMPS_PER_CLUSTER/8] = { { 0 } };
stb_connected_components.h:777:   unsigned char disconnected[STBCC__MAX_EDGE_CLUMPS_PER_CLUSTER][STBCC__MAX_EDGE_CLUMPS_PER_CLUSTER/8] = { { 0 } };
Fixing them should be the same as this PR, should I go ahead and update those too?","Updated to using memset(), compiles fine on both gcc and clang without any warnings with -Wall -Wextra -Wmissing-field-initializers.",True,{}
nothings/stb,https://github.com/nothings/stb,1311,2022-03-13T07:49:20Z,,2022-03-16T15:35:55Z,OPEN,False,16,8,1,https://github.com/N-R-K,stb_image_write: silence C++ warnings for = {0},1,[],https://github.com/nothings/stb/pull/1311,https://github.com/Sokolmish,5,https://github.com/nothings/stb/pull/1311#issuecomment-1069229717,"Closes: #1099

Grep finds a couple more instances of { 0 } being used:
$ grep -Hnr --exclude-dir=tests --exclude-dir=.git --exclude-dir=deprecated -E ""\{ ?0 ?}""
stb_vorbis.c:5137:   { 0 },
stb_vorbis.c:5248:      static int channel_selector[3][2] = { {0}, {PLAYBACK_MONO}, {PLAYBACK_LEFT, PLAYBACK_RIGHT} };
stb_voxel_render.h:2044:   stbvox_mesh_face face_data = { 0 };
stb_voxel_render.h:2683:   stbvox_mesh_vertex p1[4] = { 0 };
stb_ds.h:481:// this is a simple string arena allocator, initialize with e.g. 'stbds_string_arena my_arena={0}'.
stb_ds.h:764:  stbds_array_header temp={0}; // force debugging
stb_ds.h:1662:  stbds_string_arena                        sa      = { 0 };
stb_image.h:5026:   stbi_uc has_trans=0, tc[3]={0};
stb_image.h:5815:   unsigned char raw_data[4] = {0};
stb_herringbone_wang_tile.h:877:   stbhw_config c = { 0 };
stb_herringbone_wang_tile.h:878:   stbhw__process p = { 0 };
stb_connected_components.h:415:   unsigned char num_adj[STBCC__MAX_CLUMPS_PER_CLUSTER] = { 0 };
stb_connected_components.h:713:   unsigned char connected[STBCC__MAX_EDGE_CLUMPS_PER_CLUSTER][STBCC__MAX_EDGE_CLUMPS_PER_CLUSTER/8] = { { 0 } };
stb_connected_components.h:777:   unsigned char disconnected[STBCC__MAX_EDGE_CLUMPS_PER_CLUSTER][STBCC__MAX_EDGE_CLUMPS_PER_CLUSTER/8] = { { 0 } };
Fixing them should be the same as this PR, should I go ahead and update those too?","There are also several places where such initializer is used:

stb_ds.h in line 764 (also, I don't know for what purpose this variable is used here).
stb_image.h in lines 5026 and 5815.",True,{}
nothings/stb,https://github.com/nothings/stb,1311,2022-03-13T07:49:20Z,,2022-03-16T15:35:55Z,OPEN,False,16,8,1,https://github.com/N-R-K,stb_image_write: silence C++ warnings for = {0},1,[],https://github.com/nothings/stb/pull/1311,https://github.com/N-R-K,6,https://github.com/nothings/stb/pull/1311#issuecomment-1069266460,"Closes: #1099

Grep finds a couple more instances of { 0 } being used:
$ grep -Hnr --exclude-dir=tests --exclude-dir=.git --exclude-dir=deprecated -E ""\{ ?0 ?}""
stb_vorbis.c:5137:   { 0 },
stb_vorbis.c:5248:      static int channel_selector[3][2] = { {0}, {PLAYBACK_MONO}, {PLAYBACK_LEFT, PLAYBACK_RIGHT} };
stb_voxel_render.h:2044:   stbvox_mesh_face face_data = { 0 };
stb_voxel_render.h:2683:   stbvox_mesh_vertex p1[4] = { 0 };
stb_ds.h:481:// this is a simple string arena allocator, initialize with e.g. 'stbds_string_arena my_arena={0}'.
stb_ds.h:764:  stbds_array_header temp={0}; // force debugging
stb_ds.h:1662:  stbds_string_arena                        sa      = { 0 };
stb_image.h:5026:   stbi_uc has_trans=0, tc[3]={0};
stb_image.h:5815:   unsigned char raw_data[4] = {0};
stb_herringbone_wang_tile.h:877:   stbhw_config c = { 0 };
stb_herringbone_wang_tile.h:878:   stbhw__process p = { 0 };
stb_connected_components.h:415:   unsigned char num_adj[STBCC__MAX_CLUMPS_PER_CLUSTER] = { 0 };
stb_connected_components.h:713:   unsigned char connected[STBCC__MAX_EDGE_CLUMPS_PER_CLUSTER][STBCC__MAX_EDGE_CLUMPS_PER_CLUSTER/8] = { { 0 } };
stb_connected_components.h:777:   unsigned char disconnected[STBCC__MAX_EDGE_CLUMPS_PER_CLUSTER][STBCC__MAX_EDGE_CLUMPS_PER_CLUSTER/8] = { { 0 } };
Fixing them should be the same as this PR, should I go ahead and update those too?","There are also several places where such initializer is used:
* stb_ds.h in line [764](https://github.com/nothings/stb/blob/af1a5bc352164740c1cc1354942b1c6b72eacb8a/stb_ds.h#L764) (also, I don't know for what purpose this variable is used here).

* stb_image.h in lines [5026](https://github.com/nothings/stb/blob/af1a5bc352164740c1cc1354942b1c6b72eacb8a/stb_image.h#L5026) and [5815](https://github.com/nothings/stb/blob/af1a5bc352164740c1cc1354942b1c6b72eacb8a/stb_image.h#L5815).


Thanks, I updated the list in #1311 (comment) along with the grep expression to catch {0} (no spaces between braces and zero) as well.",True,{}
nothings/stb,https://github.com/nothings/stb,1312,2022-03-16T03:34:30Z,,2022-03-16T04:55:50Z,OPEN,False,3,3,1,https://github.com/AliceLR,stb_vorbis: extend Mapping submap_floor and submap_residue.,1,"['1 stb_vorbis', '2 good-no changes needed', '2 bug w/ repro']",https://github.com/nothings/stb/pull/1312,https://github.com/AliceLR,1,https://github.com/nothings/stb/pull/1312,"The submap arrays in Mapping are size 15, but should be size 16. The number of submap entries is in the range [1,16] and the mux values that these arrays are indexed by are in the range [0,15], as long as they are less than the submap count. Per the Vorbis spec, these ranges are correct, and nothing indicates that submap 15 should be considered invalid.
Also moves Mapping::chan to the front of Mapping to reduce the padding overhead of this struct to what it was before expanding the submap arrays.
Found with clang's UndefinedBehaviorSanitizer. Load any of these fuzz files in an stb_vorbis build with UndefinedBehaviorSanitizer enabled, and errors similar to the following should be generated:
stb_vorbis.c:4128:10: runtime error: index 15 out of bounds for type 'uint8 [15]'
SUMMARY: UndefinedBehaviorSanitizer: undefined-behavior stb_vorbis.c:4128:10 in 
stb_vorbis.c:4129:10: runtime error: index 15 out of bounds for type 'uint8 [15]'
SUMMARY: UndefinedBehaviorSanitizer: undefined-behavior stb_vorbis.c:4129:10 in 
stb_vorbis.c:4130:14: runtime error: index 15 out of bounds for type 'uint8 [15]'
SUMMARY: UndefinedBehaviorSanitizer: undefined-behavior stb_vorbis.c:4130:14 in 
stb_vorbis.c:4131:14: runtime error: index 15 out of bounds for type 'uint8 [15]'
SUMMARY: UndefinedBehaviorSanitizer: undefined-behavior stb_vorbis.c:4131:14 in 

OGG_submap_15.tar.gz","The submap arrays in Mapping are size 15, but should be size 16. The number of submap entries is in the range [1,16] and the mux values that these arrays are indexed by are in the range [0,15], as long as they are less than the submap count. Per the Vorbis spec, these ranges are correct, and nothing indicates that submap 15 should be considered invalid.
Also moves Mapping::chan to the front of Mapping to reduce the padding overhead of this struct to what it was before expanding the submap arrays.
Found with clang's UndefinedBehaviorSanitizer. Load any of these fuzz files in an stb_vorbis build with UndefinedBehaviorSanitizer enabled, and errors similar to the following should be generated:
stb_vorbis.c:4128:10: runtime error: index 15 out of bounds for type 'uint8 [15]'
SUMMARY: UndefinedBehaviorSanitizer: undefined-behavior stb_vorbis.c:4128:10 in 
stb_vorbis.c:4129:10: runtime error: index 15 out of bounds for type 'uint8 [15]'
SUMMARY: UndefinedBehaviorSanitizer: undefined-behavior stb_vorbis.c:4129:10 in 
stb_vorbis.c:4130:14: runtime error: index 15 out of bounds for type 'uint8 [15]'
SUMMARY: UndefinedBehaviorSanitizer: undefined-behavior stb_vorbis.c:4130:14 in 
stb_vorbis.c:4131:14: runtime error: index 15 out of bounds for type 'uint8 [15]'
SUMMARY: UndefinedBehaviorSanitizer: undefined-behavior stb_vorbis.c:4131:14 in 

OGG_submap_15.tar.gz",True,{}
nothings/stb,https://github.com/nothings/stb,1319,2022-04-13T21:03:35Z,2022-04-13T22:12:48Z,2022-04-13T22:12:49Z,CLOSED,False,167,2,1,https://github.com/jbendtsen,stb_image.h: add QOI support,2,[],https://github.com/nothings/stb/pull/1319,https://github.com/jbendtsen,1,https://github.com/nothings/stb/pull/1319,"This commit adds support for loading QOI images with stb_image.h. Not sure if this is on the cards right now, given that QOI isn't too time-consuming to implement for one's own projects, and that several libraries already exist that support it. If not, feel free to ignore this PR - at the very least it was a fun exercise!","This commit adds support for loading QOI images with stb_image.h. Not sure if this is on the cards right now, given that QOI isn't too time-consuming to implement for one's own projects, and that several libraries already exist that support it. If not, feel free to ignore this PR - at the very least it was a fun exercise!",True,{}
nothings/stb,https://github.com/nothings/stb,1319,2022-04-13T21:03:35Z,2022-04-13T22:12:48Z,2022-04-13T22:12:49Z,CLOSED,False,167,2,1,https://github.com/jbendtsen,stb_image.h: add QOI support,2,[],https://github.com/nothings/stb/pull/1319,https://github.com/nothings,2,https://github.com/nothings/stb/pull/1319#issuecomment-1098533907,"This commit adds support for loading QOI images with stb_image.h. Not sure if this is on the cards right now, given that QOI isn't too time-consuming to implement for one's own projects, and that several libraries already exist that support it. If not, feel free to ignore this PR - at the very least it was a fun exercise!",We are not accepting any new image formats for stb_image for security reasons.,True,{}
nothings/stb,https://github.com/nothings/stb,1320,2022-04-14T14:11:47Z,,2022-04-14T14:11:47Z,OPEN,False,2,0,1,https://github.com/x2w-sloth,stb_truetype: allow user defined STBTT_DEF,1,[],https://github.com/nothings/stb/pull/1320,https://github.com/x2w-sloth,1,https://github.com/nothings/stb/pull/1320,"Allow users to define their own STBTT_DEF.
Other headers such as stb_image.h and stb_image_write.h have a similar
mechanism. I ran into a ""STBTT_DEF redefined"" compiler warning and
figured that stb_truetype.h does not check if STBTT_DEF is defined.","Allow users to define their own STBTT_DEF.
Other headers such as stb_image.h and stb_image_write.h have a similar
mechanism. I ran into a ""STBTT_DEF redefined"" compiler warning and
figured that stb_truetype.h does not check if STBTT_DEF is defined.",True,{}
nothings/stb,https://github.com/nothings/stb,1322,2022-04-19T18:21:55Z,,2022-04-19T20:04:50Z,OPEN,False,1,1,1,https://github.com/mupfdev,"Provide type definitions for Symbian OS/EPOC, #1321",2,"['2 bug', '1 stb_image', '2 good-no changes needed']",https://github.com/nothings/stb/pull/1322,https://github.com/mupfdev,1,https://github.com/nothings/stb/pull/1322,"The Symbian S60v1 SDK does not provide stdint.h.
This additional preprocessor definition ensures that the required types are provided so that stb_image.h also compiles on this legacy system.
This modification is intended for use with the N-Gage SDK.-project.
No additional credit required.","The Symbian S60v1 SDK does not provide stdint.h.
This additional preprocessor definition ensures that the required types are provided so that stb_image.h also compiles on this legacy system.
This modification is intended for use with the N-Gage SDK.-project.
No additional credit required.",True,{}
nothings/stb,https://github.com/nothings/stb,1322,2022-04-19T18:21:55Z,,2022-04-19T20:04:50Z,OPEN,False,1,1,1,https://github.com/mupfdev,"Provide type definitions for Symbian OS/EPOC, #1321",2,"['2 bug', '1 stb_image', '2 good-no changes needed']",https://github.com/nothings/stb/pull/1322,https://github.com/nothings,2,https://github.com/nothings/stb/pull/1322#issuecomment-1102957199,"The Symbian S60v1 SDK does not provide stdint.h.
This additional preprocessor definition ensures that the required types are provided so that stb_image.h also compiles on this legacy system.
This modification is intended for use with the N-Gage SDK.-project.
No additional credit required.",Can you make both defined() tests have parentheses so it's consistent?,True,{'THUMBS_UP': ['https://github.com/mupfdev']}
nothings/stb,https://github.com/nothings/stb,1322,2022-04-19T18:21:55Z,,2022-04-19T20:04:50Z,OPEN,False,1,1,1,https://github.com/mupfdev,"Provide type definitions for Symbian OS/EPOC, #1321",2,"['2 bug', '1 stb_image', '2 good-no changes needed']",https://github.com/nothings/stb/pull/1322,https://github.com/mupfdev,3,https://github.com/nothings/stb/pull/1322#issuecomment-1103008066,"The Symbian S60v1 SDK does not provide stdint.h.
This additional preprocessor definition ensures that the required types are provided so that stb_image.h also compiles on this legacy system.
This modification is intended for use with the N-Gage SDK.-project.
No additional credit required.","There are a lot of open PRs, so I have one question: what happens next?
I have included stb as a sub-module at the moment. I guess it's worth pointing to my own fork for now?",True,{}
nothings/stb,https://github.com/nothings/stb,1322,2022-04-19T18:21:55Z,,2022-04-19T20:04:50Z,OPEN,False,1,1,1,https://github.com/mupfdev,"Provide type definitions for Symbian OS/EPOC, #1321",2,"['2 bug', '1 stb_image', '2 good-no changes needed']",https://github.com/nothings/stb/pull/1322,https://github.com/nothings,4,https://github.com/nothings/stb/pull/1322#issuecomment-1103070127,"The Symbian S60v1 SDK does not provide stdint.h.
This additional preprocessor definition ensures that the required types are provided so that stb_image.h also compiles on this legacy system.
This modification is intended for use with the N-Gage SDK.-project.
No additional credit required.","Yes, stb fixes get merged in big clumps when I feel like it, which is not very often, so waiting for fixes to be officially released is not advised.",True,{'THUMBS_UP': ['https://github.com/mupfdev']}
nothings/stb,https://github.com/nothings/stb,1324,2022-05-03T20:20:14Z,2022-05-03T20:20:34Z,2022-05-03T20:20:34Z,CLOSED,False,3,0,1,https://github.com/ei06125,Yagen/master,2,[],https://github.com/nothings/stb/pull/1324,https://github.com/ei06125,1,https://github.com/nothings/stb/pull/1324,,,True,{}
nothings/stb,https://github.com/nothings/stb,1327,2022-05-19T20:38:10Z,,2022-05-19T20:45:15Z,OPEN,False,1,1,1,https://github.com/blackbird806,Fixed missing uppercase,1,"['1 stb_truetype', '3 comment typo']",https://github.com/nothings/stb/pull/1327,https://github.com/blackbird806,1,https://github.com/nothings/stb/pull/1327,,,True,{}
nothings/stb,https://github.com/nothings/stb,1330,2022-05-22T23:17:00Z,,2022-05-22T23:22:19Z,OPEN,False,1,1,1,https://github.com/lunasorcery,stb_image: add trailing semicolon in usage example,1,"['1 stb_image', '2 good-no changes needed', '3 documentation fix', '2 add credit']",https://github.com/nothings/stb/pull/1330,https://github.com/lunasorcery,1,https://github.com/nothings/stb/pull/1330,"Tiny little one-char change to stop the basic usage example from throwing a missing-semicolon error. This one's bugged me for years, I always end up metaphorically stubbing my toe on it, each time I copy-paste the usage example into my own code.
Also wasn't sure whereabouts in the credits to put my name, or if such a tiny change even warrants it, let me know :)","Tiny little one-char change to stop the basic usage example from throwing a missing-semicolon error. This one's bugged me for years, I always end up metaphorically stubbing my toe on it, each time I copy-paste the usage example into my own code.
Also wasn't sure whereabouts in the credits to put my name, or if such a tiny change even warrants it, let me know :)",True,{}
nothings/stb,https://github.com/nothings/stb,1331,2022-05-23T15:21:29Z,,2022-05-23T17:56:09Z,OPEN,False,114,54,1,https://github.com/Wohlstand,Use 64-bit integer value for sample offsets,8,"['2 bug', '1 stb_vorbis']",https://github.com/nothings/stb/pull/1331,https://github.com/Wohlstand,1,https://github.com/nothings/stb/pull/1331,"Fixes #1329
This PR also includes code for #1295 (to don't re-do the same work another time. If merge this first, please CLOSE THE #1295)
P.S. Better squish this PR when merging.","Fixes #1329
This PR also includes code for #1295 (to don't re-do the same work another time. If merge this first, please CLOSE THE #1295)
P.S. Better squish this PR when merging.",True,{}
nothings/stb,https://github.com/nothings/stb,1333,2022-05-28T21:20:01Z,,2022-05-28T22:06:31Z,OPEN,False,3,0,1,https://github.com/BlazesRus,Documentation added to Dynamic array initialization with known initial size,2,[],https://github.com/nothings/stb/pull/1333,https://github.com/BlazesRus,1,https://github.com/nothings/stb/pull/1333,Documentation added to Dynamic array to make easier for someone to know how to use dynamic array macro,Documentation added to Dynamic array to make easier for someone to know how to use dynamic array macro,True,{}
nothings/stb,https://github.com/nothings/stb,1333,2022-05-28T21:20:01Z,,2022-05-28T22:06:31Z,OPEN,False,3,0,1,https://github.com/BlazesRus,Documentation added to Dynamic array initialization with known initial size,2,[],https://github.com/nothings/stb/pull/1333,https://github.com/nothings,2,https://github.com/nothings/stb/pull/1333#issuecomment-1140334337,Documentation added to Dynamic array to make easier for someone to know how to use dynamic array macro,"That doesn't work, as the array pointer needs to be NULL when you call arrsetlen, not undefined.",True,{}
nothings/stb,https://github.com/nothings/stb,1333,2022-05-28T21:20:01Z,,2022-05-28T22:06:31Z,OPEN,False,3,0,1,https://github.com/BlazesRus,Documentation added to Dynamic array initialization with known initial size,2,[],https://github.com/nothings/stb/pull/1333,https://github.com/BlazesRus,3,https://github.com/nothings/stb/pull/1333#issuecomment-1140335226,Documentation added to Dynamic array to make easier for someone to know how to use dynamic array macro,"Fixed it changed it to:
//Initialyze array with struct ElementType* ArrayName = NULL;
//arrsetlen(ArrayName, num_elems);
//Equavalent to ANSI C99/C89 version of struct ElementType ArrayName[num_elems];",True,{}
nothings/stb,https://github.com/nothings/stb,1333,2022-05-28T21:20:01Z,,2022-05-28T22:06:31Z,OPEN,False,3,0,1,https://github.com/BlazesRus,Documentation added to Dynamic array initialization with known initial size,2,[],https://github.com/nothings/stb/pull/1333,https://github.com/nothings,4,https://github.com/nothings/stb/pull/1333#issuecomment-1140335745,Documentation added to Dynamic array to make easier for someone to know how to use dynamic array macro,"I'm not sure how much value that explanation adds, as the standard way to create an array of N elements is push the N elements individually with arrput; arrsetlen works and is more efficient, but I'm not sure it's worth adding explicitly. Even if we did want to add this, that's probably not the right place for it, it should appear in the documentation section starting at line 69, either as an introductory thing or as part of the documentation for arrsetlen at line 134.",True,{}
