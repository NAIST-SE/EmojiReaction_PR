heimdal/heimdal,https://github.com/heimdal/heimdal,161,2016-03-09T19:13:54Z,2016-11-10T09:45:07Z,2021-07-30T14:36:48Z,MERGED,True,13,5,1,https://github.com/elric1,Fix bias in ordering SRV RR results by weight.,2,[],https://github.com/heimdal/heimdal/pull/161,https://github.com/elric1,1,https://github.com/heimdal/heimdal/pull/161,"In lib/roken/resolve.c, we find rk_dns_srv_order() which re-orders
the results of an SRV RR lookup by the algorithm in RFC2782.  We
fix a bias in the random weight sorting by changing the order of
operations when selecting rnd.  rnd should be a non-zero random
number less than the sum of the weights at a particular priority,
but zero was included as a legitimate output thus biasing the
selection process.  rk_random() % sum is still biased as a 32
bit int modulo a number which doesn't divide 2^32 does not have
a uniform distribution, but the bias should be small enough to
live with for our purposes here.","In lib/roken/resolve.c, we find rk_dns_srv_order() which re-orders
the results of an SRV RR lookup by the algorithm in RFC2782.  We
fix a bias in the random weight sorting by changing the order of
operations when selecting rnd.  rnd should be a non-zero random
number less than the sum of the weights at a particular priority,
but zero was included as a legitimate output thus biasing the
selection process.  rk_random() % sum is still biased as a 32
bit int modulo a number which doesn't divide 2^32 does not have
a uniform distribution, but the bias should be small enough to
live with for our purposes here.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,162,2016-03-10T09:46:54Z,2016-03-10T10:24:51Z,2016-03-10T10:24:55Z,MERGED,True,1,1,1,https://github.com/aaptel,lib/krb5/pac.c: fix NULL check typo,1,[],https://github.com/heimdal/heimdal/pull/162,https://github.com/aaptel,1,https://github.com/heimdal/heimdal/pull/162,"ucs2 was already NULL checked earlier, this is never reached (and is doing a free(NULL), which man free(3) says it's a no-op) so no worries there.
You actually want to NULL-check s2 who has just received a malloc() result.","ucs2 was already NULL checked earlier, this is never reached (and is doing a free(NULL), which man free(3) says it's a no-op) so no worries there.
You actually want to NULL-check s2 who has just received a malloc() result.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,162,2016-03-10T09:46:54Z,2016-03-10T10:24:51Z,2016-03-10T10:24:55Z,MERGED,True,1,1,1,https://github.com/aaptel,lib/krb5/pac.c: fix NULL check typo,1,[],https://github.com/heimdal/heimdal/pull/162,https://github.com/lha,2,https://github.com/heimdal/heimdal/pull/162#issuecomment-194778305,"ucs2 was already NULL checked earlier, this is never reached (and is doing a free(NULL), which man free(3) says it's a no-op) so no worries there.
You actually want to NULL-check s2 who has just received a malloc() result.",thanks,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,163,2016-03-10T09:54:16Z,2016-03-10T10:25:31Z,2016-03-10T10:25:37Z,MERGED,True,1,1,1,https://github.com/aaptel,lib/gssapi/mech/gss_compare_name.c: fix memcmp() call,1,[],https://github.com/heimdal/heimdal/pull/163,https://github.com/aaptel,1,https://github.com/heimdal/heimdal/pull/163,"Make memcmp() compare the name1 and name2 value instead of comparing
name1 with itself.
The memcmp() is only executed if the left-hand side of the || is false
i.e. when both length are equal so the length argument is correct (no out-of-bounds reads).
I'm confused about the $FreeBSD: ...$ tag, is this originally from FreeBSD SVN? Should I send this change on their mailing list?","Make memcmp() compare the name1 and name2 value instead of comparing
name1 with itself.
The memcmp() is only executed if the left-hand side of the || is false
i.e. when both length are equal so the length argument is correct (no out-of-bounds reads).
I'm confused about the $FreeBSD: ...$ tag, is this originally from FreeBSD SVN? Should I send this change on their mailing list?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,163,2016-03-10T09:54:16Z,2016-03-10T10:25:31Z,2016-03-10T10:25:37Z,MERGED,True,1,1,1,https://github.com/aaptel,lib/gssapi/mech/gss_compare_name.c: fix memcmp() call,1,[],https://github.com/heimdal/heimdal/pull/163,https://github.com/lha,2,https://github.com/heimdal/heimdal/pull/163#issuecomment-194778718,"Make memcmp() compare the name1 and name2 value instead of comparing
name1 with itself.
The memcmp() is only executed if the left-hand side of the || is false
i.e. when both length are equal so the length argument is correct (no out-of-bounds reads).
I'm confused about the $FreeBSD: ...$ tag, is this originally from FreeBSD SVN? Should I send this change on their mailing list?",thanks!,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,167,2016-04-07T19:47:49Z,2016-11-08T18:38:30Z,2016-11-08T18:38:30Z,CLOSED,False,7,0,2,https://github.com/Sp1l,Fix build when OpenSSL does not have EGD support,1,[],https://github.com/heimdal/heimdal/pull/167,https://github.com/Sp1l,1,https://github.com/heimdal/heimdal/pull/167,"EGD is disabled by default in OpenSSL 1.1.0
EGD was removed in LibreSSL
No modern platform requires EGD","EGD is disabled by default in OpenSSL 1.1.0
EGD was removed in LibreSSL
No modern platform requires EGD",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,167,2016-04-07T19:47:49Z,2016-11-08T18:38:30Z,2016-11-08T18:38:30Z,CLOSED,False,7,0,2,https://github.com/Sp1l,Fix build when OpenSSL does not have EGD support,1,[],https://github.com/heimdal/heimdal/pull/167,https://github.com/Sp1l,2,https://github.com/heimdal/heimdal/pull/167#issuecomment-207063885,"EGD is disabled by default in OpenSSL 1.1.0
EGD was removed in LibreSSL
No modern platform requires EGD",This has been successfully tested on FreeBSD 10.3,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,168,2016-04-07T19:49:07Z,2016-11-08T18:38:30Z,2016-11-08T18:38:30Z,CLOSED,False,7,0,2,https://github.com/Sp1l,Fix build when OpenSSL does not support EGD,1,[],https://github.com/heimdal/heimdal/pull/168,https://github.com/Sp1l,1,https://github.com/heimdal/heimdal/pull/168,"EGD is disabled by default in OpenSSL 1.1.0
EGD was removed from LibreSSL
No current platform requires EGD","EGD is disabled by default in OpenSSL 1.1.0
EGD was removed from LibreSSL
No current platform requires EGD",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,171,2016-04-20T12:19:27Z,2016-05-14T10:28:25Z,2016-05-14T10:28:25Z,MERGED,True,3,3,1,https://github.com/jelmer,Fix parallel builds.,1,[],https://github.com/heimdal/heimdal/pull/171,https://github.com/jelmer,1,https://github.com/heimdal/heimdal/pull/171,"This is an improvement on #153, which didn't enforce that kdc-protos.h was build before string2key.o.
The original Makefile.am already supported parallel builds, it just had a typo in it.","This is an improvement on #153, which didn't enforce that kdc-protos.h was build before string2key.o.
The original Makefile.am already supported parallel builds, it just had a typo in it.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,172,2016-04-22T16:32:10Z,2016-04-22T19:09:27Z,2016-04-22T19:29:37Z,CLOSED,False,6,0,1,https://github.com/dmulder,Fix QAS Bug 21711: Kerberos BAD_INTEGRITY error with 2008 R2 RODC,2,[],https://github.com/heimdal/heimdal/pull/172,https://github.com/dmulder,1,https://github.com/heimdal/heimdal/pull/172,"BAD_INTEGRITY error when trying to kinit:
ERROR: VAS_ERR_KRB5: Failed to obtain credentials. Client: SLED10-32$@F.QAS,
Service: SLED10-32$@F.QAS, Server: ad2-f.f.qas
Caused by:
KRB5KRB_AP_ERR_BAD_INTEGRITY (-1765328353): Decrypt integrity check failed
MS changed code for RODCs in 2008R2.  MS does state that ALL krgtgt/REALM tickets SHOULD be sent using principal name type of KRB5_NT_SRV_INST, instead of KRB5_NT_PRINCIPAL.
From Microsoft:
""I believe we discovered the problem.  There isn’t a bug in Windows.
There’s been a code change to address another issue which puts in additional
checks for Kerberos tickets.  The problem is with the Unix clients when the
client request a TGT.  The Unix clients are using Name-type Principal
[KRB_NT_PRINCIPAL  (1)] instead of using Name-type Service and Instance
[KRB_NT_SRV_INST  (2)]....""
Further correspondence suggests that other tickets should be formatted to use:
""TGT’s should always be KRB5_NT_SRV_INST.  As far as principal type, it
depends on the name type being used.  If it’s in the form of http/ or
mssqlsvc/, etc then it would use KRB5_NT_SRV_INST.  If it is host/ then it
would be KRB_NT_SRV_HST.  If it’s in the form of a UPN then it would be
KRB_NT_ENTERPRISE_PRINCIPAL.""","BAD_INTEGRITY error when trying to kinit:
ERROR: VAS_ERR_KRB5: Failed to obtain credentials. Client: SLED10-32$@F.QAS,
Service: SLED10-32$@F.QAS, Server: ad2-f.f.qas
Caused by:
KRB5KRB_AP_ERR_BAD_INTEGRITY (-1765328353): Decrypt integrity check failed
MS changed code for RODCs in 2008R2.  MS does state that ALL krgtgt/REALM tickets SHOULD be sent using principal name type of KRB5_NT_SRV_INST, instead of KRB5_NT_PRINCIPAL.
From Microsoft:
""I believe we discovered the problem.  There isn’t a bug in Windows.
There’s been a code change to address another issue which puts in additional
checks for Kerberos tickets.  The problem is with the Unix clients when the
client request a TGT.  The Unix clients are using Name-type Principal
[KRB_NT_PRINCIPAL  (1)] instead of using Name-type Service and Instance
[KRB_NT_SRV_INST  (2)]....""
Further correspondence suggests that other tickets should be formatted to use:
""TGT’s should always be KRB5_NT_SRV_INST.  As far as principal type, it
depends on the name type being used.  If it’s in the form of http/ or
mssqlsvc/, etc then it would use KRB5_NT_SRV_INST.  If it is host/ then it
would be KRB_NT_SRV_HST.  If it’s in the form of a UPN then it would be
KRB_NT_ENTERPRISE_PRINCIPAL.""",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,172,2016-04-22T16:32:10Z,2016-04-22T19:09:27Z,2016-04-22T19:29:37Z,CLOSED,False,6,0,1,https://github.com/dmulder,Fix QAS Bug 21711: Kerberos BAD_INTEGRITY error with 2008 R2 RODC,2,[],https://github.com/heimdal/heimdal/pull/172,https://github.com/jaltman,2,https://github.com/heimdal/heimdal/pull/172#issuecomment-213519018,"BAD_INTEGRITY error when trying to kinit:
ERROR: VAS_ERR_KRB5: Failed to obtain credentials. Client: SLED10-32$@F.QAS,
Service: SLED10-32$@F.QAS, Server: ad2-f.f.qas
Caused by:
KRB5KRB_AP_ERR_BAD_INTEGRITY (-1765328353): Decrypt integrity check failed
MS changed code for RODCs in 2008R2.  MS does state that ALL krgtgt/REALM tickets SHOULD be sent using principal name type of KRB5_NT_SRV_INST, instead of KRB5_NT_PRINCIPAL.
From Microsoft:
""I believe we discovered the problem.  There isn’t a bug in Windows.
There’s been a code change to address another issue which puts in additional
checks for Kerberos tickets.  The problem is with the Unix clients when the
client request a TGT.  The Unix clients are using Name-type Principal
[KRB_NT_PRINCIPAL  (1)] instead of using Name-type Service and Instance
[KRB_NT_SRV_INST  (2)]....""
Further correspondence suggests that other tickets should be formatted to use:
""TGT’s should always be KRB5_NT_SRV_INST.  As far as principal type, it
depends on the name type being used.  If it’s in the form of http/ or
mssqlsvc/, etc then it would use KRB5_NT_SRV_INST.  If it is host/ then it
would be KRB_NT_SRV_HST.  If it’s in the form of a UPN then it would be
KRB_NT_ENTERPRISE_PRINCIPAL.""","The formatting for this change needs to be fixed before it can be merged into the tree.
Space between ""if and ("" because ""if"" is not a function
Indentation of body of if statement
The commit message should describe the problem and not just the solution.
Thank you.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,172,2016-04-22T16:32:10Z,2016-04-22T19:09:27Z,2016-04-22T19:29:37Z,CLOSED,False,6,0,1,https://github.com/dmulder,Fix QAS Bug 21711: Kerberos BAD_INTEGRITY error with 2008 R2 RODC,2,[],https://github.com/heimdal/heimdal/pull/172,https://github.com/dmulder,3,https://github.com/heimdal/heimdal/pull/172#issuecomment-213536146,"BAD_INTEGRITY error when trying to kinit:
ERROR: VAS_ERR_KRB5: Failed to obtain credentials. Client: SLED10-32$@F.QAS,
Service: SLED10-32$@F.QAS, Server: ad2-f.f.qas
Caused by:
KRB5KRB_AP_ERR_BAD_INTEGRITY (-1765328353): Decrypt integrity check failed
MS changed code for RODCs in 2008R2.  MS does state that ALL krgtgt/REALM tickets SHOULD be sent using principal name type of KRB5_NT_SRV_INST, instead of KRB5_NT_PRINCIPAL.
From Microsoft:
""I believe we discovered the problem.  There isn’t a bug in Windows.
There’s been a code change to address another issue which puts in additional
checks for Kerberos tickets.  The problem is with the Unix clients when the
client request a TGT.  The Unix clients are using Name-type Principal
[KRB_NT_PRINCIPAL  (1)] instead of using Name-type Service and Instance
[KRB_NT_SRV_INST  (2)]....""
Further correspondence suggests that other tickets should be formatted to use:
""TGT’s should always be KRB5_NT_SRV_INST.  As far as principal type, it
depends on the name type being used.  If it’s in the form of http/ or
mssqlsvc/, etc then it would use KRB5_NT_SRV_INST.  If it is host/ then it
would be KRB_NT_SRV_HST.  If it’s in the form of a UPN then it would be
KRB_NT_ENTERPRISE_PRINCIPAL.""",I modified the code style and updated the commit message. Is that sufficient?,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,172,2016-04-22T16:32:10Z,2016-04-22T19:09:27Z,2016-04-22T19:29:37Z,CLOSED,False,6,0,1,https://github.com/dmulder,Fix QAS Bug 21711: Kerberos BAD_INTEGRITY error with 2008 R2 RODC,2,[],https://github.com/heimdal/heimdal/pull/172,https://github.com/jaltman,4,https://github.com/heimdal/heimdal/pull/172#issuecomment-213556057,"BAD_INTEGRITY error when trying to kinit:
ERROR: VAS_ERR_KRB5: Failed to obtain credentials. Client: SLED10-32$@F.QAS,
Service: SLED10-32$@F.QAS, Server: ad2-f.f.qas
Caused by:
KRB5KRB_AP_ERR_BAD_INTEGRITY (-1765328353): Decrypt integrity check failed
MS changed code for RODCs in 2008R2.  MS does state that ALL krgtgt/REALM tickets SHOULD be sent using principal name type of KRB5_NT_SRV_INST, instead of KRB5_NT_PRINCIPAL.
From Microsoft:
""I believe we discovered the problem.  There isn’t a bug in Windows.
There’s been a code change to address another issue which puts in additional
checks for Kerberos tickets.  The problem is with the Unix clients when the
client request a TGT.  The Unix clients are using Name-type Principal
[KRB_NT_PRINCIPAL  (1)] instead of using Name-type Service and Instance
[KRB_NT_SRV_INST  (2)]....""
Further correspondence suggests that other tickets should be formatted to use:
""TGT’s should always be KRB5_NT_SRV_INST.  As far as principal type, it
depends on the name type being used.  If it’s in the form of http/ or
mssqlsvc/, etc then it would use KRB5_NT_SRV_INST.  If it is host/ then it
would be KRB_NT_SRV_HST.  If it’s in the form of a UPN then it would be
KRB_NT_ENTERPRISE_PRINCIPAL.""",The final result in correct but please squash the changes into a single commit.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,172,2016-04-22T16:32:10Z,2016-04-22T19:09:27Z,2016-04-22T19:29:37Z,CLOSED,False,6,0,1,https://github.com/dmulder,Fix QAS Bug 21711: Kerberos BAD_INTEGRITY error with 2008 R2 RODC,2,[],https://github.com/heimdal/heimdal/pull/172,https://github.com/kaduk,5,https://github.com/heimdal/heimdal/pull/172#issuecomment-213559039,"BAD_INTEGRITY error when trying to kinit:
ERROR: VAS_ERR_KRB5: Failed to obtain credentials. Client: SLED10-32$@F.QAS,
Service: SLED10-32$@F.QAS, Server: ad2-f.f.qas
Caused by:
KRB5KRB_AP_ERR_BAD_INTEGRITY (-1765328353): Decrypt integrity check failed
MS changed code for RODCs in 2008R2.  MS does state that ALL krgtgt/REALM tickets SHOULD be sent using principal name type of KRB5_NT_SRV_INST, instead of KRB5_NT_PRINCIPAL.
From Microsoft:
""I believe we discovered the problem.  There isn’t a bug in Windows.
There’s been a code change to address another issue which puts in additional
checks for Kerberos tickets.  The problem is with the Unix clients when the
client request a TGT.  The Unix clients are using Name-type Principal
[KRB_NT_PRINCIPAL  (1)] instead of using Name-type Service and Instance
[KRB_NT_SRV_INST  (2)]....""
Further correspondence suggests that other tickets should be formatted to use:
""TGT’s should always be KRB5_NT_SRV_INST.  As far as principal type, it
depends on the name type being used.  If it’s in the form of http/ or
mssqlsvc/, etc then it would use KRB5_NT_SRV_INST.  If it is host/ then it
would be KRB_NT_SRV_HST.  If it’s in the form of a UPN then it would be
KRB_NT_ENTERPRISE_PRINCIPAL.""","FWIW you can force-push to your personal github branch with the updated (squashed) commit, and the pull request will update accordingly automatically; there's no need to close and open a new pull request.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,172,2016-04-22T16:32:10Z,2016-04-22T19:09:27Z,2016-04-22T19:29:37Z,CLOSED,False,6,0,1,https://github.com/dmulder,Fix QAS Bug 21711: Kerberos BAD_INTEGRITY error with 2008 R2 RODC,2,[],https://github.com/heimdal/heimdal/pull/172,https://github.com/dmulder,6,https://github.com/heimdal/heimdal/pull/172#issuecomment-213559929,"BAD_INTEGRITY error when trying to kinit:
ERROR: VAS_ERR_KRB5: Failed to obtain credentials. Client: SLED10-32$@F.QAS,
Service: SLED10-32$@F.QAS, Server: ad2-f.f.qas
Caused by:
KRB5KRB_AP_ERR_BAD_INTEGRITY (-1765328353): Decrypt integrity check failed
MS changed code for RODCs in 2008R2.  MS does state that ALL krgtgt/REALM tickets SHOULD be sent using principal name type of KRB5_NT_SRV_INST, instead of KRB5_NT_PRINCIPAL.
From Microsoft:
""I believe we discovered the problem.  There isn’t a bug in Windows.
There’s been a code change to address another issue which puts in additional
checks for Kerberos tickets.  The problem is with the Unix clients when the
client request a TGT.  The Unix clients are using Name-type Principal
[KRB_NT_PRINCIPAL  (1)] instead of using Name-type Service and Instance
[KRB_NT_SRV_INST  (2)]....""
Further correspondence suggests that other tickets should be formatted to use:
""TGT’s should always be KRB5_NT_SRV_INST.  As far as principal type, it
depends on the name type being used.  If it’s in the form of http/ or
mssqlsvc/, etc then it would use KRB5_NT_SRV_INST.  If it is host/ then it
would be KRB_NT_SRV_HST.  If it’s in the form of a UPN then it would be
KRB_NT_ENTERPRISE_PRINCIPAL.""","I normally do. For some reason it wasn't accepting the force push. I'm sure I was doing something wrong.

git reset --hard HEAD2
HEAD is now at ca0dff8 Check HCRYPTO_FALLBACK in W32 backend
patch principal.c </code/Bug21711.patch
patching file principal.c
git commit principal.c
[detached HEAD 9103a2e] Fix QAS Bug 21711: Kerberos BAD_INTEGRITY error with 2008 R2 RODC
1 file changed, 6 insertions(+)
git push -f origin master
Everything up-to-date",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,172,2016-04-22T16:32:10Z,2016-04-22T19:09:27Z,2016-04-22T19:29:37Z,CLOSED,False,6,0,1,https://github.com/dmulder,Fix QAS Bug 21711: Kerberos BAD_INTEGRITY error with 2008 R2 RODC,2,[],https://github.com/heimdal/heimdal/pull/172,https://github.com/dmulder,7,https://github.com/heimdal/heimdal/pull/172#issuecomment-213560546,"BAD_INTEGRITY error when trying to kinit:
ERROR: VAS_ERR_KRB5: Failed to obtain credentials. Client: SLED10-32$@F.QAS,
Service: SLED10-32$@F.QAS, Server: ad2-f.f.qas
Caused by:
KRB5KRB_AP_ERR_BAD_INTEGRITY (-1765328353): Decrypt integrity check failed
MS changed code for RODCs in 2008R2.  MS does state that ALL krgtgt/REALM tickets SHOULD be sent using principal name type of KRB5_NT_SRV_INST, instead of KRB5_NT_PRINCIPAL.
From Microsoft:
""I believe we discovered the problem.  There isn’t a bug in Windows.
There’s been a code change to address another issue which puts in additional
checks for Kerberos tickets.  The problem is with the Unix clients when the
client request a TGT.  The Unix clients are using Name-type Principal
[KRB_NT_PRINCIPAL  (1)] instead of using Name-type Service and Instance
[KRB_NT_SRV_INST  (2)]....""
Further correspondence suggests that other tickets should be formatted to use:
""TGT’s should always be KRB5_NT_SRV_INST.  As far as principal type, it
depends on the name type being used.  If it’s in the form of http/ or
mssqlsvc/, etc then it would use KRB5_NT_SRV_INST.  If it is host/ then it
would be KRB_NT_SRV_HST.  If it’s in the form of a UPN then it would be
KRB_NT_ENTERPRISE_PRINCIPAL.""","I think I should have done a push force after the reset, to rewrite the branch, then patch and push.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,172,2016-04-22T16:32:10Z,2016-04-22T19:09:27Z,2016-04-22T19:29:37Z,CLOSED,False,6,0,1,https://github.com/dmulder,Fix QAS Bug 21711: Kerberos BAD_INTEGRITY error with 2008 R2 RODC,2,[],https://github.com/heimdal/heimdal/pull/172,https://github.com/kaduk,8,https://github.com/heimdal/heimdal/pull/172#issuecomment-213562301,"BAD_INTEGRITY error when trying to kinit:
ERROR: VAS_ERR_KRB5: Failed to obtain credentials. Client: SLED10-32$@F.QAS,
Service: SLED10-32$@F.QAS, Server: ad2-f.f.qas
Caused by:
KRB5KRB_AP_ERR_BAD_INTEGRITY (-1765328353): Decrypt integrity check failed
MS changed code for RODCs in 2008R2.  MS does state that ALL krgtgt/REALM tickets SHOULD be sent using principal name type of KRB5_NT_SRV_INST, instead of KRB5_NT_PRINCIPAL.
From Microsoft:
""I believe we discovered the problem.  There isn’t a bug in Windows.
There’s been a code change to address another issue which puts in additional
checks for Kerberos tickets.  The problem is with the Unix clients when the
client request a TGT.  The Unix clients are using Name-type Principal
[KRB_NT_PRINCIPAL  (1)] instead of using Name-type Service and Instance
[KRB_NT_SRV_INST  (2)]....""
Further correspondence suggests that other tickets should be formatted to use:
""TGT’s should always be KRB5_NT_SRV_INST.  As far as principal type, it
depends on the name type being used.  If it’s in the form of http/ or
mssqlsvc/, etc then it would use KRB5_NT_SRV_INST.  If it is host/ then it
would be KRB_NT_SRV_HST.  If it’s in the form of a UPN then it would be
KRB_NT_ENTERPRISE_PRINCIPAL.""","I am not entirely sure how you got there (as ""git reset --hard"" should keep you on a branch), but this is the important part:

[detached HEAD 9103a2e]

So you were not on branch 'master' anymore.  ""git push origin +HEAD:master"" should have worked, though.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,173,2016-04-22T19:12:15Z,2016-11-15T04:03:12Z,2016-11-15T04:03:12Z,CLOSED,False,4,0,1,https://github.com/dmulder,Fix QAS Bug 21711: Kerberos BAD_INTEGRITY error with 2008 R2 RODC,1,[],https://github.com/heimdal/heimdal/pull/173,https://github.com/dmulder,1,https://github.com/heimdal/heimdal/pull/173,"BAD_INTEGRITY error when trying to kinit:
ERROR: VAS_ERR_KRB5: Failed to obtain credentials. Client: SLED10-32$@F.QAS,
Service: SLED10-32$@F.QAS, Server: ad2-f.f.qas
Caused by:
KRB5KRB_AP_ERR_BAD_INTEGRITY (-1765328353): Decrypt integrity check failed
MS changed code for RODCs in 2008R2. MS does state that ALL krgtgt/REALM tickets SHOULD be sent using principal name type of KRB5_NT_SRV_INST, instead of KRB5_NT_PRINCIPAL.
From Microsoft:
""I believe we discovered the problem. There isn’t a bug in Windows.
There’s been a code change to address another issue which puts in additional
checks for Kerberos tickets. The problem is with the Unix clients when the
client request a TGT. The Unix clients are using Name-type Principal
[KRB_NT_PRINCIPAL (1)] instead of using Name-type Service and Instance
[KRB_NT_SRV_INST (2)]....""
Further correspondence suggests that other tickets should be formatted to use:
""TGT’s should always be KRB5_NT_SRV_INST. As far as principal type, it
depends on the name type being used. If it’s in the form of http/ or
mssqlsvc/, etc then it would use KRB5_NT_SRV_INST. If it is host/ then it
would be KRB_NT_SRV_HST. If it’s in the form of a UPN then it would be
KRB_NT_ENTERPRISE_PRINCIPAL.""","BAD_INTEGRITY error when trying to kinit:
ERROR: VAS_ERR_KRB5: Failed to obtain credentials. Client: SLED10-32$@F.QAS,
Service: SLED10-32$@F.QAS, Server: ad2-f.f.qas
Caused by:
KRB5KRB_AP_ERR_BAD_INTEGRITY (-1765328353): Decrypt integrity check failed
MS changed code for RODCs in 2008R2. MS does state that ALL krgtgt/REALM tickets SHOULD be sent using principal name type of KRB5_NT_SRV_INST, instead of KRB5_NT_PRINCIPAL.
From Microsoft:
""I believe we discovered the problem. There isn’t a bug in Windows.
There’s been a code change to address another issue which puts in additional
checks for Kerberos tickets. The problem is with the Unix clients when the
client request a TGT. The Unix clients are using Name-type Principal
[KRB_NT_PRINCIPAL (1)] instead of using Name-type Service and Instance
[KRB_NT_SRV_INST (2)]....""
Further correspondence suggests that other tickets should be formatted to use:
""TGT’s should always be KRB5_NT_SRV_INST. As far as principal type, it
depends on the name type being used. If it’s in the form of http/ or
mssqlsvc/, etc then it would use KRB5_NT_SRV_INST. If it is host/ then it
would be KRB_NT_SRV_HST. If it’s in the form of a UPN then it would be
KRB_NT_ENTERPRISE_PRINCIPAL.""",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,173,2016-04-22T19:12:15Z,2016-11-15T04:03:12Z,2016-11-15T04:03:12Z,CLOSED,False,4,0,1,https://github.com/dmulder,Fix QAS Bug 21711: Kerberos BAD_INTEGRITY error with 2008 R2 RODC,1,[],https://github.com/heimdal/heimdal/pull/173,https://github.com/jaltman,2,https://github.com/heimdal/heimdal/pull/173#issuecomment-213635667,"BAD_INTEGRITY error when trying to kinit:
ERROR: VAS_ERR_KRB5: Failed to obtain credentials. Client: SLED10-32$@F.QAS,
Service: SLED10-32$@F.QAS, Server: ad2-f.f.qas
Caused by:
KRB5KRB_AP_ERR_BAD_INTEGRITY (-1765328353): Decrypt integrity check failed
MS changed code for RODCs in 2008R2. MS does state that ALL krgtgt/REALM tickets SHOULD be sent using principal name type of KRB5_NT_SRV_INST, instead of KRB5_NT_PRINCIPAL.
From Microsoft:
""I believe we discovered the problem. There isn’t a bug in Windows.
There’s been a code change to address another issue which puts in additional
checks for Kerberos tickets. The problem is with the Unix clients when the
client request a TGT. The Unix clients are using Name-type Principal
[KRB_NT_PRINCIPAL (1)] instead of using Name-type Service and Instance
[KRB_NT_SRV_INST (2)]....""
Further correspondence suggests that other tickets should be formatted to use:
""TGT’s should always be KRB5_NT_SRV_INST. As far as principal type, it
depends on the name type being used. If it’s in the form of http/ or
mssqlsvc/, etc then it would use KRB5_NT_SRV_INST. If it is host/ then it
would be KRB_NT_SRV_HST. If it’s in the form of a UPN then it would be
KRB_NT_ENTERPRISE_PRINCIPAL.""",Thank you for the updated commit message.  Now we just have to get the change to be functionally correct.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,173,2016-04-22T19:12:15Z,2016-11-15T04:03:12Z,2016-11-15T04:03:12Z,CLOSED,False,4,0,1,https://github.com/dmulder,Fix QAS Bug 21711: Kerberos BAD_INTEGRITY error with 2008 R2 RODC,1,[],https://github.com/heimdal/heimdal/pull/173,https://github.com/jaltman,3,https://github.com/heimdal/heimdal/pull/173#issuecomment-213840160,"BAD_INTEGRITY error when trying to kinit:
ERROR: VAS_ERR_KRB5: Failed to obtain credentials. Client: SLED10-32$@F.QAS,
Service: SLED10-32$@F.QAS, Server: ad2-f.f.qas
Caused by:
KRB5KRB_AP_ERR_BAD_INTEGRITY (-1765328353): Decrypt integrity check failed
MS changed code for RODCs in 2008R2. MS does state that ALL krgtgt/REALM tickets SHOULD be sent using principal name type of KRB5_NT_SRV_INST, instead of KRB5_NT_PRINCIPAL.
From Microsoft:
""I believe we discovered the problem. There isn’t a bug in Windows.
There’s been a code change to address another issue which puts in additional
checks for Kerberos tickets. The problem is with the Unix clients when the
client request a TGT. The Unix clients are using Name-type Principal
[KRB_NT_PRINCIPAL (1)] instead of using Name-type Service and Instance
[KRB_NT_SRV_INST (2)]....""
Further correspondence suggests that other tickets should be formatted to use:
""TGT’s should always be KRB5_NT_SRV_INST. As far as principal type, it
depends on the name type being used. If it’s in the form of http/ or
mssqlsvc/, etc then it would use KRB5_NT_SRV_INST. If it is host/ then it
would be KRB_NT_SRV_HST. If it’s in the form of a UPN then it would be
KRB_NT_ENTERPRISE_PRINCIPAL.""","Another question that stems from the commit message.   Should another conditional block
else if (ncomp > 1 && strcmp(""host"", comp[0]) == 0)
(*principal)->name.name_type = KRB5_NT_SRV_HST;
be added?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,173,2016-04-22T19:12:15Z,2016-11-15T04:03:12Z,2016-11-15T04:03:12Z,CLOSED,False,4,0,1,https://github.com/dmulder,Fix QAS Bug 21711: Kerberos BAD_INTEGRITY error with 2008 R2 RODC,1,[],https://github.com/heimdal/heimdal/pull/173,https://github.com/nicowilliams,4,https://github.com/heimdal/heimdal/pull/173#issuecomment-214067020,"BAD_INTEGRITY error when trying to kinit:
ERROR: VAS_ERR_KRB5: Failed to obtain credentials. Client: SLED10-32$@F.QAS,
Service: SLED10-32$@F.QAS, Server: ad2-f.f.qas
Caused by:
KRB5KRB_AP_ERR_BAD_INTEGRITY (-1765328353): Decrypt integrity check failed
MS changed code for RODCs in 2008R2. MS does state that ALL krgtgt/REALM tickets SHOULD be sent using principal name type of KRB5_NT_SRV_INST, instead of KRB5_NT_PRINCIPAL.
From Microsoft:
""I believe we discovered the problem. There isn’t a bug in Windows.
There’s been a code change to address another issue which puts in additional
checks for Kerberos tickets. The problem is with the Unix clients when the
client request a TGT. The Unix clients are using Name-type Principal
[KRB_NT_PRINCIPAL (1)] instead of using Name-type Service and Instance
[KRB_NT_SRV_INST (2)]....""
Further correspondence suggests that other tickets should be formatted to use:
""TGT’s should always be KRB5_NT_SRV_INST. As far as principal type, it
depends on the name type being used. If it’s in the form of http/ or
mssqlsvc/, etc then it would use KRB5_NT_SRV_INST. If it is host/ then it
would be KRB_NT_SRV_HST. If it’s in the form of a UPN then it would be
KRB_NT_ENTERPRISE_PRINCIPAL.""","@jaltman: ""no"", no such conditional should be added.
This whole thing has me peeved.  Name types in Kerberos do not partition the namespace (unlike in GSS generic query syntax), and are informative, not normative.  No KDC has any business in demanding that a client use a particular name type or other when referring to any principals (client or service principals alike), and IIRC there is no text in RFC4120 (or any other related RFC, nor 1510) supporting such a requirement.
Indeed, neither MIT Kerberos nor Heimdal even keep track of name-types in their KDC principal databases, because the protocol never required them to.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,173,2016-04-22T19:12:15Z,2016-11-15T04:03:12Z,2016-11-15T04:03:12Z,CLOSED,False,4,0,1,https://github.com/dmulder,Fix QAS Bug 21711: Kerberos BAD_INTEGRITY error with 2008 R2 RODC,1,[],https://github.com/heimdal/heimdal/pull/173,https://github.com/dmulder,5,https://github.com/heimdal/heimdal/pull/173#issuecomment-216624682,"BAD_INTEGRITY error when trying to kinit:
ERROR: VAS_ERR_KRB5: Failed to obtain credentials. Client: SLED10-32$@F.QAS,
Service: SLED10-32$@F.QAS, Server: ad2-f.f.qas
Caused by:
KRB5KRB_AP_ERR_BAD_INTEGRITY (-1765328353): Decrypt integrity check failed
MS changed code for RODCs in 2008R2. MS does state that ALL krgtgt/REALM tickets SHOULD be sent using principal name type of KRB5_NT_SRV_INST, instead of KRB5_NT_PRINCIPAL.
From Microsoft:
""I believe we discovered the problem. There isn’t a bug in Windows.
There’s been a code change to address another issue which puts in additional
checks for Kerberos tickets. The problem is with the Unix clients when the
client request a TGT. The Unix clients are using Name-type Principal
[KRB_NT_PRINCIPAL (1)] instead of using Name-type Service and Instance
[KRB_NT_SRV_INST (2)]....""
Further correspondence suggests that other tickets should be formatted to use:
""TGT’s should always be KRB5_NT_SRV_INST. As far as principal type, it
depends on the name type being used. If it’s in the form of http/ or
mssqlsvc/, etc then it would use KRB5_NT_SRV_INST. If it is host/ then it
would be KRB_NT_SRV_HST. If it’s in the form of a UPN then it would be
KRB_NT_ENTERPRISE_PRINCIPAL.""","@nicowilliams I tend to agree. If this violates standards, then I'm not sure it belongs in heimdal.
@jaltman what is your opinion?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,173,2016-04-22T19:12:15Z,2016-11-15T04:03:12Z,2016-11-15T04:03:12Z,CLOSED,False,4,0,1,https://github.com/dmulder,Fix QAS Bug 21711: Kerberos BAD_INTEGRITY error with 2008 R2 RODC,1,[],https://github.com/heimdal/heimdal/pull/173,https://github.com/abartlet,6,https://github.com/heimdal/heimdal/pull/173#issuecomment-216672033,"BAD_INTEGRITY error when trying to kinit:
ERROR: VAS_ERR_KRB5: Failed to obtain credentials. Client: SLED10-32$@F.QAS,
Service: SLED10-32$@F.QAS, Server: ad2-f.f.qas
Caused by:
KRB5KRB_AP_ERR_BAD_INTEGRITY (-1765328353): Decrypt integrity check failed
MS changed code for RODCs in 2008R2. MS does state that ALL krgtgt/REALM tickets SHOULD be sent using principal name type of KRB5_NT_SRV_INST, instead of KRB5_NT_PRINCIPAL.
From Microsoft:
""I believe we discovered the problem. There isn’t a bug in Windows.
There’s been a code change to address another issue which puts in additional
checks for Kerberos tickets. The problem is with the Unix clients when the
client request a TGT. The Unix clients are using Name-type Principal
[KRB_NT_PRINCIPAL (1)] instead of using Name-type Service and Instance
[KRB_NT_SRV_INST (2)]....""
Further correspondence suggests that other tickets should be formatted to use:
""TGT’s should always be KRB5_NT_SRV_INST. As far as principal type, it
depends on the name type being used. If it’s in the form of http/ or
mssqlsvc/, etc then it would use KRB5_NT_SRV_INST. If it is host/ then it
would be KRB_NT_SRV_HST. If it’s in the form of a UPN then it would be
KRB_NT_ENTERPRISE_PRINCIPAL.""","I would strongly argue for maximum compatibility with AD here, due to wide deployment.
Otherwise, you just push the problem on to the calling applications, like Samba, which have had to work around this for years now.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,173,2016-04-22T19:12:15Z,2016-11-15T04:03:12Z,2016-11-15T04:03:12Z,CLOSED,False,4,0,1,https://github.com/dmulder,Fix QAS Bug 21711: Kerberos BAD_INTEGRITY error with 2008 R2 RODC,1,[],https://github.com/heimdal/heimdal/pull/173,https://github.com/dmulder,7,https://github.com/heimdal/heimdal/pull/173#issuecomment-216679246,"BAD_INTEGRITY error when trying to kinit:
ERROR: VAS_ERR_KRB5: Failed to obtain credentials. Client: SLED10-32$@F.QAS,
Service: SLED10-32$@F.QAS, Server: ad2-f.f.qas
Caused by:
KRB5KRB_AP_ERR_BAD_INTEGRITY (-1765328353): Decrypt integrity check failed
MS changed code for RODCs in 2008R2. MS does state that ALL krgtgt/REALM tickets SHOULD be sent using principal name type of KRB5_NT_SRV_INST, instead of KRB5_NT_PRINCIPAL.
From Microsoft:
""I believe we discovered the problem. There isn’t a bug in Windows.
There’s been a code change to address another issue which puts in additional
checks for Kerberos tickets. The problem is with the Unix clients when the
client request a TGT. The Unix clients are using Name-type Principal
[KRB_NT_PRINCIPAL (1)] instead of using Name-type Service and Instance
[KRB_NT_SRV_INST (2)]....""
Further correspondence suggests that other tickets should be formatted to use:
""TGT’s should always be KRB5_NT_SRV_INST. As far as principal type, it
depends on the name type being used. If it’s in the form of http/ or
mssqlsvc/, etc then it would use KRB5_NT_SRV_INST. If it is host/ then it
would be KRB_NT_SRV_HST. If it’s in the form of a UPN then it would be
KRB_NT_ENTERPRISE_PRINCIPAL.""","@nicowilliams
Check RFC4120 page 99 for principle name types.
NT-PRINCIPAL      1    Just the name of the principal as in DCE,
or for users
NT-SRV-INST       2    Service and other unique instance (krbtgt)
NT-SRV-HST        3    Service with host name as instance
(telnet, rcommands)
etc...
""If the first component of a name identifies a service and the remaining components identify an instance of the service in a server-specified manner, then the name type of SRV-INST SHOULD be used""",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,173,2016-04-22T19:12:15Z,2016-11-15T04:03:12Z,2016-11-15T04:03:12Z,CLOSED,False,4,0,1,https://github.com/dmulder,Fix QAS Bug 21711: Kerberos BAD_INTEGRITY error with 2008 R2 RODC,1,[],https://github.com/heimdal/heimdal/pull/173,https://github.com/jaltman,8,https://github.com/heimdal/heimdal/pull/173#issuecomment-217073809,"BAD_INTEGRITY error when trying to kinit:
ERROR: VAS_ERR_KRB5: Failed to obtain credentials. Client: SLED10-32$@F.QAS,
Service: SLED10-32$@F.QAS, Server: ad2-f.f.qas
Caused by:
KRB5KRB_AP_ERR_BAD_INTEGRITY (-1765328353): Decrypt integrity check failed
MS changed code for RODCs in 2008R2. MS does state that ALL krgtgt/REALM tickets SHOULD be sent using principal name type of KRB5_NT_SRV_INST, instead of KRB5_NT_PRINCIPAL.
From Microsoft:
""I believe we discovered the problem. There isn’t a bug in Windows.
There’s been a code change to address another issue which puts in additional
checks for Kerberos tickets. The problem is with the Unix clients when the
client request a TGT. The Unix clients are using Name-type Principal
[KRB_NT_PRINCIPAL (1)] instead of using Name-type Service and Instance
[KRB_NT_SRV_INST (2)]....""
Further correspondence suggests that other tickets should be formatted to use:
""TGT’s should always be KRB5_NT_SRV_INST. As far as principal type, it
depends on the name type being used. If it’s in the form of http/ or
mssqlsvc/, etc then it would use KRB5_NT_SRV_INST. If it is host/ then it
would be KRB_NT_SRV_HST. If it’s in the form of a UPN then it would be
KRB_NT_ENTERPRISE_PRINCIPAL.""",@Davidmulder I'm unlikely to take this change as it.   I want to merge something that handles the other cases as well.   I want to review the history of RFC1510 from the mailing lists.  I simply haven't had time this week but should be able to research next week.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,173,2016-04-22T19:12:15Z,2016-11-15T04:03:12Z,2016-11-15T04:03:12Z,CLOSED,False,4,0,1,https://github.com/dmulder,Fix QAS Bug 21711: Kerberos BAD_INTEGRITY error with 2008 R2 RODC,1,[],https://github.com/heimdal/heimdal/pull/173,https://github.com/dmulder,9,https://github.com/heimdal/heimdal/pull/173#issuecomment-230863075,"BAD_INTEGRITY error when trying to kinit:
ERROR: VAS_ERR_KRB5: Failed to obtain credentials. Client: SLED10-32$@F.QAS,
Service: SLED10-32$@F.QAS, Server: ad2-f.f.qas
Caused by:
KRB5KRB_AP_ERR_BAD_INTEGRITY (-1765328353): Decrypt integrity check failed
MS changed code for RODCs in 2008R2. MS does state that ALL krgtgt/REALM tickets SHOULD be sent using principal name type of KRB5_NT_SRV_INST, instead of KRB5_NT_PRINCIPAL.
From Microsoft:
""I believe we discovered the problem. There isn’t a bug in Windows.
There’s been a code change to address another issue which puts in additional
checks for Kerberos tickets. The problem is with the Unix clients when the
client request a TGT. The Unix clients are using Name-type Principal
[KRB_NT_PRINCIPAL (1)] instead of using Name-type Service and Instance
[KRB_NT_SRV_INST (2)]....""
Further correspondence suggests that other tickets should be formatted to use:
""TGT’s should always be KRB5_NT_SRV_INST. As far as principal type, it
depends on the name type being used. If it’s in the form of http/ or
mssqlsvc/, etc then it would use KRB5_NT_SRV_INST. If it is host/ then it
would be KRB_NT_SRV_HST. If it’s in the form of a UPN then it would be
KRB_NT_ENTERPRISE_PRINCIPAL.""",@jaltman Have you had a chance to research this?,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,173,2016-04-22T19:12:15Z,2016-11-15T04:03:12Z,2016-11-15T04:03:12Z,CLOSED,False,4,0,1,https://github.com/dmulder,Fix QAS Bug 21711: Kerberos BAD_INTEGRITY error with 2008 R2 RODC,1,[],https://github.com/heimdal/heimdal/pull/173,https://github.com/jaltman,10,https://github.com/heimdal/heimdal/pull/173#issuecomment-233165019,"BAD_INTEGRITY error when trying to kinit:
ERROR: VAS_ERR_KRB5: Failed to obtain credentials. Client: SLED10-32$@F.QAS,
Service: SLED10-32$@F.QAS, Server: ad2-f.f.qas
Caused by:
KRB5KRB_AP_ERR_BAD_INTEGRITY (-1765328353): Decrypt integrity check failed
MS changed code for RODCs in 2008R2. MS does state that ALL krgtgt/REALM tickets SHOULD be sent using principal name type of KRB5_NT_SRV_INST, instead of KRB5_NT_PRINCIPAL.
From Microsoft:
""I believe we discovered the problem. There isn’t a bug in Windows.
There’s been a code change to address another issue which puts in additional
checks for Kerberos tickets. The problem is with the Unix clients when the
client request a TGT. The Unix clients are using Name-type Principal
[KRB_NT_PRINCIPAL (1)] instead of using Name-type Service and Instance
[KRB_NT_SRV_INST (2)]....""
Further correspondence suggests that other tickets should be formatted to use:
""TGT’s should always be KRB5_NT_SRV_INST. As far as principal type, it
depends on the name type being used. If it’s in the form of http/ or
mssqlsvc/, etc then it would use KRB5_NT_SRV_INST. If it is host/ then it
would be KRB_NT_SRV_HST. If it’s in the form of a UPN then it would be
KRB_NT_ENTERPRISE_PRINCIPAL.""","@Davidmulder My apologies for the delay in responding but the subject matter required a bit more research and thought than I have had time for.
Let me first address the question of principals with the service name ""krbtgt"".    My reading of RFC4120 is that all principals with a service name of ""krbtgt"" should be treated as type NT-SRV-INST whenever the principal type is NT-UNKNOWN.   The principal type is implicitly NT-UNKNOWN at the start of krb5_parse_name_flags() if the KRB5_PRINCIPAL_PARSE_ENTERPRISE flag is unset.
In Heimdal's KDC NT-SRV-INST principal types are treated special in that a request for a referral is implied without requiring the canonicalize flag.  This special casing of NT-SRV-INST occurs in kdc/krb5tgs.c need_referral().    The existing Heimdal behavior of setting NT-PRINCIPAL for ""krbtgt"" principals not only causes misbehavior with Active Directory but also for Heimdal KDCs.
One question that my research raised is, what does Windows do when the service name is ""krbtgt"" but the principal type is NT-UNKNOWN?   By my reading of RFC 4120, KDCs should accept a ""krbtgt"" service principal with type NT-UNKNOWN as NT-SRV-INST.  Is that something you can test?
RFC4120 says

If the first component of a name identifies a service and the remaining components identify an instance of the service in a server-specified manner, then the name type of SRV-INST SHOULD be   used.  An example of this name type is the Kerberos ticket-granting service whose name has a first component of krbtgt and a second component identifying the realm for which the ticket is valid.

A ""krbtgt"" should therefore have the type NT-SRV-INST set because it is a service that requires server-specified processing.  I agree that krb5_parse_name_flags() should be modified to set the type to KRB5_NT_SRV_INST when the service name is ""krbtgt"" (aka KRB5_TGS_NAME).   Lets commit that as a single isolated change.
The above RFC 4120 text also implies that a principal of type NT-SRV-INST should not be assumed to be a ""krbtgt"" and that the server specific rules that apply to ""krbtgt"" do not apply to other NT-SRV-INST services.  Heimdal's kdc/krb5tgs.c need_referral() behavior needs to be altered to ensure that if the principal type is NT-UNKNOWN and the service name is ""krbtgt"" then the behavior is the same as if the type was NT-SRV-INST and service name ""krbtgt"".  need_referral() currently does not validate the service name nor does it handle the case of NT-UNKNOWN and ""krbtgt"".
I believe that the KDC should whenever it receives an incoming request with principal type NT-UNKNOWN apply transformation rules to assign an appropriate type for internal processing.  However, the service name principal type returned to the caller must be NT-UNKNOWN if the client specified NT-UNKNOWN.  Otherwise, the Java 1.6 Kerberos client implementation will fail to accept the response.  It would be worth testing to determine if this behavior has been altered in subsequent releases.   The fixes for the need_referral() behavior should be a separate commits.
The next question is should a principal whose first component is the service name ""host"" be treated as type NT-SRV_HST when the type is NT-UNKNOWN.   I believe the answer is ""yes"" both in the krb5 client, the kdc and in GSS.   RFC 4120 says:

If the first component of a name identifies a service and there is a single component following the service name identifying the instance as the host on which the server is running, then the name type   SRV-HST SHOULD be used.  This type is typically used for Internet services such as telnet and the Berkeley R commands.

It also says:

If specified by the application protocol for services such as telnet and the Berkeley R commands that run with system privileges, the first component MAY be the string 'host' instead of a service-specific identifier.

and

The principal identifier for a server on a host will generally be composed of two parts: (1) the realm of the KDC with which the server is registered, and (2) a two-component name of type NT-SRV-HST, if the host name is an Internet domain name ...

As such, designating an unknown principal with first component ""host"" must only be considered NT-SRV-HST when the number of components is 2.
RFC 4120 finishes with:

A name type of UNKNOWN SHOULD be used when the form of the name is not known.  When comparing names, a name of type UNKNOWN will match principals authenticated with names of any type.  A principal authenticated with a name of type UNKNOWN, however, will only match other names of type UNKNOWN.

Yet RFC 4120 also says:

When a name implies no information other than its uniqueness at a particular time, the name type PRINCIPAL SHOULD be used.  The PRINCIPAL name type SHOULD be used for users, and it might also be used for a unique server.

An open question is, what should krb5_parse_name_flags() be setting as the principal type when the principal type unknown?  For a single component principal NT-PRINCIPAL makes sense but what about multi-component principals not known to be a user or machine name?  Heimdal's krb5_parse_name_flags() sets the principal type to NT-PRINCIPAL not NT-UNKNOWN when all other options are exhausted.
RFC 5179 ""Generic Security Service Application Program Interface (GSS-API) Domain-Based Service Names Mapping for the Kerberos V GSS Mechanism"" defines NT-SRV-HST-DOMAIN which is similar to NT-SRV-HST but supports 3 components.  First component is the service, second is the host, and third is an application specific domain.  Heimdal currently does not support NT-SRV-HST-DOMAIN.  It does not apply to the service ""host"".
Heimdal requires configuration support to permit specifying service names that should be treated as NT-SRV-HST or NT-SRV-HST-DOMAIN when processing krb5_parse_name_flags(), in the kdc, and in gss.  I propose
[service_principal_type]
service = type
service = type
....
service = type
where the types are those specified in lib/krb5/principal.c nametypes[].    This mapping should be supported by the krb5 client, the kdc and gss.   This mechanism will permit the appropriate assignment of principal types by the client and the appropriate mapping of NT-UNKNOWN to principal type by the KDC.
In summary, I think it would be useful to apply the following rules to krb5_parse_name_flags(), gss_import_name() and the KDC when the principal type is unknown:

If the principal's first component is ""krbtgt"" then the type is NT-SRV-INST.
If the principal is two components, and the first component is ""host"", then the type is NT-SRV-HST.
If the principal's first component is listed in the [service_principal_type] section of the profile then the type is as assigned (NT-SRV-INST, NT-SRV-HST, NT-SRV-HST-DOMAIN).
If the principal is a single component and contains a single '@' then the type is NT-SMTP-NAME.
If the principal is a single component, then the type is NT-PRINCIPAL
Otherwise, set the principal type to NT-PRINCIPAL.  I believe the RFC argues for NT-UNKNOWN in this case but the principal ""user/admin@REALM"" must be treated as a user authentication.

There are a significant number of to do items and quite a bit of interop testing that will be required.  Can your employer assist with this work?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,173,2016-04-22T19:12:15Z,2016-11-15T04:03:12Z,2016-11-15T04:03:12Z,CLOSED,False,4,0,1,https://github.com/dmulder,Fix QAS Bug 21711: Kerberos BAD_INTEGRITY error with 2008 R2 RODC,1,[],https://github.com/heimdal/heimdal/pull/173,https://github.com/jaltman,11,https://github.com/heimdal/heimdal/pull/173#issuecomment-233208150,"BAD_INTEGRITY error when trying to kinit:
ERROR: VAS_ERR_KRB5: Failed to obtain credentials. Client: SLED10-32$@F.QAS,
Service: SLED10-32$@F.QAS, Server: ad2-f.f.qas
Caused by:
KRB5KRB_AP_ERR_BAD_INTEGRITY (-1765328353): Decrypt integrity check failed
MS changed code for RODCs in 2008R2. MS does state that ALL krgtgt/REALM tickets SHOULD be sent using principal name type of KRB5_NT_SRV_INST, instead of KRB5_NT_PRINCIPAL.
From Microsoft:
""I believe we discovered the problem. There isn’t a bug in Windows.
There’s been a code change to address another issue which puts in additional
checks for Kerberos tickets. The problem is with the Unix clients when the
client request a TGT. The Unix clients are using Name-type Principal
[KRB_NT_PRINCIPAL (1)] instead of using Name-type Service and Instance
[KRB_NT_SRV_INST (2)]....""
Further correspondence suggests that other tickets should be formatted to use:
""TGT’s should always be KRB5_NT_SRV_INST. As far as principal type, it
depends on the name type being used. If it’s in the form of http/ or
mssqlsvc/, etc then it would use KRB5_NT_SRV_INST. If it is host/ then it
would be KRB_NT_SRV_HST. If it’s in the form of a UPN then it would be
KRB_NT_ENTERPRISE_PRINCIPAL.""","There are many more places than krb5_parse_name_flags() that fail to set the proper principal type for ""krbtgt"".",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,173,2016-04-22T19:12:15Z,2016-11-15T04:03:12Z,2016-11-15T04:03:12Z,CLOSED,False,4,0,1,https://github.com/dmulder,Fix QAS Bug 21711: Kerberos BAD_INTEGRITY error with 2008 R2 RODC,1,[],https://github.com/heimdal/heimdal/pull/173,https://github.com/nicowilliams,12,https://github.com/heimdal/heimdal/pull/173#issuecomment-260541791,"BAD_INTEGRITY error when trying to kinit:
ERROR: VAS_ERR_KRB5: Failed to obtain credentials. Client: SLED10-32$@F.QAS,
Service: SLED10-32$@F.QAS, Server: ad2-f.f.qas
Caused by:
KRB5KRB_AP_ERR_BAD_INTEGRITY (-1765328353): Decrypt integrity check failed
MS changed code for RODCs in 2008R2. MS does state that ALL krgtgt/REALM tickets SHOULD be sent using principal name type of KRB5_NT_SRV_INST, instead of KRB5_NT_PRINCIPAL.
From Microsoft:
""I believe we discovered the problem. There isn’t a bug in Windows.
There’s been a code change to address another issue which puts in additional
checks for Kerberos tickets. The problem is with the Unix clients when the
client request a TGT. The Unix clients are using Name-type Principal
[KRB_NT_PRINCIPAL (1)] instead of using Name-type Service and Instance
[KRB_NT_SRV_INST (2)]....""
Further correspondence suggests that other tickets should be formatted to use:
""TGT’s should always be KRB5_NT_SRV_INST. As far as principal type, it
depends on the name type being used. If it’s in the form of http/ or
mssqlsvc/, etc then it would use KRB5_NT_SRV_INST. If it is host/ then it
would be KRB_NT_SRV_HST. If it’s in the form of a UPN then it would be
KRB_NT_ENTERPRISE_PRINCIPAL.""","Pushed:
22790e4 Test RODC interop fix
9e2b696 Make kdc name type strictness configurable
961f543 Set princ type to NT-SMTP-NAME when parsing
6a1db3f princ type NT-UNKNOWN + ""host"" == NT-SRV-HST
5aef50c gss-krb5: do_delegate remove dead comment
09bdb3a Set the right name type for anon princ (client)
020f2c7 kdc: principals of type NT-UNKNOWN can be anonymous
a59bb71 When building a princ name pick a sane def type",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,174,2016-04-28T10:23:35Z,2016-05-14T10:26:43Z,2016-05-14T10:28:38Z,MERGED,True,8,8,1,https://github.com/abhinav-upadhyay,Various fixes in kfb5.conf man page:,1,[],https://github.com/heimdal/heimdal/pull/174,https://github.com/abhinav-upadhyay,1,https://github.com/heimdal/heimdal/pull/174,"Fix grammar at multiple places
Also, fix mdoc syntax at one place. There should be a space between the
section and the comma in the .Xr macro.","Fix grammar at multiple places
Also, fix mdoc syntax at one place. There should be a space between the
section and the comma in the .Xr macro.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,174,2016-04-28T10:23:35Z,2016-05-14T10:26:43Z,2016-05-14T10:28:38Z,MERGED,True,8,8,1,https://github.com/abhinav-upadhyay,Various fixes in kfb5.conf man page:,1,[],https://github.com/heimdal/heimdal/pull/174,https://github.com/abhinav-upadhyay,2,https://github.com/heimdal/heimdal/pull/174#issuecomment-219211440,"Fix grammar at multiple places
Also, fix mdoc syntax at one place. There should be a space between the
section and the comma in the .Xr macro.","Hi,
Any comments on this?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,174,2016-04-28T10:23:35Z,2016-05-14T10:26:43Z,2016-05-14T10:28:38Z,MERGED,True,8,8,1,https://github.com/abhinav-upadhyay,Various fixes in kfb5.conf man page:,1,[],https://github.com/heimdal/heimdal/pull/174,https://github.com/abhinav-upadhyay,3,https://github.com/heimdal/heimdal/pull/174#issuecomment-219212968,"Fix grammar at multiple places
Also, fix mdoc syntax at one place. There should be a space between the
section and the comma in the .Xr macro.",Thank you! :),True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,176,2016-05-07T18:34:19Z,2016-05-17T07:05:20Z,2016-05-17T07:05:20Z,MERGED,True,7,1,1,https://github.com/urisimchoni,"Revert ""KVNOs are krb5uint32 in RFC4120, make it so""",1,[],https://github.com/heimdal/heimdal/pull/176,https://github.com/urisimchoni,1,https://github.com/heimdal/heimdal/pull/176,"This reverts commit 1124c48.
A reason for deviation from RFC4120 is backward compatibility.
With Windows RODC's, it is likely to have a kvno for the tgt which
has bit 31 set. Encoding such a kvno as unsigned would lead to a
5-byte number, whereas Windows, which treats kvno as int32, expects
up to 4 bytes. MIT Kerberos does the same for the exact same reason.
The encoding has already been reverted in commit
060474d. After reverting the encoding,
there's no reason to use krb5uint32 in the context of kvno, so this
commit reverts the rest, plus removes one more use of krb5uint32 in
the context of kvno.
Signed-off-by: Uri Simchoni uri@samba.org","This reverts commit 1124c48.
A reason for deviation from RFC4120 is backward compatibility.
With Windows RODC's, it is likely to have a kvno for the tgt which
has bit 31 set. Encoding such a kvno as unsigned would lead to a
5-byte number, whereas Windows, which treats kvno as int32, expects
up to 4 bytes. MIT Kerberos does the same for the exact same reason.
The encoding has already been reverted in commit
060474d. After reverting the encoding,
there's no reason to use krb5uint32 in the context of kvno, so this
commit reverts the rest, plus removes one more use of krb5uint32 in
the context of kvno.
Signed-off-by: Uri Simchoni uri@samba.org",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,176,2016-05-07T18:34:19Z,2016-05-17T07:05:20Z,2016-05-17T07:05:20Z,MERGED,True,7,1,1,https://github.com/urisimchoni,"Revert ""KVNOs are krb5uint32 in RFC4120, make it so""",1,[],https://github.com/heimdal/heimdal/pull/176,https://github.com/jaltman,2,https://github.com/heimdal/heimdal/pull/176#issuecomment-217671715,"This reverts commit 1124c48.
A reason for deviation from RFC4120 is backward compatibility.
With Windows RODC's, it is likely to have a kvno for the tgt which
has bit 31 set. Encoding such a kvno as unsigned would lead to a
5-byte number, whereas Windows, which treats kvno as int32, expects
up to 4 bytes. MIT Kerberos does the same for the exact same reason.
The encoding has already been reverted in commit
060474d. After reverting the encoding,
there's no reason to use krb5uint32 in the context of kvno, so this
commit reverts the rest, plus removes one more use of krb5uint32 in
the context of kvno.
Signed-off-by: Uri Simchoni uri@samba.org",Key version numbers should never be negative.  For that reason I would prefer that an unsigned type be used.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,176,2016-05-07T18:34:19Z,2016-05-17T07:05:20Z,2016-05-17T07:05:20Z,MERGED,True,7,1,1,https://github.com/urisimchoni,"Revert ""KVNOs are krb5uint32 in RFC4120, make it so""",1,[],https://github.com/heimdal/heimdal/pull/176,https://github.com/jaltman,3,https://github.com/heimdal/heimdal/pull/176#issuecomment-217678337,"This reverts commit 1124c48.
A reason for deviation from RFC4120 is backward compatibility.
With Windows RODC's, it is likely to have a kvno for the tgt which
has bit 31 set. Encoding such a kvno as unsigned would lead to a
5-byte number, whereas Windows, which treats kvno as int32, expects
up to 4 bytes. MIT Kerberos does the same for the exact same reason.
The encoding has already been reverted in commit
060474d. After reverting the encoding,
there's no reason to use krb5uint32 in the context of kvno, so this
commit reverts the rest, plus removes one more use of krb5uint32 in
the context of kvno.
Signed-off-by: Uri Simchoni uri@samba.org",To be clear what the RODC use of the 31st bit is being used for.  It is not part of the kvno.  It's a flag to indicate that it came from an RODC.   If we want to do something with it we should be masking it off and storing the rest as the kvno.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,176,2016-05-07T18:34:19Z,2016-05-17T07:05:20Z,2016-05-17T07:05:20Z,MERGED,True,7,1,1,https://github.com/urisimchoni,"Revert ""KVNOs are krb5uint32 in RFC4120, make it so""",1,[],https://github.com/heimdal/heimdal/pull/176,https://github.com/lhoward,4,https://github.com/heimdal/heimdal/pull/176#issuecomment-217679497,"This reverts commit 1124c48.
A reason for deviation from RFC4120 is backward compatibility.
With Windows RODC's, it is likely to have a kvno for the tgt which
has bit 31 set. Encoding such a kvno as unsigned would lead to a
5-byte number, whereas Windows, which treats kvno as int32, expects
up to 4 bytes. MIT Kerberos does the same for the exact same reason.
The encoding has already been reverted in commit
060474d. After reverting the encoding,
there's no reason to use krb5uint32 in the context of kvno, so this
commit reverts the rest, plus removes one more use of krb5uint32 in
the context of kvno.
Signed-off-by: Uri Simchoni uri@samba.org","You saw this yes?
https://blogs.msdn.microsoft.com/openspecification/2011/05/11/notes-on-kerberos-kvno-in-windows-rodc-environment/ https://blogs.msdn.microsoft.com/openspecification/2011/05/11/notes-on-kerberos-kvno-in-windows-rodc-environment/",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,176,2016-05-07T18:34:19Z,2016-05-17T07:05:20Z,2016-05-17T07:05:20Z,MERGED,True,7,1,1,https://github.com/urisimchoni,"Revert ""KVNOs are krb5uint32 in RFC4120, make it so""",1,[],https://github.com/heimdal/heimdal/pull/176,https://github.com/tlyu,5,https://github.com/heimdal/heimdal/pull/176#issuecomment-217681961,"This reverts commit 1124c48.
A reason for deviation from RFC4120 is backward compatibility.
With Windows RODC's, it is likely to have a kvno for the tgt which
has bit 31 set. Encoding such a kvno as unsigned would lead to a
5-byte number, whereas Windows, which treats kvno as int32, expects
up to 4 bytes. MIT Kerberos does the same for the exact same reason.
The encoding has already been reverted in commit
060474d. After reverting the encoding,
there's no reason to use krb5uint32 in the context of kvno, so this
commit reverts the rest, plus removes one more use of krb5uint32 in
the context of kvno.
Signed-off-by: Uri Simchoni uri@samba.org","My recollection is that the high-bit 32-bit kvno is being encoded as a negative ASN.1 INTEGER, therefore taking only 4 bytes at most in the encoding. (An unsigned 32-bit kvno with the high bit set would be encoded in 5 bytes, because all ASN.1 INTEGER values are encoded as signed in BER.) It is of course your choice how to represent it internally, as long as the wire encoding is as expected.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,176,2016-05-07T18:34:19Z,2016-05-17T07:05:20Z,2016-05-17T07:05:20Z,MERGED,True,7,1,1,https://github.com/urisimchoni,"Revert ""KVNOs are krb5uint32 in RFC4120, make it so""",1,[],https://github.com/heimdal/heimdal/pull/176,https://github.com/jaltman,6,https://github.com/heimdal/heimdal/pull/176#issuecomment-217683570,"This reverts commit 1124c48.
A reason for deviation from RFC4120 is backward compatibility.
With Windows RODC's, it is likely to have a kvno for the tgt which
has bit 31 set. Encoding such a kvno as unsigned would lead to a
5-byte number, whereas Windows, which treats kvno as int32, expects
up to 4 bytes. MIT Kerberos does the same for the exact same reason.
The encoding has already been reverted in commit
060474d. After reverting the encoding,
there's no reason to use krb5uint32 in the context of kvno, so this
commit reverts the rest, plus removes one more use of krb5uint32 in
the context of kvno.
Signed-off-by: Uri Simchoni uri@samba.org","@lhoward I've read that post the n the past.  Heimdal needs to encode as signed integer for the asn.1 to be properly generated but I think we should be representing internally as an unsigned integer,   Note that Microsoft is capping the max kvno value at 0xFFFF.  The upper 16-bits represent the unsigned RODC id.
@urisimchoni  Is Samba supporting the RODC mode?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,176,2016-05-07T18:34:19Z,2016-05-17T07:05:20Z,2016-05-17T07:05:20Z,MERGED,True,7,1,1,https://github.com/urisimchoni,"Revert ""KVNOs are krb5uint32 in RFC4120, make it so""",1,[],https://github.com/heimdal/heimdal/pull/176,https://github.com/urisimchoni,7,https://github.com/heimdal/heimdal/pull/176#issuecomment-217691634,"This reverts commit 1124c48.
A reason for deviation from RFC4120 is backward compatibility.
With Windows RODC's, it is likely to have a kvno for the tgt which
has bit 31 set. Encoding such a kvno as unsigned would lead to a
5-byte number, whereas Windows, which treats kvno as int32, expects
up to 4 bytes. MIT Kerberos does the same for the exact same reason.
The encoding has already been reverted in commit
060474d. After reverting the encoding,
there's no reason to use krb5uint32 in the context of kvno, so this
commit reverts the rest, plus removes one more use of krb5uint32 in
the context of kvno.
Signed-off-by: Uri Simchoni uri@samba.org","Here's a modified patch which keeps the interfaces unsigned, and just fixes a signed-unsigned pointer mismatch.
Samba supports RODC mode. The db glue code extracts the RODC-id from the kvno.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,176,2016-05-07T18:34:19Z,2016-05-17T07:05:20Z,2016-05-17T07:05:20Z,MERGED,True,7,1,1,https://github.com/urisimchoni,"Revert ""KVNOs are krb5uint32 in RFC4120, make it so""",1,[],https://github.com/heimdal/heimdal/pull/176,https://github.com/urisimchoni,8,https://github.com/heimdal/heimdal/pull/176#issuecomment-219631793,"This reverts commit 1124c48.
A reason for deviation from RFC4120 is backward compatibility.
With Windows RODC's, it is likely to have a kvno for the tgt which
has bit 31 set. Encoding such a kvno as unsigned would lead to a
5-byte number, whereas Windows, which treats kvno as int32, expects
up to 4 bytes. MIT Kerberos does the same for the exact same reason.
The encoding has already been reverted in commit
060474d. After reverting the encoding,
there's no reason to use krb5uint32 in the context of kvno, so this
commit reverts the rest, plus removes one more use of krb5uint32 in
the context of kvno.
Signed-off-by: Uri Simchoni uri@samba.org","Ping...
Can you please review the modified patch? it just handles what seems to be an implicit conversion of incompatible pointers (signed and unsigned). GCC generally allows this but ""picky developer builds"" and code checkers don't like it.
Thanks,
Uri.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,177,2016-05-15T23:06:54Z,2016-05-15T23:09:11Z,2016-05-15T23:32:17Z,MERGED,True,0,3,1,https://github.com/jelmer,Don't put system architecture in generated headers.,1,[],https://github.com/heimdal/heimdal/pull/177,https://github.com/jelmer,1,https://github.com/heimdal/heimdal/pull/177,"Including HOST causes the build to be unreproducible.
See also https://tests.reproducible-builds.org/rb-pkg/testing/i386/heimdal.html","Including HOST causes the build to be unreproducible.
See also https://tests.reproducible-builds.org/rb-pkg/testing/i386/heimdal.html",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,177,2016-05-15T23:06:54Z,2016-05-15T23:09:11Z,2016-05-15T23:32:17Z,MERGED,True,0,3,1,https://github.com/jelmer,Don't put system architecture in generated headers.,1,[],https://github.com/heimdal/heimdal/pull/177,https://github.com/abartlet,2,https://github.com/heimdal/heimdal/pull/177#issuecomment-219317804,"Including HOST causes the build to be unreproducible.
See also https://tests.reproducible-builds.org/rb-pkg/testing/i386/heimdal.html","This is important, the extra detail is not worth making the thing unreproducible.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,177,2016-05-15T23:06:54Z,2016-05-15T23:09:11Z,2016-05-15T23:32:17Z,MERGED,True,0,3,1,https://github.com/jelmer,Don't put system architecture in generated headers.,1,[],https://github.com/heimdal/heimdal/pull/177,https://github.com/jaltman,3,https://github.com/heimdal/heimdal/pull/177#issuecomment-219320708,"Including HOST causes the build to be unreproducible.
See also https://tests.reproducible-builds.org/rb-pkg/testing/i386/heimdal.html",@abartlet thank you for merging this and the others you have merged over the last few days.  I'm receiving e-mail notifications for the merge but not for the original pull request.  I need to figure out why.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,179,2016-06-10T18:50:08Z,2016-06-10T18:54:17Z,2016-06-11T08:39:57Z,MERGED,True,1,1,1,https://github.com/abhinav-upadhyay,Fix typo: Sepember -> September,1,[],https://github.com/heimdal/heimdal/pull/179,https://github.com/abhinav-upadhyay,1,https://github.com/heimdal/heimdal/pull/179,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,181,2016-06-17T17:39:20Z,2016-06-18T21:36:48Z,2016-06-18T21:36:48Z,CLOSED,False,2,1,1,https://github.com/UnitedMarsupials-zz,krb5_c_random_make_octets incorrectly implemented,2,[],https://github.com/heimdal/heimdal/pull/181,https://github.com/UnitedMarsupials-zz,1,https://github.com/heimdal/heimdal/pull/181,"The function, found in lib/krb5/mit_glue.c, is currently using krb5_generate_random_keyblock(). This compiles because warning-level is not high enough, but does not work. At runtime the krb5_generate_random_keyblock() interprets the second argument as the krb5_enctype (rather than a length of anything) and tries to verify it.
When the length does not match any known enctype, as usually happens, the function fails and returns an error. If the length happened to correspond to an enctype, the function would likely crash due to misinterpreting its third argument as a valid krb5_keyblock.
The change uses krb5_generate_random_block() instead. This function does not return anything -- upon detecting failure it will cause the entire application to exist instead...","The function, found in lib/krb5/mit_glue.c, is currently using krb5_generate_random_keyblock(). This compiles because warning-level is not high enough, but does not work. At runtime the krb5_generate_random_keyblock() interprets the second argument as the krb5_enctype (rather than a length of anything) and tries to verify it.
When the length does not match any known enctype, as usually happens, the function fails and returns an error. If the length happened to correspond to an enctype, the function would likely crash due to misinterpreting its third argument as a valid krb5_keyblock.
The change uses krb5_generate_random_block() instead. This function does not return anything -- upon detecting failure it will cause the entire application to exist instead...",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,181,2016-06-17T17:39:20Z,2016-06-18T21:36:48Z,2016-06-18T21:36:48Z,CLOSED,False,2,1,1,https://github.com/UnitedMarsupials-zz,krb5_c_random_make_octets incorrectly implemented,2,[],https://github.com/heimdal/heimdal/pull/181,https://github.com/jaltman,2,https://github.com/heimdal/heimdal/pull/181#issuecomment-226962280,"The function, found in lib/krb5/mit_glue.c, is currently using krb5_generate_random_keyblock(). This compiles because warning-level is not high enough, but does not work. At runtime the krb5_generate_random_keyblock() interprets the second argument as the krb5_enctype (rather than a length of anything) and tries to verify it.
When the length does not match any known enctype, as usually happens, the function fails and returns an error. If the length happened to correspond to an enctype, the function would likely crash due to misinterpreting its third argument as a valid krb5_keyblock.
The change uses krb5_generate_random_block() instead. This function does not return anything -- upon detecting failure it will cause the entire application to exist instead...",While the overall change is correct could you please squash the two commits into a single commit and resubmit the pull request.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,181,2016-06-17T17:39:20Z,2016-06-18T21:36:48Z,2016-06-18T21:36:48Z,CLOSED,False,2,1,1,https://github.com/UnitedMarsupials-zz,krb5_c_random_make_octets incorrectly implemented,2,[],https://github.com/heimdal/heimdal/pull/181,https://github.com/UnitedMarsupials-zz,3,https://github.com/heimdal/heimdal/pull/181#issuecomment-226963988,"The function, found in lib/krb5/mit_glue.c, is currently using krb5_generate_random_keyblock(). This compiles because warning-level is not high enough, but does not work. At runtime the krb5_generate_random_keyblock() interprets the second argument as the krb5_enctype (rather than a length of anything) and tries to verify it.
When the length does not match any known enctype, as usually happens, the function fails and returns an error. If the length happened to correspond to an enctype, the function would likely crash due to misinterpreting its third argument as a valid krb5_keyblock.
The change uses krb5_generate_random_block() instead. This function does not return anything -- upon detecting failure it will cause the entire application to exist instead...","resubmit the pull request

@jaltman, seriously? Should I also wear a jacket, while doing it? It is a one-line change, for crying out loud!
It is bad enough, you did not thank me, you want me to do more work? Ah, and then you were going to ask me to submit a separate pull-request for each of Heimdal's mutliple branches, were you not?
Sorry. I raised your awareness of the problem -- and even provided a fix. If it is not in a format you can use in the browser -- too bad.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,181,2016-06-17T17:39:20Z,2016-06-18T21:36:48Z,2016-06-18T21:36:48Z,CLOSED,False,2,1,1,https://github.com/UnitedMarsupials-zz,krb5_c_random_make_octets incorrectly implemented,2,[],https://github.com/heimdal/heimdal/pull/181,https://github.com/jaltman,4,https://github.com/heimdal/heimdal/pull/181#issuecomment-226966298,"The function, found in lib/krb5/mit_glue.c, is currently using krb5_generate_random_keyblock(). This compiles because warning-level is not high enough, but does not work. At runtime the krb5_generate_random_keyblock() interprets the second argument as the krb5_enctype (rather than a length of anything) and tries to verify it.
When the length does not match any known enctype, as usually happens, the function fails and returns an error. If the length happened to correspond to an enctype, the function would likely crash due to misinterpreting its third argument as a valid krb5_keyblock.
The change uses krb5_generate_random_block() instead. This function does not return anything -- upon detecting failure it will cause the entire application to exist instead...","@UnitedMarsupials Agreed.  Its a one line change submitted as a pull request with two commits that change the same line twice.  I can't accept the pull up request as-is.   One of us will need to do more work.  As a user of Heimdal you have gained the benefit of the work that others have put into its development and maintenance.  No one is paid to work on Heimdal.  The project relies entirely upon volunteer efforts.  I am closing this request and manually submit the change as a single commit.
9f6baf0",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,185,2016-07-21T18:37:58Z,2016-07-21T19:02:11Z,2016-07-21T19:02:20Z,MERGED,True,0,7,2,https://github.com/emaste,Remove duplicate symbols from libroken version-script.map,2,[],https://github.com/heimdal/heimdal/pull/185,https://github.com/emaste,1,https://github.com/heimdal/heimdal/pull/185,"Commit efed563 (r24759) prefixed some symbols with rk_, but introduced 6 duplicate symbols in the version script (because the rk_-prefixed versions of the symbols were already present).","Commit efed563 (r24759) prefixed some symbols with rk_, but introduced 6 duplicate symbols in the version script (because the rk_-prefixed versions of the symbols were already present).",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,185,2016-07-21T18:37:58Z,2016-07-21T19:02:11Z,2016-07-21T19:02:20Z,MERGED,True,0,7,2,https://github.com/emaste,Remove duplicate symbols from libroken version-script.map,2,[],https://github.com/heimdal/heimdal/pull/185,https://github.com/lha,2,https://github.com/heimdal/heimdal/pull/185#issuecomment-234351339,"Commit efed563 (r24759) prefixed some symbols with rk_, but introduced 6 duplicate symbols in the version script (because the rk_-prefixed versions of the symbols were already present).",thanks,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,186,2016-07-23T10:43:25Z,2016-09-30T15:37:06Z,2016-09-30T17:04:08Z,MERGED,True,30,0,2,https://github.com/urisimchoni,Honor krb5.conf-configured etypes for GSSAPI TGS request,1,[],https://github.com/heimdal/heimdal/pull/186,https://github.com/urisimchoni,1,https://github.com/heimdal/heimdal/pull/186,"When sending a TGS request as part of GSSAPI client-side
context negotiation, use for etypes the value in the
credentials, and if that's not set - the values in the
configuration.
When the krb5 context is created, and krb5.conf is read, the allowed enctyption types are set to whatever is in krb5.conf (or the full set as default). Then, without this patch, if no enc types are associated with the credentials, the enc types are reset to the full set. This would not allow limiting the encryption types via configuration.
It seems like the current code is intentional. I was just unable to figure out the intent (I get the part of overriding the etypes with the stuff in the credentials, but not the part of resetting to default). Therefore I'm sending over this pull request - to be accepted or rejected with an explanation.","When sending a TGS request as part of GSSAPI client-side
context negotiation, use for etypes the value in the
credentials, and if that's not set - the values in the
configuration.
When the krb5 context is created, and krb5.conf is read, the allowed enctyption types are set to whatever is in krb5.conf (or the full set as default). Then, without this patch, if no enc types are associated with the credentials, the enc types are reset to the full set. This would not allow limiting the encryption types via configuration.
It seems like the current code is intentional. I was just unable to figure out the intent (I get the part of overriding the etypes with the stuff in the credentials, but not the part of resetting to default). Therefore I'm sending over this pull request - to be accepted or rejected with an explanation.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,186,2016-07-23T10:43:25Z,2016-09-30T15:37:06Z,2016-09-30T17:04:08Z,MERGED,True,30,0,2,https://github.com/urisimchoni,Honor krb5.conf-configured etypes for GSSAPI TGS request,1,[],https://github.com/heimdal/heimdal/pull/186,https://github.com/jaltman,2,https://github.com/heimdal/heimdal/pull/186#issuecomment-234716099,"When sending a TGS request as part of GSSAPI client-side
context negotiation, use for etypes the value in the
credentials, and if that's not set - the values in the
configuration.
When the krb5 context is created, and krb5.conf is read, the allowed enctyption types are set to whatever is in krb5.conf (or the full set as default). Then, without this patch, if no enc types are associated with the credentials, the enc types are reset to the full set. This would not allow limiting the encryption types via configuration.
It seems like the current code is intentional. I was just unable to figure out the intent (I get the part of overriding the etypes with the stuff in the credentials, but not the part of resetting to default). Therefore I'm sending over this pull request - to be accepted or rejected with an explanation.",@lha do you remember the reason for resetting to the default set of enctypes in d3807ad ?,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,186,2016-07-23T10:43:25Z,2016-09-30T15:37:06Z,2016-09-30T17:04:08Z,MERGED,True,30,0,2,https://github.com/urisimchoni,Honor krb5.conf-configured etypes for GSSAPI TGS request,1,[],https://github.com/heimdal/heimdal/pull/186,https://github.com/urisimchoni,3,https://github.com/heimdal/heimdal/pull/186#issuecomment-237132608,"When sending a TGS request as part of GSSAPI client-side
context negotiation, use for etypes the value in the
credentials, and if that's not set - the values in the
configuration.
When the krb5 context is created, and krb5.conf is read, the allowed enctyption types are set to whatever is in krb5.conf (or the full set as default). Then, without this patch, if no enc types are associated with the credentials, the enc types are reset to the full set. This would not allow limiting the encryption types via configuration.
It seems like the current code is intentional. I was just unable to figure out the intent (I get the part of overriding the etypes with the stuff in the credentials, but not the part of resetting to default). Therefore I'm sending over this pull request - to be accepted or rejected with an explanation.",Ping...,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,186,2016-07-23T10:43:25Z,2016-09-30T15:37:06Z,2016-09-30T17:04:08Z,MERGED,True,30,0,2,https://github.com/urisimchoni,Honor krb5.conf-configured etypes for GSSAPI TGS request,1,[],https://github.com/heimdal/heimdal/pull/186,https://github.com/abartlet,4,https://github.com/heimdal/heimdal/pull/186#issuecomment-247234078,"When sending a TGS request as part of GSSAPI client-side
context negotiation, use for etypes the value in the
credentials, and if that's not set - the values in the
configuration.
When the krb5 context is created, and krb5.conf is read, the allowed enctyption types are set to whatever is in krb5.conf (or the full set as default). Then, without this patch, if no enc types are associated with the credentials, the enc types are reset to the full set. This would not allow limiting the encryption types via configuration.
It seems like the current code is intentional. I was just unable to figure out the intent (I get the part of overriding the etypes with the stuff in the credentials, but not the part of resetting to default). Therefore I'm sending over this pull request - to be accepted or rejected with an explanation.","This change is needed for Samba, but there is an issue with it generally.
I've looked over it carefully, and the reason that it is set to NULL is that otherwise it will tatoo the long-term context with the encryption types of any one credential.
We need to extend the krb5_context to have a config_etypes variable, initially set the same, and reset etypes to that variable if NULL is specified.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,186,2016-07-23T10:43:25Z,2016-09-30T15:37:06Z,2016-09-30T17:04:08Z,MERGED,True,30,0,2,https://github.com/urisimchoni,Honor krb5.conf-configured etypes for GSSAPI TGS request,1,[],https://github.com/heimdal/heimdal/pull/186,https://github.com/abartlet,5,https://github.com/heimdal/heimdal/pull/186#issuecomment-247234256,"When sending a TGS request as part of GSSAPI client-side
context negotiation, use for etypes the value in the
credentials, and if that's not set - the values in the
configuration.
When the krb5 context is created, and krb5.conf is read, the allowed enctyption types are set to whatever is in krb5.conf (or the full set as default). Then, without this patch, if no enc types are associated with the credentials, the enc types are reset to the full set. This would not allow limiting the encryption types via configuration.
It seems like the current code is intentional. I was just unable to figure out the intent (I get the part of overriding the etypes with the stuff in the credentials, but not the part of resetting to default). Therefore I'm sending over this pull request - to be accepted or rejected with an explanation.","To be clear, the lifetime of context in init_auth is very long, as under the hood it is essentially per-thread static via the GSSAPI_KRB5_INIT() -> _gsskrb5_init() code.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,186,2016-07-23T10:43:25Z,2016-09-30T15:37:06Z,2016-09-30T17:04:08Z,MERGED,True,30,0,2,https://github.com/urisimchoni,Honor krb5.conf-configured etypes for GSSAPI TGS request,1,[],https://github.com/heimdal/heimdal/pull/186,https://github.com/urisimchoni,6,https://github.com/heimdal/heimdal/pull/186#issuecomment-249376735,"When sending a TGS request as part of GSSAPI client-side
context negotiation, use for etypes the value in the
credentials, and if that's not set - the values in the
configuration.
When the krb5 context is created, and krb5.conf is read, the allowed enctyption types are set to whatever is in krb5.conf (or the full set as default). Then, without this patch, if no enc types are associated with the credentials, the enc types are reset to the full set. This would not allow limiting the encryption types via configuration.
It seems like the current code is intentional. I was just unable to figure out the intent (I get the part of overriding the etypes with the stuff in the credentials, but not the part of resetting to default). Therefore I'm sending over this pull request - to be accepted or rejected with an explanation.","New patch version tackles the problem as Andrew suggested. I've verified that it also fixes things for Samba, with original patch reverted.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,187,2016-08-02T17:32:20Z,2016-08-02T18:45:45Z,2016-08-02T18:45:45Z,CLOSED,False,60,23,18,https://github.com/dmulder,Merge fixes from Dell into heimdal master,1,[],https://github.com/heimdal/heimdal/pull/187,https://github.com/dmulder,1,https://github.com/heimdal/heimdal/pull/187,"A small sample of fixes in Dell's heimdal branch. More will follow after extensive code review.

The --disable-afs-support doesn't really disable afs. It still gets built, and kinit still links to it, although it doesn't use it.
Plus various fixes for compiler errors on various platforms (mostly hpux, aix, solaris, and mac).","A small sample of fixes in Dell's heimdal branch. More will follow after extensive code review.

The --disable-afs-support doesn't really disable afs. It still gets built, and kinit still links to it, although it doesn't use it.
Plus various fixes for compiler errors on various platforms (mostly hpux, aix, solaris, and mac).",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,187,2016-08-02T17:32:20Z,2016-08-02T18:45:45Z,2016-08-02T18:45:45Z,CLOSED,False,60,23,18,https://github.com/dmulder,Merge fixes from Dell into heimdal master,1,[],https://github.com/heimdal/heimdal/pull/187,https://github.com/jaltman,2,https://github.com/heimdal/heimdal/pull/187#issuecomment-236986370,"A small sample of fixes in Dell's heimdal branch. More will follow after extensive code review.

The --disable-afs-support doesn't really disable afs. It still gets built, and kinit still links to it, although it doesn't use it.
Plus various fixes for compiler errors on various platforms (mostly hpux, aix, solaris, and mac).","@Davidmulder I would prefer to see separate patches for each of the various platforms.  Ideally the commit messages would include the error/warning message from the compiler along with the compiler version information as well as the platform.
One patch for HPUX, one for AIX, one for Solaris, etc.
The --disable-afs-support change would also be its own commit.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,187,2016-08-02T17:32:20Z,2016-08-02T18:45:45Z,2016-08-02T18:45:45Z,CLOSED,False,60,23,18,https://github.com/dmulder,Merge fixes from Dell into heimdal master,1,[],https://github.com/heimdal/heimdal/pull/187,https://github.com/dmulder,3,https://github.com/heimdal/heimdal/pull/187#issuecomment-236990656,"A small sample of fixes in Dell's heimdal branch. More will follow after extensive code review.

The --disable-afs-support doesn't really disable afs. It still gets built, and kinit still links to it, although it doesn't use it.
Plus various fixes for compiler errors on various platforms (mostly hpux, aix, solaris, and mac).",I'll see what I can do.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,188,2016-08-02T18:59:48Z,2016-08-02T20:50:15Z,2016-08-02T20:50:28Z,MERGED,True,10,2,3,https://github.com/dmulder,--disable-afs-support doesn't really disable afs,1,[],https://github.com/heimdal/heimdal/pull/188,https://github.com/dmulder,1,https://github.com/heimdal/heimdal/pull/188,"The --disable-afs-support configure flag doesn't really disable afs. It still gets built, and kinit still links to it, although it doesn't use it.","The --disable-afs-support configure flag doesn't really disable afs. It still gets built, and kinit still links to it, although it doesn't use it.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,188,2016-08-02T18:59:48Z,2016-08-02T20:50:15Z,2016-08-02T20:50:28Z,MERGED,True,10,2,3,https://github.com/dmulder,--disable-afs-support doesn't really disable afs,1,[],https://github.com/heimdal/heimdal/pull/188,https://github.com/jaltman,2,https://github.com/heimdal/heimdal/pull/188#issuecomment-237039253,"The --disable-afs-support configure flag doesn't really disable afs. It still gets built, and kinit still links to it, although it doesn't use it.",thank you.   commit merged.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,189,2016-08-02T19:15:50Z,,2021-03-11T03:26:50Z,OPEN,False,17,0,2,https://github.com/dmulder,"Fix ULLONG_MAX, LLONG_MAX and LLONG_MIN undefined on hpux pa 11.11",1,[],https://github.com/heimdal/heimdal/pull/189,https://github.com/dmulder,1,https://github.com/heimdal/heimdal/pull/189,"I get the following error on hpux pa 11.11:
strtoull.c: In function 'rk_strtoull':
strtoull.c:94:14: error: 'ULLONG_MAX' undeclared (first use in this function)
strtoull.c:94:14: note: each undeclared identifier is reported only once for each function it appears in
gmake[8]: *** [strtoull.lo] Error 1
gmake[8]: *** Waiting for unfinished jobs....
strtoll.c: In function 'rk_strtoll':
strtoll.c:114:42: error: 'LLONG_MIN' undeclared (first use in this function)
strtoll.c:114:42: note: each undeclared identifier is reported only once for each function it appears in
strtoll.c:114:54: error: 'LLONG_MAX' undeclared (first use in this function)
gmake[8]: *** [strtoll.lo] Error 1
mv -f .deps/strupr.Tpo .deps/strupr.Plo
gmake[8]: Leaving directory `heimdal/src/lib/roken'
gcc 4.7.1
HP-UX B.11.11 U 9000/800","I get the following error on hpux pa 11.11:
strtoull.c: In function 'rk_strtoull':
strtoull.c:94:14: error: 'ULLONG_MAX' undeclared (first use in this function)
strtoull.c:94:14: note: each undeclared identifier is reported only once for each function it appears in
gmake[8]: *** [strtoull.lo] Error 1
gmake[8]: *** Waiting for unfinished jobs....
strtoll.c: In function 'rk_strtoll':
strtoll.c:114:42: error: 'LLONG_MIN' undeclared (first use in this function)
strtoll.c:114:42: note: each undeclared identifier is reported only once for each function it appears in
strtoll.c:114:54: error: 'LLONG_MAX' undeclared (first use in this function)
gmake[8]: *** [strtoll.lo] Error 1
mv -f .deps/strupr.Tpo .deps/strupr.Plo
gmake[8]: Leaving directory `heimdal/src/lib/roken'
gcc 4.7.1
HP-UX B.11.11 U 9000/800",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,189,2016-08-02T19:15:50Z,,2021-03-11T03:26:50Z,OPEN,False,17,0,2,https://github.com/dmulder,"Fix ULLONG_MAX, LLONG_MAX and LLONG_MIN undefined on hpux pa 11.11",1,[],https://github.com/heimdal/heimdal/pull/189,https://github.com/jaltman,2,https://github.com/heimdal/heimdal/pull/189#issuecomment-237042345,"I get the following error on hpux pa 11.11:
strtoull.c: In function 'rk_strtoull':
strtoull.c:94:14: error: 'ULLONG_MAX' undeclared (first use in this function)
strtoull.c:94:14: note: each undeclared identifier is reported only once for each function it appears in
gmake[8]: *** [strtoull.lo] Error 1
gmake[8]: *** Waiting for unfinished jobs....
strtoll.c: In function 'rk_strtoll':
strtoll.c:114:42: error: 'LLONG_MIN' undeclared (first use in this function)
strtoll.c:114:42: note: each undeclared identifier is reported only once for each function it appears in
strtoll.c:114:54: error: 'LLONG_MAX' undeclared (first use in this function)
gmake[8]: *** [strtoll.lo] Error 1
mv -f .deps/strupr.Tpo .deps/strupr.Plo
gmake[8]: Leaving directory `heimdal/src/lib/roken'
gcc 4.7.1
HP-UX B.11.11 U 9000/800",The right place for these conditionals would be in lib/roken/roken.h.in unless there is some reason not to.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,189,2016-08-02T19:15:50Z,,2021-03-11T03:26:50Z,OPEN,False,17,0,2,https://github.com/dmulder,"Fix ULLONG_MAX, LLONG_MAX and LLONG_MIN undefined on hpux pa 11.11",1,[],https://github.com/heimdal/heimdal/pull/189,https://github.com/dmulder,3,https://github.com/heimdal/heimdal/pull/189#issuecomment-237298630,"I get the following error on hpux pa 11.11:
strtoull.c: In function 'rk_strtoull':
strtoull.c:94:14: error: 'ULLONG_MAX' undeclared (first use in this function)
strtoull.c:94:14: note: each undeclared identifier is reported only once for each function it appears in
gmake[8]: *** [strtoull.lo] Error 1
gmake[8]: *** Waiting for unfinished jobs....
strtoll.c: In function 'rk_strtoll':
strtoll.c:114:42: error: 'LLONG_MIN' undeclared (first use in this function)
strtoll.c:114:42: note: each undeclared identifier is reported only once for each function it appears in
strtoll.c:114:54: error: 'LLONG_MAX' undeclared (first use in this function)
gmake[8]: *** [strtoll.lo] Error 1
mv -f .deps/strupr.Tpo .deps/strupr.Plo
gmake[8]: Leaving directory `heimdal/src/lib/roken'
gcc 4.7.1
HP-UX B.11.11 U 9000/800",Fixed,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,190,2016-08-02T19:45:36Z,2016-08-02T22:30:21Z,2016-08-02T22:30:22Z,MERGED,True,6,0,3,https://github.com/dmulder,The evp-w32.h header should not be included on all platforms,1,[],https://github.com/heimdal/heimdal/pull/190,https://github.com/dmulder,1,https://github.com/heimdal/heimdal/pull/190,"This caused undefined symbol errors on multiple platforms. I can't remember which. Seems like it was x86 solaris and ia64 hpux.
gcc 4.6.1","This caused undefined symbol errors on multiple platforms. I can't remember which. Seems like it was x86 solaris and ia64 hpux.
gcc 4.6.1",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,190,2016-08-02T19:45:36Z,2016-08-02T22:30:21Z,2016-08-02T22:30:22Z,MERGED,True,6,0,3,https://github.com/dmulder,The evp-w32.h header should not be included on all platforms,1,[],https://github.com/heimdal/heimdal/pull/190,https://github.com/jaltman,2,https://github.com/heimdal/heimdal/pull/190#issuecomment-237038348,"This caused undefined symbol errors on multiple platforms. I can't remember which. Seems like it was x86 solaris and ia64 hpux.
gcc 4.6.1","The conditional should be
#ifdef _WIN32
not
#ifdef _WIN32_",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,190,2016-08-02T19:45:36Z,2016-08-02T22:30:21Z,2016-08-02T22:30:22Z,MERGED,True,6,0,3,https://github.com/dmulder,The evp-w32.h header should not be included on all platforms,1,[],https://github.com/heimdal/heimdal/pull/190,https://github.com/dmulder,3,https://github.com/heimdal/heimdal/pull/190#issuecomment-237062441,"This caused undefined symbol errors on multiple platforms. I can't remember which. Seems like it was x86 solaris and ia64 hpux.
gcc 4.6.1",Fixed,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,191,2016-08-02T19:54:12Z,,2021-03-11T03:26:50Z,OPEN,False,2,0,1,https://github.com/dmulder,Redefinition errors on ppc64 linux,1,[],https://github.com/heimdal/heimdal/pull/191,https://github.com/dmulder,1,https://github.com/heimdal/heimdal/pull/191,These defines cause redefinition warnings on most platforms/compilers. On ppc64 linux with gcc 4.7 it caused an error.,These defines cause redefinition warnings on most platforms/compilers. On ppc64 linux with gcc 4.7 it caused an error.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,191,2016-08-02T19:54:12Z,,2021-03-11T03:26:50Z,OPEN,False,2,0,1,https://github.com/dmulder,Redefinition errors on ppc64 linux,1,[],https://github.com/heimdal/heimdal/pull/191,https://github.com/jaltman,2,https://github.com/heimdal/heimdal/pull/191#issuecomment-237045764,These defines cause redefinition warnings on most platforms/compilers. On ppc64 linux with gcc 4.7 it caused an error.,The correct define for Windows is _WIN32 but the correct fix for this is to include the header file in roken.h.in that defines EAFNOSUPPORT and EWOULDBLOCK.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,191,2016-08-02T19:54:12Z,,2021-03-11T03:26:50Z,OPEN,False,2,0,1,https://github.com/dmulder,Redefinition errors on ppc64 linux,1,[],https://github.com/heimdal/heimdal/pull/191,https://github.com/dmulder,3,https://github.com/heimdal/heimdal/pull/191#issuecomment-237059700,These defines cause redefinition warnings on most platforms/compilers. On ppc64 linux with gcc 4.7 it caused an error.,"Those defines are in errno.h, which if you look in roken.h.in, it's already included.
Maybe the failure here is that HAVE_ERRNO_H isn't defined? That should be defined in config.h, but I don't see config.h included anywhere in roken.h.in.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,191,2016-08-02T19:54:12Z,,2021-03-11T03:26:50Z,OPEN,False,2,0,1,https://github.com/dmulder,Redefinition errors on ppc64 linux,1,[],https://github.com/heimdal/heimdal/pull/191,https://github.com/lhoward,4,https://github.com/heimdal/heimdal/pull/191#issuecomment-450088831,These defines cause redefinition warnings on most platforms/compilers. On ppc64 linux with gcc 4.7 it caused an error.,"@dmulder, where are the redefinition warnings coming from? Perhaps the problem is that they are not including config.h before roken.h?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,192,2016-08-03T19:19:14Z,2017-09-25T23:26:36Z,2017-09-25T23:32:28Z,MERGED,True,7,1,2,https://github.com/dmulder,Solaris 8 x86 uses ->d_fd not ->dd_fd or dirfd(),1,[],https://github.com/heimdal/heimdal/pull/192,https://github.com/dmulder,1,https://github.com/heimdal/heimdal/pull/192,"Here's a stack overflow article for reference:
http://stackoverflow.com/questions/28022507/solaris-10-alternative-to-dirfd
On Solaris 8 x86 there is no dirfd() or ->dd_fd, so we need to check for ->d_fd also.","Here's a stack overflow article for reference:
http://stackoverflow.com/questions/28022507/solaris-10-alternative-to-dirfd
On Solaris 8 x86 there is no dirfd() or ->dd_fd, so we need to check for ->d_fd also.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,192,2016-08-03T19:19:14Z,2017-09-25T23:26:36Z,2017-09-25T23:32:28Z,MERGED,True,7,1,2,https://github.com/dmulder,Solaris 8 x86 uses ->d_fd not ->dd_fd or dirfd(),1,[],https://github.com/heimdal/heimdal/pull/192,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/192#issuecomment-332043006,"Here's a stack overflow article for reference:
http://stackoverflow.com/questions/28022507/solaris-10-alternative-to-dirfd
On Solaris 8 x86 there is no dirfd() or ->dd_fd, so we need to check for ->d_fd also.",Thanks!,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,193,2016-08-04T16:59:03Z,2018-12-24T02:30:13Z,2018-12-24T02:30:13Z,MERGED,True,1,1,1,https://github.com/dmulder,"solaris 8 sparc defines _LP64 to empty, causing build failure",1,[],https://github.com/heimdal/heimdal/pull/193,https://github.com/dmulder,1,https://github.com/heimdal/heimdal/pull/193,"When building with -m64 on solaris 8 sparc, the build fails with:
evp-pkcs11.c:63:11: error: #if with no expression
On solaris 8, _LP64 is defined as nothing, so we need to check if it's defined, not if it is defined as 1.
gcc 4.6.1","When building with -m64 on solaris 8 sparc, the build fails with:
evp-pkcs11.c:63:11: error: #if with no expression
On solaris 8, _LP64 is defined as nothing, so we need to check if it's defined, not if it is defined as 1.
gcc 4.6.1",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,195,2016-08-09T16:37:03Z,2016-08-10T00:59:38Z,2016-08-10T00:59:38Z,CLOSED,False,2,3,1,https://github.com/dmulder,krb5_check_transited() ret variable is unused,1,[],https://github.com/heimdal/heimdal/pull/195,https://github.com/dmulder,1,https://github.com/heimdal/heimdal/pull/195,"On aix 5.3 and solaris 10 x64
transited.c: In function 'krb5_check_transited':
transited.c:607:21: error: variable 'ret' set but not used [-Werror=unused-but-set-variable]
cc1: all warnings being treated as errors
gcc 4.6.2 on both systems.
Also,
transited.c: In function '_krb5_find_capath':
transited.c:487:16: error: 'len' may be used uninitialized in this function [-Werror=uninitialized]
transited.c:450:12: note: 'len' was declared here
Same systems and gcc
Fixing commit 1501740","On aix 5.3 and solaris 10 x64
transited.c: In function 'krb5_check_transited':
transited.c:607:21: error: variable 'ret' set but not used [-Werror=unused-but-set-variable]
cc1: all warnings being treated as errors
gcc 4.6.2 on both systems.
Also,
transited.c: In function '_krb5_find_capath':
transited.c:487:16: error: 'len' may be used uninitialized in this function [-Werror=uninitialized]
transited.c:450:12: note: 'len' was declared here
Same systems and gcc
Fixing commit 1501740",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,195,2016-08-09T16:37:03Z,2016-08-10T00:59:38Z,2016-08-10T00:59:38Z,CLOSED,False,2,3,1,https://github.com/dmulder,krb5_check_transited() ret variable is unused,1,[],https://github.com/heimdal/heimdal/pull/195,https://github.com/jaltman,2,https://github.com/heimdal/heimdal/pull/195#issuecomment-238628214,"On aix 5.3 and solaris 10 x64
transited.c: In function 'krb5_check_transited':
transited.c:607:21: error: variable 'ret' set but not used [-Werror=unused-but-set-variable]
cc1: all warnings being treated as errors
gcc 4.6.2 on both systems.
Also,
transited.c: In function '_krb5_find_capath':
transited.c:487:16: error: 'len' may be used uninitialized in this function [-Werror=uninitialized]
transited.c:450:12: note: 'len' was declared here
Same systems and gcc
Fixing commit 1501740","@nicowilliams Please review and fix since you merged Viktor's change.
@Davidmulder Please include the sha1 of the commit you are fixing in the commit message.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,196,2016-08-09T18:22:23Z,2016-08-10T05:22:03Z,2016-08-10T05:22:03Z,MERGED,True,1,1,1,https://github.com/dmulder,Properly define the NO_AFS AM_CONDITIONAL,1,[],https://github.com/heimdal/heimdal/pull/196,https://github.com/dmulder,1,https://github.com/heimdal/heimdal/pull/196,"My fix in d808016 turns off AFS all the time. @nicowilliams fix in 6d1571a leaves AFS on always.
This is the proper way to define the AM_CONDITIONAL. I tested this with and without the --disable-afs-support flag, and it now behaves correctly.","My fix in d808016 turns off AFS all the time. @nicowilliams fix in 6d1571a leaves AFS on always.
This is the proper way to define the AM_CONDITIONAL. I tested this with and without the --disable-afs-support flag, and it now behaves correctly.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,197,2016-08-10T21:24:23Z,2016-08-10T21:52:06Z,2016-08-10T21:52:06Z,CLOSED,False,31,34,2,https://github.com/dmulder,Related to vas segfault from re-defining krb5_krbhst_data,1,[],https://github.com/heimdal/heimdal/pull/197,https://github.com/dmulder,1,https://github.com/heimdal/heimdal/pull/197,"At some point a VAS dev re-defined krb5_krbhst_data because we only get a stub from the header file. When I updated our heimdal version, the VAS re-definition was different from the heimdal definition, which ended up corrupting some values in the structure when passed to VAS source.
I moved the definition of krb5_krbhst_data into krb5.h to solve that problem, but figured I'd push this upstream since it just makes since to be there instead of in the source file.","At some point a VAS dev re-defined krb5_krbhst_data because we only get a stub from the header file. When I updated our heimdal version, the VAS re-definition was different from the heimdal definition, which ended up corrupting some values in the structure when passed to VAS source.
I moved the definition of krb5_krbhst_data into krb5.h to solve that problem, but figured I'd push this upstream since it just makes since to be there instead of in the source file.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,197,2016-08-10T21:24:23Z,2016-08-10T21:52:06Z,2016-08-10T21:52:06Z,CLOSED,False,31,34,2,https://github.com/dmulder,Related to vas segfault from re-defining krb5_krbhst_data,1,[],https://github.com/heimdal/heimdal/pull/197,https://github.com/jaltman,2,https://github.com/heimdal/heimdal/pull/197#issuecomment-239010223,"At some point a VAS dev re-defined krb5_krbhst_data because we only get a stub from the header file. When I updated our heimdal version, the VAS re-definition was different from the heimdal definition, which ended up corrupting some values in the structure when passed to VAS source.
I moved the definition of krb5_krbhst_data into krb5.h to solve that problem, but figured I'd push this upstream since it just makes since to be there instead of in the source file.","krb5.h is for public data structures only.   krb5_krbhst_data is a private data structure that should be opaque to public consumers of krb5.h.
Why does VAS need to access the private data structure?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,197,2016-08-10T21:24:23Z,2016-08-10T21:52:06Z,2016-08-10T21:52:06Z,CLOSED,False,31,34,2,https://github.com/dmulder,Related to vas segfault from re-defining krb5_krbhst_data,1,[],https://github.com/heimdal/heimdal/pull/197,https://github.com/dmulder,3,https://github.com/heimdal/heimdal/pull/197#issuecomment-239011392,"At some point a VAS dev re-defined krb5_krbhst_data because we only get a stub from the header file. When I updated our heimdal version, the VAS re-definition was different from the heimdal definition, which ended up corrupting some values in the structure when passed to VAS source.
I moved the definition of krb5_krbhst_data into krb5.h to solve that problem, but figured I'd push this upstream since it just makes since to be there instead of in the source file.","Looks like it's part of our hairy sendto code.
It's because we're injecting our own sendto code inside of krb5_sendto_context() (used to be krb5_sendto()).
Feel free to reject this. I'll be pulling those changes out anyway. Sorry I missed that.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,198,2016-08-10T21:43:19Z,2017-03-09T19:11:21Z,2017-03-09T19:11:21Z,MERGED,True,2,0,1,https://github.com/dmulder,"On hpux, pthread_cond_t is undefined when pthread is disabled",1,[],https://github.com/heimdal/heimdal/pull/198,https://github.com/dmulder,1,https://github.com/heimdal/heimdal/pull/198,"Since pthread_cond_t is undefined, if I disable pthread with --disable-pthread-support, it should try to create this struct. It isn't used anyway, since the only place it's used is inside a #if ENABLE_PTHREAD_SUPPORT block.
I think this was on hpux pa 11.11 with gcc 4.7.1.","Since pthread_cond_t is undefined, if I disable pthread with --disable-pthread-support, it should try to create this struct. It isn't used anyway, since the only place it's used is inside a #if ENABLE_PTHREAD_SUPPORT block.
I think this was on hpux pa 11.11 with gcc 4.7.1.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,199,2016-08-12T02:17:35Z,2016-11-08T20:14:43Z,2016-11-08T20:15:37Z,MERGED,True,3,1,1,https://github.com/saper,Enable threads on FreeBSD 10 and 11,1,[],https://github.com/heimdal/heimdal/pull/199,https://github.com/saper,1,https://github.com/heimdal/heimdal/pull/199,freebsd[56789]*) will not match freebsd10 and freebsd11,freebsd[56789]*) will not match freebsd10 and freebsd11,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,200,2016-08-17T13:27:41Z,2016-11-08T20:48:40Z,2016-11-08T20:48:41Z,MERGED,True,7,7,3,https://github.com/saper,[WIP] HAVE_DB3 and HAVE_DB1 conflict when both defined,2,[],https://github.com/heimdal/heimdal/pull/200,https://github.com/saper,1,https://github.com/heimdal/heimdal/pull/200,"On my FreeBSD system I have the folowing Berkeley DB
packages installed:
db41-4.1.25_4                  The Berkeley DB package, revision 4.1
db42-4.2.52_5                  The Berkeley DB package, revision 4.2
db48-4.8.30.0_2                Berkeley DB package, revision 4.8
db5-5.3.28_4                   Oracle Berkeley DB, revision 5.3
The last one has uses /usr/local/lib/libdb-5.so naming
scheme, unlike the previous version.
DB1-compatible interface also gets detected, so HAVE_DB1
and HAVE_DB3 also get defined, leading to conflicting symbols.","On my FreeBSD system I have the folowing Berkeley DB
packages installed:
db41-4.1.25_4                  The Berkeley DB package, revision 4.1
db42-4.2.52_5                  The Berkeley DB package, revision 4.2
db48-4.8.30.0_2                Berkeley DB package, revision 4.8
db5-5.3.28_4                   Oracle Berkeley DB, revision 5.3
The last one has uses /usr/local/lib/libdb-5.so naming
scheme, unlike the previous version.
DB1-compatible interface also gets detected, so HAVE_DB1
and HAVE_DB3 also get defined, leading to conflicting symbols.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,200,2016-08-17T13:27:41Z,2016-11-08T20:48:40Z,2016-11-08T20:48:41Z,MERGED,True,7,7,3,https://github.com/saper,[WIP] HAVE_DB3 and HAVE_DB1 conflict when both defined,2,[],https://github.com/heimdal/heimdal/pull/200,https://github.com/saper,2,https://github.com/heimdal/heimdal/pull/200#issuecomment-240410457,"On my FreeBSD system I have the folowing Berkeley DB
packages installed:
db41-4.1.25_4                  The Berkeley DB package, revision 4.1
db42-4.2.52_5                  The Berkeley DB package, revision 4.2
db48-4.8.30.0_2                Berkeley DB package, revision 4.8
db5-5.3.28_4                   Oracle Berkeley DB, revision 5.3
The last one has uses /usr/local/lib/libdb-5.so naming
scheme, unlike the previous version.
DB1-compatible interface also gets detected, so HAVE_DB1
and HAVE_DB3 also get defined, leading to conflicting symbols.","Compiles fine, not tested yet.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,200,2016-08-17T13:27:41Z,2016-11-08T20:48:40Z,2016-11-08T20:48:41Z,MERGED,True,7,7,3,https://github.com/saper,[WIP] HAVE_DB3 and HAVE_DB1 conflict when both defined,2,[],https://github.com/heimdal/heimdal/pull/200,https://github.com/vdukhovni,3,https://github.com/heimdal/heimdal/pull/200#issuecomment-259254996,"On my FreeBSD system I have the folowing Berkeley DB
packages installed:
db41-4.1.25_4                  The Berkeley DB package, revision 4.1
db42-4.2.52_5                  The Berkeley DB package, revision 4.2
db48-4.8.30.0_2                Berkeley DB package, revision 4.8
db5-5.3.28_4                   Oracle Berkeley DB, revision 5.3
The last one has uses /usr/local/lib/libdb-5.so naming
scheme, unlike the previous version.
DB1-compatible interface also gets detected, so HAVE_DB1
and HAVE_DB3 also get defined, leading to conflicting symbols.","We're planning to soon allow both to work, but in the meantime merging this.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,201,2016-08-30T02:54:20Z,2016-11-08T20:11:19Z,2016-11-08T20:11:28Z,CLOSED,False,22,0,2,https://github.com/kaduk,Use C99 designated initializers in a couple places,1,['feature request'],https://github.com/heimdal/heimdal/pull/201,https://github.com/kaduk,1,https://github.com/heimdal/heimdal/pull/201,"I had considered preparing a broader change to use designated initializers everywhere, or everywhere in hcrypto, but it's unclear that the benefit of designated initializers is worth the global churn, so I figured I would make a pull request with the targeted changes and see what response it got.","I had considered preparing a broader change to use designated initializers everywhere, or everywhere in hcrypto, but it's unclear that the benefit of designated initializers is worth the global churn, so I figured I would make a pull request with the targeted changes and see what response it got.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,201,2016-08-30T02:54:20Z,2016-11-08T20:11:19Z,2016-11-08T20:11:28Z,CLOSED,False,22,0,2,https://github.com/kaduk,Use C99 designated initializers in a couple places,1,['feature request'],https://github.com/heimdal/heimdal/pull/201,https://github.com/lha,2,https://github.com/heimdal/heimdal/pull/201#issuecomment-243924648,"I had considered preparing a broader change to use designated initializers everywhere, or everywhere in hcrypto, but it's unclear that the benefit of designated initializers is worth the global churn, so I figured I would make a pull request with the targeted changes and see what response it got.","either we do c99, or we don't.
now that there is the clang fronting to vc++, do we need to keep pre-c99 for windows ? @jaltman",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,201,2016-08-30T02:54:20Z,2016-11-08T20:11:19Z,2016-11-08T20:11:28Z,CLOSED,False,22,0,2,https://github.com/kaduk,Use C99 designated initializers in a couple places,1,['feature request'],https://github.com/heimdal/heimdal/pull/201,https://github.com/jaltman,3,https://github.com/heimdal/heimdal/pull/201#issuecomment-243925321,"I had considered preparing a broader change to use designated initializers everywhere, or everywhere in hcrypto, but it's unclear that the benefit of designated initializers is worth the global churn, so I figured I would make a pull request with the targeted changes and see what response it got.","@lha We will not be converting to clang on Windows for the next release and it is unclear at this point what versions of Windows we can build for with the clang front-end.  Also, switching to clang requires switching from an nmake based build system to an msbuild based build system.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,201,2016-08-30T02:54:20Z,2016-11-08T20:11:19Z,2016-11-08T20:11:28Z,CLOSED,False,22,0,2,https://github.com/kaduk,Use C99 designated initializers in a couple places,1,['feature request'],https://github.com/heimdal/heimdal/pull/201,https://github.com/jaltman,4,https://github.com/heimdal/heimdal/pull/201#issuecomment-259245872,"I had considered preparing a broader change to use designated initializers everywhere, or everywhere in hcrypto, but it's unclear that the benefit of designated initializers is worth the global churn, so I figured I would make a pull request with the targeted changes and see what response it got.",This was merged by @nicowilliams as aa87e08,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,203,2016-09-19T21:12:43Z,2016-09-19T21:36:59Z,2016-10-27T19:06:13Z,MERGED,True,1,1,1,https://github.com/sdigit,Fix typo in rand-fortuna.c,1,[],https://github.com/heimdal/heimdal/pull/203,https://github.com/sdigit,1,https://github.com/heimdal/heimdal/pull/203,"__GNUC__ was written as __GUNC__, which could have interesting results as it'll never be defined.","__GNUC__ was written as __GUNC__, which could have interesting results as it'll never be defined.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,203,2016-09-19T21:12:43Z,2016-09-19T21:36:59Z,2016-10-27T19:06:13Z,MERGED,True,1,1,1,https://github.com/sdigit,Fix typo in rand-fortuna.c,1,[],https://github.com/heimdal/heimdal/pull/203,https://github.com/adaugherity,2,https://github.com/heimdal/heimdal/pull/203#issuecomment-256739078,"__GNUC__ was written as __GUNC__, which could have interesting results as it'll never be defined.",Commit aa87e08 had the typo in both lib/hcrypto/rand-fortuna.c and .../rand-timer.c.  This PR fixed rand-fortuna.c but rand-timer.c still has the __GUNC__ typo.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,204,2016-10-03T14:59:54Z,2016-11-08T20:19:17Z,2021-07-30T14:33:34Z,MERGED,True,8,4,1,https://github.com/elric1,lib/krb5/fcache.c: return errors in fcc_destroy() rather than always 0.,2,[],https://github.com/heimdal/heimdal/pull/204,https://github.com/elric1,1,https://github.com/heimdal/heimdal/pull/204,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,204,2016-10-03T14:59:54Z,2016-11-08T20:19:17Z,2021-07-30T14:33:34Z,MERGED,True,8,4,1,https://github.com/elric1,lib/krb5/fcache.c: return errors in fcc_destroy() rather than always 0.,2,[],https://github.com/heimdal/heimdal/pull/204,https://github.com/vdukhovni,2,https://github.com/heimdal/heimdal/pull/204#issuecomment-259246375,,+1,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,205,2016-10-20T08:58:57Z,2016-11-08T20:36:14Z,2016-11-08T20:36:21Z,MERGED,True,35,17,1,https://github.com/metze-samba,lib/krb5: destroy a memory ccache on reinit,1,[],https://github.com/heimdal/heimdal/pull/205,https://github.com/metze-samba,1,https://github.com/heimdal/heimdal/pull/205,"BUG: https://bugzilla.samba.org/show_bug.cgi?id=12369
Signed-off-by: Stefan Metzmacher metze@samba.org
Reviewed-by: Günther Deschner gd@samba.org
Reviewed-by: Uri Simchoni uri@samba.org
(Bases on Samba commit 2abc3710a8a63327a769ba0482c553ed274b2113)","BUG: https://bugzilla.samba.org/show_bug.cgi?id=12369
Signed-off-by: Stefan Metzmacher metze@samba.org
Reviewed-by: Günther Deschner gd@samba.org
Reviewed-by: Uri Simchoni uri@samba.org
(Bases on Samba commit 2abc3710a8a63327a769ba0482c553ed274b2113)",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,206,2016-11-10T18:28:15Z,2016-11-10T22:14:14Z,2016-11-10T22:17:36Z,CLOSED,False,13,6,4,https://github.com/jaltman,default life/renewlife time to KDC policy,1,[],https://github.com/heimdal/heimdal/pull/206,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/206,"Instead of imposing a default 10 hour ticket lifetime and 1 month renew
lifetime when requesting tickets, increase the default lifetime and
renew lifetime to 2147483647 seconds.  This ensures that in the absence
of any other configuration or command line parameters that the KDC will
determine the ticket lifetime and renew lifetime.
Change-Id: I52b6eeac1ee830a9bf4d0130e8f4ec7b70bc8694","Instead of imposing a default 10 hour ticket lifetime and 1 month renew
lifetime when requesting tickets, increase the default lifetime and
renew lifetime to 2147483647 seconds.  This ensures that in the absence
of any other configuration or command line parameters that the KDC will
determine the ticket lifetime and renew lifetime.
Change-Id: I52b6eeac1ee830a9bf4d0130e8f4ec7b70bc8694",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,206,2016-11-10T18:28:15Z,2016-11-10T22:14:14Z,2016-11-10T22:17:36Z,CLOSED,False,13,6,4,https://github.com/jaltman,default life/renewlife time to KDC policy,1,[],https://github.com/heimdal/heimdal/pull/206,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/206#issuecomment-259813783,"Instead of imposing a default 10 hour ticket lifetime and 1 month renew
lifetime when requesting tickets, increase the default lifetime and
renew lifetime to 2147483647 seconds.  This ensures that in the absence
of any other configuration or command line parameters that the KDC will
determine the ticket lifetime and renew lifetime.
Change-Id: I52b6eeac1ee830a9bf4d0130e8f4ec7b70bc8694",-LGTM-  See comments.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,206,2016-11-10T18:28:15Z,2016-11-10T22:14:14Z,2016-11-10T22:17:36Z,CLOSED,False,13,6,4,https://github.com/jaltman,default life/renewlife time to KDC policy,1,[],https://github.com/heimdal/heimdal/pull/206,https://github.com/nicowilliams,3,https://github.com/heimdal/heimdal/pull/206#issuecomment-259823401,"Instead of imposing a default 10 hour ticket lifetime and 1 month renew
lifetime when requesting tickets, increase the default lifetime and
renew lifetime to 2147483647 seconds.  This ensures that in the absence
of any other configuration or command line parameters that the KDC will
determine the ticket lifetime and renew lifetime.
Change-Id: I52b6eeac1ee830a9bf4d0130e8f4ec7b70bc8694",Merged as a013e93.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,207,2016-11-11T18:53:16Z,2016-11-11T20:34:48Z,2016-11-11T20:34:48Z,CLOSED,False,0,0,0,https://github.com/nicowilliams,Fix EVP PKCS#11 backend (#194),0,[],https://github.com/heimdal/heimdal/pull/207,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/207,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,208,2016-11-11T23:49:28Z,2016-11-15T04:02:34Z,2016-11-15T04:02:34Z,CLOSED,False,71,28,7,https://github.com/nicowilliams,Fix interop with 2008 R2 RODC (issue #173),8,[],https://github.com/heimdal/heimdal/pull/208,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/208,Based on patches by @jaltman.,Based on patches by @jaltman.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,208,2016-11-11T23:49:28Z,2016-11-15T04:02:34Z,2016-11-15T04:02:34Z,CLOSED,False,71,28,7,https://github.com/nicowilliams,Fix interop with 2008 R2 RODC (issue #173),8,[],https://github.com/heimdal/heimdal/pull/208,https://github.com/jaltman,2,https://github.com/heimdal/heimdal/pull/208#issuecomment-260097105,Based on patches by @jaltman.,"@nicowilliams Thanks for the revised patches.
One of the items that was going to be worked on was to permit assignment of principal types and the associated parsing rules based upon matching component values and the number of components.   See the description in comment #173 (comment).
I will review and test over the weekend.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,208,2016-11-11T23:49:28Z,2016-11-15T04:02:34Z,2016-11-15T04:02:34Z,CLOSED,False,71,28,7,https://github.com/nicowilliams,Fix interop with 2008 R2 RODC (issue #173),8,[],https://github.com/heimdal/heimdal/pull/208,https://github.com/nicowilliams,3,https://github.com/heimdal/heimdal/pull/208#issuecomment-260541722,Based on patches by @jaltman.,"Pushed:
22790e4 Test RODC interop fix
9e2b696 Make kdc name type strictness configurable
961f543 Set princ type to NT-SMTP-NAME when parsing
6a1db3f princ type NT-UNKNOWN + ""host"" == NT-SRV-HST
5aef50c gss-krb5: do_delegate remove dead comment
09bdb3a Set the right name type for anon princ (client)
020f2c7 kdc: principals of type NT-UNKNOWN can be anonymous
a59bb71 When building a princ name pick a sane def type",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,217,2016-12-03T23:41:40Z,2016-12-10T18:34:24Z,2016-12-10T18:34:24Z,CLOSED,False,0,0,0,https://github.com/jelmer,"Don't include build user, date and host in binaries.",0,[],https://github.com/heimdal/heimdal/pull/217,https://github.com/jelmer,1,https://github.com/heimdal/heimdal/pull/217,This makes the build unreproducible.,This makes the build unreproducible.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,217,2016-12-03T23:41:40Z,2016-12-10T18:34:24Z,2016-12-10T18:34:24Z,CLOSED,False,0,0,0,https://github.com/jelmer,"Don't include build user, date and host in binaries.",0,[],https://github.com/heimdal/heimdal/pull/217,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/217#issuecomment-264675273,This makes the build unreproducible.,"There's also include/NTMakefile.
The user/date/host info might be useful in some cases.  Maybe we should have a configuration option for it.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,217,2016-12-03T23:41:40Z,2016-12-10T18:34:24Z,2016-12-10T18:34:24Z,CLOSED,False,0,0,0,https://github.com/jelmer,"Don't include build user, date and host in binaries.",0,[],https://github.com/heimdal/heimdal/pull/217,https://github.com/quanah,3,https://github.com/heimdal/heimdal/pull/217#issuecomment-264905502,This makes the build unreproducible.,"It's fairly traditional for lots of software to include that information, and it can be extremely useful information to have.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,217,2016-12-03T23:41:40Z,2016-12-10T18:34:24Z,2016-12-10T18:34:24Z,CLOSED,False,0,0,0,https://github.com/jelmer,"Don't include build user, date and host in binaries.",0,[],https://github.com/heimdal/heimdal/pull/217,https://github.com/nicowilliams,4,https://github.com/heimdal/heimdal/pull/217#issuecomment-264906787,This makes the build unreproducible.,"@quanah Absolutely, however, for non-release builds it does make the build non-repeatable.  That's a problem.  We should want a --release or some such option to ./configure, or perhaps a make variable.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,217,2016-12-03T23:41:40Z,2016-12-10T18:34:24Z,2016-12-10T18:34:24Z,CLOSED,False,0,0,0,https://github.com/jelmer,"Don't include build user, date and host in binaries.",0,[],https://github.com/heimdal/heimdal/pull/217,https://github.com/nicowilliams,5,https://github.com/heimdal/heimdal/pull/217#issuecomment-265901193,This makes the build unreproducible.,I'll try and add a --release or --enable-release option to ./configure before 7.1.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,218,2016-12-03T23:45:26Z,2016-12-04T23:40:38Z,2016-12-10T18:34:25Z,MERGED,True,1,1,1,https://github.com/jelmer,Increase timeout when waiting for iprop-slave.,1,[],https://github.com/heimdal/heimdal/pull/218,https://github.com/jelmer,1,https://github.com/heimdal/heimdal/pull/218,"This is required when running on slower platforms. In Debian, we're hitting the timeout building on mips.","This is required when running on slower platforms. In Debian, we're hitting the timeout building on mips.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,218,2016-12-03T23:45:26Z,2016-12-04T23:40:38Z,2016-12-10T18:34:25Z,MERGED,True,1,1,1,https://github.com/jelmer,Increase timeout when waiting for iprop-slave.,1,[],https://github.com/heimdal/heimdal/pull/218,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/218#issuecomment-264675509,"This is required when running on slower platforms. In Debian, we're hitting the timeout building on mips.","My goal is to make all the daemons daemonize properly, detaching only when ready.  In fact, they do, now (at least kdc, digest-service, kcm, ipropd-slave, ipropd-master, kadmind, and kpasswdd, but not hpropd nor any others).
The thing that's left to do is to make sure all the daemons have pidfiles or output their PID and then make the tests start them daemonized and stop them by killing their PIDs.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,218,2016-12-03T23:45:26Z,2016-12-04T23:40:38Z,2016-12-10T18:34:25Z,MERGED,True,1,1,1,https://github.com/jelmer,Increase timeout when waiting for iprop-slave.,1,[],https://github.com/heimdal/heimdal/pull/218,https://github.com/jelmer,3,https://github.com/heimdal/heimdal/pull/218#issuecomment-264675857,"This is required when running on slower platforms. In Debian, we're hitting the timeout building on mips.",Checking pid files definitely seems like a more robust strategy than relying on timeouts.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,218,2016-12-03T23:45:26Z,2016-12-04T23:40:38Z,2016-12-10T18:34:25Z,MERGED,True,1,1,1,https://github.com/jelmer,Increase timeout when waiting for iprop-slave.,1,[],https://github.com/heimdal/heimdal/pull/218,https://github.com/jelmer,4,https://github.com/heimdal/heimdal/pull/218#issuecomment-264676027,"This is required when running on slower platforms. In Debian, we're hitting the timeout building on mips.","It would be nice if the timeout could be increased in the meantime though, as this without the higher timeout this test fails on some hardware.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,218,2016-12-03T23:45:26Z,2016-12-04T23:40:38Z,2016-12-10T18:34:25Z,MERGED,True,1,1,1,https://github.com/jelmer,Increase timeout when waiting for iprop-slave.,1,[],https://github.com/heimdal/heimdal/pull/218,https://github.com/nicowilliams,5,https://github.com/heimdal/heimdal/pull/218#issuecomment-264723880,"This is required when running on slower platforms. In Debian, we're hitting the timeout building on mips.","Checking pid files definitely seems like a more robust strategy than
 relying on timeouts.
The pidfile is only needed to kill the daemon.  The nice thing is that the daemon fork()s first, sets up things on the child side, and the parent doesn't exit until the child indicates that it's ready.  So all a script has to do is start the daemon and there's no need to wait for anything: as soon as the daemon exit(0)s (completes daemonizing), it's ready.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,218,2016-12-03T23:45:26Z,2016-12-04T23:40:38Z,2016-12-10T18:34:25Z,MERGED,True,1,1,1,https://github.com/jelmer,Increase timeout when waiting for iprop-slave.,1,[],https://github.com/heimdal/heimdal/pull/218,https://github.com/nicowilliams,6,https://github.com/heimdal/heimdal/pull/218#issuecomment-264723911,"This is required when running on slower platforms. In Debian, we're hitting the timeout building on mips.","It would be nice if the timeout could be increased in the meantime
 though, as this without the higher timeout this test fails on some
 hardware.
Sure.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,218,2016-12-03T23:45:26Z,2016-12-04T23:40:38Z,2016-12-10T18:34:25Z,MERGED,True,1,1,1,https://github.com/jelmer,Increase timeout when waiting for iprop-slave.,1,[],https://github.com/heimdal/heimdal/pull/218,https://github.com/nicowilliams,7,https://github.com/heimdal/heimdal/pull/218#issuecomment-264726267,"This is required when running on slower platforms. In Debian, we're hitting the timeout building on mips.","I think the only thing to do to make the tests do the right thing is to make sure to set HEIM_PIDFILE_DIR in the tests.  However, we use pidfile(), which can be available from the OS (e.g., on NetBSD), in which case we may have no control over where the pidfile goes, and that's the reason (ISTR) I've not made this change yet...
Hmmm, nowadays on NetBSD pidfile() does take a path (if it isn't a basename): http://www.unix.com/man-page/netbsd/3/pidfile/.  But OpenBSD's still doesn't...  So I'm concerned about making this change.
One possibility would be to use rk_pidfile() instead of pidfile() and make sure we always build rk_pidfile(), and have rk_pidfile() check $HEIM_PIDFILE_DIR, and if not set then call the real pidfile() if we have it, else work as usual.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,218,2016-12-03T23:45:26Z,2016-12-04T23:40:38Z,2016-12-10T18:34:25Z,MERGED,True,1,1,1,https://github.com/jelmer,Increase timeout when waiting for iprop-slave.,1,[],https://github.com/heimdal/heimdal/pull/218,https://github.com/vdukhovni,8,https://github.com/heimdal/heimdal/pull/218#issuecomment-264728439,"This is required when running on slower platforms. In Debian, we're hitting the timeout building on mips.","We should probably use (not override) the system pidfile(), however we could add a command-line
option that instead writes pids to an alternate location.  The system pidfile
directly may not even be writable by non-root users.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,218,2016-12-03T23:45:26Z,2016-12-04T23:40:38Z,2016-12-10T18:34:25Z,MERGED,True,1,1,1,https://github.com/jelmer,Increase timeout when waiting for iprop-slave.,1,[],https://github.com/heimdal/heimdal/pull/218,https://github.com/nicowilliams,9,https://github.com/heimdal/heimdal/pull/218#issuecomment-264733441,"This is required when running on slower platforms. In Debian, we're hitting the timeout building on mips.",@vdukhovni It'd be better to use rk_pidfile() and have it writer wherever Heimdal wants to and also call the system pidfile() when there is one.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,218,2016-12-03T23:45:26Z,2016-12-04T23:40:38Z,2016-12-10T18:34:25Z,MERGED,True,1,1,1,https://github.com/jelmer,Increase timeout when waiting for iprop-slave.,1,[],https://github.com/heimdal/heimdal/pull/218,https://github.com/nicowilliams,10,https://github.com/heimdal/heimdal/pull/218#issuecomment-264734496,"This is required when running on slower platforms. In Debian, we're hitting the timeout building on mips.","Ugh, libroken's pidfile() does not match the prototype of NetBSD's (nor OpenBSD's, which at least is the same as NetBSD's).  libroken's returns void, while the others return int.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,218,2016-12-03T23:45:26Z,2016-12-04T23:40:38Z,2016-12-10T18:34:25Z,MERGED,True,1,1,1,https://github.com/jelmer,Increase timeout when waiting for iprop-slave.,1,[],https://github.com/heimdal/heimdal/pull/218,https://github.com/nicowilliams,11,https://github.com/heimdal/heimdal/pull/218#issuecomment-264741193,"This is required when running on slower platforms. In Debian, we're hitting the timeout building on mips.","BTW, I've patches to make the tests use --detach and pidfiles.  See the misc branch of my clone.  check-iprop still uses the wait_kdc script though, to wait for ipropd-slave to catch up to the master.  So we'll still need this patch...",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,218,2016-12-03T23:45:26Z,2016-12-04T23:40:38Z,2016-12-10T18:34:25Z,MERGED,True,1,1,1,https://github.com/jelmer,Increase timeout when waiting for iprop-slave.,1,[],https://github.com/heimdal/heimdal/pull/218,https://github.com/nicowilliams,12,https://github.com/heimdal/heimdal/pull/218#issuecomment-264741483,"This is required when running on slower platforms. In Debian, we're hitting the timeout building on mips.","Do please test-drive my misc changes.  I really should have done this when I added the roken_detach_prep() and roken_detach_finish() functions...
EDIT: Tests pass on Linux.  @vdukhovni will test on OS X.  I haven't compared test run times, but they should go as much as a minute faster than before, which, while that's not much, it's nice.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,219,2016-12-03T23:55:31Z,2016-12-04T00:31:43Z,2016-12-10T18:34:25Z,MERGED,True,2,2,1,https://github.com/jelmer,Use actual libdir/includedir in heimdal-gssapi.pc.,1,[],https://github.com/heimdal/heimdal/pull/219,https://github.com/jelmer,1,https://github.com/heimdal/heimdal/pull/219,This fixes the library path on e.g. systems like Debian which specify a custom --includedir and --libdir to configure.,This fixes the library path on e.g. systems like Debian which specify a custom --includedir and --libdir to configure.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,219,2016-12-03T23:55:31Z,2016-12-04T00:31:43Z,2016-12-10T18:34:25Z,MERGED,True,2,2,1,https://github.com/jelmer,Use actual libdir/includedir in heimdal-gssapi.pc.,1,[],https://github.com/heimdal/heimdal/pull/219,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/219#issuecomment-264675536,This fixes the library path on e.g. systems like Debian which specify a custom --includedir and --libdir to configure.,Thanks.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,231,2016-12-17T08:55:22Z,2016-12-18T04:13:02Z,2016-12-18T04:13:02Z,CLOSED,False,1,1,1,https://github.com/ajacoutot,Fix build with LibreSSL.,1,[],https://github.com/heimdal/heimdal/pull/231,https://github.com/ajacoutot,1,https://github.com/heimdal/heimdal/pull/231,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,231,2016-12-17T08:55:22Z,2016-12-18T04:13:02Z,2016-12-18T04:13:02Z,CLOSED,False,1,1,1,https://github.com/ajacoutot,Fix build with LibreSSL.,1,[],https://github.com/heimdal/heimdal/pull/231,https://github.com/vdukhovni,2,https://github.com/heimdal/heimdal/pull/231#issuecomment-267802397,,Adopted.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,232,2016-12-19T17:14:59Z,2016-12-19T17:15:54Z,2016-12-19T21:14:06Z,CLOSED,False,279,14,24,https://github.com/menaganti,Android porting,7,[],https://github.com/heimdal/heimdal/pull/232,https://github.com/menaganti,1,https://github.com/heimdal/heimdal/pull/232,"Added native build
Successful compilation and build for android.
Note: kinit stalls, need to debug.","Added native build
Successful compilation and build for android.
Note: kinit stalls, need to debug.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,232,2016-12-19T17:14:59Z,2016-12-19T17:15:54Z,2016-12-19T21:14:06Z,CLOSED,False,279,14,24,https://github.com/menaganti,Android porting,7,[],https://github.com/heimdal/heimdal/pull/232,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/232#issuecomment-268048503,"Added native build
Successful compilation and build for android.
Note: kinit stalls, need to debug.","@menaganti Why close it?  It's a nice contribution (though, naturally, code review comments need addressing).",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,232,2016-12-19T17:14:59Z,2016-12-19T17:15:54Z,2016-12-19T21:14:06Z,CLOSED,False,279,14,24,https://github.com/menaganti,Android porting,7,[],https://github.com/heimdal/heimdal/pull/232,https://github.com/menaganti,3,https://github.com/heimdal/heimdal/pull/232#issuecomment-268072068,"Added native build
Successful compilation and build for android.
Note: kinit stalls, need to debug.","It's incomplete. I have addressed some compilation issues and made the
kinit work against android bionic for arm . However, I feel that it is not
enough though. I want to clean up and address some issues inherent.

~Manoj
…
On Mon, Dec 19, 2016 at 2:02 PM Nico Williams ***@***.***> wrote:
 @menaganti <https://github.com/menaganti> Why close it? It's a nice
 contribution (though, naturally, code review comments need addressing).




 —
 You are receiving this because you were mentioned.


 Reply to this email directly, view it on GitHub
 <#232 (comment)>, or mute
 the thread
 <https://github.com/notifications/unsubscribe-auth/AWPK42-mgg_I7ad1HVhntrj1tzR2LcVrks5rJtSzgaJpZM4LQ-L5>
 .",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,238,2017-01-09T19:58:59Z,2017-01-09T20:04:21Z,2017-01-09T20:04:21Z,MERGED,True,1,1,1,https://github.com/jelmer,Do not detect x32 as 64-bit platform.,1,[],https://github.com/heimdal/heimdal/pull/238,https://github.com/jelmer,1,https://github.com/heimdal/heimdal/pull/238,"Fixes test failures due to ISO C Undefined Behaviour in MP_MASK macro.
Thorsten is also forwarding this to upstream libtommath.","Fixes test failures due to ISO C Undefined Behaviour in MP_MASK macro.
Thorsten is also forwarding this to upstream libtommath.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,245,2017-01-20T11:17:24Z,2017-02-01T00:15:59Z,2017-02-01T00:15:59Z,MERGED,True,3853,0,7,https://github.com/ChrisLeick,German translation,3,[],https://github.com/heimdal/heimdal/pull/245,https://github.com/ChrisLeick,1,https://github.com/heimdal/heimdal/pull/245,"Hi,
this german translation files are new. I will update the error messages soon
Kind regards,
Chris","Hi,
this german translation files are new. I will update the error messages soon
Kind regards,
Chris",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,245,2017-01-20T11:17:24Z,2017-02-01T00:15:59Z,2017-02-01T00:15:59Z,MERGED,True,3853,0,7,https://github.com/ChrisLeick,German translation,3,[],https://github.com/heimdal/heimdal/pull/245,https://github.com/vdukhovni,2,https://github.com/heimdal/heimdal/pull/245#issuecomment-275959907,"Hi,
this german translation files are new. I will update the error messages soon
Kind regards,
Chris",Is this ready to merge?  Or do you plan to do more work on this pull-request?,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,245,2017-01-20T11:17:24Z,2017-02-01T00:15:59Z,2017-02-01T00:15:59Z,MERGED,True,3853,0,7,https://github.com/ChrisLeick,German translation,3,[],https://github.com/heimdal/heimdal/pull/245,https://github.com/ChrisLeick,3,https://github.com/heimdal/heimdal/pull/245#issuecomment-275991329,"Hi,
this german translation files are new. I will update the error messages soon
Kind regards,
Chris","Hi Viktor,

yes, please merge it!

Kind regards,
Chris



Viktor Dukhovni:
…

 Is this ready to merge? Or do you plan to do more work on this
 pull-request?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,247,2017-01-26T16:14:51Z,2017-01-30T00:41:00Z,2021-07-30T14:34:07Z,MERGED,True,26,11,4,https://github.com/elric1,Fix signature of hdb_generate_key_set_password(),1,[],https://github.com/heimdal/heimdal/pull/247,https://github.com/elric1,1,https://github.com/heimdal/heimdal/pull/247,"The change to the signature of hdb_generate_key_set_password() in
Heimdal 7.1 broke API/ABI compatibility with previous releases.  We
fix this by renaming it hdb_generate_key_set_password_with_ks_tuple()
and creating a new hdb_generate_key_set_password() which calls our
new function with zeroes for the added arguments.
Issue #246      #246","The change to the signature of hdb_generate_key_set_password() in
Heimdal 7.1 broke API/ABI compatibility with previous releases.  We
fix this by renaming it hdb_generate_key_set_password_with_ks_tuple()
and creating a new hdb_generate_key_set_password() which calls our
new function with zeroes for the added arguments.
Issue #246      #246",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,247,2017-01-26T16:14:51Z,2017-01-30T00:41:00Z,2021-07-30T14:34:07Z,MERGED,True,26,11,4,https://github.com/elric1,Fix signature of hdb_generate_key_set_password(),1,[],https://github.com/heimdal/heimdal/pull/247,https://github.com/vdukhovni,2,https://github.com/heimdal/heimdal/pull/247#issuecomment-275959632,"The change to the signature of hdb_generate_key_set_password() in
Heimdal 7.1 broke API/ABI compatibility with previous releases.  We
fix this by renaming it hdb_generate_key_set_password_with_ks_tuple()
and creating a new hdb_generate_key_set_password() which calls our
new function with zeroes for the added arguments.
Issue #246      #246",+1. Looks good.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,248,2017-02-17T05:42:13Z,2017-03-11T00:24:15Z,2017-03-11T00:24:15Z,CLOSED,False,117,17,5,https://github.com/nicowilliams,Add include/includedir directives for krb5.conf,1,[],https://github.com/heimdal/heimdal/pull/248,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/248,"Includes docs and one test.  includedir is not tested in-tree, but I tested it manually.","Includes docs and one test.  includedir is not tested in-tree, but I tested it manually.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,248,2017-02-17T05:42:13Z,2017-03-11T00:24:15Z,2017-03-11T00:24:15Z,CLOSED,False,117,17,5,https://github.com/nicowilliams,Add include/includedir directives for krb5.conf,1,[],https://github.com/heimdal/heimdal/pull/248,https://github.com/vdukhovni,2,https://github.com/heimdal/heimdal/pull/248#issuecomment-285499066,"Includes docs and one test.  includedir is not tested in-tree, but I tested it manually.",Closing in favour of #253,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,248,2017-02-17T05:42:13Z,2017-03-11T00:24:15Z,2017-03-11T00:24:15Z,CLOSED,False,117,17,5,https://github.com/nicowilliams,Add include/includedir directives for krb5.conf,1,[],https://github.com/heimdal/heimdal/pull/248,https://github.com/nicowilliams,3,https://github.com/heimdal/heimdal/pull/248#issuecomment-285716848,"Includes docs and one test.  includedir is not tested in-tree, but I tested it manually.","@vdukhovni Regarding relative paths...  MIT's docs say that absolute paths must be used, but its implementation does not reject relative paths.  Portably determining whether a path is absolute is non-trivial...  @elric1 proposes that I check #ifndef WIN32, and not check on WIN32.  I... don't really care since one should really not include relative paths, but I'll probably do what @elric1 proposes.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,248,2017-02-17T05:42:13Z,2017-03-11T00:24:15Z,2017-03-11T00:24:15Z,CLOSED,False,117,17,5,https://github.com/nicowilliams,Add include/includedir directives for krb5.conf,1,[],https://github.com/heimdal/heimdal/pull/248,https://github.com/jaltman,4,https://github.com/heimdal/heimdal/pull/248#issuecomment-285734158,"Includes docs and one test.  includedir is not tested in-tree, but I tested it manually.","`static int
is_absolute_path(const char path)
{
/
* An absolute path is one that refers to an explicit object
* without ambiguity.
*/
#ifdef WIN32
size_t len = strlen(path);
/* UNC path is by definition absolute */
if (len > 2
     && ISPATHSEP(path[0])
     && ISPATHSEP(path[1]))
    return 1;

/* A drive letter path might be absolute */
if (len > 3
     && isalpha(path[0])
     && path[1] == ':'
     && ISPATHSEP(path[2]))
    return 1;

/*
 * if no drive letter but first char is a path
 * separator then the drive letter must be obtained
 * from the including file.
 */

#else
/* UNIX is easy, first char '/' is absolute */
if (ISPATHSEP(path[0]))
return 1;
#endif
return 0;
}`",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,248,2017-02-17T05:42:13Z,2017-03-11T00:24:15Z,2017-03-11T00:24:15Z,CLOSED,False,117,17,5,https://github.com/nicowilliams,Add include/includedir directives for krb5.conf,1,[],https://github.com/heimdal/heimdal/pull/248,https://github.com/nicowilliams,5,https://github.com/heimdal/heimdal/pull/248#issuecomment-285735733,"Includes docs and one test.  includedir is not tested in-tree, but I tested it manually.","@jaltman And what about UNCs?
Also, MSFT might introduce new such conventions some day, and, indeed, so can POSIX, since // is allowed to be special under POSIX (IIRC because of Apollo).
The only reliable, portable way I know of to determine if a path is absolute is to repeatedly apply dirname() (to a copy of the path) until its output is repeated, and then to check that the last output is a prefix of the original path.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,248,2017-02-17T05:42:13Z,2017-03-11T00:24:15Z,2017-03-11T00:24:15Z,CLOSED,False,117,17,5,https://github.com/nicowilliams,Add include/includedir directives for krb5.conf,1,[],https://github.com/heimdal/heimdal/pull/248,https://github.com/vdukhovni,6,https://github.com/heimdal/heimdal/pull/248#issuecomment-285736535,"Includes docs and one test.  includedir is not tested in-tree, but I tested it manually.","We're not going to do the dirname thing.  The code Jeff looks just fine.  Or just support Unix with a leading ""/"".  We don't need perfection here.  Or leave it be with a comment in the code, and a warning in the docs.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,248,2017-02-17T05:42:13Z,2017-03-11T00:24:15Z,2017-03-11T00:24:15Z,CLOSED,False,117,17,5,https://github.com/nicowilliams,Add include/includedir directives for krb5.conf,1,[],https://github.com/heimdal/heimdal/pull/248,https://github.com/nicowilliams,7,https://github.com/heimdal/heimdal/pull/248#issuecomment-285737993,"Includes docs and one test.  includedir is not tested in-tree, but I tested it manually.","I'm OK with leaving the code as-is.  I'm OK with including a check only on Unix (indeed, I've pushed that to my master).  I won't bother with the dirname() thing.  I could add the code that @jaltman proposes (perhaps we never want to include files from UNC paths anyways!).",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,248,2017-02-17T05:42:13Z,2017-03-11T00:24:15Z,2017-03-11T00:24:15Z,CLOSED,False,117,17,5,https://github.com/nicowilliams,Add include/includedir directives for krb5.conf,1,[],https://github.com/heimdal/heimdal/pull/248,https://github.com/nicowilliams,8,https://github.com/heimdal/heimdal/pull/248#issuecomment-285738479,"Includes docs and one test.  includedir is not tested in-tree, but I tested it manually.","What I won't do is add @jaltman's code to lib/roken -- I do feel like a proper is_absolute_path() general-purpose utility function needs to do the dirname() thing (or similar and equivalent).
(Also, re: rejecting UNCs here... why not also reject /net/... paths?  There could be a never-ending list of things to do / not do.)",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,248,2017-02-17T05:42:13Z,2017-03-11T00:24:15Z,2017-03-11T00:24:15Z,CLOSED,False,117,17,5,https://github.com/nicowilliams,Add include/includedir directives for krb5.conf,1,[],https://github.com/heimdal/heimdal/pull/248,https://github.com/vdukhovni,9,https://github.com/heimdal/heimdal/pull/248#issuecomment-285739419,"Includes docs and one test.  includedir is not tested in-tree, but I tested it manually.","We must not reject any absolute paths, however unsafe they might be.  All that's called for is that the path be unambiguous. If someone configures an unsafe remote path, that's their problem, not ours.  We can document that the paths SHOULD be unambiguous (absolute), or enforce it and document that they MUST be unambiguous.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,248,2017-02-17T05:42:13Z,2017-03-11T00:24:15Z,2017-03-11T00:24:15Z,CLOSED,False,117,17,5,https://github.com/nicowilliams,Add include/includedir directives for krb5.conf,1,[],https://github.com/heimdal/heimdal/pull/248,https://github.com/nicowilliams,10,https://github.com/heimdal/heimdal/pull/248#issuecomment-285742267,"Includes docs and one test.  includedir is not tested in-tree, but I tested it manually.",@vdukhovni That was already the case yesterday...  EDIT: I misread your comment.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,248,2017-02-17T05:42:13Z,2017-03-11T00:24:15Z,2017-03-11T00:24:15Z,CLOSED,False,117,17,5,https://github.com/nicowilliams,Add include/includedir directives for krb5.conf,1,[],https://github.com/heimdal/heimdal/pull/248,https://github.com/jaltman,11,https://github.com/heimdal/heimdal/pull/248#issuecomment-285743208,"Includes docs and one test.  includedir is not tested in-tree, but I tested it manually.",@nicowilliams The code I provided handles UNC paths.   UNC paths are absolute by definition.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,248,2017-02-17T05:42:13Z,2017-03-11T00:24:15Z,2017-03-11T00:24:15Z,CLOSED,False,117,17,5,https://github.com/nicowilliams,Add include/includedir directives for krb5.conf,1,[],https://github.com/heimdal/heimdal/pull/248,https://github.com/nicowilliams,12,https://github.com/heimdal/heimdal/pull/248#issuecomment-285743391,"Includes docs and one test.  includedir is not tested in-tree, but I tested it manually.","@jaltman Oh, yes it does.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,248,2017-02-17T05:42:13Z,2017-03-11T00:24:15Z,2017-03-11T00:24:15Z,CLOSED,False,117,17,5,https://github.com/nicowilliams,Add include/includedir directives for krb5.conf,1,[],https://github.com/heimdal/heimdal/pull/248,https://github.com/jaltman,13,https://github.com/heimdal/heimdal/pull/248#issuecomment-285743604,"Includes docs and one test.  includedir is not tested in-tree, but I tested it manually.",is_absolute_name() does not belong in libroken.  libroken is for supplying otherwise portable functions that are missing or implemented incorrectly on some platforms.   heimbase is where an is_absolute_path() or similar function would be added.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,248,2017-02-17T05:42:13Z,2017-03-11T00:24:15Z,2017-03-11T00:24:15Z,CLOSED,False,117,17,5,https://github.com/nicowilliams,Add include/includedir directives for krb5.conf,1,[],https://github.com/heimdal/heimdal/pull/248,https://github.com/nicowilliams,14,https://github.com/heimdal/heimdal/pull/248#issuecomment-285748789,"Includes docs and one test.  includedir is not tested in-tree, but I tested it manually.","@!*(&*!
There are other places with lame abs path checks that could use this function.  No good deed goes unpunished.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,248,2017-02-17T05:42:13Z,2017-03-11T00:24:15Z,2017-03-11T00:24:15Z,CLOSED,False,117,17,5,https://github.com/nicowilliams,Add include/includedir directives for krb5.conf,1,[],https://github.com/heimdal/heimdal/pull/248,https://github.com/nicowilliams,15,https://github.com/heimdal/heimdal/pull/248#issuecomment-285749811,"Includes docs and one test.  includedir is not tested in-tree, but I tested it manually.","To make things worse, master's Travis build fails tests...  I was wondering why my Travis builds were failing.  Of course, the Travis build isn't very informative on failure, so we should fix that too now.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,248,2017-02-17T05:42:13Z,2017-03-11T00:24:15Z,2017-03-11T00:24:15Z,CLOSED,False,117,17,5,https://github.com/nicowilliams,Add include/includedir directives for krb5.conf,1,[],https://github.com/heimdal/heimdal/pull/248,https://github.com/vdukhovni,16,https://github.com/heimdal/heimdal/pull/248#issuecomment-285756974,"Includes docs and one test.  includedir is not tested in-tree, but I tested it manually.","I built master on MacOS Sierra, and ""make check"" passes.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,248,2017-02-17T05:42:13Z,2017-03-11T00:24:15Z,2017-03-11T00:24:15Z,CLOSED,False,117,17,5,https://github.com/nicowilliams,Add include/includedir directives for krb5.conf,1,[],https://github.com/heimdal/heimdal/pull/248,https://github.com/nicowilliams,17,https://github.com/heimdal/heimdal/pull/248#issuecomment-285761966,"Includes docs and one test.  includedir is not tested in-tree, but I tested it manually.","@vdukhovni Yeah, Travis ""helpfully"" shows the recent-most PR not master.  So never mind that.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,248,2017-02-17T05:42:13Z,2017-03-11T00:24:15Z,2017-03-11T00:24:15Z,CLOSED,False,117,17,5,https://github.com/nicowilliams,Add include/includedir directives for krb5.conf,1,[],https://github.com/heimdal/heimdal/pull/248,https://github.com/jaltman,18,https://github.com/heimdal/heimdal/pull/248#issuecomment-285763153,"Includes docs and one test.  includedir is not tested in-tree, but I tested it manually.","I'm building master on Fedora 25 with --enable-ldap=/usr.   It would be useful to indicate which configure options were specified when indicating that ""make check"" succeeds or fails.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,248,2017-02-17T05:42:13Z,2017-03-11T00:24:15Z,2017-03-11T00:24:15Z,CLOSED,False,117,17,5,https://github.com/nicowilliams,Add include/includedir directives for krb5.conf,1,[],https://github.com/heimdal/heimdal/pull/248,https://github.com/vdukhovni,19,https://github.com/heimdal/heimdal/pull/248#issuecomment-285764617,"Includes docs and one test.  includedir is not tested in-tree, but I tested it manually.","I would have expected ""--with-openldap=/usr"", does the above work as intended?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,248,2017-02-17T05:42:13Z,2017-03-11T00:24:15Z,2017-03-11T00:24:15Z,CLOSED,False,117,17,5,https://github.com/nicowilliams,Add include/includedir directives for krb5.conf,1,[],https://github.com/heimdal/heimdal/pull/248,https://github.com/nicowilliams,20,https://github.com/heimdal/heimdal/pull/248#issuecomment-285765975,"Includes docs and one test.  includedir is not tested in-tree, but I tested it manually.","@jaltman Never mind.  The problem is in my branch.  Travis was showing me the result of the latest PR, now heimdal/heimdal's master, even though I was on the page for heimdal/heimdal -- very annoying.  The indication that it wasn't master was subtle.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,248,2017-02-17T05:42:13Z,2017-03-11T00:24:15Z,2017-03-11T00:24:15Z,CLOSED,False,117,17,5,https://github.com/nicowilliams,Add include/includedir directives for krb5.conf,1,[],https://github.com/heimdal/heimdal/pull/248,https://github.com/nicowilliams,21,https://github.com/heimdal/heimdal/pull/248#issuecomment-285766191,"Includes docs and one test.  includedir is not tested in-tree, but I tested it manually.","Plus is passes in my clone, so I'm pushing (to my master) an update to cat the test-suite.log files on failure in Travis.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,249,2017-02-25T10:13:15Z,2017-03-09T18:41:51Z,2017-03-09T18:41:51Z,MERGED,True,963,0,5,https://github.com/ChrisLeick,German translation,1,[],https://github.com/heimdal/heimdal/pull/249,https://github.com/ChrisLeick,1,https://github.com/heimdal/heimdal/pull/249,"Hi,
now, all error files are translated too. Please merge it into your master tree and add the german language to the build scripts, if necessary.
Kind regards,
Chris","Hi,
now, all error files are translated too. Please merge it into your master tree and add the german language to the build scripts, if necessary.
Kind regards,
Chris",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,252,2017-03-09T19:57:43Z,2017-03-11T00:23:32Z,2017-03-11T00:23:32Z,MERGED,True,11,1,2,https://github.com/vdukhovni,In krb5-config resolve rpath_flag at build-time,1,[],https://github.com/heimdal/heimdal/pull/252,https://github.com/vdukhovni,1,https://github.com/heimdal/heimdal/pull/252,"This should resolve #237, please confirm","This should resolve #237, please confirm",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,253,2017-03-09T20:27:15Z,2017-03-10T22:33:13Z,2017-03-10T22:33:13Z,MERGED,True,91,18,2,https://github.com/nicowilliams,Fix CR comments on include/includedir,2,[],https://github.com/heimdal/heimdal/pull/253,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/253,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,253,2017-03-09T20:27:15Z,2017-03-10T22:33:13Z,2017-03-10T22:33:13Z,MERGED,True,91,18,2,https://github.com/nicowilliams,Fix CR comments on include/includedir,2,[],https://github.com/heimdal/heimdal/pull/253,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/253#issuecomment-285773735,,"@jaltman There are things in lib/roken that don't belong there if is_absolute_path() doesn't belong there either:

parse_*.c
cloexec.c
environment.c
mini_inetd.c
net_*.c
simple_exec*.c
detach.*
swab.c
ct.c
copyhostent.c
getarg.*

Meanwhile, lib/base does have some portability things in it that really belong in lib/roken:

everything to do with threads

and otherwise consists mainly of an implementation of JSON-ish things.
If we were extracting these things into separate projects, I think we should:

put all portability things (including lib/base's threading things) in lib/roken

this includes is_absolute_path()


leave only the JSON-ish things in lib/base and give it a more appropriate name",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,253,2017-03-09T20:27:15Z,2017-03-10T22:33:13Z,2017-03-10T22:33:13Z,MERGED,True,91,18,2,https://github.com/nicowilliams,Fix CR comments on include/includedir,2,[],https://github.com/heimdal/heimdal/pull/253,https://github.com/nicowilliams,3,https://github.com/heimdal/heimdal/pull/253#issuecomment-285784787,,I surmise that my Travis-CI build must be failing because... either $srcdir or $objdir are not absolute...,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,253,2017-03-09T20:27:15Z,2017-03-10T22:33:13Z,2017-03-10T22:33:13Z,MERGED,True,91,18,2,https://github.com/nicowilliams,Fix CR comments on include/includedir,2,[],https://github.com/heimdal/heimdal/pull/253,https://github.com/nicowilliams,4,https://github.com/heimdal/heimdal/pull/253#issuecomment-285787034,,"Yepper doodles, that's the issue.  From the build output, where I replaced the rejection of relative paths with an fprintf(stderr, ...):
WELL THERE MATEY, ../../../tests/gss/include-krb5.conf is NOT an absolute path",True,{'THUMBS_UP': ['https://github.com/quanah']}
heimdal/heimdal,https://github.com/heimdal/heimdal,253,2017-03-09T20:27:15Z,2017-03-10T22:33:13Z,2017-03-10T22:33:13Z,MERGED,True,91,18,2,https://github.com/nicowilliams,Fix CR comments on include/includedir,2,[],https://github.com/heimdal/heimdal/pull/253,https://github.com/vdukhovni,5,https://github.com/heimdal/heimdal/pull/253#issuecomment-285788588,,"Sweet. For the test, this'll have to converted to an absolute path for the ""include"" directive...
Good test!",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,253,2017-03-09T20:27:15Z,2017-03-10T22:33:13Z,2017-03-10T22:33:13Z,MERGED,True,91,18,2,https://github.com/nicowilliams,Fix CR comments on include/includedir,2,[],https://github.com/heimdal/heimdal/pull/253,https://github.com/nicowilliams,6,https://github.com/heimdal/heimdal/pull/253#issuecomment-285794910,,My fix for this is simply to canonicalize $srcdir in configure.ac.  Testing a Travis build...,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,254,2017-03-09T21:19:30Z,2017-03-10T01:26:31Z,2017-03-10T01:26:31Z,MERGED,True,12,7,3,https://github.com/vdukhovni,Don't do AFS string-to-key tests when feature is disabled,1,[],https://github.com/heimdal/heimdal/pull/254,https://github.com/vdukhovni,1,https://github.com/heimdal/heimdal/pull/254,This should address #235,This should address #235,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,255,2017-03-09T22:08:46Z,2017-03-13T22:39:43Z,2017-03-13T22:39:43Z,MERGED,True,155,143,49,https://github.com/nicowilliams,Various code review changes,10,[],https://github.com/heimdal/heimdal/pull/255,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/255,These changes come from Christos Zoulas.,These changes come from Christos Zoulas.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,255,2017-03-09T22:08:46Z,2017-03-13T22:39:43Z,2017-03-13T22:39:43Z,MERGED,True,155,143,49,https://github.com/nicowilliams,Various code review changes,10,[],https://github.com/heimdal/heimdal/pull/255,https://github.com/vdukhovni,2,https://github.com/heimdal/heimdal/pull/255#issuecomment-285843169,These changes come from Christos Zoulas.,"May be best to defer the Add inetd support to kpasswdd commit for now, and do it separately.  Or is all that code Unix-only?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,255,2017-03-09T22:08:46Z,2017-03-13T22:39:43Z,2017-03-13T22:39:43Z,MERGED,True,155,143,49,https://github.com/nicowilliams,Various code review changes,10,[],https://github.com/heimdal/heimdal/pull/255,https://github.com/vdukhovni,3,https://github.com/heimdal/heimdal/pull/255#issuecomment-285843180,These changes come from Christos Zoulas.,"Otherwise, LGTM.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,255,2017-03-09T22:08:46Z,2017-03-13T22:39:43Z,2017-03-13T22:39:43Z,MERGED,True,155,143,49,https://github.com/nicowilliams,Various code review changes,10,[],https://github.com/heimdal/heimdal/pull/255,https://github.com/jaltman,4,https://github.com/heimdal/heimdal/pull/255#issuecomment-286251368,These changes come from Christos Zoulas.,kpasswdd  is not built on Windows at present.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,256,2017-03-09T23:13:17Z,2017-03-10T01:20:26Z,2017-03-10T01:20:43Z,MERGED,True,2,2,1,https://github.com/vdukhovni,Skip mdb_stat test when the command is not available,1,[],https://github.com/heimdal/heimdal/pull/256,https://github.com/vdukhovni,1,https://github.com/heimdal/heimdal/pull/256,This should resolve #251,This should resolve #251,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,256,2017-03-09T23:13:17Z,2017-03-10T01:20:26Z,2017-03-10T01:20:43Z,MERGED,True,2,2,1,https://github.com/vdukhovni,Skip mdb_stat test when the command is not available,1,[],https://github.com/heimdal/heimdal/pull/256,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/256#issuecomment-285521132,This should resolve #251,LGTM.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,256,2017-03-09T23:13:17Z,2017-03-10T01:20:26Z,2017-03-10T01:20:43Z,MERGED,True,2,2,1,https://github.com/vdukhovni,Skip mdb_stat test when the command is not available,1,[],https://github.com/heimdal/heimdal/pull/256,https://github.com/nicowilliams,3,https://github.com/heimdal/heimdal/pull/256#issuecomment-285521332,This should resolve #251,"The commit message should say ""fix @251"" so that when you push this then #251 gets closed.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,256,2017-03-09T23:13:17Z,2017-03-10T01:20:26Z,2017-03-10T01:20:43Z,MERGED,True,2,2,1,https://github.com/vdukhovni,Skip mdb_stat test when the command is not available,1,[],https://github.com/heimdal/heimdal/pull/256,https://github.com/quanah,4,https://github.com/heimdal/heimdal/pull/256#issuecomment-285521656,This should resolve #251,I am testing locally and will update once that's complete.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,256,2017-03-09T23:13:17Z,2017-03-10T01:20:26Z,2017-03-10T01:20:43Z,MERGED,True,2,2,1,https://github.com/vdukhovni,Skip mdb_stat test when the command is not available,1,[],https://github.com/heimdal/heimdal/pull/256,https://github.com/quanah,5,https://github.com/heimdal/heimdal/pull/256#issuecomment-285532435,This should resolve #251,"While ""resolves"" is not a valid keyword, there are several words one can use:
By prefacing your commits with “Fixes”, “Fixed”, “Fix”, “Closes”, “Closed”, or “Close” when the commit is merged into master, it will also automatically close the issue.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,256,2017-03-09T23:13:17Z,2017-03-10T01:20:26Z,2017-03-10T01:20:43Z,MERGED,True,2,2,1,https://github.com/vdukhovni,Skip mdb_stat test when the command is not available,1,[],https://github.com/heimdal/heimdal/pull/256,https://github.com/quanah,6,https://github.com/heimdal/heimdal/pull/256#issuecomment-285538279,This should resolve #251,"Looks good.
Before:
make  check-authz check-canon check-cc check-delegation check-des check-digest check-fast check-kadmin check-hdb-mitdb check-kdc check-kdc-weak check-keys check-kpasswdd check-pkinit check-iprop check-referral check-tester check-uu
  GEN    check-iprop
./check-iprop: line 388: mdb_stat: command not found
./check-iprop: line 389: [: : integer expression expected
FAIL: check-iprop

With this fix:
make  check-authz check-canon check-cc check-delegation check-des check-digest check-fast check-kadmin check-hdb-mitdb check-kdc check-kdc-weak check-keys check-kpasswdd check-pkinit check-iprop check-referral check-tester check-uu
  GEN    check-iprop
PASS: check-iprop",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,258,2017-03-10T20:41:05Z,2017-03-10T20:47:44Z,2017-03-10T20:47:44Z,MERGED,True,40,40,34,https://github.com/quanah,Minor typo/grammar fixes,1,[],https://github.com/heimdal/heimdal/pull/258,https://github.com/quanah,1,https://github.com/heimdal/heimdal/pull/258,Just some minor bits I found while looking at the code base.,Just some minor bits I found while looking at the code base.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,258,2017-03-10T20:41:05Z,2017-03-10T20:47:44Z,2017-03-10T20:47:44Z,MERGED,True,40,40,34,https://github.com/quanah,Minor typo/grammar fixes,1,[],https://github.com/heimdal/heimdal/pull/258,https://github.com/elric1,2,https://github.com/heimdal/heimdal/pull/258#issuecomment-285780120,Just some minor bits I found while looking at the code base.,Looks good.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,259,2017-03-13T22:40:34Z,2017-03-13T23:17:30Z,2017-03-13T23:17:30Z,MERGED,True,11,5,1,https://github.com/jaltman,kdc: de_http stricter parsing,1,[],https://github.com/heimdal/heimdal/pull/259,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/259,"In de_http() treat any sequence of '%' not followed by two hex digits
as invalid.
Change-Id: I812665c1a2806f8daba06d267bbee57287aa2314","In de_http() treat any sequence of '%' not followed by two hex digits
as invalid.
Change-Id: I812665c1a2806f8daba06d267bbee57287aa2314",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,260,2017-03-14T21:30:40Z,2017-03-17T17:07:24Z,2017-03-17T17:07:30Z,MERGED,True,478,260,57,https://github.com/vdukhovni,Stage commits for 7.2,33,[],https://github.com/heimdal/heimdal/pull/260,https://github.com/vdukhovni,1,https://github.com/heimdal/heimdal/pull/260,"Please review, and travis build opportunity before we risk polluting the real branch.","Please review, and travis build opportunity before we risk polluting the real branch.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,260,2017-03-14T21:30:40Z,2017-03-17T17:07:24Z,2017-03-17T17:07:30Z,MERGED,True,478,260,57,https://github.com/vdukhovni,Stage commits for 7.2,33,[],https://github.com/heimdal/heimdal/pull/260,https://github.com/vdukhovni,2,https://github.com/heimdal/heimdal/pull/260#issuecomment-286575995,"Please review, and travis build opportunity before we risk polluting the real branch.","Jeff, please recheck the versions in f92e446",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,260,2017-03-14T21:30:40Z,2017-03-17T17:07:24Z,2017-03-17T17:07:30Z,MERGED,True,478,260,57,https://github.com/vdukhovni,Stage commits for 7.2,33,[],https://github.com/heimdal/heimdal/pull/260,https://github.com/vdukhovni,3,https://github.com/heimdal/heimdal/pull/260#issuecomment-286579406,"Please review, and travis build opportunity before we risk polluting the real branch.","Removed the emalloc change, it is not ready yet...",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,260,2017-03-14T21:30:40Z,2017-03-17T17:07:24Z,2017-03-17T17:07:30Z,MERGED,True,478,260,57,https://github.com/vdukhovni,Stage commits for 7.2,33,[],https://github.com/heimdal/heimdal/pull/260,https://github.com/vdukhovni,4,https://github.com/heimdal/heimdal/pull/260#issuecomment-286835279,"Please review, and travis build opportunity before we risk polluting the real branch.",Removed a few more commits that are not essential for the stable branch.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,260,2017-03-14T21:30:40Z,2017-03-17T17:07:24Z,2017-03-17T17:07:30Z,MERGED,True,478,260,57,https://github.com/vdukhovni,Stage commits for 7.2,33,[],https://github.com/heimdal/heimdal/pull/260,https://github.com/vdukhovni,5,https://github.com/heimdal/heimdal/pull/260#issuecomment-287099216,"Please review, and travis build opportunity before we risk polluting the real branch.","Added ""expr"" work-around from master to fix build-break on FreeBSD 11.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,261,2017-03-15T22:46:34Z,2017-03-15T23:12:04Z,2017-03-15T23:15:07Z,MERGED,True,4,4,3,https://github.com/vdukhovni,Leave srcdir as-as and use absolute form only as needed,1,[],https://github.com/heimdal/heimdal/pull/261,https://github.com/vdukhovni,1,https://github.com/heimdal/heimdal/pull/261,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,262,2017-03-15T22:52:35Z,2017-03-15T23:15:58Z,2017-03-15T23:16:01Z,MERGED,True,14,0,1,https://github.com/vdukhovni,Add rationale comments for conditional yyparse redefinition,1,[],https://github.com/heimdal/heimdal/pull/262,https://github.com/vdukhovni,1,https://github.com/heimdal/heimdal/pull/262,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,263,2017-03-16T06:09:30Z,2017-03-16T15:41:20Z,2017-03-16T15:41:27Z,MERGED,True,3,2,1,https://github.com/vdukhovni,Avoid expr in non-portable comparison,1,[],https://github.com/heimdal/heimdal/pull/263,https://github.com/vdukhovni,1,https://github.com/heimdal/heimdal/pull/263,"The output of wc -l includes leading white-space, and at least
in FreeBSD 11, expr 1 + ""$foo"" fails when ""$foo"" (captured as
wc -l output) has leading whitespace.  Instead, just emit one
more line for ""wc"" to count.","The output of wc -l includes leading white-space, and at least
in FreeBSD 11, expr 1 + ""$foo"" fails when ""$foo"" (captured as
wc -l output) has leading whitespace.  Instead, just emit one
more line for ""wc"" to count.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,264,2017-03-17T04:35:30Z,2017-03-17T15:51:32Z,2017-03-17T15:51:37Z,MERGED,True,1,1,1,https://github.com/vdukhovni,Fix off by 1 write.,1,[],https://github.com/heimdal/heimdal/pull/264,https://github.com/vdukhovni,1,https://github.com/heimdal/heimdal/pull/264,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,265,2017-03-17T06:03:19Z,2017-03-17T16:47:41Z,2017-03-17T16:47:45Z,MERGED,True,2,1,1,https://github.com/vdukhovni,Avoid make dist fail when doxyout/ does not exist,1,[],https://github.com/heimdal/heimdal/pull/265,https://github.com/vdukhovni,1,https://github.com/heimdal/heimdal/pull/265,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,265,2017-03-17T06:03:19Z,2017-03-17T16:47:41Z,2017-03-17T16:47:45Z,MERGED,True,2,1,1,https://github.com/vdukhovni,Avoid make dist fail when doxyout/ does not exist,1,[],https://github.com/heimdal/heimdal/pull/265,https://github.com/vdukhovni,2,https://github.com/heimdal/heimdal/pull/265#issuecomment-287392523,,"I have doxygen installed, and yet that directory does not exist initially when I run ""make dist"".",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,265,2017-03-17T06:03:19Z,2017-03-17T16:47:41Z,2017-03-17T16:47:45Z,MERGED,True,2,1,1,https://github.com/vdukhovni,Avoid make dist fail when doxyout/ does not exist,1,[],https://github.com/heimdal/heimdal/pull/265,https://github.com/vdukhovni,3,https://github.com/heimdal/heimdal/pull/265#issuecomment-287394243,,"Is there something doxygen-related I am neglecting to do after:
./autogen.sh
./configure ...

and before
make dist",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,265,2017-03-17T06:03:19Z,2017-03-17T16:47:41Z,2017-03-17T16:47:45Z,MERGED,True,2,1,1,https://github.com/vdukhovni,Avoid make dist fail when doxyout/ does not exist,1,[],https://github.com/heimdal/heimdal/pull/265,https://github.com/nicowilliams,4,https://github.com/heimdal/heimdal/pull/265#issuecomment-287395257,,"Oh, maybe the sequence is:
./autogen.sh
./configure ...
make doc
make dist",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,265,2017-03-17T06:03:19Z,2017-03-17T16:47:41Z,2017-03-17T16:47:45Z,MERGED,True,2,1,1,https://github.com/vdukhovni,Avoid make dist fail when doxyout/ does not exist,1,[],https://github.com/heimdal/heimdal/pull/265,https://github.com/vdukhovni,5,https://github.com/heimdal/heimdal/pull/265#issuecomment-287395940,,"Nope, ""make doc"" is a NOP (doc already exists).",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,265,2017-03-17T06:03:19Z,2017-03-17T16:47:41Z,2017-03-17T16:47:45Z,MERGED,True,2,1,1,https://github.com/vdukhovni,Avoid make dist fail when doxyout/ does not exist,1,[],https://github.com/heimdal/heimdal/pull/265,https://github.com/vdukhovni,6,https://github.com/heimdal/heimdal/pull/265#issuecomment-287396540,,"Also cd doc; make does not create any ""doxyout"" directories.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,265,2017-03-17T06:03:19Z,2017-03-17T16:47:41Z,2017-03-17T16:47:45Z,MERGED,True,2,1,1,https://github.com/vdukhovni,Avoid make dist fail when doxyout/ does not exist,1,[],https://github.com/heimdal/heimdal/pull/265,https://github.com/nicowilliams,7,https://github.com/heimdal/heimdal/pull/265#issuecomment-287399818,,Huh.  Looking...,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,265,2017-03-17T06:03:19Z,2017-03-17T16:47:41Z,2017-03-17T16:47:45Z,MERGED,True,2,1,1,https://github.com/vdukhovni,Avoid make dist fail when doxyout/ does not exist,1,[],https://github.com/heimdal/heimdal/pull/265,https://github.com/nicowilliams,8,https://github.com/heimdal/heimdal/pull/265#issuecomment-287400535,,You have to (cd $objdir/doc && make doxyout).,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,265,2017-03-17T06:03:19Z,2017-03-17T16:47:41Z,2017-03-17T16:47:45Z,MERGED,True,2,1,1,https://github.com/vdukhovni,Avoid make dist fail when doxyout/ does not exist,1,[],https://github.com/heimdal/heimdal/pull/265,https://github.com/nicowilliams,9,https://github.com/heimdal/heimdal/pull/265#issuecomment-287400875,,"If the doxyout directory doesn't exist make doxyout will whine but build it anyways, and the initial absence of doxyout will not affect the results.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,265,2017-03-17T06:03:19Z,2017-03-17T16:47:41Z,2017-03-17T16:47:45Z,MERGED,True,2,1,1,https://github.com/vdukhovni,Avoid make dist fail when doxyout/ does not exist,1,[],https://github.com/heimdal/heimdal/pull/265,https://github.com/vdukhovni,10,https://github.com/heimdal/heimdal/pull/265#issuecomment-287401023,,"$ make doxyout
find: ./doxyout: No such file or directory
*** Error code 1

Stop.
make: stopped in /usr/home/viktor/dev/heimdal/doc",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,265,2017-03-17T06:03:19Z,2017-03-17T16:47:41Z,2017-03-17T16:47:45Z,MERGED,True,2,1,1,https://github.com/vdukhovni,Avoid make dist fail when doxyout/ does not exist,1,[],https://github.com/heimdal/heimdal/pull/265,https://github.com/vdukhovni,11,https://github.com/heimdal/heimdal/pull/265#issuecomment-287401189,,"On FreeBSD, make runs the shell command with set -e by default.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,265,2017-03-17T06:03:19Z,2017-03-17T16:47:41Z,2017-03-17T16:47:45Z,MERGED,True,2,1,1,https://github.com/vdukhovni,Avoid make dist fail when doxyout/ does not exist,1,[],https://github.com/heimdal/heimdal/pull/265,https://github.com/vdukhovni,12,https://github.com/heimdal/heimdal/pull/265#issuecomment-287401349,,The patch avoids having the find ... blow up in make doxyout,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,265,2017-03-17T06:03:19Z,2017-03-17T16:47:41Z,2017-03-17T16:47:45Z,MERGED,True,2,1,1,https://github.com/vdukhovni,Avoid make dist fail when doxyout/ does not exist,1,[],https://github.com/heimdal/heimdal/pull/265,https://github.com/nicowilliams,13,https://github.com/heimdal/heimdal/pull/265#issuecomment-287401454,,"find: ‘/home/nico/ws/heimdal/doc/doxyout’: No such file or directory
base
hdb
hx509
gssapi
/home/nico/ws/heimdal/lib/gssapi/mech/doxygen.c:129: warning: Found unknown command `\FIXME'
krb5
ntlm
wind
hcrypto
/home/nico/ws/heimdal/lib/hcrypto/evp-openssl.c:509: warning: parameters of member OSSL_CIPHER_ALGORITHM are not (all) documented
/home/nico/ws/heimdal/lib/hcrypto/evp-openssl.c:530: warning: parameters of member OSSL_CIPHER_ALGORITHM are not (all) documented
/home/nico/ws/heimdal/lib/hcrypto/evp-wincng.c:459: warning: parameters of member WINCNG_CIPHER_ALGORITHM are not (all) documented
/home/nico/ws/heimdal/lib/hcrypto/evp-wincng.c:474: warning: parameters of member WINCNG_CIPHER_ALGORITHM are not (all) documented
/home/nico/ws/heimdal/lib/hcrypto/des.c:764: warning: return type of member DES_cbc_cksum is not documented

The only differences to a previously-existing doxyout directory I had lying around were datetimes and Heimdal version numbers.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,265,2017-03-17T06:03:19Z,2017-03-17T16:47:41Z,2017-03-17T16:47:45Z,MERGED,True,2,1,1,https://github.com/vdukhovni,Avoid make dist fail when doxyout/ does not exist,1,[],https://github.com/heimdal/heimdal/pull/265,https://github.com/nicowilliams,14,https://github.com/heimdal/heimdal/pull/265#issuecomment-287401947,,Why don't we just add a mkdir -p @(srcdir)/doxyout?,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,266,2017-03-17T18:14:50Z,2017-03-17T18:16:15Z,2017-03-17T18:16:15Z,MERGED,True,1,3,1,https://github.com/nicowilliams,Fix lib/hdb make race,1,[],https://github.com/heimdal/heimdal/pull/266,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/266,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,267,2017-03-18T15:11:40Z,2017-03-18T19:22:34Z,2017-03-18T19:22:34Z,MERGED,True,1,1,1,https://github.com/jaltman,lib/krb5: krb5_config_parse_file_multi use after free,1,[],https://github.com/heimdal/heimdal/pull/267,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/267,"If the file is not a regular file, the 'fname' buffer will be freed
before it is passed to the krb5_set_error_message() routine.  That
this is true is not obvious from code inspection but 'newfname'
and 'fname' refer to the same memory.
Change-Id: I7780eae9ceaf01b245df488a2f7d7f406770864f","If the file is not a regular file, the 'fname' buffer will be freed
before it is passed to the krb5_set_error_message() routine.  That
this is true is not obvious from code inspection but 'newfname'
and 'fname' refer to the same memory.
Change-Id: I7780eae9ceaf01b245df488a2f7d7f406770864f",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,268,2017-03-18T22:04:31Z,2017-03-19T22:55:52Z,2017-03-19T22:55:57Z,MERGED,True,4405,2388,2,https://github.com/vdukhovni,Update SQLite to 3.17.0,1,[],https://github.com/heimdal/heimdal/pull/268,https://github.com/vdukhovni,1,https://github.com/heimdal/heimdal/pull/268,Keep SQLite up to date in master.,Keep SQLite up to date in master.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,270,2017-03-31T16:58:41Z,2017-03-31T23:58:01Z,2017-04-01T01:05:12Z,MERGED,True,383,48,6,https://github.com/nicowilliams,Further improvements to issuid(),2,[],https://github.com/heimdal/heimdal/pull/270,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/270,"This set of changes will make issuid() much more likely to return the correct answer on:

Linux with old glibc
FreeBSD
NetBSD

and should continue to return the correct answer on:

Linux with newer glibc
Illumos
OpenBSD","This set of changes will make issuid() much more likely to return the correct answer on:

Linux with old glibc
FreeBSD
NetBSD

and should continue to return the correct answer on:

Linux with newer glibc
Illumos
OpenBSD",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,270,2017-03-31T16:58:41Z,2017-03-31T23:58:01Z,2017-04-01T01:05:12Z,MERGED,True,383,48,6,https://github.com/nicowilliams,Further improvements to issuid(),2,[],https://github.com/heimdal/heimdal/pull/270,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/270#issuecomment-290781110,"This set of changes will make issuid() much more likely to return the correct answer on:

Linux with old glibc
FreeBSD
NetBSD

and should continue to return the correct answer on:

Linux with newer glibc
Illumos
OpenBSD","We have asked MIT to adopt Heimdal's issuid() in RT#8566.  @greghudson wants issuid() to be a bit smarter, and he's quite right.  This PR does that.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,270,2017-03-31T16:58:41Z,2017-03-31T23:58:01Z,2017-04-01T01:05:12Z,MERGED,True,383,48,6,https://github.com/nicowilliams,Further improvements to issuid(),2,[],https://github.com/heimdal/heimdal/pull/270,https://github.com/nicowilliams,3,https://github.com/heimdal/heimdal/pull/270#issuecomment-290882026,"This set of changes will make issuid() much more likely to return the correct answer on:

Linux with old glibc
FreeBSD
NetBSD

and should continue to return the correct answer on:

Linux with newer glibc
Illumos
OpenBSD","I believe this code will work even on Illumos, but rk_getprocauxval() will not, as the entries in /proc/self/auxv are different there.  However, it would be nice to have rk_getprocauxval() and rk_getauxval() working on Illumos too.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,272,2017-04-10T23:36:57Z,2017-04-13T23:11:53Z,2017-04-13T23:12:16Z,MERGED,True,76,37,2,https://github.com/vdukhovni,No tgt aliasing,4,['bug'],https://github.com/heimdal/heimdal/pull/272,https://github.com/vdukhovni,1,https://github.com/heimdal/heimdal/pull/272,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,272,2017-04-10T23:36:57Z,2017-04-13T23:11:53Z,2017-04-13T23:12:16Z,MERGED,True,76,37,2,https://github.com/vdukhovni,No tgt aliasing,4,['bug'],https://github.com/heimdal/heimdal/pull/272,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/272#issuecomment-293144775,,"@jaltman Viktor and I basically authored this together after much debugging.
These commits fix a bug observed only with patches we have that are not in master where for services in certain realms we only forward TGTs of the form krbtgt/<service-realm>@<service-realm>.  The breakage occurred when using referrals (i.e., no capaths on the client) and one realm in the middle, so client@A transiting B to talk to host/foo@C.  This can't be exercised in master today, but you can see the problems:

krb5_build_ap_req() does something it really ought not to do, and has always done it this way.
store_cred() does something it shouldn't do too: it was storing two ccache entries when the ticket we're storing is a TGT and was the result of a referral.  We never want anything like referral entries for TGTs in the ccache.
Lastly, and unrelatedly, but still obviously wrong (I think!  I could be wrong) get_cred_kdc_referral() was comparing the principal of the ticket in a TGS-REP to the requested one without comparing the realm name.  When this fails we were then (and still are) immediately checking that the returned ticket is a TGT.

Either (1) or (2) are sufficient to make this failure case go away, while (3) is completely harmless whether applied or not, and not really necessary in this case, but we think our patch for (3) is correct.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,272,2017-04-10T23:36:57Z,2017-04-13T23:11:53Z,2017-04-13T23:12:16Z,MERGED,True,76,37,2,https://github.com/vdukhovni,No tgt aliasing,4,['bug'],https://github.com/heimdal/heimdal/pull/272,https://github.com/vdukhovni,3,https://github.com/heimdal/heimdal/pull/272#issuecomment-294038357,,Addressed comments and added commit for better handling of referrals for (remote) TGTs,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,272,2017-04-10T23:36:57Z,2017-04-13T23:11:53Z,2017-04-13T23:12:16Z,MERGED,True,76,37,2,https://github.com/vdukhovni,No tgt aliasing,4,['bug'],https://github.com/heimdal/heimdal/pull/272,https://github.com/vdukhovni,4,https://github.com/heimdal/heimdal/pull/272#issuecomment-294044570,,Rebased,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,274,2017-04-12T00:29:19Z,2017-04-17T22:02:31Z,2017-04-17T22:26:34Z,MERGED,True,744,296,25,https://github.com/nicowilliams,Add secure_getenv(),5,[],https://github.com/heimdal/heimdal/pull/274,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/274,And other stuff.  And use it.,And other stuff.  And use it.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,274,2017-04-12T00:29:19Z,2017-04-17T22:02:31Z,2017-04-17T22:26:34Z,MERGED,True,744,296,25,https://github.com/nicowilliams,Add secure_getenv(),5,[],https://github.com/heimdal/heimdal/pull/274,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/274#issuecomment-293930855,And other stuff.  And use it.,"This needs a test.  And since we can't test set-uid in-tree, it probably needs some form of injection, else a manual test.
EDIT: Done.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,274,2017-04-12T00:29:19Z,2017-04-17T22:02:31Z,2017-04-17T22:26:34Z,MERGED,True,744,296,25,https://github.com/nicowilliams,Add secure_getenv(),5,[],https://github.com/heimdal/heimdal/pull/274,https://github.com/nicowilliams,3,https://github.com/heimdal/heimdal/pull/274#issuecomment-294613303,And other stuff.  And use it.,Thanks!,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,275,2017-04-18T05:29:01Z,2017-04-18T15:04:57Z,2017-04-18T20:21:13Z,MERGED,True,14,5,1,https://github.com/vdukhovni,Fix check-iprop race,1,[],https://github.com/heimdal/heimdal/pull/275,https://github.com/vdukhovni,1,https://github.com/heimdal/heimdal/pull/275,"Creation of a random key HDB entry takes 3 updates, not one.  Instead of
hard-coding this magic count, wait for the appearance of the expected
entry with no ""invalid"" flag among its attributes.","Creation of a random key HDB entry takes 3 updates, not one.  Instead of
hard-coding this magic count, wait for the appearance of the expected
entry with no ""invalid"" flag among its attributes.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,275,2017-04-18T05:29:01Z,2017-04-18T15:04:57Z,2017-04-18T20:21:13Z,MERGED,True,14,5,1,https://github.com/vdukhovni,Fix check-iprop race,1,[],https://github.com/heimdal/heimdal/pull/275,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/275#issuecomment-294874171,"Creation of a random key HDB entry takes 3 updates, not one.  Instead of
hard-coding this magic count, wait for the appearance of the expected
entry with no ""invalid"" flag among its attributes.",Thanks!,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,276,2017-04-18T21:28:02Z,2017-04-18T21:54:49Z,2017-04-18T21:55:46Z,MERGED,True,1,0,1,https://github.com/vdukhovni,Avoid another potential check-iprop race.,1,[],https://github.com/heimdal/heimdal/pull/276,https://github.com/vdukhovni,1,https://github.com/heimdal/heimdal/pull/276,"Though a race was never observed, the re-sync, slave DB deletion,
master changes and restart did not take into account late changes
in the master before slave down.","Though a race was never observed, the re-sync, slave DB deletion,
master changes and restart did not take into account late changes
in the master before slave down.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,278,2017-04-20T22:00:37Z,2017-04-25T15:22:59Z,2019-05-13T13:02:19Z,MERGED,True,1,0,1,https://github.com/elric1,krb5_kt_next_entry() needs to operate on a zero'd krb5_keytab_entry.,1,[],https://github.com/heimdal/heimdal/pull/278,https://github.com/elric1,1,https://github.com/heimdal/heimdal/pull/278,Addresses PR#277,Addresses PR#277,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,283,2017-05-16T16:37:13Z,2017-05-16T16:51:34Z,2021-07-30T14:32:45Z,MERGED,True,1,1,1,https://github.com/elric1,Issue 282: fix tolower_ascii in lib/krb5/principal.c.,1,[],https://github.com/heimdal/heimdal/pull/283,https://github.com/elric1,1,https://github.com/heimdal/heimdal/pull/283,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,284,2017-05-16T18:06:40Z,2017-05-16T21:44:57Z,2017-05-16T21:44:57Z,MERGED,True,2,2,1,https://github.com/nicowilliams,Travis: use --enable-maintainer-mode,1,[],https://github.com/heimdal/heimdal/pull/284,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/284,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,285,2017-05-20T03:42:41Z,2017-05-22T17:05:01Z,2017-06-29T02:09:44Z,MERGED,True,3,0,1,https://github.com/alexis-m,Fix memory leak in _gss_ntlm_release_cred.,1,[],https://github.com/heimdal/heimdal/pull/285,https://github.com/alexis-m,1,https://github.com/heimdal/heimdal/pull/285,"ntlm_cred is always allocated with calloc, so we need to free the cred
object too, similarly to what _gsskrb5_release_cred does.","ntlm_cred is always allocated with calloc, so we need to free the cred
object too, similarly to what _gsskrb5_release_cred does.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,285,2017-05-20T03:42:41Z,2017-05-22T17:05:01Z,2017-06-29T02:09:44Z,MERGED,True,3,0,1,https://github.com/alexis-m,Fix memory leak in _gss_ntlm_release_cred.,1,[],https://github.com/heimdal/heimdal/pull/285,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/285#issuecomment-303160753,"ntlm_cred is always allocated with calloc, so we need to free the cred
object too, similarly to what _gsskrb5_release_cred does.",Thanks!,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,286,2017-05-25T21:58:49Z,2017-05-27T03:24:31Z,2017-05-27T05:08:24Z,MERGED,True,514,131,26,https://github.com/nicowilliams,Improve ccache and keytab performance,14,[],https://github.com/heimdal/heimdal/pull/286,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/286,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,286,2017-05-25T21:58:49Z,2017-05-27T03:24:31Z,2017-05-27T05:08:24Z,MERGED,True,514,131,26,https://github.com/nicowilliams,Improve ccache and keytab performance,14,[],https://github.com/heimdal/heimdal/pull/286,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/286#issuecomment-304428247,,Thx!,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,287,2017-05-26T03:27:36Z,2017-05-26T15:53:38Z,2017-05-26T15:53:38Z,MERGED,True,19,1,4,https://github.com/vdukhovni,New KRB5_NO_TICKET_STORE env var,1,[],https://github.com/heimdal/heimdal/pull/287,https://github.com/vdukhovni,1,https://github.com/heimdal/heimdal/pull/287,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,288,2017-05-27T03:28:06Z,2017-05-27T05:08:01Z,2017-05-27T05:08:01Z,MERGED,True,3,3,1,https://github.com/vdukhovni,Fix test-auxval typos hidden by platform dependence,1,[],https://github.com/heimdal/heimdal/pull/288,https://github.com/vdukhovni,1,https://github.com/heimdal/heimdal/pull/288,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,290,2017-05-28T19:38:40Z,2017-05-28T21:58:03Z,2017-05-28T21:58:03Z,MERGED,True,1,1,1,https://github.com/vdukhovni,Fix missing wait_for in check-iprop,1,[],https://github.com/heimdal/heimdal/pull/290,https://github.com/vdukhovni,1,https://github.com/heimdal/heimdal/pull/290,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,291,2017-05-28T19:39:23Z,2017-05-28T21:57:57Z,2017-05-28T21:57:57Z,MERGED,True,1,1,1,https://github.com/vdukhovni,Fix missing wait_for in check-iprop,1,[],https://github.com/heimdal/heimdal/pull/291,https://github.com/vdukhovni,1,https://github.com/heimdal/heimdal/pull/291,(cherry picked from commit 4052b28),(cherry picked from commit 4052b28),True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,293,2017-06-03T23:02:32Z,2018-12-23T07:33:32Z,2019-11-09T14:06:00Z,MERGED,True,15,13,1,https://github.com/macrotex,Make the password used in check-kadmin.in be settable as a parameter,2,[],https://github.com/heimdal/heimdal/pull/293,https://github.com/macrotex,1,https://github.com/heimdal/heimdal/pull/293,"When we use a custom patch that makes strong passwords required even for
administrators the check-kadmin test will fail because ""foo"" (the password
used in check-kadmin.in) is not a strong password. So, we make the
password used in check-kadmin.in settable as a parameter. This way, we
only have to change one line of check-kadmin.in rather than a dozen to get
check-kadmin to pass when using the strong-passwords everywhere patch.
Note that this change makes no real change to any of the tests in
check-kadmin.in: no tests are changed, removed, or added.","When we use a custom patch that makes strong passwords required even for
administrators the check-kadmin test will fail because ""foo"" (the password
used in check-kadmin.in) is not a strong password. So, we make the
password used in check-kadmin.in settable as a parameter. This way, we
only have to change one line of check-kadmin.in rather than a dozen to get
check-kadmin to pass when using the strong-passwords everywhere patch.
Note that this change makes no real change to any of the tests in
check-kadmin.in: no tests are changed, removed, or added.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,293,2017-06-03T23:02:32Z,2018-12-23T07:33:32Z,2019-11-09T14:06:00Z,MERGED,True,15,13,1,https://github.com/macrotex,Make the password used in check-kadmin.in be settable as a parameter,2,[],https://github.com/heimdal/heimdal/pull/293,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/293#issuecomment-449618275,"When we use a custom patch that makes strong passwords required even for
administrators the check-kadmin test will fail because ""foo"" (the password
used in check-kadmin.in) is not a strong password. So, we make the
password used in check-kadmin.in settable as a parameter. This way, we
only have to change one line of check-kadmin.in rather than a dozen to get
check-kadmin to pass when using the strong-passwords everywhere patch.
Note that this change makes no real change to any of the tests in
check-kadmin.in: no tests are changed, removed, or added.","This looks good to me, do you want me to merge @jaltman?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,296,2017-06-19T15:36:06Z,2017-06-19T22:54:06Z,2017-06-19T22:54:06Z,CLOSED,False,2,0,1,https://github.com/quanah,Fixes issue#294,4,[],https://github.com/heimdal/heimdal/pull/296,https://github.com/quanah,1,https://github.com/heimdal/heimdal/pull/296,Fixes issue#294 when building Heimdal on x86 Solaris 11.,Fixes issue#294 when building Heimdal on x86 Solaris 11.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,296,2017-06-19T15:36:06Z,2017-06-19T22:54:06Z,2017-06-19T22:54:06Z,CLOSED,False,2,0,1,https://github.com/quanah,Fixes issue#294,4,[],https://github.com/heimdal/heimdal/pull/296,https://github.com/quanah,2,https://github.com/heimdal/heimdal/pull/296#issuecomment-309595966,Fixes issue#294 when building Heimdal on x86 Solaris 11.,going to close and regenerate from its own unique branch so it doesn't pick up the other cruft.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,297,2017-06-19T23:01:07Z,2017-07-22T15:36:42Z,2018-05-02T22:01:29Z,MERGED,True,2,0,1,https://github.com/quanah,Fixes https://github.com/heimdal/heimdal/issues/294,1,[],https://github.com/heimdal/heimdal/pull/297,https://github.com/quanah,1,https://github.com/heimdal/heimdal/pull/297,"Fix for issue #294, correctly wrap include of sys/cdefs.h to only fire when it is available.","Fix for issue #294, correctly wrap include of sys/cdefs.h to only fire when it is available.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,300,2017-07-12T06:02:51Z,2017-07-12T11:27:32Z,2017-07-12T11:27:32Z,MERGED,True,6,4,1,https://github.com/vdukhovni,Retain `ret != 0` when capaths finds no match.,1,[],https://github.com/heimdal/heimdal/pull/300,https://github.com/vdukhovni,1,https://github.com/heimdal/heimdal/pull/300,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,301,2017-07-13T01:54:09Z,2017-07-13T02:39:07Z,2017-07-13T02:39:07Z,MERGED,True,6,4,1,https://github.com/vdukhovni,Retain `ret != 0` when capaths finds no match.,1,[],https://github.com/heimdal/heimdal/pull/301,https://github.com/vdukhovni,1,https://github.com/heimdal/heimdal/pull/301,(cherry picked from commit 3910c23),(cherry picked from commit 3910c23),True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,305,2017-07-22T14:55:22Z,2017-07-28T03:03:52Z,2017-07-28T03:03:52Z,MERGED,True,9,7,1,https://github.com/jaltman,kdc: unused pid element is (pid_t)-1 not zero,1,[],https://github.com/heimdal/heimdal/pull/305,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/305,"When the termination of a child process is observed by reap_kid() it
clears the pids[] element by assigning it the invalid pid value
(pid_t)-1. However, start_kdc() assumes that the unused pid[[] element
value is 0.  As a result, each pid[] element's associated child process
can only be restarted once since start_kdc() will not be able to locate
an unused element.
This change alters start_kdc() to initialize all elements of pids[] to
(pid_t)-1 and use that as the marker for unused elements.  By doing so
start_kdc() can properly record child process pids and indefinitely
restart child processes as necessary.
Change-Id: Ia93c9284ab21289994eca7fc9cf1278be7c00683","When the termination of a child process is observed by reap_kid() it
clears the pids[] element by assigning it the invalid pid value
(pid_t)-1. However, start_kdc() assumes that the unused pid[[] element
value is 0.  As a result, each pid[] element's associated child process
can only be restarted once since start_kdc() will not be able to locate
an unused element.
This change alters start_kdc() to initialize all elements of pids[] to
(pid_t)-1 and use that as the marker for unused elements.  By doing so
start_kdc() can properly record child process pids and indefinitely
restart child processes as necessary.
Change-Id: Ia93c9284ab21289994eca7fc9cf1278be7c00683",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,311,2017-08-08T20:55:56Z,2017-09-25T23:22:46Z,2018-05-02T22:01:45Z,MERGED,True,4,0,1,https://github.com/quanah,Fixes https://github.com/heimdal/heimdal/issues/308,1,[],https://github.com/heimdal/heimdal/pull/311,https://github.com/quanah,1,https://github.com/heimdal/heimdal/pull/311,Only include sys/types.h if we actually have it.,Only include sys/types.h if we actually have it.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,311,2017-08-08T20:55:56Z,2017-09-25T23:22:46Z,2018-05-02T22:01:45Z,MERGED,True,4,0,1,https://github.com/quanah,Fixes https://github.com/heimdal/heimdal/issues/308,1,[],https://github.com/heimdal/heimdal/pull/311,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/311#issuecomment-332043039,Only include sys/types.h if we actually have it.,Thanks!,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,312,2017-08-08T20:56:41Z,2017-09-25T23:31:43Z,2018-05-02T22:02:52Z,MERGED,True,1,1,1,https://github.com/quanah,Fixes https://github.com/heimdal/heimdal/issues/310,1,[],https://github.com/heimdal/heimdal/pull/312,https://github.com/quanah,1,https://github.com/heimdal/heimdal/pull/312,Use PF_UNIX instead of PF_LOCAL,Use PF_UNIX instead of PF_LOCAL,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,312,2017-08-08T20:56:41Z,2017-09-25T23:31:43Z,2018-05-02T22:02:52Z,MERGED,True,1,1,1,https://github.com/quanah,Fixes https://github.com/heimdal/heimdal/issues/310,1,[],https://github.com/heimdal/heimdal/pull/312,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/312#issuecomment-332041356,Use PF_UNIX instead of PF_LOCAL,Does Solaris 10 not have PF_LOCAL??,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,312,2017-08-08T20:56:41Z,2017-09-25T23:31:43Z,2018-05-02T22:02:52Z,MERGED,True,1,1,1,https://github.com/quanah,Fixes https://github.com/heimdal/heimdal/issues/310,1,[],https://github.com/heimdal/heimdal/pull/312,https://github.com/quanah,3,https://github.com/heimdal/heimdal/pull/312#issuecomment-332041968,Use PF_UNIX instead of PF_LOCAL,"@nicowilliams Correct, Solaris 10 does not have PF_LOCAL available.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,312,2017-08-08T20:56:41Z,2017-09-25T23:31:43Z,2018-05-02T22:02:52Z,MERGED,True,1,1,1,https://github.com/quanah,Fixes https://github.com/heimdal/heimdal/issues/310,1,[],https://github.com/heimdal/heimdal/pull/312,https://github.com/nicowilliams,4,https://github.com/heimdal/heimdal/pull/312#issuecomment-332042994,Use PF_UNIX instead of PF_LOCAL,Thanks!,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,313,2017-08-08T22:32:52Z,2017-09-25T23:22:00Z,2018-05-02T22:02:29Z,MERGED,True,129,1,2,https://github.com/quanah,Issue309,2,[],https://github.com/heimdal/heimdal/pull/313,https://github.com/quanah,1,https://github.com/heimdal/heimdal/pull/313,"This adds a new getline routine, and adds it to the compile suite.  Note that I have not currently tested this when building on Linux or other OSes that have their own native getline yet.","This adds a new getline routine, and adds it to the compile suite.  Note that I have not currently tested this when building on Linux or other OSes that have their own native getline yet.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,313,2017-08-08T22:32:52Z,2017-09-25T23:22:00Z,2018-05-02T22:02:29Z,MERGED,True,129,1,2,https://github.com/quanah,Issue309,2,[],https://github.com/heimdal/heimdal/pull/313,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/313#issuecomment-332043059,"This adds a new getline routine, and adds it to the compile suite.  Note that I have not currently tested this when building on Linux or other OSes that have their own native getline yet.",Thanks!,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,318,2017-08-10T20:11:49Z,2017-09-25T23:18:56Z,2018-04-21T20:49:38Z,MERGED,True,1,0,1,https://github.com/rra,Close memory leak in external_passwd_quality,1,[],https://github.com/heimdal/heimdal/pull/318,https://github.com/rra,1,https://github.com/heimdal/heimdal/pull/318,"If the external password quality program returned a failure message, the unparsed form of the principal name was never freed.  Free it.","If the external password quality program returned a failure message, the unparsed form of the principal name was never freed.  Free it.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,318,2017-08-10T20:11:49Z,2017-09-25T23:18:56Z,2018-04-21T20:49:38Z,MERGED,True,1,0,1,https://github.com/rra,Close memory leak in external_passwd_quality,1,[],https://github.com/heimdal/heimdal/pull/318,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/318#issuecomment-332043074,"If the external password quality program returned a failure message, the unparsed form of the principal name was never freed.  Free it.",Thanks!,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,319,2017-08-10T20:13:18Z,2017-09-25T23:17:02Z,2017-09-25T23:32:57Z,MERGED,True,2,2,1,https://github.com/rra,Set default principal for password change to credential client,1,[],https://github.com/heimdal/heimdal/pull/319,https://github.com/rra,1,https://github.com/heimdal/heimdal/pull/319,"The default client principal for krb5_set_password, if the principal argument were NULL, was krb5_get_default_principal.  But krb5_set_password requires credentials for the password change service be passed in, and those credentials are already associated with a client principal that's much more likely to be the correct choice for a default.  Use that principal instead of krb5_get_default_principal.","The default client principal for krb5_set_password, if the principal argument were NULL, was krb5_get_default_principal.  But krb5_set_password requires credentials for the password change service be passed in, and those credentials are already associated with a client principal that's much more likely to be the correct choice for a default.  Use that principal instead of krb5_get_default_principal.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,319,2017-08-10T20:13:18Z,2017-09-25T23:17:02Z,2017-09-25T23:32:57Z,MERGED,True,2,2,1,https://github.com/rra,Set default principal for password change to credential client,1,[],https://github.com/heimdal/heimdal/pull/319,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/319#issuecomment-332043093,"The default client principal for krb5_set_password, if the principal argument were NULL, was krb5_get_default_principal.  But krb5_set_password requires credentials for the password change service be passed in, and those credentials are already associated with a client principal that's much more likely to be the correct choice for a default.  Use that principal instead of krb5_get_default_principal.",Thanks!,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,320,2017-08-10T20:14:22Z,2018-12-24T04:17:22Z,2019-02-09T20:08:54Z,CLOSED,False,34,25,2,https://github.com/rra,Always check password quality,1,[],https://github.com/heimdal/heimdal/pull/320,https://github.com/rra,1,https://github.com/heimdal/heimdal/pull/320,"Previous versions bypassed the password quality check in kadmind and kpasswdd if the the password was being changed by an administrator instead of the user.  However, password quality checks are how password history should be implemented, and administrator password changes should also go into history.  Check password quality unconditionally.","Previous versions bypassed the password quality check in kadmind and kpasswdd if the the password was being changed by an administrator instead of the user.  However, password quality checks are how password history should be implemented, and administrator password changes should also go into history.  Check password quality unconditionally.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,320,2017-08-10T20:14:22Z,2018-12-24T04:17:22Z,2019-02-09T20:08:54Z,CLOSED,False,34,25,2,https://github.com/rra,Always check password quality,1,[],https://github.com/heimdal/heimdal/pull/320,https://github.com/macrotex,2,https://github.com/heimdal/heimdal/pull/320#issuecomment-322878707,"Previous versions bypassed the password quality check in kadmind and kpasswdd if the the password was being changed by an administrator instead of the user.  However, password quality checks are how password history should be implemented, and administrator password changes should also go into history.  Check password quality unconditionally.",See also Pull Request #293,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,320,2017-08-10T20:14:22Z,2018-12-24T04:17:22Z,2019-02-09T20:08:54Z,CLOSED,False,34,25,2,https://github.com/rra,Always check password quality,1,[],https://github.com/heimdal/heimdal/pull/320,https://github.com/macrotex,3,https://github.com/heimdal/heimdal/pull/320#issuecomment-339670692,"Previous versions bypassed the password quality check in kadmind and kpasswdd if the the password was being changed by an administrator instead of the user.  However, password quality checks are how password history should be implemented, and administrator password changes should also go into history.  Check password quality unconditionally.","The changes in test #293 were written to address this exact patch. When you say ""This definitely needs to be bundled with #293"" do you mean that #320 should be altered to include the patch from #293, and then #293 deleted?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,320,2017-08-10T20:14:22Z,2018-12-24T04:17:22Z,2019-02-09T20:08:54Z,CLOSED,False,34,25,2,https://github.com/rra,Always check password quality,1,[],https://github.com/heimdal/heimdal/pull/320,https://github.com/jaltman,4,https://github.com/heimdal/heimdal/pull/320#issuecomment-447300605,"Previous versions bypassed the password quality check in kadmind and kpasswdd if the the password was being changed by an administrator instead of the user.  However, password quality checks are how password history should be implemented, and administrator password changes should also go into history.  Check password quality unconditionally.",I believe that always checking password quality should be a configuration option.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,320,2017-08-10T20:14:22Z,2018-12-24T04:17:22Z,2019-02-09T20:08:54Z,CLOSED,False,34,25,2,https://github.com/rra,Always check password quality,1,[],https://github.com/heimdal/heimdal/pull/320,https://github.com/lhoward,5,https://github.com/heimdal/heimdal/pull/320#issuecomment-449683006,"Previous versions bypassed the password quality check in kadmind and kpasswdd if the the password was being changed by an administrator instead of the user.  However, password quality checks are how password history should be implemented, and administrator password changes should also go into history.  Check password quality unconditionally.",It's interesting (but I suppose there may be historical reasons for this) that allow_self_change_password is honored only by kadmind (not kpasswdd).,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,320,2017-08-10T20:14:22Z,2018-12-24T04:17:22Z,2019-02-09T20:08:54Z,CLOSED,False,34,25,2,https://github.com/rra,Always check password quality,1,[],https://github.com/heimdal/heimdal/pull/320,https://github.com/lhoward,6,https://github.com/heimdal/heimdal/pull/320#issuecomment-449683056,"Previous versions bypassed the password quality check in kadmind and kpasswdd if the the password was being changed by an administrator instead of the user.  However, password quality checks are how password history should be implemented, and administrator password changes should also go into history.  Check password quality unconditionally.","Anyway, I'll integrate with a configuration knob, default to existing behavior?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,320,2017-08-10T20:14:22Z,2018-12-24T04:17:22Z,2019-02-09T20:08:54Z,CLOSED,False,34,25,2,https://github.com/rra,Always check password quality,1,[],https://github.com/heimdal/heimdal/pull/320,https://github.com/lhoward,7,https://github.com/heimdal/heimdal/pull/320#issuecomment-449683253,"Previous versions bypassed the password quality check in kadmind and kpasswdd if the the password was being changed by an administrator instead of the user.  However, password quality checks are how password history should be implemented, and administrator password changes should also go into history.  Check password quality unconditionally.",Someone come up with a better name than check_on_admin_set for the option :),True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,320,2017-08-10T20:14:22Z,2018-12-24T04:17:22Z,2019-02-09T20:08:54Z,CLOSED,False,34,25,2,https://github.com/rra,Always check password quality,1,[],https://github.com/heimdal/heimdal/pull/320,https://github.com/lhoward,8,https://github.com/heimdal/heimdal/pull/320#issuecomment-449684108,"Previous versions bypassed the password quality check in kadmind and kpasswdd if the the password was being changed by an administrator instead of the user.  However, password quality checks are how password history should be implemented, and administrator password changes should also go into history.  Check password quality unconditionally.","Closing, will resubmit new pull request.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,320,2017-08-10T20:14:22Z,2018-12-24T04:17:22Z,2019-02-09T20:08:54Z,CLOSED,False,34,25,2,https://github.com/rra,Always check password quality,1,[],https://github.com/heimdal/heimdal/pull/320,https://github.com/nicowilliams,9,https://github.com/heimdal/heimdal/pull/320#issuecomment-449877520,"Previous versions bypassed the password quality check in kadmind and kpasswdd if the the password was being changed by an administrator instead of the user.  However, password quality checks are how password history should be implemented, and administrator password changes should also go into history.  Check password quality unconditionally.","It's interesting (but I suppose there may be historical reasons for this) that allow_self_change_password is honored only by kadmind (not kpasswdd).

I think the reason is just that users were supposed to use kpasswdd for password changes.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,321,2017-08-11T06:23:10Z,2017-09-25T23:16:19Z,2017-09-25T23:33:02Z,MERGED,True,2,2,1,https://github.com/cryptomilk,lib: Fix printing a short into portstr,1,[],https://github.com/heimdal/heimdal/pull/321,https://github.com/cryptomilk,1,https://github.com/heimdal/heimdal/pull/321,"The size of portstr is too small to print an integer and we should print
a short anyway.
This fixes building with GCC 7.1","The size of portstr is too small to print an integer and we should print
a short anyway.
This fixes building with GCC 7.1",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,321,2017-08-11T06:23:10Z,2017-09-25T23:16:19Z,2017-09-25T23:33:02Z,MERGED,True,2,2,1,https://github.com/cryptomilk,lib: Fix printing a short into portstr,1,[],https://github.com/heimdal/heimdal/pull/321,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/321#issuecomment-332043103,"The size of portstr is too small to print an integer and we should print
a short anyway.
This fixes building with GCC 7.1",Thanks!,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,326,2017-08-23T16:39:49Z,2017-08-23T20:10:39Z,2017-08-23T20:10:39Z,MERGED,True,10,4,1,https://github.com/vdukhovni,Avoid potential memory leak in krb5_sendto_set_hostname,1,[],https://github.com/heimdal/heimdal/pull/326,https://github.com/vdukhovni,1,https://github.com/heimdal/heimdal/pull/326,"If the hostname was already set, a typo in a test meant we were not
freeing it.  While we're at it, handle the unlikely possibility that
the existing pointer is passed as the new value.","If the hostname was already set, a typo in a test meant we were not
freeing it.  While we're at it, handle the unlikely possibility that
the existing pointer is passed as the new value.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,327,2017-08-23T17:38:58Z,2017-08-23T20:09:12Z,2017-08-23T20:09:12Z,MERGED,True,111,7,5,https://github.com/vdukhovni,"Try to avoid parse_{time,units,flags} symbol conflicts",1,[],https://github.com/heimdal/heimdal/pull/327,https://github.com/vdukhovni,1,https://github.com/heimdal/heimdal/pull/327,"On Debian stretch systems PAM modules linked against Heimdal run into
symbol conflicts with parse_time() in systemd libraries.  We redefine
parse_time() and friends to rk_parse_time(), ... while keeping the old
names for ABI compatibility with existing clients.
The legacy names should eventually be droppped.","On Debian stretch systems PAM modules linked against Heimdal run into
symbol conflicts with parse_time() in systemd libraries.  We redefine
parse_time() and friends to rk_parse_time(), ... while keeping the old
names for ABI compatibility with existing clients.
The legacy names should eventually be droppped.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,328,2017-08-29T06:05:50Z,2017-10-11T17:51:57Z,2017-10-11T17:52:13Z,MERGED,True,49,42,3,https://github.com/metze-samba,Heimdal checksum fixes,4,[],https://github.com/heimdal/heimdal/pull/328,https://github.com/metze-samba,1,https://github.com/heimdal/heimdal/pull/328,"Please merge these fixes which are already in Samba's copy of heimdal.
Thanks!","Please merge these fixes which are already in Samba's copy of heimdal.
Thanks!",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,328,2017-08-29T06:05:50Z,2017-10-11T17:51:57Z,2017-10-11T17:52:13Z,MERGED,True,49,42,3,https://github.com/metze-samba,Heimdal checksum fixes,4,[],https://github.com/heimdal/heimdal/pull/328,https://github.com/vdukhovni,2,https://github.com/heimdal/heimdal/pull/328#issuecomment-332085566,"Please merge these fixes which are already in Samba's copy of heimdal.
Thanks!","Overall, looks good to me.
@nicowilliams: care to look?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,328,2017-08-29T06:05:50Z,2017-10-11T17:51:57Z,2017-10-11T17:52:13Z,MERGED,True,49,42,3,https://github.com/metze-samba,Heimdal checksum fixes,4,[],https://github.com/heimdal/heimdal/pull/328,https://github.com/nicowilliams,3,https://github.com/heimdal/heimdal/pull/328#issuecomment-332236685,"Please merge these fixes which are already in Samba's copy of heimdal.
Thanks!",I'll take a look.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,328,2017-08-29T06:05:50Z,2017-10-11T17:51:57Z,2017-10-11T17:52:13Z,MERGED,True,49,42,3,https://github.com/metze-samba,Heimdal checksum fixes,4,[],https://github.com/heimdal/heimdal/pull/328,https://github.com/nicowilliams,4,https://github.com/heimdal/heimdal/pull/328#issuecomment-335893975,"Please merge these fixes which are already in Samba's copy of heimdal.
Thanks!",Thanks!  Sorry it took so long for me to review this!,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,329,2017-08-29T06:07:22Z,2017-09-25T23:10:30Z,2017-09-25T23:33:07Z,MERGED,True,1,1,1,https://github.com/metze-samba,kdc: fix dh->q allocation check in get_dh_param(),1,[],https://github.com/heimdal/heimdal/pull/329,https://github.com/metze-samba,1,https://github.com/heimdal/heimdal/pull/329,"Please merge these fix, so we can backport it into Samba's copy of Heimdal.
Thanks!","Please merge these fix, so we can backport it into Samba's copy of Heimdal.
Thanks!",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,329,2017-08-29T06:07:22Z,2017-09-25T23:10:30Z,2017-09-25T23:33:07Z,MERGED,True,1,1,1,https://github.com/metze-samba,kdc: fix dh->q allocation check in get_dh_param(),1,[],https://github.com/heimdal/heimdal/pull/329,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/329#issuecomment-332043121,"Please merge these fix, so we can backport it into Samba's copy of Heimdal.
Thanks!",Thanks!,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,332,2017-09-04T11:25:48Z,2017-10-06T02:40:28Z,2017-10-13T08:24:30Z,CLOSED,False,18,6,2,https://github.com/bmwiedemann,Allow to override build date,1,[],https://github.com/heimdal/heimdal/pull/332,https://github.com/bmwiedemann,1,https://github.com/heimdal/heimdal/pull/332,"in order to make builds reproducible.
See https://reproducible-builds.org/ for why this is good
and https://reproducible-builds.org/specs/source-date-epoch/
for the definition of this variable.
This date call is designed to work with both GNU date and BSD date.","in order to make builds reproducible.
See https://reproducible-builds.org/ for why this is good
and https://reproducible-builds.org/specs/source-date-epoch/
for the definition of this variable.
This date call is designed to work with both GNU date and BSD date.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,332,2017-09-04T11:25:48Z,2017-10-06T02:40:28Z,2017-10-13T08:24:30Z,CLOSED,False,18,6,2,https://github.com/bmwiedemann,Allow to override build date,1,[],https://github.com/heimdal/heimdal/pull/332,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/332#issuecomment-332038552,"in order to make builds reproducible.
See https://reproducible-builds.org/ for why this is good
and https://reproducible-builds.org/specs/source-date-epoch/
for the definition of this variable.
This date call is designed to work with both GNU date and BSD date.",Why don't we just get rid of the Date altogether?,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,332,2017-09-04T11:25:48Z,2017-10-06T02:40:28Z,2017-10-13T08:24:30Z,CLOSED,False,18,6,2,https://github.com/bmwiedemann,Allow to override build date,1,[],https://github.com/heimdal/heimdal/pull/332,https://github.com/nicowilliams,3,https://github.com/heimdal/heimdal/pull/332#issuecomment-332039203,"in order to make builds reproducible.
See https://reproducible-builds.org/ for why this is good
and https://reproducible-builds.org/specs/source-date-epoch/
for the definition of this variable.
This date call is designed to work with both GNU date and BSD date.","Actually, for releases we shouldn't want the USER, the HOST, nor the DATE.
The only things of interest are:

the actual version
the HEAD commit hash",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,332,2017-09-04T11:25:48Z,2017-10-06T02:40:28Z,2017-10-13T08:24:30Z,CLOSED,False,18,6,2,https://github.com/bmwiedemann,Allow to override build date,1,[],https://github.com/heimdal/heimdal/pull/332,https://github.com/bmwiedemann,4,https://github.com/heimdal/heimdal/pull/332#issuecomment-334643798,"in order to make builds reproducible.
See https://reproducible-builds.org/ for why this is good
and https://reproducible-builds.org/specs/source-date-epoch/
for the definition of this variable.
This date call is designed to work with both GNU date and BSD date.","Closing after this was solved slightly differently in master with
6d27e00
469366d",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,332,2017-09-04T11:25:48Z,2017-10-06T02:40:28Z,2017-10-13T08:24:30Z,CLOSED,False,18,6,2,https://github.com/bmwiedemann,Allow to override build date,1,[],https://github.com/heimdal/heimdal/pull/332,https://github.com/nicowilliams,5,https://github.com/heimdal/heimdal/pull/332#issuecomment-336212161,"in order to make builds reproducible.
See https://reproducible-builds.org/ for why this is good
and https://reproducible-builds.org/specs/source-date-epoch/
for the definition of this variable.
This date call is designed to work with both GNU date and BSD date.",@bmwiedemann Was my fix sufficient for your purporses?,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,332,2017-09-04T11:25:48Z,2017-10-06T02:40:28Z,2017-10-13T08:24:30Z,CLOSED,False,18,6,2,https://github.com/bmwiedemann,Allow to override build date,1,[],https://github.com/heimdal/heimdal/pull/332,https://github.com/bmwiedemann,6,https://github.com/heimdal/heimdal/pull/332#issuecomment-336385329,"in order to make builds reproducible.
See https://reproducible-builds.org/ for why this is good
and https://reproducible-builds.org/specs/source-date-epoch/
for the definition of this variable.
This date call is designed to work with both GNU date and BSD date.","@nicowilliams it was sufficient, even though I did not set the SOURCE_HOST variable and was building with different hostnames - that is the part I did not understand, but looking into the build VM's filesystem I see
VERSION_HIDDEN const char *heimdal_long_version = ""@(#)$Version: Heimdal 7.4.0 by abuild on localhost (x86_64-suse-linux-gnu) 2017-08-03T12:00:00Z $"";",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,333,2017-09-13T00:39:16Z,2017-09-25T23:01:20Z,2021-07-30T11:13:14Z,MERGED,True,4,0,1,https://github.com/elric1,Have roken.h #include <util.h> to find emalloc on some platforms.,1,[],https://github.com/heimdal/heimdal/pull/333,https://github.com/elric1,1,https://github.com/heimdal/heimdal/pull/333,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,333,2017-09-13T00:39:16Z,2017-09-25T23:01:20Z,2021-07-30T11:13:14Z,MERGED,True,4,0,1,https://github.com/elric1,Have roken.h #include <util.h> to find emalloc on some platforms.,1,[],https://github.com/heimdal/heimdal/pull/333,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/333#issuecomment-332043145,,Thanks!,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,336,2017-09-26T09:42:31Z,2017-10-05T16:06:08Z,2017-10-05T17:19:45Z,CLOSED,False,4,10,2,https://github.com/bmwiedemann,Drop build date,1,[],https://github.com/heimdal/heimdal/pull/336,https://github.com/bmwiedemann,1,https://github.com/heimdal/heimdal/pull/336,"and build user and build host
in order to make builds reproducible.
See https://reproducible-builds.org/ for why this is good.
Made this as an alternative approach to #332","and build user and build host
in order to make builds reproducible.
See https://reproducible-builds.org/ for why this is good.
Made this as an alternative approach to #332",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,336,2017-09-26T09:42:31Z,2017-10-05T16:06:08Z,2017-10-05T17:19:45Z,CLOSED,False,4,10,2,https://github.com/bmwiedemann,Drop build date,1,[],https://github.com/heimdal/heimdal/pull/336,https://github.com/abartlet,2,https://github.com/heimdal/heimdal/pull/336#issuecomment-332146641,"and build user and build host
in order to make builds reproducible.
See https://reproducible-builds.org/ for why this is good.
Made this as an alternative approach to #332","I strongly support this.  Samba made a very similar change for 4.7.
while back in the 2000s this was a handy thing to embed, the work of
reproducible builds is much more important now.

Andrew Bartlett
-- 
Andrew Bartlett                       http://samba.org/~abartlet/
Authentication Developer, Samba Team  http://samba.org
Samba Developer, Catalyst IT          http://catalyst.net.nz/services/samba",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,336,2017-09-26T09:42:31Z,2017-10-05T16:06:08Z,2017-10-05T17:19:45Z,CLOSED,False,4,10,2,https://github.com/bmwiedemann,Drop build date,1,[],https://github.com/heimdal/heimdal/pull/336,https://github.com/nicowilliams,3,https://github.com/heimdal/heimdal/pull/336#issuecomment-332236581,"and build user and build host
in order to make builds reproducible.
See https://reproducible-builds.org/ for why this is good.
Made this as an alternative approach to #332","@abartlet So do I.  Is there any reason to keep any of HOST, USER, or DATE ever?  I'd rather remove them altogether.  The only things I want are the actual version, maybe the branch, closest tag, HEAD commit, and/or indication of whether the clone built in is dirty.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,336,2017-09-26T09:42:31Z,2017-10-05T16:06:08Z,2017-10-05T17:19:45Z,CLOSED,False,4,10,2,https://github.com/bmwiedemann,Drop build date,1,[],https://github.com/heimdal/heimdal/pull/336,https://github.com/abartlet,4,https://github.com/heimdal/heimdal/pull/336#issuecomment-332364912,"and build user and build host
in order to make builds reproducible.
See https://reproducible-builds.org/ for why this is good.
Made this as an alternative approach to #332","On Tue, 2017-09-26 at 15:29 +0000, Nico Williams wrote:
 @abartlet So do I. Is there any reason to keep any of HOST, USER, or DATE ever?
It used to be handy to track when/how a binary was created, but we
didn't get any complaints (and I waited time and really expected
someone to have a view) when we dropped it form Samba for the same
reasons.
 I'd rather remove them altogether.
I agree.
 The only things I want are the actual version, maybe the branch, closest tag, HEAD commit, and/or indication of whether the clone built in is dirty.
Yes.

Andrew Bartlett
…
-- 
Andrew Bartlett                       http://samba.org/~abartlet/
Authentication Developer, Samba Team  http://samba.org
Samba Developer, Catalyst IT          http://catalyst.net.nz/services/samba",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,336,2017-09-26T09:42:31Z,2017-10-05T16:06:08Z,2017-10-05T17:19:45Z,CLOSED,False,4,10,2,https://github.com/bmwiedemann,Drop build date,1,[],https://github.com/heimdal/heimdal/pull/336,https://github.com/nicowilliams,5,https://github.com/heimdal/heimdal/pull/336#issuecomment-332643249,"and build user and build host
in order to make builds reproducible.
See https://reproducible-builds.org/ for why this is good.
Made this as an alternative approach to #332","I'll push my own version of this.  I'll just use various git things.  I'm testing this:
diff --git a/configure.ac b/configure.ac
index 806b639..4d4237f 100644
--- a/configure.ac
+++ b/configure.ac
@@ -667,7 +667,7 @@ cat > include/newversion.h.in <<EOF
 #ifndef VERSION_HIDDEN
 #define VERSION_HIDDEN
 #endif
-VERSION_HIDDEN const char *heimdal_long_version = ""@([#])\$Version: $PACKAGE_STRING by @USER@ on @HOST@ ($host) @DATE@ \$"";
+VERSION_HIDDEN const char *heimdal_long_version = ""@([#])\$Version: $PACKAGE_STRING @BRANCH@ @TAG@ ($host) @COMMIT@ \$"";
 VERSION_HIDDEN const char *heimdal_version = ""AC_PACKAGE_STRING"";
 EOF

@@ -676,9 +676,19 @@ if test -f include/version.h && cmp -s include/newversion.h.in include/version.h
        rm -f include/newversion.h.in
 else
        echo ""creating include/version.h""
-       User=${USER-${LOGNAME}}
-       Host=`(hostname || uname -n || echo unknown) 2>/dev/null | sed 1q`
-       Date=`date`
+        if test -d ""$srcdir/.git""; then
+            GitCommit=`git rev-parse HEAD`
+            GitBranch=`git rev-parse --abbrev-ref HEAD`
+            if test ""x$GitBranch"" = master; then
+                GitDesc=`git describe --all --dirty`
+            else
+                GitDesc=`git describe --tags --match 'heimdal-*' --dirty`
+            fi
+        else
+            GitCommit='<commit-unknown>'
+            GitBranch='<branch-unknown>'
+            GitDesc='<tag-unknown>'
+        fi
        mv -f include/newversion.h.in include/version.h.in
-       sed -e ""s/@USER@/$User/"" -e ""s/@HOST@/$Host/"" -e ""s/@DATE@/$Date/"" include/version.h.in > include/version.h
+       sed -e ""s;@BRANCH@;$GitBranch;"" -e ""s;@TAG@;$GitDesc;"" -e ""s;@COMMIT@;$GitCommit;"" include/version.h.in > include/version.h
 fi

Similarly for cf/krb-version.m4.  Why do we have that duplication??  We don't use the AC_KRB_VERSION macro...  I'll try removing it.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,336,2017-09-26T09:42:31Z,2017-10-05T16:06:08Z,2017-10-05T17:19:45Z,CLOSED,False,4,10,2,https://github.com/bmwiedemann,Drop build date,1,[],https://github.com/heimdal/heimdal/pull/336,https://github.com/nicowilliams,6,https://github.com/heimdal/heimdal/pull/336#issuecomment-332643550,"and build user and build host
in order to make builds reproducible.
See https://reproducible-builds.org/ for why this is good.
Made this as an alternative approach to #332","One thing that's clear is that we need a heimdal-8.0pre tag so we don't get this:
#ifndef VERSION_HIDDEN
#define VERSION_HIDDEN
#endif
VERSION_HIDDEN const char *heimdal_long_version = ""@(#)$Version: Heimdal 7.99.1 master heimdal-1.5pre2-1992-gaef3843-dirty (x86_64-pc-linux-gnu) aef3843b552c4694cdfe99cca2896579561a1a2c $"";
VERSION_HIDDEN const char *heimdal_version = ""Heimdal 7.99.1"";",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,336,2017-09-26T09:42:31Z,2017-10-05T16:06:08Z,2017-10-05T17:19:45Z,CLOSED,False,4,10,2,https://github.com/bmwiedemann,Drop build date,1,[],https://github.com/heimdal/heimdal/pull/336,https://github.com/nicowilliams,7,https://github.com/heimdal/heimdal/pull/336#issuecomment-332646169,"and build user and build host
in order to make builds reproducible.
See https://reproducible-builds.org/ for why this is good.
Made this as an alternative approach to #332","What do you think of this version of these changes:
https://github.com/heimdal/heimdal/compare/master...nicowilliams:master?expand=1
?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,336,2017-09-26T09:42:31Z,2017-10-05T16:06:08Z,2017-10-05T17:19:45Z,CLOSED,False,4,10,2,https://github.com/bmwiedemann,Drop build date,1,[],https://github.com/heimdal/heimdal/pull/336,https://github.com/jaltman,8,https://github.com/heimdal/heimdal/pull/336#issuecomment-332659319,"and build user and build host
in order to make builds reproducible.
See https://reproducible-builds.org/ for why this is good.
Made this as an alternative approach to #332","We recently uncovered a situation where a modified binary Heimdal distribution which included malware was distributed via sourceforge.  One of the details that made it obvious that the build details (timestamp, host, user, etc) were present in the build.   That evidence was important when it came to convincing sourceforge to take down the binaries.
My preference is for the default build to include these details in the version string and provide an option that can be specified for reproducible builds",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,336,2017-09-26T09:42:31Z,2017-10-05T16:06:08Z,2017-10-05T17:19:45Z,CLOSED,False,4,10,2,https://github.com/bmwiedemann,Drop build date,1,[],https://github.com/heimdal/heimdal/pull/336,https://github.com/kaduk,9,https://github.com/heimdal/heimdal/pull/336#issuecomment-332660234,"and build user and build host
in order to make builds reproducible.
See https://reproducible-builds.org/ for why this is good.
Made this as an alternative approach to #332","IIUC the recommended ""option"" to enable the reproducible build is to detect that the SOURCE_DATE_EPOCH environment variable is set (and use that as the datestamp if needed).",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,336,2017-09-26T09:42:31Z,2017-10-05T16:06:08Z,2017-10-05T17:19:45Z,CLOSED,False,4,10,2,https://github.com/bmwiedemann,Drop build date,1,[],https://github.com/heimdal/heimdal/pull/336,https://github.com/nicowilliams,10,https://github.com/heimdal/heimdal/pull/336#issuecomment-332721432,"and build user and build host
in order to make builds reproducible.
See https://reproducible-builds.org/ for why this is good.
Made this as an alternative approach to #332","I see.  Mind you, the git info my variant of this patch uses... would have revealed the sourceforge copy to be illegitimate too.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,336,2017-09-26T09:42:31Z,2017-10-05T16:06:08Z,2017-10-05T17:19:45Z,CLOSED,False,4,10,2,https://github.com/bmwiedemann,Drop build date,1,[],https://github.com/heimdal/heimdal/pull/336,https://github.com/nicowilliams,11,https://github.com/heimdal/heimdal/pull/336#issuecomment-333191586,"and build user and build host
in order to make builds reproducible.
See https://reproducible-builds.org/ for why this is good.
Made this as an alternative approach to #332","I've pushed another version: nicowilliams@6d27e00
This one uses these env vars: SOURCE_HOST, SOURCE_USER, and SOURCE_DATE_EPOCH.  Only SOURCE_DATE_EPOCH appears to be ""standard"".  I'm still adding git branch/tag/commit hash information when building from a git clone.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,336,2017-09-26T09:42:31Z,2017-10-05T16:06:08Z,2017-10-05T17:19:45Z,CLOSED,False,4,10,2,https://github.com/bmwiedemann,Drop build date,1,[],https://github.com/heimdal/heimdal/pull/336,https://github.com/nicowilliams,12,https://github.com/heimdal/heimdal/pull/336#issuecomment-334513018,"and build user and build host
in order to make builds reproducible.
See https://reproducible-builds.org/ for why this is good.
Made this as an alternative approach to #332",I've pushed an alternative version.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,336,2017-09-26T09:42:31Z,2017-10-05T16:06:08Z,2017-10-05T17:19:45Z,CLOSED,False,4,10,2,https://github.com/bmwiedemann,Drop build date,1,[],https://github.com/heimdal/heimdal/pull/336,https://github.com/nicowilliams,13,https://github.com/heimdal/heimdal/pull/336#issuecomment-334513039,"and build user and build host
in order to make builds reproducible.
See https://reproducible-builds.org/ for why this is good.
Made this as an alternative approach to #332",Thanks!,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,336,2017-09-26T09:42:31Z,2017-10-05T16:06:08Z,2017-10-05T17:19:45Z,CLOSED,False,4,10,2,https://github.com/bmwiedemann,Drop build date,1,[],https://github.com/heimdal/heimdal/pull/336,https://github.com/bmwiedemann,14,https://github.com/heimdal/heimdal/pull/336#issuecomment-334517064,"and build user and build host
in order to make builds reproducible.
See https://reproducible-builds.org/ for why this is good.
Made this as an alternative approach to #332","@nicowilliams you used date -d which only works with GNU date, not BSD date, which is why #332 used a more complex date call ... or is BSD not a supported platform?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,336,2017-09-26T09:42:31Z,2017-10-05T16:06:08Z,2017-10-05T17:19:45Z,CLOSED,False,4,10,2,https://github.com/bmwiedemann,Drop build date,1,[],https://github.com/heimdal/heimdal/pull/336,https://github.com/nicowilliams,15,https://github.com/heimdal/heimdal/pull/336#issuecomment-334528659,"and build user and build host
in order to make builds reproducible.
See https://reproducible-builds.org/ for why this is good.
Made this as an alternative approach to #332","@bmwiedemann Oh, date -u -d ""@$SOURCE_DATE_EPOCH"" 2>/dev/null || date -u -r ""$SOURCE_DATE_EPOCH"" 2>/dev/null || date -u?  Sorry, I just simply missed that.  I'll fix it!",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,336,2017-09-26T09:42:31Z,2017-10-05T16:06:08Z,2017-10-05T17:19:45Z,CLOSED,False,4,10,2,https://github.com/bmwiedemann,Drop build date,1,[],https://github.com/heimdal/heimdal/pull/336,https://github.com/nicowilliams,16,https://github.com/heimdal/heimdal/pull/336#issuecomment-334530460,"and build user and build host
in order to make builds reproducible.
See https://reproducible-builds.org/ for why this is good.
Made this as an alternative approach to #332",Illumos has nothing like -r/-d.  Sigh.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,336,2017-09-26T09:42:31Z,2017-10-05T16:06:08Z,2017-10-05T17:19:45Z,CLOSED,False,4,10,2,https://github.com/bmwiedemann,Drop build date,1,[],https://github.com/heimdal/heimdal/pull/336,https://github.com/nicowilliams,17,https://github.com/heimdal/heimdal/pull/336#issuecomment-334533079,"and build user and build host
in order to make builds reproducible.
See https://reproducible-builds.org/ for why this is good.
Made this as an alternative approach to #332",I've pushed a fix.  Thanks for noticing this!,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,339,2017-10-06T09:11:01Z,2017-10-11T03:23:00Z,2017-10-11T03:23:00Z,MERGED,True,1,1,1,https://github.com/rhopfer,kadmin/cpw: Add error code on password missmatch,1,[],https://github.com/heimdal/heimdal/pull/339,https://github.com/rhopfer,1,https://github.com/heimdal/heimdal/pull/339,Fix #338,Fix #338,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,339,2017-10-06T09:11:01Z,2017-10-11T03:23:00Z,2017-10-11T03:23:00Z,MERGED,True,1,1,1,https://github.com/rhopfer,kadmin/cpw: Add error code on password missmatch,1,[],https://github.com/heimdal/heimdal/pull/339,https://github.com/vdukhovni,2,https://github.com/heimdal/heimdal/pull/339#issuecomment-335670828,Fix #338,LGTM,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,340,2017-10-10T18:13:23Z,2017-10-10T21:00:49Z,2017-10-10T21:00:49Z,MERGED,True,154,55,9,https://github.com/nicowilliams,Do not fsync() every record when loading HDB from a dump (kadmin and iprop),4,['bug'],https://github.com/heimdal/heimdal/pull/340,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/340,"This PR makes kadmin load and ipropd-slave's receive_everything() much faster by not doing any fsync()s or fdatasync()s or similar (e.g., O_SYNC, sync(2), ...).
This should prevent a situation in iprop where a slave receiving a full dump can cause all slaves to persistently need to receive full dumps.  This is not a complete fix for that problem, however.  A more complete fix will follow.","This PR makes kadmin load and ipropd-slave's receive_everything() much faster by not doing any fsync()s or fdatasync()s or similar (e.g., O_SYNC, sync(2), ...).
This should prevent a situation in iprop where a slave receiving a full dump can cause all slaves to persistently need to receive full dumps.  This is not a complete fix for that problem, however.  A more complete fix will follow.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,342,2017-10-11T03:41:22Z,2017-10-11T22:13:08Z,2017-10-11T22:13:08Z,MERGED,True,132,60,2,https://github.com/vdukhovni,Handle long lines in dump files,1,[],https://github.com/heimdal/heimdal/pull/342,https://github.com/vdukhovni,1,https://github.com/heimdal/heimdal/pull/342,"When a dump entry has lots of keys or long extensions, the 8192 byte read buffer in load may be insufficient.","When a dump entry has lots of keys or long extensions, the 8192 byte read buffer in load may be insufficient.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,343,2017-10-11T20:16:27Z,2018-12-24T06:55:37Z,2018-12-24T08:58:26Z,CLOSED,False,584,2803,41,https://github.com/nicowilliams,Do not call getpwuid() if possible; use getpwuid_r() instead,14,['bug'],https://github.com/heimdal/heimdal/pull/343,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/343,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,343,2017-10-11T20:16:27Z,2018-12-24T06:55:37Z,2018-12-24T08:58:26Z,CLOSED,False,584,2803,41,https://github.com/nicowilliams,Do not call getpwuid() if possible; use getpwuid_r() instead,14,['bug'],https://github.com/heimdal/heimdal/pull/343,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/343#issuecomment-449692310,,"Sorry @nicowilliams I trampled all over you with commit 862133e and dd7eb8f. I can back these out if you want, are you planning to address this PR?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,343,2017-10-11T20:16:27Z,2018-12-24T06:55:37Z,2018-12-24T08:58:26Z,CLOSED,False,584,2803,41,https://github.com/nicowilliams,Do not call getpwuid() if possible; use getpwuid_r() instead,14,['bug'],https://github.com/heimdal/heimdal/pull/343,https://github.com/nicowilliams,3,https://github.com/heimdal/heimdal/pull/343#issuecomment-449694245,,"No worries.  I'll resubmit, maybe.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,343,2017-10-11T20:16:27Z,2018-12-24T06:55:37Z,2018-12-24T08:58:26Z,CLOSED,False,584,2803,41,https://github.com/nicowilliams,Do not call getpwuid() if possible; use getpwuid_r() instead,14,['bug'],https://github.com/heimdal/heimdal/pull/343,https://github.com/lhoward,4,https://github.com/heimdal/heimdal/pull/343#issuecomment-449705398,,"You checked for getpwuid_r() better than I did (I just assumed if you have one, you have the other). So I might try at least bring that in.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,344,2017-10-17T07:24:43Z,2017-10-30T22:39:24Z,2017-10-30T22:39:24Z,MERGED,True,38,43,1,https://github.com/vdukhovni,Further improve kdc child process management,1,[],https://github.com/heimdal/heimdal/pull/344,https://github.com/vdukhovni,1,https://github.com/heimdal/heimdal/pull/344,"Simplify child process creation rate limit by moving
select_sleep() to happen right after the parent fork().


Consider child pid table slots to be empty if the pid is
non-positive, rather than just -1 or just 0.


Log warnings should we ever spawn a child with no free
slot to track it, or reap a child that does not match
a tracked slot.","Simplify child process creation rate limit by moving
select_sleep() to happen right after the parent fork().


Consider child pid table slots to be empty if the pid is
non-positive, rather than just -1 or just 0.


Log warnings should we ever spawn a child with no free
slot to track it, or reap a child that does not match
a tracked slot.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,347,2017-10-19T01:45:39Z,2019-11-26T20:30:10Z,2019-11-26T20:30:27Z,CLOSED,False,952,260,9,https://github.com/nicowilliams,Async iprop fixes,6,[],https://github.com/heimdal/heimdal/pull/347,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/347,"This is still WIP in that tests/kdc/check-iprop needs to test more things.  Also, I need to test graceful rolling upgrade semantics, though that I won't script.
TODO:

on non-reinit truncation, make sure we always keep at least one non-uber record
add version number wraparound protection -- probably just reinit when the latest record's version gets too close to wrapping
test more cases in check-iprop
test two slaves in check-iprop and check that send_complete()s interleave -- this is going to be very difficult to check for considering how small the HDB is in check-iprop, so maybe this will be better done by hand
finish the non-blocking I/O work in ipropd-master to make sure that no slave can cause the master to block without servicing the others.","This is still WIP in that tests/kdc/check-iprop needs to test more things.  Also, I need to test graceful rolling upgrade semantics, though that I won't script.
TODO:

on non-reinit truncation, make sure we always keep at least one non-uber record
add version number wraparound protection -- probably just reinit when the latest record's version gets too close to wrapping
test more cases in check-iprop
test two slaves in check-iprop and check that send_complete()s interleave -- this is going to be very difficult to check for considering how small the HDB is in check-iprop, so maybe this will be better done by hand
finish the non-blocking I/O work in ipropd-master to make sure that no slave can cause the master to block without servicing the others.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,347,2017-10-19T01:45:39Z,2019-11-26T20:30:10Z,2019-11-26T20:30:27Z,CLOSED,False,952,260,9,https://github.com/nicowilliams,Async iprop fixes,6,[],https://github.com/heimdal/heimdal/pull/347,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/347#issuecomment-337775836,"This is still WIP in that tests/kdc/check-iprop needs to test more things.  Also, I need to test graceful rolling upgrade semantics, though that I won't script.
TODO:

on non-reinit truncation, make sure we always keep at least one non-uber record
add version number wraparound protection -- probably just reinit when the latest record's version gets too close to wrapping
test more cases in check-iprop
test two slaves in check-iprop and check that send_complete()s interleave -- this is going to be very difficult to check for considering how small the HDB is in check-iprop, so maybe this will be better done by hand
finish the non-blocking I/O work in ipropd-master to make sure that no slave can cause the master to block without servicing the others.","@vdukhovni This isn't ready for code review, but if you want to take a look at least at the commit commentary and the PR commentary, that would be great.  The changes to lib/kadm5/log.c are pretty straightforward.  The meat of this is all in the master and slave code.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,347,2017-10-19T01:45:39Z,2019-11-26T20:30:10Z,2019-11-26T20:30:27Z,CLOSED,False,952,260,9,https://github.com/nicowilliams,Async iprop fixes,6,[],https://github.com/heimdal/heimdal/pull/347,https://github.com/nicowilliams,3,https://github.com/heimdal/heimdal/pull/347#issuecomment-337956802,"This is still WIP in that tests/kdc/check-iprop needs to test more things.  Also, I need to test graceful rolling upgrade semantics, though that I won't script.
TODO:

on non-reinit truncation, make sure we always keep at least one non-uber record
add version number wraparound protection -- probably just reinit when the latest record's version gets too close to wrapping
test more cases in check-iprop
test two slaves in check-iprop and check that send_complete()s interleave -- this is going to be very difficult to check for considering how small the HDB is in check-iprop, so maybe this will be better done by hand
finish the non-blocking I/O work in ipropd-master to make sure that no slave can cause the master to block without servicing the others.","It would help (and would have helped) a lot to create a data structure for representing versions as {vno, timestamp} rather than carrying around both items, and then defining a sort equality predicate for the two items.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,347,2017-10-19T01:45:39Z,2019-11-26T20:30:10Z,2019-11-26T20:30:27Z,CLOSED,False,952,260,9,https://github.com/nicowilliams,Async iprop fixes,6,[],https://github.com/heimdal/heimdal/pull/347,https://github.com/nicowilliams,4,https://github.com/heimdal/heimdal/pull/347#issuecomment-337957462,"This is still WIP in that tests/kdc/check-iprop needs to test more things.  Also, I need to test graceful rolling upgrade semantics, though that I won't script.
TODO:

on non-reinit truncation, make sure we always keep at least one non-uber record
add version number wraparound protection -- probably just reinit when the latest record's version gets too close to wrapping
test more cases in check-iprop
test two slaves in check-iprop and check that send_complete()s interleave -- this is going to be very difficult to check for considering how small the HDB is in check-iprop, so maybe this will be better done by hand
finish the non-blocking I/O work in ipropd-master to make sure that no slave can cause the master to block without servicing the others.","For version number wraparound protection... provided we skip version zero (which is always the uber record), maybe the only special thing to do is to make send_diffs() able to notice that version, say, 2^32 - 10 from a slave is ""smaller"" than version 3 on the master.
EDIT: I think we want a couple of predicates:

version_in_range(first_version, last_version, given_version)
version_eq(first_version, last_version, vno1, tstamp1, vno2, tstamp2)

and then send_diffs() would use those two instead of the expressions it uses now.  Those predicates could be macros with multiple evaluation hazards.
EDIT: We'd have to assume or ensure that zero is never crossed more than once in the iprop log...",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,347,2017-10-19T01:45:39Z,2019-11-26T20:30:10Z,2019-11-26T20:30:27Z,CLOSED,False,952,260,9,https://github.com/nicowilliams,Async iprop fixes,6,[],https://github.com/heimdal/heimdal/pull/347,https://github.com/nicowilliams,5,https://github.com/heimdal/heimdal/pull/347#issuecomment-449877254,"This is still WIP in that tests/kdc/check-iprop needs to test more things.  Also, I need to test graceful rolling upgrade semantics, though that I won't script.
TODO:

on non-reinit truncation, make sure we always keep at least one non-uber record
add version number wraparound protection -- probably just reinit when the latest record's version gets too close to wrapping
test more cases in check-iprop
test two slaves in check-iprop and check that send_complete()s interleave -- this is going to be very difficult to check for considering how small the HDB is in check-iprop, so maybe this will be better done by hand
finish the non-blocking I/O work in ipropd-master to make sure that no slave can cause the master to block without servicing the others.","The thought occurs that iprop-{slave, master} are perfect candidates for writing in a language that makes async easy/trivial.  Haskell, node, whatever.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,347,2017-10-19T01:45:39Z,2019-11-26T20:30:10Z,2019-11-26T20:30:27Z,CLOSED,False,952,260,9,https://github.com/nicowilliams,Async iprop fixes,6,[],https://github.com/heimdal/heimdal/pull/347,https://github.com/jaltman,6,https://github.com/heimdal/heimdal/pull/347#issuecomment-449881918,"This is still WIP in that tests/kdc/check-iprop needs to test more things.  Also, I need to test graceful rolling upgrade semantics, though that I won't script.
TODO:

on non-reinit truncation, make sure we always keep at least one non-uber record
add version number wraparound protection -- probably just reinit when the latest record's version gets too close to wrapping
test more cases in check-iprop
test two slaves in check-iprop and check that send_complete()s interleave -- this is going to be very difficult to check for considering how small the HDB is in check-iprop, so maybe this will be better done by hand
finish the non-blocking I/O work in ipropd-master to make sure that no slave can cause the master to block without servicing the others.",Now that Linux has a native AF_RXRPC socket classI wonder if it's worth implementing a ubik replicated database.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,347,2017-10-19T01:45:39Z,2019-11-26T20:30:10Z,2019-11-26T20:30:27Z,CLOSED,False,952,260,9,https://github.com/nicowilliams,Async iprop fixes,6,[],https://github.com/heimdal/heimdal/pull/347,https://github.com/nicowilliams,7,https://github.com/heimdal/heimdal/pull/347#issuecomment-449885343,"This is still WIP in that tests/kdc/check-iprop needs to test more things.  Also, I need to test graceful rolling upgrade semantics, though that I won't script.
TODO:

on non-reinit truncation, make sure we always keep at least one non-uber record
add version number wraparound protection -- probably just reinit when the latest record's version gets too close to wrapping
test more cases in check-iprop
test two slaves in check-iprop and check that send_complete()s interleave -- this is going to be very difficult to check for considering how small the HDB is in check-iprop, so maybe this will be better done by hand
finish the non-blocking I/O work in ipropd-master to make sure that no slave can cause the master to block without servicing the others.",The Ubik thing would be fine.  I'll still plow on (slowly) with a PostgreSQL backend though.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,347,2017-10-19T01:45:39Z,2019-11-26T20:30:10Z,2019-11-26T20:30:27Z,CLOSED,False,952,260,9,https://github.com/nicowilliams,Async iprop fixes,6,[],https://github.com/heimdal/heimdal/pull/347,https://github.com/nicowilliams,8,https://github.com/heimdal/heimdal/pull/347#issuecomment-449885389,"This is still WIP in that tests/kdc/check-iprop needs to test more things.  Also, I need to test graceful rolling upgrade semantics, though that I won't script.
TODO:

on non-reinit truncation, make sure we always keep at least one non-uber record
add version number wraparound protection -- probably just reinit when the latest record's version gets too close to wrapping
test more cases in check-iprop
test two slaves in check-iprop and check that send_complete()s interleave -- this is going to be very difficult to check for considering how small the HDB is in check-iprop, so maybe this will be better done by hand
finish the non-blocking I/O work in ipropd-master to make sure that no slave can cause the master to block without servicing the others.","What I'd really like though is to not have an iprop protocol anymore, and ubik and PG both would give us that.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,347,2017-10-19T01:45:39Z,2019-11-26T20:30:10Z,2019-11-26T20:30:27Z,CLOSED,False,952,260,9,https://github.com/nicowilliams,Async iprop fixes,6,[],https://github.com/heimdal/heimdal/pull/347,https://github.com/lhoward,9,https://github.com/heimdal/heimdal/pull/347#issuecomment-449893207,"This is still WIP in that tests/kdc/check-iprop needs to test more things.  Also, I need to test graceful rolling upgrade semantics, though that I won't script.
TODO:

on non-reinit truncation, make sure we always keep at least one non-uber record
add version number wraparound protection -- probably just reinit when the latest record's version gets too close to wrapping
test more cases in check-iprop
test two slaves in check-iprop and check that send_complete()s interleave -- this is going to be very difficult to check for considering how small the HDB is in check-iprop, so maybe this will be better done by hand
finish the non-blocking I/O work in ipropd-master to make sure that no slave can cause the master to block without servicing the others.","The code LGTM but I don't know enough about iprop to know why it's failing the tests, @jaltman do you want me to investigate this further or is it better to let @nicowilliams do it?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,347,2017-10-19T01:45:39Z,2019-11-26T20:30:10Z,2019-11-26T20:30:27Z,CLOSED,False,952,260,9,https://github.com/nicowilliams,Async iprop fixes,6,[],https://github.com/heimdal/heimdal/pull/347,https://github.com/jaltman,10,https://github.com/heimdal/heimdal/pull/347#issuecomment-449909974,"This is still WIP in that tests/kdc/check-iprop needs to test more things.  Also, I need to test graceful rolling upgrade semantics, though that I won't script.
TODO:

on non-reinit truncation, make sure we always keep at least one non-uber record
add version number wraparound protection -- probably just reinit when the latest record's version gets too close to wrapping
test more cases in check-iprop
test two slaves in check-iprop and check that send_complete()s interleave -- this is going to be very difficult to check for considering how small the HDB is in check-iprop, so maybe this will be better done by hand
finish the non-blocking I/O work in ipropd-master to make sure that no slave can cause the master to block without servicing the others.",@nicowilliams will you have time to determine why the check-iprop test is failing with this pull request?,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,347,2017-10-19T01:45:39Z,2019-11-26T20:30:10Z,2019-11-26T20:30:27Z,CLOSED,False,952,260,9,https://github.com/nicowilliams,Async iprop fixes,6,[],https://github.com/heimdal/heimdal/pull/347,https://github.com/nicowilliams,11,https://github.com/heimdal/heimdal/pull/347#issuecomment-449910513,"This is still WIP in that tests/kdc/check-iprop needs to test more things.  Also, I need to test graceful rolling upgrade semantics, though that I won't script.
TODO:

on non-reinit truncation, make sure we always keep at least one non-uber record
add version number wraparound protection -- probably just reinit when the latest record's version gets too close to wrapping
test more cases in check-iprop
test two slaves in check-iprop and check that send_complete()s interleave -- this is going to be very difficult to check for considering how small the HDB is in check-iprop, so maybe this will be better done by hand
finish the non-blocking I/O work in ipropd-master to make sure that no slave can cause the master to block without servicing the others.",@jaltman maybe later this week.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,347,2017-10-19T01:45:39Z,2019-11-26T20:30:10Z,2019-11-26T20:30:27Z,CLOSED,False,952,260,9,https://github.com/nicowilliams,Async iprop fixes,6,[],https://github.com/heimdal/heimdal/pull/347,https://github.com/lhoward,12,https://github.com/heimdal/heimdal/pull/347#issuecomment-450473130,"This is still WIP in that tests/kdc/check-iprop needs to test more things.  Also, I need to test graceful rolling upgrade semantics, though that I won't script.
TODO:

on non-reinit truncation, make sure we always keep at least one non-uber record
add version number wraparound protection -- probably just reinit when the latest record's version gets too close to wrapping
test more cases in check-iprop
test two slaves in check-iprop and check that send_complete()s interleave -- this is going to be very difficult to check for considering how small the HDB is in check-iprop, so maybe this will be better done by hand
finish the non-blocking I/O work in ipropd-master to make sure that no slave can cause the master to block without servicing the others.","rebased against master, check-iprop failing with
2018-12-29T18:36:08 wrote new dumpfile (version 34)
2018-12-29T18:36:08 send_diffs: failed to find previous entry: Incremental propagation log got corrupted
2018-12-29T18:36:08 message from master
2018-12-29T18:36:08 master sent us a full dump
2018-12-29T18:36:08 master sent us a full dump version 34
2018-12-29T18:36:08 Waiting 30 seconds to restart
2018-12-29T18:36:08 master sent us a full dump version 34, time 1546068967
2018-12-29T18:36:08 master says it's at 34, 1546068967
2018-12-29T18:36:08 receive complete database (34, 1546068967)
2018-12-29T18:36:08 error message: failed to open ../../tests/kdc/mkey.file: No such file or directory: 2
2018-12-29T18:36:08 krb5_read_priv_message: End of file
2018-12-29T18:36:08 db->close: End of file
2018-12-29T18:36:08 Waiting 2 minutes to restart",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,347,2017-10-19T01:45:39Z,2019-11-26T20:30:10Z,2019-11-26T20:30:27Z,CLOSED,False,952,260,9,https://github.com/nicowilliams,Async iprop fixes,6,[],https://github.com/heimdal/heimdal/pull/347,https://github.com/nicowilliams,13,https://github.com/heimdal/heimdal/pull/347#issuecomment-466124010,"This is still WIP in that tests/kdc/check-iprop needs to test more things.  Also, I need to test graceful rolling upgrade semantics, though that I won't script.
TODO:

on non-reinit truncation, make sure we always keep at least one non-uber record
add version number wraparound protection -- probably just reinit when the latest record's version gets too close to wrapping
test more cases in check-iprop
test two slaves in check-iprop and check that send_complete()s interleave -- this is going to be very difficult to check for considering how small the HDB is in check-iprop, so maybe this will be better done by hand
finish the non-blocking I/O work in ipropd-master to make sure that no slave can cause the master to block without servicing the others.",In order to get this into 8.0 I should split this up so that only the async I/O changes in ipropd-master are in this PR.  The rest is mostly about iprop log version number wraparound protection and year 2038 problem remediation.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,347,2017-10-19T01:45:39Z,2019-11-26T20:30:10Z,2019-11-26T20:30:27Z,CLOSED,False,952,260,9,https://github.com/nicowilliams,Async iprop fixes,6,[],https://github.com/heimdal/heimdal/pull/347,https://github.com/nicowilliams,14,https://github.com/heimdal/heimdal/pull/347#issuecomment-558804708,"This is still WIP in that tests/kdc/check-iprop needs to test more things.  Also, I need to test graceful rolling upgrade semantics, though that I won't script.
TODO:

on non-reinit truncation, make sure we always keep at least one non-uber record
add version number wraparound protection -- probably just reinit when the latest record's version gets too close to wrapping
test more cases in check-iprop
test two slaves in check-iprop and check that send_complete()s interleave -- this is going to be very difficult to check for considering how small the HDB is in check-iprop, so maybe this will be better done by hand
finish the non-blocking I/O work in ipropd-master to make sure that no slave can cause the master to block without servicing the others.","This has been superseded by new, recent work that finally made ipropd-master async and able to interleave large full/incremental props to its clients so that no one slave can cause others to miss incrementals that then cause them to do full props.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,348,2017-10-19T19:55:22Z,2017-10-19T23:49:23Z,2017-10-19T23:49:23Z,MERGED,True,1,1,1,https://github.com/dariaphoebe,hdb-mitdb: correct missing equals in initialization,1,[],https://github.com/heimdal/heimdal/pull/348,https://github.com/dariaphoebe,1,https://github.com/heimdal/heimdal/pull/348,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,349,2017-10-22T10:05:46Z,2017-11-04T20:56:44Z,2017-11-04T20:56:44Z,MERGED,True,1,1,1,https://github.com/abhinav-upadhyay,Add comma between Nm entries,1,[],https://github.com/heimdal/heimdal/pull/349,https://github.com/abhinav-upadhyay,1,https://github.com/heimdal/heimdal/pull/349,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,350,2017-10-24T17:12:15Z,2017-10-25T18:39:52Z,2017-10-25T18:39:57Z,CLOSED,False,46,5,6,https://github.com/dariaphoebe,Ios build fixes,3,[],https://github.com/heimdal/heimdal/pull/350,https://github.com/dariaphoebe,1,https://github.com/heimdal/heimdal/pull/350,"with this i can compile the tree to completion with iOS phone and simulator SDKs. the framework changes instead of APPLE are hopefully noncontroversial; the curses stub is at least a useful way to provide a curses-less libedit for when its result is not important e.g. you want to build a cross-compiled tree for use in an embedded situation.
assuming this or something close is taken, i can then provide tooling that would allow an iOS build to be integrated into a continuous integration builder","with this i can compile the tree to completion with iOS phone and simulator SDKs. the framework changes instead of APPLE are hopefully noncontroversial; the curses stub is at least a useful way to provide a curses-less libedit for when its result is not important e.g. you want to build a cross-compiled tree for use in an embedded situation.
assuming this or something close is taken, i can then provide tooling that would allow an iOS build to be integrated into a continuous integration builder",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,351,2017-10-25T18:39:42Z,2017-10-30T22:41:23Z,2017-10-30T22:41:23Z,MERGED,True,46,5,6,https://github.com/dariaphoebe,Ios build fixes2,3,[],https://github.com/heimdal/heimdal/pull/351,https://github.com/dariaphoebe,1,https://github.com/heimdal/heimdal/pull/351,"with this i can compile the tree to completion with iOS phone and simulator SDKs. the framework changes instead of APPLE are hopefully noncontroversial; the curses stub is at least a useful way to provide a curses-less libedit for when its result is not important e.g. you want to build a cross-compiled tree for use in an embedded situation.
assuming this or something close is taken, i can then provide tooling that would allow an iOS build to be integrated into a continuous integration builder","with this i can compile the tree to completion with iOS phone and simulator SDKs. the framework changes instead of APPLE are hopefully noncontroversial; the curses stub is at least a useful way to provide a curses-less libedit for when its result is not important e.g. you want to build a cross-compiled tree for use in an embedded situation.
assuming this or something close is taken, i can then provide tooling that would allow an iOS build to be integrated into a continuous integration builder",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,354,2017-12-07T19:26:32Z,2018-12-14T23:15:43Z,2018-12-14T23:15:43Z,CLOSED,False,7,6,5,https://github.com/cryptomilk,Fix size types in Heimdal,5,[],https://github.com/heimdal/heimdal/pull/354,https://github.com/cryptomilk,1,https://github.com/heimdal/heimdal/pull/354,"Hi,
this patchset fixes several size types found by -Wstrict-overflow=2.
Andreas","Hi,
this patchset fixes several size types found by -Wstrict-overflow=2.
Andreas",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,354,2017-12-07T19:26:32Z,2018-12-14T23:15:43Z,2018-12-14T23:15:43Z,CLOSED,False,7,6,5,https://github.com/cryptomilk,Fix size types in Heimdal,5,[],https://github.com/heimdal/heimdal/pull/354,https://github.com/quanah,2,https://github.com/heimdal/heimdal/pull/354#issuecomment-350070072,"Hi,
this patchset fixes several size types found by -Wstrict-overflow=2.
Andreas",I wonder if this will fix Solaris so it works.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,354,2017-12-07T19:26:32Z,2018-12-14T23:15:43Z,2018-12-14T23:15:43Z,CLOSED,False,7,6,5,https://github.com/cryptomilk,Fix size types in Heimdal,5,[],https://github.com/heimdal/heimdal/pull/354,https://github.com/quanah,3,https://github.com/heimdal/heimdal/pull/354#issuecomment-350746977,"Hi,
this patchset fixes several size types found by -Wstrict-overflow=2.
Andreas","Unfortunately, doesn't resolve the issues with Solaris.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,354,2017-12-07T19:26:32Z,2018-12-14T23:15:43Z,2018-12-14T23:15:43Z,CLOSED,False,7,6,5,https://github.com/cryptomilk,Fix size types in Heimdal,5,[],https://github.com/heimdal/heimdal/pull/354,https://github.com/jaltman,4,https://github.com/heimdal/heimdal/pull/354#issuecomment-350749575,"Hi,
this patchset fixes several size types found by -Wstrict-overflow=2.
Andreas","While this pull request might suppress theoretical overflows, I don't believe any of the locations are actually at risk of overflow given the usage.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,354,2017-12-07T19:26:32Z,2018-12-14T23:15:43Z,2018-12-14T23:15:43Z,CLOSED,False,7,6,5,https://github.com/cryptomilk,Fix size types in Heimdal,5,[],https://github.com/heimdal/heimdal/pull/354,https://github.com/abartlet,5,https://github.com/heimdal/heimdal/pull/354#issuecomment-398627287,"Hi,
this patchset fixes several size types found by -Wstrict-overflow=2.
Andreas","To be clear, these patches are important to Samba not because of a confirmed overflow, but because it allows Samba (which hopes to rebase on a current git snapshot eventually) to build with this warning locked on with -Werror.  We do this to detect other possibly more serious issues.
I plan to review and merge these shortly.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,354,2017-12-07T19:26:32Z,2018-12-14T23:15:43Z,2018-12-14T23:15:43Z,CLOSED,False,7,6,5,https://github.com/cryptomilk,Fix size types in Heimdal,5,[],https://github.com/heimdal/heimdal/pull/354,https://github.com/jaltman,6,https://github.com/heimdal/heimdal/pull/354#issuecomment-398631955,"Hi,
this patchset fixes several size types found by -Wstrict-overflow=2.
Andreas","The reason that I have not reviewed these changes is because I can't tell from the commit messages what is supposed to be fixed.  I would like the commit messages to include the explicit warning messages that are being fixed by the proposed changes.
As an example, the lib/asn1/gen.c define_asn1() and space() change of the size of level makes no sense to me.  All of the integer values that are passed to define_asn1() as level are small integers.    I can't see how size_t vs int should make any difference.
If the problem is that there is compiler being stupid, then I would also like the compiler version information included in the commit message.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,354,2017-12-07T19:26:32Z,2018-12-14T23:15:43Z,2018-12-14T23:15:43Z,CLOSED,False,7,6,5,https://github.com/cryptomilk,Fix size types in Heimdal,5,[],https://github.com/heimdal/heimdal/pull/354,https://github.com/abartlet,7,https://github.com/heimdal/heimdal/pull/354#issuecomment-398635117,"Hi,
this patchset fixes several size types found by -Wstrict-overflow=2.
Andreas","Thanks for the more detailed feedback, that is a reasonable request and gives Andreas something to work with.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,354,2017-12-07T19:26:32Z,2018-12-14T23:15:43Z,2018-12-14T23:15:43Z,CLOSED,False,7,6,5,https://github.com/cryptomilk,Fix size types in Heimdal,5,[],https://github.com/heimdal/heimdal/pull/354,https://github.com/cryptomilk,8,https://github.com/heimdal/heimdal/pull/354#issuecomment-426622603,"Hi,
this patchset fixes several size types found by -Wstrict-overflow=2.
Andreas","As an example, the lib/asn1/gen.c define_asn1() and space() change of the size of level makes no sense to me.


Signed overflows are undefined in C: https://port70.net/~nsz/c/c11/n1570.html#3.4.3p3
Unsigned integers never overflow: https://port70.net/~nsz/c/c11/n1570.html#6.2.5p9
As signed overflows are undefined, the compilers is free to assume that they don't occur and the code is thrown away by the optimizer. It assume the overflow never occurred.

The solution is to use unsigned arithmetic, which never overflows (in the C Standard sense of the word).
Here is an example which is the same as the space() function in lib/asn1/gen.c. I just call it dot to print a . to stdout.
$ cat integer_overflow.c 
#include <stdio.h>
#include <limits.h>

static void dot(int level)
{
    while(level-- > 0) {
        printf(""."");
    }
}

int main(void)
{
    dot(1 - INT_MAX);
    printf(""WHAT A WURST!\n"");

    return 0;
}
$ gcc -O2 integer_overflow.c 
$ ./a.out 
WHAT A WURST!

As you can see, the optimizer has thrown away the while-loop. Newer gcc versions don't produce the warning anymore. I've opened a bug for that. The above example demonstrates the problem gcc warned about. That's the reason why I fixed the size types here.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,354,2017-12-07T19:26:32Z,2018-12-14T23:15:43Z,2018-12-14T23:15:43Z,CLOSED,False,7,6,5,https://github.com/cryptomilk,Fix size types in Heimdal,5,[],https://github.com/heimdal/heimdal/pull/354,https://github.com/jaltman,9,https://github.com/heimdal/heimdal/pull/354#issuecomment-426648312,"Hi,
this patchset fixes several size types found by -Wstrict-overflow=2.
Andreas",@cryptomilk Thank you for taking the time to post your example but dot() is called with a negative value.   The conditional in the first iteration of the while loop will be ((1 - INT_MAX) > 0) which evaluates to FALSE.  Therefore the loop never executes.   I'm sorry but the example doesn't demonstrate what you are attempting to show.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,354,2017-12-07T19:26:32Z,2018-12-14T23:15:43Z,2018-12-14T23:15:43Z,CLOSED,False,7,6,5,https://github.com/cryptomilk,Fix size types in Heimdal,5,[],https://github.com/heimdal/heimdal/pull/354,https://github.com/cryptomilk,10,https://github.com/heimdal/heimdal/pull/354#issuecomment-426659822,"Hi,
this patchset fixes several size types found by -Wstrict-overflow=2.
Andreas","The better example is:
#include <stdio.h>
#include <limits.h>

int main(void)
{
    int i = 1;
    int j = INT_MAX;

    if (i + j < i) {
        printf(""OVERFLOW!\n"");
        return 1;
    }
    i += j;

    printf(""WHAT A WURST! i = %d\n"", i);

    return 0;
}",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,354,2017-12-07T19:26:32Z,2018-12-14T23:15:43Z,2018-12-14T23:15:43Z,CLOSED,False,7,6,5,https://github.com/cryptomilk,Fix size types in Heimdal,5,[],https://github.com/heimdal/heimdal/pull/354,https://github.com/jaltman,11,https://github.com/heimdal/heimdal/pull/354#issuecomment-426672468,"Hi,
this patchset fixes several size types found by -Wstrict-overflow=2.
Andreas",In the latest example the compiler knows at compile time that an overflow has occurred and so is free to do what it wants.   That is not true for parameters passed to functions whose values are determined at runtime from external inputs.   Any compiler that refuses to generate code because some input might be bad is broken.   The compiler is free to implement a behavior of its choice in the undefined case; its not permitted to refuse to process values that are within the defined range.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,354,2017-12-07T19:26:32Z,2018-12-14T23:15:43Z,2018-12-14T23:15:43Z,CLOSED,False,7,6,5,https://github.com/cryptomilk,Fix size types in Heimdal,5,[],https://github.com/heimdal/heimdal/pull/354,https://github.com/cryptomilk,12,https://github.com/heimdal/heimdal/pull/354#issuecomment-426674899,"Hi,
this patchset fixes several size types found by -Wstrict-overflow=2.
Andreas",Then just close this PR. I can't reproduce it as I don't get those warnings anymore ...,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,357,2017-12-13T22:45:57Z,2017-12-13T23:33:29Z,2017-12-13T23:43:28Z,MERGED,True,31,30,1,https://github.com/vdukhovni,Make slave-stats updates atomic,1,[],https://github.com/heimdal/heimdal/pull/357,https://github.com/vdukhovni,1,https://github.com/heimdal/heimdal/pull/357,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,357,2017-12-13T22:45:57Z,2017-12-13T23:33:29Z,2017-12-13T23:43:28Z,MERGED,True,31,30,1,https://github.com/vdukhovni,Make slave-stats updates atomic,1,[],https://github.com/heimdal/heimdal/pull/357,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/357#issuecomment-351554670,,Approved.  Will rebase and merge when Travis completes.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,357,2017-12-13T22:45:57Z,2017-12-13T23:33:29Z,2017-12-13T23:43:28Z,MERGED,True,31,30,1,https://github.com/vdukhovni,Make slave-stats updates atomic,1,[],https://github.com/heimdal/heimdal/pull/357,https://github.com/nicowilliams,3,https://github.com/heimdal/heimdal/pull/357#issuecomment-351559618,,"(The Travis OS X build is not done, but that's fine, this is obvious.)
EDIT: Closing this deleted the branch the OS X build was going to fetch and build...",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,362,2018-02-27T20:36:29Z,2018-03-07T17:18:03Z,2018-03-14T18:19:11Z,CLOSED,False,2,2,1,https://github.com/quanah,Fix https://github.com/heimdal/heimdal/issues/361,1,[],https://github.com/heimdal/heimdal/pull/362,https://github.com/quanah,1,https://github.com/heimdal/heimdal/pull/362,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,362,2018-02-27T20:36:29Z,2018-03-07T17:18:03Z,2018-03-14T18:19:11Z,CLOSED,False,2,2,1,https://github.com/quanah,Fix https://github.com/heimdal/heimdal/issues/361,1,[],https://github.com/heimdal/heimdal/pull/362,https://github.com/selsky,2,https://github.com/heimdal/heimdal/pull/362#issuecomment-369103109,,"https://github.com/selsky/heimdal/tree/issue-361 has the same fix and also updates the i18n files. I'd be happy to rebase that on this, if you'd prefer.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,362,2018-02-27T20:36:29Z,2018-03-07T17:18:03Z,2018-03-14T18:19:11Z,CLOSED,False,2,2,1,https://github.com/quanah,Fix https://github.com/heimdal/heimdal/issues/361,1,[],https://github.com/heimdal/heimdal/pull/362,https://github.com/quanah,3,https://github.com/heimdal/heimdal/pull/362#issuecomment-371212850,,"@selsky I'm fine with your fix.  I just wasn't sure if you were filing the report and not submitting a pull request, since I didn't see one submitted.. ;)  I'll close this one out, if you could open a new pull request based off your fix.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,363,2018-03-03T15:27:30Z,2018-12-14T11:39:00Z,2018-12-14T11:39:00Z,MERGED,True,28,7,1,https://github.com/rodwiddowson,Windows: Avoid using deprecated function.,1,[],https://github.com/heimdal/heimdal/pull/363,https://github.com/rodwiddowson,1,https://github.com/heimdal/heimdal/pull/363,"In VC15 GetVersionEx has been deprecated.  It is currently only used
to test for versions being >= XP.
Assuming the Win2K and earlier is no longer supported, remove the
test and instead hard wire has_rand_s to be true.","In VC15 GetVersionEx has been deprecated.  It is currently only used
to test for versions being >= XP.
Assuming the Win2K and earlier is no longer supported, remove the
test and instead hard wire has_rand_s to be true.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,364,2018-03-08T15:16:02Z,2018-03-09T22:04:30Z,2018-03-09T22:04:30Z,MERGED,True,8,10,4,https://github.com/selsky,Fix subject verb agreement in error message...,1,[],https://github.com/heimdal/heimdal/pull/364,https://github.com/selsky,1,https://github.com/heimdal/heimdal/pull/364,"for krb5_ticket_get_authorization_data_type()
And remove FIXME in translation files.
Fix #361","for krb5_ticket_get_authorization_data_type()
And remove FIXME in translation files.
Fix #361",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,365,2018-03-22T16:48:23Z,2018-04-04T15:41:42Z,2018-04-04T15:41:42Z,CLOSED,False,1,0,1,https://github.com/dariaphoebe,getauxval: return 0 in case returning 0 when getauxval doesn't set errno,1,[],https://github.com/heimdal/heimdal/pull/365,https://github.com/dariaphoebe,1,https://github.com/heimdal/heimdal/pull/365,"if when we need to determine if getauxval sets errno, we determine it doesn't
after getting a 0 return code, make sure we return a value, since we didn't
previously.","if when we need to determine if getauxval sets errno, we determine it doesn't
after getting a 0 return code, make sure we return a value, since we didn't
previously.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,366,2018-03-23T02:29:07Z,2018-04-04T16:54:15Z,2018-04-04T16:54:15Z,MERGED,True,3,7,2,https://github.com/dariaphoebe,getauxval: fall through to auxv gfter getauxval errno test,2,[],https://github.com/heimdal/heimdal/pull/366,https://github.com/dariaphoebe,1,https://github.com/heimdal/heimdal/pull/366,"if when we need to determine if getauxval sets errno, we determine it doesn't
after getting a 0 return code, make sure we return a value, since we didn't
previously. fall through to code we'd otherwise have called in this case
above.","if when we need to determine if getauxval sets errno, we determine it doesn't
after getting a 0 return code, make sure we return a value, since we didn't
previously. fall through to code we'd otherwise have called in this case
above.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,367,2018-03-27T11:36:05Z,2018-04-04T15:27:25Z,2018-04-04T15:27:25Z,MERGED,True,3,1,1,https://github.com/habazut,Make parse_units() handle trailing whitespace,2,[],https://github.com/heimdal/heimdal/pull/367,https://github.com/habazut,1,https://github.com/heimdal/heimdal/pull/367,Skipping any trailing whitespace characters,Skipping any trailing whitespace characters,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,369,2018-04-09T18:00:58Z,2018-04-09T18:50:18Z,2018-04-09T18:50:18Z,MERGED,True,6,0,2,https://github.com/dariaphoebe,hcrypto: implement missed symbol renaming in camellia-ntt and rand,1,[],https://github.com/heimdal/heimdal/pull/369,https://github.com/dariaphoebe,1,https://github.com/heimdal/heimdal/pull/369,"camellia-ntt had none of its symbols renamed into the hc_ namespace,
and rand's missed timer_method (while all other methods were done). rename
these like we do for others","camellia-ntt had none of its symbols renamed into the hc_ namespace,
and rand's missed timer_method (while all other methods were done). rename
these like we do for others",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,370,2018-04-17T19:26:27Z,2018-04-18T01:32:37Z,2018-04-18T01:32:37Z,MERGED,True,9,1,1,https://github.com/dariaphoebe,roken: test for auxv_t in whichever of auxv.h or sys/auxv.h we find,1,[],https://github.com/heimdal/heimdal/pull/370,https://github.com/dariaphoebe,1,https://github.com/heimdal/heimdal/pull/370,"on solaris it's in sys/auxv.h; so a test for it only in auxv.h isn't
enough","on solaris it's in sys/auxv.h; so a test for it only in auxv.h isn't
enough",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,371,2018-04-18T18:41:54Z,2018-04-19T14:42:15Z,2018-04-19T14:42:15Z,CLOSED,False,12,4,4,https://github.com/dariaphoebe,use correct define for c compiler,4,[],https://github.com/heimdal/heimdal/pull/371,https://github.com/dariaphoebe,1,https://github.com/heimdal/heimdal/pull/371,"the C++ compiler uses __SUNPRO_CC; we're the C compiler, so use __SUNPRO_C","the C++ compiler uses __SUNPRO_CC; we're the C compiler, so use __SUNPRO_C",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,372,2018-04-18T19:58:36Z,2018-04-19T17:13:01Z,2018-04-19T17:13:01Z,MERGED,True,18,18,6,https://github.com/dariaphoebe,Solaris updates,5,[],https://github.com/heimdal/heimdal/pull/372,https://github.com/dariaphoebe,1,https://github.com/heimdal/heimdal/pull/372,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,372,2018-04-18T19:58:36Z,2018-04-19T17:13:01Z,2018-04-19T17:13:01Z,MERGED,True,18,18,6,https://github.com/dariaphoebe,Solaris updates,5,[],https://github.com/heimdal/heimdal/pull/372,https://github.com/jaltman,2,https://github.com/heimdal/heimdal/pull/372#issuecomment-382777589,,"@vdukhovni Could you review the last change in this series?   It removes a $(heim_verbose) inclusion that you added in 008a26c.
@nicowilliams Could you review the first change in this series?  It changes the __SUNPRO_CC define you added in 2f0c45f to __SUNPRO_C.   Were you compiling with C++?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,373,2018-04-19T16:23:26Z,2018-04-19T19:54:33Z,2018-04-19T19:54:33Z,MERGED,True,1,1,1,https://github.com/selsky,Fix typos in setup documentation,1,[],https://github.com/heimdal/heimdal/pull/373,https://github.com/selsky,1,https://github.com/heimdal/heimdal/pull/373,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,374,2018-04-19T17:56:16Z,2018-04-19T19:52:08Z,2018-04-19T19:52:08Z,MERGED,True,4,1,1,https://github.com/dariaphoebe,"libedit: makelist should default to awk, but not force it",1,[],https://github.com/heimdal/heimdal/pull/374,https://github.com/dariaphoebe,1,https://github.com/heimdal/heimdal/pull/374,"solaris needs gawk; we should allow the makefile to override awk
with gawk (or whatever else)","solaris needs gawk; we should allow the makefile to override awk
with gawk (or whatever else)",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,375,2018-04-19T21:37:33Z,2018-12-18T19:13:41Z,2018-12-18T19:13:53Z,CLOSED,False,1,5,3,https://github.com/dariaphoebe,Solaris10,3,[],https://github.com/heimdal/heimdal/pull/375,https://github.com/dariaphoebe,1,https://github.com/heimdal/heimdal/pull/375,deal with older versions of tr and lex that exist on solaris 10.,deal with older versions of tr and lex that exist on solaris 10.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,375,2018-04-19T21:37:33Z,2018-12-18T19:13:41Z,2018-12-18T19:13:53Z,CLOSED,False,1,5,3,https://github.com/dariaphoebe,Solaris10,3,[],https://github.com/heimdal/heimdal/pull/375,https://github.com/jaltman,2,https://github.com/heimdal/heimdal/pull/375#issuecomment-447299823,deal with older versions of tr and lex that exist on solaris 10.,@lhoward please review,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,375,2018-04-19T21:37:33Z,2018-12-18T19:13:41Z,2018-12-18T19:13:53Z,CLOSED,False,1,5,3,https://github.com/dariaphoebe,Solaris10,3,[],https://github.com/heimdal/heimdal/pull/375,https://github.com/dariaphoebe,3,https://github.com/heimdal/heimdal/pull/375#issuecomment-447939852,deal with older versions of tr and lex that exist on solaris 10.,"Managed to submit as a new PR, sorry.
#454",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,375,2018-04-19T21:37:33Z,2018-12-18T19:13:41Z,2018-12-18T19:13:53Z,CLOSED,False,1,5,3,https://github.com/dariaphoebe,Solaris10,3,[],https://github.com/heimdal/heimdal/pull/375,https://github.com/nicowilliams,4,https://github.com/heimdal/heimdal/pull/375#issuecomment-448336055,deal with older versions of tr and lex that exist on solaris 10.,Pushed via #454.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,377,2018-05-02T22:06:03Z,2018-12-14T21:03:35Z,2018-12-14T21:03:36Z,MERGED,True,1,0,1,https://github.com/quanah,Fixes https://github.com/heimdal/heimdal/issues/376,1,[],https://github.com/heimdal/heimdal/pull/377,https://github.com/quanah,1,https://github.com/heimdal/heimdal/pull/377,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,377,2018-05-02T22:06:03Z,2018-12-14T21:03:35Z,2018-12-14T21:03:36Z,MERGED,True,1,0,1,https://github.com/quanah,Fixes https://github.com/heimdal/heimdal/issues/376,1,[],https://github.com/heimdal/heimdal/pull/377,https://github.com/jaltman,2,https://github.com/heimdal/heimdal/pull/377#issuecomment-447300024,,@nicowilliams please review,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,379,2018-05-11T13:02:31Z,2018-05-13T05:41:37Z,2018-12-22T07:16:37Z,CLOSED,False,234,41,11,https://github.com/lhoward,Re-add support for Solaris Doors IPC mechanism,1,[],https://github.com/heimdal/heimdal/pull/379,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/379,"Creating PR to track branch, work is not yet finished
KCM et al used to support doors (a lightweight IPC mechanism in Solaris) but this was removed when the Heimdal IPC library was introduced. These patches re-implement it.","Creating PR to track branch, work is not yet finished
KCM et al used to support doors (a lightweight IPC mechanism in Solaris) but this was removed when the Heimdal IPC library was introduced. These patches re-implement it.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,379,2018-05-11T13:02:31Z,2018-05-13T05:41:37Z,2018-12-22T07:16:37Z,CLOSED,False,234,41,11,https://github.com/lhoward,Re-add support for Solaris Doors IPC mechanism,1,[],https://github.com/heimdal/heimdal/pull/379,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/379#issuecomment-388529741,"Creating PR to track branch, work is not yet finished
KCM et al used to support doors (a lightweight IPC mechanism in Solaris) but this was removed when the Heimdal IPC library was introduced. These patches re-implement it.",KCM was completely broken on Solaris anyway because IPC did not work (#382). So we can safely assume nobody was using it. Which makes me feel safer about merging this code. @nicowilliams could you take a look?,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,379,2018-05-11T13:02:31Z,2018-05-13T05:41:37Z,2018-12-22T07:16:37Z,CLOSED,False,234,41,11,https://github.com/lhoward,Re-add support for Solaris Doors IPC mechanism,1,[],https://github.com/heimdal/heimdal/pull/379,https://github.com/lhoward,3,https://github.com/heimdal/heimdal/pull/379#issuecomment-388603075,"Creating PR to track branch, work is not yet finished
KCM et al used to support doors (a lightweight IPC mechanism in Solaris) but this was removed when the Heimdal IPC library was introduced. These patches re-implement it.","Merged in 73fde33. I figure that, given Unix domain socket IPC was completely broken on Solaris, this is fairly low impact to merge. Should only affect platforms with HAVE_DOOR_CREATE.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,384,2018-05-15T11:35:03Z,2018-05-23T13:54:29Z,2018-05-23T13:54:29Z,MERGED,True,1319,293,16,https://github.com/SimonWilkinson,Fully implement iovecs for aes-sha1 encryption types,22,['hcrypto'],https://github.com/heimdal/heimdal/pull/384,https://github.com/SimonWilkinson,1,https://github.com/heimdal/heimdal/pull/384,"This set of changes push iovecs down into the krb5 crypto code, so that we use iovecs for encryption, decryption and checksumming when the _iov variants of the encryption and checksum functions are called by the library user.
iovecs are currently only used for AES-SHA1 based encryption types.","This set of changes push iovecs down into the krb5 crypto code, so that we use iovecs for encryption, decryption and checksumming when the _iov variants of the encryption and checksum functions are called by the library user.
iovecs are currently only used for AES-SHA1 based encryption types.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,386,2018-05-25T22:16:50Z,2018-05-26T03:46:11Z,2018-05-26T03:46:50Z,MERGED,True,4,2,1,https://github.com/SimonWilkinson,Sxw/iovec fixes,1,[],https://github.com/heimdal/heimdal/pull/386,https://github.com/SimonWilkinson,1,https://github.com/heimdal/heimdal/pull/386,This fixes a couple of issues with the recently merged iovec series,This fixes a couple of issues with the recently merged iovec series,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,387,2018-05-28T11:06:08Z,2018-05-28T12:37:24Z,2018-05-28T12:37:24Z,MERGED,True,2,0,1,https://github.com/SimonWilkinson,krb5/crypto: Fix compiler error in new iovec CTS code,1,[],https://github.com/heimdal/heimdal/pull/387,https://github.com/SimonWilkinson,1,https://github.com/heimdal/heimdal/pull/387,"Some versions of gcc can't follow the logic in the encryption path
of the _krb5_evp_encrypt_iov_cts code, and believe that it is
possible for the lastpos structure to be used uninitialised.
This isn't actually possible. On entry to the loop, remaining is
guaranteed to be both greater than, and a multiple of blocksize.
In order to exit the loop, remaining must be set to 0. If
cursor.current.length >= remaining, then we set remaining to 0 and
also set lastpos. Otherwise, we calculate the number of whole blocks
in the current iovec, which must be less than remaining, and subtract
that from remaining. Remaining must still be a multiple of and greater
than or equal to blocksize. If remaining == blocksize, we set lastpos,
and set remaining to 0. Otherwise we consume a single block, and go
around again. All of the paths which may set remaining to 0 also
set lastpos, so lastpos must be populated when the loop terminates.
Coverity has a similiar misconception, albeit with ivec2, which is
mistaken for the same reasons.","Some versions of gcc can't follow the logic in the encryption path
of the _krb5_evp_encrypt_iov_cts code, and believe that it is
possible for the lastpos structure to be used uninitialised.
This isn't actually possible. On entry to the loop, remaining is
guaranteed to be both greater than, and a multiple of blocksize.
In order to exit the loop, remaining must be set to 0. If
cursor.current.length >= remaining, then we set remaining to 0 and
also set lastpos. Otherwise, we calculate the number of whole blocks
in the current iovec, which must be less than remaining, and subtract
that from remaining. Remaining must still be a multiple of and greater
than or equal to blocksize. If remaining == blocksize, we set lastpos,
and set remaining to 0. Otherwise we consume a single block, and go
around again. All of the paths which may set remaining to 0 also
set lastpos, so lastpos must be populated when the loop terminates.
Coverity has a similiar misconception, albeit with ivec2, which is
mistaken for the same reasons.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,389,2018-07-14T07:34:35Z,2018-09-04T10:12:20Z,2018-09-04T10:12:20Z,CLOSED,False,35,1,1,https://github.com/iboukris,S4U2Self: fix impersonate with multiple realms using referrals,1,[],https://github.com/heimdal/heimdal/pull/389,https://github.com/iboukris,1,https://github.com/heimdal/heimdal/pull/389,"When impersonating a user from another realm, we first need
to obtain a TGT to TGS in that user's realm.
Only then we can ask for a ticket for self and follow back
referrals to our own realm.
See MS-SFU sections 3.1.5.1.1.1 and 4.2
More details at:
http://www.h5l.org/pipermail/heimdal-discuss/2018-July/000381.html","When impersonating a user from another realm, we first need
to obtain a TGT to TGS in that user's realm.
Only then we can ask for a ticket for self and follow back
referrals to our own realm.
See MS-SFU sections 3.1.5.1.1.1 and 4.2
More details at:
http://www.h5l.org/pipermail/heimdal-discuss/2018-July/000381.html",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,389,2018-07-14T07:34:35Z,2018-09-04T10:12:20Z,2018-09-04T10:12:20Z,CLOSED,False,35,1,1,https://github.com/iboukris,S4U2Self: fix impersonate with multiple realms using referrals,1,[],https://github.com/heimdal/heimdal/pull/389,https://github.com/iboukris,2,https://github.com/heimdal/heimdal/pull/389#issuecomment-410262708,"When impersonating a user from another realm, we first need
to obtain a TGT to TGS in that user's realm.
Only then we can ask for a ticket for self and follow back
referrals to our own realm.
See MS-SFU sections 3.1.5.1.1.1 and 4.2
More details at:
http://www.h5l.org/pipermail/heimdal-discuss/2018-July/000381.html","See also Samba PR (and the thread on Samba mailing list):
samba-team/samba#204",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,389,2018-07-14T07:34:35Z,2018-09-04T10:12:20Z,2018-09-04T10:12:20Z,CLOSED,False,35,1,1,https://github.com/iboukris,S4U2Self: fix impersonate with multiple realms using referrals,1,[],https://github.com/heimdal/heimdal/pull/389,https://github.com/iboukris,3,https://github.com/heimdal/heimdal/pull/389#issuecomment-418314026,"When impersonating a user from another realm, we first need
to obtain a TGT to TGS in that user's realm.
Only then we can ask for a ticket for self and follow back
referrals to our own realm.
See MS-SFU sections 3.1.5.1.1.1 and 4.2
More details at:
http://www.h5l.org/pipermail/heimdal-discuss/2018-July/000381.html",Superseded by #403,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,390,2018-07-16T16:53:48Z,2018-12-14T23:04:10Z,2018-12-14T23:04:10Z,MERGED,True,2,0,1,https://github.com/semerad,KCM: initialize kdc_offset when allocating kcm_ccache struct,1,[],https://github.com/heimdal/heimdal/pull/390,https://github.com/semerad,1,https://github.com/heimdal/heimdal/pull/390,"In KCM, when allocating new kcm_ccache struct, there is missing
inicialization of kdc_offset.
It is getting random values in my case and stored tickets are unusable,
last time I got this value to ""klist -v"":
KDC time offset: 61 years 11 months 2 weeks 3 days 5 hours 28 minutes 32 seconds
This commit seems to correct it.","In KCM, when allocating new kcm_ccache struct, there is missing
inicialization of kdc_offset.
It is getting random values in my case and stored tickets are unusable,
last time I got this value to ""klist -v"":
KDC time offset: 61 years 11 months 2 weeks 3 days 5 hours 28 minutes 32 seconds
This commit seems to correct it.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,391,2018-07-17T07:45:12Z,2018-12-14T23:00:37Z,2018-12-14T23:00:37Z,CLOSED,False,8,12,3,https://github.com/iboukris,Some little cleanups,4,[],https://github.com/heimdal/heimdal/pull/391,https://github.com/iboukris,1,https://github.com/heimdal/heimdal/pull/391,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,391,2018-07-17T07:45:12Z,2018-12-14T23:00:37Z,2018-12-14T23:00:37Z,CLOSED,False,8,12,3,https://github.com/iboukris,Some little cleanups,4,[],https://github.com/heimdal/heimdal/pull/391,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/391#issuecomment-447503559,,"Commit 0a67e64 should be removed.  Just because the ccache isn't currently being used in those functions doesn't mean that it doesn't belong, and we might want to use it in the future for accessing things like ccconfig entries.  Builds should not be failing, but we wouldn't object to adding a (void)id; to such functions.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,391,2018-07-17T07:45:12Z,2018-12-14T23:00:37Z,2018-12-14T23:00:37Z,CLOSED,False,8,12,3,https://github.com/iboukris,Some little cleanups,4,[],https://github.com/heimdal/heimdal/pull/391,https://github.com/nicowilliams,3,https://github.com/heimdal/heimdal/pull/391#issuecomment-447504078,,Cherry-picked and pushed.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,393,2018-07-23T16:10:56Z,2018-07-23T20:34:31Z,2018-07-23T20:34:31Z,CLOSED,False,12,1,2,https://github.com/dariaphoebe,ipropd_slave: open hdb around kadm5_log_init in case recovery needed,1,[],https://github.com/heimdal/heimdal/pull/393,https://github.com/dariaphoebe,1,https://github.com/heimdal/heimdal/pull/393,"log_init in the event a log is found will do recovery. kadm5_log_replay
will call methods which expect an hdb_db to be set but without this
none is","log_init in the event a log is found will do recovery. kadm5_log_replay
will call methods which expect an hdb_db to be set but without this
none is",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,393,2018-07-23T16:10:56Z,2018-07-23T20:34:31Z,2018-07-23T20:34:31Z,CLOSED,False,12,1,2,https://github.com/dariaphoebe,ipropd_slave: open hdb around kadm5_log_init in case recovery needed,1,[],https://github.com/heimdal/heimdal/pull/393,https://github.com/dariaphoebe,2,https://github.com/heimdal/heimdal/pull/393#issuecomment-407113501,"log_init in the event a log is found will do recovery. kadm5_log_replay
will call methods which expect an hdb_db to be set but without this
none is","#0  DB__get (context=, db=, key=...,
reply=0x7ffcc2a88790) at db3.c:209
#1  0x00007f95287135dd in _hdb_fetch_kvno (context=0x11340b0, db=0x1137f90,
principal=, flags=2141, kvno=0, entry=0x7ffcc2a888a0)
at common.c:127
#2  0x00007f952893d19e in kadm5_log_replay_modify (context=0x1137b20,
ver=, len=748, sp=) at log.c:1407
#3  0x00007f952893d9bd in kadm5_log_replay (context=0x1137b20,
op=, ver=1194466072, len=752, sp=0x1134d00)
at log.c:2244
#4  0x00007f952893dc90 in recover_replay (context=0x1137b20, ver=1194466072,
timestamp=, op=kadm_modify, len=752,
sp=, ctx=0x7ffcc2a88bf0) at log.c:1788
#5  0x00007f952893c44c in kadm5_log_foreach (context=0x1137b20, iter_opts=9,
off_lastp=0x7ffcc2a88b90, func=0x7f952893da60 <recover_replay>,
ctx=0x7ffcc2a88bf0) at log.c:2001
#6  0x00007f952893c769 in kadm5_log_recover (context=0x1137b20,
mode=kadm_recover_replay) at log.c:1835
#7  0x00007f952893e4c9 in log_init (server_context=0x1137b20,
lock_mode=) at log.c:663
#8  0x00000000004030ec in main (argc=1, argv=)
at ipropd_slave.c:789
(gdb) print db
$3 = (HDB *) 0x1137f90
(gdb) print *db
$4 = {hdb_db = 0x0, hdb_dbc = 0x0,
hdb_name = 0x1138080 ""/var/heimdal/heimdal"", hdb_master_key_set = 1,
...",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,394,2018-07-23T20:34:17Z,2018-07-29T23:51:11Z,2018-07-29T23:51:11Z,MERGED,True,22,0,1,https://github.com/dariaphoebe,ipropd_slave: open hdb around kadm5_log_init in case recovery needed,2,[],https://github.com/heimdal/heimdal/pull/394,https://github.com/dariaphoebe,1,https://github.com/heimdal/heimdal/pull/394,"log_init in the event a log is found will do recovery. kadm5_log_replay
will call methods which expect an hdb_db to be set but without this
none is","log_init in the event a log is found will do recovery. kadm5_log_replay
will call methods which expect an hdb_db to be set but without this
none is",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,395,2018-08-01T13:06:34Z,2018-09-10T13:46:28Z,2018-09-13T11:10:00Z,CLOSED,False,9,3,2,https://github.com/bodik,del_enctype with specific kvno (cpw --keepold counterpart),1,[],https://github.com/heimdal/heimdal/pull/395,https://github.com/bodik,1,https://github.com/heimdal/heimdal/pull/395,usecase for the PR is the krbtgt/ rollover. one can add new keys using cpw --keepold but removing old keys/enctypes with specific kvno is not currenly supported.,usecase for the PR is the krbtgt/ rollover. one can add new keys using cpw --keepold but removing old keys/enctypes with specific kvno is not currenly supported.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,395,2018-08-01T13:06:34Z,2018-09-10T13:46:28Z,2018-09-13T11:10:00Z,CLOSED,False,9,3,2,https://github.com/bodik,del_enctype with specific kvno (cpw --keepold counterpart),1,[],https://github.com/heimdal/heimdal/pull/395,https://github.com/bodik,2,https://github.com/heimdal/heimdal/pull/395#issuecomment-419917599,usecase for the PR is the krbtgt/ rollover. one can add new keys using cpw --keepold but removing old keys/enctypes with specific kvno is not currenly supported.,"not working as expected, other approach is needed to prune historic keys from hdb",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,403,2018-09-01T16:23:50Z,,2021-03-11T03:26:50Z,OPEN,False,518,197,6,https://github.com/iboukris,Fix cross realm S4U2Self V2,6,[],https://github.com/heimdal/heimdal/pull/403,https://github.com/iboukris,1,https://github.com/heimdal/heimdal/pull/403,"Including KDC fixes.
Follow-up to #389","Including KDC fixes.
Follow-up to #389",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,403,2018-09-01T16:23:50Z,,2021-03-11T03:26:50Z,OPEN,False,518,197,6,https://github.com/iboukris,Fix cross realm S4U2Self V2,6,[],https://github.com/heimdal/heimdal/pull/403,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/403#issuecomment-447502854,"Including KDC fixes.
Follow-up to #389","Thank you for this contribution.  I've not reviewed all of it, though the general quality looks pretty good.  This is quite large and we'll have to review this in the context of the S4U docs, and that will take time.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,403,2018-09-01T16:23:50Z,,2021-03-11T03:26:50Z,OPEN,False,518,197,6,https://github.com/iboukris,Fix cross realm S4U2Self V2,6,[],https://github.com/heimdal/heimdal/pull/403,https://github.com/iboukris,3,https://github.com/heimdal/heimdal/pull/403#issuecomment-447636991,"Including KDC fixes.
Follow-up to #389","Thanks for looking at this, note that it has become a bit work-in-progress as I'd like to update it with some insights learned while implementing related work in MIT (like more constraints to cross-realm s4u2self and add in-tree tests without PAC).
However, the main logic is the same and I could use feedback on the current work.
I'm testing it with samba against Windows DC, I've also submitted a similar merge request against Samba with tests that exercise it:
https://gitlab.com/samba-team/devel/samba/commits/iboukris_xrealm_s4u2self_new",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,405,2018-09-06T02:45:31Z,2018-12-25T15:54:36Z,2018-12-25T15:54:36Z,MERGED,True,1,1,1,https://github.com/Sushant-M,Fixed incorrect NTLM version.,1,[],https://github.com/heimdal/heimdal/pull/405,https://github.com/Sushant-M,1,https://github.com/heimdal/heimdal/pull/405,"It was 00 earlier, changed it to 0f(15). Also made the reserved field
before it 00 00 00 instead of 0f 00 00.
Issue #404","It was 00 earlier, changed it to 0f(15). Also made the reserved field
before it 00 00 00 instead of 0f 00 00.
Issue #404",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,406,2018-09-10T09:20:15Z,2018-09-18T23:25:03Z,2018-09-18T23:25:03Z,CLOSED,False,47,4,2,https://github.com/abartlet,Allow zero-length encrypt IOV elements in _krb5_evp_encrypt_iov_cts(),1,[],https://github.com/heimdal/heimdal/pull/406,https://github.com/abartlet,1,https://github.com/heimdal/heimdal/pull/406,"The test here is not a failing test, it will (as discoved via Samba in an attempted heimdal upgrade)
simply spin to 100% CPU.
Signed-off-by: Andrew Bartlett abartlet@samba.org","The test here is not a failing test, it will (as discoved via Samba in an attempted heimdal upgrade)
simply spin to 100% CPU.
Signed-off-by: Andrew Bartlett abartlet@samba.org",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,406,2018-09-10T09:20:15Z,2018-09-18T23:25:03Z,2018-09-18T23:25:03Z,CLOSED,False,47,4,2,https://github.com/abartlet,Allow zero-length encrypt IOV elements in _krb5_evp_encrypt_iov_cts(),1,[],https://github.com/heimdal/heimdal/pull/406,https://github.com/jaltman,2,https://github.com/heimdal/heimdal/pull/406#issuecomment-419890992,"The test here is not a failing test, it will (as discoved via Samba in an attempted heimdal upgrade)
simply spin to 100% CPU.
Signed-off-by: Andrew Bartlett abartlet@samba.org",@SimonWilkinson please review,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,406,2018-09-10T09:20:15Z,2018-09-18T23:25:03Z,2018-09-18T23:25:03Z,CLOSED,False,47,4,2,https://github.com/abartlet,Allow zero-length encrypt IOV elements in _krb5_evp_encrypt_iov_cts(),1,[],https://github.com/heimdal/heimdal/pull/406,https://github.com/SimonWilkinson,3,https://github.com/heimdal/heimdal/pull/406#issuecomment-422567774,"The test here is not a failing test, it will (as discoved via Samba in an attempted heimdal upgrade)
simply spin to 100% CPU.
Signed-off-by: Andrew Bartlett abartlet@samba.org",#422 is an alternative fix. I've taken the liberty of using the tests from this change.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,406,2018-09-10T09:20:15Z,2018-09-18T23:25:03Z,2018-09-18T23:25:03Z,CLOSED,False,47,4,2,https://github.com/abartlet,Allow zero-length encrypt IOV elements in _krb5_evp_encrypt_iov_cts(),1,[],https://github.com/heimdal/heimdal/pull/406,https://github.com/jaltman,4,https://github.com/heimdal/heimdal/pull/406#issuecomment-422591804,"The test here is not a failing test, it will (as discoved via Samba in an attempted heimdal upgrade)
simply spin to 100% CPU.
Signed-off-by: Andrew Bartlett abartlet@samba.org",Replaced by #422 (comment),True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,407,2018-09-10T13:43:06Z,2018-09-10T18:40:52Z,2018-09-10T18:40:52Z,MERGED,True,13,3,2,https://github.com/abartlet,heimdal: Use #ifdef HAVE_DLOPEN around functions and variables used by HAVE_DLOPEN,2,[],https://github.com/heimdal/heimdal/pull/407,https://github.com/abartlet,1,https://github.com/heimdal/heimdal/pull/407,"Samba has a cut-down version of Heimdal in-tree, which does not have HAVE_DLOPEN specified.
This patch allows this to build in Samba, after an update to current Heimdal.","Samba has a cut-down version of Heimdal in-tree, which does not have HAVE_DLOPEN specified.
This patch allows this to build in Samba, after an update to current Heimdal.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,408,2018-09-10T13:51:58Z,2018-09-10T18:42:19Z,2018-09-10T18:42:19Z,MERGED,True,12,12,9,https://github.com/abartlet,Typos via Samba,8,[],https://github.com/heimdal/heimdal/pull/408,https://github.com/abartlet,1,https://github.com/heimdal/heimdal/pull/408,"A while back Chris Lamb (now Debian Project Leader!) decided to fix some spelling errors across the Samba tree, which included these in the part of Heimdal we ship.
I'm currently trying again to update our tree to Heimdal master so am submitting these for inclusion for your benefit and so we don't carry them locally.","A while back Chris Lamb (now Debian Project Leader!) decided to fix some spelling errors across the Samba tree, which included these in the part of Heimdal we ship.
I'm currently trying again to update our tree to Heimdal master so am submitting these for inclusion for your benefit and so we don't carry them locally.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,409,2018-09-10T16:17:03Z,2018-09-10T20:25:31Z,2018-09-10T20:25:32Z,CLOSED,False,12,12,1,https://github.com/abartlet,(Likely old) compiler warnings in fcache.c,4,[],https://github.com/heimdal/heimdal/pull/409,https://github.com/abartlet,1,https://github.com/heimdal/heimdal/pull/409,"Over the time that Samba has been on a divergent branch of Heimdal, an number of 'fix compile warnings'.
I can't reproduce the warnings in current Heimdal master that triggered this work, but initialising variables is a good thing regardless, so I present the patches.
Likely any underlying issues were resolved via the coverity scan fixes in the past few years.","Over the time that Samba has been on a divergent branch of Heimdal, an number of 'fix compile warnings'.
I can't reproduce the warnings in current Heimdal master that triggered this work, but initialising variables is a good thing regardless, so I present the patches.
Likely any underlying issues were resolved via the coverity scan fixes in the past few years.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,409,2018-09-10T16:17:03Z,2018-09-10T20:25:31Z,2018-09-10T20:25:32Z,CLOSED,False,12,12,1,https://github.com/abartlet,(Likely old) compiler warnings in fcache.c,4,[],https://github.com/heimdal/heimdal/pull/409,https://github.com/abartlet,2,https://github.com/heimdal/heimdal/pull/409#issuecomment-420048373,"Over the time that Samba has been on a divergent branch of Heimdal, an number of 'fix compile warnings'.
I can't reproduce the warnings in current Heimdal master that triggered this work, but initialising variables is a good thing regardless, so I present the patches.
Likely any underlying issues were resolved via the coverity scan fixes in the past few years.",Thanks.  I appreciate the feedback.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,410,2018-09-10T17:54:16Z,2018-12-20T01:53:35Z,2018-12-20T08:16:24Z,CLOSED,False,25,19,4,https://github.com/abartlet,Address some compiler warnings,4,[],https://github.com/heimdal/heimdal/pull/410,https://github.com/abartlet,1,https://github.com/heimdal/heimdal/pull/410,"These compiler warnings come via Samba.
Some were already submitted in #354 but I re-raise them with the justifications requested as far as I've been able to reproduce on Ubuntu 16.04 gcc 5.4.0
I realise not all the patches and chunks have a justification, but increasing the type width in (eg) asn1.c is pretty low-risk.
It would be very helpful if these could be accepted upstream as it will reduce the number of patches we need to maintain in our lorikeet-heimdal fork.
Thanks!","These compiler warnings come via Samba.
Some were already submitted in #354 but I re-raise them with the justifications requested as far as I've been able to reproduce on Ubuntu 16.04 gcc 5.4.0
I realise not all the patches and chunks have a justification, but increasing the type width in (eg) asn1.c is pretty low-risk.
It would be very helpful if these could be accepted upstream as it will reduce the number of patches we need to maintain in our lorikeet-heimdal fork.
Thanks!",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,410,2018-09-10T17:54:16Z,2018-12-20T01:53:35Z,2018-12-20T08:16:24Z,CLOSED,False,25,19,4,https://github.com/abartlet,Address some compiler warnings,4,[],https://github.com/heimdal/heimdal/pull/410,https://github.com/abartlet,2,https://github.com/heimdal/heimdal/pull/410#issuecomment-420508484,"These compiler warnings come via Samba.
Some were already submitted in #354 but I re-raise them with the justifications requested as far as I've been able to reproduce on Ubuntu 16.04 gcc 5.4.0
I realise not all the patches and chunks have a justification, but increasing the type width in (eg) asn1.c is pretty low-risk.
It would be very helpful if these could be accepted upstream as it will reduce the number of patches we need to maintain in our lorikeet-heimdal fork.
Thanks!","I've addressed the feedback.
Is this OK to merge now?
Thanks,
Andrew Bartlett",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,410,2018-09-10T17:54:16Z,2018-12-20T01:53:35Z,2018-12-20T08:16:24Z,CLOSED,False,25,19,4,https://github.com/abartlet,Address some compiler warnings,4,[],https://github.com/heimdal/heimdal/pull/410,https://github.com/jaltman,3,https://github.com/heimdal/heimdal/pull/410#issuecomment-420622910,"These compiler warnings come via Samba.
Some were already submitted in #354 but I re-raise them with the justifications requested as far as I've been able to reproduce on Ubuntu 16.04 gcc 5.4.0
I realise not all the patches and chunks have a justification, but increasing the type width in (eg) asn1.c is pretty low-risk.
It would be very helpful if these could be accepted upstream as it will reduce the number of patches we need to maintain in our lorikeet-heimdal fork.
Thanks!",The Travis builders hung when running the tests.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,410,2018-09-10T17:54:16Z,2018-12-20T01:53:35Z,2018-12-20T08:16:24Z,CLOSED,False,25,19,4,https://github.com/abartlet,Address some compiler warnings,4,[],https://github.com/heimdal/heimdal/pull/410,https://github.com/abartlet,4,https://github.com/heimdal/heimdal/pull/410#issuecomment-421531928,"These compiler warnings come via Samba.
Some were already submitted in #354 but I re-raise them with the justifications requested as far as I've been able to reproduce on Ubuntu 16.04 gcc 5.4.0
I realise not all the patches and chunks have a justification, but increasing the type width in (eg) asn1.c is pretty low-risk.
It would be very helpful if these could be accepted upstream as it will reduce the number of patches we need to maintain in our lorikeet-heimdal fork.
Thanks!","The Travis builders hung when running the tests.

I've isolated the patch that does this, and am very glad such tests exist.  I've cut Andreas's patch down to the parts I could reproduce on Ubuntu 16.04 and which I included in the commit message and re-pushed.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,410,2018-09-10T17:54:16Z,2018-12-20T01:53:35Z,2018-12-20T08:16:24Z,CLOSED,False,25,19,4,https://github.com/abartlet,Address some compiler warnings,4,[],https://github.com/heimdal/heimdal/pull/410,https://github.com/abartlet,5,https://github.com/heimdal/heimdal/pull/410#issuecomment-422109681,"These compiler warnings come via Samba.
Some were already submitted in #354 but I re-raise them with the justifications requested as far as I've been able to reproduce on Ubuntu 16.04 gcc 5.4.0
I realise not all the patches and chunks have a justification, but increasing the type width in (eg) asn1.c is pretty low-risk.
It would be very helpful if these could be accepted upstream as it will reduce the number of patches we need to maintain in our lorikeet-heimdal fork.
Thanks!","Sorry for the drama, I finally worked out what was going on:  I botched the first patch that I was asked to re-write, rather than cherry-pick.
To be clear, it wasn't Andreas's patch, but I've left it cut-down to the parts I could reproduce the failure for.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,410,2018-09-10T17:54:16Z,2018-12-20T01:53:35Z,2018-12-20T08:16:24Z,CLOSED,False,25,19,4,https://github.com/abartlet,Address some compiler warnings,4,[],https://github.com/heimdal/heimdal/pull/410,https://github.com/abartlet,6,https://github.com/heimdal/heimdal/pull/410#issuecomment-422197297,"These compiler warnings come via Samba.
Some were already submitted in #354 but I re-raise them with the justifications requested as far as I've been able to reproduce on Ubuntu 16.04 gcc 5.4.0
I realise not all the patches and chunks have a justification, but increasing the type width in (eg) asn1.c is pretty low-risk.
It would be very helpful if these could be accepted upstream as it will reduce the number of patches we need to maintain in our lorikeet-heimdal fork.
Thanks!","Of course it is a 6 year old compiler, I'm just trying not to carry
local patches.

We can go around and around forever, but I'm just wasting your time and
not getting any closer to reducing the patches I carry locally.

What do you want to do, for the global picture, because this back and
forth is not productive for either of us. 

I don't get to choose the compiler Samba's autobuild runs with, and for
now it is this one, for better or worse.

Neither can I drop the patches, much as would like, because it then I
can't update Samba's copy.  I have far, far bigger issues to address
but we are both bogged down in this, looking for 'perfect'.

So which do you want:
 - the patches in our branch, so we never get to using upstream master
or
 - change the type of the boolean to uint32_t
or
 - change the type of the boolean to bool?

Thanks,

Andrew Bartlett",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,410,2018-09-10T17:54:16Z,2018-12-20T01:53:35Z,2018-12-20T08:16:24Z,CLOSED,False,25,19,4,https://github.com/abartlet,Address some compiler warnings,4,[],https://github.com/heimdal/heimdal/pull/410,https://github.com/abartlet,7,https://github.com/heimdal/heimdal/pull/410#issuecomment-447626487,"These compiler warnings come via Samba.
Some were already submitted in #354 but I re-raise them with the justifications requested as far as I've been able to reproduce on Ubuntu 16.04 gcc 5.4.0
I realise not all the patches and chunks have a justification, but increasing the type width in (eg) asn1.c is pretty low-risk.
It would be very helpful if these could be accepted upstream as it will reduce the number of patches we need to maintain in our lorikeet-heimdal fork.
Thanks!","To try and move this further along, I'll leave the gss_set_cred_option.c change in our branch until we can get Samba off the old compiler for our CI.  Updated patch set pushed, which should, I hope, have addressed all the review comment provided.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,410,2018-09-10T17:54:16Z,2018-12-20T01:53:35Z,2018-12-20T08:16:24Z,CLOSED,False,25,19,4,https://github.com/abartlet,Address some compiler warnings,4,[],https://github.com/heimdal/heimdal/pull/410,https://github.com/lhoward,8,https://github.com/heimdal/heimdal/pull/410#issuecomment-448829662,"These compiler warnings come via Samba.
Some were already submitted in #354 but I re-raise them with the justifications requested as far as I've been able to reproduce on Ubuntu 16.04 gcc 5.4.0
I realise not all the patches and chunks have a justification, but increasing the type width in (eg) asn1.c is pretty low-risk.
It would be very helpful if these could be accepted upstream as it will reduce the number of patches we need to maintain in our lorikeet-heimdal fork.
Thanks!",Merged with stylistic fixes,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,410,2018-09-10T17:54:16Z,2018-12-20T01:53:35Z,2018-12-20T08:16:24Z,CLOSED,False,25,19,4,https://github.com/abartlet,Address some compiler warnings,4,[],https://github.com/heimdal/heimdal/pull/410,https://github.com/abartlet,9,https://github.com/heimdal/heimdal/pull/410#issuecomment-448830174,"These compiler warnings come via Samba.
Some were already submitted in #354 but I re-raise them with the justifications requested as far as I've been able to reproduce on Ubuntu 16.04 gcc 5.4.0
I realise not all the patches and chunks have a justification, but increasing the type width in (eg) asn1.c is pretty low-risk.
It would be very helpful if these could be accepted upstream as it will reduce the number of patches we need to maintain in our lorikeet-heimdal fork.
Thanks!","man 3 snprintf suggests at least since SUSv2:

SUSv2 specified only the length modifiers h (in  hd,
       hi, ho, hx, hX, hn) and l (in ld, li, lo, lx, lX, ln, lc, ls)
and L (in Le, LE, Lf, Lg, LG).",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,410,2018-09-10T17:54:16Z,2018-12-20T01:53:35Z,2018-12-20T08:16:24Z,CLOSED,False,25,19,4,https://github.com/abartlet,Address some compiler warnings,4,[],https://github.com/heimdal/heimdal/pull/410,https://github.com/abartlet,10,https://github.com/heimdal/heimdal/pull/410#issuecomment-448830240,"These compiler warnings come via Samba.
Some were already submitted in #354 but I re-raise them with the justifications requested as far as I've been able to reproduce on Ubuntu 16.04 gcc 5.4.0
I realise not all the patches and chunks have a justification, but increasing the type width in (eg) asn1.c is pretty low-risk.
It would be very helpful if these could be accepted upstream as it will reduce the number of patches we need to maintain in our lorikeet-heimdal fork.
Thanks!","Merged with stylistic fixes

Thanks!",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,410,2018-09-10T17:54:16Z,2018-12-20T01:53:35Z,2018-12-20T08:16:24Z,CLOSED,False,25,19,4,https://github.com/abartlet,Address some compiler warnings,4,[],https://github.com/heimdal/heimdal/pull/410,https://github.com/lhoward,11,https://github.com/heimdal/heimdal/pull/410#issuecomment-448830838,"These compiler warnings come via Samba.
Some were already submitted in #354 but I re-raise them with the justifications requested as far as I've been able to reproduce on Ubuntu 16.04 gcc 5.4.0
I realise not all the patches and chunks have a justification, but increasing the type width in (eg) asn1.c is pretty low-risk.
It would be very helpful if these could be accepted upstream as it will reduce the number of patches we need to maintain in our lorikeet-heimdal fork.
Thanks!",@nicowilliams suggested int cast instead of %hd so went with that.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,411,2018-09-10T20:01:32Z,2018-09-10T20:37:59Z,2018-09-11T01:54:01Z,CLOSED,False,1,1,1,https://github.com/abartlet,kdc: Add initializer for stack pointers,1,[],https://github.com/heimdal/heimdal/pull/411,https://github.com/abartlet,1,https://github.com/heimdal/heimdal/pull/411,"Another patch from Samba's lorikeet-heimdal branch.
This helps ensure we know these are NULL until set.
This is only for clarity and for the good practice (in Samba)
of initializing stack pointers.  If _kdc_get_preferred_key()
returns 0 then skey must have been validly provided by
hdb_enctype2key().
Signed-off-by: Andrew Bartlett abartlet@samba.org
(similar to Samba commit a998c0073f508437714f462661165309049c1b10)
Signed-off-by: Andrew Bartlett abartlet@samba.org","Another patch from Samba's lorikeet-heimdal branch.
This helps ensure we know these are NULL until set.
This is only for clarity and for the good practice (in Samba)
of initializing stack pointers.  If _kdc_get_preferred_key()
returns 0 then skey must have been validly provided by
hdb_enctype2key().
Signed-off-by: Andrew Bartlett abartlet@samba.org
(similar to Samba commit a998c0073f508437714f462661165309049c1b10)
Signed-off-by: Andrew Bartlett abartlet@samba.org",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,412,2018-09-11T01:09:25Z,2018-09-11T01:18:40Z,2018-09-11T01:18:40Z,MERGED,True,3,3,1,https://github.com/abartlet,s4-heimdal: Fix the format-truncation errors.,1,[],https://github.com/heimdal/heimdal/pull/412,https://github.com/abartlet,1,https://github.com/heimdal/heimdal/pull/412,"../lib/com_err/compile_et.c: In function ‘generate_h’:
../lib/com_err/compile_et.c:138:33: error: ‘%s’ directive output may be truncated writing up to 127 bytes into a region of size 126 [-Werror=format-truncation=]
snprintf(fn, sizeof(fn), ""%s"", hfn);
^~     ~~~
../lib/com_err/compile_et.c:138:5: note: ‘snprintf’ output between 5 and 132 bytes into a destination of size 128
snprintf(fn, sizeof(fn), ""%s"", hfn);
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../lib/com_err/compile_et.c: In function ‘main’:
../lib/com_err/compile_et.c:234:35: error: ‘.h’ directive output may be truncated writing 2 bytes into a region of size between 1 and 128 [-Werror=format-truncation=]
snprintf(hfn, sizeof(hfn), ""%s.h"", Basename);
^~
../lib/com_err/compile_et.c:234:5: note: ‘snprintf’ output between 3 and 130 bytes into a destination of size 128
snprintf(hfn, sizeof(hfn), ""%s.h"", Basename);
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../lib/com_err/compile_et.c:235:35: error: ‘.c’ directive output may be truncated writing 2 bytes into a region of size between 1 and 128 [-Werror=format-truncation=]
snprintf(cfn, sizeof(cfn), ""%s.c"", Basename);
^~
../lib/com_err/compile_et.c:235:5: note: ‘snprintf’ output between 3 and 130 bytes into a destination of size 128
snprintf(cfn, sizeof(cfn), ""%s.c"", Basename);
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cc1: some warnings being treated as errors
BUG: https://bugzilla.samba.org/show_bug.cgi?id=13437
Guenther
Signed-off-by: Günther Deschner gd@samba.org
Reviewed-by: Andreas Schneider asn@samba.org
Autobuild-User(master): Andreas Schneider asn@cryptomilk.org
Autobuild-Date(master): Fri Jun  8 13:23:51 CEST 2018 on sn-devel-144
(cherry picked from Samba commit 7ddbf6035dfec6806536f99d0257245f70661363)","../lib/com_err/compile_et.c: In function ‘generate_h’:
../lib/com_err/compile_et.c:138:33: error: ‘%s’ directive output may be truncated writing up to 127 bytes into a region of size 126 [-Werror=format-truncation=]
snprintf(fn, sizeof(fn), ""%s"", hfn);
^~     ~~~
../lib/com_err/compile_et.c:138:5: note: ‘snprintf’ output between 5 and 132 bytes into a destination of size 128
snprintf(fn, sizeof(fn), ""%s"", hfn);
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../lib/com_err/compile_et.c: In function ‘main’:
../lib/com_err/compile_et.c:234:35: error: ‘.h’ directive output may be truncated writing 2 bytes into a region of size between 1 and 128 [-Werror=format-truncation=]
snprintf(hfn, sizeof(hfn), ""%s.h"", Basename);
^~
../lib/com_err/compile_et.c:234:5: note: ‘snprintf’ output between 3 and 130 bytes into a destination of size 128
snprintf(hfn, sizeof(hfn), ""%s.h"", Basename);
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../lib/com_err/compile_et.c:235:35: error: ‘.c’ directive output may be truncated writing 2 bytes into a region of size between 1 and 128 [-Werror=format-truncation=]
snprintf(cfn, sizeof(cfn), ""%s.c"", Basename);
^~
../lib/com_err/compile_et.c:235:5: note: ‘snprintf’ output between 3 and 130 bytes into a destination of size 128
snprintf(cfn, sizeof(cfn), ""%s.c"", Basename);
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cc1: some warnings being treated as errors
BUG: https://bugzilla.samba.org/show_bug.cgi?id=13437
Guenther
Signed-off-by: Günther Deschner gd@samba.org
Reviewed-by: Andreas Schneider asn@samba.org
Autobuild-User(master): Andreas Schneider asn@cryptomilk.org
Autobuild-Date(master): Fri Jun  8 13:23:51 CEST 2018 on sn-devel-144
(cherry picked from Samba commit 7ddbf6035dfec6806536f99d0257245f70661363)",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,415,2018-09-13T08:18:49Z,2018-12-31T20:17:11Z,2018-12-31T20:17:33Z,MERGED,True,376,29,21,https://github.com/bodik,kadmin selective prune of historic key for principal,1,['feature request'],https://github.com/heimdal/heimdal/pull/415,https://github.com/bodik,1,https://github.com/heimdal/heimdal/pull/415,"Hello,
please consider and at least comment this PR.
In current implementation (without PR)


the old keys either stays in the database forever or are prunned
automagically based on max_lifetime (based on prune-key-history), but
only on cpw, and yet it left the old key in history forever.


Rotating krbtgt/ (or other principals) wihtout --keepold would disrupt
realm operations, eg. long computing grid jobs.


The added functionality:


can be used to prune historic keys from principal
history by selective kvno. The main usecase is rollover krbtgt/ principals
(self and crossrealms).


it should be backward compatible afaik despite new opcode
kadm_ops struct. During operation a 'modify' type is logged into iprop
journal but data already contains and ipro processes full key history (KEY_TL_DATA),
so even using patched kadmin --local on unpatched kadmind would work
as expected on the slaves.","Hello,
please consider and at least comment this PR.
In current implementation (without PR)


the old keys either stays in the database forever or are prunned
automagically based on max_lifetime (based on prune-key-history), but
only on cpw, and yet it left the old key in history forever.


Rotating krbtgt/ (or other principals) wihtout --keepold would disrupt
realm operations, eg. long computing grid jobs.


The added functionality:


can be used to prune historic keys from principal
history by selective kvno. The main usecase is rollover krbtgt/ principals
(self and crossrealms).


it should be backward compatible afaik despite new opcode
kadm_ops struct. During operation a 'modify' type is logged into iprop
journal but data already contains and ipro processes full key history (KEY_TL_DATA),
so even using patched kadmin --local on unpatched kadmind would work
as expected on the slaves.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,415,2018-09-13T08:18:49Z,2018-12-31T20:17:11Z,2018-12-31T20:17:33Z,MERGED,True,376,29,21,https://github.com/bodik,kadmin selective prune of historic key for principal,1,['feature request'],https://github.com/heimdal/heimdal/pull/415,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/415#issuecomment-450076414,"Hello,
please consider and at least comment this PR.
In current implementation (without PR)


the old keys either stays in the database forever or are prunned
automagically based on max_lifetime (based on prune-key-history), but
only on cpw, and yet it left the old key in history forever.


Rotating krbtgt/ (or other principals) wihtout --keepold would disrupt
realm operations, eg. long computing grid jobs.


The added functionality:


can be used to prune historic keys from principal
history by selective kvno. The main usecase is rollover krbtgt/ principals
(self and crossrealms).


it should be backward compatible afaik despite new opcode
kadm_ops struct. During operation a 'modify' type is logged into iprop
journal but data already contains and ipro processes full key history (KEY_TL_DATA),
so even using patched kadmin --local on unpatched kadmind would work
as expected on the slaves.","Oh, I'd completely forgotten, but @vdukhovni wrote a prune history function two years ago.  The idea is to delete keys that are too old to be needed for decrypting potentially still-extant tickets.
Given that, do we still need pruning by kvno?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,415,2018-09-13T08:18:49Z,2018-12-31T20:17:11Z,2018-12-31T20:17:33Z,MERGED,True,376,29,21,https://github.com/bodik,kadmin selective prune of historic key for principal,1,['feature request'],https://github.com/heimdal/heimdal/pull/415,https://github.com/nicowilliams,3,https://github.com/heimdal/heimdal/pull/415#issuecomment-450076678,"Hello,
please consider and at least comment this PR.
In current implementation (without PR)


the old keys either stays in the database forever or are prunned
automagically based on max_lifetime (based on prune-key-history), but
only on cpw, and yet it left the old key in history forever.


Rotating krbtgt/ (or other principals) wihtout --keepold would disrupt
realm operations, eg. long computing grid jobs.


The added functionality:


can be used to prune historic keys from principal
history by selective kvno. The main usecase is rollover krbtgt/ principals
(self and crossrealms).


it should be backward compatible afaik despite new opcode
kadm_ops struct. During operation a 'modify' type is logged into iprop
journal but data already contains and ipro processes full key history (KEY_TL_DATA),
so even using patched kadmin --local on unpatched kadmind would work
as expected on the slaves.","Also, maybe we should make --keepold on by default and enable prune-key-history by default as well, and maybe add an argument to cpw/randkey to --dontprune and --pruneallold or something.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,415,2018-09-13T08:18:49Z,2018-12-31T20:17:11Z,2018-12-31T20:17:33Z,MERGED,True,376,29,21,https://github.com/bodik,kadmin selective prune of historic key for principal,1,['feature request'],https://github.com/heimdal/heimdal/pull/415,https://github.com/bodik,4,https://github.com/heimdal/heimdal/pull/415#issuecomment-450178723,"Hello,
please consider and at least comment this PR.
In current implementation (without PR)


the old keys either stays in the database forever or are prunned
automagically based on max_lifetime (based on prune-key-history), but
only on cpw, and yet it left the old key in history forever.


Rotating krbtgt/ (or other principals) wihtout --keepold would disrupt
realm operations, eg. long computing grid jobs.


The added functionality:


can be used to prune historic keys from principal
history by selective kvno. The main usecase is rollover krbtgt/ principals
(self and crossrealms).


it should be backward compatible afaik despite new opcode
kadm_ops struct. During operation a 'modify' type is logged into iprop
journal but data already contains and ipro processes full key history (KEY_TL_DATA),
so even using patched kadmin --local on unpatched kadmind would work
as expected on the slaves.","Oh, I'd completely forgotten, but @vdukhovni wrote a prune history function two years ago. The idea is to delete keys that are too old to be needed for decrypting potentially still-extant tickets.
Given that, do we still need pruning by kvno?

this is true, but as I stated in the original PR, there is a problem with that feature. prune-key-history works 'automagically' only during cpw command. So in case of the key rollover, the feature is somewhat useless, because it would leave two keys (new one and the old one) for rotated principal. There's no way how to get rid of the old key once you start rolling-over with --keepold.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,415,2018-09-13T08:18:49Z,2018-12-31T20:17:11Z,2018-12-31T20:17:33Z,MERGED,True,376,29,21,https://github.com/bodik,kadmin selective prune of historic key for principal,1,['feature request'],https://github.com/heimdal/heimdal/pull/415,https://github.com/nicowilliams,5,https://github.com/heimdal/heimdal/pull/415#issuecomment-450183508,"Hello,
please consider and at least comment this PR.
In current implementation (without PR)


the old keys either stays in the database forever or are prunned
automagically based on max_lifetime (based on prune-key-history), but
only on cpw, and yet it left the old key in history forever.


Rotating krbtgt/ (or other principals) wihtout --keepold would disrupt
realm operations, eg. long computing grid jobs.


The added functionality:


can be used to prune historic keys from principal
history by selective kvno. The main usecase is rollover krbtgt/ principals
(self and crossrealms).


it should be backward compatible afaik despite new opcode
kadm_ops struct. During operation a 'modify' type is logged into iprop
journal but data already contains and ipro processes full key history (KEY_TL_DATA),
so even using patched kadmin --local on unpatched kadmind would work
as expected on the slaves.","@bodik We prune keys on every key change operation, not just cpw:
Functions calling this function: hdb_prune_keys

  File    Function                        Line
0 keys.c  hdb_add_current_keys_to_history 332 ret = hdb_prune_keys(context, entry);
1 get_s.c kadm5_s_get_principal           266 ret = hdb_prune_keys(context->context, &ent.entry);

Functions calling this function: hdb_add_current_keys_to_history

0 hdb-mitdb.c _hdb_mdb_value2entry              619 ret = hdb_add_current_keys_to_history(context, entry);
1 keys.c      hdb_change_kvno                   449 ret = hdb_add_current_keys_to_history(context, entry);
2 chpass_s.c  change                             75 ret = hdb_add_current_keys_to_history(context->context, &ent.entry);
3 chpass_s.c  kadm5_s_chpass_principal_with_key 228 ret = hdb_add_current_keys_to_history(context->context, &ent.entry);
4 randkey_s.c kadm5_s_randkey_principal          73 ret = hdb_add_current_keys_to_history(context->context, &ent.entry);
5 setkey3_s.c kadm5_s_setkey_principal_3         74 ret = hdb_add_current_keys_to_history(context->context, &ent.entry);

In fact, we prune key history on every cpw, randkey, and on any direct calls to kadm5_setkey_principal*().  We also do it when you change a principal's kvno because Heimdal allows you to add keys for a new kvno without taking them into effect (leaving the principal's current kvno alone).",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,415,2018-09-13T08:18:49Z,2018-12-31T20:17:11Z,2018-12-31T20:17:33Z,MERGED,True,376,29,21,https://github.com/bodik,kadmin selective prune of historic key for principal,1,['feature request'],https://github.com/heimdal/heimdal/pull/415,https://github.com/bodik,6,https://github.com/heimdal/heimdal/pull/415#issuecomment-450184725,"Hello,
please consider and at least comment this PR.
In current implementation (without PR)


the old keys either stays in the database forever or are prunned
automagically based on max_lifetime (based on prune-key-history), but
only on cpw, and yet it left the old key in history forever.


Rotating krbtgt/ (or other principals) wihtout --keepold would disrupt
realm operations, eg. long computing grid jobs.


The added functionality:


can be used to prune historic keys from principal
history by selective kvno. The main usecase is rollover krbtgt/ principals
(self and crossrealms).


it should be backward compatible afaik despite new opcode
kadm_ops struct. During operation a 'modify' type is logged into iprop
journal but data already contains and ipro processes full key history (KEY_TL_DATA),
so even using patched kadmin --local on unpatched kadmind would work
as expected on the slaves.","No, we prune keys on every key change operation, not just cpw:
0 hdb-mitdb.c _hdb_mdb_value2entry              619 ret = hdb_add_current_keys_to_history(context, entry);
1 keys.c      hdb_change_kvno                   449 ret = hdb_add_current_keys_to_history(context, entry);
2 chpass_s.c  change                             75 ret = hdb_add_current_keys_to_history(context->context, &ent.entry);
3 chpass_s.c  kadm5_s_chpass_principal_with_key 228 ret = hdb_add_current_keys_to_history(context->context, &ent.entry);
4 randkey_s.c kadm5_s_randkey_principal          73 ret = hdb_add_current_keys_to_history(context->context, &ent.entry);
5 setkey3_s.c kadm5_s_setkey_principal_3         74 ret = hdb_add_current_keys_to_history(context->context, &ent.entry);


well might be. but i see the rollover procedure as

generate new key to service keytab (done with ktutil)
cpw --keepold newkey to add new key to KDC
wait until all old tickets expires
?? what ops goes here to prune the old key ??",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,415,2018-09-13T08:18:49Z,2018-12-31T20:17:11Z,2018-12-31T20:17:33Z,MERGED,True,376,29,21,https://github.com/bodik,kadmin selective prune of historic key for principal,1,['feature request'],https://github.com/heimdal/heimdal/pull/415,https://github.com/nicowilliams,7,https://github.com/heimdal/heimdal/pull/415#issuecomment-450187091,"Hello,
please consider and at least comment this PR.
In current implementation (without PR)


the old keys either stays in the database forever or are prunned
automagically based on max_lifetime (based on prune-key-history), but
only on cpw, and yet it left the old key in history forever.


Rotating krbtgt/ (or other principals) wihtout --keepold would disrupt
realm operations, eg. long computing grid jobs.


The added functionality:


can be used to prune historic keys from principal
history by selective kvno. The main usecase is rollover krbtgt/ principals
(self and crossrealms).


it should be backward compatible afaik despite new opcode
kadm_ops struct. During operation a 'modify' type is logged into iprop
journal but data already contains and ipro processes full key history (KEY_TL_DATA),
so even using patched kadmin --local on unpatched kadmind would work
as expected on the slaves.","@bodik You just rotate keys weekly or whatever.  Yes, you'll generally have one old keyset you no longer need the KDC to know about.  But even then, if you want to prune that keyset, how would you know its kvno?  Why not just expose the current prune-old-keys operation and call that?  Then the procedure would be:

cpw/randkey --keepold newkey to add new key to KDC (this will prune some but not all old keys)
wait until all old tickets expires
prune (no kvno needed) (this will prune all remaining old keys)

For non-krbtgt principals we only need their keys for S4U2Proxy, so we can decrypt evidence tickets, but if a realm is not using S4U2Proxy or a service is known to not use it, then we can prune its key history more aggressively, in which case the sequence would be just (1).  (In principle even non-krbtgt tickets can be renewable/postdated; in practice no one has nor uses support for that in clients.)
Also, while we're here, your sequence has you generate keytab entries locally, then change them on the KDC.  Now that Heimdal lets you set new keys without changing the kvno, you could first set them on the KDC, then write them to the keytab, then update the kvno to make the new keyset active.  We are missing kadmin command options for this though!!",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,415,2018-09-13T08:18:49Z,2018-12-31T20:17:11Z,2018-12-31T20:17:33Z,MERGED,True,376,29,21,https://github.com/bodik,kadmin selective prune of historic key for principal,1,['feature request'],https://github.com/heimdal/heimdal/pull/415,https://github.com/nicowilliams,8,https://github.com/heimdal/heimdal/pull/415#issuecomment-450188779,"Hello,
please consider and at least comment this PR.
In current implementation (without PR)


the old keys either stays in the database forever or are prunned
automagically based on max_lifetime (based on prune-key-history), but
only on cpw, and yet it left the old key in history forever.


Rotating krbtgt/ (or other principals) wihtout --keepold would disrupt
realm operations, eg. long computing grid jobs.


The added functionality:


can be used to prune historic keys from principal
history by selective kvno. The main usecase is rollover krbtgt/ principals
(self and crossrealms).


it should be backward compatible afaik despite new opcode
kadm_ops struct. During operation a 'modify' type is logged into iprop
journal but data already contains and ipro processes full key history (KEY_TL_DATA),
so even using patched kadmin --local on unpatched kadmind would work
as expected on the slaves.",See also #480.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,415,2018-09-13T08:18:49Z,2018-12-31T20:17:11Z,2018-12-31T20:17:33Z,MERGED,True,376,29,21,https://github.com/bodik,kadmin selective prune of historic key for principal,1,['feature request'],https://github.com/heimdal/heimdal/pull/415,https://github.com/nicowilliams,9,https://github.com/heimdal/heimdal/pull/415#issuecomment-450211077,"Hello,
please consider and at least comment this PR.
In current implementation (without PR)


the old keys either stays in the database forever or are prunned
automagically based on max_lifetime (based on prune-key-history), but
only on cpw, and yet it left the old key in history forever.


Rotating krbtgt/ (or other principals) wihtout --keepold would disrupt
realm operations, eg. long computing grid jobs.


The added functionality:


can be used to prune historic keys from principal
history by selective kvno. The main usecase is rollover krbtgt/ principals
(self and crossrealms).


it should be backward compatible afaik despite new opcode
kadm_ops struct. During operation a 'modify' type is logged into iprop
journal but data already contains and ipro processes full key history (KEY_TL_DATA),
so even using patched kadmin --local on unpatched kadmind would work
as expected on the slaves.","@bodik I'm happy with this PR, but I've requested one change: that if kvno == 0 then you end up calling hdb_prune_keys().  That is a significant usability improvement.  Then users can:

cpw/randkey;
wait for old tickets to expire;
prune 0 (no need to look at the keytab to find out what kvnos to prune).",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,415,2018-09-13T08:18:49Z,2018-12-31T20:17:11Z,2018-12-31T20:17:33Z,MERGED,True,376,29,21,https://github.com/bodik,kadmin selective prune of historic key for principal,1,['feature request'],https://github.com/heimdal/heimdal/pull/415,https://github.com/nicowilliams,10,https://github.com/heimdal/heimdal/pull/415#issuecomment-450211331,"Hello,
please consider and at least comment this PR.
In current implementation (without PR)


the old keys either stays in the database forever or are prunned
automagically based on max_lifetime (based on prune-key-history), but
only on cpw, and yet it left the old key in history forever.


Rotating krbtgt/ (or other principals) wihtout --keepold would disrupt
realm operations, eg. long computing grid jobs.


The added functionality:


can be used to prune historic keys from principal
history by selective kvno. The main usecase is rollover krbtgt/ principals
(self and crossrealms).


it should be backward compatible afaik despite new opcode
kadm_ops struct. During operation a 'modify' type is logged into iprop
journal but data already contains and ipro processes full key history (KEY_TL_DATA),
so even using patched kadmin --local on unpatched kadmind would work
as expected on the slaves.",We'll integrate this for Heimdal 8.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,415,2018-09-13T08:18:49Z,2018-12-31T20:17:11Z,2018-12-31T20:17:33Z,MERGED,True,376,29,21,https://github.com/bodik,kadmin selective prune of historic key for principal,1,['feature request'],https://github.com/heimdal/heimdal/pull/415,https://github.com/nicowilliams,11,https://github.com/heimdal/heimdal/pull/415#issuecomment-450452378,"Hello,
please consider and at least comment this PR.
In current implementation (without PR)


the old keys either stays in the database forever or are prunned
automagically based on max_lifetime (based on prune-key-history), but
only on cpw, and yet it left the old key in history forever.


Rotating krbtgt/ (or other principals) wihtout --keepold would disrupt
realm operations, eg. long computing grid jobs.


The added functionality:


can be used to prune historic keys from principal
history by selective kvno. The main usecase is rollover krbtgt/ principals
(self and crossrealms).


it should be backward compatible afaik despite new opcode
kadm_ops struct. During operation a 'modify' type is logged into iprop
journal but data already contains and ipro processes full key history (KEY_TL_DATA),
so even using patched kadmin --local on unpatched kadmind would work
as expected on the slaves.","@bodik I've pushed some commits to your branch.
One merges hdb_prune_keys() and hdb_prune_keys_kvno(), and has a stub hdb_prune_keys() that calls hdb_prune_keys_kvno() (with kvno = 0) if the automatic key pruning feature is enabled.
Another renames all the prunekvno variables/arguments to just kvno.
Another one adds documentation.
Please review.  We should squash all of these and merge.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,415,2018-09-13T08:18:49Z,2018-12-31T20:17:11Z,2018-12-31T20:17:33Z,MERGED,True,376,29,21,https://github.com/bodik,kadmin selective prune of historic key for principal,1,['feature request'],https://github.com/heimdal/heimdal/pull/415,https://github.com/bodik,12,https://github.com/heimdal/heimdal/pull/415#issuecomment-450652475,"Hello,
please consider and at least comment this PR.
In current implementation (without PR)


the old keys either stays in the database forever or are prunned
automagically based on max_lifetime (based on prune-key-history), but
only on cpw, and yet it left the old key in history forever.


Rotating krbtgt/ (or other principals) wihtout --keepold would disrupt
realm operations, eg. long computing grid jobs.


The added functionality:


can be used to prune historic keys from principal
history by selective kvno. The main usecase is rollover krbtgt/ principals
(self and crossrealms).


it should be backward compatible afaik despite new opcode
kadm_ops struct. During operation a 'modify' type is logged into iprop
journal but data already contains and ipro processes full key history (KEY_TL_DATA),
so even using patched kadmin --local on unpatched kadmind would work
as expected on the slaves.","@bodik I've pushed some commits to your branch. ... Please review. We should squash all of these and merge.

@nicowilliams I've:


added two patches to make error handling in server and client as you requested. In the surrounding code there are not many examples so I tried to do my best. You have to review them and resolve corresponding conversations i've left open for you


I've refactored prunekvno to be optional argument of the prune command and tested that it works as expected (testsuite and manual testing done)


rebased onto current master and added krb5_enomem() usage on applicable places


once you review the changes I could squash commits and prepare branch for merging",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,415,2018-09-13T08:18:49Z,2018-12-31T20:17:11Z,2018-12-31T20:17:33Z,MERGED,True,376,29,21,https://github.com/bodik,kadmin selective prune of historic key for principal,1,['feature request'],https://github.com/heimdal/heimdal/pull/415,https://github.com/nicowilliams,13,https://github.com/heimdal/heimdal/pull/415#issuecomment-450683415,"Hello,
please consider and at least comment this PR.
In current implementation (without PR)


the old keys either stays in the database forever or are prunned
automagically based on max_lifetime (based on prune-key-history), but
only on cpw, and yet it left the old key in history forever.


Rotating krbtgt/ (or other principals) wihtout --keepold would disrupt
realm operations, eg. long computing grid jobs.


The added functionality:


can be used to prune historic keys from principal
history by selective kvno. The main usecase is rollover krbtgt/ principals
(self and crossrealms).


it should be backward compatible afaik despite new opcode
kadm_ops struct. During operation a 'modify' type is logged into iprop
journal but data already contains and ipro processes full key history (KEY_TL_DATA),
so even using patched kadmin --local on unpatched kadmind would work
as expected on the slaves.","@bodik I've pushed to your branch a) a rebase-and-squash, b) one more cleanup commit (just using if (ret == 0) ... style).  I'll squash that and push in an hour or so.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,415,2018-09-13T08:18:49Z,2018-12-31T20:17:11Z,2018-12-31T20:17:33Z,MERGED,True,376,29,21,https://github.com/bodik,kadmin selective prune of historic key for principal,1,['feature request'],https://github.com/heimdal/heimdal/pull/415,https://github.com/nicowilliams,14,https://github.com/heimdal/heimdal/pull/415#issuecomment-450686994,"Hello,
please consider and at least comment this PR.
In current implementation (without PR)


the old keys either stays in the database forever or are prunned
automagically based on max_lifetime (based on prune-key-history), but
only on cpw, and yet it left the old key in history forever.


Rotating krbtgt/ (or other principals) wihtout --keepold would disrupt
realm operations, eg. long computing grid jobs.


The added functionality:


can be used to prune historic keys from principal
history by selective kvno. The main usecase is rollover krbtgt/ principals
(self and crossrealms).


it should be backward compatible afaik despite new opcode
kadm_ops struct. During operation a 'modify' type is logged into iprop
journal but data already contains and ipro processes full key history (KEY_TL_DATA),
so even using patched kadmin --local on unpatched kadmind would work
as expected on the slaves.",Thanks @bodik!  This is a very nice contribution.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,418,2018-09-16T14:55:41Z,2018-09-17T19:51:02Z,2018-09-17T19:51:24Z,CLOSED,False,3,0,1,https://github.com/huaraz,Fix leaks in contexts ,3,[],https://github.com/heimdal/heimdal/pull/418,https://github.com/huaraz,1,https://github.com/heimdal/heimdal/pull/418,"There seem to be 2 type of leaks.
Not 100% sure if the free is the best option, but it seem to work.","There seem to be 2 type of leaks.
Not 100% sure if the free is the best option, but it seem to work.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,418,2018-09-16T14:55:41Z,2018-09-17T19:51:02Z,2018-09-17T19:51:24Z,CLOSED,False,3,0,1,https://github.com/huaraz,Fix leaks in contexts ,3,[],https://github.com/heimdal/heimdal/pull/418,https://github.com/huaraz,2,https://github.com/heimdal/heimdal/pull/418#issuecomment-422147209,"There seem to be 2 type of leaks.
Not 100% sure if the free is the best option, but it seem to work.",resubmitted new pull request,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,419,2018-09-17T19:47:35Z,2018-09-17T22:12:26Z,2018-09-17T22:12:26Z,MERGED,True,10,3,2,https://github.com/huaraz,Ntlm context leak,3,[],https://github.com/heimdal/heimdal/pull/419,https://github.com/huaraz,1,https://github.com/heimdal/heimdal/pull/419,free context etypes and ntlm ctx.,free context etypes and ntlm ctx.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,420,2018-09-17T22:12:37Z,2018-12-25T06:29:26Z,2018-12-25T06:29:26Z,MERGED,True,16,11,1,https://github.com/abartlet,Fix -O3 -Werror=unused-result build in dcache.c,3,[],https://github.com/heimdal/heimdal/pull/420,https://github.com/abartlet,1,https://github.com/heimdal/heimdal/pull/420,"gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.10)
with -O3 -Werror=unused-result
../lib/krb5/dcache.c:85:5: error: ignoring return value of ‘asprintf’, declared with attribute warn_unused_result [-Werror=unused-result]
asprintf(&path, ""%s/primary-XXXXXX"", dc->dir);
^
../lib/krb5/dcache.c: In function ‘primary_create’:
../lib/krb5/dcache.c:56:5: error: ignoring return value of ‘asprintf’, declared with attribute warn_unused_result [-Werror=unused-result]
asprintf(&primary, ""%s/primary"", dc->dir);
^
../lib/krb5/dcache.c: In function ‘dcc_gen_new’:
../lib/krb5/dcache.c:423:5: error: ignoring return value of ‘asprintf’, declared with attribute warn_unused_result [-Werror=unused-result]
asprintf(&name, "":%s/tktXXXXXX"", dc->dir);
^
../lib/krb5/dcache.c: In function ‘dcc_resolve’:
../lib/krb5/dcache.c:340:2: error: ignoring return value of ‘asprintf’, declared with attribute warn_unused_result [-Werror=unused-result]
asprintf(&dc->name, "":%s/%s"", dc->dir, residual);
^
../lib/krb5/dcache.c:348:5: error: ignoring return value of ‘asprintf’, declared with attribute warn_unused_result [-Werror=unused-result]
asprintf(&filename, ""FILE%s"", dc->name);
^
cc1: all warnings being treated as errors
Signed-off-by: Andrew Bartlett abartlet@samba.org","gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.10)
with -O3 -Werror=unused-result
../lib/krb5/dcache.c:85:5: error: ignoring return value of ‘asprintf’, declared with attribute warn_unused_result [-Werror=unused-result]
asprintf(&path, ""%s/primary-XXXXXX"", dc->dir);
^
../lib/krb5/dcache.c: In function ‘primary_create’:
../lib/krb5/dcache.c:56:5: error: ignoring return value of ‘asprintf’, declared with attribute warn_unused_result [-Werror=unused-result]
asprintf(&primary, ""%s/primary"", dc->dir);
^
../lib/krb5/dcache.c: In function ‘dcc_gen_new’:
../lib/krb5/dcache.c:423:5: error: ignoring return value of ‘asprintf’, declared with attribute warn_unused_result [-Werror=unused-result]
asprintf(&name, "":%s/tktXXXXXX"", dc->dir);
^
../lib/krb5/dcache.c: In function ‘dcc_resolve’:
../lib/krb5/dcache.c:340:2: error: ignoring return value of ‘asprintf’, declared with attribute warn_unused_result [-Werror=unused-result]
asprintf(&dc->name, "":%s/%s"", dc->dir, residual);
^
../lib/krb5/dcache.c:348:5: error: ignoring return value of ‘asprintf’, declared with attribute warn_unused_result [-Werror=unused-result]
asprintf(&filename, ""FILE%s"", dc->name);
^
cc1: all warnings being treated as errors
Signed-off-by: Andrew Bartlett abartlet@samba.org",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,420,2018-09-17T22:12:37Z,2018-12-25T06:29:26Z,2018-12-25T06:29:26Z,MERGED,True,16,11,1,https://github.com/abartlet,Fix -O3 -Werror=unused-result build in dcache.c,3,[],https://github.com/heimdal/heimdal/pull/420,https://github.com/abartlet,2,https://github.com/heimdal/heimdal/pull/420#issuecomment-423780521,"gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.10)
with -O3 -Werror=unused-result
../lib/krb5/dcache.c:85:5: error: ignoring return value of ‘asprintf’, declared with attribute warn_unused_result [-Werror=unused-result]
asprintf(&path, ""%s/primary-XXXXXX"", dc->dir);
^
../lib/krb5/dcache.c: In function ‘primary_create’:
../lib/krb5/dcache.c:56:5: error: ignoring return value of ‘asprintf’, declared with attribute warn_unused_result [-Werror=unused-result]
asprintf(&primary, ""%s/primary"", dc->dir);
^
../lib/krb5/dcache.c: In function ‘dcc_gen_new’:
../lib/krb5/dcache.c:423:5: error: ignoring return value of ‘asprintf’, declared with attribute warn_unused_result [-Werror=unused-result]
asprintf(&name, "":%s/tktXXXXXX"", dc->dir);
^
../lib/krb5/dcache.c: In function ‘dcc_resolve’:
../lib/krb5/dcache.c:340:2: error: ignoring return value of ‘asprintf’, declared with attribute warn_unused_result [-Werror=unused-result]
asprintf(&dc->name, "":%s/%s"", dc->dir, residual);
^
../lib/krb5/dcache.c:348:5: error: ignoring return value of ‘asprintf’, declared with attribute warn_unused_result [-Werror=unused-result]
asprintf(&filename, ""FILE%s"", dc->name);
^
cc1: all warnings being treated as errors
Signed-off-by: Andrew Bartlett abartlet@samba.org",Can this be merged please?,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,421,2018-09-18T01:31:36Z,2018-12-14T22:39:56Z,2018-12-14T22:39:57Z,MERGED,True,25,21,7,https://github.com/abartlet,Partial Python3 compatability,11,[],https://github.com/heimdal/heimdal/pull/421,https://github.com/abartlet,1,https://github.com/heimdal/heimdal/pull/421,"Samba aims to build with python3 in the near future, and this set of patches provides that support in the Heimdal code we have within our build system.","Samba aims to build with python3 in the near future, and this set of patches provides that support in the Heimdal code we have within our build system.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,421,2018-09-18T01:31:36Z,2018-12-14T22:39:56Z,2018-12-14T22:39:57Z,MERGED,True,25,21,7,https://github.com/abartlet,Partial Python3 compatability,11,[],https://github.com/heimdal/heimdal/pull/421,https://github.com/abartlet,2,https://github.com/heimdal/heimdal/pull/421#issuecomment-423780540,"Samba aims to build with python3 in the near future, and this set of patches provides that support in the Heimdal code we have within our build system.",Can this be merged please?,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,422,2018-09-18T21:46:32Z,2018-09-18T23:23:32Z,2018-09-18T23:23:55Z,MERGED,True,45,4,2,https://github.com/SimonWilkinson,Allow zero-length encrypt IOVs in _krb5_evp_encrypt_iov_cts(),1,[],https://github.com/heimdal/heimdal/pull/422,https://github.com/SimonWilkinson,1,https://github.com/heimdal/heimdal/pull/422,"The iovec encryption code doesn't handle 0 length iovecs correctly.
Instead of just skipping them, _krb5_evp_encrypt_iov_cts() will spin
on the 0 length iovec.
Modify the _krb5_evp_iov_cursor_expand helper so that iovec expansion
simply skips 0 length iovecs, and make _krb5_evp_iov_cursor_nextcrypt
do the same.
Original bug report and tests from Andrew Bartlett abartlet@samba.org","The iovec encryption code doesn't handle 0 length iovecs correctly.
Instead of just skipping them, _krb5_evp_encrypt_iov_cts() will spin
on the 0 length iovec.
Modify the _krb5_evp_iov_cursor_expand helper so that iovec expansion
simply skips 0 length iovecs, and make _krb5_evp_iov_cursor_nextcrypt
do the same.
Original bug report and tests from Andrew Bartlett abartlet@samba.org",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,422,2018-09-18T21:46:32Z,2018-09-18T23:23:32Z,2018-09-18T23:23:55Z,MERGED,True,45,4,2,https://github.com/SimonWilkinson,Allow zero-length encrypt IOVs in _krb5_evp_encrypt_iov_cts(),1,[],https://github.com/heimdal/heimdal/pull/422,https://github.com/abartlet,2,https://github.com/heimdal/heimdal/pull/422#issuecomment-422590050,"The iovec encryption code doesn't handle 0 length iovecs correctly.
Instead of just skipping them, _krb5_evp_encrypt_iov_cts() will spin
on the 0 length iovec.
Modify the _krb5_evp_iov_cursor_expand helper so that iovec expansion
simply skips 0 length iovecs, and make _krb5_evp_iov_cursor_nextcrypt
do the same.
Original bug report and tests from Andrew Bartlett abartlet@samba.org","I've confirmed this also passes Samba's tests when imported into Samba.
Thanks!
Would you like me to merge it?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,423,2018-09-19T02:00:44Z,2018-12-25T22:57:56Z,2018-12-26T00:40:47Z,MERGED,True,426,296,23,https://github.com/jaltman,lib/kadm5: improve kadm_c_ error handling,2,[],https://github.com/heimdal/heimdal/pull/423,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/423,"Perform error checking for each function call and consistently return
errors at the point of failure.
Refactor functions to use a common exit path.  Preserve error messages
stored in the kadm5_client_context.context when appropriate.
Change-Id: I7aa04020e4de3454066f0d88ba805fed999dbd1a","Perform error checking for each function call and consistently return
errors at the point of failure.
Refactor functions to use a common exit path.  Preserve error messages
stored in the kadm5_client_context.context when appropriate.
Change-Id: I7aa04020e4de3454066f0d88ba805fed999dbd1a",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,423,2018-09-19T02:00:44Z,2018-12-25T22:57:56Z,2018-12-26T00:40:47Z,MERGED,True,426,296,23,https://github.com/jaltman,lib/kadm5: improve kadm_c_ error handling,2,[],https://github.com/heimdal/heimdal/pull/423,https://github.com/jaltman,2,https://github.com/heimdal/heimdal/pull/423#issuecomment-422926151,"Perform error checking for each function call and consistently return
errors at the point of failure.
Refactor functions to use a common exit path.  Preserve error messages
stored in the kadm5_client_context.context when appropriate.
Change-Id: I7aa04020e4de3454066f0d88ba805fed999dbd1a",This patch has been sitting in my dev tree for quite some time and was never quite finished.   Thanks for taking a look.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,423,2018-09-19T02:00:44Z,2018-12-25T22:57:56Z,2018-12-26T00:40:47Z,MERGED,True,426,296,23,https://github.com/jaltman,lib/kadm5: improve kadm_c_ error handling,2,[],https://github.com/heimdal/heimdal/pull/423,https://github.com/vdukhovni,3,https://github.com/heimdal/heimdal/pull/423#issuecomment-423293701,"Perform error checking for each function call and consistently return
errors at the point of failure.
Refactor functions to use a common exit path.  Preserve error messages
stored in the kadm5_client_context.context when appropriate.
Change-Id: I7aa04020e4de3454066f0d88ba805fed999dbd1a",@jaltman will you be posting a revised update for review?,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,423,2018-09-19T02:00:44Z,2018-12-25T22:57:56Z,2018-12-26T00:40:47Z,MERGED,True,426,296,23,https://github.com/jaltman,lib/kadm5: improve kadm_c_ error handling,2,[],https://github.com/heimdal/heimdal/pull/423,https://github.com/jaltman,4,https://github.com/heimdal/heimdal/pull/423#issuecomment-449753321,"Perform error checking for each function call and consistently return
errors at the point of failure.
Refactor functions to use a common exit path.  Preserve error messages
stored in the kadm5_client_context.context when appropriate.
Change-Id: I7aa04020e4de3454066f0d88ba805fed999dbd1a",I've left the if (ret) goto out; style because it avoids unnecessary comparisons.   I've removed the unnecessary double assignments and corrected the krb5_storage leaks.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,423,2018-09-19T02:00:44Z,2018-12-25T22:57:56Z,2018-12-26T00:40:47Z,MERGED,True,426,296,23,https://github.com/jaltman,lib/kadm5: improve kadm_c_ error handling,2,[],https://github.com/heimdal/heimdal/pull/423,https://github.com/jaltman,5,https://github.com/heimdal/heimdal/pull/423#issuecomment-449762127,"Perform error checking for each function call and consistently return
errors at the point of failure.
Refactor functions to use a common exit path.  Preserve error messages
stored in the kadm5_client_context.context when appropriate.
Change-Id: I7aa04020e4de3454066f0d88ba805fed999dbd1a",@nicowilliams I will push a separate commit with the krb5_enomem() change since that is broader than just the locations I modified.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,423,2018-09-19T02:00:44Z,2018-12-25T22:57:56Z,2018-12-26T00:40:47Z,MERGED,True,426,296,23,https://github.com/jaltman,lib/kadm5: improve kadm_c_ error handling,2,[],https://github.com/heimdal/heimdal/pull/423,https://github.com/nicowilliams,6,https://github.com/heimdal/heimdal/pull/423#issuecomment-449877990,"Perform error checking for each function call and consistently return
errors at the point of failure.
Refactor functions to use a common exit path.  Preserve error messages
stored in the kadm5_client_context.context when appropriate.
Change-Id: I7aa04020e4de3454066f0d88ba805fed999dbd1a",Thanks for the krb5_enomem() changes.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,423,2018-09-19T02:00:44Z,2018-12-25T22:57:56Z,2018-12-26T00:40:47Z,MERGED,True,426,296,23,https://github.com/jaltman,lib/kadm5: improve kadm_c_ error handling,2,[],https://github.com/heimdal/heimdal/pull/423,https://github.com/jaltman,7,https://github.com/heimdal/heimdal/pull/423#issuecomment-449881819,"Perform error checking for each function call and consistently return
errors at the point of failure.
Refactor functions to use a common exit path.  Preserve error messages
stored in the kadm5_client_context.context when appropriate.
Change-Id: I7aa04020e4de3454066f0d88ba805fed999dbd1a",I only updated the lib/kadm5 directory.  The same conversion cod be performed one directory at a time.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,424,2018-09-19T02:27:23Z,2018-12-14T22:38:44Z,2018-12-15T04:17:43Z,MERGED,True,3,0,1,https://github.com/abartlet,lib/krb5: Do not re-send the AS-REQ if fast was disabled,1,[],https://github.com/heimdal/heimdal/pull/424,https://github.com/abartlet,1,https://github.com/heimdal/heimdal/pull/424,"Without this, in an AS-REQ that has no local key for FAST
we would send the AS-REQ again, which can bump the bad
password count on the KDC twice.
So only try again if FAST was actually tried.
Signed-off-by: Andrew Bartlett abartlet@samba.org","Without this, in an AS-REQ that has no local key for FAST
we would send the AS-REQ again, which can bump the bad
password count on the KDC twice.
So only try again if FAST was actually tried.
Signed-off-by: Andrew Bartlett abartlet@samba.org",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,424,2018-09-19T02:27:23Z,2018-12-14T22:38:44Z,2018-12-15T04:17:43Z,MERGED,True,3,0,1,https://github.com/abartlet,lib/krb5: Do not re-send the AS-REQ if fast was disabled,1,[],https://github.com/heimdal/heimdal/pull/424,https://github.com/abartlet,2,https://github.com/heimdal/heimdal/pull/424#issuecomment-423780502,"Without this, in an AS-REQ that has no local key for FAST
we would send the AS-REQ again, which can bump the bad
password count on the KDC twice.
So only try again if FAST was actually tried.
Signed-off-by: Andrew Bartlett abartlet@samba.org","Can this patch be merged?  Otherwise Samba's bad password count tests fail as Kerberos sends bad passwords twice as often compared to the user input.
Thanks,
Andrew Bartlett",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,425,2018-09-19T03:46:44Z,2018-09-19T04:30:43Z,2018-09-19T04:30:50Z,MERGED,True,18,2,1,https://github.com/jaltman,roken: gettimeofday using GetSystemTimePreciseAsFileTime,1,[],https://github.com/heimdal/heimdal/pull/425,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/425,"GetSystemTimeAsFileTime() has 16ms precision.
GetSystemTimePreciseAsFileTime() has <1ns precision but is only available
on Windows 8 or later.
This change dynamically loads GetSystemTimePreciseAsFileTime() if it is
available.
Change-Id: Ib9c616c01948384e6b256ac9b6023f1e39673613","GetSystemTimeAsFileTime() has 16ms precision.
GetSystemTimePreciseAsFileTime() has <1ns precision but is only available
on Windows 8 or later.
This change dynamically loads GetSystemTimePreciseAsFileTime() if it is
available.
Change-Id: Ib9c616c01948384e6b256ac9b6023f1e39673613",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,426,2018-09-22T14:29:35Z,2018-09-22T17:25:01Z,2018-09-22T17:36:58Z,MERGED,True,4,1,1,https://github.com/kaduk,Clear DES key (schedule) in unwrap BAD_MIC case,1,[],https://github.com/heimdal/heimdal/pull/426,https://github.com/kaduk,1,https://github.com/heimdal/heimdal/pull/426,"We generally clear out the cryptographic key and key schedule from
local variables before relinquishing control flow, but this case was
missed.  Reported by jhb@FreeBSD.org.","We generally clear out the cryptographic key and key schedule from
local variables before relinquishing control flow, but this case was
missed.  Reported by jhb@FreeBSD.org.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,426,2018-09-22T14:29:35Z,2018-09-22T17:25:01Z,2018-09-22T17:36:58Z,MERGED,True,4,1,1,https://github.com/kaduk,Clear DES key (schedule) in unwrap BAD_MIC case,1,[],https://github.com/heimdal/heimdal/pull/426,https://github.com/jaltman,2,https://github.com/heimdal/heimdal/pull/426#issuecomment-423759929,"We generally clear out the cryptographic key and key schedule from
local variables before relinquishing control flow, but this case was
missed.  Reported by jhb@FreeBSD.org.",Thank you.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,428,2018-09-26T19:53:00Z,2018-12-23T07:54:34Z,2018-12-23T07:54:35Z,CLOSED,False,233,0,2,https://github.com/jaltman,lib/kadm5: kadmin hook_libraries plugin interface,1,[],https://github.com/heimdal/heimdal/pull/428,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/428,"This change adds plugin support to the kadmin libraries for performing
actions before and after a password change is committed to the KDC database
and after a change is made to the attributes of a principal (specifically,
a change to DISALLOW_ALL_TIX).
This change adds a hook_libraries configuration option to the [kadmin]
section of krb5.conf (or kdc.conf if you use that file) that must be set
to load the module.  That configuration option is in the form:
[kadmin]
  hook_libraries = /usr/local/lib/krb5/plugins/kadm5_hook/krb5_sync.so

where the value is the full path to the plugin that you want to load.  If
this option is not present, kadmind will not load a plugin and the changes
from the patch will be inactive.  If this option is given and the plugin
cannot be loaded, kadmind startup will abort with a (hopefully useful)
error message in syslog.
Any plugin used with this patch must expose a public struct named
kadm5_hook.  That struct must contain the following:
typedef struct kadm5_hook {
    const char *name;
    int version;
    const char *vendor;

    krb5_error_code (*init)(krb5_context, void **);
    void (*fini)(krb5_context, void *);

    krb5_error_code (*chpass)(krb5_context, void *, enum kadm5_hook_stage,
                              krb5_principal, const char *);
    krb5_error_code (*create)(krb5_context, void *, enum kadm5_hook_stage,
                              kadm5_principal_ent_t, uint32_t mask,
                              const char *password);
    krb5_error_code (*modify)(krb5_context, void *, enum kadm5_hook_stage,
                              kadm5_principal_ent_t, uint32_t mask);
} kadm5_hook;

where enum kadm5_hook_stage is:
enum kadm5_hook_stage {
    KADM5_HOOK_STAGE_PRECOMMIT,
    KADM5_HOOK_STAGE_POSTCOMMIT
};

init creates a hook context that is passed into all subsequent calls.
chpass is called for password changes, create is called for principal
creation (with the newly-created principal in the kadm5_principal_ent_t
argument), and modify is called when a principal is modified.
These functions should follow the normal Kerberos calling convention of
returning 0 on success and a Kerberos error code on failure, setting the
Kerberos error message in the provided context.
This change is submitted under the following license
Copyright 2012, 2013
The Board of Trustees of the Leland Stanford Junior University
Copying and distribution of this file, with or without modification, are
permitted in any medium without royalty provided the copyright notice and
this notice are preserved.  This file is offered as-is, without any
warranty.
Change-Id: Iebf2c0ac5767f79fe72cc4a1c74521f3cb790d12","This change adds plugin support to the kadmin libraries for performing
actions before and after a password change is committed to the KDC database
and after a change is made to the attributes of a principal (specifically,
a change to DISALLOW_ALL_TIX).
This change adds a hook_libraries configuration option to the [kadmin]
section of krb5.conf (or kdc.conf if you use that file) that must be set
to load the module.  That configuration option is in the form:
[kadmin]
  hook_libraries = /usr/local/lib/krb5/plugins/kadm5_hook/krb5_sync.so

where the value is the full path to the plugin that you want to load.  If
this option is not present, kadmind will not load a plugin and the changes
from the patch will be inactive.  If this option is given and the plugin
cannot be loaded, kadmind startup will abort with a (hopefully useful)
error message in syslog.
Any plugin used with this patch must expose a public struct named
kadm5_hook.  That struct must contain the following:
typedef struct kadm5_hook {
    const char *name;
    int version;
    const char *vendor;

    krb5_error_code (*init)(krb5_context, void **);
    void (*fini)(krb5_context, void *);

    krb5_error_code (*chpass)(krb5_context, void *, enum kadm5_hook_stage,
                              krb5_principal, const char *);
    krb5_error_code (*create)(krb5_context, void *, enum kadm5_hook_stage,
                              kadm5_principal_ent_t, uint32_t mask,
                              const char *password);
    krb5_error_code (*modify)(krb5_context, void *, enum kadm5_hook_stage,
                              kadm5_principal_ent_t, uint32_t mask);
} kadm5_hook;

where enum kadm5_hook_stage is:
enum kadm5_hook_stage {
    KADM5_HOOK_STAGE_PRECOMMIT,
    KADM5_HOOK_STAGE_POSTCOMMIT
};

init creates a hook context that is passed into all subsequent calls.
chpass is called for password changes, create is called for principal
creation (with the newly-created principal in the kadm5_principal_ent_t
argument), and modify is called when a principal is modified.
These functions should follow the normal Kerberos calling convention of
returning 0 on success and a Kerberos error code on failure, setting the
Kerberos error message in the provided context.
This change is submitted under the following license
Copyright 2012, 2013
The Board of Trustees of the Leland Stanford Junior University
Copying and distribution of this file, with or without modification, are
permitted in any medium without royalty provided the copyright notice and
this notice are preserved.  This file is offered as-is, without any
warranty.
Change-Id: Iebf2c0ac5767f79fe72cc4a1c74521f3cb790d12",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,428,2018-09-26T19:53:00Z,2018-12-23T07:54:34Z,2018-12-23T07:54:35Z,CLOSED,False,233,0,2,https://github.com/jaltman,lib/kadm5: kadmin hook_libraries plugin interface,1,[],https://github.com/heimdal/heimdal/pull/428,https://github.com/jaltman,2,https://github.com/heimdal/heimdal/pull/428#issuecomment-424848860,"This change adds plugin support to the kadmin libraries for performing
actions before and after a password change is committed to the KDC database
and after a change is made to the attributes of a principal (specifically,
a change to DISALLOW_ALL_TIX).
This change adds a hook_libraries configuration option to the [kadmin]
section of krb5.conf (or kdc.conf if you use that file) that must be set
to load the module.  That configuration option is in the form:
[kadmin]
  hook_libraries = /usr/local/lib/krb5/plugins/kadm5_hook/krb5_sync.so

where the value is the full path to the plugin that you want to load.  If
this option is not present, kadmind will not load a plugin and the changes
from the patch will be inactive.  If this option is given and the plugin
cannot be loaded, kadmind startup will abort with a (hopefully useful)
error message in syslog.
Any plugin used with this patch must expose a public struct named
kadm5_hook.  That struct must contain the following:
typedef struct kadm5_hook {
    const char *name;
    int version;
    const char *vendor;

    krb5_error_code (*init)(krb5_context, void **);
    void (*fini)(krb5_context, void *);

    krb5_error_code (*chpass)(krb5_context, void *, enum kadm5_hook_stage,
                              krb5_principal, const char *);
    krb5_error_code (*create)(krb5_context, void *, enum kadm5_hook_stage,
                              kadm5_principal_ent_t, uint32_t mask,
                              const char *password);
    krb5_error_code (*modify)(krb5_context, void *, enum kadm5_hook_stage,
                              kadm5_principal_ent_t, uint32_t mask);
} kadm5_hook;

where enum kadm5_hook_stage is:
enum kadm5_hook_stage {
    KADM5_HOOK_STAGE_PRECOMMIT,
    KADM5_HOOK_STAGE_POSTCOMMIT
};

init creates a hook context that is passed into all subsequent calls.
chpass is called for password changes, create is called for principal
creation (with the newly-created principal in the kadm5_principal_ent_t
argument), and modify is called when a principal is modified.
These functions should follow the normal Kerberos calling convention of
returning 0 on success and a Kerberos error code on failure, setting the
Kerberos error message in the provided context.
This change is submitted under the following license
Copyright 2012, 2013
The Board of Trustees of the Leland Stanford Junior University
Copying and distribution of this file, with or without modification, are
permitted in any medium without royalty provided the copyright notice and
this notice are preserved.  This file is offered as-is, without any
warranty.
Change-Id: Iebf2c0ac5767f79fe72cc4a1c74521f3cb790d12",The patch was obtained from heimdal/krb5-sync@63780e8,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,428,2018-09-26T19:53:00Z,2018-12-23T07:54:34Z,2018-12-23T07:54:35Z,CLOSED,False,233,0,2,https://github.com/jaltman,lib/kadm5: kadmin hook_libraries plugin interface,1,[],https://github.com/heimdal/heimdal/pull/428,https://github.com/jaltman,3,https://github.com/heimdal/heimdal/pull/428#issuecomment-447301327,"This change adds plugin support to the kadmin libraries for performing
actions before and after a password change is committed to the KDC database
and after a change is made to the attributes of a principal (specifically,
a change to DISALLOW_ALL_TIX).
This change adds a hook_libraries configuration option to the [kadmin]
section of krb5.conf (or kdc.conf if you use that file) that must be set
to load the module.  That configuration option is in the form:
[kadmin]
  hook_libraries = /usr/local/lib/krb5/plugins/kadm5_hook/krb5_sync.so

where the value is the full path to the plugin that you want to load.  If
this option is not present, kadmind will not load a plugin and the changes
from the patch will be inactive.  If this option is given and the plugin
cannot be loaded, kadmind startup will abort with a (hopefully useful)
error message in syslog.
Any plugin used with this patch must expose a public struct named
kadm5_hook.  That struct must contain the following:
typedef struct kadm5_hook {
    const char *name;
    int version;
    const char *vendor;

    krb5_error_code (*init)(krb5_context, void **);
    void (*fini)(krb5_context, void *);

    krb5_error_code (*chpass)(krb5_context, void *, enum kadm5_hook_stage,
                              krb5_principal, const char *);
    krb5_error_code (*create)(krb5_context, void *, enum kadm5_hook_stage,
                              kadm5_principal_ent_t, uint32_t mask,
                              const char *password);
    krb5_error_code (*modify)(krb5_context, void *, enum kadm5_hook_stage,
                              kadm5_principal_ent_t, uint32_t mask);
} kadm5_hook;

where enum kadm5_hook_stage is:
enum kadm5_hook_stage {
    KADM5_HOOK_STAGE_PRECOMMIT,
    KADM5_HOOK_STAGE_POSTCOMMIT
};

init creates a hook context that is passed into all subsequent calls.
chpass is called for password changes, create is called for principal
creation (with the newly-created principal in the kadm5_principal_ent_t
argument), and modify is called when a principal is modified.
These functions should follow the normal Kerberos calling convention of
returning 0 on success and a Kerberos error code on failure, setting the
Kerberos error message in the provided context.
This change is submitted under the following license
Copyright 2012, 2013
The Board of Trustees of the Leland Stanford Junior University
Copying and distribution of this file, with or without modification, are
permitted in any medium without royalty provided the copyright notice and
this notice are preserved.  This file is offered as-is, without any
warranty.
Change-Id: Iebf2c0ac5767f79fe72cc4a1c74521f3cb790d12",@lhoward @nicowilliams @vdukhovni please review,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,428,2018-09-26T19:53:00Z,2018-12-23T07:54:34Z,2018-12-23T07:54:35Z,CLOSED,False,233,0,2,https://github.com/jaltman,lib/kadm5: kadmin hook_libraries plugin interface,1,[],https://github.com/heimdal/heimdal/pull/428,https://github.com/lhoward,4,https://github.com/heimdal/heimdal/pull/428#issuecomment-449619203,"This change adds plugin support to the kadmin libraries for performing
actions before and after a password change is committed to the KDC database
and after a change is made to the attributes of a principal (specifically,
a change to DISALLOW_ALL_TIX).
This change adds a hook_libraries configuration option to the [kadmin]
section of krb5.conf (or kdc.conf if you use that file) that must be set
to load the module.  That configuration option is in the form:
[kadmin]
  hook_libraries = /usr/local/lib/krb5/plugins/kadm5_hook/krb5_sync.so

where the value is the full path to the plugin that you want to load.  If
this option is not present, kadmind will not load a plugin and the changes
from the patch will be inactive.  If this option is given and the plugin
cannot be loaded, kadmind startup will abort with a (hopefully useful)
error message in syslog.
Any plugin used with this patch must expose a public struct named
kadm5_hook.  That struct must contain the following:
typedef struct kadm5_hook {
    const char *name;
    int version;
    const char *vendor;

    krb5_error_code (*init)(krb5_context, void **);
    void (*fini)(krb5_context, void *);

    krb5_error_code (*chpass)(krb5_context, void *, enum kadm5_hook_stage,
                              krb5_principal, const char *);
    krb5_error_code (*create)(krb5_context, void *, enum kadm5_hook_stage,
                              kadm5_principal_ent_t, uint32_t mask,
                              const char *password);
    krb5_error_code (*modify)(krb5_context, void *, enum kadm5_hook_stage,
                              kadm5_principal_ent_t, uint32_t mask);
} kadm5_hook;

where enum kadm5_hook_stage is:
enum kadm5_hook_stage {
    KADM5_HOOK_STAGE_PRECOMMIT,
    KADM5_HOOK_STAGE_POSTCOMMIT
};

init creates a hook context that is passed into all subsequent calls.
chpass is called for password changes, create is called for principal
creation (with the newly-created principal in the kadm5_principal_ent_t
argument), and modify is called when a principal is modified.
These functions should follow the normal Kerberos calling convention of
returning 0 on success and a Kerberos error code on failure, setting the
Kerberos error message in the provided context.
This change is submitted under the following license
Copyright 2012, 2013
The Board of Trustees of the Leland Stanford Junior University
Copying and distribution of this file, with or without modification, are
permitted in any medium without royalty provided the copyright notice and
this notice are preserved.  This file is offered as-is, without any
warranty.
Change-Id: Iebf2c0ac5767f79fe72cc4a1c74521f3cb790d12",I'm confused how this compiles when kadm5_hook_context is defined nowhere?,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,428,2018-09-26T19:53:00Z,2018-12-23T07:54:34Z,2018-12-23T07:54:35Z,CLOSED,False,233,0,2,https://github.com/jaltman,lib/kadm5: kadmin hook_libraries plugin interface,1,[],https://github.com/heimdal/heimdal/pull/428,https://github.com/lhoward,5,https://github.com/heimdal/heimdal/pull/428#issuecomment-449619314,"This change adds plugin support to the kadmin libraries for performing
actions before and after a password change is committed to the KDC database
and after a change is made to the attributes of a principal (specifically,
a change to DISALLOW_ALL_TIX).
This change adds a hook_libraries configuration option to the [kadmin]
section of krb5.conf (or kdc.conf if you use that file) that must be set
to load the module.  That configuration option is in the form:
[kadmin]
  hook_libraries = /usr/local/lib/krb5/plugins/kadm5_hook/krb5_sync.so

where the value is the full path to the plugin that you want to load.  If
this option is not present, kadmind will not load a plugin and the changes
from the patch will be inactive.  If this option is given and the plugin
cannot be loaded, kadmind startup will abort with a (hopefully useful)
error message in syslog.
Any plugin used with this patch must expose a public struct named
kadm5_hook.  That struct must contain the following:
typedef struct kadm5_hook {
    const char *name;
    int version;
    const char *vendor;

    krb5_error_code (*init)(krb5_context, void **);
    void (*fini)(krb5_context, void *);

    krb5_error_code (*chpass)(krb5_context, void *, enum kadm5_hook_stage,
                              krb5_principal, const char *);
    krb5_error_code (*create)(krb5_context, void *, enum kadm5_hook_stage,
                              kadm5_principal_ent_t, uint32_t mask,
                              const char *password);
    krb5_error_code (*modify)(krb5_context, void *, enum kadm5_hook_stage,
                              kadm5_principal_ent_t, uint32_t mask);
} kadm5_hook;

where enum kadm5_hook_stage is:
enum kadm5_hook_stage {
    KADM5_HOOK_STAGE_PRECOMMIT,
    KADM5_HOOK_STAGE_POSTCOMMIT
};

init creates a hook context that is passed into all subsequent calls.
chpass is called for password changes, create is called for principal
creation (with the newly-created principal in the kadm5_principal_ent_t
argument), and modify is called when a principal is modified.
These functions should follow the normal Kerberos calling convention of
returning 0 on success and a Kerberos error code on failure, setting the
Kerberos error message in the provided context.
This change is submitted under the following license
Copyright 2012, 2013
The Board of Trustees of the Leland Stanford Junior University
Copying and distribution of this file, with or without modification, are
permitted in any medium without royalty provided the copyright notice and
this notice are preserved.  This file is offered as-is, without any
warranty.
Change-Id: Iebf2c0ac5767f79fe72cc4a1c74521f3cb790d12",Shall I just look at krb5-sync/patches/heimdal-7.4.0?,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,428,2018-09-26T19:53:00Z,2018-12-23T07:54:34Z,2018-12-23T07:54:35Z,CLOSED,False,233,0,2,https://github.com/jaltman,lib/kadm5: kadmin hook_libraries plugin interface,1,[],https://github.com/heimdal/heimdal/pull/428,https://github.com/nicowilliams,6,https://github.com/heimdal/heimdal/pull/428#issuecomment-449619810,"This change adds plugin support to the kadmin libraries for performing
actions before and after a password change is committed to the KDC database
and after a change is made to the attributes of a principal (specifically,
a change to DISALLOW_ALL_TIX).
This change adds a hook_libraries configuration option to the [kadmin]
section of krb5.conf (or kdc.conf if you use that file) that must be set
to load the module.  That configuration option is in the form:
[kadmin]
  hook_libraries = /usr/local/lib/krb5/plugins/kadm5_hook/krb5_sync.so

where the value is the full path to the plugin that you want to load.  If
this option is not present, kadmind will not load a plugin and the changes
from the patch will be inactive.  If this option is given and the plugin
cannot be loaded, kadmind startup will abort with a (hopefully useful)
error message in syslog.
Any plugin used with this patch must expose a public struct named
kadm5_hook.  That struct must contain the following:
typedef struct kadm5_hook {
    const char *name;
    int version;
    const char *vendor;

    krb5_error_code (*init)(krb5_context, void **);
    void (*fini)(krb5_context, void *);

    krb5_error_code (*chpass)(krb5_context, void *, enum kadm5_hook_stage,
                              krb5_principal, const char *);
    krb5_error_code (*create)(krb5_context, void *, enum kadm5_hook_stage,
                              kadm5_principal_ent_t, uint32_t mask,
                              const char *password);
    krb5_error_code (*modify)(krb5_context, void *, enum kadm5_hook_stage,
                              kadm5_principal_ent_t, uint32_t mask);
} kadm5_hook;

where enum kadm5_hook_stage is:
enum kadm5_hook_stage {
    KADM5_HOOK_STAGE_PRECOMMIT,
    KADM5_HOOK_STAGE_POSTCOMMIT
};

init creates a hook context that is passed into all subsequent calls.
chpass is called for password changes, create is called for principal
creation (with the newly-created principal in the kadm5_principal_ent_t
argument), and modify is called when a principal is modified.
These functions should follow the normal Kerberos calling convention of
returning 0 on success and a Kerberos error code on failure, setting the
Kerberos error message in the provided context.
This change is submitted under the following license
Copyright 2012, 2013
The Board of Trustees of the Leland Stanford Junior University
Copying and distribution of this file, with or without modification, are
permitted in any medium without royalty provided the copyright notice and
this notice are preserved.  This file is offered as-is, without any
warranty.
Change-Id: Iebf2c0ac5767f79fe72cc4a1c74521f3cb790d12","@lhoward It doesn't build at all.  It's not even being built.  These are two new files, but the build system doesn't know of them...",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,428,2018-09-26T19:53:00Z,2018-12-23T07:54:34Z,2018-12-23T07:54:35Z,CLOSED,False,233,0,2,https://github.com/jaltman,lib/kadm5: kadmin hook_libraries plugin interface,1,[],https://github.com/heimdal/heimdal/pull/428,https://github.com/lhoward,7,https://github.com/heimdal/heimdal/pull/428#issuecomment-449620456,"This change adds plugin support to the kadmin libraries for performing
actions before and after a password change is committed to the KDC database
and after a change is made to the attributes of a principal (specifically,
a change to DISALLOW_ALL_TIX).
This change adds a hook_libraries configuration option to the [kadmin]
section of krb5.conf (or kdc.conf if you use that file) that must be set
to load the module.  That configuration option is in the form:
[kadmin]
  hook_libraries = /usr/local/lib/krb5/plugins/kadm5_hook/krb5_sync.so

where the value is the full path to the plugin that you want to load.  If
this option is not present, kadmind will not load a plugin and the changes
from the patch will be inactive.  If this option is given and the plugin
cannot be loaded, kadmind startup will abort with a (hopefully useful)
error message in syslog.
Any plugin used with this patch must expose a public struct named
kadm5_hook.  That struct must contain the following:
typedef struct kadm5_hook {
    const char *name;
    int version;
    const char *vendor;

    krb5_error_code (*init)(krb5_context, void **);
    void (*fini)(krb5_context, void *);

    krb5_error_code (*chpass)(krb5_context, void *, enum kadm5_hook_stage,
                              krb5_principal, const char *);
    krb5_error_code (*create)(krb5_context, void *, enum kadm5_hook_stage,
                              kadm5_principal_ent_t, uint32_t mask,
                              const char *password);
    krb5_error_code (*modify)(krb5_context, void *, enum kadm5_hook_stage,
                              kadm5_principal_ent_t, uint32_t mask);
} kadm5_hook;

where enum kadm5_hook_stage is:
enum kadm5_hook_stage {
    KADM5_HOOK_STAGE_PRECOMMIT,
    KADM5_HOOK_STAGE_POSTCOMMIT
};

init creates a hook context that is passed into all subsequent calls.
chpass is called for password changes, create is called for principal
creation (with the newly-created principal in the kadm5_principal_ent_t
argument), and modify is called when a principal is modified.
These functions should follow the normal Kerberos calling convention of
returning 0 on success and a Kerberos error code on failure, setting the
Kerberos error message in the provided context.
This change is submitted under the following license
Copyright 2012, 2013
The Board of Trustees of the Leland Stanford Junior University
Copying and distribution of this file, with or without modification, are
permitted in any medium without royalty provided the copyright notice and
this notice are preserved.  This file is offered as-is, without any
warranty.
Change-Id: Iebf2c0ac5767f79fe72cc4a1c74521f3cb790d12","OK, I'm going to do this in a new pull request. Will reuse commit message.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,429,2018-10-03T02:41:46Z,2018-12-14T11:18:27Z,2018-12-14T11:18:27Z,MERGED,True,1,1,1,https://github.com/kaduk,GSS unwrap: wipe copy of DES key when done with it,1,[],https://github.com/heimdal/heimdal/pull/429,https://github.com/kaduk,1,https://github.com/heimdal/heimdal/pull/429,"Zero out the DES_cblock structure instead of the (not yet used at this point
in the function) key schedule.  The contents could potentially be left
on the stack in the case of an error return from _gssapi_verify_pad().","Zero out the DES_cblock structure instead of the (not yet used at this point
in the function) key schedule.  The contents could potentially be left
on the stack in the case of an error return from _gssapi_verify_pad().",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,430,2018-10-03T15:18:37Z,2018-10-04T00:03:04Z,2018-10-04T00:03:23Z,MERGED,True,1,0,1,https://github.com/fihuer,hdb-mitdb: Commit 57f1545a broke support of REQUIRES_PWCHANGE during MIT DB imports,1,[],https://github.com/heimdal/heimdal/pull/430,https://github.com/fihuer,1,https://github.com/heimdal/heimdal/pull/430,"Hi,
Here's a small patch to repair some changes made in 57f1545. It seems like a line has been mistakenly deleted.
Cheers,
Romain","Hi,
Here's a small patch to repair some changes made in 57f1545. It seems like a line has been mistakenly deleted.
Cheers,
Romain",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,430,2018-10-03T15:18:37Z,2018-10-04T00:03:04Z,2018-10-04T00:03:23Z,MERGED,True,1,0,1,https://github.com/fihuer,hdb-mitdb: Commit 57f1545a broke support of REQUIRES_PWCHANGE during MIT DB imports,1,[],https://github.com/heimdal/heimdal/pull/430,https://github.com/jaltman,2,https://github.com/heimdal/heimdal/pull/430#issuecomment-426842509,"Hi,
Here's a small patch to repair some changes made in 57f1545. It seems like a line has been mistakenly deleted.
Cheers,
Romain",@fihuer thank you,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,433,2018-10-05T06:31:09Z,2018-12-14T22:36:23Z,2018-12-20T09:41:35Z,CLOSED,False,3,0,1,https://github.com/yasuoka,Fix a memory leak in spnego acceptor_start().,1,[],https://github.com/heimdal/heimdal/pull/433,https://github.com/yasuoka,1,https://github.com/heimdal/heimdal/pull/433,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,433,2018-10-05T06:31:09Z,2018-12-14T22:36:23Z,2018-12-20T09:41:35Z,CLOSED,False,3,0,1,https://github.com/yasuoka,Fix a memory leak in spnego acceptor_start().,1,[],https://github.com/heimdal/heimdal/pull/433,https://github.com/yasuoka,2,https://github.com/heimdal/heimdal/pull/433#issuecomment-429764229,,Previous commit had not fixed the problem.  I pushed updated commit.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,433,2018-10-05T06:31:09Z,2018-12-14T22:36:23Z,2018-12-20T09:41:35Z,CLOSED,False,3,0,1,https://github.com/yasuoka,Fix a memory leak in spnego acceptor_start().,1,[],https://github.com/heimdal/heimdal/pull/433,https://github.com/nicowilliams,3,https://github.com/heimdal/heimdal/pull/433#issuecomment-447440705,,Did you actually observe a leak?,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,433,2018-10-05T06:31:09Z,2018-12-14T22:36:23Z,2018-12-20T09:41:35Z,CLOSED,False,3,0,1,https://github.com/yasuoka,Fix a memory leak in spnego acceptor_start().,1,[],https://github.com/heimdal/heimdal/pull/433,https://github.com/nicowilliams,4,https://github.com/heimdal/heimdal/pull/433#issuecomment-447441369,,"We should make gss_release_oid() do nothing -- it should never have existed.  gss_str_to_oid() should intern and its outputs never freed (except at library unload time, and arguably we should not support library unload).",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,433,2018-10-05T06:31:09Z,2018-12-14T22:36:23Z,2018-12-20T09:41:35Z,CLOSED,False,3,0,1,https://github.com/yasuoka,Fix a memory leak in spnego acceptor_start().,1,[],https://github.com/heimdal/heimdal/pull/433,https://github.com/nicowilliams,5,https://github.com/heimdal/heimdal/pull/433#issuecomment-447499510,,"We're going to close this and instead make sure that gss_release_oid() does nothing.  Heimdal doesn't offer gss_str_to_oid(), so that's good.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,433,2018-10-05T06:31:09Z,2018-12-14T22:36:23Z,2018-12-20T09:41:35Z,CLOSED,False,3,0,1,https://github.com/yasuoka,Fix a memory leak in spnego acceptor_start().,1,[],https://github.com/heimdal/heimdal/pull/433,https://github.com/yasuoka,6,https://github.com/heimdal/heimdal/pull/433#issuecomment-448935187,,"Did you actually observe a leak?

Yes, a leak actually happened.
Fixing the problem by #447 will make sense.  Thank for fixing the issue.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,434,2018-10-06T08:43:29Z,2018-12-14T22:31:43Z,2018-12-14T22:31:43Z,MERGED,True,0,1,1,https://github.com/yasuoka,Remove an extra line which uses a deleted command.,1,[],https://github.com/heimdal/heimdal/pull/434,https://github.com/yasuoka,1,https://github.com/heimdal/heimdal/pull/434,There is an extra line in tests/gss/check-context.in.  It uses a deleted command.,There is an extra line in tests/gss/check-context.in.  It uses a deleted command.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,434,2018-10-06T08:43:29Z,2018-12-14T22:31:43Z,2018-12-14T22:31:43Z,MERGED,True,0,1,1,https://github.com/yasuoka,Remove an extra line which uses a deleted command.,1,[],https://github.com/heimdal/heimdal/pull/434,https://github.com/jaltman,2,https://github.com/heimdal/heimdal/pull/434#issuecomment-427606093,There is an extra line in tests/gss/check-context.in.  It uses a deleted command.,If you can please reference in the commit message the change that removed the command.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,434,2018-10-06T08:43:29Z,2018-12-14T22:31:43Z,2018-12-14T22:31:43Z,MERGED,True,0,1,1,https://github.com/yasuoka,Remove an extra line which uses a deleted command.,1,[],https://github.com/heimdal/heimdal/pull/434,https://github.com/yasuoka,3,https://github.com/heimdal/heimdal/pull/434#issuecomment-428009232,There is an extra line in tests/gss/check-context.in.  It uses a deleted command.,Updated the comment.  I hope it becomes better.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,434,2018-10-06T08:43:29Z,2018-12-14T22:31:43Z,2018-12-14T22:31:43Z,MERGED,True,0,1,1,https://github.com/yasuoka,Remove an extra line which uses a deleted command.,1,[],https://github.com/heimdal/heimdal/pull/434,https://github.com/jaltman,4,https://github.com/heimdal/heimdal/pull/434#issuecomment-428012144,There is an extra line in tests/gss/check-context.in.  It uses a deleted command.,"@yasuoka, Thank you for updating the commit message.
However, I would like to understand when in the repository history resulted in ""klist"" no longer being available.   ""klist"" is supposed to be an alias for ""heimtools klist"".
@nicowilliams, was the addition of ""heimtools klist -c $cache"" in 95a2ba6 supposed to replace the ""klist -c $cache"" definition?
If so, I would like to see the commit message for this change say
Remove extraneous definition for ""klist"" that was supposed to be removed by 95a2ba6.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,434,2018-10-06T08:43:29Z,2018-12-14T22:31:43Z,2018-12-14T22:31:43Z,MERGED,True,0,1,1,https://github.com/yasuoka,Remove an extra line which uses a deleted command.,1,[],https://github.com/heimdal/heimdal/pull/434,https://github.com/yasuoka,5,https://github.com/heimdal/heimdal/pull/434#issuecomment-428033526,There is an extra line in tests/gss/check-context.in.  It uses a deleted command.,"92a827da9bddaf769724922b04b7f633d2eb0e67 does ""klist"" => ""kcc"" and then 2b365b2327e74f9d46de357c1724a878798903f7 does ""kcc"" => ""heimtool"".  ""klist"" still exists in ${bindir}, but it doesn't seem to exist in ${srcdir}/kuser any longer.
I noticed this problem since my first commit of #433 didn't pass tests/gss/check-context.
The commit had another problem which causes a check failure, but when I checked check-context.log:
./check-context[140]: ../../kuser/klist: not found

The script also has ""not found"" error.  Note that this doesn't cause a check failure because
    139 # gss_acquire_cred_with_password() must not have side-effects
    140 ${klist} && { eval ""$testfailed""; }

the test assumes that ""klist"" command will fail.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,436,2018-10-08T05:34:57Z,2018-10-08T12:46:38Z,2018-10-08T12:46:38Z,MERGED,True,2,2,2,https://github.com/cuihaoleo,"Correct ""princial"" typos.",1,[],https://github.com/heimdal/heimdal/pull/436,https://github.com/cuihaoleo,1,https://github.com/heimdal/heimdal/pull/436,"Should be ""principal"".","Should be ""principal"".",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,439,2018-11-12T18:11:04Z,2019-05-19T02:33:49Z,2019-05-20T10:24:07Z,MERGED,True,38,6,4,https://github.com/iboukris,kdc: allow checksum of PA-FOR-USER to be HMAC_MD5,1,[],https://github.com/heimdal/heimdal/pull/439,https://github.com/iboukris,1,https://github.com/heimdal/heimdal/pull/439,"even if tgt used an enctype with a different checksum.
Per [MS-SFU] 2.2.1 PA-FOR-USER the checksum is always
HMAC_MD5, and that's what Windows and MIT clients send.
In heimdal both the client and kdc use instead the
checksum of the tgt, and therefore work with each other
but windows and MIT clients fail against heimdal KDC.
Both Windows and MIT KDC would allow any keyed checksum
to be used so Heimdal client work fine against it.
Change Heimdal KDC to allow HMAC_MD5 even for non RC4
based tgt in order to support per-spec clients.","even if tgt used an enctype with a different checksum.
Per [MS-SFU] 2.2.1 PA-FOR-USER the checksum is always
HMAC_MD5, and that's what Windows and MIT clients send.
In heimdal both the client and kdc use instead the
checksum of the tgt, and therefore work with each other
but windows and MIT clients fail against heimdal KDC.
Both Windows and MIT KDC would allow any keyed checksum
to be used so Heimdal client work fine against it.
Change Heimdal KDC to allow HMAC_MD5 even for non RC4
based tgt in order to support per-spec clients.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,439,2018-11-12T18:11:04Z,2019-05-19T02:33:49Z,2019-05-20T10:24:07Z,MERGED,True,38,6,4,https://github.com/iboukris,kdc: allow checksum of PA-FOR-USER to be HMAC_MD5,1,[],https://github.com/heimdal/heimdal/pull/439,https://github.com/kaduk,2,https://github.com/heimdal/heimdal/pull/439#issuecomment-438151173,"even if tgt used an enctype with a different checksum.
Per [MS-SFU] 2.2.1 PA-FOR-USER the checksum is always
HMAC_MD5, and that's what Windows and MIT clients send.
In heimdal both the client and kdc use instead the
checksum of the tgt, and therefore work with each other
but windows and MIT clients fail against heimdal KDC.
Both Windows and MIT KDC would allow any keyed checksum
to be used so Heimdal client work fine against it.
Change Heimdal KDC to allow HMAC_MD5 even for non RC4
based tgt in order to support per-spec clients.","Note that RFC 8429 has deprecated HMAC_MD5 for kerberos.
The windows 7 behavior is less interesting in this regard than the behavior of a current windows environment.
(Do you know what version of the Windows KDC you checked the behavior of?)",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,439,2018-11-12T18:11:04Z,2019-05-19T02:33:49Z,2019-05-20T10:24:07Z,MERGED,True,38,6,4,https://github.com/iboukris,kdc: allow checksum of PA-FOR-USER to be HMAC_MD5,1,[],https://github.com/heimdal/heimdal/pull/439,https://github.com/iboukris,3,https://github.com/heimdal/heimdal/pull/439#issuecomment-438226759,"even if tgt used an enctype with a different checksum.
Per [MS-SFU] 2.2.1 PA-FOR-USER the checksum is always
HMAC_MD5, and that's what Windows and MIT clients send.
In heimdal both the client and kdc use instead the
checksum of the tgt, and therefore work with each other
but windows and MIT clients fail against heimdal KDC.
Both Windows and MIT KDC would allow any keyed checksum
to be used so Heimdal client work fine against it.
Change Heimdal KDC to allow HMAC_MD5 even for non RC4
based tgt in order to support per-spec clients.","The Windows KDC version is Windows 2008, I'll try to test on more modern version but the spec hasn't changed so I guess it would behave the same, see:
https://msdn.microsoft.com/en-us/library/cc246089.aspx
MIT client behavior is rather odd, it always sends hmac_md5 checksum, see:
https://github.com/krb5/krb5/blob/0b872730081f01d0d2b6f78675bb5c74604cef62/src/lib/krb5/krb/s4u_creds.c#L175
However when it gets the response, in case of AES enctype, it would ignore it and insist on finding PA_S4U_X509_USER which is an alternative padata to perform protocol transition (see verify_s4u2self_reply()).
Presumably, if we implement support for PA_S4U_X509_USER method in heimdal KDC both MIT and windows clients will practically work, using that padata.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,439,2018-11-12T18:11:04Z,2019-05-19T02:33:49Z,2019-05-20T10:24:07Z,MERGED,True,38,6,4,https://github.com/iboukris,kdc: allow checksum of PA-FOR-USER to be HMAC_MD5,1,[],https://github.com/heimdal/heimdal/pull/439,https://github.com/iboukris,4,https://github.com/heimdal/heimdal/pull/439#issuecomment-492389477,"even if tgt used an enctype with a different checksum.
Per [MS-SFU] 2.2.1 PA-FOR-USER the checksum is always
HMAC_MD5, and that's what Windows and MIT clients send.
In heimdal both the client and kdc use instead the
checksum of the tgt, and therefore work with each other
but windows and MIT clients fail against heimdal KDC.
Both Windows and MIT KDC would allow any keyed checksum
to be used so Heimdal client work fine against it.
Change Heimdal KDC to allow HMAC_MD5 even for non RC4
based tgt in order to support per-spec clients.",I closed this back then due to #555 as we found that bug while working on this issue. I need to think this issue again. Just re-opening for now.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,439,2018-11-12T18:11:04Z,2019-05-19T02:33:49Z,2019-05-20T10:24:07Z,MERGED,True,38,6,4,https://github.com/iboukris,kdc: allow checksum of PA-FOR-USER to be HMAC_MD5,1,[],https://github.com/heimdal/heimdal/pull/439,https://github.com/iboukris,5,https://github.com/heimdal/heimdal/pull/439#issuecomment-493209091,"even if tgt used an enctype with a different checksum.
Per [MS-SFU] 2.2.1 PA-FOR-USER the checksum is always
HMAC_MD5, and that's what Windows and MIT clients send.
In heimdal both the client and kdc use instead the
checksum of the tgt, and therefore work with each other
but windows and MIT clients fail against heimdal KDC.
Both Windows and MIT KDC would allow any keyed checksum
to be used so Heimdal client work fine against it.
Change Heimdal KDC to allow HMAC_MD5 even for non RC4
based tgt in order to support per-spec clients.","CC: @abartlet
I tested an updated Windows KDC and it now rejects unkeyed checksum with KRB_AP_ERR_MODIFIED. However, it still does not require the checksum to be HMAC_MD5 as per spec, which is nice as we don't have to change Heimdal client, and they'll still work against updated Windows.
I've updated the commit and simplified it a little, please take a look.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,439,2018-11-12T18:11:04Z,2019-05-19T02:33:49Z,2019-05-20T10:24:07Z,MERGED,True,38,6,4,https://github.com/iboukris,kdc: allow checksum of PA-FOR-USER to be HMAC_MD5,1,[],https://github.com/heimdal/heimdal/pull/439,https://github.com/iboukris,6,https://github.com/heimdal/heimdal/pull/439#issuecomment-493218298,"even if tgt used an enctype with a different checksum.
Per [MS-SFU] 2.2.1 PA-FOR-USER the checksum is always
HMAC_MD5, and that's what Windows and MIT clients send.
In heimdal both the client and kdc use instead the
checksum of the tgt, and therefore work with each other
but windows and MIT clients fail against heimdal KDC.
Both Windows and MIT KDC would allow any keyed checksum
to be used so Heimdal client work fine against it.
Change Heimdal KDC to allow HMAC_MD5 even for non RC4
based tgt in order to support per-spec clients.",I fixed the typo in the commit message.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,439,2018-11-12T18:11:04Z,2019-05-19T02:33:49Z,2019-05-20T10:24:07Z,MERGED,True,38,6,4,https://github.com/iboukris,kdc: allow checksum of PA-FOR-USER to be HMAC_MD5,1,[],https://github.com/heimdal/heimdal/pull/439,https://github.com/iboukris,7,https://github.com/heimdal/heimdal/pull/439#issuecomment-493692187,"even if tgt used an enctype with a different checksum.
Per [MS-SFU] 2.2.1 PA-FOR-USER the checksum is always
HMAC_MD5, and that's what Windows and MIT clients send.
In heimdal both the client and kdc use instead the
checksum of the tgt, and therefore work with each other
but windows and MIT clients fail against heimdal KDC.
Both Windows and MIT KDC would allow any keyed checksum
to be used so Heimdal client work fine against it.
Change Heimdal KDC to allow HMAC_MD5 even for non RC4
based tgt in order to support per-spec clients.",Updated commit message to mention that MIT KDC would also allow any keyed checksum (per code).,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,439,2018-11-12T18:11:04Z,2019-05-19T02:33:49Z,2019-05-20T10:24:07Z,MERGED,True,38,6,4,https://github.com/iboukris,kdc: allow checksum of PA-FOR-USER to be HMAC_MD5,1,[],https://github.com/heimdal/heimdal/pull/439,https://github.com/lhoward,8,https://github.com/heimdal/heimdal/pull/439#issuecomment-493720599,"even if tgt used an enctype with a different checksum.
Per [MS-SFU] 2.2.1 PA-FOR-USER the checksum is always
HMAC_MD5, and that's what Windows and MIT clients send.
In heimdal both the client and kdc use instead the
checksum of the tgt, and therefore work with each other
but windows and MIT clients fail against heimdal KDC.
Both Windows and MIT KDC would allow any keyed checksum
to be used so Heimdal client work fine against it.
Change Heimdal KDC to allow HMAC_MD5 even for non RC4
based tgt in order to support per-spec clients.","Updated commit message to mention that MIT KDC would also allow any keyed checksum (per code).

Yes, although git blame says that Sam committed that change, I think that comes from the Novell changes I made for XAD – I was careful about this particular issue ;)",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,439,2018-11-12T18:11:04Z,2019-05-19T02:33:49Z,2019-05-20T10:24:07Z,MERGED,True,38,6,4,https://github.com/iboukris,kdc: allow checksum of PA-FOR-USER to be HMAC_MD5,1,[],https://github.com/heimdal/heimdal/pull/439,https://github.com/jaltman,9,https://github.com/heimdal/heimdal/pull/439#issuecomment-493721740,"even if tgt used an enctype with a different checksum.
Per [MS-SFU] 2.2.1 PA-FOR-USER the checksum is always
HMAC_MD5, and that's what Windows and MIT clients send.
In heimdal both the client and kdc use instead the
checksum of the tgt, and therefore work with each other
but windows and MIT clients fail against heimdal KDC.
Both Windows and MIT KDC would allow any keyed checksum
to be used so Heimdal client work fine against it.
Change Heimdal KDC to allow HMAC_MD5 even for non RC4
based tgt in order to support per-spec clients.",@lhoward and I believe the change is correct but we wonder if this could be implemented without exporting _krb5_HMAC_MD5_checksum() but that can be implemented as a follow on commit.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,439,2018-11-12T18:11:04Z,2019-05-19T02:33:49Z,2019-05-20T10:24:07Z,MERGED,True,38,6,4,https://github.com/iboukris,kdc: allow checksum of PA-FOR-USER to be HMAC_MD5,1,[],https://github.com/heimdal/heimdal/pull/439,https://github.com/jaltman,10,https://github.com/heimdal/heimdal/pull/439#issuecomment-493761480,"even if tgt used an enctype with a different checksum.
Per [MS-SFU] 2.2.1 PA-FOR-USER the checksum is always
HMAC_MD5, and that's what Windows and MIT clients send.
In heimdal both the client and kdc use instead the
checksum of the tgt, and therefore work with each other
but windows and MIT clients fail against heimdal KDC.
Both Windows and MIT KDC would allow any keyed checksum
to be used so Heimdal client work fine against it.
Change Heimdal KDC to allow HMAC_MD5 even for non RC4
based tgt in order to support per-spec clients.",This change cannot be cherry-picked to heimdal-7-1-branch as is because of the implementation changes to _krb5_HMAC_MD5_checksum() as a result of ca756f0 and e50faea.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,439,2018-11-12T18:11:04Z,2019-05-19T02:33:49Z,2019-05-20T10:24:07Z,MERGED,True,38,6,4,https://github.com/iboukris,kdc: allow checksum of PA-FOR-USER to be HMAC_MD5,1,[],https://github.com/heimdal/heimdal/pull/439,https://github.com/iboukris,11,https://github.com/heimdal/heimdal/pull/439#issuecomment-493928178,"even if tgt used an enctype with a different checksum.
Per [MS-SFU] 2.2.1 PA-FOR-USER the checksum is always
HMAC_MD5, and that's what Windows and MIT clients send.
In heimdal both the client and kdc use instead the
checksum of the tgt, and therefore work with each other
but windows and MIT clients fail against heimdal KDC.
Both Windows and MIT KDC would allow any keyed checksum
to be used so Heimdal client work fine against it.
Change Heimdal KDC to allow HMAC_MD5 even for non RC4
based tgt in order to support per-spec clients.","My initial patch was against the old code (for samba).
I've ported back the commit for 7.1 branch in #576 if that's okay.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,442,2018-11-30T00:28:41Z,2018-12-14T22:30:15Z,2018-12-14T22:30:15Z,MERGED,True,11,11,7,https://github.com/ojwb,Fix assorted typos,1,[],https://github.com/heimdal/heimdal/pull/442,https://github.com/ojwb,1,https://github.com/heimdal/heimdal/pull/442,"There are some further uses of ""inital""/""initalize"" in changelog files and old NEWS entries which I left for now as some projects are reluctant to fix typos in such files.  Also some in lib/sqlite/ but that seems to be an embedded code copy.","There are some further uses of ""inital""/""initalize"" in changelog files and old NEWS entries which I left for now as some projects are reluctant to fix typos in such files.  Also some in lib/sqlite/ but that seems to be an embedded code copy.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,444,2018-12-09T19:09:07Z,2018-12-24T02:28:00Z,2018-12-24T02:28:00Z,CLOSED,False,9,5,5,https://github.com/dfranusic,Build system bugfixes,3,[],https://github.com/heimdal/heimdal/pull/444,https://github.com/dfranusic,1,https://github.com/heimdal/heimdal/pull/444,"Couple of build system fixes that should resolve some known issues on Gentoo and other distributions

Fixes #435 #398 #416","Couple of build system fixes that should resolve some known issues on Gentoo and other distributions

Fixes #435 #398 #416",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,444,2018-12-09T19:09:07Z,2018-12-24T02:28:00Z,2018-12-24T02:28:00Z,CLOSED,False,9,5,5,https://github.com/dfranusic,Build system bugfixes,3,[],https://github.com/heimdal/heimdal/pull/444,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/444#issuecomment-449621955,"Couple of build system fixes that should resolve some known issues on Gentoo and other distributions

Fixes #435 #398 #416",Ah yes I think I was running to this on Ubuntu,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,444,2018-12-09T19:09:07Z,2018-12-24T02:28:00Z,2018-12-24T02:28:00Z,CLOSED,False,9,5,5,https://github.com/dfranusic,Build system bugfixes,3,[],https://github.com/heimdal/heimdal/pull/444,https://github.com/lhoward,3,https://github.com/heimdal/heimdal/pull/444#issuecomment-449677409,"Couple of build system fixes that should resolve some known issues on Gentoo and other distributions

Fixes #435 #398 #416",I've cherry-picked the fixes @nicowilliams approved and will push shortly. Testing my other fix above now.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,444,2018-12-09T19:09:07Z,2018-12-24T02:28:00Z,2018-12-24T02:28:00Z,CLOSED,False,9,5,5,https://github.com/dfranusic,Build system bugfixes,3,[],https://github.com/heimdal/heimdal/pull/444,https://github.com/lhoward,4,https://github.com/heimdal/heimdal/pull/444#issuecomment-449677927,"Couple of build system fixes that should resolve some known issues on Gentoo and other distributions

Fixes #435 #398 #416",Pushed to master,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,448,2018-12-15T02:02:35Z,2018-12-18T22:51:13Z,2018-12-22T07:16:34Z,MERGED,True,15,0,1,https://github.com/lhoward,roken: Solaris auxval test fails (#441),1,[],https://github.com/heimdal/heimdal/pull/448,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/448,"The Solaris auxval test fails, because Solaris uses different preprocessor symbols (and numbers) for its UID and GID auxval types.
Note that issuid() could simply be an alias of issetugid() on Solaris, so perhaps this is not necessary.
@nicowilliams please review","The Solaris auxval test fails, because Solaris uses different preprocessor symbols (and numbers) for its UID and GID auxval types.
Note that issuid() could simply be an alias of issetugid() on Solaris, so perhaps this is not necessary.
@nicowilliams please review",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,449,2018-12-16T10:19:30Z,2018-12-20T01:44:06Z,2018-12-26T17:26:55Z,MERGED,True,1,1,1,https://github.com/abartlet,"PY3: fix ""TabError: inconsistent use of tabs and spaces""",1,[],https://github.com/heimdal/heimdal/pull/449,https://github.com/abartlet,1,https://github.com/heimdal/heimdal/pull/449,"From Samba
Python2 is EOL soon and Samba builds with python3 by default now so it would be helpful to have this merged upstream.","From Samba
Python2 is EOL soon and Samba builds with python3 by default now so it would be helpful to have this merged upstream.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,449,2018-12-16T10:19:30Z,2018-12-20T01:44:06Z,2018-12-26T17:26:55Z,MERGED,True,1,1,1,https://github.com/abartlet,"PY3: fix ""TabError: inconsistent use of tabs and spaces""",1,[],https://github.com/heimdal/heimdal/pull/449,https://github.com/jaltman,2,https://github.com/heimdal/heimdal/pull/449#issuecomment-449909454,"From Samba
Python2 is EOL soon and Samba builds with python3 by default now so it would be helpful to have this merged upstream.","@abartlet @noelpower  The python source file lib/wind/get-punycode-examples.py was not converted to Python3.  Could you please update it?
Thank you.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,449,2018-12-16T10:19:30Z,2018-12-20T01:44:06Z,2018-12-26T17:26:55Z,MERGED,True,1,1,1,https://github.com/abartlet,"PY3: fix ""TabError: inconsistent use of tabs and spaces""",1,[],https://github.com/heimdal/heimdal/pull/449,https://github.com/jaltman,3,https://github.com/heimdal/heimdal/pull/449#issuecomment-449997487,"From Samba
Python2 is EOL soon and Samba builds with python3 by default now so it would be helpful to have this merged upstream.",I've pushed proposed fixes for get-punycode-examples.py as #471,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,453,2018-12-17T16:38:57Z,2018-12-17T17:21:08Z,2018-12-17T17:21:08Z,MERGED,True,2,2,1,https://github.com/quanah,For issue#381,1,[],https://github.com/heimdal/heimdal/pull/453,https://github.com/quanah,1,https://github.com/heimdal/heimdal/pull/453,Fix output to be grammatically correct.,Fix output to be grammatically correct.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,454,2018-12-17T18:02:10Z,2018-12-18T19:12:47Z,2018-12-18T19:12:48Z,MERGED,True,6,5,6,https://github.com/dariaphoebe,Solaris 10,2,[],https://github.com/heimdal/heimdal/pull/454,https://github.com/dariaphoebe,1,https://github.com/heimdal/heimdal/pull/454,"Update with patch from @nicowilliams for makelist change, and add autoconf detection of flex --nounput option so we avoid warnings if it's available.","Update with patch from @nicowilliams for makelist change, and add autoconf detection of flex --nounput option so we avoid warnings if it's available.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,456,2018-12-18T05:05:32Z,2018-12-19T05:28:40Z,2018-12-19T05:28:50Z,MERGED,True,339,168,30,https://github.com/lhoward,gss: intern OIDs (#447),2,[],https://github.com/heimdal/heimdal/pull/456,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/456,Intern OIDs so that gss_release_oid() can be a NOOP. This implementation is not lockless – is that worth doing @nicowilliams?,Intern OIDs so that gss_release_oid() can be a NOOP. This implementation is not lockless – is that worth doing @nicowilliams?,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,456,2018-12-18T05:05:32Z,2018-12-19T05:28:40Z,2018-12-19T05:28:50Z,MERGED,True,339,168,30,https://github.com/lhoward,gss: intern OIDs (#447),2,[],https://github.com/heimdal/heimdal/pull/456,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/456#issuecomment-448335483,Intern OIDs so that gss_release_oid() can be a NOOP. This implementation is not lockless – is that worth doing @nicowilliams?,"I don't care if it's lockless, but I do care that it's thread-safe.
My preference would be that we also stop using gss_duplicate_oid(), which would mean never needing to take a lot to intern an OID in either gss_accept_sec_context() in the mechglue nor in SPNEGO.
There's two ways for those two functions to get a stable gss_OID value: either lookup the OID from the token in the gss_indicate_mechs() output and use the one found there, or call the indicated mechanism's accept_sec_context method and then extract the actual_mech OID and use that.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,456,2018-12-18T05:05:32Z,2018-12-19T05:28:40Z,2018-12-19T05:28:50Z,MERGED,True,339,168,30,https://github.com/lhoward,gss: intern OIDs (#447),2,[],https://github.com/heimdal/heimdal/pull/456,https://github.com/lhoward,3,https://github.com/heimdal/heimdal/pull/456#issuecomment-448387514,Intern OIDs so that gss_release_oid() can be a NOOP. This implementation is not lockless – is that worth doing @nicowilliams?,"I lost the thread at take a lot – can you clarify?
…
Sent from my iPhone
 On 19 Dec 2018, at 06:11, Nico Williams ***@***.***> wrote:

 My preference would be that we also stop using gss_duplicate_oid(), which would mean never needing to take a lot to intern an OID in either gss_accept_sec_context() in the mechglue nor in SPNEGO.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,456,2018-12-18T05:05:32Z,2018-12-19T05:28:40Z,2018-12-19T05:28:50Z,MERGED,True,339,168,30,https://github.com/lhoward,gss: intern OIDs (#447),2,[],https://github.com/heimdal/heimdal/pull/456,https://github.com/nicowilliams,4,https://github.com/heimdal/heimdal/pull/456#issuecomment-448393718,Intern OIDs so that gss_release_oid() can be a NOOP. This implementation is not lockless – is that worth doing @nicowilliams?,"@lhoward Ay, s/lot/lock/.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,456,2018-12-18T05:05:32Z,2018-12-19T05:28:40Z,2018-12-19T05:28:50Z,MERGED,True,339,168,30,https://github.com/lhoward,gss: intern OIDs (#447),2,[],https://github.com/heimdal/heimdal/pull/456,https://github.com/lhoward,5,https://github.com/heimdal/heimdal/pull/456#issuecomment-448395817,Intern OIDs so that gss_release_oid() can be a NOOP. This implementation is not lockless – is that worth doing @nicowilliams?,"Got it. I’ll check those paths when I get in; in the meantime, all the internal statically allocated OIDs are just in an array so interning those will never take a lock. So that’s the base case.

Current implementation has a bug as it’s only taking a lock on write, not read. Maybe I should implement it lockless, my concern is breaking portability to more obscure platforms.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,456,2018-12-18T05:05:32Z,2018-12-19T05:28:40Z,2018-12-19T05:28:50Z,MERGED,True,339,168,30,https://github.com/lhoward,gss: intern OIDs (#447),2,[],https://github.com/heimdal/heimdal/pull/456,https://github.com/nicowilliams,6,https://github.com/heimdal/heimdal/pull/456#issuecomment-448400532,Intern OIDs so that gss_release_oid() can be a NOOP. This implementation is not lockless – is that worth doing @nicowilliams?,If you only push onto the list head then you don't need a lock to read.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,456,2018-12-18T05:05:32Z,2018-12-19T05:28:40Z,2018-12-19T05:28:50Z,MERGED,True,339,168,30,https://github.com/lhoward,gss: intern OIDs (#447),2,[],https://github.com/heimdal/heimdal/pull/456,https://github.com/lhoward,7,https://github.com/heimdal/heimdal/pull/456#issuecomment-448400792,Intern OIDs so that gss_release_oid() can be a NOOP. This implementation is not lockless – is that worth doing @nicowilliams?,"Hmm, that’s what I did, but how do I know reads are atomic? (Sorry to derail this into concurrency 101)",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,456,2018-12-18T05:05:32Z,2018-12-19T05:28:40Z,2018-12-19T05:28:50Z,MERGED,True,339,168,30,https://github.com/lhoward,gss: intern OIDs (#447),2,[],https://github.com/heimdal/heimdal/pull/456,https://github.com/nicowilliams,8,https://github.com/heimdal/heimdal/pull/456#issuecomment-448402861,Intern OIDs so that gss_release_oid() can be a NOOP. This implementation is not lockless – is that worth doing @nicowilliams?,"The two calls to gss_duplicate_oid() are (from cscope, my trusty friend):
Functions calling this function: gss_duplicate_oid

  File                 Function    Line
0 accept_sec_context.c select_mech 362 ret = gss_duplicate_oid(minor_status,
1 compat.c             OM_uint32   310 ret = gss_duplicate_oid(minor_status, first_mech, preferred_mech);

With full paths:
lib/gssapi/spnego/accept_sec_context.c select_mech 362 ret = gss_duplicate_oid(minor_status,
lib/gssapi/spnego/compat.c OM_uint32 310 ret = gss_duplicate_oid(minor_status, first_mech, preferred_mech);

Oh, I lied earlier: both calls are in SPNEGO code.  Sorry I'd misread that...
If you look you'll see:
469 static OM_uint32 GSSAPI_CALLCONV
470 acceptor_start
471            (...
...
482            )
483 {
484     OM_uint32 ret, junk;
485     NegotiationToken nt;
486     size_t nt_len;
487     NegTokenInit *ni;
...
530     ni = &nt.u.negTokenInit;
...
540     ret = copy_MechTypeList(&ni->mechTypes, &ctx->initiator_mech_types);
...
548     /*
549      * First we try the opportunistic token if we have support for it,
550      * don't try to verify we have credential for the token,
551      * gss_accept_sec_context() will (hopefully) tell us that.
552      * If that failes,
553      */
554
555     ret = select_mech(minor_status,
556                       &ni->mechTypes.val[0],
557                       0,
558                       &preferred_mech_type);
...

then
312 static OM_uint32
313 select_mech(OM_uint32 *minor_status, MechType *mechType, int verify_p,
314             gss_OID *mech_p)
315 {
...
362     ret = gss_duplicate_oid(minor_status,
363                             &oid, /* possibly this should be oidp */
364                             mech_p);

So we're basically duplicating an OID from the NegTokenInit -- from the wire.  But it can only be any good if we already would find that same OID output by gss_indicate_mechs().  Sooooo, the fix to avoid using gss_duplicate_oid() is to just look for the OID we would have duplicated... in gss_indicate_mechs()'s output OID set and then use that gss_OID value.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,456,2018-12-18T05:05:32Z,2018-12-19T05:28:40Z,2018-12-19T05:28:50Z,MERGED,True,339,168,30,https://github.com/lhoward,gss: intern OIDs (#447),2,[],https://github.com/heimdal/heimdal/pull/456,https://github.com/nicowilliams,9,https://github.com/heimdal/heimdal/pull/456#issuecomment-448406066,Intern OIDs so that gss_release_oid() can be a NOOP. This implementation is not lockless – is that worth doing @nicowilliams?,"+       *mech_p = &mechs->elements[i];

is dereferencing the set (mechs) that was just released above....",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,456,2018-12-18T05:05:32Z,2018-12-19T05:28:40Z,2018-12-19T05:28:50Z,MERGED,True,339,168,30,https://github.com/lhoward,gss: intern OIDs (#447),2,[],https://github.com/heimdal/heimdal/pull/456,https://github.com/lhoward,10,https://github.com/heimdal/heimdal/pull/456#issuecomment-448406701,Intern OIDs so that gss_release_oid() can be a NOOP. This implementation is not lockless – is that worth doing @nicowilliams?,"Got that. But, actually, I don't think it works (after fixing time of use issue) because a gss_OID_set is not an array of pointers, it's an array of gss_OID_descs. So we can't return an inner pointer without leaking the containing array.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,456,2018-12-18T05:05:32Z,2018-12-19T05:28:40Z,2018-12-19T05:28:50Z,MERGED,True,339,168,30,https://github.com/lhoward,gss: intern OIDs (#447),2,[],https://github.com/heimdal/heimdal/pull/456,https://github.com/nicowilliams,11,https://github.com/heimdal/heimdal/pull/456#issuecomment-448409417,Intern OIDs so that gss_release_oid() can be a NOOP. This implementation is not lockless – is that worth doing @nicowilliams?,"Yeah, but it's just the elements you need from any OID indicated by gss_indicate_mechs() -- they're not going away.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,456,2018-12-18T05:05:32Z,2018-12-19T05:28:40Z,2018-12-19T05:28:50Z,MERGED,True,339,168,30,https://github.com/lhoward,gss: intern OIDs (#447),2,[],https://github.com/heimdal/heimdal/pull/456,https://github.com/lhoward,12,https://github.com/heimdal/heimdal/pull/456#issuecomment-448410085,Intern OIDs so that gss_release_oid() can be a NOOP. This implementation is not lockless – is that worth doing @nicowilliams?,"Not sure I follow – can you give me an example of returning a safe pointer to an element of a OID set, after the OID set has been released?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,456,2018-12-18T05:05:32Z,2018-12-19T05:28:40Z,2018-12-19T05:28:50Z,MERGED,True,339,168,30,https://github.com/lhoward,gss: intern OIDs (#447),2,[],https://github.com/heimdal/heimdal/pull/456,https://github.com/lhoward,13,https://github.com/heimdal/heimdal/pull/456#issuecomment-448410570,Intern OIDs so that gss_release_oid() can be a NOOP. This implementation is not lockless – is that worth doing @nicowilliams?,I think any solution is equivalent to an interned list :),True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,456,2018-12-18T05:05:32Z,2018-12-19T05:28:40Z,2018-12-19T05:28:50Z,MERGED,True,339,168,30,https://github.com/lhoward,gss: intern OIDs (#447),2,[],https://github.com/heimdal/heimdal/pull/456,https://github.com/lhoward,14,https://github.com/heimdal/heimdal/pull/456#issuecomment-448411017,Intern OIDs so that gss_release_oid() can be a NOOP. This implementation is not lockless – is that worth doing @nicowilliams?,I realize I may have been wrong in my earlier assessment about deep copies BTW.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,456,2018-12-18T05:05:32Z,2018-12-19T05:28:40Z,2018-12-19T05:28:50Z,MERGED,True,339,168,30,https://github.com/lhoward,gss: intern OIDs (#447),2,[],https://github.com/heimdal/heimdal/pull/456,https://github.com/nicowilliams,15,https://github.com/heimdal/heimdal/pull/456#issuecomment-448413104,Intern OIDs so that gss_release_oid() can be a NOOP. This implementation is not lockless – is that worth doing @nicowilliams?,Releasing an OID set does not release the member OIDs!  Just the OID set.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,456,2018-12-18T05:05:32Z,2018-12-19T05:28:40Z,2018-12-19T05:28:50Z,MERGED,True,339,168,30,https://github.com/lhoward,gss: intern OIDs (#447),2,[],https://github.com/heimdal/heimdal/pull/456,https://github.com/nicowilliams,16,https://github.com/heimdal/heimdal/pull/456#issuecomment-448413259,Intern OIDs so that gss_release_oid() can be a NOOP. This implementation is not lockless – is that worth doing @nicowilliams?,Would a skype chat help?,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,456,2018-12-18T05:05:32Z,2018-12-19T05:28:40Z,2018-12-19T05:28:50Z,MERGED,True,339,168,30,https://github.com/lhoward,gss: intern OIDs (#447),2,[],https://github.com/heimdal/heimdal/pull/456,https://github.com/nicowilliams,17,https://github.com/heimdal/heimdal/pull/456#issuecomment-448414504,Intern OIDs so that gss_release_oid() can be a NOOP. This implementation is not lockless – is that worth doing @nicowilliams?,"31 GSSAPI_LIB_FUNCTION OM_uint32 GSSAPI_LIB_CALL
 32 gss_release_oid_set(OM_uint32 *minor_status,
 33     gss_OID_set *set)
 34 {
 35
 36         *minor_status = 0;
 37         if (set && *set) {
 38                 if ((*set)->elements)
 39                         free((*set)->elements);
 40                 free(*set);
 41                 *set = GSS_C_NO_OID_SET;
 42         }
 43         return (GSS_S_COMPLETE);
 44 }

gss_release_oid_set() does not release the member OIDs, just the set.
Any OID indicated by gss_indicate_mechs(), or any other GSS function, is stable until the mechglue and mechanisms are unloaded.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,456,2018-12-18T05:05:32Z,2018-12-19T05:28:40Z,2018-12-19T05:28:50Z,MERGED,True,339,168,30,https://github.com/lhoward,gss: intern OIDs (#447),2,[],https://github.com/heimdal/heimdal/pull/456,https://github.com/lhoward,18,https://github.com/heimdal/heimdal/pull/456#issuecomment-448429588,Intern OIDs so that gss_release_oid() can be a NOOP. This implementation is not lockless – is that worth doing @nicowilliams?,"I thought likewise in my initial analysis but – look at the definitions, elements in gss_OID_set is actually an array of gss_OID_desc rather than gss_OID. So, true, the OID's elements itself can be returned, but we need to safely return a pointer to a gss_OID_desc. Who owns the storage for the gss_OID_desc we return? If it's an inner pointer to the gss_OID_set then, we need to leak; otherwise, interning is the way to go. (Obviously it would be different if, say, the returned mechanism signature in gss_accept_sec_context() was gss_OID_desc * rather than gss_OID *.)
Note: my brain may be creaky and I missing something important.
typedef struct gss_OID_desc_struct {
      OM_uint32 length;
      void      *elements;
} gss_OID_desc, *gss_OID;
typedef const gss_OID_desc * gss_const_OID;

typedef struct gss_OID_set_desc_struct  {
      size_t     count;
      gss_OID    elements; // === gss_OID_desc *elements
} gss_OID_set_desc, *gss_OID_set;
typedef const gss_OID_set_desc * gss_const_OID_set;",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,456,2018-12-18T05:05:32Z,2018-12-19T05:28:40Z,2018-12-19T05:28:50Z,MERGED,True,339,168,30,https://github.com/lhoward,gss: intern OIDs (#447),2,[],https://github.com/heimdal/heimdal/pull/456,https://github.com/nicowilliams,19,https://github.com/heimdal/heimdal/pull/456#issuecomment-448431917,Intern OIDs so that gss_release_oid() can be a NOOP. This implementation is not lockless – is that worth doing @nicowilliams?,"Oy, you're right.  Well, OK.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,456,2018-12-18T05:05:32Z,2018-12-19T05:28:40Z,2018-12-19T05:28:50Z,MERGED,True,339,168,30,https://github.com/lhoward,gss: intern OIDs (#447),2,[],https://github.com/heimdal/heimdal/pull/456,https://github.com/nicowilliams,20,https://github.com/heimdal/heimdal/pull/456#issuecomment-448432380,Intern OIDs so that gss_release_oid() can be a NOOP. This implementation is not lockless – is that worth doing @nicowilliams?,"There's still something we can do along the lines of what I was proposing: have a gss_OID_desc in the SPNEGO struct, fill in the elements of that from the OID in the indicated mechs, then return the pointer to that gss_OID_desc.  Anyways, interning is OK.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,456,2018-12-18T05:05:32Z,2018-12-19T05:28:40Z,2018-12-19T05:28:50Z,MERGED,True,339,168,30,https://github.com/lhoward,gss: intern OIDs (#447),2,[],https://github.com/heimdal/heimdal/pull/456,https://github.com/lhoward,21,https://github.com/heimdal/heimdal/pull/456#issuecomment-448444716,Intern OIDs so that gss_release_oid() can be a NOOP. This implementation is not lockless – is that worth doing @nicowilliams?,"Changed to lockless, please review",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,456,2018-12-18T05:05:32Z,2018-12-19T05:28:40Z,2018-12-19T05:28:50Z,MERGED,True,339,168,30,https://github.com/lhoward,gss: intern OIDs (#447),2,[],https://github.com/heimdal/heimdal/pull/456,https://github.com/lhoward,22,https://github.com/heimdal/heimdal/pull/456#issuecomment-448445576,Intern OIDs so that gss_release_oid() can be a NOOP. This implementation is not lockless – is that worth doing @nicowilliams?,"There's still something we can do along the lines of what I was proposing: have a gss_OID_desc in the SPNEGO struct, fill in the elements of that from the OID in the indicated mechs, then return the pointer to that gss_OID_desc. Anyways, interning is OK.

I figure let's just intern, as it saves memory (doesn't expand structure size) and it's lockless now.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,456,2018-12-18T05:05:32Z,2018-12-19T05:28:40Z,2018-12-19T05:28:50Z,MERGED,True,339,168,30,https://github.com/lhoward,gss: intern OIDs (#447),2,[],https://github.com/heimdal/heimdal/pull/456,https://github.com/lhoward,23,https://github.com/heimdal/heimdal/pull/456#issuecomment-448467880,Intern OIDs so that gss_release_oid() can be a NOOP. This implementation is not lockless – is that worth doing @nicowilliams?,"Whoops, need to #include heim_threads, thanks Nico.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,456,2018-12-18T05:05:32Z,2018-12-19T05:28:40Z,2018-12-19T05:28:50Z,MERGED,True,339,168,30,https://github.com/lhoward,gss: intern OIDs (#447),2,[],https://github.com/heimdal/heimdal/pull/456,https://github.com/nicowilliams,24,https://github.com/heimdal/heimdal/pull/456#issuecomment-448467999,Intern OIDs so that gss_release_oid() can be a NOOP. This implementation is not lockless – is that worth doing @nicowilliams?,"But for the minor build failure, this looks great to me.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,456,2018-12-18T05:05:32Z,2018-12-19T05:28:40Z,2018-12-19T05:28:50Z,MERGED,True,339,168,30,https://github.com/lhoward,gss: intern OIDs (#447),2,[],https://github.com/heimdal/heimdal/pull/456,https://github.com/lhoward,25,https://github.com/heimdal/heimdal/pull/456#issuecomment-448469400,Intern OIDs so that gss_release_oid() can be a NOOP. This implementation is not lockless – is that worth doing @nicowilliams?,"Actually the real problem was failing to include config.h, which meant it would've fallen back to a global mutex instead of atomic operations (unless config.h was already included). Whoops.",True,{'THUMBS_UP': ['https://github.com/nicowilliams']}
heimdal/heimdal,https://github.com/heimdal/heimdal,456,2018-12-18T05:05:32Z,2018-12-19T05:28:40Z,2018-12-19T05:28:50Z,MERGED,True,339,168,30,https://github.com/lhoward,gss: intern OIDs (#447),2,[],https://github.com/heimdal/heimdal/pull/456,https://github.com/nicowilliams,26,https://github.com/heimdal/heimdal/pull/456#issuecomment-448471896,Intern OIDs so that gss_release_oid() can be a NOOP. This implementation is not lockless – is that worth doing @nicowilliams?,I'll merge when the OS X Travis build completes.  That might be tomorrow :/,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,456,2018-12-18T05:05:32Z,2018-12-19T05:28:40Z,2018-12-19T05:28:50Z,MERGED,True,339,168,30,https://github.com/lhoward,gss: intern OIDs (#447),2,[],https://github.com/heimdal/heimdal/pull/456,https://github.com/nicowilliams,27,https://github.com/heimdal/heimdal/pull/456#issuecomment-448474204,Intern OIDs so that gss_release_oid() can be a NOOP. This implementation is not lockless – is that worth doing @nicowilliams?,Pushed.  Thanks!,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,457,2018-12-19T04:37:27Z,2018-12-20T06:59:19Z,2018-12-20T19:29:45Z,MERGED,True,15,1,1,https://github.com/lhoward,kdc: Support aliases for client principal initial ticket acquisition (#452),1,[],https://github.com/heimdal/heimdal/pull/457,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/457,"This patch implements ""hard"" aliases where to the client an aliased principal is indistinguishable from an unaliased one: it's not required to request name canonicalization and the client is returned the name it asked for. (Note: you need to create a TGS alias, too.)
I've made this a runtime configurable option in this initial implementation: I'm being careful not to change the name canonicalization (NC) behavior as I don't want to break Samba (cc @abartlet). IIRC Windows always sets NC flag in the AS-REQ, so perhaps I'm being needlessly cautious, however there are a couple of edge cases:

The MIT code always canonicalizes the client realm in the returned ticket (I recall implementing this based on observed Windows behavior). However, for hard aliases to work (where the client expects the client name not to change), we need to return the one the client requested.
The MIT code always only canonicalizes the server name if the client is asking for a TGT and the canonicalize flag is set. (Again, I remember implementing this based on observed Windows behavior.) This path is required to support NetBIOS names (e.g. krbtgt/SAMBA@SAMBA). For hard aliases (or generally in the case where NC is not set) we should return the server name the client requested.","This patch implements ""hard"" aliases where to the client an aliased principal is indistinguishable from an unaliased one: it's not required to request name canonicalization and the client is returned the name it asked for. (Note: you need to create a TGS alias, too.)
I've made this a runtime configurable option in this initial implementation: I'm being careful not to change the name canonicalization (NC) behavior as I don't want to break Samba (cc @abartlet). IIRC Windows always sets NC flag in the AS-REQ, so perhaps I'm being needlessly cautious, however there are a couple of edge cases:

The MIT code always canonicalizes the client realm in the returned ticket (I recall implementing this based on observed Windows behavior). However, for hard aliases to work (where the client expects the client name not to change), we need to return the one the client requested.
The MIT code always only canonicalizes the server name if the client is asking for a TGT and the canonicalize flag is set. (Again, I remember implementing this based on observed Windows behavior.) This path is required to support NetBIOS names (e.g. krbtgt/SAMBA@SAMBA). For hard aliases (or generally in the case where NC is not set) we should return the server name the client requested.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,457,2018-12-19T04:37:27Z,2018-12-20T06:59:19Z,2018-12-20T19:29:45Z,MERGED,True,15,1,1,https://github.com/lhoward,kdc: Support aliases for client principal initial ticket acquisition (#452),1,[],https://github.com/heimdal/heimdal/pull/457,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/457#issuecomment-448467465,"This patch implements ""hard"" aliases where to the client an aliased principal is indistinguishable from an unaliased one: it's not required to request name canonicalization and the client is returned the name it asked for. (Note: you need to create a TGS alias, too.)
I've made this a runtime configurable option in this initial implementation: I'm being careful not to change the name canonicalization (NC) behavior as I don't want to break Samba (cc @abartlet). IIRC Windows always sets NC flag in the AS-REQ, so perhaps I'm being needlessly cautious, however there are a couple of edge cases:

The MIT code always canonicalizes the client realm in the returned ticket (I recall implementing this based on observed Windows behavior). However, for hard aliases to work (where the client expects the client name not to change), we need to return the one the client requested.
The MIT code always only canonicalizes the server name if the client is asking for a TGT and the canonicalize flag is set. (Again, I remember implementing this based on observed Windows behavior.) This path is required to support NetBIOS names (e.g. krbtgt/SAMBA@SAMBA). For hard aliases (or generally in the case where NC is not set) we should return the server name the client requested.","OK, build/tests aren't passing, stay tuned.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,457,2018-12-19T04:37:27Z,2018-12-20T06:59:19Z,2018-12-20T19:29:45Z,MERGED,True,15,1,1,https://github.com/lhoward,kdc: Support aliases for client principal initial ticket acquisition (#452),1,[],https://github.com/heimdal/heimdal/pull/457,https://github.com/nicowilliams,3,https://github.com/heimdal/heimdal/pull/457#issuecomment-448468889,"This patch implements ""hard"" aliases where to the client an aliased principal is indistinguishable from an unaliased one: it's not required to request name canonicalization and the client is returned the name it asked for. (Note: you need to create a TGS alias, too.)
I've made this a runtime configurable option in this initial implementation: I'm being careful not to change the name canonicalization (NC) behavior as I don't want to break Samba (cc @abartlet). IIRC Windows always sets NC flag in the AS-REQ, so perhaps I'm being needlessly cautious, however there are a couple of edge cases:

The MIT code always canonicalizes the client realm in the returned ticket (I recall implementing this based on observed Windows behavior). However, for hard aliases to work (where the client expects the client name not to change), we need to return the one the client requested.
The MIT code always only canonicalizes the server name if the client is asking for a TGT and the canonicalize flag is set. (Again, I remember implementing this based on observed Windows behavior.) This path is required to support NetBIOS names (e.g. krbtgt/SAMBA@SAMBA). For hard aliases (or generally in the case where NC is not set) we should return the server name the client requested.","Why is this dangerous to turn on without a command-line option for the KDC?
I mean, surely no hard aliases exist now, especially out-of-realm ones.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,457,2018-12-19T04:37:27Z,2018-12-20T06:59:19Z,2018-12-20T19:29:45Z,MERGED,True,15,1,1,https://github.com/lhoward,kdc: Support aliases for client principal initial ticket acquisition (#452),1,[],https://github.com/heimdal/heimdal/pull/457,https://github.com/nicowilliams,4,https://github.com/heimdal/heimdal/pull/457#issuecomment-448469608,"This patch implements ""hard"" aliases where to the client an aliased principal is indistinguishable from an unaliased one: it's not required to request name canonicalization and the client is returned the name it asked for. (Note: you need to create a TGS alias, too.)
I've made this a runtime configurable option in this initial implementation: I'm being careful not to change the name canonicalization (NC) behavior as I don't want to break Samba (cc @abartlet). IIRC Windows always sets NC flag in the AS-REQ, so perhaps I'm being needlessly cautious, however there are a couple of edge cases:

The MIT code always canonicalizes the client realm in the returned ticket (I recall implementing this based on observed Windows behavior). However, for hard aliases to work (where the client expects the client name not to change), we need to return the one the client requested.
The MIT code always only canonicalizes the server name if the client is asking for a TGT and the canonicalize flag is set. (Again, I remember implementing this based on observed Windows behavior.) This path is required to support NetBIOS names (e.g. krbtgt/SAMBA@SAMBA). For hard aliases (or generally in the case where NC is not set) we should return the server name the client requested.","Regarding the krbtgt/REALM@REALM (we call this a ""starting"" TGT name)...  You could just create that for the alias realm, rather than alias the one for the canonical name.  Just sayin', that ought to work and then you don't need to add code for aliasing the realm.  It's just as well, since presumably during migration cross-realm TGTs will be needed between the two.
It's interesting, convenient, and necessary that they'll all be in the same HDB.  That's because kadmind doesn't really support multiple realms unless they are all in the same HDB.  IIRC.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,457,2018-12-19T04:37:27Z,2018-12-20T06:59:19Z,2018-12-20T19:29:45Z,MERGED,True,15,1,1,https://github.com/lhoward,kdc: Support aliases for client principal initial ticket acquisition (#452),1,[],https://github.com/heimdal/heimdal/pull/457,https://github.com/lhoward,5,https://github.com/heimdal/heimdal/pull/457#issuecomment-448470149,"This patch implements ""hard"" aliases where to the client an aliased principal is indistinguishable from an unaliased one: it's not required to request name canonicalization and the client is returned the name it asked for. (Note: you need to create a TGS alias, too.)
I've made this a runtime configurable option in this initial implementation: I'm being careful not to change the name canonicalization (NC) behavior as I don't want to break Samba (cc @abartlet). IIRC Windows always sets NC flag in the AS-REQ, so perhaps I'm being needlessly cautious, however there are a couple of edge cases:

The MIT code always canonicalizes the client realm in the returned ticket (I recall implementing this based on observed Windows behavior). However, for hard aliases to work (where the client expects the client name not to change), we need to return the one the client requested.
The MIT code always only canonicalizes the server name if the client is asking for a TGT and the canonicalize flag is set. (Again, I remember implementing this based on observed Windows behavior.) This path is required to support NetBIOS names (e.g. krbtgt/SAMBA@SAMBA). For hard aliases (or generally in the case where NC is not set) we should return the server name the client requested.","Why is this dangerous to turn on without a command-line option for the KDC?

It might be OK. Let me check [MS-KILE] and verify Windows always sets the NC flag.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,457,2018-12-19T04:37:27Z,2018-12-20T06:59:19Z,2018-12-20T19:29:45Z,MERGED,True,15,1,1,https://github.com/lhoward,kdc: Support aliases for client principal initial ticket acquisition (#452),1,[],https://github.com/heimdal/heimdal/pull/457,https://github.com/lhoward,6,https://github.com/heimdal/heimdal/pull/457#issuecomment-448476280,"This patch implements ""hard"" aliases where to the client an aliased principal is indistinguishable from an unaliased one: it's not required to request name canonicalization and the client is returned the name it asked for. (Note: you need to create a TGS alias, too.)
I've made this a runtime configurable option in this initial implementation: I'm being careful not to change the name canonicalization (NC) behavior as I don't want to break Samba (cc @abartlet). IIRC Windows always sets NC flag in the AS-REQ, so perhaps I'm being needlessly cautious, however there are a couple of edge cases:

The MIT code always canonicalizes the client realm in the returned ticket (I recall implementing this based on observed Windows behavior). However, for hard aliases to work (where the client expects the client name not to change), we need to return the one the client requested.
The MIT code always only canonicalizes the server name if the client is asking for a TGT and the canonicalize flag is set. (Again, I remember implementing this based on observed Windows behavior.) This path is required to support NetBIOS names (e.g. krbtgt/SAMBA@SAMBA). For hard aliases (or generally in the case where NC is not set) we should return the server name the client requested.","OK, I think it is safe to always enable (see revised patch). @abartlet please check this doesn't regress Samba DCs.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,457,2018-12-19T04:37:27Z,2018-12-20T06:59:19Z,2018-12-20T19:29:45Z,MERGED,True,15,1,1,https://github.com/lhoward,kdc: Support aliases for client principal initial ticket acquisition (#452),1,[],https://github.com/heimdal/heimdal/pull/457,https://github.com/lhoward,7,https://github.com/heimdal/heimdal/pull/457#issuecomment-448489019,"This patch implements ""hard"" aliases where to the client an aliased principal is indistinguishable from an unaliased one: it's not required to request name canonicalization and the client is returned the name it asked for. (Note: you need to create a TGS alias, too.)
I've made this a runtime configurable option in this initial implementation: I'm being careful not to change the name canonicalization (NC) behavior as I don't want to break Samba (cc @abartlet). IIRC Windows always sets NC flag in the AS-REQ, so perhaps I'm being needlessly cautious, however there are a couple of edge cases:

The MIT code always canonicalizes the client realm in the returned ticket (I recall implementing this based on observed Windows behavior). However, for hard aliases to work (where the client expects the client name not to change), we need to return the one the client requested.
The MIT code always only canonicalizes the server name if the client is asking for a TGT and the canonicalize flag is set. (Again, I remember implementing this based on observed Windows behavior.) This path is required to support NetBIOS names (e.g. krbtgt/SAMBA@SAMBA). For hard aliases (or generally in the case where NC is not set) we should return the server name the client requested.","Regarding the krbtgt/REALM@REALM (we call this a ""starting"" TGT name)... You could just create that for the alias realm, rather than alias the one for the canonical name. Just sayin', that ought to work and then you don't need to add code for aliasing the realm. It's just as well, since presumably during migration cross-realm TGTs will be needed between the two.
It's interesting, convenient, and necessary that they'll all be in the same HDB. That's because kadmind doesn't really support multiple realms unless they are all in the same HDB. IIRC.

The realm aliasing code was to avoid regressing with Windows, actually; there's no issue with hard aliases (the client gets what it asked for if the NC flag is unset). However I checked [MS-KILE] and the behavior now matches that, even though it's different to what I implemented for MIT. (The effect is more or less the same as far as Windows clients are concerned. My implementation for MIT predated the availability of [MS-KILE] and was based on observation rather than specification.)",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,457,2018-12-19T04:37:27Z,2018-12-20T06:59:19Z,2018-12-20T19:29:45Z,MERGED,True,15,1,1,https://github.com/lhoward,kdc: Support aliases for client principal initial ticket acquisition (#452),1,[],https://github.com/heimdal/heimdal/pull/457,https://github.com/lhoward,8,https://github.com/heimdal/heimdal/pull/457#issuecomment-448489820,"This patch implements ""hard"" aliases where to the client an aliased principal is indistinguishable from an unaliased one: it's not required to request name canonicalization and the client is returned the name it asked for. (Note: you need to create a TGS alias, too.)
I've made this a runtime configurable option in this initial implementation: I'm being careful not to change the name canonicalization (NC) behavior as I don't want to break Samba (cc @abartlet). IIRC Windows always sets NC flag in the AS-REQ, so perhaps I'm being needlessly cautious, however there are a couple of edge cases:

The MIT code always canonicalizes the client realm in the returned ticket (I recall implementing this based on observed Windows behavior). However, for hard aliases to work (where the client expects the client name not to change), we need to return the one the client requested.
The MIT code always only canonicalizes the server name if the client is asking for a TGT and the canonicalize flag is set. (Again, I remember implementing this based on observed Windows behavior.) This path is required to support NetBIOS names (e.g. krbtgt/SAMBA@SAMBA). For hard aliases (or generally in the case where NC is not set) we should return the server name the client requested.","Not sure why check-kadmin is failing on one of the Travis builds. Will investigate.
Edit: appears to have been a transient error.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,457,2018-12-19T04:37:27Z,2018-12-20T06:59:19Z,2018-12-20T19:29:45Z,MERGED,True,15,1,1,https://github.com/lhoward,kdc: Support aliases for client principal initial ticket acquisition (#452),1,[],https://github.com/heimdal/heimdal/pull/457,https://github.com/lhoward,9,https://github.com/heimdal/heimdal/pull/457#issuecomment-448491634,"This patch implements ""hard"" aliases where to the client an aliased principal is indistinguishable from an unaliased one: it's not required to request name canonicalization and the client is returned the name it asked for. (Note: you need to create a TGS alias, too.)
I've made this a runtime configurable option in this initial implementation: I'm being careful not to change the name canonicalization (NC) behavior as I don't want to break Samba (cc @abartlet). IIRC Windows always sets NC flag in the AS-REQ, so perhaps I'm being needlessly cautious, however there are a couple of edge cases:

The MIT code always canonicalizes the client realm in the returned ticket (I recall implementing this based on observed Windows behavior). However, for hard aliases to work (where the client expects the client name not to change), we need to return the one the client requested.
The MIT code always only canonicalizes the server name if the client is asking for a TGT and the canonicalize flag is set. (Again, I remember implementing this based on observed Windows behavior.) This path is required to support NetBIOS names (e.g. krbtgt/SAMBA@SAMBA). For hard aliases (or generally in the case where NC is not set) we should return the server name the client requested.","One issue now that HDB_F_CANON is always set for the client lookup, is that a backend database may return KDC_ERR_WRONG_REALM when the name canonicalization flag is unset (instead of KDC_ERR_C_PRINCIPAL_UNKNOWN). This may confuse some clients. I haven't yet taken a look at the Samba code to see if it honors this expected behavior.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,457,2018-12-19T04:37:27Z,2018-12-20T06:59:19Z,2018-12-20T19:29:45Z,MERGED,True,15,1,1,https://github.com/lhoward,kdc: Support aliases for client principal initial ticket acquisition (#452),1,[],https://github.com/heimdal/heimdal/pull/457,https://github.com/lhoward,10,https://github.com/heimdal/heimdal/pull/457#issuecomment-448492082,"This patch implements ""hard"" aliases where to the client an aliased principal is indistinguishable from an unaliased one: it's not required to request name canonicalization and the client is returned the name it asked for. (Note: you need to create a TGS alias, too.)
I've made this a runtime configurable option in this initial implementation: I'm being careful not to change the name canonicalization (NC) behavior as I don't want to break Samba (cc @abartlet). IIRC Windows always sets NC flag in the AS-REQ, so perhaps I'm being needlessly cautious, however there are a couple of edge cases:

The MIT code always canonicalizes the client realm in the returned ticket (I recall implementing this based on observed Windows behavior). However, for hard aliases to work (where the client expects the client name not to change), we need to return the one the client requested.
The MIT code always only canonicalizes the server name if the client is asking for a TGT and the canonicalize flag is set. (Again, I remember implementing this based on observed Windows behavior.) This path is required to support NetBIOS names (e.g. krbtgt/SAMBA@SAMBA). For hard aliases (or generally in the case where NC is not set) we should return the server name the client requested.","OK, a quick look at the Samba4 code suggests they don't check HDB_F_CANON anywhere. So they're not going to be impacted by this change in behavior. Phew! (I mean, that probably is a bug in Samba but... sounds like no one has run into it yet.)
Edit: actually we could fix this by never returning KDC_ERR_WRONG_REALM if the NC flag is unset. But I'm reluctant to change behavior not directly related to solving the problem at hand.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,457,2018-12-19T04:37:27Z,2018-12-20T06:59:19Z,2018-12-20T19:29:45Z,MERGED,True,15,1,1,https://github.com/lhoward,kdc: Support aliases for client principal initial ticket acquisition (#452),1,[],https://github.com/heimdal/heimdal/pull/457,https://github.com/nicowilliams,11,https://github.com/heimdal/heimdal/pull/457#issuecomment-448493563,"This patch implements ""hard"" aliases where to the client an aliased principal is indistinguishable from an unaliased one: it's not required to request name canonicalization and the client is returned the name it asked for. (Note: you need to create a TGS alias, too.)
I've made this a runtime configurable option in this initial implementation: I'm being careful not to change the name canonicalization (NC) behavior as I don't want to break Samba (cc @abartlet). IIRC Windows always sets NC flag in the AS-REQ, so perhaps I'm being needlessly cautious, however there are a couple of edge cases:

The MIT code always canonicalizes the client realm in the returned ticket (I recall implementing this based on observed Windows behavior). However, for hard aliases to work (where the client expects the client name not to change), we need to return the one the client requested.
The MIT code always only canonicalizes the server name if the client is asking for a TGT and the canonicalize flag is set. (Again, I remember implementing this based on observed Windows behavior.) This path is required to support NetBIOS names (e.g. krbtgt/SAMBA@SAMBA). For hard aliases (or generally in the case where NC is not set) we should return the server name the client requested.",Wrong realm can always get mapped to client principal unknown...,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,457,2018-12-19T04:37:27Z,2018-12-20T06:59:19Z,2018-12-20T19:29:45Z,MERGED,True,15,1,1,https://github.com/lhoward,kdc: Support aliases for client principal initial ticket acquisition (#452),1,[],https://github.com/heimdal/heimdal/pull/457,https://github.com/lhoward,12,https://github.com/heimdal/heimdal/pull/457#issuecomment-448494087,"This patch implements ""hard"" aliases where to the client an aliased principal is indistinguishable from an unaliased one: it's not required to request name canonicalization and the client is returned the name it asked for. (Note: you need to create a TGS alias, too.)
I've made this a runtime configurable option in this initial implementation: I'm being careful not to change the name canonicalization (NC) behavior as I don't want to break Samba (cc @abartlet). IIRC Windows always sets NC flag in the AS-REQ, so perhaps I'm being needlessly cautious, however there are a couple of edge cases:

The MIT code always canonicalizes the client realm in the returned ticket (I recall implementing this based on observed Windows behavior). However, for hard aliases to work (where the client expects the client name not to change), we need to return the one the client requested.
The MIT code always only canonicalizes the server name if the client is asking for a TGT and the canonicalize flag is set. (Again, I remember implementing this based on observed Windows behavior.) This path is required to support NetBIOS names (e.g. krbtgt/SAMBA@SAMBA). For hard aliases (or generally in the case where NC is not set) we should return the server name the client requested.","Right, that would actually fall out of omitting the wrong realm check if f.canonicalize == 0. But that’s ostensibly fixing a problem we don’t have... maybe nice to do to be correct?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,457,2018-12-19T04:37:27Z,2018-12-20T06:59:19Z,2018-12-20T19:29:45Z,MERGED,True,15,1,1,https://github.com/lhoward,kdc: Support aliases for client principal initial ticket acquisition (#452),1,[],https://github.com/heimdal/heimdal/pull/457,https://github.com/lhoward,13,https://github.com/heimdal/heimdal/pull/457#issuecomment-448869333,"This patch implements ""hard"" aliases where to the client an aliased principal is indistinguishable from an unaliased one: it's not required to request name canonicalization and the client is returned the name it asked for. (Note: you need to create a TGS alias, too.)
I've made this a runtime configurable option in this initial implementation: I'm being careful not to change the name canonicalization (NC) behavior as I don't want to break Samba (cc @abartlet). IIRC Windows always sets NC flag in the AS-REQ, so perhaps I'm being needlessly cautious, however there are a couple of edge cases:

The MIT code always canonicalizes the client realm in the returned ticket (I recall implementing this based on observed Windows behavior). However, for hard aliases to work (where the client expects the client name not to change), we need to return the one the client requested.
The MIT code always only canonicalizes the server name if the client is asking for a TGT and the canonicalize flag is set. (Again, I remember implementing this based on observed Windows behavior.) This path is required to support NetBIOS names (e.g. krbtgt/SAMBA@SAMBA). For hard aliases (or generally in the case where NC is not set) we should return the server name the client requested.","cc @abartlet
This patch breaks Samba's test suite, which tests for canonicalization behavior identical to Windows (i.e. the realm is always canonicalized irrespective of the setting of the flag in the AS-REQ).
So @jaltman there are a few possibilities here for implementing the original feature request:

You upgrade your clients to send the canonicalization flag (i.e. soft canonicalization as described in the feature request)
We push the functionality into the backend (but not Samba's, obviously). HDB_F_CANON would (as it does today) reflect the canonicalize flag in the client AS-REQ. The backend would always lookup aliases irrespective of the setting of this flag, and if HDB_F_CANON was not set would return the principal the KDC requested rather than the canonical principal.
Runtime knob on the KDC
Merge this PR, breaking Samba's test suite (but in theory still being compliant with [MS-KILE] as it doesn't appear to require that the AS-REP client name be canonicalized if the flag is unset)",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,457,2018-12-19T04:37:27Z,2018-12-20T06:59:19Z,2018-12-20T19:29:45Z,MERGED,True,15,1,1,https://github.com/lhoward,kdc: Support aliases for client principal initial ticket acquisition (#452),1,[],https://github.com/heimdal/heimdal/pull/457,https://github.com/jaltman,14,https://github.com/heimdal/heimdal/pull/457#issuecomment-448877031,"This patch implements ""hard"" aliases where to the client an aliased principal is indistinguishable from an unaliased one: it's not required to request name canonicalization and the client is returned the name it asked for. (Note: you need to create a TGS alias, too.)
I've made this a runtime configurable option in this initial implementation: I'm being careful not to change the name canonicalization (NC) behavior as I don't want to break Samba (cc @abartlet). IIRC Windows always sets NC flag in the AS-REQ, so perhaps I'm being needlessly cautious, however there are a couple of edge cases:

The MIT code always canonicalizes the client realm in the returned ticket (I recall implementing this based on observed Windows behavior). However, for hard aliases to work (where the client expects the client name not to change), we need to return the one the client requested.
The MIT code always only canonicalizes the server name if the client is asking for a TGT and the canonicalize flag is set. (Again, I remember implementing this based on observed Windows behavior.) This path is required to support NetBIOS names (e.g. krbtgt/SAMBA@SAMBA). For hard aliases (or generally in the case where NC is not set) we should return the server name the client requested.",@lhoward I don't want option 1.  If @abartlet is willing to update Samba's test suite then I would prefer option 4.  Otherwise option 2.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,457,2018-12-19T04:37:27Z,2018-12-20T06:59:19Z,2018-12-20T19:29:45Z,MERGED,True,15,1,1,https://github.com/lhoward,kdc: Support aliases for client principal initial ticket acquisition (#452),1,[],https://github.com/heimdal/heimdal/pull/457,https://github.com/lhoward,15,https://github.com/heimdal/heimdal/pull/457#issuecomment-448877495,"This patch implements ""hard"" aliases where to the client an aliased principal is indistinguishable from an unaliased one: it's not required to request name canonicalization and the client is returned the name it asked for. (Note: you need to create a TGS alias, too.)
I've made this a runtime configurable option in this initial implementation: I'm being careful not to change the name canonicalization (NC) behavior as I don't want to break Samba (cc @abartlet). IIRC Windows always sets NC flag in the AS-REQ, so perhaps I'm being needlessly cautious, however there are a couple of edge cases:

The MIT code always canonicalizes the client realm in the returned ticket (I recall implementing this based on observed Windows behavior). However, for hard aliases to work (where the client expects the client name not to change), we need to return the one the client requested.
The MIT code always only canonicalizes the server name if the client is asking for a TGT and the canonicalize flag is set. (Again, I remember implementing this based on observed Windows behavior.) This path is required to support NetBIOS names (e.g. krbtgt/SAMBA@SAMBA). For hard aliases (or generally in the case where NC is not set) we should return the server name the client requested.","I suspect it's going to be option 2 then, and leave the KDC untouched. @abartlet you should take care of that kadmin/changepw issue I mentioned in your code then.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,457,2018-12-19T04:37:27Z,2018-12-20T06:59:19Z,2018-12-20T19:29:45Z,MERGED,True,15,1,1,https://github.com/lhoward,kdc: Support aliases for client principal initial ticket acquisition (#452),1,[],https://github.com/heimdal/heimdal/pull/457,https://github.com/lhoward,16,https://github.com/heimdal/heimdal/pull/457#issuecomment-448882030,"This patch implements ""hard"" aliases where to the client an aliased principal is indistinguishable from an unaliased one: it's not required to request name canonicalization and the client is returned the name it asked for. (Note: you need to create a TGS alias, too.)
I've made this a runtime configurable option in this initial implementation: I'm being careful not to change the name canonicalization (NC) behavior as I don't want to break Samba (cc @abartlet). IIRC Windows always sets NC flag in the AS-REQ, so perhaps I'm being needlessly cautious, however there are a couple of edge cases:

The MIT code always canonicalizes the client realm in the returned ticket (I recall implementing this based on observed Windows behavior). However, for hard aliases to work (where the client expects the client name not to change), we need to return the one the client requested.
The MIT code always only canonicalizes the server name if the client is asking for a TGT and the canonicalize flag is set. (Again, I remember implementing this based on observed Windows behavior.) This path is required to support NetBIOS names (e.g. krbtgt/SAMBA@SAMBA). For hard aliases (or generally in the case where NC is not set) we should return the server name the client requested.","Option 2 implemented, please review.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,457,2018-12-19T04:37:27Z,2018-12-20T06:59:19Z,2018-12-20T19:29:45Z,MERGED,True,15,1,1,https://github.com/lhoward,kdc: Support aliases for client principal initial ticket acquisition (#452),1,[],https://github.com/heimdal/heimdal/pull/457,https://github.com/nicowilliams,17,https://github.com/heimdal/heimdal/pull/457#issuecomment-448885097,"This patch implements ""hard"" aliases where to the client an aliased principal is indistinguishable from an unaliased one: it's not required to request name canonicalization and the client is returned the name it asked for. (Note: you need to create a TGS alias, too.)
I've made this a runtime configurable option in this initial implementation: I'm being careful not to change the name canonicalization (NC) behavior as I don't want to break Samba (cc @abartlet). IIRC Windows always sets NC flag in the AS-REQ, so perhaps I'm being needlessly cautious, however there are a couple of edge cases:

The MIT code always canonicalizes the client realm in the returned ticket (I recall implementing this based on observed Windows behavior). However, for hard aliases to work (where the client expects the client name not to change), we need to return the one the client requested.
The MIT code always only canonicalizes the server name if the client is asking for a TGT and the canonicalize flag is set. (Again, I remember implementing this based on observed Windows behavior.) This path is required to support NetBIOS names (e.g. krbtgt/SAMBA@SAMBA). For hard aliases (or generally in the case where NC is not set) we should return the server name the client requested.","Option 2, yes.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,457,2018-12-19T04:37:27Z,2018-12-20T06:59:19Z,2018-12-20T19:29:45Z,MERGED,True,15,1,1,https://github.com/lhoward,kdc: Support aliases for client principal initial ticket acquisition (#452),1,[],https://github.com/heimdal/heimdal/pull/457,https://github.com/lhoward,18,https://github.com/heimdal/heimdal/pull/457#issuecomment-448885250,"This patch implements ""hard"" aliases where to the client an aliased principal is indistinguishable from an unaliased one: it's not required to request name canonicalization and the client is returned the name it asked for. (Note: you need to create a TGS alias, too.)
I've made this a runtime configurable option in this initial implementation: I'm being careful not to change the name canonicalization (NC) behavior as I don't want to break Samba (cc @abartlet). IIRC Windows always sets NC flag in the AS-REQ, so perhaps I'm being needlessly cautious, however there are a couple of edge cases:

The MIT code always canonicalizes the client realm in the returned ticket (I recall implementing this based on observed Windows behavior). However, for hard aliases to work (where the client expects the client name not to change), we need to return the one the client requested.
The MIT code always only canonicalizes the server name if the client is asking for a TGT and the canonicalize flag is set. (Again, I remember implementing this based on observed Windows behavior.) This path is required to support NetBIOS names (e.g. krbtgt/SAMBA@SAMBA). For hard aliases (or generally in the case where NC is not set) we should return the server name the client requested.","Arguably there are some nicer things we could do in the AS for canonicalization but, as long as Samba is handling returning whichever principal they need to by rewriting the returned HDB entry, it's probably fine to leave as-is.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,457,2018-12-19T04:37:27Z,2018-12-20T06:59:19Z,2018-12-20T19:29:45Z,MERGED,True,15,1,1,https://github.com/lhoward,kdc: Support aliases for client principal initial ticket acquisition (#452),1,[],https://github.com/heimdal/heimdal/pull/457,https://github.com/nicowilliams,19,https://github.com/heimdal/heimdal/pull/457#issuecomment-448886512,"This patch implements ""hard"" aliases where to the client an aliased principal is indistinguishable from an unaliased one: it's not required to request name canonicalization and the client is returned the name it asked for. (Note: you need to create a TGS alias, too.)
I've made this a runtime configurable option in this initial implementation: I'm being careful not to change the name canonicalization (NC) behavior as I don't want to break Samba (cc @abartlet). IIRC Windows always sets NC flag in the AS-REQ, so perhaps I'm being needlessly cautious, however there are a couple of edge cases:

The MIT code always canonicalizes the client realm in the returned ticket (I recall implementing this based on observed Windows behavior). However, for hard aliases to work (where the client expects the client name not to change), we need to return the one the client requested.
The MIT code always only canonicalizes the server name if the client is asking for a TGT and the canonicalize flag is set. (Again, I remember implementing this based on observed Windows behavior.) This path is required to support NetBIOS names (e.g. krbtgt/SAMBA@SAMBA). For hard aliases (or generally in the case where NC is not set) we should return the server name the client requested.","LGTM to me.  I'd rather get rid of that tmp var as it will reduce the amount of vertical code and whitespace, but it's a very minor thing.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,457,2018-12-19T04:37:27Z,2018-12-20T06:59:19Z,2018-12-20T19:29:45Z,MERGED,True,15,1,1,https://github.com/lhoward,kdc: Support aliases for client principal initial ticket acquisition (#452),1,[],https://github.com/heimdal/heimdal/pull/457,https://github.com/lhoward,20,https://github.com/heimdal/heimdal/pull/457#issuecomment-448886609,"This patch implements ""hard"" aliases where to the client an aliased principal is indistinguishable from an unaliased one: it's not required to request name canonicalization and the client is returned the name it asked for. (Note: you need to create a TGS alias, too.)
I've made this a runtime configurable option in this initial implementation: I'm being careful not to change the name canonicalization (NC) behavior as I don't want to break Samba (cc @abartlet). IIRC Windows always sets NC flag in the AS-REQ, so perhaps I'm being needlessly cautious, however there are a couple of edge cases:

The MIT code always canonicalizes the client realm in the returned ticket (I recall implementing this based on observed Windows behavior). However, for hard aliases to work (where the client expects the client name not to change), we need to return the one the client requested.
The MIT code always only canonicalizes the server name if the client is asking for a TGT and the canonicalize flag is set. (Again, I remember implementing this based on observed Windows behavior.) This path is required to support NetBIOS names (e.g. krbtgt/SAMBA@SAMBA). For hard aliases (or generally in the case where NC is not set) we should return the server name the client requested.","LGTM to me. I'd rather get rid of that tmp var as it will reduce the amount of vertical code and whitespace, but it's a very minor thing.

OK, I'm happy to do this.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,457,2018-12-19T04:37:27Z,2018-12-20T06:59:19Z,2018-12-20T19:29:45Z,MERGED,True,15,1,1,https://github.com/lhoward,kdc: Support aliases for client principal initial ticket acquisition (#452),1,[],https://github.com/heimdal/heimdal/pull/457,https://github.com/lhoward,21,https://github.com/heimdal/heimdal/pull/457#issuecomment-448886818,"This patch implements ""hard"" aliases where to the client an aliased principal is indistinguishable from an unaliased one: it's not required to request name canonicalization and the client is returned the name it asked for. (Note: you need to create a TGS alias, too.)
I've made this a runtime configurable option in this initial implementation: I'm being careful not to change the name canonicalization (NC) behavior as I don't want to break Samba (cc @abartlet). IIRC Windows always sets NC flag in the AS-REQ, so perhaps I'm being needlessly cautious, however there are a couple of edge cases:

The MIT code always canonicalizes the client realm in the returned ticket (I recall implementing this based on observed Windows behavior). However, for hard aliases to work (where the client expects the client name not to change), we need to return the one the client requested.
The MIT code always only canonicalizes the server name if the client is asking for a TGT and the canonicalize flag is set. (Again, I remember implementing this based on observed Windows behavior.) This path is required to support NetBIOS names (e.g. krbtgt/SAMBA@SAMBA). For hard aliases (or generally in the case where NC is not set) we should return the server name the client requested.",Or I could just make the comment smaller ;),True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,457,2018-12-19T04:37:27Z,2018-12-20T06:59:19Z,2018-12-20T19:29:45Z,MERGED,True,15,1,1,https://github.com/lhoward,kdc: Support aliases for client principal initial ticket acquisition (#452),1,[],https://github.com/heimdal/heimdal/pull/457,https://github.com/nicowilliams,22,https://github.com/heimdal/heimdal/pull/457#issuecomment-448891307,"This patch implements ""hard"" aliases where to the client an aliased principal is indistinguishable from an unaliased one: it's not required to request name canonicalization and the client is returned the name it asked for. (Note: you need to create a TGS alias, too.)
I've made this a runtime configurable option in this initial implementation: I'm being careful not to change the name canonicalization (NC) behavior as I don't want to break Samba (cc @abartlet). IIRC Windows always sets NC flag in the AS-REQ, so perhaps I'm being needlessly cautious, however there are a couple of edge cases:

The MIT code always canonicalizes the client realm in the returned ticket (I recall implementing this based on observed Windows behavior). However, for hard aliases to work (where the client expects the client name not to change), we need to return the one the client requested.
The MIT code always only canonicalizes the server name if the client is asking for a TGT and the canonicalize flag is set. (Again, I remember implementing this based on observed Windows behavior.) This path is required to support NetBIOS names (e.g. krbtgt/SAMBA@SAMBA). For hard aliases (or generally in the case where NC is not set) we should return the server name the client requested.",Porqué no los dos?,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,457,2018-12-19T04:37:27Z,2018-12-20T06:59:19Z,2018-12-20T19:29:45Z,MERGED,True,15,1,1,https://github.com/lhoward,kdc: Support aliases for client principal initial ticket acquisition (#452),1,[],https://github.com/heimdal/heimdal/pull/457,https://github.com/nicowilliams,23,https://github.com/heimdal/heimdal/pull/457#issuecomment-448891771,"This patch implements ""hard"" aliases where to the client an aliased principal is indistinguishable from an unaliased one: it's not required to request name canonicalization and the client is returned the name it asked for. (Note: you need to create a TGS alias, too.)
I've made this a runtime configurable option in this initial implementation: I'm being careful not to change the name canonicalization (NC) behavior as I don't want to break Samba (cc @abartlet). IIRC Windows always sets NC flag in the AS-REQ, so perhaps I'm being needlessly cautious, however there are a couple of edge cases:

The MIT code always canonicalizes the client realm in the returned ticket (I recall implementing this based on observed Windows behavior). However, for hard aliases to work (where the client expects the client name not to change), we need to return the one the client requested.
The MIT code always only canonicalizes the server name if the client is asking for a TGT and the canonicalize flag is set. (Again, I remember implementing this based on observed Windows behavior.) This path is required to support NetBIOS names (e.g. krbtgt/SAMBA@SAMBA). For hard aliases (or generally in the case where NC is not set) we should return the server name the client requested.","Oh, but if you remove the tmp var, don't forget to set entry->entry.principal to NULL if the copy fails.  If you'd rather keep the tmp var, that's fine.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,457,2018-12-19T04:37:27Z,2018-12-20T06:59:19Z,2018-12-20T19:29:45Z,MERGED,True,15,1,1,https://github.com/lhoward,kdc: Support aliases for client principal initial ticket acquisition (#452),1,[],https://github.com/heimdal/heimdal/pull/457,https://github.com/abartlet,24,https://github.com/heimdal/heimdal/pull/457#issuecomment-448912581,"This patch implements ""hard"" aliases where to the client an aliased principal is indistinguishable from an unaliased one: it's not required to request name canonicalization and the client is returned the name it asked for. (Note: you need to create a TGS alias, too.)
I've made this a runtime configurable option in this initial implementation: I'm being careful not to change the name canonicalization (NC) behavior as I don't want to break Samba (cc @abartlet). IIRC Windows always sets NC flag in the AS-REQ, so perhaps I'm being needlessly cautious, however there are a couple of edge cases:

The MIT code always canonicalizes the client realm in the returned ticket (I recall implementing this based on observed Windows behavior). However, for hard aliases to work (where the client expects the client name not to change), we need to return the one the client requested.
The MIT code always only canonicalizes the server name if the client is asking for a TGT and the canonicalize flag is set. (Again, I remember implementing this based on observed Windows behavior.) This path is required to support NetBIOS names (e.g. krbtgt/SAMBA@SAMBA). For hard aliases (or generally in the case where NC is not set) we should return the server name the client requested.","Thanks @lhoward for reaching out to me on the implications for Samba.
As background for @jaltman the reason we can't change the testsuite is that we also test against Windows, and while the behaviour might never be seen in the wild, our testsuite tries it anyway to be sure.
I'll re-test the final patch tomorrow, but I can't see how it would harm us.
Thanks!",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,457,2018-12-19T04:37:27Z,2018-12-20T06:59:19Z,2018-12-20T19:29:45Z,MERGED,True,15,1,1,https://github.com/lhoward,kdc: Support aliases for client principal initial ticket acquisition (#452),1,[],https://github.com/heimdal/heimdal/pull/457,https://github.com/abartlet,25,https://github.com/heimdal/heimdal/pull/457#issuecomment-449110301,"This patch implements ""hard"" aliases where to the client an aliased principal is indistinguishable from an unaliased one: it's not required to request name canonicalization and the client is returned the name it asked for. (Note: you need to create a TGS alias, too.)
I've made this a runtime configurable option in this initial implementation: I'm being careful not to change the name canonicalization (NC) behavior as I don't want to break Samba (cc @abartlet). IIRC Windows always sets NC flag in the AS-REQ, so perhaps I'm being needlessly cautious, however there are a couple of edge cases:

The MIT code always canonicalizes the client realm in the returned ticket (I recall implementing this based on observed Windows behavior). However, for hard aliases to work (where the client expects the client name not to change), we need to return the one the client requested.
The MIT code always only canonicalizes the server name if the client is asking for a TGT and the canonicalize flag is set. (Again, I remember implementing this based on observed Windows behavior.) This path is required to support NetBIOS names (e.g. krbtgt/SAMBA@SAMBA). For hard aliases (or generally in the case where NC is not set) we should return the server name the client requested.","I'll re-test the final patch tomorrow, but I can't see how it would harm us.

The patch can't impact Samba (as I always suspected) because we do not even import the changed file.
Thanks all!",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,459,2018-12-21T03:46:38Z,2018-12-24T07:17:33Z,2018-12-24T07:17:33Z,MERGED,True,2214,7,17,https://github.com/lhoward,krb5: port MIT Linux keyring credentials cache (#166),1,[],https://github.com/heimdal/heimdal/pull/459,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/459,"Initial revision for review, needs tests.","Initial revision for review, needs tests.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,459,2018-12-21T03:46:38Z,2018-12-24T07:17:33Z,2018-12-24T07:17:33Z,MERGED,True,2214,7,17,https://github.com/lhoward,krb5: port MIT Linux keyring credentials cache (#166),1,[],https://github.com/heimdal/heimdal/pull/459,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/459#issuecomment-449244962,"Initial revision for review, needs tests.","@lhoward how much did you change  lib/krb5/krcache.c relative to MIT's?  I've not reviewed that file yet, but the rest LGTM.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,459,2018-12-21T03:46:38Z,2018-12-24T07:17:33Z,2018-12-24T07:17:33Z,MERGED,True,2214,7,17,https://github.com/lhoward,krb5: port MIT Linux keyring credentials cache (#166),1,[],https://github.com/heimdal/heimdal/pull/459,https://github.com/lhoward,3,https://github.com/heimdal/heimdal/pull/459#issuecomment-449245696,"Initial revision for review, needs tests.","@lhoward how much did you change  lib/krb5/krcache.c relative to MIT's? I've not reviewed that file yet, but the rest LGTM.


stylistic (in progress, at the risk of making it diverge I want to clean up the ""MIT-isms"")
use krb5_storage for serialization rather than hand-rolled
implement cc_move() (was not implemented by MIT, needed by Heimdal kinit, unfortunately impossible to do atomically as it there's no API to rename a keyring)",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,459,2018-12-21T03:46:38Z,2018-12-24T07:17:33Z,2018-12-24T07:17:33Z,MERGED,True,2214,7,17,https://github.com/lhoward,krb5: port MIT Linux keyring credentials cache (#166),1,[],https://github.com/heimdal/heimdal/pull/459,https://github.com/lhoward,4,https://github.com/heimdal/heimdal/pull/459#issuecomment-449245768,"Initial revision for review, needs tests.","Read/write interop seems to be fine with MIT, including support for multiple ccaches.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,459,2018-12-21T03:46:38Z,2018-12-24T07:17:33Z,2018-12-24T07:17:33Z,MERGED,True,2214,7,17,https://github.com/lhoward,krb5: port MIT Linux keyring credentials cache (#166),1,[],https://github.com/heimdal/heimdal/pull/459,https://github.com/lhoward,5,https://github.com/heimdal/heimdal/pull/459#issuecomment-449251265,"Initial revision for review, needs tests.",My understanding is that big_key support requires a kernel module which may or may not be present.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,459,2018-12-21T03:46:38Z,2018-12-24T07:17:33Z,2018-12-24T07:17:33Z,MERGED,True,2214,7,17,https://github.com/lhoward,krb5: port MIT Linux keyring credentials cache (#166),1,[],https://github.com/heimdal/heimdal/pull/459,https://github.com/nicowilliams,6,https://github.com/heimdal/heimdal/pull/459#issuecomment-449278387,"Initial revision for review, needs tests.",All my review comments are in.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,459,2018-12-21T03:46:38Z,2018-12-24T07:17:33Z,2018-12-24T07:17:33Z,MERGED,True,2214,7,17,https://github.com/lhoward,krb5: port MIT Linux keyring credentials cache (#166),1,[],https://github.com/heimdal/heimdal/pull/459,https://github.com/lhoward,7,https://github.com/heimdal/heimdal/pull/459#issuecomment-449281559,"Initial revision for review, needs tests.","Thanks Nico, will address them tomorrow.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,459,2018-12-21T03:46:38Z,2018-12-24T07:17:33Z,2018-12-24T07:17:33Z,MERGED,True,2214,7,17,https://github.com/lhoward,krb5: port MIT Linux keyring credentials cache (#166),1,[],https://github.com/heimdal/heimdal/pull/459,https://github.com/nicowilliams,8,https://github.com/heimdal/heimdal/pull/459#issuecomment-449534090,"Initial revision for review, needs tests.","You can stop at the first start TGT.  We always re-initialize to store a
fresh TGT.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,459,2018-12-21T03:46:38Z,2018-12-24T07:17:33Z,2018-12-24T07:17:33Z,MERGED,True,2214,7,17,https://github.com/lhoward,krb5: port MIT Linux keyring credentials cache (#166),1,[],https://github.com/heimdal/heimdal/pull/459,https://github.com/nicowilliams,9,https://github.com/heimdal/heimdal/pull/459#issuecomment-449534408,"Initial revision for review, needs tests.","And you know whether you're storing a start TGT or something else, so no
need to iterate at all.  IMO.  @greghudson might know better though.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,459,2018-12-21T03:46:38Z,2018-12-24T07:17:33Z,2018-12-24T07:17:33Z,MERGED,True,2214,7,17,https://github.com/lhoward,krb5: port MIT Linux keyring credentials cache (#166),1,[],https://github.com/heimdal/heimdal/pull/459,https://github.com/lhoward,10,https://github.com/heimdal/heimdal/pull/459#issuecomment-449534844,"Initial revision for review, needs tests.","And you know whether you're storing a start TGT or something else, so no need to iterate at all. IMO. @greghudson might know better though.

That's true, unless you can have multiple start TGTs in the same credentials cache and you don't want to clobber the timeout if one is valid past the one being stored. But that seems like it won't happen as you pointed out we always re-initialize to store a fresh TGT.
In which case, I'll remove update_keyring_expiration() and replace it with a simple check to update the cache timeout iff we a storing a start TGT.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,459,2018-12-21T03:46:38Z,2018-12-24T07:17:33Z,2018-12-24T07:17:33Z,MERGED,True,2214,7,17,https://github.com/lhoward,krb5: port MIT Linux keyring credentials cache (#166),1,[],https://github.com/heimdal/heimdal/pull/459,https://github.com/nicowilliams,11,https://github.com/heimdal/heimdal/pull/459#issuecomment-449535314,"Initial revision for review, needs tests.","In principle you can have multiple start TGTs.  I'm practice it doesn't
happen.  We could always make a ccconfig entry to store the expiration time
so we only have to look it up (and maybe update it).  Whatever.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,459,2018-12-21T03:46:38Z,2018-12-24T07:17:33Z,2018-12-24T07:17:33Z,MERGED,True,2214,7,17,https://github.com/lhoward,krb5: port MIT Linux keyring credentials cache (#166),1,[],https://github.com/heimdal/heimdal/pull/459,https://github.com/jaltman,12,https://github.com/heimdal/heimdal/pull/459#issuecomment-449535349,"Initial revision for review, needs tests.","Start TGT or ticket with the INITIAL flag set?
…
 On Dec 21, 2018, at 8:26 PM, Luke Howard ***@***.***> wrote:

 And you know whether you're storing a start TGT or something else, so no need to iterate at all. IMO. @greghudson might know better though.

 That's true, unless you can have multiple start TGTs in the same credentials cache and you don't want to clobber the timeout if one is valid past the one being stored. But that seems like it won't happen as you pointed out we always re-initialize to store a fresh TGT.

 In which case, I'll remove update_keyring_expiration() and replace it with a simple check to update the cache timeout iff we a storing a start TGT.

 —
 You are receiving this because your review was requested.
 Reply to this email directly, view it on GitHub, or mute the thread.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,459,2018-12-21T03:46:38Z,2018-12-24T07:17:33Z,2018-12-24T07:17:33Z,MERGED,True,2214,7,17,https://github.com/lhoward,krb5: port MIT Linux keyring credentials cache (#166),1,[],https://github.com/heimdal/heimdal/pull/459,https://github.com/lhoward,13,https://github.com/heimdal/heimdal/pull/459#issuecomment-449535604,"Initial revision for review, needs tests.","Start TGT or ticket with the INITIAL flag set?

Good point. How about
    if (creds->times.endtime > now) {
        krb5_timestamp timeout;

        /* Setting to zero cancels expiration, so set to one if already expired */
        timeout = creds->times.endtime > now ? creds->times.endtime - now : 1;

        /* Credential timeout */
        (void) keyctl_set_timeout(cred_key, timeout);

        /* Credentials cache timeout, iff an initial start TGT */
        if (creds->flags.b.initial &&
            krb5_principal_is_root_krbtgt(context, creds->server))
            (void) keyctl_set_timeout(data->cache_id, timeout);
    }",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,459,2018-12-21T03:46:38Z,2018-12-24T07:17:33Z,2018-12-24T07:17:33Z,MERGED,True,2214,7,17,https://github.com/lhoward,krb5: port MIT Linux keyring credentials cache (#166),1,[],https://github.com/heimdal/heimdal/pull/459,https://github.com/nicowilliams,14,https://github.com/heimdal/heimdal/pull/459#issuecomment-449537266,"Initial revision for review, needs tests.","kinit -R stores a non-INITIAL TGT in a re-initialized ccache.  That's why i didn't suggest using the end time of INITIAL tickets.
Let's leave this optimization for some other time.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,459,2018-12-21T03:46:38Z,2018-12-24T07:17:33Z,2018-12-24T07:17:33Z,MERGED,True,2214,7,17,https://github.com/lhoward,krb5: port MIT Linux keyring credentials cache (#166),1,[],https://github.com/heimdal/heimdal/pull/459,https://github.com/greghudson,15,https://github.com/heimdal/heimdal/pull/459#issuecomment-449537297,"Initial revision for review, needs tests.","If you require the server to be a TGT principal, you won't set an expiration on caches obtained with kinit -S.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,459,2018-12-21T03:46:38Z,2018-12-24T07:17:33Z,2018-12-24T07:17:33Z,MERGED,True,2214,7,17,https://github.com/lhoward,krb5: port MIT Linux keyring credentials cache (#166),1,[],https://github.com/heimdal/heimdal/pull/459,https://github.com/nicowilliams,16,https://github.com/heimdal/heimdal/pull/459#issuecomment-449538125,"Initial revision for review, needs tests.","I mean, you can use the end time of INITIAL tickets and also the end time of start TGTs.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,459,2018-12-21T03:46:38Z,2018-12-24T07:17:33Z,2018-12-24T07:17:33Z,MERGED,True,2214,7,17,https://github.com/lhoward,krb5: port MIT Linux keyring credentials cache (#166),1,[],https://github.com/heimdal/heimdal/pull/459,https://github.com/lhoward,17,https://github.com/heimdal/heimdal/pull/459#issuecomment-449538419,"Initial revision for review, needs tests.","Good point @greghudson, reverted now.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,459,2018-12-21T03:46:38Z,2018-12-24T07:17:33Z,2018-12-24T07:17:33Z,MERGED,True,2214,7,17,https://github.com/lhoward,krb5: port MIT Linux keyring credentials cache (#166),1,[],https://github.com/heimdal/heimdal/pull/459,https://github.com/lhoward,18,https://github.com/heimdal/heimdal/pull/459#issuecomment-449538650,"Initial revision for review, needs tests.","I mean, you can use the end time of INITIAL tickets and also the end time of start TGTs.

What about renewing non-TGTs? :) (Is that a thing?)",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,459,2018-12-21T03:46:38Z,2018-12-24T07:17:33Z,2018-12-24T07:17:33Z,MERGED,True,2214,7,17,https://github.com/lhoward,krb5: port MIT Linux keyring credentials cache (#166),1,[],https://github.com/heimdal/heimdal/pull/459,https://github.com/nicowilliams,19,https://github.com/heimdal/heimdal/pull/459#issuecomment-449538802,"Initial revision for review, needs tests.",Not really a thing.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,459,2018-12-21T03:46:38Z,2018-12-24T07:17:33Z,2018-12-24T07:17:33Z,MERGED,True,2214,7,17,https://github.com/lhoward,krb5: port MIT Linux keyring credentials cache (#166),1,[],https://github.com/heimdal/heimdal/pull/459,https://github.com/lhoward,20,https://github.com/heimdal/heimdal/pull/459#issuecomment-449539446,"Initial revision for review, needs tests.","On another note, it seems that changetime and princ_id are the only mutable state in a krb5_krcache (which are integers). So we could use compare and swap rather than a mutex?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,459,2018-12-21T03:46:38Z,2018-12-24T07:17:33Z,2018-12-24T07:17:33Z,MERGED,True,2214,7,17,https://github.com/lhoward,krb5: port MIT Linux keyring credentials cache (#166),1,[],https://github.com/heimdal/heimdal/pull/459,https://github.com/jaltman,21,https://github.com/heimdal/heimdal/pull/459#issuecomment-449547767,"Initial revision for review, needs tests.",Although I've wanted the ability to renew non-start TGTs forever there is no support for it even though many KDCs issue non-start TGT service tickets with the renewable flag set and a renew lifetime specified.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,459,2018-12-21T03:46:38Z,2018-12-24T07:17:33Z,2018-12-24T07:17:33Z,MERGED,True,2214,7,17,https://github.com/lhoward,krb5: port MIT Linux keyring credentials cache (#166),1,[],https://github.com/heimdal/heimdal/pull/459,https://github.com/lhoward,22,https://github.com/heimdal/heimdal/pull/459#issuecomment-449550131,"Initial revision for review, needs tests.","Cleaned up, added tests, etc. I'll give it a final once-over next week and merge.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,459,2018-12-21T03:46:38Z,2018-12-24T07:17:33Z,2018-12-24T07:17:33Z,MERGED,True,2214,7,17,https://github.com/lhoward,krb5: port MIT Linux keyring credentials cache (#166),1,[],https://github.com/heimdal/heimdal/pull/459,https://github.com/lhoward,23,https://github.com/heimdal/heimdal/pull/459#issuecomment-449550318,"Initial revision for review, needs tests.",Is there a way to get keyutils installed on the Travis build machines?,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,459,2018-12-21T03:46:38Z,2018-12-24T07:17:33Z,2018-12-24T07:17:33Z,MERGED,True,2214,7,17,https://github.com/lhoward,krb5: port MIT Linux keyring credentials cache (#166),1,[],https://github.com/heimdal/heimdal/pull/459,https://github.com/greghudson,24,https://github.com/heimdal/heimdal/pull/459#issuecomment-449576855,"Initial revision for review, needs tests.","In .travis.yml, in the ""sudo apt-get install"" line (under before_install), add libkeyutils-dev.  Also add keyutils if you need to run keyctl for automated tests.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,459,2018-12-21T03:46:38Z,2018-12-24T07:17:33Z,2018-12-24T07:17:33Z,MERGED,True,2214,7,17,https://github.com/lhoward,krb5: port MIT Linux keyring credentials cache (#166),1,[],https://github.com/heimdal/heimdal/pull/459,https://github.com/nicowilliams,25,https://github.com/heimdal/heimdal/pull/459#issuecomment-449606479,"Initial revision for review, needs tests.","Also, you're not updating the Travis .yml either, so it's not getting tested in Travis.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,459,2018-12-21T03:46:38Z,2018-12-24T07:17:33Z,2018-12-24T07:17:33Z,MERGED,True,2214,7,17,https://github.com/lhoward,krb5: port MIT Linux keyring credentials cache (#166),1,[],https://github.com/heimdal/heimdal/pull/459,https://github.com/lhoward,26,https://github.com/heimdal/heimdal/pull/459#issuecomment-449606514,"Initial revision for review, needs tests.","Didn’t know how to do that until Greg pointed it out earlier, it’s on my list to fix.
…
Sent from my iPhone
 On 23 Dec 2018, at 11:41, Nico Williams ***@***.***> wrote:

 Also, you're not updating the Travis .yml either, so it's not getting tested in Travis.

 —
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub, or mute the thread.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,460,2018-12-22T06:07:21Z,2018-12-23T05:59:27Z,2018-12-23T05:59:27Z,MERGED,True,20,11,1,https://github.com/lhoward,krb5: remove key expired handler from krb5_init_creds_step() (#322),1,[],https://github.com/heimdal/heimdal/pull/460,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/460,"krb5: krb5_get_init_creds_opt_set_change_password_prompt incomplete (#322)
krb5_get_init_creds_opt_set_change_password_prompt() was being ignored by krb5_init_creds_step() which broke pam_krb5 tests. MIT doesn't handle password expiration within krb5_init_creds_step(), instead deferring to higher level functions such as krb5_get_init_creds_password(). However, Heimdal kinit uses krb5_init_creds_step() directly and thus requires this behaviour to be implemented to pass its own tests.","krb5: krb5_get_init_creds_opt_set_change_password_prompt incomplete (#322)
krb5_get_init_creds_opt_set_change_password_prompt() was being ignored by krb5_init_creds_step() which broke pam_krb5 tests. MIT doesn't handle password expiration within krb5_init_creds_step(), instead deferring to higher level functions such as krb5_get_init_creds_password(). However, Heimdal kinit uses krb5_init_creds_step() directly and thus requires this behaviour to be implemented to pass its own tests.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,460,2018-12-22T06:07:21Z,2018-12-23T05:59:27Z,2018-12-23T05:59:27Z,MERGED,True,20,11,1,https://github.com/lhoward,krb5: remove key expired handler from krb5_init_creds_step() (#322),1,[],https://github.com/heimdal/heimdal/pull/460,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/460#issuecomment-449616457,"krb5: krb5_get_init_creds_opt_set_change_password_prompt incomplete (#322)
krb5_get_init_creds_opt_set_change_password_prompt() was being ignored by krb5_init_creds_step() which broke pam_krb5 tests. MIT doesn't handle password expiration within krb5_init_creds_step(), instead deferring to higher level functions such as krb5_get_init_creds_password(). However, Heimdal kinit uses krb5_init_creds_step() directly and thus requires this behaviour to be implemented to pass its own tests.",LGTM.  Is it ready?,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,460,2018-12-22T06:07:21Z,2018-12-23T05:59:27Z,2018-12-23T05:59:27Z,MERGED,True,20,11,1,https://github.com/lhoward,krb5: remove key expired handler from krb5_init_creds_step() (#322),1,[],https://github.com/heimdal/heimdal/pull/460,https://github.com/lhoward,3,https://github.com/heimdal/heimdal/pull/460#issuecomment-449616490,"krb5: krb5_get_init_creds_opt_set_change_password_prompt incomplete (#322)
krb5_get_init_creds_opt_set_change_password_prompt() was being ignored by krb5_init_creds_step() which broke pam_krb5 tests. MIT doesn't handle password expiration within krb5_init_creds_step(), instead deferring to higher level functions such as krb5_get_init_creds_password(). However, Heimdal kinit uses krb5_init_creds_step() directly and thus requires this behaviour to be implemented to pass its own tests.",Yup,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,461,2018-12-23T05:45:27Z,2018-12-23T06:34:43Z,2018-12-23T06:34:43Z,MERGED,True,8,2,1,https://github.com/lhoward,kadmin: honour pw-expiration-time when adding principal (#360),1,[],https://github.com/heimdal/heimdal/pull/461,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/461,"Adding a principal with a random key or password did not respect non-default password expiration times, because the act of setting the key or password would clobber it with the default. As we update the principal anyway after setting the keys, use this opportunity to restore the requested password expiration time. (There are other ways to solve this, but this is the least intrusive.)","Adding a principal with a random key or password did not respect non-default password expiration times, because the act of setting the key or password would clobber it with the default. As we update the principal anyway after setting the keys, use this opportunity to restore the requested password expiration time. (There are other ways to solve this, but this is the least intrusive.)",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,461,2018-12-23T05:45:27Z,2018-12-23T06:34:43Z,2018-12-23T06:34:43Z,MERGED,True,8,2,1,https://github.com/lhoward,kadmin: honour pw-expiration-time when adding principal (#360),1,[],https://github.com/heimdal/heimdal/pull/461,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/461#issuecomment-449616682,"Adding a principal with a random key or password did not respect non-default password expiration times, because the act of setting the key or password would clobber it with the default. As we update the principal anyway after setting the keys, use this opportunity to restore the requested password expiration time. (There are other ways to solve this, but this is the least intrusive.)",LGTM.  Waiting for Travis.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,462,2018-12-23T08:19:44Z,2018-12-26T17:04:07Z,2018-12-27T05:28:42Z,MERGED,True,935,103,20,https://github.com/lhoward,kadm5: pre/post-commit plugin hook for kadm5 update operations (#397),2,[],https://github.com/heimdal/heimdal/pull/462,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/462,"This change adds plugin support to the kadmin libraries for performing actions before and after a password change is committed to the KDC database and after a change is made to the attributes of a principal (specifically, a change to DISALLOW_ALL_TIX).
This change adds a hook_libraries configuration option to the [kadmin] section of krb5.conf (or kdc.conf if you use that file) that must be set to load the module. That configuration option is in the form:
[kadmin]
  hook_libraries = /usr/local/lib/krb5/plugins/kadm5_hook/krb5_sync.so

where the value is the full path to the plugin that you want to load. If this option is not present, kadmind will not load a plugin and the changes from the patch will be inactive. If this option is given and the plugin cannot be loaded, kadmind startup will abort with a (hopefully useful) error message in syslog.
Any plugin used with this patch must expose a public struct named kadm5_hook. That struct must contain the following:
typedef struct kadm5_hook {
    const char *name;
    int version;
    const char *vendor;

    krb5_error_code (*init)(krb5_context, void **);
    void (*fini)(krb5_context, void *);

    krb5_error_code (*chpass)(krb5_context, void *, enum kadm5_hook_stage,
                              krb5_principal, const char *);
    krb5_error_code (*create)(krb5_context, void *, enum kadm5_hook_stage,
                              kadm5_principal_ent_t, uint32_t mask,
                              const char *password);
    krb5_error_code (*modify)(krb5_context, void *, enum kadm5_hook_stage,
                              kadm5_principal_ent_t, uint32_t mask);
    ...
} kadm5_hook;

where enum kadm5_hook_stage is:
enum kadm5_hook_stage {
    KADM5_HOOK_STAGE_PRECOMMIT,
    KADM5_HOOK_STAGE_POSTCOMMIT
};

init creates a hook context that is passed into all subsequent calls. chpass is called for password changes, create is called for principal creation (with the newly-created principal in the kadm5_principal_ent_t argument), and modify is called when a principal is modified.
These functions should follow the normal Kerberos calling convention of returning 0 on success and a Kerberos error code on failure, setting the Kerberos error message in the provided context.
This change is submitted under the following license
Copyright 2012, 2013
The Board of Trustees of the Leland Stanford Junior University
Copying and distribution of this file, with or without modification, are permitted in any medium without royalty provided the copyright notice and this notice are preserved. This file is offered as-is, without any warranty.","This change adds plugin support to the kadmin libraries for performing actions before and after a password change is committed to the KDC database and after a change is made to the attributes of a principal (specifically, a change to DISALLOW_ALL_TIX).
This change adds a hook_libraries configuration option to the [kadmin] section of krb5.conf (or kdc.conf if you use that file) that must be set to load the module. That configuration option is in the form:
[kadmin]
  hook_libraries = /usr/local/lib/krb5/plugins/kadm5_hook/krb5_sync.so

where the value is the full path to the plugin that you want to load. If this option is not present, kadmind will not load a plugin and the changes from the patch will be inactive. If this option is given and the plugin cannot be loaded, kadmind startup will abort with a (hopefully useful) error message in syslog.
Any plugin used with this patch must expose a public struct named kadm5_hook. That struct must contain the following:
typedef struct kadm5_hook {
    const char *name;
    int version;
    const char *vendor;

    krb5_error_code (*init)(krb5_context, void **);
    void (*fini)(krb5_context, void *);

    krb5_error_code (*chpass)(krb5_context, void *, enum kadm5_hook_stage,
                              krb5_principal, const char *);
    krb5_error_code (*create)(krb5_context, void *, enum kadm5_hook_stage,
                              kadm5_principal_ent_t, uint32_t mask,
                              const char *password);
    krb5_error_code (*modify)(krb5_context, void *, enum kadm5_hook_stage,
                              kadm5_principal_ent_t, uint32_t mask);
    ...
} kadm5_hook;

where enum kadm5_hook_stage is:
enum kadm5_hook_stage {
    KADM5_HOOK_STAGE_PRECOMMIT,
    KADM5_HOOK_STAGE_POSTCOMMIT
};

init creates a hook context that is passed into all subsequent calls. chpass is called for password changes, create is called for principal creation (with the newly-created principal in the kadm5_principal_ent_t argument), and modify is called when a principal is modified.
These functions should follow the normal Kerberos calling convention of returning 0 on success and a Kerberos error code on failure, setting the Kerberos error message in the provided context.
This change is submitted under the following license
Copyright 2012, 2013
The Board of Trustees of the Leland Stanford Junior University
Copying and distribution of this file, with or without modification, are permitted in any medium without royalty provided the copyright notice and this notice are preserved. This file is offered as-is, without any warranty.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,462,2018-12-23T08:19:44Z,2018-12-26T17:04:07Z,2018-12-27T05:28:42Z,MERGED,True,935,103,20,https://github.com/lhoward,kadm5: pre/post-commit plugin hook for kadm5 update operations (#397),2,[],https://github.com/heimdal/heimdal/pull/462,https://github.com/jaltman,2,https://github.com/heimdal/heimdal/pull/462#issuecomment-449643664,"This change adds plugin support to the kadmin libraries for performing actions before and after a password change is committed to the KDC database and after a change is made to the attributes of a principal (specifically, a change to DISALLOW_ALL_TIX).
This change adds a hook_libraries configuration option to the [kadmin] section of krb5.conf (or kdc.conf if you use that file) that must be set to load the module. That configuration option is in the form:
[kadmin]
  hook_libraries = /usr/local/lib/krb5/plugins/kadm5_hook/krb5_sync.so

where the value is the full path to the plugin that you want to load. If this option is not present, kadmind will not load a plugin and the changes from the patch will be inactive. If this option is given and the plugin cannot be loaded, kadmind startup will abort with a (hopefully useful) error message in syslog.
Any plugin used with this patch must expose a public struct named kadm5_hook. That struct must contain the following:
typedef struct kadm5_hook {
    const char *name;
    int version;
    const char *vendor;

    krb5_error_code (*init)(krb5_context, void **);
    void (*fini)(krb5_context, void *);

    krb5_error_code (*chpass)(krb5_context, void *, enum kadm5_hook_stage,
                              krb5_principal, const char *);
    krb5_error_code (*create)(krb5_context, void *, enum kadm5_hook_stage,
                              kadm5_principal_ent_t, uint32_t mask,
                              const char *password);
    krb5_error_code (*modify)(krb5_context, void *, enum kadm5_hook_stage,
                              kadm5_principal_ent_t, uint32_t mask);
    ...
} kadm5_hook;

where enum kadm5_hook_stage is:
enum kadm5_hook_stage {
    KADM5_HOOK_STAGE_PRECOMMIT,
    KADM5_HOOK_STAGE_POSTCOMMIT
};

init creates a hook context that is passed into all subsequent calls. chpass is called for password changes, create is called for principal creation (with the newly-created principal in the kadm5_principal_ent_t argument), and modify is called when a principal is modified.
These functions should follow the normal Kerberos calling convention of returning 0 on success and a Kerberos error code on failure, setting the Kerberos error message in the provided context.
This change is submitted under the following license
Copyright 2012, 2013
The Board of Trustees of the Leland Stanford Junior University
Copying and distribution of this file, with or without modification, are permitted in any medium without royalty provided the copyright notice and this notice are preserved. This file is offered as-is, without any warranty.",An implementation of the plugin is available at https://github.com/heimdal/krb5-sync.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,462,2018-12-23T08:19:44Z,2018-12-26T17:04:07Z,2018-12-27T05:28:42Z,MERGED,True,935,103,20,https://github.com/lhoward,kadm5: pre/post-commit plugin hook for kadm5 update operations (#397),2,[],https://github.com/heimdal/heimdal/pull/462,https://github.com/jaltman,3,https://github.com/heimdal/heimdal/pull/462#issuecomment-449644692,"This change adds plugin support to the kadmin libraries for performing actions before and after a password change is committed to the KDC database and after a change is made to the attributes of a principal (specifically, a change to DISALLOW_ALL_TIX).
This change adds a hook_libraries configuration option to the [kadmin] section of krb5.conf (or kdc.conf if you use that file) that must be set to load the module. That configuration option is in the form:
[kadmin]
  hook_libraries = /usr/local/lib/krb5/plugins/kadm5_hook/krb5_sync.so

where the value is the full path to the plugin that you want to load. If this option is not present, kadmind will not load a plugin and the changes from the patch will be inactive. If this option is given and the plugin cannot be loaded, kadmind startup will abort with a (hopefully useful) error message in syslog.
Any plugin used with this patch must expose a public struct named kadm5_hook. That struct must contain the following:
typedef struct kadm5_hook {
    const char *name;
    int version;
    const char *vendor;

    krb5_error_code (*init)(krb5_context, void **);
    void (*fini)(krb5_context, void *);

    krb5_error_code (*chpass)(krb5_context, void *, enum kadm5_hook_stage,
                              krb5_principal, const char *);
    krb5_error_code (*create)(krb5_context, void *, enum kadm5_hook_stage,
                              kadm5_principal_ent_t, uint32_t mask,
                              const char *password);
    krb5_error_code (*modify)(krb5_context, void *, enum kadm5_hook_stage,
                              kadm5_principal_ent_t, uint32_t mask);
    ...
} kadm5_hook;

where enum kadm5_hook_stage is:
enum kadm5_hook_stage {
    KADM5_HOOK_STAGE_PRECOMMIT,
    KADM5_HOOK_STAGE_POSTCOMMIT
};

init creates a hook context that is passed into all subsequent calls. chpass is called for password changes, create is called for principal creation (with the newly-created principal in the kadm5_principal_ent_t argument), and modify is called when a principal is modified.
These functions should follow the normal Kerberos calling convention of returning 0 on success and a Kerberos error code on failure, setting the Kerberos error message in the provided context.
This change is submitted under the following license
Copyright 2012, 2013
The Board of Trustees of the Leland Stanford Junior University
Copying and distribution of this file, with or without modification, are permitted in any medium without royalty provided the copyright notice and this notice are preserved. This file is offered as-is, without any warranty.","`/*

libkadm5srv expects a symbol named kadm5_hook_v0 exported by the dynamicaly
loaded module and of type kadm5_hook.  version must be
KADM5_HOOK_VERSION_V0.  Any or all of the function pointers may be NULL, in
which case that hook will not be called.
*/`

I don't like the idea of exporting a data symbol as it doesn't work well on Windows. I would prefer the shared library export a function that passes the data structure as an output parameter.
Since the plugin functions accept the krb5_context it is critical that we detect mismatches due to modifications of the krb5_context structure.   Perhaps export a function
  int init(void **kadm_hook);
and add a size_t sizeof_krb5_context parameter to the structure in addition to the kadm_hook version.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,462,2018-12-23T08:19:44Z,2018-12-26T17:04:07Z,2018-12-27T05:28:42Z,MERGED,True,935,103,20,https://github.com/lhoward,kadm5: pre/post-commit plugin hook for kadm5 update operations (#397),2,[],https://github.com/heimdal/heimdal/pull/462,https://github.com/lhoward,4,https://github.com/heimdal/heimdal/pull/462#issuecomment-449675589,"This change adds plugin support to the kadmin libraries for performing actions before and after a password change is committed to the KDC database and after a change is made to the attributes of a principal (specifically, a change to DISALLOW_ALL_TIX).
This change adds a hook_libraries configuration option to the [kadmin] section of krb5.conf (or kdc.conf if you use that file) that must be set to load the module. That configuration option is in the form:
[kadmin]
  hook_libraries = /usr/local/lib/krb5/plugins/kadm5_hook/krb5_sync.so

where the value is the full path to the plugin that you want to load. If this option is not present, kadmind will not load a plugin and the changes from the patch will be inactive. If this option is given and the plugin cannot be loaded, kadmind startup will abort with a (hopefully useful) error message in syslog.
Any plugin used with this patch must expose a public struct named kadm5_hook. That struct must contain the following:
typedef struct kadm5_hook {
    const char *name;
    int version;
    const char *vendor;

    krb5_error_code (*init)(krb5_context, void **);
    void (*fini)(krb5_context, void *);

    krb5_error_code (*chpass)(krb5_context, void *, enum kadm5_hook_stage,
                              krb5_principal, const char *);
    krb5_error_code (*create)(krb5_context, void *, enum kadm5_hook_stage,
                              kadm5_principal_ent_t, uint32_t mask,
                              const char *password);
    krb5_error_code (*modify)(krb5_context, void *, enum kadm5_hook_stage,
                              kadm5_principal_ent_t, uint32_t mask);
    ...
} kadm5_hook;

where enum kadm5_hook_stage is:
enum kadm5_hook_stage {
    KADM5_HOOK_STAGE_PRECOMMIT,
    KADM5_HOOK_STAGE_POSTCOMMIT
};

init creates a hook context that is passed into all subsequent calls. chpass is called for password changes, create is called for principal creation (with the newly-created principal in the kadm5_principal_ent_t argument), and modify is called when a principal is modified.
These functions should follow the normal Kerberos calling convention of returning 0 on success and a Kerberos error code on failure, setting the Kerberos error message in the provided context.
This change is submitted under the following license
Copyright 2012, 2013
The Board of Trustees of the Leland Stanford Junior University
Copying and distribution of this file, with or without modification, are permitted in any medium without royalty provided the copyright notice and this notice are preserved. This file is offered as-is, without any warranty.",I've amended the patch to export a function instead. I'd prefer to use a version number than sizeof(krb5_context) as the hook won't have access to krb5_locl.h. If KADM5_STRUCT_VERSION changes then we can up KADM5_HOOK_VERSION.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,462,2018-12-23T08:19:44Z,2018-12-26T17:04:07Z,2018-12-27T05:28:42Z,MERGED,True,935,103,20,https://github.com/lhoward,kadm5: pre/post-commit plugin hook for kadm5 update operations (#397),2,[],https://github.com/heimdal/heimdal/pull/462,https://github.com/lhoward,5,https://github.com/heimdal/heimdal/pull/462#issuecomment-449839528,"This change adds plugin support to the kadmin libraries for performing actions before and after a password change is committed to the KDC database and after a change is made to the attributes of a principal (specifically, a change to DISALLOW_ALL_TIX).
This change adds a hook_libraries configuration option to the [kadmin] section of krb5.conf (or kdc.conf if you use that file) that must be set to load the module. That configuration option is in the form:
[kadmin]
  hook_libraries = /usr/local/lib/krb5/plugins/kadm5_hook/krb5_sync.so

where the value is the full path to the plugin that you want to load. If this option is not present, kadmind will not load a plugin and the changes from the patch will be inactive. If this option is given and the plugin cannot be loaded, kadmind startup will abort with a (hopefully useful) error message in syslog.
Any plugin used with this patch must expose a public struct named kadm5_hook. That struct must contain the following:
typedef struct kadm5_hook {
    const char *name;
    int version;
    const char *vendor;

    krb5_error_code (*init)(krb5_context, void **);
    void (*fini)(krb5_context, void *);

    krb5_error_code (*chpass)(krb5_context, void *, enum kadm5_hook_stage,
                              krb5_principal, const char *);
    krb5_error_code (*create)(krb5_context, void *, enum kadm5_hook_stage,
                              kadm5_principal_ent_t, uint32_t mask,
                              const char *password);
    krb5_error_code (*modify)(krb5_context, void *, enum kadm5_hook_stage,
                              kadm5_principal_ent_t, uint32_t mask);
    ...
} kadm5_hook;

where enum kadm5_hook_stage is:
enum kadm5_hook_stage {
    KADM5_HOOK_STAGE_PRECOMMIT,
    KADM5_HOOK_STAGE_POSTCOMMIT
};

init creates a hook context that is passed into all subsequent calls. chpass is called for password changes, create is called for principal creation (with the newly-created principal in the kadm5_principal_ent_t argument), and modify is called when a principal is modified.
These functions should follow the normal Kerberos calling convention of returning 0 on success and a Kerberos error code on failure, setting the Kerberos error message in the provided context.
This change is submitted under the following license
Copyright 2012, 2013
The Board of Trustees of the Leland Stanford Junior University
Copying and distribution of this file, with or without modification, are permitted in any medium without royalty provided the copyright notice and this notice are preserved. This file is offered as-is, without any warranty.",I also have a patch for krb5-sync which compiles although I don't have the infrastructure to test it.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,462,2018-12-23T08:19:44Z,2018-12-26T17:04:07Z,2018-12-27T05:28:42Z,MERGED,True,935,103,20,https://github.com/lhoward,kadm5: pre/post-commit plugin hook for kadm5 update operations (#397),2,[],https://github.com/heimdal/heimdal/pull/462,https://github.com/lhoward,6,https://github.com/heimdal/heimdal/pull/462#issuecomment-449875291,"This change adds plugin support to the kadmin libraries for performing actions before and after a password change is committed to the KDC database and after a change is made to the attributes of a principal (specifically, a change to DISALLOW_ALL_TIX).
This change adds a hook_libraries configuration option to the [kadmin] section of krb5.conf (or kdc.conf if you use that file) that must be set to load the module. That configuration option is in the form:
[kadmin]
  hook_libraries = /usr/local/lib/krb5/plugins/kadm5_hook/krb5_sync.so

where the value is the full path to the plugin that you want to load. If this option is not present, kadmind will not load a plugin and the changes from the patch will be inactive. If this option is given and the plugin cannot be loaded, kadmind startup will abort with a (hopefully useful) error message in syslog.
Any plugin used with this patch must expose a public struct named kadm5_hook. That struct must contain the following:
typedef struct kadm5_hook {
    const char *name;
    int version;
    const char *vendor;

    krb5_error_code (*init)(krb5_context, void **);
    void (*fini)(krb5_context, void *);

    krb5_error_code (*chpass)(krb5_context, void *, enum kadm5_hook_stage,
                              krb5_principal, const char *);
    krb5_error_code (*create)(krb5_context, void *, enum kadm5_hook_stage,
                              kadm5_principal_ent_t, uint32_t mask,
                              const char *password);
    krb5_error_code (*modify)(krb5_context, void *, enum kadm5_hook_stage,
                              kadm5_principal_ent_t, uint32_t mask);
    ...
} kadm5_hook;

where enum kadm5_hook_stage is:
enum kadm5_hook_stage {
    KADM5_HOOK_STAGE_PRECOMMIT,
    KADM5_HOOK_STAGE_POSTCOMMIT
};

init creates a hook context that is passed into all subsequent calls. chpass is called for password changes, create is called for principal creation (with the newly-created principal in the kadm5_principal_ent_t argument), and modify is called when a principal is modified.
These functions should follow the normal Kerberos calling convention of returning 0 on success and a Kerberos error code on failure, setting the Kerberos error message in the provided context.
This change is submitted under the following license
Copyright 2012, 2013
The Board of Trustees of the Leland Stanford Junior University
Copying and distribution of this file, with or without modification, are permitted in any medium without royalty provided the copyright notice and this notice are preserved. This file is offered as-is, without any warranty.",TOOD: use krb5_const_principal in plugin API,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,462,2018-12-23T08:19:44Z,2018-12-26T17:04:07Z,2018-12-27T05:28:42Z,MERGED,True,935,103,20,https://github.com/lhoward,kadm5: pre/post-commit plugin hook for kadm5 update operations (#397),2,[],https://github.com/heimdal/heimdal/pull/462,https://github.com/nicowilliams,7,https://github.com/heimdal/heimdal/pull/462#issuecomment-449877448,"This change adds plugin support to the kadmin libraries for performing actions before and after a password change is committed to the KDC database and after a change is made to the attributes of a principal (specifically, a change to DISALLOW_ALL_TIX).
This change adds a hook_libraries configuration option to the [kadmin] section of krb5.conf (or kdc.conf if you use that file) that must be set to load the module. That configuration option is in the form:
[kadmin]
  hook_libraries = /usr/local/lib/krb5/plugins/kadm5_hook/krb5_sync.so

where the value is the full path to the plugin that you want to load. If this option is not present, kadmind will not load a plugin and the changes from the patch will be inactive. If this option is given and the plugin cannot be loaded, kadmind startup will abort with a (hopefully useful) error message in syslog.
Any plugin used with this patch must expose a public struct named kadm5_hook. That struct must contain the following:
typedef struct kadm5_hook {
    const char *name;
    int version;
    const char *vendor;

    krb5_error_code (*init)(krb5_context, void **);
    void (*fini)(krb5_context, void *);

    krb5_error_code (*chpass)(krb5_context, void *, enum kadm5_hook_stage,
                              krb5_principal, const char *);
    krb5_error_code (*create)(krb5_context, void *, enum kadm5_hook_stage,
                              kadm5_principal_ent_t, uint32_t mask,
                              const char *password);
    krb5_error_code (*modify)(krb5_context, void *, enum kadm5_hook_stage,
                              kadm5_principal_ent_t, uint32_t mask);
    ...
} kadm5_hook;

where enum kadm5_hook_stage is:
enum kadm5_hook_stage {
    KADM5_HOOK_STAGE_PRECOMMIT,
    KADM5_HOOK_STAGE_POSTCOMMIT
};

init creates a hook context that is passed into all subsequent calls. chpass is called for password changes, create is called for principal creation (with the newly-created principal in the kadm5_principal_ent_t argument), and modify is called when a principal is modified.
These functions should follow the normal Kerberos calling convention of returning 0 on success and a Kerberos error code on failure, setting the Kerberos error message in the provided context.
This change is submitted under the following license
Copyright 2012, 2013
The Board of Trustees of the Leland Stanford Junior University
Copying and distribution of this file, with or without modification, are permitted in any medium without royalty provided the copyright notice and this notice are preserved. This file is offered as-is, without any warranty.","@lhoward given your TODO comment, is this ready for review?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,462,2018-12-23T08:19:44Z,2018-12-26T17:04:07Z,2018-12-27T05:28:42Z,MERGED,True,935,103,20,https://github.com/lhoward,kadm5: pre/post-commit plugin hook for kadm5 update operations (#397),2,[],https://github.com/heimdal/heimdal/pull/462,https://github.com/lhoward,8,https://github.com/heimdal/heimdal/pull/462#issuecomment-449878630,"This change adds plugin support to the kadmin libraries for performing actions before and after a password change is committed to the KDC database and after a change is made to the attributes of a principal (specifically, a change to DISALLOW_ALL_TIX).
This change adds a hook_libraries configuration option to the [kadmin] section of krb5.conf (or kdc.conf if you use that file) that must be set to load the module. That configuration option is in the form:
[kadmin]
  hook_libraries = /usr/local/lib/krb5/plugins/kadm5_hook/krb5_sync.so

where the value is the full path to the plugin that you want to load. If this option is not present, kadmind will not load a plugin and the changes from the patch will be inactive. If this option is given and the plugin cannot be loaded, kadmind startup will abort with a (hopefully useful) error message in syslog.
Any plugin used with this patch must expose a public struct named kadm5_hook. That struct must contain the following:
typedef struct kadm5_hook {
    const char *name;
    int version;
    const char *vendor;

    krb5_error_code (*init)(krb5_context, void **);
    void (*fini)(krb5_context, void *);

    krb5_error_code (*chpass)(krb5_context, void *, enum kadm5_hook_stage,
                              krb5_principal, const char *);
    krb5_error_code (*create)(krb5_context, void *, enum kadm5_hook_stage,
                              kadm5_principal_ent_t, uint32_t mask,
                              const char *password);
    krb5_error_code (*modify)(krb5_context, void *, enum kadm5_hook_stage,
                              kadm5_principal_ent_t, uint32_t mask);
    ...
} kadm5_hook;

where enum kadm5_hook_stage is:
enum kadm5_hook_stage {
    KADM5_HOOK_STAGE_PRECOMMIT,
    KADM5_HOOK_STAGE_POSTCOMMIT
};

init creates a hook context that is passed into all subsequent calls. chpass is called for password changes, create is called for principal creation (with the newly-created principal in the kadm5_principal_ent_t argument), and modify is called when a principal is modified.
These functions should follow the normal Kerberos calling convention of returning 0 on success and a Kerberos error code on failure, setting the Kerberos error message in the provided context.
This change is submitted under the following license
Copyright 2012, 2013
The Board of Trustees of the Leland Stanford Junior University
Copying and distribution of this file, with or without modification, are permitted in any medium without royalty provided the copyright notice and this notice are preserved. This file is offered as-is, without any warranty.",I’ll fix it this morning.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,462,2018-12-23T08:19:44Z,2018-12-26T17:04:07Z,2018-12-27T05:28:42Z,MERGED,True,935,103,20,https://github.com/lhoward,kadm5: pre/post-commit plugin hook for kadm5 update operations (#397),2,[],https://github.com/heimdal/heimdal/pull/462,https://github.com/lhoward,9,https://github.com/heimdal/heimdal/pull/462#issuecomment-449882089,"This change adds plugin support to the kadmin libraries for performing actions before and after a password change is committed to the KDC database and after a change is made to the attributes of a principal (specifically, a change to DISALLOW_ALL_TIX).
This change adds a hook_libraries configuration option to the [kadmin] section of krb5.conf (or kdc.conf if you use that file) that must be set to load the module. That configuration option is in the form:
[kadmin]
  hook_libraries = /usr/local/lib/krb5/plugins/kadm5_hook/krb5_sync.so

where the value is the full path to the plugin that you want to load. If this option is not present, kadmind will not load a plugin and the changes from the patch will be inactive. If this option is given and the plugin cannot be loaded, kadmind startup will abort with a (hopefully useful) error message in syslog.
Any plugin used with this patch must expose a public struct named kadm5_hook. That struct must contain the following:
typedef struct kadm5_hook {
    const char *name;
    int version;
    const char *vendor;

    krb5_error_code (*init)(krb5_context, void **);
    void (*fini)(krb5_context, void *);

    krb5_error_code (*chpass)(krb5_context, void *, enum kadm5_hook_stage,
                              krb5_principal, const char *);
    krb5_error_code (*create)(krb5_context, void *, enum kadm5_hook_stage,
                              kadm5_principal_ent_t, uint32_t mask,
                              const char *password);
    krb5_error_code (*modify)(krb5_context, void *, enum kadm5_hook_stage,
                              kadm5_principal_ent_t, uint32_t mask);
    ...
} kadm5_hook;

where enum kadm5_hook_stage is:
enum kadm5_hook_stage {
    KADM5_HOOK_STAGE_PRECOMMIT,
    KADM5_HOOK_STAGE_POSTCOMMIT
};

init creates a hook context that is passed into all subsequent calls. chpass is called for password changes, create is called for principal creation (with the newly-created principal in the kadm5_principal_ent_t argument), and modify is called when a principal is modified.
These functions should follow the normal Kerberos calling convention of returning 0 on success and a Kerberos error code on failure, setting the Kerberos error message in the provided context.
This change is submitted under the following license
Copyright 2012, 2013
The Board of Trustees of the Leland Stanford Junior University
Copying and distribution of this file, with or without modification, are permitted in any medium without royalty provided the copyright notice and this notice are preserved. This file is offered as-is, without any warranty.","Fixed, ready for review",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,462,2018-12-23T08:19:44Z,2018-12-26T17:04:07Z,2018-12-27T05:28:42Z,MERGED,True,935,103,20,https://github.com/lhoward,kadm5: pre/post-commit plugin hook for kadm5 update operations (#397),2,[],https://github.com/heimdal/heimdal/pull/462,https://github.com/nicowilliams,10,https://github.com/heimdal/heimdal/pull/462#issuecomment-449898559,"This change adds plugin support to the kadmin libraries for performing actions before and after a password change is committed to the KDC database and after a change is made to the attributes of a principal (specifically, a change to DISALLOW_ALL_TIX).
This change adds a hook_libraries configuration option to the [kadmin] section of krb5.conf (or kdc.conf if you use that file) that must be set to load the module. That configuration option is in the form:
[kadmin]
  hook_libraries = /usr/local/lib/krb5/plugins/kadm5_hook/krb5_sync.so

where the value is the full path to the plugin that you want to load. If this option is not present, kadmind will not load a plugin and the changes from the patch will be inactive. If this option is given and the plugin cannot be loaded, kadmind startup will abort with a (hopefully useful) error message in syslog.
Any plugin used with this patch must expose a public struct named kadm5_hook. That struct must contain the following:
typedef struct kadm5_hook {
    const char *name;
    int version;
    const char *vendor;

    krb5_error_code (*init)(krb5_context, void **);
    void (*fini)(krb5_context, void *);

    krb5_error_code (*chpass)(krb5_context, void *, enum kadm5_hook_stage,
                              krb5_principal, const char *);
    krb5_error_code (*create)(krb5_context, void *, enum kadm5_hook_stage,
                              kadm5_principal_ent_t, uint32_t mask,
                              const char *password);
    krb5_error_code (*modify)(krb5_context, void *, enum kadm5_hook_stage,
                              kadm5_principal_ent_t, uint32_t mask);
    ...
} kadm5_hook;

where enum kadm5_hook_stage is:
enum kadm5_hook_stage {
    KADM5_HOOK_STAGE_PRECOMMIT,
    KADM5_HOOK_STAGE_POSTCOMMIT
};

init creates a hook context that is passed into all subsequent calls. chpass is called for password changes, create is called for principal creation (with the newly-created principal in the kadm5_principal_ent_t argument), and modify is called when a principal is modified.
These functions should follow the normal Kerberos calling convention of returning 0 on success and a Kerberos error code on failure, setting the Kerberos error message in the provided context.
This change is submitted under the following license
Copyright 2012, 2013
The Board of Trustees of the Leland Stanford Junior University
Copying and distribution of this file, with or without modification, are permitted in any medium without royalty provided the copyright notice and this notice are preserved. This file is offered as-is, without any warranty.","All my comments are in.
Changes requested:

abstract calling the hooks somewhat
don't leak libraries
s/""hook_libraries""/""hooks""/
have the plugin output a pointer to krb5_init_context() so libkadm5 can check that the plugin is using the same libkrb5",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,462,2018-12-23T08:19:44Z,2018-12-26T17:04:07Z,2018-12-27T05:28:42Z,MERGED,True,935,103,20,https://github.com/lhoward,kadm5: pre/post-commit plugin hook for kadm5 update operations (#397),2,[],https://github.com/heimdal/heimdal/pull/462,https://github.com/lhoward,11,https://github.com/heimdal/heimdal/pull/462#issuecomment-449922098,"This change adds plugin support to the kadmin libraries for performing actions before and after a password change is committed to the KDC database and after a change is made to the attributes of a principal (specifically, a change to DISALLOW_ALL_TIX).
This change adds a hook_libraries configuration option to the [kadmin] section of krb5.conf (or kdc.conf if you use that file) that must be set to load the module. That configuration option is in the form:
[kadmin]
  hook_libraries = /usr/local/lib/krb5/plugins/kadm5_hook/krb5_sync.so

where the value is the full path to the plugin that you want to load. If this option is not present, kadmind will not load a plugin and the changes from the patch will be inactive. If this option is given and the plugin cannot be loaded, kadmind startup will abort with a (hopefully useful) error message in syslog.
Any plugin used with this patch must expose a public struct named kadm5_hook. That struct must contain the following:
typedef struct kadm5_hook {
    const char *name;
    int version;
    const char *vendor;

    krb5_error_code (*init)(krb5_context, void **);
    void (*fini)(krb5_context, void *);

    krb5_error_code (*chpass)(krb5_context, void *, enum kadm5_hook_stage,
                              krb5_principal, const char *);
    krb5_error_code (*create)(krb5_context, void *, enum kadm5_hook_stage,
                              kadm5_principal_ent_t, uint32_t mask,
                              const char *password);
    krb5_error_code (*modify)(krb5_context, void *, enum kadm5_hook_stage,
                              kadm5_principal_ent_t, uint32_t mask);
    ...
} kadm5_hook;

where enum kadm5_hook_stage is:
enum kadm5_hook_stage {
    KADM5_HOOK_STAGE_PRECOMMIT,
    KADM5_HOOK_STAGE_POSTCOMMIT
};

init creates a hook context that is passed into all subsequent calls. chpass is called for password changes, create is called for principal creation (with the newly-created principal in the kadm5_principal_ent_t argument), and modify is called when a principal is modified.
These functions should follow the normal Kerberos calling convention of returning 0 on success and a Kerberos error code on failure, setting the Kerberos error message in the provided context.
This change is submitted under the following license
Copyright 2012, 2013
The Board of Trustees of the Leland Stanford Junior University
Copying and distribution of this file, with or without modification, are permitted in any medium without royalty provided the copyright notice and this notice are preserved. This file is offered as-is, without any warranty.","Fixed, also added a not-really-related commit that moves password quality checks out of kadmindd and kpasswdd and into libkadm5, with a view to eventually refactoring password quality checks as pre-commit hooks.
One difference here though is that ACL checks are now done before password quality checks, which whilst a behavior change I think is possibly an improvement (don't disclose anything about password policy until you are authorized).",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,462,2018-12-23T08:19:44Z,2018-12-26T17:04:07Z,2018-12-27T05:28:42Z,MERGED,True,935,103,20,https://github.com/lhoward,kadm5: pre/post-commit plugin hook for kadm5 update operations (#397),2,[],https://github.com/heimdal/heimdal/pull/462,https://github.com/nicowilliams,12,https://github.com/heimdal/heimdal/pull/462#issuecomment-449994462,"This change adds plugin support to the kadmin libraries for performing actions before and after a password change is committed to the KDC database and after a change is made to the attributes of a principal (specifically, a change to DISALLOW_ALL_TIX).
This change adds a hook_libraries configuration option to the [kadmin] section of krb5.conf (or kdc.conf if you use that file) that must be set to load the module. That configuration option is in the form:
[kadmin]
  hook_libraries = /usr/local/lib/krb5/plugins/kadm5_hook/krb5_sync.so

where the value is the full path to the plugin that you want to load. If this option is not present, kadmind will not load a plugin and the changes from the patch will be inactive. If this option is given and the plugin cannot be loaded, kadmind startup will abort with a (hopefully useful) error message in syslog.
Any plugin used with this patch must expose a public struct named kadm5_hook. That struct must contain the following:
typedef struct kadm5_hook {
    const char *name;
    int version;
    const char *vendor;

    krb5_error_code (*init)(krb5_context, void **);
    void (*fini)(krb5_context, void *);

    krb5_error_code (*chpass)(krb5_context, void *, enum kadm5_hook_stage,
                              krb5_principal, const char *);
    krb5_error_code (*create)(krb5_context, void *, enum kadm5_hook_stage,
                              kadm5_principal_ent_t, uint32_t mask,
                              const char *password);
    krb5_error_code (*modify)(krb5_context, void *, enum kadm5_hook_stage,
                              kadm5_principal_ent_t, uint32_t mask);
    ...
} kadm5_hook;

where enum kadm5_hook_stage is:
enum kadm5_hook_stage {
    KADM5_HOOK_STAGE_PRECOMMIT,
    KADM5_HOOK_STAGE_POSTCOMMIT
};

init creates a hook context that is passed into all subsequent calls. chpass is called for password changes, create is called for principal creation (with the newly-created principal in the kadm5_principal_ent_t argument), and modify is called when a principal is modified.
These functions should follow the normal Kerberos calling convention of returning 0 on success and a Kerberos error code on failure, setting the Kerberos error message in the provided context.
This change is submitted under the following license
Copyright 2012, 2013
The Board of Trustees of the Leland Stanford Junior University
Copying and distribution of this file, with or without modification, are permitted in any medium without royalty provided the copyright notice and this notice are preserved. This file is offered as-is, without any warranty.","Well, the least we could do is retry on realm create if the random password is ""weak"".",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,462,2018-12-23T08:19:44Z,2018-12-26T17:04:07Z,2018-12-27T05:28:42Z,MERGED,True,935,103,20,https://github.com/lhoward,kadm5: pre/post-commit plugin hook for kadm5 update operations (#397),2,[],https://github.com/heimdal/heimdal/pull/462,https://github.com/jaltman,13,https://github.com/heimdal/heimdal/pull/462#issuecomment-450012536,"This change adds plugin support to the kadmin libraries for performing actions before and after a password change is committed to the KDC database and after a change is made to the attributes of a principal (specifically, a change to DISALLOW_ALL_TIX).
This change adds a hook_libraries configuration option to the [kadmin] section of krb5.conf (or kdc.conf if you use that file) that must be set to load the module. That configuration option is in the form:
[kadmin]
  hook_libraries = /usr/local/lib/krb5/plugins/kadm5_hook/krb5_sync.so

where the value is the full path to the plugin that you want to load. If this option is not present, kadmind will not load a plugin and the changes from the patch will be inactive. If this option is given and the plugin cannot be loaded, kadmind startup will abort with a (hopefully useful) error message in syslog.
Any plugin used with this patch must expose a public struct named kadm5_hook. That struct must contain the following:
typedef struct kadm5_hook {
    const char *name;
    int version;
    const char *vendor;

    krb5_error_code (*init)(krb5_context, void **);
    void (*fini)(krb5_context, void *);

    krb5_error_code (*chpass)(krb5_context, void *, enum kadm5_hook_stage,
                              krb5_principal, const char *);
    krb5_error_code (*create)(krb5_context, void *, enum kadm5_hook_stage,
                              kadm5_principal_ent_t, uint32_t mask,
                              const char *password);
    krb5_error_code (*modify)(krb5_context, void *, enum kadm5_hook_stage,
                              kadm5_principal_ent_t, uint32_t mask);
    ...
} kadm5_hook;

where enum kadm5_hook_stage is:
enum kadm5_hook_stage {
    KADM5_HOOK_STAGE_PRECOMMIT,
    KADM5_HOOK_STAGE_POSTCOMMIT
};

init creates a hook context that is passed into all subsequent calls. chpass is called for password changes, create is called for principal creation (with the newly-created principal in the kadm5_principal_ent_t argument), and modify is called when a principal is modified.
These functions should follow the normal Kerberos calling convention of returning 0 on success and a Kerberos error code on failure, setting the Kerberos error message in the provided context.
This change is submitted under the following license
Copyright 2012, 2013
The Board of Trustees of the Leland Stanford Junior University
Copying and distribution of this file, with or without modification, are permitted in any medium without royalty provided the copyright notice and this notice are preserved. This file is offered as-is, without any warranty.","One difference here though is that ACL checks are now done before password quality checks, which whilst a behavior change I think is possibly an improvement (don't disclose anything about password policy until you are authorized).

agreed.  authorization checks should always come first.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,462,2018-12-23T08:19:44Z,2018-12-26T17:04:07Z,2018-12-27T05:28:42Z,MERGED,True,935,103,20,https://github.com/lhoward,kadm5: pre/post-commit plugin hook for kadm5 update operations (#397),2,[],https://github.com/heimdal/heimdal/pull/462,https://github.com/nicowilliams,14,https://github.com/heimdal/heimdal/pull/462#issuecomment-450020007,"This change adds plugin support to the kadmin libraries for performing actions before and after a password change is committed to the KDC database and after a change is made to the attributes of a principal (specifically, a change to DISALLOW_ALL_TIX).
This change adds a hook_libraries configuration option to the [kadmin] section of krb5.conf (or kdc.conf if you use that file) that must be set to load the module. That configuration option is in the form:
[kadmin]
  hook_libraries = /usr/local/lib/krb5/plugins/kadm5_hook/krb5_sync.so

where the value is the full path to the plugin that you want to load. If this option is not present, kadmind will not load a plugin and the changes from the patch will be inactive. If this option is given and the plugin cannot be loaded, kadmind startup will abort with a (hopefully useful) error message in syslog.
Any plugin used with this patch must expose a public struct named kadm5_hook. That struct must contain the following:
typedef struct kadm5_hook {
    const char *name;
    int version;
    const char *vendor;

    krb5_error_code (*init)(krb5_context, void **);
    void (*fini)(krb5_context, void *);

    krb5_error_code (*chpass)(krb5_context, void *, enum kadm5_hook_stage,
                              krb5_principal, const char *);
    krb5_error_code (*create)(krb5_context, void *, enum kadm5_hook_stage,
                              kadm5_principal_ent_t, uint32_t mask,
                              const char *password);
    krb5_error_code (*modify)(krb5_context, void *, enum kadm5_hook_stage,
                              kadm5_principal_ent_t, uint32_t mask);
    ...
} kadm5_hook;

where enum kadm5_hook_stage is:
enum kadm5_hook_stage {
    KADM5_HOOK_STAGE_PRECOMMIT,
    KADM5_HOOK_STAGE_POSTCOMMIT
};

init creates a hook context that is passed into all subsequent calls. chpass is called for password changes, create is called for principal creation (with the newly-created principal in the kadm5_principal_ent_t argument), and modify is called when a principal is modified.
These functions should follow the normal Kerberos calling convention of returning 0 on success and a Kerberos error code on failure, setting the Kerberos error message in the provided context.
This change is submitted under the following license
Copyright 2012, 2013
The Board of Trustees of the Leland Stanford Junior University
Copying and distribution of this file, with or without modification, are permitted in any medium without royalty provided the copyright notice and this notice are preserved. This file is offered as-is, without any warranty.","BTW, @lhoward, thanks for noticing and using krb5_prepend_error_message().",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,462,2018-12-23T08:19:44Z,2018-12-26T17:04:07Z,2018-12-27T05:28:42Z,MERGED,True,935,103,20,https://github.com/lhoward,kadm5: pre/post-commit plugin hook for kadm5 update operations (#397),2,[],https://github.com/heimdal/heimdal/pull/462,https://github.com/lhoward,15,https://github.com/heimdal/heimdal/pull/462#issuecomment-450029936,"This change adds plugin support to the kadmin libraries for performing actions before and after a password change is committed to the KDC database and after a change is made to the attributes of a principal (specifically, a change to DISALLOW_ALL_TIX).
This change adds a hook_libraries configuration option to the [kadmin] section of krb5.conf (or kdc.conf if you use that file) that must be set to load the module. That configuration option is in the form:
[kadmin]
  hook_libraries = /usr/local/lib/krb5/plugins/kadm5_hook/krb5_sync.so

where the value is the full path to the plugin that you want to load. If this option is not present, kadmind will not load a plugin and the changes from the patch will be inactive. If this option is given and the plugin cannot be loaded, kadmind startup will abort with a (hopefully useful) error message in syslog.
Any plugin used with this patch must expose a public struct named kadm5_hook. That struct must contain the following:
typedef struct kadm5_hook {
    const char *name;
    int version;
    const char *vendor;

    krb5_error_code (*init)(krb5_context, void **);
    void (*fini)(krb5_context, void *);

    krb5_error_code (*chpass)(krb5_context, void *, enum kadm5_hook_stage,
                              krb5_principal, const char *);
    krb5_error_code (*create)(krb5_context, void *, enum kadm5_hook_stage,
                              kadm5_principal_ent_t, uint32_t mask,
                              const char *password);
    krb5_error_code (*modify)(krb5_context, void *, enum kadm5_hook_stage,
                              kadm5_principal_ent_t, uint32_t mask);
    ...
} kadm5_hook;

where enum kadm5_hook_stage is:
enum kadm5_hook_stage {
    KADM5_HOOK_STAGE_PRECOMMIT,
    KADM5_HOOK_STAGE_POSTCOMMIT
};

init creates a hook context that is passed into all subsequent calls. chpass is called for password changes, create is called for principal creation (with the newly-created principal in the kadm5_principal_ent_t argument), and modify is called when a principal is modified.
These functions should follow the normal Kerberos calling convention of returning 0 on success and a Kerberos error code on failure, setting the Kerberos error message in the provided context.
This change is submitted under the following license
Copyright 2012, 2013
The Board of Trustees of the Leland Stanford Junior University
Copying and distribution of this file, with or without modification, are permitted in any medium without royalty provided the copyright notice and this notice are preserved. This file is offered as-is, without any warranty.","The lack of hyphen did trouble me @jaltman :)
I'll fix the other issues today.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,462,2018-12-23T08:19:44Z,2018-12-26T17:04:07Z,2018-12-27T05:28:42Z,MERGED,True,935,103,20,https://github.com/lhoward,kadm5: pre/post-commit plugin hook for kadm5 update operations (#397),2,[],https://github.com/heimdal/heimdal/pull/462,https://github.com/lhoward,16,https://github.com/heimdal/heimdal/pull/462#issuecomment-450048593,"This change adds plugin support to the kadmin libraries for performing actions before and after a password change is committed to the KDC database and after a change is made to the attributes of a principal (specifically, a change to DISALLOW_ALL_TIX).
This change adds a hook_libraries configuration option to the [kadmin] section of krb5.conf (or kdc.conf if you use that file) that must be set to load the module. That configuration option is in the form:
[kadmin]
  hook_libraries = /usr/local/lib/krb5/plugins/kadm5_hook/krb5_sync.so

where the value is the full path to the plugin that you want to load. If this option is not present, kadmind will not load a plugin and the changes from the patch will be inactive. If this option is given and the plugin cannot be loaded, kadmind startup will abort with a (hopefully useful) error message in syslog.
Any plugin used with this patch must expose a public struct named kadm5_hook. That struct must contain the following:
typedef struct kadm5_hook {
    const char *name;
    int version;
    const char *vendor;

    krb5_error_code (*init)(krb5_context, void **);
    void (*fini)(krb5_context, void *);

    krb5_error_code (*chpass)(krb5_context, void *, enum kadm5_hook_stage,
                              krb5_principal, const char *);
    krb5_error_code (*create)(krb5_context, void *, enum kadm5_hook_stage,
                              kadm5_principal_ent_t, uint32_t mask,
                              const char *password);
    krb5_error_code (*modify)(krb5_context, void *, enum kadm5_hook_stage,
                              kadm5_principal_ent_t, uint32_t mask);
    ...
} kadm5_hook;

where enum kadm5_hook_stage is:
enum kadm5_hook_stage {
    KADM5_HOOK_STAGE_PRECOMMIT,
    KADM5_HOOK_STAGE_POSTCOMMIT
};

init creates a hook context that is passed into all subsequent calls. chpass is called for password changes, create is called for principal creation (with the newly-created principal in the kadm5_principal_ent_t argument), and modify is called when a principal is modified.
These functions should follow the normal Kerberos calling convention of returning 0 on success and a Kerberos error code on failure, setting the Kerberos error message in the provided context.
This change is submitted under the following license
Copyright 2012, 2013
The Board of Trustees of the Leland Stanford Junior University
Copying and distribution of this file, with or without modification, are permitted in any medium without royalty provided the copyright notice and this notice are preserved. This file is offered as-is, without any warranty.",Additional review comments were addressed in f62b00e,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,462,2018-12-23T08:19:44Z,2018-12-26T17:04:07Z,2018-12-27T05:28:42Z,MERGED,True,935,103,20,https://github.com/lhoward,kadm5: pre/post-commit plugin hook for kadm5 update operations (#397),2,[],https://github.com/heimdal/heimdal/pull/462,https://github.com/lhoward,17,https://github.com/heimdal/heimdal/pull/462#issuecomment-450050814,"This change adds plugin support to the kadmin libraries for performing actions before and after a password change is committed to the KDC database and after a change is made to the attributes of a principal (specifically, a change to DISALLOW_ALL_TIX).
This change adds a hook_libraries configuration option to the [kadmin] section of krb5.conf (or kdc.conf if you use that file) that must be set to load the module. That configuration option is in the form:
[kadmin]
  hook_libraries = /usr/local/lib/krb5/plugins/kadm5_hook/krb5_sync.so

where the value is the full path to the plugin that you want to load. If this option is not present, kadmind will not load a plugin and the changes from the patch will be inactive. If this option is given and the plugin cannot be loaded, kadmind startup will abort with a (hopefully useful) error message in syslog.
Any plugin used with this patch must expose a public struct named kadm5_hook. That struct must contain the following:
typedef struct kadm5_hook {
    const char *name;
    int version;
    const char *vendor;

    krb5_error_code (*init)(krb5_context, void **);
    void (*fini)(krb5_context, void *);

    krb5_error_code (*chpass)(krb5_context, void *, enum kadm5_hook_stage,
                              krb5_principal, const char *);
    krb5_error_code (*create)(krb5_context, void *, enum kadm5_hook_stage,
                              kadm5_principal_ent_t, uint32_t mask,
                              const char *password);
    krb5_error_code (*modify)(krb5_context, void *, enum kadm5_hook_stage,
                              kadm5_principal_ent_t, uint32_t mask);
    ...
} kadm5_hook;

where enum kadm5_hook_stage is:
enum kadm5_hook_stage {
    KADM5_HOOK_STAGE_PRECOMMIT,
    KADM5_HOOK_STAGE_POSTCOMMIT
};

init creates a hook context that is passed into all subsequent calls. chpass is called for password changes, create is called for principal creation (with the newly-created principal in the kadm5_principal_ent_t argument), and modify is called when a principal is modified.
These functions should follow the normal Kerberos calling convention of returning 0 on success and a Kerberos error code on failure, setting the Kerberos error message in the provided context.
This change is submitted under the following license
Copyright 2012, 2013
The Board of Trustees of the Leland Stanford Junior University
Copying and distribution of this file, with or without modification, are permitted in any medium without royalty provided the copyright notice and this notice are preserved. This file is offered as-is, without any warranty.","BTW, @lhoward, thanks for noticing and using krb5_prepend_error_message().

Actually I reverted to krb5_set_error_message() as krb5_prepend_error_message() only works if context->error_code != 0, i.e. someone has previously set the error message for that return code.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,462,2018-12-23T08:19:44Z,2018-12-26T17:04:07Z,2018-12-27T05:28:42Z,MERGED,True,935,103,20,https://github.com/lhoward,kadm5: pre/post-commit plugin hook for kadm5 update operations (#397),2,[],https://github.com/heimdal/heimdal/pull/462,https://github.com/lhoward,18,https://github.com/heimdal/heimdal/pull/462#issuecomment-450051915,"This change adds plugin support to the kadmin libraries for performing actions before and after a password change is committed to the KDC database and after a change is made to the attributes of a principal (specifically, a change to DISALLOW_ALL_TIX).
This change adds a hook_libraries configuration option to the [kadmin] section of krb5.conf (or kdc.conf if you use that file) that must be set to load the module. That configuration option is in the form:
[kadmin]
  hook_libraries = /usr/local/lib/krb5/plugins/kadm5_hook/krb5_sync.so

where the value is the full path to the plugin that you want to load. If this option is not present, kadmind will not load a plugin and the changes from the patch will be inactive. If this option is given and the plugin cannot be loaded, kadmind startup will abort with a (hopefully useful) error message in syslog.
Any plugin used with this patch must expose a public struct named kadm5_hook. That struct must contain the following:
typedef struct kadm5_hook {
    const char *name;
    int version;
    const char *vendor;

    krb5_error_code (*init)(krb5_context, void **);
    void (*fini)(krb5_context, void *);

    krb5_error_code (*chpass)(krb5_context, void *, enum kadm5_hook_stage,
                              krb5_principal, const char *);
    krb5_error_code (*create)(krb5_context, void *, enum kadm5_hook_stage,
                              kadm5_principal_ent_t, uint32_t mask,
                              const char *password);
    krb5_error_code (*modify)(krb5_context, void *, enum kadm5_hook_stage,
                              kadm5_principal_ent_t, uint32_t mask);
    ...
} kadm5_hook;

where enum kadm5_hook_stage is:
enum kadm5_hook_stage {
    KADM5_HOOK_STAGE_PRECOMMIT,
    KADM5_HOOK_STAGE_POSTCOMMIT
};

init creates a hook context that is passed into all subsequent calls. chpass is called for password changes, create is called for principal creation (with the newly-created principal in the kadm5_principal_ent_t argument), and modify is called when a principal is modified.
These functions should follow the normal Kerberos calling convention of returning 0 on success and a Kerberos error code on failure, setting the Kerberos error message in the provided context.
This change is submitted under the following license
Copyright 2012, 2013
The Board of Trustees of the Leland Stanford Junior University
Copying and distribution of this file, with or without modification, are permitted in any medium without royalty provided the copyright notice and this notice are preserved. This file is offered as-is, without any warranty.","Well, the least we could do is retry on realm create if the random password is ""weak"".

Something like this?
diff --git a/kadmin/init.c b/kadmin/init.c
index 20ed93216..abf57d6cc 100644
--- a/kadmin/init.c
+++ b/kadmin/init.c
@@ -50,11 +50,12 @@ create_random_entry(krb5_principal princ,
     kadm5_ret_t ret;
     int mask = 0;
     krb5_keyblock *keys;
-    int n_keys, i;
+    int n_keys, i, n_password_tries = 1;
     char *name;
     const char *password;
     char pwbuf[512];
 
+retry_password:
     random_password(pwbuf, sizeof(pwbuf));
     password = pwbuf;
 
@@ -83,6 +84,10 @@ create_random_entry(krb5_principal princ,
     if(ret) {
        if (ret == KADM5_DUP && (flags & CRE_DUP_OK))
            goto out;
+       if (ret == KADM5_PASS_Q_DICT && n_password_tries < 5) {
+           n_password_tries++;
+           goto retry_password;
+       }
        krb5_warn(context, ret, ""create_random_entry(%s): randkey failed"",
                  name);
        goto out;",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,462,2018-12-23T08:19:44Z,2018-12-26T17:04:07Z,2018-12-27T05:28:42Z,MERGED,True,935,103,20,https://github.com/lhoward,kadm5: pre/post-commit plugin hook for kadm5 update operations (#397),2,[],https://github.com/heimdal/heimdal/pull/462,https://github.com/nicowilliams,19,https://github.com/heimdal/heimdal/pull/462#issuecomment-450053660,"This change adds plugin support to the kadmin libraries for performing actions before and after a password change is committed to the KDC database and after a change is made to the attributes of a principal (specifically, a change to DISALLOW_ALL_TIX).
This change adds a hook_libraries configuration option to the [kadmin] section of krb5.conf (or kdc.conf if you use that file) that must be set to load the module. That configuration option is in the form:
[kadmin]
  hook_libraries = /usr/local/lib/krb5/plugins/kadm5_hook/krb5_sync.so

where the value is the full path to the plugin that you want to load. If this option is not present, kadmind will not load a plugin and the changes from the patch will be inactive. If this option is given and the plugin cannot be loaded, kadmind startup will abort with a (hopefully useful) error message in syslog.
Any plugin used with this patch must expose a public struct named kadm5_hook. That struct must contain the following:
typedef struct kadm5_hook {
    const char *name;
    int version;
    const char *vendor;

    krb5_error_code (*init)(krb5_context, void **);
    void (*fini)(krb5_context, void *);

    krb5_error_code (*chpass)(krb5_context, void *, enum kadm5_hook_stage,
                              krb5_principal, const char *);
    krb5_error_code (*create)(krb5_context, void *, enum kadm5_hook_stage,
                              kadm5_principal_ent_t, uint32_t mask,
                              const char *password);
    krb5_error_code (*modify)(krb5_context, void *, enum kadm5_hook_stage,
                              kadm5_principal_ent_t, uint32_t mask);
    ...
} kadm5_hook;

where enum kadm5_hook_stage is:
enum kadm5_hook_stage {
    KADM5_HOOK_STAGE_PRECOMMIT,
    KADM5_HOOK_STAGE_POSTCOMMIT
};

init creates a hook context that is passed into all subsequent calls. chpass is called for password changes, create is called for principal creation (with the newly-created principal in the kadm5_principal_ent_t argument), and modify is called when a principal is modified.
These functions should follow the normal Kerberos calling convention of returning 0 on success and a Kerberos error code on failure, setting the Kerberos error message in the provided context.
This change is submitted under the following license
Copyright 2012, 2013
The Board of Trustees of the Leland Stanford Junior University
Copying and distribution of this file, with or without modification, are permitted in any medium without royalty provided the copyright notice and this notice are preserved. This file is offered as-is, without any warranty.","Yeah, something like that.  Or disable password quality checks at init time, or special-case the K/M principal.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,462,2018-12-23T08:19:44Z,2018-12-26T17:04:07Z,2018-12-27T05:28:42Z,MERGED,True,935,103,20,https://github.com/lhoward,kadm5: pre/post-commit plugin hook for kadm5 update operations (#397),2,[],https://github.com/heimdal/heimdal/pull/462,https://github.com/lhoward,20,https://github.com/heimdal/heimdal/pull/462#issuecomment-450075286,"This change adds plugin support to the kadmin libraries for performing actions before and after a password change is committed to the KDC database and after a change is made to the attributes of a principal (specifically, a change to DISALLOW_ALL_TIX).
This change adds a hook_libraries configuration option to the [kadmin] section of krb5.conf (or kdc.conf if you use that file) that must be set to load the module. That configuration option is in the form:
[kadmin]
  hook_libraries = /usr/local/lib/krb5/plugins/kadm5_hook/krb5_sync.so

where the value is the full path to the plugin that you want to load. If this option is not present, kadmind will not load a plugin and the changes from the patch will be inactive. If this option is given and the plugin cannot be loaded, kadmind startup will abort with a (hopefully useful) error message in syslog.
Any plugin used with this patch must expose a public struct named kadm5_hook. That struct must contain the following:
typedef struct kadm5_hook {
    const char *name;
    int version;
    const char *vendor;

    krb5_error_code (*init)(krb5_context, void **);
    void (*fini)(krb5_context, void *);

    krb5_error_code (*chpass)(krb5_context, void *, enum kadm5_hook_stage,
                              krb5_principal, const char *);
    krb5_error_code (*create)(krb5_context, void *, enum kadm5_hook_stage,
                              kadm5_principal_ent_t, uint32_t mask,
                              const char *password);
    krb5_error_code (*modify)(krb5_context, void *, enum kadm5_hook_stage,
                              kadm5_principal_ent_t, uint32_t mask);
    ...
} kadm5_hook;

where enum kadm5_hook_stage is:
enum kadm5_hook_stage {
    KADM5_HOOK_STAGE_PRECOMMIT,
    KADM5_HOOK_STAGE_POSTCOMMIT
};

init creates a hook context that is passed into all subsequent calls. chpass is called for password changes, create is called for principal creation (with the newly-created principal in the kadm5_principal_ent_t argument), and modify is called when a principal is modified.
These functions should follow the normal Kerberos calling convention of returning 0 on success and a Kerberos error code on failure, setting the Kerberos error message in the provided context.
This change is submitted under the following license
Copyright 2012, 2013
The Board of Trustees of the Leland Stanford Junior University
Copying and distribution of this file, with or without modification, are permitted in any medium without royalty provided the copyright notice and this notice are preserved. This file is offered as-is, without any warranty.","Realm initialization rewrites the random passwords with real random keys, so perhaps the real solution is to create a principal with no password and no keys, before calling generating a random key.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,462,2018-12-23T08:19:44Z,2018-12-26T17:04:07Z,2018-12-27T05:28:42Z,MERGED,True,935,103,20,https://github.com/lhoward,kadm5: pre/post-commit plugin hook for kadm5 update operations (#397),2,[],https://github.com/heimdal/heimdal/pull/462,https://github.com/lhoward,21,https://github.com/heimdal/heimdal/pull/462#issuecomment-450076410,"This change adds plugin support to the kadmin libraries for performing actions before and after a password change is committed to the KDC database and after a change is made to the attributes of a principal (specifically, a change to DISALLOW_ALL_TIX).
This change adds a hook_libraries configuration option to the [kadmin] section of krb5.conf (or kdc.conf if you use that file) that must be set to load the module. That configuration option is in the form:
[kadmin]
  hook_libraries = /usr/local/lib/krb5/plugins/kadm5_hook/krb5_sync.so

where the value is the full path to the plugin that you want to load. If this option is not present, kadmind will not load a plugin and the changes from the patch will be inactive. If this option is given and the plugin cannot be loaded, kadmind startup will abort with a (hopefully useful) error message in syslog.
Any plugin used with this patch must expose a public struct named kadm5_hook. That struct must contain the following:
typedef struct kadm5_hook {
    const char *name;
    int version;
    const char *vendor;

    krb5_error_code (*init)(krb5_context, void **);
    void (*fini)(krb5_context, void *);

    krb5_error_code (*chpass)(krb5_context, void *, enum kadm5_hook_stage,
                              krb5_principal, const char *);
    krb5_error_code (*create)(krb5_context, void *, enum kadm5_hook_stage,
                              kadm5_principal_ent_t, uint32_t mask,
                              const char *password);
    krb5_error_code (*modify)(krb5_context, void *, enum kadm5_hook_stage,
                              kadm5_principal_ent_t, uint32_t mask);
    ...
} kadm5_hook;

where enum kadm5_hook_stage is:
enum kadm5_hook_stage {
    KADM5_HOOK_STAGE_PRECOMMIT,
    KADM5_HOOK_STAGE_POSTCOMMIT
};

init creates a hook context that is passed into all subsequent calls. chpass is called for password changes, create is called for principal creation (with the newly-created principal in the kadm5_principal_ent_t argument), and modify is called when a principal is modified.
These functions should follow the normal Kerberos calling convention of returning 0 on success and a Kerberos error code on failure, setting the Kerberos error message in the provided context.
This change is submitted under the following license
Copyright 2012, 2013
The Board of Trustees of the Leland Stanford Junior University
Copying and distribution of this file, with or without modification, are permitted in any medium without royalty provided the copyright notice and this notice are preserved. This file is offered as-is, without any warranty.","OK, we can do this, cleaner, tests pass:
diff --git a/kadmin/init.c b/kadmin/init.c
index 20ed93216..47201424e 100644
--- a/kadmin/init.c
+++ b/kadmin/init.c
@@ -52,11 +52,6 @@ create_random_entry(krb5_principal princ,
     krb5_keyblock *keys;
     int n_keys, i;
     char *name;
-    const char *password;
-    char pwbuf[512];
-
-    random_password(pwbuf, sizeof(pwbuf));
-    password = pwbuf;
 
     ret = krb5_unparse_name(context, princ, &name);
     if (ret) {
@@ -76,14 +71,14 @@ create_random_entry(krb5_principal princ,
        mask |= KADM5_MAX_RLIFE;
     }
     ent.attributes |= attributes | KRB5_KDB_DISALLOW_ALL_TIX;
-    mask |= KADM5_ATTRIBUTES;
+    mask |= KADM5_ATTRIBUTES | KADM5_KEY_DATA;
 
-    /* Create the entry with a random password */
-    ret = kadm5_create_principal(kadm_handle, &ent, mask, password);
+    /* Create the entry with no keys or password */
+    ret = kadm5_s_create_principal_with_key(kadm_handle, &ent, mask);
     if(ret) {
        if (ret == KADM5_DUP && (flags & CRE_DUP_OK))
            goto out;
-       krb5_warn(context, ret, ""create_random_entry(%s): randkey failed"",
+       krb5_warn(context, ret, ""create_random_entry(%s): create failed"",
                  name);
        goto out;
     }",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,462,2018-12-23T08:19:44Z,2018-12-26T17:04:07Z,2018-12-27T05:28:42Z,MERGED,True,935,103,20,https://github.com/lhoward,kadm5: pre/post-commit plugin hook for kadm5 update operations (#397),2,[],https://github.com/heimdal/heimdal/pull/462,https://github.com/lhoward,22,https://github.com/heimdal/heimdal/pull/462#issuecomment-450077683,"This change adds plugin support to the kadmin libraries for performing actions before and after a password change is committed to the KDC database and after a change is made to the attributes of a principal (specifically, a change to DISALLOW_ALL_TIX).
This change adds a hook_libraries configuration option to the [kadmin] section of krb5.conf (or kdc.conf if you use that file) that must be set to load the module. That configuration option is in the form:
[kadmin]
  hook_libraries = /usr/local/lib/krb5/plugins/kadm5_hook/krb5_sync.so

where the value is the full path to the plugin that you want to load. If this option is not present, kadmind will not load a plugin and the changes from the patch will be inactive. If this option is given and the plugin cannot be loaded, kadmind startup will abort with a (hopefully useful) error message in syslog.
Any plugin used with this patch must expose a public struct named kadm5_hook. That struct must contain the following:
typedef struct kadm5_hook {
    const char *name;
    int version;
    const char *vendor;

    krb5_error_code (*init)(krb5_context, void **);
    void (*fini)(krb5_context, void *);

    krb5_error_code (*chpass)(krb5_context, void *, enum kadm5_hook_stage,
                              krb5_principal, const char *);
    krb5_error_code (*create)(krb5_context, void *, enum kadm5_hook_stage,
                              kadm5_principal_ent_t, uint32_t mask,
                              const char *password);
    krb5_error_code (*modify)(krb5_context, void *, enum kadm5_hook_stage,
                              kadm5_principal_ent_t, uint32_t mask);
    ...
} kadm5_hook;

where enum kadm5_hook_stage is:
enum kadm5_hook_stage {
    KADM5_HOOK_STAGE_PRECOMMIT,
    KADM5_HOOK_STAGE_POSTCOMMIT
};

init creates a hook context that is passed into all subsequent calls. chpass is called for password changes, create is called for principal creation (with the newly-created principal in the kadm5_principal_ent_t argument), and modify is called when a principal is modified.
These functions should follow the normal Kerberos calling convention of returning 0 on success and a Kerberos error code on failure, setting the Kerberos error message in the provided context.
This change is submitted under the following license
Copyright 2012, 2013
The Board of Trustees of the Leland Stanford Junior University
Copying and distribution of this file, with or without modification, are permitted in any medium without royalty provided the copyright notice and this notice are preserved. This file is offered as-is, without any warranty.",Fixed in 83def5b,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,463,2018-12-24T03:39:21Z,2018-12-24T07:06:02Z,2018-12-24T07:06:02Z,MERGED,True,12,3,1,https://github.com/lhoward,kinit: don't leave dangling temporary ccaches,1,[],https://github.com/heimdal/heimdal/pull/463,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/463,kinit does not destroy ccaches created with krb5_cc_new_unique() if ticket acquisition fails. This was leaving dangling keyring entries with the keyring ccache.,kinit does not destroy ccaches created with krb5_cc_new_unique() if ticket acquisition fails. This was leaving dangling keyring entries with the keyring ccache.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,464,2018-12-24T04:31:40Z,2018-12-26T04:38:49Z,2018-12-27T15:24:29Z,MERGED,True,103,40,6,https://github.com/lhoward,kadmin: allow enforcing password quality on admin password change,1,[],https://github.com/heimdal/heimdal/pull/464,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/464,"This patch adds the enforce_on_admin_set configuration knob in the [password_quality] section. When this is enabled, administrative password changes via the kadmin or kpasswd protocols will be subject to password quality checks. (An administrative password change is one where the authenticating principal is different to the principal whose password is being changed.)
This refactors some of the authorization logic in both kadmind and kpasswdd so please review carefully.","This patch adds the enforce_on_admin_set configuration knob in the [password_quality] section. When this is enabled, administrative password changes via the kadmin or kpasswd protocols will be subject to password quality checks. (An administrative password change is one where the authenticating principal is different to the principal whose password is being changed.)
This refactors some of the authorization logic in both kadmind and kpasswdd so please review carefully.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,464,2018-12-24T04:31:40Z,2018-12-26T04:38:49Z,2018-12-27T15:24:29Z,MERGED,True,103,40,6,https://github.com/lhoward,kadmin: allow enforcing password quality on admin password change,1,[],https://github.com/heimdal/heimdal/pull/464,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/464#issuecomment-449684893,"This patch adds the enforce_on_admin_set configuration knob in the [password_quality] section. When this is enabled, administrative password changes via the kadmin or kpasswd protocols will be subject to password quality checks. (An administrative password change is one where the authenticating principal is different to the principal whose password is being changed.)
This refactors some of the authorization logic in both kadmind and kpasswdd so please review carefully.",cc @rra,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,464,2018-12-24T04:31:40Z,2018-12-26T04:38:49Z,2018-12-27T15:24:29Z,MERGED,True,103,40,6,https://github.com/lhoward,kadmin: allow enforcing password quality on admin password change,1,[],https://github.com/heimdal/heimdal/pull/464,https://github.com/lhoward,3,https://github.com/heimdal/heimdal/pull/464#issuecomment-449692101,"This patch adds the enforce_on_admin_set configuration knob in the [password_quality] section. When this is enabled, administrative password changes via the kadmin or kpasswd protocols will be subject to password quality checks. (An administrative password change is one where the authenticating principal is different to the principal whose password is being changed.)
This refactors some of the authorization logic in both kadmind and kpasswdd so please review carefully.","check_on_admin_set defaults to TRUE, based on notes from conversation with @jaltman",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,464,2018-12-24T04:31:40Z,2018-12-26T04:38:49Z,2018-12-27T15:24:29Z,MERGED,True,103,40,6,https://github.com/lhoward,kadmin: allow enforcing password quality on admin password change,1,[],https://github.com/heimdal/heimdal/pull/464,https://github.com/lhoward,4,https://github.com/heimdal/heimdal/pull/464#issuecomment-449839492,"This patch adds the enforce_on_admin_set configuration knob in the [password_quality] section. When this is enabled, administrative password changes via the kadmin or kpasswd protocols will be subject to password quality checks. (An administrative password change is one where the authenticating principal is different to the principal whose password is being changed.)
This refactors some of the authorization logic in both kadmind and kpasswdd so please review carefully.","There may be a better configuration directive than check_on_admin_set, input appreciated. (It's in the [password_quality] section so there is some context.)",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,464,2018-12-24T04:31:40Z,2018-12-26T04:38:49Z,2018-12-27T15:24:29Z,MERGED,True,103,40,6,https://github.com/lhoward,kadmin: allow enforcing password quality on admin password change,1,[],https://github.com/heimdal/heimdal/pull/464,https://github.com/macrotex,5,https://github.com/heimdal/heimdal/pull/464#issuecomment-449852483,"This patch adds the enforce_on_admin_set configuration knob in the [password_quality] section. When this is enabled, administrative password changes via the kadmin or kpasswd protocols will be subject to password quality checks. (An administrative password change is one where the authenticating principal is different to the principal whose password is being changed.)
This refactors some of the authorization logic in both kadmind and kpasswdd so please review carefully.",How about enforce instead of change: enforce_on_admin_set?,True,{'THUMBS_UP': ['https://github.com/nicowilliams']}
heimdal/heimdal,https://github.com/heimdal/heimdal,464,2018-12-24T04:31:40Z,2018-12-26T04:38:49Z,2018-12-27T15:24:29Z,MERGED,True,103,40,6,https://github.com/lhoward,kadmin: allow enforcing password quality on admin password change,1,[],https://github.com/heimdal/heimdal/pull/464,https://github.com/macrotex,6,https://github.com/heimdal/heimdal/pull/464#issuecomment-449853456,"This patch adds the enforce_on_admin_set configuration knob in the [password_quality] section. When this is enabled, administrative password changes via the kadmin or kpasswd protocols will be subject to password quality checks. (An administrative password change is one where the authenticating principal is different to the principal whose password is being changed.)
This refactors some of the authorization logic in both kadmind and kpasswdd so please review carefully.","Along with this change the password used in tests/kdc/check-kadmin.in should be changed from foo to something longer, otherwise the tests in that file will fail.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,464,2018-12-24T04:31:40Z,2018-12-26T04:38:49Z,2018-12-27T15:24:29Z,MERGED,True,103,40,6,https://github.com/lhoward,kadmin: allow enforcing password quality on admin password change,1,[],https://github.com/heimdal/heimdal/pull/464,https://github.com/lhoward,7,https://github.com/heimdal/heimdal/pull/464#issuecomment-449875458,"This patch adds the enforce_on_admin_set configuration knob in the [password_quality] section. When this is enabled, administrative password changes via the kadmin or kpasswd protocols will be subject to password quality checks. (An administrative password change is one where the authenticating principal is different to the principal whose password is being changed.)
This refactors some of the authorization logic in both kadmind and kpasswdd so please review carefully.","Hmm, they are passing, sounds like that should not be the case then. Will investigate.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,464,2018-12-24T04:31:40Z,2018-12-26T04:38:49Z,2018-12-27T15:24:29Z,MERGED,True,103,40,6,https://github.com/lhoward,kadmin: allow enforcing password quality on admin password change,1,[],https://github.com/heimdal/heimdal/pull/464,https://github.com/nicowilliams,8,https://github.com/heimdal/heimdal/pull/464#issuecomment-449877688,"This patch adds the enforce_on_admin_set configuration knob in the [password_quality] section. When this is enabled, administrative password changes via the kadmin or kpasswd protocols will be subject to password quality checks. (An administrative password change is one where the authenticating principal is different to the principal whose password is being changed.)
This refactors some of the authorization logic in both kadmind and kpasswdd so please review carefully.","@macrotex @lhoward the default password quality policy is min-length 6.  tests/kdc/check-kadmin uses a three-letter password, so something went wrong.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,464,2018-12-24T04:31:40Z,2018-12-26T04:38:49Z,2018-12-27T15:24:29Z,MERGED,True,103,40,6,https://github.com/lhoward,kadmin: allow enforcing password quality on admin password change,1,[],https://github.com/heimdal/heimdal/pull/464,https://github.com/lhoward,9,https://github.com/heimdal/heimdal/pull/464#issuecomment-449881033,"This patch adds the enforce_on_admin_set configuration knob in the [password_quality] section. When this is enabled, administrative password changes via the kadmin or kpasswd protocols will be subject to password quality checks. (An administrative password change is one where the authenticating principal is different to the principal whose password is being changed.)
This refactors some of the authorization logic in both kadmind and kpasswdd so please review carefully.","On another note, I left the password quality check in kadmind but this still allows an administrator to bypass it using kadmin -l. What’s the right behavior? Maybe the quality check needs to be moved into the change password function itself?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,464,2018-12-24T04:31:40Z,2018-12-26T04:38:49Z,2018-12-27T15:24:29Z,MERGED,True,103,40,6,https://github.com/lhoward,kadmin: allow enforcing password quality on admin password change,1,[],https://github.com/heimdal/heimdal/pull/464,https://github.com/lhoward,10,https://github.com/heimdal/heimdal/pull/464#issuecomment-449885086,"This patch adds the enforce_on_admin_set configuration knob in the [password_quality] section. When this is enabled, administrative password changes via the kadmin or kpasswd protocols will be subject to password quality checks. (An administrative password change is one where the authenticating principal is different to the principal whose password is being changed.)
This refactors some of the authorization logic in both kadmind and kpasswdd so please review carefully.","So: the issue with the test unexpectedly passing was that we didn't in the add new key path, nor in kadmin local mode. The first is fixed, not the second. Speaking with @nicowilliams, he is happy for kadmin in local mode to not honor password policies, but I'm happy to implement either way – please reply inline.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,464,2018-12-24T04:31:40Z,2018-12-26T04:38:49Z,2018-12-27T15:24:29Z,MERGED,True,103,40,6,https://github.com/lhoward,kadmin: allow enforcing password quality on admin password change,1,[],https://github.com/heimdal/heimdal/pull/464,https://github.com/macrotex,11,https://github.com/heimdal/heimdal/pull/464#issuecomment-449889017,"This patch adds the enforce_on_admin_set configuration knob in the [password_quality] section. When this is enabled, administrative password changes via the kadmin or kpasswd protocols will be subject to password quality checks. (An administrative password change is one where the authenticating principal is different to the principal whose password is being changed.)
This refactors some of the authorization logic in both kadmind and kpasswdd so please review carefully.","It is useful for kadmin -l to bypass the password quality checks (otherwise, to force the change requires messing about with the configuration file).",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,464,2018-12-24T04:31:40Z,2018-12-26T04:38:49Z,2018-12-27T15:24:29Z,MERGED,True,103,40,6,https://github.com/lhoward,kadmin: allow enforcing password quality on admin password change,1,[],https://github.com/heimdal/heimdal/pull/464,https://github.com/lhoward,12,https://github.com/heimdal/heimdal/pull/464#issuecomment-449889063,"This patch adds the enforce_on_admin_set configuration knob in the [password_quality] section. When this is enabled, administrative password changes via the kadmin or kpasswd protocols will be subject to password quality checks. (An administrative password change is one where the authenticating principal is different to the principal whose password is being changed.)
This refactors some of the authorization logic in both kadmind and kpasswdd so please review carefully.","Great, OK will merge pending review.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,464,2018-12-24T04:31:40Z,2018-12-26T04:38:49Z,2018-12-27T15:24:29Z,MERGED,True,103,40,6,https://github.com/lhoward,kadmin: allow enforcing password quality on admin password change,1,[],https://github.com/heimdal/heimdal/pull/464,https://github.com/macrotex,13,https://github.com/heimdal/heimdal/pull/464#issuecomment-449889542,"This patch adds the enforce_on_admin_set configuration knob in the [password_quality] section. When this is enabled, administrative password changes via the kadmin or kpasswd protocols will be subject to password quality checks. (An administrative password change is one where the authenticating principal is different to the principal whose password is being changed.)
This refactors some of the authorization logic in both kadmind and kpasswdd so please review carefully.","One tiny correction: I would change ""to"" to ""from"" in

authenticating principal differs to the subject of the password change

(doc/setup.texi)",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,464,2018-12-24T04:31:40Z,2018-12-26T04:38:49Z,2018-12-27T15:24:29Z,MERGED,True,103,40,6,https://github.com/lhoward,kadmin: allow enforcing password quality on admin password change,1,[],https://github.com/heimdal/heimdal/pull/464,https://github.com/lhoward,14,https://github.com/heimdal/heimdal/pull/464#issuecomment-449890279,"This patch adds the enforce_on_admin_set configuration knob in the [password_quality] section. When this is enabled, administrative password changes via the kadmin or kpasswd protocols will be subject to password quality checks. (An administrative password change is one where the authenticating principal is different to the principal whose password is being changed.)
This refactors some of the authorization logic in both kadmind and kpasswdd so please review carefully.",Fixed,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,464,2018-12-24T04:31:40Z,2018-12-26T04:38:49Z,2018-12-27T15:24:29Z,MERGED,True,103,40,6,https://github.com/lhoward,kadmin: allow enforcing password quality on admin password change,1,[],https://github.com/heimdal/heimdal/pull/464,https://github.com/lhoward,15,https://github.com/heimdal/heimdal/pull/464#issuecomment-449893564,"This patch adds the enforce_on_admin_set configuration knob in the [password_quality] section. When this is enabled, administrative password changes via the kadmin or kpasswd protocols will be subject to password quality checks. (An administrative password change is one where the authenticating principal is different to the principal whose password is being changed.)
This refactors some of the authorization logic in both kadmind and kpasswdd so please review carefully.",Hopefully fixed LDAP test breakage,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,464,2018-12-24T04:31:40Z,2018-12-26T04:38:49Z,2018-12-27T15:24:29Z,MERGED,True,103,40,6,https://github.com/lhoward,kadmin: allow enforcing password quality on admin password change,1,[],https://github.com/heimdal/heimdal/pull/464,https://github.com/nicowilliams,16,https://github.com/heimdal/heimdal/pull/464#issuecomment-449893836,"This patch adds the enforce_on_admin_set configuration knob in the [password_quality] section. When this is enabled, administrative password changes via the kadmin or kpasswd protocols will be subject to password quality checks. (An administrative password change is one where the authenticating principal is different to the principal whose password is being changed.)
This refactors some of the authorization logic in both kadmind and kpasswdd so please review carefully.","Re: kadmin -l, well, with the new kadm5 hook infrastructure, arguably the right thing to do is to move the password quality stuff into the hooks, and then it will work even in the kadmin -l.  Admins can always set KRB5_CONFIG if they want to override password quality policy, or we could add an option to the cpw command to allow overriding policy, and then users who have permission to could do it (but then that would require making that information available to the hooks... hmmm).  Anyways, I'm partial to leaving it all as-is for now.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,464,2018-12-24T04:31:40Z,2018-12-26T04:38:49Z,2018-12-27T15:24:29Z,MERGED,True,103,40,6,https://github.com/lhoward,kadmin: allow enforcing password quality on admin password change,1,[],https://github.com/heimdal/heimdal/pull/464,https://github.com/lhoward,17,https://github.com/heimdal/heimdal/pull/464#issuecomment-449894584,"This patch adds the enforce_on_admin_set configuration knob in the [password_quality] section. When this is enabled, administrative password changes via the kadmin or kpasswd protocols will be subject to password quality checks. (An administrative password change is one where the authenticating principal is different to the principal whose password is being changed.)
This refactors some of the authorization logic in both kadmind and kpasswdd so please review carefully.","The only magic thing about the password quality stuff, as it stands today, is that it can return an error string to the client. We could add that to the hook API now for future-proofing, although we'd still need to change the kadm5 API (or store a last-error string in the kadm5_server_context) to bubble it up to kadmind.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,464,2018-12-24T04:31:40Z,2018-12-26T04:38:49Z,2018-12-27T15:24:29Z,MERGED,True,103,40,6,https://github.com/lhoward,kadmin: allow enforcing password quality on admin password change,1,[],https://github.com/heimdal/heimdal/pull/464,https://github.com/nicowilliams,18,https://github.com/heimdal/heimdal/pull/464#issuecomment-449895245,"This patch adds the enforce_on_admin_set configuration knob in the [password_quality] section. When this is enabled, administrative password changes via the kadmin or kpasswd protocols will be subject to password quality checks. (An administrative password change is one where the authenticating principal is different to the principal whose password is being changed.)
This refactors some of the authorization logic in both kadmind and kpasswdd so please review carefully.","Right, so leave as-is for now, but separately from this PR we should revisit the hook API/ABI to make sure that we can output additional error information.  The kadm5 API/ABI can't be broken, so we'd have to communicate error strings / info via the kadm5 context of via new/replacement kadm5 APIs.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,464,2018-12-24T04:31:40Z,2018-12-26T04:38:49Z,2018-12-27T15:24:29Z,MERGED,True,103,40,6,https://github.com/lhoward,kadmin: allow enforcing password quality on admin password change,1,[],https://github.com/heimdal/heimdal/pull/464,https://github.com/nicowilliams,19,https://github.com/heimdal/heimdal/pull/464#issuecomment-449899709,"This patch adds the enforce_on_admin_set configuration knob in the [password_quality] section. When this is enabled, administrative password changes via the kadmin or kpasswd protocols will be subject to password quality checks. (An administrative password change is one where the authenticating principal is different to the principal whose password is being changed.)
This refactors some of the authorization logic in both kadmind and kpasswdd so please review carefully.","All my comments are in.
Requested changes:

add a check that too-simple passwords are rejected
future-proof the $foopassword",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,464,2018-12-24T04:31:40Z,2018-12-26T04:38:49Z,2018-12-27T15:24:29Z,MERGED,True,103,40,6,https://github.com/lhoward,kadmin: allow enforcing password quality on admin password change,1,[],https://github.com/heimdal/heimdal/pull/464,https://github.com/macrotex,20,https://github.com/heimdal/heimdal/pull/464#issuecomment-450171255,"This patch adds the enforce_on_admin_set configuration knob in the [password_quality] section. When this is enabled, administrative password changes via the kadmin or kpasswd protocols will be subject to password quality checks. (An administrative password change is one where the authenticating principal is different to the principal whose password is being changed.)
This refactors some of the authorization logic in both kadmind and kpasswdd so please review carefully.","@lhoward Some documentation on enforce_on_admin_set should be added to lib/krb5/krb5.conf.5 under the [password_quality] section. I can submit this as a pull request, if you like.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,465,2018-12-24T07:14:00Z,2018-12-24T18:13:30Z,2018-12-24T18:13:30Z,MERGED,True,200,7,4,https://github.com/lhoward,hx509: update gen_req.sh for OpenSSL 1.1 (#392),1,[],https://github.com/heimdal/heimdal/pull/465,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/465,"OpenSSL 1.1 has the pkInitKDC OID built in, which breaks as it was redefined by openssl.cnf in Heimdal. Try to determine if OpenSSL >= 1.1 and if so, use a configuration file that omits this OID definition. The implementation is not robust but as this is simply an example (not run by the test suites), it should be adequate.","OpenSSL 1.1 has the pkInitKDC OID built in, which breaks as it was redefined by openssl.cnf in Heimdal. Try to determine if OpenSSL >= 1.1 and if so, use a configuration file that omits this OID definition. The implementation is not robust but as this is simply an example (not run by the test suites), it should be adequate.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,466,2018-12-24T17:04:09Z,2018-12-26T22:55:14Z,2018-12-26T22:55:14Z,MERGED,True,56,33,7,https://github.com/iboukris,Samba Heimdal upgrade,4,[],https://github.com/heimdal/heimdal/pull/466,https://github.com/iboukris,1,https://github.com/heimdal/heimdal/pull/466,"Recently I got involved in @abartlet's efforts to upgrade Heimdal in Samba, and have come up with some patches to help with that.
Note about the last commit, enterprise vs canonicalize; this is now needed in order to be able to test and exercise flows where enterprise name type is used without canonicalize kdc-req-option, and confirm the name is not being canonicalized by the KDC. It used to be done in Samba torture tests by hooking via send_to_kdc and removing the canonicalize flag but this now fails due to PA-REQ-ENC-PA-REP protection.
I noticed a related discussion in issue #452, if we prefer to keep the alignment of the two flags for convenience then perhaps we can move both to kinit code so that other consumer of the API could chose whether or not the canonicalize flag is set (also, this will avoid changing the tests).","Recently I got involved in @abartlet's efforts to upgrade Heimdal in Samba, and have come up with some patches to help with that.
Note about the last commit, enterprise vs canonicalize; this is now needed in order to be able to test and exercise flows where enterprise name type is used without canonicalize kdc-req-option, and confirm the name is not being canonicalized by the KDC. It used to be done in Samba torture tests by hooking via send_to_kdc and removing the canonicalize flag but this now fails due to PA-REQ-ENC-PA-REP protection.
I noticed a related discussion in issue #452, if we prefer to keep the alignment of the two flags for convenience then perhaps we can move both to kinit code so that other consumer of the API could chose whether or not the canonicalize flag is set (also, this will avoid changing the tests).",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,466,2018-12-24T17:04:09Z,2018-12-26T22:55:14Z,2018-12-26T22:55:14Z,MERGED,True,56,33,7,https://github.com/iboukris,Samba Heimdal upgrade,4,[],https://github.com/heimdal/heimdal/pull/466,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/466#issuecomment-449761965,"Recently I got involved in @abartlet's efforts to upgrade Heimdal in Samba, and have come up with some patches to help with that.
Note about the last commit, enterprise vs canonicalize; this is now needed in order to be able to test and exercise flows where enterprise name type is used without canonicalize kdc-req-option, and confirm the name is not being canonicalized by the KDC. It used to be done in Samba torture tests by hooking via send_to_kdc and removing the canonicalize flag but this now fails due to PA-REQ-ENC-PA-REP protection.
I noticed a related discussion in issue #452, if we prefer to keep the alignment of the two flags for convenience then perhaps we can move both to kinit code so that other consumer of the API could chose whether or not the canonicalize flag is set (also, this will avoid changing the tests).","LGTM.  I'd like @lhoward to review cc1a957, but I do believe it's correct.
The subject of b1e46b4 should be something more like
KDC: Allow hdb to set the issued ticket's realm

That's all I got.  I'll wait for @lhoward's review.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,466,2018-12-24T17:04:09Z,2018-12-26T22:55:14Z,2018-12-26T22:55:14Z,MERGED,True,56,33,7,https://github.com/iboukris,Samba Heimdal upgrade,4,[],https://github.com/heimdal/heimdal/pull/466,https://github.com/iboukris,3,https://github.com/heimdal/heimdal/pull/466#issuecomment-449765050,"Recently I got involved in @abartlet's efforts to upgrade Heimdal in Samba, and have come up with some patches to help with that.
Note about the last commit, enterprise vs canonicalize; this is now needed in order to be able to test and exercise flows where enterprise name type is used without canonicalize kdc-req-option, and confirm the name is not being canonicalized by the KDC. It used to be done in Samba torture tests by hooking via send_to_kdc and removing the canonicalize flag but this now fails due to PA-REQ-ENC-PA-REP protection.
I noticed a related discussion in issue #452, if we prefer to keep the alignment of the two flags for convenience then perhaps we can move both to kinit code so that other consumer of the API could chose whether or not the canonicalize flag is set (also, this will avoid changing the tests).","My last comment was wrong, please ignore.
I've updated the subject of commit b1e46b4.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,466,2018-12-24T17:04:09Z,2018-12-26T22:55:14Z,2018-12-26T22:55:14Z,MERGED,True,56,33,7,https://github.com/iboukris,Samba Heimdal upgrade,4,[],https://github.com/heimdal/heimdal/pull/466,https://github.com/jaltman,4,https://github.com/heimdal/heimdal/pull/466#issuecomment-450023208,"Recently I got involved in @abartlet's efforts to upgrade Heimdal in Samba, and have come up with some patches to help with that.
Note about the last commit, enterprise vs canonicalize; this is now needed in order to be able to test and exercise flows where enterprise name type is used without canonicalize kdc-req-option, and confirm the name is not being canonicalized by the KDC. It used to be done in Samba torture tests by hooking via send_to_kdc and removing the canonicalize flag but this now fails due to PA-REQ-ENC-PA-REP protection.
I noticed a related discussion in issue #452, if we prefer to keep the alignment of the two flags for convenience then perhaps we can move both to kinit code so that other consumer of the API could chose whether or not the canonicalize flag is set (also, this will avoid changing the tests).",ab7685a  and 4bb9e44 look good to me.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,467,2018-12-24T21:06:45Z,2018-12-24T22:47:36Z,2018-12-24T22:47:36Z,MERGED,True,1,6,1,https://github.com/jaltman,Corrections for a couple of issues identified by Coverity,2,[],https://github.com/heimdal/heimdal/pull/467,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/467,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,468,2018-12-26T02:48:42Z,2018-12-26T04:11:20Z,2018-12-26T04:11:37Z,MERGED,True,592,2848,42,https://github.com/lhoward,Do not call getpwuid() if possible; use getpwuid_r() instead,14,[],https://github.com/heimdal/heimdal/pull/468,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/468,"Revive @nicowilliams' patch in #343, rebased against master.","Revive @nicowilliams' patch in #343, rebased against master.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,468,2018-12-26T02:48:42Z,2018-12-26T04:11:20Z,2018-12-26T04:11:37Z,MERGED,True,592,2848,42,https://github.com/lhoward,Do not call getpwuid() if possible; use getpwuid_r() instead,14,[],https://github.com/heimdal/heimdal/pull/468,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/468#issuecomment-449893813,"Revive @nicowilliams' patch in #343, rebased against master.",fix appl/su breakage,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,468,2018-12-26T02:48:42Z,2018-12-26T04:11:20Z,2018-12-26T04:11:37Z,MERGED,True,592,2848,42,https://github.com/lhoward,Do not call getpwuid() if possible; use getpwuid_r() instead,14,[],https://github.com/heimdal/heimdal/pull/468,https://github.com/nicowilliams,3,https://github.com/heimdal/heimdal/pull/468#issuecomment-449900142,"Revive @nicowilliams' patch in #343, rebased against master.",Thank you for rebasing that!,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,471,2018-12-26T17:24:20Z,2018-12-26T17:51:42Z,2018-12-26T17:51:42Z,MERGED,True,3,4,1,https://github.com/jaltman,lib/wind: PY3 gen-punycode-examples.py,1,[],https://github.com/heimdal/heimdal/pull/471,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/471,"Update gen-punycode-examples.py for python 3.
gen-punycode-examples.py parses the Sample strings from section 7.1
of rfc3492.txt and generates the punycode_examples.[ch] sources containing
the punycode_examples[].
Python 3 requires that print output be surrounded by parentheses
and the split and join operations have been moved from the ""string""
class to built-ins.
This change adds the missing parentheses and switches to the built-in
split and join str operations.
The ""string"" class is no longer required as an import.
Change-Id: Ic5f341080d2ff2feef692c89e0b28dcbf4e48cb4","Update gen-punycode-examples.py for python 3.
gen-punycode-examples.py parses the Sample strings from section 7.1
of rfc3492.txt and generates the punycode_examples.[ch] sources containing
the punycode_examples[].
Python 3 requires that print output be surrounded by parentheses
and the split and join operations have been moved from the ""string""
class to built-ins.
This change adds the missing parentheses and switches to the built-in
split and join str operations.
The ""string"" class is no longer required as an import.
Change-Id: Ic5f341080d2ff2feef692c89e0b28dcbf4e48cb4",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,471,2018-12-26T17:24:20Z,2018-12-26T17:51:42Z,2018-12-26T17:51:42Z,MERGED,True,3,4,1,https://github.com/jaltman,lib/wind: PY3 gen-punycode-examples.py,1,[],https://github.com/heimdal/heimdal/pull/471,https://github.com/jaltman,2,https://github.com/heimdal/heimdal/pull/471#issuecomment-449997277,"Update gen-punycode-examples.py for python 3.
gen-punycode-examples.py parses the Sample strings from section 7.1
of rfc3492.txt and generates the punycode_examples.[ch] sources containing
the punycode_examples[].
Python 3 requires that print output be surrounded by parentheses
and the split and join operations have been moved from the ""string""
class to built-ins.
This change adds the missing parentheses and switches to the built-in
split and join str operations.
The ""string"" class is no longer required as an import.
Change-Id: Ic5f341080d2ff2feef692c89e0b28dcbf4e48cb4",@abartlet @noelpower Please review these changes.   They work on Windows with ActiveState Python 3.5,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,472,2018-12-26T17:35:38Z,2018-12-26T18:03:26Z,2018-12-26T18:03:26Z,MERGED,True,3,2,1,https://github.com/nicowilliams,Deadlock in lib/krb5/mcache.c #432,1,[],https://github.com/heimdal/heimdal/pull/472,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/472,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,473,2018-12-26T18:04:51Z,2018-12-26T20:13:29Z,2018-12-26T20:13:36Z,MERGED,True,1,3,1,https://github.com/jaltman,lib/ipc: client double close of socket file descriptor #431,1,[],https://github.com/heimdal/heimdal/pull/473,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/473,"When connect() fails in connect_unix() the path_ctx.fd is not
set to -1 after close().  When common_release() is executed due
to the error return from connect_unix() it calls close() a second
time.
There is no need to call close() from connect_unix(). Remove the
duplicate request.
This issue was reported by YASUOKA Masahiko.
Change-Id: I825e274cc7f12e50a8779a2b62ddb756817cdb52","When connect() fails in connect_unix() the path_ctx.fd is not
set to -1 after close().  When common_release() is executed due
to the error return from connect_unix() it calls close() a second
time.
There is no need to call close() from connect_unix(). Remove the
duplicate request.
This issue was reported by YASUOKA Masahiko.
Change-Id: I825e274cc7f12e50a8779a2b62ddb756817cdb52",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,474,2018-12-26T21:10:23Z,2018-12-26T22:04:27Z,2018-12-26T22:04:57Z,MERGED,True,1,1,1,https://github.com/jaltman,lib/krb5: send_to_kdc KRB5KDC_ERR_SVC_UNAVAILABLE infinite loop #346,1,[],https://github.com/heimdal/heimdal/pull/474,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/474,"Prior to this change a KDC response of KRB5KDC_ERR_SVC_UNAVAILABLE
would result in the client looping forever.  Setting the action to
KRB5_SENTO_CONTINUE repeats the current loop without altering the
current state.  Hence the infinite loop.
As of this change, the action is set to KRB5_SENDTO_RESET which
forces the current kdc's response to be cleared and then to retry.
If KRB5KDC_ERR_SVC_UNAVAILABLE continues to be returned, the retry
limit will be reached and the loop will end.
This bug was filed by multiple sources including Samba and ScottUrban
on github.
Change-Id: If1611be0ada3422cefae89541ed3b3df1f6efe29","Prior to this change a KDC response of KRB5KDC_ERR_SVC_UNAVAILABLE
would result in the client looping forever.  Setting the action to
KRB5_SENTO_CONTINUE repeats the current loop without altering the
current state.  Hence the infinite loop.
As of this change, the action is set to KRB5_SENDTO_RESET which
forces the current kdc's response to be cleared and then to retry.
If KRB5KDC_ERR_SVC_UNAVAILABLE continues to be returned, the retry
limit will be reached and the loop will end.
This bug was filed by multiple sources including Samba and ScottUrban
on github.
Change-Id: If1611be0ada3422cefae89541ed3b3df1f6efe29",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,475,2018-12-26T22:05:48Z,2018-12-26T22:49:07Z,2018-12-26T23:25:20Z,MERGED,True,1,1,1,https://github.com/jaltman,lib/roken: rk_random_init HAVE_ARC4RANDOM #401,1,[],https://github.com/heimdal/heimdal/pull/475,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/475,"When arc4random() is available, rk_random_init() does not have to
call arc4random_stir().  ac4random_stir() will be called as a result
of the first call to arc4random().
Change-Id: I6f4a3be7c39752746657945ed15896472908f889","When arc4random() is available, rk_random_init() does not have to
call arc4random_stir().  ac4random_stir() will be called as a result
of the first call to arc4random().
Change-Id: I6f4a3be7c39752746657945ed15896472908f889",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,476,2018-12-26T23:28:27Z,2018-12-29T01:26:26Z,2018-12-29T01:26:26Z,MERGED,True,751,175,17,https://github.com/nicowilliams,Fix gss_add_cred() crash when output_cred_handle is NULL (fix #413),1,[],https://github.com/heimdal/heimdal/pull/476,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/476,First pass.  I'm thinking of removing the target_mc stuff -- if you try to add an element for a mech you already have an element for then we should return GSS_S_COMPLETE and be done.,First pass.  I'm thinking of removing the target_mc stuff -- if you try to add an element for a mech you already have an element for then we should return GSS_S_COMPLETE and be done.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,476,2018-12-26T23:28:27Z,2018-12-29T01:26:26Z,2018-12-29T01:26:26Z,MERGED,True,751,175,17,https://github.com/nicowilliams,Fix gss_add_cred() crash when output_cred_handle is NULL (fix #413),1,[],https://github.com/heimdal/heimdal/pull/476,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/476#issuecomment-450041072,First pass.  I'm thinking of removing the target_mc stuff -- if you try to add an element for a mech you already have an element for then we should return GSS_S_COMPLETE and be done.,"Heimdal's interpretation of GSS is a bit funky:


We allow gss_name_t instances to have multiple mech names (MNs).  I suspect this is about SPNEGO, specifically about inquiring a SPNEGO credential's name, but it really shouldn't be necessary.


We seem to allow gss_cred_id_t instances to have multiple {mech, name} elements.  This can be good for acceptors, but it's pretty pointless for initiators.  Acceptors should just always use the default credential and then inquire the context for the name used by the initiator and possibly reject (at the application layer) if that name was not acceptable.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,476,2018-12-26T23:28:27Z,2018-12-29T01:26:26Z,2018-12-29T01:26:26Z,MERGED,True,751,175,17,https://github.com/nicowilliams,Fix gss_add_cred() crash when output_cred_handle is NULL (fix #413),1,[],https://github.com/heimdal/heimdal/pull/476,https://github.com/lhoward,3,https://github.com/heimdal/heimdal/pull/476#issuecomment-450049138,First pass.  I'm thinking of removing the target_mc stuff -- if you try to add an element for a mech you already have an element for then we should return GSS_S_COMPLETE and be done.,did the mcache fix accidentally slip in here?,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,476,2018-12-26T23:28:27Z,2018-12-29T01:26:26Z,2018-12-29T01:26:26Z,MERGED,True,751,175,17,https://github.com/nicowilliams,Fix gss_add_cred() crash when output_cred_handle is NULL (fix #413),1,[],https://github.com/heimdal/heimdal/pull/476,https://github.com/nicowilliams,4,https://github.com/heimdal/heimdal/pull/476#issuecomment-450053502,First pass.  I'm thinking of removing the target_mc stuff -- if you try to add an element for a mech you already have an element for then we should return GSS_S_COMPLETE and be done.,Which mcache fix?  The one for the deadlock?  I pushed it.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,476,2018-12-26T23:28:27Z,2018-12-29T01:26:26Z,2018-12-29T01:26:26Z,MERGED,True,751,175,17,https://github.com/nicowilliams,Fix gss_add_cred() crash when output_cred_handle is NULL (fix #413),1,[],https://github.com/heimdal/heimdal/pull/476,https://github.com/nicowilliams,5,https://github.com/heimdal/heimdal/pull/476#issuecomment-450211574,First pass.  I'm thinking of removing the target_mc stuff -- if you try to add an element for a mech you already have an element for then we should return GSS_S_COMPLETE and be done.,The Travis OS X build evinced a check-ldap failure.  I don't know why that would be.  I've restarted that build in case it's spurious.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,476,2018-12-26T23:28:27Z,2018-12-29T01:26:26Z,2018-12-29T01:26:26Z,MERGED,True,751,175,17,https://github.com/nicowilliams,Fix gss_add_cred() crash when output_cred_handle is NULL (fix #413),1,[],https://github.com/heimdal/heimdal/pull/476,https://github.com/nicowilliams,6,https://github.com/heimdal/heimdal/pull/476#issuecomment-450220125,First pass.  I'm thinking of removing the target_mc stuff -- if you try to add an element for a mech you already have an element for then we should return GSS_S_COMPLETE and be done.,The check-ldap failure is due to a race condition in the test that I'll fix separately.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,476,2018-12-26T23:28:27Z,2018-12-29T01:26:26Z,2018-12-29T01:26:26Z,MERGED,True,751,175,17,https://github.com/nicowilliams,Fix gss_add_cred() crash when output_cred_handle is NULL (fix #413),1,[],https://github.com/heimdal/heimdal/pull/476,https://github.com/nicowilliams,7,https://github.com/heimdal/heimdal/pull/476#issuecomment-450246221,First pass.  I'm thinking of removing the target_mc stuff -- if you try to add an element for a mech you already have an element for then we should return GSS_S_COMPLETE and be done.,Needs more work.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,478,2018-12-27T05:52:55Z,2018-12-27T06:11:28Z,2018-12-31T05:17:26Z,MERGED,True,6,9,3,https://github.com/lhoward,kadmin: do not assign passwords at realm initialization,1,[],https://github.com/heimdal/heimdal/pull/478,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/478,"WIP – tests are failing on my end
Since c6bf100 password quality checks have been moved out of kadmindd and into libkadm5. This means that all password changes are subject to quality checks, if enforce_on_admin_set is true (the default). In rare instances it could be possible for realm initialization to fail because the randomly generated passwords do not pass the password quality test. Fix this by creating principals with no password or key, rather than with a random password.
Random keys continue to be set immediately after the principal is created, and before DISALLOW_ALL_TIX is unset, so there should be no functionality or security implications from this change. It is safe to call a server-side API such as kadm5_s_create_principal_with_key() as local_flag is asserted to be true.","WIP – tests are failing on my end
Since c6bf100 password quality checks have been moved out of kadmindd and into libkadm5. This means that all password changes are subject to quality checks, if enforce_on_admin_set is true (the default). In rare instances it could be possible for realm initialization to fail because the randomly generated passwords do not pass the password quality test. Fix this by creating principals with no password or key, rather than with a random password.
Random keys continue to be set immediately after the principal is created, and before DISALLOW_ALL_TIX is unset, so there should be no functionality or security implications from this change. It is safe to call a server-side API such as kadm5_s_create_principal_with_key() as local_flag is asserted to be true.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,478,2018-12-27T05:52:55Z,2018-12-27T06:11:28Z,2018-12-31T05:17:26Z,MERGED,True,6,9,3,https://github.com/lhoward,kadmin: do not assign passwords at realm initialization,1,[],https://github.com/heimdal/heimdal/pull/478,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/478#issuecomment-450080954,"WIP – tests are failing on my end
Since c6bf100 password quality checks have been moved out of kadmindd and into libkadm5. This means that all password changes are subject to quality checks, if enforce_on_admin_set is true (the default). In rare instances it could be possible for realm initialization to fail because the randomly generated passwords do not pass the password quality test. Fix this by creating principals with no password or key, rather than with a random password.
Random keys continue to be set immediately after the principal is created, and before DISALLOW_ALL_TIX is unset, so there should be no functionality or security implications from this change. It is safe to call a server-side API such as kadm5_s_create_principal_with_key() as local_flag is asserted to be true.","Ah, my tests were failing owing to a local configuration issue. (The previous commit to master was failing because I forgot to export a symbol.)",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,478,2018-12-27T05:52:55Z,2018-12-27T06:11:28Z,2018-12-31T05:17:26Z,MERGED,True,6,9,3,https://github.com/lhoward,kadmin: do not assign passwords at realm initialization,1,[],https://github.com/heimdal/heimdal/pull/478,https://github.com/lhoward,3,https://github.com/heimdal/heimdal/pull/478#issuecomment-450080999,"WIP – tests are failing on my end
Since c6bf100 password quality checks have been moved out of kadmindd and into libkadm5. This means that all password changes are subject to quality checks, if enforce_on_admin_set is true (the default). In rare instances it could be possible for realm initialization to fail because the randomly generated passwords do not pass the password quality test. Fix this by creating principals with no password or key, rather than with a random password.
Random keys continue to be set immediately after the principal is created, and before DISALLOW_ALL_TIX is unset, so there should be no functionality or security implications from this change. It is safe to call a server-side API such as kadm5_s_create_principal_with_key() as local_flag is asserted to be true.",Will merge once tests here pass.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,479,2018-12-27T06:33:32Z,2018-12-27T06:40:58Z,2018-12-27T16:54:30Z,MERGED,True,4,1,1,https://github.com/lhoward,hcrypto: print failure on password mismatch (#469),1,[],https://github.com/heimdal/heimdal/pull/479,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/479,"UI_UTIL_read_pw_string(), an interface borrowed from OpenSSL, should report password verification failure to stderr.","UI_UTIL_read_pw_string(), an interface borrowed from OpenSSL, should report password verification failure to stderr.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,479,2018-12-27T06:33:32Z,2018-12-27T06:40:58Z,2018-12-27T16:54:30Z,MERGED,True,4,1,1,https://github.com/lhoward,hcrypto: print failure on password mismatch (#469),1,[],https://github.com/heimdal/heimdal/pull/479,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/479#issuecomment-450190051,"UI_UTIL_read_pw_string(), an interface borrowed from OpenSSL, should report password verification failure to stderr.",Strange that we call UI_UTIL_read_pw_string() from kinit directly...,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,483,2018-12-27T20:02:37Z,2018-12-27T21:55:50Z,2018-12-27T21:55:50Z,MERGED,True,13,2,3,https://github.com/nicowilliams,Fix check-ldap race condition (fix #482),3,[],https://github.com/heimdal/heimdal/pull/483,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/483,"From the commit:
We start slapd in the foreground (-d0) but backgrounded in the shell,
then we wait 4 seconds.  This causes a race condition however.  This
commit makes the slapd-init script more robust and limits the wait to
however many seconds (up to 30) that slapd needs to start service.

The fix is to loop up to N times checking that slapd is responsive, sleeping a second in between.","From the commit:
We start slapd in the foreground (-d0) but backgrounded in the shell,
then we wait 4 seconds.  This causes a race condition however.  This
commit makes the slapd-init script more robust and limits the wait to
however many seconds (up to 30) that slapd needs to start service.

The fix is to loop up to N times checking that slapd is responsive, sleeping a second in between.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,483,2018-12-27T20:02:37Z,2018-12-27T21:55:50Z,2018-12-27T21:55:50Z,MERGED,True,13,2,3,https://github.com/nicowilliams,Fix check-ldap race condition (fix #482),3,[],https://github.com/heimdal/heimdal/pull/483,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/483#issuecomment-450221087,"From the commit:
We start slapd in the foreground (-d0) but backgrounded in the shell,
then we wait 4 seconds.  This causes a race condition however.  This
commit makes the slapd-init script more robust and limits the wait to
however many seconds (up to 30) that slapd needs to start service.

The fix is to loop up to N times checking that slapd is responsive, sleeping a second in between.","Ah, yes, we'll need to also install ldap-utils, otherwise the Travis builds won't be able to run check-ldap.  I think OS X comes with ldapsearch available, so the Travis OS X recipe shouldn't need changing.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,485,2018-12-28T18:36:30Z,2019-01-02T18:56:06Z,2019-01-02T18:56:06Z,MERGED,True,47,44,10,https://github.com/nicowilliams,Fix VC warnings,10,[],https://github.com/heimdal/heimdal/pull/485,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/485,"These commits fix a bunch of warnings from VC.
I'd like to figure out how to declare printf-like functions to VC as well.  So far I've found how to tell VC that an argument is a format string, but not where the remaining arguments start, or that the arguments are in a va_list passed in.","These commits fix a bunch of warnings from VC.
I'd like to figure out how to declare printf-like functions to VC as well.  So far I've found how to tell VC that an argument is a format string, but not where the remaining arguments start, or that the arguments are in a va_list passed in.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,485,2018-12-28T18:36:30Z,2019-01-02T18:56:06Z,2019-01-02T18:56:06Z,MERGED,True,47,44,10,https://github.com/nicowilliams,Fix VC warnings,10,[],https://github.com/heimdal/heimdal/pull/485,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/485#issuecomment-450408262,"These commits fix a bunch of warnings from VC.
I'd like to figure out how to declare printf-like functions to VC as well.  So far I've found how to tell VC that an argument is a format string, but not where the remaining arguments start, or that the arguments are in a va_list passed in.","Well, VC in Appveyor did not like __declspec(noreturn).  @jaltman, please help.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,485,2018-12-28T18:36:30Z,2019-01-02T18:56:06Z,2019-01-02T18:56:06Z,MERGED,True,47,44,10,https://github.com/nicowilliams,Fix VC warnings,10,[],https://github.com/heimdal/heimdal/pull/485,https://github.com/jaltman,3,https://github.com/heimdal/heimdal/pull/485#issuecomment-450760159,"These commits fix a bunch of warnings from VC.
I'd like to figure out how to declare printf-like functions to VC as well.  So far I've found how to tell VC that an argument is a format string, but not where the remaining arguments start, or that the arguments are in a va_list passed in.",3505037 is fixing a bug.  its not simply a warning suppression.  I'd prefer it if the commit message described the bug fix.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,485,2018-12-28T18:36:30Z,2019-01-02T18:56:06Z,2019-01-02T18:56:06Z,MERGED,True,47,44,10,https://github.com/nicowilliams,Fix VC warnings,10,[],https://github.com/heimdal/heimdal/pull/485,https://github.com/nicowilliams,4,https://github.com/heimdal/heimdal/pull/485#issuecomment-450765389,"These commits fix a bunch of warnings from VC.
I'd like to figure out how to declare printf-like functions to VC as well.  So far I've found how to tell VC that an argument is a format string, but not where the remaining arguments start, or that the arguments are in a va_list passed in.",Fixed.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,485,2018-12-28T18:36:30Z,2019-01-02T18:56:06Z,2019-01-02T18:56:06Z,MERGED,True,47,44,10,https://github.com/nicowilliams,Fix VC warnings,10,[],https://github.com/heimdal/heimdal/pull/485,https://github.com/jaltman,5,https://github.com/heimdal/heimdal/pull/485#issuecomment-450912046,"These commits fix a bunch of warnings from VC.
I'd like to figure out how to declare printf-like functions to VC as well.  So far I've found how to tell VC that an argument is a format string, but not where the remaining arguments start, or that the arguments are in a va_list passed in.","@nicowilliams now that bec4818 is on master, could you rebase this series?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,485,2018-12-28T18:36:30Z,2019-01-02T18:56:06Z,2019-01-02T18:56:06Z,MERGED,True,47,44,10,https://github.com/nicowilliams,Fix VC warnings,10,[],https://github.com/heimdal/heimdal/pull/485,https://github.com/nicowilliams,6,https://github.com/heimdal/heimdal/pull/485#issuecomment-450928364,"These commits fix a bunch of warnings from VC.
I'd like to figure out how to declare printf-like functions to VC as well.  So far I've found how to tell VC that an argument is a format string, but not where the remaining arguments start, or that the arguments are in a va_list passed in.",I've made all the requested changes.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,485,2018-12-28T18:36:30Z,2019-01-02T18:56:06Z,2019-01-02T18:56:06Z,MERGED,True,47,44,10,https://github.com/nicowilliams,Fix VC warnings,10,[],https://github.com/heimdal/heimdal/pull/485,https://github.com/nicowilliams,7,https://github.com/heimdal/heimdal/pull/485#issuecomment-450935288,"These commits fix a bunch of warnings from VC.
I'd like to figure out how to declare printf-like functions to VC as well.  So far I've found how to tell VC that an argument is a format string, but not where the remaining arguments start, or that the arguments are in a va_list passed in.",Should be fixed now.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,485,2018-12-28T18:36:30Z,2019-01-02T18:56:06Z,2019-01-02T18:56:06Z,MERGED,True,47,44,10,https://github.com/nicowilliams,Fix VC warnings,10,[],https://github.com/heimdal/heimdal/pull/485,https://github.com/nicowilliams,8,https://github.com/heimdal/heimdal/pull/485#issuecomment-450938310,"These commits fix a bunch of warnings from VC.
I'd like to figure out how to declare printf-like functions to VC as well.  So far I've found how to tell VC that an argument is a format string, but not where the remaining arguments start, or that the arguments are in a va_list passed in.",It is fixed now.  Tests will pass; please merge when done.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,488,2018-12-29T04:30:57Z,2020-04-24T11:20:05Z,2020-04-24T11:20:05Z,CLOSED,False,40,13,2,https://github.com/nicowilliams,SPNEGO: Use error tokens (init. side) (fix #486),3,[],https://github.com/heimdal/heimdal/pull/488,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/488,"This is just the initiator side, and only about consuming error tokens.  I've not looked at the acceptor side nor whether we have error token non-sending issues as well.","This is just the initiator side, and only about consuming error tokens.  I've not looked at the acceptor side nor whether we have error token non-sending issues as well.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,488,2018-12-29T04:30:57Z,2020-04-24T11:20:05Z,2020-04-24T11:20:05Z,CLOSED,False,40,13,2,https://github.com/nicowilliams,SPNEGO: Use error tokens (init. side) (fix #486),3,[],https://github.com/heimdal/heimdal/pull/488,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/488#issuecomment-450466485,"This is just the initiator side, and only about consuming error tokens.  I've not looked at the acceptor side nor whether we have error token non-sending issues as well.",@lhoward your commit LGTM.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,488,2018-12-29T04:30:57Z,2020-04-24T11:20:05Z,2020-04-24T11:20:05Z,CLOSED,False,40,13,2,https://github.com/nicowilliams,SPNEGO: Use error tokens (init. side) (fix #486),3,[],https://github.com/heimdal/heimdal/pull/488,https://github.com/lhoward,3,https://github.com/heimdal/heimdal/pull/488#issuecomment-450467053,"This is just the initiator side, and only about consuming error tokens.  I've not looked at the acceptor side nor whether we have error token non-sending issues as well.","But this definitely needs testing, Samba test suite ought to do it!",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,488,2018-12-29T04:30:57Z,2020-04-24T11:20:05Z,2020-04-24T11:20:05Z,CLOSED,False,40,13,2,https://github.com/nicowilliams,SPNEGO: Use error tokens (init. side) (fix #486),3,[],https://github.com/heimdal/heimdal/pull/488,https://github.com/lhoward,4,https://github.com/heimdal/heimdal/pull/488#issuecomment-450467840,"This is just the initiator side, and only about consuming error tokens.  I've not looked at the acceptor side nor whether we have error token non-sending issues as well.",Deleted my diff. I need to look at it when I'm less tired.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,488,2018-12-29T04:30:57Z,2020-04-24T11:20:05Z,2020-04-24T11:20:05Z,CLOSED,False,40,13,2,https://github.com/nicowilliams,SPNEGO: Use error tokens (init. side) (fix #486),3,[],https://github.com/heimdal/heimdal/pull/488,https://github.com/lhoward,5,https://github.com/heimdal/heimdal/pull/488#issuecomment-450468050,"This is just the initiator side, and only about consuming error tokens.  I've not looked at the acceptor side nor whether we have error token non-sending issues as well.","Take 4.
diff --git a/lib/gssapi/spnego/init_sec_context.c b/lib/gssapi/spnego/init_sec_context.c
index 006f3ef59..d1d8cb43c 100644
--- a/lib/gssapi/spnego/init_sec_context.c
+++ b/lib/gssapi/spnego/init_sec_context.c
@@ -396,6 +396,7 @@ spnego_reply
     gss_buffer_desc mic_buf, mech_buf;
     gss_buffer_desc mech_output_token;
     gssspnego_ctx ctx;
+    int negState;
 
     *minor_status = 0;
 
@@ -415,21 +416,13 @@ spnego_reply
     if (ret)
       return ret;
 
+    /* The SPNEGO token must be a negTokenResp */
     if (resp.element != choice_NegotiationToken_negTokenResp) {
 	free_NegotiationToken(&resp);
 	*minor_status = 0;
 	return GSS_S_BAD_MECH;
     }
 
-    if (resp.u.negTokenResp.negResult == NULL
-	|| *(resp.u.negTokenResp.negResult) == reject
-	/* || resp.u.negTokenResp.supportedMech == NULL */
-	)
-    {
-	free_NegotiationToken(&resp);
-	return GSS_S_BAD_MECH;
-    }
-
     /*
      * Pick up the mechanism that the acceptor selected, only allow it
      * to be sent in packet.
@@ -437,8 +430,16 @@ spnego_reply
 
     HEIMDAL_MUTEX_lock(&ctx->ctx_id_mutex);
 
-    if (resp.u.negTokenResp.supportedMech) {
+    /*
+     * When negState is absent, the actual state should be inferred from
+     * the state of the negotiated mechanism context. (RFC 4178 4.2.2.)
+     */
+    if (resp.u.negTokenResp.negResult != NULL)
+	negState = *resp.u.negTokenResp.negResult;
+    else
+	negState = accept_incomplete;
 
+    if (resp.u.negTokenResp.supportedMech) {
 	if (ctx->oidlen) {
 	    free_NegotiationToken(&resp);
 	    HEIMDAL_MUTEX_unlock(&ctx->ctx_id_mutex);
@@ -514,15 +515,30 @@ spnego_reply
 	    *minor_status = minor;
 	    return ret;
 	}
+        /*
+         * If the acceptor rejected, we're out even if the inner context is
+         * now complete. Note that the rejection is not integrity-protected.
+         */
+	if (negState == reject) {
+            HEIMDAL_MUTEX_unlock(&ctx->ctx_id_mutex);
+            free_NegotiationToken(&resp);
+            return GSS_S_BAD_MECH;
+        }
+
 	if (ret == GSS_S_COMPLETE) {
 	    ctx->open = 1;
 	}
-    } else if (*(resp.u.negTokenResp.negResult) == accept_completed) {
+    } else if (negState == accept_completed) {
+        /*
+         * Note that the accept_completed isn't integrity-protected, but
+         * ctx->maybe_open can only be true if the inner context is fully
+         * established.
+         */
 	if (ctx->maybe_open)
 	    ctx->open = 1;
     }
 
-    if (*(resp.u.negTokenResp.negResult) == request_mic) {
+    if (negState == request_mic) {
 	ctx->require_mic = 1;
     }",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,488,2018-12-29T04:30:57Z,2020-04-24T11:20:05Z,2020-04-24T11:20:05Z,CLOSED,False,40,13,2,https://github.com/nicowilliams,SPNEGO: Use error tokens (init. side) (fix #486),3,[],https://github.com/heimdal/heimdal/pull/488,https://github.com/lhoward,6,https://github.com/heimdal/heimdal/pull/488#issuecomment-450468098,"This is just the initiator side, and only about consuming error tokens.  I've not looked at the acceptor side nor whether we have error token non-sending issues as well.",Also ctx->open shouldn't be a valid state entering spnego_reply().,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,488,2018-12-29T04:30:57Z,2020-04-24T11:20:05Z,2020-04-24T11:20:05Z,CLOSED,False,40,13,2,https://github.com/nicowilliams,SPNEGO: Use error tokens (init. side) (fix #486),3,[],https://github.com/heimdal/heimdal/pull/488,https://github.com/lhoward,7,https://github.com/heimdal/heimdal/pull/488#issuecomment-450468145,"This is just the initiator side, and only about consuming error tokens.  I've not looked at the acceptor side nor whether we have error token non-sending issues as well.",So maybe instead of setting negState = accept_completed we should return an error there.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,488,2018-12-29T04:30:57Z,2020-04-24T11:20:05Z,2020-04-24T11:20:05Z,CLOSED,False,40,13,2,https://github.com/nicowilliams,SPNEGO: Use error tokens (init. side) (fix #486),3,[],https://github.com/heimdal/heimdal/pull/488,https://github.com/nicowilliams,8,https://github.com/heimdal/heimdal/pull/488#issuecomment-450588657,"This is just the initiator side, and only about consuming error tokens.  I've not looked at the acceptor side nor whether we have error token non-sending issues as well.",Can you push your commits to my branch?,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,488,2018-12-29T04:30:57Z,2020-04-24T11:20:05Z,2020-04-24T11:20:05Z,CLOSED,False,40,13,2,https://github.com/nicowilliams,SPNEGO: Use error tokens (init. side) (fix #486),3,[],https://github.com/heimdal/heimdal/pull/488,https://github.com/lhoward,9,https://github.com/heimdal/heimdal/pull/488#issuecomment-450589807,"This is just the initiator side, and only about consuming error tokens.  I've not looked at the acceptor side nor whether we have error token non-sending issues as well.","Have I permission?
…
Sent from my iPhone
 On 31 Dec 2018, at 08:43, Nico Williams ***@***.***> wrote:

 Can you push your commits to my branch?

 —
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub, or mute the thread.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,488,2018-12-29T04:30:57Z,2020-04-24T11:20:05Z,2020-04-24T11:20:05Z,CLOSED,False,40,13,2,https://github.com/nicowilliams,SPNEGO: Use error tokens (init. side) (fix #486),3,[],https://github.com/heimdal/heimdal/pull/488,https://github.com/lhoward,10,https://github.com/heimdal/heimdal/pull/488#issuecomment-450591338,"This is just the initiator side, and only about consuming error tokens.  I've not looked at the acceptor side nor whether we have error token non-sending issues as well.","OK, I pushed your branch + my diff to heimdal:nicowilliams/fix_486",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,488,2018-12-29T04:30:57Z,2020-04-24T11:20:05Z,2020-04-24T11:20:05Z,CLOSED,False,40,13,2,https://github.com/nicowilliams,SPNEGO: Use error tokens (init. side) (fix #486),3,[],https://github.com/heimdal/heimdal/pull/488,https://github.com/lhoward,11,https://github.com/heimdal/heimdal/pull/488#issuecomment-617435238,"This is just the initiator side, and only about consuming error tokens.  I've not looked at the acceptor side nor whether we have error token non-sending issues as well.",Just was reminded of this. I can take a look vs current code.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,488,2018-12-29T04:30:57Z,2020-04-24T11:20:05Z,2020-04-24T11:20:05Z,CLOSED,False,40,13,2,https://github.com/nicowilliams,SPNEGO: Use error tokens (init. side) (fix #486),3,[],https://github.com/heimdal/heimdal/pull/488,https://github.com/lhoward,12,https://github.com/heimdal/heimdal/pull/488#issuecomment-618952672,"This is just the initiator side, and only about consuming error tokens.  I've not looked at the acceptor side nor whether we have error token non-sending issues as well.",Fixed in master.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,489,2018-12-29T05:41:13Z,2019-01-04T02:06:28Z,2019-01-04T02:06:28Z,MERGED,True,1337,705,45,https://github.com/lhoward,kadm5: refactor krb5 plugin framework,2,[],https://github.com/heimdal/heimdal/pull/489,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/489,WIP,WIP,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,489,2018-12-29T05:41:13Z,2019-01-04T02:06:28Z,2019-01-04T02:06:28Z,MERGED,True,1337,705,45,https://github.com/lhoward,kadm5: refactor krb5 plugin framework,2,[],https://github.com/heimdal/heimdal/pull/489,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/489#issuecomment-450471294,WIP,"@nicowilliams, @jaltman what about the library that consumes the plugin exporting XXX_get_instance(), the result of which is returned by the plugin's initialization function. So for example for the hook/password quality functions:
uintptr_t
kdb5_get_instance(void)
{
    static char x;
    /* for all deps that expose their ABI to the plugin */
    return (uintptr_t)&x ^ krb5_get_instance();
}
Are we relying on the dynamic linker to deal with ABIs changing otherwise, e.g. every time we change a structure size are we bumping the SONAME? I haven't quite got my head around whether we would need to mix in a compile-time constant too.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,489,2018-12-29T05:41:13Z,2019-01-04T02:06:28Z,2019-01-04T02:06:28Z,MERGED,True,1337,705,45,https://github.com/lhoward,kadm5: refactor krb5 plugin framework,2,[],https://github.com/heimdal/heimdal/pull/489,https://github.com/lhoward,3,https://github.com/heimdal/heimdal/pull/489#issuecomment-450476727,WIP,"BTW, I'd kind of prefer for the plugin consumer to validate the instance IDs, so that we don't have to trust that the plugin remembers to do it.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,489,2018-12-29T05:41:13Z,2019-01-04T02:06:28Z,2019-01-04T02:06:28Z,MERGED,True,1337,705,45,https://github.com/lhoward,kadm5: refactor krb5 plugin framework,2,[],https://github.com/heimdal/heimdal/pull/489,https://github.com/lhoward,4,https://github.com/heimdal/heimdal/pull/489#issuecomment-450483329,WIP,"Do we want to do this for libkadm5 or to the libkrb5 plugin API? Do you want to bump the version and break things, or try to support both APIs? Are any of these plugins API compatible with MIT?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,489,2018-12-29T05:41:13Z,2019-01-04T02:06:28Z,2019-01-04T02:06:28Z,MERGED,True,1337,705,45,https://github.com/lhoward,kadm5: refactor krb5 plugin framework,2,[],https://github.com/heimdal/heimdal/pull/489,https://github.com/lhoward,5,https://github.com/heimdal/heimdal/pull/489#issuecomment-450528712,WIP,"I'm thinking possibly about separating out plugin load and init; new plugins would export a load function which would return a consumer instance value and a dispatch table, and init would move back into the dispatch table. Doesn't make much difference for kadm5 hooks, but it would mean that we could support both old and new plugin types easily in libkrb5 simply by looking for different symbol names (e.g. foo vs foo_plugin_v1_load or something).",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,489,2018-12-29T05:41:13Z,2019-01-04T02:06:28Z,2019-01-04T02:06:28Z,MERGED,True,1337,705,45,https://github.com/lhoward,kadm5: refactor krb5 plugin framework,2,[],https://github.com/heimdal/heimdal/pull/489,https://github.com/lhoward,6,https://github.com/heimdal/heimdal/pull/489#issuecomment-450529372,WIP,"The principal advantage of this is minimal intrusiveness to both libkrb5 and plugins, plugins can support both old and new mechanisms, we move to an exported function rather than data symbol for registration.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,489,2018-12-29T05:41:13Z,2019-01-04T02:06:28Z,2019-01-04T02:06:28Z,MERGED,True,1337,705,45,https://github.com/lhoward,kadm5: refactor krb5 plugin framework,2,[],https://github.com/heimdal/heimdal/pull/489,https://github.com/lhoward,7,https://github.com/heimdal/heimdal/pull/489#issuecomment-450530510,WIP,"Actually would leave version information out of the load symbol name; version negotiation would be done by the load function itself, which would also take an argument indicating the maximum plugin version supported by the consuming library.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,489,2018-12-29T05:41:13Z,2019-01-04T02:06:28Z,2019-01-04T02:06:28Z,MERGED,True,1337,705,45,https://github.com/lhoward,kadm5: refactor krb5 plugin framework,2,[],https://github.com/heimdal/heimdal/pull/489,https://github.com/lhoward,8,https://github.com/heimdal/heimdal/pull/489#issuecomment-450535880,WIP,"Having the plugin load function take a plugin version as input is extraneous if we require plugins to be built against the consuming version of Heimdal, because there should be a compile time error if they implement a plugin API that is not supported. (The original intention was forwards compatibility, i.e. to allow plugins built against newer libraries to be loaded by older ones by returning a different dispatch table depending on the input version number.)
I will remove this.
Separating the load and init functions also allows a plugin to return multiple dispatch tables, which could be useful, so I'll add this functionality.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,489,2018-12-29T05:41:13Z,2019-01-04T02:06:28Z,2019-01-04T02:06:28Z,MERGED,True,1337,705,45,https://github.com/lhoward,kadm5: refactor krb5 plugin framework,2,[],https://github.com/heimdal/heimdal/pull/489,https://github.com/nicowilliams,9,https://github.com/heimdal/heimdal/pull/489#issuecomment-450537728,WIP,Why the XOR?,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,489,2018-12-29T05:41:13Z,2019-01-04T02:06:28Z,2019-01-04T02:06:28Z,MERGED,True,1337,705,45,https://github.com/lhoward,kadm5: refactor krb5 plugin framework,2,[],https://github.com/heimdal/heimdal/pull/489,https://github.com/lhoward,10,https://github.com/heimdal/heimdal/pull/489#issuecomment-450537911,WIP,"Why the XOR?

I was looking for a poor man's RTLD_GROUP, an attempt to indicate a dependency chain in a single uintptr_t. But I didn't think about it too deeply.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,489,2018-12-29T05:41:13Z,2019-01-04T02:06:28Z,2019-01-04T02:06:28Z,MERGED,True,1337,705,45,https://github.com/lhoward,kadm5: refactor krb5 plugin framework,2,[],https://github.com/heimdal/heimdal/pull/489,https://github.com/lhoward,11,https://github.com/heimdal/heimdal/pull/489#issuecomment-450543388,WIP,"Can we kill _krb5_plugin_find() and _krb5_plugin_free()? Nothing uses it, they are in fact useless because the structure they return is private to their compilation unit and the accessor for it (_krb5_plugin_find()) has been removed.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,489,2018-12-29T05:41:13Z,2019-01-04T02:06:28Z,2019-01-04T02:06:28Z,MERGED,True,1337,705,45,https://github.com/lhoward,kadm5: refactor krb5 plugin framework,2,[],https://github.com/heimdal/heimdal/pull/489,https://github.com/lhoward,12,https://github.com/heimdal/heimdal/pull/489#issuecomment-450543876,WIP,"OK, lib/krb5/plugin.c was fairly messy, with two distinct lists of loaded plugins. I've refactored this to use the ""new"" plugin store, as well as supporting the ""new new"" loading API (function returning instance and N plugins rather than a structure directly). These benefits should accrue to all the plugins that are invoked by _krb5_plugin_run_f().",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,489,2018-12-29T05:41:13Z,2019-01-04T02:06:28Z,2019-01-04T02:06:28Z,MERGED,True,1337,705,45,https://github.com/lhoward,kadm5: refactor krb5 plugin framework,2,[],https://github.com/heimdal/heimdal/pull/489,https://github.com/lhoward,13,https://github.com/heimdal/heimdal/pull/489#issuecomment-450550645,WIP,I've also refactored the kadm5 server hook subsystem to also use the libkrb5 plugin API.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,489,2018-12-29T05:41:13Z,2019-01-04T02:06:28Z,2019-01-04T02:06:28Z,MERGED,True,1337,705,45,https://github.com/lhoward,kadm5: refactor krb5 plugin framework,2,[],https://github.com/heimdal/heimdal/pull/489,https://github.com/nicowilliams,14,https://github.com/heimdal/heimdal/pull/489#issuecomment-450588596,WIP,Wow!  This is a large one.  It will take a few days to review.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,489,2018-12-29T05:41:13Z,2019-01-04T02:06:28Z,2019-01-04T02:06:28Z,MERGED,True,1337,705,45,https://github.com/lhoward,kadm5: refactor krb5 plugin framework,2,[],https://github.com/heimdal/heimdal/pull/489,https://github.com/lhoward,15,https://github.com/heimdal/heimdal/pull/489#issuecomment-450592381,WIP,"Wow! This is a large one. It will take a few days to review.

Thanks @nicowilliams, it might be easier to look at lib/krb5/plugin.c fresh rather than as a diff.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,489,2018-12-29T05:41:13Z,2019-01-04T02:06:28Z,2019-01-04T02:06:28Z,MERGED,True,1337,705,45,https://github.com/lhoward,kadm5: refactor krb5 plugin framework,2,[],https://github.com/heimdal/heimdal/pull/489,https://github.com/lhoward,16,https://github.com/heimdal/heimdal/pull/489#issuecomment-450593938,WIP,Bikeshedding: krb5_get_instance() or libkrb5_get_instance() or libkrb5_get_cookie or krb5_get_libcookie() etc,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,489,2018-12-29T05:41:13Z,2019-01-04T02:06:28Z,2019-01-04T02:06:28Z,MERGED,True,1337,705,45,https://github.com/lhoward,kadm5: refactor krb5 plugin framework,2,[],https://github.com/heimdal/heimdal/pull/489,https://github.com/nicowilliams,17,https://github.com/heimdal/heimdal/pull/489#issuecomment-451304478,WIP,3947025 looks good.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,490,2018-12-30T10:26:17Z,2018-12-30T21:39:50Z,2018-12-30T21:39:50Z,MERGED,True,25,10,9,https://github.com/lhoward,libhcrypto: UI_UTIL_FLAG_VERIFY_SILENT (#469),1,[],https://github.com/heimdal/heimdal/pull/490,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/490,Add flag to UI_UTIL_read_pw_string() to suppress verification failure message,Add flag to UI_UTIL_read_pw_string() to suppress verification failure message,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,491,2018-12-31T05:15:06Z,2018-12-31T07:20:38Z,2018-12-31T18:47:53Z,MERGED,True,55,3,7,https://github.com/lhoward,gssapi: default client keytab (#383),1,[],https://github.com/heimdal/heimdal/pull/491,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/491,WIP for #383 – not sure if fix should be this simple?,WIP for #383 – not sure if fix should be this simple?,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,491,2018-12-31T05:15:06Z,2018-12-31T07:20:38Z,2018-12-31T18:47:53Z,MERGED,True,55,3,7,https://github.com/lhoward,gssapi: default client keytab (#383),1,[],https://github.com/heimdal/heimdal/pull/491,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/491#issuecomment-450612578,WIP for #383 – not sure if fix should be this simple?,"LGTM.  If you have no more changes, go ahead and push it.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,491,2018-12-31T05:15:06Z,2018-12-31T07:20:38Z,2018-12-31T18:47:53Z,MERGED,True,55,3,7,https://github.com/lhoward,gssapi: default client keytab (#383),1,[],https://github.com/heimdal/heimdal/pull/491,https://github.com/lhoward,3,https://github.com/heimdal/heimdal/pull/491#issuecomment-450617927,WIP for #383 – not sure if fix should be this simple?,"@nicowilliams the only thing with this patch (well, with the existing Heimdal code), is that if you don't specify a principal when acquiring a GSS credential, it uses krb5_get_default_principal(). Arguably if there's a client keytab, we should use the first principal we find there. Or perhaps not. Anyway, if you think this is a worthwhile change I can make it.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,491,2018-12-31T05:15:06Z,2018-12-31T07:20:38Z,2018-12-31T18:47:53Z,MERGED,True,55,3,7,https://github.com/lhoward,gssapi: default client keytab (#383),1,[],https://github.com/heimdal/heimdal/pull/491,https://github.com/lhoward,4,https://github.com/heimdal/heimdal/pull/491#issuecomment-450617975,WIP for #383 – not sure if fix should be this simple?,"Excerpt below, see with get_client_keytab() I've just (lazily!) hooked into the existing keytab path.
try_keytab:
    if (handle->principal == NULL) {
        /* We need to know what client principal to use */
        kret = krb5_get_default_principal(context, &handle->principal);
        if (kret)
            goto end;
    }
    kret = get_client_keytab(context, handle->principal, &keytab);
    if (kret)
        goto end;",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,491,2018-12-31T05:15:06Z,2018-12-31T07:20:38Z,2018-12-31T18:47:53Z,MERGED,True,55,3,7,https://github.com/lhoward,gssapi: default client keytab (#383),1,[],https://github.com/heimdal/heimdal/pull/491,https://github.com/lhoward,5,https://github.com/heimdal/heimdal/pull/491#issuecomment-450618043,WIP for #383 – not sure if fix should be this simple?,But there's no canonical principal for a keytab so...,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,491,2018-12-31T05:15:06Z,2018-12-31T07:20:38Z,2018-12-31T18:47:53Z,MERGED,True,55,3,7,https://github.com/lhoward,gssapi: default client keytab (#383),1,[],https://github.com/heimdal/heimdal/pull/491,https://github.com/nicowilliams,6,https://github.com/heimdal/heimdal/pull/491#issuecomment-450679502,WIP for #383 – not sure if fix should be this simple?,"@lhoward It's very tricky...
kinit with a keytab (or gss_acquire_cred() with a keytab) and no other source of a principal name can do things like:

try ${USER} as the principal name
try the first/last keytab entry for a principal that has one component
try the first/last keytab entry

I say ""last"" mostly because keytabs get appended to, and rarely get re-sorted.  This is a very obnoxious thing about keytabs...
Ideally things like kadmin's ext_keytab and ktutil should re-sort the keytab to put the newest keytab entries first, which helps performance of krb5_rd_req*() and gss_accept_sec_context()!  But since the order in which we try things is meaningful (see above), this strikes me as a notable behavior change, perhaps even a backwards-incompatible behavior change.
One way to pick default keytab entries that is less dependent on keytab entry order is to pick those with the highest set time (fortunately keytab entries record the time at which they were created).  Here keytab entry order matters only when you have multiple entries with the same newest set-time, and that's unlikely to happen for the same principal name and kvno.
What a pain.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,492,2019-01-01T09:57:27Z,2019-01-03T20:38:40Z,2019-01-04T06:10:26Z,MERGED,True,1533,1220,70,https://github.com/lhoward, gssapi: credential store extensions (#451),3,['feature request'],https://github.com/heimdal/heimdal/pull/492,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/492,"Implement gss_acquire_cred_from(), gss_add_cred_from(), and gss_store_cred_into().
Import mechanism glue bugfixes from Apple's Heimdal-520.","Implement gss_acquire_cred_from(), gss_add_cred_from(), and gss_store_cred_into().
Import mechanism glue bugfixes from Apple's Heimdal-520.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,492,2019-01-01T09:57:27Z,2019-01-03T20:38:40Z,2019-01-04T06:10:26Z,MERGED,True,1533,1220,70,https://github.com/lhoward, gssapi: credential store extensions (#451),3,['feature request'],https://github.com/heimdal/heimdal/pull/492,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/492#issuecomment-451049855,"Implement gss_acquire_cred_from(), gss_add_cred_from(), and gss_store_cred_into().
Import mechanism glue bugfixes from Apple's Heimdal-520.","@nicowilliams I've imported the Apple Heimdal-520 bugfixes (not new features) into this branch, but with each fix as a separate commit. So you may find it easiest to review the commits in this PR individually.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,492,2019-01-01T09:57:27Z,2019-01-03T20:38:40Z,2019-01-04T06:10:26Z,MERGED,True,1533,1220,70,https://github.com/lhoward, gssapi: credential store extensions (#451),3,['feature request'],https://github.com/heimdal/heimdal/pull/492,https://github.com/nicowilliams,3,https://github.com/heimdal/heimdal/pull/492#issuecomment-451053966,"Implement gss_acquire_cred_from(), gss_add_cred_from(), and gss_store_cred_into().
Import mechanism glue bugfixes from Apple's Heimdal-520.",All commits reviewed.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,492,2019-01-01T09:57:27Z,2019-01-03T20:38:40Z,2019-01-04T06:10:26Z,MERGED,True,1533,1220,70,https://github.com/lhoward, gssapi: credential store extensions (#451),3,['feature request'],https://github.com/heimdal/heimdal/pull/492,https://github.com/lhoward,4,https://github.com/heimdal/heimdal/pull/492#issuecomment-451055733,"Implement gss_acquire_cred_from(), gss_add_cred_from(), and gss_store_cred_into().
Import mechanism glue bugfixes from Apple's Heimdal-520.","f33fecd looks good.
4dc4719 looks good.
a332161 looks... I've a question: do we want to accept GSS_C_NO_NAME in as many places as the change to _gss_find_mn() implies? I think so: the API basically accepts GSS_C_NO_NAME everywhere except gss_init_sec_context(), and this change seems to be in part about allowing it there. Not sure if I missed anything.

How about this
+       /*
+        * XXX do we want to handle NULL names here or explicitly elsewhere?
+        * in the Apple code we return GSS_S_COMPLETE if have a NULL name.
+        */
+#if 0
+       if (name == NULL)
+               return GSS_S_COMPLETE;
+#else
+       heim_assert(name != NULL, ""_gss_find_mn passed null name"");
+#endif
+",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,492,2019-01-01T09:57:27Z,2019-01-03T20:38:40Z,2019-01-04T06:10:26Z,MERGED,True,1533,1220,70,https://github.com/lhoward, gssapi: credential store extensions (#451),3,['feature request'],https://github.com/heimdal/heimdal/pull/492,https://github.com/nicowilliams,5,https://github.com/heimdal/heimdal/pull/492#issuecomment-451055782,"Implement gss_acquire_cred_from(), gss_add_cred_from(), and gss_store_cred_into().
Import mechanism glue bugfixes from Apple's Heimdal-520.","@lhoward nah, I'm convinced.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,492,2019-01-01T09:57:27Z,2019-01-03T20:38:40Z,2019-01-04T06:10:26Z,MERGED,True,1533,1220,70,https://github.com/lhoward, gssapi: credential store extensions (#451),3,['feature request'],https://github.com/heimdal/heimdal/pull/492,https://github.com/lhoward,6,https://github.com/heimdal/heimdal/pull/492#issuecomment-451072161,"Implement gss_acquire_cred_from(), gss_add_cred_from(), and gss_store_cred_into().
Import mechanism glue bugfixes from Apple's Heimdal-520.","I cherry-picked to master the things that applied cleanly, the rest I'll wait for your review to complete.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,492,2019-01-01T09:57:27Z,2019-01-03T20:38:40Z,2019-01-04T06:10:26Z,MERGED,True,1533,1220,70,https://github.com/lhoward, gssapi: credential store extensions (#451),3,['feature request'],https://github.com/heimdal/heimdal/pull/492,https://github.com/nicowilliams,7,https://github.com/heimdal/heimdal/pull/492#issuecomment-451269897,"Implement gss_acquire_cred_from(), gss_add_cred_from(), and gss_store_cred_into().
Import mechanism glue bugfixes from Apple's Heimdal-520.",Thanks!  This was massive!,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,493,2019-01-02T03:39:20Z,2019-01-02T16:23:40Z,2019-01-02T16:27:59Z,MERGED,True,454,357,33,https://github.com/jaltman,WIN32: hint noreturn functions,3,['bug'],https://github.com/heimdal/heimdal/pull/493,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/493,"apply __declspec(noreturn) compiler hints to functions that
do not return.
Change-Id: I3c6c4703c7235d1df3e21dccad5272ea4cddfd36","apply __declspec(noreturn) compiler hints to functions that
do not return.
Change-Id: I3c6c4703c7235d1df3e21dccad5272ea4cddfd36",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,493,2019-01-02T03:39:20Z,2019-01-02T16:23:40Z,2019-01-02T16:27:59Z,MERGED,True,454,357,33,https://github.com/jaltman,WIN32: hint noreturn functions,3,['bug'],https://github.com/heimdal/heimdal/pull/493,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/493#issuecomment-450783075,"apply __declspec(noreturn) compiler hints to functions that
do not return.
Change-Id: I3c6c4703c7235d1df3e21dccad5272ea4cddfd36",LGTM!,True,{'THUMBS_DOWN': ['https://github.com/nicowilliams']}
heimdal/heimdal,https://github.com/heimdal/heimdal,493,2019-01-02T03:39:20Z,2019-01-02T16:23:40Z,2019-01-02T16:27:59Z,MERGED,True,454,357,33,https://github.com/jaltman,WIN32: hint noreturn functions,3,['bug'],https://github.com/heimdal/heimdal/pull/493,https://github.com/nicowilliams,3,https://github.com/heimdal/heimdal/pull/493#issuecomment-450783377,"apply __declspec(noreturn) compiler hints to functions that
do not return.
Change-Id: I3c6c4703c7235d1df3e21dccad5272ea4cddfd36","Ah, but something is wrong.  From the Travis builds:
  CC       cms.lo
In file included from ../../../lib/hx509/cert.c:34:
In file included from ../../../lib/hx509/hx_locl.h:98:
../../../lib/hx509/hx509-private.h:13:12: error: expected function body after function declarator
        noreturn) _hx509_abort(const char */*fmt*/,
                  ^
../../../lib/hx509/cert.c:353:2: warning: implicit declaration of function '_hx509_abort' is invalid in C99 [-Wimplicit-function-declaration]
        _hx509_abort(""cert refcount <= 0 on free"");
        ^
In file included from ../../../lib/hx509/ca.c:34:
In file included from ../../../lib/hx509/hx_locl.h:98:
../../../lib/hx509/hx509-private.h:13:12: error: ../../../lib/hx509/cert.c:3409:1: error: conflicting types for '_hx509_abort'
_hx509_abort(const char *fmt, ...)
^",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,493,2019-01-02T03:39:20Z,2019-01-02T16:23:40Z,2019-01-02T16:27:59Z,MERGED,True,454,357,33,https://github.com/jaltman,WIN32: hint noreturn functions,3,['bug'],https://github.com/heimdal/heimdal/pull/493,https://github.com/jaltman,4,https://github.com/heimdal/heimdal/pull/493#issuecomment-450890764,"apply __declspec(noreturn) compiler hints to functions that
do not return.
Change-Id: I3c6c4703c7235d1df3e21dccad5272ea4cddfd36",@nicowilliams This series fixes the exports from libhx509 on windows and adds the noreturn hinting.   It does not remove the unconditional definition of __attribute__(X) from lib/hx509/cert.c because doing so as in ef038c6 results in appveyor build failures.    The macro is not defined in the source file at that point.   Perhaps you can track that down independently after this series is merged.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,493,2019-01-02T03:39:20Z,2019-01-02T16:23:40Z,2019-01-02T16:27:59Z,MERGED,True,454,357,33,https://github.com/jaltman,WIN32: hint noreturn functions,3,['bug'],https://github.com/heimdal/heimdal/pull/493,https://github.com/nicowilliams,5,https://github.com/heimdal/heimdal/pull/493#issuecomment-450892071,"apply __declspec(noreturn) compiler hints to functions that
do not return.
Change-Id: I3c6c4703c7235d1df3e21dccad5272ea4cddfd36",You weren't kidding that all of libhx509 was busted.  Thanks for fixing that!  LGTM now.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,493,2019-01-02T03:39:20Z,2019-01-02T16:23:40Z,2019-01-02T16:27:59Z,MERGED,True,454,357,33,https://github.com/jaltman,WIN32: hint noreturn functions,3,['bug'],https://github.com/heimdal/heimdal/pull/493,https://github.com/nicowilliams,6,https://github.com/heimdal/heimdal/pull/493#issuecomment-450895368,"apply __declspec(noreturn) compiler hints to functions that
do not return.
Change-Id: I3c6c4703c7235d1df3e21dccad5272ea4cddfd36","Let's look at warnings on appveyor.
First, a minor annoyance:
--------- Entering lib roken:
	cl -Zi -Od -DDEBUG /Zi -c -DCRTAPI1=_cdecl -DCRTAPI2=_cdecl -nologo -GS -D_AMD64_=1 -DWIN64 -D_WIN64  -DWIN32 -D_WIN32 -W4 -D_WINNT -D_WIN32_WINNT=0x0501 -DNTDDI_VERSION=0x05010000 -D_WIN32_IE=0x0600 -DWINVER=0x0501  -D_MT -D_DLL -MDd    -DHAVE_CONFIG_H -DHCRYPTO_DEF_PROVIDER=w32crypto  -IC:\projects\heimdal\lib\roken\..\..\out\dest_AMD64\inc -IC:\projects\heimdal\lib\roken\..\..\out\dest_AMD64\inc\krb5   -D_CRT_SECURE_NO_WARNINGS -wd4996 -wd4127 -wd4244 -wd4100 -wd4706 -wd4214 -wd4267 -wd4018 -wd4389 -wd4204 -wd4221 -wd4295 -wd4146 /MP .\base64-test.c  -FoC:\projects\heimdal\lib\roken\..\..\out\obj_AMD64\lib\roken\ -FdC:\projects\heimdal\lib\roken\..\..\out\obj_AMD64\lib\roken\ -DBUILD_ROKEN_LIB
base64-test.c
C:\projects\heimdal\out\dest_AMD64\inc\roken.h(61) : warning C4005: 'ROKEN_LIB_NORETURN_FUNCTION' : macro redefinition
        C:\projects\heimdal\out\dest_AMD64\inc\config.h(92) : see previous definition of 'ROKEN_LIB_NORETURN_FUNCTION'
	link /DEBUG /DEBUGTYPE:cv /DEBUG  /INCREMENTAL:NO /NOLOGO -subsystem:console,5.01 kernel32.lib  ws2_32.lib mswsock.lib advapi32.lib /machine:X64 -OUT:C:\projects\heimdal\lib\roken\..\..\out\obj_AMD64\lib\roken\base64-test.exe C:\projects\heimdal\lib\roken\..\..\out\obj_AMD64\lib\roken\base64-test.obj C:\projects\heimdal\lib\roken\..\..\out\obj_AMD64\lib\roken\base64.obj C:\projects\heimdal\lib\roken\..\..\out\dest_AMD64\lib\libroken.lib

There's a bunch of those.  It's probably an easy fix.
Next, let's check on uninitialized variable warnings...  We now see only four of those!  Yes!
.\test_context.c(761) : warning C4133: 'function' : incompatible types - from 'krb5_enctype *' to 'int32_t *'
c:\projects\heimdal\lib\gssapi\test_context.c(248) : warning C4701: potentially uninitialized local variable 'output_token' used
c:\projects\heimdal\lib\gssapi\test_context.c(263) : warning C4701: potentially uninitialized local variable 'actual_mech_client' used
c:\projects\heimdal\lib\gssapi\test_context.c(263) : warning C4701: potentially uninitialized local variable 'actual_mech_server' used

and
c:\projects\heimdal\lib\asn1\check-gen.c(1498) : warning C4701: potentially uninitialized local variable 'size' used",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,493,2019-01-02T03:39:20Z,2019-01-02T16:23:40Z,2019-01-02T16:27:59Z,MERGED,True,454,357,33,https://github.com/jaltman,WIN32: hint noreturn functions,3,['bug'],https://github.com/heimdal/heimdal/pull/493,https://github.com/jaltman,7,https://github.com/heimdal/heimdal/pull/493#issuecomment-450896532,"apply __declspec(noreturn) compiler hints to functions that
do not return.
Change-Id: I3c6c4703c7235d1df3e21dccad5272ea4cddfd36","Let's look at warnings on appveyor.
First, a minor annoyance:
--------- Entering lib roken:
	cl -Zi -Od -DDEBUG /Zi -c -DCRTAPI1=_cdecl -DCRTAPI2=_cdecl -nologo -GS -D_AMD64_=1 -DWIN64 -D_WIN64  -DWIN32 -D_WIN32 -W4 -D_WINNT -D_WIN32_WINNT=0x0501 -DNTDDI_VERSION=0x05010000 -D_WIN32_IE=0x0600 -DWINVER=0x0501  -D_MT -D_DLL -MDd    -DHAVE_CONFIG_H -DHCRYPTO_DEF_PROVIDER=w32crypto  -IC:\projects\heimdal\lib\roken\..\..\out\dest_AMD64\inc -IC:\projects\heimdal\lib\roken\..\..\out\dest_AMD64\inc\krb5   -D_CRT_SECURE_NO_WARNINGS -wd4996 -wd4127 -wd4244 -wd4100 -wd4706 -wd4214 -wd4267 -wd4018 -wd4389 -wd4204 -wd4221 -wd4295 -wd4146 /MP .\base64-test.c  -FoC:\projects\heimdal\lib\roken\..\..\out\obj_AMD64\lib\roken\ -FdC:\projects\heimdal\lib\roken\..\..\out\obj_AMD64\lib\roken\ -DBUILD_ROKEN_LIB
base64-test.c
C:\projects\heimdal\out\dest_AMD64\inc\roken.h(61) : warning C4005: 'ROKEN_LIB_NORETURN_FUNCTION' : macro redefinition
        C:\projects\heimdal\out\dest_AMD64\inc\config.h(92) : see previous definition of 'ROKEN_LIB_NORETURN_FUNCTION'
	link /DEBUG /DEBUGTYPE:cv /DEBUG  /INCREMENTAL:NO /NOLOGO -subsystem:console,5.01 kernel32.lib  ws2_32.lib mswsock.lib advapi32.lib /machine:X64 -OUT:C:\projects\heimdal\lib\roken\..\..\out\obj_AMD64\lib\roken\base64-test.exe C:\projects\heimdal\lib\roken\..\..\out\obj_AMD64\lib\roken\base64-test.obj C:\projects\heimdal\lib\roken\..\..\out\obj_AMD64\lib\roken\base64.obj C:\projects\heimdal\lib\roken\..\..\out\dest_AMD64\lib\libroken.lib

There's a bunch of those. It's probably an easy fix.

I'm working on that now.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,493,2019-01-02T03:39:20Z,2019-01-02T16:23:40Z,2019-01-02T16:27:59Z,MERGED,True,454,357,33,https://github.com/jaltman,WIN32: hint noreturn functions,3,['bug'],https://github.com/heimdal/heimdal/pull/493,https://github.com/nicowilliams,8,https://github.com/heimdal/heimdal/pull/493#issuecomment-450897745,"apply __declspec(noreturn) compiler hints to functions that
do not return.
Change-Id: I3c6c4703c7235d1df3e21dccad5272ea4cddfd36",The uninitialized variable warnings in lib/gssapi/test_context.c are lame.  I dunno why VC thinks they might be used uninitialized -- it must not be fully-analyzing that while loop.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,493,2019-01-02T03:39:20Z,2019-01-02T16:23:40Z,2019-01-02T16:27:59Z,MERGED,True,454,357,33,https://github.com/jaltman,WIN32: hint noreturn functions,3,['bug'],https://github.com/heimdal/heimdal/pull/493,https://github.com/nicowilliams,9,https://github.com/heimdal/heimdal/pull/493#issuecomment-450900491,"apply __declspec(noreturn) compiler hints to functions that
do not return.
Change-Id: I3c6c4703c7235d1df3e21dccad5272ea4cddfd36","The warning in lib/asn1/check-gen.c is the sort of warning one would think your patches would fix:
static int
check_TESTMechTypeList(void)
{
    TESTMechTypeList tl;
    unsigned oid1[] =  { 1, 2, 840, 48018, 1, 2, 2};
    unsigned oid2[] =  { 1, 2, 840, 113554, 1, 2, 2};
    unsigned oid3[] =   { 1, 3, 6, 1, 4, 1, 311, 2, 2, 30};
    unsigned oid4[] =   { 1, 3, 6, 1, 4, 1, 311, 2, 2, 10};
    TESTMechType array[] = {{ 7, oid1 },
                            { 7, oid2 },
                            { 10, oid3 },
                            { 10, oid4 }};
    size_t size, len;
    void *ptr;
    int ret;

    tl.len = 4;
    tl.val = array;

    ASN1_MALLOC_ENCODE(TESTMechTypeList, ptr, len, &tl, &size, ret);
    if (ret)
        errx(1, ""TESTMechTypeList: %d"", ret);
    if (len != size)
        abort();
    return 0;
}

where the ASN1_MALLOC_ENCODE() macro is:
#define ASN1_MALLOC_ENCODE(T, B, BL, S, L, R)                  \
  do {                                                         \
    (BL) = length_##T((S));                                    \
    (B) = malloc((BL));                                        \
    if((B) == NULL) {                                          \
      (R) = ENOMEM;                                            \
    } else {                                                   \
      (R) = encode_##T(((unsigned char*)(B)) + (BL) - 1, (BL), \
                       (S), (L));                              \
      if((R) != 0) {                                           \
        free((B));                                             \
        (B) = NULL;                                            \
      }                                                        \
    }                                                          \
  } while (0)

and encode_TESTMechTypeList() always either returns an error or initializes that size_t output parameter.  So the only way this variable is used uninitialized is if abort() returns.  At least MinGW's <stdlib.h> declares abort() as __cdecl __declspec(noreturn), but I've not checked Windows'.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,493,2019-01-02T03:39:20Z,2019-01-02T16:23:40Z,2019-01-02T16:27:59Z,MERGED,True,454,357,33,https://github.com/jaltman,WIN32: hint noreturn functions,3,['bug'],https://github.com/heimdal/heimdal/pull/493,https://github.com/jaltman,10,https://github.com/heimdal/heimdal/pull/493#issuecomment-450900725,"apply __declspec(noreturn) compiler hints to functions that
do not return.
Change-Id: I3c6c4703c7235d1df3e21dccad5272ea4cddfd36","The uninitialized variable warnings in lib/gssapi/test_context.c are lame. I dunno why VC thinks they might be used uninitialized -- it must not be fully-analyzing that while loop.

Its probably due to
        if (client_done && server_done) break;
within the loop.   The compiler cannot determine that server_done is only non-zero if the loop fully executes at least once.  Hence, the warning is generate for the use of output_token.length at line 248 and not line 240.",True,{'THUMBS_UP': ['https://github.com/nicowilliams']}
heimdal/heimdal,https://github.com/heimdal/heimdal,493,2019-01-02T03:39:20Z,2019-01-02T16:23:40Z,2019-01-02T16:27:59Z,MERGED,True,454,357,33,https://github.com/jaltman,WIN32: hint noreturn functions,3,['bug'],https://github.com/heimdal/heimdal/pull/493,https://github.com/nicowilliams,11,https://github.com/heimdal/heimdal/pull/493#issuecomment-450901484,"apply __declspec(noreturn) compiler hints to functions that
do not return.
Change-Id: I3c6c4703c7235d1df3e21dccad5272ea4cddfd36","Yeah, that's what I was thinking, that VC doesn't analyze that loop far  enough.
BTW, you still have the macro redefinition warning:
C:\projects\heimdal\out\dest_AMD64\inc\roken.h(68) : warning C4005: 'ROKEN_LIB_NORETURN_FUNCTION' : macro redefinition
        C:\projects\heimdal\out\dest_AMD64\inc\config.h(92) : see previous definition of 'ROKEN_LIB_NORETURN_FUNCTION'

I don't mind those warnings, provided it doesn't cause VC to not emit other warnings.  Every time I fix warnings VC seems to add new ones, so I suspect it gives up after so many, which would mean we do want to avoid spurious warnings.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,493,2019-01-02T03:39:20Z,2019-01-02T16:23:40Z,2019-01-02T16:27:59Z,MERGED,True,454,357,33,https://github.com/jaltman,WIN32: hint noreturn functions,3,['bug'],https://github.com/heimdal/heimdal/pull/493,https://github.com/jaltman,12,https://github.com/heimdal/heimdal/pull/493#issuecomment-450904312,"apply __declspec(noreturn) compiler hints to functions that
do not return.
Change-Id: I3c6c4703c7235d1df3e21dccad5272ea4cddfd36","BTW, you still have the macro redefinition warning:
C:\projects\heimdal\out\dest_AMD64\inc\roken.h(68) : warning C4005: 'ROKEN_LIB_NORETURN_FUNCTION' : macro redefinition
        C:\projects\heimdal\out\dest_AMD64\inc\config.h(92) : see previous definition of 'ROKEN_LIB_NORETURN_FUNCTION'

I don't mind those warnings, provided it doesn't cause VC to not emit other warnings. Every time I fix warnings VC seems to add new ones, so I suspect it gives up after so many, which would mean we do want to avoid spurious warnings.

The warnings are potentially serious since they are caused by an incorrectly generated roken.h from roken.h.in.   I hope that 73915cc does the right thing.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,493,2019-01-02T03:39:20Z,2019-01-02T16:23:40Z,2019-01-02T16:27:59Z,MERGED,True,454,357,33,https://github.com/jaltman,WIN32: hint noreturn functions,3,['bug'],https://github.com/heimdal/heimdal/pull/493,https://github.com/jaltman,13,https://github.com/heimdal/heimdal/pull/493#issuecomment-450907237,"apply __declspec(noreturn) compiler hints to functions that
do not return.
Change-Id: I3c6c4703c7235d1df3e21dccad5272ea4cddfd36",73915cc does the right thing.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,493,2019-01-02T03:39:20Z,2019-01-02T16:23:40Z,2019-01-02T16:27:59Z,MERGED,True,454,357,33,https://github.com/jaltman,WIN32: hint noreturn functions,3,['bug'],https://github.com/heimdal/heimdal/pull/493,https://github.com/nicowilliams,14,https://github.com/heimdal/heimdal/pull/493#issuecomment-450909475,"apply __declspec(noreturn) compiler hints to functions that
do not return.
Change-Id: I3c6c4703c7235d1df3e21dccad5272ea4cddfd36",Thanks!,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,494,2019-01-02T03:50:50Z,2019-01-02T23:29:10Z,2019-01-02T23:29:10Z,MERGED,True,587,140,18,https://github.com/nicowilliams,Add new --keep* and --enctypes options to kadmin and ktutil commands,2,[],https://github.com/heimdal/heimdal/pull/494,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/494,"Add --keepold/--keepallold/--pruneall options to various kadmin/ktutil
commands.  Default behavior to ""prune old keys"".


When setting keys for a service, we need to specify enctypes for it:


Always use kadm5_randkey_principal_3() instead of the older
kadm5_randkey_principal(), and always specify some enctypes (see below).


Add krb5_string_to_keysalts2(), like MIT's krb5_string_to_keysalts(),
but with a context, and simpler.


Add --enctypes options to various kadmin/ktutil commands.


Add [libdefaults] supported_enctypes param with enctype[:salttype]
list for client-side callers of kadm5_randkey_principal_3() and
kadm5_chpass_principal_3().


Add [realms] supported_enctypes on the kadmind side to specify
enctypes to use when older clients don't specify that themselves.


The enctypes parameters/options ultimately default to aes128-cts-hmac-sha1-96:normal.
These changes will cause kadmin/ktutil to create keys only for enctypes that are locally supported.","Add --keepold/--keepallold/--pruneall options to various kadmin/ktutil
commands.  Default behavior to ""prune old keys"".


When setting keys for a service, we need to specify enctypes for it:


Always use kadm5_randkey_principal_3() instead of the older
kadm5_randkey_principal(), and always specify some enctypes (see below).


Add krb5_string_to_keysalts2(), like MIT's krb5_string_to_keysalts(),
but with a context, and simpler.


Add --enctypes options to various kadmin/ktutil commands.


Add [libdefaults] supported_enctypes param with enctype[:salttype]
list for client-side callers of kadm5_randkey_principal_3() and
kadm5_chpass_principal_3().


Add [realms] supported_enctypes on the kadmind side to specify
enctypes to use when older clients don't specify that themselves.


The enctypes parameters/options ultimately default to aes128-cts-hmac-sha1-96:normal.
These changes will cause kadmin/ktutil to create keys only for enctypes that are locally supported.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,494,2019-01-02T03:50:50Z,2019-01-02T23:29:10Z,2019-01-02T23:29:10Z,MERGED,True,587,140,18,https://github.com/nicowilliams,Add new --keep* and --enctypes options to kadmin and ktutil commands,2,[],https://github.com/heimdal/heimdal/pull/494,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/494#issuecomment-450791677,"Add --keepold/--keepallold/--pruneall options to various kadmin/ktutil
commands.  Default behavior to ""prune old keys"".


When setting keys for a service, we need to specify enctypes for it:


Always use kadm5_randkey_principal_3() instead of the older
kadm5_randkey_principal(), and always specify some enctypes (see below).


Add krb5_string_to_keysalts2(), like MIT's krb5_string_to_keysalts(),
but with a context, and simpler.


Add --enctypes options to various kadmin/ktutil commands.


Add [libdefaults] supported_enctypes param with enctype[:salttype]
list for client-side callers of kadm5_randkey_principal_3() and
kadm5_chpass_principal_3().


Add [realms] supported_enctypes on the kadmind side to specify
enctypes to use when older clients don't specify that themselves.


The enctypes parameters/options ultimately default to aes128-cts-hmac-sha1-96:normal.
These changes will cause kadmin/ktutil to create keys only for enctypes that are locally supported.",Currently leaking the parsed key/salt type tuples...,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,494,2019-01-02T03:50:50Z,2019-01-02T23:29:10Z,2019-01-02T23:29:10Z,MERGED,True,587,140,18,https://github.com/nicowilliams,Add new --keep* and --enctypes options to kadmin and ktutil commands,2,[],https://github.com/heimdal/heimdal/pull/494,https://github.com/nicowilliams,3,https://github.com/heimdal/heimdal/pull/494#issuecomment-450938689,"Add --keepold/--keepallold/--pruneall options to various kadmin/ktutil
commands.  Default behavior to ""prune old keys"".


When setting keys for a service, we need to specify enctypes for it:


Always use kadm5_randkey_principal_3() instead of the older
kadm5_randkey_principal(), and always specify some enctypes (see below).


Add krb5_string_to_keysalts2(), like MIT's krb5_string_to_keysalts(),
but with a context, and simpler.


Add --enctypes options to various kadmin/ktutil commands.


Add [libdefaults] supported_enctypes param with enctype[:salttype]
list for client-side callers of kadm5_randkey_principal_3() and
kadm5_chpass_principal_3().


Add [realms] supported_enctypes on the kadmind side to specify
enctypes to use when older clients don't specify that themselves.


The enctypes parameters/options ultimately default to aes128-cts-hmac-sha1-96:normal.
These changes will cause kadmin/ktutil to create keys only for enctypes that are locally supported.",The new --keepold behavior is rather difficult to test.  It would help to have an LD_PRELOADable interposer for gettimeofday()/time() so we could create keys in the past....,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,494,2019-01-02T03:50:50Z,2019-01-02T23:29:10Z,2019-01-02T23:29:10Z,MERGED,True,587,140,18,https://github.com/nicowilliams,Add new --keep* and --enctypes options to kadmin and ktutil commands,2,[],https://github.com/heimdal/heimdal/pull/494,https://github.com/nicowilliams,4,https://github.com/heimdal/heimdal/pull/494#issuecomment-450992929,"Add --keepold/--keepallold/--pruneall options to various kadmin/ktutil
commands.  Default behavior to ""prune old keys"".


When setting keys for a service, we need to specify enctypes for it:


Always use kadm5_randkey_principal_3() instead of the older
kadm5_randkey_principal(), and always specify some enctypes (see below).


Add krb5_string_to_keysalts2(), like MIT's krb5_string_to_keysalts(),
but with a context, and simpler.


Add --enctypes options to various kadmin/ktutil commands.


Add [libdefaults] supported_enctypes param with enctype[:salttype]
list for client-side callers of kadm5_randkey_principal_3() and
kadm5_chpass_principal_3().


Add [realms] supported_enctypes on the kadmind side to specify
enctypes to use when older clients don't specify that themselves.


The enctypes parameters/options ultimately default to aes128-cts-hmac-sha1-96:normal.
These changes will cause kadmin/ktutil to create keys only for enctypes that are locally supported.","Once the current builds complete, this should be ready to review.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,496,2019-01-02T05:55:24Z,2019-01-03T02:23:21Z,2019-01-03T02:23:21Z,MERGED,True,8,23,2,https://github.com/lhoward,gssapi: ntlm mech should use _gss_ntlm_copy_cred() to dup cred,1,[],https://github.com/heimdal/heimdal/pull/496,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/496,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,497,2019-01-02T12:31:37Z,2020-04-11T00:28:48Z,2020-04-11T00:28:48Z,CLOSED,False,1820,30,31,https://github.com/lhoward,Integrate Apple changes to mechanism glue,1,[],https://github.com/heimdal/heimdal/pull/497,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/497,WIP integration of Heimdal-520 mechglue from Apple on top of lukeh/gss-cred-store branch,WIP integration of Heimdal-520 mechglue from Apple on top of lukeh/gss-cred-store branch,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,497,2019-01-02T12:31:37Z,2020-04-11T00:28:48Z,2020-04-11T00:28:48Z,CLOSED,False,1820,30,31,https://github.com/lhoward,Integrate Apple changes to mechanism glue,1,[],https://github.com/heimdal/heimdal/pull/497,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/497#issuecomment-450896928,WIP integration of Heimdal-520 mechglue from Apple on top of lukeh/gss-cred-store branch,This will take a long time to review...  I've set the milestone to Heimdal 9.  I will make this a low-priority for now.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,497,2019-01-02T12:31:37Z,2020-04-11T00:28:48Z,2020-04-11T00:28:48Z,CLOSED,False,1820,30,31,https://github.com/lhoward,Integrate Apple changes to mechanism glue,1,[],https://github.com/heimdal/heimdal/pull/497,https://github.com/lhoward,3,https://github.com/heimdal/heimdal/pull/497#issuecomment-450995062,WIP integration of Heimdal-520 mechglue from Apple on top of lukeh/gss-cred-store branch,"Here's a summary of changes vs lukeh/gss-cred-store (once that's integrated, the changes will be smaller). Maybe we could pick up the bugfixes from here, for that branch.

krb5 plugin API for replacing GSS credentials
move gss_auth_identity_desc and other non-mechglue private API into new header, gssapi_spi.h
mechglue logging API _gss_mg_log()
_gss_mg_get_error()/_gss_mg_set_error() drop major status, handle GSS_C_MECH_CODE only
new helpers for allocating creds and names
GM_USE_MG_CRED flag (not set by any mechs yet) for using mechglue creds for pseudo-mechs; note, if I read the code right, this means that you acquire creds for the concrete mechs and pass to SPNEGO (which breaks tests that only acquire creds for SPNEGO)
new helpers APIs that are used by the mechs themselves, e.g. gss_mg_gen_cb()
new top-level APIs for existing SPI such as gss_cred_hold()

Bugfixes:

check ctx->gc_ctx in gss_inquire_context()
check gm_inquire_cred != NULL in gss_inquire_context()
check min_lifetime in gss_inquire_cred()
check gm_inquire_cred_by_mech != NULL in gss_inquire_cred_by_mech()
set mech error in gss_inquire_cred_by_oid()
don't clobber error in gss_inquire_cred_by_oid()
don't pass NULL minor_status to gss_krb5_free_lucid_sec_context()
allow NULL ccache in gss_krb5_ccache_name()
NULL names OK in _gss_find_mn()
allow empty names in gss_import_name() (removes input_name_buffer length check). to support ANONYMOUS.
in gss_import_name(), ignore mech name import failure as long as it's possible to import the name in some other mechanism
better argument validation in gss_export_sec_context()
in gss_compare_name(), check mn2 != NULL
check gss_add_oid_set_member() return code in gss_indicate_mechs()
in gss_destroy_cred(), set output cred handle to GSS_C_NO_CREDENTIAL
cast size_t to OM_uint32 where required

Things I didn't merge:

The mechanism changes themselves
Automatically generated prototypes (Apple Heimdal generates headers for private API)
Exporting new API, we should consider this carefully
__nonnull/__nullable annotations",True,{'THUMBS_UP': ['https://github.com/nicowilliams']}
heimdal/heimdal,https://github.com/heimdal/heimdal,497,2019-01-02T12:31:37Z,2020-04-11T00:28:48Z,2020-04-11T00:28:48Z,CLOSED,False,1820,30,31,https://github.com/lhoward,Integrate Apple changes to mechanism glue,1,[],https://github.com/heimdal/heimdal/pull/497,https://github.com/nicowilliams,4,https://github.com/heimdal/heimdal/pull/497#issuecomment-450996585,WIP integration of Heimdal-520 mechglue from Apple on top of lukeh/gss-cred-store branch,Thanks for that summary.  It really helps.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,497,2019-01-02T12:31:37Z,2020-04-11T00:28:48Z,2020-04-11T00:28:48Z,CLOSED,False,1820,30,31,https://github.com/lhoward,Integrate Apple changes to mechanism glue,1,[],https://github.com/heimdal/heimdal/pull/497,https://github.com/lhoward,5,https://github.com/heimdal/heimdal/pull/497#issuecomment-451004206,WIP integration of Heimdal-520 mechglue from Apple on top of lukeh/gss-cred-store branch,I've put the bugfixes only in a separate commit on top of the lukeh/gss-cred-store branch.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,497,2019-01-02T12:31:37Z,2020-04-11T00:28:48Z,2020-04-11T00:28:48Z,CLOSED,False,1820,30,31,https://github.com/lhoward,Integrate Apple changes to mechanism glue,1,[],https://github.com/heimdal/heimdal/pull/497,https://github.com/lhoward,6,https://github.com/heimdal/heimdal/pull/497#issuecomment-451071384,WIP integration of Heimdal-520 mechglue from Apple on top of lukeh/gss-cred-store branch,"Now if you look at the differences between lukeh/gss-cred-store and lukeh/apple-gss-mechglue, you'll find they're not very many. Sneaky! ;)",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,497,2019-01-02T12:31:37Z,2020-04-11T00:28:48Z,2020-04-11T00:28:48Z,CLOSED,False,1820,30,31,https://github.com/lhoward,Integrate Apple changes to mechanism glue,1,[],https://github.com/heimdal/heimdal/pull/497,https://github.com/lhoward,7,https://github.com/heimdal/heimdal/pull/497#issuecomment-612279256,WIP integration of Heimdal-520 mechglue from Apple on top of lukeh/gss-cred-store branch,"Closing, it's not going to happen.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,500,2019-01-02T21:28:34Z,2019-01-03T02:19:25Z,2019-01-03T02:19:25Z,MERGED,True,90,71,1,https://github.com/jaltman,kadmin: kadmin_dispatch out of memory handling,2,[],https://github.com/heimdal/heimdal/pull/500,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/500,"Coverity determined that a NULL pointer segmentation fault could occur
if krb5_storage_emem() fails.  Use krb5_enomem() to set an error message
on the context and do not perform further krb5_storage operations.","Coverity determined that a NULL pointer segmentation fault could occur
if krb5_storage_emem() fails.  Use krb5_enomem() to set an error message
on the context and do not perform further krb5_storage operations.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,500,2019-01-02T21:28:34Z,2019-01-03T02:19:25Z,2019-01-03T02:19:25Z,MERGED,True,90,71,1,https://github.com/jaltman,kadmin: kadmin_dispatch out of memory handling,2,[],https://github.com/heimdal/heimdal/pull/500,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/500#issuecomment-450992107,"Coverity determined that a NULL pointer segmentation fault could occur
if krb5_storage_emem() fails.  Use krb5_enomem() to set an error message
on the context and do not perform further krb5_storage operations.","LGTM.  You goto fail  on ENOMEM without having freed everything in some cases, but we always krb5_err() anyways.  I'd like to move freeing the principal to the fail label, but we can do that later.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,502,2019-01-03T02:37:50Z,2019-01-03T04:46:01Z,2019-01-03T04:46:01Z,CLOSED,False,11,3,2,https://github.com/nicowilliams,"Travis: cat failure logs, show core backtraces (fix #499)",3,[],https://github.com/heimdal/heimdal/pull/502,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/502,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,502,2019-01-03T02:37:50Z,2019-01-03T04:46:01Z,2019-01-03T04:46:01Z,CLOSED,False,11,3,2,https://github.com/nicowilliams,"Travis: cat failure logs, show core backtraces (fix #499)",3,[],https://github.com/heimdal/heimdal/pull/502,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/502#issuecomment-451043416,,I should add a commit to make a test fail so we can see if this works...,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,502,2019-01-03T02:37:50Z,2019-01-03T04:46:01Z,2019-01-03T04:46:01Z,CLOSED,False,11,3,2,https://github.com/nicowilliams,"Travis: cat failure logs, show core backtraces (fix #499)",3,[],https://github.com/heimdal/heimdal/pull/502,https://github.com/nicowilliams,3,https://github.com/heimdal/heimdal/pull/502#issuecomment-451055202,,Merged as 1aedba7.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,504,2019-01-03T05:15:06Z,2019-01-03T05:27:32Z,2019-01-03T05:29:47Z,MERGED,True,13,0,1,https://github.com/lhoward,gssapi: gss_compare_name() both ways (#503),1,[],https://github.com/heimdal/heimdal/pull/504,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/504,"In the case that one name has no MNs and the second name only has an MN, then the order in which the two names are passed in matters, but it shouldn't. Run the comparison both ways.","In the case that one name has no MNs and the second name only has an MN, then the order in which the two names are passed in matters, but it shouldn't. Run the comparison both ways.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,504,2019-01-03T05:15:06Z,2019-01-03T05:27:32Z,2019-01-03T05:29:47Z,MERGED,True,13,0,1,https://github.com/lhoward,gssapi: gss_compare_name() both ways (#503),1,[],https://github.com/heimdal/heimdal/pull/504,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/504#issuecomment-451058682,"In the case that one name has no MNs and the second name only has an MN, then the order in which the two names are passed in matters, but it shouldn't. Run the comparison both ways.",Thanks!,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,505,2019-01-03T10:50:27Z,2019-01-04T04:50:12Z,2019-01-04T04:51:02Z,MERGED,True,354,3,15,https://github.com/lhoward,gss_set_neg_mechs (#495),1,[],https://github.com/heimdal/heimdal/pull/505,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/505,"Untested
commit against lukeh/gss-cred-store","Untested
commit against lukeh/gss-cred-store",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,505,2019-01-03T10:50:27Z,2019-01-04T04:50:12Z,2019-01-04T04:51:02Z,MERGED,True,354,3,15,https://github.com/lhoward,gss_set_neg_mechs (#495),1,[],https://github.com/heimdal/heimdal/pull/505,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/505#issuecomment-451226285,"Untested
commit against lukeh/gss-cred-store",99cb002 LGTM.  The OS X Travis build failed spuriously; I restarted it and it passed.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,507,2019-01-04T04:41:52Z,2019-01-04T18:50:00Z,2019-01-04T20:09:12Z,MERGED,True,2,2,2,https://github.com/nicowilliams,Bump roken SONAME version (fix #279),1,[],https://github.com/heimdal/heimdal/pull/507,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/507,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,507,2019-01-04T04:41:52Z,2019-01-04T18:50:00Z,2019-01-04T20:09:12Z,MERGED,True,2,2,2,https://github.com/nicowilliams,Bump roken SONAME version (fix #279),1,[],https://github.com/heimdal/heimdal/pull/507,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/507#issuecomment-451533205,,"libtool's -version-info is extremely confusing.
To go from soversion major 18 to 19 I had to change the -version-info from 19:0:1 to 20:0:1 or 19:0:0.
libtool subtracts the third version-info number (""age"") from the first one (""current"").  I don't care for the complexity of this.  I only care to bump the major number as actually built, and switching to 19:0:0 has that effect but will be confusing to future developers, so 20:0:1 it is.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,510,2019-01-05T01:39:25Z,2019-01-05T03:01:27Z,2019-01-05T03:01:27Z,MERGED,True,23,14,3,https://github.com/lhoward,hdb: dereference principal aliases in all KDC lookups (#452),2,[],https://github.com/heimdal/heimdal/pull/510,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/510,"e11abf4 added support in libhdb for always dereferencing principal aliases during an AS-REQ (where dereferencing refers to enabling alias lookups, and rewriting the returned entry with the alias name unless canonicalization was enabled).
Due to the KDC setting HDB_F_FOR_AS_REQ for all lookups from the AS, this allowed aliases on the TGS itself to be dereferenced during an AS-REQ; however, on presenting the TGT, the TGS would fail to resolve. Creating an explicit TGS principal for the aliased realm would work (at least prior to c555ed6), but  this could be confusing to deploy.
This commit changes enables alias dereferencing when HDB_F_GET_ANY is set, which essentially means dereference whenever the request is coming from the KDC (as opposed to, say, kadmin).
We also backout c555ed6, which changed the TGS to always canonicalize the server realm, as this breaks serving multiple realms from a single KDC, where server principals in different realms share a single canonical entry. HDB_F_CANON is now passed to the backend as a hint only, and per RFC 6806 the principal name is never changed in TGS replies. (However, for Samba interop, backends can override this by setting the force-canonicalize HDB flag.)","e11abf4 added support in libhdb for always dereferencing principal aliases during an AS-REQ (where dereferencing refers to enabling alias lookups, and rewriting the returned entry with the alias name unless canonicalization was enabled).
Due to the KDC setting HDB_F_FOR_AS_REQ for all lookups from the AS, this allowed aliases on the TGS itself to be dereferenced during an AS-REQ; however, on presenting the TGT, the TGS would fail to resolve. Creating an explicit TGS principal for the aliased realm would work (at least prior to c555ed6), but  this could be confusing to deploy.
This commit changes enables alias dereferencing when HDB_F_GET_ANY is set, which essentially means dereference whenever the request is coming from the KDC (as opposed to, say, kadmin).
We also backout c555ed6, which changed the TGS to always canonicalize the server realm, as this breaks serving multiple realms from a single KDC, where server principals in different realms share a single canonical entry. HDB_F_CANON is now passed to the backend as a hint only, and per RFC 6806 the principal name is never changed in TGS replies. (However, for Samba interop, backends can override this by setting the force-canonicalize HDB flag.)",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,510,2019-01-05T01:39:25Z,2019-01-05T03:01:27Z,2019-01-05T03:01:27Z,MERGED,True,23,14,3,https://github.com/lhoward,hdb: dereference principal aliases in all KDC lookups (#452),2,[],https://github.com/heimdal/heimdal/pull/510,https://github.com/jaltman,2,https://github.com/heimdal/heimdal/pull/510#issuecomment-451618676,"e11abf4 added support in libhdb for always dereferencing principal aliases during an AS-REQ (where dereferencing refers to enabling alias lookups, and rewriting the returned entry with the alias name unless canonicalization was enabled).
Due to the KDC setting HDB_F_FOR_AS_REQ for all lookups from the AS, this allowed aliases on the TGS itself to be dereferenced during an AS-REQ; however, on presenting the TGT, the TGS would fail to resolve. Creating an explicit TGS principal for the aliased realm would work (at least prior to c555ed6), but  this could be confusing to deploy.
This commit changes enables alias dereferencing when HDB_F_GET_ANY is set, which essentially means dereference whenever the request is coming from the KDC (as opposed to, say, kadmin).
We also backout c555ed6, which changed the TGS to always canonicalize the server realm, as this breaks serving multiple realms from a single KDC, where server principals in different realms share a single canonical entry. HDB_F_CANON is now passed to the backend as a hint only, and per RFC 6806 the principal name is never changed in TGS replies. (However, for Samba interop, backends can override this by setting the force-canonicalize HDB flag.)",I am suspicious of c555ed6.   Consider the case of a service principal  host/abc.foo.com@FOO.COM that has an alias of host/xyz..bar.com@BAR.COM.   If the client requested host/xyz.bar.com@BAR.COM without setting the canonicalize flag won't c555ed6 result in a server principal in the reply of host/xyz.bar.com@FOO.COM?,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,510,2019-01-05T01:39:25Z,2019-01-05T03:01:27Z,2019-01-05T03:01:27Z,MERGED,True,23,14,3,https://github.com/lhoward,hdb: dereference principal aliases in all KDC lookups (#452),2,[],https://github.com/heimdal/heimdal/pull/510,https://github.com/lhoward,3,https://github.com/heimdal/heimdal/pull/510#issuecomment-451618845,"e11abf4 added support in libhdb for always dereferencing principal aliases during an AS-REQ (where dereferencing refers to enabling alias lookups, and rewriting the returned entry with the alias name unless canonicalization was enabled).
Due to the KDC setting HDB_F_FOR_AS_REQ for all lookups from the AS, this allowed aliases on the TGS itself to be dereferenced during an AS-REQ; however, on presenting the TGT, the TGS would fail to resolve. Creating an explicit TGS principal for the aliased realm would work (at least prior to c555ed6), but  this could be confusing to deploy.
This commit changes enables alias dereferencing when HDB_F_GET_ANY is set, which essentially means dereference whenever the request is coming from the KDC (as opposed to, say, kadmin).
We also backout c555ed6, which changed the TGS to always canonicalize the server realm, as this breaks serving multiple realms from a single KDC, where server principals in different realms share a single canonical entry. HDB_F_CANON is now passed to the backend as a hint only, and per RFC 6806 the principal name is never changed in TGS replies. (However, for Samba interop, backends can override this by setting the force-canonicalize HDB flag.)","Right, I was also suspicious of it (which I think I noted at the time). Now worked around in libhdb by this commit. But also happy to back out Samba patch.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,510,2019-01-05T01:39:25Z,2019-01-05T03:01:27Z,2019-01-05T03:01:27Z,MERGED,True,23,14,3,https://github.com/lhoward,hdb: dereference principal aliases in all KDC lookups (#452),2,[],https://github.com/heimdal/heimdal/pull/510,https://github.com/lhoward,4,https://github.com/heimdal/heimdal/pull/510#issuecomment-451619164,"e11abf4 added support in libhdb for always dereferencing principal aliases during an AS-REQ (where dereferencing refers to enabling alias lookups, and rewriting the returned entry with the alias name unless canonicalization was enabled).
Due to the KDC setting HDB_F_FOR_AS_REQ for all lookups from the AS, this allowed aliases on the TGS itself to be dereferenced during an AS-REQ; however, on presenting the TGT, the TGS would fail to resolve. Creating an explicit TGS principal for the aliased realm would work (at least prior to c555ed6), but  this could be confusing to deploy.
This commit changes enables alias dereferencing when HDB_F_GET_ANY is set, which essentially means dereference whenever the request is coming from the KDC (as opposed to, say, kadmin).
We also backout c555ed6, which changed the TGS to always canonicalize the server realm, as this breaks serving multiple realms from a single KDC, where server principals in different realms share a single canonical entry. HDB_F_CANON is now passed to the backend as a hint only, and per RFC 6806 the principal name is never changed in TGS replies. (However, for Samba interop, backends can override this by setting the force-canonicalize HDB flag.)","Backing out the Samba patch will remain (to my knowledge) compliant with [MS-KILE] but break their test suite, which always expects realm canonicalization irrespective of the canonicalize KDC option. cc @abartlet @iboukris",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,510,2019-01-05T01:39:25Z,2019-01-05T03:01:27Z,2019-01-05T03:01:27Z,MERGED,True,23,14,3,https://github.com/lhoward,hdb: dereference principal aliases in all KDC lookups (#452),2,[],https://github.com/heimdal/heimdal/pull/510,https://github.com/jaltman,5,https://github.com/heimdal/heimdal/pull/510#issuecomment-451620546,"e11abf4 added support in libhdb for always dereferencing principal aliases during an AS-REQ (where dereferencing refers to enabling alias lookups, and rewriting the returned entry with the alias name unless canonicalization was enabled).
Due to the KDC setting HDB_F_FOR_AS_REQ for all lookups from the AS, this allowed aliases on the TGS itself to be dereferenced during an AS-REQ; however, on presenting the TGT, the TGS would fail to resolve. Creating an explicit TGS principal for the aliased realm would work (at least prior to c555ed6), but  this could be confusing to deploy.
This commit changes enables alias dereferencing when HDB_F_GET_ANY is set, which essentially means dereference whenever the request is coming from the KDC (as opposed to, say, kadmin).
We also backout c555ed6, which changed the TGS to always canonicalize the server realm, as this breaks serving multiple realms from a single KDC, where server principals in different realms share a single canonical entry. HDB_F_CANON is now passed to the backend as a hint only, and per RFC 6806 the principal name is never changed in TGS replies. (However, for Samba interop, backends can override this by setting the force-canonicalize HDB flag.)",@abartlet @iboukris Why does  c555ed6  only canonicalize the server realm and not the entire service principal?,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,510,2019-01-05T01:39:25Z,2019-01-05T03:01:27Z,2019-01-05T03:01:27Z,MERGED,True,23,14,3,https://github.com/lhoward,hdb: dereference principal aliases in all KDC lookups (#452),2,[],https://github.com/heimdal/heimdal/pull/510,https://github.com/lhoward,6,https://github.com/heimdal/heimdal/pull/510#issuecomment-451620866,"e11abf4 added support in libhdb for always dereferencing principal aliases during an AS-REQ (where dereferencing refers to enabling alias lookups, and rewriting the returned entry with the alias name unless canonicalization was enabled).
Due to the KDC setting HDB_F_FOR_AS_REQ for all lookups from the AS, this allowed aliases on the TGS itself to be dereferenced during an AS-REQ; however, on presenting the TGT, the TGS would fail to resolve. Creating an explicit TGS principal for the aliased realm would work (at least prior to c555ed6), but  this could be confusing to deploy.
This commit changes enables alias dereferencing when HDB_F_GET_ANY is set, which essentially means dereference whenever the request is coming from the KDC (as opposed to, say, kadmin).
We also backout c555ed6, which changed the TGS to always canonicalize the server realm, as this breaks serving multiple realms from a single KDC, where server principals in different realms share a single canonical entry. HDB_F_CANON is now passed to the backend as a hint only, and per RFC 6806 the principal name is never changed in TGS replies. (However, for Samba interop, backends can override this by setting the force-canonicalize HDB flag.)","@abartlet @iboukris Why does c555ed6 only canonicalize the server realm and not the entire service principal?

I can answer that. Windows, since W2K3 as far as I remember, changed the TGS behavior to never canonicalize (irrespective of the setting of the canonicalize flag), but it does unconditionally canonicalize the realm to deal with NetBIOS realm aliases.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,510,2019-01-05T01:39:25Z,2019-01-05T03:01:27Z,2019-01-05T03:01:27Z,MERGED,True,23,14,3,https://github.com/lhoward,hdb: dereference principal aliases in all KDC lookups (#452),2,[],https://github.com/heimdal/heimdal/pull/510,https://github.com/lhoward,7,https://github.com/heimdal/heimdal/pull/510#issuecomment-451622431,"e11abf4 added support in libhdb for always dereferencing principal aliases during an AS-REQ (where dereferencing refers to enabling alias lookups, and rewriting the returned entry with the alias name unless canonicalization was enabled).
Due to the KDC setting HDB_F_FOR_AS_REQ for all lookups from the AS, this allowed aliases on the TGS itself to be dereferenced during an AS-REQ; however, on presenting the TGT, the TGS would fail to resolve. Creating an explicit TGS principal for the aliased realm would work (at least prior to c555ed6), but  this could be confusing to deploy.
This commit changes enables alias dereferencing when HDB_F_GET_ANY is set, which essentially means dereference whenever the request is coming from the KDC (as opposed to, say, kadmin).
We also backout c555ed6, which changed the TGS to always canonicalize the server realm, as this breaks serving multiple realms from a single KDC, where server principals in different realms share a single canonical entry. HDB_F_CANON is now passed to the backend as a hint only, and per RFC 6806 the principal name is never changed in TGS replies. (However, for Samba interop, backends can override this by setting the force-canonicalize HDB flag.)","@abartlet @iboukris new behavior required from your backend – to support NetBIOS realm aliases in TGS responses, you should set the new HDBFlag force-canonicalize in the returned entry, which will cause the KDC to return both the canonical principal name and realm. (Your implementation should take care to only canonicalise the realm in the returned entry, if that is all that is required.)",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,511,2019-01-05T04:03:14Z,2019-01-05T04:51:12Z,2019-01-05T04:51:12Z,MERGED,True,38,28,2,https://github.com/lhoward,kdc: perform AS-REQ canonicalization in kdc,2,['feature request'],https://github.com/heimdal/heimdal/pull/511,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/511,"Mirroring the logic recently introduced in the TGS, this patch modifies the KDC to perform client and server canonicalization itself rather than relying on the backend to do so. Per RFC 6806, the behavior is slightly different for the AS in that the setting of the canonicalize flag in the AS-REQ does impact the returned names in the ticket. In order to support realm canonicalization or other custom behavior, we allow the backend to force the KDC to canonicalize by setting the force-canonicalize flag in the returned client or server entries.
Rationale: name canonicalization behavior should be as consistent as possible between the AS and TGS; naming logic does not belong in the HDB. (I'd also like to move KRB5_NT_ENTERPRISE_PRINCIPAL handling from HDB to the KDC, but I've left that for now.)","Mirroring the logic recently introduced in the TGS, this patch modifies the KDC to perform client and server canonicalization itself rather than relying on the backend to do so. Per RFC 6806, the behavior is slightly different for the AS in that the setting of the canonicalize flag in the AS-REQ does impact the returned names in the ticket. In order to support realm canonicalization or other custom behavior, we allow the backend to force the KDC to canonicalize by setting the force-canonicalize flag in the returned client or server entries.
Rationale: name canonicalization behavior should be as consistent as possible between the AS and TGS; naming logic does not belong in the HDB. (I'd also like to move KRB5_NT_ENTERPRISE_PRINCIPAL handling from HDB to the KDC, but I've left that for now.)",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,511,2019-01-05T04:03:14Z,2019-01-05T04:51:12Z,2019-01-05T04:51:12Z,MERGED,True,38,28,2,https://github.com/lhoward,kdc: perform AS-REQ canonicalization in kdc,2,['feature request'],https://github.com/heimdal/heimdal/pull/511,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/511#issuecomment-451625923,"Mirroring the logic recently introduced in the TGS, this patch modifies the KDC to perform client and server canonicalization itself rather than relying on the backend to do so. Per RFC 6806, the behavior is slightly different for the AS in that the setting of the canonicalize flag in the AS-REQ does impact the returned names in the ticket. In order to support realm canonicalization or other custom behavior, we allow the backend to force the KDC to canonicalize by setting the force-canonicalize flag in the returned client or server entries.
Rationale: name canonicalization behavior should be as consistent as possible between the AS and TGS; naming logic does not belong in the HDB. (I'd also like to move KRB5_NT_ENTERPRISE_PRINCIPAL handling from HDB to the KDC, but I've left that for now.)",cc @abartlet @iboukris,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,511,2019-01-05T04:03:14Z,2019-01-05T04:51:12Z,2019-01-05T04:51:12Z,MERGED,True,38,28,2,https://github.com/lhoward,kdc: perform AS-REQ canonicalization in kdc,2,['feature request'],https://github.com/heimdal/heimdal/pull/511,https://github.com/jaltman,3,https://github.com/heimdal/heimdal/pull/511#issuecomment-451627126,"Mirroring the logic recently introduced in the TGS, this patch modifies the KDC to perform client and server canonicalization itself rather than relying on the backend to do so. Per RFC 6806, the behavior is slightly different for the AS in that the setting of the canonicalize flag in the AS-REQ does impact the returned names in the ticket. In order to support realm canonicalization or other custom behavior, we allow the backend to force the KDC to canonicalize by setting the force-canonicalize flag in the returned client or server entries.
Rationale: name canonicalization behavior should be as consistent as possible between the AS and TGS; naming logic does not belong in the HDB. (I'd also like to move KRB5_NT_ENTERPRISE_PRINCIPAL handling from HDB to the KDC, but I've left that for now.)",I like it.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,512,2019-01-05T07:40:39Z,2019-01-07T02:50:25Z,2019-01-08T13:41:33Z,MERGED,True,132,23,12,https://github.com/lhoward,gssapi: SPNEGO does not reset NTLM RC4 state (#509),1,[],https://github.com/heimdal/heimdal/pull/512,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/512,Untested,Untested,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,512,2019-01-05T07:40:39Z,2019-01-07T02:50:25Z,2019-01-08T13:41:33Z,MERGED,True,132,23,12,https://github.com/lhoward,gssapi: SPNEGO does not reset NTLM RC4 state (#509),1,[],https://github.com/heimdal/heimdal/pull/512,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/512#issuecomment-451635439,Untested,cc @simo5,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,512,2019-01-05T07:40:39Z,2019-01-07T02:50:25Z,2019-01-08T13:41:33Z,MERGED,True,132,23,12,https://github.com/lhoward,gssapi: SPNEGO does not reset NTLM RC4 state (#509),1,[],https://github.com/heimdal/heimdal/pull/512,https://github.com/lhoward,3,https://github.com/heimdal/heimdal/pull/512#issuecomment-451635649,Untested,Really we need to import Apple's NTLM implementation (or maybe Samba has one?),True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,512,2019-01-05T07:40:39Z,2019-01-07T02:50:25Z,2019-01-08T13:41:33Z,MERGED,True,132,23,12,https://github.com/lhoward,gssapi: SPNEGO does not reset NTLM RC4 state (#509),1,[],https://github.com/heimdal/heimdal/pull/512,https://github.com/nicowilliams,4,https://github.com/heimdal/heimdal/pull/512#issuecomment-451805885,Untested,@lhoward do we also need to restore sequence numbers?,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,512,2019-01-05T07:40:39Z,2019-01-07T02:50:25Z,2019-01-08T13:41:33Z,MERGED,True,132,23,12,https://github.com/lhoward,gssapi: SPNEGO does not reset NTLM RC4 state (#509),1,[],https://github.com/heimdal/heimdal/pull/512,https://github.com/lhoward,5,https://github.com/heimdal/heimdal/pull/512#issuecomment-451806257,Untested,@nicowilliams that is done by _gss_ntlm_set_key(),True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,512,2019-01-05T07:40:39Z,2019-01-07T02:50:25Z,2019-01-08T13:41:33Z,MERGED,True,132,23,12,https://github.com/lhoward,gssapi: SPNEGO does not reset NTLM RC4 state (#509),1,[],https://github.com/heimdal/heimdal/pull/512,https://github.com/nicowilliams,6,https://github.com/heimdal/heimdal/pull/512#issuecomment-451806438,Untested,"Ah, I'd missed that.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,512,2019-01-05T07:40:39Z,2019-01-07T02:50:25Z,2019-01-08T13:41:33Z,MERGED,True,132,23,12,https://github.com/lhoward,gssapi: SPNEGO does not reset NTLM RC4 state (#509),1,[],https://github.com/heimdal/heimdal/pull/512,https://github.com/simo5,7,https://github.com/heimdal/heimdal/pull/512#issuecomment-451958810,Untested,@lhoward I think you should just support/use https://github.com/simo5/gss-ntlmssp,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,512,2019-01-05T07:40:39Z,2019-01-07T02:50:25Z,2019-01-08T13:41:33Z,MERGED,True,132,23,12,https://github.com/lhoward,gssapi: SPNEGO does not reset NTLM RC4 state (#509),1,[],https://github.com/heimdal/heimdal/pull/512,https://github.com/nicowilliams,8,https://github.com/heimdal/heimdal/pull/512#issuecomment-451983865,Untested,"Could this have been implemented by having SPNEGO export the NTLM sec context prior to making the MIC, then re-import it at the end?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,512,2019-01-05T07:40:39Z,2019-01-07T02:50:25Z,2019-01-08T13:41:33Z,MERGED,True,132,23,12,https://github.com/lhoward,gssapi: SPNEGO does not reset NTLM RC4 state (#509),1,[],https://github.com/heimdal/heimdal/pull/512,https://github.com/simo5,9,https://github.com/heimdal/heimdal/pull/512#issuecomment-452021011,Untested,"Could this have been implemented by having SPNEGO export the NTLM sec
context prior to making the MIC, then re-import it at the end?

I do not recall all details, but I remember considering that option
when I implemented gss-ntlmssp and the required fixes to MIT SPNEGO
implementation, and didn't go that way. So there may well be some
detail that won't work with a full export/import.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,512,2019-01-05T07:40:39Z,2019-01-07T02:50:25Z,2019-01-08T13:41:33Z,MERGED,True,132,23,12,https://github.com/lhoward,gssapi: SPNEGO does not reset NTLM RC4 state (#509),1,[],https://github.com/heimdal/heimdal/pull/512,https://github.com/nicowilliams,10,https://github.com/heimdal/heimdal/pull/512#issuecomment-452023770,Untested,"@simo5 that sounds familiar.  ISTR talking about this before.  I also don't recall the details, so I'm going to assume that this is the right fix.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,512,2019-01-05T07:40:39Z,2019-01-07T02:50:25Z,2019-01-08T13:41:33Z,MERGED,True,132,23,12,https://github.com/lhoward,gssapi: SPNEGO does not reset NTLM RC4 state (#509),1,[],https://github.com/heimdal/heimdal/pull/512,https://github.com/lhoward,11,https://github.com/heimdal/heimdal/pull/512#issuecomment-452105782,Untested,"I think in terms of coding style and licensing, ingesting the Apple changes is probably the best way forward.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,512,2019-01-05T07:40:39Z,2019-01-07T02:50:25Z,2019-01-08T13:41:33Z,MERGED,True,132,23,12,https://github.com/lhoward,gssapi: SPNEGO does not reset NTLM RC4 state (#509),1,[],https://github.com/heimdal/heimdal/pull/512,https://github.com/simo5,12,https://github.com/heimdal/heimdal/pull/512#issuecomment-452301914,Untested,"I was more concerned about correctness.
I have basically only one isue left with gss-ntlmssp, but I corrected ton of stuff that is broken in many implementations, including Heimdal one.
But up to you anyway",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,513,2019-01-07T04:26:57Z,2019-01-07T05:33:09Z,2019-01-07T05:33:09Z,MERGED,True,99,22,3,https://github.com/lhoward,KDC salt fixes,2,[],https://github.com/heimdal/heimdal/pull/513,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/513,"generate default salts for entries missing them
omit default salt from etype info","generate default salts for entries missing them
omit default salt from etype info",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,513,2019-01-07T04:26:57Z,2019-01-07T05:33:09Z,2019-01-07T05:33:09Z,MERGED,True,99,22,3,https://github.com/lhoward,KDC salt fixes,2,[],https://github.com/heimdal/heimdal/pull/513,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/513#issuecomment-451820288,"generate default salts for entries missing them
omit default salt from etype info",LGTM.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,513,2019-01-07T04:26:57Z,2019-01-07T05:33:09Z,2019-01-07T05:33:09Z,MERGED,True,99,22,3,https://github.com/lhoward,KDC salt fixes,2,[],https://github.com/heimdal/heimdal/pull/513,https://github.com/nicowilliams,3,https://github.com/heimdal/heimdal/pull/513#issuecomment-451822753,"generate default salts for entries missing them
omit default salt from etype info",LGTM.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,515,2019-01-07T04:29:56Z,2019-01-07T04:43:56Z,2019-01-07T05:37:31Z,MERGED,True,39,11,1,https://github.com/jaltman,kdc: get_pa_etype_info_both comply with RFC4120,1,[],https://github.com/heimdal/heimdal/pull/515,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/515,"Heimdal's current behavior regarding the generation of PA-ETYPE-INFO2
and PA-ETYPE-INFO violates RFC4120 in two ways:


when generating responding both PA-ETYPE-INFO2 and PA-ETYPE-INFO
the hints returned in the inverse order: INFO then INFO2 instead
of INFO2 then INFO.


the determination that both PA-ETYPE-INFO2 and PA-ETYPE-INFO is
currently based upon the KDC selected enctype when it should be
determine based upon examining the entire enctype list specified
by the requesting client.


This change corrects the behavior to follow the RFC4120 guidance.","Heimdal's current behavior regarding the generation of PA-ETYPE-INFO2
and PA-ETYPE-INFO violates RFC4120 in two ways:


when generating responding both PA-ETYPE-INFO2 and PA-ETYPE-INFO
the hints returned in the inverse order: INFO then INFO2 instead
of INFO2 then INFO.


the determination that both PA-ETYPE-INFO2 and PA-ETYPE-INFO is
currently based upon the KDC selected enctype when it should be
determine based upon examining the entire enctype list specified
by the requesting client.


This change corrects the behavior to follow the RFC4120 guidance.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,515,2019-01-07T04:29:56Z,2019-01-07T04:43:56Z,2019-01-07T05:37:31Z,MERGED,True,39,11,1,https://github.com/jaltman,kdc: get_pa_etype_info_both comply with RFC4120,1,[],https://github.com/heimdal/heimdal/pull/515,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/515#issuecomment-451820299,"Heimdal's current behavior regarding the generation of PA-ETYPE-INFO2
and PA-ETYPE-INFO violates RFC4120 in two ways:


when generating responding both PA-ETYPE-INFO2 and PA-ETYPE-INFO
the hints returned in the inverse order: INFO then INFO2 instead
of INFO2 then INFO.


the determination that both PA-ETYPE-INFO2 and PA-ETYPE-INFO is
currently based upon the KDC selected enctype when it should be
determine based upon examining the entire enctype list specified
by the requesting client.


This change corrects the behavior to follow the RFC4120 guidance.",LGTM.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,516,2019-01-07T05:14:36Z,2019-01-15T19:21:26Z,2019-01-15T19:21:26Z,MERGED,True,86,32,6,https://github.com/nicowilliams,ASN.1: Support wider bit sets (fix #514),2,[],https://github.com/heimdal/heimdal/pull/516,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/516,"Wait for builds and tests before reviewing.  Also: need to add a test.
The ASN.1 compiler now uses uint64_t for BIT STRING bitsets with between 33 and 64 members.
For BIT STRING bitsets with more than 64 members, no <type>2int() nor int2<type>() functions are generated, and the application can then only encode/decode.","Wait for builds and tests before reviewing.  Also: need to add a test.
The ASN.1 compiler now uses uint64_t for BIT STRING bitsets with between 33 and 64 members.
For BIT STRING bitsets with more than 64 members, no <type>2int() nor int2<type>() functions are generated, and the application can then only encode/decode.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,516,2019-01-07T05:14:36Z,2019-01-15T19:21:26Z,2019-01-15T19:21:26Z,MERGED,True,86,32,6,https://github.com/nicowilliams,ASN.1: Support wider bit sets (fix #514),2,[],https://github.com/heimdal/heimdal/pull/516,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/516#issuecomment-452395476,"Wait for builds and tests before reviewing.  Also: need to add a test.
The ASN.1 compiler now uses uint64_t for BIT STRING bitsets with between 33 and 64 members.
For BIT STRING bitsets with more than 64 members, no <type>2int() nor int2<type>() functions are generated, and the application can then only encode/decode.","Note that now BIT STRINGs with members larger than 63 are supported, but the compiler does not generate <type>2int() and int2<type>() functions in that case (i.e., the app must always encode/decode to/from octet string).",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,516,2019-01-07T05:14:36Z,2019-01-15T19:21:26Z,2019-01-15T19:21:26Z,MERGED,True,86,32,6,https://github.com/nicowilliams,ASN.1: Support wider bit sets (fix #514),2,[],https://github.com/heimdal/heimdal/pull/516,https://github.com/nicowilliams,3,https://github.com/heimdal/heimdal/pull/516#issuecomment-454516918,"Wait for builds and tests before reviewing.  Also: need to add a test.
The ASN.1 compiler now uses uint64_t for BIT STRING bitsets with between 33 and 64 members.
For BIT STRING bitsets with more than 64 members, no <type>2int() nor int2<type>() functions are generated, and the application can then only encode/decode.","FYI, the lib/roken/parse_units.c utilities are kinda broken.
First, they only support parsing / unparsing (formatting) int values, which means that we're limited to 31 flags, not 32, wherever we use this functionality.  Changing this to int64_t would increase the limit to 63, naturally.  We could also make parse_flags() and unparse_flags() deal in uint64_t, but that means splitting {un,}parse_something() into {un,}parse_{signed,unsigned}().
Second, there is no way for these functions to signal errors (they return -1, but since they could legitimately return -1, there is no way to distinguish error cases from legitimate -1 cases).  So, not only should we break the ABI for these functions as described above, but we should also break it by changing their signatures to allow for error reporting.
Third, for flags we ought to be able to deal with the bitfield structs that the ASN.1 compiler generates for BIT STRING types with named members.  In this case these functions should take a pointer and size, and read / write those bit fields.  This would allow code using BIT STRING types with named members larger than 63 to also use the lib/roken units code for user interfaces.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,517,2019-01-07T05:27:04Z,,2021-03-11T03:26:50Z,OPEN,False,314,48,20,https://github.com/nicowilliams,WIP Explicit kvno change option (fix #480),3,[],https://github.com/heimdal/heimdal/pull/517,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/517,WIP.  Wait for builds and tests before reviewing.  Also: need to add a test.,WIP.  Wait for builds and tests before reviewing.  Also: need to add a test.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,517,2019-01-07T05:27:04Z,,2021-03-11T03:26:50Z,OPEN,False,314,48,20,https://github.com/nicowilliams,WIP Explicit kvno change option (fix #480),3,[],https://github.com/heimdal/heimdal/pull/517,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/517#issuecomment-452388514,WIP.  Wait for builds and tests before reviewing.  Also: need to add a test.,"We need a test that creates a principal, randkeys it, sets this flag, randkeys the principal again, checks the kvno hasn't changed, then ext_keytab to make sure we do get the new keyset, change the kvno explicitly, and check that the KDC sees the new keys.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,517,2019-01-07T05:27:04Z,,2021-03-11T03:26:50Z,OPEN,False,314,48,20,https://github.com/nicowilliams,WIP Explicit kvno change option (fix #480),3,[],https://github.com/heimdal/heimdal/pull/517,https://github.com/nicowilliams,3,https://github.com/heimdal/heimdal/pull/517#issuecomment-452583823,WIP.  Wait for builds and tests before reviewing.  Also: need to add a test.,"So, kadmin ext_keytab does the right thing, but ktutil get does not yet.
One thing that's annoying is that kadm5_randkey_principal*() do not return a kvno for the new keys.  Applications do a kadm5_get_principal() after a randkey operation to get the principal's kvno.  But this is racy!  Suppose two clients race to randkey the same principal... one client can write the wrong kvno for the new keys in the keytab.
The only thing that works is to get the keys with kadm5_get_principal(KAFM5_KEY_DATA).  But that presumes get-keys privilege.  Perhaps we should allow the client to get keys for decrypting potentially-extant tickets whenever the client can do a randkey operation...  Perhaps splitting get-keys from get was a mistake after all.  Perhaps what we needed all along for forward security was the new key pruning features.
Doing the right thing without a kadm5_randkey_principal_4() that outputs the new kvno sure is tricky.  It might be simpler to just add a kadm5_randkey_principal_4().",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,517,2019-01-07T05:27:04Z,,2021-03-11T03:26:50Z,OPEN,False,314,48,20,https://github.com/nicowilliams,WIP Explicit kvno change option (fix #480),3,[],https://github.com/heimdal/heimdal/pull/517,https://github.com/nicowilliams,4,https://github.com/heimdal/heimdal/pull/517#issuecomment-452781118,WIP.  Wait for builds and tests before reviewing.  Also: need to add a test.,"Another thing is that if a principal with this new attribute gets its keys changed, maybe it should not allow another key change until the kvno has caught up.  This would prevent unpleasant outcomes due to key rotation races.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,517,2019-01-07T05:27:04Z,,2021-03-11T03:26:50Z,OPEN,False,314,48,20,https://github.com/nicowilliams,WIP Explicit kvno change option (fix #480),3,[],https://github.com/heimdal/heimdal/pull/517,https://github.com/nicowilliams,5,https://github.com/heimdal/heimdal/pull/517#issuecomment-452890377,WIP.  Wait for builds and tests before reviewing.  Also: need to add a test.,"ktutil's get, add, and change are particularly difficult to test, as they prompt for a password.  For manual testing I link ktutil with libkadm5srv instead of libkadm5clnt.  It might be nice if ktutil could behave the same as kadmin, having a -l option.  I'm not sure if anyone is packaging ktutil such that if you install it you only get libkadm5clnt, but if you install kadmin then you also get libkadm5srv, though in Heimdal 8.0 we can surely break that.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,517,2019-01-07T05:27:04Z,,2021-03-11T03:26:50Z,OPEN,False,314,48,20,https://github.com/nicowilliams,WIP Explicit kvno change option (fix #480),3,[],https://github.com/heimdal/heimdal/pull/517,https://github.com/nicowilliams,6,https://github.com/heimdal/heimdal/pull/517#issuecomment-452890621,WIP.  Wait for builds and tests before reviewing.  Also: need to add a test.,"We could also remove ktutil's get, add, and change commands...  after all, kadmin has equivalent functionality.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,517,2019-01-07T05:27:04Z,,2021-03-11T03:26:50Z,OPEN,False,314,48,20,https://github.com/nicowilliams,WIP Explicit kvno change option (fix #480),3,[],https://github.com/heimdal/heimdal/pull/517,https://github.com/nicowilliams,7,https://github.com/heimdal/heimdal/pull/517#issuecomment-452893528,WIP.  Wait for builds and tests before reviewing.  Also: need to add a test.,"The treatment I just gave ktutil's get command also needs to be applied to its change command, and also to kadmin's ext_keytab.
Alternatively, add kadm5_randkey_principal_4() (and kadm5_setkey_principal_4(), though we have no in-tree calls to kadm5_setkey_principal*(), out-of-tree code would need it too).
Alternatively fail if the user does not have get-keys privilege for the target principal.  This approach works for out-of-tree apps as well (e.g., krb5_admind).
I'm inclined to do the last one, though even in that case those ktutil and kadmin commands need to be updated to kadm5_get_principal(KADM5_KEY_DATA) after changing their keys.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,517,2019-01-07T05:27:04Z,,2021-03-11T03:26:50Z,OPEN,False,314,48,20,https://github.com/nicowilliams,WIP Explicit kvno change option (fix #480),3,[],https://github.com/heimdal/heimdal/pull/517,https://github.com/nicowilliams,8,https://github.com/heimdal/heimdal/pull/517#issuecomment-452897958,WIP.  Wait for builds and tests before reviewing.  Also: need to add a test.,"Ah, MIT ran into this a few years back: http://krbdev.mit.edu/rt/Ticket/Display.html?id=7852 krb5/krb5@8a64a49",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,517,2019-01-07T05:27:04Z,,2021-03-11T03:26:50Z,OPEN,False,314,48,20,https://github.com/nicowilliams,WIP Explicit kvno change option (fix #480),3,[],https://github.com/heimdal/heimdal/pull/517,https://github.com/nicowilliams,9,https://github.com/heimdal/heimdal/pull/517#issuecomment-452900996,WIP.  Wait for builds and tests before reviewing.  Also: need to add a test.,"Given that MIT opted for fetching keys to work around these problems, I'll do the same.  I'll make a kadm5_write_keytab() function that writes a principal's keys to a keytab.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,520,2019-01-09T10:11:12Z,2019-01-09T17:27:11Z,2019-01-10T08:16:46Z,MERGED,True,6,2,1,https://github.com/akesandgren,Fix broken return from _krb5_erase_file on missing file.,1,[],https://github.com/heimdal/heimdal/pull/520,https://github.com/akesandgren,1,https://github.com/heimdal/heimdal/pull/520,"The return of lstat should be handled like the ""open"" if errno = ENOENT.","The return of lstat should be handled like the ""open"" if errno = ENOENT.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,520,2019-01-09T10:11:12Z,2019-01-09T17:27:11Z,2019-01-10T08:16:46Z,MERGED,True,6,2,1,https://github.com/akesandgren,Fix broken return from _krb5_erase_file on missing file.,1,[],https://github.com/heimdal/heimdal/pull/520,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/520#issuecomment-452780425,"The return of lstat should be handled like the ""open"" if errno = ENOENT.",Thanks!,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,523,2019-01-15T20:46:24Z,,2021-03-11T03:26:50Z,OPEN,False,292,130,10,https://github.com/nicowilliams,Make lib/roken/parse_units.c more robust; fix #522,2,[],https://github.com/heimdal/heimdal/pull/523,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/523,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,526,2019-02-21T19:38:48Z,2019-02-21T20:46:52Z,2019-02-21T20:46:58Z,MERGED,True,1,5,1,https://github.com/jaltman,roken: tsearch use rk_UNCONST instead of __DECONST  #307,1,[],https://github.com/heimdal/heimdal/pull/526,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/526,"The rk_UNCONST macro exists because neither __DECONST nor uintptr_t
are available on all platforms (for example, AIX).","The rk_UNCONST macro exists because neither __DECONST nor uintptr_t
are available on all platforms (for example, AIX).",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,527,2019-02-21T21:59:10Z,2019-05-22T02:20:15Z,2019-05-22T02:20:20Z,MERGED,True,94,25,6,https://github.com/jaltman,Make common plugin api public,7,[],https://github.com/heimdal/heimdal/pull/527,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/527,This series fixes build issues on Windows related to the new common plugin api and makes the common plugin interface public for consumption by third party plugins.,This series fixes build issues on Windows related to the new common plugin api and makes the common plugin interface public for consumption by third party plugins.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,537,2019-03-21T00:47:00Z,2019-03-21T16:23:40Z,2019-05-13T12:59:41Z,MERGED,True,77,11,3,https://github.com/elric1,Storage stdio,3,[],https://github.com/heimdal/heimdal/pull/537,https://github.com/elric1,1,https://github.com/heimdal/heimdal/pull/537,Couple of optimisations of stdio krb5_storage and a couple of tests and increasing the consistency of truncate between backends a bit.,Couple of optimisations of stdio krb5_storage and a couple of tests and increasing the consistency of truncate between backends a bit.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,537,2019-03-21T00:47:00Z,2019-03-21T16:23:40Z,2019-05-13T12:59:41Z,MERGED,True,77,11,3,https://github.com/elric1,Storage stdio,3,[],https://github.com/heimdal/heimdal/pull/537,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/537#issuecomment-475116035,Couple of optimisations of stdio krb5_storage and a couple of tests and increasing the consistency of truncate between backends a bit.,Some test fails: https://travis-ci.org/heimdal/heimdal/jobs/509217429,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,538,2019-03-22T21:25:24Z,2019-03-22T21:49:47Z,2019-03-22T22:18:06Z,MERGED,True,5,6,2,https://github.com/quanah,For https://github.com/heimdal/heimdal/issues/392,1,[],https://github.com/heimdal/heimdal/pull/538,https://github.com/quanah,1,https://github.com/heimdal/heimdal/pull/538,"Modern OpenSSL no longer has the 2038 year restriction.  Update the
certs to last 500 years rather than 10 years.
Modern crypto requirements suggest a stronger key strength than 1024.
Update to use a minimum of 4096.
Fix executable bit on gen-req.sh","Modern OpenSSL no longer has the 2038 year restriction.  Update the
certs to last 500 years rather than 10 years.
Modern crypto requirements suggest a stronger key strength than 1024.
Update to use a minimum of 4096.
Fix executable bit on gen-req.sh",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,539,2019-03-22T22:21:18Z,2019-03-22T22:23:47Z,2019-03-22T22:23:47Z,MERGED,True,1,1,1,https://github.com/quanah,For https://github.com/heimdal/heimdal/issues/392,1,[],https://github.com/heimdal/heimdal/pull/539,https://github.com/quanah,1,https://github.com/heimdal/heimdal/pull/539,Correctly reference the OID so gen-cert.sh works correctly,Correctly reference the OID so gen-cert.sh works correctly,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,540,2019-03-22T23:02:01Z,2019-03-23T00:59:05Z,2019-03-23T00:59:05Z,MERGED,True,2607,909,73,https://github.com/quanah,Fixes https://github.com/heimdal/heimdal/issues/533,1,[],https://github.com/heimdal/heimdal/pull/540,https://github.com/quanah,1,https://github.com/heimdal/heimdal/pull/540,"Update certs to no longer be expired, last 500 years.
Verified in with local build that all tests in lib/hx509 now pass.","Update certs to no longer be expired, last 500 years.
Verified in with local build that all tests in lib/hx509 now pass.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,543,2019-03-25T13:09:28Z,2019-05-22T13:48:00Z,2019-05-22T13:48:00Z,MERGED,True,2,1,2,https://github.com/rodwiddowson,Windows:   Windows CRT doesn't support %k as format for strftime,1,[],https://github.com/heimdal/heimdal/pull/543,https://github.com/rodwiddowson,1,https://github.com/heimdal/heimdal/pull/543,"The fix involves:

Removing HAVE_STRFTIME from config.h.w32
Adding strftime.c to the makefile
Defining timezone and tzname to their windows equivalent
for the compile of this module","The fix involves:

Removing HAVE_STRFTIME from config.h.w32
Adding strftime.c to the makefile
Defining timezone and tzname to their windows equivalent
for the compile of this module",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,543,2019-03-25T13:09:28Z,2019-05-22T13:48:00Z,2019-05-22T13:48:00Z,MERGED,True,2,1,2,https://github.com/rodwiddowson,Windows:   Windows CRT doesn't support %k as format for strftime,1,[],https://github.com/heimdal/heimdal/pull/543,https://github.com/jaltman,2,https://github.com/heimdal/heimdal/pull/543#issuecomment-476418937,"The fix involves:

Removing HAVE_STRFTIME from config.h.w32
Adding strftime.c to the makefile
Defining timezone and tzname to their windows equivalent
for the compile of this module","Build failed with
NMAKE : warning U4006: special macro undefined : '$<' cl -Zi -Od -DDEBUG /Zi -c -DCRTAPI1=_cdecl -DCRTAPI2=_cdecl -nologo -GS -D_AMD64_=1 -DWIN64 -D_WIN64  -DWIN32 -D_WIN32 -W4 -D_WINNT -D_WIN32_WINNT=0x0501 -DNTDDI_VERSION=0x05010000 -D_WIN32_IE=0x0600 -DWINVER=0x0501  -D_MT -D_DLL -MDd    -DHAVE_CONFIG_H -DHCRYPTO_DEF_PROVIDER=w32crypto  -IC:\projects\heimdal\lib\roken\..\..\out\dest_AMD64\inc -IC:\projects\heimdal\lib\roken\..\..\out\dest_AMD64\inc\krb5   -D_CRT_SECURE_NO_WARNINGS -wd4996 -wd4127 -wd4244 -wd4100 -wd4706 -wd4214 -wd4267 -wd4018 -wd4389 -wd4204 -wd4221 -wd4295 -wd4146 /MP  -FoC:\projects\heimdal\lib\roken\..\..\out\obj_AMD64\lib\roken\ -FdC:\projects\heimdal\lib\roken\..\..\out\obj_AMD64\lib\roken\ -DBUILD_ROKEN_LIB -Dtimezone=_timezone -Dtzname=_tzname cl : Command line error D8003 : missing source filename",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,543,2019-03-25T13:09:28Z,2019-05-22T13:48:00Z,2019-05-22T13:48:00Z,MERGED,True,2,1,2,https://github.com/rodwiddowson,Windows:   Windows CRT doesn't support %k as format for strftime,1,[],https://github.com/heimdal/heimdal/pull/543,https://github.com/rodwiddowson,3,https://github.com/heimdal/heimdal/pull/543#issuecomment-476587761,"The fix involves:

Removing HAVE_STRFTIME from config.h.w32
Adding strftime.c to the makefile
Defining timezone and tzname to their windows equivalent
for the compile of this module","pushed the fix but not sure how to provoke AppVeyor (I assumed it would go automatically, like it does for curl)",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,543,2019-03-25T13:09:28Z,2019-05-22T13:48:00Z,2019-05-22T13:48:00Z,MERGED,True,2,1,2,https://github.com/rodwiddowson,Windows:   Windows CRT doesn't support %k as format for strftime,1,[],https://github.com/heimdal/heimdal/pull/543,https://github.com/jaltman,4,https://github.com/heimdal/heimdal/pull/543#issuecomment-476733988,"The fix involves:

Removing HAVE_STRFTIME from config.h.w32
Adding strftime.c to the makefile
Defining timezone and tzname to their windows equivalent
for the compile of this module","AppVeyor does execute automatically.
Latest error is
cl -Zi -Od -DDEBUG /Zi -c -DCRTAPI1=_cdecl -DCRTAPI2=_cdecl -nologo -GS -D_AMD64_=1 -DWIN64 -D_WIN64  -DWIN32 -D_WIN32 -W4 -D_WINNT -D_WIN32_WINNT=0x0501 -DNTDDI_VERSION=0x05010000 -D_WIN32_IE=0x0600 -DWINVER=0x0501  -D_MT -D_DLL -MDd    -DHAVE_CONFIG_H -DHCRYPTO_DEF_PROVIDER=w32crypto  -IC:\projects\heimdal\lib\roken\..\..\out\dest_AMD64\inc -IC:\projects\heimdal\lib\roken\..\..\out\dest_AMD64\inc\krb5   -D_CRT_SECURE_NO_WARNINGS -wd4996 -wd4127 -wd4244 -wd4100 -wd4706 -wd4214 -wd4267 -wd4018 -wd4389 -wd4204 -wd4221 -wd4295 -wd4146 -FoC:\projects\heimdal\lib\roken\..\..\out\obj_AMD64\lib\roken\strftime.obj -FdC:\projects\heimdal\lib\roken\..\..\out\obj_AMD64\lib\roken\ strftime.c -DBUILD_ROKEN_LIB -Dtimezone=_timezone -Dtzname=_tzname strftime.c c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\INCLUDE\time.h(270) : error C2090: function returns array NMAKE : fatal error U1077: '""c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\Bin\amd64\cl.EXE""' : return code '0x2' Stop. NMAKE : fatal error U1077: 'for' : return code '0x1'",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,543,2019-03-25T13:09:28Z,2019-05-22T13:48:00Z,2019-05-22T13:48:00Z,MERGED,True,2,1,2,https://github.com/rodwiddowson,Windows:   Windows CRT doesn't support %k as format for strftime,1,[],https://github.com/heimdal/heimdal/pull/543,https://github.com/rodwiddowson,5,https://github.com/heimdal/heimdal/pull/543#issuecomment-477065695,"The fix involves:

Removing HAVE_STRFTIME from config.h.w32
Adding strftime.c to the makefile
Defining timezone and tzname to their windows equivalent
for the compile of this module",Sigh VS2017 deprecates and renames timezone and tzname to _timezone and _tzname. VS2010 doesn't.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,544,2019-03-25T13:21:11Z,2019-03-25T23:38:57Z,2019-03-25T23:38:57Z,MERGED,True,4,1,2,https://github.com/rodwiddowson,Windows: Make getaddrinfo-test work,1,[],https://github.com/heimdal/heimdal/pull/544,https://github.com/rodwiddowson,1,https://github.com/heimdal/heimdal/pull/544,"Before we call gettaddrinfo we have to call rx_SOCK_INIT
In order to exercise the test we have to supply parameters to the command line","Before we call gettaddrinfo we have to call rx_SOCK_INIT
In order to exercise the test we have to supply parameters to the command line",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,546,2019-04-06T04:31:05Z,,2021-03-11T03:26:50Z,OPEN,False,456,458,112,https://github.com/nicowilliams,GSS-API const-correctness,5,[],https://github.com/heimdal/heimdal/pull/546,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/546,We still had a bunch of const gss_... arguments in function prototypes in <gssapi/gssapi.h>.  This fixes all of them.,We still had a bunch of const gss_... arguments in function prototypes in <gssapi/gssapi.h>.  This fixes all of them.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,546,2019-04-06T04:31:05Z,,2021-03-11T03:26:50Z,OPEN,False,456,458,112,https://github.com/nicowilliams,GSS-API const-correctness,5,[],https://github.com/heimdal/heimdal/pull/546,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/546#issuecomment-480478501,We still had a bunch of const gss_... arguments in function prototypes in <gssapi/gssapi.h>.  This fixes all of them.,"This will likely be a source-breaking change for plugins that import Heimdal headers and implement the GSS-API, such as Moonshot.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,546,2019-04-06T04:31:05Z,,2021-03-11T03:26:50Z,OPEN,False,456,458,112,https://github.com/nicowilliams,GSS-API const-correctness,5,[],https://github.com/heimdal/heimdal/pull/546,https://github.com/nicowilliams,3,https://github.com/heimdal/heimdal/pull/546#issuecomment-480479705,We still had a bunch of const gss_... arguments in function prototypes in <gssapi/gssapi.h>.  This fixes all of them.,I'm ok with that.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,546,2019-04-06T04:31:05Z,,2021-03-11T03:26:50Z,OPEN,False,456,458,112,https://github.com/nicowilliams,GSS-API const-correctness,5,[],https://github.com/heimdal/heimdal/pull/546,https://github.com/nicowilliams,4,https://github.com/heimdal/heimdal/pull/546#issuecomment-480531552,We still had a bunch of const gss_... arguments in function prototypes in <gssapi/gssapi.h>.  This fixes all of them.,ping @jaltman,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,546,2019-04-06T04:31:05Z,,2021-03-11T03:26:50Z,OPEN,False,456,458,112,https://github.com/nicowilliams,GSS-API const-correctness,5,[],https://github.com/heimdal/heimdal/pull/546,https://github.com/lhoward,5,https://github.com/heimdal/heimdal/pull/546#issuecomment-480531867,We still had a bunch of const gss_... arguments in function prototypes in <gssapi/gssapi.h>.  This fixes all of them.,"We could insulate by including a private copy of the header in mech_eap but, need to be careful as there are some platform-specific things like structure packing on macOS. I’d prefer not to do this but then mech_eap will he tied to a specific Heimdal version. (I don’t have any skin in the game, just prefer to move slow and not break things.)",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,546,2019-04-06T04:31:05Z,,2021-03-11T03:26:50Z,OPEN,False,456,458,112,https://github.com/nicowilliams,GSS-API const-correctness,5,[],https://github.com/heimdal/heimdal/pull/546,https://github.com/nicowilliams,6,https://github.com/heimdal/heimdal/pull/546#issuecomment-480531979,We still had a bunch of const gss_... arguments in function prototypes in <gssapi/gssapi.h>.  This fixes all of them.,Or we could have a macro that makes all the gss_const_* types not const.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,546,2019-04-06T04:31:05Z,,2021-03-11T03:26:50Z,OPEN,False,456,458,112,https://github.com/nicowilliams,GSS-API const-correctness,5,[],https://github.com/heimdal/heimdal/pull/546,https://github.com/lhoward,7,https://github.com/heimdal/heimdal/pull/546#issuecomment-480532422,We still had a bunch of const gss_... arguments in function prototypes in <gssapi/gssapi.h>.  This fixes all of them.,"Or we could have a macro that makes all the gss_const_* types not const.

I think I already did that in the current code. It’s dealing with mixed versions of Heimdal that have different degrees of const-ness which is tricky.

Cc @alejandro-perez",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,546,2019-04-06T04:31:05Z,,2021-03-11T03:26:50Z,OPEN,False,456,458,112,https://github.com/nicowilliams,GSS-API const-correctness,5,[],https://github.com/heimdal/heimdal/pull/546,https://github.com/nicowilliams,8,https://github.com/heimdal/heimdal/pull/546#issuecomment-480534133,We still had a bunch of const gss_... arguments in function prototypes in <gssapi/gssapi.h>.  This fixes all of them.,"I mean, PuTTY and the OpenJDK include their own private copies of <gssapi.h>.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,546,2019-04-06T04:31:05Z,,2021-03-11T03:26:50Z,OPEN,False,456,458,112,https://github.com/nicowilliams,GSS-API const-correctness,5,[],https://github.com/heimdal/heimdal/pull/546,https://github.com/lhoward,9,https://github.com/heimdal/heimdal/pull/546#issuecomment-480534646,We still had a bunch of const gss_... arguments in function prototypes in <gssapi/gssapi.h>.  This fixes all of them.,"Yeah it’s probably the best option.
…
 On 6 Apr 2019, at 22:12, Nico Williams ***@***.***> wrote:

 I mean, PuTTY and the OpenJDK include their own private copies of <gssapi.h>.

 —
 You are receiving this because you commented.
 Reply to this email directly, view it on GitHub, or mute the thread.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,546,2019-04-06T04:31:05Z,,2021-03-11T03:26:50Z,OPEN,False,456,458,112,https://github.com/nicowilliams,GSS-API const-correctness,5,[],https://github.com/heimdal/heimdal/pull/546,https://github.com/nicowilliams,10,https://github.com/heimdal/heimdal/pull/546#issuecomment-480534731,We still had a bunch of const gss_... arguments in function prototypes in <gssapi/gssapi.h>.  This fixes all of them.,"I think so.  OK, so now, to review this.  Of course, it's very mechanical, rote, large, boring.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,546,2019-04-06T04:31:05Z,,2021-03-11T03:26:50Z,OPEN,False,456,458,112,https://github.com/nicowilliams,GSS-API const-correctness,5,[],https://github.com/heimdal/heimdal/pull/546,https://github.com/alejandro-perez,11,https://github.com/heimdal/heimdal/pull/546#issuecomment-480858841,We still had a bunch of const gss_... arguments in function prototypes in <gssapi/gssapi.h>.  This fixes all of them.,"I think I already did that in the current code. It’s dealing with mixed versions of Heimdal that have different degrees of const-ness which is tricky. Cc @alejandro-perez

This was done for the Mac client, wasn't it? In that case, I haven't had the time to check it out yet.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,546,2019-04-06T04:31:05Z,,2021-03-11T03:26:50Z,OPEN,False,456,458,112,https://github.com/nicowilliams,GSS-API const-correctness,5,[],https://github.com/heimdal/heimdal/pull/546,https://github.com/lhoward,12,https://github.com/heimdal/heimdal/pull/546#issuecomment-480859337,We still had a bunch of const gss_... arguments in function prototypes in <gssapi/gssapi.h>.  This fixes all of them.,"@nicowilliams wants to change it yet again to add more const-ness, which is correct but would be another source breaking change for building mech_eap against Heimdal (unless of course we synchronise and require the latest version).",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,546,2019-04-06T04:31:05Z,,2021-03-11T03:26:50Z,OPEN,False,456,458,112,https://github.com/nicowilliams,GSS-API const-correctness,5,[],https://github.com/heimdal/heimdal/pull/546,https://github.com/alejandro-perez,13,https://github.com/heimdal/heimdal/pull/546#issuecomment-480860797,We still had a bunch of const gss_... arguments in function prototypes in <gssapi/gssapi.h>.  This fixes all of them.,"In principle, I'd be ok with that. But I'd check with @spaetow, who is the one managing mech_eap's builds for Mac at the moment.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,546,2019-04-06T04:31:05Z,,2021-03-11T03:26:50Z,OPEN,False,456,458,112,https://github.com/nicowilliams,GSS-API const-correctness,5,[],https://github.com/heimdal/heimdal/pull/546,https://github.com/lhoward,14,https://github.com/heimdal/heimdal/pull/546#issuecomment-480861307,We still had a bunch of const gss_... arguments in function prototypes in <gssapi/gssapi.h>.  This fixes all of them.,"It's not Mac-specific though, it's any platform that uses Heimdal (does Debian use it?). I think the right answer is to actually have a private gssapi.h in mech_eap. But this needs to be done carefully to be ABI compatible for both MIT and Heimdal.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,546,2019-04-06T04:31:05Z,,2021-03-11T03:26:50Z,OPEN,False,456,458,112,https://github.com/nicowilliams,GSS-API const-correctness,5,[],https://github.com/heimdal/heimdal/pull/546,https://github.com/alejandro-perez,15,https://github.com/heimdal/heimdal/pull/546#issuecomment-480862241,We still had a bunch of const gss_... arguments in function prototypes in <gssapi/gssapi.h>.  This fixes all of them.,"At the moment, we are using MIT for Debian, yet I guess we could potentially use Heimdal as well.
We might have a private gssapi.h in mech_eap that is only used when Heimdal is selected, whereas the system's default is used if MIT is chosen.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,546,2019-04-06T04:31:05Z,,2021-03-11T03:26:50Z,OPEN,False,456,458,112,https://github.com/nicowilliams,GSS-API const-correctness,5,[],https://github.com/heimdal/heimdal/pull/546,https://github.com/nicowilliams,16,https://github.com/heimdal/heimdal/pull/546#issuecomment-480891028,We still had a bunch of const gss_... arguments in function prototypes in <gssapi/gssapi.h>.  This fixes all of them.,I'd also be OK with adding a macro you can define to get non-constified GSS funciton prototypes.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,546,2019-04-06T04:31:05Z,,2021-03-11T03:26:50Z,OPEN,False,456,458,112,https://github.com/nicowilliams,GSS-API const-correctness,5,[],https://github.com/heimdal/heimdal/pull/546,https://github.com/lhoward,17,https://github.com/heimdal/heimdal/pull/546#issuecomment-480891314,We still had a bunch of const gss_... arguments in function prototypes in <gssapi/gssapi.h>.  This fixes all of them.,"We already have one in mech_eap, problem is that to deal with different Heimdal versions we'd need to have two macros. Then it gets ugly quickly.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,546,2019-04-06T04:31:05Z,,2021-03-11T03:26:50Z,OPEN,False,456,458,112,https://github.com/nicowilliams,GSS-API const-correctness,5,[],https://github.com/heimdal/heimdal/pull/546,https://github.com/lhoward,18,https://github.com/heimdal/heimdal/pull/546#issuecomment-480891678,We still had a bunch of const gss_... arguments in function prototypes in <gssapi/gssapi.h>.  This fixes all of them.,"Actually that's not correct, we don't have a macro. Currently it is like:
OM_uint32 GSSAPI_CALLCONV
gss_accept_sec_context(OM_uint32 *minor,
                       gss_ctx_id_t *context_handle,
#ifdef HAVE_HEIMDAL_VERSION
                       gss_const_cred_id_t cred,
#else
                       gss_cred_id_t cred,
#endif
                       gss_buffer_t input_token,
                       gss_channel_bindings_t input_chan_bindings,
                       gss_name_t *src_name,
                       gss_OID *mech_type,
                       gss_buffer_t output_token,
                       OM_uint32 *ret_flags,
                       OM_uint32 *time_rec,
                       gss_cred_id_t *delegated_cred_handle)
{
...
}",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,546,2019-04-06T04:31:05Z,,2021-03-11T03:26:50Z,OPEN,False,456,458,112,https://github.com/nicowilliams,GSS-API const-correctness,5,[],https://github.com/heimdal/heimdal/pull/546,https://github.com/lhoward,19,https://github.com/heimdal/heimdal/pull/546#issuecomment-480891910,We still had a bunch of const gss_... arguments in function prototypes in <gssapi/gssapi.h>.  This fixes all of them.,"but yes, probably want to avoid something like GSS_MAYBE_CONST...",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,546,2019-04-06T04:31:05Z,,2021-03-11T03:26:50Z,OPEN,False,456,458,112,https://github.com/nicowilliams,GSS-API const-correctness,5,[],https://github.com/heimdal/heimdal/pull/546,https://github.com/nicowilliams,20,https://github.com/heimdal/heimdal/pull/546#issuecomment-480895634,We still had a bunch of const gss_... arguments in function prototypes in <gssapi/gssapi.h>.  This fixes all of them.,"I was thinking of a macro that changes the gss_const_* typedefs to not actually be const...
Or, perhaps, add new typedefs like gss_maybe_const_*, use those in all the function prototypes where we now use gss_const_*, and then have a macro select whether gss_maybe_const_X is a typedef alias of gss_X or gss_const_X.
This way the header can be fairly clean.  I don't really want #ifdefs in the middle of function prototypes...",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,546,2019-04-06T04:31:05Z,,2021-03-11T03:26:50Z,OPEN,False,456,458,112,https://github.com/nicowilliams,GSS-API const-correctness,5,[],https://github.com/heimdal/heimdal/pull/546,https://github.com/lhoward,21,https://github.com/heimdal/heimdal/pull/546#issuecomment-480896287,We still had a bunch of const gss_... arguments in function prototypes in <gssapi/gssapi.h>.  This fixes all of them.,"Above wasn't a prototype BTW (I just added the semicolon for correctness), it's actually the function body in mech_eap. Sorry if that was confusing!",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,546,2019-04-06T04:31:05Z,,2021-03-11T03:26:50Z,OPEN,False,456,458,112,https://github.com/nicowilliams,GSS-API const-correctness,5,[],https://github.com/heimdal/heimdal/pull/546,https://github.com/lhoward,22,https://github.com/heimdal/heimdal/pull/546#issuecomment-480896496,We still had a bunch of const gss_... arguments in function prototypes in <gssapi/gssapi.h>.  This fixes all of them.,"Anyway, do what you need to do and I'll update mech_eap. Sounds like no one seems to be caring if it builds against Heimdal except maybe the SSP and macOS versions.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,546,2019-04-06T04:31:05Z,,2021-03-11T03:26:50Z,OPEN,False,456,458,112,https://github.com/nicowilliams,GSS-API const-correctness,5,[],https://github.com/heimdal/heimdal/pull/546,https://github.com/nicowilliams,23,https://github.com/heimdal/heimdal/pull/546#issuecomment-480896649,We still had a bunch of const gss_... arguments in function prototypes in <gssapi/gssapi.h>.  This fixes all of them.,"Hey, there was a semicolon...",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,546,2019-04-06T04:31:05Z,,2021-03-11T03:26:50Z,OPEN,False,456,458,112,https://github.com/nicowilliams,GSS-API const-correctness,5,[],https://github.com/heimdal/heimdal/pull/546,https://github.com/lhoward,24,https://github.com/heimdal/heimdal/pull/546#issuecomment-480896920,We still had a bunch of const gss_... arguments in function prototypes in <gssapi/gssapi.h>.  This fixes all of them.,"My bad, should've been {}!",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,546,2019-04-06T04:31:05Z,,2021-03-11T03:26:50Z,OPEN,False,456,458,112,https://github.com/nicowilliams,GSS-API const-correctness,5,[],https://github.com/heimdal/heimdal/pull/546,https://github.com/alejandro-perez,25,https://github.com/heimdal/heimdal/pull/546#issuecomment-480896967,We still had a bunch of const gss_... arguments in function prototypes in <gssapi/gssapi.h>.  This fixes all of them.,"Anyway, do what you need to do and I'll update mech_eap. Sounds like no one seems to be caring if it builds against Heimdal except maybe the SSP and macOS versions.

Please, note the new upstream git repo for mech_eap is now https://github.com/janetuk/mech_eap",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,546,2019-04-06T04:31:05Z,,2021-03-11T03:26:50Z,OPEN,False,456,458,112,https://github.com/nicowilliams,GSS-API const-correctness,5,[],https://github.com/heimdal/heimdal/pull/546,https://github.com/nicowilliams,26,https://github.com/heimdal/heimdal/pull/546#issuecomment-480897171,We still had a bunch of const gss_... arguments in function prototypes in <gssapi/gssapi.h>.  This fixes all of them.,"Ok, thanks.  Do you want to review this?  I can probably get @vdukhovni, but it's really fairly obvious, and produced fairly mechanically (I used lots of VIM macros to make it easy to do this quickly).",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,546,2019-04-06T04:31:05Z,,2021-03-11T03:26:50Z,OPEN,False,456,458,112,https://github.com/nicowilliams,GSS-API const-correctness,5,[],https://github.com/heimdal/heimdal/pull/546,https://github.com/lhoward,27,https://github.com/heimdal/heimdal/pull/546#issuecomment-480897251,We still had a bunch of const gss_... arguments in function prototypes in <gssapi/gssapi.h>.  This fixes all of them.,"Thanks @alejandro-perez, I think I actually have a few fixes sitting in the old repository that aren't in this. I can look into this next week when I'm back in Australia. Also, is the SSP being maintained? Can we synchronise the two? (Sorry @nicowilliams this is really OT.)",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,546,2019-04-06T04:31:05Z,,2021-03-11T03:26:50Z,OPEN,False,456,458,112,https://github.com/nicowilliams,GSS-API const-correctness,5,[],https://github.com/heimdal/heimdal/pull/546,https://github.com/alejandro-perez,28,https://github.com/heimdal/heimdal/pull/546#issuecomment-480897772,We still had a bunch of const gss_... arguments in function prototypes in <gssapi/gssapi.h>.  This fixes all of them.,"I think the SSP is Painless work, I have no clue about its status.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,546,2019-04-06T04:31:05Z,,2021-03-11T03:26:50Z,OPEN,False,456,458,112,https://github.com/nicowilliams,GSS-API const-correctness,5,[],https://github.com/heimdal/heimdal/pull/546,https://github.com/nicowilliams,29,https://github.com/heimdal/heimdal/pull/546#issuecomment-480899608,We still had a bunch of const gss_... arguments in function prototypes in <gssapi/gssapi.h>.  This fixes all of them.,"@lhoward no, no, by all means, it may be OT but it's interesting.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,546,2019-04-06T04:31:05Z,,2021-03-11T03:26:50Z,OPEN,False,456,458,112,https://github.com/nicowilliams,GSS-API const-correctness,5,[],https://github.com/heimdal/heimdal/pull/546,https://github.com/lhoward,30,https://github.com/heimdal/heimdal/pull/546#issuecomment-480900147,We still had a bunch of const gss_... arguments in function prototypes in <gssapi/gssapi.h>.  This fixes all of them.,"Well, the SSP is a fork of mech_eap with a small number of changes to make GSS objects reference counted and add a small number of extra fields (e.g. for the NT token). Those changes should probably be upstreamed. The SSP itself is effectively a not-perfectly-abstracted shim between SSPI and GSS.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,546,2019-04-06T04:31:05Z,,2021-03-11T03:26:50Z,OPEN,False,456,458,112,https://github.com/nicowilliams,GSS-API const-correctness,5,[],https://github.com/heimdal/heimdal/pull/546,https://github.com/nicowilliams,31,https://github.com/heimdal/heimdal/pull/546#issuecomment-480901773,We still had a bunch of const gss_... arguments in function prototypes in <gssapi/gssapi.h>.  This fixes all of them.,"Reference-counting sounds useful, and getting a reference (incref) should be distinct from duplicating the object (as in gss_duplicate_{name,cred}()) in that an object to which you have a reference might be mutated by another thread (e.g., call gss_add_cred() to add cred elements) while a duplicate should not be.  And also, we'd not want to have gss_duplicate_context() really duplicate, but rather, get a reference (incref).",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,546,2019-04-06T04:31:05Z,,2021-03-11T03:26:50Z,OPEN,False,456,458,112,https://github.com/nicowilliams,GSS-API const-correctness,5,[],https://github.com/heimdal/heimdal/pull/546,https://github.com/nicowilliams,32,https://github.com/heimdal/heimdal/pull/546#issuecomment-480902878,We still had a bunch of const gss_... arguments in function prototypes in <gssapi/gssapi.h>.  This fixes all of them.,"Also, I like the idea of having an SSP->GSS bridge shim in-tree.  I'd also like us to have a clean version of Martin's gsskrb5 GSS->SSP shim.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,546,2019-04-06T04:31:05Z,,2021-03-11T03:26:50Z,OPEN,False,456,458,112,https://github.com/nicowilliams,GSS-API const-correctness,5,[],https://github.com/heimdal/heimdal/pull/546,https://github.com/lhoward,33,https://github.com/heimdal/heimdal/pull/546#issuecomment-480903355,We still had a bunch of const gss_... arguments in function prototypes in <gssapi/gssapi.h>.  This fixes all of them.,"Only the context and credential objects are reference counted and it's more for managing concurrency and shared credentials than anything else (it isn't exposed to the application directly). The code also predates gss_duplicate_cred().
I wasn't planning to open-source the shim, although it could be done (I think it would need Painless' approval though, I would have to check). I'd also need to consider the business risk of doing so (PADL is the code owner).",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,546,2019-04-06T04:31:05Z,,2021-03-11T03:26:50Z,OPEN,False,456,458,112,https://github.com/nicowilliams,GSS-API const-correctness,5,[],https://github.com/heimdal/heimdal/pull/546,https://github.com/nicowilliams,34,https://github.com/heimdal/heimdal/pull/546#issuecomment-480903632,We still had a bunch of const gss_... arguments in function prototypes in <gssapi/gssapi.h>.  This fixes all of them.,Never mind -- no pressure!,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,546,2019-04-06T04:31:05Z,,2021-03-11T03:26:50Z,OPEN,False,456,458,112,https://github.com/nicowilliams,GSS-API const-correctness,5,[],https://github.com/heimdal/heimdal/pull/546,https://github.com/nicowilliams,35,https://github.com/heimdal/heimdal/pull/546#issuecomment-480967116,We still had a bunch of const gss_... arguments in function prototypes in <gssapi/gssapi.h>.  This fixes all of them.,"I braino'ed when I saw gss_const_ctx_id_t.  It should not exist, but I ran with it.  Oops.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,546,2019-04-06T04:31:05Z,,2021-03-11T03:26:50Z,OPEN,False,456,458,112,https://github.com/nicowilliams,GSS-API const-correctness,5,[],https://github.com/heimdal/heimdal/pull/546,https://github.com/nicowilliams,36,https://github.com/heimdal/heimdal/pull/546#issuecomment-480968979,We still had a bunch of const gss_... arguments in function prototypes in <gssapi/gssapi.h>.  This fixes all of them.,@jaltman shall I push fixup commits or squashed and rebased commits?,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,546,2019-04-06T04:31:05Z,,2021-03-11T03:26:50Z,OPEN,False,456,458,112,https://github.com/nicowilliams,GSS-API const-correctness,5,[],https://github.com/heimdal/heimdal/pull/546,https://github.com/nicowilliams,37,https://github.com/heimdal/heimdal/pull/546#issuecomment-480987963,We still had a bunch of const gss_... arguments in function prototypes in <gssapi/gssapi.h>.  This fixes all of them.,All four commits can now be squashed down to one.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,546,2019-04-06T04:31:05Z,,2021-03-11T03:26:50Z,OPEN,False,456,458,112,https://github.com/nicowilliams,GSS-API const-correctness,5,[],https://github.com/heimdal/heimdal/pull/546,https://github.com/nicowilliams,38,https://github.com/heimdal/heimdal/pull/546#issuecomment-481073923,We still had a bunch of const gss_... arguments in function prototypes in <gssapi/gssapi.h>.  This fixes all of them.,I still have to undo the mutex pointer thing.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,546,2019-04-06T04:31:05Z,,2021-03-11T03:26:50Z,OPEN,False,456,458,112,https://github.com/nicowilliams,GSS-API const-correctness,5,[],https://github.com/heimdal/heimdal/pull/546,https://github.com/nicowilliams,39,https://github.com/heimdal/heimdal/pull/546#issuecomment-481075458,We still had a bunch of const gss_... arguments in function prototypes in <gssapi/gssapi.h>.  This fixes all of them.,"OK, I've undone the mutex thing, and now the diffs are more manageable:  +456 −458.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,551,2019-05-04T06:19:38Z,,2021-03-11T03:26:50Z,OPEN,False,475,67,23,https://github.com/lhoward,support for GSS_C_ANON_FLAG in krb5 mech,5,['feature request'],https://github.com/heimdal/heimdal/pull/551,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/551,Creating pull request to track progress on support for anonymous PKINIT in GSS-API,Creating pull request to track progress on support for anonymous PKINIT in GSS-API,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,551,2019-05-04T06:19:38Z,,2021-03-11T03:26:50Z,OPEN,False,475,67,23,https://github.com/lhoward,support for GSS_C_ANON_FLAG in krb5 mech,5,['feature request'],https://github.com/heimdal/heimdal/pull/551,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/551#issuecomment-491482062,Creating pull request to track progress on support for anonymous PKINIT in GSS-API,Depends on #552,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,551,2019-05-04T06:19:38Z,,2021-03-11T03:26:50Z,OPEN,False,475,67,23,https://github.com/lhoward,support for GSS_C_ANON_FLAG in krb5 mech,5,['feature request'],https://github.com/heimdal/heimdal/pull/551,https://github.com/jaltman,3,https://github.com/heimdal/heimdal/pull/551#issuecomment-492403691,Creating pull request to track progress on support for anonymous PKINIT in GSS-API,Please rebase on top of current master,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,551,2019-05-04T06:19:38Z,,2021-03-11T03:26:50Z,OPEN,False,475,67,23,https://github.com/lhoward,support for GSS_C_ANON_FLAG in krb5 mech,5,['feature request'],https://github.com/heimdal/heimdal/pull/551,https://github.com/lhoward,4,https://github.com/heimdal/heimdal/pull/551#issuecomment-610220810,Creating pull request to track progress on support for anonymous PKINIT in GSS-API,"Please rebase now that the fix commits have been merged independent of this PR.

Rebased and pushed. It's a while ago since I looked at this, so I can't remember what you want to do about the RFC8062 divergences (noted in the code). What do we need to do to get this merged?
Also, since I wrote that code, @vdukhovni fixed krb5_principal_is_anonymous() to deal with the fact that Heimdal 7.5 and below KDCs leave the anonymous principal name type as KRB5_NT_PRINCIPAL. Should we support these with krb5 GSS anonymous support? If so, we need to carefully audit krb5_principal_is_anonymous() calls from the mechanism to see which ones need to also pass KRB5_ANON_IGNORE_NAME_TYPE.
Have also ""fixed"" to always ignore the krb5 name type when comparing anonymous names. This is apparently needed to support Heimdal 7.5 and earlier KDCs. I don't see any risk in doing so unconditionally in the GSS mechanism.
cc @jaltman, @vdukhovni",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,551,2019-05-04T06:19:38Z,,2021-03-11T03:26:50Z,OPEN,False,475,67,23,https://github.com/lhoward,support for GSS_C_ANON_FLAG in krb5 mech,5,['feature request'],https://github.com/heimdal/heimdal/pull/551,https://github.com/lhoward,5,https://github.com/heimdal/heimdal/pull/551#issuecomment-610224188,Creating pull request to track progress on support for anonymous PKINIT in GSS-API,"OK, I added a separate commit with KRB5_ANON_IGNORE_NAME_TYPE but it needs careful review.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,552,2019-05-08T02:52:45Z,2019-05-14T19:16:20Z,2019-05-14T19:16:20Z,MERGED,True,229,96,18,https://github.com/lhoward,krb5 anonymous fixes (ex-GSS),11,['bug'],https://github.com/heimdal/heimdal/pull/552,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/552,Anonymous fixes up to but not including GSS_C_ANON_FLAG support,Anonymous fixes up to but not including GSS_C_ANON_FLAG support,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,553,2019-05-10T18:24:07Z,2019-05-14T19:52:03Z,2021-07-30T15:29:34Z,MERGED,True,53,17,1,https://github.com/elric1,Sendto kdc,3,['bug'],https://github.com/heimdal/heimdal/pull/553,https://github.com/elric1,1,https://github.com/heimdal/heimdal/pull/553,"Comment in the commit. It is a little naughty of me to re-use the fd to keep state in this way but it does avoid another variable in wait_ctx. I'm no wedded to it, though, we can decide to be cleaner.","Comment in the commit. It is a little naughty of me to re-use the fd to keep state in this way but it does avoid another variable in wait_ctx. I'm no wedded to it, though, we can decide to be cleaner.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,553,2019-05-10T18:24:07Z,2019-05-14T19:52:03Z,2021-07-30T15:29:34Z,MERGED,True,53,17,1,https://github.com/elric1,Sendto kdc,3,['bug'],https://github.com/heimdal/heimdal/pull/553,https://github.com/jaltman,2,https://github.com/heimdal/heimdal/pull/553#issuecomment-491607163,"Comment in the commit. It is a little naughty of me to re-use the fd to keep state in this way but it does avoid another variable in wait_ctx. I'm no wedded to it, though, we can decide to be cleaner.","I'm not sure this approach is correct.  The goal is to avoid delays and where possible additional round trips.  In most cases the Kerberos library cannot maintain state and cache which endpoints for a given server are reachable and which path is fastest.   Therefore, the only approach that can avoid unnecessary delays is to send to all endpoints for a given KDC and protocol simultaneously and use the first positive response that is returned.   The KDCs implement replay detection so if a request is received from more than one endpoint it will either (a) ignore the duplicate request, (b) return the prior response, or (c) return a replay error.
Even one second is a very long delay that I believe should be avoided.
RFC6555 Happy Eyeballs Dual Stack for Connected protocols and RFC6157 IPv6 Transition in SIP as an example for unconnected protocols are relevant.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,553,2019-05-10T18:24:07Z,2019-05-14T19:52:03Z,2021-07-30T15:29:34Z,MERGED,True,53,17,1,https://github.com/elric1,Sendto kdc,3,['bug'],https://github.com/heimdal/heimdal/pull/553,https://github.com/elric1,3,https://github.com/heimdal/heimdal/pull/553#issuecomment-491788903,"Comment in the commit. It is a little naughty of me to re-use the fd to keep state in this way but it does avoid another variable in wait_ctx. I'm no wedded to it, though, we can decide to be cleaner.","I'm not sure this approach is correct. The goal is to avoid delays and where possible additional round trips. In most cases the Kerberos library cannot maintain state and cache which endpoints for a given server are reachable and which path is fastest. Therefore, the only approach that can avoid unnecessary delays is to send to all endpoints for a given KDC and protocol simultaneously and use the first positive response that is returned. The KDCs implement replay detection so if a request is received from more than one endpoint it will either (a) ignore the duplicate request, (b) return the prior response, or (c) return a replay error.
Even one second is a very long delay that I believe should be avoided.
RFC6555 Happy Eyeballs Dual Stack for Connected protocols and RFC6157 IPv6 Transition in SIP as an example for unconnected protocols are relevant.

Well, this patch is closer to what you want than what we have now. My goal was to ensure that there is never a time where we are waiting whilst not actually waiting. And so, I believe that my patch is fixing the current algorithm. What you are proposing is changing it.
I'm not against reducing the delay from 1s which is quite long, but I'm not convinced that replay detection allows you to issue the requests in parallel. It's not necessarily true that all of the IP addresses returned for a multi-homed host are actually going to go to the same KDC and be rejected as replays. In fact, I don't think that we even share the replay cache between different KDC processes on a single KDC with multiple cores.
(That said, your goals can be attained by changing the 3 to a 0 on one of the lines of the patch.)",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,555,2019-05-14T16:45:29Z,2019-05-14T19:52:25Z,2019-05-14T19:52:35Z,MERGED,True,120,0,4,https://github.com/jaltman,CVE-2018-16860 and PA-PKINIT-KX verification,2,['bug'],https://github.com/heimdal/heimdal/pull/555,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/555,Samba CVE-2018-16860,Samba CVE-2018-16860,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,556,2019-05-14T20:41:20Z,2019-05-14T21:48:09Z,2019-05-14T21:48:09Z,MERGED,True,3325,1056,104,https://github.com/vdukhovni,7.6.0 release updates,23,[],https://github.com/heimdal/heimdal/pull/556,https://github.com/vdukhovni,1,https://github.com/heimdal/heimdal/pull/556,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,557,2019-05-15T07:43:26Z,2019-05-15T21:41:18Z,2019-05-15T21:41:28Z,CLOSED,False,2,0,1,https://github.com/jaltman,additional pullups for 7.6.0,1,[],https://github.com/heimdal/heimdal/pull/557,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/557,(cherry picked from commit b787491),(cherry picked from commit b787491),True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,558,2019-05-15T08:07:49Z,2019-05-16T06:23:21Z,2019-05-22T13:37:50Z,MERGED,True,15,8,8,https://github.com/jaltman,make krb5_principal_is_anonymous public,1,[],https://github.com/heimdal/heimdal/pull/558,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/558,"_krb5_principal_is_anonymous() is used outside lib/krb5 and
therefore it needs to be properly exported and its flag macros
need to be in a public header: krb5.h not krb5_locl.h.
Including krb5_locl.h from within kuser_locl.h for instance
results in build failures on Solaris.
This change renames the function and makes it part of the public
api.
Change-Id: I130d1698b10bdbd150b95e8c7d32dfc362889ce6","_krb5_principal_is_anonymous() is used outside lib/krb5 and
therefore it needs to be properly exported and its flag macros
need to be in a public header: krb5.h not krb5_locl.h.
Including krb5_locl.h from within kuser_locl.h for instance
results in build failures on Solaris.
This change renames the function and makes it part of the public
api.
Change-Id: I130d1698b10bdbd150b95e8c7d32dfc362889ce6",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,558,2019-05-15T08:07:49Z,2019-05-16T06:23:21Z,2019-05-22T13:37:50Z,MERGED,True,15,8,8,https://github.com/jaltman,make krb5_principal_is_anonymous public,1,[],https://github.com/heimdal/heimdal/pull/558,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/558#issuecomment-492573681,"_krb5_principal_is_anonymous() is used outside lib/krb5 and
therefore it needs to be properly exported and its flag macros
need to be in a public header: krb5.h not krb5_locl.h.
Including krb5_locl.h from within kuser_locl.h for instance
results in build failures on Solaris.
This change renames the function and makes it part of the public
api.
Change-Id: I130d1698b10bdbd150b95e8c7d32dfc362889ce6","I would prefer to keep it private API if possible just because I didn’t give much thought to its design, perhaps we need a way to expose semi-private API outside krb5_locl.h?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,558,2019-05-15T08:07:49Z,2019-05-16T06:23:21Z,2019-05-22T13:37:50Z,MERGED,True,15,8,8,https://github.com/jaltman,make krb5_principal_is_anonymous public,1,[],https://github.com/heimdal/heimdal/pull/558,https://github.com/jaltman,3,https://github.com/heimdal/heimdal/pull/558#issuecomment-492632847,"_krb5_principal_is_anonymous() is used outside lib/krb5 and
therefore it needs to be properly exported and its flag macros
need to be in a public header: krb5.h not krb5_locl.h.
Including krb5_locl.h from within kuser_locl.h for instance
results in build failures on Solaris.
This change renames the function and makes it part of the public
api.
Change-Id: I130d1698b10bdbd150b95e8c7d32dfc362889ce6","If the function is to be used outside of the kerberos library even by an in-tree process it must be properly exported by which I mean correct use of KRB5_LIB_FUNCTION and KRB5_LIB_CALL.
The prototypes for all functions are automatically generated into krb5-protos.h which is included by krb5.h.
krb5_locl.h cannot be included by source files outside of lib/krb5.
We can leave the leading underscore as part of the name but we don't have an alternative to including the macros in krb5.h.
Another possibility is to publicly provide three functions
krb5_principal_is_anonymous()
krb5_principal_is_anonymous_authenticated()
krb5_principal_is_anonymous_unauthenticated()
which removes the need for the macros entirely.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,558,2019-05-15T08:07:49Z,2019-05-16T06:23:21Z,2019-05-22T13:37:50Z,MERGED,True,15,8,8,https://github.com/jaltman,make krb5_principal_is_anonymous public,1,[],https://github.com/heimdal/heimdal/pull/558,https://github.com/lhoward,4,https://github.com/heimdal/heimdal/pull/558#issuecomment-492933863,"_krb5_principal_is_anonymous() is used outside lib/krb5 and
therefore it needs to be properly exported and its flag macros
need to be in a public header: krb5.h not krb5_locl.h.
Including krb5_locl.h from within kuser_locl.h for instance
results in build failures on Solaris.
This change renames the function and makes it part of the public
api.
Change-Id: I130d1698b10bdbd150b95e8c7d32dfc362889ce6","OK, LGTM, let's merge.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,559,2019-05-15T17:28:13Z,2019-05-15T18:12:29Z,2019-05-15T18:12:29Z,MERGED,True,1,1,1,https://github.com/dariaphoebe,tests: generate test_template_asn1-template.c for testing,1,[],https://github.com/heimdal/heimdal/pull/559,https://github.com/dariaphoebe,1,https://github.com/heimdal/heimdal/pull/559,"the rule to generate test_template_asn1-template.c from
test_template_asn1-template.x was missing. add it.","the rule to generate test_template_asn1-template.c from
test_template_asn1-template.x was missing. add it.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,560,2019-05-15T17:44:58Z,2019-05-15T18:47:12Z,2019-05-15T18:47:12Z,MERGED,True,7,2,3,https://github.com/dariaphoebe,76 solaris fixes,3,[],https://github.com/heimdal/heimdal/pull/560,https://github.com/dariaphoebe,1,https://github.com/heimdal/heimdal/pull/560,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,561,2019-05-15T19:38:33Z,2019-05-15T21:00:49Z,2019-05-15T21:00:58Z,MERGED,True,141,108,38,https://github.com/jaltman,7.6.0 Solaris cherry-picks,10,[],https://github.com/heimdal/heimdal/pull/561,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/561,This set of cherry-picks are fixes to Solaris,This set of cherry-picks are fixes to Solaris,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,562,2019-05-15T21:47:24Z,2019-05-15T21:47:39Z,2019-05-15T21:47:57Z,CLOSED,False,4897,2074,254,https://github.com/jaltman,7.6.0 NEWS update,149,[],https://github.com/heimdal/heimdal/pull/562,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/562,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,562,2019-05-15T21:47:24Z,2019-05-15T21:47:39Z,2019-05-15T21:47:57Z,CLOSED,False,4897,2074,254,https://github.com/jaltman,7.6.0 NEWS update,149,[],https://github.com/heimdal/heimdal/pull/562,https://github.com/jaltman,2,https://github.com/heimdal/heimdal/pull/562#issuecomment-492836180,,wrong branch as base,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,563,2019-05-15T21:48:26Z,2019-05-15T21:59:16Z,2019-05-15T21:59:20Z,MERGED,True,6,1,1,https://github.com/jaltman,7.6.0 NEWS update,1,[],https://github.com/heimdal/heimdal/pull/563,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/563,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,565,2019-05-16T00:22:29Z,2019-05-16T17:47:21Z,2019-05-16T17:47:21Z,MERGED,True,3,1,2,https://github.com/jaltman,Fix to 7.6.0 release for Solaris and Windows,2,[],https://github.com/heimdal/heimdal/pull/565,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/565,"The cherry pick of 934d5e0 dropped
the initialization of p11_module_load() *ppFunctionList to NULL.
Change-Id: I0b07315c040340c7ca95ff87fd985c6c7e865aeb","The cherry pick of 934d5e0 dropped
the initialization of p11_module_load() *ppFunctionList to NULL.
Change-Id: I0b07315c040340c7ca95ff87fd985c6c7e865aeb",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,566,2019-05-16T14:54:04Z,2019-05-16T16:10:00Z,2019-05-16T16:12:02Z,MERGED,True,1,1,1,https://github.com/jaltman,Fix sendto_kdc on Windows,1,[],https://github.com/heimdal/heimdal/pull/566,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/566,"The combination of 8740528
(""Windows-compatible sentinel socket type and value"") and
d497d7e (""krb5_sendto_kdc:
failover for multiple AAAA/A RRs on one domain"") broke
all the send to kdc loop on Windows.  rk_socket_t is
a HANDLE and rk_INVALID_SOCKET is the max value.  Therefore,
no valid socket will be larger and all communications
will fail.
Change-Id: I3464f78d67b19f14050ad7a01738fb32bac99385","The combination of 8740528
(""Windows-compatible sentinel socket type and value"") and
d497d7e (""krb5_sendto_kdc:
failover for multiple AAAA/A RRs on one domain"") broke
all the send to kdc loop on Windows.  rk_socket_t is
a HANDLE and rk_INVALID_SOCKET is the max value.  Therefore,
no valid socket will be larger and all communications
will fail.
Change-Id: I3464f78d67b19f14050ad7a01738fb32bac99385",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,566,2019-05-16T14:54:04Z,2019-05-16T16:10:00Z,2019-05-16T16:12:02Z,MERGED,True,1,1,1,https://github.com/jaltman,Fix sendto_kdc on Windows,1,[],https://github.com/heimdal/heimdal/pull/566,https://github.com/jaltman,2,https://github.com/heimdal/heimdal/pull/566#issuecomment-493101866,"The combination of 8740528
(""Windows-compatible sentinel socket type and value"") and
d497d7e (""krb5_sendto_kdc:
failover for multiple AAAA/A RRs on one domain"") broke
all the send to kdc loop on Windows.  rk_socket_t is
a HANDLE and rk_INVALID_SOCKET is the max value.  Therefore,
no valid socket will be larger and all communications
will fail.
Change-Id: I3464f78d67b19f14050ad7a01738fb32bac99385",I've verified this fixes the bug.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,567,2019-05-16T20:34:39Z,2019-05-16T21:14:09Z,2019-05-16T21:14:16Z,CLOSED,False,1,1,1,https://github.com/jaltman,hcrypto: avoid hcrypto_validate race,1,[],https://github.com/heimdal/heimdal/pull/567,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/567,"Do not increment 'validated' until after all of the validation
steps have been performed.  While its ok the validate more than
once we need to ensure that validation occurs at least once
before the cipher is used.
Change-Id: I6896c132ec2a7423c5166c1c074a2dedac54e00d","Do not increment 'validated' until after all of the validation
steps have been performed.  While its ok the validate more than
once we need to ensure that validation occurs at least once
before the cipher is used.
Change-Id: I6896c132ec2a7423c5166c1c074a2dedac54e00d",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,567,2019-05-16T20:34:39Z,2019-05-16T21:14:09Z,2019-05-16T21:14:16Z,CLOSED,False,1,1,1,https://github.com/jaltman,hcrypto: avoid hcrypto_validate race,1,[],https://github.com/heimdal/heimdal/pull/567,https://github.com/jaltman,2,https://github.com/heimdal/heimdal/pull/567#issuecomment-493234271,"Do not increment 'validated' until after all of the validation
steps have been performed.  While its ok the validate more than
once we need to ensure that validation occurs at least once
before the cipher is used.
Change-Id: I6896c132ec2a7423c5166c1c074a2dedac54e00d",this results in infinite recursion.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,569,2019-05-18T04:00:27Z,2019-05-19T00:31:53Z,2019-05-19T00:31:54Z,MERGED,True,45,2,5,https://github.com/lhoward,krb5: check KDC supports anonymous if requested,1,[],https://github.com/heimdal/heimdal/pull/569,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/569,Verify the KDC recognized the request-anonymous flag by validating the returned client principal name.,Verify the KDC recognized the request-anonymous flag by validating the returned client principal name.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,570,2019-05-18T04:30:59Z,2019-05-18T21:15:27Z,2019-05-18T21:15:27Z,MERGED,True,40,14,1,https://github.com/lhoward,hcrypto-pkcs11: check mechanism flags,1,[],https://github.com/heimdal/heimdal/pull/570,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/570,"Before committing to a PKCS#11 mechanism, check that it can provide the required encryption or digest services by validating the flags returned by C_GetMechanismInfo().","Before committing to a PKCS#11 mechanism, check that it can provide the required encryption or digest services by validating the flags returned by C_GetMechanismInfo().",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,570,2019-05-18T04:30:59Z,2019-05-18T21:15:27Z,2019-05-18T21:15:27Z,MERGED,True,40,14,1,https://github.com/lhoward,hcrypto-pkcs11: check mechanism flags,1,[],https://github.com/heimdal/heimdal/pull/570,https://github.com/quanah,2,https://github.com/heimdal/heimdal/pull/570#issuecomment-493699987,"Before committing to a PKCS#11 mechanism, check that it can provide the required encryption or digest services by validating the flags returned by C_GetMechanismInfo().",Testing with this patch now.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,570,2019-05-18T04:30:59Z,2019-05-18T21:15:27Z,2019-05-18T21:15:27Z,MERGED,True,40,14,1,https://github.com/lhoward,hcrypto-pkcs11: check mechanism flags,1,[],https://github.com/heimdal/heimdal/pull/570,https://github.com/quanah,3,https://github.com/heimdal/heimdal/pull/570#issuecomment-493703006,"Before committing to a PKCS#11 mechanism, check that it can provide the required encryption or digest services by validating the flags returned by C_GetMechanismInfo().","With the hack for the validated function in place, plus this patch, the entire test suite passes.  I'm now rebuilding without the hack to the validated function to see if it resolves that issue as well.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,570,2019-05-18T04:30:59Z,2019-05-18T21:15:27Z,2019-05-18T21:15:27Z,MERGED,True,40,14,1,https://github.com/lhoward,hcrypto-pkcs11: check mechanism flags,1,[],https://github.com/heimdal/heimdal/pull/570,https://github.com/quanah,4,https://github.com/heimdal/heimdal/pull/570#issuecomment-493705718,"Before committing to a PKCS#11 mechanism, check that it can provide the required encryption or digest services by validating the flags returned by C_GetMechanismInfo().",This patch fixes all issues I encountered with Solaris 11. :),True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,571,2019-05-18T21:26:34Z,2019-05-18T23:51:46Z,2019-05-18T23:51:50Z,MERGED,True,40,14,1,https://github.com/jaltman,hcrypto-pkcs11: check mechanism flags,1,[],https://github.com/heimdal/heimdal/pull/571,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/571,"Before committing to a PKCS#11 mechanism, check that it can provide the
required encryption or digest services by validating the flags returned by
C_GetMechanismInfo().
(cherry picked from commit 5c70e50)","Before committing to a PKCS#11 mechanism, check that it can provide the
required encryption or digest services by validating the flags returned by
C_GetMechanismInfo().
(cherry picked from commit 5c70e50)",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,572,2019-05-19T00:43:36Z,2019-05-19T03:19:33Z,2019-05-19T03:19:41Z,MERGED,True,60,10,12,https://github.com/jaltman,krb5: check KDC supports anonymous if requested,2,[],https://github.com/heimdal/heimdal/pull/572,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/572,"Verify the KDC recognized the request-anonymous flag by validating the returned
client principal name.
(cherry picked from commit 014e318)","Verify the KDC recognized the request-anonymous flag by validating the returned
client principal name.
(cherry picked from commit 014e318)",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,572,2019-05-19T00:43:36Z,2019-05-19T03:19:33Z,2019-05-19T03:19:41Z,MERGED,True,60,10,12,https://github.com/jaltman,krb5: check KDC supports anonymous if requested,2,[],https://github.com/heimdal/heimdal/pull/572,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/572#issuecomment-493719209,"Verify the KDC recognized the request-anonymous flag by validating the returned
client principal name.
(cherry picked from commit 014e318)",Needs patch for krb5_principal_is_anonymous() without leading underscore,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,573,2019-05-19T01:48:48Z,2019-05-19T03:19:07Z,2019-05-19T03:19:08Z,MERGED,True,39,13,6,https://github.com/lhoward,Various fixes for master,4,[],https://github.com/heimdal/heimdal/pull/573,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/573,A few fixes from the lukeh/gss-anon branch that are not related to GSS_C_ANON_FLAG,A few fixes from the lukeh/gss-anon branch that are not related to GSS_C_ANON_FLAG,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,574,2019-05-19T03:25:03Z,2019-05-19T16:14:58Z,2019-05-19T16:15:02Z,MERGED,True,33,18,5,https://github.com/jaltman,cherry picks of fixes for post 7.6,4,[],https://github.com/heimdal/heimdal/pull/574,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/574,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,576,2019-05-20T10:21:36Z,2019-05-20T12:30:25Z,2019-05-20T12:30:25Z,MERGED,True,33,6,4,https://github.com/iboukris,[7.1 back port] kdc: allow checksum of PA-FOR-USER to be HMAC_MD5,1,[],https://github.com/heimdal/heimdal/pull/576,https://github.com/iboukris,1,https://github.com/heimdal/heimdal/pull/576,"even if tgt used an enctype with a different checksum.
Per [MS-SFU] 2.2.1 PA-FOR-USER the checksum is always
HMAC_MD5, and that's what Windows and MIT clients send.
In heimdal both the client and kdc use instead the
checksum of the tgt, and therefore work with each other
but windows and MIT clients fail against heimdal KDC.
Both Windows and MIT KDC would allow any keyed checksum
to be used so Heimdal client work fine against it.
Change Heimdal KDC to allow HMAC_MD5 even for non RC4
based tgt in order to support per-spec clients.
Back ported from master, commit:
b7fe0fb","even if tgt used an enctype with a different checksum.
Per [MS-SFU] 2.2.1 PA-FOR-USER the checksum is always
HMAC_MD5, and that's what Windows and MIT clients send.
In heimdal both the client and kdc use instead the
checksum of the tgt, and therefore work with each other
but windows and MIT clients fail against heimdal KDC.
Both Windows and MIT KDC would allow any keyed checksum
to be used so Heimdal client work fine against it.
Change Heimdal KDC to allow HMAC_MD5 even for non RC4
based tgt in order to support per-spec clients.
Back ported from master, commit:
b7fe0fb",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,577,2019-05-21T05:21:41Z,2019-05-21T06:00:21Z,2019-10-28T16:44:30Z,MERGED,True,46,3,2,https://github.com/lhoward,kuser: allow kinit to renew anonymous PKINIT tickets,1,[],https://github.com/heimdal/heimdal/pull/577,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/577,Anonymous PKINIT tickets discard the realm information used to locate the issuing AS. Store the issuing realm in the credentials cache in order to locate a KDC which can renew them.,Anonymous PKINIT tickets discard the realm information used to locate the issuing AS. Store the issuing realm in the credentials cache in order to locate a KDC which can renew them.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,577,2019-05-21T05:21:41Z,2019-05-21T06:00:21Z,2019-10-28T16:44:30Z,MERGED,True,46,3,2,https://github.com/lhoward,kuser: allow kinit to renew anonymous PKINIT tickets,1,[],https://github.com/heimdal/heimdal/pull/577,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/577#issuecomment-494249287,Anonymous PKINIT tickets discard the realm information used to locate the issuing AS. Store the issuing realm in the credentials cache in order to locate a KDC which can renew them.,cc'ing @greghudson as this introduces a new ccache config key we may wish to synchronise across implementations,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,577,2019-05-21T05:21:41Z,2019-05-21T06:00:21Z,2019-10-28T16:44:30Z,MERGED,True,46,3,2,https://github.com/lhoward,kuser: allow kinit to renew anonymous PKINIT tickets,1,[],https://github.com/heimdal/heimdal/pull/577,https://github.com/lhoward,3,https://github.com/heimdal/heimdal/pull/577#issuecomment-494251179,Anonymous PKINIT tickets discard the realm information used to locate the issuing AS. Store the issuing realm in the credentials cache in order to locate a KDC which can renew them.,Added test.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,577,2019-05-21T05:21:41Z,2019-05-21T06:00:21Z,2019-10-28T16:44:30Z,MERGED,True,46,3,2,https://github.com/lhoward,kuser: allow kinit to renew anonymous PKINIT tickets,1,[],https://github.com/heimdal/heimdal/pull/577,https://github.com/greghudson,4,https://github.com/heimdal/heimdal/pull/577#issuecomment-494424244,Anonymous PKINIT tickets discard the realm information used to locate the issuing AS. Store the issuing realm in the credentials cache in order to locate a KDC which can renew them.,"Some notes:


Nico has advocated for a ""start realm"" config entry which can be used not just for anonymous PKINIT, but for a kind of delegation where the client principal realm doesn't match the TGT realm.  See https://k5wiki.kerberos.org/wiki/Projects/StartRealmCCconfig for a short writeup.  I thought this had been implemented in Heimdal (it hasn't for MIT krb5 yet) but maybe not.  The start realm seems like it would apply to this purpose, but the name anon-pkinit-realm is scoped too closely to PKINIT.


The start realm (or this equivalent) is also needed when doing cross-realm with anonymous tickets.  See http://krbdev.mit.edu/rt/Ticket/Display.html?id=8332


We may be developing an underscores-vs-dashes inconsistency.  All of the MIT config names use underscores (fast_avail, proxy_impersonator, etc.) but it looks like Heimdal may already have an established name using dashes (realm-config) as well as one using camelcase (FriendlyName).",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,577,2019-05-21T05:21:41Z,2019-05-21T06:00:21Z,2019-10-28T16:44:30Z,MERGED,True,46,3,2,https://github.com/lhoward,kuser: allow kinit to renew anonymous PKINIT tickets,1,[],https://github.com/heimdal/heimdal/pull/577,https://github.com/nicowilliams-work,5,https://github.com/heimdal/heimdal/pull/577#issuecomment-494504222,Anonymous PKINIT tickets discard the realm information used to locate the issuing AS. Store the issuing realm in the credentials cache in order to locate a KDC which can renew them.,"@greghudson start_realm does seem relevant here, indeed.  I don't care about ccconfig naming conventions -- if we can agree on one, we can be consistent about it, and if not, not.  Consistency is far far behind interoperability as a concern :)",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,577,2019-05-21T05:21:41Z,2019-05-21T06:00:21Z,2019-10-28T16:44:30Z,MERGED,True,46,3,2,https://github.com/lhoward,kuser: allow kinit to renew anonymous PKINIT tickets,1,[],https://github.com/heimdal/heimdal/pull/577,https://github.com/quanah,6,https://github.com/heimdal/heimdal/pull/577#issuecomment-494556148,Anonymous PKINIT tickets discard the realm information used to locate the issuing AS. Store the issuing realm in the credentials cache in order to locate a KDC which can renew them.,"I care about consistency of naming conventions, myself.  There was already a bug where an MIT style krb5.conf file would utterly break Heimdal, and was shipped as a default config with RHEL7 and caused a bit of havoc.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,577,2019-05-21T05:21:41Z,2019-05-21T06:00:21Z,2019-10-28T16:44:30Z,MERGED,True,46,3,2,https://github.com/lhoward,kuser: allow kinit to renew anonymous PKINIT tickets,1,[],https://github.com/heimdal/heimdal/pull/577,https://github.com/lhoward,7,https://github.com/heimdal/heimdal/pull/577#issuecomment-494562420,Anonymous PKINIT tickets discard the realm information used to locate the issuing AS. Store the issuing realm in the credentials cache in order to locate a KDC which can renew them.,Happy to change to start_realm,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,577,2019-05-21T05:21:41Z,2019-05-21T06:00:21Z,2019-10-28T16:44:30Z,MERGED,True,46,3,2,https://github.com/lhoward,kuser: allow kinit to renew anonymous PKINIT tickets,1,[],https://github.com/heimdal/heimdal/pull/577,https://github.com/jaltman,8,https://github.com/heimdal/heimdal/pull/577#issuecomment-494570514,Anonymous PKINIT tickets discard the realm information used to locate the issuing AS. Store the issuing realm in the credentials cache in order to locate a KDC which can renew them.,I'm fine with start_realm as well.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,577,2019-05-21T05:21:41Z,2019-05-21T06:00:21Z,2019-10-28T16:44:30Z,MERGED,True,46,3,2,https://github.com/lhoward,kuser: allow kinit to renew anonymous PKINIT tickets,1,[],https://github.com/heimdal/heimdal/pull/577,https://github.com/lhoward,9,https://github.com/heimdal/heimdal/pull/577#issuecomment-494581662,Anonymous PKINIT tickets discard the realm information used to locate the issuing AS. Store the issuing realm in the credentials cache in order to locate a KDC which can renew them.,"In that case we should probably honor it unconditionally (unless explicit server principal specified) rather than just for anon PKINIT principals.
Will fix today.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,577,2019-05-21T05:21:41Z,2019-05-21T06:00:21Z,2019-10-28T16:44:30Z,MERGED,True,46,3,2,https://github.com/lhoward,kuser: allow kinit to renew anonymous PKINIT tickets,1,[],https://github.com/heimdal/heimdal/pull/577,https://github.com/jaltman,10,https://github.com/heimdal/heimdal/pull/577#issuecomment-494625373,Anonymous PKINIT tickets discard the realm information used to locate the issuing AS. Store the issuing realm in the credentials cache in order to locate a KDC which can renew them.,"In that case we should probably honor it unconditionally (unless explicit server principal specified) rather than just for anon PKINIT principals.

Agreed.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,577,2019-05-21T05:21:41Z,2019-05-21T06:00:21Z,2019-10-28T16:44:30Z,MERGED,True,46,3,2,https://github.com/lhoward,kuser: allow kinit to renew anonymous PKINIT tickets,1,[],https://github.com/heimdal/heimdal/pull/577,https://github.com/lhoward,11,https://github.com/heimdal/heimdal/pull/577#issuecomment-494626103,Anonymous PKINIT tickets discard the realm information used to locate the issuing AS. Store the issuing realm in the credentials cache in order to locate a KDC which can renew them.,"Just tracking down a test failure in the gss-anon branch, but will address this very shortly.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,577,2019-05-21T05:21:41Z,2019-05-21T06:00:21Z,2019-10-28T16:44:30Z,MERGED,True,46,3,2,https://github.com/lhoward,kuser: allow kinit to renew anonymous PKINIT tickets,1,[],https://github.com/heimdal/heimdal/pull/577,https://github.com/lhoward,12,https://github.com/heimdal/heimdal/pull/577#issuecomment-494632361,Anonymous PKINIT tickets discard the realm information used to locate the issuing AS. Store the issuing realm in the credentials cache in order to locate a KDC which can renew them.,See PR#579,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,577,2019-05-21T05:21:41Z,2019-05-21T06:00:21Z,2019-10-28T16:44:30Z,MERGED,True,46,3,2,https://github.com/lhoward,kuser: allow kinit to renew anonymous PKINIT tickets,1,[],https://github.com/heimdal/heimdal/pull/577,https://github.com/jaltman,13,https://github.com/heimdal/heimdal/pull/577#issuecomment-494649554,Anonymous PKINIT tickets discard the realm information used to locate the issuing AS. Store the issuing realm in the credentials cache in order to locate a KDC which can renew them.,"@greghudson, @lhoward @nicowilliams and I discussed the use cases for start_realm which is primarily focused on which realm to issue referrals queries to.   This is distinct from the use case that anon-pkinit-realm is intended to solve which is preserving the realm from which the initial ticket was acquired so that the same realm can be contacted for ticket renewals.
We are going to continue to use anon-pkinit-realm for the new use case.   Both because it is simpler to analyze the distinct use cases but also because start_realm would point to the wrong realm if the unauthenticated initial ticket was for a cross-realm TGT.   In that case, start_realm needs to refer to the second component of the service principal name and not the service principal realm.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,577,2019-05-21T05:21:41Z,2019-05-21T06:00:21Z,2019-10-28T16:44:30Z,MERGED,True,46,3,2,https://github.com/lhoward,kuser: allow kinit to renew anonymous PKINIT tickets,1,[],https://github.com/heimdal/heimdal/pull/577,https://github.com/lhoward,14,https://github.com/heimdal/heimdal/pull/577#issuecomment-494649760,Anonymous PKINIT tickets discard the realm information used to locate the issuing AS. Store the issuing realm in the credentials cache in order to locate a KDC which can renew them.,We will change the config key from anon-pkinit-realm to anon_pkinit_realm for MIT style compatibility.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,577,2019-05-21T05:21:41Z,2019-05-21T06:00:21Z,2019-10-28T16:44:30Z,MERGED,True,46,3,2,https://github.com/lhoward,kuser: allow kinit to renew anonymous PKINIT tickets,1,[],https://github.com/heimdal/heimdal/pull/577,https://github.com/jaltman,15,https://github.com/heimdal/heimdal/pull/577#issuecomment-494649883,Anonymous PKINIT tickets discard the realm information used to locate the issuing AS. Store the issuing realm in the credentials cache in order to locate a KDC which can renew them.,We will change from anon-pkinit-realm to anon_pkinit_realm to address the concern regarding hyphens vs underscores.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,577,2019-05-21T05:21:41Z,2019-05-21T06:00:21Z,2019-10-28T16:44:30Z,MERGED,True,46,3,2,https://github.com/lhoward,kuser: allow kinit to renew anonymous PKINIT tickets,1,[],https://github.com/heimdal/heimdal/pull/577,https://github.com/greghudson,16,https://github.com/heimdal/heimdal/pull/577#issuecomment-494683592,Anonymous PKINIT tickets discard the realm information used to locate the issuing AS. Store the issuing realm in the credentials cache in order to locate a KDC which can renew them.,"discussed the use cases for start_realm which is primarily focused on which realm to issue referrals queries to

I don't think it's just about referrals.  If I am contacting a service principal with a known realm, say host/hostname@SREALM, but my TGT is for a separate realm CREALM, I need a hint to start with a krbtgt/CREALM ticket to get a krbtgt/SREALM ticket, if my client principal isn't in CREALM (because it's anonymous or because of the unusual delegation scenario).

but also because start_realm would point to the wrong realm if the unauthenticated initial ticket was for a cross-realm TGT. In that case, start_realm needs to refer to the second component of the service principal name and not the service principal realm.

If I understand this scenario right, a client makes an anonymous PKINIT AS request to REALM1, asking for krbtgt/REALM2, and gets a ticket for WELLKNOWN/ANONYMOUS@WELLKNOWN:ANONYMOUS -> krbtgt/REALM2@REALM1.
I assume your reasoning is that to renew this ticket, REALM1 must be contacted.  But to obtain any service tickets (either via referrals or explicit cross-realm), REALM2 must be contacted.  Therefore, the start_realm (REALM2) must be different from the renewal realm (REALM1).
I will note that looking up krbtgt/start_realm (krbtgt/REALM2 in this example) with TC_MATCH_SRV_NAMEONLY would obtain the ticket that needs to be renewed, and the realm of that ticket would indicate which realm to contact.  If you merely know REALM1, you still need to be told what server principal to renew, or you might figure that out by also looking at start_realm.
I guess for the current API (krb5_get_renewed_creds()), because the caller supplies a string-form service principal without realm, REALM1 is the additional piece of information you need.  That might be a flaw in the API; in principle one might want to be able to renew a cross-realm service ticket, and the  API has no way to express that.
I'm developing a sense that what we really want is a way to know the starting, non-ephemeral service principal of a credential cache, regardless of what it is (initial or non-initial, TGT or service ticket).  If we knew that, we'd know exactly what ticket to renew (no reason for the caller to even say), and that would also be the starting TGT for referrals or explicit cross-realm.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,577,2019-05-21T05:21:41Z,2019-05-21T06:00:21Z,2019-10-28T16:44:30Z,MERGED,True,46,3,2,https://github.com/lhoward,kuser: allow kinit to renew anonymous PKINIT tickets,1,[],https://github.com/heimdal/heimdal/pull/577,https://github.com/greghudson,17,https://github.com/heimdal/heimdal/pull/577#issuecomment-547026672,Anonymous PKINIT tickets discard the realm information used to locate the issuing AS. Store the issuing realm in the credentials cache in order to locate a KDC which can renew them.,"Very-late-breaking realization: isn't anon-pkinit-realm just the realm of the ticket server principal?  (So creds->server.realm within krb5_creds.)
Recall that fully anonymous PKINIT discards the realm of the ticket client, but not the ticket server.
[ETA: nevermind, I had gotten myself confused.  We don't have a particular credential in mind during renewal, only the full ccache.  We need anon-pkinit-realm to find the cred we're renewing in the first place.]",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,578,2019-05-21T06:24:23Z,2019-05-21T13:05:35Z,2019-05-21T13:05:46Z,MERGED,True,46,3,2,https://github.com/jaltman,kuser: allow kinit to renew anonymous PKINIT tickets,1,[],https://github.com/heimdal/heimdal/pull/578,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/578,"Anonymous PKINIT tickets discard the realm information used to locate the
issuing AS. Store the issuing realm in the credentials cache in order to locate
a KDC which can renew them.
(cherry picked from commit d89b5cb)","Anonymous PKINIT tickets discard the realm information used to locate the
issuing AS. Store the issuing realm in the credentials cache in order to locate
a KDC which can renew them.
(cherry picked from commit d89b5cb)",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,579,2019-05-22T02:47:54Z,2019-05-22T04:46:48Z,2019-05-22T04:46:49Z,CLOSED,False,49,36,1,https://github.com/lhoward,"kuser: store anon PKINIT realm in ""start_realm""",1,[],https://github.com/heimdal/heimdal/pull/579,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/579,"Store the anonymous PKINIT starting realm in the ""start_realm"" credentials cache configuration variable.
Always honor this when no server principal is passed to kinit, irrespective of whether the client is the unauthenticated PKINIT one. This allows for future uses.","Store the anonymous PKINIT starting realm in the ""start_realm"" credentials cache configuration variable.
Always honor this when no server principal is passed to kinit, irrespective of whether the client is the unauthenticated PKINIT one. This allows for future uses.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,579,2019-05-22T02:47:54Z,2019-05-22T04:46:48Z,2019-05-22T04:46:49Z,CLOSED,False,49,36,1,https://github.com/lhoward,"kuser: store anon PKINIT realm in ""start_realm""",1,[],https://github.com/heimdal/heimdal/pull/579,https://github.com/jaltman,2,https://github.com/heimdal/heimdal/pull/579#issuecomment-494636911,"Store the anonymous PKINIT starting realm in the ""start_realm"" credentials cache configuration variable.
Always honor this when no server principal is passed to kinit, irrespective of whether the client is the unauthenticated PKINIT one. This allows for future uses.",Perhaps the commit message should reference https://k5wiki.kerberos.org/wiki/Projects/StartRealmCCconfig,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,579,2019-05-22T02:47:54Z,2019-05-22T04:46:48Z,2019-05-22T04:46:49Z,CLOSED,False,49,36,1,https://github.com/lhoward,"kuser: store anon PKINIT realm in ""start_realm""",1,[],https://github.com/heimdal/heimdal/pull/579,https://github.com/jaltman,3,https://github.com/heimdal/heimdal/pull/579#issuecomment-494650473,"Store the anonymous PKINIT starting realm in the ""start_realm"" credentials cache configuration variable.
Always honor this when no server principal is passed to kinit, irrespective of whether the client is the unauthenticated PKINIT one. This allows for future uses.",See #577 for discussion of why we couldn't overload the meaning of start_realm,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,580,2019-05-22T04:49:29Z,2019-05-22T13:35:18Z,2019-05-22T16:07:42Z,MERGED,True,12,8,1,https://github.com/jaltman,Jaltman/heimdal 7 pullups,2,[],https://github.com/heimdal/heimdal/pull/580,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/580,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,581,2019-05-22T16:05:36Z,2019-05-23T23:09:17Z,2019-05-23T23:09:21Z,MERGED,True,241,131,31,https://github.com/jaltman,more pullups for 7.7,7,[],https://github.com/heimdal/heimdal/pull/581,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/581,"klist display all known flags
use memset_s instead of memset where appropriate
kadmind disable sync during database load","klist display all known flags
use memset_s instead of memset where appropriate
kadmind disable sync during database load",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,581,2019-05-22T16:05:36Z,2019-05-23T23:09:17Z,2019-05-23T23:09:21Z,MERGED,True,241,131,31,https://github.com/jaltman,more pullups for 7.7,7,[],https://github.com/heimdal/heimdal/pull/581,https://github.com/jaltman,2,https://github.com/heimdal/heimdal/pull/581#issuecomment-494869030,"klist display all known flags
use memset_s instead of memset where appropriate
kadmind disable sync during database load",@nicowilliams please review conflict resolution in cherry-pick of 7d5f8bb,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,581,2019-05-22T16:05:36Z,2019-05-23T23:09:17Z,2019-05-23T23:09:21Z,MERGED,True,241,131,31,https://github.com/jaltman,more pullups for 7.7,7,[],https://github.com/heimdal/heimdal/pull/581,https://github.com/quanah,3,https://github.com/heimdal/heimdal/pull/581#issuecomment-495037953,"klist display all known flags
use memset_s instead of memset where appropriate
kadmind disable sync during database load","I see the following warnings with memset_s on Solaris 11.4:
/export/home/build/git/sold/sold-master/heimdal/lib/hcrypto/md2.c: In function ‘calc’:
/export/home/build/git/sold/sold-master/heimdal/lib/hcrypto/md2.c:93:5: warning: implicit declaration of function ‘memset_s’; did you mean ‘memset’? [-Wimplicit-function-declaration]
     memset_s(x, sizeof(x), 0, sizeof(x));
     ^~~~~~~~
     memset
/export/home/build/git/sold/sold-master/heimdal/lib/hcrypto/md2.c:93:5: warning: nested extern declaration of ‘memset_s’ [-Wnested-externs]

/export/home/build/git/sold/sold-master/heimdal/lib/hcrypto/rand-fortuna.c: In function ‘md_result’:
/export/home/build/git/sold/sold-master/heimdal/lib/hcrypto/rand-fortuna.c:162:5: warning: implicit declaration of function ‘memset_s’; did you mean ‘memset’? [-Wimplicit-function-declaration]
     memset_s(&tmp, sizeof(tmp), 0, sizeof(tmp));
     ^~~~~~~~
     memset
/export/home/build/git/sold/sold-master/heimdal/lib/hcrypto/rand-fortuna.c:162:5: warning: nested extern declaration of ‘memset_s’ [-Wnested-externs]

/export/home/build/git/sold/sold-master/heimdal/lib/hx509/ks_file.c: In function ‘try_decrypt’:
/export/home/build/git/sold/sold-master/heimdal/lib/hx509/ks_file.c:129:5: warning: implicit declaration of function ‘memset_s’; did you mean ‘memset’? [-Wimplicit-function-declaration]
     memset_s(clear.data, clear.length, 0, clear.length);
     ^~~~~~~~
     memset
/export/home/build/git/sold/sold-master/heimdal/lib/hx509/ks_file.c:129:5: warning: nested extern declaration of ‘memset_s’ [-Wnested-externs]

/export/home/build/git/sold/sold-master/heimdal/lib/krb5/crypto.c: In function ‘encrypt_internal_enc_then_cksum’:
/export/home/build/git/sold/sold-master/heimdal/lib/krb5/crypto.c:941:5: warning: implicit declaration of function ‘memset_s’; did you mean ‘memset’? [-Wimplicit-function-declaration]
     memset_s(p, total_sz, 0, total_sz);
     ^~~~~~~~
     memset
/export/home/build/git/sold/sold-master/heimdal/lib/krb5/crypto.c:941:5: warning: nested extern declaration of ‘memset_s’ [-Wnested-externs]

/export/home/build/git/sold/sold-master/heimdal/lib/krb5/crypto-arcfour.c: In function ‘ARCFOUR_subencrypt’:
/export/home/build/git/sold/sold-master/heimdal/lib/krb5/crypto-arcfour.c:183:5: warning: implicit declaration of function ‘memset_s’; did you mean ‘memset’? [-Wimplicit-function-declaration]
     memset_s(k1_c_data, sizeof(k1_c_data), 0, sizeof(k1_c_data));
     ^~~~~~~~
     memset
/export/home/build/git/sold/sold-master/heimdal/lib/krb5/crypto-arcfour.c:183:5: warning: nested extern declaration of ‘memset_s’ [-Wnested-externs]

/export/home/build/git/sold/sold-master/heimdal/lib/krb5/crypto-des-common.c: In function ‘_krb5_des_checksum’:
/export/home/build/git/sold/sold-master/heimdal/lib/krb5/crypto-des-common.c:80:5: warning: implicit declaration of function ‘memset_s’; did you mean ‘memset’? [-Wimplicit-function-declaration]
     memset_s(&ivec, sizeof(ivec), 0, sizeof(ivec));
     ^~~~~~~~
     memset
/export/home/build/git/sold/sold-master/heimdal/lib/krb5/crypto-des-common.c:80:5: warning: nested extern declaration of ‘memset_s’ [-Wnested-externs]

/export/home/build/git/sold/sold-master/heimdal/lib/krb5/crypto-pk.c: In function ‘_krb5_pk_octetstring2key’:
/export/home/build/git/sold/sold-master/heimdal/lib/krb5/crypto-pk.c:95:5: warning: implicit declaration of function ‘memset_s’; did you mean ‘memset’? [-Wimplicit-function-declaration]
     memset_s(shaoutput, sizeof(shaoutput), 0, sizeof(shaoutput));
     ^~~~~~~~
     memset
/export/home/build/git/sold/sold-master/heimdal/lib/krb5/crypto-pk.c:95:5: warning: nested extern declaration of ‘memset_s’ [-Wnested-externs]

/export/home/build/git/sold/sold-master/heimdal/lib/krb5/deprecated.c: In function ‘krb5_password_key_proc’:
/export/home/build/git/sold/sold-master/heimdal/lib/krb5/deprecated.c:210:5: warning: implicit declaration of function ‘memset_s’; did you mean ‘memset’? [-Wimplicit-function-declaration]
     memset_s(buf, sizeof(buf), 0, sizeof(buf));
     ^~~~~~~~
     memset
/export/home/build/git/sold/sold-master/heimdal/lib/krb5/deprecated.c:210:5: warning: nested extern declaration of ‘memset_s’ [-Wnested-externs]

/export/home/build/git/sold/sold-master/heimdal/lib/krb5/init_creds_pw.c: In function ‘free_init_creds_ctx’:
/export/home/build/git/sold/sold-master/heimdal/lib/krb5/init_creds_pw.c:167:2: warning: implicit declaration of function ‘memset_s’; did you mean ‘memset’? [-Wimplicit-function-declaration]
  memset_s(ctx->password, len, 0, len);
  ^~~~~~~~
  memset
/export/home/build/git/sold/sold-master/heimdal/lib/krb5/init_creds_pw.c:167:2: warning: nested extern declaration of ‘memset_s’ [-Wnested-externs]

/export/home/build/git/sold/sold-master/heimdal/lib/krb5/kcm.c: In function ‘kcm_free’:
/export/home/build/git/sold/sold-master/heimdal/lib/krb5/kcm.c:227:2: warning: implicit declaration of function ‘memset_s’; did you mean ‘memset’? [-Wimplicit-function-declaration]
  memset_s(k, sizeof(*k), 0, sizeof(*k));
  ^~~~~~~~
  memset
/export/home/build/git/sold/sold-master/heimdal/lib/krb5/kcm.c:227:2: warning: nested extern declaration of ‘memset_s’ [-Wnested-externs]

/export/home/build/git/sold/sold-master/heimdal/lib/krb5/salt-des.c: In function ‘krb5_DES_AFS3_Transarc_string_to_key’:
/export/home/build/git/sold/sold-master/heimdal/lib/krb5/salt-des.c:112:5: warning: implicit declaration of function ‘memset_s’; did you mean ‘memset’? [-Wimplicit-function-declaration]
     memset_s(password, sizeof(password), 0, sizeof(password));
     ^~~~~~~~
     memset
/export/home/build/git/sold/sold-master/heimdal/lib/krb5/salt-des.c:112:5: warning: nested extern declaration of ‘memset_s’ [-Wnested-externs]

/export/home/build/git/sold/sold-master/heimdal/lib/krb5/salt-des3.c: In function ‘DES3_string_to_key’:
/export/home/build/git/sold/sold-master/heimdal/lib/krb5/salt-des3.c:64:6: warning: implicit declaration of function ‘memset_s’; did you mean ‘memset’? [-Wimplicit-function-declaration]
      memset_s(str, len, 0, len);
      ^~~~~~~~
      memset
/export/home/build/git/sold/sold-master/heimdal/lib/krb5/salt-des3.c:64:6: warning: nested extern declaration of ‘memset_s’ [-Wnested-externs]

/export/home/build/git/sold/sold-master/heimdal/lib/krb5/crypto-pk.c: In function ‘_krb5_pk_octetstring2key’:
/export/home/build/git/sold/sold-master/heimdal/lib/krb5/crypto-pk.c:95:5: warning: implicit declaration of function ‘memset_s’; did you mean ‘memset’? [-Wimplicit-function-declaration]
     memset_s(shaoutput, sizeof(shaoutput), 0, sizeof(shaoutput));
     ^~~~~~~~
     memset
/export/home/build/git/sold/sold-master/heimdal/lib/krb5/crypto-pk.c:95:5: warning: nested extern declaration of ‘memset_s’ [-Wnested-externs]

/export/home/build/git/sold/sold-master/heimdal/lib/krb5/salt-des.c: In function ‘krb5_DES_AFS3_Transarc_string_to_key’:
/export/home/build/git/sold/sold-master/heimdal/lib/krb5/salt-des.c:112:5: warning: implicit declaration of function ‘memset_s’; did you mean ‘memset’? [-Wimplicit-function-declaration]
     memset_s(password, sizeof(password), 0, sizeof(password));
     ^~~~~~~~
     memset
/export/home/build/git/sold/sold-master/heimdal/lib/krb5/salt-des.c:112:5: warning: nested extern declaration of ‘memset_s’ [-Wnested-externs]

/export/home/build/git/sold/sold-master/heimdal/lib/ntlm/ntlm.c: In function ‘splitandenc’:
/export/home/build/git/sold/sold-master/heimdal/lib/ntlm/ntlm.c:1195:5: warning: implicit declaration of function ‘memset_s’; did you mean ‘memset’? [-Wimplicit-function-declaration]
     memset_s(key, sizeof(key), 0, sizeof(key));
     ^~~~~~~~
     memset
/export/home/build/git/sold/sold-master/heimdal/lib/ntlm/ntlm.c:1195:5: warning: nested extern declaration of ‘memset_s’ [-Wnested-externs]

/export/home/build/git/sold/sold-master/heimdal/lib/gssapi/krb5/arcfour.c: In function ‘_gssapi_get_mic_arcfour’:
/export/home/build/git/sold/sold-master/heimdal/lib/gssapi/krb5/arcfour.c:307:5: warning: implicit declaration of function ‘memset_s’; did you mean ‘memset’? [-Wimplicit-function-declaration]
     memset_s(k6_data, sizeof(k6_data), 0, sizeof(k6_data));
     ^~~~~~~~
     memset
/export/home/build/git/sold/sold-master/heimdal/lib/gssapi/krb5/arcfour.c:307:5: warning: nested extern declaration of ‘memset_s’ [-Wnested-externs]

/export/home/build/git/sold/sold-master/heimdal/lib/gssapi/krb5/get_mic.c: In function ‘mic_des’:
/export/home/build/git/sold/sold-master/heimdal/lib/gssapi/krb5/get_mic.c:124:3: warning: implicit declaration of function ‘memset_s’; did you mean ‘memset’? [-Wimplicit-function-declaration]
   memset_s(deskey, sizeof(deskey), 0, sizeof(deskey));
   ^~~~~~~~
   memset
/export/home/build/git/sold/sold-master/heimdal/lib/gssapi/krb5/get_mic.c:124:3: warning: nested extern declaration of ‘memset_s’ [-Wnested-externs]

/export/home/build/git/sold/sold-master/heimdal/lib/gssapi/krb5/verify_mic.c: In function ‘verify_mic_des’:
/export/home/build/git/sold/sold-master/heimdal/lib/gssapi/krb5/verify_mic.c:92:5: warning: implicit declaration of function ‘memset_s’; did you mean ‘memset’? [-Wimplicit-function-declaration]
     memset_s(deskey, sizeof(deskey), 0, sizeof(deskey));
     ^~~~~~~~
     memset
/export/home/build/git/sold/sold-master/heimdal/lib/gssapi/krb5/verify_mic.c:92:5: warning: nested extern declaration of ‘memset_s’ [-Wnested-externs]

/export/home/build/git/sold/sold-master/heimdal/lib/gssapi/ntlm/init_sec_context.c: In function ‘from_file’:
/export/home/build/git/sold/sold-master/heimdal/lib/gssapi/ntlm/init_sec_context.c:75:2: warning: implicit declaration of function ‘memset_s’; did you mean ‘memset’? [-Wimplicit-function-declaration]
  memset_s(buf, sizeof(buf), 0, sizeof(buf));
  ^~~~~~~~
  memset
/export/home/build/git/sold/sold-master/heimdal/lib/gssapi/ntlm/init_sec_context.c:75:2: warning: nested extern declaration of ‘memset_s’ [-Wnested-externs]

/export/home/build/git/sold/sold-master/heimdal/lib/hdb/mkey.c: In function ‘read_master_encryptionkey’:
/export/home/build/git/sold/sold-master/heimdal/lib/hdb/mkey.c:229:5: warning: implicit declaration of function ‘memset_s’; did you mean ‘memset’? [-Wimplicit-function-declaration]
     memset_s(buf, sizeof(buf), 0, sizeof(buf));
     ^~~~~~~~
     memset
/export/home/build/git/sold/sold-master/heimdal/lib/hdb/mkey.c:229:5: warning: nested extern declaration of ‘memset_s’ [-Wnested-externs]

/export/home/build/git/sold/sold-master/heimdal/kuser/kinit.c: In function ‘get_new_tickets’:
/export/home/build/git/sold/sold-master/heimdal/kuser/kinit.c:718:5: warning: implicit declaration of function ‘memset_s’; did you mean ‘memset’? [-Wimplicit-function-declaration]
     memset_s(passwd, sizeof(passwd), 0, sizeof(passwd));
     ^~~~~~~~
     memset
/export/home/build/git/sold/sold-master/heimdal/kuser/kinit.c:718:5: warning: nested extern declaration of ‘memset_s’ [-Wnested-externs]

/export/home/build/git/sold/sold-master/heimdal/kadmin/cpw.c: In function ‘set_random_password’:
/export/home/build/git/sold/sold-master/heimdal/kadmin/cpw.c:79:5: warning: implicit declaration of function ‘memset_s’; did you mean ‘memset’? [-Wimplicit-function-declaration]
     memset_s(pw, sizeof(pw), 0, sizeof(pw));
     ^~~~~~~~
     memset
/export/home/build/git/sold/sold-master/heimdal/kadmin/cpw.c:79:5: warning: nested extern declaration of ‘memset_s’ [-Wnested-externs]

/export/home/build/git/sold/sold-master/heimdal/kadmin/random_password.c: In function ‘random_password’:
/export/home/build/git/sold/sold-master/heimdal/kadmin/random_password.c:72:5: warning: implicit declaration of function ‘memset_s’; did you mean ‘memset’? [-Wimplicit-function-declaration]
     memset_s(pass, len, 0, len);
     ^~~~~~~~
     memset
/export/home/build/git/sold/sold-master/heimdal/kadmin/random_password.c:72:5: warning: nested extern declaration of ‘memset_s’ [-Wnested-externs]

/export/home/build/git/sold/sold-master/heimdal/kadmin/server.c: In function ‘kadmind_dispatch’:
/export/home/build/git/sold/sold-master/heimdal/kadmin/server.c:576:2: warning: implicit declaration of function ‘memset_s’; did you mean ‘memset’? [-Wimplicit-function-declaration]
  memset_s(password, len, 0, len);
  ^~~~~~~~
  memset
/export/home/build/git/sold/sold-master/heimdal/kadmin/server.c:576:2: warning: nested extern declaration of ‘memset_s’ [-Wnested-externs]

/export/home/build/git/sold/sold-master/heimdal/appl/su/su.c:306:2: warning: implicit declaration of function ‘memset_s’; did you mean ‘memset’? [-Wimplicit-function-declaration]
  memset_s(pw_buf, sizeof(pw_buf), 0, sizeof(pw_buf));
  ^~~~~~~~
  memset
/export/home/build/git/sold/sold-master/heimdal/appl/su/su.c:306:2: warning: nested extern declaration of ‘memset_s’ [-Wnested-externs]",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,581,2019-05-22T16:05:36Z,2019-05-23T23:09:17Z,2019-05-23T23:09:21Z,MERGED,True,241,131,31,https://github.com/jaltman,more pullups for 7.7,7,[],https://github.com/heimdal/heimdal/pull/581,https://github.com/quanah,4,https://github.com/heimdal/heimdal/pull/581#issuecomment-495063173,"klist display all known flags
use memset_s instead of memset where appropriate
kadmind disable sync during database load","After adding:
-D_STDC_C11_BCI to the CPPFLAGS when I compiled, the warnings about memset_s went away.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,581,2019-05-22T16:05:36Z,2019-05-23T23:09:17Z,2019-05-23T23:09:21Z,MERGED,True,241,131,31,https://github.com/jaltman,more pullups for 7.7,7,[],https://github.com/heimdal/heimdal/pull/581,https://github.com/nicowilliams,5,https://github.com/heimdal/heimdal/pull/581#issuecomment-495315296,"klist display all known flags
use memset_s instead of memset where appropriate
kadmind disable sync during database load","I'm OK with adding that define, -D_STDC_C11_BCI for this release, but since I can't find anything about it, for 8.0 I'd rather have an autoconf macro that looks for memset_s() being available in the C library w/ or w/o a prototype defined in the headers, and if not, then enable a prototype to be provided by lib/roken.
Have you tried just using -stdc=11?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,581,2019-05-22T16:05:36Z,2019-05-23T23:09:17Z,2019-05-23T23:09:21Z,MERGED,True,241,131,31,https://github.com/jaltman,more pullups for 7.7,7,[],https://github.com/heimdal/heimdal/pull/581,https://github.com/quanah,6,https://github.com/heimdal/heimdal/pull/581#issuecomment-495390749,"klist display all known flags
use memset_s instead of memset where appropriate
kadmind disable sync during database load","Have you tried just using -stdc=11?

I'm using gcc on Solaris 11 (It's the default compiler with Solaris 11.4 at least, I think on 11.3 as well), where the option is --std=c11
If I set that option, the build fails with:
/export/home/build/git/sold/sold-master/heimdal/appl/dbutils/bsearch.c:133:13: error: ‘optind’ undeclared (first use in this function); did you mean ‘optidx’?
     argc -= optind;
             ^~~~~~
             optidx
/export/home/build/git/sold/sold-master/heimdal/appl/dbutils/bsearch.c:133:13: note: each undeclared identifier is reported only once for each function it appears in

Which is somewhat odd, since the configure script found it:
config.log:configure:24448: checking whether optind is declared
config.log:ac_cv_have_decl_optind=yes

and sets
#define HAVE_DECL_OPTIND 1

Previously I was using --std=gnu99 and did not encounter this issue.
In looking at the header files in /usr/include, I see:
#if defined(__EXTENSIONS__) || \
        !defined(_STRICT_STDC) || defined(_XOPEN_SOURCE)
/* Marked LEGACY in SUSv2 and removed in SUSv3 */
#if !defined(_XPG6) || defined(__EXTENSIONS__)
extern char     *cuserid(char *);
extern int      getopt(int, char *const *, const char *);
extern char     *optarg;
extern int      optind, opterr, optopt, optreset;
extern int      getw(FILE *);
extern int      putw(int, FILE *);
#endif /* !defined(_XPG6) || defined(__EXTENSIONS__) */
#endif

So it looks like enabling C11 disables necessary bits for use with compilation.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,581,2019-05-22T16:05:36Z,2019-05-23T23:09:17Z,2019-05-23T23:09:21Z,MERGED,True,241,131,31,https://github.com/jaltman,more pullups for 7.7,7,[],https://github.com/heimdal/heimdal/pull/581,https://github.com/jaltman,7,https://github.com/heimdal/heimdal/pull/581#issuecomment-495415580,"klist display all known flags
use memset_s instead of memset where appropriate
kadmind disable sync during database load",f3b74d8 defines _STDC_C11_BCI on Solaris,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,583,2019-05-22T21:11:52Z,2019-05-24T01:39:33Z,2019-05-24T01:39:33Z,CLOSED,False,50,50,7,https://github.com/jaltman,hx509: replace time_t with int64_t for cert timestamps,1,[],https://github.com/heimdal/heimdal/pull/583,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/583,"On platforms with 32-bit time_t (e.g. Linux i386), certificates
with timestamps later than 03:14:07 UTC on 19 January 2038 fail
to be processed correctly.
Recent changes to include certificates in the test suite with
500 year lifetimes cause the test suite to fail on these platforms.
This change replaces all use of time_t with int64_t to permit
uniform processing of certificate timestamps on all platforms.
Change-Id: I8ada6392478f39862c62d5b6490682b026e49261","On platforms with 32-bit time_t (e.g. Linux i386), certificates
with timestamps later than 03:14:07 UTC on 19 January 2038 fail
to be processed correctly.
Recent changes to include certificates in the test suite with
500 year lifetimes cause the test suite to fail on these platforms.
This change replaces all use of time_t with int64_t to permit
uniform processing of certificate timestamps on all platforms.
Change-Id: I8ada6392478f39862c62d5b6490682b026e49261",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,583,2019-05-22T21:11:52Z,2019-05-24T01:39:33Z,2019-05-24T01:39:33Z,CLOSED,False,50,50,7,https://github.com/jaltman,hx509: replace time_t with int64_t for cert timestamps,1,[],https://github.com/heimdal/heimdal/pull/583,https://github.com/jaltman,2,https://github.com/heimdal/heimdal/pull/583#issuecomment-495011204,"On platforms with 32-bit time_t (e.g. Linux i386), certificates
with timestamps later than 03:14:07 UTC on 19 January 2038 fail
to be processed correctly.
Recent changes to include certificates in the test suite with
500 year lifetimes cause the test suite to fail on these platforms.
This change replaces all use of time_t with int64_t to permit
uniform processing of certificate timestamps on all platforms.
Change-Id: I8ada6392478f39862c62d5b6490682b026e49261",The reason the checks pass is that all of the Travis and Appveyor builders are platforms with 64-bit time_t.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,583,2019-05-22T21:11:52Z,2019-05-24T01:39:33Z,2019-05-24T01:39:33Z,CLOSED,False,50,50,7,https://github.com/jaltman,hx509: replace time_t with int64_t for cert timestamps,1,[],https://github.com/heimdal/heimdal/pull/583,https://github.com/jaltman,3,https://github.com/heimdal/heimdal/pull/583#issuecomment-495028651,"On platforms with 32-bit time_t (e.g. Linux i386), certificates
with timestamps later than 03:14:07 UTC on 19 January 2038 fail
to be processed correctly.
Recent changes to include certificates in the test suite with
500 year lifetimes cause the test suite to fail on these platforms.
This change replaces all use of time_t with int64_t to permit
uniform processing of certificate timestamps on all platforms.
Change-Id: I8ada6392478f39862c62d5b6490682b026e49261",What we need is https://sourceware.org/glibc/wiki/Y2038ProofnessDesign?rev=115,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,584,2019-05-23T15:11:31Z,2019-05-23T17:24:41Z,2019-05-23T17:30:09Z,MERGED,True,2518,2518,67,https://github.com/quanah,For issue #533,1,[],https://github.com/heimdal/heimdal/pull/584,https://github.com/quanah,1,https://github.com/heimdal/heimdal/pull/584,Regenerate certs so that they expire before the 2038 armageddon so the test suite will pass on 32-bit operating systems until the underlying issues can be resolved.,Regenerate certs so that they expire before the 2038 armageddon so the test suite will pass on 32-bit operating systems until the underlying issues can be resolved.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,584,2019-05-23T15:11:31Z,2019-05-23T17:24:41Z,2019-05-23T17:30:09Z,MERGED,True,2518,2518,67,https://github.com/quanah,For issue #533,1,[],https://github.com/heimdal/heimdal/pull/584,https://github.com/jaltman,2,https://github.com/heimdal/heimdal/pull/584#issuecomment-495311814,Regenerate certs so that they expire before the 2038 armageddon so the test suite will pass on 32-bit operating systems until the underlying issues can be resolved.,@brianmay This commit includes the pre-Y2038 certificates for the 7.7 release.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,585,2019-05-23T23:12:55Z,2019-05-24T01:12:25Z,2019-05-24T01:12:29Z,MERGED,True,30,27,9,https://github.com/jaltman,switch to python3 for the build system,14,[],https://github.com/heimdal/heimdal/pull/585,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/585,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,586,2019-05-24T04:52:32Z,2019-05-24T05:52:14Z,2019-05-24T05:52:18Z,MERGED,True,17,5,1,https://github.com/jaltman,.travis.yml: synchronize with master,1,[],https://github.com/heimdal/heimdal/pull/586,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/586,"matches the file contents of 2604869
Change-Id: Ic4b269abb20618824ed4ad9f68424167700d833b","matches the file contents of 2604869
Change-Id: Ic4b269abb20618824ed4ad9f68424167700d833b",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,587,2019-05-24T05:55:02Z,,2021-03-11T03:26:50Z,OPEN,False,5,2,1,https://github.com/jaltman,.travis.yml: add gcc 32-bit build on linux,1,[],https://github.com/heimdal/heimdal/pull/587,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/587,Change-Id: I6dbb72d9ed5e45ae862a2e6742a2e6a5cee4a6de,Change-Id: I6dbb72d9ed5e45ae862a2e6742a2e6a5cee4a6de,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,587,2019-05-24T05:55:02Z,,2021-03-11T03:26:50Z,OPEN,False,5,2,1,https://github.com/jaltman,.travis.yml: add gcc 32-bit build on linux,1,[],https://github.com/heimdal/heimdal/pull/587,https://github.com/jaltman,2,https://github.com/heimdal/heimdal/pull/587#issuecomment-495491973,Change-Id: I6dbb72d9ed5e45ae862a2e6742a2e6a5cee4a6de,This is going to be tricky since we have to figure out how to install 32-bit dev packages and pass the 32-bit flags to the libedit configure script.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,588,2019-05-30T23:53:00Z,2019-05-31T00:09:55Z,2019-05-31T00:09:55Z,MERGED,True,1,1,1,https://github.com/quanah,Fixes heimdal#535 - verify-password-quality,1,[],https://github.com/heimdal/heimdal/pull/588,https://github.com/quanah,1,https://github.com/heimdal/heimdal/pull/588,"At one point in time, the configuration option was named
""password-quality"" but this was later changed to
""verify-password-quality"".  Update the kadmin(1) man page to reflect
this change.","At one point in time, the configuration option was named
""password-quality"" but this was later changed to
""verify-password-quality"".  Update the kadmin(1) man page to reflect
this change.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,589,2019-05-30T23:57:17Z,2019-05-31T00:10:27Z,2019-05-31T00:10:27Z,MERGED,True,2,1,1,https://github.com/quanah,Fixes #550 - Note that encrypt is the default option,1,[],https://github.com/heimdal/heimdal/pull/589,https://github.com/quanah,1,https://github.com/heimdal/heimdal/pull/589,"There are two options to hprop.  It's important to note that the default
behavior is to transmit the database with encrypted keys.","There are two options to hprop.  It's important to note that the default
behavior is to transmit the database with encrypted keys.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,590,2019-05-31T00:01:30Z,2019-05-31T00:11:04Z,2019-05-31T00:11:04Z,MERGED,True,1,1,1,https://github.com/quanah,Fixes #532 - Note that all does not include get-keys,1,[],https://github.com/heimdal/heimdal/pull/590,https://github.com/quanah,1,https://github.com/heimdal/heimdal/pull/590,"Update the kadmind(8) man page to note that the ""all"" option for ACLs
does not include the ""get-keys"" option.","Update the kadmind(8) man page to note that the ""all"" option for ACLs
does not include the ""get-keys"" option.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,591,2019-05-31T00:07:48Z,2019-05-31T00:12:00Z,2019-05-31T00:12:00Z,MERGED,True,7,1,1,https://github.com/quanah,Fixes #536 - Note that this can cause unexpected behavior with certain,1,[],https://github.com/heimdal/heimdal/pull/591,https://github.com/quanah,1,https://github.com/heimdal/heimdal/pull/591,"backends
When running with verify-password-quality and a back-end that stores
history (such as heimdal-history) this command can cause an update to
the database meaning the password can no longer be used with this
principal in the future","backends
When running with verify-password-quality and a back-end that stores
history (such as heimdal-history) this command can cause an update to
the database meaning the password can no longer be used with this
principal in the future",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,592,2019-05-31T00:17:45Z,2019-05-31T00:17:57Z,2019-05-31T00:18:04Z,MERGED,True,11,4,3,https://github.com/jaltman,7.7 documentation updates,4,[],https://github.com/heimdal/heimdal/pull/592,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/592,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,593,2019-05-31T01:56:05Z,2019-06-06T02:56:58Z,2019-06-06T02:57:02Z,MERGED,True,85,4,3,https://github.com/jaltman,Heimdal 7.7 Release,3,[],https://github.com/heimdal/heimdal/pull/593,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/593,Change-Id: Ic7651ad7d94f6bf4f5695d805f48510e8344f3d7,Change-Id: Ic7651ad7d94f6bf4f5695d805f48510e8344f3d7,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,593,2019-05-31T01:56:05Z,2019-06-06T02:56:58Z,2019-06-06T02:57:02Z,MERGED,True,85,4,3,https://github.com/jaltman,Heimdal 7.7 Release,3,[],https://github.com/heimdal/heimdal/pull/593,https://github.com/jaltman,2,https://github.com/heimdal/heimdal/pull/593#issuecomment-497547504,Change-Id: Ic7651ad7d94f6bf4f5695d805f48510e8344f3d7,@macrotex FYI,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,593,2019-05-31T01:56:05Z,2019-06-06T02:56:58Z,2019-06-06T02:57:02Z,MERGED,True,85,4,3,https://github.com/jaltman,Heimdal 7.7 Release,3,[],https://github.com/heimdal/heimdal/pull/593,https://github.com/jaltman,3,https://github.com/heimdal/heimdal/pull/593#issuecomment-497547544,Change-Id: Ic7651ad7d94f6bf4f5695d805f48510e8344f3d7,@brianmay FYI,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,593,2019-05-31T01:56:05Z,2019-06-06T02:56:58Z,2019-06-06T02:57:02Z,MERGED,True,85,4,3,https://github.com/jaltman,Heimdal 7.7 Release,3,[],https://github.com/heimdal/heimdal/pull/593,https://github.com/coveralls,4,https://github.com/heimdal/heimdal/pull/593#issuecomment-497555768,Change-Id: Ic7651ad7d94f6bf4f5695d805f48510e8344f3d7,Coverage remained the same at 0.0% when pulling 83ec9cb on jaltman/7.7-NEWS into 0cb00b8 on heimdal-7-1-branch.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,594,2019-06-01T13:47:08Z,2019-06-01T15:14:28Z,2019-06-03T09:44:48Z,MERGED,True,1,3,1,https://github.com/iboukris,Do not set anonymous flag in S4U2Proxy request,1,['bug'],https://github.com/heimdal/heimdal/pull/594,https://github.com/iboukris,1,https://github.com/heimdal/heimdal/pull/594,"CC @lhoward
Constrained delegation fails on master, after commit: 014e318
I get BADOPTION at: 
  
    
      heimdal/lib/krb5/ticket.c
    
    
         Line 727
      in
      014e318
    
  
  
    

        
          
           ret = check_client_anonymous(context,rep, 
        
    
  


Any idea why is S4U2Proxy automatically set to anonymous? I didn't see a mention of it elsewhere.
If I remove the anonymous flag as in this patch then it works okay.
To reproduce:
$ echo pwd | kinit -f impersonator@REALM
$ kgetcred --out-cache=evidence --impersonate=user@REALM impersonator@REALM
$ kgetcred --debug --delegation-credential-cache=evidence --out-cache=out -H HTTP/apache.realm@REALM
$ KRB5CCNAME=out curl --negotiate -u: http://apache.realm/whoami.aspx","CC @lhoward
Constrained delegation fails on master, after commit: 014e318
I get BADOPTION at: 
  
    
      heimdal/lib/krb5/ticket.c
    
    
         Line 727
      in
      014e318
    
  
  
    

        
          
           ret = check_client_anonymous(context,rep, 
        
    
  


Any idea why is S4U2Proxy automatically set to anonymous? I didn't see a mention of it elsewhere.
If I remove the anonymous flag as in this patch then it works okay.
To reproduce:
$ echo pwd | kinit -f impersonator@REALM
$ kgetcred --out-cache=evidence --impersonate=user@REALM impersonator@REALM
$ kgetcred --debug --delegation-credential-cache=evidence --out-cache=out -H HTTP/apache.realm@REALM
$ KRB5CCNAME=out curl --negotiate -u: http://apache.realm/whoami.aspx",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,594,2019-06-01T13:47:08Z,2019-06-01T15:14:28Z,2019-06-03T09:44:48Z,MERGED,True,1,3,1,https://github.com/iboukris,Do not set anonymous flag in S4U2Proxy request,1,['bug'],https://github.com/heimdal/heimdal/pull/594,https://github.com/jaltman,2,https://github.com/heimdal/heimdal/pull/594#issuecomment-497949103,"CC @lhoward
Constrained delegation fails on master, after commit: 014e318
I get BADOPTION at: 
  
    
      heimdal/lib/krb5/ticket.c
    
    
         Line 727
      in
      014e318
    
  
  
    

        
          
           ret = check_client_anonymous(context,rep, 
        
    
  


Any idea why is S4U2Proxy automatically set to anonymous? I didn't see a mention of it elsewhere.
If I remove the anonymous flag as in this patch then it works okay.
To reproduce:
$ echo pwd | kinit -f impersonator@REALM
$ kgetcred --out-cache=evidence --impersonate=user@REALM impersonator@REALM
$ kgetcred --debug --delegation-credential-cache=evidence --out-cache=out -H HTTP/apache.realm@REALM
$ KRB5CCNAME=out curl --negotiate -u: http://apache.realm/whoami.aspx","request_anonymous = 1 was added by d5bb7a7.
It was removed by Apple in their Heimdal 398.1.2 code drop.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,594,2019-06-01T13:47:08Z,2019-06-01T15:14:28Z,2019-06-03T09:44:48Z,MERGED,True,1,3,1,https://github.com/iboukris,Do not set anonymous flag in S4U2Proxy request,1,['bug'],https://github.com/heimdal/heimdal/pull/594,https://github.com/jaltman,3,https://github.com/heimdal/heimdal/pull/594#issuecomment-497949196,"CC @lhoward
Constrained delegation fails on master, after commit: 014e318
I get BADOPTION at: 
  
    
      heimdal/lib/krb5/ticket.c
    
    
         Line 727
      in
      014e318
    
  
  
    

        
          
           ret = check_client_anonymous(context,rep, 
        
    
  


Any idea why is S4U2Proxy automatically set to anonymous? I didn't see a mention of it elsewhere.
If I remove the anonymous flag as in this patch then it works okay.
To reproduce:
$ echo pwd | kinit -f impersonator@REALM
$ kgetcred --out-cache=evidence --impersonate=user@REALM impersonator@REALM
$ kgetcred --debug --delegation-credential-cache=evidence --out-cache=out -H HTTP/apache.realm@REALM
$ KRB5CCNAME=out curl --negotiate -u: http://apache.realm/whoami.aspx",@iboukris please update the commit message and I will get this merged and cherry-picked for the 7.7 release.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,594,2019-06-01T13:47:08Z,2019-06-01T15:14:28Z,2019-06-03T09:44:48Z,MERGED,True,1,3,1,https://github.com/iboukris,Do not set anonymous flag in S4U2Proxy request,1,['bug'],https://github.com/heimdal/heimdal/pull/594,https://github.com/iboukris,4,https://github.com/heimdal/heimdal/pull/594#issuecomment-497952213,"CC @lhoward
Constrained delegation fails on master, after commit: 014e318
I get BADOPTION at: 
  
    
      heimdal/lib/krb5/ticket.c
    
    
         Line 727
      in
      014e318
    
  
  
    

        
          
           ret = check_client_anonymous(context,rep, 
        
    
  


Any idea why is S4U2Proxy automatically set to anonymous? I didn't see a mention of it elsewhere.
If I remove the anonymous flag as in this patch then it works okay.
To reproduce:
$ echo pwd | kinit -f impersonator@REALM
$ kgetcred --out-cache=evidence --impersonate=user@REALM impersonator@REALM
$ kgetcred --debug --delegation-credential-cache=evidence --out-cache=out -H HTTP/apache.realm@REALM
$ KRB5CCNAME=out curl --negotiate -u: http://apache.realm/whoami.aspx",@jaltman - done.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,594,2019-06-01T13:47:08Z,2019-06-01T15:14:28Z,2019-06-03T09:44:48Z,MERGED,True,1,3,1,https://github.com/iboukris,Do not set anonymous flag in S4U2Proxy request,1,['bug'],https://github.com/heimdal/heimdal/pull/594,https://github.com/jaltman,5,https://github.com/heimdal/heimdal/pull/594#issuecomment-497956894,"CC @lhoward
Constrained delegation fails on master, after commit: 014e318
I get BADOPTION at: 
  
    
      heimdal/lib/krb5/ticket.c
    
    
         Line 727
      in
      014e318
    
  
  
    

        
          
           ret = check_client_anonymous(context,rep, 
        
    
  


Any idea why is S4U2Proxy automatically set to anonymous? I didn't see a mention of it elsewhere.
If I remove the anonymous flag as in this patch then it works okay.
To reproduce:
$ echo pwd | kinit -f impersonator@REALM
$ kgetcred --out-cache=evidence --impersonate=user@REALM impersonator@REALM
$ kgetcred --debug --delegation-credential-cache=evidence --out-cache=out -H HTTP/apache.realm@REALM
$ KRB5CCNAME=out curl --negotiate -u: http://apache.realm/whoami.aspx","Since Heimdal clients have been requesting anonymous along with constrained delegation for 13 years, I wonder if we need to modify the KDC to ignore the anonymous flag if constrained delegation is requested.  Is there any use case for that combination?  After all, the reason this has suddenly become an issue is because the KDC finally supports authenticated anonymous requests.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,594,2019-06-01T13:47:08Z,2019-06-01T15:14:28Z,2019-06-03T09:44:48Z,MERGED,True,1,3,1,https://github.com/iboukris,Do not set anonymous flag in S4U2Proxy request,1,['bug'],https://github.com/heimdal/heimdal/pull/594,https://github.com/iboukris,6,https://github.com/heimdal/heimdal/pull/594#issuecomment-497960247,"CC @lhoward
Constrained delegation fails on master, after commit: 014e318
I get BADOPTION at: 
  
    
      heimdal/lib/krb5/ticket.c
    
    
         Line 727
      in
      014e318
    
  
  
    

        
          
           ret = check_client_anonymous(context,rep, 
        
    
  


Any idea why is S4U2Proxy automatically set to anonymous? I didn't see a mention of it elsewhere.
If I remove the anonymous flag as in this patch then it works okay.
To reproduce:
$ echo pwd | kinit -f impersonator@REALM
$ kgetcred --out-cache=evidence --impersonate=user@REALM impersonator@REALM
$ kgetcred --debug --delegation-credential-cache=evidence --out-cache=out -H HTTP/apache.realm@REALM
$ KRB5CCNAME=out curl --negotiate -u: http://apache.realm/whoami.aspx","I now see this too:

  
    
      heimdal/kdc/kerberos5.c
    
    
         Line 2437
      in
      a7bb450
    
  
  
    

        
          
           /* some versions of heimdal use bit 14 instead of 16 for",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,594,2019-06-01T13:47:08Z,2019-06-01T15:14:28Z,2019-06-03T09:44:48Z,MERGED,True,1,3,1,https://github.com/iboukris,Do not set anonymous flag in S4U2Proxy request,1,['bug'],https://github.com/heimdal/heimdal/pull/594,https://github.com/iboukris,7,https://github.com/heimdal/heimdal/pull/594#issuecomment-497961792,"CC @lhoward
Constrained delegation fails on master, after commit: 014e318
I get BADOPTION at: 
  
    
      heimdal/lib/krb5/ticket.c
    
    
         Line 727
      in
      014e318
    
  
  
    

        
          
           ret = check_client_anonymous(context,rep, 
        
    
  


Any idea why is S4U2Proxy automatically set to anonymous? I didn't see a mention of it elsewhere.
If I remove the anonymous flag as in this patch then it works okay.
To reproduce:
$ echo pwd | kinit -f impersonator@REALM
$ kgetcred --out-cache=evidence --impersonate=user@REALM impersonator@REALM
$ kgetcred --debug --delegation-credential-cache=evidence --out-cache=out -H HTTP/apache.realm@REALM
$ KRB5CCNAME=out curl --negotiate -u: http://apache.realm/whoami.aspx","I'm not clear about the meaning of the anonymous flag in constrained delegation TGS request, I wonder if we can make a better guess when we process a ticket with both S4U2Proxy and anonymous flags (with 2nd ticket), whether or not the client really wanted anonymity or it was an old client sending both.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,594,2019-06-01T13:47:08Z,2019-06-01T15:14:28Z,2019-06-03T09:44:48Z,MERGED,True,1,3,1,https://github.com/iboukris,Do not set anonymous flag in S4U2Proxy request,1,['bug'],https://github.com/heimdal/heimdal/pull/594,https://github.com/iboukris,8,https://github.com/heimdal/heimdal/pull/594#issuecomment-497965295,"CC @lhoward
Constrained delegation fails on master, after commit: 014e318
I get BADOPTION at: 
  
    
      heimdal/lib/krb5/ticket.c
    
    
         Line 727
      in
      014e318
    
  
  
    

        
          
           ret = check_client_anonymous(context,rep, 
        
    
  


Any idea why is S4U2Proxy automatically set to anonymous? I didn't see a mention of it elsewhere.
If I remove the anonymous flag as in this patch then it works okay.
To reproduce:
$ echo pwd | kinit -f impersonator@REALM
$ kgetcred --out-cache=evidence --impersonate=user@REALM impersonator@REALM
$ kgetcred --debug --delegation-credential-cache=evidence --out-cache=out -H HTTP/apache.realm@REALM
$ KRB5CCNAME=out curl --negotiate -u: http://apache.realm/whoami.aspx","I read some of 4.2. section in rfc 6112, and it made me think that a S4U2Proxy in the current model cannot hide the impersonator principal as it is the same as 2nd ticket server. It might make sense to use an anonymous ticket (received via regular anonymous tgs request, or some kind of S4U2self) as a second ticket but that's pure imagination,  and I didn't find any hints on how the two work, or do not work together.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,594,2019-06-01T13:47:08Z,2019-06-01T15:14:28Z,2019-06-03T09:44:48Z,MERGED,True,1,3,1,https://github.com/iboukris,Do not set anonymous flag in S4U2Proxy request,1,['bug'],https://github.com/heimdal/heimdal/pull/594,https://github.com/iboukris,9,https://github.com/heimdal/heimdal/pull/594#issuecomment-497968943,"CC @lhoward
Constrained delegation fails on master, after commit: 014e318
I get BADOPTION at: 
  
    
      heimdal/lib/krb5/ticket.c
    
    
         Line 727
      in
      014e318
    
  
  
    

        
          
           ret = check_client_anonymous(context,rep, 
        
    
  


Any idea why is S4U2Proxy automatically set to anonymous? I didn't see a mention of it elsewhere.
If I remove the anonymous flag as in this patch then it works okay.
To reproduce:
$ echo pwd | kinit -f impersonator@REALM
$ kgetcred --out-cache=evidence --impersonate=user@REALM impersonator@REALM
$ kgetcred --debug --delegation-credential-cache=evidence --out-cache=out -H HTTP/apache.realm@REALM
$ KRB5CCNAME=out curl --negotiate -u: http://apache.realm/whoami.aspx","After all, the reason this has suddenly become an issue is because the KDC finally supports authenticated anonymous requests.

Actually, I'm testing against Windows KDC (updated 2019) which seem to ignore the anonymous flag (at least for this request) as it replies with the cname of the impersonated client and not anonymous client, and it is the client that was unhappy with this returned ticket (since it requested anon).",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,594,2019-06-01T13:47:08Z,2019-06-01T15:14:28Z,2019-06-03T09:44:48Z,MERGED,True,1,3,1,https://github.com/iboukris,Do not set anonymous flag in S4U2Proxy request,1,['bug'],https://github.com/heimdal/heimdal/pull/594,https://github.com/jaltman,10,https://github.com/heimdal/heimdal/pull/594#issuecomment-497977613,"CC @lhoward
Constrained delegation fails on master, after commit: 014e318
I get BADOPTION at: 
  
    
      heimdal/lib/krb5/ticket.c
    
    
         Line 727
      in
      014e318
    
  
  
    

        
          
           ret = check_client_anonymous(context,rep, 
        
    
  


Any idea why is S4U2Proxy automatically set to anonymous? I didn't see a mention of it elsewhere.
If I remove the anonymous flag as in this patch then it works okay.
To reproduce:
$ echo pwd | kinit -f impersonator@REALM
$ kgetcred --out-cache=evidence --impersonate=user@REALM impersonator@REALM
$ kgetcred --debug --delegation-credential-cache=evidence --out-cache=out -H HTTP/apache.realm@REALM
$ KRB5CCNAME=out curl --negotiate -u: http://apache.realm/whoami.aspx",@iboukris Thanks for the research and the additional information regarding your testing strategy.  Please take a look at #595,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,594,2019-06-01T13:47:08Z,2019-06-01T15:14:28Z,2019-06-03T09:44:48Z,MERGED,True,1,3,1,https://github.com/iboukris,Do not set anonymous flag in S4U2Proxy request,1,['bug'],https://github.com/heimdal/heimdal/pull/594,https://github.com/iboukris,11,https://github.com/heimdal/heimdal/pull/594#issuecomment-498188350,"CC @lhoward
Constrained delegation fails on master, after commit: 014e318
I get BADOPTION at: 
  
    
      heimdal/lib/krb5/ticket.c
    
    
         Line 727
      in
      014e318
    
  
  
    

        
          
           ret = check_client_anonymous(context,rep, 
        
    
  


Any idea why is S4U2Proxy automatically set to anonymous? I didn't see a mention of it elsewhere.
If I remove the anonymous flag as in this patch then it works okay.
To reproduce:
$ echo pwd | kinit -f impersonator@REALM
$ kgetcred --out-cache=evidence --impersonate=user@REALM impersonator@REALM
$ kgetcred --debug --delegation-credential-cache=evidence --out-cache=out -H HTTP/apache.realm@REALM
$ KRB5CCNAME=out curl --negotiate -u: http://apache.realm/whoami.aspx","Note: the reason we had request_anonymous = 1 was when Heimdal had inversed flags definition in asn1, and request_anonymous was actually constrained_delegation, so it had to be set in order for the client doing constrained-delegation to work against Windows KDC.
The wrong asn1 definition of the flags was fixed in: 86554f5
So now this line can be safely removed (it should have been removed with asn1 definition commit).",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,595,2019-06-01T21:04:40Z,2019-06-03T23:35:19Z,2019-06-04T02:17:51Z,MERGED,True,6,6,2,https://github.com/jaltman,kdc: history of request_anonymous vs cname-in-addl-tkt confusion,1,[],https://github.com/heimdal/heimdal/pull/595,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/595,"Drafts 0 through 10 of the Kerberos anonymity draft specified the
TicketFlags.anonymous flag as bit 14.  This was changed to bit 16
after it was discovered that Microsoft used bit 14 for S4U2Proxy.
d5bb7a7 (""(krb5_get_creds): if
KRB5_GC_CONSTRAINED_DELEGATION is set, set both"") set both the
anonymous and constrained_delegation TicketFlags when issuing a
S4U2Proxy request.  The setting of the anonymous TicketFlag was
removed by ea7615a(""Do not set
anonymous flag in S4U2Proxy request"").
014e318 (""krb5: check KDC
supports anonymous if requested"") introduced a client side check
to ensure that an anonymous request is responded to with an
anonymized ticket.  The combination of setting the anonymous
TicketFlag and the anonymized ticket validation broke S4U2Proxy
requests to Windows KDCs because they ignore the anonymous TicketFlag
when constrained_delegation is requested.
The Heimdal KDC includes fallback logic to handle Heimdal clients
that set the anonymous TicketFlag as bit 14 in _kdc_is_anon_request().
However, it failed to adjust the kdc_options flags when it
determined that the request came from an old Heimdal client.
This change clears the constrained_delegation flag and sets the
request_anonymous flag when an old Heimdal client is detected.
It also clears the request_anonymous flag if both bit 14 and 16
are set.
Change-Id: If57b6f9fe95fdba0109c4450dba5548b4ae6eba9","Drafts 0 through 10 of the Kerberos anonymity draft specified the
TicketFlags.anonymous flag as bit 14.  This was changed to bit 16
after it was discovered that Microsoft used bit 14 for S4U2Proxy.
d5bb7a7 (""(krb5_get_creds): if
KRB5_GC_CONSTRAINED_DELEGATION is set, set both"") set both the
anonymous and constrained_delegation TicketFlags when issuing a
S4U2Proxy request.  The setting of the anonymous TicketFlag was
removed by ea7615a(""Do not set
anonymous flag in S4U2Proxy request"").
014e318 (""krb5: check KDC
supports anonymous if requested"") introduced a client side check
to ensure that an anonymous request is responded to with an
anonymized ticket.  The combination of setting the anonymous
TicketFlag and the anonymized ticket validation broke S4U2Proxy
requests to Windows KDCs because they ignore the anonymous TicketFlag
when constrained_delegation is requested.
The Heimdal KDC includes fallback logic to handle Heimdal clients
that set the anonymous TicketFlag as bit 14 in _kdc_is_anon_request().
However, it failed to adjust the kdc_options flags when it
determined that the request came from an old Heimdal client.
This change clears the constrained_delegation flag and sets the
request_anonymous flag when an old Heimdal client is detected.
It also clears the request_anonymous flag if both bit 14 and 16
are set.
Change-Id: If57b6f9fe95fdba0109c4450dba5548b4ae6eba9",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,595,2019-06-01T21:04:40Z,2019-06-03T23:35:19Z,2019-06-04T02:17:51Z,MERGED,True,6,6,2,https://github.com/jaltman,kdc: history of request_anonymous vs cname-in-addl-tkt confusion,1,[],https://github.com/heimdal/heimdal/pull/595,https://github.com/jaltman,2,https://github.com/heimdal/heimdal/pull/595#issuecomment-497980464,"Drafts 0 through 10 of the Kerberos anonymity draft specified the
TicketFlags.anonymous flag as bit 14.  This was changed to bit 16
after it was discovered that Microsoft used bit 14 for S4U2Proxy.
d5bb7a7 (""(krb5_get_creds): if
KRB5_GC_CONSTRAINED_DELEGATION is set, set both"") set both the
anonymous and constrained_delegation TicketFlags when issuing a
S4U2Proxy request.  The setting of the anonymous TicketFlag was
removed by ea7615a(""Do not set
anonymous flag in S4U2Proxy request"").
014e318 (""krb5: check KDC
supports anonymous if requested"") introduced a client side check
to ensure that an anonymous request is responded to with an
anonymized ticket.  The combination of setting the anonymous
TicketFlag and the anonymized ticket validation broke S4U2Proxy
requests to Windows KDCs because they ignore the anonymous TicketFlag
when constrained_delegation is requested.
The Heimdal KDC includes fallback logic to handle Heimdal clients
that set the anonymous TicketFlag as bit 14 in _kdc_is_anon_request().
However, it failed to adjust the kdc_options flags when it
determined that the request came from an old Heimdal client.
This change clears the constrained_delegation flag and sets the
request_anonymous flag when an old Heimdal client is detected.
It also clears the request_anonymous flag if both bit 14 and 16
are set.
Change-Id: If57b6f9fe95fdba0109c4450dba5548b4ae6eba9",its interesting that nothing in the kdc code looks at kdc_options.constrained_delegation,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,595,2019-06-01T21:04:40Z,2019-06-03T23:35:19Z,2019-06-04T02:17:51Z,MERGED,True,6,6,2,https://github.com/jaltman,kdc: history of request_anonymous vs cname-in-addl-tkt confusion,1,[],https://github.com/heimdal/heimdal/pull/595,https://github.com/iboukris,3,https://github.com/heimdal/heimdal/pull/595#issuecomment-497982197,"Drafts 0 through 10 of the Kerberos anonymity draft specified the
TicketFlags.anonymous flag as bit 14.  This was changed to bit 16
after it was discovered that Microsoft used bit 14 for S4U2Proxy.
d5bb7a7 (""(krb5_get_creds): if
KRB5_GC_CONSTRAINED_DELEGATION is set, set both"") set both the
anonymous and constrained_delegation TicketFlags when issuing a
S4U2Proxy request.  The setting of the anonymous TicketFlag was
removed by ea7615a(""Do not set
anonymous flag in S4U2Proxy request"").
014e318 (""krb5: check KDC
supports anonymous if requested"") introduced a client side check
to ensure that an anonymous request is responded to with an
anonymized ticket.  The combination of setting the anonymous
TicketFlag and the anonymized ticket validation broke S4U2Proxy
requests to Windows KDCs because they ignore the anonymous TicketFlag
when constrained_delegation is requested.
The Heimdal KDC includes fallback logic to handle Heimdal clients
that set the anonymous TicketFlag as bit 14 in _kdc_is_anon_request().
However, it failed to adjust the kdc_options flags when it
determined that the request came from an old Heimdal client.
This change clears the constrained_delegation flag and sets the
request_anonymous flag when an old Heimdal client is detected.
It also clears the request_anonymous flag if both bit 14 and 16
are set.
Change-Id: If57b6f9fe95fdba0109c4450dba5548b4ae6eba9","its interesting that nothing in the kdc code looks at kdc_options.constrained_delegation

That's really strange, MS-SFU says the client must set it, but I couldn't any mention for the kdc to check it.  I think we should add a check, MIT does check, per code:
https://github.com/krb5/krb5/blob/08e948cce2c79a3604066fcf7a64fc527456f83d/src/kdc/do_tgs_req.c#L302
I'll run some tests against Windows and Samba without the flag set, to see if it is checked somewhere.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,595,2019-06-01T21:04:40Z,2019-06-03T23:35:19Z,2019-06-04T02:17:51Z,MERGED,True,6,6,2,https://github.com/jaltman,kdc: history of request_anonymous vs cname-in-addl-tkt confusion,1,[],https://github.com/heimdal/heimdal/pull/595,https://github.com/jaltman,4,https://github.com/heimdal/heimdal/pull/595#issuecomment-497986018,"Drafts 0 through 10 of the Kerberos anonymity draft specified the
TicketFlags.anonymous flag as bit 14.  This was changed to bit 16
after it was discovered that Microsoft used bit 14 for S4U2Proxy.
d5bb7a7 (""(krb5_get_creds): if
KRB5_GC_CONSTRAINED_DELEGATION is set, set both"") set both the
anonymous and constrained_delegation TicketFlags when issuing a
S4U2Proxy request.  The setting of the anonymous TicketFlag was
removed by ea7615a(""Do not set
anonymous flag in S4U2Proxy request"").
014e318 (""krb5: check KDC
supports anonymous if requested"") introduced a client side check
to ensure that an anonymous request is responded to with an
anonymized ticket.  The combination of setting the anonymous
TicketFlag and the anonymized ticket validation broke S4U2Proxy
requests to Windows KDCs because they ignore the anonymous TicketFlag
when constrained_delegation is requested.
The Heimdal KDC includes fallback logic to handle Heimdal clients
that set the anonymous TicketFlag as bit 14 in _kdc_is_anon_request().
However, it failed to adjust the kdc_options flags when it
determined that the request came from an old Heimdal client.
This change clears the constrained_delegation flag and sets the
request_anonymous flag when an old Heimdal client is detected.
It also clears the request_anonymous flag if both bit 14 and 16
are set.
Change-Id: If57b6f9fe95fdba0109c4450dba5548b4ae6eba9","@lhoward  are you referring to the current pull request or the addition of a check of the kdc_options.constrained_delegation flag?
Regarding this commit, there shouldn't be a significant merge conflict.  #551 moves and renames the _kdc_is_anon_request() function to a static is_anon_request() function and then adds additional functionality.   We could pull out the renaming and changing to a static into its own commit if you wish.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,595,2019-06-01T21:04:40Z,2019-06-03T23:35:19Z,2019-06-04T02:17:51Z,MERGED,True,6,6,2,https://github.com/jaltman,kdc: history of request_anonymous vs cname-in-addl-tkt confusion,1,[],https://github.com/heimdal/heimdal/pull/595,https://github.com/jaltman,5,https://github.com/heimdal/heimdal/pull/595#issuecomment-497990719,"Drafts 0 through 10 of the Kerberos anonymity draft specified the
TicketFlags.anonymous flag as bit 14.  This was changed to bit 16
after it was discovered that Microsoft used bit 14 for S4U2Proxy.
d5bb7a7 (""(krb5_get_creds): if
KRB5_GC_CONSTRAINED_DELEGATION is set, set both"") set both the
anonymous and constrained_delegation TicketFlags when issuing a
S4U2Proxy request.  The setting of the anonymous TicketFlag was
removed by ea7615a(""Do not set
anonymous flag in S4U2Proxy request"").
014e318 (""krb5: check KDC
supports anonymous if requested"") introduced a client side check
to ensure that an anonymous request is responded to with an
anonymized ticket.  The combination of setting the anonymous
TicketFlag and the anonymized ticket validation broke S4U2Proxy
requests to Windows KDCs because they ignore the anonymous TicketFlag
when constrained_delegation is requested.
The Heimdal KDC includes fallback logic to handle Heimdal clients
that set the anonymous TicketFlag as bit 14 in _kdc_is_anon_request().
However, it failed to adjust the kdc_options flags when it
determined that the request came from an old Heimdal client.
This change clears the constrained_delegation flag and sets the
request_anonymous flag when an old Heimdal client is detected.
It also clears the request_anonymous flag if both bit 14 and 16
are set.
Change-Id: If57b6f9fe95fdba0109c4450dba5548b4ae6eba9",I would like to add a change to rename kdc_options.constrained_delegation to kdc_options.cname-in-addl-tkt so the name matches the MS-SFU documentation.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,595,2019-06-01T21:04:40Z,2019-06-03T23:35:19Z,2019-06-04T02:17:51Z,MERGED,True,6,6,2,https://github.com/jaltman,kdc: history of request_anonymous vs cname-in-addl-tkt confusion,1,[],https://github.com/heimdal/heimdal/pull/595,https://github.com/lhoward,6,https://github.com/heimdal/heimdal/pull/595#issuecomment-497990793,"Drafts 0 through 10 of the Kerberos anonymity draft specified the
TicketFlags.anonymous flag as bit 14.  This was changed to bit 16
after it was discovered that Microsoft used bit 14 for S4U2Proxy.
d5bb7a7 (""(krb5_get_creds): if
KRB5_GC_CONSTRAINED_DELEGATION is set, set both"") set both the
anonymous and constrained_delegation TicketFlags when issuing a
S4U2Proxy request.  The setting of the anonymous TicketFlag was
removed by ea7615a(""Do not set
anonymous flag in S4U2Proxy request"").
014e318 (""krb5: check KDC
supports anonymous if requested"") introduced a client side check
to ensure that an anonymous request is responded to with an
anonymized ticket.  The combination of setting the anonymous
TicketFlag and the anonymized ticket validation broke S4U2Proxy
requests to Windows KDCs because they ignore the anonymous TicketFlag
when constrained_delegation is requested.
The Heimdal KDC includes fallback logic to handle Heimdal clients
that set the anonymous TicketFlag as bit 14 in _kdc_is_anon_request().
However, it failed to adjust the kdc_options flags when it
determined that the request came from an old Heimdal client.
This change clears the constrained_delegation flag and sets the
request_anonymous flag when an old Heimdal client is detected.
It also clears the request_anonymous flag if both bit 14 and 16
are set.
Change-Id: If57b6f9fe95fdba0109c4450dba5548b4ae6eba9","Sounds good to me.
…
Sent from my iPhone
 On 2 Jun 2019, at 11:34, Jeffrey Altman ***@***.***> wrote:

 I would like to add a change to rename kdc_options.constrained_delegation to kdc_options.cname-in-addl-tkt so the name matches the MS-SFU documentation.

 —
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub, or mute the thread.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,595,2019-06-01T21:04:40Z,2019-06-03T23:35:19Z,2019-06-04T02:17:51Z,MERGED,True,6,6,2,https://github.com/jaltman,kdc: history of request_anonymous vs cname-in-addl-tkt confusion,1,[],https://github.com/heimdal/heimdal/pull/595,https://github.com/lhoward,7,https://github.com/heimdal/heimdal/pull/595#issuecomment-498110872,"Drafts 0 through 10 of the Kerberos anonymity draft specified the
TicketFlags.anonymous flag as bit 14.  This was changed to bit 16
after it was discovered that Microsoft used bit 14 for S4U2Proxy.
d5bb7a7 (""(krb5_get_creds): if
KRB5_GC_CONSTRAINED_DELEGATION is set, set both"") set both the
anonymous and constrained_delegation TicketFlags when issuing a
S4U2Proxy request.  The setting of the anonymous TicketFlag was
removed by ea7615a(""Do not set
anonymous flag in S4U2Proxy request"").
014e318 (""krb5: check KDC
supports anonymous if requested"") introduced a client side check
to ensure that an anonymous request is responded to with an
anonymized ticket.  The combination of setting the anonymous
TicketFlag and the anonymized ticket validation broke S4U2Proxy
requests to Windows KDCs because they ignore the anonymous TicketFlag
when constrained_delegation is requested.
The Heimdal KDC includes fallback logic to handle Heimdal clients
that set the anonymous TicketFlag as bit 14 in _kdc_is_anon_request().
However, it failed to adjust the kdc_options flags when it
determined that the request came from an old Heimdal client.
This change clears the constrained_delegation flag and sets the
request_anonymous flag when an old Heimdal client is detected.
It also clears the request_anonymous flag if both bit 14 and 16
are set.
Change-Id: If57b6f9fe95fdba0109c4450dba5548b4ae6eba9",cdd0b70 should fix this. If you also want to support clients that use bit 14 for anonymous TGS requests (no such clients exist to my knowledge) then an additional check could be made in is_anon_tgs_request_p().,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,595,2019-06-01T21:04:40Z,2019-06-03T23:35:19Z,2019-06-04T02:17:51Z,MERGED,True,6,6,2,https://github.com/jaltman,kdc: history of request_anonymous vs cname-in-addl-tkt confusion,1,[],https://github.com/heimdal/heimdal/pull/595,https://github.com/jaltman,8,https://github.com/heimdal/heimdal/pull/595#issuecomment-498295977,"Drafts 0 through 10 of the Kerberos anonymity draft specified the
TicketFlags.anonymous flag as bit 14.  This was changed to bit 16
after it was discovered that Microsoft used bit 14 for S4U2Proxy.
d5bb7a7 (""(krb5_get_creds): if
KRB5_GC_CONSTRAINED_DELEGATION is set, set both"") set both the
anonymous and constrained_delegation TicketFlags when issuing a
S4U2Proxy request.  The setting of the anonymous TicketFlag was
removed by ea7615a(""Do not set
anonymous flag in S4U2Proxy request"").
014e318 (""krb5: check KDC
supports anonymous if requested"") introduced a client side check
to ensure that an anonymous request is responded to with an
anonymized ticket.  The combination of setting the anonymous
TicketFlag and the anonymized ticket validation broke S4U2Proxy
requests to Windows KDCs because they ignore the anonymous TicketFlag
when constrained_delegation is requested.
The Heimdal KDC includes fallback logic to handle Heimdal clients
that set the anonymous TicketFlag as bit 14 in _kdc_is_anon_request().
However, it failed to adjust the kdc_options flags when it
determined that the request came from an old Heimdal client.
This change clears the constrained_delegation flag and sets the
request_anonymous flag when an old Heimdal client is detected.
It also clears the request_anonymous flag if both bit 14 and 16
are set.
Change-Id: If57b6f9fe95fdba0109c4450dba5548b4ae6eba9","@lhoward's changes pushed to master look good to me although I believe the in-tree comments could be improved and I think it is worthwhile having the history of these issues documented somewhere in the repository.   A commit message is good enough.  This pull request modifies some of the in-tree comments and provides the following commit message text
kdc: history of request_anonymous vs cname-in-addl-tkt confusion
Drafts 0 through 10 of the Kerberos anonymity internet draft,
https://tools.ietf.org/html/draft-ietf-krb-wg-anon, specified the
TicketFlags.anonymous flag as bit 14 and the KDCOptions.anonymous
flag as bit 14.  These were changed to bit 16 by MIT after it was
discovered that Microsoft used KDCOptions bit 14 for S4U2Proxy
cname-in-addl-tkt.
(Feb 2007) Heimdal added constrained delegation support prior to
1.0 but named the KDCOptions flag constrained_delegation instead of
cname-in-addl-tkt as per MS-SFU.  It also assigned bit 16 instead
of bit 14.  Perhaps this was done in the hope that the conflict
with Microsoft would be resolved in favor of the IETF internet
draft instead of the proprietary protocol extension.
adf9121 (""Add PA-ClientCanonicalized
and friends."") introduced the KDCOptions.constrained_delegation flag
as bit 16.
(June 2007) In order to make Heimdal's constrained delegation work
with Microsoft's implementation Heimdal began to set both KDCOptions
bits 14 and 16 when requesting constrained delegation.
d5bb7a7 (""(krb5_get_creds): if
KRB5_GC_CONSTRAINED_DELEGATION is set, set both"") set both the
anonymous and constrained_delegation TicketFlags when issuing a
S4U2Proxy request.
(June 2010) MIT reassigned the KDCOption.anonymous and
TicketFlags.anonymous flags to bit 16.  draft-ietf-krb-anon-11
was published with this change.
(July 2014) After the release of Heimdal 1.5.0 and prior to 1.5.1
it was noticed that Heimdal's anonymous TGT support did not
interoperate with MIT.
86554f5 (""Use correct value for
anonymous flags"") swapped the bit assignments for request_anonymous
and constrained_delegation but failed to remove the setting of
KDCOptions bit 16 (""anonymous"") when requesting constrained
delegation.
(May 2019) Prior to the 7.6 release many corrections to Heimdal's
anonymity support were introduced to bring it into compliance
with RFC8062.  This included support for requesting anonymous
tickets via the TGS service.  Because not all KDC can satisfy
anonymous requests the client must verify if the response was
anonymized.  This check wasn't added until after 7.6 was
released.
014e318 (""krb5: check KDC
supports anonymous if requested"").
The combination of setting KDCOption.anonymous when requesting
constrained delegation and the anonymized ticket validation
broke S4U2Proxy requests to Windows KDCs.  Windows KDCs ignore
the KDCOption.anonymous flag when processing a TGS request
with KDCOption.cname-in-addl-tkt set.
ea7615a (""Do not set
anonymous flag in S4U2Proxy request"") removed the behavior
of setting the KDCOption.anonymous flag that should have
been removed in July 2014.
(June 2019) The Heimdal KDC includes fallback logic to handle
Heimdal clients from 1.0 to 1.5.0, inclusive, that set the
KDCOptions.anonymous flag as bit 14.  Prior to the 7.7 release
this logic only handled AS request but failed to handle the
constrained delegation request case where both bits 14 and 16
were set in the TGS request.
cdd0b70 (""kdc: don't misidentify
constrained delegation requests as anonymous"") added the TGS
request validation to distinguish anonymous requests from
constrained delegation requests.
This change documents the history in the commit message and
updates some in-tree comments.
Change-Id: I625cd012e2e6c263c71948c6021cc2fad4d2e53a",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,595,2019-06-01T21:04:40Z,2019-06-03T23:35:19Z,2019-06-04T02:17:51Z,MERGED,True,6,6,2,https://github.com/jaltman,kdc: history of request_anonymous vs cname-in-addl-tkt confusion,1,[],https://github.com/heimdal/heimdal/pull/595,https://github.com/iboukris,9,https://github.com/heimdal/heimdal/pull/595#issuecomment-498355115,"Drafts 0 through 10 of the Kerberos anonymity draft specified the
TicketFlags.anonymous flag as bit 14.  This was changed to bit 16
after it was discovered that Microsoft used bit 14 for S4U2Proxy.
d5bb7a7 (""(krb5_get_creds): if
KRB5_GC_CONSTRAINED_DELEGATION is set, set both"") set both the
anonymous and constrained_delegation TicketFlags when issuing a
S4U2Proxy request.  The setting of the anonymous TicketFlag was
removed by ea7615a(""Do not set
anonymous flag in S4U2Proxy request"").
014e318 (""krb5: check KDC
supports anonymous if requested"") introduced a client side check
to ensure that an anonymous request is responded to with an
anonymized ticket.  The combination of setting the anonymous
TicketFlag and the anonymized ticket validation broke S4U2Proxy
requests to Windows KDCs because they ignore the anonymous TicketFlag
when constrained_delegation is requested.
The Heimdal KDC includes fallback logic to handle Heimdal clients
that set the anonymous TicketFlag as bit 14 in _kdc_is_anon_request().
However, it failed to adjust the kdc_options flags when it
determined that the request came from an old Heimdal client.
This change clears the constrained_delegation flag and sets the
request_anonymous flag when an old Heimdal client is detected.
It also clears the request_anonymous flag if both bit 14 and 16
are set.
Change-Id: If57b6f9fe95fdba0109c4450dba5548b4ae6eba9","Looks good to me, and surely is useful.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,595,2019-06-01T21:04:40Z,2019-06-03T23:35:19Z,2019-06-04T02:17:51Z,MERGED,True,6,6,2,https://github.com/jaltman,kdc: history of request_anonymous vs cname-in-addl-tkt confusion,1,[],https://github.com/heimdal/heimdal/pull/595,https://github.com/lhoward,10,https://github.com/heimdal/heimdal/pull/595#issuecomment-498463777,"Drafts 0 through 10 of the Kerberos anonymity draft specified the
TicketFlags.anonymous flag as bit 14.  This was changed to bit 16
after it was discovered that Microsoft used bit 14 for S4U2Proxy.
d5bb7a7 (""(krb5_get_creds): if
KRB5_GC_CONSTRAINED_DELEGATION is set, set both"") set both the
anonymous and constrained_delegation TicketFlags when issuing a
S4U2Proxy request.  The setting of the anonymous TicketFlag was
removed by ea7615a(""Do not set
anonymous flag in S4U2Proxy request"").
014e318 (""krb5: check KDC
supports anonymous if requested"") introduced a client side check
to ensure that an anonymous request is responded to with an
anonymized ticket.  The combination of setting the anonymous
TicketFlag and the anonymized ticket validation broke S4U2Proxy
requests to Windows KDCs because they ignore the anonymous TicketFlag
when constrained_delegation is requested.
The Heimdal KDC includes fallback logic to handle Heimdal clients
that set the anonymous TicketFlag as bit 14 in _kdc_is_anon_request().
However, it failed to adjust the kdc_options flags when it
determined that the request came from an old Heimdal client.
This change clears the constrained_delegation flag and sets the
request_anonymous flag when an old Heimdal client is detected.
It also clears the request_anonymous flag if both bit 14 and 16
are set.
Change-Id: If57b6f9fe95fdba0109c4450dba5548b4ae6eba9",LGTM. Should we ditch the additional tickets check in is_anon_as_request_p()?,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,596,2019-06-04T02:33:10Z,2019-06-04T03:30:06Z,2019-06-04T03:30:10Z,MERGED,True,87,42,4,https://github.com/jaltman,pullups of constrained delegation vs anonymity fixes,6,[],https://github.com/heimdal/heimdal/pull/596,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/596,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,596,2019-06-04T02:33:10Z,2019-06-04T03:30:06Z,2019-06-04T03:30:10Z,MERGED,True,87,42,4,https://github.com/jaltman,pullups of constrained delegation vs anonymity fixes,6,[],https://github.com/heimdal/heimdal/pull/596,https://github.com/coveralls,2,https://github.com/heimdal/heimdal/pull/596#issuecomment-498505588,,Coverage remained the same at 0.0% when pulling 3812001 on jaltman/7.7-cherry-picks into ed7bd29 on heimdal-7-1-branch.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,597,2019-06-08T02:55:42Z,2019-06-09T17:43:49Z,2019-06-09T17:43:54Z,MERGED,True,90,0,1,https://github.com/jaltman, Create SECURITY.md,2,[],https://github.com/heimdal/heimdal/pull/597,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/597,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,598,2019-06-09T14:29:59Z,,2021-08-08T11:10:04Z,OPEN,False,38,21,4,https://github.com/iboukris,draft: Validate KDC support of S4U extensions,2,[],https://github.com/heimdal/heimdal/pull/598,https://github.com/iboukris,1,https://github.com/heimdal/heimdal/pull/598,"Per MS-SFU (see 1.5,  3.1.5.1.2 and 3.1.5.2.4, for both S4U2Self and S4U2proxy):
Services can detect whether the KDC supports S4U by checking the cname
of the returned ticket. KDCs that do not support S4U ignore the
S4U2self and S4U2proxy data and return a service ticket with the cname
containing the name of the service that made the request ([RFC4120]
section 3.3.3). In service tickets from KDCs that support S4U, the
cname contains the name of the user.","Per MS-SFU (see 1.5,  3.1.5.1.2 and 3.1.5.2.4, for both S4U2Self and S4U2proxy):
Services can detect whether the KDC supports S4U by checking the cname
of the returned ticket. KDCs that do not support S4U ignore the
S4U2self and S4U2proxy data and return a service ticket with the cname
containing the name of the service that made the request ([RFC4120]
section 3.3.3). In service tickets from KDCs that support S4U, the
cname contains the name of the user.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,598,2019-06-09T14:29:59Z,,2021-08-08T11:10:04Z,OPEN,False,38,21,4,https://github.com/iboukris,draft: Validate KDC support of S4U extensions,2,[],https://github.com/heimdal/heimdal/pull/598,https://github.com/iboukris,2,https://github.com/heimdal/heimdal/pull/598#issuecomment-500220085,"Per MS-SFU (see 1.5,  3.1.5.1.2 and 3.1.5.2.4, for both S4U2Self and S4U2proxy):
Services can detect whether the KDC supports S4U by checking the cname
of the returned ticket. KDCs that do not support S4U ignore the
S4U2self and S4U2proxy data and return a service ticket with the cname
containing the name of the service that made the request ([RFC4120]
section 3.3.3). In service tickets from KDCs that support S4U, the
cname contains the name of the user.","I tested it manually against Windows and it looks okay, I'll try to add automated tests.
echo PASSWD | kinit -f HTTP/srv-kerberos-kcd.alpha.local@ALPHA.LOCAL
/usr/heimdal/bin/kgetcred --out-cache=evidence --impersonate=HTTP/srv-kerberos-kcd.alpha.local@ALPHA.LOCAL -H HTTP/srv-kerberos-kcd.alpha.local@ALPHA.LOCAL
- kdc returns a ticket then the client fails with KRB5KDC_ERR_PADATA_TYPE_NOSUPP

echo PASSWD | kinit -c evidence -f -S HTTP/srv-kerberos-kcd.alpha.local@ALPHA.LOCAL HTTP/srv-kerberos-kcd.alpha.local@ALPHA.LOCAL
/usr/heimdal/bin/kgetcred --delegation-credential-cache=evidence --out-cache=out -H HTTP/srv-kerberos-kcd.alpha.local@ALPHA.LOCAL
- kdc returns a ticket then the client fails with KRB5KDC_ERR_PADATA_TYPE_NOSUPP",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,598,2019-06-09T14:29:59Z,,2021-08-08T11:10:04Z,OPEN,False,38,21,4,https://github.com/iboukris,draft: Validate KDC support of S4U extensions,2,[],https://github.com/heimdal/heimdal/pull/598,https://github.com/jaltman,3,https://github.com/heimdal/heimdal/pull/598#issuecomment-500229729,"Per MS-SFU (see 1.5,  3.1.5.1.2 and 3.1.5.2.4, for both S4U2Self and S4U2proxy):
Services can detect whether the KDC supports S4U by checking the cname
of the returned ticket. KDCs that do not support S4U ignore the
S4U2self and S4U2proxy data and return a service ticket with the cname
containing the name of the service that made the request ([RFC4120]
section 3.3.3). In service tickets from KDCs that support S4U, the
cname contains the name of the user.","@iboukris My preference is merge the refactoring commit as-is so its easier to see what the actual change in behavior is meant to be.   Please update the commit message for the first change to describe what the change does and why it was introduced.
The second change looks good to me.  Automated tests would be much appreciated.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,598,2019-06-09T14:29:59Z,,2021-08-08T11:10:04Z,OPEN,False,38,21,4,https://github.com/iboukris,draft: Validate KDC support of S4U extensions,2,[],https://github.com/heimdal/heimdal/pull/598,https://github.com/iboukris,4,https://github.com/heimdal/heimdal/pull/598#issuecomment-500234850,"Per MS-SFU (see 1.5,  3.1.5.1.2 and 3.1.5.2.4, for both S4U2Self and S4U2proxy):
Services can detect whether the KDC supports S4U by checking the cname
of the returned ticket. KDCs that do not support S4U ignore the
S4U2self and S4U2proxy data and return a service ticket with the cname
containing the name of the service that made the request ([RFC4120]
section 3.3.3). In service tickets from KDCs that support S4U, the
cname contains the name of the user.","I managed to add a test for the protocol-transition case, but I'm having troubles with the constrained-delegation test. Since now we can't get an evidence ticket with self as client name via impersonation, I tried to get it via TGS or AS request, but this fails the constrained-delegation request regardless, as the KDC is not happy with an evidence ticket not acquired via impersonation.
I've commented it out while trying to understand the below error (the des error is probably unrelated):
2019-06-09T18:11:22 error message: No authorization data: 2
2019-06-09T18:11:22 TGS-REQ proxy-service@TEST.H5L.SE from IPv4:127.0.0.1 for host/datan.test.h5l.se@TEST.H5L.SE [canonicalize, cname-in-addl-tkt, forwardable]
2019-06-09T18:11:22 error message: encryption type des-cbc-crc is disabled: -1765328234
2019-06-09T18:11:22 error message: encryption type des-cbc-crc is disabled: -1765328234
2019-06-09T18:11:22 error message: Decrypt integrity check failed for checksum type hmac-sha1-96-aes256, key type aes256-cts-hmac-sha1-96: -1765328353
2019-06-09T18:11:22 KRB5SignedPath not signed correctly, not marking as signed
2019-06-09T18:11:22 Ticket not signed with PAC nor SignedPath service host/datan.test.h5l.se@TEST.H5L.SE failed for delegation to bar@TEST.H5L.SE for client proxy-service@TEST.H5L.SE (proxy-service@TEST.H5L.SE)from IPv4:127.0.0.1
2019-06-09T18:11:22 Failed building TGS-REP to IPv4:127.0.0.1
2019-06-09T18:11:22 tgs-req: sending error: -1765328371 to client",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,598,2019-06-09T14:29:59Z,,2021-08-08T11:10:04Z,OPEN,False,38,21,4,https://github.com/iboukris,draft: Validate KDC support of S4U extensions,2,[],https://github.com/heimdal/heimdal/pull/598,https://github.com/iboukris,5,https://github.com/heimdal/heimdal/pull/598#issuecomment-500246704,"Per MS-SFU (see 1.5,  3.1.5.1.2 and 3.1.5.2.4, for both S4U2Self and S4U2proxy):
Services can detect whether the KDC supports S4U by checking the cname
of the returned ticket. KDCs that do not support S4U ignore the
S4U2self and S4U2proxy data and return a service ticket with the cname
containing the name of the service that made the request ([RFC4120]
section 3.3.3). In service tickets from KDCs that support S4U, the
cname contains the name of the user.","I think I figured out the TGS failure, I suspect it is a bug that we sign protocol-transition tickets with the impersonator principal inside KRB5SignedPath, I think we should sign with the impersonated one as in MIT. Still thinking though, and the case where the evidence is acquired via AS request is still failing.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,598,2019-06-09T14:29:59Z,,2021-08-08T11:10:04Z,OPEN,False,38,21,4,https://github.com/iboukris,draft: Validate KDC support of S4U extensions,2,[],https://github.com/heimdal/heimdal/pull/598,https://github.com/iboukris,6,https://github.com/heimdal/heimdal/pull/598#issuecomment-500254181,"Per MS-SFU (see 1.5,  3.1.5.1.2 and 3.1.5.2.4, for both S4U2Self and S4U2proxy):
Services can detect whether the KDC supports S4U by checking the cname
of the returned ticket. KDCs that do not support S4U ignore the
S4U2self and S4U2proxy data and return a service ticket with the cname
containing the name of the service that made the request ([RFC4120]
section 3.3.3). In service tickets from KDCs that support S4U, the
cname contains the name of the user.","I think I figured the AS failure too, now both tests pass for me but it needs more thinking.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,598,2019-06-09T14:29:59Z,,2021-08-08T11:10:04Z,OPEN,False,38,21,4,https://github.com/iboukris,draft: Validate KDC support of S4U extensions,2,[],https://github.com/heimdal/heimdal/pull/598,https://github.com/iboukris,7,https://github.com/heimdal/heimdal/pull/598#issuecomment-500362713,"Per MS-SFU (see 1.5,  3.1.5.1.2 and 3.1.5.2.4, for both S4U2Self and S4U2proxy):
Services can detect whether the KDC supports S4U by checking the cname
of the returned ticket. KDCs that do not support S4U ignore the
S4U2self and S4U2proxy data and return a service ticket with the cname
containing the name of the service that made the request ([RFC4120]
section 3.3.3). In service tickets from KDCs that support S4U, the
cname contains the name of the user.","Hi Luke, I addressed your comments, but I moved the KRB5SignedPath changes to a separate PR as I need to think these changes some more and this PR got too overloaded anyway.
I suspect we'd need the get_local_tgs() logic (kinit -S) for PAC signing as well to sign the krbtgt checksum, but that's a little tricky to test right now (btw, I think MIT have the same bug).
At any rate, the changes in this PR look ready to me.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,598,2019-06-09T14:29:59Z,,2021-08-08T11:10:04Z,OPEN,False,38,21,4,https://github.com/iboukris,draft: Validate KDC support of S4U extensions,2,[],https://github.com/heimdal/heimdal/pull/598,https://github.com/iboukris,8,https://github.com/heimdal/heimdal/pull/598#issuecomment-544126315,"Per MS-SFU (see 1.5,  3.1.5.1.2 and 3.1.5.2.4, for both S4U2Self and S4U2proxy):
Services can detect whether the KDC supports S4U by checking the cname
of the returned ticket. KDCs that do not support S4U ignore the
S4U2self and S4U2proxy data and return a service ticket with the cname
containing the name of the service that made the request ([RFC4120]
section 3.3.3). In service tickets from KDCs that support S4U, the
cname contains the name of the user.","@jaltman @lhoward, I'm having second thoughts on this change - sorry.
CC: @greghudson
I think the logic in MS-SFU in the first comment above makes a wrong assumption about kerberos implementations of canonicalize flag. It assumes that names are not canonicalized in response to TGS request (either per RFC4120 or per RFC6806) and therefore if the KDC has changed the client name we can safely conclude that it supports S4U. However in MIT implementation for instance, we may allow names to be canonicalized in response to TGS request (if canon requested), based on initial drafts of RFC6806. So I think we can't really conclude KDC S4U support just because the client name changed, it may have been just the impersonator name being canonicalized. See related discussion:
krb5/krb5#912 (comment)
In MIT we also do the negative check in S4U2Self, but there we also check that the returned client matches the expected impersonated client or at least we have verified KDC signature of returned PA-S4U-X509-USER, so the KDC supports S4U2Self for sure.
To sum it up, I think the correct way is to check that the returned client name is exactly the impersonated client we asked for, in both S4U protocols.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,598,2019-06-09T14:29:59Z,,2021-08-08T11:10:04Z,OPEN,False,38,21,4,https://github.com/iboukris,draft: Validate KDC support of S4U extensions,2,[],https://github.com/heimdal/heimdal/pull/598,https://github.com/greghudson,9,https://github.com/heimdal/heimdal/pull/598#issuecomment-544159633,"Per MS-SFU (see 1.5,  3.1.5.1.2 and 3.1.5.2.4, for both S4U2Self and S4U2proxy):
Services can detect whether the KDC supports S4U by checking the cname
of the returned ticket. KDCs that do not support S4U ignore the
S4U2self and S4U2proxy data and return a service ticket with the cname
containing the name of the service that made the request ([RFC4120]
section 3.3.3). In service tickets from KDCs that support S4U, the
cname contains the name of the user.","However in MIT implementation for instance, we may allow names to be canonicalized in response to TGS request (if canon requested), based on initial drafts of RFC6806.

Are you saying the MIT KDC might change the names in TGS responses, or the MIT TGS client might allow changes to names?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,598,2019-06-09T14:29:59Z,,2021-08-08T11:10:04Z,OPEN,False,38,21,4,https://github.com/iboukris,draft: Validate KDC support of S4U extensions,2,[],https://github.com/heimdal/heimdal/pull/598,https://github.com/iboukris,10,https://github.com/heimdal/heimdal/pull/598#issuecomment-544164289,"Per MS-SFU (see 1.5,  3.1.5.1.2 and 3.1.5.2.4, for both S4U2Self and S4U2proxy):
Services can detect whether the KDC supports S4U by checking the cname
of the returned ticket. KDCs that do not support S4U ignore the
S4U2self and S4U2proxy data and return a service ticket with the cname
containing the name of the service that made the request ([RFC4120]
section 3.3.3). In service tickets from KDCs that support S4U, the
cname contains the name of the user.","Are you saying the MIT KDC might change the names in TGS responses, or the MIT TGS client might allow changes to names?

I was referring to MIT TGS client we've discussed, but I now realize I'm confusing client and server canonicalization again, and MIT TGS client never allows client name to be canonicalized (in krb5int_process_tgs_reply).
For MIT KDC it would depend on the KDB module iirc.
I'll look for heimdal KDC and client behavior.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,598,2019-06-09T14:29:59Z,,2021-08-08T11:10:04Z,OPEN,False,38,21,4,https://github.com/iboukris,draft: Validate KDC support of S4U extensions,2,[],https://github.com/heimdal/heimdal/pull/598,https://github.com/iboukris,11,https://github.com/heimdal/heimdal/pull/598#issuecomment-544181591,"Per MS-SFU (see 1.5,  3.1.5.1.2 and 3.1.5.2.4, for both S4U2Self and S4U2proxy):
Services can detect whether the KDC supports S4U by checking the cname
of the returned ticket. KDCs that do not support S4U ignore the
S4U2self and S4U2proxy data and return a service ticket with the cname
containing the name of the service that made the request ([RFC4120]
section 3.3.3). In service tickets from KDCs that support S4U, the
cname contains the name of the user.","@greghudson I did some tests using heimdal test suit and the kdc won't canonicalize the client name. The client code would only allow client name to be canonicalized if EXTRACT_TICKET_ALLOW_CNAME_MISMATCH flag is set, and is only set in TGS for S4U. However, in samba code it looks like it is set unconditionally.
I think I still prefer matching against expected impersonated client, but it's debatable, and it does complicate it for S4U2Proxy when the code has no access to the expected client inside the evidence ticket.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,598,2019-06-09T14:29:59Z,,2021-08-08T11:10:04Z,OPEN,False,38,21,4,https://github.com/iboukris,draft: Validate KDC support of S4U extensions,2,[],https://github.com/heimdal/heimdal/pull/598,https://github.com/lhoward,12,https://github.com/heimdal/heimdal/pull/598#issuecomment-893976857,"Per MS-SFU (see 1.5,  3.1.5.1.2 and 3.1.5.2.4, for both S4U2Self and S4U2proxy):
Services can detect whether the KDC supports S4U by checking the cname
of the returned ticket. KDCs that do not support S4U ignore the
S4U2self and S4U2proxy data and return a service ticket with the cname
containing the name of the service that made the request ([RFC4120]
section 3.3.3). In service tickets from KDCs that support S4U, the
cname contains the name of the user.","I'm happy to merge this but, were you having second thoughts?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,598,2019-06-09T14:29:59Z,,2021-08-08T11:10:04Z,OPEN,False,38,21,4,https://github.com/iboukris,draft: Validate KDC support of S4U extensions,2,[],https://github.com/heimdal/heimdal/pull/598,https://github.com/iboukris,13,https://github.com/heimdal/heimdal/pull/598#issuecomment-894780952,"Per MS-SFU (see 1.5,  3.1.5.1.2 and 3.1.5.2.4, for both S4U2Self and S4U2proxy):
Services can detect whether the KDC supports S4U by checking the cname
of the returned ticket. KDCs that do not support S4U ignore the
S4U2self and S4U2proxy data and return a service ticket with the cname
containing the name of the service that made the request ([RFC4120]
section 3.3.3). In service tickets from KDCs that support S4U, the
cname contains the name of the user.","This one is tricky, I suspect it's going to get me troubles with samba test-suite, I need to think it more, so I'll change the status of this PR and PR #599 to draft - will revisit after PAC ticket-signature (sorry).",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,599,2019-06-10T09:51:49Z,2021-09-23T08:08:42Z,2021-09-23T08:08:42Z,CLOSED,False,96,8,3,https://github.com/iboukris,draft: Fix KRB5SignedPath when evidence ticket is not acquired via protocol-transition,2,[],https://github.com/heimdal/heimdal/pull/599,https://github.com/iboukris,1,https://github.com/heimdal/heimdal/pull/599,"Follow up to #598.

Fix check of KRB5SignedPath in constrained-delegation to match on impersonated client.
Fix signing of KRB5SignedPath in protocol-transition to sign with impersonated client.
Fix PAC and KRB5SignedPath KDC signatures in case of non krbtgt server requested via AS-RRQ to use local TGS key instead of the server key.","Follow up to #598.

Fix check of KRB5SignedPath in constrained-delegation to match on impersonated client.
Fix signing of KRB5SignedPath in protocol-transition to sign with impersonated client.
Fix PAC and KRB5SignedPath KDC signatures in case of non krbtgt server requested via AS-RRQ to use local TGS key instead of the server key.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,599,2019-06-10T09:51:49Z,2021-09-23T08:08:42Z,2021-09-23T08:08:42Z,CLOSED,False,96,8,3,https://github.com/iboukris,draft: Fix KRB5SignedPath when evidence ticket is not acquired via protocol-transition,2,[],https://github.com/heimdal/heimdal/pull/599,https://github.com/iboukris,2,https://github.com/heimdal/heimdal/pull/599#issuecomment-501028185,"Follow up to #598.

Fix check of KRB5SignedPath in constrained-delegation to match on impersonated client.
Fix signing of KRB5SignedPath in protocol-transition to sign with impersonated client.
Fix PAC and KRB5SignedPath KDC signatures in case of non krbtgt server requested via AS-RRQ to use local TGS key instead of the server key.","I revised the first commit (evidence acquired via TGS) and updated its commit message, hope it make sense.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,599,2019-06-10T09:51:49Z,2021-09-23T08:08:42Z,2021-09-23T08:08:42Z,CLOSED,False,96,8,3,https://github.com/iboukris,draft: Fix KRB5SignedPath when evidence ticket is not acquired via protocol-transition,2,[],https://github.com/heimdal/heimdal/pull/599,https://github.com/iboukris,3,https://github.com/heimdal/heimdal/pull/599#issuecomment-501165025,"Follow up to #598.

Fix check of KRB5SignedPath in constrained-delegation to match on impersonated client.
Fix signing of KRB5SignedPath in protocol-transition to sign with impersonated client.
Fix PAC and KRB5SignedPath KDC signatures in case of non krbtgt server requested via AS-RRQ to use local TGS key instead of the server key.","I was able to confirm that we need the get_local_tgs() logic (kinit -S) for PAC signing as well to sign the kdc checksum, as Samba fails S4U2Proxy requests when the evidence ticket was acquired via AS due to that. I think the updated commit I just pushed should fix that, but I have yet to port it to samba code and test it.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,599,2019-06-10T09:51:49Z,2021-09-23T08:08:42Z,2021-09-23T08:08:42Z,CLOSED,False,96,8,3,https://github.com/iboukris,draft: Fix KRB5SignedPath when evidence ticket is not acquired via protocol-transition,2,[],https://github.com/heimdal/heimdal/pull/599,https://github.com/lhoward,4,https://github.com/heimdal/heimdal/pull/599#issuecomment-501165898,"Follow up to #598.

Fix check of KRB5SignedPath in constrained-delegation to match on impersonated client.
Fix signing of KRB5SignedPath in protocol-transition to sign with impersonated client.
Fix PAC and KRB5SignedPath KDC signatures in case of non krbtgt server requested via AS-RRQ to use local TGS key instead of the server key.","Good stuff. I guess a temp variable could be cleaner than checking is_tgs but it doesn’t really matter to me.
…
Sent from my iPhone
 On 12 Jun 2019, at 18:03, Isaac Boukris ***@***.***> wrote:

 I was able to confirm that we need the get_local_tgs() logic (kinit -S) for PAC signing as well to sign the kdc checksum, as Samba fails S4U2Proxy requests when the evidence ticket was acquired via AS due to that. I think the updated commit I just pushed should fix that, but I have yet to port it to samba code and test it.

 —
 You are receiving this because you are subscribed to this thread.
 Reply to this email directly, view it on GitHub, or mute the thread.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,599,2019-06-10T09:51:49Z,2021-09-23T08:08:42Z,2021-09-23T08:08:42Z,CLOSED,False,96,8,3,https://github.com/iboukris,draft: Fix KRB5SignedPath when evidence ticket is not acquired via protocol-transition,2,[],https://github.com/heimdal/heimdal/pull/599,https://github.com/iboukris,5,https://github.com/heimdal/heimdal/pull/599#issuecomment-502047489,"Follow up to #598.

Fix check of KRB5SignedPath in constrained-delegation to match on impersonated client.
Fix signing of KRB5SignedPath in protocol-transition to sign with impersonated client.
Fix PAC and KRB5SignedPath KDC signatures in case of non krbtgt server requested via AS-RRQ to use local TGS key instead of the server key.","I changed the second commit to avoid failing the request if we can't find a local tgs, instead we just sign with the server key in that case, as before.
I've also tested the logic related to PAC signing with a (somewhat) equivalent patch to samba code, and it fixes the issue, that is, kinit -S for evidence ticket works, see: iboukris/samba@6318c32",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,599,2019-06-10T09:51:49Z,2021-09-23T08:08:42Z,2021-09-23T08:08:42Z,CLOSED,False,96,8,3,https://github.com/iboukris,draft: Fix KRB5SignedPath when evidence ticket is not acquired via protocol-transition,2,[],https://github.com/heimdal/heimdal/pull/599,https://github.com/lhoward,6,https://github.com/heimdal/heimdal/pull/599#issuecomment-502063654,"Follow up to #598.

Fix check of KRB5SignedPath in constrained-delegation to match on impersonated client.
Fix signing of KRB5SignedPath in protocol-transition to sign with impersonated client.
Fix PAC and KRB5SignedPath KDC signatures in case of non krbtgt server requested via AS-RRQ to use local TGS key instead of the server key.","I reckon it’s ok to fail, you should never not have the local TGS key.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,599,2019-06-10T09:51:49Z,2021-09-23T08:08:42Z,2021-09-23T08:08:42Z,CLOSED,False,96,8,3,https://github.com/iboukris,draft: Fix KRB5SignedPath when evidence ticket is not acquired via protocol-transition,2,[],https://github.com/heimdal/heimdal/pull/599,https://github.com/iboukris,7,https://github.com/heimdal/heimdal/pull/599#issuecomment-502072189,"Follow up to #598.

Fix check of KRB5SignedPath in constrained-delegation to match on impersonated client.
Fix signing of KRB5SignedPath in protocol-transition to sign with impersonated client.
Fix PAC and KRB5SignedPath KDC signatures in case of non krbtgt server requested via AS-RRQ to use local TGS key instead of the server key.","Thanks, switched back.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,599,2019-06-10T09:51:49Z,2021-09-23T08:08:42Z,2021-09-23T08:08:42Z,CLOSED,False,96,8,3,https://github.com/iboukris,draft: Fix KRB5SignedPath when evidence ticket is not acquired via protocol-transition,2,[],https://github.com/heimdal/heimdal/pull/599,https://github.com/jaltman,8,https://github.com/heimdal/heimdal/pull/599#issuecomment-502077594,"Follow up to #598.

Fix check of KRB5SignedPath in constrained-delegation to match on impersonated client.
Fix signing of KRB5SignedPath in protocol-transition to sign with impersonated client.
Fix PAC and KRB5SignedPath KDC signatures in case of non krbtgt server requested via AS-RRQ to use local TGS key instead of the server key.","In a cross-realm situation we might not be able to build a krbtgt/CLIENT-REALM@LOCAL-REALM ticket.   Is the use of the client principal realm correct?
Should it be the realm from the last entry in the transited path (if present)?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,599,2019-06-10T09:51:49Z,2021-09-23T08:08:42Z,2021-09-23T08:08:42Z,CLOSED,False,96,8,3,https://github.com/iboukris,draft: Fix KRB5SignedPath when evidence ticket is not acquired via protocol-transition,2,[],https://github.com/heimdal/heimdal/pull/599,https://github.com/iboukris,9,https://github.com/heimdal/heimdal/pull/599#issuecomment-502085631,"Follow up to #598.

Fix check of KRB5SignedPath in constrained-delegation to match on impersonated client.
Fix signing of KRB5SignedPath in protocol-transition to sign with impersonated client.
Fix PAC and KRB5SignedPath KDC signatures in case of non krbtgt server requested via AS-RRQ to use local TGS key instead of the server key.",The changes are only for AS-REQ (the unusual case where non krbtgt server is requested) so I guessed the client must be local.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,599,2019-06-10T09:51:49Z,2021-09-23T08:08:42Z,2021-09-23T08:08:42Z,CLOSED,False,96,8,3,https://github.com/iboukris,draft: Fix KRB5SignedPath when evidence ticket is not acquired via protocol-transition,2,[],https://github.com/heimdal/heimdal/pull/599,https://github.com/iboukris,10,https://github.com/heimdal/heimdal/pull/599#issuecomment-502090657,"Follow up to #598.

Fix check of KRB5SignedPath in constrained-delegation to match on impersonated client.
Fix signing of KRB5SignedPath in protocol-transition to sign with impersonated client.
Fix PAC and KRB5SignedPath KDC signatures in case of non krbtgt server requested via AS-RRQ to use local TGS key instead of the server key.","It looks like MIT constructs the local tgt using server's realm instead of client's, I think I should do the same: https://github.com/krb5/krb5/blob/01319a310cf06e4139b65afb12f998dbea636103/src/kdc/do_as_req.c#L668",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,599,2019-06-10T09:51:49Z,2021-09-23T08:08:42Z,2021-09-23T08:08:42Z,CLOSED,False,96,8,3,https://github.com/iboukris,draft: Fix KRB5SignedPath when evidence ticket is not acquired via protocol-transition,2,[],https://github.com/heimdal/heimdal/pull/599,https://github.com/jaltman,11,https://github.com/heimdal/heimdal/pull/599#issuecomment-502091453,"Follow up to #598.

Fix check of KRB5SignedPath in constrained-delegation to match on impersonated client.
Fix signing of KRB5SignedPath in protocol-transition to sign with impersonated client.
Fix PAC and KRB5SignedPath KDC signatures in case of non krbtgt server requested via AS-RRQ to use local TGS key instead of the server key.",The history of KRB5SignedPath is a bit convoluted because it started as a Heimdal feature which was then emulated by MIT.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,599,2019-06-10T09:51:49Z,2021-09-23T08:08:42Z,2021-09-23T08:08:42Z,CLOSED,False,96,8,3,https://github.com/iboukris,draft: Fix KRB5SignedPath when evidence ticket is not acquired via protocol-transition,2,[],https://github.com/heimdal/heimdal/pull/599,https://github.com/lhoward,12,https://github.com/heimdal/heimdal/pull/599#issuecomment-502344316,"Follow up to #598.

Fix check of KRB5SignedPath in constrained-delegation to match on impersonated client.
Fix signing of KRB5SignedPath in protocol-transition to sign with impersonated client.
Fix PAC and KRB5SignedPath KDC signatures in case of non krbtgt server requested via AS-RRQ to use local TGS key instead of the server key.","Sounds good regarding server realm, although how common is it to serve multiple realms from the same KDC?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,599,2019-06-10T09:51:49Z,2021-09-23T08:08:42Z,2021-09-23T08:08:42Z,CLOSED,False,96,8,3,https://github.com/iboukris,draft: Fix KRB5SignedPath when evidence ticket is not acquired via protocol-transition,2,[],https://github.com/heimdal/heimdal/pull/599,https://github.com/iboukris,13,https://github.com/heimdal/heimdal/pull/599#issuecomment-502364294,"Follow up to #598.

Fix check of KRB5SignedPath in constrained-delegation to match on impersonated client.
Fix signing of KRB5SignedPath in protocol-transition to sign with impersonated client.
Fix PAC and KRB5SignedPath KDC signatures in case of non krbtgt server requested via AS-RRQ to use local TGS key instead of the server key.","In AD a KDC serves only one realm. MS-PAC 2.8.2 simply states ""The KDC signature is generated by the issuing KDC"" but in general it's the KDC of the server realm that signs the service ticket. I changed it to server realm as suggested.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,599,2019-06-10T09:51:49Z,2021-09-23T08:08:42Z,2021-09-23T08:08:42Z,CLOSED,False,96,8,3,https://github.com/iboukris,draft: Fix KRB5SignedPath when evidence ticket is not acquired via protocol-transition,2,[],https://github.com/heimdal/heimdal/pull/599,https://github.com/lhoward,14,https://github.com/heimdal/heimdal/pull/599#issuecomment-502366916,"Follow up to #598.

Fix check of KRB5SignedPath in constrained-delegation to match on impersonated client.
Fix signing of KRB5SignedPath in protocol-transition to sign with impersonated client.
Fix PAC and KRB5SignedPath KDC signatures in case of non krbtgt server requested via AS-RRQ to use local TGS key instead of the server key.",Right but KRB5SignedPath is a non-AD extension.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,599,2019-06-10T09:51:49Z,2021-09-23T08:08:42Z,2021-09-23T08:08:42Z,CLOSED,False,96,8,3,https://github.com/iboukris,draft: Fix KRB5SignedPath when evidence ticket is not acquired via protocol-transition,2,[],https://github.com/heimdal/heimdal/pull/599,https://github.com/iboukris,15,https://github.com/heimdal/heimdal/pull/599#issuecomment-502367500,"Follow up to #598.

Fix check of KRB5SignedPath in constrained-delegation to match on impersonated client.
Fix signing of KRB5SignedPath in protocol-transition to sign with impersonated client.
Fix PAC and KRB5SignedPath KDC signatures in case of non krbtgt server requested via AS-RRQ to use local TGS key instead of the server key.","I realise that, my assumption is that it was modelled on MS-PAC. And regarding evidence ticket, it's the kdc of the server that would verify it.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,599,2019-06-10T09:51:49Z,2021-09-23T08:08:42Z,2021-09-23T08:08:42Z,CLOSED,False,96,8,3,https://github.com/iboukris,draft: Fix KRB5SignedPath when evidence ticket is not acquired via protocol-transition,2,[],https://github.com/heimdal/heimdal/pull/599,https://github.com/lhoward,16,https://github.com/heimdal/heimdal/pull/599#issuecomment-502368287,"Follow up to #598.

Fix check of KRB5SignedPath in constrained-delegation to match on impersonated client.
Fix signing of KRB5SignedPath in protocol-transition to sign with impersonated client.
Fix PAC and KRB5SignedPath KDC signatures in case of non krbtgt server requested via AS-RRQ to use local TGS key instead of the server key.","True, yes makes sense :)",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,599,2019-06-10T09:51:49Z,2021-09-23T08:08:42Z,2021-09-23T08:08:42Z,CLOSED,False,96,8,3,https://github.com/iboukris,draft: Fix KRB5SignedPath when evidence ticket is not acquired via protocol-transition,2,[],https://github.com/heimdal/heimdal/pull/599,https://github.com/iboukris,17,https://github.com/heimdal/heimdal/pull/599#issuecomment-925591767,"Follow up to #598.

Fix check of KRB5SignedPath in constrained-delegation to match on impersonated client.
Fix signing of KRB5SignedPath in protocol-transition to sign with impersonated client.
Fix PAC and KRB5SignedPath KDC signatures in case of non krbtgt server requested via AS-RRQ to use local TGS key instead of the server key.","With the rest fixed by e7863e2, closing this PR :)",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,600,2019-06-11T20:13:15Z,2019-06-17T01:23:53Z,2021-07-30T11:28:38Z,MERGED,True,11,4,1,https://github.com/elric1,Implement KRB5_TRACE using existing logging framework,1,[],https://github.com/heimdal/heimdal/pull/600,https://github.com/elric1,1,https://github.com/heimdal/heimdal/pull/600,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,600,2019-06-11T20:13:15Z,2019-06-17T01:23:53Z,2021-07-30T11:28:38Z,MERGED,True,11,4,1,https://github.com/elric1,Implement KRB5_TRACE using existing logging framework,1,[],https://github.com/heimdal/heimdal/pull/600,https://github.com/elric1,2,https://github.com/heimdal/heimdal/pull/600#issuecomment-501081495,,"Sorry, I've been mixing up KRB5_KTNAME and KRB5_TRACE all evening. I looked back through my command line tests, and I was using KRB5_KTNAME for some reason which I can't explain.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,600,2019-06-11T20:13:15Z,2019-06-17T01:23:53Z,2021-07-30T11:28:38Z,MERGED,True,11,4,1,https://github.com/elric1,Implement KRB5_TRACE using existing logging framework,1,[],https://github.com/heimdal/heimdal/pull/600,https://github.com/elric1,3,https://github.com/heimdal/heimdal/pull/600#issuecomment-501314907,,I've push -f'd s/KTNAME/TRACE/ for my prior commit.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,601,2019-06-12T19:53:34Z,2019-11-10T23:48:00Z,2021-07-30T14:21:15Z,MERGED,True,3,1,3,https://github.com/elric1,Export krb5_crypto_prfplus() from libkrb5,1,[],https://github.com/heimdal/heimdal/pull/601,https://github.com/elric1,1,https://github.com/heimdal/heimdal/pull/601,This function is quite useful for a project on which I am working. We may want to rename it or update the usage in some fashion before we export it?,This function is quite useful for a project on which I am working. We may want to rename it or update the usage in some fashion before we export it?,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,602,2019-06-13T23:46:42Z,2019-09-18T20:20:48Z,2021-07-30T14:27:09Z,MERGED,True,190,11,6,https://github.com/elric1,Hashify,2,[],https://github.com/heimdal/heimdal/pull/602,https://github.com/elric1,1,https://github.com/heimdal/heimdal/pull/602,"The first commit is covered by another PR, but is required for this to build.
The second commit describes itself in the full commit message. Essentially, it creates the concept of a ""Key Derivation Namespace"" under which all valid principals have keys that are generated via hashes of a Key Derivation Namespace master key. More details in the commit message.","The first commit is covered by another PR, but is required for this to build.
The second commit describes itself in the full commit message. Essentially, it creates the concept of a ""Key Derivation Namespace"" under which all valid principals have keys that are generated via hashes of a Key Derivation Namespace master key. More details in the commit message.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,603,2019-06-21T13:09:53Z,2019-06-21T14:11:59Z,2021-07-30T14:22:50Z,MERGED,True,0,5,1,https://github.com/elric1,kdc: no error if req is fwdable on non-fwdable princ,1,[],https://github.com/heimdal/heimdal/pull/603,https://github.com/elric1,1,https://github.com/heimdal/heimdal/pull/603,"Instead of returning an error if the client asks for
a forwardable ticket where it isn't allowed, we simply
return one that isn't forwardable.
This is roughly analogous to how we take the min(requested lifetime, configured lifetime).","Instead of returning an error if the client asks for
a forwardable ticket where it isn't allowed, we simply
return one that isn't forwardable.
This is roughly analogous to how we take the min(requested lifetime, configured lifetime).",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,605,2019-06-21T14:13:34Z,2019-06-21T15:32:05Z,2021-07-30T11:30:25Z,MERGED,True,5,4,1,https://github.com/elric1,Fix build for out-of-source objdir,1,[],https://github.com/heimdal/heimdal/pull/605,https://github.com/elric1,1,https://github.com/heimdal/heimdal/pull/605,For Issue #604,For Issue #604,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,607,2019-06-23T03:37:45Z,,2021-03-11T03:26:50Z,OPEN,False,11,6,3,https://github.com/kaduk,Fix (OTP) build with no external database support,2,[],https://github.com/heimdal/heimdal/pull/607,https://github.com/kaduk,1,https://github.com/heimdal/heimdal/pull/607,"On a fairly minimal debian sid system, my builds fail in libotp trying to link otptest due to missing symbols (e.g., __roken_dbm_open); it turns out that this is not due to failing to link libroken, but rather that these symbols are not in libroken at all! Though ndbm_wrap.c is in lib/roken, the sources are used directly in lib/otp/Makefile.am; however, these wrappers are only built when HAVE_DB3 or HAVE_DB1 is defined; otherwise we try to use NDBMLIB for the DBM support (as set by the routines in cf/db.m4).
However, otp_db.c includes ndbm_wrap.h when !defined(HAVE_NDBM) && !defined(HAVE_DB_NDBM), but the roken version seems to require a ""real"" DBN for some N.
As far as I can tell, this means that we just can't use libotp in such a minimal environment, hence the proposed change to configure to disable otp in these cases.  (But of course the details of when exactly to do such disabling may not be correct, as I don't have an exhaustive test matrix to try it on.)
Please try to double-check the notes in the commit message about the commits where sqlite/lmdb were introduced, as I'm not 100% confident in them.
I'm also a bit confused at how the $db_type configure variable seems to be used both for what the HDB format is and what kind of dbN we have available (for libotp's purposes), but did not try to investigate down that path.
One final side note from my investigation's results: ndbm_wrap.c includes db.h if HAVE_DBHEADER and then has an elif chain, with the else clause also being to include db.h.  I didn't fully read up on when we set HAVE_DBHEADER, but maybe this is trying to include the thing that we already checked wasn't available?","On a fairly minimal debian sid system, my builds fail in libotp trying to link otptest due to missing symbols (e.g., __roken_dbm_open); it turns out that this is not due to failing to link libroken, but rather that these symbols are not in libroken at all! Though ndbm_wrap.c is in lib/roken, the sources are used directly in lib/otp/Makefile.am; however, these wrappers are only built when HAVE_DB3 or HAVE_DB1 is defined; otherwise we try to use NDBMLIB for the DBM support (as set by the routines in cf/db.m4).
However, otp_db.c includes ndbm_wrap.h when !defined(HAVE_NDBM) && !defined(HAVE_DB_NDBM), but the roken version seems to require a ""real"" DBN for some N.
As far as I can tell, this means that we just can't use libotp in such a minimal environment, hence the proposed change to configure to disable otp in these cases.  (But of course the details of when exactly to do such disabling may not be correct, as I don't have an exhaustive test matrix to try it on.)
Please try to double-check the notes in the commit message about the commits where sqlite/lmdb were introduced, as I'm not 100% confident in them.
I'm also a bit confused at how the $db_type configure variable seems to be used both for what the HDB format is and what kind of dbN we have available (for libotp's purposes), but did not try to investigate down that path.
One final side note from my investigation's results: ndbm_wrap.c includes db.h if HAVE_DBHEADER and then has an elif chain, with the else clause also being to include db.h.  I didn't fully read up on when we set HAVE_DBHEADER, but maybe this is trying to include the thing that we already checked wasn't available?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,608,2019-07-06T01:24:04Z,2019-10-09T03:20:01Z,2019-10-09T03:24:39Z,MERGED,True,2771,254,24,https://github.com/nicowilliams,Add kx509 client and revamp kx509 service,3,[],https://github.com/heimdal/heimdal/pull/608,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/608,"This commit adds support for kx509 in libkrb5, and revamps the KDC's kx509 service (fixing bugs, adding features).
Of note is that kx509 is attempted optimistically by the client, with the certificate and private key stored in the ccache, and optionally in an external PEM or DER file.  This allows users to have PKIX credentials wherever they have Kerberos credentials.  If the service is configured to not require INITIAL tickets, then this functionality amounts to a PKIX credential delegation feature of sorts: wherever a user delegates Kerberos credentials, they can also automatically have PKIX credentials.
A number of related commits are in this PR.  Perhaps those should be separated and pushed first.
There's a lot of work to be done yet, but most if not all of it can be done in later commits.
The full list of commits is:

0f97fec hx509: export hx509_parse_private_key (Windows)
4233ef4 hx509: support reading private keys from PEM files
adaf680 hxtool request-create: fix --key argument handling
2fa8e21 Add more hxtool EKU options, and KeyUsage too
a316c62 Add note about racy tests
4d388ed Fix hx509_ca_tbs_free() segfault
1091cea hxtool: add generate-key command
90dca96 hx509: do not crash on missing FILE: name
03a0dbe hx509: Add PKCS#8 private key format option
8ba399c hx509: create files with safe mode_t
88a01e0 hx509: add hx509_certs_destroy()
412283a hx509: hx509_context_free(&null_var) should work
64310ba hx509: make hx509_get_error_string(NULL, ...) work
aaf01a0 hxtool print: fix output device bugs
cb10e2e Fix missing error checking in lib/krb5/pkinit.c
c7b6a7a kdc: fix invalid free at exit time
2a3937a kdc: fix leaks
a232ab7 pkinit: fix memory leak in libkrb5
d3f5f0f pkinit: fix leak in client
22edd6b klist: fix verbose printing of config entries
fac55f8 klist: partial fix of -v --json
b8ec34d Add krb5_cc_configured_default_name()
ec11351 Add kx509 client and revamp kx509 service

(ec11351 being the HEAD commit).","This commit adds support for kx509 in libkrb5, and revamps the KDC's kx509 service (fixing bugs, adding features).
Of note is that kx509 is attempted optimistically by the client, with the certificate and private key stored in the ccache, and optionally in an external PEM or DER file.  This allows users to have PKIX credentials wherever they have Kerberos credentials.  If the service is configured to not require INITIAL tickets, then this functionality amounts to a PKIX credential delegation feature of sorts: wherever a user delegates Kerberos credentials, they can also automatically have PKIX credentials.
A number of related commits are in this PR.  Perhaps those should be separated and pushed first.
There's a lot of work to be done yet, but most if not all of it can be done in later commits.
The full list of commits is:

0f97fec hx509: export hx509_parse_private_key (Windows)
4233ef4 hx509: support reading private keys from PEM files
adaf680 hxtool request-create: fix --key argument handling
2fa8e21 Add more hxtool EKU options, and KeyUsage too
a316c62 Add note about racy tests
4d388ed Fix hx509_ca_tbs_free() segfault
1091cea hxtool: add generate-key command
90dca96 hx509: do not crash on missing FILE: name
03a0dbe hx509: Add PKCS#8 private key format option
8ba399c hx509: create files with safe mode_t
88a01e0 hx509: add hx509_certs_destroy()
412283a hx509: hx509_context_free(&null_var) should work
64310ba hx509: make hx509_get_error_string(NULL, ...) work
aaf01a0 hxtool print: fix output device bugs
cb10e2e Fix missing error checking in lib/krb5/pkinit.c
c7b6a7a kdc: fix invalid free at exit time
2a3937a kdc: fix leaks
a232ab7 pkinit: fix memory leak in libkrb5
d3f5f0f pkinit: fix leak in client
22edd6b klist: fix verbose printing of config entries
fac55f8 klist: partial fix of -v --json
b8ec34d Add krb5_cc_configured_default_name()
ec11351 Add kx509 client and revamp kx509 service

(ec11351 being the HEAD commit).",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,608,2019-07-06T01:24:04Z,2019-10-09T03:20:01Z,2019-10-09T03:24:39Z,MERGED,True,2771,254,24,https://github.com/nicowilliams,Add kx509 client and revamp kx509 service,3,[],https://github.com/heimdal/heimdal/pull/608,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/608#issuecomment-509300470,"This commit adds support for kx509 in libkrb5, and revamps the KDC's kx509 service (fixing bugs, adding features).
Of note is that kx509 is attempted optimistically by the client, with the certificate and private key stored in the ccache, and optionally in an external PEM or DER file.  This allows users to have PKIX credentials wherever they have Kerberos credentials.  If the service is configured to not require INITIAL tickets, then this functionality amounts to a PKIX credential delegation feature of sorts: wherever a user delegates Kerberos credentials, they can also automatically have PKIX credentials.
A number of related commits are in this PR.  Perhaps those should be separated and pushed first.
There's a lot of work to be done yet, but most if not all of it can be done in later commits.
The full list of commits is:

0f97fec hx509: export hx509_parse_private_key (Windows)
4233ef4 hx509: support reading private keys from PEM files
adaf680 hxtool request-create: fix --key argument handling
2fa8e21 Add more hxtool EKU options, and KeyUsage too
a316c62 Add note about racy tests
4d388ed Fix hx509_ca_tbs_free() segfault
1091cea hxtool: add generate-key command
90dca96 hx509: do not crash on missing FILE: name
03a0dbe hx509: Add PKCS#8 private key format option
8ba399c hx509: create files with safe mode_t
88a01e0 hx509: add hx509_certs_destroy()
412283a hx509: hx509_context_free(&null_var) should work
64310ba hx509: make hx509_get_error_string(NULL, ...) work
aaf01a0 hxtool print: fix output device bugs
cb10e2e Fix missing error checking in lib/krb5/pkinit.c
c7b6a7a kdc: fix invalid free at exit time
2a3937a kdc: fix leaks
a232ab7 pkinit: fix memory leak in libkrb5
d3f5f0f pkinit: fix leak in client
22edd6b klist: fix verbose printing of config entries
fac55f8 klist: partial fix of -v --json
b8ec34d Add krb5_cc_configured_default_name()
ec11351 Add kx509 client and revamp kx509 service

(ec11351 being the HEAD commit).","Missing functionality that needs to be there before pushing:


(DEFER) when extracting the private key and certificate from a ccache, update the ccache to list the hx509 store into which they were extracted,


(DONE) make kdestroy also destroy the hx509 store into which the PKIX creds were stored,


(DONE) call krb5_kx509() only from krb5_cc_close(), not from krb5_cc_store_cred(), and do the same for storing the start_realm` cc config entry to avoid doing kx509 when on ccache copy,


(DONE) in krb5_kx509() make sure to check if the given cc is the default ccache ignoring $KRB5CCNAME,


(DONE) use error codes from RFC6717!
After a lot of research, I've concluded that all known server implementations up to now either don't send error responses or always send 0 as the error code in error responses, while all known client implementations don't check the error code.  This means we can change the protocol safely to send Kerberos wire protocol error codes + some base just in case.
In fact, we probably won't use the RFC6717 error codes at all.


If the PKIX credentials are stored into multiple hx509 stores, we probably want to record each of their names.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,608,2019-07-06T01:24:04Z,2019-10-09T03:20:01Z,2019-10-09T03:24:39Z,MERGED,True,2771,254,24,https://github.com/nicowilliams,Add kx509 client and revamp kx509 service,3,[],https://github.com/heimdal/heimdal/pull/608,https://github.com/nicowilliams,3,https://github.com/heimdal/heimdal/pull/608#issuecomment-510722917,"This commit adds support for kx509 in libkrb5, and revamps the KDC's kx509 service (fixing bugs, adding features).
Of note is that kx509 is attempted optimistically by the client, with the certificate and private key stored in the ccache, and optionally in an external PEM or DER file.  This allows users to have PKIX credentials wherever they have Kerberos credentials.  If the service is configured to not require INITIAL tickets, then this functionality amounts to a PKIX credential delegation feature of sorts: wherever a user delegates Kerberos credentials, they can also automatically have PKIX credentials.
A number of related commits are in this PR.  Perhaps those should be separated and pushed first.
There's a lot of work to be done yet, but most if not all of it can be done in later commits.
The full list of commits is:

0f97fec hx509: export hx509_parse_private_key (Windows)
4233ef4 hx509: support reading private keys from PEM files
adaf680 hxtool request-create: fix --key argument handling
2fa8e21 Add more hxtool EKU options, and KeyUsage too
a316c62 Add note about racy tests
4d388ed Fix hx509_ca_tbs_free() segfault
1091cea hxtool: add generate-key command
90dca96 hx509: do not crash on missing FILE: name
03a0dbe hx509: Add PKCS#8 private key format option
8ba399c hx509: create files with safe mode_t
88a01e0 hx509: add hx509_certs_destroy()
412283a hx509: hx509_context_free(&null_var) should work
64310ba hx509: make hx509_get_error_string(NULL, ...) work
aaf01a0 hxtool print: fix output device bugs
cb10e2e Fix missing error checking in lib/krb5/pkinit.c
c7b6a7a kdc: fix invalid free at exit time
2a3937a kdc: fix leaks
a232ab7 pkinit: fix memory leak in libkrb5
d3f5f0f pkinit: fix leak in client
22edd6b klist: fix verbose printing of config entries
fac55f8 klist: partial fix of -v --json
b8ec34d Add krb5_cc_configured_default_name()
ec11351 Add kx509 client and revamp kx509 service

(ec11351 being the HEAD commit).","Short-term TBD (after pushing this):

add support for using a self-signed CSR or a self-signed Certificate so we can have:

proof-of-possession of SPKI
algorithm agility
a way to express requests for KU/EKU/SANs to be added / left out



Medium-term TBD:

finish ECC support in lib/hx509 and switch to ECDSA as the default

Longer-term TBD:


add ed25519 and ed448 support, and switch to that as the default


port parts of the UMich CITI kpkcs11 code to libhx509, with @jaltman's changes for supporting the Windows PKIX API
The kpkcs11 code is quite out of date.  It's main feature on Unix is to use a ccache as its store, and on Windows that it uses the Windows crypto APIs.  That it can use a ccache is critical: it means that one can have default PKCS#11 URI configured for all users but depend on KRB5CCNAME / default ccache to select a PKIX credential.
A more modern softtoken we could use is SoftHSMv2, and we could just add to it support for using a ccache or the Windows crypto API as a store.  The license for SoftHSMv2 is compatible with Heimdal's.  Perhaps we can even find a way to even to register a Heimdal-provided plugin to SoftHSMv2.
Note that curl/libcurl supports PKCS#11 engines.  There are OpenSSL engines for PKCS#11.  And OpenJDK has a JNI interface to PKCS#11.  By adopting the kpkcs11 idea, even if not the code, we can make sure that all of those use the same provider and default Kerberos credential store!


round out the PKCS#11 softtoken in-tree, or port some better one to Heimdal (e.g., Illumos')


add proper PKCS#11 URI support?


add a PKCS#11 IPC daemon so that we can keep apps from having direct access to private keys


similarly, port the Red Hat GSS-API proxy to Heimdal or write similar functionality so we can keep apps from having direct access to credentials",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,608,2019-07-06T01:24:04Z,2019-10-09T03:20:01Z,2019-10-09T03:24:39Z,MERGED,True,2771,254,24,https://github.com/nicowilliams,Add kx509 client and revamp kx509 service,3,[],https://github.com/heimdal/heimdal/pull/608,https://github.com/lhoward,4,https://github.com/heimdal/heimdal/pull/608#issuecomment-510723922,"This commit adds support for kx509 in libkrb5, and revamps the KDC's kx509 service (fixing bugs, adding features).
Of note is that kx509 is attempted optimistically by the client, with the certificate and private key stored in the ccache, and optionally in an external PEM or DER file.  This allows users to have PKIX credentials wherever they have Kerberos credentials.  If the service is configured to not require INITIAL tickets, then this functionality amounts to a PKIX credential delegation feature of sorts: wherever a user delegates Kerberos credentials, they can also automatically have PKIX credentials.
A number of related commits are in this PR.  Perhaps those should be separated and pushed first.
There's a lot of work to be done yet, but most if not all of it can be done in later commits.
The full list of commits is:

0f97fec hx509: export hx509_parse_private_key (Windows)
4233ef4 hx509: support reading private keys from PEM files
adaf680 hxtool request-create: fix --key argument handling
2fa8e21 Add more hxtool EKU options, and KeyUsage too
a316c62 Add note about racy tests
4d388ed Fix hx509_ca_tbs_free() segfault
1091cea hxtool: add generate-key command
90dca96 hx509: do not crash on missing FILE: name
03a0dbe hx509: Add PKCS#8 private key format option
8ba399c hx509: create files with safe mode_t
88a01e0 hx509: add hx509_certs_destroy()
412283a hx509: hx509_context_free(&null_var) should work
64310ba hx509: make hx509_get_error_string(NULL, ...) work
aaf01a0 hxtool print: fix output device bugs
cb10e2e Fix missing error checking in lib/krb5/pkinit.c
c7b6a7a kdc: fix invalid free at exit time
2a3937a kdc: fix leaks
a232ab7 pkinit: fix memory leak in libkrb5
d3f5f0f pkinit: fix leak in client
22edd6b klist: fix verbose printing of config entries
fac55f8 klist: partial fix of -v --json
b8ec34d Add krb5_cc_configured_default_name()
ec11351 Add kx509 client and revamp kx509 service

(ec11351 being the HEAD commit).",@nicowilliams One could probably shoehorn the PKCS#11 IPC daemon into kcm. Or indeed can you shovel them into the credentials cache so that you can leverage kcm/keyring as-is?,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,608,2019-07-06T01:24:04Z,2019-10-09T03:20:01Z,2019-10-09T03:24:39Z,MERGED,True,2771,254,24,https://github.com/nicowilliams,Add kx509 client and revamp kx509 service,3,[],https://github.com/heimdal/heimdal/pull/608,https://github.com/nicowilliams,5,https://github.com/heimdal/heimdal/pull/608#issuecomment-510724351,"This commit adds support for kx509 in libkrb5, and revamps the KDC's kx509 service (fixing bugs, adding features).
Of note is that kx509 is attempted optimistically by the client, with the certificate and private key stored in the ccache, and optionally in an external PEM or DER file.  This allows users to have PKIX credentials wherever they have Kerberos credentials.  If the service is configured to not require INITIAL tickets, then this functionality amounts to a PKIX credential delegation feature of sorts: wherever a user delegates Kerberos credentials, they can also automatically have PKIX credentials.
A number of related commits are in this PR.  Perhaps those should be separated and pushed first.
There's a lot of work to be done yet, but most if not all of it can be done in later commits.
The full list of commits is:

0f97fec hx509: export hx509_parse_private_key (Windows)
4233ef4 hx509: support reading private keys from PEM files
adaf680 hxtool request-create: fix --key argument handling
2fa8e21 Add more hxtool EKU options, and KeyUsage too
a316c62 Add note about racy tests
4d388ed Fix hx509_ca_tbs_free() segfault
1091cea hxtool: add generate-key command
90dca96 hx509: do not crash on missing FILE: name
03a0dbe hx509: Add PKCS#8 private key format option
8ba399c hx509: create files with safe mode_t
88a01e0 hx509: add hx509_certs_destroy()
412283a hx509: hx509_context_free(&null_var) should work
64310ba hx509: make hx509_get_error_string(NULL, ...) work
aaf01a0 hxtool print: fix output device bugs
cb10e2e Fix missing error checking in lib/krb5/pkinit.c
c7b6a7a kdc: fix invalid free at exit time
2a3937a kdc: fix leaks
a232ab7 pkinit: fix memory leak in libkrb5
d3f5f0f pkinit: fix leak in client
22edd6b klist: fix verbose printing of config entries
fac55f8 klist: partial fix of -v --json
b8ec34d Add krb5_cc_configured_default_name()
ec11351 Add kx509 client and revamp kx509 service

(ec11351 being the HEAD commit).","@lhoward I'm already setting the cert and priv key in the ccache as cc config entries!  So this should already work with kcm and the linux keyring ccache.
But kcm != isolation.  Clients get to see the session keys, and the tickets (cc config payloads are stored as tickets).",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,608,2019-07-06T01:24:04Z,2019-10-09T03:20:01Z,2019-10-09T03:24:39Z,MERGED,True,2771,254,24,https://github.com/nicowilliams,Add kx509 client and revamp kx509 service,3,[],https://github.com/heimdal/heimdal/pull/608,https://github.com/lhoward,6,https://github.com/heimdal/heimdal/pull/608#issuecomment-510724615,"This commit adds support for kx509 in libkrb5, and revamps the KDC's kx509 service (fixing bugs, adding features).
Of note is that kx509 is attempted optimistically by the client, with the certificate and private key stored in the ccache, and optionally in an external PEM or DER file.  This allows users to have PKIX credentials wherever they have Kerberos credentials.  If the service is configured to not require INITIAL tickets, then this functionality amounts to a PKIX credential delegation feature of sorts: wherever a user delegates Kerberos credentials, they can also automatically have PKIX credentials.
A number of related commits are in this PR.  Perhaps those should be separated and pushed first.
There's a lot of work to be done yet, but most if not all of it can be done in later commits.
The full list of commits is:

0f97fec hx509: export hx509_parse_private_key (Windows)
4233ef4 hx509: support reading private keys from PEM files
adaf680 hxtool request-create: fix --key argument handling
2fa8e21 Add more hxtool EKU options, and KeyUsage too
a316c62 Add note about racy tests
4d388ed Fix hx509_ca_tbs_free() segfault
1091cea hxtool: add generate-key command
90dca96 hx509: do not crash on missing FILE: name
03a0dbe hx509: Add PKCS#8 private key format option
8ba399c hx509: create files with safe mode_t
88a01e0 hx509: add hx509_certs_destroy()
412283a hx509: hx509_context_free(&null_var) should work
64310ba hx509: make hx509_get_error_string(NULL, ...) work
aaf01a0 hxtool print: fix output device bugs
cb10e2e Fix missing error checking in lib/krb5/pkinit.c
c7b6a7a kdc: fix invalid free at exit time
2a3937a kdc: fix leaks
a232ab7 pkinit: fix memory leak in libkrb5
d3f5f0f pkinit: fix leak in client
22edd6b klist: fix verbose printing of config entries
fac55f8 klist: partial fix of -v --json
b8ec34d Add krb5_cc_configured_default_name()
ec11351 Add kx509 client and revamp kx509 service

(ec11351 being the HEAD commit).",Is the Red Hat GSS proxy a separate thing that could be made to work with Heimdal? I suppose it's not BSD licensed though...,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,608,2019-07-06T01:24:04Z,2019-10-09T03:20:01Z,2019-10-09T03:24:39Z,MERGED,True,2771,254,24,https://github.com/nicowilliams,Add kx509 client and revamp kx509 service,3,[],https://github.com/heimdal/heimdal/pull/608,https://github.com/nicowilliams,7,https://github.com/heimdal/heimdal/pull/608#issuecomment-510725452,"This commit adds support for kx509 in libkrb5, and revamps the KDC's kx509 service (fixing bugs, adding features).
Of note is that kx509 is attempted optimistically by the client, with the certificate and private key stored in the ccache, and optionally in an external PEM or DER file.  This allows users to have PKIX credentials wherever they have Kerberos credentials.  If the service is configured to not require INITIAL tickets, then this functionality amounts to a PKIX credential delegation feature of sorts: wherever a user delegates Kerberos credentials, they can also automatically have PKIX credentials.
A number of related commits are in this PR.  Perhaps those should be separated and pushed first.
There's a lot of work to be done yet, but most if not all of it can be done in later commits.
The full list of commits is:

0f97fec hx509: export hx509_parse_private_key (Windows)
4233ef4 hx509: support reading private keys from PEM files
adaf680 hxtool request-create: fix --key argument handling
2fa8e21 Add more hxtool EKU options, and KeyUsage too
a316c62 Add note about racy tests
4d388ed Fix hx509_ca_tbs_free() segfault
1091cea hxtool: add generate-key command
90dca96 hx509: do not crash on missing FILE: name
03a0dbe hx509: Add PKCS#8 private key format option
8ba399c hx509: create files with safe mode_t
88a01e0 hx509: add hx509_certs_destroy()
412283a hx509: hx509_context_free(&null_var) should work
64310ba hx509: make hx509_get_error_string(NULL, ...) work
aaf01a0 hxtool print: fix output device bugs
cb10e2e Fix missing error checking in lib/krb5/pkinit.c
c7b6a7a kdc: fix invalid free at exit time
2a3937a kdc: fix leaks
a232ab7 pkinit: fix memory leak in libkrb5
d3f5f0f pkinit: fix leak in client
22edd6b klist: fix verbose printing of config entries
fac55f8 klist: partial fix of -v --json
b8ec34d Add krb5_cc_configured_default_name()
ec11351 Add kx509 client and revamp kx509 service

(ec11351 being the HEAD commit).","@lhoward yeah, it's not GPL, but BSD or MIT, I forget which.  I wrote the XDR for it, and as a result of that collaboration it got licensed with not-GPL.
It's got two components: a daemon, which only uses GSS and so should be trivial to port to Heimdal (or leave it out of tree even), and... invasive libgss mechglue changes that will basically need to be written from scratch for Heimdal.
EDIT: Right, the client side is itself two parts: one a provider for the mechglue, the other a bunch of hooks in the mechglue, and the latter are very invasive in MIT.  A much simpler approach might be to proxy all of libgss rather than individual providers / credentials, though that would be more limited than the functionality MIT has.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,608,2019-07-06T01:24:04Z,2019-10-09T03:20:01Z,2019-10-09T03:24:39Z,MERGED,True,2771,254,24,https://github.com/nicowilliams,Add kx509 client and revamp kx509 service,3,[],https://github.com/heimdal/heimdal/pull/608,https://github.com/nicowilliams,8,https://github.com/heimdal/heimdal/pull/608#issuecomment-511026608,"This commit adds support for kx509 in libkrb5, and revamps the KDC's kx509 service (fixing bugs, adding features).
Of note is that kx509 is attempted optimistically by the client, with the certificate and private key stored in the ccache, and optionally in an external PEM or DER file.  This allows users to have PKIX credentials wherever they have Kerberos credentials.  If the service is configured to not require INITIAL tickets, then this functionality amounts to a PKIX credential delegation feature of sorts: wherever a user delegates Kerberos credentials, they can also automatically have PKIX credentials.
A number of related commits are in this PR.  Perhaps those should be separated and pushed first.
There's a lot of work to be done yet, but most if not all of it can be done in later commits.
The full list of commits is:

0f97fec hx509: export hx509_parse_private_key (Windows)
4233ef4 hx509: support reading private keys from PEM files
adaf680 hxtool request-create: fix --key argument handling
2fa8e21 Add more hxtool EKU options, and KeyUsage too
a316c62 Add note about racy tests
4d388ed Fix hx509_ca_tbs_free() segfault
1091cea hxtool: add generate-key command
90dca96 hx509: do not crash on missing FILE: name
03a0dbe hx509: Add PKCS#8 private key format option
8ba399c hx509: create files with safe mode_t
88a01e0 hx509: add hx509_certs_destroy()
412283a hx509: hx509_context_free(&null_var) should work
64310ba hx509: make hx509_get_error_string(NULL, ...) work
aaf01a0 hxtool print: fix output device bugs
cb10e2e Fix missing error checking in lib/krb5/pkinit.c
c7b6a7a kdc: fix invalid free at exit time
2a3937a kdc: fix leaks
a232ab7 pkinit: fix memory leak in libkrb5
d3f5f0f pkinit: fix leak in client
22edd6b klist: fix verbose printing of config entries
fac55f8 klist: partial fix of -v --json
b8ec34d Add krb5_cc_configured_default_name()
ec11351 Add kx509 client and revamp kx509 service

(ec11351 being the HEAD commit).","Also, to make this truly useful we'll need to send PRs to OpenSSL and others, or to apps like curl/libcurl, to have some sort of configuration listing {pkix_cred_store, hostname_pattern_or_domain} instructing those TLS implementations or TLS apps when to use client certs (for what origins) and which certs.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,608,2019-07-06T01:24:04Z,2019-10-09T03:20:01Z,2019-10-09T03:24:39Z,MERGED,True,2771,254,24,https://github.com/nicowilliams,Add kx509 client and revamp kx509 service,3,[],https://github.com/heimdal/heimdal/pull/608,https://github.com/nicowilliams,9,https://github.com/heimdal/heimdal/pull/608#issuecomment-539806814,"This commit adds support for kx509 in libkrb5, and revamps the KDC's kx509 service (fixing bugs, adding features).
Of note is that kx509 is attempted optimistically by the client, with the certificate and private key stored in the ccache, and optionally in an external PEM or DER file.  This allows users to have PKIX credentials wherever they have Kerberos credentials.  If the service is configured to not require INITIAL tickets, then this functionality amounts to a PKIX credential delegation feature of sorts: wherever a user delegates Kerberos credentials, they can also automatically have PKIX credentials.
A number of related commits are in this PR.  Perhaps those should be separated and pushed first.
There's a lot of work to be done yet, but most if not all of it can be done in later commits.
The full list of commits is:

0f97fec hx509: export hx509_parse_private_key (Windows)
4233ef4 hx509: support reading private keys from PEM files
adaf680 hxtool request-create: fix --key argument handling
2fa8e21 Add more hxtool EKU options, and KeyUsage too
a316c62 Add note about racy tests
4d388ed Fix hx509_ca_tbs_free() segfault
1091cea hxtool: add generate-key command
90dca96 hx509: do not crash on missing FILE: name
03a0dbe hx509: Add PKCS#8 private key format option
8ba399c hx509: create files with safe mode_t
88a01e0 hx509: add hx509_certs_destroy()
412283a hx509: hx509_context_free(&null_var) should work
64310ba hx509: make hx509_get_error_string(NULL, ...) work
aaf01a0 hxtool print: fix output device bugs
cb10e2e Fix missing error checking in lib/krb5/pkinit.c
c7b6a7a kdc: fix invalid free at exit time
2a3937a kdc: fix leaks
a232ab7 pkinit: fix memory leak in libkrb5
d3f5f0f pkinit: fix leak in client
22edd6b klist: fix verbose printing of config entries
fac55f8 klist: partial fix of -v --json
b8ec34d Add krb5_cc_configured_default_name()
ec11351 Add kx509 client and revamp kx509 service

(ec11351 being the HEAD commit).",This was reviewed off-github by @vdukhovni.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,609,2019-07-15T03:10:37Z,2019-09-04T22:00:16Z,2019-09-04T22:00:16Z,MERGED,True,141,27,11,https://github.com/vdukhovni,Optional backwards-compatible anon-pkinit behaviour,1,['master'],https://github.com/heimdal/heimdal/pull/609,https://github.com/vdukhovni,1,https://github.com/heimdal/heimdal/pull/609,"Anonymous pkinit responses from the KDC where the name
type is not well-known (as issued by 7.5 KDCs and earlier)
are accepted by the client.  There is no need for the client
to strictly enforce the name type.


With historical_anon_pkinit = true, the kinit(1) client's
""--anonymous"" option only performs anon pkinit, and does
not require an '@' prefix for the realm argument.


With historical_anon_realm = true, the KDC issues anon
pkinit tickets with the legacy pre-7.0 ""real"" realm.","Anonymous pkinit responses from the KDC where the name
type is not well-known (as issued by 7.5 KDCs and earlier)
are accepted by the client.  There is no need for the client
to strictly enforce the name type.


With historical_anon_pkinit = true, the kinit(1) client's
""--anonymous"" option only performs anon pkinit, and does
not require an '@' prefix for the realm argument.


With historical_anon_realm = true, the KDC issues anon
pkinit tickets with the legacy pre-7.0 ""real"" realm.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,609,2019-07-15T03:10:37Z,2019-09-04T22:00:16Z,2019-09-04T22:00:16Z,MERGED,True,141,27,11,https://github.com/vdukhovni,Optional backwards-compatible anon-pkinit behaviour,1,['master'],https://github.com/heimdal/heimdal/pull/609,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/609#issuecomment-511455407,"Anonymous pkinit responses from the KDC where the name
type is not well-known (as issued by 7.5 KDCs and earlier)
are accepted by the client.  There is no need for the client
to strictly enforce the name type.


With historical_anon_pkinit = true, the kinit(1) client's
""--anonymous"" option only performs anon pkinit, and does
not require an '@' prefix for the realm argument.


With historical_anon_realm = true, the KDC issues anon
pkinit tickets with the legacy pre-7.0 ""real"" realm.","Since all review is happening on #610, can we close this one?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,609,2019-07-15T03:10:37Z,2019-09-04T22:00:16Z,2019-09-04T22:00:16Z,MERGED,True,141,27,11,https://github.com/vdukhovni,Optional backwards-compatible anon-pkinit behaviour,1,['master'],https://github.com/heimdal/heimdal/pull/609,https://github.com/vdukhovni,3,https://github.com/heimdal/heimdal/pull/609#issuecomment-511455948,"Anonymous pkinit responses from the KDC where the name
type is not well-known (as issued by 7.5 KDCs and earlier)
are accepted by the client.  There is no need for the client
to strictly enforce the name type.


With historical_anon_pkinit = true, the kinit(1) client's
""--anonymous"" option only performs anon pkinit, and does
not require an '@' prefix for the realm argument.


With historical_anon_realm = true, the KDC issues anon
pkinit tickets with the legacy pre-7.0 ""real"" realm.","I always open a separate PR per branch, the second review can wait for the first, but this branch will still need to be updated to match, and should be briefly reviewed.  We can put this on hold for now...",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,610,2019-07-15T03:11:13Z,2019-09-03T23:30:49Z,2019-09-03T23:30:49Z,MERGED,True,141,27,11,https://github.com/vdukhovni,Optional backwards-compatible anon-pkinit behaviour,1,[],https://github.com/heimdal/heimdal/pull/610,https://github.com/vdukhovni,1,https://github.com/heimdal/heimdal/pull/610,"Anonymous pkinit responses from the KDC where the name
type is not well-known (as issued by 7.5 KDCs and earlier)
are accepted by the client.  There is no need for the client
to strictly enforce the name type.


With historical_anon_pkinit = true, the kinit(1) client's
""--anonymous"" option only performs anon pkinit, and does
not require an '@' prefix for the realm argument.


With historical_anon_realm = true, the KDC issues anon
pkinit tickets with the legacy pre-7.0 ""real"" realm.","Anonymous pkinit responses from the KDC where the name
type is not well-known (as issued by 7.5 KDCs and earlier)
are accepted by the client.  There is no need for the client
to strictly enforce the name type.


With historical_anon_pkinit = true, the kinit(1) client's
""--anonymous"" option only performs anon pkinit, and does
not require an '@' prefix for the realm argument.


With historical_anon_realm = true, the KDC issues anon
pkinit tickets with the legacy pre-7.0 ""real"" realm.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,610,2019-07-15T03:11:13Z,2019-09-03T23:30:49Z,2019-09-03T23:30:49Z,MERGED,True,141,27,11,https://github.com/vdukhovni,Optional backwards-compatible anon-pkinit behaviour,1,[],https://github.com/heimdal/heimdal/pull/610,https://github.com/coveralls,2,https://github.com/heimdal/heimdal/pull/610#issuecomment-511268328,"Anonymous pkinit responses from the KDC where the name
type is not well-known (as issued by 7.5 KDCs and earlier)
are accepted by the client.  There is no need for the client
to strictly enforce the name type.


With historical_anon_pkinit = true, the kinit(1) client's
""--anonymous"" option only performs anon pkinit, and does
not require an '@' prefix for the realm argument.


With historical_anon_realm = true, the KDC issues anon
pkinit tickets with the legacy pre-7.0 ""real"" realm.",Coverage remained the same at 0.0% when pulling 873c08e on vdukhovni:pkinit-compat into e195960 on heimdal:heimdal-7-1-branch.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,611,2019-07-19T05:30:34Z,2019-10-10T02:14:30Z,2019-10-10T02:14:31Z,MERGED,True,1694,460,17,https://github.com/nicowilliams,WIP: kx509 CSR support (for proof of possession and more),2,[],https://github.com/heimdal/heimdal/pull/611,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/611,"NOT READY FOR REVIEW
Intent:

(DONE) revamp lib/hx509's CSR attributes support
(DONE) add KDC-side support for CSRs for kx509 for proof-of-possession
(DONE) add client-side support for CSRs for kx509 for proof-of-possession
(DONE) add HTTPS proxy for kx509 with bearer tokens
(DONE) add client-side support for CSR attributes
(needed for issuing server certs for multiple names)
(TBD) add KDC-side support for CSR attributes, including authorization thereof
(needed for issuing server certs for multiple names)","NOT READY FOR REVIEW
Intent:

(DONE) revamp lib/hx509's CSR attributes support
(DONE) add KDC-side support for CSRs for kx509 for proof-of-possession
(DONE) add client-side support for CSRs for kx509 for proof-of-possession
(DONE) add HTTPS proxy for kx509 with bearer tokens
(DONE) add client-side support for CSR attributes
(needed for issuing server certs for multiple names)
(TBD) add KDC-side support for CSR attributes, including authorization thereof
(needed for issuing server certs for multiple names)",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,611,2019-07-19T05:30:34Z,2019-10-10T02:14:30Z,2019-10-10T02:14:31Z,MERGED,True,1694,460,17,https://github.com/nicowilliams,WIP: kx509 CSR support (for proof of possession and more),2,[],https://github.com/heimdal/heimdal/pull/611,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/611#issuecomment-540295245,"NOT READY FOR REVIEW
Intent:

(DONE) revamp lib/hx509's CSR attributes support
(DONE) add KDC-side support for CSRs for kx509 for proof-of-possession
(DONE) add client-side support for CSRs for kx509 for proof-of-possession
(DONE) add HTTPS proxy for kx509 with bearer tokens
(DONE) add client-side support for CSR attributes
(needed for issuing server certs for multiple names)
(TBD) add KDC-side support for CSR attributes, including authorization thereof
(needed for issuing server certs for multiple names)",Reviewd by @vdukhovni.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,613,2019-07-25T08:10:18Z,,2021-03-11T03:26:50Z,OPEN,False,14,4,1,https://github.com/vdukhovni,"Bug fixes for dcache, but likely more needed",1,[],https://github.com/heimdal/heimdal/pull/613,https://github.com/vdukhovni,1,https://github.com/heimdal/heimdal/pull/613,"Don't forget to skip ""DIR:"" prefix
Check for NULL cache id from caller

The code for dcaches appears to be incomplete.","Don't forget to skip ""DIR:"" prefix
Check for NULL cache id from caller

The code for dcaches appears to be incomplete.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,620,2019-08-25T23:01:26Z,2019-09-04T02:32:46Z,2019-09-04T02:34:30Z,CLOSED,False,4,0,1,https://github.com/SethEllsworth,Issue 619:,4,[],https://github.com/heimdal/heimdal/pull/620,https://github.com/SethEllsworth,1,https://github.com/heimdal/heimdal/pull/620,"Heimdal's read_string() does not restart I/O when interrupted by a
signal, returning with an error code instead. We don't want this to
happen when the user resizes the window triggering a SIGWINCH, so we
skip installing a handler for it. The default action for this signal is
""ignore"", so the I/O won't be interrupted (no need to set SA_RESTART).","Heimdal's read_string() does not restart I/O when interrupted by a
signal, returning with an error code instead. We don't want this to
happen when the user resizes the window triggering a SIGWINCH, so we
skip installing a handler for it. The default action for this signal is
""ignore"", so the I/O won't be interrupted (no need to set SA_RESTART).",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,620,2019-08-25T23:01:26Z,2019-09-04T02:32:46Z,2019-09-04T02:34:30Z,CLOSED,False,4,0,1,https://github.com/SethEllsworth,Issue 619:,4,[],https://github.com/heimdal/heimdal/pull/620,https://github.com/coveralls,2,https://github.com/heimdal/heimdal/pull/620#issuecomment-524673879,"Heimdal's read_string() does not restart I/O when interrupted by a
signal, returning with an error code instead. We don't want this to
happen when the user resizes the window triggering a SIGWINCH, so we
skip installing a handler for it. The default action for this signal is
""ignore"", so the I/O won't be interrupted (no need to set SA_RESTART).",Coverage remained the same at 0.0% when pulling b007fa9 on SethEllsworth:Issue_619 into e195960 on heimdal:heimdal-7-1-branch.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,622,2019-09-04T00:29:36Z,2019-09-05T14:53:11Z,2019-09-05T14:53:11Z,CLOSED,False,0,0,0,https://github.com/nicowilliams,Make gss_store_cred*() work,0,[],https://github.com/heimdal/heimdal/pull/622,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/622,"krb5_cc_cache_match() searches all ccache collections for a ccache that
has credentials for a given principal name.  This includes MEMORY
ccaches, which means it can find the same ccache as is referenced by a
GSS cred handle given to gss_store_cred(), which means that
gss_store_cred() can fail.
For now we work around this by including a private variant of
krb5_cc_cache_match() that only searches the default ccache, not all
collections.  Eventually we should ensure that krb5_cc_default() also
searches all collection-type (other than MEMORY) ccaches for a default
credential, then we can go back to using krb5_cc_cache_match() (though
we'll need to make sure that MEMORY is searched last or not at all).","krb5_cc_cache_match() searches all ccache collections for a ccache that
has credentials for a given principal name.  This includes MEMORY
ccaches, which means it can find the same ccache as is referenced by a
GSS cred handle given to gss_store_cred(), which means that
gss_store_cred() can fail.
For now we work around this by including a private variant of
krb5_cc_cache_match() that only searches the default ccache, not all
collections.  Eventually we should ensure that krb5_cc_default() also
searches all collection-type (other than MEMORY) ccaches for a default
credential, then we can go back to using krb5_cc_cache_match() (though
we'll need to make sure that MEMORY is searched last or not at all).",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,622,2019-09-04T00:29:36Z,2019-09-05T14:53:11Z,2019-09-05T14:53:11Z,CLOSED,False,0,0,0,https://github.com/nicowilliams,Make gss_store_cred*() work,0,[],https://github.com/heimdal/heimdal/pull/622,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/622#issuecomment-527691570,"krb5_cc_cache_match() searches all ccache collections for a ccache that
has credentials for a given principal name.  This includes MEMORY
ccaches, which means it can find the same ccache as is referenced by a
GSS cred handle given to gss_store_cred(), which means that
gss_store_cred() can fail.
For now we work around this by including a private variant of
krb5_cc_cache_match() that only searches the default ccache, not all
collections.  Eventually we should ensure that krb5_cc_default() also
searches all collection-type (other than MEMORY) ccaches for a default
credential, then we can go back to using krb5_cc_cache_match() (though
we'll need to make sure that MEMORY is searched last or not at all).","I've spent too much time on this.  For a while I wanted to redesign how collections work, but in the end I've decided that the cccol APIs are OK as-is.
The thing that's strange about the cccol APIs is that they operate on the default collection of credentials caches, not on any specified one (there is no way to specify one).  The idea is that we should always have just a default ccache that is a collection and then store multiple principals' credentials there.  Fine.
There are usability issues with the current cccol APIs and the UI (kswitch) though.  Specifically, it's not really OK to have to globally kswitch.  In principle one can set KRB5CCNAME to point to a particular ccache in the collection should one know its name, but in practice that's a user-unfriendly interface.  To ameliorate this I will eventually (not in this PR) propose the following:

that we add a KRB5CCPRINC=<principal> env var for selecting a default ccache from the default collection that matches a particular principal
perhaps also that we name ccaches in DIR collections as the hash of the principal being stored",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,623,2019-09-04T02:40:07Z,,2021-11-17T20:39:41Z,OPEN,False,4,0,1,https://github.com/SethEllsworth,lib/hcrypto/ui: ignore SIGWINCH for github issue 619,1,[],https://github.com/heimdal/heimdal/pull/623,https://github.com/SethEllsworth,1,https://github.com/heimdal/heimdal/pull/623,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,623,2019-09-04T02:40:07Z,,2021-11-17T20:39:41Z,OPEN,False,4,0,1,https://github.com/SethEllsworth,lib/hcrypto/ui: ignore SIGWINCH for github issue 619,1,[],https://github.com/heimdal/heimdal/pull/623,https://github.com/coveralls,2,https://github.com/heimdal/heimdal/pull/623#issuecomment-527721686,,Coverage remained the same at 0.0% when pulling 9060783 on SethEllsworth:issue_619 into 78a1a3d on heimdal:heimdal-7-1-branch.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,625,2019-09-15T02:33:17Z,2019-09-15T04:41:05Z,2019-09-16T01:40:12Z,MERGED,True,8,9,1,https://github.com/vdukhovni,Don't stutter in send_diffs,1,[],https://github.com/heimdal/heimdal/pull/625,https://github.com/vdukhovni,1,https://github.com/heimdal/heimdal/pull/625,"When the master sees a burst of updates (perhaps sustained), the
slaves ""I_HAVE"" messages can fall behind the version we've already
sent, and the unpatched code would retransmit already sent diffs!
This can result in substantial amplification (in a local test, 3000
ops turned into 427,000 ops).  Though the number of messages sent
was actually somewhat smaller, the ever growing message size
ultimately leads to failure.","When the master sees a burst of updates (perhaps sustained), the
slaves ""I_HAVE"" messages can fall behind the version we've already
sent, and the unpatched code would retransmit already sent diffs!
This can result in substantial amplification (in a local test, 3000
ops turned into 427,000 ops).  Though the number of messages sent
was actually somewhat smaller, the ever growing message size
ultimately leads to failure.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,625,2019-09-15T02:33:17Z,2019-09-15T04:41:05Z,2019-09-16T01:40:12Z,MERGED,True,8,9,1,https://github.com/vdukhovni,Don't stutter in send_diffs,1,[],https://github.com/heimdal/heimdal/pull/625,https://github.com/coveralls,2,https://github.com/heimdal/heimdal/pull/625#issuecomment-531619618,"When the master sees a burst of updates (perhaps sustained), the
slaves ""I_HAVE"" messages can fall behind the version we've already
sent, and the unpatched code would retransmit already sent diffs!
This can result in substantial amplification (in a local test, 3000
ops turned into 427,000 ops).  Though the number of messages sent
was actually somewhat smaller, the ever growing message size
ultimately leads to failure.",Coverage remained the same at 0.0% when pulling 10658be on vdukhovni:iprop-stutter-7-1 into 78a1a3d on heimdal:heimdal-7-1-branch.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,626,2019-09-15T02:35:40Z,2019-09-15T04:40:47Z,2019-09-15T04:40:47Z,MERGED,True,8,9,1,https://github.com/vdukhovni,Don't stutter in send_diffs,1,[],https://github.com/heimdal/heimdal/pull/626,https://github.com/vdukhovni,1,https://github.com/heimdal/heimdal/pull/626,"When the master sees a burst of updates (perhaps sustained), the
slaves ""I_HAVE"" messages can fall behind the version we've already
sent, and the unpatched code would retransmit already sent diffs!
This can result in substantial amplification (in a local test, 3000
ops turned into 427,000 ops).  Though the number of messages sent
was actually somewhat smaller, the ever growing message size
ultimately leads to failure.","When the master sees a burst of updates (perhaps sustained), the
slaves ""I_HAVE"" messages can fall behind the version we've already
sent, and the unpatched code would retransmit already sent diffs!
This can result in substantial amplification (in a local test, 3000
ops turned into 427,000 ops).  Though the number of messages sent
was actually somewhat smaller, the ever growing message size
ultimately leads to failure.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,627,2019-09-16T22:20:06Z,2019-09-16T22:28:51Z,2019-09-16T22:28:51Z,MERGED,True,34,5,1,https://github.com/vdukhovni,Don't send diffs to slaves with not yet know version,1,"['bug', 'master']",https://github.com/heimdal/heimdal/pull/627,https://github.com/vdukhovni,1,https://github.com/heimdal/heimdal/pull/627,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,628,2019-09-16T22:23:30Z,2019-09-16T22:29:29Z,2019-09-16T22:29:29Z,MERGED,True,34,5,1,https://github.com/vdukhovni,Don't send diffs to slaves with not yet know version,1,['bug'],https://github.com/heimdal/heimdal/pull/628,https://github.com/vdukhovni,1,https://github.com/heimdal/heimdal/pull/628,(cherry picked from commit d383fd3),(cherry picked from commit d383fd3),True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,629,2019-09-19T01:45:35Z,2019-10-03T20:52:16Z,2019-10-03T20:52:16Z,MERGED,True,824,339,10,https://github.com/nicowilliams,"Async iprop, take 2",5,[],https://github.com/heimdal/heimdal/pull/629,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/629,"This work makes ipropd-master use async I/O for most of what it does -- everything except authentication of the peer.  Along with using async I/O, ipropd-master now chunks the sending of full props and diffs so no peer can keep others from getting serviced.
All but the last commit are also ultimately intended for 7.x, where until now iprop was much too fragile, and remains so to some degree without these changes.
The last commit is only needed when a slave is down for a long time, but the log is large enough for it to catch up from just the log.  We might then try to send it many transactions all at once, (non-blocking, ...) but still large memory footprint on master, and risk of clock-skew on slave by the time it receives the entire batch of changes. It is however much more complex than the earlier ones, so perhaps too much for 7.x at this time.  Maybe later if we burn it in long enough and are still supporting 7.x...","This work makes ipropd-master use async I/O for most of what it does -- everything except authentication of the peer.  Along with using async I/O, ipropd-master now chunks the sending of full props and diffs so no peer can keep others from getting serviced.
All but the last commit are also ultimately intended for 7.x, where until now iprop was much too fragile, and remains so to some degree without these changes.
The last commit is only needed when a slave is down for a long time, but the log is large enough for it to catch up from just the log.  We might then try to send it many transactions all at once, (non-blocking, ...) but still large memory footprint on master, and risk of clock-skew on slave by the time it receives the entire batch of changes. It is however much more complex than the earlier ones, so perhaps too much for 7.x at this time.  Maybe later if we burn it in long enough and are still supporting 7.x...",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,630,2019-09-22T02:51:50Z,2019-11-09T01:55:40Z,2019-11-09T01:55:40Z,MERGED,True,867,348,13,https://github.com/vdukhovni,Async iprop for Heimdal 7.x,7,['bug'],https://github.com/heimdal/heimdal/pull/630,https://github.com/vdukhovni,1,https://github.com/heimdal/heimdal/pull/630,This can wait until we've reviewed and merged the master version. I omits the refactoring to make send_diffs() incremental as that is perhaps too much of a change for a stable release.,This can wait until we've reviewed and merged the master version. I omits the refactoring to make send_diffs() incremental as that is perhaps too much of a change for a stable release.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,630,2019-09-22T02:51:50Z,2019-11-09T01:55:40Z,2019-11-09T01:55:40Z,MERGED,True,867,348,13,https://github.com/vdukhovni,Async iprop for Heimdal 7.x,7,['bug'],https://github.com/heimdal/heimdal/pull/630,https://github.com/coveralls,2,https://github.com/heimdal/heimdal/pull/630#issuecomment-533846690,This can wait until we've reviewed and merged the master version. I omits the refactoring to make send_diffs() incremental as that is perhaps too much of a change for a stable release.,Coverage remained the same at 0.0% when pulling 812be94 on vdukhovni:async-71 into 3adbd83 on heimdal:heimdal-7-1-branch.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,631,2019-09-26T01:23:14Z,2019-09-26T04:09:21Z,2019-09-26T04:09:21Z,MERGED,True,129,45,8,https://github.com/nicowilliams,Support builds as non-logged-in root,4,[],https://github.com/heimdal/heimdal/pull/631,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/631,"We add a new %{loginname} to mean ""that which is returned by getlogin_r()"", and make %{username} mean only whatever $USER, or $LOGNAME, or getpwuid_r() say.  And we make sure that the default principal name, and the principal name kadmin defaults to, are based on the former when running as root and the latter otherwise.","We add a new %{loginname} to mean ""that which is returned by getlogin_r()"", and make %{username} mean only whatever $USER, or $LOGNAME, or getpwuid_r() say.  And we make sure that the default principal name, and the principal name kadmin defaults to, are based on the former when running as root and the latter otherwise.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,631,2019-09-26T01:23:14Z,2019-09-26T04:09:21Z,2019-09-26T04:09:21Z,MERGED,True,129,45,8,https://github.com/nicowilliams,Support builds as non-logged-in root,4,[],https://github.com/heimdal/heimdal/pull/631,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/631#issuecomment-535324705,"We add a new %{loginname} to mean ""that which is returned by getlogin_r()"", and make %{username} mean only whatever $USER, or $LOGNAME, or getpwuid_r() say.  And we make sure that the default principal name, and the principal name kadmin defaults to, are based on the former when running as root and the latter otherwise.",@vdukhovni reviewed.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,632,2019-10-03T17:04:18Z,2019-10-03T18:36:29Z,2019-10-03T18:36:29Z,MERGED,True,1364,512,59,https://github.com/nicowilliams,kx509 prelim commits,38,[],https://github.com/heimdal/heimdal/pull/632,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/632,This PR is just for an appveyor build.  @vdukhovni has reviewed.,This PR is just for an appveyor build.  @vdukhovni has reviewed.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,633,2019-10-04T01:56:35Z,2019-10-08T02:32:41Z,2019-10-08T02:32:41Z,CLOSED,False,0,0,0,https://github.com/nicowilliams,More preliminary changes for kx509,0,[],https://github.com/heimdal/heimdal/pull/633,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/633,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,636,2019-10-16T23:34:43Z,2019-10-21T12:43:02Z,2021-07-30T14:16:46Z,MERGED,True,266,244,11,https://github.com/elric1,Define log levels in docs and change default to 0-3.,1,[],https://github.com/heimdal/heimdal/pull/636,https://github.com/elric1,1,https://github.com/heimdal/heimdal/pull/636,"We define the meaning of the various log levels in the man page
for krb5_openlog(3).  If logging configured and levels are not
specified, we change the default levels to 0-3 which should exclude
debugging messages which are generally only desired in exceptional
circumstances.
We also go through the KDC and adjust the levels to be appropriate.","We define the meaning of the various log levels in the man page
for krb5_openlog(3).  If logging configured and levels are not
specified, we change the default levels to 0-3 which should exclude
debugging messages which are generally only desired in exceptional
circumstances.
We also go through the KDC and adjust the levels to be appropriate.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,636,2019-10-16T23:34:43Z,2019-10-21T12:43:02Z,2021-07-30T14:16:46Z,MERGED,True,266,244,11,https://github.com/elric1,Define log levels in docs and change default to 0-3.,1,[],https://github.com/heimdal/heimdal/pull/636,https://github.com/vdukhovni,2,https://github.com/heimdal/heimdal/pull/636#issuecomment-544270921,"We define the meaning of the various log levels in the man page
for krb5_openlog(3).  If logging configured and levels are not
specified, we change the default levels to 0-3 which should exclude
debugging messages which are generally only desired in exceptional
circumstances.
We also go through the KDC and adjust the levels to be appropriate.",@elric1 what do you want to do with this one?,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,636,2019-10-16T23:34:43Z,2019-10-21T12:43:02Z,2021-07-30T14:16:46Z,MERGED,True,266,244,11,https://github.com/elric1,Define log levels in docs and change default to 0-3.,1,[],https://github.com/heimdal/heimdal/pull/636,https://github.com/elric1,3,https://github.com/heimdal/heimdal/pull/636#issuecomment-544439658,"We define the meaning of the various log levels in the man page
for krb5_openlog(3).  If logging configured and levels are not
specified, we change the default levels to 0-3 which should exclude
debugging messages which are generally only desired in exceptional
circumstances.
We also go through the KDC and adjust the levels to be appropriate.",@vdukhovni: I've adopted your suggestions.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,637,2019-10-17T15:30:21Z,2019-10-18T18:47:35Z,2021-07-30T14:19:44Z,MERGED,True,16,1,3,https://github.com/elric1,Implement [kdc] derived_keys_maxdots,1,[],https://github.com/heimdal/heimdal/pull/637,https://github.com/elric1,1,https://github.com/heimdal/heimdal/pull/637,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,639,2019-10-23T18:39:08Z,2019-10-30T21:31:52Z,2021-07-30T14:21:57Z,MERGED,True,23,0,1,https://github.com/elric1,Lightly document derived key namespaces,1,[],https://github.com/heimdal/heimdal/pull/639,https://github.com/elric1,1,https://github.com/heimdal/heimdal/pull/639,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,640,2019-10-23T21:42:10Z,,2021-03-11T03:26:50Z,OPEN,False,23,3,1,https://github.com/elric1,In krb5.conf make underscores and dashes equivalent,1,[],https://github.com/heimdal/heimdal/pull/640,https://github.com/elric1,1,https://github.com/heimdal/heimdal/pull/640,The source of endless typos due to inconsistency. Why not accept both...,The source of endless typos due to inconsistency. Why not accept both...,True,{'HOORAY': ['https://github.com/frozencemetery']}
heimdal/heimdal,https://github.com/heimdal/heimdal,640,2019-10-23T21:42:10Z,,2021-03-11T03:26:50Z,OPEN,False,23,3,1,https://github.com/elric1,In krb5.conf make underscores and dashes equivalent,1,[],https://github.com/heimdal/heimdal/pull/640,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/640#issuecomment-545653767,The source of endless typos due to inconsistency. Why not accept both...,Can we make lib/krb5/verify_krb5_conf.c warn about dashes?,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,640,2019-10-23T21:42:10Z,,2021-03-11T03:26:50Z,OPEN,False,23,3,1,https://github.com/elric1,In krb5.conf make underscores and dashes equivalent,1,[],https://github.com/heimdal/heimdal/pull/640,https://github.com/elric1,3,https://github.com/heimdal/heimdal/pull/640#issuecomment-545655210,The source of endless typos due to inconsistency. Why not accept both...,I'm looking at it.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,640,2019-10-23T21:42:10Z,,2021-03-11T03:26:50Z,OPEN,False,23,3,1,https://github.com/elric1,In krb5.conf make underscores and dashes equivalent,1,[],https://github.com/heimdal/heimdal/pull/640,https://github.com/abartlet,4,https://github.com/heimdal/heimdal/pull/640#issuecomment-545655724,The source of endless typos due to inconsistency. Why not accept both...,"What does MIT krb5 do in this case?  Given the number of mixed installs
(Samba using Heimdal on a typical MIT-based Linux system for example),
I think these should be in as lock-step as possible.  The includedir
exension on the MIT side has caused a massive headache for example.

More broadly my concern from the long and painful history in Samba is
that synonyms can bite.  We (Samba) even allowed common misspelings,
which then have to be maintained forevermore!

The big issue is that you can't really know what tools outside Heimdal
(eg custom sed scripts) are parsing the krb5.conf and might therefore
fail until it is too late (because this is widely deployed).

The other issue, which may not be a realisic concern, is that while
easy in a custom file parser, each special case like this makes moving
to a standard 'ini' file parser much harder in the future.

I do realise this would be more ergonomic, but I hope this provides
some useful counterpoints to help while you conssider the implications
here.

Thanks!

Andrew Bartlett",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,640,2019-10-23T21:42:10Z,,2021-03-11T03:26:50Z,OPEN,False,23,3,1,https://github.com/elric1,In krb5.conf make underscores and dashes equivalent,1,[],https://github.com/heimdal/heimdal/pull/640,https://github.com/elric1,5,https://github.com/heimdal/heimdal/pull/640#issuecomment-545656430,The source of endless typos due to inconsistency. Why not accept both...,"Yes, understood.
What we have at the moment is inconsistency. We're trying to fix it. It appears that MIT Kerberos uses underscores exclusively from their documentation, but we use both. I think that we should aim to move to underscores but we need to preserve backwards compatibility.",True,{'THUMBS_UP': ['https://github.com/frozencemetery']}
heimdal/heimdal,https://github.com/heimdal/heimdal,640,2019-10-23T21:42:10Z,,2021-03-11T03:26:50Z,OPEN,False,23,3,1,https://github.com/elric1,In krb5.conf make underscores and dashes equivalent,1,[],https://github.com/heimdal/heimdal/pull/640,https://github.com/elric1,6,https://github.com/heimdal/heimdal/pull/640#issuecomment-545658042,The source of endless typos due to inconsistency. Why not accept both...,"We also have a lot of inconsistencies, i.e. we have ""no-addresses"" and MIT has ""noaddresses"".",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,640,2019-10-23T21:42:10Z,,2021-03-11T03:26:50Z,OPEN,False,23,3,1,https://github.com/elric1,In krb5.conf make underscores and dashes equivalent,1,[],https://github.com/heimdal/heimdal/pull/640,https://github.com/frozencemetery,7,https://github.com/heimdal/heimdal/pull/640#issuecomment-545916990,The source of endless typos due to inconsistency. Why not accept both...,"@abartlet Can you elaborate on what you mean by the includedir extension?  Heimdal added that in #248 - are you just referring to the time where MIT had it and Heimdal didn't yet?
We (freeipa folks) have looked into using ""standard"" INI parsers, and the conclusion is that it will probably never happen - there are too many oddities.  Best we can do is export a good parser interface from the Kerberos implementation itself.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,640,2019-10-23T21:42:10Z,,2021-03-11T03:26:50Z,OPEN,False,23,3,1,https://github.com/elric1,In krb5.conf make underscores and dashes equivalent,1,[],https://github.com/heimdal/heimdal/pull/640,https://github.com/jaltman,8,https://github.com/heimdal/heimdal/pull/640#issuecomment-657759111,The source of endless typos due to inconsistency. Why not accept both...,"@greghudson what is your opinion on this proposal?
If MIT agrees I would take the change a step further and on the left hand side convert ""_"", ""-"" and ""."" to """".    But I don't think Heimdal should take this change on its own.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,640,2019-10-23T21:42:10Z,,2021-03-11T03:26:50Z,OPEN,False,23,3,1,https://github.com/elric1,In krb5.conf make underscores and dashes equivalent,1,[],https://github.com/heimdal/heimdal/pull/640,https://github.com/greghudson,9,https://github.com/heimdal/heimdal/pull/640#issuecomment-657794174,The source of endless typos due to inconsistency. Why not accept both...,"I am concerned that I can't find prior art among standard config formats--YAML, TOML, and JSON (as well as JSON5 and HJSON) all have case-sensitive and punctuation-sensitive keys as far as I can tell.  Windows INI files have case-insensitive keys as you'd expect from Windows, but no punctuation-insensitivity that I'm aware of.
I'm not dead set against the idea, but I share some of the concerns voiced by @abartlet.  Any application of the Postel principle comes with a cost, although the benefits are greater in the config file space than the protocol space because humans are involved.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,640,2019-10-23T21:42:10Z,,2021-03-11T03:26:50Z,OPEN,False,23,3,1,https://github.com/elric1,In krb5.conf make underscores and dashes equivalent,1,[],https://github.com/heimdal/heimdal/pull/640,https://github.com/jaltman,10,https://github.com/heimdal/heimdal/pull/640#issuecomment-657804586,The source of endless typos due to inconsistency. Why not accept both...,"@greghudson I believe the precedent is gmail e-mail addresses which discard punctuation.
I believe the critical concern here is how to address the fact that in the past MIT and Heimdal have selected similar but not identical names for common settings.   The AuriStorFS command parser, which uses the krb5 profile format, addresses this by constructing manual alias tables which accept all of the acceptable left-hand-side value names for a given value.
Case-sensitive left-hand-side values are slightly problematic for Heimdal on Windows because of its support for Windows Registry backed profiles which are specified by ""REG:/"".
Whether we go with this approach or not, I believe there would be value in constructing a public registry of known krb5.conf and kdc.conf profile sections and values along with their documented semantics.  If organizations that use krb5 profiles are encouraged to publish their usage, we can hopefully avoid confusion in the future.
Heimdal and MIT can also use the registry to implement compatibility lookup code to improve interoperability when sharing a profile between both implementations.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,641,2019-10-28T23:35:27Z,2019-10-29T21:25:28Z,2019-10-31T21:12:54Z,MERGED,True,1,3,1,https://github.com/quanah,lib/ipc: client double close of socket file descriptor #431,1,[],https://github.com/heimdal/heimdal/pull/641,https://github.com/quanah,1,https://github.com/heimdal/heimdal/pull/641,"When connect() fails in connect_unix() the path_ctx.fd is not
set to -1 after close().  When common_release() is executed due
to the error return from connect_unix() it calls close() a second
time.
There is no need to call close() from connect_unix(). Remove the
duplicate request.
This issue was reported by YASUOKA Masahiko.
Change-Id: I825e274cc7f12e50a8779a2b62ddb756817cdb52","When connect() fails in connect_unix() the path_ctx.fd is not
set to -1 after close().  When common_release() is executed due
to the error return from connect_unix() it calls close() a second
time.
There is no need to call close() from connect_unix(). Remove the
duplicate request.
This issue was reported by YASUOKA Masahiko.
Change-Id: I825e274cc7f12e50a8779a2b62ddb756817cdb52",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,641,2019-10-28T23:35:27Z,2019-10-29T21:25:28Z,2019-10-31T21:12:54Z,MERGED,True,1,3,1,https://github.com/quanah,lib/ipc: client double close of socket file descriptor #431,1,[],https://github.com/heimdal/heimdal/pull/641,https://github.com/coveralls,2,https://github.com/heimdal/heimdal/pull/641#issuecomment-547201617,"When connect() fails in connect_unix() the path_ctx.fd is not
set to -1 after close().  When common_release() is executed due
to the error return from connect_unix() it calls close() a second
time.
There is no need to call close() from connect_unix(). Remove the
duplicate request.
This issue was reported by YASUOKA Masahiko.
Change-Id: I825e274cc7f12e50a8779a2b62ddb756817cdb52",Coverage remained the same at 0.0% when pulling 126c678 on quanah:issue431-merge into 3adbd83 on heimdal:heimdal-7-1-branch.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,642,2019-10-29T12:19:37Z,2019-10-29T14:19:02Z,2019-11-10T23:52:54Z,MERGED,True,6,0,1,https://github.com/vchlum,_gsskrb5_acquire_cred_from leaks context,1,[],https://github.com/heimdal/heimdal/pull/642,https://github.com/vchlum,1,https://github.com/heimdal/heimdal/pull/642,"GSSAPI_KRB5_INIT() calls krb5_init_context() in _gsskrb5_acquire_cred_from() but the krb5_free_context() is not called. This results in memory leak.
The memory leak looks in version 7.5.0 like this (I see it is still not fixed):
==18138== 10,586 (376 direct, 10,210 indirect) bytes in 1 blocks are definitely lost in loss record 466 of 476
==18138==    at 0x4837B65: calloc (vg_replace_malloc.c:752)
==18138==    by 0x551372E: krb5_init_context (context.c:440)
==18138==    by 0x55922EF: _gsskrb5_init (init.c:70)
==18138==    by 0x5588EA5: _gsskrb5_acquire_cred_ext (acquire_cred.c:496)
==18138==    by 0x558994C: _gsskrb5_acquire_cred (acquire_cred.c:451)
==18138==    by 0x5599333: gss_acquire_cred (gss_acquire_cred.c:125)","GSSAPI_KRB5_INIT() calls krb5_init_context() in _gsskrb5_acquire_cred_from() but the krb5_free_context() is not called. This results in memory leak.
The memory leak looks in version 7.5.0 like this (I see it is still not fixed):
==18138== 10,586 (376 direct, 10,210 indirect) bytes in 1 blocks are definitely lost in loss record 466 of 476
==18138==    at 0x4837B65: calloc (vg_replace_malloc.c:752)
==18138==    by 0x551372E: krb5_init_context (context.c:440)
==18138==    by 0x55922EF: _gsskrb5_init (init.c:70)
==18138==    by 0x5588EA5: _gsskrb5_acquire_cred_ext (acquire_cred.c:496)
==18138==    by 0x558994C: _gsskrb5_acquire_cred (acquire_cred.c:451)
==18138==    by 0x5599333: gss_acquire_cred (gss_acquire_cred.c:125)",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,642,2019-10-29T12:19:37Z,2019-10-29T14:19:02Z,2019-11-10T23:52:54Z,MERGED,True,6,0,1,https://github.com/vchlum,_gsskrb5_acquire_cred_from leaks context,1,[],https://github.com/heimdal/heimdal/pull/642,https://github.com/elric1,2,https://github.com/heimdal/heimdal/pull/642#issuecomment-547405050,"GSSAPI_KRB5_INIT() calls krb5_init_context() in _gsskrb5_acquire_cred_from() but the krb5_free_context() is not called. This results in memory leak.
The memory leak looks in version 7.5.0 like this (I see it is still not fixed):
==18138== 10,586 (376 direct, 10,210 indirect) bytes in 1 blocks are definitely lost in loss record 466 of 476
==18138==    at 0x4837B65: calloc (vg_replace_malloc.c:752)
==18138==    by 0x551372E: krb5_init_context (context.c:440)
==18138==    by 0x55922EF: _gsskrb5_init (init.c:70)
==18138==    by 0x5588EA5: _gsskrb5_acquire_cred_ext (acquire_cred.c:496)
==18138==    by 0x558994C: _gsskrb5_acquire_cred (acquire_cred.c:451)
==18138==    by 0x5599333: gss_acquire_cred (gss_acquire_cred.c:125)","Sorry, the previous comment didn't attach to the highlighted lines because they were too far away from the patched lines.  You can seen the same issue on lines: 595-598 and 605-608,",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,642,2019-10-29T12:19:37Z,2019-10-29T14:19:02Z,2019-11-10T23:52:54Z,MERGED,True,6,0,1,https://github.com/vchlum,_gsskrb5_acquire_cred_from leaks context,1,[],https://github.com/heimdal/heimdal/pull/642,https://github.com/vchlum,3,https://github.com/heimdal/heimdal/pull/642#issuecomment-547411748,"GSSAPI_KRB5_INIT() calls krb5_init_context() in _gsskrb5_acquire_cred_from() but the krb5_free_context() is not called. This results in memory leak.
The memory leak looks in version 7.5.0 like this (I see it is still not fixed):
==18138== 10,586 (376 direct, 10,210 indirect) bytes in 1 blocks are definitely lost in loss record 466 of 476
==18138==    at 0x4837B65: calloc (vg_replace_malloc.c:752)
==18138==    by 0x551372E: krb5_init_context (context.c:440)
==18138==    by 0x55922EF: _gsskrb5_init (init.c:70)
==18138==    by 0x5588EA5: _gsskrb5_acquire_cred_ext (acquire_cred.c:496)
==18138==    by 0x558994C: _gsskrb5_acquire_cred (acquire_cred.c:451)
==18138==    by 0x5599333: gss_acquire_cred (gss_acquire_cred.c:125)",@elric1 Thank you. The lines 595-598 and 605-608 are fixed now.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,642,2019-10-29T12:19:37Z,2019-10-29T14:19:02Z,2019-11-10T23:52:54Z,MERGED,True,6,0,1,https://github.com/vchlum,_gsskrb5_acquire_cred_from leaks context,1,[],https://github.com/heimdal/heimdal/pull/642,https://github.com/elric1,4,https://github.com/heimdal/heimdal/pull/642#issuecomment-547420677,"GSSAPI_KRB5_INIT() calls krb5_init_context() in _gsskrb5_acquire_cred_from() but the krb5_free_context() is not called. This results in memory leak.
The memory leak looks in version 7.5.0 like this (I see it is still not fixed):
==18138== 10,586 (376 direct, 10,210 indirect) bytes in 1 blocks are definitely lost in loss record 466 of 476
==18138==    at 0x4837B65: calloc (vg_replace_malloc.c:752)
==18138==    by 0x551372E: krb5_init_context (context.c:440)
==18138==    by 0x55922EF: _gsskrb5_init (init.c:70)
==18138==    by 0x5588EA5: _gsskrb5_acquire_cred_ext (acquire_cred.c:496)
==18138==    by 0x558994C: _gsskrb5_acquire_cred (acquire_cred.c:451)
==18138==    by 0x5599333: gss_acquire_cred (gss_acquire_cred.c:125)",I think that you should put them into a single commit because you are addressing a single issue and then I'll merge it.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,642,2019-10-29T12:19:37Z,2019-10-29T14:19:02Z,2019-11-10T23:52:54Z,MERGED,True,6,0,1,https://github.com/vchlum,_gsskrb5_acquire_cred_from leaks context,1,[],https://github.com/heimdal/heimdal/pull/642,https://github.com/vchlum,5,https://github.com/heimdal/heimdal/pull/642#issuecomment-547436229,"GSSAPI_KRB5_INIT() calls krb5_init_context() in _gsskrb5_acquire_cred_from() but the krb5_free_context() is not called. This results in memory leak.
The memory leak looks in version 7.5.0 like this (I see it is still not fixed):
==18138== 10,586 (376 direct, 10,210 indirect) bytes in 1 blocks are definitely lost in loss record 466 of 476
==18138==    at 0x4837B65: calloc (vg_replace_malloc.c:752)
==18138==    by 0x551372E: krb5_init_context (context.c:440)
==18138==    by 0x55922EF: _gsskrb5_init (init.c:70)
==18138==    by 0x5588EA5: _gsskrb5_acquire_cred_ext (acquire_cred.c:496)
==18138==    by 0x558994C: _gsskrb5_acquire_cred (acquire_cred.c:451)
==18138==    by 0x5599333: gss_acquire_cred (gss_acquire_cred.c:125)",@elric1 OK. It is squashed.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,642,2019-10-29T12:19:37Z,2019-10-29T14:19:02Z,2019-11-10T23:52:54Z,MERGED,True,6,0,1,https://github.com/vchlum,_gsskrb5_acquire_cred_from leaks context,1,[],https://github.com/heimdal/heimdal/pull/642,https://github.com/elric1,6,https://github.com/heimdal/heimdal/pull/642#issuecomment-547443191,"GSSAPI_KRB5_INIT() calls krb5_init_context() in _gsskrb5_acquire_cred_from() but the krb5_free_context() is not called. This results in memory leak.
The memory leak looks in version 7.5.0 like this (I see it is still not fixed):
==18138== 10,586 (376 direct, 10,210 indirect) bytes in 1 blocks are definitely lost in loss record 466 of 476
==18138==    at 0x4837B65: calloc (vg_replace_malloc.c:752)
==18138==    by 0x551372E: krb5_init_context (context.c:440)
==18138==    by 0x55922EF: _gsskrb5_init (init.c:70)
==18138==    by 0x5588EA5: _gsskrb5_acquire_cred_ext (acquire_cred.c:496)
==18138==    by 0x558994C: _gsskrb5_acquire_cred (acquire_cred.c:451)
==18138==    by 0x5599333: gss_acquire_cred (gss_acquire_cred.c:125)","I've merged it. Thanks for your help, we always appreciate bug fixes.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,642,2019-10-29T12:19:37Z,2019-10-29T14:19:02Z,2019-11-10T23:52:54Z,MERGED,True,6,0,1,https://github.com/vchlum,_gsskrb5_acquire_cred_from leaks context,1,[],https://github.com/heimdal/heimdal/pull/642,https://github.com/nicowilliams,7,https://github.com/heimdal/heimdal/pull/642#issuecomment-552247911,"GSSAPI_KRB5_INIT() calls krb5_init_context() in _gsskrb5_acquire_cred_from() but the krb5_free_context() is not called. This results in memory leak.
The memory leak looks in version 7.5.0 like this (I see it is still not fixed):
==18138== 10,586 (376 direct, 10,210 indirect) bytes in 1 blocks are definitely lost in loss record 466 of 476
==18138==    at 0x4837B65: calloc (vg_replace_malloc.c:752)
==18138==    by 0x551372E: krb5_init_context (context.c:440)
==18138==    by 0x55922EF: _gsskrb5_init (init.c:70)
==18138==    by 0x5588EA5: _gsskrb5_acquire_cred_ext (acquire_cred.c:496)
==18138==    by 0x558994C: _gsskrb5_acquire_cred (acquire_cred.c:451)
==18138==    by 0x5599333: gss_acquire_cred (gss_acquire_cred.c:125)","FYI this commit actually created a double-free.
The GSSAPI_KRB5_INIT() macro uses thread-specific to avoid initializing a context too often.
I reverted without marking it as such because I didn't look.
EDIT: The leak you observed is probably due to running with a C library that doesn't destroy thread-specific values associated with the main thread, or due to calling _exit(2), perhaps.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,643,2019-10-30T19:33:09Z,2019-10-30T21:20:59Z,2021-07-30T14:25:52Z,MERGED,True,654,301,12,https://github.com/elric1,Delegate destination TGT support,3,[],https://github.com/heimdal/heimdal/pull/643,https://github.com/elric1,1,https://github.com/heimdal/heimdal/pull/643,"This allows you to configure (in /etc/krb5.conf) that certain realms will ""delegate-destination-tgt"".  That is, rather than delegating a full TGT of the form krbtgt/START@START, you delegate a TGT of the form krbtgt/DEST@DEST. The interesting thing here is that the destination realm becomes a bit like the hotel california because you can't come back to the original realm as that will violate its transited policy.
This functionality works well for DMZ realms and the like where you want to allow access---and you want to be able to delegate creds which people can use to continue to SSH around in the DMZ, but you do not want them to be able to SSH back into the main environment.","This allows you to configure (in /etc/krb5.conf) that certain realms will ""delegate-destination-tgt"".  That is, rather than delegating a full TGT of the form krbtgt/START@START, you delegate a TGT of the form krbtgt/DEST@DEST. The interesting thing here is that the destination realm becomes a bit like the hotel california because you can't come back to the original realm as that will violate its transited policy.
This functionality works well for DMZ realms and the like where you want to allow access---and you want to be able to delegate creds which people can use to continue to SSH around in the DMZ, but you do not want them to be able to SSH back into the main environment.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,645,2019-11-05T16:02:43Z,2019-11-05T16:03:20Z,2019-11-05T16:03:20Z,CLOSED,False,656,301,13,https://github.com/elric1,Derived keys fix,4,[],https://github.com/heimdal/heimdal/pull/645,https://github.com/elric1,1,https://github.com/heimdal/heimdal/pull/645,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,646,2019-11-05T16:06:39Z,2019-11-08T01:11:57Z,2021-07-30T14:19:08Z,MERGED,True,2,0,1,https://github.com/elric1,derived keys: ensure that princ is correct,1,[],https://github.com/heimdal/heimdal/pull/646,https://github.com/elric1,1,https://github.com/heimdal/heimdal/pull/646,"We copy the princ in the hdb_entry so that if it is later used, it
will reflect what we want.","We copy the princ in the hdb_entry so that if it is later used, it
will reflect what we want.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,647,2019-11-07T22:32:43Z,2019-11-10T22:47:37Z,2021-07-30T14:14:44Z,MERGED,True,169,46,4,https://github.com/elric1,Strftime expand tokens,3,[],https://github.com/heimdal/heimdal/pull/647,https://github.com/elric1,1,https://github.com/heimdal/heimdal/pull/647,"So, here we define %{strftime:} in our path expansion routines and then subject logging file definitions to token expansion. Now, we can do something like this:
[kdc]
kdc = FILE:/var/log/auth/%{strftime:%Y%m%d%H}
for nice automatically rolling over logs.","So, here we define %{strftime:} in our path expansion routines and then subject logging file definitions to token expansion. Now, we can do something like this:
[kdc]
kdc = FILE:/var/log/auth/%{strftime:%Y%m%d%H}
for nice automatically rolling over logs.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,647,2019-11-07T22:32:43Z,2019-11-10T22:47:37Z,2021-07-30T14:14:44Z,MERGED,True,169,46,4,https://github.com/elric1,Strftime expand tokens,3,[],https://github.com/heimdal/heimdal/pull/647,https://github.com/elric1,2,https://github.com/heimdal/heimdal/pull/647#issuecomment-552238070,"So, here we define %{strftime:} in our path expansion routines and then subject logging file definitions to token expansion. Now, we can do something like this:
[kdc]
kdc = FILE:/var/log/auth/%{strftime:%Y%m%d%H}
for nice automatically rolling over logs.",I've pushed a new one. That was an uninitialised variable.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,647,2019-11-07T22:32:43Z,2019-11-10T22:47:37Z,2021-07-30T14:14:44Z,MERGED,True,169,46,4,https://github.com/elric1,Strftime expand tokens,3,[],https://github.com/heimdal/heimdal/pull/647,https://github.com/nicowilliams,3,https://github.com/heimdal/heimdal/pull/647#issuecomment-552247638,"So, here we define %{strftime:} in our path expansion routines and then subject logging file definitions to token expansion. Now, we can do something like this:
[kdc]
kdc = FILE:/var/log/auth/%{strftime:%Y%m%d%H}
for nice automatically rolling over logs.",I was thinking we should have a %iso8601date and %iso8601datetime.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,648,2019-11-13T04:58:12Z,2019-12-06T01:20:29Z,2019-12-06T01:20:29Z,MERGED,True,155,30,4,https://github.com/lhoward,WinCNG reusable hash support,2,[],https://github.com/heimdal/heimdal/pull/648,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/648,Untested,Untested,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,648,2019-11-13T04:58:12Z,2019-12-06T01:20:29Z,2019-12-06T01:20:29Z,MERGED,True,155,30,4,https://github.com/lhoward,WinCNG reusable hash support,2,[],https://github.com/heimdal/heimdal/pull/648,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/648#issuecomment-554598420,Untested,"Actually the latter statement isn't quite true – wincng_md_hash_cleanup() does need to be called from EVP_DigestInit_ex() too, in the case where the underlying digest changes. It turns out we don't need to change the provider interface at all, we just need to avoid calling BCryptCreateHash() if the hash object already exists.
(Of course, I realized this after cleaning up the provider interface... oh well. I'll omit those changes for now.)",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,648,2019-11-13T04:58:12Z,2019-12-06T01:20:29Z,2019-12-06T01:20:29Z,MERGED,True,155,30,4,https://github.com/lhoward,WinCNG reusable hash support,2,[],https://github.com/heimdal/heimdal/pull/648,https://github.com/lhoward,3,https://github.com/heimdal/heimdal/pull/648#issuecomment-554827556,Untested,"Question: given the version information is retrieved directly from the PEB, is it pointless caching the result of IsWindows8OrGreater()?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,648,2019-11-13T04:58:12Z,2019-12-06T01:20:29Z,2019-12-06T01:20:29Z,MERGED,True,155,30,4,https://github.com/lhoward,WinCNG reusable hash support,2,[],https://github.com/heimdal/heimdal/pull/648,https://github.com/nicowilliams,4,https://github.com/heimdal/heimdal/pull/648#issuecomment-555198886,Untested,"What is PEB?
Anyways, patch LGTM.  Jeff might want to review.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,648,2019-11-13T04:58:12Z,2019-12-06T01:20:29Z,2019-12-06T01:20:29Z,MERGED,True,155,30,4,https://github.com/lhoward,WinCNG reusable hash support,2,[],https://github.com/heimdal/heimdal/pull/648,https://github.com/jaltman,5,https://github.com/heimdal/heimdal/pull/648#issuecomment-555221760,Untested,"@nicowilliams  PEB is the Windows Process Environment Block
https://docs.microsoft.com/en-us/windows/win32/api/winternl/ns-winternl-peb",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,648,2019-11-13T04:58:12Z,2019-12-06T01:20:29Z,2019-12-06T01:20:29Z,MERGED,True,155,30,4,https://github.com/lhoward,WinCNG reusable hash support,2,[],https://github.com/heimdal/heimdal/pull/648,https://github.com/lhoward,6,https://github.com/heimdal/heimdal/pull/648#issuecomment-555228290,Untested,I’ll see if I can conduct some performance tests today.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,648,2019-11-13T04:58:12Z,2019-12-06T01:20:29Z,2019-12-06T01:20:29Z,MERGED,True,155,30,4,https://github.com/lhoward,WinCNG reusable hash support,2,[],https://github.com/heimdal/heimdal/pull/648,https://github.com/jaltman,7,https://github.com/heimdal/heimdal/pull/648#issuecomment-555242830,Untested,Given the number of statements that must be executed during the IsWindows8OrGreater() implementation I believe the caching is worthwhile.   Perhaps the caching should be within each of the IsWindowsXXX() functions so it benefits all callers.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,648,2019-11-13T04:58:12Z,2019-12-06T01:20:29Z,2019-12-06T01:20:29Z,MERGED,True,155,30,4,https://github.com/lhoward,WinCNG reusable hash support,2,[],https://github.com/heimdal/heimdal/pull/648,https://github.com/jaltman,8,https://github.com/heimdal/heimdal/pull/648#issuecomment-559544746,Untested,"I've successfully tested this change on  Windows 10 [Version 10.0.19033.1].
I still need to test on  Windows 7 [Version 6.1.7601].",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,648,2019-11-13T04:58:12Z,2019-12-06T01:20:29Z,2019-12-06T01:20:29Z,MERGED,True,155,30,4,https://github.com/lhoward,WinCNG reusable hash support,2,[],https://github.com/heimdal/heimdal/pull/648,https://github.com/jaltman,9,https://github.com/heimdal/heimdal/pull/648#issuecomment-560420038,Untested,This change has been successfully tested on Windows 7 [Version 6.1.7601].,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,649,2019-11-18T20:11:19Z,2019-11-18T20:20:20Z,2021-07-30T14:15:31Z,MERGED,True,5,0,2,https://github.com/elric1,include <sys/exec_elf.h> if it's available.,1,[],https://github.com/heimdal/heimdal/pull/649,https://github.com/elric1,1,https://github.com/heimdal/heimdal/pull/649,This fixes the auxval logic on NetBSD.,This fixes the auxval logic on NetBSD.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,650,2019-11-18T22:55:10Z,2019-12-05T05:05:57Z,2021-07-30T14:18:35Z,MERGED,True,871,614,12,https://github.com/elric1,Improve KDC audit logging,7,['feature request'],https://github.com/heimdal/heimdal/pull/650,https://github.com/elric1,1,https://github.com/heimdal/heimdal/pull/650,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,650,2019-11-18T22:55:10Z,2019-12-05T05:05:57Z,2021-07-30T14:18:35Z,MERGED,True,871,614,12,https://github.com/elric1,Improve KDC audit logging,7,['feature request'],https://github.com/heimdal/heimdal/pull/650,https://github.com/elric1,2,https://github.com/heimdal/heimdal/pull/650#issuecomment-555536234,,I'm going to move the Windows build experimentation to another branch.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,650,2019-11-18T22:55:10Z,2019-12-05T05:05:57Z,2021-07-30T14:18:35Z,MERGED,True,871,614,12,https://github.com/elric1,Improve KDC audit logging,7,['feature request'],https://github.com/heimdal/heimdal/pull/650,https://github.com/vdukhovni,3,https://github.com/heimdal/heimdal/pull/650#issuecomment-557786469,,Also check-can fails on my MacOS machine.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,650,2019-11-18T22:55:10Z,2019-12-05T05:05:57Z,2021-07-30T14:18:35Z,MERGED,True,871,614,12,https://github.com/elric1,Improve KDC audit logging,7,['feature request'],https://github.com/heimdal/heimdal/pull/650,https://github.com/jaltman,4,https://github.com/heimdal/heimdal/pull/650#issuecomment-607987159,,@elric1 @vdukhovni  Some examples of the resulting output would be desirable for documentation purposes.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,651,2019-11-19T14:43:03Z,2019-11-20T23:14:45Z,2021-07-30T11:31:13Z,MERGED,True,34,13,7,https://github.com/elric1,Declare variables at the beginning of a block.,7,[],https://github.com/heimdal/heimdal/pull/651,https://github.com/elric1,1,https://github.com/heimdal/heimdal/pull/651,"Looks like this partially fixes the Appveyor build.
We now need to fix the building of the documentation. It's missing a Perl module at the moment, which is likely just a tweak to Appveyor @jaltman? Or alternately, we could change appveyor to pass --disable-heimdal-documentation to ./configure. This should fix the build as the documentation is the last thing to build---and we are getting there.","Looks like this partially fixes the Appveyor build.
We now need to fix the building of the documentation. It's missing a Perl module at the moment, which is likely just a tweak to Appveyor @jaltman? Or alternately, we could change appveyor to pass --disable-heimdal-documentation to ./configure. This should fix the build as the documentation is the last thing to build---and we are getting there.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,651,2019-11-19T14:43:03Z,2019-11-20T23:14:45Z,2021-07-30T11:31:13Z,MERGED,True,34,13,7,https://github.com/elric1,Declare variables at the beginning of a block.,7,[],https://github.com/heimdal/heimdal/pull/651,https://github.com/elric1,2,https://github.com/heimdal/heimdal/pull/651#issuecomment-555539407,"Looks like this partially fixes the Appveyor build.
We now need to fix the building of the documentation. It's missing a Perl module at the moment, which is likely just a tweak to Appveyor @jaltman? Or alternately, we could change appveyor to pass --disable-heimdal-documentation to ./configure. This should fix the build as the documentation is the last thing to build---and we are getting there.","btw: I think that we should definitely do this because I did fix some issues with my last PR because they broke Windows. They would have broken UNIX as well---it just wasn't noticed. If we can keep the Appveyor build clean and error free, without taking unnecessary shortcuts, I think that this would help to improve our code quality and test coverage.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,651,2019-11-19T14:43:03Z,2019-11-20T23:14:45Z,2021-07-30T11:31:13Z,MERGED,True,34,13,7,https://github.com/elric1,Declare variables at the beginning of a block.,7,[],https://github.com/heimdal/heimdal/pull/651,https://github.com/elric1,3,https://github.com/heimdal/heimdal/pull/651#issuecomment-555590245,"Looks like this partially fixes the Appveyor build.
We now need to fix the building of the documentation. It's missing a Perl module at the moment, which is likely just a tweak to Appveyor @jaltman? Or alternately, we could change appveyor to pass --disable-heimdal-documentation to ./configure. This should fix the build as the documentation is the last thing to build---and we are getting there.","Please note, I am not suggesting that we disable all of these tests on Windows, rather I am blasting through characterising the work that we need to accomplish to get this build and test cycle to work from end to end. Each commit that disables a particular commit should be changed into a commit that fixes the test before we merge this PR.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,651,2019-11-19T14:43:03Z,2019-11-20T23:14:45Z,2021-07-30T11:31:13Z,MERGED,True,34,13,7,https://github.com/elric1,Declare variables at the beginning of a block.,7,[],https://github.com/heimdal/heimdal/pull/651,https://github.com/elric1,4,https://github.com/heimdal/heimdal/pull/651#issuecomment-556442196,"Looks like this partially fixes the Appveyor build.
We now need to fix the building of the documentation. It's missing a Perl module at the moment, which is likely just a tweak to Appveyor @jaltman? Or alternately, we could change appveyor to pass --disable-heimdal-documentation to ./configure. This should fix the build as the documentation is the last thing to build---and we are getting there.",@viktor: I'll open issues for test-detach and test_cc on Windows. Then let's pull this for now to fix the build.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,652,2019-11-20T06:00:07Z,2019-11-20T06:00:43Z,2019-11-20T06:00:44Z,MERGED,True,952,73,12,https://github.com/nicowilliams,"Import gss-token, add rkvis",6,[],https://github.com/heimdal/heimdal/pull/652,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/652,@vdukhovni has reviewed.,@vdukhovni has reviewed.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,653,2019-11-20T21:20:49Z,2019-11-20T23:18:58Z,2021-07-30T14:20:37Z,MERGED,True,23,0,4,https://github.com/elric1,Add enforce_ok_as_delegate setting,1,[],https://github.com/heimdal/heimdal/pull/653,https://github.com/elric1,1,https://github.com/heimdal/heimdal/pull/653,"If this flag is set to true, then GSSAPI credential delegation will
be disabled when the ""ok-as-delegate"" flag is not set in the service
ticket.","If this flag is set to true, then GSSAPI credential delegation will
be disabled when the ""ok-as-delegate"" flag is not set in the service
ticket.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,655,2019-11-21T14:28:05Z,2019-11-21T14:56:30Z,2021-07-30T14:13:28Z,MERGED,True,0,1,1,https://github.com/elric1,Fix windows build,1,[],https://github.com/heimdal/heimdal/pull/655,https://github.com/elric1,1,https://github.com/heimdal/heimdal/pull/655,"In 0cc708b, we removed the definition of id-ms-client-authentication
without a corresponding removal from lib/asn1/libasn1-exports.def.
Maybe we should generate lib*-exports.def?","In 0cc708b, we removed the definition of id-ms-client-authentication
without a corresponding removal from lib/asn1/libasn1-exports.def.
Maybe we should generate lib*-exports.def?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,656,2019-11-21T15:54:01Z,,2021-12-14T02:32:38Z,OPEN,False,502,22,20,https://github.com/metze-samba,WIP: GSS_KRB5_CRED_NO_TRANSIT_CHECK_X/GSS_KRB5_CRED_ITERATE_ACCEPTOR_KEYTAB_X,17,[],https://github.com/heimdal/heimdal/pull/656,https://github.com/metze-samba,1,https://github.com/heimdal/heimdal/pull/656,"Members of Active Directory domains should just rely on their
KDCs (domain controllers) to do SID-Filtering (and name checking)
on trust boundaries, I have verified this with a modified Samba KDC
and a Windows 2012R2 DC. The Windows DC rejects invalid cross-realm tickets
with KRB5KDC_ERR_POLICY, before generating a new (service or referral)
ticket. So any service ticket is already policy checked by the KDC
even if this does not result in setting the transited_policy_checked in the ticket.
This means an accepting service can tell gss_accept_sec_context()
to skip any transited checking, as the trust topology is only
fully known to the KDC anyway.
The detailed background for this can be found in the bug report
and the mailing list:
https://lists.samba.org/archive/samba-technical/2019-September/thread.html#134285
https://lists.samba.org/archive/samba-technical/2019-November/thread.html#134553
http://mailman.mit.edu/pipermail/krbdev/ should also have references.
BUG: https://bugzilla.samba.org/show_bug.cgi?id=12907","Members of Active Directory domains should just rely on their
KDCs (domain controllers) to do SID-Filtering (and name checking)
on trust boundaries, I have verified this with a modified Samba KDC
and a Windows 2012R2 DC. The Windows DC rejects invalid cross-realm tickets
with KRB5KDC_ERR_POLICY, before generating a new (service or referral)
ticket. So any service ticket is already policy checked by the KDC
even if this does not result in setting the transited_policy_checked in the ticket.
This means an accepting service can tell gss_accept_sec_context()
to skip any transited checking, as the trust topology is only
fully known to the KDC anyway.
The detailed background for this can be found in the bug report
and the mailing list:
https://lists.samba.org/archive/samba-technical/2019-September/thread.html#134285
https://lists.samba.org/archive/samba-technical/2019-November/thread.html#134553
http://mailman.mit.edu/pipermail/krbdev/ should also have references.
BUG: https://bugzilla.samba.org/show_bug.cgi?id=12907",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,656,2019-11-21T15:54:01Z,,2021-12-14T02:32:38Z,OPEN,False,502,22,20,https://github.com/metze-samba,WIP: GSS_KRB5_CRED_NO_TRANSIT_CHECK_X/GSS_KRB5_CRED_ITERATE_ACCEPTOR_KEYTAB_X,17,[],https://github.com/heimdal/heimdal/pull/656,https://github.com/metze-samba,2,https://github.com/heimdal/heimdal/pull/656#issuecomment-557246091,"Members of Active Directory domains should just rely on their
KDCs (domain controllers) to do SID-Filtering (and name checking)
on trust boundaries, I have verified this with a modified Samba KDC
and a Windows 2012R2 DC. The Windows DC rejects invalid cross-realm tickets
with KRB5KDC_ERR_POLICY, before generating a new (service or referral)
ticket. So any service ticket is already policy checked by the KDC
even if this does not result in setting the transited_policy_checked in the ticket.
This means an accepting service can tell gss_accept_sec_context()
to skip any transited checking, as the trust topology is only
fully known to the KDC anyway.
The detailed background for this can be found in the bug report
and the mailing list:
https://lists.samba.org/archive/samba-technical/2019-September/thread.html#134285
https://lists.samba.org/archive/samba-technical/2019-November/thread.html#134553
http://mailman.mit.edu/pipermail/krbdev/ should also have references.
BUG: https://bugzilla.samba.org/show_bug.cgi?id=12907",What's the best way to bisect the test failures? Is there a way to a travis ci build without a pull request?,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,656,2019-11-21T15:54:01Z,,2021-12-14T02:32:38Z,OPEN,False,502,22,20,https://github.com/metze-samba,WIP: GSS_KRB5_CRED_NO_TRANSIT_CHECK_X/GSS_KRB5_CRED_ITERATE_ACCEPTOR_KEYTAB_X,17,[],https://github.com/heimdal/heimdal/pull/656,https://github.com/metze-samba,3,https://github.com/heimdal/heimdal/pull/656#issuecomment-557251147,"Members of Active Directory domains should just rely on their
KDCs (domain controllers) to do SID-Filtering (and name checking)
on trust boundaries, I have verified this with a modified Samba KDC
and a Windows 2012R2 DC. The Windows DC rejects invalid cross-realm tickets
with KRB5KDC_ERR_POLICY, before generating a new (service or referral)
ticket. So any service ticket is already policy checked by the KDC
even if this does not result in setting the transited_policy_checked in the ticket.
This means an accepting service can tell gss_accept_sec_context()
to skip any transited checking, as the trust topology is only
fully known to the KDC anyway.
The detailed background for this can be found in the bug report
and the mailing list:
https://lists.samba.org/archive/samba-technical/2019-September/thread.html#134285
https://lists.samba.org/archive/samba-technical/2019-November/thread.html#134553
http://mailman.mit.edu/pipermail/krbdev/ should also have references.
BUG: https://bugzilla.samba.org/show_bug.cgi?id=12907","It's failing with this:
AIL: check-context
===================
Creating database
Doing database check
Starting kdc
./check-context: line 176: 10513 Segmentation fault: 11  (core dumped) KRB5_CONFIG=${KDC_KRB5_CONFIG} ${kdc} --detach --testing
kdc failed to start
FAIL check-context (exit status: 1)
While is passes a local make check, there if fails check-iprop, even with plain master.
Any hints how to debug this?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,656,2019-11-21T15:54:01Z,,2021-12-14T02:32:38Z,OPEN,False,502,22,20,https://github.com/metze-samba,WIP: GSS_KRB5_CRED_NO_TRANSIT_CHECK_X/GSS_KRB5_CRED_ITERATE_ACCEPTOR_KEYTAB_X,17,[],https://github.com/heimdal/heimdal/pull/656,https://github.com/iboukris,4,https://github.com/heimdal/heimdal/pull/656#issuecomment-557835141,"Members of Active Directory domains should just rely on their
KDCs (domain controllers) to do SID-Filtering (and name checking)
on trust boundaries, I have verified this with a modified Samba KDC
and a Windows 2012R2 DC. The Windows DC rejects invalid cross-realm tickets
with KRB5KDC_ERR_POLICY, before generating a new (service or referral)
ticket. So any service ticket is already policy checked by the KDC
even if this does not result in setting the transited_policy_checked in the ticket.
This means an accepting service can tell gss_accept_sec_context()
to skip any transited checking, as the trust topology is only
fully known to the KDC anyway.
The detailed background for this can be found in the bug report
and the mailing list:
https://lists.samba.org/archive/samba-technical/2019-September/thread.html#134285
https://lists.samba.org/archive/samba-technical/2019-November/thread.html#134553
http://mailman.mit.edu/pipermail/krbdev/ should also have references.
BUG: https://bugzilla.samba.org/show_bug.cgi?id=12907","@metze-samba, with this fixup check-context pass locally for me:
$ git diff
diff --git a/tests/gss/Makefile.am b/tests/gss/Makefile.am
index 213283270..86dc24132 100644
--- a/tests/gss/Makefile.am
+++ b/tests/gss/Makefile.am
@@ -85,4 +85,5 @@ EXTRA_DIST = \
        check-ntlm.in \
        check-context.in \
        ntlm-user-file.txt \
-       krb5.conf.in
+       krb5.conf.in \
+       krb5.conf.kdc.in",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,656,2019-11-21T15:54:01Z,,2021-12-14T02:32:38Z,OPEN,False,502,22,20,https://github.com/metze-samba,WIP: GSS_KRB5_CRED_NO_TRANSIT_CHECK_X/GSS_KRB5_CRED_ITERATE_ACCEPTOR_KEYTAB_X,17,[],https://github.com/heimdal/heimdal/pull/656,https://github.com/metze-samba,5,https://github.com/heimdal/heimdal/pull/656#issuecomment-558162761,"Members of Active Directory domains should just rely on their
KDCs (domain controllers) to do SID-Filtering (and name checking)
on trust boundaries, I have verified this with a modified Samba KDC
and a Windows 2012R2 DC. The Windows DC rejects invalid cross-realm tickets
with KRB5KDC_ERR_POLICY, before generating a new (service or referral)
ticket. So any service ticket is already policy checked by the KDC
even if this does not result in setting the transited_policy_checked in the ticket.
This means an accepting service can tell gss_accept_sec_context()
to skip any transited checking, as the trust topology is only
fully known to the KDC anyway.
The detailed background for this can be found in the bug report
and the mailing list:
https://lists.samba.org/archive/samba-technical/2019-September/thread.html#134285
https://lists.samba.org/archive/samba-technical/2019-November/thread.html#134553
http://mailman.mit.edu/pipermail/krbdev/ should also have references.
BUG: https://bugzilla.samba.org/show_bug.cgi?id=12907","Ok, it no longer segfaults, but we get this:
FAIL: check-context
===================
Creating database
Doing database check
Starting kdc
Test gss_acquire_cred_with_password
test_context: gss_acquire_cred_with_password: gss-code: 851968  Miscellaneous failure (see text) -- mech-code: 2529638918 Client (user1@TEST.H5L.SE) unknown
test failed
signal killing kdc
FAIL check-context (exit status: 1)",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,656,2019-11-21T15:54:01Z,,2021-12-14T02:32:38Z,OPEN,False,502,22,20,https://github.com/metze-samba,WIP: GSS_KRB5_CRED_NO_TRANSIT_CHECK_X/GSS_KRB5_CRED_ITERATE_ACCEPTOR_KEYTAB_X,17,[],https://github.com/heimdal/heimdal/pull/656,https://github.com/iboukris,6,https://github.com/heimdal/heimdal/pull/656#issuecomment-558244972,"Members of Active Directory domains should just rely on their
KDCs (domain controllers) to do SID-Filtering (and name checking)
on trust boundaries, I have verified this with a modified Samba KDC
and a Windows 2012R2 DC. The Windows DC rejects invalid cross-realm tickets
with KRB5KDC_ERR_POLICY, before generating a new (service or referral)
ticket. So any service ticket is already policy checked by the KDC
even if this does not result in setting the transited_policy_checked in the ticket.
This means an accepting service can tell gss_accept_sec_context()
to skip any transited checking, as the trust topology is only
fully known to the KDC anyway.
The detailed background for this can be found in the bug report
and the mailing list:
https://lists.samba.org/archive/samba-technical/2019-September/thread.html#134285
https://lists.samba.org/archive/samba-technical/2019-November/thread.html#134553
http://mailman.mit.edu/pipermail/krbdev/ should also have references.
BUG: https://bugzilla.samba.org/show_bug.cgi?id=12907","Ouch, that's the error I had before the fixup .. weird.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,656,2019-11-21T15:54:01Z,,2021-12-14T02:32:38Z,OPEN,False,502,22,20,https://github.com/metze-samba,WIP: GSS_KRB5_CRED_NO_TRANSIT_CHECK_X/GSS_KRB5_CRED_ITERATE_ACCEPTOR_KEYTAB_X,17,[],https://github.com/heimdal/heimdal/pull/656,https://github.com/iboukris,7,https://github.com/heimdal/heimdal/pull/656#issuecomment-560091603,"Members of Active Directory domains should just rely on their
KDCs (domain controllers) to do SID-Filtering (and name checking)
on trust boundaries, I have verified this with a modified Samba KDC
and a Windows 2012R2 DC. The Windows DC rejects invalid cross-realm tickets
with KRB5KDC_ERR_POLICY, before generating a new (service or referral)
ticket. So any service ticket is already policy checked by the KDC
even if this does not result in setting the transited_policy_checked in the ticket.
This means an accepting service can tell gss_accept_sec_context()
to skip any transited checking, as the trust topology is only
fully known to the KDC anyway.
The detailed background for this can be found in the bug report
and the mailing list:
https://lists.samba.org/archive/samba-technical/2019-September/thread.html#134285
https://lists.samba.org/archive/samba-technical/2019-November/thread.html#134553
http://mailman.mit.edu/pipermail/krbdev/ should also have references.
BUG: https://bugzilla.samba.org/show_bug.cgi?id=12907","I was able to reproduce by doing the same, ""mkdir ci-build; cd ci-build; ../configure ..."", see demo fixup at: iboukris@3d04b05",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,656,2019-11-21T15:54:01Z,,2021-12-14T02:32:38Z,OPEN,False,502,22,20,https://github.com/metze-samba,WIP: GSS_KRB5_CRED_NO_TRANSIT_CHECK_X/GSS_KRB5_CRED_ITERATE_ACCEPTOR_KEYTAB_X,17,[],https://github.com/heimdal/heimdal/pull/656,https://github.com/iboukris,8,https://github.com/heimdal/heimdal/pull/656#issuecomment-638926621,"Members of Active Directory domains should just rely on their
KDCs (domain controllers) to do SID-Filtering (and name checking)
on trust boundaries, I have verified this with a modified Samba KDC
and a Windows 2012R2 DC. The Windows DC rejects invalid cross-realm tickets
with KRB5KDC_ERR_POLICY, before generating a new (service or referral)
ticket. So any service ticket is already policy checked by the KDC
even if this does not result in setting the transited_policy_checked in the ticket.
This means an accepting service can tell gss_accept_sec_context()
to skip any transited checking, as the trust topology is only
fully known to the KDC anyway.
The detailed background for this can be found in the bug report
and the mailing list:
https://lists.samba.org/archive/samba-technical/2019-September/thread.html#134285
https://lists.samba.org/archive/samba-technical/2019-November/thread.html#134553
http://mailman.mit.edu/pipermail/krbdev/ should also have references.
BUG: https://bugzilla.samba.org/show_bug.cgi?id=12907","Hi @nicowilliams, perhaps it would make sense to use cred_store option here too, for the transited path option? I can look into it to see if it works out.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,656,2019-11-21T15:54:01Z,,2021-12-14T02:32:38Z,OPEN,False,502,22,20,https://github.com/metze-samba,WIP: GSS_KRB5_CRED_NO_TRANSIT_CHECK_X/GSS_KRB5_CRED_ITERATE_ACCEPTOR_KEYTAB_X,17,[],https://github.com/heimdal/heimdal/pull/656,https://github.com/abartlet,9,https://github.com/heimdal/heimdal/pull/656#issuecomment-990552302,"Members of Active Directory domains should just rely on their
KDCs (domain controllers) to do SID-Filtering (and name checking)
on trust boundaries, I have verified this with a modified Samba KDC
and a Windows 2012R2 DC. The Windows DC rejects invalid cross-realm tickets
with KRB5KDC_ERR_POLICY, before generating a new (service or referral)
ticket. So any service ticket is already policy checked by the KDC
even if this does not result in setting the transited_policy_checked in the ticket.
This means an accepting service can tell gss_accept_sec_context()
to skip any transited checking, as the trust topology is only
fully known to the KDC anyway.
The detailed background for this can be found in the bug report
and the mailing list:
https://lists.samba.org/archive/samba-technical/2019-September/thread.html#134285
https://lists.samba.org/archive/samba-technical/2019-November/thread.html#134553
http://mailman.mit.edu/pipermail/krbdev/ should also have references.
BUG: https://bugzilla.samba.org/show_bug.cgi?id=12907","Beyond the WIP tag, what else is needed for this to be considered for merging?
This is a set of patches we might otherwise need to carry in Samba's lorikeet-heimdal and I'm just trying to get a sense as to their prospects as we try and wrangle our upgrade.
Thanks!",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,656,2019-11-21T15:54:01Z,,2021-12-14T02:32:38Z,OPEN,False,502,22,20,https://github.com/metze-samba,WIP: GSS_KRB5_CRED_NO_TRANSIT_CHECK_X/GSS_KRB5_CRED_ITERATE_ACCEPTOR_KEYTAB_X,17,[],https://github.com/heimdal/heimdal/pull/656,https://github.com/lhoward,10,https://github.com/heimdal/heimdal/pull/656#issuecomment-990623727,"Members of Active Directory domains should just rely on their
KDCs (domain controllers) to do SID-Filtering (and name checking)
on trust boundaries, I have verified this with a modified Samba KDC
and a Windows 2012R2 DC. The Windows DC rejects invalid cross-realm tickets
with KRB5KDC_ERR_POLICY, before generating a new (service or referral)
ticket. So any service ticket is already policy checked by the KDC
even if this does not result in setting the transited_policy_checked in the ticket.
This means an accepting service can tell gss_accept_sec_context()
to skip any transited checking, as the trust topology is only
fully known to the KDC anyway.
The detailed background for this can be found in the bug report
and the mailing list:
https://lists.samba.org/archive/samba-technical/2019-September/thread.html#134285
https://lists.samba.org/archive/samba-technical/2019-November/thread.html#134553
http://mailman.mit.edu/pipermail/krbdev/ should also have references.
BUG: https://bugzilla.samba.org/show_bug.cgi?id=12907","This looks good to me, just fix a few indentation things and think about whether the libdefaults key should not use the word acceptor.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,656,2019-11-21T15:54:01Z,,2021-12-14T02:32:38Z,OPEN,False,502,22,20,https://github.com/metze-samba,WIP: GSS_KRB5_CRED_NO_TRANSIT_CHECK_X/GSS_KRB5_CRED_ITERATE_ACCEPTOR_KEYTAB_X,17,[],https://github.com/heimdal/heimdal/pull/656,https://github.com/jaltman,11,https://github.com/heimdal/heimdal/pull/656#issuecomment-991316067,"Members of Active Directory domains should just rely on their
KDCs (domain controllers) to do SID-Filtering (and name checking)
on trust boundaries, I have verified this with a modified Samba KDC
and a Windows 2012R2 DC. The Windows DC rejects invalid cross-realm tickets
with KRB5KDC_ERR_POLICY, before generating a new (service or referral)
ticket. So any service ticket is already policy checked by the KDC
even if this does not result in setting the transited_policy_checked in the ticket.
This means an accepting service can tell gss_accept_sec_context()
to skip any transited checking, as the trust topology is only
fully known to the KDC anyway.
The detailed background for this can be found in the bug report
and the mailing list:
https://lists.samba.org/archive/samba-technical/2019-September/thread.html#134285
https://lists.samba.org/archive/samba-technical/2019-November/thread.html#134553
http://mailman.mit.edu/pipermail/krbdev/ should also have references.
BUG: https://bugzilla.samba.org/show_bug.cgi?id=12907","I am opposed to the creation of a krb5.conf setting to disable transit checks in cases where the KDC has refused to set the ""transited_policy_checked"" flag in the service ticket.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,656,2019-11-21T15:54:01Z,,2021-12-14T02:32:38Z,OPEN,False,502,22,20,https://github.com/metze-samba,WIP: GSS_KRB5_CRED_NO_TRANSIT_CHECK_X/GSS_KRB5_CRED_ITERATE_ACCEPTOR_KEYTAB_X,17,[],https://github.com/heimdal/heimdal/pull/656,https://github.com/metze-samba,12,https://github.com/heimdal/heimdal/pull/656#issuecomment-991333424,"Members of Active Directory domains should just rely on their
KDCs (domain controllers) to do SID-Filtering (and name checking)
on trust boundaries, I have verified this with a modified Samba KDC
and a Windows 2012R2 DC. The Windows DC rejects invalid cross-realm tickets
with KRB5KDC_ERR_POLICY, before generating a new (service or referral)
ticket. So any service ticket is already policy checked by the KDC
even if this does not result in setting the transited_policy_checked in the ticket.
This means an accepting service can tell gss_accept_sec_context()
to skip any transited checking, as the trust topology is only
fully known to the KDC anyway.
The detailed background for this can be found in the bug report
and the mailing list:
https://lists.samba.org/archive/samba-technical/2019-September/thread.html#134285
https://lists.samba.org/archive/samba-technical/2019-November/thread.html#134553
http://mailman.mit.edu/pipermail/krbdev/ should also have references.
BUG: https://bugzilla.samba.org/show_bug.cgi?id=12907","Heimdal has the check_pac option on by default, we could just use a verified PAC as indication to skip the transited check,
that would not need any additional options. I'll just add a GSS_KRB5_CRED_REQUIRE_PAC_X option
to force krb5_rd_req_in_set_pac_check(TRUE), even if the krb5.conf sets check_pac = false.
I think that is simpler and avoids admin interaction completely.
What do you think?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,656,2019-11-21T15:54:01Z,,2021-12-14T02:32:38Z,OPEN,False,502,22,20,https://github.com/metze-samba,WIP: GSS_KRB5_CRED_NO_TRANSIT_CHECK_X/GSS_KRB5_CRED_ITERATE_ACCEPTOR_KEYTAB_X,17,[],https://github.com/heimdal/heimdal/pull/656,https://github.com/nicowilliams,13,https://github.com/heimdal/heimdal/pull/656#issuecomment-992044515,"Members of Active Directory domains should just rely on their
KDCs (domain controllers) to do SID-Filtering (and name checking)
on trust boundaries, I have verified this with a modified Samba KDC
and a Windows 2012R2 DC. The Windows DC rejects invalid cross-realm tickets
with KRB5KDC_ERR_POLICY, before generating a new (service or referral)
ticket. So any service ticket is already policy checked by the KDC
even if this does not result in setting the transited_policy_checked in the ticket.
This means an accepting service can tell gss_accept_sec_context()
to skip any transited checking, as the trust topology is only
fully known to the KDC anyway.
The detailed background for this can be found in the bug report
and the mailing list:
https://lists.samba.org/archive/samba-technical/2019-September/thread.html#134285
https://lists.samba.org/archive/samba-technical/2019-November/thread.html#134553
http://mailman.mit.edu/pipermail/krbdev/ should also have references.
BUG: https://bugzilla.samba.org/show_bug.cgi?id=12907","The Windows DC rejects invalid cross-realm tickets
with KRB5KDC_ERR_POLICY, before generating a new (service or referral)
ticket. So any service ticket is already policy checked by the KDC
even if this does not result in setting the transited_policy_checked in the ticket.

RFC4120 provides a ticket flag for this: TRANSITED-POLICY-CHECKED.  Do AD KDCs not set this ticket flag??
It is always possible to configure every possible path as trusted, therefore an option to disable transit path checking is clearly fine.  My preference would be that we have a GSS name attribute for conveying transit path, but otherwise an API option is OK.
Keep in mind that Heimdal does support automatic hierarchical trust path including short-circuit paths.
Also, if a service's REALM is an AD-hosted realm, then why not have a config option in [realms] to mark it as ""kdc always checks transit path implicitly""?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,656,2019-11-21T15:54:01Z,,2021-12-14T02:32:38Z,OPEN,False,502,22,20,https://github.com/metze-samba,WIP: GSS_KRB5_CRED_NO_TRANSIT_CHECK_X/GSS_KRB5_CRED_ITERATE_ACCEPTOR_KEYTAB_X,17,[],https://github.com/heimdal/heimdal/pull/656,https://github.com/nicowilliams,14,https://github.com/heimdal/heimdal/pull/656#issuecomment-992051215,"Members of Active Directory domains should just rely on their
KDCs (domain controllers) to do SID-Filtering (and name checking)
on trust boundaries, I have verified this with a modified Samba KDC
and a Windows 2012R2 DC. The Windows DC rejects invalid cross-realm tickets
with KRB5KDC_ERR_POLICY, before generating a new (service or referral)
ticket. So any service ticket is already policy checked by the KDC
even if this does not result in setting the transited_policy_checked in the ticket.
This means an accepting service can tell gss_accept_sec_context()
to skip any transited checking, as the trust topology is only
fully known to the KDC anyway.
The detailed background for this can be found in the bug report
and the mailing list:
https://lists.samba.org/archive/samba-technical/2019-September/thread.html#134285
https://lists.samba.org/archive/samba-technical/2019-November/thread.html#134553
http://mailman.mit.edu/pipermail/krbdev/ should also have references.
BUG: https://bugzilla.samba.org/show_bug.cgi?id=12907","Do AD KDCs not check the client name and realm?
Consider

a service in realm A that doesn't use PACs, or which uses both, the SIDs in the PAC and also the cname@CREALM, and
suppose A trusts some realm B, and
also C and other realms but not transiting through B, and
B is compromised and issues a ticket for any user @B, @C, etc., maybe even @A (though this last probably would trip loop detection, right?!)...

Will... the KDCs for A issue tickets to a possessor of a krbtgt/A@B with the claimed cname@C (etc) but with correct SIDs, or will it refuse to issue the ticket?
NOTE: Both the cname and crealm must be checked.  It's not enough to ignore the cname just because the PAC will have the sAMAccountName and UPN.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,656,2019-11-21T15:54:01Z,,2021-12-14T02:32:38Z,OPEN,False,502,22,20,https://github.com/metze-samba,WIP: GSS_KRB5_CRED_NO_TRANSIT_CHECK_X/GSS_KRB5_CRED_ITERATE_ACCEPTOR_KEYTAB_X,17,[],https://github.com/heimdal/heimdal/pull/656,https://github.com/lhoward,15,https://github.com/heimdal/heimdal/pull/656#issuecomment-992051306,"Members of Active Directory domains should just rely on their
KDCs (domain controllers) to do SID-Filtering (and name checking)
on trust boundaries, I have verified this with a modified Samba KDC
and a Windows 2012R2 DC. The Windows DC rejects invalid cross-realm tickets
with KRB5KDC_ERR_POLICY, before generating a new (service or referral)
ticket. So any service ticket is already policy checked by the KDC
even if this does not result in setting the transited_policy_checked in the ticket.
This means an accepting service can tell gss_accept_sec_context()
to skip any transited checking, as the trust topology is only
fully known to the KDC anyway.
The detailed background for this can be found in the bug report
and the mailing list:
https://lists.samba.org/archive/samba-technical/2019-September/thread.html#134285
https://lists.samba.org/archive/samba-technical/2019-November/thread.html#134553
http://mailman.mit.edu/pipermail/krbdev/ should also have references.
BUG: https://bugzilla.samba.org/show_bug.cgi?id=12907","[MS-KILE] 3.1.5.4 says:

The TRANSITED-POLICY-CHECKED flag ([RFC4120] section 2.7): KILE does not check for transited domains on servers or a KDC. Application servers MUST ignore the TRANSITED-POLICY-CHECKED flag. For details on decoding a cross-realm TGT and crealm filtering see [MS-PAC] section 4.1.2.3.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,656,2019-11-21T15:54:01Z,,2021-12-14T02:32:38Z,OPEN,False,502,22,20,https://github.com/metze-samba,WIP: GSS_KRB5_CRED_NO_TRANSIT_CHECK_X/GSS_KRB5_CRED_ITERATE_ACCEPTOR_KEYTAB_X,17,[],https://github.com/heimdal/heimdal/pull/656,https://github.com/nicowilliams,16,https://github.com/heimdal/heimdal/pull/656#issuecomment-992056310,"Members of Active Directory domains should just rely on their
KDCs (domain controllers) to do SID-Filtering (and name checking)
on trust boundaries, I have verified this with a modified Samba KDC
and a Windows 2012R2 DC. The Windows DC rejects invalid cross-realm tickets
with KRB5KDC_ERR_POLICY, before generating a new (service or referral)
ticket. So any service ticket is already policy checked by the KDC
even if this does not result in setting the transited_policy_checked in the ticket.
This means an accepting service can tell gss_accept_sec_context()
to skip any transited checking, as the trust topology is only
fully known to the KDC anyway.
The detailed background for this can be found in the bug report
and the mailing list:
https://lists.samba.org/archive/samba-technical/2019-September/thread.html#134285
https://lists.samba.org/archive/samba-technical/2019-November/thread.html#134553
http://mailman.mit.edu/pipermail/krbdev/ should also have references.
BUG: https://bugzilla.samba.org/show_bug.cgi?id=12907","So, we have a lot of questions.  Yes, we're looking at docs like https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-adts/e9a2d23c-c31e-4a6f-88a0-6646fdb51a3c and still we have questions.
Some of mine are above.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,656,2019-11-21T15:54:01Z,,2021-12-14T02:32:38Z,OPEN,False,502,22,20,https://github.com/metze-samba,WIP: GSS_KRB5_CRED_NO_TRANSIT_CHECK_X/GSS_KRB5_CRED_ITERATE_ACCEPTOR_KEYTAB_X,17,[],https://github.com/heimdal/heimdal/pull/656,https://github.com/lhoward,17,https://github.com/heimdal/heimdal/pull/656#issuecomment-993098535,"Members of Active Directory domains should just rely on their
KDCs (domain controllers) to do SID-Filtering (and name checking)
on trust boundaries, I have verified this with a modified Samba KDC
and a Windows 2012R2 DC. The Windows DC rejects invalid cross-realm tickets
with KRB5KDC_ERR_POLICY, before generating a new (service or referral)
ticket. So any service ticket is already policy checked by the KDC
even if this does not result in setting the transited_policy_checked in the ticket.
This means an accepting service can tell gss_accept_sec_context()
to skip any transited checking, as the trust topology is only
fully known to the KDC anyway.
The detailed background for this can be found in the bug report
and the mailing list:
https://lists.samba.org/archive/samba-technical/2019-September/thread.html#134285
https://lists.samba.org/archive/samba-technical/2019-November/thread.html#134553
http://mailman.mit.edu/pipermail/krbdev/ should also have references.
BUG: https://bugzilla.samba.org/show_bug.cgi?id=12907","Pasting useful info from [MS-PAC].

4.1.2.3 crealm Filtering
When decoding a cross-realm TGT, the crealm fields inside the TGT are compared to the expected name of the realm for the interrealm trust. If the names do not match the TGT, they are rejected, subject to other mitigating constraints.<32>
These constraints can include allowing fully trusted domains to supply any crealm name on the basis that it would have validated it prior to passing it along, or any other settings that are established out of band. The full set of constraints is implementation-specific.


The TGT's crealm field is compared against the realm names listed on the TDO, as specified in [MS-ADTS], corresponding to the cross-realm trust. If there is a mismatch, the TGT is rejected. TDOs marked as within the forest pass all crealm names through. TDOs marked as forest transitive indicate that the server will only accept crealm names if it is a name claimed by the forest on the TDO. If the TDO used for the cross-realm TGT has neither indicator set, the server checks if the fully qualified domain name (FQDN) (2) matches the FQDN (2) of any domain in the server's forest; if so, the TGT is accepted. Finally, if the crealm field matches the FQDN (2) of the TDO, then it is accepted.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,657,2019-11-26T19:34:59Z,2019-11-26T19:38:18Z,2021-07-30T11:32:59Z,MERGED,True,2,4,2,https://github.com/elric1,Kx509 bugs1,2,[],https://github.com/heimdal/heimdal/pull/657,https://github.com/elric1,1,https://github.com/heimdal/heimdal/pull/657,Couple of quick bugs that I found in the kx509 code.,Couple of quick bugs that I found in the kx509 code.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,658,2019-11-26T20:06:38Z,,2021-08-06T03:12:36Z,OPEN,False,270,201,3,https://github.com/elric1,"Improve encoding of krb5_{,un}parse_principal().",1,[],https://github.com/heimdal/heimdal/pull/658,https://github.com/elric1,1,https://github.com/heimdal/heimdal/pull/658,"By default, we encode all unprintable characaters as well as the
set specified in RFC1964's section on export names.  We use unvis(3)
when parsing but open-code the unparser.  unvis(3) needed to be
slightly corrected with a macro and svis(3) would have required a
much less pleasant macro.  The out text format is almost compatible
with unvis(3) but spaces are quoted as ""\ "" rather than ""\s"".  This
is specified in RFC 1964.
We define a new constant KRB5_PRINCIPAL_UNPARSE_EXPORT_NAME which
if passed in as a flag will preserve the existing behaviour.","By default, we encode all unprintable characaters as well as the
set specified in RFC1964's section on export names.  We use unvis(3)
when parsing but open-code the unparser.  unvis(3) needed to be
slightly corrected with a macro and svis(3) would have required a
much less pleasant macro.  The out text format is almost compatible
with unvis(3) but spaces are quoted as ""\ "" rather than ""\s"".  This
is specified in RFC 1964.
We define a new constant KRB5_PRINCIPAL_UNPARSE_EXPORT_NAME which
if passed in as a flag will preserve the existing behaviour.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,658,2019-11-26T20:06:38Z,,2021-08-06T03:12:36Z,OPEN,False,270,201,3,https://github.com/elric1,"Improve encoding of krb5_{,un}parse_principal().",1,[],https://github.com/heimdal/heimdal/pull/658,https://github.com/vdukhovni,2,https://github.com/heimdal/heimdal/pull/658#issuecomment-717461162,"By default, we encode all unprintable characaters as well as the
set specified in RFC1964's section on export names.  We use unvis(3)
when parsing but open-code the unparser.  unvis(3) needed to be
slightly corrected with a macro and svis(3) would have required a
much less pleasant macro.  The out text format is almost compatible
with unvis(3) but spaces are quoted as ""\ "" rather than ""\s"".  This
is specified in RFC 1964.
We define a new constant KRB5_PRINCIPAL_UNPARSE_EXPORT_NAME which
if passed in as a flag will preserve the existing behaviour.","Is this PR still something we need to do?
cc: @nicowilliams",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,658,2019-11-26T20:06:38Z,,2021-08-06T03:12:36Z,OPEN,False,270,201,3,https://github.com/elric1,"Improve encoding of krb5_{,un}parse_principal().",1,[],https://github.com/heimdal/heimdal/pull/658,https://github.com/elric1,3,https://github.com/heimdal/heimdal/pull/658#issuecomment-717560553,"By default, we encode all unprintable characaters as well as the
set specified in RFC1964's section on export names.  We use unvis(3)
when parsing but open-code the unparser.  unvis(3) needed to be
slightly corrected with a macro and svis(3) would have required a
much less pleasant macro.  The out text format is almost compatible
with unvis(3) but spaces are quoted as ""\ "" rather than ""\s"".  This
is specified in RFC 1964.
We define a new constant KRB5_PRINCIPAL_UNPARSE_EXPORT_NAME which
if passed in as a flag will preserve the existing behaviour.","I think that we should consider it. We currently don't quote many characters which may spam logs with unprintables, IIRC, which is what we're trying to fix here.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,663,2019-12-10T09:22:50Z,2019-12-10T10:24:04Z,2019-12-10T10:26:52Z,MERGED,True,64,22,2,https://github.com/iboukris,CVE-2019-14870: Client attributes not checked in protocol-transition request (S4U2Self),3,"['bug', 'CVE']",https://github.com/heimdal/heimdal/pull/663,https://github.com/iboukris,1,https://github.com/heimdal/heimdal/pull/663,Samba advisory: https://www.samba.org/samba/security/CVE-2019-14870.html,Samba advisory: https://www.samba.org/samba/security/CVE-2019-14870.html,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,664,2019-12-10T09:24:40Z,2019-12-10T10:25:20Z,2019-12-10T10:26:30Z,MERGED,True,60,22,2,https://github.com/iboukris,CVE-2019-14870: Port of PR #663 to heimdal-7-1 branch,3,"['bug', 'CVE']",https://github.com/heimdal/heimdal/pull/664,https://github.com/iboukris,1,https://github.com/heimdal/heimdal/pull/664,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,664,2019-12-10T09:24:40Z,2019-12-10T10:25:20Z,2019-12-10T10:26:30Z,MERGED,True,60,22,2,https://github.com/iboukris,CVE-2019-14870: Port of PR #663 to heimdal-7-1 branch,3,"['bug', 'CVE']",https://github.com/heimdal/heimdal/pull/664,https://github.com/coveralls,2,https://github.com/heimdal/heimdal/pull/664#issuecomment-563966867,,Coverage remained the same at 0.0% when pulling cdc650e on iboukris:nd-upstream-7-1-branch into f000d70 on heimdal:heimdal-7-1-branch.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,665,2019-12-10T23:38:56Z,2019-12-11T04:27:59Z,2019-12-11T04:27:59Z,MERGED,True,528,425,10,https://github.com/nicowilliams,Update bx509d to log the new way,4,[],https://github.com/heimdal/heimdal/pull/665,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/665,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,666,2019-12-11T22:48:05Z,2019-12-12T02:32:03Z,2019-12-12T02:32:03Z,MERGED,True,410,247,11,https://github.com/nicowilliams,kdc: Modernize kx509 logging too,2,[],https://github.com/heimdal/heimdal/pull/666,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/666,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,668,2019-12-26T08:57:21Z,2020-02-04T06:28:36Z,2020-02-04T06:28:36Z,MERGED,True,7187,1616,104,https://github.com/lhoward,NegoEx integration branch,19,[],https://github.com/heimdal/heimdal/pull/668,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/668,"Mechanism glue and SPNEGO fixes; NegoEx implementation.
NegoEx is a pseudo-mechanism that is negotiated by SPNEGO, which has simpler and well defined negotiation protection semantics, has considerably improved interoperability with Windows SSPs, and most importantly permits the exchange of arbitrary metadata before committing to an authentication mechanism. This is very useful, for example, for discovering trust anchors. The NegoEx implementation was initially written by me for MIT Kerberos back into 2011, however I only re-licensed it under a BSD/MIT license a year ago, and it has only recently been merged. @greghudson simplified and rewrote much of it, replacing casting-on-the-wire with marshalling code and catching several edge cases. The implementation here is the MIT one, ported to Heimdal.
Sundry fixes:

Some NTLM fixes to pass tests and support resetting crypto state in SPNEGO
Make mechanism entry points that are optional truly optional (do not require a symbol)
Use TAILQ instead of SLIST in mechglue so that mechanisms are ordered correctly

The following Apple patches are ingested:

SPNEGO implementation
enhanced mechglue logging
channel binding helpers
gss_cred_hold()
gss_iter_cred()
gss_cred_label()
buffer, name and credential helper APIs
mechglue plugins for credential replacement

Not all of the Apple changes are necessary but if we are ever to synchronise with their krb5 and ntlm mechanisms, they will be useful. On the other hand, as many of the helpers (e.g. the channel binding APIs) have no existing consumer outside their mechanism implementations, we might avoid them unless we plan to eventually merge Apple's krb5 mechanism.
The commits are ordered such that it should be possible to drop those corresponding to undesired functionality. Note however that new mechanisms may take advantage of some of these helpers, e.g. I have used some in SAnon.","Mechanism glue and SPNEGO fixes; NegoEx implementation.
NegoEx is a pseudo-mechanism that is negotiated by SPNEGO, which has simpler and well defined negotiation protection semantics, has considerably improved interoperability with Windows SSPs, and most importantly permits the exchange of arbitrary metadata before committing to an authentication mechanism. This is very useful, for example, for discovering trust anchors. The NegoEx implementation was initially written by me for MIT Kerberos back into 2011, however I only re-licensed it under a BSD/MIT license a year ago, and it has only recently been merged. @greghudson simplified and rewrote much of it, replacing casting-on-the-wire with marshalling code and catching several edge cases. The implementation here is the MIT one, ported to Heimdal.
Sundry fixes:

Some NTLM fixes to pass tests and support resetting crypto state in SPNEGO
Make mechanism entry points that are optional truly optional (do not require a symbol)
Use TAILQ instead of SLIST in mechglue so that mechanisms are ordered correctly

The following Apple patches are ingested:

SPNEGO implementation
enhanced mechglue logging
channel binding helpers
gss_cred_hold()
gss_iter_cred()
gss_cred_label()
buffer, name and credential helper APIs
mechglue plugins for credential replacement

Not all of the Apple changes are necessary but if we are ever to synchronise with their krb5 and ntlm mechanisms, they will be useful. On the other hand, as many of the helpers (e.g. the channel binding APIs) have no existing consumer outside their mechanism implementations, we might avoid them unless we plan to eventually merge Apple's krb5 mechanism.
The commits are ordered such that it should be possible to drop those corresponding to undesired functionality. Note however that new mechanisms may take advantage of some of these helpers, e.g. I have used some in SAnon.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,668,2019-12-26T08:57:21Z,2020-02-04T06:28:36Z,2020-02-04T06:28:36Z,MERGED,True,7187,1616,104,https://github.com/lhoward,NegoEx integration branch,19,[],https://github.com/heimdal/heimdal/pull/668,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/668#issuecomment-581759761,"Mechanism glue and SPNEGO fixes; NegoEx implementation.
NegoEx is a pseudo-mechanism that is negotiated by SPNEGO, which has simpler and well defined negotiation protection semantics, has considerably improved interoperability with Windows SSPs, and most importantly permits the exchange of arbitrary metadata before committing to an authentication mechanism. This is very useful, for example, for discovering trust anchors. The NegoEx implementation was initially written by me for MIT Kerberos back into 2011, however I only re-licensed it under a BSD/MIT license a year ago, and it has only recently been merged. @greghudson simplified and rewrote much of it, replacing casting-on-the-wire with marshalling code and catching several edge cases. The implementation here is the MIT one, ported to Heimdal.
Sundry fixes:

Some NTLM fixes to pass tests and support resetting crypto state in SPNEGO
Make mechanism entry points that are optional truly optional (do not require a symbol)
Use TAILQ instead of SLIST in mechglue so that mechanisms are ordered correctly

The following Apple patches are ingested:

SPNEGO implementation
enhanced mechglue logging
channel binding helpers
gss_cred_hold()
gss_iter_cred()
gss_cred_label()
buffer, name and credential helper APIs
mechglue plugins for credential replacement

Not all of the Apple changes are necessary but if we are ever to synchronise with their krb5 and ntlm mechanisms, they will be useful. On the other hand, as many of the helpers (e.g. the channel binding APIs) have no existing consumer outside their mechanism implementations, we might avoid them unless we plan to eventually merge Apple's krb5 mechanism.
The commits are ordered such that it should be possible to drop those corresponding to undesired functionality. Note however that new mechanisms may take advantage of some of these helpers, e.g. I have used some in SAnon.",Reviewed by @nicowilliams,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,669,2019-12-28T05:54:23Z,2020-02-05T00:58:14Z,2020-02-05T00:58:14Z,CLOSED,False,285,469,56,https://github.com/lhoward,TAILQ in mechglue,2,[],https://github.com/heimdal/heimdal/pull/669,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/669,Use TAILQ instead of SLIST in mechanism glue to preserve ordering of mechanism configuration file and desired mechanism OID sets. Otherwise the order was being inverted by virtue of entries being added to the head of the list.,Use TAILQ instead of SLIST in mechanism glue to preserve ordering of mechanism configuration file and desired mechanism OID sets. Otherwise the order was being inverted by virtue of entries being added to the head of the list.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,669,2019-12-28T05:54:23Z,2020-02-05T00:58:14Z,2020-02-05T00:58:14Z,CLOSED,False,285,469,56,https://github.com/lhoward,TAILQ in mechglue,2,[],https://github.com/heimdal/heimdal/pull/669,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/669#issuecomment-582190770,Use TAILQ instead of SLIST in mechanism glue to preserve ordering of mechanism configuration file and desired mechanism OID sets. Otherwise the order was being inverted by virtue of entries being added to the head of the list.,Merged in NegoEx patch.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,670,2019-12-30T13:46:55Z,2020-04-26T04:26:47Z,2020-04-26T04:26:47Z,CLOSED,False,11986,31,72,https://github.com/lhoward,Implementation of draft-howard-gss-sanon,2,['feature request'],https://github.com/heimdal/heimdal/pull/670,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/670,"Add support for SAnon, a simple key agreement protocol that provides no authentication of initiator or acceptor using x25519 ECDH key exchange. More information can be found in the accompanying Internet Draft.","Add support for SAnon, a simple key agreement protocol that provides no authentication of initiator or acceptor using x25519 ECDH key exchange. More information can be found in the accompanying Internet Draft.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,670,2019-12-30T13:46:55Z,2020-04-26T04:26:47Z,2020-04-26T04:26:47Z,CLOSED,False,11986,31,72,https://github.com/lhoward,Implementation of draft-howard-gss-sanon,2,['feature request'],https://github.com/heimdal/heimdal/pull/670,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/670#issuecomment-612657069,"Add support for SAnon, a simple key agreement protocol that provides no authentication of initiator or acceptor using x25519 ECDH key exchange. More information can be found in the accompanying Internet Draft.","Can we move the ed25519 implementation to lib/hcrypto?  I need it for the JWT code...  I can always move it myself later, so feel free not to.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,670,2019-12-30T13:46:55Z,2020-04-26T04:26:47Z,2020-04-26T04:26:47Z,CLOSED,False,11986,31,72,https://github.com/lhoward,Implementation of draft-howard-gss-sanon,2,['feature request'],https://github.com/heimdal/heimdal/pull/670,https://github.com/lhoward,3,https://github.com/heimdal/heimdal/pull/670#issuecomment-612685902,"Add support for SAnon, a simple key agreement protocol that provides no authentication of initiator or acceptor using x25519 ECDH key exchange. More information can be found in the accompanying Internet Draft.","Can we move the ed25519 implementation to lib/hcrypto? I need it for the JWT code... I can always move it myself later, so feel free not to.

Can do a simple move, but then also thought – are we then obligated to go down the rabbit warren of matching the OpenSSL APIs for this?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,670,2019-12-30T13:46:55Z,2020-04-26T04:26:47Z,2020-04-26T04:26:47Z,CLOSED,False,11986,31,72,https://github.com/lhoward,Implementation of draft-howard-gss-sanon,2,['feature request'],https://github.com/heimdal/heimdal/pull/670,https://github.com/nicowilliams,4,https://github.com/heimdal/heimdal/pull/670#issuecomment-612691511,"Add support for SAnon, a simple key agreement protocol that provides no authentication of initiator or acceptor using x25519 ECDH key exchange. More information can be found in the accompanying Internet Draft.","Can we move the ed25519 implementation to lib/hcrypto? I need it for the JWT code... I can always move it myself later, so feel free not to.



Can do a simple move, but then also thought – are we then obligated to go down the rabbit warren of matching the OpenSSL APIs for this?

Nothing would so obligate us.  It'd be nice to have OpenSSL-equivalent PK APIs, but that's a larger project.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,670,2019-12-30T13:46:55Z,2020-04-26T04:26:47Z,2020-04-26T04:26:47Z,CLOSED,False,11986,31,72,https://github.com/lhoward,Implementation of draft-howard-gss-sanon,2,['feature request'],https://github.com/heimdal/heimdal/pull/670,https://github.com/nicowilliams,5,https://github.com/heimdal/heimdal/pull/670#issuecomment-613000902,"Add support for SAnon, a simple key agreement protocol that provides no authentication of initiator or acceptor using x25519 ECDH key exchange. More information can be found in the accompanying Internet Draft.","Maybe we could tweak the krb5 exported interprocess context token format somewhat to make it easy to create one here and then import it with gss_import_sec_context(), then use a proper gss_ctx_id_t instead of an auth_context.  That seems like a cleaner interface, and then we'll have no need whatsoever for a krb5_context in SAnon.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,670,2019-12-30T13:46:55Z,2020-04-26T04:26:47Z,2020-04-26T04:26:47Z,CLOSED,False,11986,31,72,https://github.com/lhoward,Implementation of draft-howard-gss-sanon,2,['feature request'],https://github.com/heimdal/heimdal/pull/670,https://github.com/lhoward,6,https://github.com/heimdal/heimdal/pull/670#issuecomment-613127014,"Add support for SAnon, a simple key agreement protocol that provides no authentication of initiator or acceptor using x25519 ECDH key exchange. More information can be found in the accompanying Internet Draft.","Maybe we could tweak the krb5 exported interprocess context token format somewhat to make it easy to create one here and then import it with gss_import_sec_context(), then use a proper gss_ctx_id_t instead of an auth_context. That seems like a cleaner interface, and then we'll have no need whatsoever for a krb5_context in SAnon.

I was going to suggest a gss_krb5_lucid_context_version_t as used by NFSv4 but that is export-only. I agree it's a cleaner interface. Let me look at the implementation cost.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,670,2019-12-30T13:46:55Z,2020-04-26T04:26:47Z,2020-04-26T04:26:47Z,CLOSED,False,11986,31,72,https://github.com/lhoward,Implementation of draft-howard-gss-sanon,2,['feature request'],https://github.com/heimdal/heimdal/pull/670,https://github.com/nicowilliams,7,https://github.com/heimdal/heimdal/pull/670#issuecomment-613134072,"Add support for SAnon, a simple key agreement protocol that provides no authentication of initiator or acceptor using x25519 ECDH key exchange. More information can be found in the accompanying Internet Draft.","I thought about the lucid thing, but you'll note we don't have the import side for that...",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,670,2019-12-30T13:46:55Z,2020-04-26T04:26:47Z,2020-04-26T04:26:47Z,CLOSED,False,11986,31,72,https://github.com/lhoward,Implementation of draft-howard-gss-sanon,2,['feature request'],https://github.com/heimdal/heimdal/pull/670,https://github.com/lhoward,8,https://github.com/heimdal/heimdal/pull/670#issuecomment-613195455,"Add support for SAnon, a simple key agreement protocol that provides no authentication of initiator or acceptor using x25519 ECDH key exchange. More information can be found in the accompanying Internet Draft.","I thought about the lucid thing, but you'll note we don't have the import side for that...

Implemented!",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,670,2019-12-30T13:46:55Z,2020-04-26T04:26:47Z,2020-04-26T04:26:47Z,CLOSED,False,11986,31,72,https://github.com/lhoward,Implementation of draft-howard-gss-sanon,2,['feature request'],https://github.com/heimdal/heimdal/pull/670,https://github.com/lhoward,9,https://github.com/heimdal/heimdal/pull/670#issuecomment-613325449,"Add support for SAnon, a simple key agreement protocol that provides no authentication of initiator or acceptor using x25519 ECDH key exchange. More information can be found in the accompanying Internet Draft.","I also added a bit of a hack for Windows interoperability. I didn't want to change the protocol so, in order to convey Windows-specific feature requests (e.g. GSS_C_DCE_STYLE), we stuff those flags in the NegoEx metadata. Here's the new draft text:
   The initiator metadata, if present, contains a set of GSS-API flags
   encoded as a 4 byte little endian integer.  This is used to convey to
   the acceptor any Windows-specific GSS-API flags (see [RFC4757]
   Section 7.1).  Other GSS-API flags MUST NOT be present in the
   metadata.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,670,2019-12-30T13:46:55Z,2020-04-26T04:26:47Z,2020-04-26T04:26:47Z,CLOSED,False,11986,31,72,https://github.com/lhoward,Implementation of draft-howard-gss-sanon,2,['feature request'],https://github.com/heimdal/heimdal/pull/670,https://github.com/lhoward,10,https://github.com/heimdal/heimdal/pull/670#issuecomment-613348980,"Add support for SAnon, a simple key agreement protocol that provides no authentication of initiator or acceptor using x25519 ECDH key exchange. More information can be found in the accompanying Internet Draft.","So, gss_set_sec_context_option(GSS_KRB5_IMPORT_RFC4121_CONTEXT_X) allows you to get back a gss_ctx_id_t that you can use for RFC4121 message protection/PRF services, given an arbitrary session key. It's useful for composing with mechanisms such as SAnon.
The input buffer is formatted as follows:
uint8_t is_initiator;
uint32_t gss_flags;
int32_t enctype;
uint8_t session_key[0];

The session key length is determined from the encryption type.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,670,2019-12-30T13:46:55Z,2020-04-26T04:26:47Z,2020-04-26T04:26:47Z,CLOSED,False,11986,31,72,https://github.com/lhoward,Implementation of draft-howard-gss-sanon,2,['feature request'],https://github.com/heimdal/heimdal/pull/670,https://github.com/lhoward,11,https://github.com/heimdal/heimdal/pull/670#issuecomment-613928818,"Add support for SAnon, a simple key agreement protocol that provides no authentication of initiator or acceptor using x25519 ECDH key exchange. More information can be found in the accompanying Internet Draft.","OK, I think the code is in pretty good shape, assuming no major changes after IETF review of the protocol spec. The things that are a bit controversial protocol wise are:

allowing SAnon to be requested without GSS_C_ANON_FLAG by using an anonymous initiator credential or target name
allowing well known anonymous name in GSS_C_NT_USER_NAME as equivalent to GSS_C_NT_ANONYMOUS
RFC4757 extended GSS flags support for Windows interoperability (these are tunnelled in NegoEx metadata rather than being part of the protocol proper)

I believe there is merit in these.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,670,2019-12-30T13:46:55Z,2020-04-26T04:26:47Z,2020-04-26T04:26:47Z,CLOSED,False,11986,31,72,https://github.com/lhoward,Implementation of draft-howard-gss-sanon,2,['feature request'],https://github.com/heimdal/heimdal/pull/670,https://github.com/nicowilliams,12,https://github.com/heimdal/heimdal/pull/670#issuecomment-614341207,"Add support for SAnon, a simple key agreement protocol that provides no authentication of initiator or acceptor using x25519 ECDH key exchange. More information can be found in the accompanying Internet Draft.","I thought about the lucid thing, but you'll note we don't have the import side for that...



Implemented!

Excellent, now we can test that too.
I had no idea that gss_set_sec_context_option() could allocate a context!  Nice!",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,670,2019-12-30T13:46:55Z,2020-04-26T04:26:47Z,2020-04-26T04:26:47Z,CLOSED,False,11986,31,72,https://github.com/lhoward,Implementation of draft-howard-gss-sanon,2,['feature request'],https://github.com/heimdal/heimdal/pull/670,https://github.com/lhoward,13,https://github.com/heimdal/heimdal/pull/670#issuecomment-614341540,"Add support for SAnon, a simple key agreement protocol that provides no authentication of initiator or acceptor using x25519 ECDH key exchange. More information can be found in the accompanying Internet Draft.","I thought about the lucid thing, but you'll note we don't have the import side for that...



Implemented!

Excellent, now we can test that too.
I had no idea that gss_set_sec_context_option() could allocate a context! Nice!

You can thank draft-engert-ggf-gss-extensions-00.txt for that ;)",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,670,2019-12-30T13:46:55Z,2020-04-26T04:26:47Z,2020-04-26T04:26:47Z,CLOSED,False,11986,31,72,https://github.com/lhoward,Implementation of draft-howard-gss-sanon,2,['feature request'],https://github.com/heimdal/heimdal/pull/670,https://github.com/lhoward,14,https://github.com/heimdal/heimdal/pull/670#issuecomment-614342031,"Add support for SAnon, a simple key agreement protocol that provides no authentication of initiator or acceptor using x25519 ECDH key exchange. More information can be found in the accompanying Internet Draft.","BTW, that's the one thing I'm a bit iffy about – gss_set_sec_context_option() could be another way to handle GSS_C_DCE_STYLE by having the acceptor create a context for use by DCE RPC – then, we wouldn't have to send the flag from the initiator. SSPI does support this. But, it would mean changing the existing DCE RPC GSS-API implementation.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,670,2019-12-30T13:46:55Z,2020-04-26T04:26:47Z,2020-04-26T04:26:47Z,CLOSED,False,11986,31,72,https://github.com/lhoward,Implementation of draft-howard-gss-sanon,2,['feature request'],https://github.com/heimdal/heimdal/pull/670,https://github.com/nicowilliams,15,https://github.com/heimdal/heimdal/pull/670#issuecomment-619479803,"Add support for SAnon, a simple key agreement protocol that provides no authentication of initiator or acceptor using x25519 ECDH key exchange. More information can be found in the accompanying Internet Draft.","Merged via 20f9b2b..5057d04 (beda11a, 4a7eb74, 5057d04).  I split out the hcrypto X25519 bits into a separate commit, and fixed up some things while chatting with @lhoward (who reviewed the changes).",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,671,2020-01-10T18:17:43Z,2020-03-06T00:06:09Z,2020-03-06T00:06:09Z,CLOSED,False,33,26,7,https://github.com/dariaphoebe,Fix some issues found by coverity,8,"['bug', 'master']",https://github.com/heimdal/heimdal/pull/671,https://github.com/dariaphoebe,1,https://github.com/heimdal/heimdal/pull/671,The AuriStor coverity instance hasn't been able to build for a while; These fixes are for some new issues which have since appeared.,The AuriStor coverity instance hasn't been able to build for a while; These fixes are for some new issues which have since appeared.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,671,2020-01-10T18:17:43Z,2020-03-06T00:06:09Z,2020-03-06T00:06:09Z,CLOSED,False,33,26,7,https://github.com/dariaphoebe,Fix some issues found by coverity,8,"['bug', 'master']",https://github.com/heimdal/heimdal/pull/671,https://github.com/dariaphoebe,2,https://github.com/heimdal/heimdal/pull/671#issuecomment-594887713,The AuriStor coverity instance hasn't been able to build for a while; These fixes are for some new issues which have since appeared.,poke poke. merge this.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,671,2020-01-10T18:17:43Z,2020-03-06T00:06:09Z,2020-03-06T00:06:09Z,CLOSED,False,33,26,7,https://github.com/dariaphoebe,Fix some issues found by coverity,8,"['bug', 'master']",https://github.com/heimdal/heimdal/pull/671,https://github.com/dariaphoebe,3,https://github.com/heimdal/heimdal/pull/671#issuecomment-595507331,The AuriStor coverity instance hasn't been able to build for a while; These fixes are for some new issues which have since appeared.,"closing, revised PR in #679",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,673,2020-01-29T10:37:02Z,2020-02-01T01:32:29Z,2020-02-01T01:32:30Z,CLOSED,False,3,3,1,https://github.com/rodwiddowson,Windows: Fix type cast warning.,2,[],https://github.com/heimdal/heimdal/pull/673,https://github.com/rodwiddowson,1,https://github.com/heimdal/heimdal/pull/673,"Since at least SDK V6.1 HCRYPTPROV has been specified as ULONG_PTR
this means that comparing one with NULL causes a cast warning.
Fix this by introducing an explicit NULL_HCRYPTPROV.","Since at least SDK V6.1 HCRYPTPROV has been specified as ULONG_PTR
this means that comparing one with NULL causes a cast warning.
Fix this by introducing an explicit NULL_HCRYPTPROV.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,673,2020-01-29T10:37:02Z,2020-02-01T01:32:29Z,2020-02-01T01:32:30Z,CLOSED,False,3,3,1,https://github.com/rodwiddowson,Windows: Fix type cast warning.,2,[],https://github.com/heimdal/heimdal/pull/673,https://github.com/rodwiddowson,2,https://github.com/heimdal/heimdal/pull/673#issuecomment-580694926,"Since at least SDK V6.1 HCRYPTPROV has been specified as ULONG_PTR
this means that comparing one with NULL causes a cast warning.
Fix this by introducing an explicit NULL_HCRYPTPROV.","Just so's you know...
I also toyed with just saying 0 (ungarnished), but I like the casting since that makes is clear we are dealing with a type.
Also since it was H (for handle) I liked NULL not 0 (and don't even get me started on 32 bit handles and 64 bit handles).
As always, stylistic comments on submissions welcome.  I borrow your product so the least I can do is to make your life easy.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,673,2020-01-29T10:37:02Z,2020-02-01T01:32:29Z,2020-02-01T01:32:30Z,CLOSED,False,3,3,1,https://github.com/rodwiddowson,Windows: Fix type cast warning.,2,[],https://github.com/heimdal/heimdal/pull/673,https://github.com/lhoward,3,https://github.com/heimdal/heimdal/pull/673#issuecomment-580695776,"Since at least SDK V6.1 HCRYPTPROV has been specified as ULONG_PTR
this means that comparing one with NULL causes a cast warning.
Fix this by introducing an explicit NULL_HCRYPTPROV.","Ah yes, all good points @rodwiddowson! I agree it's down to aesthetics, myself I prefer to use 0 for ULONG_PTR and uintptr_t, and NULL for PVOID and void *. To me a handle is logically closer to a file descriptor than a pointer, even if it may actually be a pointer.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,673,2020-01-29T10:37:02Z,2020-02-01T01:32:29Z,2020-02-01T01:32:30Z,CLOSED,False,3,3,1,https://github.com/rodwiddowson,Windows: Fix type cast warning.,2,[],https://github.com/heimdal/heimdal/pull/673,https://github.com/lhoward,4,https://github.com/heimdal/heimdal/pull/673#issuecomment-580696209,"Since at least SDK V6.1 HCRYPTPROV has been specified as ULONG_PTR
this means that comparing one with NULL causes a cast warning.
Fix this by introducing an explicit NULL_HCRYPTPROV.",I will merge tomorrow when I'm back at my development machine.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,673,2020-01-29T10:37:02Z,2020-02-01T01:32:29Z,2020-02-01T01:32:30Z,CLOSED,False,3,3,1,https://github.com/rodwiddowson,Windows: Fix type cast warning.,2,[],https://github.com/heimdal/heimdal/pull/673,https://github.com/rodwiddowson,5,https://github.com/heimdal/heimdal/pull/673#issuecomment-580697139,"Since at least SDK V6.1 HCRYPTPROV has been specified as ULONG_PTR
this means that comparing one with NULL causes a cast warning.
Fix this by introducing an explicit NULL_HCRYPTPROV.",@lhoward Noted.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,673,2020-01-29T10:37:02Z,2020-02-01T01:32:29Z,2020-02-01T01:32:30Z,CLOSED,False,3,3,1,https://github.com/rodwiddowson,Windows: Fix type cast warning.,2,[],https://github.com/heimdal/heimdal/pull/673,https://github.com/lhoward,6,https://github.com/heimdal/heimdal/pull/673#issuecomment-580975744,"Since at least SDK V6.1 HCRYPTPROV has been specified as ULONG_PTR
this means that comparing one with NULL causes a cast warning.
Fix this by introducing an explicit NULL_HCRYPTPROV.",Merged into master,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,674,2020-02-10T19:08:03Z,2020-02-11T07:49:37Z,2020-02-11T07:49:37Z,MERGED,True,10,0,2,https://github.com/iboukris,tgs-req: strip forwardable and proxiable if the server is disallowed,1,[],https://github.com/heimdal/heimdal/pull/674,https://github.com/iboukris,1,https://github.com/heimdal/heimdal/pull/674,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,675,2020-02-10T19:09:42Z,2020-02-11T07:51:16Z,2020-02-11T07:51:17Z,MERGED,True,10,0,2,https://github.com/iboukris,7-1-branch: tgs-req: strip forwardable and proxiable if the server is disallowed,1,[],https://github.com/heimdal/heimdal/pull/675,https://github.com/iboukris,1,https://github.com/heimdal/heimdal/pull/675,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,675,2020-02-10T19:09:42Z,2020-02-11T07:51:16Z,2020-02-11T07:51:17Z,MERGED,True,10,0,2,https://github.com/iboukris,7-1-branch: tgs-req: strip forwardable and proxiable if the server is disallowed,1,[],https://github.com/heimdal/heimdal/pull/675,https://github.com/coveralls,2,https://github.com/heimdal/heimdal/pull/675#issuecomment-584321816,,Coverage remained the same at 0.0% when pulling f56b9ef on iboukris:nd-server-upstream-7-1-branch into 26dce4a on heimdal:heimdal-7-1-branch.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,675,2020-02-10T19:09:42Z,2020-02-11T07:51:16Z,2020-02-11T07:51:17Z,MERGED,True,10,0,2,https://github.com/iboukris,7-1-branch: tgs-req: strip forwardable and proxiable if the server is disallowed,1,[],https://github.com/heimdal/heimdal/pull/675,https://github.com/iboukris,3,https://github.com/heimdal/heimdal/pull/675#issuecomment-584337368,,The CI failure seem unrelated.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,676,2020-02-17T21:27:34Z,,2021-03-11T03:26:50Z,OPEN,False,89,0,2,https://github.com/JStewart-QSFT,Add in the ability to query the cert's RFC822 Name.,1,[],https://github.com/heimdal/heimdal/pull/676,https://github.com/JStewart-QSFT,1,https://github.com/heimdal/heimdal/pull/676,Also add in the ability to find any heim_ia5_string fields in the certificate's subjectAlternativeName.,Also add in the ability to find any heim_ia5_string fields in the certificate's subjectAlternativeName.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,676,2020-02-17T21:27:34Z,,2021-03-11T03:26:50Z,OPEN,False,89,0,2,https://github.com/JStewart-QSFT,Add in the ability to query the cert's RFC822 Name.,1,[],https://github.com/heimdal/heimdal/pull/676,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/676#issuecomment-589286145,Also add in the ability to find any heim_ia5_string fields in the certificate's subjectAlternativeName.,"Where will these be used?  There's already a SAN iterator for CSRs, hx509_request_get_san() -- maybe we need a certificate SAN iterator too.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,677,2020-02-20T21:48:59Z,2020-04-23T23:24:34Z,2020-04-23T23:24:34Z,CLOSED,False,2343,717,42,https://github.com/nicowilliams,Improve ccache collections -- stop making new unique ccaches in them,11,[],https://github.com/heimdal/heimdal/pull/677,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/677,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,678,2020-03-01T03:46:07Z,2020-03-02T16:56:45Z,2020-03-02T16:57:03Z,CLOSED,False,0,0,0,https://github.com/nicowilliams,Move some lib/krb5/ infrastructure bits to lib/base/,0,[],https://github.com/heimdal/heimdal/pull/678,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/678,"This PR moves configuration file, path expansion, plugin loading and running, logging, and warning, from libkrb5 to libheimbase.
The motivation for this is three-fold:

to keep the GSS-API mechglue more generic,
to make moving bx509d out of kdc/ possible along with moving PKIX infrastructure in kdc/ common to kx509 and bx509d out to lib/hx509,
and to enable future work in Heimdal that is not Kerberos-specific.

I.e., to let non-Kerberos parts of Heimdal have config files (including support for plists on OS X and the registry on Windows), plugins, and logging just like Kerberos in Heimdal.
The changes are very mechanical: rename files, s/krb5_/heim_/g, add lib/base/context.c, create krb5 API wrappers for moved APIs, and build-system support.
The log comment for the main commit proposes that reviewers make use of --word-diff=color when reviewing changes to the renamed files (which were renamed in a separate, rename-only commit, except for heim_err.et, which only had a single-line change and git is able to follow its move).  Thus, this:
 52 files changed, 3938 insertions(+), 2011 deletions(-)

is not as big as it seems.  If you review the moved files with --word-diff=color and the rest as usual, then this is a much smaller review than the git log -n1 --stat output would imply.
(The commits from the subsidiaries-rebased branch, aka PR #677, are included, and have been reviewed separately by @gstrauss -- I expect to push those on Monday or Tuesday.)","This PR moves configuration file, path expansion, plugin loading and running, logging, and warning, from libkrb5 to libheimbase.
The motivation for this is three-fold:

to keep the GSS-API mechglue more generic,
to make moving bx509d out of kdc/ possible along with moving PKIX infrastructure in kdc/ common to kx509 and bx509d out to lib/hx509,
and to enable future work in Heimdal that is not Kerberos-specific.

I.e., to let non-Kerberos parts of Heimdal have config files (including support for plists on OS X and the registry on Windows), plugins, and logging just like Kerberos in Heimdal.
The changes are very mechanical: rename files, s/krb5_/heim_/g, add lib/base/context.c, create krb5 API wrappers for moved APIs, and build-system support.
The log comment for the main commit proposes that reviewers make use of --word-diff=color when reviewing changes to the renamed files (which were renamed in a separate, rename-only commit, except for heim_err.et, which only had a single-line change and git is able to follow its move).  Thus, this:
 52 files changed, 3938 insertions(+), 2011 deletions(-)

is not as big as it seems.  If you review the moved files with --word-diff=color and the rest as usual, then this is a much smaller review than the git log -n1 --stat output would imply.
(The commits from the subsidiaries-rebased branch, aka PR #677, are included, and have been reviewed separately by @gstrauss -- I expect to push those on Monday or Tuesday.)",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,678,2020-03-01T03:46:07Z,2020-03-02T16:56:45Z,2020-03-02T16:57:03Z,CLOSED,False,0,0,0,https://github.com/nicowilliams,Move some lib/krb5/ infrastructure bits to lib/base/,0,[],https://github.com/heimdal/heimdal/pull/678,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/678#issuecomment-593050133,"This PR moves configuration file, path expansion, plugin loading and running, logging, and warning, from libkrb5 to libheimbase.
The motivation for this is three-fold:

to keep the GSS-API mechglue more generic,
to make moving bx509d out of kdc/ possible along with moving PKIX infrastructure in kdc/ common to kx509 and bx509d out to lib/hx509,
and to enable future work in Heimdal that is not Kerberos-specific.

I.e., to let non-Kerberos parts of Heimdal have config files (including support for plists on OS X and the registry on Windows), plugins, and logging just like Kerberos in Heimdal.
The changes are very mechanical: rename files, s/krb5_/heim_/g, add lib/base/context.c, create krb5 API wrappers for moved APIs, and build-system support.
The log comment for the main commit proposes that reviewers make use of --word-diff=color when reviewing changes to the renamed files (which were renamed in a separate, rename-only commit, except for heim_err.et, which only had a single-line change and git is able to follow its move).  Thus, this:
 52 files changed, 3938 insertions(+), 2011 deletions(-)

is not as big as it seems.  If you review the moved files with --word-diff=color and the rest as usual, then this is a much smaller review than the git log -n1 --stat output would imply.
(The commits from the subsidiaries-rebased branch, aka PR #677, are included, and have been reviewed separately by @gstrauss -- I expect to push those on Monday or Tuesday.)","The changes were so mechanical that the only bugs I ran into were build system bugs and one solitary code bug (where a va_list was being passed to a varargs printf-like function, and which somehow failed to elicit a warning from gcc/clang).",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,678,2020-03-01T03:46:07Z,2020-03-02T16:56:45Z,2020-03-02T16:57:03Z,CLOSED,False,0,0,0,https://github.com/nicowilliams,Move some lib/krb5/ infrastructure bits to lib/base/,0,[],https://github.com/heimdal/heimdal/pull/678,https://github.com/nicowilliams,3,https://github.com/heimdal/heimdal/pull/678#issuecomment-593050202,"This PR moves configuration file, path expansion, plugin loading and running, logging, and warning, from libkrb5 to libheimbase.
The motivation for this is three-fold:

to keep the GSS-API mechglue more generic,
to make moving bx509d out of kdc/ possible along with moving PKIX infrastructure in kdc/ common to kx509 and bx509d out to lib/hx509,
and to enable future work in Heimdal that is not Kerberos-specific.

I.e., to let non-Kerberos parts of Heimdal have config files (including support for plists on OS X and the registry on Windows), plugins, and logging just like Kerberos in Heimdal.
The changes are very mechanical: rename files, s/krb5_/heim_/g, add lib/base/context.c, create krb5 API wrappers for moved APIs, and build-system support.
The log comment for the main commit proposes that reviewers make use of --word-diff=color when reviewing changes to the renamed files (which were renamed in a separate, rename-only commit, except for heim_err.et, which only had a single-line change and git is able to follow its move).  Thus, this:
 52 files changed, 3938 insertions(+), 2011 deletions(-)

is not as big as it seems.  If you review the moved files with --word-diff=color and the rest as usual, then this is a much smaller review than the git log -n1 --stat output would imply.
(The commits from the subsidiaries-rebased branch, aka PR #677, are included, and have been reviewed separately by @gstrauss -- I expect to push those on Monday or Tuesday.)","Also, make dist currently does not work on a pristine, ./configured tree, but does work after a full build, and the resulting tarball does build (on Linux anyways).",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,678,2020-03-01T03:46:07Z,2020-03-02T16:56:45Z,2020-03-02T16:57:03Z,CLOSED,False,0,0,0,https://github.com/nicowilliams,Move some lib/krb5/ infrastructure bits to lib/base/,0,[],https://github.com/heimdal/heimdal/pull/678,https://github.com/nicowilliams,4,https://github.com/heimdal/heimdal/pull/678#issuecomment-593124715,"This PR moves configuration file, path expansion, plugin loading and running, logging, and warning, from libkrb5 to libheimbase.
The motivation for this is three-fold:

to keep the GSS-API mechglue more generic,
to make moving bx509d out of kdc/ possible along with moving PKIX infrastructure in kdc/ common to kx509 and bx509d out to lib/hx509,
and to enable future work in Heimdal that is not Kerberos-specific.

I.e., to let non-Kerberos parts of Heimdal have config files (including support for plists on OS X and the registry on Windows), plugins, and logging just like Kerberos in Heimdal.
The changes are very mechanical: rename files, s/krb5_/heim_/g, add lib/base/context.c, create krb5 API wrappers for moved APIs, and build-system support.
The log comment for the main commit proposes that reviewers make use of --word-diff=color when reviewing changes to the renamed files (which were renamed in a separate, rename-only commit, except for heim_err.et, which only had a single-line change and git is able to follow its move).  Thus, this:
 52 files changed, 3938 insertions(+), 2011 deletions(-)

is not as big as it seems.  If you review the moved files with --word-diff=color and the rest as usual, then this is a much smaller review than the git log -n1 --stat output would imply.
(The commits from the subsidiaries-rebased branch, aka PR #677, are included, and have been reviewed separately by @gstrauss -- I expect to push those on Monday or Tuesday.)","A few more things that could move into lib/base/:

more of the error message functions (load the error tables into the heim_context instead of krb5_context),
lib/krb5/expand_hostname.c,
krb5_set_config_files(), krb5_prepend_config_files(), krb5_prepend_config_files_default(), krb5_get_default_config_files() (the heim version of which could take an environment variable name as an argument),  could all be generalized, and should be because non-Kerberos Heimdal code that needs configuration is likely to need to provide the same experience as the Kerberos Heimdal code.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,678,2020-03-01T03:46:07Z,2020-03-02T16:56:45Z,2020-03-02T16:57:03Z,CLOSED,False,0,0,0,https://github.com/nicowilliams,Move some lib/krb5/ infrastructure bits to lib/base/,0,[],https://github.com/heimdal/heimdal/pull/678,https://github.com/lhoward,5,https://github.com/heimdal/heimdal/pull/678#issuecomment-593172581,"This PR moves configuration file, path expansion, plugin loading and running, logging, and warning, from libkrb5 to libheimbase.
The motivation for this is three-fold:

to keep the GSS-API mechglue more generic,
to make moving bx509d out of kdc/ possible along with moving PKIX infrastructure in kdc/ common to kx509 and bx509d out to lib/hx509,
and to enable future work in Heimdal that is not Kerberos-specific.

I.e., to let non-Kerberos parts of Heimdal have config files (including support for plists on OS X and the registry on Windows), plugins, and logging just like Kerberos in Heimdal.
The changes are very mechanical: rename files, s/krb5_/heim_/g, add lib/base/context.c, create krb5 API wrappers for moved APIs, and build-system support.
The log comment for the main commit proposes that reviewers make use of --word-diff=color when reviewing changes to the renamed files (which were renamed in a separate, rename-only commit, except for heim_err.et, which only had a single-line change and git is able to follow its move).  Thus, this:
 52 files changed, 3938 insertions(+), 2011 deletions(-)

is not as big as it seems.  If you review the moved files with --word-diff=color and the rest as usual, then this is a much smaller review than the git log -n1 --stat output would imply.
(The commits from the subsidiaries-rebased branch, aka PR #677, are included, and have been reviewed separately by @gstrauss -- I expect to push those on Monday or Tuesday.)",NB I did not review the ccache collection stuff,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,678,2020-03-01T03:46:07Z,2020-03-02T16:56:45Z,2020-03-02T16:57:03Z,CLOSED,False,0,0,0,https://github.com/nicowilliams,Move some lib/krb5/ infrastructure bits to lib/base/,0,[],https://github.com/heimdal/heimdal/pull/678,https://github.com/nicowilliams,6,https://github.com/heimdal/heimdal/pull/678#issuecomment-593227780,"This PR moves configuration file, path expansion, plugin loading and running, logging, and warning, from libkrb5 to libheimbase.
The motivation for this is three-fold:

to keep the GSS-API mechglue more generic,
to make moving bx509d out of kdc/ possible along with moving PKIX infrastructure in kdc/ common to kx509 and bx509d out to lib/hx509,
and to enable future work in Heimdal that is not Kerberos-specific.

I.e., to let non-Kerberos parts of Heimdal have config files (including support for plists on OS X and the registry on Windows), plugins, and logging just like Kerberos in Heimdal.
The changes are very mechanical: rename files, s/krb5_/heim_/g, add lib/base/context.c, create krb5 API wrappers for moved APIs, and build-system support.
The log comment for the main commit proposes that reviewers make use of --word-diff=color when reviewing changes to the renamed files (which were renamed in a separate, rename-only commit, except for heim_err.et, which only had a single-line change and git is able to follow its move).  Thus, this:
 52 files changed, 3938 insertions(+), 2011 deletions(-)

is not as big as it seems.  If you review the moved files with --word-diff=color and the rest as usual, then this is a much smaller review than the git log -n1 --stat output would imply.
(The commits from the subsidiaries-rebased branch, aka PR #677, are included, and have been reviewed separately by @gstrauss -- I expect to push those on Monday or Tuesday.)","NB I did not review the ccache collection stuff

Good!  @gstrauss is doing that.  (And it's a trivial rebase to not have them in this branch.)",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,678,2020-03-01T03:46:07Z,2020-03-02T16:56:45Z,2020-03-02T16:57:03Z,CLOSED,False,0,0,0,https://github.com/nicowilliams,Move some lib/krb5/ infrastructure bits to lib/base/,0,[],https://github.com/heimdal/heimdal/pull/678,https://github.com/nicowilliams,7,https://github.com/heimdal/heimdal/pull/678#issuecomment-593504021,"This PR moves configuration file, path expansion, plugin loading and running, logging, and warning, from libkrb5 to libheimbase.
The motivation for this is three-fold:

to keep the GSS-API mechglue more generic,
to make moving bx509d out of kdc/ possible along with moving PKIX infrastructure in kdc/ common to kx509 and bx509d out to lib/hx509,
and to enable future work in Heimdal that is not Kerberos-specific.

I.e., to let non-Kerberos parts of Heimdal have config files (including support for plists on OS X and the registry on Windows), plugins, and logging just like Kerberos in Heimdal.
The changes are very mechanical: rename files, s/krb5_/heim_/g, add lib/base/context.c, create krb5 API wrappers for moved APIs, and build-system support.
The log comment for the main commit proposes that reviewers make use of --word-diff=color when reviewing changes to the renamed files (which were renamed in a separate, rename-only commit, except for heim_err.et, which only had a single-line change and git is able to follow its move).  Thus, this:
 52 files changed, 3938 insertions(+), 2011 deletions(-)

is not as big as it seems.  If you review the moved files with --word-diff=color and the rest as usual, then this is a much smaller review than the git log -n1 --stat output would imply.
(The commits from the subsidiaries-rebased branch, aka PR #677, are included, and have been reviewed separately by @gstrauss -- I expect to push those on Monday or Tuesday.)",Thanks for the review!,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,679,2020-03-06T00:05:22Z,2020-03-06T17:56:05Z,2020-03-08T14:22:29Z,MERGED,True,22,17,5,https://github.com/dariaphoebe,revised coverity fixes,6,[],https://github.com/heimdal/heimdal/pull/679,https://github.com/dariaphoebe,1,https://github.com/heimdal/heimdal/pull/679,rebased to current master and without the errant hex_decode fix for kadmin/load,rebased to current master and without the errant hex_decode fix for kadmin/load,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,679,2020-03-06T00:05:22Z,2020-03-06T17:56:05Z,2020-03-08T14:22:29Z,MERGED,True,22,17,5,https://github.com/dariaphoebe,revised coverity fixes,6,[],https://github.com/heimdal/heimdal/pull/679,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/679#issuecomment-595886676,rebased to current master and without the errant hex_decode fix for kadmin/load,Thanks!,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,679,2020-03-06T00:05:22Z,2020-03-06T17:56:05Z,2020-03-08T14:22:29Z,MERGED,True,22,17,5,https://github.com/dariaphoebe,revised coverity fixes,6,[],https://github.com/heimdal/heimdal/pull/679,https://github.com/jaltman,3,https://github.com/heimdal/heimdal/pull/679#issuecomment-596210504,rebased to current master and without the errant hex_decode fix for kadmin/load,This series should not have been merged as the Travis builds failed.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,680,2020-03-08T14:35:23Z,2020-03-08T16:01:36Z,2020-03-08T16:01:39Z,MERGED,True,5,5,1,https://github.com/jaltman,kdc: kx509.c fix build failures,1,[],https://github.com/heimdal/heimdal/pull/680,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/680,"bcb5ed2 (""kdc/kx509.c: clean up
krb5_get_error_message strings used for mk_error_resp"") introduced a
build failure.  'context' is not a local variable but a field in the
kx509_req_context.
Change-Id: I38a8a9b1a19c3370dfc039d6e09445425936c32b","bcb5ed2 (""kdc/kx509.c: clean up
krb5_get_error_message strings used for mk_error_resp"") introduced a
build failure.  'context' is not a local variable but a field in the
kx509_req_context.
Change-Id: I38a8a9b1a19c3370dfc039d6e09445425936c32b",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,681,2020-03-11T18:50:36Z,2020-03-13T03:53:44Z,2020-03-13T03:53:44Z,CLOSED,False,744,151,29,https://github.com/nicowilliams,Make the FILE ccache type a collection type!,15,[],https://github.com/heimdal/heimdal/pull/681,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/681,"This makes the FILE ccache type a collection type.
Minimally, the FILE type will consider all ccaches whose prefix is the default FILE ccache name, followed by :name as subsidiaries.
As well, one can now configure multiple default locations in krb5.conf using the new default_file_cache_collection parameter in [libdefaults].  See the man page.","This makes the FILE ccache type a collection type.
Minimally, the FILE type will consider all ccaches whose prefix is the default FILE ccache name, followed by :name as subsidiaries.
As well, one can now configure multiple default locations in krb5.conf using the new default_file_cache_collection parameter in [libdefaults].  See the man page.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,681,2020-03-11T18:50:36Z,2020-03-13T03:53:44Z,2020-03-13T03:53:44Z,CLOSED,False,744,151,29,https://github.com/nicowilliams,Make the FILE ccache type a collection type!,15,[],https://github.com/heimdal/heimdal/pull/681,https://github.com/jaltman,2,https://github.com/heimdal/heimdal/pull/681#issuecomment-597810515,"This makes the FILE ccache type a collection type.
Minimally, the FILE type will consider all ccaches whose prefix is the default FILE ccache name, followed by :name as subsidiaries.
As well, one can now configure multiple default locations in krb5.conf using the new default_file_cache_collection parameter in [libdefaults].  See the man page.",Please make sure that any changes to the FILE ccache take into account that that on Windows file paths have a colon in them.   We cannot use colon has a separator for subsidiaries.,True,{'THUMBS_UP': ['https://github.com/nicowilliams']}
heimdal/heimdal,https://github.com/heimdal/heimdal,681,2020-03-11T18:50:36Z,2020-03-13T03:53:44Z,2020-03-13T03:53:44Z,CLOSED,False,744,151,29,https://github.com/nicowilliams,Make the FILE ccache type a collection type!,15,[],https://github.com/heimdal/heimdal/pull/681,https://github.com/nicowilliams,3,https://github.com/heimdal/heimdal/pull/681#issuecomment-597819711,"This makes the FILE ccache type a collection type.
Minimally, the FILE type will consider all ccaches whose prefix is the default FILE ccache name, followed by :name as subsidiaries.
As well, one can now configure multiple default locations in krb5.conf using the new default_file_cache_collection parameter in [libdefaults].  See the man page.",Windows paths can't have colons at all?  Or are you just concerned about letter drives?,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,681,2020-03-11T18:50:36Z,2020-03-13T03:53:44Z,2020-03-13T03:53:44Z,CLOSED,False,744,151,29,https://github.com/nicowilliams,Make the FILE ccache type a collection type!,15,[],https://github.com/heimdal/heimdal/pull/681,https://github.com/jaltman,4,https://github.com/heimdal/heimdal/pull/681#issuecomment-597824416,"This makes the FILE ccache type a collection type.
Minimally, the FILE type will consider all ccaches whose prefix is the default FILE ccache name, followed by :name as subsidiaries.
As well, one can now configure multiple default locations in krb5.conf using the new default_file_cache_collection parameter in [libdefaults].  See the man page.",A Windows file path is <drive>:<path>[:<alt-data-stream>].    A colon is both a drive letter separator and an alternate data stream separator.,True,{'THUMBS_UP': ['https://github.com/nicowilliams']}
heimdal/heimdal,https://github.com/heimdal/heimdal,681,2020-03-11T18:50:36Z,2020-03-13T03:53:44Z,2020-03-13T03:53:44Z,CLOSED,False,744,151,29,https://github.com/nicowilliams,Make the FILE ccache type a collection type!,15,[],https://github.com/heimdal/heimdal/pull/681,https://github.com/nicowilliams,5,https://github.com/heimdal/heimdal/pull/681#issuecomment-597824858,"This makes the FILE ccache type a collection type.
Minimally, the FILE type will consider all ccaches whose prefix is the default FILE ccache name, followed by :name as subsidiaries.
As well, one can now configure multiple default locations in krb5.conf using the new default_file_cache_collection parameter in [libdefaults].  See the man page.","I just tried it too, and indeed, the Windows explorer does not allow me to have a : in any path component.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,681,2020-03-11T18:50:36Z,2020-03-13T03:53:44Z,2020-03-13T03:53:44Z,CLOSED,False,744,151,29,https://github.com/nicowilliams,Make the FILE ccache type a collection type!,15,[],https://github.com/heimdal/heimdal/pull/681,https://github.com/nicowilliams,6,https://github.com/heimdal/heimdal/pull/681#issuecomment-597824987,"This makes the FILE ccache type a collection type.
Minimally, the FILE type will consider all ccaches whose prefix is the default FILE ccache name, followed by :name as subsidiaries.
As well, one can now configure multiple default locations in krb5.conf using the new default_file_cache_collection parameter in [libdefaults].  See the man page.",Thanks.  I'll fix it.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,681,2020-03-11T18:50:36Z,2020-03-13T03:53:44Z,2020-03-13T03:53:44Z,CLOSED,False,744,151,29,https://github.com/nicowilliams,Make the FILE ccache type a collection type!,15,[],https://github.com/heimdal/heimdal/pull/681,https://github.com/nicowilliams,7,https://github.com/heimdal/heimdal/pull/681#issuecomment-597827290,"This makes the FILE ccache type a collection type.
Minimally, the FILE type will consider all ccaches whose prefix is the default FILE ccache name, followed by :name as subsidiaries.
As well, one can now configure multiple default locations in krb5.conf using the new default_file_cache_collection parameter in [libdefaults].  See the man page.","In the past I've written code to check for : as the second char of paths on WIN32, but now I see I only ever need to check for any : on WIN32.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,681,2020-03-11T18:50:36Z,2020-03-13T03:53:44Z,2020-03-13T03:53:44Z,CLOSED,False,744,151,29,https://github.com/nicowilliams,Make the FILE ccache type a collection type!,15,[],https://github.com/heimdal/heimdal/pull/681,https://github.com/jaltman,8,https://github.com/heimdal/heimdal/pull/681#issuecomment-597837841,"This makes the FILE ccache type a collection type.
Minimally, the FILE type will consider all ccaches whose prefix is the default FILE ccache name, followed by :name as subsidiaries.
As well, one can now configure multiple default locations in krb5.conf using the new default_file_cache_collection parameter in [libdefaults].  See the man page.","A colon shouldn't be used in a path component on any filesystem regardless of operating system.  Its not in the POSIX safeset.
The Explorer Shell is more restrictive then the Win32 filesystem rules.   However, all of the following characters are reserved and cannot be used on Windows.
The following reserved characters:
    < (less than)
    > (greater than)
    : (colon)
    "" (double quote)
    / (forward slash)
    \ (backslash)
    | (vertical bar or pipe)
    ? (question mark)
    * (asterisk)",True,{'THUMBS_UP': ['https://github.com/nicowilliams']}
heimdal/heimdal,https://github.com/heimdal/heimdal,681,2020-03-11T18:50:36Z,2020-03-13T03:53:44Z,2020-03-13T03:53:44Z,CLOSED,False,744,151,29,https://github.com/nicowilliams,Make the FILE ccache type a collection type!,15,[],https://github.com/heimdal/heimdal/pull/681,https://github.com/jaltman,9,https://github.com/heimdal/heimdal/pull/681#issuecomment-597839081,"This makes the FILE ccache type a collection type.
Minimally, the FILE type will consider all ccaches whose prefix is the default FILE ccache name, followed by :name as subsidiaries.
As well, one can now configure multiple default locations in krb5.conf using the new default_file_cache_collection parameter in [libdefaults].  See the man page.","Just in case it matters, a reminder that that /. ///, ////, etc are equivalent but not // which is reserved by POSIX for filesystem specific interpretation.",True,{'THUMBS_UP': ['https://github.com/nicowilliams']}
heimdal/heimdal,https://github.com/heimdal/heimdal,681,2020-03-11T18:50:36Z,2020-03-13T03:53:44Z,2020-03-13T03:53:44Z,CLOSED,False,744,151,29,https://github.com/nicowilliams,Make the FILE ccache type a collection type!,15,[],https://github.com/heimdal/heimdal/pull/681,https://github.com/nicowilliams,10,https://github.com/heimdal/heimdal/pull/681#issuecomment-597861965,"This makes the FILE ccache type a collection type.
Minimally, the FILE type will consider all ccaches whose prefix is the default FILE ccache name, followed by :name as subsidiaries.
As well, one can now configure multiple default locations in krb5.conf using the new default_file_cache_collection parameter in [libdefaults].  See the man page.","(trivia) IIRC POSIX reserves // on account of Apollo Domain, whose usage predates Windows UNCs.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,681,2020-03-11T18:50:36Z,2020-03-13T03:53:44Z,2020-03-13T03:53:44Z,CLOSED,False,744,151,29,https://github.com/nicowilliams,Make the FILE ccache type a collection type!,15,[],https://github.com/heimdal/heimdal/pull/681,https://github.com/nicowilliams,11,https://github.com/heimdal/heimdal/pull/681#issuecomment-598535727,"This makes the FILE ccache type a collection type.
Minimally, the FILE type will consider all ccaches whose prefix is the default FILE ccache name, followed by :name as subsidiaries.
As well, one can now configure multiple default locations in krb5.conf using the new default_file_cache_collection parameter in [libdefaults].  See the man page.",Thanks @vdukhovni!,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,682,2020-03-17T22:27:48Z,2020-03-18T00:14:27Z,2020-03-18T00:14:27Z,MERGED,True,130,130,5,https://github.com/nicowilliams,One more round of kinit fixes,2,[],https://github.com/heimdal/heimdal/pull/682,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/682,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,683,2020-04-02T17:21:58Z,,2021-03-11T03:26:50Z,OPEN,False,3,1,2,https://github.com/jaltman,Proposed fix for issue 634,2,[],https://github.com/heimdal/heimdal/pull/683,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/683,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,683,2020-04-02T17:21:58Z,,2021-03-11T03:26:50Z,OPEN,False,3,1,2,https://github.com/jaltman,Proposed fix for issue 634,2,[],https://github.com/heimdal/heimdal/pull/683,https://github.com/jaltman,2,https://github.com/heimdal/heimdal/pull/683#issuecomment-608040028,,"The underlying problem here is that hdb_err.et is part of lib/hdb which has dependencies on successfully building lib/krb5 first.
I argue that hdb_err.et should be built as part of lib/krb5 not lib/hdb because lib/krb5 must initialize the hdb error table as part of krb5_context initialization.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,683,2020-04-02T17:21:58Z,,2021-03-11T03:26:50Z,OPEN,False,3,1,2,https://github.com/jaltman,Proposed fix for issue 634,2,[],https://github.com/heimdal/heimdal/pull/683,https://github.com/nicowilliams,3,https://github.com/heimdal/heimdal/pull/683#issuecomment-609955308,,"This looks right but fails to build.  You should move hdb_err.et to lib/krb5.
I'll probably be moving all error handling functions and error table initialization into lib/base anyways at some point, but you could move hdb_err.et now.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,684,2020-04-06T05:29:23Z,2020-04-07T00:11:36Z,2020-04-07T00:11:36Z,CLOSED,False,60,29,6,https://github.com/lhoward,gss: smarter mechanism selection in SPNEGO,2,[],https://github.com/heimdal/heimdal/pull/684,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/684,"Make SPNEGO (and NegoEx) smarter about mechanism selection. If the initiator has specified GSS_C_MUTUAL_FLAG and/or GSS_C_ANON_FLAG, only consider mechanisms that support GSS_C_MA_AUTH_TARG and/or GSS_C_MA_AUTH_INIT_ANON (respectively) for negotiation.","Make SPNEGO (and NegoEx) smarter about mechanism selection. If the initiator has specified GSS_C_MUTUAL_FLAG and/or GSS_C_ANON_FLAG, only consider mechanisms that support GSS_C_MA_AUTH_TARG and/or GSS_C_MA_AUTH_INIT_ANON (respectively) for negotiation.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,684,2020-04-06T05:29:23Z,2020-04-07T00:11:36Z,2020-04-07T00:11:36Z,CLOSED,False,60,29,6,https://github.com/lhoward,gss: smarter mechanism selection in SPNEGO,2,[],https://github.com/heimdal/heimdal/pull/684,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/684#issuecomment-609952924,"Make SPNEGO (and NegoEx) smarter about mechanism selection. If the initiator has specified GSS_C_MUTUAL_FLAG and/or GSS_C_ANON_FLAG, only consider mechanisms that support GSS_C_MA_AUTH_TARG and/or GSS_C_MA_AUTH_INIT_ANON (respectively) for negotiation.","Make SPNEGO (and NegoEx) smarter about mechanism selection. If the initiator has specified GSS_C_MUTUAL_FLAG and/or GSS_C_ANON_FLAG, only consider mechanisms that support GSS_C_MA_AUTH_TARG and/or GSS_C_MA_AUTH_INIT_ANON (respectively) for negotiation.

Hmm, recall that these flags are not critical.  You can not get them.
What I think this means is that mechanisms that do offer such services should be preferred over ones that don't, not that ones that don't can't be negotiated.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,684,2020-04-06T05:29:23Z,2020-04-07T00:11:36Z,2020-04-07T00:11:36Z,CLOSED,False,60,29,6,https://github.com/lhoward,gss: smarter mechanism selection in SPNEGO,2,[],https://github.com/heimdal/heimdal/pull/684,https://github.com/nicowilliams,3,https://github.com/heimdal/heimdal/pull/684#issuecomment-609953741,"Make SPNEGO (and NegoEx) smarter about mechanism selection. If the initiator has specified GSS_C_MUTUAL_FLAG and/or GSS_C_ANON_FLAG, only consider mechanisms that support GSS_C_MA_AUTH_TARG and/or GSS_C_MA_AUTH_INIT_ANON (respectively) for negotiation.","Author: Luke Howard <lukeh@padl.com>
Date:   Mon Apr 6 15:42:48 2020 +1000

    gss: GSS_Indicate_mechs_by_attrs backwards compat

    If a loadable mechanism does not support GSS_Inquire_attrs_for_mech() and no
    attributes were marked as critical, include it unconditionally in the set of
    returned mechanisms.

    This is to avoid nasty surprises with mechanisms that do not support RFC 5587,
    as future versions of Heimdal may more aggressively prune mechanisms from
    negotiation based on attribute support. (The main deployed third-party
    mechanisms are Moonshot and Samba NTLM; both of these do support
    GSS_Inquire_attrs_for_mech(), so this is defensive programming only.)

Maybe gss.conf could have a way to list a mechanism's attributes for this case?  (And also, so that if we refactor or add new mech attributes we can override or augment the ones returned by an existing mechanism.)",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,684,2020-04-06T05:29:23Z,2020-04-07T00:11:36Z,2020-04-07T00:11:36Z,CLOSED,False,60,29,6,https://github.com/lhoward,gss: smarter mechanism selection in SPNEGO,2,[],https://github.com/heimdal/heimdal/pull/684,https://github.com/lhoward,4,https://github.com/heimdal/heimdal/pull/684#issuecomment-610077739,"Make SPNEGO (and NegoEx) smarter about mechanism selection. If the initiator has specified GSS_C_MUTUAL_FLAG and/or GSS_C_ANON_FLAG, only consider mechanisms that support GSS_C_MA_AUTH_TARG and/or GSS_C_MA_AUTH_INIT_ANON (respectively) for negotiation.","Maybe gss.conf could have a way to list a mechanism's attributes for this case?  (And also, so that if we refactor or add new mech attributes we can override or augment the ones returned by an existing mechanism.)

This idea is good but probably overkill, given the original approach is mostly defensive programming. The only third-party GSS-API mechanism I'm aware of that's used in the production with Heimdal is Moonshot's GSS-API (which supports RFC 5587). There's the Samba NTLM mechanism, which also supports it, but I believe is only used with MIT. True, there are all the custom SAP mechanisms, but is anyone using them with Heimdal? And if so, with SPNEGO?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,684,2020-04-06T05:29:23Z,2020-04-07T00:11:36Z,2020-04-07T00:11:36Z,CLOSED,False,60,29,6,https://github.com/lhoward,gss: smarter mechanism selection in SPNEGO,2,[],https://github.com/heimdal/heimdal/pull/684,https://github.com/lhoward,5,https://github.com/heimdal/heimdal/pull/684#issuecomment-610078164,"Make SPNEGO (and NegoEx) smarter about mechanism selection. If the initiator has specified GSS_C_MUTUAL_FLAG and/or GSS_C_ANON_FLAG, only consider mechanisms that support GSS_C_MA_AUTH_TARG and/or GSS_C_MA_AUTH_INIT_ANON (respectively) for negotiation.","Hmm, recall that these flags are not critical. You can not get them.
What I think this means is that mechanisms that do offer such services should be preferred over ones that don't, not that ones that don't can't be negotiated.

Good point. So the initiator should keep its mechanism selection as-is and then sort by feature availability? How does one sort by multiple things? I suppose MUTUAL is more ""desirable"" than ANON, or is it? :)",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,684,2020-04-06T05:29:23Z,2020-04-07T00:11:36Z,2020-04-07T00:11:36Z,CLOSED,False,60,29,6,https://github.com/lhoward,gss: smarter mechanism selection in SPNEGO,2,[],https://github.com/heimdal/heimdal/pull/684,https://github.com/lhoward,6,https://github.com/heimdal/heimdal/pull/684#issuecomment-610101253,"Make SPNEGO (and NegoEx) smarter about mechanism selection. If the initiator has specified GSS_C_MUTUAL_FLAG and/or GSS_C_ANON_FLAG, only consider mechanisms that support GSS_C_MA_AUTH_TARG and/or GSS_C_MA_AUTH_INIT_ANON (respectively) for negotiation.",Going to put this in the too hard basket for now and focus on finishing SAnon.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,685,2020-04-07T02:54:40Z,2020-04-12T18:25:10Z,2020-04-12T18:25:10Z,MERGED,True,506,1,9,https://github.com/lhoward,gss: order SPNEGO proposed mechs by req_flags,2,['feature request'],https://github.com/heimdal/heimdal/pull/685,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/685,"Sort the list of mechanisms proposed by the initiator so that mechanisms are preferred by their advertised support for GSS flags. For example, if GSS_C_MUTUAL_FLAG is requested, a mechanism that offers GSS_C_MA_AUTH_TARG will be preferred over one that doesn't. The flag/mechanism attribute combinations are also assigned a weight (mutual trumps anonymous, for example).","Sort the list of mechanisms proposed by the initiator so that mechanisms are preferred by their advertised support for GSS flags. For example, if GSS_C_MUTUAL_FLAG is requested, a mechanism that offers GSS_C_MA_AUTH_TARG will be preferred over one that doesn't. The flag/mechanism attribute combinations are also assigned a weight (mutual trumps anonymous, for example).",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,685,2020-04-07T02:54:40Z,2020-04-12T18:25:10Z,2020-04-12T18:25:10Z,MERGED,True,506,1,9,https://github.com/lhoward,gss: order SPNEGO proposed mechs by req_flags,2,['feature request'],https://github.com/heimdal/heimdal/pull/685,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/685#issuecomment-611539184,"Sort the list of mechanisms proposed by the initiator so that mechanisms are preferred by their advertised support for GSS flags. For example, if GSS_C_MUTUAL_FLAG is requested, a mechanism that offers GSS_C_MA_AUTH_TARG will be preferred over one that doesn't. The flag/mechanism attribute combinations are also assigned a weight (mutual trumps anonymous, for example).",The fast-path check of  mech_flag_mask() may be a premature optimisation. It could be removed.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,686,2020-04-07T17:56:27Z,2020-04-07T18:10:46Z,2020-04-07T18:43:43Z,MERGED,True,2,2,2,https://github.com/dariaphoebe,pull up automake fixes from master so proper dependencies exist even with newer automake,2,['bug'],https://github.com/heimdal/heimdal/pull/686,https://github.com/dariaphoebe,1,https://github.com/heimdal/heimdal/pull/686,automake 1.16 and later don't work on the 7.1-branch without these fixes,automake 1.16 and later don't work on the 7.1-branch without these fixes,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,686,2020-04-07T17:56:27Z,2020-04-07T18:10:46Z,2020-04-07T18:43:43Z,MERGED,True,2,2,2,https://github.com/dariaphoebe,pull up automake fixes from master so proper dependencies exist even with newer automake,2,['bug'],https://github.com/heimdal/heimdal/pull/686,https://github.com/jaltman,2,https://github.com/heimdal/heimdal/pull/686#issuecomment-610540320,automake 1.16 and later don't work on the 7.1-branch without these fixes,The failure is due to the lack of texinfo in the AppVeyor builder.  Its unrelated to these changes.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,686,2020-04-07T17:56:27Z,2020-04-07T18:10:46Z,2020-04-07T18:43:43Z,MERGED,True,2,2,2,https://github.com/dariaphoebe,pull up automake fixes from master so proper dependencies exist even with newer automake,2,['bug'],https://github.com/heimdal/heimdal/pull/686,https://github.com/coveralls,3,https://github.com/heimdal/heimdal/pull/686#issuecomment-610556125,automake 1.16 and later don't work on the 7.1-branch without these fixes,Coverage remained the same at 0.0% when pulling 28c1fb8 on dariaphoebe:automake-pullups-7-1-branch into bc216ad on heimdal:heimdal-7-1-branch.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,687,2020-04-09T12:30:15Z,2020-04-09T12:40:57Z,2020-04-09T12:41:04Z,CLOSED,False,0,49,6,https://github.com/lhoward,gss: remove dead GSS_C_PEER_HAS_UPDATED_SPNEGO,1,[],https://github.com/heimdal/heimdal/pull/687,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/687,"GSS_C_PEER_HAS_UPDATED_SPNEGO was previously used to indicate to the SPNEGO implementation that the peer is not running an older version of Windows that cannot correctly support the generation and verification of mechListMIC. (The last version of Windows to have this bug was Windows 2003, support for which ended in 2010.)
SPNEGO is now harmonized with RFC4178 and MIT, and omits mechListMIC when the most preferred mechanism was selected, unless the peer or mechanism explicitly requires it. Samba has tested this version of SPNEGO with no known issues.
Remove GSS_C_PEER_HAS_UPDATED_SPNEGO as it has no consumers. A publicly exported symbol is being removed by this patch, but it was a private API that should have had no consumers.","GSS_C_PEER_HAS_UPDATED_SPNEGO was previously used to indicate to the SPNEGO implementation that the peer is not running an older version of Windows that cannot correctly support the generation and verification of mechListMIC. (The last version of Windows to have this bug was Windows 2003, support for which ended in 2010.)
SPNEGO is now harmonized with RFC4178 and MIT, and omits mechListMIC when the most preferred mechanism was selected, unless the peer or mechanism explicitly requires it. Samba has tested this version of SPNEGO with no known issues.
Remove GSS_C_PEER_HAS_UPDATED_SPNEGO as it has no consumers. A publicly exported symbol is being removed by this patch, but it was a private API that should have had no consumers.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,687,2020-04-09T12:30:15Z,2020-04-09T12:40:57Z,2020-04-09T12:41:04Z,CLOSED,False,0,49,6,https://github.com/lhoward,gss: remove dead GSS_C_PEER_HAS_UPDATED_SPNEGO,1,[],https://github.com/heimdal/heimdal/pull/687,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/687#issuecomment-611505836,"GSS_C_PEER_HAS_UPDATED_SPNEGO was previously used to indicate to the SPNEGO implementation that the peer is not running an older version of Windows that cannot correctly support the generation and verification of mechListMIC. (The last version of Windows to have this bug was Windows 2003, support for which ended in 2010.)
SPNEGO is now harmonized with RFC4178 and MIT, and omits mechListMIC when the most preferred mechanism was selected, unless the peer or mechanism explicitly requires it. Samba has tested this version of SPNEGO with no known issues.
Remove GSS_C_PEER_HAS_UPDATED_SPNEGO as it has no consumers. A publicly exported symbol is being removed by this patch, but it was a private API that should have had no consumers.",Going to try a different approach; please ignore sorry.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,688,2020-04-09T12:54:49Z,2020-04-13T00:26:39Z,2020-04-13T00:26:39Z,MERGED,True,35,48,7,https://github.com/lhoward,gss: fix downlevel Windows interop regression,1,['bug'],https://github.com/heimdal/heimdal/pull/688,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/688,"The recent changes to SPNEGO removed support for GSS_C_PEER_HAS_UPDATED_SPNEGO, through which the Kerberos mechanism could indicate to SPNEGO that the peer did not suffer from SPNEGO conformance bugs present in some versions of Windows:

<7> Section 3.1.5.1: Windows 2000, Windows Server 2003, and Windows XP do not process the mechListMIC field. No mechListMIC value is produced when either the client or server completes the exchange. If a mechListMIC value is supplied to either the client or server, it is ignored. If the initiator in the GSS exchange has the last GSS token, the server returns a NegTokenResp token that has the negState field set to accept_complete and no mechListMIC field.
On all other product versions shown in the applicability list at the beginning of this section, the following processing is used for the mechListMIC field:

If AES Kerberos ciphers are negotiated by Kerberos, the signature in the SPNEGO mechListMIC field has to be processed by the recipient.


This patch restores this workaround, documented in [MS-SPNG] Appendix A <7> Section 3.1.5.1. Whilst improving interoperability with these admittedly now unsupported versions of Windows, it does introduce a risk that Kerberos with pre-AES ciphers could be negotiated in lieu of a stronger and more preferred mechanism.
Note: this patch inverts the mechanism interface from GSS_C_PEER_HAS_UPDATED_SPNEGO to GSS_C_PEER_HAS_BUGGY_SPNEGO, so that new mechanisms (which did not ship with these older versions of Windows) are not required to implement it.","The recent changes to SPNEGO removed support for GSS_C_PEER_HAS_UPDATED_SPNEGO, through which the Kerberos mechanism could indicate to SPNEGO that the peer did not suffer from SPNEGO conformance bugs present in some versions of Windows:

<7> Section 3.1.5.1: Windows 2000, Windows Server 2003, and Windows XP do not process the mechListMIC field. No mechListMIC value is produced when either the client or server completes the exchange. If a mechListMIC value is supplied to either the client or server, it is ignored. If the initiator in the GSS exchange has the last GSS token, the server returns a NegTokenResp token that has the negState field set to accept_complete and no mechListMIC field.
On all other product versions shown in the applicability list at the beginning of this section, the following processing is used for the mechListMIC field:

If AES Kerberos ciphers are negotiated by Kerberos, the signature in the SPNEGO mechListMIC field has to be processed by the recipient.


This patch restores this workaround, documented in [MS-SPNG] Appendix A <7> Section 3.1.5.1. Whilst improving interoperability with these admittedly now unsupported versions of Windows, it does introduce a risk that Kerberos with pre-AES ciphers could be negotiated in lieu of a stronger and more preferred mechanism.
Note: this patch inverts the mechanism interface from GSS_C_PEER_HAS_UPDATED_SPNEGO to GSS_C_PEER_HAS_BUGGY_SPNEGO, so that new mechanisms (which did not ship with these older versions of Windows) are not required to implement it.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,688,2020-04-09T12:54:49Z,2020-04-13T00:26:39Z,2020-04-13T00:26:39Z,MERGED,True,35,48,7,https://github.com/lhoward,gss: fix downlevel Windows interop regression,1,['bug'],https://github.com/heimdal/heimdal/pull/688,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/688#issuecomment-611512480,"The recent changes to SPNEGO removed support for GSS_C_PEER_HAS_UPDATED_SPNEGO, through which the Kerberos mechanism could indicate to SPNEGO that the peer did not suffer from SPNEGO conformance bugs present in some versions of Windows:

<7> Section 3.1.5.1: Windows 2000, Windows Server 2003, and Windows XP do not process the mechListMIC field. No mechListMIC value is produced when either the client or server completes the exchange. If a mechListMIC value is supplied to either the client or server, it is ignored. If the initiator in the GSS exchange has the last GSS token, the server returns a NegTokenResp token that has the negState field set to accept_complete and no mechListMIC field.
On all other product versions shown in the applicability list at the beginning of this section, the following processing is used for the mechListMIC field:

If AES Kerberos ciphers are negotiated by Kerberos, the signature in the SPNEGO mechListMIC field has to be processed by the recipient.


This patch restores this workaround, documented in [MS-SPNG] Appendix A <7> Section 3.1.5.1. Whilst improving interoperability with these admittedly now unsupported versions of Windows, it does introduce a risk that Kerberos with pre-AES ciphers could be negotiated in lieu of a stronger and more preferred mechanism.
Note: this patch inverts the mechanism interface from GSS_C_PEER_HAS_UPDATED_SPNEGO to GSS_C_PEER_HAS_BUGGY_SPNEGO, so that new mechanisms (which did not ship with these older versions of Windows) are not required to implement it.",cc @macrotex,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,688,2020-04-09T12:54:49Z,2020-04-13T00:26:39Z,2020-04-13T00:26:39Z,MERGED,True,35,48,7,https://github.com/lhoward,gss: fix downlevel Windows interop regression,1,['bug'],https://github.com/heimdal/heimdal/pull/688,https://github.com/lhoward,3,https://github.com/heimdal/heimdal/pull/688#issuecomment-611519301,"The recent changes to SPNEGO removed support for GSS_C_PEER_HAS_UPDATED_SPNEGO, through which the Kerberos mechanism could indicate to SPNEGO that the peer did not suffer from SPNEGO conformance bugs present in some versions of Windows:

<7> Section 3.1.5.1: Windows 2000, Windows Server 2003, and Windows XP do not process the mechListMIC field. No mechListMIC value is produced when either the client or server completes the exchange. If a mechListMIC value is supplied to either the client or server, it is ignored. If the initiator in the GSS exchange has the last GSS token, the server returns a NegTokenResp token that has the negState field set to accept_complete and no mechListMIC field.
On all other product versions shown in the applicability list at the beginning of this section, the following processing is used for the mechListMIC field:

If AES Kerberos ciphers are negotiated by Kerberos, the signature in the SPNEGO mechListMIC field has to be processed by the recipient.


This patch restores this workaround, documented in [MS-SPNG] Appendix A <7> Section 3.1.5.1. Whilst improving interoperability with these admittedly now unsupported versions of Windows, it does introduce a risk that Kerberos with pre-AES ciphers could be negotiated in lieu of a stronger and more preferred mechanism.
Note: this patch inverts the mechanism interface from GSS_C_PEER_HAS_UPDATED_SPNEGO to GSS_C_PEER_HAS_BUGGY_SPNEGO, so that new mechanisms (which did not ship with these older versions of Windows) are not required to implement it.",If we don't care about W2K3 then we should just remove this code entirely.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,688,2020-04-09T12:54:49Z,2020-04-13T00:26:39Z,2020-04-13T00:26:39Z,MERGED,True,35,48,7,https://github.com/lhoward,gss: fix downlevel Windows interop regression,1,['bug'],https://github.com/heimdal/heimdal/pull/688,https://github.com/jaltman,4,https://github.com/heimdal/heimdal/pull/688#issuecomment-611531866,"The recent changes to SPNEGO removed support for GSS_C_PEER_HAS_UPDATED_SPNEGO, through which the Kerberos mechanism could indicate to SPNEGO that the peer did not suffer from SPNEGO conformance bugs present in some versions of Windows:

<7> Section 3.1.5.1: Windows 2000, Windows Server 2003, and Windows XP do not process the mechListMIC field. No mechListMIC value is produced when either the client or server completes the exchange. If a mechListMIC value is supplied to either the client or server, it is ignored. If the initiator in the GSS exchange has the last GSS token, the server returns a NegTokenResp token that has the negState field set to accept_complete and no mechListMIC field.
On all other product versions shown in the applicability list at the beginning of this section, the following processing is used for the mechListMIC field:

If AES Kerberos ciphers are negotiated by Kerberos, the signature in the SPNEGO mechListMIC field has to be processed by the recipient.


This patch restores this workaround, documented in [MS-SPNG] Appendix A <7> Section 3.1.5.1. Whilst improving interoperability with these admittedly now unsupported versions of Windows, it does introduce a risk that Kerberos with pre-AES ciphers could be negotiated in lieu of a stronger and more preferred mechanism.
Note: this patch inverts the mechanism interface from GSS_C_PEER_HAS_UPDATED_SPNEGO to GSS_C_PEER_HAS_BUGGY_SPNEGO, so that new mechanisms (which did not ship with these older versions of Windows) are not required to implement it.",While we don't build on these old versions of Windows there are still many of them in use in the world.   I'm reminded of that every time I go to an ATM.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,688,2020-04-09T12:54:49Z,2020-04-13T00:26:39Z,2020-04-13T00:26:39Z,MERGED,True,35,48,7,https://github.com/lhoward,gss: fix downlevel Windows interop regression,1,['bug'],https://github.com/heimdal/heimdal/pull/688,https://github.com/lhoward,5,https://github.com/heimdal/heimdal/pull/688#issuecomment-611815431,"The recent changes to SPNEGO removed support for GSS_C_PEER_HAS_UPDATED_SPNEGO, through which the Kerberos mechanism could indicate to SPNEGO that the peer did not suffer from SPNEGO conformance bugs present in some versions of Windows:

<7> Section 3.1.5.1: Windows 2000, Windows Server 2003, and Windows XP do not process the mechListMIC field. No mechListMIC value is produced when either the client or server completes the exchange. If a mechListMIC value is supplied to either the client or server, it is ignored. If the initiator in the GSS exchange has the last GSS token, the server returns a NegTokenResp token that has the negState field set to accept_complete and no mechListMIC field.
On all other product versions shown in the applicability list at the beginning of this section, the following processing is used for the mechListMIC field:

If AES Kerberos ciphers are negotiated by Kerberos, the signature in the SPNEGO mechListMIC field has to be processed by the recipient.


This patch restores this workaround, documented in [MS-SPNG] Appendix A <7> Section 3.1.5.1. Whilst improving interoperability with these admittedly now unsupported versions of Windows, it does introduce a risk that Kerberos with pre-AES ciphers could be negotiated in lieu of a stronger and more preferred mechanism.
Note: this patch inverts the mechanism interface from GSS_C_PEER_HAS_UPDATED_SPNEGO to GSS_C_PEER_HAS_BUGGY_SPNEGO, so that new mechanisms (which did not ship with these older versions of Windows) are not required to implement it.","Of course, the risk of picking rc4-hmac to downgrade SPNEGO is less of an issue if those ciphers are turned off...",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,689,2020-04-12T09:00:45Z,2020-04-24T01:59:55Z,2020-04-24T01:59:56Z,MERGED,True,28744,38752,291,https://github.com/lhoward,Import libtommath v1.2.0,3,['hcrypto'],https://github.com/heimdal/heimdal/pull/689,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/689,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,689,2020-04-12T09:00:45Z,2020-04-24T01:59:55Z,2020-04-24T01:59:56Z,MERGED,True,28744,38752,291,https://github.com/lhoward,Import libtommath v1.2.0,3,['hcrypto'],https://github.com/heimdal/heimdal/pull/689,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/689#issuecomment-612585039,,"NB: we could use system libtommath, but Heimdal has an extra function Love added so, we'd need to check for that too. Perhaps upgrading is simpler.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,689,2020-04-12T09:00:45Z,2020-04-24T01:59:55Z,2020-04-24T01:59:56Z,MERGED,True,28744,38752,291,https://github.com/lhoward,Import libtommath v1.2.0,3,['hcrypto'],https://github.com/heimdal/heimdal/pull/689,https://github.com/lhoward,3,https://github.com/heimdal/heimdal/pull/689#issuecomment-612594069,,"OK, upstream won't take the mp_find_prime() patch as it's too close to their mp_prime_next_prime() API. So I need someone to review the following carefully:
diff --git a/lib/hcrypto/rsa-ltm.c b/lib/hcrypto/rsa-ltm.c
index 4ac5617cb..803da1d23 100644
--- a/lib/hcrypto/rsa-ltm.c
+++ b/lib/hcrypto/rsa-ltm.c
@@ -536,7 +536,7 @@ ltm_rsa_generate_key(RSA *rsa, int bits, BIGNUM *e, BN_GENCB *cb)
     do {
        BN_GENCB_call(cb, 2, counter++);
        CHECK(random_num(&p, bitsp), 0);
-       CHECK(mp_find_prime(&p,128), MP_YES);
+       CHECK(mp_prime_next_prime(&p,128,0), MP_OKAY);
 
        mp_sub_d(&p, 1, &t1);
        mp_gcd(&t1, &el, &t2);
@@ -548,7 +548,7 @@ ltm_rsa_generate_key(RSA *rsa, int bits, BIGNUM *e, BN_GENCB *cb)
     do {
        BN_GENCB_call(cb, 2, counter++);
        CHECK(random_num(&q, bits - bitsp), 0);
-       CHECK(mp_find_prime(&q,128), MP_YES);
+       CHECK(mp_prime_next_prime(&q,128,0), MP_OKAY);
 
        if (mp_cmp(&p, &q) == 0) /* don't let p and q be the same */
            continue;",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,689,2020-04-12T09:00:45Z,2020-04-24T01:59:55Z,2020-04-24T01:59:56Z,MERGED,True,28744,38752,291,https://github.com/lhoward,Import libtommath v1.2.0,3,['hcrypto'],https://github.com/heimdal/heimdal/pull/689,https://github.com/lhoward,4,https://github.com/heimdal/heimdal/pull/689#issuecomment-612595373,,Also commit reducing number of trials in RSA key generation needs careful review from someone like @nicowilliams (see advice in libtom/libtommath#482).,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,689,2020-04-12T09:00:45Z,2020-04-24T01:59:55Z,2020-04-24T01:59:56Z,MERGED,True,28744,38752,291,https://github.com/lhoward,Import libtommath v1.2.0,3,['hcrypto'],https://github.com/heimdal/heimdal/pull/689,https://github.com/lhoward,5,https://github.com/heimdal/heimdal/pull/689#issuecomment-612858184,,"See a08ee26, I just broke it out into a separate variable because of line length.",True,{'THUMBS_UP': ['https://github.com/sjaeckel']}
heimdal/heimdal,https://github.com/heimdal/heimdal,689,2020-04-12T09:00:45Z,2020-04-24T01:59:55Z,2020-04-24T01:59:56Z,MERGED,True,28744,38752,291,https://github.com/lhoward,Import libtommath v1.2.0,3,['hcrypto'],https://github.com/heimdal/heimdal/pull/689,https://github.com/nicowilliams,6,https://github.com/heimdal/heimdal/pull/689#issuecomment-618750747,,At some point I guess we'll have ./configure.ac or cf/something.m4 autoconf support for using a system-provided libtommath?,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,689,2020-04-12T09:00:45Z,2020-04-24T01:59:55Z,2020-04-24T01:59:56Z,MERGED,True,28744,38752,291,https://github.com/lhoward,Import libtommath v1.2.0,3,['hcrypto'],https://github.com/heimdal/heimdal/pull/689,https://github.com/nicowilliams,7,https://github.com/heimdal/heimdal/pull/689#issuecomment-618750778,,"Anyways, LGTM.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,689,2020-04-12T09:00:45Z,2020-04-24T01:59:55Z,2020-04-24T01:59:56Z,MERGED,True,28744,38752,291,https://github.com/lhoward,Import libtommath v1.2.0,3,['hcrypto'],https://github.com/heimdal/heimdal/pull/689,https://github.com/lhoward,8,https://github.com/heimdal/heimdal/pull/689#issuecomment-618751457,,Didn’t get around to system provided support but I can take a look separately.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,689,2020-04-12T09:00:45Z,2020-04-24T01:59:55Z,2020-04-24T01:59:56Z,MERGED,True,28744,38752,291,https://github.com/lhoward,Import libtommath v1.2.0,3,['hcrypto'],https://github.com/heimdal/heimdal/pull/689,https://github.com/nicowilliams,9,https://github.com/heimdal/heimdal/pull/689#issuecomment-618756458,,"Didn’t get around to system provided support but I can take a look separately.

That's fine.  This gets us closer.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,690,2020-04-12T16:03:55Z,2020-04-14T17:20:02Z,2020-04-14T17:20:08Z,MERGED,True,27,9,9,https://github.com/jaltman,cherry pick libhcrypto: UI_UTIL_FLAG_VERIFY_SILENT,2,['bug'],https://github.com/heimdal/heimdal/pull/690,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/690,(cherry picked from commit 014f168),(cherry picked from commit 014f168),True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,690,2020-04-12T16:03:55Z,2020-04-14T17:20:02Z,2020-04-14T17:20:08Z,MERGED,True,27,9,9,https://github.com/jaltman,cherry pick libhcrypto: UI_UTIL_FLAG_VERIFY_SILENT,2,['bug'],https://github.com/heimdal/heimdal/pull/690,https://github.com/coveralls,2,https://github.com/heimdal/heimdal/pull/690#issuecomment-612981316,(cherry picked from commit 014f168),Coverage remained the same at 0.0% when pulling 48d701a on jaltman/issue/616 into c4cff68 on heimdal-7-1-branch.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,690,2020-04-12T16:03:55Z,2020-04-14T17:20:02Z,2020-04-14T17:20:08Z,MERGED,True,27,9,9,https://github.com/jaltman,cherry pick libhcrypto: UI_UTIL_FLAG_VERIFY_SILENT,2,['bug'],https://github.com/heimdal/heimdal/pull/690,https://github.com/lhoward,3,https://github.com/heimdal/heimdal/pull/690#issuecomment-613127407,(cherry picked from commit 014f168),NB: Windows build is failing for a unrelated reason it appears (Texinfo Perl module missing?),True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,691,2020-04-17T02:13:43Z,2020-04-17T03:27:34Z,2020-04-17T04:43:39Z,CLOSED,False,128,179,4,https://github.com/lhoward,gss: try all mechanisms in gss_accept_sec_context(),1,['feature request'],https://github.com/heimdal/heimdal/pull/691,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/691,"Rather than including specific cases in the mechanism glue for NTLMSSP and unframed Kerberos, try all mechanisms when accepting a first initiator token, moving onto the next one if GSS_S_DEFECTIVE_TOKEN or GSS_S_BAD_MECH is returned.","Rather than including specific cases in the mechanism glue for NTLMSSP and unframed Kerberos, try all mechanisms when accepting a first initiator token, moving onto the next one if GSS_S_DEFECTIVE_TOKEN or GSS_S_BAD_MECH is returned.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,691,2020-04-17T02:13:43Z,2020-04-17T03:27:34Z,2020-04-17T04:43:39Z,CLOSED,False,128,179,4,https://github.com/lhoward,gss: try all mechanisms in gss_accept_sec_context(),1,['feature request'],https://github.com/heimdal/heimdal/pull/691,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/691#issuecomment-615002480,"Rather than including specific cases in the mechanism glue for NTLMSSP and unframed Kerberos, try all mechanisms when accepting a first initiator token, moving onto the next one if GSS_S_DEFECTIVE_TOKEN or GSS_S_BAD_MECH is returned.","The only problem here is that there's no more logging on the first round, if you specified a credential for which we couldn't find a mechanism credential. Not sure if there's a way around this.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,691,2020-04-17T02:13:43Z,2020-04-17T03:27:34Z,2020-04-17T04:43:39Z,CLOSED,False,128,179,4,https://github.com/lhoward,gss: try all mechanisms in gss_accept_sec_context(),1,['feature request'],https://github.com/heimdal/heimdal/pull/691,https://github.com/lhoward,3,https://github.com/heimdal/heimdal/pull/691#issuecomment-615017571,"Rather than including specific cases in the mechanism glue for NTLMSSP and unframed Kerberos, try all mechanisms when accepting a first initiator token, moving onto the next one if GSS_S_DEFECTIVE_TOKEN or GSS_S_BAD_MECH is returned.",Fixing properly is more complicated. Closing for now.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,691,2020-04-17T02:13:43Z,2020-04-17T03:27:34Z,2020-04-17T04:43:39Z,CLOSED,False,128,179,4,https://github.com/lhoward,gss: try all mechanisms in gss_accept_sec_context(),1,['feature request'],https://github.com/heimdal/heimdal/pull/691,https://github.com/nicowilliams,4,https://github.com/heimdal/heimdal/pull/691#issuecomment-615038234,"Rather than including specific cases in the mechanism glue for NTLMSSP and unframed Kerberos, try all mechanisms when accepting a first initiator token, moving onto the next one if GSS_S_DEFECTIVE_TOKEN or GSS_S_BAD_MECH is returned.","Superseded by #692.  Ah, I should adopt your synopsis though.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,692,2020-04-17T03:55:17Z,2020-04-17T19:37:40Z,2020-04-17T19:39:07Z,MERGED,True,133,43,4,https://github.com/nicowilliams,"Better support for ""non-standard"" GSS mechs",1,[],https://github.com/heimdal/heimdal/pull/692,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/692,"If an initial security context token doesn't have a standard header per
RFC2743 then try all mechanisms until one succeeds or all fail.
We still try to guess NTLMSSP, raw Kerberos, and SPNEGO, from tasting
the initial security context token.","If an initial security context token doesn't have a standard header per
RFC2743 then try all mechanisms until one succeeds or all fail.
We still try to guess NTLMSSP, raw Kerberos, and SPNEGO, from tasting
the initial security context token.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,692,2020-04-17T03:55:17Z,2020-04-17T19:37:40Z,2020-04-17T19:39:07Z,MERGED,True,133,43,4,https://github.com/nicowilliams,"Better support for ""non-standard"" GSS mechs",1,[],https://github.com/heimdal/heimdal/pull/692,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/692#issuecomment-615026982,"If an initial security context token doesn't have a standard header per
RFC2743 then try all mechanisms until one succeeds or all fail.
We still try to guess NTLMSSP, raw Kerberos, and SPNEGO, from tasting
the initial security context token.","I've still got to add your code, @lhoward, for the mechs to return GSS_S_DEFECTIVE_TOKEN...",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,692,2020-04-17T03:55:17Z,2020-04-17T19:37:40Z,2020-04-17T19:39:07Z,MERGED,True,133,43,4,https://github.com/nicowilliams,"Better support for ""non-standard"" GSS mechs",1,[],https://github.com/heimdal/heimdal/pull/692,https://github.com/nicowilliams,3,https://github.com/heimdal/heimdal/pull/692#issuecomment-615035438,"If an initial security context token doesn't have a standard header per
RFC2743 then try all mechanisms until one succeeds or all fail.
We still try to guess NTLMSSP, raw Kerberos, and SPNEGO, from tasting
the initial security context token.","I've to squash the fixup commits, so don't merge till I've done that.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,692,2020-04-17T03:55:17Z,2020-04-17T19:37:40Z,2020-04-17T19:39:07Z,MERGED,True,133,43,4,https://github.com/nicowilliams,"Better support for ""non-standard"" GSS mechs",1,[],https://github.com/heimdal/heimdal/pull/692,https://github.com/lhoward,4,https://github.com/heimdal/heimdal/pull/692#issuecomment-615214288,"If an initial security context token doesn't have a standard header per
RFC2743 then try all mechanisms until one succeeds or all fail.
We still try to guess NTLMSSP, raw Kerberos, and SPNEGO, from tasting
the initial security context token.","Hmm, LGTM generally but not sure why tests are failing...",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,692,2020-04-17T03:55:17Z,2020-04-17T19:37:40Z,2020-04-17T19:39:07Z,MERGED,True,133,43,4,https://github.com/nicowilliams,"Better support for ""non-standard"" GSS mechs",1,[],https://github.com/heimdal/heimdal/pull/692,https://github.com/nicowilliams,5,https://github.com/heimdal/heimdal/pull/692#issuecomment-615415486,"If an initial security context token doesn't have a standard header per
RFC2743 then try all mechanisms until one succeeds or all fail.
We still try to guess NTLMSSP, raw Kerberos, and SPNEGO, from tasting
the initial security context token.","Hmm, LGTM generally but not sure why tests are failing...

See the fixup commits I just pushed.  One was a missing assignment of ctx->gc_mech in the token tasting case in the mech glue, and the other was a GSS_S_FAILURE that needed to be a GSS_S_DEFECTIVE_TOKEN in SPNEGO.
And with that, tests pass!",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,692,2020-04-17T03:55:17Z,2020-04-17T19:37:40Z,2020-04-17T19:39:07Z,MERGED,True,133,43,4,https://github.com/nicowilliams,"Better support for ""non-standard"" GSS mechs",1,[],https://github.com/heimdal/heimdal/pull/692,https://github.com/nicowilliams,6,https://github.com/heimdal/heimdal/pull/692#issuecomment-615416010,"If an initial security context token doesn't have a standard header per
RFC2743 then try all mechanisms until one succeeds or all fail.
We still try to guess NTLMSSP, raw Kerberos, and SPNEGO, from tasting
the initial security context token.","ahh, you pushed 4199118, which I now don't need to fix in this PR.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,692,2020-04-17T03:55:17Z,2020-04-17T19:37:40Z,2020-04-17T19:39:07Z,MERGED,True,133,43,4,https://github.com/nicowilliams,"Better support for ""non-standard"" GSS mechs",1,[],https://github.com/heimdal/heimdal/pull/692,https://github.com/nicowilliams,7,https://github.com/heimdal/heimdal/pull/692#issuecomment-615429753,"If an initial security context token doesn't have a standard header per
RFC2743 then try all mechanisms until one succeeds or all fail.
We still try to guess NTLMSSP, raw Kerberos, and SPNEGO, from tasting
the initial security context token.",Thanks for the review.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,694,2020-04-19T05:34:31Z,2020-04-21T05:35:22Z,2020-04-21T05:37:06Z,MERGED,True,470,449,25,https://github.com/nicowilliams,Fix gss_set_neg_mechs() (status: BROKEN),4,[],https://github.com/heimdal/heimdal/pull/694,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/694,"This PR does the following:

adds a gss_duplicate_oid_set() function
stores the neg mechs in the mechglue union cred
makes SPNEGO a GM_USE_MG_CRED mechanism: it will use mechglue union creds as its creds

this means SPNEGO no longer has credential acquisition/inquiry/release methods
this requires more GM_USE_MG_CRED special handling in the mechglue


SPNEGO no longer has methods for setting or getting the negotiable mechanisms list

This is currently BROKEN.  The issue is we need more GM_USE_MG_CRED special handling.  Specifically, the gmc->cred of a union cred element for SPNEGO needs to be a different mechglue union cred and it needs to be acquired somewhat specially:

when a cred element is acquired, either with gss_acquire_cred*() or gss_add_cred*(), we need to acquire a cred handle for SPNEGO with desired_mechs() having all the mechs (except SPNEGO or any GM_USE_MG_CRED mech)

We can't delay this to gss_init_sec_context() time: we'd have to be willing to hold on to a cred_store (including passwords, perhaps) until then.
A few notes:


gss_get_neg_mechs() called on a credential that has not had gss_set_neg_mechs() called will return GSS_S_FAILURE because our SPNEGO will need to know whether gss_set_neg_mechs() was called, and it's this or know the details of union creds.  RFC2744 doesn't say what to do in this case, but it does allow returning an error.


calling gss_acquire_cred*() with a subset of available concrete mechs + SPNEGO will internally also acquire for all the other concrete mechs as well, and this can't really be helped (especially when that subset is the empty set!)


ditto calling gss_add_cred*() to add a SPNEGO cred element to a credential that has elements for concrete mechanisms


maybe we should support calling gss_init_sec_context() with a non-default credential that lacks a SPNEGO element, and desired_mech set to SPNEGO -- maybe this is how it should have been specified all along","This PR does the following:

adds a gss_duplicate_oid_set() function
stores the neg mechs in the mechglue union cred
makes SPNEGO a GM_USE_MG_CRED mechanism: it will use mechglue union creds as its creds

this means SPNEGO no longer has credential acquisition/inquiry/release methods
this requires more GM_USE_MG_CRED special handling in the mechglue


SPNEGO no longer has methods for setting or getting the negotiable mechanisms list

This is currently BROKEN.  The issue is we need more GM_USE_MG_CRED special handling.  Specifically, the gmc->cred of a union cred element for SPNEGO needs to be a different mechglue union cred and it needs to be acquired somewhat specially:

when a cred element is acquired, either with gss_acquire_cred*() or gss_add_cred*(), we need to acquire a cred handle for SPNEGO with desired_mechs() having all the mechs (except SPNEGO or any GM_USE_MG_CRED mech)

We can't delay this to gss_init_sec_context() time: we'd have to be willing to hold on to a cred_store (including passwords, perhaps) until then.
A few notes:


gss_get_neg_mechs() called on a credential that has not had gss_set_neg_mechs() called will return GSS_S_FAILURE because our SPNEGO will need to know whether gss_set_neg_mechs() was called, and it's this or know the details of union creds.  RFC2744 doesn't say what to do in this case, but it does allow returning an error.


calling gss_acquire_cred*() with a subset of available concrete mechs + SPNEGO will internally also acquire for all the other concrete mechs as well, and this can't really be helped (especially when that subset is the empty set!)


ditto calling gss_add_cred*() to add a SPNEGO cred element to a credential that has elements for concrete mechanisms


maybe we should support calling gss_init_sec_context() with a non-default credential that lacks a SPNEGO element, and desired_mech set to SPNEGO -- maybe this is how it should have been specified all along",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,694,2020-04-19T05:34:31Z,2020-04-21T05:35:22Z,2020-04-21T05:37:06Z,MERGED,True,470,449,25,https://github.com/nicowilliams,Fix gss_set_neg_mechs() (status: BROKEN),4,[],https://github.com/heimdal/heimdal/pull/694,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/694#issuecomment-616042007,"This PR does the following:

adds a gss_duplicate_oid_set() function
stores the neg mechs in the mechglue union cred
makes SPNEGO a GM_USE_MG_CRED mechanism: it will use mechglue union creds as its creds

this means SPNEGO no longer has credential acquisition/inquiry/release methods
this requires more GM_USE_MG_CRED special handling in the mechglue


SPNEGO no longer has methods for setting or getting the negotiable mechanisms list

This is currently BROKEN.  The issue is we need more GM_USE_MG_CRED special handling.  Specifically, the gmc->cred of a union cred element for SPNEGO needs to be a different mechglue union cred and it needs to be acquired somewhat specially:

when a cred element is acquired, either with gss_acquire_cred*() or gss_add_cred*(), we need to acquire a cred handle for SPNEGO with desired_mechs() having all the mechs (except SPNEGO or any GM_USE_MG_CRED mech)

We can't delay this to gss_init_sec_context() time: we'd have to be willing to hold on to a cred_store (including passwords, perhaps) until then.
A few notes:


gss_get_neg_mechs() called on a credential that has not had gss_set_neg_mechs() called will return GSS_S_FAILURE because our SPNEGO will need to know whether gss_set_neg_mechs() was called, and it's this or know the details of union creds.  RFC2744 doesn't say what to do in this case, but it does allow returning an error.


calling gss_acquire_cred*() with a subset of available concrete mechs + SPNEGO will internally also acquire for all the other concrete mechs as well, and this can't really be helped (especially when that subset is the empty set!)


ditto calling gss_add_cred*() to add a SPNEGO cred element to a credential that has elements for concrete mechanisms


maybe we should support calling gss_init_sec_context() with a non-default credential that lacks a SPNEGO element, and desired_mech set to SPNEGO -- maybe this is how it should have been specified all along","Discussing with Luke.  He proposes we never have a cred element for SPNEGO, just skip it.  If you acquire a cred only for SPNEGO, you get a handle that represents the default credential.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,694,2020-04-19T05:34:31Z,2020-04-21T05:35:22Z,2020-04-21T05:37:06Z,MERGED,True,470,449,25,https://github.com/nicowilliams,Fix gss_set_neg_mechs() (status: BROKEN),4,[],https://github.com/heimdal/heimdal/pull/694,https://github.com/nicowilliams,3,https://github.com/heimdal/heimdal/pull/694#issuecomment-616963128,"This PR does the following:

adds a gss_duplicate_oid_set() function
stores the neg mechs in the mechglue union cred
makes SPNEGO a GM_USE_MG_CRED mechanism: it will use mechglue union creds as its creds

this means SPNEGO no longer has credential acquisition/inquiry/release methods
this requires more GM_USE_MG_CRED special handling in the mechglue


SPNEGO no longer has methods for setting or getting the negotiable mechanisms list

This is currently BROKEN.  The issue is we need more GM_USE_MG_CRED special handling.  Specifically, the gmc->cred of a union cred element for SPNEGO needs to be a different mechglue union cred and it needs to be acquired somewhat specially:

when a cred element is acquired, either with gss_acquire_cred*() or gss_add_cred*(), we need to acquire a cred handle for SPNEGO with desired_mechs() having all the mechs (except SPNEGO or any GM_USE_MG_CRED mech)

We can't delay this to gss_init_sec_context() time: we'd have to be willing to hold on to a cred_store (including passwords, perhaps) until then.
A few notes:


gss_get_neg_mechs() called on a credential that has not had gss_set_neg_mechs() called will return GSS_S_FAILURE because our SPNEGO will need to know whether gss_set_neg_mechs() was called, and it's this or know the details of union creds.  RFC2744 doesn't say what to do in this case, but it does allow returning an error.


calling gss_acquire_cred*() with a subset of available concrete mechs + SPNEGO will internally also acquire for all the other concrete mechs as well, and this can't really be helped (especially when that subset is the empty set!)


ditto calling gss_add_cred*() to add a SPNEGO cred element to a credential that has elements for concrete mechanisms


maybe we should support calling gss_init_sec_context() with a non-default credential that lacks a SPNEGO element, and desired_mech set to SPNEGO -- maybe this is how it should have been specified all along",This is really a clone of #695.  I couldn't push to #695's branch after doing a bit of git rebase fu to put all changes to gss_duplicate_oid_set() in one commit.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,695,2020-04-19T13:09:51Z,2020-04-21T05:37:57Z,2020-04-21T05:37:57Z,CLOSED,False,470,449,25,https://github.com/lhoward,Fix gss_set_neg_mechs() (2),4,['bug'],https://github.com/heimdal/heimdal/pull/695,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/695,"PR #694 with review comments addressed (couldn't write to Nico's branch).
This PR does the following:

adds a gss_duplicate_oid_set() function
stores the neg mechs in the mechglue union cred
makes SPNEGO a GM_USE_MG_CRED mechanism: it will use mechglue union creds as its creds
this means SPNEGO no longer has credential acquisition/inquiry/release methods
this requires more GM_USE_MG_CRED special handling in the mechglue
SPNEGO no longer has methods for setting or getting the negotiable mechanisms list","PR #694 with review comments addressed (couldn't write to Nico's branch).
This PR does the following:

adds a gss_duplicate_oid_set() function
stores the neg mechs in the mechglue union cred
makes SPNEGO a GM_USE_MG_CRED mechanism: it will use mechglue union creds as its creds
this means SPNEGO no longer has credential acquisition/inquiry/release methods
this requires more GM_USE_MG_CRED special handling in the mechglue
SPNEGO no longer has methods for setting or getting the negotiable mechanisms list",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,695,2020-04-19T13:09:51Z,2020-04-21T05:37:57Z,2020-04-21T05:37:57Z,CLOSED,False,470,449,25,https://github.com/lhoward,Fix gss_set_neg_mechs() (2),4,['bug'],https://github.com/heimdal/heimdal/pull/695,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/695#issuecomment-616963376,"PR #694 with review comments addressed (couldn't write to Nico's branch).
This PR does the following:

adds a gss_duplicate_oid_set() function
stores the neg mechs in the mechglue union cred
makes SPNEGO a GM_USE_MG_CRED mechanism: it will use mechglue union creds as its creds
this means SPNEGO no longer has credential acquisition/inquiry/release methods
this requires more GM_USE_MG_CRED special handling in the mechglue
SPNEGO no longer has methods for setting or getting the negotiable mechanisms list","This is really a clone of #694. I couldn't push to #695's branch after doing a bit of git rebase fu to put all changes to gss_duplicate_oid_set() in one commit, so I pushed to #694, which this PR was superseding.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,697,2020-04-21T23:48:26Z,2020-04-24T05:07:57Z,2020-04-24T05:07:57Z,MERGED,True,47,17,2,https://github.com/lhoward,gss: pass mechanism error tokens through SPNEGO,1,['bug'],https://github.com/heimdal/heimdal/pull/697,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/697,"Resolves issue #486 based on a patch by Nico Williams.
A GSS-API acceptor can return an error token to be sent to the initiator. Our SPNEGO implementation discarded these when sending a SPNEGO reject response. This patch fixes the SPNEGO acceptor to convey those in the SPNEGO response.
The SPNEGO initiator is also updated to not bail out early on receiving a SPNEGO reject response from the acceptor, but instead pass the response token (if any) to gss_init_sec_context(). A reject response with no response token will continue to return an error.","Resolves issue #486 based on a patch by Nico Williams.
A GSS-API acceptor can return an error token to be sent to the initiator. Our SPNEGO implementation discarded these when sending a SPNEGO reject response. This patch fixes the SPNEGO acceptor to convey those in the SPNEGO response.
The SPNEGO initiator is also updated to not bail out early on receiving a SPNEGO reject response from the acceptor, but instead pass the response token (if any) to gss_init_sec_context(). A reject response with no response token will continue to return an error.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,697,2020-04-21T23:48:26Z,2020-04-24T05:07:57Z,2020-04-24T05:07:57Z,MERGED,True,47,17,2,https://github.com/lhoward,gss: pass mechanism error tokens through SPNEGO,1,['bug'],https://github.com/heimdal/heimdal/pull/697,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/697#issuecomment-618796907,"Resolves issue #486 based on a patch by Nico Williams.
A GSS-API acceptor can return an error token to be sent to the initiator. Our SPNEGO implementation discarded these when sending a SPNEGO reject response. This patch fixes the SPNEGO acceptor to convey those in the SPNEGO response.
The SPNEGO initiator is also updated to not bail out early on receiving a SPNEGO reject response from the acceptor, but instead pass the response token (if any) to gss_init_sec_context(). A reject response with no response token will continue to return an error.","Hmm, OK, that most recent patch breaks the tests. Will investigate.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,697,2020-04-21T23:48:26Z,2020-04-24T05:07:57Z,2020-04-24T05:07:57Z,MERGED,True,47,17,2,https://github.com/lhoward,gss: pass mechanism error tokens through SPNEGO,1,['bug'],https://github.com/heimdal/heimdal/pull/697,https://github.com/lhoward,3,https://github.com/heimdal/heimdal/pull/697#issuecomment-618798091,"Resolves issue #486 based on a patch by Nico Williams.
A GSS-API acceptor can return an error token to be sent to the initiator. Our SPNEGO implementation discarded these when sending a SPNEGO reject response. This patch fixes the SPNEGO acceptor to convey those in the SPNEGO response.
The SPNEGO initiator is also updated to not bail out early on receiving a SPNEGO reject response from the acceptor, but instead pass the response token (if any) to gss_init_sec_context(). A reject response with no response token will continue to return an error.","OK, with my most recent commit I see in check-negoex
test_context: init_sec_context: gss-code: 327680  An invalid status code was supplied -- mech-code: 22 SPNEGO called got ISC call one too many",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,697,2020-04-21T23:48:26Z,2020-04-24T05:07:57Z,2020-04-24T05:07:57Z,MERGED,True,47,17,2,https://github.com/lhoward,gss: pass mechanism error tokens through SPNEGO,1,['bug'],https://github.com/heimdal/heimdal/pull/697,https://github.com/lhoward,4,https://github.com/heimdal/heimdal/pull/697#issuecomment-618798918,"Resolves issue #486 based on a patch by Nico Williams.
A GSS-API acceptor can return an error token to be sent to the initiator. Our SPNEGO implementation discarded these when sending a SPNEGO reject response. This patch fixes the SPNEGO acceptor to convey those in the SPNEGO response.
The SPNEGO initiator is also updated to not bail out early on receiving a SPNEGO reject response from the acceptor, but instead pass the response token (if any) to gss_init_sec_context(). A reject response with no response token will continue to return an error.",which suggests to me that make_reply() is being called and returning GSS_C_CONTINUE_NEEDED; exactly why I am still investigating,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,699,2020-04-23T23:23:29Z,2020-04-24T21:03:07Z,2020-04-24T21:03:14Z,MERGED,True,915,646,24,https://github.com/nicowilliams,Move more stuff from lib/krb5 to lib/base,11,[],https://github.com/heimdal/heimdal/pull/699,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/699,"One file was renamed, with stubs left behind.
This time the things moving are:

audit functions for services
error handling functions","One file was renamed, with stubs left behind.
This time the things moving are:

audit functions for services
error handling functions",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,699,2020-04-23T23:23:29Z,2020-04-24T21:03:07Z,2020-04-24T21:03:14Z,MERGED,True,915,646,24,https://github.com/nicowilliams,Move more stuff from lib/krb5 to lib/base,11,[],https://github.com/heimdal/heimdal/pull/699,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/699#issuecomment-618817093,"One file was renamed, with stubs left behind.
This time the things moving are:

audit functions for services
error handling functions",It all looks fine to me.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,700,2020-04-25T20:33:17Z,2020-04-26T02:23:00Z,2020-04-26T02:23:17Z,CLOSED,False,0,0,0,https://github.com/nicowilliams,spnego: Also use mechglue names,0,[],https://github.com/heimdal/heimdal/pull/700,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/700,"Recently we switched to using mechglue creds as SPNEGO creds in SPNEGO by completing the GM_US_MG_CRED code in the mechglue and making SPNEGO use it.
This PR does the same for names.
Notes:

this makes gss_localname() work when using SPNEGO, whether a mech OID is given or not
a test of gss_localname() and gss_userok() is now included in tests/gss/check-context via test_context
all call sites for calls to _gss_find_mn() needed thought and/or changes
the changes to gss_canonicalize_name() might be overwrought -- maybe if you call it with a GM_US_MG_CRED we should just fail","Recently we switched to using mechglue creds as SPNEGO creds in SPNEGO by completing the GM_US_MG_CRED code in the mechglue and making SPNEGO use it.
This PR does the same for names.
Notes:

this makes gss_localname() work when using SPNEGO, whether a mech OID is given or not
a test of gss_localname() and gss_userok() is now included in tests/gss/check-context via test_context
all call sites for calls to _gss_find_mn() needed thought and/or changes
the changes to gss_canonicalize_name() might be overwrought -- maybe if you call it with a GM_US_MG_CRED we should just fail",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,700,2020-04-25T20:33:17Z,2020-04-26T02:23:00Z,2020-04-26T02:23:17Z,CLOSED,False,0,0,0,https://github.com/nicowilliams,spnego: Also use mechglue names,0,[],https://github.com/heimdal/heimdal/pull/700,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/700#issuecomment-619457881,"Recently we switched to using mechglue creds as SPNEGO creds in SPNEGO by completing the GM_US_MG_CRED code in the mechglue and making SPNEGO use it.
This PR does the same for names.
Notes:

this makes gss_localname() work when using SPNEGO, whether a mech OID is given or not
a test of gss_localname() and gss_userok() is now included in tests/gss/check-context via test_context
all call sites for calls to _gss_find_mn() needed thought and/or changes
the changes to gss_canonicalize_name() might be overwrought -- maybe if you call it with a GM_US_MG_CRED we should just fail",Fantastic! LGTM. Just checking with SAnon.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,700,2020-04-25T20:33:17Z,2020-04-26T02:23:00Z,2020-04-26T02:23:17Z,CLOSED,False,0,0,0,https://github.com/nicowilliams,spnego: Also use mechglue names,0,[],https://github.com/heimdal/heimdal/pull/700,https://github.com/lhoward,3,https://github.com/heimdal/heimdal/pull/700#issuecomment-619458321,"Recently we switched to using mechglue creds as SPNEGO creds in SPNEGO by completing the GM_US_MG_CRED code in the mechglue and making SPNEGO use it.
This PR does the same for names.
Notes:

this makes gss_localname() work when using SPNEGO, whether a mech OID is given or not
a test of gss_localname() and gss_userok() is now included in tests/gss/check-context via test_context
all call sites for calls to _gss_find_mn() needed thought and/or changes
the changes to gss_canonicalize_name() might be overwrought -- maybe if you call it with a GM_US_MG_CRED we should just fail",No problems with SAnon.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,701,2020-04-26T06:01:02Z,2020-04-26T06:31:49Z,2020-04-26T06:32:19Z,CLOSED,False,0,0,0,https://github.com/nicowilliams,Fix PR #670 booboo by reviewer,0,[],https://github.com/heimdal/heimdal/pull/701,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/701,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,702,2020-04-26T22:27:27Z,2020-04-27T18:21:43Z,2020-04-27T18:21:43Z,MERGED,True,306,313,2,https://github.com/nicowilliams,hcrypto: Fix warnings in LTM,3,[],https://github.com/heimdal/heimdal/pull/702,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/702,"This commit fixes all the warnings in lib/hcrypto/rsa-ltm.c, which were mostly use of deprecated libtommath functions and ignoring their return values.  One warning is introduced that is safe to ignore.
Also, this commit re-writes how RSA keys are generated.  We pick a random number, make it odd, then set the high nibbles of p and q to be from a nibble pair chosen at random from a list of 32 such pairs such that the product pq's high nibble will be at least 128.  Then we test for primality, and loop if not.","This commit fixes all the warnings in lib/hcrypto/rsa-ltm.c, which were mostly use of deprecated libtommath functions and ignoring their return values.  One warning is introduced that is safe to ignore.
Also, this commit re-writes how RSA keys are generated.  We pick a random number, make it odd, then set the high nibbles of p and q to be from a nibble pair chosen at random from a list of 32 such pairs such that the product pq's high nibble will be at least 128.  Then we test for primality, and loop if not.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,702,2020-04-26T22:27:27Z,2020-04-27T18:21:43Z,2020-04-27T18:21:43Z,MERGED,True,306,313,2,https://github.com/nicowilliams,hcrypto: Fix warnings in LTM,3,[],https://github.com/heimdal/heimdal/pull/702,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/702#issuecomment-620076662,"This commit fixes all the warnings in lib/hcrypto/rsa-ltm.c, which were mostly use of deprecated libtommath functions and ignoring their return values.  One warning is introduced that is safe to ignore.
Also, this commit re-writes how RSA keys are generated.  We pick a random number, make it odd, then set the high nibbles of p and q to be from a nibble pair chosen at random from a list of 32 such pairs such that the product pq's high nibble will be at least 128.  Then we test for primality, and loop if not.","A side-by-side (split) view ignoring whitespace changes really helps, and makes the warnings fixes clearly mechanical.  The new RSA keygen code was reviewed by Viktor.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,703,2020-04-27T04:53:30Z,2020-04-27T05:18:15Z,2020-04-27T05:18:15Z,MERGED,True,70,100,6,https://github.com/lhoward,gss: update SAnon for draft-howard-gss-sanon-13,1,[],https://github.com/heimdal/heimdal/pull/703,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/703,draft-howard-gss-sanon-13 will move extended (RFC4757) flags from the NegoEx metadata to an optional component of the initial context token,draft-howard-gss-sanon-13 will move extended (RFC4757) flags from the NegoEx metadata to an optional component of the initial context token,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,705,2020-04-28T19:55:14Z,2020-11-06T17:55:32Z,2020-11-06T17:55:32Z,MERGED,True,4,1,2,https://github.com/duncan-mcewan,Issue 704,2,[],https://github.com/heimdal/heimdal/pull/705,https://github.com/duncan-mcewan,1,https://github.com/heimdal/heimdal/pull/705,Pull request to fix issue #704 (kadmin mis-parses commands that include '' escape characters).,Pull request to fix issue #704 (kadmin mis-parses commands that include '' escape characters).,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,706,2020-04-28T20:17:53Z,,2021-11-17T03:28:57Z,OPEN,False,1,2,2,https://github.com/quanah,Fix #696 - Find python as part of the configure process,2,[],https://github.com/heimdal/heimdal/pull/706,https://github.com/quanah,1,https://github.com/heimdal/heimdal/pull/706,"Finds the path to python as part of the configure process, as modern OSes only have ""python3""","Finds the path to python as part of the configure process, as modern OSes only have ""python3""",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,709,2020-05-01T15:21:48Z,2020-05-01T19:09:26Z,2020-05-01T19:09:26Z,MERGED,True,3,2,1,https://github.com/quanah,Deadlock in lib/krb5/mcache.c #432,1,[],https://github.com/heimdal/heimdal/pull/709,https://github.com/quanah,1,https://github.com/heimdal/heimdal/pull/709,"We've been hitting this deadlock with a customer using heimdal 7.7, found this was fixed back in 2018 but not integrated into 7.7.  Submitting PR for issue.","We've been hitting this deadlock with a customer using heimdal 7.7, found this was fixed back in 2018 but not integrated into 7.7.  Submitting PR for issue.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,709,2020-05-01T15:21:48Z,2020-05-01T19:09:26Z,2020-05-01T19:09:26Z,MERGED,True,3,2,1,https://github.com/quanah,Deadlock in lib/krb5/mcache.c #432,1,[],https://github.com/heimdal/heimdal/pull/709,https://github.com/coveralls,2,https://github.com/heimdal/heimdal/pull/709#issuecomment-622446181,"We've been hitting this deadlock with a customer using heimdal 7.7, found this was fixed back in 2018 but not integrated into 7.7.  Submitting PR for issue.",Coverage remained the same at 0.0% when pulling 91507ed on quanah:issue432-71 into 2f611f7 on heimdal:heimdal-7-1-branch.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,711,2020-05-14T01:36:01Z,2020-05-14T02:57:26Z,2020-05-14T02:57:26Z,MERGED,True,21,55,2,https://github.com/nicowilliams,Fix gss_krb5_copy_ccache() (broken by MEM:anon),1,[],https://github.com/heimdal/heimdal/pull/711,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/711,"Now that MEMORY:anonymous is... not re-resolvable, gss_krb5_copy_ccache()
is busted.  This commit makes it use gss_store_cred_into2().
This brings up a point: making MEMORY:anonymous what it is breaks
gss_inquire_cred_by_oid() with GSS_KRB5_COPY_CCACHE_X, so we may have to
back that out.","Now that MEMORY:anonymous is... not re-resolvable, gss_krb5_copy_ccache()
is busted.  This commit makes it use gss_store_cred_into2().
This brings up a point: making MEMORY:anonymous what it is breaks
gss_inquire_cred_by_oid() with GSS_KRB5_COPY_CCACHE_X, so we may have to
back that out.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,712,2020-05-17T21:56:28Z,2021-08-06T03:15:19Z,2021-08-08T10:42:11Z,MERGED,True,266,27,14,https://github.com/iboukris,channel-bindings enhancements,4,[],https://github.com/heimdal/heimdal/pull/712,https://github.com/iboukris,1,https://github.com/heimdal/heimdal/pull/712,"Following the discussion on krbdev (see also krb5/krb5#1047).
Add channel-bound flag to indicate to acceptor that the bindings were checked.
Implement KERB_AP_OPTIONS_CBT from MS-KILE, to enable the initiator to signal awareness of channel-bindings.","Following the discussion on krbdev (see also krb5/krb5#1047).
Add channel-bound flag to indicate to acceptor that the bindings were checked.
Implement KERB_AP_OPTIONS_CBT from MS-KILE, to enable the initiator to signal awareness of channel-bindings.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,712,2020-05-17T21:56:28Z,2021-08-06T03:15:19Z,2021-08-08T10:42:11Z,MERGED,True,266,27,14,https://github.com/iboukris,channel-bindings enhancements,4,[],https://github.com/heimdal/heimdal/pull/712,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/712#issuecomment-629874088,"Following the discussion on krbdev (see also krb5/krb5#1047).
Add channel-bound flag to indicate to acceptor that the bindings were checked.
Implement KERB_AP_OPTIONS_CBT from MS-KILE, to enable the initiator to signal awareness of channel-bindings.",Looks like you need to export krb5_get_ad() on Windows too,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,712,2020-05-17T21:56:28Z,2021-08-06T03:15:19Z,2021-08-08T10:42:11Z,MERGED,True,266,27,14,https://github.com/iboukris,channel-bindings enhancements,4,[],https://github.com/heimdal/heimdal/pull/712,https://github.com/iboukris,3,https://github.com/heimdal/heimdal/pull/712#issuecomment-630362665,"Following the discussion on krbdev (see also krb5/krb5#1047).
Add channel-bound flag to indicate to acceptor that the bindings were checked.
Implement KERB_AP_OPTIONS_CBT from MS-KILE, to enable the initiator to signal awareness of channel-bindings.","I have a crash in client-aware on travis, which I can't reproduce locally, reviewing the code..
krb5: initiator only bindings (client-aware)
Segmentation fault (core dumped)",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,712,2020-05-17T21:56:28Z,2021-08-06T03:15:19Z,2021-08-08T10:42:11Z,MERGED,True,266,27,14,https://github.com/iboukris,channel-bindings enhancements,4,[],https://github.com/heimdal/heimdal/pull/712,https://github.com/iboukris,4,https://github.com/heimdal/heimdal/pull/712#issuecomment-630834187,"Following the discussion on krbdev (see also krb5/krb5#1047).
Add channel-bound flag to indicate to acceptor that the bindings were checked.
Implement KERB_AP_OPTIONS_CBT from MS-KILE, to enable the initiator to signal awareness of channel-bindings.","Finally, the crash was not related to my changes but was due to the include logic i had in krb5.conf. So travis should pass now, while appveyor just hates me.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,712,2020-05-17T21:56:28Z,2021-08-06T03:15:19Z,2021-08-08T10:42:11Z,MERGED,True,266,27,14,https://github.com/iboukris,channel-bindings enhancements,4,[],https://github.com/heimdal/heimdal/pull/712,https://github.com/iboukris,5,https://github.com/heimdal/heimdal/pull/712#issuecomment-631072196,"Following the discussion on krbdev (see also krb5/krb5#1047).
Add channel-bound flag to indicate to acceptor that the bindings were checked.
Implement KERB_AP_OPTIONS_CBT from MS-KILE, to enable the initiator to signal awareness of channel-bindings.","I settled with an alternative krb5.conf for this test, the appveyor failure looks unrelated.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,712,2020-05-17T21:56:28Z,2021-08-06T03:15:19Z,2021-08-08T10:42:11Z,MERGED,True,266,27,14,https://github.com/iboukris,channel-bindings enhancements,4,[],https://github.com/heimdal/heimdal/pull/712,https://github.com/lhoward,6,https://github.com/heimdal/heimdal/pull/712#issuecomment-631139405,"Following the discussion on krbdev (see also krb5/krb5#1047).
Add channel-bound flag to indicate to acceptor that the bindings were checked.
Implement KERB_AP_OPTIONS_CBT from MS-KILE, to enable the initiator to signal awareness of channel-bindings.",krb5.conf misconfiguration likely shouldn't cause things to crash though – perhaps file a separate issue?,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,712,2020-05-17T21:56:28Z,2021-08-06T03:15:19Z,2021-08-08T10:42:11Z,MERGED,True,266,27,14,https://github.com/iboukris,channel-bindings enhancements,4,[],https://github.com/heimdal/heimdal/pull/712,https://github.com/lhoward,7,https://github.com/heimdal/heimdal/pull/712#issuecomment-631142319,"Following the discussion on krbdev (see also krb5/krb5#1047).
Add channel-bound flag to indicate to acceptor that the bindings were checked.
Implement KERB_AP_OPTIONS_CBT from MS-KILE, to enable the initiator to signal awareness of channel-bindings.","Can we add support for GSS_C_MA_CBINDING_CONFIRM and GSS_C_MA_CBINDING_MAY_CONFIRM, along with GSS_C_CB_CONFIRM_FLAG? This will require some changes to SPNEGO, I can probably help you with that (you could add GSS_C_CB_CONFIRM_FLAG and the attributes to flag_to_ma_map but the behaviour has to be change from ordering to filtering).",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,712,2020-05-17T21:56:28Z,2021-08-06T03:15:19Z,2021-08-08T10:42:11Z,MERGED,True,266,27,14,https://github.com/iboukris,channel-bindings enhancements,4,[],https://github.com/heimdal/heimdal/pull/712,https://github.com/iboukris,8,https://github.com/heimdal/heimdal/pull/712#issuecomment-631368248,"Following the discussion on krbdev (see also krb5/krb5#1047).
Add channel-bound flag to indicate to acceptor that the bindings were checked.
Implement KERB_AP_OPTIONS_CBT from MS-KILE, to enable the initiator to signal awareness of channel-bindings.","krb5.conf misconfiguration likely shouldn't cause things to crash though – perhaps file a separate issue?

Yeah, I wasn't able to reproduce locally, only in travis CI, I'll submit a PR to demonstrate it.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,712,2020-05-17T21:56:28Z,2021-08-06T03:15:19Z,2021-08-08T10:42:11Z,MERGED,True,266,27,14,https://github.com/iboukris,channel-bindings enhancements,4,[],https://github.com/heimdal/heimdal/pull/712,https://github.com/iboukris,9,https://github.com/heimdal/heimdal/pull/712#issuecomment-631382282,"Following the discussion on krbdev (see also krb5/krb5#1047).
Add channel-bound flag to indicate to acceptor that the bindings were checked.
Implement KERB_AP_OPTIONS_CBT from MS-KILE, to enable the initiator to signal awareness of channel-bindings.","Can we add support for GSS_C_MA_CBINDING_CONFIRM and GSS_C_MA_CBINDING_MAY_CONFIRM, along with GSS_C_CB_CONFIRM_FLAG? This will require some changes to SPNEGO, I can probably help you with that (you could add GSS_C_CB_CONFIRM_FLAG and the attributes to flag_to_ma_map but the behaviour has to be change from ordering to filtering).

I'll into it.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,712,2020-05-17T21:56:28Z,2021-08-06T03:15:19Z,2021-08-08T10:42:11Z,MERGED,True,266,27,14,https://github.com/iboukris,channel-bindings enhancements,4,[],https://github.com/heimdal/heimdal/pull/712,https://github.com/iboukris,10,https://github.com/heimdal/heimdal/pull/712#issuecomment-632587121,"Following the discussion on krbdev (see also krb5/krb5#1047).
Add channel-bound flag to indicate to acceptor that the bindings were checked.
Implement KERB_AP_OPTIONS_CBT from MS-KILE, to enable the initiator to signal awareness of channel-bindings.","Can we add support for GSS_C_MA_CBINDING_CONFIRM

Looking at the draft again, this would be a much larger change, involving on the wire changes and more API which I'm not clear about. While I did take GSS_C_CHANNEL_BOUND_FLAG from there, it seemed it can be an independent feature and I was hoping we can start with having it (along with the related changes in MIT to match heimdal semantics).
On the other hand MSFT's  KERB_AP_OPTIONS_CBT ad-flag isn't compatible with the cbinding signaling proposal since it provides no confirmation to the client (if the server doesn't pass binding, the flag is ignored), so I don't see how we can merge them and we'd probably need a different  flag, like CBINDING_AWARE. But here again, I was hoping we can land the krb5.conf option first.
On a broader context, my efforts are aimed to implement support for MSFT's LdapEnforceChannelBinding flag in samba, from:
https://support.microsoft.com/en-us/help/4034879/how-to-add-the-ldapenforcechannelbinding-registry-entry
By implementing KERB_AP_OPTIONS_CBT we can support LdapEnforceChannelBinding=1, and with the addition of GSS_C_CHANNEL_BOUND_FLAG we can implement LdapEnforceChannelBinding=2 and require the bindings on the server side for all clients.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,712,2020-05-17T21:56:28Z,2021-08-06T03:15:19Z,2021-08-08T10:42:11Z,MERGED,True,266,27,14,https://github.com/iboukris,channel-bindings enhancements,4,[],https://github.com/heimdal/heimdal/pull/712,https://github.com/iboukris,11,https://github.com/heimdal/heimdal/pull/712#issuecomment-632647197,"Following the discussion on krbdev (see also krb5/krb5#1047).
Add channel-bound flag to indicate to acceptor that the bindings were checked.
Implement KERB_AP_OPTIONS_CBT from MS-KILE, to enable the initiator to signal awareness of channel-bindings.","I addressed the minor comments and added man entry for client_aware_channel_bindings. Windows clients from a given version set this flag blindly on all ap-req, since they can declare that all their applications would provide bindings when over secure-channel. In open systems it is harder to claim that, but the krb5.conf option allows the admin to declare it and gain the protection.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,712,2020-05-17T21:56:28Z,2021-08-06T03:15:19Z,2021-08-08T10:42:11Z,MERGED,True,266,27,14,https://github.com/iboukris,channel-bindings enhancements,4,[],https://github.com/heimdal/heimdal/pull/712,https://github.com/lhoward,12,https://github.com/heimdal/heimdal/pull/712#issuecomment-632960327,"Following the discussion on krbdev (see also krb5/krb5#1047).
Add channel-bound flag to indicate to acceptor that the bindings were checked.
Implement KERB_AP_OPTIONS_CBT from MS-KILE, to enable the initiator to signal awareness of channel-bindings.","Sorry yes, I didn't mean add support to the Kerberos mechanism for channel binding confirmation, just put the necessary mechanism attribute infrastructure in so other mechanisms could use it. But, we can do this as a separate change.
In any case, @nicowilliams really needs to review this as he understands channel bindings better than I.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,712,2020-05-17T21:56:28Z,2021-08-06T03:15:19Z,2021-08-08T10:42:11Z,MERGED,True,266,27,14,https://github.com/iboukris,channel-bindings enhancements,4,[],https://github.com/heimdal/heimdal/pull/712,https://github.com/iboukris,13,https://github.com/heimdal/heimdal/pull/712#issuecomment-635291366,"Following the discussion on krbdev (see also krb5/krb5#1047).
Add channel-bound flag to indicate to acceptor that the bindings were checked.
Implement KERB_AP_OPTIONS_CBT from MS-KILE, to enable the initiator to signal awareness of channel-bindings.",Hi @nicowilliams can you take a look here?  Thanks!,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,712,2020-05-17T21:56:28Z,2021-08-06T03:15:19Z,2021-08-08T10:42:11Z,MERGED,True,266,27,14,https://github.com/iboukris,channel-bindings enhancements,4,[],https://github.com/heimdal/heimdal/pull/712,https://github.com/nicowilliams,14,https://github.com/heimdal/heimdal/pull/712#issuecomment-654582349,"Following the discussion on krbdev (see also krb5/krb5#1047).
Add channel-bound flag to indicate to acceptor that the bindings were checked.
Implement KERB_AP_OPTIONS_CBT from MS-KILE, to enable the initiator to signal awareness of channel-bindings.","I did have one comment, about _krb5_get_ad() returning ENOENT when it doesn't find any ad of the given type.  I'll wait a bit and merge, and we can always fix it later.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,712,2020-05-17T21:56:28Z,2021-08-06T03:15:19Z,2021-08-08T10:42:11Z,MERGED,True,266,27,14,https://github.com/iboukris,channel-bindings enhancements,4,[],https://github.com/heimdal/heimdal/pull/712,https://github.com/iboukris,15,https://github.com/heimdal/heimdal/pull/712#issuecomment-894777653,"Following the discussion on krbdev (see also krb5/krb5#1047).
Add channel-bound flag to indicate to acceptor that the bindings were checked.
Implement KERB_AP_OPTIONS_CBT from MS-KILE, to enable the initiator to signal awareness of channel-bindings.",Thanks all!,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,714,2020-05-20T17:30:02Z,2020-05-31T15:59:34Z,2020-05-31T15:59:34Z,MERGED,True,1,1,1,https://github.com/earlchew,[libedit/configure.ac] Search libtermcap for tgetent,1,[],https://github.com/heimdal/heimdal/pull/714,https://github.com/earlchew,1,https://github.com/heimdal/heimdal/pull/714,"Also search libtermcap.
Signed-off-by: Earl Chew earl_chew@yahoo.com","Also search libtermcap.
Signed-off-by: Earl Chew earl_chew@yahoo.com",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,714,2020-05-20T17:30:02Z,2020-05-31T15:59:34Z,2020-05-31T15:59:34Z,MERGED,True,1,1,1,https://github.com/earlchew,[libedit/configure.ac] Search libtermcap for tgetent,1,[],https://github.com/heimdal/heimdal/pull/714,https://github.com/jaltman,2,https://github.com/heimdal/heimdal/pull/714#issuecomment-635120937,"Also search libtermcap.
Signed-off-by: Earl Chew earl_chew@yahoo.com","Hi @earlchew,
Thanks for the contribution.  Could you update the commit message with some details about the platforms on which this change is necessary?
Thanks.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,714,2020-05-20T17:30:02Z,2020-05-31T15:59:34Z,2020-05-31T15:59:34Z,MERGED,True,1,1,1,https://github.com/earlchew,[libedit/configure.ac] Search libtermcap for tgetent,1,[],https://github.com/heimdal/heimdal/pull/714,https://github.com/earlchew,3,https://github.com/heimdal/heimdal/pull/714#issuecomment-636485528,"Also search libtermcap.
Signed-off-by: Earl Chew earl_chew@yahoo.com","I took a closer look at the actual messages in config.log and the underlying issue. It seems that although -ltermcap fixes the configure issue, I found that on the more recent commit 872222d also fixes the issue that I see.
With that in mind, I think it's better to skip my original proposed change, and just tidy up the error message as I'm suggesting in  180fc33.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,715,2020-05-22T10:06:20Z,2020-05-26T17:10:12Z,2020-05-26T17:10:13Z,MERGED,True,4,2,2,https://github.com/iboukris,krb5.conf include issue,2,[],https://github.com/heimdal/heimdal/pull/715,https://github.com/iboukris,1,https://github.com/heimdal/heimdal/pull/715,Trying to reproduce the krb5.conf issue I had in PR #712 as a separate test.,Trying to reproduce the krb5.conf issue I had in PR #712 as a separate test.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,715,2020-05-22T10:06:20Z,2020-05-26T17:10:12Z,2020-05-26T17:10:13Z,MERGED,True,4,2,2,https://github.com/iboukris,krb5.conf include issue,2,[],https://github.com/heimdal/heimdal/pull/715,https://github.com/iboukris,2,https://github.com/heimdal/heimdal/pull/715#issuecomment-632616746,Trying to reproduce the krb5.conf issue I had in PR #712 as a separate test.,"====== krb5.conf include issue.
Segmentation fault (core dumped)",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,715,2020-05-22T10:06:20Z,2020-05-26T17:10:12Z,2020-05-26T17:10:13Z,MERGED,True,4,2,2,https://github.com/iboukris,krb5.conf include issue,2,[],https://github.com/heimdal/heimdal/pull/715,https://github.com/iboukris,3,https://github.com/heimdal/heimdal/pull/715#issuecomment-633144163,Trying to reproduce the krb5.conf issue I had in PR #712 as a separate test.,"With some clumsy debugging on travis, here's the backtrace. The script in .travis.yml to find cores and print the backtrace, needs fixing.
$ if [ $TRAVIS_OS_NAME = linux ]; then echo ""thread apply all bt"" > x; find . -name core -exec gdb -batch -x x /home/travis/build/heimdal/heimdal/ci-build/lib/gssapi/.libs/lt-test_context {} \; ; fi
[New LWP 16988]
[Thread debugging using libthread_db enabled]
Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".
Core was generated by `/home/travis/build/heimdal/heimdal/ci-build/lib/gssapi/.libs/lt-test_context ho'.
Program terminated with signal SIGSEGV, Segmentation fault.
#0  0x00007f2d2ba05cc0 in vfprintf () from /lib/x86_64-linux-gnu/libc.so.6
Thread 1 (Thread 0x7f2d2ccf5740 (LWP 16988)):
#0  0x00007f2d2ba05cc0 in vfprintf () from /lib/x86_64-linux-gnu/libc.so.6
#1  0x00007f2d2ba2d773 in vasprintf () from /lib/x86_64-linux-gnu/libc.so.6
#2  0x00007f2d2ae855d6 in heim_vset_error_message (context=<optimized out>, ret=<optimized out>, fmt=<optimized out>, args=<optimized out>) at /home/travis/build/heimdal/heimdal/lib/base/error_string.c:74
#3  heim_set_error_message (context=0x1107170, ret=2, fmt=0x7f2d2ae8c0d3 ""%s:%u: %s"") at /home/travis/build/heimdal/heimdal/lib/base/error_string.c:56
#4  0x00007f2d2ae7fdfc in heim_config_parse_file_multi (context=0x1107170, fname=0x11071c0 ""../../tests/gss/new_clients_k5.conf"", res=0x7ffcac11b778) at /home/travis/build/heimdal/heimdal/lib/base/config_file.c:674
#5  0x00007f2d2ae81f40 in heim_set_config_files (context=0x1107170, filenames=<optimized out>, res=0x7ffcac11b778) at /home/travis/build/heimdal/heimdal/lib/base/context.c:356
#6  0x00007f2d2c639c71 in krb5_set_config_files (context=<optimized out>, filenames=0x7ffcac11a458) at /home/travis/build/heimdal/heimdal/lib/krb5/context.c:693
#7  krb5_init_context (context=0x607888 <context>) at /home/travis/build/heimdal/heimdal/lib/krb5/context.c:460
#8  0x0000000000402255 in main (argc=2, argv=0x7ffcac11ba58) at /home/travis/build/heimdal/heimdal/lib/gssapi/test_context.c:726",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,715,2020-05-22T10:06:20Z,2020-05-26T17:10:12Z,2020-05-26T17:10:13Z,MERGED,True,4,2,2,https://github.com/iboukris,krb5.conf include issue,2,[],https://github.com/heimdal/heimdal/pull/715,https://github.com/jaltman,4,https://github.com/heimdal/heimdal/pull/715#issuecomment-633151405,Trying to reproduce the krb5.conf issue I had in PR #712 as a separate test.,"Please try modifying heim_config_parse_debug() to initialize
*lineno = 0;
*error_message = """";",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,715,2020-05-22T10:06:20Z,2020-05-26T17:10:12Z,2020-05-26T17:10:13Z,MERGED,True,4,2,2,https://github.com/iboukris,krb5.conf include issue,2,[],https://github.com/heimdal/heimdal/pull/715,https://github.com/jaltman,5,https://github.com/heimdal/heimdal/pull/715#issuecomment-633151831,Trying to reproduce the krb5.conf issue I had in PR #712 as a separate test.,I'm also not convinced that the heim_set_error_message() at lib/base/error_string.c:56 is the right thing to do since heim_config_parse_debug() might have already set its own error message that will be deleted and replaced.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,715,2020-05-22T10:06:20Z,2020-05-26T17:10:12Z,2020-05-26T17:10:13Z,MERGED,True,4,2,2,https://github.com/iboukris,krb5.conf include issue,2,[],https://github.com/heimdal/heimdal/pull/715,https://github.com/jaltman,6,https://github.com/heimdal/heimdal/pull/715#issuecomment-633152601,Trying to reproduce the krb5.conf issue I had in PR #712 as a separate test.,@iboukris good job with the reproduction!,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,715,2020-05-22T10:06:20Z,2020-05-26T17:10:12Z,2020-05-26T17:10:13Z,MERGED,True,4,2,2,https://github.com/iboukris,krb5.conf include issue,2,[],https://github.com/heimdal/heimdal/pull/715,https://github.com/iboukris,7,https://github.com/heimdal/heimdal/pull/715#issuecomment-633229030,Trying to reproduce the krb5.conf issue I had in PR #712 as a separate test.,"Initializing lineno and err_message does prevent the crash, but the test still fails, meaning the include didn't work. btw, disabling optimization with CFLAGS=-O0 also has prevented the crash.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,715,2020-05-22T10:06:20Z,2020-05-26T17:10:12Z,2020-05-26T17:10:13Z,MERGED,True,4,2,2,https://github.com/iboukris,krb5.conf include issue,2,[],https://github.com/heimdal/heimdal/pull/715,https://github.com/jaltman,8,https://github.com/heimdal/heimdal/pull/715#issuecomment-633234645,Trying to reproduce the krb5.conf issue I had in PR #712 as a separate test.,"The crash is because 'str' in heim_config_parse_file_multi() is uninitialized when heim_set_error_message() is called at lib/base/error_string.c:56.    Disabling optimization prevents the crash because doing so initializes 'str'.
That the crash occurred indicates that the contents of the configuration file are invalid.   This should result in the failure of krb5_init_context().   It might be worth 'cat'ing the contents of new_clients_k5.conf and the path that include @srcdirabs@/krb5.conf  resolves to.
I suspect that the error returned by heim_config_parse_file_multi() is getting discarded which is why the krb5_init_context() call from lib/gssapi/test_context.c is not failing.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,715,2020-05-22T10:06:20Z,2020-05-26T17:10:12Z,2020-05-26T17:10:13Z,MERGED,True,4,2,2,https://github.com/iboukris,krb5.conf include issue,2,[],https://github.com/heimdal/heimdal/pull/715,https://github.com/jaltman,9,https://github.com/heimdal/heimdal/pull/715#issuecomment-633237837,Trying to reproduce the krb5.conf issue I had in PR #712 as a separate test.,"Indeed, krb5_config_parse_dir_multi() includes
        ret = heim_config_parse_file_multi(context, path, res); free(path); if (ret == ENOMEM) { (void) closedir(d); return heim_enomem(context); } /* Ignore malformed config files so we don't lock out admins, etc... */
which is great except for the fact that by throwing away the error and returning 0 we ignore the krb5 error message which we constructed to explain what was wrong with the config file.
Ignoring invalid include files was introduced as part of commit fe43be8.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,715,2020-05-22T10:06:20Z,2020-05-26T17:10:12Z,2020-05-26T17:10:13Z,MERGED,True,4,2,2,https://github.com/iboukris,krb5.conf include issue,2,[],https://github.com/heimdal/heimdal/pull/715,https://github.com/jaltman,10,https://github.com/heimdal/heimdal/pull/715#issuecomment-633240159,Trying to reproduce the krb5.conf issue I had in PR #712 as a separate test.,"Try adding
diff --git a/lib/base/config_file.c b/lib/base/config_file.c
index c41f4d624..2e3d9c81f 100644
--- a/lib/base/config_file.c
+++ b/lib/base/config_file.c
@@ -521,12 +521,14 @@ heim_config_parse_dir_multi(heim_context context,
             return heim_enomem(context);
         }
         ret = heim_config_parse_file_multi(context, path, res);
+        /* Ignore malformed config files so we don't lock out admins, etc... */
+       if (ret && ret != ENOMEM)
+           heim_warnx(context, ""Ignoring '%s'"", path);
         free(path);
         if (ret == ENOMEM) {
             (void) closedir(d);
             return heim_enomem(context);
         }
-        /* Ignore malformed config files so we don't lock out admins, etc... */
     }
     (void) closedir(d);
     return 0;
which should send the include file parsing error to stderr but permit execution to continue.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,715,2020-05-22T10:06:20Z,2020-05-26T17:10:12Z,2020-05-26T17:10:13Z,MERGED,True,4,2,2,https://github.com/iboukris,krb5.conf include issue,2,[],https://github.com/heimdal/heimdal/pull/715,https://github.com/iboukris,11,https://github.com/heimdal/heimdal/pull/715#issuecomment-633245121,Trying to reproduce the krb5.conf issue I had in PR #712 as a separate test.,"It might be worth 'cat'ing the contents of new_clients_k5.conf and the path that include @srcdirabs@/krb5.conf resolves to.

Oh, I now remember being here before, I'll try to build locally with a different build dir like in travis, that was probably my error all along. Thanks!

The crash is because 'str' in heim_config_parse_file_multi() is uninitialized

Would it make sense to initialize it in the callers like I did now?

Try adding ... which should send the include file parsing error to stderr but permit execution to continue.

Done, but travis didn't pick it up, I'll re-push later.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,715,2020-05-22T10:06:20Z,2020-05-26T17:10:12Z,2020-05-26T17:10:13Z,MERGED,True,4,2,2,https://github.com/iboukris,krb5.conf include issue,2,[],https://github.com/heimdal/heimdal/pull/715,https://github.com/jaltman,12,https://github.com/heimdal/heimdal/pull/715#issuecomment-633263311,Trying to reproduce the krb5.conf issue I had in PR #712 as a separate test.,"Would it make sense to initialize it in the callers like I did now?

It can be initialized there as well but functions with output parameters should not complete without initializing the contents.  Otherwise every call site must initialize the parameters before the call and when a developer forgets to do so we end up with exactly this problem.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,715,2020-05-22T10:06:20Z,2020-05-26T17:10:12Z,2020-05-26T17:10:13Z,MERGED,True,4,2,2,https://github.com/iboukris,krb5.conf include issue,2,[],https://github.com/heimdal/heimdal/pull/715,https://github.com/iboukris,13,https://github.com/heimdal/heimdal/pull/715#issuecomment-633271809,Trying to reproduce the krb5.conf issue I had in PR #712 as a separate test.,"It can be initialized there as well but functions with output parameters should not complete without initializing the contents.

Got it, I'll change it back.

Oh, I now remember being here before, I'll try to build locally with a different build dir like in travis, that was probably my error all along.

Yeah it was it, and I was already here in my last comment on PR #656..",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,715,2020-05-22T10:06:20Z,2020-05-26T17:10:12Z,2020-05-26T17:10:13Z,MERGED,True,4,2,2,https://github.com/iboukris,krb5.conf include issue,2,[],https://github.com/heimdal/heimdal/pull/715,https://github.com/jaltman,14,https://github.com/heimdal/heimdal/pull/715#issuecomment-633306296,Trying to reproduce the krb5.conf issue I had in PR #712 as a separate test.,That change certainly produced a large number of seg faults.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,715,2020-05-22T10:06:20Z,2020-05-26T17:10:12Z,2020-05-26T17:10:13Z,MERGED,True,4,2,2,https://github.com/iboukris,krb5.conf include issue,2,[],https://github.com/heimdal/heimdal/pull/715,https://github.com/iboukris,15,https://github.com/heimdal/heimdal/pull/715#issuecomment-633409404,Trying to reproduce the krb5.conf issue I had in PR #712 as a separate test.,"Here we can see the core dump printing is fixed, now I'll add the fix for the crash:
https://travis-ci.org/github/heimdal/heimdal/builds/690825040",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,715,2020-05-22T10:06:20Z,2020-05-26T17:10:12Z,2020-05-26T17:10:13Z,MERGED,True,4,2,2,https://github.com/iboukris,krb5.conf include issue,2,[],https://github.com/heimdal/heimdal/pull/715,https://github.com/jaltman,16,https://github.com/heimdal/heimdal/pull/715#issuecomment-633815114,Trying to reproduce the krb5.conf issue I had in PR #712 as a separate test.,"@iboukris I've pushed #719 which has some overlap with this series.   In particular, it includes a better version of the malformed config warnings and it includes the initialize error output parameters change.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,715,2020-05-22T10:06:20Z,2020-05-26T17:10:12Z,2020-05-26T17:10:13Z,MERGED,True,4,2,2,https://github.com/iboukris,krb5.conf include issue,2,[],https://github.com/heimdal/heimdal/pull/715,https://github.com/iboukris,17,https://github.com/heimdal/heimdal/pull/715#issuecomment-633819972,Trying to reproduce the krb5.conf issue I had in PR #712 as a separate test.,"I removed the overlapping commits, left the travis fix and the test which if good could be moved to #719. Looks like Nico fixed the appveyor failure.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,718,2020-05-25T20:00:48Z,2020-05-28T05:50:54Z,2020-05-28T05:50:54Z,MERGED,True,65,123,13,https://github.com/nicowilliams,"Fix use of KRB5_USE_PATH_TOKENS, refactor a bit",5,[],https://github.com/heimdal/heimdal/pull/718,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/718,"Also, try to narrow down the nature of the Appveyor pacman failures.","Also, try to narrow down the nature of the Appveyor pacman failures.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,719,2020-05-26T02:59:44Z,2020-05-26T16:52:02Z,2020-05-26T16:52:02Z,CLOSED,False,94,60,11,https://github.com/jaltman,fix master to run on windows ,11,[],https://github.com/heimdal/heimdal/pull/719,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/719,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,719,2020-05-26T02:59:44Z,2020-05-26T16:52:02Z,2020-05-26T16:52:02Z,CLOSED,False,94,60,11,https://github.com/jaltman,fix master to run on windows ,11,[],https://github.com/heimdal/heimdal/pull/719,https://github.com/coveralls,2,https://github.com/heimdal/heimdal/pull/719#issuecomment-633792866,,Coverage decreased (-0.0007%) to 54.594% when pulling 4ea964f on jaltman/fix-windows-on-master into e3dbc89 on master.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,719,2020-05-26T02:59:44Z,2020-05-26T16:52:02Z,2020-05-26T16:52:02Z,CLOSED,False,94,60,11,https://github.com/jaltman,fix master to run on windows ,11,[],https://github.com/heimdal/heimdal/pull/719,https://github.com/nicowilliams,3,https://github.com/heimdal/heimdal/pull/719#issuecomment-634146400,,Pushed to master as e3dbc89..f0de5f5.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,720,2020-05-26T17:20:58Z,2020-05-26T20:12:10Z,2020-05-26T20:12:14Z,MERGED,True,9,4,3,https://github.com/jaltman,Pullups from master for 7-1-branch,3,[],https://github.com/heimdal/heimdal/pull/720,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/720,"appveyor: Install zstd before other pkgs
krb5: krb5_config_parse_debug initialize output parameters
lib/krb5: not_found() do not substitute the error text","appveyor: Install zstd before other pkgs
krb5: krb5_config_parse_debug initialize output parameters
lib/krb5: not_found() do not substitute the error text",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,720,2020-05-26T17:20:58Z,2020-05-26T20:12:10Z,2020-05-26T20:12:14Z,MERGED,True,9,4,3,https://github.com/jaltman,Pullups from master for 7-1-branch,3,[],https://github.com/heimdal/heimdal/pull/720,https://github.com/coveralls,2,https://github.com/heimdal/heimdal/pull/720#issuecomment-634232561,"appveyor: Install zstd before other pkgs
krb5: krb5_config_parse_debug initialize output parameters
lib/krb5: not_found() do not substitute the error text",Coverage remained the same at 0.0% when pulling d6327fa on jaltman/for-heimdal-7-1-branch into a028bfb on heimdal-7-1-branch.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,721,2020-05-27T06:42:07Z,2020-05-27T13:01:23Z,2020-05-27T13:01:37Z,MERGED,True,9,3,3,https://github.com/jaltman,Fix some recent master breakage,3,[],https://github.com/heimdal/heimdal/pull/721,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/721,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,721,2020-05-27T06:42:07Z,2020-05-27T13:01:23Z,2020-05-27T13:01:37Z,MERGED,True,9,3,3,https://github.com/jaltman,Fix some recent master breakage,3,[],https://github.com/heimdal/heimdal/pull/721,https://github.com/coveralls,2,https://github.com/heimdal/heimdal/pull/721#issuecomment-634484293,,Coverage increased (+0.001%) to 54.604% when pulling fd6174b on jaltman/master-fixes into 662dfbb on master.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,722,2020-05-28T00:26:48Z,2020-05-28T01:54:27Z,2020-05-28T02:05:30Z,MERGED,True,22,16,4,https://github.com/abartlet,Check some error returns from *asprintf(),1,[],https://github.com/heimdal/heimdal/pull/722,https://github.com/abartlet,1,https://github.com/heimdal/heimdal/pull/722,"This avoids these compiler warnings on Ubuntu 18.04
gcc version 7.5.0 (Ubuntu 7.5.0-3ubuntu1~18.04)
expand_path.c: In function ‘expand_token’:
expand_path.c:493:17: warning: ignoring return value of ‘asprintf’, declared with attribute warn_unused_result [-Wunused-result]
asprintf(&arg, ""%.*s"", (int)(token_end - colon - 1), colon + 1);
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
log.c: In function ‘fmtkv’:
log.c:646:5: warning: ignoring return value of ‘vasprintf’, declared with attribute warn_unused_result [-Wunused-result]
vasprintf(&buf1, fmt, ap);
^~~~~~~~~~~~~~~~~~~~~~~~~
mech/context.c: In function ‘gss_mg_set_error_string’:
mech/context.c:212:5: warning: ignoring return value of ‘vasprintf’, declared with attribute warn_unused_result [-Wunused-result]
(void) vasprintf(&str, fmt, ap);
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mech/context.c: In function ‘_gss_mg_log_name’:
mech/context.c:319:6: warning: ignoring return value of ‘vasprintf’, declared with attribute warn_unused_result [-Wunused-result]
(void) vasprintf(&str, fmt, ap);
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mech/context.c: In function ‘_gss_mg_log_cred’:
mech/context.c:346:5: warning: ignoring return value of ‘vasprintf’, declared with attribute warn_unused_result [-Wunused-result]
(void) vasprintf(&str, fmt, ap);
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
kerberos5.c: In function ‘_kdc_set_e_text’:
kerberos5.c:338:5: warning: ignoring return value of ‘vasprintf’, declared with attribute warn_unused_result [-Wunused-result]
vasprintf(&e_text, fmt, ap);
^~~~~~~~~~~~~~~~~~~~~~~~~~~
Signed-off-by: Andrew Bartlett abartlet@samba.org","This avoids these compiler warnings on Ubuntu 18.04
gcc version 7.5.0 (Ubuntu 7.5.0-3ubuntu1~18.04)
expand_path.c: In function ‘expand_token’:
expand_path.c:493:17: warning: ignoring return value of ‘asprintf’, declared with attribute warn_unused_result [-Wunused-result]
asprintf(&arg, ""%.*s"", (int)(token_end - colon - 1), colon + 1);
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
log.c: In function ‘fmtkv’:
log.c:646:5: warning: ignoring return value of ‘vasprintf’, declared with attribute warn_unused_result [-Wunused-result]
vasprintf(&buf1, fmt, ap);
^~~~~~~~~~~~~~~~~~~~~~~~~
mech/context.c: In function ‘gss_mg_set_error_string’:
mech/context.c:212:5: warning: ignoring return value of ‘vasprintf’, declared with attribute warn_unused_result [-Wunused-result]
(void) vasprintf(&str, fmt, ap);
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mech/context.c: In function ‘_gss_mg_log_name’:
mech/context.c:319:6: warning: ignoring return value of ‘vasprintf’, declared with attribute warn_unused_result [-Wunused-result]
(void) vasprintf(&str, fmt, ap);
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mech/context.c: In function ‘_gss_mg_log_cred’:
mech/context.c:346:5: warning: ignoring return value of ‘vasprintf’, declared with attribute warn_unused_result [-Wunused-result]
(void) vasprintf(&str, fmt, ap);
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
kerberos5.c: In function ‘_kdc_set_e_text’:
kerberos5.c:338:5: warning: ignoring return value of ‘vasprintf’, declared with attribute warn_unused_result [-Wunused-result]
vasprintf(&e_text, fmt, ap);
^~~~~~~~~~~~~~~~~~~~~~~~~~~
Signed-off-by: Andrew Bartlett abartlet@samba.org",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,722,2020-05-28T00:26:48Z,2020-05-28T01:54:27Z,2020-05-28T02:05:30Z,MERGED,True,22,16,4,https://github.com/abartlet,Check some error returns from *asprintf(),1,[],https://github.com/heimdal/heimdal/pull/722,https://github.com/jaltman,2,https://github.com/heimdal/heimdal/pull/722#issuecomment-635046751,"This avoids these compiler warnings on Ubuntu 18.04
gcc version 7.5.0 (Ubuntu 7.5.0-3ubuntu1~18.04)
expand_path.c: In function ‘expand_token’:
expand_path.c:493:17: warning: ignoring return value of ‘asprintf’, declared with attribute warn_unused_result [-Wunused-result]
asprintf(&arg, ""%.*s"", (int)(token_end - colon - 1), colon + 1);
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
log.c: In function ‘fmtkv’:
log.c:646:5: warning: ignoring return value of ‘vasprintf’, declared with attribute warn_unused_result [-Wunused-result]
vasprintf(&buf1, fmt, ap);
^~~~~~~~~~~~~~~~~~~~~~~~~
mech/context.c: In function ‘gss_mg_set_error_string’:
mech/context.c:212:5: warning: ignoring return value of ‘vasprintf’, declared with attribute warn_unused_result [-Wunused-result]
(void) vasprintf(&str, fmt, ap);
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mech/context.c: In function ‘_gss_mg_log_name’:
mech/context.c:319:6: warning: ignoring return value of ‘vasprintf’, declared with attribute warn_unused_result [-Wunused-result]
(void) vasprintf(&str, fmt, ap);
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mech/context.c: In function ‘_gss_mg_log_cred’:
mech/context.c:346:5: warning: ignoring return value of ‘vasprintf’, declared with attribute warn_unused_result [-Wunused-result]
(void) vasprintf(&str, fmt, ap);
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
kerberos5.c: In function ‘_kdc_set_e_text’:
kerberos5.c:338:5: warning: ignoring return value of ‘vasprintf’, declared with attribute warn_unused_result [-Wunused-result]
vasprintf(&e_text, fmt, ap);
^~~~~~~~~~~~~~~~~~~~~~~~~~~
Signed-off-by: Andrew Bartlett abartlet@samba.org",Thanks @abartlet,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,723,2020-05-28T00:46:22Z,2020-05-28T04:23:44Z,2020-05-28T04:23:44Z,MERGED,True,8,5,2,https://github.com/abartlet,Catch many compile warnings as errors in Travis CI with -Werror via --enable-developer,2,[],https://github.com/heimdal/heimdal/pull/723,https://github.com/abartlet,1,https://github.com/heimdal/heimdal/pull/723,"This should make it harder to introduce problem code into Heimdal and make it easier to import a new Heimdal version into Samba (where very strict warning options are in use).
Compiler warning options are very compiler version dependent so this list will need to be refined as the compiler used in Travis CI is upgraded.","This should make it harder to introduce problem code into Heimdal and make it easier to import a new Heimdal version into Samba (where very strict warning options are in use).
Compiler warning options are very compiler version dependent so this list will need to be refined as the compiler used in Travis CI is upgraded.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,723,2020-05-28T00:46:22Z,2020-05-28T04:23:44Z,2020-05-28T04:23:44Z,MERGED,True,8,5,2,https://github.com/abartlet,Catch many compile warnings as errors in Travis CI with -Werror via --enable-developer,2,[],https://github.com/heimdal/heimdal/pull/723,https://github.com/abartlet,2,https://github.com/heimdal/heimdal/pull/723#issuecomment-635023421,"This should make it harder to introduce problem code into Heimdal and make it easier to import a new Heimdal version into Samba (where very strict warning options are in use).
Compiler warning options are very compiler version dependent so this list will need to be refined as the compiler used in Travis CI is upgraded.","The single warning in the test code for -Wempty-body would be worth fixing in a separate commit, but I'm trying to just land this for now.
test_cipher.c: In function ‘test_cipher’:
test_cipher.c:299:19: warning: suggest braces around empty body in an ‘if’ statement [-Wempty-body]
  /* XXXX check  */;
                   ^",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,724,2020-05-28T02:21:07Z,2021-06-30T10:08:38Z,2021-06-30T10:08:38Z,CLOSED,False,5,3,2,https://github.com/abartlet,kdc: Provide flag to hint to KDC that this is a FAST key lookup,1,[],https://github.com/heimdal/heimdal/pull/724,https://github.com/abartlet,1,https://github.com/heimdal/heimdal/pull/724,"For Samba the FAST key is not stored in the replicated DB, so
this helps Samba find it in the Samba hdb module.
Likewise, the armor key might be either a server or a krbtgt
key so call this with the right flags.
In-tree databases in Heimdal do not use these flags.
Signed-off-by: Andrew Bartlett abartlet@samba.org","For Samba the FAST key is not stored in the replicated DB, so
this helps Samba find it in the Samba hdb module.
Likewise, the armor key might be either a server or a krbtgt
key so call this with the right flags.
In-tree databases in Heimdal do not use these flags.
Signed-off-by: Andrew Bartlett abartlet@samba.org",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,724,2020-05-28T02:21:07Z,2021-06-30T10:08:38Z,2021-06-30T10:08:38Z,CLOSED,False,5,3,2,https://github.com/abartlet,kdc: Provide flag to hint to KDC that this is a FAST key lookup,1,[],https://github.com/heimdal/heimdal/pull/724,https://github.com/abartlet,2,https://github.com/heimdal/heimdal/pull/724#issuecomment-871270744,"For Samba the FAST key is not stored in the replicated DB, so
this helps Samba find it in the Samba hdb module.
Likewise, the armor key might be either a server or a krbtgt
key so call this with the right flags.
In-tree databases in Heimdal do not use these flags.
Signed-off-by: Andrew Bartlett abartlet@samba.org",Replaced by #789,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,725,2020-05-28T03:28:30Z,2020-05-28T04:22:41Z,2020-05-28T04:29:52Z,MERGED,True,335,121,16,https://github.com/jaltman,Fix krb5_ccache plugins on master ,3,[],https://github.com/heimdal/heimdal/pull/725,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/725,"lib/krb5: krb5_get_instance does not work on Windows 7
base: common_plugin.h define KRB5_CALLCONV / KRB5_LIB_CALL
krb5: krb5_cc_ops backward compatibility and extensibility","lib/krb5: krb5_get_instance does not work on Windows 7
base: common_plugin.h define KRB5_CALLCONV / KRB5_LIB_CALL
krb5: krb5_cc_ops backward compatibility and extensibility",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,726,2020-05-28T05:53:52Z,2020-07-13T20:56:19Z,2020-07-13T20:56:20Z,CLOSED,False,283,98,26,https://github.com/nicowilliams,32-bit time_t enhancements,4,[],https://github.com/heimdal/heimdal/pull/726,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/726,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,726,2020-05-28T05:53:52Z,2020-07-13T20:56:19Z,2020-07-13T20:56:20Z,CLOSED,False,283,98,26,https://github.com/nicowilliams,32-bit time_t enhancements,4,[],https://github.com/heimdal/heimdal/pull/726,https://github.com/quanah,2,https://github.com/heimdal/heimdal/pull/726#issuecomment-635435156,,Does this help address issue #533 ?,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,726,2020-05-28T05:53:52Z,2020-07-13T20:56:19Z,2020-07-13T20:56:20Z,CLOSED,False,283,98,26,https://github.com/nicowilliams,32-bit time_t enhancements,4,[],https://github.com/heimdal/heimdal/pull/726,https://github.com/jaltman,3,https://github.com/heimdal/heimdal/pull/726#issuecomment-635443754,,The intent of this change is to potentially handle Kerberos ticket lifetimes post-2038.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,726,2020-05-28T05:53:52Z,2020-07-13T20:56:19Z,2020-07-13T20:56:20Z,CLOSED,False,283,98,26,https://github.com/nicowilliams,32-bit time_t enhancements,4,[],https://github.com/heimdal/heimdal/pull/726,https://github.com/jaltman,4,https://github.com/heimdal/heimdal/pull/726#issuecomment-657789392,,This PR was replaced by #743,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,727,2020-05-28T06:06:46Z,2020-05-28T15:08:56Z,2020-05-28T15:09:02Z,MERGED,True,80,10,1,https://github.com/nicowilliams,kinit: Restore get_switch_cache behavior from 5bbe7c8dc,1,[],https://github.com/heimdal/heimdal/pull/727,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/727,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,727,2020-05-28T06:06:46Z,2020-05-28T15:08:56Z,2020-05-28T15:09:02Z,MERGED,True,80,10,1,https://github.com/nicowilliams,kinit: Restore get_switch_cache behavior from 5bbe7c8dc,1,[],https://github.com/heimdal/heimdal/pull/727,https://github.com/coveralls,2,https://github.com/heimdal/heimdal/pull/727#issuecomment-635151628,,Coverage increased (+0.007%) to 52.743% when pulling 997d184 on kinit into 886cc60 on master.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,728,2020-05-28T08:24:16Z,2020-05-28T15:10:58Z,2020-05-28T15:10:58Z,MERGED,True,16,7,6,https://github.com/abartlet,Fix more heimdal warnings,3,[],https://github.com/heimdal/heimdal/pull/728,https://github.com/abartlet,1,https://github.com/heimdal/heimdal/pull/728,A few more warnings fixed and in one case we are able to remove a warning from the permitted list.,A few more warnings fixed and in one case we are able to remove a warning from the permitted list.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,728,2020-05-28T08:24:16Z,2020-05-28T15:10:58Z,2020-05-28T15:10:58Z,MERGED,True,16,7,6,https://github.com/abartlet,Fix more heimdal warnings,3,[],https://github.com/heimdal/heimdal/pull/728,https://github.com/abartlet,2,https://github.com/heimdal/heimdal/pull/728#issuecomment-635389879,A few more warnings fixed and in one case we are able to remove a warning from the permitted list.,"I should have made clearer at the start, this allows building on Ubuntu 18.04 with the list of permitted warnings from the new .travis-ci.yml check plus only -Wno-error=implicit-fallthrough=.  This makes it easier to whittle down that list and stop them coming back.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,729,2020-05-28T18:07:24Z,2020-05-31T05:02:35Z,2020-05-31T05:02:35Z,MERGED,True,150,64,5,https://github.com/jaltman,Callers of krb5_config_[v]get_list() require struct krb5_config_binding,1,[],https://github.com/heimdal/heimdal/pull/729,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/729,"ea90ca8 removed the definition of struct krb5_config_binding which is required by callers of krb5_config_get_list() and krb5_config_vget_list().
This PR permits out of tree callers to continue using these functions.  Since the structure was public it cannot be changed or removed unless krb5_config_get_list() and krb5_config_vget_list() are unsupported.","ea90ca8 removed the definition of struct krb5_config_binding which is required by callers of krb5_config_get_list() and krb5_config_vget_list().
This PR permits out of tree callers to continue using these functions.  Since the structure was public it cannot be changed or removed unless krb5_config_get_list() and krb5_config_vget_list() are unsupported.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,729,2020-05-28T18:07:24Z,2020-05-31T05:02:35Z,2020-05-31T05:02:35Z,MERGED,True,150,64,5,https://github.com/jaltman,Callers of krb5_config_[v]get_list() require struct krb5_config_binding,1,[],https://github.com/heimdal/heimdal/pull/729,https://github.com/coveralls,2,https://github.com/heimdal/heimdal/pull/729#issuecomment-636289869,"ea90ca8 removed the definition of struct krb5_config_binding which is required by callers of krb5_config_get_list() and krb5_config_vget_list().
This PR permits out of tree callers to continue using these functions.  Since the structure was public it cannot be changed or removed unless krb5_config_get_list() and krb5_config_vget_list() are unsupported.",Coverage decreased (-0.006%) to 52.743% when pulling 3756be4 on jaltman/fix-krb5_config_get_list-callers into 44b2d68 on master.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,730,2020-05-31T05:08:21Z,2020-07-13T19:48:07Z,2020-07-13T19:48:13Z,MERGED,True,35,35,5,https://github.com/jaltman,Fix Windows i386 test failures,2,[],https://github.com/heimdal/heimdal/pull/730,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/730,"These two commits fix transient failures of the in-tree tests on Windows i386.
For discussion only at this point.   The impact of the ASN1CALL change on 32-bit Windows consumers must be evaluated in more detail.","These two commits fix transient failures of the in-tree tests on Windows i386.
For discussion only at this point.   The impact of the ASN1CALL change on 32-bit Windows consumers must be evaluated in more detail.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,730,2020-05-31T05:08:21Z,2020-07-13T19:48:07Z,2020-07-13T19:48:13Z,MERGED,True,35,35,5,https://github.com/jaltman,Fix Windows i386 test failures,2,[],https://github.com/heimdal/heimdal/pull/730,https://github.com/coveralls,2,https://github.com/heimdal/heimdal/pull/730#issuecomment-636428237,"These two commits fix transient failures of the in-tree tests on Windows i386.
For discussion only at this point.   The impact of the ASN1CALL change on 32-bit Windows consumers must be evaluated in more detail.",Coverage decreased (-0.0007%) to 52.735% when pulling 622e901 on jaltman/fix-windows-i386 into ad2a352 on master.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,730,2020-05-31T05:08:21Z,2020-07-13T19:48:07Z,2020-07-13T19:48:13Z,MERGED,True,35,35,5,https://github.com/jaltman,Fix Windows i386 test failures,2,[],https://github.com/heimdal/heimdal/pull/730,https://github.com/jaltman,3,https://github.com/heimdal/heimdal/pull/730#issuecomment-657746194,"These two commits fix transient failures of the in-tree tests on Windows i386.
For discussion only at this point.   The impact of the ASN1CALL change on 32-bit Windows consumers must be evaluated in more detail.","This change is safe for ""master"" because its a major version change and the fact that the DLLs are linked together as part of an assembly.   Therefore, a mismatch of calling conventions is not possible.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,733,2020-06-22T19:06:28Z,,2021-09-07T02:54:27Z,OPEN,False,106,7,11,https://github.com/nicowilliams,Check destination TGT policy at store time,2,[],https://github.com/heimdal/heimdal/pull/733,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/733,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,733,2020-06-22T19:06:28Z,,2021-09-07T02:54:27Z,OPEN,False,106,7,11,https://github.com/nicowilliams,Check destination TGT policy at store time,2,[],https://github.com/heimdal/heimdal/pull/733,https://github.com/vdukhovni,2,https://github.com/heimdal/heimdal/pull/733#issuecomment-765655035,,Should this be merged?  Closed?,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,735,2020-06-28T15:19:18Z,2020-06-29T15:40:50Z,2020-06-29T21:32:42Z,MERGED,True,14,6,4,https://github.com/jaltman,hx509 context memory leaks,4,"['bug', 'master']",https://github.com/heimdal/heimdal/pull/735,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/735,"The implementation of hx509_context_free() fails to free the parsed configuration file data.
On Windows, no differentiation was made between KRB5_CONFIG and new configurations such as HX509_CONFIG when obtaining configuration file lists from the registry.","The implementation of hx509_context_free() fails to free the parsed configuration file data.
On Windows, no differentiation was made between KRB5_CONFIG and new configurations such as HX509_CONFIG when obtaining configuration file lists from the registry.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,735,2020-06-28T15:19:18Z,2020-06-29T15:40:50Z,2020-06-29T21:32:42Z,MERGED,True,14,6,4,https://github.com/jaltman,hx509 context memory leaks,4,"['bug', 'master']",https://github.com/heimdal/heimdal/pull/735,https://github.com/coveralls,2,https://github.com/heimdal/heimdal/pull/735#issuecomment-650786687,"The implementation of hx509_context_free() fails to free the parsed configuration file data.
On Windows, no differentiation was made between KRB5_CONFIG and new configurations such as HX509_CONFIG when obtaining configuration file lists from the registry.",Coverage increased (+0.001%) to 52.742% when pulling 04d2d4f on jaltman/hx509-memleaks into 2a0b0c0 on master.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,735,2020-06-28T15:19:18Z,2020-06-29T15:40:50Z,2020-06-29T21:32:42Z,MERGED,True,14,6,4,https://github.com/jaltman,hx509 context memory leaks,4,"['bug', 'master']",https://github.com/heimdal/heimdal/pull/735,https://github.com/jaltman,3,https://github.com/heimdal/heimdal/pull/735#issuecomment-650787421,"The implementation of hx509_context_free() fails to free the parsed configuration file data.
On Windows, no differentiation was made between KRB5_CONFIG and new configurations such as HX509_CONFIG when obtaining configuration file lists from the registry.",These changes have been confirmed to remove the memory leak.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,735,2020-06-28T15:19:18Z,2020-06-29T15:40:50Z,2020-06-29T21:32:42Z,MERGED,True,14,6,4,https://github.com/jaltman,hx509 context memory leaks,4,"['bug', 'master']",https://github.com/heimdal/heimdal/pull/735,https://github.com/nicowilliams,4,https://github.com/heimdal/heimdal/pull/735#issuecomment-651380179,"The implementation of hx509_context_free() fails to free the parsed configuration file data.
On Windows, no differentiation was made between KRB5_CONFIG and new configurations such as HX509_CONFIG when obtaining configuration file lists from the registry.","FYI, LGTM.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,736,2020-07-05T01:46:11Z,2020-07-13T23:35:15Z,2020-07-13T23:52:20Z,MERGED,True,322,198,9,https://github.com/lhoward,base: implement atomics using stdatomic,8,[],https://github.com/heimdal/heimdal/pull/736,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/736,"Where C11 stdatomic is available, use it to implement atomics in lib/base","Where C11 stdatomic is available, use it to implement atomics in lib/base",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,736,2020-07-05T01:46:11Z,2020-07-13T23:35:15Z,2020-07-13T23:52:20Z,MERGED,True,322,198,9,https://github.com/lhoward,base: implement atomics using stdatomic,8,[],https://github.com/heimdal/heimdal/pull/736,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/736#issuecomment-654030539,"Where C11 stdatomic is available, use it to implement atomics in lib/base","Arguably we should just switch everything over to using stdatomic and provide an libroken implementation. ffmpeg has such an implementation (for GCC, Solaris and Windows) although it's not suitably licensed.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,736,2020-07-05T01:46:11Z,2020-07-13T23:35:15Z,2020-07-13T23:52:20Z,MERGED,True,322,198,9,https://github.com/lhoward,base: implement atomics using stdatomic,8,[],https://github.com/heimdal/heimdal/pull/736,https://github.com/jaltman,3,https://github.com/heimdal/heimdal/pull/736#issuecomment-657228787,"Where C11 stdatomic is available, use it to implement atomics in lib/base","I would prefer to see these changes broken out into three (possibly four) separate commits
0. move heim_base_atomics defines out of heimbase.h and into its own header, heimbase_atomics.h  [optional].

implement HAVE_STDATOMIC_H definitions for the heim_base_atomic operations that are already supported and used in the tree
implement heim_base_atomic_init(), heim_base_atomic_load(), heim_base_atomic_store(), heim_base_atomic_barrier() and any other new operation for all platforms.   We need to explicitly call out the platforms where load/store ordering is different.  Note that stdatomics atomic_load provides a specific sequential ordering guarantee and we should aim to be consistent for all platforms.
Re-implement HEIM_SLIST_ATOMIC_FOREACH(), heim_retain(), heim_release(), etc using the new functionality.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,736,2020-07-05T01:46:11Z,2020-07-13T23:35:15Z,2020-07-13T23:52:20Z,MERGED,True,322,198,9,https://github.com/lhoward,base: implement atomics using stdatomic,8,[],https://github.com/heimdal/heimdal/pull/736,https://github.com/lhoward,4,https://github.com/heimdal/heimdal/pull/736#issuecomment-657298639,"Where C11 stdatomic is available, use it to implement atomics in lib/base",I need to double check on the ordering guarantees (I believe it's OK) but I have separated the commits.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,736,2020-07-05T01:46:11Z,2020-07-13T23:35:15Z,2020-07-13T23:52:20Z,MERGED,True,322,198,9,https://github.com/lhoward,base: implement atomics using stdatomic,8,[],https://github.com/heimdal/heimdal/pull/736,https://github.com/jaltman,5,https://github.com/heimdal/heimdal/pull/736#issuecomment-657332112,"Where C11 stdatomic is available, use it to implement atomics in lib/base","@lhoward Thanks for breaking up the series.   One small nit, could you re-order ""base: use heim_base_atomic_load in heimqueue.h"" after ""base: add atomic init, load and store macros""?   We can use something before it has been introduced.
Thanks again.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,736,2020-07-05T01:46:11Z,2020-07-13T23:35:15Z,2020-07-13T23:52:20Z,MERGED,True,322,198,9,https://github.com/lhoward,base: implement atomics using stdatomic,8,[],https://github.com/heimdal/heimdal/pull/736,https://github.com/lhoward,6,https://github.com/heimdal/heimdal/pull/736#issuecomment-657332675,"Where C11 stdatomic is available, use it to implement atomics in lib/base","I think that might be GitHub weirdness, ordering by timestamp rather than commit, as I see the following when I do git rebase -i master
pick a13d938b4 base: heim_base_exchange_{32,64} for platforms without atomics
pick 56d6543ad base: use <stdatomic.h> for atomics, where present
pick 41af452a5 base: add atomic init, load and store macros
pick 643baa935 base: use heim_base_atomic_load in heimqueue.h
pick a7ed68c07 base: rename heim_base_atomic_{max,type} to ...integer_{max,type}
pick d51cf0d99 base: use atomic load/store in reference counting",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,736,2020-07-05T01:46:11Z,2020-07-13T23:35:15Z,2020-07-13T23:52:20Z,MERGED,True,322,198,9,https://github.com/lhoward,base: implement atomics using stdatomic,8,[],https://github.com/heimdal/heimdal/pull/736,https://github.com/lhoward,7,https://github.com/heimdal/heimdal/pull/736#issuecomment-657335660,"Where C11 stdatomic is available, use it to implement atomics in lib/base",It's a known issue. https://docs.github.com/en/github/committing-changes-to-your-project/why-are-my-commits-in-the-wrong-order,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,736,2020-07-05T01:46:11Z,2020-07-13T23:35:15Z,2020-07-13T23:52:20Z,MERGED,True,322,198,9,https://github.com/lhoward,base: implement atomics using stdatomic,8,[],https://github.com/heimdal/heimdal/pull/736,https://github.com/jaltman,8,https://github.com/heimdal/heimdal/pull/736#issuecomment-657335682,"Where C11 stdatomic is available, use it to implement atomics in lib/base","@lhoward Yeah, master...PADL:lukeh/stdatomic shows the right thing.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,736,2020-07-05T01:46:11Z,2020-07-13T23:35:15Z,2020-07-13T23:52:20Z,MERGED,True,322,198,9,https://github.com/lhoward,base: implement atomics using stdatomic,8,[],https://github.com/heimdal/heimdal/pull/736,https://github.com/jaltman,9,https://github.com/heimdal/heimdal/pull/736#issuecomment-657336279,"Where C11 stdatomic is available, use it to implement atomics in lib/base",This series looks good to me BUT Travis has stopped building pull requests.   I would like to see this series build successfully on Linux and macOS before merging.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,736,2020-07-05T01:46:11Z,2020-07-13T23:35:15Z,2020-07-13T23:52:20Z,MERGED,True,322,198,9,https://github.com/lhoward,base: implement atomics using stdatomic,8,[],https://github.com/heimdal/heimdal/pull/736,https://github.com/lhoward,10,https://github.com/heimdal/heimdal/pull/736#issuecomment-657337235,"Where C11 stdatomic is available, use it to implement atomics in lib/base","OK, so it builds on macOS OK (that's my development platform). I can try on Linux and Solaris.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,736,2020-07-05T01:46:11Z,2020-07-13T23:35:15Z,2020-07-13T23:52:20Z,MERGED,True,322,198,9,https://github.com/lhoward,base: implement atomics using stdatomic,8,[],https://github.com/heimdal/heimdal/pull/736,https://github.com/jaltman,11,https://github.com/heimdal/heimdal/pull/736#issuecomment-657337793,"Where C11 stdatomic is available, use it to implement atomics in lib/base","macOS passed but there is a Xenial failure
https://travis-ci.org/github/heimdal/heimdal/builds/707483707",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,736,2020-07-05T01:46:11Z,2020-07-13T23:35:15Z,2020-07-13T23:52:20Z,MERGED,True,322,198,9,https://github.com/lhoward,base: implement atomics using stdatomic,8,[],https://github.com/heimdal/heimdal/pull/736,https://github.com/lhoward,12,https://github.com/heimdal/heimdal/pull/736#issuecomment-657338004,"Where C11 stdatomic is available, use it to implement atomics in lib/base","Thanks, looking.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,736,2020-07-05T01:46:11Z,2020-07-13T23:35:15Z,2020-07-13T23:52:20Z,MERGED,True,322,198,9,https://github.com/lhoward,base: implement atomics using stdatomic,8,[],https://github.com/heimdal/heimdal/pull/736,https://github.com/lhoward,13,https://github.com/heimdal/heimdal/pull/736#issuecomment-657341319,"Where C11 stdatomic is available, use it to implement atomics in lib/base","OK, I'll need to spin up a modern enough Linux VM to fix this. May take some time.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,736,2020-07-05T01:46:11Z,2020-07-13T23:35:15Z,2020-07-13T23:52:20Z,MERGED,True,322,198,9,https://github.com/lhoward,base: implement atomics using stdatomic,8,[],https://github.com/heimdal/heimdal/pull/736,https://github.com/lhoward,14,https://github.com/heimdal/heimdal/pull/736#issuecomment-657353504,"Where C11 stdatomic is available, use it to implement atomics in lib/base","OK, please retry Travis now.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,736,2020-07-05T01:46:11Z,2020-07-13T23:35:15Z,2020-07-13T23:52:20Z,MERGED,True,322,198,9,https://github.com/lhoward,base: implement atomics using stdatomic,8,[],https://github.com/heimdal/heimdal/pull/736,https://github.com/lhoward,15,https://github.com/heimdal/heimdal/pull/736#issuecomment-657368461,"Where C11 stdatomic is available, use it to implement atomics in lib/base","BTW, I wouldn't mind dropping support for platforms that don't have atomic intrinsics. The workaround we have for such platforms (global lock) is pretty ugly, and it is broken in master anyway (missing a couple of functions) and no one has complained yet. We have native compiler support for Solaris and AIX, as well as gcc and clang on (presumably) all platforms.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,736,2020-07-05T01:46:11Z,2020-07-13T23:35:15Z,2020-07-13T23:52:20Z,MERGED,True,322,198,9,https://github.com/lhoward,base: implement atomics using stdatomic,8,[],https://github.com/heimdal/heimdal/pull/736,https://github.com/lhoward,16,https://github.com/heimdal/heimdal/pull/736#issuecomment-657379351,"Where C11 stdatomic is available, use it to implement atomics in lib/base","It failed on Travis macOS owing to an unrelated error, but the Linux build is fixed.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,736,2020-07-05T01:46:11Z,2020-07-13T23:35:15Z,2020-07-13T23:52:20Z,MERGED,True,322,198,9,https://github.com/lhoward,base: implement atomics using stdatomic,8,[],https://github.com/heimdal/heimdal/pull/736,https://github.com/jaltman,17,https://github.com/heimdal/heimdal/pull/736#issuecomment-657512773,"Where C11 stdatomic is available, use it to implement atomics in lib/base","It failed on Travis macOS owing to an unrelated error, but the Linux build is fixed.

The macOS error was a transient problem within Travis-CI infrastructure.    I restarted the build and it looks like it will complete this time.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,736,2020-07-05T01:46:11Z,2020-07-13T23:35:15Z,2020-07-13T23:52:20Z,MERGED,True,322,198,9,https://github.com/lhoward,base: implement atomics using stdatomic,8,[],https://github.com/heimdal/heimdal/pull/736,https://github.com/jaltman,18,https://github.com/heimdal/heimdal/pull/736#issuecomment-657513589,"Where C11 stdatomic is available, use it to implement atomics in lib/base","BTW, I wouldn't mind dropping support for platforms that don't have atomic intrinsics. The workaround we have for such platforms (global lock) is pretty ugly, and it is broken in master anyway (missing a couple of functions) and no one has complained yet. We have native compiler support for Solaris and AIX, as well as gcc and clang on (presumably) all platforms.

Debian indicated that they would have to drop Heimdal on all platforms if we break the build for i386.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,736,2020-07-05T01:46:11Z,2020-07-13T23:35:15Z,2020-07-13T23:52:20Z,MERGED,True,322,198,9,https://github.com/lhoward,base: implement atomics using stdatomic,8,[],https://github.com/heimdal/heimdal/pull/736,https://github.com/lhoward,19,https://github.com/heimdal/heimdal/pull/736#issuecomment-657520023,"Where C11 stdatomic is available, use it to implement atomics in lib/base","Ah OK, so we have 64-bit atomic intrinsics on i686 but not i386. I wonder how the existing code is working on i386 in the first place. It’s late here, but sounds like this needs more investigation.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,736,2020-07-05T01:46:11Z,2020-07-13T23:35:15Z,2020-07-13T23:52:20Z,MERGED,True,322,198,9,https://github.com/lhoward,base: implement atomics using stdatomic,8,[],https://github.com/heimdal/heimdal/pull/736,https://github.com/lhoward,20,https://github.com/heimdal/heimdal/pull/736#issuecomment-657876214,"Where C11 stdatomic is available, use it to implement atomics in lib/base","I don't think this PR is any worse on i386 than what we had before. I'm yet to find a good explanation of how atomic_exchange() and __sync_swap() work on i386 with 64-bit types.
Practically I believe we are safe: 64-bit atomic operations on 32-bit platforms (with 32-bit time_t at least) are only used in the keyring credential cache, to set the principal and cache ID in a single operation. I don't believe doing this in separate instructions is any racier code than, say, the filesystem credential cache (with multiple processes accessing the filesystem).
As such, I believe this patch is good to merge. However, care should be taken with future use of 64-bit atomic instructions, whilst i386 still needs to be supported. Note these concerns to do not apply to i686 and above as they have  64-bit atomic instructions.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,738,2020-07-10T03:31:32Z,2020-07-12T05:28:20Z,2020-07-12T05:28:20Z,MERGED,True,5,0,1,https://github.com/jaltman,gss/krb5: acquire_cred_with_password set opt default flags,1,[],https://github.com/heimdal/heimdal/pull/738,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/738,"acquire_cred_with_password() must call
krb5_get_init_creds_opt_set_default_flags() to initialize the
krb5_get_init_creds option flags to the values obtained from
the krb5_context.
Change-Id: Icd8c500dd0787a781c2382284f19cef277b1d30b","acquire_cred_with_password() must call
krb5_get_init_creds_opt_set_default_flags() to initialize the
krb5_get_init_creds option flags to the values obtained from
the krb5_context.
Change-Id: Icd8c500dd0787a781c2382284f19cef277b1d30b",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,738,2020-07-10T03:31:32Z,2020-07-12T05:28:20Z,2020-07-12T05:28:20Z,MERGED,True,5,0,1,https://github.com/jaltman,gss/krb5: acquire_cred_with_password set opt default flags,1,[],https://github.com/heimdal/heimdal/pull/738,https://github.com/coveralls,2,https://github.com/heimdal/heimdal/pull/738#issuecomment-656476046,"acquire_cred_with_password() must call
krb5_get_init_creds_opt_set_default_flags() to initialize the
krb5_get_init_creds option flags to the values obtained from
the krb5_context.
Change-Id: Icd8c500dd0787a781c2382284f19cef277b1d30b",Coverage increased (+0.007%) to 52.74% when pulling eafa1cb on jaltman/gss-acquire-creds-defaults into a684e00 on master.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,738,2020-07-10T03:31:32Z,2020-07-12T05:28:20Z,2020-07-12T05:28:20Z,MERGED,True,5,0,1,https://github.com/jaltman,gss/krb5: acquire_cred_with_password set opt default flags,1,[],https://github.com/heimdal/heimdal/pull/738,https://github.com/jborean93,3,https://github.com/heimdal/heimdal/pull/738#issuecomment-657143455,"acquire_cred_with_password() must call
krb5_get_init_creds_opt_set_default_flags() to initialize the
krb5_get_init_creds option flags to the values obtained from
the krb5_context.
Change-Id: Icd8c500dd0787a781c2382284f19cef277b1d30b","Sorry for the delay in testing this, just confirmed on my hosts that after these changes credentials acquired with gss_acquire_cred_with_password use the config settings that control the specific flags used when retrieving the credential.
Thanks @jaltman for looking into this and fixing the problem.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,740,2020-07-11T08:26:30Z,2020-07-12T04:26:15Z,2021-07-07T20:05:54Z,MERGED,True,38,24,3,https://github.com/lhoward,RFC4757/padding fixes,3,['bug'],https://github.com/heimdal/heimdal/pull/740,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/740,"Fixes for #739


gss_unwrap_iov() with rc4-hmac (RFC4757) encryption types would fail unless GSS_C_DCE_STYLE was specified, as an incorrect length was passed to _gssapi_verify_mech_header(). (The correct length is the header length for GSS_C_DCE_STYLE, and the wrap token length otherwise.)


RFC 4121/4757 don't require padding as they operate as stream ciphers. Make the PADDING buffer optional when using these encryption types with gss_wrap_iov() and gss_unwrap_iov().","Fixes for #739


gss_unwrap_iov() with rc4-hmac (RFC4757) encryption types would fail unless GSS_C_DCE_STYLE was specified, as an incorrect length was passed to _gssapi_verify_mech_header(). (The correct length is the header length for GSS_C_DCE_STYLE, and the wrap token length otherwise.)


RFC 4121/4757 don't require padding as they operate as stream ciphers. Make the PADDING buffer optional when using these encryption types with gss_wrap_iov() and gss_unwrap_iov().",True,{'HOORAY': ['https://github.com/jborean93']}
heimdal/heimdal,https://github.com/heimdal/heimdal,740,2020-07-11T08:26:30Z,2020-07-12T04:26:15Z,2021-07-07T20:05:54Z,MERGED,True,38,24,3,https://github.com/lhoward,RFC4757/padding fixes,3,['bug'],https://github.com/heimdal/heimdal/pull/740,https://github.com/jborean93,2,https://github.com/heimdal/heimdal/pull/740#issuecomment-657048842,"Fixes for #739


gss_unwrap_iov() with rc4-hmac (RFC4757) encryption types would fail unless GSS_C_DCE_STYLE was specified, as an incorrect length was passed to _gssapi_verify_mech_header(). (The correct length is the header length for GSS_C_DCE_STYLE, and the wrap token length otherwise.)


RFC 4121/4757 don't require padding as they operate as stream ciphers. Make the PADDING buffer optional when using these encryption types with gss_wrap_iov() and gss_unwrap_iov().","See #739 (comment), when testing in my environment this not only fixes the issue where a PADDING buffer was required by Heimdal but shouldn't have been, it also fixes the RC4 decryption for the peculiar case that WinRM uses.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,740,2020-07-11T08:26:30Z,2020-07-12T04:26:15Z,2021-07-07T20:05:54Z,MERGED,True,38,24,3,https://github.com/lhoward,RFC4757/padding fixes,3,['bug'],https://github.com/heimdal/heimdal/pull/740,https://github.com/abartlet,3,https://github.com/heimdal/heimdal/pull/740#issuecomment-875253425,"Fixes for #739


gss_unwrap_iov() with rc4-hmac (RFC4757) encryption types would fail unless GSS_C_DCE_STYLE was specified, as an incorrect length was passed to _gssapi_verify_mech_header(). (The correct length is the header length for GSS_C_DCE_STYLE, and the wrap token length otherwise.)


RFC 4121/4757 don't require padding as they operate as stream ciphers. Make the PADDING buffer optional when using these encryption types with gss_wrap_iov() and gss_unwrap_iov().",Testing in Samba with a current Heimdal imported I had to revert 4b543b7 otherwise Heimdal/Heimdal with RC4 crypto failed connecting a Samba client to a Samba AD DC over DCE/RPC (so the DCE_STYLE case).,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,740,2020-07-11T08:26:30Z,2020-07-12T04:26:15Z,2021-07-07T20:05:54Z,MERGED,True,38,24,3,https://github.com/lhoward,RFC4757/padding fixes,3,['bug'],https://github.com/heimdal/heimdal/pull/740,https://github.com/lhoward,4,https://github.com/heimdal/heimdal/pull/740#issuecomment-875257130,"Fixes for #739


gss_unwrap_iov() with rc4-hmac (RFC4757) encryption types would fail unless GSS_C_DCE_STYLE was specified, as an incorrect length was passed to _gssapi_verify_mech_header(). (The correct length is the header length for GSS_C_DCE_STYLE, and the wrap token length otherwise.)


RFC 4121/4757 don't require padding as they operate as stream ciphers. Make the PADDING buffer optional when using these encryption types with gss_wrap_iov() and gss_unwrap_iov().",Where is it failing?,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,740,2020-07-11T08:26:30Z,2020-07-12T04:26:15Z,2021-07-07T20:05:54Z,MERGED,True,38,24,3,https://github.com/lhoward,RFC4757/padding fixes,3,['bug'],https://github.com/heimdal/heimdal/pull/740,https://github.com/abartlet,5,https://github.com/heimdal/heimdal/pull/740#issuecomment-875264743,"Fixes for #739


gss_unwrap_iov() with rc4-hmac (RFC4757) encryption types would fail unless GSS_C_DCE_STYLE was specified, as an incorrect length was passed to _gssapi_verify_mech_header(). (The correct length is the header length for GSS_C_DCE_STYLE, and the wrap token length otherwise.)


RFC 4121/4757 don't require padding as they operate as stream ciphers. Make the PADDING buffer optional when using these encryption types with gss_wrap_iov() and gss_unwrap_iov().","""make test TESTS=vampire_2000_dc"" in Samba:
gss_unwrap_iov failed:  A token was invalid: unknown mech-code 0 for mech 1 2 840 113554 1 2 2
gssapi_unseal_packet(hdr_signing=1,sig_size=45,data=128,pdu=160) failed: NT_STATUS_ACCESS_DENIED",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,740,2020-07-11T08:26:30Z,2020-07-12T04:26:15Z,2021-07-07T20:05:54Z,MERGED,True,38,24,3,https://github.com/lhoward,RFC4757/padding fixes,3,['bug'],https://github.com/heimdal/heimdal/pull/740,https://github.com/lhoward,6,https://github.com/heimdal/heimdal/pull/740#issuecomment-875269359,"Fixes for #739


gss_unwrap_iov() with rc4-hmac (RFC4757) encryption types would fail unless GSS_C_DCE_STYLE was specified, as an incorrect length was passed to _gssapi_verify_mech_header(). (The correct length is the header length for GSS_C_DCE_STYLE, and the wrap token length otherwise.)


RFC 4121/4757 don't require padding as they operate as stream ciphers. Make the PADDING buffer optional when using these encryption types with gss_wrap_iov() and gss_unwrap_iov().",Is _gssapi_verify_mech_header() failing? What are the input IOV lengths?,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,740,2020-07-11T08:26:30Z,2020-07-12T04:26:15Z,2021-07-07T20:05:54Z,MERGED,True,38,24,3,https://github.com/lhoward,RFC4757/padding fixes,3,['bug'],https://github.com/heimdal/heimdal/pull/740,https://github.com/abartlet,7,https://github.com/heimdal/heimdal/pull/740#issuecomment-875512464,"Fixes for #739


gss_unwrap_iov() with rc4-hmac (RFC4757) encryption types would fail unless GSS_C_DCE_STYLE was specified, as an incorrect length was passed to _gssapi_verify_mech_header(). (The correct length is the header length for GSS_C_DCE_STYLE, and the wrap token length otherwise.)


RFC 4121/4757 don't require padding as they operate as stream ciphers. Make the PADDING buffer optional when using these encryption types with gss_wrap_iov() and gss_unwrap_iov().","Yes, it seems _gssapi_verify_mech_header() returns -1.
(gdb) p iov
$1 = {{type = 2, buffer = {length = 45, value = 0x564dfde07860}}, {type = 11, buffer = {length = 24, value = 0x564dfe1dbca0}}, {type = 1, buffer = {length = 128, value = 0x564dfe1dbcb8}}, {type = 11, buffer = {length = 8, value = 0x564dfe1dbd38}}}

Breakpoint 3, _gssapi_verify_mech_header (str=str@entry=0x7ffe0b9d6960, total_len=173, mech=0x7f3363a9a240 <__gss_krb5_mechanism_oid_desc>) at ../../source4/heimdal/lib/gssapi/krb5/decapsulate.c:73
73      {
(gdb) n
77          mech_len = _gsskrb5_get_mech (*str, total_len, &p);
(gdb) n
78          if (mech_len < 0)
(gdb) p mech_len
$2 = -1
(gdb) n
_gssapi_unwrap_iov_arcfour (minor_status=minor_status@entry=0x7ffe0b9d6b64, ctx=ctx@entry=0x564dfe2f0170, context=0x564dfdcaf5c0, pconf_state=pconf_state@entry=0x7ffe0b9d6b6c, pqop_state=pqop_state@entry=0x7ffe0b9d6b68, iov=iov@entry=0x7ffe0b9d6b70, iov_count=4, key=0x564dfe3b1de0)
    at ../../source4/heimdal/lib/gssapi/krb5/arcfour.c:1218
1218        if (ret) {
(gdb) 
_gk_unwrap_iov (minor_status=0x7ffe0b9d6b64, context_handle=0x564dfe2f0170, conf_state=0x7ffe0b9d6b6c, qop_state=0x7ffe0b9d6b68, iov=0x7ffe0b9d6b70, iov_count=4) at ../../source4/heimdal/lib/gssapi/krb5/aeap.c:121
121             break;
(gdb) 
128         krb5_free_keyblock(context, key);
(gdb) 
129         return ret;
(gdb) 
gssapi_unseal_packet (gssapi_context=<optimized out>, mech=0x7f3363a9a240 <__gss_krb5_mechanism_oid_desc>, hdr_signing=hdr_signing@entry=true, 
    data=data@entry=0x564dfe219998 ""\375DW@\235$%\360.\313{h\226oЖ\f($C\225\265\260\322\356\030%\241`\331@\340\004a\006\245\345ra\330X*\315rg\207\363r\322\322\367\250(PG]I\377\316f0F\213J\223DK#"", length=length@entry=128, whole_pdu=whole_pdu@entry=0x564dfe219980 ""\005"", pdu_length=160, 
    sig=0x7ffe0b9d6ca0) at ../../auth/kerberos/gssapi_helper.c:289
289             if (GSS_ERROR(maj_stat)) {
(gdb) p iov
$3 = {{type = 2, buffer = {length = 45, value = 0x564dfe3d43a0}}, {type = 11, buffer = {length = 24, value = 0x564dfe219980}}, {type = 1, buffer = {length = 128, value = 0x564dfe219998}}, {type = 11, buffer = {length = 8, value = 0x564dfe219a18}}}",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,740,2020-07-11T08:26:30Z,2020-07-12T04:26:15Z,2021-07-07T20:05:54Z,MERGED,True,38,24,3,https://github.com/lhoward,RFC4757/padding fixes,3,['bug'],https://github.com/heimdal/heimdal/pull/740,https://github.com/lhoward,8,https://github.com/heimdal/heimdal/pull/740#issuecomment-875624614,"Fixes for #739


gss_unwrap_iov() with rc4-hmac (RFC4757) encryption types would fail unless GSS_C_DCE_STYLE was specified, as an incorrect length was passed to _gssapi_verify_mech_header(). (The correct length is the header length for GSS_C_DCE_STYLE, and the wrap token length otherwise.)


RFC 4121/4757 don't require padding as they operate as stream ciphers. Make the PADDING buffer optional when using these encryption types with gss_wrap_iov() and gss_unwrap_iov().",Please try f72627c,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,740,2020-07-11T08:26:30Z,2020-07-12T04:26:15Z,2021-07-07T20:05:54Z,MERGED,True,38,24,3,https://github.com/lhoward,RFC4757/padding fixes,3,['bug'],https://github.com/heimdal/heimdal/pull/740,https://github.com/abartlet,9,https://github.com/heimdal/heimdal/pull/740#issuecomment-875895455,"Fixes for #739


gss_unwrap_iov() with rc4-hmac (RFC4757) encryption types would fail unless GSS_C_DCE_STYLE was specified, as an incorrect length was passed to _gssapi_verify_mech_header(). (The correct length is the header length for GSS_C_DCE_STYLE, and the wrap token length otherwise.)


RFC 4121/4757 don't require padding as they operate as stream ciphers. Make the PADDING buffer optional when using these encryption types with gss_wrap_iov() and gss_unwrap_iov().","Thanks, that works for me.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,742,2020-07-12T13:43:27Z,2020-07-13T04:16:50Z,2020-07-13T04:16:57Z,MERGED,True,72,32,5,https://github.com/jaltman,heimdal 7 1 branch pullups,7,['bug'],https://github.com/heimdal/heimdal/pull/742,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/742,"61c8457 kafs: disable use of AFS syscall on macOS
87ab10e gss/krb5: acquire_cred_with_password set opt default flags
3baf636 gssapi/krb5: make PADDING buffer optional in GSS IOV API
b75cc54 gssapi/krb5: fix rc4-hmac gss_unwrap_iov() without DCE_STYLE
e1b6a74 gssapi/krb5: use GSS_IOV_BUFFER_FLAG_ALLOCATE constants
0108aa8 gssapi/krb5: ensure singleton buffer in _gk_find_buffer()
c8abd9a gssapi/krb5: treat empty padding buffers as absent","61c8457 kafs: disable use of AFS syscall on macOS
87ab10e gss/krb5: acquire_cred_with_password set opt default flags
3baf636 gssapi/krb5: make PADDING buffer optional in GSS IOV API
b75cc54 gssapi/krb5: fix rc4-hmac gss_unwrap_iov() without DCE_STYLE
e1b6a74 gssapi/krb5: use GSS_IOV_BUFFER_FLAG_ALLOCATE constants
0108aa8 gssapi/krb5: ensure singleton buffer in _gk_find_buffer()
c8abd9a gssapi/krb5: treat empty padding buffers as absent",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,742,2020-07-12T13:43:27Z,2020-07-13T04:16:50Z,2020-07-13T04:16:57Z,MERGED,True,72,32,5,https://github.com/jaltman,heimdal 7 1 branch pullups,7,['bug'],https://github.com/heimdal/heimdal/pull/742,https://github.com/coveralls,2,https://github.com/heimdal/heimdal/pull/742#issuecomment-657230608,"61c8457 kafs: disable use of AFS syscall on macOS
87ab10e gss/krb5: acquire_cred_with_password set opt default flags
3baf636 gssapi/krb5: make PADDING buffer optional in GSS IOV API
b75cc54 gssapi/krb5: fix rc4-hmac gss_unwrap_iov() without DCE_STYLE
e1b6a74 gssapi/krb5: use GSS_IOV_BUFFER_FLAG_ALLOCATE constants
0108aa8 gssapi/krb5: ensure singleton buffer in _gk_find_buffer()
c8abd9a gssapi/krb5: treat empty padding buffers as absent",Coverage remained the same at 0.0% when pulling c8abd9a on jaltman/heimdal-7-1-branch-pullups into 5eae4db on heimdal-7-1-branch.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,742,2020-07-12T13:43:27Z,2020-07-13T04:16:50Z,2020-07-13T04:16:57Z,MERGED,True,72,32,5,https://github.com/jaltman,heimdal 7 1 branch pullups,7,['bug'],https://github.com/heimdal/heimdal/pull/742,https://github.com/jaltman,3,https://github.com/heimdal/heimdal/pull/742#issuecomment-657349306,"61c8457 kafs: disable use of AFS syscall on macOS
87ab10e gss/krb5: acquire_cred_with_password set opt default flags
3baf636 gssapi/krb5: make PADDING buffer optional in GSS IOV API
b75cc54 gssapi/krb5: fix rc4-hmac gss_unwrap_iov() without DCE_STYLE
e1b6a74 gssapi/krb5: use GSS_IOV_BUFFER_FLAG_ALLOCATE constants
0108aa8 gssapi/krb5: ensure singleton buffer in _gk_find_buffer()
c8abd9a gssapi/krb5: treat empty padding buffers as absent",Travis-CI passed https://travis-ci.org/github/heimdal/heimdal/builds/707360994,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,743,2020-07-13T20:55:58Z,,2021-03-11T03:26:50Z,OPEN,False,237,103,32,https://github.com/jaltman,32-bit time_t enhancements,5,[],https://github.com/heimdal/heimdal/pull/743,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/743,"The intent of this change is to potentially handle Kerberos ticket lifetimes post-2038.
This PR replaces #726 which was initiated from a non-stable branch.","The intent of this change is to potentially handle Kerberos ticket lifetimes post-2038.
This PR replaces #726 which was initiated from a non-stable branch.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,743,2020-07-13T20:55:58Z,,2021-03-11T03:26:50Z,OPEN,False,237,103,32,https://github.com/jaltman,32-bit time_t enhancements,5,[],https://github.com/heimdal/heimdal/pull/743,https://github.com/coveralls,2,https://github.com/heimdal/heimdal/pull/743#issuecomment-657805550,"The intent of this change is to potentially handle Kerberos ticket lifetimes post-2038.
This PR replaces #726 which was initiated from a non-stable branch.",Coverage increased (+0.01%) to 52.743% when pulling 936b4c9 on nicowilliams/better-time_t into bb7b4f7 on master.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,743,2020-07-13T20:55:58Z,,2021-03-11T03:26:50Z,OPEN,False,237,103,32,https://github.com/jaltman,32-bit time_t enhancements,5,[],https://github.com/heimdal/heimdal/pull/743,https://github.com/jaltman,3,https://github.com/heimdal/heimdal/pull/743#issuecomment-657949034,"The intent of this change is to potentially handle Kerberos ticket lifetimes post-2038.
This PR replaces #726 which was initiated from a non-stable branch.",@nicowilliams I've updated the changes to build successfully on Windows.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,743,2020-07-13T20:55:58Z,,2021-03-11T03:26:50Z,OPEN,False,237,103,32,https://github.com/jaltman,32-bit time_t enhancements,5,[],https://github.com/heimdal/heimdal/pull/743,https://github.com/jaltman,4,https://github.com/heimdal/heimdal/pull/743#issuecomment-658118799,"The intent of this change is to potentially handle Kerberos ticket lifetimes post-2038.
This PR replaces #726 which was initiated from a non-stable branch.",@nicowilliams The most recent push corrects a mismatch of the prototype and declaration of heim_time2generalizetime that caused the macOS build to fail.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,743,2020-07-13T20:55:58Z,,2021-03-11T03:26:50Z,OPEN,False,237,103,32,https://github.com/jaltman,32-bit time_t enhancements,5,[],https://github.com/heimdal/heimdal/pull/743,https://github.com/jaltman,5,https://github.com/heimdal/heimdal/pull/743#issuecomment-658355268,"The intent of this change is to potentially handle Kerberos ticket lifetimes post-2038.
This PR replaces #726 which was initiated from a non-stable branch.","A decision needs to be made regarding the time format for the hdb functions.   I think it should be KerberosTime.
In addition, we need to handle the restriction of the MIT Dump file format which is restricted to 32-bits.",True,{'THUMBS_UP': ['https://github.com/nicowilliams']}
heimdal/heimdal,https://github.com/heimdal/heimdal,744,2020-07-14T10:14:33Z,2020-07-14T23:42:41Z,2020-07-14T23:42:41Z,CLOSED,False,1,68,2,https://github.com/lhoward,base: require platform/compiler support for atomics,1,[],https://github.com/heimdal/heimdal/pull/744,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/744,"If there are no platform or compiler atomic intrinsics, we currently fallback to a single global mutex for all atomic operations. We anticipate that all modern platforms support atomic operations, and if we don't currently have
support, it would be better to add them rather than falling back to this unperformant workaround.
For the record, the current implementation supports C11, GCC, Solaris, AIX and Windows atomics (used in that order of preference).","If there are no platform or compiler atomic intrinsics, we currently fallback to a single global mutex for all atomic operations. We anticipate that all modern platforms support atomic operations, and if we don't currently have
support, it would be better to add them rather than falling back to this unperformant workaround.
For the record, the current implementation supports C11, GCC, Solaris, AIX and Windows atomics (used in that order of preference).",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,744,2020-07-14T10:14:33Z,2020-07-14T23:42:41Z,2020-07-14T23:42:41Z,CLOSED,False,1,68,2,https://github.com/lhoward,base: require platform/compiler support for atomics,1,[],https://github.com/heimdal/heimdal/pull/744,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/744#issuecomment-658097377,"If there are no platform or compiler atomic intrinsics, we currently fallback to a single global mutex for all atomic operations. We anticipate that all modern platforms support atomic operations, and if we don't currently have
support, it would be better to add them rather than falling back to this unperformant workaround.
For the record, the current implementation supports C11, GCC, Solaris, AIX and Windows atomics (used in that order of preference).","I'm on the fence (pun!) about this one, but feedback appreciated.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,744,2020-07-14T10:14:33Z,2020-07-14T23:42:41Z,2020-07-14T23:42:41Z,CLOSED,False,1,68,2,https://github.com/lhoward,base: require platform/compiler support for atomics,1,[],https://github.com/heimdal/heimdal/pull/744,https://github.com/jaltman,3,https://github.com/heimdal/heimdal/pull/744#issuecomment-658155125,"If there are no platform or compiler atomic intrinsics, we currently fallback to a single global mutex for all atomic operations. We anticipate that all modern platforms support atomic operations, and if we don't currently have
support, it would be better to add them rather than falling back to this unperformant workaround.
For the record, the current implementation supports C11, GCC, Solaris, AIX and Windows atomics (used in that order of preference).",I would rather not remove this because I want Heimdal to build on platforms where we do not have an implementation for intrinsic operations.   Although I would be supportive of requiring an explicit #define in order to enable it.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,744,2020-07-14T10:14:33Z,2020-07-14T23:42:41Z,2020-07-14T23:42:41Z,CLOSED,False,1,68,2,https://github.com/lhoward,base: require platform/compiler support for atomics,1,[],https://github.com/heimdal/heimdal/pull/744,https://github.com/lhoward,4,https://github.com/heimdal/heimdal/pull/744#issuecomment-658158658,"If there are no platform or compiler atomic intrinsics, we currently fallback to a single global mutex for all atomic operations. We anticipate that all modern platforms support atomic operations, and if we don't currently have
support, it would be better to add them rather than falling back to this unperformant workaround.
For the record, the current implementation supports C11, GCC, Solaris, AIX and Windows atomics (used in that order of preference).",Maybe we can just put a #warning in instead.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,744,2020-07-14T10:14:33Z,2020-07-14T23:42:41Z,2020-07-14T23:42:41Z,CLOSED,False,1,68,2,https://github.com/lhoward,base: require platform/compiler support for atomics,1,[],https://github.com/heimdal/heimdal/pull/744,https://github.com/jaltman,5,https://github.com/heimdal/heimdal/pull/744#issuecomment-658161447,"If there are no platform or compiler atomic intrinsics, we currently fallback to a single global mutex for all atomic operations. We anticipate that all modern platforms support atomic operations, and if we don't currently have
support, it would be better to add them rather than falling back to this unperformant workaround.
For the record, the current implementation supports C11, GCC, Solaris, AIX and Windows atomics (used in that order of preference).",Perhaps HEIMDAL_DEPRECATED could be used in some way.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,744,2020-07-14T10:14:33Z,2020-07-14T23:42:41Z,2020-07-14T23:42:41Z,CLOSED,False,1,68,2,https://github.com/lhoward,base: require platform/compiler support for atomics,1,[],https://github.com/heimdal/heimdal/pull/744,https://github.com/jaltman,6,https://github.com/heimdal/heimdal/pull/744#issuecomment-658163272,"If there are no platform or compiler atomic intrinsics, we currently fallback to a single global mutex for all atomic operations. We anticipate that all modern platforms support atomic operations, and if we don't currently have
support, it would be better to add them rather than falling back to this unperformant workaround.
For the record, the current implementation supports C11, GCC, Solaris, AIX and Windows atomics (used in that order of preference).","Indirectly related but I will mention it here
/Users/travis/build/heimdal/heimdal/lib/sqlite/sqlite3.c:20839:17: warning: 'OSAtomicCompareAndSwapPtrBarrier' is deprecated: first deprecated in macOS 10.12 - Use atomic_compare_exchange_strong() from <stdatomic.h> instead [-Wdeprecated-declarations]
  success = OSAtomicCompareAndSwapPtrBarrier(NULL, newzone, 

            ^

/usr/include/libkern/OSAtomicDeprecated.h:547:6: note: 'OSAtomicCompareAndSwapPtrBarrier' has been explicitly marked deprecated here
bool    OSAtomicCompareAndSwapPtrBarrier( void *__oldValue, void *__newValue, void * volatile *__theValue );
      ^

1 warning generated.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,744,2020-07-14T10:14:33Z,2020-07-14T23:42:41Z,2020-07-14T23:42:41Z,CLOSED,False,1,68,2,https://github.com/lhoward,base: require platform/compiler support for atomics,1,[],https://github.com/heimdal/heimdal/pull/744,https://github.com/lhoward,7,https://github.com/heimdal/heimdal/pull/744#issuecomment-658172264,"If there are no platform or compiler atomic intrinsics, we currently fallback to a single global mutex for all atomic operations. We anticipate that all modern platforms support atomic operations, and if we don't currently have
support, it would be better to add them rather than falling back to this unperformant workaround.
For the record, the current implementation supports C11, GCC, Solaris, AIX and Windows atomics (used in that order of preference).","I looked into this separately. Apparently Apple won’t really be deprecating it (soon), so sqlite left as-is. I’ll dig up the link tomorrow. Happy to fix, if you’re ok with diverging from upstream.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,744,2020-07-14T10:14:33Z,2020-07-14T23:42:41Z,2020-07-14T23:42:41Z,CLOSED,False,1,68,2,https://github.com/lhoward,base: require platform/compiler support for atomics,1,[],https://github.com/heimdal/heimdal/pull/744,https://github.com/lhoward,8,https://github.com/heimdal/heimdal/pull/744#issuecomment-658464375,"If there are no platform or compiler atomic intrinsics, we currently fallback to a single global mutex for all atomic operations. We anticipate that all modern platforms support atomic operations, and if we don't currently have
support, it would be better to add them rather than falling back to this unperformant workaround.
For the record, the current implementation supports C11, GCC, Solaris, AIX and Windows atomics (used in that order of preference).","See here. From an Sqlite maintainer:

Engineers at Apple tell me that they are still using OSAtomicCompareAndSwapPtrBarrier() inside of essential OS-X components and that the routine will not be going away any time soon.
If you are still concerned, your work-around is to compile with -DSQLITE_WITHOUT_ZONEMALLOC. (I have to do that when compiling SQLite for OS 10.2, since that release predates the OSAtomicCompareAndSwapPtrBarrier().)

I will investigate a proper fix using Heimdal-atomics though.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,744,2020-07-14T10:14:33Z,2020-07-14T23:42:41Z,2020-07-14T23:42:41Z,CLOSED,False,1,68,2,https://github.com/lhoward,base: require platform/compiler support for atomics,1,[],https://github.com/heimdal/heimdal/pull/744,https://github.com/lhoward,9,https://github.com/heimdal/heimdal/pull/744#issuecomment-658465463,"If there are no platform or compiler atomic intrinsics, we currently fallback to a single global mutex for all atomic operations. We anticipate that all modern platforms support atomic operations, and if we don't currently have
support, it would be better to add them rather than falling back to this unperformant workaround.
For the record, the current implementation supports C11, GCC, Solaris, AIX and Windows atomics (used in that order of preference).","Hmm, stdatomic.h is only available in macOS 10.12 and later. I think it's safe to set SQLITE_WITHOUT_ZONEMALLOC though, as the OSAtomicCompareAndSwapPtrBarrier() branch is only used with single-CPU systems which is pretty much no macOS system these days.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,744,2020-07-14T10:14:33Z,2020-07-14T23:42:41Z,2020-07-14T23:42:41Z,CLOSED,False,1,68,2,https://github.com/lhoward,base: require platform/compiler support for atomics,1,[],https://github.com/heimdal/heimdal/pull/744,https://github.com/lhoward,10,https://github.com/heimdal/heimdal/pull/744#issuecomment-658465553,"If there are no platform or compiler atomic intrinsics, we currently fallback to a single global mutex for all atomic operations. We anticipate that all modern platforms support atomic operations, and if we don't currently have
support, it would be better to add them rather than falling back to this unperformant workaround.
For the record, the current implementation supports C11, GCC, Solaris, AIX and Windows atomics (used in that order of preference).","However, given there are a probably a bunch of other warnings, I vote to leave as-is.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,746,2020-07-20T13:20:03Z,2020-07-24T05:32:36Z,2020-07-24T05:32:50Z,MERGED,True,21,0,7,https://github.com/jaltman,enable keepalive mode for kadmin sockets,4,[],https://github.com/heimdal/heimdal/pull/746,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/746,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,746,2020-07-20T13:20:03Z,2020-07-24T05:32:36Z,2020-07-24T05:32:50Z,MERGED,True,21,0,7,https://github.com/jaltman,enable keepalive mode for kadmin sockets,4,[],https://github.com/heimdal/heimdal/pull/746,https://github.com/coveralls,2,https://github.com/heimdal/heimdal/pull/746#issuecomment-661310448,,Coverage increased (+0.003%) to 52.737% when pulling c1dbcff on jaltman/kadmin-keepalive into ee7e345 on master.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,746,2020-07-20T13:20:03Z,2020-07-24T05:32:36Z,2020-07-24T05:32:50Z,MERGED,True,21,0,7,https://github.com/jaltman,enable keepalive mode for kadmin sockets,4,[],https://github.com/heimdal/heimdal/pull/746,https://github.com/lhoward,3,https://github.com/heimdal/heimdal/pull/746#issuecomment-661615027,,"Haven't looked closely (just did a search on GitHub), but does kadmind need to be told to ignore SIGPIPE or is it doing that already?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,748,2020-08-26T19:10:51Z,2020-09-08T20:37:04Z,2020-09-09T13:41:59Z,MERGED,True,8720,1383,96,https://github.com/nicowilliams,Horizontal scaling: virtual principal namespaces (and related changes),10,['feature request'],https://github.com/heimdal/heimdal/pull/748,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/748,"Scaling a realm's KDCs to support very high service principal creation/deletion rates has been tricky.  Having a primary/secondary replication architecture creates a bottleneck where block device write transaction rates are the limiting factor, and where replication adds latency.  Using the Berkeley HDB backend doesn't help because reading blocks writing and writing blocks reading (using the SQLite3 or LMDB backends makes this better).
The premise of this PR is to not do any write transactions to create host-based service principals.  To do this we'll have a notion of namespaces for host-based service principals where principals and their keys are derived on demand, requiring only a read transaction.  This means that base key rotation causes virtual principal key rotation.  To cope with this we require that users of this feature frequently poll for new keytab entries, and therefore we can even rotate virtual keys without rotating base keys.
Frequent service key rotation has security benefits, and deriving service principal keys from base keys that do not leave the KDC has the benefit of enabling very fast realm re-keying, which combined with PKINIT would mean that KDC compromises can be recovered from very quickly.
This PR contains:


A revamp of the recently merged virtual principal / namespace feature, complete with automatic key rotation on a strict schedule.  The motivation for this is scalability, as described above.
This feature moves from being a strictly KDC-side feature to being implemented at the HDB layer.
It is now possible to create a namespace of host-based service principals that have their existence and keys derived from the namespace's base keys in two steps: first an intermediate key is derived using the name of the virtual principal, then a final key is derived from the intermediate key and the intended kvno.
Keys rotate on a strict schedule specified in the namespace's HDB record.
All the key derivation code is strictly deterministic, and depends only on: the principal name, enctype, and kvno requested, the current HDB contents, and the current time with current time is passed in as an explicit argument.  This allows us to have a pretty good test, lib/hdb/test_namespace.c.


A new HTTP service, like bx509d, called httpkadmind, that currently only has a /get-keys and /get-config end-points corresponding to kadmin's ext_keytab and get --krb5-config-file=... commands respectively.  This supports write operations where virtual principals / namespaces are not in use.  Write operations, when needed, can yield redirects to a primary server, or can connect to an appropriate HDB remotely via the Heimdal kadmin protocol.  Write operations require POST, while read-only operations require only GET; POSTs require a CSRF token.
Currently this uses the same authorization architecture (and plugins) as bx509d, and not the kadmind ACL mechanism, which is rather poor.


A new krb5.conf [hdb] section parameter for configuring a delay before new keys become visible on concrete principals.  This allows for migration from other keytab orchestration mechanisms to using our new mechanism by giving services that fetch keys using the new scheme to fetch them frequently enough that even if other orchestration services sharing the same target host-based service principals rotate keys independently.


A new HDB extension and kadm5 and kadmin support for storing krb5.conf content in HDB entries.
This will allow us eventually to:

configure primary/secondary HDB replication roles in the HDB itself, and
automatically reconfigure iprop and httpkadmind services when the primary HDB replication role is changed.



Related to the preceding, there's now an option to make kadmind run read-only.
Eventually it would be nice to be able to have all the KDCs in a realm run kadmind and ipropd (no more ipropd-master and ipropd-slave) and have them all automatically discover the primary and secondary roles -and changes to those- and act accordingly.
As well this allows httpkadmind to be run either with direct, local HDB access, or as a proxy for a possibly-remote kadmind, and allows httpkadmind to support read-only secondaries and a read-write primary.


Support for setting/getting the etypes field of hdb_entry in kadm5 and kadmin.
The etypes field of hdb_entry was intended to document enctypes supported by services for the purpose of ticket session key enctype negotiation, but until now this was not supported, and instead we followed the MIT model of using service principals' long-term keys' enctypes to document supported enctypes.  The MIT model leads to HDB bloat by storing never-to-be-used keys just for their enctype metadata.  This feature will allow us to reduce HDB bloat.
This has to be done for this PR because it allows us to change the enctypes setting for virtual service principals without having to rotate namespaces' base keys.


Much work has been done to separate bx509d and httpkadmind from the kdc/ directory, though that separation is not yet complete.


It is now possible to create a principal with keys in one step.  Rather than first using kadm5_create_principal_3() with a random password and ticket issuance disallowed, then calling kadm5_randkey_principal_3(), one can now just call kadm5_create_principal_3() with KADM5_KEY_DATA, actual keys, and the empty string as the password.


The kx509/bx509 CA utility function has moved to lib/hx509/.","Scaling a realm's KDCs to support very high service principal creation/deletion rates has been tricky.  Having a primary/secondary replication architecture creates a bottleneck where block device write transaction rates are the limiting factor, and where replication adds latency.  Using the Berkeley HDB backend doesn't help because reading blocks writing and writing blocks reading (using the SQLite3 or LMDB backends makes this better).
The premise of this PR is to not do any write transactions to create host-based service principals.  To do this we'll have a notion of namespaces for host-based service principals where principals and their keys are derived on demand, requiring only a read transaction.  This means that base key rotation causes virtual principal key rotation.  To cope with this we require that users of this feature frequently poll for new keytab entries, and therefore we can even rotate virtual keys without rotating base keys.
Frequent service key rotation has security benefits, and deriving service principal keys from base keys that do not leave the KDC has the benefit of enabling very fast realm re-keying, which combined with PKINIT would mean that KDC compromises can be recovered from very quickly.
This PR contains:


A revamp of the recently merged virtual principal / namespace feature, complete with automatic key rotation on a strict schedule.  The motivation for this is scalability, as described above.
This feature moves from being a strictly KDC-side feature to being implemented at the HDB layer.
It is now possible to create a namespace of host-based service principals that have their existence and keys derived from the namespace's base keys in two steps: first an intermediate key is derived using the name of the virtual principal, then a final key is derived from the intermediate key and the intended kvno.
Keys rotate on a strict schedule specified in the namespace's HDB record.
All the key derivation code is strictly deterministic, and depends only on: the principal name, enctype, and kvno requested, the current HDB contents, and the current time with current time is passed in as an explicit argument.  This allows us to have a pretty good test, lib/hdb/test_namespace.c.


A new HTTP service, like bx509d, called httpkadmind, that currently only has a /get-keys and /get-config end-points corresponding to kadmin's ext_keytab and get --krb5-config-file=... commands respectively.  This supports write operations where virtual principals / namespaces are not in use.  Write operations, when needed, can yield redirects to a primary server, or can connect to an appropriate HDB remotely via the Heimdal kadmin protocol.  Write operations require POST, while read-only operations require only GET; POSTs require a CSRF token.
Currently this uses the same authorization architecture (and plugins) as bx509d, and not the kadmind ACL mechanism, which is rather poor.


A new krb5.conf [hdb] section parameter for configuring a delay before new keys become visible on concrete principals.  This allows for migration from other keytab orchestration mechanisms to using our new mechanism by giving services that fetch keys using the new scheme to fetch them frequently enough that even if other orchestration services sharing the same target host-based service principals rotate keys independently.


A new HDB extension and kadm5 and kadmin support for storing krb5.conf content in HDB entries.
This will allow us eventually to:

configure primary/secondary HDB replication roles in the HDB itself, and
automatically reconfigure iprop and httpkadmind services when the primary HDB replication role is changed.



Related to the preceding, there's now an option to make kadmind run read-only.
Eventually it would be nice to be able to have all the KDCs in a realm run kadmind and ipropd (no more ipropd-master and ipropd-slave) and have them all automatically discover the primary and secondary roles -and changes to those- and act accordingly.
As well this allows httpkadmind to be run either with direct, local HDB access, or as a proxy for a possibly-remote kadmind, and allows httpkadmind to support read-only secondaries and a read-write primary.


Support for setting/getting the etypes field of hdb_entry in kadm5 and kadmin.
The etypes field of hdb_entry was intended to document enctypes supported by services for the purpose of ticket session key enctype negotiation, but until now this was not supported, and instead we followed the MIT model of using service principals' long-term keys' enctypes to document supported enctypes.  The MIT model leads to HDB bloat by storing never-to-be-used keys just for their enctype metadata.  This feature will allow us to reduce HDB bloat.
This has to be done for this PR because it allows us to change the enctypes setting for virtual service principals without having to rotate namespaces' base keys.


Much work has been done to separate bx509d and httpkadmind from the kdc/ directory, though that separation is not yet complete.


It is now possible to create a principal with keys in one step.  Rather than first using kadm5_create_principal_3() with a random password and ticket issuance disallowed, then calling kadm5_randkey_principal_3(), one can now just call kadm5_create_principal_3() with KADM5_KEY_DATA, actual keys, and the empty string as the password.


The kx509/bx509 CA utility function has moved to lib/hx509/.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,751,2020-08-29T04:23:14Z,2020-08-29T06:13:01Z,2020-08-29T06:13:01Z,MERGED,True,59,66,1,https://github.com/lhoward,krb5: consolidate default ccache type logic into get_default_cc_type(),1,['bug'],https://github.com/heimdal/heimdal/pull/751,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/751,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,751,2020-08-29T04:23:14Z,2020-08-29T06:13:01Z,2020-08-29T06:13:01Z,MERGED,True,59,66,1,https://github.com/lhoward,krb5: consolidate default ccache type logic into get_default_cc_type(),1,['bug'],https://github.com/heimdal/heimdal/pull/751,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/751#issuecomment-683234284,,get_default_cc_type_win32() is kinda broken though for API:krb5cc,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,752,2020-08-29T06:47:38Z,2020-08-30T03:44:20Z,2020-08-30T03:44:20Z,MERGED,True,68,75,1,https://github.com/lhoward,krb5: simplify krb5_cc_resolve_sub() logic,1,[],https://github.com/heimdal/heimdal/pull/752,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/752,"krb5_cc_resolve_sub() redundantly checks the collection name for a cctype, and also assumes that cctype can be NULL (which is not the case as get_default_cc_type() always returns non-NULL).","krb5_cc_resolve_sub() redundantly checks the collection name for a cctype, and also assumes that cctype can be NULL (which is not the case as get_default_cc_type() always returns non-NULL).",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,752,2020-08-29T06:47:38Z,2020-08-30T03:44:20Z,2020-08-30T03:44:20Z,MERGED,True,68,75,1,https://github.com/lhoward,krb5: simplify krb5_cc_resolve_sub() logic,1,[],https://github.com/heimdal/heimdal/pull/752,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/752#issuecomment-683356505,"krb5_cc_resolve_sub() redundantly checks the collection name for a cctype, and also assumes that cctype can be NULL (which is not the case as get_default_cc_type() always returns non-NULL).","Good idea, Jeff!",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,752,2020-08-29T06:47:38Z,2020-08-30T03:44:20Z,2020-08-30T03:44:20Z,MERGED,True,68,75,1,https://github.com/lhoward,krb5: simplify krb5_cc_resolve_sub() logic,1,[],https://github.com/heimdal/heimdal/pull/752,https://github.com/jaltman,3,https://github.com/heimdal/heimdal/pull/752#issuecomment-683367559,"krb5_cc_resolve_sub() redundantly checks the collection name for a cctype, and also assumes that cctype can be NULL (which is not the case as get_default_cc_type() always returns non-NULL).","I think there is a missing ""static""",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,752,2020-08-29T06:47:38Z,2020-08-30T03:44:20Z,2020-08-30T03:44:20Z,MERGED,True,68,75,1,https://github.com/lhoward,krb5: simplify krb5_cc_resolve_sub() logic,1,[],https://github.com/heimdal/heimdal/pull/752,https://github.com/lhoward,4,https://github.com/heimdal/heimdal/pull/752#issuecomment-683367598,"krb5_cc_resolve_sub() redundantly checks the collection name for a cctype, and also assumes that cctype can be NULL (which is not the case as get_default_cc_type() always returns non-NULL).","Thanks, I've fixed it, weird that it compiled for me.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,753,2020-09-01T02:24:11Z,2020-11-06T14:09:02Z,2020-11-06T14:09:02Z,MERGED,True,6,0,1,https://github.com/nicowilliams,krb5: Fix API: ccache failure,2,[],https://github.com/heimdal/heimdal/pull/753,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/753,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,753,2020-09-01T02:24:11Z,2020-11-06T14:09:02Z,2020-11-06T14:09:02Z,MERGED,True,6,0,1,https://github.com/nicowilliams,krb5: Fix API: ccache failure,2,[],https://github.com/heimdal/heimdal/pull/753,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/753#issuecomment-684156004,,"LGTM, just put something in the commit message?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,753,2020-09-01T02:24:11Z,2020-11-06T14:09:02Z,2020-11-06T14:09:02Z,MERGED,True,6,0,1,https://github.com/nicowilliams,krb5: Fix API: ccache failure,2,[],https://github.com/heimdal/heimdal/pull/753,https://github.com/lhoward,3,https://github.com/heimdal/heimdal/pull/753#issuecomment-686156452,,"BTW, @SimonWilkinson have you tried building with -DKCM_IS_API_CACHE=1? I'm wondering if this should be the default given versions of macOS that don't use Heimdal are less common. When this is defined, the API cache is implemented directly in terms of KCM rather than CCAPI.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,753,2020-09-01T02:24:11Z,2020-11-06T14:09:02Z,2020-11-06T14:09:02Z,MERGED,True,6,0,1,https://github.com/nicowilliams,krb5: Fix API: ccache failure,2,[],https://github.com/heimdal/heimdal/pull/753,https://github.com/jaltman,4,https://github.com/heimdal/heimdal/pull/753#issuecomment-722515698,,"See comments re: NULL, KDC time offset and whether we should use KCM

@lhoward, I believe the assignment of acache and acache_name to NULL is appropriate as documentation if nothing else.  I do not believe it is appropriate to return the cache offset since we are returning ""No Cache"".",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,754,2020-09-14T21:40:00Z,2020-09-14T22:25:01Z,2020-09-14T22:25:01Z,MERGED,True,57,80,2,https://github.com/nicowilliams,Fix leak in kadm5 reconnect,2,[],https://github.com/heimdal/heimdal/pull/754,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/754,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,755,2020-09-18T04:48:18Z,2020-09-18T19:33:01Z,2020-09-18T19:34:45Z,MERGED,True,296,31,10,https://github.com/nicowilliams,Hierarchical iprop,5,[],https://github.com/heimdal/heimdal/pull/755,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/755,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,755,2020-09-18T04:48:18Z,2020-09-18T19:33:01Z,2020-09-18T19:34:45Z,MERGED,True,296,31,10,https://github.com/nicowilliams,Hierarchical iprop,5,[],https://github.com/heimdal/heimdal/pull/755,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/755#issuecomment-695048837,,"FYI, @vdukhovni reviewed and approved.  He did find several issues, including that iprop would block when the log is empty and not even send a complete dump.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,756,2020-09-29T19:01:37Z,2020-09-29T21:25:31Z,2020-09-29T21:25:31Z,MERGED,True,147,73,2,https://github.com/nicowilliams,httpkadmind: Fix error clobbering,1,[],https://github.com/heimdal/heimdal/pull/756,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/756,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,757,2020-10-03T00:56:42Z,2020-10-05T19:57:21Z,2020-10-05T19:57:21Z,MERGED,True,199,96,5,https://github.com/nicowilliams,hdb: Remove default HDB backend footgun,2,[],https://github.com/heimdal/heimdal/pull/757,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/757,"The current state of the world is such that the default HDB is named ""heimdal"" in the LOCALSTATEDIR, so typically it's /var/heimdal/heimdal.  The actual backend for this is to be determined at run-time because a backend type prefix is not part of the default HDB name.
Well, the default backend type selection at run-time depends build configuration.  So if you have BDB installed but not LMDB, you'll get BDB as the default backend, but if you later install LMDB and rebuild Heimdal then default backend type selection will change, and if you install the resulting artifacts and restart a KDC that was running with the default HDB... the KDC will fail to start!
The fix is to be a bit smarter about default backend selection.
This PR includes two commits:


The first commit implements HDB ""tasting"" for file-based HDB backends so that if you have an HDB of type foo: and later add support for a new preferred backend bar: you won't stop being able to open the default HDB that exists.


The second commit uses an HDB type from the ./configure run, which can be affected by the ./configure --with-db-type-preference=<list> option.","The current state of the world is such that the default HDB is named ""heimdal"" in the LOCALSTATEDIR, so typically it's /var/heimdal/heimdal.  The actual backend for this is to be determined at run-time because a backend type prefix is not part of the default HDB name.
Well, the default backend type selection at run-time depends build configuration.  So if you have BDB installed but not LMDB, you'll get BDB as the default backend, but if you later install LMDB and rebuild Heimdal then default backend type selection will change, and if you install the resulting artifacts and restart a KDC that was running with the default HDB... the KDC will fail to start!
The fix is to be a bit smarter about default backend selection.
This PR includes two commits:


The first commit implements HDB ""tasting"" for file-based HDB backends so that if you have an HDB of type foo: and later add support for a new preferred backend bar: you won't stop being able to open the default HDB that exists.


The second commit uses an HDB type from the ./configure run, which can be affected by the ./configure --with-db-type-preference=<list> option.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,757,2020-10-03T00:56:42Z,2020-10-05T19:57:21Z,2020-10-05T19:57:21Z,MERGED,True,199,96,5,https://github.com/nicowilliams,hdb: Remove default HDB backend footgun,2,[],https://github.com/heimdal/heimdal/pull/757,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/757#issuecomment-703044634,"The current state of the world is such that the default HDB is named ""heimdal"" in the LOCALSTATEDIR, so typically it's /var/heimdal/heimdal.  The actual backend for this is to be determined at run-time because a backend type prefix is not part of the default HDB name.
Well, the default backend type selection at run-time depends build configuration.  So if you have BDB installed but not LMDB, you'll get BDB as the default backend, but if you later install LMDB and rebuild Heimdal then default backend type selection will change, and if you install the resulting artifacts and restart a KDC that was running with the default HDB... the KDC will fail to start!
The fix is to be a bit smarter about default backend selection.
This PR includes two commits:


The first commit implements HDB ""tasting"" for file-based HDB backends so that if you have an HDB of type foo: and later add support for a new preferred backend bar: you won't stop being able to open the default HDB that exists.


The second commit uses an HDB type from the ./configure run, which can be affected by the ./configure --with-db-type-preference=<list> option.",We should add a test that it is possible to iterate the contents of the HDB while performing write operations when using the LMDB or SQLite3 backends.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,758,2020-10-06T19:17:06Z,2020-10-08T19:47:25Z,2020-10-08T19:47:25Z,MERGED,True,472,2,3,https://github.com/nicowilliams,hdb: Test LMDB and SQLite3 HDB concurrency,1,[],https://github.com/heimdal/heimdal/pull/758,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/758,"Test that we can dump an HDB w/o blocking write transactions.
This currently works for different processes (both backends), but not
for threads (for either backend), and it's not yet clear why.","Test that we can dump an HDB w/o blocking write transactions.
This currently works for different processes (both backends), but not
for threads (for either backend), and it's not yet clear why.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,758,2020-10-06T19:17:06Z,2020-10-08T19:47:25Z,2020-10-08T19:47:25Z,MERGED,True,472,2,3,https://github.com/nicowilliams,hdb: Test LMDB and SQLite3 HDB concurrency,1,[],https://github.com/heimdal/heimdal/pull/758,https://github.com/hyc,2,https://github.com/heimdal/heimdal/pull/758#issuecomment-704564291,"Test that we can dump an HDB w/o blocking write transactions.
This currently works for different processes (both backends), but not
for threads (for either backend), and it's not yet clear why.","When you say ""not working"" what's actually happening? deadlock? invalid data?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,760,2020-10-08T19:50:06Z,2020-10-12T20:55:53Z,2021-07-30T14:12:39Z,MERGED,True,270,128,3,https://github.com/elric1,gss-token(1) improvements and fixes.,6,[],https://github.com/heimdal/heimdal/pull/760,https://github.com/elric1,1,https://github.com/heimdal/heimdal/pull/760,"We present a series of improvements and fixes to gss-token(1). We clean up and restructure the code a bit. We re-implement a couple of flags that were forgot when it was imported and changed to use getargs(). We make the code implement a proper GSS loop rather than assuming that there is only a single input and output token. We provide a mechanism to split up tokens to test new functionality that is being developed. And finally, we implement a way to ask GSS to use a particular mech on the initiator side.","We present a series of improvements and fixes to gss-token(1). We clean up and restructure the code a bit. We re-implement a couple of flags that were forgot when it was imported and changed to use getargs(). We make the code implement a proper GSS loop rather than assuming that there is only a single input and output token. We provide a mechanism to split up tokens to test new functionality that is being developed. And finally, we implement a way to ask GSS to use a particular mech on the initiator side.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,761,2020-10-09T01:59:52Z,2020-10-27T18:31:42Z,2020-10-27T18:31:42Z,CLOSED,False,0,0,0,https://github.com/nicowilliams,hdb: Fix HDB corruption with LMDB backend,0,[],https://github.com/heimdal/heimdal/pull/761,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/761,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,767,2020-12-29T18:00:27Z,2021-09-19T03:27:31Z,2021-09-19T11:39:44Z,CLOSED,False,1805,662,21,https://github.com/iboukris,rework PAC and AD-SIGNTICKET for S4U2Proxy support,8,[],https://github.com/heimdal/heimdal/pull/767,https://github.com/iboukris,1,https://github.com/heimdal/heimdal/pull/767,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,767,2020-12-29T18:00:27Z,2021-09-19T03:27:31Z,2021-09-19T11:39:44Z,CLOSED,False,1805,662,21,https://github.com/iboukris,rework PAC and AD-SIGNTICKET for S4U2Proxy support,8,[],https://github.com/heimdal/heimdal/pull/767,https://github.com/iboukris,2,https://github.com/heimdal/heimdal/pull/767#issuecomment-876321896,,"I realized I can take some tests from PR #599, the second commit in there regarding AS-REQ may still be needed, although without ticket-signature it would still be unusable as evidence ticket in constrained-delegation, so it matters less.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,767,2020-12-29T18:00:27Z,2021-09-19T03:27:31Z,2021-09-19T11:39:44Z,CLOSED,False,1805,662,21,https://github.com/iboukris,rework PAC and AD-SIGNTICKET for S4U2Proxy support,8,[],https://github.com/heimdal/heimdal/pull/767,https://github.com/iboukris,3,https://github.com/heimdal/heimdal/pull/767#issuecomment-920940856,,"I think this is ready for review, thanks!",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,767,2020-12-29T18:00:27Z,2021-09-19T03:27:31Z,2021-09-19T11:39:44Z,CLOSED,False,1805,662,21,https://github.com/iboukris,rework PAC and AD-SIGNTICKET for S4U2Proxy support,8,[],https://github.com/heimdal/heimdal/pull/767,https://github.com/lhoward,4,https://github.com/heimdal/heimdal/pull/767#issuecomment-921335650,,"Just a general comment, everyone agrees that removing KRB5SignedPath won't be an interoperability issue? I know we probably have been through this before but, we should document what the issues are, e.g. do all KDCs in a realm need to be upgraded at once, is this only relevant if they were issuing authorisation data, etc.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,767,2020-12-29T18:00:27Z,2021-09-19T03:27:31Z,2021-09-19T11:39:44Z,CLOSED,False,1805,662,21,https://github.com/iboukris,rework PAC and AD-SIGNTICKET for S4U2Proxy support,8,[],https://github.com/heimdal/heimdal/pull/767,https://github.com/iboukris,5,https://github.com/heimdal/heimdal/pull/767#issuecomment-921350569,,"Just a general comment, everyone agrees that removing KRB5SignedPath won't be an interoperability issue? I know we probably have been through this before but, we should document what the issues are, e.g. do all KDCs in a realm need to be upgraded at once, is this only relevant if they were issuing authorisation data, etc.

So iirc when we last discussed it with @greghudson we noticed that MIT and Heimdal do not currently interoperate anyway as the asn1 of KRB5SignedPath differs, while by moving to PAC we'd be able to interoperate with both MIT and Windows.
For S4U2Proxy request to work on an updated KDC the evidence ticket should be issued by an updated KDC as well, i'll add a note to the commit message.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,767,2020-12-29T18:00:27Z,2021-09-19T03:27:31Z,2021-09-19T11:39:44Z,CLOSED,False,1805,662,21,https://github.com/iboukris,rework PAC and AD-SIGNTICKET for S4U2Proxy support,8,[],https://github.com/heimdal/heimdal/pull/767,https://github.com/lhoward,6,https://github.com/heimdal/heimdal/pull/767#issuecomment-921358446,,"Just a general comment, everyone agrees that removing KRB5SignedPath won't be an interoperability issue? I know we probably have been through this before but, we should document what the issues are, e.g. do all KDCs in a realm need to be upgraded at once, is this only relevant if they were issuing authorisation data, etc.

So iirc when we last discussed it with @greghudson we noticed that MIT and Heimdal do not currently interoperate anyway as the asn1 of KRB5SignedPath differs, while by moving to PAC we'd be able to interoperate with both MIT and Windows.
For S4U2Proxy request to work on an updated KDC the evidence ticket should be issued by an updated KDC as well, i'll add a note to the commit message.

I guess, MIT and Heimdal KDCs were less likely to be expected to interoperate within the same realm, but Heimdal KDCs may be. I don't think you need to change anything, just perhaps a note, I'm sure there are other breaking changes (like the FAST cookie key derivation coming up in the lukeh/gss-preauth-apple branch).",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,767,2020-12-29T18:00:27Z,2021-09-19T03:27:31Z,2021-09-19T11:39:44Z,CLOSED,False,1805,662,21,https://github.com/iboukris,rework PAC and AD-SIGNTICKET for S4U2Proxy support,8,[],https://github.com/heimdal/heimdal/pull/767,https://github.com/iboukris,7,https://github.com/heimdal/heimdal/pull/767#issuecomment-922281305,,"I've added a note about interoperability in the commit message and I think I've addressed all the comments, I've also added a check for duplicate PACs while at it, please take a look.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,767,2020-12-29T18:00:27Z,2021-09-19T03:27:31Z,2021-09-19T11:39:44Z,CLOSED,False,1805,662,21,https://github.com/iboukris,rework PAC and AD-SIGNTICKET for S4U2Proxy support,8,[],https://github.com/heimdal/heimdal/pull/767,https://github.com/lhoward,8,https://github.com/heimdal/heimdal/pull/767#issuecomment-922398692,,Ready to merge? If so I'll just clean up some indentation and commit messages etc and do it manually.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,767,2020-12-29T18:00:27Z,2021-09-19T03:27:31Z,2021-09-19T11:39:44Z,CLOSED,False,1805,662,21,https://github.com/iboukris,rework PAC and AD-SIGNTICKET for S4U2Proxy support,8,[],https://github.com/heimdal/heimdal/pull/767,https://github.com/iboukris,9,https://github.com/heimdal/heimdal/pull/767#issuecomment-922425227,,Thanks Luke and all!,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,767,2020-12-29T18:00:27Z,2021-09-19T03:27:31Z,2021-09-19T11:39:44Z,CLOSED,False,1805,662,21,https://github.com/iboukris,rework PAC and AD-SIGNTICKET for S4U2Proxy support,8,[],https://github.com/heimdal/heimdal/pull/767,https://github.com/iboukris,10,https://github.com/heimdal/heimdal/pull/767#issuecomment-922458604,,"Hi @lhoward I noticed with my last changes _krb5_kdc_pac_ticket_parse() would rely on the caller to free the pac in case of an error, I don't like it so I'll try switch to a cleanup handler, I'll submit a PR later today hopefully.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,767,2020-12-29T18:00:27Z,2021-09-19T03:27:31Z,2021-09-19T11:39:44Z,CLOSED,False,1805,662,21,https://github.com/iboukris,rework PAC and AD-SIGNTICKET for S4U2Proxy support,8,[],https://github.com/heimdal/heimdal/pull/767,https://github.com/lhoward,11,https://github.com/heimdal/heimdal/pull/767#issuecomment-922459633,,Sure thing.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,768,2020-12-30T02:45:02Z,2021-03-26T23:47:49Z,2021-03-26T23:47:55Z,MERGED,True,6,3,1,https://github.com/kaduk,Replace dead link in kerberos.8,1,[],https://github.com/heimdal/heimdal/pull/768,https://github.com/kaduk,1,https://github.com/heimdal/heimdal/pull/768,"While Ken Hornstein's FAQ was useful in its day, much of its content
is no longer relevant (e.g., Kerberos 4) or even actively harmful
(e.g., the latest version of MIT krb5 is not 1.2.1).  It was also
somewhat MIT-krb5-focused, especially relating to configuration file
snippets, which is not necessarily a great fit for the Heimdal
documentation.
Replace it with a tutorial hosted on kerberos.org and the classic
""dialogue"" from Bill Bryant.","While Ken Hornstein's FAQ was useful in its day, much of its content
is no longer relevant (e.g., Kerberos 4) or even actively harmful
(e.g., the latest version of MIT krb5 is not 1.2.1).  It was also
somewhat MIT-krb5-focused, especially relating to configuration file
snippets, which is not necessarily a great fit for the Heimdal
documentation.
Replace it with a tutorial hosted on kerberos.org and the classic
""dialogue"" from Bill Bryant.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,768,2020-12-30T02:45:02Z,2021-03-26T23:47:49Z,2021-03-26T23:47:55Z,MERGED,True,6,3,1,https://github.com/kaduk,Replace dead link in kerberos.8,1,[],https://github.com/heimdal/heimdal/pull/768,https://github.com/kaduk,2,https://github.com/heimdal/heimdal/pull/768#issuecomment-768757596,"While Ken Hornstein's FAQ was useful in its day, much of its content
is no longer relevant (e.g., Kerberos 4) or even actively harmful
(e.g., the latest version of MIT krb5 is not 1.2.1).  It was also
somewhat MIT-krb5-focused, especially relating to configuration file
snippets, which is not necessarily a great fit for the Heimdal
documentation.
Replace it with a tutorial hosted on kerberos.org and the classic
""dialogue"" from Bill Bryant.",I guess we could also ask @kenh directly what he would do.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,768,2020-12-30T02:45:02Z,2021-03-26T23:47:49Z,2021-03-26T23:47:55Z,MERGED,True,6,3,1,https://github.com/kaduk,Replace dead link in kerberos.8,1,[],https://github.com/heimdal/heimdal/pull/768,https://github.com/nicowilliams,3,https://github.com/heimdal/heimdal/pull/768#issuecomment-808592339,"While Ken Hornstein's FAQ was useful in its day, much of its content
is no longer relevant (e.g., Kerberos 4) or even actively harmful
(e.g., the latest version of MIT krb5 is not 1.2.1).  It was also
somewhat MIT-krb5-focused, especially relating to configuration file
snippets, which is not necessarily a great fit for the Heimdal
documentation.
Replace it with a tutorial hosted on kerberos.org and the classic
""dialogue"" from Bill Bryant.",Thanks.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,771,2021-03-17T12:20:05Z,2021-03-17T17:05:46Z,2021-03-17T17:28:38Z,MERGED,True,1,1,1,https://github.com/Polynomial-C,autoconf-2.70 fix,1,[],https://github.com/heimdal/heimdal/pull/771,https://github.com/Polynomial-C,1,https://github.com/heimdal/heimdal/pull/771,"autoconf-2.70 and newer are more strict with quoting etc. and thus generate
a broken configure file:
  configure: 20855: Syntax error: "")"" unexpected (expecting ""fi"")

Gentoo-bug: https://bugs.gentoo.org/776241
Signed-off-by: Lars Wendler polynomial-c@gentoo.org","autoconf-2.70 and newer are more strict with quoting etc. and thus generate
a broken configure file:
  configure: 20855: Syntax error: "")"" unexpected (expecting ""fi"")

Gentoo-bug: https://bugs.gentoo.org/776241
Signed-off-by: Lars Wendler polynomial-c@gentoo.org",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,771,2021-03-17T12:20:05Z,2021-03-17T17:05:46Z,2021-03-17T17:28:38Z,MERGED,True,1,1,1,https://github.com/Polynomial-C,autoconf-2.70 fix,1,[],https://github.com/heimdal/heimdal/pull/771,https://github.com/Polynomial-C,2,https://github.com/heimdal/heimdal/pull/771#issuecomment-801245036,"autoconf-2.70 and newer are more strict with quoting etc. and thus generate
a broken configure file:
  configure: 20855: Syntax error: "")"" unexpected (expecting ""fi"")

Gentoo-bug: https://bugs.gentoo.org/776241
Signed-off-by: Lars Wendler polynomial-c@gentoo.org",I have removed the changes to AS_IF because this code is inside of AC_DEFUN. The remaining change still is necessary to get a working configure file with autoconf-2.70 or newer.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,771,2021-03-17T12:20:05Z,2021-03-17T17:05:46Z,2021-03-17T17:28:38Z,MERGED,True,1,1,1,https://github.com/Polynomial-C,autoconf-2.70 fix,1,[],https://github.com/heimdal/heimdal/pull/771,https://github.com/jaltman,3,https://github.com/heimdal/heimdal/pull/771#issuecomment-801254123,"autoconf-2.70 and newer are more strict with quoting etc. and thus generate
a broken configure file:
  configure: 20855: Syntax error: "")"" unexpected (expecting ""fi"")

Gentoo-bug: https://bugs.gentoo.org/776241
Signed-off-by: Lars Wendler polynomial-c@gentoo.org",Thank you.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,772,2021-04-06T20:45:38Z,2021-04-06T22:43:10Z,2021-04-06T22:43:10Z,MERGED,True,316,66,5,https://github.com/nicowilliams,Add /get-tgt end-point to bx509d,2,[],https://github.com/heimdal/heimdal/pull/772,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/772,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,779,2021-06-15T20:19:02Z,2021-06-16T02:11:06Z,2021-06-17T06:00:36Z,CLOSED,False,1,1,1,https://github.com/fihuer,kcm: Fix SEGV in kcm_get_cache_next,1,['bug'],https://github.com/heimdal/heimdal/pull/779,https://github.com/fihuer,1,https://github.com/heimdal/heimdal/pull/779,"The 'KCM_OP_GET_CACHE_BY_UUID' op may return 'KRB5_FCC_NOFILE' if
user access gets refused by KCM access control.
In this case, kcm_get_cache_next ignores it and may trigger a NULL pointer dereference
in ""krb5_ret_stringz"".
This patch fixes it by catching it like a 'KRB5_CC_END' error (no more ccaches).","The 'KCM_OP_GET_CACHE_BY_UUID' op may return 'KRB5_FCC_NOFILE' if
user access gets refused by KCM access control.
In this case, kcm_get_cache_next ignores it and may trigger a NULL pointer dereference
in ""krb5_ret_stringz"".
This patch fixes it by catching it like a 'KRB5_CC_END' error (no more ccaches).",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,779,2021-06-15T20:19:02Z,2021-06-16T02:11:06Z,2021-06-17T06:00:36Z,CLOSED,False,1,1,1,https://github.com/fihuer,kcm: Fix SEGV in kcm_get_cache_next,1,['bug'],https://github.com/heimdal/heimdal/pull/779,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/779#issuecomment-861961848,"The 'KCM_OP_GET_CACHE_BY_UUID' op may return 'KRB5_FCC_NOFILE' if
user access gets refused by KCM access control.
In this case, kcm_get_cache_next ignores it and may trigger a NULL pointer dereference
in ""krb5_ret_stringz"".
This patch fixes it by catching it like a 'KRB5_CC_END' error (no more ccaches).","Hmm, yes, this code is a bit suspect but I am not sure this the right solution. I suspect the logic should be:
    ret = krb5_kcm_call(context, request, &response, &response_data);
    krb5_storage_free(request);
    if (ret == KRB5_CC_END) {
        goto again;
    } else if (ret != 0) {
        krb5_storage_free(response);
        krb5_data_free(&response_data);
        return ret;
    }",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,779,2021-06-15T20:19:02Z,2021-06-16T02:11:06Z,2021-06-17T06:00:36Z,CLOSED,False,1,1,1,https://github.com/fihuer,kcm: Fix SEGV in kcm_get_cache_next,1,['bug'],https://github.com/heimdal/heimdal/pull/779,https://github.com/lhoward,3,https://github.com/heimdal/heimdal/pull/779#issuecomment-861965430,"The 'KCM_OP_GET_CACHE_BY_UUID' op may return 'KRB5_FCC_NOFILE' if
user access gets refused by KCM access control.
In this case, kcm_get_cache_next ignores it and may trigger a NULL pointer dereference
in ""krb5_ret_stringz"".
This patch fixes it by catching it like a 'KRB5_CC_END' error (no more ccaches).",I'll see if Apple ever fixed this...,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,779,2021-06-15T20:19:02Z,2021-06-16T02:11:06Z,2021-06-17T06:00:36Z,CLOSED,False,1,1,1,https://github.com/fihuer,kcm: Fix SEGV in kcm_get_cache_next,1,['bug'],https://github.com/heimdal/heimdal/pull/779,https://github.com/lhoward,4,https://github.com/heimdal/heimdal/pull/779#issuecomment-861975214,"The 'KCM_OP_GET_CACHE_BY_UUID' op may return 'KRB5_FCC_NOFILE' if
user access gets refused by KCM access control.
In this case, kcm_get_cache_next ignores it and may trigger a NULL pointer dereference
in ""krb5_ret_stringz"".
This patch fixes it by catching it like a 'KRB5_CC_END' error (no more ccaches).","Yes, the current Apple code returns directly if ret != 0, there is no need to free the response data as it will not be allocated on failure. I will apply Apple's patch now.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,779,2021-06-15T20:19:02Z,2021-06-16T02:11:06Z,2021-06-17T06:00:36Z,CLOSED,False,1,1,1,https://github.com/fihuer,kcm: Fix SEGV in kcm_get_cache_next,1,['bug'],https://github.com/heimdal/heimdal/pull/779,https://github.com/lhoward,5,https://github.com/heimdal/heimdal/pull/779#issuecomment-861981364,"The 'KCM_OP_GET_CACHE_BY_UUID' op may return 'KRB5_FCC_NOFILE' if
user access gets refused by KCM access control.
In this case, kcm_get_cache_next ignores it and may trigger a NULL pointer dereference
in ""krb5_ret_stringz"".
This patch fixes it by catching it like a 'KRB5_CC_END' error (no more ccaches).",Fixed in 0452d8c,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,780,2021-06-22T20:48:43Z,2021-06-23T01:56:04Z,2021-06-23T10:22:15Z,MERGED,True,4,1,1,https://github.com/abartlet,Provide the correct principal name to verify_flags() for user2user tickets,1,[],https://github.com/heimdal/heimdal/pull/780,https://github.com/abartlet,1,https://github.com/heimdal/heimdal/pull/780,"This is a patch to help Samba merge in a current upstrem Heimdal and is selected out of a larger patch by @metze-samba
It looks like this codepath is tested by server_uu / check-uu but I've not manually checked it.
When b->kdc_options.enc_tkt_in_skey is set, the variable 'spn'
provided to verify_flags() for the purpose of logging is not
yet set, it is still NULL from the initialiser.
On Samba we see, when compiling with -O3 and strict warning rules with
gcc version 9.3.0 (Ubuntu 9.3.0-17ubuntu1~20.04):
$ make -k
PYTHONHASHSEED=1 WAF_MAKE=1  ./buildtools/bin/waf build
Waf: Entering directory `/home/abartlet/heimdal-import/samba/bin/default'
Selected embedded Heimdal build
[2822/4527] Compiling source4/heimdal/kdc/krb5tgs.c
In function ‘verify_flags’,
inlined from ‘verify_flags’ at ../../source4/heimdal/kdc/krb5tgs.c:625:1,
inlined from ‘tgs_build_reply.isra.0’ at ../../source4/heimdal/kdc/krb5tgs.c:1671:8:
../../source4/heimdal/kdc/krb5tgs.c:635:2: error: ‘%s’ directive argument is null [-Werror=format-overflow=]
635 |  kdc_log(context, config, 4, ""Ticket not valid (%s)"", pstr);
|  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In function ‘verify_flags’,
inlined from ‘tgs_build_reply.isra.0’ at ../../source4/heimdal/kdc/krb5tgs.c:1671:8:
../../source4/heimdal/kdc/krb5tgs.c:631:2: error: ‘%s’ directive argument is null [-Werror=format-overflow=]
631 |  kdc_log(context, config, 4, ""Ticket expired (%s)"", pstr);
|  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cc1: all warnings being treated as errors
Essentially, with an optimising compiler, the funciton is inlined
and the compiler notices that the kdc_log() argument is always NULL.
Selected from patches by Stefan Metzmacher metze@samba.org
in his master-heimdal branch at:
https://git.samba.org/?p=metze/samba/wip.git;a=commitdiff;h=2ac326b9cb8f896f874edfa6725f087034270322#patch2
https://git.samba.org/?p=metze/samba/wip.git;a=shortlog;h=refs/heads/master-heimdal
Signed-off-by: Andrew Bartlett abartlet@samba.org","This is a patch to help Samba merge in a current upstrem Heimdal and is selected out of a larger patch by @metze-samba
It looks like this codepath is tested by server_uu / check-uu but I've not manually checked it.
When b->kdc_options.enc_tkt_in_skey is set, the variable 'spn'
provided to verify_flags() for the purpose of logging is not
yet set, it is still NULL from the initialiser.
On Samba we see, when compiling with -O3 and strict warning rules with
gcc version 9.3.0 (Ubuntu 9.3.0-17ubuntu1~20.04):
$ make -k
PYTHONHASHSEED=1 WAF_MAKE=1  ./buildtools/bin/waf build
Waf: Entering directory `/home/abartlet/heimdal-import/samba/bin/default'
Selected embedded Heimdal build
[2822/4527] Compiling source4/heimdal/kdc/krb5tgs.c
In function ‘verify_flags’,
inlined from ‘verify_flags’ at ../../source4/heimdal/kdc/krb5tgs.c:625:1,
inlined from ‘tgs_build_reply.isra.0’ at ../../source4/heimdal/kdc/krb5tgs.c:1671:8:
../../source4/heimdal/kdc/krb5tgs.c:635:2: error: ‘%s’ directive argument is null [-Werror=format-overflow=]
635 |  kdc_log(context, config, 4, ""Ticket not valid (%s)"", pstr);
|  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In function ‘verify_flags’,
inlined from ‘tgs_build_reply.isra.0’ at ../../source4/heimdal/kdc/krb5tgs.c:1671:8:
../../source4/heimdal/kdc/krb5tgs.c:631:2: error: ‘%s’ directive argument is null [-Werror=format-overflow=]
631 |  kdc_log(context, config, 4, ""Ticket expired (%s)"", pstr);
|  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cc1: all warnings being treated as errors
Essentially, with an optimising compiler, the funciton is inlined
and the compiler notices that the kdc_log() argument is always NULL.
Selected from patches by Stefan Metzmacher metze@samba.org
in his master-heimdal branch at:
https://git.samba.org/?p=metze/samba/wip.git;a=commitdiff;h=2ac326b9cb8f896f874edfa6725f087034270322#patch2
https://git.samba.org/?p=metze/samba/wip.git;a=shortlog;h=refs/heads/master-heimdal
Signed-off-by: Andrew Bartlett abartlet@samba.org",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,780,2021-06-22T20:48:43Z,2021-06-23T01:56:04Z,2021-06-23T10:22:15Z,MERGED,True,4,1,1,https://github.com/abartlet,Provide the correct principal name to verify_flags() for user2user tickets,1,[],https://github.com/heimdal/heimdal/pull/780,https://github.com/abartlet,2,https://github.com/heimdal/heimdal/pull/780#issuecomment-866379862,"This is a patch to help Samba merge in a current upstrem Heimdal and is selected out of a larger patch by @metze-samba
It looks like this codepath is tested by server_uu / check-uu but I've not manually checked it.
When b->kdc_options.enc_tkt_in_skey is set, the variable 'spn'
provided to verify_flags() for the purpose of logging is not
yet set, it is still NULL from the initialiser.
On Samba we see, when compiling with -O3 and strict warning rules with
gcc version 9.3.0 (Ubuntu 9.3.0-17ubuntu1~20.04):
$ make -k
PYTHONHASHSEED=1 WAF_MAKE=1  ./buildtools/bin/waf build
Waf: Entering directory `/home/abartlet/heimdal-import/samba/bin/default'
Selected embedded Heimdal build
[2822/4527] Compiling source4/heimdal/kdc/krb5tgs.c
In function ‘verify_flags’,
inlined from ‘verify_flags’ at ../../source4/heimdal/kdc/krb5tgs.c:625:1,
inlined from ‘tgs_build_reply.isra.0’ at ../../source4/heimdal/kdc/krb5tgs.c:1671:8:
../../source4/heimdal/kdc/krb5tgs.c:635:2: error: ‘%s’ directive argument is null [-Werror=format-overflow=]
635 |  kdc_log(context, config, 4, ""Ticket not valid (%s)"", pstr);
|  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In function ‘verify_flags’,
inlined from ‘tgs_build_reply.isra.0’ at ../../source4/heimdal/kdc/krb5tgs.c:1671:8:
../../source4/heimdal/kdc/krb5tgs.c:631:2: error: ‘%s’ directive argument is null [-Werror=format-overflow=]
631 |  kdc_log(context, config, 4, ""Ticket expired (%s)"", pstr);
|  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cc1: all warnings being treated as errors
Essentially, with an optimising compiler, the funciton is inlined
and the compiler notices that the kdc_log() argument is always NULL.
Selected from patches by Stefan Metzmacher metze@samba.org
in his master-heimdal branch at:
https://git.samba.org/?p=metze/samba/wip.git;a=commitdiff;h=2ac326b9cb8f896f874edfa6725f087034270322#patch2
https://git.samba.org/?p=metze/samba/wip.git;a=shortlog;h=refs/heads/master-heimdal
Signed-off-by: Andrew Bartlett abartlet@samba.org","I've not run the test either, because make check spins at test_nist for me, and it never gets that far, sorry!",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,780,2021-06-22T20:48:43Z,2021-06-23T01:56:04Z,2021-06-23T10:22:15Z,MERGED,True,4,1,1,https://github.com/abartlet,Provide the correct principal name to verify_flags() for user2user tickets,1,[],https://github.com/heimdal/heimdal/pull/780,https://github.com/lhoward,3,https://github.com/heimdal/heimdal/pull/780#issuecomment-866398073,"This is a patch to help Samba merge in a current upstrem Heimdal and is selected out of a larger patch by @metze-samba
It looks like this codepath is tested by server_uu / check-uu but I've not manually checked it.
When b->kdc_options.enc_tkt_in_skey is set, the variable 'spn'
provided to verify_flags() for the purpose of logging is not
yet set, it is still NULL from the initialiser.
On Samba we see, when compiling with -O3 and strict warning rules with
gcc version 9.3.0 (Ubuntu 9.3.0-17ubuntu1~20.04):
$ make -k
PYTHONHASHSEED=1 WAF_MAKE=1  ./buildtools/bin/waf build
Waf: Entering directory `/home/abartlet/heimdal-import/samba/bin/default'
Selected embedded Heimdal build
[2822/4527] Compiling source4/heimdal/kdc/krb5tgs.c
In function ‘verify_flags’,
inlined from ‘verify_flags’ at ../../source4/heimdal/kdc/krb5tgs.c:625:1,
inlined from ‘tgs_build_reply.isra.0’ at ../../source4/heimdal/kdc/krb5tgs.c:1671:8:
../../source4/heimdal/kdc/krb5tgs.c:635:2: error: ‘%s’ directive argument is null [-Werror=format-overflow=]
635 |  kdc_log(context, config, 4, ""Ticket not valid (%s)"", pstr);
|  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In function ‘verify_flags’,
inlined from ‘tgs_build_reply.isra.0’ at ../../source4/heimdal/kdc/krb5tgs.c:1671:8:
../../source4/heimdal/kdc/krb5tgs.c:631:2: error: ‘%s’ directive argument is null [-Werror=format-overflow=]
631 |  kdc_log(context, config, 4, ""Ticket expired (%s)"", pstr);
|  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cc1: all warnings being treated as errors
Essentially, with an optimising compiler, the funciton is inlined
and the compiler notices that the kdc_log() argument is always NULL.
Selected from patches by Stefan Metzmacher metze@samba.org
in his master-heimdal branch at:
https://git.samba.org/?p=metze/samba/wip.git;a=commitdiff;h=2ac326b9cb8f896f874edfa6725f087034270322#patch2
https://git.samba.org/?p=metze/samba/wip.git;a=shortlog;h=refs/heads/master-heimdal
Signed-off-by: Andrew Bartlett abartlet@samba.org",Possibly tpn can be reused. Also should be freed in out label for consistency.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,780,2021-06-22T20:48:43Z,2021-06-23T01:56:04Z,2021-06-23T10:22:15Z,MERGED,True,4,1,1,https://github.com/abartlet,Provide the correct principal name to verify_flags() for user2user tickets,1,[],https://github.com/heimdal/heimdal/pull/780,https://github.com/lhoward,4,https://github.com/heimdal/heimdal/pull/780#issuecomment-866418988,"This is a patch to help Samba merge in a current upstrem Heimdal and is selected out of a larger patch by @metze-samba
It looks like this codepath is tested by server_uu / check-uu but I've not manually checked it.
When b->kdc_options.enc_tkt_in_skey is set, the variable 'spn'
provided to verify_flags() for the purpose of logging is not
yet set, it is still NULL from the initialiser.
On Samba we see, when compiling with -O3 and strict warning rules with
gcc version 9.3.0 (Ubuntu 9.3.0-17ubuntu1~20.04):
$ make -k
PYTHONHASHSEED=1 WAF_MAKE=1  ./buildtools/bin/waf build
Waf: Entering directory `/home/abartlet/heimdal-import/samba/bin/default'
Selected embedded Heimdal build
[2822/4527] Compiling source4/heimdal/kdc/krb5tgs.c
In function ‘verify_flags’,
inlined from ‘verify_flags’ at ../../source4/heimdal/kdc/krb5tgs.c:625:1,
inlined from ‘tgs_build_reply.isra.0’ at ../../source4/heimdal/kdc/krb5tgs.c:1671:8:
../../source4/heimdal/kdc/krb5tgs.c:635:2: error: ‘%s’ directive argument is null [-Werror=format-overflow=]
635 |  kdc_log(context, config, 4, ""Ticket not valid (%s)"", pstr);
|  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In function ‘verify_flags’,
inlined from ‘tgs_build_reply.isra.0’ at ../../source4/heimdal/kdc/krb5tgs.c:1671:8:
../../source4/heimdal/kdc/krb5tgs.c:631:2: error: ‘%s’ directive argument is null [-Werror=format-overflow=]
631 |  kdc_log(context, config, 4, ""Ticket expired (%s)"", pstr);
|  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cc1: all warnings being treated as errors
Essentially, with an optimising compiler, the funciton is inlined
and the compiler notices that the kdc_log() argument is always NULL.
Selected from patches by Stefan Metzmacher metze@samba.org
in his master-heimdal branch at:
https://git.samba.org/?p=metze/samba/wip.git;a=commitdiff;h=2ac326b9cb8f896f874edfa6725f087034270322#patch2
https://git.samba.org/?p=metze/samba/wip.git;a=shortlog;h=refs/heads/master-heimdal
Signed-off-by: Andrew Bartlett abartlet@samba.org","I think this is good, probably don't need the extraneous bracing change.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,780,2021-06-22T20:48:43Z,2021-06-23T01:56:04Z,2021-06-23T10:22:15Z,MERGED,True,4,1,1,https://github.com/abartlet,Provide the correct principal name to verify_flags() for user2user tickets,1,[],https://github.com/heimdal/heimdal/pull/780,https://github.com/abartlet,5,https://github.com/heimdal/heimdal/pull/780#issuecomment-866423353,"This is a patch to help Samba merge in a current upstrem Heimdal and is selected out of a larger patch by @metze-samba
It looks like this codepath is tested by server_uu / check-uu but I've not manually checked it.
When b->kdc_options.enc_tkt_in_skey is set, the variable 'spn'
provided to verify_flags() for the purpose of logging is not
yet set, it is still NULL from the initialiser.
On Samba we see, when compiling with -O3 and strict warning rules with
gcc version 9.3.0 (Ubuntu 9.3.0-17ubuntu1~20.04):
$ make -k
PYTHONHASHSEED=1 WAF_MAKE=1  ./buildtools/bin/waf build
Waf: Entering directory `/home/abartlet/heimdal-import/samba/bin/default'
Selected embedded Heimdal build
[2822/4527] Compiling source4/heimdal/kdc/krb5tgs.c
In function ‘verify_flags’,
inlined from ‘verify_flags’ at ../../source4/heimdal/kdc/krb5tgs.c:625:1,
inlined from ‘tgs_build_reply.isra.0’ at ../../source4/heimdal/kdc/krb5tgs.c:1671:8:
../../source4/heimdal/kdc/krb5tgs.c:635:2: error: ‘%s’ directive argument is null [-Werror=format-overflow=]
635 |  kdc_log(context, config, 4, ""Ticket not valid (%s)"", pstr);
|  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In function ‘verify_flags’,
inlined from ‘tgs_build_reply.isra.0’ at ../../source4/heimdal/kdc/krb5tgs.c:1671:8:
../../source4/heimdal/kdc/krb5tgs.c:631:2: error: ‘%s’ directive argument is null [-Werror=format-overflow=]
631 |  kdc_log(context, config, 4, ""Ticket expired (%s)"", pstr);
|  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cc1: all warnings being treated as errors
Essentially, with an optimising compiler, the funciton is inlined
and the compiler notices that the kdc_log() argument is always NULL.
Selected from patches by Stefan Metzmacher metze@samba.org
in his master-heimdal branch at:
https://git.samba.org/?p=metze/samba/wip.git;a=commitdiff;h=2ac326b9cb8f896f874edfa6725f087034270322#patch2
https://git.samba.org/?p=metze/samba/wip.git;a=shortlog;h=refs/heads/master-heimdal
Signed-off-by: Andrew Bartlett abartlet@samba.org","Sorry, should have checked the diff.  Hopefully better now.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,782,2021-06-24T22:38:06Z,2021-06-24T23:44:54Z,2021-06-25T05:03:29Z,MERGED,True,2,1,1,https://github.com/abartlet,Move out: label to inside #endif of HAVE_DLOPEN,1,[],https://github.com/heimdal/heimdal/pull/782,https://github.com/abartlet,1,https://github.com/heimdal/heimdal/pull/782,"Samba compiles Heimdal internally without HAVE_DLOPEN to keep
to internally supplied mechanisms and plugins.
Samba compiles with strict warning flags and on Ubuntu 20.04
with gcc version 9.3.0 (Ubuntu 9.3.0-17ubuntu1~20.04) we see:
../../source4/heimdal/lib/gssapi/mech/gss_mech_switch.c: In function ‘_gss_load_mech’:
../../source4/heimdal/lib/gssapi/mech/gss_mech_switch.c:462:1: error: label ‘out’ defined but not used [-Werror=unused-label]
462 | out:
| ^~~
cc1: all warnings being treated as errors
Signed-off-by: Andrew Bartlett abartlet@samba.org","Samba compiles Heimdal internally without HAVE_DLOPEN to keep
to internally supplied mechanisms and plugins.
Samba compiles with strict warning flags and on Ubuntu 20.04
with gcc version 9.3.0 (Ubuntu 9.3.0-17ubuntu1~20.04) we see:
../../source4/heimdal/lib/gssapi/mech/gss_mech_switch.c: In function ‘_gss_load_mech’:
../../source4/heimdal/lib/gssapi/mech/gss_mech_switch.c:462:1: error: label ‘out’ defined but not used [-Werror=unused-label]
462 | out:
| ^~~
cc1: all warnings being treated as errors
Signed-off-by: Andrew Bartlett abartlet@samba.org",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,782,2021-06-24T22:38:06Z,2021-06-24T23:44:54Z,2021-06-25T05:03:29Z,MERGED,True,2,1,1,https://github.com/abartlet,Move out: label to inside #endif of HAVE_DLOPEN,1,[],https://github.com/heimdal/heimdal/pull/782,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/782#issuecomment-868052558,"Samba compiles Heimdal internally without HAVE_DLOPEN to keep
to internally supplied mechanisms and plugins.
Samba compiles with strict warning flags and on Ubuntu 20.04
with gcc version 9.3.0 (Ubuntu 9.3.0-17ubuntu1~20.04) we see:
../../source4/heimdal/lib/gssapi/mech/gss_mech_switch.c: In function ‘_gss_load_mech’:
../../source4/heimdal/lib/gssapi/mech/gss_mech_switch.c:462:1: error: label ‘out’ defined but not used [-Werror=unused-label]
462 | out:
| ^~~
cc1: all warnings being treated as errors
Signed-off-by: Andrew Bartlett abartlet@samba.org",LGTM,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,783,2021-06-30T02:08:43Z,2021-06-30T02:46:18Z,2021-06-30T03:52:32Z,MERGED,True,1,1,1,https://github.com/abartlet,Fix user2user principal (again),1,[],https://github.com/heimdal/heimdal/pull/783,https://github.com/abartlet,1,https://github.com/heimdal/heimdal/pull/783,"73debbc accidentially reverted
the critical part of 040a093,
presumably during conflict resolution.
Found by a strict Samba compile during import of current Heimdal.
See #780
Signed-off-by: Andrew Bartlett abartlet@samba.org","73debbc accidentially reverted
the critical part of 040a093,
presumably during conflict resolution.
Found by a strict Samba compile during import of current Heimdal.
See #780
Signed-off-by: Andrew Bartlett abartlet@samba.org",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,783,2021-06-30T02:08:43Z,2021-06-30T02:46:18Z,2021-06-30T03:52:32Z,MERGED,True,1,1,1,https://github.com/abartlet,Fix user2user principal (again),1,[],https://github.com/heimdal/heimdal/pull/783,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/783#issuecomment-871054836,"73debbc accidentially reverted
the critical part of 040a093,
presumably during conflict resolution.
Found by a strict Samba compile during import of current Heimdal.
See #780
Signed-off-by: Andrew Bartlett abartlet@samba.org",Thanks :),True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,784,2021-06-30T02:42:26Z,2021-06-30T02:47:42Z,2021-06-30T03:52:01Z,MERGED,True,1,1,1,https://github.com/abartlet,Add const to _kdc_set_e_text(),1,[],https://github.com/heimdal/heimdal/pull/784,https://github.com/abartlet,1,https://github.com/heimdal/heimdal/pull/784,"On Ubuntu 20.04 with gcc version 9.3.0 in a Samba compile
using -Wdiscarded-qualifiers and -Werror we get:
../../source4/heimdal/kdc/kerberos5.c:2516:21: warning: passing argument 2 of ‘_kdc_set_e_text’ discards ‘const’ qualifier from pointer target type [-Wdiscarded-qualifiers]
2516 |  _kdc_set_e_text(r, ""Client have no reply key"");
|                     ^~~~~~~~~~~~~~~~~~~~~~~~~~
../../source4/heimdal/kdc/kerberos5.c:428:42: note: expected ‘char *’ but argument is of type ‘const char *’
428 | _kdc_set_e_text(astgs_request_t r, char *fmt, ...)
|                                    ~~~~~~^~~
Signed-off-by: Andrew Bartlett abartlet@samba.org","On Ubuntu 20.04 with gcc version 9.3.0 in a Samba compile
using -Wdiscarded-qualifiers and -Werror we get:
../../source4/heimdal/kdc/kerberos5.c:2516:21: warning: passing argument 2 of ‘_kdc_set_e_text’ discards ‘const’ qualifier from pointer target type [-Wdiscarded-qualifiers]
2516 |  _kdc_set_e_text(r, ""Client have no reply key"");
|                     ^~~~~~~~~~~~~~~~~~~~~~~~~~
../../source4/heimdal/kdc/kerberos5.c:428:42: note: expected ‘char *’ but argument is of type ‘const char *’
428 | _kdc_set_e_text(astgs_request_t r, char *fmt, ...)
|                                    ~~~~~~^~~
Signed-off-by: Andrew Bartlett abartlet@samba.org",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,784,2021-06-30T02:42:26Z,2021-06-30T02:47:42Z,2021-06-30T03:52:01Z,MERGED,True,1,1,1,https://github.com/abartlet,Add const to _kdc_set_e_text(),1,[],https://github.com/heimdal/heimdal/pull/784,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/784#issuecomment-871055253,"On Ubuntu 20.04 with gcc version 9.3.0 in a Samba compile
using -Wdiscarded-qualifiers and -Werror we get:
../../source4/heimdal/kdc/kerberos5.c:2516:21: warning: passing argument 2 of ‘_kdc_set_e_text’ discards ‘const’ qualifier from pointer target type [-Wdiscarded-qualifiers]
2516 |  _kdc_set_e_text(r, ""Client have no reply key"");
|                     ^~~~~~~~~~~~~~~~~~~~~~~~~~
../../source4/heimdal/kdc/kerberos5.c:428:42: note: expected ‘char *’ but argument is of type ‘const char *’
428 | _kdc_set_e_text(astgs_request_t r, char *fmt, ...)
|                                    ~~~~~~^~~
Signed-off-by: Andrew Bartlett abartlet@samba.org",LGTM,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,785,2021-06-30T04:24:03Z,2021-07-06T00:06:54Z,2021-07-06T00:06:54Z,MERGED,True,1,1,1,https://github.com/abartlet,Initialise err in hdb_create(),1,[],https://github.com/heimdal/heimdal/pull/785,https://github.com/abartlet,1,https://github.com/heimdal/heimdal/pull/785,"On Ubuntu 20.04 with gcc version 9.3.0 during a strict
Samba build with -Werror=maybe-uninitialized we get:
../../source4/heimdal/lib/hdb/hdb.c: In function ‘hdb_create’:
../../source4/heimdal/lib/hdb/hdb.c:831:13: error: ‘ret’ may be used uninitialized in this function [-Werror=maybe-uninitialized]
831 |     if (*db && ret == 0)
|         ~~~~^~~~~~~~~~~
cc1: all warnings being treated as errors
Signed-off-by: Andrew Bartlett abartlet@samba.org","On Ubuntu 20.04 with gcc version 9.3.0 during a strict
Samba build with -Werror=maybe-uninitialized we get:
../../source4/heimdal/lib/hdb/hdb.c: In function ‘hdb_create’:
../../source4/heimdal/lib/hdb/hdb.c:831:13: error: ‘ret’ may be used uninitialized in this function [-Werror=maybe-uninitialized]
831 |     if (*db && ret == 0)
|         ~~~~^~~~~~~~~~~
cc1: all warnings being treated as errors
Signed-off-by: Andrew Bartlett abartlet@samba.org",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,785,2021-06-30T04:24:03Z,2021-07-06T00:06:54Z,2021-07-06T00:06:54Z,MERGED,True,1,1,1,https://github.com/abartlet,Initialise err in hdb_create(),1,[],https://github.com/heimdal/heimdal/pull/785,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/785#issuecomment-871092405,"On Ubuntu 20.04 with gcc version 9.3.0 during a strict
Samba build with -Werror=maybe-uninitialized we get:
../../source4/heimdal/lib/hdb/hdb.c: In function ‘hdb_create’:
../../source4/heimdal/lib/hdb/hdb.c:831:13: error: ‘ret’ may be used uninitialized in this function [-Werror=maybe-uninitialized]
831 |     if (*db && ret == 0)
|         ~~~~^~~~~~~~~~~
cc1: all warnings being treated as errors
Signed-off-by: Andrew Bartlett abartlet@samba.org","Generally Heimdal prefers not to initialise at the start of the function, as it can mask the error not being set elsewhere but, this function is such a mess that your patch is the least worst option. Applying.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,785,2021-06-30T04:24:03Z,2021-07-06T00:06:54Z,2021-07-06T00:06:54Z,MERGED,True,1,1,1,https://github.com/abartlet,Initialise err in hdb_create(),1,[],https://github.com/heimdal/heimdal/pull/785,https://github.com/abartlet,3,https://github.com/heimdal/heimdal/pull/785#issuecomment-871094225,"On Ubuntu 20.04 with gcc version 9.3.0 during a strict
Samba build with -Werror=maybe-uninitialized we get:
../../source4/heimdal/lib/hdb/hdb.c: In function ‘hdb_create’:
../../source4/heimdal/lib/hdb/hdb.c:831:13: error: ‘ret’ may be used uninitialized in this function [-Werror=maybe-uninitialized]
831 |     if (*db && ret == 0)
|         ~~~~^~~~~~~~~~~
cc1: all warnings being treated as errors
Signed-off-by: Andrew Bartlett abartlet@samba.org","Thanks.  I also couldn't work out what a better fix would be, and couldn't follow the flow of what we would watch for with *db either.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,785,2021-06-30T04:24:03Z,2021-07-06T00:06:54Z,2021-07-06T00:06:54Z,MERGED,True,1,1,1,https://github.com/abartlet,Initialise err in hdb_create(),1,[],https://github.com/heimdal/heimdal/pull/785,https://github.com/lhoward,4,https://github.com/heimdal/heimdal/pull/785#issuecomment-871098570,"On Ubuntu 20.04 with gcc version 9.3.0 during a strict
Samba build with -Werror=maybe-uninitialized we get:
../../source4/heimdal/lib/hdb/hdb.c: In function ‘hdb_create’:
../../source4/heimdal/lib/hdb/hdb.c:831:13: error: ‘ret’ may be used uninitialized in this function [-Werror=maybe-uninitialized]
831 |     if (*db && ret == 0)
|         ~~~~^~~~~~~~~~~
cc1: all warnings being treated as errors
Signed-off-by: Andrew Bartlett abartlet@samba.org","That function is a bit WORN (write once, read never) but I guess it evolved over time. I'd rather not be responsible for changing it and potentially introducing a regression.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,785,2021-06-30T04:24:03Z,2021-07-06T00:06:54Z,2021-07-06T00:06:54Z,MERGED,True,1,1,1,https://github.com/abartlet,Initialise err in hdb_create(),1,[],https://github.com/heimdal/heimdal/pull/785,https://github.com/abartlet,5,https://github.com/heimdal/heimdal/pull/785#issuecomment-874322078,"On Ubuntu 20.04 with gcc version 9.3.0 during a strict
Samba build with -Werror=maybe-uninitialized we get:
../../source4/heimdal/lib/hdb/hdb.c: In function ‘hdb_create’:
../../source4/heimdal/lib/hdb/hdb.c:831:13: error: ‘ret’ may be used uninitialized in this function [-Werror=maybe-uninitialized]
831 |     if (*db && ret == 0)
|         ~~~~^~~~~~~~~~~
cc1: all warnings being treated as errors
Signed-off-by: Andrew Bartlett abartlet@samba.org","I can't see this merged manually, was this really merged?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,786,2021-06-30T04:40:51Z,2021-08-09T13:28:07Z,2021-08-12T05:37:11Z,CLOSED,False,52,9,1,https://github.com/abartlet,Reintroduce krb5_addlog_func() as as supported API,2,[],https://github.com/heimdal/heimdal/pull/786,https://github.com/abartlet,1,https://github.com/heimdal/heimdal/pull/786,"krb5_addlog_func() is used by Samba to obtain Kerberos log messages
and place them into the Samba logs.
Providing a hook down to the heim_addlog_func() is less disruptive
than needing to call multiple different APIs as Samba compiles
both with an included copy of Heimdal and against a system
Heimdal (when not an AD DC).
This API was deprecated and stubbed out in March 2020 by
ea90ca8 and was previously
stable until 0c86917
(which looks like it should have been part of
e44c680).
Despite the need for the extra argument, which we add a test for,
Samba would prefer to keep the krb5_addlog_func() facility,
so this adds it back.
Selected from patches by Stefan Metzmacher metze@samba.org
in his master-heimdal branch at:
https://git.samba.org/?p=metze/samba/wip.git;a=commitdiff;h=40d98064f44c54b42420ed81f7f39e5469aefaa8#patch4
https://git.samba.org/?p=metze/samba/wip.git;a=shortlog;h=refs/heads/master-heimdal
Signed-off-by: Andrew Bartlett abartlet@samba.org","krb5_addlog_func() is used by Samba to obtain Kerberos log messages
and place them into the Samba logs.
Providing a hook down to the heim_addlog_func() is less disruptive
than needing to call multiple different APIs as Samba compiles
both with an included copy of Heimdal and against a system
Heimdal (when not an AD DC).
This API was deprecated and stubbed out in March 2020 by
ea90ca8 and was previously
stable until 0c86917
(which looks like it should have been part of
e44c680).
Despite the need for the extra argument, which we add a test for,
Samba would prefer to keep the krb5_addlog_func() facility,
so this adds it back.
Selected from patches by Stefan Metzmacher metze@samba.org
in his master-heimdal branch at:
https://git.samba.org/?p=metze/samba/wip.git;a=commitdiff;h=40d98064f44c54b42420ed81f7f39e5469aefaa8#patch4
https://git.samba.org/?p=metze/samba/wip.git;a=shortlog;h=refs/heads/master-heimdal
Signed-off-by: Andrew Bartlett abartlet@samba.org",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,786,2021-06-30T04:40:51Z,2021-08-09T13:28:07Z,2021-08-12T05:37:11Z,CLOSED,False,52,9,1,https://github.com/abartlet,Reintroduce krb5_addlog_func() as as supported API,2,[],https://github.com/heimdal/heimdal/pull/786,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/786#issuecomment-871092673,"krb5_addlog_func() is used by Samba to obtain Kerberos log messages
and place them into the Samba logs.
Providing a hook down to the heim_addlog_func() is less disruptive
than needing to call multiple different APIs as Samba compiles
both with an included copy of Heimdal and against a system
Heimdal (when not an AD DC).
This API was deprecated and stubbed out in March 2020 by
ea90ca8 and was previously
stable until 0c86917
(which looks like it should have been part of
e44c680).
Despite the need for the extra argument, which we add a test for,
Samba would prefer to keep the krb5_addlog_func() facility,
so this adds it back.
Selected from patches by Stefan Metzmacher metze@samba.org
in his master-heimdal branch at:
https://git.samba.org/?p=metze/samba/wip.git;a=commitdiff;h=40d98064f44c54b42420ed81f7f39e5469aefaa8#patch4
https://git.samba.org/?p=metze/samba/wip.git;a=shortlog;h=refs/heads/master-heimdal
Signed-off-by: Andrew Bartlett abartlet@samba.org",@nicowilliams will need to look at this,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,786,2021-06-30T04:40:51Z,2021-08-09T13:28:07Z,2021-08-12T05:37:11Z,CLOSED,False,52,9,1,https://github.com/abartlet,Reintroduce krb5_addlog_func() as as supported API,2,[],https://github.com/heimdal/heimdal/pull/786,https://github.com/abartlet,3,https://github.com/heimdal/heimdal/pull/786#issuecomment-894858949,"krb5_addlog_func() is used by Samba to obtain Kerberos log messages
and place them into the Samba logs.
Providing a hook down to the heim_addlog_func() is less disruptive
than needing to call multiple different APIs as Samba compiles
both with an included copy of Heimdal and against a system
Heimdal (when not an AD DC).
This API was deprecated and stubbed out in March 2020 by
ea90ca8 and was previously
stable until 0c86917
(which looks like it should have been part of
e44c680).
Despite the need for the extra argument, which we add a test for,
Samba would prefer to keep the krb5_addlog_func() facility,
so this adds it back.
Selected from patches by Stefan Metzmacher metze@samba.org
in his master-heimdal branch at:
https://git.samba.org/?p=metze/samba/wip.git;a=commitdiff;h=40d98064f44c54b42420ed81f7f39e5469aefaa8#patch4
https://git.samba.org/?p=metze/samba/wip.git;a=shortlog;h=refs/heads/master-heimdal
Signed-off-by: Andrew Bartlett abartlet@samba.org","The AppVeyor build failed, it the Windows build racy?  The changes built on LInux, but a CI pass would be nice.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,786,2021-06-30T04:40:51Z,2021-08-09T13:28:07Z,2021-08-12T05:37:11Z,CLOSED,False,52,9,1,https://github.com/abartlet,Reintroduce krb5_addlog_func() as as supported API,2,[],https://github.com/heimdal/heimdal/pull/786,https://github.com/lhoward,4,https://github.com/heimdal/heimdal/pull/786#issuecomment-894867357,"krb5_addlog_func() is used by Samba to obtain Kerberos log messages
and place them into the Samba logs.
Providing a hook down to the heim_addlog_func() is less disruptive
than needing to call multiple different APIs as Samba compiles
both with an included copy of Heimdal and against a system
Heimdal (when not an AD DC).
This API was deprecated and stubbed out in March 2020 by
ea90ca8 and was previously
stable until 0c86917
(which looks like it should have been part of
e44c680).
Despite the need for the extra argument, which we add a test for,
Samba would prefer to keep the krb5_addlog_func() facility,
so this adds it back.
Selected from patches by Stefan Metzmacher metze@samba.org
in his master-heimdal branch at:
https://git.samba.org/?p=metze/samba/wip.git;a=commitdiff;h=40d98064f44c54b42420ed81f7f39e5469aefaa8#patch4
https://git.samba.org/?p=metze/samba/wip.git;a=shortlog;h=refs/heads/master-heimdal
Signed-off-by: Andrew Bartlett abartlet@samba.org",It’s racy and not working reliably for anyone unfortunately.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,786,2021-06-30T04:40:51Z,2021-08-09T13:28:07Z,2021-08-12T05:37:11Z,CLOSED,False,52,9,1,https://github.com/abartlet,Reintroduce krb5_addlog_func() as as supported API,2,[],https://github.com/heimdal/heimdal/pull/786,https://github.com/abartlet,5,https://github.com/heimdal/heimdal/pull/786#issuecomment-894902916,"krb5_addlog_func() is used by Samba to obtain Kerberos log messages
and place them into the Samba logs.
Providing a hook down to the heim_addlog_func() is less disruptive
than needing to call multiple different APIs as Samba compiles
both with an included copy of Heimdal and against a system
Heimdal (when not an AD DC).
This API was deprecated and stubbed out in March 2020 by
ea90ca8 and was previously
stable until 0c86917
(which looks like it should have been part of
e44c680).
Despite the need for the extra argument, which we add a test for,
Samba would prefer to keep the krb5_addlog_func() facility,
so this adds it back.
Selected from patches by Stefan Metzmacher metze@samba.org
in his master-heimdal branch at:
https://git.samba.org/?p=metze/samba/wip.git;a=commitdiff;h=40d98064f44c54b42420ed81f7f39e5469aefaa8#patch4
https://git.samba.org/?p=metze/samba/wip.git;a=shortlog;h=refs/heads/master-heimdal
Signed-off-by: Andrew Bartlett abartlet@samba.org",Do I need to re-push or re-trigger it somehow?,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,786,2021-06-30T04:40:51Z,2021-08-09T13:28:07Z,2021-08-12T05:37:11Z,CLOSED,False,52,9,1,https://github.com/abartlet,Reintroduce krb5_addlog_func() as as supported API,2,[],https://github.com/heimdal/heimdal/pull/786,https://github.com/lhoward,6,https://github.com/heimdal/heimdal/pull/786#issuecomment-894903149,"krb5_addlog_func() is used by Samba to obtain Kerberos log messages
and place them into the Samba logs.
Providing a hook down to the heim_addlog_func() is less disruptive
than needing to call multiple different APIs as Samba compiles
both with an included copy of Heimdal and against a system
Heimdal (when not an AD DC).
This API was deprecated and stubbed out in March 2020 by
ea90ca8 and was previously
stable until 0c86917
(which looks like it should have been part of
e44c680).
Despite the need for the extra argument, which we add a test for,
Samba would prefer to keep the krb5_addlog_func() facility,
so this adds it back.
Selected from patches by Stefan Metzmacher metze@samba.org
in his master-heimdal branch at:
https://git.samba.org/?p=metze/samba/wip.git;a=commitdiff;h=40d98064f44c54b42420ed81f7f39e5469aefaa8#patch4
https://git.samba.org/?p=metze/samba/wip.git;a=shortlog;h=refs/heads/master-heimdal
Signed-off-by: Andrew Bartlett abartlet@samba.org",We need to fix the underlying race condition which is no doubt a dependency error in NTMakefile (in lib/gssapi). Not sure how to re-push or re-trigger. cc @jaltman,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,786,2021-06-30T04:40:51Z,2021-08-09T13:28:07Z,2021-08-12T05:37:11Z,CLOSED,False,52,9,1,https://github.com/abartlet,Reintroduce krb5_addlog_func() as as supported API,2,[],https://github.com/heimdal/heimdal/pull/786,https://github.com/lhoward,7,https://github.com/heimdal/heimdal/pull/786#issuecomment-895222769,"krb5_addlog_func() is used by Samba to obtain Kerberos log messages
and place them into the Samba logs.
Providing a hook down to the heim_addlog_func() is less disruptive
than needing to call multiple different APIs as Samba compiles
both with an included copy of Heimdal and against a system
Heimdal (when not an AD DC).
This API was deprecated and stubbed out in March 2020 by
ea90ca8 and was previously
stable until 0c86917
(which looks like it should have been part of
e44c680).
Despite the need for the extra argument, which we add a test for,
Samba would prefer to keep the krb5_addlog_func() facility,
so this adds it back.
Selected from patches by Stefan Metzmacher metze@samba.org
in his master-heimdal branch at:
https://git.samba.org/?p=metze/samba/wip.git;a=commitdiff;h=40d98064f44c54b42420ed81f7f39e5469aefaa8#patch4
https://git.samba.org/?p=metze/samba/wip.git;a=shortlog;h=refs/heads/master-heimdal
Signed-off-by: Andrew Bartlett abartlet@samba.org",Fixed in c953bc5,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,786,2021-06-30T04:40:51Z,2021-08-09T13:28:07Z,2021-08-12T05:37:11Z,CLOSED,False,52,9,1,https://github.com/abartlet,Reintroduce krb5_addlog_func() as as supported API,2,[],https://github.com/heimdal/heimdal/pull/786,https://github.com/kaduk,8,https://github.com/heimdal/heimdal/pull/786#issuecomment-897362718,"krb5_addlog_func() is used by Samba to obtain Kerberos log messages
and place them into the Samba logs.
Providing a hook down to the heim_addlog_func() is less disruptive
than needing to call multiple different APIs as Samba compiles
both with an included copy of Heimdal and against a system
Heimdal (when not an AD DC).
This API was deprecated and stubbed out in March 2020 by
ea90ca8 and was previously
stable until 0c86917
(which looks like it should have been part of
e44c680).
Despite the need for the extra argument, which we add a test for,
Samba would prefer to keep the krb5_addlog_func() facility,
so this adds it back.
Selected from patches by Stefan Metzmacher metze@samba.org
in his master-heimdal branch at:
https://git.samba.org/?p=metze/samba/wip.git;a=commitdiff;h=40d98064f44c54b42420ed81f7f39e5469aefaa8#patch4
https://git.samba.org/?p=metze/samba/wip.git;a=shortlog;h=refs/heads/master-heimdal
Signed-off-by: Andrew Bartlett abartlet@samba.org","Not sure how to re-push or re-trigger.

I believe close+reopen will re-trigger the CI run.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,787,2021-06-30T05:26:42Z,2021-08-09T13:20:08Z,2021-08-09T13:20:08Z,MERGED,True,17,0,2,https://github.com/abartlet,Allow KDC to always return the salt in the PA-ETYPE-INFO[2],1,[],https://github.com/heimdal/heimdal/pull/787,https://github.com/abartlet,1,https://github.com/heimdal/heimdal/pull/787,"This is to match the Windows KDC behaviour, optionally.
Samba will use this mode, as Samba has tests that show
the difference and is keen for bug-for-bug/byte-for-byte
rather than strict RFC compliance where there is a
reasonable choice.
The behaviour was changed in:
commit de1f37a
Author: Luke Howard lukeh@padl.com
Date:   Mon Jan 7 15:45:36 2019 +1100
kdc: omit default salt from PA-ETYPE-INFO[2]

If the salt for the AS-REP client key matches the default password salt for the
client principal in the AS-REQ, then it can be omitted from the PA-ETYPE-INFO,
PA-ETYPE-INFO2 (RFC4120) as the client will assume the default salt in its
absence.

Signed-off-by: Andrew Bartlett abartlet@samba.org","This is to match the Windows KDC behaviour, optionally.
Samba will use this mode, as Samba has tests that show
the difference and is keen for bug-for-bug/byte-for-byte
rather than strict RFC compliance where there is a
reasonable choice.
The behaviour was changed in:
commit de1f37a
Author: Luke Howard lukeh@padl.com
Date:   Mon Jan 7 15:45:36 2019 +1100
kdc: omit default salt from PA-ETYPE-INFO[2]

If the salt for the AS-REP client key matches the default password salt for the
client principal in the AS-REQ, then it can be omitted from the PA-ETYPE-INFO,
PA-ETYPE-INFO2 (RFC4120) as the client will assume the default salt in its
absence.

Signed-off-by: Andrew Bartlett abartlet@samba.org",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,787,2021-06-30T05:26:42Z,2021-08-09T13:20:08Z,2021-08-09T13:20:08Z,MERGED,True,17,0,2,https://github.com/abartlet,Allow KDC to always return the salt in the PA-ETYPE-INFO[2],1,[],https://github.com/heimdal/heimdal/pull/787,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/787#issuecomment-871109502,"This is to match the Windows KDC behaviour, optionally.
Samba will use this mode, as Samba has tests that show
the difference and is keen for bug-for-bug/byte-for-byte
rather than strict RFC compliance where there is a
reasonable choice.
The behaviour was changed in:
commit de1f37a
Author: Luke Howard lukeh@padl.com
Date:   Mon Jan 7 15:45:36 2019 +1100
kdc: omit default salt from PA-ETYPE-INFO[2]

If the salt for the AS-REP client key matches the default password salt for the
client principal in the AS-REQ, then it can be omitted from the PA-ETYPE-INFO,
PA-ETYPE-INFO2 (RFC4120) as the client will assume the default salt in its
absence.

Signed-off-by: Andrew Bartlett abartlet@samba.org","I understand the desire for bug-for-bug compatibility (I went there once, too!) but, now that Windows protocols are documented it should be possible to find out whether Windows actually depends on this behaviour. If it does not, then I would prefer to omit this patch and I imagine @jaltman / @nicowilliams might feel similarly.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,787,2021-06-30T05:26:42Z,2021-08-09T13:20:08Z,2021-08-09T13:20:08Z,MERGED,True,17,0,2,https://github.com/abartlet,Allow KDC to always return the salt in the PA-ETYPE-INFO[2],1,[],https://github.com/heimdal/heimdal/pull/787,https://github.com/abartlet,3,https://github.com/heimdal/heimdal/pull/787#issuecomment-871116707,"This is to match the Windows KDC behaviour, optionally.
Samba will use this mode, as Samba has tests that show
the difference and is keen for bug-for-bug/byte-for-byte
rather than strict RFC compliance where there is a
reasonable choice.
The behaviour was changed in:
commit de1f37a
Author: Luke Howard lukeh@padl.com
Date:   Mon Jan 7 15:45:36 2019 +1100
kdc: omit default salt from PA-ETYPE-INFO[2]

If the salt for the AS-REP client key matches the default password salt for the
client principal in the AS-REQ, then it can be omitted from the PA-ETYPE-INFO,
PA-ETYPE-INFO2 (RFC4120) as the client will assume the default salt in its
absence.

Signed-off-by: Andrew Bartlett abartlet@samba.org","That's fine, we are very unlikely to ever use an exact Heimdal release so I'll just add this to the list of patches we carry in lorikeet-heimdal (currently https://gitlab.com/samba-team/devel/lorikeet-heimdal/-/commits/lorikeet-heimdal-202106300341) and mark it as not-for-upstream so we don't bother you.
However, I'll note that it isn't just windows clients that we are concerned with, there is a wide world of Kerberos clients out there and if our testsuite can tell the difference, and we can mitigate it, we (Samba) need to.
Also, while the MS docs are good, they don't say very much about the internal Kerberos processing on Windows, and while details can be clarified, there are limits and we would prefer not to need to ask if we can just be byte-for-byte.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,787,2021-06-30T05:26:42Z,2021-08-09T13:20:08Z,2021-08-09T13:20:08Z,MERGED,True,17,0,2,https://github.com/abartlet,Allow KDC to always return the salt in the PA-ETYPE-INFO[2],1,[],https://github.com/heimdal/heimdal/pull/787,https://github.com/abartlet,4,https://github.com/heimdal/heimdal/pull/787#issuecomment-871118996,"This is to match the Windows KDC behaviour, optionally.
Samba will use this mode, as Samba has tests that show
the difference and is keen for bug-for-bug/byte-for-byte
rather than strict RFC compliance where there is a
reasonable choice.
The behaviour was changed in:
commit de1f37a
Author: Luke Howard lukeh@padl.com
Date:   Mon Jan 7 15:45:36 2019 +1100
kdc: omit default salt from PA-ETYPE-INFO[2]

If the salt for the AS-REP client key matches the default password salt for the
client principal in the AS-REQ, then it can be omitted from the PA-ETYPE-INFO,
PA-ETYPE-INFO2 (RFC4120) as the client will assume the default salt in its
absence.

Signed-off-by: Andrew Bartlett abartlet@samba.org","While probably not triggered by this, we have had strange behaviour like 'bad password count updated twice as fast as expected' from Windows in the past when it didn't like some of our AS-REP error replies, and came back for an extra go.  Due to the time that kind of thing takes to debug, we would prefer to be byte-for-byte.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,787,2021-06-30T05:26:42Z,2021-08-09T13:20:08Z,2021-08-09T13:20:08Z,MERGED,True,17,0,2,https://github.com/abartlet,Allow KDC to always return the salt in the PA-ETYPE-INFO[2],1,[],https://github.com/heimdal/heimdal/pull/787,https://github.com/lhoward,5,https://github.com/heimdal/heimdal/pull/787#issuecomment-871119609,"This is to match the Windows KDC behaviour, optionally.
Samba will use this mode, as Samba has tests that show
the difference and is keen for bug-for-bug/byte-for-byte
rather than strict RFC compliance where there is a
reasonable choice.
The behaviour was changed in:
commit de1f37a
Author: Luke Howard lukeh@padl.com
Date:   Mon Jan 7 15:45:36 2019 +1100
kdc: omit default salt from PA-ETYPE-INFO[2]

If the salt for the AS-REP client key matches the default password salt for the
client principal in the AS-REQ, then it can be omitted from the PA-ETYPE-INFO,
PA-ETYPE-INFO2 (RFC4120) as the client will assume the default salt in its
absence.

Signed-off-by: Andrew Bartlett abartlet@samba.org","While probably not triggered by this, we have had strange behaviour like 'bad password count updated twice as fast as expected' from Windows in the past when it didn't like some of our AS-REP error replies, and came back for an extra go. Due to the time that kind of thing takes to debug, we would prefer to be byte-for-byte.

Do you send KERB-EXT-ERROR?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,787,2021-06-30T05:26:42Z,2021-08-09T13:20:08Z,2021-08-09T13:20:08Z,MERGED,True,17,0,2,https://github.com/abartlet,Allow KDC to always return the salt in the PA-ETYPE-INFO[2],1,[],https://github.com/heimdal/heimdal/pull/787,https://github.com/abartlet,6,https://github.com/heimdal/heimdal/pull/787#issuecomment-871123302,"This is to match the Windows KDC behaviour, optionally.
Samba will use this mode, as Samba has tests that show
the difference and is keen for bug-for-bug/byte-for-byte
rather than strict RFC compliance where there is a
reasonable choice.
The behaviour was changed in:
commit de1f37a
Author: Luke Howard lukeh@padl.com
Date:   Mon Jan 7 15:45:36 2019 +1100
kdc: omit default salt from PA-ETYPE-INFO[2]

If the salt for the AS-REP client key matches the default password salt for the
client principal in the AS-REQ, then it can be omitted from the PA-ETYPE-INFO,
PA-ETYPE-INFO2 (RFC4120) as the client will assume the default salt in its
absence.

Signed-off-by: Andrew Bartlett abartlet@samba.org","Production Samba is still on 2011 code, it was around the ETYPE2 and ENC_TIMESTAMP replies.
The details are on https://bugzilla.samba.org/show_bug.cgi?id=11539
Enough time was sunk there that I'm very keen to avoid a repeat.  That doesn't mean you need to take our patches however, but getting to run against pure upstream would be nice some day (perhaps in a mode where the NETBIOS realm stuff isn't working, but otherwise)",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,787,2021-06-30T05:26:42Z,2021-08-09T13:20:08Z,2021-08-09T13:20:08Z,MERGED,True,17,0,2,https://github.com/abartlet,Allow KDC to always return the salt in the PA-ETYPE-INFO[2],1,[],https://github.com/heimdal/heimdal/pull/787,https://github.com/lhoward,7,https://github.com/heimdal/heimdal/pull/787#issuecomment-893965026,"This is to match the Windows KDC behaviour, optionally.
Samba will use this mode, as Samba has tests that show
the difference and is keen for bug-for-bug/byte-for-byte
rather than strict RFC compliance where there is a
reasonable choice.
The behaviour was changed in:
commit de1f37a
Author: Luke Howard lukeh@padl.com
Date:   Mon Jan 7 15:45:36 2019 +1100
kdc: omit default salt from PA-ETYPE-INFO[2]

If the salt for the AS-REP client key matches the default password salt for the
client principal in the AS-REQ, then it can be omitted from the PA-ETYPE-INFO,
PA-ETYPE-INFO2 (RFC4120) as the client will assume the default salt in its
absence.

Signed-off-by: Andrew Bartlett abartlet@samba.org","BTW, I assume there's no explicit krb5.conf configuration option for this because you set the configuration directly?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,787,2021-06-30T05:26:42Z,2021-08-09T13:20:08Z,2021-08-09T13:20:08Z,MERGED,True,17,0,2,https://github.com/abartlet,Allow KDC to always return the salt in the PA-ETYPE-INFO[2],1,[],https://github.com/heimdal/heimdal/pull/787,https://github.com/lhoward,8,https://github.com/heimdal/heimdal/pull/787#issuecomment-893965708,"This is to match the Windows KDC behaviour, optionally.
Samba will use this mode, as Samba has tests that show
the difference and is keen for bug-for-bug/byte-for-byte
rather than strict RFC compliance where there is a
reasonable choice.
The behaviour was changed in:
commit de1f37a
Author: Luke Howard lukeh@padl.com
Date:   Mon Jan 7 15:45:36 2019 +1100
kdc: omit default salt from PA-ETYPE-INFO[2]

If the salt for the AS-REP client key matches the default password salt for the
client principal in the AS-REQ, then it can be omitted from the PA-ETYPE-INFO,
PA-ETYPE-INFO2 (RFC4120) as the client will assume the default salt in its
absence.

Signed-off-by: Andrew Bartlett abartlet@samba.org","Also, the PR name doesn't match the behaviour, i.e. you're only including default salt in PA-ETYPE-INFO2, please either move the check to get_pa_etype_info_both() or change the configuration variable name to indicate it only applies to the INFO2. Suggest the former would be cleaner.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,787,2021-06-30T05:26:42Z,2021-08-09T13:20:08Z,2021-08-09T13:20:08Z,MERGED,True,17,0,2,https://github.com/abartlet,Allow KDC to always return the salt in the PA-ETYPE-INFO[2],1,[],https://github.com/heimdal/heimdal/pull/787,https://github.com/lhoward,9,https://github.com/heimdal/heimdal/pull/787#issuecomment-893966056,"This is to match the Windows KDC behaviour, optionally.
Samba will use this mode, as Samba has tests that show
the difference and is keen for bug-for-bug/byte-for-byte
rather than strict RFC compliance where there is a
reasonable choice.
The behaviour was changed in:
commit de1f37a
Author: Luke Howard lukeh@padl.com
Date:   Mon Jan 7 15:45:36 2019 +1100
kdc: omit default salt from PA-ETYPE-INFO[2]

If the salt for the AS-REP client key matches the default password salt for the
client principal in the AS-REQ, then it can be omitted from the PA-ETYPE-INFO,
PA-ETYPE-INFO2 (RFC4120) as the client will assume the default salt in its
absence.

Signed-off-by: Andrew Bartlett abartlet@samba.org",And maybe change it to force_include_pa_etype_salt or something,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,787,2021-06-30T05:26:42Z,2021-08-09T13:20:08Z,2021-08-09T13:20:08Z,MERGED,True,17,0,2,https://github.com/abartlet,Allow KDC to always return the salt in the PA-ETYPE-INFO[2],1,[],https://github.com/heimdal/heimdal/pull/787,https://github.com/abartlet,10,https://github.com/heimdal/heimdal/pull/787#issuecomment-893968737,"This is to match the Windows KDC behaviour, optionally.
Samba will use this mode, as Samba has tests that show
the difference and is keen for bug-for-bug/byte-for-byte
rather than strict RFC compliance where there is a
reasonable choice.
The behaviour was changed in:
commit de1f37a
Author: Luke Howard lukeh@padl.com
Date:   Mon Jan 7 15:45:36 2019 +1100
kdc: omit default salt from PA-ETYPE-INFO[2]

If the salt for the AS-REP client key matches the default password salt for the
client principal in the AS-REQ, then it can be omitted from the PA-ETYPE-INFO,
PA-ETYPE-INFO2 (RFC4120) as the client will assume the default salt in its
absence.

Signed-off-by: Andrew Bartlett abartlet@samba.org","BTW, I assume there's no explicit krb5.conf configuration option for this because you set the configuration directly?

Yes, we set it at runtime by supplying the configuration directly into the KDC which is called as a library.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,788,2021-06-30T09:37:54Z,2021-08-06T02:48:12Z,2021-08-06T02:48:12Z,MERGED,True,15,1,1,https://github.com/abartlet,Align locked out account behaviour with Windows,1,[],https://github.com/heimdal/heimdal/pull/788,https://github.com/abartlet,1,https://github.com/heimdal/heimdal/pull/788,"Windows does not check the password on an account that has been locked.
Heimdal does not implement locked_out, however the Samba hdb
backend does, and needs this checked before passwords (for bad
password lockout), not after in kdc_check_access().
Signed-off-by: Gary Lockyer gary@catalyst.net.nz","Windows does not check the password on an account that has been locked.
Heimdal does not implement locked_out, however the Samba hdb
backend does, and needs this checked before passwords (for bad
password lockout), not after in kdc_check_access().
Signed-off-by: Gary Lockyer gary@catalyst.net.nz",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,788,2021-06-30T09:37:54Z,2021-08-06T02:48:12Z,2021-08-06T02:48:12Z,MERGED,True,15,1,1,https://github.com/abartlet,Align locked out account behaviour with Windows,1,[],https://github.com/heimdal/heimdal/pull/788,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/788#issuecomment-893956983,"Windows does not check the password on an account that has been locked.
Heimdal does not implement locked_out, however the Samba hdb
backend does, and needs this checked before passwords (for bad
password lockout), not after in kdc_check_access().
Signed-off-by: Gary Lockyer gary@catalyst.net.nz",See _kdc_check_access(). If you have a WinDC plugin then you need to implement this logic inside there.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,788,2021-06-30T09:37:54Z,2021-08-06T02:48:12Z,2021-08-06T02:48:12Z,MERGED,True,15,1,1,https://github.com/abartlet,Align locked out account behaviour with Windows,1,[],https://github.com/heimdal/heimdal/pull/788,https://github.com/lhoward,3,https://github.com/heimdal/heimdal/pull/788#issuecomment-893958697,"Windows does not check the password on an account that has been locked.
Heimdal does not implement locked_out, however the Samba hdb
backend does, and needs this checked before passwords (for bad
password lockout), not after in kdc_check_access().
Signed-off-by: Gary Lockyer gary@catalyst.net.nz","I've applied fdf5b402021c5fc141f51a16891f5a3f34bd62ff to correct the error codes, but I am going to close this otherwise, because we shouldn't be adding revocation checks to individual pre-authentication mechanisms (you've missed PKINIT, for example).
If there is no WinDC plugin, then the revocation error will be returned by kdc_check_flags(). If there is a WinDC plugin, then kdc_check_flags() will not be called by _kdc_check_access() and the plugin must implement this logic itself. If you think this is an error and kdc_check_flags() should be called unconditionally, please submit another PR.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,788,2021-06-30T09:37:54Z,2021-08-06T02:48:12Z,2021-08-06T02:48:12Z,MERGED,True,15,1,1,https://github.com/abartlet,Align locked out account behaviour with Windows,1,[],https://github.com/heimdal/heimdal/pull/788,https://github.com/abartlet,4,https://github.com/heimdal/heimdal/pull/788#issuecomment-893960586,"Windows does not check the password on an account that has been locked.
Heimdal does not implement locked_out, however the Samba hdb
backend does, and needs this checked before passwords (for bad
password lockout), not after in kdc_check_access().
Signed-off-by: Gary Lockyer gary@catalyst.net.nz","The problem was the _kdc_check_access() is too late, being after the password is checked.  PKINIT isn't checked as it isn't password based, we have chosen to read locked_out as being locked out for having tried to many passwords.  Is that clearer?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,788,2021-06-30T09:37:54Z,2021-08-06T02:48:12Z,2021-08-06T02:48:12Z,MERGED,True,15,1,1,https://github.com/abartlet,Align locked out account behaviour with Windows,1,[],https://github.com/heimdal/heimdal/pull/788,https://github.com/lhoward,5,https://github.com/heimdal/heimdal/pull/788#issuecomment-893961932,"Windows does not check the password on an account that has been locked.
Heimdal does not implement locked_out, however the Samba hdb
backend does, and needs this checked before passwords (for bad
password lockout), not after in kdc_check_access().
Signed-off-by: Gary Lockyer gary@catalyst.net.nz","OK, fair enough.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,789,2021-06-30T09:49:00Z,2021-08-06T02:43:17Z,2021-08-06T02:43:17Z,MERGED,True,4,2,2,https://github.com/abartlet,Supply useful HDB flags for FAST,2,[],https://github.com/heimdal/heimdal/pull/789,https://github.com/abartlet,1,https://github.com/heimdal/heimdal/pull/789,"Samba uses the HDB flags extensively to separate out the different principal types, so it is helpful to indicate the FAST key lookup with a flag, and to supply the correct server name to lookup when looking for the krbtgt.","Samba uses the HDB flags extensively to separate out the different principal types, so it is helpful to indicate the FAST key lookup with a flag, and to supply the correct server name to lookup when looking for the krbtgt.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,791,2021-07-06T02:20:35Z,2021-08-06T02:24:04Z,2021-08-06T02:25:00Z,MERGED,True,5,2,1,https://github.com/abartlet,Avoid -Werror=strict-overflow on in rk_dns_srv_order(),1,[],https://github.com/heimdal/heimdal/pull/791,https://github.com/abartlet,1,https://github.com/heimdal/heimdal/pull/791,"In a strict Samba build with -Werror=strict-overflow on Ubuntu 18.04
with gcc version 7.5.0 (Ubuntu 7.5.0-3ubuntu1~18.04)
we see
../../source4/heimdal/lib/roken/resolve.c: In function ‘rk_dns_srv_order’:
../../source4/heimdal/lib/roken/resolve.c:639:7: error: assuming signed overflow does not occur when simplifying conditional to constant [-Werror=strict-overflow]
if(num_srv == 0)
^
cc1: all warnings being treated as errors
This avoids the issue by additionally setting a distinct flag.
Signed-off-by: Andrew Bartlett abartlet@samba.org","In a strict Samba build with -Werror=strict-overflow on Ubuntu 18.04
with gcc version 7.5.0 (Ubuntu 7.5.0-3ubuntu1~18.04)
we see
../../source4/heimdal/lib/roken/resolve.c: In function ‘rk_dns_srv_order’:
../../source4/heimdal/lib/roken/resolve.c:639:7: error: assuming signed overflow does not occur when simplifying conditional to constant [-Werror=strict-overflow]
if(num_srv == 0)
^
cc1: all warnings being treated as errors
This avoids the issue by additionally setting a distinct flag.
Signed-off-by: Andrew Bartlett abartlet@samba.org",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,791,2021-07-06T02:20:35Z,2021-08-06T02:24:04Z,2021-08-06T02:25:00Z,MERGED,True,5,2,1,https://github.com/abartlet,Avoid -Werror=strict-overflow on in rk_dns_srv_order(),1,[],https://github.com/heimdal/heimdal/pull/791,https://github.com/abartlet,2,https://github.com/heimdal/heimdal/pull/791#issuecomment-874412800,"In a strict Samba build with -Werror=strict-overflow on Ubuntu 18.04
with gcc version 7.5.0 (Ubuntu 7.5.0-3ubuntu1~18.04)
we see
../../source4/heimdal/lib/roken/resolve.c: In function ‘rk_dns_srv_order’:
../../source4/heimdal/lib/roken/resolve.c:639:7: error: assuming signed overflow does not occur when simplifying conditional to constant [-Werror=strict-overflow]
if(num_srv == 0)
^
cc1: all warnings being treated as errors
This avoids the issue by additionally setting a distinct flag.
Signed-off-by: Andrew Bartlett abartlet@samba.org","There are only 3 others, in lib/asn1/gen.c lib/hx509/cert.c and lib/gssapi/mech/gss_inquire_cred.c.
I'll try and work around with build rules if I can, but otherwise I'll advance patches (unless you would prefer patches like this one).",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,791,2021-07-06T02:20:35Z,2021-08-06T02:24:04Z,2021-08-06T02:25:00Z,MERGED,True,5,2,1,https://github.com/abartlet,Avoid -Werror=strict-overflow on in rk_dns_srv_order(),1,[],https://github.com/heimdal/heimdal/pull/791,https://github.com/lhoward,3,https://github.com/heimdal/heimdal/pull/791#issuecomment-874415686,"In a strict Samba build with -Werror=strict-overflow on Ubuntu 18.04
with gcc version 7.5.0 (Ubuntu 7.5.0-3ubuntu1~18.04)
we see
../../source4/heimdal/lib/roken/resolve.c: In function ‘rk_dns_srv_order’:
../../source4/heimdal/lib/roken/resolve.c:639:7: error: assuming signed overflow does not occur when simplifying conditional to constant [-Werror=strict-overflow]
if(num_srv == 0)
^
cc1: all warnings being treated as errors
This avoids the issue by additionally setting a distinct flag.
Signed-off-by: Andrew Bartlett abartlet@samba.org","Good catch, are you OK with this @nicowilliams / @jaltman?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,791,2021-07-06T02:20:35Z,2021-08-06T02:24:04Z,2021-08-06T02:25:00Z,MERGED,True,5,2,1,https://github.com/abartlet,Avoid -Werror=strict-overflow on in rk_dns_srv_order(),1,[],https://github.com/heimdal/heimdal/pull/791,https://github.com/abartlet,4,https://github.com/heimdal/heimdal/pull/791#issuecomment-874422646,"In a strict Samba build with -Werror=strict-overflow on Ubuntu 18.04
with gcc version 7.5.0 (Ubuntu 7.5.0-3ubuntu1~18.04)
we see
../../source4/heimdal/lib/roken/resolve.c: In function ‘rk_dns_srv_order’:
../../source4/heimdal/lib/roken/resolve.c:639:7: error: assuming signed overflow does not occur when simplifying conditional to constant [-Werror=strict-overflow]
if(num_srv == 0)
^
cc1: all warnings being treated as errors
This avoids the issue by additionally setting a distinct flag.
Signed-off-by: Andrew Bartlett abartlet@samba.org","I already told the build system to ignore the issue in gen.c, but the other two are:
[1332/4606] Compiling source4/heimdal/lib/hx509/cert.c
../../source4/heimdal/lib/hx509/cert.c: In function ‘hx509_verify_path’:
../../source4/heimdal/lib/hx509/cert.c:2448:9: error: assuming signed overflow does not occur when simplifying conditional to constant [-Werror=strict-overflow]
      if (proxy_cert_depth) {
         ^
cc1: all warnings being treated as errors

[1599/4606] Compiling source4/heimdal/lib/gssapi/mech/gss_inquire_cred.c
../../source4/heimdal/lib/gssapi/mech/gss_inquire_cred.c: In function ‘gss_inquire_cred’:
../../source4/heimdal/lib/gssapi/mech/gss_inquire_cred.c:55:27: warning: cast discards ‘const’ qualifier from pointer target type [-Wcast-qual]
  struct _gss_cred *cred = (struct _gss_cred *) cred_handle;
                           ^
../../source4/heimdal/lib/gssapi/mech/gss_inquire_cred.c:192:12: error: assuming signed overflow does not occur when simplifying conditional to constant [-Werror=strict-overflow]
  if (found == 0 || min_lifetime == 0) {
      ~~~~~~^~~~
../../source4/heimdal/lib/gssapi/mech/gss_inquire_cred.c:192:12: error: assuming signed overflow does not occur when simplifying conditional to constant [-Werror=strict-overflow]
cc1: all warnings being treated as errors

The hard part is finding what is the appropriate way to declare a boolean in each part of the code, as Heimdal doesn't use c99 bool yet. :-)",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,791,2021-07-06T02:20:35Z,2021-08-06T02:24:04Z,2021-08-06T02:25:00Z,MERGED,True,5,2,1,https://github.com/abartlet,Avoid -Werror=strict-overflow on in rk_dns_srv_order(),1,[],https://github.com/heimdal/heimdal/pull/791,https://github.com/lhoward,5,https://github.com/heimdal/heimdal/pull/791#issuecomment-893955209,"In a strict Samba build with -Werror=strict-overflow on Ubuntu 18.04
with gcc version 7.5.0 (Ubuntu 7.5.0-3ubuntu1~18.04)
we see
../../source4/heimdal/lib/roken/resolve.c: In function ‘rk_dns_srv_order’:
../../source4/heimdal/lib/roken/resolve.c:639:7: error: assuming signed overflow does not occur when simplifying conditional to constant [-Werror=strict-overflow]
if(num_srv == 0)
^
cc1: all warnings being treated as errors
This avoids the issue by additionally setting a distinct flag.
Signed-off-by: Andrew Bartlett abartlet@samba.org",I haven't fixed hx509_verify_path() but I have fixed gss_inquire_cred() as well as merging this one.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,796,2021-08-01T13:24:37Z,2021-08-12T07:37:01Z,2021-08-12T11:28:54Z,MERGED,True,3132,90,40,https://github.com/lhoward,Implement draft-perez-krb-wg-gss-preauth-02.txt,1,['feature request'],https://github.com/heimdal/heimdal/pull/796,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/796,"Creating PR to track GSS-API pre-authentication support
Note this protocol differs from the draft: GSS pre-auth contains the raw GSS-API token (not encapsulated in PA-GSS) and the state is managed by FAST FX-COOKIE.","Creating PR to track GSS-API pre-authentication support
Note this protocol differs from the draft: GSS pre-auth contains the raw GSS-API token (not encapsulated in PA-GSS) and the state is managed by FAST FX-COOKIE.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,796,2021-08-01T13:24:37Z,2021-08-12T07:37:01Z,2021-08-12T11:28:54Z,MERGED,True,3132,90,40,https://github.com/lhoward,Implement draft-perez-krb-wg-gss-preauth-02.txt,1,['feature request'],https://github.com/heimdal/heimdal/pull/796,https://github.com/elric1,2,https://github.com/heimdal/heimdal/pull/796#issuecomment-896057219,"Creating PR to track GSS-API pre-authentication support
Note this protocol differs from the draft: GSS pre-auth contains the raw GSS-API token (not encapsulated in PA-GSS) and the state is managed by FAST FX-COOKIE.","It would be quite nice to add tracing on the new code that we add. For the KDC, that's level >= 7 on kdc_log(). In libgssapi, it's _gss_mg_log(). Looks like I used level 10, but I should have used level 7 based on the documentation in krb5_openlog(3).",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,796,2021-08-01T13:24:37Z,2021-08-12T07:37:01Z,2021-08-12T11:28:54Z,MERGED,True,3132,90,40,https://github.com/lhoward,Implement draft-perez-krb-wg-gss-preauth-02.txt,1,['feature request'],https://github.com/heimdal/heimdal/pull/796,https://github.com/lhoward,3,https://github.com/heimdal/heimdal/pull/796#issuecomment-896059142,"Creating PR to track GSS-API pre-authentication support
Note this protocol differs from the draft: GSS pre-auth contains the raw GSS-API token (not encapsulated in PA-GSS) and the state is managed by FAST FX-COOKIE.","Noted. A lot of the Apple code traced at level 0, but I've dialled it back to 4 or 5 and fixed a bunch of typos / spelling errors. It's pretty verbose though, could probably be refined. e.g. here's getting an anonymous ticket with FAST armour and SAnon pre-authentication inside NegoEx ;)
% ./kinit --fast-armor-cache=armor --gss-mech=spnego --anonymous
2021-08-10T14:06:26 No such directory /Users/lukeh/CVSRoot/heimdal/lib/base/.libs/../lib/plugin/krb5
2021-08-10T14:06:26 No such directory /usr/local/heimdal/lib/plugin/krb5
2021-08-11T00:06:26 gss_acquire_cred sanon-x25519 name: 0/0 no name
2021-08-11T00:06:26 gss_acquire_cred_from: sanon-x25519
2021-08-11T00:06:26 krb5_get_creds: requesting a ticket for krbtgt/PA.PADL.COM@PA.PADL.COM
2021-08-11T00:06:26 Adding PA mech: GSS
2021-08-11T00:06:26 krb5_get_init_creds: loop 1
2021-08-11T00:06:26 krb5_get_creds: requesting a ticket for krbtgt/PA.PADL.COM@PA.PADL.COM
2021-08-11T00:06:26 KDC sent 0 patypes
2021-08-11T00:06:26 pa-mech trying: GSS, searching for 655
2021-08-11T00:06:26 Stepping pa-mech: GSS
2021-08-11T00:06:26 gss_isc: spnego first flags 00000042, specific cred, no token
2021-08-11T00:06:26 gss_isc cred: sanon-x25519
2021-08-11T00:06:26 gss_isc: sanon-x25519 first flags 00000042, specific cred, no token
2021-08-11T00:06:26 gss_isc cred: sanon-x25519
2021-08-11T00:06:26 gss_isc: sanon-x25519 maj_stat: 1/0
2021-08-11T00:06:26 spnego: initiator proposed mech negoex { 1 3 6 1 4 1 311 2 2 30 }
2021-08-11T00:06:26 spnego: initiator proposed mech sanon-x25519 { 1 3 6 1 4 1 5322 26 1 110 }
2021-08-11T00:06:26 gss-qmd: return 0/0
2021-08-11T00:06:26 _gss_mg_error: captured unknown mech-code 2529638957 for mech 1 2 840 113554 1 2 2 (-1765328339) from underlying mech sanon-x25519
2021-08-11T00:06:26 _gss_mg_error: captured unknown mech-code 2529638957 for mech 1 2 840 113554 1 2 2 (-1765328339) from underlying mech sanon-x25519
2021-08-11T00:06:26 negoex: proposing authentication scheme 1 dee384ff-1086-4e86-be78-b94170bfd376
2021-08-11T00:06:26 negoex: sending (0)INITIATOR_NEGO conversation e6b9604e-8e77-dd2c-6397-c096959569be
2021-08-11T00:06:26 negoex: sending (1)AP_REQUEST conversation e6b9604e-8e77-dd2c-6397-c096959569be
2021-08-11T00:06:26 gss_isc: spnego maj_stat: 1/0
2021-08-11T00:06:26 PA type GSS returned -1980176627
2021-08-11T00:06:26 Continue needed for GSS
2021-08-11T00:06:26 pamech need more stepping
2021-08-11T00:06:26 Trying to find service kdc for realm PA.PADL.COM flags 0
2021-08-11T00:06:26 configuration file for realm PA.PADL.COM found
2021-08-11T00:06:26 submitting new requests to new host
2021-08-11T00:06:26 connecting to host: tcp ::1:accessbuilder (localhost) state=CONNECT tid: 00000001
2021-08-11T00:06:26 connecting to 3: tcp ::1:accessbuilder (localhost) state=CONNECT tid: 00000001
2021-08-11T00:06:26 Queuing host in future (in 3s), its the 2 address on the same name: tcp 127.0.0.1:accessbuilder (localhost) state=CONNECT tid: 00000002
2021-08-11T00:06:26 writing packet: tcp ::1:accessbuilder (localhost) state=CONNECTED tid: 00000001
2021-08-11T00:06:26 reading packet: tcp ::1:accessbuilder (localhost) state=WAITING_REPLY tid: 00000001
2021-08-11T00:06:26 host completed: tcp ::1:accessbuilder (localhost) state=WAITING_REPLY tid: 00000001
2021-08-11T00:06:26 unknown-function PA.PADL.COM done: 0 hosts: 1 packets: 1 wc: 0.015158 nr: 0.007314 kh: 0.000052 tid: 00000002
2021-08-11T00:06:26 krb5_get_init_creds: loop 2
2021-08-11T00:06:26 krb5_get_init_creds: processing input
2021-08-11T00:06:26 krb5_get_init_creds: got an KRB-ERROR from KDC
2021-08-11T00:06:26 krb5_get_init_creds: KRB-ERROR -1765328293/More pre-authentication data required
2021-08-11T00:06:26 krb5_get_creds: requesting a ticket for krbtgt/PA.PADL.COM@PA.PADL.COM
2021-08-11T00:06:26 KDC sent 4 patypes
2021-08-11T00:06:26 KDC sent PA-DATA type: 655 (GSS)
2021-08-11T00:06:26 KDC sent PA-DATA type: 19 (ETYPE_INFO2)
2021-08-11T00:06:26 KDC sent PA-DATA type: 133 (FX-COOKIE)
2021-08-11T00:06:26 KDC sent PA-DATA type: 137 (FX_ERROR)
2021-08-11T00:06:26 pa-mech trying: GSS, searching for 655
2021-08-11T00:06:26 Stepping pa-mech: GSS
2021-08-11T00:06:26 gss_isc: spnego not first flags 00000042, specific cred, token
2021-08-11T00:06:26 gss_isc cred: sanon-x25519
2021-08-11T00:06:26 spnego: initiator selected mechanism negoex { 1 3 6 1 4 1 311 2 2 30 }
2021-08-11T00:06:26 negoex: received (2)ACCEPTOR_NEGO conversation e6b9604e-8e77-dd2c-6397-c096959569be
2021-08-11T00:06:26 negoex: received (3)CHALLENGE conversation e6b9604e-8e77-dd2c-6397-c096959569be
2021-08-11T00:06:26 negoex: received (4)VERIFY conversation e6b9604e-8e77-dd2c-6397-c096959569be
2021-08-11T00:06:26 gss_isc: sanon-x25519 not first flags 00000042, specific cred, token
2021-08-11T00:06:26 gss_isc cred: sanon-x25519
2021-08-11T00:06:26 gss_isc: sanon-x25519 maj_stat: 0/0
2021-08-11T00:06:26 negoex: sending (5)VERIFY conversation e6b9604e-8e77-dd2c-6397-c096959569be
2021-08-11T00:06:26 _gss_mg_error: captured unknown mech-code 22 for mech 1 2 840 113554 1 2 2 (22) from underlying mech sanon-x25519
2021-08-11T00:06:26 _gss_mg_error: captured unknown mech-code 22 for mech 1 2 840 113554 1 2 2 (22) from underlying mech sanon-x25519
2021-08-11T00:06:26 spnego: mechListMIC omitted as preferred mechanism selected
2021-08-11T00:06:26 gss_isc: spnego maj_stat: 1/0
2021-08-11T00:06:26 PA type GSS returned -1980176627
2021-08-11T00:06:26 Continue needed for GSS
2021-08-11T00:06:26 pamech need more stepping
2021-08-11T00:06:26 Mirrored FX-COOKIE to KDC
2021-08-11T00:06:26 Trying to find service kdc for realm PA.PADL.COM flags 2
2021-08-11T00:06:26 configuration file for realm PA.PADL.COM found
2021-08-11T00:06:26 submitting new requests to new host
2021-08-11T00:06:26 connecting to host: tcp ::1:accessbuilder (localhost) state=CONNECT tid: 00010001
2021-08-11T00:06:26 connecting to 3: tcp ::1:accessbuilder (localhost) state=CONNECT tid: 00010001
2021-08-11T00:06:26 Queuing host in future (in 3s), its the 2 address on the same name: tcp 127.0.0.1:accessbuilder (localhost) state=CONNECT tid: 00010002
2021-08-11T00:06:26 writing packet: tcp ::1:accessbuilder (localhost) state=CONNECTED tid: 00010001
2021-08-11T00:06:26 reading packet: tcp ::1:accessbuilder (localhost) state=WAITING_REPLY tid: 00010001
2021-08-11T00:06:26 host completed: tcp ::1:accessbuilder (localhost) state=WAITING_REPLY tid: 00010001
2021-08-11T00:06:26 unknown-function PA.PADL.COM done: 0 hosts: 1 packets: 1 wc: 0.011941 nr: 0.007112 kh: 0.000010 tid: 00010002
2021-08-11T00:06:26 krb5_get_init_creds: loop 3
2021-08-11T00:06:26 krb5_get_init_creds: processing input
2021-08-11T00:06:26 KDC sent 1 patypes
2021-08-11T00:06:26 KDC sent PA-DATA type: 655 (GSS)
2021-08-11T00:06:26 pa-mech trying: GSS, searching for 655
2021-08-11T00:06:26 Stepping pa-mech: GSS
2021-08-11T00:06:26 gss_isc: spnego not first flags 00000042, specific cred, token
2021-08-11T00:06:26 gss_isc cred: sanon-x25519
2021-08-11T00:06:26 gss_isc: spnego maj_stat: 0/0
2021-08-11T00:06:26 pa_gss_step: WELLKNOWN/FEDERATED@PA.PADL.COM as WELLKNOWN/ANONYMOUS@WELLKNOWN:ANONYMOUS
2021-08-11T00:06:26 PA type GSS returned 0
2021-08-11T00:06:26 final pamech done step
2021-08-11T00:06:26 krb5_get_init_creds: FAST strengthen_key
2021-08-11T00:06:26 krb5_get_init_creds: extracting ticket
2021-08-11T00:06:26 processing enc-ap-rep
2021-08-11T00:06:26 enc-ap-rep: valid
2021-08-11T00:06:26 krb5_get_init_creds: wc: 0.031898",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,796,2021-08-01T13:24:37Z,2021-08-12T07:37:01Z,2021-08-12T11:28:54Z,MERGED,True,3132,90,40,https://github.com/lhoward,Implement draft-perez-krb-wg-gss-preauth-02.txt,1,['feature request'],https://github.com/heimdal/heimdal/pull/796,https://github.com/lhoward,4,https://github.com/heimdal/heimdal/pull/796#issuecomment-896060330,"Creating PR to track GSS-API pre-authentication support
Note this protocol differs from the draft: GSS pre-auth contains the raw GSS-API token (not encapsulated in PA-GSS) and the state is managed by FAST FX-COOKIE.","I can add some GSS pre-auth specific tracing, though.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,796,2021-08-01T13:24:37Z,2021-08-12T07:37:01Z,2021-08-12T11:28:54Z,MERGED,True,3132,90,40,https://github.com/lhoward,Implement draft-perez-krb-wg-gss-preauth-02.txt,1,['feature request'],https://github.com/heimdal/heimdal/pull/796,https://github.com/elric1,5,https://github.com/heimdal/heimdal/pull/796#issuecomment-896066473,"Creating PR to track GSS-API pre-authentication support
Note this protocol differs from the draft: GSS pre-auth contains the raw GSS-API token (not encapsulated in PA-GSS) and the state is managed by FAST FX-COOKIE.","I think that detailed messages are fine as long as the levels are quite high. After all, you only turn it up to 10 when something is going wrong and you can't work out what it is. At this point, too many messages within reason is better than too few.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,796,2021-08-01T13:24:37Z,2021-08-12T07:37:01Z,2021-08-12T11:28:54Z,MERGED,True,3132,90,40,https://github.com/lhoward,Implement draft-perez-krb-wg-gss-preauth-02.txt,1,['feature request'],https://github.com/heimdal/heimdal/pull/796,https://github.com/lhoward,6,https://github.com/heimdal/heimdal/pull/796#issuecomment-896406952,"Creating PR to track GSS-API pre-authentication support
Note this protocol differs from the draft: GSS pre-auth contains the raw GSS-API token (not encapsulated in PA-GSS) and the state is managed by FAST FX-COOKIE.","I think that detailed messages are fine as long as the levels are quite high. After all, you only turn it up to 10 when something is going wrong and you can't work out what it is. At this point, too many messages within reason is better than too few.

Good point, thanks for encouraging this, I've added a bunch of debugging to kdc/gss_preauth.c. I think, at least by the time we get around to merging #805, the client side logging is good.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,796,2021-08-01T13:24:37Z,2021-08-12T07:37:01Z,2021-08-12T11:28:54Z,MERGED,True,3132,90,40,https://github.com/lhoward,Implement draft-perez-krb-wg-gss-preauth-02.txt,1,['feature request'],https://github.com/heimdal/heimdal/pull/796,https://github.com/nicowilliams,7,https://github.com/heimdal/heimdal/pull/796#issuecomment-897411497,"Creating PR to track GSS-API pre-authentication support
Note this protocol differs from the draft: GSS pre-auth contains the raw GSS-API token (not encapsulated in PA-GSS) and the state is managed by FAST FX-COOKIE.",LGTM!,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,796,2021-08-01T13:24:37Z,2021-08-12T07:37:01Z,2021-08-12T11:28:54Z,MERGED,True,3132,90,40,https://github.com/lhoward,Implement draft-perez-krb-wg-gss-preauth-02.txt,1,['feature request'],https://github.com/heimdal/heimdal/pull/796,https://github.com/nicowilliams,8,https://github.com/heimdal/heimdal/pull/796#issuecomment-897411630,"Creating PR to track GSS-API pre-authentication support
Note this protocol differs from the draft: GSS pre-auth contains the raw GSS-API token (not encapsulated in PA-GSS) and the state is managed by FAST FX-COOKIE.",All code I review should be this good!,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,796,2021-08-01T13:24:37Z,2021-08-12T07:37:01Z,2021-08-12T11:28:54Z,MERGED,True,3132,90,40,https://github.com/lhoward,Implement draft-perez-krb-wg-gss-preauth-02.txt,1,['feature request'],https://github.com/heimdal/heimdal/pull/796,https://github.com/lhoward,9,https://github.com/heimdal/heimdal/pull/796#issuecomment-897412065,"Creating PR to track GSS-API pre-authentication support
Note this protocol differs from the draft: GSS pre-auth contains the raw GSS-API token (not encapsulated in PA-GSS) and the state is managed by FAST FX-COOKIE.","All code I review should be this good!

Hehe, you've made my day :)",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,796,2021-08-01T13:24:37Z,2021-08-12T07:37:01Z,2021-08-12T11:28:54Z,MERGED,True,3132,90,40,https://github.com/lhoward,Implement draft-perez-krb-wg-gss-preauth-02.txt,1,['feature request'],https://github.com/heimdal/heimdal/pull/796,https://github.com/nicowilliams,10,https://github.com/heimdal/heimdal/pull/796#issuecomment-897413561,"Creating PR to track GSS-API pre-authentication support
Note this protocol differs from the draft: GSS pre-auth contains the raw GSS-API token (not encapsulated in PA-GSS) and the state is managed by FAST FX-COOKIE.","gss_get_instance() isn't needed because the GSS ABI, though it isn't standard, it might as well be, and we'll never break it.  I'm afraid my comment about there not being one led you astray.  You may remove it, or keep it -- I don't really care either way.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,796,2021-08-01T13:24:37Z,2021-08-12T07:37:01Z,2021-08-12T11:28:54Z,MERGED,True,3132,90,40,https://github.com/lhoward,Implement draft-perez-krb-wg-gss-preauth-02.txt,1,['feature request'],https://github.com/heimdal/heimdal/pull/796,https://github.com/lhoward,11,https://github.com/heimdal/heimdal/pull/796#issuecomment-897561377,"Creating PR to track GSS-API pre-authentication support
Note this protocol differs from the draft: GSS pre-auth contains the raw GSS-API token (not encapsulated in PA-GSS) and the state is managed by FAST FX-COOKIE.","gss_get_instance() isn't needed because the GSS ABI, though it isn't standard, it might as well be, and we'll never break it. I'm afraid my comment about there not being one led you astray. You may remove it, or keep it -- I don't really care either way.

I suppose some non-standard extensions might change between releases or implementations…",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,797,2021-08-04T11:28:40Z,2021-08-10T05:30:46Z,2021-08-12T06:15:36Z,MERGED,True,366,86,10,https://github.com/lhoward,kuser: --fast-armor-anon-pkinit option for kinit,1,[],https://github.com/heimdal/heimdal/pull/797,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/797,"Add the  --pk-anon-fast-armor option to kinit, which acquires a temporary anonymous PKINIT TGT to use as a FAST armor key.  The KDC certificate is not authenticated, per RFC 6113 5.4.1.1.","Add the  --pk-anon-fast-armor option to kinit, which acquires a temporary anonymous PKINIT TGT to use as a FAST armor key.  The KDC certificate is not authenticated, per RFC 6113 5.4.1.1.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,797,2021-08-04T11:28:40Z,2021-08-10T05:30:46Z,2021-08-12T06:15:36Z,MERGED,True,366,86,10,https://github.com/lhoward,kuser: --fast-armor-anon-pkinit option for kinit,1,[],https://github.com/heimdal/heimdal/pull/797,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/797#issuecomment-895724739,"Add the  --pk-anon-fast-armor option to kinit, which acquires a temporary anonymous PKINIT TGT to use as a FAST armor key.  The KDC certificate is not authenticated, per RFC 6113 5.4.1.1.",Do we need a test?  How are you testing this?,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,797,2021-08-04T11:28:40Z,2021-08-10T05:30:46Z,2021-08-12T06:15:36Z,MERGED,True,366,86,10,https://github.com/lhoward,kuser: --fast-armor-anon-pkinit option for kinit,1,[],https://github.com/heimdal/heimdal/pull/797,https://github.com/lhoward,3,https://github.com/heimdal/heimdal/pull/797#issuecomment-895746341,"Add the  --pk-anon-fast-armor option to kinit, which acquires a temporary anonymous PKINIT TGT to use as a FAST armor key.  The KDC certificate is not authenticated, per RFC 6113 5.4.1.1.",Sorry I missed some of these comments before merging (Skype/Github synchronisation error!). I'll address any issues in a follow-up commit.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,797,2021-08-04T11:28:40Z,2021-08-10T05:30:46Z,2021-08-12T06:15:36Z,MERGED,True,366,86,10,https://github.com/lhoward,kuser: --fast-armor-anon-pkinit option for kinit,1,[],https://github.com/heimdal/heimdal/pull/797,https://github.com/lhoward,4,https://github.com/heimdal/heimdal/pull/797#issuecomment-895747315,"Add the  --pk-anon-fast-armor option to kinit, which acquires a temporary anonymous PKINIT TGT to use as a FAST armor key.  The KDC certificate is not authenticated, per RFC 6113 5.4.1.1.","Do we need a test? How are you testing this?

there is one test at present",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,797,2021-08-04T11:28:40Z,2021-08-10T05:30:46Z,2021-08-12T06:15:36Z,MERGED,True,366,86,10,https://github.com/lhoward,kuser: --fast-armor-anon-pkinit option for kinit,1,[],https://github.com/heimdal/heimdal/pull/797,https://github.com/kaduk,5,https://github.com/heimdal/heimdal/pull/797#issuecomment-897361022,"Add the  --pk-anon-fast-armor option to kinit, which acquires a temporary anonymous PKINIT TGT to use as a FAST armor key.  The KDC certificate is not authenticated, per RFC 6113 5.4.1.1.","The KDC certificate is not authenticated, per RFC 6113 5.4.1.1.

It's late here, but I am seeing an option (2) in that section that involves anonymous pkinit that does authenticate the KDC as being preferred to option (3) that does not authenticate the KDC and is vulnerable to MITM.  I assume there is some more subtlety that you had in mind when writing this, but it seemed worth checking.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,797,2021-08-04T11:28:40Z,2021-08-10T05:30:46Z,2021-08-12T06:15:36Z,MERGED,True,366,86,10,https://github.com/lhoward,kuser: --fast-armor-anon-pkinit option for kinit,1,[],https://github.com/heimdal/heimdal/pull/797,https://github.com/lhoward,6,https://github.com/heimdal/heimdal/pull/797#issuecomment-897369042,"Add the  --pk-anon-fast-armor option to kinit, which acquires a temporary anonymous PKINIT TGT to use as a FAST armor key.  The KDC certificate is not authenticated, per RFC 6113 5.4.1.1.","The KDC certificate is not authenticated, per RFC 6113 5.4.1.1.

It's late here, but I am seeing an option (2) in that section that involves anonymous pkinit that does authenticate the KDC as being preferred to option (3) that does not authenticate the KDC and is vulnerable to MITM. I assume there is some more subtlety that you had in mind when writing this, but it seemed worth checking.

The KDC will be authenticated in FAST if it can be, although obviously as there's no indication to the user whether this happened or not, that is kind of useless. Currently if you want a KDC-authenticated anonymous PKINIT FAST armour cache then you should retrieve one explicitly and store it in a credential cache.
Generally the MITM is not an issue because the inner exchange authenticates the KDC, e.g. by the KDC proving that it knows the user's password when using PA-ENC-TIMESTAMP. It is an issue when using pre-authentication mechanisms that don't authenticate the KDC (such as GSS-API without GSS_C_MUTUAL_FLAG), and yes, those cases will explicitly check the KDC authentication state before proceeding.
If you like, we could display a warning when the KDC could not be authenticated at the FAST layer. But, it's only really a security issue if the inner pre-authentication mechanism does not authenticate the KDC.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,797,2021-08-04T11:28:40Z,2021-08-10T05:30:46Z,2021-08-12T06:15:36Z,MERGED,True,366,86,10,https://github.com/lhoward,kuser: --fast-armor-anon-pkinit option for kinit,1,[],https://github.com/heimdal/heimdal/pull/797,https://github.com/kaduk,7,https://github.com/heimdal/heimdal/pull/797#issuecomment-897371658,"Add the  --pk-anon-fast-armor option to kinit, which acquires a temporary anonymous PKINIT TGT to use as a FAST armor key.  The KDC certificate is not authenticated, per RFC 6113 5.4.1.1.","Thanks for the more in-depth explanation.  I'm not requesting any behavior change, and just wanted to better understand how the intended change related to the RFC.  I have that now, so we should be all set.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,797,2021-08-04T11:28:40Z,2021-08-10T05:30:46Z,2021-08-12T06:15:36Z,MERGED,True,366,86,10,https://github.com/lhoward,kuser: --fast-armor-anon-pkinit option for kinit,1,[],https://github.com/heimdal/heimdal/pull/797,https://github.com/lhoward,8,https://github.com/heimdal/heimdal/pull/797#issuecomment-897377520,"Add the  --pk-anon-fast-armor option to kinit, which acquires a temporary anonymous PKINIT TGT to use as a FAST armor key.  The KDC certificate is not authenticated, per RFC 6113 5.4.1.1.","Thanks for the more in-depth explanation. I'm not requesting any behavior change, and just wanted to better understand how the intended change related to the RFC. I have that now, so we should be all set.

I actually originally added it because I thought using FX-COOKIE (which I wanted for GSS preauth) would require it, but turns out it didn't.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,798,2021-08-04T21:25:17Z,2021-08-07T08:56:02Z,2021-08-07T08:56:03Z,CLOSED,False,706,297,16,https://github.com/elric1,Support split gss tokens,7,[],https://github.com/heimdal/heimdal/pull/798,https://github.com/elric1,1,https://github.com/heimdal/heimdal/pull/798,"There are a number of other commits in this pull request to support the main change, but we present the meat of the commit message for said main change's commit:
    gss_accept_sec_context: support reassembling split tokens.

    Microsoft will sometimes split GSS tokens when they exceed a certain
    size in some protocols.  This is specified in

            [MS-SPNG]: Simple and Protected GSS-API Negotiation
            Mechanism (SPNEGO) Extension

    https://winprotocoldoc.blob.core.windows.net/productionwindowsarchives/MS-SPNG/%5bMS-SPNG%5d.pdf

    sections 3.1.5.4 to 3.1.5.9.

    We extend gss_accept_sec_context() to recognise partial tokens and
    to accumulate the fragments until an entire token is available to
    be processed.  If the entire token is not yet available,
    GSS_S_CONTINUE_NEEDED is returned with a zero length output token.
    This is specified in RFC2744 page 25-26 to indicate that no reply
    need be sent.

    We include updates to the test framework to test split tokens when
    using SPNEGO.","There are a number of other commits in this pull request to support the main change, but we present the meat of the commit message for said main change's commit:
    gss_accept_sec_context: support reassembling split tokens.

    Microsoft will sometimes split GSS tokens when they exceed a certain
    size in some protocols.  This is specified in

            [MS-SPNG]: Simple and Protected GSS-API Negotiation
            Mechanism (SPNEGO) Extension

    https://winprotocoldoc.blob.core.windows.net/productionwindowsarchives/MS-SPNG/%5bMS-SPNG%5d.pdf

    sections 3.1.5.4 to 3.1.5.9.

    We extend gss_accept_sec_context() to recognise partial tokens and
    to accumulate the fragments until an entire token is available to
    be processed.  If the entire token is not yet available,
    GSS_S_CONTINUE_NEEDED is returned with a zero length output token.
    This is specified in RFC2744 page 25-26 to indicate that no reply
    need be sent.

    We include updates to the test framework to test split tokens when
    using SPNEGO.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,798,2021-08-04T21:25:17Z,2021-08-07T08:56:02Z,2021-08-07T08:56:03Z,CLOSED,False,706,297,16,https://github.com/elric1,Support split gss tokens,7,[],https://github.com/heimdal/heimdal/pull/798,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/798#issuecomment-892999863,"There are a number of other commits in this pull request to support the main change, but we present the meat of the commit message for said main change's commit:
    gss_accept_sec_context: support reassembling split tokens.

    Microsoft will sometimes split GSS tokens when they exceed a certain
    size in some protocols.  This is specified in

            [MS-SPNG]: Simple and Protected GSS-API Negotiation
            Mechanism (SPNEGO) Extension

    https://winprotocoldoc.blob.core.windows.net/productionwindowsarchives/MS-SPNG/%5bMS-SPNG%5d.pdf

    sections 3.1.5.4 to 3.1.5.9.

    We extend gss_accept_sec_context() to recognise partial tokens and
    to accumulate the fragments until an entire token is available to
    be processed.  If the entire token is not yet available,
    GSS_S_CONTINUE_NEEDED is returned with a zero length output token.
    This is specified in RFC2744 page 25-26 to indicate that no reply
    need be sent.

    We include updates to the test framework to test split tokens when
    using SPNEGO.","It looks like no changes are required to the SPNEGO mech, is that correct? I ask as I have in #796 added support for exporting partially established SPNEGO contexts (to use with GSS pre-authentication on the KDC) and wonder what the interaction would be with this.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,798,2021-08-04T21:25:17Z,2021-08-07T08:56:02Z,2021-08-07T08:56:03Z,CLOSED,False,706,297,16,https://github.com/elric1,Support split gss tokens,7,[],https://github.com/heimdal/heimdal/pull/798,https://github.com/elric1,3,https://github.com/heimdal/heimdal/pull/798#issuecomment-893001342,"There are a number of other commits in this pull request to support the main change, but we present the meat of the commit message for said main change's commit:
    gss_accept_sec_context: support reassembling split tokens.

    Microsoft will sometimes split GSS tokens when they exceed a certain
    size in some protocols.  This is specified in

            [MS-SPNG]: Simple and Protected GSS-API Negotiation
            Mechanism (SPNEGO) Extension

    https://winprotocoldoc.blob.core.windows.net/productionwindowsarchives/MS-SPNG/%5bMS-SPNG%5d.pdf

    sections 3.1.5.4 to 3.1.5.9.

    We extend gss_accept_sec_context() to recognise partial tokens and
    to accumulate the fragments until an entire token is available to
    be processed.  If the entire token is not yet available,
    GSS_S_CONTINUE_NEEDED is returned with a zero length output token.
    This is specified in RFC2744 page 25-26 to indicate that no reply
    need be sent.

    We include updates to the test framework to test split tokens when
    using SPNEGO.","@LukeH: Thanks for asking! I need to fix SPNEGO, but just before I did it, @nicowilliams suggested talking to you about it first. So, I'd like the export of partially established SPNEGO contexts to work, but I didn't implement it. And so there should be no conflicts with your work.",True,{'EYES': ['https://github.com/LukeH']}
heimdal/heimdal,https://github.com/heimdal/heimdal,798,2021-08-04T21:25:17Z,2021-08-07T08:56:02Z,2021-08-07T08:56:03Z,CLOSED,False,706,297,16,https://github.com/elric1,Support split gss tokens,7,[],https://github.com/heimdal/heimdal/pull/798,https://github.com/lhoward,4,https://github.com/heimdal/heimdal/pull/798#issuecomment-893004175,"There are a number of other commits in this pull request to support the main change, but we present the meat of the commit message for said main change's commit:
    gss_accept_sec_context: support reassembling split tokens.

    Microsoft will sometimes split GSS tokens when they exceed a certain
    size in some protocols.  This is specified in

            [MS-SPNG]: Simple and Protected GSS-API Negotiation
            Mechanism (SPNEGO) Extension

    https://winprotocoldoc.blob.core.windows.net/productionwindowsarchives/MS-SPNG/%5bMS-SPNG%5d.pdf

    sections 3.1.5.4 to 3.1.5.9.

    We extend gss_accept_sec_context() to recognise partial tokens and
    to accumulate the fragments until an entire token is available to
    be processed.  If the entire token is not yet available,
    GSS_S_CONTINUE_NEEDED is returned with a zero length output token.
    This is specified in RFC2744 page 25-26 to indicate that no reply
    need be sent.

    We include updates to the test framework to test split tokens when
    using SPNEGO.",I split (no pun intended) the partial context token export into #799 so it can hopefully be integrated sooner and we can test for conflicts with your work.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,798,2021-08-04T21:25:17Z,2021-08-07T08:56:02Z,2021-08-07T08:56:03Z,CLOSED,False,706,297,16,https://github.com/elric1,Support split gss tokens,7,[],https://github.com/heimdal/heimdal/pull/798,https://github.com/lhoward,5,https://github.com/heimdal/heimdal/pull/798#issuecomment-894599420,"There are a number of other commits in this pull request to support the main change, but we present the meat of the commit message for said main change's commit:
    gss_accept_sec_context: support reassembling split tokens.

    Microsoft will sometimes split GSS tokens when they exceed a certain
    size in some protocols.  This is specified in

            [MS-SPNG]: Simple and Protected GSS-API Negotiation
            Mechanism (SPNEGO) Extension

    https://winprotocoldoc.blob.core.windows.net/productionwindowsarchives/MS-SPNG/%5bMS-SPNG%5d.pdf

    sections 3.1.5.4 to 3.1.5.9.

    We extend gss_accept_sec_context() to recognise partial tokens and
    to accumulate the fragments until an entire token is available to
    be processed.  If the entire token is not yet available,
    GSS_S_CONTINUE_NEEDED is returned with a zero length output token.
    This is specified in RFC2744 page 25-26 to indicate that no reply
    need be sent.

    We include updates to the test framework to test split tokens when
    using SPNEGO.","If you resolve the issues with a separate commit I can cherry-pick, I have a local branch that resolves the conflicts in test_context.c. Although I'm sure you can do that yourself too!",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,798,2021-08-04T21:25:17Z,2021-08-07T08:56:02Z,2021-08-07T08:56:03Z,CLOSED,False,706,297,16,https://github.com/elric1,Support split gss tokens,7,[],https://github.com/heimdal/heimdal/pull/798,https://github.com/lhoward,6,https://github.com/heimdal/heimdal/pull/798#issuecomment-894627132,"There are a number of other commits in this pull request to support the main change, but we present the meat of the commit message for said main change's commit:
    gss_accept_sec_context: support reassembling split tokens.

    Microsoft will sometimes split GSS tokens when they exceed a certain
    size in some protocols.  This is specified in

            [MS-SPNG]: Simple and Protected GSS-API Negotiation
            Mechanism (SPNEGO) Extension

    https://winprotocoldoc.blob.core.windows.net/productionwindowsarchives/MS-SPNG/%5bMS-SPNG%5d.pdf

    sections 3.1.5.4 to 3.1.5.9.

    We extend gss_accept_sec_context() to recognise partial tokens and
    to accumulate the fragments until an entire token is available to
    be processed.  If the entire token is not yet available,
    GSS_S_CONTINUE_NEEDED is returned with a zero length output token.
    This is specified in RFC2744 page 25-26 to indicate that no reply
    need be sent.

    We include updates to the test framework to test split tokens when
    using SPNEGO.","Fixed, merged.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,799,2021-08-04T22:01:12Z,2021-08-07T08:56:33Z,2021-08-09T23:01:46Z,MERGED,True,693,103,7,https://github.com/lhoward,gss: allow partial accept context export in SPNEGO,1,[],https://github.com/heimdal/heimdal/pull/799,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/799,"Support for exporting partially established acceptor context tokens. With this, an acceptor can send the initiator an encrypted state cookie containing the exported context token.
(The concrete mechanism, of course, must either require a single round trip or support partial context export itself. Kerberos and GSS EAP would work, but Kerberos with GSS_C_DCE_STYLE would not, as currently implemented.)
Partial context export is not permitted for initiators.","Support for exporting partially established acceptor context tokens. With this, an acceptor can send the initiator an encrypted state cookie containing the exported context token.
(The concrete mechanism, of course, must either require a single round trip or support partial context export itself. Kerberos and GSS EAP would work, but Kerberos with GSS_C_DCE_STYLE would not, as currently implemented.)
Partial context export is not permitted for initiators.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,799,2021-08-04T22:01:12Z,2021-08-07T08:56:33Z,2021-08-09T23:01:46Z,MERGED,True,693,103,7,https://github.com/lhoward,gss: allow partial accept context export in SPNEGO,1,[],https://github.com/heimdal/heimdal/pull/799,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/799#issuecomment-894533922,"Support for exporting partially established acceptor context tokens. With this, an acceptor can send the initiator an encrypted state cookie containing the exported context token.
(The concrete mechanism, of course, must either require a single round trip or support partial context export itself. Kerberos and GSS EAP would work, but Kerberos with GSS_C_DCE_STYLE would not, as currently implemented.)
Partial context export is not permitted for initiators.","--export-import-context in SPNEGO should already be changed by check-negoex.in, I think.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,799,2021-08-04T22:01:12Z,2021-08-07T08:56:33Z,2021-08-09T23:01:46Z,MERGED,True,693,103,7,https://github.com/lhoward,gss: allow partial accept context export in SPNEGO,1,[],https://github.com/heimdal/heimdal/pull/799,https://github.com/lhoward,3,https://github.com/heimdal/heimdal/pull/799#issuecomment-894534137,"Support for exporting partially established acceptor context tokens. With this, an acceptor can send the initiator an encrypted state cookie containing the exported context token.
(The concrete mechanism, of course, must either require a single round trip or support partial context export itself. Kerberos and GSS EAP would work, but Kerberos with GSS_C_DCE_STYLE would not, as currently implemented.)
Partial context export is not permitted for initiators.","But I guess yes, should check for export import of partial contexts, but that may require changes to test_context?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,799,2021-08-04T22:01:12Z,2021-08-07T08:56:33Z,2021-08-09T23:01:46Z,MERGED,True,693,103,7,https://github.com/lhoward,gss: allow partial accept context export in SPNEGO,1,[],https://github.com/heimdal/heimdal/pull/799,https://github.com/lhoward,4,https://github.com/heimdal/heimdal/pull/799#issuecomment-894738954,"Support for exporting partially established acceptor context tokens. With this, an acceptor can send the initiator an encrypted state cookie containing the exported context token.
(The concrete mechanism, of course, must either require a single round trip or support partial context export itself. Kerberos and GSS EAP would work, but Kerberos with GSS_C_DCE_STYLE would not, as currently implemented.)
Partial context export is not permitted for initiators.","In my code, I tried to add --export-import-context to tests/gss/check-spnego.in in these lines:
echo ""spnego""
${context} \
    --client-ccache=""${cache}"" \
    --mech-type=spnego \
    --ret-mech-type=krb5 \
    --name-type=hostbased-service \
    host@host.test.h5l.se || \
    { exitcode=1 ; echo test failed; }

echo ""spnego (split tokens)""
${context} \
    --token-split=128 \
    --client-ccache=""${cache}"" \
    --mech-type=spnego \
    --ret-mech-type=krb5 \
    --name-type=hostbased-service \
    host@host.test.h5l.se || \
    { exitcode=1 ; echo test failed; }

Your code here will enable this---and this should be a good test case for you to add in this commit.
Hmmm, actually, I added --export-import-context to that test case in lib/gssapi/test_context.c. But, I think that it'll provide a good test case for your code.

Passing --token-split=128 --export-import-context in test_context calls gss_export_sec_context() before the first call from the mechglue to the mechanism's gss_accept_sec_context(). So unless the mechglue itself supports exporting partial contexts I'm not sure how this can ever work?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,799,2021-08-04T22:01:12Z,2021-08-07T08:56:33Z,2021-08-09T23:01:46Z,MERGED,True,693,103,7,https://github.com/lhoward,gss: allow partial accept context export in SPNEGO,1,[],https://github.com/heimdal/heimdal/pull/799,https://github.com/lhoward,5,https://github.com/heimdal/heimdal/pull/799#issuecomment-894739240,"Support for exporting partially established acceptor context tokens. With this, an acceptor can send the initiator an encrypted state cookie containing the exported context token.
(The concrete mechanism, of course, must either require a single round trip or support partial context export itself. Kerberos and GSS EAP would work, but Kerberos with GSS_C_DCE_STYLE would not, as currently implemented.)
Partial context export is not permitted for initiators.","Ah, I see the mechglue itself does support exporting partial contexts.
accumulate_token() is returning GSS_C_CONTINUE_NEEDED because gci->length != ctx->gc_target_len, before the first call to the mechanism gss_accept_sec_context().
Thus gss_export_sec_context() bails because ctx->gc_ctx == NULL (line 59).",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,799,2021-08-04T22:01:12Z,2021-08-07T08:56:33Z,2021-08-09T23:01:46Z,MERGED,True,693,103,7,https://github.com/lhoward,gss: allow partial accept context export in SPNEGO,1,[],https://github.com/heimdal/heimdal/pull/799,https://github.com/lhoward,6,https://github.com/heimdal/heimdal/pull/799#issuecomment-894741617,"Support for exporting partially established acceptor context tokens. With this, an acceptor can send the initiator an encrypted state cookie containing the exported context token.
(The concrete mechanism, of course, must either require a single round trip or support partial context export itself. Kerberos and GSS EAP would work, but Kerberos with GSS_C_DCE_STYLE would not, as currently implemented.)
Partial context export is not permitted for initiators.","OK, I didn't review this closely enough before integrating. There are some use after frees etc. I will fix and merge.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,799,2021-08-04T22:01:12Z,2021-08-07T08:56:33Z,2021-08-09T23:01:46Z,MERGED,True,693,103,7,https://github.com/lhoward,gss: allow partial accept context export in SPNEGO,1,[],https://github.com/heimdal/heimdal/pull/799,https://github.com/lhoward,7,https://github.com/heimdal/heimdal/pull/799#issuecomment-894742571,"Support for exporting partially established acceptor context tokens. With this, an acceptor can send the initiator an encrypted state cookie containing the exported context token.
(The concrete mechanism, of course, must either require a single round trip or support partial context export itself. Kerberos and GSS EAP would work, but Kerberos with GSS_C_DCE_STYLE would not, as currently implemented.)
Partial context export is not permitted for initiators.","Fixed. Note that test_context can only split tokens where the first byte is 0x60, otherwise gss_accept_sec_context() doesn't have enough information to piece it together.
gss_import_sec_context() also failed to allocate a buffer large enough to accumulate up to the target length.
I have also added the tests you suggested.
Fixed in 06232df.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,799,2021-08-04T22:01:12Z,2021-08-07T08:56:33Z,2021-08-09T23:01:46Z,MERGED,True,693,103,7,https://github.com/lhoward,gss: allow partial accept context export in SPNEGO,1,[],https://github.com/heimdal/heimdal/pull/799,https://github.com/lhoward,8,https://github.com/heimdal/heimdal/pull/799#issuecomment-894743197,"Support for exporting partially established acceptor context tokens. With this, an acceptor can send the initiator an encrypted state cookie containing the exported context token.
(The concrete mechanism, of course, must either require a single round trip or support partial context export itself. Kerberos and GSS EAP would work, but Kerberos with GSS_C_DCE_STYLE would not, as currently implemented.)
Partial context export is not permitted for initiators.","Obviously changing the exported context token format is a breaking ABI change but, I don't think we've cared too much about this in the past. As long as the libraries get a version number bump.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,799,2021-08-04T22:01:12Z,2021-08-07T08:56:33Z,2021-08-09T23:01:46Z,MERGED,True,693,103,7,https://github.com/lhoward,gss: allow partial accept context export in SPNEGO,1,[],https://github.com/heimdal/heimdal/pull/799,https://github.com/lhoward,9,https://github.com/heimdal/heimdal/pull/799#issuecomment-894743226,"Support for exporting partially established acceptor context tokens. With this, an acceptor can send the initiator an encrypted state cookie containing the exported context token.
(The concrete mechanism, of course, must either require a single round trip or support partial context export itself. Kerberos and GSS EAP would work, but Kerberos with GSS_C_DCE_STYLE would not, as currently implemented.)
Partial context export is not permitted for initiators.",Sorry all those comments should be been directed to #798 not this PR.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,800,2021-08-06T17:05:46Z,2021-08-06T21:52:46Z,2021-08-06T21:52:47Z,MERGED,True,1,1,1,https://github.com/frozencemetery,kdc: fix typo in moduli file loading error message,1,[],https://github.com/heimdal/heimdal/pull/800,https://github.com/frozencemetery,1,https://github.com/heimdal/heimdal/pull/800,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,801,2021-08-08T23:16:58Z,2021-08-08T23:35:06Z,2021-08-09T00:13:02Z,CLOSED,False,3,0,1,https://github.com/abartlet,Export krb5_init_creds_* functions,1,[],https://github.com/heimdal/heimdal/pull/801,https://github.com/abartlet,1,https://github.com/heimdal/heimdal/pull/801,"@cryptomilk made this change in Samba which I would like to inquire about getting this upstream.
I see 6dd66df adding this to libkrb5-exports.def.in but I don't understand how this and the version-script.map files interact.
The function krb5_get_init_creds_opt_get_error() is deprecated and
krb5_init_creds_init() and krb5_init_creds_get_error() should be used
now.
Signed-off-by: Andreas Schneider asn@samba.org
Reviewed-by: Andrew Bartlett abartlet@samba.org
(cherry picked from Samba commit e4f82de7716e91a1c512a8c37ca768b591029a4a)","@cryptomilk made this change in Samba which I would like to inquire about getting this upstream.
I see 6dd66df adding this to libkrb5-exports.def.in but I don't understand how this and the version-script.map files interact.
The function krb5_get_init_creds_opt_get_error() is deprecated and
krb5_init_creds_init() and krb5_init_creds_get_error() should be used
now.
Signed-off-by: Andreas Schneider asn@samba.org
Reviewed-by: Andrew Bartlett abartlet@samba.org
(cherry picked from Samba commit e4f82de7716e91a1c512a8c37ca768b591029a4a)",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,801,2021-08-08T23:16:58Z,2021-08-08T23:35:06Z,2021-08-09T00:13:02Z,CLOSED,False,3,0,1,https://github.com/abartlet,Export krb5_init_creds_* functions,1,[],https://github.com/heimdal/heimdal/pull/801,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/801#issuecomment-894873641,"@cryptomilk made this change in Samba which I would like to inquire about getting this upstream.
I see 6dd66df adding this to libkrb5-exports.def.in but I don't understand how this and the version-script.map files interact.
The function krb5_get_init_creds_opt_get_error() is deprecated and
krb5_init_creds_init() and krb5_init_creds_get_error() should be used
now.
Signed-off-by: Andreas Schneider asn@samba.org
Reviewed-by: Andrew Bartlett abartlet@samba.org
(cherry picked from Samba commit e4f82de7716e91a1c512a8c37ca768b591029a4a)","Version script used by Linux, exports by Windows.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,801,2021-08-08T23:16:58Z,2021-08-08T23:35:06Z,2021-08-09T00:13:02Z,CLOSED,False,3,0,1,https://github.com/abartlet,Export krb5_init_creds_* functions,1,[],https://github.com/heimdal/heimdal/pull/801,https://github.com/lhoward,3,https://github.com/heimdal/heimdal/pull/801#issuecomment-894873731,"@cryptomilk made this change in Samba which I would like to inquire about getting this upstream.
I see 6dd66df adding this to libkrb5-exports.def.in but I don't understand how this and the version-script.map files interact.
The function krb5_get_init_creds_opt_get_error() is deprecated and
krb5_init_creds_init() and krb5_init_creds_get_error() should be used
now.
Signed-off-by: Andreas Schneider asn@samba.org
Reviewed-by: Andrew Bartlett abartlet@samba.org
(cherry picked from Samba commit e4f82de7716e91a1c512a8c37ca768b591029a4a)",Is this patch against master?,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,801,2021-08-08T23:16:58Z,2021-08-08T23:35:06Z,2021-08-09T00:13:02Z,CLOSED,False,3,0,1,https://github.com/abartlet,Export krb5_init_creds_* functions,1,[],https://github.com/heimdal/heimdal/pull/801,https://github.com/lhoward,4,https://github.com/heimdal/heimdal/pull/801#issuecomment-894873833,"@cryptomilk made this change in Samba which I would like to inquire about getting this upstream.
I see 6dd66df adding this to libkrb5-exports.def.in but I don't understand how this and the version-script.map files interact.
The function krb5_get_init_creds_opt_get_error() is deprecated and
krb5_init_creds_init() and krb5_init_creds_get_error() should be used
now.
Signed-off-by: Andreas Schneider asn@samba.org
Reviewed-by: Andrew Bartlett abartlet@samba.org
(cherry picked from Samba commit e4f82de7716e91a1c512a8c37ca768b591029a4a)","% git grep krb5_init_creds_init version-script.map 
version-script.map:             krb5_init_creds_init;
% git grep krb5_init_creds_get_error version-script.map 
version-script.map:             krb5_init_creds_get_error;
% git grep krb5_init_creds_free version-script.map 
version-script.map:             krb5_init_creds_free;",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,801,2021-08-08T23:16:58Z,2021-08-08T23:35:06Z,2021-08-09T00:13:02Z,CLOSED,False,3,0,1,https://github.com/abartlet,Export krb5_init_creds_* functions,1,[],https://github.com/heimdal/heimdal/pull/801,https://github.com/abartlet,5,https://github.com/heimdal/heimdal/pull/801#issuecomment-894879463,"@cryptomilk made this change in Samba which I would like to inquire about getting this upstream.
I see 6dd66df adding this to libkrb5-exports.def.in but I don't understand how this and the version-script.map files interact.
The function krb5_get_init_creds_opt_get_error() is deprecated and
krb5_init_creds_init() and krb5_init_creds_get_error() should be used
now.
Signed-off-by: Andreas Schneider asn@samba.org
Reviewed-by: Andrew Bartlett abartlet@samba.org
(cherry picked from Samba commit e4f82de7716e91a1c512a8c37ca768b591029a4a)","Sorry about that, due diligence fail, it got in with bebb507
The perils of 10 years of rebase and divergence.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,801,2021-08-08T23:16:58Z,2021-08-08T23:35:06Z,2021-08-09T00:13:02Z,CLOSED,False,3,0,1,https://github.com/abartlet,Export krb5_init_creds_* functions,1,[],https://github.com/heimdal/heimdal/pull/801,https://github.com/lhoward,6,https://github.com/heimdal/heimdal/pull/801#issuecomment-894879586,"@cryptomilk made this change in Samba which I would like to inquire about getting this upstream.
I see 6dd66df adding this to libkrb5-exports.def.in but I don't understand how this and the version-script.map files interact.
The function krb5_get_init_creds_opt_get_error() is deprecated and
krb5_init_creds_init() and krb5_init_creds_get_error() should be used
now.
Signed-off-by: Andreas Schneider asn@samba.org
Reviewed-by: Andrew Bartlett abartlet@samba.org
(cherry picked from Samba commit e4f82de7716e91a1c512a8c37ca768b591029a4a)",I wish we had the Apple stuff integrated :(,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,802,2021-08-08T23:50:47Z,2021-08-08T23:58:58Z,2021-08-08T23:58:58Z,MERGED,True,0,2,1,https://github.com/abartlet,Allow _gss_string_to_oid() without HAVE_DLOPEN,1,[],https://github.com/heimdal/heimdal/pull/802,https://github.com/abartlet,1,https://github.com/heimdal/heimdal/pull/802,"This function became used outside the protection of
HAVE_DLOPEN (which Samba sets) with:
commit 5966c00
Author: Luke Howard lukeh@padl.com
Date:   Sun Aug 8 10:34:28 2021 +1000
gss: add gss_mg_name_to_oid internal API

Add a new function for future internal use, gss_mg_name_to_oid(), which takes
either a dot-separated OID or a ""short"" mechanism name (such as
""sanon-x25519""), and returns a mechanism OID.

Signed-off-by: Andrew Bartlett abartlet@samba.org","This function became used outside the protection of
HAVE_DLOPEN (which Samba sets) with:
commit 5966c00
Author: Luke Howard lukeh@padl.com
Date:   Sun Aug 8 10:34:28 2021 +1000
gss: add gss_mg_name_to_oid internal API

Add a new function for future internal use, gss_mg_name_to_oid(), which takes
either a dot-separated OID or a ""short"" mechanism name (such as
""sanon-x25519""), and returns a mechanism OID.

Signed-off-by: Andrew Bartlett abartlet@samba.org",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,804,2021-08-09T01:57:21Z,2022-01-02T10:53:43Z,2022-01-02T11:03:45Z,CLOSED,False,10,1,3,https://github.com/abartlet,kdc: make it possible to disable the principal based referral detection,1,[],https://github.com/heimdal/heimdal/pull/804,https://github.com/abartlet,1,https://github.com/heimdal/heimdal/pull/804,"This, from @metze-samba and @cryptomilk is the KDC side of Samba BUG: https://bugzilla.samba.org/show_bug.cgi?id=12554 and I suspect is significantly so that we can both match Windows and trigger the behaviour we see there in the tests of our client code.
Either way, I'm trying to upstream as much as we can of our lorikeet-heimdal patches, at least for comment.
I know this will collide/conflict with #787 but I'll happily rebase that if this lands first, but this was the location that was requested for weird compatibility flags for Samba.","This, from @metze-samba and @cryptomilk is the KDC side of Samba BUG: https://bugzilla.samba.org/show_bug.cgi?id=12554 and I suspect is significantly so that we can both match Windows and trigger the behaviour we see there in the tests of our client code.
Either way, I'm trying to upstream as much as we can of our lorikeet-heimdal patches, at least for comment.
I know this will collide/conflict with #787 but I'll happily rebase that if this lands first, but this was the location that was requested for weird compatibility flags for Samba.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,804,2021-08-09T01:57:21Z,2022-01-02T10:53:43Z,2022-01-02T11:03:45Z,CLOSED,False,10,1,3,https://github.com/abartlet,kdc: make it possible to disable the principal based referral detection,1,[],https://github.com/heimdal/heimdal/pull/804,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/804#issuecomment-895748099,"This, from @metze-samba and @cryptomilk is the KDC side of Samba BUG: https://bugzilla.samba.org/show_bug.cgi?id=12554 and I suspect is significantly so that we can both match Windows and trigger the behaviour we see there in the tests of our client code.
Either way, I'm trying to upstream as much as we can of our lorikeet-heimdal patches, at least for comment.
I know this will collide/conflict with #787 but I'll happily rebase that if this lands first, but this was the location that was requested for weird compatibility flags for Samba.","I'm a bit iffy about this one. Rather than yet another knob that disables a chunk of KDC-side functionality, I think it would be cleaner to perhaps have a callback interface Samba could implement (the default implementation for which would be the existing KDC one). If the Samba one wants to be a NOOP, fine.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,804,2021-08-09T01:57:21Z,2022-01-02T10:53:43Z,2022-01-02T11:03:45Z,CLOSED,False,10,1,3,https://github.com/abartlet,kdc: make it possible to disable the principal based referral detection,1,[],https://github.com/heimdal/heimdal/pull/804,https://github.com/lhoward,3,https://github.com/heimdal/heimdal/pull/804#issuecomment-1003696215,"This, from @metze-samba and @cryptomilk is the KDC side of Samba BUG: https://bugzilla.samba.org/show_bug.cgi?id=12554 and I suspect is significantly so that we can both match Windows and trigger the behaviour we see there in the tests of our client code.
Either way, I'm trying to upstream as much as we can of our lorikeet-heimdal patches, at least for comment.
I know this will collide/conflict with #787 but I'll happily rebase that if this lands first, but this was the location that was requested for weird compatibility flags for Samba.","Also, does this mean this code can be removed?
    else if (server->name.name_string.len == 3) {
        /*
          This is used to give referrals for the
          E3514235-4B06-11D1-AB04-00C04FC2DCD2/NTDSGUID/DNSDOMAIN
          SPN form, which is used for inter-domain communication in AD
         */
        name = server->name.name_string.val[2];
        kdc_log(context, config, 4, ""Giving 3 part referral for %s"", name);
        *realms = malloc(sizeof(char *)*2);
        if (*realms == NULL) {
            krb5_set_error_message(context, ENOMEM, N_(""malloc: out of memory"", """"));
            return FALSE;
        }
        (*realms)[0] = strdup(name);
        (*realms)[1] = NULL;
        return TRUE;",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,804,2021-08-09T01:57:21Z,2022-01-02T10:53:43Z,2022-01-02T11:03:45Z,CLOSED,False,10,1,3,https://github.com/abartlet,kdc: make it possible to disable the principal based referral detection,1,[],https://github.com/heimdal/heimdal/pull/804,https://github.com/lhoward,4,https://github.com/heimdal/heimdal/pull/804#issuecomment-1003697046,"This, from @metze-samba and @cryptomilk is the KDC side of Samba BUG: https://bugzilla.samba.org/show_bug.cgi?id=12554 and I suspect is significantly so that we can both match Windows and trigger the behaviour we see there in the tests of our client code.
Either way, I'm trying to upstream as much as we can of our lorikeet-heimdal patches, at least for comment.
I know this will collide/conflict with #787 but I'll happily rebase that if this lands first, but this was the location that was requested for weird compatibility flags for Samba.",Closing: I believe #917 will be a better solution. You can implement the referral policy callback to simply return KRB5KDC_ERR_S_PRINCIPAL_UNKNOWN.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,805,2021-08-09T11:57:02Z,2021-12-13T22:03:42Z,2021-12-13T22:03:42Z,MERGED,True,4013,2126,23,https://github.com/lhoward,Import AS/TGS client from Apple Heimdal-597.121.1,6,[],https://github.com/heimdal/heimdal/pull/805,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/805,"This PR extends #796 with a merge of Apple's Heimdal open source drop 597.121.1.
Clearly it would have been better to build GSS pre-authentication on top of this, but, here we are. I would suggest reviewing and integrating #796 and #797 first.
The tests pass.
There is a lot of churn but, I have minimised it somewhat by not aggressively integrating some of the Apple features (e.g. completely rewritten TGS client). I am in the process of carefully comparing with the original to check for regressions.
The advantages of integrating this are:

support for PA-ENC-CHALLENGE
FAST reply key strengthening
FAST support in TGS-REQ path (including for errors which the Apple code did not implement), both in libkrb5 and KDC
refactored pre-authentication client that makes adding new mechanisms easy
allow KDC hostname and AD site name to be pinned in get_[_init]creds() APIs

I've also fixed a bunch of bugs in the Apple code, e.g. it would not optimistic PA mechanisms, it could crash with Win2K PKINIT responses, etc.","This PR extends #796 with a merge of Apple's Heimdal open source drop 597.121.1.
Clearly it would have been better to build GSS pre-authentication on top of this, but, here we are. I would suggest reviewing and integrating #796 and #797 first.
The tests pass.
There is a lot of churn but, I have minimised it somewhat by not aggressively integrating some of the Apple features (e.g. completely rewritten TGS client). I am in the process of carefully comparing with the original to check for regressions.
The advantages of integrating this are:

support for PA-ENC-CHALLENGE
FAST reply key strengthening
FAST support in TGS-REQ path (including for errors which the Apple code did not implement), both in libkrb5 and KDC
refactored pre-authentication client that makes adding new mechanisms easy
allow KDC hostname and AD site name to be pinned in get_[_init]creds() APIs

I've also fixed a bunch of bugs in the Apple code, e.g. it would not optimistic PA mechanisms, it could crash with Win2K PKINIT responses, etc.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,805,2021-08-09T11:57:02Z,2021-12-13T22:03:42Z,2021-12-13T22:03:42Z,MERGED,True,4013,2126,23,https://github.com/lhoward,Import AS/TGS client from Apple Heimdal-597.121.1,6,[],https://github.com/heimdal/heimdal/pull/805,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/805#issuecomment-895163998,"This PR extends #796 with a merge of Apple's Heimdal open source drop 597.121.1.
Clearly it would have been better to build GSS pre-authentication on top of this, but, here we are. I would suggest reviewing and integrating #796 and #797 first.
The tests pass.
There is a lot of churn but, I have minimised it somewhat by not aggressively integrating some of the Apple features (e.g. completely rewritten TGS client). I am in the process of carefully comparing with the original to check for regressions.
The advantages of integrating this are:

support for PA-ENC-CHALLENGE
FAST reply key strengthening
FAST support in TGS-REQ path (including for errors which the Apple code did not implement), both in libkrb5 and KDC
refactored pre-authentication client that makes adding new mechanisms easy
allow KDC hostname and AD site name to be pinned in get_[_init]creds() APIs

I've also fixed a bunch of bugs in the Apple code, e.g. it would not optimistic PA mechanisms, it could crash with Win2K PKINIT responses, etc.","TODO: Apple code uses separate fast cookie key per-realm, which prevents cross-realm cookie replays on KDCs that host multiple realms. Perhaps a simpler solution (that would not require upgrading HDBs) would be to salt the cookie key with the realm. Or, given they should not change in an AS-REQ, the client and server name, and realm.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,805,2021-08-09T11:57:02Z,2021-12-13T22:03:42Z,2021-12-13T22:03:42Z,MERGED,True,4013,2126,23,https://github.com/lhoward,Import AS/TGS client from Apple Heimdal-597.121.1,6,[],https://github.com/heimdal/heimdal/pull/805,https://github.com/lhoward,3,https://github.com/heimdal/heimdal/pull/805#issuecomment-895206015,"This PR extends #796 with a merge of Apple's Heimdal open source drop 597.121.1.
Clearly it would have been better to build GSS pre-authentication on top of this, but, here we are. I would suggest reviewing and integrating #796 and #797 first.
The tests pass.
There is a lot of churn but, I have minimised it somewhat by not aggressively integrating some of the Apple features (e.g. completely rewritten TGS client). I am in the process of carefully comparing with the original to check for regressions.
The advantages of integrating this are:

support for PA-ENC-CHALLENGE
FAST reply key strengthening
FAST support in TGS-REQ path (including for errors which the Apple code did not implement), both in libkrb5 and KDC
refactored pre-authentication client that makes adding new mechanisms easy
allow KDC hostname and AD site name to be pinned in get_[_init]creds() APIs

I've also fixed a bunch of bugs in the Apple code, e.g. it would not optimistic PA mechanisms, it could crash with Win2K PKINIT responses, etc.","It will likely be easier to review lib/krb5/{init_creds_pw.c,get_cred.c} themselves rather than the diffs.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,805,2021-08-09T11:57:02Z,2021-12-13T22:03:42Z,2021-12-13T22:03:42Z,MERGED,True,4013,2126,23,https://github.com/lhoward,Import AS/TGS client from Apple Heimdal-597.121.1,6,[],https://github.com/heimdal/heimdal/pull/805,https://github.com/lhoward,4,https://github.com/heimdal/heimdal/pull/805#issuecomment-895213455,"This PR extends #796 with a merge of Apple's Heimdal open source drop 597.121.1.
Clearly it would have been better to build GSS pre-authentication on top of this, but, here we are. I would suggest reviewing and integrating #796 and #797 first.
The tests pass.
There is a lot of churn but, I have minimised it somewhat by not aggressively integrating some of the Apple features (e.g. completely rewritten TGS client). I am in the process of carefully comparing with the original to check for regressions.
The advantages of integrating this are:

support for PA-ENC-CHALLENGE
FAST reply key strengthening
FAST support in TGS-REQ path (including for errors which the Apple code did not implement), both in libkrb5 and KDC
refactored pre-authentication client that makes adding new mechanisms easy
allow KDC hostname and AD site name to be pinned in get_[_init]creds() APIs

I've also fixed a bunch of bugs in the Apple code, e.g. it would not optimistic PA mechanisms, it could crash with Win2K PKINIT responses, etc.",@abartlet if you're adventurous you could check this branch against Samba. It gets you FAST TGS support.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,805,2021-08-09T11:57:02Z,2021-12-13T22:03:42Z,2021-12-13T22:03:42Z,MERGED,True,4013,2126,23,https://github.com/lhoward,Import AS/TGS client from Apple Heimdal-597.121.1,6,[],https://github.com/heimdal/heimdal/pull/805,https://github.com/abartlet,5,https://github.com/heimdal/heimdal/pull/805#issuecomment-895649601,"This PR extends #796 with a merge of Apple's Heimdal open source drop 597.121.1.
Clearly it would have been better to build GSS pre-authentication on top of this, but, here we are. I would suggest reviewing and integrating #796 and #797 first.
The tests pass.
There is a lot of churn but, I have minimised it somewhat by not aggressively integrating some of the Apple features (e.g. completely rewritten TGS client). I am in the process of carefully comparing with the original to check for regressions.
The advantages of integrating this are:

support for PA-ENC-CHALLENGE
FAST reply key strengthening
FAST support in TGS-REQ path (including for errors which the Apple code did not implement), both in libkrb5 and KDC
refactored pre-authentication client that makes adding new mechanisms easy
allow KDC hostname and AD site name to be pinned in get_[_init]creds() APIs

I've also fixed a bunch of bugs in the Apple code, e.g. it would not optimistic PA mechanisms, it could crash with Win2K PKINIT responses, etc.","Thanks.  I do recall grabbing some of Apple's FAST code when I was doing FAST work for Heimdal/Samba in 2018, so it is good to see a bigger sync up.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,805,2021-08-09T11:57:02Z,2021-12-13T22:03:42Z,2021-12-13T22:03:42Z,MERGED,True,4013,2126,23,https://github.com/lhoward,Import AS/TGS client from Apple Heimdal-597.121.1,6,[],https://github.com/heimdal/heimdal/pull/805,https://github.com/abartlet,6,https://github.com/heimdal/heimdal/pull/805#issuecomment-895671932,"This PR extends #796 with a merge of Apple's Heimdal open source drop 597.121.1.
Clearly it would have been better to build GSS pre-authentication on top of this, but, here we are. I would suggest reviewing and integrating #796 and #797 first.
The tests pass.
There is a lot of churn but, I have minimised it somewhat by not aggressively integrating some of the Apple features (e.g. completely rewritten TGS client). I am in the process of carefully comparing with the original to check for regressions.
The advantages of integrating this are:

support for PA-ENC-CHALLENGE
FAST reply key strengthening
FAST support in TGS-REQ path (including for errors which the Apple code did not implement), both in libkrb5 and KDC
refactored pre-authentication client that makes adding new mechanisms easy
allow KDC hostname and AD site name to be pinned in get_[_init]creds() APIs

I've also fixed a bunch of bugs in the Apple code, e.g. it would not optimistic PA mechanisms, it could crash with Win2K PKINIT responses, etc.",@josephsutton1 we should run our new FAST test against this branch and check how it matches up.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,805,2021-08-09T11:57:02Z,2021-12-13T22:03:42Z,2021-12-13T22:03:42Z,MERGED,True,4013,2126,23,https://github.com/lhoward,Import AS/TGS client from Apple Heimdal-597.121.1,6,[],https://github.com/heimdal/heimdal/pull/805,https://github.com/lhoward,7,https://github.com/heimdal/heimdal/pull/805#issuecomment-895672424,"This PR extends #796 with a merge of Apple's Heimdal open source drop 597.121.1.
Clearly it would have been better to build GSS pre-authentication on top of this, but, here we are. I would suggest reviewing and integrating #796 and #797 first.
The tests pass.
There is a lot of churn but, I have minimised it somewhat by not aggressively integrating some of the Apple features (e.g. completely rewritten TGS client). I am in the process of carefully comparing with the original to check for regressions.
The advantages of integrating this are:

support for PA-ENC-CHALLENGE
FAST reply key strengthening
FAST support in TGS-REQ path (including for errors which the Apple code did not implement), both in libkrb5 and KDC
refactored pre-authentication client that makes adding new mechanisms easy
allow KDC hostname and AD site name to be pinned in get_[_init]creds() APIs

I've also fixed a bunch of bugs in the Apple code, e.g. it would not optimistic PA mechanisms, it could crash with Win2K PKINIT responses, etc.",That would be great. I have only tested against Apple's own implementation (that ships with macOS). Not yet with MIT.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,805,2021-08-09T11:57:02Z,2021-12-13T22:03:42Z,2021-12-13T22:03:42Z,MERGED,True,4013,2126,23,https://github.com/lhoward,Import AS/TGS client from Apple Heimdal-597.121.1,6,[],https://github.com/heimdal/heimdal/pull/805,https://github.com/abartlet,8,https://github.com/heimdal/heimdal/pull/805#issuecomment-906105051,"This PR extends #796 with a merge of Apple's Heimdal open source drop 597.121.1.
Clearly it would have been better to build GSS pre-authentication on top of this, but, here we are. I would suggest reviewing and integrating #796 and #797 first.
The tests pass.
There is a lot of churn but, I have minimised it somewhat by not aggressively integrating some of the Apple features (e.g. completely rewritten TGS client). I am in the process of carefully comparing with the original to check for regressions.
The advantages of integrating this are:

support for PA-ENC-CHALLENGE
FAST reply key strengthening
FAST support in TGS-REQ path (including for errors which the Apple code did not implement), both in libkrb5 and KDC
refactored pre-authentication client that makes adding new mechanisms easy
allow KDC hostname and AD site name to be pinned in get_[_init]creds() APIs

I've also fixed a bunch of bugs in the Apple code, e.g. it would not optimistic PA mechanisms, it could crash with Win2K PKINIT responses, etc.","I had hoped to drop this into Samba's tree to test the FAST stuff for you, and that is still my eventual aim, but it conflicts with our changes at the moment.  Our current lorikeet-heimdal is at https://gitlab.com/samba-team/devel/lorikeet-heimdal/-/commits/lorikeet-heimdal-202108260003/ and this has been imported into samba at https://gitlab.com/samba-team/samba/-/merge_requests/2014 and https://gitlab.com/samba-team/devel/samba/-/tree/abartlet/metze-heimdal-import-try-2
Why do I mention this?  Just so you know I'm still keen to help, and while swamped with some other matters I did a rebase of lorikeet-heimdal today in the hope this would be a little closer, but sadly not quite close enough.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,805,2021-08-09T11:57:02Z,2021-12-13T22:03:42Z,2021-12-13T22:03:42Z,MERGED,True,4013,2126,23,https://github.com/lhoward,Import AS/TGS client from Apple Heimdal-597.121.1,6,[],https://github.com/heimdal/heimdal/pull/805,https://github.com/lhoward,9,https://github.com/heimdal/heimdal/pull/805#issuecomment-906105850,"This PR extends #796 with a merge of Apple's Heimdal open source drop 597.121.1.
Clearly it would have been better to build GSS pre-authentication on top of this, but, here we are. I would suggest reviewing and integrating #796 and #797 first.
The tests pass.
There is a lot of churn but, I have minimised it somewhat by not aggressively integrating some of the Apple features (e.g. completely rewritten TGS client). I am in the process of carefully comparing with the original to check for regressions.
The advantages of integrating this are:

support for PA-ENC-CHALLENGE
FAST reply key strengthening
FAST support in TGS-REQ path (including for errors which the Apple code did not implement), both in libkrb5 and KDC
refactored pre-authentication client that makes adding new mechanisms easy
allow KDC hostname and AD site name to be pinned in get_[_init]creds() APIs

I've also fixed a bunch of bugs in the Apple code, e.g. it would not optimistic PA mechanisms, it could crash with Win2K PKINIT responses, etc.","Thanks Andrew. Nico is reviewing it, hopefully it will be in master soon. I've tested against Windows and it works.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,805,2021-08-09T11:57:02Z,2021-12-13T22:03:42Z,2021-12-13T22:03:42Z,MERGED,True,4013,2126,23,https://github.com/lhoward,Import AS/TGS client from Apple Heimdal-597.121.1,6,[],https://github.com/heimdal/heimdal/pull/805,https://github.com/abartlet,10,https://github.com/heimdal/heimdal/pull/805#issuecomment-906775152,"This PR extends #796 with a merge of Apple's Heimdal open source drop 597.121.1.
Clearly it would have been better to build GSS pre-authentication on top of this, but, here we are. I would suggest reviewing and integrating #796 and #797 first.
The tests pass.
There is a lot of churn but, I have minimised it somewhat by not aggressively integrating some of the Apple features (e.g. completely rewritten TGS client). I am in the process of carefully comparing with the original to check for regressions.
The advantages of integrating this are:

support for PA-ENC-CHALLENGE
FAST reply key strengthening
FAST support in TGS-REQ path (including for errors which the Apple code did not implement), both in libkrb5 and KDC
refactored pre-authentication client that makes adding new mechanisms easy
allow KDC hostname and AD site name to be pinned in get_[_init]creds() APIs

I've also fixed a bunch of bugs in the Apple code, e.g. it would not optimistic PA mechanisms, it could crash with Win2K PKINIT responses, etc.","I realised I forgot to mention one bit of context, in particular, what I was aiming at was to be able to run this (now merged) MR containing an extensive FAST testsuite against Heimdal.
https://gitlab.com/samba-team/samba/-/merge_requests/2095",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,805,2021-08-09T11:57:02Z,2021-12-13T22:03:42Z,2021-12-13T22:03:42Z,MERGED,True,4013,2126,23,https://github.com/lhoward,Import AS/TGS client from Apple Heimdal-597.121.1,6,[],https://github.com/heimdal/heimdal/pull/805,https://github.com/lhoward,11,https://github.com/heimdal/heimdal/pull/805#issuecomment-906807878,"This PR extends #796 with a merge of Apple's Heimdal open source drop 597.121.1.
Clearly it would have been better to build GSS pre-authentication on top of this, but, here we are. I would suggest reviewing and integrating #796 and #797 first.
The tests pass.
There is a lot of churn but, I have minimised it somewhat by not aggressively integrating some of the Apple features (e.g. completely rewritten TGS client). I am in the process of carefully comparing with the original to check for regressions.
The advantages of integrating this are:

support for PA-ENC-CHALLENGE
FAST reply key strengthening
FAST support in TGS-REQ path (including for errors which the Apple code did not implement), both in libkrb5 and KDC
refactored pre-authentication client that makes adding new mechanisms easy
allow KDC hostname and AD site name to be pinned in get_[_init]creds() APIs

I've also fixed a bunch of bugs in the Apple code, e.g. it would not optimistic PA mechanisms, it could crash with Win2K PKINIT responses, etc.","Thanks @abartlet, will check.
BTW, does Samba support exchanging a PAC-less TGT from a RODC for a PAC-ful one from a RWDC? Not sure if this is just how RODCs work, or something separate. My use case involves pretending to be a RODC KDC (just the KDC) to issue partial TGTs that Windows will exchange for full ones. (See here.)",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,805,2021-08-09T11:57:02Z,2021-12-13T22:03:42Z,2021-12-13T22:03:42Z,MERGED,True,4013,2126,23,https://github.com/lhoward,Import AS/TGS client from Apple Heimdal-597.121.1,6,[],https://github.com/heimdal/heimdal/pull/805,https://github.com/abartlet,12,https://github.com/heimdal/heimdal/pull/805#issuecomment-945203416,"This PR extends #796 with a merge of Apple's Heimdal open source drop 597.121.1.
Clearly it would have been better to build GSS pre-authentication on top of this, but, here we are. I would suggest reviewing and integrating #796 and #797 first.
The tests pass.
There is a lot of churn but, I have minimised it somewhat by not aggressively integrating some of the Apple features (e.g. completely rewritten TGS client). I am in the process of carefully comparing with the original to check for regressions.
The advantages of integrating this are:

support for PA-ENC-CHALLENGE
FAST reply key strengthening
FAST support in TGS-REQ path (including for errors which the Apple code did not implement), both in libkrb5 and KDC
refactored pre-authentication client that makes adding new mechanisms easy
allow KDC hostname and AD site name to be pinned in get_[_init]creds() APIs

I've also fixed a bunch of bugs in the Apple code, e.g. it would not optimistic PA mechanisms, it could crash with Win2K PKINIT responses, etc.","As someone involved in a similar exercise between Heimdal and Samba I
would minimise diffs were possible.

Andrew
-- 
Andrew Bartlett (he/him)       https://samba.org/~abartlet/
Samba Team Member (since 2001) https://samba.org
Samba Team Lead, Catalyst IT   https://catalyst.net.nz/services/samba

Samba Development and Support, Catalyst IT - Expert Open Source
Solutions",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,805,2021-08-09T11:57:02Z,2021-12-13T22:03:42Z,2021-12-13T22:03:42Z,MERGED,True,4013,2126,23,https://github.com/lhoward,Import AS/TGS client from Apple Heimdal-597.121.1,6,[],https://github.com/heimdal/heimdal/pull/805,https://github.com/josephsutton1,13,https://github.com/heimdal/heimdal/pull/805#issuecomment-971161731,"This PR extends #796 with a merge of Apple's Heimdal open source drop 597.121.1.
Clearly it would have been better to build GSS pre-authentication on top of this, but, here we are. I would suggest reviewing and integrating #796 and #797 first.
The tests pass.
There is a lot of churn but, I have minimised it somewhat by not aggressively integrating some of the Apple features (e.g. completely rewritten TGS client). I am in the process of carefully comparing with the original to check for regressions.
The advantages of integrating this are:

support for PA-ENC-CHALLENGE
FAST reply key strengthening
FAST support in TGS-REQ path (including for errors which the Apple code did not implement), both in libkrb5 and KDC
refactored pre-authentication client that makes adding new mechanisms easy
allow KDC hostname and AD site name to be pinned in get_[_init]creds() APIs

I've also fixed a bunch of bugs in the Apple code, e.g. it would not optimistic PA mechanisms, it could crash with Win2K PKINIT responses, etc.","I've been running Samba's FAST tests against these changes and other than a few minor differences with error codes and padata in error replies, the results have been good so far.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,805,2021-08-09T11:57:02Z,2021-12-13T22:03:42Z,2021-12-13T22:03:42Z,MERGED,True,4013,2126,23,https://github.com/lhoward,Import AS/TGS client from Apple Heimdal-597.121.1,6,[],https://github.com/heimdal/heimdal/pull/805,https://github.com/lhoward,14,https://github.com/heimdal/heimdal/pull/805#issuecomment-971163911,"This PR extends #796 with a merge of Apple's Heimdal open source drop 597.121.1.
Clearly it would have been better to build GSS pre-authentication on top of this, but, here we are. I would suggest reviewing and integrating #796 and #797 first.
The tests pass.
There is a lot of churn but, I have minimised it somewhat by not aggressively integrating some of the Apple features (e.g. completely rewritten TGS client). I am in the process of carefully comparing with the original to check for regressions.
The advantages of integrating this are:

support for PA-ENC-CHALLENGE
FAST reply key strengthening
FAST support in TGS-REQ path (including for errors which the Apple code did not implement), both in libkrb5 and KDC
refactored pre-authentication client that makes adding new mechanisms easy
allow KDC hostname and AD site name to be pinned in get_[_init]creds() APIs

I've also fixed a bunch of bugs in the Apple code, e.g. it would not optimistic PA mechanisms, it could crash with Win2K PKINIT responses, etc.","I've been running Samba's FAST tests against these changes and other than a few minor differences with error codes and padata in error replies, the results have been good so far.

Good to hear! If there are error code changes you think we should revert, let me know. I guess Love probably did test this against Windows, it's the classic issue where features have been sitting in the Apple code for years but remained un-merged (thanks to the large divergence since 2010).",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,805,2021-08-09T11:57:02Z,2021-12-13T22:03:42Z,2021-12-13T22:03:42Z,MERGED,True,4013,2126,23,https://github.com/lhoward,Import AS/TGS client from Apple Heimdal-597.121.1,6,[],https://github.com/heimdal/heimdal/pull/805,https://github.com/abartlet,15,https://github.com/heimdal/heimdal/pull/805#issuecomment-978520900,"This PR extends #796 with a merge of Apple's Heimdal open source drop 597.121.1.
Clearly it would have been better to build GSS pre-authentication on top of this, but, here we are. I would suggest reviewing and integrating #796 and #797 first.
The tests pass.
There is a lot of churn but, I have minimised it somewhat by not aggressively integrating some of the Apple features (e.g. completely rewritten TGS client). I am in the process of carefully comparing with the original to check for regressions.
The advantages of integrating this are:

support for PA-ENC-CHALLENGE
FAST reply key strengthening
FAST support in TGS-REQ path (including for errors which the Apple code did not implement), both in libkrb5 and KDC
refactored pre-authentication client that makes adding new mechanisms easy
allow KDC hostname and AD site name to be pinned in get_[_init]creds() APIs

I've also fixed a bunch of bugs in the Apple code, e.g. it would not optimistic PA mechanisms, it could crash with Win2K PKINIT responses, etc.","Just wondering, what more do you think is needed before this is merged?
The reason is that I'm likely to include this in Samba regardless, so want to know if there are outstanding issues other than time.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,805,2021-08-09T11:57:02Z,2021-12-13T22:03:42Z,2021-12-13T22:03:42Z,MERGED,True,4013,2126,23,https://github.com/lhoward,Import AS/TGS client from Apple Heimdal-597.121.1,6,[],https://github.com/heimdal/heimdal/pull/805,https://github.com/lhoward,16,https://github.com/heimdal/heimdal/pull/805#issuecomment-978524890,"This PR extends #796 with a merge of Apple's Heimdal open source drop 597.121.1.
Clearly it would have been better to build GSS pre-authentication on top of this, but, here we are. I would suggest reviewing and integrating #796 and #797 first.
The tests pass.
There is a lot of churn but, I have minimised it somewhat by not aggressively integrating some of the Apple features (e.g. completely rewritten TGS client). I am in the process of carefully comparing with the original to check for regressions.
The advantages of integrating this are:

support for PA-ENC-CHALLENGE
FAST reply key strengthening
FAST support in TGS-REQ path (including for errors which the Apple code did not implement), both in libkrb5 and KDC
refactored pre-authentication client that makes adding new mechanisms easy
allow KDC hostname and AD site name to be pinned in get_[_init]creds() APIs

I've also fixed a bunch of bugs in the Apple code, e.g. it would not optimistic PA mechanisms, it could crash with Win2K PKINIT responses, etc.","@nicowilliams was going to review it but if he doesn’t have time, do you want @abartlet?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,805,2021-08-09T11:57:02Z,2021-12-13T22:03:42Z,2021-12-13T22:03:42Z,MERGED,True,4013,2126,23,https://github.com/lhoward,Import AS/TGS client from Apple Heimdal-597.121.1,6,[],https://github.com/heimdal/heimdal/pull/805,https://github.com/abartlet,17,https://github.com/heimdal/heimdal/pull/805#issuecomment-978527690,"This PR extends #796 with a merge of Apple's Heimdal open source drop 597.121.1.
Clearly it would have been better to build GSS pre-authentication on top of this, but, here we are. I would suggest reviewing and integrating #796 and #797 first.
The tests pass.
There is a lot of churn but, I have minimised it somewhat by not aggressively integrating some of the Apple features (e.g. completely rewritten TGS client). I am in the process of carefully comparing with the original to check for regressions.
The advantages of integrating this are:

support for PA-ENC-CHALLENGE
FAST reply key strengthening
FAST support in TGS-REQ path (including for errors which the Apple code did not implement), both in libkrb5 and KDC
refactored pre-authentication client that makes adding new mechanisms easy
allow KDC hostname and AD site name to be pinned in get_[_init]creds() APIs

I've also fixed a bunch of bugs in the Apple code, e.g. it would not optimistic PA mechanisms, it could crash with Win2K PKINIT responses, etc.","@nicowilliams was going to review it but if he doesn’t have time, do you want @abartlet?

Sure, I'll have a go with @josephsutton1",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,805,2021-08-09T11:57:02Z,2021-12-13T22:03:42Z,2021-12-13T22:03:42Z,MERGED,True,4013,2126,23,https://github.com/lhoward,Import AS/TGS client from Apple Heimdal-597.121.1,6,[],https://github.com/heimdal/heimdal/pull/805,https://github.com/abartlet,18,https://github.com/heimdal/heimdal/pull/805#issuecomment-981309370,"This PR extends #796 with a merge of Apple's Heimdal open source drop 597.121.1.
Clearly it would have been better to build GSS pre-authentication on top of this, but, here we are. I would suggest reviewing and integrating #796 and #797 first.
The tests pass.
There is a lot of churn but, I have minimised it somewhat by not aggressively integrating some of the Apple features (e.g. completely rewritten TGS client). I am in the process of carefully comparing with the original to check for regressions.
The advantages of integrating this are:

support for PA-ENC-CHALLENGE
FAST reply key strengthening
FAST support in TGS-REQ path (including for errors which the Apple code did not implement), both in libkrb5 and KDC
refactored pre-authentication client that makes adding new mechanisms easy
allow KDC hostname and AD site name to be pinned in get_[_init]creds() APIs

I've also fixed a bunch of bugs in the Apple code, e.g. it would not optimistic PA mechanisms, it could crash with Win2K PKINIT responses, etc.","Thanks for fixing the conflicts.  Sorry for the double-work, I had that already in our lorikeet-heimdal here: https://gitlab.com/samba-team/devel/lorikeet-heimdal/-/commits/lorikeet-heimdal-202111290112-patched/ but couldn't push to your branch and didn't get around to pushing somewhere else.
I still want to review this but it is a bit overwhelming!",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,805,2021-08-09T11:57:02Z,2021-12-13T22:03:42Z,2021-12-13T22:03:42Z,MERGED,True,4013,2126,23,https://github.com/lhoward,Import AS/TGS client from Apple Heimdal-597.121.1,6,[],https://github.com/heimdal/heimdal/pull/805,https://github.com/abartlet,19,https://github.com/heimdal/heimdal/pull/805#issuecomment-981312490,"This PR extends #796 with a merge of Apple's Heimdal open source drop 597.121.1.
Clearly it would have been better to build GSS pre-authentication on top of this, but, here we are. I would suggest reviewing and integrating #796 and #797 first.
The tests pass.
There is a lot of churn but, I have minimised it somewhat by not aggressively integrating some of the Apple features (e.g. completely rewritten TGS client). I am in the process of carefully comparing with the original to check for regressions.
The advantages of integrating this are:

support for PA-ENC-CHALLENGE
FAST reply key strengthening
FAST support in TGS-REQ path (including for errors which the Apple code did not implement), both in libkrb5 and KDC
refactored pre-authentication client that makes adding new mechanisms easy
allow KDC hostname and AD site name to be pinned in get_[_init]creds() APIs

I've also fixed a bunch of bugs in the Apple code, e.g. it would not optimistic PA mechanisms, it could crash with Win2K PKINIT responses, etc.","It there some value in showing that the code is the same or similar to the Apple code, as a code review technique, or did it have to change too much to import?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,805,2021-08-09T11:57:02Z,2021-12-13T22:03:42Z,2021-12-13T22:03:42Z,MERGED,True,4013,2126,23,https://github.com/lhoward,Import AS/TGS client from Apple Heimdal-597.121.1,6,[],https://github.com/heimdal/heimdal/pull/805,https://github.com/lhoward,20,https://github.com/heimdal/heimdal/pull/805#issuecomment-981316291,"This PR extends #796 with a merge of Apple's Heimdal open source drop 597.121.1.
Clearly it would have been better to build GSS pre-authentication on top of this, but, here we are. I would suggest reviewing and integrating #796 and #797 first.
The tests pass.
There is a lot of churn but, I have minimised it somewhat by not aggressively integrating some of the Apple features (e.g. completely rewritten TGS client). I am in the process of carefully comparing with the original to check for regressions.
The advantages of integrating this are:

support for PA-ENC-CHALLENGE
FAST reply key strengthening
FAST support in TGS-REQ path (including for errors which the Apple code did not implement), both in libkrb5 and KDC
refactored pre-authentication client that makes adding new mechanisms easy
allow KDC hostname and AD site name to be pinned in get_[_init]creds() APIs

I've also fixed a bunch of bugs in the Apple code, e.g. it would not optimistic PA mechanisms, it could crash with Win2K PKINIT responses, etc.","I did do some diffs to the Apple code for the files that were changed, when I reviewed it myself. But that was a while ago, it may have diverged a little since then.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,805,2021-08-09T11:57:02Z,2021-12-13T22:03:42Z,2021-12-13T22:03:42Z,MERGED,True,4013,2126,23,https://github.com/lhoward,Import AS/TGS client from Apple Heimdal-597.121.1,6,[],https://github.com/heimdal/heimdal/pull/805,https://github.com/lhoward,21,https://github.com/heimdal/heimdal/pull/805#issuecomment-981530925,"This PR extends #796 with a merge of Apple's Heimdal open source drop 597.121.1.
Clearly it would have been better to build GSS pre-authentication on top of this, but, here we are. I would suggest reviewing and integrating #796 and #797 first.
The tests pass.
There is a lot of churn but, I have minimised it somewhat by not aggressively integrating some of the Apple features (e.g. completely rewritten TGS client). I am in the process of carefully comparing with the original to check for regressions.
The advantages of integrating this are:

support for PA-ENC-CHALLENGE
FAST reply key strengthening
FAST support in TGS-REQ path (including for errors which the Apple code did not implement), both in libkrb5 and KDC
refactored pre-authentication client that makes adding new mechanisms easy
allow KDC hostname and AD site name to be pinned in get_[_init]creds() APIs

I've also fixed a bunch of bugs in the Apple code, e.g. it would not optimistic PA mechanisms, it could crash with Win2K PKINIT responses, etc.",Thanks @abartlet! I'll have a look at your comments over the next few days :),True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,805,2021-08-09T11:57:02Z,2021-12-13T22:03:42Z,2021-12-13T22:03:42Z,MERGED,True,4013,2126,23,https://github.com/lhoward,Import AS/TGS client from Apple Heimdal-597.121.1,6,[],https://github.com/heimdal/heimdal/pull/805,https://github.com/abartlet,22,https://github.com/heimdal/heimdal/pull/805#issuecomment-988397398,"This PR extends #796 with a merge of Apple's Heimdal open source drop 597.121.1.
Clearly it would have been better to build GSS pre-authentication on top of this, but, here we are. I would suggest reviewing and integrating #796 and #797 first.
The tests pass.
There is a lot of churn but, I have minimised it somewhat by not aggressively integrating some of the Apple features (e.g. completely rewritten TGS client). I am in the process of carefully comparing with the original to check for regressions.
The advantages of integrating this are:

support for PA-ENC-CHALLENGE
FAST reply key strengthening
FAST support in TGS-REQ path (including for errors which the Apple code did not implement), both in libkrb5 and KDC
refactored pre-authentication client that makes adding new mechanisms easy
allow KDC hostname and AD site name to be pinned in get_[_init]creds() APIs

I've also fixed a bunch of bugs in the Apple code, e.g. it would not optimistic PA mechanisms, it could crash with Win2K PKINIT responses, etc.",See https://github.com/josephsutton1/heimdal/commits/gss-preauth-apple for a version of this that fixes the current conflicts.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,805,2021-08-09T11:57:02Z,2021-12-13T22:03:42Z,2021-12-13T22:03:42Z,MERGED,True,4013,2126,23,https://github.com/lhoward,Import AS/TGS client from Apple Heimdal-597.121.1,6,[],https://github.com/heimdal/heimdal/pull/805,https://github.com/lhoward,23,https://github.com/heimdal/heimdal/pull/805#issuecomment-988418689,"This PR extends #796 with a merge of Apple's Heimdal open source drop 597.121.1.
Clearly it would have been better to build GSS pre-authentication on top of this, but, here we are. I would suggest reviewing and integrating #796 and #797 first.
The tests pass.
There is a lot of churn but, I have minimised it somewhat by not aggressively integrating some of the Apple features (e.g. completely rewritten TGS client). I am in the process of carefully comparing with the original to check for regressions.
The advantages of integrating this are:

support for PA-ENC-CHALLENGE
FAST reply key strengthening
FAST support in TGS-REQ path (including for errors which the Apple code did not implement), both in libkrb5 and KDC
refactored pre-authentication client that makes adding new mechanisms easy
allow KDC hostname and AD site name to be pinned in get_[_init]creds() APIs

I've also fixed a bunch of bugs in the Apple code, e.g. it would not optimistic PA mechanisms, it could crash with Win2K PKINIT responses, etc.","See https://github.com/josephsutton1/heimdal/commits/gss-preauth-apple for a version of this that fixes the current conflicts.

I'm a bit pressed for time, so I'm just going to check that it's conflict free against master for now.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,805,2021-08-09T11:57:02Z,2021-12-13T22:03:42Z,2021-12-13T22:03:42Z,MERGED,True,4013,2126,23,https://github.com/lhoward,Import AS/TGS client from Apple Heimdal-597.121.1,6,[],https://github.com/heimdal/heimdal/pull/805,https://github.com/abartlet,24,https://github.com/heimdal/heimdal/pull/805#issuecomment-988443475,"This PR extends #796 with a merge of Apple's Heimdal open source drop 597.121.1.
Clearly it would have been better to build GSS pre-authentication on top of this, but, here we are. I would suggest reviewing and integrating #796 and #797 first.
The tests pass.
There is a lot of churn but, I have minimised it somewhat by not aggressively integrating some of the Apple features (e.g. completely rewritten TGS client). I am in the process of carefully comparing with the original to check for regressions.
The advantages of integrating this are:

support for PA-ENC-CHALLENGE
FAST reply key strengthening
FAST support in TGS-REQ path (including for errors which the Apple code did not implement), both in libkrb5 and KDC
refactored pre-authentication client that makes adding new mechanisms easy
allow KDC hostname and AD site name to be pinned in get_[_init]creds() APIs

I've also fixed a bunch of bugs in the Apple code, e.g. it would not optimistic PA mechanisms, it could crash with Win2K PKINIT responses, etc.",Thanks so much.  Let us know if there is anything more that can be done to help this land.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,805,2021-08-09T11:57:02Z,2021-12-13T22:03:42Z,2021-12-13T22:03:42Z,MERGED,True,4013,2126,23,https://github.com/lhoward,Import AS/TGS client from Apple Heimdal-597.121.1,6,[],https://github.com/heimdal/heimdal/pull/805,https://github.com/lhoward,25,https://github.com/heimdal/heimdal/pull/805#issuecomment-988445214,"This PR extends #796 with a merge of Apple's Heimdal open source drop 597.121.1.
Clearly it would have been better to build GSS pre-authentication on top of this, but, here we are. I would suggest reviewing and integrating #796 and #797 first.
The tests pass.
There is a lot of churn but, I have minimised it somewhat by not aggressively integrating some of the Apple features (e.g. completely rewritten TGS client). I am in the process of carefully comparing with the original to check for regressions.
The advantages of integrating this are:

support for PA-ENC-CHALLENGE
FAST reply key strengthening
FAST support in TGS-REQ path (including for errors which the Apple code did not implement), both in libkrb5 and KDC
refactored pre-authentication client that makes adding new mechanisms easy
allow KDC hostname and AD site name to be pinned in get_[_init]creds() APIs

I've also fixed a bunch of bugs in the Apple code, e.g. it would not optimistic PA mechanisms, it could crash with Win2K PKINIT responses, etc.","Thanks so much. Let us know if there is anything more that can be done to help this land.

Still just waiting on @nicowilliams to have a look...",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,805,2021-08-09T11:57:02Z,2021-12-13T22:03:42Z,2021-12-13T22:03:42Z,MERGED,True,4013,2126,23,https://github.com/lhoward,Import AS/TGS client from Apple Heimdal-597.121.1,6,[],https://github.com/heimdal/heimdal/pull/805,https://github.com/abartlet,26,https://github.com/heimdal/heimdal/pull/805#issuecomment-989391052,"This PR extends #796 with a merge of Apple's Heimdal open source drop 597.121.1.
Clearly it would have been better to build GSS pre-authentication on top of this, but, here we are. I would suggest reviewing and integrating #796 and #797 first.
The tests pass.
There is a lot of churn but, I have minimised it somewhat by not aggressively integrating some of the Apple features (e.g. completely rewritten TGS client). I am in the process of carefully comparing with the original to check for regressions.
The advantages of integrating this are:

support for PA-ENC-CHALLENGE
FAST reply key strengthening
FAST support in TGS-REQ path (including for errors which the Apple code did not implement), both in libkrb5 and KDC
refactored pre-authentication client that makes adding new mechanisms easy
allow KDC hostname and AD site name to be pinned in get_[_init]creds() APIs

I've also fixed a bunch of bugs in the Apple code, e.g. it would not optimistic PA mechanisms, it could crash with Win2K PKINIT responses, etc.","Understanding that landing this is hard and requires time that (particularly at this time of year) folks don't have, can I get some advise on patch landing strategy then please?
Should I prepare a version of #864 on master and make this break again or wait till this merges?  I'm just keen to keep things moving but don't want to derail this either.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,805,2021-08-09T11:57:02Z,2021-12-13T22:03:42Z,2021-12-13T22:03:42Z,MERGED,True,4013,2126,23,https://github.com/lhoward,Import AS/TGS client from Apple Heimdal-597.121.1,6,[],https://github.com/heimdal/heimdal/pull/805,https://github.com/lhoward,27,https://github.com/heimdal/heimdal/pull/805#issuecomment-989394718,"This PR extends #796 with a merge of Apple's Heimdal open source drop 597.121.1.
Clearly it would have been better to build GSS pre-authentication on top of this, but, here we are. I would suggest reviewing and integrating #796 and #797 first.
The tests pass.
There is a lot of churn but, I have minimised it somewhat by not aggressively integrating some of the Apple features (e.g. completely rewritten TGS client). I am in the process of carefully comparing with the original to check for regressions.
The advantages of integrating this are:

support for PA-ENC-CHALLENGE
FAST reply key strengthening
FAST support in TGS-REQ path (including for errors which the Apple code did not implement), both in libkrb5 and KDC
refactored pre-authentication client that makes adding new mechanisms easy
allow KDC hostname and AD site name to be pinned in get_[_init]creds() APIs

I've also fixed a bunch of bugs in the Apple code, e.g. it would not optimistic PA mechanisms, it could crash with Win2K PKINIT responses, etc.",@nicowilliams will review this PR in the coming days,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,805,2021-08-09T11:57:02Z,2021-12-13T22:03:42Z,2021-12-13T22:03:42Z,MERGED,True,4013,2126,23,https://github.com/lhoward,Import AS/TGS client from Apple Heimdal-597.121.1,6,[],https://github.com/heimdal/heimdal/pull/805,https://github.com/jaltman,28,https://github.com/heimdal/heimdal/pull/805#issuecomment-989447556,"This PR extends #796 with a merge of Apple's Heimdal open source drop 597.121.1.
Clearly it would have been better to build GSS pre-authentication on top of this, but, here we are. I would suggest reviewing and integrating #796 and #797 first.
The tests pass.
There is a lot of churn but, I have minimised it somewhat by not aggressively integrating some of the Apple features (e.g. completely rewritten TGS client). I am in the process of carefully comparing with the original to check for regressions.
The advantages of integrating this are:

support for PA-ENC-CHALLENGE
FAST reply key strengthening
FAST support in TGS-REQ path (including for errors which the Apple code did not implement), both in libkrb5 and KDC
refactored pre-authentication client that makes adding new mechanisms easy
allow KDC hostname and AD site name to be pinned in get_[_init]creds() APIs

I've also fixed a bunch of bugs in the Apple code, e.g. it would not optimistic PA mechanisms, it could crash with Win2K PKINIT responses, etc.",@abartlet what this PR needs more than anything else are tests.   Can the Samba team write some for the Heimdal test suite?,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,805,2021-08-09T11:57:02Z,2021-12-13T22:03:42Z,2021-12-13T22:03:42Z,MERGED,True,4013,2126,23,https://github.com/lhoward,Import AS/TGS client from Apple Heimdal-597.121.1,6,[],https://github.com/heimdal/heimdal/pull/805,https://github.com/abartlet,29,https://github.com/heimdal/heimdal/pull/805#issuecomment-989457614,"This PR extends #796 with a merge of Apple's Heimdal open source drop 597.121.1.
Clearly it would have been better to build GSS pre-authentication on top of this, but, here we are. I would suggest reviewing and integrating #796 and #797 first.
The tests pass.
There is a lot of churn but, I have minimised it somewhat by not aggressively integrating some of the Apple features (e.g. completely rewritten TGS client). I am in the process of carefully comparing with the original to check for regressions.
The advantages of integrating this are:

support for PA-ENC-CHALLENGE
FAST reply key strengthening
FAST support in TGS-REQ path (including for errors which the Apple code did not implement), both in libkrb5 and KDC
refactored pre-authentication client that makes adding new mechanisms easy
allow KDC hostname and AD site name to be pinned in get_[_init]creds() APIs

I've also fixed a bunch of bugs in the Apple code, e.g. it would not optimistic PA mechanisms, it could crash with Win2K PKINIT responses, etc.","I've been thinking about this after some comments from the RH folks involved in our MIT work also.
It would be really awesome to see the great work by @josephsutton1 reused and helping Heimdal ensure this continues to work long-term.
Sadly our extensive testsuite is currently quite dependent on the Samba test infrastructure (python libs) and AD behaviour.
The closest we come is that many of our tests have a mode that uses an existing account specified by environment variables (rather than being auto-created or downloaded over eg DRSUAPI), but it still assumes this is an AD account it can query over LDAP.
The best we can offer right now is a documented procedure for rebasing the lorikeet-heimdal tree on Heimdal master and importing it into Samba, so you can run our full CI (which has passed against a tree essentially similar to this), and is running against exactly this tree here: https://gitlab.com/samba-team/devel/samba/-/pipelines/425690907
Sorry!",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,805,2021-08-09T11:57:02Z,2021-12-13T22:03:42Z,2021-12-13T22:03:42Z,MERGED,True,4013,2126,23,https://github.com/lhoward,Import AS/TGS client from Apple Heimdal-597.121.1,6,[],https://github.com/heimdal/heimdal/pull/805,https://github.com/abartlet,30,https://github.com/heimdal/heimdal/pull/805#issuecomment-990483737,"This PR extends #796 with a merge of Apple's Heimdal open source drop 597.121.1.
Clearly it would have been better to build GSS pre-authentication on top of this, but, here we are. I would suggest reviewing and integrating #796 and #797 first.
The tests pass.
There is a lot of churn but, I have minimised it somewhat by not aggressively integrating some of the Apple features (e.g. completely rewritten TGS client). I am in the process of carefully comparing with the original to check for regressions.
The advantages of integrating this are:

support for PA-ENC-CHALLENGE
FAST reply key strengthening
FAST support in TGS-REQ path (including for errors which the Apple code did not implement), both in libkrb5 and KDC
refactored pre-authentication client that makes adding new mechanisms easy
allow KDC hostname and AD site name to be pinned in get_[_init]creds() APIs

I've also fixed a bunch of bugs in the Apple code, e.g. it would not optimistic PA mechanisms, it could crash with Win2K PKINIT responses, etc.",@josephsutton1 confirms that current master as a client (eg kinit --fast-armor-cache) fails when use against a Windows DC supporting fast but succeeds when using this PR.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,805,2021-08-09T11:57:02Z,2021-12-13T22:03:42Z,2021-12-13T22:03:42Z,MERGED,True,4013,2126,23,https://github.com/lhoward,Import AS/TGS client from Apple Heimdal-597.121.1,6,[],https://github.com/heimdal/heimdal/pull/805,https://github.com/lhoward,31,https://github.com/heimdal/heimdal/pull/805#issuecomment-990511597,"This PR extends #796 with a merge of Apple's Heimdal open source drop 597.121.1.
Clearly it would have been better to build GSS pre-authentication on top of this, but, here we are. I would suggest reviewing and integrating #796 and #797 first.
The tests pass.
There is a lot of churn but, I have minimised it somewhat by not aggressively integrating some of the Apple features (e.g. completely rewritten TGS client). I am in the process of carefully comparing with the original to check for regressions.
The advantages of integrating this are:

support for PA-ENC-CHALLENGE
FAST reply key strengthening
FAST support in TGS-REQ path (including for errors which the Apple code did not implement), both in libkrb5 and KDC
refactored pre-authentication client that makes adding new mechanisms easy
allow KDC hostname and AD site name to be pinned in get_[_init]creds() APIs

I've also fixed a bunch of bugs in the Apple code, e.g. it would not optimistic PA mechanisms, it could crash with Win2K PKINIT responses, etc.","@josephsutton1 confirms that current master as a client (eg kinit --fast-armor-cache) fails when use against a Windows DC supporting fast but succeeds when using this PR.

Right, if we define ”correctly implementing RFC 6113” to mean disallowing PA-ENC-TIMESTAMP inside FAST then, it's no surprise master fails because the client doesn't support PA-ENCRYPTED-CHALLENGE at all :)
But, we don't want to break our existing clients if we can avoid it...",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,809,2021-08-18T14:23:29Z,2021-09-07T02:50:25Z,2021-09-07T02:50:25Z,MERGED,True,1,1,1,https://github.com/RobCrowston,Check CLANG_FORMAT is executable.,1,[],https://github.com/heimdal/heimdal/pull/809,https://github.com/RobCrowston,1,https://github.com/heimdal/heimdal/pull/809,"If clang-format is not available, AC_CHECK_PROG sets CLANG_FORMAT=no,
not empty string. This results in an error at build time for those
without clang-format installed. Instead check if the program is
executable.","If clang-format is not available, AC_CHECK_PROG sets CLANG_FORMAT=no,
not empty string. This results in an error at build time for those
without clang-format installed. Instead check if the program is
executable.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,809,2021-08-18T14:23:29Z,2021-09-07T02:50:25Z,2021-09-07T02:50:25Z,MERGED,True,1,1,1,https://github.com/RobCrowston,Check CLANG_FORMAT is executable.,1,[],https://github.com/heimdal/heimdal/pull/809,https://github.com/RobCrowston,2,https://github.com/heimdal/heimdal/pull/809#issuecomment-901166893,"If clang-format is not available, AC_CHECK_PROG sets CLANG_FORMAT=no,
not empty string. This results in an error at build time for those
without clang-format installed. Instead check if the program is
executable.","Error is of the form
Making all in asn1
/bin/sh: no: not found
*** Error code 127

Stop.

caused by configure.ac falling back to ""no"" if clang-format isn't found.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,809,2021-08-18T14:23:29Z,2021-09-07T02:50:25Z,2021-09-07T02:50:25Z,MERGED,True,1,1,1,https://github.com/RobCrowston,Check CLANG_FORMAT is executable.,1,[],https://github.com/heimdal/heimdal/pull/809,https://github.com/lhoward,3,https://github.com/heimdal/heimdal/pull/809#issuecomment-913950789,"If clang-format is not available, AC_CHECK_PROG sets CLANG_FORMAT=no,
not empty string. This results in an error at build time for those
without clang-format installed. Instead check if the program is
executable.","Ah, that's what was causing all those annoying messages. Thank you!",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,810,2021-08-20T15:07:03Z,2021-09-07T02:49:19Z,2021-09-07T02:49:19Z,MERGED,True,1,1,1,https://github.com/RobCrowston,Only #include <malloc.h> if it is available.,1,[],https://github.com/heimdal/heimdal/pull/810,https://github.com/RobCrowston,1,https://github.com/heimdal/heimdal/pull/810,"e.g., OpenBSD does not provide this header.","e.g., OpenBSD does not provide this header.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,810,2021-08-20T15:07:03Z,2021-09-07T02:49:19Z,2021-09-07T02:49:19Z,MERGED,True,1,1,1,https://github.com/RobCrowston,Only #include <malloc.h> if it is available.,1,[],https://github.com/heimdal/heimdal/pull/810,https://github.com/RobCrowston,2,https://github.com/heimdal/heimdal/pull/810#issuecomment-902762653,"e.g., OpenBSD does not provide this header.","It's not entirely clear to me why we need this header since we don't seem to reference any non-standard malloc()-related functions in the source code -- and malloc(3) should be provided by <stdlib.h>, per POSIX. This is the least-invasive fix for building on OpenBSD.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,811,2021-08-25T23:27:47Z,2021-08-25T23:31:01Z,2021-08-25T23:42:58Z,MERGED,True,0,2,1,https://github.com/abartlet,Avoid -Werror=address by skipping pointless _mg_buffer_zero(),1,[],https://github.com/heimdal/heimdal/pull/811,https://github.com/abartlet,1,https://github.com/heimdal/heimdal/pull/811,"We do not need to zero out the local variable output_token
if we do not later call gss_release_buffer() on it.
This aovids a -Werror=address compile failure under the
strict compiler options Samba uses when compiled on Ubuntu
20.04 with gcc version 9.3.0 (Ubuntu 9.3.0-17ubuntu1~20.04)
In file included from ../../source4/heimdal/lib/gssapi/preauth/pa_client.c:34:
../../source4/heimdal/lib/gssapi/preauth/pa_client.c:148:21: error: the address of ‘output_token’ will always evaluate as ‘true’ [-Werror=address]
148 |     _mg_buffer_zero(&output_token);
|                     ^
../../source4/heimdal/lib/gssapi/mech/mech_locl.h:72:7: note: in definition of macro ‘_mg_buffer_zero’
72 |   if (buffer) {   
|       ^~~~~~
Signed-off-by: Andrew Bartlett abartlet@samba.org","We do not need to zero out the local variable output_token
if we do not later call gss_release_buffer() on it.
This aovids a -Werror=address compile failure under the
strict compiler options Samba uses when compiled on Ubuntu
20.04 with gcc version 9.3.0 (Ubuntu 9.3.0-17ubuntu1~20.04)
In file included from ../../source4/heimdal/lib/gssapi/preauth/pa_client.c:34:
../../source4/heimdal/lib/gssapi/preauth/pa_client.c:148:21: error: the address of ‘output_token’ will always evaluate as ‘true’ [-Werror=address]
148 |     _mg_buffer_zero(&output_token);
|                     ^
../../source4/heimdal/lib/gssapi/mech/mech_locl.h:72:7: note: in definition of macro ‘_mg_buffer_zero’
72 |   if (buffer) {   
|       ^~~~~~
Signed-off-by: Andrew Bartlett abartlet@samba.org",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,812,2021-08-26T05:06:57Z,2021-10-15T00:12:51Z,2021-10-15T00:12:51Z,CLOSED,False,27,14,3,https://github.com/lhoward,kdc: allow TGS requests from synthetic clients,1,[],https://github.com/heimdal/heimdal/pull/812,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/812,"Previously the TGS allowed synthetic clients (that is, clients that do not exist in the HDB) only if PKINIT was used. Since the introduction of support for GSS-API pre-authentication, synthetic clients can be used without PKINIT.
To support these in the TGS, use a new authorization data element to indicate the AS validated the usage of a synthetic client.
Note: untested.","Previously the TGS allowed synthetic clients (that is, clients that do not exist in the HDB) only if PKINIT was used. Since the introduction of support for GSS-API pre-authentication, synthetic clients can be used without PKINIT.
To support these in the TGS, use a new authorization data element to indicate the AS validated the usage of a synthetic client.
Note: untested.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,812,2021-08-26T05:06:57Z,2021-10-15T00:12:51Z,2021-10-15T00:12:51Z,CLOSED,False,27,14,3,https://github.com/lhoward,kdc: allow TGS requests from synthetic clients,1,[],https://github.com/heimdal/heimdal/pull/812,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/812#issuecomment-906099417,"Previously the TGS allowed synthetic clients (that is, clients that do not exist in the HDB) only if PKINIT was used. Since the introduction of support for GSS-API pre-authentication, synthetic clients can be used without PKINIT.
To support these in the TGS, use a new authorization data element to indicate the AS validated the usage of a synthetic client.
Note: untested.","NB: there might be a better way to do this, e.g. is there an AD element containing flags we can extend and reuse?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,812,2021-08-26T05:06:57Z,2021-10-15T00:12:51Z,2021-10-15T00:12:51Z,CLOSED,False,27,14,3,https://github.com/lhoward,kdc: allow TGS requests from synthetic clients,1,[],https://github.com/heimdal/heimdal/pull/812,https://github.com/RobCrowston,3,https://github.com/heimdal/heimdal/pull/812#issuecomment-943829802,"Previously the TGS allowed synthetic clients (that is, clients that do not exist in the HDB) only if PKINIT was used. Since the introduction of support for GSS-API pre-authentication, synthetic clients can be used without PKINIT.
To support these in the TGS, use a new authorization data element to indicate the AS validated the usage of a synthetic client.
Note: untested.",Probably should also update the doc for HDB_F_SYNTHETIC_PRINCIPAL.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,812,2021-08-26T05:06:57Z,2021-10-15T00:12:51Z,2021-10-15T00:12:51Z,CLOSED,False,27,14,3,https://github.com/lhoward,kdc: allow TGS requests from synthetic clients,1,[],https://github.com/heimdal/heimdal/pull/812,https://github.com/lhoward,4,https://github.com/heimdal/heimdal/pull/812#issuecomment-943855702,"Previously the TGS allowed synthetic clients (that is, clients that do not exist in the HDB) only if PKINIT was used. Since the introduction of support for GSS-API pre-authentication, synthetic clients can be used without PKINIT.
To support these in the TGS, use a new authorization data element to indicate the AS validated the usage of a synthetic client.
Note: untested.","Thanks @RobCrowston, I'll fix it.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,813,2021-08-27T05:35:02Z,2021-09-13T09:20:11Z,2021-09-13T09:20:11Z,MERGED,True,8,0,2,https://github.com/lhoward,krb5: KRB5_KRBHST_TKTBRIDGEAP,1,[],https://github.com/heimdal/heimdal/pull/813,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/813,"Add a new krbhst type, KRB5_KRBHST_TKTBRIDGEAP to krb5_krbhst_init_flags(), that looks for the DNS SRV record kerberos-tkt-bridge. This is to support a new PADL project.","Add a new krbhst type, KRB5_KRBHST_TKTBRIDGEAP to krb5_krbhst_init_flags(), that looks for the DNS SRV record kerberos-tkt-bridge. This is to support a new PADL project.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,813,2021-08-27T05:35:02Z,2021-09-13T09:20:11Z,2021-09-13T09:20:11Z,MERGED,True,8,0,2,https://github.com/lhoward,krb5: KRB5_KRBHST_TKTBRIDGEAP,1,[],https://github.com/heimdal/heimdal/pull/813,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/813#issuecomment-918001381,"Add a new krbhst type, KRB5_KRBHST_TKTBRIDGEAP to krb5_krbhst_init_flags(), that looks for the DNS SRV record kerberos-tkt-bridge. This is to support a new PADL project.",Merging it now TktBridgeAP is open source.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,814,2021-09-01T09:17:59Z,2022-01-03T14:25:18Z,2022-01-03T14:25:19Z,MERGED,True,173,28,9,https://github.com/lhoward,Windows 10 SDK build fixes,1,"['buildbot', 'refactor']",https://github.com/heimdal/heimdal/pull/814,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/814,"Creating a PR to track Windows 10 build fixes

update for Windows 10 SDK
build without Win32.mak","Creating a PR to track Windows 10 build fixes

update for Windows 10 SDK
build without Win32.mak",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,814,2021-09-01T09:17:59Z,2022-01-03T14:25:18Z,2022-01-03T14:25:19Z,MERGED,True,173,28,9,https://github.com/lhoward,Windows 10 SDK build fixes,1,"['buildbot', 'refactor']",https://github.com/heimdal/heimdal/pull/814,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/814#issuecomment-918130701,"Creating a PR to track Windows 10 build fixes

update for Windows 10 SDK
build without Win32.mak","Failing in:
lex.obj : error LNK2019: unresolved external symbol strtoll referenced in function yylex
876C:\projects\heimdal\lib\asn1\..\..\out\dest_AMD64\bin\asn1_compile.exe : fatal error LNK1120: 1 unresolved externals
877

Clearly checking _MSC_VER is not the right way to test if we have UCRT.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,819,2021-09-08T06:47:16Z,2021-09-21T08:59:54Z,2021-09-22T09:56:56Z,CLOSED,False,1,0,1,https://github.com/ash1852,Update bits.c to fix memory leak,1,[],https://github.com/heimdal/heimdal/pull/819,https://github.com/ash1852,1,https://github.com/heimdal/heimdal/pull/819,"p will not longer be use add after line 140,so add ""free(q);"" at line 140 to fix memory leak.","p will not longer be use add after line 140,so add ""free(q);"" at line 140 to fix memory leak.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,819,2021-09-08T06:47:16Z,2021-09-21T08:59:54Z,2021-09-22T09:56:56Z,CLOSED,False,1,0,1,https://github.com/ash1852,Update bits.c to fix memory leak,1,[],https://github.com/heimdal/heimdal/pull/819,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/819#issuecomment-916094597,"p will not longer be use add after line 140,so add ""free(q);"" at line 140 to fix memory leak.",Did you check this actually compiles? q is not defined anywhere.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,819,2021-09-08T06:47:16Z,2021-09-21T08:59:54Z,2021-09-22T09:56:56Z,CLOSED,False,1,0,1,https://github.com/ash1852,Update bits.c to fix memory leak,1,[],https://github.com/heimdal/heimdal/pull/819,https://github.com/lhoward,3,https://github.com/heimdal/heimdal/pull/819#issuecomment-916097173,"p will not longer be use add after line 140,so add ""free(q);"" at line 140 to fix memory leak.","To fix this properly, you're going to need a non-const alias of the p base pointer that can be freed at the end of the program, as hb is used throughout. Please resubmit.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,819,2021-09-08T06:47:16Z,2021-09-21T08:59:54Z,2021-09-22T09:56:56Z,CLOSED,False,1,0,1,https://github.com/ash1852,Update bits.c to fix memory leak,1,[],https://github.com/heimdal/heimdal/pull/819,https://github.com/lhoward,4,https://github.com/heimdal/heimdal/pull/819#issuecomment-916098859,"p will not longer be use add after line 140,so add ""free(q);"" at line 140 to fix memory leak.","Or you could just make hb non-const, and check argc >= 2 at the end of the program before calling free(hb).",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,819,2021-09-08T06:47:16Z,2021-09-21T08:59:54Z,2021-09-22T09:56:56Z,CLOSED,False,1,0,1,https://github.com/ash1852,Update bits.c to fix memory leak,1,[],https://github.com/heimdal/heimdal/pull/819,https://github.com/lhoward,5,https://github.com/heimdal/heimdal/pull/819#issuecomment-923778592,"p will not longer be use add after line 140,so add ""free(q);"" at line 140 to fix memory leak.","Closing, awaiting resubmission.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,819,2021-09-08T06:47:16Z,2021-09-21T08:59:54Z,2021-09-22T09:56:56Z,CLOSED,False,1,0,1,https://github.com/ash1852,Update bits.c to fix memory leak,1,[],https://github.com/heimdal/heimdal/pull/819,https://github.com/ash1852,6,https://github.com/heimdal/heimdal/pull/819#issuecomment-924771963,"p will not longer be use add after line 140,so add ""free(q);"" at line 140 to fix memory leak.",thanks for advice.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,831,2021-09-09T14:35:04Z,2021-09-09T23:11:23Z,2021-09-10T04:41:14Z,MERGED,True,7,4,4,https://github.com/heitbaum,yyerror: update to POSIX standard,1,[],https://github.com/heimdal/heimdal/pull/831,https://github.com/heitbaum,1,https://github.com/heimdal/heimdal/pull/831,"To comply with the latest POSIX standard, in Yacc compatibility mode
(options -y/--yacc) Bison now generates prototypes for yyerror and
yylex.  In some situations, this is breaking compatibility: if the user
has already declared these functions but with some differences (e.g., to
declare them as static, or to use specific attributes), the generated
parser will fail to compile.  To disable these prototypes, #define yyerror
(to yyerror), and likewise for yylex.
refer: https://git.savannah.gnu.org/cgit/bison.git/tree/NEWS
GNU Bison 3.8
in addition update yyerror to match the templated function with const
Reference #830
tested with both 7.7.0 and master.","To comply with the latest POSIX standard, in Yacc compatibility mode
(options -y/--yacc) Bison now generates prototypes for yyerror and
yylex.  In some situations, this is breaking compatibility: if the user
has already declared these functions but with some differences (e.g., to
declare them as static, or to use specific attributes), the generated
parser will fail to compile.  To disable these prototypes, #define yyerror
(to yyerror), and likewise for yylex.
refer: https://git.savannah.gnu.org/cgit/bison.git/tree/NEWS
GNU Bison 3.8
in addition update yyerror to match the templated function with const
Reference #830
tested with both 7.7.0 and master.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,832,2021-09-09T21:49:54Z,2021-09-09T23:10:43Z,2021-09-10T04:37:49Z,MERGED,True,3,3,1,https://github.com/heitbaum,appveyor: Fix build,1,[],https://github.com/heimdal/heimdal/pull/832,https://github.com/heitbaum,1,https://github.com/heimdal/heimdal/pull/832,Update from bison 3.5 to 3.5.4 which is available at the repositories,Update from bison 3.5 to 3.5.4 which is available at the repositories,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,833,2021-09-13T13:32:42Z,2021-09-21T08:59:38Z,2021-09-21T08:59:38Z,MERGED,True,14,9,3,https://github.com/lhoward,Squash MSVC uninitialized variable warnings (C4701),2,[],https://github.com/heimdal/heimdal/pull/833,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/833,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,835,2021-09-17T03:55:17Z,2021-09-21T08:58:05Z,2021-12-06T23:44:04Z,MERGED,True,126,74,11,https://github.com/lhoward,krb5: default to requiring keyed checksums,3,[],https://github.com/heimdal/heimdal/pull/835,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/835,"Make keyed checksums required when generating and verifying checksums, with the following exceptions:


the checksum is being generated or verified as part of encrypting data for  a legacy (DES) encryption type


the KRB5_CRYPTO_FLAG_ALLOW_UNKEYED_CHECKSUM flag was set on the crypto context, used to allow unkeyed checksums on krb5 authenticators


By making unkeyed checksums opt-in, we eliminate a class of potential vulnerabilities where callers could pass unkeyed checksums.
Any code that uses the mandatory checksum type for a given non-legacy encryption type should not be affected by this change. It could potentially break, say, a client trying to do FAST with DES keys but, that should not be supported (because FAST KDCs also support AES).","Make keyed checksums required when generating and verifying checksums, with the following exceptions:


the checksum is being generated or verified as part of encrypting data for  a legacy (DES) encryption type


the KRB5_CRYPTO_FLAG_ALLOW_UNKEYED_CHECKSUM flag was set on the crypto context, used to allow unkeyed checksums on krb5 authenticators


By making unkeyed checksums opt-in, we eliminate a class of potential vulnerabilities where callers could pass unkeyed checksums.
Any code that uses the mandatory checksum type for a given non-legacy encryption type should not be affected by this change. It could potentially break, say, a client trying to do FAST with DES keys but, that should not be supported (because FAST KDCs also support AES).",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,835,2021-09-17T03:55:17Z,2021-09-21T08:58:05Z,2021-12-06T23:44:04Z,MERGED,True,126,74,11,https://github.com/lhoward,krb5: default to requiring keyed checksums,3,[],https://github.com/heimdal/heimdal/pull/835,https://github.com/abartlet,2,https://github.com/heimdal/heimdal/pull/835#issuecomment-986544731,"Make keyed checksums required when generating and verifying checksums, with the following exceptions:


the checksum is being generated or verified as part of encrypting data for  a legacy (DES) encryption type


the KRB5_CRYPTO_FLAG_ALLOW_UNKEYED_CHECKSUM flag was set on the crypto context, used to allow unkeyed checksums on krb5 authenticators


By making unkeyed checksums opt-in, we eliminate a class of potential vulnerabilities where callers could pass unkeyed checksums.
Any code that uses the mandatory checksum type for a given non-legacy encryption type should not be affected by this change. It could potentially break, say, a client trying to do FAST with DES keys but, that should not be supported (because FAST KDCs also support AES).",@josephsutton1 has found a possible regression in gssapi CKSUMTYPE_RSA_MD5 as seen here: https://gitlab.com/samba-team/devel/samba/-/commit/2c888792e86f75f89ec4c22783e8c17e7ddaf960,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,835,2021-09-17T03:55:17Z,2021-09-21T08:58:05Z,2021-12-06T23:44:04Z,MERGED,True,126,74,11,https://github.com/lhoward,krb5: default to requiring keyed checksums,3,[],https://github.com/heimdal/heimdal/pull/835,https://github.com/lhoward,3,https://github.com/heimdal/heimdal/pull/835#issuecomment-987376296,"Make keyed checksums required when generating and verifying checksums, with the following exceptions:


the checksum is being generated or verified as part of encrypting data for  a legacy (DES) encryption type


the KRB5_CRYPTO_FLAG_ALLOW_UNKEYED_CHECKSUM flag was set on the crypto context, used to allow unkeyed checksums on krb5 authenticators


By making unkeyed checksums opt-in, we eliminate a class of potential vulnerabilities where callers could pass unkeyed checksums.
Any code that uses the mandatory checksum type for a given non-legacy encryption type should not be affected by this change. It could potentially break, say, a client trying to do FAST with DES keys but, that should not be supported (because FAST KDCs also support AES).","@josephsutton1 has found a possible regression in gssapi CKSUMTYPE_RSA_MD5 as seen here: https://gitlab.com/samba-team/devel/samba/-/commit/2c888792e86f75f89ec4c22783e8c17e7ddaf960

Fixed in eb29368",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,836,2021-09-19T13:23:28Z,2021-09-20T01:31:07Z,2021-09-20T01:31:07Z,CLOSED,False,72,65,2,https://github.com/iboukris,mspac: rework the check-pac loop,2,[],https://github.com/heimdal/heimdal/pull/836,https://github.com/iboukris,1,https://github.com/heimdal/heimdal/pull/836,This is a follow up to PR  #767,This is a follow up to PR  #767,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,838,2021-09-22T09:38:57Z,2021-09-22T09:41:38Z,2021-09-22T09:41:38Z,CLOSED,False,1,0,1,https://github.com/ash1852,Update bits.c,1,[],https://github.com/heimdal/heimdal/pull/838,https://github.com/ash1852,1,https://github.com/heimdal/heimdal/pull/838,"memory allocated in line 133 is no longer used after line 140,so add ""free(ht);"" to fix memory leak.","memory allocated in line 133 is no longer used after line 140,so add ""free(ht);"" to fix memory leak.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,839,2021-09-22T09:54:46Z,,2021-09-22T13:54:09Z,OPEN,False,2,1,1,https://github.com/ash1852,Update bits.c to free memory properly,1,[],https://github.com/heimdal/heimdal/pull/839,https://github.com/ash1852,1,https://github.com/heimdal/heimdal/pull/839,correctly free memory no longer needed in the end of program.,correctly free memory no longer needed in the end of program.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,839,2021-09-22T09:54:46Z,,2021-09-22T13:54:09Z,OPEN,False,2,1,1,https://github.com/ash1852,Update bits.c to free memory properly,1,[],https://github.com/heimdal/heimdal/pull/839,https://github.com/jaltman,2,https://github.com/heimdal/heimdal/pull/839#issuecomment-924954276,correctly free memory no longer needed in the end of program.,This change is unnecessary.   The program is about to terminate.   There is no need to free this memory that will be released two lines later when the process exits.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,840,2021-09-23T12:14:27Z,2021-09-23T12:35:54Z,2021-09-23T12:35:55Z,MERGED,True,29,2,2,https://github.com/iboukris,Follow-up PAC related tests,2,[],https://github.com/heimdal/heimdal/pull/840,https://github.com/iboukris,1,https://github.com/heimdal/heimdal/pull/840,CC @lhoward,CC @lhoward,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,840,2021-09-23T12:14:27Z,2021-09-23T12:35:54Z,2021-09-23T12:35:55Z,MERGED,True,29,2,2,https://github.com/iboukris,Follow-up PAC related tests,2,[],https://github.com/heimdal/heimdal/pull/840,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/840#issuecomment-925759418,CC @lhoward,"Principal inside the PAC, do you mean inside the ticket? Or does this comment refer to the recent commit where we verify ticket cname matches logon info?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,840,2021-09-23T12:14:27Z,2021-09-23T12:35:54Z,2021-09-23T12:35:55Z,MERGED,True,29,2,2,https://github.com/iboukris,Follow-up PAC related tests,2,[],https://github.com/heimdal/heimdal/pull/840,https://github.com/iboukris,3,https://github.com/heimdal/heimdal/pull/840#issuecomment-925764136,CC @lhoward,"Principal inside the PAC, do you mean inside the ticket? Or does this comment refer to the recent commit where we verify ticket cname matches logon info?

The latter, if you revert that commit the test will fail.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,840,2021-09-23T12:14:27Z,2021-09-23T12:35:54Z,2021-09-23T12:35:55Z,MERGED,True,29,2,2,https://github.com/iboukris,Follow-up PAC related tests,2,[],https://github.com/heimdal/heimdal/pull/840,https://github.com/iboukris,4,https://github.com/heimdal/heimdal/pull/840#issuecomment-925765527,CC @lhoward,Recall that test_ap_req now verifies the PAC by default.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,840,2021-09-23T12:14:27Z,2021-09-23T12:35:54Z,2021-09-23T12:35:55Z,MERGED,True,29,2,2,https://github.com/iboukris,Follow-up PAC related tests,2,[],https://github.com/heimdal/heimdal/pull/840,https://github.com/lhoward,5,https://github.com/heimdal/heimdal/pull/840#issuecomment-925768885,CC @lhoward,"Ah, excellent. Merging!",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,841,2021-09-27T23:58:20Z,2021-09-28T00:19:08Z,2021-10-07T10:38:46Z,MERGED,True,15,8,2,https://github.com/iboukris,krb5: skip cache check in S4U2Proxy requests,1,[],https://github.com/heimdal/heimdal/pull/841,https://github.com/iboukris,1,https://github.com/heimdal/heimdal/pull/841,"Fix for #816, turns out there was one more place that needed changing, as the tests show they both needed.","Fix for #816, turns out there was one more place that needed changing, as the tests show they both needed.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,841,2021-09-27T23:58:20Z,2021-09-28T00:19:08Z,2021-10-07T10:38:46Z,MERGED,True,15,8,2,https://github.com/iboukris,krb5: skip cache check in S4U2Proxy requests,1,[],https://github.com/heimdal/heimdal/pull/841,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/841#issuecomment-937620319,"Fix for #816, turns out there was one more place that needed changing, as the tests show they both needed.","This breaks the test suite, I am getting:
2021-10-07T20:32:47 reading packet: udp ::1:49188 (localhost) state=WAITING_REPLY tid: 00000001
2021-10-07T20:32:47 host completed: udp ::1:49188 (localhost) state=WAITING_REPLY tid: 00000001
2021-10-07T20:32:47 unknown-function TEST.H5L.SE done: 0 hosts: 1 packets: 1 wc: 0.024566 nr: 0.003469 kh: 0.000051 tid: 00000002
2021-10-07T20:32:47 krb5_get_creds: got a ticket for host/datan.test.h5l.se@TEST.H5L.SE
2021-10-07T20:32:47 set-error: -1765328243: Did not find credential for krb5_ccache_conf_data/FriendlyName@X-CACHECONF: in cache FILE:../../tests/kdc/o2cache.krb5
signal killing kdc kpasswdd

cc @nicowilliams",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,841,2021-09-27T23:58:20Z,2021-09-28T00:19:08Z,2021-10-07T10:38:46Z,MERGED,True,15,8,2,https://github.com/iboukris,krb5: skip cache check in S4U2Proxy requests,1,[],https://github.com/heimdal/heimdal/pull/841,https://github.com/lhoward,3,https://github.com/heimdal/heimdal/pull/841#issuecomment-937639934,"Fix for #816, turns out there was one more place that needed changing, as the tests show they both needed.",if it's not an easy fix perhaps we can revert this for now and open a new issue,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,841,2021-09-27T23:58:20Z,2021-09-28T00:19:08Z,2021-10-07T10:38:46Z,MERGED,True,15,8,2,https://github.com/iboukris,krb5: skip cache check in S4U2Proxy requests,1,[],https://github.com/heimdal/heimdal/pull/841,https://github.com/iboukris,4,https://github.com/heimdal/heimdal/pull/841#issuecomment-937643469,"Fix for #816, turns out there was one more place that needed changing, as the tests show they both needed.","Hi Luke, let me have a look, strange though, I thought I ran the test-suite, what test is failing? it isn't check-kdc right?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,841,2021-09-27T23:58:20Z,2021-09-28T00:19:08Z,2021-10-07T10:38:46Z,MERGED,True,15,8,2,https://github.com/iboukris,krb5: skip cache check in S4U2Proxy requests,1,[],https://github.com/heimdal/heimdal/pull/841,https://github.com/lhoward,5,https://github.com/heimdal/heimdal/pull/841#issuecomment-937645833,"Fix for #816, turns out there was one more place that needed changing, as the tests show they both needed.",yes it is check-kdc,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,841,2021-09-27T23:58:20Z,2021-09-28T00:19:08Z,2021-10-07T10:38:46Z,MERGED,True,15,8,2,https://github.com/iboukris,krb5: skip cache check in S4U2Proxy requests,1,[],https://github.com/heimdal/heimdal/pull/841,https://github.com/lhoward,6,https://github.com/heimdal/heimdal/pull/841#issuecomment-937646021,"Fix for #816, turns out there was one more place that needed changing, as the tests show they both needed.",at least it's failing for me on macOS...,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,841,2021-09-27T23:58:20Z,2021-09-28T00:19:08Z,2021-10-07T10:38:46Z,MERGED,True,15,8,2,https://github.com/iboukris,krb5: skip cache check in S4U2Proxy requests,1,[],https://github.com/heimdal/heimdal/pull/841,https://github.com/iboukris,7,https://github.com/heimdal/heimdal/pull/841#issuecomment-937669511,"Fix for #816, turns out there was one more place that needed changing, as the tests show they both needed.","Ok, it runs fine on linux, maybe I made some wrong assumptions on the output of klist, mind mailing the whole log, trying to figure  where it fails exactly.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,842,2021-10-07T12:42:52Z,2021-10-07T13:08:14Z,2021-10-07T13:08:14Z,MERGED,True,4,3,1,https://github.com/iboukris,tests: fix recent test from using system klist,1,[],https://github.com/heimdal/heimdal/pull/842,https://github.com/iboukris,1,https://github.com/heimdal/heimdal/pull/842,follow up to PR #841,follow up to PR #841,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,842,2021-10-07T12:42:52Z,2021-10-07T13:08:14Z,2021-10-07T13:08:14Z,MERGED,True,4,3,1,https://github.com/iboukris,tests: fix recent test from using system klist,1,[],https://github.com/heimdal/heimdal/pull/842,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/842#issuecomment-937756168,follow up to PR #841,Could you please put Closes: #842 in the commit message?,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,842,2021-10-07T12:42:52Z,2021-10-07T13:08:14Z,2021-10-07T13:08:14Z,MERGED,True,4,3,1,https://github.com/iboukris,tests: fix recent test from using system klist,1,[],https://github.com/heimdal/heimdal/pull/842,https://github.com/lhoward,3,https://github.com/heimdal/heimdal/pull/842#issuecomment-937756750,follow up to PR #841,"Please remove debugging code
echo ""KLSIT2 :: ${klist2} XXX""",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,842,2021-10-07T12:42:52Z,2021-10-07T13:08:14Z,2021-10-07T13:08:14Z,MERGED,True,4,3,1,https://github.com/iboukris,tests: fix recent test from using system klist,1,[],https://github.com/heimdal/heimdal/pull/842,https://github.com/iboukris,4,https://github.com/heimdal/heimdal/pull/842#issuecomment-937771600,follow up to PR #841,Done :),True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,843,2021-10-08T07:33:53Z,2021-10-11T18:58:35Z,2021-11-16T18:56:57Z,CLOSED,False,0,0,0,https://github.com/nicowilliams,Referrals via HDB entry aliases,0,[],https://github.com/heimdal/heimdal/pull/843,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/843,"The TGS will issue referrals based on [domain_realm] mappings.

With this change the TGS will also issue referrals based on HDB entry
aliases.

This is important because the KDC currently does not re-read krb5.conf
and must be restarted for changes to e.g., [domain_realm] mappings to
take effect.  As well, making krb5.conf changes to all the KDCs for a
realm would need to be arranged.  But with aliases in the HDB, these
problems go away.  We should really have an option to store the KDC's
entire configuration in the HDB...

When an alias resolves to a canonical principal name in a different
realm, and the caller is not lib/kadm5, return HDB_ERR_WRONG_REALM,
which will tell the KDC that this is a referral to the canonical
principal's realm.","The TGS will issue referrals based on [domain_realm] mappings.

With this change the TGS will also issue referrals based on HDB entry
aliases.

This is important because the KDC currently does not re-read krb5.conf
and must be restarted for changes to e.g., [domain_realm] mappings to
take effect.  As well, making krb5.conf changes to all the KDCs for a
realm would need to be arranged.  But with aliases in the HDB, these
problems go away.  We should really have an option to store the KDC's
entire configuration in the HDB...

When an alias resolves to a canonical principal name in a different
realm, and the caller is not lib/kadm5, return HDB_ERR_WRONG_REALM,
which will tell the KDC that this is a referral to the canonical
principal's realm.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,846,2021-10-14T22:26:05Z,2021-10-19T09:45:41Z,2021-10-19T09:45:41Z,MERGED,True,91,0,13,https://github.com/RobCrowston,Add placeholder for gss_acquire_cred_impersonate_name().,1,[],https://github.com/heimdal/heimdal/pull/846,https://github.com/RobCrowston,1,https://github.com/heimdal/heimdal/pull/846,"Add placeholder and prototype for gss_acquire_cred_impersonate_name().
The prototype for gss_acquire_cred_impersonate_name() is patterned off the MIT implementation. No functional changes are intended in this patch.
See issue #4.","Add placeholder and prototype for gss_acquire_cred_impersonate_name().
The prototype for gss_acquire_cred_impersonate_name() is patterned off the MIT implementation. No functional changes are intended in this patch.
See issue #4.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,846,2021-10-14T22:26:05Z,2021-10-19T09:45:41Z,2021-10-19T09:45:41Z,MERGED,True,91,0,13,https://github.com/RobCrowston,Add placeholder for gss_acquire_cred_impersonate_name().,1,[],https://github.com/heimdal/heimdal/pull/846,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/846#issuecomment-943788350,"Add placeholder and prototype for gss_acquire_cred_impersonate_name().
The prototype for gss_acquire_cred_impersonate_name() is patterned off the MIT implementation. No functional changes are intended in this patch.
See issue #4.","You missed _gss_load_mech(), OPTSYM(acquire_cred_impersonate_name).",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,846,2021-10-14T22:26:05Z,2021-10-19T09:45:41Z,2021-10-19T09:45:41Z,MERGED,True,91,0,13,https://github.com/RobCrowston,Add placeholder for gss_acquire_cred_impersonate_name().,1,[],https://github.com/heimdal/heimdal/pull/846,https://github.com/RobCrowston,3,https://github.com/heimdal/heimdal/pull/846#issuecomment-943833805,"Add placeholder and prototype for gss_acquire_cred_impersonate_name().
The prototype for gss_acquire_cred_impersonate_name() is patterned off the MIT implementation. No functional changes are intended in this patch.
See issue #4.","Updated, thanks.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,846,2021-10-14T22:26:05Z,2021-10-19T09:45:41Z,2021-10-19T09:45:41Z,MERGED,True,91,0,13,https://github.com/RobCrowston,Add placeholder for gss_acquire_cred_impersonate_name().,1,[],https://github.com/heimdal/heimdal/pull/846,https://github.com/lhoward,4,https://github.com/heimdal/heimdal/pull/846#issuecomment-944834242,"Add placeholder and prototype for gss_acquire_cred_impersonate_name().
The prototype for gss_acquire_cred_impersonate_name() is patterned off the MIT implementation. No functional changes are intended in this patch.
See issue #4.","I think you'll need to implement a stub for gss_acquire_cred_impersonate_name() to get it to build because OPTSYM references the mechglue symbol (loopback detection for mechanisms that do not implement it and re-export the mechglue).
Suggest a stub implementation that returns GSS_S_NO_CRED, don't forget to add it to the exports table too for both Windows and Unix.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,846,2021-10-14T22:26:05Z,2021-10-19T09:45:41Z,2021-10-19T09:45:41Z,MERGED,True,91,0,13,https://github.com/RobCrowston,Add placeholder for gss_acquire_cred_impersonate_name().,1,[],https://github.com/heimdal/heimdal/pull/846,https://github.com/RobCrowston,5,https://github.com/heimdal/heimdal/pull/846#issuecomment-944914610,"Add placeholder and prototype for gss_acquire_cred_impersonate_name().
The prototype for gss_acquire_cred_impersonate_name() is patterned off the MIT implementation. No functional changes are intended in this patch.
See issue #4.","Updated as per comments.
Is there a separate exports table for Windows? -- I think I found all the references, but let me know if I missed one.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,847,2021-10-14T23:06:29Z,2021-10-16T01:32:05Z,2021-10-16T01:32:05Z,MERGED,True,52,50,4,https://github.com/RobCrowston,Fix spelling/grammar in various PKINIT messages,1,[],https://github.com/heimdal/heimdal/pull/847,https://github.com/RobCrowston,1,https://github.com/heimdal/heimdal/pull/847,"Only error messages and code comments touched.

Consensus seems to be ""PKINIT"" over ""PK-INIT"".
Clarify some instances of Windows vs Win2k.
s/certifiates/certificates/g
Some other nits","Only error messages and code comments touched.

Consensus seems to be ""PKINIT"" over ""PK-INIT"".
Clarify some instances of Windows vs Win2k.
s/certifiates/certificates/g
Some other nits",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,848,2021-10-17T10:55:19Z,,2022-03-04T23:38:18Z,OPEN,False,233,0,9,https://github.com/RobCrowston,Teach krb5_get_creds_opt about expiry times.,1,[],https://github.com/heimdal/heimdal/pull/848,https://github.com/RobCrowston,1,https://github.com/heimdal/heimdal/pull/848,"Allow callers of krb5_get_creds() to request tickets with non-default
expiry times, through an extension to the krb5_get_creds_opt struct and
a new public function, krb5_get_creds_opt_set_lifetime().
This is needed for the gssapi S4U extensions: it seems easier to teach
krb5_get_creds() about expiry times than to teach krb5_get_credentials()
about impersonation.
Also, add a test for krb5_get_creds(), since we don't seem to have an
explicit test for it yet.","Allow callers of krb5_get_creds() to request tickets with non-default
expiry times, through an extension to the krb5_get_creds_opt struct and
a new public function, krb5_get_creds_opt_set_lifetime().
This is needed for the gssapi S4U extensions: it seems easier to teach
krb5_get_creds() about expiry times than to teach krb5_get_credentials()
about impersonation.
Also, add a test for krb5_get_creds(), since we don't seem to have an
explicit test for it yet.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,848,2021-10-17T10:55:19Z,,2022-03-04T23:38:18Z,OPEN,False,233,0,9,https://github.com/RobCrowston,Teach krb5_get_creds_opt about expiry times.,1,[],https://github.com/heimdal/heimdal/pull/848,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/848#issuecomment-945100430,"Allow callers of krb5_get_creds() to request tickets with non-default
expiry times, through an extension to the krb5_get_creds_opt struct and
a new public function, krb5_get_creds_opt_set_lifetime().
This is needed for the gssapi S4U extensions: it seems easier to teach
krb5_get_creds() about expiry times than to teach krb5_get_credentials()
about impersonation.
Also, add a test for krb5_get_creds(), since we don't seem to have an
explicit test for it yet.",I haven’t looked at the diff but Windows build is failing owing to lack of ctime_r().,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,850,2021-10-21T16:29:28Z,2021-12-13T04:10:35Z,2021-12-13T04:10:36Z,CLOSED,False,4,0,1,https://github.com/quanah,kdc: validate sname in TGS-REQ,2,[],https://github.com/heimdal/heimdal/pull/850,https://github.com/quanah,1,https://github.com/heimdal/heimdal/pull/850,"For #849
In tgs_build_reply(), validate the server name in the TGS-REQ is present before
dereferencing.","For #849
In tgs_build_reply(), validate the server name in the TGS-REQ is present before
dereferencing.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,850,2021-10-21T16:29:28Z,2021-12-13T04:10:35Z,2021-12-13T04:10:36Z,CLOSED,False,4,0,1,https://github.com/quanah,kdc: validate sname in TGS-REQ,2,[],https://github.com/heimdal/heimdal/pull/850,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/850#issuecomment-949006584,"For #849
In tgs_build_reply(), validate the server name in the TGS-REQ is present before
dereferencing.",You need 773802a too,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,850,2021-10-21T16:29:28Z,2021-12-13T04:10:35Z,2021-12-13T04:10:36Z,CLOSED,False,4,0,1,https://github.com/quanah,kdc: validate sname in TGS-REQ,2,[],https://github.com/heimdal/heimdal/pull/850,https://github.com/lhoward,3,https://github.com/heimdal/heimdal/pull/850#issuecomment-949006699,"For #849
In tgs_build_reply(), validate the server name in the TGS-REQ is present before
dereferencing.",First commit was buggy,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,850,2021-10-21T16:29:28Z,2021-12-13T04:10:35Z,2021-12-13T04:10:36Z,CLOSED,False,4,0,1,https://github.com/quanah,kdc: validate sname in TGS-REQ,2,[],https://github.com/heimdal/heimdal/pull/850,https://github.com/quanah,4,https://github.com/heimdal/heimdal/pull/850#issuecomment-949016616,"For #849
In tgs_build_reply(), validate the server name in the TGS-REQ is present before
dereferencing.","First commit was buggy

Thanks, updated PR.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,850,2021-10-21T16:29:28Z,2021-12-13T04:10:35Z,2021-12-13T04:10:36Z,CLOSED,False,4,0,1,https://github.com/quanah,kdc: validate sname in TGS-REQ,2,[],https://github.com/heimdal/heimdal/pull/850,https://github.com/lhoward,5,https://github.com/heimdal/heimdal/pull/850#issuecomment-992085701,"For #849
In tgs_build_reply(), validate the server name in the TGS-REQ is present before
dereferencing.","Pretty sure this was fixed by 0417114, so closing.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,850,2021-10-21T16:29:28Z,2021-12-13T04:10:35Z,2021-12-13T04:10:36Z,CLOSED,False,4,0,1,https://github.com/quanah,kdc: validate sname in TGS-REQ,2,[],https://github.com/heimdal/heimdal/pull/850,https://github.com/abartlet,6,https://github.com/heimdal/heimdal/pull/850#issuecomment-992087073,"For #849
In tgs_build_reply(), validate the server name in the TGS-REQ is present before
dereferencing.",Isn't that only in master and not 7.1?,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,850,2021-10-21T16:29:28Z,2021-12-13T04:10:35Z,2021-12-13T04:10:36Z,CLOSED,False,4,0,1,https://github.com/quanah,kdc: validate sname in TGS-REQ,2,[],https://github.com/heimdal/heimdal/pull/850,https://github.com/lhoward,7,https://github.com/heimdal/heimdal/pull/850#issuecomment-992087348,"For #849
In tgs_build_reply(), validate the server name in the TGS-REQ is present before
dereferencing.","Ah, whoops, my bad. Reopening.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,850,2021-10-21T16:29:28Z,2021-12-13T04:10:35Z,2021-12-13T04:10:36Z,CLOSED,False,4,0,1,https://github.com/quanah,kdc: validate sname in TGS-REQ,2,[],https://github.com/heimdal/heimdal/pull/850,https://github.com/jaltman,8,https://github.com/heimdal/heimdal/pull/850#issuecomment-992092608,"For #849
In tgs_build_reply(), validate the server name in the TGS-REQ is present before
dereferencing.",278d973 is the cherry-pick to 7-1-branch,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,853,2021-11-12T21:39:45Z,2021-11-12T22:13:49Z,2021-11-12T22:13:50Z,MERGED,True,1,1,1,https://github.com/hawicz,Initialize local variable in kimpersonate to avoid crash in krb5_free_principal(),1,[],https://github.com/heimdal/heimdal/pull/853,https://github.com/hawicz,1,https://github.com/heimdal/heimdal/pull/853,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,854,2021-11-15T00:05:57Z,2022-01-02T10:40:17Z,2022-01-03T00:40:20Z,MERGED,True,203,38,4,https://github.com/nicowilliams,hdb: Namespace referrals,1,['feature request'],https://github.com/heimdal/heimdal/pull/854,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/854,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,855,2021-11-15T06:10:50Z,2021-11-25T03:30:44Z,2021-11-25T03:30:45Z,MERGED,True,122,129,46,https://github.com/nicowilliams,Always cmp cmp (GCC bug 95189),3,[],https://github.com/heimdal/heimdal/pull/855,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/855,"Because of:
http://r6.ca/blog/20200929T023701Z.html
https://gcc.gnu.org/bugzilla/show_bug.cgi?id=95189
this is bad:
    if (strcmp(a, b) || !strcmp(c, d)) ...

so this patch changes that to:
    if (strcmp(a, b) != 0 || strcmp(c, d)) == 0

for all C library cmp functions and related:

strcmp(), strncmp()
strcasecmp(), strncasecmp()
stricmp(), strnicmp()
memcmp()","Because of:
http://r6.ca/blog/20200929T023701Z.html
https://gcc.gnu.org/bugzilla/show_bug.cgi?id=95189
this is bad:
    if (strcmp(a, b) || !strcmp(c, d)) ...

so this patch changes that to:
    if (strcmp(a, b) != 0 || strcmp(c, d)) == 0

for all C library cmp functions and related:

strcmp(), strncmp()
strcasecmp(), strncasecmp()
stricmp(), strnicmp()
memcmp()",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,855,2021-11-15T06:10:50Z,2021-11-25T03:30:44Z,2021-11-25T03:30:45Z,MERGED,True,122,129,46,https://github.com/nicowilliams,Always cmp cmp (GCC bug 95189),3,[],https://github.com/heimdal/heimdal/pull/855,https://github.com/jaltman,2,https://github.com/heimdal/heimdal/pull/855#issuecomment-968989932,"Because of:
http://r6.ca/blog/20200929T023701Z.html
https://gcc.gnu.org/bugzilla/show_bug.cgi?id=95189
this is bad:
    if (strcmp(a, b) || !strcmp(c, d)) ...

so this patch changes that to:
    if (strcmp(a, b) != 0 || strcmp(c, d)) == 0

for all C library cmp functions and related:

strcmp(), strncmp()
strcasecmp(), strncasecmp()
stricmp(), strnicmp()
memcmp()",Thanks for doing this.  This change is going to require thorough review to ensure it handles all of the cases.   Including those where the result of memcmp is returned from a function which might be inline and the result is used without comparing to zero.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,855,2021-11-15T06:10:50Z,2021-11-25T03:30:44Z,2021-11-25T03:30:45Z,MERGED,True,122,129,46,https://github.com/nicowilliams,Always cmp cmp (GCC bug 95189),3,[],https://github.com/heimdal/heimdal/pull/855,https://github.com/nicowilliams,3,https://github.com/heimdal/heimdal/pull/855#issuecomment-969878059,"Because of:
http://r6.ca/blog/20200929T023701Z.html
https://gcc.gnu.org/bugzilla/show_bug.cgi?id=95189
this is bad:
    if (strcmp(a, b) || !strcmp(c, d)) ...

so this patch changes that to:
    if (strcmp(a, b) != 0 || strcmp(c, d)) == 0

for all C library cmp functions and related:

strcmp(), strncmp()
strcasecmp(), strncasecmp()
stricmp(), strnicmp()
memcmp()",FYI I checked all the cmp returning functions's in-tree callers.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,855,2021-11-15T06:10:50Z,2021-11-25T03:30:44Z,2021-11-25T03:30:45Z,MERGED,True,122,129,46,https://github.com/nicowilliams,Always cmp cmp (GCC bug 95189),3,[],https://github.com/heimdal/heimdal/pull/855,https://github.com/mistotebe,4,https://github.com/heimdal/heimdal/pull/855#issuecomment-970320381,"Because of:
http://r6.ca/blog/20200929T023701Z.html
https://gcc.gnu.org/bugzilla/show_bug.cgi?id=95189
this is bad:
    if (strcmp(a, b) || !strcmp(c, d)) ...

so this patch changes that to:
    if (strcmp(a, b) != 0 || strcmp(c, d)) == 0

for all C library cmp functions and related:

strcmp(), strncmp()
strcasecmp(), strncasecmp()
stricmp(), strnicmp()
memcmp()","If I understand this correctly, it's only memcmp calls that are affected (they start to behave like strcmp instead), so the strcmp() calls don't need any changes. Additionally only memcmp()s with a string that is known to contain a \0 in it at compile time?
So the patch looks like a massive overreaction, or am I missing something?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,855,2021-11-15T06:10:50Z,2021-11-25T03:30:44Z,2021-11-25T03:30:45Z,MERGED,True,122,129,46,https://github.com/nicowilliams,Always cmp cmp (GCC bug 95189),3,[],https://github.com/heimdal/heimdal/pull/855,https://github.com/jaltman,5,https://github.com/heimdal/heimdal/pull/855#issuecomment-970328975,"Because of:
http://r6.ca/blog/20200929T023701Z.html
https://gcc.gnu.org/bugzilla/show_bug.cgi?id=95189
this is bad:
    if (strcmp(a, b) || !strcmp(c, d)) ...

so this patch changes that to:
    if (strcmp(a, b) != 0 || strcmp(c, d)) == 0

for all C library cmp functions and related:

strcmp(), strncmp()
strcasecmp(), strncasecmp()
stricmp(), strnicmp()
memcmp()","The change is addressing two things at once.  First, is GCC bug 95189.   The other is the general style issue of treating cmp functions as inverted booleans.   Addressing GCC 95189 is a small subset and could/should be broken out separately.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,855,2021-11-15T06:10:50Z,2021-11-25T03:30:44Z,2021-11-25T03:30:45Z,MERGED,True,122,129,46,https://github.com/nicowilliams,Always cmp cmp (GCC bug 95189),3,[],https://github.com/heimdal/heimdal/pull/855,https://github.com/jaltman,6,https://github.com/heimdal/heimdal/pull/855#issuecomment-978012915,"Because of:
http://r6.ca/blog/20200929T023701Z.html
https://gcc.gnu.org/bugzilla/show_bug.cgi?id=95189
this is bad:
    if (strcmp(a, b) || !strcmp(c, d)) ...

so this patch changes that to:
    if (strcmp(a, b) != 0 || strcmp(c, d)) == 0

for all C library cmp functions and related:

strcmp(), strncmp()
strcasecmp(), strncasecmp()
stricmp(), strnicmp()
memcmp()","On macOS Apple Silicon tests fail with 5c45be4 but pass with 327bb6f
I'm reviewing 5c45be4 for mistakes.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,855,2021-11-15T06:10:50Z,2021-11-25T03:30:44Z,2021-11-25T03:30:45Z,MERGED,True,122,129,46,https://github.com/nicowilliams,Always cmp cmp (GCC bug 95189),3,[],https://github.com/heimdal/heimdal/pull/855,https://github.com/jaltman,7,https://github.com/heimdal/heimdal/pull/855#issuecomment-978071486,"Because of:
http://r6.ca/blog/20200929T023701Z.html
https://gcc.gnu.org/bugzilla/show_bug.cgi?id=95189
this is bad:
    if (strcmp(a, b) || !strcmp(c, d)) ...

so this patch changes that to:
    if (strcmp(a, b) != 0 || strcmp(c, d)) == 0

for all C library cmp functions and related:

strcmp(), strncmp()
strcasecmp(), strncasecmp()
stricmp(), strnicmp()
memcmp()",All tests pass on 32-bit Windows.   On macOS Apple Silicon all tests except check-iprop pass.    Commit 0e2cc5f.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,855,2021-11-15T06:10:50Z,2021-11-25T03:30:44Z,2021-11-25T03:30:45Z,MERGED,True,122,129,46,https://github.com/nicowilliams,Always cmp cmp (GCC bug 95189),3,[],https://github.com/heimdal/heimdal/pull/855,https://github.com/jaltman,8,https://github.com/heimdal/heimdal/pull/855#issuecomment-978793512,"Because of:
http://r6.ca/blog/20200929T023701Z.html
https://gcc.gnu.org/bugzilla/show_bug.cgi?id=95189
this is bad:
    if (strcmp(a, b) || !strcmp(c, d)) ...

so this patch changes that to:
    if (strcmp(a, b) != 0 || strcmp(c, d)) == 0

for all C library cmp functions and related:

strcmp(), strncmp()
strcasecmp(), strncasecmp()
stricmp(), strnicmp()
memcmp()",@nicowilliams reports that all tests pass on Linux,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,857,2021-11-16T15:26:51Z,2021-11-16T18:29:32Z,2021-11-23T22:22:02Z,MERGED,True,7,15,1,https://github.com/jaltman,asn1_gen: use roken in generated source files,1,[],https://github.com/heimdal/heimdal/pull/857,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/857,"roken is important to manage the correct selection of include files, ensure availability of error constants, and on Windows to manage the memory allocation routines","roken is important to manage the correct selection of include files, ensure availability of error constants, and on Windows to manage the memory allocation routines",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,857,2021-11-16T15:26:51Z,2021-11-16T18:29:32Z,2021-11-23T22:22:02Z,MERGED,True,7,15,1,https://github.com/jaltman,asn1_gen: use roken in generated source files,1,[],https://github.com/heimdal/heimdal/pull/857,https://github.com/abartlet,2,https://github.com/heimdal/heimdal/pull/857#issuecomment-977224569,"roken is important to manage the correct selection of include files, ensure availability of error constants, and on Windows to manage the memory allocation routines","The problem with this approach is that roken now leaks into public
headers like krb5.h, and so overrides functions that may have been
provided by consumer projects.  This will cause a mass FTBFS on any OS
or distribution that builds against Heimdal once released, so sadly I
think this needs to be reverted.

Samba, when built with this patch, fails with:

```

PYTHONHASHSEED=1 WAF_MAKE=1  ./buildtools/bin/waf build
Waf: Entering directory `/data/samba/git/samba/bin/default'
	Selected embedded Heimdal build
[1874/4624] Compiling lib/addns/dnsgss.c
In file included from ../../source4/heimdal_build/roken.h:164,
                 from source4/heimdal/lib/asn1/krb5_asn1.h:8,
                 from ../../source4/heimdal/lib/krb5/krb5.h:50,
                 from ../../lib/replace/system/kerberos.h:33,
                 from ../../lib/addns/dns.h:30,
                 from ../../lib/addns/dnsgss.c:25:
../../source4/heimdal/lib/roken/roken.h.in:615:16: error: conflicting
types for ‘rk_strupr’
  615 | #define strupr rk_strupr
      |                ^~~~~~~~~
../../lib/addns/dnsgss.c:35:12: note: in expansion of macro ‘strupr’
   35 | static int strupr( char *szDomainName )
      |            ^~~~~~
../../source4/heimdal/lib/roken/roken.h.in:615:16: note: previous
declaration of ‘rk_strupr’ was here
  615 | #define strupr rk_strupr
      |                ^~~~~~~~~
../../source4/heimdal/lib/roken/roken.h.in:616:42: note: in expansion
of macro ‘strupr’
  616 | ROKEN_LIB_FUNCTION char * ROKEN_LIB_CALL strupr(char *);
      |                                          ^~~~~~

Waf: Leaving directory `/data/samba/git/samba/bin/default'
Build failed
 -> task in 'addns.objlist' failed with exit status 1 (run with -v to
display more information)
make: *** [Makefile:7: all] Error 1
```

The failure on Samba's side is in https://gitlab.com/samba-team/samba/-/blob/master/lib/addns/dnsgss.c#L34

Sorry,

Andrew Bartlett",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,858,2021-11-17T02:56:10Z,2021-11-17T03:09:16Z,2021-11-17T03:09:21Z,MERGED,True,171,171,11,https://github.com/jaltman,Fix calling convention for libasn1,1,[],https://github.com/heimdal/heimdal/pull/858,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/858,"The calling convention for all exported libasn1 functions must be ASN1CALL.   On Windows, ASN1CALL is _stdcall and without it its _cdecl.   Calling a _cdecl function with -stdcall convention results in the ESP register not being preserved properly.  The asn1 tests crash when compiled with /RTCs.","The calling convention for all exported libasn1 functions must be ASN1CALL.   On Windows, ASN1CALL is _stdcall and without it its _cdecl.   Calling a _cdecl function with -stdcall convention results in the ESP register not being preserved properly.  The asn1 tests crash when compiled with /RTCs.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,859,2021-11-17T03:40:19Z,2021-11-17T03:41:39Z,2021-11-17T03:41:44Z,MERGED,True,1,2,2,https://github.com/jaltman,Fix #696 - Find python as part of the configure process,1,[],https://github.com/heimdal/heimdal/pull/859,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/859,Replaces #706,Replaces #706,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,860,2021-11-17T20:20:47Z,2021-11-17T20:23:27Z,2021-11-17T20:34:54Z,MERGED,True,13,4,3,https://github.com/quanah,771 updates,2,[],https://github.com/heimdal/heimdal/pull/860,https://github.com/quanah,1,https://github.com/heimdal/heimdal/pull/860,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,861,2021-11-18T14:31:27Z,2021-11-19T00:52:54Z,2022-01-21T15:41:11Z,MERGED,True,24,22,5,https://github.com/jaltman,plugin interface functions must specify calling convention,1,[],https://github.com/heimdal/heimdal/pull/861,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/861,"The plugin interfaces were originally implemented for use on
Unix where KRB5_CALLCONV, HEIM_CALLCONV and similar are defined
as nothing.  However, on 32-bit Windows the calling convention
matters and executing a __stdcall function through a __cdecl
function pointer will result in failures.
This change updates the krb5plugin_windc, krb5plugin_service_locate,
krb5plugin_send_to_kdc plugins to specify the KRB5_CALLCONV for
functions.   This brings the plugins into compliance with the
heim_plugin_common interface requirement that init() and fini()
use the platform specified HEIM_CALLCONV.
The krb5-plugin(7) man page is updated and the lib/krb5/test_plugin
test is also fixed.
With this change all tests pass on 32-bit Windows.
Change-Id: Ic9d2e1285c9c179e3898dc9d071ed092bcddc406","The plugin interfaces were originally implemented for use on
Unix where KRB5_CALLCONV, HEIM_CALLCONV and similar are defined
as nothing.  However, on 32-bit Windows the calling convention
matters and executing a __stdcall function through a __cdecl
function pointer will result in failures.
This change updates the krb5plugin_windc, krb5plugin_service_locate,
krb5plugin_send_to_kdc plugins to specify the KRB5_CALLCONV for
functions.   This brings the plugins into compliance with the
heim_plugin_common interface requirement that init() and fini()
use the platform specified HEIM_CALLCONV.
The krb5-plugin(7) man page is updated and the lib/krb5/test_plugin
test is also fixed.
With this change all tests pass on 32-bit Windows.
Change-Id: Ic9d2e1285c9c179e3898dc9d071ed092bcddc406",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,862,2021-11-24T04:34:23Z,2021-11-24T07:51:12Z,2021-11-24T07:51:13Z,MERGED,True,1,1,1,https://github.com/abartlet,kdc: Fix ‘header_key’ may be used uninitialized in this function,1,[],https://github.com/heimdal/heimdal/pull/862,https://github.com/abartlet,1,https://github.com/heimdal/heimdal/pull/862,"krb5tgs.c: In function ‘_kdc_tgs_rep’:
krb5tgs.c:1785:25: warning: ‘header_key’ may be used uninitialized in this function [-Wmaybe-uninitialized]
1785 |       &tkey_check->key, &tkey_check->key, tgt, &kdc_issued, &mspac);
|                         ^~~~~~~~~~~~~~~~
krb5tgs.c:2302:10: note: ‘header_key’ was declared here
2302 |     Key *header_key;
|          ^~~~~~~~~~
On Ubuntu 20.04 in a default Heimdal build with
gcc version 9.3.0 (Ubuntu 9.3.0-17ubuntu1~20.04)
The compiler doesn't trust that *header_key = tkey; is always
executed in tgs_parse_request() for ret == 0.
Signed-off-by: Andrew Bartlett abartlet@samba.org","krb5tgs.c: In function ‘_kdc_tgs_rep’:
krb5tgs.c:1785:25: warning: ‘header_key’ may be used uninitialized in this function [-Wmaybe-uninitialized]
1785 |       &tkey_check->key, &tkey_check->key, tgt, &kdc_issued, &mspac);
|                         ^~~~~~~~~~~~~~~~
krb5tgs.c:2302:10: note: ‘header_key’ was declared here
2302 |     Key *header_key;
|          ^~~~~~~~~~
On Ubuntu 20.04 in a default Heimdal build with
gcc version 9.3.0 (Ubuntu 9.3.0-17ubuntu1~20.04)
The compiler doesn't trust that *header_key = tkey; is always
executed in tgs_parse_request() for ret == 0.
Signed-off-by: Andrew Bartlett abartlet@samba.org",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,863,2021-11-28T23:22:49Z,2021-12-08T22:53:04Z,2021-12-10T00:03:22Z,MERGED,True,13,1,1,https://github.com/abartlet,s4/heimdal/lib/krb5/pac.c: Align PAC buffers to match Windows,1,[],https://github.com/heimdal/heimdal/pull/863,https://github.com/abartlet,1,https://github.com/heimdal/heimdal/pull/863,"BUG: https://bugzilla.samba.org/show_bug.cgi?id=14642
Signed-off-by: Joseph Sutton josephsutton@catalyst.net.nz
Reviewed-by: Andrew Bartlett abartlet@samba.org
(cherry picked from Samba commit 28a5a586c8e9cd155d676dcfcb81a2587ace99d1)","BUG: https://bugzilla.samba.org/show_bug.cgi?id=14642
Signed-off-by: Joseph Sutton josephsutton@catalyst.net.nz
Reviewed-by: Andrew Bartlett abartlet@samba.org
(cherry picked from Samba commit 28a5a586c8e9cd155d676dcfcb81a2587ace99d1)",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,863,2021-11-28T23:22:49Z,2021-12-08T22:53:04Z,2021-12-10T00:03:22Z,MERGED,True,13,1,1,https://github.com/abartlet,s4/heimdal/lib/krb5/pac.c: Align PAC buffers to match Windows,1,[],https://github.com/heimdal/heimdal/pull/863,https://github.com/abartlet,2,https://github.com/heimdal/heimdal/pull/863#issuecomment-982008892,"BUG: https://bugzilla.samba.org/show_bug.cgi?id=14642
Signed-off-by: Joseph Sutton josephsutton@catalyst.net.nz
Reviewed-by: Andrew Bartlett abartlet@samba.org
(cherry picked from Samba commit 28a5a586c8e9cd155d676dcfcb81a2587ace99d1)","I think it is likely aligned for everything but the other buffers have
natural alignment.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,863,2021-11-28T23:22:49Z,2021-12-08T22:53:04Z,2021-12-10T00:03:22Z,MERGED,True,13,1,1,https://github.com/abartlet,s4/heimdal/lib/krb5/pac.c: Align PAC buffers to match Windows,1,[],https://github.com/heimdal/heimdal/pull/863,https://github.com/lhoward,3,https://github.com/heimdal/heimdal/pull/863#issuecomment-989621436,"BUG: https://bugzilla.samba.org/show_bug.cgi?id=14642
Signed-off-by: Joseph Sutton josephsutton@catalyst.net.nz
Reviewed-by: Andrew Bartlett abartlet@samba.org
(cherry picked from Samba commit 28a5a586c8e9cd155d676dcfcb81a2587ace99d1)",Do you want me to back it out?,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,863,2021-11-28T23:22:49Z,2021-12-08T22:53:04Z,2021-12-10T00:03:22Z,MERGED,True,13,1,1,https://github.com/abartlet,s4/heimdal/lib/krb5/pac.c: Align PAC buffers to match Windows,1,[],https://github.com/heimdal/heimdal/pull/863,https://github.com/abartlet,4,https://github.com/heimdal/heimdal/pull/863#issuecomment-989624013,"BUG: https://bugzilla.samba.org/show_bug.cgi?id=14642
Signed-off-by: Joseph Sutton josephsutton@catalyst.net.nz
Reviewed-by: Andrew Bartlett abartlet@samba.org
(cherry picked from Samba commit 28a5a586c8e9cd155d676dcfcb81a2587ace99d1)","I wasn't going to make a fuss as it at least solved it for now, but that (a revert) would probably be for the best.
It isn't harmful but you won't want to be maintaining the list of things to pad on the Heimdal side, whereas we can pad in Samba and have good infrastructure for testing that kind of thing.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,863,2021-11-28T23:22:49Z,2021-12-08T22:53:04Z,2021-12-10T00:03:22Z,MERGED,True,13,1,1,https://github.com/abartlet,s4/heimdal/lib/krb5/pac.c: Align PAC buffers to match Windows,1,[],https://github.com/heimdal/heimdal/pull/863,https://github.com/lhoward,5,https://github.com/heimdal/heimdal/pull/863#issuecomment-989634004,"BUG: https://bugzilla.samba.org/show_bug.cgi?id=14642
Signed-off-by: Joseph Sutton josephsutton@catalyst.net.nz
Reviewed-by: Andrew Bartlett abartlet@samba.org
(cherry picked from Samba commit 28a5a586c8e9cd155d676dcfcb81a2587ace99d1)",Or Heimdal could pessimistically pad everything to 8 bytes.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,863,2021-11-28T23:22:49Z,2021-12-08T22:53:04Z,2021-12-10T00:03:22Z,MERGED,True,13,1,1,https://github.com/abartlet,s4/heimdal/lib/krb5/pac.c: Align PAC buffers to match Windows,1,[],https://github.com/heimdal/heimdal/pull/863,https://github.com/metze-samba,6,https://github.com/heimdal/heimdal/pull/863#issuecomment-989635342,"BUG: https://bugzilla.samba.org/show_bug.cgi?id=14642
Signed-off-by: Joseph Sutton josephsutton@catalyst.net.nz
Reviewed-by: Andrew Bartlett abartlet@samba.org
(cherry picked from Samba commit 28a5a586c8e9cd155d676dcfcb81a2587ace99d1)","Or Heimdal could pessimistically pad everything to 8 bytes.

I'd like to avoid such magic, I think cbBufferSize should not be changed",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,863,2021-11-28T23:22:49Z,2021-12-08T22:53:04Z,2021-12-10T00:03:22Z,MERGED,True,13,1,1,https://github.com/abartlet,s4/heimdal/lib/krb5/pac.c: Align PAC buffers to match Windows,1,[],https://github.com/heimdal/heimdal/pull/863,https://github.com/metze-samba,7,https://github.com/heimdal/heimdal/pull/863#issuecomment-989979667,"BUG: https://bugzilla.samba.org/show_bug.cgi?id=14642
Signed-off-by: Joseph Sutton josephsutton@catalyst.net.nz
Reviewed-by: Andrew Bartlett abartlet@samba.org
(cherry picked from Samba commit 28a5a586c8e9cd155d676dcfcb81a2587ace99d1)","I think I found the root cause MS-RPCE 2.2.6.3 Primitive Type Serialization says:
For any top-level NDR primitive type, there MUST NOT be any private header preceding the actual type. 
The type MUST be aligned on an 8-byte boundary. If the size of the primitive type is not an integral
multiple of 8 bytes, the data MUST be padded at the end to ensure that its total length is an
integral multiple of 8 bytes.

And in Samba we have the related logic in ndr_push_subcontext_end() for case 0xFFFFFC01,
so our PAC_INFO union should be fine for PAC_TYPE_LOGON_INFO as it uses
subcontext(0xFFFFFC01), but PAC_UPN_DNS_INFO uses handmade marshalling.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,863,2021-11-28T23:22:49Z,2021-12-08T22:53:04Z,2021-12-10T00:03:22Z,MERGED,True,13,1,1,https://github.com/abartlet,s4/heimdal/lib/krb5/pac.c: Align PAC buffers to match Windows,1,[],https://github.com/heimdal/heimdal/pull/863,https://github.com/metze-samba,8,https://github.com/heimdal/heimdal/pull/863#issuecomment-990003787,"BUG: https://bugzilla.samba.org/show_bug.cgi?id=14642
Signed-off-by: Joseph Sutton josephsutton@catalyst.net.nz
Reviewed-by: Andrew Bartlett abartlet@samba.org
(cherry picked from Samba commit 28a5a586c8e9cd155d676dcfcb81a2587ace99d1)","I also found _ndr_size_PAC_INFO() in Samba's PAC_BUFFER, which uses NDR_ROUND(size,8) for
LOGON_INFO and UPN_DNS_INFO together with
[relative,switch_is(type),subcontext(0),subcontext_size(NDR_ROUND(_ndr_size,8)),flag(NDR_ALIGN8)] PAC_INFO *info;
which always adds padding to 8 bytes at the end for all elements (even the last one). The problem seems to
be that Samba's source4/kdc/pac-glue.c uses PAC_INFO only for the individual elements and the logic
of PAC_BUFFER doesn't apply.
See https://git.samba.org/?p=samba.git;a=blob;f=librpc/idl/krb5pac.idl;h=bbe4a253e3a24e7f8ad9950237c9ef058017b4c4;hb=e2b7a2f78117e20739aa4f895ce68825e160d451#l156 for more context.
and
https://git.samba.org/?p=samba.git;a=blob;f=source4/kdc/pac-glue.c;h=2a96a683cd9516fab7376d4bfa517094581b5156;hb=e2b7a2f78117e20739aa4f895ce68825e160d451#l104
I guess we have can have simple function that padds a talloc()'ed DATA_BLOB to a given boundary
and calls that on 'upn_data' after:
 135         ndr_err = ndr_push_union_blob(upn_data, mem_ctx, &pac_upn,
 136                                       PAC_TYPE_UPN_DNS_INFO,
 137                                       (ndr_push_flags_fn_t)ndr_push_PAC_INFO);",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,863,2021-11-28T23:22:49Z,2021-12-08T22:53:04Z,2021-12-10T00:03:22Z,MERGED,True,13,1,1,https://github.com/abartlet,s4/heimdal/lib/krb5/pac.c: Align PAC buffers to match Windows,1,[],https://github.com/heimdal/heimdal/pull/863,https://github.com/metze-samba,9,https://github.com/heimdal/heimdal/pull/863#issuecomment-990004226,"BUG: https://bugzilla.samba.org/show_bug.cgi?id=14642
Signed-off-by: Joseph Sutton josephsutton@catalyst.net.nz
Reviewed-by: Andrew Bartlett abartlet@samba.org
(cherry picked from Samba commit 28a5a586c8e9cd155d676dcfcb81a2587ace99d1)",So the code in heimdal was correct before...,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,863,2021-11-28T23:22:49Z,2021-12-08T22:53:04Z,2021-12-10T00:03:22Z,MERGED,True,13,1,1,https://github.com/abartlet,s4/heimdal/lib/krb5/pac.c: Align PAC buffers to match Windows,1,[],https://github.com/heimdal/heimdal/pull/863,https://github.com/lhoward,10,https://github.com/heimdal/heimdal/pull/863#issuecomment-990421640,"BUG: https://bugzilla.samba.org/show_bug.cgi?id=14642
Signed-off-by: Joseph Sutton josephsutton@catalyst.net.nz
Reviewed-by: Andrew Bartlett abartlet@samba.org
(cherry picked from Samba commit 28a5a586c8e9cd155d676dcfcb81a2587ace99d1)",Reverted.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,864,2021-11-28T23:40:39Z,2021-12-14T01:46:24Z,2021-12-14T01:46:24Z,CLOSED,False,75,23,6,https://github.com/abartlet,kdc: add krb5plugin_windc_pac_pk_generate() hook,1,[],https://github.com/heimdal/heimdal/pull/864,https://github.com/abartlet,1,https://github.com/heimdal/heimdal/pull/864,"This allows PAC_CRENDENTIAL_INFO to be added to the PAC
when using PKINIT. In that case PAC_CRENDENTIAL_INFO contains
an encrypted PAC_CRENDENTIAL_DATA.
BUG: https://bugzilla.samba.org/show_bug.cgi?id=11441
Signed-off-by: Stefan Metzmacher metze@samba.org
(similar to Samba commit 0022ea9efb0e7809fa2d060b294320eb0479cdd2)","This allows PAC_CRENDENTIAL_INFO to be added to the PAC
when using PKINIT. In that case PAC_CRENDENTIAL_INFO contains
an encrypted PAC_CRENDENTIAL_DATA.
BUG: https://bugzilla.samba.org/show_bug.cgi?id=11441
Signed-off-by: Stefan Metzmacher metze@samba.org
(similar to Samba commit 0022ea9efb0e7809fa2d060b294320eb0479cdd2)",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,864,2021-11-28T23:40:39Z,2021-12-14T01:46:24Z,2021-12-14T01:46:24Z,CLOSED,False,75,23,6,https://github.com/abartlet,kdc: add krb5plugin_windc_pac_pk_generate() hook,1,[],https://github.com/heimdal/heimdal/pull/864,https://github.com/abartlet,2,https://github.com/heimdal/heimdal/pull/864#issuecomment-981241896,"This allows PAC_CRENDENTIAL_INFO to be added to the PAC
when using PKINIT. In that case PAC_CRENDENTIAL_INFO contains
an encrypted PAC_CRENDENTIAL_DATA.
BUG: https://bugzilla.samba.org/show_bug.cgi?id=11441
Signed-off-by: Stefan Metzmacher metze@samba.org
(similar to Samba commit 0022ea9efb0e7809fa2d060b294320eb0479cdd2)","Thanks @lhoward for the feedback.
I'll leave this open for now so I don't re-upload this again without addressing these.  The patch is one of many I've been slowly trying to upstream, but also one of the few that isn't tangled up in the FAST changes.   I'll have some more to triage soon once we make some headway on reviewing that.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,864,2021-11-28T23:40:39Z,2021-12-14T01:46:24Z,2021-12-14T01:46:24Z,CLOSED,False,75,23,6,https://github.com/abartlet,kdc: add krb5plugin_windc_pac_pk_generate() hook,1,[],https://github.com/heimdal/heimdal/pull/864,https://github.com/lhoward,3,https://github.com/heimdal/heimdal/pull/864#issuecomment-981242267,"This allows PAC_CRENDENTIAL_INFO to be added to the PAC
when using PKINIT. In that case PAC_CRENDENTIAL_INFO contains
an encrypted PAC_CRENDENTIAL_DATA.
BUG: https://bugzilla.samba.org/show_bug.cgi?id=11441
Signed-off-by: Stefan Metzmacher metze@samba.org
(similar to Samba commit 0022ea9efb0e7809fa2d060b294320eb0479cdd2)","I am being picky but I reckon it's also good to keep this as clean as possible, particularly given the code doesn't get well tested outside Samba.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,864,2021-11-28T23:40:39Z,2021-12-14T01:46:24Z,2021-12-14T01:46:24Z,CLOSED,False,75,23,6,https://github.com/abartlet,kdc: add krb5plugin_windc_pac_pk_generate() hook,1,[],https://github.com/heimdal/heimdal/pull/864,https://github.com/abartlet,4,https://github.com/heimdal/heimdal/pull/864#issuecomment-981246517,"This allows PAC_CRENDENTIAL_INFO to be added to the PAC
when using PKINIT. In that case PAC_CRENDENTIAL_INFO contains
an encrypted PAC_CRENDENTIAL_DATA.
BUG: https://bugzilla.samba.org/show_bug.cgi?id=11441
Signed-off-by: Stefan Metzmacher metze@samba.org
(similar to Samba commit 0022ea9efb0e7809fa2d060b294320eb0479cdd2)","I totally agree.  No hard feelings, just trying to merge what is easy to accept now and then I'll try and clean house again next year.
I have a deadline to upgrade our Heimdal fork by the end of this year (ideally) and the less we leave in lorikeet-heimdal the less I have to keep rebasing, but I also can't put much time into polishing each patch right now, particularly when they are the work of others that I've just been carrying forward.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,864,2021-11-28T23:40:39Z,2021-12-14T01:46:24Z,2021-12-14T01:46:24Z,CLOSED,False,75,23,6,https://github.com/abartlet,kdc: add krb5plugin_windc_pac_pk_generate() hook,1,[],https://github.com/heimdal/heimdal/pull/864,https://github.com/abartlet,5,https://github.com/heimdal/heimdal/pull/864#issuecomment-983423811,"This allows PAC_CRENDENTIAL_INFO to be added to the PAC
when using PKINIT. In that case PAC_CRENDENTIAL_INFO contains
an encrypted PAC_CRENDENTIAL_DATA.
BUG: https://bugzilla.samba.org/show_bug.cgi?id=11441
Signed-off-by: Stefan Metzmacher metze@samba.org
(similar to Samba commit 0022ea9efb0e7809fa2d060b294320eb0479cdd2)","I've built a new commit with all our changes to this PAC API in one commit, so while I'm hesitant to change the pkinit logic which I barely understand I can fix up the API as requested. I'll push once I've tested it in a Samba build.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,864,2021-11-28T23:40:39Z,2021-12-14T01:46:24Z,2021-12-14T01:46:24Z,CLOSED,False,75,23,6,https://github.com/abartlet,kdc: add krb5plugin_windc_pac_pk_generate() hook,1,[],https://github.com/heimdal/heimdal/pull/864,https://github.com/jaltman,6,https://github.com/heimdal/heimdal/pull/864#issuecomment-983450279,"This allows PAC_CRENDENTIAL_INFO to be added to the PAC
when using PKINIT. In that case PAC_CRENDENTIAL_INFO contains
an encrypted PAC_CRENDENTIAL_DATA.
BUG: https://bugzilla.samba.org/show_bug.cgi?id=11441
Signed-off-by: Stefan Metzmacher metze@samba.org
(similar to Samba commit 0022ea9efb0e7809fa2d060b294320eb0479cdd2)",I have not looked at this code carefully but the calling convention for all of the plug-in functions must be KRB5_CALLCONV.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,864,2021-11-28T23:40:39Z,2021-12-14T01:46:24Z,2021-12-14T01:46:24Z,CLOSED,False,75,23,6,https://github.com/abartlet,kdc: add krb5plugin_windc_pac_pk_generate() hook,1,[],https://github.com/heimdal/heimdal/pull/864,https://github.com/abartlet,7,https://github.com/heimdal/heimdal/pull/864#issuecomment-984097526,"This allows PAC_CRENDENTIAL_INFO to be added to the PAC
when using PKINIT. In that case PAC_CRENDENTIAL_INFO contains
an encrypted PAC_CRENDENTIAL_DATA.
BUG: https://bugzilla.samba.org/show_bug.cgi?id=11441
Signed-off-by: Stefan Metzmacher metze@samba.org
(similar to Samba commit 0022ea9efb0e7809fa2d060b294320eb0479cdd2)","Thanks @lhoward for pushing back on this.  On Samba's side we were literally calling the same function anyway, as you might have expected: https://gitlab.com/samba-team/samba/-/blob/master/source4/kdc/wdc-samba4.c#L106
Likely this was a hold-over from a fantasy world where Samba supported multiple system Heimdal versions (we only ever really supported our in-tree vendored copy)",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,864,2021-11-28T23:40:39Z,2021-12-14T01:46:24Z,2021-12-14T01:46:24Z,CLOSED,False,75,23,6,https://github.com/abartlet,kdc: add krb5plugin_windc_pac_pk_generate() hook,1,[],https://github.com/heimdal/heimdal/pull/864,https://github.com/abartlet,8,https://github.com/heimdal/heimdal/pull/864#issuecomment-988392890,"This allows PAC_CRENDENTIAL_INFO to be added to the PAC
when using PKINIT. In that case PAC_CRENDENTIAL_INFO contains
an encrypted PAC_CRENDENTIAL_DATA.
BUG: https://bugzilla.samba.org/show_bug.cgi?id=11441
Signed-off-by: Stefan Metzmacher metze@samba.org
(similar to Samba commit 0022ea9efb0e7809fa2d060b294320eb0479cdd2)","I have not looked at this code carefully but the calling convention for all of the plug-in functions must be KRB5_CALLCONV.

There is no change to calling conventions, they use KRB5_CALLCONV",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,864,2021-11-28T23:40:39Z,2021-12-14T01:46:24Z,2021-12-14T01:46:24Z,CLOSED,False,75,23,6,https://github.com/abartlet,kdc: add krb5plugin_windc_pac_pk_generate() hook,1,[],https://github.com/heimdal/heimdal/pull/864,https://github.com/abartlet,9,https://github.com/heimdal/heimdal/pull/864#issuecomment-988396745,"This allows PAC_CRENDENTIAL_INFO to be added to the PAC
when using PKINIT. In that case PAC_CRENDENTIAL_INFO contains
an encrypted PAC_CRENDENTIAL_DATA.
BUG: https://bugzilla.samba.org/show_bug.cgi?id=11441
Signed-off-by: Stefan Metzmacher metze@samba.org
(similar to Samba commit 0022ea9efb0e7809fa2d060b294320eb0479cdd2)",I think I've addressed the concerns but it might make more sense to land #805 first.  We have a set of these based on that branch available when that lands.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,864,2021-11-28T23:40:39Z,2021-12-14T01:46:24Z,2021-12-14T01:46:24Z,CLOSED,False,75,23,6,https://github.com/abartlet,kdc: add krb5plugin_windc_pac_pk_generate() hook,1,[],https://github.com/heimdal/heimdal/pull/864,https://github.com/abartlet,10,https://github.com/heimdal/heimdal/pull/864#issuecomment-988407188,"This allows PAC_CRENDENTIAL_INFO to be added to the PAC
when using PKINIT. In that case PAC_CRENDENTIAL_INFO contains
an encrypted PAC_CRENDENTIAL_DATA.
BUG: https://bugzilla.samba.org/show_bug.cgi?id=11441
Signed-off-by: Stefan Metzmacher metze@samba.org
(similar to Samba commit 0022ea9efb0e7809fa2d060b294320eb0479cdd2)","This version, after the fix to change the type of r->validated_pa_type gives:
../../source4/heimdal/kdc/kerberos5.c: In function ‘generate_pac’:
../../source4/heimdal/kdc/kerberos5.c:1854:5: error: enumeration value ‘KRB5_PADATA_NONE’ not handled in switch [-Werror=switch]
 1854 |     switch (r->validated_pa_type) {
      |     ^~~~~~

So best if we land #805 first if at all possible as our tested patches are on top of that (due conflicts, particularly with the requested context -> r->context change)",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,864,2021-11-28T23:40:39Z,2021-12-14T01:46:24Z,2021-12-14T01:46:24Z,CLOSED,False,75,23,6,https://github.com/abartlet,kdc: add krb5plugin_windc_pac_pk_generate() hook,1,[],https://github.com/heimdal/heimdal/pull/864,https://github.com/abartlet,11,https://github.com/heimdal/heimdal/pull/864#issuecomment-992082390,"This allows PAC_CRENDENTIAL_INFO to be added to the PAC
when using PKINIT. In that case PAC_CRENDENTIAL_INFO contains
an encrypted PAC_CRENDENTIAL_DATA.
BUG: https://bugzilla.samba.org/show_bug.cgi?id=11441
Signed-off-by: Stefan Metzmacher metze@samba.org
(similar to Samba commit 0022ea9efb0e7809fa2d060b294320eb0479cdd2)","Is it OK if I push this back on top of #805 or will that make the review horrible?  Just trying to ensure I push up the same code I test, which will be in Samba on top of that.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,864,2021-11-28T23:40:39Z,2021-12-14T01:46:24Z,2021-12-14T01:46:24Z,CLOSED,False,75,23,6,https://github.com/abartlet,kdc: add krb5plugin_windc_pac_pk_generate() hook,1,[],https://github.com/heimdal/heimdal/pull/864,https://github.com/lhoward,12,https://github.com/heimdal/heimdal/pull/864#issuecomment-992084047,"This allows PAC_CRENDENTIAL_INFO to be added to the PAC
when using PKINIT. In that case PAC_CRENDENTIAL_INFO contains
an encrypted PAC_CRENDENTIAL_DATA.
BUG: https://bugzilla.samba.org/show_bug.cgi?id=11441
Signed-off-by: Stefan Metzmacher metze@samba.org
(similar to Samba commit 0022ea9efb0e7809fa2d060b294320eb0479cdd2)","I think if it's on top of it, it should be fine, because @nicowilliams will hopefully have that merged soon and you can just rebase back onto master",True,{'ROCKET': ['https://github.com/nicowilliams']}
heimdal/heimdal,https://github.com/heimdal/heimdal,864,2021-11-28T23:40:39Z,2021-12-14T01:46:24Z,2021-12-14T01:46:24Z,CLOSED,False,75,23,6,https://github.com/abartlet,kdc: add krb5plugin_windc_pac_pk_generate() hook,1,[],https://github.com/heimdal/heimdal/pull/864,https://github.com/lhoward,13,https://github.com/heimdal/heimdal/pull/864#issuecomment-993077844,"This allows PAC_CRENDENTIAL_INFO to be added to the PAC
when using PKINIT. In that case PAC_CRENDENTIAL_INFO contains
an encrypted PAC_CRENDENTIAL_DATA.
BUG: https://bugzilla.samba.org/show_bug.cgi?id=11441
Signed-off-by: Stefan Metzmacher metze@samba.org
(similar to Samba commit 0022ea9efb0e7809fa2d060b294320eb0479cdd2)","@abartlet closing this as duplicate of #878, please review latter",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,865,2021-11-29T01:37:30Z,2021-11-29T01:50:27Z,2021-12-02T02:26:26Z,MERGED,True,37,37,37,https://github.com/abartlet,Use UTF-8 in KTH copyright notice,1,[],https://github.com/heimdal/heimdal/pull/865,https://github.com/abartlet,1,https://github.com/heimdal/heimdal/pull/865,"Samba is starting to protect against bi-di attacks and the starting point
is to require that input files be fully UTF-8.  In 2021 this is a reasonable
starting point anyway.
Signed-off-by: Andrew Bartlett abartlet@samba.org","Samba is starting to protect against bi-di attacks and the starting point
is to require that input files be fully UTF-8.  In 2021 this is a reasonable
starting point anyway.
Signed-off-by: Andrew Bartlett abartlet@samba.org",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,865,2021-11-29T01:37:30Z,2021-11-29T01:50:27Z,2021-12-02T02:26:26Z,MERGED,True,37,37,37,https://github.com/abartlet,Use UTF-8 in KTH copyright notice,1,[],https://github.com/heimdal/heimdal/pull/865,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/865#issuecomment-981222612,"Samba is starting to protect against bi-di attacks and the starting point
is to require that input files be fully UTF-8.  In 2021 this is a reasonable
starting point anyway.
Signed-off-by: Andrew Bartlett abartlet@samba.org",LGTM,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,865,2021-11-29T01:37:30Z,2021-11-29T01:50:27Z,2021-12-02T02:26:26Z,MERGED,True,37,37,37,https://github.com/abartlet,Use UTF-8 in KTH copyright notice,1,[],https://github.com/heimdal/heimdal/pull/865,https://github.com/lhoward,3,https://github.com/heimdal/heimdal/pull/865#issuecomment-982188042,"Samba is starting to protect against bi-di attacks and the starting point
is to require that input files be fully UTF-8.  In 2021 this is a reasonable
starting point anyway.
Signed-off-by: Andrew Bartlett abartlet@samba.org","This broke test_cms, my bad for approving it without checking tests ran, I've reverted this commit on lib/hx509/data/static-file; feel free to propose a better fix.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,865,2021-11-29T01:37:30Z,2021-11-29T01:50:27Z,2021-12-02T02:26:26Z,MERGED,True,37,37,37,https://github.com/abartlet,Use UTF-8 in KTH copyright notice,1,[],https://github.com/heimdal/heimdal/pull/865,https://github.com/abartlet,4,https://github.com/heimdal/heimdal/pull/865#issuecomment-982213626,"Samba is starting to protect against bi-di attacks and the starting point
is to require that input files be fully UTF-8.  In 2021 this is a reasonable
starting point anyway.
Signed-off-by: Andrew Bartlett abartlet@samba.org","Sorry about that.  I feel very lost without CI.

I've since worked out that test_nist{,2} isn't spinning, it is just
slow, so one way or another I need to get 'make test' running in a CI
service.

I really didn't expect what looks like a shell script to be a
fixture...

Anyway, a revert is fine, I work around this here:
https://gitlab.com/samba-team/devel/samba/-/commit/de8e5835e64b990bf3d4931c8cf5e893ed688979

Andrew Bartlett",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,865,2021-11-29T01:37:30Z,2021-11-29T01:50:27Z,2021-12-02T02:26:26Z,MERGED,True,37,37,37,https://github.com/abartlet,Use UTF-8 in KTH copyright notice,1,[],https://github.com/heimdal/heimdal/pull/865,https://github.com/jaltman,5,https://github.com/heimdal/heimdal/pull/865#issuecomment-982238177,"Samba is starting to protect against bi-di attacks and the starting point
is to require that input files be fully UTF-8.  In 2021 this is a reasonable
starting point anyway.
Signed-off-by: Andrew Bartlett abartlet@samba.org",Reverted by 8a54096,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,866,2021-11-29T15:15:20Z,2021-11-29T15:26:20Z,2021-11-29T15:28:19Z,MERGED,True,1,1,1,https://github.com/fihuer,"Revert ""KCM wrong size memcmp""",1,[],https://github.com/heimdal/heimdal/pull/866,https://github.com/fihuer,1,https://github.com/heimdal/heimdal/pull/866,"'uuid' is seen as an 'unsigned char*', thus '*uuid' is an 'unsigned char' where size is 1.
This solves a problem where two KCM ccaches's uuid have the same first byte hides each other.
What we observe:

A user cannot discover tickets with (klist -l) but can access it with it's name
The 'rpc.gssd' daemon is doing the same kind of pattern but using GSS calls (gss_acquire_cred)

What GDB told us:

The 'kcm_ccache_get_uuids' is okay, all ccache are really present
The 'kcm_ccache_resolve_by_uuid' is buggy, it only compare the first byte of each uuid.
Which may be the same as the one we're seeking. Selected ccache that will be, most probably, filtered-out afterward with a call to 'kcm_access'.
This leads to 'KRB5_FCC_NOFILE' errors while the uuid is correct.

Similar calls may be present.
This reverts commit 936017e,","'uuid' is seen as an 'unsigned char*', thus '*uuid' is an 'unsigned char' where size is 1.
This solves a problem where two KCM ccaches's uuid have the same first byte hides each other.
What we observe:

A user cannot discover tickets with (klist -l) but can access it with it's name
The 'rpc.gssd' daemon is doing the same kind of pattern but using GSS calls (gss_acquire_cred)

What GDB told us:

The 'kcm_ccache_get_uuids' is okay, all ccache are really present
The 'kcm_ccache_resolve_by_uuid' is buggy, it only compare the first byte of each uuid.
Which may be the same as the one we're seeking. Selected ccache that will be, most probably, filtered-out afterward with a call to 'kcm_access'.
This leads to 'KRB5_FCC_NOFILE' errors while the uuid is correct.

Similar calls may be present.
This reverts commit 936017e,",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,866,2021-11-29T15:15:20Z,2021-11-29T15:26:20Z,2021-11-29T15:28:19Z,MERGED,True,1,1,1,https://github.com/fihuer,"Revert ""KCM wrong size memcmp""",1,[],https://github.com/heimdal/heimdal/pull/866,https://github.com/jaltman,2,https://github.com/heimdal/heimdal/pull/866#issuecomment-981741464,"'uuid' is seen as an 'unsigned char*', thus '*uuid' is an 'unsigned char' where size is 1.
This solves a problem where two KCM ccaches's uuid have the same first byte hides each other.
What we observe:

A user cannot discover tickets with (klist -l) but can access it with it's name
The 'rpc.gssd' daemon is doing the same kind of pattern but using GSS calls (gss_acquire_cred)

What GDB told us:

The 'kcm_ccache_get_uuids' is okay, all ccache are really present
The 'kcm_ccache_resolve_by_uuid' is buggy, it only compare the first byte of each uuid.
Which may be the same as the one we're seeking. Selected ccache that will be, most probably, filtered-out afterward with a call to 'kcm_access'.
This leads to 'KRB5_FCC_NOFILE' errors while the uuid is correct.

Similar calls may be present.
This reverts commit 936017e,",Thank you for this fix.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,866,2021-11-29T15:15:20Z,2021-11-29T15:26:20Z,2021-11-29T15:28:19Z,MERGED,True,1,1,1,https://github.com/fihuer,"Revert ""KCM wrong size memcmp""",1,[],https://github.com/heimdal/heimdal/pull/866,https://github.com/jaltman,3,https://github.com/heimdal/heimdal/pull/866#issuecomment-981743254,"'uuid' is seen as an 'unsigned char*', thus '*uuid' is an 'unsigned char' where size is 1.
This solves a problem where two KCM ccaches's uuid have the same first byte hides each other.
What we observe:

A user cannot discover tickets with (klist -l) but can access it with it's name
The 'rpc.gssd' daemon is doing the same kind of pattern but using GSS calls (gss_acquire_cred)

What GDB told us:

The 'kcm_ccache_get_uuids' is okay, all ccache are really present
The 'kcm_ccache_resolve_by_uuid' is buggy, it only compare the first byte of each uuid.
Which may be the same as the one we're seeking. Selected ccache that will be, most probably, filtered-out afterward with a call to 'kcm_access'.
This leads to 'KRB5_FCC_NOFILE' errors while the uuid is correct.

Similar calls may be present.
This reverts commit 936017e,",Cherry-picked to heimdal-7-1-branch as 49fd9ff,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,867,2021-11-29T23:58:17Z,2021-11-30T16:42:00Z,2021-11-30T21:14:50Z,MERGED,True,187,246,14,https://github.com/nicowilliams,Fix #790,10,[],https://github.com/heimdal/heimdal/pull/867,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/867,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,867,2021-11-29T23:58:17Z,2021-11-30T16:42:00Z,2021-11-30T21:14:50Z,MERGED,True,187,246,14,https://github.com/nicowilliams,Fix #790,10,[],https://github.com/heimdal/heimdal/pull/867,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/867#issuecomment-982176574,,Builds OK on macOS 10.15.7. I'll try with 12 when I am back on my home machine.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,867,2021-11-29T23:58:17Z,2021-11-30T16:42:00Z,2021-11-30T21:14:50Z,MERGED,True,187,246,14,https://github.com/nicowilliams,Fix #790,10,[],https://github.com/heimdal/heimdal/pull/867,https://github.com/jaltman,3,https://github.com/heimdal/heimdal/pull/867#issuecomment-982664774,,"with the exception of tests/kdc/check-iprop all of the tests pass on macOS Apple Silicon with Apple clang version 13.0.0.
all tests pass on 32-bit Windows.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,867,2021-11-29T23:58:17Z,2021-11-30T16:42:00Z,2021-11-30T21:14:50Z,MERGED,True,187,246,14,https://github.com/nicowilliams,Fix #790,10,[],https://github.com/heimdal/heimdal/pull/867,https://github.com/lhoward,4,https://github.com/heimdal/heimdal/pull/867#issuecomment-983011028,,check-iprop hasn't worked for a long time on macOS,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,867,2021-11-29T23:58:17Z,2021-11-30T16:42:00Z,2021-11-30T21:14:50Z,MERGED,True,187,246,14,https://github.com/nicowilliams,Fix #790,10,[],https://github.com/heimdal/heimdal/pull/867,https://github.com/jaltman,5,https://github.com/heimdal/heimdal/pull/867#issuecomment-983026440,,if the test is known to fail we should disable it on macOS so that it doesn't block the execution of the test groups that follow.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,868,2021-12-03T03:49:56Z,2021-12-16T05:09:07Z,2021-12-16T21:49:18Z,MERGED,True,242,128,2,https://github.com/abartlet,Upstream Heimdal-side helpers for Samba's Nov 2021 security release,6,[],https://github.com/heimdal/heimdal/pull/868,https://github.com/abartlet,1,https://github.com/heimdal/heimdal/pull/868,"This proposes the patches that were made to Samba to address the November 2021 Security issues
See https://www.samba.org/samba/security/CVE-2020-25719.html
We made changes to our (older) copy of Heimdal to address these issues and @josephsutton1 has now forward-ported those to modern Heimdal.
(I've written the new longer commit messages)","This proposes the patches that were made to Samba to address the November 2021 Security issues
See https://www.samba.org/samba/security/CVE-2020-25719.html
We made changes to our (older) copy of Heimdal to address these issues and @josephsutton1 has now forward-ported those to modern Heimdal.
(I've written the new longer commit messages)",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,868,2021-12-03T03:49:56Z,2021-12-16T05:09:07Z,2021-12-16T21:49:18Z,MERGED,True,242,128,2,https://github.com/abartlet,Upstream Heimdal-side helpers for Samba's Nov 2021 security release,6,[],https://github.com/heimdal/heimdal/pull/868,https://github.com/abartlet,2,https://github.com/heimdal/heimdal/pull/868#issuecomment-985890852,"This proposes the patches that were made to Samba to address the November 2021 Security issues
See https://www.samba.org/samba/security/CVE-2020-25719.html
We made changes to our (older) copy of Heimdal to address these issues and @josephsutton1 has now forward-ported those to modern Heimdal.
(I've written the new longer commit messages)","Thanks for thinking about interface versions (not something we had to
worry about on Samba's side so I totally forgot).  I can't see that
commit in any release branches.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,868,2021-12-03T03:49:56Z,2021-12-16T05:09:07Z,2021-12-16T21:49:18Z,MERGED,True,242,128,2,https://github.com/abartlet,Upstream Heimdal-side helpers for Samba's Nov 2021 security release,6,[],https://github.com/heimdal/heimdal/pull/868,https://github.com/abartlet,3,https://github.com/heimdal/heimdal/pull/868#issuecomment-992045343,"This proposes the patches that were made to Samba to address the November 2021 Security issues
See https://www.samba.org/samba/security/CVE-2020-25719.html
We made changes to our (older) copy of Heimdal to address these issues and @josephsutton1 has now forward-ported those to modern Heimdal.
(I've written the new longer commit messages)",Is there anything more we need to do on this?,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,868,2021-12-03T03:49:56Z,2021-12-16T05:09:07Z,2021-12-16T21:49:18Z,MERGED,True,242,128,2,https://github.com/abartlet,Upstream Heimdal-side helpers for Samba's Nov 2021 security release,6,[],https://github.com/heimdal/heimdal/pull/868,https://github.com/lhoward,4,https://github.com/heimdal/heimdal/pull/868#issuecomment-992069893,"This proposes the patches that were made to Samba to address the November 2021 Security issues
See https://www.samba.org/samba/security/CVE-2020-25719.html
We made changes to our (older) copy of Heimdal to address these issues and @josephsutton1 has now forward-ported those to modern Heimdal.
(I've written the new longer commit messages)","LGTM except for the comments as noted, @nicowilliams is going to have a look tomorrow as well, because of the nature of the changes",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,868,2021-12-03T03:49:56Z,2021-12-16T05:09:07Z,2021-12-16T21:49:18Z,MERGED,True,242,128,2,https://github.com/abartlet,Upstream Heimdal-side helpers for Samba's Nov 2021 security release,6,[],https://github.com/heimdal/heimdal/pull/868,https://github.com/abartlet,5,https://github.com/heimdal/heimdal/pull/868#issuecomment-992828857,"This proposes the patches that were made to Samba to address the November 2021 Security issues
See https://www.samba.org/samba/security/CVE-2020-25719.html
We made changes to our (older) copy of Heimdal to address these issues and @josephsutton1 has now forward-ported those to modern Heimdal.
(I've written the new longer commit messages)","NOTE:  This triggers a build failure if #805 is rebased on top.  I'm assuming #805 is landing shortly so I'll rebase on that and re-submit today, unless you want the other way around.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,868,2021-12-03T03:49:56Z,2021-12-16T05:09:07Z,2021-12-16T21:49:18Z,MERGED,True,242,128,2,https://github.com/abartlet,Upstream Heimdal-side helpers for Samba's Nov 2021 security release,6,[],https://github.com/heimdal/heimdal/pull/868,https://github.com/lhoward,6,https://github.com/heimdal/heimdal/pull/868#issuecomment-992953077,"This proposes the patches that were made to Samba to address the November 2021 Security issues
See https://www.samba.org/samba/security/CVE-2020-25719.html
We made changes to our (older) copy of Heimdal to address these issues and @josephsutton1 has now forward-ported those to modern Heimdal.
(I've written the new longer commit messages)",#805 merged,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,868,2021-12-03T03:49:56Z,2021-12-16T05:09:07Z,2021-12-16T21:49:18Z,MERGED,True,242,128,2,https://github.com/abartlet,Upstream Heimdal-side helpers for Samba's Nov 2021 security release,6,[],https://github.com/heimdal/heimdal/pull/868,https://github.com/abartlet,7,https://github.com/heimdal/heimdal/pull/868#issuecomment-993109254,"This proposes the patches that were made to Samba to address the November 2021 Security issues
See https://www.samba.org/samba/security/CVE-2020-25719.html
We made changes to our (older) copy of Heimdal to address these issues and @josephsutton1 has now forward-ported those to modern Heimdal.
(I've written the new longer commit messages)",Rebased on master now that #805 is in.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,868,2021-12-03T03:49:56Z,2021-12-16T05:09:07Z,2021-12-16T21:49:18Z,MERGED,True,242,128,2,https://github.com/abartlet,Upstream Heimdal-side helpers for Samba's Nov 2021 security release,6,[],https://github.com/heimdal/heimdal/pull/868,https://github.com/lhoward,8,https://github.com/heimdal/heimdal/pull/868#issuecomment-993219666,"This proposes the patches that were made to Samba to address the November 2021 Security issues
See https://www.samba.org/samba/security/CVE-2020-25719.html
We made changes to our (older) copy of Heimdal to address these issues and @josephsutton1 has now forward-ported those to modern Heimdal.
(I've written the new longer commit messages)","LGTM again but, let's get @nicowilliams to look at.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,868,2021-12-03T03:49:56Z,2021-12-16T05:09:07Z,2021-12-16T21:49:18Z,MERGED,True,242,128,2,https://github.com/abartlet,Upstream Heimdal-side helpers for Samba's Nov 2021 security release,6,[],https://github.com/heimdal/heimdal/pull/868,https://github.com/josephsutton1,9,https://github.com/heimdal/heimdal/pull/868#issuecomment-995384426,"This proposes the patches that were made to Samba to address the November 2021 Security issues
See https://www.samba.org/samba/security/CVE-2020-25719.html
We made changes to our (older) copy of Heimdal to address these issues and @josephsutton1 has now forward-ported those to modern Heimdal.
(I've written the new longer commit messages)",Rebased on master.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,868,2021-12-03T03:49:56Z,2021-12-16T05:09:07Z,2021-12-16T21:49:18Z,MERGED,True,242,128,2,https://github.com/abartlet,Upstream Heimdal-side helpers for Samba's Nov 2021 security release,6,[],https://github.com/heimdal/heimdal/pull/868,https://github.com/abartlet,10,https://github.com/heimdal/heimdal/pull/868#issuecomment-995416675,"This proposes the patches that were made to Samba to address the November 2021 Security issues
See https://www.samba.org/samba/security/CVE-2020-25719.html
We made changes to our (older) copy of Heimdal to address these issues and @josephsutton1 has now forward-ported those to modern Heimdal.
(I've written the new longer commit messages)",I'll get the Samba CVE- prefix stripped here too.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,868,2021-12-03T03:49:56Z,2021-12-16T05:09:07Z,2021-12-16T21:49:18Z,MERGED,True,242,128,2,https://github.com/abartlet,Upstream Heimdal-side helpers for Samba's Nov 2021 security release,6,[],https://github.com/heimdal/heimdal/pull/868,https://github.com/abartlet,11,https://github.com/heimdal/heimdal/pull/868#issuecomment-996219957,"This proposes the patches that were made to Samba to address the November 2021 Security issues
See https://www.samba.org/samba/security/CVE-2020-25719.html
We made changes to our (older) copy of Heimdal to address these issues and @josephsutton1 has now forward-ported those to modern Heimdal.
(I've written the new longer commit messages)",Thanks so much!,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,869,2021-12-03T04:21:20Z,2022-01-24T05:36:34Z,2022-01-24T05:36:35Z,CLOSED,False,99,45,13,https://github.com/abartlet,Address undefined behaviour,4,['refactor'],https://github.com/heimdal/heimdal/pull/869,https://github.com/abartlet,1,https://github.com/heimdal/heimdal/pull/869,"While most of the things fixed here have a long history of consistent behaviour, we all know how much the C compiler authors love to jump on any technically undefined behaviour.
Thankfully tools exist to find such things, and @josephsutton1 spent some time with such tools on Heimdal, resulting in these patches.","While most of the things fixed here have a long history of consistent behaviour, we all know how much the C compiler authors love to jump on any technically undefined behaviour.
Thankfully tools exist to find such things, and @josephsutton1 spent some time with such tools on Heimdal, resulting in these patches.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,869,2021-12-03T04:21:20Z,2022-01-24T05:36:34Z,2022-01-24T05:36:35Z,CLOSED,False,99,45,13,https://github.com/abartlet,Address undefined behaviour,4,['refactor'],https://github.com/heimdal/heimdal/pull/869,https://github.com/abartlet,2,https://github.com/heimdal/heimdal/pull/869#issuecomment-985682482,"While most of the things fixed here have a long history of consistent behaviour, we all know how much the C compiler authors love to jump on any technically undefined behaviour.
Thankfully tools exist to find such things, and @josephsutton1 spent some time with such tools on Heimdal, resulting in these patches.","No worries, we won't push these further given your NACK.  My understanding is that these came up from real-world tools, but I tend to share your views and hope on the line between 'technically undefined' and 'what (I hope) a compiler may dare do'.
@josephsutton1 may wish to comment further.  I'll leave this open for the moment so we don't forget this decision while we work though our list of patches.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,869,2021-12-03T04:21:20Z,2022-01-24T05:36:34Z,2022-01-24T05:36:35Z,CLOSED,False,99,45,13,https://github.com/abartlet,Address undefined behaviour,4,['refactor'],https://github.com/heimdal/heimdal/pull/869,https://github.com/jaltman,3,https://github.com/heimdal/heimdal/pull/869#issuecomment-985684392,"While most of the things fixed here have a long history of consistent behaviour, we all know how much the C compiler authors love to jump on any technically undefined behaviour.
Thankfully tools exist to find such things, and @josephsutton1 spent some time with such tools on Heimdal, resulting in these patches.","@abartlet  There are cases where NULL can be passed as input without length zero.  Those should still be fixed.  Please revise the PR and if you would make use of memset_s() where it is required.
Thanks",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,869,2021-12-03T04:21:20Z,2022-01-24T05:36:34Z,2022-01-24T05:36:35Z,CLOSED,False,99,45,13,https://github.com/abartlet,Address undefined behaviour,4,['refactor'],https://github.com/heimdal/heimdal/pull/869,https://github.com/josephsutton1,4,https://github.com/heimdal/heimdal/pull/869#issuecomment-986301397,"While most of the things fixed here have a long history of consistent behaviour, we all know how much the C compiler authors love to jump on any technically undefined behaviour.
Thankfully tools exist to find such things, and @josephsutton1 spent some time with such tools on Heimdal, resulting in these patches.","Calling memcpy() and memmove() or memset() with a known length of zero is safe. The operations are no-ops.

Unfortunately, that's not necessarily the case, according to the C standard. The definitions of memcpy(), memmove(), and memset() state that the behaviour is undefined if any of the pointer arguments are NULL, and a compiler could make use of this to optimise away existing NULL checks in the source.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,869,2021-12-03T04:21:20Z,2022-01-24T05:36:34Z,2022-01-24T05:36:35Z,CLOSED,False,99,45,13,https://github.com/abartlet,Address undefined behaviour,4,['refactor'],https://github.com/heimdal/heimdal/pull/869,https://github.com/jaltman,5,https://github.com/heimdal/heimdal/pull/869#issuecomment-986305025,"While most of the things fixed here have a long history of consistent behaviour, we all know how much the C compiler authors love to jump on any technically undefined behaviour.
Thankfully tools exist to find such things, and @josephsutton1 spent some time with such tools on Heimdal, resulting in these patches.","@josephsutton1 its fine if the compiler optimizes away NULL checks when the input length is known to be zero.   If the compiler is generating code that copies more than zero bytes when the input is zero, its a bug.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,869,2021-12-03T04:21:20Z,2022-01-24T05:36:34Z,2022-01-24T05:36:35Z,CLOSED,False,99,45,13,https://github.com/abartlet,Address undefined behaviour,4,['refactor'],https://github.com/heimdal/heimdal/pull/869,https://github.com/josephsutton1,6,https://github.com/heimdal/heimdal/pull/869#issuecomment-986308541,"While most of the things fixed here have a long history of consistent behaviour, we all know how much the C compiler authors love to jump on any technically undefined behaviour.
Thankfully tools exist to find such things, and @josephsutton1 spent some time with such tools on Heimdal, resulting in these patches.","That would only be a bug if the pointers passed in were non-NULL. Since undefined behaviour is occurring, the compiler is technically allowed to do anything it likes.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,869,2021-12-03T04:21:20Z,2022-01-24T05:36:34Z,2022-01-24T05:36:35Z,CLOSED,False,99,45,13,https://github.com/abartlet,Address undefined behaviour,4,['refactor'],https://github.com/heimdal/heimdal/pull/869,https://github.com/jaltman,7,https://github.com/heimdal/heimdal/pull/869#issuecomment-986311414,"While most of the things fixed here have a long history of consistent behaviour, we all know how much the C compiler authors love to jump on any technically undefined behaviour.
Thankfully tools exist to find such things, and @josephsutton1 spent some time with such tools on Heimdal, resulting in these patches.",I will approve a change that tests for NULL; I will not approve a change that tests for length equal to zero.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,869,2021-12-03T04:21:20Z,2022-01-24T05:36:34Z,2022-01-24T05:36:35Z,CLOSED,False,99,45,13,https://github.com/abartlet,Address undefined behaviour,4,['refactor'],https://github.com/heimdal/heimdal/pull/869,https://github.com/abartlet,8,https://github.com/heimdal/heimdal/pull/869#issuecomment-986413402,"While most of the things fixed here have a long history of consistent behaviour, we all know how much the C compiler authors love to jump on any technically undefined behaviour.
Thankfully tools exist to find such things, and @josephsutton1 spent some time with such tools on Heimdal, resulting in these patches.","To be fair, an undefined behaviour of skipping the memcpy() when an argument in NULL Is probably safe-ish, and the ovbious thing to do, so not worth guarding against.  Hopefully the NULL cases have a count of 0, and it is all moot.  Ideally you would assert that to be the case.
But once you enter into undefined territory, what is to stop the over-eager compiler just asserting that those pointers can't possibly be NULL any longer, to more drastic ends?
Anyway, I'll add @josephsutton1 to my repo, and you @jaltman have access via the 'allow edits from maintainers'.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,869,2021-12-03T04:21:20Z,2022-01-24T05:36:34Z,2022-01-24T05:36:35Z,CLOSED,False,99,45,13,https://github.com/abartlet,Address undefined behaviour,4,['refactor'],https://github.com/heimdal/heimdal/pull/869,https://github.com/josephsutton1,9,https://github.com/heimdal/heimdal/pull/869#issuecomment-986419178,"While most of the things fixed here have a long history of consistent behaviour, we all know how much the C compiler authors love to jump on any technically undefined behaviour.
Thankfully tools exist to find such things, and @josephsutton1 spent some time with such tools on Heimdal, resulting in these patches.","OK, I've pushed up some changes.

But once you enter into undefined territory, what is to stop the over-eager compiler just asserting that those pointers can't possibly be NULL any longer, to more drastic ends?

Yes, it seems like GCC at least does this in practice: https://www.imperialviolet.org/2016/06/26/nonnull.html",True,{'EYES': ['https://github.com/abartlet']}
heimdal/heimdal,https://github.com/heimdal/heimdal,869,2021-12-03T04:21:20Z,2022-01-24T05:36:34Z,2022-01-24T05:36:35Z,CLOSED,False,99,45,13,https://github.com/abartlet,Address undefined behaviour,4,['refactor'],https://github.com/heimdal/heimdal/pull/869,https://github.com/abartlet,10,https://github.com/heimdal/heimdal/pull/869#issuecomment-986561123,"While most of the things fixed here have a long history of consistent behaviour, we all know how much the C compiler authors love to jump on any technically undefined behaviour.
Thankfully tools exist to find such things, and @josephsutton1 spent some time with such tools on Heimdal, resulting in these patches.","Yes, it seems like GCC at least does this in practice: https://www.imperialviolet.org/2016/06/26/nonnull.html

Yikes...",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,869,2021-12-03T04:21:20Z,2022-01-24T05:36:34Z,2022-01-24T05:36:35Z,CLOSED,False,99,45,13,https://github.com/abartlet,Address undefined behaviour,4,['refactor'],https://github.com/heimdal/heimdal/pull/869,https://github.com/kaduk,11,https://github.com/heimdal/heimdal/pull/869#issuecomment-988524143,"While most of the things fixed here have a long history of consistent behaviour, we all know how much the C compiler authors love to jump on any technically undefined behaviour.
Thankfully tools exist to find such things, and @josephsutton1 spent some time with such tools on Heimdal, resulting in these patches.","I will also add my weight here for the need to check for the zero-length case.  The standard is clear, and we have lots of evidence that compilers will learn to take advantage of it.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,869,2021-12-03T04:21:20Z,2022-01-24T05:36:34Z,2022-01-24T05:36:35Z,CLOSED,False,99,45,13,https://github.com/abartlet,Address undefined behaviour,4,['refactor'],https://github.com/heimdal/heimdal/pull/869,https://github.com/jaltman,12,https://github.com/heimdal/heimdal/pull/869#issuecomment-988738982,"While most of the things fixed here have a long history of consistent behaviour, we all know how much the C compiler authors love to jump on any technically undefined behaviour.
Thankfully tools exist to find such things, and @josephsutton1 spent some time with such tools on Heimdal, resulting in these patches.","https://www.imperialviolet.org/2016/06/26/nonnull.html

I am in favor of

Asserting that the pointers are or are not NULL
Using helper functions that check that both the source and destination are not NULL before calling any of the mem-functions
Providing an allocation function that returns a non-NULL value for size zero.

I am not in favor of adding conditional checks all over the source tree.  They reduce the ease of reading the code and are fragile.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,869,2021-12-03T04:21:20Z,2022-01-24T05:36:34Z,2022-01-24T05:36:35Z,CLOSED,False,99,45,13,https://github.com/abartlet,Address undefined behaviour,4,['refactor'],https://github.com/heimdal/heimdal/pull/869,https://github.com/lhoward,13,https://github.com/heimdal/heimdal/pull/869#issuecomment-988741371,"While most of the things fixed here have a long history of consistent behaviour, we all know how much the C compiler authors love to jump on any technically undefined behaviour.
Thankfully tools exist to find such things, and @josephsutton1 spent some time with such tools on Heimdal, resulting in these patches.",I agree with @jaltman :),True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,869,2021-12-03T04:21:20Z,2022-01-24T05:36:34Z,2022-01-24T05:36:35Z,CLOSED,False,99,45,13,https://github.com/abartlet,Address undefined behaviour,4,['refactor'],https://github.com/heimdal/heimdal/pull/869,https://github.com/jaltman,14,https://github.com/heimdal/heimdal/pull/869#issuecomment-988860189,"While most of the things fixed here have a long history of consistent behaviour, we all know how much the C compiler authors love to jump on any technically undefined behaviour.
Thankfully tools exist to find such things, and @josephsutton1 spent some time with such tools on Heimdal, resulting in these patches.","I think there is an underlying problem with the der functions as it is impossible to distinguish between a freed object and an allocated object whose length is zero.   Calling der_copy_xxxx() on a freed object should cause the library to assert.    Whereas calling der_copy_xxxx() on an allocated object whose length is zero can be handled as a special case or be safely passed to memset() and memcpy().
The same is true for all of the data structures which include some form of 'length' and a pointer whether named 'data', 'contents', etc.
The easy way to make the distinction is for the pointer value to always be non-NULL when allocated regardless of the length.   Then an unallocated object is one that has a NULL pointer.   Add something like this to lib/base
`static const char memZero;
void *
heim_alloc(size_t length)
{
/*
* Distinguish between an allocated and freed object by never returning NULL for size zero.
*/
if (length == 0)
return &memZero;
return malloc(length);
}
void *
heim_calloc(size_t length)
{
/*
* Distinguish between an allocated and freed object by never returning NULL for size zero.
*/
if (length == 0)
return &memZero;
return calloc(1, length);
}
void
heim_free(void **p)
{
if (*p != &memZero && *p != NULL)
free(*p);
*p = NULL;
}`
Note the implementation of heim_free() which prevents against use of a pointer after it has been freed.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,869,2021-12-03T04:21:20Z,2022-01-24T05:36:34Z,2022-01-24T05:36:35Z,CLOSED,False,99,45,13,https://github.com/abartlet,Address undefined behaviour,4,['refactor'],https://github.com/heimdal/heimdal/pull/869,https://github.com/nicowilliams,15,https://github.com/heimdal/heimdal/pull/869#issuecomment-989137698,"While most of the things fixed here have a long history of consistent behaviour, we all know how much the C compiler authors love to jump on any technically undefined behaviour.
Thankfully tools exist to find such things, and @josephsutton1 spent some time with such tools on Heimdal, resulting in these patches.","The DER codec functions don't allocate or release the top-level structure into which they are decoding or which they are releasing.
The DER codec functions have a serious flaw in their signatures: the encoder/decoder should take an optional tag meant to replace the to-be-encoded type's tag.  The hoops I had to jump through to deal with this for proper implementation of IMPLICIT tagging...",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,869,2021-12-03T04:21:20Z,2022-01-24T05:36:34Z,2022-01-24T05:36:35Z,CLOSED,False,99,45,13,https://github.com/abartlet,Address undefined behaviour,4,['refactor'],https://github.com/heimdal/heimdal/pull/869,https://github.com/jaltman,16,https://github.com/heimdal/heimdal/pull/869#issuecomment-1015085446,"While most of the things fixed here have a long history of consistent behaviour, we all know how much the C compiler authors love to jump on any technically undefined behaviour.
Thankfully tools exist to find such things, and @josephsutton1 spent some time with such tools on Heimdal, resulting in these patches.",ef059b8 and 1c93a6f,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,869,2021-12-03T04:21:20Z,2022-01-24T05:36:34Z,2022-01-24T05:36:35Z,CLOSED,False,99,45,13,https://github.com/abartlet,Address undefined behaviour,4,['refactor'],https://github.com/heimdal/heimdal/pull/869,https://github.com/jaltman,17,https://github.com/heimdal/heimdal/pull/869#issuecomment-1017097342,"While most of the things fixed here have a long history of consistent behaviour, we all know how much the C compiler authors love to jump on any technically undefined behaviour.
Thankfully tools exist to find such things, and @josephsutton1 spent some time with such tools on Heimdal, resulting in these patches.","@josephsutton1 #944 is an alternative to the first commit in this PR.
All of the other commits have already been addressed on the master branch.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,869,2021-12-03T04:21:20Z,2022-01-24T05:36:34Z,2022-01-24T05:36:35Z,CLOSED,False,99,45,13,https://github.com/abartlet,Address undefined behaviour,4,['refactor'],https://github.com/heimdal/heimdal/pull/869,https://github.com/jaltman,18,https://github.com/heimdal/heimdal/pull/869#issuecomment-1019738485,"While most of the things fixed here have a long history of consistent behaviour, we all know how much the C compiler authors love to jump on any technically undefined behaviour.
Thankfully tools exist to find such things, and @josephsutton1 spent some time with such tools on Heimdal, resulting in these patches.",all of the issues raised by this pull request have been addressed in other ways.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,870,2021-12-03T04:40:36Z,2021-12-18T00:34:12Z,2021-12-18T00:34:12Z,MERGED,True,298,125,15,https://github.com/abartlet,Fix up lib/roken parse/unparse functions,7,['bug'],https://github.com/heimdal/heimdal/pull/870,https://github.com/abartlet,1,https://github.com/heimdal/heimdal/pull/870,"Another patch by @josephsutton1:
If a function calls unparse_flags() to convert a KDCOptions value into a
string when the 'validate' flag is set, KDCOptions2int() will return 1
<< 31, which becomes −2147483648 when converted to a 32-bit signed
integer. Since the loop in unparse_something() only runs as long as its
input is greater than zero, this will result in nothing being printed to
the buffer. Changing unparse_flags() to take an int64_t avoids this
behaviour, at least until a 64th flag bit is added. We also return an
error value of -1 from unparse_something() if it receives a negative
value.
However, the callers are not checking the result from unparse_flags()
and would still have attempted to log these uninitialised bytes. Modify
some of these callers so that they perform this checking.","Another patch by @josephsutton1:
If a function calls unparse_flags() to convert a KDCOptions value into a
string when the 'validate' flag is set, KDCOptions2int() will return 1
<< 31, which becomes −2147483648 when converted to a 32-bit signed
integer. Since the loop in unparse_something() only runs as long as its
input is greater than zero, this will result in nothing being printed to
the buffer. Changing unparse_flags() to take an int64_t avoids this
behaviour, at least until a 64th flag bit is added. We also return an
error value of -1 from unparse_something() if it receives a negative
value.
However, the callers are not checking the result from unparse_flags()
and would still have attempted to log these uninitialised bytes. Modify
some of these callers so that they perform this checking.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,870,2021-12-03T04:40:36Z,2021-12-18T00:34:12Z,2021-12-18T00:34:12Z,MERGED,True,298,125,15,https://github.com/abartlet,Fix up lib/roken parse/unparse functions,7,['bug'],https://github.com/heimdal/heimdal/pull/870,https://github.com/abartlet,2,https://github.com/heimdal/heimdal/pull/870#issuecomment-985684856,"Another patch by @josephsutton1:
If a function calls unparse_flags() to convert a KDCOptions value into a
string when the 'validate' flag is set, KDCOptions2int() will return 1
<< 31, which becomes −2147483648 when converted to a 32-bit signed
integer. Since the loop in unparse_something() only runs as long as its
input is greater than zero, this will result in nothing being printed to
the buffer. Changing unparse_flags() to take an int64_t avoids this
behaviour, at least until a 64th flag bit is added. We also return an
error value of -1 from unparse_something() if it receives a negative
value.
However, the callers are not checking the result from unparse_flags()
and would still have attempted to log these uninitialised bytes. Modify
some of these callers so that they perform this checking.","Thanks for the feedback.  This, like #869 was some patches that @josephsutton1 had done over our (antipodean) winter which are not on our critical path but wanted to propose upstream for comment rather than just drop.
Again, I'll keep this open just for now to track where we are at, but I think both our efforts are best spent elsewhere, we have plenty of meaningful changes to upstream also.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,870,2021-12-03T04:40:36Z,2021-12-18T00:34:12Z,2021-12-18T00:34:12Z,MERGED,True,298,125,15,https://github.com/abartlet,Fix up lib/roken parse/unparse functions,7,['bug'],https://github.com/heimdal/heimdal/pull/870,https://github.com/jaltman,3,https://github.com/heimdal/heimdal/pull/870#issuecomment-985691342,"Another patch by @josephsutton1:
If a function calls unparse_flags() to convert a KDCOptions value into a
string when the 'validate' flag is set, KDCOptions2int() will return 1
<< 31, which becomes −2147483648 when converted to a 32-bit signed
integer. Since the loop in unparse_something() only runs as long as its
input is greater than zero, this will result in nothing being printed to
the buffer. Changing unparse_flags() to take an int64_t avoids this
behaviour, at least until a 64th flag bit is added. We also return an
error value of -1 from unparse_something() if it receives a negative
value.
However, the callers are not checking the result from unparse_flags()
and would still have attempted to log these uninitialised bytes. Modify
some of these callers so that they perform this checking.",@abartlet There is a real issue here to fix.   The size of the input variable does need to be increased so proper output is generated.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,870,2021-12-03T04:40:36Z,2021-12-18T00:34:12Z,2021-12-18T00:34:12Z,MERGED,True,298,125,15,https://github.com/abartlet,Fix up lib/roken parse/unparse functions,7,['bug'],https://github.com/heimdal/heimdal/pull/870,https://github.com/nicowilliams,4,https://github.com/heimdal/heimdal/pull/870#issuecomment-996931406,"Another patch by @josephsutton1:
If a function calls unparse_flags() to convert a KDCOptions value into a
string when the 'validate' flag is set, KDCOptions2int() will return 1
<< 31, which becomes −2147483648 when converted to a 32-bit signed
integer. Since the loop in unparse_something() only runs as long as its
input is greater than zero, this will result in nothing being printed to
the buffer. Changing unparse_flags() to take an int64_t avoids this
behaviour, at least until a 64th flag bit is added. We also return an
error value of -1 from unparse_something() if it receives a negative
value.
However, the callers are not checking the result from unparse_flags()
and would still have attempted to log these uninitialised bytes. Modify
some of these callers so that they perform this checking.","The problem here is unparse_flags() taking an int.  Enlarging that to int64_t is nice, but I think we should probably make it a uint64_t.  Looking at all calls to unparse_flags() I don't see why not do that.  Also, there are a few callers that pass signed ints that will need slight changes.
EDIT: Ah, we use unparse_units() for parsing flags and units.  That's a problem, since for the latter we need signed, but for the former we'd rather have unsigned.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,870,2021-12-03T04:40:36Z,2021-12-18T00:34:12Z,2021-12-18T00:34:12Z,MERGED,True,298,125,15,https://github.com/abartlet,Fix up lib/roken parse/unparse functions,7,['bug'],https://github.com/heimdal/heimdal/pull/870,https://github.com/nicowilliams,5,https://github.com/heimdal/heimdal/pull/870#issuecomment-996942606,"Another patch by @josephsutton1:
If a function calls unparse_flags() to convert a KDCOptions value into a
string when the 'validate' flag is set, KDCOptions2int() will return 1
<< 31, which becomes −2147483648 when converted to a 32-bit signed
integer. Since the loop in unparse_something() only runs as long as its
input is greater than zero, this will result in nothing being printed to
the buffer. Changing unparse_flags() to take an int64_t avoids this
behaviour, at least until a 64th flag bit is added. We also return an
error value of -1 from unparse_something() if it receives a negative
value.
However, the callers are not checking the result from unparse_flags()
and would still have attempted to log these uninitialised bytes. Modify
some of these callers so that they perform this checking.",I'm going to take a crack at finishing this PR.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,870,2021-12-03T04:40:36Z,2021-12-18T00:34:12Z,2021-12-18T00:34:12Z,MERGED,True,298,125,15,https://github.com/abartlet,Fix up lib/roken parse/unparse functions,7,['bug'],https://github.com/heimdal/heimdal/pull/870,https://github.com/nicowilliams,6,https://github.com/heimdal/heimdal/pull/870#issuecomment-997050783,"Another patch by @josephsutton1:
If a function calls unparse_flags() to convert a KDCOptions value into a
string when the 'validate' flag is set, KDCOptions2int() will return 1
<< 31, which becomes −2147483648 when converted to a 32-bit signed
integer. Since the loop in unparse_something() only runs as long as its
input is greater than zero, this will result in nothing being printed to
the buffer. Changing unparse_flags() to take an int64_t avoids this
behaviour, at least until a 64th flag bit is added. We also return an
error value of -1 from unparse_something() if it receives a negative
value.
However, the callers are not checking the result from unparse_flags()
and would still have attempted to log these uninitialised bytes. Modify
some of these callers so that they perform this checking.","Another thing is that we're not really checking for truncation in unparse_flags() callers...  It's mostly not a problem right now, but I would think we should.  Or, even better, we should have a version of unparse_flags() that allocates the string to write to, asprintf()-style.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,870,2021-12-03T04:40:36Z,2021-12-18T00:34:12Z,2021-12-18T00:34:12Z,MERGED,True,298,125,15,https://github.com/abartlet,Fix up lib/roken parse/unparse functions,7,['bug'],https://github.com/heimdal/heimdal/pull/870,https://github.com/nicowilliams,7,https://github.com/heimdal/heimdal/pull/870#issuecomment-997051723,"Another patch by @josephsutton1:
If a function calls unparse_flags() to convert a KDCOptions value into a
string when the 'validate' flag is set, KDCOptions2int() will return 1
<< 31, which becomes −2147483648 when converted to a 32-bit signed
integer. Since the loop in unparse_something() only runs as long as its
input is greater than zero, this will result in nothing being printed to
the buffer. Changing unparse_flags() to take an int64_t avoids this
behaviour, at least until a 64th flag bit is added. We also return an
error value of -1 from unparse_something() if it receives a negative
value.
However, the callers are not checking the result from unparse_flags()
and would still have attempted to log these uninitialised bytes. Modify
some of these callers so that they perform this checking.","I've force-pushed a version of this to this PR that splits all the parse/unparse units/flags codepaths into signed and unsigned versions, with the signed ones dealing in int64_t and the unsigned ones dealing in uint64_t.  I made parse_bytes() return ssize_t (since, after all, it uses parse_units(), which returns int64_t), and several such differences.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,872,2021-12-07T03:31:20Z,2021-12-07T04:03:22Z,2021-12-14T06:38:57Z,MERGED,True,1,2,1,https://github.com/josephsutton1,Initialise KDC reply,1,['bug'],https://github.com/heimdal/heimdal/pull/872,https://github.com/josephsutton1,1,https://github.com/heimdal/heimdal/pull/872,"The reply structure was not being zero-initialised in all cases, leading to crashes or possible heap corruption on error paths when we later freed it.","The reply structure was not being zero-initialised in all cases, leading to crashes or possible heap corruption on error paths when we later freed it.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,873,2021-12-07T03:34:30Z,2021-12-10T00:23:41Z,2021-12-10T01:20:37Z,CLOSED,False,12,1,1,https://github.com/josephsutton1,kdc: Match Windows when advertising FAST,2,[],https://github.com/heimdal/heimdal/pull/873,https://github.com/josephsutton1,1,https://github.com/heimdal/heimdal/pull/873,"Windows doesn't unconditionally announce PADATA-FX-FAST or PADATA-ENCRYPTED-CHALLENGE, and it doesn't allow PADATA-ENC-TIMESTAMP to be used for preauthentication with FAST.","Windows doesn't unconditionally announce PADATA-FX-FAST or PADATA-ENCRYPTED-CHALLENGE, and it doesn't allow PADATA-ENC-TIMESTAMP to be used for preauthentication with FAST.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,873,2021-12-07T03:34:30Z,2021-12-10T00:23:41Z,2021-12-10T01:20:37Z,CLOSED,False,12,1,1,https://github.com/josephsutton1,kdc: Match Windows when advertising FAST,2,[],https://github.com/heimdal/heimdal/pull/873,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/873#issuecomment-987550193,"Windows doesn't unconditionally announce PADATA-FX-FAST or PADATA-ENCRYPTED-CHALLENGE, and it doesn't allow PADATA-ENC-TIMESTAMP to be used for preauthentication with FAST.",@nicowilliams @jaltman what do you think?,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,873,2021-12-07T03:34:30Z,2021-12-10T00:23:41Z,2021-12-10T01:20:37Z,CLOSED,False,12,1,1,https://github.com/josephsutton1,kdc: Match Windows when advertising FAST,2,[],https://github.com/heimdal/heimdal/pull/873,https://github.com/josephsutton1,3,https://github.com/heimdal/heimdal/pull/873#issuecomment-988460313,"Windows doesn't unconditionally announce PADATA-FX-FAST or PADATA-ENCRYPTED-CHALLENGE, and it doesn't allow PADATA-ENC-TIMESTAMP to be used for preauthentication with FAST.",Re-pushed with a cleaner approach.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,873,2021-12-07T03:34:30Z,2021-12-10T00:23:41Z,2021-12-10T01:20:37Z,CLOSED,False,12,1,1,https://github.com/josephsutton1,kdc: Match Windows when advertising FAST,2,[],https://github.com/heimdal/heimdal/pull/873,https://github.com/lhoward,4,https://github.com/heimdal/heimdal/pull/873#issuecomment-988471383,"Windows doesn't unconditionally announce PADATA-FX-FAST or PADATA-ENCRYPTED-CHALLENGE, and it doesn't allow PADATA-ENC-TIMESTAMP to be used for preauthentication with FAST.",Very nice!,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,873,2021-12-07T03:34:30Z,2021-12-10T00:23:41Z,2021-12-10T01:20:37Z,CLOSED,False,12,1,1,https://github.com/josephsutton1,kdc: Match Windows when advertising FAST,2,[],https://github.com/heimdal/heimdal/pull/873,https://github.com/lhoward,5,https://github.com/heimdal/heimdal/pull/873#issuecomment-988475014,"Windows doesn't unconditionally announce PADATA-FX-FAST or PADATA-ENCRYPTED-CHALLENGE, and it doesn't allow PADATA-ENC-TIMESTAMP to be used for preauthentication with FAST.","We can accept the PR but, can you please add PA_ANNOUNCE back for PADATA-FX-FAST? RFC6113 says ”As with all pre-authentication types, the KDC SHOULD advertise PA-FX-FAST in a PREAUTH_REQUIRED error”. We would prefer to follow the RFC unless you've identified a specific Windows interoperability issue.
Cc @jaltman",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,873,2021-12-07T03:34:30Z,2021-12-10T00:23:41Z,2021-12-10T01:20:37Z,CLOSED,False,12,1,1,https://github.com/josephsutton1,kdc: Match Windows when advertising FAST,2,[],https://github.com/heimdal/heimdal/pull/873,https://github.com/josephsutton1,6,https://github.com/heimdal/heimdal/pull/873#issuecomment-988485889,"Windows doesn't unconditionally announce PADATA-FX-FAST or PADATA-ENCRYPTED-CHALLENGE, and it doesn't allow PADATA-ENC-TIMESTAMP to be used for preauthentication with FAST.","OK, I've pushed without the PA_ANNOUNCE change for now.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,873,2021-12-07T03:34:30Z,2021-12-10T00:23:41Z,2021-12-10T01:20:37Z,CLOSED,False,12,1,1,https://github.com/josephsutton1,kdc: Match Windows when advertising FAST,2,[],https://github.com/heimdal/heimdal/pull/873,https://github.com/abartlet,7,https://github.com/heimdal/heimdal/pull/873#issuecomment-989466960,"Windows doesn't unconditionally announce PADATA-FX-FAST or PADATA-ENCRYPTED-CHALLENGE, and it doesn't allow PADATA-ENC-TIMESTAMP to be used for preauthentication with FAST.","Please make sure those end up as booleans in the kdc configuration
block, so Samba can just set them.

Thanks!",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,873,2021-12-07T03:34:30Z,2021-12-10T00:23:41Z,2021-12-10T01:20:37Z,CLOSED,False,12,1,1,https://github.com/josephsutton1,kdc: Match Windows when advertising FAST,2,[],https://github.com/heimdal/heimdal/pull/873,https://github.com/lhoward,8,https://github.com/heimdal/heimdal/pull/873#issuecomment-989491922,"Windows doesn't unconditionally announce PADATA-FX-FAST or PADATA-ENCRYPTED-CHALLENGE, and it doesn't allow PADATA-ENC-TIMESTAMP to be used for preauthentication with FAST.","I pushed a patch we can accept to the tip of #805. But this breaks check-fast on master, because (on a superficial analysis) it attempts to use ENC-TS inside FAST and when that fails removes it from the list of acceptable mechanisms. This presumably got fixed by the Apple code.
(Did you run make check with this PR?)
What does this mean? Practically, if we’ve shipped the FAST client code in master, then I guess we can’t accept this patch unless it’s behind a runtime flag.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,873,2021-12-07T03:34:30Z,2021-12-10T00:23:41Z,2021-12-10T01:20:37Z,CLOSED,False,12,1,1,https://github.com/josephsutton1,kdc: Match Windows when advertising FAST,2,[],https://github.com/heimdal/heimdal/pull/873,https://github.com/lhoward,9,https://github.com/heimdal/heimdal/pull/873#issuecomment-989492602,"Windows doesn't unconditionally announce PADATA-FX-FAST or PADATA-ENCRYPTED-CHALLENGE, and it doesn't allow PADATA-ENC-TIMESTAMP to be used for preauthentication with FAST.","Gah, looks like I haven’t pushed the change to #805 yet. I will tonight. But, yes, I think we need to make sure existing Heimdal clients aren’t broken. And that FAST AS code has been there for a while.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,873,2021-12-07T03:34:30Z,2021-12-10T00:23:41Z,2021-12-10T01:20:37Z,CLOSED,False,12,1,1,https://github.com/josephsutton1,kdc: Match Windows when advertising FAST,2,[],https://github.com/heimdal/heimdal/pull/873,https://github.com/lhoward,10,https://github.com/heimdal/heimdal/pull/873#issuecomment-989494025,"Windows doesn't unconditionally announce PADATA-FX-FAST or PADATA-ENCRYPTED-CHALLENGE, and it doesn't allow PADATA-ENC-TIMESTAMP to be used for preauthentication with FAST.","But yes, my patch is effectively what you that pushed, with a small stylistic change. Is tests/kdc/check-fast working on master for you with this change? If so, perhaps I missed something. If not, then see above.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,873,2021-12-07T03:34:30Z,2021-12-10T00:23:41Z,2021-12-10T01:20:37Z,CLOSED,False,12,1,1,https://github.com/josephsutton1,kdc: Match Windows when advertising FAST,2,[],https://github.com/heimdal/heimdal/pull/873,https://github.com/josephsutton1,11,https://github.com/heimdal/heimdal/pull/873#issuecomment-989501580,"Windows doesn't unconditionally announce PADATA-FX-FAST or PADATA-ENCRYPTED-CHALLENGE, and it doesn't allow PADATA-ENC-TIMESTAMP to be used for preauthentication with FAST.","I haven't tried running tests/kdc/check-fast yet, but I will do so and try to sort out any failures.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,873,2021-12-07T03:34:30Z,2021-12-10T00:23:41Z,2021-12-10T01:20:37Z,CLOSED,False,12,1,1,https://github.com/josephsutton1,kdc: Match Windows when advertising FAST,2,[],https://github.com/heimdal/heimdal/pull/873,https://github.com/lhoward,12,https://github.com/heimdal/heimdal/pull/873#issuecomment-989503193,"Windows doesn't unconditionally announce PADATA-FX-FAST or PADATA-ENCRYPTED-CHALLENGE, and it doesn't allow PADATA-ENC-TIMESTAMP to be used for preauthentication with FAST.","Great. The only thing is, if we have shipped a broken client then we probably can’t change the KDC. This probably means master might fail with FAST against Windows too, have you tried that?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,873,2021-12-07T03:34:30Z,2021-12-10T00:23:41Z,2021-12-10T01:20:37Z,CLOSED,False,12,1,1,https://github.com/josephsutton1,kdc: Match Windows when advertising FAST,2,[],https://github.com/heimdal/heimdal/pull/873,https://github.com/lhoward,13,https://github.com/heimdal/heimdal/pull/873#issuecomment-990441045,"Windows doesn't unconditionally announce PADATA-FX-FAST or PADATA-ENCRYPTED-CHALLENGE, and it doesn't allow PADATA-ENC-TIMESTAMP to be used for preauthentication with FAST.","The change to ignore PA_NOT_IN_FAST pre-authentication types when FAST is used is breaking the AS client on master, because there's no support for PA-ENCRYPTED-CHALLENGE. (It works with #805.) As far as I can tell, FAST support did ship in Heimdal 7.x.
After discussing with the team, we're going to close this PR and instead use #875 as a means of disabling PA-ENC-TIMESTAMP.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,873,2021-12-07T03:34:30Z,2021-12-10T00:23:41Z,2021-12-10T01:20:37Z,CLOSED,False,12,1,1,https://github.com/josephsutton1,kdc: Match Windows when advertising FAST,2,[],https://github.com/heimdal/heimdal/pull/873,https://github.com/abartlet,14,https://github.com/heimdal/heimdal/pull/873#issuecomment-990486899,"Windows doesn't unconditionally announce PADATA-FX-FAST or PADATA-ENCRYPTED-CHALLENGE, and it doesn't allow PADATA-ENC-TIMESTAMP to be used for preauthentication with FAST.","That makes sense, matching Windows while breaking ones own clients makes little sense, if PA-ENC-TIMESTAMP is no weaker in FAST than outside and there is no change in what ticket it becomes because of the FAST armour.  Samba may have to do differently but we will work that out ourselves, probably via an extension to #875",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,874,2021-12-07T03:35:53Z,2021-12-07T04:31:58Z,2021-12-14T06:38:31Z,MERGED,True,18,1,3,https://github.com/josephsutton1,kdc: Check for unsupported critical FAST options,2,['bug'],https://github.com/heimdal/heimdal/pull/874,https://github.com/josephsutton1,1,https://github.com/heimdal/heimdal/pull/874,They were not previously being checked for.,They were not previously being checked for.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,874,2021-12-07T03:35:53Z,2021-12-07T04:31:58Z,2021-12-14T06:38:31Z,MERGED,True,18,1,3,https://github.com/josephsutton1,kdc: Check for unsupported critical FAST options,2,['bug'],https://github.com/heimdal/heimdal/pull/874,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/874#issuecomment-987549244,They were not previously being checked for.,"I don't know if we want the reserved patch, the RFC doesn't say we should reject if reserved is set.
Could you resubmit with just the new error code? I don't think we need the critical flags in the ASN.1 either.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,874,2021-12-07T03:35:53Z,2021-12-07T04:31:58Z,2021-12-14T06:38:31Z,MERGED,True,18,1,3,https://github.com/josephsutton1,kdc: Check for unsupported critical FAST options,2,['bug'],https://github.com/heimdal/heimdal/pull/874,https://github.com/josephsutton1,3,https://github.com/heimdal/heimdal/pull/874#issuecomment-987558673,They were not previously being checked for.,"OK, I removed the check for the 'reserved' flag. Is there a way to detect unsupported options without adding them to the ASN.1? If I don't add them, decode_KrbFastReq() will only set the bits of fastreq.fast_options that are listed in the ASN.1, and then the check won't do anything.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,874,2021-12-07T03:35:53Z,2021-12-07T04:31:58Z,2021-12-14T06:38:31Z,MERGED,True,18,1,3,https://github.com/josephsutton1,kdc: Check for unsupported critical FAST options,2,['bug'],https://github.com/heimdal/heimdal/pull/874,https://github.com/lhoward,4,https://github.com/heimdal/heimdal/pull/874#issuecomment-987559650,They were not previously being checked for.,"Ah, didn't know that. Well, I'm happy to take the patch then unless @nicowilliams has a better idea? He's the ASN.1 compiler expert.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,875,2021-12-09T03:40:09Z,2021-12-14T06:32:20Z,2021-12-15T23:00:18Z,MERGED,True,97,7,6,https://github.com/nicowilliams,Improve weak preauth config options,3,['feature request'],https://github.com/heimdal/heimdal/pull/875,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/875,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,875,2021-12-09T03:40:09Z,2021-12-14T06:32:20Z,2021-12-15T23:00:18Z,MERGED,True,97,7,6,https://github.com/nicowilliams,Improve weak preauth config options,3,['feature request'],https://github.com/heimdal/heimdal/pull/875,https://github.com/abartlet,2,https://github.com/heimdal/heimdal/pull/875#issuecomment-989573745,,If this is enforced by default (as it appears to be) wouldn't this break many existing clients?  How many clients currently do anonymous PKINIT strengthened FAST by default?,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,875,2021-12-09T03:40:09Z,2021-12-14T06:32:20Z,2021-12-15T23:00:18Z,MERGED,True,97,7,6,https://github.com/nicowilliams,Improve weak preauth config options,3,['feature request'],https://github.com/heimdal/heimdal/pull/875,https://github.com/lhoward,3,https://github.com/heimdal/heimdal/pull/875#issuecomment-989595918,,"If this is enforced by default (as it appears to be) wouldn't this break many existing clients? How many clients currently do anonymous PKINIT strengthened FAST by default?

Both are disabled by default, no?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,875,2021-12-09T03:40:09Z,2021-12-14T06:32:20Z,2021-12-15T23:00:18Z,MERGED,True,97,7,6,https://github.com/nicowilliams,Improve weak preauth config options,3,['feature request'],https://github.com/heimdal/heimdal/pull/875,https://github.com/abartlet,4,https://github.com/heimdal/heimdal/pull/875#issuecomment-989620693,,c->enable_weak_preauth = FALSE;,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,875,2021-12-09T03:40:09Z,2021-12-14T06:32:20Z,2021-12-15T23:00:18Z,MERGED,True,97,7,6,https://github.com/nicowilliams,Improve weak preauth config options,3,['feature request'],https://github.com/heimdal/heimdal/pull/875,https://github.com/lhoward,5,https://github.com/heimdal/heimdal/pull/875#issuecomment-989621975,,Right you are :),True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,875,2021-12-09T03:40:09Z,2021-12-14T06:32:20Z,2021-12-15T23:00:18Z,MERGED,True,97,7,6,https://github.com/nicowilliams,Improve weak preauth config options,3,['feature request'],https://github.com/heimdal/heimdal/pull/875,https://github.com/abartlet,6,https://github.com/heimdal/heimdal/pull/875#issuecomment-990489256,,"Would a tri-state make sense here, being disabled, disabled-in-fast and enabled?
Samba could then set disabled-in-fast to avoid a situation where we try to combine the PAC from the armor into a claims PAC if there is no strong linkage.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,875,2021-12-09T03:40:09Z,2021-12-14T06:32:20Z,2021-12-15T23:00:18Z,MERGED,True,97,7,6,https://github.com/nicowilliams,Improve weak preauth config options,3,['feature request'],https://github.com/heimdal/heimdal/pull/875,https://github.com/lhoward,7,https://github.com/heimdal/heimdal/pull/875#issuecomment-990506587,,"Would a tri-state make sense here, being disabled, disabled-in-fast and enabled?
Samba could then set disabled-in-fast to avoid a situation where we try to combine the PAC from the armor into a claims PAC if there is no strong linkage.

As I read the code, the KDC strengthens the reply key with the armour key even when PA-ENC-TIMESTAMP is used. The only difference is that for PA-ENCRYPTED-CHALLENGE, the client library (#805 branch) requires a strengthen key, as mandated by RFC 6113.
So the question is, what additional cryptographic value does including the armour key in the challenge key derivation provide? RFC 6113 says: ”Because the armor key is fresh and random, the challenge key is fresh and random”, which makes sense. But the whole thing is protected by KrbFastArmoredReq anyway, so I'm not sure if allowing PA-ENC-TIMESTAMP inside FAST is a vulnerability. But, I am not a cryptographer.
Anyway, tri-state as you suggest sounds like a good idea to me. @nicowilliams?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,875,2021-12-09T03:40:09Z,2021-12-14T06:32:20Z,2021-12-15T23:00:18Z,MERGED,True,97,7,6,https://github.com/nicowilliams,Improve weak preauth config options,3,['feature request'],https://github.com/heimdal/heimdal/pull/875,https://github.com/abartlet,8,https://github.com/heimdal/heimdal/pull/875#issuecomment-990539056,,"Thanks so much for looking that over, and providing that reassurance, I really should have done that research.  Thanks for considering a tri-state, that sounds like a good way for us to have a mode that passes Samba's current 'strictly windows behaviour' tests.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,875,2021-12-09T03:40:09Z,2021-12-14T06:32:20Z,2021-12-15T23:00:18Z,MERGED,True,97,7,6,https://github.com/nicowilliams,Improve weak preauth config options,3,['feature request'],https://github.com/heimdal/heimdal/pull/875,https://github.com/nicowilliams,9,https://github.com/heimdal/heimdal/pull/875#issuecomment-991372800,,"Indeed, it breaks our own tests.  I was being optimistic :) and trying to see if this got reviewed!  OK, the last part is a lie :), but ex-post it was my intent ;)
I'll enable weak preauth.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,875,2021-12-09T03:40:09Z,2021-12-14T06:32:20Z,2021-12-15T23:00:18Z,MERGED,True,97,7,6,https://github.com/nicowilliams,Improve weak preauth config options,3,['feature request'],https://github.com/heimdal/heimdal/pull/875,https://github.com/nicowilliams,10,https://github.com/heimdal/heimdal/pull/875#issuecomment-991373345,,"Would a tri-state make sense here, being disabled, disabled-in-fast and enabled?

@abartlet @lhoward I think ""no"" if we can just always strengthen ENC-TIMESTAMP in FAST, then there's no harm from allowing it in FAST, so we might as well have just a boolean.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,875,2021-12-09T03:40:09Z,2021-12-14T06:32:20Z,2021-12-15T23:00:18Z,MERGED,True,97,7,6,https://github.com/nicowilliams,Improve weak preauth config options,3,['feature request'],https://github.com/heimdal/heimdal/pull/875,https://github.com/lhoward,11,https://github.com/heimdal/heimdal/pull/875#issuecomment-991404819,,Only other question is whether enable_weak_preauth is perhaps a bit too broad a name for the configuration key. I know it's a balance but perhaps enable_pa_timestamp might be better? (or disable_pa_timestamp),True,{'THUMBS_UP': ['https://github.com/nicowilliams']}
heimdal/heimdal,https://github.com/heimdal/heimdal,875,2021-12-09T03:40:09Z,2021-12-14T06:32:20Z,2021-12-15T23:00:18Z,MERGED,True,97,7,6,https://github.com/nicowilliams,Improve weak preauth config options,3,['feature request'],https://github.com/heimdal/heimdal/pull/875,https://github.com/abartlet,12,https://github.com/heimdal/heimdal/pull/875#issuecomment-991933399,,"Samba would like the option to match AD byte-for-byte if possible, even
if there is no specific protocol need.

We have a very strict set of tests now and it helps us chase down and
isolate issues if we can just match exactly.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,875,2021-12-09T03:40:09Z,2021-12-14T06:32:20Z,2021-12-15T23:00:18Z,MERGED,True,97,7,6,https://github.com/nicowilliams,Improve weak preauth config options,3,['feature request'],https://github.com/heimdal/heimdal/pull/875,https://github.com/lhoward,13,https://github.com/heimdal/heimdal/pull/875#issuecomment-991983708,,"Could you just not test this? ;) Anyway, I have no objection to the tri-state but I'm going to leave it to @nicowilliams.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,875,2021-12-09T03:40:09Z,2021-12-14T06:32:20Z,2021-12-15T23:00:18Z,MERGED,True,97,7,6,https://github.com/nicowilliams,Improve weak preauth config options,3,['feature request'],https://github.com/heimdal/heimdal/pull/875,https://github.com/nicowilliams,14,https://github.com/heimdal/heimdal/pull/875#issuecomment-993065927,,"Samba would like the option to match AD byte-for-byte if possible, even
if there is no specific protocol need.
We have a very strict set of tests now and it helps us chase down and
isolate issues if we can just match exactly.

I'll make it two boolean parameters then.  I don't really like tri-states.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,875,2021-12-09T03:40:09Z,2021-12-14T06:32:20Z,2021-12-15T23:00:18Z,MERGED,True,97,7,6,https://github.com/nicowilliams,Improve weak preauth config options,3,['feature request'],https://github.com/heimdal/heimdal/pull/875,https://github.com/lhoward,15,https://github.com/heimdal/heimdal/pull/875#issuecomment-993202992,,LGTM.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,875,2021-12-09T03:40:09Z,2021-12-14T06:32:20Z,2021-12-15T23:00:18Z,MERGED,True,97,7,6,https://github.com/nicowilliams,Improve weak preauth config options,3,['feature request'],https://github.com/heimdal/heimdal/pull/875,https://github.com/abartlet,16,https://github.com/heimdal/heimdal/pull/875#issuecomment-994217691,,"This breaks Samba where a kinit with an expired password now fails against our DC with:
Client (WELLKNOWN/ANONYMOUS@SAMBA2008R2.EXAMPLE.COM) unknown

https://gitlab.com/samba-team/devel/samba/-/jobs/1881717562#L1828
I can confirm that a revert of 313caed fixes make test TESTS=samba4.blackbox.kinit",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,875,2021-12-09T03:40:09Z,2021-12-14T06:32:20Z,2021-12-15T23:00:18Z,MERGED,True,97,7,6,https://github.com/nicowilliams,Improve weak preauth config options,3,['feature request'],https://github.com/heimdal/heimdal/pull/875,https://github.com/nicowilliams,17,https://github.com/heimdal/heimdal/pull/875#issuecomment-994303307,,"This breaks Samba where a kinit with an expired password now fails against our DC with:
Client (WELLKNOWN/ANONYMOUS@SAMBA2008R2.EXAMPLE.COM) unknown

https://gitlab.com/samba-team/devel/samba/-/jobs/1881717562#L1828
I can confirm that a revert of 313caed fixes make test TESTS=samba4.blackbox.kinit

Thanks for the report.  I'll fix it.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,875,2021-12-09T03:40:09Z,2021-12-14T06:32:20Z,2021-12-15T23:00:18Z,MERGED,True,97,7,6,https://github.com/nicowilliams,Improve weak preauth config options,3,['feature request'],https://github.com/heimdal/heimdal/pull/875,https://github.com/nicowilliams,18,https://github.com/heimdal/heimdal/pull/875#issuecomment-994406382,,"Wow, this took me down a rabbit hole.
First of all, when kpasswdd rejects a new password then we get get_new_tickets() returning ENOTTY because we don't actually have a KRB5 error code for that.  Ugh.  (EDIT: No, we do have errors for this: KADM5_PASS_Q_*, though we're missing KADM5_PASS_Q_GENERIC, and we're not mapping the new password rejection reason to one of them.  ENOTTY is a hack that I will have to fix.)
Second, we have a KRB5_FAST_OPTIMISTIC flag for FAST state in init_creds_pw.c, but we don't ever set it.  In fact, it's exactly what I want, and then I can go back to not having a fallback in kinit (though the remaining changes to it would remain).  So I need a setter for this option.
I'll continue tomorrow.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,875,2021-12-09T03:40:09Z,2021-12-14T06:32:20Z,2021-12-15T23:00:18Z,MERGED,True,97,7,6,https://github.com/nicowilliams,Improve weak preauth config options,3,['feature request'],https://github.com/heimdal/heimdal/pull/875,https://github.com/abartlet,19,https://github.com/heimdal/heimdal/pull/875#issuecomment-994448872,,"Thanks for digging into this.  This isn't blocking us, I've just put a revert into our patch set for now.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,875,2021-12-09T03:40:09Z,2021-12-14T06:32:20Z,2021-12-15T23:00:18Z,MERGED,True,97,7,6,https://github.com/nicowilliams,Improve weak preauth config options,3,['feature request'],https://github.com/heimdal/heimdal/pull/875,https://github.com/nicowilliams,20,https://github.com/heimdal/heimdal/pull/875#issuecomment-995188776,,I've reverted that commit and am reworking it.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,877,2021-12-14T01:13:57Z,2021-12-14T01:18:24Z,2021-12-14T01:18:52Z,MERGED,True,2,5,1,https://github.com/josephsutton1,asn1: Fix binary search off-by-one read,1,['bug'],https://github.com/heimdal/heimdal/pull/877,https://github.com/josephsutton1,1,https://github.com/heimdal/heimdal/pull/877,"Previously, if left==right==A1_HEADER_LEN(tos), this would read past the end of the template array. Now we treat [left, right) as a half-open interval and no longer try to read from 'right'.","Previously, if left==right==A1_HEADER_LEN(tos), this would read past the end of the template array. Now we treat [left, right) as a half-open interval and no longer try to read from 'right'.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,877,2021-12-14T01:13:57Z,2021-12-14T01:18:24Z,2021-12-14T01:18:52Z,MERGED,True,2,5,1,https://github.com/josephsutton1,asn1: Fix binary search off-by-one read,1,['bug'],https://github.com/heimdal/heimdal/pull/877,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/877#issuecomment-993065235,"Previously, if left==right==A1_HEADER_LEN(tos), this would read past the end of the template array. Now we treat [left, right) as a half-open interval and no longer try to read from 'right'.",Thanks!,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,878,2021-12-14T01:45:06Z,2021-12-14T02:51:53Z,2021-12-14T02:51:53Z,MERGED,True,85,35,6,https://github.com/lhoward,kdc: update PAC hooks for Samba,2,"['feature request', 'bug']",https://github.com/heimdal/heimdal/pull/878,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/878,"Samba includes the user's long-term credentials (encrypted in the AS reply key) to allow legacy authentication protocols such as NTLM to work even if the pre-authentication mechanism replaced the reply key (as PKINIT does).
Samba also needs to know whether the client explicitly requested a PAC be included (or excluded), in order to defer PAC exclusion until a service ticket is issued (thereby avoiding a name binding attack if the user is renamed between TGT and service ticket issuance).
References:
https://bugzilla.samba.org/show_bug.cgi?id=11441
https://bugzilla.samba.org/show_bug.cgi?id=14561
Closes: #864
Original authors:

Joseph Sutton josephsutton@catalyst.net.nz
Andrew Bartlett abartlet@samba.org
Stefan Metzmacher metze@samba.org","Samba includes the user's long-term credentials (encrypted in the AS reply key) to allow legacy authentication protocols such as NTLM to work even if the pre-authentication mechanism replaced the reply key (as PKINIT does).
Samba also needs to know whether the client explicitly requested a PAC be included (or excluded), in order to defer PAC exclusion until a service ticket is issued (thereby avoiding a name binding attack if the user is renamed between TGT and service ticket issuance).
References:
https://bugzilla.samba.org/show_bug.cgi?id=11441
https://bugzilla.samba.org/show_bug.cgi?id=14561
Closes: #864
Original authors:

Joseph Sutton josephsutton@catalyst.net.nz
Andrew Bartlett abartlet@samba.org
Stefan Metzmacher metze@samba.org",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,878,2021-12-14T01:45:06Z,2021-12-14T02:51:53Z,2021-12-14T02:51:53Z,MERGED,True,85,35,6,https://github.com/lhoward,kdc: update PAC hooks for Samba,2,"['feature request', 'bug']",https://github.com/heimdal/heimdal/pull/878,https://github.com/abartlet,2,https://github.com/heimdal/heimdal/pull/878#issuecomment-993084066,"Samba includes the user's long-term credentials (encrypted in the AS reply key) to allow legacy authentication protocols such as NTLM to work even if the pre-authentication mechanism replaced the reply key (as PKINIT does).
Samba also needs to know whether the client explicitly requested a PAC be included (or excluded), in order to defer PAC exclusion until a service ticket is issued (thereby avoiding a name binding attack if the user is renamed between TGT and service ticket issuance).
References:
https://bugzilla.samba.org/show_bug.cgi?id=11441
https://bugzilla.samba.org/show_bug.cgi?id=14561
Closes: #864
Original authors:

Joseph Sutton josephsutton@catalyst.net.nz
Andrew Bartlett abartlet@samba.org
Stefan Metzmacher metze@samba.org","Looking at this now, will run the Samba tests and let you know, but
happy with the concept.

The boolean will be useful for auditing also.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,878,2021-12-14T01:45:06Z,2021-12-14T02:51:53Z,2021-12-14T02:51:53Z,MERGED,True,85,35,6,https://github.com/lhoward,kdc: update PAC hooks for Samba,2,"['feature request', 'bug']",https://github.com/heimdal/heimdal/pull/878,https://github.com/lhoward,3,https://github.com/heimdal/heimdal/pull/878#issuecomment-993094292,"Samba includes the user's long-term credentials (encrypted in the AS reply key) to allow legacy authentication protocols such as NTLM to work even if the pre-authentication mechanism replaced the reply key (as PKINIT does).
Samba also needs to know whether the client explicitly requested a PAC be included (or excluded), in order to defer PAC exclusion until a service ticket is issued (thereby avoiding a name binding attack if the user is renamed between TGT and service ticket issuance).
References:
https://bugzilla.samba.org/show_bug.cgi?id=11441
https://bugzilla.samba.org/show_bug.cgi?id=14561
Closes: #864
Original authors:

Joseph Sutton josephsutton@catalyst.net.nz
Andrew Bartlett abartlet@samba.org
Stefan Metzmacher metze@samba.org",Unless I've missed something – which is entirely possible – it's exactly your patch with the requested changes :),True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,878,2021-12-14T01:45:06Z,2021-12-14T02:51:53Z,2021-12-14T02:51:53Z,MERGED,True,85,35,6,https://github.com/lhoward,kdc: update PAC hooks for Samba,2,"['feature request', 'bug']",https://github.com/heimdal/heimdal/pull/878,https://github.com/abartlet,4,https://github.com/heimdal/heimdal/pull/878#issuecomment-993102471,"Samba includes the user's long-term credentials (encrypted in the AS reply key) to allow legacy authentication protocols such as NTLM to work even if the pre-authentication mechanism replaced the reply key (as PKINIT does).
Samba also needs to know whether the client explicitly requested a PAC be included (or excluded), in order to defer PAC exclusion until a service ticket is issued (thereby avoiding a name binding attack if the user is renamed between TGT and service ticket issuance).
References:
https://bugzilla.samba.org/show_bug.cgi?id=11441
https://bugzilla.samba.org/show_bug.cgi?id=14561
Closes: #864
Original authors:

Joseph Sutton josephsutton@catalyst.net.nz
Andrew Bartlett abartlet@samba.org
Stefan Metzmacher metze@samba.org",This passes make test TESTS=pkinit in Samba.  Full CI going on here: https://gitlab.com/samba-team/devel/samba/-/pipelines/428830347,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,879,2021-12-14T02:01:21Z,2021-12-14T05:19:02Z,2021-12-14T06:38:12Z,MERGED,True,36,2,4,https://github.com/josephsutton1,kdc: Add support for explicit armoring from MS-KILE,1,['feature request'],https://github.com/heimdal/heimdal/pull/879,https://github.com/josephsutton1,1,https://github.com/heimdal/heimdal/pull/879,This is required for compound identity.,This is required for compound identity.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,879,2021-12-14T02:01:21Z,2021-12-14T05:19:02Z,2021-12-14T06:38:12Z,MERGED,True,36,2,4,https://github.com/josephsutton1,kdc: Add support for explicit armoring from MS-KILE,1,['feature request'],https://github.com/heimdal/heimdal/pull/879,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/879#issuecomment-993108940,This is required for compound identity.,"LGTM, but given this is not described in RFC6113 and is very poorly described in [MS-KILE] 3.3.5.7.4, could you update the commit message with a bit of an explanation of what's going on?
e.g. when FAST is used with a TGS-REQ, the armour key is usually implicitly derived from the TGT rather than being explicitly included as it is for AS-REQs. Windows allows an armour key to be explicitly provided for TGS-REQs as well, because... (more research as to why may be required)",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,879,2021-12-14T02:01:21Z,2021-12-14T05:19:02Z,2021-12-14T06:38:12Z,MERGED,True,36,2,4,https://github.com/josephsutton1,kdc: Add support for explicit armoring from MS-KILE,1,['feature request'],https://github.com/heimdal/heimdal/pull/879,https://github.com/lhoward,3,https://github.com/heimdal/heimdal/pull/879#issuecomment-993109250,This is required for compound identity.,"Ah, I guess it is to allow the device claims to be propagated from an armour TGT.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,879,2021-12-14T02:01:21Z,2021-12-14T05:19:02Z,2021-12-14T06:38:12Z,MERGED,True,36,2,4,https://github.com/josephsutton1,kdc: Add support for explicit armoring from MS-KILE,1,['feature request'],https://github.com/heimdal/heimdal/pull/879,https://github.com/josephsutton1,4,https://github.com/heimdal/heimdal/pull/879#issuecomment-993138953,This is required for compound identity.,"OK, I added some more information to the commit message.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,880,2021-12-14T02:07:05Z,2021-12-14T02:20:11Z,2021-12-14T06:37:54Z,MERGED,True,4,3,1,https://github.com/josephsutton1,krb5: Check asprintf return value,1,['bug'],https://github.com/heimdal/heimdal/pull/880,https://github.com/josephsutton1,1,https://github.com/heimdal/heimdal/pull/880,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,881,2021-12-14T02:16:26Z,2021-12-14T03:30:00Z,2021-12-14T06:37:31Z,MERGED,True,2,1,1,https://github.com/josephsutton1,kdc: Allow RODC-issued armor tickets,1,['feature request'],https://github.com/heimdal/heimdal/pull/881,https://github.com/josephsutton1,1,https://github.com/heimdal/heimdal/pull/881,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,881,2021-12-14T02:16:26Z,2021-12-14T03:30:00Z,2021-12-14T06:37:31Z,MERGED,True,2,1,1,https://github.com/josephsutton1,kdc: Allow RODC-issued armor tickets,1,['feature request'],https://github.com/heimdal/heimdal/pull/881,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/881#issuecomment-993115392,,"It’s still a pointer, right?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,882,2021-12-14T02:18:21Z,2021-12-14T02:24:02Z,2021-12-14T06:36:49Z,MERGED,True,1,0,1,https://github.com/josephsutton1,kdc: Fix leak,1,['bug'],https://github.com/heimdal/heimdal/pull/882,https://github.com/josephsutton1,1,https://github.com/heimdal/heimdal/pull/882,This variable was not being freed on all error paths.,This variable was not being freed on all error paths.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,883,2021-12-14T02:24:30Z,2021-12-14T02:44:02Z,2021-12-14T02:44:02Z,MERGED,True,11,11,5,https://github.com/josephsutton1,heimdal: Make _krb5_pac_get_kdc_checksum_info() into a global function,1,['feature request'],https://github.com/heimdal/heimdal/pull/883,https://github.com/josephsutton1,1,https://github.com/heimdal/heimdal/pull/883,This lets us call it from Samba.,This lets us call it from Samba.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,884,2021-12-14T02:32:38Z,2021-12-14T06:55:55Z,2021-12-14T06:55:55Z,MERGED,True,5,1,1,https://github.com/josephsutton1,kdc: Don't keep trying keys for encrypted-challenge,1,['bug'],https://github.com/heimdal/heimdal/pull/884,https://github.com/josephsutton1,1,https://github.com/heimdal/heimdal/pull/884,Don't keep trying keys for encrypted-challenge if one decrypts but fails to verify. This also enables a KRB5KRB_AP_ERR_SKEW error to be returned to the client.,Don't keep trying keys for encrypted-challenge if one decrypts but fails to verify. This also enables a KRB5KRB_AP_ERR_SKEW error to be returned to the client.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,884,2021-12-14T02:32:38Z,2021-12-14T06:55:55Z,2021-12-14T06:55:55Z,MERGED,True,5,1,1,https://github.com/josephsutton1,kdc: Don't keep trying keys for encrypted-challenge,1,['bug'],https://github.com/heimdal/heimdal/pull/884,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/884#issuecomment-993115152,Don't keep trying keys for encrypted-challenge if one decrypts but fails to verify. This also enables a KRB5KRB_AP_ERR_SKEW error to be returned to the client.,Is this the same behavior as ENC-TS? Haven’t checked yet but if they’re aligned that makes sense.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,884,2021-12-14T02:32:38Z,2021-12-14T06:55:55Z,2021-12-14T06:55:55Z,MERGED,True,5,1,1,https://github.com/josephsutton1,kdc: Don't keep trying keys for encrypted-challenge,1,['bug'],https://github.com/heimdal/heimdal/pull/884,https://github.com/josephsutton1,3,https://github.com/heimdal/heimdal/pull/884#issuecomment-993132453,Don't keep trying keys for encrypted-challenge if one decrypts but fails to verify. This also enables a KRB5KRB_AP_ERR_SKEW error to be returned to the client.,"Yes, it seems like for the ENC-TS case we only try again with the next key if we failed to decrypt the EncryptedData, but not if we failed to decode the timestamp or the skew check failed.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,885,2021-12-14T02:54:14Z,2021-12-14T06:36:10Z,2021-12-14T06:36:29Z,MERGED,True,4,4,1,https://github.com/josephsutton1,kdc: Check FAST authdata in ticket rather than in request body,1,['bug'],https://github.com/heimdal/heimdal/pull/885,https://github.com/josephsutton1,1,https://github.com/heimdal/heimdal/pull/885,This matches Windows behaviour and the RFC6113 specification.,This matches Windows behaviour and the RFC6113 specification.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,886,2021-12-14T02:59:19Z,2021-12-14T07:01:14Z,2021-12-17T02:31:36Z,CLOSED,False,15,0,1,https://github.com/josephsutton1,hdb: Do not return HDB_ERR_WRONG_REALM if h->entry.force_canonicalise…,1,[],https://github.com/heimdal/heimdal/pull/886,https://github.com/josephsutton1,1,https://github.com/heimdal/heimdal/pull/886,"… is set.
h->entry.force_canonicalise is set by Samba when it has control over the entry totally and wants to be very clear as to what is returned.
Samba may return HDB_ERR_WRONG_REALM in the future if it also gains alias support, eg for cross-realm UPN lookups.","… is set.
h->entry.force_canonicalise is set by Samba when it has control over the entry totally and wants to be very clear as to what is returned.
Samba may return HDB_ERR_WRONG_REALM in the future if it also gains alias support, eg for cross-realm UPN lookups.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,886,2021-12-14T02:59:19Z,2021-12-14T07:01:14Z,2021-12-17T02:31:36Z,CLOSED,False,15,0,1,https://github.com/josephsutton1,hdb: Do not return HDB_ERR_WRONG_REALM if h->entry.force_canonicalise…,1,[],https://github.com/heimdal/heimdal/pull/886,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/886#issuecomment-993208111,"… is set.
h->entry.force_canonicalise is set by Samba when it has control over the entry totally and wants to be very clear as to what is returned.
Samba may return HDB_ERR_WRONG_REALM in the future if it also gains alias support, eg for cross-realm UPN lookups.","Happy to merge but having trouble following the comment, could you perhaps split into a couple of sentences? :)
     * This supports aliases in HDB.
      *
      * The check for force_canonicalize is to support Samba which will
      * return a different realm in the case of a lookup with a NetBIOS
      * name and will return HDB_ERR_WRONG_REALM internally when
      * aliasing using Active Directory rules is implemented",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,886,2021-12-14T02:59:19Z,2021-12-14T07:01:14Z,2021-12-17T02:31:36Z,CLOSED,False,15,0,1,https://github.com/josephsutton1,hdb: Do not return HDB_ERR_WRONG_REALM if h->entry.force_canonicalise…,1,[],https://github.com/heimdal/heimdal/pull/886,https://github.com/abartlet,3,https://github.com/heimdal/heimdal/pull/886#issuecomment-993209356,"… is set.
h->entry.force_canonicalise is set by Samba when it has control over the entry totally and wants to be very clear as to what is returned.
Samba may return HDB_ERR_WRONG_REALM in the future if it also gains alias support, eg for cross-realm UPN lookups.","Happy to merge but having trouble following the comment, could you perhaps split into a couple of sentences? :)

Sure, will do. :-)",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,886,2021-12-14T02:59:19Z,2021-12-14T07:01:14Z,2021-12-17T02:31:36Z,CLOSED,False,15,0,1,https://github.com/josephsutton1,hdb: Do not return HDB_ERR_WRONG_REALM if h->entry.force_canonicalise…,1,[],https://github.com/heimdal/heimdal/pull/886,https://github.com/lhoward,4,https://github.com/heimdal/heimdal/pull/886#issuecomment-993218718,"… is set.
h->entry.force_canonicalise is set by Samba when it has control over the entry totally and wants to be very clear as to what is returned.
Samba may return HDB_ERR_WRONG_REALM in the future if it also gains alias support, eg for cross-realm UPN lookups.","Commit applied separately. When porting your patches over to Heimdal, it would be good if comments and commit messages described them in as abstract (i.e. non-Samba-specific) a way as possible. Here's the commit message I used:

hdb: do not return HDB_ERR_WRONG_REALM if force_canon set
In hdb_fetch_kvno(), do not return HDB_ERR_WRONG_REALM if the backend set the force_canonicalize flag

and the comment:
    /*
     * This check is to support aliases in HDB; the force_canonicalize
     * check is to allow HDB backends to support realm name canon
     * independently of principal aliases (used by Samba).
     */
    if (ret == 0 && !(flags & HDB_F_ADMIN_DATA) &&
        !h->entry.flags.force_canonicalize &&
        !krb5_realm_compare(context, principal, h->entry.principal))
            ret = HDB_ERR_WRONG_REALM;",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,887,2021-12-14T03:06:19Z,2022-01-17T20:42:47Z,2022-01-17T20:48:27Z,CLOSED,False,19,2,1,https://github.com/josephsutton1,heimdal:kdc: Only check for default salt for des-cbc-crc enctype,1,['feature request'],https://github.com/heimdal/heimdal/pull/887,https://github.com/josephsutton1,1,https://github.com/heimdal/heimdal/pull/887,"This function is used to prefer keys that have a default salt over keys that do not, to preserve compatibility with older clients that do not check the returned salt. With Active Directory salt generation, this can lead to RC4 keys (which do not use a salt) being preferred over AES keys (which use a non-default salt for machine accounts). To avoid this behaviour, we can apply this check only for the des-cbc-crc enctype.","This function is used to prefer keys that have a default salt over keys that do not, to preserve compatibility with older clients that do not check the returned salt. With Active Directory salt generation, this can lead to RC4 keys (which do not use a salt) being preferred over AES keys (which use a non-default salt for machine accounts). To avoid this behaviour, we can apply this check only for the des-cbc-crc enctype.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,887,2021-12-14T03:06:19Z,2022-01-17T20:42:47Z,2022-01-17T20:48:27Z,CLOSED,False,19,2,1,https://github.com/josephsutton1,heimdal:kdc: Only check for default salt for des-cbc-crc enctype,1,['feature request'],https://github.com/heimdal/heimdal/pull/887,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/887#issuecomment-993212291,"This function is used to prefer keys that have a default salt over keys that do not, to preserve compatibility with older clients that do not check the returned salt. With Active Directory salt generation, this can lead to RC4 keys (which do not use a salt) being preferred over AES keys (which use a non-default salt for machine accounts). To avoid this behaviour, we can apply this check only for the des-cbc-crc enctype.","I don't know enough about the code and behaviour of older clients to know whether to accept this or not. At least by common definitions of ""older"" clients, probably all pre-RFC3961 enctypes should be checked.
Cc @nicowilliams @jaltman who will know more",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,887,2021-12-14T03:06:19Z,2022-01-17T20:42:47Z,2022-01-17T20:48:27Z,CLOSED,False,19,2,1,https://github.com/josephsutton1,heimdal:kdc: Only check for default salt for des-cbc-crc enctype,1,['feature request'],https://github.com/heimdal/heimdal/pull/887,https://github.com/abartlet,3,https://github.com/heimdal/heimdal/pull/887#issuecomment-993220678,"This function is used to prefer keys that have a default salt over keys that do not, to preserve compatibility with older clients that do not check the returned salt. With Active Directory salt generation, this can lead to RC4 keys (which do not use a salt) being preferred over AES keys (which use a non-default salt for machine accounts). To avoid this behaviour, we can apply this check only for the des-cbc-crc enctype.","This is the wrong patch.  I wrote a different one built around the concept of a good salt, as otherwise (while not in Samba as we always return the salt) the wrong  PA-ETYPE-INFO* values.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,887,2021-12-14T03:06:19Z,2022-01-17T20:42:47Z,2022-01-17T20:48:27Z,CLOSED,False,19,2,1,https://github.com/josephsutton1,heimdal:kdc: Only check for default salt for des-cbc-crc enctype,1,['feature request'],https://github.com/heimdal/heimdal/pull/887,https://github.com/lhoward,4,https://github.com/heimdal/heimdal/pull/887#issuecomment-993221731,"This function is used to prefer keys that have a default salt over keys that do not, to preserve compatibility with older clients that do not check the returned salt. With Active Directory salt generation, this can lead to RC4 keys (which do not use a salt) being preferred over AES keys (which use a non-default salt for machine accounts). To avoid this behaviour, we can apply this check only for the des-cbc-crc enctype.","OK, please close if it is addressed elsewhere.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,887,2021-12-14T03:06:19Z,2022-01-17T20:42:47Z,2022-01-17T20:48:27Z,CLOSED,False,19,2,1,https://github.com/josephsutton1,heimdal:kdc: Only check for default salt for des-cbc-crc enctype,1,['feature request'],https://github.com/heimdal/heimdal/pull/887,https://github.com/abartlet,5,https://github.com/heimdal/heimdal/pull/887#issuecomment-993223937,"This function is used to prefer keys that have a default salt over keys that do not, to preserve compatibility with older clients that do not check the returned salt. With Active Directory salt generation, this can lead to RC4 keys (which do not use a salt) being preferred over AES keys (which use a non-default salt for machine accounts). To avoid this behaviour, we can apply this check only for the des-cbc-crc enctype.","I've found my better patch and I'll upload it here soon, just want to ensure it passes tests, not sure why the wrong one was still on our tree.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,887,2021-12-14T03:06:19Z,2022-01-17T20:42:47Z,2022-01-17T20:48:27Z,CLOSED,False,19,2,1,https://github.com/josephsutton1,heimdal:kdc: Only check for default salt for des-cbc-crc enctype,1,['feature request'],https://github.com/heimdal/heimdal/pull/887,https://github.com/lhoward,6,https://github.com/heimdal/heimdal/pull/887#issuecomment-993310808,"This function is used to prefer keys that have a default salt over keys that do not, to preserve compatibility with older clients that do not check the returned salt. With Active Directory salt generation, this can lead to RC4 keys (which do not use a salt) being preferred over AES keys (which use a non-default salt for machine accounts). To avoid this behaviour, we can apply this check only for the des-cbc-crc enctype.","I can't quite get my head around this right now, hopefully @nicowilliams or @jaltman can help.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,887,2021-12-14T03:06:19Z,2022-01-17T20:42:47Z,2022-01-17T20:48:27Z,CLOSED,False,19,2,1,https://github.com/josephsutton1,heimdal:kdc: Only check for default salt for des-cbc-crc enctype,1,['feature request'],https://github.com/heimdal/heimdal/pull/887,https://github.com/jaltman,7,https://github.com/heimdal/heimdal/pull/887#issuecomment-1014873868,"This function is used to prefer keys that have a default salt over keys that do not, to preserve compatibility with older clients that do not check the returned salt. With Active Directory salt generation, this can lead to RC4 keys (which do not use a salt) being preferred over AES keys (which use a non-default salt for machine accounts). To avoid this behaviour, we can apply this check only for the des-cbc-crc enctype.",This change was refactored and merged as 9a0372d,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,887,2021-12-14T03:06:19Z,2022-01-17T20:42:47Z,2022-01-17T20:48:27Z,CLOSED,False,19,2,1,https://github.com/josephsutton1,heimdal:kdc: Only check for default salt for des-cbc-crc enctype,1,['feature request'],https://github.com/heimdal/heimdal/pull/887,https://github.com/jaltman,8,https://github.com/heimdal/heimdal/pull/887#issuecomment-1014876518,"This function is used to prefer keys that have a default salt over keys that do not, to preserve compatibility with older clients that do not check the returned salt. With Active Directory salt generation, this can lead to RC4 keys (which do not use a salt) being preferred over AES keys (which use a non-default salt for machine accounts). To avoid this behaviour, we can apply this check only for the des-cbc-crc enctype.",Cherry-picked to heimdal-7-1-branch as fb63454,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,888,2021-12-14T03:40:46Z,2021-12-17T02:19:53Z,2022-01-01T07:22:48Z,MERGED,True,195,35,2,https://github.com/abartlet,Pass extra info to hdb_auth_status(),5,['feature request'],https://github.com/heimdal/heimdal/pull/888,https://github.com/abartlet,1,https://github.com/heimdal/heimdal/pull/888,"From a commit by @metze-samba and myself in Samba's lorikeet-heimdal repo.
We need more information in our auditing hooks for Samba to fill in it's internal audit logs with.   A common helper function was added to make this maintainable.
@metze-samba I dropped to TODO on this as I think is well baked now.","From a commit by @metze-samba and myself in Samba's lorikeet-heimdal repo.
We need more information in our auditing hooks for Samba to fill in it's internal audit logs with.   A common helper function was added to make this maintainable.
@metze-samba I dropped to TODO on this as I think is well baked now.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,888,2021-12-14T03:40:46Z,2021-12-17T02:19:53Z,2022-01-01T07:22:48Z,MERGED,True,195,35,2,https://github.com/abartlet,Pass extra info to hdb_auth_status(),5,['feature request'],https://github.com/heimdal/heimdal/pull/888,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/888#issuecomment-993202128,"From a commit by @metze-samba and myself in Samba's lorikeet-heimdal repo.
We need more information in our auditing hooks for Samba to fill in it's internal audit logs with.   A common helper function was added to make this maintainable.
@metze-samba I dropped to TODO on this as I think is well baked now.","No problem in principle with this PR (once the comments have been addressed), but would be curious to hear what @jaltman and @nicowilliams think, it seems we have two auditing frameworks – this one and heim_audit_addkv() and perhaps we need to take a step back and consolidate them?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,888,2021-12-14T03:40:46Z,2021-12-17T02:19:53Z,2022-01-01T07:22:48Z,MERGED,True,195,35,2,https://github.com/abartlet,Pass extra info to hdb_auth_status(),5,['feature request'],https://github.com/heimdal/heimdal/pull/888,https://github.com/abartlet,3,https://github.com/heimdal/heimdal/pull/888#issuecomment-995261707,"From a commit by @metze-samba and myself in Samba's lorikeet-heimdal repo.
We need more information in our auditing hooks for Samba to fill in it's internal audit logs with.   A common helper function was added to make this maintainable.
@metze-samba I dropped to TODO on this as I think is well baked now.","Per @lhoward's request, patch #2 shoudl start with kdc:  not heimdal: 
heimdal: Pass extra information to hdb_auth_status() to log success and failures",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,888,2021-12-14T03:40:46Z,2021-12-17T02:19:53Z,2022-01-01T07:22:48Z,MERGED,True,195,35,2,https://github.com/abartlet,Pass extra info to hdb_auth_status(),5,['feature request'],https://github.com/heimdal/heimdal/pull/888,https://github.com/jaltman,4,https://github.com/heimdal/heimdal/pull/888#issuecomment-995266947,"From a commit by @metze-samba and myself in Samba's lorikeet-heimdal repo.
We need more information in our auditing hooks for Samba to fill in it's internal audit logs with.   A common helper function was added to make this maintainable.
@metze-samba I dropped to TODO on this as I think is well baked now.",Our preference is for the name of the directory or module followed by colon at the start of the subject line.  Thanks,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,888,2021-12-14T03:40:46Z,2021-12-17T02:19:53Z,2022-01-01T07:22:48Z,MERGED,True,195,35,2,https://github.com/abartlet,Pass extra info to hdb_auth_status(),5,['feature request'],https://github.com/heimdal/heimdal/pull/888,https://github.com/abartlet,5,https://github.com/heimdal/heimdal/pull/888#issuecomment-995272281,"From a commit by @metze-samba and myself in Samba's lorikeet-heimdal repo.
We need more information in our auditing hooks for Samba to fill in it's internal audit logs with.   A common helper function was added to make this maintainable.
@metze-samba I dropped to TODO on this as I think is well baked now.","Much the same in Samba, we just need to fix these up as they get ported over.  Thanks for your patience with us as we upstream these patches.  Hopefully this will mean we can much more easily keep up with current Heimdal and so both better participate upstream and provide timely feedback from our now quite extensive testsuite.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,888,2021-12-14T03:40:46Z,2021-12-17T02:19:53Z,2022-01-01T07:22:48Z,MERGED,True,195,35,2,https://github.com/abartlet,Pass extra info to hdb_auth_status(),5,['feature request'],https://github.com/heimdal/heimdal/pull/888,https://github.com/lhoward,6,https://github.com/heimdal/heimdal/pull/888#issuecomment-995304874,"From a commit by @metze-samba and myself in Samba's lorikeet-heimdal repo.
We need more information in our auditing hooks for Samba to fill in it's internal audit logs with.   A common helper function was added to make this maintainable.
@metze-samba I dropped to TODO on this as I think is well baked now.",FYI I think there are still a few comments to be addressed on this one.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,888,2021-12-14T03:40:46Z,2021-12-17T02:19:53Z,2022-01-01T07:22:48Z,MERGED,True,195,35,2,https://github.com/abartlet,Pass extra info to hdb_auth_status(),5,['feature request'],https://github.com/heimdal/heimdal/pull/888,https://github.com/josephsutton1,7,https://github.com/heimdal/heimdal/pull/888#issuecomment-995310840,"From a commit by @metze-samba and myself in Samba's lorikeet-heimdal repo.
We need more information in our auditing hooks for Samba to fill in it's internal audit logs with.   A common helper function was added to make this maintainable.
@metze-samba I dropped to TODO on this as I think is well baked now.","I think they are all addressed now, except for passing a struct to _kdc_audit_auth_status() rather than individual arguments.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,888,2021-12-14T03:40:46Z,2021-12-17T02:19:53Z,2022-01-01T07:22:48Z,MERGED,True,195,35,2,https://github.com/abartlet,Pass extra info to hdb_auth_status(),5,['feature request'],https://github.com/heimdal/heimdal/pull/888,https://github.com/nicowilliams,8,https://github.com/heimdal/heimdal/pull/888#issuecomment-995379350,"From a commit by @metze-samba and myself in Samba's lorikeet-heimdal repo.
We need more information in our auditing hooks for Samba to fill in it's internal audit logs with.   A common helper function was added to make this maintainable.
@metze-samba I dropped to TODO on this as I think is well baked now.","kdc: use the correct kvno number for PKINIT in the AS-REP

Makes no sense to me.  Why would we want to signal the master kvno instead of the client's kvno in the KDC reply's enc-part?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,888,2021-12-14T03:40:46Z,2021-12-17T02:19:53Z,2022-01-01T07:22:48Z,MERGED,True,195,35,2,https://github.com/abartlet,Pass extra info to hdb_auth_status(),5,['feature request'],https://github.com/heimdal/heimdal/pull/888,https://github.com/nicowilliams,9,https://github.com/heimdal/heimdal/pull/888#issuecomment-995384486,"From a commit by @metze-samba and myself in Samba's lorikeet-heimdal repo.
We need more information in our auditing hooks for Samba to fill in it's internal audit logs with.   A common helper function was added to make this maintainable.
@metze-samba I dropped to TODO on this as I think is well baked now.","No problem in principle with this PR (once the comments have been addressed), but would be curious to hear what @jaltman and @nicowilliams think, it seems we have two auditing frameworks – this one and heim_audit_addkv() and perhaps we need to take a step back and consolidate them?

Ideally we could unify these two, however, lib/hdb can't have knowledge of the r structure we're using in the KDC -- well, it can have knowledge of the common part, since that's from lib/base.  Can you check if the HEIM_SVC_REQUEST_DESC_COMMON_ELEMENTS are sufficient for your purposes?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,888,2021-12-14T03:40:46Z,2021-12-17T02:19:53Z,2022-01-01T07:22:48Z,MERGED,True,195,35,2,https://github.com/abartlet,Pass extra info to hdb_auth_status(),5,['feature request'],https://github.com/heimdal/heimdal/pull/888,https://github.com/abartlet,10,https://github.com/heimdal/heimdal/pull/888#issuecomment-995397333,"From a commit by @metze-samba and myself in Samba's lorikeet-heimdal repo.
We need more information in our auditing hooks for Samba to fill in it's internal audit logs with.   A common helper function was added to make this maintainable.
@metze-samba I dropped to TODO on this as I think is well baked now.","kdc: use the correct kvno number for PKINIT in the AS-REP

Makes no sense to me. Why would we want to signal the master kvno instead of the client's kvno in the KDC reply's enc-part?

Perhaps we should just drop that bit.  It was a patch by @metze-samba that was triggering conflicts if we didn't select before this one, but isn't important for the fundamental purpose here.  We can leave that private or pull to a different PR.",True,{'THUMBS_UP': ['https://github.com/nicowilliams']}
heimdal/heimdal,https://github.com/heimdal/heimdal,888,2021-12-14T03:40:46Z,2021-12-17T02:19:53Z,2022-01-01T07:22:48Z,MERGED,True,195,35,2,https://github.com/abartlet,Pass extra info to hdb_auth_status(),5,['feature request'],https://github.com/heimdal/heimdal/pull/888,https://github.com/lhoward,11,https://github.com/heimdal/heimdal/pull/888#issuecomment-995410119,"From a commit by @metze-samba and myself in Samba's lorikeet-heimdal repo.
We need more information in our auditing hooks for Samba to fill in it's internal audit logs with.   A common helper function was added to make this maintainable.
@metze-samba I dropped to TODO on this as I think is well baked now.","kdc: use the correct kvno number for PKINIT in the AS-REP

Makes no sense to me. Why would we want to signal the master kvno instead of the client's kvno in the KDC reply's enc-part?

Perhaps we should just drop that bit. It was a patch by @metze-samba that was triggering conflicts if we didn't select before this one, but isn't important for the fundamental purpose here. We can leave that private or pull to a different PR.

Perhaps @metze-samba can explain the reasoning behind this? Are you sure the mkvno wasn't always zero or a well known constant? mkvno and kvno aren't interchangeable and the mkvno is never visible in the protocol.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,888,2021-12-14T03:40:46Z,2021-12-17T02:19:53Z,2022-01-01T07:22:48Z,MERGED,True,195,35,2,https://github.com/abartlet,Pass extra info to hdb_auth_status(),5,['feature request'],https://github.com/heimdal/heimdal/pull/888,https://github.com/abartlet,12,https://github.com/heimdal/heimdal/pull/888#issuecomment-995410980,"From a commit by @metze-samba and myself in Samba's lorikeet-heimdal repo.
We need more information in our auditing hooks for Samba to fill in it's internal audit logs with.   A common helper function was added to make this maintainable.
@metze-samba I dropped to TODO on this as I think is well baked now.","Would swapping
  &r->tv_start,
  r->addr,
  r->cname,

for hdb_r (being a struct defined with HEIM_SVC_REQUEST_DESC_COMMON_ELEMENTS) be enough of a start on this?
The hdb hook is for account lockout and audit logging, and I agree there is some crossover, but it needs more than just the common elements as it needs the client structure (HDB entry) and the HDB database also, plus some other details, some of which are hidden into the kv and some not.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,888,2021-12-14T03:40:46Z,2021-12-17T02:19:53Z,2022-01-01T07:22:48Z,MERGED,True,195,35,2,https://github.com/abartlet,Pass extra info to hdb_auth_status(),5,['feature request'],https://github.com/heimdal/heimdal/pull/888,https://github.com/lhoward,13,https://github.com/heimdal/heimdal/pull/888#issuecomment-995411240,"From a commit by @metze-samba and myself in Samba's lorikeet-heimdal repo.
We need more information in our auditing hooks for Samba to fill in it's internal audit logs with.   A common helper function was added to make this maintainable.
@metze-samba I dropped to TODO on this as I think is well baked now.","I'm OK with these changes (except for the mkvno bit). But, I'll defer final approval to @nicowilliams",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,888,2021-12-14T03:40:46Z,2021-12-17T02:19:53Z,2022-01-01T07:22:48Z,MERGED,True,195,35,2,https://github.com/abartlet,Pass extra info to hdb_auth_status(),5,['feature request'],https://github.com/heimdal/heimdal/pull/888,https://github.com/abartlet,14,https://github.com/heimdal/heimdal/pull/888#issuecomment-995414109,"From a commit by @metze-samba and myself in Samba's lorikeet-heimdal repo.
We need more information in our auditing hooks for Samba to fill in it's internal audit logs with.   A common helper function was added to make this maintainable.
@metze-samba I dropped to TODO on this as I think is well baked now.","OK, I'll leave as-is and just rip out the mkvno bit",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,888,2021-12-14T03:40:46Z,2021-12-17T02:19:53Z,2022-01-01T07:22:48Z,MERGED,True,195,35,2,https://github.com/abartlet,Pass extra info to hdb_auth_status(),5,['feature request'],https://github.com/heimdal/heimdal/pull/888,https://github.com/lhoward,15,https://github.com/heimdal/heimdal/pull/888#issuecomment-995415941,"From a commit by @metze-samba and myself in Samba's lorikeet-heimdal repo.
We need more information in our auditing hooks for Samba to fill in it's internal audit logs with.   A common helper function was added to make this maintainable.
@metze-samba I dropped to TODO on this as I think is well baked now.","OK, I'll leave as-is and just rip out the mkvno bit

OK, but you might want to understand why you need it in your branch, for your own benefit :)",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,888,2021-12-14T03:40:46Z,2021-12-17T02:19:53Z,2022-01-01T07:22:48Z,MERGED,True,195,35,2,https://github.com/abartlet,Pass extra info to hdb_auth_status(),5,['feature request'],https://github.com/heimdal/heimdal/pull/888,https://github.com/nicowilliams,16,https://github.com/heimdal/heimdal/pull/888#issuecomment-995476022,"From a commit by @metze-samba and myself in Samba's lorikeet-heimdal repo.
We need more information in our auditing hooks for Samba to fill in it's internal audit logs with.   A common helper function was added to make this maintainable.
@metze-samba I dropped to TODO on this as I think is well baked now.","Would swapping ...

Basically.  I think this might be worth doing because whatever context you need to audit in HDB, others might want elsewhere too.  This bit of commonality was added by @elric1, and I find it quite convenient.  I especially like the bag of key/values, which can be used to add structured information.
I think I wouldn't insist on this, and maybe we really shouldn't if doing so were going to cast HEIM_SVC_REQUEST_DESC_COMMON_ELEMENTS in stone in the ABI.  What do you think, would it?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,888,2021-12-14T03:40:46Z,2021-12-17T02:19:53Z,2022-01-01T07:22:48Z,MERGED,True,195,35,2,https://github.com/abartlet,Pass extra info to hdb_auth_status(),5,['feature request'],https://github.com/heimdal/heimdal/pull/888,https://github.com/nicowilliams,17,https://github.com/heimdal/heimdal/pull/888#issuecomment-995477534,"From a commit by @metze-samba and myself in Samba's lorikeet-heimdal repo.
We need more information in our auditing hooks for Samba to fill in it's internal audit logs with.   A common helper function was added to make this maintainable.
@metze-samba I dropped to TODO on this as I think is well baked now.","I'm OK with AUTH in this context.  The boundary between authentication and authorization is a bit fuzzy in this context.
Anyways, LGTM w/o the mkvno commit.  If you can use HEIM_SVC_REQUEST_DESC_COMMON_ELEMENTS without casting it in stone, and if you want to, then go ahead and use it, else never mind and say you're ready.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,888,2021-12-14T03:40:46Z,2021-12-17T02:19:53Z,2022-01-01T07:22:48Z,MERGED,True,195,35,2,https://github.com/abartlet,Pass extra info to hdb_auth_status(),5,['feature request'],https://github.com/heimdal/heimdal/pull/888,https://github.com/abartlet,18,https://github.com/heimdal/heimdal/pull/888#issuecomment-995487474,"From a commit by @metze-samba and myself in Samba's lorikeet-heimdal repo.
We need more information in our auditing hooks for Samba to fill in it's internal audit logs with.   A common helper function was added to make this maintainable.
@metze-samba I dropped to TODO on this as I think is well baked now.","I think having the HDB ABI change every time HEIM_SVC_REQUEST_DESC_COMMON_ELEMENTS changes would not be intuitive.  Harmless while samba requires to build with the source of Heimdal, but if we ever manage to use a system version, it would be trouble.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,888,2021-12-14T03:40:46Z,2021-12-17T02:19:53Z,2022-01-01T07:22:48Z,MERGED,True,195,35,2,https://github.com/abartlet,Pass extra info to hdb_auth_status(),5,['feature request'],https://github.com/heimdal/heimdal/pull/888,https://github.com/nicowilliams,19,https://github.com/heimdal/heimdal/pull/888#issuecomment-995970782,"From a commit by @metze-samba and myself in Samba's lorikeet-heimdal repo.
We need more information in our auditing hooks for Samba to fill in it's internal audit logs with.   A common helper function was added to make this maintainable.
@metze-samba I dropped to TODO on this as I think is well baked now.",We have a way to do head-to-head ABI checking with the *_get_instance() functions...,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,888,2021-12-14T03:40:46Z,2021-12-17T02:19:53Z,2022-01-01T07:22:48Z,MERGED,True,195,35,2,https://github.com/abartlet,Pass extra info to hdb_auth_status(),5,['feature request'],https://github.com/heimdal/heimdal/pull/888,https://github.com/metze-samba,20,https://github.com/heimdal/heimdal/pull/888#issuecomment-996307602,"From a commit by @metze-samba and myself in Samba's lorikeet-heimdal repo.
We need more information in our auditing hooks for Samba to fill in it's internal audit logs with.   A common helper function was added to make this maintainable.
@metze-samba I dropped to TODO on this as I think is well baked now.","kdc: use the correct kvno number for PKINIT in the AS-REP

Makes no sense to me. Why would we want to signal the master kvno instead of the client's kvno in the KDC reply's enc-part?

Perhaps we should just drop that bit. It was a patch by @metze-samba that was triggering conflicts if we didn't select before this one, but isn't important for the fundamental purpose here. We can leave that private or pull to a different PR.

Perhaps @metze-samba can explain the reasoning behind this? Are you sure the mkvno wasn't always zero or a well known constant? mkvno and kvno aren't interchangeable and the mkvno is never visible in the protocol.

For PKINIT (and also FAST) responses, the AS-REP enc-part should not have a kvno field,
as the used encryption is not the longterm key that belongs to the kvno value.
I'm not sure about the mkvmo anymore, it might be related to this, where I want to return
more than one key for an account, so that password changes don't have temporary
failures regarding still existing tickets and possible account lockouts:
https://gitlab.com/samba-team/samba/-/merge_requests/664/diffs
I guess for now we can remove the if (pa_key->mkvno != NULL) logic and only use
r->reply_kvno = r->client->entry.kvno; instead, but that can be it's own pull request,
@abartlet do you want to change that and submit it as new pull request?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,888,2021-12-14T03:40:46Z,2021-12-17T02:19:53Z,2022-01-01T07:22:48Z,MERGED,True,195,35,2,https://github.com/abartlet,Pass extra info to hdb_auth_status(),5,['feature request'],https://github.com/heimdal/heimdal/pull/888,https://github.com/lhoward,21,https://github.com/heimdal/heimdal/pull/888#issuecomment-996308872,"From a commit by @metze-samba and myself in Samba's lorikeet-heimdal repo.
We need more information in our auditing hooks for Samba to fill in it's internal audit logs with.   A common helper function was added to make this maintainable.
@metze-samba I dropped to TODO on this as I think is well baked now.","Perhaps the correct fix is, if (r->replaced_reply_key) then set kvno to zero (or NULL, I can't remember if it's OPTIONAL or not).
mkvno has no business in the Kerberos 5 protocol, it's HDB-internal (I guess maybe it's exposed in the replication/administration protocol but that's not relevant to the KDC).",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,888,2021-12-14T03:40:46Z,2021-12-17T02:19:53Z,2022-01-01T07:22:48Z,MERGED,True,195,35,2,https://github.com/abartlet,Pass extra info to hdb_auth_status(),5,['feature request'],https://github.com/heimdal/heimdal/pull/888,https://github.com/lhoward,22,https://github.com/heimdal/heimdal/pull/888#issuecomment-996310183,"From a commit by @metze-samba and myself in Samba's lorikeet-heimdal repo.
We need more information in our auditing hooks for Samba to fill in it's internal audit logs with.   A common helper function was added to make this maintainable.
@metze-samba I dropped to TODO on this as I think is well baked now.","Also, do we need a new reply_kvno field? Can't we just make it r->replaced_reply_key ? 0 : r->client->entry.kvno?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,888,2021-12-14T03:40:46Z,2021-12-17T02:19:53Z,2022-01-01T07:22:48Z,MERGED,True,195,35,2,https://github.com/abartlet,Pass extra info to hdb_auth_status(),5,['feature request'],https://github.com/heimdal/heimdal/pull/888,https://github.com/metze-samba,23,https://github.com/heimdal/heimdal/pull/888#issuecomment-996321296,"From a commit by @metze-samba and myself in Samba's lorikeet-heimdal repo.
We need more information in our auditing hooks for Samba to fill in it's internal audit logs with.   A common helper function was added to make this maintainable.
@metze-samba I dropped to TODO on this as I think is well baked now.","Also, do we need a new reply_kvno field? Can't we just make it r->replaced_reply_key ? 0 : r->client->entry.kvno?

Why is a new 'bool replaced_reply_key' better than a new 'unsigned int reply_kvno;'?
Note r->client->entry.kvno is 'unsigned int' in struct HDB_entry...
As there's only a single place where r->client->entry.kvno should be used, I think
an explicit r->reply_kvno = r->client->entry.kvno; would be good there and it could
be (and may already is initialized to 0) default, so it just needs to be set in one place.
BTW: regarding the password history I just found hdb_kvno2keys() and choice_HDB_extension_data_hist_keys...",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,888,2021-12-14T03:40:46Z,2021-12-17T02:19:53Z,2022-01-01T07:22:48Z,MERGED,True,195,35,2,https://github.com/abartlet,Pass extra info to hdb_auth_status(),5,['feature request'],https://github.com/heimdal/heimdal/pull/888,https://github.com/abartlet,24,https://github.com/heimdal/heimdal/pull/888#issuecomment-996323146,"From a commit by @metze-samba and myself in Samba's lorikeet-heimdal repo.
We need more information in our auditing hooks for Samba to fill in it's internal audit logs with.   A common helper function was added to make this maintainable.
@metze-samba I dropped to TODO on this as I think is well baked now.","On Thu, 2021-12-16 at 16:50 -0800, metze-samba wrote:
 Why is a new 'bool replaced_reply_key' better than a new 'unsigned
 int reply_kvno;'?
Because we got r-> replace_reply_key anyway in #864 so we can re-use
that infrastructure.

Anyway, this should be on a new PR.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,888,2021-12-14T03:40:46Z,2021-12-17T02:19:53Z,2022-01-01T07:22:48Z,MERGED,True,195,35,2,https://github.com/abartlet,Pass extra info to hdb_auth_status(),5,['feature request'],https://github.com/heimdal/heimdal/pull/888,https://github.com/lhoward,25,https://github.com/heimdal/heimdal/pull/888#issuecomment-996348413,"From a commit by @metze-samba and myself in Samba's lorikeet-heimdal repo.
We need more information in our auditing hooks for Samba to fill in it's internal audit logs with.   A common helper function was added to make this maintainable.
@metze-samba I dropped to TODO on this as I think is well baked now.","Would agree except r->replaced_reply_key is already there, so let's use it please :)",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,888,2021-12-14T03:40:46Z,2021-12-17T02:19:53Z,2022-01-01T07:22:48Z,MERGED,True,195,35,2,https://github.com/abartlet,Pass extra info to hdb_auth_status(),5,['feature request'],https://github.com/heimdal/heimdal/pull/888,https://github.com/abartlet,26,https://github.com/heimdal/heimdal/pull/888#issuecomment-996356294,"From a commit by @metze-samba and myself in Samba's lorikeet-heimdal repo.
We need more information in our auditing hooks for Samba to fill in it's internal audit logs with.   A common helper function was added to make this maintainable.
@metze-samba I dropped to TODO on this as I think is well baked now.",Lets move this discussion to #899 where I've done just that.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,888,2021-12-14T03:40:46Z,2021-12-17T02:19:53Z,2022-01-01T07:22:48Z,MERGED,True,195,35,2,https://github.com/abartlet,Pass extra info to hdb_auth_status(),5,['feature request'],https://github.com/heimdal/heimdal/pull/888,https://github.com/abartlet,27,https://github.com/heimdal/heimdal/pull/888#issuecomment-996357345,"From a commit by @metze-samba and myself in Samba's lorikeet-heimdal repo.
We need more information in our auditing hooks for Samba to fill in it's internal audit logs with.   A common helper function was added to make this maintainable.
@metze-samba I dropped to TODO on this as I think is well baked now.",And are we finally ready for a merge on this one?  I think I've addressed everything now.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,888,2021-12-14T03:40:46Z,2021-12-17T02:19:53Z,2022-01-01T07:22:48Z,MERGED,True,195,35,2,https://github.com/abartlet,Pass extra info to hdb_auth_status(),5,['feature request'],https://github.com/heimdal/heimdal/pull/888,https://github.com/lhoward,28,https://github.com/heimdal/heimdal/pull/888#issuecomment-1003508443,"From a commit by @metze-samba and myself in Samba's lorikeet-heimdal repo.
We need more information in our auditing hooks for Samba to fill in it's internal audit logs with.   A common helper function was added to make this maintainable.
@metze-samba I dropped to TODO on this as I think is well baked now.","Please see #912. We're going to replace hdb_auth_status with a hdb_audit function with the following signature:
/* auth event type enumeration */
#define HDB_AUTH_EVENT_INVALID                  -1
#define HDB_AUTH_EVENT_AUTHORIZATION_SUCCESS    0   /* all checks passed */
#define HDB_AUTH_EVENT_CLIENT_UNKNOWN           1   /* client unknown */
#define HDB_AUTH_EVENT_CLIENT_LOCKED_OUT        2   /* client locked out */
#define HDB_AUTH_EVENT_CLIENT_TIME_SKEW         3   /* client time skew */
#define HDB_AUTH_EVENT_LTK_PREAUTH_FAILED       4   /* long term key preauth failed */
#define HDB_AUTH_EVENT_LTK_PREAUTH_SUCCEEDED    5   /* long term key preauth succeeded */
#define HDB_AUTH_EVENT_PKINIT_SUCCEEDED         6   /* PKINIT preauth succeeded */
#define HDB_AUTH_EVENT_PKINIT_FAILED            7   /* PKINIT preauth succeeded */
#define HDB_AUTH_EVENT_GSS_PA_SUCCEEDED         8   /* GSS preauth succeeded */
#define HDB_AUTH_EVENT_GSS_PA_FAILED            9   /* GSS preauth failed */
#define HDB_AUTH_EVENT_UNK_PREAUTH_FAILED       10  /* unknown preauth failed */
#define HDB_AUTH_EVENT_UNK_PREAUTH_SUCCEEDED    11  /* unknown preauth succeeded */

/* auth event keys, query request with heim_audit_getkv() */
#define HDB_REQUEST_KV_AUTH_EVENT_TYPE          ""#auth_event_type""      /* heim_number_t */
#define HDB_REQUEST_KV_AUTH_EVENT_DETAILS       ""#auth_event_details""   /* heim_string_t */
#define HDB_REQUEST_KV_PA_NAME                  ""pa""                    /* heim_string_t */

    krb5_error_code (*hdb_audit)(krb5_context context,
                                struct HDB *hdb,
                                hdb_entry_ex *client,
                                hdb_request_t r);
where hdb_request_t contains HEIM_SVC_REQUEST_DESC_COMMON_ELEMENTS such as the client address and name.
You should be able to pull everything you need out of this (you can cast it to kdc_request_t if you need more things).
As a result of unifying the auditing API, the auth status (now called event) and details are surfaced by calling heim_audit_getkv(HDB_REQUEST_KV...). Let me know if you need some sample code.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,888,2021-12-14T03:40:46Z,2021-12-17T02:19:53Z,2022-01-01T07:22:48Z,MERGED,True,195,35,2,https://github.com/abartlet,Pass extra info to hdb_auth_status(),5,['feature request'],https://github.com/heimdal/heimdal/pull/888,https://github.com/lhoward,29,https://github.com/heimdal/heimdal/pull/888#issuecomment-1003519167,"From a commit by @metze-samba and myself in Samba's lorikeet-heimdal repo.
We need more information in our auditing hooks for Samba to fill in it's internal audit logs with.   A common helper function was added to make this maintainable.
@metze-samba I dropped to TODO on this as I think is well baked now.","My next question for the Samba folks is, what does peppering the KDC code with auth event (né status) auditing achieve?
For example, you can figure out whether the client was locked out by checking for HDB_REQUEST_KV_ERROR_CODE == KRB5KDC_ERR_CLIENT_REVOKED.
You can determine which pre-authentication mechanism was tried by checking HDB_REQUEST_KV_PA_NAME and looking at the error code. Probably the only thing I can't see how you could easily disambiguate is long-term key pre-authentication failing due to a wrong password.
I'm not opposed to leaving this functionality in but I wonder if it could be simplified. Looking at your hdb_samba4_auth_status(), it seems that principally you want to know when pre-authentication succeeded or failed in order to manage lockout counts?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,888,2021-12-14T03:40:46Z,2021-12-17T02:19:53Z,2022-01-01T07:22:48Z,MERGED,True,195,35,2,https://github.com/abartlet,Pass extra info to hdb_auth_status(),5,['feature request'],https://github.com/heimdal/heimdal/pull/888,https://github.com/lhoward,30,https://github.com/heimdal/heimdal/pull/888#issuecomment-1003519238,"From a commit by @metze-samba and myself in Samba's lorikeet-heimdal repo.
We need more information in our auditing hooks for Samba to fill in it's internal audit logs with.   A common helper function was added to make this maintainable.
@metze-samba I dropped to TODO on this as I think is well baked now.","For example, I think want to collapse to a generic pre-auth succeeded/failed and let you discriminate based on the pre-auth mech that was tried.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,888,2021-12-14T03:40:46Z,2021-12-17T02:19:53Z,2022-01-01T07:22:48Z,MERGED,True,195,35,2,https://github.com/abartlet,Pass extra info to hdb_auth_status(),5,['feature request'],https://github.com/heimdal/heimdal/pull/888,https://github.com/lhoward,31,https://github.com/heimdal/heimdal/pull/888#issuecomment-1003519273,"From a commit by @metze-samba and myself in Samba's lorikeet-heimdal repo.
We need more information in our auditing hooks for Samba to fill in it's internal audit logs with.   A common helper function was added to make this maintainable.
@metze-samba I dropped to TODO on this as I think is well baked now.","OTOH, I guess, if you want to be agnostic to new PA mechs that use long-term keys, maybe it's better we do it on the front-end...",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,889,2021-12-14T22:05:31Z,,2022-01-02T10:25:10Z,OPEN,False,132,126,1,https://github.com/josephsutton1,kdc: Send ETYPE-INFO2 instead of PW-SALT for validated timestamp,3,['investigation required'],https://github.com/heimdal/heimdal/pull/889,https://github.com/josephsutton1,1,https://github.com/heimdal/heimdal/pull/889,This matches Windows behaviour.,This matches Windows behaviour.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,889,2021-12-14T22:05:31Z,,2022-01-02T10:25:10Z,OPEN,False,132,126,1,https://github.com/josephsutton1,kdc: Send ETYPE-INFO2 instead of PW-SALT for validated timestamp,3,['investigation required'],https://github.com/heimdal/heimdal/pull/889,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/889#issuecomment-1002346067,This matches Windows behaviour.,"FWIW from RFC 4120
   When the AS server is to include pre-authentication data in a
   KRB-ERROR or in an AS-REP, it MUST use PA-ETYPE-INFO2, not PA-ETYPE-
   INFO, if the etype field of the client's AS-REQ lists at least one
   ""newer"" encryption type.  Otherwise (when the etype field of the
   client's AS-REQ does not list any ""newer"" encryption types), it MUST
   send both PA-ETYPE-INFO2 and PA-ETYPE-INFO (both with an entry for
   each enctype).  A ""newer"" enctype is any enctype first officially
   specified concurrently with or subsequent to the issue of this RFC.
   The enctypes DES, 3DES, or RC4 and any defined in [RFC1510] are not
   ""newer"" enctypes.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,889,2021-12-14T22:05:31Z,,2022-01-02T10:25:10Z,OPEN,False,132,126,1,https://github.com/josephsutton1,kdc: Send ETYPE-INFO2 instead of PW-SALT for validated timestamp,3,['investigation required'],https://github.com/heimdal/heimdal/pull/889,https://github.com/lhoward,3,https://github.com/heimdal/heimdal/pull/889#issuecomment-1002346750,This matches Windows behaviour.,"Ah, I see, shouldn't we use get_pa_etype_info_both() for an AS-REP then?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,889,2021-12-14T22:05:31Z,,2022-01-02T10:25:10Z,OPEN,False,132,126,1,https://github.com/josephsutton1,kdc: Send ETYPE-INFO2 instead of PW-SALT for validated timestamp,3,['investigation required'],https://github.com/heimdal/heimdal/pull/889,https://github.com/josephsutton1,4,https://github.com/heimdal/heimdal/pull/889#issuecomment-1002395511,This matches Windows behaviour.,"That's probably the case, but I'll need to do some more testing against Windows to check what it does for different etypes.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,889,2021-12-14T22:05:31Z,,2022-01-02T10:25:10Z,OPEN,False,132,126,1,https://github.com/josephsutton1,kdc: Send ETYPE-INFO2 instead of PW-SALT for validated timestamp,3,['investigation required'],https://github.com/heimdal/heimdal/pull/889,https://github.com/lhoward,5,https://github.com/heimdal/heimdal/pull/889#issuecomment-1003693925,This matches Windows behaviour.,"No problem, please let us know and refactor to minimise the size of the diff.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,890,2021-12-14T22:10:23Z,2021-12-14T22:59:35Z,2021-12-14T22:59:35Z,CLOSED,False,0,4,2,https://github.com/josephsutton1,kdc: Don't conceal error code when using FAST,1,['feature request'],https://github.com/heimdal/heimdal/pull/890,https://github.com/josephsutton1,1,https://github.com/heimdal/heimdal/pull/890,"This matches Windows behaviour, which also places the error code in the outer error.","This matches Windows behaviour, which also places the error code in the outer error.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,890,2021-12-14T22:10:23Z,2021-12-14T22:59:35Z,2021-12-14T22:59:35Z,CLOSED,False,0,4,2,https://github.com/josephsutton1,kdc: Don't conceal error code when using FAST,1,['feature request'],https://github.com/heimdal/heimdal/pull/890,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/890#issuecomment-994100240,"This matches Windows behaviour, which also places the error code in the outer error.","Is this patch just to require Windows, or is it because Windows actually breaks when the error codes don't match? Because RFC 6113 says to ignore the outer error code, and it would be good not to reveal the error code.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,890,2021-12-14T22:10:23Z,2021-12-14T22:59:35Z,2021-12-14T22:59:35Z,CLOSED,False,0,4,2,https://github.com/josephsutton1,kdc: Don't conceal error code when using FAST,1,['feature request'],https://github.com/heimdal/heimdal/pull/890,https://github.com/josephsutton1,3,https://github.com/heimdal/heimdal/pull/890#issuecomment-994113672,"This matches Windows behaviour, which also places the error code in the outer error.","So far we've been using this patch to ease checking the error code for KDC testing, but I'm not sure whether Windows requires an outer error code or not.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,890,2021-12-14T22:10:23Z,2021-12-14T22:59:35Z,2021-12-14T22:59:35Z,CLOSED,False,0,4,2,https://github.com/josephsutton1,kdc: Don't conceal error code when using FAST,1,['feature request'],https://github.com/heimdal/heimdal/pull/890,https://github.com/lhoward,4,https://github.com/heimdal/heimdal/pull/890#issuecomment-994119688,"This matches Windows behaviour, which also places the error code in the outer error.","Perhaps best keep this as a private patch then, making testing easier isn't a good enough reason to increase information disclosure. Closing, please re-open if it turns out Windows is indeed not RFC 6113-compliant.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,891,2021-12-15T08:04:58Z,2021-12-16T01:59:01Z,2021-12-17T03:17:30Z,MERGED,True,125,27,2,https://github.com/josephsutton1,kdc: Check PAC of FAST armor tickets,2,[],https://github.com/heimdal/heimdal/pull/891,https://github.com/josephsutton1,1,https://github.com/heimdal/heimdal/pull/891,"Look up the client name of the armor TGT in the database, and check that the PAC is valid.","Look up the client name of the armor TGT in the database, and check that the PAC is valid.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,891,2021-12-15T08:04:58Z,2021-12-16T01:59:01Z,2021-12-17T03:17:30Z,MERGED,True,125,27,2,https://github.com/josephsutton1,kdc: Check PAC of FAST armor tickets,2,[],https://github.com/heimdal/heimdal/pull/891,https://github.com/josephsutton1,2,https://github.com/heimdal/heimdal/pull/891#issuecomment-995339473,"Look up the client name of the armor TGT in the database, and check that the PAC is valid.","OK, I addressed the comments. This now relies on #892 for the require_pac flag.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,891,2021-12-15T08:04:58Z,2021-12-16T01:59:01Z,2021-12-17T03:17:30Z,MERGED,True,125,27,2,https://github.com/josephsutton1,kdc: Check PAC of FAST armor tickets,2,[],https://github.com/heimdal/heimdal/pull/891,https://github.com/josephsutton1,3,https://github.com/heimdal/heimdal/pull/891#issuecomment-995377256,"Look up the client name of the armor TGT in the database, and check that the PAC is valid.",Note that this patchset will fail to build until #892 is merged.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,891,2021-12-15T08:04:58Z,2021-12-16T01:59:01Z,2021-12-17T03:17:30Z,MERGED,True,125,27,2,https://github.com/josephsutton1,kdc: Check PAC of FAST armor tickets,2,[],https://github.com/heimdal/heimdal/pull/891,https://github.com/abartlet,4,https://github.com/heimdal/heimdal/pull/891#issuecomment-995445553,"Look up the client name of the armor TGT in the database, and check that the PAC is valid.",@josephsutton1 note comment by @lhoward 83a80cd#commitcomment-62004954,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,891,2021-12-15T08:04:58Z,2021-12-16T01:59:01Z,2021-12-17T03:17:30Z,MERGED,True,125,27,2,https://github.com/josephsutton1,kdc: Check PAC of FAST armor tickets,2,[],https://github.com/heimdal/heimdal/pull/891,https://github.com/abartlet,5,https://github.com/heimdal/heimdal/pull/891#issuecomment-995450404,"Look up the client name of the armor TGT in the database, and check that the PAC is valid.",Looks like we need to allow the client not to exist (because it is anonymous) if we are willing to allow the PAC not to exist.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,891,2021-12-15T08:04:58Z,2021-12-16T01:59:01Z,2021-12-17T03:17:30Z,MERGED,True,125,27,2,https://github.com/josephsutton1,kdc: Check PAC of FAST armor tickets,2,[],https://github.com/heimdal/heimdal/pull/891,https://github.com/abartlet,6,https://github.com/heimdal/heimdal/pull/891#issuecomment-995453461,"Look up the client name of the armor TGT in the database, and check that the PAC is valid.","The _kdc_db_fetch() would have been db_fetch_client() from krb5tgs.c in an earlier version of this, but we tightened this up too much in our concerns about ensuring we really have the client and are not confused by realm aliases.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,891,2021-12-15T08:04:58Z,2021-12-16T01:59:01Z,2021-12-17T03:17:30Z,MERGED,True,125,27,2,https://github.com/josephsutton1,kdc: Check PAC of FAST armor tickets,2,[],https://github.com/heimdal/heimdal/pull/891,https://github.com/abartlet,7,https://github.com/heimdal/heimdal/pull/891#issuecomment-995453721,"Look up the client name of the armor TGT in the database, and check that the PAC is valid.","So also to allow a FAST amour from a trusted realm, we need to go back to db_fetch_client(), as well as the anonyous PKINIT thing.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,891,2021-12-15T08:04:58Z,2021-12-16T01:59:01Z,2021-12-17T03:17:30Z,MERGED,True,125,27,2,https://github.com/josephsutton1,kdc: Check PAC of FAST armor tickets,2,[],https://github.com/heimdal/heimdal/pull/891,https://github.com/lhoward,8,https://github.com/heimdal/heimdal/pull/891#issuecomment-995457631,"Look up the client name of the armor TGT in the database, and check that the PAC is valid.","OK, I'll back this out for now.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,891,2021-12-15T08:04:58Z,2021-12-16T01:59:01Z,2021-12-17T03:17:30Z,MERGED,True,125,27,2,https://github.com/josephsutton1,kdc: Check PAC of FAST armor tickets,2,[],https://github.com/heimdal/heimdal/pull/891,https://github.com/lhoward,9,https://github.com/heimdal/heimdal/pull/891#issuecomment-995457743,"Look up the client name of the armor TGT in the database, and check that the PAC is valid.","PS. Please put ""Closes: #xxx"" in the commit message.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,891,2021-12-15T08:04:58Z,2021-12-16T01:59:01Z,2021-12-17T03:17:30Z,MERGED,True,125,27,2,https://github.com/josephsutton1,kdc: Check PAC of FAST armor tickets,2,[],https://github.com/heimdal/heimdal/pull/891,https://github.com/lhoward,10,https://github.com/heimdal/heimdal/pull/891#issuecomment-995459277,"Look up the client name of the armor TGT in the database, and check that the PAC is valid.","Reverted. Can you also check all the other check_pac changes won't break cross-realm clients? Sorry, I should have thought of this.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,891,2021-12-15T08:04:58Z,2021-12-16T01:59:01Z,2021-12-17T03:17:30Z,MERGED,True,125,27,2,https://github.com/josephsutton1,kdc: Check PAC of FAST armor tickets,2,[],https://github.com/heimdal/heimdal/pull/891,https://github.com/abartlet,11,https://github.com/heimdal/heimdal/pull/891#issuecomment-995574990,"Look up the client name of the armor TGT in the database, and check that the PAC is valid.","I've been thinking about this, and we will drop attempting to merge this.  My work to fix it showed this is fairly complex (what is the right way to get our own realm, reliably?) and it makes no major improvement to security or functionality.
We will be back, but once we put the PAC into a device claim etc, thinking carefully about the cross-realm part.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,891,2021-12-15T08:04:58Z,2021-12-16T01:59:01Z,2021-12-17T03:17:30Z,MERGED,True,125,27,2,https://github.com/josephsutton1,kdc: Check PAC of FAST armor tickets,2,[],https://github.com/heimdal/heimdal/pull/891,https://github.com/lhoward,12,https://github.com/heimdal/heimdal/pull/891#issuecomment-995587677,"Look up the client name of the armor TGT in the database, and check that the PAC is valid.",What does Windows do?,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,891,2021-12-15T08:04:58Z,2021-12-16T01:59:01Z,2021-12-17T03:17:30Z,MERGED,True,125,27,2,https://github.com/josephsutton1,kdc: Check PAC of FAST armor tickets,2,[],https://github.com/heimdal/heimdal/pull/891,https://github.com/abartlet,13,https://github.com/heimdal/heimdal/pull/891#issuecomment-995602480,"Look up the client name of the armor TGT in the database, and check that the PAC is valid.","Windows requires it, which is how we got here.  @josephsutton1 wrote
some awesome tests in Samba to explore all this, and these patches were
to make that pass.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,891,2021-12-15T08:04:58Z,2021-12-16T01:59:01Z,2021-12-17T03:17:30Z,MERGED,True,125,27,2,https://github.com/josephsutton1,kdc: Check PAC of FAST armor tickets,2,[],https://github.com/heimdal/heimdal/pull/891,https://github.com/lhoward,14,https://github.com/heimdal/heimdal/pull/891#issuecomment-995606478,"Look up the client name of the armor TGT in the database, and check that the PAC is valid.","Ok, well we should be able to verify local realm client names and all realm TGS signatures?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,891,2021-12-15T08:04:58Z,2021-12-16T01:59:01Z,2021-12-17T03:17:30Z,MERGED,True,125,27,2,https://github.com/josephsutton1,kdc: Check PAC of FAST armor tickets,2,[],https://github.com/heimdal/heimdal/pull/891,https://github.com/abartlet,15,https://github.com/heimdal/heimdal/pull/891#issuecomment-995611584,"Look up the client name of the armor TGT in the database, and check that the PAC is valid.","Yes.

abartlet@1c3189d
is part of
https://github.com/abartlet/heimdal/commits/fix-fast

I just realised I was spending time fixing a patch that was beyond the
remit of 'get Heimdal upgraded and FAST into Samba' and I should focus
on the other patches.

Andrew,
…
-- 
Andrew Bartlett (he/him)        https://samba.org/~abartlet/
Samba Team Member (since 2001)  https://samba.org
Samba Developer, Catalyst IT    https://catalyst.net.nz/services/samba",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,891,2021-12-15T08:04:58Z,2021-12-16T01:59:01Z,2021-12-17T03:17:30Z,MERGED,True,125,27,2,https://github.com/josephsutton1,kdc: Check PAC of FAST armor tickets,2,[],https://github.com/heimdal/heimdal/pull/891,https://github.com/lhoward,16,https://github.com/heimdal/heimdal/pull/891#issuecomment-996245104,"Look up the client name of the armor TGT in the database, and check that the PAC is valid.","If not checking the armour PAC is a vulnerability then, we should get a patch in to support it that does work with cross-realm armour clients.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,891,2021-12-15T08:04:58Z,2021-12-16T01:59:01Z,2021-12-17T03:17:30Z,MERGED,True,125,27,2,https://github.com/josephsutton1,kdc: Check PAC of FAST armor tickets,2,[],https://github.com/heimdal/heimdal/pull/891,https://github.com/lhoward,17,https://github.com/heimdal/heimdal/pull/891#issuecomment-996245373,"Look up the client name of the armor TGT in the database, and check that the PAC is valid.",(I guess it's only an issue with device claims.),True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,891,2021-12-15T08:04:58Z,2021-12-16T01:59:01Z,2021-12-17T03:17:30Z,MERGED,True,125,27,2,https://github.com/josephsutton1,kdc: Check PAC of FAST armor tickets,2,[],https://github.com/heimdal/heimdal/pull/891,https://github.com/abartlet,18,https://github.com/heimdal/heimdal/pull/891#issuecomment-996249673,"Look up the client name of the armor TGT in the database, and check that the PAC is valid.","That's my assumption. It matters for the other cases (S4U2Self, User2User) because of the name confusion, but I don't see how it would matter here, as the name of the armor user is unused until device claims, which we hope to get to soonish (just not in this effort).",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,891,2021-12-15T08:04:58Z,2021-12-16T01:59:01Z,2021-12-17T03:17:30Z,MERGED,True,125,27,2,https://github.com/josephsutton1,kdc: Check PAC of FAST armor tickets,2,[],https://github.com/heimdal/heimdal/pull/891,https://github.com/lhoward,19,https://github.com/heimdal/heimdal/pull/891#issuecomment-996387093,"Look up the client name of the armor TGT in the database, and check that the PAC is valid.","I reckon this patch is OK, because _kdc_check_pac() (based on the comments) can handle cross-realm clients. We just need the patch for synthetic clients in the local realm. Gonna re-merge.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,891,2021-12-15T08:04:58Z,2021-12-16T01:59:01Z,2021-12-17T03:17:30Z,MERGED,True,125,27,2,https://github.com/josephsutton1,kdc: Check PAC of FAST armor tickets,2,[],https://github.com/heimdal/heimdal/pull/891,https://github.com/abartlet,20,https://github.com/heimdal/heimdal/pull/891#issuecomment-996388076,"Look up the client name of the armor TGT in the database, and check that the PAC is valid.",See https://github.com/abartlet/heimdal/commits/fix-fast for how far I got trying to fix this.  Some subtle little things in here still I fear...,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,891,2021-12-15T08:04:58Z,2021-12-16T01:59:01Z,2021-12-17T03:17:30Z,MERGED,True,125,27,2,https://github.com/josephsutton1,kdc: Check PAC of FAST armor tickets,2,[],https://github.com/heimdal/heimdal/pull/891,https://github.com/lhoward,21,https://github.com/heimdal/heimdal/pull/891#issuecomment-996390867,"Look up the client name of the armor TGT in the database, and check that the PAC is valid.","Ah, OK. Well, it doesn't affect us for now as PAC checking is by default disabled, so do you want to patch against master?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,891,2021-12-15T08:04:58Z,2021-12-16T01:59:01Z,2021-12-17T03:17:30Z,MERGED,True,125,27,2,https://github.com/josephsutton1,kdc: Check PAC of FAST armor tickets,2,[],https://github.com/heimdal/heimdal/pull/891,https://github.com/lhoward,22,https://github.com/heimdal/heimdal/pull/891#issuecomment-996391318,"Look up the client name of the armor TGT in the database, and check that the PAC is valid.","BTW, you need to check the PAC for constrained delegation to avoid a class of attacks, right? So the call to _kdc_check_pac() at the S4U2Proxy call site should add an additional argument force_require_pac or similar?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,891,2021-12-15T08:04:58Z,2021-12-16T01:59:01Z,2021-12-17T03:17:30Z,MERGED,True,125,27,2,https://github.com/josephsutton1,kdc: Check PAC of FAST armor tickets,2,[],https://github.com/heimdal/heimdal/pull/891,https://github.com/lhoward,23,https://github.com/heimdal/heimdal/pull/891#issuecomment-996392181,"Look up the client name of the armor TGT in the database, and check that the PAC is valid.","As in, even in the non-Samba case, because the PAC replaces KRB5SignedPath, which is used to protect the evidence ticket from being tampered with by the delegating service.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,891,2021-12-15T08:04:58Z,2021-12-16T01:59:01Z,2021-12-17T03:17:30Z,MERGED,True,125,27,2,https://github.com/josephsutton1,kdc: Check PAC of FAST armor tickets,2,[],https://github.com/heimdal/heimdal/pull/891,https://github.com/abartlet,24,https://github.com/heimdal/heimdal/pull/891#issuecomment-996392327,"Look up the client name of the armor TGT in the database, and check that the PAC is valid.",I thought the issue was with the _kdc_db_fetch() bit.  What if armor_client is in a different realm?,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,891,2021-12-15T08:04:58Z,2021-12-16T01:59:01Z,2021-12-17T03:17:30Z,MERGED,True,125,27,2,https://github.com/josephsutton1,kdc: Check PAC of FAST armor tickets,2,[],https://github.com/heimdal/heimdal/pull/891,https://github.com/josephsutton1,25,https://github.com/heimdal/heimdal/pull/891#issuecomment-996392767,"Look up the client name of the armor TGT in the database, and check that the PAC is valid.","The constrained delegation case should be OK, because mspac is explicitly checked to be non-NULL after the call to _kdc_check_pac().",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,891,2021-12-15T08:04:58Z,2021-12-16T01:59:01Z,2021-12-17T03:17:30Z,MERGED,True,125,27,2,https://github.com/josephsutton1,kdc: Check PAC of FAST armor tickets,2,[],https://github.com/heimdal/heimdal/pull/891,https://github.com/lhoward,26,https://github.com/heimdal/heimdal/pull/891#issuecomment-996393961,"Look up the client name of the armor TGT in the database, and check that the PAC is valid.","The constrained delegation case should be OK, because mspac is explicitly checked to be non-NULL after the call to _kdc_check_pac().

Ah, excellent catch. I realise replacing KRB5SignedPath with the PAC runs contrary to our stated objective of not requiring a flag day so, maybe Heimdal 8 can require a PAC in all cases anyway, but we'll figure that out separately. Leave as is-is for now.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,891,2021-12-15T08:04:58Z,2021-12-16T01:59:01Z,2021-12-17T03:17:30Z,MERGED,True,125,27,2,https://github.com/josephsutton1,kdc: Check PAC of FAST armor tickets,2,[],https://github.com/heimdal/heimdal/pull/891,https://github.com/lhoward,27,https://github.com/heimdal/heimdal/pull/891#issuecomment-996394804,"Look up the client name of the armor TGT in the database, and check that the PAC is valid.","I thought the issue was with the _kdc_db_fetch() bit. What if armor_client is in a different realm?

Right, so this should be no different to a TGT being in a different realm in the TGS path. So we need to allow _kdc_db_fetch() to fail?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,891,2021-12-15T08:04:58Z,2021-12-16T01:59:01Z,2021-12-17T03:17:30Z,MERGED,True,125,27,2,https://github.com/josephsutton1,kdc: Check PAC of FAST armor tickets,2,[],https://github.com/heimdal/heimdal/pull/891,https://github.com/lhoward,28,https://github.com/heimdal/heimdal/pull/891#issuecomment-996395134,"Look up the client name of the armor TGT in the database, and check that the PAC is valid.","Like _kdc_db_fetch() in krb5tgs.c, can't we just squash HDB_ERR_NOT_FOUND_HERE to 0?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,891,2021-12-15T08:04:58Z,2021-12-16T01:59:01Z,2021-12-17T03:17:30Z,MERGED,True,125,27,2,https://github.com/josephsutton1,kdc: Check PAC of FAST armor tickets,2,[],https://github.com/heimdal/heimdal/pull/891,https://github.com/lhoward,29,https://github.com/heimdal/heimdal/pull/891#issuecomment-996395200,"Look up the client name of the armor TGT in the database, and check that the PAC is valid.","More to the point, can't we just make db_fetch_client() public?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,891,2021-12-15T08:04:58Z,2021-12-16T01:59:01Z,2021-12-17T03:17:30Z,MERGED,True,125,27,2,https://github.com/josephsutton1,kdc: Check PAC of FAST armor tickets,2,[],https://github.com/heimdal/heimdal/pull/891,https://github.com/abartlet,30,https://github.com/heimdal/heimdal/pull/891#issuecomment-996397468,"Look up the client name of the armor TGT in the database, and check that the PAC is valid.","that's what I was doing, making db_fetch_client() public as _kdc_db_fetch_client_for_tgs() and therefore allowing HDB_ERR_NOENTRY if this was not our realm.  But finding our realm was non-trivial and I just realised this was a little more work than I had time for right now.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,891,2021-12-15T08:04:58Z,2021-12-16T01:59:01Z,2021-12-17T03:17:30Z,MERGED,True,125,27,2,https://github.com/josephsutton1,kdc: Check PAC of FAST armor tickets,2,[],https://github.com/heimdal/heimdal/pull/891,https://github.com/abartlet,31,https://github.com/heimdal/heimdal/pull/891#issuecomment-996397888,"Look up the client name of the armor TGT in the database, and check that the PAC is valid.","BTW, HDB_ERR_NOT_FOUND_HERE is for the RODC, where the full secrets are not on the entry, HDB_ERR_NOENTRY is for the name was not found in the DB.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,891,2021-12-15T08:04:58Z,2021-12-16T01:59:01Z,2021-12-17T03:17:30Z,MERGED,True,125,27,2,https://github.com/josephsutton1,kdc: Check PAC of FAST armor tickets,2,[],https://github.com/heimdal/heimdal/pull/891,https://github.com/lhoward,32,https://github.com/heimdal/heimdal/pull/891#issuecomment-996400163,"Look up the client name of the armor TGT in the database, and check that the PAC is valid.",I think our realm can just be fastreq.req_body.realm?,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,891,2021-12-15T08:04:58Z,2021-12-16T01:59:01Z,2021-12-17T03:17:30Z,MERGED,True,125,27,2,https://github.com/josephsutton1,kdc: Check PAC of FAST armor tickets,2,[],https://github.com/heimdal/heimdal/pull/891,https://github.com/lhoward,33,https://github.com/heimdal/heimdal/pull/891#issuecomment-996402380,"Look up the client name of the armor TGT in the database, and check that the PAC is valid.",Please review #901.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,891,2021-12-15T08:04:58Z,2021-12-16T01:59:01Z,2021-12-17T03:17:30Z,MERGED,True,125,27,2,https://github.com/josephsutton1,kdc: Check PAC of FAST armor tickets,2,[],https://github.com/heimdal/heimdal/pull/891,https://github.com/lhoward,34,https://github.com/heimdal/heimdal/pull/891#issuecomment-996403523,"Look up the client name of the armor TGT in the database, and check that the PAC is valid.",Noted re: HDB_ERR_NOT_FOUND_HERE. Moving further comments to #901.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,892,2021-12-15T08:49:43Z,2021-12-16T03:41:10Z,2021-12-17T02:31:24Z,MERGED,True,17,1,3,https://github.com/abartlet,Samba CVE-2020-25719 kdc: Require PAC to be present,1,['bug'],https://github.com/heimdal/heimdal/pull/892,https://github.com/abartlet,1,https://github.com/heimdal/heimdal/pull/892,"This allows Heimdal to match AD behaviour, when configured,
for the behaviour after Microsoft's CVE-2021-42287 when
PacRequestorEnforcement is set to 2.
Samba BUG: https://bugzilla.samba.org/show_bug.cgi?id=14686
REF: https://support.microsoft.com/en-au/topic/kb5008380-authentication-updates-cve-2021-42287-9dafac11-e0d0-4cb8-959a-143bd0201041
Signed-off-by: Joseph Sutton josephsutton@catalyst.net.nz
Reviewed-by: Andrew Bartlett abartlet@samba.org
[abarlet@samba.org based on Samba commit
756934f14cc87dc1adfd9315672ae5d49cb24d95
and f7a2fef8f49a86f63c3dc2f6a2d7d979fb53238a]
This will aid in #891 by introducing the required flag.","This allows Heimdal to match AD behaviour, when configured,
for the behaviour after Microsoft's CVE-2021-42287 when
PacRequestorEnforcement is set to 2.
Samba BUG: https://bugzilla.samba.org/show_bug.cgi?id=14686
REF: https://support.microsoft.com/en-au/topic/kb5008380-authentication-updates-cve-2021-42287-9dafac11-e0d0-4cb8-959a-143bd0201041
Signed-off-by: Joseph Sutton josephsutton@catalyst.net.nz
Reviewed-by: Andrew Bartlett abartlet@samba.org
[abarlet@samba.org based on Samba commit
756934f14cc87dc1adfd9315672ae5d49cb24d95
and f7a2fef8f49a86f63c3dc2f6a2d7d979fb53238a]
This will aid in #891 by introducing the required flag.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,892,2021-12-15T08:49:43Z,2021-12-16T03:41:10Z,2021-12-17T02:31:24Z,MERGED,True,17,1,3,https://github.com/abartlet,Samba CVE-2020-25719 kdc: Require PAC to be present,1,['bug'],https://github.com/heimdal/heimdal/pull/892,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/892#issuecomment-994512983,"This allows Heimdal to match AD behaviour, when configured,
for the behaviour after Microsoft's CVE-2021-42287 when
PacRequestorEnforcement is set to 2.
Samba BUG: https://bugzilla.samba.org/show_bug.cgi?id=14686
REF: https://support.microsoft.com/en-au/topic/kb5008380-authentication-updates-cve-2021-42287-9dafac11-e0d0-4cb8-959a-143bd0201041
Signed-off-by: Joseph Sutton josephsutton@catalyst.net.nz
Reviewed-by: Andrew Bartlett abartlet@samba.org
[abarlet@samba.org based on Samba commit
756934f14cc87dc1adfd9315672ae5d49cb24d95
and f7a2fef8f49a86f63c3dc2f6a2d7d979fb53238a]
This will aid in #891 by introducing the required flag.","LGTM, can this also be used by the armor PAC patch?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,892,2021-12-15T08:49:43Z,2021-12-16T03:41:10Z,2021-12-17T02:31:24Z,MERGED,True,17,1,3,https://github.com/abartlet,Samba CVE-2020-25719 kdc: Require PAC to be present,1,['bug'],https://github.com/heimdal/heimdal/pull/892,https://github.com/lhoward,3,https://github.com/heimdal/heimdal/pull/892#issuecomment-994514657,"This allows Heimdal to match AD behaviour, when configured,
for the behaviour after Microsoft's CVE-2021-42287 when
PacRequestorEnforcement is set to 2.
Samba BUG: https://bugzilla.samba.org/show_bug.cgi?id=14686
REF: https://support.microsoft.com/en-au/topic/kb5008380-authentication-updates-cve-2021-42287-9dafac11-e0d0-4cb8-959a-143bd0201041
Signed-off-by: Joseph Sutton josephsutton@catalyst.net.nz
Reviewed-by: Andrew Bartlett abartlet@samba.org
[abarlet@samba.org based on Samba commit
756934f14cc87dc1adfd9315672ae5d49cb24d95
and f7a2fef8f49a86f63c3dc2f6a2d7d979fb53238a]
This will aid in #891 by introducing the required flag.",Please update commit message so ^kdc: and fix any spelling errors and I’ll merge :),True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,892,2021-12-15T08:49:43Z,2021-12-16T03:41:10Z,2021-12-17T02:31:24Z,MERGED,True,17,1,3,https://github.com/abartlet,Samba CVE-2020-25719 kdc: Require PAC to be present,1,['bug'],https://github.com/heimdal/heimdal/pull/892,https://github.com/lhoward,4,https://github.com/heimdal/heimdal/pull/892#issuecomment-994516393,"This allows Heimdal to match AD behaviour, when configured,
for the behaviour after Microsoft's CVE-2021-42287 when
PacRequestorEnforcement is set to 2.
Samba BUG: https://bugzilla.samba.org/show_bug.cgi?id=14686
REF: https://support.microsoft.com/en-au/topic/kb5008380-authentication-updates-cve-2021-42287-9dafac11-e0d0-4cb8-959a-143bd0201041
Signed-off-by: Joseph Sutton josephsutton@catalyst.net.nz
Reviewed-by: Andrew Bartlett abartlet@samba.org
[abarlet@samba.org based on Samba commit
756934f14cc87dc1adfd9315672ae5d49cb24d95
and f7a2fef8f49a86f63c3dc2f6a2d7d979fb53238a]
This will aid in #891 by introducing the required flag.","But do mention CVE in the commit body
s/matche/match",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,892,2021-12-15T08:49:43Z,2021-12-16T03:41:10Z,2021-12-17T02:31:24Z,MERGED,True,17,1,3,https://github.com/abartlet,Samba CVE-2020-25719 kdc: Require PAC to be present,1,['bug'],https://github.com/heimdal/heimdal/pull/892,https://github.com/lhoward,5,https://github.com/heimdal/heimdal/pull/892#issuecomment-995391246,"This allows Heimdal to match AD behaviour, when configured,
for the behaviour after Microsoft's CVE-2021-42287 when
PacRequestorEnforcement is set to 2.
Samba BUG: https://bugzilla.samba.org/show_bug.cgi?id=14686
REF: https://support.microsoft.com/en-au/topic/kb5008380-authentication-updates-cve-2021-42287-9dafac11-e0d0-4cb8-959a-143bd0201041
Signed-off-by: Joseph Sutton josephsutton@catalyst.net.nz
Reviewed-by: Andrew Bartlett abartlet@samba.org
[abarlet@samba.org based on Samba commit
756934f14cc87dc1adfd9315672ae5d49cb24d95
and f7a2fef8f49a86f63c3dc2f6a2d7d979fb53238a]
This will aid in #891 by introducing the required flag.",Will merge as soon as commit message is updated. cc @josephsutton1,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,892,2021-12-15T08:49:43Z,2021-12-16T03:41:10Z,2021-12-17T02:31:24Z,MERGED,True,17,1,3,https://github.com/abartlet,Samba CVE-2020-25719 kdc: Require PAC to be present,1,['bug'],https://github.com/heimdal/heimdal/pull/892,https://github.com/josephsutton1,6,https://github.com/heimdal/heimdal/pull/892#issuecomment-995393209,"This allows Heimdal to match AD behaviour, when configured,
for the behaviour after Microsoft's CVE-2021-42287 when
PacRequestorEnforcement is set to 2.
Samba BUG: https://bugzilla.samba.org/show_bug.cgi?id=14686
REF: https://support.microsoft.com/en-au/topic/kb5008380-authentication-updates-cve-2021-42287-9dafac11-e0d0-4cb8-959a-143bd0201041
Signed-off-by: Joseph Sutton josephsutton@catalyst.net.nz
Reviewed-by: Andrew Bartlett abartlet@samba.org
[abarlet@samba.org based on Samba commit
756934f14cc87dc1adfd9315672ae5d49cb24d95
and f7a2fef8f49a86f63c3dc2f6a2d7d979fb53238a]
This will aid in #891 by introducing the required flag.","OK, what specifically needs to be fixed? The spelling and kdc: prefix seem to have been addressed.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,892,2021-12-15T08:49:43Z,2021-12-16T03:41:10Z,2021-12-17T02:31:24Z,MERGED,True,17,1,3,https://github.com/abartlet,Samba CVE-2020-25719 kdc: Require PAC to be present,1,['bug'],https://github.com/heimdal/heimdal/pull/892,https://github.com/abartlet,7,https://github.com/heimdal/heimdal/pull/892#issuecomment-995394893,"This allows Heimdal to match AD behaviour, when configured,
for the behaviour after Microsoft's CVE-2021-42287 when
PacRequestorEnforcement is set to 2.
Samba BUG: https://bugzilla.samba.org/show_bug.cgi?id=14686
REF: https://support.microsoft.com/en-au/topic/kb5008380-authentication-updates-cve-2021-42287-9dafac11-e0d0-4cb8-959a-143bd0201041
Signed-off-by: Joseph Sutton josephsutton@catalyst.net.nz
Reviewed-by: Andrew Bartlett abartlet@samba.org
[abarlet@samba.org based on Samba commit
756934f14cc87dc1adfd9315672ae5d49cb24d95
and f7a2fef8f49a86f63c3dc2f6a2d7d979fb53238a]
This will aid in #891 by introducing the required flag.","Yeah, I fixed that right after the request last night :-)",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,892,2021-12-15T08:49:43Z,2021-12-16T03:41:10Z,2021-12-17T02:31:24Z,MERGED,True,17,1,3,https://github.com/abartlet,Samba CVE-2020-25719 kdc: Require PAC to be present,1,['bug'],https://github.com/heimdal/heimdal/pull/892,https://github.com/lhoward,8,https://github.com/heimdal/heimdal/pull/892#issuecomment-995411547,"This allows Heimdal to match AD behaviour, when configured,
for the behaviour after Microsoft's CVE-2021-42287 when
PacRequestorEnforcement is set to 2.
Samba BUG: https://bugzilla.samba.org/show_bug.cgi?id=14686
REF: https://support.microsoft.com/en-au/topic/kb5008380-authentication-updates-cve-2021-42287-9dafac11-e0d0-4cb8-959a-143bd0201041
Signed-off-by: Joseph Sutton josephsutton@catalyst.net.nz
Reviewed-by: Andrew Bartlett abartlet@samba.org
[abarlet@samba.org based on Samba commit
756934f14cc87dc1adfd9315672ae5d49cb24d95
and f7a2fef8f49a86f63c3dc2f6a2d7d979fb53238a]
This will aid in #891 by introducing the required flag.","My bad, confused GitHub PR title with commit message.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,893,2021-12-15T22:17:53Z,2021-12-15T23:49:15Z,2021-12-17T02:31:06Z,MERGED,True,10,0,1,https://github.com/josephsutton1,kdc: Don't advertise padata types that will not be accepted,1,['bug'],https://github.com/heimdal/heimdal/pull/893,https://github.com/josephsutton1,1,https://github.com/heimdal/heimdal/pull/893,"Instead of always advertising PADATA-ENCRYPTED-CHALLENGE, we only advertise it if FAST is in use.
We also check configuration options to only advertise PADATA-ENC-TIMESTAMP if it will be accepted based on whether FAST is currently in use. This permits the non-RFC behaviour required to avoid breaking earlier Heimdal clients.
This incorporates changes from Apple Heimdal-597.140.2.","Instead of always advertising PADATA-ENCRYPTED-CHALLENGE, we only advertise it if FAST is in use.
We also check configuration options to only advertise PADATA-ENC-TIMESTAMP if it will be accepted based on whether FAST is currently in use. This permits the non-RFC behaviour required to avoid breaking earlier Heimdal clients.
This incorporates changes from Apple Heimdal-597.140.2.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,894,2021-12-15T22:59:14Z,2021-12-15T23:40:01Z,2021-12-17T02:24:00Z,MERGED,True,84,8,6,https://github.com/nicowilliams,Sync errors with mit,4,[],https://github.com/heimdal/heimdal/pull/894,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/894,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,894,2021-12-15T22:59:14Z,2021-12-15T23:40:01Z,2021-12-17T02:24:00Z,MERGED,True,84,8,6,https://github.com/nicowilliams,Sync errors with mit,4,[],https://github.com/heimdal/heimdal/pull/894,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/894#issuecomment-995301336,,LGTM,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,895,2021-12-15T23:01:35Z,2021-12-30T07:54:54Z,2021-12-30T18:07:36Z,MERGED,True,87,43,8,https://github.com/nicowilliams,Optimistic anon fast,4,[],https://github.com/heimdal/heimdal/pull/895,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/895,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,896,2021-12-16T02:15:21Z,2021-12-16T05:11:29Z,2021-12-17T02:30:49Z,MERGED,True,44,43,9,https://github.com/josephsutton1,kdc: Add krb5_is_enctype_old() to determine whether an enctype is older,1,['bug'],https://github.com/heimdal/heimdal/pull/896,https://github.com/josephsutton1,1,https://github.com/heimdal/heimdal/pull/896,"AES256 and AES128 are newer enctypes because they are officially specified in RFC4120 and RFC8009, while enctypes not officially specified since RFC4120 are considered older. This function differs from older_enctype() in that it does not report unknown or non-existent enctypes as being 'newer'.","AES256 and AES128 are newer enctypes because they are officially specified in RFC4120 and RFC8009, while enctypes not officially specified since RFC4120 are considered older. This function differs from older_enctype() in that it does not report unknown or non-existent enctypes as being 'newer'.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,897,2021-12-16T21:12:23Z,2021-12-16T22:00:42Z,2021-12-17T02:30:34Z,MERGED,True,3,1,1,https://github.com/josephsutton1,kdc: Optionally allow missing additional ticket PAC for user-to-user,1,['bug'],https://github.com/heimdal/heimdal/pull/897,https://github.com/josephsutton1,1,https://github.com/heimdal/heimdal/pull/897,"If the 'require_pac' option is not set, we should not require a PAC in this situation.","If the 'require_pac' option is not set, we should not require a PAC in this situation.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,899,2021-12-17T01:33:02Z,2021-12-17T02:28:23Z,2021-12-23T00:22:35Z,CLOSED,False,9,2,1,https://github.com/abartlet,kdc: Do not set a kvno in the reply for PKINIT,1,['bug'],https://github.com/heimdal/heimdal/pull/899,https://github.com/abartlet,1,https://github.com/heimdal/heimdal/pull/899,"Based on discussion at #888 (comment)
in turn based on a patch by Stefan Metzmacher metze@samba.org
Signed-off-by: Andrew Bartlett abartlet@samba.org","Based on discussion at #888 (comment)
in turn based on a patch by Stefan Metzmacher metze@samba.org
Signed-off-by: Andrew Bartlett abartlet@samba.org",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,899,2021-12-17T01:33:02Z,2021-12-17T02:28:23Z,2021-12-23T00:22:35Z,CLOSED,False,9,2,1,https://github.com/abartlet,kdc: Do not set a kvno in the reply for PKINIT,1,['bug'],https://github.com/heimdal/heimdal/pull/899,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/899#issuecomment-996383364,"Based on discussion at #888 (comment)
in turn based on a patch by Stefan Metzmacher metze@samba.org
Signed-off-by: Andrew Bartlett abartlet@samba.org",Comments notwithstanding LGTM.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,900,2021-12-17T01:47:41Z,2021-12-17T02:28:59Z,2021-12-18T00:33:09Z,MERGED,True,5,1,1,https://github.com/abartlet,"tgs-rep: always return canonical realm even if canonicalize falg is not set, same as Windows.",1,['NotABug'],https://github.com/heimdal/heimdal/pull/900,https://github.com/abartlet,1,https://github.com/heimdal/heimdal/pull/900,"This is an import of an older Samba commit, updated over time in our lorikeet-heimdal tree we would like to get upstream if possible.
The AD-behaviour regression was introduced by upstream commit:
378f34b
Signed-off-by: Isaac Boukris iboukris@gmail.com
[abartlet@samba.org Similar to Samba commit a9e6119ca0c2a78ef314c3162122539ee834aa04
but made conditional on server->entry.flags.force_canonicalize to
allow upstream submission]","This is an import of an older Samba commit, updated over time in our lorikeet-heimdal tree we would like to get upstream if possible.
The AD-behaviour regression was introduced by upstream commit:
378f34b
Signed-off-by: Isaac Boukris iboukris@gmail.com
[abartlet@samba.org Similar to Samba commit a9e6119ca0c2a78ef314c3162122539ee834aa04
but made conditional on server->entry.flags.force_canonicalize to
allow upstream submission]",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,900,2021-12-17T01:47:41Z,2021-12-17T02:28:59Z,2021-12-18T00:33:09Z,MERGED,True,5,1,1,https://github.com/abartlet,"tgs-rep: always return canonical realm even if canonicalize falg is not set, same as Windows.",1,['NotABug'],https://github.com/heimdal/heimdal/pull/900,https://github.com/abartlet,2,https://github.com/heimdal/heimdal/pull/900#issuecomment-996362431,"This is an import of an older Samba commit, updated over time in our lorikeet-heimdal tree we would like to get upstream if possible.
The AD-behaviour regression was introduced by upstream commit:
378f34b
Signed-off-by: Isaac Boukris iboukris@gmail.com
[abartlet@samba.org Similar to Samba commit a9e6119ca0c2a78ef314c3162122539ee834aa04
but made conditional on server->entry.flags.force_canonicalize to
allow upstream submission]",Updated as suggested by @lhoward here: #871 (comment),True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,900,2021-12-17T01:47:41Z,2021-12-17T02:28:59Z,2021-12-18T00:33:09Z,MERGED,True,5,1,1,https://github.com/abartlet,"tgs-rep: always return canonical realm even if canonicalize falg is not set, same as Windows.",1,['NotABug'],https://github.com/heimdal/heimdal/pull/900,https://github.com/lhoward,3,https://github.com/heimdal/heimdal/pull/900#issuecomment-997107061,"This is an import of an older Samba commit, updated over time in our lorikeet-heimdal tree we would like to get upstream if possible.
The AD-behaviour regression was introduced by upstream commit:
378f34b
Signed-off-by: Isaac Boukris iboukris@gmail.com
[abartlet@samba.org Similar to Samba commit a9e6119ca0c2a78ef314c3162122539ee834aa04
but made conditional on server->entry.flags.force_canonicalize to
allow upstream submission]",Reverting this commit as it is superfluous. The server principal name is canonicalised prior to calling tgs_make_reply() if force_canonicalize is set on the server principal entry.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,901,2021-12-17T03:14:49Z,2021-12-18T04:09:38Z,2021-12-20T23:55:38Z,MERGED,True,205,153,6,https://github.com/lhoward,kdc: allow cross-realm FAST armor TGT,3,['bug'],https://github.com/heimdal/heimdal/pull/901,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/901,"08e0305 introduced a patch to validate armor ticket PACs, but required that the armor client principal was in the local realm (as it did not allow _kdc_db_fetch() to fail).
Allwo cross-realm FAST armor clients by using the same logic to look up the client principal as the TGS itself does, i.e. use db_fetch_client() which ignores HDB_ERR_NOT_FOUND_HERE.","08e0305 introduced a patch to validate armor ticket PACs, but required that the armor client principal was in the local realm (as it did not allow _kdc_db_fetch() to fail).
Allwo cross-realm FAST armor clients by using the same logic to look up the client principal as the TGS itself does, i.e. use db_fetch_client() which ignores HDB_ERR_NOT_FOUND_HERE.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,901,2021-12-17T03:14:49Z,2021-12-18T04:09:38Z,2021-12-20T23:55:38Z,MERGED,True,205,153,6,https://github.com/lhoward,kdc: allow cross-realm FAST armor TGT,3,['bug'],https://github.com/heimdal/heimdal/pull/901,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/901#issuecomment-996403860,"08e0305 introduced a patch to validate armor ticket PACs, but required that the armor client principal was in the local realm (as it did not allow _kdc_db_fetch() to fail).
Allwo cross-realm FAST armor clients by using the same logic to look up the client principal as the TGS itself does, i.e. use db_fetch_client() which ignores HDB_ERR_NOT_FOUND_HERE.","OK, so is the realm from the request body the right realm? Is there an interaction with referrals we need to consider?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,901,2021-12-17T03:14:49Z,2021-12-18T04:09:38Z,2021-12-20T23:55:38Z,MERGED,True,205,153,6,https://github.com/lhoward,kdc: allow cross-realm FAST armor TGT,3,['bug'],https://github.com/heimdal/heimdal/pull/901,https://github.com/abartlet,3,https://github.com/heimdal/heimdal/pull/901#issuecomment-996404213,"08e0305 introduced a patch to validate armor ticket PACs, but required that the armor client principal was in the local realm (as it did not allow _kdc_db_fetch() to fail).
Allwo cross-realm FAST armor clients by using the same logic to look up the client principal as the TGS itself does, i.e. use db_fetch_client() which ignores HDB_ERR_NOT_FOUND_HERE.","What locks fastreq.req_body.realm to being our realm, given this is a security check?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,901,2021-12-17T03:14:49Z,2021-12-18T04:09:38Z,2021-12-20T23:55:38Z,MERGED,True,205,153,6,https://github.com/lhoward,kdc: allow cross-realm FAST armor TGT,3,['bug'],https://github.com/heimdal/heimdal/pull/901,https://github.com/lhoward,4,https://github.com/heimdal/heimdal/pull/901#issuecomment-996404220,"08e0305 introduced a patch to validate armor ticket PACs, but required that the armor client principal was in the local realm (as it did not allow _kdc_db_fetch() to fail).
Allwo cross-realm FAST armor clients by using the same logic to look up the client principal as the TGS itself does, i.e. use db_fetch_client() which ignores HDB_ERR_NOT_FOUND_HERE.","You're right, it is complicated...",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,901,2021-12-17T03:14:49Z,2021-12-18T04:09:38Z,2021-12-20T23:55:38Z,MERGED,True,205,153,6,https://github.com/lhoward,kdc: allow cross-realm FAST armor TGT,3,['bug'],https://github.com/heimdal/heimdal/pull/901,https://github.com/lhoward,5,https://github.com/heimdal/heimdal/pull/901#issuecomment-996405913,"08e0305 introduced a patch to validate armor ticket PACs, but required that the armor client principal was in the local realm (as it did not allow _kdc_db_fetch() to fail).
Allwo cross-realm FAST armor clients by using the same logic to look up the client principal as the TGS itself does, i.e. use db_fetch_client() which ignores HDB_ERR_NOT_FOUND_HERE.","If are actually going to issue a non-referral ticket with a PAC (the only case where validating the armour PAC is interesting from a security perspective, I think?) then it will match our realm.
But at the time of validating the armour ticket we probably don't know whether we're issuing a referral or not.
So maybe we are going to need a armor_pac_validated bit in the request that can triggers an error if we don't issue a referral?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,901,2021-12-17T03:14:49Z,2021-12-18T04:09:38Z,2021-12-20T23:55:38Z,MERGED,True,205,153,6,https://github.com/lhoward,kdc: allow cross-realm FAST armor TGT,3,['bug'],https://github.com/heimdal/heimdal/pull/901,https://github.com/lhoward,6,https://github.com/heimdal/heimdal/pull/901#issuecomment-996409042,"08e0305 introduced a patch to validate armor ticket PACs, but required that the armor client principal was in the local realm (as it did not allow _kdc_db_fetch() to fail).
Allwo cross-realm FAST armor clients by using the same logic to look up the client principal as the TGS itself does, i.e. use db_fetch_client() which ignores HDB_ERR_NOT_FOUND_HERE.","As I understand it, we only need to validate the armour PAC when device claims are being inserted in a service ticket, so we can probably ignore the validation result when we are issuing a referral.
However we might be getting to the point where we need to check with dochelp.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,901,2021-12-17T03:14:49Z,2021-12-18T04:09:38Z,2021-12-20T23:55:38Z,MERGED,True,205,153,6,https://github.com/lhoward,kdc: allow cross-realm FAST armor TGT,3,['bug'],https://github.com/heimdal/heimdal/pull/901,https://github.com/lhoward,7,https://github.com/heimdal/heimdal/pull/901#issuecomment-996409312,"08e0305 introduced a patch to validate armor ticket PACs, but required that the armor client principal was in the local realm (as it did not allow _kdc_db_fetch() to fail).
Allwo cross-realm FAST armor clients by using the same logic to look up the client principal as the TGS itself does, i.e. use db_fetch_client() which ignores HDB_ERR_NOT_FOUND_HERE.","Obviously that assumes that the device claims aren't inserted at the AS-REQ point but, I think this might actually be behind the design decision to allow explicit armour, which is an extension to RFC 6113.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,901,2021-12-17T03:14:49Z,2021-12-18T04:09:38Z,2021-12-20T23:55:38Z,MERGED,True,205,153,6,https://github.com/lhoward,kdc: allow cross-realm FAST armor TGT,3,['bug'],https://github.com/heimdal/heimdal/pull/901,https://github.com/lhoward,8,https://github.com/heimdal/heimdal/pull/901#issuecomment-996410164,"08e0305 introduced a patch to validate armor ticket PACs, but required that the armor client principal was in the local realm (as it did not allow _kdc_db_fetch() to fail).
Allwo cross-realm FAST armor clients by using the same logic to look up the client principal as the TGS itself does, i.e. use db_fetch_client() which ignores HDB_ERR_NOT_FOUND_HERE.","Also, you want the device claims from the device you're requesting the service ticket on, not the device you initially acquired the TGT (normally these will be the same but, TGTs can be forwarded, e.g. over RDP).",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,901,2021-12-17T03:14:49Z,2021-12-18T04:09:38Z,2021-12-20T23:55:38Z,MERGED,True,205,153,6,https://github.com/lhoward,kdc: allow cross-realm FAST armor TGT,3,['bug'],https://github.com/heimdal/heimdal/pull/901,https://github.com/lhoward,9,https://github.com/heimdal/heimdal/pull/901#issuecomment-996414831,"08e0305 introduced a patch to validate armor ticket PACs, but required that the armor client principal was in the local realm (as it did not allow _kdc_db_fetch() to fail).
Allwo cross-realm FAST armor clients by using the same logic to look up the client principal as the TGS itself does, i.e. use db_fetch_client() which ignores HDB_ERR_NOT_FOUND_HERE.","OK, I need to think this through more, but I think it's OK to only validate the armour PAC when there's explicit armour on a TGS-REQ, and we're not issuing a referral.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,901,2021-12-17T03:14:49Z,2021-12-18T04:09:38Z,2021-12-20T23:55:38Z,MERGED,True,205,153,6,https://github.com/lhoward,kdc: allow cross-realm FAST armor TGT,3,['bug'],https://github.com/heimdal/heimdal/pull/901,https://github.com/lhoward,10,https://github.com/heimdal/heimdal/pull/901#issuecomment-996423341,"08e0305 introduced a patch to validate armor ticket PACs, but required that the armor client principal was in the local realm (as it did not allow _kdc_db_fetch() to fail).
Allwo cross-realm FAST armor clients by using the same logic to look up the client principal as the TGS itself does, i.e. use db_fetch_client() which ignores HDB_ERR_NOT_FOUND_HERE.","Or, obviously, the alternative is to check the PAC just at the very end when we know we're issuing a service ticket...",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,901,2021-12-17T03:14:49Z,2021-12-18T04:09:38Z,2021-12-20T23:55:38Z,MERGED,True,205,153,6,https://github.com/lhoward,kdc: allow cross-realm FAST armor TGT,3,['bug'],https://github.com/heimdal/heimdal/pull/901,https://github.com/abartlet,11,https://github.com/heimdal/heimdal/pull/901#issuecomment-996424651,"08e0305 introduced a patch to validate armor ticket PACs, but required that the armor client principal was in the local realm (as it did not allow _kdc_db_fetch() to fail).
Allwo cross-realm FAST armor clients by using the same logic to look up the client principal as the TGS itself does, i.e. use db_fetch_client() which ignores HDB_ERR_NOT_FOUND_HERE.",@josephsutton1 can you look over this for @lhoward ?,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,901,2021-12-17T03:14:49Z,2021-12-18T04:09:38Z,2021-12-20T23:55:38Z,MERGED,True,205,153,6,https://github.com/lhoward,kdc: allow cross-realm FAST armor TGT,3,['bug'],https://github.com/heimdal/heimdal/pull/901,https://github.com/lhoward,12,https://github.com/heimdal/heimdal/pull/901#issuecomment-996680970,"08e0305 introduced a patch to validate armor ticket PACs, but required that the armor client principal was in the local realm (as it did not allow _kdc_db_fetch() to fail).
Allwo cross-realm FAST armor clients by using the same logic to look up the client principal as the TGS itself does, i.e. use db_fetch_client() which ignores HDB_ERR_NOT_FOUND_HERE.","Hmm, something about this doesn’t feel quite right yet, but I’m not sure what :)",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,901,2021-12-17T03:14:49Z,2021-12-18T04:09:38Z,2021-12-20T23:55:38Z,MERGED,True,205,153,6,https://github.com/lhoward,kdc: allow cross-realm FAST armor TGT,3,['bug'],https://github.com/heimdal/heimdal/pull/901,https://github.com/lhoward,13,https://github.com/heimdal/heimdal/pull/901#issuecomment-997113061,"08e0305 introduced a patch to validate armor ticket PACs, but required that the armor client principal was in the local realm (as it did not allow _kdc_db_fetch() to fail).
Allwo cross-realm FAST armor clients by using the same logic to look up the client principal as the TGS itself does, i.e. use db_fetch_client() which ignores HDB_ERR_NOT_FOUND_HERE.","My current theory is that we only need to require a validated armour PAC if add_ticket_sig is set in tgs_build_reply().
    /*
     * Service tickets can have device claims added, which requires
     * the PAC in the armor ticket be validated.
     */
    if (add_ticket_sig && priv->armor_crypto &&
        priv->config->require_pac && !priv->validated_armor_pac) {
        ret = KRB5KDC_ERR_BADOPTION;
        kdc_log(priv->context, priv->config, 0,
                ""Armor ticket missing valid PAC when issuing service ticket"");
        goto out;
    }
`

But, maybe we need to move this check out of `fast_unwrap_request()` and only do it when we need to.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,901,2021-12-17T03:14:49Z,2021-12-18T04:09:38Z,2021-12-20T23:55:38Z,MERGED,True,205,153,6,https://github.com/lhoward,kdc: allow cross-realm FAST armor TGT,3,['bug'],https://github.com/heimdal/heimdal/pull/901,https://github.com/lhoward,14,https://github.com/heimdal/heimdal/pull/901#issuecomment-997133606,"08e0305 introduced a patch to validate armor ticket PACs, but required that the armor client principal was in the local realm (as it did not allow _kdc_db_fetch() to fail).
Allwo cross-realm FAST armor clients by using the same logic to look up the client principal as the TGS itself does, i.e. use db_fetch_client() which ignores HDB_ERR_NOT_FOUND_HERE.","Factored out into a new function, _kdc_fast_check_armor_pac(), which only gets called when we are about to issue a service ticket. @josephsutton1 could you please review this?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,901,2021-12-17T03:14:49Z,2021-12-18T04:09:38Z,2021-12-20T23:55:38Z,MERGED,True,205,153,6,https://github.com/lhoward,kdc: allow cross-realm FAST armor TGT,3,['bug'],https://github.com/heimdal/heimdal/pull/901,https://github.com/josephsutton1,15,https://github.com/heimdal/heimdal/pull/901#issuecomment-997537774,"08e0305 introduced a patch to validate armor ticket PACs, but required that the armor client principal was in the local realm (as it did not allow _kdc_db_fetch() to fail).
Allwo cross-realm FAST armor clients by using the same logic to look up the client principal as the TGS itself does, i.e. use db_fetch_client() which ignores HDB_ERR_NOT_FOUND_HERE.","Sorry for not reviewing this earlier. Testing on Windows shows that device claims are only added for a TGS-REQ with an explicit armor ticket, so only checking the PAC in that case seems to make sense. The only issue I found is that r->client_princ and r->server_princ are not set for a TGS-REQ, which is the case when the PAC is being checked, so krb5_unparse_name() crashes when trying to unparse them. I made a pull request for that here.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,901,2021-12-17T03:14:49Z,2021-12-18T04:09:38Z,2021-12-20T23:55:38Z,MERGED,True,205,153,6,https://github.com/lhoward,kdc: allow cross-realm FAST armor TGT,3,['bug'],https://github.com/heimdal/heimdal/pull/901,https://github.com/lhoward,16,https://github.com/heimdal/heimdal/pull/901#issuecomment-998355743,"08e0305 introduced a patch to validate armor ticket PACs, but required that the armor client principal was in the local realm (as it did not allow _kdc_db_fetch() to fail).
Allwo cross-realm FAST armor clients by using the same logic to look up the client principal as the TGS itself does, i.e. use db_fetch_client() which ignores HDB_ERR_NOT_FOUND_HERE.","Sorry for not reviewing this earlier. Testing on Windows shows that device claims are only added for a TGS-REQ with an explicit armor ticket, so only checking the PAC in that case seems to make sense. The only issue I found is that r->client_princ and r->server_princ are not set for a TGS-REQ, which is the case when the PAC is being checked, so krb5_unparse_name() crashes when trying to unparse them. I made a pull request for that here.

Thanks for the fix, has been applied.
Yes, it only makes sense to add device claims with explicit armour, otherwise forwarded TGTs would represent the device the user authenticated on, rather than the device the user is accessing the service from.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,902,2021-12-19T06:45:46Z,2021-12-21T23:36:27Z,2021-12-21T23:36:27Z,MERGED,True,1171,101,27,https://github.com/lhoward,Add canonical client principal to PAC,7,['feature request'],https://github.com/heimdal/heimdal/pull/902,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/902,"KDC and libkrb5 support for the UPN_DNS_INFO_EX PAC info buffer, which contains the canonical client name from the TGT.","KDC and libkrb5 support for the UPN_DNS_INFO_EX PAC info buffer, which contains the canonical client name from the TGT.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,902,2021-12-19T06:45:46Z,2021-12-21T23:36:27Z,2021-12-21T23:36:27Z,MERGED,True,1171,101,27,https://github.com/lhoward,Add canonical client principal to PAC,7,['feature request'],https://github.com/heimdal/heimdal/pull/902,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/902#issuecomment-997634875,"KDC and libkrb5 support for the UPN_DNS_INFO_EX PAC info buffer, which contains the canonical client name from the TGT.",cc @josephsutton1,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,902,2021-12-19T06:45:46Z,2021-12-21T23:36:27Z,2021-12-21T23:36:27Z,MERGED,True,1171,101,27,https://github.com/lhoward,Add canonical client principal to PAC,7,['feature request'],https://github.com/heimdal/heimdal/pull/902,https://github.com/nicowilliams,3,https://github.com/heimdal/heimdal/pull/902#issuecomment-999068459,"KDC and libkrb5 support for the UPN_DNS_INFO_EX PAC info buffer, which contains the canonical client name from the TGT.",LGTM except for the config matter (see commentary).,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,903,2021-12-20T02:21:21Z,2021-12-20T03:34:22Z,2021-12-20T03:34:22Z,MERGED,True,1,13,1,https://github.com/josephsutton1,kdc: Fix armor ticket PAC checking,2,[],https://github.com/heimdal/heimdal/pull/903,https://github.com/josephsutton1,1,https://github.com/heimdal/heimdal/pull/903,Avoid a crash if verifying the armor ticket PAC fails.,Avoid a crash if verifying the armor ticket PAC fails.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,904,2021-12-23T03:41:54Z,2021-12-23T23:52:20Z,2021-12-24T02:14:19Z,CLOSED,False,69,0,1,https://github.com/josephsutton1,kdc: Return PA-SUPPORTED-ENCTYPES to indicate TGS etype support,1,[],https://github.com/heimdal/heimdal/pull/904,https://github.com/josephsutton1,1,https://github.com/heimdal/heimdal/pull/904,"In an AS-REQ exchange with the TGS, we now return PA-SUPPORTED-ENCTYPES containing supported enctypes of the TGS if the canonicalize flag is set. We also set the FAST-supported bit to let Windows client know that FAST is available.
Setting the FAST-supported bit in this padata type informs Windows that FAST support is available, and Windows won't try FAST if it is not set.","In an AS-REQ exchange with the TGS, we now return PA-SUPPORTED-ENCTYPES containing supported enctypes of the TGS if the canonicalize flag is set. We also set the FAST-supported bit to let Windows client know that FAST is available.
Setting the FAST-supported bit in this padata type informs Windows that FAST support is available, and Windows won't try FAST if it is not set.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,904,2021-12-23T03:41:54Z,2021-12-23T23:52:20Z,2021-12-24T02:14:19Z,CLOSED,False,69,0,1,https://github.com/josephsutton1,kdc: Return PA-SUPPORTED-ENCTYPES to indicate TGS etype support,1,[],https://github.com/heimdal/heimdal/pull/904,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/904#issuecomment-1000031137,"In an AS-REQ exchange with the TGS, we now return PA-SUPPORTED-ENCTYPES containing supported enctypes of the TGS if the canonicalize flag is set. We also set the FAST-supported bit to let Windows client know that FAST is available.
Setting the FAST-supported bit in this padata type informs Windows that FAST support is available, and Windows won't try FAST if it is not set.","Given this is very Windows-specific, how about we add something like:
typedef krb5_error_code
(KRB5_CALLCONV *krb5plugin_windc_finalize_reply)(
        void *,
        krb5_context context,
        krb5_kdc_configuration *config,
        hdb_entry_ex *client,
        hdb_entry_ex *server,
        KDC_REP *rep,
        EncTicketPart *et,
        EncKDCRepPart *ek);
to the WinDC interface?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,904,2021-12-23T03:41:54Z,2021-12-23T23:52:20Z,2021-12-24T02:14:19Z,CLOSED,False,69,0,1,https://github.com/josephsutton1,kdc: Return PA-SUPPORTED-ENCTYPES to indicate TGS etype support,1,[],https://github.com/heimdal/heimdal/pull/904,https://github.com/lhoward,3,https://github.com/heimdal/heimdal/pull/904#issuecomment-1000031193,"In an AS-REQ exchange with the TGS, we now return PA-SUPPORTED-ENCTYPES containing supported enctypes of the TGS if the canonicalize flag is set. We also set the FAST-supported bit to let Windows client know that FAST is available.
Setting the FAST-supported bit in this padata type informs Windows that FAST support is available, and Windows won't try FAST if it is not set.",This could get called immediately prior to encoding the ticket.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,904,2021-12-23T03:41:54Z,2021-12-23T23:52:20Z,2021-12-24T02:14:19Z,CLOSED,False,69,0,1,https://github.com/josephsutton1,kdc: Return PA-SUPPORTED-ENCTYPES to indicate TGS etype support,1,[],https://github.com/heimdal/heimdal/pull/904,https://github.com/lhoward,4,https://github.com/heimdal/heimdal/pull/904#issuecomment-1000036512,"In an AS-REQ exchange with the TGS, we now return PA-SUPPORTED-ENCTYPES containing supported enctypes of the TGS if the canonicalize flag is set. We also set the FAST-supported bit to let Windows client know that FAST is available.
Setting the FAST-supported bit in this padata type informs Windows that FAST support is available, and Windows won't try FAST if it is not set.","See #906, I reckon this might be a better approach that doesn't pollute the KDC so much. We're OK with the PAC because it lets us replace KRB5SignedPath, but I'm not sure we want to import Windows-specific PA types that we don't need.
@nicowilliams what think you?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,904,2021-12-23T03:41:54Z,2021-12-23T23:52:20Z,2021-12-24T02:14:19Z,CLOSED,False,69,0,1,https://github.com/josephsutton1,kdc: Return PA-SUPPORTED-ENCTYPES to indicate TGS etype support,1,[],https://github.com/heimdal/heimdal/pull/904,https://github.com/lhoward,5,https://github.com/heimdal/heimdal/pull/904#issuecomment-1000568062,"In an AS-REQ exchange with the TGS, we now return PA-SUPPORTED-ENCTYPES containing supported enctypes of the TGS if the canonicalize flag is set. We also set the FAST-supported bit to let Windows client know that FAST is available.
Setting the FAST-supported bit in this padata type informs Windows that FAST support is available, and Windows won't try FAST if it is not set.",I'm going to close this because it can now be implemented purely in Samba by implementing a finalize_reply() method in the windc plugin.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,904,2021-12-23T03:41:54Z,2021-12-23T23:52:20Z,2021-12-24T02:14:19Z,CLOSED,False,69,0,1,https://github.com/josephsutton1,kdc: Return PA-SUPPORTED-ENCTYPES to indicate TGS etype support,1,[],https://github.com/heimdal/heimdal/pull/904,https://github.com/josephsutton1,6,https://github.com/heimdal/heimdal/pull/904#issuecomment-1000610198,"In an AS-REQ exchange with the TGS, we now return PA-SUPPORTED-ENCTYPES containing supported enctypes of the TGS if the canonicalize flag is set. We also set the FAST-supported bit to let Windows client know that FAST is available.
Setting the FAST-supported bit in this padata type informs Windows that FAST support is available, and Windows won't try FAST if it is not set.","Thanks for the feedback, and for adding the plugin hook! I'll look into implementing this on the Samba side.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,904,2021-12-23T03:41:54Z,2021-12-23T23:52:20Z,2021-12-24T02:14:19Z,CLOSED,False,69,0,1,https://github.com/josephsutton1,kdc: Return PA-SUPPORTED-ENCTYPES to indicate TGS etype support,1,[],https://github.com/heimdal/heimdal/pull/904,https://github.com/lhoward,7,https://github.com/heimdal/heimdal/pull/904#issuecomment-1000611053,"In an AS-REQ exchange with the TGS, we now return PA-SUPPORTED-ENCTYPES containing supported enctypes of the TGS if the canonicalize flag is set. We also set the FAST-supported bit to let Windows client know that FAST is available.
Setting the FAST-supported bit in this padata type informs Windows that FAST support is available, and Windows won't try FAST if it is not set.","Yeah, I figure this is the way to go because then you can pretty much do anything you want in both the AS and TGS prior to sending the reply, without having to file a PR :)
We can add more hooks if you want.
Eventually, we'd love to move all the Windows protocols (S4U and PAC) into their own functions that take a single astgs_request_t parameter, with a view to making those plugins (even if they are ’built-in’ plugins compiled into libkdc).",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,905,2021-12-23T04:32:11Z,2021-12-23T09:07:32Z,2021-12-23T09:07:32Z,CLOSED,False,83,2,5,https://github.com/lhoward,kdc: add finalize_reply API to windc plugin,1,[],https://github.com/heimdal/heimdal/pull/905,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/905,Allow a windc plugin to finalize the KDC reply (including the encrypted ticket and reply parts) before encoding for transmission.,Allow a windc plugin to finalize the KDC reply (including the encrypted ticket and reply parts) before encoding for transmission.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,905,2021-12-23T04:32:11Z,2021-12-23T09:07:32Z,2021-12-23T09:07:32Z,CLOSED,False,83,2,5,https://github.com/lhoward,kdc: add finalize_reply API to windc plugin,1,[],https://github.com/heimdal/heimdal/pull/905,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/905#issuecomment-1000151413,Allow a windc plugin to finalize the KDC reply (including the encrypted ticket and reply parts) before encoding for transmission.,"Closing, replaced by #906.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,906,2021-12-23T08:58:19Z,2021-12-23T23:49:37Z,2021-12-23T23:49:37Z,MERGED,True,305,310,11,https://github.com/lhoward,Make part of astgs_request_t public,12,[],https://github.com/heimdal/heimdal/pull/906,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/906,"Encapsulate as much state as possible in astgs_request_t, with a view to eventually migrating the KDC to a table-driven architecture. In the interim, use a single astgs_request_t argument for pre- and post-hook plugins, e.g.:
static krb5_error_code KRB5_CALLCONV
client_access(void *ctx, astgs_request_t r)
{
    krb5_warnx(r->context, ""client_access"");
    return 0;
}

static krb5_error_code KRB5_CALLCONV
finalize_reply(void *ctx, astgs_request_t r)
{
    krb5_warnx(r->context, ""finalize_reply"");
    return 0;
}
The astgs_request_t structure is separated into a public and private component, depending on whether we are building the KDC or not.","Encapsulate as much state as possible in astgs_request_t, with a view to eventually migrating the KDC to a table-driven architecture. In the interim, use a single astgs_request_t argument for pre- and post-hook plugins, e.g.:
static krb5_error_code KRB5_CALLCONV
client_access(void *ctx, astgs_request_t r)
{
    krb5_warnx(r->context, ""client_access"");
    return 0;
}

static krb5_error_code KRB5_CALLCONV
finalize_reply(void *ctx, astgs_request_t r)
{
    krb5_warnx(r->context, ""finalize_reply"");
    return 0;
}
The astgs_request_t structure is separated into a public and private component, depending on whether we are building the KDC or not.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,906,2021-12-23T08:58:19Z,2021-12-23T23:49:37Z,2021-12-23T23:49:37Z,MERGED,True,305,310,11,https://github.com/lhoward,Make part of astgs_request_t public,12,[],https://github.com/heimdal/heimdal/pull/906,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/906#issuecomment-1000567465,"Encapsulate as much state as possible in astgs_request_t, with a view to eventually migrating the KDC to a table-driven architecture. In the interim, use a single astgs_request_t argument for pre- and post-hook plugins, e.g.:
static krb5_error_code KRB5_CALLCONV
client_access(void *ctx, astgs_request_t r)
{
    krb5_warnx(r->context, ""client_access"");
    return 0;
}

static krb5_error_code KRB5_CALLCONV
finalize_reply(void *ctx, astgs_request_t r)
{
    krb5_warnx(r->context, ""finalize_reply"");
    return 0;
}
The astgs_request_t structure is separated into a public and private component, depending on whether we are building the KDC or not.",Beautiful!,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,907,2021-12-24T04:05:33Z,2022-01-05T02:01:07Z,2022-01-05T02:01:07Z,MERGED,True,674,486,6,https://github.com/lhoward,Refactor Services for User (MS-SFU/S4U) into separate file,2,['refactor'],https://github.com/heimdal/heimdal/pull/907,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/907,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,907,2021-12-24T04:05:33Z,2022-01-05T02:01:07Z,2022-01-05T02:01:07Z,MERGED,True,674,486,6,https://github.com/lhoward,Refactor Services for User (MS-SFU/S4U) into separate file,2,['refactor'],https://github.com/heimdal/heimdal/pull/907,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/907#issuecomment-1005269962,,LGTM.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,908,2021-12-24T05:39:00Z,2021-12-26T23:16:59Z,2021-12-26T23:16:59Z,MERGED,True,37,24,8,https://github.com/nicowilliams,Fix the logging of `SUCCESS` when the KDC sends back errors,2,[],https://github.com/heimdal/heimdal/pull/908,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/908,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,909,2021-12-29T23:10:49Z,2022-01-02T05:30:15Z,2022-01-02T05:30:16Z,MERGED,True,1447,93,16,https://github.com/nicowilliams,Name Attributes,3,['feature request'],https://github.com/heimdal/heimdal/pull/909,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/909,"gss_get_name_attribute(), gss_inquire_name(), gss_display_name_ext(), gss_export_name_composite(), and import of GSS_C_NT_COMPOSITE_EXPORT name tokens is included.
Missing functionality: gss_set_name_attribute() and gss_delete_name_attribute().  Also, no plugin system is included at this time (a plugin would allow for additional attributes / prefixes, mappings/lookups, and/or local policy).
Attributes:

urn:mspac: (same as MIT) (XXX missing are the URNs for the specific buffers)
urn:ietf:kerberos:nameattr-...:

attributes of all Kerberos names:

realm (the realm of the name)
ncomp (the number of components of the name)
ncomp#<digit> (the corresponding component of the name)


attributes of names from established security contexts:
canonical-name (the canonical name of the initiator, if there is one, as an exported name token and/or as an RFC1964 syntax principal for the display form)
peer-realm (the name of the peer's realm, when the name came from an established security context)
transit-path (currently only for the initiator name on the acceptor side)
ticket-authz-data (only for the initiator name on the acceptor side)
authenticator-authz-data (currently only for the initiator name on the acceptor side)
authz-data#<N> (...; either from the ticket or the authenticator)
local-login-user



The authenticated output parameter of gss_get_name_attribute() is set for the realm, ncomp, and ncomp#<digit> attributes IFF the name is a peer from an established security context.
The authenticated output parameter of gss_get_name_attribute() is set for the PAC and AD-KDC-ISSUED IFF their keyed checksums were valid.
The authenticated output parameter of gss_get_name_attribute() is set for peer-realm, canonical-name, and transit-path.
Otherwise authenticated is set to false.
The complete output parameter of gss_get_name_attribute() for all these attributes is set to true.
All of these attributes are single-valued.
This is ready for review.
Wishlist:

PAC login buffer extraction, parsing, and exposing of individual fields as attributes, especially SIDs
more transited path support
a way to indicate supported critical attributes via gss_set_name_attribute()
a way to request PAC and such
a way to set authz-data to send via the Authenticator","gss_get_name_attribute(), gss_inquire_name(), gss_display_name_ext(), gss_export_name_composite(), and import of GSS_C_NT_COMPOSITE_EXPORT name tokens is included.
Missing functionality: gss_set_name_attribute() and gss_delete_name_attribute().  Also, no plugin system is included at this time (a plugin would allow for additional attributes / prefixes, mappings/lookups, and/or local policy).
Attributes:

urn:mspac: (same as MIT) (XXX missing are the URNs for the specific buffers)
urn:ietf:kerberos:nameattr-...:

attributes of all Kerberos names:

realm (the realm of the name)
ncomp (the number of components of the name)
ncomp#<digit> (the corresponding component of the name)


attributes of names from established security contexts:
canonical-name (the canonical name of the initiator, if there is one, as an exported name token and/or as an RFC1964 syntax principal for the display form)
peer-realm (the name of the peer's realm, when the name came from an established security context)
transit-path (currently only for the initiator name on the acceptor side)
ticket-authz-data (only for the initiator name on the acceptor side)
authenticator-authz-data (currently only for the initiator name on the acceptor side)
authz-data#<N> (...; either from the ticket or the authenticator)
local-login-user



The authenticated output parameter of gss_get_name_attribute() is set for the realm, ncomp, and ncomp#<digit> attributes IFF the name is a peer from an established security context.
The authenticated output parameter of gss_get_name_attribute() is set for the PAC and AD-KDC-ISSUED IFF their keyed checksums were valid.
The authenticated output parameter of gss_get_name_attribute() is set for peer-realm, canonical-name, and transit-path.
Otherwise authenticated is set to false.
The complete output parameter of gss_get_name_attribute() for all these attributes is set to true.
All of these attributes are single-valued.
This is ready for review.
Wishlist:

PAC login buffer extraction, parsing, and exposing of individual fields as attributes, especially SIDs
more transited path support
a way to indicate supported critical attributes via gss_set_name_attribute()
a way to request PAC and such
a way to set authz-data to send via the Authenticator",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,909,2021-12-29T23:10:49Z,2022-01-02T05:30:15Z,2022-01-02T05:30:16Z,MERGED,True,1447,93,16,https://github.com/nicowilliams,Name Attributes,3,['feature request'],https://github.com/heimdal/heimdal/pull/909,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/909#issuecomment-1002874648,"gss_get_name_attribute(), gss_inquire_name(), gss_display_name_ext(), gss_export_name_composite(), and import of GSS_C_NT_COMPOSITE_EXPORT name tokens is included.
Missing functionality: gss_set_name_attribute() and gss_delete_name_attribute().  Also, no plugin system is included at this time (a plugin would allow for additional attributes / prefixes, mappings/lookups, and/or local policy).
Attributes:

urn:mspac: (same as MIT) (XXX missing are the URNs for the specific buffers)
urn:ietf:kerberos:nameattr-...:

attributes of all Kerberos names:

realm (the realm of the name)
ncomp (the number of components of the name)
ncomp#<digit> (the corresponding component of the name)


attributes of names from established security contexts:
canonical-name (the canonical name of the initiator, if there is one, as an exported name token and/or as an RFC1964 syntax principal for the display form)
peer-realm (the name of the peer's realm, when the name came from an established security context)
transit-path (currently only for the initiator name on the acceptor side)
ticket-authz-data (only for the initiator name on the acceptor side)
authenticator-authz-data (currently only for the initiator name on the acceptor side)
authz-data#<N> (...; either from the ticket or the authenticator)
local-login-user



The authenticated output parameter of gss_get_name_attribute() is set for the realm, ncomp, and ncomp#<digit> attributes IFF the name is a peer from an established security context.
The authenticated output parameter of gss_get_name_attribute() is set for the PAC and AD-KDC-ISSUED IFF their keyed checksums were valid.
The authenticated output parameter of gss_get_name_attribute() is set for peer-realm, canonical-name, and transit-path.
Otherwise authenticated is set to false.
The complete output parameter of gss_get_name_attribute() for all these attributes is set to true.
All of these attributes are single-valued.
This is ready for review.
Wishlist:

PAC login buffer extraction, parsing, and exposing of individual fields as attributes, especially SIDs
more transited path support
a way to indicate supported critical attributes via gss_set_name_attribute()
a way to request PAC and such
a way to set authz-data to send via the Authenticator","Looking at mech_eap, which supports naming extensions (including composite names) and is known to work with both MIT and Heimdal, composite name tokens include the token type and mechanism OID prefix, and nothing specific is expected of the mechglue. gss_export_name_composite() calls straight through to the mechanism, and gss_import_name(GSS_C_NT_COMPOSITE_EXPORT) does validate the prefix to find the correct mechanism, but otherwise passes the entire token to the mechanism.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,909,2021-12-29T23:10:49Z,2022-01-02T05:30:15Z,2022-01-02T05:30:16Z,MERGED,True,1447,93,16,https://github.com/nicowilliams,Name Attributes,3,['feature request'],https://github.com/heimdal/heimdal/pull/909,https://github.com/nicowilliams,3,https://github.com/heimdal/heimdal/pull/909#issuecomment-1003611533,"gss_get_name_attribute(), gss_inquire_name(), gss_display_name_ext(), gss_export_name_composite(), and import of GSS_C_NT_COMPOSITE_EXPORT name tokens is included.
Missing functionality: gss_set_name_attribute() and gss_delete_name_attribute().  Also, no plugin system is included at this time (a plugin would allow for additional attributes / prefixes, mappings/lookups, and/or local policy).
Attributes:

urn:mspac: (same as MIT) (XXX missing are the URNs for the specific buffers)
urn:ietf:kerberos:nameattr-...:

attributes of all Kerberos names:

realm (the realm of the name)
ncomp (the number of components of the name)
ncomp#<digit> (the corresponding component of the name)


attributes of names from established security contexts:
canonical-name (the canonical name of the initiator, if there is one, as an exported name token and/or as an RFC1964 syntax principal for the display form)
peer-realm (the name of the peer's realm, when the name came from an established security context)
transit-path (currently only for the initiator name on the acceptor side)
ticket-authz-data (only for the initiator name on the acceptor side)
authenticator-authz-data (currently only for the initiator name on the acceptor side)
authz-data#<N> (...; either from the ticket or the authenticator)
local-login-user



The authenticated output parameter of gss_get_name_attribute() is set for the realm, ncomp, and ncomp#<digit> attributes IFF the name is a peer from an established security context.
The authenticated output parameter of gss_get_name_attribute() is set for the PAC and AD-KDC-ISSUED IFF their keyed checksums were valid.
The authenticated output parameter of gss_get_name_attribute() is set for peer-realm, canonical-name, and transit-path.
Otherwise authenticated is set to false.
The complete output parameter of gss_get_name_attribute() for all these attributes is set to true.
All of these attributes are single-valued.
This is ready for review.
Wishlist:

PAC login buffer extraction, parsing, and exposing of individual fields as attributes, especially SIDs
more transited path support
a way to indicate supported critical attributes via gss_set_name_attribute()
a way to request PAC and such
a way to set authz-data to send via the Authenticator","Er, there was no support for importing composite name tokens before this because lib/gssapi/mech/gss_import_name.c:gss_import_name() was only checking for GSS_C_NT_EXPORT_NAME, which means I can in fact change the format to my liking.  That said, maybe you have mech_eap-using apps that were importing exported composite name tokens using GSS_C_NT_EXPORT_NAME?
Also, I don't understand this bit:
110         if (len < t + 4)
111                 return (GSS_S_BAD_NAME);
112         p += t;
113         len -= t;
114
115         t = (p[0] << 24) | (p[1] << 16) | (p[2] << 8) | p[3];
116         p += 4;
117         len -= 4;
118
119         if (!composite && len != t)
120                 return (GSS_S_BAD_NAME);

What's going on with line 119?  Why would we exempt exported composite name tokens from this check?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,909,2021-12-29T23:10:49Z,2022-01-02T05:30:15Z,2022-01-02T05:30:16Z,MERGED,True,1447,93,16,https://github.com/nicowilliams,Name Attributes,3,['feature request'],https://github.com/heimdal/heimdal/pull/909,https://github.com/nicowilliams,4,https://github.com/heimdal/heimdal/pull/909#issuecomment-1003629741,"gss_get_name_attribute(), gss_inquire_name(), gss_display_name_ext(), gss_export_name_composite(), and import of GSS_C_NT_COMPOSITE_EXPORT name tokens is included.
Missing functionality: gss_set_name_attribute() and gss_delete_name_attribute().  Also, no plugin system is included at this time (a plugin would allow for additional attributes / prefixes, mappings/lookups, and/or local policy).
Attributes:

urn:mspac: (same as MIT) (XXX missing are the URNs for the specific buffers)
urn:ietf:kerberos:nameattr-...:

attributes of all Kerberos names:

realm (the realm of the name)
ncomp (the number of components of the name)
ncomp#<digit> (the corresponding component of the name)


attributes of names from established security contexts:
canonical-name (the canonical name of the initiator, if there is one, as an exported name token and/or as an RFC1964 syntax principal for the display form)
peer-realm (the name of the peer's realm, when the name came from an established security context)
transit-path (currently only for the initiator name on the acceptor side)
ticket-authz-data (only for the initiator name on the acceptor side)
authenticator-authz-data (currently only for the initiator name on the acceptor side)
authz-data#<N> (...; either from the ticket or the authenticator)
local-login-user



The authenticated output parameter of gss_get_name_attribute() is set for the realm, ncomp, and ncomp#<digit> attributes IFF the name is a peer from an established security context.
The authenticated output parameter of gss_get_name_attribute() is set for the PAC and AD-KDC-ISSUED IFF their keyed checksums were valid.
The authenticated output parameter of gss_get_name_attribute() is set for peer-realm, canonical-name, and transit-path.
Otherwise authenticated is set to false.
The complete output parameter of gss_get_name_attribute() for all these attributes is set to true.
All of these attributes are single-valued.
This is ready for review.
Wishlist:

PAC login buffer extraction, parsing, and exposing of individual fields as attributes, especially SIDs
more transited path support
a way to indicate supported critical attributes via gss_set_name_attribute()
a way to request PAC and such
a way to set authz-data to send via the Authenticator",I've fixed all the things except the table driven attribute thing.  Working on that next.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,909,2021-12-29T23:10:49Z,2022-01-02T05:30:15Z,2022-01-02T05:30:16Z,MERGED,True,1447,93,16,https://github.com/nicowilliams,Name Attributes,3,['feature request'],https://github.com/heimdal/heimdal/pull/909,https://github.com/nicowilliams,5,https://github.com/heimdal/heimdal/pull/909#issuecomment-1003630240,"gss_get_name_attribute(), gss_inquire_name(), gss_display_name_ext(), gss_export_name_composite(), and import of GSS_C_NT_COMPOSITE_EXPORT name tokens is included.
Missing functionality: gss_set_name_attribute() and gss_delete_name_attribute().  Also, no plugin system is included at this time (a plugin would allow for additional attributes / prefixes, mappings/lookups, and/or local policy).
Attributes:

urn:mspac: (same as MIT) (XXX missing are the URNs for the specific buffers)
urn:ietf:kerberos:nameattr-...:

attributes of all Kerberos names:

realm (the realm of the name)
ncomp (the number of components of the name)
ncomp#<digit> (the corresponding component of the name)


attributes of names from established security contexts:
canonical-name (the canonical name of the initiator, if there is one, as an exported name token and/or as an RFC1964 syntax principal for the display form)
peer-realm (the name of the peer's realm, when the name came from an established security context)
transit-path (currently only for the initiator name on the acceptor side)
ticket-authz-data (only for the initiator name on the acceptor side)
authenticator-authz-data (currently only for the initiator name on the acceptor side)
authz-data#<N> (...; either from the ticket or the authenticator)
local-login-user



The authenticated output parameter of gss_get_name_attribute() is set for the realm, ncomp, and ncomp#<digit> attributes IFF the name is a peer from an established security context.
The authenticated output parameter of gss_get_name_attribute() is set for the PAC and AD-KDC-ISSUED IFF their keyed checksums were valid.
The authenticated output parameter of gss_get_name_attribute() is set for peer-realm, canonical-name, and transit-path.
Otherwise authenticated is set to false.
The complete output parameter of gss_get_name_attribute() for all these attributes is set to true.
All of these attributes are single-valued.
This is ready for review.
Wishlist:

PAC login buffer extraction, parsing, and exposing of individual fields as attributes, especially SIDs
more transited path support
a way to indicate supported critical attributes via gss_set_name_attribute()
a way to request PAC and such
a way to set authz-data to send via the Authenticator","The mech_eap thing...  There is something of an ABI change, which is that before if you called gss_import_name() with GSS_C_NT_EXPORT_NAME as the name type but the name token was a composite name token, then we accepted that and called the mechanism's import function with GSS_C_NT_EXPORT_NAME, but now we call it with GSS_C_NT_COMPOSITE_EXPORT instead.
I may further fix that to match the previous behavior...  (DONE)",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,909,2021-12-29T23:10:49Z,2022-01-02T05:30:15Z,2022-01-02T05:30:16Z,MERGED,True,1447,93,16,https://github.com/nicowilliams,Name Attributes,3,['feature request'],https://github.com/heimdal/heimdal/pull/909,https://github.com/lhoward,6,https://github.com/heimdal/heimdal/pull/909#issuecomment-1003630511,"gss_get_name_attribute(), gss_inquire_name(), gss_display_name_ext(), gss_export_name_composite(), and import of GSS_C_NT_COMPOSITE_EXPORT name tokens is included.
Missing functionality: gss_set_name_attribute() and gss_delete_name_attribute().  Also, no plugin system is included at this time (a plugin would allow for additional attributes / prefixes, mappings/lookups, and/or local policy).
Attributes:

urn:mspac: (same as MIT) (XXX missing are the URNs for the specific buffers)
urn:ietf:kerberos:nameattr-...:

attributes of all Kerberos names:

realm (the realm of the name)
ncomp (the number of components of the name)
ncomp#<digit> (the corresponding component of the name)


attributes of names from established security contexts:
canonical-name (the canonical name of the initiator, if there is one, as an exported name token and/or as an RFC1964 syntax principal for the display form)
peer-realm (the name of the peer's realm, when the name came from an established security context)
transit-path (currently only for the initiator name on the acceptor side)
ticket-authz-data (only for the initiator name on the acceptor side)
authenticator-authz-data (currently only for the initiator name on the acceptor side)
authz-data#<N> (...; either from the ticket or the authenticator)
local-login-user



The authenticated output parameter of gss_get_name_attribute() is set for the realm, ncomp, and ncomp#<digit> attributes IFF the name is a peer from an established security context.
The authenticated output parameter of gss_get_name_attribute() is set for the PAC and AD-KDC-ISSUED IFF their keyed checksums were valid.
The authenticated output parameter of gss_get_name_attribute() is set for peer-realm, canonical-name, and transit-path.
Otherwise authenticated is set to false.
The complete output parameter of gss_get_name_attribute() for all these attributes is set to true.
All of these attributes are single-valued.
This is ready for review.
Wishlist:

PAC login buffer extraction, parsing, and exposing of individual fields as attributes, especially SIDs
more transited path support
a way to indicate supported critical attributes via gss_set_name_attribute()
a way to request PAC and such
a way to set authz-data to send via the Authenticator","The mech_eap thing... There is something of an ABI change, which is that before if you called gss_import_name() with GSS_C_NT_EXPORT_NAME as the name type but the name token was a composite name token, then we accepted that and called the mechanism's import function with GSS_C_NT_EXPORT_NAME, but now we call it with GSS_C_NT_COMPOSITE_EXPORT instead.
I may further fix that to match the previous behavior...

mech_eap will import composite names with either name type. What it won't do is import a non-composite name with GSS_C_NT_COMPOSITE_EXPORT.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,910,2021-12-30T21:49:05Z,2022-01-04T01:27:44Z,2022-01-04T01:27:44Z,MERGED,True,216,123,25,https://github.com/lhoward,add attribute dictionary to kdc_request_t,3,"['feature request', 'refactor']",https://github.com/heimdal/heimdal/pull/910,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/910,Add a heim_dict_t to the KDC request structure for use by pre-authentication mechanisms and plugins.,Add a heim_dict_t to the KDC request structure for use by pre-authentication mechanisms and plugins.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,910,2021-12-30T21:49:05Z,2022-01-04T01:27:44Z,2022-01-04T01:27:44Z,MERGED,True,216,123,25,https://github.com/lhoward,add attribute dictionary to kdc_request_t,3,"['feature request', 'refactor']",https://github.com/heimdal/heimdal/pull/910,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/910#issuecomment-1004419237,Add a heim_dict_t to the KDC request structure for use by pre-authentication mechanisms and plugins.,"LGTM, except that we're not declaring calling conventions for functions exported by libkdc, but we should.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,910,2021-12-30T21:49:05Z,2022-01-04T01:27:44Z,2022-01-04T01:27:44Z,MERGED,True,216,123,25,https://github.com/lhoward,add attribute dictionary to kdc_request_t,3,"['feature request', 'refactor']",https://github.com/heimdal/heimdal/pull/910,https://github.com/lhoward,3,https://github.com/heimdal/heimdal/pull/910#issuecomment-1004427323,Add a heim_dict_t to the KDC request structure for use by pre-authentication mechanisms and plugins.,Will fix before merge.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,912,2021-12-31T06:25:32Z,2022-01-02T04:25:53Z,2022-01-02T04:25:53Z,MERGED,True,378,278,15,https://github.com/lhoward,Harmonize auditing APIs,9,['refactor'],https://github.com/heimdal/heimdal/pull/912,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/912,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,912,2021-12-31T06:25:32Z,2022-01-02T04:25:53Z,2022-01-02T04:25:53Z,MERGED,True,378,278,15,https://github.com/lhoward,Harmonize auditing APIs,9,['refactor'],https://github.com/heimdal/heimdal/pull/912,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/912#issuecomment-1003472357,,"The kv thing is designed to yield human-readable, machine-parseable log messages.  It's very particular, and the use is very particular.  Can we generalize it?  I think so.
The HDB audit thing for Samba is really only after state to feed back to the HDB for locking out users.  It could be made simple, and it could be made to use the kv framework.  All it needs to know is whether an AS-REQ succeeded or not, and if not, why.  The reason for failure could be varied, so the details matter, but it's mostly about ""password incorrect"".  Is there anything else it needs?  But in principle it (or something else) could need a lot of information.
Also, the problem with the kv stuff is that we vis everything immediately upon adding a kv.  The vis stuff can be unvis'ed, though idk how round trippy it is, but if it doesn't round-trip then one thing we could do is delay the vis work until heim_audit_trail(), then we can definitely use the raw kv at that point.
In fact, we could even allow values of all heimbase/CF types, including non-JSON, and then we could encode for logging only the ones that can be formatted as text.
As well, the kvs are not indexed -- it's just an array.  Maybe it should be represented as a dict with array values.  This would make ""querying"" the kv store possible (though a linear search of the array is probably ok given how few keys there are, we do have heim_dict_t).  This would then allow us to have an API consisting of key name & value type and format conventions that Samba (and anything else) could use.  Also, this would allow us to have plugins for auditing and for logging in somewhat different formats (e.g., we could have a JSON log).
If we do something like this then maybe we can unify the audit state.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,912,2021-12-31T06:25:32Z,2022-01-02T04:25:53Z,2022-01-02T04:25:53Z,MERGED,True,378,278,15,https://github.com/lhoward,Harmonize auditing APIs,9,['refactor'],https://github.com/heimdal/heimdal/pull/912,https://github.com/lhoward,3,https://github.com/heimdal/heimdal/pull/912#issuecomment-1003521310,,"The kv thing is designed to yield human-readable, machine-parseable log messages. It's very particular, and the use is very particular. Can we generalize it? I think so.

Agreed (see current patch).

The HDB audit thing for Samba is really only after state to feed back to the HDB for locking out users. It could be made simple, and it could be made to use the kv framework. All it needs to know is whether an AS-REQ succeeded or not, and if not, why. The reason for failure could be varied, so the details matter, but it's mostly about ""password incorrect"". Is there anything else it needs? But in principle it (or something else) could need a lot of information.

Well, this is a good question, see latest comments in #888. Looking at the Samba code, I think it really only cares about long-term key pre-authentication method decrypt failures (i.e. password failures) and successes, to manage lockouts. I think, with their cooperation (cc @abartlet @josephsutton1) we could eliminate most of the authentication event/status enumeration, particularly now the final error code is available to the audit method as HDB_REQUEST_KV_ERROR_CODE.

Also, the problem with the kv stuff is that we vis everything immediately upon adding a kv. The vis stuff can be unvis'ed, though idk how round trippy it is, but if it doesn't round-trip then one thing we could do is delay the vis work until heim_audit_trail(), then we can definitely use the raw kv at that point.

Doing this accurately would require retaining the vis flags, right? Which is possible (could be a hidden key) but it's a bit ugly. I suspect this work can be delayed: the audit points I replaced to take numbers and booleans never set the vis flags, and indeed KDC_AUDIT_VIS is only set once in kerberos5.c and never in krb5tgs.c.

In fact, we could even allow values of all heimbase/CF types, including non-JSON, and then we could encode for logging only the ones that can be formatted as text.

This is pretty much what I ended up doing: numbers, booleans, strings, the NULL type can be encoded for logging. Of course, there might be some circumstances where you want to hide a printable type from logging, and that is currently done by prefixing the key with a '#' symbol.

As well, the kvs are not indexed -- it's just an array. Maybe it should be represented as a dict with array values. This would make ""querying"" the kv store possible (though a linear search of the array is probably ok given how few keys there are, we do have heim_dict_t). This would then allow us to have an API consisting of key name & value type and format conventions that Samba (and anything else) could use. Also, this would allow us to have plugins for auditing and for logging in somewhat different formats (e.g., we could have a JSON log).

Right, the patch changes kv from an array tot a dictionary.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,912,2021-12-31T06:25:32Z,2022-01-02T04:25:53Z,2022-01-02T04:25:53Z,MERGED,True,378,278,15,https://github.com/lhoward,Harmonize auditing APIs,9,['refactor'],https://github.com/heimdal/heimdal/pull/912,https://github.com/nicowilliams,4,https://github.com/heimdal/heimdal/pull/912#issuecomment-1003609406,,Does this depend on #910?,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,912,2021-12-31T06:25:32Z,2022-01-02T04:25:53Z,2022-01-02T04:25:53Z,MERGED,True,378,278,15,https://github.com/lhoward,Harmonize auditing APIs,9,['refactor'],https://github.com/heimdal/heimdal/pull/912,https://github.com/lhoward,5,https://github.com/heimdal/heimdal/pull/912#issuecomment-1003617199,,"Does this depend on #910?

No.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,912,2021-12-31T06:25:32Z,2022-01-02T04:25:53Z,2022-01-02T04:25:53Z,MERGED,True,378,278,15,https://github.com/lhoward,Harmonize auditing APIs,9,['refactor'],https://github.com/heimdal/heimdal/pull/912,https://github.com/nicowilliams,6,https://github.com/heimdal/heimdal/pull/912#issuecomment-1003638125,,"Also, the problem with the kv stuff is that we vis everything immediately upon adding a kv. The vis stuff can be unvis'ed, though idk how round trippy it is, but if it doesn't round-trip then one thing we could do is delay the vis work until heim_audit_trail(), then we can definitely use the raw kv at that point.

Doing this accurately would require retaining the vis flags, right? Which is possible (could be a hidden key) but it's a bit ugly. I suspect this work can be delayed: the audit points I replaced to take numbers and booleans never set the vis flags, and indeed KDC_AUDIT_VIS is only set once in kerberos5.c and never in krb5tgs.c.

Lets not have a kv for the VIS flags.  You just have to know for each kv what VIS flags to use.
I see you're not delaying the VIS work.  Oh, right, we can't, not unless we change the whole thing to use the same VIS flags for every string attribute.


In fact, we could even allow values of all heimbase/CF types, including non-JSON, and then we could encode for logging only the ones that can be formatted as text.

This is pretty much what I ended up doing: numbers, booleans, strings, the NULL type can be encoded for logging. Of course, there might be some circumstances where you want to hide a printable type from logging, and that is currently done by prefixing the key with a '#' symbol.

+1


As well, the kvs are not indexed -- it's just an array. Maybe it should be represented as a dict with array values. This would make ""querying"" the kv store possible (though a linear search of the array is probably ok given how few keys there are, we do have heim_dict_t). This would then allow us to have an API consisting of key name & value type and format conventions that Samba (and anything else) could use. Also, this would allow us to have plugins for auditing and for logging in somewhat different formats (e.g., we could have a JSON log).

Right, the patch changes kv from an array tot a dictionary.

+1",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,912,2021-12-31T06:25:32Z,2022-01-02T04:25:53Z,2022-01-02T04:25:53Z,MERGED,True,378,278,15,https://github.com/lhoward,Harmonize auditing APIs,9,['refactor'],https://github.com/heimdal/heimdal/pull/912,https://github.com/nicowilliams,7,https://github.com/heimdal/heimdal/pull/912#issuecomment-1003639788,,"I think we can get rid of KDC_AUDIT_EATWHITE by not formatting spaces for pre-auth and etype lists, and KDC options flags.
IDK what LAST in HEIM_SVC_AUDIT_VISLAST means, but HEIM_SVC_AUDIT_VISLAST == VIS_CSTYLE | VIS_OCTAL | VIS_NL and HEIM_SVC_AUDIT_VIS == VIS_CSTYLE | VIS_OCTAL | VIS_NL VIS_WHITE == VIS_CSTYLE | VIS_OCTAL | VIS_NL  | VIS_SP | VIS_TAB.
We don't use HEIM_SVC_AUDIT_VISLAST, so we might as well remove it.
That leaves use with a few cases where we use 0 but the value has nothing to visualize, so... I think we can just get rid of all the AUDIT flags altogether and then just visualize in the final step.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,912,2021-12-31T06:25:32Z,2022-01-02T04:25:53Z,2022-01-02T04:25:53Z,MERGED,True,378,278,15,https://github.com/lhoward,Harmonize auditing APIs,9,['refactor'],https://github.com/heimdal/heimdal/pull/912,https://github.com/nicowilliams,8,https://github.com/heimdal/heimdal/pull/912#issuecomment-1003649633,,"OK, yes, I think we can move the VIS work to heim_audit_trail()/audit_trail_iterator().",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,912,2021-12-31T06:25:32Z,2022-01-02T04:25:53Z,2022-01-02T04:25:53Z,MERGED,True,378,278,15,https://github.com/lhoward,Harmonize auditing APIs,9,['refactor'],https://github.com/heimdal/heimdal/pull/912,https://github.com/nicowilliams,9,https://github.com/heimdal/heimdal/pull/912#issuecomment-1003657018,,"Anyways, LGTM, though I think we should move the vis stuff.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,913,2022-01-01T12:22:14Z,2022-01-01T13:41:13Z,2022-01-01T13:41:13Z,MERGED,True,2,2,1,https://github.com/lhoward,kdc: return KRB5KDC_ERR_C_PRINCIPAL_UNKNOWN (PA),1,['bug'],https://github.com/heimdal/heimdal/pull/913,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/913,"Return KRB5KDC_ERR_C_PRINCIPAL_UNKNOWN, not HDB_ERR_NOENTRY, if a client principal could not be found during pre-authentication.
This fixes a regression introduced with synthetic principals in 0035825.","Return KRB5KDC_ERR_C_PRINCIPAL_UNKNOWN, not HDB_ERR_NOENTRY, if a client principal could not be found during pre-authentication.
This fixes a regression introduced with synthetic principals in 0035825.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,914,2022-01-01T23:45:07Z,2022-01-02T05:28:21Z,2022-01-02T05:28:21Z,MERGED,True,27,22,3,https://github.com/lhoward,gss: pass GSS_C_NO_OID name type to mechanism,1,['bug'],https://github.com/heimdal/heimdal/pull/914,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/914,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,914,2022-01-01T23:45:07Z,2022-01-02T05:28:21Z,2022-01-02T05:28:21Z,MERGED,True,27,22,3,https://github.com/lhoward,gss: pass GSS_C_NO_OID name type to mechanism,1,['bug'],https://github.com/heimdal/heimdal/pull/914,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/914#issuecomment-1003663922,,"Going to close this for now, because the tests (and thus possibly applications), depend on GSS_C_NO_OID importing as GSS_C_NT_USER_NAME.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,915,2022-01-02T07:48:34Z,2022-01-03T04:59:16Z,2022-01-03T04:59:17Z,MERGED,True,222,31,6,https://github.com/lhoward,gss: expose PAC info buffers under urn:mspac:,2,['feature request'],https://github.com/heimdal/heimdal/pull/915,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/915,"Expose PAC info buffers using naming attributes prefixed with urn:mspac:, aligned with MIT.","Expose PAC info buffers using naming attributes prefixed with urn:mspac:, aligned with MIT.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,916,2022-01-02T10:21:18Z,2022-01-03T00:10:03Z,2022-01-03T00:10:03Z,CLOSED,False,47,11,7,https://github.com/lhoward,kdc: add audit plugin API to windc API,1,"['feature request', 'refactor']",https://github.com/heimdal/heimdal/pull/916,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/916,"Allow the windc plugin to also implement an allback callback. As part of this change, both the HDB and windc audit function signatures are changed to return void.","Allow the windc plugin to also implement an allback callback. As part of this change, both the HDB and windc audit function signatures are changed to return void.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,916,2022-01-02T10:21:18Z,2022-01-03T00:10:03Z,2022-01-03T00:10:03Z,CLOSED,False,47,11,7,https://github.com/lhoward,kdc: add audit plugin API to windc API,1,"['feature request', 'refactor']",https://github.com/heimdal/heimdal/pull/916,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/916#issuecomment-1003800018,"Allow the windc plugin to also implement an allback callback. As part of this change, both the HDB and windc audit function signatures are changed to return void.",Closing; will instead merge to new PR which contains windc to kdc plugin rename.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,917,2022-01-02T10:52:25Z,2022-01-03T00:09:58Z,2022-01-03T00:09:58Z,CLOSED,False,58,18,4,https://github.com/lhoward,kdc: add referral_policy callback to windc plugin,2,['feature request'],https://github.com/heimdal/heimdal/pull/917,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/917,Add a referral policy hook to the TGS as a more elegant way of resolving PR detection for Samba).,Add a referral policy hook to the TGS as a more elegant way of resolving PR detection for Samba).,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,917,2022-01-02T10:52:25Z,2022-01-03T00:09:58Z,2022-01-03T00:09:58Z,CLOSED,False,58,18,4,https://github.com/lhoward,kdc: add referral_policy callback to windc plugin,2,['feature request'],https://github.com/heimdal/heimdal/pull/917,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/917#issuecomment-1003800006,Add a referral policy hook to the TGS as a more elegant way of resolving PR detection for Samba).,Closing; will instead merge to new PR which contains windc to kdc plugin rename.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,918,2022-01-03T00:14:56Z,2022-01-03T05:17:01Z,2022-01-03T05:17:02Z,MERGED,True,194,108,15,https://github.com/lhoward,"Rename ""windc"" to ""kdc"" plugin API; new methods",5,"['feature request', 'refactor']",https://github.com/heimdal/heimdal/pull/918,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/918,"Rename the windc plugin API to the more general kdc plugin API, for two reasons: the Heimdal KDC uses the Windows PAC even when not emulating a domain controller, and the plugin API has accreted methods that are not specific to emulating a domain controller (such as referral_policy and finalize_reply).
Allow the windc plugin to also implement an audit callback. As part of this change, both the HDB and windc audit function signatures are changed to return void.
Add a referral policy hook to the TGS as a more elegant way of resolving referral detection for Samba). The hook can either rewrite the server_princ in the request, or it can return an error to disable built-in referral processing.

Includes #916 and #917 as well as resolving #804.","Rename the windc plugin API to the more general kdc plugin API, for two reasons: the Heimdal KDC uses the Windows PAC even when not emulating a domain controller, and the plugin API has accreted methods that are not specific to emulating a domain controller (such as referral_policy and finalize_reply).
Allow the windc plugin to also implement an audit callback. As part of this change, both the HDB and windc audit function signatures are changed to return void.
Add a referral policy hook to the TGS as a more elegant way of resolving referral detection for Samba). The hook can either rewrite the server_princ in the request, or it can return an error to disable built-in referral processing.

Includes #916 and #917 as well as resolving #804.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,919,2022-01-03T06:19:13Z,2022-01-03T07:09:09Z,2022-01-03T14:25:40Z,MERGED,True,5,3,2,https://github.com/jaltman,complete support for DB6,3,['bug'],https://github.com/heimdal/heimdal/pull/919,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/919,"The prior inclusion of DB6 checks within the tree was incomplete.   The db6/db.h header was tested for and used in some places but the test for db_create() within libdb-6 if present did not exist.
The roken ndbm-wrap functionality was also unaware of DB6.","The prior inclusion of DB6 checks within the tree was incomplete.   The db6/db.h header was tested for and used in some places but the test for db_create() within libdb-6 if present did not exist.
The roken ndbm-wrap functionality was also unaware of DB6.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,919,2022-01-03T06:19:13Z,2022-01-03T07:09:09Z,2022-01-03T14:25:40Z,MERGED,True,5,3,2,https://github.com/jaltman,complete support for DB6,3,['bug'],https://github.com/heimdal/heimdal/pull/919,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/919#issuecomment-1003891550,"The prior inclusion of DB6 checks within the tree was incomplete.   The db6/db.h header was tested for and used in some places but the test for db_create() within libdb-6 if present did not exist.
The roken ndbm-wrap functionality was also unaware of DB6.",LGTM,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,919,2022-01-03T06:19:13Z,2022-01-03T07:09:09Z,2022-01-03T14:25:40Z,MERGED,True,5,3,2,https://github.com/jaltman,complete support for DB6,3,['bug'],https://github.com/heimdal/heimdal/pull/919,https://github.com/jaltman,3,https://github.com/heimdal/heimdal/pull/919#issuecomment-1004129000,"The prior inclusion of DB6 checks within the tree was incomplete.   The db6/db.h header was tested for and used in some places but the test for db_create() within libdb-6 if present did not exist.
The roken ndbm-wrap functionality was also unaware of DB6.",7fb740a..3632158  HEAD -> heimdal-7-1-branch,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,920,2022-01-05T02:21:58Z,2022-01-14T05:06:09Z,2022-01-14T05:06:09Z,CLOSED,False,73,0,5,https://github.com/lhoward,kdc: add rewrite_request plugin API,2,[],https://github.com/heimdal/heimdal/pull/920,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/920,"Add a plugin API that allows a plugin to rewrite the request body.
Edit: not sure if this is actually useful.","Add a plugin API that allows a plugin to rewrite the request body.
Edit: not sure if this is actually useful.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,920,2022-01-05T02:21:58Z,2022-01-14T05:06:09Z,2022-01-14T05:06:09Z,CLOSED,False,73,0,5,https://github.com/lhoward,kdc: add rewrite_request plugin API,2,[],https://github.com/heimdal/heimdal/pull/920,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/920#issuecomment-1012779943,"Add a plugin API that allows a plugin to rewrite the request body.
Edit: not sure if this is actually useful.",Closing for now.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,921,2022-01-05T18:52:45Z,2022-01-05T18:58:50Z,2022-01-05T19:32:21Z,MERGED,True,358,47,14,https://github.com/jaltman,win10sdk and asn1 build improvements,8,[],https://github.com/heimdal/heimdal/pull/921,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/921,"Permit building with Windows 10 SDK and Visual Studio 2015 through 2019
Ensure that LIB_ASN1 is defined by all compiled source files that might be linked to generated ASN1 sources.  Doing this correctly prevents many linker warnings complaining about a library object referencing an internal DATA object via an import.
Build a static runtime version of libasn1.lib named libasn1_s.lib.   This is needed by thirdparty components that require the ASN1 library but cannot link to a dynamic runtime.
When casting an integer constant to (void *) use an intermediate cast to (uintptr_t) to prevent warnings about a smaller signed integer being extended to a larger unsigned pointer type.","Permit building with Windows 10 SDK and Visual Studio 2015 through 2019
Ensure that LIB_ASN1 is defined by all compiled source files that might be linked to generated ASN1 sources.  Doing this correctly prevents many linker warnings complaining about a library object referencing an internal DATA object via an import.
Build a static runtime version of libasn1.lib named libasn1_s.lib.   This is needed by thirdparty components that require the ASN1 library but cannot link to a dynamic runtime.
When casting an integer constant to (void *) use an intermediate cast to (uintptr_t) to prevent warnings about a smaller signed integer being extended to a larger unsigned pointer type.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,922,2022-01-06T20:55:32Z,2022-01-15T07:54:57Z,2022-01-15T07:54:57Z,MERGED,True,1304,1229,61,https://github.com/nicowilliams,Use ASN.1 type decoration for profit in HDB and for PACs,4,['refactor'],https://github.com/heimdal/heimdal/pull/922,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/922,"PREVIOUSLY:

This adds support for asn1_compile --decorate=... variation that causes decoration of an ASN.1 SET/SEQUENCE type with a field of a non-ASN.1 type.
This means we can now have an ASN.1 type to represent a request that can then have a ""hidden"" field -- hidden in that it is neither encoded nor decoded.  This field will be copied and freed when the decoration is of an ASN.1 type or of a external, C type that comes with copy constructor and destructor functions.  Decoration with a void * field which is neither copied nor freed is also supported.

That was reviewed by @lhoward.
NOW:

Follow-up commits add a krb5_pac to PrincipalNameAttrs and also replaces hdb_entry_ex by decorating HDB_entry with a C type that points to the backend-specific context.","PREVIOUSLY:

This adds support for asn1_compile --decorate=... variation that causes decoration of an ASN.1 SET/SEQUENCE type with a field of a non-ASN.1 type.
This means we can now have an ASN.1 type to represent a request that can then have a ""hidden"" field -- hidden in that it is neither encoded nor decoded.  This field will be copied and freed when the decoration is of an ASN.1 type or of a external, C type that comes with copy constructor and destructor functions.  Decoration with a void * field which is neither copied nor freed is also supported.

That was reviewed by @lhoward.
NOW:

Follow-up commits add a krb5_pac to PrincipalNameAttrs and also replaces hdb_entry_ex by decorating HDB_entry with a C type that points to the backend-specific context.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,922,2022-01-06T20:55:32Z,2022-01-15T07:54:57Z,2022-01-15T07:54:57Z,MERGED,True,1304,1229,61,https://github.com/nicowilliams,Use ASN.1 type decoration for profit in HDB and for PACs,4,['refactor'],https://github.com/heimdal/heimdal/pull/922,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/922#issuecomment-1009843266,"PREVIOUSLY:

This adds support for asn1_compile --decorate=... variation that causes decoration of an ASN.1 SET/SEQUENCE type with a field of a non-ASN.1 type.
This means we can now have an ASN.1 type to represent a request that can then have a ""hidden"" field -- hidden in that it is neither encoded nor decoded.  This field will be copied and freed when the decoration is of an ASN.1 type or of a external, C type that comes with copy constructor and destructor functions.  Decoration with a void * field which is neither copied nor freed is also supported.

That was reviewed by @lhoward.
NOW:

Follow-up commits add a krb5_pac to PrincipalNameAttrs and also replaces hdb_entry_ex by decorating HDB_entry with a C type that points to the backend-specific context.","Hmm, libkrb5 isn't finding heimbasepriv.h on Windows...",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,922,2022-01-06T20:55:32Z,2022-01-15T07:54:57Z,2022-01-15T07:54:57Z,MERGED,True,1304,1229,61,https://github.com/nicowilliams,Use ASN.1 type decoration for profit in HDB and for PACs,4,['refactor'],https://github.com/heimdal/heimdal/pull/922,https://github.com/nicowilliams,3,https://github.com/heimdal/heimdal/pull/922#issuecomment-1010175739,"PREVIOUSLY:

This adds support for asn1_compile --decorate=... variation that causes decoration of an ASN.1 SET/SEQUENCE type with a field of a non-ASN.1 type.
This means we can now have an ASN.1 type to represent a request that can then have a ""hidden"" field -- hidden in that it is neither encoded nor decoded.  This field will be copied and freed when the decoration is of an ASN.1 type or of a external, C type that comes with copy constructor and destructor functions.  Decoration with a void * field which is neither copied nor freed is also supported.

That was reviewed by @lhoward.
NOW:

Follow-up commits add a krb5_pac to PrincipalNameAttrs and also replaces hdb_entry_ex by decorating HDB_entry with a C type that points to the backend-specific context.","@lhoward this makes the PAC decoration of name attributes a mutable shared object, does it not?  does that present problems for threading?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,922,2022-01-06T20:55:32Z,2022-01-15T07:54:57Z,2022-01-15T07:54:57Z,MERGED,True,1304,1229,61,https://github.com/nicowilliams,Use ASN.1 type decoration for profit in HDB and for PACs,4,['refactor'],https://github.com/heimdal/heimdal/pull/922,https://github.com/lhoward,4,https://github.com/heimdal/heimdal/pull/922#issuecomment-1010389203,"PREVIOUSLY:

This adds support for asn1_compile --decorate=... variation that causes decoration of an ASN.1 SET/SEQUENCE type with a field of a non-ASN.1 type.
This means we can now have an ASN.1 type to represent a request that can then have a ""hidden"" field -- hidden in that it is neither encoded nor decoded.  This field will be copied and freed when the decoration is of an ASN.1 type or of a external, C type that comes with copy constructor and destructor functions.  Decoration with a void * field which is neither copied nor freed is also supported.

That was reviewed by @lhoward.
NOW:

Follow-up commits add a krb5_pac to PrincipalNameAttrs and also replaces hdb_entry_ex by decorating HDB_entry with a C type that points to the backend-specific context.","@lhoward this makes the PAC decoration of name attributes a mutable shared object, does it not? does that present problems for threading?

Practically not because only the KDC mutates the PAC, but in theory yes. That's why I suggested implementing heim_copy().",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,922,2022-01-06T20:55:32Z,2022-01-15T07:54:57Z,2022-01-15T07:54:57Z,MERGED,True,1304,1229,61,https://github.com/nicowilliams,Use ASN.1 type decoration for profit in HDB and for PACs,4,['refactor'],https://github.com/heimdal/heimdal/pull/922,https://github.com/lhoward,5,https://github.com/heimdal/heimdal/pull/922#issuecomment-1010389396,"PREVIOUSLY:

This adds support for asn1_compile --decorate=... variation that causes decoration of an ASN.1 SET/SEQUENCE type with a field of a non-ASN.1 type.
This means we can now have an ASN.1 type to represent a request that can then have a ""hidden"" field -- hidden in that it is neither encoded nor decoded.  This field will be copied and freed when the decoration is of an ASN.1 type or of a external, C type that comes with copy constructor and destructor functions.  Decoration with a void * field which is neither copied nor freed is also supported.

That was reviewed by @lhoward.
NOW:

Follow-up commits add a krb5_pac to PrincipalNameAttrs and also replaces hdb_entry_ex by decorating HDB_entry with a C type that points to the backend-specific context.",Windows build is failing again.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,922,2022-01-06T20:55:32Z,2022-01-15T07:54:57Z,2022-01-15T07:54:57Z,MERGED,True,1304,1229,61,https://github.com/nicowilliams,Use ASN.1 type decoration for profit in HDB and for PACs,4,['refactor'],https://github.com/heimdal/heimdal/pull/922,https://github.com/nicowilliams,6,https://github.com/heimdal/heimdal/pull/922#issuecomment-1010454513,"PREVIOUSLY:

This adds support for asn1_compile --decorate=... variation that causes decoration of an ASN.1 SET/SEQUENCE type with a field of a non-ASN.1 type.
This means we can now have an ASN.1 type to represent a request that can then have a ""hidden"" field -- hidden in that it is neither encoded nor decoded.  This field will be copied and freed when the decoration is of an ASN.1 type or of a external, C type that comes with copy constructor and destructor functions.  Decoration with a void * field which is neither copied nor freed is also supported.

That was reviewed by @lhoward.
NOW:

Follow-up commits add a krb5_pac to PrincipalNameAttrs and also replaces hdb_entry_ex by decorating HDB_entry with a C type that points to the backend-specific context.","@lhoward this makes the PAC decoration of name attributes a mutable shared object, does it not? does that present problems for threading?

Practically not because only the KDC mutates the PAC, but in theory yes. That's why I suggested implementing heim_copy().

This is why I'd like us to move heimbase to something more like the immutable data structure approach of libjq's jv APIs.  That would probably be a lot of work.
For now this is probably OK because, indeed, nothing mutates the PAC or needs to besides the KDC, and the KDC doesn't and won't use this API, not yet, and not in a threaded way anyways, so we're ok.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,922,2022-01-06T20:55:32Z,2022-01-15T07:54:57Z,2022-01-15T07:54:57Z,MERGED,True,1304,1229,61,https://github.com/nicowilliams,Use ASN.1 type decoration for profit in HDB and for PACs,4,['refactor'],https://github.com/heimdal/heimdal/pull/922,https://github.com/lhoward,7,https://github.com/heimdal/heimdal/pull/922#issuecomment-1010457533,"PREVIOUSLY:

This adds support for asn1_compile --decorate=... variation that causes decoration of an ASN.1 SET/SEQUENCE type with a field of a non-ASN.1 type.
This means we can now have an ASN.1 type to represent a request that can then have a ""hidden"" field -- hidden in that it is neither encoded nor decoded.  This field will be copied and freed when the decoration is of an ASN.1 type or of a external, C type that comes with copy constructor and destructor functions.  Decoration with a void * field which is neither copied nor freed is also supported.

That was reviewed by @lhoward.
NOW:

Follow-up commits add a krb5_pac to PrincipalNameAttrs and also replaces hdb_entry_ex by decorating HDB_entry with a C type that points to the backend-specific context.","@lhoward this makes the PAC decoration of name attributes a mutable shared object, does it not? does that present problems for threading?

Practically not because only the KDC mutates the PAC, but in theory yes. That's why I suggested implementing heim_copy().

This is why I'd like us to move heimbase to something more like the immutable data structure approach of libjq's jv APIs. That would probably be a lot of work.
For now this is probably OK because, indeed, nothing mutates the PAC or needs to besides the KDC, and the KDC doesn't and won't use this API, not yet, and not in a threaded way anyways, so we're ok.

The KDC calls krb5_verify_ap_req2() which does not verify the PAC. Instead, it does its own PAC verification (which makes sense, it has to be able to verify the KDC signatures). So there aren't any issues here.
I'm still getting my head around the jv API where reference parameters are consumed by their callee, something doesn't feel quite right about this from an API perspective, but I can see how it helps eliminate copies with uniquely referenced objects.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,922,2022-01-06T20:55:32Z,2022-01-15T07:54:57Z,2022-01-15T07:54:57Z,MERGED,True,1304,1229,61,https://github.com/nicowilliams,Use ASN.1 type decoration for profit in HDB and for PACs,4,['refactor'],https://github.com/heimdal/heimdal/pull/922,https://github.com/nicowilliams,8,https://github.com/heimdal/heimdal/pull/922#issuecomment-1011303638,"PREVIOUSLY:

This adds support for asn1_compile --decorate=... variation that causes decoration of an ASN.1 SET/SEQUENCE type with a field of a non-ASN.1 type.
This means we can now have an ASN.1 type to represent a request that can then have a ""hidden"" field -- hidden in that it is neither encoded nor decoded.  This field will be copied and freed when the decoration is of an ASN.1 type or of a external, C type that comes with copy constructor and destructor functions.  Decoration with a void * field which is neither copied nor freed is also supported.

That was reviewed by @lhoward.
NOW:

Follow-up commits add a krb5_pac to PrincipalNameAttrs and also replaces hdb_entry_ex by decorating HDB_entry with a C type that points to the backend-specific context.","I'm still getting my head around the jv API where reference parameters are consumed by their callee, something doesn't feel quite right about this from an API perspective, but I can see how it helps eliminate copies with uniquely referenced objects.

The rule in the jv API is that all jv arguments have reference consumed except for jv_copy()'s and jv_get_kind()'s jv argument.  This makes sense except for a few functions:

jv_string_length_bytes(),
jv_array_length(),
and jv_invalid_has_msg()

for those three (and maybe one or two more, I don't remember) it was a mistake to have them consume a reference because invariably one wants to use the jv right after and so one always calls, for example, jv_invalid_has_msg(jv_copy(v)).
But the upshot is that as long as the refcount incref/decref is atomic, then you get a naturally-thread-safe API because automatically no shared state is ever mutable.  It's also very easy to reason about things.
On the down side, memory leaks are much harder to debug because tools like valgrind know nothing about jv_copy() and generally have no way to be taught about it, so you see a stack trace where a leaked object was allocated, but you've no idea where the jv_copy() that you're actually leaking was taken and then you have to spend some time reasoning about the code because the leak is likely not obvious staring at the original allocation point.  I feel this is worth the safety.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,922,2022-01-06T20:55:32Z,2022-01-15T07:54:57Z,2022-01-15T07:54:57Z,MERGED,True,1304,1229,61,https://github.com/nicowilliams,Use ASN.1 type decoration for profit in HDB and for PACs,4,['refactor'],https://github.com/heimdal/heimdal/pull/922,https://github.com/nicowilliams,9,https://github.com/heimdal/heimdal/pull/922#issuecomment-1011304096,"PREVIOUSLY:

This adds support for asn1_compile --decorate=... variation that causes decoration of an ASN.1 SET/SEQUENCE type with a field of a non-ASN.1 type.
This means we can now have an ASN.1 type to represent a request that can then have a ""hidden"" field -- hidden in that it is neither encoded nor decoded.  This field will be copied and freed when the decoration is of an ASN.1 type or of a external, C type that comes with copy constructor and destructor functions.  Decoration with a void * field which is neither copied nor freed is also supported.

That was reviewed by @lhoward.
NOW:

Follow-up commits add a krb5_pac to PrincipalNameAttrs and also replaces hdb_entry_ex by decorating HDB_entry with a C type that points to the backend-specific context.",@abartlet how disruptive will this change to Heimdal be?,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,922,2022-01-06T20:55:32Z,2022-01-15T07:54:57Z,2022-01-15T07:54:57Z,MERGED,True,1304,1229,61,https://github.com/nicowilliams,Use ASN.1 type decoration for profit in HDB and for PACs,4,['refactor'],https://github.com/heimdal/heimdal/pull/922,https://github.com/josephsutton1,10,https://github.com/heimdal/heimdal/pull/922#issuecomment-1011452464,"PREVIOUSLY:

This adds support for asn1_compile --decorate=... variation that causes decoration of an ASN.1 SET/SEQUENCE type with a field of a non-ASN.1 type.
This means we can now have an ASN.1 type to represent a request that can then have a ""hidden"" field -- hidden in that it is neither encoded nor decoded.  This field will be copied and freed when the decoration is of an ASN.1 type or of a external, C type that comes with copy constructor and destructor functions.  Decoration with a void * field which is neither copied nor freed is also supported.

That was reviewed by @lhoward.
NOW:

Follow-up commits add a krb5_pac to PrincipalNameAttrs and also replaces hdb_entry_ex by decorating HDB_entry with a C type that points to the backend-specific context.","I haven't kept fully up to date with all of the Heimdal changes so far, but I don't think this change will be too disruptive to Samba. I think we'll just need to keep a pointer to the HDB database somewhere (maybe in the hdb_entry->context member) for some spots that need to call hdb_free_entry().",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,922,2022-01-06T20:55:32Z,2022-01-15T07:54:57Z,2022-01-15T07:54:57Z,MERGED,True,1304,1229,61,https://github.com/nicowilliams,Use ASN.1 type decoration for profit in HDB and for PACs,4,['refactor'],https://github.com/heimdal/heimdal/pull/922,https://github.com/lhoward,11,https://github.com/heimdal/heimdal/pull/922#issuecomment-1011461795,"PREVIOUSLY:

This adds support for asn1_compile --decorate=... variation that causes decoration of an ASN.1 SET/SEQUENCE type with a field of a non-ASN.1 type.
This means we can now have an ASN.1 type to represent a request that can then have a ""hidden"" field -- hidden in that it is neither encoded nor decoded.  This field will be copied and freed when the decoration is of an ASN.1 type or of a external, C type that comes with copy constructor and destructor functions.  Decoration with a void * field which is neither copied nor freed is also supported.

That was reviewed by @lhoward.
NOW:

Follow-up commits add a krb5_pac to PrincipalNameAttrs and also replaces hdb_entry_ex by decorating HDB_entry with a C type that points to the backend-specific context.","I haven't kept fully up to date with all of the Heimdal changes so far, but I don't think this change will be too disruptive to Samba. I think we'll just need to keep a pointer to the HDB database somewhere (maybe in the hdb_entry->context member) for some spots that need to call hdb_free_entry().

You could do that, or just pass the HDB parameter down from the caller as all HDB backend functions take one.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,922,2022-01-06T20:55:32Z,2022-01-15T07:54:57Z,2022-01-15T07:54:57Z,MERGED,True,1304,1229,61,https://github.com/nicowilliams,Use ASN.1 type decoration for profit in HDB and for PACs,4,['refactor'],https://github.com/heimdal/heimdal/pull/922,https://github.com/josephsutton1,12,https://github.com/heimdal/heimdal/pull/922#issuecomment-1011468903,"PREVIOUSLY:

This adds support for asn1_compile --decorate=... variation that causes decoration of an ASN.1 SET/SEQUENCE type with a field of a non-ASN.1 type.
This means we can now have an ASN.1 type to represent a request that can then have a ""hidden"" field -- hidden in that it is neither encoded nor decoded.  This field will be copied and freed when the decoration is of an ASN.1 type or of a external, C type that comes with copy constructor and destructor functions.  Decoration with a void * field which is neither copied nor freed is also supported.

That was reviewed by @lhoward.
NOW:

Follow-up commits add a krb5_pac to PrincipalNameAttrs and also replaces hdb_entry_ex by decorating HDB_entry with a C type that points to the backend-specific context.","True, although we also call hdb_free_entry() in the pac_verify() plugin function, which doesn't seem to have an HDB parameter.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,922,2022-01-06T20:55:32Z,2022-01-15T07:54:57Z,2022-01-15T07:54:57Z,MERGED,True,1304,1229,61,https://github.com/nicowilliams,Use ASN.1 type decoration for profit in HDB and for PACs,4,['refactor'],https://github.com/heimdal/heimdal/pull/922,https://github.com/jaltman,13,https://github.com/heimdal/heimdal/pull/922#issuecomment-1011475449,"PREVIOUSLY:

This adds support for asn1_compile --decorate=... variation that causes decoration of an ASN.1 SET/SEQUENCE type with a field of a non-ASN.1 type.
This means we can now have an ASN.1 type to represent a request that can then have a ""hidden"" field -- hidden in that it is neither encoded nor decoded.  This field will be copied and freed when the decoration is of an ASN.1 type or of a external, C type that comes with copy constructor and destructor functions.  Decoration with a void * field which is neither copied nor freed is also supported.

That was reviewed by @lhoward.
NOW:

Follow-up commits add a krb5_pac to PrincipalNameAttrs and also replaces hdb_entry_ex by decorating HDB_entry with a C type that points to the backend-specific context.","True, although we also call hdb_free_entry() in the pac_verify() plugin function, which doesn't seem to have an HDB parameter.

What is being freed from pac_verify()?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,922,2022-01-06T20:55:32Z,2022-01-15T07:54:57Z,2022-01-15T07:54:57Z,MERGED,True,1304,1229,61,https://github.com/nicowilliams,Use ASN.1 type decoration for profit in HDB and for PACs,4,['refactor'],https://github.com/heimdal/heimdal/pull/922,https://github.com/lhoward,14,https://github.com/heimdal/heimdal/pull/922#issuecomment-1011477339,"PREVIOUSLY:

This adds support for asn1_compile --decorate=... variation that causes decoration of an ASN.1 SET/SEQUENCE type with a field of a non-ASN.1 type.
This means we can now have an ASN.1 type to represent a request that can then have a ""hidden"" field -- hidden in that it is neither encoded nor decoded.  This field will be copied and freed when the decoration is of an ASN.1 type or of a external, C type that comes with copy constructor and destructor functions.  Decoration with a void * field which is neither copied nor freed is also supported.

That was reviewed by @lhoward.
NOW:

Follow-up commits add a krb5_pac to PrincipalNameAttrs and also replaces hdb_entry_ex by decorating HDB_entry with a C type that points to the backend-specific context.","True, although we also call hdb_free_entry() in the pac_verify() plugin function, which doesn't seem to have an HDB parameter.

Ah, good point. Well, for consistency, all the kdc-plugin.h APIs that take a hdb_entry should also take a HDB argument. I'll fix this as part of this PR.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,922,2022-01-06T20:55:32Z,2022-01-15T07:54:57Z,2022-01-15T07:54:57Z,MERGED,True,1304,1229,61,https://github.com/nicowilliams,Use ASN.1 type decoration for profit in HDB and for PACs,4,['refactor'],https://github.com/heimdal/heimdal/pull/922,https://github.com/josephsutton1,15,https://github.com/heimdal/heimdal/pull/922#issuecomment-1011479542,"PREVIOUSLY:

This adds support for asn1_compile --decorate=... variation that causes decoration of an ASN.1 SET/SEQUENCE type with a field of a non-ASN.1 type.
This means we can now have an ASN.1 type to represent a request that can then have a ""hidden"" field -- hidden in that it is neither encoded nor decoded.  This field will be copied and freed when the decoration is of an ASN.1 type or of a external, C type that comes with copy constructor and destructor functions.  Decoration with a void * field which is neither copied nor freed is also supported.

That was reviewed by @lhoward.
NOW:

Follow-up commits add a krb5_pac to PrincipalNameAttrs and also replaces hdb_entry_ex by decorating HDB_entry with a C type that points to the backend-specific context.","True, although we also call hdb_free_entry() in the pac_verify() plugin function, which doesn't seem to have an HDB parameter.

What is being freed from pac_verify()?

If an RWDC receives a service ticket that was signed by an RODC, then we fetch the RODC entry from the database to verify the signature, and the entry gets freed afterwards.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,922,2022-01-06T20:55:32Z,2022-01-15T07:54:57Z,2022-01-15T07:54:57Z,MERGED,True,1304,1229,61,https://github.com/nicowilliams,Use ASN.1 type decoration for profit in HDB and for PACs,4,['refactor'],https://github.com/heimdal/heimdal/pull/922,https://github.com/jaltman,16,https://github.com/heimdal/heimdal/pull/922#issuecomment-1011481655,"PREVIOUSLY:

This adds support for asn1_compile --decorate=... variation that causes decoration of an ASN.1 SET/SEQUENCE type with a field of a non-ASN.1 type.
This means we can now have an ASN.1 type to represent a request that can then have a ""hidden"" field -- hidden in that it is neither encoded nor decoded.  This field will be copied and freed when the decoration is of an ASN.1 type or of a external, C type that comes with copy constructor and destructor functions.  Decoration with a void * field which is neither copied nor freed is also supported.

That was reviewed by @lhoward.
NOW:

Follow-up commits add a krb5_pac to PrincipalNameAttrs and also replaces hdb_entry_ex by decorating HDB_entry with a C type that points to the backend-specific context.","The signature of hdb_free_entry() doesn't take a HDB.   It takes a krb5_context and the hdb_entry_ex.
void hdb_free_entry(krb5_context context, hdb_entry_ex *ent)",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,922,2022-01-06T20:55:32Z,2022-01-15T07:54:57Z,2022-01-15T07:54:57Z,MERGED,True,1304,1229,61,https://github.com/nicowilliams,Use ASN.1 type decoration for profit in HDB and for PACs,4,['refactor'],https://github.com/heimdal/heimdal/pull/922,https://github.com/lhoward,17,https://github.com/heimdal/heimdal/pull/922#issuecomment-1011484755,"PREVIOUSLY:

This adds support for asn1_compile --decorate=... variation that causes decoration of an ASN.1 SET/SEQUENCE type with a field of a non-ASN.1 type.
This means we can now have an ASN.1 type to represent a request that can then have a ""hidden"" field -- hidden in that it is neither encoded nor decoded.  This field will be copied and freed when the decoration is of an ASN.1 type or of a external, C type that comes with copy constructor and destructor functions.  Decoration with a void * field which is neither copied nor freed is also supported.

That was reviewed by @lhoward.
NOW:

Follow-up commits add a krb5_pac to PrincipalNameAttrs and also replaces hdb_entry_ex by decorating HDB_entry with a C type that points to the backend-specific context.","True, although we also call hdb_free_entry() in the pac_verify() plugin function, which doesn't seem to have an HDB parameter.

What is being freed from pac_verify()?

If an RWDC receives a service ticket that was signed by an RODC, then we fetch the RODC entry from the database to verify the signature, and the entry gets freed afterwards.

Ah, OK, in this case we'll just amend the kdc-plugin prototypes that don't take a astgs_request_t to include a krb5_kdc_configuration * argument, and you can get to your backend via kdc_config->db[0] as you do in other parts of your code.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,922,2022-01-06T20:55:32Z,2022-01-15T07:54:57Z,2022-01-15T07:54:57Z,MERGED,True,1304,1229,61,https://github.com/nicowilliams,Use ASN.1 type decoration for profit in HDB and for PACs,4,['refactor'],https://github.com/heimdal/heimdal/pull/922,https://github.com/josephsutton1,18,https://github.com/heimdal/heimdal/pull/922#issuecomment-1011487733,"PREVIOUSLY:

This adds support for asn1_compile --decorate=... variation that causes decoration of an ASN.1 SET/SEQUENCE type with a field of a non-ASN.1 type.
This means we can now have an ASN.1 type to represent a request that can then have a ""hidden"" field -- hidden in that it is neither encoded nor decoded.  This field will be copied and freed when the decoration is of an ASN.1 type or of a external, C type that comes with copy constructor and destructor functions.  Decoration with a void * field which is neither copied nor freed is also supported.

That was reviewed by @lhoward.
NOW:

Follow-up commits add a krb5_pac to PrincipalNameAttrs and also replaces hdb_entry_ex by decorating HDB_entry with a C type that points to the backend-specific context.","The signature of hdb_free_entry() doesn't take a HDB. It takes a krb5_context and the hdb_entry_ex. void hdb_free_entry(krb5_context context, hdb_entry_ex *ent)

That's the case in master, but this PR changes the signature to:
void hdb_free_entry(krb5_context context, HDB *db, hdb_entry *ent)

Ah, OK, in this case we'll just amend the kdc-plugin prototypes that don't take a astgs_request_t to include a krb5_kdc_configuration * argument, and you can get to your backend via kdc_config->db[0] as you do in other parts of your code.

Thanks!",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,922,2022-01-06T20:55:32Z,2022-01-15T07:54:57Z,2022-01-15T07:54:57Z,MERGED,True,1304,1229,61,https://github.com/nicowilliams,Use ASN.1 type decoration for profit in HDB and for PACs,4,['refactor'],https://github.com/heimdal/heimdal/pull/922,https://github.com/lhoward,19,https://github.com/heimdal/heimdal/pull/922#issuecomment-1011488641,"PREVIOUSLY:

This adds support for asn1_compile --decorate=... variation that causes decoration of an ASN.1 SET/SEQUENCE type with a field of a non-ASN.1 type.
This means we can now have an ASN.1 type to represent a request that can then have a ""hidden"" field -- hidden in that it is neither encoded nor decoded.  This field will be copied and freed when the decoration is of an ASN.1 type or of a external, C type that comes with copy constructor and destructor functions.  Decoration with a void * field which is neither copied nor freed is also supported.

That was reviewed by @lhoward.
NOW:

Follow-up commits add a krb5_pac to PrincipalNameAttrs and also replaces hdb_entry_ex by decorating HDB_entry with a C type that points to the backend-specific context.","The signature of hdb_free_entry() doesn't take a HDB. It takes a krb5_context and the hdb_entry_ex. void hdb_free_entry(krb5_context context, hdb_entry_ex *ent)

That's the case in master, but this PR changes the signature to: void hdb_free_entry(krb5_context context, HDB *db, hdb_entry *ent)

Correct :)


Ah, OK, in this case we'll just amend the kdc-plugin prototypes that don't take a astgs_request_t to include a krb5_kdc_configuration * argument, and you can get to your backend via kdc_config->db[0] as you do in other parts of your code.

Thanks!

Done!",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,922,2022-01-06T20:55:32Z,2022-01-15T07:54:57Z,2022-01-15T07:54:57Z,MERGED,True,1304,1229,61,https://github.com/nicowilliams,Use ASN.1 type decoration for profit in HDB and for PACs,4,['refactor'],https://github.com/heimdal/heimdal/pull/922,https://github.com/lhoward,20,https://github.com/heimdal/heimdal/pull/922#issuecomment-1011514309,"PREVIOUSLY:

This adds support for asn1_compile --decorate=... variation that causes decoration of an ASN.1 SET/SEQUENCE type with a field of a non-ASN.1 type.
This means we can now have an ASN.1 type to represent a request that can then have a ""hidden"" field -- hidden in that it is neither encoded nor decoded.  This field will be copied and freed when the decoration is of an ASN.1 type or of a external, C type that comes with copy constructor and destructor functions.  Decoration with a void * field which is neither copied nor freed is also supported.

That was reviewed by @lhoward.
NOW:

Follow-up commits add a krb5_pac to PrincipalNameAttrs and also replaces hdb_entry_ex by decorating HDB_entry with a C type that points to the backend-specific context.","I'm still getting my head around the jv API where reference parameters are consumed by their callee, something doesn't feel quite right about this from an API perspective, but I can see how it helps eliminate copies with uniquely referenced objects.

The rule in the jv API is that all jv arguments have reference consumed except for jv_copy()'s and jv_get_kind()'s jv argument. This makes sense except for a few functions:

jv_string_length_bytes(),
jv_array_length(),
and jv_invalid_has_msg()

for those three (and maybe one or two more, I don't remember) it was a mistake to have them consume a reference because invariably one wants to use the jv right after and so one always calls, for example, jv_invalid_has_msg(jv_copy(v)).
But the upshot is that as long as the refcount incref/decref is atomic, then you get a naturally-thread-safe API because automatically no shared state is ever mutable. It's also very easy to reason about things.

That is very clever, agreed.
But as a contrary point, should we consider our use cases? It seems to me that the consumers of heimbase are either single-threaded already (like the KDC), or require the caller to guarantee thread-safety (e.g. libkrb5).

mostly, I guess there are cases where we do lock: appears to be GSSAPI and mcache.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,922,2022-01-06T20:55:32Z,2022-01-15T07:54:57Z,2022-01-15T07:54:57Z,MERGED,True,1304,1229,61,https://github.com/nicowilliams,Use ASN.1 type decoration for profit in HDB and for PACs,4,['refactor'],https://github.com/heimdal/heimdal/pull/922,https://github.com/nicowilliams,21,https://github.com/heimdal/heimdal/pull/922#issuecomment-1011714879,"PREVIOUSLY:

This adds support for asn1_compile --decorate=... variation that causes decoration of an ASN.1 SET/SEQUENCE type with a field of a non-ASN.1 type.
This means we can now have an ASN.1 type to represent a request that can then have a ""hidden"" field -- hidden in that it is neither encoded nor decoded.  This field will be copied and freed when the decoration is of an ASN.1 type or of a external, C type that comes with copy constructor and destructor functions.  Decoration with a void * field which is neither copied nor freed is also supported.

That was reviewed by @lhoward.
NOW:

Follow-up commits add a krb5_pac to PrincipalNameAttrs and also replaces hdb_entry_ex by decorating HDB_entry with a C type that points to the backend-specific context.","Ah, OK, in this case we'll just amend the kdc-plugin prototypes that don't take a astgs_request_t to include a krb5_kdc_configuration * argument, and you can get to your backend via kdc_config->db[0] as you do in other parts of your code.

Does that impose undue stability on krb5_kdc_configuration?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,922,2022-01-06T20:55:32Z,2022-01-15T07:54:57Z,2022-01-15T07:54:57Z,MERGED,True,1304,1229,61,https://github.com/nicowilliams,Use ASN.1 type decoration for profit in HDB and for PACs,4,['refactor'],https://github.com/heimdal/heimdal/pull/922,https://github.com/lhoward,22,https://github.com/heimdal/heimdal/pull/922#issuecomment-1011719026,"PREVIOUSLY:

This adds support for asn1_compile --decorate=... variation that causes decoration of an ASN.1 SET/SEQUENCE type with a field of a non-ASN.1 type.
This means we can now have an ASN.1 type to represent a request that can then have a ""hidden"" field -- hidden in that it is neither encoded nor decoded.  This field will be copied and freed when the decoration is of an ASN.1 type or of a external, C type that comes with copy constructor and destructor functions.  Decoration with a void * field which is neither copied nor freed is also supported.

That was reviewed by @lhoward.
NOW:

Follow-up commits add a krb5_pac to PrincipalNameAttrs and also replaces hdb_entry_ex by decorating HDB_entry with a C type that points to the backend-specific context.","Ah, OK, in this case we'll just amend the kdc-plugin prototypes that don't take a astgs_request_t to include a krb5_kdc_configuration * argument, and you can get to your backend via kdc_config->db[0] as you do in other parts of your code.

Does that impose undue stability on krb5_kdc_configuration?

It's part of the public API inkdc.h. It's also part of astgs_request_t. So, no.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,922,2022-01-06T20:55:32Z,2022-01-15T07:54:57Z,2022-01-15T07:54:57Z,MERGED,True,1304,1229,61,https://github.com/nicowilliams,Use ASN.1 type decoration for profit in HDB and for PACs,4,['refactor'],https://github.com/heimdal/heimdal/pull/922,https://github.com/nicowilliams,23,https://github.com/heimdal/heimdal/pull/922#issuecomment-1011719113,"PREVIOUSLY:

This adds support for asn1_compile --decorate=... variation that causes decoration of an ASN.1 SET/SEQUENCE type with a field of a non-ASN.1 type.
This means we can now have an ASN.1 type to represent a request that can then have a ""hidden"" field -- hidden in that it is neither encoded nor decoded.  This field will be copied and freed when the decoration is of an ASN.1 type or of a external, C type that comes with copy constructor and destructor functions.  Decoration with a void * field which is neither copied nor freed is also supported.

That was reviewed by @lhoward.
NOW:

Follow-up commits add a krb5_pac to PrincipalNameAttrs and also replaces hdb_entry_ex by decorating HDB_entry with a C type that points to the backend-specific context.","That is very clever, agreed.

Stephen Dolan is clever, indeed.

But as a contrary point, should we consider our use cases? It seems to me that the consumers of heimbase are either single-threaded already (like the KDC), or require the caller to guarantee thread-safety (e.g. libkrb5).

Right, this is quite true.  My hope has been that if we were to move to libjq for these things then we could get a decent JSON parser/printer, as well as the ability to code some things in jq, like SPF for capaths.  Maybe I should just quit whining and make lib/base's JSON support not suck.

* mostly, I guess there are cases where we do lock: appears to be GSSAPI and mcache.


Right.  Even in GSS we should mostly not need locks except for wrap/unwrap and get-MIC/verify-MIC, and then only because some sequence number window updates can't easily be implemented w/o locks.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,922,2022-01-06T20:55:32Z,2022-01-15T07:54:57Z,2022-01-15T07:54:57Z,MERGED,True,1304,1229,61,https://github.com/nicowilliams,Use ASN.1 type decoration for profit in HDB and for PACs,4,['refactor'],https://github.com/heimdal/heimdal/pull/922,https://github.com/lhoward,24,https://github.com/heimdal/heimdal/pull/922#issuecomment-1011720057,"PREVIOUSLY:

This adds support for asn1_compile --decorate=... variation that causes decoration of an ASN.1 SET/SEQUENCE type with a field of a non-ASN.1 type.
This means we can now have an ASN.1 type to represent a request that can then have a ""hidden"" field -- hidden in that it is neither encoded nor decoded.  This field will be copied and freed when the decoration is of an ASN.1 type or of a external, C type that comes with copy constructor and destructor functions.  Decoration with a void * field which is neither copied nor freed is also supported.

That was reviewed by @lhoward.
NOW:

Follow-up commits add a krb5_pac to PrincipalNameAttrs and also replaces hdb_entry_ex by decorating HDB_entry with a C type that points to the backend-specific context.","Ah, OK, in this case we'll just amend the kdc-plugin prototypes that don't take a astgs_request_t to include a krb5_kdc_configuration * argument, and you can get to your backend via kdc_config->db[0] as you do in other parts of your code.

Does that impose undue stability on krb5_kdc_configuration?

It's part of the public API inkdc.h. It's also part of astgs_request_t. So, no.

I mean, if you think it should be private, then it needs to be moved from kdc.h to kdc_locl.h, or perhaps it has a public and private component as does astgs_request_t. But that should be a separate PR obviously.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,922,2022-01-06T20:55:32Z,2022-01-15T07:54:57Z,2022-01-15T07:54:57Z,MERGED,True,1304,1229,61,https://github.com/nicowilliams,Use ASN.1 type decoration for profit in HDB and for PACs,4,['refactor'],https://github.com/heimdal/heimdal/pull/922,https://github.com/lhoward,25,https://github.com/heimdal/heimdal/pull/922#issuecomment-1011725831,"PREVIOUSLY:

This adds support for asn1_compile --decorate=... variation that causes decoration of an ASN.1 SET/SEQUENCE type with a field of a non-ASN.1 type.
This means we can now have an ASN.1 type to represent a request that can then have a ""hidden"" field -- hidden in that it is neither encoded nor decoded.  This field will be copied and freed when the decoration is of an ASN.1 type or of a external, C type that comes with copy constructor and destructor functions.  Decoration with a void * field which is neither copied nor freed is also supported.

That was reviewed by @lhoward.
NOW:

Follow-up commits add a krb5_pac to PrincipalNameAttrs and also replaces hdb_entry_ex by decorating HDB_entry with a C type that points to the backend-specific context.","That is very clever, agreed.

Stephen Dolan is clever, indeed.

I agree. It does come at the cost of what is a non-intuitive API (but, given libheimbase consumers are all internal, not really an issue).
I know it's probably in the jq link you sent but, what happens for the equivalent of heim_dict_get_value()? If it is a base type like a string or a number (which is immutable by design, even in libheimbase today), then it can increment the reference count and return. But, what if the value is a collection type? It will need to do a (deep) copy, right?

Right, this is quite true. My hope has been that if we were to move to libjq for these things then we could get a decent JSON parser/printer, as well as the ability to code some things in jq, like SPF for capaths. Maybe I should just quit whining and make lib/base's JSON support not suck.

Maybe. I guess, that's the point of this design phase :)



mostly, I guess there are cases where we do lock: appears to be GSSAPI and mcache.



Right. Even in GSS we should mostly not need locks except for wrap/unwrap and get-MIC/verify-MIC, and then only because some sequence number window updates can't easily be implemented w/o locks.

Yes, I wonder if we could remove all the locks (assuming caller serialises context establishment and deletion; does the spec say anything about that? could be an issue for applications like DCE RPC where requests can come in on different threads), and just use atomics for sequence management.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,922,2022-01-06T20:55:32Z,2022-01-15T07:54:57Z,2022-01-15T07:54:57Z,MERGED,True,1304,1229,61,https://github.com/nicowilliams,Use ASN.1 type decoration for profit in HDB and for PACs,4,['refactor'],https://github.com/heimdal/heimdal/pull/922,https://github.com/nicowilliams,26,https://github.com/heimdal/heimdal/pull/922#issuecomment-1011725973,"PREVIOUSLY:

This adds support for asn1_compile --decorate=... variation that causes decoration of an ASN.1 SET/SEQUENCE type with a field of a non-ASN.1 type.
This means we can now have an ASN.1 type to represent a request that can then have a ""hidden"" field -- hidden in that it is neither encoded nor decoded.  This field will be copied and freed when the decoration is of an ASN.1 type or of a external, C type that comes with copy constructor and destructor functions.  Decoration with a void * field which is neither copied nor freed is also supported.

That was reviewed by @lhoward.
NOW:

Follow-up commits add a krb5_pac to PrincipalNameAttrs and also replaces hdb_entry_ex by decorating HDB_entry with a C type that points to the backend-specific context.","I mean, if you think it should be private, then it needs to be moved from kdc.h to kdc_locl.h, or perhaps it has a public and private component as does astgs_request_t. But that should be a separate PR obviously.

In the past I've thought it was private, so I've made changes in the middle of it.  Can we haz a comment in it so no one forgets?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,922,2022-01-06T20:55:32Z,2022-01-15T07:54:57Z,2022-01-15T07:54:57Z,MERGED,True,1304,1229,61,https://github.com/nicowilliams,Use ASN.1 type decoration for profit in HDB and for PACs,4,['refactor'],https://github.com/heimdal/heimdal/pull/922,https://github.com/lhoward,27,https://github.com/heimdal/heimdal/pull/922#issuecomment-1011728783,"PREVIOUSLY:

This adds support for asn1_compile --decorate=... variation that causes decoration of an ASN.1 SET/SEQUENCE type with a field of a non-ASN.1 type.
This means we can now have an ASN.1 type to represent a request that can then have a ""hidden"" field -- hidden in that it is neither encoded nor decoded.  This field will be copied and freed when the decoration is of an ASN.1 type or of a external, C type that comes with copy constructor and destructor functions.  Decoration with a void * field which is neither copied nor freed is also supported.

That was reviewed by @lhoward.
NOW:

Follow-up commits add a krb5_pac to PrincipalNameAttrs and also replaces hdb_entry_ex by decorating HDB_entry with a C type that points to the backend-specific context.","I mean, if you think it should be private, then it needs to be moved from kdc.h to kdc_locl.h, or perhaps it has a public and private component as does astgs_request_t. But that should be a separate PR obviously.

In the past I've thought it was private, so I've made changes in the middle of it. Can we haz a comment in it so no one forgets?

We could split into public/private parts, the question is what parts needs to be public. I don't really have any idea.  Clearly
    struct HDB **db;
    int num_db;
apropos of the discussion in this thread, but maybe app and logf too.
Also there are a gazillion krb5_boolean and int boolean value, should we make those unsigned int:1.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,922,2022-01-06T20:55:32Z,2022-01-15T07:54:57Z,2022-01-15T07:54:57Z,MERGED,True,1304,1229,61,https://github.com/nicowilliams,Use ASN.1 type decoration for profit in HDB and for PACs,4,['refactor'],https://github.com/heimdal/heimdal/pull/922,https://github.com/nicowilliams,28,https://github.com/heimdal/heimdal/pull/922#issuecomment-1011739061,"PREVIOUSLY:

This adds support for asn1_compile --decorate=... variation that causes decoration of an ASN.1 SET/SEQUENCE type with a field of a non-ASN.1 type.
This means we can now have an ASN.1 type to represent a request that can then have a ""hidden"" field -- hidden in that it is neither encoded nor decoded.  This field will be copied and freed when the decoration is of an ASN.1 type or of a external, C type that comes with copy constructor and destructor functions.  Decoration with a void * field which is neither copied nor freed is also supported.

That was reviewed by @lhoward.
NOW:

Follow-up commits add a krb5_pac to PrincipalNameAttrs and also replaces hdb_entry_ex by decorating HDB_entry with a C type that points to the backend-specific context.","True, we could put the things we're willing to commit to at the top.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,922,2022-01-06T20:55:32Z,2022-01-15T07:54:57Z,2022-01-15T07:54:57Z,MERGED,True,1304,1229,61,https://github.com/nicowilliams,Use ASN.1 type decoration for profit in HDB and for PACs,4,['refactor'],https://github.com/heimdal/heimdal/pull/922,https://github.com/lhoward,29,https://github.com/heimdal/heimdal/pull/922#issuecomment-1011744850,"PREVIOUSLY:

This adds support for asn1_compile --decorate=... variation that causes decoration of an ASN.1 SET/SEQUENCE type with a field of a non-ASN.1 type.
This means we can now have an ASN.1 type to represent a request that can then have a ""hidden"" field -- hidden in that it is neither encoded nor decoded.  This field will be copied and freed when the decoration is of an ASN.1 type or of a external, C type that comes with copy constructor and destructor functions.  Decoration with a void * field which is neither copied nor freed is also supported.

That was reviewed by @lhoward.
NOW:

Follow-up commits add a krb5_pac to PrincipalNameAttrs and also replaces hdb_entry_ex by decorating HDB_entry with a C type that points to the backend-specific context.","True, we could put the things we're willing to commit to at the top.

See #928",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,922,2022-01-06T20:55:32Z,2022-01-15T07:54:57Z,2022-01-15T07:54:57Z,MERGED,True,1304,1229,61,https://github.com/nicowilliams,Use ASN.1 type decoration for profit in HDB and for PACs,4,['refactor'],https://github.com/heimdal/heimdal/pull/922,https://github.com/jaltman,30,https://github.com/heimdal/heimdal/pull/922#issuecomment-1012107664,"PREVIOUSLY:

This adds support for asn1_compile --decorate=... variation that causes decoration of an ASN.1 SET/SEQUENCE type with a field of a non-ASN.1 type.
This means we can now have an ASN.1 type to represent a request that can then have a ""hidden"" field -- hidden in that it is neither encoded nor decoded.  This field will be copied and freed when the decoration is of an ASN.1 type or of a external, C type that comes with copy constructor and destructor functions.  Decoration with a void * field which is neither copied nor freed is also supported.

That was reviewed by @lhoward.
NOW:

Follow-up commits add a krb5_pac to PrincipalNameAttrs and also replaces hdb_entry_ex by decorating HDB_entry with a C type that points to the backend-specific context.","In general I believe structures such as astgs_request_t should be opaque private and we should provide thread safe accessors to access the internals.   Then the data structure can change over time.
As for freeing the hdb_entry I think the entry should contain a pointer to the HDB that allocated it and then the entry can free itself.   In a multiple HDB world I don't want a plugin to corrupt memory by passing a mismatched HDB when freeing an entry.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,922,2022-01-06T20:55:32Z,2022-01-15T07:54:57Z,2022-01-15T07:54:57Z,MERGED,True,1304,1229,61,https://github.com/nicowilliams,Use ASN.1 type decoration for profit in HDB and for PACs,4,['refactor'],https://github.com/heimdal/heimdal/pull/922,https://github.com/lhoward,31,https://github.com/heimdal/heimdal/pull/922#issuecomment-1012527169,"PREVIOUSLY:

This adds support for asn1_compile --decorate=... variation that causes decoration of an ASN.1 SET/SEQUENCE type with a field of a non-ASN.1 type.
This means we can now have an ASN.1 type to represent a request that can then have a ""hidden"" field -- hidden in that it is neither encoded nor decoded.  This field will be copied and freed when the decoration is of an ASN.1 type or of a external, C type that comes with copy constructor and destructor functions.  Decoration with a void * field which is neither copied nor freed is also supported.

That was reviewed by @lhoward.
NOW:

Follow-up commits add a krb5_pac to PrincipalNameAttrs and also replaces hdb_entry_ex by decorating HDB_entry with a C type that points to the backend-specific context.","In general I believe structures such as astgs_request_t should be opaque private and we should provide thread safe accessors to access the internals. Then the data structure can change over time.

Agreed. This is a good idea for a future PR.

As for freeing the hdb_entry I think the entry should contain a pointer to the HDB that allocated it and then the entry can free itself. In a multiple HDB world I don't want a plugin to corrupt memory by passing a mismatched HDB when freeing an entry.

Don't agree here, plugins should not free entries they are passed, and this PR makes the HDB API more consistent (as all HDB functions take a HDB pointer, for example hdb_password).
(The Samba case where they free an entry is irrelevant because they have also fetched the entry, and the fetched entry does not cross an API boundary.)",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,922,2022-01-06T20:55:32Z,2022-01-15T07:54:57Z,2022-01-15T07:54:57Z,MERGED,True,1304,1229,61,https://github.com/nicowilliams,Use ASN.1 type decoration for profit in HDB and for PACs,4,['refactor'],https://github.com/heimdal/heimdal/pull/922,https://github.com/lhoward,32,https://github.com/heimdal/heimdal/pull/922#issuecomment-1012614082,"PREVIOUSLY:

This adds support for asn1_compile --decorate=... variation that causes decoration of an ASN.1 SET/SEQUENCE type with a field of a non-ASN.1 type.
This means we can now have an ASN.1 type to represent a request that can then have a ""hidden"" field -- hidden in that it is neither encoded nor decoded.  This field will be copied and freed when the decoration is of an ASN.1 type or of a external, C type that comes with copy constructor and destructor functions.  Decoration with a void * field which is neither copied nor freed is also supported.

That was reviewed by @lhoward.
NOW:

Follow-up commits add a krb5_pac to PrincipalNameAttrs and also replaces hdb_entry_ex by decorating HDB_entry with a C type that points to the backend-specific context.","In general I believe structures such as astgs_request_t should be opaque private and we should provide thread safe accessors to access the internals. Then the data structure can change over time.

Note: the KDC is presently single-threaded.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,922,2022-01-06T20:55:32Z,2022-01-15T07:54:57Z,2022-01-15T07:54:57Z,MERGED,True,1304,1229,61,https://github.com/nicowilliams,Use ASN.1 type decoration for profit in HDB and for PACs,4,['refactor'],https://github.com/heimdal/heimdal/pull/922,https://github.com/lhoward,33,https://github.com/heimdal/heimdal/pull/922#issuecomment-1012615475,"PREVIOUSLY:

This adds support for asn1_compile --decorate=... variation that causes decoration of an ASN.1 SET/SEQUENCE type with a field of a non-ASN.1 type.
This means we can now have an ASN.1 type to represent a request that can then have a ""hidden"" field -- hidden in that it is neither encoded nor decoded.  This field will be copied and freed when the decoration is of an ASN.1 type or of a external, C type that comes with copy constructor and destructor functions.  Decoration with a void * field which is neither copied nor freed is also supported.

That was reviewed by @lhoward.
NOW:

Follow-up commits add a krb5_pac to PrincipalNameAttrs and also replaces hdb_entry_ex by decorating HDB_entry with a C type that points to the backend-specific context.","BTW, we already have the _kdc_audit_getkv() accessor for audit plugins.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,923,2022-01-07T17:48:23Z,2022-01-07T23:38:01Z,2022-01-07T23:38:01Z,MERGED,True,941,456,9,https://github.com/nicowilliams,gss: Make krb5 name attrs table-driven,3,[],https://github.com/heimdal/heimdal/pull/923,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/923,"The implementation of GSS name attributes for Kerberos (or any mechanism
with more than a tiny handful) is much nicer as a table-driven
implementation.","The implementation of GSS name attributes for Kerberos (or any mechanism
with more than a tiny handful) is much nicer as a table-driven
implementation.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,924,2022-01-08T03:03:10Z,2022-01-08T03:04:19Z,2022-01-08T03:11:35Z,MERGED,True,4,0,1,https://github.com/nicowilliams,gsskrb5: Do not leak authenticator on retry,1,['bug'],https://github.com/heimdal/heimdal/pull/924,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/924,"We have a Heimdal special where when the acceptor sends back an error
token for clock skew or ticket-not-yet-valid errors then the acceptor
application will get GSS_S_CONTINUE_NEEDED from gss_accept_sec_context()
so that the initiator may retry with the same context.
But we were retaining the auth_context, which means that when the
initiator does send a new token, the acceptor leaks memory because
krb5_verify_ap_req2() doesn't clean up the auth_context on reuse.  The
end result is that we leak a lot in those cases.","We have a Heimdal special where when the acceptor sends back an error
token for clock skew or ticket-not-yet-valid errors then the acceptor
application will get GSS_S_CONTINUE_NEEDED from gss_accept_sec_context()
so that the initiator may retry with the same context.
But we were retaining the auth_context, which means that when the
initiator does send a new token, the acceptor leaks memory because
krb5_verify_ap_req2() doesn't clean up the auth_context on reuse.  The
end result is that we leak a lot in those cases.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,926,2022-01-10T01:53:12Z,2022-01-10T04:29:49Z,2022-01-10T04:29:49Z,MERGED,True,36,54,4,https://github.com/lhoward,Set TGS error sname to request sname,2,['bug'],https://github.com/heimdal/heimdal/pull/926,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/926,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,926,2022-01-10T01:53:12Z,2022-01-10T04:29:49Z,2022-01-10T04:29:49Z,MERGED,True,36,54,4,https://github.com/lhoward,Set TGS error sname to request sname,2,['bug'],https://github.com/heimdal/heimdal/pull/926,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/926#issuecomment-1008485664,,Possibly we should honor force_canonicalize on the server entry.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,926,2022-01-10T01:53:12Z,2022-01-10T04:29:49Z,2022-01-10T04:29:49Z,MERGED,True,36,54,4,https://github.com/lhoward,Set TGS error sname to request sname,2,['bug'],https://github.com/heimdal/heimdal/pull/926,https://github.com/nicowilliams,3,https://github.com/heimdal/heimdal/pull/926#issuecomment-1008503436,,LGTM,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,927,2022-01-11T23:17:10Z,2022-01-15T05:21:05Z,2022-01-15T22:30:49Z,CLOSED,False,0,0,0,https://github.com/nicowilliams,Fix warnings,0,[],https://github.com/heimdal/heimdal/pull/927,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/927,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,927,2022-01-11T23:17:10Z,2022-01-15T05:21:05Z,2022-01-15T22:30:49Z,CLOSED,False,0,0,0,https://github.com/nicowilliams,Fix warnings,0,[],https://github.com/heimdal/heimdal/pull/927,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/927#issuecomment-1011664355,,Appears some builds are failing with unknown option -Wno-unused-but-set-variable.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,927,2022-01-11T23:17:10Z,2022-01-15T05:21:05Z,2022-01-15T22:30:49Z,CLOSED,False,0,0,0,https://github.com/nicowilliams,Fix warnings,0,[],https://github.com/heimdal/heimdal/pull/927,https://github.com/lhoward,3,https://github.com/heimdal/heimdal/pull/927#issuecomment-1011664831,,And  -Wenum-conversion.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,927,2022-01-11T23:17:10Z,2022-01-15T05:21:05Z,2022-01-15T22:30:49Z,CLOSED,False,0,0,0,https://github.com/nicowilliams,Fix warnings,0,[],https://github.com/heimdal/heimdal/pull/927,https://github.com/nicowilliams,4,https://github.com/heimdal/heimdal/pull/927#issuecomment-1013587407,,This has mostly been merged one by one by now.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,928,2022-01-13T03:19:56Z,2022-01-14T05:05:53Z,2022-01-14T05:05:54Z,CLOSED,False,162,152,20,https://github.com/lhoward,Make most of KDC configuration private,3,['refactor'],https://github.com/heimdal/heimdal/pull/928,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/928,Only expose a small part of krb5_kdc_configuration outside KDC.,Only expose a small part of krb5_kdc_configuration outside KDC.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,928,2022-01-13T03:19:56Z,2022-01-14T05:05:53Z,2022-01-14T05:05:54Z,CLOSED,False,162,152,20,https://github.com/lhoward,Make most of KDC configuration private,3,['refactor'],https://github.com/heimdal/heimdal/pull/928,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/928#issuecomment-1012779812,Only expose a small part of krb5_kdc_configuration outside KDC.,"Closing this, let's use accessors instead and make everything private.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,929,2022-01-13T03:41:48Z,2022-01-13T03:51:31Z,2022-01-13T03:51:31Z,MERGED,True,109,68,6,https://github.com/lhoward,kdc: move auth event definitions into KDC header,1,['refactor'],https://github.com/heimdal/heimdal/pull/929,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/929,"Move KDC auth event macro definitions out of hdb.h and into a new KDC header, kdc-audit.h.","Move KDC auth event macro definitions out of hdb.h and into a new KDC header, kdc-audit.h.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,929,2022-01-13T03:41:48Z,2022-01-13T03:51:31Z,2022-01-13T03:51:31Z,MERGED,True,109,68,6,https://github.com/lhoward,kdc: move auth event definitions into KDC header,1,['refactor'],https://github.com/heimdal/heimdal/pull/929,https://github.com/jaltman,2,https://github.com/heimdal/heimdal/pull/929#issuecomment-1011765680,"Move KDC auth event macro definitions out of hdb.h and into a new KDC header, kdc-audit.h.",Looks good,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,929,2022-01-13T03:41:48Z,2022-01-13T03:51:31Z,2022-01-13T03:51:31Z,MERGED,True,109,68,6,https://github.com/lhoward,kdc: move auth event definitions into KDC header,1,['refactor'],https://github.com/heimdal/heimdal/pull/929,https://github.com/lhoward,3,https://github.com/heimdal/heimdal/pull/929#issuecomment-1011767733,"Move KDC auth event macro definitions out of hdb.h and into a new KDC header, kdc-audit.h.","Thanks @jaltman. This is with a view towards possibly removing the audit API entirely from hdb.h (Samba will have a KDC plugin anyway, so it doesn't affect them; the only reason to leave it there is perhaps if we want to use it someday for kadmin too).",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,930,2022-01-13T19:42:17Z,2022-01-13T21:00:50Z,2022-01-13T21:00:51Z,MERGED,True,6,3,1,https://github.com/mdionne,"hcrypto: Fix return type for null_Init, null_Update and null_Final",1,[],https://github.com/heimdal/heimdal/pull/930,https://github.com/mdionne,1,https://github.com/heimdal/heimdal/pull/930,"The hc_evp_md_init, hc_evp_md_update and hc_evp_md_final typedefs
are defined as functions returning an int, but null_Init, null_Update
and null_Final are defined as void, and cast with the typedef when
assigned to the function vector.
This might result in some uninitialized value being returned to the
caller, if some of them make use of the return value.  It also causes
warnings if the -Wcast-function-type warning is enabled.
Change the type to in to match the typedef, and return 1 (success).","The hc_evp_md_init, hc_evp_md_update and hc_evp_md_final typedefs
are defined as functions returning an int, but null_Init, null_Update
and null_Final are defined as void, and cast with the typedef when
assigned to the function vector.
This might result in some uninitialized value being returned to the
caller, if some of them make use of the return value.  It also causes
warnings if the -Wcast-function-type warning is enabled.
Change the type to in to match the typedef, and return 1 (success).",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,933,2022-01-14T04:15:01Z,2022-01-19T03:46:49Z,2022-01-19T03:46:50Z,CLOSED,False,879,139,8,https://github.com/lhoward,KDC data structure accessors for use by plugins,2,['refactor'],https://github.com/heimdal/heimdal/pull/933,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/933,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,933,2022-01-14T04:15:01Z,2022-01-19T03:46:49Z,2022-01-19T03:46:50Z,CLOSED,False,879,139,8,https://github.com/lhoward,KDC data structure accessors for use by plugins,2,['refactor'],https://github.com/heimdal/heimdal/pull/933,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/933#issuecomment-1012799609,,"This really needs #922 to be merged so we can return copies of HDB entries (although, can we even do that because we can't copy the private data?)",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,933,2022-01-14T04:15:01Z,2022-01-19T03:46:49Z,2022-01-19T03:46:50Z,CLOSED,False,879,139,8,https://github.com/lhoward,KDC data structure accessors for use by plugins,2,['refactor'],https://github.com/heimdal/heimdal/pull/933,https://github.com/lhoward,3,https://github.com/heimdal/heimdal/pull/933#issuecomment-1016052822,,"Closing, trying alternative approach.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,934,2022-01-14T04:24:54Z,2022-01-18T05:09:51Z,2022-01-18T05:09:51Z,MERGED,True,260,260,8,https://github.com/lhoward,kdc: make auditing API public,1,['refactor'],https://github.com/heimdal/heimdal/pull/934,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/934,"Samba plugins will need to use auditing API without including krb5-private.h, so make the auditing APIs public.
Essentially this patch is s/_kdc_audit/kdc_audit/ except for _kdc_audit_trail.","Samba plugins will need to use auditing API without including krb5-private.h, so make the auditing APIs public.
Essentially this patch is s/_kdc_audit/kdc_audit/ except for _kdc_audit_trail.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,934,2022-01-14T04:24:54Z,2022-01-18T05:09:51Z,2022-01-18T05:09:51Z,MERGED,True,260,260,8,https://github.com/lhoward,kdc: make auditing API public,1,['refactor'],https://github.com/heimdal/heimdal/pull/934,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/934#issuecomment-1015075779,"Samba plugins will need to use auditing API without including krb5-private.h, so make the auditing APIs public.
Essentially this patch is s/_kdc_audit/kdc_audit/ except for _kdc_audit_trail.",Rebased,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,936,2022-01-14T18:11:32Z,2022-01-14T19:56:39Z,2022-01-14T19:56:42Z,MERGED,True,5,4,2,https://github.com/jaltman,roken: do not define 'timezone' and 'tzname',1,[],https://github.com/heimdal/heimdal/pull/936,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/936,"ec866e6
(""Windows 10 SDK build fixes"") introduced CPP macros
timezone -> _timezone
tzname   -> _tzname
but these names are common and the macros rewrite too much.
Change-Id: Ic813bff842124595fd3d86761cee6dcea4ae44e4","ec866e6
(""Windows 10 SDK build fixes"") introduced CPP macros
timezone -> _timezone
tzname   -> _tzname
but these names are common and the macros rewrite too much.
Change-Id: Ic813bff842124595fd3d86761cee6dcea4ae44e4",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,937,2022-01-16T01:48:09Z,2022-01-16T02:24:10Z,2022-01-16T02:24:13Z,MERGED,True,2,9,1,https://github.com/jaltman,gssapi/mech: mech_locl.h roken.h must be included earlier,1,[],https://github.com/heimdal/heimdal/pull/937,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/937,"If included roken.h should be immediately following config.h.
Doing so ensures that all platform specific headers are
included in the proper order and avoids unnecessary includes
of headers managed by roken.h.","If included roken.h should be immediately following config.h.
Doing so ensures that all platform specific headers are
included in the proper order and avoids unnecessary includes
of headers managed by roken.h.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,937,2022-01-16T01:48:09Z,2022-01-16T02:24:10Z,2022-01-16T02:24:13Z,MERGED,True,2,9,1,https://github.com/jaltman,gssapi/mech: mech_locl.h roken.h must be included earlier,1,[],https://github.com/heimdal/heimdal/pull/937,https://github.com/jaltman,2,https://github.com/heimdal/heimdal/pull/937#issuecomment-1013796758,"If included roken.h should be immediately following config.h.
Doing so ensures that all platform specific headers are
included in the proper order and avoids unnecessary includes
of headers managed by roken.h.","All builds completed successfully through the test stage.   Failures in ""distclean"".",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,938,2022-01-16T02:51:17Z,2022-01-16T03:05:50Z,2022-01-16T03:05:53Z,MERGED,True,63,66,10,https://github.com/jaltman,remove krb5 enctype casts,2,[],https://github.com/heimdal/heimdal/pull/938,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/938,Avoid unnecessary casting to krb5_enctype by use of CPP macros instead of anonymous enums for alternative enctype names.,Avoid unnecessary casting to krb5_enctype by use of CPP macros instead of anonymous enums for alternative enctype names.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,938,2022-01-16T02:51:17Z,2022-01-16T03:05:50Z,2022-01-16T03:05:53Z,MERGED,True,63,66,10,https://github.com/jaltman,remove krb5 enctype casts,2,[],https://github.com/heimdal/heimdal/pull/938,https://github.com/jaltman,2,https://github.com/heimdal/heimdal/pull/938#issuecomment-1013800989,Avoid unnecessary casting to krb5_enctype by use of CPP macros instead of anonymous enums for alternative enctype names.,distclean failures,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,939,2022-01-16T04:24:32Z,2022-01-16T05:05:08Z,2022-01-16T05:05:11Z,MERGED,True,1,1,1,https://github.com/jaltman,lib/hcrypto: ENGINE_by_dso do not leak handle,1,[],https://github.com/heimdal/heimdal/pull/939,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/939,"Must dlclose(handle) before returning even if 'engine' is
returned to caller.","Must dlclose(handle) before returning even if 'engine' is
returned to caller.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,939,2022-01-16T04:24:32Z,2022-01-16T05:05:08Z,2022-01-16T05:05:11Z,MERGED,True,1,1,1,https://github.com/jaltman,lib/hcrypto: ENGINE_by_dso do not leak handle,1,[],https://github.com/heimdal/heimdal/pull/939,https://github.com/jaltman,2,https://github.com/heimdal/heimdal/pull/939#issuecomment-1013812018,"Must dlclose(handle) before returning even if 'engine' is
returned to caller.",the osx failure is unrelated,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,940,2022-01-16T05:09:42Z,2022-01-16T05:23:05Z,2022-01-16T05:23:08Z,MERGED,True,10,7,6,https://github.com/jaltman,prevent unintended sign extension errors,1,[],https://github.com/heimdal/heimdal/pull/940,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/940,"When an unsigned char is shifted << 24 bits its type will be
promoted to signed 32-bits.   If the value is then assigned to
an unsigned 64-bit value sign extension will occur.
Prevent the unwanted sign extension by explicitly casting the
value to unsigned long before shifting.","When an unsigned char is shifted << 24 bits its type will be
promoted to signed 32-bits.   If the value is then assigned to
an unsigned 64-bit value sign extension will occur.
Prevent the unwanted sign extension by explicitly casting the
value to unsigned long before shifting.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,941,2022-01-16T22:44:20Z,2022-01-18T04:50:04Z,2022-01-18T04:50:04Z,MERGED,True,23,23,6,https://github.com/lhoward,kdc: remove krb5_ prefix for KDC attribute functions,1,['refactor'],https://github.com/heimdal/heimdal/pull/941,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/941,"We will use the kdc_ rather than krb5_kdc_ prefix for new public APIs exported from libkdc. Amend the recently introduced request_{get,set,copy,delete}_attribute APIs to conform.","We will use the kdc_ rather than krb5_kdc_ prefix for new public APIs exported from libkdc. Amend the recently introduced request_{get,set,copy,delete}_attribute APIs to conform.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,942,2022-01-18T06:26:29Z,2022-01-18T14:14:30Z,2022-01-18T14:14:41Z,MERGED,True,55,88,1,https://github.com/nicowilliams,kdc: Rewrite get_pa_etype_info and set_salt_padata,1,[],https://github.com/heimdal/heimdal/pull/942,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/942,"We weren't checking for errors, and we weren't using the convience
SEQUENCE OF add_METHOD_DATA() and add_ETYPE_INFO() functions generated
by the ASN.1 compiler.  Using those utilities made get_pa_etype_info()
and make_etype_info_entry() sufficiently simpler that merging the two
makes for simpler, more readable code.","We weren't checking for errors, and we weren't using the convience
SEQUENCE OF add_METHOD_DATA() and add_ETYPE_INFO() functions generated
by the ASN.1 compiler.  Using those utilities made get_pa_etype_info()
and make_etype_info_entry() sufficiently simpler that merging the two
makes for simpler, more readable code.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,943,2022-01-19T03:57:11Z,2022-01-20T06:23:24Z,2022-01-20T06:54:58Z,MERGED,True,888,210,21,https://github.com/lhoward,kdc: add accessor functions for KDC request structure,3,['feature request'],https://github.com/heimdal/heimdal/pull/943,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/943,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,943,2022-01-19T03:57:11Z,2022-01-20T06:23:24Z,2022-01-20T06:54:58Z,MERGED,True,888,210,21,https://github.com/lhoward,kdc: add accessor functions for KDC request structure,3,['feature request'],https://github.com/heimdal/heimdal/pull/943,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/943#issuecomment-1016920558,,"Note to self: renaming ret to error_code is bad, or should at least be in a separate commit.
Accessor names should possibly be customisable to not embed the field name in the symbol name.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,943,2022-01-19T03:57:11Z,2022-01-20T06:23:24Z,2022-01-20T06:54:58Z,MERGED,True,888,210,21,https://github.com/lhoward,kdc: add accessor functions for KDC request structure,3,['feature request'],https://github.com/heimdal/heimdal/pull/943,https://github.com/nicowilliams,3,https://github.com/heimdal/heimdal/pull/943#issuecomment-1017152009,,This is fantastic.  I love it.  Thanks!,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,944,2022-01-20T00:32:17Z,2022-01-24T05:07:52Z,2022-01-24T05:08:27Z,MERGED,True,171,47,6,https://github.com/jaltman,assert non-NULL ptrs before calling mem funcs,1,[],https://github.com/heimdal/heimdal/pull/944,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/944,"The definitions of memcpy(), memmove(), and memset() state that
the behaviour is undefined if any of the pointer arguments are
NULL, and some compilers are known to make use of this to
optimise away existing NULL checks in the source.
Change-Id: I489bc256e3eac7ff41d91becb0b43aba73dbb3f9
Link: https://www.imperialviolet.org/2016/06/26/nonnull.html","The definitions of memcpy(), memmove(), and memset() state that
the behaviour is undefined if any of the pointer arguments are
NULL, and some compilers are known to make use of this to
optimise away existing NULL checks in the source.
Change-Id: I489bc256e3eac7ff41d91becb0b43aba73dbb3f9
Link: https://www.imperialviolet.org/2016/06/26/nonnull.html",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,945,2022-01-20T22:45:37Z,2022-02-14T17:57:01Z,2022-02-14T17:57:01Z,CLOSED,False,36,14,5,https://github.com/elric1,Small fixes to NTLM code,5,[],https://github.com/heimdal/heimdal/pull/945,https://github.com/elric1,1,https://github.com/heimdal/heimdal/pull/945,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,945,2022-01-20T22:45:37Z,2022-02-14T17:57:01Z,2022-02-14T17:57:01Z,CLOSED,False,36,14,5,https://github.com/elric1,Small fixes to NTLM code,5,[],https://github.com/heimdal/heimdal/pull/945,https://github.com/jaltman,2,https://github.com/heimdal/heimdal/pull/945#issuecomment-1019403285,,"The memleak changes have been merged
8dcd05e  _gss_ntlm_init_sec_context() mem leaks
e87fca8 _gss_ntlm_delete_sec_context() mem leaks
8526b4c fix memory leak near NTLM type2 response",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,946,2022-01-21T15:19:51Z,2022-01-21T15:39:47Z,2022-01-21T15:39:50Z,MERGED,True,39,62,22,https://github.com/jaltman,"Follow the Linux kernel's lead on ""fallthrough""",1,[],https://github.com/heimdal/heimdal/pull/946,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/946,"The pseudo keyword 'fallthrough' is defined such that case statement
blocks must end with any of these keywords:

break;
fallthrough;
continue;
goto ;
return [expression];

gcc: https://gcc.gnu.org/onlinedocs/gcc/Statement-Attributes.html#Statement-Attributes

The macro is defined either as
attribute((fallthrough))
or as
do {} while (0)  /* fallthrough */
not including the semicolon.
This change implements the Linux kernel style and updates several locations
where ""/fallthrough/ and /* FALLTHROUGH */ were not previously replaced.
Externally imported code such as libedit, libtommath and sqlite are
restored to their unaltered state.
Change-Id: I69db8167b0d5884f55d96d72de3059a0235a1ba3","The pseudo keyword 'fallthrough' is defined such that case statement
blocks must end with any of these keywords:

break;
fallthrough;
continue;
goto ;
return [expression];

gcc: https://gcc.gnu.org/onlinedocs/gcc/Statement-Attributes.html#Statement-Attributes

The macro is defined either as
attribute((fallthrough))
or as
do {} while (0)  /* fallthrough */
not including the semicolon.
This change implements the Linux kernel style and updates several locations
where ""/fallthrough/ and /* FALLTHROUGH */ were not previously replaced.
Externally imported code such as libedit, libtommath and sqlite are
restored to their unaltered state.
Change-Id: I69db8167b0d5884f55d96d72de3059a0235a1ba3",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,947,2022-01-21T21:06:45Z,,2022-01-24T16:48:24Z,OPEN,False,303,187,7,https://github.com/nicowilliams,Rework  `_kdc_find_etype()`,4,[],https://github.com/heimdal/heimdal/pull/947,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/947,"_kdc_find_etype() has become a monster.  It's time to rewrite it.
I'm splitting it into two parts:


_kdc_find_etype(), meant for selecting a ticket's session key enctype (though it's also used in GSS pre-auth to pick the enctype for which to derive a reply key, but the considerations are the same in that case)


_kdc_find_key_and_salt(), which is used to pick a key and salt for use in PA-ETYPE-INFO and PA-ETYPE-INFO2


The latter is similar in function to _kdc_get_preferred_key(), but whereas the KDC-REQ-BODY's etype list does not affect service key selection, it does affect client key selection (I think so anyways), so _kdc_find_key_and_salt() does call _kdc_find_etype().","_kdc_find_etype() has become a monster.  It's time to rewrite it.
I'm splitting it into two parts:


_kdc_find_etype(), meant for selecting a ticket's session key enctype (though it's also used in GSS pre-auth to pick the enctype for which to derive a reply key, but the considerations are the same in that case)


_kdc_find_key_and_salt(), which is used to pick a key and salt for use in PA-ETYPE-INFO and PA-ETYPE-INFO2


The latter is similar in function to _kdc_get_preferred_key(), but whereas the KDC-REQ-BODY's etype list does not affect service key selection, it does affect client key selection (I think so anyways), so _kdc_find_key_and_salt() does call _kdc_find_etype().",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,947,2022-01-21T21:06:45Z,,2022-01-24T16:48:24Z,OPEN,False,303,187,7,https://github.com/nicowilliams,Rework  `_kdc_find_etype()`,4,[],https://github.com/heimdal/heimdal/pull/947,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/947#issuecomment-1018880681,"_kdc_find_etype() has become a monster.  It's time to rewrite it.
I'm splitting it into two parts:


_kdc_find_etype(), meant for selecting a ticket's session key enctype (though it's also used in GSS pre-auth to pick the enctype for which to derive a reply key, but the considerations are the same in that case)


_kdc_find_key_and_salt(), which is used to pick a key and salt for use in PA-ETYPE-INFO and PA-ETYPE-INFO2


The latter is similar in function to _kdc_get_preferred_key(), but whereas the KDC-REQ-BODY's etype list does not affect service key selection, it does affect client key selection (I think so anyways), so _kdc_find_key_and_salt() does call _kdc_find_etype().",check-des is broken.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,948,2022-01-24T19:05:18Z,,2022-01-25T22:02:38Z,OPEN,False,326,4,4,https://github.com/nicowilliams,Heimdal 8 0,3,[],https://github.com/heimdal/heimdal/pull/948,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/948,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,949,2022-01-25T15:08:06Z,2022-01-26T00:08:32Z,2022-01-26T00:08:33Z,CLOSED,False,1,0,1,https://github.com/cryptomilk,lib/hdb: Add a flag to force canonicalization,1,[],https://github.com/heimdal/heimdal/pull/949,https://github.com/cryptomilk,1,https://github.com/heimdal/heimdal/pull/949,We need a force canonicalization flag for the Samba database module.,We need a force canonicalization flag for the Samba database module.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,949,2022-01-25T15:08:06Z,2022-01-26T00:08:32Z,2022-01-26T00:08:33Z,CLOSED,False,1,0,1,https://github.com/cryptomilk,lib/hdb: Add a flag to force canonicalization,1,[],https://github.com/heimdal/heimdal/pull/949,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/949#issuecomment-1021542078,We need a force canonicalization flag for the Samba database module.,Is the HDB_entry's flags' force_canonicalize insufficient because you need a flag for lookup?,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,949,2022-01-25T15:08:06Z,2022-01-26T00:08:32Z,2022-01-26T00:08:33Z,CLOSED,False,1,0,1,https://github.com/cryptomilk,lib/hdb: Add a flag to force canonicalization,1,[],https://github.com/heimdal/heimdal/pull/949,https://github.com/jaltman,3,https://github.com/heimdal/heimdal/pull/949#issuecomment-1021558631,We need a force canonicalization flag for the Samba database module.,"HDB_F_FORCE_CANON will not be used in-tree by Heimdal.  Please provide an example of how it will be used by Samba.
If necessary, perhaps a flag bit or two can be reserved for third-party use.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,949,2022-01-25T15:08:06Z,2022-01-26T00:08:32Z,2022-01-26T00:08:33Z,CLOSED,False,1,0,1,https://github.com/cryptomilk,lib/hdb: Add a flag to force canonicalization,1,[],https://github.com/heimdal/heimdal/pull/949,https://github.com/jaltman,4,https://github.com/heimdal/heimdal/pull/949#issuecomment-1021564471,We need a force canonicalization flag for the Samba database module.,"Related question.  Is HDB_F_CURRENT_KVNO used by Samba?
The last in-tree use of HDB_F_CURRENT_KVNO was removed in 2011 by 308e53a",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,949,2022-01-25T15:08:06Z,2022-01-26T00:08:32Z,2022-01-26T00:08:33Z,CLOSED,False,1,0,1,https://github.com/cryptomilk,lib/hdb: Add a flag to force canonicalization,1,[],https://github.com/heimdal/heimdal/pull/949,https://github.com/josephsutton1,5,https://github.com/heimdal/heimdal/pull/949#issuecomment-1021582930,We need a force canonicalization flag for the Samba database module.,"Related question. Is HDB_F_CURRENT_KVNO used by Samba?

No, Samba currently doesn't use HDB_F_CURRENT_KVNO anywhere.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,949,2022-01-25T15:08:06Z,2022-01-26T00:08:32Z,2022-01-26T00:08:33Z,CLOSED,False,1,0,1,https://github.com/cryptomilk,lib/hdb: Add a flag to force canonicalization,1,[],https://github.com/heimdal/heimdal/pull/949,https://github.com/cryptomilk,6,https://github.com/heimdal/heimdal/pull/949#issuecomment-1021591648,We need a force canonicalization flag for the Samba database module.,"Samba has a glue layer called SDB. It is very similar to HDB. It is used to either translate to HDB (Heimdal) or KDB (MIT Kerberos). In SDB we have a flag SDB_F_FORCE_CANON which is set to 16384. However as we directly pass HDB flags to SDB and do not translate them, the value 16384 has been assigned to HDB_F_PRECHECK.
So if Heimdal would pass that flag to get_principal() then we would force canonicalization now. In order to avoid that, I would like to define it in Heimdal. We could also use HDB_F_CURRENT_KVNO and rename it to HDB_F_FORCE_CANON if that is preferred.
https://gitlab.com/samba-team/samba/-/blob/master/source4/kdc/db-glue.c#L986",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,949,2022-01-25T15:08:06Z,2022-01-26T00:08:32Z,2022-01-26T00:08:33Z,CLOSED,False,1,0,1,https://github.com/cryptomilk,lib/hdb: Add a flag to force canonicalization,1,[],https://github.com/heimdal/heimdal/pull/949,https://github.com/lhoward,7,https://github.com/heimdal/heimdal/pull/949#issuecomment-1021637808,We need a force canonicalization flag for the Samba database module.,Irrespective of assignments it’s probably a good idea to have a translation layer for flags.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,949,2022-01-25T15:08:06Z,2022-01-26T00:08:32Z,2022-01-26T00:08:33Z,CLOSED,False,1,0,1,https://github.com/cryptomilk,lib/hdb: Add a flag to force canonicalization,1,[],https://github.com/heimdal/heimdal/pull/949,https://github.com/abartlet,8,https://github.com/heimdal/heimdal/pull/949#issuecomment-1021661079,We need a force canonicalization flag for the Samba database module.,"Kia Ora @cryptomilk
I don't think this is the right approach.  SDB should take two arguments, HDB flags and extra Samba flags, that KDB can use to signal other things that HDB doesn't have a flag for.
Sorry,
Andrew Bartlett",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,949,2022-01-25T15:08:06Z,2022-01-26T00:08:32Z,2022-01-26T00:08:33Z,CLOSED,False,1,0,1,https://github.com/cryptomilk,lib/hdb: Add a flag to force canonicalization,1,[],https://github.com/heimdal/heimdal/pull/949,https://github.com/jaltman,9,https://github.com/heimdal/heimdal/pull/949#issuecomment-1021664875,We need a force canonicalization flag for the Samba database module.,"Related question. Is HDB_F_CURRENT_KVNO used by Samba?

No, Samba currently doesn't use HDB_F_CURRENT_KVNO anywhere.

Thank you for confirming.  We will remove the unused flag before 8.0.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,949,2022-01-25T15:08:06Z,2022-01-26T00:08:32Z,2022-01-26T00:08:33Z,CLOSED,False,1,0,1,https://github.com/cryptomilk,lib/hdb: Add a flag to force canonicalization,1,[],https://github.com/heimdal/heimdal/pull/949,https://github.com/jaltman,10,https://github.com/heimdal/heimdal/pull/949#issuecomment-1021669223,We need a force canonicalization flag for the Samba database module.,"the value 16384 has been assigned to HDB_F_PRECHECK.

The HDB_F_PRECHECK flag was assigned 16384 more than seven years ago.
HDB and KDB flag namespaces are private to their respective implementations.

SDB should take two arguments, HDB flags and extra Samba flags, that KDB can use to signal other things that HDB doesn't have a flag for.

If its possible to do so, this is a much better implementation because it avoids the possibility of the flag namespaces colliding.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,949,2022-01-25T15:08:06Z,2022-01-26T00:08:32Z,2022-01-26T00:08:33Z,CLOSED,False,1,0,1,https://github.com/cryptomilk,lib/hdb: Add a flag to force canonicalization,1,[],https://github.com/heimdal/heimdal/pull/949,https://github.com/nicowilliams,11,https://github.com/heimdal/heimdal/pull/949#issuecomment-1021726359,We need a force canonicalization flag for the Samba database module.,"So, close this, yes?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,950,2022-01-26T05:46:29Z,,2022-04-26T22:54:34Z,OPEN,False,1239,534,41,https://github.com/nicowilliams,Rethinking kinit behavior -- specifying user intent,11,[],https://github.com/heimdal/heimdal/pull/950,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/950,"We're considering changes to Heimdal's kinit's default behaviors.  We want to make it more useful, less surprising, and more user-friendly.
Final design


kinit

add behavior selection options

--default-for-principal
--search
--unique


the default behavior when none of those new options is given is to honor the -c CACHE/--cache=CACHE/$KRB5CCNAME/configured default cache
if any of those new options is used, then the given cache is only used to identify a collection
all cache types are collections
if --search is given, then search for a cache in the collection identified by the -c CACHE/..., and use it if found, else use the --default-for-principal behavior unless --unique is given
if --default-for-principal is given, the use a cache in the collection identified by the -c CACHE/... with a subsidiary name derived from the name of the principal we're getting credentials for
if --unique is given, use a new, unique cache in the collection identified by the -c CACHE/...
when using the cache identified by the -c CACHE/..., refuse to overwrite it if it has credentials for a different principal
when giving a command to kinit, as always, use a new unique cache, but error out if --default-for-principal or --search are given



klist

add --default-for=principal and --search-for=principal options to klist



kswitch

try krb5_cc_default_for() first when -p principal / --principal=principal is given, then fallback on krb5_cc_match()



Motivation
There are cases when MIT's and Heimdal's kinit (prior to this PR) will honor the -c CACHE/--cache=CACHE/$KRB5CCNAME, and cases where they'll search the user's credentials cache collection, and cases where they will create a ""new unique"" ccache different from what the user might have intended, and other cases where MIT will refuse to write out a ccache while Heimdal will not refuse.

That is a hot mess and terribly confusing UI/UX.  We'd like to make this better.

Another motivation is that ""new unique"" ccache names become garbage that piles up and has to be collected.  This is not a friendly UX.  As well, ""new unique"" ccache names are meaningless but leak into UIs anyways -- another poor UX.
Relatedly, setting KRB5CCNAME or using -c-like options when doing manual identity selection... requires running klist -l to pick a cache name.  But if we name the caches after the principals for which they store credentials, then one can just type, for example, KRB5CCNAME=KCM:${UID}:${USER}@MY.REALM.EXAMPLE ssh somewhere.
So we want to a) make sure that user intent is clear, b) make it easy to name ccaches after principals so it's easy to find the right ccache for each context, and c) provide some safety belt and suspenders.
Background:

Cache collections exist for several reasons:

To support having credentials for multiple different principals.  (In principle a single credentials cache can store tickets for multiple different client principals, but in practice this is not supported by any implementations.)
To use an atomic ""default cache switch"" operation on collections to work around lack of atomic ccache initialization.


In both, MIT and Heimdal, krb5_cc_default() and krb5_cc_default_name() use the value of KRB5CCNAME from the environ if it's set, else a configured default_ccache_name [libdefaults] param, else the compiled-in default ccache for the configured or compiled-in default ccache type.
In Heimdal we have krb5_cc_move() to rename ccaches, and most ccache types in Heimdal support atomic krb5_cc_move()s -- we leave it to the ccache type to get this right, and if not, too bad.
MIT does not appear to have atomic ccache renaming operations.  Neither does the sssd kcm.  Neither does CCAPI.
In Heimdal, every ccache type is a collection type (yes, even FILE!).  Not so in MIT.

Heimdal has a --default-for-principal kinit option in master, and corresponding APIs, for creating a ccache in a given collection but with a cache name derived from the principal name whose credentials will be stored in it -- this makes use of collections user-friendly because the cache names reflect the principal whose credentials they contain.



Proposed UX -- Explicit User Intent


The user must specify intent.  There are only so many behaviors to choose from, so let's have options for all of them, a reasonable default, and let's not deviate from user intent.


By default kinit should operate on the named ccache.  Any alternative requires the use of specific options.  No more ""some cases create a new unique"" cache silently.


Using TYPE: (e.g., KCM:) or equivalent collection names (e.g., KCM:12345 when the process' real UID is 12345) refers to the whole collection and denotes user intent to use specific caches in that collection whose names are derived from those of the client principals that they store credentials for.
When using such a ""whole collection"" ccache name, using kinit to initialize a ccache with some principal's credentials should create a cache with a name based on that principal name (as if --default-for-principal had been given), and should make that the current ccache for the whole collection unless --no-change-default is given.


If the ccache exists and has creds for a different principal than we would be storing creds for, then fail unless other options (--overwrite) alter this understanding.


Proposed new library APIs/behaviors


Make TYPE: a ccache name that refers to a) the whole collection for the user for that cache type, and b) the current default ccache for that collection (e.g., KCM: would be ""the whole collection of caches and the current default ccache in that collection as well, for the real user ID of the current process"").
This is already so for some, but not all ccache types in Heimdal.
This will require a new krb5_cc_ops method, and a corresponding krb5_cc API.


Make every ccache type have and report a specific residual ccache name that also refers to the whole collection and its default (e.g., if the current real UID is 12345 then KCM:12345 would be equivalent to KCM:, while for FILE that would be /tmp/krb5cc_%{UID}).  The ccache types should report this value with tokens unexpanded.


Proposed new kinit behavior
See above.
But what about atomicity?
We get atomicity for free in Heimdal for ccache types that support atomic ccache rename.  However, not all do.
For ccache types that don't support atomic ccache rename, the above proposal will simply mean no atomicity.  We could have kinit act differently for such ccache types, however.
Existing uses of ""new unique then switch"" still have atomicity issues even though the ""switch"" operation is atomic.  The reason is that when users use KRB5CCNAME to pick a specific ccache from their collection to use in some application, when credentials in that cache are near expiration and the user goes to kinit -R them, if the operation to install the new credentials is non-atomic, then there is a race condition anyways.
See also Greg's comment about atomicity.","We're considering changes to Heimdal's kinit's default behaviors.  We want to make it more useful, less surprising, and more user-friendly.
Final design


kinit

add behavior selection options

--default-for-principal
--search
--unique


the default behavior when none of those new options is given is to honor the -c CACHE/--cache=CACHE/$KRB5CCNAME/configured default cache
if any of those new options is used, then the given cache is only used to identify a collection
all cache types are collections
if --search is given, then search for a cache in the collection identified by the -c CACHE/..., and use it if found, else use the --default-for-principal behavior unless --unique is given
if --default-for-principal is given, the use a cache in the collection identified by the -c CACHE/... with a subsidiary name derived from the name of the principal we're getting credentials for
if --unique is given, use a new, unique cache in the collection identified by the -c CACHE/...
when using the cache identified by the -c CACHE/..., refuse to overwrite it if it has credentials for a different principal
when giving a command to kinit, as always, use a new unique cache, but error out if --default-for-principal or --search are given



klist

add --default-for=principal and --search-for=principal options to klist



kswitch

try krb5_cc_default_for() first when -p principal / --principal=principal is given, then fallback on krb5_cc_match()



Motivation
There are cases when MIT's and Heimdal's kinit (prior to this PR) will honor the -c CACHE/--cache=CACHE/$KRB5CCNAME, and cases where they'll search the user's credentials cache collection, and cases where they will create a ""new unique"" ccache different from what the user might have intended, and other cases where MIT will refuse to write out a ccache while Heimdal will not refuse.

That is a hot mess and terribly confusing UI/UX.  We'd like to make this better.

Another motivation is that ""new unique"" ccache names become garbage that piles up and has to be collected.  This is not a friendly UX.  As well, ""new unique"" ccache names are meaningless but leak into UIs anyways -- another poor UX.
Relatedly, setting KRB5CCNAME or using -c-like options when doing manual identity selection... requires running klist -l to pick a cache name.  But if we name the caches after the principals for which they store credentials, then one can just type, for example, KRB5CCNAME=KCM:${UID}:${USER}@MY.REALM.EXAMPLE ssh somewhere.
So we want to a) make sure that user intent is clear, b) make it easy to name ccaches after principals so it's easy to find the right ccache for each context, and c) provide some safety belt and suspenders.
Background:

Cache collections exist for several reasons:

To support having credentials for multiple different principals.  (In principle a single credentials cache can store tickets for multiple different client principals, but in practice this is not supported by any implementations.)
To use an atomic ""default cache switch"" operation on collections to work around lack of atomic ccache initialization.


In both, MIT and Heimdal, krb5_cc_default() and krb5_cc_default_name() use the value of KRB5CCNAME from the environ if it's set, else a configured default_ccache_name [libdefaults] param, else the compiled-in default ccache for the configured or compiled-in default ccache type.
In Heimdal we have krb5_cc_move() to rename ccaches, and most ccache types in Heimdal support atomic krb5_cc_move()s -- we leave it to the ccache type to get this right, and if not, too bad.
MIT does not appear to have atomic ccache renaming operations.  Neither does the sssd kcm.  Neither does CCAPI.
In Heimdal, every ccache type is a collection type (yes, even FILE!).  Not so in MIT.

Heimdal has a --default-for-principal kinit option in master, and corresponding APIs, for creating a ccache in a given collection but with a cache name derived from the principal name whose credentials will be stored in it -- this makes use of collections user-friendly because the cache names reflect the principal whose credentials they contain.



Proposed UX -- Explicit User Intent


The user must specify intent.  There are only so many behaviors to choose from, so let's have options for all of them, a reasonable default, and let's not deviate from user intent.


By default kinit should operate on the named ccache.  Any alternative requires the use of specific options.  No more ""some cases create a new unique"" cache silently.


Using TYPE: (e.g., KCM:) or equivalent collection names (e.g., KCM:12345 when the process' real UID is 12345) refers to the whole collection and denotes user intent to use specific caches in that collection whose names are derived from those of the client principals that they store credentials for.
When using such a ""whole collection"" ccache name, using kinit to initialize a ccache with some principal's credentials should create a cache with a name based on that principal name (as if --default-for-principal had been given), and should make that the current ccache for the whole collection unless --no-change-default is given.


If the ccache exists and has creds for a different principal than we would be storing creds for, then fail unless other options (--overwrite) alter this understanding.


Proposed new library APIs/behaviors


Make TYPE: a ccache name that refers to a) the whole collection for the user for that cache type, and b) the current default ccache for that collection (e.g., KCM: would be ""the whole collection of caches and the current default ccache in that collection as well, for the real user ID of the current process"").
This is already so for some, but not all ccache types in Heimdal.
This will require a new krb5_cc_ops method, and a corresponding krb5_cc API.


Make every ccache type have and report a specific residual ccache name that also refers to the whole collection and its default (e.g., if the current real UID is 12345 then KCM:12345 would be equivalent to KCM:, while for FILE that would be /tmp/krb5cc_%{UID}).  The ccache types should report this value with tokens unexpanded.


Proposed new kinit behavior
See above.
But what about atomicity?
We get atomicity for free in Heimdal for ccache types that support atomic ccache rename.  However, not all do.
For ccache types that don't support atomic ccache rename, the above proposal will simply mean no atomicity.  We could have kinit act differently for such ccache types, however.
Existing uses of ""new unique then switch"" still have atomicity issues even though the ""switch"" operation is atomic.  The reason is that when users use KRB5CCNAME to pick a specific ccache from their collection to use in some application, when credentials in that cache are near expiration and the user goes to kinit -R them, if the operation to install the new credentials is non-atomic, then there is a race condition anyways.
See also Greg's comment about atomicity.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,950,2022-01-26T05:46:29Z,,2022-04-26T22:54:34Z,OPEN,False,1239,534,41,https://github.com/nicowilliams,Rethinking kinit behavior -- specifying user intent,11,[],https://github.com/heimdal/heimdal/pull/950,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/950#issuecomment-1026385346,"We're considering changes to Heimdal's kinit's default behaviors.  We want to make it more useful, less surprising, and more user-friendly.
Final design


kinit

add behavior selection options

--default-for-principal
--search
--unique


the default behavior when none of those new options is given is to honor the -c CACHE/--cache=CACHE/$KRB5CCNAME/configured default cache
if any of those new options is used, then the given cache is only used to identify a collection
all cache types are collections
if --search is given, then search for a cache in the collection identified by the -c CACHE/..., and use it if found, else use the --default-for-principal behavior unless --unique is given
if --default-for-principal is given, the use a cache in the collection identified by the -c CACHE/... with a subsidiary name derived from the name of the principal we're getting credentials for
if --unique is given, use a new, unique cache in the collection identified by the -c CACHE/...
when using the cache identified by the -c CACHE/..., refuse to overwrite it if it has credentials for a different principal
when giving a command to kinit, as always, use a new unique cache, but error out if --default-for-principal or --search are given



klist

add --default-for=principal and --search-for=principal options to klist



kswitch

try krb5_cc_default_for() first when -p principal / --principal=principal is given, then fallback on krb5_cc_match()



Motivation
There are cases when MIT's and Heimdal's kinit (prior to this PR) will honor the -c CACHE/--cache=CACHE/$KRB5CCNAME, and cases where they'll search the user's credentials cache collection, and cases where they will create a ""new unique"" ccache different from what the user might have intended, and other cases where MIT will refuse to write out a ccache while Heimdal will not refuse.

That is a hot mess and terribly confusing UI/UX.  We'd like to make this better.

Another motivation is that ""new unique"" ccache names become garbage that piles up and has to be collected.  This is not a friendly UX.  As well, ""new unique"" ccache names are meaningless but leak into UIs anyways -- another poor UX.
Relatedly, setting KRB5CCNAME or using -c-like options when doing manual identity selection... requires running klist -l to pick a cache name.  But if we name the caches after the principals for which they store credentials, then one can just type, for example, KRB5CCNAME=KCM:${UID}:${USER}@MY.REALM.EXAMPLE ssh somewhere.
So we want to a) make sure that user intent is clear, b) make it easy to name ccaches after principals so it's easy to find the right ccache for each context, and c) provide some safety belt and suspenders.
Background:

Cache collections exist for several reasons:

To support having credentials for multiple different principals.  (In principle a single credentials cache can store tickets for multiple different client principals, but in practice this is not supported by any implementations.)
To use an atomic ""default cache switch"" operation on collections to work around lack of atomic ccache initialization.


In both, MIT and Heimdal, krb5_cc_default() and krb5_cc_default_name() use the value of KRB5CCNAME from the environ if it's set, else a configured default_ccache_name [libdefaults] param, else the compiled-in default ccache for the configured or compiled-in default ccache type.
In Heimdal we have krb5_cc_move() to rename ccaches, and most ccache types in Heimdal support atomic krb5_cc_move()s -- we leave it to the ccache type to get this right, and if not, too bad.
MIT does not appear to have atomic ccache renaming operations.  Neither does the sssd kcm.  Neither does CCAPI.
In Heimdal, every ccache type is a collection type (yes, even FILE!).  Not so in MIT.

Heimdal has a --default-for-principal kinit option in master, and corresponding APIs, for creating a ccache in a given collection but with a cache name derived from the principal name whose credentials will be stored in it -- this makes use of collections user-friendly because the cache names reflect the principal whose credentials they contain.



Proposed UX -- Explicit User Intent


The user must specify intent.  There are only so many behaviors to choose from, so let's have options for all of them, a reasonable default, and let's not deviate from user intent.


By default kinit should operate on the named ccache.  Any alternative requires the use of specific options.  No more ""some cases create a new unique"" cache silently.


Using TYPE: (e.g., KCM:) or equivalent collection names (e.g., KCM:12345 when the process' real UID is 12345) refers to the whole collection and denotes user intent to use specific caches in that collection whose names are derived from those of the client principals that they store credentials for.
When using such a ""whole collection"" ccache name, using kinit to initialize a ccache with some principal's credentials should create a cache with a name based on that principal name (as if --default-for-principal had been given), and should make that the current ccache for the whole collection unless --no-change-default is given.


If the ccache exists and has creds for a different principal than we would be storing creds for, then fail unless other options (--overwrite) alter this understanding.


Proposed new library APIs/behaviors


Make TYPE: a ccache name that refers to a) the whole collection for the user for that cache type, and b) the current default ccache for that collection (e.g., KCM: would be ""the whole collection of caches and the current default ccache in that collection as well, for the real user ID of the current process"").
This is already so for some, but not all ccache types in Heimdal.
This will require a new krb5_cc_ops method, and a corresponding krb5_cc API.


Make every ccache type have and report a specific residual ccache name that also refers to the whole collection and its default (e.g., if the current real UID is 12345 then KCM:12345 would be equivalent to KCM:, while for FILE that would be /tmp/krb5cc_%{UID}).  The ccache types should report this value with tokens unexpanded.


Proposed new kinit behavior
See above.
But what about atomicity?
We get atomicity for free in Heimdal for ccache types that support atomic ccache rename.  However, not all do.
For ccache types that don't support atomic ccache rename, the above proposal will simply mean no atomicity.  We could have kinit act differently for such ccache types, however.
Existing uses of ""new unique then switch"" still have atomicity issues even though the ""switch"" operation is atomic.  The reason is that when users use KRB5CCNAME to pick a specific ccache from their collection to use in some application, when credentials in that cache are near expiration and the user goes to kinit -R them, if the operation to install the new credentials is non-atomic, then there is a race condition anyways.
See also Greg's comment about atomicity.",The asprintf() issue is probably very common in our tree.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,950,2022-01-26T05:46:29Z,,2022-04-26T22:54:34Z,OPEN,False,1239,534,41,https://github.com/nicowilliams,Rethinking kinit behavior -- specifying user intent,11,[],https://github.com/heimdal/heimdal/pull/950,https://github.com/greghudson,3,https://github.com/heimdal/heimdal/pull/950#issuecomment-1027629074,"We're considering changes to Heimdal's kinit's default behaviors.  We want to make it more useful, less surprising, and more user-friendly.
Final design


kinit

add behavior selection options

--default-for-principal
--search
--unique


the default behavior when none of those new options is given is to honor the -c CACHE/--cache=CACHE/$KRB5CCNAME/configured default cache
if any of those new options is used, then the given cache is only used to identify a collection
all cache types are collections
if --search is given, then search for a cache in the collection identified by the -c CACHE/..., and use it if found, else use the --default-for-principal behavior unless --unique is given
if --default-for-principal is given, the use a cache in the collection identified by the -c CACHE/... with a subsidiary name derived from the name of the principal we're getting credentials for
if --unique is given, use a new, unique cache in the collection identified by the -c CACHE/...
when using the cache identified by the -c CACHE/..., refuse to overwrite it if it has credentials for a different principal
when giving a command to kinit, as always, use a new unique cache, but error out if --default-for-principal or --search are given



klist

add --default-for=principal and --search-for=principal options to klist



kswitch

try krb5_cc_default_for() first when -p principal / --principal=principal is given, then fallback on krb5_cc_match()



Motivation
There are cases when MIT's and Heimdal's kinit (prior to this PR) will honor the -c CACHE/--cache=CACHE/$KRB5CCNAME, and cases where they'll search the user's credentials cache collection, and cases where they will create a ""new unique"" ccache different from what the user might have intended, and other cases where MIT will refuse to write out a ccache while Heimdal will not refuse.

That is a hot mess and terribly confusing UI/UX.  We'd like to make this better.

Another motivation is that ""new unique"" ccache names become garbage that piles up and has to be collected.  This is not a friendly UX.  As well, ""new unique"" ccache names are meaningless but leak into UIs anyways -- another poor UX.
Relatedly, setting KRB5CCNAME or using -c-like options when doing manual identity selection... requires running klist -l to pick a cache name.  But if we name the caches after the principals for which they store credentials, then one can just type, for example, KRB5CCNAME=KCM:${UID}:${USER}@MY.REALM.EXAMPLE ssh somewhere.
So we want to a) make sure that user intent is clear, b) make it easy to name ccaches after principals so it's easy to find the right ccache for each context, and c) provide some safety belt and suspenders.
Background:

Cache collections exist for several reasons:

To support having credentials for multiple different principals.  (In principle a single credentials cache can store tickets for multiple different client principals, but in practice this is not supported by any implementations.)
To use an atomic ""default cache switch"" operation on collections to work around lack of atomic ccache initialization.


In both, MIT and Heimdal, krb5_cc_default() and krb5_cc_default_name() use the value of KRB5CCNAME from the environ if it's set, else a configured default_ccache_name [libdefaults] param, else the compiled-in default ccache for the configured or compiled-in default ccache type.
In Heimdal we have krb5_cc_move() to rename ccaches, and most ccache types in Heimdal support atomic krb5_cc_move()s -- we leave it to the ccache type to get this right, and if not, too bad.
MIT does not appear to have atomic ccache renaming operations.  Neither does the sssd kcm.  Neither does CCAPI.
In Heimdal, every ccache type is a collection type (yes, even FILE!).  Not so in MIT.

Heimdal has a --default-for-principal kinit option in master, and corresponding APIs, for creating a ccache in a given collection but with a cache name derived from the principal name whose credentials will be stored in it -- this makes use of collections user-friendly because the cache names reflect the principal whose credentials they contain.



Proposed UX -- Explicit User Intent


The user must specify intent.  There are only so many behaviors to choose from, so let's have options for all of them, a reasonable default, and let's not deviate from user intent.


By default kinit should operate on the named ccache.  Any alternative requires the use of specific options.  No more ""some cases create a new unique"" cache silently.


Using TYPE: (e.g., KCM:) or equivalent collection names (e.g., KCM:12345 when the process' real UID is 12345) refers to the whole collection and denotes user intent to use specific caches in that collection whose names are derived from those of the client principals that they store credentials for.
When using such a ""whole collection"" ccache name, using kinit to initialize a ccache with some principal's credentials should create a cache with a name based on that principal name (as if --default-for-principal had been given), and should make that the current ccache for the whole collection unless --no-change-default is given.


If the ccache exists and has creds for a different principal than we would be storing creds for, then fail unless other options (--overwrite) alter this understanding.


Proposed new library APIs/behaviors


Make TYPE: a ccache name that refers to a) the whole collection for the user for that cache type, and b) the current default ccache for that collection (e.g., KCM: would be ""the whole collection of caches and the current default ccache in that collection as well, for the real user ID of the current process"").
This is already so for some, but not all ccache types in Heimdal.
This will require a new krb5_cc_ops method, and a corresponding krb5_cc API.


Make every ccache type have and report a specific residual ccache name that also refers to the whole collection and its default (e.g., if the current real UID is 12345 then KCM:12345 would be equivalent to KCM:, while for FILE that would be /tmp/krb5cc_%{UID}).  The ccache types should report this value with tokens unexpanded.


Proposed new kinit behavior
See above.
But what about atomicity?
We get atomicity for free in Heimdal for ccache types that support atomic ccache rename.  However, not all do.
For ccache types that don't support atomic ccache rename, the above proposal will simply mean no atomicity.  We could have kinit act differently for such ccache types, however.
Existing uses of ""new unique then switch"" still have atomicity issues even though the ""switch"" operation is atomic.  The reason is that when users use KRB5CCNAME to pick a specific ccache from their collection to use in some application, when credentials in that cache are near expiration and the user goes to kinit -R them, if the operation to install the new credentials is non-atomic, then there is a race condition anyways.
See also Greg's comment about atomicity.","MIT does not appear to have atomic ccache renaming operations. Neither does the sssd kcm. Neither does CCAPI.

We do as of commit 371f09d4bf4ca0c7ba15c5ef909bc35307ed9cc3, for FILE, DIR, MEMORY, and KCM if the daemon supports it (but none of them do yet, as far as I know).",True,{'ROCKET': ['https://github.com/nicowilliams']}
heimdal/heimdal,https://github.com/heimdal/heimdal,951,2022-01-28T20:55:20Z,2022-01-28T23:24:58Z,2022-01-28T23:25:10Z,MERGED,True,221,130,30,https://github.com/lhoward,remove base dependency from libasn1,4,['bug'],https://github.com/heimdal/heimdal/pull/951,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/951,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,951,2022-01-28T20:55:20Z,2022-01-28T23:24:58Z,2022-01-28T23:25:10Z,MERGED,True,221,130,30,https://github.com/lhoward,remove base dependency from libasn1,4,['bug'],https://github.com/heimdal/heimdal/pull/951,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/951#issuecomment-1024738007,,Thanks so much for this!,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,952,2022-01-28T23:29:55Z,2022-01-30T19:20:05Z,2022-01-30T20:57:38Z,MERGED,True,0,24,7,https://github.com/lhoward,gss: remove gss_get_instance(),1,[],https://github.com/heimdal/heimdal/pull/952,https://github.com/lhoward,1,https://github.com/heimdal/heimdal/pull/952,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,952,2022-01-28T23:29:55Z,2022-01-30T19:20:05Z,2022-01-30T20:57:38Z,MERGED,True,0,24,7,https://github.com/lhoward,gss: remove gss_get_instance(),1,[],https://github.com/heimdal/heimdal/pull/952,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/952#issuecomment-1025229558,,Thanks.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,955,2022-02-10T17:53:21Z,2022-02-10T18:58:51Z,2022-02-10T19:49:27Z,MERGED,True,34,35,8,https://github.com/jaltman,roken: do not override system network address functions,1,[],https://github.com/heimdal/heimdal/pull/955,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/955,"Roken functions rk_copyhostent(), rk_freeaddrinfo(), rk_freehostent()
rk_getaddrinfo(), rk_getipnodebyaddr(),  rk_getipnodebyname(), and
rk_getnameinfo() should never be built without the ""rk_"" prefix.
Doing so overrides the system provided functions of the same name
when they exist.","Roken functions rk_copyhostent(), rk_freeaddrinfo(), rk_freehostent()
rk_getaddrinfo(), rk_getipnodebyaddr(),  rk_getipnodebyname(), and
rk_getnameinfo() should never be built without the ""rk_"" prefix.
Doing so overrides the system provided functions of the same name
when they exist.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,957,2022-02-11T21:21:53Z,,2022-02-12T05:07:42Z,OPEN,False,628,40,15,https://github.com/nicowilliams,kadm5: Add exec_hook built-in `kadm5` hook plugin,5,[],https://github.com/heimdal/heimdal/pull/957,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/957,"You can now have [kadmin] exec_hook = path-to-program in krb5.conf and kadmin -l, kadmind, and httpkadmind, and any user of libkadm5srv will end up executing that hook.
That will execute the hook program for every kadm5 operation.  This is done via a built-in exec hook plugin for the kadm5 plugin interface.
Exiting with an error during a pre-commit execution of the hook will prevent the operation from being committed.
For password changes via kadmin, this can also be used as a separate password quality check hook, though this hook can only stop the change but without any explanation.","You can now have [kadmin] exec_hook = path-to-program in krb5.conf and kadmin -l, kadmind, and httpkadmind, and any user of libkadm5srv will end up executing that hook.
That will execute the hook program for every kadm5 operation.  This is done via a built-in exec hook plugin for the kadm5 plugin interface.
Exiting with an error during a pre-commit execution of the hook will prevent the operation from being committed.
For password changes via kadmin, this can also be used as a separate password quality check hook, though this hook can only stop the change but without any explanation.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,958,2022-02-15T22:53:29Z,,2022-02-15T22:53:29Z,OPEN,False,111,26,7,https://github.com/elric1,Ntlm fixes,3,[],https://github.com/heimdal/heimdal/pull/958,https://github.com/elric1,1,https://github.com/heimdal/heimdal/pull/958,The separate commits explained in their commit message.,The separate commits explained in their commit message.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,959,2022-02-15T23:02:12Z,2022-02-16T02:23:55Z,2022-02-16T05:47:41Z,MERGED,True,324,19,7,https://github.com/nicowilliams,"Fix handling of ""unlimited"" principal ticket max life / max renewable life",7,[],https://github.com/heimdal/heimdal/pull/959,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/959,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,963,2022-03-02T08:30:27Z,2022-03-02T22:55:59Z,2022-03-03T18:44:46Z,CLOSED,False,2,1,2,https://github.com/metze-samba,Introduce HDB_F_FOR_S4U2SELF,2,[],https://github.com/heimdal/heimdal/pull/963,https://github.com/metze-samba,1,https://github.com/heimdal/heimdal/pull/963,"The will be used to allow the addition of special SIDS into the
PAC:
- SID_AUTHENTICATION_AUTHORITY_ASSERTED_IDENTITY (S-1-18-1):

  This is added during the AS-REQ/AS-REP exchange after
  pre-authentication was successful.

- SID_SERVICE_ASSERTED_IDENTITY (S-1-18-2):
  This is added during S4U2Self PAC creation.
  It won't replace a possible
  SID_AUTHENTICATION_AUTHORITY_ASSERTED_IDENTITY
  during S4U2Proxy.","The will be used to allow the addition of special SIDS into the
PAC:
- SID_AUTHENTICATION_AUTHORITY_ASSERTED_IDENTITY (S-1-18-1):

  This is added during the AS-REQ/AS-REP exchange after
  pre-authentication was successful.

- SID_SERVICE_ASSERTED_IDENTITY (S-1-18-2):
  This is added during S4U2Self PAC creation.
  It won't replace a possible
  SID_AUTHENTICATION_AUTHORITY_ASSERTED_IDENTITY
  during S4U2Proxy.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,963,2022-03-02T08:30:27Z,2022-03-02T22:55:59Z,2022-03-03T18:44:46Z,CLOSED,False,2,1,2,https://github.com/metze-samba,Introduce HDB_F_FOR_S4U2SELF,2,[],https://github.com/heimdal/heimdal/pull/963,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/963#issuecomment-1056801957,"The will be used to allow the addition of special SIDS into the
PAC:
- SID_AUTHENTICATION_AUTHORITY_ASSERTED_IDENTITY (S-1-18-1):

  This is added during the AS-REQ/AS-REP exchange after
  pre-authentication was successful.

- SID_SERVICE_ASSERTED_IDENTITY (S-1-18-2):
  This is added during S4U2Self PAC creation.
  It won't replace a possible
  SID_AUTHENTICATION_AUTHORITY_ASSERTED_IDENTITY
  during S4U2Proxy.","Not opposed, but can it be determined by the plug-in interrogating the request for S4U2Self PA data?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,963,2022-03-02T08:30:27Z,2022-03-02T22:55:59Z,2022-03-03T18:44:46Z,CLOSED,False,2,1,2,https://github.com/metze-samba,Introduce HDB_F_FOR_S4U2SELF,2,[],https://github.com/heimdal/heimdal/pull/963,https://github.com/lhoward,3,https://github.com/heimdal/heimdal/pull/963#issuecomment-1056802818,"The will be used to allow the addition of special SIDS into the
PAC:
- SID_AUTHENTICATION_AUTHORITY_ASSERTED_IDENTITY (S-1-18-1):

  This is added during the AS-REQ/AS-REP exchange after
  pre-authentication was successful.

- SID_SERVICE_ASSERTED_IDENTITY (S-1-18-2):
  This is added during S4U2Self PAC creation.
  It won't replace a possible
  SID_AUTHENTICATION_AUTHORITY_ASSERTED_IDENTITY
  during S4U2Proxy.",Also I’d remove FOR from the macro name.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,963,2022-03-02T08:30:27Z,2022-03-02T22:55:59Z,2022-03-03T18:44:46Z,CLOSED,False,2,1,2,https://github.com/metze-samba,Introduce HDB_F_FOR_S4U2SELF,2,[],https://github.com/heimdal/heimdal/pull/963,https://github.com/lhoward,4,https://github.com/heimdal/heimdal/pull/963#issuecomment-1057475085,"The will be used to allow the addition of special SIDS into the
PAC:
- SID_AUTHENTICATION_AUTHORITY_ASSERTED_IDENTITY (S-1-18-1):

  This is added during the AS-REQ/AS-REP exchange after
  pre-authentication was successful.

- SID_SERVICE_ASSERTED_IDENTITY (S-1-18-2):
  This is added during S4U2Self PAC creation.
  It won't replace a possible
  SID_AUTHENTICATION_AUTHORITY_ASSERTED_IDENTITY
  during S4U2Proxy.","I think it should be fine to call kdc_request_get_req() and then krb5_find_padata(KRB5_PADATA_FOR_USER) as there are no successful paths where KRB5_PADATA_FOR_USER is present and S4U2Self is not performed. Closing for now, please reopen if you disagree.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,963,2022-03-02T08:30:27Z,2022-03-02T22:55:59Z,2022-03-03T18:44:46Z,CLOSED,False,2,1,2,https://github.com/metze-samba,Introduce HDB_F_FOR_S4U2SELF,2,[],https://github.com/heimdal/heimdal/pull/963,https://github.com/metze-samba,5,https://github.com/heimdal/heimdal/pull/963#issuecomment-1058371300,"The will be used to allow the addition of special SIDS into the
PAC:
- SID_AUTHENTICATION_AUTHORITY_ASSERTED_IDENTITY (S-1-18-1):

  This is added during the AS-REQ/AS-REP exchange after
  pre-authentication was successful.

- SID_SERVICE_ASSERTED_IDENTITY (S-1-18-2):
  This is added during S4U2Self PAC creation.
  It won't replace a possible
  SID_AUTHENTICATION_AUTHORITY_ASSERTED_IDENTITY
  during S4U2Proxy.","I think it should be fine to call kdc_request_get_req() and then krb5_find_padata(KRB5_PADATA_FOR_USER) as there are no successful paths where KRB5_PADATA_FOR_USER is present and S4U2Self is not performed. Closing for now, please reopen if you disagree.

Yes, that's fine for now, when we add support for the new style PA-S4U-X509-USER S4U2Self version,
but I guess then we could have a 'bool kdc_request_get_s4u2self_used()' for easy access.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,964,2022-03-02T08:38:58Z,2022-03-02T23:10:43Z,2022-03-02T23:10:43Z,CLOSED,False,21,4,2,https://github.com/metze-samba,"allow _kdc_audit_request() to return an error, e.g. HDB_ERR_NOT_FOUND_HERE",2,[],https://github.com/heimdal/heimdal/pull/964,https://github.com/metze-samba,1,https://github.com/heimdal/heimdal/pull/964,"This is (at least) required to trigger HDB_ERR_NOT_FOUND_HERE on
pre-authentication failures on an RODC.
Read-Only DC's need to pass failing pre-authentications to a Read-Write DC

BUG: https://bugzilla.samba.org/show_bug.cgi?id=14865","This is (at least) required to trigger HDB_ERR_NOT_FOUND_HERE on
pre-authentication failures on an RODC.
Read-Only DC's need to pass failing pre-authentications to a Read-Write DC

BUG: https://bugzilla.samba.org/show_bug.cgi?id=14865",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,964,2022-03-02T08:38:58Z,2022-03-02T23:10:43Z,2022-03-02T23:10:43Z,CLOSED,False,21,4,2,https://github.com/metze-samba,"allow _kdc_audit_request() to return an error, e.g. HDB_ERR_NOT_FOUND_HERE",2,[],https://github.com/heimdal/heimdal/pull/964,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/964#issuecomment-1056584415,"This is (at least) required to trigger HDB_ERR_NOT_FOUND_HERE on
pre-authentication failures on an RODC.
Read-Only DC's need to pass failing pre-authentications to a Read-Write DC

BUG: https://bugzilla.samba.org/show_bug.cgi?id=14865","Hmm, this wasn’t really the intent of the audit API but I’ll investigate the right way to do this :)",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,964,2022-03-02T08:38:58Z,2022-03-02T23:10:43Z,2022-03-02T23:10:43Z,CLOSED,False,21,4,2,https://github.com/metze-samba,"allow _kdc_audit_request() to return an error, e.g. HDB_ERR_NOT_FOUND_HERE",2,[],https://github.com/heimdal/heimdal/pull/964,https://github.com/lhoward,3,https://github.com/heimdal/heimdal/pull/964#issuecomment-1056585827,"This is (at least) required to trigger HDB_ERR_NOT_FOUND_HERE on
pre-authentication failures on an RODC.
Read-Only DC's need to pass failing pre-authentications to a Read-Write DC

BUG: https://bugzilla.samba.org/show_bug.cgi?id=14865",Can you update the error code using an accessor?,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,964,2022-03-02T08:38:58Z,2022-03-02T23:10:43Z,2022-03-02T23:10:43Z,CLOSED,False,21,4,2,https://github.com/metze-samba,"allow _kdc_audit_request() to return an error, e.g. HDB_ERR_NOT_FOUND_HERE",2,[],https://github.com/heimdal/heimdal/pull/964,https://github.com/metze-samba,4,https://github.com/heimdal/heimdal/pull/964#issuecomment-1056623831,"This is (at least) required to trigger HDB_ERR_NOT_FOUND_HERE on
pre-authentication failures on an RODC.
Read-Only DC's need to pass failing pre-authentications to a Read-Write DC

BUG: https://bugzilla.samba.org/show_bug.cgi?id=14865","Hmm, this wasn’t really the intent of the audit API but I’ll investigate the right way to do this :)

But was it intended to ignore the return value completely?
Things could fail for other reasons and I think they should also result in an
error for the client.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,964,2022-03-02T08:38:58Z,2022-03-02T23:10:43Z,2022-03-02T23:10:43Z,CLOSED,False,21,4,2,https://github.com/metze-samba,"allow _kdc_audit_request() to return an error, e.g. HDB_ERR_NOT_FOUND_HERE",2,[],https://github.com/heimdal/heimdal/pull/964,https://github.com/metze-samba,5,https://github.com/heimdal/heimdal/pull/964#issuecomment-1056629346,"This is (at least) required to trigger HDB_ERR_NOT_FOUND_HERE on
pre-authentication failures on an RODC.
Read-Only DC's need to pass failing pre-authentications to a Read-Write DC

BUG: https://bugzilla.samba.org/show_bug.cgi?id=14865","Can you update the error code using an accessor?

We still use the hdb audit hook, but with the new kdc audit it might be possible.
But then the code has to look like this:
r->error_code = ret;
_kdc_audit_request(r);
ret = r->error_code;

Which also looks strange.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,964,2022-03-02T08:38:58Z,2022-03-02T23:10:43Z,2022-03-02T23:10:43Z,CLOSED,False,21,4,2,https://github.com/metze-samba,"allow _kdc_audit_request() to return an error, e.g. HDB_ERR_NOT_FOUND_HERE",2,[],https://github.com/heimdal/heimdal/pull/964,https://github.com/abartlet,6,https://github.com/heimdal/heimdal/pull/964#issuecomment-1056633677,"This is (at least) required to trigger HDB_ERR_NOT_FOUND_HERE on
pre-authentication failures on an RODC.
Read-Only DC's need to pass failing pre-authentications to a Read-Write DC

BUG: https://bugzilla.samba.org/show_bug.cgi?id=14865","The thing to remember is that the strange HDB_ERR_NOT_FOUND_HERE is an
error return to the caller of the KDC function, not an error return to
the client.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,964,2022-03-02T08:38:58Z,2022-03-02T23:10:43Z,2022-03-02T23:10:43Z,CLOSED,False,21,4,2,https://github.com/metze-samba,"allow _kdc_audit_request() to return an error, e.g. HDB_ERR_NOT_FOUND_HERE",2,[],https://github.com/heimdal/heimdal/pull/964,https://github.com/lhoward,7,https://github.com/heimdal/heimdal/pull/964#issuecomment-1056805424,"This is (at least) required to trigger HDB_ERR_NOT_FOUND_HERE on
pre-authentication failures on an RODC.
Read-Only DC's need to pass failing pre-authentications to a Read-Write DC

BUG: https://bugzilla.samba.org/show_bug.cgi?id=14865","OK, will look into properly once back at desk.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,965,2022-03-02T08:51:35Z,,2022-03-12T03:05:48Z,OPEN,False,2,0,1,https://github.com/metze-samba,kdc: add missing enctype = p[i] assignments to _kdc_find_etype(),1,['bug'],https://github.com/heimdal/heimdal/pull/965,https://github.com/metze-samba,1,https://github.com/heimdal/heimdal/pull/965,"This is needed when a service provides support for newer entry.etypes
without having a key for that encryption type yet.
It is triggered by svc_use_strongest_session_key=TRUE","This is needed when a service provides support for newer entry.etypes
without having a key for that encryption type yet.
It is triggered by svc_use_strongest_session_key=TRUE",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,965,2022-03-02T08:51:35Z,,2022-03-12T03:05:48Z,OPEN,False,2,0,1,https://github.com/metze-samba,kdc: add missing enctype = p[i] assignments to _kdc_find_etype(),1,['bug'],https://github.com/heimdal/heimdal/pull/965,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/965#issuecomment-1056826316,"This is needed when a service provides support for newer entry.etypes
without having a key for that encryption type yet.
It is triggered by svc_use_strongest_session_key=TRUE",This is one for @nicowilliams,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,965,2022-03-02T08:51:35Z,,2022-03-12T03:05:48Z,OPEN,False,2,0,1,https://github.com/metze-samba,kdc: add missing enctype = p[i] assignments to _kdc_find_etype(),1,['bug'],https://github.com/heimdal/heimdal/pull/965,https://github.com/metze-samba,3,https://github.com/heimdal/heimdal/pull/965#issuecomment-1058655322,"This is needed when a service provides support for newer entry.etypes
without having a key for that encryption type yet.
It is triggered by svc_use_strongest_session_key=TRUE",@lhoward I think this should be labled as bug,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,966,2022-03-02T09:13:13Z,2022-03-02T22:58:48Z,2022-03-02T22:58:49Z,MERGED,True,24,31,6,https://github.com/metze-samba,kdc-plugin: also pass astgs_request_t to the pac related functions,1,[],https://github.com/heimdal/heimdal/pull/966,https://github.com/metze-samba,1,https://github.com/heimdal/heimdal/pull/966,This is more consistent and allows the pac hooks to be more flexible.,This is more consistent and allows the pac hooks to be more flexible.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,967,2022-03-02T09:24:36Z,2022-03-02T23:10:29Z,2022-03-02T23:10:29Z,MERGED,True,51,4,6,https://github.com/metze-samba,"kdc: provide kdc_request_get_explicit_armor_{clientdb,client,pac}()",1,[],https://github.com/heimdal/heimdal/pull/967,https://github.com/metze-samba,1,https://github.com/heimdal/heimdal/pull/967,"_kdc_fast_check_armor_pac() already checks the PAC of the armor,
but it should also remember it if it's an TGS-REQ with explicit armor.
This will allow the kdc pac hooks to generate a compound identity PAC
with PAC_TYPE_DEVICE_INFO.","_kdc_fast_check_armor_pac() already checks the PAC of the armor,
but it should also remember it if it's an TGS-REQ with explicit armor.
This will allow the kdc pac hooks to generate a compound identity PAC
with PAC_TYPE_DEVICE_INFO.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,967,2022-03-02T09:24:36Z,2022-03-02T23:10:29Z,2022-03-02T23:10:29Z,MERGED,True,51,4,6,https://github.com/metze-samba,"kdc: provide kdc_request_get_explicit_armor_{clientdb,client,pac}()",1,[],https://github.com/heimdal/heimdal/pull/967,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/967#issuecomment-1057481562,"_kdc_fast_check_armor_pac() already checks the PAC of the armor,
but it should also remember it if it's an TGS-REQ with explicit armor.
This will allow the kdc pac hooks to generate a compound identity PAC
with PAC_TYPE_DEVICE_INFO.","Will merge but please take care to update export lists, use bitfields instead of booleans if containing structure uses them, and replace existing local boolean variables with context ones if supplanted.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,968,2022-03-02T09:48:08Z,2022-03-02T23:13:42Z,2022-03-03T18:13:29Z,MERGED,True,57,1,2,https://github.com/metze-samba,krb5: add new values and definitions from MS-KILE/MS-SFU,1,[],https://github.com/heimdal/heimdal/pull/968,https://github.com/metze-samba,1,https://github.com/heimdal/heimdal/pull/968,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,968,2022-03-02T09:48:08Z,2022-03-02T23:13:42Z,2022-03-03T18:13:29Z,MERGED,True,57,1,2,https://github.com/metze-samba,krb5: add new values and definitions from MS-KILE/MS-SFU,1,[],https://github.com/heimdal/heimdal/pull/968,https://github.com/jaltman,2,https://github.com/heimdal/heimdal/pull/968#issuecomment-1058275193,,@metze-samba When new ASN1 types are added the Windows function export list must be updated.    Fixed by 19b337a,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,968,2022-03-02T09:48:08Z,2022-03-02T23:13:42Z,2022-03-03T18:13:29Z,MERGED,True,57,1,2,https://github.com/metze-samba,krb5: add new values and definitions from MS-KILE/MS-SFU,1,[],https://github.com/heimdal/heimdal/pull/968,https://github.com/metze-samba,3,https://github.com/heimdal/heimdal/pull/968#issuecomment-1058331083,,"@metze-samba When new ASN1 types are added the Windows function export list must be updated. Fixed by 19b337a

@jaltman sorry!
It would actually be great if someone could fix the Windows ci run...",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,969,2022-03-02T09:58:24Z,2022-03-02T23:10:57Z,2022-03-02T23:13:11Z,MERGED,True,4,3,1,https://github.com/metze-samba,lib/krb5: re-allow data->length == 0 in krb5_pac_add_buffer(),1,['feature request'],https://github.com/heimdal/heimdal/pull/969,https://github.com/metze-samba,1,https://github.com/heimdal/heimdal/pull/969,"PAC_TYPE_CLIENT_CLAIMS_INFO and PAC_TYPE_DEVICE_CLAIMS_INFO are
of zero length unless any claims are actually defined.","PAC_TYPE_CLIENT_CLAIMS_INFO and PAC_TYPE_DEVICE_CLAIMS_INFO are
of zero length unless any claims are actually defined.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,969,2022-03-02T09:58:24Z,2022-03-02T23:10:57Z,2022-03-02T23:13:11Z,MERGED,True,4,3,1,https://github.com/metze-samba,lib/krb5: re-allow data->length == 0 in krb5_pac_add_buffer(),1,['feature request'],https://github.com/heimdal/heimdal/pull/969,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/969#issuecomment-1057484680,"PAC_TYPE_CLIENT_CLAIMS_INFO and PAC_TYPE_DEVICE_CLAIMS_INFO are
of zero length unless any claims are actually defined.","Accidentally merged, but reverted and fixed properly in 50fb794.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,970,2022-03-03T14:04:17Z,,2022-03-04T23:54:52Z,OPEN,False,364,127,2,https://github.com/metze-samba,Introduce KDC_AUTH_EVENT_HISTORIC_LONG_TERM_KEY,7,['feature request'],https://github.com/heimdal/heimdal/pull/970,https://github.com/metze-samba,1,https://github.com/heimdal/heimdal/pull/970,"In Samba we need to avoid incrementing badPwdCount if pre-authentication
fails using a password from the password history of a user.
See https://bugzilla.samba.org/show_bug.cgi?id=14054","In Samba we need to avoid incrementing badPwdCount if pre-authentication
fails using a password from the password history of a user.
See https://bugzilla.samba.org/show_bug.cgi?id=14054",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,970,2022-03-03T14:04:17Z,,2022-03-04T23:54:52Z,OPEN,False,364,127,2,https://github.com/metze-samba,Introduce KDC_AUTH_EVENT_HISTORIC_LONG_TERM_KEY,7,['feature request'],https://github.com/heimdal/heimdal/pull/970,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/970#issuecomment-1058581652,"In Samba we need to avoid incrementing badPwdCount if pre-authentication
fails using a password from the password history of a user.
See https://bugzilla.samba.org/show_bug.cgi?id=14054","Looks good in principle although I do not have time to review it now, so @nicowilliams or @jaltman will have to.
I didn't look too closely so this may not be an issue, but please try to maintain existing logging statement syntax, to avoid breaking third-party tools that parse logs.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,970,2022-03-03T14:04:17Z,,2022-03-04T23:54:52Z,OPEN,False,364,127,2,https://github.com/metze-samba,Introduce KDC_AUTH_EVENT_HISTORIC_LONG_TERM_KEY,7,['feature request'],https://github.com/heimdal/heimdal/pull/970,https://github.com/metze-samba,3,https://github.com/heimdal/heimdal/pull/970#issuecomment-1058599685,"In Samba we need to avoid incrementing badPwdCount if pre-authentication
fails using a password from the password history of a user.
See https://bugzilla.samba.org/show_bug.cgi?id=14054","Looks good in principle although I do not have time to review it now, so @nicowilliams or @jaltman will have to.
I didn't look too closely so this may not be an issue, but please try to maintain existing logging statement syntax, to avoid breaking third-party tools that parse logs.

If it's critical we can keep the output as is, but I thought it would good to print the kvno that failed and a possible
historic kvno that worked, but I can remove that and add some details using kdc_audit_setkv_number
which can be consumed by an audit plugin.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,970,2022-03-03T14:04:17Z,,2022-03-04T23:54:52Z,OPEN,False,364,127,2,https://github.com/metze-samba,Introduce KDC_AUTH_EVENT_HISTORIC_LONG_TERM_KEY,7,['feature request'],https://github.com/heimdal/heimdal/pull/970,https://github.com/metze-samba,4,https://github.com/heimdal/heimdal/pull/970#issuecomment-1058622476,"In Samba we need to avoid incrementing badPwdCount if pre-authentication
fails using a password from the password history of a user.
See https://bugzilla.samba.org/show_bug.cgi?id=14054","Looks good in principle although I do not have time to review it now, so @nicowilliams or @jaltman will have to.
I didn't look too closely so this may not be an issue, but please try to maintain existing logging statement syntax, to avoid breaking third-party tools that parse logs.

If it's critical we can keep the output as is, but I thought it would good to print the kvno that failed and a possible historic kvno that worked, but I can remove that and add some details using kdc_audit_setkv_number which can be consumed by an audit plugin.

Should I add these?:
+#define KDC_REQUEST_KV_PA_SUCCESS_KVNO         ""pa-sucess-kvno""        /* heim_number_t /
+#define KDC_REQUEST_KV_PA_FAILED_KVNO          ""pa-failed-kvno""        / heim_number_t /
+#define KDC_REQUEST_KV_PA_HISTORIC_KVNO                ""pa-historic-kvno""      / heim_number_t */
KDC_REQUEST_KV_PA_HISTORIC_KVNO would always also have
KDC_REQUEST_KV_PA_FAILED_KVNO",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,970,2022-03-03T14:04:17Z,,2022-03-04T23:54:52Z,OPEN,False,364,127,2,https://github.com/metze-samba,Introduce KDC_AUTH_EVENT_HISTORIC_LONG_TERM_KEY,7,['feature request'],https://github.com/heimdal/heimdal/pull/970,https://github.com/lhoward,5,https://github.com/heimdal/heimdal/pull/970#issuecomment-1058646375,"In Samba we need to avoid incrementing badPwdCount if pre-authentication
fails using a password from the password history of a user.
See https://bugzilla.samba.org/show_bug.cgi?id=14054","Yes, this is a better approach. Suggest the following symbolic names:
#define KDC_REQUEST_KV_PA_SUCCEEDED_KVNO ""pa-succeeded-kvno"" /* heim_number_t */
#define KDC_REQUEST_KV_PA_FAILED_KVNO ""pa-failed-kvno"" /* heim_number_t */
#define KDC_REQUEST_KV_PA_HISTORIC_KVNO ""pa-historic-kvno"" /* heim_number_t */
Please match indentation to kdc-audit.h.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,970,2022-03-03T14:04:17Z,,2022-03-04T23:54:52Z,OPEN,False,364,127,2,https://github.com/metze-samba,Introduce KDC_AUTH_EVENT_HISTORIC_LONG_TERM_KEY,7,['feature request'],https://github.com/heimdal/heimdal/pull/970,https://github.com/metze-samba,6,https://github.com/heimdal/heimdal/pull/970#issuecomment-1058657760,"In Samba we need to avoid incrementing badPwdCount if pre-authentication
fails using a password from the password history of a user.
See https://bugzilla.samba.org/show_bug.cgi?id=14054","Yes, this is a better approach. Suggest the following symbolic names:
#define KDC_REQUEST_KV_PA_SUCCEEDED_KVNO ""pa-succeeded-kvno"" /* heim_number_t */
#define KDC_REQUEST_KV_PA_FAILED_KVNO ""pa-failed-kvno"" /* heim_number_t */
#define KDC_REQUEST_KV_PA_HISTORIC_KVNO ""pa-historic-kvno"" /* heim_number_t */

Thanks I'll take them.

Please match indentation to kdc-audit.h.

Sure it's always broken within the browser...",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,971,2022-03-03T14:38:45Z,,2022-03-03T14:38:45Z,OPEN,False,34,35,8,https://github.com/jaltman,roken: do not override system network address functions,1,[],https://github.com/heimdal/heimdal/pull/971,https://github.com/jaltman,1,https://github.com/heimdal/heimdal/pull/971,"Roken functions rk_copyhostent(), rk_freeaddrinfo(), rk_freehostent()
rk_getaddrinfo(), rk_getipnodebyaddr(),  rk_getipnodebyname(), and
rk_getnameinfo() should never be built without the ""rk_"" prefix.  Doing
so overrides the system provided functions of the same name when they
exist.
(cherry picked from commit 7b3a993)","Roken functions rk_copyhostent(), rk_freeaddrinfo(), rk_freehostent()
rk_getaddrinfo(), rk_getipnodebyaddr(),  rk_getipnodebyname(), and
rk_getnameinfo() should never be built without the ""rk_"" prefix.  Doing
so overrides the system provided functions of the same name when they
exist.
(cherry picked from commit 7b3a993)",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,972,2022-03-03T17:58:17Z,,2022-03-05T00:26:12Z,OPEN,False,51,61,3,https://github.com/metze-samba,Make krb5_init_creds_step() usable at all and match the MIT version of it,13,['refactor'],https://github.com/heimdal/heimdal/pull/972,https://github.com/metze-samba,1,https://github.com/heimdal/heimdal/pull/972,"NOTE: commit 1cdc9d5f3cff0288846c29c35ee91b6056a2e2bb
""krb5: export krb5_init_creds_step()"" exported
krb5_init_creds_step() the first time, but that's
not in any released version, so it should be fine
to fix up the prototype in order to make the
function actually useful for external callers.

All the ""lib/krb5: remove unused krb5_krbhst_info argument of"" commits are
not strictly required, but they show that the last commit
""lib/krb5: remove dead code from pk_verify_host()""
actually removed dead code. If the logic
in pk_verify_host() should be kept,
a krb5_krbhst_info should be passed in though any useful
way, but passing it to krb5_init_creds_step() is clearly not
the correct way. Maybe a new krb5_init_creds_set_*() function.","NOTE: commit 1cdc9d5f3cff0288846c29c35ee91b6056a2e2bb
""krb5: export krb5_init_creds_step()"" exported
krb5_init_creds_step() the first time, but that's
not in any released version, so it should be fine
to fix up the prototype in order to make the
function actually useful for external callers.

All the ""lib/krb5: remove unused krb5_krbhst_info argument of"" commits are
not strictly required, but they show that the last commit
""lib/krb5: remove dead code from pk_verify_host()""
actually removed dead code. If the logic
in pk_verify_host() should be kept,
a krb5_krbhst_info should be passed in though any useful
way, but passing it to krb5_init_creds_step() is clearly not
the correct way. Maybe a new krb5_init_creds_set_*() function.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,972,2022-03-03T17:58:17Z,,2022-03-05T00:26:12Z,OPEN,False,51,61,3,https://github.com/metze-samba,Make krb5_init_creds_step() usable at all and match the MIT version of it,13,['refactor'],https://github.com/heimdal/heimdal/pull/972,https://github.com/metze-samba,2,https://github.com/heimdal/heimdal/pull/972#issuecomment-1059612215,"NOTE: commit 1cdc9d5f3cff0288846c29c35ee91b6056a2e2bb
""krb5: export krb5_init_creds_step()"" exported
krb5_init_creds_step() the first time, but that's
not in any released version, so it should be fine
to fix up the prototype in order to make the
function actually useful for external callers.

All the ""lib/krb5: remove unused krb5_krbhst_info argument of"" commits are
not strictly required, but they show that the last commit
""lib/krb5: remove dead code from pk_verify_host()""
actually removed dead code. If the logic
in pk_verify_host() should be kept,
a krb5_krbhst_info should be passed in though any useful
way, but passing it to krb5_init_creds_step() is clearly not
the correct way. Maybe a new krb5_init_creds_set_*() function.","@lhoward can we at least revert commit 1cdc9d5 for now,
so that krb5_init_creds_step() doesn't get any external users with the broken prototype?",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,972,2022-03-03T17:58:17Z,,2022-03-05T00:26:12Z,OPEN,False,51,61,3,https://github.com/metze-samba,Make krb5_init_creds_step() usable at all and match the MIT version of it,13,['refactor'],https://github.com/heimdal/heimdal/pull/972,https://github.com/lhoward,3,https://github.com/heimdal/heimdal/pull/972#issuecomment-1059616563,"NOTE: commit 1cdc9d5f3cff0288846c29c35ee91b6056a2e2bb
""krb5: export krb5_init_creds_step()"" exported
krb5_init_creds_step() the first time, but that's
not in any released version, so it should be fine
to fix up the prototype in order to make the
function actually useful for external callers.

All the ""lib/krb5: remove unused krb5_krbhst_info argument of"" commits are
not strictly required, but they show that the last commit
""lib/krb5: remove dead code from pk_verify_host()""
actually removed dead code. If the logic
in pk_verify_host() should be kept,
a krb5_krbhst_info should be passed in though any useful
way, but passing it to krb5_init_creds_step() is clearly not
the correct way. Maybe a new krb5_init_creds_set_*() function.",Sounds like a sensible idea. @nicowilliams? (Sorry I don't have time to work on this right now.),True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,972,2022-03-03T17:58:17Z,,2022-03-05T00:26:12Z,OPEN,False,51,61,3,https://github.com/metze-samba,Make krb5_init_creds_step() usable at all and match the MIT version of it,13,['refactor'],https://github.com/heimdal/heimdal/pull/972,https://github.com/metze-samba,4,https://github.com/heimdal/heimdal/pull/972#issuecomment-1059622434,"NOTE: commit 1cdc9d5f3cff0288846c29c35ee91b6056a2e2bb
""krb5: export krb5_init_creds_step()"" exported
krb5_init_creds_step() the first time, but that's
not in any released version, so it should be fine
to fix up the prototype in order to make the
function actually useful for external callers.

All the ""lib/krb5: remove unused krb5_krbhst_info argument of"" commits are
not strictly required, but they show that the last commit
""lib/krb5: remove dead code from pk_verify_host()""
actually removed dead code. If the logic
in pk_verify_host() should be kept,
a krb5_krbhst_info should be passed in though any useful
way, but passing it to krb5_init_creds_step() is clearly not
the correct way. Maybe a new krb5_init_creds_set_*() function.","Sounds like a sensible idea. @nicowilliams? (Sorry I don't have time to work on this right now.)

See #974",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,973,2022-03-03T23:15:46Z,2022-03-03T23:24:01Z,2022-03-03T23:24:02Z,MERGED,True,1,1,1,https://github.com/metze-samba,hdb: Fix crashes with WRONG_REALM,1,['bug'],https://github.com/heimdal/heimdal/pull/973,https://github.com/metze-samba,1,https://github.com/heimdal/heimdal/pull/973,"With HDB_ERR_WRONG_REALM the backend needs to expose the
principal, so we should not free the entry otherwise
the main kdc code will crash.","With HDB_ERR_WRONG_REALM the backend needs to expose the
principal, so we should not free the entry otherwise
the main kdc code will crash.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,974,2022-03-05T00:25:33Z,,2022-03-12T01:49:26Z,OPEN,False,13,11,4,https://github.com/metze-samba,krb5: don't export krb5_init_creds_step(),1,['feature request'],https://github.com/heimdal/heimdal/pull/974,https://github.com/metze-samba,1,https://github.com/heimdal/heimdal/pull/974,"The current prototype is unusable for external callers
and no released version exported it yet.
#972 will hopefully
fix it, but for now we should keep it internal.","The current prototype is unusable for external callers
and no released version exported it yet.
#972 will hopefully
fix it, but for now we should keep it internal.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,975,2022-03-06T20:49:36Z,2022-03-12T03:03:45Z,2022-03-12T03:03:45Z,MERGED,True,2,8,1,https://github.com/josephsutton1,roken: Fix time_t overflow checking,1,['bug'],https://github.com/heimdal/heimdal/pull/975,https://github.com/josephsutton1,1,https://github.com/heimdal/heimdal/pull/975,"INTxx_MIN plus a positive integer of the same type will always be negative, and so the result will always compare less than a positive integer. Fix this check so that we produce the correct result when adding two negative time_t values.","INTxx_MIN plus a positive integer of the same type will always be negative, and so the result will always compare less than a positive integer. Fix this check so that we produce the correct result when adding two negative time_t values.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,976,2022-03-06T20:55:13Z,2022-03-08T07:58:17Z,2022-03-12T01:47:21Z,MERGED,True,15,0,3,https://github.com/josephsutton1,kdc: Add function to add encrypted padata,1,['bug'],https://github.com/heimdal/heimdal/pull/976,https://github.com/josephsutton1,1,https://github.com/heimdal/heimdal/pull/976,"Since plugins no longer have a way of accessing the 'ek' member of the request structure, this function provides a way for a plugin to add encrypted padata to the response.","Since plugins no longer have a way of accessing the 'ek' member of the request structure, this function provides a way for a plugin to add encrypted padata to the response.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,977,2022-03-08T06:37:53Z,2022-03-08T07:58:01Z,2022-03-12T01:46:29Z,MERGED,True,6,6,1,https://github.com/josephsutton1,lib/krb5: Make parameters to PAC functions 'const',1,['bug'],https://github.com/heimdal/heimdal/pull/977,https://github.com/josephsutton1,1,https://github.com/heimdal/heimdal/pull/977,This allows these functions to be used with PACs obtained from KDC accessor functions such as kdc_request_get_pac().,This allows these functions to be used with PACs obtained from KDC accessor functions such as kdc_request_get_pac().,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,977,2022-03-08T06:37:53Z,2022-03-08T07:58:01Z,2022-03-12T01:46:29Z,MERGED,True,6,6,1,https://github.com/josephsutton1,lib/krb5: Make parameters to PAC functions 'const',1,['bug'],https://github.com/heimdal/heimdal/pull/977,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/977#issuecomment-1061503577,This allows these functions to be used with PACs obtained from KDC accessor functions such as kdc_request_get_pac().,LGTM,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,978,2022-03-09T12:21:27Z,,2022-03-12T01:50:45Z,OPEN,False,127,40,3,https://github.com/metze-samba,Fix S4U2Self against KDCs without FAST support,1,['bug'],https://github.com/heimdal/heimdal/pull/978,https://github.com/metze-samba,1,https://github.com/heimdal/heimdal/pull/978,"See https://bugzilla.samba.org/show_bug.cgi?id=15002
Samba's gitlab ci will run a few KDCs with enable_fast=FALSE
and make sure tests still pass.","See https://bugzilla.samba.org/show_bug.cgi?id=15002
Samba's gitlab ci will run a few KDCs with enable_fast=FALSE
and make sure tests still pass.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,979,2022-03-10T14:53:55Z,2022-03-12T01:51:03Z,2022-03-14T18:55:33Z,MERGED,True,7,1,1,https://github.com/metze-samba,lib/krb5: before we create a new FAST armor we should clear the old s…,1,['bug'],https://github.com/heimdal/heimdal/pull/979,https://github.com/metze-samba,1,https://github.com/heimdal/heimdal/pull/979,"…trengthen_key
In a cross-realm situation the client KDC exchange may use on orphaned
strengthen_key (from the previous exchange) if the current KDC
doesn't not support FAST and the previous KDC supported it.
Otherwise init_creds_step() or fast_tgs_strengthen_key()
generate the reply key.
BUG: https://bugzilla.samba.org/show_bug.cgi?id=15005
Signed-off-by: Stefan Metzmacher metze@samba.org","…trengthen_key
In a cross-realm situation the client KDC exchange may use on orphaned
strengthen_key (from the previous exchange) if the current KDC
doesn't not support FAST and the previous KDC supported it.
Otherwise init_creds_step() or fast_tgs_strengthen_key()
generate the reply key.
BUG: https://bugzilla.samba.org/show_bug.cgi?id=15005
Signed-off-by: Stefan Metzmacher metze@samba.org",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,979,2022-03-10T14:53:55Z,2022-03-12T01:51:03Z,2022-03-14T18:55:33Z,MERGED,True,7,1,1,https://github.com/metze-samba,lib/krb5: before we create a new FAST armor we should clear the old s…,1,['bug'],https://github.com/heimdal/heimdal/pull/979,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/979#issuecomment-1065783902,"…trengthen_key
In a cross-realm situation the client KDC exchange may use on orphaned
strengthen_key (from the previous exchange) if the current KDC
doesn't not support FAST and the previous KDC supported it.
Otherwise init_creds_step() or fast_tgs_strengthen_key()
generate the reply key.
BUG: https://bugzilla.samba.org/show_bug.cgi?id=15005
Signed-off-by: Stefan Metzmacher metze@samba.org",Looks OK to me.,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,979,2022-03-10T14:53:55Z,2022-03-12T01:51:03Z,2022-03-14T18:55:33Z,MERGED,True,7,1,1,https://github.com/metze-samba,lib/krb5: before we create a new FAST armor we should clear the old s…,1,['bug'],https://github.com/heimdal/heimdal/pull/979,https://github.com/nicowilliams,3,https://github.com/heimdal/heimdal/pull/979#issuecomment-1067174416,"…trengthen_key
In a cross-realm situation the client KDC exchange may use on orphaned
strengthen_key (from the previous exchange) if the current KDC
doesn't not support FAST and the previous KDC supported it.
Otherwise init_creds_step() or fast_tgs_strengthen_key()
generate the reply key.
BUG: https://bugzilla.samba.org/show_bug.cgi?id=15005
Signed-off-by: Stefan Metzmacher metze@samba.org",How is cross-realm involved here?,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,980,2022-03-10T14:56:56Z,,2022-03-12T01:51:31Z,OPEN,False,18,0,5,https://github.com/metze-samba,kdc: add enable_fast option (enabled by default),1,['feature request'],https://github.com/heimdal/heimdal/pull/980,https://github.com/metze-samba,1,https://github.com/heimdal/heimdal/pull/980,"This makes it possible to disable fast if needed,
which is very good for regression tests.
Samba disables this in a few test environments with this
option.
BUG: https://bugzilla.samba.org/show_bug.cgi?id=15002
BUG: https://bugzilla.samba.org/show_bug.cgi?id=15005
Signed-off-by: Stefan Metzmacher metze@samba.org","This makes it possible to disable fast if needed,
which is very good for regression tests.
Samba disables this in a few test environments with this
option.
BUG: https://bugzilla.samba.org/show_bug.cgi?id=15002
BUG: https://bugzilla.samba.org/show_bug.cgi?id=15005
Signed-off-by: Stefan Metzmacher metze@samba.org",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,981,2022-03-16T20:06:01Z,2022-03-18T01:59:49Z,2022-03-18T05:29:10Z,MERGED,True,256,41,9,https://github.com/nicowilliams,Hard and soft HDB entry aliases,4,[],https://github.com/heimdal/heimdal/pull/981,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/981,"At some point we had ""hard HDB entry aliases"" working, and I broke it when I needed to add something like soft aliases -- I made all aliases soft.  This PR has a fix.
The fix is to distinguish soft and hard aliases by convention.


Soft aliases are aliases of WELLKNOWN/REFERRALS/TARGET@${some_realm} or , WELLKNOWN/REFERRALS/TARGET/...@${some_realm}  where the realm is the realm to issue referrals to when a client asks for a ticket for an alias of such a principal.
The second form is needed because there is a limit to how many aliases an HDB entry can have due to the signed 16-bit ""TL-data"" length limit imposed by the kadm5 APIs and MIT kadmin protocol.


Hard aliases are all others.


kadmin/kadmind/httpkadmind/kadm5 will not care about the alias type distinction -- we push it onto users.
The HDB keytab can't do referrals, so soft aliases are ""not found"".
The AS will treat client principal soft aliases as referrals.
The TGS will treat service principal soft aliases as referrals.
Hard aliases get used as though they are proper principal entries.

If the client does not request canonicalization, or if the alias and canonical name are in different realms, then we act as though the requested name were the canonical name of the entry found.
Conversely, if the client does request canonicalization and the alias and canonical name are in the same realm, then the canonical name will be used in the ticket issued.","At some point we had ""hard HDB entry aliases"" working, and I broke it when I needed to add something like soft aliases -- I made all aliases soft.  This PR has a fix.
The fix is to distinguish soft and hard aliases by convention.


Soft aliases are aliases of WELLKNOWN/REFERRALS/TARGET@${some_realm} or , WELLKNOWN/REFERRALS/TARGET/...@${some_realm}  where the realm is the realm to issue referrals to when a client asks for a ticket for an alias of such a principal.
The second form is needed because there is a limit to how many aliases an HDB entry can have due to the signed 16-bit ""TL-data"" length limit imposed by the kadm5 APIs and MIT kadmin protocol.


Hard aliases are all others.


kadmin/kadmind/httpkadmind/kadm5 will not care about the alias type distinction -- we push it onto users.
The HDB keytab can't do referrals, so soft aliases are ""not found"".
The AS will treat client principal soft aliases as referrals.
The TGS will treat service principal soft aliases as referrals.
Hard aliases get used as though they are proper principal entries.

If the client does not request canonicalization, or if the alias and canonical name are in different realms, then we act as though the requested name were the canonical name of the entry found.
Conversely, if the client does request canonicalization and the alias and canonical name are in the same realm, then the canonical name will be used in the ticket issued.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,982,2022-03-18T06:05:22Z,2022-03-21T17:05:58Z,2022-03-21T17:05:58Z,MERGED,True,952,205,20,https://github.com/nicowilliams,kadmin online listing,5,[],https://github.com/heimdal/heimdal/pull/982,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/982,"I've had it with kadmin list being slow when there are many principals in a database.
This PR adds a kadm5_iter_principals() function that uses a callback rather than gathering all [matching] principals into an array in memory.
This PR also adds a variation on the Heimdal kadmin protocol's LIST operation that is correspondingly online, implements it in kadmind, and makes the kadmin client use it.
Lastly, there is a test, which tests listing an HDB w/ 20 principal in chunk sizes of 7 (three chunks), 10 (two chunks), and 50 (one chunk).  Testing listing of an HDB w/ zero principals is... hard and pointless, so no need.","I've had it with kadmin list being slow when there are many principals in a database.
This PR adds a kadm5_iter_principals() function that uses a callback rather than gathering all [matching] principals into an array in memory.
This PR also adds a variation on the Heimdal kadmin protocol's LIST operation that is correspondingly online, implements it in kadmind, and makes the kadmin client use it.
Lastly, there is a test, which tests listing an HDB w/ 20 principal in chunk sizes of 7 (three chunks), 10 (two chunks), and 50 (one chunk).  Testing listing of an HDB w/ zero principals is... hard and pointless, so no need.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,982,2022-03-18T06:05:22Z,2022-03-21T17:05:58Z,2022-03-21T17:05:58Z,MERGED,True,952,205,20,https://github.com/nicowilliams,kadmin online listing,5,[],https://github.com/heimdal/heimdal/pull/982,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/982#issuecomment-1072635944,"I've had it with kadmin list being slow when there are many principals in a database.
This PR adds a kadm5_iter_principals() function that uses a callback rather than gathering all [matching] principals into an array in memory.
This PR also adds a variation on the Heimdal kadmin protocol's LIST operation that is correspondingly online, implements it in kadmind, and makes the kadmin client use it.
Lastly, there is a test, which tests listing an HDB w/ 20 principal in chunk sizes of 7 (three chunks), 10 (two chunks), and 50 (one chunk).  Testing listing of an HDB w/ zero principals is... hard and pointless, so no need.","Ahh, there's a re-entrance issue that is difficult to resolve.  Basically, if the callback given to kadm5_iter_principals() tries to kadm5_get_principal(), then kadm5 is re-entered and bad things happen because we try to re-use the same open kadm_handle.  We need a way to clone a kadm_handle so we have a distinct open.  For local operations that means opening a separate HDB connection, while for remote operations that means opening a separate connection to kadmind.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,982,2022-03-18T06:05:22Z,2022-03-21T17:05:58Z,2022-03-21T17:05:58Z,MERGED,True,952,205,20,https://github.com/nicowilliams,kadmin online listing,5,[],https://github.com/heimdal/heimdal/pull/982,https://github.com/nicowilliams,3,https://github.com/heimdal/heimdal/pull/982#issuecomment-1073128589,"I've had it with kadmin list being slow when there are many principals in a database.
This PR adds a kadm5_iter_principals() function that uses a callback rather than gathering all [matching] principals into an array in memory.
This PR also adds a variation on the Heimdal kadmin protocol's LIST operation that is correspondingly online, implements it in kadmind, and makes the kadmin client use it.
Lastly, there is a test, which tests listing an HDB w/ 20 principal in chunk sizes of 7 (three chunks), 10 (two chunks), and 50 (one chunk).  Testing listing of an HDB w/ zero principals is... hard and pointless, so no need.","I've added a way for kadmin to tell kadmind that the user interrupted a listing.  This also adds a way to negotiate protocol versions in the future by having the response to NOPs have a version number (current version is 0).
I've also added a --upto=NUM option to kadmin get/kadmin list to exercise interrupting of principal listing.
I'm also making tests/kdc/check-kadmin go fast.  No more running kadmind in one-operation debug mode.
Lastly, I'm fixing a bug where kadmind was not sending error codes on... error (I noticed I was seeing ""End of file"" errors when kadmind was rejecting a request).",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,982,2022-03-18T06:05:22Z,2022-03-21T17:05:58Z,2022-03-21T17:05:58Z,MERGED,True,952,205,20,https://github.com/nicowilliams,kadmin online listing,5,[],https://github.com/heimdal/heimdal/pull/982,https://github.com/nicowilliams,4,https://github.com/heimdal/heimdal/pull/982#issuecomment-1073128846,"I've had it with kadmin list being slow when there are many principals in a database.
This PR adds a kadm5_iter_principals() function that uses a callback rather than gathering all [matching] principals into an array in memory.
This PR also adds a variation on the Heimdal kadmin protocol's LIST operation that is correspondingly online, implements it in kadmind, and makes the kadmin client use it.
Lastly, there is a test, which tests listing an HDB w/ 20 principal in chunk sizes of 7 (three chunks), 10 (two chunks), and 50 (one chunk).  Testing listing of an HDB w/ zero principals is... hard and pointless, so no need.","The protocol for interrupting a long-running listing (e.g., if you have a realm with millions of principals), is that every time kadmind sends a chunk of the listing, it checks if the client has sent any data, and if so it will consider the listing interrupted, and will throw away the message.  The interrupt message is just a NOP.  Between Nagle's algorithm and the listing being fast, it is possible we'd miss the interrupt, which is why it has to be a NOP: so we can ignore it if it arrives late.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,982,2022-03-18T06:05:22Z,2022-03-21T17:05:58Z,2022-03-21T17:05:58Z,MERGED,True,952,205,20,https://github.com/nicowilliams,kadmin online listing,5,[],https://github.com/heimdal/heimdal/pull/982,https://github.com/nicowilliams,5,https://github.com/heimdal/heimdal/pull/982#issuecomment-1073128966,"I've had it with kadmin list being slow when there are many principals in a database.
This PR adds a kadm5_iter_principals() function that uses a callback rather than gathering all [matching] principals into an array in memory.
This PR also adds a variation on the Heimdal kadmin protocol's LIST operation that is correspondingly online, implements it in kadmind, and makes the kadmin client use it.
Lastly, there is a test, which tests listing an HDB w/ 20 principal in chunk sizes of 7 (three chunks), 10 (two chunks), and 50 (one chunk).  Testing listing of an HDB w/ zero principals is... hard and pointless, so no need.","The test does run kadmin list --upto=3 '*', but with the server having just 20 principals in its HDB... there's no way to exercise the server-side interruption w/o manually using a debugger (which, I did).",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,983,2022-03-21T16:01:37Z,2022-03-21T18:54:04Z,2022-03-21T18:54:05Z,MERGED,True,1,0,1,https://github.com/fihuer,KCM: Memory leak in `handle_read`,1,[],https://github.com/heimdal/heimdal/pull/983,https://github.com/fihuer,1,https://github.com/heimdal/heimdal/pull/983,"The inmsg field of the client structure is malloc/realloc'ed in handle_read but never free'ed in maybe_close.
Seems like Apple already fixed that with this.","The inmsg field of the client structure is malloc/realloc'ed in handle_read but never free'ed in maybe_close.
Seems like Apple already fixed that with this.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,983,2022-03-21T16:01:37Z,2022-03-21T18:54:04Z,2022-03-21T18:54:05Z,MERGED,True,1,0,1,https://github.com/fihuer,KCM: Memory leak in `handle_read`,1,[],https://github.com/heimdal/heimdal/pull/983,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/983#issuecomment-1074161209,"The inmsg field of the client structure is malloc/realloc'ed in handle_read but never free'ed in maybe_close.
Seems like Apple already fixed that with this.",Looks fine.  Do we also need to free(c->outmsg) in case handle_write() didn't do it because errors from write(2)?,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,983,2022-03-21T16:01:37Z,2022-03-21T18:54:04Z,2022-03-21T18:54:05Z,MERGED,True,1,0,1,https://github.com/fihuer,KCM: Memory leak in `handle_read`,1,[],https://github.com/heimdal/heimdal/pull/983,https://github.com/fihuer,3,https://github.com/heimdal/heimdal/pull/983#issuecomment-1074264705,"The inmsg field of the client structure is malloc/realloc'ed in handle_read but never free'ed in maybe_close.
Seems like Apple already fixed that with this.","Hmmm, probably. We didn't detect that code path with valgrind but it may
still be a leak.

Does this one, or any other leak, are patched in Apple's Heimdal ?

Le lun. 21 mars 2022 à 17:59, Nico Williams ***@***.***> a
écrit :
…
 Looks fine. Do we also need to free(c->outmsg) in case handle_write()
 didn't do it because errors from write(2)?

 —
 Reply to this email directly, view it on GitHub
 <#983 (comment)>, or
 unsubscribe
 <https://github.com/notifications/unsubscribe-auth/AASDRFJH2F2UFSOUJ4BDVHDVBCTILANCNFSM5RIE2PMQ>
 .
 You are receiving this because you authored the thread.Message ID:
 ***@***.***>",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,983,2022-03-21T16:01:37Z,2022-03-21T18:54:04Z,2022-03-21T18:54:05Z,MERGED,True,1,0,1,https://github.com/fihuer,KCM: Memory leak in `handle_read`,1,[],https://github.com/heimdal/heimdal/pull/983,https://github.com/nicowilliams,4,https://github.com/heimdal/heimdal/pull/983#issuecomment-1074289375,"The inmsg field of the client structure is malloc/realloc'ed in handle_read but never free'ed in maybe_close.
Seems like Apple already fixed that with this.","Hmmm, probably. We didn't detect that code path with valgrind but it may
still be a leak.

We have a large number of untested error-path-related code paths.  See the coveralls build (it's not as bad as it looks because a lot parts of Heimdal that are poorly tested are also not really used; we should really just remove such code).

Does this one, or any other leak, are patched in Apple's Heimdal ?

I don't often check Apple's fork.  If you found this with valgrind, and the fix looks fine, that's good enough.  I'll merge this now, and if you would like to submit another PR for the outmsg error case, that's fine.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,985,2022-03-25T15:55:04Z,2022-03-26T04:33:03Z,2022-03-26T04:33:15Z,MERGED,True,14,1,3,https://github.com/steffen-kiess,kcm: Allow disabling automatic TGT renewal,1,[],https://github.com/heimdal/heimdal/pull/985,https://github.com/steffen-kiess,1,https://github.com/heimdal/heimdal/pull/985,"Add --no-automatic-renewal option to disable automatic TGT renewal.
Renewal can also be disabled by setting automatic_renewal to false
in the [kcm] section of krb5.conf.","Add --no-automatic-renewal option to disable automatic TGT renewal.
Renewal can also be disabled by setting automatic_renewal to false
in the [kcm] section of krb5.conf.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,985,2022-03-25T15:55:04Z,2022-03-26T04:33:03Z,2022-03-26T04:33:15Z,MERGED,True,14,1,3,https://github.com/steffen-kiess,kcm: Allow disabling automatic TGT renewal,1,[],https://github.com/heimdal/heimdal/pull/985,https://github.com/nicowilliams,2,https://github.com/heimdal/heimdal/pull/985#issuecomment-1079600714,"Add --no-automatic-renewal option to disable automatic TGT renewal.
Renewal can also be disabled by setting automatic_renewal to false
in the [kcm] section of krb5.conf.",Thanks!,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,986,2022-03-26T14:39:31Z,,2022-04-03T10:47:56Z,OPEN,False,49,12,1,https://github.com/rodwiddowson,Some notes on building with VC2019,1,[],https://github.com/heimdal/heimdal/pull/986,https://github.com/rodwiddowson,1,https://github.com/heimdal/heimdal/pull/986,"I recently did a complete build using Visual Studio 2019 and SDK 10.0.19041.0.
There was a bit of a learn cliff and I have tried to capture my experience in the attached patch stream to windows\README.md.
I am not proposing that this be accepted as is.  It is more there to inform a rewrite of this page some time (and to act as memo to myself when I next loop back through here)","I recently did a complete build using Visual Studio 2019 and SDK 10.0.19041.0.
There was a bit of a learn cliff and I have tried to capture my experience in the attached patch stream to windows\README.md.
I am not proposing that this be accepted as is.  It is more there to inform a rewrite of this page some time (and to act as memo to myself when I next loop back through here)",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,986,2022-03-26T14:39:31Z,,2022-04-03T10:47:56Z,OPEN,False,49,12,1,https://github.com/rodwiddowson,Some notes on building with VC2019,1,[],https://github.com/heimdal/heimdal/pull/986,https://github.com/lhoward,2,https://github.com/heimdal/heimdal/pull/986#issuecomment-1086760638,"I recently did a complete build using Visual Studio 2019 and SDK 10.0.19041.0.
There was a bit of a learn cliff and I have tried to capture my experience in the attached patch stream to windows\README.md.
I am not proposing that this be accepted as is.  It is more there to inform a rewrite of this page some time (and to act as memo to myself when I next loop back through here)","These LGTM, perhaps you can squash into one commit? cc @jaltman",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,989,2022-04-26T00:41:44Z,2022-04-26T03:48:33Z,2022-04-26T03:48:33Z,MERGED,True,348,32,7,https://github.com/nicowilliams,HKD ok as delegate and other stuff,7,[],https://github.com/heimdal/heimdal/pull/989,https://github.com/nicowilliams,1,https://github.com/heimdal/heimdal/pull/989,,,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,990,2022-04-30T06:20:24Z,2022-04-30T17:35:53Z,2022-04-30T17:35:53Z,MERGED,True,32,32,20,https://github.com/josephsutton1,Use memset_s() and constant-time memory comparisons,3,[],https://github.com/heimdal/heimdal/pull/990,https://github.com/josephsutton1,1,https://github.com/heimdal/heimdal/pull/990,"Using memset_s() ensures that sensitive memory is cleared, and constant-time memory comparisons help to prevent timing attacks.","Using memset_s() ensures that sensitive memory is cleared, and constant-time memory comparisons help to prevent timing attacks.",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,992,2022-05-05T11:11:35Z,,2022-05-06T13:23:52Z,OPEN,False,20,1,2,https://github.com/wokis,kdc: support pkinit_kdc_revoke for pkinit anchors,1,[],https://github.com/heimdal/heimdal/pull/992,https://github.com/wokis,1,https://github.com/heimdal/heimdal/pull/992,"This adds support for revocation checking pkinit anchors.
Windows expects KRB5_KDC_ERR_CLIENT_NOT_TRUSTED when the anchor certificate is revoked.
BUG: https://bugzilla.samba.org/show_bug.cgi?id=9612","This adds support for revocation checking pkinit anchors.
Windows expects KRB5_KDC_ERR_CLIENT_NOT_TRUSTED when the anchor certificate is revoked.
BUG: https://bugzilla.samba.org/show_bug.cgi?id=9612",True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,993,2022-05-06T14:01:24Z,,2022-05-06T14:01:24Z,OPEN,False,78,27,1,https://github.com/wokis,Support DIR in hx509_revoke_add_crl,1,[],https://github.com/heimdal/heimdal/pull/993,https://github.com/wokis,1,https://github.com/heimdal/heimdal/pull/993,Resolves #991,Resolves #991,True,{}
heimdal/heimdal,https://github.com/heimdal/heimdal,994,2022-05-19T08:15:32Z,,2022-05-19T08:15:32Z,OPEN,False,2,2,2,https://github.com/josephsutton1,Miscellaneous fixes,2,[],https://github.com/heimdal/heimdal/pull/994,https://github.com/josephsutton1,1,https://github.com/heimdal/heimdal/pull/994,,,True,{}
