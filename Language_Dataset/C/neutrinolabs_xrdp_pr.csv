neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,342,2016-03-06T08:06:50Z,2016-04-01T05:10:12Z,2016-04-01T05:10:12Z,CLOSED,False,34,57,16,https://github.com/proski,Warning fixes,3,[],https://github.com/neutrinolabs/xrdp/pull/342,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/342,"It's important to fix compiler warnings. Many warnings indicate real problems with the code. In particular, unused variables often indicate remote date that is read but not used. Those warnings are not fixed. They should be fixed by those who can improve the code.
What is fixed is the easy stuff, the warnings that obscure bigger problems.
In addition to the compiler warnings, a warning from Valgrind has been fixed. Intercepting SIGKILL doesn't work and should not be done.","It's important to fix compiler warnings. Many warnings indicate real problems with the code. In particular, unused variables often indicate remote date that is read but not used. Those warnings are not fixed. They should be fixed by those who can improve the code.
What is fixed is the easy stuff, the warnings that obscure bigger problems.
In addition to the compiler warnings, a warning from Valgrind has been fixed. Intercepting SIGKILL doesn't work and should not be done.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,342,2016-03-06T08:06:50Z,2016-04-01T05:10:12Z,2016-04-01T05:10:12Z,CLOSED,False,34,57,16,https://github.com/proski,Warning fixes,3,[],https://github.com/neutrinolabs/xrdp/pull/342,https://github.com/jsorg71,2,https://github.com/neutrinolabs/xrdp/pull/342#issuecomment-193377500,"It's important to fix compiler warnings. Many warnings indicate real problems with the code. In particular, unused variables often indicate remote date that is read but not used. Those warnings are not fixed. They should be fixed by those who can improve the code.
What is fixed is the easy stuff, the warnings that obscure bigger problems.
In addition to the compiler warnings, a warning from Valgrind has been fixed. Intercepting SIGKILL doesn't work and should not be done.","I don't like using g_write(""\n"") instead of g_writeln("""")
The purpose of writeln is so that you don't need to think about EOL.
\r\n in Windows and \r on mac and \n in Linux.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,342,2016-03-06T08:06:50Z,2016-04-01T05:10:12Z,2016-04-01T05:10:12Z,CLOSED,False,34,57,16,https://github.com/proski,Warning fixes,3,[],https://github.com/neutrinolabs/xrdp/pull/342,https://github.com/proski,3,https://github.com/neutrinolabs/xrdp/pull/342#issuecomment-193878302,"It's important to fix compiler warnings. Many warnings indicate real problems with the code. In particular, unused variables often indicate remote date that is read but not used. Those warnings are not fixed. They should be fixed by those who can improve the code.
What is fixed is the easy stuff, the warnings that obscure bigger problems.
In addition to the compiler warnings, a warning from Valgrind has been fixed. Intercepting SIGKILL doesn't work and should not be done.","Good point, I'll redo that part. I'm torn between adding ""-Wno-format-zero-length"" for compilers that support it (that warning is not that useful anyway) and having a new macro for a newline. Let me see what would look better.
By the way, xrdp would greatly benefit from using glib - it has a lot of stuff xrdp has to implement on its own, including logging: https://developer.gnome.org/glib/stable/glib-Message-Logging.html
Also, the unnamed semaphores don't work in MacOS. glib would fix that easily. Perhaps we need a separate forum to discuss glib. MacOS is a good platform to support, it has Microsoft RDP client, and it's good to have a reference client and a server on the same system.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,342,2016-03-06T08:06:50Z,2016-04-01T05:10:12Z,2016-04-01T05:10:12Z,CLOSED,False,34,57,16,https://github.com/proski,Warning fixes,3,[],https://github.com/neutrinolabs/xrdp/pull/342,https://github.com/proski,4,https://github.com/neutrinolabs/xrdp/pull/342#issuecomment-195698595,"It's important to fix compiler warnings. Many warnings indicate real problems with the code. In particular, unused variables often indicate remote date that is read but not used. Those warnings are not fixed. They should be fixed by those who can improve the code.
What is fixed is the easy stuff, the warnings that obscure bigger problems.
In addition to the compiler warnings, a warning from Valgrind has been fixed. Intercepting SIGKILL doesn't work and should not be done.","I made a version with variadic g_writeln. The problem is, it uses ##__VA_ARGS__ - most compilers support it, but it's not a standard. I don't want to use the alternative, knows as argument counting, as it's ugly and has its limitations (http://stackoverflow.com/questions/5588855/standard-alternative-to-gccs-va-args-trick)
I'll try ""argument counting lite"", i.e. some simple macro trick to enable g_writeln with no arguments or something like that.
I thought of GCC pragma to suppress the warning, but I'll need to check that it doesn't break any other compilers.
There is always an option to disable the warning in configure.ac if nothing better cam be done.
Please feel free to merge two other patched for now.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,342,2016-03-06T08:06:50Z,2016-04-01T05:10:12Z,2016-04-01T05:10:12Z,CLOSED,False,34,57,16,https://github.com/proski,Warning fixes,3,[],https://github.com/neutrinolabs/xrdp/pull/342,https://github.com/jsorg71,5,https://github.com/neutrinolabs/xrdp/pull/342#issuecomment-196561131,"It's important to fix compiler warnings. Many warnings indicate real problems with the code. In particular, unused variables often indicate remote date that is read but not used. Those warnings are not fixed. They should be fixed by those who can improve the code.
What is fixed is the easy stuff, the warnings that obscure bigger problems.
In addition to the compiler warnings, a warning from Valgrind has been fixed. Intercepting SIGKILL doesn't work and should not be done.","@proski
so if we do g_writeln(""%s"", """");
it's ok, right?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,342,2016-03-06T08:06:50Z,2016-04-01T05:10:12Z,2016-04-01T05:10:12Z,CLOSED,False,34,57,16,https://github.com/proski,Warning fixes,3,[],https://github.com/neutrinolabs/xrdp/pull/342,https://github.com/proski,6,https://github.com/neutrinolabs/xrdp/pull/342#issuecomment-196570308,"It's important to fix compiler warnings. Many warnings indicate real problems with the code. In particular, unused variables often indicate remote date that is read but not used. Those warnings are not fixed. They should be fixed by those who can improve the code.
What is fixed is the easy stuff, the warnings that obscure bigger problems.
In addition to the compiler warnings, a warning from Valgrind has been fixed. Intercepting SIGKILL doesn't work and should not be done.","That looks too complex for adding a newline. I want something that is simple, readable, secure, not wasteful, and doesn't set a bad example. Introducing a new function to print the newline would not be readable either - that's one more thing to remember. The gcc warning for empty format is only useful if the format is used as is, not when something is appended. I'm very close to disabling that warning, which should be easy with Autoconf archive macros. But I still want to try some macro magic, just in moderate amounts - two or three lines.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,342,2016-03-06T08:06:50Z,2016-04-01T05:10:12Z,2016-04-01T05:10:12Z,CLOSED,False,34,57,16,https://github.com/proski,Warning fixes,3,[],https://github.com/neutrinolabs/xrdp/pull/342,https://github.com/jsorg71,7,https://github.com/neutrinolabs/xrdp/pull/342#issuecomment-196578200,"It's important to fix compiler warnings. Many warnings indicate real problems with the code. In particular, unused variables often indicate remote date that is read but not used. Those warnings are not fixed. They should be fixed by those who can improve the code.
What is fixed is the easy stuff, the warnings that obscure bigger problems.
In addition to the compiler warnings, a warning from Valgrind has been fixed. Intercepting SIGKILL doesn't work and should not be done.","I've been trying to avoid variable parameter macros.  They are not standard.
I prefer the double (( )) instead like the LLOGLN macro",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,342,2016-03-06T08:06:50Z,2016-04-01T05:10:12Z,2016-04-01T05:10:12Z,CLOSED,False,34,57,16,https://github.com/proski,Warning fixes,3,[],https://github.com/neutrinolabs/xrdp/pull/342,https://github.com/jsorg71,8,https://github.com/neutrinolabs/xrdp/pull/342#issuecomment-197678136,"It's important to fix compiler warnings. Many warnings indicate real problems with the code. In particular, unused variables often indicate remote date that is read but not used. Those warnings are not fixed. They should be fixed by those who can improve the code.
What is fixed is the easy stuff, the warnings that obscure bigger problems.
In addition to the compiler warnings, a warning from Valgrind has been fixed. Intercepting SIGKILL doesn't work and should not be done.","I still prefer g_writeln(""%s"", """");
over changing g_writeln to a variadic macro",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,347,2016-03-15T09:28:37Z,2016-03-17T03:40:44Z,2016-08-16T04:54:49Z,MERGED,True,1,1,1,https://github.com/metalefty,fix typo xrdp-sessman -> xrdp-sessvc,1,[],https://github.com/neutrinolabs/xrdp/pull/347,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/347,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,347,2016-03-15T09:28:37Z,2016-03-17T03:40:44Z,2016-08-16T04:54:49Z,MERGED,True,1,1,1,https://github.com/metalefty,fix typo xrdp-sessman -> xrdp-sessvc,1,[],https://github.com/neutrinolabs/xrdp/pull/347,https://github.com/jsorg71,2,https://github.com/neutrinolabs/xrdp/pull/347#issuecomment-197676852,,+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,353,2016-03-28T19:02:26Z,2016-04-02T23:11:59Z,2016-04-02T23:11:59Z,MERGED,True,3,3,3,https://github.com/nerdknight,"Fix compile error ""format not a string literal and no format arguments [-Werror=format-security]""",1,[],https://github.com/neutrinolabs/xrdp/pull/353,https://github.com/nerdknight,1,https://github.com/neutrinolabs/xrdp/pull/353,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,359,2016-04-07T09:23:32Z,2016-04-18T20:29:15Z,2016-08-16T04:54:47Z,MERGED,True,25,11,3,https://github.com/metalefty,sesman: do not hardcode Xorg/X11rdp/Xvnc executables,2,[],https://github.com/neutrinolabs/xrdp/pull/359,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/359,"In RHEL and its clones, /usr/bin/Xorg is set suid-root. To execute
Xorg with user privileges, /etc/pam.d/xserver needs be edited [1],
or suid bit of Xorg binary needs to be dropped.
In order to keep Xorg and /etc/pam.d/xserver untouched, preparing
non-suid version of Xorg as /usr/bin/Xorg.non-suid for example is
the simplest solution. However, Xorg.non-suid cannot be executed
since it is hardcoded to execute Xorg in sesman.
This change makes more flexible to execute Xorg with non-standard
name or not in PATH environment variable.
[1] https://www.centos.org/forums/viewtopic.php?t=21185","In RHEL and its clones, /usr/bin/Xorg is set suid-root. To execute
Xorg with user privileges, /etc/pam.d/xserver needs be edited [1],
or suid bit of Xorg binary needs to be dropped.
In order to keep Xorg and /etc/pam.d/xserver untouched, preparing
non-suid version of Xorg as /usr/bin/Xorg.non-suid for example is
the simplest solution. However, Xorg.non-suid cannot be executed
since it is hardcoded to execute Xorg in sesman.
This change makes more flexible to execute Xorg with non-standard
name or not in PATH environment variable.
[1] https://www.centos.org/forums/viewtopic.php?t=21185",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,359,2016-04-07T09:23:32Z,2016-04-18T20:29:15Z,2016-08-16T04:54:47Z,MERGED,True,25,11,3,https://github.com/metalefty,sesman: do not hardcode Xorg/X11rdp/Xvnc executables,2,[],https://github.com/neutrinolabs/xrdp/pull/359,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/359#issuecomment-206781483,"In RHEL and its clones, /usr/bin/Xorg is set suid-root. To execute
Xorg with user privileges, /etc/pam.d/xserver needs be edited [1],
or suid bit of Xorg binary needs to be dropped.
In order to keep Xorg and /etc/pam.d/xserver untouched, preparing
non-suid version of Xorg as /usr/bin/Xorg.non-suid for example is
the simplest solution. However, Xorg.non-suid cannot be executed
since it is hardcoded to execute Xorg in sesman.
This change makes more flexible to execute Xorg with non-standard
name or not in PATH environment variable.
[1] https://www.centos.org/forums/viewtopic.php?t=21185","What do you think of my idea?  This change will destroy compatibility of sesman.ini.
sesman.ini needs to contain param0=X[11rdp|vnc|org] parameter  after this change.
The motivation of making this change is because I don't want to change anything installed by other packages.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,359,2016-04-07T09:23:32Z,2016-04-18T20:29:15Z,2016-08-16T04:54:47Z,MERGED,True,25,11,3,https://github.com/metalefty,sesman: do not hardcode Xorg/X11rdp/Xvnc executables,2,[],https://github.com/neutrinolabs/xrdp/pull/359,https://github.com/jsorg71,3,https://github.com/neutrinolabs/xrdp/pull/359#issuecomment-211140733,"In RHEL and its clones, /usr/bin/Xorg is set suid-root. To execute
Xorg with user privileges, /etc/pam.d/xserver needs be edited [1],
or suid bit of Xorg binary needs to be dropped.
In order to keep Xorg and /etc/pam.d/xserver untouched, preparing
non-suid version of Xorg as /usr/bin/Xorg.non-suid for example is
the simplest solution. However, Xorg.non-suid cannot be executed
since it is hardcoded to execute Xorg in sesman.
This change makes more flexible to execute Xorg with non-standard
name or not in PATH environment variable.
[1] https://www.centos.org/forums/viewtopic.php?t=21185","+1
I like this and I even thought about using a script, like startwm.sh but something like startdisplay.sh
With this configurable, someone can always do that.
I don't think that backward compatible is as important anyway, we can default param0 if it's not in the file.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,359,2016-04-07T09:23:32Z,2016-04-18T20:29:15Z,2016-08-16T04:54:47Z,MERGED,True,25,11,3,https://github.com/metalefty,sesman: do not hardcode Xorg/X11rdp/Xvnc executables,2,[],https://github.com/neutrinolabs/xrdp/pull/359,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/359#issuecomment-211195242,"In RHEL and its clones, /usr/bin/Xorg is set suid-root. To execute
Xorg with user privileges, /etc/pam.d/xserver needs be edited [1],
or suid bit of Xorg binary needs to be dropped.
In order to keep Xorg and /etc/pam.d/xserver untouched, preparing
non-suid version of Xorg as /usr/bin/Xorg.non-suid for example is
the simplest solution. However, Xorg.non-suid cannot be executed
since it is hardcoded to execute Xorg in sesman.
This change makes more flexible to execute Xorg with non-standard
name or not in PATH environment variable.
[1] https://www.centos.org/forums/viewtopic.php?t=21185","we can default param0 if it's not in the file.

sounds good.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,360,2016-04-10T21:46:06Z,2016-05-03T07:52:58Z,2016-05-06T15:37:49Z,MERGED,True,100,111,21,https://github.com/proski,Warning fixes,6,[],https://github.com/neutrinolabs/xrdp/pull/360,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/360,Fixing warnings to keep their number manageable. This also establishes a higher standard for the new code.,Fixing warnings to keep their number manageable. This also establishes a higher standard for the new code.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,360,2016-04-10T21:46:06Z,2016-05-03T07:52:58Z,2016-05-06T15:37:49Z,MERGED,True,100,111,21,https://github.com/proski,Warning fixes,6,[],https://github.com/neutrinolabs/xrdp/pull/360,https://github.com/jsorg71,2,https://github.com/neutrinolabs/xrdp/pull/360#issuecomment-208691909,Fixing warnings to keep their number manageable. This also establishes a higher standard for the new code.,"+1
I like it but I think __always_unused seems odd.
I see __ prefix and I think compiler define.
We can always change it later but ALWAYS_UNUSED seems better.
Or using in_uint8s(s, _bytes); /* name */ works too and with all compilers.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,360,2016-04-10T21:46:06Z,2016-05-03T07:52:58Z,2016-05-06T15:37:49Z,MERGED,True,100,111,21,https://github.com/proski,Warning fixes,6,[],https://github.com/neutrinolabs/xrdp/pull/360,https://github.com/proski,3,https://github.com/neutrinolabs/xrdp/pull/360#issuecomment-208723655,Fixing warnings to keep their number manageable. This also establishes a higher standard for the new code.,"I agree about compiler defines. Indeed, it would be better to use something
that looks ""magic"", but not ""compiler-internals-magic"". I had no good idea,
so I went with the Linux kernel choice. ALWAYS_UNUSED would steal attention
for more important things. It's way too big and loud.
I wanted to preserve more information about the discarded data. If that's
not a big deal, let's use a more portable solution as you suggest.
On Mon, Apr 11, 2016, 8:50 PM jsorg71 notifications@github.com wrote:

+1
I like it but I think __always_unused seems odd.
I see __ prefix and I think compiler define.
We can always change it later but ALWAYS_UNUSED seems better.
Or using in_uint8s(s, _bytes); /* name */ works too and with all compilers.
—
You are receiving this because you authored the thread.
Reply to this email directly or view it on GitHub
#360 (comment)",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,360,2016-04-10T21:46:06Z,2016-05-03T07:52:58Z,2016-05-06T15:37:49Z,MERGED,True,100,111,21,https://github.com/proski,Warning fixes,6,[],https://github.com/neutrinolabs/xrdp/pull/360,https://github.com/proski,4,https://github.com/neutrinolabs/xrdp/pull/360#issuecomment-213273553,Fixing warnings to keep their number manageable. This also establishes a higher standard for the new code.,"I dropped most of the ""unused"" fixes, including __always_unused. I also removed changes to window_id declaration.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,360,2016-04-10T21:46:06Z,2016-05-03T07:52:58Z,2016-05-06T15:37:49Z,MERGED,True,100,111,21,https://github.com/proski,Warning fixes,6,[],https://github.com/neutrinolabs/xrdp/pull/360,https://github.com/jsorg71,5,https://github.com/neutrinolabs/xrdp/pull/360#issuecomment-214983895,Fixing warnings to keep their number manageable. This also establishes a higher standard for the new code.,"looks good
+1",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,360,2016-04-10T21:46:06Z,2016-05-03T07:52:58Z,2016-05-06T15:37:49Z,MERGED,True,100,111,21,https://github.com/proski,Warning fixes,6,[],https://github.com/neutrinolabs/xrdp/pull/360,https://github.com/proski,6,https://github.com/neutrinolabs/xrdp/pull/360#issuecomment-216389771,Fixing warnings to keep their number manageable. This also establishes a higher standard for the new code.,"Can somebody merge it soon, please? If there are any questions, I can make a separate pull request for ""Fix recently introduced warnings in session.c "" as it's a serious issue (incorrect pointer types).",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,361,2016-04-11T07:48:47Z,2016-04-18T00:40:44Z,2016-08-16T04:54:51Z,MERGED,True,1,15,2,https://github.com/metalefty, Do not attempt to trap SIGKILL part 2,2,[],https://github.com/neutrinolabs/xrdp/pull/361,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/361,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,361,2016-04-11T07:48:47Z,2016-04-18T00:40:44Z,2016-08-16T04:54:51Z,MERGED,True,1,15,2,https://github.com/metalefty, Do not attempt to trap SIGKILL part 2,2,[],https://github.com/neutrinolabs/xrdp/pull/361,https://github.com/jsorg71,2,https://github.com/neutrinolabs/xrdp/pull/361#issuecomment-208689349,,"+1
This looks good",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,363,2016-04-13T23:11:31Z,2016-07-27T06:59:39Z,2016-07-27T07:17:54Z,CLOSED,False,9,0,1,https://github.com/laigor,Allows use the xkb options that for example allows  specify a key combination to change the layouts.,1,[],https://github.com/neutrinolabs/xrdp/pull/363,https://github.com/laigor,1,https://github.com/neutrinolabs/xrdp/pull/363,"Example of xrdp_keyboard.ini for russian keyboard
[default_rdp_layouts]
rdp_layout_us=0x00000409
rdp_layout_de=0x00000407
rdp_layout_fr=0x0000040C
rdp_layout_it=0x00000410
rdp_layout_jp=0x00000411
rdp_layout_jp2=0xe0010411
rdp_layout_jp3=0xe0200411
rdp_layout_jp4=0xe0210411
rdp_layout_ru=0x00000419
rdp_layout_se=0x0000041D
rdp_layout_pt=0x00000816
rdp_layout_br=0x00000416
rdp_layout_pl=0x00000415
[rdp_keyboard_ru]
keyboard_type=4
keyboard_subtype=1
model=pc105
options=grp:alt_shift_toggle
rdp_layouts=default_rdp_layouts
layouts_map=layouts_map_ru
[layouts_map_ru]
rdp_layout_us=us,ru
rdp_layout_ru=us,ru","Example of xrdp_keyboard.ini for russian keyboard
[default_rdp_layouts]
rdp_layout_us=0x00000409
rdp_layout_de=0x00000407
rdp_layout_fr=0x0000040C
rdp_layout_it=0x00000410
rdp_layout_jp=0x00000411
rdp_layout_jp2=0xe0010411
rdp_layout_jp3=0xe0200411
rdp_layout_jp4=0xe0210411
rdp_layout_ru=0x00000419
rdp_layout_se=0x0000041D
rdp_layout_pt=0x00000816
rdp_layout_br=0x00000416
rdp_layout_pl=0x00000415
[rdp_keyboard_ru]
keyboard_type=4
keyboard_subtype=1
model=pc105
options=grp:alt_shift_toggle
rdp_layouts=default_rdp_layouts
layouts_map=layouts_map_ru
[layouts_map_ru]
rdp_layout_us=us,ru
rdp_layout_ru=us,ru",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,363,2016-04-13T23:11:31Z,2016-07-27T06:59:39Z,2016-07-27T07:17:54Z,CLOSED,False,9,0,1,https://github.com/laigor,Allows use the xkb options that for example allows  specify a key combination to change the layouts.,1,[],https://github.com/neutrinolabs/xrdp/pull/363,https://github.com/jsorg71,2,https://github.com/neutrinolabs/xrdp/pull/363#issuecomment-209808012,"Example of xrdp_keyboard.ini for russian keyboard
[default_rdp_layouts]
rdp_layout_us=0x00000409
rdp_layout_de=0x00000407
rdp_layout_fr=0x0000040C
rdp_layout_it=0x00000410
rdp_layout_jp=0x00000411
rdp_layout_jp2=0xe0010411
rdp_layout_jp3=0xe0200411
rdp_layout_jp4=0xe0210411
rdp_layout_ru=0x00000419
rdp_layout_se=0x0000041D
rdp_layout_pt=0x00000816
rdp_layout_br=0x00000416
rdp_layout_pl=0x00000415
[rdp_keyboard_ru]
keyboard_type=4
keyboard_subtype=1
model=pc105
options=grp:alt_shift_toggle
rdp_layouts=default_rdp_layouts
layouts_map=layouts_map_ru
[layouts_map_ru]
rdp_layout_us=us,ru
rdp_layout_ru=us,ru",+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,363,2016-04-13T23:11:31Z,2016-07-27T06:59:39Z,2016-07-27T07:17:54Z,CLOSED,False,9,0,1,https://github.com/laigor,Allows use the xkb options that for example allows  specify a key combination to change the layouts.,1,[],https://github.com/neutrinolabs/xrdp/pull/363,https://github.com/jsorg71,3,https://github.com/neutrinolabs/xrdp/pull/363#issuecomment-209809177,"Example of xrdp_keyboard.ini for russian keyboard
[default_rdp_layouts]
rdp_layout_us=0x00000409
rdp_layout_de=0x00000407
rdp_layout_fr=0x0000040C
rdp_layout_it=0x00000410
rdp_layout_jp=0x00000411
rdp_layout_jp2=0xe0010411
rdp_layout_jp3=0xe0200411
rdp_layout_jp4=0xe0210411
rdp_layout_ru=0x00000419
rdp_layout_se=0x0000041D
rdp_layout_pt=0x00000816
rdp_layout_br=0x00000416
rdp_layout_pl=0x00000415
[rdp_keyboard_ru]
keyboard_type=4
keyboard_subtype=1
model=pc105
options=grp:alt_shift_toggle
rdp_layouts=default_rdp_layouts
layouts_map=layouts_map_ru
[layouts_map_ru]
rdp_layout_us=us,ru
rdp_layout_ru=us,ru","opps, this should be devel branch",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,363,2016-04-13T23:11:31Z,2016-07-27T06:59:39Z,2016-07-27T07:17:54Z,CLOSED,False,9,0,1,https://github.com/laigor,Allows use the xkb options that for example allows  specify a key combination to change the layouts.,1,[],https://github.com/neutrinolabs/xrdp/pull/363,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/363#issuecomment-235502990,"Example of xrdp_keyboard.ini for russian keyboard
[default_rdp_layouts]
rdp_layout_us=0x00000409
rdp_layout_de=0x00000407
rdp_layout_fr=0x0000040C
rdp_layout_it=0x00000410
rdp_layout_jp=0x00000411
rdp_layout_jp2=0xe0010411
rdp_layout_jp3=0xe0200411
rdp_layout_jp4=0xe0210411
rdp_layout_ru=0x00000419
rdp_layout_se=0x0000041D
rdp_layout_pt=0x00000816
rdp_layout_br=0x00000416
rdp_layout_pl=0x00000415
[rdp_keyboard_ru]
keyboard_type=4
keyboard_subtype=1
model=pc105
options=grp:alt_shift_toggle
rdp_layouts=default_rdp_layouts
layouts_map=layouts_map_ru
[layouts_map_ru]
rdp_layout_us=us,ru
rdp_layout_ru=us,ru",#364 is opened versus devel branch.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,363,2016-04-13T23:11:31Z,2016-07-27T06:59:39Z,2016-07-27T07:17:54Z,CLOSED,False,9,0,1,https://github.com/laigor,Allows use the xkb options that for example allows  specify a key combination to change the layouts.,1,[],https://github.com/neutrinolabs/xrdp/pull/363,https://github.com/metalefty,5,https://github.com/neutrinolabs/xrdp/pull/363#issuecomment-235505969,"Example of xrdp_keyboard.ini for russian keyboard
[default_rdp_layouts]
rdp_layout_us=0x00000409
rdp_layout_de=0x00000407
rdp_layout_fr=0x0000040C
rdp_layout_it=0x00000410
rdp_layout_jp=0x00000411
rdp_layout_jp2=0xe0010411
rdp_layout_jp3=0xe0200411
rdp_layout_jp4=0xe0210411
rdp_layout_ru=0x00000419
rdp_layout_se=0x0000041D
rdp_layout_pt=0x00000816
rdp_layout_br=0x00000416
rdp_layout_pl=0x00000415
[rdp_keyboard_ru]
keyboard_type=4
keyboard_subtype=1
model=pc105
options=grp:alt_shift_toggle
rdp_layouts=default_rdp_layouts
layouts_map=layouts_map_ru
[layouts_map_ru]
rdp_layout_us=us,ru
rdp_layout_ru=us,ru",@jsorg71 merge #364? it is versus devel branch.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,364,2016-04-14T19:40:37Z,2016-08-30T00:28:25Z,2016-09-09T07:05:30Z,MERGED,True,9,0,1,https://github.com/laigor,Allows use the xkb options that for example allows you to specify a key combination to change the layouts.,1,[],https://github.com/neutrinolabs/xrdp/pull/364,https://github.com/laigor,1,https://github.com/neutrinolabs/xrdp/pull/364,"Example of xrdp_keyboard.ini for russian keyboard (Please add this to wiki)
[default_rdp_layouts]
rdp_layout_us=0x00000409
rdp_layout_de=0x00000407
rdp_layout_fr=0x0000040C
rdp_layout_it=0x00000410
rdp_layout_jp=0x00000411
rdp_layout_jp2=0xe0010411
rdp_layout_jp3=0xe0200411
rdp_layout_jp4=0xe0210411
rdp_layout_ru=0x00000419
rdp_layout_se=0x0000041D
rdp_layout_pt=0x00000816
rdp_layout_br=0x00000416
rdp_layout_pl=0x00000415
[rdp_keyboard_ru]
keyboard_type=4
keyboard_subtype=1
model=pc105
options=grp:alt_shift_toggle
rdp_layouts=default_rdp_layouts
layouts_map=layouts_map_ru
[layouts_map_ru]
rdp_layout_us=us,ru
rdp_layout_ru=us,ru","Example of xrdp_keyboard.ini for russian keyboard (Please add this to wiki)
[default_rdp_layouts]
rdp_layout_us=0x00000409
rdp_layout_de=0x00000407
rdp_layout_fr=0x0000040C
rdp_layout_it=0x00000410
rdp_layout_jp=0x00000411
rdp_layout_jp2=0xe0010411
rdp_layout_jp3=0xe0200411
rdp_layout_jp4=0xe0210411
rdp_layout_ru=0x00000419
rdp_layout_se=0x0000041D
rdp_layout_pt=0x00000816
rdp_layout_br=0x00000416
rdp_layout_pl=0x00000415
[rdp_keyboard_ru]
keyboard_type=4
keyboard_subtype=1
model=pc105
options=grp:alt_shift_toggle
rdp_layouts=default_rdp_layouts
layouts_map=layouts_map_ru
[layouts_map_ru]
rdp_layout_us=us,ru
rdp_layout_ru=us,ru",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,364,2016-04-14T19:40:37Z,2016-08-30T00:28:25Z,2016-09-09T07:05:30Z,MERGED,True,9,0,1,https://github.com/laigor,Allows use the xkb options that for example allows you to specify a key combination to change the layouts.,1,[],https://github.com/neutrinolabs/xrdp/pull/364,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/364#issuecomment-210283308,"Example of xrdp_keyboard.ini for russian keyboard (Please add this to wiki)
[default_rdp_layouts]
rdp_layout_us=0x00000409
rdp_layout_de=0x00000407
rdp_layout_fr=0x0000040C
rdp_layout_it=0x00000410
rdp_layout_jp=0x00000411
rdp_layout_jp2=0xe0010411
rdp_layout_jp3=0xe0200411
rdp_layout_jp4=0xe0210411
rdp_layout_ru=0x00000419
rdp_layout_se=0x0000041D
rdp_layout_pt=0x00000816
rdp_layout_br=0x00000416
rdp_layout_pl=0x00000415
[rdp_keyboard_ru]
keyboard_type=4
keyboard_subtype=1
model=pc105
options=grp:alt_shift_toggle
rdp_layouts=default_rdp_layouts
layouts_map=layouts_map_ru
[layouts_map_ru]
rdp_layout_us=us,ru
rdp_layout_ru=us,ru","Please add this to wiki

You also can do it.  If your configuration is common among Russian users, consider changing xrdp_keyboard.ini in the repository.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,364,2016-04-14T19:40:37Z,2016-08-30T00:28:25Z,2016-09-09T07:05:30Z,MERGED,True,9,0,1,https://github.com/laigor,Allows use the xkb options that for example allows you to specify a key combination to change the layouts.,1,[],https://github.com/neutrinolabs/xrdp/pull/364,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/364#issuecomment-243298143,"Example of xrdp_keyboard.ini for russian keyboard (Please add this to wiki)
[default_rdp_layouts]
rdp_layout_us=0x00000409
rdp_layout_de=0x00000407
rdp_layout_fr=0x0000040C
rdp_layout_it=0x00000410
rdp_layout_jp=0x00000411
rdp_layout_jp2=0xe0010411
rdp_layout_jp3=0xe0200411
rdp_layout_jp4=0xe0210411
rdp_layout_ru=0x00000419
rdp_layout_se=0x0000041D
rdp_layout_pt=0x00000816
rdp_layout_br=0x00000416
rdp_layout_pl=0x00000415
[rdp_keyboard_ru]
keyboard_type=4
keyboard_subtype=1
model=pc105
options=grp:alt_shift_toggle
rdp_layouts=default_rdp_layouts
layouts_map=layouts_map_ru
[layouts_map_ru]
rdp_layout_us=us,ru
rdp_layout_ru=us,ru",Merge as Jay +1-ed to #363.  The difference between #363 and #364 is the branch.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,364,2016-04-14T19:40:37Z,2016-08-30T00:28:25Z,2016-09-09T07:05:30Z,MERGED,True,9,0,1,https://github.com/laigor,Allows use the xkb options that for example allows you to specify a key combination to change the layouts.,1,[],https://github.com/neutrinolabs/xrdp/pull/364,https://github.com/coolemza,4,https://github.com/neutrinolabs/xrdp/pull/364#issuecomment-243620222,"Example of xrdp_keyboard.ini for russian keyboard (Please add this to wiki)
[default_rdp_layouts]
rdp_layout_us=0x00000409
rdp_layout_de=0x00000407
rdp_layout_fr=0x0000040C
rdp_layout_it=0x00000410
rdp_layout_jp=0x00000411
rdp_layout_jp2=0xe0010411
rdp_layout_jp3=0xe0200411
rdp_layout_jp4=0xe0210411
rdp_layout_ru=0x00000419
rdp_layout_se=0x0000041D
rdp_layout_pt=0x00000816
rdp_layout_br=0x00000416
rdp_layout_pl=0x00000415
[rdp_keyboard_ru]
keyboard_type=4
keyboard_subtype=1
model=pc105
options=grp:alt_shift_toggle
rdp_layouts=default_rdp_layouts
layouts_map=layouts_map_ru
[layouts_map_ru]
rdp_layout_us=us,ru
rdp_layout_ru=us,ru","don't work in debian 8.5, build with X11rdp-o-matic, added entries from above, options not passed:
lc@debdev:~$ setxkbmap -print -verbose
Trying to build keymap using the following components:
keycodes:   xfree86+aliases(qwerty)
types:      complete
compat:     complete
symbols:    pc+us+inet(pc105)+ru:2
geometry:   pc(pc105)
xkb_keymap {
xkb_keycodes  { include ""xfree86+aliases(qwerty)""   };
xkb_types     { include ""complete""  };
xkb_compat    { include ""complete""  };
xkb_symbols   { include ""pc+us+inet(pc105)+ru:2""    };
xkb_geometry  { include ""pc(pc105)"" };
};",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,364,2016-04-14T19:40:37Z,2016-08-30T00:28:25Z,2016-09-09T07:05:30Z,MERGED,True,9,0,1,https://github.com/laigor,Allows use the xkb options that for example allows you to specify a key combination to change the layouts.,1,[],https://github.com/neutrinolabs/xrdp/pull/364,https://github.com/metalefty,5,https://github.com/neutrinolabs/xrdp/pull/364#issuecomment-243629915,"Example of xrdp_keyboard.ini for russian keyboard (Please add this to wiki)
[default_rdp_layouts]
rdp_layout_us=0x00000409
rdp_layout_de=0x00000407
rdp_layout_fr=0x0000040C
rdp_layout_it=0x00000410
rdp_layout_jp=0x00000411
rdp_layout_jp2=0xe0010411
rdp_layout_jp3=0xe0200411
rdp_layout_jp4=0xe0210411
rdp_layout_ru=0x00000419
rdp_layout_se=0x0000041D
rdp_layout_pt=0x00000816
rdp_layout_br=0x00000416
rdp_layout_pl=0x00000415
[rdp_keyboard_ru]
keyboard_type=4
keyboard_subtype=1
model=pc105
options=grp:alt_shift_toggle
rdp_layouts=default_rdp_layouts
layouts_map=layouts_map_ru
[layouts_map_ru]
rdp_layout_us=us,ru
rdp_layout_ru=us,ru",Some more works needed to apply keyboard options.  Please wait for a while.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,364,2016-04-14T19:40:37Z,2016-08-30T00:28:25Z,2016-09-09T07:05:30Z,MERGED,True,9,0,1,https://github.com/laigor,Allows use the xkb options that for example allows you to specify a key combination to change the layouts.,1,[],https://github.com/neutrinolabs/xrdp/pull/364,https://github.com/metalefty,6,https://github.com/neutrinolabs/xrdp/pull/364#issuecomment-244282861,"Example of xrdp_keyboard.ini for russian keyboard (Please add this to wiki)
[default_rdp_layouts]
rdp_layout_us=0x00000409
rdp_layout_de=0x00000407
rdp_layout_fr=0x0000040C
rdp_layout_it=0x00000410
rdp_layout_jp=0x00000411
rdp_layout_jp2=0xe0010411
rdp_layout_jp3=0xe0200411
rdp_layout_jp4=0xe0210411
rdp_layout_ru=0x00000419
rdp_layout_se=0x0000041D
rdp_layout_pt=0x00000816
rdp_layout_br=0x00000416
rdp_layout_pl=0x00000415
[rdp_keyboard_ru]
keyboard_type=4
keyboard_subtype=1
model=pc105
options=grp:alt_shift_toggle
rdp_layouts=default_rdp_layouts
layouts_map=layouts_map_ru
[layouts_map_ru]
rdp_layout_us=us,ru
rdp_layout_ru=us,ru",@coolemza I did it #417. Can you try?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,364,2016-04-14T19:40:37Z,2016-08-30T00:28:25Z,2016-09-09T07:05:30Z,MERGED,True,9,0,1,https://github.com/laigor,Allows use the xkb options that for example allows you to specify a key combination to change the layouts.,1,[],https://github.com/neutrinolabs/xrdp/pull/364,https://github.com/coolemza,7,https://github.com/neutrinolabs/xrdp/pull/364#issuecomment-244572446,"Example of xrdp_keyboard.ini for russian keyboard (Please add this to wiki)
[default_rdp_layouts]
rdp_layout_us=0x00000409
rdp_layout_de=0x00000407
rdp_layout_fr=0x0000040C
rdp_layout_it=0x00000410
rdp_layout_jp=0x00000411
rdp_layout_jp2=0xe0010411
rdp_layout_jp3=0xe0200411
rdp_layout_jp4=0xe0210411
rdp_layout_ru=0x00000419
rdp_layout_se=0x0000041D
rdp_layout_pt=0x00000816
rdp_layout_br=0x00000416
rdp_layout_pl=0x00000415
[rdp_keyboard_ru]
keyboard_type=4
keyboard_subtype=1
model=pc105
options=grp:alt_shift_toggle
rdp_layouts=default_rdp_layouts
layouts_map=layouts_map_ru
[layouts_map_ru]
rdp_layout_us=us,ru
rdp_layout_ru=us,ru","sure, what is the way to build this pull request with xrdp-o-matic? i tried ""xrdp-o-matic --branch devel --justdoit"" then applied pull request to xrdp_0.9.0+devel source dir, than again ""xrdp-o-matic --branch devel --justdoit"" but got errors like:
dpkg-source: error: cannot represent change to xorg/X11R7.6/build_dir/xorg-server-1.9.3/xfixes/.libs/libxfixes.a: binary file contents changed",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,364,2016-04-14T19:40:37Z,2016-08-30T00:28:25Z,2016-09-09T07:05:30Z,MERGED,True,9,0,1,https://github.com/laigor,Allows use the xkb options that for example allows you to specify a key combination to change the layouts.,1,[],https://github.com/neutrinolabs/xrdp/pull/364,https://github.com/metalefty,8,https://github.com/neutrinolabs/xrdp/pull/364#issuecomment-244637646,"Example of xrdp_keyboard.ini for russian keyboard (Please add this to wiki)
[default_rdp_layouts]
rdp_layout_us=0x00000409
rdp_layout_de=0x00000407
rdp_layout_fr=0x0000040C
rdp_layout_it=0x00000410
rdp_layout_jp=0x00000411
rdp_layout_jp2=0xe0010411
rdp_layout_jp3=0xe0200411
rdp_layout_jp4=0xe0210411
rdp_layout_ru=0x00000419
rdp_layout_se=0x0000041D
rdp_layout_pt=0x00000816
rdp_layout_br=0x00000416
rdp_layout_pl=0x00000415
[rdp_keyboard_ru]
keyboard_type=4
keyboard_subtype=1
model=pc105
options=grp:alt_shift_toggle
rdp_layouts=default_rdp_layouts
layouts_map=layouts_map_ru
[layouts_map_ru]
rdp_layout_us=us,ru
rdp_layout_ru=us,ru","Edit X11rdp-o-matic.sh, s/neutrinolabs/metalefty/g.
And then do with --branch apply-keyboard-options.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,364,2016-04-14T19:40:37Z,2016-08-30T00:28:25Z,2016-09-09T07:05:30Z,MERGED,True,9,0,1,https://github.com/laigor,Allows use the xkb options that for example allows you to specify a key combination to change the layouts.,1,[],https://github.com/neutrinolabs/xrdp/pull/364,https://github.com/metalefty,9,https://github.com/neutrinolabs/xrdp/pull/364#issuecomment-245836382,"Example of xrdp_keyboard.ini for russian keyboard (Please add this to wiki)
[default_rdp_layouts]
rdp_layout_us=0x00000409
rdp_layout_de=0x00000407
rdp_layout_fr=0x0000040C
rdp_layout_it=0x00000410
rdp_layout_jp=0x00000411
rdp_layout_jp2=0xe0010411
rdp_layout_jp3=0xe0200411
rdp_layout_jp4=0xe0210411
rdp_layout_ru=0x00000419
rdp_layout_se=0x0000041D
rdp_layout_pt=0x00000816
rdp_layout_br=0x00000416
rdp_layout_pl=0x00000415
[rdp_keyboard_ru]
keyboard_type=4
keyboard_subtype=1
model=pc105
options=grp:alt_shift_toggle
rdp_layouts=default_rdp_layouts
layouts_map=layouts_map_ru
[layouts_map_ru]
rdp_layout_us=us,ru
rdp_layout_ru=us,ru",@coolemza The fix has been merged into devel branch.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,366,2016-04-23T07:37:25Z,2016-04-27T06:32:00Z,2016-05-06T15:37:47Z,MERGED,True,26,11,2,https://github.com/proski,Add unnamed semaphore support on Mac OS,1,[],https://github.com/neutrinolabs/xrdp/pull/366,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/366,"Standard unnamed semaphores (sem_init, sem_destroy) are not functional on Mac OS. The compiler reports that they are deprecated.
So I used the Grand Central Dispatch implementation. It is standard on Mac OS, nothing needed to be installed (I have XCode installed already to have a development environment).
I considered using named semaphores (sem_open), but they can outlive the process and need special care to be cleaned up.
I made libscp_lock.c use semaphores through the thread_calls wrapper. That should work on all operating systems.","Standard unnamed semaphores (sem_init, sem_destroy) are not functional on Mac OS. The compiler reports that they are deprecated.
So I used the Grand Central Dispatch implementation. It is standard on Mac OS, nothing needed to be installed (I have XCode installed already to have a development environment).
I considered using named semaphores (sem_open), but they can outlive the process and need special care to be cleaned up.
I made libscp_lock.c use semaphores through the thread_calls wrapper. That should work on all operating systems.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,366,2016-04-23T07:37:25Z,2016-04-27T06:32:00Z,2016-05-06T15:37:47Z,MERGED,True,26,11,2,https://github.com/proski,Add unnamed semaphore support on Mac OS,1,[],https://github.com/neutrinolabs/xrdp/pull/366,https://github.com/jsorg71,2,https://github.com/neutrinolabs/xrdp/pull/366#issuecomment-213904636,"Standard unnamed semaphores (sem_init, sem_destroy) are not functional on Mac OS. The compiler reports that they are deprecated.
So I used the Grand Central Dispatch implementation. It is standard on Mac OS, nothing needed to be installed (I have XCode installed already to have a development environment).
I considered using named semaphores (sem_open), but they can outlive the process and need special care to be cleaned up.
I made libscp_lock.c use semaphores through the thread_calls wrapper. That should work on all operating systems.",+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,370,2016-05-05T07:37:28Z,2016-05-06T13:05:38Z,2016-05-06T13:05:38Z,MERGED,True,85,86,37,https://github.com/proski,Typo fixes and more,5,[],https://github.com/neutrinolabs/xrdp/pull/370,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/370,"I used a more sophisticated script to run the sources through the spell checker while suppressing uninteresting stuff (hex constants, include file names etc), which allowed me to catch more typos. Some changes are not strictly typo fixes, so they have been split into separate patches.","I used a more sophisticated script to run the sources through the spell checker while suppressing uninteresting stuff (hex constants, include file names etc), which allowed me to catch more typos. Some changes are not strictly typo fixes, so they have been split into separate patches.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,370,2016-05-05T07:37:28Z,2016-05-06T13:05:38Z,2016-05-06T13:05:38Z,MERGED,True,85,86,37,https://github.com/proski,Typo fixes and more,5,[],https://github.com/neutrinolabs/xrdp/pull/370,https://github.com/jsorg71,2,https://github.com/neutrinolabs/xrdp/pull/370#issuecomment-217351817,"I used a more sophisticated script to run the sources through the spell checker while suppressing uninteresting stuff (hex constants, include file names etc), which allowed me to catch more typos. Some changes are not strictly typo fixes, so they have been split into separate patches.",+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,371,2016-05-06T11:36:17Z,2016-05-29T18:32:38Z,2016-05-29T18:32:38Z,CLOSED,False,6,4,3,https://github.com/yamauchiso,Master,19,[],https://github.com/neutrinolabs/xrdp/pull/371,https://github.com/yamauchiso,1,https://github.com/neutrinolabs/xrdp/pull/371,add kbd_layout param for using client keyboard settings,add kbd_layout param for using client keyboard settings,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,371,2016-05-06T11:36:17Z,2016-05-29T18:32:38Z,2016-05-29T18:32:38Z,CLOSED,False,6,4,3,https://github.com/yamauchiso,Master,19,[],https://github.com/neutrinolabs/xrdp/pull/371,https://github.com/itamarjp,2,https://github.com/neutrinolabs/xrdp/pull/371#issuecomment-217431415,add kbd_layout param for using client keyboard settings,what are the purpose of this commit ?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,372,2016-05-07T02:14:45Z,2016-05-12T03:15:29Z,2016-06-21T07:10:40Z,MERGED,True,17,36,4,https://github.com/proski,Fix warnings reported by gcc 5.3.0 on Mac OS,5,[],https://github.com/neutrinolabs/xrdp/pull/372,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/372,This should make xrdp warning-free and set a higher standard for new code contributions.,This should make xrdp warning-free and set a higher standard for new code contributions.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,372,2016-05-07T02:14:45Z,2016-05-12T03:15:29Z,2016-06-21T07:10:40Z,MERGED,True,17,36,4,https://github.com/proski,Fix warnings reported by gcc 5.3.0 on Mac OS,5,[],https://github.com/neutrinolabs/xrdp/pull/372,https://github.com/jsorg71,2,https://github.com/neutrinolabs/xrdp/pull/372#issuecomment-217782344,This should make xrdp warning-free and set a higher standard for new code contributions.,"+1
Thanks for your work on this.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,379,2016-05-31T01:03:09Z,2016-05-31T05:02:58Z,2016-05-31T05:02:59Z,MERGED,True,4,0,1,https://github.com/SvenDowideit,Mention the channel code in man page.,1,[],https://github.com/neutrinolabs/xrdp/pull/379,https://github.com/SvenDowideit,1,https://github.com/neutrinolabs/xrdp/pull/379,"Signed-off-by: Sven Dowideit SvenDowideit@home.org.au
seriously obfuscated.","Signed-off-by: Sven Dowideit SvenDowideit@home.org.au
seriously obfuscated.",True,{'THUMBS_UP': ['https://github.com/metalefty']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,382,2016-06-02T06:23:12Z,2016-08-18T06:05:37Z,2016-08-18T06:05:37Z,CLOSED,False,2,0,1,https://github.com/gitter-badger,Add a Gitter chat link to readme.txt,1,[],https://github.com/neutrinolabs/xrdp/pull/382,https://github.com/gitter-badger,1,https://github.com/neutrinolabs/xrdp/pull/382,"neutrinolabs/xrdp now has a Chat Room on Gitter
@speidy has just created a chat room. You can visit it here: https://gitter.im/neutrinolabs/xrdp.
This pull-request adds a link to your readme.txt.
If my aim is a little off, please let me know.
Happy chatting.
PS: Click here if you would prefer not to receive automatic pull-requests from Gitter in future.","neutrinolabs/xrdp now has a Chat Room on Gitter
@speidy has just created a chat room. You can visit it here: https://gitter.im/neutrinolabs/xrdp.
This pull-request adds a link to your readme.txt.
If my aim is a little off, please let me know.
Happy chatting.
PS: Click here if you would prefer not to receive automatic pull-requests from Gitter in future.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,382,2016-06-02T06:23:12Z,2016-08-18T06:05:37Z,2016-08-18T06:05:37Z,CLOSED,False,2,0,1,https://github.com/gitter-badger,Add a Gitter chat link to readme.txt,1,[],https://github.com/neutrinolabs/xrdp/pull/382,https://github.com/itamarjp,2,https://github.com/neutrinolabs/xrdp/pull/382#issuecomment-223562660,"neutrinolabs/xrdp now has a Chat Room on Gitter
@speidy has just created a chat room. You can visit it here: https://gitter.im/neutrinolabs/xrdp.
This pull-request adds a link to your readme.txt.
If my aim is a little off, please let me know.
Happy chatting.
PS: Click here if you would prefer not to receive automatic pull-requests from Gitter in future.",what do you think about a telegram group ?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,382,2016-06-02T06:23:12Z,2016-08-18T06:05:37Z,2016-08-18T06:05:37Z,CLOSED,False,2,0,1,https://github.com/gitter-badger,Add a Gitter chat link to readme.txt,1,[],https://github.com/neutrinolabs/xrdp/pull/382,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/382#issuecomment-240632103,"neutrinolabs/xrdp now has a Chat Room on Gitter
@speidy has just created a chat room. You can visit it here: https://gitter.im/neutrinolabs/xrdp.
This pull-request adds a link to your readme.txt.
If my aim is a little off, please let me know.
Happy chatting.
PS: Click here if you would prefer not to receive automatic pull-requests from Gitter in future.",Closing automatically raised pull request.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,384,2016-06-11T09:06:13Z,2016-08-05T21:44:34Z,2016-08-05T21:44:34Z,MERGED,True,25,6,1,https://github.com/CarstenGrohmann,Improve certificate log messages,1,[],https://github.com/neutrinolabs/xrdp/pull/384,https://github.com/CarstenGrohmann,1,https://github.com/neutrinolabs/xrdp/pull/384,"Improve some certificate related logged messages
from
[CORE ] WARNING: Invalid x.509 certificate path defined, default path will be used: /etc/xrdp/cert.pem
[CORE ] WARNING: Invalid x.509 certificate path defined, default path will be used: /etc/xrdp/key.pem

to
[INFO ] Missing definition of x.509 certificate, use default instead: /etc/xrdp/cert.pem
[INFO ] Missing definition of x.509 key file, use default instead: /etc/xrdp/key.pem

resp.
[WARNING] No absolute path to X.509 certificate, use default instead: /etc/xrdp/cert.pem
[WARNING] No absolute path to x.509 key file, use default instead: /etc/xrdp/key.pem","Improve some certificate related logged messages
from
[CORE ] WARNING: Invalid x.509 certificate path defined, default path will be used: /etc/xrdp/cert.pem
[CORE ] WARNING: Invalid x.509 certificate path defined, default path will be used: /etc/xrdp/key.pem

to
[INFO ] Missing definition of x.509 certificate, use default instead: /etc/xrdp/cert.pem
[INFO ] Missing definition of x.509 key file, use default instead: /etc/xrdp/key.pem

resp.
[WARNING] No absolute path to X.509 certificate, use default instead: /etc/xrdp/cert.pem
[WARNING] No absolute path to x.509 key file, use default instead: /etc/xrdp/key.pem",True,{'THUMBS_UP': ['https://github.com/metalefty']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,384,2016-06-11T09:06:13Z,2016-08-05T21:44:34Z,2016-08-05T21:44:34Z,MERGED,True,25,6,1,https://github.com/CarstenGrohmann,Improve certificate log messages,1,[],https://github.com/neutrinolabs/xrdp/pull/384,https://github.com/jsorg71,2,https://github.com/neutrinolabs/xrdp/pull/384#issuecomment-237455753,"Improve some certificate related logged messages
from
[CORE ] WARNING: Invalid x.509 certificate path defined, default path will be used: /etc/xrdp/cert.pem
[CORE ] WARNING: Invalid x.509 certificate path defined, default path will be used: /etc/xrdp/key.pem

to
[INFO ] Missing definition of x.509 certificate, use default instead: /etc/xrdp/cert.pem
[INFO ] Missing definition of x.509 key file, use default instead: /etc/xrdp/key.pem

resp.
[WARNING] No absolute path to X.509 certificate, use default instead: /etc/xrdp/cert.pem
[WARNING] No absolute path to x.509 key file, use default instead: /etc/xrdp/key.pem",+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,388,2016-06-20T01:01:59Z,2016-08-05T21:22:50Z,2016-08-16T04:54:19Z,MERGED,True,1,1,1,https://github.com/metalefty,sesman: Add /sbin to PATH for FreeBSD,1,['FreeBSD'],https://github.com/neutrinolabs/xrdp/pull/388,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/388,"to enable to execute FUSE mount program.
The place of FUSE mount programs are:
FreeBSD   : /sbin/mount_fusefs
GNU/Linux : /bin/fusermount
See also #387.","to enable to execute FUSE mount program.
The place of FUSE mount programs are:
FreeBSD   : /sbin/mount_fusefs
GNU/Linux : /bin/fusermount
See also #387.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,388,2016-06-20T01:01:59Z,2016-08-05T21:22:50Z,2016-08-16T04:54:19Z,MERGED,True,1,1,1,https://github.com/metalefty,sesman: Add /sbin to PATH for FreeBSD,1,['FreeBSD'],https://github.com/neutrinolabs/xrdp/pull/388,https://github.com/jsorg71,2,https://github.com/neutrinolabs/xrdp/pull/388#issuecomment-237455608,"to enable to execute FUSE mount program.
The place of FUSE mount programs are:
FreeBSD   : /sbin/mount_fusefs
GNU/Linux : /bin/fusermount
See also #387.",+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,390,2016-06-22T01:07:44Z,2016-08-05T21:38:41Z,2016-08-06T03:32:49Z,MERGED,True,690,589,82,https://github.com/proski,Cleanups and C++ compatibility,32,[],https://github.com/neutrinolabs/xrdp/pull/390,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/390,"That's a large set of patches. The common topics are hardening the code, improving logging and updating the documentation. No new features are added. No user visible changes are expected apart from the logs and the messages in the login window.
The only significant bugfix it preventing a string literal from being freed on exit in xrdp-chansrv.
prog_std.txt suggests compiling the code with a C++ compiler. I was able to do that, both with gcc and clang. Only the straightforward and obviously good results of that effort are included, the rest remains on my devel branch for further work.
The -Wwrite-strings flag has been added to enable detection of incorrect string literal access even with C compilers.
To avoid excessive casts from void* on malloc results, I introduced macros g_new and g_new0, exactly as in glib, and they do the cast automatically. I think g_new0 is very good at showing that zero-initialized memory is requested. If we start using glib, we'll have one thing less to worry about.
If any patch raises questions, please let me know, I'll take it away for separate discussion.
The code has been tested by logging in from Mac clients. That included running xrdp and xrdp-sesman in Valgrind.","That's a large set of patches. The common topics are hardening the code, improving logging and updating the documentation. No new features are added. No user visible changes are expected apart from the logs and the messages in the login window.
The only significant bugfix it preventing a string literal from being freed on exit in xrdp-chansrv.
prog_std.txt suggests compiling the code with a C++ compiler. I was able to do that, both with gcc and clang. Only the straightforward and obviously good results of that effort are included, the rest remains on my devel branch for further work.
The -Wwrite-strings flag has been added to enable detection of incorrect string literal access even with C compilers.
To avoid excessive casts from void* on malloc results, I introduced macros g_new and g_new0, exactly as in glib, and they do the cast automatically. I think g_new0 is very good at showing that zero-initialized memory is requested. If we start using glib, we'll have one thing less to worry about.
If any patch raises questions, please let me know, I'll take it away for separate discussion.
The code has been tested by logging in from Mac clients. That included running xrdp and xrdp-sesman in Valgrind.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,390,2016-06-22T01:07:44Z,2016-08-05T21:38:41Z,2016-08-06T03:32:49Z,MERGED,True,690,589,82,https://github.com/proski,Cleanups and C++ compatibility,32,[],https://github.com/neutrinolabs/xrdp/pull/390,https://github.com/jsorg71,2,https://github.com/neutrinolabs/xrdp/pull/390#issuecomment-227975818,"That's a large set of patches. The common topics are hardening the code, improving logging and updating the documentation. No new features are added. No user visible changes are expected apart from the logs and the messages in the login window.
The only significant bugfix it preventing a string literal from being freed on exit in xrdp-chansrv.
prog_std.txt suggests compiling the code with a C++ compiler. I was able to do that, both with gcc and clang. Only the straightforward and obviously good results of that effort are included, the rest remains on my devel branch for further work.
The -Wwrite-strings flag has been added to enable detection of incorrect string literal access even with C compilers.
To avoid excessive casts from void* on malloc results, I introduced macros g_new and g_new0, exactly as in glib, and they do the cast automatically. I think g_new0 is very good at showing that zero-initialized memory is requested. If we start using glib, we'll have one thing less to worry about.
If any patch raises questions, please let me know, I'll take it away for separate discussion.
The code has been tested by logging in from Mac clients. That included running xrdp and xrdp-sesman in Valgrind.","Big PR, looks good so far.  Still looking.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,390,2016-06-22T01:07:44Z,2016-08-05T21:38:41Z,2016-08-06T03:32:49Z,MERGED,True,690,589,82,https://github.com/proski,Cleanups and C++ compatibility,32,[],https://github.com/neutrinolabs/xrdp/pull/390,https://github.com/speidy,3,https://github.com/neutrinolabs/xrdp/pull/390#issuecomment-229255053,"That's a large set of patches. The common topics are hardening the code, improving logging and updating the documentation. No new features are added. No user visible changes are expected apart from the logs and the messages in the login window.
The only significant bugfix it preventing a string literal from being freed on exit in xrdp-chansrv.
prog_std.txt suggests compiling the code with a C++ compiler. I was able to do that, both with gcc and clang. Only the straightforward and obviously good results of that effort are included, the rest remains on my devel branch for further work.
The -Wwrite-strings flag has been added to enable detection of incorrect string literal access even with C compilers.
To avoid excessive casts from void* on malloc results, I introduced macros g_new and g_new0, exactly as in glib, and they do the cast automatically. I think g_new0 is very good at showing that zero-initialized memory is requested. If we start using glib, we'll have one thing less to worry about.
If any patch raises questions, please let me know, I'll take it away for separate discussion.
The code has been tested by logging in from Mac clients. That included running xrdp and xrdp-sesman in Valgrind.","+1, still need to look in more detail.
Also, i think the g_new thing should be changed in one place like in os_calls.c, so diff will be smaller. and merges will be easier.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,390,2016-06-22T01:07:44Z,2016-08-05T21:38:41Z,2016-08-06T03:32:49Z,MERGED,True,690,589,82,https://github.com/proski,Cleanups and C++ compatibility,32,[],https://github.com/neutrinolabs/xrdp/pull/390,https://github.com/proski,4,https://github.com/neutrinolabs/xrdp/pull/390#issuecomment-229267182,"That's a large set of patches. The common topics are hardening the code, improving logging and updating the documentation. No new features are added. No user visible changes are expected apart from the logs and the messages in the login window.
The only significant bugfix it preventing a string literal from being freed on exit in xrdp-chansrv.
prog_std.txt suggests compiling the code with a C++ compiler. I was able to do that, both with gcc and clang. Only the straightforward and obviously good results of that effort are included, the rest remains on my devel branch for further work.
The -Wwrite-strings flag has been added to enable detection of incorrect string literal access even with C compilers.
To avoid excessive casts from void* on malloc results, I introduced macros g_new and g_new0, exactly as in glib, and they do the cast automatically. I think g_new0 is very good at showing that zero-initialized memory is requested. If we start using glib, we'll have one thing less to worry about.
If any patch raises questions, please let me know, I'll take it away for separate discussion.
The code has been tested by logging in from Mac clients. That included running xrdp and xrdp-sesman in Valgrind.","g_new needs to be a macro. It needs to know the expected type to case the result. So all the invocations flagged by the C++ compilers need to be changed. I cannot make the diff smaller, unless I'm missing something.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,390,2016-06-22T01:07:44Z,2016-08-05T21:38:41Z,2016-08-06T03:32:49Z,MERGED,True,690,589,82,https://github.com/proski,Cleanups and C++ compatibility,32,[],https://github.com/neutrinolabs/xrdp/pull/390,https://github.com/speidy,5,https://github.com/neutrinolabs/xrdp/pull/390#issuecomment-229272966,"That's a large set of patches. The common topics are hardening the code, improving logging and updating the documentation. No new features are added. No user visible changes are expected apart from the logs and the messages in the login window.
The only significant bugfix it preventing a string literal from being freed on exit in xrdp-chansrv.
prog_std.txt suggests compiling the code with a C++ compiler. I was able to do that, both with gcc and clang. Only the straightforward and obviously good results of that effort are included, the rest remains on my devel branch for further work.
The -Wwrite-strings flag has been added to enable detection of incorrect string literal access even with C compilers.
To avoid excessive casts from void* on malloc results, I introduced macros g_new and g_new0, exactly as in glib, and they do the cast automatically. I think g_new0 is very good at showing that zero-initialized memory is requested. If we start using glib, we'll have one thing less to worry about.
If any patch raises questions, please let me know, I'll take it away for separate discussion.
The code has been tested by logging in from Mac clients. That included running xrdp and xrdp-sesman in Valgrind.","Sorry, you're right.
I still didn't review the other changes but seems like a good cleanups here.
Why does cpp compiler warn about the old g_malloc ? Is it about lack of
casting?
בתאריך יום ד׳, 29 ביוני 2016 ב-9:23 מאת Pavel Roskin <
notifications@github.com>:

g_new needs to be a macro. It needs to know the expected type to case the
result. So all the invocations flagged by the C++ compilers need to be
changed. I cannot make the diff smaller, unless I'm missing something.
—
You are receiving this because you commented.
Reply to this email directly, view it on GitHub
#390 (comment),
or mute the thread
https://github.com/notifications/unsubscribe/ADTH1AqKHfSonUlSrRh4SuzydQm3AUSRks5qQg9DgaJpZM4I7UUZ
.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,390,2016-06-22T01:07:44Z,2016-08-05T21:38:41Z,2016-08-06T03:32:49Z,MERGED,True,690,589,82,https://github.com/proski,Cleanups and C++ compatibility,32,[],https://github.com/neutrinolabs/xrdp/pull/390,https://github.com/proski,6,https://github.com/neutrinolabs/xrdp/pull/390#issuecomment-229274645,"That's a large set of patches. The common topics are hardening the code, improving logging and updating the documentation. No new features are added. No user visible changes are expected apart from the logs and the messages in the login window.
The only significant bugfix it preventing a string literal from being freed on exit in xrdp-chansrv.
prog_std.txt suggests compiling the code with a C++ compiler. I was able to do that, both with gcc and clang. Only the straightforward and obviously good results of that effort are included, the rest remains on my devel branch for further work.
The -Wwrite-strings flag has been added to enable detection of incorrect string literal access even with C compilers.
To avoid excessive casts from void* on malloc results, I introduced macros g_new and g_new0, exactly as in glib, and they do the cast automatically. I think g_new0 is very good at showing that zero-initialized memory is requested. If we start using glib, we'll have one thing less to worry about.
If any patch raises questions, please let me know, I'll take it away for separate discussion.
The code has been tested by logging in from Mac clients. That included running xrdp and xrdp-sesman in Valgrind.",Yes. C++ requires explicit cast from void pointer to other pointers. See http://stackoverflow.com/questions/605845/do-i-cast-the-result-of-malloc,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,390,2016-06-22T01:07:44Z,2016-08-05T21:38:41Z,2016-08-06T03:32:49Z,MERGED,True,690,589,82,https://github.com/proski,Cleanups and C++ compatibility,32,[],https://github.com/neutrinolabs/xrdp/pull/390,https://github.com/speidy,7,https://github.com/neutrinolabs/xrdp/pull/390#issuecomment-229280047,"That's a large set of patches. The common topics are hardening the code, improving logging and updating the documentation. No new features are added. No user visible changes are expected apart from the logs and the messages in the login window.
The only significant bugfix it preventing a string literal from being freed on exit in xrdp-chansrv.
prog_std.txt suggests compiling the code with a C++ compiler. I was able to do that, both with gcc and clang. Only the straightforward and obviously good results of that effort are included, the rest remains on my devel branch for further work.
The -Wwrite-strings flag has been added to enable detection of incorrect string literal access even with C compilers.
To avoid excessive casts from void* on malloc results, I introduced macros g_new and g_new0, exactly as in glib, and they do the cast automatically. I think g_new0 is very good at showing that zero-initialized memory is requested. If we start using glib, we'll have one thing less to worry about.
If any patch raises questions, please let me know, I'll take it away for separate discussion.
The code has been tested by logging in from Mac clients. That included running xrdp and xrdp-sesman in Valgrind.","I know that , but we did use explicit casts in xrdp code.
בתאריך יום ד׳, 29 ביוני 2016 ב-10:09 מאת Pavel Roskin <
notifications@github.com>:

Yes. C++ requires explicit cast from void pointer to other pointers. See
http://stackoverflow.com/questions/605845/do-i-cast-the-result-of-malloc
—
You are receiving this because you commented.
Reply to this email directly, view it on GitHub
#390 (comment),
or mute the thread
https://github.com/notifications/unsubscribe/ADTH1N3_NDkkekv3emSb8uGA2w03P1vRks5qQho9gaJpZM4I7UUZ
.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,390,2016-06-22T01:07:44Z,2016-08-05T21:38:41Z,2016-08-06T03:32:49Z,MERGED,True,690,589,82,https://github.com/proski,Cleanups and C++ compatibility,32,[],https://github.com/neutrinolabs/xrdp/pull/390,https://github.com/jsorg71,8,https://github.com/neutrinolabs/xrdp/pull/390#issuecomment-229281206,"That's a large set of patches. The common topics are hardening the code, improving logging and updating the documentation. No new features are added. No user visible changes are expected apart from the logs and the messages in the login window.
The only significant bugfix it preventing a string literal from being freed on exit in xrdp-chansrv.
prog_std.txt suggests compiling the code with a C++ compiler. I was able to do that, both with gcc and clang. Only the straightforward and obviously good results of that effort are included, the rest remains on my devel branch for further work.
The -Wwrite-strings flag has been added to enable detection of incorrect string literal access even with C compilers.
To avoid excessive casts from void* on malloc results, I introduced macros g_new and g_new0, exactly as in glib, and they do the cast automatically. I think g_new0 is very good at showing that zero-initialized memory is requested. If we start using glib, we'll have one thing less to worry about.
If any patch raises questions, please let me know, I'll take it away for separate discussion.
The code has been tested by logging in from Mac clients. That included running xrdp and xrdp-sesman in Valgrind.","xrdp g_malloc calls should be casting but some might not.
In C void* can be assigned to other pointer without a cast.  In C++ you need to cast or you get warning.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,390,2016-06-22T01:07:44Z,2016-08-05T21:38:41Z,2016-08-06T03:32:49Z,MERGED,True,690,589,82,https://github.com/proski,Cleanups and C++ compatibility,32,[],https://github.com/neutrinolabs/xrdp/pull/390,https://github.com/proski,9,https://github.com/neutrinolabs/xrdp/pull/390#issuecomment-230989076,"That's a large set of patches. The common topics are hardening the code, improving logging and updating the documentation. No new features are added. No user visible changes are expected apart from the logs and the messages in the login window.
The only significant bugfix it preventing a string literal from being freed on exit in xrdp-chansrv.
prog_std.txt suggests compiling the code with a C++ compiler. I was able to do that, both with gcc and clang. Only the straightforward and obviously good results of that effort are included, the rest remains on my devel branch for further work.
The -Wwrite-strings flag has been added to enable detection of incorrect string literal access even with C compilers.
To avoid excessive casts from void* on malloc results, I introduced macros g_new and g_new0, exactly as in glib, and they do the cast automatically. I think g_new0 is very good at showing that zero-initialized memory is requested. If we start using glib, we'll have one thing less to worry about.
If any patch raises questions, please let me know, I'll take it away for separate discussion.
The code has been tested by logging in from Mac clients. That included running xrdp and xrdp-sesman in Valgrind.","Is anything needed on my part?
The reason I introduced g_new() is to avoid new casts where they were missing. Eventually, calls to g_malloc() with casts could be converted to g_new(), but it would be a big change. The point of this branch is to fix C++ errors and warnings without negatively affecting readability.
Also, I have discovered that ''Use g_strdup() for xrdp-chansrv program name, it's freed on exit"" is not needed. It fixes a warning, but a better fix would be to use const strings for application and log name and fix all invocations. I think it would be easier to merge this branch as is and then do a cleanup on a separate branch. But if anyone insists, I can remove that patch from the branch.
The reason I work on the warnings is because I want any future fixes to be held against higher coding standards. It's easy to introduce bugs if nobody looks at the warnings. I don't want to add more patches if I don't get feedback.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,390,2016-06-22T01:07:44Z,2016-08-05T21:38:41Z,2016-08-06T03:32:49Z,MERGED,True,690,589,82,https://github.com/proski,Cleanups and C++ compatibility,32,[],https://github.com/neutrinolabs/xrdp/pull/390,https://github.com/blackcrack,10,https://github.com/neutrinolabs/xrdp/pull/390#issuecomment-231064130,"That's a large set of patches. The common topics are hardening the code, improving logging and updating the documentation. No new features are added. No user visible changes are expected apart from the logs and the messages in the login window.
The only significant bugfix it preventing a string literal from being freed on exit in xrdp-chansrv.
prog_std.txt suggests compiling the code with a C++ compiler. I was able to do that, both with gcc and clang. Only the straightforward and obviously good results of that effort are included, the rest remains on my devel branch for further work.
The -Wwrite-strings flag has been added to enable detection of incorrect string literal access even with C compilers.
To avoid excessive casts from void* on malloc results, I introduced macros g_new and g_new0, exactly as in glib, and they do the cast automatically. I think g_new0 is very good at showing that zero-initialized memory is requested. If we start using glib, we'll have one thing less to worry about.
If any patch raises questions, please let me know, I'll take it away for separate discussion.
The code has been tested by logging in from Mac clients. That included running xrdp and xrdp-sesman in Valgrind.","hi,
i have fellow the whole changes in the last month.. and want say,
they should first clean up bring a new version out, where it is fully fixed (you can maybe help with)
before you make some big changed for have a clean Version for distriebutioning
and then it's this maybe not bad, if you change this whole with g_new() and something
for the next version.. xrdp should bring out/up a next version and come to 1.0 or something ;)
( i be inquisitive how long it's need for 1.0 :) )
best regards
Blacky",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,390,2016-06-22T01:07:44Z,2016-08-05T21:38:41Z,2016-08-06T03:32:49Z,MERGED,True,690,589,82,https://github.com/proski,Cleanups and C++ compatibility,32,[],https://github.com/neutrinolabs/xrdp/pull/390,https://github.com/proski,11,https://github.com/neutrinolabs/xrdp/pull/390#issuecomment-231146589,"That's a large set of patches. The common topics are hardening the code, improving logging and updating the documentation. No new features are added. No user visible changes are expected apart from the logs and the messages in the login window.
The only significant bugfix it preventing a string literal from being freed on exit in xrdp-chansrv.
prog_std.txt suggests compiling the code with a C++ compiler. I was able to do that, both with gcc and clang. Only the straightforward and obviously good results of that effort are included, the rest remains on my devel branch for further work.
The -Wwrite-strings flag has been added to enable detection of incorrect string literal access even with C compilers.
To avoid excessive casts from void* on malloc results, I introduced macros g_new and g_new0, exactly as in glib, and they do the cast automatically. I think g_new0 is very good at showing that zero-initialized memory is requested. If we start using glib, we'll have one thing less to worry about.
If any patch raises questions, please let me know, I'll take it away for separate discussion.
The code has been tested by logging in from Mac clients. That included running xrdp and xrdp-sesman in Valgrind.","I think it's telling that the whole cleanup did not reveal any user-facing issue, apart from documentation and log messages. That g_strdup() in xrdp-chansrv was supposedly one fix, but even that is not fixing a user visible bug, as there is another g_strdup() in log_start_from_param(). The code quality is reasonable. We can release 0.9.1 now, with or without changes from this branch. Version 1.0 is a once-in-a-lifetime event, let's do it after the documentation is improved.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,390,2016-06-22T01:07:44Z,2016-08-05T21:38:41Z,2016-08-06T03:32:49Z,MERGED,True,690,589,82,https://github.com/proski,Cleanups and C++ compatibility,32,[],https://github.com/neutrinolabs/xrdp/pull/390,https://github.com/blackcrack,12,https://github.com/neutrinolabs/xrdp/pull/390#issuecomment-231264547,"That's a large set of patches. The common topics are hardening the code, improving logging and updating the documentation. No new features are added. No user visible changes are expected apart from the logs and the messages in the login window.
The only significant bugfix it preventing a string literal from being freed on exit in xrdp-chansrv.
prog_std.txt suggests compiling the code with a C++ compiler. I was able to do that, both with gcc and clang. Only the straightforward and obviously good results of that effort are included, the rest remains on my devel branch for further work.
The -Wwrite-strings flag has been added to enable detection of incorrect string literal access even with C compilers.
To avoid excessive casts from void* on malloc results, I introduced macros g_new and g_new0, exactly as in glib, and they do the cast automatically. I think g_new0 is very good at showing that zero-initialized memory is requested. If we start using glib, we'll have one thing less to worry about.
If any patch raises questions, please let me know, I'll take it away for separate discussion.
The code has been tested by logging in from Mac clients. That included running xrdp and xrdp-sesman in Valgrind.","@proski : clear if there be no stable and the distriebutions do not obstruct this lil small nice proggy for rdp (which also high usable for Reactos :))))  ) so long it's not installed in the whole distro's ..rdp make the whole WinNT Linux connectivity really usable and more easily insteat the an bit more technical and complicated vnc. And i bet, with this Xrdp will makes the whole much easyer , i looking forward if it's into the whole Distros include, also OpenMandriva. 👍 yepp",True,{'HEART': ['https://github.com/blackcrack']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,390,2016-06-22T01:07:44Z,2016-08-05T21:38:41Z,2016-08-06T03:32:49Z,MERGED,True,690,589,82,https://github.com/proski,Cleanups and C++ compatibility,32,[],https://github.com/neutrinolabs/xrdp/pull/390,https://github.com/proski,13,https://github.com/neutrinolabs/xrdp/pull/390#issuecomment-231265513,"That's a large set of patches. The common topics are hardening the code, improving logging and updating the documentation. No new features are added. No user visible changes are expected apart from the logs and the messages in the login window.
The only significant bugfix it preventing a string literal from being freed on exit in xrdp-chansrv.
prog_std.txt suggests compiling the code with a C++ compiler. I was able to do that, both with gcc and clang. Only the straightforward and obviously good results of that effort are included, the rest remains on my devel branch for further work.
The -Wwrite-strings flag has been added to enable detection of incorrect string literal access even with C compilers.
To avoid excessive casts from void* on malloc results, I introduced macros g_new and g_new0, exactly as in glib, and they do the cast automatically. I think g_new0 is very good at showing that zero-initialized memory is requested. If we start using glib, we'll have one thing less to worry about.
If any patch raises questions, please let me know, I'll take it away for separate discussion.
The code has been tested by logging in from Mac clients. That included running xrdp and xrdp-sesman in Valgrind.","Please don't merge, there is a bug somewhere that affects the login screen. I'll update the branch once I fix it.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,390,2016-06-22T01:07:44Z,2016-08-05T21:38:41Z,2016-08-06T03:32:49Z,MERGED,True,690,589,82,https://github.com/proski,Cleanups and C++ compatibility,32,[],https://github.com/neutrinolabs/xrdp/pull/390,https://github.com/proski,14,https://github.com/neutrinolabs/xrdp/pull/390#issuecomment-231285652,"That's a large set of patches. The common topics are hardening the code, improving logging and updating the documentation. No new features are added. No user visible changes are expected apart from the logs and the messages in the login window.
The only significant bugfix it preventing a string literal from being freed on exit in xrdp-chansrv.
prog_std.txt suggests compiling the code with a C++ compiler. I was able to do that, both with gcc and clang. Only the straightforward and obviously good results of that effort are included, the rest remains on my devel branch for further work.
The -Wwrite-strings flag has been added to enable detection of incorrect string literal access even with C compilers.
To avoid excessive casts from void* on malloc results, I introduced macros g_new and g_new0, exactly as in glib, and they do the cast automatically. I think g_new0 is very good at showing that zero-initialized memory is requested. If we start using glib, we'll have one thing less to worry about.
If any patch raises questions, please let me know, I'll take it away for separate discussion.
The code has been tested by logging in from Mac clients. That included running xrdp and xrdp-sesman in Valgrind.","I've updated the patch set. It's OK to merge now.
The patch named ""Make xrdp_wm_log_msg() log its output"" removed an unrelated call accidentally, which broke the log window on login failure. That has been fixed.
Instead of running g_strdup() on program_name, program_name has been made a constant string, so the unnecessary path to use g_strdup() for xrdp-chansrv program name has been removed.
The C++ port is complete now. I have cleaned up and included the remaining patches. That includes a patch that makes it the code compiled with C++ run correctly and load modules.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,394,2016-06-28T16:03:55Z,2016-08-05T21:17:37Z,2016-08-05T21:17:37Z,MERGED,True,89,1,2,https://github.com/AkiraPenguin,Fix pc105-jp-Henkan key.,2,['keyboard'],https://github.com/neutrinolabs/xrdp/pull/394,https://github.com/AkiraPenguin,1,https://github.com/neutrinolabs/xrdp/pull/394,"PC105-jp keyboard need xkeyboard-config version 2.11 or later.
xkeyboard-config version 2.11 or later need libX11 version 1.4.3 or later.
I was build XRDP with xkeyboard-config-2.11 and libX11-1.4.3.
But it was not accept keyboard.
I was done backport because there is no way.
This is the interim fix.
Please build someone X11 by the newer libraries.","PC105-jp keyboard need xkeyboard-config version 2.11 or later.
xkeyboard-config version 2.11 or later need libX11 version 1.4.3 or later.
I was build XRDP with xkeyboard-config-2.11 and libX11-1.4.3.
But it was not accept keyboard.
I was done backport because there is no way.
This is the interim fix.
Please build someone X11 by the newer libraries.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,394,2016-06-28T16:03:55Z,2016-08-05T21:17:37Z,2016-08-05T21:17:37Z,MERGED,True,89,1,2,https://github.com/AkiraPenguin,Fix pc105-jp-Henkan key.,2,['keyboard'],https://github.com/neutrinolabs/xrdp/pull/394,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/394#issuecomment-229242636,"PC105-jp keyboard need xkeyboard-config version 2.11 or later.
xkeyboard-config version 2.11 or later need libX11 version 1.4.3 or later.
I was build XRDP with xkeyboard-config-2.11 and libX11-1.4.3.
But it was not accept keyboard.
I was done backport because there is no way.
This is the interim fix.
Please build someone X11 by the newer libraries.","I have no objection to backport to fix the bug in case of using pc105 keyboard with jp layout but concern about changing default keyboard model in xrdp_keyboard.ini.
I have some questions.

How is henkan key broken now?
Which is fine jp106 or pc105-jp for most of Japanese?

Can I ask you the detail of this issue in Japanese? Whichever xrdp-jp mailing list or here is OK.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,394,2016-06-28T16:03:55Z,2016-08-05T21:17:37Z,2016-08-05T21:17:37Z,MERGED,True,89,1,2,https://github.com/AkiraPenguin,Fix pc105-jp-Henkan key.,2,['keyboard'],https://github.com/neutrinolabs/xrdp/pull/394,https://github.com/AkiraPenguin,3,https://github.com/neutrinolabs/xrdp/pull/394#issuecomment-229278137,"PC105-jp keyboard need xkeyboard-config version 2.11 or later.
xkeyboard-config version 2.11 or later need libX11 version 1.4.3 or later.
I was build XRDP with xkeyboard-config-2.11 and libX11-1.4.3.
But it was not accept keyboard.
I was done backport because there is no way.
This is the interim fix.
Please build someone X11 by the newer libraries.","How is henkan key broken now?
Older version of xkeyboard-config, Henkan is overwrited to XF86AudioMedia.


Send client information from PC.
libxrdp/xrdp_sec.c : xrdp_load_keyboard_layout()
Surface Pro 3 Type cover => ( keylayout=0xe0010411, keyboard_type=4,  keyboard_subtype=0 )


Get keyboard model and keyboard layout by client information.
( keylayout=0xe0010411, keyboard_type=4,  keyboard_subtype = 0 ) => ( model=pc105, layout=jp )


Get symbol from keyboard model and keyboard layout.
/opt/X11rdp/share/X11/xkb/rurues/base
( model=pc105, layout=jp ) => ""pc+jp+inet(pc105)""


Get keycodes from symbol.
/opt/X11rdp/share/X11/xkb/keycodes/xfree86
<XFER> = 129
alias <I01> = <XFER>
/opt/X11rdp/share/X11/xkb/symbols/*
jp
<XFER> => Henkan, Mode_switch
inet(""pc105"")
include inet(""media_nav_common"")
include(""media_common"")
<I01> ( alias <XFER> ) => XF86AudioMedia << overwrite


Which is fine jp106 or pc105-jp for most of Japanese?
It must be pc105-jp to be able to correspond to ""Surface Pro 3 Type cover"".
And it is supported xkeyboard-config-2.11 or later.
現在はどのように henkan キーが壊れているのか?
xkeyboard-config のバージョンが古いため、jp レイアウトなのにHenkan が XF86AudioMedia となってしまいます。


PCからクライアント情報が送られます。
libxrdp/xrdp_sec.c : xrdp_load_keyboard_layout()
Surface Pro 3 Type cover => ( keylayout=0xe0010411, keyboard_type=4,  keyboard_subtype=0 )


キーボードのモデルとレイアウトをクライアント情報から得ます。
( keylayout=0xe0010411, keyboard_type=4,  keyboard_subtype = 0 ) => ( model=pc105, layout=jp )


シンボルをキーボードのモデルとレイアウトから得ます。
/opt/X11rdp/share/X11/xkb/rurues/base
( model=pc105, layout=jp ) => ""pc+jp+inet(pc105)""


シンボルからキーコードを得ます。
/opt/X11rdp/share/X11/xkb/keycodes/xfree86
<XFER> = 129
alias <I01> = <XFER>
/opt/X11rdp/share/X11/xkb/symbols/*
jp
""common""
<XFER> => Henkan, Mode_switch
inet
""pc105""
include inet(""media_nav_common"")
include(""media_common"")
<I01> ( alias <XFER> ) => XF86AudioMedia << 上書きされる


jp106 と pc105-jp のどちらが日本語キーボードとして望ましいか?
少なくとも ""Surface Pro 3 Type cover"" に対応するには pc105-jp である必要があります。
さらに xkeyboard-config-2.11 以降のバージョンではこのように対応されています。
pc105-jp で対応しておけば将来も問題がないと思います。",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,394,2016-06-28T16:03:55Z,2016-08-05T21:17:37Z,2016-08-05T21:17:37Z,MERGED,True,89,1,2,https://github.com/AkiraPenguin,Fix pc105-jp-Henkan key.,2,['keyboard'],https://github.com/neutrinolabs/xrdp/pull/394,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/394#issuecomment-229562796,"PC105-jp keyboard need xkeyboard-config version 2.11 or later.
xkeyboard-config version 2.11 or later need libX11 version 1.4.3 or later.
I was build XRDP with xkeyboard-config-2.11 and libX11-1.4.3.
But it was not accept keyboard.
I was done backport because there is no way.
This is the interim fix.
Please build someone X11 by the newer libraries.","詳細ありがとうございます。
x11rdpはまだメンテナンスされていますが、X回りのライブラリやツールを自前で持つx11rdpよりも、ディストリビューション収録のXコンポーネントを利用して最低限のドライバ部分のみを取り込むxorgxrdpに移行する方向にあります。
xorgxrdpの場合、ディストリビューションのxkeybaord-configをそのまま使うので、2.11以降なら問題は発生しないのではないかと思います。x11rdpへはxkeyboard-config 2.11以降からバックポートするとして、xorgxrdpで問題が発生しないなら、x11rdpへはこの暫定的な対応のみとし正攻法での対応は見送っても良いかも知れません。
まず、xorgxrdpで Surface Pro 3 Type cover を使った場合、jp106とpc105-jpの双方でどうなるか確かめてもらえますか？他のキーボードでもjp106からpc105-jpに変更したことによる悪影響がなければxrdp_keyboard.iniの方をpc105に変更するのには賛成です。

xorgxrdp can use distribution's xkeyboard-config. It will be newer than x11rdp's 2.10. Henkan key will work properly in xorgxrdp. Just for my interest, I want know if it works in xorgxrdp.
I agree backporting keybaord info from <2.11 to 2.10.  IMO, about switching keyboard model for Japanese keyboard jp106 -> pc105, more confirmation needed.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,394,2016-06-28T16:03:55Z,2016-08-05T21:17:37Z,2016-08-05T21:17:37Z,MERGED,True,89,1,2,https://github.com/AkiraPenguin,Fix pc105-jp-Henkan key.,2,['keyboard'],https://github.com/neutrinolabs/xrdp/pull/394,https://github.com/AkiraPenguin,5,https://github.com/neutrinolabs/xrdp/pull/394#issuecomment-229585854,"PC105-jp keyboard need xkeyboard-config version 2.11 or later.
xkeyboard-config version 2.11 or later need libX11 version 1.4.3 or later.
I was build XRDP with xkeyboard-config-2.11 and libX11-1.4.3.
But it was not accept keyboard.
I was done backport because there is no way.
This is the interim fix.
Please build someone X11 by the newer libraries.","英語に自身がありませんので、日本語で失礼します。
わかりにくかったかもしれませんので、今回の対応についてもう一度説明します。

xkeyboard-config のバージョンが 2.10 以前だと model=pc105 の場合は Henkan キーが XF86AudioMedia キーに割り当てられてしまいます。
xrdp_keyboard.ini の rdp_keyboard_jp セクションが keyboard_type=7, keyboard_subtype=2 の場合としてすでに存在していたので model=pc106 適用をして回避するように #206 で暫定対応しました。明確に jp106 と判断しているわけではなく、pc105 となるのを回避するためです。
Surface Pro 3 Type cover の場合はクライアント情報は keylayout=0xe0010411, keyboard_type=4, keyboard_subtype=0 でした。keylayout=0xe0010411 => default_rdp_layouts セクション => default_layouts_map セクション => jp という流れで jp レイアウトとなります。しかし  keyboard_type=4, keyboard_subtype=0 であるため  rdp_keyboard_jp セクションの対象とならず、デフォルトの model=pc105 となってしまいます。
結局 model=pc105, layout=jp で Henkan キーに対応する必要があります。
原因は xkeyboard-config のバージョンが古いためであったので、ローカル環境で X11rdp の使用するライブラリを xkeyboard-config-2.11, libX11-1.4.3 に変更してビルドしてみましたが、キーボードを受け付けませんでした。対処方法がわからなかったため、この方法は断念しました。
暫定対策として xkeyboard-config-2.0 へのパッチを行いました。合わせて xrdp_keyboard.ini の rdp_keyboard_jp セクションで暫定対応していた model=jp106 は明確に jp106 と判断できているわけではなく、不要となるため削除しました。

以上の経過となっています。
まあ jp レイアウトとは認識されていますので xrdp_keyboard.ini は放置しても大きな問題はないかもしれません。
逆に、勝手に jp106 と判断される弊害があったかもしれません。
xorgxrdp を使用しても x11rdp と同様に libxrdp/xrdp_sec.c によって xrdp_keyboard.ini が読み込まれるはずなので、xorgxrdp での確認は無駄な作業ではないでしょうか？
しかし、xorgxrdp は個人的には好ましい方法だと思いますし、興味があります。
現在 X11RDP-o-Matic によって Xubuntu 16.04 に XRDP をインストールしていますが、xorgxrdp をインストールして使用する方法を教えていただけますか？
いろいろ探してみましたがよくわかりません。",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,394,2016-06-28T16:03:55Z,2016-08-05T21:17:37Z,2016-08-05T21:17:37Z,MERGED,True,89,1,2,https://github.com/AkiraPenguin,Fix pc105-jp-Henkan key.,2,['keyboard'],https://github.com/neutrinolabs/xrdp/pull/394,https://github.com/metalefty,6,https://github.com/neutrinolabs/xrdp/pull/394#issuecomment-229596846,"PC105-jp keyboard need xkeyboard-config version 2.11 or later.
xkeyboard-config version 2.11 or later need libX11 version 1.4.3 or later.
I was build XRDP with xkeyboard-config-2.11 and libX11-1.4.3.
But it was not accept keyboard.
I was done backport because there is no way.
This is the interim fix.
Please build someone X11 by the newer libraries.","なるほど。Surface Pro 3 Type cover はtype/subtypeが違うんですね。
となると、type=4, subtype=0 かつ keylayout=0x????0411 の場合に model=pc105 となってしまうのがそもそも誤判定だとみなし、model=jp106 となるように修正するという方法も考えられます。
例えば以下のようなセクションををxrdp_keyboard.ini に追加して、jp106なるようにすればxkeyboard-configが古い現状のx11rdpのままでもうまくいくのではないかと思います。
設定はそらで書いてみた例なので、この通りではなく修正が必要かもしれません。
[rdp_keyboard_surfacepro3_jp]
keyboard_type=4
keyboard_subtype=0
model=jp106
rdp_layouts=default_rdp_layouts
layouts_map=default_layouts_map

xorgxrdp を使用しても x11rdp と同様に libxrdp/xrdp_sec.c によって xrdp_keyboard.ini が読み込まれるはずなので、xorgxrdp での確認は無駄な作業ではないでしょうか？

xorgxrdpは新しいバージョンのxkeyboard-configで動作確認する手段のひとつとして提案しました。
xorgxrdpを使用する場合、ディストリビューション側のxkeyboard-configが使用されるため、Xubuntu 16.04 であれば、xkeyboard-config 2.16 が使われます。ということは、xkeyboard-config のバージョンが古いのが原因(のひとつ)なので

原因は xkeyboard-config のバージョンが古いためであったので、

というのが取り除かれた状態となり、その状態でのxorgxrdpでの確認が無駄だとは思いません。
xorgxrdpのインストール
Debian/Ubuntu用のインストーラのX11RDP-o-Maticはxorgxrdpインストール機能は現在取り組んでいる所ですので、今のところxrdpのリポジトリをcloneして手動でビルド＆インストールとなります。
RHEL/CentOS用のインストーラの X11RDP-RH-Maticにxorgxrdpをインストールするオプションがあります。
$ git clone --branch devel --recursive https://github.com/neutrinolabs/xrdp
$ cd xrdp/xorgxrdp
$ ./configure && make && make install

インストールしたら、xrdp用のドライバを組み込んだXorgが起動するかを確認します。
$ Xorg :10 -config xrdp/xorg.conf 

確認できたら ^C でXorgを終了し、xrdpログイン画面で「Session manager」を選択すると、
xorgxrdpでのセッションが起動します。",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,394,2016-06-28T16:03:55Z,2016-08-05T21:17:37Z,2016-08-05T21:17:37Z,MERGED,True,89,1,2,https://github.com/AkiraPenguin,Fix pc105-jp-Henkan key.,2,['keyboard'],https://github.com/neutrinolabs/xrdp/pull/394,https://github.com/AkiraPenguin,7,https://github.com/neutrinolabs/xrdp/pull/394#issuecomment-229702132,"PC105-jp keyboard need xkeyboard-config version 2.11 or later.
xkeyboard-config version 2.11 or later need libX11 version 1.4.3 or later.
I was build XRDP with xkeyboard-config-2.11 and libX11-1.4.3.
But it was not accept keyboard.
I was done backport because there is no way.
This is the interim fix.
Please build someone X11 by the newer libraries.","xorgxrdp のインストールについて
XRDP の xrdp/xrdpxorg/ 以下に xorgxrdp の git リポジトリから master ブランチを clone してビルド・インストールできました。
ログイン画面で「Session manager」を選択してログインも出来ました。
キーボード別のテストについて
テストした結果、以下となりました。



Keyboard
sesman-X11rdp
Session manager




Surface Pro 3 Type Cover
pc105, jp
pc104, jp


Logicool K800
jp106, jp
jp106, jp



/etx/xrdp/xrdp_keyboard.ini の rdp_keyboard_jp セクションの model=jp106 を取り除いたところ、以下となりました。



Keyboard
sesman-X11rdp
Session manager




Surface Pro 3 Type Cover
pc105, jp
pc104, jp


Logicool K800
pc105, jp
jp104, jp



sesman-X11rdp と Session manager では以下の違いがあるようです。



項目
sesman-X11rdp
Session manager




rdp_keyboard.ini
読み込んでいる
読み込んでいる


デフォルトの model
pc105
jp104


上記の設定場所
xorg/X11R7.6/rdp/rdpinput.c
xorgxrdp/xrdpkeyb/rdpKeyboard.c



現在は「pc105 か pc104 でほとんどカバーできるからいいじゃん？」という判断だと思います。
自分も同意します。
pc105-jp の場合、「変換」キーが入力できなかったのが不便だったので対応しただけです。
xrdp_xkeyboard.ini での対応について
libxrdp/xrdp_sec.c で subtype=0 の場合 subtype=1 としてから処理を行っているようですので、以下のように読み替えます。
[rdp_keyboard_surfacepro3_jp]
keyboard_type=4
keyboard_subtype=1
model=jp106
rdp_layouts=default_rdp_layouts
layouts_map=default_layouts_map
type=4, subtype=0 は us の場合もあれば ru の場合もあるようです。
今の仕組みでは rdp_keyboard_xx セクションに keylayout でマッチングする機能が無いため、モデルを特定できません。
自分としては、そのような仕組みを追加してまでモデルを細分化しなくても pc104-jp で十分ですし、xorgxrdp へ移行するのであれば、なおさら修正したくありません。
誰かが行ってくれるのであれば、当面はありがたいと思いますが。
結局どうするのがベストなのか
xorgxrdp へ完全に移行するまでの対応として、xkeyboard-config-2.0 への pc105-jp-henkan 対応のバックポート・パッチは行って、Surface Pro 3 に対応して欲しいと思います。
xrdp_xkeyboard.ini の rdp_keyboard_jp セクションの model=jp106 については、そのままでも大きな問題はないと思います。
xorgxrdp へ移行しつつあることはもっと周知させて欲しいと思います。
その他
xorgxrdp がすっかり気に入ってしまいました。
xorgxrdp で音声転送をしたいので xrdp-jp で相談します！",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,394,2016-06-28T16:03:55Z,2016-08-05T21:17:37Z,2016-08-05T21:17:37Z,MERGED,True,89,1,2,https://github.com/AkiraPenguin,Fix pc105-jp-Henkan key.,2,['keyboard'],https://github.com/neutrinolabs/xrdp/pull/394,https://github.com/metalefty,8,https://github.com/neutrinolabs/xrdp/pull/394#issuecomment-230224494,"PC105-jp keyboard need xkeyboard-config version 2.11 or later.
xkeyboard-config version 2.11 or later need libX11 version 1.4.3 or later.
I was build XRDP with xkeyboard-config-2.11 and libX11-1.4.3.
But it was not accept keyboard.
I was done backport because there is no way.
This is the interim fix.
Please build someone X11 by the newer libraries.","結局、以下の設定にするとどうなったのでしょう？
Surface Pro 3 だと pc105 とみなされてうまく行かなかったのを、jp106となる設定を書き足したのでうまく行きませんか？
[rdp_keyboard_surfacepro3_jp]
keyboard_type=4
keyboard_subtype=1
model=jp106
rdp_layouts=default_rdp_layouts
layouts_map=default_layouts_map",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,394,2016-06-28T16:03:55Z,2016-08-05T21:17:37Z,2016-08-05T21:17:37Z,MERGED,True,89,1,2,https://github.com/AkiraPenguin,Fix pc105-jp-Henkan key.,2,['keyboard'],https://github.com/neutrinolabs/xrdp/pull/394,https://github.com/metalefty,9,https://github.com/neutrinolabs/xrdp/pull/394#issuecomment-230226407,"PC105-jp keyboard need xkeyboard-config version 2.11 or later.
xkeyboard-config version 2.11 or later need libX11 version 1.4.3 or later.
I was build XRDP with xkeyboard-config-2.11 and libX11-1.4.3.
But it was not accept keyboard.
I was done backport because there is no way.
This is the interim fix.
Please build someone X11 by the newer libraries.","連投となりますが手元でも Surface Pro 3 でなくとも type=4, subtype=4, keylayout=0x????0411 となるWindows環境を再現できたので、こちらでも詳しく検証してみます。",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,394,2016-06-28T16:03:55Z,2016-08-05T21:17:37Z,2016-08-05T21:17:37Z,MERGED,True,89,1,2,https://github.com/AkiraPenguin,Fix pc105-jp-Henkan key.,2,['keyboard'],https://github.com/neutrinolabs/xrdp/pull/394,https://github.com/AkiraPenguin,10,https://github.com/neutrinolabs/xrdp/pull/394#issuecomment-230265639,"PC105-jp keyboard need xkeyboard-config version 2.11 or later.
xkeyboard-config version 2.11 or later need libX11 version 1.4.3 or later.
I was build XRDP with xkeyboard-config-2.11 and libX11-1.4.3.
But it was not accept keyboard.
I was done backport because there is no way.
This is the interim fix.
Please build someone X11 by the newer libraries.","そもそも #206 は私が投げた Pull request ですが、jp キーボードが全て type=7, subtype=2 である事が前提の修正でしたので取り下げたいと思っています。
その代わり pc105 で jp レイアウトの場合に Henkan キーが正しく入力できるように xkeyboard-config にパッチをあてたいのです。
pc105 で問題ないようにすれば、Surface Pro 3 Type cover を特別扱いする必要も有りません。
ご指摘の設定を追加した場合、us レイアウトキーボードも jp106 と判断されます。
複数のユーザで共有しているサーバだと困ります。
xorgxrdp を使いたい所ですが、当面は x11rdp を使う必要があると思います。
何度か接続・切断を繰り返すとプロトコルエラーとなって繋がらなくなりました。
また、xorgxrdp はデバッグ方法などのドキュメントが見当たりませんし、開発も数ヶ月放置されているようで、活発とは言いがたく、速度も良くないので、移行するには不安があります。",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,394,2016-06-28T16:03:55Z,2016-08-05T21:17:37Z,2016-08-05T21:17:37Z,MERGED,True,89,1,2,https://github.com/AkiraPenguin,Fix pc105-jp-Henkan key.,2,['keyboard'],https://github.com/neutrinolabs/xrdp/pull/394,https://github.com/metalefty,11,https://github.com/neutrinolabs/xrdp/pull/394#issuecomment-230279229,"PC105-jp keyboard need xkeyboard-config version 2.11 or later.
xkeyboard-config version 2.11 or later need libX11 version 1.4.3 or later.
I was build XRDP with xkeyboard-config-2.11 and libX11-1.4.3.
But it was not accept keyboard.
I was done backport because there is no way.
This is the interim fix.
Please build someone X11 by the newer libraries.","いずれにせよこのPRはマージされるべきだと思いますので、経緯を英語でまとめて、このPRがマージされるよう後押ししておきますね 👍

また、xorgxrdp はデバッグ方法などのドキュメントが見当たりませんし、開発も数ヶ月放置されているようで、活発とは言いがたく、速度も良くないので、移行するには不安があります。

別に放置されているわけではありません。現時点ではx11rdpに安定性では劣るは事実で、安定性を取るならx11rdpを使用することになりますが、どちらかというと進展がないのはx11rdpの方です。
ドキュメントが揃っていないのも、まだ安定性に難があり完全にx11rdpを代替するには至っていないという背景もあると思います。xorgxrdpの安定性については引き続き改善の余地大いに有りですね。
ただ、x11rdpの /opt 以下にPythonまで含んだ必要なXorgにツリーを全て突っ込むというやり方も好ましくなく、そのあたりが嫌われてディストリビューションのパッケージにxrdpは収録されてもx11rdpが収録されない一因にもなっています。このあたりの事情を解消するためにxorgxrdpが生まれました。",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,394,2016-06-28T16:03:55Z,2016-08-05T21:17:37Z,2016-08-05T21:17:37Z,MERGED,True,89,1,2,https://github.com/AkiraPenguin,Fix pc105-jp-Henkan key.,2,['keyboard'],https://github.com/neutrinolabs/xrdp/pull/394,https://github.com/AkiraPenguin,12,https://github.com/neutrinolabs/xrdp/pull/394#issuecomment-230290300,"PC105-jp keyboard need xkeyboard-config version 2.11 or later.
xkeyboard-config version 2.11 or later need libX11 version 1.4.3 or later.
I was build XRDP with xkeyboard-config-2.11 and libX11-1.4.3.
But it was not accept keyboard.
I was done backport because there is no way.
This is the interim fix.
Please build someone X11 by the newer libraries.","マージについてはよろしくお願いいたします。
やはり xorgxrdp が安定するまでは多くの人に必要だと思います。
内容は簡単だと思うのですが、#206 の経過が抜けていたり、説明下手で申し訳ありませんでした。
xorgxrdp へ協力したいのですが、自分も含めて、最初から手探りではやる気が起きない人が多いと思います。
ビルド・インストール・ログの確認方法など、ある程度日本語の情報があれば多くの人がチャレンジしてくれると思います。
xrdp-jp などでテストのお願いをして、デバッグが進む状況にしていただけたら良いと思います。",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,394,2016-06-28T16:03:55Z,2016-08-05T21:17:37Z,2016-08-05T21:17:37Z,MERGED,True,89,1,2,https://github.com/AkiraPenguin,Fix pc105-jp-Henkan key.,2,['keyboard'],https://github.com/neutrinolabs/xrdp/pull/394,https://github.com/metalefty,13,https://github.com/neutrinolabs/xrdp/pull/394#issuecomment-230369599,"PC105-jp keyboard need xkeyboard-config version 2.11 or later.
xkeyboard-config version 2.11 or later need libX11 version 1.4.3 or later.
I was build XRDP with xkeyboard-config-2.11 and libX11-1.4.3.
But it was not accept keyboard.
I was done backport because there is no way.
This is the interim fix.
Please build someone X11 by the newer libraries.",+1 to this PR. I'll give you English summary of discussion in Japanese later.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,394,2016-06-28T16:03:55Z,2016-08-05T21:17:37Z,2016-08-05T21:17:37Z,MERGED,True,89,1,2,https://github.com/AkiraPenguin,Fix pc105-jp-Henkan key.,2,['keyboard'],https://github.com/neutrinolabs/xrdp/pull/394,https://github.com/metalefty,14,https://github.com/neutrinolabs/xrdp/pull/394#issuecomment-237771628,"PC105-jp keyboard need xkeyboard-config version 2.11 or later.
xkeyboard-config version 2.11 or later need libX11 version 1.4.3 or later.
I was build XRDP with xkeyboard-config-2.11 and libX11-1.4.3.
But it was not accept keyboard.
I was done backport because there is no way.
This is the interim fix.
Please build someone X11 by the newer libraries.","First off, main purpose of this PR is to revert change introduced in #206. It wasn't always actually correct.
Japanese keyboard usually have type=7, subtype=2 however rarely some keyboard or environment have type=4, subtype=0. The model=jp106 doesn't work properly type=4, subtype=0 case. model=pc105 works for both case. This is why
Another point of this PR is, just fix a bug of xkeyboard-config by backporting from 2.11.  Some keys don't work.  This is fixed in xkeyboard-config so bring the fix to 2.0 as submitter described. I +1 to this PR.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,396,2016-07-12T07:54:03Z,2017-01-27T08:13:40Z,2017-01-27T08:13:40Z,CLOSED,False,25,1,8,https://github.com/kenhys,Fix rpmlint warning about W: devel-file-in-non-devel-package,1,['invalid'],https://github.com/neutrinolabs/xrdp/pull/396,https://github.com/kenhys,1,https://github.com/neutrinolabs/xrdp/pull/396,"It is common way not to embed version for loadable module.
Without this change, rpmlint reports it as a warning.
For example, https://en.opensuse.org/openSUSE:Packaging_checks#devel-file-in-non-devel-package","It is common way not to embed version for loadable module.
Without this change, rpmlint reports it as a warning.
For example, https://en.opensuse.org/openSUSE:Packaging_checks#devel-file-in-non-devel-package",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,396,2016-07-12T07:54:03Z,2017-01-27T08:13:40Z,2017-01-27T08:13:40Z,CLOSED,False,25,1,8,https://github.com/kenhys,Fix rpmlint warning about W: devel-file-in-non-devel-package,1,['invalid'],https://github.com/neutrinolabs/xrdp/pull/396,https://github.com/proski,2,https://github.com/neutrinolabs/xrdp/pull/396#issuecomment-239062676,"It is common way not to embed version for loadable module.
Without this change, rpmlint reports it as a warning.
For example, https://en.opensuse.org/openSUSE:Packaging_checks#devel-file-in-non-devel-package","libcommon is not a module, it's actually a library. Others are modules, and could be compiled as modules, but it would not fix the rpmlint warning.
libcommon contains the code shared between the binaries in the package, but it is not intended to be used by other packages.
I think a better solution for libcommon would be to omit libcommon.so symlink from the rpm package.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,396,2016-07-12T07:54:03Z,2017-01-27T08:13:40Z,2017-01-27T08:13:40Z,CLOSED,False,25,1,8,https://github.com/kenhys,Fix rpmlint warning about W: devel-file-in-non-devel-package,1,['invalid'],https://github.com/neutrinolabs/xrdp/pull/396,https://github.com/proski,3,https://github.com/neutrinolabs/xrdp/pull/396#issuecomment-252539786,"It is common way not to embed version for loadable module.
Without this change, rpmlint reports it as a warning.
For example, https://en.opensuse.org/openSUSE:Packaging_checks#devel-file-in-non-devel-package","The right fix to so separate modules from shared libraries. Modules should not have the initial ""lib"" and not should not be versioned. Shared libraries should start with ""lib"" and should be versioned. RPM packages should omit non-versioned links for shared libraries (they belong to -devel packages).",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,396,2016-07-12T07:54:03Z,2017-01-27T08:13:40Z,2017-01-27T08:13:40Z,CLOSED,False,25,1,8,https://github.com/kenhys,Fix rpmlint warning about W: devel-file-in-non-devel-package,1,['invalid'],https://github.com/neutrinolabs/xrdp/pull/396,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/396#issuecomment-256933207,"It is common way not to embed version for loadable module.
Without this change, rpmlint reports it as a warning.
For example, https://en.opensuse.org/openSUSE:Packaging_checks#devel-file-in-non-devel-package",I added invalid label as merging this breaks xrdp and xrdp-sesman.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,396,2016-07-12T07:54:03Z,2017-01-27T08:13:40Z,2017-01-27T08:13:40Z,CLOSED,False,25,1,8,https://github.com/kenhys,Fix rpmlint warning about W: devel-file-in-non-devel-package,1,['invalid'],https://github.com/neutrinolabs/xrdp/pull/396,https://github.com/proski,5,https://github.com/neutrinolabs/xrdp/pull/396#issuecomment-275597742,"It is common way not to embed version for loadable module.
Without this change, rpmlint reports it as a warning.
For example, https://en.opensuse.org/openSUSE:Packaging_checks#devel-file-in-non-devel-package",The issue has been fixed in f25659d,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,402,2016-07-20T01:42:04Z,2016-08-08T18:15:52Z,2016-08-16T04:54:25Z,MERGED,True,1,1,1,https://github.com/metalefty,X11rdp: update python 2.7 -> 2.7.11,1,['compiling'],https://github.com/neutrinolabs/xrdp/pull/402,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/402,"Python 2.7 cannot build with OpenSSL 1.0.2h pointed out in #399.
Python-2.7.11.tar.xz needs to be uploaded to server1.xrdp.org.
I've confirmed X11rdp successfully builds with python 2.7.11 and built X11rdp properly works.
Please don't forget to upload tarball to server1.xrdp.org before merge this.","Python 2.7 cannot build with OpenSSL 1.0.2h pointed out in #399.
Python-2.7.11.tar.xz needs to be uploaded to server1.xrdp.org.
I've confirmed X11rdp successfully builds with python 2.7.11 and built X11rdp properly works.
Please don't forget to upload tarball to server1.xrdp.org before merge this.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,402,2016-07-20T01:42:04Z,2016-08-08T18:15:52Z,2016-08-16T04:54:25Z,MERGED,True,1,1,1,https://github.com/metalefty,X11rdp: update python 2.7 -> 2.7.11,1,['compiling'],https://github.com/neutrinolabs/xrdp/pull/402,https://github.com/jsorg71,2,https://github.com/neutrinolabs/xrdp/pull/402#issuecomment-237455339,"Python 2.7 cannot build with OpenSSL 1.0.2h pointed out in #399.
Python-2.7.11.tar.xz needs to be uploaded to server1.xrdp.org.
I've confirmed X11rdp successfully builds with python 2.7.11 and built X11rdp properly works.
Please don't forget to upload tarball to server1.xrdp.org before merge this.","+1
I uploaded Python-2.7.11.tar.xz",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,402,2016-07-20T01:42:04Z,2016-08-08T18:15:52Z,2016-08-16T04:54:25Z,MERGED,True,1,1,1,https://github.com/metalefty,X11rdp: update python 2.7 -> 2.7.11,1,['compiling'],https://github.com/neutrinolabs/xrdp/pull/402,https://github.com/jsorg71,3,https://github.com/neutrinolabs/xrdp/pull/402#issuecomment-237464996,"Python 2.7 cannot build with OpenSSL 1.0.2h pointed out in #399.
Python-2.7.11.tar.xz needs to be uploaded to server1.xrdp.org.
I've confirmed X11rdp successfully builds with python 2.7.11 and built X11rdp properly works.
Please don't forget to upload tarball to server1.xrdp.org before merge this.","Another option is that we just remove the first line from x11_file_list.txt.
We don't really need to build python these days.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,402,2016-07-20T01:42:04Z,2016-08-08T18:15:52Z,2016-08-16T04:54:25Z,MERGED,True,1,1,1,https://github.com/metalefty,X11rdp: update python 2.7 -> 2.7.11,1,['compiling'],https://github.com/neutrinolabs/xrdp/pull/402,https://github.com/speidy,4,https://github.com/neutrinolabs/xrdp/pull/402#issuecomment-237467286,"Python 2.7 cannot build with OpenSSL 1.0.2h pointed out in #399.
Python-2.7.11.tar.xz needs to be uploaded to server1.xrdp.org.
I've confirmed X11rdp successfully builds with python 2.7.11 and built X11rdp properly works.
Please don't forget to upload tarball to server1.xrdp.org before merge this.","I agree
בתאריך יום ה׳, 4 באוג׳ 2016 ב-9:34 מאת jsorg71 notifications@github.com:

Another option is that we just remove the first line from
x11_file_list.txt.
We don't really need to build python these days.
—
You are receiving this because you are subscribed to this thread.
Reply to this email directly, view it on GitHub
#402 (comment),
or mute the thread
https://github.com/notifications/unsubscribe-auth/ADTH1IYKkcWeKcZMCivKcjAru5K6p9huks5qcYfvgaJpZM4JQV8S
.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,402,2016-07-20T01:42:04Z,2016-08-08T18:15:52Z,2016-08-16T04:54:25Z,MERGED,True,1,1,1,https://github.com/metalefty,X11rdp: update python 2.7 -> 2.7.11,1,['compiling'],https://github.com/neutrinolabs/xrdp/pull/402,https://github.com/metalefty,5,https://github.com/neutrinolabs/xrdp/pull/402#issuecomment-237474251,"Python 2.7 cannot build with OpenSSL 1.0.2h pointed out in #399.
Python-2.7.11.tar.xz needs to be uploaded to server1.xrdp.org.
I've confirmed X11rdp successfully builds with python 2.7.11 and built X11rdp properly works.
Please don't forget to upload tarball to server1.xrdp.org before merge this.","I also agree. In RHEL, yum is written in python2 so python2 must be always installed.
Actually, x11rdp has build time dependency on python-libxml2 package (buildx.sh:24).  When we install python-libxml2 from distribution's repository, python2 also should be installed.  Because python-libxml2 depends on python2.  In conclusion, python2 is to be installed to meet x11rdp build requirements.
Let's back to #399 and test the build using system python2. I'll close this later.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,402,2016-07-20T01:42:04Z,2016-08-08T18:15:52Z,2016-08-16T04:54:25Z,MERGED,True,1,1,1,https://github.com/metalefty,X11rdp: update python 2.7 -> 2.7.11,1,['compiling'],https://github.com/neutrinolabs/xrdp/pull/402,https://github.com/metalefty,6,https://github.com/neutrinolabs/xrdp/pull/402#issuecomment-238003853,"Python 2.7 cannot build with OpenSSL 1.0.2h pointed out in #399.
Python-2.7.11.tar.xz needs to be uploaded to server1.xrdp.org.
I've confirmed X11rdp successfully builds with python 2.7.11 and built X11rdp properly works.
Please don't forget to upload tarball to server1.xrdp.org before merge this.",What about merging this first and then think about removing python later?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,402,2016-07-20T01:42:04Z,2016-08-08T18:15:52Z,2016-08-16T04:54:25Z,MERGED,True,1,1,1,https://github.com/metalefty,X11rdp: update python 2.7 -> 2.7.11,1,['compiling'],https://github.com/neutrinolabs/xrdp/pull/402,https://github.com/jsorg71,7,https://github.com/neutrinolabs/xrdp/pull/402#issuecomment-238327711,"Python 2.7 cannot build with OpenSSL 1.0.2h pointed out in #399.
Python-2.7.11.tar.xz needs to be uploaded to server1.xrdp.org.
I've confirmed X11rdp successfully builds with python 2.7.11 and built X11rdp properly works.
Please don't forget to upload tarball to server1.xrdp.org before merge this.","Yes, good idea.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,403,2016-07-21T07:31:11Z,2016-07-22T07:57:50Z,2016-07-22T07:57:50Z,MERGED,True,10,1,2,https://github.com/kenhys,chansrv: avoid chansrv SEGV when xinode is NULL,1,[],https://github.com/neutrinolabs/xrdp/pull/403,https://github.com/kenhys,1,https://github.com/neutrinolabs/xrdp/pull/403,"When xfuse_create_file_in_xrdp_fs is failed, it returns NULL.
Without this fix, xinode->size causes SEGV, so implementation is changed
to return -1 and check the return value in caller.","When xfuse_create_file_in_xrdp_fs is failed, it returns NULL.
Without this fix, xinode->size causes SEGV, so implementation is changed
to return -1 and check the return value in caller.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,403,2016-07-21T07:31:11Z,2016-07-22T07:57:50Z,2016-07-22T07:57:50Z,MERGED,True,10,1,2,https://github.com/kenhys,chansrv: avoid chansrv SEGV when xinode is NULL,1,[],https://github.com/neutrinolabs/xrdp/pull/403,https://github.com/jsorg71,2,https://github.com/neutrinolabs/xrdp/pull/403#issuecomment-234314478,"When xfuse_create_file_in_xrdp_fs is failed, it returns NULL.
Without this fix, xinode->size causes SEGV, so implementation is changed
to return -1 and check the return value in caller.",+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,403,2016-07-21T07:31:11Z,2016-07-22T07:57:50Z,2016-07-22T07:57:50Z,MERGED,True,10,1,2,https://github.com/kenhys,chansrv: avoid chansrv SEGV when xinode is NULL,1,[],https://github.com/neutrinolabs/xrdp/pull/403,https://github.com/speidy,3,https://github.com/neutrinolabs/xrdp/pull/403#issuecomment-234364479,"When xfuse_create_file_in_xrdp_fs is failed, it returns NULL.
Without this fix, xinode->size causes SEGV, so implementation is changed
to return -1 and check the return value in caller.","+1
From: jsorg71 [mailto:notifications@github.com]
Sent: Thursday, July 21, 2016 7:51 PM
To: neutrinolabs/xrdp xrdp@noreply.github.com
Subject: Re: [neutrinolabs/xrdp] chansrv: avoid chansrv SEGV when xinode is NULL (#403)
+1
—
You are receiving this because you are subscribed to this thread.
Reply to this email directly, view it on GitHub #403 (comment) , or mute the thread https://github.com/notifications/unsubscribe-auth/ADTH1LySmo3NNiCiePV8DfedyZh4ry-lks5qX6OQgaJpZM4JRhQx .  https://github.com/notifications/beacon/ADTH1IIeM0ZC9Zj14Iv6v_3cksYvflLJks5qX6OQgaJpZM4JRhQx.gif",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,404,2016-08-08T06:58:02Z,2016-08-18T05:59:50Z,2016-09-09T05:32:12Z,CLOSED,False,179,188,26,https://github.com/proski,"Assorted cleanup patches, submission of 2016-08-07",16,[],https://github.com/neutrinolabs/xrdp/pull/404,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/404,"Another round of cleanups.
A wait object was incorrectly closed as a socket.
A minor comment change in an important place - the authentication logic was described incorrectly in a comment. Fortunately, no function implemented the logic as described, or they would authenticate users with the wrong password.
It is now possible to run xrdp-sesman as non-privileged user. Failure to change supplementary groups is ignored now if the user ID doesn't change.
Two coding style manuals have been merged. The differences have been reconciled. 80 character lines are allowed. char *pvar is preferred over char* pvar
Another round of adding const. This time it's primarily for readability. I want to see if a function changes, say, a password, or just uses it unchanged.
Adding strerror(errno) to many error messages.
Reducing nuisance warnings. No need to warn me that ~/.vnc could not be created if it exists already.
Fixing 3 memory leaks found by Valgrind in xrdp-sesman, all are quite minor. No leaks in xrdp have been found.","Another round of cleanups.
A wait object was incorrectly closed as a socket.
A minor comment change in an important place - the authentication logic was described incorrectly in a comment. Fortunately, no function implemented the logic as described, or they would authenticate users with the wrong password.
It is now possible to run xrdp-sesman as non-privileged user. Failure to change supplementary groups is ignored now if the user ID doesn't change.
Two coding style manuals have been merged. The differences have been reconciled. 80 character lines are allowed. char *pvar is preferred over char* pvar
Another round of adding const. This time it's primarily for readability. I want to see if a function changes, say, a password, or just uses it unchanged.
Adding strerror(errno) to many error messages.
Reducing nuisance warnings. No need to warn me that ~/.vnc could not be created if it exists already.
Fixing 3 memory leaks found by Valgrind in xrdp-sesman, all are quite minor. No leaks in xrdp have been found.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,405,2016-08-11T02:23:10Z,2016-08-12T05:23:16Z,2016-08-12T05:23:16Z,CLOSED,False,4,9,3,https://github.com/proski,Pixman fixes,4,[],https://github.com/neutrinolabs/xrdp/pull/405,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/405,"The recent commits introduced an error message from configure (enable_pimanno: command not found), C compile warnings (redefined constants) and C++ warnings (pointer casts). This pull request fixes them all.","The recent commits introduced an error message from configure (enable_pimanno: command not found), C compile warnings (redefined constants) and C++ warnings (pointer casts). This pull request fixes them all.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,405,2016-08-11T02:23:10Z,2016-08-12T05:23:16Z,2016-08-12T05:23:16Z,CLOSED,False,4,9,3,https://github.com/proski,Pixman fixes,4,[],https://github.com/neutrinolabs/xrdp/pull/405,https://github.com/jsorg71,2,https://github.com/neutrinolabs/xrdp/pull/405#issuecomment-239094089,"The recent commits introduced an error message from configure (enable_pimanno: command not found), C compile warnings (redefined constants) and C++ warnings (pointer casts). This pull request fixes them all.",+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,405,2016-08-11T02:23:10Z,2016-08-12T05:23:16Z,2016-08-12T05:23:16Z,CLOSED,False,4,9,3,https://github.com/proski,Pixman fixes,4,[],https://github.com/neutrinolabs/xrdp/pull/405,https://github.com/jsorg71,3,https://github.com/neutrinolabs/xrdp/pull/405#issuecomment-239363124,"The recent commits introduced an error message from configure (enable_pimanno: command not found), C compile warnings (redefined constants) and C++ warnings (pointer casts). This pull request fixes them all.","merged as d35e57b
I didn't take the stdint.h change.  I don't know how safe that is yet.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,406,2016-08-12T07:36:49Z,2016-08-15T05:59:11Z,2016-08-17T04:58:44Z,CLOSED,False,12,5,2,https://github.com/proski,"Include stdint.h, don't redefine MAX/MIN constants if already defined",2,[],https://github.com/neutrinolabs/xrdp/pull/406,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/406,Safer version of the original patch. The constants are defined only if they are not defined in stdint.h or elsewhere.,Safer version of the original patch. The constants are defined only if they are not defined in stdint.h or elsewhere.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,406,2016-08-12T07:36:49Z,2016-08-15T05:59:11Z,2016-08-17T04:58:44Z,CLOSED,False,12,5,2,https://github.com/proski,"Include stdint.h, don't redefine MAX/MIN constants if already defined",2,[],https://github.com/neutrinolabs/xrdp/pull/406,https://github.com/jsorg71,2,https://github.com/neutrinolabs/xrdp/pull/406#issuecomment-239519240,Safer version of the original patch. The constants are defined only if they are not defined in stdint.h or elsewhere.,"Lets use HAVE_STDINT_H for this.
We can't build without stdio.h, stdlib.h, and string.h, so we don't need HAVE_STDLIB_H, HAVE_STRINGS_H, and HAVE_STDIO_H",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,406,2016-08-12T07:36:49Z,2016-08-15T05:59:11Z,2016-08-17T04:58:44Z,CLOSED,False,12,5,2,https://github.com/proski,"Include stdint.h, don't redefine MAX/MIN constants if already defined",2,[],https://github.com/neutrinolabs/xrdp/pull/406,https://github.com/jsorg71,3,https://github.com/neutrinolabs/xrdp/pull/406#issuecomment-239535752,Safer version of the original patch. The constants are defined only if they are not defined in stdint.h or elsewhere.,merged as f4f23b0,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,410,2016-08-18T04:27:06Z,2016-08-23T01:32:38Z,2016-08-23T02:11:53Z,MERGED,True,15,1,1,https://github.com/metalefty,Fix clipboard when text/filename contains non-ASCII characters,1,"['clipboard', 'drive redirection']",https://github.com/neutrinolabs/xrdp/pull/410,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/410,"broken by #314. This is compatible with the fix introduced in #314.
To use non-ASCII text/filename in clipboard, chansrv needs to be run
with LC_CTYPE=.UTF-8 because the behaviour of mbstowcs(3) function
called in chansrv depends on LC_CTYPE[1].  However #314 made
LC_CTYPE=C in chansrv context.  Even if LANG and LC_ are set in
.bashrc, /etc/profile, /etc/locale.conf or something like that,
it doesn't affect in chansrv context because chansrv doesn't source
any of them unlike sesman.
So do not set LC_CTYPE to blank or ""C"" in g_init() in order to get
g_mbstowcs and g_wcstombs to work properly with non-ASCII UTF-8
characters in any context.
Setting LC_CTYPE to *.UTF-8 doesn't obstruct applying system
language in RHEL [2].
[1] Linux man page says:
The behavior of mbstowcs() depends on the LC_CTYPE category of
the current locale.
[2] https://bugzilla.redhat.com/show_bug.cgi?id=1290820","broken by #314. This is compatible with the fix introduced in #314.
To use non-ASCII text/filename in clipboard, chansrv needs to be run
with LC_CTYPE=.UTF-8 because the behaviour of mbstowcs(3) function
called in chansrv depends on LC_CTYPE[1].  However #314 made
LC_CTYPE=C in chansrv context.  Even if LANG and LC_ are set in
.bashrc, /etc/profile, /etc/locale.conf or something like that,
it doesn't affect in chansrv context because chansrv doesn't source
any of them unlike sesman.
So do not set LC_CTYPE to blank or ""C"" in g_init() in order to get
g_mbstowcs and g_wcstombs to work properly with non-ASCII UTF-8
characters in any context.
Setting LC_CTYPE to *.UTF-8 doesn't obstruct applying system
language in RHEL [2].
[1] Linux man page says:
The behavior of mbstowcs() depends on the LC_CTYPE category of
the current locale.
[2] https://bugzilla.redhat.com/show_bug.cgi?id=1290820",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,410,2016-08-18T04:27:06Z,2016-08-23T01:32:38Z,2016-08-23T02:11:53Z,MERGED,True,15,1,1,https://github.com/metalefty,Fix clipboard when text/filename contains non-ASCII characters,1,"['clipboard', 'drive redirection']",https://github.com/neutrinolabs/xrdp/pull/410,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/410#issuecomment-240621112,"broken by #314. This is compatible with the fix introduced in #314.
To use non-ASCII text/filename in clipboard, chansrv needs to be run
with LC_CTYPE=.UTF-8 because the behaviour of mbstowcs(3) function
called in chansrv depends on LC_CTYPE[1].  However #314 made
LC_CTYPE=C in chansrv context.  Even if LANG and LC_ are set in
.bashrc, /etc/profile, /etc/locale.conf or something like that,
it doesn't affect in chansrv context because chansrv doesn't source
any of them unlike sesman.
So do not set LC_CTYPE to blank or ""C"" in g_init() in order to get
g_mbstowcs and g_wcstombs to work properly with non-ASCII UTF-8
characters in any context.
Setting LC_CTYPE to *.UTF-8 doesn't obstruct applying system
language in RHEL [2].
[1] Linux man page says:
The behavior of mbstowcs() depends on the LC_CTYPE category of
the current locale.
[2] https://bugzilla.redhat.com/show_bug.cgi?id=1290820",Fixed commit message s/#317/#314/g.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,410,2016-08-18T04:27:06Z,2016-08-23T01:32:38Z,2016-08-23T02:11:53Z,MERGED,True,15,1,1,https://github.com/metalefty,Fix clipboard when text/filename contains non-ASCII characters,1,"['clipboard', 'drive redirection']",https://github.com/neutrinolabs/xrdp/pull/410,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/410#issuecomment-240624196,"broken by #314. This is compatible with the fix introduced in #314.
To use non-ASCII text/filename in clipboard, chansrv needs to be run
with LC_CTYPE=.UTF-8 because the behaviour of mbstowcs(3) function
called in chansrv depends on LC_CTYPE[1].  However #314 made
LC_CTYPE=C in chansrv context.  Even if LANG and LC_ are set in
.bashrc, /etc/profile, /etc/locale.conf or something like that,
it doesn't affect in chansrv context because chansrv doesn't source
any of them unlike sesman.
So do not set LC_CTYPE to blank or ""C"" in g_init() in order to get
g_mbstowcs and g_wcstombs to work properly with non-ASCII UTF-8
characters in any context.
Setting LC_CTYPE to *.UTF-8 doesn't obstruct applying system
language in RHEL [2].
[1] Linux man page says:
The behavior of mbstowcs() depends on the LC_CTYPE category of
the current locale.
[2] https://bugzilla.redhat.com/show_bug.cgi?id=1290820","Bug description
Can't copy&paste text/file via clipboard when text/filename contains non-ASCII UTF-8 characters.
Environment
$ rpm -qa|grep xrdp
xorg-x11-drv-xrdp-0.9.0.gita0add6c+fix_utf8_clipboard-1.el7.centos.x86_64
xrdp-0.9.0.gitf4f23b0+devel-1.el7.centos.x86_64

I'm using mstsc.exe of Windows 10 at this time but client doesn't matter.
How reproducible
Always for non-ASCII UTF-8 characters, never for ASCII characters.
Procedure for reproducing
Install latest devel branch f4f23b0  by RH-Matic.
$ ./X11RDP-RH-Matic.sh --branch devel --with-xorg-driver --nox11rdp

Install Xfce4 and Firefox at this time.
Set system desktop environment and locale.
# echo PREFERRED=$(which startxfce4) > /etc/sysconfig/desktop
# echo LANG=ja_JP.UTF-8"" > /etc/locale.conf""

Run xrdp and sesman in foreground.
# env - /usr/sbin/xrdp -ns
# env - /usr/sbin/xrdp-sesman -ns

Connect to xrdp and open www.asahi.com in Firefox.
Copy some Japanese string to clipboard.   As same result as for other languages for example Chinese or Russian.
Paste copied text into notepad.exe.
See the log dumped in sesman terminal. It says ""bad string"".
[2522346826]: CLIPBOARD  clipboard_send_data_response_for_text: 819 : ERROR: clipboard_send_data_response_for_text: bad string

See sesman/chansrv/clipboard.c around line 815.
    num_chars = g_mbstowcs(0, data, 0);
    if (num_chars < 0)
    {
        log_error(""clipboard_send_data_response_for_text: ""
             ""bad string"");
        num_chars = 0;
    }
""bad string"" is dumped as g_mbstowcs() returns negative value. See Linux man page of mbstowcs(3) to know when mbstowcs() returns negative value.
How to fix
See the first comment and commit.
Does this fix keep respecting system language?
Yes. System language is loaded in child process of  xrdp-sesman child of xrdp-sessvc.
See the output of locale command in xrdp session. The locale written in /etc/locale.conf is set.
$ rpm -qa |grep xrdp
xorg-x11-drv-xrdp-0.9.0.gita0add6c+fix_utf8_clipboard-1.el7.centos.x86_64
xrdp-0.9.0.gitceb4b7b+fix_utf8_clipboard-1.el7.centos.x86_64 <- my fix version
$ env | grep -i xrdp
PULSE_SCRIPT=/etc/xrdp/pulse/default.pa
XRDP_SESSION=1
$ locale
LANG=ja_JP.UTF-8
LC_CTYPE=""ja_JP.UTF-8""
LC_NUMERIC=""ja_JP.UTF-8""
LC_TIME=""ja_JP.UTF-8""
LC_COLLATE=""ja_JP.UTF-8""
LC_MONETARY=""ja_JP.UTF-8""
LC_MESSAGES=""ja_JP.UTF-8""
LC_PAPER=""ja_JP.UTF-8""
LC_NAME=""ja_JP.UTF-8""
LC_ADDRESS=""ja_JP.UTF-8""
LC_TELEPHONE=""ja_JP.UTF-8""
LC_MEASUREMENT=""ja_JP.UTF-8""
LC_IDENTIFICATION=""ja_JP.UTF-8""
LC_ALL=",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,410,2016-08-18T04:27:06Z,2016-08-23T01:32:38Z,2016-08-23T02:11:53Z,MERGED,True,15,1,1,https://github.com/metalefty,Fix clipboard when text/filename contains non-ASCII characters,1,"['clipboard', 'drive redirection']",https://github.com/neutrinolabs/xrdp/pull/410,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/410#issuecomment-240627876,"broken by #314. This is compatible with the fix introduced in #314.
To use non-ASCII text/filename in clipboard, chansrv needs to be run
with LC_CTYPE=.UTF-8 because the behaviour of mbstowcs(3) function
called in chansrv depends on LC_CTYPE[1].  However #314 made
LC_CTYPE=C in chansrv context.  Even if LANG and LC_ are set in
.bashrc, /etc/profile, /etc/locale.conf or something like that,
it doesn't affect in chansrv context because chansrv doesn't source
any of them unlike sesman.
So do not set LC_CTYPE to blank or ""C"" in g_init() in order to get
g_mbstowcs and g_wcstombs to work properly with non-ASCII UTF-8
characters in any context.
Setting LC_CTYPE to *.UTF-8 doesn't obstruct applying system
language in RHEL [2].
[1] Linux man page says:
The behavior of mbstowcs() depends on the LC_CTYPE category of
the current locale.
[2] https://bugzilla.redhat.com/show_bug.cgi?id=1290820","@proski @itamarjp
It turned out that g_setenv(""LANG"", ""en_US.UTF-8"", 1); was actually added on purpose.  Removing it in #314 caused another bug.  I made a fix with keeping respecting system language.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,410,2016-08-18T04:27:06Z,2016-08-23T01:32:38Z,2016-08-23T02:11:53Z,MERGED,True,15,1,1,https://github.com/metalefty,Fix clipboard when text/filename contains non-ASCII characters,1,"['clipboard', 'drive redirection']",https://github.com/neutrinolabs/xrdp/pull/410,https://github.com/proski,5,https://github.com/neutrinolabs/xrdp/pull/410#issuecomment-240631021,"broken by #314. This is compatible with the fix introduced in #314.
To use non-ASCII text/filename in clipboard, chansrv needs to be run
with LC_CTYPE=.UTF-8 because the behaviour of mbstowcs(3) function
called in chansrv depends on LC_CTYPE[1].  However #314 made
LC_CTYPE=C in chansrv context.  Even if LANG and LC_ are set in
.bashrc, /etc/profile, /etc/locale.conf or something like that,
it doesn't affect in chansrv context because chansrv doesn't source
any of them unlike sesman.
So do not set LC_CTYPE to blank or ""C"" in g_init() in order to get
g_mbstowcs and g_wcstombs to work properly with non-ASCII UTF-8
characters in any context.
Setting LC_CTYPE to *.UTF-8 doesn't obstruct applying system
language in RHEL [2].
[1] Linux man page says:
The behavior of mbstowcs() depends on the LC_CTYPE category of
the current locale.
[2] https://bugzilla.redhat.com/show_bug.cgi?id=1290820",Looks good to me.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,410,2016-08-18T04:27:06Z,2016-08-23T01:32:38Z,2016-08-23T02:11:53Z,MERGED,True,15,1,1,https://github.com/metalefty,Fix clipboard when text/filename contains non-ASCII characters,1,"['clipboard', 'drive redirection']",https://github.com/neutrinolabs/xrdp/pull/410,https://github.com/metalefty,6,https://github.com/neutrinolabs/xrdp/pull/410#issuecomment-241587914,"broken by #314. This is compatible with the fix introduced in #314.
To use non-ASCII text/filename in clipboard, chansrv needs to be run
with LC_CTYPE=.UTF-8 because the behaviour of mbstowcs(3) function
called in chansrv depends on LC_CTYPE[1].  However #314 made
LC_CTYPE=C in chansrv context.  Even if LANG and LC_ are set in
.bashrc, /etc/profile, /etc/locale.conf or something like that,
it doesn't affect in chansrv context because chansrv doesn't source
any of them unlike sesman.
So do not set LC_CTYPE to blank or ""C"" in g_init() in order to get
g_mbstowcs and g_wcstombs to work properly with non-ASCII UTF-8
characters in any context.
Setting LC_CTYPE to *.UTF-8 doesn't obstruct applying system
language in RHEL [2].
[1] Linux man page says:
The behavior of mbstowcs() depends on the LC_CTYPE category of
the current locale.
[2] https://bugzilla.redhat.com/show_bug.cgi?id=1290820",Any objections to merge?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,410,2016-08-18T04:27:06Z,2016-08-23T01:32:38Z,2016-08-23T02:11:53Z,MERGED,True,15,1,1,https://github.com/metalefty,Fix clipboard when text/filename contains non-ASCII characters,1,"['clipboard', 'drive redirection']",https://github.com/neutrinolabs/xrdp/pull/410,https://github.com/jsorg71,7,https://github.com/neutrinolabs/xrdp/pull/410#issuecomment-241591170,"broken by #314. This is compatible with the fix introduced in #314.
To use non-ASCII text/filename in clipboard, chansrv needs to be run
with LC_CTYPE=.UTF-8 because the behaviour of mbstowcs(3) function
called in chansrv depends on LC_CTYPE[1].  However #314 made
LC_CTYPE=C in chansrv context.  Even if LANG and LC_ are set in
.bashrc, /etc/profile, /etc/locale.conf or something like that,
it doesn't affect in chansrv context because chansrv doesn't source
any of them unlike sesman.
So do not set LC_CTYPE to blank or ""C"" in g_init() in order to get
g_mbstowcs and g_wcstombs to work properly with non-ASCII UTF-8
characters in any context.
Setting LC_CTYPE to *.UTF-8 doesn't obstruct applying system
language in RHEL [2].
[1] Linux man page says:
The behavior of mbstowcs() depends on the LC_CTYPE category of
the current locale.
[2] https://bugzilla.redhat.com/show_bug.cgi?id=1290820",+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,411,2016-08-18T06:47:22Z,2016-09-20T08:56:39Z,2016-09-20T13:50:51Z,MERGED,True,176,114,10,https://github.com/proski,"Cleaning up bogus messages about closing ""established"" connections to NULL:NULL",8,[],https://github.com/neutrinolabs/xrdp/pull/411,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/411,"Make g_sck_close() do the right thing (check errors, make sure it's actually a closing socket, use proper debug levels) and add actually useful debug information (address family, local address and port).
Make fixes based on the information from g_sck_close()
Fix closing the listening socket twice in xrdp-sesman.
Use correct function to close g_term_event. It's not even a valid a file descriptor.
Cleanup useless references to g_sck in sesrun, also remove g_pid.","Make g_sck_close() do the right thing (check errors, make sure it's actually a closing socket, use proper debug levels) and add actually useful debug information (address family, local address and port).
Make fixes based on the information from g_sck_close()
Fix closing the listening socket twice in xrdp-sesman.
Use correct function to close g_term_event. It's not even a valid a file descriptor.
Cleanup useless references to g_sck in sesrun, also remove g_pid.",True,"{'THUMBS_UP': ['https://github.com/metalefty', 'https://github.com/cosmo0920']}"
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,411,2016-08-18T06:47:22Z,2016-09-20T08:56:39Z,2016-09-20T13:50:51Z,MERGED,True,176,114,10,https://github.com/proski,"Cleaning up bogus messages about closing ""established"" connections to NULL:NULL",8,[],https://github.com/neutrinolabs/xrdp/pull/411,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/411#issuecomment-240906906,"Make g_sck_close() do the right thing (check errors, make sure it's actually a closing socket, use proper debug levels) and add actually useful debug information (address family, local address and port).
Make fixes based on the information from g_sck_close()
Fix closing the listening socket twice in xrdp-sesman.
Use correct function to close g_term_event. It's not even a valid a file descriptor.
Cleanup useless references to g_sck in sesrun, also remove g_pid.","Tested on CentOS 7 and FreeBSD 10.3-RELEASE-p6. Looks good to me.
Client's IP address is not correctly shown in FreeBSD but this  is another issue.  It is not caused by this change.
[20160819-10:47:11] [INFO ] A connection received from: 0.0.0.0 port 53657
[20160819-10:47:11] [DEBUG] Closed socket 12 (AF_INET6 ::ffff:192.168.69.101:3389)
[20160819-10:47:11] [DEBUG] Closed socket 11 (AF_INET6 :::3389)
[20160819-10:47:11] [DEBUG] Closed socket 12 (AF_INET6 ::ffff:192.168.69.101:3389)
[20160819-10:47:11] [ERROR] Listening socket is in wrong state we terminate listener
[20160819-10:47:11] [INFO ] A connection received from: 0.0.0.0 port 53658
[20160819-10:47:11] [DEBUG] Closed socket 12 (AF_INET6 ::ffff:192.168.69.101:3389)
[20160819-10:47:11] [DEBUG] Closed socket 11 (AF_INET6 :::3389)
[20160819-10:47:12] [DEBUG] xrdp_000144de_wm_login_mode_event_00000001
[20160819-10:47:12] [WARN ] local keymap file for 0xe0200411 found and doesn't match built in keymap, using local keymap file
[20160819-10:47:12] [DEBUG] xrdp_wm_log_msg: connecting to sesman ip 127.0.0.1 port 3350
[20160819-10:47:16] [DEBUG] Closed socket 18 (AF_INET6 ::1:51859)
[20160819-10:47:16] [INFO ] xrdp_wm_log_msg: sesman connect ok
[20160819-10:47:16] [DEBUG] xrdp_wm_log_msg: sending login info to session manager, please wait...
[20160819-10:47:16] [DEBUG] return value from xrdp_mm_connect 0
[20160819-10:47:16] [INFO ] xrdp_wm_log_msg: login successful for display 10
[20160819-10:47:16] [DEBUG] xrdp_wm_log_msg: started connecting
[20160819-10:47:16] [INFO ] lib_mod_log_peer: xrdp_pid=83166 connected to X11rdp_pid=0 X11rdp_uid=8 X11rdp_gid=32767 client_ip= client_port=
[20160819-10:47:16] [DEBUG] xrdp_wm_log_msg: connected ok
[20160819-10:47:16] [DEBUG] xrdp_mm_connect_chansrv: chansrv connect successful
[20160819-10:47:16] [DEBUG] Closed socket 18 (AF_INET6 ::1:23240)
[20160819-10:47:16] [INFO ] The following channel is allowed: rdpdr (0)
[20160819-10:47:16] [INFO ] The following channel is allowed: rdpsnd (1)
[20160819-10:47:16] [INFO ] The following channel is allowed: cliprdr (2)
[20160819-10:47:16] [INFO ] The following channel is allowed: drdynvc (3)
[20160819-10:47:16] [DEBUG] The allow channel list now initialized for this session",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,411,2016-08-18T06:47:22Z,2016-09-20T08:56:39Z,2016-09-20T13:50:51Z,MERGED,True,176,114,10,https://github.com/proski,"Cleaning up bogus messages about closing ""established"" connections to NULL:NULL",8,[],https://github.com/neutrinolabs/xrdp/pull/411,https://github.com/proski,3,https://github.com/neutrinolabs/xrdp/pull/411#issuecomment-240916376,"Make g_sck_close() do the right thing (check errors, make sure it's actually a closing socket, use proper debug levels) and add actually useful debug information (address family, local address and port).
Make fixes based on the information from g_sck_close()
Fix closing the listening socket twice in xrdp-sesman.
Use correct function to close g_term_event. It's not even a valid a file descriptor.
Cleanup useless references to g_sck in sesrun, also remove g_pid.",What is exactly wrong about FreeBSD?  Let's get it right.  I see similar messages on Linux if I enable IPv6. Maybe the port should be written separately?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,411,2016-08-18T06:47:22Z,2016-09-20T08:56:39Z,2016-09-20T13:50:51Z,MERGED,True,176,114,10,https://github.com/proski,"Cleaning up bogus messages about closing ""established"" connections to NULL:NULL",8,[],https://github.com/neutrinolabs/xrdp/pull/411,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/411#issuecomment-240923296,"Make g_sck_close() do the right thing (check errors, make sure it's actually a closing socket, use proper debug levels) and add actually useful debug information (address family, local address and port).
Make fixes based on the information from g_sck_close()
Fix closing the listening socket twice in xrdp-sesman.
Use correct function to close g_term_event. It's not even a valid a file descriptor.
Cleanup useless references to g_sck in sesrun, also remove g_pid.","You're correct. It is IPv6 issue.  After I disabled IPv6, client IP address is shown even on FreeBSD.
g_tcp_accept() and g_sck_accept() need to be fixed for IPv6.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,411,2016-08-18T06:47:22Z,2016-09-20T08:56:39Z,2016-09-20T13:50:51Z,MERGED,True,176,114,10,https://github.com/proski,"Cleaning up bogus messages about closing ""established"" connections to NULL:NULL",8,[],https://github.com/neutrinolabs/xrdp/pull/411,https://github.com/proski,5,https://github.com/neutrinolabs/xrdp/pull/411#issuecomment-240924950,"Make g_sck_close() do the right thing (check errors, make sure it's actually a closing socket, use proper debug levels) and add actually useful debug information (address family, local address and port).
Make fixes based on the information from g_sck_close()
Fix closing the listening socket twice in xrdp-sesman.
Use correct function to close g_term_event. It's not even a valid a file descriptor.
Cleanup useless references to g_sck in sesrun, also remove g_pid.","If IPv6 is enabled, it's normal that xrdp listens to IPv6 addresses (which also happen to be valid IPv4 addresses). The only issue is with showing the port. I see that IPv6 addresses are used in square brackets in URLs: https://en.wikipedia.org/wiki/IPv6_address#Literal_IPv6_addresses_in_network_resource_identifiers
But netstat -ltn actually shows barely readable constructs like :::22 for ssh. I think we can use brackets. Moreover, we can omit AF_INET and AF_INET6. Only AF_UNIX would be printed. I hoped to extract the UNIX socket path with getsockname(), but it returns an empty string for the sockets actually closed by xrdp. So AF_UNIX has to stay for now.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,411,2016-08-18T06:47:22Z,2016-09-20T08:56:39Z,2016-09-20T13:50:51Z,MERGED,True,176,114,10,https://github.com/proski,"Cleaning up bogus messages about closing ""established"" connections to NULL:NULL",8,[],https://github.com/neutrinolabs/xrdp/pull/411,https://github.com/proski,6,https://github.com/neutrinolabs/xrdp/pull/411#issuecomment-240933891,"Make g_sck_close() do the right thing (check errors, make sure it's actually a closing socket, use proper debug levels) and add actually useful debug information (address family, local address and port).
Make fixes based on the information from g_sck_close()
Fix closing the listening socket twice in xrdp-sesman.
Use correct function to close g_term_event. It's not even a valid a file descriptor.
Cleanup useless references to g_sck in sesrun, also remove g_pid.","I tried square brackets, and I don't like them. I prefer Closed socket 11 (AF_INET6 :::3389) to Closed socket 11 (AF_INET6 [::]:3389) and Closed socket 11 ([::]:3389), it is even more hairy. Let's leave it as is. After all, it's just debugging information.
I've added two more patches. One is another case of closing a socket twice. Another is a log message change.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,411,2016-08-18T06:47:22Z,2016-09-20T08:56:39Z,2016-09-20T13:50:51Z,MERGED,True,176,114,10,https://github.com/proski,"Cleaning up bogus messages about closing ""established"" connections to NULL:NULL",8,[],https://github.com/neutrinolabs/xrdp/pull/411,https://github.com/metalefty,7,https://github.com/neutrinolabs/xrdp/pull/411#issuecomment-240937244,"Make g_sck_close() do the right thing (check errors, make sure it's actually a closing socket, use proper debug levels) and add actually useful debug information (address family, local address and port).
Make fixes based on the information from g_sck_close()
Fix closing the listening socket twice in xrdp-sesman.
Use correct function to close g_term_event. It's not even a valid a file descriptor.
Cleanup useless references to g_sck in sesrun, also remove g_pid.","Ah, I was talking about this line.  When IPv6 is enabled, client's IP address is always shown as 0.0.0.0.
This log is written by g_tcp_accept() and g_sck_accept().  So nothing affects changed in this pull request.  I'll create a new issue.
[20160819-10:47:11] [INFO ] A connection received from: 0.0.0.0 port 53657",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,411,2016-08-18T06:47:22Z,2016-09-20T08:56:39Z,2016-09-20T13:50:51Z,MERGED,True,176,114,10,https://github.com/proski,"Cleaning up bogus messages about closing ""established"" connections to NULL:NULL",8,[],https://github.com/neutrinolabs/xrdp/pull/411,https://github.com/metalefty,8,https://github.com/neutrinolabs/xrdp/pull/411#issuecomment-240939470,"Make g_sck_close() do the right thing (check errors, make sure it's actually a closing socket, use proper debug levels) and add actually useful debug information (address family, local address and port).
Make fixes based on the information from g_sck_close()
Fix closing the listening socket twice in xrdp-sesman.
Use correct function to close g_term_event. It's not even a valid a file descriptor.
Cleanup useless references to g_sck in sesrun, also remove g_pid.",Opened #412 for 0.0.0.0 issue.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,411,2016-08-18T06:47:22Z,2016-09-20T08:56:39Z,2016-09-20T13:50:51Z,MERGED,True,176,114,10,https://github.com/proski,"Cleaning up bogus messages about closing ""established"" connections to NULL:NULL",8,[],https://github.com/neutrinolabs/xrdp/pull/411,https://github.com/metalefty,9,https://github.com/neutrinolabs/xrdp/pull/411#issuecomment-243803707,"Make g_sck_close() do the right thing (check errors, make sure it's actually a closing socket, use proper debug levels) and add actually useful debug information (address family, local address and port).
Make fixes based on the information from g_sck_close()
Fix closing the listening socket twice in xrdp-sesman.
Use correct function to close g_term_event. It's not even a valid a file descriptor.
Cleanup useless references to g_sck in sesrun, also remove g_pid.",I think this can be merged. What about you?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,411,2016-08-18T06:47:22Z,2016-09-20T08:56:39Z,2016-09-20T13:50:51Z,MERGED,True,176,114,10,https://github.com/proski,"Cleaning up bogus messages about closing ""established"" connections to NULL:NULL",8,[],https://github.com/neutrinolabs/xrdp/pull/411,https://github.com/metalefty,10,https://github.com/neutrinolabs/xrdp/pull/411#issuecomment-248243177,"Make g_sck_close() do the right thing (check errors, make sure it's actually a closing socket, use proper debug levels) and add actually useful debug information (address family, local address and port).
Make fixes based on the information from g_sck_close()
Fix closing the listening socket twice in xrdp-sesman.
Use correct function to close g_term_event. It's not even a valid a file descriptor.
Cleanup useless references to g_sck in sesrun, also remove g_pid.",1 month has passed. I think it's time to merge.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,413,2016-08-19T09:15:46Z,2016-08-25T20:48:22Z,2016-08-25T20:48:22Z,CLOSED,False,40,10,8,https://github.com/alexillsley,new options for xrdp.ini disableSSlv3=yes and tls_ciphers=HIGH,1,[],https://github.com/neutrinolabs/xrdp/pull/413,https://github.com/alexillsley,1,https://github.com/neutrinolabs/xrdp/pull/413,"New options disableSSlv3 and tls_ciphers for xrdp.ini.
SSlv3 is weak and tls_ciphers option will allow ciphers to be set to high therefore disabling weak ciphers such as RC4 .
SSlv3 and RC4 will show on security scans. These are optional settings in case you have old systems which require these.","New options disableSSlv3 and tls_ciphers for xrdp.ini.
SSlv3 is weak and tls_ciphers option will allow ciphers to be set to high therefore disabling weak ciphers such as RC4 .
SSlv3 and RC4 will show on security scans. These are optional settings in case you have old systems which require these.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,413,2016-08-19T09:15:46Z,2016-08-25T20:48:22Z,2016-08-25T20:48:22Z,CLOSED,False,40,10,8,https://github.com/alexillsley,new options for xrdp.ini disableSSlv3=yes and tls_ciphers=HIGH,1,[],https://github.com/neutrinolabs/xrdp/pull/413,https://github.com/speidy,2,https://github.com/neutrinolabs/xrdp/pull/413#issuecomment-240970387,"New options disableSSlv3 and tls_ciphers for xrdp.ini.
SSlv3 is weak and tls_ciphers option will allow ciphers to be set to high therefore disabling weak ciphers such as RC4 .
SSlv3 and RC4 will show on security scans. These are optional settings in case you have old systems which require these.","+1
I also think SSLv3 should be disabled by default (in xrdp.ini)
בתאריך יום ו׳, 19 באוג׳ 2016 ב-12:15 מאת alexillsley <
notifications@github.com>:

New options disableSSlv3 and tls_ciphers for xrdp.ini.
SSlv3 is weak and tls_ciphers option will allow ciphers to be set to high
therefore disabling weak ciphers such as RC4 .
SSlv3 and RC4 will show on security scans. These are optional settings in
case you have old systems which require these.
You can view, comment on, or merge this pull request online at:
#413
Commit Summary

new options for xrdp.ini disableSSlv3=yes and tls_ciphers=HIGH and
code to implement

File Changes

M common/ssl_calls.c
https://github.com/neutrinolabs/xrdp/pull/413/files#diff-0 (22)
M common/ssl_calls.h
https://github.com/neutrinolabs/xrdp/pull/413/files#diff-1 (2)
M common/trans.c
https://github.com/neutrinolabs/xrdp/pull/413/files#diff-2 (4)
M common/trans.h
https://github.com/neutrinolabs/xrdp/pull/413/files#diff-3 (2)
M common/xrdp_client_info.h
https://github.com/neutrinolabs/xrdp/pull/413/files#diff-4 (2)
M libxrdp/xrdp_rdp.c
https://github.com/neutrinolabs/xrdp/pull/413/files#diff-5 (12)
M libxrdp/xrdp_sec.c
https://github.com/neutrinolabs/xrdp/pull/413/files#diff-6 (2)
M xrdp/xrdp.ini
https://github.com/neutrinolabs/xrdp/pull/413/files#diff-7 (4)

Patch Links:

https://github.com/neutrinolabs/xrdp/pull/413.patch
https://github.com/neutrinolabs/xrdp/pull/413.diff

—
You are receiving this because you are subscribed to this thread.
Reply to this email directly, view it on GitHub
#413, or mute the thread
https://github.com/notifications/unsubscribe-auth/ADTH1JzAZlP4NMQK3cXL512i6v0dVir8ks5qhXRFgaJpZM4JoSnL
.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,413,2016-08-19T09:15:46Z,2016-08-25T20:48:22Z,2016-08-25T20:48:22Z,CLOSED,False,40,10,8,https://github.com/alexillsley,new options for xrdp.ini disableSSlv3=yes and tls_ciphers=HIGH,1,[],https://github.com/neutrinolabs/xrdp/pull/413,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/413#issuecomment-242260477,"New options disableSSlv3 and tls_ciphers for xrdp.ini.
SSlv3 is weak and tls_ciphers option will allow ciphers to be set to high therefore disabling weak ciphers such as RC4 .
SSlv3 and RC4 will show on security scans. These are optional settings in case you have old systems which require these.",Some code reformatting needed but +1.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,413,2016-08-19T09:15:46Z,2016-08-25T20:48:22Z,2016-08-25T20:48:22Z,CLOSED,False,40,10,8,https://github.com/alexillsley,new options for xrdp.ini disableSSlv3=yes and tls_ciphers=HIGH,1,[],https://github.com/neutrinolabs/xrdp/pull/413,https://github.com/jsorg71,4,https://github.com/neutrinolabs/xrdp/pull/413#issuecomment-242488809,"New options disableSSlv3 and tls_ciphers for xrdp.ini.
SSlv3 is weak and tls_ciphers option will allow ciphers to be set to high therefore disabling weak ciphers such as RC4 .
SSlv3 and RC4 will show on security scans. These are optional settings in case you have old systems which require these.","-     * SSL_OP_NO_SSLv2:
-     *
-     * We only want SSLv3 and TLSv1, so disable SSLv2.
+     * SSL_OP_NO_SSLv2
      * SSLv3 is used by, eg. Microsoft RDC for Mac OS X.
+     * No SSLv3 if disableSSLv3=yes so only tls used
      */
-    options |= SSL_OP_NO_SSLv2;
+     if (disableSSLv3==1) {
+   options |= SSL_OP_NO_SSLv3;
+     } else {
+   options |= SSL_OP_NO_SSLv2;
+     }

Does this look right?
If disableSSLv3 is set, should both SSL_OP_NO_SSLv3 and SSL_OP_NO_SSLv2 be set?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,413,2016-08-19T09:15:46Z,2016-08-25T20:48:22Z,2016-08-25T20:48:22Z,CLOSED,False,40,10,8,https://github.com/alexillsley,new options for xrdp.ini disableSSlv3=yes and tls_ciphers=HIGH,1,[],https://github.com/neutrinolabs/xrdp/pull/413,https://github.com/jsorg71,5,https://github.com/neutrinolabs/xrdp/pull/413#issuecomment-242490231,"New options disableSSlv3 and tls_ciphers for xrdp.ini.
SSlv3 is weak and tls_ciphers option will allow ciphers to be set to high therefore disabling weak ciphers such as RC4 .
SSlv3 and RC4 will show on security scans. These are optional settings in case you have old systems which require these.","merged as 47124df
modified a bit",True,{'HOORAY': ['https://github.com/alexillsley']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,413,2016-08-19T09:15:46Z,2016-08-25T20:48:22Z,2016-08-25T20:48:22Z,CLOSED,False,40,10,8,https://github.com/alexillsley,new options for xrdp.ini disableSSlv3=yes and tls_ciphers=HIGH,1,[],https://github.com/neutrinolabs/xrdp/pull/413,https://github.com/speidy,6,https://github.com/neutrinolabs/xrdp/pull/413#issuecomment-242491371,"New options disableSSlv3 and tls_ciphers for xrdp.ini.
SSlv3 is weak and tls_ciphers option will allow ciphers to be set to high therefore disabling weak ciphers such as RC4 .
SSlv3 and RC4 will show on security scans. These are optional settings in case you have old systems which require these.","You're right.
SSLv2 should be disabled by default and that option should add v3 to the
denied list.
בתאריך יום ה׳, 25 באוג׳ 2016 ב-21:15 מאת jsorg71 notifications@github.com:



\* SSL_OP_NO_SSLv2:



*



\* We only want SSLv3 and TLSv1, so disable SSLv2.



\* SSL_OP_NO_SSLv2


SSLv3 is used by, eg. Microsoft RDC for Mac OS X.



\* No SSLv3 if disableSSLv3=yes so only tls used

*/
options |= SSL_OP_NO_SSLv2;

if (disableSSLv3==1) {


options |= SSL_OP_NO_SSLv3;

} else {


options |= SSL_OP_NO_SSLv2;

}



Does this look right?
If disableSSLv3 is set, should both SSL_OP_NO_SSLv3 and SSL_OP_NO_SSLv2 be
set?
—
You are receiving this because you commented.
Reply to this email directly, view it on GitHub
#413 (comment),
or mute the thread
https://github.com/notifications/unsubscribe-auth/ADTH1EmslET5TFbGFU00ILtArHO22tJWks5qjdvVgaJpZM4JoSnL
.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,413,2016-08-19T09:15:46Z,2016-08-25T20:48:22Z,2016-08-25T20:48:22Z,CLOSED,False,40,10,8,https://github.com/alexillsley,new options for xrdp.ini disableSSlv3=yes and tls_ciphers=HIGH,1,[],https://github.com/neutrinolabs/xrdp/pull/413,https://github.com/jsorg71,7,https://github.com/neutrinolabs/xrdp/pull/413#issuecomment-242494996,"New options disableSSlv3 and tls_ciphers for xrdp.ini.
SSlv3 is weak and tls_ciphers option will allow ciphers to be set to high therefore disabling weak ciphers such as RC4 .
SSlv3 and RC4 will show on security scans. These are optional settings in case you have old systems which require these.","I changed it to this
    options |= SSL_OP_NO_SSLv2;
    if (disableSSLv3)
    {
        options |= SSL_OP_NO_SSLv3;
    }",True,{'THUMBS_UP': ['https://github.com/alexillsley']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,413,2016-08-19T09:15:46Z,2016-08-25T20:48:22Z,2016-08-25T20:48:22Z,CLOSED,False,40,10,8,https://github.com/alexillsley,new options for xrdp.ini disableSSlv3=yes and tls_ciphers=HIGH,1,[],https://github.com/neutrinolabs/xrdp/pull/413,https://github.com/alexillsley,8,https://github.com/neutrinolabs/xrdp/pull/413#issuecomment-242513669,"New options disableSSlv3 and tls_ciphers for xrdp.ini.
SSlv3 is weak and tls_ciphers option will allow ciphers to be set to high therefore disabling weak ciphers such as RC4 .
SSlv3 and RC4 will show on security scans. These are optional settings in case you have old systems which require these.","Thanks guys, pleased to contribute open source project :D.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,415,2016-08-30T08:07:29Z,2016-09-01T04:29:33Z,2016-10-24T06:56:35Z,MERGED,True,1,0,1,https://github.com/metalefty,Fix clipboard fle when directory name contains non-ASCII or ASCII non-alphanumeric chars,1,['clipboard'],https://github.com/neutrinolabs/xrdp/pull/415,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/415,"Hi, I fixed one more clipboard bug.
Bug description
Can't copy&paste file when the file is located in a directory its name contains non-ASCII or ASCII non-alphanumeric chars.
For example:

/home/centos/directory name contains whitespace/somefile.bin
/home/centos/ダウンロード/日本語のファイル.bin

Environment
Built by RH-Matic. Client is Windows 10's mstsc.exe.
$ rpm -qa |grep xrdp
xrdp-0.9.0.git5cd61ff+devel-1.el7.centos.x86_64
xorg-x11-drv-xrdp-0.9.0.gita0add6c+fix_utf8_clipboard-1.el7.centos.x86_64

How reproducible
Always.
What's happening?
when directory name contains whitespace
Copy these two files to clipboard.

$HOME/space directory/space filename.jpeg
$HOME/space directory/space filename (コピー 1).jpeg

[3651253284]: CLIPFILE   clipboard_get_file: 215 : ERROR: clipboard_get_file: file [/home/centos/space%20directory/space filename.jpeg] does not exist
[3651253284]: CLIPFILE   clipboard_get_file: 215 : ERROR: clipboard_get_file: file [/home/centos/space%20directory/space filename (コピー 1).jpeg] does not exist

Filename contains whitespace and non-ASCII but correctly handled.
Directory name is incorrect.
when directory and filename contains non-ASCII
Copy this file to clipboard.

$HOME/ダウンロード/日本語を含む.bin

[3650147703]: CLIPFILE   clipboard_get_file: 215 : ERROR: clipboard_get_file: file [/home/centos/%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89/日本語を含む.bin] does not exist

Filename contains non-ASCII but correctly handled.
Directory name is incorrect.
How to fix
URL decode pathname not only filename by calling clipboard_check_file() for pathname.","Hi, I fixed one more clipboard bug.
Bug description
Can't copy&paste file when the file is located in a directory its name contains non-ASCII or ASCII non-alphanumeric chars.
For example:

/home/centos/directory name contains whitespace/somefile.bin
/home/centos/ダウンロード/日本語のファイル.bin

Environment
Built by RH-Matic. Client is Windows 10's mstsc.exe.
$ rpm -qa |grep xrdp
xrdp-0.9.0.git5cd61ff+devel-1.el7.centos.x86_64
xorg-x11-drv-xrdp-0.9.0.gita0add6c+fix_utf8_clipboard-1.el7.centos.x86_64

How reproducible
Always.
What's happening?
when directory name contains whitespace
Copy these two files to clipboard.

$HOME/space directory/space filename.jpeg
$HOME/space directory/space filename (コピー 1).jpeg

[3651253284]: CLIPFILE   clipboard_get_file: 215 : ERROR: clipboard_get_file: file [/home/centos/space%20directory/space filename.jpeg] does not exist
[3651253284]: CLIPFILE   clipboard_get_file: 215 : ERROR: clipboard_get_file: file [/home/centos/space%20directory/space filename (コピー 1).jpeg] does not exist

Filename contains whitespace and non-ASCII but correctly handled.
Directory name is incorrect.
when directory and filename contains non-ASCII
Copy this file to clipboard.

$HOME/ダウンロード/日本語を含む.bin

[3650147703]: CLIPFILE   clipboard_get_file: 215 : ERROR: clipboard_get_file: file [/home/centos/%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89/日本語を含む.bin] does not exist

Filename contains non-ASCII but correctly handled.
Directory name is incorrect.
How to fix
URL decode pathname not only filename by calling clipboard_check_file() for pathname.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,415,2016-08-30T08:07:29Z,2016-09-01T04:29:33Z,2016-10-24T06:56:35Z,MERGED,True,1,0,1,https://github.com/metalefty,Fix clipboard fle when directory name contains non-ASCII or ASCII non-alphanumeric chars,1,['clipboard'],https://github.com/neutrinolabs/xrdp/pull/415,https://github.com/proski,2,https://github.com/neutrinolabs/xrdp/pull/415#issuecomment-243877476,"Hi, I fixed one more clipboard bug.
Bug description
Can't copy&paste file when the file is located in a directory its name contains non-ASCII or ASCII non-alphanumeric chars.
For example:

/home/centos/directory name contains whitespace/somefile.bin
/home/centos/ダウンロード/日本語のファイル.bin

Environment
Built by RH-Matic. Client is Windows 10's mstsc.exe.
$ rpm -qa |grep xrdp
xrdp-0.9.0.git5cd61ff+devel-1.el7.centos.x86_64
xorg-x11-drv-xrdp-0.9.0.gita0add6c+fix_utf8_clipboard-1.el7.centos.x86_64

How reproducible
Always.
What's happening?
when directory name contains whitespace
Copy these two files to clipboard.

$HOME/space directory/space filename.jpeg
$HOME/space directory/space filename (コピー 1).jpeg

[3651253284]: CLIPFILE   clipboard_get_file: 215 : ERROR: clipboard_get_file: file [/home/centos/space%20directory/space filename.jpeg] does not exist
[3651253284]: CLIPFILE   clipboard_get_file: 215 : ERROR: clipboard_get_file: file [/home/centos/space%20directory/space filename (コピー 1).jpeg] does not exist

Filename contains whitespace and non-ASCII but correctly handled.
Directory name is incorrect.
when directory and filename contains non-ASCII
Copy this file to clipboard.

$HOME/ダウンロード/日本語を含む.bin

[3650147703]: CLIPFILE   clipboard_get_file: 215 : ERROR: clipboard_get_file: file [/home/centos/%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89/日本語を含む.bin] does not exist

Filename contains non-ASCII but correctly handled.
Directory name is incorrect.
How to fix
URL decode pathname not only filename by calling clipboard_check_file() for pathname.","It would be good to call clipboard_get_file() once. But if it's called on ""full_fn"", we can run out of the buffer length which is just 256 bytes. And if it's done on ""file"", clipboard_get_file() would have a side effect on its argument. I'd rather have it accept ""const char *file"" and thus explicitly promise no side effects.
Anyway, let's apply the patch as is and do the cleanup later.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,415,2016-08-30T08:07:29Z,2016-09-01T04:29:33Z,2016-10-24T06:56:35Z,MERGED,True,1,0,1,https://github.com/metalefty,Fix clipboard fle when directory name contains non-ASCII or ASCII non-alphanumeric chars,1,['clipboard'],https://github.com/neutrinolabs/xrdp/pull/415,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/415#issuecomment-243973058,"Hi, I fixed one more clipboard bug.
Bug description
Can't copy&paste file when the file is located in a directory its name contains non-ASCII or ASCII non-alphanumeric chars.
For example:

/home/centos/directory name contains whitespace/somefile.bin
/home/centos/ダウンロード/日本語のファイル.bin

Environment
Built by RH-Matic. Client is Windows 10's mstsc.exe.
$ rpm -qa |grep xrdp
xrdp-0.9.0.git5cd61ff+devel-1.el7.centos.x86_64
xorg-x11-drv-xrdp-0.9.0.gita0add6c+fix_utf8_clipboard-1.el7.centos.x86_64

How reproducible
Always.
What's happening?
when directory name contains whitespace
Copy these two files to clipboard.

$HOME/space directory/space filename.jpeg
$HOME/space directory/space filename (コピー 1).jpeg

[3651253284]: CLIPFILE   clipboard_get_file: 215 : ERROR: clipboard_get_file: file [/home/centos/space%20directory/space filename.jpeg] does not exist
[3651253284]: CLIPFILE   clipboard_get_file: 215 : ERROR: clipboard_get_file: file [/home/centos/space%20directory/space filename (コピー 1).jpeg] does not exist

Filename contains whitespace and non-ASCII but correctly handled.
Directory name is incorrect.
when directory and filename contains non-ASCII
Copy this file to clipboard.

$HOME/ダウンロード/日本語を含む.bin

[3650147703]: CLIPFILE   clipboard_get_file: 215 : ERROR: clipboard_get_file: file [/home/centos/%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89/日本語を含む.bin] does not exist

Filename contains non-ASCII but correctly handled.
Directory name is incorrect.
How to fix
URL decode pathname not only filename by calling clipboard_check_file() for pathname.","Thank you very much for always doing cleanups.  In xrdp, handling of non-ASCII chars is not well tested or cared because main developers are in English-speaking countries.  I think I have a little more experience than them. Let me merge this by myself.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,416,2016-08-31T19:11:14Z,2016-09-06T03:23:40Z,2016-09-10T18:30:28Z,CLOSED,False,696,41,19,https://github.com/proski,Add UK English keyboard,2,['new keyboard layout'],https://github.com/neutrinolabs/xrdp/pull/416,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/416,"Add the keyboard ini file for UK English from http://component-parts.blogspot.ie/2012/08/fixing-uk-keyboard-mapping-for-xrdp.html
Add locale descriptions to the locale files and remove them from xrdp-genkeymap man page and source. It's more maintainable that way.","Add the keyboard ini file for UK English from http://component-parts.blogspot.ie/2012/08/fixing-uk-keyboard-mapping-for-xrdp.html
Add locale descriptions to the locale files and remove them from xrdp-genkeymap man page and source. It's more maintainable that way.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,416,2016-08-31T19:11:14Z,2016-09-06T03:23:40Z,2016-09-10T18:30:28Z,CLOSED,False,696,41,19,https://github.com/proski,Add UK English keyboard,2,['new keyboard layout'],https://github.com/neutrinolabs/xrdp/pull/416,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/416#issuecomment-243952665,"Add the keyboard ini file for UK English from http://component-parts.blogspot.ie/2012/08/fixing-uk-keyboard-mapping-for-xrdp.html
Add locale descriptions to the locale files and remove them from xrdp-genkeymap man page and source. It's more maintainable that way.","Two thoughts.
One is about Japanese keymap file.  km-e0010411.ini, km-e0200411.ini, km-e0210411.ini are all for Japanese.  Please keep them identical to km-0411.ini.  I'm thinkng to replace the with symbolic link to km-0411.ini.
Another one is about locale descriptions.  XXXX of km-XXXX.ini is called ""locale identifier"" or ""keyboardLayout"".  Search [MS-RDPBCGR].pdf with the word ""locale identifier"".  It is 32bit unsigned value expressed in 8-digit hexadecimal number.  The lower 16bit indicates country/language.  The upper 16bit indicates keyboard layout or active input method.  For example, US Dvorak keyboard has the value 0x00010409.
See also

https://technet.microsoft.com/en-us/library/cc766503(WS.10).aspx
https://technet.microsoft.com/ja-jp/library/cc748926(WS.10).aspx

When creating keymap file, the upper 16 bits filled in 0 should be ommitted.
0x00010409 -> km-10409.ini
0xe0010411 -> km-e0010411.ini

This is because this code in xrdp/lang.c:234.
g_snprintf(filename, 255, ""%s/km-%4.4x.ini"", XRDP_CFG_PATH, keylayout);",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,416,2016-08-31T19:11:14Z,2016-09-06T03:23:40Z,2016-09-10T18:30:28Z,CLOSED,False,696,41,19,https://github.com/proski,Add UK English keyboard,2,['new keyboard layout'],https://github.com/neutrinolabs/xrdp/pull/416,https://github.com/proski,3,https://github.com/neutrinolabs/xrdp/pull/416#issuecomment-244105807,"Add the keyboard ini file for UK English from http://component-parts.blogspot.ie/2012/08/fixing-uk-keyboard-mapping-for-xrdp.html
Add locale descriptions to the locale files and remove them from xrdp-genkeymap man page and source. It's more maintainable that way.","I didn't realize all km-*0411.ini files were identical. Rather than make symlinks for them, xrdp could be changed to fall back to the 16-bit version.
I'll add the additional documentation.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,416,2016-08-31T19:11:14Z,2016-09-06T03:23:40Z,2016-09-10T18:30:28Z,CLOSED,False,696,41,19,https://github.com/proski,Add UK English keyboard,2,['new keyboard layout'],https://github.com/neutrinolabs/xrdp/pull/416,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/416#issuecomment-244254480,"Add the keyboard ini file for UK English from http://component-parts.blogspot.ie/2012/08/fixing-uk-keyboard-mapping-for-xrdp.html
Add locale descriptions to the locale files and remove them from xrdp-genkeymap man page and source. It's more maintainable that way.","xrdp could be changed to fall back to the 16-bit version.

Good idea.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,416,2016-08-31T19:11:14Z,2016-09-06T03:23:40Z,2016-09-10T18:30:28Z,CLOSED,False,696,41,19,https://github.com/proski,Add UK English keyboard,2,['new keyboard layout'],https://github.com/neutrinolabs/xrdp/pull/416,https://github.com/metalefty,5,https://github.com/neutrinolabs/xrdp/pull/416#issuecomment-244352871,"Add the keyboard ini file for UK English from http://component-parts.blogspot.ie/2012/08/fixing-uk-keyboard-mapping-for-xrdp.html
Add locale descriptions to the locale files and remove them from xrdp-genkeymap man page and source. It's more maintainable that way.","I did fallback in #418. We can remove km-????0411.ini now.
km-????xxxx.ini should be put only if it is not identical to km-xxxx.ini.
km-0409.ini (US) and km-00010409.ini (US Dvorak), for example.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,417,2016-09-02T04:51:23Z,2016-09-09T07:04:43Z,2016-10-24T06:56:38Z,MERGED,True,9,3,2,https://github.com/metalefty,Apply xkb options for x11rdp,4,['keyboard'],https://github.com/neutrinolabs/xrdp/pull/417,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/417,"Setting xkb options is added  in #364 but options are not applied to x11rdp.
This is already implemented for xorgxrdp.
And some more logs.","Setting xkb options is added  in #364 but options are not applied to x11rdp.
This is already implemented for xorgxrdp.
And some more logs.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,417,2016-09-02T04:51:23Z,2016-09-09T07:04:43Z,2016-10-24T06:56:38Z,MERGED,True,9,3,2,https://github.com/metalefty,Apply xkb options for x11rdp,4,['keyboard'],https://github.com/neutrinolabs/xrdp/pull/417,https://github.com/proski,2,https://github.com/neutrinolabs/xrdp/pull/417#issuecomment-244855885,"Setting xkb options is added  in #364 but options are not applied to x11rdp.
This is already implemented for xorgxrdp.
And some more logs.","You may want to remove LLOGLN(0, (""xrdp_load_keyboard_layout:"")); before the keyboard type/subtype is logged. No need to log the same text twice.
Apart from that, the PR looks good to me.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,417,2016-09-02T04:51:23Z,2016-09-09T07:04:43Z,2016-10-24T06:56:38Z,MERGED,True,9,3,2,https://github.com/metalefty,Apply xkb options for x11rdp,4,['keyboard'],https://github.com/neutrinolabs/xrdp/pull/417,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/417#issuecomment-244865369,"Setting xkb options is added  in #364 but options are not applied to x11rdp.
This is already implemented for xorgxrdp.
And some more logs.",Removed.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,417,2016-09-02T04:51:23Z,2016-09-09T07:04:43Z,2016-10-24T06:56:38Z,MERGED,True,9,3,2,https://github.com/metalefty,Apply xkb options for x11rdp,4,['keyboard'],https://github.com/neutrinolabs/xrdp/pull/417,https://github.com/proski,4,https://github.com/neutrinolabs/xrdp/pull/417#issuecomment-245003566,"Setting xkb options is added  in #364 but options are not applied to x11rdp.
This is already implemented for xorgxrdp.
And some more logs.","The code change is good. You got ""log"" twice in the last commit message. I would just squash the extra commit and force-push the branch. But it's not very important. See http://stackoverflow.com/questions/7947322/preferred-github-workflow-for-updating-a-pull-request-after-code-review/23913725",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,417,2016-09-02T04:51:23Z,2016-09-09T07:04:43Z,2016-10-24T06:56:38Z,MERGED,True,9,3,2,https://github.com/metalefty,Apply xkb options for x11rdp,4,['keyboard'],https://github.com/neutrinolabs/xrdp/pull/417,https://github.com/metalefty,5,https://github.com/neutrinolabs/xrdp/pull/417#issuecomment-245135921,"Setting xkb options is added  in #364 but options are not applied to x11rdp.
This is already implemented for xorgxrdp.
And some more logs.","Thanks, I'll do that if force-push is acceptable. I didn't squash as some people don't like force-push.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,417,2016-09-02T04:51:23Z,2016-09-09T07:04:43Z,2016-10-24T06:56:38Z,MERGED,True,9,3,2,https://github.com/metalefty,Apply xkb options for x11rdp,4,['keyboard'],https://github.com/neutrinolabs/xrdp/pull/417,https://github.com/proski,6,https://github.com/neutrinolabs/xrdp/pull/417#issuecomment-245469560,"Setting xkb options is added  in #364 but options are not applied to x11rdp.
This is already implemented for xorgxrdp.
And some more logs.","I think it's entirely acceptable in the branches created for pull requests. But it shouldn't matter, your changes are good to be applied either way.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,417,2016-09-02T04:51:23Z,2016-09-09T07:04:43Z,2016-10-24T06:56:38Z,MERGED,True,9,3,2,https://github.com/metalefty,Apply xkb options for x11rdp,4,['keyboard'],https://github.com/neutrinolabs/xrdp/pull/417,https://github.com/metalefty,7,https://github.com/neutrinolabs/xrdp/pull/417#issuecomment-245836232,"Setting xkb options is added  in #364 but options are not applied to x11rdp.
This is already implemented for xorgxrdp.
And some more logs.",Let's merge.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,418,2016-09-02T11:23:58Z,2016-11-08T06:12:51Z,2016-11-08T06:13:00Z,MERGED,True,14,2,1,https://github.com/metalefty,Use km-0000yyyy.ini if km-xxxxyyyy.ini doen't exist,1,['keyboard'],https://github.com/neutrinolabs/xrdp/pull/418,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/418,"upper 16 bits of keylayout value indicates keyboard layout.
lower 16 bits of keylayout value indicates country/language.
If the keymap file doesn't match exactly to keylayout value,
the typical keyboard of the country/language should be used.
For example [1]:
0x00000409: US English
0x00010409: US Dvorak
0x00020409: US International
0x00030409: US Dvorak for left hand
0x00040409: US Dvorak for right hang
0x0000040e: Hungarian
0x0001040e: Hungarian 101-key
[1] https://msdn.microsoft.com/windows/hardware/commercialize/manufacture/desktop/windows-language-pack-default-values","upper 16 bits of keylayout value indicates keyboard layout.
lower 16 bits of keylayout value indicates country/language.
If the keymap file doesn't match exactly to keylayout value,
the typical keyboard of the country/language should be used.
For example [1]:
0x00000409: US English
0x00010409: US Dvorak
0x00020409: US International
0x00030409: US Dvorak for left hand
0x00040409: US Dvorak for right hang
0x0000040e: Hungarian
0x0001040e: Hungarian 101-key
[1] https://msdn.microsoft.com/windows/hardware/commercialize/manufacture/desktop/windows-language-pack-default-values",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,418,2016-09-02T11:23:58Z,2016-11-08T06:12:51Z,2016-11-08T06:13:00Z,MERGED,True,14,2,1,https://github.com/metalefty,Use km-0000yyyy.ini if km-xxxxyyyy.ini doen't exist,1,['keyboard'],https://github.com/neutrinolabs/xrdp/pull/418,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/418#issuecomment-244354502,"upper 16 bits of keylayout value indicates keyboard layout.
lower 16 bits of keylayout value indicates country/language.
If the keymap file doesn't match exactly to keylayout value,
the typical keyboard of the country/language should be used.
For example [1]:
0x00000409: US English
0x00010409: US Dvorak
0x00020409: US International
0x00030409: US Dvorak for left hand
0x00040409: US Dvorak for right hang
0x0000040e: Hungarian
0x0001040e: Hungarian 101-key
[1] https://msdn.microsoft.com/windows/hardware/commercialize/manufacture/desktop/windows-language-pack-default-values","If the keymap file matches exactly to keylayout value,
the typical keyboard of the country/language should be used.

Oops, DOESN'T here. Commit message edited.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,418,2016-09-02T11:23:58Z,2016-11-08T06:12:51Z,2016-11-08T06:13:00Z,MERGED,True,14,2,1,https://github.com/metalefty,Use km-0000yyyy.ini if km-xxxxyyyy.ini doen't exist,1,['keyboard'],https://github.com/neutrinolabs/xrdp/pull/418,https://github.com/proski,3,https://github.com/neutrinolabs/xrdp/pull/418#issuecomment-244389748,"upper 16 bits of keylayout value indicates keyboard layout.
lower 16 bits of keylayout value indicates country/language.
If the keymap file doesn't match exactly to keylayout value,
the typical keyboard of the country/language should be used.
For example [1]:
0x00000409: US English
0x00010409: US Dvorak
0x00020409: US International
0x00030409: US Dvorak for left hand
0x00040409: US Dvorak for right hang
0x0000040e: Hungarian
0x0001040e: Hungarian 101-key
[1] https://msdn.microsoft.com/windows/hardware/commercialize/manufacture/desktop/windows-language-pack-default-values","You can just amend the existing commit and force-push it.
I like switching from %4.4x to %08x format
Please calculate the shorter number once and make a variable for it if needed. Generally, try to reuse as much as possible in the log messages so that they reflect the actual behavior.
If a file cannot be loaded, It's better to report it with the full path. That's more helpful in case of actual problems. No need to report what would be next.
I would want log messages like this:
[INFO] Cannot find keymap file /etc/xrdp/km-00010809.ini
[INFO] Cannot find keymap file /etc/xrdp/km-0809.ini
[INFO] Loading keymap file /etc/xrdp/km-0409.ini",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,418,2016-09-02T11:23:58Z,2016-11-08T06:12:51Z,2016-11-08T06:13:00Z,MERGED,True,14,2,1,https://github.com/metalefty,Use km-0000yyyy.ini if km-xxxxyyyy.ini doen't exist,1,['keyboard'],https://github.com/neutrinolabs/xrdp/pull/418,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/418#issuecomment-244524635,"upper 16 bits of keylayout value indicates keyboard layout.
lower 16 bits of keylayout value indicates country/language.
If the keymap file doesn't match exactly to keylayout value,
the typical keyboard of the country/language should be used.
For example [1]:
0x00000409: US English
0x00010409: US Dvorak
0x00020409: US International
0x00030409: US Dvorak for left hand
0x00040409: US Dvorak for right hang
0x0000040e: Hungarian
0x0001040e: Hungarian 101-key
[1] https://msdn.microsoft.com/windows/hardware/commercialize/manufacture/desktop/windows-language-pack-default-values","@proski
Do you mean all km-%4.4x.ini files to be renamed to km-%08x.ini?
If so, I like it.
@jsorg71
What do you think? I like %08x too because keylayout is actually a 32 bit value.
New keymap file loading would be:

When the client reports 0x00010809, find km-00010809.ini
If not found, find km-00000809.ini
If not found, find km-00000409.ini",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,418,2016-09-02T11:23:58Z,2016-11-08T06:12:51Z,2016-11-08T06:13:00Z,MERGED,True,14,2,1,https://github.com/metalefty,Use km-0000yyyy.ini if km-xxxxyyyy.ini doen't exist,1,['keyboard'],https://github.com/neutrinolabs/xrdp/pull/418,https://github.com/proski,5,https://github.com/neutrinolabs/xrdp/pull/418#issuecomment-244530229,"upper 16 bits of keylayout value indicates keyboard layout.
lower 16 bits of keylayout value indicates country/language.
If the keymap file doesn't match exactly to keylayout value,
the typical keyboard of the country/language should be used.
For example [1]:
0x00000409: US English
0x00010409: US Dvorak
0x00020409: US International
0x00030409: US Dvorak for left hand
0x00040409: US Dvorak for right hang
0x0000040e: Hungarian
0x0001040e: Hungarian 101-key
[1] https://msdn.microsoft.com/windows/hardware/commercialize/manufacture/desktop/windows-language-pack-default-values","I actually meant using 8 hex digit format for the numbers that don't fit 4 hex digits. For example, the US Dvorak keyboard is represented as km-10409.ini now, but it would become km-00010409.ini. We don't even have such keymaps yet.
But I agree it makes sense to rename all keymaps to use 8 hex digit. Distinguishing ""full"" and ""fallback"" maps doesn't always make sense. For example, the standard US English keyboard is not a good fallback for US Dvorak.
Now I think we should have some way to indicate that XRDP specifically supports some keyboard variant. Fallback to the default variant should be a cause for concern and an invitation to support the new keyboard variant. It should be [WARNING], not [INFO].
Symlinks would be a poor solution. It would be better to make it possible for a keymap to inherit data from another keymap and override a few symbols if needed. By the way, I don't think km-*0411.ini are supposed to be identical.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,418,2016-09-02T11:23:58Z,2016-11-08T06:12:51Z,2016-11-08T06:13:00Z,MERGED,True,14,2,1,https://github.com/metalefty,Use km-0000yyyy.ini if km-xxxxyyyy.ini doen't exist,1,['keyboard'],https://github.com/neutrinolabs/xrdp/pull/418,https://github.com/metalefty,6,https://github.com/neutrinolabs/xrdp/pull/418#issuecomment-244541624,"upper 16 bits of keylayout value indicates keyboard layout.
lower 16 bits of keylayout value indicates country/language.
If the keymap file doesn't match exactly to keylayout value,
the typical keyboard of the country/language should be used.
For example [1]:
0x00000409: US English
0x00010409: US Dvorak
0x00020409: US International
0x00030409: US Dvorak for left hand
0x00040409: US Dvorak for right hang
0x0000040e: Hungarian
0x0001040e: Hungarian 101-key
[1] https://msdn.microsoft.com/windows/hardware/commercialize/manufacture/desktop/windows-language-pack-default-values","FYI, I found the official definition of locale identifier (keylayout in xrdp).

A  32-bit value which consists of the language ID in the low word (bits 0-15) and the sorting ID (bits 16-19) and a reserved value (bits 20-31) in the high word.

https://www.microsoft.com/Language/en-US/Search.aspx?sString=locale&langID=es-es",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,418,2016-09-02T11:23:58Z,2016-11-08T06:12:51Z,2016-11-08T06:13:00Z,MERGED,True,14,2,1,https://github.com/metalefty,Use km-0000yyyy.ini if km-xxxxyyyy.ini doen't exist,1,['keyboard'],https://github.com/neutrinolabs/xrdp/pull/418,https://github.com/metalefty,7,https://github.com/neutrinolabs/xrdp/pull/418#issuecomment-244543235,"upper 16 bits of keylayout value indicates keyboard layout.
lower 16 bits of keylayout value indicates country/language.
If the keymap file doesn't match exactly to keylayout value,
the typical keyboard of the country/language should be used.
For example [1]:
0x00000409: US English
0x00010409: US Dvorak
0x00020409: US International
0x00030409: US Dvorak for left hand
0x00040409: US Dvorak for right hang
0x0000040e: Hungarian
0x0001040e: Hungarian 101-key
[1] https://msdn.microsoft.com/windows/hardware/commercialize/manufacture/desktop/windows-language-pack-default-values","By the way, I don't think km-*0411.ini are supposed to be identical.

Yes. They're not supposed to be identical.  It has been confirmed that four km-0411.ini, km-e0010411.ini, km-e0200411.ini and km-e0210411.ini are identical.
In CJK languages, probably, the differences among them are IMEs. Not the keyboard variants.
https://github.com/awakecoding/FreeRDP-Manuals/blob/master/User/FreeRDP-User-Manual.markdown#keyboard-input-method-editors-imes",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,418,2016-09-02T11:23:58Z,2016-11-08T06:12:51Z,2016-11-08T06:13:00Z,MERGED,True,14,2,1,https://github.com/metalefty,Use km-0000yyyy.ini if km-xxxxyyyy.ini doen't exist,1,['keyboard'],https://github.com/neutrinolabs/xrdp/pull/418,https://github.com/proski,8,https://github.com/neutrinolabs/xrdp/pull/418#issuecomment-252538691,"upper 16 bits of keylayout value indicates keyboard layout.
lower 16 bits of keylayout value indicates country/language.
If the keymap file doesn't match exactly to keylayout value,
the typical keyboard of the country/language should be used.
For example [1]:
0x00000409: US English
0x00010409: US Dvorak
0x00020409: US International
0x00030409: US Dvorak for left hand
0x00040409: US Dvorak for right hang
0x0000040e: Hungarian
0x0001040e: Hungarian 101-key
[1] https://msdn.microsoft.com/windows/hardware/commercialize/manufacture/desktop/windows-language-pack-default-values",Is this patch still relevant? I suggest that we switch to 8 hex digit format for all km*.ini files.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,418,2016-09-02T11:23:58Z,2016-11-08T06:12:51Z,2016-11-08T06:13:00Z,MERGED,True,14,2,1,https://github.com/metalefty,Use km-0000yyyy.ini if km-xxxxyyyy.ini doen't exist,1,['keyboard'],https://github.com/neutrinolabs/xrdp/pull/418,https://github.com/metalefty,9,https://github.com/neutrinolabs/xrdp/pull/418#issuecomment-252654076,"upper 16 bits of keylayout value indicates keyboard layout.
lower 16 bits of keylayout value indicates country/language.
If the keymap file doesn't match exactly to keylayout value,
the typical keyboard of the country/language should be used.
For example [1]:
0x00000409: US English
0x00010409: US Dvorak
0x00020409: US International
0x00030409: US Dvorak for left hand
0x00040409: US Dvorak for right hang
0x0000040e: Hungarian
0x0001040e: Hungarian 101-key
[1] https://msdn.microsoft.com/windows/hardware/commercialize/manufacture/desktop/windows-language-pack-default-values","I'll make another pull request just converting to 8 hex digit format.
And then rework this.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,418,2016-09-02T11:23:58Z,2016-11-08T06:12:51Z,2016-11-08T06:13:00Z,MERGED,True,14,2,1,https://github.com/metalefty,Use km-0000yyyy.ini if km-xxxxyyyy.ini doen't exist,1,['keyboard'],https://github.com/neutrinolabs/xrdp/pull/418,https://github.com/metalefty,10,https://github.com/neutrinolabs/xrdp/pull/418#issuecomment-257777158,"upper 16 bits of keylayout value indicates keyboard layout.
lower 16 bits of keylayout value indicates country/language.
If the keymap file doesn't match exactly to keylayout value,
the typical keyboard of the country/language should be used.
For example [1]:
0x00000409: US English
0x00010409: US Dvorak
0x00020409: US International
0x00030409: US Dvorak for left hand
0x00040409: US Dvorak for right hang
0x0000040e: Hungarian
0x0001040e: Hungarian 101-key
[1] https://msdn.microsoft.com/windows/hardware/commercialize/manufacture/desktop/windows-language-pack-default-values","As #437 was merged, I updated patch and force pushed.
@proski could you look at this again?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,418,2016-09-02T11:23:58Z,2016-11-08T06:12:51Z,2016-11-08T06:13:00Z,MERGED,True,14,2,1,https://github.com/metalefty,Use km-0000yyyy.ini if km-xxxxyyyy.ini doen't exist,1,['keyboard'],https://github.com/neutrinolabs/xrdp/pull/418,https://github.com/proski,11,https://github.com/neutrinolabs/xrdp/pull/418#issuecomment-258934706,"upper 16 bits of keylayout value indicates keyboard layout.
lower 16 bits of keylayout value indicates country/language.
If the keymap file doesn't match exactly to keylayout value,
the typical keyboard of the country/language should be used.
For example [1]:
0x00000409: US English
0x00010409: US Dvorak
0x00020409: US International
0x00030409: US Dvorak for left hand
0x00040409: US Dvorak for right hang
0x0000040e: Hungarian
0x0001040e: Hungarian 101-key
[1] https://msdn.microsoft.com/windows/hardware/commercialize/manufacture/desktop/windows-language-pack-default-values",Looks good to me.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,420,2016-09-06T05:19:17Z,2016-09-08T15:11:29Z,2016-09-10T18:30:22Z,MERGED,True,1060,0,3,https://github.com/proski,Add UK English keyboard and code to generate it,1,['new keyboard layout'],https://github.com/neutrinolabs/xrdp/pull/420,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/420,I generated the UK English keymap on Fedora 24 (xorg-x11-server-Xorg-1.18.4-4.fc24.x86_64). The code used to generate the keymap has been added to genkeymap/dump-keymaps.sh,I generated the UK English keymap on Fedora 24 (xorg-x11-server-Xorg-1.18.4-4.fc24.x86_64). The code used to generate the keymap has been added to genkeymap/dump-keymaps.sh,True,{'THUMBS_UP': ['https://github.com/metalefty']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,420,2016-09-06T05:19:17Z,2016-09-08T15:11:29Z,2016-09-10T18:30:22Z,MERGED,True,1060,0,3,https://github.com/proski,Add UK English keyboard and code to generate it,1,['new keyboard layout'],https://github.com/neutrinolabs/xrdp/pull/420,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/420#issuecomment-245630376,I generated the UK English keymap on Fedora 24 (xorg-x11-server-Xorg-1.18.4-4.fc24.x86_64). The code used to generate the keymap has been added to genkeymap/dump-keymaps.sh,Simple. Let's merge.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,425,2016-09-20T04:10:48Z,2016-10-04T03:48:51Z,2017-03-14T17:18:39Z,CLOSED,False,43,5,1,https://github.com/jsorg71,xrdp: handle 3 byte PDU,1,[],https://github.com/neutrinolabs/xrdp/pull/425,https://github.com/jsorg71,1,https://github.com/neutrinolabs/xrdp/pull/425,A few fixes for xrdp_process_data_in,A few fixes for xrdp_process_data_in,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,425,2016-09-20T04:10:48Z,2016-10-04T03:48:51Z,2017-03-14T17:18:39Z,CLOSED,False,43,5,1,https://github.com/jsorg71,xrdp: handle 3 byte PDU,1,[],https://github.com/neutrinolabs/xrdp/pull/425,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/425#issuecomment-251273333,A few fixes for xrdp_process_data_in,merge?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,425,2016-09-20T04:10:48Z,2016-10-04T03:48:51Z,2017-03-14T17:18:39Z,CLOSED,False,43,5,1,https://github.com/jsorg71,xrdp: handle 3 byte PDU,1,[],https://github.com/neutrinolabs/xrdp/pull/425,https://github.com/jsorg71,3,https://github.com/neutrinolabs/xrdp/pull/425#issuecomment-251283597,A few fixes for xrdp_process_data_in,"I'll merge it, thanks.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,425,2016-09-20T04:10:48Z,2016-10-04T03:48:51Z,2017-03-14T17:18:39Z,CLOSED,False,43,5,1,https://github.com/jsorg71,xrdp: handle 3 byte PDU,1,[],https://github.com/neutrinolabs/xrdp/pull/425,https://github.com/jsorg71,4,https://github.com/neutrinolabs/xrdp/pull/425#issuecomment-251284525,A few fixes for xrdp_process_data_in,merged as 4098786,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,426,2016-09-21T05:18:35Z,2017-01-16T05:26:51Z,2017-01-25T01:18:11Z,MERGED,True,49,4,5,https://github.com/metalefty,TLS: log TLS version and cipher,4,['TLS'],https://github.com/neutrinolabs/xrdp/pull/426,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/426,"Hi, I've implemented logging of TLS version and cipher suggested at #422.
The purpose to log it is to know which client use which SSL/TLS version and cipher suites and confirm how safe it is.  For example, the feature to disable SSLv3 and choose cipher suite has been implemented. Disabling vulnerable SSL protocols or cipher suites affects some clients.   Logging help us to know which client is affected when vulnerable SSL protocols or cipher suites are disabled.
I know all SSL or encryption relevant codes are written in common/ssl_calls.c and libxrdp/xrdp_sec.c , however, in order to log client's IP address and TLS information together, there's only option for me to implement it in libxrdp/xrdp_rdp.c.
This is really a draft.  If there's better way to log it, please leave comment and help me.","Hi, I've implemented logging of TLS version and cipher suggested at #422.
The purpose to log it is to know which client use which SSL/TLS version and cipher suites and confirm how safe it is.  For example, the feature to disable SSLv3 and choose cipher suite has been implemented. Disabling vulnerable SSL protocols or cipher suites affects some clients.   Logging help us to know which client is affected when vulnerable SSL protocols or cipher suites are disabled.
I know all SSL or encryption relevant codes are written in common/ssl_calls.c and libxrdp/xrdp_sec.c , however, in order to log client's IP address and TLS information together, there's only option for me to implement it in libxrdp/xrdp_rdp.c.
This is really a draft.  If there's better way to log it, please leave comment and help me.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,426,2016-09-21T05:18:35Z,2017-01-16T05:26:51Z,2017-01-25T01:18:11Z,MERGED,True,49,4,5,https://github.com/metalefty,TLS: log TLS version and cipher,4,['TLS'],https://github.com/neutrinolabs/xrdp/pull/426,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/426#issuecomment-271512184,"Hi, I've implemented logging of TLS version and cipher suggested at #422.
The purpose to log it is to know which client use which SSL/TLS version and cipher suites and confirm how safe it is.  For example, the feature to disable SSLv3 and choose cipher suite has been implemented. Disabling vulnerable SSL protocols or cipher suites affects some clients.   Logging help us to know which client is affected when vulnerable SSL protocols or cipher suites are disabled.
I know all SSL or encryption relevant codes are written in common/ssl_calls.c and libxrdp/xrdp_sec.c , however, in order to log client's IP address and TLS information together, there's only option for me to implement it in libxrdp/xrdp_rdp.c.
This is really a draft.  If there's better way to log it, please leave comment and help me.",All I wanted to do is done. Standard RDP security can use 3DES or RC4 but I don't log which is in use at this time.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,426,2016-09-21T05:18:35Z,2017-01-16T05:26:51Z,2017-01-25T01:18:11Z,MERGED,True,49,4,5,https://github.com/metalefty,TLS: log TLS version and cipher,4,['TLS'],https://github.com/neutrinolabs/xrdp/pull/426,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/426#issuecomment-271513185,"Hi, I've implemented logging of TLS version and cipher suggested at #422.
The purpose to log it is to know which client use which SSL/TLS version and cipher suites and confirm how safe it is.  For example, the feature to disable SSLv3 and choose cipher suite has been implemented. Disabling vulnerable SSL protocols or cipher suites affects some clients.   Logging help us to know which client is affected when vulnerable SSL protocols or cipher suites are disabled.
I know all SSL or encryption relevant codes are written in common/ssl_calls.c and libxrdp/xrdp_sec.c , however, in order to log client's IP address and TLS information together, there's only option for me to implement it in libxrdp/xrdp_rdp.c.
This is really a draft.  If there's better way to log it, please leave comment and help me.",Merging this before #542 makes it easy to test which SSL protocol is actually in use.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,426,2016-09-21T05:18:35Z,2017-01-16T05:26:51Z,2017-01-25T01:18:11Z,MERGED,True,49,4,5,https://github.com/metalefty,TLS: log TLS version and cipher,4,['TLS'],https://github.com/neutrinolabs/xrdp/pull/426,https://github.com/proski,4,https://github.com/neutrinolabs/xrdp/pull/426#issuecomment-272567328,"Hi, I've implemented logging of TLS version and cipher suggested at #422.
The purpose to log it is to know which client use which SSL/TLS version and cipher suites and confirm how safe it is.  For example, the feature to disable SSLv3 and choose cipher suite has been implemented. Disabling vulnerable SSL protocols or cipher suites affects some clients.   Logging help us to know which client is affected when vulnerable SSL protocols or cipher suites are disabled.
I know all SSL or encryption relevant codes are written in common/ssl_calls.c and libxrdp/xrdp_sec.c , however, in order to log client's IP address and TLS information together, there's only option for me to implement it in libxrdp/xrdp_rdp.c.
This is really a draft.  If there's better way to log it, please leave comment and help me.",Ship it!,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,426,2016-09-21T05:18:35Z,2017-01-16T05:26:51Z,2017-01-25T01:18:11Z,MERGED,True,49,4,5,https://github.com/metalefty,TLS: log TLS version and cipher,4,['TLS'],https://github.com/neutrinolabs/xrdp/pull/426,https://github.com/metalefty,5,https://github.com/neutrinolabs/xrdp/pull/426#issuecomment-272765125,"Hi, I've implemented logging of TLS version and cipher suggested at #422.
The purpose to log it is to know which client use which SSL/TLS version and cipher suites and confirm how safe it is.  For example, the feature to disable SSLv3 and choose cipher suite has been implemented. Disabling vulnerable SSL protocols or cipher suites affects some clients.   Logging help us to know which client is affected when vulnerable SSL protocols or cipher suites are disabled.
I know all SSL or encryption relevant codes are written in common/ssl_calls.c and libxrdp/xrdp_sec.c , however, in order to log client's IP address and TLS information together, there's only option for me to implement it in libxrdp/xrdp_rdp.c.
This is really a draft.  If there's better way to log it, please leave comment and help me.",@jsorg71 @speidy Please merge if this looks good to you.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,426,2016-09-21T05:18:35Z,2017-01-16T05:26:51Z,2017-01-25T01:18:11Z,MERGED,True,49,4,5,https://github.com/metalefty,TLS: log TLS version and cipher,4,['TLS'],https://github.com/neutrinolabs/xrdp/pull/426,https://github.com/speidy,6,https://github.com/neutrinolabs/xrdp/pull/426#issuecomment-272776830,"Hi, I've implemented logging of TLS version and cipher suggested at #422.
The purpose to log it is to know which client use which SSL/TLS version and cipher suites and confirm how safe it is.  For example, the feature to disable SSLv3 and choose cipher suite has been implemented. Disabling vulnerable SSL protocols or cipher suites affects some clients.   Logging help us to know which client is affected when vulnerable SSL protocols or cipher suites are disabled.
I know all SSL or encryption relevant codes are written in common/ssl_calls.c and libxrdp/xrdp_sec.c , however, in order to log client's IP address and TLS information together, there's only option for me to implement it in libxrdp/xrdp_rdp.c.
This is really a draft.  If there's better way to log it, please leave comment and help me.",+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,431,2016-10-05T00:54:51Z,2016-10-06T09:57:19Z,2016-10-12T01:02:42Z,MERGED,True,0,1,1,https://github.com/metalefty,X11rdp: remove python as it isn't really needed these days,1,[],https://github.com/neutrinolabs/xrdp/pull/431,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/431,Closes #399.,Closes #399.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,434,2016-10-08T02:10:16Z,2016-10-17T08:21:32Z,2016-10-17T17:07:17Z,MERGED,True,30,39,4,https://github.com/proski,Fixes for x11rdp build,8,[],https://github.com/neutrinolabs/xrdp/pull/434,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/434,"I'm trying to add DESTDIR support to buildx.sh, which would allow packaging it without sudo and other dirty magic. I'm not including that change, but I'm including smaller improvements that I made while working on a more ambitious goal.
buildx.sh had implicit dependencies on an existing X11 installation. By reordering the packages, those implicit dependencies are removed.","I'm trying to add DESTDIR support to buildx.sh, which would allow packaging it without sudo and other dirty magic. I'm not including that change, but I'm including smaller improvements that I made while working on a more ambitious goal.
buildx.sh had implicit dependencies on an existing X11 installation. By reordering the packages, those implicit dependencies are removed.",True,{'THUMBS_UP': ['https://github.com/metalefty']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,434,2016-10-08T02:10:16Z,2016-10-17T08:21:32Z,2016-10-17T17:07:17Z,MERGED,True,30,39,4,https://github.com/proski,Fixes for x11rdp build,8,[],https://github.com/neutrinolabs/xrdp/pull/434,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/434#issuecomment-253389736,"I'm trying to add DESTDIR support to buildx.sh, which would allow packaging it without sudo and other dirty magic. I'm not including that change, but I'm including smaller improvements that I made while working on a more ambitious goal.
buildx.sh had implicit dependencies on an existing X11 installation. By reordering the packages, those implicit dependencies are removed.",Looks good. No problem to build.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,435,2016-10-08T15:14:57Z,2016-10-12T07:58:19Z,2016-10-24T06:56:26Z,MERGED,True,2,2,2,https://github.com/metalefty, Update xorgxrdp and librfxcodec,2,[],https://github.com/neutrinolabs/xrdp/pull/435,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/435,Requested by Natureshadow in #433.,Requested by Natureshadow in #433.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,437,2016-10-10T15:36:57Z,2016-11-02T03:14:19Z,2016-11-02T05:53:48Z,MERGED,True,176,176,25,https://github.com/metalefty,Switch to 8 hex digit keymapfile,3,['keyboard'],https://github.com/neutrinolabs/xrdp/pull/437,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/437,"as the value keyboardLayout is actually 32-bit unsigned integer.
See [MS-RDPBCGR] - v20160714 p.45.","as the value keyboardLayout is actually 32-bit unsigned integer.
See [MS-RDPBCGR] - v20160714 p.45.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,437,2016-10-10T15:36:57Z,2016-11-02T03:14:19Z,2016-11-02T05:53:48Z,MERGED,True,176,176,25,https://github.com/metalefty,Switch to 8 hex digit keymapfile,3,['keyboard'],https://github.com/neutrinolabs/xrdp/pull/437,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/437#issuecomment-252660711,"as the value keyboardLayout is actually 32-bit unsigned integer.
See [MS-RDPBCGR] - v20160714 p.45.",I and proski suggested switching to 8 hex digit format for all km*.ini files.,True,{'THUMBS_UP': ['https://github.com/itamarjp']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,437,2016-10-10T15:36:57Z,2016-11-02T03:14:19Z,2016-11-02T05:53:48Z,MERGED,True,176,176,25,https://github.com/metalefty,Switch to 8 hex digit keymapfile,3,['keyboard'],https://github.com/neutrinolabs/xrdp/pull/437,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/437#issuecomment-255657391,"as the value keyboardLayout is actually 32-bit unsigned integer.
See [MS-RDPBCGR] - v20160714 p.45.",Chase #453.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,437,2016-10-10T15:36:57Z,2016-11-02T03:14:19Z,2016-11-02T05:53:48Z,MERGED,True,176,176,25,https://github.com/metalefty,Switch to 8 hex digit keymapfile,3,['keyboard'],https://github.com/neutrinolabs/xrdp/pull/437,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/437#issuecomment-256810162,"as the value keyboardLayout is actually 32-bit unsigned integer.
See [MS-RDPBCGR] - v20160714 p.45.",@jsorg71 @itamarjp what do you think of?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,437,2016-10-10T15:36:57Z,2016-11-02T03:14:19Z,2016-11-02T05:53:48Z,MERGED,True,176,176,25,https://github.com/metalefty,Switch to 8 hex digit keymapfile,3,['keyboard'],https://github.com/neutrinolabs/xrdp/pull/437,https://github.com/itamarjp,5,https://github.com/neutrinolabs/xrdp/pull/437#issuecomment-256943590,"as the value keyboardLayout is actually 32-bit unsigned integer.
See [MS-RDPBCGR] - v20160714 p.45.",for me looks good to keep in sync with https://goo.gl/4rQByJ,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,437,2016-10-10T15:36:57Z,2016-11-02T03:14:19Z,2016-11-02T05:53:48Z,MERGED,True,176,176,25,https://github.com/metalefty,Switch to 8 hex digit keymapfile,3,['keyboard'],https://github.com/neutrinolabs/xrdp/pull/437,https://github.com/proski,6,https://github.com/neutrinolabs/xrdp/pull/437#issuecomment-257077199,"as the value keyboardLayout is actually 32-bit unsigned integer.
See [MS-RDPBCGR] - v20160714 p.45.",Looks good to me.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,437,2016-10-10T15:36:57Z,2016-11-02T03:14:19Z,2016-11-02T05:53:48Z,MERGED,True,176,176,25,https://github.com/metalefty,Switch to 8 hex digit keymapfile,3,['keyboard'],https://github.com/neutrinolabs/xrdp/pull/437,https://github.com/metalefty,7,https://github.com/neutrinolabs/xrdp/pull/437#issuecomment-257191999,"as the value keyboardLayout is actually 32-bit unsigned integer.
See [MS-RDPBCGR] - v20160714 p.45.","Jay, could you merge this if you agree to switch?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,441,2016-10-14T13:19:48Z,2016-11-19T05:57:40Z,2016-11-19T05:57:40Z,CLOSED,False,152,11,5,https://github.com/ricardoteixeiraduarte,Add support for input event unicode,2,[],https://github.com/neutrinolabs/xrdp/pull/441,https://github.com/ricardoteixeiraduarte,1,https://github.com/neutrinolabs/xrdp/pull/441,Adds support for INPUT_EVENT_UNICODE,Adds support for INPUT_EVENT_UNICODE,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,441,2016-10-14T13:19:48Z,2016-11-19T05:57:40Z,2016-11-19T05:57:40Z,CLOSED,False,152,11,5,https://github.com/ricardoteixeiraduarte,Add support for input event unicode,2,[],https://github.com/neutrinolabs/xrdp/pull/441,https://github.com/ricardoteixeiraduarte,2,https://github.com/neutrinolabs/xrdp/pull/441#issuecomment-253803640,Adds support for INPUT_EVENT_UNICODE,"I'm not very happy with the way ""shift"" key is being handled by this code.
The current code sends a Shift KEY_DOWN (scancode 42) before sending the real key, and then a KBD_FLAG_UP after the key is processed.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,441,2016-10-14T13:19:48Z,2016-11-19T05:57:40Z,2016-11-19T05:57:40Z,CLOSED,False,152,11,5,https://github.com/ricardoteixeiraduarte,Add support for input event unicode,2,[],https://github.com/neutrinolabs/xrdp/pull/441,https://github.com/jsorg71,3,https://github.com/neutrinolabs/xrdp/pull/441#issuecomment-253894223,Adds support for INPUT_EVENT_UNICODE,"This might be a good start but this is only one keymap.
A better solution might be to use the keymap files.
xrdp/instfiles/km-0409.ini for example, Key10=49:49, the last value, 49, is the unicode, the first value, 10(from key10), is the keycode, the second value which does not matter here is the x11 keysym.
The [noshift] section, just send as they are, the [shift] section send a shift first, even [altgr] should work, just send altgr first.
xrdp/lang.c is were we have been processing these files.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,441,2016-10-14T13:19:48Z,2016-11-19T05:57:40Z,2016-11-19T05:57:40Z,CLOSED,False,152,11,5,https://github.com/ricardoteixeiraduarte,Add support for input event unicode,2,[],https://github.com/neutrinolabs/xrdp/pull/441,https://github.com/jsorg71,4,https://github.com/neutrinolabs/xrdp/pull/441#issuecomment-253966109,Adds support for INPUT_EVENT_UNICODE,"+    if (!s_check_rem(s, 1))
+    {
+        return 1;
+    }
+    in_uint8(s, code); /* keyCode (1 byte) */

This is wrong, the unicode value should be 2 bytes",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,441,2016-10-14T13:19:48Z,2016-11-19T05:57:40Z,2016-11-19T05:57:40Z,CLOSED,False,152,11,5,https://github.com/ricardoteixeiraduarte,Add support for input event unicode,2,[],https://github.com/neutrinolabs/xrdp/pull/441,https://github.com/jsorg71,5,https://github.com/neutrinolabs/xrdp/pull/441#issuecomment-253966192,Adds support for INPUT_EVENT_UNICODE,"The caps bits is missing from this patch
We need to set INPUT_FLAG_UNICODE.
Without it, the client should not send unicode input.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,441,2016-10-14T13:19:48Z,2016-11-19T05:57:40Z,2016-11-19T05:57:40Z,CLOSED,False,152,11,5,https://github.com/ricardoteixeiraduarte,Add support for input event unicode,2,[],https://github.com/neutrinolabs/xrdp/pull/441,https://github.com/jsorg71,6,https://github.com/neutrinolabs/xrdp/pull/441#issuecomment-253968963,Adds support for INPUT_EVENT_UNICODE,"@ricardoteixeiraduarte  can you check if 2c3d4a9 work for you.
I tested with MS client on Android.  I can't get Parallels client working.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,441,2016-10-14T13:19:48Z,2016-11-19T05:57:40Z,2016-11-19T05:57:40Z,CLOSED,False,152,11,5,https://github.com/ricardoteixeiraduarte,Add support for input event unicode,2,[],https://github.com/neutrinolabs/xrdp/pull/441,https://github.com/ricardoteixeiraduarte,7,https://github.com/neutrinolabs/xrdp/pull/441#issuecomment-254191469,Adds support for INPUT_EVENT_UNICODE,Working great.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,441,2016-10-14T13:19:48Z,2016-11-19T05:57:40Z,2016-11-19T05:57:40Z,CLOSED,False,152,11,5,https://github.com/ricardoteixeiraduarte,Add support for input event unicode,2,[],https://github.com/neutrinolabs/xrdp/pull/441,https://github.com/metalefty,8,https://github.com/neutrinolabs/xrdp/pull/441#issuecomment-255652987,Adds support for INPUT_EVENT_UNICODE,"@jsorg71 @ricardoteixeiraduarte  Implemented  in 2c3d4a9, so can this be closed? Or anything else neeed to be done?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,441,2016-10-14T13:19:48Z,2016-11-19T05:57:40Z,2016-11-19T05:57:40Z,CLOSED,False,152,11,5,https://github.com/ricardoteixeiraduarte,Add support for input event unicode,2,[],https://github.com/neutrinolabs/xrdp/pull/441,https://github.com/jsorg71,9,https://github.com/neutrinolabs/xrdp/pull/441#issuecomment-261695796,Adds support for INPUT_EVENT_UNICODE,This is done,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,443,2016-10-14T16:14:54Z,2017-01-10T20:26:14Z,2017-01-10T20:26:14Z,CLOSED,False,5,0,1,https://github.com/ricardoteixeiraduarte,Move mouse before click,1,[],https://github.com/neutrinolabs/xrdp/pull/443,https://github.com/ricardoteixeiraduarte,1,https://github.com/neutrinolabs/xrdp/pull/443,Fix for #442,Fix for #442,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,443,2016-10-14T16:14:54Z,2017-01-10T20:26:14Z,2017-01-10T20:26:14Z,CLOSED,False,5,0,1,https://github.com/ricardoteixeiraduarte,Move mouse before click,1,[],https://github.com/neutrinolabs/xrdp/pull/443,https://github.com/jsorg71,2,https://github.com/neutrinolabs/xrdp/pull/443#issuecomment-271687815,Fix for #442,merged as a959a9f,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,444,2016-10-17T16:26:39Z,2016-10-20T06:52:25Z,2016-10-20T17:51:11Z,MERGED,True,89,123,32,https://github.com/proski,"Simple changes, mostly log messages and documentation",9,[],https://github.com/neutrinolabs/xrdp/pull/444,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/444,,,True,{'THUMBS_UP': ['https://github.com/metalefty']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,445,2016-10-17T18:58:12Z,2016-10-21T18:55:55Z,2016-10-24T15:50:35Z,MERGED,True,68,124,7,https://github.com/proski,"Avoid using non-standard Automake variables starting with ""EXTRA""",3,[],https://github.com/neutrinolabs/xrdp/pull/445,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/445,"EXTRA_DIST is a documented Automake variable. Other variables stating with ""EXTRA"" are not. They are hard on the eye and their names are not descriptive (especially EXTRA_FLAGS). In some files, like xrdpvr/Makefile.am, those variables create clutter without providing any value.
Use AM_CPPFLAGS and AM_LDFLAGS directly for preprocessor and linker flags.
For extra libraries, use variables based on the executable or library that uses them, e.g. LIBXRDP_EXTRA_LIBS. (I could avoid even that, but I would have to reorder the variables more than I would like to)","EXTRA_DIST is a documented Automake variable. Other variables stating with ""EXTRA"" are not. They are hard on the eye and their names are not descriptive (especially EXTRA_FLAGS). In some files, like xrdpvr/Makefile.am, those variables create clutter without providing any value.
Use AM_CPPFLAGS and AM_LDFLAGS directly for preprocessor and linker flags.
For extra libraries, use variables based on the executable or library that uses them, e.g. LIBXRDP_EXTRA_LIBS. (I could avoid even that, but I would have to reorder the variables more than I would like to)",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,445,2016-10-17T18:58:12Z,2016-10-21T18:55:55Z,2016-10-24T15:50:35Z,MERGED,True,68,124,7,https://github.com/proski,"Avoid using non-standard Automake variables starting with ""EXTRA""",3,[],https://github.com/neutrinolabs/xrdp/pull/445,https://github.com/itamarjp,2,https://github.com/neutrinolabs/xrdp/pull/445#issuecomment-255352147,"EXTRA_DIST is a documented Automake variable. Other variables stating with ""EXTRA"" are not. They are hard on the eye and their names are not descriptive (especially EXTRA_FLAGS). In some files, like xrdpvr/Makefile.am, those variables create clutter without providing any value.
Use AM_CPPFLAGS and AM_LDFLAGS directly for preprocessor and linker flags.
For extra libraries, use variables based on the executable or library that uses them, e.g. LIBXRDP_EXTRA_LIBS. (I could avoid even that, but I would have to reorder the variables more than I would like to)",looks good for me,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,450,2016-10-21T05:56:41Z,2016-10-24T14:10:45Z,2016-10-24T15:50:37Z,MERGED,True,34,21,9,https://github.com/proski,Fixing memory leaks,4,[],https://github.com/neutrinolabs/xrdp/pull/450,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/450,"Valgrind has found 4 memory leaks in xrdp-sesman. No leaks have been found in the xrdp binary. No memory leak is major, but it's good to fix them to keep our coding standards high.","Valgrind has found 4 memory leaks in xrdp-sesman. No leaks have been found in the xrdp binary. No memory leak is major, but it's good to fix them to keep our coding standards high.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,450,2016-10-21T05:56:41Z,2016-10-24T14:10:45Z,2016-10-24T15:50:37Z,MERGED,True,34,21,9,https://github.com/proski,Fixing memory leaks,4,[],https://github.com/neutrinolabs/xrdp/pull/450,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/450#issuecomment-255659813,"Valgrind has found 4 memory leaks in xrdp-sesman. No leaks have been found in the xrdp binary. No memory leak is major, but it's good to fix them to keep our coding standards high.",Looks good.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,450,2016-10-21T05:56:41Z,2016-10-24T14:10:45Z,2016-10-24T15:50:37Z,MERGED,True,34,21,9,https://github.com/proski,Fixing memory leaks,4,[],https://github.com/neutrinolabs/xrdp/pull/450,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/450#issuecomment-255751285,"Valgrind has found 4 memory leaks in xrdp-sesman. No leaks have been found in the xrdp binary. No memory leak is major, but it's good to fix them to keep our coding standards high.",Let's merge.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,451,2016-10-21T08:17:22Z,2016-10-27T08:08:04Z,2016-11-02T05:53:50Z,MERGED,True,19,24,1,https://github.com/metalefty,buildx.sh: download tarballs using keepalive,2,[],https://github.com/neutrinolabs/xrdp/pull/451,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/451,"Executing wget like
wget http://example.com/file1 http://example.com/file2 ...
can do HTTP keepalive.
Quit calling wget with single file. Downloading multiple files in one
http connection is a little bit faster than executing wget more than
100 times. And parallelly execute two instances of wget to increase
download speed.","Executing wget like
wget http://example.com/file1 http://example.com/file2 ...
can do HTTP keepalive.
Quit calling wget with single file. Downloading multiple files in one
http connection is a little bit faster than executing wget more than
100 times. And parallelly execute two instances of wget to increase
download speed.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,452,2016-10-21T14:10:27Z,2017-02-21T07:28:39Z,2017-04-17T05:30:01Z,CLOSED,False,37,0,1,https://github.com/itamarjp,update readme file describing how to change  desktop environments,1,[],https://github.com/neutrinolabs/xrdp/pull/452,https://github.com/itamarjp,1,https://github.com/neutrinolabs/xrdp/pull/452,update readme file describing how to change  desktop environments,update readme file describing how to change  desktop environments,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,452,2016-10-21T14:10:27Z,2017-02-21T07:28:39Z,2017-04-17T05:30:01Z,CLOSED,False,37,0,1,https://github.com/itamarjp,update readme file describing how to change  desktop environments,1,[],https://github.com/neutrinolabs/xrdp/pull/452,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/452#issuecomment-281265632,update readme file describing how to change  desktop environments,Readme has been converted to markdown. This can't be merged.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,453,2016-10-21T18:37:39Z,2016-10-24T00:34:02Z,2016-10-24T00:34:02Z,MERGED,True,784,0,3,https://github.com/itamarjp,Add es_ES layout support #88,2,[],https://github.com/neutrinolabs/xrdp/pull/453,https://github.com/itamarjp,1,https://github.com/neutrinolabs/xrdp/pull/453,Add es_ES layout support #88,Add es_ES layout support #88,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,454,2016-10-25T06:49:41Z,2016-11-07T00:56:31Z,2017-05-19T07:34:35Z,MERGED,True,41,1,2,https://github.com/metalefty,chansrv: change chansrv log path to ${XDG_DATA_HOME}/xrdp,2,[],https://github.com/neutrinolabs/xrdp/pull/454,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/454,"like Xorg's logfile is written to ${XDG_DATA_HOME}/xorg/Xorg.n.log.
If XDG_DATA_HOME is not defined, the log path will be
${HOME}/.local/share/xrdp.","like Xorg's logfile is written to ${XDG_DATA_HOME}/xorg/Xorg.n.log.
If XDG_DATA_HOME is not defined, the log path will be
${HOME}/.local/share/xrdp.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,454,2016-10-25T06:49:41Z,2016-11-07T00:56:31Z,2017-05-19T07:34:35Z,MERGED,True,41,1,2,https://github.com/metalefty,chansrv: change chansrv log path to ${XDG_DATA_HOME}/xrdp,2,[],https://github.com/neutrinolabs/xrdp/pull/454,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/454#issuecomment-255952595,"like Xorg's logfile is written to ${XDG_DATA_HOME}/xorg/Xorg.n.log.
If XDG_DATA_HOME is not defined, the log path will be
${HOME}/.local/share/xrdp.",I like Xorg's log path in user directory so I imitated it. What do you think of?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,454,2016-10-25T06:49:41Z,2016-11-07T00:56:31Z,2017-05-19T07:34:35Z,MERGED,True,41,1,2,https://github.com/metalefty,chansrv: change chansrv log path to ${XDG_DATA_HOME}/xrdp,2,[],https://github.com/neutrinolabs/xrdp/pull/454,https://github.com/Natureshadow,3,https://github.com/neutrinolabs/xrdp/pull/454#issuecomment-256142431,"like Xorg's logfile is written to ${XDG_DATA_HOME}/xorg/Xorg.n.log.
If XDG_DATA_HOME is not defined, the log path will be
${HOME}/.local/share/xrdp.","If XDG_DATA_HOME is not defined, the log path will be
${HOME}/.local/share/xrdp.

And if that doesn't exist?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,454,2016-10-25T06:49:41Z,2016-11-07T00:56:31Z,2017-05-19T07:34:35Z,MERGED,True,41,1,2,https://github.com/metalefty,chansrv: change chansrv log path to ${XDG_DATA_HOME}/xrdp,2,[],https://github.com/neutrinolabs/xrdp/pull/454,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/454#issuecomment-256215555,"like Xorg's logfile is written to ${XDG_DATA_HOME}/xorg/Xorg.n.log.
If XDG_DATA_HOME is not defined, the log path will be
${HOME}/.local/share/xrdp.","${XDG_DATA_HOME}/xrdp/ or ${HOME}/.local/share/xrdp will be created if the directory doesn't exists.
If HOME environment variable is not defined, print error and exit (chansrv.c:1518).",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,454,2016-10-25T06:49:41Z,2016-11-07T00:56:31Z,2017-05-19T07:34:35Z,MERGED,True,41,1,2,https://github.com/metalefty,chansrv: change chansrv log path to ${XDG_DATA_HOME}/xrdp,2,[],https://github.com/neutrinolabs/xrdp/pull/454,https://github.com/metalefty,5,https://github.com/neutrinolabs/xrdp/pull/454#issuecomment-256572572,"like Xorg's logfile is written to ${XDG_DATA_HOME}/xorg/Xorg.n.log.
If XDG_DATA_HOME is not defined, the log path will be
${HOME}/.local/share/xrdp.","If no objections, I'll merge this after a week.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,456,2016-10-26T13:51:07Z,,2016-11-23T07:23:41Z,OPEN,False,537,0,7,https://github.com/risi70,"new ""loginfirst"" feature for two step login w/ googleauth",2,[],https://github.com/neutrinolabs/xrdp/pull/456,https://github.com/risi70,1,https://github.com/neutrinolabs/xrdp/pull/456,"first login, with password and TOTP (googleauth based) and then choose your session. Sessions are presented to user accordingly to the unix groups. Session name ( in [ ]) corresponds to group name.","first login, with password and TOTP (googleauth based) and then choose your session. Sessions are presented to user accordingly to the unix groups. Session name ( in [ ]) corresponds to group name.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,456,2016-10-26T13:51:07Z,,2016-11-23T07:23:41Z,OPEN,False,537,0,7,https://github.com/risi70,"new ""loginfirst"" feature for two step login w/ googleauth",2,[],https://github.com/neutrinolabs/xrdp/pull/456,https://github.com/proski,2,https://github.com/neutrinolabs/xrdp/pull/456#issuecomment-258934226,"first login, with password and TOTP (googleauth based) and then choose your session. Sessions are presented to user accordingly to the unix groups. Session name ( in [ ]) corresponds to group name.",It would be better to move new large chunks of code to separate files. Please follow the coding style described in coding_style.md,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,456,2016-10-26T13:51:07Z,,2016-11-23T07:23:41Z,OPEN,False,537,0,7,https://github.com/risi70,"new ""loginfirst"" feature for two step login w/ googleauth",2,[],https://github.com/neutrinolabs/xrdp/pull/456,https://github.com/risi70,3,https://github.com/neutrinolabs/xrdp/pull/456#issuecomment-259200379,"first login, with password and TOTP (googleauth based) and then choose your session. Sessions are presented to user accordingly to the unix groups. Session name ( in [ ]) corresponds to group name.","Pavel, thanks for your comment. The new feature I introduce permits to separate the login process in two steps: first authenticate to the machine and then (based on group ownership) choose the session to start. It represents an alternative behaviour of xrdp where the user authenticates and chooses the session at once.
The behaviour is chosen by compile time switches (and autoconf parameters), thus I do not see how I could separate those element in different files - but perhaps there is something I did not get right?
I will verify that the coding style is otherwise applied - no problem.
The standard behaviour btw exposes sessions to which some user might not have access to. So I guess this feature is something, which could be useful for others using xrdp as rdp-security gateway.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,456,2016-10-26T13:51:07Z,,2016-11-23T07:23:41Z,OPEN,False,537,0,7,https://github.com/risi70,"new ""loginfirst"" feature for two step login w/ googleauth",2,[],https://github.com/neutrinolabs/xrdp/pull/456,https://github.com/proski,4,https://github.com/neutrinolabs/xrdp/pull/456#issuecomment-259765884,"first login, with password and TOTP (googleauth based) and then choose your session. Sessions are presented to user accordingly to the unix groups. Session name ( in [ ]) corresponds to group name.","Having a session chooser would be a great addition to xrdp. Users may not realize that they have a running session or several of them. They may not know why they cannot reconnect to them.
There are several ways to separate new functionality to new files.

The new functionality is put to new files. Those files are always compiled. If the functionality is disabled, most of the code in the new files is not compiled. Instead, dummy functions are used.
The header provides the interface and the dummy functions is the functionality is disabled. If the functionality is enabled, the additional files are compiled based on an Automake conditional.
The functionality is so useful that it is always enabled. The new files are compiled unconditionally.

If the feature is under development, I suggest that you concentrate of the last approach and make the functionality optional as the last step.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,456,2016-10-26T13:51:07Z,,2016-11-23T07:23:41Z,OPEN,False,537,0,7,https://github.com/risi70,"new ""loginfirst"" feature for two step login w/ googleauth",2,[],https://github.com/neutrinolabs/xrdp/pull/456,https://github.com/speidy,5,https://github.com/neutrinolabs/xrdp/pull/456#issuecomment-262259564,"first login, with password and TOTP (googleauth based) and then choose your session. Sessions are presented to user accordingly to the unix groups. Session name ( in [ ]) corresponds to group name.","TOTP is a general mechanism for temporary time based code generation.
Google is just implemented it for their usages.
בתאריך יום ג׳, 22 בנוב׳ 2016 ב-16:44 מאת risi70 notifications@github.com:

@risi70 commented on this pull request.
In xrdp/xrdp_login_wnd.c #456:


b->top = 70;
b->id = 201;
set_string(&b->caption1, ""password"");





/* Label password */
b = xrdp_bitmap_create(95, DEFAULT_EDIT_H, self->screen->bpp,

                      WND_TYPE_LABEL, self);





list_insert_item(self->firstlogin_window->child_list, insert_index,(long)b);
insert_index++;
b->parent = self->firstlogin_window;
b->owner = self->firstlogin_window;
b->left = 10;
b->top = 100;
b->id = 202;
set_string(&b->caption1, ""google auth"");


Because a Google authentication token is used (2-factor authentication /
TOTP).
—
You are receiving this because you are subscribed to this thread.
Reply to this email directly, view it on GitHub
#456, or mute the thread
https://github.com/notifications/unsubscribe-auth/ADTH1AnOTOCpigMCvssBl6Eu6gqCwwu1ks5rAv-dgaJpZM4KhMcz
.

Idan Freiberg

PGP FP: 8108 7EC9 806E 4980 75F2  72B3 8AD3 2D04 337B 1F18",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,456,2016-10-26T13:51:07Z,,2016-11-23T07:23:41Z,OPEN,False,537,0,7,https://github.com/risi70,"new ""loginfirst"" feature for two step login w/ googleauth",2,[],https://github.com/neutrinolabs/xrdp/pull/456,https://github.com/proski,6,https://github.com/neutrinolabs/xrdp/pull/456#issuecomment-262401464,"first login, with password and TOTP (googleauth based) and then choose your session. Sessions are presented to user accordingly to the unix groups. Session name ( in [ ]) corresponds to group name.","Can we use a vendor neutral name for the feature? Does Google need to be involved? Would the login work if Google is unreacheable?
I would prefer if we don't combine two features into the same patch. One feature is the session selector. Another feature is TOTP.
Also, it would be better to have the new features available as configuration options. It should be possible to use the current login or the new login window. Alternatively, the new feature should be so compelling that the old login could be removed without loss of functionality. But I don't think everybody would be happy to interact with two windows instead of one.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,456,2016-10-26T13:51:07Z,,2016-11-23T07:23:41Z,OPEN,False,537,0,7,https://github.com/risi70,"new ""loginfirst"" feature for two step login w/ googleauth",2,[],https://github.com/neutrinolabs/xrdp/pull/456,https://github.com/risi70,7,https://github.com/neutrinolabs/xrdp/pull/456#issuecomment-262448037,"first login, with password and TOTP (googleauth based) and then choose your session. Sessions are presented to user accordingly to the unix groups. Session name ( in [ ]) corresponds to group name.","To do it vendor neutral will not be possible. Google Auth is an open-source project done by google - I'm not going to re-implement it from scratch incl. the mobile app. Good news is, all the sources are there and the PAM integration works flawless.
I'll try to do a xrdp.ini config option for google auth. It's going to take a moment, but it is no big problem.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,457,2016-10-27T06:11:28Z,2017-11-09T07:41:43Z,2017-11-09T07:41:43Z,CLOSED,False,10,1,1,https://github.com/metalefty,Fix timeout when using Xvnc,1,[],https://github.com/neutrinolabs/xrdp/pull/457,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/457,Rework of #263.,Rework of #263.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,457,2016-10-27T06:11:28Z,2017-11-09T07:41:43Z,2017-11-09T07:41:43Z,CLOSED,False,10,1,1,https://github.com/metalefty,Fix timeout when using Xvnc,1,[],https://github.com/neutrinolabs/xrdp/pull/457,https://github.com/proski,2,https://github.com/neutrinolabs/xrdp/pull/457#issuecomment-258932868,Rework of #263.,"Could you please provide some context? If using a loop, cannot we use shorter timeouts to minimize unneeded delays? Why do we need g_sleep(1000)? Why not start another connect attempt right away?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,457,2016-10-27T06:11:28Z,2017-11-09T07:41:43Z,2017-11-09T07:41:43Z,CLOSED,False,10,1,1,https://github.com/metalefty,Fix timeout when using Xvnc,1,[],https://github.com/neutrinolabs/xrdp/pull/457,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/457#issuecomment-259003876,Rework of #263.,"Xvnc ignited by xrdp-sesman is not immediately ready to accept connections.  The purpose of #263 and this is to wait and retry until Xvnc become to be ready.
As #263 includes other changes, I just separated them.  We need not to use sleep 1 sec.  We can use shorter delay as you say.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,457,2016-10-27T06:11:28Z,2017-11-09T07:41:43Z,2017-11-09T07:41:43Z,CLOSED,False,10,1,1,https://github.com/metalefty,Fix timeout when using Xvnc,1,[],https://github.com/neutrinolabs/xrdp/pull/457,https://github.com/proski,4,https://github.com/neutrinolabs/xrdp/pull/457#issuecomment-259006682,Rework of #263.,"I looked at the implementation of trans_connect, and I see that it already has a loop. But it waits in 1/5th intervals of the timeout, so increasing the timeout would increase wasted time. I see that all trans_connect calls use 3000 (milliseconds). Maybe we could change the inner polling interval to 500 milliseconds (just a bit less than the current 3000/5=600) and increase the timeout for this call, say, to 15 seconds?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,459,2016-10-27T19:46:02Z,2016-11-01T07:09:48Z,2016-11-01T07:09:48Z,MERGED,True,41,27,1,https://github.com/Natureshadow,Fix ssl_calls for OpenSSL 1.1.0,2,"['compiling', 'TLS']",https://github.com/neutrinolabs/xrdp/pull/459,https://github.com/Natureshadow,1,https://github.com/neutrinolabs/xrdp/pull/459,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,459,2016-10-27T19:46:02Z,2016-11-01T07:09:48Z,2016-11-01T07:09:48Z,MERGED,True,41,27,1,https://github.com/Natureshadow,Fix ssl_calls for OpenSSL 1.1.0,2,"['compiling', 'TLS']",https://github.com/neutrinolabs/xrdp/pull/459,https://github.com/itamarjp,2,https://github.com/neutrinolabs/xrdp/pull/459#issuecomment-256789560,,some people reported that this fixed the bug #424,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,459,2016-10-27T19:46:02Z,2016-11-01T07:09:48Z,2016-11-01T07:09:48Z,MERGED,True,41,27,1,https://github.com/Natureshadow,Fix ssl_calls for OpenSSL 1.1.0,2,"['compiling', 'TLS']",https://github.com/neutrinolabs/xrdp/pull/459,https://github.com/itamarjp,3,https://github.com/neutrinolabs/xrdp/pull/459#issuecomment-256808774,,looks good for me.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,459,2016-10-27T19:46:02Z,2016-11-01T07:09:48Z,2016-11-01T07:09:48Z,MERGED,True,41,27,1,https://github.com/Natureshadow,Fix ssl_calls for OpenSSL 1.1.0,2,"['compiling', 'TLS']",https://github.com/neutrinolabs/xrdp/pull/459,https://github.com/proski,4,https://github.com/neutrinolabs/xrdp/pull/459#issuecomment-256812721,,"I like that you code for the new API and then backport. The new API is always a better target.
But I would prefer if you used inline functions for the backport instead of adding ifdefs throughout the code.  So you can create a function HMAC_CTX_new for older OpenSSL and put the backport code there. The backport functions could go to a separate header.
I worked on a project that needed to support multiple versions of dependencies, and this approach proved to be most maintainable in the long run.",True,{'THUMBS_UP': ['https://github.com/itamarjp']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,459,2016-10-27T19:46:02Z,2016-11-01T07:09:48Z,2016-11-01T07:09:48Z,MERGED,True,41,27,1,https://github.com/Natureshadow,Fix ssl_calls for OpenSSL 1.1.0,2,"['compiling', 'TLS']",https://github.com/neutrinolabs/xrdp/pull/459,https://github.com/Natureshadow,5,https://github.com/neutrinolabs/xrdp/pull/459#issuecomment-256864741,,"But I would prefer if you used inline functions for the backport
instead of adding ifdefs throughout the code.  So you can create a
function HMAC_CTX_new for older OpenSSL and put the backport code
there.

I tried that, but it turned out that the real implementations needed more and more inline functions (like EVP_MD_CTX_*) and it turned out that this approach is better in that case.
I expect to drop support for OpenSSL < 1.1.0 some time soon anyway.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,459,2016-10-27T19:46:02Z,2016-11-01T07:09:48Z,2016-11-01T07:09:48Z,MERGED,True,41,27,1,https://github.com/Natureshadow,Fix ssl_calls for OpenSSL 1.1.0,2,"['compiling', 'TLS']",https://github.com/neutrinolabs/xrdp/pull/459,https://github.com/Natureshadow,6,https://github.com/neutrinolabs/xrdp/pull/459#issuecomment-256868963,,"Also mind that this way, users of old OpenSSL get the same code as before.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,459,2016-10-27T19:46:02Z,2016-11-01T07:09:48Z,2016-11-01T07:09:48Z,MERGED,True,41,27,1,https://github.com/Natureshadow,Fix ssl_calls for OpenSSL 1.1.0,2,"['compiling', 'TLS']",https://github.com/neutrinolabs/xrdp/pull/459,https://github.com/proski,7,https://github.com/neutrinolabs/xrdp/pull/459#issuecomment-257136321,,"I've made a change to show what I mean. I actually tested that with OpenSSL 1.0.2j and 1.1.0b. Please see commit 8df61b9
Functions are stricter than macros in argument checking, and even macros are better than the conditional code spread all around the place. The functions can only use their arguments, not arbitrary variables from the caller. The arguments have types and descriptive names.
The main code uses the same logic regardless of the OpenSSL version, which makes development safer. When the backport code is all over the place, it's easy to copy some code and break support for a specific version of the dependency.
I don't know what was the ""real"" implementation you attempted. The backport functions should have the old code, but with the new API.
I actually expect OpenSSL 1.0 to stick around for a while. Sure, it would be patched for vulnerabilities, but its API would not change.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,459,2016-10-27T19:46:02Z,2016-11-01T07:09:48Z,2016-11-01T07:09:48Z,MERGED,True,41,27,1,https://github.com/Natureshadow,Fix ssl_calls for OpenSSL 1.1.0,2,"['compiling', 'TLS']",https://github.com/neutrinolabs/xrdp/pull/459,https://github.com/proski,8,https://github.com/neutrinolabs/xrdp/pull/459#issuecomment-257136897,,"Actually, let's apply this PR, and I'll send my patch on top of it.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,460,2016-10-28T06:29:28Z,2016-11-20T18:00:26Z,2016-12-08T01:41:19Z,MERGED,True,104,29,1,https://github.com/metalefty,common: Fix client IP address logging when IPv6 is enabled,2,['IPv6'],https://github.com/neutrinolabs/xrdp/pull/460,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/460,"g_tcp_accept() and g_sck_accept() should use sockadd_in6 when IPv6 is
enabled. The former code logs client IP address always ""0.0.0.0"" in such
case.
Fixes #412.","g_tcp_accept() and g_sck_accept() should use sockadd_in6 when IPv6 is
enabled. The former code logs client IP address always ""0.0.0.0"" in such
case.
Fixes #412.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,460,2016-10-28T06:29:28Z,2016-11-20T18:00:26Z,2016-12-08T01:41:19Z,MERGED,True,104,29,1,https://github.com/metalefty,common: Fix client IP address logging when IPv6 is enabled,2,['IPv6'],https://github.com/neutrinolabs/xrdp/pull/460,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/460#issuecomment-256848308,"g_tcp_accept() and g_sck_accept() should use sockadd_in6 when IPv6 is
enabled. The former code logs client IP address always ""0.0.0.0"" in such
case.
Fixes #412.","Now client IP address is properly logged.  I'd appreciated if you review the changeset.
without --enable-ipv6
[20161028-15:34:35] [INFO ] A connection received from: 192.168.22.25 port 25667
[20161028-15:34:35] [DEBUG] Closed socket 12 (AF_INET 192.168.22.203:3389)
[20161028-15:34:35] [DEBUG] Closed socket 11 (AF_INET 0.0.0.0:3389)
[20161028-15:34:35] [INFO ] Using default X.509 certificate: /etc/xrdp/cert.pem

with --enable-ipv6 (v6 client)
[20161028-15:37:43] [INFO ] A connection received from: xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx port 30010
[20161028-15:37:43] [DEBUG] Closed socket 12 (AF_INET6 yyyy:yyyy:yyyy:yyyy:yyyy:yyyy:yyyy:yyyy:3389)
[20161028-15:37:43] [DEBUG] Closed socket 11 (AF_INET6 :::3389)
[20161028-15:37:43] [INFO ] Using default X.509 certificate: /etc/xrdp/cert.pem

with --enable-ipv6 (v4 client)
[20161028-15:39:58] [INFO ] A connection received from: ::ffff:192.168.22.25 port 50343
[20161028-15:39:58] [DEBUG] Closed socket 12 (AF_INET6 ::ffff:192.168.22.206:3389)
[20161028-15:39:58] [DEBUG] Closed socket 11 (AF_INET6 :::3389)
[20161028-15:39:58] [INFO ] Using default X.509 certificate: /etc/xrdp/cert.pem",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,460,2016-10-28T06:29:28Z,2016-11-20T18:00:26Z,2016-12-08T01:41:19Z,MERGED,True,104,29,1,https://github.com/metalefty,common: Fix client IP address logging when IPv6 is enabled,2,['IPv6'],https://github.com/neutrinolabs/xrdp/pull/460,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/460#issuecomment-258370960,"g_tcp_accept() and g_sck_accept() should use sockadd_in6 when IPv6 is
enabled. The former code logs client IP address always ""0.0.0.0"" in such
case.
Fixes #412.",Just fixed indent and force pushed.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,461,2016-10-28T14:07:36Z,2016-11-24T08:01:18Z,2016-12-08T01:40:58Z,MERGED,True,16,0,1,https://github.com/metalefty,"common: If IPv6 not supported, fall back to IPv4",1,['IPv6'],https://github.com/neutrinolabs/xrdp/pull/461,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/461,"The system to run xrdp does not necessarily support IPv6 even though
it is compiled with IPv6.
Fixes #432.
Issue #460 needs to be merged before merging this.","The system to run xrdp does not necessarily support IPv6 even though
it is compiled with IPv6.
Fixes #432.
Issue #460 needs to be merged before merging this.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,461,2016-10-28T14:07:36Z,2016-11-24T08:01:18Z,2016-12-08T01:40:58Z,MERGED,True,16,0,1,https://github.com/metalefty,"common: If IPv6 not supported, fall back to IPv4",1,['IPv6'],https://github.com/neutrinolabs/xrdp/pull/461,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/461#issuecomment-258371534,"The system to run xrdp does not necessarily support IPv6 even though
it is compiled with IPv6.
Fixes #432.
Issue #460 needs to be merged before merging this.",Just fixed indent and force pushed.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,461,2016-10-28T14:07:36Z,2016-11-24T08:01:18Z,2016-12-08T01:40:58Z,MERGED,True,16,0,1,https://github.com/metalefty,"common: If IPv6 not supported, fall back to IPv4",1,['IPv6'],https://github.com/neutrinolabs/xrdp/pull/461,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/461#issuecomment-262169491,"The system to run xrdp does not necessarily support IPv6 even though
it is compiled with IPv6.
Fixes #432.
Issue #460 needs to be merged before merging this.","Formatting changes, rebased to current devel, force pushed.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,461,2016-10-28T14:07:36Z,2016-11-24T08:01:18Z,2016-12-08T01:40:58Z,MERGED,True,16,0,1,https://github.com/metalefty,"common: If IPv6 not supported, fall back to IPv4",1,['IPv6'],https://github.com/neutrinolabs/xrdp/pull/461,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/461#issuecomment-262176513,"The system to run xrdp does not necessarily support IPv6 even though
it is compiled with IPv6.
Fixes #432.
Issue #460 needs to be merged before merging this.","Generally, release versions will be used different environment from it is built.
The issue occurs when IPv6 enabled pre-built xrdp runs on IPv4 only environment.
This should be included to next release.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,462,2016-10-28T14:36:54Z,2016-11-07T01:46:38Z,2016-11-07T01:46:38Z,CLOSED,False,21,0,2,https://github.com/Natureshadow,Place chansrv log in XDG_CACHE_HOME if it exists.,1,['duplicate'],https://github.com/neutrinolabs/xrdp/pull/462,https://github.com/Natureshadow,1,https://github.com/neutrinolabs/xrdp/pull/462,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,462,2016-10-28T14:36:54Z,2016-11-07T01:46:38Z,2016-11-07T01:46:38Z,CLOSED,False,21,0,2,https://github.com/Natureshadow,Place chansrv log in XDG_CACHE_HOME if it exists.,1,['duplicate'],https://github.com/neutrinolabs/xrdp/pull/462,https://github.com/Natureshadow,2,https://github.com/neutrinolabs/xrdp/pull/462#issuecomment-256948360,,"Oops. Forogt that this is a duplicate of #454 (besides this one uses XDG_CACHE_HOME instead, which, in my opinion, is a better choice).",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,462,2016-10-28T14:36:54Z,2016-11-07T01:46:38Z,2016-11-07T01:46:38Z,CLOSED,False,21,0,2,https://github.com/Natureshadow,Place chansrv log in XDG_CACHE_HOME if it exists.,1,['duplicate'],https://github.com/neutrinolabs/xrdp/pull/462,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/462#issuecomment-257072608,,Need to determine which one to merge.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,462,2016-10-28T14:36:54Z,2016-11-07T01:46:38Z,2016-11-07T01:46:38Z,CLOSED,False,21,0,2,https://github.com/Natureshadow,Place chansrv log in XDG_CACHE_HOME if it exists.,1,['duplicate'],https://github.com/neutrinolabs/xrdp/pull/462,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/462#issuecomment-258729861,,Merged as #454.  XDG_CACHE_HOME also makes sense but I decided to use ${XDG_DATA_HOME}/xrdp at this time since Xorg uses the similar directory.  I'd welcome further discussion if you strongly recommend XDG_CACHE_HOME. Then please reopen or create a new issue.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,463,2016-10-28T14:45:39Z,2016-10-29T05:43:11Z,2016-10-29T05:43:11Z,MERGED,True,6,6,1,https://github.com/Natureshadow,Move -logfile /dev/null option for easier commenting in debug scenarios.,1,[],https://github.com/neutrinolabs/xrdp/pull/463,https://github.com/Natureshadow,1,https://github.com/neutrinolabs/xrdp/pull/463,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,463,2016-10-28T14:45:39Z,2016-10-29T05:43:11Z,2016-10-29T05:43:11Z,MERGED,True,6,6,1,https://github.com/Natureshadow,Move -logfile /dev/null option for easier commenting in debug scenarios.,1,[],https://github.com/neutrinolabs/xrdp/pull/463,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/463#issuecomment-256969998,,+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,463,2016-10-28T14:45:39Z,2016-10-29T05:43:11Z,2016-10-29T05:43:11Z,MERGED,True,6,6,1,https://github.com/Natureshadow,Move -logfile /dev/null option for easier commenting in debug scenarios.,1,[],https://github.com/neutrinolabs/xrdp/pull/463,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/463#issuecomment-257072857,,This doesn't affect anything. Let's merge.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,464,2016-10-28T14:56:14Z,2017-02-09T00:09:03Z,2017-02-09T00:09:03Z,CLOSED,False,2,2,2,https://github.com/Natureshadow,Fix permission issues between xrdp and sesman.,1,['invalid'],https://github.com/neutrinolabs/xrdp/pull/464,https://github.com/Natureshadow,1,https://github.com/neutrinolabs/xrdp/pull/464,"Attempt to fix connection problem between xrdp-sesman (running as root) and
xrdp (running as xrdp) by creating the socket for the xorgxrdp server as
0660 in a sgid-xrdp directory, since we can’t easily chgrp here; also fix
retval check for listen(2)
This is accompanied by a patch to xorgxrdp (did I mention the two should be
merged as subtrees?).","Attempt to fix connection problem between xrdp-sesman (running as root) and
xrdp (running as xrdp) by creating the socket for the xorgxrdp server as
0660 in a sgid-xrdp directory, since we can’t easily chgrp here; also fix
retval check for listen(2)
This is accompanied by a patch to xorgxrdp (did I mention the two should be
merged as subtrees?).",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,464,2016-10-28T14:56:14Z,2017-02-09T00:09:03Z,2017-02-09T00:09:03Z,CLOSED,False,2,2,2,https://github.com/Natureshadow,Fix permission issues between xrdp and sesman.,1,['invalid'],https://github.com/neutrinolabs/xrdp/pull/464,https://github.com/proski,2,https://github.com/neutrinolabs/xrdp/pull/464#issuecomment-258931190,"Attempt to fix connection problem between xrdp-sesman (running as root) and
xrdp (running as xrdp) by creating the socket for the xorgxrdp server as
0660 in a sgid-xrdp directory, since we can’t easily chgrp here; also fix
retval check for listen(2)
This is accompanied by a patch to xorgxrdp (did I mention the two should be
merged as subtrees?).","Such changes are better left in the distro patches. Different users use xrdp differently. I don't think any sgid or suid bits should be necessary to make two processes communicate. Changing the /tmp/.xrdp is too radical, there are several sockets in that directory. It would be better to change permissions of specific sockets. Whichever process is root should be changing permissions for the other process to have access. If UNIX sockets don't work, TCP sockets should be used.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,464,2016-10-28T14:56:14Z,2017-02-09T00:09:03Z,2017-02-09T00:09:03Z,CLOSED,False,2,2,2,https://github.com/Natureshadow,Fix permission issues between xrdp and sesman.,1,['invalid'],https://github.com/neutrinolabs/xrdp/pull/464,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/464#issuecomment-273675893,"Attempt to fix connection problem between xrdp-sesman (running as root) and
xrdp (running as xrdp) by creating the socket for the xorgxrdp server as
0660 in a sgid-xrdp directory, since we can’t easily chgrp here; also fix
retval check for listen(2)
This is accompanied by a patch to xorgxrdp (did I mention the two should be
merged as subtrees?).",This should be left in distro patches.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,465,2016-10-28T15:01:44Z,2016-11-14T05:36:45Z,2016-11-14T05:36:45Z,CLOSED,False,4,4,2,https://github.com/Natureshadow,make FUSE mount root hidden from normal ls,1,['wontfix'],https://github.com/neutrinolabs/xrdp/pull/465,https://github.com/Natureshadow,1,https://github.com/neutrinolabs/xrdp/pull/465,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,465,2016-10-28T15:01:44Z,2016-11-14T05:36:45Z,2016-11-14T05:36:45Z,CLOSED,False,4,4,2,https://github.com/Natureshadow,make FUSE mount root hidden from normal ls,1,['wontfix'],https://github.com/neutrinolabs/xrdp/pull/465,https://github.com/moobyfr,2,https://github.com/neutrinolabs/xrdp/pull/465#issuecomment-257103591,,"This merge has to be reviewed: there is a config variable in sesman.ini for the mountpoint named 'FuseMountName'. The code at line 400 from chansrv_fuse.c uses it. So for the spirit of this patch, the dot should be added in sesman.ini
For the idea itself, I don't understand the need to hide the mountpoint for the user, if he needs to access the share, don't hide it IMHO.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,465,2016-10-28T15:01:44Z,2016-11-14T05:36:45Z,2016-11-14T05:36:45Z,CLOSED,False,4,4,2,https://github.com/Natureshadow,make FUSE mount root hidden from normal ls,1,['wontfix'],https://github.com/neutrinolabs/xrdp/pull/465,https://github.com/Natureshadow,3,https://github.com/neutrinolabs/xrdp/pull/465#issuecomment-257103984,,"You are right. I believe this is the remainder of an old patch that was refreshed to a new code base and is now unnecessary.

I will check that.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,465,2016-10-28T15:01:44Z,2016-11-14T05:36:45Z,2016-11-14T05:36:45Z,CLOSED,False,4,4,2,https://github.com/Natureshadow,make FUSE mount root hidden from normal ls,1,['wontfix'],https://github.com/neutrinolabs/xrdp/pull/465,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/465#issuecomment-257197958,,"I also think the mountpoint shouldn't be hidden.  Of course you can if you want but I don't think it should be upstreamed.  IMO, patch the config locally in distro package if you want to do that.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,465,2016-10-28T15:01:44Z,2016-11-14T05:36:45Z,2016-11-14T05:36:45Z,CLOSED,False,4,4,2,https://github.com/Natureshadow,make FUSE mount root hidden from normal ls,1,['wontfix'],https://github.com/neutrinolabs/xrdp/pull/465,https://github.com/metalefty,5,https://github.com/neutrinolabs/xrdp/pull/465#issuecomment-260252434,,Mount point shouln't be hidden.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,466,2016-10-28T15:04:13Z,2016-11-15T09:21:14Z,2016-11-15T09:21:14Z,CLOSED,False,11,1,1,https://github.com/Natureshadow,Try a local default keymap before falling back to en-us keymap if the…,2,"['keyboard', 'invalid']",https://github.com/neutrinolabs/xrdp/pull/466,https://github.com/Natureshadow,1,https://github.com/neutrinolabs/xrdp/pull/466,… selected keymap is not found.,… selected keymap is not found.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,466,2016-10-28T15:04:13Z,2016-11-15T09:21:14Z,2016-11-15T09:21:14Z,CLOSED,False,11,1,1,https://github.com/Natureshadow,Try a local default keymap before falling back to en-us keymap if the…,2,"['keyboard', 'invalid']",https://github.com/neutrinolabs/xrdp/pull/466,https://github.com/proski,2,https://github.com/neutrinolabs/xrdp/pull/466#issuecomment-259329256,… selected keymap is not found.,"I believe this patch can be discarded now. It introduces an undocumented feature. It deals with keyboard settings, which should be user specific, yet it requires root permissions to be utilized.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,467,2016-10-28T15:11:22Z,2016-11-22T08:16:03Z,2016-11-30T00:05:13Z,CLOSED,False,115,68,11,https://github.com/Natureshadow,Miscelleanous fixes.,1,['invalid'],https://github.com/neutrinolabs/xrdp/pull/467,https://github.com/Natureshadow,1,https://github.com/neutrinolabs/xrdp/pull/467,"Build system fixes
Code quality fixes (fixes compile time warnings and undefined behaviour)
Accompanied by a patch to xorgxrdp (did I mention the two should probably be
subtree-merged ;)?).","Build system fixes
Code quality fixes (fixes compile time warnings and undefined behaviour)
Accompanied by a patch to xorgxrdp (did I mention the two should probably be
subtree-merged ;)?).",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,467,2016-10-28T15:11:22Z,2016-11-22T08:16:03Z,2016-11-30T00:05:13Z,CLOSED,False,115,68,11,https://github.com/Natureshadow,Miscelleanous fixes.,1,['invalid'],https://github.com/neutrinolabs/xrdp/pull/467,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/467#issuecomment-260589776,"Build system fixes
Code quality fixes (fixes compile time warnings and undefined behaviour)
Accompanied by a patch to xorgxrdp (did I mention the two should probably be
subtree-merged ;)?).",Some cleanups in this PR are useful but needs to be more separated.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,467,2016-10-28T15:11:22Z,2016-11-22T08:16:03Z,2016-11-30T00:05:13Z,CLOSED,False,115,68,11,https://github.com/Natureshadow,Miscelleanous fixes.,1,['invalid'],https://github.com/neutrinolabs/xrdp/pull/467,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/467#issuecomment-262175023,"Build system fixes
Code quality fixes (fixes compile time warnings and undefined behaviour)
Accompanied by a patch to xorgxrdp (did I mention the two should probably be
subtree-merged ;)?).","The purpose of downstream patches should be disclosed.
Please do not just throw them to upstream. They need to be separated by purpose.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,470,2016-10-31T00:46:35Z,2016-11-02T02:38:09Z,2016-11-02T05:48:53Z,MERGED,True,20,20,1,https://github.com/proski,"Simplify names of xrdp.ini sections, rename ""Session Manager"" to ""Xorg""",1,[],https://github.com/neutrinolabs/xrdp/pull/470,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/470,"Make section names equal to the names in the ""name="" setting to avoid
confusion and the need to renumber sections. Avoid ""sesman-"" in the
names, it's not helpful to the user. Move ""Xorg"" just below ""X11rdp"",
that would give xorgxrdp more visibility.","Make section names equal to the names in the ""name="" setting to avoid
confusion and the need to renumber sections. Avoid ""sesman-"" in the
names, it's not helpful to the user. Move ""Xorg"" just below ""X11rdp"",
that would give xorgxrdp more visibility.",True,"{'THUMBS_UP': ['https://github.com/metalefty', 'https://github.com/cosmo0920']}"
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,470,2016-10-31T00:46:35Z,2016-11-02T02:38:09Z,2016-11-02T05:48:53Z,MERGED,True,20,20,1,https://github.com/proski,"Simplify names of xrdp.ini sections, rename ""Session Manager"" to ""Xorg""",1,[],https://github.com/neutrinolabs/xrdp/pull/470,https://github.com/proski,2,https://github.com/neutrinolabs/xrdp/pull/470#issuecomment-257689913,"Make section names equal to the names in the ""name="" setting to avoid
confusion and the need to renumber sections. Avoid ""sesman-"" in the
names, it's not helpful to the user. Move ""Xorg"" just below ""X11rdp"",
that would give xorgxrdp more visibility.","Correction: fixed capitalization in the default section name.
Note to myself: update https://github.com/neutrinolabs/xrdp/wiki/Compiling-rdp-driver once merged.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,472,2016-11-01T18:42:37Z,2016-11-01T18:51:36Z,2016-11-01T20:35:01Z,MERGED,True,26,15,1,https://github.com/proski,Use static inline functions for OpenSSL 1.0 backport,1,[],https://github.com/neutrinolabs/xrdp/pull/472,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/472,"Conditional preprocessor directives spread throughout the code set a bad
example.
The new backport code is located in one place. The compiler checks
argument types. The backport code has no access to the caller variables.
The main code has all advantages of the new, more compact API.","Conditional preprocessor directives spread throughout the code set a bad
example.
The new backport code is located in one place. The compiler checks
argument types. The backport code has no access to the caller variables.
The main code has all advantages of the new, more compact API.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,472,2016-11-01T18:42:37Z,2016-11-01T18:51:36Z,2016-11-01T20:35:01Z,MERGED,True,26,15,1,https://github.com/proski,Use static inline functions for OpenSSL 1.0 backport,1,[],https://github.com/neutrinolabs/xrdp/pull/472,https://github.com/itamarjp,2,https://github.com/neutrinolabs/xrdp/pull/472#issuecomment-257658770,"Conditional preprocessor directives spread throughout the code set a bad
example.
The new backport code is located in one place. The compiler checks
argument types. The backport code has no access to the caller variables.
The main code has all advantages of the new, more compact API.","thank you,",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,473,2016-11-02T05:52:47Z,2016-11-02T18:39:23Z,2016-11-07T07:30:52Z,MERGED,True,792,0,2,https://github.com/metalefty,add Finnish keyboard,1,['new keyboard layout'],https://github.com/neutrinolabs/xrdp/pull/473,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/473,Closes #70,Closes #70,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,473,2016-11-02T05:52:47Z,2016-11-02T18:39:23Z,2016-11-07T07:30:52Z,MERGED,True,792,0,2,https://github.com/metalefty,add Finnish keyboard,1,['new keyboard layout'],https://github.com/neutrinolabs/xrdp/pull/473,https://github.com/itamarjp,2,https://github.com/neutrinolabs/xrdp/pull/473#issuecomment-257960002,Closes #70,"thank you,",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,476,2016-11-07T04:25:29Z,2016-11-16T08:08:15Z,2016-11-16T13:30:30Z,MERGED,True,13,13,4,https://github.com/proski,Fix compile warnings for non-default authentication methods,1,[],https://github.com/neutrinolabs/xrdp/pull/476,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/476,"Include string.h for strcmp(). Don't define _XOPEN_SOURCE, it conflicts
with libc headers and hides putpwent(). Make input strings constant. Fix
functions to match their declarations.","Include string.h for strcmp(). Don't define _XOPEN_SOURCE, it conflicts
with libc headers and hides putpwent(). Make input strings constant. Fix
functions to match their declarations.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,477,2016-11-07T05:14:43Z,2016-11-16T08:10:38Z,2016-11-16T13:30:12Z,MERGED,True,9,5,1,https://github.com/proski,Improve error messages about VNC password file,2,[],https://github.com/neutrinolabs/xrdp/pull/477,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/477,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,478,2016-11-07T06:40:29Z,2016-11-07T06:46:20Z,2016-11-07T07:00:49Z,MERGED,True,5,3,1,https://github.com/proski,Install headers used by X11rdp and xorgxrdp,1,[],https://github.com/neutrinolabs/xrdp/pull/478,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/478,"Installing the headers makes it possible to compile xorgxrdp as a
separate package, without xrdp sources.","Installing the headers makes it possible to compile xorgxrdp as a
separate package, without xrdp sources.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,478,2016-11-07T06:40:29Z,2016-11-07T06:46:20Z,2016-11-07T07:00:49Z,MERGED,True,5,3,1,https://github.com/proski,Install headers used by X11rdp and xorgxrdp,1,[],https://github.com/neutrinolabs/xrdp/pull/478,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/478#issuecomment-258758999,"Installing the headers makes it possible to compile xorgxrdp as a
separate package, without xrdp sources.",+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,479,2016-11-08T22:16:52Z,2016-11-09T23:26:28Z,2016-11-10T07:43:53Z,MERGED,True,2,2,1,https://github.com/proski,Use g_get_strerror() instead of strerror(errno) for portability,1,[],https://github.com/neutrinolabs/xrdp/pull/479,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/479,"g_get_strerror() is simply returning strerror(errno) for now, except Windows. strerror() is not thread safe, we should replace it across the board. This PR simply restores consistency.","g_get_strerror() is simply returning strerror(errno) for now, except Windows. strerror() is not thread safe, we should replace it across the board. This PR simply restores consistency.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,479,2016-11-08T22:16:52Z,2016-11-09T23:26:28Z,2016-11-10T07:43:53Z,MERGED,True,2,2,1,https://github.com/proski,Use g_get_strerror() instead of strerror(errno) for portability,1,[],https://github.com/neutrinolabs/xrdp/pull/479,https://github.com/jsorg71,2,https://github.com/neutrinolabs/xrdp/pull/479#issuecomment-259293993,"g_get_strerror() is simply returning strerror(errno) for now, except Windows. strerror() is not thread safe, we should replace it across the board. This PR simply restores consistency.",+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,480,2016-11-11T01:55:40Z,2016-11-16T08:02:33Z,2016-11-16T13:31:25Z,MERGED,True,1,1,1,https://github.com/proski,Fix potential buffer overflow in strncat() invocation,1,[],https://github.com/neutrinolabs/xrdp/pull/480,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/480,"strncat() will copy at most the specified number of characters and append the null character on top of that. strlen() doesn't count the final null character.
This code will only be compiled if FUSE is enabled. I'm sure FUSE support needs a big cleanup. Even strcat() just about strncat() can have some issues.
However, I believe this misuse of strncat() should be fixed before the next release, because it sets a bad example and it's an antipattern detected by static code checkers.","strncat() will copy at most the specified number of characters and append the null character on top of that. strlen() doesn't count the final null character.
This code will only be compiled if FUSE is enabled. I'm sure FUSE support needs a big cleanup. Even strcat() just about strncat() can have some issues.
However, I believe this misuse of strncat() should be fixed before the next release, because it sets a bad example and it's an antipattern detected by static code checkers.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,483,2016-11-11T20:58:32Z,2016-11-16T08:00:23Z,2016-11-16T13:31:45Z,MERGED,True,2,1,1,https://github.com/proski,Fix regression in domain to session type mapping,1,[],https://github.com/neutrinolabs/xrdp/pull/483,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/483,"If no domain is passed, self->session->client_info->domain is an empty
string that is incorrectly treated as if the domain were passed by the
client.
The regression was introduced in fc753a9, when an incorrect check for
non-empty domain was added. That check was removed in 67119ec based on
coverity report, leaving no trace of the original intention.
Check domain both for '_' and '\0' as the initial character. In either
case, select the first session type section in xrdp.ini.","If no domain is passed, self->session->client_info->domain is an empty
string that is incorrectly treated as if the domain were passed by the
client.
The regression was introduced in fc753a9, when an incorrect check for
non-empty domain was added. That check was removed in 67119ec based on
coverity report, leaving no trace of the original intention.
Check domain both for '_' and '\0' as the initial character. In either
case, select the first session type section in xrdp.ini.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,483,2016-11-11T20:58:32Z,2016-11-16T08:00:23Z,2016-11-16T13:31:45Z,MERGED,True,2,1,1,https://github.com/proski,Fix regression in domain to session type mapping,1,[],https://github.com/neutrinolabs/xrdp/pull/483,https://github.com/proski,2,https://github.com/neutrinolabs/xrdp/pull/483#issuecomment-260057034,"If no domain is passed, self->session->client_info->domain is an empty
string that is incorrectly treated as if the domain were passed by the
client.
The regression was introduced in fc753a9, when an incorrect check for
non-empty domain was added. That check was removed in 67119ec based on
coverity report, leaving no trace of the original intention.
Check domain both for '_' and '\0' as the initial character. In either
case, select the first session type section in xrdp.ini.","Even though it is not a security fix, I consider it a 0.9.1 material. Firstly, it's a regression. The 0.6.x releases did not have that issue. Secondly, users switching from Xvnc to X11rdp or xorgxrdp backend would want to experiment with different backends, and the ability to have autologin with more than one backend would be very handy.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,483,2016-11-11T20:58:32Z,2016-11-16T08:00:23Z,2016-11-16T13:31:45Z,MERGED,True,2,1,1,https://github.com/proski,Fix regression in domain to session type mapping,1,[],https://github.com/neutrinolabs/xrdp/pull/483,https://github.com/speidy,3,https://github.com/neutrinolabs/xrdp/pull/483#issuecomment-260219022,"If no domain is passed, self->session->client_info->domain is an empty
string that is incorrectly treated as if the domain were passed by the
client.
The regression was introduced in fc753a9, when an incorrect check for
non-empty domain was added. That check was removed in 67119ec based on
coverity report, leaving no trace of the original intention.
Check domain both for '_' and '\0' as the initial character. In either
case, select the first session type section in xrdp.ini.","+1
בתאריך יום ו׳, 11 בנוב׳ 2016 ב-23:14 מאת Pavel Roskin <
notifications@github.com>:

Even though it is not a security fix, I consider it a 0.9.1 material.
Firstly, it's a regression. The 0.6.x releases did not have that issue.
Secondly, users switching from Xvnc to X11rdp or xorgxrdp backend would
want to experiment with different backends, and the ability to have
autologin with more than one backend would be very handy.
—
You are receiving this because you are subscribed to this thread.
Reply to this email directly, view it on GitHub
#483 (comment),
or mute the thread
https://github.com/notifications/unsubscribe-auth/ADTH1KNwoInM_8siz-Fzyek2-UEwlgXaks5q9NqlgaJpZM4KwIpc
.

Idan Freiberg

PGP FP: 8108 7EC9 806E 4980 75F2  72B3 8AD3 2D04 337B 1F18",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,483,2016-11-11T20:58:32Z,2016-11-16T08:00:23Z,2016-11-16T13:31:45Z,MERGED,True,2,1,1,https://github.com/proski,Fix regression in domain to session type mapping,1,[],https://github.com/neutrinolabs/xrdp/pull/483,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/483#issuecomment-260251507,"If no domain is passed, self->session->client_info->domain is an empty
string that is incorrectly treated as if the domain were passed by the
client.
The regression was introduced in fc753a9, when an incorrect check for
non-empty domain was added. That check was removed in 67119ec based on
coverity report, leaving no trace of the original intention.
Check domain both for '_' and '\0' as the initial character. In either
case, select the first session type section in xrdp.ini.",Let's include this to the next release.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,485,2016-11-13T17:01:45Z,2016-11-16T08:05:21Z,2016-11-16T13:30:53Z,MERGED,True,9,9,3,https://github.com/proski,Code standards,2,[],https://github.com/neutrinolabs/xrdp/pull/485,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/485,A recent patch broke C++ compilation and added a few tabs. Let's fix that.,A recent patch broke C++ compilation and added a few tabs. Let's fix that.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,487,2016-11-13T17:20:55Z,2016-11-13T22:46:48Z,2016-11-14T03:58:41Z,MERGED,True,15,11,2,https://github.com/proski,X11rdp build system fixes,3,[],https://github.com/neutrinolabs/xrdp/pull/487,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/487,"Stripping X11rdp is unhelpful for anyone trying to debug it or run it in Valgrind. Let's keep the uninstalled binary unstripped.
Saying in a comment that X11RDPBASE needs to be set is not enough, let's check that it's set.
Linking static libraries two times is sloppy. It's not hard to reorder them properly.","Stripping X11rdp is unhelpful for anyone trying to debug it or run it in Valgrind. Let's keep the uninstalled binary unstripped.
Saying in a comment that X11RDPBASE needs to be set is not enough, let's check that it's set.
Linking static libraries two times is sloppy. It's not hard to reorder them properly.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,487,2016-11-13T17:20:55Z,2016-11-13T22:46:48Z,2016-11-14T03:58:41Z,MERGED,True,15,11,2,https://github.com/proski,X11rdp build system fixes,3,[],https://github.com/neutrinolabs/xrdp/pull/487,https://github.com/itamarjp,2,https://github.com/neutrinolabs/xrdp/pull/487#issuecomment-260218877,"Stripping X11rdp is unhelpful for anyone trying to debug it or run it in Valgrind. Let's keep the uninstalled binary unstripped.
Saying in a comment that X11RDPBASE needs to be set is not enough, let's check that it's set.
Linking static libraries two times is sloppy. It's not hard to reorder them properly.","looks good for me, please merge.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,488,2016-11-15T08:40:15Z,2016-11-18T01:12:49Z,2016-11-18T01:12:49Z,MERGED,True,344,266,15,https://github.com/metalefty,Update man pages and config files,25,[],https://github.com/neutrinolabs/xrdp/pull/488,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/488,"Lots of changes. Topics are:

Add missing descriptions
Update version
Replace xrdp website links
Use two different symbols to comment out *.ini files

semicolon for descriptions in config files
number sign for actual configurations


Change order of parameters in xrdp.ini

put same layer configuration parameters together

TCP
security layer
RDP features (such as bpp, channels, compression, fast path, multimon)


bring lower layer earlier


Unify mixed boolean value expression to true/false

Documents are not still complete but big one step to keep up-to-date.","Lots of changes. Topics are:

Add missing descriptions
Update version
Replace xrdp website links
Use two different symbols to comment out *.ini files

semicolon for descriptions in config files
number sign for actual configurations


Change order of parameters in xrdp.ini

put same layer configuration parameters together

TCP
security layer
RDP features (such as bpp, channels, compression, fast path, multimon)


bring lower layer earlier


Unify mixed boolean value expression to true/false

Documents are not still complete but big one step to keep up-to-date.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,488,2016-11-15T08:40:15Z,2016-11-18T01:12:49Z,2016-11-18T01:12:49Z,MERGED,True,344,266,15,https://github.com/metalefty,Update man pages and config files,25,[],https://github.com/neutrinolabs/xrdp/pull/488,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/488#issuecomment-260581989,"Lots of changes. Topics are:

Add missing descriptions
Update version
Replace xrdp website links
Use two different symbols to comment out *.ini files

semicolon for descriptions in config files
number sign for actual configurations


Change order of parameters in xrdp.ini

put same layer configuration parameters together

TCP
security layer
RDP features (such as bpp, channels, compression, fast path, multimon)


bring lower layer earlier


Unify mixed boolean value expression to true/false

Documents are not still complete but big one step to keep up-to-date.",I'm not a native English speaker. Feel free to correct grammar and expressions.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,488,2016-11-15T08:40:15Z,2016-11-18T01:12:49Z,2016-11-18T01:12:49Z,MERGED,True,344,266,15,https://github.com/metalefty,Update man pages and config files,25,[],https://github.com/neutrinolabs/xrdp/pull/488,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/488#issuecomment-260856549,"Lots of changes. Topics are:

Add missing descriptions
Update version
Replace xrdp website links
Use two different symbols to comment out *.ini files

semicolon for descriptions in config files
number sign for actual configurations


Change order of parameters in xrdp.ini

put same layer configuration parameters together

TCP
security layer
RDP features (such as bpp, channels, compression, fast path, multimon)


bring lower layer earlier


Unify mixed boolean value expression to true/false

Documents are not still complete but big one step to keep up-to-date.",Rebased to current devel.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,488,2016-11-15T08:40:15Z,2016-11-18T01:12:49Z,2016-11-18T01:12:49Z,MERGED,True,344,266,15,https://github.com/metalefty,Update man pages and config files,25,[],https://github.com/neutrinolabs/xrdp/pull/488,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/488#issuecomment-261416747,"Lots of changes. Topics are:

Add missing descriptions
Update version
Replace xrdp website links
Use two different symbols to comment out *.ini files

semicolon for descriptions in config files
number sign for actual configurations


Change order of parameters in xrdp.ini

put same layer configuration parameters together

TCP
security layer
RDP features (such as bpp, channels, compression, fast path, multimon)


bring lower layer earlier


Unify mixed boolean value expression to true/false

Documents are not still complete but big one step to keep up-to-date.",I'll merge this a week later if no more review comments.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,488,2016-11-15T08:40:15Z,2016-11-18T01:12:49Z,2016-11-18T01:12:49Z,MERGED,True,344,266,15,https://github.com/metalefty,Update man pages and config files,25,[],https://github.com/neutrinolabs/xrdp/pull/488,https://github.com/proski,5,https://github.com/neutrinolabs/xrdp/pull/488#issuecomment-261420484,"Lots of changes. Topics are:

Add missing descriptions
Update version
Replace xrdp website links
Use two different symbols to comment out *.ini files

semicolon for descriptions in config files
number sign for actual configurations


Change order of parameters in xrdp.ini

put same layer configuration parameters together

TCP
security layer
RDP features (such as bpp, channels, compression, fast path, multimon)


bring lower layer earlier


Unify mixed boolean value expression to true/false

Documents are not still complete but big one step to keep up-to-date.",No need to wait that long. It's just documentation. Others may want to improve on top of your changes.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,489,2016-11-15T09:08:23Z,2016-11-15T17:20:35Z,2016-11-16T07:51:15Z,MERGED,True,42,0,1,https://github.com/metalefty,CI: add .travis.yml,1,[],https://github.com/neutrinolabs/xrdp/pull/489,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/489,Let's introduce continuous integration in order to automatically test build of pull requests.,Let's introduce continuous integration in order to automatically test build of pull requests.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,489,2016-11-15T09:08:23Z,2016-11-15T17:20:35Z,2016-11-16T07:51:15Z,MERGED,True,42,0,1,https://github.com/metalefty,CI: add .travis.yml,1,[],https://github.com/neutrinolabs/xrdp/pull/489,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/489#issuecomment-260588243,Let's introduce continuous integration in order to automatically test build of pull requests.,"In order to run build tests at xrdp repo, neutrinolabs owner needs to activate repo at travis-ci.org.
Build for this PR succeeds on my fork: https://travis-ci.org/metalefty/xrdp/builds/175988615",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,489,2016-11-15T09:08:23Z,2016-11-15T17:20:35Z,2016-11-16T07:51:15Z,MERGED,True,42,0,1,https://github.com/metalefty,CI: add .travis.yml,1,[],https://github.com/neutrinolabs/xrdp/pull/489,https://github.com/speidy,3,https://github.com/neutrinolabs/xrdp/pull/489#issuecomment-260706655,Let's introduce continuous integration in order to automatically test build of pull requests.,I have activated it @ travis-ci.org,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,489,2016-11-15T09:08:23Z,2016-11-15T17:20:35Z,2016-11-16T07:51:15Z,MERGED,True,42,0,1,https://github.com/metalefty,CI: add .travis.yml,1,[],https://github.com/neutrinolabs/xrdp/pull/489,https://github.com/proski,4,https://github.com/neutrinolabs/xrdp/pull/489#issuecomment-260764304,Let's introduce continuous integration in order to automatically test build of pull requests.,"Is that our recommended set of options? We should try to enable them if the needed libraries/functions exist.
I have fixes for FUSE warnings in my fuse branch, I'll split them out and submit. xorgxrdp should use silent rules by default to reduce noise.
If would be nice to compile xrdp with g++ as well. But xorgxrdp is not compilable with C++, as the X server headers are heavily abusing class, private and other C++ keywords. Maybe xorgxrdp should a separate travis file?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,489,2016-11-15T09:08:23Z,2016-11-15T17:20:35Z,2016-11-16T07:51:15Z,MERGED,True,42,0,1,https://github.com/metalefty,CI: add .travis.yml,1,[],https://github.com/neutrinolabs/xrdp/pull/489,https://github.com/metalefty,5,https://github.com/neutrinolabs/xrdp/pull/489#issuecomment-260877460,Let's introduce continuous integration in order to automatically test build of pull requests.,"The options are my personal recommended set.
For xorgxrdp, it's better to create a separate travis file in xorgxrdp repo.  It can test pull requests to xorgxrdp repo.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,490,2016-11-16T04:58:24Z,2016-11-16T05:14:32Z,2016-11-16T07:18:22Z,MERGED,True,23,23,1,https://github.com/proski,"Omit numbers from the ""param"" keys, they are not needed",1,[],https://github.com/neutrinolabs/xrdp/pull/490,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/490,"Users assume that they need to renumber the parameters. That makes
parameter editing more involved than it needs to be.","Users assume that they need to renumber the parameters. That makes
parameter editing more involved than it needs to be.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,490,2016-11-16T04:58:24Z,2016-11-16T05:14:32Z,2016-11-16T07:18:22Z,MERGED,True,23,23,1,https://github.com/proski,"Omit numbers from the ""param"" keys, they are not needed",1,[],https://github.com/neutrinolabs/xrdp/pull/490,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/490#issuecomment-260856036,"Users assume that they need to renumber the parameters. That makes
parameter editing more involved than it needs to be.",+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,491,2016-11-16T06:04:20Z,2016-11-22T00:10:02Z,2016-11-22T00:43:19Z,MERGED,True,75,74,1,https://github.com/proski,Fix format warnings if FUSE is enabled,1,[],https://github.com/neutrinolabs/xrdp/pull/491,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/491,All code changes are in the logs. That fixes the bulk of the warnings in the FUSE code.,All code changes are in the logs. That fixes the bulk of the warnings in the FUSE code.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,491,2016-11-16T06:04:20Z,2016-11-22T00:10:02Z,2016-11-22T00:43:19Z,MERGED,True,75,74,1,https://github.com/proski,Fix format warnings if FUSE is enabled,1,[],https://github.com/neutrinolabs/xrdp/pull/491,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/491#issuecomment-261421412,All code changes are in the logs. That fixes the bulk of the warnings in the FUSE code.,I think this can be included to next release.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,492,2016-11-16T08:32:11Z,2016-11-16T18:56:13Z,2016-12-08T01:41:29Z,MERGED,True,1,1,1,https://github.com/metalefty,Do not create SHA-1 certificates anymore,1,[],https://github.com/neutrinolabs/xrdp/pull/492,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/492,"as many systems in the world still default to create SHA-1 certs if
hash algorithm is not specified explicitly.","as many systems in the world still default to create SHA-1 certs if
hash algorithm is not specified explicitly.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,492,2016-11-16T08:32:11Z,2016-11-16T18:56:13Z,2016-12-08T01:41:29Z,MERGED,True,1,1,1,https://github.com/metalefty,Do not create SHA-1 certificates anymore,1,[],https://github.com/neutrinolabs/xrdp/pull/492,https://github.com/jsorg71,2,https://github.com/neutrinolabs/xrdp/pull/492#issuecomment-260886886,"as many systems in the world still default to create SHA-1 certs if
hash algorithm is not specified explicitly.",+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,493,2016-11-18T01:08:58Z,2016-11-18T01:12:34Z,2016-11-18T01:15:07Z,MERGED,True,40,50,4,https://github.com/proski,Fixes for pkg-config,4,[],https://github.com/neutrinolabs/xrdp/pull/493,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/493,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,494,2016-11-18T04:01:44Z,2016-11-18T14:25:08Z,2016-11-18T20:10:20Z,MERGED,True,17,2,2,https://github.com/proski,"Fix ""unable to find 'distinguished_name' in config"" with older openssl",1,[],https://github.com/neutrinolabs/xrdp/pull/494,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/494,"This also fixes ""make distcheck"", which expects ""make uninstall"" to
remove all installed files.","This also fixes ""make distcheck"", which expects ""make uninstall"" to
remove all installed files.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,495,2016-11-18T20:37:33Z,2016-11-18T20:55:50Z,2016-11-18T21:07:31Z,MERGED,True,1,1,1,https://github.com/proski,"Add ""make distcheck"" to travis checks",1,[],https://github.com/neutrinolabs/xrdp/pull/495,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/495,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,495,2016-11-18T20:37:33Z,2016-11-18T20:55:50Z,2016-11-18T21:07:31Z,MERGED,True,1,1,1,https://github.com/proski,"Add ""make distcheck"" to travis checks",1,[],https://github.com/neutrinolabs/xrdp/pull/495,https://github.com/itamarjp,2,https://github.com/neutrinolabs/xrdp/pull/495#issuecomment-261639638,,thank you,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,496,2016-11-18T23:44:48Z,2016-11-18T23:46:43Z,2016-11-18T23:49:56Z,MERGED,True,4,1,2,https://github.com/proski,Fix for xrdp-uninstalled.pc and addition of pkgconfig/.gitignore,2,[],https://github.com/neutrinolabs/xrdp/pull/496,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/496,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,497,2016-11-19T05:35:14Z,2016-12-09T09:16:15Z,2017-07-29T04:18:53Z,CLOSED,False,127,35,12,https://github.com/jsorg71,Vncpassfile,7,[],https://github.com/neutrinolabs/xrdp/pull/497,https://github.com/jsorg71,1,https://github.com/neutrinolabs/xrdp/pull/497,"This fixes an old VNC security issue were the VNC password file is based on the user password.
Now it is derived from a random GUID that is generated for each session.
This GUID can be used in the future for session reconnect and other things.","This fixes an old VNC security issue were the VNC password file is based on the user password.
Now it is derived from a random GUID that is generated for each session.
This GUID can be used in the future for session reconnect and other things.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,497,2016-11-19T05:35:14Z,2016-12-09T09:16:15Z,2017-07-29T04:18:53Z,CLOSED,False,127,35,12,https://github.com/jsorg71,Vncpassfile,7,[],https://github.com/neutrinolabs/xrdp/pull/497,https://github.com/jsorg71,2,https://github.com/neutrinolabs/xrdp/pull/497#issuecomment-261695230,"This fixes an old VNC security issue were the VNC password file is based on the user password.
Now it is derived from a random GUID that is generated for each session.
This GUID can be used in the future for session reconnect and other things.",Let me manually merge this if it all looks good.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,497,2016-11-19T05:35:14Z,2016-12-09T09:16:15Z,2017-07-29T04:18:53Z,CLOSED,False,127,35,12,https://github.com/jsorg71,Vncpassfile,7,[],https://github.com/neutrinolabs/xrdp/pull/497,https://github.com/proski,3,https://github.com/neutrinolabs/xrdp/pull/497#issuecomment-265920806,"This fixes an old VNC security issue were the VNC password file is based on the user password.
Now it is derived from a random GUID that is generated for each session.
This GUID can be used in the future for session reconnect and other things.",#523 has been merged. I assume this PR can be closed.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,497,2016-11-19T05:35:14Z,2016-12-09T09:16:15Z,2017-07-29T04:18:53Z,CLOSED,False,127,35,12,https://github.com/jsorg71,Vncpassfile,7,[],https://github.com/neutrinolabs/xrdp/pull/497,https://github.com/carnil,4,https://github.com/neutrinolabs/xrdp/pull/497#issuecomment-266291176,"This fixes an old VNC security issue were the VNC password file is based on the user password.
Now it is derived from a random GUID that is generated for each session.
This GUID can be used in the future for session reconnect and other things.","Additional note for this pull request.
Originally reported to by Dag-Erling Smørgrav and Petter Reinholdtsen:

When successfully logging in using RDP into a xrdp session, the file
~/.vnc/sesman_${username}_passwd is created.  Its content is the
equivalent of the users clear text password, DES encrypted with a known
key.

This issue got assigned back then CVE-2013-1430",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,499,2016-11-21T06:09:11Z,2016-11-21T11:39:10Z,2016-11-21T17:49:05Z,MERGED,True,276,2,2,https://github.com/proski,Use PKG_INSTALLDIR to determine pkg-config file install location,1,[],https://github.com/neutrinolabs/xrdp/pull/499,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/499,"The PKG_INSTALLDIR macro also enables --with-pkgconfigdir for easy
overrides.
PKG_INSTALLDIR is relatively new, it appeared in pkg-config 0.27. To
ensure we have a recent pkg.m4 copy, copy pkg.m4 to the m4 directory.","The PKG_INSTALLDIR macro also enables --with-pkgconfigdir for easy
overrides.
PKG_INSTALLDIR is relatively new, it appeared in pkg-config 0.27. To
ensure we have a recent pkg.m4 copy, copy pkg.m4 to the m4 directory.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,499,2016-11-21T06:09:11Z,2016-11-21T11:39:10Z,2016-11-21T17:49:05Z,MERGED,True,276,2,2,https://github.com/proski,Use PKG_INSTALLDIR to determine pkg-config file install location,1,[],https://github.com/neutrinolabs/xrdp/pull/499,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/499#issuecomment-261859956,"The PKG_INSTALLDIR macro also enables --with-pkgconfigdir for easy
overrides.
PKG_INSTALLDIR is relatively new, it appeared in pkg-config 0.27. To
ensure we have a recent pkg.m4 copy, copy pkg.m4 to the m4 directory.",I confirmed that I can override the directory with --with-pkgconfigdir option.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,502,2016-11-22T01:45:52Z,2016-11-28T01:14:09Z,2016-11-28T07:32:36Z,MERGED,True,121,113,4,https://github.com/proski,"Fix all FUSE warnings and C++ compatibility, add Mac compilation support",10,[],https://github.com/neutrinolabs/xrdp/pull/502,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/502,"Bring the FUSE code to the same standards as the rest of the code. Specifically:

Fix all warnings
Fix all C++ errors and warnings
Comment out or remove all dead code
Use flags reported by pkg-config (that fixes Mac OS support)

Since FUSE is enabled in Travis CI checks and in Fedora rpm, it's important to maintain high quality of that code. Fixing pre-existing warnings will make new warnings stand out right away.
I tried to avoid any changes that would go beyond the stated goals. I believe the changes should be good for 0.9.1.","Bring the FUSE code to the same standards as the rest of the code. Specifically:

Fix all warnings
Fix all C++ errors and warnings
Comment out or remove all dead code
Use flags reported by pkg-config (that fixes Mac OS support)

Since FUSE is enabled in Travis CI checks and in Fedora rpm, it's important to maintain high quality of that code. Fixing pre-existing warnings will make new warnings stand out right away.
I tried to avoid any changes that would go beyond the stated goals. I believe the changes should be good for 0.9.1.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,502,2016-11-22T01:45:52Z,2016-11-28T01:14:09Z,2016-11-28T07:32:36Z,MERGED,True,121,113,4,https://github.com/proski,"Fix all FUSE warnings and C++ compatibility, add Mac compilation support",10,[],https://github.com/neutrinolabs/xrdp/pull/502,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/502#issuecomment-263162741,"Bring the FUSE code to the same standards as the rest of the code. Specifically:

Fix all warnings
Fix all C++ errors and warnings
Comment out or remove all dead code
Use flags reported by pkg-config (that fixes Mac OS support)

Since FUSE is enabled in Travis CI checks and in Fedora rpm, it's important to maintain high quality of that code. Fixing pre-existing warnings will make new warnings stand out right away.
I tried to avoid any changes that would go beyond the stated goals. I believe the changes should be good for 0.9.1.",Looks good.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,503,2016-11-22T03:18:37Z,2016-11-24T07:13:55Z,2016-11-26T17:17:16Z,MERGED,True,9,9,1,https://github.com/proski,Fix pointer sign warnings in jpeg and TurboJPEG code,2,[],https://github.com/neutrinolabs/xrdp/pull/503,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/503,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,504,2016-11-22T06:39:29Z,2016-11-22T15:18:19Z,2016-11-29T11:47:57Z,MERGED,True,0,3,1,https://github.com/proski,"Remove ""-ac"" from X server parameters, it's insecure and unnecessary",1,[],https://github.com/neutrinolabs/xrdp/pull/504,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/504,"Fedora patches sesman.ini to remove ""-ac"", and that doesn't cause any ill
effects.","Fedora patches sesman.ini to remove ""-ac"", and that doesn't cause any ill
effects.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,504,2016-11-22T06:39:29Z,2016-11-22T15:18:19Z,2016-11-29T11:47:57Z,MERGED,True,0,3,1,https://github.com/proski,"Remove ""-ac"" from X server parameters, it's insecure and unnecessary",1,[],https://github.com/neutrinolabs/xrdp/pull/504,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/504#issuecomment-262164992,"Fedora patches sesman.ini to remove ""-ac"", and that doesn't cause any ill
effects.",+1 I confirmed it works on FreeBSD.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,504,2016-11-22T06:39:29Z,2016-11-22T15:18:19Z,2016-11-29T11:47:57Z,MERGED,True,0,3,1,https://github.com/proski,"Remove ""-ac"" from X server parameters, it's insecure and unnecessary",1,[],https://github.com/neutrinolabs/xrdp/pull/504,https://github.com/mirabilos,3,https://github.com/neutrinolabs/xrdp/pull/504#issuecomment-263550036,"Fedora patches sesman.ini to remove ""-ac"", and that doesn't cause any ill
effects.","I can confirm that this one works without -ac too:
[Xorg]
param=Xorg
param=-config
param=xrdp/xorg.conf
param=-noreset
param=-nolisten
param=tcp
param=-retro

That’s Debian sid’s latest xrdp and xorgxrdp.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,507,2016-11-24T09:41:59Z,2016-11-28T08:37:41Z,2016-11-29T06:53:37Z,CLOSED,False,103,36,2,https://github.com/proski,"Recognize ""security_layer=negotiate"", improve security layer negotiation",1,[],https://github.com/neutrinolabs/xrdp/pull/507,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/507,"This change is bigger than I would like, but it fixes a real issue that created trouble to my colleagues. A smaller change would leave gaps in a critical security code.
Distros are not going to ship generated certificates. It's not secure to have the same certificate on every system. Generation on install has its issues. Not every system knows its external DNS name, which is needed for a proper certificate.
If security_layer=negotiate is used (our new default), the client is OK with RDP and TLS (most clients are), and the certificates are missing (because distros won't ship dummy certificates), the connection would fail. Many users would be affected. Distros may have to change security_layer back to rdp.
Also, the client can force a tls connection onto a server configured to use rdp only. Not good, to put it mildly.
It turns out the code doesn't even know of the ""negotiate"" setting that is our new default! It uses ""hybrid"" and complains about unconfigured security layer. Let's support both.

The documentation has ""negotiate"" for security_layer, but the code used
""hybrid"". Allow both. Treat empty security_layer as ""negotiate"". Log an
error only for unrecognized values of security_layer.
Rewrite xrdp_iso_negotiate_security() to have careful treatment of all
combinations or requested and configured security layers.
Accept only known security layers from the clients. Return
INCONSISTENT_FLAGS in all other cases.
For ""rdp"" on the server and ""tls"" on the client, reject connection and
return SSL_NOT_ALLOWED_BY_SERVER.
For ""negotiate"" (""hybrid"") on both sides, downgrade to RDP quietly if the
certificates are missing. That would allow distros to ship xrdp without
certificates and have it work with hybrid-capable clients.
Log all outcomes, security negotiation is important to be logged.","This change is bigger than I would like, but it fixes a real issue that created trouble to my colleagues. A smaller change would leave gaps in a critical security code.
Distros are not going to ship generated certificates. It's not secure to have the same certificate on every system. Generation on install has its issues. Not every system knows its external DNS name, which is needed for a proper certificate.
If security_layer=negotiate is used (our new default), the client is OK with RDP and TLS (most clients are), and the certificates are missing (because distros won't ship dummy certificates), the connection would fail. Many users would be affected. Distros may have to change security_layer back to rdp.
Also, the client can force a tls connection onto a server configured to use rdp only. Not good, to put it mildly.
It turns out the code doesn't even know of the ""negotiate"" setting that is our new default! It uses ""hybrid"" and complains about unconfigured security layer. Let's support both.

The documentation has ""negotiate"" for security_layer, but the code used
""hybrid"". Allow both. Treat empty security_layer as ""negotiate"". Log an
error only for unrecognized values of security_layer.
Rewrite xrdp_iso_negotiate_security() to have careful treatment of all
combinations or requested and configured security layers.
Accept only known security layers from the clients. Return
INCONSISTENT_FLAGS in all other cases.
For ""rdp"" on the server and ""tls"" on the client, reject connection and
return SSL_NOT_ALLOWED_BY_SERVER.
For ""negotiate"" (""hybrid"") on both sides, downgrade to RDP quietly if the
certificates are missing. That would allow distros to ship xrdp without
certificates and have it work with hybrid-capable clients.
Log all outcomes, security negotiation is important to be logged.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,507,2016-11-24T09:41:59Z,2016-11-28T08:37:41Z,2016-11-29T06:53:37Z,CLOSED,False,103,36,2,https://github.com/proski,"Recognize ""security_layer=negotiate"", improve security layer negotiation",1,[],https://github.com/neutrinolabs/xrdp/pull/507,https://github.com/speidy,2,https://github.com/neutrinolabs/xrdp/pull/507#issuecomment-262752809,"This change is bigger than I would like, but it fixes a real issue that created trouble to my colleagues. A smaller change would leave gaps in a critical security code.
Distros are not going to ship generated certificates. It's not secure to have the same certificate on every system. Generation on install has its issues. Not every system knows its external DNS name, which is needed for a proper certificate.
If security_layer=negotiate is used (our new default), the client is OK with RDP and TLS (most clients are), and the certificates are missing (because distros won't ship dummy certificates), the connection would fail. Many users would be affected. Distros may have to change security_layer back to rdp.
Also, the client can force a tls connection onto a server configured to use rdp only. Not good, to put it mildly.
It turns out the code doesn't even know of the ""negotiate"" setting that is our new default! It uses ""hybrid"" and complains about unconfigured security layer. Let's support both.

The documentation has ""negotiate"" for security_layer, but the code used
""hybrid"". Allow both. Treat empty security_layer as ""negotiate"". Log an
error only for unrecognized values of security_layer.
Rewrite xrdp_iso_negotiate_security() to have careful treatment of all
combinations or requested and configured security layers.
Accept only known security layers from the clients. Return
INCONSISTENT_FLAGS in all other cases.
For ""rdp"" on the server and ""tls"" on the client, reject connection and
return SSL_NOT_ALLOWED_BY_SERVER.
For ""negotiate"" (""hybrid"") on both sides, downgrade to RDP quietly if the
certificates are missing. That would allow distros to ship xrdp without
certificates and have it work with hybrid-capable clients.
Log all outcomes, security negotiation is important to be logged.","Panel, this part is very tricky and requires extensive testing , such as
old Windows boxes.
Also, I think that your fix doesn't handle th e case when the server is
forced to do TLS, but have no certificate configured, and client requests
TLS.
בתאריך יום ה׳, 24 בנוב׳ 2016 ב-11:42 מאת Pavel Roskin <
notifications@github.com>:
 This change is bigger than I would like, but it fixes a real issue that
 created trouble to my colleagues. A smaller change would leave gaps in a
 critical security code.

 Distros are not going to ship generated certificates. It's not secure to
 have the same certificate on every system. Generation on install has its
 issues. Not every system knows its external DNS name, which is needed for a
 proper certificate.

 If security_layer=negotiate is used (our new default), the client is OK
 with RDP and TLS (most clients are), and the certificates are missing
 (because distros won't ship dummy certificates), the connection would fail.
 Many users would be affected. Distros may have to change security_layer
 back to rdp.

 Also, the client can force a tls connection onto a server configured to
 use rdp only. Not good, to put it mildly.

 It turns out the code doesn't even know of the ""negotiate"" setting that is
 our new default! It uses ""hybrid"" and complains about unconfigured security
 layer. Let's support both.
 ------------------------------

 The documentation has ""negotiate"" for security_layer, but the code used
 ""hybrid"". Allow both. Treat empty security_layer as ""negotiate"". Log an
 error only for unrecognized values of security_layer.

 Rewrite xrdp_iso_negotiate_security() to have careful treatment of all
 combinations or requested and configured security layers.

 Accept only known security layers from the clients. Return
 INCONSISTENT_FLAGS in all other cases.

 For ""rdp"" on the server and ""tls"" on the client, reject connection and
 return SSL_NOT_ALLOWED_BY_SERVER.

 For ""negotiate"" (""hybrid"") on both sides, downgrade to RDP quietly if the
 certificates are missing. That would allow distros to ship xrdp without
 certificates and have it work with hybrid-capable clients.

 Log all outcomes, security negotiation is important to be logged.
 ------------------------------
 You can view, comment on, or merge this pull request online at:

   #507
 Commit Summary

    - Recognize ""security_layer=negotiate"", improve security layer
    negotiation

 File Changes

    - *M* libxrdp/xrdp_iso.c
    <https://github.com/neutrinolabs/xrdp/pull/507/files#diff-0> (122)
    - *M* libxrdp/xrdp_rdp.c
    <https://github.com/neutrinolabs/xrdp/pull/507/files#diff-1> (17)

 Patch Links:

    - https://github.com/neutrinolabs/xrdp/pull/507.patch
    - https://github.com/neutrinolabs/xrdp/pull/507.diff

 —
 You are receiving this because you are subscribed to this thread.
 Reply to this email directly, view it on GitHub
 <#507>, or mute the thread
 <https://github.com/notifications/unsubscribe-auth/ADTH1IGGGXIZ12SwToTcCqn_us-h8YQUks5rBVvpgaJpZM4K7c1K>
 .

-- 
Idan Freiberg

PGP FP: 8108 7EC9 806E 4980 75F2  72B3 8AD3 2D04 337B 1F18",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,507,2016-11-24T09:41:59Z,2016-11-28T08:37:41Z,2016-11-29T06:53:37Z,CLOSED,False,103,36,2,https://github.com/proski,"Recognize ""security_layer=negotiate"", improve security layer negotiation",1,[],https://github.com/neutrinolabs/xrdp/pull/507,https://github.com/speidy,3,https://github.com/neutrinolabs/xrdp/pull/507#issuecomment-262753459,"This change is bigger than I would like, but it fixes a real issue that created trouble to my colleagues. A smaller change would leave gaps in a critical security code.
Distros are not going to ship generated certificates. It's not secure to have the same certificate on every system. Generation on install has its issues. Not every system knows its external DNS name, which is needed for a proper certificate.
If security_layer=negotiate is used (our new default), the client is OK with RDP and TLS (most clients are), and the certificates are missing (because distros won't ship dummy certificates), the connection would fail. Many users would be affected. Distros may have to change security_layer back to rdp.
Also, the client can force a tls connection onto a server configured to use rdp only. Not good, to put it mildly.
It turns out the code doesn't even know of the ""negotiate"" setting that is our new default! It uses ""hybrid"" and complains about unconfigured security layer. Let's support both.

The documentation has ""negotiate"" for security_layer, but the code used
""hybrid"". Allow both. Treat empty security_layer as ""negotiate"". Log an
error only for unrecognized values of security_layer.
Rewrite xrdp_iso_negotiate_security() to have careful treatment of all
combinations or requested and configured security layers.
Accept only known security layers from the clients. Return
INCONSISTENT_FLAGS in all other cases.
For ""rdp"" on the server and ""tls"" on the client, reject connection and
return SSL_NOT_ALLOWED_BY_SERVER.
For ""negotiate"" (""hybrid"") on both sides, downgrade to RDP quietly if the
certificates are missing. That would allow distros to ship xrdp without
certificates and have it work with hybrid-capable clients.
Log all outcomes, security negotiation is important to be logged.","Oh, I think i was wrong regarding the case.
Let me do some testing.
בתאריך יום ה׳, 24 בנוב׳ 2016 ב-13:17 מאת Idan Freiberg <speidy@gmail.com>:
 Panel, this part is very tricky and requires extensive testing , such as
 old Windows boxes.
 Also, I think that your fix doesn't handle th e case when the server is
 forced to do TLS, but have no certificate configured, and client requests
 TLS.
 בתאריך יום ה׳, 24 בנוב׳ 2016 ב-11:42 מאת Pavel Roskin <
 ***@***.***>:

 This change is bigger than I would like, but it fixes a real issue that
 created trouble to my colleagues. A smaller change would leave gaps in a
 critical security code.

 Distros are not going to ship generated certificates. It's not secure to
 have the same certificate on every system. Generation on install has its
 issues. Not every system knows its external DNS name, which is needed for a
 proper certificate.

 If security_layer=negotiate is used (our new default), the client is OK
 with RDP and TLS (most clients are), and the certificates are missing
 (because distros won't ship dummy certificates), the connection would fail.
 Many users would be affected. Distros may have to change security_layer
 back to rdp.

 Also, the client can force a tls connection onto a server configured to
 use rdp only. Not good, to put it mildly.

 It turns out the code doesn't even know of the ""negotiate"" setting that is
 our new default! It uses ""hybrid"" and complains about unconfigured security
 layer. Let's support both.
 ------------------------------

 The documentation has ""negotiate"" for security_layer, but the code used
 ""hybrid"". Allow both. Treat empty security_layer as ""negotiate"". Log an
 error only for unrecognized values of security_layer.

 Rewrite xrdp_iso_negotiate_security() to have careful treatment of all
 combinations or requested and configured security layers.

 Accept only known security layers from the clients. Return
 INCONSISTENT_FLAGS in all other cases.

 For ""rdp"" on the server and ""tls"" on the client, reject connection and
 return SSL_NOT_ALLOWED_BY_SERVER.

 For ""negotiate"" (""hybrid"") on both sides, downgrade to RDP quietly if the
 certificates are missing. That would allow distros to ship xrdp without
 certificates and have it work with hybrid-capable clients.

 Log all outcomes, security negotiation is important to be logged.
 ------------------------------
 You can view, comment on, or merge this pull request online at:

   #507
 Commit Summary

    - Recognize ""security_layer=negotiate"", improve security layer
    negotiation

 File Changes

    - *M* libxrdp/xrdp_iso.c
    <https://github.com/neutrinolabs/xrdp/pull/507/files#diff-0> (122)
    - *M* libxrdp/xrdp_rdp.c
    <https://github.com/neutrinolabs/xrdp/pull/507/files#diff-1> (17)

 Patch Links:

    - https://github.com/neutrinolabs/xrdp/pull/507.patch
    - https://github.com/neutrinolabs/xrdp/pull/507.diff

 —
 You are receiving this because you are subscribed to this thread.
 Reply to this email directly, view it on GitHub
 <#507>, or mute the thread
 <https://github.com/notifications/unsubscribe-auth/ADTH1IGGGXIZ12SwToTcCqn_us-h8YQUks5rBVvpgaJpZM4K7c1K>
 .

 --
 Idan Freiberg

 PGP FP: 8108 7EC9 806E 4980 75F2  72B3 8AD3 2D04 337B 1F18

-- 
Idan Freiberg

PGP FP: 8108 7EC9 806E 4980 75F2  72B3 8AD3 2D04 337B 1F18",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,507,2016-11-24T09:41:59Z,2016-11-28T08:37:41Z,2016-11-29T06:53:37Z,CLOSED,False,103,36,2,https://github.com/proski,"Recognize ""security_layer=negotiate"", improve security layer negotiation",1,[],https://github.com/neutrinolabs/xrdp/pull/507,https://github.com/proski,4,https://github.com/neutrinolabs/xrdp/pull/507#issuecomment-262824632,"This change is bigger than I would like, but it fixes a real issue that created trouble to my colleagues. A smaller change would leave gaps in a critical security code.
Distros are not going to ship generated certificates. It's not secure to have the same certificate on every system. Generation on install has its issues. Not every system knows its external DNS name, which is needed for a proper certificate.
If security_layer=negotiate is used (our new default), the client is OK with RDP and TLS (most clients are), and the certificates are missing (because distros won't ship dummy certificates), the connection would fail. Many users would be affected. Distros may have to change security_layer back to rdp.
Also, the client can force a tls connection onto a server configured to use rdp only. Not good, to put it mildly.
It turns out the code doesn't even know of the ""negotiate"" setting that is our new default! It uses ""hybrid"" and complains about unconfigured security layer. Let's support both.

The documentation has ""negotiate"" for security_layer, but the code used
""hybrid"". Allow both. Treat empty security_layer as ""negotiate"". Log an
error only for unrecognized values of security_layer.
Rewrite xrdp_iso_negotiate_security() to have careful treatment of all
combinations or requested and configured security layers.
Accept only known security layers from the clients. Return
INCONSISTENT_FLAGS in all other cases.
For ""rdp"" on the server and ""tls"" on the client, reject connection and
return SSL_NOT_ALLOWED_BY_SERVER.
For ""negotiate"" (""hybrid"") on both sides, downgrade to RDP quietly if the
certificates are missing. That would allow distros to ship xrdp without
certificates and have it work with hybrid-capable clients.
Log all outcomes, security negotiation is important to be logged.","I agree that the patch needs a good testing. Let's wait a week or so before merging it. My main concern is whether the list of supported requested security layers is limited to 0 (rdp), 1 (ssl) and 3 (ssl|hybrid). I saw 11 (ssl | hybrid | hybrid_ex) when NLA is requested, which we don't support.
Look for SSL_CERT_NOT_ON_SERVER for the case you describe. It's handled.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,507,2016-11-24T09:41:59Z,2016-11-28T08:37:41Z,2016-11-29T06:53:37Z,CLOSED,False,103,36,2,https://github.com/proski,"Recognize ""security_layer=negotiate"", improve security layer negotiation",1,[],https://github.com/neutrinolabs/xrdp/pull/507,https://github.com/speidy,5,https://github.com/neutrinolabs/xrdp/pull/507#issuecomment-262829778,"This change is bigger than I would like, but it fixes a real issue that created trouble to my colleagues. A smaller change would leave gaps in a critical security code.
Distros are not going to ship generated certificates. It's not secure to have the same certificate on every system. Generation on install has its issues. Not every system knows its external DNS name, which is needed for a proper certificate.
If security_layer=negotiate is used (our new default), the client is OK with RDP and TLS (most clients are), and the certificates are missing (because distros won't ship dummy certificates), the connection would fail. Many users would be affected. Distros may have to change security_layer back to rdp.
Also, the client can force a tls connection onto a server configured to use rdp only. Not good, to put it mildly.
It turns out the code doesn't even know of the ""negotiate"" setting that is our new default! It uses ""hybrid"" and complains about unconfigured security layer. Let's support both.

The documentation has ""negotiate"" for security_layer, but the code used
""hybrid"". Allow both. Treat empty security_layer as ""negotiate"". Log an
error only for unrecognized values of security_layer.
Rewrite xrdp_iso_negotiate_security() to have careful treatment of all
combinations or requested and configured security layers.
Accept only known security layers from the clients. Return
INCONSISTENT_FLAGS in all other cases.
For ""rdp"" on the server and ""tls"" on the client, reject connection and
return SSL_NOT_ALLOWED_BY_SERVER.
For ""negotiate"" (""hybrid"") on both sides, downgrade to RDP quietly if the
certificates are missing. That would allow distros to ship xrdp without
certificates and have it work with hybrid-capable clients.
Log all outcomes, security negotiation is important to be logged.","On Thu, Nov 24, 2016 at 7:47 PM Pavel Roskin notifications@github.com
wrote:

I agree that the patch needs a good testing. Let's wait a week or so
before merging it. My main concern is whether the list of supported
requested security layers is limited to 0 (rdp), 1 (ssl) and 3
(ssl|hybrid). I saw 11 (ssl | hybrid | hybrid_ex) when NLA is requested,
which we don't support.

Hybrid is used for NLA.
Hybrid_ex is NLA with a special eary authorization pdu, which we don't
support right now.
Also, there are couple of new negotiation flags added lately, which we do
not support, but they should be added and ignored. (https://github.com/proski/xrdp/blob/f3eecbec25bb842927c6e4d20e0fa4d9b6b9abc1/libxrdp/xrdp_iso.c#L184))
https://msdn.microsoft.com/en-us/library/cc240500.aspx

Look for SSL_CERT_NOT_ON_SERVER for the case you describe. It's handled.
—
You are receiving this because you commented.
Reply to this email directly, view it on GitHub
#507 (comment),
or mute the thread
https://github.com/notifications/unsubscribe-auth/ADTH1JnKEz2kqhLYzgfXECyg9sQdIuiaks5rBc3MgaJpZM4K7c1K
.

--
Idan Freiberg
PGP FP: 8108 7EC9 806E 4980 75F2  72B3 8AD3 2D04 337B 1F18",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,507,2016-11-24T09:41:59Z,2016-11-28T08:37:41Z,2016-11-29T06:53:37Z,CLOSED,False,103,36,2,https://github.com/proski,"Recognize ""security_layer=negotiate"", improve security layer negotiation",1,[],https://github.com/neutrinolabs/xrdp/pull/507,https://github.com/proski,6,https://github.com/neutrinolabs/xrdp/pull/507#issuecomment-262987324,"This change is bigger than I would like, but it fixes a real issue that created trouble to my colleagues. A smaller change would leave gaps in a critical security code.
Distros are not going to ship generated certificates. It's not secure to have the same certificate on every system. Generation on install has its issues. Not every system knows its external DNS name, which is needed for a proper certificate.
If security_layer=negotiate is used (our new default), the client is OK with RDP and TLS (most clients are), and the certificates are missing (because distros won't ship dummy certificates), the connection would fail. Many users would be affected. Distros may have to change security_layer back to rdp.
Also, the client can force a tls connection onto a server configured to use rdp only. Not good, to put it mildly.
It turns out the code doesn't even know of the ""negotiate"" setting that is our new default! It uses ""hybrid"" and complains about unconfigured security layer. Let's support both.

The documentation has ""negotiate"" for security_layer, but the code used
""hybrid"". Allow both. Treat empty security_layer as ""negotiate"". Log an
error only for unrecognized values of security_layer.
Rewrite xrdp_iso_negotiate_security() to have careful treatment of all
combinations or requested and configured security layers.
Accept only known security layers from the clients. Return
INCONSISTENT_FLAGS in all other cases.
For ""rdp"" on the server and ""tls"" on the client, reject connection and
return SSL_NOT_ALLOWED_BY_SERVER.
For ""negotiate"" (""hybrid"") on both sides, downgrade to RDP quietly if the
certificates are missing. That would allow distros to ship xrdp without
certificates and have it work with hybrid-capable clients.
Log all outcomes, security negotiation is important to be logged.","Please merge this patch as ""work in progress"" so it's not merged as is. I see MS RDP for Mac sends 11 when doing autologin, yet the authentication works wirh the original code.
I plan to make a minimal patch for 0.9.1 that would stop error message on ""negotiate"" and add logging. I'll try to deal with missing certificates and negotiate setting in a more conservative way. If it cannot be done, we can suggest to the distros that they use rdp as security layer if they don't ship certificates.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,507,2016-11-24T09:41:59Z,2016-11-28T08:37:41Z,2016-11-29T06:53:37Z,CLOSED,False,103,36,2,https://github.com/proski,"Recognize ""security_layer=negotiate"", improve security layer negotiation",1,[],https://github.com/neutrinolabs/xrdp/pull/507,https://github.com/speidy,7,https://github.com/neutrinolabs/xrdp/pull/507#issuecomment-262989231,"This change is bigger than I would like, but it fixes a real issue that created trouble to my colleagues. A smaller change would leave gaps in a critical security code.
Distros are not going to ship generated certificates. It's not secure to have the same certificate on every system. Generation on install has its issues. Not every system knows its external DNS name, which is needed for a proper certificate.
If security_layer=negotiate is used (our new default), the client is OK with RDP and TLS (most clients are), and the certificates are missing (because distros won't ship dummy certificates), the connection would fail. Many users would be affected. Distros may have to change security_layer back to rdp.
Also, the client can force a tls connection onto a server configured to use rdp only. Not good, to put it mildly.
It turns out the code doesn't even know of the ""negotiate"" setting that is our new default! It uses ""hybrid"" and complains about unconfigured security layer. Let's support both.

The documentation has ""negotiate"" for security_layer, but the code used
""hybrid"". Allow both. Treat empty security_layer as ""negotiate"". Log an
error only for unrecognized values of security_layer.
Rewrite xrdp_iso_negotiate_security() to have careful treatment of all
combinations or requested and configured security layers.
Accept only known security layers from the clients. Return
INCONSISTENT_FLAGS in all other cases.
For ""rdp"" on the server and ""tls"" on the client, reject connection and
return SSL_NOT_ALLOWED_BY_SERVER.
For ""negotiate"" (""hybrid"") on both sides, downgrade to RDP quietly if the
certificates are missing. That would allow distros to ship xrdp without
certificates and have it work with hybrid-capable clients.
Log all outcomes, security negotiation is important to be logged.","I think when credentials are sent, NLA is preferred; thus 11 is being sent.
The current code accepts a fallback from NLA into TLS only.

As a side note, I tested XP with/without negotiation PDU and it worked. I
remember that one was problematic.

Regarding to using standard RDP security layer, I don't think it's really
make a change in security perspective.
With standard RDP you still have to generate rsa keys. So why we can't
generate self signed cert instead?
Microsoft is generating one by default in windows machines. Also, Most
clients warns when an untrusted certificate is being used.

בתאריך יום ו׳, 25 בנוב׳ 2016 ב-18:04 מאת Pavel Roskin <
notifications@github.com>:
 Please merge this patch as ""work in progress"" so it's not merged as is. I
 see MS RDP for Mac sends 11 when doing autologin, yet the authentication
 works wirh the original code.

 I plan to make a minimal patch for 0.9.1 that would stop error message on
 ""negotiate"" and add logging. I'll try to deal with missing certificates and
 negotiate setting in a more conservative way. If it cannot be done, we can
 suggest to the distros that they use rdp as security layer if they don't
 ship certificates.

 —
 You are receiving this because you commented.


 Reply to this email directly, view it on GitHub
 <#507 (comment)>,
 or mute the thread
 <https://github.com/notifications/unsubscribe-auth/ADTH1F4FEI-yRyLU_j26TzT4tR0OVTkkks5rBwb7gaJpZM4K7c1K>
 .

-- 
Idan Freiberg

PGP FP: 8108 7EC9 806E 4980 75F2  72B3 8AD3 2D04 337B 1F18",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,507,2016-11-24T09:41:59Z,2016-11-28T08:37:41Z,2016-11-29T06:53:37Z,CLOSED,False,103,36,2,https://github.com/proski,"Recognize ""security_layer=negotiate"", improve security layer negotiation",1,[],https://github.com/neutrinolabs/xrdp/pull/507,https://github.com/proski,8,https://github.com/neutrinolabs/xrdp/pull/507#issuecomment-263212207,"This change is bigger than I would like, but it fixes a real issue that created trouble to my colleagues. A smaller change would leave gaps in a critical security code.
Distros are not going to ship generated certificates. It's not secure to have the same certificate on every system. Generation on install has its issues. Not every system knows its external DNS name, which is needed for a proper certificate.
If security_layer=negotiate is used (our new default), the client is OK with RDP and TLS (most clients are), and the certificates are missing (because distros won't ship dummy certificates), the connection would fail. Many users would be affected. Distros may have to change security_layer back to rdp.
Also, the client can force a tls connection onto a server configured to use rdp only. Not good, to put it mildly.
It turns out the code doesn't even know of the ""negotiate"" setting that is our new default! It uses ""hybrid"" and complains about unconfigured security layer. Let's support both.

The documentation has ""negotiate"" for security_layer, but the code used
""hybrid"". Allow both. Treat empty security_layer as ""negotiate"". Log an
error only for unrecognized values of security_layer.
Rewrite xrdp_iso_negotiate_security() to have careful treatment of all
combinations or requested and configured security layers.
Accept only known security layers from the clients. Return
INCONSISTENT_FLAGS in all other cases.
For ""rdp"" on the server and ""tls"" on the client, reject connection and
return SSL_NOT_ALLOWED_BY_SERVER.
For ""negotiate"" (""hybrid"") on both sides, downgrade to RDP quietly if the
certificates are missing. That would allow distros to ship xrdp without
certificates and have it work with hybrid-capable clients.
Log all outcomes, security negotiation is important to be logged.","I went too far with rewriting so much code. Discarding in favor of #509, which is more granular and less intrusive.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,509,2016-11-28T08:35:01Z,2016-11-29T00:51:29Z,2016-11-29T06:52:29Z,MERGED,True,13,5,2,https://github.com/proski,Security level fixes,3,[],https://github.com/neutrinolabs/xrdp/pull/509,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/509,"Fixing some important issues with the security level negotiation.
security_layer=negotiate is not just documented, it's the default now. But the code fails to recognize that. Stop xrdp complaining about its default config file.
Log the security negotiation information - what was requested and what was decided. The only reason I settled for the DEBUG and not INFO level is because we don't have a function to print the flags in human readable format.
Don't select SSL if the SSL keys are missing and both the config file and the client allow RDP connections. Selecting SSL and failing is not a reasonable behavior.","Fixing some important issues with the security level negotiation.
security_layer=negotiate is not just documented, it's the default now. But the code fails to recognize that. Stop xrdp complaining about its default config file.
Log the security negotiation information - what was requested and what was decided. The only reason I settled for the DEBUG and not INFO level is because we don't have a function to print the flags in human readable format.
Don't select SSL if the SSL keys are missing and both the config file and the client allow RDP connections. Selecting SSL and failing is not a reasonable behavior.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,509,2016-11-28T08:35:01Z,2016-11-29T00:51:29Z,2016-11-29T06:52:29Z,MERGED,True,13,5,2,https://github.com/proski,Security level fixes,3,[],https://github.com/neutrinolabs/xrdp/pull/509,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/509#issuecomment-263221200,"Fixing some important issues with the security level negotiation.
security_layer=negotiate is not just documented, it's the default now. But the code fails to recognize that. Stop xrdp complaining about its default config file.
Log the security negotiation information - what was requested and what was decided. The only reason I settled for the DEBUG and not INFO level is because we don't have a function to print the flags in human readable format.
Don't select SSL if the SSL keys are missing and both the config file and the client allow RDP connections. Selecting SSL and failing is not a reasonable behavior.",+1 It's clear what changed.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,509,2016-11-28T08:35:01Z,2016-11-29T00:51:29Z,2016-11-29T06:52:29Z,MERGED,True,13,5,2,https://github.com/proski,Security level fixes,3,[],https://github.com/neutrinolabs/xrdp/pull/509,https://github.com/speidy,3,https://github.com/neutrinolabs/xrdp/pull/509#issuecomment-263221407,"Fixing some important issues with the security level negotiation.
security_layer=negotiate is not just documented, it's the default now. But the code fails to recognize that. Stop xrdp complaining about its default config file.
Log the security negotiation information - what was requested and what was decided. The only reason I settled for the DEBUG and not INFO level is because we don't have a function to print the flags in human readable format.
Don't select SSL if the SSL keys are missing and both the config file and the client allow RDP connections. Selecting SSL and failing is not a reasonable behavior.","+1
בתאריך יום ב׳, 28 בנוב׳ 2016 ב-11:22 מאת metalefty <notifications@github.com
:
 +1 It's clear what changed.

 —
 You are receiving this because you are subscribed to this thread.
 Reply to this email directly, view it on GitHub
 <#509 (comment)>,
 or mute the thread
 <https://github.com/notifications/unsubscribe-auth/ADTH1D5U_9IyiW-VemgUqI0vOZDmsCkkks5rCp07gaJpZM4K9hRC>
 .

-- 
Idan Freiberg

PGP FP: 8108 7EC9 806E 4980 75F2  72B3 8AD3 2D04 337B 1F18",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,512,2016-11-29T05:53:17Z,2016-12-02T06:25:48Z,2016-12-02T06:25:48Z,MERGED,True,50,35,4,https://github.com/speidy,xrdp_encoder: do not initialize for non-UNIX rdp clients,1,[],https://github.com/neutrinolabs/xrdp/pull/512,https://github.com/speidy,1,https://github.com/neutrinolabs/xrdp/pull/512,"add client OS type to client_info
do not initialize xrdp_encoder for non-UNIX platforms for now.

should avoid #508","add client OS type to client_info
do not initialize xrdp_encoder for non-UNIX platforms for now.

should avoid #508",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,512,2016-11-29T05:53:17Z,2016-12-02T06:25:48Z,2016-12-02T06:25:48Z,MERGED,True,50,35,4,https://github.com/speidy,xrdp_encoder: do not initialize for non-UNIX rdp clients,1,[],https://github.com/neutrinolabs/xrdp/pull/512,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/512#issuecomment-263817412,"add client OS type to client_info
do not initialize xrdp_encoder for non-UNIX platforms for now.

should avoid #508",I think it's merge ready.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,513,2016-11-29T17:29:10Z,2016-12-09T00:44:58Z,2016-12-09T02:24:25Z,MERGED,True,30,0,2,https://github.com/proski,Disable privilege elevation by setuid for the X server,1,[],https://github.com/neutrinolabs/xrdp/pull/513,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/513,"The solution is not universal, but handy anyway, and it improves security. Using PR_SET_NO_NEW_PRIVS ensures that the setuid bit on Xorg would be ignored. Xorg can fail if run with root permissions, but the original user has no console access, as reported by PAM.
Tested on AWS t2.micro with Amazon Linux 2016.09.","The solution is not universal, but handy anyway, and it improves security. Using PR_SET_NO_NEW_PRIVS ensures that the setuid bit on Xorg would be ignored. Xorg can fail if run with root permissions, but the original user has no console access, as reported by PAM.
Tested on AWS t2.micro with Amazon Linux 2016.09.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,513,2016-11-29T17:29:10Z,2016-12-09T00:44:58Z,2016-12-09T02:24:25Z,MERGED,True,30,0,2,https://github.com/proski,Disable privilege elevation by setuid for the X server,1,[],https://github.com/neutrinolabs/xrdp/pull/513,https://github.com/Natureshadow,2,https://github.com/neutrinolabs/xrdp/pull/513#issuecomment-263640906,"The solution is not universal, but handy anyway, and it improves security. Using PR_SET_NO_NEW_PRIVS ensures that the setuid bit on Xorg would be ignored. Xorg can fail if run with root permissions, but the original user has no console access, as reported by PAM.
Tested on AWS t2.micro with Amazon Linux 2016.09.","The solution is not universal, but handy anyway, and it improves
security.
Umm…

I figure the setuid is there for a reason. It is needed when consolekit is not available and there is no other way to get console access.

Or I get it wrong.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,513,2016-11-29T17:29:10Z,2016-12-09T00:44:58Z,2016-12-09T02:24:25Z,MERGED,True,30,0,2,https://github.com/proski,Disable privilege elevation by setuid for the X server,1,[],https://github.com/neutrinolabs/xrdp/pull/513,https://github.com/proski,3,https://github.com/neutrinolabs/xrdp/pull/513#issuecomment-263642217,"The solution is not universal, but handy anyway, and it improves security. Using PR_SET_NO_NEW_PRIVS ensures that the setuid bit on Xorg would be ignored. Xorg can fail if run with root permissions, but the original user has no console access, as reported by PAM.
Tested on AWS t2.micro with Amazon Linux 2016.09.",Root access is needed to access the the GPU. xorgxrdp doesn't need it.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,513,2016-11-29T17:29:10Z,2016-12-09T00:44:58Z,2016-12-09T02:24:25Z,MERGED,True,30,0,2,https://github.com/proski,Disable privilege elevation by setuid for the X server,1,[],https://github.com/neutrinolabs/xrdp/pull/513,https://github.com/Natureshadow,4,https://github.com/neutrinolabs/xrdp/pull/513#issuecomment-263642566,"The solution is not universal, but handy anyway, and it improves security. Using PR_SET_NO_NEW_PRIVS ensures that the setuid bit on Xorg would be ignored. Xorg can fail if run with root permissions, but the original user has no console access, as reported by PAM.
Tested on AWS t2.micro with Amazon Linux 2016.09.","Root access is needed to access the the GPU. xorgxrdp doesn't need it.
OK… That would be great!",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,513,2016-11-29T17:29:10Z,2016-12-09T00:44:58Z,2016-12-09T02:24:25Z,MERGED,True,30,0,2,https://github.com/proski,Disable privilege elevation by setuid for the X server,1,[],https://github.com/neutrinolabs/xrdp/pull/513,https://github.com/metalefty,5,https://github.com/neutrinolabs/xrdp/pull/513#issuecomment-264397501,"The solution is not universal, but handy anyway, and it improves security. Using PR_SET_NO_NEW_PRIVS ensures that the setuid bit on Xorg would be ignored. Xorg can fail if run with root permissions, but the original user has no console access, as reported by PAM.
Tested on AWS t2.micro with Amazon Linux 2016.09.","In conclusion, merging this PR and remove -logfile /dev/null from Xorg option will work?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,513,2016-11-29T17:29:10Z,2016-12-09T00:44:58Z,2016-12-09T02:24:25Z,MERGED,True,30,0,2,https://github.com/proski,Disable privilege elevation by setuid for the X server,1,[],https://github.com/neutrinolabs/xrdp/pull/513,https://github.com/proski,6,https://github.com/neutrinolabs/xrdp/pull/513#issuecomment-264502096,"The solution is not universal, but handy anyway, and it improves security. Using PR_SET_NO_NEW_PRIVS ensures that the setuid bit on Xorg would be ignored. Xorg can fail if run with root permissions, but the original user has no console access, as reported by PAM.
Tested on AWS t2.micro with Amazon Linux 2016.09.","No, it will break RHEL 6, where Xorg would try to write the log to /var/log regardless of any XDG variables. If we want a simple solution for now, we can do this:
param=-logfile
param=.xorgxrdp.%s.log

It would create files like ~/.xorgxrdp.10.log in the home directory. Hidden files in the home directory are not that bad as non-hidden ones. That would give us two benefits:

setuid Xorg would not object against using absolute log path if OS is not Linux or if Linux kernel is older than 3.5
The logs would not be discarded, which is important for the first ever release of xorgxrdp

I'll make a PR for that.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,513,2016-11-29T17:29:10Z,2016-12-09T00:44:58Z,2016-12-09T02:24:25Z,MERGED,True,30,0,2,https://github.com/proski,Disable privilege elevation by setuid for the X server,1,[],https://github.com/neutrinolabs/xrdp/pull/513,https://github.com/proski,7,https://github.com/neutrinolabs/xrdp/pull/513#issuecomment-264508706,"The solution is not universal, but handy anyway, and it improves security. Using PR_SET_NO_NEW_PRIVS ensures that the setuid bit on Xorg would be ignored. Xorg can fail if run with root permissions, but the original user has no console access, as reported by PAM.
Tested on AWS t2.micro with Amazon Linux 2016.09.",Patch for log path submitted as #521,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,513,2016-11-29T17:29:10Z,2016-12-09T00:44:58Z,2016-12-09T02:24:25Z,MERGED,True,30,0,2,https://github.com/proski,Disable privilege elevation by setuid for the X server,1,[],https://github.com/neutrinolabs/xrdp/pull/513,https://github.com/metalefty,8,https://github.com/neutrinolabs/xrdp/pull/513#issuecomment-264791754,"The solution is not universal, but handy anyway, and it improves security. Using PR_SET_NO_NEW_PRIVS ensures that the setuid bit on Xorg would be ignored. Xorg can fail if run with root permissions, but the original user has no console access, as reported by PAM.
Tested on AWS t2.micro with Amazon Linux 2016.09.","Awesome, it looks good to me. Let's include this to 0.9.1.
$ ls -l /usr/bin/Xorg
-rwsr-xr-x. 1 root root 2397160 Nov 20  2015 /usr/bin/Xorg
$ ps uxaww|grep Xorg
osc      15474  0.2  1.7 221088 32060 ?        Sl   17:11   0:00 Xorg :10 -config xrdp/xorg.conf -noreset -nolisten tcp -logfile .xorgxrdp.%s.log",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,513,2016-11-29T17:29:10Z,2016-12-09T00:44:58Z,2016-12-09T02:24:25Z,MERGED,True,30,0,2,https://github.com/proski,Disable privilege elevation by setuid for the X server,1,[],https://github.com/neutrinolabs/xrdp/pull/513,https://github.com/metalefty,9,https://github.com/neutrinolabs/xrdp/pull/513#issuecomment-265637163,"The solution is not universal, but handy anyway, and it improves security. Using PR_SET_NO_NEW_PRIVS ensures that the setuid bit on Xorg would be ignored. Xorg can fail if run with root permissions, but the original user has no console access, as reported by PAM.
Tested on AWS t2.micro with Amazon Linux 2016.09.","If no objections, I'll merge this in 24 hours.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,514,2016-11-30T01:17:26Z,2016-11-30T09:43:06Z,2016-12-27T04:15:35Z,MERGED,True,13,6,2,https://github.com/proski,"Find openssl by pkg-config, add -ldl if needed",2,[],https://github.com/neutrinolabs/xrdp/pull/514,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/514,"I checked OpenSSL as far back as 0.9.8e, and it has the openssl.pc file (generated by Makefile). The oldest supported version is 1.0.1u.
Some systems need -ldl to use dlopen(). libcommon calls dlopen(), it should not rely on other libraries linking -ldl.","I checked OpenSSL as far back as 0.9.8e, and it has the openssl.pc file (generated by Makefile). The oldest supported version is 1.0.1u.
Some systems need -ldl to use dlopen(). libcommon calls dlopen(), it should not rely on other libraries linking -ldl.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,514,2016-11-30T01:17:26Z,2016-11-30T09:43:06Z,2016-12-27T04:15:35Z,MERGED,True,13,6,2,https://github.com/proski,"Find openssl by pkg-config, add -ldl if needed",2,[],https://github.com/neutrinolabs/xrdp/pull/514,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/514#issuecomment-269258996,"I checked OpenSSL as far back as 0.9.8e, and it has the openssl.pc file (generated by Makefile). The oldest supported version is 1.0.1u.
Some systems need -ldl to use dlopen(). libcommon calls dlopen(), it should not rely on other libraries linking -ldl.","I didn't notice that FreeBSD base doesn't supply *.pc files. Still have to use old style to discover OpenSSL for FreeBSD.  If users intentionally installed non default version of OpenSSL, *.pc files are supplied.
I'll create a patch later, or patch to configure.ac FreeBSD locally.
This is well known issue of FreeBSD.
libgit2/libgit2#2118
http://empt1e.blogspot.jp/2011/05/dealing-with-pkg-config-detection-of.html",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,514,2016-11-30T01:17:26Z,2016-11-30T09:43:06Z,2016-12-27T04:15:35Z,MERGED,True,13,6,2,https://github.com/proski,"Find openssl by pkg-config, add -ldl if needed",2,[],https://github.com/neutrinolabs/xrdp/pull/514,https://github.com/proski,3,https://github.com/neutrinolabs/xrdp/pull/514#issuecomment-269267209,"I checked OpenSSL as far back as 0.9.8e, and it has the openssl.pc file (generated by Makefile). The oldest supported version is 1.0.1u.
Some systems need -ldl to use dlopen(). libcommon calls dlopen(), it should not rely on other libraries linking -ldl.","That's unfortunate. I would have considered delaying this patch. Anyway, it's an issue with FreeBSD that should be reported to FreeBSD maintainers.
Fortunately, it should not be necessary to patch configure.ac or any other file. All that's needed is to specify OPENSSL_CFLAGS and OPENSSL_LIBS on the configure command line, and that will skip the pkg-config check in configure. The same applies to all pkg-config checks.
Interestingly, the situation on MacOS is the opposite. The openssl.pc file is present, but the headers are missing and not available from Apple. The fix is to install another copy of openssl from Homebrew and set PKG_CONFIG_PATH to the directory where the Homebrew version of openssl.pc is located.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,515,2016-11-30T07:20:37Z,2017-03-19T09:22:40Z,2017-03-24T07:55:50Z,CLOSED,False,20,10,2,https://github.com/speidy,Log client computer name in xrdp log,2,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/515,https://github.com/speidy,1,https://github.com/neutrinolabs/xrdp/pull/515,resolves #500,resolves #500,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,515,2016-11-30T07:20:37Z,2017-03-19T09:22:40Z,2017-03-24T07:55:50Z,CLOSED,False,20,10,2,https://github.com/speidy,Log client computer name in xrdp log,2,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/515,https://github.com/proski,2,https://github.com/neutrinolabs/xrdp/pull/515#issuecomment-286921765,resolves #500,"OK, thank you for adding constants. But I think sizeof() would be more appropriate if it can be used.
I looked at unicode_in source, it's one huge hack. It takes the lower byte and throws away the upper byte. I believe the correct behavior would be to convert from UTF-16 to UTF-8.
Having three different limits as arguments to unicode_in seems inelegant, but I think all three would be meaningful if proper conversion is implemented. Actually, they would be more meaningful than they are now.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,515,2016-11-30T07:20:37Z,2017-03-19T09:22:40Z,2017-03-24T07:55:50Z,CLOSED,False,20,10,2,https://github.com/speidy,Log client computer name in xrdp log,2,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/515,https://github.com/speidy,3,https://github.com/neutrinolabs/xrdp/pull/515#issuecomment-286922157,resolves #500,"I agree unicode_in() is a dirty hack.
We can probably use some standard library function for that. (maybe iconv)",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,515,2016-11-30T07:20:37Z,2017-03-19T09:22:40Z,2017-03-24T07:55:50Z,CLOSED,False,20,10,2,https://github.com/speidy,Log client computer name in xrdp log,2,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/515,https://github.com/speidy,4,https://github.com/neutrinolabs/xrdp/pull/515#issuecomment-286926418,resolves #500,let me fix unicode_in in a separate patch.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,515,2016-11-30T07:20:37Z,2017-03-19T09:22:40Z,2017-03-24T07:55:50Z,CLOSED,False,20,10,2,https://github.com/speidy,Log client computer name in xrdp log,2,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/515,https://github.com/proski,5,https://github.com/neutrinolabs/xrdp/pull/515#issuecomment-287517190,resolves #500,"@speidy It would be great to get unicode_in() fixed. It may give us a better understanding what arguments it should take.
Is it really ever needed to limit the number of Unicode characters (codepoints) that can be processed? I think it's not a useful limitation. The RDP protocol should be agnostic to such details.
The protocol should specify the encoding and the byte size of the string. For example, the encoding is UTF-16 and the string is 512 bytes long. When we decode UTF-16 into UTF-8, the caller should provide an output buffer.
It is reasonable to stop in the input buffer or the output buffer is exhausted. But is it ever needed to stop after processing some number of Unicode codepoints if both the input and the output buffers are not exhausted?
Admittedly, I don't know how non-terminated strings are processed. If their length specified in bytes or in Unicode codepoints?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,515,2016-11-30T07:20:37Z,2017-03-19T09:22:40Z,2017-03-24T07:55:50Z,CLOSED,False,20,10,2,https://github.com/speidy,Log client computer name in xrdp log,2,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/515,https://github.com/speidy,6,https://github.com/neutrinolabs/xrdp/pull/515#issuecomment-287521738,resolves #500,"It's not UTF16 but Unicode, notice that the RDP protocol, was first implemented to Windows platform. where in windows sizeof(wchar_t) == 2 not 4. So we assume 2 bytes for those wide-chars on the wire.
Fixing unicode_in will probably clean up that part of code, that was written before the docs were out.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,515,2016-11-30T07:20:37Z,2017-03-19T09:22:40Z,2017-03-24T07:55:50Z,CLOSED,False,20,10,2,https://github.com/speidy,Log client computer name in xrdp log,2,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/515,https://github.com/proski,7,https://github.com/neutrinolabs/xrdp/pull/515#issuecomment-287523182,resolves #500,"UTF-16 is an encoding for Unicode. Unicode itself is not an encoding. Another possibility is UCS-2 encoding, it also has 2 bytes on the wire for ASCII characters, but it has no surrogates to represent codepoints above 0xffff.
Unless there is a clear indication that the encoding in USC-2, I think it's safer to assume UTF-16 and handle surrogates.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,515,2016-11-30T07:20:37Z,2017-03-19T09:22:40Z,2017-03-24T07:55:50Z,CLOSED,False,20,10,2,https://github.com/speidy,Log client computer name in xrdp log,2,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/515,https://github.com/jsorg71,8,https://github.com/neutrinolabs/xrdp/pull/515#issuecomment-287523619,resolves #500,I think MS Unicode is UCS-2.  I have seen some clams that it's UTF-16.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,515,2016-11-30T07:20:37Z,2017-03-19T09:22:40Z,2017-03-24T07:55:50Z,CLOSED,False,20,10,2,https://github.com/speidy,Log client computer name in xrdp log,2,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/515,https://github.com/speidy,9,https://github.com/neutrinolabs/xrdp/pull/515#issuecomment-287604142,resolves #500,"I made a new PR for this #699
Closing this one now.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,516,2016-11-30T09:48:20Z,2016-12-02T17:22:04Z,2016-12-08T01:40:53Z,MERGED,True,2,3182,6,https://github.com/metalefty,Adjust Japanese keymaps,3,[],https://github.com/neutrinolabs/xrdp/pull/516,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/516,"Whichever v0.9.1 or later is ok.

unify km-*0411.ini into km-00000411.ini as they're identical and no longer need to duplicate them after
commit 5725200
apply changes introduced in #394 to dump-keymaps.sh","Whichever v0.9.1 or later is ok.

unify km-*0411.ini into km-00000411.ini as they're identical and no longer need to duplicate them after
commit 5725200
apply changes introduced in #394 to dump-keymaps.sh",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,516,2016-11-30T09:48:20Z,2016-12-02T17:22:04Z,2016-12-08T01:40:53Z,MERGED,True,2,3182,6,https://github.com/metalefty,Adjust Japanese keymaps,3,[],https://github.com/neutrinolabs/xrdp/pull/516,https://github.com/proski,2,https://github.com/neutrinolabs/xrdp/pull/516#issuecomment-264385327,"Whichever v0.9.1 or later is ok.

unify km-*0411.ini into km-00000411.ini as they're identical and no longer need to duplicate them after
commit 5725200
apply changes introduced in #394 to dump-keymaps.sh","The removal of the duplicate files is good. But please make sure to remove them from xrdp_keyboard.ini as well. Make sure there are no other references to those files.
Changes to genkeymap should not have any effect on the end users per se. Does genkeymap generate a better keymap with pc105? Can you update the keymap?
Would any users benefit from the original keymap? Can it be kept as a variant? Maybe that's a veriant we want to keep?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,516,2016-11-30T09:48:20Z,2016-12-02T17:22:04Z,2016-12-08T01:40:53Z,MERGED,True,2,3182,6,https://github.com/metalefty,Adjust Japanese keymaps,3,[],https://github.com/neutrinolabs/xrdp/pull/516,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/516#issuecomment-264396117,"Whichever v0.9.1 or later is ok.

unify km-*0411.ini into km-00000411.ini as they're identical and no longer need to duplicate them after
commit 5725200
apply changes introduced in #394 to dump-keymaps.sh","Ah, yes. I just forgot removing them from xrdp_keyboard.ini.
The output between
setxkbmap -model jp106 -layout jp -variant OADG109A
./xrdp-genkeymap ../instfiles/km-00000411.ini

and
setxkbmap -model pc105 -layout jp -variant OADG109A
./xrdp-genkeymap ../instfiles/km-00000411.ini

has no difference so I didn't update it.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,516,2016-11-30T09:48:20Z,2016-12-02T17:22:04Z,2016-12-08T01:40:53Z,MERGED,True,2,3182,6,https://github.com/metalefty,Adjust Japanese keymaps,3,[],https://github.com/neutrinolabs/xrdp/pull/516,https://github.com/proski,4,https://github.com/neutrinolabs/xrdp/pull/516#issuecomment-264509001,"Whichever v0.9.1 or later is ok.

unify km-*0411.ini into km-00000411.ini as they're identical and no longer need to duplicate them after
commit 5725200
apply changes introduced in #394 to dump-keymaps.sh",Looks good to me now,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,517,2016-12-01T06:15:22Z,2016-12-02T02:44:23Z,2016-12-02T03:52:01Z,MERGED,True,1,0,1,https://github.com/proski,Add g++ to the list of compilers for Travis CI,1,[],https://github.com/neutrinolabs/xrdp/pull/517,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/517,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,518,2016-12-02T04:03:51Z,2016-12-03T11:24:10Z,2016-12-05T03:37:46Z,MERGED,True,4,0,1,https://github.com/proski,"Provide reasonable hTotal, vTotal and dotClock for the display mode",1,[],https://github.com/neutrinolabs/xrdp/pull/518,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/518,"gtk3 programs crash when they divide dotClock by hTotal and vTotal to
calculate the refresh rate.","gtk3 programs crash when they divide dotClock by hTotal and vTotal to
calculate the refresh rate.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,518,2016-12-02T04:03:51Z,2016-12-03T11:24:10Z,2016-12-05T03:37:46Z,MERGED,True,4,0,1,https://github.com/proski,"Provide reasonable hTotal, vTotal and dotClock for the display mode",1,[],https://github.com/neutrinolabs/xrdp/pull/518,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/518#issuecomment-264370102,"gtk3 programs crash when they divide dotClock by hTotal and vTotal to
calculate the refresh rate.",+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,521,2016-12-02T17:16:25Z,2016-12-09T00:45:47Z,2016-12-09T02:24:01Z,MERGED,True,1,1,1,https://github.com/proski,Change default Xorg logfile to .xorgxrdp.%s.log,1,[],https://github.com/neutrinolabs/xrdp/pull/521,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/521,"The log file is created in the home directory, %s is replaced with the
display number (e.g. 10).
If Xorg is run setuid root, it can refuse to run if the log path is
absolute.","The log file is created in the home directory, %s is replaced with the
display number (e.g. 10).
If Xorg is run setuid root, it can refuse to run if the log path is
absolute.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,521,2016-12-02T17:16:25Z,2016-12-09T00:45:47Z,2016-12-09T02:24:01Z,MERGED,True,1,1,1,https://github.com/proski,Change default Xorg logfile to .xorgxrdp.%s.log,1,[],https://github.com/neutrinolabs/xrdp/pull/521,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/521#issuecomment-265900575,"The log file is created in the home directory, %s is replaced with the
display number (e.g. 10).
If Xorg is run setuid root, it can refuse to run if the log path is
absolute.",This should be merged together with #513.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,522,2016-12-03T06:18:25Z,2016-12-16T21:37:45Z,2016-12-16T21:37:45Z,CLOSED,False,914,180,14,https://github.com/proski,[Review only] noorders,29,[],https://github.com/neutrinolabs/xrdp/pull/522,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/522,"This is not my code. I'm submitting this branch so that we have an option to examine the changes and comment on them now. It's a big change that requires careful review.
I want to make sure everybody is fine with the subpackage approach. It means that xrdp will be distributed with the libpainter code. There would be an option to distribute libpainter separately as well.","This is not my code. I'm submitting this branch so that we have an option to examine the changes and comment on them now. It's a big change that requires careful review.
I want to make sure everybody is fine with the subpackage approach. It means that xrdp will be distributed with the libpainter code. There would be an option to distribute libpainter separately as well.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,522,2016-12-03T06:18:25Z,2016-12-16T21:37:45Z,2016-12-16T21:37:45Z,CLOSED,False,914,180,14,https://github.com/proski,[Review only] noorders,29,[],https://github.com/neutrinolabs/xrdp/pull/522,https://github.com/proski,2,https://github.com/neutrinolabs/xrdp/pull/522#issuecomment-264687778,"This is not my code. I'm submitting this branch so that we have an option to examine the changes and comment on them now. It's a big change that requires careful review.
I want to make sure everybody is fine with the subpackage approach. It means that xrdp will be distributed with the libpainter code. There would be an option to distribute libpainter separately as well.","Indeed, the change to .travis.yml was unneeded. I removed it.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,522,2016-12-03T06:18:25Z,2016-12-16T21:37:45Z,2016-12-16T21:37:45Z,CLOSED,False,914,180,14,https://github.com/proski,[Review only] noorders,29,[],https://github.com/neutrinolabs/xrdp/pull/522,https://github.com/jsorg71,3,https://github.com/neutrinolabs/xrdp/pull/522#issuecomment-266184463,"This is not my code. I'm submitting this branch so that we have an option to examine the changes and comment on them now. It's a big change that requires careful review.
I want to make sure everybody is fine with the subpackage approach. It means that xrdp will be distributed with the libpainter code. There would be an option to distribute libpainter separately as well.",I'm planning to break this up and make new PRs.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,522,2016-12-03T06:18:25Z,2016-12-16T21:37:45Z,2016-12-16T21:37:45Z,CLOSED,False,914,180,14,https://github.com/proski,[Review only] noorders,29,[],https://github.com/neutrinolabs/xrdp/pull/522,https://github.com/proski,4,https://github.com/neutrinolabs/xrdp/pull/522#issuecomment-266352769,"This is not my code. I'm submitting this branch so that we have an option to examine the changes and comment on them now. It's a big change that requires careful review.
I want to make sure everybody is fine with the subpackage approach. It means that xrdp will be distributed with the libpainter code. There would be an option to distribute libpainter separately as well.","Rebased on top of the current devel branch, Unicode input has been merged already.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,522,2016-12-03T06:18:25Z,2016-12-16T21:37:45Z,2016-12-16T21:37:45Z,CLOSED,False,914,180,14,https://github.com/proski,[Review only] noorders,29,[],https://github.com/neutrinolabs/xrdp/pull/522,https://github.com/proski,5,https://github.com/neutrinolabs/xrdp/pull/522#issuecomment-267701950,"This is not my code. I'm submitting this branch so that we have an option to examine the changes and comment on them now. It's a big change that requires careful review.
I want to make sure everybody is fine with the subpackage approach. It means that xrdp will be distributed with the libpainter code. There would be an option to distribute libpainter separately as well.","Closing, it's out of date",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,523,2016-12-04T08:11:01Z,2016-12-06T22:49:36Z,2018-05-24T07:11:27Z,MERGED,True,167,85,14,https://github.com/jsorg71,vnc: change password file to use guid hash,3,[],https://github.com/neutrinolabs/xrdp/pull/523,https://github.com/jsorg71,1,https://github.com/neutrinolabs/xrdp/pull/523,This is cleanup of vncpassfile branch,This is cleanup of vncpassfile branch,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,523,2016-12-04T08:11:01Z,2016-12-06T22:49:36Z,2018-05-24T07:11:27Z,MERGED,True,167,85,14,https://github.com/jsorg71,vnc: change password file to use guid hash,3,[],https://github.com/neutrinolabs/xrdp/pull/523,https://github.com/proski,2,https://github.com/neutrinolabs/xrdp/pull/523#issuecomment-264726377,This is cleanup of vncpassfile branch,I checked the patch on Fedora 25. I cannot reconnect to an existing VNC session. I use FreeRDP without autologin. I get authentication failure.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,523,2016-12-04T08:11:01Z,2016-12-06T22:49:36Z,2018-05-24T07:11:27Z,MERGED,True,167,85,14,https://github.com/jsorg71,vnc: change password file to use guid hash,3,[],https://github.com/neutrinolabs/xrdp/pull/523,https://github.com/jsorg71,3,https://github.com/neutrinolabs/xrdp/pull/523#issuecomment-264748314,This is cleanup of vncpassfile branch,@proski I think the VNC reconnect issue is fixed.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,523,2016-12-04T08:11:01Z,2016-12-06T22:49:36Z,2018-05-24T07:11:27Z,MERGED,True,167,85,14,https://github.com/jsorg71,vnc: change password file to use guid hash,3,[],https://github.com/neutrinolabs/xrdp/pull/523,https://github.com/proski,4,https://github.com/neutrinolabs/xrdp/pull/523#issuecomment-264784697,This is cleanup of vncpassfile branch,"The reconnect issue is fixed. The warning is fixed. But I have found another issue. I cannot login to the Xvnc session if --enable-ipv6 was used to configure xrdp. I'm connecting from Mac OSX Sierra to RHEL 6. The clients are freerdp, MS RDP and MS RDP Beta. Both manual login and autologin fail.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,523,2016-12-04T08:11:01Z,2016-12-06T22:49:36Z,2018-05-24T07:11:27Z,MERGED,True,167,85,14,https://github.com/jsorg71,vnc: change password file to use guid hash,3,[],https://github.com/neutrinolabs/xrdp/pull/523,https://github.com/metalefty,5,https://github.com/neutrinolabs/xrdp/pull/523#issuecomment-264788749,This is cleanup of vncpassfile branch,"It works for me.  FreeRDP to CentOS 7.
$ rpm -qa |grep xrdp-
xorg-x11-drv-xrdp-0.9.0.git822e3b8+devel-1.el7.centos.x86_64
xrdp-0.9.0.gitf14e3dc+vpf-1.el7.centos.x86_64

[20161205-16:51:00] [INFO ] A connection received from ::1 port 57936
[20161205-16:51:01] [INFO ] ++ created session (access granted): username osc, ip 0.0.0.0:45798 - socket: 12
[20161205-16:51:01] [INFO ] starting Xvnc session...
[20161205-16:51:01] [DEBUG] Closed socket 9 (AF_INET6 :::5910)
[20161205-16:51:01] [DEBUG] Closed socket 9 (AF_INET6 :::6010)
[20161205-16:51:01] [DEBUG] Closed socket 9 (AF_INET6 :::6210)
[20161205-16:51:01] [DEBUG] Closed socket 7 (AF_INET6 ::1:3350)
[20161205-16:51:01] [DEBUG] Closed socket 8 (AF_INET6 ::1:3350)
[20161205-16:51:01] [INFO ] Xvnc :10 -geometry 1024x768 -depth 16 -rfbauth /home/osc/.vnc/sesman_osc_passwd -bs -nolisten tcp -localhost -dpi 96
[20161205-16:51:01] [INFO ] starting xrdp-sessvc - xpid=2300 - wmpid=2299",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,523,2016-12-04T08:11:01Z,2016-12-06T22:49:36Z,2018-05-24T07:11:27Z,MERGED,True,167,85,14,https://github.com/jsorg71,vnc: change password file to use guid hash,3,[],https://github.com/neutrinolabs/xrdp/pull/523,https://github.com/proski,6,https://github.com/neutrinolabs/xrdp/pull/523#issuecomment-264915979,This is cleanup of vncpassfile branch,"I was able to reproduce the VNC authentication problem without this patch, with the unchanged devel branch. I'll create a separate issue for that.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,523,2016-12-04T08:11:01Z,2016-12-06T22:49:36Z,2018-05-24T07:11:27Z,MERGED,True,167,85,14,https://github.com/jsorg71,vnc: change password file to use guid hash,3,[],https://github.com/neutrinolabs/xrdp/pull/523,https://github.com/jsorg71,7,https://github.com/neutrinolabs/xrdp/pull/523#issuecomment-265087998,This is cleanup of vncpassfile branch,so we are good for this PR? any objections?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,523,2016-12-04T08:11:01Z,2016-12-06T22:49:36Z,2018-05-24T07:11:27Z,MERGED,True,167,85,14,https://github.com/jsorg71,vnc: change password file to use guid hash,3,[],https://github.com/neutrinolabs/xrdp/pull/523,https://github.com/metalefty,8,https://github.com/neutrinolabs/xrdp/pull/523#issuecomment-265091369,This is cleanup of vncpassfile branch,LGTM,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,523,2016-12-04T08:11:01Z,2016-12-06T22:49:36Z,2018-05-24T07:11:27Z,MERGED,True,167,85,14,https://github.com/jsorg71,vnc: change password file to use guid hash,3,[],https://github.com/neutrinolabs/xrdp/pull/523,https://github.com/proski,9,https://github.com/neutrinolabs/xrdp/pull/523#issuecomment-265245118,This is cleanup of vncpassfile branch,No objections on my part. Let's merge.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,523,2016-12-04T08:11:01Z,2016-12-06T22:49:36Z,2018-05-24T07:11:27Z,MERGED,True,167,85,14,https://github.com/jsorg71,vnc: change password file to use guid hash,3,[],https://github.com/neutrinolabs/xrdp/pull/523,https://github.com/jsorg71,10,https://github.com/neutrinolabs/xrdp/pull/523#issuecomment-265260176,This is cleanup of vncpassfile branch,I merged this but the github server crashed at the same time but it looks like it merged.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,525,2016-12-04T20:18:12Z,2016-12-04T20:18:24Z,2016-12-04T20:18:24Z,CLOSED,False,3,3,2,https://github.com/proski,"Make confugire show it's looking for ""pixman"", not ""xrdp_pixman""",1,[],https://github.com/neutrinolabs/xrdp/pull/525,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/525,"The pixman library in not part of xrdp. If users see that ""xrdp_pixman""
is not found, they might assume it is some xrdp specific library.
The Automake conditional is still XRDP_PIXMAN, but the pkg-config
variables become PIXMAN_LIBS and PIXMAN_CFLAGS.","The pixman library in not part of xrdp. If users see that ""xrdp_pixman""
is not found, they might assume it is some xrdp specific library.
The Automake conditional is still XRDP_PIXMAN, but the pkg-config
variables become PIXMAN_LIBS and PIXMAN_CFLAGS.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,526,2016-12-04T20:20:00Z,2016-12-05T07:25:20Z,2016-12-06T16:38:14Z,MERGED,True,3,3,2,https://github.com/proski,"Make configure show it's looking for ""pixman"", not ""xrdp_pixman""",1,[],https://github.com/neutrinolabs/xrdp/pull/526,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/526,"The pixman library in not part of xrdp. If users see that ""xrdp_pixman""
is not found, they might assume it is some xrdp specific library.
The Automake conditional is still XRDP_PIXMAN, but the pkg-config
variables become PIXMAN_LIBS and PIXMAN_CFLAGS.","The pixman library in not part of xrdp. If users see that ""xrdp_pixman""
is not found, they might assume it is some xrdp specific library.
The Automake conditional is still XRDP_PIXMAN, but the pkg-config
variables become PIXMAN_LIBS and PIXMAN_CFLAGS.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,526,2016-12-04T20:20:00Z,2016-12-05T07:25:20Z,2016-12-06T16:38:14Z,MERGED,True,3,3,2,https://github.com/proski,"Make configure show it's looking for ""pixman"", not ""xrdp_pixman""",1,[],https://github.com/neutrinolabs/xrdp/pull/526,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/526#issuecomment-264749127,"The pixman library in not part of xrdp. If users see that ""xrdp_pixman""
is not found, they might assume it is some xrdp specific library.
The Automake conditional is still XRDP_PIXMAN, but the pkg-config
variables become PIXMAN_LIBS and PIXMAN_CFLAGS.",+1 I think this can be included to 0.9.1.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,526,2016-12-04T20:20:00Z,2016-12-05T07:25:20Z,2016-12-06T16:38:14Z,MERGED,True,3,3,2,https://github.com/proski,"Make configure show it's looking for ""pixman"", not ""xrdp_pixman""",1,[],https://github.com/neutrinolabs/xrdp/pull/526,https://github.com/jsorg71,3,https://github.com/neutrinolabs/xrdp/pull/526#issuecomment-264749304,"The pixman library in not part of xrdp. If users see that ""xrdp_pixman""
is not found, they might assume it is some xrdp specific library.
The Automake conditional is still XRDP_PIXMAN, but the pkg-config
variables become PIXMAN_LIBS and PIXMAN_CFLAGS.",+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,528,2016-12-06T17:39:37Z,2016-12-06T22:49:35Z,2016-12-06T23:07:57Z,MERGED,True,7,1,2,https://github.com/proski,"Document xserverbpp, add it to Xvnc section, remove from Xorg section",1,[],https://github.com/neutrinolabs/xrdp/pull/528,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/528,"xserverbpp affects X11rdp and Xvnc, but not Xorg. No need to have xserverbpp in the Xorg section where it has no effect. Add commented out xserverbpp to Xvnc, some users may want to experiment with that setting.","xserverbpp affects X11rdp and Xvnc, but not Xorg. No need to have xserverbpp in the Xorg section where it has no effect. Add commented out xserverbpp to Xvnc, some users may want to experiment with that setting.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,529,2016-12-08T08:11:56Z,2016-12-11T13:31:03Z,2016-12-11T16:23:10Z,MERGED,True,1,1,1,https://github.com/proski,Fix support for 32-bpp clients connecting to 16-bpp VNC,1,[],https://github.com/neutrinolabs/xrdp/pull/529,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/529,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,529,2016-12-08T08:11:56Z,2016-12-11T13:31:03Z,2016-12-11T16:23:10Z,MERGED,True,1,1,1,https://github.com/proski,Fix support for 32-bpp clients connecting to 16-bpp VNC,1,[],https://github.com/neutrinolabs/xrdp/pull/529,https://github.com/proski,2,https://github.com/neutrinolabs/xrdp/pull/529#issuecomment-265796665,,"The original patch was longer. After careful testing and code reading, I was able to reduce it to a one line change. With this patch, the Xvnc backend supports all combinations of server and client color depth.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,529,2016-12-08T08:11:56Z,2016-12-11T13:31:03Z,2016-12-11T16:23:10Z,MERGED,True,1,1,1,https://github.com/proski,Fix support for 32-bpp clients connecting to 16-bpp VNC,1,[],https://github.com/neutrinolabs/xrdp/pull/529,https://github.com/jsorg71,3,https://github.com/neutrinolabs/xrdp/pull/529#issuecomment-266245064,,+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,529,2016-12-08T08:11:56Z,2016-12-11T13:31:03Z,2016-12-11T16:23:10Z,MERGED,True,1,1,1,https://github.com/proski,Fix support for 32-bpp clients connecting to 16-bpp VNC,1,[],https://github.com/neutrinolabs/xrdp/pull/529,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/529#issuecomment-266277593,,It's a simple fix so I think we can include this to 0.9.1. Add a milestone.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,531,2016-12-09T00:28:14Z,2016-12-16T05:26:41Z,2016-12-24T23:05:31Z,MERGED,True,78,39,5,https://github.com/speidy,xrdp_encoder: make RemoteFX work with MSTSC client,11,[],https://github.com/neutrinolabs/xrdp/pull/531,https://github.com/speidy,1,https://github.com/neutrinolabs/xrdp/pull/531,should resolve #508 #358,should resolve #508 #358,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,531,2016-12-09T00:28:14Z,2016-12-16T05:26:41Z,2016-12-24T23:05:31Z,MERGED,True,78,39,5,https://github.com/speidy,xrdp_encoder: make RemoteFX work with MSTSC client,11,[],https://github.com/neutrinolabs/xrdp/pull/531,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/531#issuecomment-265899263,should resolve #508 #358,fe79815 and 8802920 should be squashed. Then can be completely removed from this PR.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,531,2016-12-09T00:28:14Z,2016-12-16T05:26:41Z,2016-12-24T23:05:31Z,MERGED,True,78,39,5,https://github.com/speidy,xrdp_encoder: make RemoteFX work with MSTSC client,11,[],https://github.com/neutrinolabs/xrdp/pull/531,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/531#issuecomment-265917906,should resolve #508 #358,"I tested this PR but I still get blank screen. Client is mstsc.exe of Windows 10.
xrdp_process_capset_window wnd_support_level 2 wnd_num_icon_caches 3 wnd_num_icon_cache_entries 12
xrdp_caps_process_codecs: nscodec codec id 1 prop len 3
xrdp_caps_process_codecs: unknown codec id 5
xrdp_caps_process_codecs: RemoteFX, codec id 3 prop len 49
yeah, up_and_running
[20161209-11:05:41] [DEBUG] xrdp_00008047_wm_login_mode_event_00000001
xrdp:xrdp_mm [3780391410]: xrdp_mm_create: bpp 32 mcs_connection_type 6 jpeg_codec_id 0 v3_codec_id 0 rfx_codec_id 3 h264_codec_i
d 0
xrdp:xrdp_encoder [3780391410]: xrdp_encoder_create: starting rfx codec session
rfxcodec_encode_create: got sse2
rfxcodec_encode_create: got sse3
rfxcodec_encode_create: got sse4.1
rfxcodec_encode_create: got sse4.2
rfxcodec_encode_create: got popcnt
rfxcodec_encode_create: rfx_encode set to rfx_encode_component_rlgr3_amd64_sse41
xrdp:xrdp_encoder [3780391410]: init_xrdp_encoder: initializing encoder codec_id 3
xrdp:xrdp_encoder [3780391411]: proc_enc_msg: thread is running",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,531,2016-12-09T00:28:14Z,2016-12-16T05:26:41Z,2016-12-24T23:05:31Z,MERGED,True,78,39,5,https://github.com/speidy,xrdp_encoder: make RemoteFX work with MSTSC client,11,[],https://github.com/neutrinolabs/xrdp/pull/531,https://github.com/moobyfr,4,https://github.com/neutrinolabs/xrdp/pull/531#issuecomment-265955905,should resolve #508 #358,@metalefty : what is the resolution used for your test? you are perhaps hitting #524 (too much rects sent by client),True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,531,2016-12-09T00:28:14Z,2016-12-16T05:26:41Z,2016-12-24T23:05:31Z,MERGED,True,78,39,5,https://github.com/speidy,xrdp_encoder: make RemoteFX work with MSTSC client,11,[],https://github.com/neutrinolabs/xrdp/pull/531,https://github.com/speidy,5,https://github.com/neutrinolabs/xrdp/pull/531#issuecomment-265956346,should resolve #508 #358,@moobyfr can you try it with working resolution?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,531,2016-12-09T00:28:14Z,2016-12-16T05:26:41Z,2016-12-24T23:05:31Z,MERGED,True,78,39,5,https://github.com/speidy,xrdp_encoder: make RemoteFX work with MSTSC client,11,[],https://github.com/neutrinolabs/xrdp/pull/531,https://github.com/metalefty,6,https://github.com/neutrinolabs/xrdp/pull/531#issuecomment-265966833,should resolve #508 #358,"Concluding discussions in gitter chat, it's somewhat a client issue.
My mstsc.exe is Windows 10 insider preview 10.0.14965.
I've confirmed that this PR properly works with Windows 7 mstsc.exe 6.1.7601.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,531,2016-12-09T00:28:14Z,2016-12-16T05:26:41Z,2016-12-24T23:05:31Z,MERGED,True,78,39,5,https://github.com/speidy,xrdp_encoder: make RemoteFX work with MSTSC client,11,[],https://github.com/neutrinolabs/xrdp/pull/531,https://github.com/jsorg71,7,https://github.com/neutrinolabs/xrdp/pull/531#issuecomment-266585062,should resolve #508 #358,"+1
Thanks @speidy for tracking this down.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,531,2016-12-09T00:28:14Z,2016-12-16T05:26:41Z,2016-12-24T23:05:31Z,MERGED,True,78,39,5,https://github.com/speidy,xrdp_encoder: make RemoteFX work with MSTSC client,11,[],https://github.com/neutrinolabs/xrdp/pull/531,https://github.com/proski,8,https://github.com/neutrinolabs/xrdp/pull/531#issuecomment-266958997,should resolve #508 #358,Looks good to me,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,531,2016-12-09T00:28:14Z,2016-12-16T05:26:41Z,2016-12-24T23:05:31Z,MERGED,True,78,39,5,https://github.com/speidy,xrdp_encoder: make RemoteFX work with MSTSC client,11,[],https://github.com/neutrinolabs/xrdp/pull/531,https://github.com/metalefty,9,https://github.com/neutrinolabs/xrdp/pull/531#issuecomment-266979421,should resolve #508 #358,@speidy ready to merge?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,531,2016-12-09T00:28:14Z,2016-12-16T05:26:41Z,2016-12-24T23:05:31Z,MERGED,True,78,39,5,https://github.com/speidy,xrdp_encoder: make RemoteFX work with MSTSC client,11,[],https://github.com/neutrinolabs/xrdp/pull/531,https://github.com/speidy,10,https://github.com/neutrinolabs/xrdp/pull/531#issuecomment-267072481,should resolve #508 #358,@metalefty yep,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,532,2016-12-09T01:38:43Z,2016-12-09T03:32:55Z,2016-12-09T03:35:09Z,MERGED,True,2,2,1,https://github.com/metalefty,sesman: unbreak FreeBSD build after #523,1,[],https://github.com/neutrinolabs/xrdp/pull/532,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/532,"username here should be changed to s->username, too.","username here should be changed to s->username, too.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,532,2016-12-09T01:38:43Z,2016-12-09T03:32:55Z,2016-12-09T03:35:09Z,MERGED,True,2,2,1,https://github.com/metalefty,sesman: unbreak FreeBSD build after #523,1,[],https://github.com/neutrinolabs/xrdp/pull/532,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/532#issuecomment-265909663,"username here should be changed to s->username, too.",The change was introduced by 57905d7.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,532,2016-12-09T01:38:43Z,2016-12-09T03:32:55Z,2016-12-09T03:35:09Z,MERGED,True,2,2,1,https://github.com/metalefty,sesman: unbreak FreeBSD build after #523,1,[],https://github.com/neutrinolabs/xrdp/pull/532,https://github.com/jsorg71,3,https://github.com/neutrinolabs/xrdp/pull/532#issuecomment-265911007,"username here should be changed to s->username, too.","opps, sorry about that
+1",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,532,2016-12-09T01:38:43Z,2016-12-09T03:32:55Z,2016-12-09T03:35:09Z,MERGED,True,2,2,1,https://github.com/metalefty,sesman: unbreak FreeBSD build after #523,1,[],https://github.com/neutrinolabs/xrdp/pull/532,https://github.com/proski,4,https://github.com/neutrinolabs/xrdp/pull/532#issuecomment-265920412,"username here should be changed to s->username, too.",+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,532,2016-12-09T01:38:43Z,2016-12-09T03:32:55Z,2016-12-09T03:35:09Z,MERGED,True,2,2,1,https://github.com/metalefty,sesman: unbreak FreeBSD build after #523,1,[],https://github.com/neutrinolabs/xrdp/pull/532,https://github.com/metalefty,5,https://github.com/neutrinolabs/xrdp/pull/532#issuecomment-265920819,"username here should be changed to s->username, too.","No problem. I should have realize it in review.
I'll merge this shortly because it's a small change and fixes build failure.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,533,2016-12-09T03:23:36Z,2016-12-11T13:00:13Z,2016-12-11T16:23:24Z,MERGED,True,1,1,1,https://github.com/proski,Don't use colon to separate IPv6 address from the port,1,[],https://github.com/neutrinolabs/xrdp/pull/533,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/533,"IPv6 addresses can have colons in their names, so the final colon can be confusing.
http uses [ip]:port, but this is just a log, we can be more user friendly.","IPv6 addresses can have colons in their names, so the final colon can be confusing.
http uses [ip]:port, but this is just a log, we can be more user friendly.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,533,2016-12-09T03:23:36Z,2016-12-11T13:00:13Z,2016-12-11T16:23:24Z,MERGED,True,1,1,1,https://github.com/proski,Don't use colon to separate IPv6 address from the port,1,[],https://github.com/neutrinolabs/xrdp/pull/533,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/533#issuecomment-265924850,"IPv6 addresses can have colons in their names, so the final colon can be confusing.
http uses [ip]:port, but this is just a log, we can be more user friendly.",+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,533,2016-12-09T03:23:36Z,2016-12-11T13:00:13Z,2016-12-11T16:23:24Z,MERGED,True,1,1,1,https://github.com/proski,Don't use colon to separate IPv6 address from the port,1,[],https://github.com/neutrinolabs/xrdp/pull/533,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/533#issuecomment-266284464,"IPv6 addresses can have colons in their names, so the final colon can be confusing.
http uses [ip]:port, but this is just a log, we can be more user friendly.","@itamarjp
We talked at gitter chat about to prepare 0.9.1 release. Please don't merge any PRs which doesn't have v0.9.1 milestone.  If you think a PR can be included to 0.9.1, please add v0.9.1 milestone before merge.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,535,2016-12-10T07:09:27Z,2016-12-11T14:34:59Z,2016-12-24T23:05:12Z,MERGED,True,9,18,2,https://github.com/speidy,"Fix for RemoteFX detection, avoid blank screen when RFX is not supported on server",1,[],https://github.com/neutrinolabs/xrdp/pull/535,https://github.com/speidy,1,https://github.com/neutrinolabs/xrdp/pull/535,"o caps: advertise remotefx codec capsets only when supported (RFX mode, proxy mode)
o xrdp_encoder: do not initialze encoder context for RFX when rfxcodec is not supported
should resolve #534","o caps: advertise remotefx codec capsets only when supported (RFX mode, proxy mode)
o xrdp_encoder: do not initialze encoder context for RFX when rfxcodec is not supported
should resolve #534",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,535,2016-12-10T07:09:27Z,2016-12-11T14:34:59Z,2016-12-24T23:05:12Z,MERGED,True,9,18,2,https://github.com/speidy,"Fix for RemoteFX detection, avoid blank screen when RFX is not supported on server",1,[],https://github.com/neutrinolabs/xrdp/pull/535,https://github.com/speidy,2,https://github.com/neutrinolabs/xrdp/pull/535#issuecomment-266186675,"o caps: advertise remotefx codec capsets only when supported (RFX mode, proxy mode)
o xrdp_encoder: do not initialze encoder context for RFX when rfxcodec is not supported
should resolve #534",Note: I think we might merge this PR before #531. There is a conflicting part in #531. (around https://github.com/neutrinolabs/xrdp/pull/535/files#diff-245d4e160c95f9110aa48c3eb85ad7dfR834),True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,535,2016-12-10T07:09:27Z,2016-12-11T14:34:59Z,2016-12-24T23:05:12Z,MERGED,True,9,18,2,https://github.com/speidy,"Fix for RemoteFX detection, avoid blank screen when RFX is not supported on server",1,[],https://github.com/neutrinolabs/xrdp/pull/535,https://github.com/proski,3,https://github.com/neutrinolabs/xrdp/pull/535#issuecomment-266190123,"o caps: advertise remotefx codec capsets only when supported (RFX mode, proxy mode)
o xrdp_encoder: do not initialze encoder context for RFX when rfxcodec is not supported
should resolve #534","Looks good to me. I agree, fixes should be merged before new features. For every feature patch, it's good to have a working baseline.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,535,2016-12-10T07:09:27Z,2016-12-11T14:34:59Z,2016-12-24T23:05:12Z,MERGED,True,9,18,2,https://github.com/speidy,"Fix for RemoteFX detection, avoid blank screen when RFX is not supported on server",1,[],https://github.com/neutrinolabs/xrdp/pull/535,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/535#issuecomment-266285653,"o caps: advertise remotefx codec capsets only when supported (RFX mode, proxy mode)
o xrdp_encoder: do not initialze encoder context for RFX when rfxcodec is not supported
should resolve #534",Looks good. Let's test again after merge.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,536,2016-12-10T08:12:45Z,2016-12-12T01:15:34Z,2016-12-12T01:15:34Z,MERGED,True,113,14,4,https://github.com/jsorg71,add unicode support,3,[],https://github.com/neutrinolabs/xrdp/pull/536,https://github.com/jsorg71,1,https://github.com/neutrinolabs/xrdp/pull/536,This is part on noorders,This is part on noorders,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,536,2016-12-10T08:12:45Z,2016-12-12T01:15:34Z,2016-12-12T01:15:34Z,MERGED,True,113,14,4,https://github.com/jsorg71,add unicode support,3,[],https://github.com/neutrinolabs/xrdp/pull/536,https://github.com/proski,2,https://github.com/neutrinolabs/xrdp/pull/536#issuecomment-266189767,This is part on noorders,"Nice, thank you for splitting it up for the review!
Could you please add constants for the magic numbers like 8, 42, 56, 256?
How can I test this functionality? Which clients need it or can make use of it? I remember older MS RDP Beta (around 8.2.10 or so) had trouble with keyboard, maybe it used Unicode? Too bad I cannot find where to download it now.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,536,2016-12-10T08:12:45Z,2016-12-12T01:15:34Z,2016-12-12T01:15:34Z,MERGED,True,113,14,4,https://github.com/jsorg71,add unicode support,3,[],https://github.com/neutrinolabs/xrdp/pull/536,https://github.com/speidy,3,https://github.com/neutrinolabs/xrdp/pull/536#issuecomment-266190027,This is part on noorders,@proski i think Parallels RDP Client is doing unicode by default,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,536,2016-12-10T08:12:45Z,2016-12-12T01:15:34Z,2016-12-12T01:15:34Z,MERGED,True,113,14,4,https://github.com/jsorg71,add unicode support,3,[],https://github.com/neutrinolabs/xrdp/pull/536,https://github.com/jsorg71,4,https://github.com/neutrinolabs/xrdp/pull/536#issuecomment-266190045,This is part on noorders,"Magics, sure, I'll make constants.
The best way to test is the Microsoft Android client.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,536,2016-12-10T08:12:45Z,2016-12-12T01:15:34Z,2016-12-12T01:15:34Z,MERGED,True,113,14,4,https://github.com/jsorg71,add unicode support,3,[],https://github.com/neutrinolabs/xrdp/pull/536,https://github.com/jsorg71,5,https://github.com/neutrinolabs/xrdp/pull/536#issuecomment-266244832,This is part on noorders,This one might be hard to test until the other part is in.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,536,2016-12-10T08:12:45Z,2016-12-12T01:15:34Z,2016-12-12T01:15:34Z,MERGED,True,113,14,4,https://github.com/jsorg71,add unicode support,3,[],https://github.com/neutrinolabs/xrdp/pull/536,https://github.com/proski,6,https://github.com/neutrinolabs/xrdp/pull/536#issuecomment-266298888,This is part on noorders,"I was able to test MS RDP client on my Android phone, and I was able to see that the Unicode events were actually processed by xrdp.
The good news is that the Parallels clients for Mac can connect to xrdp from the noorders branch, and it's working correctly.
Since the Unicode data comes in 2-byte sequences, can we assume UTF-16 encoding? If so, should not surrogates be processed? The issue can be addressed separately, I cannot test it.
The patch looks good to me.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,538,2016-12-12T06:11:22Z,2016-12-15T04:30:36Z,2016-12-15T05:52:36Z,MERGED,True,6,1,2,https://github.com/proski,"Add libpainter submodule, update librfxcodec URL",2,[],https://github.com/neutrinolabs/xrdp/pull/538,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/538,"This PR prepares the stage for the noorders branch. Moving back and forth through a commit that adds a submodule is quite painful, so let's get it merged so that further changes can be tested easily.
I used the latest commit of libpainter. It includes a fix for ""make distcheck"".
I also changes the git protocol used for librfxcodec from git to https. The git protocol is a bad choice in my opinion. See this writeup for example: https://gist.github.com/grawity/4392747
GitHub doesn't even advertise the git protocol. It recommends https. https://help.github.com/articles/which-remote-url-should-i-use/
This PR is for version 0.9.1, since we want noorders to be part of 0.9.1.","This PR prepares the stage for the noorders branch. Moving back and forth through a commit that adds a submodule is quite painful, so let's get it merged so that further changes can be tested easily.
I used the latest commit of libpainter. It includes a fix for ""make distcheck"".
I also changes the git protocol used for librfxcodec from git to https. The git protocol is a bad choice in my opinion. See this writeup for example: https://gist.github.com/grawity/4392747
GitHub doesn't even advertise the git protocol. It recommends https. https://help.github.com/articles/which-remote-url-should-i-use/
This PR is for version 0.9.1, since we want noorders to be part of 0.9.1.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,538,2016-12-12T06:11:22Z,2016-12-15T04:30:36Z,2016-12-15T05:52:36Z,MERGED,True,6,1,2,https://github.com/proski,"Add libpainter submodule, update librfxcodec URL",2,[],https://github.com/neutrinolabs/xrdp/pull/538,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/538#issuecomment-266352469,"This PR prepares the stage for the noorders branch. Moving back and forth through a commit that adds a submodule is quite painful, so let's get it merged so that further changes can be tested easily.
I used the latest commit of libpainter. It includes a fix for ""make distcheck"".
I also changes the git protocol used for librfxcodec from git to https. The git protocol is a bad choice in my opinion. See this writeup for example: https://gist.github.com/grawity/4392747
GitHub doesn't even advertise the git protocol. It recommends https. https://help.github.com/articles/which-remote-url-should-i-use/
This PR is for version 0.9.1, since we want noorders to be part of 0.9.1.",+1 to https. I also replace git:// URLs to https:// in RH-Matic.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,538,2016-12-12T06:11:22Z,2016-12-15T04:30:36Z,2016-12-15T05:52:36Z,MERGED,True,6,1,2,https://github.com/proski,"Add libpainter submodule, update librfxcodec URL",2,[],https://github.com/neutrinolabs/xrdp/pull/538,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/538#issuecomment-266975230,"This PR prepares the stage for the noorders branch. Moving back and forth through a commit that adds a submodule is quite painful, so let's get it merged so that further changes can be tested easily.
I used the latest commit of libpainter. It includes a fix for ""make distcheck"".
I also changes the git protocol used for librfxcodec from git to https. The git protocol is a bad choice in my opinion. See this writeup for example: https://gist.github.com/grawity/4392747
GitHub doesn't even advertise the git protocol. It recommends https. https://help.github.com/articles/which-remote-url-should-i-use/
This PR is for version 0.9.1, since we want noorders to be part of 0.9.1.",any objections to merge?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,538,2016-12-12T06:11:22Z,2016-12-15T04:30:36Z,2016-12-15T05:52:36Z,MERGED,True,6,1,2,https://github.com/proski,"Add libpainter submodule, update librfxcodec URL",2,[],https://github.com/neutrinolabs/xrdp/pull/538,https://github.com/jsorg71,4,https://github.com/neutrinolabs/xrdp/pull/538#issuecomment-266986192,"This PR prepares the stage for the noorders branch. Moving back and forth through a commit that adds a submodule is quite painful, so let's get it merged so that further changes can be tested easily.
I used the latest commit of libpainter. It includes a fix for ""make distcheck"".
I also changes the git protocol used for librfxcodec from git to https. The git protocol is a bad choice in my opinion. See this writeup for example: https://gist.github.com/grawity/4392747
GitHub doesn't even advertise the git protocol. It recommends https. https://help.github.com/articles/which-remote-url-should-i-use/
This PR is for version 0.9.1, since we want noorders to be part of 0.9.1.",+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,538,2016-12-12T06:11:22Z,2016-12-15T04:30:36Z,2016-12-15T05:52:36Z,MERGED,True,6,1,2,https://github.com/proski,"Add libpainter submodule, update librfxcodec URL",2,[],https://github.com/neutrinolabs/xrdp/pull/538,https://github.com/speidy,5,https://github.com/neutrinolabs/xrdp/pull/538#issuecomment-267077234,"This PR prepares the stage for the noorders branch. Moving back and forth through a commit that adds a submodule is quite painful, so let's get it merged so that further changes can be tested easily.
I used the latest commit of libpainter. It includes a fix for ""make distcheck"".
I also changes the git protocol used for librfxcodec from git to https. The git protocol is a bad choice in my opinion. See this writeup for example: https://gist.github.com/grawity/4392747
GitHub doesn't even advertise the git protocol. It recommends https. https://help.github.com/articles/which-remote-url-should-i-use/
This PR is for version 0.9.1, since we want noorders to be part of 0.9.1.",+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,539,2016-12-13T03:55:06Z,2016-12-17T15:05:15Z,2016-12-17T16:41:48Z,MERGED,True,10,1,3,https://github.com/proski,Make librfxcodec a subpackage,1,[],https://github.com/neutrinolabs/xrdp/pull/539,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/539,"Since libpainter is going to become a subpackage, we can make librfxcodec
a subpackage as well.
With this change, librfxcodec is configured, built and linked to xrdp
automatically if enabled by ""--enable-rfxcodec""
librfxcodec is packaged by ""make dist"" regardless of ""--enable-rfxcodec""
librfxcodec/confgure is run unconditionally, it's needed for ""make dist""
to work. But librfxcodec is only compiled if enabled.","Since libpainter is going to become a subpackage, we can make librfxcodec
a subpackage as well.
With this change, librfxcodec is configured, built and linked to xrdp
automatically if enabled by ""--enable-rfxcodec""
librfxcodec is packaged by ""make dist"" regardless of ""--enable-rfxcodec""
librfxcodec/confgure is run unconditionally, it's needed for ""make dist""
to work. But librfxcodec is only compiled if enabled.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,539,2016-12-13T03:55:06Z,2016-12-17T15:05:15Z,2016-12-17T16:41:48Z,MERGED,True,10,1,3,https://github.com/proski,Make librfxcodec a subpackage,1,[],https://github.com/neutrinolabs/xrdp/pull/539,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/539#issuecomment-266637757,"Since libpainter is going to become a subpackage, we can make librfxcodec
a subpackage as well.
With this change, librfxcodec is configured, built and linked to xrdp
automatically if enabled by ""--enable-rfxcodec""
librfxcodec is packaged by ""make dist"" regardless of ""--enable-rfxcodec""
librfxcodec/confgure is run unconditionally, it's needed for ""make dist""
to work. But librfxcodec is only compiled if enabled.",awesome +1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,539,2016-12-13T03:55:06Z,2016-12-17T15:05:15Z,2016-12-17T16:41:48Z,MERGED,True,10,1,3,https://github.com/proski,Make librfxcodec a subpackage,1,[],https://github.com/neutrinolabs/xrdp/pull/539,https://github.com/speidy,3,https://github.com/neutrinolabs/xrdp/pull/539#issuecomment-266655727,"Since libpainter is going to become a subpackage, we can make librfxcodec
a subpackage as well.
With this change, librfxcodec is configured, built and linked to xrdp
automatically if enabled by ""--enable-rfxcodec""
librfxcodec is packaged by ""make dist"" regardless of ""--enable-rfxcodec""
librfxcodec/confgure is run unconditionally, it's needed for ""make dist""
to work. But librfxcodec is only compiled if enabled.",+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,541,2016-12-13T14:51:15Z,2016-12-15T14:34:05Z,2016-12-15T14:34:18Z,CLOSED,False,8,0,2,https://github.com/antoine-roux,Add xauth support,3,[],https://github.com/neutrinolabs/xrdp/pull/541,https://github.com/antoine-roux,1,https://github.com/neutrinolabs/xrdp/pull/541,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,541,2016-12-13T14:51:15Z,2016-12-15T14:34:05Z,2016-12-15T14:34:18Z,CLOSED,False,8,0,2,https://github.com/antoine-roux,Add xauth support,3,[],https://github.com/neutrinolabs/xrdp/pull/541,https://github.com/speidy,2,https://github.com/neutrinolabs/xrdp/pull/541#issuecomment-266904903,,"We should consider what will happen in case of a local console session connection as well.
One user might use .Xauthority file for some local session using lightdm for example.
Then connect with xrdp and overwrite this .Xauthority file
What will be the implications?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,541,2016-12-13T14:51:15Z,2016-12-15T14:34:05Z,2016-12-15T14:34:18Z,CLOSED,False,8,0,2,https://github.com/antoine-roux,Add xauth support,3,[],https://github.com/neutrinolabs/xrdp/pull/541,https://github.com/proski,3,https://github.com/neutrinolabs/xrdp/pull/541#issuecomment-266905796,,Nobody suggests overwriting .Xauthority file. xauth operates on records. If would not remove records for other displays.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,541,2016-12-13T14:51:15Z,2016-12-15T14:34:05Z,2016-12-15T14:34:18Z,CLOSED,False,8,0,2,https://github.com/antoine-roux,Add xauth support,3,[],https://github.com/neutrinolabs/xrdp/pull/541,https://github.com/antoine-roux,4,https://github.com/neutrinolabs/xrdp/pull/541#issuecomment-267341732,,#545 will be much better :),True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,542,2016-12-13T16:32:13Z,2017-02-27T05:17:27Z,2017-03-06T01:20:49Z,MERGED,True,78,27,9,https://github.com/metalefty,TLS: new method to specify SSL/TLS version,7,['TLS'],https://github.com/neutrinolabs/xrdp/pull/542,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/542,"SSL/TLS protocols only listed in ssl_protocols should be used.
The name ""ssl_protocols"" comes from nginx.
Resolves #428.
Document hasn't been updated yet.","SSL/TLS protocols only listed in ssl_protocols should be used.
The name ""ssl_protocols"" comes from nginx.
Resolves #428.
Document hasn't been updated yet.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,542,2016-12-13T16:32:13Z,2017-02-27T05:17:27Z,2017-03-06T01:20:49Z,MERGED,True,78,27,9,https://github.com/metalefty,TLS: new method to specify SSL/TLS version,7,['TLS'],https://github.com/neutrinolabs/xrdp/pull/542,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/542#issuecomment-266788581,"SSL/TLS protocols only listed in ssl_protocols should be used.
The name ""ssl_protocols"" comes from nginx.
Resolves #428.
Document hasn't been updated yet.",I'd appreciate if you review this PR after next release..  Help me to improve the patch.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,542,2016-12-13T16:32:13Z,2017-02-27T05:17:27Z,2017-03-06T01:20:49Z,MERGED,True,78,27,9,https://github.com/metalefty,TLS: new method to specify SSL/TLS version,7,['TLS'],https://github.com/neutrinolabs/xrdp/pull/542,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/542#issuecomment-266789975,"SSL/TLS protocols only listed in ssl_protocols should be used.
The name ""ssl_protocols"" comes from nginx.
Resolves #428.
Document hasn't been updated yet.","To know which SSL/TLS protocol is finally selected, #426 enables it.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,542,2016-12-13T16:32:13Z,2017-02-27T05:17:27Z,2017-03-06T01:20:49Z,MERGED,True,78,27,9,https://github.com/metalefty,TLS: new method to specify SSL/TLS version,7,['TLS'],https://github.com/neutrinolabs/xrdp/pull/542,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/542#issuecomment-271473232,"SSL/TLS protocols only listed in ssl_protocols should be used.
The name ""ssl_protocols"" comes from nginx.
Resolves #428.
Document hasn't been updated yet.","I took your review comments, rebased to current devel head and force pushed.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,542,2016-12-13T16:32:13Z,2017-02-27T05:17:27Z,2017-03-06T01:20:49Z,MERGED,True,78,27,9,https://github.com/metalefty,TLS: new method to specify SSL/TLS version,7,['TLS'],https://github.com/neutrinolabs/xrdp/pull/542,https://github.com/metalefty,5,https://github.com/neutrinolabs/xrdp/pull/542#issuecomment-273419972,"SSL/TLS protocols only listed in ssl_protocols should be used.
The name ""ssl_protocols"" comes from nginx.
Resolves #428.
Document hasn't been updated yet.","I've finished this. @speidy @jsorg71, can you look at this, too?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,542,2016-12-13T16:32:13Z,2017-02-27T05:17:27Z,2017-03-06T01:20:49Z,MERGED,True,78,27,9,https://github.com/metalefty,TLS: new method to specify SSL/TLS version,7,['TLS'],https://github.com/neutrinolabs/xrdp/pull/542,https://github.com/metalefty,6,https://github.com/neutrinolabs/xrdp/pull/542#issuecomment-276236586,"SSL/TLS protocols only listed in ssl_protocols should be used.
The name ""ssl_protocols"" comes from nginx.
Resolves #428.
Document hasn't been updated yet.","No problem in such case. I designed the feature with old config file compatibility.
If ssl_protocols directive is not found in xrdp.ini, xrdp behaves as same as former. Only SSLv2 will be disabled.  If ssl_protocols directive is found and set to empty, all SSL protocols will be disabled.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,542,2016-12-13T16:32:13Z,2017-02-27T05:17:27Z,2017-03-06T01:20:49Z,MERGED,True,78,27,9,https://github.com/metalefty,TLS: new method to specify SSL/TLS version,7,['TLS'],https://github.com/neutrinolabs/xrdp/pull/542,https://github.com/metalefty,7,https://github.com/neutrinolabs/xrdp/pull/542#issuecomment-276293174,"SSL/TLS protocols only listed in ssl_protocols should be used.
The name ""ssl_protocols"" comes from nginx.
Resolves #428.
Document hasn't been updated yet.",Rebased to devel head again.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,542,2016-12-13T16:32:13Z,2017-02-27T05:17:27Z,2017-03-06T01:20:49Z,MERGED,True,78,27,9,https://github.com/metalefty,TLS: new method to specify SSL/TLS version,7,['TLS'],https://github.com/neutrinolabs/xrdp/pull/542,https://github.com/metalefty,8,https://github.com/neutrinolabs/xrdp/pull/542#issuecomment-278913963,"SSL/TLS protocols only listed in ssl_protocols should be used.
The name ""ssl_protocols"" comes from nginx.
Resolves #428.
Document hasn't been updated yet.",No more change requests?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,542,2016-12-13T16:32:13Z,2017-02-27T05:17:27Z,2017-03-06T01:20:49Z,MERGED,True,78,27,9,https://github.com/metalefty,TLS: new method to specify SSL/TLS version,7,['TLS'],https://github.com/neutrinolabs/xrdp/pull/542,https://github.com/metalefty,9,https://github.com/neutrinolabs/xrdp/pull/542#issuecomment-279273362,"SSL/TLS protocols only listed in ssl_protocols should be used.
The name ""ssl_protocols"" comes from nginx.
Resolves #428.
Document hasn't been updated yet.","OK, I think it's ready to merge.  What do you think @speidy @jsorg71 ?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,542,2016-12-13T16:32:13Z,2017-02-27T05:17:27Z,2017-03-06T01:20:49Z,MERGED,True,78,27,9,https://github.com/metalefty,TLS: new method to specify SSL/TLS version,7,['TLS'],https://github.com/neutrinolabs/xrdp/pull/542,https://github.com/metalefty,10,https://github.com/neutrinolabs/xrdp/pull/542#issuecomment-280988031,"SSL/TLS protocols only listed in ssl_protocols should be used.
The name ""ssl_protocols"" comes from nginx.
Resolves #428.
Document hasn't been updated yet.","If no objections in a week, I'll merge by myself.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,542,2016-12-13T16:32:13Z,2017-02-27T05:17:27Z,2017-03-06T01:20:49Z,MERGED,True,78,27,9,https://github.com/metalefty,TLS: new method to specify SSL/TLS version,7,['TLS'],https://github.com/neutrinolabs/xrdp/pull/542,https://github.com/speidy,11,https://github.com/neutrinolabs/xrdp/pull/542#issuecomment-281128736,"SSL/TLS protocols only listed in ssl_protocols should be used.
The name ""ssl_protocols"" comes from nginx.
Resolves #428.
Document hasn't been updated yet.",lgtm,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,542,2016-12-13T16:32:13Z,2017-02-27T05:17:27Z,2017-03-06T01:20:49Z,MERGED,True,78,27,9,https://github.com/metalefty,TLS: new method to specify SSL/TLS version,7,['TLS'],https://github.com/neutrinolabs/xrdp/pull/542,https://github.com/metalefty,12,https://github.com/neutrinolabs/xrdp/pull/542#issuecomment-282630296,"SSL/TLS protocols only listed in ssl_protocols should be used.
The name ""ssl_protocols"" comes from nginx.
Resolves #428.
Document hasn't been updated yet.","A week past, merged.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,543,2016-12-14T06:10:06Z,2016-12-14T15:58:14Z,2016-12-14T15:58:14Z,MERGED,True,1061,0,3,https://github.com/westporch,Add Korean keymap,5,[],https://github.com/neutrinolabs/xrdp/pull/543,https://github.com/westporch,1,https://github.com/neutrinolabs/xrdp/pull/543,"Hello.
I'm newbie.
I've added Korean keymap.
Thanks.","Hello.
I'm newbie.
I've added Korean keymap.
Thanks.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,543,2016-12-14T06:10:06Z,2016-12-14T15:58:14Z,2016-12-14T15:58:14Z,MERGED,True,1061,0,3,https://github.com/westporch,Add Korean keymap,5,[],https://github.com/neutrinolabs/xrdp/pull/543,https://github.com/westporch,2,https://github.com/neutrinolabs/xrdp/pull/543#issuecomment-266956461,"Hello.
I'm newbie.
I've added Korean keymap.
Thanks.","I sorted alphabetically order.
Thanks :-)",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,543,2016-12-14T06:10:06Z,2016-12-14T15:58:14Z,2016-12-14T15:58:14Z,MERGED,True,1061,0,3,https://github.com/westporch,Add Korean keymap,5,[],https://github.com/neutrinolabs/xrdp/pull/543,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/543#issuecomment-266961263,"Hello.
I'm newbie.
I've added Korean keymap.
Thanks.","LGTM, thanks. I think we can include this to 0.9.1.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,543,2016-12-14T06:10:06Z,2016-12-14T15:58:14Z,2016-12-14T15:58:14Z,MERGED,True,1061,0,3,https://github.com/westporch,Add Korean keymap,5,[],https://github.com/neutrinolabs/xrdp/pull/543,https://github.com/proski,4,https://github.com/neutrinolabs/xrdp/pull/543#issuecomment-266963166,"Hello.
I'm newbie.
I've added Korean keymap.
Thanks.","I agree, this can go to 0.9.1",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,545,2016-12-14T10:06:31Z,2016-12-19T06:59:19Z,2016-12-19T06:59:19Z,MERGED,True,129,0,4,https://github.com/moobyfr,Fix xauth,12,[],https://github.com/neutrinolabs/xrdp/pull/545,https://github.com/moobyfr,1,https://github.com/neutrinolabs/xrdp/pull/545,"This pull request fixes #540 . It creates a XAUTHORITY file (.Xauthority in the $HOME of the user by default, but can be overriden by setting a variable XAUTHORITY in sesman.ini) if it doesn't exist, and add a secret through the xauth command. The backend (Xvnc, Xorg or X11rdp) will get as argument the file to share the secret.","This pull request fixes #540 . It creates a XAUTHORITY file (.Xauthority in the $HOME of the user by default, but can be overriden by setting a variable XAUTHORITY in sesman.ini) if it doesn't exist, and add a secret through the xauth command. The backend (Xvnc, Xorg or X11rdp) will get as argument the file to share the secret.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,545,2016-12-14T10:06:31Z,2016-12-19T06:59:19Z,2016-12-19T06:59:19Z,MERGED,True,129,0,4,https://github.com/moobyfr,Fix xauth,12,[],https://github.com/neutrinolabs/xrdp/pull/545,https://github.com/proski,2,https://github.com/neutrinolabs/xrdp/pull/545#issuecomment-267271078,"This pull request fixes #540 . It creates a XAUTHORITY file (.Xauthority in the $HOME of the user by default, but can be overriden by setting a variable XAUTHORITY in sesman.ini) if it doesn't exist, and add a secret through the xauth command. The backend (Xvnc, Xorg or X11rdp) will get as argument the file to share the secret.","One more thing. It would be great if you could avoid adding too many lines to session_start_fork, it's way too long already. Think of the simplest API possible for session_start_fork to get the job done. Define a function that takes the parameter list and adds -auth and the xauthority file if successful, and keeps the parameter list unchanged otherwise.
You can create a separate file, say xauth.c to hold that function. No need to change env.c at all, it's for environment variable.
It's very important that we fix X security. We have just a few days left to get it into 0.9.1. I'll try to help with coding this weekend.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,545,2016-12-14T10:06:31Z,2016-12-19T06:59:19Z,2016-12-19T06:59:19Z,MERGED,True,129,0,4,https://github.com/moobyfr,Fix xauth,12,[],https://github.com/neutrinolabs/xrdp/pull/545,https://github.com/speidy,3,https://github.com/neutrinolabs/xrdp/pull/545#issuecomment-267808256,"This pull request fixes #540 . It creates a XAUTHORITY file (.Xauthority in the $HOME of the user by default, but can be overriden by setting a variable XAUTHORITY in sesman.ini) if it doesn't exist, and add a secret through the xauth command. The backend (Xvnc, Xorg or X11rdp) will get as argument the file to share the secret.","looks good to me.
can we merge?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,545,2016-12-14T10:06:31Z,2016-12-19T06:59:19Z,2016-12-19T06:59:19Z,MERGED,True,129,0,4,https://github.com/moobyfr,Fix xauth,12,[],https://github.com/neutrinolabs/xrdp/pull/545,https://github.com/moobyfr,4,https://github.com/neutrinolabs/xrdp/pull/545#issuecomment-267809408,"This pull request fixes #540 . It creates a XAUTHORITY file (.Xauthority in the $HOME of the user by default, but can be overriden by setting a variable XAUTHORITY in sesman.ini) if it doesn't exist, and add a secret through the xauth command. The backend (Xvnc, Xorg or X11rdp) will get as argument the file to share the secret.",I have nothing more to push,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,546,2016-12-14T17:20:11Z,2016-12-16T05:33:26Z,2016-12-16T06:20:35Z,MERGED,True,7,4,1,https://github.com/proski,Fix a warning in jpeg compression code with --enable-jpeg,1,[],https://github.com/neutrinolabs/xrdp/pull/546,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/546,"Let's keep our standards high. We don't need any warnings. This is for 0.9.1, please.

If the image width is not divisible by 4, the image is padded to the next
multiple of 4. The additional pixels are filled with the colors of the
last pixel in the row.
The last pixel colors may not be initialized if the width is 0. In this
case, the would be no padding, but the compiler doesn't know that.
Add a check that the width is more that 0 before filling the padding.","Let's keep our standards high. We don't need any warnings. This is for 0.9.1, please.

If the image width is not divisible by 4, the image is padded to the next
multiple of 4. The additional pixels are filled with the colors of the
last pixel in the row.
The last pixel colors may not be initialized if the width is 0. In this
case, the would be no padding, but the compiler doesn't know that.
Add a check that the width is more that 0 before filling the padding.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,546,2016-12-14T17:20:11Z,2016-12-16T05:33:26Z,2016-12-16T06:20:35Z,MERGED,True,7,4,1,https://github.com/proski,Fix a warning in jpeg compression code with --enable-jpeg,1,[],https://github.com/neutrinolabs/xrdp/pull/546,https://github.com/jsorg71,2,https://github.com/neutrinolabs/xrdp/pull/546#issuecomment-267519712,"Let's keep our standards high. We don't need any warnings. This is for 0.9.1, please.

If the image width is not divisible by 4, the image is padded to the next
multiple of 4. The additional pixels are filled with the colors of the
last pixel in the row.
The last pixel colors may not be initialized if the width is 0. In this
case, the would be no padding, but the compiler doesn't know that.
Add a check that the width is more that 0 before filling the padding.",+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,548,2016-12-14T19:58:50Z,2016-12-18T07:48:58Z,2016-12-18T07:51:27Z,MERGED,True,11,5,2,https://github.com/proski,"Set autorun to empty, improve autorun documentation",1,[],https://github.com/neutrinolabs/xrdp/pull/548,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/548,"Setting autorun to empty keeps X11rdp as the default backend for
autologin (since it's the first section), but it also enables the backend
selection by the domain name.
Describe the autorun interaction with the domain name both in the config
file and in the manual.","Setting autorun to empty keeps X11rdp as the default backend for
autologin (since it's the first section), but it also enables the backend
selection by the domain name.
Describe the autorun interaction with the domain name both in the config
file and in the manual.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,548,2016-12-14T19:58:50Z,2016-12-18T07:48:58Z,2016-12-18T07:51:27Z,MERGED,True,11,5,2,https://github.com/proski,"Set autorun to empty, improve autorun documentation",1,[],https://github.com/neutrinolabs/xrdp/pull/548,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/548#issuecomment-267237845,"Setting autorun to empty keeps X11rdp as the default backend for
autologin (since it's the first section), but it also enables the backend
selection by the domain name.
Describe the autorun interaction with the domain name both in the config
file and in the manual.",+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,548,2016-12-14T19:58:50Z,2016-12-18T07:48:58Z,2016-12-18T07:51:27Z,MERGED,True,11,5,2,https://github.com/proski,"Set autorun to empty, improve autorun documentation",1,[],https://github.com/neutrinolabs/xrdp/pull/548,https://github.com/Natureshadow,3,https://github.com/neutrinolabs/xrdp/pull/548#issuecomment-267316886,"Setting autorun to empty keeps X11rdp as the default backend for
autologin (since it's the first section), but it also enables the backend
selection by the domain name.
Describe the autorun interaction with the domain name both in the config
file and in the manual.",+1 for 0.9.1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,548,2016-12-14T19:58:50Z,2016-12-18T07:48:58Z,2016-12-18T07:51:27Z,MERGED,True,11,5,2,https://github.com/proski,"Set autorun to empty, improve autorun documentation",1,[],https://github.com/neutrinolabs/xrdp/pull/548,https://github.com/speidy,4,https://github.com/neutrinolabs/xrdp/pull/548#issuecomment-267323906,"Setting autorun to empty keeps X11rdp as the default backend for
autologin (since it's the first section), but it also enables the backend
selection by the domain name.
Describe the autorun interaction with the domain name both in the config
file and in the manual.","+1

What do you think about moving Xorg as the first section?
בתאריך יום ה׳, 15 בדצמ׳ 2016 ב-4:32 מאת Dominik George <
notifications@github.com>:
 +1 for 0.9.1

 —
 You are receiving this because you are subscribed to this thread.
 Reply to this email directly, view it on GitHub
 <#548 (comment)>,
 or mute the thread
 <https://github.com/notifications/unsubscribe-auth/ADTH1MwDWcFBfxllTAxWclwIgQro6IbTks5rITNKgaJpZM4LNWTg>
 .

-- 
Idan Freiberg

PGP FP: 8108 7EC9 806E 4980 75F2  72B3 8AD3 2D04 337B 1F18",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,548,2016-12-14T19:58:50Z,2016-12-18T07:48:58Z,2016-12-18T07:51:27Z,MERGED,True,11,5,2,https://github.com/proski,"Set autorun to empty, improve autorun documentation",1,[],https://github.com/neutrinolabs/xrdp/pull/548,https://github.com/Natureshadow,5,https://github.com/neutrinolabs/xrdp/pull/548#issuecomment-267325496,"Setting autorun to empty keeps X11rdp as the default backend for
autologin (since it's the first section), but it also enables the backend
selection by the domain name.
Describe the autorun interaction with the domain name both in the config
file and in the manual.",We already do that as a patch in Debian.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,548,2016-12-14T19:58:50Z,2016-12-18T07:48:58Z,2016-12-18T07:51:27Z,MERGED,True,11,5,2,https://github.com/proski,"Set autorun to empty, improve autorun documentation",1,[],https://github.com/neutrinolabs/xrdp/pull/548,https://github.com/proski,6,https://github.com/neutrinolabs/xrdp/pull/548#issuecomment-267389162,"Setting autorun to empty keeps X11rdp as the default backend for
autologin (since it's the first section), but it also enables the backend
selection by the domain name.
Describe the autorun interaction with the domain name both in the config
file and in the manual.","Let's not play favorites here, it's a distraction from the real issues. Distros are welcome to move Xorg first if they package xorgxrdp. We can have a better prioritization mechanism after 0.9.1.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,549,2016-12-15T07:57:06Z,2016-12-17T19:58:57Z,2016-12-17T19:58:57Z,MERGED,True,153,92,3,https://github.com/jsorg71,fixes for rle bitmap compress limits and raw bitmaps,1,[],https://github.com/neutrinolabs/xrdp/pull/549,https://github.com/jsorg71,1,https://github.com/neutrinolabs/xrdp/pull/549,this is part of noorders,this is part of noorders,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,550,2016-12-15T08:40:45Z,2016-12-20T08:01:32Z,2017-07-29T03:56:55Z,MERGED,True,131,30,3,https://github.com/jsorg71,fixes for bitmap update,4,[],https://github.com/neutrinolabs/xrdp/pull/550,https://github.com/jsorg71,1,https://github.com/neutrinolabs/xrdp/pull/550,"function not used for year,
part of noorders","function not used for year,
part of noorders",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,550,2016-12-15T08:40:45Z,2016-12-20T08:01:32Z,2017-07-29T03:56:55Z,MERGED,True,131,30,3,https://github.com/jsorg71,fixes for bitmap update,4,[],https://github.com/neutrinolabs/xrdp/pull/550,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/550#issuecomment-267486196,"function not used for year,
part of noorders",Something's going wrong in Travis.  False CI failure.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,550,2016-12-15T08:40:45Z,2016-12-20T08:01:32Z,2017-07-29T03:56:55Z,MERGED,True,131,30,3,https://github.com/jsorg71,fixes for bitmap update,4,[],https://github.com/neutrinolabs/xrdp/pull/550,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/550#issuecomment-267520822,"function not used for year,
part of noorders",I fixed travis at #552. Rebasing to current devel head will get build success.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,550,2016-12-15T08:40:45Z,2016-12-20T08:01:32Z,2017-07-29T03:56:55Z,MERGED,True,131,30,3,https://github.com/jsorg71,fixes for bitmap update,4,[],https://github.com/neutrinolabs/xrdp/pull/550,https://github.com/proski,4,https://github.com/neutrinolabs/xrdp/pull/550#issuecomment-268175647,"function not used for year,
part of noorders","It's more important that we have a day or two for testing than that we get the spacing right. We can always reindent to code after the release. Likewise, the bpp to Bpp conversion code can be done in two inline functions - after the release.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,550,2016-12-15T08:40:45Z,2016-12-20T08:01:32Z,2017-07-29T03:56:55Z,MERGED,True,131,30,3,https://github.com/jsorg71,fixes for bitmap update,4,[],https://github.com/neutrinolabs/xrdp/pull/550,https://github.com/metalefty,5,https://github.com/neutrinolabs/xrdp/pull/550#issuecomment-268179395,"function not used for year,
part of noorders",Merging as is.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,552,2016-12-16T04:29:35Z,2016-12-16T05:28:19Z,2016-12-20T08:15:20Z,MERGED,True,1,1,1,https://github.com/metalefty,CI: correct pixman package name,1,[],https://github.com/neutrinolabs/xrdp/pull/552,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/552,fixes travis build.,fixes travis build.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,552,2016-12-16T04:29:35Z,2016-12-16T05:28:19Z,2016-12-20T08:15:20Z,MERGED,True,1,1,1,https://github.com/metalefty,CI: correct pixman package name,1,[],https://github.com/neutrinolabs/xrdp/pull/552,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/552#issuecomment-267514999,fixes travis build.,This should be merged ASAP in order to run build test for other build PRs.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,552,2016-12-16T04:29:35Z,2016-12-16T05:28:19Z,2016-12-20T08:15:20Z,MERGED,True,1,1,1,https://github.com/metalefty,CI: correct pixman package name,1,[],https://github.com/neutrinolabs/xrdp/pull/552,https://github.com/proski,3,https://github.com/neutrinolabs/xrdp/pull/552#issuecomment-267515768,fixes travis build.,"Did they upgrade their servers? libpixman-dev has always been there.
Anyway, the one day waiting should not apply to the non-distributable files. Please merge if you know what you are doing.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,552,2016-12-16T04:29:35Z,2016-12-16T05:28:19Z,2016-12-20T08:15:20Z,MERGED,True,1,1,1,https://github.com/metalefty,CI: correct pixman package name,1,[],https://github.com/neutrinolabs/xrdp/pull/552,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/552#issuecomment-267519933,fixes travis build.,"The package name ""libpixman-dev"" was incorrect. It is actually libpixman-1-dev. This is my mistake.
Travis build environment is a kind of Debian/Ubuntu.  I need to specify Debian's package name.
I guess they changed behaviour when incorrect package name is given. Formerly unknown package name to build system was ignored.  In addition, somehow libpixman-1-dev is  always installed even if I don't give it explicily. This is the reason why the build succeeded until yesterday.
I think requisite packages should be listed explicitly so I correct the package name not just removing it.
Here's part of travis log.
Yesterday: https://travis-ci.org/neutrinolabs/xrdp/jobs/180934751
Installing APT Packages (BETA)
Disallowing packages: libpixman-dev""
(build continues)

Today: https://travis-ci.org/neutrinolabs/xrdp/jobs/184391390
$ sudo -E apt-get -yq --no-install-suggests --no-install-recommends --force-yes install libpam0g-dev libjpeg-dev libfuse-dev libmp3lame-dev libx11-dev libxrandr-dev libpixman-dev nasm
Reading package lists...
Building dependency tree...
Reading state information...
E: Unable to locate package libpixman-dev
(build stops)",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,553,2016-12-16T05:22:42Z,2016-12-20T08:00:48Z,2017-07-29T03:54:55Z,MERGED,True,642,46,10,https://github.com/jsorg71,add libpainter for drawing when client does not have minimum orders,2,[],https://github.com/neutrinolabs/xrdp/pull/553,https://github.com/jsorg71,1,https://github.com/neutrinolabs/xrdp/pull/553,This is last part of noorders,This is last part of noorders,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,553,2016-12-16T05:22:42Z,2016-12-20T08:00:48Z,2017-07-29T03:54:55Z,MERGED,True,642,46,10,https://github.com/jsorg71,add libpainter for drawing when client does not have minimum orders,2,[],https://github.com/neutrinolabs/xrdp/pull/553,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/553#issuecomment-267520338,This is last part of noorders,I fixed travis build. Could you rebase to current devel head and force push?  Then build test will succeed.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,553,2016-12-16T05:22:42Z,2016-12-20T08:00:48Z,2017-07-29T03:54:55Z,MERGED,True,642,46,10,https://github.com/jsorg71,add libpainter for drawing when client does not have minimum orders,2,[],https://github.com/neutrinolabs/xrdp/pull/553,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/553#issuecomment-267521574,This is last part of noorders,Thanks!,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,553,2016-12-16T05:22:42Z,2016-12-20T08:00:48Z,2017-07-29T03:54:55Z,MERGED,True,642,46,10,https://github.com/jsorg71,add libpainter for drawing when client does not have minimum orders,2,[],https://github.com/neutrinolabs/xrdp/pull/553,https://github.com/proski,4,https://github.com/neutrinolabs/xrdp/pull/553#issuecomment-268175095,This is last part of noorders,"Let's merge it as is, and we can always rename variables later. I have a fixup patch that can be applied on top of this patch. It's important to get the code into the final shape and leave some time for testing.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,553,2016-12-16T05:22:42Z,2016-12-20T08:00:48Z,2017-07-29T03:54:55Z,MERGED,True,642,46,10,https://github.com/jsorg71,add libpainter for drawing when client does not have minimum orders,2,[],https://github.com/neutrinolabs/xrdp/pull/553,https://github.com/metalefty,5,https://github.com/neutrinolabs/xrdp/pull/553#issuecomment-268179268,This is last part of noorders,I agree. Merging as is.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,554,2016-12-16T08:05:37Z,2016-12-18T07:48:16Z,2016-12-18T07:51:42Z,MERGED,True,11,6,1,https://github.com/proski,Regression fix: session matching uses wrong bpp for Xorg,1,[],https://github.com/neutrinolabs/xrdp/pull/554,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/554,"Even seemingly harmless configuration changes can have unexpected consequences. This is a regression caused by my recent change in xrdp.ini, please fix it before 0.9.1.

The removal of ""xserverbpp=24"" from the Xorg entry lead to a regression.
Clients with a different bpp would not reconnect to an xorgxrdp session
if the client's bpp is different, even though xorgxrdp is always using 24
bpp.
Imply ""xserverbpp=24"" for ""code=20"" in xrdp.ini.","Even seemingly harmless configuration changes can have unexpected consequences. This is a regression caused by my recent change in xrdp.ini, please fix it before 0.9.1.

The removal of ""xserverbpp=24"" from the Xorg entry lead to a regression.
Clients with a different bpp would not reconnect to an xorgxrdp session
if the client's bpp is different, even though xorgxrdp is always using 24
bpp.
Imply ""xserverbpp=24"" for ""code=20"" in xrdp.ini.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,554,2016-12-16T08:05:37Z,2016-12-18T07:48:16Z,2016-12-18T07:51:42Z,MERGED,True,11,6,1,https://github.com/proski,Regression fix: session matching uses wrong bpp for Xorg,1,[],https://github.com/neutrinolabs/xrdp/pull/554,https://github.com/speidy,2,https://github.com/neutrinolabs/xrdp/pull/554#issuecomment-267585822,"Even seemingly harmless configuration changes can have unexpected consequences. This is a regression caused by my recent change in xrdp.ini, please fix it before 0.9.1.

The removal of ""xserverbpp=24"" from the Xorg entry lead to a regression.
Clients with a different bpp would not reconnect to an xorgxrdp session
if the client's bpp is different, even though xorgxrdp is always using 24
bpp.
Imply ""xserverbpp=24"" for ""code=20"" in xrdp.ini.","+1 for 0.9.1
Looks good to me.
בתאריך יום ו׳, 16 בדצמ׳ 2016 ב-3:05 מאת Pavel Roskin <
notifications@github.com>:
 Even seemingly harmless configuration changes can have unexpected
 consequences. This is a regression caused by my recent change in xrdp.ini,
 please fix it before 0.9.1.
 ------------------------------

 The removal of ""xserverbpp=24"" from the Xorg entry lead to a regression.
 Clients with a different bpp would not reconnect to an xorgxrdp session
 if the client's bpp is different, even though xorgxrdp is always using 24
 bpp.

 Imply ""xserverbpp=24"" for ""code=20"" in xrdp.ini.
 ------------------------------
 You can view, comment on, or merge this pull request online at:

   #554
 Commit Summary

    - Regression fix: session matching uses wrong bpp for Xorg

 File Changes

    - *M* xrdp/xrdp_mm.c
    <https://github.com/neutrinolabs/xrdp/pull/554/files#diff-0> (17)

 Patch Links:

    - https://github.com/neutrinolabs/xrdp/pull/554.patch
    - https://github.com/neutrinolabs/xrdp/pull/554.diff

 —
 You are receiving this because you are subscribed to this thread.
 Reply to this email directly, view it on GitHub
 <#554>, or mute the thread
 <https://github.com/notifications/unsubscribe-auth/ADTH1OPzTDrfh2xz8nDiljb1dLkUxYloks5rIkZSgaJpZM4LO8GR>
 .

-- 
Idan Freiberg

PGP FP: 8108 7EC9 806E 4980 75F2  72B3 8AD3 2D04 337B 1F18",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,555,2016-12-16T21:55:06Z,2016-12-18T07:44:50Z,2016-12-18T07:48:46Z,MERGED,True,2,1,2,https://github.com/proski,Make libpainter a subpackage of xrdp,1,[],https://github.com/neutrinolabs/xrdp/pull/555,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/555,"This is a part of the noorders task for 0.9.1. With this change, libpainter will be configured and compiled automatically as part of the build.","This is a part of the noorders task for 0.9.1. With this change, libpainter will be configured and compiled automatically as part of the build.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,555,2016-12-16T21:55:06Z,2016-12-18T07:44:50Z,2016-12-18T07:48:46Z,MERGED,True,2,1,2,https://github.com/proski,Make libpainter a subpackage of xrdp,1,[],https://github.com/neutrinolabs/xrdp/pull/555,https://github.com/proski,2,https://github.com/neutrinolabs/xrdp/pull/555#issuecomment-267729585,"This is a part of the noorders task for 0.9.1. With this change, libpainter will be configured and compiled automatically as part of the build.","If we want libpainter support to be conditional for now, I'll need to change Makefile.am to respect XRDP_PAINTER, but I can only do it after #553 is merged.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,555,2016-12-16T21:55:06Z,2016-12-18T07:44:50Z,2016-12-18T07:48:46Z,MERGED,True,2,1,2,https://github.com/proski,Make libpainter a subpackage of xrdp,1,[],https://github.com/neutrinolabs/xrdp/pull/555,https://github.com/speidy,3,https://github.com/neutrinolabs/xrdp/pull/555#issuecomment-267767497,"This is a part of the noorders task for 0.9.1. With this change, libpainter will be configured and compiled automatically as part of the build.","+1
That's great!",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,556,2016-12-16T22:40:26Z,2016-12-21T02:14:45Z,2016-12-21T02:14:50Z,CLOSED,False,29,17,17,https://github.com/proski,[Test only] 0.9.1 test,3,[],https://github.com/neutrinolabs/xrdp/pull/556,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/556,This branch is for testing changes that are planned to be included in version 0.9.1.,This branch is for testing changes that are planned to be included in version 0.9.1.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,556,2016-12-16T22:40:26Z,2016-12-21T02:14:45Z,2016-12-21T02:14:50Z,CLOSED,False,29,17,17,https://github.com/proski,[Test only] 0.9.1 test,3,[],https://github.com/neutrinolabs/xrdp/pull/556,https://github.com/Natureshadow,2,https://github.com/neutrinolabs/xrdp/pull/556#issuecomment-267727505,This branch is for testing changes that are planned to be included in version 0.9.1.,Should I upload a build of this branch to Debian unstable to get people test it?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,556,2016-12-16T22:40:26Z,2016-12-21T02:14:45Z,2016-12-21T02:14:50Z,CLOSED,False,29,17,17,https://github.com/proski,[Test only] 0.9.1 test,3,[],https://github.com/neutrinolabs/xrdp/pull/556,https://github.com/proski,3,https://github.com/neutrinolabs/xrdp/pull/556#issuecomment-267728197,This branch is for testing changes that are planned to be included in version 0.9.1.,Good idea. But let's test it for ourselves first. I started seeing reconnect issues with VNC. Let's try to fix it before giving this code to Debian testers.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,556,2016-12-16T22:40:26Z,2016-12-21T02:14:45Z,2016-12-21T02:14:50Z,CLOSED,False,29,17,17,https://github.com/proski,[Test only] 0.9.1 test,3,[],https://github.com/neutrinolabs/xrdp/pull/556,https://github.com/proski,4,https://github.com/neutrinolabs/xrdp/pull/556#issuecomment-267738583,This branch is for testing changes that are planned to be included in version 0.9.1.,Now we can upload this branch to Debian unstable. Please make sure to use --enable-painter to enable the new noorders functionality.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,556,2016-12-16T22:40:26Z,2016-12-21T02:14:45Z,2016-12-21T02:14:50Z,CLOSED,False,29,17,17,https://github.com/proski,[Test only] 0.9.1 test,3,[],https://github.com/neutrinolabs/xrdp/pull/556,https://github.com/speidy,5,https://github.com/neutrinolabs/xrdp/pull/556#issuecomment-267767363,This branch is for testing changes that are planned to be included in version 0.9.1.,I think we should also include #539,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,556,2016-12-16T22:40:26Z,2016-12-21T02:14:45Z,2016-12-21T02:14:50Z,CLOSED,False,29,17,17,https://github.com/proski,[Test only] 0.9.1 test,3,[],https://github.com/neutrinolabs/xrdp/pull/556,https://github.com/proski,6,https://github.com/neutrinolabs/xrdp/pull/556#issuecomment-268332742,This branch is for testing changes that are planned to be included in version 0.9.1.,"Update to the current remaining PRs. No more fixups, everything is in PRs.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,556,2016-12-16T22:40:26Z,2016-12-21T02:14:45Z,2016-12-21T02:14:50Z,CLOSED,False,29,17,17,https://github.com/proski,[Test only] 0.9.1 test,3,[],https://github.com/neutrinolabs/xrdp/pull/556,https://github.com/proski,7,https://github.com/neutrinolabs/xrdp/pull/556#issuecomment-268415493,This branch is for testing changes that are planned to be included in version 0.9.1.,"All patches have been applied, the ""devel"" branch can be used for testing now. Closing this PR.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,557,2016-12-17T00:01:57Z,2016-12-19T06:58:41Z,2016-12-19T07:38:05Z,MERGED,True,17,14,1,https://github.com/proski,Fix Parallels Client on Mac,1,[],https://github.com/neutrinolabs/xrdp/pull/557,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/557,"This is for 0.9.1. This code was in the original noorders branch (d3d2bdc) but wasn't submitted (yet).

self->line_size should be calculated in xrdp_bitmap_create_with_data()
The code was in the original noorders branch but got lost. Without this
fix, the image is garbled.
The client should be configured with compression disabled, or it will
disconnect. That's a known problem.","This is for 0.9.1. This code was in the original noorders branch (d3d2bdc) but wasn't submitted (yet).

self->line_size should be calculated in xrdp_bitmap_create_with_data()
The code was in the original noorders branch but got lost. Without this
fix, the image is garbled.
The client should be configured with compression disabled, or it will
disconnect. That's a known problem.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,557,2016-12-17T00:01:57Z,2016-12-19T06:58:41Z,2016-12-19T07:38:05Z,MERGED,True,17,14,1,https://github.com/proski,Fix Parallels Client on Mac,1,[],https://github.com/neutrinolabs/xrdp/pull/557,https://github.com/proski,2,https://github.com/neutrinolabs/xrdp/pull/557#issuecomment-267795674,"This is for 0.9.1. This code was in the original noorders branch (d3d2bdc) but wasn't submitted (yet).

self->line_size should be calculated in xrdp_bitmap_create_with_data()
The code was in the original noorders branch but got lost. Without this
fix, the image is garbled.
The client should be configured with compression disabled, or it will
disconnect. That's a known problem.","@jsorg71 You are welcome to submit this change as a separate PR under your name, and I'll close this one.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,558,2016-12-17T02:33:42Z,2016-12-19T06:58:53Z,2016-12-19T07:37:51Z,MERGED,True,15,3,1,https://github.com/proski,"Use per-display VNC password files, remove old style password if found",1,[],https://github.com/neutrinolabs/xrdp/pull/558,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/558,"It's a regression, the fix should be in 0.9.1. In previous versions, it was possible to have multiple VNC sessions. This should really fix #519

Every session uses its own VNC password, so keep then in separate files.
The old style password file uses the user's password encrypted with a
known key. Since we are not replacing it anymore, we should remove it.","It's a regression, the fix should be in 0.9.1. In previous versions, it was possible to have multiple VNC sessions. This should really fix #519

Every session uses its own VNC password, so keep then in separate files.
The old style password file uses the user's password encrypted with a
known key. Since we are not replacing it anymore, we should remove it.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,559,2016-12-17T02:50:13Z,2016-12-18T07:19:20Z,2016-12-18T07:43:27Z,MERGED,True,7,8,2,https://github.com/proski,"Update manual pages - document ""param"", fix session type description",1,[],https://github.com/neutrinolabs/xrdp/pull/559,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/559,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,562,2016-12-18T06:52:10Z,2016-12-18T13:56:07Z,2016-12-18T17:16:39Z,MERGED,True,49,3,10,https://github.com/proski,Distribute all files except git and github specific data,1,[],https://github.com/neutrinolabs/xrdp/pull/562,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/562,"Another patch that needs to be in 0.9.1. I don't know in the 0.9.1 release will be made using make dist. If yes, it would be missing a lot of files that were included in older releases. Even the sources of X11rdp would not be included.
I believe that it would be better to err on the side of distributing files. If some files are truly useless, we should remove them from git first.","Another patch that needs to be in 0.9.1. I don't know in the 0.9.1 release will be made using make dist. If yes, it would be missing a lot of files that were included in older releases. Even the sources of X11rdp would not be included.
I believe that it would be better to err on the side of distributing files. If some files are truly useless, we should remove them from git first.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,562,2016-12-18T06:52:10Z,2016-12-18T13:56:07Z,2016-12-18T17:16:39Z,MERGED,True,49,3,10,https://github.com/proski,Distribute all files except git and github specific data,1,[],https://github.com/neutrinolabs/xrdp/pull/562,https://github.com/speidy,2,https://github.com/neutrinolabs/xrdp/pull/562#issuecomment-267807445,"Another patch that needs to be in 0.9.1. I don't know in the 0.9.1 release will be made using make dist. If yes, it would be missing a lot of files that were included in older releases. Even the sources of X11rdp would not be included.
I believe that it would be better to err on the side of distributing files. If some files are truly useless, we should remove them from git first.",+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,563,2016-12-18T18:12:40Z,2016-12-19T06:58:31Z,2016-12-19T07:38:45Z,MERGED,True,2,2,2,https://github.com/proski,Update submodules to the latest revisions,1,[],https://github.com/neutrinolabs/xrdp/pull/563,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/563,"This is for 0.9.1
For libpainter, empty files AUTHORS, ChangeLog, NEWS and README would not be created by bootstrap. Those files are distributed if found. Distributing empty README would by not nice to the users.
For librfxcodec, it compiles with C++ now, so it brings the code to the level that we ask the contributors to follow. The compilation would also stops complaining of the unknown NASM tag.","This is for 0.9.1
For libpainter, empty files AUTHORS, ChangeLog, NEWS and README would not be created by bootstrap. Those files are distributed if found. Distributing empty README would by not nice to the users.
For librfxcodec, it compiles with C++ now, so it brings the code to the level that we ask the contributors to follow. The compilation would also stops complaining of the unknown NASM tag.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,563,2016-12-18T18:12:40Z,2016-12-19T06:58:31Z,2016-12-19T07:38:45Z,MERGED,True,2,2,2,https://github.com/proski,Update submodules to the latest revisions,1,[],https://github.com/neutrinolabs/xrdp/pull/563,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/563#issuecomment-267866523,"This is for 0.9.1
For libpainter, empty files AUTHORS, ChangeLog, NEWS and README would not be created by bootstrap. Those files are distributed if found. Distributing empty README would by not nice to the users.
For librfxcodec, it compiles with C++ now, so it brings the code to the level that we ask the contributors to follow. The compilation would also stops complaining of the unknown NASM tag.",+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,564,2016-12-20T07:29:34Z,2016-12-20T19:19:34Z,2016-12-20T21:05:49Z,MERGED,True,2,2,2,https://github.com/proski,Update submodules to their v0.1.0 tags,1,[],https://github.com/neutrinolabs/xrdp/pull/564,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/564,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,564,2016-12-20T07:29:34Z,2016-12-20T19:19:34Z,2016-12-20T21:05:49Z,MERGED,True,2,2,2,https://github.com/proski,Update submodules to their v0.1.0 tags,1,[],https://github.com/neutrinolabs/xrdp/pull/564,https://github.com/proski,2,https://github.com/neutrinolabs/xrdp/pull/564#issuecomment-268174574,,The install path for *.pc files is inconsistent. Let's merge it before 0.9.1.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,564,2016-12-20T07:29:34Z,2016-12-20T19:19:34Z,2016-12-20T21:05:49Z,MERGED,True,2,2,2,https://github.com/proski,Update submodules to their v0.1.0 tags,1,[],https://github.com/neutrinolabs/xrdp/pull/564,https://github.com/speidy,3,https://github.com/neutrinolabs/xrdp/pull/564#issuecomment-268175259,,"I prefer tagging master branches on libpainter and librfxcodec and
reference the tag here
בתאריך יום ג׳, 20 בדצמ׳ 2016 ב-9:33 מאת Pavel Roskin <
notifications@github.com>:
 The install path for *.pc files is inconsistent. Let's merge it before
 0.9.1.

 —
 You are receiving this because you are subscribed to this thread.
 Reply to this email directly, view it on GitHub
 <#564 (comment)>,
 or mute the thread
 <https://github.com/notifications/unsubscribe-auth/ADTH1H6jiG3HIsxSVNgB8yQO2u_R9LWyks5rJ4QsgaJpZM4LRivF>
 .

-- 
Idan Freiberg

PGP FP: 8108 7EC9 806E 4980 75F2  72B3 8AD3 2D04 337B 1F18",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,564,2016-12-20T07:29:34Z,2016-12-20T19:19:34Z,2016-12-20T21:05:49Z,MERGED,True,2,2,2,https://github.com/proski,Update submodules to their v0.1.0 tags,1,[],https://github.com/neutrinolabs/xrdp/pull/564,https://github.com/proski,4,https://github.com/neutrinolabs/xrdp/pull/564#issuecomment-268177608,,"Sounds good, as long as somebody creates the tags.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,564,2016-12-20T07:29:34Z,2016-12-20T19:19:34Z,2016-12-20T21:05:49Z,MERGED,True,2,2,2,https://github.com/proski,Update submodules to their v0.1.0 tags,1,[],https://github.com/neutrinolabs/xrdp/pull/564,https://github.com/speidy,5,https://github.com/neutrinolabs/xrdp/pull/564#issuecomment-268289612,,"OK tags pushed now in libpainter and librfxcodec repos:
https://github.com/neutrinolabs/libpainter/releases/tag/v0.1.0
https://github.com/neutrinolabs/librfxcodec/releases/tag/v0.1.0",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,564,2016-12-20T07:29:34Z,2016-12-20T19:19:34Z,2016-12-20T21:05:49Z,MERGED,True,2,2,2,https://github.com/proski,Update submodules to their v0.1.0 tags,1,[],https://github.com/neutrinolabs/xrdp/pull/564,https://github.com/proski,6,https://github.com/neutrinolabs/xrdp/pull/564#issuecomment-268330133,,PR update to use the tags,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,565,2016-12-20T08:04:03Z,2016-12-20T10:21:26Z,2016-12-20T16:41:05Z,MERGED,True,2,2,1,https://github.com/proski,xrdp-sesman: fix help text to match the manual and the actual behavior,1,[],https://github.com/neutrinolabs/xrdp/pull/565,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/565,"This is for 0.9.1. The patch is minimal on purpose to minimize risks.

The help text mentions ""LIST"" and ""KILL"" commands, but the manual says
""list"" and ""kill"", and the command line parser expects the later.","This is for 0.9.1. The patch is minimal on purpose to minimize risks.

The help text mentions ""LIST"" and ""KILL"" commands, but the manual says
""list"" and ""kill"", and the command line parser expects the later.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,565,2016-12-20T08:04:03Z,2016-12-20T10:21:26Z,2016-12-20T16:41:05Z,MERGED,True,2,2,1,https://github.com/proski,xrdp-sesman: fix help text to match the manual and the actual behavior,1,[],https://github.com/neutrinolabs/xrdp/pull/565,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/565#issuecomment-268180098,"This is for 0.9.1. The patch is minimal on purpose to minimize risks.

The help text mentions ""LIST"" and ""KILL"" commands, but the manual says
""list"" and ""kill"", and the command line parser expects the later.",+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,565,2016-12-20T08:04:03Z,2016-12-20T10:21:26Z,2016-12-20T16:41:05Z,MERGED,True,2,2,1,https://github.com/proski,xrdp-sesman: fix help text to match the manual and the actual behavior,1,[],https://github.com/neutrinolabs/xrdp/pull/565,https://github.com/speidy,3,https://github.com/neutrinolabs/xrdp/pull/565#issuecomment-268205125,"This is for 0.9.1. The patch is minimal on purpose to minimize risks.

The help text mentions ""LIST"" and ""KILL"" commands, but the manual says
""list"" and ""kill"", and the command line parser expects the later.","+1 let's merge
בתאריך יום ג׳, 20 בדצמ׳ 2016 ב-10:06 מאת metalefty <notifications@github.com
:
 +1

 —
 You are receiving this because you are subscribed to this thread.
 Reply to this email directly, view it on GitHub
 <#565 (comment)>,
 or mute the thread
 <https://github.com/notifications/unsubscribe-auth/ADTH1F7pIeT5rHgTKpy_ujX-U7KNad5_ks5rJ4xwgaJpZM4LRkDt>
 .

-- 
Idan Freiberg

PGP FP: 8108 7EC9 806E 4980 75F2  72B3 8AD3 2D04 337B 1F18",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,565,2016-12-20T08:04:03Z,2016-12-20T10:21:26Z,2016-12-20T16:41:05Z,MERGED,True,2,2,1,https://github.com/proski,xrdp-sesman: fix help text to match the manual and the actual behavior,1,[],https://github.com/neutrinolabs/xrdp/pull/565,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/565#issuecomment-268207159,"This is for 0.9.1. The patch is minimal on purpose to minimize risks.

The help text mentions ""LIST"" and ""KILL"" commands, but the manual says
""list"" and ""kill"", and the command line parser expects the later.",Merging not waiting 24 hours.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,566,2016-12-20T16:49:54Z,2016-12-21T01:54:47Z,2016-12-21T02:13:05Z,MERGED,True,8,2,2,https://github.com/proski,"Compile libpainter only if enabled, fix path to libpainter.a",1,[],https://github.com/neutrinolabs/xrdp/pull/566,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/566,This is for 0.9.1 - fixes on top of the last noorders patches.,This is for 0.9.1 - fixes on top of the last noorders patches.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,566,2016-12-20T16:49:54Z,2016-12-21T01:54:47Z,2016-12-21T02:13:05Z,MERGED,True,8,2,2,https://github.com/proski,"Compile libpainter only if enabled, fix path to libpainter.a",1,[],https://github.com/neutrinolabs/xrdp/pull/566,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/566#issuecomment-268400792,This is for 0.9.1 - fixes on top of the last noorders patches.,+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,567,2016-12-20T18:50:10Z,2016-12-21T01:56:25Z,2016-12-21T02:12:53Z,MERGED,True,6,0,1,https://github.com/proski,Don't fail without working nasm if rfxcodec is not enabled,1,[],https://github.com/neutrinolabs/xrdp/pull/567,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/567,This is for 0.9.1. Users without nasm should still be able to compile xrdp if they don't specifically request rfxcodec.,This is for 0.9.1. Users without nasm should still be able to compile xrdp if they don't specifically request rfxcodec.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,567,2016-12-20T18:50:10Z,2016-12-21T01:56:25Z,2016-12-21T02:12:53Z,MERGED,True,6,0,1,https://github.com/proski,Don't fail without working nasm if rfxcodec is not enabled,1,[],https://github.com/neutrinolabs/xrdp/pull/567,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/567#issuecomment-268400750,This is for 0.9.1. Users without nasm should still be able to compile xrdp if they don't specifically request rfxcodec.,+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,568,2016-12-20T19:03:21Z,2016-12-21T01:57:12Z,2016-12-24T09:14:35Z,MERGED,True,15,15,15,https://github.com/proski,Update version to 0.9.1,1,[],https://github.com/neutrinolabs/xrdp/pull/568,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/568,"This is for 0.9.1, obviously, to be applied immediately before the release. We have many places where the version is used, let's take care of every occurrence. Please note that xrdp-sesadmin.8 uses 0.7.0 now, not 0.9.0.","This is for 0.9.1, obviously, to be applied immediately before the release. We have many places where the version is used, let's take care of every occurrence. Please note that xrdp-sesadmin.8 uses 0.7.0 now, not 0.9.0.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,568,2016-12-20T19:03:21Z,2016-12-21T01:57:12Z,2016-12-24T09:14:35Z,MERGED,True,15,15,15,https://github.com/proski,Update version to 0.9.1,1,[],https://github.com/neutrinolabs/xrdp/pull/568,https://github.com/itamarjp,2,https://github.com/neutrinolabs/xrdp/pull/568#issuecomment-268351110,"This is for 0.9.1, obviously, to be applied immediately before the release. We have many places where the version is used, let's take care of every occurrence. Please note that xrdp-sesadmin.8 uses 0.7.0 now, not 0.9.0.",why not using auto-tools to replace the version in man files ?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,568,2016-12-20T19:03:21Z,2016-12-21T01:57:12Z,2016-12-24T09:14:35Z,MERGED,True,15,15,15,https://github.com/proski,Update version to 0.9.1,1,[],https://github.com/neutrinolabs/xrdp/pull/568,https://github.com/proski,3,https://github.com/neutrinolabs/xrdp/pull/568#issuecomment-268360865,"This is for 0.9.1, obviously, to be applied immediately before the release. We have many places where the version is used, let's take care of every occurrence. Please note that xrdp-sesadmin.8 uses 0.7.0 now, not 0.9.0.",I like the idea of using autoconf to create manual pages. It would allow us to document paths as configured. But it's obviously not 0.9.1 material.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,568,2016-12-20T19:03:21Z,2016-12-21T01:57:12Z,2016-12-24T09:14:35Z,MERGED,True,15,15,15,https://github.com/proski,Update version to 0.9.1,1,[],https://github.com/neutrinolabs/xrdp/pull/568,https://github.com/itamarjp,4,https://github.com/neutrinolabs/xrdp/pull/568#issuecomment-268365231,"This is for 0.9.1, obviously, to be applied immediately before the release. We have many places where the version is used, let's take care of every occurrence. Please note that xrdp-sesadmin.8 uses 0.7.0 now, not 0.9.0.",I mean using @Version@ and AC_CONFIG_FILES(),True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,568,2016-12-20T19:03:21Z,2016-12-21T01:57:12Z,2016-12-24T09:14:35Z,MERGED,True,15,15,15,https://github.com/proski,Update version to 0.9.1,1,[],https://github.com/neutrinolabs/xrdp/pull/568,https://github.com/proski,5,https://github.com/neutrinolabs/xrdp/pull/568#issuecomment-268365516,"This is for 0.9.1, obviously, to be applied immediately before the release. We have many places where the version is used, let's take care of every occurrence. Please note that xrdp-sesadmin.8 uses 0.7.0 now, not 0.9.0.",I understand,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,568,2016-12-20T19:03:21Z,2016-12-21T01:57:12Z,2016-12-24T09:14:35Z,MERGED,True,15,15,15,https://github.com/proski,Update version to 0.9.1,1,[],https://github.com/neutrinolabs/xrdp/pull/568,https://github.com/itamarjp,6,https://github.com/neutrinolabs/xrdp/pull/568#issuecomment-268922706,"This is for 0.9.1, obviously, to be applied immediately before the release. We have many places where the version is used, let's take care of every occurrence. Please note that xrdp-sesadmin.8 uses 0.7.0 now, not 0.9.0.","Can you send a new one, something like 0.9.1.1 ?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,568,2016-12-20T19:03:21Z,2016-12-21T01:57:12Z,2016-12-24T09:14:35Z,MERGED,True,15,15,15,https://github.com/proski,Update version to 0.9.1,1,[],https://github.com/neutrinolabs/xrdp/pull/568,https://github.com/proski,7,https://github.com/neutrinolabs/xrdp/pull/568#issuecomment-269076447,"This is for 0.9.1, obviously, to be applied immediately before the release. We have many places where the version is used, let's take care of every occurrence. Please note that xrdp-sesadmin.8 uses 0.7.0 now, not 0.9.0.","Done in #583, no need to change version at this time.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,570,2016-12-21T04:28:57Z,2016-12-22T11:51:42Z,2016-12-24T23:04:53Z,MERGED,True,128,37,3,https://github.com/speidy,Add README.md,3,[],https://github.com/neutrinolabs/xrdp/pull/570,https://github.com/speidy,1,https://github.com/neutrinolabs/xrdp/pull/570,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,570,2016-12-21T04:28:57Z,2016-12-22T11:51:42Z,2016-12-24T23:04:53Z,MERGED,True,128,37,3,https://github.com/speidy,Add README.md,3,[],https://github.com/neutrinolabs/xrdp/pull/570,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/570#issuecomment-268433374,,"Please keep old readme.txt for a while for RH-Matic/o-Matic compatibility.
Maybe until the next March release.
Like this.
xrdp 0.9.1

(the contents of this file has been moved to README.md)",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,570,2016-12-21T04:28:57Z,2016-12-22T11:51:42Z,2016-12-24T23:04:53Z,MERGED,True,128,37,3,https://github.com/speidy,Add README.md,3,[],https://github.com/neutrinolabs/xrdp/pull/570,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/570#issuecomment-268433824,,The version in the first line is important for o-matic. Other lines are for human.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,570,2016-12-21T04:28:57Z,2016-12-22T11:51:42Z,2016-12-24T23:04:53Z,MERGED,True,128,37,3,https://github.com/speidy,Add README.md,3,[],https://github.com/neutrinolabs/xrdp/pull/570,https://github.com/speidy,4,https://github.com/neutrinolabs/xrdp/pull/570#issuecomment-268434606,,"oh, sorry, i'll fix that",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,570,2016-12-21T04:28:57Z,2016-12-22T11:51:42Z,2016-12-24T23:04:53Z,MERGED,True,128,37,3,https://github.com/speidy,Add README.md,3,[],https://github.com/neutrinolabs/xrdp/pull/570,https://github.com/speidy,5,https://github.com/neutrinolabs/xrdp/pull/570#issuecomment-268434818,,added the line.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,570,2016-12-21T04:28:57Z,2016-12-22T11:51:42Z,2016-12-24T23:04:53Z,MERGED,True,128,37,3,https://github.com/speidy,Add README.md,3,[],https://github.com/neutrinolabs/xrdp/pull/570,https://github.com/metalefty,6,https://github.com/neutrinolabs/xrdp/pull/570#issuecomment-268436189,,LGTM.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,570,2016-12-21T04:28:57Z,2016-12-22T11:51:42Z,2016-12-24T23:04:53Z,MERGED,True,128,37,3,https://github.com/speidy,Add README.md,3,[],https://github.com/neutrinolabs/xrdp/pull/570,https://github.com/proski,7,https://github.com/neutrinolabs/xrdp/pull/570#issuecomment-268450441,,"This PR should not be merged as as. It changes the submodule commits, which is not the intended effect. I pulled the PR into my local branch, and I see
diff --git a/libpainter b/libpainter
index 7156131..15e9448 160000
--- a/libpainter
+++ b/libpainter
@@ -1 +1 @@
-Subproject commit 71561310ccb2cf9c086e1ca533cd3b846283c3e5
+Subproject commit 15e9448f7cd770095d514ff1f6cf470d68245bec
diff --git a/librfxcodec b/librfxcodec
index 03a3689..29fdb8f 160000
--- a/librfxcodec
+++ b/librfxcodec
@@ -1 +1 @@
-Subproject commit 03a36890da75d6c27a31bcd1caae4bb9c839c6f6
+Subproject commit 29fdb8f029bc887d30e0f5c097d2dee820225f3d

Whenever checking out a branch with git, run git submodule update to bring the modules up to date. Also use tig to double check the state of the working directory.
Also, it would be nice to distribute README.md, as it has information useful to the end users. README.md should be added to the top-level Makefile.am",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,570,2016-12-21T04:28:57Z,2016-12-22T11:51:42Z,2016-12-24T23:04:53Z,MERGED,True,128,37,3,https://github.com/speidy,Add README.md,3,[],https://github.com/neutrinolabs/xrdp/pull/570,https://github.com/speidy,8,https://github.com/neutrinolabs/xrdp/pull/570#issuecomment-268451028,,"Oops, will fix that
בתאריך יום ד׳, 21 בדצמ׳ 2016 ב-8:52 מאת Pavel Roskin <
notifications@github.com>:
 This PR should not be merged as as. It changes the submodule commits,
 which is not the intended effect. I pulled the PR into my local branch, and
 I see

 diff --git a/libpainter b/libpainter
 index 7156131..15e9448 160000
 --- a/libpainter
 +++ b/libpainter
 @@ -1 +1 @@
 -Subproject commit 7156131
 +Subproject commit 15e9448
 diff --git a/librfxcodec b/librfxcodec
 index 03a3689..29fdb8f 160000
 --- a/librfxcodec
 +++ b/librfxcodec
 @@ -1 +1 @@
 -Subproject commit 03a3689
 +Subproject commit 29fdb8f

 Whenever checking out a branch with git, run git submodule update to
 bring the modules up to date. Also use tig to double check the state of the
 working directory.

 Also, it would be nice to distribute README.md, as it has information
 useful to the end users. README.md should be added to the top-level
 Makefile.am

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub
 <#570 (comment)>,
 or mute the thread
 <https://github.com/notifications/unsubscribe-auth/ADTH1A8HBSoJOfnkZ4ki67_Qi1VutTjOks5rKMyvgaJpZM4LSkKr>
 .

-- 
Idan Freiberg

PGP FP: 8108 7EC9 806E 4980 75F2  72B3 8AD3 2D04 337B 1F18",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,570,2016-12-21T04:28:57Z,2016-12-22T11:51:42Z,2016-12-24T23:04:53Z,MERGED,True,128,37,3,https://github.com/speidy,Add README.md,3,[],https://github.com/neutrinolabs/xrdp/pull/570,https://github.com/speidy,9,https://github.com/neutrinolabs/xrdp/pull/570#issuecomment-268457446,,fixed.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,570,2016-12-21T04:28:57Z,2016-12-22T11:51:42Z,2016-12-24T23:04:53Z,MERGED,True,128,37,3,https://github.com/speidy,Add README.md,3,[],https://github.com/neutrinolabs/xrdp/pull/570,https://github.com/speidy,10,https://github.com/neutrinolabs/xrdp/pull/570#issuecomment-268644378,,"updated to wiki revision.
also, fixed the issue in readme.txt and Makefile.am",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,571,2016-12-21T04:47:04Z,2016-12-22T07:56:10Z,2016-12-24T23:05:53Z,MERGED,True,26,0,2,https://github.com/speidy,Add NEWS.md,1,[],https://github.com/neutrinolabs/xrdp/pull/571,https://github.com/speidy,1,https://github.com/neutrinolabs/xrdp/pull/571,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,571,2016-12-21T04:47:04Z,2016-12-22T07:56:10Z,2016-12-24T23:05:53Z,MERGED,True,26,0,2,https://github.com/speidy,Add NEWS.md,1,[],https://github.com/neutrinolabs/xrdp/pull/571,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/571#issuecomment-268436212,,LGTM.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,571,2016-12-21T04:47:04Z,2016-12-22T07:56:10Z,2016-12-24T23:05:53Z,MERGED,True,26,0,2,https://github.com/speidy,Add NEWS.md,1,[],https://github.com/neutrinolabs/xrdp/pull/571,https://github.com/proski,3,https://github.com/neutrinolabs/xrdp/pull/571#issuecomment-268450710,,"Changes to the submodules should not be merged!
Please add NEWS.md to EXTRA_DIST in the top-level Makefile.am to have it distributed.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,571,2016-12-21T04:47:04Z,2016-12-22T07:56:10Z,2016-12-24T23:05:53Z,MERGED,True,26,0,2,https://github.com/speidy,Add NEWS.md,1,[],https://github.com/neutrinolabs/xrdp/pull/571,https://github.com/speidy,4,https://github.com/neutrinolabs/xrdp/pull/571#issuecomment-268457919,,Fixed.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,571,2016-12-21T04:47:04Z,2016-12-22T07:56:10Z,2016-12-24T23:05:53Z,MERGED,True,26,0,2,https://github.com/speidy,Add NEWS.md,1,[],https://github.com/neutrinolabs/xrdp/pull/571,https://github.com/proski,5,https://github.com/neutrinolabs/xrdp/pull/571#issuecomment-268577656,,"I've updated https://github.com/neutrinolabs/xrdp/wiki/NEWS
Let's use the wiki as the master version. Wiki is better suited for the editorial work.
Speaking of Makefile.am, I would prefer to have EXTRA_DIST entries sorted in POSIX locale (NEWS.md after COPYING), but it's nitpicking.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,571,2016-12-21T04:47:04Z,2016-12-22T07:56:10Z,2016-12-24T23:05:53Z,MERGED,True,26,0,2,https://github.com/speidy,Add NEWS.md,1,[],https://github.com/neutrinolabs/xrdp/pull/571,https://github.com/speidy,6,https://github.com/neutrinolabs/xrdp/pull/571#issuecomment-268641705,,"ok, fixed now.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,574,2016-12-22T23:06:59Z,2017-01-11T20:27:56Z,2017-01-11T20:27:56Z,CLOSED,False,1,0,1,https://github.com/proski,Don't call file_read_section() on unitialized section name,1,[],https://github.com/neutrinolabs/xrdp/pull/574,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/574,"This can only happen if xrdp.ini is corrupted and has no sections for
backends.","This can only happen if xrdp.ini is corrupted and has no sections for
backends.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,574,2016-12-22T23:06:59Z,2017-01-11T20:27:56Z,2017-01-11T20:27:56Z,CLOSED,False,1,0,1,https://github.com/proski,Don't call file_read_section() on unitialized section name,1,[],https://github.com/neutrinolabs/xrdp/pull/574,https://github.com/jsorg71,2,https://github.com/neutrinolabs/xrdp/pull/574#issuecomment-271979095,"This can only happen if xrdp.ini is corrupted and has no sections for
backends.",+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,574,2016-12-22T23:06:59Z,2017-01-11T20:27:56Z,2017-01-11T20:27:56Z,CLOSED,False,1,0,1,https://github.com/proski,Don't call file_read_section() on unitialized section name,1,[],https://github.com/neutrinolabs/xrdp/pull/574,https://github.com/speidy,3,https://github.com/neutrinolabs/xrdp/pull/574#issuecomment-271980670,"This can only happen if xrdp.ini is corrupted and has no sections for
backends.","+1
בתאריך יום ד׳, 11 בינו׳ 2017 ב-22:06 מאת jsorg71 <notifications@github.com>:
 +1

 —
 You are receiving this because you are subscribed to this thread.
 Reply to this email directly, view it on GitHub
 <#574 (comment)>,
 or mute the thread
 <https://github.com/notifications/unsubscribe-auth/ADTH1FuwYL5s0m_9a0L9y6-nczy6wNsiks5rRTZIgaJpZM4LUdFG>
 .

-- 
Idan Freiberg

PGP FP: 8108 7EC9 806E 4980 75F2  72B3 8AD3 2D04 337B 1F18",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,574,2016-12-22T23:06:59Z,2017-01-11T20:27:56Z,2017-01-11T20:27:56Z,CLOSED,False,1,0,1,https://github.com/proski,Don't call file_read_section() on unitialized section name,1,[],https://github.com/neutrinolabs/xrdp/pull/574,https://github.com/jsorg71,4,https://github.com/neutrinolabs/xrdp/pull/574#issuecomment-271984428,"This can only happen if xrdp.ini is corrupted and has no sections for
backends.",merged as d46a26c,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,575,2016-12-22T23:08:17Z,2017-01-11T20:02:51Z,2017-01-11T20:02:51Z,CLOSED,False,16,16,12,https://github.com/proski,Constify the value argument to mod_set_param,1,[],https://github.com/neutrinolabs/xrdp/pull/575,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/575,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,575,2016-12-22T23:08:17Z,2017-01-11T20:02:51Z,2017-01-11T20:02:51Z,CLOSED,False,16,16,12,https://github.com/proski,Constify the value argument to mod_set_param,1,[],https://github.com/neutrinolabs/xrdp/pull/575,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/575#issuecomment-269186457,,+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,575,2016-12-22T23:08:17Z,2017-01-11T20:02:51Z,2017-01-11T20:02:51Z,CLOSED,False,16,16,12,https://github.com/proski,Constify the value argument to mod_set_param,1,[],https://github.com/neutrinolabs/xrdp/pull/575,https://github.com/jsorg71,3,https://github.com/neutrinolabs/xrdp/pull/575#issuecomment-271977983,,merged as b8ed23d,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,576,2016-12-23T07:24:26Z,2017-01-10T08:30:14Z,2017-01-11T02:24:49Z,MERGED,True,0,9,1,https://github.com/proski,Remove obsolete --enable-nopam option,1,[],https://github.com/neutrinolabs/xrdp/pull/576,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/576,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,576,2016-12-23T07:24:26Z,2017-01-10T08:30:14Z,2017-01-11T02:24:49Z,MERGED,True,0,9,1,https://github.com/proski,Remove obsolete --enable-nopam option,1,[],https://github.com/neutrinolabs/xrdp/pull/576,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/576#issuecomment-269162791,,+1 the option was obsoleted more than 2 years ago. we can remove it now.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,578,2016-12-23T17:47:59Z,2017-01-13T09:03:06Z,2017-01-13T17:37:34Z,MERGED,True,3,18,5,https://github.com/proski,Warning fixes,3,[],https://github.com/neutrinolabs/xrdp/pull/578,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/578,This is a result of compiling xrdp with most warnings enabled and suppressing non-interesting warnings. This PR addressed duplicate and misplaced function declarations. It also fixes logging data that is not guaranteed to be initialized.,This is a result of compiling xrdp with most warnings enabled and suppressing non-interesting warnings. This PR addressed duplicate and misplaced function declarations. It also fixes logging data that is not guaranteed to be initialized.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,578,2016-12-23T17:47:59Z,2017-01-13T09:03:06Z,2017-01-13T17:37:34Z,MERGED,True,3,18,5,https://github.com/proski,Warning fixes,3,[],https://github.com/neutrinolabs/xrdp/pull/578,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/578#issuecomment-271515429,This is a result of compiling xrdp with most warnings enabled and suppressing non-interesting warnings. This PR addressed duplicate and misplaced function declarations. It also fixes logging data that is not guaranteed to be initialized.,+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,579,2016-12-23T17:55:43Z,2017-01-06T04:23:43Z,2017-01-06T05:35:55Z,MERGED,True,34,34,19,https://github.com/proski,"Use ""void"" for empty argument list in declarations",1,[],https://github.com/neutrinolabs/xrdp/pull/579,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/579,"In C, an empty argument list in a declaration means that the function
can accept any arguments. Use ""void"" instead, it means ""no arguments"".
C++ treats void and empty list as ""no arguments"".","In C, an empty argument list in a declaration means that the function
can accept any arguments. Use ""void"" instead, it means ""no arguments"".
C++ treats void and empty list as ""no arguments"".",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,579,2016-12-23T17:55:43Z,2017-01-06T04:23:43Z,2017-01-06T05:35:55Z,MERGED,True,34,34,19,https://github.com/proski,"Use ""void"" for empty argument list in declarations",1,[],https://github.com/neutrinolabs/xrdp/pull/579,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/579#issuecomment-269186380,"In C, an empty argument list in a declaration means that the function
can accept any arguments. Use ""void"" instead, it means ""no arguments"".
C++ treats void and empty list as ""no arguments"".",+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,580,2016-12-23T18:03:12Z,2017-01-10T08:26:14Z,2017-01-11T02:25:06Z,MERGED,True,0,3,1,https://github.com/proski,rail: remove unneeded call to XGetWindowAttributes(),1,[],https://github.com/neutrinolabs/xrdp/pull/580,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/580,"It is already called above ""if"" with the same arguments.","It is already called above ""if"" with the same arguments.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,580,2016-12-23T18:03:12Z,2017-01-10T08:26:14Z,2017-01-11T02:25:06Z,MERGED,True,0,3,1,https://github.com/proski,rail: remove unneeded call to XGetWindowAttributes(),1,[],https://github.com/neutrinolabs/xrdp/pull/580,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/580#issuecomment-271514355,"It is already called above ""if"" with the same arguments.",+1 it's a clear fix. merging.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,581,2016-12-23T19:39:44Z,2016-12-23T23:31:20Z,2016-12-23T23:37:54Z,CLOSED,False,53,8,6,https://github.com/VMelandri,One way clipboard feature,6,[],https://github.com/neutrinolabs/xrdp/pull/581,https://github.com/VMelandri,1,https://github.com/neutrinolabs/xrdp/pull/581,"This is a one-way clipboard basic implementation.
Discards clipboard selection event so they are not propagated to the client.
Feature needed for companies having to restrict the user ability to take data out from the server.","This is a one-way clipboard basic implementation.
Discards clipboard selection event so they are not propagated to the client.
Feature needed for companies having to restrict the user ability to take data out from the server.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,581,2016-12-23T19:39:44Z,2016-12-23T23:31:20Z,2016-12-23T23:37:54Z,CLOSED,False,53,8,6,https://github.com/VMelandri,One way clipboard feature,6,[],https://github.com/neutrinolabs/xrdp/pull/581,https://github.com/Natureshadow,2,https://github.com/neutrinolabs/xrdp/pull/581#issuecomment-269055426,"This is a one-way clipboard basic implementation.
Discards clipboard selection event so they are not propagated to the client.
Feature needed for companies having to restrict the user ability to take data out from the server.","What are the unrelated changes, e.g. to Makefile.am, for?
I think you should fix the commit messages as well, at least the snafu one which does not tell amything useful.
It really looks like you have a lot of mess from your working copy in there.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,581,2016-12-23T19:39:44Z,2016-12-23T23:31:20Z,2016-12-23T23:37:54Z,CLOSED,False,53,8,6,https://github.com/VMelandri,One way clipboard feature,6,[],https://github.com/neutrinolabs/xrdp/pull/581,https://github.com/VMelandri,3,https://github.com/neutrinolabs/xrdp/pull/581#issuecomment-269056209,"This is a one-way clipboard basic implementation.
Discards clipboard selection event so they are not propagated to the client.
Feature needed for companies having to restrict the user ability to take data out from the server.","Well, it's really just a typo that I realized after creating the PR, pasted a string in wrong place :) Will squash.
The changes to the makefile are to include config.h in clipboard.c, needs to read configuration during clipboard init.
My C skills are VERY rusty, haven't used it in >10 years, please point me to a better way to do the same thing, if possible.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,581,2016-12-23T19:39:44Z,2016-12-23T23:31:20Z,2016-12-23T23:37:54Z,CLOSED,False,53,8,6,https://github.com/VMelandri,One way clipboard feature,6,[],https://github.com/neutrinolabs/xrdp/pull/581,https://github.com/VMelandri,4,https://github.com/neutrinolabs/xrdp/pull/581#issuecomment-269056690,"This is a one-way clipboard basic implementation.
Discards clipboard selection event so they are not propagated to the client.
Feature needed for companies having to restrict the user ability to take data out from the server.","mmmm seems like github does not allow me to rewrite history to squash my commits.. Will redo this
PR",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,581,2016-12-23T19:39:44Z,2016-12-23T23:31:20Z,2016-12-23T23:37:54Z,CLOSED,False,53,8,6,https://github.com/VMelandri,One way clipboard feature,6,[],https://github.com/neutrinolabs/xrdp/pull/581,https://github.com/Natureshadow,5,https://github.com/neutrinolabs/xrdp/pull/581#issuecomment-269056788,"This is a one-way clipboard basic implementation.
Discards clipboard selection event so they are not propagated to the client.
Feature needed for companies having to restrict the user ability to take data out from the server.","mmmm seems like github does not allow me to rewrite history to squash
my commits.. Will redo this
PR
Sure it does…",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,581,2016-12-23T19:39:44Z,2016-12-23T23:31:20Z,2016-12-23T23:37:54Z,CLOSED,False,53,8,6,https://github.com/VMelandri,One way clipboard feature,6,[],https://github.com/neutrinolabs/xrdp/pull/581,https://github.com/VMelandri,6,https://github.com/neutrinolabs/xrdp/pull/581#issuecomment-269057069,"This is a one-way clipboard basic implementation.
Discards clipboard selection event so they are not propagated to the client.
Feature needed for companies having to restrict the user ability to take data out from the server.","It did let me, with --force, now the history in my repo seems fine, but this PR still shows the old commits..
¯_(ツ)_/¯",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,582,2016-12-23T23:53:21Z,2018-09-11T02:03:43Z,2018-09-11T02:03:43Z,CLOSED,False,63,10,8,https://github.com/VMelandri,Outbound-restricted clipboard: initial implementation by skipping xorg selection events,27,['waiting-feedback'],https://github.com/neutrinolabs/xrdp/pull/582,https://github.com/VMelandri,1,https://github.com/neutrinolabs/xrdp/pull/582,"This is a one-way clipboard basic implementation.
Discards clipboard selection event so they are not propagated to the client.
Feature needed for companies having to restrict the user ability to take data out from the server.

recreated after fixing commit history","This is a one-way clipboard basic implementation.
Discards clipboard selection event so they are not propagated to the client.
Feature needed for companies having to restrict the user ability to take data out from the server.

recreated after fixing commit history",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,582,2016-12-23T23:53:21Z,2018-09-11T02:03:43Z,2018-09-11T02:03:43Z,CLOSED,False,63,10,8,https://github.com/VMelandri,Outbound-restricted clipboard: initial implementation by skipping xorg selection events,27,['waiting-feedback'],https://github.com/neutrinolabs/xrdp/pull/582,https://github.com/VMelandri,2,https://github.com/neutrinolabs/xrdp/pull/582#issuecomment-269367729,"This is a one-way clipboard basic implementation.
Discards clipboard selection event so they are not propagated to the client.
Feature needed for companies having to restrict the user ability to take data out from the server.

recreated after fixing commit history",Please take a look if changes are now up to standard :),True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,582,2016-12-23T23:53:21Z,2018-09-11T02:03:43Z,2018-09-11T02:03:43Z,CLOSED,False,63,10,8,https://github.com/VMelandri,Outbound-restricted clipboard: initial implementation by skipping xorg selection events,27,['waiting-feedback'],https://github.com/neutrinolabs/xrdp/pull/582,https://github.com/VMelandri,3,https://github.com/neutrinolabs/xrdp/pull/582#issuecomment-269371535,"This is a one-way clipboard basic implementation.
Discards clipboard selection event so they are not propagated to the client.
Feature needed for companies having to restrict the user ability to take data out from the server.

recreated after fixing commit history",Manual page is in.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,582,2016-12-23T23:53:21Z,2018-09-11T02:03:43Z,2018-09-11T02:03:43Z,CLOSED,False,63,10,8,https://github.com/VMelandri,Outbound-restricted clipboard: initial implementation by skipping xorg selection events,27,['waiting-feedback'],https://github.com/neutrinolabs/xrdp/pull/582,https://github.com/VMelandri,4,https://github.com/neutrinolabs/xrdp/pull/582#issuecomment-269373129,"This is a one-way clipboard basic implementation.
Discards clipboard selection event so they are not propagated to the client.
Feature needed for companies having to restrict the user ability to take data out from the server.

recreated after fixing commit history",merged devel into branch to remove conflict on sesman.ini.5 man file,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,582,2016-12-23T23:53:21Z,2018-09-11T02:03:43Z,2018-09-11T02:03:43Z,CLOSED,False,63,10,8,https://github.com/VMelandri,Outbound-restricted clipboard: initial implementation by skipping xorg selection events,27,['waiting-feedback'],https://github.com/neutrinolabs/xrdp/pull/582,https://github.com/VMelandri,5,https://github.com/neutrinolabs/xrdp/pull/582#issuecomment-269800508,"This is a one-way clipboard basic implementation.
Discards clipboard selection event so they are not propagated to the client.
Feature needed for companies having to restrict the user ability to take data out from the server.

recreated after fixing commit history",@speidy @proski can we go ahead with this? I don't think there will be more development on this.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,582,2016-12-23T23:53:21Z,2018-09-11T02:03:43Z,2018-09-11T02:03:43Z,CLOSED,False,63,10,8,https://github.com/VMelandri,Outbound-restricted clipboard: initial implementation by skipping xorg selection events,27,['waiting-feedback'],https://github.com/neutrinolabs/xrdp/pull/582,https://github.com/proski,6,https://github.com/neutrinolabs/xrdp/pull/582#issuecomment-269998327,"This is a one-way clipboard basic implementation.
Discards clipboard selection event so they are not propagated to the client.
Feature needed for companies having to restrict the user ability to take data out from the server.

recreated after fixing commit history","I think the right approach would be to add support for private configuration flags. Xrdp sends message of type 1 (init) for successful login. 3 is used for configuration, but it always comes from RDP clients. We could use another number, say, 7003, for private configuration flags, with the same parameters. That message could be sent by xrdp immediately after the init message.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,582,2016-12-23T23:53:21Z,2018-09-11T02:03:43Z,2018-09-11T02:03:43Z,CLOSED,False,63,10,8,https://github.com/VMelandri,Outbound-restricted clipboard: initial implementation by skipping xorg selection events,27,['waiting-feedback'],https://github.com/neutrinolabs/xrdp/pull/582,https://github.com/bolkedebruin,7,https://github.com/neutrinolabs/xrdp/pull/582#issuecomment-419501038,"This is a one-way clipboard basic implementation.
Discards clipboard selection event so they are not propagated to the client.
Feature needed for companies having to restrict the user ability to take data out from the server.

recreated after fixing commit history",This would be an awesome feature. How can we get this moving again?,True,"{'HEART': ['https://github.com/gusajz', 'https://github.com/tomron27']}"
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,582,2016-12-23T23:53:21Z,2018-09-11T02:03:43Z,2018-09-11T02:03:43Z,CLOSED,False,63,10,8,https://github.com/VMelandri,Outbound-restricted clipboard: initial implementation by skipping xorg selection events,27,['waiting-feedback'],https://github.com/neutrinolabs/xrdp/pull/582,https://github.com/metalefty,8,https://github.com/neutrinolabs/xrdp/pull/582#issuecomment-420121202,"This is a one-way clipboard basic implementation.
Discards clipboard selection event so they are not propagated to the client.
Feature needed for companies having to restrict the user ability to take data out from the server.

recreated after fixing commit history","No feedback, no response to our change request. Out of scope now.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,583,2016-12-24T09:13:21Z,2016-12-24T14:33:02Z,2016-12-24T17:24:22Z,MERGED,True,54,58,14,https://github.com/proski,Substitute variables in manual pages,3,[],https://github.com/neutrinolabs/xrdp/pull/583,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/583,"This is valuable for the end user, as the actual paths are used in the manual pages.
The manual pages don't need to be updated with the new version before every release.
The xrdp-xcon manual page had to be removed. Make refused to build it, which is reasonable. Test tools that are not installed don't need manual pages. They can be documented by other means.
Autoconf documentation recommends using substitution in the makefile, not in AC_CONFIG_FILES, as the directories are only guaranteed to be fully expanded in the makefiles.","This is valuable for the end user, as the actual paths are used in the manual pages.
The manual pages don't need to be updated with the new version before every release.
The xrdp-xcon manual page had to be removed. Make refused to build it, which is reasonable. Test tools that are not installed don't need manual pages. They can be documented by other means.
Autoconf documentation recommends using substitution in the makefile, not in AC_CONFIG_FILES, as the directories are only guaranteed to be fully expanded in the makefiles.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,583,2016-12-24T09:13:21Z,2016-12-24T14:33:02Z,2016-12-24T17:24:22Z,MERGED,True,54,58,14,https://github.com/proski,Substitute variables in manual pages,3,[],https://github.com/neutrinolabs/xrdp/pull/583,https://github.com/proski,2,https://github.com/neutrinolabs/xrdp/pull/583#issuecomment-269092996,"This is valuable for the end user, as the actual paths are used in the manual pages.
The manual pages don't need to be updated with the new version before every release.
The xrdp-xcon manual page had to be removed. Make refused to build it, which is reasonable. Test tools that are not installed don't need manual pages. They can be documented by other means.
Autoconf documentation recommends using substitution in the makefile, not in AC_CONFIG_FILES, as the directories are only guaranteed to be fully expanded in the makefiles.","Thank you! In the future, please follow the 24 hours rule. A pull request should be at least 24 hours old for merging to let others comment on it. Even the PR author can find that additional improvements are needed.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,584,2016-12-25T02:55:20Z,2017-03-03T05:47:38Z,2017-03-03T05:47:38Z,MERGED,True,11,4,2,https://github.com/proski,"Add --enable-strict-locations option, describe default in its help text",1,[],https://github.com/neutrinolabs/xrdp/pull/584,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/584,"Rather than guess user's intention based on whether --prefix was
specified, use an explicit option to enable strict GNU Coding Standards
for installation directories.
The default is to use /etc and /var rather than corresponding directories
under prefix.
Use --enable-strict-locations in ""make distcheck"", it expects all
installed files to be under prefix.","Rather than guess user's intention based on whether --prefix was
specified, use an explicit option to enable strict GNU Coding Standards
for installation directories.
The default is to use /etc and /var rather than corresponding directories
under prefix.
Use --enable-strict-locations in ""make distcheck"", it expects all
installed files to be under prefix.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,584,2016-12-25T02:55:20Z,2017-03-03T05:47:38Z,2017-03-03T05:47:38Z,MERGED,True,11,4,2,https://github.com/proski,"Add --enable-strict-locations option, describe default in its help text",1,[],https://github.com/neutrinolabs/xrdp/pull/584,https://github.com/proski,2,https://github.com/neutrinolabs/xrdp/pull/584#issuecomment-272798906,"Rather than guess user's intention based on whether --prefix was
specified, use an explicit option to enable strict GNU Coding Standards
for installation directories.
The default is to use /etc and /var rather than corresponding directories
under prefix.
Use --enable-strict-locations in ""make distcheck"", it expects all
installed files to be under prefix.","The choice of the command line option name is consistent with xorgxrdp, which already has that option.
As it stands now, --prefix has unexpected side effects. The PR addresses the issue by

decoupling --prefix from non-standard install directories
documenting the default directories in ./configure --help
providing an option to get standard behavior",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,584,2016-12-25T02:55:20Z,2017-03-03T05:47:38Z,2017-03-03T05:47:38Z,MERGED,True,11,4,2,https://github.com/proski,"Add --enable-strict-locations option, describe default in its help text",1,[],https://github.com/neutrinolabs/xrdp/pull/584,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/584#issuecomment-282203407,"Rather than guess user's intention based on whether --prefix was
specified, use an explicit option to enable strict GNU Coding Standards
for installation directories.
The default is to use /etc and /var rather than corresponding directories
under prefix.
Use --enable-strict-locations in ""make distcheck"", it expects all
installed files to be under prefix.",+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,585,2016-12-25T03:08:24Z,2017-01-10T08:30:01Z,2017-01-11T02:24:57Z,MERGED,True,9,5,1,https://github.com/proski,".travis.yml: use -Werror, test two configurations - minimal and maximal",1,[],https://github.com/neutrinolabs/xrdp/pull/585,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/585,"Use separate entries for every command. Travis CI would still run the
commands sequentially, and it would provide better annotation for the
output.","Use separate entries for every command. Travis CI would still run the
commands sequentially, and it would provide better annotation for the
output.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,585,2016-12-25T03:08:24Z,2017-01-10T08:30:01Z,2017-01-11T02:24:57Z,MERGED,True,9,5,1,https://github.com/proski,".travis.yml: use -Werror, test two configurations - minimal and maximal",1,[],https://github.com/neutrinolabs/xrdp/pull/585,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/585#issuecomment-269147732,"Use separate entries for every command. Travis CI would still run the
commands sequentially, and it would provide better annotation for the
output.",LGTM.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,586,2016-12-25T03:54:30Z,2017-01-06T04:25:00Z,2017-01-06T05:35:41Z,MERGED,True,21,3,1,https://github.com/proski,Fix all warnings in TurboJPEG code,1,[],https://github.com/neutrinolabs/xrdp/pull/586,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/586,"Actually use the error code from tjCompress() by logging the errors.
Make sure width is more than zero before filling the pad with the last
pixel data.","Actually use the error code from tjCompress() by logging the errors.
Make sure width is more than zero before filling the pad with the last
pixel data.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,586,2016-12-25T03:54:30Z,2017-01-06T04:25:00Z,2017-01-06T05:35:41Z,MERGED,True,21,3,1,https://github.com/proski,Fix all warnings in TurboJPEG code,1,[],https://github.com/neutrinolabs/xrdp/pull/586,https://github.com/speidy,2,https://github.com/neutrinolabs/xrdp/pull/586#issuecomment-269582777,"Actually use the error code from tjCompress() by logging the errors.
Make sure width is more than zero before filling the pad with the last
pixel data.",Looks good to me.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,587,2016-12-25T04:17:27Z,2016-12-30T05:53:07Z,2016-12-30T06:08:37Z,MERGED,True,10,0,1,https://github.com/proski,bootstrap: checkout submodules if they are missing,1,[],https://github.com/neutrinolabs/xrdp/pull/587,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/587,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,587,2016-12-25T04:17:27Z,2016-12-30T05:53:07Z,2016-12-30T06:08:37Z,MERGED,True,10,0,1,https://github.com/proski,bootstrap: checkout submodules if they are missing,1,[],https://github.com/neutrinolabs/xrdp/pull/587,https://github.com/Natureshadow,2,https://github.com/neutrinolabs/xrdp/pull/587#issuecomment-269119439,,Maybe we should simply use subtrees instead of tying code to deprecated and fragile Git specifics.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,587,2016-12-25T04:17:27Z,2016-12-30T05:53:07Z,2016-12-30T06:08:37Z,MERGED,True,10,0,1,https://github.com/proski,bootstrap: checkout submodules if they are missing,1,[],https://github.com/neutrinolabs/xrdp/pull/587,https://github.com/proski,3,https://github.com/neutrinolabs/xrdp/pull/587#issuecomment-269139608,,"OK, then please see #593",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,588,2016-12-25T06:34:19Z,2016-12-29T05:11:03Z,2017-01-06T14:00:14Z,MERGED,True,32,0,1,https://github.com/speidy,keygen: add CA extensions to self-signed certificates,2,[],https://github.com/neutrinolabs/xrdp/pull/588,https://github.com/speidy,1,https://github.com/neutrinolabs/xrdp/pull/588,"Self-signed certificates lacks the required CA extensions.
MS RDP client for iOS cannot connect because of it. the app is crashing right after TLS handshake.
I think it worked before we added our openssl.conf file.","Self-signed certificates lacks the required CA extensions.
MS RDP client for iOS cannot connect because of it. the app is crashing right after TLS handshake.
I think it worked before we added our openssl.conf file.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,588,2016-12-25T06:34:19Z,2016-12-29T05:11:03Z,2017-01-06T14:00:14Z,MERGED,True,32,0,1,https://github.com/speidy,keygen: add CA extensions to self-signed certificates,2,[],https://github.com/neutrinolabs/xrdp/pull/588,https://github.com/speidy,2,https://github.com/neutrinolabs/xrdp/pull/588#issuecomment-269164331,"Self-signed certificates lacks the required CA extensions.
MS RDP client for iOS cannot connect because of it. the app is crashing right after TLS handshake.
I think it worked before we added our openssl.conf file.",no space after hash means an example line. I would like to keep it that way.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,588,2016-12-25T06:34:19Z,2016-12-29T05:11:03Z,2017-01-06T14:00:14Z,MERGED,True,32,0,1,https://github.com/speidy,keygen: add CA extensions to self-signed certificates,2,[],https://github.com/neutrinolabs/xrdp/pull/588,https://github.com/proski,3,https://github.com/neutrinolabs/xrdp/pull/588#issuecomment-269172301,"Self-signed certificates lacks the required CA extensions.
MS RDP client for iOS cannot connect because of it. the app is crashing right after TLS handshake.
I think it worked before we added our openssl.conf file.","I've tested the patch with several Android clients. I don't see any difference w.r.t. authentication. Parallels Client (legacy and non-legacy) refuses to work. Other clients work. If any client is fixed by this patch, let's merge it.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,588,2016-12-25T06:34:19Z,2016-12-29T05:11:03Z,2017-01-06T14:00:14Z,MERGED,True,32,0,1,https://github.com/speidy,keygen: add CA extensions to self-signed certificates,2,[],https://github.com/neutrinolabs/xrdp/pull/588,https://github.com/speidy,4,https://github.com/neutrinolabs/xrdp/pull/588#issuecomment-269173312,"Self-signed certificates lacks the required CA extensions.
MS RDP client for iOS cannot connect because of it. the app is crashing right after TLS handshake.
I think it worked before we added our openssl.conf file.","In my testing, only MS RDP iOS client was crashing (macOS one was ok) . Non-windows Parallels clients have other issues, not related to TLS.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,589,2016-12-25T07:00:30Z,2017-02-03T05:39:12Z,2017-02-03T05:39:12Z,MERGED,True,11,92,4,https://github.com/proski,"Use constant strings for input arguments in keygen, kill dead code",3,[],https://github.com/neutrinolabs/xrdp/pull/589,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/589,"It's hard to read code where input string arguments use type char *, especially if it's cryptographic code. Functions should not modify its input arguments. The compiler can produce better code if it knows the constraints.
Remove code for compatibility with OpenSSL prior to 0.9.8. It's hard to find old versions of OpenSSL. Everybody who cares about security should be using OpenSSL 1.0.2 or newer. But let's allow for older OpenSSL for systems that backport security fixes.","It's hard to read code where input string arguments use type char *, especially if it's cryptographic code. Functions should not modify its input arguments. The compiler can produce better code if it knows the constraints.
Remove code for compatibility with OpenSSL prior to 0.9.8. It's hard to find old versions of OpenSSL. Everybody who cares about security should be using OpenSSL 1.0.2 or newer. But let's allow for older OpenSSL for systems that backport security fixes.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,589,2016-12-25T07:00:30Z,2017-02-03T05:39:12Z,2017-02-03T05:39:12Z,MERGED,True,11,92,4,https://github.com/proski,"Use constant strings for input arguments in keygen, kill dead code",3,[],https://github.com/neutrinolabs/xrdp/pull/589,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/589#issuecomment-269186262,"It's hard to read code where input string arguments use type char *, especially if it's cryptographic code. Functions should not modify its input arguments. The compiler can produce better code if it knows the constraints.
Remove code for compatibility with OpenSSL prior to 0.9.8. It's hard to find old versions of OpenSSL. Everybody who cares about security should be using OpenSSL 1.0.2 or newer. But let's allow for older OpenSSL for systems that backport security fixes.",That makes sense. OpenSSL 0.9.8 is no longer supported. https://www.openssl.org/policies/releasestrat.html,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,589,2016-12-25T07:00:30Z,2017-02-03T05:39:12Z,2017-02-03T05:39:12Z,MERGED,True,11,92,4,https://github.com/proski,"Use constant strings for input arguments in keygen, kill dead code",3,[],https://github.com/neutrinolabs/xrdp/pull/589,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/589#issuecomment-272394119,"It's hard to read code where input string arguments use type char *, especially if it's cryptographic code. Functions should not modify its input arguments. The compiler can produce better code if it knows the constraints.
Remove code for compatibility with OpenSSL prior to 0.9.8. It's hard to find old versions of OpenSSL. Everybody who cares about security should be using OpenSSL 1.0.2 or newer. But let's allow for older OpenSSL for systems that backport security fixes.",No objections to drop OpenSSL 0.9.8 support?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,589,2016-12-25T07:00:30Z,2017-02-03T05:39:12Z,2017-02-03T05:39:12Z,MERGED,True,11,92,4,https://github.com/proski,"Use constant strings for input arguments in keygen, kill dead code",3,[],https://github.com/neutrinolabs/xrdp/pull/589,https://github.com/proski,4,https://github.com/neutrinolabs/xrdp/pull/589#issuecomment-272567080,"It's hard to read code where input string arguments use type char *, especially if it's cryptographic code. Functions should not modify its input arguments. The compiler can produce better code if it knows the constraints.
Remove code for compatibility with OpenSSL prior to 0.9.8. It's hard to find old versions of OpenSSL. Everybody who cares about security should be using OpenSSL 1.0.2 or newer. But let's allow for older OpenSSL for systems that backport security fixes.","Actually, this PR removes support for OpenSSL versions before 0.9.8. 0.9.8 is still ""supported"". It should be a no-brainer.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,589,2016-12-25T07:00:30Z,2017-02-03T05:39:12Z,2017-02-03T05:39:12Z,MERGED,True,11,92,4,https://github.com/proski,"Use constant strings for input arguments in keygen, kill dead code",3,[],https://github.com/neutrinolabs/xrdp/pull/589,https://github.com/jsorg71,5,https://github.com/neutrinolabs/xrdp/pull/589#issuecomment-273620832,"It's hard to read code where input string arguments use type char *, especially if it's cryptographic code. Functions should not modify its input arguments. The compiler can produce better code if it knows the constraints.
Remove code for compatibility with OpenSSL prior to 0.9.8. It's hard to find old versions of OpenSSL. Everybody who cares about security should be using OpenSSL 1.0.2 or newer. But let's allow for older OpenSSL for systems that backport security fixes.","The only reason I can see for allowing older openssl is if someone is supporting a legacy package on a machine behind a firewall.  In general I don't like to tell people where they can use xrdp.
But I won't protest this PR.
+1",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,590,2016-12-25T07:42:35Z,2017-01-06T19:07:16Z,2017-01-06T19:07:16Z,CLOSED,False,5,1,1,https://github.com/proski,Respect verbosity settings when generating manual pages,1,[],https://github.com/neutrinolabs/xrdp/pull/590,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/590,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,590,2016-12-25T07:42:35Z,2017-01-06T19:07:16Z,2017-01-06T19:07:16Z,CLOSED,False,5,1,1,https://github.com/proski,Respect verbosity settings when generating manual pages,1,[],https://github.com/neutrinolabs/xrdp/pull/590,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/590#issuecomment-270796704,,+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,590,2016-12-25T07:42:35Z,2017-01-06T19:07:16Z,2017-01-06T19:07:16Z,CLOSED,False,5,1,1,https://github.com/proski,Respect verbosity settings when generating manual pages,1,[],https://github.com/neutrinolabs/xrdp/pull/590,https://github.com/jsorg71,3,https://github.com/neutrinolabs/xrdp/pull/590#issuecomment-270979377,,merged as 7b32fc8,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,591,2016-12-25T08:55:17Z,2017-01-06T18:59:57Z,2017-01-06T18:59:57Z,CLOSED,False,10,0,5,https://github.com/proski,"Suppress versioning for modules, tell libtool they are modules",1,[],https://github.com/neutrinolabs/xrdp/pull/591,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/591,"Versioning is for libraries. Modules are not libraries; no code is linked
against them.
Libtool makes sure the modules can be opened by dlopen(). That is already
true for ELF format, but other file formats may need special processing.","Versioning is for libraries. Modules are not libraries; no code is linked
against them.
Libtool makes sure the modules can be opened by dlopen(). That is already
true for ELF format, but other file formats may need special processing.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,591,2016-12-25T08:55:17Z,2017-01-06T18:59:57Z,2017-01-06T18:59:57Z,CLOSED,False,10,0,5,https://github.com/proski,"Suppress versioning for modules, tell libtool they are modules",1,[],https://github.com/neutrinolabs/xrdp/pull/591,https://github.com/jsorg71,2,https://github.com/neutrinolabs/xrdp/pull/591#issuecomment-270450346,"Versioning is for libraries. Modules are not libraries; no code is linked
against them.
Libtool makes sure the modules can be opened by dlopen(). That is already
true for ELF format, but other file formats may need special processing.",+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,591,2016-12-25T08:55:17Z,2017-01-06T18:59:57Z,2017-01-06T18:59:57Z,CLOSED,False,10,0,5,https://github.com/proski,"Suppress versioning for modules, tell libtool they are modules",1,[],https://github.com/neutrinolabs/xrdp/pull/591,https://github.com/jsorg71,3,https://github.com/neutrinolabs/xrdp/pull/591#issuecomment-270977256,"Versioning is for libraries. Modules are not libraries; no code is linked
against them.
Libtool makes sure the modules can be opened by dlopen(). That is already
true for ELF format, but other file formats may need special processing.",merged as f25659d,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,593,2016-12-25T22:19:37Z,2016-12-30T06:06:40Z,2016-12-30T06:07:47Z,CLOSED,False,12553,10,71,https://github.com/proski,Convert git submodules to git subtrees,115,[],https://github.com/neutrinolabs/xrdp/pull/593,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/593,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,593,2016-12-25T22:19:37Z,2016-12-30T06:06:40Z,2016-12-30T06:07:47Z,CLOSED,False,12553,10,71,https://github.com/proski,Convert git submodules to git subtrees,115,[],https://github.com/neutrinolabs/xrdp/pull/593,https://github.com/Natureshadow,2,https://github.com/neutrinolabs/xrdp/pull/593#issuecomment-269140293,,I'd not squash the histories. Keeping full history is a good thing (and makes finding things and splitting easier for others).,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,593,2016-12-25T22:19:37Z,2016-12-30T06:06:40Z,2016-12-30T06:07:47Z,CLOSED,False,12553,10,71,https://github.com/proski,Convert git submodules to git subtrees,115,[],https://github.com/neutrinolabs/xrdp/pull/593,https://github.com/proski,3,https://github.com/neutrinolabs/xrdp/pull/593#issuecomment-269140880,,"OK, the history is preserved now.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,593,2016-12-25T22:19:37Z,2016-12-30T06:06:40Z,2016-12-30T06:07:47Z,CLOSED,False,12553,10,71,https://github.com/proski,Convert git submodules to git subtrees,115,[],https://github.com/neutrinolabs/xrdp/pull/593,https://github.com/proski,4,https://github.com/neutrinolabs/xrdp/pull/593#issuecomment-269583899,,I don't know if this patch can be merged safely. I suggest using this gist on the clean checkout and submitting the result. https://gist.github.com/proski/c1a240426d2fa58fca57116987b85d61,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,593,2016-12-25T22:19:37Z,2016-12-30T06:06:40Z,2016-12-30T06:07:47Z,CLOSED,False,12553,10,71,https://github.com/proski,Convert git submodules to git subtrees,115,[],https://github.com/neutrinolabs/xrdp/pull/593,https://github.com/jsorg71,5,https://github.com/neutrinolabs/xrdp/pull/593#issuecomment-269588127,,"Do we really want to switch to subtrees?
I'm not convinced they are better.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,593,2016-12-25T22:19:37Z,2016-12-30T06:06:40Z,2016-12-30T06:07:47Z,CLOSED,False,12553,10,71,https://github.com/proski,Convert git submodules to git subtrees,115,[],https://github.com/neutrinolabs/xrdp/pull/593,https://github.com/proski,6,https://github.com/neutrinolabs/xrdp/pull/593#issuecomment-269588614,,"Basically, submodules require extra care from everyone using the repository. Subtrees, on the other hand, require extra care only from those who modify the subtrees. Thus, subtrees lower the barrier to entry for newcomers. I can live with either.
Google ""submodules vs subtrees"", it's discussed a lot.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,593,2016-12-25T22:19:37Z,2016-12-30T06:06:40Z,2016-12-30T06:07:47Z,CLOSED,False,12553,10,71,https://github.com/proski,Convert git submodules to git subtrees,115,[],https://github.com/neutrinolabs/xrdp/pull/593,https://github.com/jsorg71,7,https://github.com/neutrinolabs/xrdp/pull/593#issuecomment-269734269,,"I did read up on subtrees but the goal is to move the submodules out entirely.
I want to move them away not integrate them more tightly.
I can live with either too so I think it's up to you guys.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,593,2016-12-25T22:19:37Z,2016-12-30T06:06:40Z,2016-12-30T06:07:47Z,CLOSED,False,12553,10,71,https://github.com/proski,Convert git submodules to git subtrees,115,[],https://github.com/neutrinolabs/xrdp/pull/593,https://github.com/proski,8,https://github.com/neutrinolabs/xrdp/pull/593#issuecomment-269734580,,"Oh, I see. That makes sense. Then maybe you could merge #587 for now? It can always be reverted as the submodules are devolved. I just want to close this topic one way or another.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,593,2016-12-25T22:19:37Z,2016-12-30T06:06:40Z,2016-12-30T06:07:47Z,CLOSED,False,12553,10,71,https://github.com/proski,Convert git submodules to git subtrees,115,[],https://github.com/neutrinolabs/xrdp/pull/593,https://github.com/jsorg71,9,https://github.com/neutrinolabs/xrdp/pull/593#issuecomment-269735212,,"I'll merge that one.
@Natureshadow is pro subtree
@proski  you sound neutral, so am I.
If you other guys want subtrees lets do it but I think we should do a new PR.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,593,2016-12-25T22:19:37Z,2016-12-30T06:06:40Z,2016-12-30T06:07:47Z,CLOSED,False,12553,10,71,https://github.com/proski,Convert git submodules to git subtrees,115,[],https://github.com/neutrinolabs/xrdp/pull/593,https://github.com/proski,10,https://github.com/neutrinolabs/xrdp/pull/593#issuecomment-269736081,,"Closing this PR. If anybody wants to continue this effort, you can use my gist for conversion.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,596,2016-12-29T05:44:04Z,2017-01-04T18:35:15Z,2017-01-06T13:53:22Z,MERGED,True,10,18,2,https://github.com/speidy,RFX: fix frame acks handling,3,[],https://github.com/neutrinolabs/xrdp/pull/596,https://github.com/speidy,1,https://github.com/neutrinolabs/xrdp/pull/596,This should make RemoteFX usable with Parallels Client. they always want zero unacked frames on the wire.,This should make RemoteFX usable with Parallels Client. they always want zero unacked frames on the wire.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,596,2016-12-29T05:44:04Z,2017-01-04T18:35:15Z,2017-01-06T13:53:22Z,MERGED,True,10,18,2,https://github.com/speidy,RFX: fix frame acks handling,3,[],https://github.com/neutrinolabs/xrdp/pull/596,https://github.com/jsorg71,2,https://github.com/neutrinolabs/xrdp/pull/596#issuecomment-269587515,This should make RemoteFX usable with Parallels Client. they always want zero unacked frames on the wire.,"enc_done->enc->flags,
                                                  enc_done->enc->frame_id);
                     }
-                    else
-                    {
-#if 1
-                        ex = self->wm->client_info->max_unacknowledged_frame_count;
-                        if (self->encoder->frame_id_client + ex > self->encoder->frame_id_server)
-                        {
-                            if (self->encoder->frame_id_server > self->encoder->frame_id_server_sent)
-                            {
-                                LLOGLN(10, (""xrdp_mm_check_wait_objs: 1 -- %d"", self->encoder->frame_id_server));
-                                self->encoder->frame_id_server_sent = self->encoder->frame_id_server;
-                                self->mod->mod_frame_ack(self->mod, 0, self->encoder->frame_id_server);
-                            }
-                        }
-#endif
-                    }
                     g_free(enc_done->enc->drects);
                     g_free(enc_done->enc->crects);
                     g_free(enc_done->enc);

why remove this else, it's needed in case client does not support frame acks.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,600,2016-12-29T20:07:35Z,,2021-08-04T14:20:32Z,OPEN,False,517,48,13,https://github.com/jsorg71,"add password change dialog to xrdp, used from sesman when password ex…",12,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/600,https://github.com/jsorg71,1,https://github.com/neutrinolabs/xrdp/pull/600,"…pires
This patch is from
Tim Fischer tim.p.fischer@gmx.de
Felix Zhang fezhang@suse.com","…pires
This patch is from
Tim Fischer tim.p.fischer@gmx.de
Felix Zhang fezhang@suse.com",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,600,2016-12-29T20:07:35Z,,2021-08-04T14:20:32Z,OPEN,False,517,48,13,https://github.com/jsorg71,"add password change dialog to xrdp, used from sesman when password ex…",12,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/600,https://github.com/jsorg71,2,https://github.com/neutrinolabs/xrdp/pull/600#issuecomment-269703602,"…pires
This patch is from
Tim Fischer tim.p.fischer@gmx.de
Felix Zhang fezhang@suse.com","you can use
chage -d 0 <username>

to test",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,600,2016-12-29T20:07:35Z,,2021-08-04T14:20:32Z,OPEN,False,517,48,13,https://github.com/jsorg71,"add password change dialog to xrdp, used from sesman when password ex…",12,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/600,https://github.com/jsorg71,3,https://github.com/neutrinolabs/xrdp/pull/600#issuecomment-269925856,"…pires
This patch is from
Tim Fischer tim.p.fischer@gmx.de
Felix Zhang fezhang@suse.com","Yea, I think this PR needs work.
I don't know if you seen the new dialog but that looks like it needs work too.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,600,2016-12-29T20:07:35Z,,2021-08-04T14:20:32Z,OPEN,False,517,48,13,https://github.com/jsorg71,"add password change dialog to xrdp, used from sesman when password ex…",12,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/600,https://github.com/tfischer77,4,https://github.com/neutrinolabs/xrdp/pull/600#issuecomment-270942435,"…pires
This patch is from
Tim Fischer tim.p.fischer@gmx.de
Felix Zhang fezhang@suse.com","I just found another bug. When a user gets prompted to change his password and password change was successful, logon works normally and the desktop is shown. After ending the session, there is one ""Zombie"" process left (in my case, user ""tim2"" had to change his expired password):
Output of ps axu:
tim2      3266  0.0  0.0      0     0 ?        Z    15:24   0:00 [xrdp-sessvc] <defunct>
Login again with user ""tim2"" is then not possible any more, the desktop does not fire up.
When logging in with another user, the same thing happens also for him. He is still able to logon once, and after disconnect or logoff, a Zombie is left and logon for this user is also not possible any longer.
To get rid of the ""defunct"" processes, xrdp has to be killed and restarted. After that, everything works fine until another user tries to change his password.
What is the difference when starting / ending a session with a newly changed password and a ""normal"" session with a password that isn't expired?
The syslog continuosly tells:
Jan  6 00:16:12 lxc-deb8-compiler xrdp[1711]: (1711)(140610328073984)[DEBUG] Closed socket 25 (AF_UNIX) Jan  6 00:16:15 lxc-deb8-compiler xrdp[1711]: (1711)(140610328073984)[DEBUG] Closed socket 25 (AF_UNIX) Jan  6 00:16:19 lxc-deb8-compiler xrdp[1711]: (1711)(140610328073984)[DEBUG] Closed socket 25 (AF_UNIX) Jan  6 00:16:23 lxc-deb8-compiler xrdp[1711]: (1711)(140610328073984)[DEBUG] Closed socket 25 (AF_UNIX) Jan  6 00:16:27 lxc-deb8-compiler xrdp[1711]: (1711)(140610328073984)[DEBUG] Closed socket 25 (AF_UNIX) Jan  6 00:16:30 lxc-deb8-compiler xrdp[1711]: (1711)(140610328073984)[DEBUG] Closed socket 25 (AF_UNIX) Jan  6 00:16:34 lxc-deb8-compiler xrdp[1711]: (1711)(140610328073984)[DEBUG] Closed socket 25 (AF_UNIX) Jan  6 00:16:37 lxc-deb8-compiler xrdp[1711]: (1711)(140610328073984)[DEBUG] Closed socket 25 (AF_UNIX) Jan  6 00:16:41 lxc-deb8-compiler xrdp[1711]: (1711)(140610328073984)[DEBUG] Closed socket 25 (AF_UNIX) Jan  6 00:16:45 lxc-deb8-compiler xrdp[1711]: (1711)(140610328073984)[DEBUG] Closed socket 25 (AF_UNIX) Jan  6 00:16:49 lxc-deb8-compiler xrdp[1711]: (1711)(140610328073984)[DEBUG] Closed socket 25 (AF_UNIX) Jan  6 00:16:52 lxc-deb8-compiler xrdp[1711]: (1711)(140610328073984)[DEBUG] Closed socket 25 (AF_UNIX) Jan  6 00:16:56 lxc-deb8-compiler xrdp[1711]: (1711)(140610328073984)[DEBUG] Closed socket 25 (AF_UNIX) Jan  6 00:16:59 lxc-deb8-compiler xrdp[1711]: (1711)(140610328073984)[DEBUG] Closed socket 25 (AF_UNIX)",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,600,2016-12-29T20:07:35Z,,2021-08-04T14:20:32Z,OPEN,False,517,48,13,https://github.com/jsorg71,"add password change dialog to xrdp, used from sesman when password ex…",12,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/600,https://github.com/tfischer77,5,https://github.com/neutrinolabs/xrdp/pull/600#issuecomment-272099700,"…pires
This patch is from
Tim Fischer tim.p.fischer@gmx.de
Felix Zhang fezhang@suse.com","Found out the root cause on this. The pam_chauthtok function calls another external program, possibly ""passwd"". For that, it establishes its own SIGCHLD signal and function. To get the correct functionality, before calling pam_chauthtok, SIGCHLD has to be blocked and restored after the call. The signal handlers for sesman ( at least SIGCHLD) has to be reinitialized completely. I wrote a small patch for it. Will provide it later that day.",True,{'THUMBS_UP': ['https://github.com/FelixZhang']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,600,2016-12-29T20:07:35Z,,2021-08-04T14:20:32Z,OPEN,False,517,48,13,https://github.com/jsorg71,"add password change dialog to xrdp, used from sesman when password ex…",12,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/600,https://github.com/willipa5,6,https://github.com/neutrinolabs/xrdp/pull/600#issuecomment-382131433,"…pires
This patch is from
Tim Fischer tim.p.fischer@gmx.de
Felix Zhang fezhang@suse.com","Hi, I was wondering if there has been any further progress made on this issue?  I could not find anything indicating if this issue has been closed/completed.  I tried testing with xrdp-0.9.6-1.el7.x86_64 and did not see a password change dialog-box.  Thanks.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,600,2016-12-29T20:07:35Z,,2021-08-04T14:20:32Z,OPEN,False,517,48,13,https://github.com/jsorg71,"add password change dialog to xrdp, used from sesman when password ex…",12,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/600,https://github.com/tfischer77,7,https://github.com/neutrinolabs/xrdp/pull/600#issuecomment-388015755,"…pires
This patch is from
Tim Fischer tim.p.fischer@gmx.de
Felix Zhang fezhang@suse.com","The patch is not yet implemented into the current xrdp branch, as it needs some structural changes. I do not know the actual status of this issue and if someone is working on it. I have a patch here that works for 0.9.6. If you like, I would be able to share it.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,600,2016-12-29T20:07:35Z,,2021-08-04T14:20:32Z,OPEN,False,517,48,13,https://github.com/jsorg71,"add password change dialog to xrdp, used from sesman when password ex…",12,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/600,https://github.com/willipa5,8,https://github.com/neutrinolabs/xrdp/pull/600#issuecomment-388790790,"…pires
This patch is from
Tim Fischer tim.p.fischer@gmx.de
Felix Zhang fezhang@suse.com","Thanks for your reply.  I am interested in getting a copy of your patch. Is it available for download?  Any additional information on how to incorporate your patch into my system would be appreciated.
…
Sent from my iPhone
 On May 10, 2018, at 5:26 AM, Tim Fischer ***@***.***> wrote:

 The patch is not yet implemented into the current xrdp branch, as it needs some structural changes. I do not know the actual status of this issue and if someone is working on it. I have a patch here that works for 0.9.6. If you like, I would be able to share it.

 —
 You are receiving this because you commented.
 Reply to this email directly, view it on GitHub, or mute the thread.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,600,2016-12-29T20:07:35Z,,2021-08-04T14:20:32Z,OPEN,False,517,48,13,https://github.com/jsorg71,"add password change dialog to xrdp, used from sesman when password ex…",12,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/600,https://github.com/amccurry,9,https://github.com/neutrinolabs/xrdp/pull/600#issuecomment-389499585,"…pires
This patch is from
Tim Fischer tim.p.fischer@gmx.de
Felix Zhang fezhang@suse.com",I would also be interested in getting a copy of your patch.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,600,2016-12-29T20:07:35Z,,2021-08-04T14:20:32Z,OPEN,False,517,48,13,https://github.com/jsorg71,"add password change dialog to xrdp, used from sesman when password ex…",12,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/600,https://github.com/tfischer77,10,https://github.com/neutrinolabs/xrdp/pull/600#issuecomment-390512750,"…pires
This patch is from
Tim Fischer tim.p.fischer@gmx.de
Felix Zhang fezhang@suse.com","I just cloned the current xrdp devel branch and uploaded the changes to a new branch. You may download it here:
https://github.com/tfischer77/xrdp/tree/pwd_change
Changes:
tfischer77@98f51cb
Please keep in mind: The patch is working, but is far away from being perfect (although I'm using it in a productive environment since almost two years without having any issues). At least 85 percent of the patch were written by Felix Zhang, I only changed the pam conversation function to work properly.
I don't think the changes fulfil the coding quality standards of xrdp. So I will not do a pull request to the original xrdp except if any of the xrdp developers (e.g. @jsorg71 who opened the original pull request) tell me to do so.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,600,2016-12-29T20:07:35Z,,2021-08-04T14:20:32Z,OPEN,False,517,48,13,https://github.com/jsorg71,"add password change dialog to xrdp, used from sesman when password ex…",12,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/600,https://github.com/amccurry,11,https://github.com/neutrinolabs/xrdp/pull/600#issuecomment-391863507,"…pires
This patch is from
Tim Fischer tim.p.fischer@gmx.de
Felix Zhang fezhang@suse.com",Got it working!  Thanks a lot!,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,600,2016-12-29T20:07:35Z,,2021-08-04T14:20:32Z,OPEN,False,517,48,13,https://github.com/jsorg71,"add password change dialog to xrdp, used from sesman when password ex…",12,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/600,https://github.com/gitquestt,12,https://github.com/neutrinolabs/xrdp/pull/600#issuecomment-766413697,"…pires
This patch is from
Tim Fischer tim.p.fischer@gmx.de
Felix Zhang fezhang@suse.com","Hello,
Has there been any development in this regard?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,600,2016-12-29T20:07:35Z,,2021-08-04T14:20:32Z,OPEN,False,517,48,13,https://github.com/jsorg71,"add password change dialog to xrdp, used from sesman when password ex…",12,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/600,https://github.com/Samoangtagey,13,https://github.com/neutrinolabs/xrdp/pull/600#issuecomment-887337922,"…pires
This patch is from
Tim Fischer tim.p.fischer@gmx.de
Felix Zhang fezhang@suse.com","Hello,
any news on this? Would be great to have a solution for this issue :-)",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,600,2016-12-29T20:07:35Z,,2021-08-04T14:20:32Z,OPEN,False,517,48,13,https://github.com/jsorg71,"add password change dialog to xrdp, used from sesman when password ex…",12,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/600,https://github.com/matt335672,14,https://github.com/neutrinolabs/xrdp/pull/600#issuecomment-889899908,"…pires
This patch is from
Tim Fischer tim.p.fischer@gmx.de
Felix Zhang fezhang@suse.com","No, there's no significant news to report on so far.
I'm just had a look at the code in the PR. I'm having a few problems following the chain of events, and the interaction between the conversation code and the rest of the system. but I'm sure I can sort that out with a debugger.
The architecture doesn't look quite right to me. We're solving a particular problem which is already (to some extent) solved in the PAM stack itself. So this will allow us to change expired passwords, but will do nothing to solve other issues generally handled in PAM, like 2FA.
A more generic solution might be to tunnel the PAM conversation over SCP and simply present the PAM prompts to the user at that point. Then we wouldn't actually care whether the password was being changed, or whether 2FA was being employed, or whatever.
I appreciate this is a not at all simple to get to from where we are. It needs significant upgrades to SCP, and the structure of sesman.
Comments anyone?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,600,2016-12-29T20:07:35Z,,2021-08-04T14:20:32Z,OPEN,False,517,48,13,https://github.com/jsorg71,"add password change dialog to xrdp, used from sesman when password ex…",12,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/600,https://github.com/Samoangtagey,15,https://github.com/neutrinolabs/xrdp/pull/600#issuecomment-890360782,"…pires
This patch is from
Tim Fischer tim.p.fischer@gmx.de
Felix Zhang fezhang@suse.com","Hello Matt,
thanks for taking a look on this :-) My knowledge goes far enough to generally understand what you are talking about, but not that far to give some qualified comments ;-) But happy to hear from you :-)",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,600,2016-12-29T20:07:35Z,,2021-08-04T14:20:32Z,OPEN,False,517,48,13,https://github.com/jsorg71,"add password change dialog to xrdp, used from sesman when password ex…",12,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/600,https://github.com/matt335672,16,https://github.com/neutrinolabs/xrdp/pull/600#issuecomment-892700401,"…pires
This patch is from
Tim Fischer tim.p.fischer@gmx.de
Felix Zhang fezhang@suse.com","Hi @Samoangtagey - FYI I'd like to get some broader discussion going on this (see #1961) so I can get some feedback on whether I've got the right idea about this or not.
If you, or anyone else reading this thread wants to jump in and comment, please do so.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,603,2016-12-30T19:36:06Z,2017-01-19T04:13:59Z,2017-01-19T05:18:21Z,MERGED,True,69,27,8,https://github.com/proski,Some good things extracted from the X11rdp MacOS port,10,[],https://github.com/neutrinolabs/xrdp/pull/603,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/603,The most important fix is restoring the download cache functionality that was broken by 6b58956,The most important fix is restoring the download cache functionality that was broken by 6b58956,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,603,2016-12-30T19:36:06Z,2017-01-19T04:13:59Z,2017-01-19T05:18:21Z,MERGED,True,69,27,8,https://github.com/proski,Some good things extracted from the X11rdp MacOS port,10,[],https://github.com/neutrinolabs/xrdp/pull/603,https://github.com/proski,2,https://github.com/neutrinolabs/xrdp/pull/603#issuecomment-269855593,The most important fix is restoring the download cache functionality that was broken by 6b58956,"I've added a patch that is even more important. X11rdp was using standard path to fonts. It would not find fonts on a system without existing fonts. With the fix, X11rdp uses the fonts that are built together with X11rdp.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,603,2016-12-30T19:36:06Z,2017-01-19T04:13:59Z,2017-01-19T05:18:21Z,MERGED,True,69,27,8,https://github.com/proski,Some good things extracted from the X11rdp MacOS port,10,[],https://github.com/neutrinolabs/xrdp/pull/603,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/603#issuecomment-271501367,The most important fix is restoring the download cache functionality that was broken by 6b58956,Looks good.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,605,2016-12-31T08:26:38Z,2017-01-15T18:37:18Z,2017-01-15T18:57:53Z,MERGED,True,82,24,9,https://github.com/proski,"Allow PAM file selection in configure, improve autodetection, add SUSE",1,[],https://github.com/neutrinolabs/xrdp/pull/605,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/605,"Use easy to understand names for config files (debian, redhat, suse,
unix). Move all autodetection to a separate script.","Use easy to understand names for config files (debian, redhat, suse,
unix). Move all autodetection to a separate script.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,605,2016-12-31T08:26:38Z,2017-01-15T18:37:18Z,2017-01-15T18:57:53Z,MERGED,True,82,24,9,https://github.com/proski,"Allow PAM file selection in configure, improve autodetection, add SUSE",1,[],https://github.com/neutrinolabs/xrdp/pull/605,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/605#issuecomment-271508321,"Use easy to understand names for config files (debian, redhat, suse,
unix). Move all autodetection to a separate script.",Looks good to me for FreeBSD. xrdp-sesman.unix formerly named as xrdp-sesman.other  is valid pamfile for FreeBSD and your patch correctly choose it.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,605,2016-12-31T08:26:38Z,2017-01-15T18:37:18Z,2017-01-15T18:57:53Z,MERGED,True,82,24,9,https://github.com/proski,"Allow PAM file selection in configure, improve autodetection, add SUSE",1,[],https://github.com/neutrinolabs/xrdp/pull/605,https://github.com/speidy,3,https://github.com/neutrinolabs/xrdp/pull/605#issuecomment-272677969,"Use easy to understand names for config files (debian, redhat, suse,
unix). Move all autodetection to a separate script.","+1
Lets resolve the conflict and merge",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,606,2016-12-31T08:53:41Z,2016-12-31T13:17:50Z,2016-12-31T17:41:29Z,MERGED,True,1,1,1,https://github.com/proski,"When Xfixes.h is checked, the user should have libX11 already",1,[],https://github.com/neutrinolabs/xrdp/pull/606,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/606,No need to confuse the user by asking to install libX11 headers.,No need to confuse the user by asking to install libX11 headers.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,607,2017-01-01T08:58:27Z,2017-01-05T18:38:46Z,2017-01-06T01:25:31Z,MERGED,True,4,0,1,https://github.com/proski,Exit with error message if pkg-config is not found,1,[],https://github.com/neutrinolabs/xrdp/pull/607,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/607,"PKG_PROG_PKG_CONFIG does not exit if it fails to find pkg-config.
Continuing without pkg-config leads to misleading error messages when
checks for packages fail.","PKG_PROG_PKG_CONFIG does not exit if it fails to find pkg-config.
Continuing without pkg-config leads to misleading error messages when
checks for packages fail.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,607,2017-01-01T08:58:27Z,2017-01-05T18:38:46Z,2017-01-06T01:25:31Z,MERGED,True,4,0,1,https://github.com/proski,Exit with error message if pkg-config is not found,1,[],https://github.com/neutrinolabs/xrdp/pull/607,https://github.com/speidy,2,https://github.com/neutrinolabs/xrdp/pull/607#issuecomment-269913657,"PKG_PROG_PKG_CONFIG does not exit if it fails to find pkg-config.
Continuing without pkg-config leads to misleading error messages when
checks for packages fail.",+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,607,2017-01-01T08:58:27Z,2017-01-05T18:38:46Z,2017-01-06T01:25:31Z,MERGED,True,4,0,1,https://github.com/proski,Exit with error message if pkg-config is not found,1,[],https://github.com/neutrinolabs/xrdp/pull/607,https://github.com/jsorg71,3,https://github.com/neutrinolabs/xrdp/pull/607#issuecomment-269925971,"PKG_PROG_PKG_CONFIG does not exit if it fails to find pkg-config.
Continuing without pkg-config leads to misleading error messages when
checks for packages fail.","bootstrap checks for pkg-config but I think the released code will already have ./bootstrap run.
+1",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,610,2017-01-03T17:20:49Z,2017-01-05T18:38:03Z,2017-01-06T01:25:09Z,MERGED,True,3,0,2,https://github.com/proski,"Ignore untracked files in submodules, ignore X11rdp",2,[],https://github.com/neutrinolabs/xrdp/pull/610,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/610,"The submodule related changes are discussed at http://www.nils-haldenwang.de/frameworks-and-tools/git/how-to-ignore-changes-in-git-submodules
""untracked"" is the most conservative option after the default ""none"".","The submodule related changes are discussed at http://www.nils-haldenwang.de/frameworks-and-tools/git/how-to-ignore-changes-in-git-submodules
""untracked"" is the most conservative option after the default ""none"".",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,610,2017-01-03T17:20:49Z,2017-01-05T18:38:03Z,2017-01-06T01:25:09Z,MERGED,True,3,0,2,https://github.com/proski,"Ignore untracked files in submodules, ignore X11rdp",2,[],https://github.com/neutrinolabs/xrdp/pull/610,https://github.com/speidy,2,https://github.com/neutrinolabs/xrdp/pull/610#issuecomment-270173091,"The submodule related changes are discussed at http://www.nils-haldenwang.de/frameworks-and-tools/git/how-to-ignore-changes-in-git-submodules
""untracked"" is the most conservative option after the default ""none"".","+1
I also used ""ignore"" locally but ""untracked"" feels better
בתאריך יום ג׳, 3 בינו׳ 2017 ב-19:20 מאת Pavel Roskin <
notifications@github.com>:
 The submodule related changes are discussed at
 http://www.nils-haldenwang.de/frameworks-and-tools/git/how-to-ignore-changes-in-git-submodules

 ""untracked"" is the most conservative option after the default ""none"".
 ------------------------------
 You can view, comment on, or merge this pull request online at:

   #610
 Commit Summary

    - Ignore X11rdp executable
    - Don't consider submodules dirty if they contain untracked files

 File Changes

    - *M* .gitmodules
    <https://github.com/neutrinolabs/xrdp/pull/610/files#diff-0> (2)
    - *A* xorg/X11R7.6/rdp/.gitignore
    <https://github.com/neutrinolabs/xrdp/pull/610/files#diff-1> (1)

 Patch Links:

    - https://github.com/neutrinolabs/xrdp/pull/610.patch
    - https://github.com/neutrinolabs/xrdp/pull/610.diff

 —
 You are receiving this because you are subscribed to this thread.
 Reply to this email directly, view it on GitHub
 <#610>, or mute the thread
 <https://github.com/notifications/unsubscribe-auth/ADTH1PtI3hw2cHYiBriZq6IdMyF9RdpHks5rOoNzgaJpZM4LZ1LX>
 .

-- 
Idan Freiberg

PGP FP: 8108 7EC9 806E 4980 75F2  72B3 8AD3 2D04 337B 1F18",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,610,2017-01-03T17:20:49Z,2017-01-05T18:38:03Z,2017-01-06T01:25:09Z,MERGED,True,3,0,2,https://github.com/proski,"Ignore untracked files in submodules, ignore X11rdp",2,[],https://github.com/neutrinolabs/xrdp/pull/610,https://github.com/speidy,3,https://github.com/neutrinolabs/xrdp/pull/610#issuecomment-270174395,"The submodule related changes are discussed at http://www.nils-haldenwang.de/frameworks-and-tools/git/how-to-ignore-changes-in-git-submodules
""untracked"" is the most conservative option after the default ""none"".","I meant ""dirty""
בתאריך יום ג׳, 3 בינו׳ 2017 ב-19:36 מאת Idan Freiberg <speidy@gmail.com>:
 +1
 I also used ""ignore"" locally but ""untracked"" feels better
 בתאריך יום ג׳, 3 בינו׳ 2017 ב-19:20 מאת Pavel Roskin <
 ***@***.***>:

 The submodule related changes are discussed at
 http://www.nils-haldenwang.de/frameworks-and-tools/git/how-to-ignore-changes-in-git-submodules

 ""untracked"" is the most conservative option after the default ""none"".
 ------------------------------
 You can view, comment on, or merge this pull request online at:

   #610
 Commit Summary

    - Ignore X11rdp executable
    - Don't consider submodules dirty if they contain untracked files

 File Changes

    - *M* .gitmodules
    <https://github.com/neutrinolabs/xrdp/pull/610/files#diff-0> (2)
    - *A* xorg/X11R7.6/rdp/.gitignore
    <https://github.com/neutrinolabs/xrdp/pull/610/files#diff-1> (1)

 Patch Links:

    - https://github.com/neutrinolabs/xrdp/pull/610.patch
    - https://github.com/neutrinolabs/xrdp/pull/610.diff

 —
 You are receiving this because you are subscribed to this thread.
 Reply to this email directly, view it on GitHub
 <#610>, or mute the thread
 <https://github.com/notifications/unsubscribe-auth/ADTH1PtI3hw2cHYiBriZq6IdMyF9RdpHks5rOoNzgaJpZM4LZ1LX>
 .

 --
 Idan Freiberg

 PGP FP: 8108 7EC9 806E 4980 75F2  72B3 8AD3 2D04 337B 1F18

-- 
Idan Freiberg

PGP FP: 8108 7EC9 806E 4980 75F2  72B3 8AD3 2D04 337B 1F18",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,610,2017-01-03T17:20:49Z,2017-01-05T18:38:03Z,2017-01-06T01:25:09Z,MERGED,True,3,0,2,https://github.com/proski,"Ignore untracked files in submodules, ignore X11rdp",2,[],https://github.com/neutrinolabs/xrdp/pull/610,https://github.com/jsorg71,4,https://github.com/neutrinolabs/xrdp/pull/610#issuecomment-270449292,"The submodule related changes are discussed at http://www.nils-haldenwang.de/frameworks-and-tools/git/how-to-ignore-changes-in-git-submodules
""untracked"" is the most conservative option after the default ""none"".",+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,610,2017-01-03T17:20:49Z,2017-01-05T18:38:03Z,2017-01-06T01:25:09Z,MERGED,True,3,0,2,https://github.com/proski,"Ignore untracked files in submodules, ignore X11rdp",2,[],https://github.com/neutrinolabs/xrdp/pull/610,https://github.com/Natureshadow,5,https://github.com/neutrinolabs/xrdp/pull/610#issuecomment-270449953,"The submodule related changes are discussed at http://www.nils-haldenwang.de/frameworks-and-tools/git/how-to-ignore-changes-in-git-submodules
""untracked"" is the most conservative option after the default ""none"".","Oh, another unnecessary, submodule-specific issue.
Did someone mention that we should probably move to the present and to subtrees yet :)?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,610,2017-01-03T17:20:49Z,2017-01-05T18:38:03Z,2017-01-06T01:25:09Z,MERGED,True,3,0,2,https://github.com/proski,"Ignore untracked files in submodules, ignore X11rdp",2,[],https://github.com/neutrinolabs/xrdp/pull/610,https://github.com/proski,6,https://github.com/neutrinolabs/xrdp/pull/610#issuecomment-270453767,"The submodule related changes are discussed at http://www.nils-haldenwang.de/frameworks-and-tools/git/how-to-ignore-changes-in-git-submodules
""untracked"" is the most conservative option after the default ""none"".","@Natureshadow  Let's not start the submodules vs subtrees discussion again, we had #593 for that. If you think switching subtrees is important, please present your arguments in another PR or issue.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,610,2017-01-03T17:20:49Z,2017-01-05T18:38:03Z,2017-01-06T01:25:09Z,MERGED,True,3,0,2,https://github.com/proski,"Ignore untracked files in submodules, ignore X11rdp",2,[],https://github.com/neutrinolabs/xrdp/pull/610,https://github.com/jsorg71,7,https://github.com/neutrinolabs/xrdp/pull/610#issuecomment-270454091,"The submodule related changes are discussed at http://www.nils-haldenwang.de/frameworks-and-tools/git/how-to-ignore-changes-in-git-submodules
""untracked"" is the most conservative option after the default ""none"".","@Natureshadow It sounds like you are volunteering to address the issues that come up with subtrees :)
Also, you seen my post, I want to eventually remove the submodules or subtrees.  Just make them required packages that need to be installed.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,610,2017-01-03T17:20:49Z,2017-01-05T18:38:03Z,2017-01-06T01:25:09Z,MERGED,True,3,0,2,https://github.com/proski,"Ignore untracked files in submodules, ignore X11rdp",2,[],https://github.com/neutrinolabs/xrdp/pull/610,https://github.com/Natureshadow,8,https://github.com/neutrinolabs/xrdp/pull/610#issuecomment-270454884,"The submodule related changes are discussed at http://www.nils-haldenwang.de/frameworks-and-tools/git/how-to-ignore-changes-in-git-submodules
""untracked"" is the most conservative option after the default ""none"".","Well, it's less about what I prefer, but that there is a new submodule-related issue almost every day :D. Someone has a necessary tweak or complaint about the brokenness of submodules every day.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,610,2017-01-03T17:20:49Z,2017-01-05T18:38:03Z,2017-01-06T01:25:09Z,MERGED,True,3,0,2,https://github.com/proski,"Ignore untracked files in submodules, ignore X11rdp",2,[],https://github.com/neutrinolabs/xrdp/pull/610,https://github.com/Natureshadow,9,https://github.com/neutrinolabs/xrdp/pull/610#issuecomment-270455223,"The submodule related changes are discussed at http://www.nils-haldenwang.de/frameworks-and-tools/git/how-to-ignore-changes-in-git-submodules
""untracked"" is the most conservative option after the default ""none"".","@Natureshadow It sounds like you are volunteering to address the issues
that come up with subtrees :)
Which are?
Also, you seen my post, I want to eventually remove the submodules or
subtrees.  Just make them required packages that need to be installed.
Then do. It's even better.
…
-nik",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,612,2017-01-04T21:15:20Z,2017-01-06T00:01:53Z,2017-01-06T01:25:44Z,MERGED,True,5,4,3,https://github.com/proski,"Use <> for system includes, move system includes above local ones",1,[],https://github.com/neutrinolabs/xrdp/pull/612,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/612,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,615,2017-01-06T06:43:53Z,2017-01-15T06:55:01Z,2017-03-24T07:53:42Z,MERGED,True,18,9,5,https://github.com/speidy,Channels improvements,5,[],https://github.com/neutrinolabs/xrdp/pull/615,https://github.com/speidy,1,https://github.com/neutrinolabs/xrdp/pull/615,"Check for empty channel names, they are unusable. Jump Desktop client send empty channel names for disabled channels. That made xrdp think we got more channels then really negotiated via  Client MCS Channel Join Request PDUs. That fix makes Jump Desktop client work with xrdp (should resolve #594)


Respect xrdp.ini channel blocking settings. The restriction was only applied on client to server channel data.  block PDUs coming from chansrv if channel is not allowed. This change can help with Parallels Client, which doesn't support our rdpsnd channel (#608). One can now block rdpsnd channel in xrdp.ini so Parallels Client will not drop the connection.","Check for empty channel names, they are unusable. Jump Desktop client send empty channel names for disabled channels. That made xrdp think we got more channels then really negotiated via  Client MCS Channel Join Request PDUs. That fix makes Jump Desktop client work with xrdp (should resolve #594)


Respect xrdp.ini channel blocking settings. The restriction was only applied on client to server channel data.  block PDUs coming from chansrv if channel is not allowed. This change can help with Parallels Client, which doesn't support our rdpsnd channel (#608). One can now block rdpsnd channel in xrdp.ini so Parallels Client will not drop the connection.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,615,2017-01-06T06:43:53Z,2017-01-15T06:55:01Z,2017-03-24T07:53:42Z,MERGED,True,18,9,5,https://github.com/speidy,Channels improvements,5,[],https://github.com/neutrinolabs/xrdp/pull/615,https://github.com/jsorg71,2,https://github.com/neutrinolabs/xrdp/pull/615#issuecomment-270963652,"Check for empty channel names, they are unusable. Jump Desktop client send empty channel names for disabled channels. That made xrdp think we got more channels then really negotiated via  Client MCS Channel Join Request PDUs. That fix makes Jump Desktop client work with xrdp (should resolve #594)


Respect xrdp.ini channel blocking settings. The restriction was only applied on client to server channel data.  block PDUs coming from chansrv if channel is not allowed. This change can help with Parallels Client, which doesn't support our rdpsnd channel (#608). One can now block rdpsnd channel in xrdp.ini so Parallels Client will not drop the connection.","+1 awesome, I like the second fix more than the first.
@proski only allow channel one way won't work for clipboard issue as acks are used in protocol.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,615,2017-01-06T06:43:53Z,2017-01-15T06:55:01Z,2017-03-24T07:53:42Z,MERGED,True,18,9,5,https://github.com/speidy,Channels improvements,5,[],https://github.com/neutrinolabs/xrdp/pull/615,https://github.com/speidy,3,https://github.com/neutrinolabs/xrdp/pull/615#issuecomment-270999200,"Check for empty channel names, they are unusable. Jump Desktop client send empty channel names for disabled channels. That made xrdp think we got more channels then really negotiated via  Client MCS Channel Join Request PDUs. That fix makes Jump Desktop client work with xrdp (should resolve #594)


Respect xrdp.ini channel blocking settings. The restriction was only applied on client to server channel data.  block PDUs coming from chansrv if channel is not allowed. This change can help with Parallels Client, which doesn't support our rdpsnd channel (#608). One can now block rdpsnd channel in xrdp.ini so Parallels Client will not drop the connection.",I  also think the first change is not the long term solution. I think a better solution will require to improve the xrdp <-> chansrv protocol. We should initialize channels by handling channel join pdus.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,618,2017-01-10T06:46:15Z,2017-01-12T04:58:12Z,2017-01-19T06:49:00Z,MERGED,True,1,1,1,https://github.com/metalefty,sesman: print max_disc_time as DisconnectedTimeLimit,1,[],https://github.com/neutrinolabs/xrdp/pull/618,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/618,"not max_idle_time.
It looks like just a copy & paste mistake.","not max_idle_time.
It looks like just a copy & paste mistake.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,618,2017-01-10T06:46:15Z,2017-01-12T04:58:12Z,2017-01-19T06:49:00Z,MERGED,True,1,1,1,https://github.com/metalefty,sesman: print max_disc_time as DisconnectedTimeLimit,1,[],https://github.com/neutrinolabs/xrdp/pull/618,https://github.com/proski,2,https://github.com/neutrinolabs/xrdp/pull/618#issuecomment-271504448,"not max_idle_time.
It looks like just a copy & paste mistake.",+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,619,2017-01-10T07:56:12Z,2017-01-15T06:56:48Z,2017-01-15T06:56:48Z,MERGED,True,4,3,1,https://github.com/proski,Merge master into devel,20,[],https://github.com/neutrinolabs/xrdp/pull/619,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/619,There should not be any commits in master that are not in devel. #605 will replace all PAM files anyway.,There should not be any commits in master that are not in devel. #605 will replace all PAM files anyway.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,619,2017-01-10T07:56:12Z,2017-01-15T06:56:48Z,2017-01-15T06:56:48Z,MERGED,True,4,3,1,https://github.com/proski,Merge master into devel,20,[],https://github.com/neutrinolabs/xrdp/pull/619,https://github.com/speidy,2,https://github.com/neutrinolabs/xrdp/pull/619#issuecomment-271719783,There should not be any commits in master that are not in devel. #605 will replace all PAM files anyway.,"+1
בתאריך יום ג׳, 10 בינו׳ 2017 ב-9:56 מאת Pavel Roskin <
notifications@github.com>:
 There should not be any commits in master that are not in devel. #605
 <#605> will replace all PAM
 files anyway.
 ------------------------------
 You can view, comment on, or merge this pull request online at:

   #619
 Commit Summary

    - Merge branch 'master' of github.com:neutrinolabs/xrdp
    - Merge branch 'master' of github.com:neutrinolabs/xrdp
    - Numlock out of sync fix
    - Merge branch 'master' of github.com:neutrinolabs/xrdp
    - Merge pull request #127 from ArvidNorr/numlock
    - neutrinordp: minor changes, coding style, log level
    - Update faq-compile.txt
    - Merge pull request #140 from ajaissle/patch-1
    - Change to allow authentication against all authentication methods.
    - Add details for crypt_level=fips to man page
    - Merge pull request #161 from anthonyagresta/patch-1
    - Merge branch 'devel'
    - Merge pull request #144 from seabres/pambranch
    - Merge branch 'devel'
    - Merge branch 'devel'
    - Merge branch 'devel'
    - update xorgxrdp
    - add keyboard options to xrdp_client_info
    - xorgxrdp=68412e5
    - Merge branch 'devel' of https://github.com/neutrinolabs/xrdp

 File Changes

    - *M* instfiles/pam.d/xrdp-sesman.other
    <https://github.com/neutrinolabs/xrdp/pull/619/files#diff-0> (7)

 Patch Links:

    - https://github.com/neutrinolabs/xrdp/pull/619.patch
    - https://github.com/neutrinolabs/xrdp/pull/619.diff

 —
 You are receiving this because you are subscribed to this thread.
 Reply to this email directly, view it on GitHub
 <#619>, or mute the thread
 <https://github.com/notifications/unsubscribe-auth/ADTH1BXf6HlJXu7k9kV16z55twZyBncvks5rQzmegaJpZM4LfH8A>
 .

-- 
Idan Freiberg

PGP FP: 8108 7EC9 806E 4980 75F2  72B3 8AD3 2D04 337B 1F18",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,619,2017-01-10T07:56:12Z,2017-01-15T06:56:48Z,2017-01-15T06:56:48Z,MERGED,True,4,3,1,https://github.com/proski,Merge master into devel,20,[],https://github.com/neutrinolabs/xrdp/pull/619,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/619#issuecomment-271771868,There should not be any commits in master that are not in devel. #605 will replace all PAM files anyway.,+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,624,2017-01-15T05:30:19Z,2017-03-24T06:36:37Z,2017-03-24T07:55:32Z,MERGED,True,35,14,1,https://github.com/speidy,Rail text length fix,7,[],https://github.com/neutrinolabs/xrdp/pull/624,https://github.com/speidy,1,https://github.com/neutrinolabs/xrdp/pull/624,This is an old fix we didn't merge.,This is an old fix we didn't merge.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,624,2017-01-15T05:30:19Z,2017-03-24T06:36:37Z,2017-03-24T07:55:32Z,MERGED,True,35,14,1,https://github.com/speidy,Rail text length fix,7,[],https://github.com/neutrinolabs/xrdp/pull/624,https://github.com/speidy,2,https://github.com/neutrinolabs/xrdp/pull/624#issuecomment-272676173,This is an old fix we didn't merge.,"Sorry, I think i was wrong and it doesn't fix #623.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,624,2017-01-15T05:30:19Z,2017-03-24T06:36:37Z,2017-03-24T07:55:32Z,MERGED,True,35,14,1,https://github.com/speidy,Rail text length fix,7,[],https://github.com/neutrinolabs/xrdp/pull/624,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/624#issuecomment-273674861,This is an old fix we didn't merge.,This doesn't fix #623 but still useful fix?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,624,2017-01-15T05:30:19Z,2017-03-24T06:36:37Z,2017-03-24T07:55:32Z,MERGED,True,35,14,1,https://github.com/speidy,Rail text length fix,7,[],https://github.com/neutrinolabs/xrdp/pull/624,https://github.com/speidy,4,https://github.com/neutrinolabs/xrdp/pull/624#issuecomment-273990517,This is an old fix we didn't merge.,yes.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,624,2017-01-15T05:30:19Z,2017-03-24T06:36:37Z,2017-03-24T07:55:32Z,MERGED,True,35,14,1,https://github.com/speidy,Rail text length fix,7,[],https://github.com/neutrinolabs/xrdp/pull/624,https://github.com/speidy,5,https://github.com/neutrinolabs/xrdp/pull/624#issuecomment-278597598,This is an old fix we didn't merge.,"ok, fixed the sizes issue.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,624,2017-01-15T05:30:19Z,2017-03-24T06:36:37Z,2017-03-24T07:55:32Z,MERGED,True,35,14,1,https://github.com/speidy,Rail text length fix,7,[],https://github.com/neutrinolabs/xrdp/pull/624,https://github.com/proski,6,https://github.com/neutrinolabs/xrdp/pull/624#issuecomment-287519754,This is an old fix we didn't merge.,Much better! Looks good to me.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,624,2017-01-15T05:30:19Z,2017-03-24T06:36:37Z,2017-03-24T07:55:32Z,MERGED,True,35,14,1,https://github.com/speidy,Rail text length fix,7,[],https://github.com/neutrinolabs/xrdp/pull/624,https://github.com/speidy,7,https://github.com/neutrinolabs/xrdp/pull/624#issuecomment-287523670,This is an old fix we didn't merge.,I think its ready to merge now.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,624,2017-01-15T05:30:19Z,2017-03-24T06:36:37Z,2017-03-24T07:55:32Z,MERGED,True,35,14,1,https://github.com/speidy,Rail text length fix,7,[],https://github.com/neutrinolabs/xrdp/pull/624,https://github.com/metalefty,8,https://github.com/neutrinolabs/xrdp/pull/624#issuecomment-288944959,This is an old fix we didn't merge.,Jay approved merging this in gitter chat.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,625,2017-01-15T06:29:19Z,2017-01-23T06:15:19Z,2017-03-24T07:55:13Z,MERGED,True,126,4,9,https://github.com/speidy,Pass session info in proxy mode,3,[],https://github.com/neutrinolabs/xrdp/pull/625,https://github.com/speidy,1,https://github.com/neutrinolabs/xrdp/pull/625,"Support Save Session Info PDU in proxy scenario
https://msdn.microsoft.com/en-us/library/cc240636.aspx
That one should solve #623","Support Save Session Info PDU in proxy scenario
https://msdn.microsoft.com/en-us/library/cc240636.aspx
That one should solve #623",True,"{'HEART': ['https://github.com/dudustone'], 'THUMBS_UP': ['https://github.com/dudustone']}"
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,625,2017-01-15T06:29:19Z,2017-01-23T06:15:19Z,2017-03-24T07:55:13Z,MERGED,True,126,4,9,https://github.com/speidy,Pass session info in proxy mode,3,[],https://github.com/neutrinolabs/xrdp/pull/625,https://github.com/dudustone,2,https://github.com/neutrinolabs/xrdp/pull/625#issuecomment-275956967,"Support Save Session Info PDU in proxy scenario
https://msdn.microsoft.com/en-us/library/cc240636.aspx
That one should solve #623","Thank you very much, this issue has been solved perfectly.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,626,2017-01-15T07:42:59Z,2017-01-20T04:16:05Z,2017-01-20T04:37:04Z,CLOSED,False,0,6895,15,https://github.com/proski," Remove librdp.so sources, it's obsoleted by neutrinordp",1,[],https://github.com/neutrinolabs/xrdp/pull/626,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/626,"Rename ""neutrinordp-and"" section in xrdp.ini to ""rdp-any"", as it's the only available RDP client now.
The rdp directory had no code changes since year 2010 (apart from warning fixes, cleanup and changes affecting the whole source tree).
This fixes issue #592","Rename ""neutrinordp-and"" section in xrdp.ini to ""rdp-any"", as it's the only available RDP client now.
The rdp directory had no code changes since year 2010 (apart from warning fixes, cleanup and changes affecting the whole source tree).
This fixes issue #592",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,626,2017-01-15T07:42:59Z,2017-01-20T04:16:05Z,2017-01-20T04:37:04Z,CLOSED,False,0,6895,15,https://github.com/proski," Remove librdp.so sources, it's obsoleted by neutrinordp",1,[],https://github.com/neutrinolabs/xrdp/pull/626,https://github.com/speidy,2,https://github.com/neutrinolabs/xrdp/pull/626#issuecomment-272778246,"Rename ""neutrinordp-and"" section in xrdp.ini to ""rdp-any"", as it's the only available RDP client now.
The rdp directory had no code changes since year 2010 (apart from warning fixes, cleanup and changes affecting the whole source tree).
This fixes issue #592",+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,626,2017-01-15T07:42:59Z,2017-01-20T04:16:05Z,2017-01-20T04:37:04Z,CLOSED,False,0,6895,15,https://github.com/proski," Remove librdp.so sources, it's obsoleted by neutrinordp",1,[],https://github.com/neutrinolabs/xrdp/pull/626,https://github.com/proski,3,https://github.com/neutrinolabs/xrdp/pull/626#issuecomment-272790583,"Rename ""neutrinordp-and"" section in xrdp.ini to ""rdp-any"", as it's the only available RDP client now.
The rdp directory had no code changes since year 2010 (apart from warning fixes, cleanup and changes affecting the whole source tree).
This fixes issue #592",The change for the section name has been removed from this PR.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,626,2017-01-15T07:42:59Z,2017-01-20T04:16:05Z,2017-01-20T04:37:04Z,CLOSED,False,0,6895,15,https://github.com/proski," Remove librdp.so sources, it's obsoleted by neutrinordp",1,[],https://github.com/neutrinolabs/xrdp/pull/626,https://github.com/jsorg71,4,https://github.com/neutrinolabs/xrdp/pull/626#issuecomment-273973708,"Rename ""neutrinordp-and"" section in xrdp.ini to ""rdp-any"", as it's the only available RDP client now.
The rdp directory had no code changes since year 2010 (apart from warning fixes, cleanup and changes affecting the whole source tree).
This fixes issue #592",merged as 2b614ed,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,627,2017-01-15T08:52:22Z,2017-01-23T06:22:30Z,2017-01-23T06:37:02Z,MERGED,True,5,1,2,https://github.com/proski,"Check for openssl binary in configure, don't fail if not found",1,[],https://github.com/neutrinolabs/xrdp/pull/627,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/627,"Prefer openssl binary from the same location as the openssl library.
Make it possible to suppress certificate generation during install by
passing OPENSSL=: to make.","Prefer openssl binary from the same location as the openssl library.
Make it possible to suppress certificate generation during install by
passing OPENSSL=: to make.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,627,2017-01-15T08:52:22Z,2017-01-23T06:22:30Z,2017-01-23T06:37:02Z,MERGED,True,5,1,2,https://github.com/proski,"Check for openssl binary in configure, don't fail if not found",1,[],https://github.com/neutrinolabs/xrdp/pull/627,https://github.com/speidy,2,https://github.com/neutrinolabs/xrdp/pull/627#issuecomment-272695202,"Prefer openssl binary from the same location as the openssl library.
Make it possible to suppress certificate generation during install by
passing OPENSSL=: to make.",+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,627,2017-01-15T08:52:22Z,2017-01-23T06:22:30Z,2017-01-23T06:37:02Z,MERGED,True,5,1,2,https://github.com/proski,"Check for openssl binary in configure, don't fail if not found",1,[],https://github.com/neutrinolabs/xrdp/pull/627,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/627#issuecomment-272749488,"Prefer openssl binary from the same location as the openssl library.
Make it possible to suppress certificate generation during install by
passing OPENSSL=: to make.",+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,628,2017-01-16T03:16:12Z,2017-01-17T23:59:15Z,2017-01-19T06:48:43Z,MERGED,True,0,1,1,https://github.com/metalefty,x11rdp: respect disconnect timeout set by XRDP_SESMAN_MAX_DISC_TIME,1,[],https://github.com/neutrinolabs/xrdp/pull/628,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/628,"The old code overwrites disconnect timeout to 60 sec when
XRDP_SESMAN_KILL_DISCONNECT is set to truthy value.","The old code overwrites disconnect timeout to 60 sec when
XRDP_SESMAN_KILL_DISCONNECT is set to truthy value.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,628,2017-01-16T03:16:12Z,2017-01-17T23:59:15Z,2017-01-19T06:48:43Z,MERGED,True,0,1,1,https://github.com/metalefty,x11rdp: respect disconnect timeout set by XRDP_SESMAN_MAX_DISC_TIME,1,[],https://github.com/neutrinolabs/xrdp/pull/628,https://github.com/speidy,2,https://github.com/neutrinolabs/xrdp/pull/628#issuecomment-272778229,"The old code overwrites disconnect timeout to 60 sec when
XRDP_SESMAN_KILL_DISCONNECT is set to truthy value.",+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,628,2017-01-16T03:16:12Z,2017-01-17T23:59:15Z,2017-01-19T06:48:43Z,MERGED,True,0,1,1,https://github.com/metalefty,x11rdp: respect disconnect timeout set by XRDP_SESMAN_MAX_DISC_TIME,1,[],https://github.com/neutrinolabs/xrdp/pull/628,https://github.com/proski,3,https://github.com/neutrinolabs/xrdp/pull/628#issuecomment-272786778,"The old code overwrites disconnect timeout to 60 sec when
XRDP_SESMAN_KILL_DISCONNECT is set to truthy value.",Good catch! Ship it!,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,629,2017-01-16T06:51:34Z,2017-01-19T04:12:39Z,2017-01-19T05:18:04Z,MERGED,True,34,23,3,https://github.com/proski,Improve command line documentation for xrdp and xrdp-sesman,4,[],https://github.com/neutrinolabs/xrdp/pull/629,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/629,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,629,2017-01-16T06:51:34Z,2017-01-19T04:12:39Z,2017-01-19T05:18:04Z,MERGED,True,34,23,3,https://github.com/proski,Improve command line documentation for xrdp and xrdp-sesman,4,[],https://github.com/neutrinolabs/xrdp/pull/629,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/629#issuecomment-273373646,,+1 Let's merge.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,630,2017-01-17T14:24:19Z,2017-01-23T06:16:18Z,2017-01-23T06:16:18Z,MERGED,True,1,1,1,https://github.com/selu,Fix calling XChangeProperty in clipboard provide,1,[],https://github.com/neutrinolabs/xrdp/pull/630,https://github.com/selu,1,https://github.com/neutrinolabs/xrdp/pull/630,"XChangeProperty's last parameter is number of elements, not number of bytes.
Because of this bug, Paste did not work in any java applications.
Java checks all formats first and because bytes are always bigger than length, it reads further and once it finds a 0 value, check fails with java.lang.NullPointerException
As I checked other calls of XChangeProperty in clipboard.c are fine.","XChangeProperty's last parameter is number of elements, not number of bytes.
Because of this bug, Paste did not work in any java applications.
Java checks all formats first and because bytes are always bigger than length, it reads further and once it finds a 0 value, check fails with java.lang.NullPointerException
As I checked other calls of XChangeProperty in clipboard.c are fine.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,630,2017-01-17T14:24:19Z,2017-01-23T06:16:18Z,2017-01-23T06:16:18Z,MERGED,True,1,1,1,https://github.com/selu,Fix calling XChangeProperty in clipboard provide,1,[],https://github.com/neutrinolabs/xrdp/pull/630,https://github.com/proski,2,https://github.com/neutrinolabs/xrdp/pull/630#issuecomment-273234317,"XChangeProperty's last parameter is number of elements, not number of bytes.
Because of this bug, Paste did not work in any java applications.
Java checks all formats first and because bytes are always bigger than length, it reads further and once it finds a 0 value, check fails with java.lang.NullPointerException
As I checked other calls of XChangeProperty in clipboard.c are fine.","+1, good catch, and thanks for checking other calls!",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,630,2017-01-17T14:24:19Z,2017-01-23T06:16:18Z,2017-01-23T06:16:18Z,MERGED,True,1,1,1,https://github.com/selu,Fix calling XChangeProperty in clipboard provide,1,[],https://github.com/neutrinolabs/xrdp/pull/630,https://github.com/speidy,3,https://github.com/neutrinolabs/xrdp/pull/630#issuecomment-273327301,"XChangeProperty's last parameter is number of elements, not number of bytes.
Because of this bug, Paste did not work in any java applications.
Java checks all formats first and because bytes are always bigger than length, it reads further and once it finds a 0 value, check fails with java.lang.NullPointerException
As I checked other calls of XChangeProperty in clipboard.c are fine.",+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,631,2017-01-17T17:07:58Z,2017-02-03T05:33:06Z,2017-02-03T05:33:06Z,MERGED,True,2,2,1,https://github.com/proski,"Update m4/ax_type_socklen_t.m4, it works with -Wall now",1,[],https://github.com/neutrinolabs/xrdp/pull/631,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/631,Please see autoconf-archive/autoconf-archive#103 for the original PR,Please see autoconf-archive/autoconf-archive#103 for the original PR,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,631,2017-01-17T17:07:58Z,2017-02-03T05:33:06Z,2017-02-03T05:33:06Z,MERGED,True,2,2,1,https://github.com/proski,"Update m4/ax_type_socklen_t.m4, it works with -Wall now",1,[],https://github.com/neutrinolabs/xrdp/pull/631,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/631#issuecomment-276300600,Please see autoconf-archive/autoconf-archive#103 for the original PR,+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,632,2017-01-18T02:37:27Z,2017-02-03T05:28:54Z,2017-02-03T05:28:54Z,MERGED,True,2,20,2,https://github.com/proski,Don't use ACCESS macro,1,[],https://github.com/neutrinolabs/xrdp/pull/632,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/632,"ACCESS is defined unconditionally in the files that use it. No comments
exist about that macro. The code guarded by the macro is PAM related.","ACCESS is defined unconditionally in the files that use it. No comments
exist about that macro. The code guarded by the macro is PAM related.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,632,2017-01-18T02:37:27Z,2017-02-03T05:28:54Z,2017-02-03T05:28:54Z,MERGED,True,2,20,2,https://github.com/proski,Don't use ACCESS macro,1,[],https://github.com/neutrinolabs/xrdp/pull/632,https://github.com/proski,2,https://github.com/neutrinolabs/xrdp/pull/632#issuecomment-275596826,"ACCESS is defined unconditionally in the files that use it. No comments
exist about that macro. The code guarded by the macro is PAM related.","I checked the git history, the ACCESS definition comes from commit 10fdc5c
Even in that commit, ACCESS is defined unconditionally in both files where it's used. Apparently, it was used by the commit author to disable or enable the new functionality.
Since the gateway functionality is controlled by xrdp.ini, the ACCESS definition is not needed.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,632,2017-01-18T02:37:27Z,2017-02-03T05:28:54Z,2017-02-03T05:28:54Z,MERGED,True,2,20,2,https://github.com/proski,Don't use ACCESS macro,1,[],https://github.com/neutrinolabs/xrdp/pull/632,https://github.com/speidy,3,https://github.com/neutrinolabs/xrdp/pull/632#issuecomment-276222690,"ACCESS is defined unconditionally in the files that use it. No comments
exist about that macro. The code guarded by the macro is PAM related.",👍,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,633,2017-01-18T03:03:25Z,2017-01-23T06:17:19Z,2017-01-23T06:38:37Z,MERGED,True,6,1,1,https://github.com/proski,"Only check for systemd on Linux, no need to warn users of other OSes",1,[],https://github.com/neutrinolabs/xrdp/pull/633,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/633,"That's the text that pkg-config and configure output to stderr:
Package systemd was not found in the pkg-config search path.
Perhaps you should add the directory containing `systemd.pc'
to the PKG_CONFIG_PATH environment variable
No package 'systemd' found

That's not useful on FreeBSD or Mac OS. It is still possible to specify
--with-systemdsystemunitdir=DIR manually on any OS.","That's the text that pkg-config and configure output to stderr:
Package systemd was not found in the pkg-config search path.
Perhaps you should add the directory containing `systemd.pc'
to the PKG_CONFIG_PATH environment variable
No package 'systemd' found

That's not useful on FreeBSD or Mac OS. It is still possible to specify
--with-systemdsystemunitdir=DIR manually on any OS.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,633,2017-01-18T03:03:25Z,2017-01-23T06:17:19Z,2017-01-23T06:38:37Z,MERGED,True,6,1,1,https://github.com/proski,"Only check for systemd on Linux, no need to warn users of other OSes",1,[],https://github.com/neutrinolabs/xrdp/pull/633,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/633#issuecomment-273378767,"That's the text that pkg-config and configure output to stderr:
Package systemd was not found in the pkg-config search path.
Perhaps you should add the directory containing `systemd.pc'
to the PKG_CONFIG_PATH environment variable
No package 'systemd' found

That's not useful on FreeBSD or Mac OS. It is still possible to specify
--with-systemdsystemunitdir=DIR manually on any OS.",+1 Thank you for taking care of operating systems other than Linux.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,635,2017-01-20T17:06:56Z,2017-01-21T21:34:56Z,2017-01-22T02:19:38Z,MERGED,True,1,1,1,https://github.com/proski,"Change BindTo to BindsTo, it was renamed in systemd long time ago",1,[],https://github.com/neutrinolabs/xrdp/pull/635,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/635,"BindTo was left for compatibility.
https://lists.freedesktop.org/archives/systemd-commits/2012-July/002272.html","BindTo was left for compatibility.
https://lists.freedesktop.org/archives/systemd-commits/2012-July/002272.html",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,636,2017-01-21T18:41:28Z,2017-01-23T06:15:40Z,2017-01-23T06:38:27Z,MERGED,True,1,1,1,https://github.com/proski,Fix incorrect argument to painter_line(),1,[],https://github.com/neutrinolabs/xrdp/pull/636,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/636,The second x2 should be y2,The second x2 should be y2,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,636,2017-01-21T18:41:28Z,2017-01-23T06:15:40Z,2017-01-23T06:38:27Z,MERGED,True,1,1,1,https://github.com/proski,Fix incorrect argument to painter_line(),1,[],https://github.com/neutrinolabs/xrdp/pull/636,https://github.com/speidy,2,https://github.com/neutrinolabs/xrdp/pull/636#issuecomment-274291681,The second x2 should be y2,"Great ! Thanks!
בתאריך שבת, 21 בינו׳ 2017 ב-20:41 מאת Pavel Roskin <notifications@github.com
:
 ------------------------------
 You can view, comment on, or merge this pull request online at:

   #636
 Commit Summary

    - Fix incorrect argument to painter_line()

 File Changes

    - *M* xrdp/xrdp_painter.c
    <https://github.com/neutrinolabs/xrdp/pull/636/files#diff-0> (2)

 Patch Links:

    - https://github.com/neutrinolabs/xrdp/pull/636.patch
    - https://github.com/neutrinolabs/xrdp/pull/636.diff

 —
 You are receiving this because you are subscribed to this thread.
 Reply to this email directly, view it on GitHub
 <#636>, or mute the thread
 <https://github.com/notifications/unsubscribe-auth/ADTH1KqSoZNEEcXNZ4zRXaaZxbrBGS5tks5rUlFZgaJpZM4LqJeg>
 .

-- 
Idan Freiberg

PGP FP: 8108 7EC9 806E 4980 75F2  72B3 8AD3 2D04 337B 1F18",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,637,2017-01-22T18:59:19Z,2017-01-26T03:06:37Z,2017-01-26T07:29:10Z,MERGED,True,30,28,6,https://github.com/proski,  Constify string arguments in xrdp-chansrv sources,1,[],https://github.com/neutrinolabs/xrdp/pull/637,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/637,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,637,2017-01-22T18:59:19Z,2017-01-26T03:06:37Z,2017-01-26T07:29:10Z,MERGED,True,30,28,6,https://github.com/proski,  Constify string arguments in xrdp-chansrv sources,1,[],https://github.com/neutrinolabs/xrdp/pull/637,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/637#issuecomment-275298043,,+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,638,2017-01-22T18:59:36Z,2017-01-26T07:22:30Z,2017-01-26T07:22:30Z,MERGED,True,51,14,2,https://github.com/proski,Fix several cases of discarding return values,1,[],https://github.com/neutrinolabs/xrdp/pull/638,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/638,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,638,2017-01-22T18:59:36Z,2017-01-26T07:22:30Z,2017-01-26T07:22:30Z,MERGED,True,51,14,2,https://github.com/proski,Fix several cases of discarding return values,1,[],https://github.com/neutrinolabs/xrdp/pull/638,https://github.com/jsorg71,2,https://github.com/neutrinolabs/xrdp/pull/638#issuecomment-274619387,,"these look good.
+1",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,641,2017-01-25T01:23:13Z,,2017-01-27T09:09:23Z,OPEN,False,5,3,2,https://github.com/metalefty,Fix MaxSessions cannot be unlimited,2,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/641,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/641,"Document said ""If not set or set to 0, unlimited sessions are allowed"" but it was not actually working.","Document said ""If not set or set to 0, unlimited sessions are allowed"" but it was not actually working.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,645,2017-01-25T12:14:42Z,2017-01-27T01:02:42Z,2017-01-27T01:02:42Z,MERGED,True,6,3,3,https://github.com/mirabilos,Add GNU/kFreeBSD support,2,[],https://github.com/neutrinolabs/xrdp/pull/645,https://github.com/mirabilos,1,https://github.com/neutrinolabs/xrdp/pull/645,"This depends on neutrinolabs/xorgxrdp#65 and neutrinolabs/librfxcodec#14 however.
I’ve tested this with Debian (compile test only).","This depends on neutrinolabs/xorgxrdp#65 and neutrinolabs/librfxcodec#14 however.
I’ve tested this with Debian (compile test only).",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,645,2017-01-25T12:14:42Z,2017-01-27T01:02:42Z,2017-01-27T01:02:42Z,MERGED,True,6,3,3,https://github.com/mirabilos,Add GNU/kFreeBSD support,2,[],https://github.com/neutrinolabs/xrdp/pull/645,https://github.com/proski,2,https://github.com/neutrinolabs/xrdp/pull/645#issuecomment-275165764,"This depends on neutrinolabs/xorgxrdp#65 and neutrinolabs/librfxcodec#14 however.
I’ve tested this with Debian (compile test only).",+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,645,2017-01-25T12:14:42Z,2017-01-27T01:02:42Z,2017-01-27T01:02:42Z,MERGED,True,6,3,3,https://github.com/mirabilos,Add GNU/kFreeBSD support,2,[],https://github.com/neutrinolabs/xrdp/pull/645,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/645#issuecomment-275283137,"This depends on neutrinolabs/xorgxrdp#65 and neutrinolabs/librfxcodec#14 however.
I’ve tested this with Debian (compile test only).",+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,645,2017-01-25T12:14:42Z,2017-01-27T01:02:42Z,2017-01-27T01:02:42Z,MERGED,True,6,3,3,https://github.com/mirabilos,Add GNU/kFreeBSD support,2,[],https://github.com/neutrinolabs/xrdp/pull/645,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/645#issuecomment-275559256,"This depends on neutrinolabs/xorgxrdp#65 and neutrinolabs/librfxcodec#14 however.
I’ve tested this with Debian (compile test only).",My change I'm trying to make will conflict with this. Let's merge this first.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,646,2017-01-25T14:38:51Z,2017-01-30T22:15:43Z,2017-02-03T00:25:36Z,MERGED,True,4,2,2,https://github.com/Natureshadow,Some fixes/improvements to service files.,1,[],https://github.com/neutrinolabs/xrdp/pull/646,https://github.com/Natureshadow,1,https://github.com/neutrinolabs/xrdp/pull/646,"Add Documentation field so the systemctl help command works.
Remove syslog.target as syslog is normally socket-activated now.","Add Documentation field so the systemctl help command works.
Remove syslog.target as syslog is normally socket-activated now.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,646,2017-01-25T14:38:51Z,2017-01-30T22:15:43Z,2017-02-03T00:25:36Z,MERGED,True,4,2,2,https://github.com/Natureshadow,Some fixes/improvements to service files.,1,[],https://github.com/neutrinolabs/xrdp/pull/646,https://github.com/itamarjp,2,https://github.com/neutrinolabs/xrdp/pull/646#issuecomment-275134487,"Add Documentation field so the systemctl help command works.
Remove syslog.target as syslog is normally socket-activated now.",lets see what @proski says about this one.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,646,2017-01-25T14:38:51Z,2017-01-30T22:15:43Z,2017-02-03T00:25:36Z,MERGED,True,4,2,2,https://github.com/Natureshadow,Some fixes/improvements to service files.,1,[],https://github.com/neutrinolabs/xrdp/pull/646,https://github.com/Natureshadow,3,https://github.com/neutrinolabs/xrdp/pull/646#issuecomment-275161986,"Add Documentation field so the systemctl help command works.
Remove syslog.target as syslog is normally socket-activated now.","> @@ -1,7 +1,8 @@
  [Unit]
  Description=xrdp daemon
 +Documentation=Documentation=man:xrdp(8) man:xrdp.ini(5)

 Please use one `Documentation=`, not two
Oops, how did THAT get in?
…
-nik
-- 
PGP-Fingerprint: 3C9D 54A4 7575 C026 FB17  FD26 B79A 3C16 A0C4 F296

Dominik George · Hundeshagenstr. 26 · 53225 Bonn
Mobile: +49-1520-1981389 · https://www.dominik-george.de/

Teckids e.V. · FrOSCon e.V.
Fellowship of the FSFE · Piratenpartei Deutschland
Opencaching Deutschland e.V. · Debian Maintainer

LPIC-3 Linux Enterprise Professional (Security)",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,646,2017-01-25T14:38:51Z,2017-01-30T22:15:43Z,2017-02-03T00:25:36Z,MERGED,True,4,2,2,https://github.com/Natureshadow,Some fixes/improvements to service files.,1,[],https://github.com/neutrinolabs/xrdp/pull/646,https://github.com/proski,4,https://github.com/neutrinolabs/xrdp/pull/646#issuecomment-275165023,"Add Documentation field so the systemctl help command works.
Remove syslog.target as syslog is normally socket-activated now.",+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,646,2017-01-25T14:38:51Z,2017-01-30T22:15:43Z,2017-02-03T00:25:36Z,MERGED,True,4,2,2,https://github.com/Natureshadow,Some fixes/improvements to service files.,1,[],https://github.com/neutrinolabs/xrdp/pull/646,https://github.com/speidy,5,https://github.com/neutrinolabs/xrdp/pull/646#issuecomment-276208517,"Add Documentation field so the systemctl help command works.
Remove syslog.target as syslog is normally socket-activated now.",+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,646,2017-01-25T14:38:51Z,2017-01-30T22:15:43Z,2017-02-03T00:25:36Z,MERGED,True,4,2,2,https://github.com/Natureshadow,Some fixes/improvements to service files.,1,[],https://github.com/neutrinolabs/xrdp/pull/646,https://github.com/jsorg71,6,https://github.com/neutrinolabs/xrdp/pull/646#issuecomment-276221485,"Add Documentation field so the systemctl help command works.
Remove syslog.target as syslog is normally socket-activated now.",@itamarjp I think we should be using rebase merge,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,646,2017-01-25T14:38:51Z,2017-01-30T22:15:43Z,2017-02-03T00:25:36Z,MERGED,True,4,2,2,https://github.com/Natureshadow,Some fixes/improvements to service files.,1,[],https://github.com/neutrinolabs/xrdp/pull/646,https://github.com/metalefty,7,https://github.com/neutrinolabs/xrdp/pull/646#issuecomment-276239242,"Add Documentation field so the systemctl help command works.
Remove syslog.target as syslog is normally socket-activated now.",@jsorg71 You can disallow squash merging in repository setting.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,646,2017-01-25T14:38:51Z,2017-01-30T22:15:43Z,2017-02-03T00:25:36Z,MERGED,True,4,2,2,https://github.com/Natureshadow,Some fixes/improvements to service files.,1,[],https://github.com/neutrinolabs/xrdp/pull/646,https://github.com/metalefty,8,https://github.com/neutrinolabs/xrdp/pull/646#issuecomment-276240164,"Add Documentation field so the systemctl help command works.
Remove syslog.target as syslog is normally socket-activated now.","However, I'd like to use squash merging if a PR contains only one commit because It includes PR number in commit message. As I mentioned in the mailing list. Squash merging joins multiple commits in one commit so if one commit, it doesn't squash anything.
https://groups.google.com/forum/?utm_medium=email&utm_source=footer#!msg/xrdp-devel/zb4Ka54XfDo/TUkCarh8GwAJ",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,646,2017-01-25T14:38:51Z,2017-01-30T22:15:43Z,2017-02-03T00:25:36Z,MERGED,True,4,2,2,https://github.com/Natureshadow,Some fixes/improvements to service files.,1,[],https://github.com/neutrinolabs/xrdp/pull/646,https://github.com/shalabhgoel13,9,https://github.com/neutrinolabs/xrdp/pull/646#issuecomment-276344039,"Add Documentation field so the systemctl help command works.
Remove syslog.target as syslog is normally socket-activated now.",The path for xrdp and xrdp-sesman binaries in CentOS/RHEL is /usr/local/bin instead of /usr/sbin. I have installed it multiple times. Can someone please verify and update accordingly?,True,"{'THUMBS_DOWN': ['https://github.com/itamarjp', 'https://github.com/metalefty']}"
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,646,2017-01-25T14:38:51Z,2017-01-30T22:15:43Z,2017-02-03T00:25:36Z,MERGED,True,4,2,2,https://github.com/Natureshadow,Some fixes/improvements to service files.,1,[],https://github.com/neutrinolabs/xrdp/pull/646,https://github.com/Natureshadow,10,https://github.com/neutrinolabs/xrdp/pull/646#issuecomment-276360898,"Add Documentation field so the systemctl help command works.
Remove syslog.target as syslog is normally socket-activated now.","@shalabhgoel13 Where did you nstall it from? If you installed it from a package in your distribution, then this is a serious bug and you should report it to the maintainer of the package in RedHat See the FHS and LSB for details.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,646,2017-01-25T14:38:51Z,2017-01-30T22:15:43Z,2017-02-03T00:25:36Z,MERGED,True,4,2,2,https://github.com/Natureshadow,Some fixes/improvements to service files.,1,[],https://github.com/neutrinolabs/xrdp/pull/646,https://github.com/metalefty,11,https://github.com/neutrinolabs/xrdp/pull/646#issuecomment-276534348,"Add Documentation field so the systemctl help command works.
Remove syslog.target as syslog is normally socket-activated now.","xrdp and xrdp-sesman are correctly installed into sbin directory.
https://github.com/neutrinolabs/xrdp/blob/devel/xrdp/Makefile.am#L41
https://github.com/neutrinolabs/xrdp/blob/devel/sesman/Makefile.am#L40",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,646,2017-01-25T14:38:51Z,2017-01-30T22:15:43Z,2017-02-03T00:25:36Z,MERGED,True,4,2,2,https://github.com/Natureshadow,Some fixes/improvements to service files.,1,[],https://github.com/neutrinolabs/xrdp/pull/646,https://github.com/itamarjp,12,https://github.com/neutrinolabs/xrdp/pull/646#issuecomment-276551588,"Add Documentation field so the systemctl help command works.
Remove syslog.target as syslog is normally socket-activated now.",@shalabhgoel13 xrdp is installed in /usr/local only if you run ./configure with default config.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,646,2017-01-25T14:38:51Z,2017-01-30T22:15:43Z,2017-02-03T00:25:36Z,MERGED,True,4,2,2,https://github.com/Natureshadow,Some fixes/improvements to service files.,1,[],https://github.com/neutrinolabs/xrdp/pull/646,https://github.com/shalabhgoel13,13,https://github.com/neutrinolabs/xrdp/pull/646#issuecomment-276570559,"Add Documentation field so the systemctl help command works.
Remove syslog.target as syslog is normally socket-activated now.","I downloaded and compiled xrdp 0.9 from github it in Centos and RHEL both.
Both the times I had this issue.
…
On Tue, Jan 31, 2017 at 6:50 PM, Dominik George ***@***.***> wrote:
 @shalabhgoel13 <https://github.com/shalabhgoel13> Where did you nstall it
 from? If you installed it from a package in your distribution, then this is
 a serious bug and you should report it to the maintainer of the package in
 RedHat.

 —
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub
 <#646 (comment)>,
 or mute the thread
 <https://github.com/notifications/unsubscribe-auth/ANASHsF5ZMNGpgZa4W8QxEF1wieAQdAsks5rXzUigaJpZM4Ltjq8>
 .


-- 
Shalabh Goel",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,646,2017-01-25T14:38:51Z,2017-01-30T22:15:43Z,2017-02-03T00:25:36Z,MERGED,True,4,2,2,https://github.com/Natureshadow,Some fixes/improvements to service files.,1,[],https://github.com/neutrinolabs/xrdp/pull/646,https://github.com/metalefty,14,https://github.com/neutrinolabs/xrdp/pull/646#issuecomment-276579888,"Add Documentation field so the systemctl help command works.
Remove syslog.target as syslog is normally socket-activated now.","Not an xrdp issue. You have to specify non default prefix.  It is common to all softwares which uses GNU configure.
https://www.gnu.org/software/autoconf/manual/autoconf-2.66/html_node/Default-Prefix.html",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,646,2017-01-25T14:38:51Z,2017-01-30T22:15:43Z,2017-02-03T00:25:36Z,MERGED,True,4,2,2,https://github.com/Natureshadow,Some fixes/improvements to service files.,1,[],https://github.com/neutrinolabs/xrdp/pull/646,https://github.com/metalefty,15,https://github.com/neutrinolabs/xrdp/pull/646#issuecomment-276580690,"Add Documentation field so the systemctl help command works.
Remove syslog.target as syslog is normally socket-activated now.",And of course not also an CentOS issue.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,646,2017-01-25T14:38:51Z,2017-01-30T22:15:43Z,2017-02-03T00:25:36Z,MERGED,True,4,2,2,https://github.com/Natureshadow,Some fixes/improvements to service files.,1,[],https://github.com/neutrinolabs/xrdp/pull/646,https://github.com/shalabhgoel13,16,https://github.com/neutrinolabs/xrdp/pull/646#issuecomment-276599961,"Add Documentation field so the systemctl help command works.
Remove syslog.target as syslog is normally socket-activated now.","so where to mention prefix? It is not mentioned so in the build xrdp in
CentOS document either. I am new to this so a little more clarification
will be helpful.
…
On Wed, Feb 1, 2017 at 11:41 AM, metalefty ***@***.***> wrote:
 And of course not also an CentOS issue.

 —
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub
 <#646 (comment)>,
 or mute the thread
 <https://github.com/notifications/unsubscribe-auth/ANASHtn7CBYDBFgcpIUSvV1sJs39uGdqks5rYCH0gaJpZM4Ltjq8>
 .


-- 
Shalabh Goel",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,646,2017-01-25T14:38:51Z,2017-01-30T22:15:43Z,2017-02-03T00:25:36Z,MERGED,True,4,2,2,https://github.com/Natureshadow,Some fixes/improvements to service files.,1,[],https://github.com/neutrinolabs/xrdp/pull/646,https://github.com/Natureshadow,17,https://github.com/neutrinolabs/xrdp/pull/646#issuecomment-276600895,"Add Documentation field so the systemctl help command works.
Remove syslog.target as syslog is normally socket-activated now.","Did you see the autoconf link?

But: If you compile and install xrdp yourself, then */usr/local is the correct prefix*!

Read the FHS and LFS (again). /usr/sbin is reserved for your distribution's package manager!",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,646,2017-01-25T14:38:51Z,2017-01-30T22:15:43Z,2017-02-03T00:25:36Z,MERGED,True,4,2,2,https://github.com/Natureshadow,Some fixes/improvements to service files.,1,[],https://github.com/neutrinolabs/xrdp/pull/646,https://github.com/shalabhgoel13,18,https://github.com/neutrinolabs/xrdp/pull/646#issuecomment-276877690,"Add Documentation field so the systemctl help command works.
Remove syslog.target as syslog is normally socket-activated now.","So you want to say that while running ./configure, I should add --prefix
/usr/sbin to it so that the path in the service files matches to that of
binary files?
…
On Wed, Feb 1, 2017 at 2:05 PM, Dominik George ***@***.***> wrote:
 Did you see the autoconf link?

 But: If you compile and install xrdp yourself, then */usr/local is the
 correct prefix*!

 Read the FHS and LFS (again). /usr/sbin is reserved for your
 distribution's package manager!

 —
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub
 <#646 (comment)>,
 or mute the thread
 <https://github.com/notifications/unsubscribe-auth/ANASHutnN0rBJWoeMruOcFLX9Q1QIHK0ks5rYEO4gaJpZM4Ltjq8>
 .


-- 
Shalabh Goel",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,646,2017-01-25T14:38:51Z,2017-01-30T22:15:43Z,2017-02-03T00:25:36Z,MERGED,True,4,2,2,https://github.com/Natureshadow,Some fixes/improvements to service files.,1,[],https://github.com/neutrinolabs/xrdp/pull/646,https://github.com/metalefty,19,https://github.com/neutrinolabs/xrdp/pull/646#issuecomment-276882352,"Add Documentation field so the systemctl help command works.
Remove syslog.target as syslog is normally socket-activated now.","You should learn more about autoconf. It is neither xrdp nor CentOS specific issue. It is common among other softwares such as Apache or GNU screen. Try to compile and install them and observe where are the default binary install path. xrdp does nothing special.
./configure does as same as ./configure --prefix=/usr/local and installs xrdp and xrdp-sesman into /usr/local/sbin. Then, if you want to install them into /usr/sbin, what the prefix should be? Think.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,646,2017-01-25T14:38:51Z,2017-01-30T22:15:43Z,2017-02-03T00:25:36Z,MERGED,True,4,2,2,https://github.com/Natureshadow,Some fixes/improvements to service files.,1,[],https://github.com/neutrinolabs/xrdp/pull/646,https://github.com/shalabhgoel13,20,https://github.com/neutrinolabs/xrdp/pull/646#issuecomment-276886465,"Add Documentation field so the systemctl help command works.
Remove syslog.target as syslog is normally socket-activated now.","I got it . Thanks. Just one more thing, can this info be provided in the
document?
…
On Thu, Feb 2, 2017 at 12:23 PM, metalefty ***@***.***> wrote:
 You should learn more about autoconf. It is neither xrdp nor CentOS
 specific issue. It is common among other softwares such as Apache
 <https://httpd.apache.org/download.cgi#apache24> or GNU screen
 <https://www.gnu.org/software/screen/>. Try to compile and install then
 and observe where are the default binary install path.

 ./configure does as same as ./configure --prefix=/usr/local and installs
 xrdp and xrdp-sesman into /usr/local/sbin. Then, if you want to install
 them into /usr/sbin, what the prefix should be? Think.

 —
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub
 <#646 (comment)>,
 or mute the thread
 <https://github.com/notifications/unsubscribe-auth/ANASHjmlCDI9H5GqmbILsLYmmr_Te4Giks5rYX1RgaJpZM4Ltjq8>
 .


-- 
Shalabh Goel",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,646,2017-01-25T14:38:51Z,2017-01-30T22:15:43Z,2017-02-03T00:25:36Z,MERGED,True,4,2,2,https://github.com/Natureshadow,Some fixes/improvements to service files.,1,[],https://github.com/neutrinolabs/xrdp/pull/646,https://github.com/Natureshadow,21,https://github.com/neutrinolabs/xrdp/pull/646#issuecomment-276996502,"Add Documentation field so the systemctl help command works.
Remove syslog.target as syslog is normally socket-activated now.","It's explained in ./configure --help, the FHS and LSB. No need to copy the same information again, IMHO :).
Also, file a bug with your distribution for not having a decent package of xrdp ;)!",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,646,2017-01-25T14:38:51Z,2017-01-30T22:15:43Z,2017-02-03T00:25:36Z,MERGED,True,4,2,2,https://github.com/Natureshadow,Some fixes/improvements to service files.,1,[],https://github.com/neutrinolabs/xrdp/pull/646,https://github.com/metalefty,22,https://github.com/neutrinolabs/xrdp/pull/646#issuecomment-277128845,"Add Documentation field so the systemctl help command works.
Remove syslog.target as syslog is normally socket-activated now.",I also share the same opinion.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,648,2017-01-26T07:50:06Z,2017-02-03T05:24:51Z,2017-02-03T05:24:51Z,MERGED,True,23,9,1,https://github.com/proski,"Several fixes for xrdp-sesadmin, including bad free() on error",3,[],https://github.com/neutrinolabs/xrdp/pull/648,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/648,"Example of improved output:
Session ID: 24952
	Session type: 2
	Screen size: 640x480, color depth 24
	Idle time: 0 day(s) 0 hour(s) 0 minute(s)
	Connected: 2017/01/26 00:11
Session ID: 23848
	Session type: 3
	Screen size: 1280x800, color depth 24
	Idle time: 0 day(s) 0 hour(s) 0 minute(s)
	Connected: 2017/01/26 00:07
Session ID: 13199
	Session type: 1
	Screen size: 1280x800, color depth 24
	Idle time: 0 day(s) 0 hour(s) 0 minute(s)
	Connected: 2017/01/25 23:02","Example of improved output:
Session ID: 24952
	Session type: 2
	Screen size: 640x480, color depth 24
	Idle time: 0 day(s) 0 hour(s) 0 minute(s)
	Connected: 2017/01/26 00:11
Session ID: 23848
	Session type: 3
	Screen size: 1280x800, color depth 24
	Idle time: 0 day(s) 0 hour(s) 0 minute(s)
	Connected: 2017/01/26 00:07
Session ID: 13199
	Session type: 1
	Screen size: 1280x800, color depth 24
	Idle time: 0 day(s) 0 hour(s) 0 minute(s)
	Connected: 2017/01/25 23:02",True,"{'THUMBS_UP': ['https://github.com/metalefty', 'https://github.com/speidy']}"
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,648,2017-01-26T07:50:06Z,2017-02-03T05:24:51Z,2017-02-03T05:24:51Z,MERGED,True,23,9,1,https://github.com/proski,"Several fixes for xrdp-sesadmin, including bad free() on error",3,[],https://github.com/neutrinolabs/xrdp/pull/648,https://github.com/speidy,2,https://github.com/neutrinolabs/xrdp/pull/648#issuecomment-275328065,"Example of improved output:
Session ID: 24952
	Session type: 2
	Screen size: 640x480, color depth 24
	Idle time: 0 day(s) 0 hour(s) 0 minute(s)
	Connected: 2017/01/26 00:11
Session ID: 23848
	Session type: 3
	Screen size: 1280x800, color depth 24
	Idle time: 0 day(s) 0 hour(s) 0 minute(s)
	Connected: 2017/01/26 00:07
Session ID: 13199
	Session type: 1
	Screen size: 1280x800, color depth 24
	Idle time: 0 day(s) 0 hour(s) 0 minute(s)
	Connected: 2017/01/25 23:02","Nice 👍
בתאריך יום ה׳, 26 בינו׳ 2017 ב-9:50 מאת Pavel Roskin <
notifications@github.com>:
 Example of improved output:

 Session ID: 24952
 	Session type: 2
 	Screen size: 640x480, color depth 24
 	Idle time: 0 day(s) 0 hour(s) 0 minute(s)
 	Connected: 2017/01/26 00:11
 Session ID: 23848
 	Session type: 3
 	Screen size: 1280x800, color depth 24
 	Idle time: 0 day(s) 0 hour(s) 0 minute(s)
 	Connected: 2017/01/26 00:07
 Session ID: 13199
 	Session type: 1
 	Screen size: 1280x800, color depth 24
 	Idle time: 0 day(s) 0 hour(s) 0 minute(s)
 	Connected: 2017/01/25 23:02

 ------------------------------
 You can view, comment on, or merge this pull request online at:

   #648
 Commit Summary

    - xrdp-sesadmin: fix crash on network or authentication error
    - xrdp-sesadmin: refactor array access
    - xrdp-sesadmin: show sessions in human readable format

 File Changes

    - *M* sesman/tools/sesadmin.c
    <https://github.com/neutrinolabs/xrdp/pull/648/files#diff-0> (32)

 Patch Links:

    - https://github.com/neutrinolabs/xrdp/pull/648.patch
    - https://github.com/neutrinolabs/xrdp/pull/648.diff

 —
 You are receiving this because you are subscribed to this thread.
 Reply to this email directly, view it on GitHub
 <#648>, or mute the thread
 <https://github.com/notifications/unsubscribe-auth/ADTH1PK-ISwDw88_GN2XUuJQCuWkq14lks5rWFAwgaJpZM4LuX5Z>
 .

-- 
Idan Freiberg

PGP FP: 8108 7EC9 806E 4980 75F2  72B3 8AD3 2D04 337B 1F18",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,649,2017-01-26T08:15:59Z,2017-01-30T07:14:34Z,2017-07-29T03:53:10Z,MERGED,True,43,30,3,https://github.com/jsorg71,arch.h changes to include stdint.h,4,[],https://github.com/neutrinolabs/xrdp/pull/649,https://github.com/jsorg71,1,https://github.com/neutrinolabs/xrdp/pull/649,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,649,2017-01-26T08:15:59Z,2017-01-30T07:14:34Z,2017-07-29T03:53:10Z,MERGED,True,43,30,3,https://github.com/jsorg71,arch.h changes to include stdint.h,4,[],https://github.com/neutrinolabs/xrdp/pull/649,https://github.com/jsorg71,2,https://github.com/neutrinolabs/xrdp/pull/649#issuecomment-275333592,,I didn't notice we added -Werror to Travis,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,649,2017-01-26T08:15:59Z,2017-01-30T07:14:34Z,2017-07-29T03:53:10Z,MERGED,True,43,30,3,https://github.com/jsorg71,arch.h changes to include stdint.h,4,[],https://github.com/neutrinolabs/xrdp/pull/649,https://github.com/proski,3,https://github.com/neutrinolabs/xrdp/pull/649#issuecomment-275793786,,+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,650,2017-01-27T01:58:03Z,2017-01-28T12:14:56Z,2018-01-31T06:56:15Z,MERGED,True,12,21,1,https://github.com/metalefty,sesman: remove unnecessary fork for FreeBSD,1,[],https://github.com/neutrinolabs/xrdp/pull/650,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/650,it is not only unnecessary but causes another bug.,it is not only unnecessary but causes another bug.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,650,2017-01-27T01:58:03Z,2017-01-28T12:14:56Z,2018-01-31T06:56:15Z,MERGED,True,12,21,1,https://github.com/metalefty,sesman: remove unnecessary fork for FreeBSD,1,[],https://github.com/neutrinolabs/xrdp/pull/650,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/650#issuecomment-275608952,it is not only unnecessary but causes another bug.,"The old code runs session twice due to unnecessary deeper forking. After first session exits, new session starts again.  Besides, the second session doesn't passes FreeBSD specific code.
It's difficult for me to explain what happens by the old code.  Please see the below figure.
sesman daemon
   |
   |        this sesman becomes sessvc and forks Xorg, chansrv, session when child sessvc exits
   |               |
xrdp-sesman -+- xrdp-sesman --- xrdp-sessvc -+- Xorg        <- first session: setlogined
             +                               +- xrdp-chansrv    this session passes thorough FreeBSD specific patch
             +                               +- xrdp-sesman --- (session manager, ex. Xfce4)
             +
             +
             +- xrdp-sessvc --- Xorg                         <- second session: NOT setlogined
                    |        +- xrdp-chansrv                     this session doesn't passes FreeBSD specific patch, runs after first session exits
                    |        +- xrdp-sesman --- (session manager, ex, Xfce4)   
                    |
              this sessvc was above sesman",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,650,2017-01-27T01:58:03Z,2017-01-28T12:14:56Z,2018-01-31T06:56:15Z,MERGED,True,12,21,1,https://github.com/metalefty,sesman: remove unnecessary fork for FreeBSD,1,[],https://github.com/neutrinolabs/xrdp/pull/650,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/650#issuecomment-275610845,it is not only unnecessary but causes another bug.,"The bug is born by myself, found by myself, fixed by myself 😔 so it is not reported to elsewhere.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,650,2017-01-27T01:58:03Z,2017-01-28T12:14:56Z,2018-01-31T06:56:15Z,MERGED,True,12,21,1,https://github.com/metalefty,sesman: remove unnecessary fork for FreeBSD,1,[],https://github.com/neutrinolabs/xrdp/pull/650,https://github.com/proski,4,https://github.com/neutrinolabs/xrdp/pull/650#issuecomment-275611946,it is not only unnecessary but causes another bug.,"OK then. Just please fix the unnecessarily moved code and let's merge.
By the way, we should split huge functions that do multiple things, fork, wait, loop etc. Bad code structure contributes to such bugs.
Also, it seems strange that xrdp-sesman serves both as a root-owned authenticating daemon and as a user-owned session manager. The later functionality could be split into a separate binary, say, xrdp-session.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,650,2017-01-27T01:58:03Z,2017-01-28T12:14:56Z,2018-01-31T06:56:15Z,MERGED,True,12,21,1,https://github.com/metalefty,sesman: remove unnecessary fork for FreeBSD,1,[],https://github.com/neutrinolabs/xrdp/pull/650,https://github.com/metalefty,5,https://github.com/neutrinolabs/xrdp/pull/650#issuecomment-275613093,it is not only unnecessary but causes another bug.,I agree with the last sentence. Let's merge later.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,650,2017-01-27T01:58:03Z,2017-01-28T12:14:56Z,2018-01-31T06:56:15Z,MERGED,True,12,21,1,https://github.com/metalefty,sesman: remove unnecessary fork for FreeBSD,1,[],https://github.com/neutrinolabs/xrdp/pull/650,https://github.com/proski,6,https://github.com/neutrinolabs/xrdp/pull/650#issuecomment-275720932,it is not only unnecessary but causes another bug.,"+1
I don't see any reason to merge this PR later, it should be OK to merge now.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,651,2017-01-27T18:52:12Z,2017-01-30T22:18:57Z,2017-01-31T00:13:17Z,MERGED,True,8,1,1,https://github.com/itamarjp,"Update README.md about installing / adjusting firewall on Fedora,Centos and RHEL",1,[],https://github.com/neutrinolabs/xrdp/pull/651,https://github.com/itamarjp,1,https://github.com/neutrinolabs/xrdp/pull/651,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,651,2017-01-27T18:52:12Z,2017-01-30T22:18:57Z,2017-01-31T00:13:17Z,MERGED,True,8,1,1,https://github.com/itamarjp,"Update README.md about installing / adjusting firewall on Fedora,Centos and RHEL",1,[],https://github.com/neutrinolabs/xrdp/pull/651,https://github.com/itamarjp,2,https://github.com/neutrinolabs/xrdp/pull/651#issuecomment-276210094,,I will merge please update on top of it if needed.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,651,2017-01-27T18:52:12Z,2017-01-30T22:18:57Z,2017-01-31T00:13:17Z,MERGED,True,8,1,1,https://github.com/itamarjp,"Update README.md about installing / adjusting firewall on Fedora,Centos and RHEL",1,[],https://github.com/neutrinolabs/xrdp/pull/651,https://github.com/proski,3,https://github.com/neutrinolabs/xrdp/pull/651#issuecomment-276225514,,"I believe it is the responsibility of the PR author to address all objections. In some cases it may be OK to push changes and promise fixes later. It's much worse to merge the PR as is and ask others to submit changes. That shifts the responsibility to other developers, who may have completely different priorities and perspectives. I, for one, would prefer to have that information in the Wiki.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,651,2017-01-27T18:52:12Z,2017-01-30T22:18:57Z,2017-01-31T00:13:17Z,MERGED,True,8,1,1,https://github.com/itamarjp,"Update README.md about installing / adjusting firewall on Fedora,Centos and RHEL",1,[],https://github.com/neutrinolabs/xrdp/pull/651,https://github.com/proski,4,https://github.com/neutrinolabs/xrdp/pull/651#issuecomment-276231801,,The requested fixes are part of #654,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,652,2017-01-30T06:36:24Z,2017-01-31T08:07:07Z,2017-01-31T08:07:07Z,MERGED,True,0,13,2,https://github.com/metalefty,docs: remove IdleTimeLimit until it is actually implemented,1,[],https://github.com/neutrinolabs/xrdp/pull/652,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/652,it gives users false hope and finally disappoints them.,it gives users false hope and finally disappoints them.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,652,2017-01-30T06:36:24Z,2017-01-31T08:07:07Z,2017-01-31T08:07:07Z,MERGED,True,0,13,2,https://github.com/metalefty,docs: remove IdleTimeLimit until it is actually implemented,1,[],https://github.com/neutrinolabs/xrdp/pull/652,https://github.com/proski,2,https://github.com/neutrinolabs/xrdp/pull/652#issuecomment-276118439,it gives users false hope and finally disappoints them.,"+1
The configuration files and the manuals are not the right place for TODO lists.
Please note that there are still references to IdleTimeLimit, max_idle_time, and XRDP_SESMAN_MAX_IDLE_TIME in the code. If nobody plans to implement idle timeout, they should be removed too.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,652,2017-01-30T06:36:24Z,2017-01-31T08:07:07Z,2017-01-31T08:07:07Z,MERGED,True,0,13,2,https://github.com/metalefty,docs: remove IdleTimeLimit until it is actually implemented,1,[],https://github.com/neutrinolabs/xrdp/pull/652,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/652#issuecomment-276243880,it gives users false hope and finally disappoints them.,I think everything to support idle timeout is done in xrdp (as frontend). The rest part should be done in xorgxrdp/x11rdp.  We can remove such code and whenever resurrect it from git history if implementation is done in backend.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,652,2017-01-30T06:36:24Z,2017-01-31T08:07:07Z,2017-01-31T08:07:07Z,MERGED,True,0,13,2,https://github.com/metalefty,docs: remove IdleTimeLimit until it is actually implemented,1,[],https://github.com/neutrinolabs/xrdp/pull/652,https://github.com/proski,4,https://github.com/neutrinolabs/xrdp/pull/652#issuecomment-276259064,it gives users false hope and finally disappoints them.,"OK, let's merge",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,652,2017-01-30T06:36:24Z,2017-01-31T08:07:07Z,2017-01-31T08:07:07Z,MERGED,True,0,13,2,https://github.com/metalefty,docs: remove IdleTimeLimit until it is actually implemented,1,[],https://github.com/neutrinolabs/xrdp/pull/652,https://github.com/metalefty,5,https://github.com/neutrinolabs/xrdp/pull/652#issuecomment-276299397,it gives users false hope and finally disappoints them.,"No logic change, merging immediately.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,654,2017-01-30T23:59:07Z,2017-02-08T04:30:57Z,2017-02-08T06:03:40Z,MERGED,True,54,43,9,https://github.com/proski,Documentation improvements,4,[],https://github.com/neutrinolabs/xrdp/pull/654,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/654,,,True,{'THUMBS_UP': ['https://github.com/metalefty']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,654,2017-01-30T23:59:07Z,2017-02-08T04:30:57Z,2017-02-08T06:03:40Z,MERGED,True,54,43,9,https://github.com/proski,Documentation improvements,4,[],https://github.com/neutrinolabs/xrdp/pull/654,https://github.com/proski,2,https://github.com/neutrinolabs/xrdp/pull/654#issuecomment-276258749,,Rephrased text about dnf and yum.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,654,2017-01-30T23:59:07Z,2017-02-08T04:30:57Z,2017-02-08T06:03:40Z,MERGED,True,54,43,9,https://github.com/proski,Documentation improvements,4,[],https://github.com/neutrinolabs/xrdp/pull/654,https://github.com/itamarjp,3,https://github.com/neutrinolabs/xrdp/pull/654#issuecomment-276260312,,"I noted something, xrdp is not packaged for RedHat / CentOS ( xrdp is in fedora-epel repo)
in centos is required to enable epel repo doing a
yum -y install epel-release
and only after that doing a yum -y install xrdp
I don't know about what should be the procedure for a RedHat system.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,654,2017-01-30T23:59:07Z,2017-02-08T04:30:57Z,2017-02-08T06:03:40Z,MERGED,True,54,43,9,https://github.com/proski,Documentation improvements,4,[],https://github.com/neutrinolabs/xrdp/pull/654,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/654#issuecomment-276275808,,"Indeed.  EPEL needs to be installed first.
Once again, users are responsible to confirm what changes will be made to their system.
According to yum help, -y option answers yes to any question not only installation confirmation.
We shouldn't add it. It should be added by users' own decision.

-y, --asumeyes
Assume yes; assume that the answer to any question which would be asked is yes.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,654,2017-01-30T23:59:07Z,2017-02-08T04:30:57Z,2017-02-08T06:03:40Z,MERGED,True,54,43,9,https://github.com/proski,Documentation improvements,4,[],https://github.com/neutrinolabs/xrdp/pull/654,https://github.com/metalefty,5,https://github.com/neutrinolabs/xrdp/pull/654#issuecomment-278198316,,@proski What do you think about adding instruction how to enable EPEL?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,654,2017-01-30T23:59:07Z,2017-02-08T04:30:57Z,2017-02-08T06:03:40Z,MERGED,True,54,43,9,https://github.com/proski,Documentation improvements,4,[],https://github.com/neutrinolabs/xrdp/pull/654,https://github.com/proski,6,https://github.com/neutrinolabs/xrdp/pull/654#issuecomment-278208003,,Done.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,654,2017-01-30T23:59:07Z,2017-02-08T04:30:57Z,2017-02-08T06:03:40Z,MERGED,True,54,43,9,https://github.com/proski,Documentation improvements,4,[],https://github.com/neutrinolabs/xrdp/pull/654,https://github.com/metalefty,7,https://github.com/neutrinolabs/xrdp/pull/654#issuecomment-278208422,,Now looks good to me.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,654,2017-01-30T23:59:07Z,2017-02-08T04:30:57Z,2017-02-08T06:03:40Z,MERGED,True,54,43,9,https://github.com/proski,Documentation improvements,4,[],https://github.com/neutrinolabs/xrdp/pull/654,https://github.com/metalefty,8,https://github.com/neutrinolabs/xrdp/pull/654#issuecomment-278226404,,"Doc changes only, merging.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,656,2017-02-01T04:28:42Z,2017-02-03T05:46:50Z,2017-05-19T07:34:14Z,MERGED,True,4,4,1,https://github.com/metalefty,chansrv: fix warnings in pulse module,1,[],https://github.com/neutrinolabs/xrdp/pull/656,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/656,It was undiscovered due to pulse module is currently not tested by travis.,It was undiscovered due to pulse module is currently not tested by travis.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,656,2017-02-01T04:28:42Z,2017-02-03T05:46:50Z,2017-05-19T07:34:14Z,MERGED,True,4,4,1,https://github.com/metalefty,chansrv: fix warnings in pulse module,1,[],https://github.com/neutrinolabs/xrdp/pull/656,https://github.com/proski,2,https://github.com/neutrinolabs/xrdp/pull/656#issuecomment-276583060,It was undiscovered due to pulse module is currently not tested by travis.,"We should incorporate audio into the build.
The pa_usec_t type is defined as uint64_t. We cannot assume that it's long. The standard approach is to cast the argument to unsigned long long and use %llu format.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,656,2017-02-01T04:28:42Z,2017-02-03T05:46:50Z,2017-05-19T07:34:14Z,MERGED,True,4,4,1,https://github.com/metalefty,chansrv: fix warnings in pulse module,1,[],https://github.com/neutrinolabs/xrdp/pull/656,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/656#issuecomment-276590654,It was undiscovered due to pulse module is currently not tested by travis.,I already have a Makefile to build pulse module. I'll brush it up and integrate into travis build.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,656,2017-02-01T04:28:42Z,2017-02-03T05:46:50Z,2017-05-19T07:34:14Z,MERGED,True,4,4,1,https://github.com/metalefty,chansrv: fix warnings in pulse module,1,[],https://github.com/neutrinolabs/xrdp/pull/656,https://github.com/proski,4,https://github.com/neutrinolabs/xrdp/pull/656#issuecomment-276591550,It was undiscovered due to pulse module is currently not tested by travis.,It's not just Travis. It should be built and installed as part of the build. Then Travis would pick it up automatically.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,656,2017-02-01T04:28:42Z,2017-02-03T05:46:50Z,2017-05-19T07:34:14Z,MERGED,True,4,4,1,https://github.com/metalefty,chansrv: fix warnings in pulse module,1,[],https://github.com/neutrinolabs/xrdp/pull/656,https://github.com/metalefty,5,https://github.com/neutrinolabs/xrdp/pull/656#issuecomment-276592609,It was undiscovered due to pulse module is currently not tested by travis.,Sure. But pulseaudio's configured source is required to build. The build process will be different depending on distro.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,656,2017-02-01T04:28:42Z,2017-02-03T05:46:50Z,2017-05-19T07:34:14Z,MERGED,True,4,4,1,https://github.com/metalefty,chansrv: fix warnings in pulse module,1,[],https://github.com/neutrinolabs/xrdp/pull/656,https://github.com/jsorg71,6,https://github.com/neutrinolabs/xrdp/pull/656#issuecomment-277063224,It was undiscovered due to pulse module is currently not tested by travis.,"I've tried to push the pulseaudio guys to release a development package for building sinks and sources out of tree.  Sometime like pulseaudio-dev for Debian.
They did not seem very interested.
It's too bad, they have a really nice module system.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,656,2017-02-01T04:28:42Z,2017-02-03T05:46:50Z,2017-05-19T07:34:14Z,MERGED,True,4,4,1,https://github.com/metalefty,chansrv: fix warnings in pulse module,1,[],https://github.com/neutrinolabs/xrdp/pull/656,https://github.com/metalefty,7,https://github.com/neutrinolabs/xrdp/pull/656#issuecomment-277128511,It was undiscovered due to pulse module is currently not tested by travis.,"Anyway, let's fix warnings first. If the change looks good, please merge.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,656,2017-02-01T04:28:42Z,2017-02-03T05:46:50Z,2017-05-19T07:34:14Z,MERGED,True,4,4,1,https://github.com/metalefty,chansrv: fix warnings in pulse module,1,[],https://github.com/neutrinolabs/xrdp/pull/656,https://github.com/jsorg71,8,https://github.com/neutrinolabs/xrdp/pull/656#issuecomment-277132007,It was undiscovered due to pulse module is currently not tested by travis.,"+1
Looks good to me, remember, in this file we are trying to match pulseaudio's coding style.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,658,2017-02-02T06:04:56Z,2017-02-23T04:39:57Z,2017-07-29T03:51:09Z,MERGED,True,12,9,6,https://github.com/jsorg71,fix warning new since stdint.h change,3,[],https://github.com/neutrinolabs/xrdp/pull/658,https://github.com/jsorg71,1,https://github.com/neutrinolabs/xrdp/pull/658,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,658,2017-02-02T06:04:56Z,2017-02-23T04:39:57Z,2017-07-29T03:51:09Z,MERGED,True,12,9,6,https://github.com/jsorg71,fix warning new since stdint.h change,3,[],https://github.com/neutrinolabs/xrdp/pull/658,https://github.com/proski,2,https://github.com/neutrinolabs/xrdp/pull/658#issuecomment-276884311,,"If we want to support Win64, we should not cast pointers or pointer-sized scalar types to long. They would not fit. Even if the value is expected to be small (e.g. a file descriptor), cutting the upper bytes can turn an invalid value into a valid one, hiding an issue.
Two other approaches are available, dependent on the nature of the data. One is to cast to void * and use %p format (good for actual pointers), another is to cast to long long (possibly unsigned) and use %lld or %llx format (for data other than pointers).
Whether we should support Windows and Win64 in particular is a question too big for this PR. My feeling is that we should not, but let's not base such important decisions on the need to add a few casts.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,658,2017-02-02T06:04:56Z,2017-02-23T04:39:57Z,2017-07-29T03:51:09Z,MERGED,True,12,9,6,https://github.com/jsorg71,fix warning new since stdint.h change,3,[],https://github.com/neutrinolabs/xrdp/pull/658,https://github.com/jsorg71,3,https://github.com/neutrinolabs/xrdp/pull/658#issuecomment-277166393,,"@proski I don't think we have to ""officially support"" Windows but it would be nice if it worked.  I can see a use for VNC or RDP proxies on Windows.  Of course sesman, chansrv, Xorg does not make sense.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,658,2017-02-02T06:04:56Z,2017-02-23T04:39:57Z,2017-07-29T03:51:09Z,MERGED,True,12,9,6,https://github.com/jsorg71,fix warning new since stdint.h change,3,[],https://github.com/neutrinolabs/xrdp/pull/658,https://github.com/proski,4,https://github.com/neutrinolabs/xrdp/pull/658#issuecomment-277181482,,"Let's discuss Windows support on gitter. Sure, it would be nice. The problem is that it take a lot of effort to keep the code compatible so that two or three people run xrdp on Windows as a proxy. It's hard to keep a high quality Windows port.
The issue with casts is that it's hard to identify where they are unnecessary, especially programmatically. Once a cast is added to the code, it's here to stay. The problem with casts in C is that they allow too many kinds of data conversion and cannot be annotated to limit their effect. A cast added to widen an scalar type can later have an effect of shortening a scalar type or converting a pointer to an integer.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,658,2017-02-02T06:04:56Z,2017-02-23T04:39:57Z,2017-07-29T03:51:09Z,MERGED,True,12,9,6,https://github.com/jsorg71,fix warning new since stdint.h change,3,[],https://github.com/neutrinolabs/xrdp/pull/658,https://github.com/proski,5,https://github.com/neutrinolabs/xrdp/pull/658#issuecomment-281828510,,"@jsorg71 Could you please get this PR in a good shape and merge? I understand your position regarding Windows support, we can keep it for now. I'm trying to add i386 support to Travis to catch such warnings in the future.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,659,2017-02-04T19:35:23Z,2017-02-07T04:51:24Z,2017-02-07T07:54:16Z,MERGED,True,8,11,1,https://github.com/proski,"Remove --break-blocks option, it doesn't match the existing code style",1,[],https://github.com/neutrinolabs/xrdp/pull/659,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/659,Strip trailing newlines.,Strip trailing newlines.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,659,2017-02-04T19:35:23Z,2017-02-07T04:51:24Z,2017-02-07T07:54:16Z,MERGED,True,8,11,1,https://github.com/proski,"Remove --break-blocks option, it doesn't match the existing code style",1,[],https://github.com/neutrinolabs/xrdp/pull/659,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/659#issuecomment-277562901,Strip trailing newlines.,+1 Simple fix with no logic change. Let's merge.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,664,2017-02-12T00:23:42Z,2017-02-23T04:57:34Z,2017-02-23T04:57:34Z,MERGED,True,80,51,3,https://github.com/jsorg71,"rfx fixes for large tile sets, performance change, Xorg will start ne…",5,[],https://github.com/neutrinolabs/xrdp/pull/664,https://github.com/jsorg71,1,https://github.com/neutrinolabs/xrdp/pull/664,…xt frame earlier,…xt frame earlier,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,664,2017-02-12T00:23:42Z,2017-02-23T04:57:34Z,2017-02-23T04:57:34Z,MERGED,True,80,51,3,https://github.com/jsorg71,"rfx fixes for large tile sets, performance change, Xorg will start ne…",5,[],https://github.com/neutrinolabs/xrdp/pull/664,https://github.com/proski,2,https://github.com/neutrinolabs/xrdp/pull/664#issuecomment-279204087,…xt frame earlier,"This patch is on the par with the existing code, but it's behind the modern standards of software engineering. Numeric constants should have names. It should be clear from the name whether 4096 is a protocol limitation, a ""large enough number"" or something else. If a constant number is derived from other numbers, it should be represented as an expression.
Likewise, when two variables are compared, the difference between those numbers would normally have a meaning that can be expressed with a concise term (e.g. unacknowledged packets). A local variable could be created to hold that difference and describe its meaning. That would not make the program slower; it's trivial for a compiler to optimize out local variables.
Especially when the original code didn't get it right, it's important that the code that replaces it goes beyond fixing the immediate issue.
If the code fixes issues for the users, let's merge this PR. But I cannot review this PR in a meaningful way. I can say it has no typos and gets formatting right. I could look deeper if the assumptions were expressed in the code.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,664,2017-02-12T00:23:42Z,2017-02-23T04:57:34Z,2017-02-23T04:57:34Z,MERGED,True,80,51,3,https://github.com/jsorg71,"rfx fixes for large tile sets, performance change, Xorg will start ne…",5,[],https://github.com/neutrinolabs/xrdp/pull/664,https://github.com/tfischer77,3,https://github.com/neutrinolabs/xrdp/pull/664#issuecomment-279545586,…xt frame earlier,"As I told in #524, the PR does not solve it completely, as im some cases, at least ""drects"" can be > 4096. I did some tests with the code in xrdp/xrdp_encoder.c and ended up with this code in process_enc_rfx, which now runs for several hours without crashes and frozen screens:
    mutex = self->mutex;
    event_processed = self->xrdp_encoder_event_processed;

/*
    if ((enc->num_crects > 8192) || (enc->num_drects > 8192))
    {
        return 0;
    }
*/
    out_data_bytes = 16 * 1024 * 1024;
    index = 256 + sizeof(struct rfx_tile) * enc->num_crects +
                  sizeof(struct rfx_rect) * enc->num_drects;
    out_data = (char *) g_malloc(out_data_bytes + index, 0);
    if (out_data == 0)
    {
        return 0;
    }
    tiles = (struct rfx_tile *) (out_data + out_data_bytes + 256);
    rfxrects = (struct rfx_rect *) (tiles + enc->num_crects);

    count = enc->num_crects;


I don't know if I will produce any ""ugly"" side effects like memory leaks, but I think I will leave the code running in my test environment for some days and look what happens.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,664,2017-02-12T00:23:42Z,2017-02-23T04:57:34Z,2017-02-23T04:57:34Z,MERGED,True,80,51,3,https://github.com/jsorg71,"rfx fixes for large tile sets, performance change, Xorg will start ne…",5,[],https://github.com/neutrinolabs/xrdp/pull/664,https://github.com/speidy,4,https://github.com/neutrinolabs/xrdp/pull/664#issuecomment-280170826,…xt frame earlier,+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,664,2017-02-12T00:23:42Z,2017-02-23T04:57:34Z,2017-02-23T04:57:34Z,MERGED,True,80,51,3,https://github.com/jsorg71,"rfx fixes for large tile sets, performance change, Xorg will start ne…",5,[],https://github.com/neutrinolabs/xrdp/pull/664,https://github.com/Natureshadow,5,https://github.com/neutrinolabs/xrdp/pull/664#issuecomment-280639161,…xt frame earlier,"Btw, why are num_crects and num_drects signed integers, and the code does not check for overruns?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,664,2017-02-12T00:23:42Z,2017-02-23T04:57:34Z,2017-02-23T04:57:34Z,MERGED,True,80,51,3,https://github.com/jsorg71,"rfx fixes for large tile sets, performance change, Xorg will start ne…",5,[],https://github.com/neutrinolabs/xrdp/pull/664,https://github.com/Natureshadow,6,https://github.com/neutrinolabs/xrdp/pull/664#issuecomment-280644208,…xt frame earlier,"What about this:
--- a/xrdp/xrdp_encoder.c
+++ b/xrdp/xrdp_encoder.c
@@ -22,6 +22,7 @@
 #include ""xrdp.h""
 #include ""thread_calls.h""
 #include ""fifo.h""
+#include ""limits.h""
 
 #ifdef XRDP_RFXCODEC
 #include ""rfxcodec_encode.h""
@@ -320,21 +321,25 @@ process_enc_rfx(struct xrdp_encoder *sel
     mutex = self->mutex;
     event_processed = self->xrdp_encoder_event_processed;
 
-    if ((enc->num_crects > 512) || (enc->num_drects > 512))
-    {
+    out_data_bytes = 16 * 1024 * 1024;
+
+    if ((enc->num_crects > (INT_MAX / sizeof(struct rfx_tile))) ||
+        (enc->num_drects > (INT_MAX / sizeof(struct rfx_rect) -
+                            sizeof(struct rfx_tile) * enc->num_crects -
+                            256 - out_data_bytes)) ||
+        (enc->num_crects < 0) || (enc->num_drects < 0)) {
         return 0;
     }
 
-    out_data_bytes = 16 * 1024 * 1024;
-    index = 256 + sizeof(struct rfx_tile) * 512 +
-                  sizeof(struct rfx_rect) * 512;
+    index = 256 + sizeof(struct rfx_tile) * enc->num_crects +
+                  sizeof(struct rfx_rect) * enc->num_drects;
     out_data = (char *) g_malloc(out_data_bytes + index, 0);
     if (out_data == 0)
     {
         return 0;
     }
     tiles = (struct rfx_tile *) (out_data + out_data_bytes + 256);
-    rfxrects = (struct rfx_rect *) (tiles + 512);
+    rfxrects = (struct rfx_rect *) (tiles + enc->num_crects);
 
     count = enc->num_crects;
     for (index = 0; index < count; index++)

It does a proper check on the structure sizes the number of rects will later be used in and imposes no further artifical limits.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,664,2017-02-12T00:23:42Z,2017-02-23T04:57:34Z,2017-02-23T04:57:34Z,MERGED,True,80,51,3,https://github.com/jsorg71,"rfx fixes for large tile sets, performance change, Xorg will start ne…",5,[],https://github.com/neutrinolabs/xrdp/pull/664,https://github.com/proski,7,https://github.com/neutrinolabs/xrdp/pull/664#issuecomment-280703918,…xt frame earlier,"Much better. There is still 256 is a couple of places, it needs to be clarified.
Please fix the reuse of the index variable. A variable should serve a single purpose. index is a very generic name. Loop variables can be i, j etc. The large number in the malloc() call could probably be max_index.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,664,2017-02-12T00:23:42Z,2017-02-23T04:57:34Z,2017-02-23T04:57:34Z,MERGED,True,80,51,3,https://github.com/jsorg71,"rfx fixes for large tile sets, performance change, Xorg will start ne…",5,[],https://github.com/neutrinolabs/xrdp/pull/664,https://github.com/jsorg71,8,https://github.com/neutrinolabs/xrdp/pull/664#issuecomment-280741386,…xt frame earlier,"The 256 is an empty header that the lower layers fill out when sending.  Other parts call it pad_bytes.  Pad usually means put it at end, maybe we can thing of a better name.
num_crects and num_drects comes in as uint16 and put into int.  So it can be 0 to 64K.

  
    
      xrdp/xup/xup.c
    
    
        Lines 1162 to 1186
      in
      2424a9c
    
  
  
    

        
          
           /* dirty pixels */ 
        

        
          
           in_uint16_le(s, num_drects); 
        

        
          
           ldrects = (tsi16 *) g_malloc(2 * 4 * num_drects, 0); 
        

        
          
           ldrects1 = ldrects; 
        

        
          
           for (index = 0; index < num_drects; index++) 
        

        
          
           { 
        

        
          
               in_sint16_le(s, ldrects1[0]); 
        

        
          
               in_sint16_le(s, ldrects1[1]); 
        

        
          
               in_sint16_le(s, ldrects1[2]); 
        

        
          
               in_sint16_le(s, ldrects1[3]); 
        

        
          
               ldrects1 += 4; 
        

        
          
           } 
        

        
          
            
        

        
          
           /* copied pixels */ 
        

        
          
           in_uint16_le(s, num_crects); 
        

        
          
           lcrects = (tsi16 *) g_malloc(2 * 4 * num_crects, 0); 
        

        
          
           lcrects1 = lcrects; 
        

        
          
           for (index = 0; index < num_crects; index++) 
        

        
          
           { 
        

        
          
               in_sint16_le(s, lcrects1[0]); 
        

        
          
               in_sint16_le(s, lcrects1[1]); 
        

        
          
               in_sint16_le(s, lcrects1[2]); 
        

        
          
               in_sint16_le(s, lcrects1[3]); 
        

        
          
               lcrects1 += 4; 
        

        
          
           }",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,664,2017-02-12T00:23:42Z,2017-02-23T04:57:34Z,2017-02-23T04:57:34Z,MERGED,True,80,51,3,https://github.com/jsorg71,"rfx fixes for large tile sets, performance change, Xorg will start ne…",5,[],https://github.com/neutrinolabs/xrdp/pull/664,https://github.com/Natureshadow,9,https://github.com/neutrinolabs/xrdp/pull/664#issuecomment-280782981,…xt frame earlier,So count yourself lucky that xrdp compiles on no system that runs on 16 bit architectures :D!,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,664,2017-02-12T00:23:42Z,2017-02-23T04:57:34Z,2017-02-23T04:57:34Z,MERGED,True,80,51,3,https://github.com/jsorg71,"rfx fixes for large tile sets, performance change, Xorg will start ne…",5,[],https://github.com/neutrinolabs/xrdp/pull/664,https://github.com/jsorg71,10,https://github.com/neutrinolabs/xrdp/pull/664#issuecomment-280788174,…xt frame earlier,"xrdp wont startup if size of int is not 4.  So far no one has asked for 16 bit int systems.  The only one I can think of is Window 3.1.

  
    
      xrdp/xrdp/xrdp.c
    
    
        Lines 324 to 328
      in
      2424a9c
    
  
  
    

        
          
           if (sizeof(int) != 4) 
        

        
          
           { 
        

        
          
               g_writeln(""unusable int size, must be 4""); 
        

        
          
               return 1; 
        

        
          
           }",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,664,2017-02-12T00:23:42Z,2017-02-23T04:57:34Z,2017-02-23T04:57:34Z,MERGED,True,80,51,3,https://github.com/jsorg71,"rfx fixes for large tile sets, performance change, Xorg will start ne…",5,[],https://github.com/neutrinolabs/xrdp/pull/664,https://github.com/Natureshadow,11,https://github.com/neutrinolabs/xrdp/pull/664#issuecomment-280789039,…xt frame earlier,"https://github.com/neutrinolabs/xrdp/blob/2424a9c020d3644323caca8f29ae5b3b2c355de1/xrdp/xrdp.c#L324-L328
Aaah... oh. Uhu...",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,665,2017-02-12T20:35:11Z,2017-02-14T05:00:23Z,2017-03-03T04:57:35Z,MERGED,True,1,1,1,https://github.com/proski,aarch64 doesn't require pointers to be aligned,1,[],https://github.com/neutrinolabs/xrdp/pull/665,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/665,"Without this patch, a warning is printed for every file: https://kojipkgs.fedoraproject.org/packages/xrdp/0.9.1/2.fc26/data/logs/aarch64/build.log","Without this patch, a warning is printed for every file: https://kojipkgs.fedoraproject.org/packages/xrdp/0.9.1/2.fc26/data/logs/aarch64/build.log",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,665,2017-02-12T20:35:11Z,2017-02-14T05:00:23Z,2017-03-03T04:57:35Z,MERGED,True,1,1,1,https://github.com/proski,aarch64 doesn't require pointers to be aligned,1,[],https://github.com/neutrinolabs/xrdp/pull/665,https://github.com/jsorg71,2,https://github.com/neutrinolabs/xrdp/pull/665#issuecomment-279290462,"Without this patch, a warning is printed for every file: https://kojipkgs.fedoraproject.org/packages/xrdp/0.9.1/2.fc26/data/logs/aarch64/build.log","It's the integer reading and writing that sometimes should be aligned to avoid bus error.  Some kernels like armel can read unaligned but the kernel catches the bus error and corrects the read.  If this happens, it's slower than if you avoid the bus error.  Maybe that is happening on aarch64 too and we are better off putting it in the NEED_ALIGN group.  I don't know, I don't have access to one yet.
+1 for this PR, it's better than what we have now.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,665,2017-02-12T20:35:11Z,2017-02-14T05:00:23Z,2017-03-03T04:57:35Z,MERGED,True,1,1,1,https://github.com/proski,aarch64 doesn't require pointers to be aligned,1,[],https://github.com/neutrinolabs/xrdp/pull/665,https://github.com/proski,3,https://github.com/neutrinolabs/xrdp/pull/665#issuecomment-279300428,"Without this patch, a warning is printed for every file: https://kojipkgs.fedoraproject.org/packages/xrdp/0.9.1/2.fc26/data/logs/aarch64/build.log","I don't have access to those machines either. I made some research online. There would be no crash, the operation would work correctly, but it may be slow and non-atomic.
http://stackoverflow.com/questions/38535738/does-aarch64-support-unaligned-access
In most cases the the data would be aligned. But if NEED_ALIGN is defined, all data is processed one byte at a time. That's highly ineffective. Avoiding it would offset the slowdown from a few unaligned.
Eventually we should add the functions where the caller assures that the data is aligned. That data would be processed using the original data size, not bytes, as long as no byte swapping is needed.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,665,2017-02-12T20:35:11Z,2017-02-14T05:00:23Z,2017-03-03T04:57:35Z,MERGED,True,1,1,1,https://github.com/proski,aarch64 doesn't require pointers to be aligned,1,[],https://github.com/neutrinolabs/xrdp/pull/665,https://github.com/jsorg71,4,https://github.com/neutrinolabs/xrdp/pull/665#issuecomment-283146425,"Without this patch, a warning is printed for every file: https://kojipkgs.fedoraproject.org/packages/xrdp/0.9.1/2.fc26/data/logs/aarch64/build.log",i just got a Pine64 board running Debian 8 arm64 so I can test.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,665,2017-02-12T20:35:11Z,2017-02-14T05:00:23Z,2017-03-03T04:57:35Z,MERGED,True,1,1,1,https://github.com/proski,aarch64 doesn't require pointers to be aligned,1,[],https://github.com/neutrinolabs/xrdp/pull/665,https://github.com/jsorg71,5,https://github.com/neutrinolabs/xrdp/pull/665#issuecomment-283863383,"Without this patch, a warning is printed for every file: https://kojipkgs.fedoraproject.org/packages/xrdp/0.9.1/2.fc26/data/logs/aarch64/build.log",It looks like this architecture behaves a lot like x86 so NO_NEED_ALIGN and L_ENDIAN is correct.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,665,2017-02-12T20:35:11Z,2017-02-14T05:00:23Z,2017-03-03T04:57:35Z,MERGED,True,1,1,1,https://github.com/proski,aarch64 doesn't require pointers to be aligned,1,[],https://github.com/neutrinolabs/xrdp/pull/665,https://github.com/proski,6,https://github.com/neutrinolabs/xrdp/pull/665#issuecomment-283865666,"Without this patch, a warning is printed for every file: https://kojipkgs.fedoraproject.org/packages/xrdp/0.9.1/2.fc26/data/logs/aarch64/build.log",Thank you for checking that!,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,667,2017-02-16T00:31:49Z,2017-02-16T09:40:07Z,2017-02-16T09:40:07Z,MERGED,True,3,0,1,https://github.com/metalefty,Workaround for a regression of JP keyboard detection #663,1,['keyboard'],https://github.com/neutrinolabs/xrdp/pull/667,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/667,"caused by 9c31bd5.  This is not a complete fix but just a workwround
because keylayout value of Japanese keyboard can be other than these
4 values. This workdaround still doesn't cover all JP keyboards.

0x00000411
0xe0010411
0xe0200411
0xe0210411

Looking for 0411 in lower 16 bits is enough to detect JP keyboards.","caused by 9c31bd5.  This is not a complete fix but just a workwround
because keylayout value of Japanese keyboard can be other than these
4 values. This workdaround still doesn't cover all JP keyboards.

0x00000411
0xe0010411
0xe0200411
0xe0210411

Looking for 0411 in lower 16 bits is enough to detect JP keyboards.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,667,2017-02-16T00:31:49Z,2017-02-16T09:40:07Z,2017-02-16T09:40:07Z,MERGED,True,3,0,1,https://github.com/metalefty,Workaround for a regression of JP keyboard detection #663,1,['keyboard'],https://github.com/neutrinolabs/xrdp/pull/667,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/667#issuecomment-280189781,"caused by 9c31bd5.  This is not a complete fix but just a workwround
because keylayout value of Japanese keyboard can be other than these
4 values. This workdaround still doesn't cover all JP keyboards.

0x00000411
0xe0010411
0xe0200411
0xe0210411

Looking for 0411 in lower 16 bits is enough to detect JP keyboards.","Fixed typo in commit message, force pushed.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,667,2017-02-16T00:31:49Z,2017-02-16T09:40:07Z,2017-02-16T09:40:07Z,MERGED,True,3,0,1,https://github.com/metalefty,Workaround for a regression of JP keyboard detection #663,1,['keyboard'],https://github.com/neutrinolabs/xrdp/pull/667,https://github.com/proski,3,https://github.com/neutrinolabs/xrdp/pull/667#issuecomment-280189896,"caused by 9c31bd5.  This is not a complete fix but just a workwround
because keylayout value of Japanese keyboard can be other than these
4 values. This workdaround still doesn't cover all JP keyboards.

0x00000411
0xe0010411
0xe0200411
0xe0210411

Looking for 0411 in lower 16 bits is enough to detect JP keyboards.",+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,667,2017-02-16T00:31:49Z,2017-02-16T09:40:07Z,2017-02-16T09:40:07Z,MERGED,True,3,0,1,https://github.com/metalefty,Workaround for a regression of JP keyboard detection #663,1,['keyboard'],https://github.com/neutrinolabs/xrdp/pull/667,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/667#issuecomment-280190692,"caused by 9c31bd5.  This is not a complete fix but just a workwround
because keylayout value of Japanese keyboard can be other than these
4 values. This workdaround still doesn't cover all JP keyboards.

0x00000411
0xe0010411
0xe0200411
0xe0210411

Looking for 0411 in lower 16 bits is enough to detect JP keyboards.","Already tested by yyyjajp in 9c31bd5#commitcomment-20834035,  I think this can be merged immediately.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,669,2017-02-22T20:03:53Z,2017-02-23T19:28:45Z,2017-02-23T19:28:45Z,MERGED,True,94,31,1,https://github.com/proski,Add i686 check in Travis CI,1,[],https://github.com/neutrinolabs/xrdp/pull/669,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/669,This depends on #658,This depends on #658,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,669,2017-02-22T20:03:53Z,2017-02-23T19:28:45Z,2017-02-23T19:28:45Z,MERGED,True,94,31,1,https://github.com/proski,Add i686 check in Travis CI,1,[],https://github.com/neutrinolabs/xrdp/pull/669,https://github.com/proski,2,https://github.com/neutrinolabs/xrdp/pull/669#issuecomment-281866560,This depends on #658,"Some of the i386 packages conflict with the x86_64 packages, which necessitated using matrix with explicit include. YAML anchors are used to reduce duplication.
Using matrix allowed me to limit ""make distcheck"" to just three configurations (one per compiler) to speed up the checks.
g++ on i386 and -Werror have been removed temporarily until the breakage is fixed (#658).
I was unable to get libfuse-dev:i386 to install, so FUSE is not checked on i386. I'll keep trying on a separate branch.
Setting LDFLAGS=-m32 will be unneeded once nasm.m4 in librfxcode is updated (see neutrinolabs/librfxcodec#26)",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,669,2017-02-22T20:03:53Z,2017-02-23T19:28:45Z,2017-02-23T19:28:45Z,MERGED,True,94,31,1,https://github.com/proski,Add i686 check in Travis CI,1,[],https://github.com/neutrinolabs/xrdp/pull/669,https://github.com/proski,3,https://github.com/neutrinolabs/xrdp/pull/669#issuecomment-282026863,This depends on #658,"Rebased on top of devel, restored g++ and -Werror, all the tests pass. Should be OK to merge now.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,670,2017-02-23T20:04:32Z,2017-02-26T04:52:28Z,2017-02-26T04:52:28Z,MERGED,True,17,10,1,https://github.com/jsorg71,"common: use select for SSL_ERROR_WANT_READ, SSL_ERROR_WANT_WRITE tls …",1,[],https://github.com/neutrinolabs/xrdp/pull/670,https://github.com/jsorg71,1,https://github.com/neutrinolabs/xrdp/pull/670,…errors,…errors,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,670,2017-02-23T20:04:32Z,2017-02-26T04:52:28Z,2017-02-26T04:52:28Z,MERGED,True,17,10,1,https://github.com/jsorg71,"common: use select for SSL_ERROR_WANT_READ, SSL_ERROR_WANT_WRITE tls …",1,[],https://github.com/neutrinolabs/xrdp/pull/670,https://github.com/jsorg71,2,https://github.com/neutrinolabs/xrdp/pull/670#issuecomment-282105010,…errors,@speidy How does this look for fixing #666 ?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,670,2017-02-23T20:04:32Z,2017-02-26T04:52:28Z,2017-02-26T04:52:28Z,MERGED,True,17,10,1,https://github.com/jsorg71,"common: use select for SSL_ERROR_WANT_READ, SSL_ERROR_WANT_WRITE tls …",1,[],https://github.com/neutrinolabs/xrdp/pull/670,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/670#issuecomment-282171961,…errors,"I tested quickly. Looks good to me.
@atanamir can you check if this fixes #666?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,672,2017-02-26T19:37:20Z,2017-03-02T04:39:17Z,2017-03-02T04:39:17Z,MERGED,True,9,8,1,https://github.com/proski,Enable painter and librfxcodec by default,1,[],https://github.com/neutrinolabs/xrdp/pull/672,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/672,"Change help messages to clarify that both libraries are included. Move
messages next to each other. Remove duplicate XRDP_PAINTER conditional.","Change help messages to clarify that both libraries are included. Move
messages next to each other. Remove duplicate XRDP_PAINTER conditional.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,672,2017-02-26T19:37:20Z,2017-03-02T04:39:17Z,2017-03-02T04:39:17Z,MERGED,True,9,8,1,https://github.com/proski,Enable painter and librfxcodec by default,1,[],https://github.com/neutrinolabs/xrdp/pull/672,https://github.com/speidy,2,https://github.com/neutrinolabs/xrdp/pull/672#issuecomment-282583944,"Change help messages to clarify that both libraries are included. Move
messages next to each other. Remove duplicate XRDP_PAINTER conditional.","+1
בתאריך יום א׳, 26 בפבר׳ 2017 ב-21:37 מאת Pavel Roskin <
notifications@github.com>:
 Change help messages to clarify that both libraries are included. Move
 messages next to each other. Remove duplicate XRDP_PAINTER conditional.
 ------------------------------
 You can view, comment on, or merge this pull request online at:

   #672
 Commit Summary

    - Enable painter and librfxcodec by default

 File Changes

    - *M* configure.ac
    <https://github.com/neutrinolabs/xrdp/pull/672/files#diff-0> (17)

 Patch Links:

    - https://github.com/neutrinolabs/xrdp/pull/672.patch
    - https://github.com/neutrinolabs/xrdp/pull/672.diff

 —
 You are receiving this because you are subscribed to this thread.
 Reply to this email directly, view it on GitHub
 <#672>, or mute the thread
 <https://github.com/notifications/unsubscribe-auth/ADTH1IKdkrwicydaF_-U9kG711_k2M9_ks5rgdRxgaJpZM4MMfU2>
 .

-- 
Idan Freiberg

PGP FP: 8108 7EC9 806E 4980 75F2  72B3 8AD3 2D04 337B 1F18",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,672,2017-02-26T19:37:20Z,2017-03-02T04:39:17Z,2017-03-02T04:39:17Z,MERGED,True,9,8,1,https://github.com/proski,Enable painter and librfxcodec by default,1,[],https://github.com/neutrinolabs/xrdp/pull/672,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/672#issuecomment-282655645,"Change help messages to clarify that both libraries are included. Move
messages next to each other. Remove duplicate XRDP_PAINTER conditional.",I renamed milestone because the previous milestone is v0.9.1.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,672,2017-02-26T19:37:20Z,2017-03-02T04:39:17Z,2017-03-02T04:39:17Z,MERGED,True,9,8,1,https://github.com/proski,Enable painter and librfxcodec by default,1,[],https://github.com/neutrinolabs/xrdp/pull/672,https://github.com/speidy,4,https://github.com/neutrinolabs/xrdp/pull/672#issuecomment-282655830,"Change help messages to clarify that both libraries are included. Move
messages next to each other. Remove duplicate XRDP_PAINTER conditional.","I did v0.9.2
בתאריך יום ב׳, 27 בפבר׳ 2017 ב-10:21 מאת metalefty <notifications@github.com
:
 I renamed milestone because the previous milestone is v0.9.1.

 —
 You are receiving this because you commented.


 Reply to this email directly, view it on GitHub
 <#672 (comment)>,
 or mute the thread
 <https://github.com/notifications/unsubscribe-auth/ADTH1KEYpXAsy6ypgWV_48vNVdGlbMfyks5rgoeXgaJpZM4MMfU2>
 .

-- 
Idan Freiberg

PGP FP: 8108 7EC9 806E 4980 75F2  72B3 8AD3 2D04 337B 1F18",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,673,2017-02-27T06:46:37Z,2017-03-02T04:38:34Z,2017-03-02T04:51:40Z,MERGED,True,4,3,3,https://github.com/proski,Update submodules to devel branches,2,[],https://github.com/neutrinolabs/xrdp/pull/673,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/673,"The librfxcodec branch was unset (defaulting to master). The libpainter branch was set to devel. Neither is a good choice for both devel and master branches of xrdp. Use branch = . - it's a brand new feature of git: git/git@c838696
At this point it's more documentation than configuration. Submodule updates are made rarely and manually. Still, it's good to document the parent branch and treat both submodules the same way.","The librfxcodec branch was unset (defaulting to master). The libpainter branch was set to devel. Neither is a good choice for both devel and master branches of xrdp. Use branch = . - it's a brand new feature of git: git/git@c838696
At this point it's more documentation than configuration. Submodule updates are made rarely and manually. Still, it's good to document the parent branch and treat both submodules the same way.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,673,2017-02-27T06:46:37Z,2017-03-02T04:38:34Z,2017-03-02T04:51:40Z,MERGED,True,4,3,3,https://github.com/proski,Update submodules to devel branches,2,[],https://github.com/neutrinolabs/xrdp/pull/673,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/673#issuecomment-282644894,"The librfxcodec branch was unset (defaulting to master). The libpainter branch was set to devel. Neither is a good choice for both devel and master branches of xrdp. Use branch = . - it's a brand new feature of git: git/git@c838696
At this point it's more documentation than configuration. Submodule updates are made rarely and manually. Still, it's good to document the parent branch and treat both submodules the same way.",+1 the new feature is nice.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,673,2017-02-27T06:46:37Z,2017-03-02T04:38:34Z,2017-03-02T04:51:40Z,MERGED,True,4,3,3,https://github.com/proski,Update submodules to devel branches,2,[],https://github.com/neutrinolabs/xrdp/pull/673,https://github.com/speidy,3,https://github.com/neutrinolabs/xrdp/pull/673#issuecomment-283134982,"The librfxcodec branch was unset (defaulting to master). The libpainter branch was set to devel. Neither is a good choice for both devel and master branches of xrdp. Use branch = . - it's a brand new feature of git: git/git@c838696
At this point it's more documentation than configuration. Submodule updates are made rarely and manually. Still, it's good to document the parent branch and treat both submodules the same way.",+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,673,2017-02-27T06:46:37Z,2017-03-02T04:38:34Z,2017-03-02T04:51:40Z,MERGED,True,4,3,3,https://github.com/proski,Update submodules to devel branches,2,[],https://github.com/neutrinolabs/xrdp/pull/673,https://github.com/jsorg71,4,https://github.com/neutrinolabs/xrdp/pull/673#issuecomment-283136847,"The librfxcodec branch was unset (defaulting to master). The libpainter branch was set to devel. Neither is a good choice for both devel and master branches of xrdp. Use branch = . - it's a brand new feature of git: git/git@c838696
At this point it's more documentation than configuration. Submodule updates are made rarely and manually. Still, it's good to document the parent branch and treat both submodules the same way.","One nice thing about submodules it that the parent can point to a older sha1 in the submodule and allow an additional staging before updating the parent.  We can still do that I hope?
Will older git systems be ok?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,673,2017-02-27T06:46:37Z,2017-03-02T04:38:34Z,2017-03-02T04:51:40Z,MERGED,True,4,3,3,https://github.com/proski,Update submodules to devel branches,2,[],https://github.com/neutrinolabs/xrdp/pull/673,https://github.com/proski,5,https://github.com/neutrinolabs/xrdp/pull/673#issuecomment-283169112,"The librfxcodec branch was unset (defaulting to master). The libpainter branch was set to devel. Neither is a good choice for both devel and master branches of xrdp. Use branch = . - it's a brand new feature of git: git/git@c838696
At this point it's more documentation than configuration. Submodule updates are made rarely and manually. Still, it's good to document the parent branch and treat both submodules the same way.","In practice, nothing changes. The branch setting is only used when updating the submodules from the remote repositories using
git submodule update --remote

That would allow users to ignore our SHA1 and use the current branch for the submodule. That's not something we encourage users to do.
But they do it anyway, they would get submodule branches with the same name as the top tree branch.
Without this PR, git 2.12.0 or git 2.7.3
$ git submodule update --remote
Submodule path 'libpainter': checked out '898058cfcdc29bd745e6479327a2ed52e32cdc24'
Submodule path 'librfxcodec': checked out 'b9300b2e03a397f77bd8d60c8db8909083d630f0'

That's origin/devel for libpainter and origin/master for librfxcodec.
With this PR, git 2.7.3
$ git submodule update --remote
fatal: Needed a single revision
Unable to find current origin/. revision in submodule path 'libpainter'

git 2.12.0
$ git submodule update --remote
Submodule path 'libpainter': checked out '898058cfcdc29bd745e6479327a2ed52e32cdc24'
Submodule path 'librfxcodec': checked out '72efbf96ba1f8eb3e301edddf164d245135edb44'

That's origin/devel for both submodules.
Another approach would be to have branch = devel on both submodules. That way, users on the master branch would get devel branches of the submodules. It may be OK. After all, if users care to update, they probably want the latest code. But on the other hand, I don't want someone to package devel branches of submodules with a release made from master. So I prefer something that either breaks or does the right thing.
As for the updates submitted as PR (like this one), they are made on a separate branch (not devel), so I would not rely on git submodule update --remote at all. I'd rather do it manually.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,673,2017-02-27T06:46:37Z,2017-03-02T04:38:34Z,2017-03-02T04:51:40Z,MERGED,True,4,3,3,https://github.com/proski,Update submodules to devel branches,2,[],https://github.com/neutrinolabs/xrdp/pull/673,https://github.com/jsorg71,6,https://github.com/neutrinolabs/xrdp/pull/673#issuecomment-283554230,"The librfxcodec branch was unset (defaulting to master). The libpainter branch was set to devel. Neither is a good choice for both devel and master branches of xrdp. Use branch = . - it's a brand new feature of git: git/git@c838696
At this point it's more documentation than configuration. Submodule updates are made rarely and manually. Still, it's good to document the parent branch and treat both submodules the same way.","Alright, thanks for explanation.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,675,2017-02-28T07:03:12Z,2017-03-02T04:39:49Z,2017-05-05T20:28:38Z,MERGED,True,2,0,1,https://github.com/proski,Fix compilation on MacOS,1,[],https://github.com/neutrinolabs/xrdp/pull/675,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/675,"xrdp_rdp.c includes openssl/ssl.h now, make sure the OpenSSL include path
is used.

That's a compile issue, let's merge it before 0.9.2.","xrdp_rdp.c includes openssl/ssl.h now, make sure the OpenSSL include path
is used.

That's a compile issue, let's merge it before 0.9.2.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,675,2017-02-28T07:03:12Z,2017-03-02T04:39:49Z,2017-05-05T20:28:38Z,MERGED,True,2,0,1,https://github.com/proski,Fix compilation on MacOS,1,[],https://github.com/neutrinolabs/xrdp/pull/675,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/675#issuecomment-282979607,"xrdp_rdp.c includes openssl/ssl.h now, make sure the OpenSSL include path
is used.

That's a compile issue, let's merge it before 0.9.2.",+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,675,2017-02-28T07:03:12Z,2017-03-02T04:39:49Z,2017-05-05T20:28:38Z,MERGED,True,2,0,1,https://github.com/proski,Fix compilation on MacOS,1,[],https://github.com/neutrinolabs/xrdp/pull/675,https://github.com/easyw,3,https://github.com/neutrinolabs/xrdp/pull/675#issuecomment-296487500,"xrdp_rdp.c includes openssl/ssl.h now, make sure the OpenSSL include path
is used.

That's a compile issue, let's merge it before 0.9.2.","Hi, then xrdp is compilable/usable on osx Sierra?
Thx
Maurice",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,675,2017-02-28T07:03:12Z,2017-03-02T04:39:49Z,2017-05-05T20:28:38Z,MERGED,True,2,0,1,https://github.com/proski,Fix compilation on MacOS,1,[],https://github.com/neutrinolabs/xrdp/pull/675,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/675#issuecomment-296502779,"xrdp_rdp.c includes openssl/ssl.h now, make sure the OpenSSL include path
is used.

That's a compile issue, let's merge it before 0.9.2.","We don't officially support OS X. I know some users use xrdp on OS X but we don't provide any support. Users do it in their responsibility. If you want to use xrdp on OS X, we welcome your contributions.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,675,2017-02-28T07:03:12Z,2017-03-02T04:39:49Z,2017-05-05T20:28:38Z,MERGED,True,2,0,1,https://github.com/proski,Fix compilation on MacOS,1,[],https://github.com/neutrinolabs/xrdp/pull/675,https://github.com/easyw,5,https://github.com/neutrinolabs/xrdp/pull/675#issuecomment-298434035,"xrdp_rdp.c includes openssl/ssl.h now, make sure the OpenSSL include path
is used.

That's a compile issue, let's merge it before 0.9.2.","Hi, I successfully built xrdp 0.92 on osx sierra and xrdp is working with vnc...
I would like to build also xorgxrdp on sierra and I followed the wiki, but I have an issue that is probably easy to fix but I don't know in which way...
I miss xserver-xorg-dev or xorg-x11-server-sdk or xorg-x11-server-devel... in which way can I install it on sierra? I cannot find any tip around ...
thx
Maurice",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,675,2017-02-28T07:03:12Z,2017-03-02T04:39:49Z,2017-05-05T20:28:38Z,MERGED,True,2,0,1,https://github.com/proski,Fix compilation on MacOS,1,[],https://github.com/neutrinolabs/xrdp/pull/675,https://github.com/easyw,6,https://github.com/neutrinolabs/xrdp/pull/675#issuecomment-298745281,"xrdp_rdp.c includes openssl/ssl.h now, make sure the OpenSSL include path
is used.

That's a compile issue, let's merge it before 0.9.2.","ok, I managed to compile xorgxrdp mixing the instruction found here
https://github.com/neutrinolabs/xrdp/wiki/Building-on-OSX
and here
https://github.com/neutrinolabs/xrdp/wiki/Compiling-and-using-xorgxrdp

git clone https://github.com/neutrinolabs/xorgxrdp.git
./bootstrap
./configure PKG_CONFIG_PATH=/opt/X11/lib/pkgconfig
make
sudo make install

probably git clone https://github.com/neutrinolabs/xorgxrdp.git 
and
./bootstrap would need to be added at the Building-on-OSX page
I also did a clean compilation of xrdp adding

./configure --enable-rfxcodec PKG_CONFIG_PATH=/usr/local/opt/openssl/lib/pkgconfig

to enable RemoteFX
Maurice",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,677,2017-03-02T05:54:11Z,2017-03-06T06:02:28Z,2017-07-05T04:58:39Z,CLOSED,False,3,3,3,https://github.com/metalefty,common: increase tls_ciphers size to 1024 bytes,1,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/677,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/677,Fixes #544,Fixes #544,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,677,2017-03-02T05:54:11Z,2017-03-06T06:02:28Z,2017-07-05T04:58:39Z,CLOSED,False,3,3,3,https://github.com/metalefty,common: increase tls_ciphers size to 1024 bytes,1,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/677,https://github.com/proski,2,https://github.com/neutrinolabs/xrdp/pull/677#issuecomment-283867848,Fixes #544,"I considered that approach, but I don't like such radical expansion a structure that is sent to backends. I would rather allocate memory dynamically.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,677,2017-03-02T05:54:11Z,2017-03-06T06:02:28Z,2017-07-05T04:58:39Z,CLOSED,False,3,3,3,https://github.com/metalefty,common: increase tls_ciphers size to 1024 bytes,1,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/677,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/677#issuecomment-283887835,Fixes #544,"Yes, I don't think this is the best approach. I welcome alternative PRs.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,677,2017-03-02T05:54:11Z,2017-03-06T06:02:28Z,2017-07-05T04:58:39Z,CLOSED,False,3,3,3,https://github.com/metalefty,common: increase tls_ciphers size to 1024 bytes,1,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/677,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/677#issuecomment-284310165,Fixes #544,#680 looks much better.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,678,2017-03-03T05:07:26Z,2017-03-04T08:52:35Z,2017-03-04T08:52:35Z,MERGED,True,384,17,101,https://github.com/proski,"Include config_ac.h from *.c files, not from headers",2,[],https://github.com/neutrinolabs/xrdp/pull/678,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/678,"Directories without Makefile.am are exempt from the change, which includes X11rdp. They have their own build systems.
Resolves #647.","Directories without Makefile.am are exempt from the change, which includes X11rdp. They have their own build systems.
Resolves #647.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,678,2017-03-03T05:07:26Z,2017-03-04T08:52:35Z,2017-03-04T08:52:35Z,MERGED,True,384,17,101,https://github.com/proski,"Include config_ac.h from *.c files, not from headers",2,[],https://github.com/neutrinolabs/xrdp/pull/678,https://github.com/jsorg71,2,https://github.com/neutrinolabs/xrdp/pull/678#issuecomment-283884776,"Directories without Makefile.am are exempt from the change, which includes X11rdp. They have their own build systems.
Resolves #647.","Thanks, I'm sure that was an extremely boring task.
+1",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,678,2017-03-03T05:07:26Z,2017-03-04T08:52:35Z,2017-03-04T08:52:35Z,MERGED,True,384,17,101,https://github.com/proski,"Include config_ac.h from *.c files, not from headers",2,[],https://github.com/neutrinolabs/xrdp/pull/678,https://github.com/proski,3,https://github.com/neutrinolabs/xrdp/pull/678#issuecomment-283885303,"Directories without Makefile.am are exempt from the change, which includes X11rdp. They have their own build systems.
Resolves #647.","No, that was a ruby script :-P",True,{'LAUGH': ['https://github.com/Cyclic']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,680,2017-03-04T07:32:53Z,2017-03-21T17:39:41Z,2017-03-21T17:39:41Z,MERGED,True,6,5,4,https://github.com/proski,Allocate space for tls_ciphers dynamically,1,['TLS'],https://github.com/neutrinolabs/xrdp/pull/680,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/680,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,680,2017-03-04T07:32:53Z,2017-03-21T17:39:41Z,2017-03-21T17:39:41Z,MERGED,True,6,5,4,https://github.com/proski,Allocate space for tls_ciphers dynamically,1,['TLS'],https://github.com/neutrinolabs/xrdp/pull/680,https://github.com/proski,2,https://github.com/neutrinolabs/xrdp/pull/680#issuecomment-284135115,,"The patch has not been tested at all. Consider it work in progress until further notice. The patch is published to show an alternative approach to #677
There is already struct xrdp_config, which holds parts of xrdp.ini including some security bits (e.g. crypt_level). However, that structure is only available through struct xrdp_wm (window manager), which makes it a poor choice for security related configuration.
There is also struct xrdp_sec for security related configuration. However, that structure is not populated directly from the config file. For example, crypt_level is read to struct xrdp_client_info (in addition to struct xrdp_config) and then converted to a value acceptable for struct xrdp_sec.
One possible approach would be to have a single config loader, but it would be too intrusive for 0.9.2. On the other hand, stretching fields is not a good idea even in the short term. It increases data exchanged with the backends and doesn't protect against buffer overflow - it just makes the buffer bigger.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,680,2017-03-04T07:32:53Z,2017-03-21T17:39:41Z,2017-03-21T17:39:41Z,MERGED,True,6,5,4,https://github.com/proski,Allocate space for tls_ciphers dynamically,1,['TLS'],https://github.com/neutrinolabs/xrdp/pull/680,https://github.com/proski,3,https://github.com/neutrinolabs/xrdp/pull/680#issuecomment-284957487,,I was able to test this patch. It appears to work correctly. So it's not work in progress anymore.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,680,2017-03-04T07:32:53Z,2017-03-21T17:39:41Z,2017-03-21T17:39:41Z,MERGED,True,6,5,4,https://github.com/proski,Allocate space for tls_ciphers dynamically,1,['TLS'],https://github.com/neutrinolabs/xrdp/pull/680,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/680#issuecomment-284965146,,I also tested. Works fine.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,680,2017-03-04T07:32:53Z,2017-03-21T17:39:41Z,2017-03-21T17:39:41Z,MERGED,True,6,5,4,https://github.com/proski,Allocate space for tls_ciphers dynamically,1,['TLS'],https://github.com/neutrinolabs/xrdp/pull/680,https://github.com/speidy,5,https://github.com/neutrinolabs/xrdp/pull/680#issuecomment-286898300,,LGTM,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,680,2017-03-04T07:32:53Z,2017-03-21T17:39:41Z,2017-03-21T17:39:41Z,MERGED,True,6,5,4,https://github.com/proski,Allocate space for tls_ciphers dynamically,1,['TLS'],https://github.com/neutrinolabs/xrdp/pull/680,https://github.com/metalefty,6,https://github.com/neutrinolabs/xrdp/pull/680#issuecomment-287277672,,@jsorg71 please merge if looks good to you.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,680,2017-03-04T07:32:53Z,2017-03-21T17:39:41Z,2017-03-21T17:39:41Z,MERGED,True,6,5,4,https://github.com/proski,Allocate space for tls_ciphers dynamically,1,['TLS'],https://github.com/neutrinolabs/xrdp/pull/680,https://github.com/metalefty,7,https://github.com/neutrinolabs/xrdp/pull/680#issuecomment-288017317,,Let's merge before v0.9.2.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,680,2017-03-04T07:32:53Z,2017-03-21T17:39:41Z,2017-03-21T17:39:41Z,MERGED,True,6,5,4,https://github.com/proski,Allocate space for tls_ciphers dynamically,1,['TLS'],https://github.com/neutrinolabs/xrdp/pull/680,https://github.com/jsorg71,8,https://github.com/neutrinolabs/xrdp/pull/680#issuecomment-288159411,,"I'll merge it.
This struct gets send between processes so the pointer will be invalid in Xorg and X11rdp but we'll plan to change that later.  I'm sure Xorg and X11rdp do not use this member.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,681,2017-03-05T06:13:45Z,2017-03-07T06:44:27Z,2017-03-07T06:44:27Z,MERGED,True,115,96,3,https://github.com/jsorg71,Fix for slow encoder with fast client and network.  Handle misbehaving clients that send frame acks out of order.  Other miscellaneous code cleanup.,4,[],https://github.com/neutrinolabs/xrdp/pull/681,https://github.com/jsorg71,1,https://github.com/neutrinolabs/xrdp/pull/681,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,681,2017-03-05T06:13:45Z,2017-03-07T06:44:27Z,2017-03-07T06:44:27Z,MERGED,True,115,96,3,https://github.com/jsorg71,Fix for slow encoder with fast client and network.  Handle misbehaving clients that send frame acks out of order.  Other miscellaneous code cleanup.,4,[],https://github.com/neutrinolabs/xrdp/pull/681,https://github.com/speidy,2,https://github.com/neutrinolabs/xrdp/pull/681#issuecomment-284232020,,"Jay, I like that change.
I would like to test Parallels Client as well, it requires zero frames in flight.
Let me do some tests and update.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,681,2017-03-05T06:13:45Z,2017-03-07T06:44:27Z,2017-03-07T06:44:27Z,MERGED,True,115,96,3,https://github.com/jsorg71,Fix for slow encoder with fast client and network.  Handle misbehaving clients that send frame acks out of order.  Other miscellaneous code cleanup.,4,[],https://github.com/neutrinolabs/xrdp/pull/681,https://github.com/speidy,3,https://github.com/neutrinolabs/xrdp/pull/681#issuecomment-284631598,,"Parallels client seems to work OK, tested from Mac.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,682,2017-03-07T06:17:01Z,2017-03-15T22:20:11Z,2017-03-24T07:47:18Z,MERGED,True,4,2,1,https://github.com/speidy,"chansrv: dvc, check channel exists on get/remove api struct",1,[],https://github.com/neutrinolabs/xrdp/pull/682,https://github.com/speidy,1,https://github.com/neutrinolabs/xrdp/pull/682,"This issue fixes a case when xrdpapi (WTS calls) is used in an unexpected way, there is a case which can lead chansrv to get an api struct which is already removed, then chansrv can crash with segfault.","This issue fixes a case when xrdpapi (WTS calls) is used in an unexpected way, there is a case which can lead chansrv to get an api struct which is already removed, then chansrv can crash with segfault.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,682,2017-03-07T06:17:01Z,2017-03-15T22:20:11Z,2017-03-24T07:47:18Z,MERGED,True,4,2,1,https://github.com/speidy,"chansrv: dvc, check channel exists on get/remove api struct",1,[],https://github.com/neutrinolabs/xrdp/pull/682,https://github.com/proski,2,https://github.com/neutrinolabs/xrdp/pull/682#issuecomment-284637668,"This issue fixes a case when xrdpapi (WTS calls) is used in an unexpected way, there is a case which can lead chansrv to get an api struct which is already removed, then chansrv can crash with segfault.","+1
Please describe how this issue manifests itself. It's good to know in case if someone else reports it.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,682,2017-03-07T06:17:01Z,2017-03-15T22:20:11Z,2017-03-24T07:47:18Z,MERGED,True,4,2,1,https://github.com/speidy,"chansrv: dvc, check channel exists on get/remove api struct",1,[],https://github.com/neutrinolabs/xrdp/pull/682,https://github.com/speidy,3,https://github.com/neutrinolabs/xrdp/pull/682#issuecomment-284856548,"This issue fixes a case when xrdpapi (WTS calls) is used in an unexpected way, there is a case which can lead chansrv to get an api struct which is already removed, then chansrv can crash with segfault.",PR description updated.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,684,2017-03-08T04:00:53Z,2017-03-09T06:42:15Z,2017-03-09T06:42:20Z,MERGED,True,2,3,1,https://github.com/metalefty,"Remove useless comment, no logic change",1,[],https://github.com/neutrinolabs/xrdp/pull/684,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/684,Now client addr and port are properly logged.,Now client addr and port are properly logged.,True,{'THUMBS_UP': ['https://github.com/FelixZhang']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,684,2017-03-08T04:00:53Z,2017-03-09T06:42:15Z,2017-03-09T06:42:20Z,MERGED,True,2,3,1,https://github.com/metalefty,"Remove useless comment, no logic change",1,[],https://github.com/neutrinolabs/xrdp/pull/684,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/684#issuecomment-285268865,Now client addr and port are properly logged.,"No logic change, merging by myself.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,685,2017-03-08T07:16:39Z,2017-03-13T08:17:07Z,2017-03-13T08:17:07Z,MERGED,True,2,0,2,https://github.com/proski,Issues found by Valgrind,2,[],https://github.com/neutrinolabs/xrdp/pull/685,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/685,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,685,2017-03-08T07:16:39Z,2017-03-13T08:17:07Z,2017-03-13T08:17:07Z,MERGED,True,2,0,2,https://github.com/proski,Issues found by Valgrind,2,[],https://github.com/neutrinolabs/xrdp/pull/685,https://github.com/speidy,2,https://github.com/neutrinolabs/xrdp/pull/685#issuecomment-284990184,,"+1
בתאריך יום ד׳, 8 במרץ 2017 ב-9:16 מאת Pavel Roskin <notifications@github.com
:
 ------------------------------
 You can view, comment on, or merge this pull request online at:

   #685
 Commit Summary

    - Fix memory leak in tls_ciphers parsing
    - Call log_end() on xrdp exit

 File Changes

    - *M* libxrdp/xrdp_rdp.c
    <https://github.com/neutrinolabs/xrdp/pull/685/files#diff-0> (1)
    - *M* xrdp/xrdp.c
    <https://github.com/neutrinolabs/xrdp/pull/685/files#diff-1> (1)

 Patch Links:

    - https://github.com/neutrinolabs/xrdp/pull/685.patch
    - https://github.com/neutrinolabs/xrdp/pull/685.diff

 —
 You are receiving this because you are subscribed to this thread.
 Reply to this email directly, view it on GitHub
 <#685>, or mute the thread
 <https://github.com/notifications/unsubscribe-auth/ADTH1JaDfO5cS-Oh3FMwiJFFenI7uQa5ks5rjlXZgaJpZM4MWcuK>
 .

-- 
Idan Freiberg

PGP FP: 8108 7EC9 806E 4980 75F2  72B3 8AD3 2D04 337B 1F18",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,685,2017-03-08T07:16:39Z,2017-03-13T08:17:07Z,2017-03-13T08:17:07Z,MERGED,True,2,0,2,https://github.com/proski,Issues found by Valgrind,2,[],https://github.com/neutrinolabs/xrdp/pull/685,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/685#issuecomment-285029147,,"I missed that free(), thanks!",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,685,2017-03-08T07:16:39Z,2017-03-13T08:17:07Z,2017-03-13T08:17:07Z,MERGED,True,2,0,2,https://github.com/proski,Issues found by Valgrind,2,[],https://github.com/neutrinolabs/xrdp/pull/685,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/685#issuecomment-285029231,,Let's merge before v0.9.2.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,686,2017-03-08T12:39:48Z,2017-03-08T12:50:01Z,2018-05-15T13:52:13Z,CLOSED,False,927,202,24,https://github.com/MUzzell,Merge in latest changes; edited error window to say 'Osirium',32,[],https://github.com/neutrinolabs/xrdp/pull/686,https://github.com/MUzzell,1,https://github.com/neutrinolabs/xrdp/pull/686,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,686,2017-03-08T12:39:48Z,2017-03-08T12:50:01Z,2018-05-15T13:52:13Z,CLOSED,False,927,202,24,https://github.com/MUzzell,Merge in latest changes; edited error window to say 'Osirium',32,[],https://github.com/neutrinolabs/xrdp/pull/686,https://github.com/proski,2,https://github.com/neutrinolabs/xrdp/pull/686#issuecomment-285851121,,Any comment on what it was? I believe some changes could be useful for xrdp.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,686,2017-03-08T12:39:48Z,2017-03-08T12:50:01Z,2018-05-15T13:52:13Z,CLOSED,False,927,202,24,https://github.com/MUzzell,Merge in latest changes; edited error window to say 'Osirium',32,[],https://github.com/neutrinolabs/xrdp/pull/686,https://github.com/jsorg71,3,https://github.com/neutrinolabs/xrdp/pull/686#issuecomment-285851540,,"I think this was an accidental PR.  @speidy and I have been working with them.  We need to split these up into smaller PRs.  Actually, we have already been doing this.  Some already passed review, some in the hopper.  There is more good PRs to come from Osirium but some that we just don't want because they are too specific to Osirium use case.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,686,2017-03-08T12:39:48Z,2017-03-08T12:50:01Z,2018-05-15T13:52:13Z,CLOSED,False,927,202,24,https://github.com/MUzzell,Merge in latest changes; edited error window to say 'Osirium',32,[],https://github.com/neutrinolabs/xrdp/pull/686,https://github.com/proski,4,https://github.com/neutrinolabs/xrdp/pull/686#issuecomment-285853387,,"Thank you for reply. I tried rebasing the PR on top of the devel branch, and I see that most of the remaining patches are for neutrinordp. But still, there are some logic changes that might be useful for xrdp users.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,686,2017-03-08T12:39:48Z,2017-03-08T12:50:01Z,2018-05-15T13:52:13Z,CLOSED,False,927,202,24,https://github.com/MUzzell,Merge in latest changes; edited error window to say 'Osirium',32,[],https://github.com/neutrinolabs/xrdp/pull/686,https://github.com/MUzzell,5,https://github.com/neutrinolabs/xrdp/pull/686#issuecomment-285859310,,Sorry for the confusion guys. I selected the wrong target branch!,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,687,2017-03-08T14:03:42Z,2017-06-12T07:57:05Z,2017-06-12T07:57:11Z,MERGED,True,32,7,4,https://github.com/metalefty,Log user-friendly message when certificate/privkey is inaccessible,4,[],https://github.com/neutrinolabs/xrdp/pull/687,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/687,"We shouldn't assume that xrdp daemon is running under root privilege.
In many cases, root privilege is not really needed for xrdp daemon.
xrdp may fail to load certificate/privkey due to lack of permissions
when running under user privilege. Checking existence of files is not
enough and xrdp should output user-friendly log in such case.
Reported by Debian user in bug 856436 [1].
[1] https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=856436","We shouldn't assume that xrdp daemon is running under root privilege.
In many cases, root privilege is not really needed for xrdp daemon.
xrdp may fail to load certificate/privkey due to lack of permissions
when running under user privilege. Checking existence of files is not
enough and xrdp should output user-friendly log in such case.
Reported by Debian user in bug 856436 [1].
[1] https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=856436",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,687,2017-03-08T14:03:42Z,2017-06-12T07:57:05Z,2017-06-12T07:57:11Z,MERGED,True,32,7,4,https://github.com/metalefty,Log user-friendly message when certificate/privkey is inaccessible,4,[],https://github.com/neutrinolabs/xrdp/pull/687,https://github.com/Natureshadow,2,https://github.com/neutrinolabs/xrdp/pull/687#issuecomment-285109662,"We shouldn't assume that xrdp daemon is running under root privilege.
In many cases, root privilege is not really needed for xrdp daemon.
xrdp may fail to load certificate/privkey due to lack of permissions
when running under user privilege. Checking existence of files is not
enough and xrdp should output user-friendly log in such case.
Reported by Debian user in bug 856436 [1].
[1] https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=856436","Actually, the *only* valid way to find out whether you can read a file is trying to read it. On all platforms.

Checking existence and access rights is not enough. Just the... open it and see what happens.
…
-nik",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,687,2017-03-08T14:03:42Z,2017-06-12T07:57:05Z,2017-06-12T07:57:11Z,MERGED,True,32,7,4,https://github.com/metalefty,Log user-friendly message when certificate/privkey is inaccessible,4,[],https://github.com/neutrinolabs/xrdp/pull/687,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/687#issuecomment-285211457,"We shouldn't assume that xrdp daemon is running under root privilege.
In many cases, root privilege is not really needed for xrdp daemon.
xrdp may fail to load certificate/privkey due to lack of permissions
when running under user privilege. Checking existence of files is not
enough and xrdp should output user-friendly log in such case.
Reported by Debian user in bug 856436 [1].
[1] https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=856436",Indeed.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,687,2017-03-08T14:03:42Z,2017-06-12T07:57:05Z,2017-06-12T07:57:11Z,MERGED,True,32,7,4,https://github.com/metalefty,Log user-friendly message when certificate/privkey is inaccessible,4,[],https://github.com/neutrinolabs/xrdp/pull/687,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/687#issuecomment-285219538,"We shouldn't assume that xrdp daemon is running under root privilege.
In many cases, root privilege is not really needed for xrdp daemon.
xrdp may fail to load certificate/privkey due to lack of permissions
when running under user privilege. Checking existence of files is not
enough and xrdp should output user-friendly log in such case.
Reported by Debian user in bug 856436 [1].
[1] https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=856436","OK, these calls should error when failed to load valid certificate or privkey.
Use log_message instead of g_writeln should help users.
common/ssl_calls.c:
    if (SSL_CTX_use_RSAPrivateKey_file(self->ctx, self->key, SSL_FILETYPE_PEM)
            <= 0)
    {   
        g_writeln(""ssl_tls_accept: SSL_CTX_use_RSAPrivateKey_file failed"");
        return 1;
    }   

    if (SSL_CTX_use_certificate_chain_file(self->ctx, self->cert) <= 0)
    {   
        g_writeln(""ssl_tls_accept: SSL_CTX_use_certificate_chain_file failed"");
        return 1;
    }",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,687,2017-03-08T14:03:42Z,2017-06-12T07:57:05Z,2017-06-12T07:57:11Z,MERGED,True,32,7,4,https://github.com/metalefty,Log user-friendly message when certificate/privkey is inaccessible,4,[],https://github.com/neutrinolabs/xrdp/pull/687,https://github.com/metalefty,5,https://github.com/neutrinolabs/xrdp/pull/687#issuecomment-285263720,"We shouldn't assume that xrdp daemon is running under root privilege.
In many cases, root privilege is not really needed for xrdp daemon.
xrdp may fail to load certificate/privkey due to lack of permissions
when running under user privilege. Checking existence of files is not
enough and xrdp should output user-friendly log in such case.
Reported by Debian user in bug 856436 [1].
[1] https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=856436",Switching to log_message from g_writeln doesn't fail on security negotiation.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,687,2017-03-08T14:03:42Z,2017-06-12T07:57:05Z,2017-06-12T07:57:11Z,MERGED,True,32,7,4,https://github.com/metalefty,Log user-friendly message when certificate/privkey is inaccessible,4,[],https://github.com/neutrinolabs/xrdp/pull/687,https://github.com/metalefty,6,https://github.com/neutrinolabs/xrdp/pull/687#issuecomment-306389782,"We shouldn't assume that xrdp daemon is running under root privilege.
In many cases, root privilege is not really needed for xrdp daemon.
xrdp may fail to load certificate/privkey due to lack of permissions
when running under user privilege. Checking existence of files is not
enough and xrdp should output user-friendly log in such case.
Reported by Debian user in bug 856436 [1].
[1] https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=856436","As @Natureshadow says, checking readability is not enough.  Fundamentally, certificate should be validated. Access rights check and user-friendly log help some users.  Better than nothing. Let's ship this.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,688,2017-03-08T17:54:36Z,,2017-11-13T06:07:05Z,OPEN,False,3,0,1,https://github.com/gnought,Set up user limits in rdp session,1,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/688,https://github.com/gnought,1,https://github.com/neutrinolabs/xrdp/pull/688,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,688,2017-03-08T17:54:36Z,,2017-11-13T06:07:05Z,OPEN,False,3,0,1,https://github.com/gnought,Set up user limits in rdp session,1,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/688,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/688#issuecomment-285269161,,@Natureshadow what do you think?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,688,2017-03-08T17:54:36Z,,2017-11-13T06:07:05Z,OPEN,False,3,0,1,https://github.com/gnought,Set up user limits in rdp session,1,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/688,https://github.com/Natureshadow,3,https://github.com/neutrinolabs/xrdp/pull/688#issuecomment-285278939,,OK. I am a bit surprised this is not in common-session...,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,688,2017-03-08T17:54:36Z,,2017-11-13T06:07:05Z,OPEN,False,3,0,1,https://github.com/gnought,Set up user limits in rdp session,1,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/688,https://github.com/moobyfr,4,https://github.com/neutrinolabs/xrdp/pull/688#issuecomment-285280202,,"According to existing pam files in /etc/pam.d/ which use pam_limits, this line should be before the @include common-session",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,688,2017-03-08T17:54:36Z,,2017-11-13T06:07:05Z,OPEN,False,3,0,1,https://github.com/gnought,Set up user limits in rdp session,1,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/688,https://github.com/metalefty,5,https://github.com/neutrinolabs/xrdp/pull/688#issuecomment-285283555,,"@Natureshadow Should this be added to common-session? I'm not sure which Debian or xrdp should add this.
@moobyfr I looked at /etc/pam.d/sshd in Debian stretch, this is placed after common-session.  I think putting this after common-session will work.
$ egrep -v ""^#|^$"" /etc/pam.d/sshd
@include common-auth
account    required     pam_nologin.so
@include common-account
session [success=ok ignore=ignore module_unknown=ignore default=bad]        pam_selinux.so close
session    required     pam_loginuid.so
session    optional     pam_keyinit.so force revoke
@include common-session
session    optional     pam_motd.so  motd=/run/motd.dynamic
session    optional     pam_motd.so noupdate
session    optional     pam_mail.so standard noenv # [1]
session    required     pam_limits.so
session    required     pam_env.so # [1]
session    required     pam_env.so user_readenv=1 envfile=/etc/default/locale
session [success=ok ignore=ignore module_unknown=ignore default=bad]        pam_selinux.so open
@include common-password

I found pam_limits.so in CentOS 7 /etc/pam.d/password-auth included in instfiles/pam.d/xrdp-sesman.redhat. Nothing to do at least for RedHat families.
#%PAM-1.0
# This file is auto-generated.
# User changes will be destroyed the next time authconfig is run.
auth        required      pam_env.so
auth        sufficient    pam_unix.so nullok try_first_pass
auth        requisite     pam_succeed_if.so uid >= 1000 quiet_success
auth        required      pam_deny.so

account     required      pam_unix.so
account     sufficient    pam_localuser.so
account     sufficient    pam_succeed_if.so uid < 1000 quiet
account     required      pam_permit.so

password    requisite     pam_pwquality.so try_first_pass local_users_only retry=3 authtok_type=
password    sufficient    pam_unix.so sha512 shadow nullok try_first_pass use_authtok
password    required      pam_deny.so

session     optional      pam_keyinit.so revoke
session     required      pam_limits.so
-session     optional      pam_systemd.so
session     [success=1 default=ignore] pam_succeed_if.so service in crond quiet use_uid
session     required      pam_unix.so",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,688,2017-03-08T17:54:36Z,,2017-11-13T06:07:05Z,OPEN,False,3,0,1,https://github.com/gnought,Set up user limits in rdp session,1,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/688,https://github.com/proski,6,https://github.com/neutrinolabs/xrdp/pull/688#issuecomment-285849816,,"Please note that xrdp-sesman.debian is for all Debian based systems, including Ubuntu. Make sure not to break it. Maybe the fix should be sent upstream?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,688,2017-03-08T17:54:36Z,,2017-11-13T06:07:05Z,OPEN,False,3,0,1,https://github.com/gnought,Set up user limits in rdp session,1,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/688,https://github.com/metalefty,7,https://github.com/neutrinolabs/xrdp/pull/688#issuecomment-288299720,,Considerations needed that it really should be done in xrdp side.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,688,2017-03-08T17:54:36Z,,2017-11-13T06:07:05Z,OPEN,False,3,0,1,https://github.com/gnought,Set up user limits in rdp session,1,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/688,https://github.com/metalefty,8,https://github.com/neutrinolabs/xrdp/pull/688#issuecomment-304191871,,@Natureshadow Do you have any idea if should be done in Debian?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,688,2017-03-08T17:54:36Z,,2017-11-13T06:07:05Z,OPEN,False,3,0,1,https://github.com/gnought,Set up user limits in rdp session,1,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/688,https://github.com/moobyfr,9,https://github.com/neutrinolabs/xrdp/pull/688#issuecomment-343822909,,"+1 for including this one
The common-* are for all services mostly, you use them to get common configuration, and you can moreover, add some other modules (like pam_limit or pam_loginuid)",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,690,2017-03-12T17:01:29Z,2017-03-14T07:21:49Z,2017-03-14T07:21:49Z,MERGED,True,2034,2047,122,https://github.com/proski,Eliminate APP_CC and DEFAULT_CC,1,[],https://github.com/neutrinolabs/xrdp/pull/690,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/690,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,690,2017-03-12T17:01:29Z,2017-03-14T07:21:49Z,2017-03-14T07:21:49Z,MERGED,True,2034,2047,122,https://github.com/proski,Eliminate APP_CC and DEFAULT_CC,1,[],https://github.com/neutrinolabs/xrdp/pull/690,https://github.com/speidy,2,https://github.com/neutrinolabs/xrdp/pull/690#issuecomment-286230134,,+1 Thanks!!,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,691,2017-03-14T03:11:24Z,2017-03-17T00:21:53Z,2017-03-17T00:21:58Z,MERGED,True,7,7,1,https://github.com/metalefty,"Propel xorgxrdp as default backend, give xorgxrdp the first place",1,[],https://github.com/neutrinolabs/xrdp/pull/691,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/691,"If we recommend xorgxrdp as preferred backend, we should set xorgxrdp as default.
This is a part of ""Merge Debian local patches project"".","If we recommend xorgxrdp as preferred backend, we should set xorgxrdp as default.
This is a part of ""Merge Debian local patches project"".",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,691,2017-03-14T03:11:24Z,2017-03-17T00:21:53Z,2017-03-17T00:21:58Z,MERGED,True,7,7,1,https://github.com/metalefty,"Propel xorgxrdp as default backend, give xorgxrdp the first place",1,[],https://github.com/neutrinolabs/xrdp/pull/691,https://github.com/proski,2,https://github.com/neutrinolabs/xrdp/pull/691#issuecomment-286310259,"If we recommend xorgxrdp as preferred backend, we should set xorgxrdp as default.
This is a part of ""Merge Debian local patches project"".","+1
I was thinking of submitting a patch like that. Let's have it in 0.9.2.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,691,2017-03-14T03:11:24Z,2017-03-17T00:21:53Z,2017-03-17T00:21:58Z,MERGED,True,7,7,1,https://github.com/metalefty,"Propel xorgxrdp as default backend, give xorgxrdp the first place",1,[],https://github.com/neutrinolabs/xrdp/pull/691,https://github.com/speidy,3,https://github.com/neutrinolabs/xrdp/pull/691#issuecomment-286898119,"If we recommend xorgxrdp as preferred backend, we should set xorgxrdp as default.
This is a part of ""Merge Debian local patches project"".",+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,694,2017-03-14T16:55:21Z,2017-03-22T05:03:46Z,2017-03-26T06:57:41Z,CLOSED,False,1,1,1,https://github.com/jsorg71,sesman: auth session before fork,1,['invalid'],https://github.com/neutrinolabs/xrdp/pull/694,https://github.com/jsorg71,1,https://github.com/neutrinolabs/xrdp/pull/694,"So, the home directory can be created by ""pam_mkhomedir"".","So, the home directory can be created by ""pam_mkhomedir"".",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,694,2017-03-14T16:55:21Z,2017-03-22T05:03:46Z,2017-03-26T06:57:41Z,CLOSED,False,1,1,1,https://github.com/jsorg71,sesman: auth session before fork,1,['invalid'],https://github.com/neutrinolabs/xrdp/pull/694,https://github.com/proski,2,https://github.com/neutrinolabs/xrdp/pull/694#issuecomment-286567537,"So, the home directory can be created by ""pam_mkhomedir"".",+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,694,2017-03-14T16:55:21Z,2017-03-22T05:03:46Z,2017-03-26T06:57:41Z,CLOSED,False,1,1,1,https://github.com/jsorg71,sesman: auth session before fork,1,['invalid'],https://github.com/neutrinolabs/xrdp/pull/694,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/694#issuecomment-286605365,"So, the home directory can be created by ""pam_mkhomedir"".","The change looks good. But I want you to include ""why"" in commit message for future source code reading. ""Why"" is always more important than ""What"".  In this change, to create home directory, right?  It's OK to do force push in unmerged PRs.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,694,2017-03-14T16:55:21Z,2017-03-22T05:03:46Z,2017-03-26T06:57:41Z,CLOSED,False,1,1,1,https://github.com/jsorg71,sesman: auth session before fork,1,['invalid'],https://github.com/neutrinolabs/xrdp/pull/694,https://github.com/ksteinb,4,https://github.com/neutrinolabs/xrdp/pull/694#issuecomment-286658404,"So, the home directory can be created by ""pam_mkhomedir"".","Correct session  management is necessary for more things than just to create homedirectory. Here some reasons:
-> Create Homedirectory on demand
-> Correctly setup umask  (pam_umask)
-> Correct setup of selinux contexrt
-> Handling of limits (pam_limits)
and so on .....",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,694,2017-03-14T16:55:21Z,2017-03-22T05:03:46Z,2017-03-26T06:57:41Z,CLOSED,False,1,1,1,https://github.com/jsorg71,sesman: auth session before fork,1,['invalid'],https://github.com/neutrinolabs/xrdp/pull/694,https://github.com/proski,5,https://github.com/neutrinolabs/xrdp/pull/694#issuecomment-286660243,"So, the home directory can be created by ""pam_mkhomedir"".","I'm a big fan of good comments in the code, however...
The reader of the code would not see that auth_start_session was called elsewhere. So a comment in the code would not be very useful. We cannot annotate every line of code with an explanation why it's there and not elsewhere.
Those who want to dig deeper should be able to find the commit and it's comment. That would provide information about the change and the reason behind it.
Of course, if somebody can come with a useful comment about the auth_start_session that is not duplicating the code, I'll be glad to see it. But the lack of a comment should not be a blocker.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,694,2017-03-14T16:55:21Z,2017-03-22T05:03:46Z,2017-03-26T06:57:41Z,CLOSED,False,1,1,1,https://github.com/jsorg71,sesman: auth session before fork,1,['invalid'],https://github.com/neutrinolabs/xrdp/pull/694,https://github.com/metalefty,6,https://github.com/neutrinolabs/xrdp/pull/694#issuecomment-286680958,"So, the home directory can be created by ""pam_mkhomedir"".","I think most of correct session management procedures can be done in PAM.
For example, suggested in #688. This fixes things done in PAM wasn't working.
Of course I don't intend to block merging this PR. We can add comments whenever later.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,694,2017-03-14T16:55:21Z,2017-03-22T05:03:46Z,2017-03-26T06:57:41Z,CLOSED,False,1,1,1,https://github.com/jsorg71,sesman: auth session before fork,1,['invalid'],https://github.com/neutrinolabs/xrdp/pull/694,https://github.com/ksteinb,7,https://github.com/neutrinolabs/xrdp/pull/694#issuecomment-286710808,"So, the home directory can be created by ""pam_mkhomedir"".","#688 describes the correct setup of the pam configuration, but that doesn't help as long as auth_start_session is called in the wrong place.
So just write as comment something like:
""Calling auth_start_session in the correct place, otherwise pam session management fails""",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,694,2017-03-14T16:55:21Z,2017-03-22T05:03:46Z,2017-03-26T06:57:41Z,CLOSED,False,1,1,1,https://github.com/jsorg71,sesman: auth session before fork,1,['invalid'],https://github.com/neutrinolabs/xrdp/pull/694,https://github.com/jsorg71,8,https://github.com/neutrinolabs/xrdp/pull/694#issuecomment-286848986,"So, the home directory can be created by ""pam_mkhomedir"".","Does it also fix the issue if auth_start_session is moved above wait_for_xserver?
I'd rather do that.
There is not matching auth_start_session / auth_stop_session now.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,694,2017-03-14T16:55:21Z,2017-03-22T05:03:46Z,2017-03-26T06:57:41Z,CLOSED,False,1,1,1,https://github.com/jsorg71,sesman: auth session before fork,1,['invalid'],https://github.com/neutrinolabs/xrdp/pull/694,https://github.com/jsorg71,9,https://github.com/neutrinolabs/xrdp/pull/694#issuecomment-286879008,"So, the home directory can be created by ""pam_mkhomedir"".","After looking closer, I think it's right now.  auth_start_session and auth_stop_session are called in same process now.
Before this PR
session_start_fork()
g_fork()
    child - g_fork()
        child auth_start_session(), g_fork()
            child - g_exec(window manager)
        parent - g_waitpid(), auth_stop_session(), g_exit()
    parent - g_fork()
        child - g_exec(X11 backend)
    parent - sesman svc(wait for window manager to exit, then kill X11 backend)
parent - exit session_start_fork()

After this PR
session_start_fork()
g_fork()
    child - auth_start_session(), g_fork()
        child g_fork()
            child - g_exec(window manager)
        parent - g_waitpid(), auth_stop_session(), g_exit()
    parent - g_fork()
        child - g_exec(X11 backend)
    parent - sesman svc(wait for window manager to exit, then kill X11 backend)
parent - exit session_start_fork()",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,694,2017-03-14T16:55:21Z,2017-03-22T05:03:46Z,2017-03-26T06:57:41Z,CLOSED,False,1,1,1,https://github.com/jsorg71,sesman: auth session before fork,1,['invalid'],https://github.com/neutrinolabs/xrdp/pull/694,https://github.com/rolnas,10,https://github.com/neutrinolabs/xrdp/pull/694#issuecomment-287053187,"So, the home directory can be created by ""pam_mkhomedir"".","This patch don't work with pam_krb5 on Debian 8.
I moved auth_start_session higher to the same process as auth_userpass.
That works, but some auth_end closes session too early (but retain_after_close=true on pam_krb5 solves temporary).
I'm attaching patch and log files from successful session (pam_krb5 with debug=true).
auth_start_session2.txt
auth_start_session2_log.txt",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,694,2017-03-14T16:55:21Z,2017-03-22T05:03:46Z,2017-03-26T06:57:41Z,CLOSED,False,1,1,1,https://github.com/jsorg71,sesman: auth session before fork,1,['invalid'],https://github.com/neutrinolabs/xrdp/pull/694,https://github.com/moobyfr,11,https://github.com/neutrinolabs/xrdp/pull/694#issuecomment-287132299,"So, the home directory can be created by ""pam_mkhomedir"".","@rolnas can you add your pam.d/common-* files to understand the problem ?
I'm using pam_krb5 or pam_ldap with xrdp since several years without problem.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,694,2017-03-14T16:55:21Z,2017-03-22T05:03:46Z,2017-03-26T06:57:41Z,CLOSED,False,1,1,1,https://github.com/jsorg71,sesman: auth session before fork,1,['invalid'],https://github.com/neutrinolabs/xrdp/pull/694,https://github.com/ksteinb,12,https://github.com/neutrinolabs/xrdp/pull/694#issuecomment-287136995,"So, the home directory can be created by ""pam_mkhomedir"".","Am 16.03.2017 um 18:29 schrieb Blindauer Emmanuel:
 @rolnas <https://github.com/rolnas> can you add your pam.d/common-* files to
 understand the problem ?
 I'm using pam_krb5 or pam_ldap with xrdp since several years without problem.

the problem is _not_ authorization as you need for pam_ldap or pam_krb5. It is
session management. For example pam_limits was not working (pam_limits has
_only_ the session module).

Sincerly,
Klaus
…
-- 
Rechnerbetriebsgruppe / IT, Fakultät für Physik
Klaus Steinberger
FAX: +49 89 28914280
Tel: +49 89 28914287",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,694,2017-03-14T16:55:21Z,2017-03-22T05:03:46Z,2017-03-26T06:57:41Z,CLOSED,False,1,1,1,https://github.com/jsorg71,sesman: auth session before fork,1,['invalid'],https://github.com/neutrinolabs/xrdp/pull/694,https://github.com/jsorg71,13,https://github.com/neutrinolabs/xrdp/pull/694#issuecomment-287261253,"So, the home directory can be created by ""pam_mkhomedir"".",I create #696 that can replace this PR.  Hopefully it works for everyone.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,694,2017-03-14T16:55:21Z,2017-03-22T05:03:46Z,2017-03-26T06:57:41Z,CLOSED,False,1,1,1,https://github.com/jsorg71,sesman: auth session before fork,1,['invalid'],https://github.com/neutrinolabs/xrdp/pull/694,https://github.com/setharnold,14,https://github.com/neutrinolabs/xrdp/pull/694#issuecomment-287460092,"So, the home directory can be created by ""pam_mkhomedir"".","Use CVE-2017-6967.
Thanks",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,694,2017-03-14T16:55:21Z,2017-03-22T05:03:46Z,2017-03-26T06:57:41Z,CLOSED,False,1,1,1,https://github.com/jsorg71,sesman: auth session before fork,1,['invalid'],https://github.com/neutrinolabs/xrdp/pull/694,https://github.com/mrkz,15,https://github.com/neutrinolabs/xrdp/pull/694#issuecomment-289097470,"So, the home directory can be created by ""pam_mkhomedir"".","Hello, I would like to confirm if PR #704 and #697 are the fix to this CVE issue?
Thanks!",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,694,2017-03-14T16:55:21Z,2017-03-22T05:03:46Z,2017-03-26T06:57:41Z,CLOSED,False,1,1,1,https://github.com/jsorg71,sesman: auth session before fork,1,['invalid'],https://github.com/neutrinolabs/xrdp/pull/694,https://github.com/jsorg71,16,https://github.com/neutrinolabs/xrdp/pull/694#issuecomment-289098983,"So, the home directory can be created by ""pam_mkhomedir"".",It's just #704 for the fix.  Can someone else confirm it;s fixed?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,694,2017-03-14T16:55:21Z,2017-03-22T05:03:46Z,2017-03-26T06:57:41Z,CLOSED,False,1,1,1,https://github.com/jsorg71,sesman: auth session before fork,1,['invalid'],https://github.com/neutrinolabs/xrdp/pull/694,https://github.com/moobyfr,17,https://github.com/neutrinolabs/xrdp/pull/694#issuecomment-289262531,"So, the home directory can be created by ""pam_mkhomedir"".","I confirm it. I thing the pam process is now ok: before, if pam_krb5 was used, the environement variable set by the module was't available in the user session an the file created by the module was owned by root. Now the variable is set and file owned by user.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,695,2017-03-15T07:04:49Z,2017-03-18T05:25:06Z,2017-03-18T05:25:07Z,MERGED,True,71,90,22,https://github.com/proski,Make socket directory configurable,3,[],https://github.com/neutrinolabs/xrdp/pull/695,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/695,"The default remains /tmp/.xrdp for compatibility with older versions of X1rdp and xorgxrdp.
The socket directory is configured by passing --with-socketdir=DIR to configure.
xrdp-sesman passes the socket directory to the backends as XRDP_SOCKET_PATH environment variable. X11rdp uses it.
file_loc.h has been striped of the defines that should not have a default value.
Remove cleanup code in xrdp-sessvc, it is obsolete. xrdp-chansrv should be able to clean up after itself.","The default remains /tmp/.xrdp for compatibility with older versions of X1rdp and xorgxrdp.
The socket directory is configured by passing --with-socketdir=DIR to configure.
xrdp-sesman passes the socket directory to the backends as XRDP_SOCKET_PATH environment variable. X11rdp uses it.
file_loc.h has been striped of the defines that should not have a default value.
Remove cleanup code in xrdp-sessvc, it is obsolete. xrdp-chansrv should be able to clean up after itself.",True,{'THUMBS_UP': ['https://github.com/metalefty']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,695,2017-03-15T07:04:49Z,2017-03-18T05:25:06Z,2017-03-18T05:25:07Z,MERGED,True,71,90,22,https://github.com/proski,Make socket directory configurable,3,[],https://github.com/neutrinolabs/xrdp/pull/695,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/695#issuecomment-286676755,"The default remains /tmp/.xrdp for compatibility with older versions of X1rdp and xorgxrdp.
The socket directory is configured by passing --with-socketdir=DIR to configure.
xrdp-sesman passes the socket directory to the backends as XRDP_SOCKET_PATH environment variable. X11rdp uses it.
file_loc.h has been striped of the defines that should not have a default value.
Remove cleanup code in xrdp-sessvc, it is obsolete. xrdp-chansrv should be able to clean up after itself.",Great work! Much cleaner than I tried to do that.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,695,2017-03-15T07:04:49Z,2017-03-18T05:25:06Z,2017-03-18T05:25:07Z,MERGED,True,71,90,22,https://github.com/proski,Make socket directory configurable,3,[],https://github.com/neutrinolabs/xrdp/pull/695,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/695#issuecomment-287237711,"The default remains /tmp/.xrdp for compatibility with older versions of X1rdp and xorgxrdp.
The socket directory is configured by passing --with-socketdir=DIR to configure.
xrdp-sesman passes the socket directory to the backends as XRDP_SOCKET_PATH environment variable. X11rdp uses it.
file_loc.h has been striped of the defines that should not have a default value.
Remove cleanup code in xrdp-sessvc, it is obsolete. xrdp-chansrv should be able to clean up after itself.",@jsorg71 @speidy What do you think? See also #692.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,696,2017-03-17T03:57:58Z,2017-03-22T05:03:18Z,2017-07-29T03:43:32Z,CLOSED,False,131,383,10,https://github.com/jsorg71,"remove sessvc, one less process, move auth_start_session, auth_stop_session, auth_end to same process",10,"['invalid', 'work in progress']",https://github.com/neutrinolabs/xrdp/pull/696,https://github.com/jsorg71,1,https://github.com/neutrinolabs/xrdp/pull/696,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,696,2017-03-17T03:57:58Z,2017-03-22T05:03:18Z,2017-07-29T03:43:32Z,CLOSED,False,131,383,10,https://github.com/jsorg71,"remove sessvc, one less process, move auth_start_session, auth_stop_session, auth_end to same process",10,"['invalid', 'work in progress']",https://github.com/neutrinolabs/xrdp/pull/696,https://github.com/jsorg71,2,https://github.com/neutrinolabs/xrdp/pull/696#issuecomment-287518480,,I'll create 2 new PR that will replace this one taking replies here into consideration.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,697,2017-03-18T21:50:28Z,2017-03-20T00:16:38Z,2017-07-29T03:44:08Z,MERGED,True,137,363,10,https://github.com/jsorg71,"sesman: remove sessvc, one less process to manage",1,[],https://github.com/neutrinolabs/xrdp/pull/697,https://github.com/jsorg71,1,https://github.com/neutrinolabs/xrdp/pull/697,"also, cleanup a socket left open","also, cleanup a socket left open",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,698,2017-03-19T08:36:08Z,2017-03-22T05:02:56Z,2017-03-24T07:53:28Z,CLOSED,False,35,25,1,https://github.com/speidy,libxrdp: improve unicode_in,2,[],https://github.com/neutrinolabs/xrdp/pull/698,https://github.com/speidy,1,https://github.com/neutrinolabs/xrdp/pull/698,"I discarded the 512 check, because its already done outside this function, as excepted.","I discarded the 512 check, because its already done outside this function, as excepted.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,699,2017-03-19T09:21:27Z,2017-03-22T05:02:30Z,2017-03-24T07:54:58Z,MERGED,True,40,26,2,https://github.com/speidy,libxrdp: print connected client computer name,3,[],https://github.com/neutrinolabs/xrdp/pull/699,https://github.com/speidy,1,https://github.com/neutrinolabs/xrdp/pull/699,"This PR is rebased on top of #698, so we can actually merge this one only if its fine by you.
It also replaces this PR #515.","This PR is rebased on top of #698, so we can actually merge this one only if its fine by you.
It also replaces this PR #515.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,700,2017-03-19T19:48:16Z,2017-03-22T04:59:51Z,2017-03-22T04:59:51Z,MERGED,True,17,4,1,https://github.com/proski,"Log socket fd in g_sck_accept(), fix AF_UNIX logging",1,[],https://github.com/neutrinolabs/xrdp/pull/700,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/700,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,701,2017-03-19T20:40:37Z,2017-03-21T02:11:07Z,2017-03-21T02:11:07Z,MERGED,True,1,1,1,https://github.com/proski,xrdp-chansrv: default to INFO log level rather than ERROR,1,[],https://github.com/neutrinolabs/xrdp/pull/701,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/701,,,True,{'THUMBS_UP': ['https://github.com/metalefty']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,704,2017-03-21T02:01:16Z,2017-03-22T04:56:29Z,2017-03-26T06:57:55Z,MERGED,True,26,9,3,https://github.com/jsorg71,sesman: move auth/pam calls to main process,1,[],https://github.com/neutrinolabs/xrdp/pull/704,https://github.com/jsorg71,1,https://github.com/neutrinolabs/xrdp/pull/704,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,704,2017-03-21T02:01:16Z,2017-03-22T04:56:29Z,2017-03-26T06:57:55Z,MERGED,True,26,9,3,https://github.com/jsorg71,sesman: move auth/pam calls to main process,1,[],https://github.com/neutrinolabs/xrdp/pull/704,https://github.com/moobyfr,2,https://github.com/neutrinolabs/xrdp/pull/704#issuecomment-289262571,,+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,708,2017-03-23T00:11:04Z,2017-03-24T04:49:22Z,2018-12-14T01:46:09Z,MERGED,True,4,4,2,https://github.com/metalefty,pulse fixes after socket directory change,2,[],https://github.com/neutrinolabs/xrdp/pull/708,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/708,Pulse module doesn't build after recent socket directory change.  This is not a complete fix. One more thing needs to be done. XRDP_SOCKET_PATH  needs to be passed pulse module.,Pulse module doesn't build after recent socket directory change.  This is not a complete fix. One more thing needs to be done. XRDP_SOCKET_PATH  needs to be passed pulse module.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,708,2017-03-23T00:11:04Z,2017-03-24T04:49:22Z,2018-12-14T01:46:09Z,MERGED,True,4,4,2,https://github.com/metalefty,pulse fixes after socket directory change,2,[],https://github.com/neutrinolabs/xrdp/pull/708,https://github.com/proski,2,https://github.com/neutrinolabs/xrdp/pull/708#issuecomment-288618700,Pulse module doesn't build after recent socket directory change.  This is not a complete fix. One more thing needs to be done. XRDP_SOCKET_PATH  needs to be passed pulse module.,"+1
Sorry for that.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,708,2017-03-23T00:11:04Z,2017-03-24T04:49:22Z,2018-12-14T01:46:09Z,MERGED,True,4,4,2,https://github.com/metalefty,pulse fixes after socket directory change,2,[],https://github.com/neutrinolabs/xrdp/pull/708,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/708#issuecomment-288619604,Pulse module doesn't build after recent socket directory change.  This is not a complete fix. One more thing needs to be done. XRDP_SOCKET_PATH  needs to be passed pulse module.,No problem 😄,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,711,2017-03-25T06:37:34Z,2017-03-28T07:59:17Z,2017-03-28T07:59:17Z,MERGED,True,13,14,13,https://github.com/proski,"Rename file_loc.h to xrdp_sockets.h, install it",1,[],https://github.com/neutrinolabs/xrdp/pull/711,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/711,"Include xrdp_sockets.h directly, not through headers.","Include xrdp_sockets.h directly, not through headers.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,711,2017-03-25T06:37:34Z,2017-03-28T07:59:17Z,2017-03-28T07:59:17Z,MERGED,True,13,14,13,https://github.com/proski,"Rename file_loc.h to xrdp_sockets.h, install it",1,[],https://github.com/neutrinolabs/xrdp/pull/711,https://github.com/speidy,2,https://github.com/neutrinolabs/xrdp/pull/711#issuecomment-289219655,"Include xrdp_sockets.h directly, not through headers.",+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,711,2017-03-25T06:37:34Z,2017-03-28T07:59:17Z,2017-03-28T07:59:17Z,MERGED,True,13,14,13,https://github.com/proski,"Rename file_loc.h to xrdp_sockets.h, install it",1,[],https://github.com/neutrinolabs/xrdp/pull/711,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/711#issuecomment-289271045,"Include xrdp_sockets.h directly, not through headers.",+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,712,2017-03-26T06:52:09Z,2017-03-27T03:49:39Z,2017-03-27T03:49:39Z,MERGED,True,0,4,2,https://github.com/proski,"Remove readme.txt, it has been replaced by README.md",1,[],https://github.com/neutrinolabs/xrdp/pull/712,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/712,It's better to have fewer files containing the source version.,It's better to have fewer files containing the source version.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,712,2017-03-26T06:52:09Z,2017-03-27T03:49:39Z,2017-03-27T03:49:39Z,MERGED,True,0,4,2,https://github.com/proski,"Remove readme.txt, it has been replaced by README.md",1,[],https://github.com/neutrinolabs/xrdp/pull/712,https://github.com/speidy,2,https://github.com/neutrinolabs/xrdp/pull/712#issuecomment-289262439,It's better to have fewer files containing the source version.,"I agree, but I think metalefty said it's still being used by X11rdp-O-Matic
בתאריך יום א׳, 26 במרץ 2017 ב-9:52 מאת Pavel Roskin <
notifications@github.com>:
 It's better to have fewer files containing the source version.
 ------------------------------
 You can view, comment on, or merge this pull request online at:

   #712
 Commit Summary

    - Remove readme.txt, it has been replaced by README.md

 File Changes

    - *M* Makefile.am
    <https://github.com/neutrinolabs/xrdp/pull/712/files#diff-0> (1)
    - *D* readme.txt
    <https://github.com/neutrinolabs/xrdp/pull/712/files#diff-1> (3)

 Patch Links:

    - https://github.com/neutrinolabs/xrdp/pull/712.patch
    - https://github.com/neutrinolabs/xrdp/pull/712.diff

 —
 You are receiving this because you are subscribed to this thread.
 Reply to this email directly, view it on GitHub
 <#712>, or mute the thread
 <https://github.com/notifications/unsubscribe-auth/ADTH1NWqfoHqgnU0-wwvSte28Ke74w0_ks5rpgsbgaJpZM4MpVtO>
 .

-- 
Idan Freiberg

PGP FP: 8108 7EC9 806E 4980 75F2  72B3 8AD3 2D04 337B 1F18",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,712,2017-03-26T06:52:09Z,2017-03-27T03:49:39Z,2017-03-27T03:49:39Z,MERGED,True,0,4,2,https://github.com/proski,"Remove readme.txt, it has been replaced by README.md",1,[],https://github.com/neutrinolabs/xrdp/pull/712,https://github.com/proski,3,https://github.com/neutrinolabs/xrdp/pull/712#issuecomment-289262637,It's better to have fewer files containing the source version.,X11rdp-O-Matic should be discouraged now. Especially if it's a version that wasn't updated for the latest xrdp. I've seen at least one xrdp issue in github that was caused by X11rdp-O-Matic. I wasted time debugging it.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,712,2017-03-26T06:52:09Z,2017-03-27T03:49:39Z,2017-03-27T03:49:39Z,MERGED,True,0,4,2,https://github.com/proski,"Remove readme.txt, it has been replaced by README.md",1,[],https://github.com/neutrinolabs/xrdp/pull/712,https://github.com/speidy,4,https://github.com/neutrinolabs/xrdp/pull/712#issuecomment-289263138,It's better to have fewer files containing the source version.,"Yea.
We also prefer xorgxrdp as default backend now.
Anyway, o-matic tools should be fixed to fit xrdp and not the other way
around.
בתאריך יום א׳, 26 במרץ 2017 ב-10:00 מאת Pavel Roskin <
notifications@github.com>:
 X11rdp-O-Matic should be discouraged now. Especially if it's a version
 that wasn't updated for the latest xrdp. I've seen at least one xrdp issue
 in github that was caused by X11rdp-O-Matic. I wasted time debugging it.

 —
 You are receiving this because you commented.


 Reply to this email directly, view it on GitHub
 <#712 (comment)>,
 or mute the thread
 <https://github.com/notifications/unsubscribe-auth/ADTH1Ic6v51AVm6WHEIRoT9kyYHgSCB5ks5rpgz2gaJpZM4MpVtO>
 .

-- 
Idan Freiberg

PGP FP: 8108 7EC9 806E 4980 75F2  72B3 8AD3 2D04 337B 1F18",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,712,2017-03-26T06:52:09Z,2017-03-27T03:49:39Z,2017-03-27T03:49:39Z,MERGED,True,0,4,2,https://github.com/proski,"Remove readme.txt, it has been replaced by README.md",1,[],https://github.com/neutrinolabs/xrdp/pull/712,https://github.com/metalefty,5,https://github.com/neutrinolabs/xrdp/pull/712#issuecomment-289271011,It's better to have fewer files containing the source version.,"I'm OK with this.
I'm working on o-Matic but don't have enough time. My hands are full with xrdp and RH-Matic.
No worries about o-Matic. Let's ship it.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,712,2017-03-26T06:52:09Z,2017-03-27T03:49:39Z,2017-03-27T03:49:39Z,MERGED,True,0,4,2,https://github.com/proski,"Remove readme.txt, it has been replaced by README.md",1,[],https://github.com/neutrinolabs/xrdp/pull/712,https://github.com/metalefty,6,https://github.com/neutrinolabs/xrdp/pull/712#issuecomment-289271735,It's better to have fewer files containing the source version.,RH-Matic also refers readme.txt but I'll fix it shortly.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,715,2017-03-29T06:58:13Z,2017-03-30T06:20:05Z,2017-03-30T06:20:05Z,CLOSED,False,29,6,6,https://github.com/proski,"Prepare 0.9.2 - for testing only, not for merging",2,[],https://github.com/neutrinolabs/xrdp/pull/715,https://github.com/proski,1,https://github.com/neutrinolabs/xrdp/pull/715,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,715,2017-03-29T06:58:13Z,2017-03-30T06:20:05Z,2017-03-30T06:20:05Z,CLOSED,False,29,6,6,https://github.com/proski,"Prepare 0.9.2 - for testing only, not for merging",2,[],https://github.com/neutrinolabs/xrdp/pull/715,https://github.com/Natureshadow,2,https://github.com/neutrinolabs/xrdp/pull/715#issuecomment-290007433,,"Tarball generated by `make distcheck` attached for testing. Please be
careful not to confuse it with an official release.
[xrdp-0.9.2.tar.gz](https://github.com/neutrinolabs/xrdp/files/878091/xrdp-0.9.2.tar.gz)
Then don't give it the version of a stable release...",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,715,2017-03-29T06:58:13Z,2017-03-30T06:20:05Z,2017-03-30T06:20:05Z,CLOSED,False,29,6,6,https://github.com/proski,"Prepare 0.9.2 - for testing only, not for merging",2,[],https://github.com/neutrinolabs/xrdp/pull/715,https://github.com/speidy,3,https://github.com/neutrinolabs/xrdp/pull/715#issuecomment-290027190,,"Regarding submodules, we need to merge the version bump PRs first then update here",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,715,2017-03-29T06:58:13Z,2017-03-30T06:20:05Z,2017-03-30T06:20:05Z,CLOSED,False,29,6,6,https://github.com/proski,"Prepare 0.9.2 - for testing only, not for merging",2,[],https://github.com/neutrinolabs/xrdp/pull/715,https://github.com/proski,4,https://github.com/neutrinolabs/xrdp/pull/715#issuecomment-290309721,,"@Natureshadow my bad, I removed my comment. But your comment is still referring to that file, and I cannot remove it. It looks like we are going to have a real release in a few hours anyway.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,717,2017-03-30T08:16:45Z,2017-04-25T00:31:23Z,2017-05-11T16:08:55Z,MERGED,True,229,126,1,https://github.com/MichaelSweden,"Fix to handle OS disabled IPv6, issue #714.",2,['IPv6'],https://github.com/neutrinolabs/xrdp/pull/717,https://github.com/MichaelSweden,1,https://github.com/neutrinolabs/xrdp/pull/717,"Changes made only in the os_calls.c file (keep the libcommon interface intact)
Exported functions changed: g_tcp_bind g_tcp_bind_address g_tcp_connect
Support three network configurations:

Normal network, with IPv6
Partly disabled IPv6 via sysctl.conf
Total disabled IPv6 via grub



Please see #714","Changes made only in the os_calls.c file (keep the libcommon interface intact)
Exported functions changed: g_tcp_bind g_tcp_bind_address g_tcp_connect
Support three network configurations:

Normal network, with IPv6
Partly disabled IPv6 via sysctl.conf
Total disabled IPv6 via grub



Please see #714",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,717,2017-03-30T08:16:45Z,2017-04-25T00:31:23Z,2017-05-11T16:08:55Z,MERGED,True,229,126,1,https://github.com/MichaelSweden,"Fix to handle OS disabled IPv6, issue #714.",2,['IPv6'],https://github.com/neutrinolabs/xrdp/pull/717,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/717#issuecomment-291369144,"Changes made only in the os_calls.c file (keep the libcommon interface intact)
Exported functions changed: g_tcp_bind g_tcp_bind_address g_tcp_connect
Support three network configurations:

Normal network, with IPv6
Partly disabled IPv6 via sysctl.conf
Total disabled IPv6 via grub



Please see #714",I'm testing this.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,717,2017-03-30T08:16:45Z,2017-04-25T00:31:23Z,2017-05-11T16:08:55Z,MERGED,True,229,126,1,https://github.com/MichaelSweden,"Fix to handle OS disabled IPv6, issue #714.",2,['IPv6'],https://github.com/neutrinolabs/xrdp/pull/717,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/717#issuecomment-292398345,"Changes made only in the os_calls.c file (keep the libcommon interface intact)
Exported functions changed: g_tcp_bind g_tcp_bind_address g_tcp_connect
Support three network configurations:

Normal network, with IPv6
Partly disabled IPv6 via sysctl.conf
Total disabled IPv6 via grub



Please see #714",Works fine for me.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,717,2017-03-30T08:16:45Z,2017-04-25T00:31:23Z,2017-05-11T16:08:55Z,MERGED,True,229,126,1,https://github.com/MichaelSweden,"Fix to handle OS disabled IPv6, issue #714.",2,['IPv6'],https://github.com/neutrinolabs/xrdp/pull/717,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/717#issuecomment-295509226,"Changes made only in the os_calls.c file (keep the libcommon interface intact)
Exported functions changed: g_tcp_bind g_tcp_bind_address g_tcp_connect
Support three network configurations:

Normal network, with IPv6
Partly disabled IPv6 via sysctl.conf
Total disabled IPv6 via grub



Please see #714",I'll merge this in 24 hours if no objections.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,717,2017-03-30T08:16:45Z,2017-04-25T00:31:23Z,2017-05-11T16:08:55Z,MERGED,True,229,126,1,https://github.com/MichaelSweden,"Fix to handle OS disabled IPv6, issue #714.",2,['IPv6'],https://github.com/neutrinolabs/xrdp/pull/717,https://github.com/MichaelSweden,5,https://github.com/neutrinolabs/xrdp/pull/717#issuecomment-295814116,"Changes made only in the os_calls.c file (keep the libcommon interface intact)
Exported functions changed: g_tcp_bind g_tcp_bind_address g_tcp_connect
Support three network configurations:

Normal network, with IPv6
Partly disabled IPv6 via sysctl.conf
Total disabled IPv6 via grub



Please see #714","Okay, great.
I have now tested on Xubuntu 17.04 Beta2 and it works OK.
PS. One thing I notice was that if IPv6 isn't available and the g_tcp_socket function will falling back to IPv4. It will be an ERROR message in log files ""g_tcp_socket: Address family not supported by protocol"". This isn't so nice! After this it will be an INFO message ""IPv6 not supported, falling back to IPv4"". I haven't changed this function, so it is as it was before.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,717,2017-03-30T08:16:45Z,2017-04-25T00:31:23Z,2017-05-11T16:08:55Z,MERGED,True,229,126,1,https://github.com/MichaelSweden,"Fix to handle OS disabled IPv6, issue #714.",2,['IPv6'],https://github.com/neutrinolabs/xrdp/pull/717,https://github.com/MichaelSweden,6,https://github.com/neutrinolabs/xrdp/pull/717#issuecomment-296234236,"Changes made only in the os_calls.c file (keep the libcommon interface intact)
Exported functions changed: g_tcp_bind g_tcp_bind_address g_tcp_connect
Support three network configurations:

Normal network, with IPv6
Partly disabled IPv6 via sysctl.conf
Total disabled IPv6 via grub



Please see #714","Sorry, I'm a bit annoyed that I missed that old error message. This error message will always come at start if the system have IPv6 disabled. I think it should be removed. I have looked at it and it is easy fixed by moving the log_message line at row 422 little bit down to the default case. Like this:
diff --git a/common/os_calls.c b/common/os_calls.c
index ca8ab42..524d819 100644
--- a/common/os_calls.c
+++ b/common/os_calls.c
@@ -419,8 +419,6 @@ g_tcp_socket(void)
     rv = (int)socket(AF_INET6, SOCK_STREAM, 0);
     if (rv < 0)
     {
-        log_message(LOG_LEVEL_ERROR, ""g_tcp_socket: %s"", g_get_strerror());
-
         switch (errno)
         {
             case EAFNOSUPPORT: /* if IPv6 not supported, retry IPv4 */
@@ -429,6 +427,7 @@ g_tcp_socket(void)
                 break;
 
             default:
+                log_message(LOG_LEVEL_ERROR, ""g_tcp_socket: %s"", g_get_strerror());
                 return -1;
         }
     }

@metalefty Is it too late to commit a fix to this pull request? You wrote that you will merge this and I don't want to mess things up now.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,717,2017-03-30T08:16:45Z,2017-04-25T00:31:23Z,2017-05-11T16:08:55Z,MERGED,True,229,126,1,https://github.com/MichaelSweden,"Fix to handle OS disabled IPv6, issue #714.",2,['IPv6'],https://github.com/neutrinolabs/xrdp/pull/717,https://github.com/metalefty,7,https://github.com/neutrinolabs/xrdp/pull/717#issuecomment-296346602,"Changes made only in the os_calls.c file (keep the libcommon interface intact)
Exported functions changed: g_tcp_bind g_tcp_bind_address g_tcp_connect
Support three network configurations:

Normal network, with IPv6
Partly disabled IPv6 via sysctl.conf
Total disabled IPv6 via grub



Please see #714",@MichaelSweden No problem. I'm waiting for your fix.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,717,2017-03-30T08:16:45Z,2017-04-25T00:31:23Z,2017-05-11T16:08:55Z,MERGED,True,229,126,1,https://github.com/MichaelSweden,"Fix to handle OS disabled IPv6, issue #714.",2,['IPv6'],https://github.com/neutrinolabs/xrdp/pull/717,https://github.com/moobyfr,8,https://github.com/neutrinolabs/xrdp/pull/717#issuecomment-296357773,"Changes made only in the os_calls.c file (keep the libcommon interface intact)
Exported functions changed: g_tcp_bind g_tcp_bind_address g_tcp_connect
Support three network configurations:

Normal network, with IPv6
Partly disabled IPv6 via sysctl.conf
Total disabled IPv6 via grub



Please see #714","@MichaelSweden : just make another commit in your branch, and gitlab will add it into this pull request.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,717,2017-03-30T08:16:45Z,2017-04-25T00:31:23Z,2017-05-11T16:08:55Z,MERGED,True,229,126,1,https://github.com/MichaelSweden,"Fix to handle OS disabled IPv6, issue #714.",2,['IPv6'],https://github.com/neutrinolabs/xrdp/pull/717,https://github.com/MichaelSweden,9,https://github.com/neutrinolabs/xrdp/pull/717#issuecomment-296361717,"Changes made only in the os_calls.c file (keep the libcommon interface intact)
Exported functions changed: g_tcp_bind g_tcp_bind_address g_tcp_connect
Support three network configurations:

Normal network, with IPv6
Partly disabled IPv6 via sysctl.conf
Total disabled IPv6 via grub



Please see #714",Since the diff/system split the change in two. I show you this picture that more clearly show the change I did.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,717,2017-03-30T08:16:45Z,2017-04-25T00:31:23Z,2017-05-11T16:08:55Z,MERGED,True,229,126,1,https://github.com/MichaelSweden,"Fix to handle OS disabled IPv6, issue #714.",2,['IPv6'],https://github.com/neutrinolabs/xrdp/pull/717,https://github.com/metalefty,10,https://github.com/neutrinolabs/xrdp/pull/717#issuecomment-296502852,"Changes made only in the os_calls.c file (keep the libcommon interface intact)
Exported functions changed: g_tcp_bind g_tcp_bind_address g_tcp_connect
Support three network configurations:

Normal network, with IPv6
Partly disabled IPv6 via sysctl.conf
Total disabled IPv6 via grub



Please see #714",LGTM.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,724,2017-04-04T01:46:53Z,2017-04-06T00:29:17Z,2017-07-05T04:58:59Z,MERGED,True,4,1,1,https://github.com/metalefty,pulse: define default socket directory in Makefile,1,[],https://github.com/neutrinolabs/xrdp/pull/724,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/724,"The build should be integrated to xrdp and socket directory should be inherited from xrdp but let's apply workaround for the present.
This helps users such as #723.","The build should be integrated to xrdp and socket directory should be inherited from xrdp but let's apply workaround for the present.
This helps users such as #723.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,726,2017-04-04T10:17:25Z,2017-04-06T00:25:03Z,2017-07-05T05:00:39Z,MERGED,True,1,0,1,https://github.com/metalefty,sesman: LOGNAME should be set to username,1,[],https://github.com/neutrinolabs/xrdp/pull/726,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/726,"which is used to store login name. The login name shall be the string
that would be returned by the getlogin() function [1]. Some applications
only refers LOGNAME environment variable and don't fallback to other
variables such as USER.
Fixes #725.  Reported by @seidler2547.
[1] The Single UNIX Specification, Issue 7","which is used to store login name. The login name shall be the string
that would be returned by the getlogin() function [1]. Some applications
only refers LOGNAME environment variable and don't fallback to other
variables such as USER.
Fixes #725.  Reported by @seidler2547.
[1] The Single UNIX Specification, Issue 7",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,726,2017-04-04T10:17:25Z,2017-04-06T00:25:03Z,2017-07-05T05:00:39Z,MERGED,True,1,0,1,https://github.com/metalefty,sesman: LOGNAME should be set to username,1,[],https://github.com/neutrinolabs/xrdp/pull/726,https://github.com/jsorg71,2,https://github.com/neutrinolabs/xrdp/pull/726#issuecomment-291602494,"which is used to store login name. The login name shall be the string
that would be returned by the getlogin() function [1]. Some applications
only refers LOGNAME environment variable and don't fallback to other
variables such as USER.
Fixes #725.  Reported by @seidler2547.
[1] The Single UNIX Specification, Issue 7",+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,729,2017-04-06T14:44:23Z,,2017-05-12T22:34:19Z,OPEN,False,12,2,1,https://github.com/lieff,handle EINTR when using read()/write(),1,[],https://github.com/neutrinolabs/xrdp/pull/729,https://github.com/lieff,1,https://github.com/neutrinolabs/xrdp/pull/729,Code which uses g_file_read/g_file_write do not handle EINTR. To make code signal safe we need handle it within them.,Code which uses g_file_read/g_file_write do not handle EINTR. To make code signal safe we need handle it within them.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,729,2017-04-06T14:44:23Z,,2017-05-12T22:34:19Z,OPEN,False,12,2,1,https://github.com/lieff,handle EINTR when using read()/write(),1,[],https://github.com/neutrinolabs/xrdp/pull/729,https://github.com/speidy,2,https://github.com/neutrinolabs/xrdp/pull/729#issuecomment-292208521,Code which uses g_file_read/g_file_write do not handle EINTR. To make code signal safe we need handle it within them.,I think the caller should be responsible for the while loop. its just a wrapper.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,729,2017-04-06T14:44:23Z,,2017-05-12T22:34:19Z,OPEN,False,12,2,1,https://github.com/lieff,handle EINTR when using read()/write(),1,[],https://github.com/neutrinolabs/xrdp/pull/729,https://github.com/lieff,3,https://github.com/neutrinolabs/xrdp/pull/729#issuecomment-292212487,Code which uses g_file_read/g_file_write do not handle EINTR. To make code signal safe we need handle it within them.,"For now g_file_read/g_file_write callers do not handle EINTR/EAGAIN. I agree that EAGAIN should be handled by caller, but EINTR must be handled every time, so less code if it moved to wrapper.
Also here #728, @metalefty said that errors should be handled in g_file_read(), that’s why I made this PR.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,729,2017-04-06T14:44:23Z,,2017-05-12T22:34:19Z,OPEN,False,12,2,1,https://github.com/lieff,handle EINTR when using read()/write(),1,[],https://github.com/neutrinolabs/xrdp/pull/729,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/729#issuecomment-292372368,Code which uses g_file_read/g_file_write do not handle EINTR. To make code signal safe we need handle it within them.,It makes sense keepingg_file_read as a wrapper of read system call. What about making another function to wrap g_file_read and handle errors in the function?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,729,2017-04-06T14:44:23Z,,2017-05-12T22:34:19Z,OPEN,False,12,2,1,https://github.com/lieff,handle EINTR when using read()/write(),1,[],https://github.com/neutrinolabs/xrdp/pull/729,https://github.com/lieff,5,https://github.com/neutrinolabs/xrdp/pull/729#issuecomment-292488904,Code which uses g_file_read/g_file_write do not handle EINTR. To make code signal safe we need handle it within them.,"May be, but in some way it must be handled. I would have a case in web server where EINTR occurred even when we do not send any signals to process (may be some daemon do). So its real danger not to handle EINTR.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,729,2017-04-06T14:44:23Z,,2017-05-12T22:34:19Z,OPEN,False,12,2,1,https://github.com/lieff,handle EINTR when using read()/write(),1,[],https://github.com/neutrinolabs/xrdp/pull/729,https://github.com/metalefty,6,https://github.com/neutrinolabs/xrdp/pull/729#issuecomment-294382779,Code which uses g_file_read/g_file_write do not handle EINTR. To make code signal safe we need handle it within them.,@speidy What do you think of #729 (comment)?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,729,2017-04-06T14:44:23Z,,2017-05-12T22:34:19Z,OPEN,False,12,2,1,https://github.com/lieff,handle EINTR when using read()/write(),1,[],https://github.com/neutrinolabs/xrdp/pull/729,https://github.com/lieff,7,https://github.com/neutrinolabs/xrdp/pull/729#issuecomment-298225315,Code which uses g_file_read/g_file_write do not handle EINTR. To make code signal safe we need handle it within them.,Any update on it? I look how it handled in FreeRDP. It uses BIO_read functions from openssl winch handles EINTR and several other errors in BIO_fd_should_retry->BIO_fd_non_fatal_error. So I think it's normal to handle it in wrapper.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,729,2017-04-06T14:44:23Z,,2017-05-12T22:34:19Z,OPEN,False,12,2,1,https://github.com/lieff,handle EINTR when using read()/write(),1,[],https://github.com/neutrinolabs/xrdp/pull/729,https://github.com/metalefty,8,https://github.com/neutrinolabs/xrdp/pull/729#issuecomment-298265703,Code which uses g_file_read/g_file_write do not handle EINTR. To make code signal safe we need handle it within them.,I'll make some change based on your commit.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,729,2017-04-06T14:44:23Z,,2017-05-12T22:34:19Z,OPEN,False,12,2,1,https://github.com/lieff,handle EINTR when using read()/write(),1,[],https://github.com/neutrinolabs/xrdp/pull/729,https://github.com/metalefty,9,https://github.com/neutrinolabs/xrdp/pull/729#issuecomment-298270690,Code which uses g_file_read/g_file_write do not handle EINTR. To make code signal safe we need handle it within them.,"I'm now inclined to merge this as-is.
@jsorg71 @speidy @proski Any opinions?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,729,2017-04-06T14:44:23Z,,2017-05-12T22:34:19Z,OPEN,False,12,2,1,https://github.com/lieff,handle EINTR when using read()/write(),1,[],https://github.com/neutrinolabs/xrdp/pull/729,https://github.com/jsorg71,10,https://github.com/neutrinolabs/xrdp/pull/729#issuecomment-298292971,Code which uses g_file_read/g_file_write do not handle EINTR. To make code signal safe we need handle it within them.,These functions are for read and write to a file.  This has nothing to do with openssl read and write for the socket.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,729,2017-04-06T14:44:23Z,,2017-05-12T22:34:19Z,OPEN,False,12,2,1,https://github.com/lieff,handle EINTR when using read()/write(),1,[],https://github.com/neutrinolabs/xrdp/pull/729,https://github.com/metalefty,11,https://github.com/neutrinolabs/xrdp/pull/729#issuecomment-298302232,Code which uses g_file_read/g_file_write do not handle EINTR. To make code signal safe we need handle it within them.,"Yeah, read()/write() may cause EINTR error, it needs to be handled. This does that.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,729,2017-04-06T14:44:23Z,,2017-05-12T22:34:19Z,OPEN,False,12,2,1,https://github.com/lieff,handle EINTR when using read()/write(),1,[],https://github.com/neutrinolabs/xrdp/pull/729,https://github.com/lieff,12,https://github.com/neutrinolabs/xrdp/pull/729#issuecomment-298323057,Code which uses g_file_read/g_file_write do not handle EINTR. To make code signal safe we need handle it within them.,"BIO interface is universal, it supports regular files in bss_fd.c and bss_file.c. So, not a big difference about wrapper discussion. About why it helps #728, seems file IO error somewhere leads to something that reflects on ssl stream handling.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,729,2017-04-06T14:44:23Z,,2017-05-12T22:34:19Z,OPEN,False,12,2,1,https://github.com/lieff,handle EINTR when using read()/write(),1,[],https://github.com/neutrinolabs/xrdp/pull/729,https://github.com/metalefty,13,https://github.com/neutrinolabs/xrdp/pull/729#issuecomment-300656465,Code which uses g_file_read/g_file_write do not handle EINTR. To make code signal safe we need handle it within them.,"@jsorg71 said in #728

I think we can also merge the EINTR fix. It does not make anything worse. As a rule we can handle EINTR in os_calls.c for all the functions that can return it. We can not handle EAGAIN(and the like) in os_calls.c as the higher levels are expecting them.

@jsorg71 it's OK for you  to merge this as-is?
speidy wants to keep g_file_read()/g_file_write() as a simple wrapper of read()/write().
Handling EINTR in another wrapper wrapper is also an option.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,729,2017-04-06T14:44:23Z,,2017-05-12T22:34:19Z,OPEN,False,12,2,1,https://github.com/lieff,handle EINTR when using read()/write(),1,[],https://github.com/neutrinolabs/xrdp/pull/729,https://github.com/lieff,14,https://github.com/neutrinolabs/xrdp/pull/729#issuecomment-300724187,Code which uses g_file_read/g_file_write do not handle EINTR. To make code signal safe we need handle it within them.,"Note that there can be more places without handled EINTR, not only for read()\write() for example, but for other syscalls like open(). Closer look needed.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,729,2017-04-06T14:44:23Z,,2017-05-12T22:34:19Z,OPEN,False,12,2,1,https://github.com/lieff,handle EINTR when using read()/write(),1,[],https://github.com/neutrinolabs/xrdp/pull/729,https://github.com/jsorg71,15,https://github.com/neutrinolabs/xrdp/pull/729#issuecomment-300911105,Code which uses g_file_read/g_file_write do not handle EINTR. To make code signal safe we need handle it within them.,"One example of how handling EINTR in os_calls.c can be undesired is if a file read is blocking forever and someone sends a term signal to xrdp.  Currently, the read would break, that thread loop would go around, see that is_term is set, and process would exit.  If we handle EINTR is os_calls.c, xrdp would not close down when receiving the term signal until the read is done, which might be never.
Of course, file read should never block that long.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,729,2017-04-06T14:44:23Z,,2017-05-12T22:34:19Z,OPEN,False,12,2,1,https://github.com/lieff,handle EINTR when using read()/write(),1,[],https://github.com/neutrinolabs/xrdp/pull/729,https://github.com/cro,16,https://github.com/neutrinolabs/xrdp/pull/729#issuecomment-300912456,Code which uses g_file_read/g_file_write do not handle EINTR. To make code signal safe we need handle it within them.,coughNFScough,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,729,2017-04-06T14:44:23Z,,2017-05-12T22:34:19Z,OPEN,False,12,2,1,https://github.com/lieff,handle EINTR when using read()/write(),1,[],https://github.com/neutrinolabs/xrdp/pull/729,https://github.com/lieff,17,https://github.com/neutrinolabs/xrdp/pull/729#issuecomment-301200335,Code which uses g_file_read/g_file_write do not handle EINTR. To make code signal safe we need handle it within them.,"Yes, its a problem. For correct SIGTERM we must handle EINTR in every use place and make correct thread shutdown chain. Or possible solution for this is to handle SIGTERM in main thread (and do not use blocking calls from it), and handle possible ""unclean"" shutdown of stuck threads (or create separate watchdog thread, so main thread can use blocking IO). Btw openssl BIO stuck forever too in this case, so, it may stuck in 3rd party libs anyway.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,732,2017-04-18T02:16:23Z,2017-05-09T07:27:12Z,2017-09-28T05:18:58Z,CLOSED,False,4,1,1,https://github.com/metalefty,pulse: define default socket directory in Makefile,1,[],https://github.com/neutrinolabs/xrdp/pull/732,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/732,Is it OK to ship this to v0.9 branch? It includes a build fix.,Is it OK to ship this to v0.9 branch? It includes a build fix.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,732,2017-04-18T02:16:23Z,2017-05-09T07:27:12Z,2017-09-28T05:18:58Z,CLOSED,False,4,1,1,https://github.com/metalefty,pulse: define default socket directory in Makefile,1,[],https://github.com/neutrinolabs/xrdp/pull/732,https://github.com/proski,2,https://github.com/neutrinolabs/xrdp/pull/732#issuecomment-295472107,Is it OK to ship this to v0.9 branch? It includes a build fix.,"Would it be possible to generate sesman/chansrv/pulse/Makefile from sesman/chansrv/pulse/Makefile.in if we cannot use Automake in that directory?
Also, would it be possible to read the socket directory from an environment variable and fall back to the configure default? Mismatching socket directory can lead to hard to diagnose issues.
I agree that build fixes should be merged to the stable branch. But let's make sure we have a solid fix.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,732,2017-04-18T02:16:23Z,2017-05-09T07:27:12Z,2017-09-28T05:18:58Z,CLOSED,False,4,1,1,https://github.com/metalefty,pulse: define default socket directory in Makefile,1,[],https://github.com/neutrinolabs/xrdp/pull/732,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/732#issuecomment-295496154,Is it OK to ship this to v0.9 branch? It includes a build fix.,"OK, let's make a solid fix.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,732,2017-04-18T02:16:23Z,2017-05-09T07:27:12Z,2017-09-28T05:18:58Z,CLOSED,False,4,1,1,https://github.com/metalefty,pulse: define default socket directory in Makefile,1,[],https://github.com/neutrinolabs/xrdp/pull/732,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/732#issuecomment-300083752,Is it OK to ship this to v0.9 branch? It includes a build fix.,Can be replaced by #743.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,741,2017-05-06T08:04:14Z,2017-05-09T07:26:39Z,2017-05-09T07:26:39Z,MERGED,True,37,31,1,https://github.com/ftake,startwm.sh: do not call pseudo shell code for /etc/X11/xdm/Xsession,1,[],https://github.com/neutrinolabs/xrdp/pull/741,https://github.com/ftake,1,https://github.com/neutrinolabs/xrdp/pull/741,"Since /etc/X11/xdm/Xsession calls user's login shell, startwm.sh
should not execute the psuedo code; It causes to execute
~/.profile twice.","Since /etc/X11/xdm/Xsession calls user's login shell, startwm.sh
should not execute the psuedo code; It causes to execute
~/.profile twice.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,741,2017-05-06T08:04:14Z,2017-05-09T07:26:39Z,2017-05-09T07:26:39Z,MERGED,True,37,31,1,https://github.com/ftake,startwm.sh: do not call pseudo shell code for /etc/X11/xdm/Xsession,1,[],https://github.com/neutrinolabs/xrdp/pull/741,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/741#issuecomment-300022513,"Since /etc/X11/xdm/Xsession calls user's login shell, startwm.sh
should not execute the psuedo code; It causes to execute
~/.profile twice.","If no objections, I'll merge this within 24 hours.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,742,2017-05-06T10:32:17Z,2017-05-09T07:56:48Z,2017-05-09T07:56:48Z,CLOSED,False,1,0,1,https://github.com/vincentkersten,Created PID folder before starting the daemon,1,['invalid'],https://github.com/neutrinolabs/xrdp/pull/742,https://github.com/vincentkersten,1,https://github.com/neutrinolabs/xrdp/pull/742,This is needed for Debian at least.,This is needed for Debian at least.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,742,2017-05-06T10:32:17Z,2017-05-09T07:56:48Z,2017-05-09T07:56:48Z,CLOSED,False,1,0,1,https://github.com/vincentkersten,Created PID folder before starting the daemon,1,['invalid'],https://github.com/neutrinolabs/xrdp/pull/742,https://github.com/Natureshadow,2,https://github.com/neutrinolabs/xrdp/pull/742#issuecomment-299630904,This is needed for Debian at least.,"This is needed for Debian at least.
We already have this fix in Debian...

If you have an issue with the Debian package, why don't you talk to the Debian maintainer?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,742,2017-05-06T10:32:17Z,2017-05-09T07:56:48Z,2017-05-09T07:56:48Z,CLOSED,False,1,0,1,https://github.com/vincentkersten,Created PID folder before starting the daemon,1,['invalid'],https://github.com/neutrinolabs/xrdp/pull/742,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/742#issuecomment-299752883,This is needed for Debian at least.,"This doesn't make sense to me. There's no reason to create /var/run/xrdp directory.  PID directory is not /var/run/xrdp but /var/run because PIDFile is set to /var/run/xrdp-sesman.pid. See 3 lines above the line you changed.
Probably you should talk to @Natureshadow or other Debian maintainers.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,743,2017-05-09T07:17:41Z,2017-05-16T01:41:08Z,2017-05-16T01:41:11Z,MERGED,True,36,12,6,https://github.com/metalefty,make audio sockets path configurable,4,[],https://github.com/neutrinolabs/xrdp/pull/743,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/743,"pass xrdp socket path to user session (chansrv) via environment variable
respect XRDP_SOCKET_PATH environment variable
other minor changes

I confirmed this properly works with non-default socket directory. Compiled --with-socket-dir=/tmp/.xrdp2 option. If this is OK to merge, let's ship this to v0.9 branch too.","pass xrdp socket path to user session (chansrv) via environment variable
respect XRDP_SOCKET_PATH environment variable
other minor changes

I confirmed this properly works with non-default socket directory. Compiled --with-socket-dir=/tmp/.xrdp2 option. If this is OK to merge, let's ship this to v0.9 branch too.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,743,2017-05-09T07:17:41Z,2017-05-16T01:41:08Z,2017-05-16T01:41:11Z,MERGED,True,36,12,6,https://github.com/metalefty,make audio sockets path configurable,4,[],https://github.com/neutrinolabs/xrdp/pull/743,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/743#issuecomment-301357481,"pass xrdp socket path to user session (chansrv) via environment variable
respect XRDP_SOCKET_PATH environment variable
other minor changes

I confirmed this properly works with non-default socket directory. Compiled --with-socket-dir=/tmp/.xrdp2 option. If this is OK to merge, let's ship this to v0.9 branch too.","Any opinions? If no objections, I'll merge this in 24 hours.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,745,2017-05-09T07:33:41Z,2017-05-12T02:41:20Z,2017-05-12T02:41:20Z,MERGED,True,1,0,1,https://github.com/metalefty,sesman: LOGNAME should be set to username (v0.9),1,[],https://github.com/neutrinolabs/xrdp/pull/745,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/745,"which is used to store login name. The login name shall be the string
that would be returned by the getlogin() function [1]. Some applications
only refers LOGNAME environment variable and don't fallback to other
variables such as USER.
Fixes #725.  Reported by @seidler2547.
[1] The Single UNIX Specification, Issue 7

I think this should be shipped to v0.9 stable branch.","which is used to store login name. The login name shall be the string
that would be returned by the getlogin() function [1]. Some applications
only refers LOGNAME environment variable and don't fallback to other
variables such as USER.
Fixes #725.  Reported by @seidler2547.
[1] The Single UNIX Specification, Issue 7

I think this should be shipped to v0.9 stable branch.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,745,2017-05-09T07:33:41Z,2017-05-12T02:41:20Z,2017-05-12T02:41:20Z,MERGED,True,1,0,1,https://github.com/metalefty,sesman: LOGNAME should be set to username (v0.9),1,[],https://github.com/neutrinolabs/xrdp/pull/745,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/745#issuecomment-300969010,"which is used to store login name. The login name shall be the string
that would be returned by the getlogin() function [1]. Some applications
only refers LOGNAME environment variable and don't fallback to other
variables such as USER.
Fixes #725.  Reported by @seidler2547.
[1] The Single UNIX Specification, Issue 7

I think this should be shipped to v0.9 stable branch.","This causes nothing worse, merging.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,746,2017-05-09T07:55:59Z,2017-05-26T02:04:39Z,2017-05-26T02:04:44Z,MERGED,True,36,9,6,https://github.com/metalefty,make audio sockets path configurable (v0.9),4,[],https://github.com/neutrinolabs/xrdp/pull/746,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/746,"#743 for v0.9 branch
Please don't merge this until #743 merged!","#743 for v0.9 branch
Please don't merge this until #743 merged!",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,747,2017-05-09T20:09:17Z,2017-05-10T21:56:21Z,2017-08-22T00:12:56Z,MERGED,True,9,1,1,https://github.com/jsorg71,common: ssl_tls_write / read return 0 on socket close,2,[],https://github.com/neutrinolabs/xrdp/pull/747,https://github.com/jsorg71,1,https://github.com/neutrinolabs/xrdp/pull/747,"The non TLS send / recv return 0 on socket close, tls_read / write should too.","The non TLS send / recv return 0 on socket close, tls_read / write should too.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,747,2017-05-09T20:09:17Z,2017-05-10T21:56:21Z,2017-08-22T00:12:56Z,MERGED,True,9,1,1,https://github.com/jsorg71,common: ssl_tls_write / read return 0 on socket close,2,[],https://github.com/neutrinolabs/xrdp/pull/747,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/747#issuecomment-300345119,"The non TLS send / recv return 0 on socket close, tls_read / write should too.",+1 Looks good to me.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,747,2017-05-09T20:09:17Z,2017-05-10T21:56:21Z,2017-08-22T00:12:56Z,MERGED,True,9,1,1,https://github.com/jsorg71,common: ssl_tls_write / read return 0 on socket close,2,[],https://github.com/neutrinolabs/xrdp/pull/747,https://github.com/jsorg71,3,https://github.com/neutrinolabs/xrdp/pull/747#issuecomment-300599988,"The non TLS send / recv return 0 on socket close, tls_read / write should too.","I think the problem was this while loop
https://github.com/neutrinolabs/xrdp/blob/devel/common/ssl_calls.c#L681-L696
SSL_shutdown is always failing.
Looking at the documentation, we should only need to call it twice, at most.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,749,2017-05-15T06:18:00Z,2017-06-20T04:40:06Z,2017-06-20T04:40:09Z,MERGED,True,5,1,2,https://github.com/metalefty,sesman: install empty reconnectwm.sh as a template,1,[],https://github.com/neutrinolabs/xrdp/pull/749,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/749,"as it was undocumented and few people know reconnectwm.sh is executed on
client reconnect. The behaviour of startwm.sh / reconnectwm.sh  should
be documented. This is a first step of documenting them.","as it was undocumented and few people know reconnectwm.sh is executed on
client reconnect. The behaviour of startwm.sh / reconnectwm.sh  should
be documented. This is a first step of documenting them.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,751,2017-05-16T08:40:31Z,2017-05-23T02:26:52Z,2018-12-14T01:46:11Z,MERGED,True,2,2,1,https://github.com/metalefty,configure: fix confusing help text about painter and librfxcodec,1,[],https://github.com/neutrinolabs/xrdp/pull/751,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/751,"painter and librfxcodec are enabled by default. --disable-* options
disables them.
Before:
--disable-painter       Use included painter library (default: yes)
--disable-rfxcodec      Use included librfxcodec library (default: yes)
After:
--disable-painter       Do not use included painter library (default: no)
--disable-rfxcodec      Do not use included librfxcodec library (default:
no)

CC: @proski","painter and librfxcodec are enabled by default. --disable-* options
disables them.
Before:
--disable-painter       Use included painter library (default: yes)
--disable-rfxcodec      Use included librfxcodec library (default: yes)
After:
--disable-painter       Do not use included painter library (default: no)
--disable-rfxcodec      Do not use included librfxcodec library (default:
no)

CC: @proski",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,753,2017-05-17T09:02:09Z,2017-06-20T05:29:03Z,2017-06-20T05:29:06Z,MERGED,True,134,7,4,https://github.com/metalefty,exit with failure status if port already in use,5,[],https://github.com/neutrinolabs/xrdp/pull/753,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/753,"Pointed out by @cocoon in #644.
xrdp and xrdp-sesman should exit with failure status if 3389/tcp or 3350/tcp port is already in use.
Before this fix, as described in #644, systemd start xrdp does not show any errors when daemon failed to start due to port already in use.  xrdp and xrdp-sesman executed in foreground should exit with failure status as well.
Tested on FreeBSD 11-STABLE and CentOS 7.  I describe test procedure on CentOS 7.
Use X11RDP-RH-Matic to build xrdp.
First of all, install xrdp from my branch.
$ GH_ACCOUNT=metalefty GH_BRANCH=error-used-port ./X11RDP-RH-Matic.sh --nox11rdp

Make 3389/tcp in use by another process.
$ nc -l 3389 &
$ netstat -an | egrep ""3389|3350""
tcp        0      0 0.0.0.0:3389            0.0.0.0:*               LISTEN
tcp6       0      0 :::3389                 :::*                    LISTEN

xrdp in foreground mode exits with return status 1.
$  sudo xrdp -ns ; echo $?
[20170517-07:58:18] [ERROR] g_tcp_bind(11, 3389) failed bind IPv6 (errno=98) and IPv4 (errno=22).
[20170517-07:58:18] [ERROR] xrdp_listen_main_loop: listen error, possible port already in use
[20170517-07:58:18] [DEBUG] Closed socket 11 (AF_INET6 :: port 0)
[20170517-07:58:18] [CORE ] shutting down log subsystem...
1

xrdp in daemon mode exits with return status 1 as well.
$ sudo xrdp ; echo $?
[20170517-08:01:07] [DEBUG] Testing if xrdp can listen on 0.0.0.0 port 3389.
[20170517-08:01:07] [ERROR] g_tcp_bind(7, 3389) failed bind IPv6 (errno=98) and IPv4 (errno=22).
[20170517-08:01:07] [DEBUG] Closed socket 7 (AF_INET6 :: port 0)
[20170517-08:01:07] [ERROR] Failed to start xrdp daemon, possibly address already in use.
1

Starting xrdp daemon by systemd shows
$ sudo systemctl start xrdp
Job for xrdp.service canceled.
$ LANG=C systemctl status xrdp.service -l
* xrdp.service - xrdp daemon
   Loaded: loaded (/usr/lib/systemd/system/xrdp.service; disabled; vendor preset: disabled)
   Active: failed (Result: exit-code) since Wed 2017-05-17 08:56:31 UTC; 2s ago
     Docs: man:xrdp(8)
           man:xrdp.ini(5)
  Process: 565 ExecStart=/usr/sbin/xrdp $XRDP_OPTIONS (code=exited, status=1/FAILURE)
 Main PID: 537 (code=exited, status=0/SUCCESS)

Before this fix, systemctl status shows like this when 3389/tcp is already in use.
$ LANG=C systemctl status xrdp.service -l
* xrdp.service - xrdp daemon
   Loaded: loaded (/usr/lib/systemd/system/xrdp.service; disabled; vendor preset: disabled)
   Active: inactive (dead)
     Docs: man:xrdp(8)
           man:xrdp.ini(5)

sesman can be tested with this procedure in case 3350/tcp is already in use.
$ killall nc 
$ nc -l 3350 &
$ sudo xrdp-sesman
$ sudo xrdp-sesman -ns
$ sudo systemctl start xrdp
$ sudo systemctl start xrdp-sesman","Pointed out by @cocoon in #644.
xrdp and xrdp-sesman should exit with failure status if 3389/tcp or 3350/tcp port is already in use.
Before this fix, as described in #644, systemd start xrdp does not show any errors when daemon failed to start due to port already in use.  xrdp and xrdp-sesman executed in foreground should exit with failure status as well.
Tested on FreeBSD 11-STABLE and CentOS 7.  I describe test procedure on CentOS 7.
Use X11RDP-RH-Matic to build xrdp.
First of all, install xrdp from my branch.
$ GH_ACCOUNT=metalefty GH_BRANCH=error-used-port ./X11RDP-RH-Matic.sh --nox11rdp

Make 3389/tcp in use by another process.
$ nc -l 3389 &
$ netstat -an | egrep ""3389|3350""
tcp        0      0 0.0.0.0:3389            0.0.0.0:*               LISTEN
tcp6       0      0 :::3389                 :::*                    LISTEN

xrdp in foreground mode exits with return status 1.
$  sudo xrdp -ns ; echo $?
[20170517-07:58:18] [ERROR] g_tcp_bind(11, 3389) failed bind IPv6 (errno=98) and IPv4 (errno=22).
[20170517-07:58:18] [ERROR] xrdp_listen_main_loop: listen error, possible port already in use
[20170517-07:58:18] [DEBUG] Closed socket 11 (AF_INET6 :: port 0)
[20170517-07:58:18] [CORE ] shutting down log subsystem...
1

xrdp in daemon mode exits with return status 1 as well.
$ sudo xrdp ; echo $?
[20170517-08:01:07] [DEBUG] Testing if xrdp can listen on 0.0.0.0 port 3389.
[20170517-08:01:07] [ERROR] g_tcp_bind(7, 3389) failed bind IPv6 (errno=98) and IPv4 (errno=22).
[20170517-08:01:07] [DEBUG] Closed socket 7 (AF_INET6 :: port 0)
[20170517-08:01:07] [ERROR] Failed to start xrdp daemon, possibly address already in use.
1

Starting xrdp daemon by systemd shows
$ sudo systemctl start xrdp
Job for xrdp.service canceled.
$ LANG=C systemctl status xrdp.service -l
* xrdp.service - xrdp daemon
   Loaded: loaded (/usr/lib/systemd/system/xrdp.service; disabled; vendor preset: disabled)
   Active: failed (Result: exit-code) since Wed 2017-05-17 08:56:31 UTC; 2s ago
     Docs: man:xrdp(8)
           man:xrdp.ini(5)
  Process: 565 ExecStart=/usr/sbin/xrdp $XRDP_OPTIONS (code=exited, status=1/FAILURE)
 Main PID: 537 (code=exited, status=0/SUCCESS)

Before this fix, systemctl status shows like this when 3389/tcp is already in use.
$ LANG=C systemctl status xrdp.service -l
* xrdp.service - xrdp daemon
   Loaded: loaded (/usr/lib/systemd/system/xrdp.service; disabled; vendor preset: disabled)
   Active: inactive (dead)
     Docs: man:xrdp(8)
           man:xrdp.ini(5)

sesman can be tested with this procedure in case 3350/tcp is already in use.
$ killall nc 
$ nc -l 3350 &
$ sudo xrdp-sesman
$ sudo xrdp-sesman -ns
$ sudo systemctl start xrdp
$ sudo systemctl start xrdp-sesman",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,753,2017-05-17T09:02:09Z,2017-06-20T05:29:03Z,2017-06-20T05:29:06Z,MERGED,True,134,7,4,https://github.com/metalefty,exit with failure status if port already in use,5,[],https://github.com/neutrinolabs/xrdp/pull/753,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/753#issuecomment-307271014,"Pointed out by @cocoon in #644.
xrdp and xrdp-sesman should exit with failure status if 3389/tcp or 3350/tcp port is already in use.
Before this fix, as described in #644, systemd start xrdp does not show any errors when daemon failed to start due to port already in use.  xrdp and xrdp-sesman executed in foreground should exit with failure status as well.
Tested on FreeBSD 11-STABLE and CentOS 7.  I describe test procedure on CentOS 7.
Use X11RDP-RH-Matic to build xrdp.
First of all, install xrdp from my branch.
$ GH_ACCOUNT=metalefty GH_BRANCH=error-used-port ./X11RDP-RH-Matic.sh --nox11rdp

Make 3389/tcp in use by another process.
$ nc -l 3389 &
$ netstat -an | egrep ""3389|3350""
tcp        0      0 0.0.0.0:3389            0.0.0.0:*               LISTEN
tcp6       0      0 :::3389                 :::*                    LISTEN

xrdp in foreground mode exits with return status 1.
$  sudo xrdp -ns ; echo $?
[20170517-07:58:18] [ERROR] g_tcp_bind(11, 3389) failed bind IPv6 (errno=98) and IPv4 (errno=22).
[20170517-07:58:18] [ERROR] xrdp_listen_main_loop: listen error, possible port already in use
[20170517-07:58:18] [DEBUG] Closed socket 11 (AF_INET6 :: port 0)
[20170517-07:58:18] [CORE ] shutting down log subsystem...
1

xrdp in daemon mode exits with return status 1 as well.
$ sudo xrdp ; echo $?
[20170517-08:01:07] [DEBUG] Testing if xrdp can listen on 0.0.0.0 port 3389.
[20170517-08:01:07] [ERROR] g_tcp_bind(7, 3389) failed bind IPv6 (errno=98) and IPv4 (errno=22).
[20170517-08:01:07] [DEBUG] Closed socket 7 (AF_INET6 :: port 0)
[20170517-08:01:07] [ERROR] Failed to start xrdp daemon, possibly address already in use.
1

Starting xrdp daemon by systemd shows
$ sudo systemctl start xrdp
Job for xrdp.service canceled.
$ LANG=C systemctl status xrdp.service -l
* xrdp.service - xrdp daemon
   Loaded: loaded (/usr/lib/systemd/system/xrdp.service; disabled; vendor preset: disabled)
   Active: failed (Result: exit-code) since Wed 2017-05-17 08:56:31 UTC; 2s ago
     Docs: man:xrdp(8)
           man:xrdp.ini(5)
  Process: 565 ExecStart=/usr/sbin/xrdp $XRDP_OPTIONS (code=exited, status=1/FAILURE)
 Main PID: 537 (code=exited, status=0/SUCCESS)

Before this fix, systemctl status shows like this when 3389/tcp is already in use.
$ LANG=C systemctl status xrdp.service -l
* xrdp.service - xrdp daemon
   Loaded: loaded (/usr/lib/systemd/system/xrdp.service; disabled; vendor preset: disabled)
   Active: inactive (dead)
     Docs: man:xrdp(8)
           man:xrdp.ini(5)

sesman can be tested with this procedure in case 3350/tcp is already in use.
$ killall nc 
$ nc -l 3350 &
$ sudo xrdp-sesman
$ sudo xrdp-sesman -ns
$ sudo systemctl start xrdp
$ sudo systemctl start xrdp-sesman",@jsorg71 @speidy I'd appreciate if you look at this.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,753,2017-05-17T09:02:09Z,2017-06-20T05:29:03Z,2017-06-20T05:29:06Z,MERGED,True,134,7,4,https://github.com/metalefty,exit with failure status if port already in use,5,[],https://github.com/neutrinolabs/xrdp/pull/753,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/753#issuecomment-309648700,"Pointed out by @cocoon in #644.
xrdp and xrdp-sesman should exit with failure status if 3389/tcp or 3350/tcp port is already in use.
Before this fix, as described in #644, systemd start xrdp does not show any errors when daemon failed to start due to port already in use.  xrdp and xrdp-sesman executed in foreground should exit with failure status as well.
Tested on FreeBSD 11-STABLE and CentOS 7.  I describe test procedure on CentOS 7.
Use X11RDP-RH-Matic to build xrdp.
First of all, install xrdp from my branch.
$ GH_ACCOUNT=metalefty GH_BRANCH=error-used-port ./X11RDP-RH-Matic.sh --nox11rdp

Make 3389/tcp in use by another process.
$ nc -l 3389 &
$ netstat -an | egrep ""3389|3350""
tcp        0      0 0.0.0.0:3389            0.0.0.0:*               LISTEN
tcp6       0      0 :::3389                 :::*                    LISTEN

xrdp in foreground mode exits with return status 1.
$  sudo xrdp -ns ; echo $?
[20170517-07:58:18] [ERROR] g_tcp_bind(11, 3389) failed bind IPv6 (errno=98) and IPv4 (errno=22).
[20170517-07:58:18] [ERROR] xrdp_listen_main_loop: listen error, possible port already in use
[20170517-07:58:18] [DEBUG] Closed socket 11 (AF_INET6 :: port 0)
[20170517-07:58:18] [CORE ] shutting down log subsystem...
1

xrdp in daemon mode exits with return status 1 as well.
$ sudo xrdp ; echo $?
[20170517-08:01:07] [DEBUG] Testing if xrdp can listen on 0.0.0.0 port 3389.
[20170517-08:01:07] [ERROR] g_tcp_bind(7, 3389) failed bind IPv6 (errno=98) and IPv4 (errno=22).
[20170517-08:01:07] [DEBUG] Closed socket 7 (AF_INET6 :: port 0)
[20170517-08:01:07] [ERROR] Failed to start xrdp daemon, possibly address already in use.
1

Starting xrdp daemon by systemd shows
$ sudo systemctl start xrdp
Job for xrdp.service canceled.
$ LANG=C systemctl status xrdp.service -l
* xrdp.service - xrdp daemon
   Loaded: loaded (/usr/lib/systemd/system/xrdp.service; disabled; vendor preset: disabled)
   Active: failed (Result: exit-code) since Wed 2017-05-17 08:56:31 UTC; 2s ago
     Docs: man:xrdp(8)
           man:xrdp.ini(5)
  Process: 565 ExecStart=/usr/sbin/xrdp $XRDP_OPTIONS (code=exited, status=1/FAILURE)
 Main PID: 537 (code=exited, status=0/SUCCESS)

Before this fix, systemctl status shows like this when 3389/tcp is already in use.
$ LANG=C systemctl status xrdp.service -l
* xrdp.service - xrdp daemon
   Loaded: loaded (/usr/lib/systemd/system/xrdp.service; disabled; vendor preset: disabled)
   Active: inactive (dead)
     Docs: man:xrdp(8)
           man:xrdp.ini(5)

sesman can be tested with this procedure in case 3350/tcp is already in use.
$ killall nc 
$ nc -l 3350 &
$ sudo xrdp-sesman
$ sudo xrdp-sesman -ns
$ sudo systemctl start xrdp
$ sudo systemctl start xrdp-sesman","Tested by me and @cocoon. No problem for me for more than one month, merging.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,758,2017-05-23T09:56:44Z,2017-06-07T05:08:27Z,2017-06-07T05:08:31Z,MERGED,True,43,25,1,https://github.com/metalefty,Pick up the first section if given section(domain) doesn't match anything,1,[],https://github.com/neutrinolabs/xrdp/pull/758,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/758,"As some clinents (AFAIK Windows 10) always send domain name, the backend
module is not selected properly. This causes the default usage with
Windows 10 fails with 'xrdp_wm_log_msg: Section ""XXX"" not configured'.","As some clinents (AFAIK Windows 10) always send domain name, the backend
module is not selected properly. This causes the default usage with
Windows 10 fails with 'xrdp_wm_log_msg: Section ""XXX"" not configured'.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,758,2017-05-23T09:56:44Z,2017-06-07T05:08:27Z,2017-06-07T05:08:31Z,MERGED,True,43,25,1,https://github.com/metalefty,Pick up the first section if given section(domain) doesn't match anything,1,[],https://github.com/neutrinolabs/xrdp/pull/758,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/758#issuecomment-304554164,"As some clinents (AFAIK Windows 10) always send domain name, the backend
module is not selected properly. This causes the default usage with
Windows 10 fails with 'xrdp_wm_log_msg: Section ""XXX"" not configured'.",@jsorg71 Is there any reason to fail if the domain name given by client doesn't match any xrdp's session type?  I think fallback is more user friendly. Do you mind if I change the behaviour?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,758,2017-05-23T09:56:44Z,2017-06-07T05:08:27Z,2017-06-07T05:08:31Z,MERGED,True,43,25,1,https://github.com/metalefty,Pick up the first section if given section(domain) doesn't match anything,1,[],https://github.com/neutrinolabs/xrdp/pull/758,https://github.com/speidy,3,https://github.com/neutrinolabs/xrdp/pull/758#issuecomment-304574894,"As some clinents (AFAIK Windows 10) always send domain name, the backend
module is not selected properly. This causes the default usage with
Windows 10 fails with 'xrdp_wm_log_msg: Section ""XXX"" not configured'.","On Mon, May 29, 2017 at 4:27 AM metalefty ***@***.***> wrote:
 @jsorg71 <https://github.com/jsorg71> Is there any reason to fail if the
 domain name given by client doesn't match any xrdp's session type? I think
 fallback is more user friendly. Do you mind if I change the behaviour?

 I like that.
 —
 You are receiving this because you are subscribed to this thread.
 Reply to this email directly, view it on GitHub
 <#758 (comment)>,
 or mute the thread
 <https://github.com/notifications/unsubscribe-auth/ADTH1DC4cMGqlC2SVKZqFukwZgqzIy_Iks5r-h7_gaJpZM4Njc8S>
 .

-- 
Idan Freiberg Mobile: +972-52-2925213",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,758,2017-05-23T09:56:44Z,2017-06-07T05:08:27Z,2017-06-07T05:08:31Z,MERGED,True,43,25,1,https://github.com/metalefty,Pick up the first section if given section(domain) doesn't match anything,1,[],https://github.com/neutrinolabs/xrdp/pull/758,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/758#issuecomment-304620366,"As some clinents (AFAIK Windows 10) always send domain name, the backend
module is not selected properly. This causes the default usage with
Windows 10 fails with 'xrdp_wm_log_msg: Section ""XXX"" not configured'.","Thanks, speidy. If no problem with quality of  my code, let's merge.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,758,2017-05-23T09:56:44Z,2017-06-07T05:08:27Z,2017-06-07T05:08:31Z,MERGED,True,43,25,1,https://github.com/metalefty,Pick up the first section if given section(domain) doesn't match anything,1,[],https://github.com/neutrinolabs/xrdp/pull/758,https://github.com/metalefty,5,https://github.com/neutrinolabs/xrdp/pull/758#issuecomment-306365662,"As some clinents (AFAIK Windows 10) always send domain name, the backend
module is not selected properly. This causes the default usage with
Windows 10 fails with 'xrdp_wm_log_msg: Section ""XXX"" not configured'.","If no objections, I'll merge this within 24 hours.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,759,2017-05-24T09:08:36Z,2017-05-31T07:27:24Z,2017-05-31T07:27:29Z,MERGED,True,56,35,5,https://github.com/metalefty,instfiles: substitute directories in systemd service files,2,[],https://github.com/neutrinolabs/xrdp/pull/759,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/759,"Do not expect prefix is always /usr. /usr/local is ofen used when users
compile xrdp manually.
Fixes #757.","Do not expect prefix is always /usr. /usr/local is ofen used when users
compile xrdp manually.
Fixes #757.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,759,2017-05-24T09:08:36Z,2017-05-31T07:27:24Z,2017-05-31T07:27:29Z,MERGED,True,56,35,5,https://github.com/metalefty,instfiles: substitute directories in systemd service files,2,[],https://github.com/neutrinolabs/xrdp/pull/759,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/759#issuecomment-303665381,"Do not expect prefix is always /usr. /usr/local is ofen used when users
compile xrdp manually.
Fixes #757.",@proski I've made this fix based on your work on docs/man. Can you review?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,759,2017-05-24T09:08:36Z,2017-05-31T07:27:24Z,2017-05-31T07:27:29Z,MERGED,True,56,35,5,https://github.com/metalefty,instfiles: substitute directories in systemd service files,2,[],https://github.com/neutrinolabs/xrdp/pull/759,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/759#issuecomment-305108171,"Do not expect prefix is always /usr. /usr/local is ofen used when users
compile xrdp manually.
Fixes #757.","I did further test. It seems working fine, merging.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,762,2017-05-26T05:49:16Z,2017-05-26T08:10:25Z,2017-05-26T08:10:29Z,MERGED,True,41,25,1,https://github.com/metalefty,Fix ssl_calls for OpenSSL 1.1.0,1,['compiling'],https://github.com/neutrinolabs/xrdp/pull/762,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/762,Backport of #459. This should close #739.,Backport of #459. This should close #739.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,762,2017-05-26T05:49:16Z,2017-05-26T08:10:25Z,2017-05-26T08:10:29Z,MERGED,True,41,25,1,https://github.com/metalefty,Fix ssl_calls for OpenSSL 1.1.0,1,['compiling'],https://github.com/neutrinolabs/xrdp/pull/762,https://github.com/nouman8,2,https://github.com/neutrinolabs/xrdp/pull/762#issuecomment-304214208,Backport of #459. This should close #739.,"I can now compile xrdp 0.6.2 successfully with #762
Thanks!!!",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,766,2017-06-05T09:33:55Z,2017-06-06T01:04:49Z,2017-06-06T01:18:25Z,MERGED,True,10,1,2,https://github.com/metalefty,Constify MCS connectionType,1,[],https://github.com/neutrinolabs/xrdp/pull/766,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/766,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,766,2017-06-05T09:33:55Z,2017-06-06T01:04:49Z,2017-06-06T01:18:25Z,MERGED,True,10,1,2,https://github.com/metalefty,Constify MCS connectionType,1,[],https://github.com/neutrinolabs/xrdp/pull/766,https://github.com/jsorg71,2,https://github.com/neutrinolabs/xrdp/pull/766#issuecomment-306244596,,+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,766,2017-06-05T09:33:55Z,2017-06-06T01:04:49Z,2017-06-06T01:18:25Z,MERGED,True,10,1,2,https://github.com/metalefty,Constify MCS connectionType,1,[],https://github.com/neutrinolabs/xrdp/pull/766,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/766#issuecomment-306352356,,"As this is easy change, merging now.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,768,2017-06-07T17:07:27Z,2017-06-08T04:31:31Z,2017-06-21T19:47:11Z,MERGED,True,3,0,1,https://github.com/ben-cohen,Fix UK/GB keyboard layout,1,[],https://github.com/neutrinolabs/xrdp/pull/768,https://github.com/ben-cohen,1,https://github.com/neutrinolabs/xrdp/pull/768,"The UK/GB keyboard doesn't work properly connecting to xrdp with xorgxrdp.
It does work when connecting to xrdp with x11vnc, however.
This is because the layout is not declared in xrdp_keyboard.ini.  It needs
to be called ""gb"" not ""uk"".  (There are other layouts that have
km-nnnn.ini files that aren't declared in xrdp_keyboard.ini, so they might
have the same bug, but I haven't tested that.  This is analagous to the
commits for the ""ch"" and ""pl"" layouts.)
Test case:


Use a PC with the UK/GB keyboard layout.


Create /etc/xrdp/startwm.sh as follows:
#!/bin/sh
export LANG=en_GB.UTF-8
export MDM_LANG=en_GB.UTF-8
export XTERM_LOCALE=en_GB.UTF-8
xterm
exit 0


Connect using rdesktop to localhost (from a session where the same
environment variables are defined).


Test layout-specific keys such as:
\ (backslash)
| (bar)
# (numbersign)
~ (asciitilde)
£ (sterling: Shift-3)
€ (EuroSign: AltGr-4)


These keys should produce the appropriate symbol but they don't.  With
the change in this commit the keys produce the correct symbol.","The UK/GB keyboard doesn't work properly connecting to xrdp with xorgxrdp.
It does work when connecting to xrdp with x11vnc, however.
This is because the layout is not declared in xrdp_keyboard.ini.  It needs
to be called ""gb"" not ""uk"".  (There are other layouts that have
km-nnnn.ini files that aren't declared in xrdp_keyboard.ini, so they might
have the same bug, but I haven't tested that.  This is analagous to the
commits for the ""ch"" and ""pl"" layouts.)
Test case:


Use a PC with the UK/GB keyboard layout.


Create /etc/xrdp/startwm.sh as follows:
#!/bin/sh
export LANG=en_GB.UTF-8
export MDM_LANG=en_GB.UTF-8
export XTERM_LOCALE=en_GB.UTF-8
xterm
exit 0


Connect using rdesktop to localhost (from a session where the same
environment variables are defined).


Test layout-specific keys such as:
\ (backslash)
| (bar)
# (numbersign)
~ (asciitilde)
£ (sterling: Shift-3)
€ (EuroSign: AltGr-4)


These keys should produce the appropriate symbol but they don't.  With
the change in this commit the keys produce the correct symbol.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,768,2017-06-07T17:07:27Z,2017-06-08T04:31:31Z,2017-06-21T19:47:11Z,MERGED,True,3,0,1,https://github.com/ben-cohen,Fix UK/GB keyboard layout,1,[],https://github.com/neutrinolabs/xrdp/pull/768,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/768#issuecomment-306961120,"The UK/GB keyboard doesn't work properly connecting to xrdp with xorgxrdp.
It does work when connecting to xrdp with x11vnc, however.
This is because the layout is not declared in xrdp_keyboard.ini.  It needs
to be called ""gb"" not ""uk"".  (There are other layouts that have
km-nnnn.ini files that aren't declared in xrdp_keyboard.ini, so they might
have the same bug, but I haven't tested that.  This is analagous to the
commits for the ""ch"" and ""pl"" layouts.)
Test case:


Use a PC with the UK/GB keyboard layout.


Create /etc/xrdp/startwm.sh as follows:
#!/bin/sh
export LANG=en_GB.UTF-8
export MDM_LANG=en_GB.UTF-8
export XTERM_LOCALE=en_GB.UTF-8
xterm
exit 0


Connect using rdesktop to localhost (from a session where the same
environment variables are defined).


Test layout-specific keys such as:
\ (backslash)
| (bar)
# (numbersign)
~ (asciitilde)
£ (sterling: Shift-3)
€ (EuroSign: AltGr-4)


These keys should produce the appropriate symbol but they don't.  With
the change in this commit the keys produce the correct symbol.",+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,768,2017-06-07T17:07:27Z,2017-06-08T04:31:31Z,2017-06-21T19:47:11Z,MERGED,True,3,0,1,https://github.com/ben-cohen,Fix UK/GB keyboard layout,1,[],https://github.com/neutrinolabs/xrdp/pull/768,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/768#issuecomment-306995345,"The UK/GB keyboard doesn't work properly connecting to xrdp with xorgxrdp.
It does work when connecting to xrdp with x11vnc, however.
This is because the layout is not declared in xrdp_keyboard.ini.  It needs
to be called ""gb"" not ""uk"".  (There are other layouts that have
km-nnnn.ini files that aren't declared in xrdp_keyboard.ini, so they might
have the same bug, but I haven't tested that.  This is analagous to the
commits for the ""ch"" and ""pl"" layouts.)
Test case:


Use a PC with the UK/GB keyboard layout.


Create /etc/xrdp/startwm.sh as follows:
#!/bin/sh
export LANG=en_GB.UTF-8
export MDM_LANG=en_GB.UTF-8
export XTERM_LOCALE=en_GB.UTF-8
xterm
exit 0


Connect using rdesktop to localhost (from a session where the same
environment variables are defined).


Test layout-specific keys such as:
\ (backslash)
| (bar)
# (numbersign)
~ (asciitilde)
£ (sterling: Shift-3)
€ (EuroSign: AltGr-4)


These keys should produce the appropriate symbol but they don't.  With
the change in this commit the keys produce the correct symbol.","Easy and no logic change, let's merge.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,769,2017-06-08T08:10:32Z,2017-06-09T06:55:23Z,2017-06-09T06:55:27Z,MERGED,True,7,7,1,https://github.com/metalefty,sort xrdp_keyboard.ini,1,[],https://github.com/neutrinolabs/xrdp/pull/769,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/769,Just a cosmetic change.,Just a cosmetic change.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,771,2017-06-08T16:42:57Z,2017-06-22T02:47:49Z,2017-11-29T01:00:15Z,MERGED,True,92,41,3,https://github.com/jsorg71,"move openssl calls to common/libssl.c, check for defines",1,[],https://github.com/neutrinolabs/xrdp/pull/771,https://github.com/jsorg71,1,https://github.com/neutrinolabs/xrdp/pull/771,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,771,2017-06-08T16:42:57Z,2017-06-22T02:47:49Z,2017-11-29T01:00:15Z,MERGED,True,92,41,3,https://github.com/jsorg71,"move openssl calls to common/libssl.c, check for defines",1,[],https://github.com/neutrinolabs/xrdp/pull/771,https://github.com/speidy,2,https://github.com/neutrinolabs/xrdp/pull/771#issuecomment-307160900,,+1 :),True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,771,2017-06-08T16:42:57Z,2017-06-22T02:47:49Z,2017-11-29T01:00:15Z,MERGED,True,92,41,3,https://github.com/jsorg71,"move openssl calls to common/libssl.c, check for defines",1,[],https://github.com/neutrinolabs/xrdp/pull/771,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/771#issuecomment-307267148,,I haven't tested the change actually but looks good. Thank you for cleaning up my code!,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,771,2017-06-08T16:42:57Z,2017-06-22T02:47:49Z,2017-11-29T01:00:15Z,MERGED,True,92,41,3,https://github.com/jsorg71,"move openssl calls to common/libssl.c, check for defines",1,[],https://github.com/neutrinolabs/xrdp/pull/771,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/771#issuecomment-309622885,,I'm OK with this except for log messages. Merge?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,771,2017-06-08T16:42:57Z,2017-06-22T02:47:49Z,2017-11-29T01:00:15Z,MERGED,True,92,41,3,https://github.com/jsorg71,"move openssl calls to common/libssl.c, check for defines",1,[],https://github.com/neutrinolabs/xrdp/pull/771,https://github.com/metalefty,5,https://github.com/neutrinolabs/xrdp/pull/771#issuecomment-310260545,,"I'm going to make changes to ssl_calls. Not to cause conflicts, let me merge.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,777,2017-06-15T08:36:11Z,2017-06-17T07:31:18Z,2017-09-28T05:18:51Z,MERGED,True,3,0,1,https://github.com/metalefty,add Spanish keylayout,1,[],https://github.com/neutrinolabs/xrdp/pull/777,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/777,Inspired by: https://groups.google.com/forum/?utm_medium=email&utm_source=footer#!msg/xrdp-devel/Yerqa1umvJk/hwy6l7eKAgAJ,Inspired by: https://groups.google.com/forum/?utm_medium=email&utm_source=footer#!msg/xrdp-devel/Yerqa1umvJk/hwy6l7eKAgAJ,True,{'THUMBS_UP': ['https://github.com/adocampo']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,777,2017-06-15T08:36:11Z,2017-06-17T07:31:18Z,2017-09-28T05:18:51Z,MERGED,True,3,0,1,https://github.com/metalefty,add Spanish keylayout,1,[],https://github.com/neutrinolabs/xrdp/pull/777,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/777#issuecomment-309199393,Inspired by: https://groups.google.com/forum/?utm_medium=email&utm_source=footer#!msg/xrdp-devel/Yerqa1umvJk/hwy6l7eKAgAJ,"Once merging as-is. If I got additional feedback from ES people, I'll make more modification.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,779,2017-06-19T18:40:00Z,2017-07-12T09:03:30Z,2017-07-12T09:03:30Z,CLOSED,False,3,2,1,https://github.com/geiseri,Fix systemd sessions,2,[],https://github.com/neutrinolabs/xrdp/pull/779,https://github.com/geiseri,1,https://github.com/neutrinolabs/xrdp/pull/779,"Move the session creation inside of the child fork.  This will allow sesman to only have the child as a part of the user's session scope and the parent remain part of the services scope.
This was tested with:

Signon new session - xrdp-sesman parent in xrdp-sesman.service scope and xrdp-sesman child in the user's session scope.
Log off session - xrdp-sesman parent remains in xrdp-sesman.service scope and child xrdp-sesman is terminated along with the user's session.
Disconnect session - xrdp-sesman parent remains in xrdp-sesman.service scope and child xrdp-sesman remains inside of the user's scope.
Reconnect session  - xrdp-sesman parent remains in xrdp-sesman.service scope and child xrdp-sesman remains inside of the user's scope.  Old session is re-attached.

This should fix issue #778.
Signed-off-by: Ian Geiser geiseri@geekcentral.pub","Move the session creation inside of the child fork.  This will allow sesman to only have the child as a part of the user's session scope and the parent remain part of the services scope.
This was tested with:

Signon new session - xrdp-sesman parent in xrdp-sesman.service scope and xrdp-sesman child in the user's session scope.
Log off session - xrdp-sesman parent remains in xrdp-sesman.service scope and child xrdp-sesman is terminated along with the user's session.
Disconnect session - xrdp-sesman parent remains in xrdp-sesman.service scope and child xrdp-sesman remains inside of the user's scope.
Reconnect session  - xrdp-sesman parent remains in xrdp-sesman.service scope and child xrdp-sesman remains inside of the user's scope.  Old session is re-attached.

This should fix issue #778.
Signed-off-by: Ian Geiser geiseri@geekcentral.pub",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,779,2017-06-19T18:40:00Z,2017-07-12T09:03:30Z,2017-07-12T09:03:30Z,CLOSED,False,3,2,1,https://github.com/geiseri,Fix systemd sessions,2,[],https://github.com/neutrinolabs/xrdp/pull/779,https://github.com/tfischer77,2,https://github.com/neutrinolabs/xrdp/pull/779#issuecomment-309550079,"Move the session creation inside of the child fork.  This will allow sesman to only have the child as a part of the user's session scope and the parent remain part of the services scope.
This was tested with:

Signon new session - xrdp-sesman parent in xrdp-sesman.service scope and xrdp-sesman child in the user's session scope.
Log off session - xrdp-sesman parent remains in xrdp-sesman.service scope and child xrdp-sesman is terminated along with the user's session.
Disconnect session - xrdp-sesman parent remains in xrdp-sesman.service scope and child xrdp-sesman remains inside of the user's scope.
Reconnect session  - xrdp-sesman parent remains in xrdp-sesman.service scope and child xrdp-sesman remains inside of the user's scope.  Old session is re-attached.

This should fix issue #778.
Signed-off-by: Ian Geiser geiseri@geekcentral.pub",Isn't that reverting the change done in #694? That one was done because pam_mkhomedir was not able to create a home directory...,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,779,2017-06-19T18:40:00Z,2017-07-12T09:03:30Z,2017-07-12T09:03:30Z,CLOSED,False,3,2,1,https://github.com/geiseri,Fix systemd sessions,2,[],https://github.com/neutrinolabs/xrdp/pull/779,https://github.com/geiseri,3,https://github.com/neutrinolabs/xrdp/pull/779#issuecomment-309557659,"Move the session creation inside of the child fork.  This will allow sesman to only have the child as a part of the user's session scope and the parent remain part of the services scope.
This was tested with:

Signon new session - xrdp-sesman parent in xrdp-sesman.service scope and xrdp-sesman child in the user's session scope.
Log off session - xrdp-sesman parent remains in xrdp-sesman.service scope and child xrdp-sesman is terminated along with the user's session.
Disconnect session - xrdp-sesman parent remains in xrdp-sesman.service scope and child xrdp-sesman remains inside of the user's scope.
Reconnect session  - xrdp-sesman parent remains in xrdp-sesman.service scope and child xrdp-sesman remains inside of the user's scope.  Old session is re-attached.

This should fix issue #778.
Signed-off-by: Ian Geiser geiseri@geekcentral.pub","Yes, in essence it is.  From what I can see in the code the actual setup of the X server happens in the parent process.  This is not correct because it might (or might not) happen before the child creates the session.  Hence why the delay thing was needed.  I need to look into the fork order, but the VNC setup may need to be moved so it is run in the same process as the session is opened.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,779,2017-06-19T18:40:00Z,2017-07-12T09:03:30Z,2017-07-12T09:03:30Z,CLOSED,False,3,2,1,https://github.com/geiseri,Fix systemd sessions,2,[],https://github.com/neutrinolabs/xrdp/pull/779,https://github.com/geiseri,4,https://github.com/neutrinolabs/xrdp/pull/779#issuecomment-309772480,"Move the session creation inside of the child fork.  This will allow sesman to only have the child as a part of the user's session scope and the parent remain part of the services scope.
This was tested with:

Signon new session - xrdp-sesman parent in xrdp-sesman.service scope and xrdp-sesman child in the user's session scope.
Log off session - xrdp-sesman parent remains in xrdp-sesman.service scope and child xrdp-sesman is terminated along with the user's session.
Disconnect session - xrdp-sesman parent remains in xrdp-sesman.service scope and child xrdp-sesman remains inside of the user's scope.
Reconnect session  - xrdp-sesman parent remains in xrdp-sesman.service scope and child xrdp-sesman remains inside of the user's scope.  Old session is re-attached.

This should fix issue #778.
Signed-off-by: Ian Geiser geiseri@geekcentral.pub","I did confirm that at least on Arch linux VNC worked as well as pam_mkhomedir with this patch.  Can someone else verify this?  My test desktop is using pam_sssd with active directory, pam_mkhomedir and Xorg driver on a Linux KVM guest running Arch linux.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,779,2017-06-19T18:40:00Z,2017-07-12T09:03:30Z,2017-07-12T09:03:30Z,CLOSED,False,3,2,1,https://github.com/geiseri,Fix systemd sessions,2,[],https://github.com/neutrinolabs/xrdp/pull/779,https://github.com/metalefty,5,https://github.com/neutrinolabs/xrdp/pull/779#issuecomment-309927023,"Move the session creation inside of the child fork.  This will allow sesman to only have the child as a part of the user's session scope and the parent remain part of the services scope.
This was tested with:

Signon new session - xrdp-sesman parent in xrdp-sesman.service scope and xrdp-sesman child in the user's session scope.
Log off session - xrdp-sesman parent remains in xrdp-sesman.service scope and child xrdp-sesman is terminated along with the user's session.
Disconnect session - xrdp-sesman parent remains in xrdp-sesman.service scope and child xrdp-sesman remains inside of the user's scope.
Reconnect session  - xrdp-sesman parent remains in xrdp-sesman.service scope and child xrdp-sesman remains inside of the user's scope.  Old session is re-attached.

This should fix issue #778.
Signed-off-by: Ian Geiser geiseri@geekcentral.pub","With very very quick test, it looks good to me. If Jay agreed, I'm OK with merging this.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,779,2017-06-19T18:40:00Z,2017-07-12T09:03:30Z,2017-07-12T09:03:30Z,CLOSED,False,3,2,1,https://github.com/geiseri,Fix systemd sessions,2,[],https://github.com/neutrinolabs/xrdp/pull/779,https://github.com/moobyfr,6,https://github.com/neutrinolabs/xrdp/pull/779#issuecomment-309958949,"Move the session creation inside of the child fork.  This will allow sesman to only have the child as a part of the user's session scope and the parent remain part of the services scope.
This was tested with:

Signon new session - xrdp-sesman parent in xrdp-sesman.service scope and xrdp-sesman child in the user's session scope.
Log off session - xrdp-sesman parent remains in xrdp-sesman.service scope and child xrdp-sesman is terminated along with the user's session.
Disconnect session - xrdp-sesman parent remains in xrdp-sesman.service scope and child xrdp-sesman remains inside of the user's scope.
Reconnect session  - xrdp-sesman parent remains in xrdp-sesman.service scope and child xrdp-sesman remains inside of the user's scope.  Old session is re-attached.

This should fix issue #778.
Signed-off-by: Ian Geiser geiseri@geekcentral.pub",works for me too.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,779,2017-06-19T18:40:00Z,2017-07-12T09:03:30Z,2017-07-12T09:03:30Z,CLOSED,False,3,2,1,https://github.com/geiseri,Fix systemd sessions,2,[],https://github.com/neutrinolabs/xrdp/pull/779,https://github.com/tfischer77,7,https://github.com/neutrinolabs/xrdp/pull/779#issuecomment-310485383,"Move the session creation inside of the child fork.  This will allow sesman to only have the child as a part of the user's session scope and the parent remain part of the services scope.
This was tested with:

Signon new session - xrdp-sesman parent in xrdp-sesman.service scope and xrdp-sesman child in the user's session scope.
Log off session - xrdp-sesman parent remains in xrdp-sesman.service scope and child xrdp-sesman is terminated along with the user's session.
Disconnect session - xrdp-sesman parent remains in xrdp-sesman.service scope and child xrdp-sesman remains inside of the user's scope.
Reconnect session  - xrdp-sesman parent remains in xrdp-sesman.service scope and child xrdp-sesman remains inside of the user's scope.  Old session is re-attached.

This should fix issue #778.
Signed-off-by: Ian Geiser geiseri@geekcentral.pub","I am also using sssd with pam_mkhomedir. Unfortunately, as I'm on vacation, I'm not able to test it. Will do it in about 14 days. But if you confirmed that it works for you, I guess the it will also work with my setup.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,779,2017-06-19T18:40:00Z,2017-07-12T09:03:30Z,2017-07-12T09:03:30Z,CLOSED,False,3,2,1,https://github.com/geiseri,Fix systemd sessions,2,[],https://github.com/neutrinolabs/xrdp/pull/779,https://github.com/geiseri,8,https://github.com/neutrinolabs/xrdp/pull/779#issuecomment-310692013,"Move the session creation inside of the child fork.  This will allow sesman to only have the child as a part of the user's session scope and the parent remain part of the services scope.
This was tested with:

Signon new session - xrdp-sesman parent in xrdp-sesman.service scope and xrdp-sesman child in the user's session scope.
Log off session - xrdp-sesman parent remains in xrdp-sesman.service scope and child xrdp-sesman is terminated along with the user's session.
Disconnect session - xrdp-sesman parent remains in xrdp-sesman.service scope and child xrdp-sesman remains inside of the user's scope.
Reconnect session  - xrdp-sesman parent remains in xrdp-sesman.service scope and child xrdp-sesman remains inside of the user's scope.  Old session is re-attached.

This should fix issue #778.
Signed-off-by: Ian Geiser geiseri@geekcentral.pub","@tfischer77 what distro do you use?  also are you using X11rdp, Xorg, or VNC?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,779,2017-06-19T18:40:00Z,2017-07-12T09:03:30Z,2017-07-12T09:03:30Z,CLOSED,False,3,2,1,https://github.com/geiseri,Fix systemd sessions,2,[],https://github.com/neutrinolabs/xrdp/pull/779,https://github.com/jsorg71,9,https://github.com/neutrinolabs/xrdp/pull/779#issuecomment-310725485,"Move the session creation inside of the child fork.  This will allow sesman to only have the child as a part of the user's session scope and the parent remain part of the services scope.
This was tested with:

Signon new session - xrdp-sesman parent in xrdp-sesman.service scope and xrdp-sesman child in the user's session scope.
Log off session - xrdp-sesman parent remains in xrdp-sesman.service scope and child xrdp-sesman is terminated along with the user's session.
Disconnect session - xrdp-sesman parent remains in xrdp-sesman.service scope and child xrdp-sesman remains inside of the user's scope.
Reconnect session  - xrdp-sesman parent remains in xrdp-sesman.service scope and child xrdp-sesman remains inside of the user's scope.  Old session is re-attached.

This should fix issue #778.
Signed-off-by: Ian Geiser geiseri@geekcentral.pub","If we are going to move auth_start_session to the child process, I think we should move auth_stop_session and auth_end too.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,779,2017-06-19T18:40:00Z,2017-07-12T09:03:30Z,2017-07-12T09:03:30Z,CLOSED,False,3,2,1,https://github.com/geiseri,Fix systemd sessions,2,[],https://github.com/neutrinolabs/xrdp/pull/779,https://github.com/tfischer77,10,https://github.com/neutrinolabs/xrdp/pull/779#issuecomment-310753924,"Move the session creation inside of the child fork.  This will allow sesman to only have the child as a part of the user's session scope and the parent remain part of the services scope.
This was tested with:

Signon new session - xrdp-sesman parent in xrdp-sesman.service scope and xrdp-sesman child in the user's session scope.
Log off session - xrdp-sesman parent remains in xrdp-sesman.service scope and child xrdp-sesman is terminated along with the user's session.
Disconnect session - xrdp-sesman parent remains in xrdp-sesman.service scope and child xrdp-sesman remains inside of the user's scope.
Reconnect session  - xrdp-sesman parent remains in xrdp-sesman.service scope and child xrdp-sesman remains inside of the user's scope.  Old session is re-attached.

This should fix issue #778.
Signed-off-by: Ian Geiser geiseri@geekcentral.pub",@geiseri I'm using debian stretch with xorgxrdp and the latest (or almost latest) devel branch.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,779,2017-06-19T18:40:00Z,2017-07-12T09:03:30Z,2017-07-12T09:03:30Z,CLOSED,False,3,2,1,https://github.com/geiseri,Fix systemd sessions,2,[],https://github.com/neutrinolabs/xrdp/pull/779,https://github.com/metalefty,11,https://github.com/neutrinolabs/xrdp/pull/779#issuecomment-310909663,"Move the session creation inside of the child fork.  This will allow sesman to only have the child as a part of the user's session scope and the parent remain part of the services scope.
This was tested with:

Signon new session - xrdp-sesman parent in xrdp-sesman.service scope and xrdp-sesman child in the user's session scope.
Log off session - xrdp-sesman parent remains in xrdp-sesman.service scope and child xrdp-sesman is terminated along with the user's session.
Disconnect session - xrdp-sesman parent remains in xrdp-sesman.service scope and child xrdp-sesman remains inside of the user's scope.
Reconnect session  - xrdp-sesman parent remains in xrdp-sesman.service scope and child xrdp-sesman remains inside of the user's scope.  Old session is re-attached.

This should fix issue #778.
Signed-off-by: Ian Geiser geiseri@geekcentral.pub","Please be careful not to cause regression of CVE-2017-6967.
I haven't checked it yet.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,779,2017-06-19T18:40:00Z,2017-07-12T09:03:30Z,2017-07-12T09:03:30Z,CLOSED,False,3,2,1,https://github.com/geiseri,Fix systemd sessions,2,[],https://github.com/neutrinolabs/xrdp/pull/779,https://github.com/geiseri,12,https://github.com/neutrinolabs/xrdp/pull/779#issuecomment-311697548,"Move the session creation inside of the child fork.  This will allow sesman to only have the child as a part of the user's session scope and the parent remain part of the services scope.
This was tested with:

Signon new session - xrdp-sesman parent in xrdp-sesman.service scope and xrdp-sesman child in the user's session scope.
Log off session - xrdp-sesman parent remains in xrdp-sesman.service scope and child xrdp-sesman is terminated along with the user's session.
Disconnect session - xrdp-sesman parent remains in xrdp-sesman.service scope and child xrdp-sesman remains inside of the user's scope.
Reconnect session  - xrdp-sesman parent remains in xrdp-sesman.service scope and child xrdp-sesman remains inside of the user's scope.  Old session is re-attached.

This should fix issue #778.
Signed-off-by: Ian Geiser geiseri@geekcentral.pub","@metalefty i need to confirm this, i think though that the change in the code may not have actually addressed the CVE, unless there is PAM init outside that I am missing.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,779,2017-06-19T18:40:00Z,2017-07-12T09:03:30Z,2017-07-12T09:03:30Z,CLOSED,False,3,2,1,https://github.com/geiseri,Fix systemd sessions,2,[],https://github.com/neutrinolabs/xrdp/pull/779,https://github.com/geiseri,13,https://github.com/neutrinolabs/xrdp/pull/779#issuecomment-311697759,"Move the session creation inside of the child fork.  This will allow sesman to only have the child as a part of the user's session scope and the parent remain part of the services scope.
This was tested with:

Signon new session - xrdp-sesman parent in xrdp-sesman.service scope and xrdp-sesman child in the user's session scope.
Log off session - xrdp-sesman parent remains in xrdp-sesman.service scope and child xrdp-sesman is terminated along with the user's session.
Disconnect session - xrdp-sesman parent remains in xrdp-sesman.service scope and child xrdp-sesman remains inside of the user's scope.
Reconnect session  - xrdp-sesman parent remains in xrdp-sesman.service scope and child xrdp-sesman remains inside of the user's scope.  Old session is re-attached.

This should fix issue #778.
Signed-off-by: Ian Geiser geiseri@geekcentral.pub","@jsorg71 i will look at moving those, but in theory those are okay where they are since they need to run no matter the exit status of the child.  Right?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,779,2017-06-19T18:40:00Z,2017-07-12T09:03:30Z,2017-07-12T09:03:30Z,CLOSED,False,3,2,1,https://github.com/geiseri,Fix systemd sessions,2,[],https://github.com/neutrinolabs/xrdp/pull/779,https://github.com/jsorg71,14,https://github.com/neutrinolabs/xrdp/pull/779#issuecomment-313989178,"Move the session creation inside of the child fork.  This will allow sesman to only have the child as a part of the user's session scope and the parent remain part of the services scope.
This was tested with:

Signon new session - xrdp-sesman parent in xrdp-sesman.service scope and xrdp-sesman child in the user's session scope.
Log off session - xrdp-sesman parent remains in xrdp-sesman.service scope and child xrdp-sesman is terminated along with the user's session.
Disconnect session - xrdp-sesman parent remains in xrdp-sesman.service scope and child xrdp-sesman remains inside of the user's scope.
Reconnect session  - xrdp-sesman parent remains in xrdp-sesman.service scope and child xrdp-sesman remains inside of the user's scope.  Old session is re-attached.

This should fix issue #778.
Signed-off-by: Ian Geiser geiseri@geekcentral.pub","I made a possible replacement, PR #806.  It calls auth_stop_session and auth_end in the same process and avoids the merge.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,779,2017-06-19T18:40:00Z,2017-07-12T09:03:30Z,2017-07-12T09:03:30Z,CLOSED,False,3,2,1,https://github.com/geiseri,Fix systemd sessions,2,[],https://github.com/neutrinolabs/xrdp/pull/779,https://github.com/metalefty,15,https://github.com/neutrinolabs/xrdp/pull/779#issuecomment-314701646,"Move the session creation inside of the child fork.  This will allow sesman to only have the child as a part of the user's session scope and the parent remain part of the services scope.
This was tested with:

Signon new session - xrdp-sesman parent in xrdp-sesman.service scope and xrdp-sesman child in the user's session scope.
Log off session - xrdp-sesman parent remains in xrdp-sesman.service scope and child xrdp-sesman is terminated along with the user's session.
Disconnect session - xrdp-sesman parent remains in xrdp-sesman.service scope and child xrdp-sesman remains inside of the user's scope.
Reconnect session  - xrdp-sesman parent remains in xrdp-sesman.service scope and child xrdp-sesman remains inside of the user's scope.  Old session is re-attached.

This should fix issue #778.
Signed-off-by: Ian Geiser geiseri@geekcentral.pub",Merged #806.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,781,2017-06-22T19:59:12Z,2017-06-22T20:02:41Z,2017-06-22T20:02:41Z,CLOSED,False,23,1,3,https://github.com/ben-cohen,UDS file deleted after first connection,1,[],https://github.com/neutrinolabs/xrdp/pull/781,https://github.com/ben-cohen,1,https://github.com/neutrinolabs/xrdp/pull/781,"(If the ""port"" specified in /etc/xrdp/xrdp.ini is an absolute path then a
Unix Domain Socket (UDS) is created instead of a TCP port.  I want to use
this feature to implement authentication over SSH, issue #773.  So far as
I know rdesktop and xfreerdp can't connect to a UDS but you can go via
socat, as below.)
If you run xrdp with a Unix Domain Socket (UDS) for the port specified in
/etc/xrdp/xrdp.ini then the first connection succeeds but subsequent
connections fail.  In fact the UDS is deleted from the filesystem as soon
as the first connection is established.
Test case:


Edit /etc/xrdp/xrdp.ini to set ""port=/var/run/xrdp-local.socket"".


Restart xrdp.


Run the following.  When rdesktop starts up and the logon dialog is
displayed, press ""Cancel"".
sudo socat TCP-LISTEN:12345 UNIX-CONNECT:/var/run/xrdp-local.socket &
rdesktop localhost:12345


Run the following:
sudo socat TCP-LISTEN:12346 UNIX-CONNECT:/var/run/xrdp-local.socket &
rdesktop localhost:12346


Expected behaviour: rdesktop starts up and displays the logon dialog.
Observed behaviour: rdesktop exits with ""ERROR: Connection closed"" and
socat exits with ""No such file or directory.
This is because in the child process after forking, xrdp_listen_fork()
calls trans_delete() which deletes the UDS.  Simply commenting out the
g_file_delete() and g_free() fixes this, but that isn't a proper solution
because trans_delete() is called from elsewhere where the UDS might no
longer be wanted.
Fix by adding a function trans_delete_from_child() that frees and clears
listen_filename before calling trans_delete(), and call the new function
from xrdp_listen_fork().
(Workaround: set ""fork=false"" in /etc/xrdp/xrdp.ini, because
trans_delete() is then not called.)","(If the ""port"" specified in /etc/xrdp/xrdp.ini is an absolute path then a
Unix Domain Socket (UDS) is created instead of a TCP port.  I want to use
this feature to implement authentication over SSH, issue #773.  So far as
I know rdesktop and xfreerdp can't connect to a UDS but you can go via
socat, as below.)
If you run xrdp with a Unix Domain Socket (UDS) for the port specified in
/etc/xrdp/xrdp.ini then the first connection succeeds but subsequent
connections fail.  In fact the UDS is deleted from the filesystem as soon
as the first connection is established.
Test case:


Edit /etc/xrdp/xrdp.ini to set ""port=/var/run/xrdp-local.socket"".


Restart xrdp.


Run the following.  When rdesktop starts up and the logon dialog is
displayed, press ""Cancel"".
sudo socat TCP-LISTEN:12345 UNIX-CONNECT:/var/run/xrdp-local.socket &
rdesktop localhost:12345


Run the following:
sudo socat TCP-LISTEN:12346 UNIX-CONNECT:/var/run/xrdp-local.socket &
rdesktop localhost:12346


Expected behaviour: rdesktop starts up and displays the logon dialog.
Observed behaviour: rdesktop exits with ""ERROR: Connection closed"" and
socat exits with ""No such file or directory.
This is because in the child process after forking, xrdp_listen_fork()
calls trans_delete() which deletes the UDS.  Simply commenting out the
g_file_delete() and g_free() fixes this, but that isn't a proper solution
because trans_delete() is called from elsewhere where the UDS might no
longer be wanted.
Fix by adding a function trans_delete_from_child() that frees and clears
listen_filename before calling trans_delete(), and call the new function
from xrdp_listen_fork().
(Workaround: set ""fork=false"" in /etc/xrdp/xrdp.ini, because
trans_delete() is then not called.)",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,781,2017-06-22T19:59:12Z,2017-06-22T20:02:41Z,2017-06-22T20:02:41Z,CLOSED,False,23,1,3,https://github.com/ben-cohen,UDS file deleted after first connection,1,[],https://github.com/neutrinolabs/xrdp/pull/781,https://github.com/ben-cohen,2,https://github.com/neutrinolabs/xrdp/pull/781#issuecomment-310486842,"(If the ""port"" specified in /etc/xrdp/xrdp.ini is an absolute path then a
Unix Domain Socket (UDS) is created instead of a TCP port.  I want to use
this feature to implement authentication over SSH, issue #773.  So far as
I know rdesktop and xfreerdp can't connect to a UDS but you can go via
socat, as below.)
If you run xrdp with a Unix Domain Socket (UDS) for the port specified in
/etc/xrdp/xrdp.ini then the first connection succeeds but subsequent
connections fail.  In fact the UDS is deleted from the filesystem as soon
as the first connection is established.
Test case:


Edit /etc/xrdp/xrdp.ini to set ""port=/var/run/xrdp-local.socket"".


Restart xrdp.


Run the following.  When rdesktop starts up and the logon dialog is
displayed, press ""Cancel"".
sudo socat TCP-LISTEN:12345 UNIX-CONNECT:/var/run/xrdp-local.socket &
rdesktop localhost:12345


Run the following:
sudo socat TCP-LISTEN:12346 UNIX-CONNECT:/var/run/xrdp-local.socket &
rdesktop localhost:12346


Expected behaviour: rdesktop starts up and displays the logon dialog.
Observed behaviour: rdesktop exits with ""ERROR: Connection closed"" and
socat exits with ""No such file or directory.
This is because in the child process after forking, xrdp_listen_fork()
calls trans_delete() which deletes the UDS.  Simply commenting out the
g_file_delete() and g_free() fixes this, but that isn't a proper solution
because trans_delete() is called from elsewhere where the UDS might no
longer be wanted.
Fix by adding a function trans_delete_from_child() that frees and clears
listen_filename before calling trans_delete(), and call the new function
from xrdp_listen_fork().
(Workaround: set ""fork=false"" in /etc/xrdp/xrdp.ini, because
trans_delete() is then not called.)",Cancelling this because I made a mistake - will resubmit.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,782,2017-06-22T20:16:19Z,2018-03-27T06:22:50Z,2018-04-01T17:25:52Z,MERGED,True,21,1,3,https://github.com/ben-cohen,UDS file deleted after first connection,1,[],https://github.com/neutrinolabs/xrdp/pull/782,https://github.com/ben-cohen,1,https://github.com/neutrinolabs/xrdp/pull/782,"(If the ""port"" specified in /etc/xrdp/xrdp.ini is an absolute path then a
Unix Domain Socket (UDS) is created instead of a TCP port. I want to use
this feature to implement authentication over SSH, issue #773. So far as
I know rdesktop and xfreerdp can't connect to a UDS but you can go via
socat, as below.)
If you run xrdp with a Unix Domain Socket (UDS) for the port specified in
/etc/xrdp/xrdp.ini then the first connection succeeds but subsequent
connections fail.  In fact the UDS is deleted from the filesystem as soon
as the first connection is established.
Test case:


Edit /etc/xrdp/xrdp.ini to set ""port=/var/run/xrdp-local.socket"".


Restart xrdp.


Run the following.  When rdesktop starts up and the logon dialog is
displayed, press ""Cancel"".
sudo socat TCP-LISTEN:12345 UNIX-CONNECT:/var/run/xrdp-local.socket &
rdesktop localhost:12345


Run the following:
sudo socat TCP-LISTEN:12346 UNIX-CONNECT:/var/run/xrdp-local.socket &
rdesktop localhost:12346


Expected behaviour: rdesktop starts up and displays the logon dialog.
Observed behaviour: rdesktop exits with ""ERROR: Connection closed"" and
socat exits with ""No such file or directory.
This is because in the child process after forking, xrdp_listen_fork()
calls trans_delete() which deletes the UDS.  Simply commenting out the
g_file_delete() and g_free() fixes this, but that isn't a proper solution
because trans_delete() is called from elsewhere where the UDS might no
longer be wanted.
Fix by adding a function trans_delete_from_child() that frees and clears
listen_filename before calling trans_delete(), and call the new function
from xrdp_listen_fork().
(Workaround: set ""fork=false"" in /etc/xrdp/xrdp.ini, because
trans_delete() is then not called.)","(If the ""port"" specified in /etc/xrdp/xrdp.ini is an absolute path then a
Unix Domain Socket (UDS) is created instead of a TCP port. I want to use
this feature to implement authentication over SSH, issue #773. So far as
I know rdesktop and xfreerdp can't connect to a UDS but you can go via
socat, as below.)
If you run xrdp with a Unix Domain Socket (UDS) for the port specified in
/etc/xrdp/xrdp.ini then the first connection succeeds but subsequent
connections fail.  In fact the UDS is deleted from the filesystem as soon
as the first connection is established.
Test case:


Edit /etc/xrdp/xrdp.ini to set ""port=/var/run/xrdp-local.socket"".


Restart xrdp.


Run the following.  When rdesktop starts up and the logon dialog is
displayed, press ""Cancel"".
sudo socat TCP-LISTEN:12345 UNIX-CONNECT:/var/run/xrdp-local.socket &
rdesktop localhost:12345


Run the following:
sudo socat TCP-LISTEN:12346 UNIX-CONNECT:/var/run/xrdp-local.socket &
rdesktop localhost:12346


Expected behaviour: rdesktop starts up and displays the logon dialog.
Observed behaviour: rdesktop exits with ""ERROR: Connection closed"" and
socat exits with ""No such file or directory.
This is because in the child process after forking, xrdp_listen_fork()
calls trans_delete() which deletes the UDS.  Simply commenting out the
g_file_delete() and g_free() fixes this, but that isn't a proper solution
because trans_delete() is called from elsewhere where the UDS might no
longer be wanted.
Fix by adding a function trans_delete_from_child() that frees and clears
listen_filename before calling trans_delete(), and call the new function
from xrdp_listen_fork().
(Workaround: set ""fork=false"" in /etc/xrdp/xrdp.ini, because
trans_delete() is then not called.)",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,782,2017-06-22T20:16:19Z,2018-03-27T06:22:50Z,2018-04-01T17:25:52Z,MERGED,True,21,1,3,https://github.com/ben-cohen,UDS file deleted after first connection,1,[],https://github.com/neutrinolabs/xrdp/pull/782,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/782#issuecomment-365195933,"(If the ""port"" specified in /etc/xrdp/xrdp.ini is an absolute path then a
Unix Domain Socket (UDS) is created instead of a TCP port. I want to use
this feature to implement authentication over SSH, issue #773. So far as
I know rdesktop and xfreerdp can't connect to a UDS but you can go via
socat, as below.)
If you run xrdp with a Unix Domain Socket (UDS) for the port specified in
/etc/xrdp/xrdp.ini then the first connection succeeds but subsequent
connections fail.  In fact the UDS is deleted from the filesystem as soon
as the first connection is established.
Test case:


Edit /etc/xrdp/xrdp.ini to set ""port=/var/run/xrdp-local.socket"".


Restart xrdp.


Run the following.  When rdesktop starts up and the logon dialog is
displayed, press ""Cancel"".
sudo socat TCP-LISTEN:12345 UNIX-CONNECT:/var/run/xrdp-local.socket &
rdesktop localhost:12345


Run the following:
sudo socat TCP-LISTEN:12346 UNIX-CONNECT:/var/run/xrdp-local.socket &
rdesktop localhost:12346


Expected behaviour: rdesktop starts up and displays the logon dialog.
Observed behaviour: rdesktop exits with ""ERROR: Connection closed"" and
socat exits with ""No such file or directory.
This is because in the child process after forking, xrdp_listen_fork()
calls trans_delete() which deletes the UDS.  Simply commenting out the
g_file_delete() and g_free() fixes this, but that isn't a proper solution
because trans_delete() is called from elsewhere where the UDS might no
longer be wanted.
Fix by adding a function trans_delete_from_child() that frees and clears
listen_filename before calling trans_delete(), and call the new function
from xrdp_listen_fork().
(Workaround: set ""fork=false"" in /etc/xrdp/xrdp.ini, because
trans_delete() is then not called.)",@speidy @jsorg71 Looks good and it works fine. Any objections or concerns?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,784,2017-06-23T17:24:42Z,2017-07-20T00:13:07Z,2017-07-20T18:43:29Z,MERGED,True,4,0,1,https://github.com/ben-cohen,UDS connection only accessible by root,1,[],https://github.com/neutrinolabs/xrdp/pull/784,https://github.com/ben-cohen,1,https://github.com/neutrinolabs/xrdp/pull/784,"(If the ""port"" specified in /etc/xrdp/xrdp.ini is an absolute path then a
Unix Domain Socket (UDS) is created instead of a TCP port. I want to use
this feature to implement authentication over SSH, issue #773.)
If you run xrdp with a Unix Domain Socket (UDS) for the port specified in
/etc/xrdp/xrdp.ini then only root can connect to it.
Test case:


Edit /etc/xrdp/xrdp.ini to set ""port=/var/run/xrdp-local.socket"".


Restart xrdp.


Run the following, as a non-root user.


socat TCP-LISTEN:12345 UNIX-CONNECT:/var/run/xrdp-local.socket &
rdesktop localhost:12345
Expected behaviour: rdesktop starts up and displays the logon dialog.
Observed behaviour: rdesktop exits with ""ERROR: Connection closed"" and
socat exits with ""Permission denied"".  (But it suceeds if root runs
socat.)
UDS files are created by trans_listen_address() and given permissions
0660, so only root can connect to it.  In this case, for the RDP client
connection, it it fine for any user to connect so it should be given
permissions 0666.
Note that this is only relevant when the port in /etc/xrdp/xrdp.ini has
been set to create a UDS instead of a TCP socket.  When a TCP port is
created any user (including remote users, unless the loopback interface
is used) can connect so this is not less secure.","(If the ""port"" specified in /etc/xrdp/xrdp.ini is an absolute path then a
Unix Domain Socket (UDS) is created instead of a TCP port. I want to use
this feature to implement authentication over SSH, issue #773.)
If you run xrdp with a Unix Domain Socket (UDS) for the port specified in
/etc/xrdp/xrdp.ini then only root can connect to it.
Test case:


Edit /etc/xrdp/xrdp.ini to set ""port=/var/run/xrdp-local.socket"".


Restart xrdp.


Run the following, as a non-root user.


socat TCP-LISTEN:12345 UNIX-CONNECT:/var/run/xrdp-local.socket &
rdesktop localhost:12345
Expected behaviour: rdesktop starts up and displays the logon dialog.
Observed behaviour: rdesktop exits with ""ERROR: Connection closed"" and
socat exits with ""Permission denied"".  (But it suceeds if root runs
socat.)
UDS files are created by trans_listen_address() and given permissions
0660, so only root can connect to it.  In this case, for the RDP client
connection, it it fine for any user to connect so it should be given
permissions 0666.
Note that this is only relevant when the port in /etc/xrdp/xrdp.ini has
been set to create a UDS instead of a TCP socket.  When a TCP port is
created any user (including remote users, unless the loopback interface
is used) can connect so this is not less secure.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,784,2017-06-23T17:24:42Z,2017-07-20T00:13:07Z,2017-07-20T18:43:29Z,MERGED,True,4,0,1,https://github.com/ben-cohen,UDS connection only accessible by root,1,[],https://github.com/neutrinolabs/xrdp/pull/784,https://github.com/jsorg71,2,https://github.com/neutrinolabs/xrdp/pull/784#issuecomment-310726531,"(If the ""port"" specified in /etc/xrdp/xrdp.ini is an absolute path then a
Unix Domain Socket (UDS) is created instead of a TCP port. I want to use
this feature to implement authentication over SSH, issue #773.)
If you run xrdp with a Unix Domain Socket (UDS) for the port specified in
/etc/xrdp/xrdp.ini then only root can connect to it.
Test case:


Edit /etc/xrdp/xrdp.ini to set ""port=/var/run/xrdp-local.socket"".


Restart xrdp.


Run the following, as a non-root user.


socat TCP-LISTEN:12345 UNIX-CONNECT:/var/run/xrdp-local.socket &
rdesktop localhost:12345
Expected behaviour: rdesktop starts up and displays the logon dialog.
Observed behaviour: rdesktop exits with ""ERROR: Connection closed"" and
socat exits with ""Permission denied"".  (But it suceeds if root runs
socat.)
UDS files are created by trans_listen_address() and given permissions
0660, so only root can connect to it.  In this case, for the RDP client
connection, it it fine for any user to connect so it should be given
permissions 0666.
Note that this is only relevant when the port in /etc/xrdp/xrdp.ini has
been set to create a UDS instead of a TCP socket.  When a TCP port is
created any user (including remote users, unless the loopback interface
is used) can connect so this is not less secure.",+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,784,2017-06-23T17:24:42Z,2017-07-20T00:13:07Z,2017-07-20T18:43:29Z,MERGED,True,4,0,1,https://github.com/ben-cohen,UDS connection only accessible by root,1,[],https://github.com/neutrinolabs/xrdp/pull/784,https://github.com/speidy,3,https://github.com/neutrinolabs/xrdp/pull/784#issuecomment-315640151,"(If the ""port"" specified in /etc/xrdp/xrdp.ini is an absolute path then a
Unix Domain Socket (UDS) is created instead of a TCP port. I want to use
this feature to implement authentication over SSH, issue #773.)
If you run xrdp with a Unix Domain Socket (UDS) for the port specified in
/etc/xrdp/xrdp.ini then only root can connect to it.
Test case:


Edit /etc/xrdp/xrdp.ini to set ""port=/var/run/xrdp-local.socket"".


Restart xrdp.


Run the following, as a non-root user.


socat TCP-LISTEN:12345 UNIX-CONNECT:/var/run/xrdp-local.socket &
rdesktop localhost:12345
Expected behaviour: rdesktop starts up and displays the logon dialog.
Observed behaviour: rdesktop exits with ""ERROR: Connection closed"" and
socat exits with ""Permission denied"".  (But it suceeds if root runs
socat.)
UDS files are created by trans_listen_address() and given permissions
0660, so only root can connect to it.  In this case, for the RDP client
connection, it it fine for any user to connect so it should be given
permissions 0666.
Note that this is only relevant when the port in /etc/xrdp/xrdp.ini has
been set to create a UDS instead of a TCP socket.  When a TCP port is
created any user (including remote users, unless the loopback interface
is used) can connect so this is not less secure.",+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,784,2017-06-23T17:24:42Z,2017-07-20T00:13:07Z,2017-07-20T18:43:29Z,MERGED,True,4,0,1,https://github.com/ben-cohen,UDS connection only accessible by root,1,[],https://github.com/neutrinolabs/xrdp/pull/784,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/784#issuecomment-316304726,"(If the ""port"" specified in /etc/xrdp/xrdp.ini is an absolute path then a
Unix Domain Socket (UDS) is created instead of a TCP port. I want to use
this feature to implement authentication over SSH, issue #773.)
If you run xrdp with a Unix Domain Socket (UDS) for the port specified in
/etc/xrdp/xrdp.ini then only root can connect to it.
Test case:


Edit /etc/xrdp/xrdp.ini to set ""port=/var/run/xrdp-local.socket"".


Restart xrdp.


Run the following, as a non-root user.


socat TCP-LISTEN:12345 UNIX-CONNECT:/var/run/xrdp-local.socket &
rdesktop localhost:12345
Expected behaviour: rdesktop starts up and displays the logon dialog.
Observed behaviour: rdesktop exits with ""ERROR: Connection closed"" and
socat exits with ""Permission denied"".  (But it suceeds if root runs
socat.)
UDS files are created by trans_listen_address() and given permissions
0660, so only root can connect to it.  In this case, for the RDP client
connection, it it fine for any user to connect so it should be given
permissions 0666.
Note that this is only relevant when the port in /etc/xrdp/xrdp.ini has
been set to create a UDS instead of a TCP socket.  When a TCP port is
created any user (including remote users, unless the loopback interface
is used) can connect so this is not less secure.","I'm OK with this except for commit message.
""UDS connection only accessible by root"" is misleading because the commit allow everyone to access the socket. Would you please ammend the commit and force push?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,784,2017-06-23T17:24:42Z,2017-07-20T00:13:07Z,2017-07-20T18:43:29Z,MERGED,True,4,0,1,https://github.com/ben-cohen,UDS connection only accessible by root,1,[],https://github.com/neutrinolabs/xrdp/pull/784,https://github.com/ben-cohen,5,https://github.com/neutrinolabs/xrdp/pull/784#issuecomment-316455767,"(If the ""port"" specified in /etc/xrdp/xrdp.ini is an absolute path then a
Unix Domain Socket (UDS) is created instead of a TCP port. I want to use
this feature to implement authentication over SSH, issue #773.)
If you run xrdp with a Unix Domain Socket (UDS) for the port specified in
/etc/xrdp/xrdp.ini then only root can connect to it.
Test case:


Edit /etc/xrdp/xrdp.ini to set ""port=/var/run/xrdp-local.socket"".


Restart xrdp.


Run the following, as a non-root user.


socat TCP-LISTEN:12345 UNIX-CONNECT:/var/run/xrdp-local.socket &
rdesktop localhost:12345
Expected behaviour: rdesktop starts up and displays the logon dialog.
Observed behaviour: rdesktop exits with ""ERROR: Connection closed"" and
socat exits with ""Permission denied"".  (But it suceeds if root runs
socat.)
UDS files are created by trans_listen_address() and given permissions
0660, so only root can connect to it.  In this case, for the RDP client
connection, it it fine for any user to connect so it should be given
permissions 0666.
Note that this is only relevant when the port in /etc/xrdp/xrdp.ini has
been set to create a UDS instead of a TCP socket.  When a TCP port is
created any user (including remote users, unless the loopback interface
is used) can connect so this is not less secure.",Yes - the summary for the fix should be the opposite of the title for the Issue!  I have changed it.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,784,2017-06-23T17:24:42Z,2017-07-20T00:13:07Z,2017-07-20T18:43:29Z,MERGED,True,4,0,1,https://github.com/ben-cohen,UDS connection only accessible by root,1,[],https://github.com/neutrinolabs/xrdp/pull/784,https://github.com/metalefty,6,https://github.com/neutrinolabs/xrdp/pull/784#issuecomment-316557975,"(If the ""port"" specified in /etc/xrdp/xrdp.ini is an absolute path then a
Unix Domain Socket (UDS) is created instead of a TCP port. I want to use
this feature to implement authentication over SSH, issue #773.)
If you run xrdp with a Unix Domain Socket (UDS) for the port specified in
/etc/xrdp/xrdp.ini then only root can connect to it.
Test case:


Edit /etc/xrdp/xrdp.ini to set ""port=/var/run/xrdp-local.socket"".


Restart xrdp.


Run the following, as a non-root user.


socat TCP-LISTEN:12345 UNIX-CONNECT:/var/run/xrdp-local.socket &
rdesktop localhost:12345
Expected behaviour: rdesktop starts up and displays the logon dialog.
Observed behaviour: rdesktop exits with ""ERROR: Connection closed"" and
socat exits with ""Permission denied"".  (But it suceeds if root runs
socat.)
UDS files are created by trans_listen_address() and given permissions
0660, so only root can connect to it.  In this case, for the RDP client
connection, it it fine for any user to connect so it should be given
permissions 0666.
Note that this is only relevant when the port in /etc/xrdp/xrdp.ini has
been set to create a UDS instead of a TCP socket.  When a TCP port is
created any user (including remote users, unless the loopback interface
is used) can connect so this is not less secure.",Thanks!,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,789,2017-06-30T08:00:28Z,2017-07-04T10:59:20Z,2017-07-04T10:59:20Z,CLOSED,False,9,1,1,https://github.com/metalefty,vnc: do not send any data if cliprdr channel not available,1,[],https://github.com/neutrinolabs/xrdp/pull/789,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/789,"This caused disconnection when client connecting without cliprdr
channel because VNC module tries to send data to a non-existent
channel (channel_id = -1).
Should fix #755.","This caused disconnection when client connecting without cliprdr
channel because VNC module tries to send data to a non-existent
channel (channel_id = -1).
Should fix #755.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,789,2017-06-30T08:00:28Z,2017-07-04T10:59:20Z,2017-07-04T10:59:20Z,CLOSED,False,9,1,1,https://github.com/metalefty,vnc: do not send any data if cliprdr channel not available,1,[],https://github.com/neutrinolabs/xrdp/pull/789,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/789#issuecomment-312849338,"This caused disconnection when client connecting without cliprdr
channel because VNC module tries to send data to a non-existent
channel (channel_id = -1).
Should fix #755.",This approach is not correct.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,792,2017-07-01T15:21:08Z,2020-11-30T09:44:51Z,2020-11-30T09:44:51Z,CLOSED,False,887,1238,17,https://github.com/geiseri,Unify chanserv logging,10,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/792,https://github.com/geiseri,1,https://github.com/neutrinolabs/xrdp/pull/792,"I removed all instances of LOG(...) and replaced them with LOGM(...).  The following mappings where used:

0 -> LOG_LEVEL_INFO (or LOG_LEVEL_ERROR if it was an error)
1 -> LOG_LEVEL_INFO
10 -> LOG_LEVEL_DEBUG
20 -> LOG_LEVEL_DEBUG","I removed all instances of LOG(...) and replaced them with LOGM(...).  The following mappings where used:

0 -> LOG_LEVEL_INFO (or LOG_LEVEL_ERROR if it was an error)
1 -> LOG_LEVEL_INFO
10 -> LOG_LEVEL_DEBUG
20 -> LOG_LEVEL_DEBUG",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,792,2017-07-01T15:21:08Z,2020-11-30T09:44:51Z,2020-11-30T09:44:51Z,CLOSED,False,887,1238,17,https://github.com/geiseri,Unify chanserv logging,10,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/792,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/792#issuecomment-312488287,"I removed all instances of LOG(...) and replaced them with LOGM(...).  The following mappings where used:

0 -> LOG_LEVEL_INFO (or LOG_LEVEL_ERROR if it was an error)
1 -> LOG_LEVEL_INFO
10 -> LOG_LEVEL_DEBUG
20 -> LOG_LEVEL_DEBUG",+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,792,2017-07-01T15:21:08Z,2020-11-30T09:44:51Z,2020-11-30T09:44:51Z,CLOSED,False,887,1238,17,https://github.com/geiseri,Unify chanserv logging,10,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/792,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/792#issuecomment-312797223,"I removed all instances of LOG(...) and replaced them with LOGM(...).  The following mappings where used:

0 -> LOG_LEVEL_INFO (or LOG_LEVEL_ERROR if it was an error)
1 -> LOG_LEVEL_INFO
10 -> LOG_LEVEL_DEBUG
20 -> LOG_LEVEL_DEBUG","I think macros such as log_error, log_always, log_info, log_debug in chansrv/clipboard.c should use LOGM. These macros use g_write or g_writeln. They writes log to stdout but it is not helpful.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,792,2017-07-01T15:21:08Z,2020-11-30T09:44:51Z,2020-11-30T09:44:51Z,CLOSED,False,887,1238,17,https://github.com/geiseri,Unify chanserv logging,10,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/792,https://github.com/geiseri,4,https://github.com/neutrinolabs/xrdp/pull/792#issuecomment-312846750,"I removed all instances of LOG(...) and replaced them with LOGM(...).  The following mappings where used:

0 -> LOG_LEVEL_INFO (or LOG_LEVEL_ERROR if it was an error)
1 -> LOG_LEVEL_INFO
10 -> LOG_LEVEL_DEBUG
20 -> LOG_LEVEL_DEBUG","@metalefty okay, I will get that one too.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,792,2017-07-01T15:21:08Z,2020-11-30T09:44:51Z,2020-11-30T09:44:51Z,CLOSED,False,887,1238,17,https://github.com/geiseri,Unify chanserv logging,10,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/792,https://github.com/geiseri,5,https://github.com/neutrinolabs/xrdp/pull/792#issuecomment-312873494,"I removed all instances of LOG(...) and replaced them with LOGM(...).  The following mappings where used:

0 -> LOG_LEVEL_INFO (or LOG_LEVEL_ERROR if it was an error)
1 -> LOG_LEVEL_INFO
10 -> LOG_LEVEL_DEBUG
20 -> LOG_LEVEL_DEBUG","After looking at mlog.h it looks like there are some big differences in functionality.  it might be better for the output logic in mlog.h to use the log_message(...) plumbing and then have all of the modules use the log_error, log_always, log_info and log_debug.  Does that sound like a better plan?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,792,2017-07-01T15:21:08Z,2020-11-30T09:44:51Z,2020-11-30T09:44:51Z,CLOSED,False,887,1238,17,https://github.com/geiseri,Unify chanserv logging,10,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/792,https://github.com/metalefty,6,https://github.com/neutrinolabs/xrdp/pull/792#issuecomment-313336299,"I removed all instances of LOG(...) and replaced them with LOGM(...).  The following mappings where used:

0 -> LOG_LEVEL_INFO (or LOG_LEVEL_ERROR if it was an error)
1 -> LOG_LEVEL_INFO
10 -> LOG_LEVEL_DEBUG
20 -> LOG_LEVEL_DEBUG","Don't forget to remove removed files in Makefile.am.
I think log_* functions are debug logs. So converting log_error -> LOGM((LOG_LEVEL_ERROR might be too noisy.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,792,2017-07-01T15:21:08Z,2020-11-30T09:44:51Z,2020-11-30T09:44:51Z,CLOSED,False,887,1238,17,https://github.com/geiseri,Unify chanserv logging,10,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/792,https://github.com/metalefty,7,https://github.com/neutrinolabs/xrdp/pull/792#issuecomment-376411262,"I removed all instances of LOG(...) and replaced them with LOGM(...).  The following mappings where used:

0 -> LOG_LEVEL_INFO (or LOG_LEVEL_ERROR if it was an error)
1 -> LOG_LEVEL_INFO
10 -> LOG_LEVEL_DEBUG
20 -> LOG_LEVEL_DEBUG",I'm working on this based on your work.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,792,2017-07-01T15:21:08Z,2020-11-30T09:44:51Z,2020-11-30T09:44:51Z,CLOSED,False,887,1238,17,https://github.com/geiseri,Unify chanserv logging,10,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/792,https://github.com/aquesnel,8,https://github.com/neutrinolabs/xrdp/pull/792#issuecomment-735553644,"I removed all instances of LOG(...) and replaced them with LOGM(...).  The following mappings where used:

0 -> LOG_LEVEL_INFO (or LOG_LEVEL_ERROR if it was an error)
1 -> LOG_LEVEL_INFO
10 -> LOG_LEVEL_DEBUG
20 -> LOG_LEVEL_DEBUG",This pull request can be closed now since PR #1633 includes these changes and has been merged to devel.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,793,2017-07-04T08:47:10Z,2017-07-06T03:36:48Z,2017-07-06T03:37:02Z,MERGED,True,7,7,2,https://github.com/metalefty,chansrv: include display number in chansrv log filename,2,[],https://github.com/neutrinolabs/xrdp/pull/793,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/793,"since xrdp-chansrv may be run multiple instances per user. For example,
Xvnc backend creates one session per screen geometry.","since xrdp-chansrv may be run multiple instances per user. For example,
Xvnc backend creates one session per screen geometry.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,795,2017-07-05T02:43:20Z,2017-07-06T04:44:54Z,2017-09-28T05:19:27Z,MERGED,True,6,1,1,https://github.com/metalefty,Fix Xvnc backend disconnects when some data copied to clipboard,1,['clipboard'],https://github.com/neutrinolabs/xrdp/pull/795,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/795,"Should fix #755.

I tested these 4 scenario works fine (no disconnection, copy & paste works).
Now clipboard is working fine with Windows 7 mstsc, MS Remote Desktop for Mac 8.0.40 (Build 27310) however not working with FreeRDP due to FreeRDP/FreeRDP#3309.

Xvnc backend + clipboard sharing enabled client side
Xvnc backend + clipboard sharing disabled client side
vnc-proxy + clipboard sharing enabled client side
vnc-proxy + clipboard sharing disabled client side","Should fix #755.

I tested these 4 scenario works fine (no disconnection, copy & paste works).
Now clipboard is working fine with Windows 7 mstsc, MS Remote Desktop for Mac 8.0.40 (Build 27310) however not working with FreeRDP due to FreeRDP/FreeRDP#3309.

Xvnc backend + clipboard sharing enabled client side
Xvnc backend + clipboard sharing disabled client side
vnc-proxy + clipboard sharing enabled client side
vnc-proxy + clipboard sharing disabled client side",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,795,2017-07-05T02:43:20Z,2017-07-06T04:44:54Z,2017-09-28T05:19:27Z,MERGED,True,6,1,1,https://github.com/metalefty,Fix Xvnc backend disconnects when some data copied to clipboard,1,['clipboard'],https://github.com/neutrinolabs/xrdp/pull/795,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/795#issuecomment-313293654,"Should fix #755.

I tested these 4 scenario works fine (no disconnection, copy & paste works).
Now clipboard is working fine with Windows 7 mstsc, MS Remote Desktop for Mac 8.0.40 (Build 27310) however not working with FreeRDP due to FreeRDP/FreeRDP#3309.

Xvnc backend + clipboard sharing enabled client side
Xvnc backend + clipboard sharing disabled client side
vnc-proxy + clipboard sharing enabled client side
vnc-proxy + clipboard sharing disabled client side",Let's merge and observe.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,796,2017-07-05T05:05:05Z,2017-07-06T04:14:28Z,2017-07-06T04:14:31Z,MERGED,True,12,4,1,https://github.com/metalefty,Reword messages and change log level in ssl_get_protocols_from_string(),2,[],https://github.com/neutrinolabs/xrdp/pull/796,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/796,"Describe the situation clearer.
Increase log level since unavailability of ssl protocols defined in config file
may weaken security and it is important for users.","Describe the situation clearer.
Increase log level since unavailability of ssl protocols defined in config file
may weaken security and it is important for users.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,797,2017-07-05T19:57:24Z,2017-07-06T04:40:26Z,2017-07-06T16:16:06Z,MERGED,True,13,12,2,https://github.com/ben-cohen,xrdp-sesadmin: fix error when there are no sessions,1,[],https://github.com/neutrinolabs/xrdp/pull/797,https://github.com/ben-cohen,1,https://github.com/neutrinolabs/xrdp/pull/797,"Test case:  On a system running xrdp with no sessions running run:
xrdp-sesadmin -u=<user> -p=<password> -c=list
Expected result: ""No sessions."" (ignoring debug output)
Observed result: ""Error getting session list.""
In the SCP_SERVER_STATE_MNG_LISTREQ case in scp_v1_mng_process() if
there are no sessions it ends the scp session, which causes an error in
the client.  In commit 0017081 the client was changed to report errors,
giving the result above.
Fix by calling scp_v1s_mng_list_sessions() from scp_v1_mng_process()
even when there are no sessions, and if so sending a packet with a count
of zero so that the client gets what it expects.","Test case:  On a system running xrdp with no sessions running run:
xrdp-sesadmin -u=<user> -p=<password> -c=list
Expected result: ""No sessions."" (ignoring debug output)
Observed result: ""Error getting session list.""
In the SCP_SERVER_STATE_MNG_LISTREQ case in scp_v1_mng_process() if
there are no sessions it ends the scp session, which causes an error in
the client.  In commit 0017081 the client was changed to report errors,
giving the result above.
Fix by calling scp_v1s_mng_list_sessions() from scp_v1_mng_process()
even when there are no sessions, and if so sending a packet with a count
of zero so that the client gets what it expects.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,797,2017-07-05T19:57:24Z,2017-07-06T04:40:26Z,2017-07-06T16:16:06Z,MERGED,True,13,12,2,https://github.com/ben-cohen,xrdp-sesadmin: fix error when there are no sessions,1,[],https://github.com/neutrinolabs/xrdp/pull/797,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/797#issuecomment-313276914,"Test case:  On a system running xrdp with no sessions running run:
xrdp-sesadmin -u=<user> -p=<password> -c=list
Expected result: ""No sessions."" (ignoring debug output)
Observed result: ""Error getting session list.""
In the SCP_SERVER_STATE_MNG_LISTREQ case in scp_v1_mng_process() if
there are no sessions it ends the scp session, which causes an error in
the client.  In commit 0017081 the client was changed to report errors,
giving the result above.
Fix by calling scp_v1s_mng_list_sessions() from scp_v1_mng_process()
even when there are no sessions, and if so sending a packet with a count
of zero so that the client gets what it expects.","I quickly did test run, it looks fine. Good catch!",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,798,2017-07-06T03:16:42Z,2017-07-06T03:27:57Z,2017-07-06T03:28:07Z,MERGED,True,1,1,1,https://github.com/metalefty,travis: enable build test on v0.9 branch,1,[],https://github.com/neutrinolabs/xrdp/pull/798,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/798,it is the latest stable branch.,it is the latest stable branch.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,799,2017-07-06T08:25:00Z,2017-07-06T09:07:33Z,2017-07-06T09:07:36Z,MERGED,True,26,3,4,https://github.com/metalefty,Prepare release v0.9.3,1,[],https://github.com/neutrinolabs/xrdp/pull/799,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/799,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,802,2017-07-07T15:12:50Z,2017-07-13T07:23:14Z,2017-07-13T07:23:14Z,CLOSED,False,11,0,1,https://github.com/geiseri,Ensure socket directory present,4,[],https://github.com/neutrinolabs/xrdp/pull/802,https://github.com/geiseri,1,https://github.com/neutrinolabs/xrdp/pull/802,In cases where the socket directory is in tmpfs it cannot always be certain to exist.  Debian has a hack around this by running a shell script to generate the needed directory structure when the socket dir is not /tmp/.xrdp.  This does the equivalent at startup of sessman.  This should fix issue #801.,In cases where the socket directory is in tmpfs it cannot always be certain to exist.  Debian has a hack around this by running a shell script to generate the needed directory structure when the socket dir is not /tmp/.xrdp.  This does the equivalent at startup of sessman.  This should fix issue #801.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,802,2017-07-07T15:12:50Z,2017-07-13T07:23:14Z,2017-07-13T07:23:14Z,CLOSED,False,11,0,1,https://github.com/geiseri,Ensure socket directory present,4,[],https://github.com/neutrinolabs/xrdp/pull/802,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/802#issuecomment-313984684,In cases where the socket directory is in tmpfs it cannot always be certain to exist.  Debian has a hack around this by running a shell script to generate the needed directory structure when the socket dir is not /tmp/.xrdp.  This does the equivalent at startup of sessman.  This should fix issue #801.,+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,802,2017-07-07T15:12:50Z,2017-07-13T07:23:14Z,2017-07-13T07:23:14Z,CLOSED,False,11,0,1,https://github.com/geiseri,Ensure socket directory present,4,[],https://github.com/neutrinolabs/xrdp/pull/802,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/802#issuecomment-314994628,In cases where the socket directory is in tmpfs it cannot always be certain to exist.  Debian has a hack around this by running a shell script to generate the needed directory structure when the socket dir is not /tmp/.xrdp.  This does the equivalent at startup of sessman.  This should fix issue #801.,Replaced by #809.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,804,2017-07-09T08:27:46Z,2017-07-12T06:03:09Z,2017-07-29T08:12:44Z,MERGED,True,35,14,1,https://github.com/jsorg71,fix for protocol error when 32 bit color and non rfx,1,[],https://github.com/neutrinolabs/xrdp/pull/804,https://github.com/jsorg71,1,https://github.com/neutrinolabs/xrdp/pull/804,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,804,2017-07-09T08:27:46Z,2017-07-12T06:03:09Z,2017-07-29T08:12:44Z,MERGED,True,35,14,1,https://github.com/jsorg71,fix for protocol error when 32 bit color and non rfx,1,[],https://github.com/neutrinolabs/xrdp/pull/804,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/804#issuecomment-313980518,,Works fine. I don't see no protocol errors.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,804,2017-07-09T08:27:46Z,2017-07-12T06:03:09Z,2017-07-29T08:12:44Z,MERGED,True,35,14,1,https://github.com/jsorg71,fix for protocol error when 32 bit color and non rfx,1,[],https://github.com/neutrinolabs/xrdp/pull/804,https://github.com/speidy,3,https://github.com/neutrinolabs/xrdp/pull/804#issuecomment-313997080,,"Wow! I totally forgot about the order size issue!

@jsorg71 Has the issue reproduced easily for you? I wonder why I didn't
face it. Might be special resolution.

+1
…
-- 
Idan Freiberg

PGP FP: 8108 7EC9 806E 4980 75F2  72B3 8AD3 2D04 337B 1F18",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,804,2017-07-09T08:27:46Z,2017-07-12T06:03:09Z,2017-07-29T08:12:44Z,MERGED,True,35,14,1,https://github.com/jsorg71,fix for protocol error when 32 bit color and non rfx,1,[],https://github.com/neutrinolabs/xrdp/pull/804,https://github.com/jsorg71,4,https://github.com/neutrinolabs/xrdp/pull/804#issuecomment-313998114,,"@speidy Yes, easy to reproduce.  Turn off bitmap compression in xrdp.ini and then connect at 32 bit color and no RFX.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,804,2017-07-09T08:27:46Z,2017-07-12T06:03:09Z,2017-07-29T08:12:44Z,MERGED,True,35,14,1,https://github.com/jsorg71,fix for protocol error when 32 bit color and non rfx,1,[],https://github.com/neutrinolabs/xrdp/pull/804,https://github.com/tfischer77,5,https://github.com/neutrinolabs/xrdp/pull/804#issuecomment-314055945,,"Just had the opportunity to test. Everything is working fine, I will close #737 as soon as the Pull request has been merged.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,804,2017-07-09T08:27:46Z,2017-07-12T06:03:09Z,2017-07-29T08:12:44Z,MERGED,True,35,14,1,https://github.com/jsorg71,fix for protocol error when 32 bit color and non rfx,1,[],https://github.com/neutrinolabs/xrdp/pull/804,https://github.com/metalefty,6,https://github.com/neutrinolabs/xrdp/pull/804#issuecomment-314662366,,Let's merge and prepare release.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,805,2017-07-10T01:42:04Z,2017-07-10T02:58:11Z,2017-07-10T02:58:14Z,MERGED,True,1,1,1,https://github.com/metalefty,common: fix a glitch with IPv4 struct initialization,1,[],https://github.com/neutrinolabs/xrdp/pull/805,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/805,"Pointed out by: andrecbarros
Closes: #803","Pointed out by: andrecbarros
Closes: #803",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,805,2017-07-10T01:42:04Z,2017-07-10T02:58:11Z,2017-07-10T02:58:14Z,MERGED,True,1,1,1,https://github.com/metalefty,common: fix a glitch with IPv4 struct initialization,1,[],https://github.com/neutrinolabs/xrdp/pull/805,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/805#issuecomment-313988286,"Pointed out by: andrecbarros
Closes: #803",This is simple and clear. Let me merge this immediately.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,805,2017-07-10T01:42:04Z,2017-07-10T02:58:11Z,2017-07-10T02:58:14Z,MERGED,True,1,1,1,https://github.com/metalefty,common: fix a glitch with IPv4 struct initialization,1,[],https://github.com/neutrinolabs/xrdp/pull/805,https://github.com/jsorg71,3,https://github.com/neutrinolabs/xrdp/pull/805#issuecomment-313988590,"Pointed out by: andrecbarros
Closes: #803",+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,806,2017-07-10T02:27:59Z,2017-07-12T08:58:37Z,2017-07-12T08:58:38Z,MERGED,True,7,3,1,https://github.com/jsorg71,"sesman: move auth_start_session, auth_stop_session, and auth_end to c…",1,[],https://github.com/neutrinolabs/xrdp/pull/806,https://github.com/jsorg71,1,https://github.com/neutrinolabs/xrdp/pull/806,…hild process,…hild process,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,806,2017-07-10T02:27:59Z,2017-07-12T08:58:37Z,2017-07-12T08:58:38Z,MERGED,True,7,3,1,https://github.com/jsorg71,"sesman: move auth_start_session, auth_stop_session, and auth_end to c…",1,[],https://github.com/neutrinolabs/xrdp/pull/806,https://github.com/jsorg71,2,https://github.com/neutrinolabs/xrdp/pull/806#issuecomment-313988668,…hild process,This PR should replace #779,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,806,2017-07-10T02:27:59Z,2017-07-12T08:58:37Z,2017-07-12T08:58:38Z,MERGED,True,7,3,1,https://github.com/jsorg71,"sesman: move auth_start_session, auth_stop_session, and auth_end to c…",1,[],https://github.com/neutrinolabs/xrdp/pull/806,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/806#issuecomment-314015294,…hild process,"Tested on FreeBSD, I confirmed that this PR breaks nothing for FreeBSD.
If this solves systemd sessions issue, I'm OK with merging this.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,806,2017-07-10T02:27:59Z,2017-07-12T08:58:37Z,2017-07-12T08:58:38Z,MERGED,True,7,3,1,https://github.com/jsorg71,"sesman: move auth_start_session, auth_stop_session, and auth_end to c…",1,[],https://github.com/neutrinolabs/xrdp/pull/806,https://github.com/moobyfr,4,https://github.com/neutrinolabs/xrdp/pull/806#issuecomment-314083805,…hild process,"Tested on linux jessie + ldap/krb5, the users have the pam settings applied, so not disturbing the  CVE-2017-6967 fix. And it fix the original issue #778  about systemd",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,806,2017-07-10T02:27:59Z,2017-07-12T08:58:37Z,2017-07-12T08:58:38Z,MERGED,True,7,3,1,https://github.com/jsorg71,"sesman: move auth_start_session, auth_stop_session, and auth_end to c…",1,[],https://github.com/neutrinolabs/xrdp/pull/806,https://github.com/metalefty,5,https://github.com/neutrinolabs/xrdp/pull/806#issuecomment-314700439,…hild process,Let's merge and prepare release.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,809,2017-07-12T07:23:35Z,2017-07-13T04:41:27Z,2017-07-13T04:41:31Z,MERGED,True,7,3,2,https://github.com/metalefty,Ensure socket directory present,3,[],https://github.com/neutrinolabs/xrdp/pull/809,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/809,This PR should replace #802 and solves #801.,This PR should replace #802 and solves #801.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,810,2017-07-13T05:23:02Z,2017-07-13T05:34:20Z,2017-09-28T05:19:49Z,MERGED,True,9,2,1,https://github.com/metalefty,Prepare v0.9.3,3,[],https://github.com/neutrinolabs/xrdp/pull/810,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/810,Update NEWS and mention about Win 10 RFX issue.,Update NEWS and mention about Win 10 RFX issue.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,811,2017-07-13T08:29:47Z,2017-07-31T23:40:31Z,2017-07-31T23:40:46Z,MERGED,True,165,9,6,https://github.com/metalefty,Accept prefill credentials in base64 form,8,[],https://github.com/neutrinolabs/xrdp/pull/811,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/811,"prefill username and password can be written like this:
 username=ask{base64}YmFzZTY0
 username={base64}YmFzZTY0
 password=ask{base64}YmFzZTs2NCFwYXNzd29yZCM= ; password=base;64!password#
 password={base64}YmFzZTs2NCFwYXNzd29yZCM=

This solves in case username or password includes comment out symbols such as ;, #, ! described in #153.","prefill username and password can be written like this:
 username=ask{base64}YmFzZTY0
 username={base64}YmFzZTY0
 password=ask{base64}YmFzZTs2NCFwYXNzd29yZCM= ; password=base;64!password#
 password={base64}YmFzZTs2NCFwYXNzd29yZCM=

This solves in case username or password includes comment out symbols such as ;, #, ! described in #153.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,811,2017-07-13T08:29:47Z,2017-07-31T23:40:31Z,2017-07-31T23:40:46Z,MERGED,True,165,9,6,https://github.com/metalefty,Accept prefill credentials in base64 form,8,[],https://github.com/neutrinolabs/xrdp/pull/811,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/811#issuecomment-315972292,"prefill username and password can be written like this:
 username=ask{base64}YmFzZTY0
 username={base64}YmFzZTY0
 password=ask{base64}YmFzZTs2NCFwYXNzd29yZCM= ; password=base;64!password#
 password={base64}YmFzZTs2NCFwYXNzd29yZCM=

This solves in case username or password includes comment out symbols such as ;, #, ! described in #153.","I fixed your pointing outs.
Also, I did force push as I fixed typo in commit message.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,811,2017-07-13T08:29:47Z,2017-07-31T23:40:31Z,2017-07-31T23:40:46Z,MERGED,True,165,9,6,https://github.com/metalefty,Accept prefill credentials in base64 form,8,[],https://github.com/neutrinolabs/xrdp/pull/811,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/811#issuecomment-316259220,"prefill username and password can be written like this:
 username=ask{base64}YmFzZTY0
 username={base64}YmFzZTY0
 password=ask{base64}YmFzZTs2NCFwYXNzd29yZCM= ; password=base;64!password#
 password={base64}YmFzZTs2NCFwYXNzd29yZCM=

This solves in case username or password includes comment out symbols such as ;, #, ! described in #153.",@cocoon I'd appreciate if you test this again. We're preparing to merge this.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,811,2017-07-13T08:29:47Z,2017-07-31T23:40:31Z,2017-07-31T23:40:46Z,MERGED,True,165,9,6,https://github.com/metalefty,Accept prefill credentials in base64 form,8,[],https://github.com/neutrinolabs/xrdp/pull/811,https://github.com/cocoon,4,https://github.com/neutrinolabs/xrdp/pull/811#issuecomment-316303897,"prefill username and password can be written like this:
 username=ask{base64}YmFzZTY0
 username={base64}YmFzZTY0
 password=ask{base64}YmFzZTs2NCFwYXNzd29yZCM= ; password=base;64!password#
 password={base64}YmFzZTs2NCFwYXNzd29yZCM=

This solves in case username or password includes comment out symbols such as ;, #, ! described in #153.","Test was successfull (at least for Base64, see below)!
xrdp installed on:
Ubuntu 16.04.2 LTS (4.4.0-83-generic #106-Ubuntu SMP)
compiled with flags filled with some custom variables:
./configure --enable-neutrinordp --enable-painter --enable-strict-locations --prefix=$full_path --sysconfdir=$sysConfPath --localstatedir=$run_path --with-socketdir=${run_path}/socket
Targets tested password containing special chars:
-Xorg (libxup.so) + XFCE
base64 encoded user + base64 encoded password

-neutrinordp (libxrdpneutrinordp.so) to Windows 2012 R2:
base64 encoded user@domain.xyz + base64 encoded password
base64 encoded user + base64 encoded password + domain=domain.xyz
base64 encoded user + base64 encoded password

Problems with this branch:
neutrinordp crashes because of missing $HOME env / missing ""User=root"" in systemd-service-file
see: #719",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,811,2017-07-13T08:29:47Z,2017-07-31T23:40:31Z,2017-07-31T23:40:46Z,MERGED,True,165,9,6,https://github.com/metalefty,Accept prefill credentials in base64 form,8,[],https://github.com/neutrinolabs/xrdp/pull/811,https://github.com/metalefty,5,https://github.com/neutrinolabs/xrdp/pull/811#issuecomment-316310178,"prefill username and password can be written like this:
 username=ask{base64}YmFzZTY0
 username={base64}YmFzZTY0
 password=ask{base64}YmFzZTs2NCFwYXNzd29yZCM= ; password=base;64!password#
 password={base64}YmFzZTs2NCFwYXNzd29yZCM=

This solves in case username or password includes comment out symbols such as ;, #, ! described in #153.","Thanks for testing.
I understand #719.  If you add User=root systemd service file, base64 user / password with neutrinordp works well, right?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,811,2017-07-13T08:29:47Z,2017-07-31T23:40:31Z,2017-07-31T23:40:46Z,MERGED,True,165,9,6,https://github.com/metalefty,Accept prefill credentials in base64 form,8,[],https://github.com/neutrinolabs/xrdp/pull/811,https://github.com/cocoon,6,https://github.com/neutrinolabs/xrdp/pull/811#issuecomment-316311836,"prefill username and password can be written like this:
 username=ask{base64}YmFzZTY0
 username={base64}YmFzZTY0
 password=ask{base64}YmFzZTs2NCFwYXNzd29yZCM= ; password=base;64!password#
 password={base64}YmFzZTs2NCFwYXNzd29yZCM=

This solves in case username or password includes comment out symbols such as ;, #, ! described in #153.","If you add User=root systemd service file, base64 user / password with neutrinordp works well, right?

Yes.
Or if neutrinordp is fixed.",True,{'LAUGH': ['https://github.com/metalefty']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,811,2017-07-13T08:29:47Z,2017-07-31T23:40:31Z,2017-07-31T23:40:46Z,MERGED,True,165,9,6,https://github.com/metalefty,Accept prefill credentials in base64 form,8,[],https://github.com/neutrinolabs/xrdp/pull/811,https://github.com/metalefty,7,https://github.com/neutrinolabs/xrdp/pull/811#issuecomment-317627308,"prefill username and password can be written like this:
 username=ask{base64}YmFzZTY0
 username={base64}YmFzZTY0
 password=ask{base64}YmFzZTs2NCFwYXNzd29yZCM= ; password=base;64!password#
 password={base64}YmFzZTs2NCFwYXNzd29yZCM=

This solves in case username or password includes comment out symbols such as ;, #, ! described in #153.",I think ready to merge.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,811,2017-07-13T08:29:47Z,2017-07-31T23:40:31Z,2017-07-31T23:40:46Z,MERGED,True,165,9,6,https://github.com/metalefty,Accept prefill credentials in base64 form,8,[],https://github.com/neutrinolabs/xrdp/pull/811,https://github.com/metalefty,8,https://github.com/neutrinolabs/xrdp/pull/811#issuecomment-318953980,"prefill username and password can be written like this:
 username=ask{base64}YmFzZTY0
 username={base64}YmFzZTY0
 password=ask{base64}YmFzZTs2NCFwYXNzd29yZCM= ; password=base;64!password#
 password={base64}YmFzZTs2NCFwYXNzd29yZCM=

This solves in case username or password includes comment out symbols such as ;, #, ! described in #153.","Any considerations, again? If nothing, I'll merge this within 24 hours.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,811,2017-07-13T08:29:47Z,2017-07-31T23:40:31Z,2017-07-31T23:40:46Z,MERGED,True,165,9,6,https://github.com/metalefty,Accept prefill credentials in base64 form,8,[],https://github.com/neutrinolabs/xrdp/pull/811,https://github.com/cocoon,9,https://github.com/neutrinolabs/xrdp/pull/811#issuecomment-318977466,"prefill username and password can be written like this:
 username=ask{base64}YmFzZTY0
 username={base64}YmFzZTY0
 password=ask{base64}YmFzZTs2NCFwYXNzd29yZCM= ; password=base;64!password#
 password={base64}YmFzZTs2NCFwYXNzd29yZCM=

This solves in case username or password includes comment out symbols such as ;, #, ! described in #153.","I found no problems, it is working great for me!",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,811,2017-07-13T08:29:47Z,2017-07-31T23:40:31Z,2017-07-31T23:40:46Z,MERGED,True,165,9,6,https://github.com/metalefty,Accept prefill credentials in base64 form,8,[],https://github.com/neutrinolabs/xrdp/pull/811,https://github.com/metalefty,10,https://github.com/neutrinolabs/xrdp/pull/811#issuecomment-319226841,"prefill username and password can be written like this:
 username=ask{base64}YmFzZTY0
 username={base64}YmFzZTY0
 password=ask{base64}YmFzZTs2NCFwYXNzd29yZCM= ; password=base;64!password#
 password={base64}YmFzZTs2NCFwYXNzd29yZCM=

This solves in case username or password includes comment out symbols such as ;, #, ! described in #153.",Thanks for testing again!,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,813,2017-07-13T17:10:53Z,2017-07-14T11:52:39Z,2017-07-14T11:52:39Z,MERGED,True,11,11,4,https://github.com/geiseri,Adjustments to XRDP_SOCKET_PATH make process,1,[],https://github.com/neutrinolabs/xrdp/pull/813,https://github.com/geiseri,1,https://github.com/neutrinolabs/xrdp/pull/813,This does 2 things.  The first is use g_create_path instead of g_create_dir to ensure the entire path is present when creating the socket path.  The second is to rename g_mk_temp_dir to something more meaningful.  It is now called g_mk_socket_path.,This does 2 things.  The first is use g_create_path instead of g_create_dir to ensure the entire path is present when creating the socket path.  The second is to rename g_mk_temp_dir to something more meaningful.  It is now called g_mk_socket_path.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,813,2017-07-13T17:10:53Z,2017-07-14T11:52:39Z,2017-07-14T11:52:39Z,MERGED,True,11,11,4,https://github.com/geiseri,Adjustments to XRDP_SOCKET_PATH make process,1,[],https://github.com/neutrinolabs/xrdp/pull/813,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/813#issuecomment-315237084,This does 2 things.  The first is use g_create_path instead of g_create_dir to ensure the entire path is present when creating the socket path.  The second is to rename g_mk_temp_dir to something more meaningful.  It is now called g_mk_socket_path.,+1 Thanks!,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,815,2017-07-14T12:12:35Z,2017-07-14T12:21:16Z,2017-07-14T12:21:20Z,MERGED,True,2,2,1,https://github.com/metalefty,common: fix more glitches in  IPv4 initialization,1,[],https://github.com/neutrinolabs/xrdp/pull/815,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/815,This is a final change before v0.9.3.,This is a final change before v0.9.3.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,819,2017-07-16T18:30:27Z,2021-11-18T04:31:35Z,2021-11-18T04:31:35Z,CLOSED,False,964,7,10,https://github.com/ben-cohen,Add shared memory file to rediscover sessions #800,4,"['work in progress', 'enhancement']",https://github.com/neutrinolabs/xrdp/pull/819,https://github.com/ben-cohen,1,https://github.com/neutrinolabs/xrdp/pull/819,"Allow xrdp-sesman to discover sessions still running that were created
by a previous xrdp-sesman process.
Implement this using a file-backed shared mmap region, visible to both
the daemon and session instances of xrdp-sesman.  Add a heartbeat
timestamp updated by the session instance so that the daemon instance
can infer whether the sessions in the mmap region are current or stale.
The shared memory can also be used to pass other data between daemon and
session instances, for example the session's idle time.
Add locking around access to g_sessions and the mmap region.  This is a
PTHREAD_PROCESS_SHARED lock which protects shared memory used by
separate processes.  Defining DEBUG_SESSION_LOCK enables logging to help
debug locking bugs.
Notes:


The number of sessions is limited by the size of the array in shared
memory, SESMAN_SHAREDMEM_MAX_SESSIONS.  This could be made dynamic
instead by growing the file and the mmap region.


If sesshm_try_open_existing_shm() finds a shm file but it looks
wrong, it creates a new one.  Perhaps it should instead exit with an
error?


In sesshm_thread() if the session xrdp-sesman notices that it has
been removed from the daemon's list it exits.  It should kill the X
server and/or window manager first.


This doesn't yet update idle times.  I need to work out how to get
this information from the X server.


This uses an array of sessions in the mmap region so the linked list
g_sessions might be redundant now.


Defining DONT_USE_SHM will let xrdp-sesman run without creating or
trying to use the mmap file.  This could be removed in the future.


I think the locking fixes an theorised bug where a session can be
removed from the g_sessions linked list in session_kill() (called from
the signal handler) at the same time as a session is added in
session_start_fork().","Allow xrdp-sesman to discover sessions still running that were created
by a previous xrdp-sesman process.
Implement this using a file-backed shared mmap region, visible to both
the daemon and session instances of xrdp-sesman.  Add a heartbeat
timestamp updated by the session instance so that the daemon instance
can infer whether the sessions in the mmap region are current or stale.
The shared memory can also be used to pass other data between daemon and
session instances, for example the session's idle time.
Add locking around access to g_sessions and the mmap region.  This is a
PTHREAD_PROCESS_SHARED lock which protects shared memory used by
separate processes.  Defining DEBUG_SESSION_LOCK enables logging to help
debug locking bugs.
Notes:


The number of sessions is limited by the size of the array in shared
memory, SESMAN_SHAREDMEM_MAX_SESSIONS.  This could be made dynamic
instead by growing the file and the mmap region.


If sesshm_try_open_existing_shm() finds a shm file but it looks
wrong, it creates a new one.  Perhaps it should instead exit with an
error?


In sesshm_thread() if the session xrdp-sesman notices that it has
been removed from the daemon's list it exits.  It should kill the X
server and/or window manager first.


This doesn't yet update idle times.  I need to work out how to get
this information from the X server.


This uses an array of sessions in the mmap region so the linked list
g_sessions might be redundant now.


Defining DONT_USE_SHM will let xrdp-sesman run without creating or
trying to use the mmap file.  This could be removed in the future.


I think the locking fixes an theorised bug where a session can be
removed from the g_sessions linked list in session_kill() (called from
the signal handler) at the same time as a session is added in
session_start_fork().",True,{'THUMBS_UP': ['https://github.com/yevster']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,819,2017-07-16T18:30:27Z,2021-11-18T04:31:35Z,2021-11-18T04:31:35Z,CLOSED,False,964,7,10,https://github.com/ben-cohen,Add shared memory file to rediscover sessions #800,4,"['work in progress', 'enhancement']",https://github.com/neutrinolabs/xrdp/pull/819,https://github.com/ben-cohen,2,https://github.com/neutrinolabs/xrdp/pull/819#issuecomment-315858188,"Allow xrdp-sesman to discover sessions still running that were created
by a previous xrdp-sesman process.
Implement this using a file-backed shared mmap region, visible to both
the daemon and session instances of xrdp-sesman.  Add a heartbeat
timestamp updated by the session instance so that the daemon instance
can infer whether the sessions in the mmap region are current or stale.
The shared memory can also be used to pass other data between daemon and
session instances, for example the session's idle time.
Add locking around access to g_sessions and the mmap region.  This is a
PTHREAD_PROCESS_SHARED lock which protects shared memory used by
separate processes.  Defining DEBUG_SESSION_LOCK enables logging to help
debug locking bugs.
Notes:


The number of sessions is limited by the size of the array in shared
memory, SESMAN_SHAREDMEM_MAX_SESSIONS.  This could be made dynamic
instead by growing the file and the mmap region.


If sesshm_try_open_existing_shm() finds a shm file but it looks
wrong, it creates a new one.  Perhaps it should instead exit with an
error?


In sesshm_thread() if the session xrdp-sesman notices that it has
been removed from the daemon's list it exits.  It should kill the X
server and/or window manager first.


This doesn't yet update idle times.  I need to work out how to get
this information from the X server.


This uses an array of sessions in the mmap region so the linked list
g_sessions might be redundant now.


Defining DONT_USE_SHM will let xrdp-sesman run without creating or
trying to use the mmap file.  This could be removed in the future.


I think the locking fixes an theorised bug where a session can be
removed from the g_sessions linked list in session_kill() (called from
the signal handler) at the same time as a session is added in
session_start_fork().",@speidy - I have implemented your suggestions in the two commits above.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,819,2017-07-16T18:30:27Z,2021-11-18T04:31:35Z,2021-11-18T04:31:35Z,CLOSED,False,964,7,10,https://github.com/ben-cohen,Add shared memory file to rediscover sessions #800,4,"['work in progress', 'enhancement']",https://github.com/neutrinolabs/xrdp/pull/819,https://github.com/mrichar1,3,https://github.com/neutrinolabs/xrdp/pull/819#issuecomment-431032884,"Allow xrdp-sesman to discover sessions still running that were created
by a previous xrdp-sesman process.
Implement this using a file-backed shared mmap region, visible to both
the daemon and session instances of xrdp-sesman.  Add a heartbeat
timestamp updated by the session instance so that the daemon instance
can infer whether the sessions in the mmap region are current or stale.
The shared memory can also be used to pass other data between daemon and
session instances, for example the session's idle time.
Add locking around access to g_sessions and the mmap region.  This is a
PTHREAD_PROCESS_SHARED lock which protects shared memory used by
separate processes.  Defining DEBUG_SESSION_LOCK enables logging to help
debug locking bugs.
Notes:


The number of sessions is limited by the size of the array in shared
memory, SESMAN_SHAREDMEM_MAX_SESSIONS.  This could be made dynamic
instead by growing the file and the mmap region.


If sesshm_try_open_existing_shm() finds a shm file but it looks
wrong, it creates a new one.  Perhaps it should instead exit with an
error?


In sesshm_thread() if the session xrdp-sesman notices that it has
been removed from the daemon's list it exits.  It should kill the X
server and/or window manager first.


This doesn't yet update idle times.  I need to work out how to get
this information from the X server.


This uses an array of sessions in the mmap region so the linked list
g_sessions might be redundant now.


Defining DONT_USE_SHM will let xrdp-sesman run without creating or
trying to use the mmap file.  This could be removed in the future.


I think the locking fixes an theorised bug where a session can be
removed from the g_sessions linked list in session_kill() (called from
the signal handler) at the same time as a session is added in
session_start_fork().","Just hit #800 and was looking to see if it has been fixed and found this PR - any chance this could get picked up and worked on again, as this would be really useful to have!",True,"{'THUMBS_UP': ['https://github.com/LiquidMind', 'https://github.com/arnonerba']}"
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,819,2017-07-16T18:30:27Z,2021-11-18T04:31:35Z,2021-11-18T04:31:35Z,CLOSED,False,964,7,10,https://github.com/ben-cohen,Add shared memory file to rediscover sessions #800,4,"['work in progress', 'enhancement']",https://github.com/neutrinolabs/xrdp/pull/819,https://github.com/luisdalves,4,https://github.com/neutrinolabs/xrdp/pull/819#issuecomment-558443202,"Allow xrdp-sesman to discover sessions still running that were created
by a previous xrdp-sesman process.
Implement this using a file-backed shared mmap region, visible to both
the daemon and session instances of xrdp-sesman.  Add a heartbeat
timestamp updated by the session instance so that the daemon instance
can infer whether the sessions in the mmap region are current or stale.
The shared memory can also be used to pass other data between daemon and
session instances, for example the session's idle time.
Add locking around access to g_sessions and the mmap region.  This is a
PTHREAD_PROCESS_SHARED lock which protects shared memory used by
separate processes.  Defining DEBUG_SESSION_LOCK enables logging to help
debug locking bugs.
Notes:


The number of sessions is limited by the size of the array in shared
memory, SESMAN_SHAREDMEM_MAX_SESSIONS.  This could be made dynamic
instead by growing the file and the mmap region.


If sesshm_try_open_existing_shm() finds a shm file but it looks
wrong, it creates a new one.  Perhaps it should instead exit with an
error?


In sesshm_thread() if the session xrdp-sesman notices that it has
been removed from the daemon's list it exits.  It should kill the X
server and/or window manager first.


This doesn't yet update idle times.  I need to work out how to get
this information from the X server.


This uses an array of sessions in the mmap region so the linked list
g_sessions might be redundant now.


Defining DONT_USE_SHM will let xrdp-sesman run without creating or
trying to use the mmap file.  This could be removed in the future.


I think the locking fixes an theorised bug where a session can be
removed from the g_sessions linked list in session_kill() (called from
the signal handler) at the same time as a session is added in
session_start_fork().",Hey guys. Do you have any plan to include this?,True,"{'THUMBS_UP': ['https://github.com/mrichar1', 'https://github.com/Prototyped', 'https://github.com/arnonerba']}"
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,819,2017-07-16T18:30:27Z,2021-11-18T04:31:35Z,2021-11-18T04:31:35Z,CLOSED,False,964,7,10,https://github.com/ben-cohen,Add shared memory file to rediscover sessions #800,4,"['work in progress', 'enhancement']",https://github.com/neutrinolabs/xrdp/pull/819,https://github.com/Prototyped,5,https://github.com/neutrinolabs/xrdp/pull/819#issuecomment-733569335,"Allow xrdp-sesman to discover sessions still running that were created
by a previous xrdp-sesman process.
Implement this using a file-backed shared mmap region, visible to both
the daemon and session instances of xrdp-sesman.  Add a heartbeat
timestamp updated by the session instance so that the daemon instance
can infer whether the sessions in the mmap region are current or stale.
The shared memory can also be used to pass other data between daemon and
session instances, for example the session's idle time.
Add locking around access to g_sessions and the mmap region.  This is a
PTHREAD_PROCESS_SHARED lock which protects shared memory used by
separate processes.  Defining DEBUG_SESSION_LOCK enables logging to help
debug locking bugs.
Notes:


The number of sessions is limited by the size of the array in shared
memory, SESMAN_SHAREDMEM_MAX_SESSIONS.  This could be made dynamic
instead by growing the file and the mmap region.


If sesshm_try_open_existing_shm() finds a shm file but it looks
wrong, it creates a new one.  Perhaps it should instead exit with an
error?


In sesshm_thread() if the session xrdp-sesman notices that it has
been removed from the daemon's list it exits.  It should kill the X
server and/or window manager first.


This doesn't yet update idle times.  I need to work out how to get
this information from the X server.


This uses an array of sessions in the mmap region so the linked list
g_sessions might be redundant now.


Defining DONT_USE_SHM will let xrdp-sesman run without creating or
trying to use the mmap file.  This could be removed in the future.


I think the locking fixes an theorised bug where a session can be
removed from the g_sessions linked list in session_kill() (called from
the signal handler) at the same time as a session is added in
session_start_fork().","This is of significant interest to people who have things like Debian/Ubuntu unattended-upgrades set up with needrestart. The latter willl restart systemd services impacted by an update, and this includes xrdp-sesman. As a result, after an upgrade of xrdp, I lose the ability to reattach to already-running sessions.
It seems merging this change will allow xrdp to ""reclaim"" the previously running sessions (modulo maintaining backward compatibility with the contents of the file across versions, or at least detecting incompatibility upon load, which is a whole other issue). This would resolve the problem.
(Instead of using a memory-mapped file which carries the risk that the structures change across xrdp upgrades, I would suggest instead using a SIGINT/SIGTERM/SIGQUIT handler that serializes out the structures into a forgiving format, e.g. JSON, where a newer version can load what is present and default the rest, and also the object can carry a file format version that a newer version can check against to determine whether it still has the ability to load it.)",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,819,2017-07-16T18:30:27Z,2021-11-18T04:31:35Z,2021-11-18T04:31:35Z,CLOSED,False,964,7,10,https://github.com/ben-cohen,Add shared memory file to rediscover sessions #800,4,"['work in progress', 'enhancement']",https://github.com/neutrinolabs/xrdp/pull/819,https://github.com/matt335672,6,https://github.com/neutrinolabs/xrdp/pull/819#issuecomment-733630532,"Allow xrdp-sesman to discover sessions still running that were created
by a previous xrdp-sesman process.
Implement this using a file-backed shared mmap region, visible to both
the daemon and session instances of xrdp-sesman.  Add a heartbeat
timestamp updated by the session instance so that the daemon instance
can infer whether the sessions in the mmap region are current or stale.
The shared memory can also be used to pass other data between daemon and
session instances, for example the session's idle time.
Add locking around access to g_sessions and the mmap region.  This is a
PTHREAD_PROCESS_SHARED lock which protects shared memory used by
separate processes.  Defining DEBUG_SESSION_LOCK enables logging to help
debug locking bugs.
Notes:


The number of sessions is limited by the size of the array in shared
memory, SESMAN_SHAREDMEM_MAX_SESSIONS.  This could be made dynamic
instead by growing the file and the mmap region.


If sesshm_try_open_existing_shm() finds a shm file but it looks
wrong, it creates a new one.  Perhaps it should instead exit with an
error?


In sesshm_thread() if the session xrdp-sesman notices that it has
been removed from the daemon's list it exits.  It should kill the X
server and/or window manager first.


This doesn't yet update idle times.  I need to work out how to get
this information from the X server.


This uses an array of sessions in the mmap region so the linked list
g_sessions might be redundant now.


Defining DONT_USE_SHM will let xrdp-sesman run without creating or
trying to use the mmap file.  This could be removed in the future.


I think the locking fixes an theorised bug where a session can be
removed from the g_sessions linked list in session_kill() (called from
the signal handler) at the same time as a session is added in
session_start_fork().","Hi all,
I'm a little late to this conversation I'm afraid. I absolutely agree this functionality is necessary from a restarting services perspective.
At the moment we're working on a rather important fix for a systemd change (#1684), which is looking like it's going to break this PR I'm afraid.
It's not all bad news however. Some of the functions of sesman need to be moved into the session leader process which runs the user session. This is going to involve active communication between sesman and the session leader.
Once this is done, we can arrange for the session leader to detect when sesman restarts and re-send the state data sesman needs to be able to re-establish connections.
I think this is a better systems design. The PR here, whether or not we're using a separate file, can't track session state changes while sesman is down. The session leaders however will be able to do this while sesman is stopped.
Please feel free to come back to me with any questions or comments about this.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,819,2017-07-16T18:30:27Z,2021-11-18T04:31:35Z,2021-11-18T04:31:35Z,CLOSED,False,964,7,10,https://github.com/ben-cohen,Add shared memory file to rediscover sessions #800,4,"['work in progress', 'enhancement']",https://github.com/neutrinolabs/xrdp/pull/819,https://github.com/metalefty,7,https://github.com/neutrinolabs/xrdp/pull/819#issuecomment-972529369,"Allow xrdp-sesman to discover sessions still running that were created
by a previous xrdp-sesman process.
Implement this using a file-backed shared mmap region, visible to both
the daemon and session instances of xrdp-sesman.  Add a heartbeat
timestamp updated by the session instance so that the daemon instance
can infer whether the sessions in the mmap region are current or stale.
The shared memory can also be used to pass other data between daemon and
session instances, for example the session's idle time.
Add locking around access to g_sessions and the mmap region.  This is a
PTHREAD_PROCESS_SHARED lock which protects shared memory used by
separate processes.  Defining DEBUG_SESSION_LOCK enables logging to help
debug locking bugs.
Notes:


The number of sessions is limited by the size of the array in shared
memory, SESMAN_SHAREDMEM_MAX_SESSIONS.  This could be made dynamic
instead by growing the file and the mmap region.


If sesshm_try_open_existing_shm() finds a shm file but it looks
wrong, it creates a new one.  Perhaps it should instead exit with an
error?


In sesshm_thread() if the session xrdp-sesman notices that it has
been removed from the daemon's list it exits.  It should kill the X
server and/or window manager first.


This doesn't yet update idle times.  I need to work out how to get
this information from the X server.


This uses an array of sessions in the mmap region so the linked list
g_sessions might be redundant now.


Defining DONT_USE_SHM will let xrdp-sesman run without creating or
trying to use the mmap file.  This could be removed in the future.


I think the locking fixes an theorised bug where a session can be
removed from the g_sessions linked list in session_kill() (called from
the signal handler) at the same time as a session is added in
session_start_fork().",This should be reconsidered after #1961.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,823,2017-07-17T18:11:54Z,2017-07-19T01:35:38Z,2017-07-19T01:35:38Z,MERGED,True,1,1,1,https://github.com/geiseri,Make the create path a bit more robust,1,[],https://github.com/neutrinolabs/xrdp/pull/823,https://github.com/geiseri,1,https://github.com/neutrinolabs/xrdp/pull/823,append a / to ensure the full path is created even when the config variable lacks a trailing /,append a / to ensure the full path is created even when the config variable lacks a trailing /,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,823,2017-07-17T18:11:54Z,2017-07-19T01:35:38Z,2017-07-19T01:35:38Z,MERGED,True,1,1,1,https://github.com/geiseri,Make the create path a bit more robust,1,[],https://github.com/neutrinolabs/xrdp/pull/823,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/823#issuecomment-315938824,append a / to ensure the full path is created even when the config variable lacks a trailing /,+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,824,2017-07-19T06:22:39Z,2017-07-21T05:04:51Z,2017-07-21T05:04:55Z,MERGED,True,12,1,4,https://github.com/metalefty,Add a pam file for FreeBSD,1,['FreeBSD'],https://github.com/neutrinolabs/xrdp/pull/824,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/824,as existing xrdp-sesman.unix doesn't suit FreeBSD.,as existing xrdp-sesman.unix doesn't suit FreeBSD.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,825,2017-07-19T07:11:00Z,2017-07-26T02:34:02Z,2017-07-26T02:34:05Z,MERGED,True,3,1,2,https://github.com/metalefty,sesman: search pam files also in ${sysconfdir}/pam.d,1,"['FreeBSD', 'sesman']",https://github.com/neutrinolabs/xrdp/pull/825,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/825,"as some operating system such as FreeBSD searches not only /etc/pam.d
but also /usr/local/etc/pam.d [1].
[1] https://www.freebsd.org/cgi/man.cgi?query=pam.d&sektion=5","as some operating system such as FreeBSD searches not only /etc/pam.d
but also /usr/local/etc/pam.d [1].
[1] https://www.freebsd.org/cgi/man.cgi?query=pam.d&sektion=5",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,831,2017-07-21T01:38:55Z,2017-09-13T00:04:59Z,2017-09-28T05:19:39Z,MERGED,True,70,0,2,https://github.com/metalefty,sesman: delete socket files when session exits,1,['sesman'],https://github.com/neutrinolabs/xrdp/pull/831,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/831,"Solves #812 and #830.
I'm not sure if pulse module can delete sockets by itself so deleting sockets on session exit.","Solves #812 and #830.
I'm not sure if pulse module can delete sockets by itself so deleting sockets on session exit.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,831,2017-07-21T01:38:55Z,2017-09-13T00:04:59Z,2017-09-28T05:19:39Z,MERGED,True,70,0,2,https://github.com/metalefty,sesman: delete socket files when session exits,1,['sesman'],https://github.com/neutrinolabs/xrdp/pull/831,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/831#issuecomment-317614180,"Solves #812 and #830.
I'm not sure if pulse module can delete sockets by itself so deleting sockets on session exit.",@jsorg71 Do you think there's better way to delete orphans socket files?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,831,2017-07-21T01:38:55Z,2017-09-13T00:04:59Z,2017-09-28T05:19:39Z,MERGED,True,70,0,2,https://github.com/metalefty,sesman: delete socket files when session exits,1,['sesman'],https://github.com/neutrinolabs/xrdp/pull/831,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/831#issuecomment-327668202,"Solves #812 and #830.
I'm not sure if pulse module can delete sockets by itself so deleting sockets on session exit.",I want to ship this to the next release.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,831,2017-07-21T01:38:55Z,2017-09-13T00:04:59Z,2017-09-28T05:19:39Z,MERGED,True,70,0,2,https://github.com/metalefty,sesman: delete socket files when session exits,1,['sesman'],https://github.com/neutrinolabs/xrdp/pull/831,https://github.com/moobyfr,4,https://github.com/neutrinolabs/xrdp/pull/831#issuecomment-328654962,"Solves #812 and #830.
I'm not sure if pulse module can delete sockets by itself so deleting sockets on session exit.","+1, working fine.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,831,2017-07-21T01:38:55Z,2017-09-13T00:04:59Z,2017-09-28T05:19:39Z,MERGED,True,70,0,2,https://github.com/metalefty,sesman: delete socket files when session exits,1,['sesman'],https://github.com/neutrinolabs/xrdp/pull/831,https://github.com/metalefty,5,https://github.com/neutrinolabs/xrdp/pull/831#issuecomment-329018742,"Solves #812 and #830.
I'm not sure if pulse module can delete sockets by itself so deleting sockets on session exit.",Let's merge.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,833,2017-07-24T04:51:45Z,2017-07-25T02:40:05Z,2017-07-28T03:58:06Z,MERGED,True,36,32,2,https://github.com/metalefty,Small refactoring before adding new audio codec,3,[],https://github.com/neutrinolabs/xrdp/pull/833,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/833,"I'm planning to introduce additional audio codecs such as ADPCM or AAC.
Let me refactor a little bit. Supporting more codecs make if-else-if-else deeper. Using switch-case instead.","I'm planning to introduce additional audio codecs such as ADPCM or AAC.
Let me refactor a little bit. Supporting more codecs make if-else-if-else deeper. Using switch-case instead.",True,{'THUMBS_UP': ['https://github.com/geiseri']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,833,2017-07-24T04:51:45Z,2017-07-25T02:40:05Z,2017-07-28T03:58:06Z,MERGED,True,36,32,2,https://github.com/metalefty,Small refactoring before adding new audio codec,3,[],https://github.com/neutrinolabs/xrdp/pull/833,https://github.com/jsorg71,2,https://github.com/neutrinolabs/xrdp/pull/833#issuecomment-317505301,"I'm planning to introduce additional audio codecs such as ADPCM or AAC.
Let me refactor a little bit. Supporting more codecs make if-else-if-else deeper. Using switch-case instead.","+1
BTW, I've got a working branch with AAC here
https://github.com/jsorg71/xrdp/tree/fdk-aac
I tested with MSTSC from windows 10.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,833,2017-07-24T04:51:45Z,2017-07-25T02:40:05Z,2017-07-28T03:58:06Z,MERGED,True,36,32,2,https://github.com/metalefty,Small refactoring before adding new audio codec,3,[],https://github.com/neutrinolabs/xrdp/pull/833,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/833#issuecomment-317591359,"I'm planning to introduce additional audio codecs such as ADPCM or AAC.
Let me refactor a little bit. Supporting more codecs make if-else-if-else deeper. Using switch-case instead.","Nice! I haven't actually started AAC yet.
What about ADPCM? I think I can use libsox for MS-ADPCM and researching how to use.  In my understanding, libsox supports not only MS-ADPCM but also A-law, mu-law, u-law without external libraries so we can add more than one codec by one library. Another advance of libsox is in RHEL repository. RHEL has very fewer number of multimedia libraries than Debian like distro.
If you know good alternatives, please let me know.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,833,2017-07-24T04:51:45Z,2017-07-25T02:40:05Z,2017-07-28T03:58:06Z,MERGED,True,36,32,2,https://github.com/metalefty,Small refactoring before adding new audio codec,3,[],https://github.com/neutrinolabs/xrdp/pull/833,https://github.com/jsorg71,4,https://github.com/neutrinolabs/xrdp/pull/833#issuecomment-318552192,"I'm planning to introduce additional audio codecs such as ADPCM or AAC.
Let me refactor a little bit. Supporting more codecs make if-else-if-else deeper. Using switch-case instead.","@metalefty libsox sounds good, it's a matter of if the output is compatible with MS client.
I'll make a new PR for the my AAC branch.  I wanted to separate out the commits anyway.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,835,2017-07-26T02:29:24Z,2017-10-13T06:09:34Z,2017-10-13T06:09:34Z,MERGED,True,11,1,2,https://github.com/metalefty,log: add log level TRACE,1,[],https://github.com/neutrinolabs/xrdp/pull/835,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/835,"TRACE means more verbose than DEBUG. syslog doesn't have more verbose
level than DEBUG, map TRACE to DEBUG for syslog.","TRACE means more verbose than DEBUG. syslog doesn't have more verbose
level than DEBUG, map TRACE to DEBUG for syslog.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,835,2017-07-26T02:29:24Z,2017-10-13T06:09:34Z,2017-10-13T06:09:34Z,MERGED,True,11,1,2,https://github.com/metalefty,log: add log level TRACE,1,[],https://github.com/neutrinolabs/xrdp/pull/835,https://github.com/geiseri,2,https://github.com/neutrinolabs/xrdp/pull/835#issuecomment-318148878,"TRACE means more verbose than DEBUG. syslog doesn't have more verbose
level than DEBUG, map TRACE to DEBUG for syslog.",+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,835,2017-07-26T02:29:24Z,2017-10-13T06:09:34Z,2017-10-13T06:09:34Z,MERGED,True,11,1,2,https://github.com/metalefty,log: add log level TRACE,1,[],https://github.com/neutrinolabs/xrdp/pull/835,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/835#issuecomment-318263799,"TRACE means more verbose than DEBUG. syslog doesn't have more verbose
level than DEBUG, map TRACE to DEBUG for syslog.",I'm going to create a wiki page to see summary of log related changes and let's review before make changes.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,835,2017-07-26T02:29:24Z,2017-10-13T06:09:34Z,2017-10-13T06:09:34Z,MERGED,True,11,1,2,https://github.com/metalefty,log: add log level TRACE,1,[],https://github.com/neutrinolabs/xrdp/pull/835,https://github.com/jsorg71,4,https://github.com/neutrinolabs/xrdp/pull/835#issuecomment-324481065,"TRACE means more verbose than DEBUG. syslog doesn't have more verbose
level than DEBUG, map TRACE to DEBUG for syslog.","Hi @metalefty
Did you create a wiki for this.  I have some logging thoughts I want to put somewhere.  If not, I can create a page.
+1 for this PR, we can expand on the logging later.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,835,2017-07-26T02:29:24Z,2017-10-13T06:09:34Z,2017-10-13T06:09:34Z,MERGED,True,11,1,2,https://github.com/metalefty,log: add log level TRACE,1,[],https://github.com/neutrinolabs/xrdp/pull/835,https://github.com/metalefty,5,https://github.com/neutrinolabs/xrdp/pull/835#issuecomment-324512876,"TRACE means more verbose than DEBUG. syslog doesn't have more verbose
level than DEBUG, map TRACE to DEBUG for syslog.","Here: https://github.com/neutrinolabs/xrdp/wiki/Reworking-logs
The page is my thoughts. If you have a different thought, feel free to edit the page.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,835,2017-07-26T02:29:24Z,2017-10-13T06:09:34Z,2017-10-13T06:09:34Z,MERGED,True,11,1,2,https://github.com/metalefty,log: add log level TRACE,1,[],https://github.com/neutrinolabs/xrdp/pull/835,https://github.com/metalefty,6,https://github.com/neutrinolabs/xrdp/pull/835#issuecomment-336359589,"TRACE means more verbose than DEBUG. syslog doesn't have more verbose
level than DEBUG, map TRACE to DEBUG for syslog.",merging.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,838,2017-07-27T13:58:14Z,2017-08-03T02:50:32Z,2017-12-27T14:47:45Z,MERGED,True,12,0,1,https://github.com/matt335672,xfuse_create_share() called before xfuse_init(),1,[],https://github.com/neutrinolabs/xrdp/pull/838,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/838,"Running xrdp 0.9.2 on CentOS/RHEL 7.3, we occasionally see coredumps of chansrv, always when logging in.
Investigation of these coredumps shows a SEGV in xfuse_create_share(), where the new xinode is inserted into the inode_table. At this point, g_xrdp_fs is uninitialized so it seems that xfuse_init() has not yet been called.
(gdb) print g_xrdp_fs
$1 = {inode_table = 0x0, max_entries = 0, num_entries = 1, next_node = 1}

This patch caters for this situation by creating the inode table if required during xfuse_create_share()
My local testing shows chansrv to be more robust with this patch. Is there maybe a preferable way to handle this situation, like calling xfuse_init() from elsewhere?","Running xrdp 0.9.2 on CentOS/RHEL 7.3, we occasionally see coredumps of chansrv, always when logging in.
Investigation of these coredumps shows a SEGV in xfuse_create_share(), where the new xinode is inserted into the inode_table. At this point, g_xrdp_fs is uninitialized so it seems that xfuse_init() has not yet been called.
(gdb) print g_xrdp_fs
$1 = {inode_table = 0x0, max_entries = 0, num_entries = 1, next_node = 1}

This patch caters for this situation by creating the inode table if required during xfuse_create_share()
My local testing shows chansrv to be more robust with this patch. Is there maybe a preferable way to handle this situation, like calling xfuse_init() from elsewhere?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,838,2017-07-27T13:58:14Z,2017-08-03T02:50:32Z,2017-12-27T14:47:45Z,MERGED,True,12,0,1,https://github.com/matt335672,xfuse_create_share() called before xfuse_init(),1,[],https://github.com/neutrinolabs/xrdp/pull/838,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/838#issuecomment-318527293,"Running xrdp 0.9.2 on CentOS/RHEL 7.3, we occasionally see coredumps of chansrv, always when logging in.
Investigation of these coredumps shows a SEGV in xfuse_create_share(), where the new xinode is inserted into the inode_table. At this point, g_xrdp_fs is uninitialized so it seems that xfuse_init() has not yet been called.
(gdb) print g_xrdp_fs
$1 = {inode_table = 0x0, max_entries = 0, num_entries = 1, next_node = 1}

This patch caters for this situation by creating the inode table if required during xfuse_create_share()
My local testing shows chansrv to be more robust with this patch. Is there maybe a preferable way to handle this situation, like calling xfuse_init() from elsewhere?","I understand the cause of the issue but I'm not sure why your patch solves the issue.
Your change makes xfuse_init_xrdp_fs() inside xfuse_init() will be not allways called, right?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,838,2017-07-27T13:58:14Z,2017-08-03T02:50:32Z,2017-12-27T14:47:45Z,MERGED,True,12,0,1,https://github.com/matt335672,xfuse_create_share() called before xfuse_init(),1,[],https://github.com/neutrinolabs/xrdp/pull/838,https://github.com/matt335672,3,https://github.com/neutrinolabs/xrdp/pull/838#issuecomment-318595277,"Running xrdp 0.9.2 on CentOS/RHEL 7.3, we occasionally see coredumps of chansrv, always when logging in.
Investigation of these coredumps shows a SEGV in xfuse_create_share(), where the new xinode is inserted into the inode_table. At this point, g_xrdp_fs is uninitialized so it seems that xfuse_init() has not yet been called.
(gdb) print g_xrdp_fs
$1 = {inode_table = 0x0, max_entries = 0, num_entries = 1, next_node = 1}

This patch caters for this situation by creating the inode table if required during xfuse_create_share()
My local testing shows chansrv to be more robust with this patch. Is there maybe a preferable way to handle this situation, like calling xfuse_init() from elsewhere?","Hi metalefty
Apologies for the braces. I've found and read the coding standard now.
As regards your other comment, the change inside xfuse_init() was made to cater for the situation where xfuse_init_xrdp_fs() is called before xfuse_init().  In this situation, xfuse_init() will eventually be called, and we don't want to initialise the inode table again.
I agree my intent could be clearer however, so I've cleaned up the patch a bit. I've place the guard against being called twice inside xfuse_init_xrdp_fs() now, and simply called the function unconditionally from both places where it's needed. The original code in xfuse_init() is now untouched.
Is that clearer now, or have I misunderstood your question?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,838,2017-07-27T13:58:14Z,2017-08-03T02:50:32Z,2017-12-27T14:47:45Z,MERGED,True,12,0,1,https://github.com/matt335672,xfuse_create_share() called before xfuse_init(),1,[],https://github.com/neutrinolabs/xrdp/pull/838,https://github.com/jsorg71,4,https://github.com/neutrinolabs/xrdp/pull/838#issuecomment-318802184,"Running xrdp 0.9.2 on CentOS/RHEL 7.3, we occasionally see coredumps of chansrv, always when logging in.
Investigation of these coredumps shows a SEGV in xfuse_create_share(), where the new xinode is inserted into the inode_table. At this point, g_xrdp_fs is uninitialized so it seems that xfuse_init() has not yet been called.
(gdb) print g_xrdp_fs
$1 = {inode_table = 0x0, max_entries = 0, num_entries = 1, next_node = 1}

This patch caters for this situation by creating the inode table if required during xfuse_create_share()
My local testing shows chansrv to be more robust with this patch. Is there maybe a preferable way to handle this situation, like calling xfuse_init() from elsewhere?",+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,838,2017-07-27T13:58:14Z,2017-08-03T02:50:32Z,2017-12-27T14:47:45Z,MERGED,True,12,0,1,https://github.com/matt335672,xfuse_create_share() called before xfuse_init(),1,[],https://github.com/neutrinolabs/xrdp/pull/838,https://github.com/metalefty,5,https://github.com/neutrinolabs/xrdp/pull/838#issuecomment-318831198,"Running xrdp 0.9.2 on CentOS/RHEL 7.3, we occasionally see coredumps of chansrv, always when logging in.
Investigation of these coredumps shows a SEGV in xfuse_create_share(), where the new xinode is inserted into the inode_table. At this point, g_xrdp_fs is uninitialized so it seems that xfuse_init() has not yet been called.
(gdb) print g_xrdp_fs
$1 = {inode_table = 0x0, max_entries = 0, num_entries = 1, next_node = 1}

This patch caters for this situation by creating the inode table if required during xfuse_create_share()
My local testing shows chansrv to be more robust with this patch. Is there maybe a preferable way to handle this situation, like calling xfuse_init() from elsewhere?","Now the fix looks pretty clearer.
Let's make the commit message clearer next. This PR has two point, right?

make sure inode table be initialized
add a guard not to initialize twice

You can squash the commits into one commit and edit commit message before the PR merged.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,838,2017-07-27T13:58:14Z,2017-08-03T02:50:32Z,2017-12-27T14:47:45Z,MERGED,True,12,0,1,https://github.com/matt335672,xfuse_create_share() called before xfuse_init(),1,[],https://github.com/neutrinolabs/xrdp/pull/838,https://github.com/matt335672,6,https://github.com/neutrinolabs/xrdp/pull/838#issuecomment-319030862,"Running xrdp 0.9.2 on CentOS/RHEL 7.3, we occasionally see coredumps of chansrv, always when logging in.
Investigation of these coredumps shows a SEGV in xfuse_create_share(), where the new xinode is inserted into the inode_table. At this point, g_xrdp_fs is uninitialized so it seems that xfuse_init() has not yet been called.
(gdb) print g_xrdp_fs
$1 = {inode_table = 0x0, max_entries = 0, num_entries = 1, next_node = 1}

This patch caters for this situation by creating the inode table if required during xfuse_create_share()
My local testing shows chansrv to be more robust with this patch. Is there maybe a preferable way to handle this situation, like calling xfuse_init() from elsewhere?",How's that?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,838,2017-07-27T13:58:14Z,2017-08-03T02:50:32Z,2017-12-27T14:47:45Z,MERGED,True,12,0,1,https://github.com/matt335672,xfuse_create_share() called before xfuse_init(),1,[],https://github.com/neutrinolabs/xrdp/pull/838,https://github.com/metalefty,7,https://github.com/neutrinolabs/xrdp/pull/838#issuecomment-319226756,"Running xrdp 0.9.2 on CentOS/RHEL 7.3, we occasionally see coredumps of chansrv, always when logging in.
Investigation of these coredumps shows a SEGV in xfuse_create_share(), where the new xinode is inserted into the inode_table. At this point, g_xrdp_fs is uninitialized so it seems that xfuse_init() has not yet been called.
(gdb) print g_xrdp_fs
$1 = {inode_table = 0x0, max_entries = 0, num_entries = 1, next_node = 1}

This patch caters for this situation by creating the inode table if required during xfuse_create_share()
My local testing shows chansrv to be more robust with this patch. Is there maybe a preferable way to handle this situation, like calling xfuse_init() from elsewhere?",This will help you. https://www.devroom.io/2011/07/05/git-squash-your-latests-commits-into-one/,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,838,2017-07-27T13:58:14Z,2017-08-03T02:50:32Z,2017-12-27T14:47:45Z,MERGED,True,12,0,1,https://github.com/matt335672,xfuse_create_share() called before xfuse_init(),1,[],https://github.com/neutrinolabs/xrdp/pull/838,https://github.com/matt335672,8,https://github.com/neutrinolabs/xrdp/pull/838#issuecomment-319481773,"Running xrdp 0.9.2 on CentOS/RHEL 7.3, we occasionally see coredumps of chansrv, always when logging in.
Investigation of these coredumps shows a SEGV in xfuse_create_share(), where the new xinode is inserted into the inode_table. At this point, g_xrdp_fs is uninitialized so it seems that xfuse_init() has not yet been called.
(gdb) print g_xrdp_fs
$1 = {inode_table = 0x0, max_entries = 0, num_entries = 1, next_node = 1}

This patch caters for this situation by creating the inode table if required during xfuse_create_share()
My local testing shows chansrv to be more robust with this patch. Is there maybe a preferable way to handle this situation, like calling xfuse_init() from elsewhere?","Apologies metalefty - bad terminology on my part in my comment. I've done the squash already, and all I really wanted was a quick sanity check. Nice link though.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,838,2017-07-27T13:58:14Z,2017-08-03T02:50:32Z,2017-12-27T14:47:45Z,MERGED,True,12,0,1,https://github.com/matt335672,xfuse_create_share() called before xfuse_init(),1,[],https://github.com/neutrinolabs/xrdp/pull/838,https://github.com/metalefty,9,https://github.com/neutrinolabs/xrdp/pull/838#issuecomment-319526886,"Running xrdp 0.9.2 on CentOS/RHEL 7.3, we occasionally see coredumps of chansrv, always when logging in.
Investigation of these coredumps shows a SEGV in xfuse_create_share(), where the new xinode is inserted into the inode_table. At this point, g_xrdp_fs is uninitialized so it seems that xfuse_init() has not yet been called.
(gdb) print g_xrdp_fs
$1 = {inode_table = 0x0, max_entries = 0, num_entries = 1, next_node = 1}

This patch caters for this situation by creating the inode table if required during xfuse_create_share()
My local testing shows chansrv to be more robust with this patch. Is there maybe a preferable way to handle this situation, like calling xfuse_init() from elsewhere?",I also apologize you. I didn't aware you've done squash. It seems pretty good. Ready to merge.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,840,2017-07-28T04:20:21Z,2017-08-05T00:24:58Z,2017-08-05T00:44:27Z,MERGED,True,292,7,4,https://github.com/jsorg71,add audio codec fdk-aac,6,[],https://github.com/neutrinolabs/xrdp/pull/840,https://github.com/jsorg71,1,https://github.com/neutrinolabs/xrdp/pull/840,"fix for skipped acks, add fdk-aac decode option","fix for skipped acks, add fdk-aac decode option",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,851,2017-08-16T03:40:15Z,2017-08-16T04:44:52Z,2017-08-16T04:44:58Z,MERGED,True,1,1,1,https://github.com/metalefty,instfiles: don't include generated *.services files to distribution,1,[],https://github.com/neutrinolabs/xrdp/pull/851,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/851,"Solves #848.
Pointed out by: Fuminobu TAKEYAMA (@ftake)","Solves #848.
Pointed out by: Fuminobu TAKEYAMA (@ftake)",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,852,2017-08-16T04:49:56Z,2017-08-16T04:57:36Z,2017-08-16T04:57:39Z,MERGED,True,12,3,4,https://github.com/metalefty,Release v0.9.3.1,2,[],https://github.com/neutrinolabs/xrdp/pull/852,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/852,#848 is an issue of release tarball. The new release should be made.,#848 is an issue of release tarball. The new release should be made.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,853,2017-08-17T06:37:18Z,2017-09-05T08:17:35Z,2017-09-28T05:19:36Z,MERGED,True,9,1,1,https://github.com/metalefty,xrdp: accept full path for ls_background_image,1,[],https://github.com/neutrinolabs/xrdp/pull/853,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/853,"because ls_logo_filename accepts full path.
See also #776.","because ls_logo_filename accepts full path.
See also #776.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,858,2017-08-31T00:50:03Z,2017-09-01T01:08:27Z,2017-09-28T05:19:33Z,MERGED,True,3,0,1,https://github.com/metalefty,add Belgian keyboard,1,[],https://github.com/neutrinolabs/xrdp/pull/858,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/858,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,859,2017-09-01T05:49:49Z,2017-09-13T02:18:42Z,2017-09-13T02:18:42Z,MERGED,True,15,11,3,https://github.com/speidy,xrdpapi: change WTSVirtualChannelWrite return codes to be consistent with WTSVirtualChannelRead,3,[],https://github.com/neutrinolabs/xrdp/pull/859,https://github.com/speidy,1,https://github.com/neutrinolabs/xrdp/pull/859,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,859,2017-09-01T05:49:49Z,2017-09-13T02:18:42Z,2017-09-13T02:18:42Z,MERGED,True,15,11,3,https://github.com/speidy,xrdpapi: change WTSVirtualChannelWrite return codes to be consistent with WTSVirtualChannelRead,3,[],https://github.com/neutrinolabs/xrdp/pull/859,https://github.com/ben-cohen,2,https://github.com/neutrinolabs/xrdp/pull/859#issuecomment-327593269,,"Doh, I should have checked Issues before making a pull request!
@speidy - there are also two calls to WTSVirtualChannelWrite() from tcutils/utils.cpp that I think want to change as well.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,859,2017-09-01T05:49:49Z,2017-09-13T02:18:42Z,2017-09-13T02:18:42Z,MERGED,True,15,11,3,https://github.com/speidy,xrdpapi: change WTSVirtualChannelWrite return codes to be consistent with WTSVirtualChannelRead,3,[],https://github.com/neutrinolabs/xrdp/pull/859,https://github.com/speidy,3,https://github.com/neutrinolabs/xrdp/pull/859#issuecomment-327623640,,"@ben-cohen Thanks for your work :)
I'll push a fix for tcutils, I missed it somehow.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,859,2017-09-01T05:49:49Z,2017-09-13T02:18:42Z,2017-09-13T02:18:42Z,MERGED,True,15,11,3,https://github.com/speidy,xrdpapi: change WTSVirtualChannelWrite return codes to be consistent with WTSVirtualChannelRead,3,[],https://github.com/neutrinolabs/xrdp/pull/859,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/859#issuecomment-327657806,,The Travis failure is false-positive. I'll look at it.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,859,2017-09-01T05:49:49Z,2017-09-13T02:18:42Z,2017-09-13T02:18:42Z,MERGED,True,15,11,3,https://github.com/speidy,xrdpapi: change WTSVirtualChannelWrite return codes to be consistent with WTSVirtualChannelRead,3,[],https://github.com/neutrinolabs/xrdp/pull/859,https://github.com/metalefty,5,https://github.com/neutrinolabs/xrdp/pull/859#issuecomment-327668816,,I've applied the fix to devel branch. Rebase this PR to the latest devel to perform build test.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,859,2017-09-01T05:49:49Z,2017-09-13T02:18:42Z,2017-09-13T02:18:42Z,MERGED,True,15,11,3,https://github.com/speidy,xrdpapi: change WTSVirtualChannelWrite return codes to be consistent with WTSVirtualChannelRead,3,[],https://github.com/neutrinolabs/xrdp/pull/859,https://github.com/metalefty,6,https://github.com/neutrinolabs/xrdp/pull/859#issuecomment-329037435,,Let's merge.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,863,2017-09-06T19:04:27Z,2017-09-06T19:48:03Z,2017-09-06T19:48:03Z,CLOSED,False,11,11,3,https://github.com/ben-cohen,Fix WTSVirtualChannelWrite() returncode,2,[],https://github.com/neutrinolabs/xrdp/pull/863,https://github.com/ben-cohen,1,https://github.com/neutrinolabs/xrdp/pull/863,"The function WTSVirtualChannelWrite() in xrdpapi.c returns 0 on success
and -1 on error.  It should return 1 on success and 0 on error, because:

It is the behaviour described in Microsoft's API documentation.
It is the behaviour expected by xrdpapi/simple.c.
It is consistent with xrdpapi's behaviour for other functions
including WTSVirtualChannelRead().","The function WTSVirtualChannelWrite() in xrdpapi.c returns 0 on success
and -1 on error.  It should return 1 on success and 0 on error, because:

It is the behaviour described in Microsoft's API documentation.
It is the behaviour expected by xrdpapi/simple.c.
It is consistent with xrdpapi's behaviour for other functions
including WTSVirtualChannelRead().",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,863,2017-09-06T19:04:27Z,2017-09-06T19:48:03Z,2017-09-06T19:48:03Z,CLOSED,False,11,11,3,https://github.com/ben-cohen,Fix WTSVirtualChannelWrite() returncode,2,[],https://github.com/neutrinolabs/xrdp/pull/863,https://github.com/ben-cohen,2,https://github.com/neutrinolabs/xrdp/pull/863#issuecomment-327588704,"The function WTSVirtualChannelWrite() in xrdpapi.c returns 0 on success
and -1 on error.  It should return 1 on success and 0 on error, because:

It is the behaviour described in Microsoft's API documentation.
It is the behaviour expected by xrdpapi/simple.c.
It is consistent with xrdpapi's behaviour for other functions
including WTSVirtualChannelRead().",Apparently the Travis CI breakage was caused by commit e6b7d12 on devel and not this change!,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,863,2017-09-06T19:04:27Z,2017-09-06T19:48:03Z,2017-09-06T19:48:03Z,CLOSED,False,11,11,3,https://github.com/ben-cohen,Fix WTSVirtualChannelWrite() returncode,2,[],https://github.com/neutrinolabs/xrdp/pull/863,https://github.com/ben-cohen,3,https://github.com/neutrinolabs/xrdp/pull/863#issuecomment-327589787,"The function WTSVirtualChannelWrite() in xrdpapi.c returns 0 on success
and -1 on error.  It should return 1 on success and 0 on error, because:

It is the behaviour described in Microsoft's API documentation.
It is the behaviour expected by xrdpapi/simple.c.
It is consistent with xrdpapi's behaviour for other functions
including WTSVirtualChannelRead().",NB The existing returncode for WTSVirtualChannelWrite() is expected in xrdpvr/xrdpvr.c and tcutils/utils.cpp.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,863,2017-09-06T19:04:27Z,2017-09-06T19:48:03Z,2017-09-06T19:48:03Z,CLOSED,False,11,11,3,https://github.com/ben-cohen,Fix WTSVirtualChannelWrite() returncode,2,[],https://github.com/neutrinolabs/xrdp/pull/863,https://github.com/ben-cohen,4,https://github.com/neutrinolabs/xrdp/pull/863#issuecomment-327593551,"The function WTSVirtualChannelWrite() in xrdpapi.c returns 0 on success
and -1 on error.  It should return 1 on success and 0 on error, because:

It is the behaviour described in Microsoft's API documentation.
It is the behaviour expected by xrdpapi/simple.c.
It is consistent with xrdpapi's behaviour for other functions
including WTSVirtualChannelRead().",Closing as a duplicate of #859.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,865,2017-09-07T02:13:12Z,2017-09-07T02:35:07Z,2017-09-07T02:35:12Z,MERGED,True,1,0,1,https://github.com/metalefty,travis: Unbreak travis build,1,[],https://github.com/neutrinolabs/xrdp/pull/865,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/865,"since Ubuntu Precise (12.04) is retired September 2017. Now build test
is run on Ubuntu Trusty (14.04). A trivial fix for requisite packages
needed.","since Ubuntu Precise (12.04) is retired September 2017. Now build test
is run on Ubuntu Trusty (14.04). A trivial fix for requisite packages
needed.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,867,2017-09-07T19:42:40Z,2017-10-17T05:34:26Z,2017-10-17T05:34:27Z,MERGED,True,405,0,1,https://github.com/ben-cohen,Forward ssh-agent data between ssh clients and RDP,4,[],https://github.com/neutrinolabs/xrdp/pull/867,https://github.com/ben-cohen,1,https://github.com/neutrinolabs/xrdp/pull/867,"Add xrdp-ssh-agent.c which forwards ssh-agent protocol over an RDP
dynamic virtual channel, just as the normal ssh-agent forwards it over
an SSH channel.
Usage:
Run an RDP client with the corresponding plugin enabled; for example
""xfreerdp /ssh-agent ..."".
In the remote desktop session run xrdp-ssh-agent and evaluate the output
in the shell as for ssh-agent to set the required environment variables
(specifically $SSH_AUTH_SOCK):
eval ""$(xrdp-ssh-agent -s)""
This is the same as for the normal ssh-agent.  You would typically do
this in your Xsession or /etc/xrdp/startwm.sh.
Limitations:


Error checking and handling could be improved.


This stays running when the xrdp session closes.  This should be
fixed using a command line argument as for the real ssh-agent.


This is only tested on Linux and will only work on systems where
clients talk to the ssh-agent via Unix domain sockets.  It won't
currently work on Windows but it could be ported.","Add xrdp-ssh-agent.c which forwards ssh-agent protocol over an RDP
dynamic virtual channel, just as the normal ssh-agent forwards it over
an SSH channel.
Usage:
Run an RDP client with the corresponding plugin enabled; for example
""xfreerdp /ssh-agent ..."".
In the remote desktop session run xrdp-ssh-agent and evaluate the output
in the shell as for ssh-agent to set the required environment variables
(specifically $SSH_AUTH_SOCK):
eval ""$(xrdp-ssh-agent -s)""
This is the same as for the normal ssh-agent.  You would typically do
this in your Xsession or /etc/xrdp/startwm.sh.
Limitations:


Error checking and handling could be improved.


This stays running when the xrdp session closes.  This should be
fixed using a command line argument as for the real ssh-agent.


This is only tested on Linux and will only work on systems where
clients talk to the ssh-agent via Unix domain sockets.  It won't
currently work on Windows but it could be ported.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,867,2017-09-07T19:42:40Z,2017-10-17T05:34:26Z,2017-10-17T05:34:27Z,MERGED,True,405,0,1,https://github.com/ben-cohen,Forward ssh-agent data between ssh clients and RDP,4,[],https://github.com/neutrinolabs/xrdp/pull/867,https://github.com/ben-cohen,2,https://github.com/neutrinolabs/xrdp/pull/867#issuecomment-327913290,"Add xrdp-ssh-agent.c which forwards ssh-agent protocol over an RDP
dynamic virtual channel, just as the normal ssh-agent forwards it over
an SSH channel.
Usage:
Run an RDP client with the corresponding plugin enabled; for example
""xfreerdp /ssh-agent ..."".
In the remote desktop session run xrdp-ssh-agent and evaluate the output
in the shell as for ssh-agent to set the required environment variables
(specifically $SSH_AUTH_SOCK):
eval ""$(xrdp-ssh-agent -s)""
This is the same as for the normal ssh-agent.  You would typically do
this in your Xsession or /etc/xrdp/startwm.sh.
Limitations:


Error checking and handling could be improved.


This stays running when the xrdp session closes.  This should be
fixed using a command line argument as for the real ssh-agent.


This is only tested on Linux and will only work on systems where
clients talk to the ssh-agent via Unix domain sockets.  It won't
currently work on Windows but it could be ported.",Please see Issue #868 for more explanation.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,867,2017-09-07T19:42:40Z,2017-10-17T05:34:26Z,2017-10-17T05:34:27Z,MERGED,True,405,0,1,https://github.com/ben-cohen,Forward ssh-agent data between ssh clients and RDP,4,[],https://github.com/neutrinolabs/xrdp/pull/867,https://github.com/ben-cohen,3,https://github.com/neutrinolabs/xrdp/pull/867#issuecomment-328139482,"Add xrdp-ssh-agent.c which forwards ssh-agent protocol over an RDP
dynamic virtual channel, just as the normal ssh-agent forwards it over
an SSH channel.
Usage:
Run an RDP client with the corresponding plugin enabled; for example
""xfreerdp /ssh-agent ..."".
In the remote desktop session run xrdp-ssh-agent and evaluate the output
in the shell as for ssh-agent to set the required environment variables
(specifically $SSH_AUTH_SOCK):
eval ""$(xrdp-ssh-agent -s)""
This is the same as for the normal ssh-agent.  You would typically do
this in your Xsession or /etc/xrdp/startwm.sh.
Limitations:


Error checking and handling could be improved.


This stays running when the xrdp session closes.  This should be
fixed using a command line argument as for the real ssh-agent.


This is only tested on Linux and will only work on systems where
clients talk to the ssh-agent via Unix domain sockets.  It won't
currently work on Windows but it could be ported.",NB This needs the change in PR #859 to fix the returncode of WTSVirtualChannelWrite().,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,867,2017-09-07T19:42:40Z,2017-10-17T05:34:26Z,2017-10-17T05:34:27Z,MERGED,True,405,0,1,https://github.com/ben-cohen,Forward ssh-agent data between ssh clients and RDP,4,[],https://github.com/neutrinolabs/xrdp/pull/867,https://github.com/ben-cohen,4,https://github.com/neutrinolabs/xrdp/pull/867#issuecomment-329543425,"Add xrdp-ssh-agent.c which forwards ssh-agent protocol over an RDP
dynamic virtual channel, just as the normal ssh-agent forwards it over
an SSH channel.
Usage:
Run an RDP client with the corresponding plugin enabled; for example
""xfreerdp /ssh-agent ..."".
In the remote desktop session run xrdp-ssh-agent and evaluate the output
in the shell as for ssh-agent to set the required environment variables
(specifically $SSH_AUTH_SOCK):
eval ""$(xrdp-ssh-agent -s)""
This is the same as for the normal ssh-agent.  You would typically do
this in your Xsession or /etc/xrdp/startwm.sh.
Limitations:


Error checking and handling could be improved.


This stays running when the xrdp session closes.  This should be
fixed using a command line argument as for the real ssh-agent.


This is only tested on Linux and will only work on systems where
clients talk to the ssh-agent via Unix domain sockets.  It won't
currently work on Windows but it could be ported.",@metalefty Thanks - I have fixed the above and some other similar problems.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,867,2017-09-07T19:42:40Z,2017-10-17T05:34:26Z,2017-10-17T05:34:27Z,MERGED,True,405,0,1,https://github.com/ben-cohen,Forward ssh-agent data between ssh clients and RDP,4,[],https://github.com/neutrinolabs/xrdp/pull/867,https://github.com/metalefty,5,https://github.com/neutrinolabs/xrdp/pull/867#issuecomment-332395074,"Add xrdp-ssh-agent.c which forwards ssh-agent protocol over an RDP
dynamic virtual channel, just as the normal ssh-agent forwards it over
an SSH channel.
Usage:
Run an RDP client with the corresponding plugin enabled; for example
""xfreerdp /ssh-agent ..."".
In the remote desktop session run xrdp-ssh-agent and evaluate the output
in the shell as for ssh-agent to set the required environment variables
(specifically $SSH_AUTH_SOCK):
eval ""$(xrdp-ssh-agent -s)""
This is the same as for the normal ssh-agent.  You would typically do
this in your Xsession or /etc/xrdp/startwm.sh.
Limitations:


Error checking and handling could be improved.


This stays running when the xrdp session closes.  This should be
fixed using a command line argument as for the real ssh-agent.


This is only tested on Linux and will only work on systems where
clients talk to the ssh-agent via Unix domain sockets.  It won't
currently work on Windows but it could be ported.",Just for record. Link to FreeRDP/FreeRDP#4122 directly from this PR.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,867,2017-09-07T19:42:40Z,2017-10-17T05:34:26Z,2017-10-17T05:34:27Z,MERGED,True,405,0,1,https://github.com/ben-cohen,Forward ssh-agent data between ssh clients and RDP,4,[],https://github.com/neutrinolabs/xrdp/pull/867,https://github.com/metalefty,6,https://github.com/neutrinolabs/xrdp/pull/867#issuecomment-335643008,"Add xrdp-ssh-agent.c which forwards ssh-agent protocol over an RDP
dynamic virtual channel, just as the normal ssh-agent forwards it over
an SSH channel.
Usage:
Run an RDP client with the corresponding plugin enabled; for example
""xfreerdp /ssh-agent ..."".
In the remote desktop session run xrdp-ssh-agent and evaluate the output
in the shell as for ssh-agent to set the required environment variables
(specifically $SSH_AUTH_SOCK):
eval ""$(xrdp-ssh-agent -s)""
This is the same as for the normal ssh-agent.  You would typically do
this in your Xsession or /etc/xrdp/startwm.sh.
Limitations:


Error checking and handling could be improved.


This stays running when the xrdp session closes.  This should be
fixed using a command line argument as for the real ssh-agent.


This is only tested on Linux and will only work on systems where
clients talk to the ssh-agent via Unix domain sockets.  It won't
currently work on Windows but it could be ported.",This is a single dependent program and doesn't affect xrdp itself. At least I'm OK with merging this.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,867,2017-09-07T19:42:40Z,2017-10-17T05:34:26Z,2017-10-17T05:34:27Z,MERGED,True,405,0,1,https://github.com/ben-cohen,Forward ssh-agent data between ssh clients and RDP,4,[],https://github.com/neutrinolabs/xrdp/pull/867,https://github.com/metalefty,7,https://github.com/neutrinolabs/xrdp/pull/867#issuecomment-337122614,"Add xrdp-ssh-agent.c which forwards ssh-agent protocol over an RDP
dynamic virtual channel, just as the normal ssh-agent forwards it over
an SSH channel.
Usage:
Run an RDP client with the corresponding plugin enabled; for example
""xfreerdp /ssh-agent ..."".
In the remote desktop session run xrdp-ssh-agent and evaluate the output
in the shell as for ssh-agent to set the required environment variables
(specifically $SSH_AUTH_SOCK):
eval ""$(xrdp-ssh-agent -s)""
This is the same as for the normal ssh-agent.  You would typically do
this in your Xsession or /etc/xrdp/startwm.sh.
Limitations:


Error checking and handling could be improved.


This stays running when the xrdp session closes.  This should be
fixed using a command line argument as for the real ssh-agent.


This is only tested on Linux and will only work on systems where
clients talk to the ssh-agent via Unix domain sockets.  It won't
currently work on Windows but it could be ported.",Let's merge.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,869,2017-09-08T18:01:23Z,2017-12-18T01:39:43Z,2017-12-18T01:39:43Z,MERGED,True,7,2,1,https://github.com/cocoon,workaround for corrupted display with W2K8,1,[],https://github.com/neutrinolabs/xrdp/pull/869,https://github.com/cocoon,1,https://github.com/neutrinolabs/xrdp/pull/869,"workaround for corrupted display like black bars left of cmd with W2K8
as requested here: #860
But maybe someone can do proper fixes.
BTW:
I reported this looong timea go ;)
here:
http://xrdp-devel.766250.n3.nabble.com/Xrdp-devel-NeutrinoRDP-black-lines-with-ping-in-a-remote-console-screenshot-td4025274.html
or here:
neutrinolabs/NeutrinoRDP#1
BTW2: still open bugs:


misuse of hidelogwindow instead of correct own hideloginwindow


xrdp systemd setting User=root and fix neutrinordp https://github.com/neutrinolabs/NeutrinoRDP/blob/devel/libfreerdp-utils/file.c#L81
(question is if it can cause any harm if home is set to / if it can't get from env)


new cursor + Windows 10","workaround for corrupted display like black bars left of cmd with W2K8
as requested here: #860
But maybe someone can do proper fixes.
BTW:
I reported this looong timea go ;)
here:
http://xrdp-devel.766250.n3.nabble.com/Xrdp-devel-NeutrinoRDP-black-lines-with-ping-in-a-remote-console-screenshot-td4025274.html
or here:
neutrinolabs/NeutrinoRDP#1
BTW2: still open bugs:


misuse of hidelogwindow instead of correct own hideloginwindow


xrdp systemd setting User=root and fix neutrinordp https://github.com/neutrinolabs/NeutrinoRDP/blob/devel/libfreerdp-utils/file.c#L81
(question is if it can cause any harm if home is set to / if it can't get from env)


new cursor + Windows 10",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,869,2017-09-08T18:01:23Z,2017-12-18T01:39:43Z,2017-12-18T01:39:43Z,MERGED,True,7,2,1,https://github.com/cocoon,workaround for corrupted display with W2K8,1,[],https://github.com/neutrinolabs/xrdp/pull/869,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/869#issuecomment-351705652,"workaround for corrupted display like black bars left of cmd with W2K8
as requested here: #860
But maybe someone can do proper fixes.
BTW:
I reported this looong timea go ;)
here:
http://xrdp-devel.766250.n3.nabble.com/Xrdp-devel-NeutrinoRDP-black-lines-with-ping-in-a-remote-console-screenshot-td4025274.html
or here:
neutrinolabs/NeutrinoRDP#1
BTW2: still open bugs:


misuse of hidelogwindow instead of correct own hideloginwindow


xrdp systemd setting User=root and fix neutrinordp https://github.com/neutrinolabs/NeutrinoRDP/blob/devel/libfreerdp-utils/file.c#L81
(question is if it can cause any harm if home is set to / if it can't get from env)


new cursor + Windows 10","@jsorg71 what do you think of this workaround? If you're ok with this, let's ship to v0.9.5. Or can you fix the issue fundamentally?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,869,2017-09-08T18:01:23Z,2017-12-18T01:39:43Z,2017-12-18T01:39:43Z,MERGED,True,7,2,1,https://github.com/cocoon,workaround for corrupted display with W2K8,1,[],https://github.com/neutrinolabs/xrdp/pull/869,https://github.com/jsorg71,3,https://github.com/neutrinolabs/xrdp/pull/869#issuecomment-351786769,"workaround for corrupted display like black bars left of cmd with W2K8
as requested here: #860
But maybe someone can do proper fixes.
BTW:
I reported this looong timea go ;)
here:
http://xrdp-devel.766250.n3.nabble.com/Xrdp-devel-NeutrinoRDP-black-lines-with-ping-in-a-remote-console-screenshot-td4025274.html
or here:
neutrinolabs/NeutrinoRDP#1
BTW2: still open bugs:


misuse of hidelogwindow instead of correct own hideloginwindow


xrdp systemd setting User=root and fix neutrinordp https://github.com/neutrinolabs/NeutrinoRDP/blob/devel/libfreerdp-utils/file.c#L81
(question is if it can cause any harm if home is set to / if it can't get from env)


new cursor + Windows 10",I can fix this later.  Let go ahead and turn glyphs off for now.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,869,2017-09-08T18:01:23Z,2017-12-18T01:39:43Z,2017-12-18T01:39:43Z,MERGED,True,7,2,1,https://github.com/cocoon,workaround for corrupted display with W2K8,1,[],https://github.com/neutrinolabs/xrdp/pull/869,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/869#issuecomment-352302700,"workaround for corrupted display like black bars left of cmd with W2K8
as requested here: #860
But maybe someone can do proper fixes.
BTW:
I reported this looong timea go ;)
here:
http://xrdp-devel.766250.n3.nabble.com/Xrdp-devel-NeutrinoRDP-black-lines-with-ping-in-a-remote-console-screenshot-td4025274.html
or here:
neutrinolabs/NeutrinoRDP#1
BTW2: still open bugs:


misuse of hidelogwindow instead of correct own hideloginwindow


xrdp systemd setting User=root and fix neutrinordp https://github.com/neutrinolabs/NeutrinoRDP/blob/devel/libfreerdp-utils/file.c#L81
(question is if it can cause any harm if home is set to / if it can't get from env)


new cursor + Windows 10","Okay, let's fix this later and merge this workaround now.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,876,2017-09-14T06:01:30Z,2017-09-17T09:03:08Z,2017-09-17T09:03:08Z,MERGED,True,1,1,1,https://github.com/cocoon,fix misuse of hidelogwindow,1,[],https://github.com/neutrinolabs/xrdp/pull/876,https://github.com/cocoon,1,https://github.com/neutrinolabs/xrdp/pull/876,"fix black screen if hidelogwindow=yes
#414","fix black screen if hidelogwindow=yes
#414",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,876,2017-09-14T06:01:30Z,2017-09-17T09:03:08Z,2017-09-17T09:03:08Z,MERGED,True,1,1,1,https://github.com/cocoon,fix misuse of hidelogwindow,1,[],https://github.com/neutrinolabs/xrdp/pull/876,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/876#issuecomment-329422769,"fix black screen if hidelogwindow=yes
#414","Can you squash commits into one commit and include ""Fixes #414. in commit message"" like 06ce0d7? Then #414 will be automatically closed when this PR merged.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,877,2017-09-14T06:07:47Z,2018-03-27T06:46:52Z,2018-03-27T06:46:52Z,CLOSED,False,1,0,1,https://github.com/cocoon,fix crash neutrinordp missing home env,1,['not-our-issue'],https://github.com/neutrinolabs/xrdp/pull/877,https://github.com/cocoon,1,https://github.com/neutrinolabs/xrdp/pull/877,"#719
One possible way to fix the crash is to add User=xxx in xrdp.service-file
Other fix would be in neutrinordp to set a fallsback path if no home env exists.","#719
One possible way to fix the crash is to add User=xxx in xrdp.service-file
Other fix would be in neutrinordp to set a fallsback path if no home env exists.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,877,2017-09-14T06:07:47Z,2018-03-27T06:46:52Z,2018-03-27T06:46:52Z,CLOSED,False,1,0,1,https://github.com/cocoon,fix crash neutrinordp missing home env,1,['not-our-issue'],https://github.com/neutrinolabs/xrdp/pull/877,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/877#issuecomment-329653204,"#719
One possible way to fix the crash is to add User=xxx in xrdp.service-file
Other fix would be in neutrinordp to set a fallsback path if no home env exists.","Actually, this will avoid the crash but I don't think this is a fix. IMO, this should be fixed at NeutrinoRDP.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,877,2017-09-14T06:07:47Z,2018-03-27T06:46:52Z,2018-03-27T06:46:52Z,CLOSED,False,1,0,1,https://github.com/cocoon,fix crash neutrinordp missing home env,1,['not-our-issue'],https://github.com/neutrinolabs/xrdp/pull/877,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/877#issuecomment-329653690,"#719
One possible way to fix the crash is to add User=xxx in xrdp.service-file
Other fix would be in neutrinordp to set a fallsback path if no home env exists.",neutrinolabs/NeutrinoRDP#12 is a proposed fix on the NeutrinoRDP side.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,877,2017-09-14T06:07:47Z,2018-03-27T06:46:52Z,2018-03-27T06:46:52Z,CLOSED,False,1,0,1,https://github.com/cocoon,fix crash neutrinordp missing home env,1,['not-our-issue'],https://github.com/neutrinolabs/xrdp/pull/877,https://github.com/cocoon,4,https://github.com/neutrinolabs/xrdp/pull/877#issuecomment-329696520,"#719
One possible way to fix the crash is to add User=xxx in xrdp.service-file
Other fix would be in neutrinordp to set a fallsback path if no home env exists.","""IMO, this should be fixed at NeutrinoRDP"".
I totally agree. NeutrinoRDP fix is a must.
What advantage/disadvantage do we get if the User=root line is added or not to the service file?
At least it seems to set the HOME env variable.
Is it planned to be running as a different user in the future?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,877,2017-09-14T06:07:47Z,2018-03-27T06:46:52Z,2018-03-27T06:46:52Z,CLOSED,False,1,0,1,https://github.com/cocoon,fix crash neutrinordp missing home env,1,['not-our-issue'],https://github.com/neutrinolabs/xrdp/pull/877,https://github.com/speidy,5,https://github.com/neutrinolabs/xrdp/pull/877#issuecomment-376404215,"#719
One possible way to fix the crash is to add User=xxx in xrdp.service-file
Other fix would be in neutrinordp to set a fallsback path if no home env exists.","seems like it fixed and merged in neutrinolabs/NeutrinoRDP#12
Can you close this PR ?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,877,2017-09-14T06:07:47Z,2018-03-27T06:46:52Z,2018-03-27T06:46:52Z,CLOSED,False,1,0,1,https://github.com/cocoon,fix crash neutrinordp missing home env,1,['not-our-issue'],https://github.com/neutrinolabs/xrdp/pull/877,https://github.com/metalefty,6,https://github.com/neutrinolabs/xrdp/pull/877#issuecomment-376415260,"#719
One possible way to fix the crash is to add User=xxx in xrdp.service-file
Other fix would be in neutrinordp to set a fallsback path if no home env exists.","Is it planned to be running as a different user in the future?

Yes. root privilege is not necessarily for xrdp. Debian runs it user privilege.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,877,2017-09-14T06:07:47Z,2018-03-27T06:46:52Z,2018-03-27T06:46:52Z,CLOSED,False,1,0,1,https://github.com/cocoon,fix crash neutrinordp missing home env,1,['not-our-issue'],https://github.com/neutrinolabs/xrdp/pull/877,https://github.com/metalefty,7,https://github.com/neutrinolabs/xrdp/pull/877#issuecomment-376415563,"#719
One possible way to fix the crash is to add User=xxx in xrdp.service-file
Other fix would be in neutrinordp to set a fallsback path if no home env exists.",Closing.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,882,2017-09-19T07:45:44Z,2017-09-26T01:54:09Z,2017-09-26T01:55:05Z,MERGED,True,58,14,1,https://github.com/metalefty,common: fix g_write_ip_address() didn't return correct IP address,1,[],https://github.com/neutrinolabs/xrdp/pull/882,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/882,"The string created by the function is especially used to pass client's IP address from xrdp to xrdp-sesman.
There's lots of things to make IP address logging better but just fix g_write_ip_address() always returns 0.0.0.0 at this time.
Logged in xrdp-sesman.log.
Before:
[20170828-13:55:22] [INFO ] ++ created session (access granted): username centos, ip 0.0.0.0:63080 - socket: 12

After:
[20170919-07:34:09] [INFO ] ++ created session (access granted): username centos, ip ::ffff:192.168.0.30:64578 - socket: 12","The string created by the function is especially used to pass client's IP address from xrdp to xrdp-sesman.
There's lots of things to make IP address logging better but just fix g_write_ip_address() always returns 0.0.0.0 at this time.
Logged in xrdp-sesman.log.
Before:
[20170828-13:55:22] [INFO ] ++ created session (access granted): username centos, ip 0.0.0.0:63080 - socket: 12

After:
[20170919-07:34:09] [INFO ] ++ created session (access granted): username centos, ip ::ffff:192.168.0.30:64578 - socket: 12",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,889,2017-09-26T06:47:03Z,2017-09-26T06:56:12Z,2017-09-26T06:56:15Z,MERGED,True,27,3,4,https://github.com/metalefty,Prepare v0.9.4,2,[],https://github.com/neutrinolabs/xrdp/pull/889,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/889,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,890,2017-09-27T08:51:14Z,2017-10-05T05:35:16Z,2017-10-05T05:35:16Z,CLOSED,False,50,31,5,https://github.com/moobyfr,Feature wtmp,5,[],https://github.com/neutrinolabs/xrdp/pull/890,https://github.com/moobyfr,1,https://github.com/neutrinolabs/xrdp/pull/890,"WIP utmp/wtmp

should work under linux
on freebsd wtmp is ok, but updwtmpx() isn't known","WIP utmp/wtmp

should work under linux
on freebsd wtmp is ok, but updwtmpx() isn't known",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,890,2017-09-27T08:51:14Z,2017-10-05T05:35:16Z,2017-10-05T05:35:16Z,CLOSED,False,50,31,5,https://github.com/moobyfr,Feature wtmp,5,[],https://github.com/neutrinolabs/xrdp/pull/890,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/890#issuecomment-332457075,"WIP utmp/wtmp

should work under linux
on freebsd wtmp is ok, but updwtmpx() isn't known",Please resolve conflict.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,890,2017-09-27T08:51:14Z,2017-10-05T05:35:16Z,2017-10-05T05:35:16Z,CLOSED,False,50,31,5,https://github.com/moobyfr,Feature wtmp,5,[],https://github.com/neutrinolabs/xrdp/pull/890,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/890#issuecomment-334020778,"WIP utmp/wtmp

should work under linux
on freebsd wtmp is ok, but updwtmpx() isn't known",I'll hand merge this into wtmp branch.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,890,2017-09-27T08:51:14Z,2017-10-05T05:35:16Z,2017-10-05T05:35:16Z,CLOSED,False,50,31,5,https://github.com/moobyfr,Feature wtmp,5,[],https://github.com/neutrinolabs/xrdp/pull/890,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/890#issuecomment-334364005,"WIP utmp/wtmp

should work under linux
on freebsd wtmp is ok, but updwtmpx() isn't known","@moobyfr I've hand merged and pushed to wtmp branch. If you will make further changes, please checkout wtmp branch and make changes based on the branch.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,895,2017-09-28T06:50:59Z,2017-10-03T00:45:25Z,2017-10-03T00:45:26Z,MERGED,True,3,1,1,https://github.com/osalvadorvilardaga,xrdp: get port from configfile in access_control(),1,[],https://github.com/neutrinolabs/xrdp/pull/895,https://github.com/osalvadorvilardaga,1,https://github.com/neutrinolabs/xrdp/pull/895,"This fixes #894
access_control() does not read the port from the configuration file and it uses a hardcoded port instead.
So,  in case we use another port which is not the default one(3350), we are going to fail while connecting.","This fixes #894
access_control() does not read the port from the configuration file and it uses a hardcoded port instead.
So,  in case we use another port which is not the default one(3350), we are going to fail while connecting.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,895,2017-09-28T06:50:59Z,2017-10-03T00:45:25Z,2017-10-03T00:45:26Z,MERGED,True,3,1,1,https://github.com/osalvadorvilardaga,xrdp: get port from configfile in access_control(),1,[],https://github.com/neutrinolabs/xrdp/pull/895,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/895#issuecomment-332761733,"This fixes #894
access_control() does not read the port from the configuration file and it uses a hardcoded port instead.
So,  in case we use another port which is not the default one(3350), we are going to fail while connecting.",Good catch! Looks good to me except indenting.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,895,2017-09-28T06:50:59Z,2017-10-03T00:45:25Z,2017-10-03T00:45:26Z,MERGED,True,3,1,1,https://github.com/osalvadorvilardaga,xrdp: get port from configfile in access_control(),1,[],https://github.com/neutrinolabs/xrdp/pull/895,https://github.com/osalvadorvilardaga,3,https://github.com/neutrinolabs/xrdp/pull/895#issuecomment-332849405,"This fixes #894
access_control() does not read the port from the configuration file and it uses a hardcoded port instead.
So,  in case we use another port which is not the default one(3350), we are going to fail while connecting.",Is there anything else I can do here?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,895,2017-09-28T06:50:59Z,2017-10-03T00:45:25Z,2017-10-03T00:45:26Z,MERGED,True,3,1,1,https://github.com/osalvadorvilardaga,xrdp: get port from configfile in access_control(),1,[],https://github.com/neutrinolabs/xrdp/pull/895,https://github.com/jsorg71,4,https://github.com/neutrinolabs/xrdp/pull/895#issuecomment-332908979,"This fixes #894
access_control() does not read the port from the configuration file and it uses a hardcoded port instead.
So,  in case we use another port which is not the default one(3350), we are going to fail while connecting.","+1
There is more to do, sesman should use common/trans and we should use a unix domain socket for xrdp <-> sesman since they are run on the same machine.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,895,2017-09-28T06:50:59Z,2017-10-03T00:45:25Z,2017-10-03T00:45:26Z,MERGED,True,3,1,1,https://github.com/osalvadorvilardaga,xrdp: get port from configfile in access_control(),1,[],https://github.com/neutrinolabs/xrdp/pull/895,https://github.com/osalvadorvilardaga,5,https://github.com/neutrinolabs/xrdp/pull/895#issuecomment-333049086,"This fixes #894
access_control() does not read the port from the configuration file and it uses a hardcoded port instead.
So,  in case we use another port which is not the default one(3350), we are going to fail while connecting.","@jsorg71 About the common/tranns, I guess you mean changing sesman_listen_test() and sesman_main_loop() functions to use trans_* functions.
But maybe we want to merge first this.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,895,2017-09-28T06:50:59Z,2017-10-03T00:45:25Z,2017-10-03T00:45:26Z,MERGED,True,3,1,1,https://github.com/osalvadorvilardaga,xrdp: get port from configfile in access_control(),1,[],https://github.com/neutrinolabs/xrdp/pull/895,https://github.com/jsorg71,6,https://github.com/neutrinolabs/xrdp/pull/895#issuecomment-333050010,"This fixes #894
access_control() does not read the port from the configuration file and it uses a hardcoded port instead.
So,  in case we use another port which is not the default one(3350), we are going to fail while connecting.","Yes, for sure.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,895,2017-09-28T06:50:59Z,2017-10-03T00:45:25Z,2017-10-03T00:45:26Z,MERGED,True,3,1,1,https://github.com/osalvadorvilardaga,xrdp: get port from configfile in access_control(),1,[],https://github.com/neutrinolabs/xrdp/pull/895,https://github.com/metalefty,7,https://github.com/neutrinolabs/xrdp/pull/895#issuecomment-333060960,"This fixes #894
access_control() does not read the port from the configuration file and it uses a hardcoded port instead.
So,  in case we use another port which is not the default one(3350), we are going to fail while connecting.","Thanks, I think there's no problem on this PR now.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,895,2017-09-28T06:50:59Z,2017-10-03T00:45:25Z,2017-10-03T00:45:26Z,MERGED,True,3,1,1,https://github.com/osalvadorvilardaga,xrdp: get port from configfile in access_control(),1,[],https://github.com/neutrinolabs/xrdp/pull/895,https://github.com/metalefty,8,https://github.com/neutrinolabs/xrdp/pull/895#issuecomment-333706125,"This fixes #894
access_control() does not read the port from the configuration file and it uses a hardcoded port instead.
So,  in case we use another port which is not the default one(3350), we are going to fail while connecting.",Let's merge. Then think about using unix domain socket as Jay say.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,896,2017-09-29T05:22:12Z,2017-10-02T00:39:49Z,2017-10-02T00:39:51Z,MERGED,True,6,5,2,https://github.com/metalefty,xrdp: constify input event type,1,[],https://github.com/neutrinolabs/xrdp/pull/896,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/896,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,896,2017-09-29T05:22:12Z,2017-10-02T00:39:49Z,2017-10-02T00:39:51Z,MERGED,True,6,5,2,https://github.com/metalefty,xrdp: constify input event type,1,[],https://github.com/neutrinolabs/xrdp/pull/896,https://github.com/speidy,2,https://github.com/neutrinolabs/xrdp/pull/896#issuecomment-333275366,,"+1
On Fri, Sep 29, 2017 at 12:22 PM metalefty ***@***.***> wrote:
 ------------------------------
 You can view, comment on, or merge this pull request online at:

   #896
 Commit Summary

    - xrdp: constify input event type

 File Changes

    - *M* common/xrdp_constants.h
    <https://github.com/neutrinolabs/xrdp/pull/896/files#diff-0> (1)
    - *M* xrdp/xrdp_wm.c
    <https://github.com/neutrinolabs/xrdp/pull/896/files#diff-1> (10)

 Patch Links:

    - https://github.com/neutrinolabs/xrdp/pull/896.patch
    - https://github.com/neutrinolabs/xrdp/pull/896.diff

 —
 You are receiving this because you are subscribed to this thread.
 Reply to this email directly, view it on GitHub
 <#896>, or mute the thread
 <https://github.com/notifications/unsubscribe-auth/ADTH1HR3vZUFy9dHJf7LGrfUiD1NPidAks5snH6GgaJpZM4PoNbD>
 .

-- 
Idan Freiberg

PGP FP: 8108 7EC9 806E 4980 75F2  72B3 8AD3 2D04 337B 1F18",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,898,2017-10-02T09:23:28Z,2017-10-03T12:55:09Z,2017-10-03T12:55:13Z,MERGED,True,7,7,1,https://github.com/metalefty,common: prevent raw use of snprintf,1,[],https://github.com/neutrinolabs/xrdp/pull/898,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/898,"Sorry, I always forget to use g_* functions defined in os_calls.c.","Sorry, I always forget to use g_* functions defined in os_calls.c.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,904,2017-10-09T08:32:02Z,2017-10-09T12:38:11Z,2017-10-09T12:38:11Z,MERGED,True,1,1,1,https://github.com/FelixZhang,xrdp: corret the config file name in the comment,1,[],https://github.com/neutrinolabs/xrdp/pull/904,https://github.com/FelixZhang,1,https://github.com/neutrinolabs/xrdp/pull/904,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,908,2017-10-13T05:51:09Z,2017-10-14T02:54:24Z,2017-10-14T02:54:24Z,MERGED,True,14,13,2,https://github.com/metalefty,wtmp: include & cosmetic changes,2,[],https://github.com/neutrinolabs/xrdp/pull/908,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/908,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,928,2017-10-30T08:56:54Z,2017-11-06T07:18:44Z,2017-11-06T07:18:49Z,MERGED,True,79,39,3,https://github.com/metalefty,Properly support horizontal scroll wheel,7,[],https://github.com/neutrinolabs/xrdp/pull/928,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/928,"To support horizontal scroll wheel properly,

advertise capability for horizontal scroll wheel (TS_INPUT_MOUSE_HWHEEL)
handle horizontal scroll wheel events as mouse events not only extended mouse events
make mouse button 6 and 7 should act as well as button 4 and 5 (vertical scrolling)

Additionally, I've made some constifications and cleanup.
Tested and working with:

FreeRDP 2.0.0-rc0
Windows 10 1709 17025.1000 mstsc.exe
MSRDP Beta for Mac Version: 8.2.37 (Build: 808)

Not working with:

MSRDP for Mac Version 8.0.43 (Build 27325)

because horizontal scroll events are sent as vertical scroll. xrdp never receive horizontal scroll.
Closes #730.","To support horizontal scroll wheel properly,

advertise capability for horizontal scroll wheel (TS_INPUT_MOUSE_HWHEEL)
handle horizontal scroll wheel events as mouse events not only extended mouse events
make mouse button 6 and 7 should act as well as button 4 and 5 (vertical scrolling)

Additionally, I've made some constifications and cleanup.
Tested and working with:

FreeRDP 2.0.0-rc0
Windows 10 1709 17025.1000 mstsc.exe
MSRDP Beta for Mac Version: 8.2.37 (Build: 808)

Not working with:

MSRDP for Mac Version 8.0.43 (Build 27325)

because horizontal scroll events are sent as vertical scroll. xrdp never receive horizontal scroll.
Closes #730.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,928,2017-10-30T08:56:54Z,2017-11-06T07:18:44Z,2017-11-06T07:18:49Z,MERGED,True,79,39,3,https://github.com/metalefty,Properly support horizontal scroll wheel,7,[],https://github.com/neutrinolabs/xrdp/pull/928,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/928#issuecomment-341284678,"To support horizontal scroll wheel properly,

advertise capability for horizontal scroll wheel (TS_INPUT_MOUSE_HWHEEL)
handle horizontal scroll wheel events as mouse events not only extended mouse events
make mouse button 6 and 7 should act as well as button 4 and 5 (vertical scrolling)

Additionally, I've made some constifications and cleanup.
Tested and working with:

FreeRDP 2.0.0-rc0
Windows 10 1709 17025.1000 mstsc.exe
MSRDP Beta for Mac Version: 8.2.37 (Build: 808)

Not working with:

MSRDP for Mac Version 8.0.43 (Build 27325)

because horizontal scroll events are sent as vertical scroll. xrdp never receive horizontal scroll.
Closes #730.",Anything else?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,928,2017-10-30T08:56:54Z,2017-11-06T07:18:44Z,2017-11-06T07:18:49Z,MERGED,True,79,39,3,https://github.com/metalefty,Properly support horizontal scroll wheel,7,[],https://github.com/neutrinolabs/xrdp/pull/928,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/928#issuecomment-342065294,"To support horizontal scroll wheel properly,

advertise capability for horizontal scroll wheel (TS_INPUT_MOUSE_HWHEEL)
handle horizontal scroll wheel events as mouse events not only extended mouse events
make mouse button 6 and 7 should act as well as button 4 and 5 (vertical scrolling)

Additionally, I've made some constifications and cleanup.
Tested and working with:

FreeRDP 2.0.0-rc0
Windows 10 1709 17025.1000 mstsc.exe
MSRDP Beta for Mac Version: 8.2.37 (Build: 808)

Not working with:

MSRDP for Mac Version 8.0.43 (Build 27325)

because horizontal scroll events are sent as vertical scroll. xrdp never receive horizontal scroll.
Closes #730.",Let's merge.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,929,2017-10-31T13:06:23Z,2017-11-01T17:24:55Z,2018-01-04T06:25:03Z,MERGED,True,1064,1,4,https://github.com/soedar,Add dvorak keyboard layout,1,[],https://github.com/neutrinolabs/xrdp/pull/929,https://github.com/soedar,1,https://github.com/neutrinolabs/xrdp/pull/929,"I've tested the km-00010409.ini file and the xrdp_keyboard.ini files on an installed xrdp.
I'm not sure if putting the files in these directory will produce the correct output after compiling though. Please advise if I'm on the right track, thanks!","I've tested the km-00010409.ini file and the xrdp_keyboard.ini files on an installed xrdp.
I'm not sure if putting the files in these directory will produce the correct output after compiling though. Please advise if I'm on the right track, thanks!",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,929,2017-10-31T13:06:23Z,2017-11-01T17:24:55Z,2018-01-04T06:25:03Z,MERGED,True,1064,1,4,https://github.com/soedar,Add dvorak keyboard layout,1,[],https://github.com/neutrinolabs/xrdp/pull/929,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/929#issuecomment-340791752,"I've tested the km-00010409.ini file and the xrdp_keyboard.ini files on an installed xrdp.
I'm not sure if putting the files in these directory will produce the correct output after compiling though. Please advise if I'm on the right track, thanks!","Overall, looks good to me. Don't forget to add km-00010409.ini to instfiles/Makefile.am.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,929,2017-10-31T13:06:23Z,2017-11-01T17:24:55Z,2018-01-04T06:25:03Z,MERGED,True,1064,1,4,https://github.com/soedar,Add dvorak keyboard layout,1,[],https://github.com/neutrinolabs/xrdp/pull/929,https://github.com/soedar,3,https://github.com/neutrinolabs/xrdp/pull/929#issuecomment-340949628,"I've tested the km-00010409.ini file and the xrdp_keyboard.ini files on an installed xrdp.
I'm not sure if putting the files in these directory will produce the correct output after compiling though. Please advise if I'm on the right track, thanks!","Overall, looks good to me. Don't forget to add km-00010409.ini to instfiles/Makefile.am.

Ah, I've missed this.

IMO, rdp_layout_us_dvorak is a plausible alternative.

Okay, I've made the change in this PR.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,930,2017-10-31T21:03:14Z,2017-11-08T03:01:45Z,2017-11-08T16:31:37Z,CLOSED,False,116,2,7,https://github.com/jterry75,Implements XRDP over vsock,1,[],https://github.com/neutrinolabs/xrdp/pull/930,https://github.com/jterry75,1,https://github.com/neutrinolabs/xrdp/pull/930,"Implements the ability to use AV_VSOCK for the transport rather than TCP.
Updates the ini file to be able to conditionally turn this feature on.","Implements the ability to use AV_VSOCK for the transport rather than TCP.
Updates the ini file to be able to conditionally turn this feature on.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,930,2017-10-31T21:03:14Z,2017-11-08T03:01:45Z,2017-11-08T16:31:37Z,CLOSED,False,116,2,7,https://github.com/jterry75,Implements XRDP over vsock,1,[],https://github.com/neutrinolabs/xrdp/pull/930,https://github.com/jsorg71,2,https://github.com/neutrinolabs/xrdp/pull/930#issuecomment-340921072,"Implements the ability to use AV_VSOCK for the transport rather than TCP.
Updates the ini file to be able to conditionally turn this feature on.",We are going to need an autotools/configure check for this.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,930,2017-10-31T21:03:14Z,2017-11-08T03:01:45Z,2017-11-08T16:31:37Z,CLOSED,False,116,2,7,https://github.com/jterry75,Implements XRDP over vsock,1,[],https://github.com/neutrinolabs/xrdp/pull/930,https://github.com/jterry75,3,https://github.com/neutrinolabs/xrdp/pull/930#issuecomment-341198699,"Implements the ability to use AV_VSOCK for the transport rather than TCP.
Updates the ini file to be able to conditionally turn this feature on.",@jsorg71 - Do you mean that you want this to be conditionally compiled only when someone runs ./configure --enable-vsock or something?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,930,2017-10-31T21:03:14Z,2017-11-08T03:01:45Z,2017-11-08T16:31:37Z,CLOSED,False,116,2,7,https://github.com/jterry75,Implements XRDP over vsock,1,[],https://github.com/neutrinolabs/xrdp/pull/930,https://github.com/jsorg71,4,https://github.com/neutrinolabs/xrdp/pull/930#issuecomment-341233420,"Implements the ability to use AV_VSOCK for the transport rather than TCP.
Updates the ini file to be able to conditionally turn this feature on.","@jterry75 yes, as you can see, travis-ci fails because it does not have that header",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,930,2017-10-31T21:03:14Z,2017-11-08T03:01:45Z,2017-11-08T16:31:37Z,CLOSED,False,116,2,7,https://github.com/jterry75,Implements XRDP over vsock,1,[],https://github.com/neutrinolabs/xrdp/pull/930,https://github.com/metalefty,5,https://github.com/neutrinolabs/xrdp/pull/930#issuecomment-341280432,"Implements the ability to use AV_VSOCK for the transport rather than TCP.
Updates the ini file to be able to conditionally turn this feature on.","xrdp is not used only on GNU/Linux. Not many but certain users use xrdp on FreeBSD or macOS or else.  Conditional switches are fine for such OSes.
BTW, disabling vsock build by not giving --enable-vsock means vsock is not tested by Travis CI.  For the time being, that is OK but we need to make some changes on travis config someday.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,930,2017-10-31T21:03:14Z,2017-11-08T03:01:45Z,2017-11-08T16:31:37Z,CLOSED,False,116,2,7,https://github.com/jterry75,Implements XRDP over vsock,1,[],https://github.com/neutrinolabs/xrdp/pull/930,https://github.com/jterry75,6,https://github.com/neutrinolabs/xrdp/pull/930#issuecomment-341465156,"Implements the ability to use AV_VSOCK for the transport rather than TCP.
Updates the ini file to be able to conditionally turn this feature on.",@metalefty - I think you are saying to add --enable-vsock to the max_amd64_conf section? I'm not sure how to make it distro specific to only use this option on linux?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,930,2017-10-31T21:03:14Z,2017-11-08T03:01:45Z,2017-11-08T16:31:37Z,CLOSED,False,116,2,7,https://github.com/jterry75,Implements XRDP over vsock,1,[],https://github.com/neutrinolabs/xrdp/pull/930,https://github.com/jterry75,7,https://github.com/neutrinolabs/xrdp/pull/930#issuecomment-342247088,"Implements the ability to use AV_VSOCK for the transport rather than TCP.
Updates the ini file to be able to conditionally turn this feature on.",@metalefty - Is that what you are asking me to do? If so I can make the change and update but just wanted to make sure that's what you mean.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,930,2017-10-31T21:03:14Z,2017-11-08T03:01:45Z,2017-11-08T16:31:37Z,CLOSED,False,116,2,7,https://github.com/jterry75,Implements XRDP over vsock,1,[],https://github.com/neutrinolabs/xrdp/pull/930,https://github.com/jsorg71,8,https://github.com/neutrinolabs/xrdp/pull/930#issuecomment-342315764,"Implements the ability to use AV_VSOCK for the transport rather than TCP.
Updates the ini file to be able to conditionally turn this feature on.","@jterry75 I think he is saying we need to change that(travis) some day.
I always prefer to have less #ifdefs, I'll do a PR for my idea to simplify.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,930,2017-10-31T21:03:14Z,2017-11-08T03:01:45Z,2017-11-08T16:31:37Z,CLOSED,False,116,2,7,https://github.com/jterry75,Implements XRDP over vsock,1,[],https://github.com/neutrinolabs/xrdp/pull/930,https://github.com/metalefty,9,https://github.com/neutrinolabs/xrdp/pull/930#issuecomment-342331721,"Implements the ability to use AV_VSOCK for the transport rather than TCP.
Updates the ini file to be able to conditionally turn this feature on.","@jterry75 Sorry for late reply. I'm not asking you to do that. I meant --enable-vsock also should be pass the Travis build test. Currently, build environment doesn't have linux/vm_sockets.h. I have some thoughts to improve travis build test so I'll change the build test after merging this.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,930,2017-10-31T21:03:14Z,2017-11-08T03:01:45Z,2017-11-08T16:31:37Z,CLOSED,False,116,2,7,https://github.com/jterry75,Implements XRDP over vsock,1,[],https://github.com/neutrinolabs/xrdp/pull/930,https://github.com/jterry75,10,https://github.com/neutrinolabs/xrdp/pull/930#issuecomment-342530861,"Implements the ability to use AV_VSOCK for the transport rather than TCP.
Updates the ini file to be able to conditionally turn this feature on.","@metalefty - Updated based on your suggestions leaving out the Travis changes.
@jsorg71 - I am happy to leave all the functions in and simply #ifdef in the implementations in os_calls.c to avoid the #ifdef in other files. Would you like me to do that? I figured that it was better to remove the code associated with the --enable-vsock so it was a compile time error rather than runtime but I'm fine either way.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,930,2017-10-31T21:03:14Z,2017-11-08T03:01:45Z,2017-11-08T16:31:37Z,CLOSED,False,116,2,7,https://github.com/jterry75,Implements XRDP over vsock,1,[],https://github.com/neutrinolabs/xrdp/pull/930,https://github.com/jsorg71,11,https://github.com/neutrinolabs/xrdp/pull/930#issuecomment-342601944,"Implements the ability to use AV_VSOCK for the transport rather than TCP.
Updates the ini file to be able to conditionally turn this feature on.","@jterry75 , lets use #935 for this",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,930,2017-10-31T21:03:14Z,2017-11-08T03:01:45Z,2017-11-08T16:31:37Z,CLOSED,False,116,2,7,https://github.com/jterry75,Implements XRDP over vsock,1,[],https://github.com/neutrinolabs/xrdp/pull/930,https://github.com/jsorg71,12,https://github.com/neutrinolabs/xrdp/pull/930#issuecomment-342689815,"Implements the ability to use AV_VSOCK for the transport rather than TCP.
Updates the ini file to be able to conditionally turn this feature on.","I think we can delete this.  Sorry, I didn't want to create a new PR, I wanted to do a PR to your PR.  I guess I can't do that ??",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,930,2017-10-31T21:03:14Z,2017-11-08T03:01:45Z,2017-11-08T16:31:37Z,CLOSED,False,116,2,7,https://github.com/jterry75,Implements XRDP over vsock,1,[],https://github.com/neutrinolabs/xrdp/pull/930,https://github.com/metalefty,13,https://github.com/neutrinolabs/xrdp/pull/930#issuecomment-342695631,"Implements the ability to use AV_VSOCK for the transport rather than TCP.
Updates the ini file to be able to conditionally turn this feature on.",You can't do a PR to another PR but you can do a PR to other people's branch. It is almost as same as doing a PR to another PR.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,930,2017-10-31T21:03:14Z,2017-11-08T03:01:45Z,2017-11-08T16:31:37Z,CLOSED,False,116,2,7,https://github.com/jterry75,Implements XRDP over vsock,1,[],https://github.com/neutrinolabs/xrdp/pull/930,https://github.com/metalefty,14,https://github.com/neutrinolabs/xrdp/pull/930#issuecomment-342695775,"Implements the ability to use AV_VSOCK for the transport rather than TCP.
Updates the ini file to be able to conditionally turn this feature on.",Merged as #935.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,930,2017-10-31T21:03:14Z,2017-11-08T03:01:45Z,2017-11-08T16:31:37Z,CLOSED,False,116,2,7,https://github.com/jterry75,Implements XRDP over vsock,1,[],https://github.com/neutrinolabs/xrdp/pull/930,https://github.com/jterry75,15,https://github.com/neutrinolabs/xrdp/pull/930#issuecomment-342873501,"Implements the ability to use AV_VSOCK for the transport rather than TCP.
Updates the ini file to be able to conditionally turn this feature on.",Thanks!,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,935,2017-11-07T00:44:46Z,2017-11-08T02:20:46Z,2017-11-29T00:59:15Z,MERGED,True,96,3,7,https://github.com/jsorg71,vsock,4,[],https://github.com/neutrinolabs/xrdp/pull/935,https://github.com/jsorg71,1,https://github.com/neutrinolabs/xrdp/pull/935,"Always have the os_calls vsock functions defined.   More consistent with other function.
Print an error if vsock is requested but not compiled.","Always have the os_calls vsock functions defined.   More consistent with other function.
Print an error if vsock is requested but not compiled.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,935,2017-11-07T00:44:46Z,2017-11-08T02:20:46Z,2017-11-29T00:59:15Z,MERGED,True,96,3,7,https://github.com/jsorg71,vsock,4,[],https://github.com/neutrinolabs/xrdp/pull/935,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/935#issuecomment-342353061,"Always have the os_calls vsock functions defined.   More consistent with other function.
Print an error if vsock is requested but not compiled.",Maybe I should comment on Jay's change here. Please forget.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,936,2017-11-07T10:02:16Z,2017-11-07T23:57:53Z,2017-11-08T00:02:41Z,MERGED,True,3,3,1,https://github.com/metalefty,sound: g_bbuf_size should be determined after codec is determined,1,[],https://github.com/neutrinolabs/xrdp/pull/936,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/936,"Fixes #910, if both client and server support more than one codecs,
g_bbuf_size might be set to wrong value.
There might be a better fix but this certainly fixes the issue.","Fixes #910, if both client and server support more than one codecs,
g_bbuf_size might be set to wrong value.
There might be a better fix but this certainly fixes the issue.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,936,2017-11-07T10:02:16Z,2017-11-07T23:57:53Z,2017-11-08T00:02:41Z,MERGED,True,3,3,1,https://github.com/metalefty,sound: g_bbuf_size should be determined after codec is determined,1,[],https://github.com/neutrinolabs/xrdp/pull/936,https://github.com/jsorg71,2,https://github.com/neutrinolabs/xrdp/pull/936#issuecomment-342435387,"Fixes #910, if both client and server support more than one codecs,
g_bbuf_size might be set to wrong value.
There might be a better fix but this certainly fixes the issue.",+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,936,2017-11-07T10:02:16Z,2017-11-07T23:57:53Z,2017-11-08T00:02:41Z,MERGED,True,3,3,1,https://github.com/metalefty,sound: g_bbuf_size should be determined after codec is determined,1,[],https://github.com/neutrinolabs/xrdp/pull/936,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/936#issuecomment-342664266,"Fixes #910, if both client and server support more than one codecs,
g_bbuf_size might be set to wrong value.
There might be a better fix but this certainly fixes the issue.","The diff is simple enough, let's merge.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,941,2017-11-09T01:56:44Z,2017-11-10T05:13:55Z,2017-11-10T06:37:15Z,MERGED,True,0,3,4,https://github.com/jsorg71,remove empty crc16.h file,2,[],https://github.com/neutrinolabs/xrdp/pull/941,https://github.com/jsorg71,1,https://github.com/neutrinolabs/xrdp/pull/941,,,True,{'THUMBS_UP': ['https://github.com/metalefty']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,941,2017-11-09T01:56:44Z,2017-11-10T05:13:55Z,2017-11-10T06:37:15Z,MERGED,True,0,3,4,https://github.com/jsorg71,remove empty crc16.h file,2,[],https://github.com/neutrinolabs/xrdp/pull/941,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/941#issuecomment-343035759,,Don't forget to remove it fromcommon/Makefile.am.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,943,2017-11-10T02:29:19Z,2017-11-12T01:22:37Z,2018-12-14T01:45:41Z,MERGED,True,10,4,1,https://github.com/metalefty,"travis: add build test on FDK AAC, Opus",1,[],https://github.com/neutrinolabs/xrdp/pull/943,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/943,"Before testing --enable-vsock, let's test these two.","Before testing --enable-vsock, let's test these two.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,944,2017-11-10T07:49:28Z,2017-11-12T13:27:47Z,2017-11-12T13:27:52Z,MERGED,True,2,1,1,https://github.com/metalefty,"chansrv: add LOG_LEVEL_TRACE here, too",1,[],https://github.com/neutrinolabs/xrdp/pull/944,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/944,missing in #835,missing in #835,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,945,2017-11-12T10:35:35Z,2017-11-16T01:36:17Z,2017-11-16T01:36:17Z,MERGED,True,48,15,5,https://github.com/moobyfr,Wtmp,5,[],https://github.com/neutrinolabs/xrdp/pull/945,https://github.com/moobyfr,1,https://github.com/neutrinolabs/xrdp/pull/945,"Use the exact IP in the hostname field
Preliminary support for freebsd
Update pam configuration to set the loginuid in procfs (As we are starting a session for a user)","Use the exact IP in the hostname field
Preliminary support for freebsd
Update pam configuration to set the loginuid in procfs (As we are starting a session for a user)",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,945,2017-11-12T10:35:35Z,2017-11-16T01:36:17Z,2017-11-16T01:36:17Z,MERGED,True,48,15,5,https://github.com/moobyfr,Wtmp,5,[],https://github.com/neutrinolabs/xrdp/pull/945,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/945#issuecomment-343737208,"Use the exact IP in the hostname field
Preliminary support for freebsd
Update pam configuration to set the loginuid in procfs (As we are starting a session for a user)",I'll look at this on Tuesday. I also try it on FreeBSD next week.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,945,2017-11-12T10:35:35Z,2017-11-16T01:36:17Z,2017-11-16T01:36:17Z,MERGED,True,48,15,5,https://github.com/moobyfr,Wtmp,5,[],https://github.com/neutrinolabs/xrdp/pull/945,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/945#issuecomment-344787124,"Use the exact IP in the hostname field
Preliminary support for freebsd
Update pam configuration to set the loginuid in procfs (As we are starting a session for a user)",Let's merge into wtmp branch.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,946,2017-11-13T22:42:37Z,2017-11-18T04:34:18Z,2017-11-18T04:34:18Z,CLOSED,False,13,13,2,https://github.com/jsorg71,add TS_ to INPUT constants in xrdp_constants.h,1,[],https://github.com/neutrinolabs/xrdp/pull/946,https://github.com/jsorg71,1,https://github.com/neutrinolabs/xrdp/pull/946,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,946,2017-11-13T22:42:37Z,2017-11-18T04:34:18Z,2017-11-18T04:34:18Z,CLOSED,False,13,13,2,https://github.com/jsorg71,add TS_ to INPUT constants in xrdp_constants.h,1,[],https://github.com/neutrinolabs/xrdp/pull/946,https://github.com/jsorg71,2,https://github.com/neutrinolabs/xrdp/pull/946#issuecomment-344084373,,fix for #931,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,946,2017-11-13T22:42:37Z,2017-11-18T04:34:18Z,2017-11-18T04:34:18Z,CLOSED,False,13,13,2,https://github.com/jsorg71,add TS_ to INPUT constants in xrdp_constants.h,1,[],https://github.com/neutrinolabs/xrdp/pull/946,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/946#issuecomment-344116561,,"I thought you were going to respect the original document. If the original constant has TS_ prefix and the prefix removed in xrdp, resurrect the prefix. Am I misunderstood?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,946,2017-11-13T22:42:37Z,2017-11-18T04:34:18Z,2017-11-18T04:34:18Z,CLOSED,False,13,13,2,https://github.com/jsorg71,add TS_ to INPUT constants in xrdp_constants.h,1,[],https://github.com/neutrinolabs/xrdp/pull/946,https://github.com/jsorg71,4,https://github.com/neutrinolabs/xrdp/pull/946#issuecomment-344117985,,"Yes, so we don't need this PR.  If we're all good,  I'll delete this after day or so and close #931",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,946,2017-11-13T22:42:37Z,2017-11-18T04:34:18Z,2017-11-18T04:34:18Z,CLOSED,False,13,13,2,https://github.com/jsorg71,add TS_ to INPUT constants in xrdp_constants.h,1,[],https://github.com/neutrinolabs/xrdp/pull/946,https://github.com/metalefty,5,https://github.com/neutrinolabs/xrdp/pull/946#issuecomment-344120660,,"BTW, I have some thoughts on constants.  I'll raise a new issue and let's discuss.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,948,2017-11-14T17:23:50Z,2017-11-18T04:23:21Z,2017-11-20T22:06:33Z,MERGED,True,42,0,1,https://github.com/jterry75,Implements the accept/close logic for vsock,1,[],https://github.com/neutrinolabs/xrdp/pull/948,https://github.com/jterry75,1,https://github.com/neutrinolabs/xrdp/pull/948,"Looks like I forgot to add this in the original commit. This now will avoid logging messages about unknown connections on unknown families and give better output.
Ex: ""AF_VSOCK connection received from cid: -1 port: 3389""

-1 for clarity:
#define VMADDR_CID_ANY -1U","Looks like I forgot to add this in the original commit. This now will avoid logging messages about unknown connections on unknown families and give better output.
Ex: ""AF_VSOCK connection received from cid: -1 port: 3389""

-1 for clarity:
#define VMADDR_CID_ANY -1U",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,948,2017-11-14T17:23:50Z,2017-11-18T04:23:21Z,2017-11-20T22:06:33Z,MERGED,True,42,0,1,https://github.com/jterry75,Implements the accept/close logic for vsock,1,[],https://github.com/neutrinolabs/xrdp/pull/948,https://github.com/speidy,2,https://github.com/neutrinolabs/xrdp/pull/948#issuecomment-344539305,"Looks like I forgot to add this in the original commit. This now will avoid logging messages about unknown connections on unknown families and give better output.
Ex: ""AF_VSOCK connection received from cid: -1 port: 3389""

-1 for clarity:
#define VMADDR_CID_ANY -1U","Hi @jterry75
How can we test xrdp over vsock ?
Thx.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,948,2017-11-14T17:23:50Z,2017-11-18T04:23:21Z,2017-11-20T22:06:33Z,MERGED,True,42,0,1,https://github.com/jterry75,Implements the accept/close logic for vsock,1,[],https://github.com/neutrinolabs/xrdp/pull/948,https://github.com/jterry75,3,https://github.com/neutrinolabs/xrdp/pull/948#issuecomment-344695832,"Looks like I forgot to add this in the original commit. This now will avoid logging messages about unknown connections on unknown families and give better output.
Ex: ""AF_VSOCK connection received from cid: -1 port: 3389""

-1 for clarity:
#define VMADDR_CID_ANY -1U","@speidy - Simple VSOCK setup for QEMU
I found this link that might be helpful. The scenario here would be to directly remote to a linux VM hosted in QEMU that might not have networking. IE: The XRDP channel to the guest can be done over VSOCK between the host/guest. The easiest way to do this is to create a VM with QEMU and enable VSOCK as your RDP client destination (using socat or others) and then set use_vsock=true in the xrdp.ini file in the guest. (To change the default port=3389 you can also update the xrdp.ini). Now you can start connecting to XRDP over the host/guest channel and send/receive connections.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,948,2017-11-14T17:23:50Z,2017-11-18T04:23:21Z,2017-11-20T22:06:33Z,MERGED,True,42,0,1,https://github.com/jterry75,Implements the accept/close logic for vsock,1,[],https://github.com/neutrinolabs/xrdp/pull/948,https://github.com/jsorg71,4,https://github.com/neutrinolabs/xrdp/pull/948#issuecomment-345142789,"Looks like I forgot to add this in the original commit. This now will avoid logging messages about unknown connections on unknown families and give better output.
Ex: ""AF_VSOCK connection received from cid: -1 port: 3389""

-1 for clarity:
#define VMADDR_CID_ANY -1U",+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,951,2017-11-15T09:44:33Z,2017-11-24T12:45:49Z,2017-11-24T12:45:50Z,MERGED,True,524,436,1,https://github.com/metalefty,common: add references to constants' origin,2,[],https://github.com/neutrinolabs/xrdp/pull/951,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/951,"I added constants' origin AFAIK as I suggested in #947. Still WIP.
Dones:

Add comments where the constants come from
seperate RDP origin constants and xrdp constants

Not dones:

sync names used in the original document
seperate RDP origin constants and xrdp constants","I added constants' origin AFAIK as I suggested in #947. Still WIP.
Dones:

Add comments where the constants come from
seperate RDP origin constants and xrdp constants

Not dones:

sync names used in the original document
seperate RDP origin constants and xrdp constants",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,951,2017-11-15T09:44:33Z,2017-11-24T12:45:49Z,2017-11-24T12:45:50Z,MERGED,True,524,436,1,https://github.com/metalefty,common: add references to constants' origin,2,[],https://github.com/neutrinolabs/xrdp/pull/951,https://github.com/jsorg71,2,https://github.com/neutrinolabs/xrdp/pull/951#issuecomment-346244314,"I added constants' origin AFAIK as I suggested in #947. Still WIP.
Dones:

Add comments where the constants come from
seperate RDP origin constants and xrdp constants

Not dones:

sync names used in the original document
seperate RDP origin constants and xrdp constants",+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,951,2017-11-15T09:44:33Z,2017-11-24T12:45:49Z,2017-11-24T12:45:50Z,MERGED,True,524,436,1,https://github.com/metalefty,common: add references to constants' origin,2,[],https://github.com/neutrinolabs/xrdp/pull/951,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/951#issuecomment-346246146,"I added constants' origin AFAIK as I suggested in #947. Still WIP.
Dones:

Add comments where the constants come from
seperate RDP origin constants and xrdp constants

Not dones:

sync names used in the original document
seperate RDP origin constants and xrdp constants",I'm adding more origins now.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,951,2017-11-15T09:44:33Z,2017-11-24T12:45:49Z,2017-11-24T12:45:50Z,MERGED,True,524,436,1,https://github.com/metalefty,common: add references to constants' origin,2,[],https://github.com/neutrinolabs/xrdp/pull/951,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/951#issuecomment-346290347,"I added constants' origin AFAIK as I suggested in #947. Still WIP.
Dones:

Add comments where the constants come from
seperate RDP origin constants and xrdp constants

Not dones:

sync names used in the original document
seperate RDP origin constants and xrdp constants","I added more origins, classified constants into these 5 types

constants for xrdp
constants come from ITU-T Recommendations
constants come from Remote Desktop Protocol
constants come from other MS products
unclassified yet",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,951,2017-11-15T09:44:33Z,2017-11-24T12:45:49Z,2017-11-24T12:45:50Z,MERGED,True,524,436,1,https://github.com/metalefty,common: add references to constants' origin,2,[],https://github.com/neutrinolabs/xrdp/pull/951,https://github.com/metalefty,5,https://github.com/neutrinolabs/xrdp/pull/951#issuecomment-346821110,"I added constants' origin AFAIK as I suggested in #947. Still WIP.
Dones:

Add comments where the constants come from
seperate RDP origin constants and xrdp constants

Not dones:

sync names used in the original document
seperate RDP origin constants and xrdp constants","No logic change in this PR, adding comments and sorting only. Merging.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,956,2017-11-21T19:53:01Z,2017-11-23T00:17:35Z,2017-11-29T01:00:04Z,MERGED,True,9,0,1,https://github.com/jsorg71,"common: avoid 100% cpu on ssl accept, can be fake client",1,[],https://github.com/neutrinolabs/xrdp/pull/956,https://github.com/jsorg71,1,https://github.com/neutrinolabs/xrdp/pull/956,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,956,2017-11-21T19:53:01Z,2017-11-23T00:17:35Z,2017-11-29T01:00:04Z,MERGED,True,9,0,1,https://github.com/jsorg71,"common: avoid 100% cpu on ssl accept, can be fake client",1,[],https://github.com/neutrinolabs/xrdp/pull/956,https://github.com/alexbers,2,https://github.com/neutrinolabs/xrdp/pull/956#issuecomment-346160791,,I can confirm that 100% load is fixed after applying this patch.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,956,2017-11-21T19:53:01Z,2017-11-23T00:17:35Z,2017-11-29T01:00:04Z,MERGED,True,9,0,1,https://github.com/jsorg71,"common: avoid 100% cpu on ssl accept, can be fake client",1,[],https://github.com/neutrinolabs/xrdp/pull/956,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/956#issuecomment-346215885,,+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,958,2017-11-21T22:41:18Z,2017-11-28T00:04:26Z,2017-12-20T18:45:56Z,MERGED,True,25,7,1,https://github.com/speidy,"sesman: scpv0, accept variable length data fields",1,[],https://github.com/neutrinolabs/xrdp/pull/958,https://github.com/speidy,1,https://github.com/neutrinolabs/xrdp/pull/958,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,958,2017-11-21T22:41:18Z,2017-11-28T00:04:26Z,2017-12-20T18:45:56Z,MERGED,True,25,7,1,https://github.com/speidy,"sesman: scpv0, accept variable length data fields",1,[],https://github.com/neutrinolabs/xrdp/pull/958,https://github.com/carnil,2,https://github.com/neutrinolabs/xrdp/pull/958#issuecomment-346551350,,CVE-2017-16927,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,958,2017-11-21T22:41:18Z,2017-11-28T00:04:26Z,2017-12-20T18:45:56Z,MERGED,True,25,7,1,https://github.com/speidy,"sesman: scpv0, accept variable length data fields",1,[],https://github.com/neutrinolabs/xrdp/pull/958,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/958#issuecomment-346643731,,LGTM,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,958,2017-11-21T22:41:18Z,2017-11-28T00:04:26Z,2017-12-20T18:45:56Z,MERGED,True,25,7,1,https://github.com/speidy,"sesman: scpv0, accept variable length data fields",1,[],https://github.com/neutrinolabs/xrdp/pull/958,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/958#issuecomment-346945814,,@jsorg71 are you ok with this?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,958,2017-11-21T22:41:18Z,2017-11-28T00:04:26Z,2017-12-20T18:45:56Z,MERGED,True,25,7,1,https://github.com/speidy,"sesman: scpv0, accept variable length data fields",1,[],https://github.com/neutrinolabs/xrdp/pull/958,https://github.com/jsorg71,5,https://github.com/neutrinolabs/xrdp/pull/958#issuecomment-347332921,,+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,958,2017-11-21T22:41:18Z,2017-11-28T00:04:26Z,2017-12-20T18:45:56Z,MERGED,True,25,7,1,https://github.com/speidy,"sesman: scpv0, accept variable length data fields",1,[],https://github.com/neutrinolabs/xrdp/pull/958,https://github.com/Natureshadow,6,https://github.com/neutrinolabs/xrdp/pull/958#issuecomment-353148785,,"As reported in Debian, this patch is broken because g_new0(char, sz) reserves sz bytes and buf[sz] = '\0' in turn writes behind the buffer, corrupting memory.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,961,2017-11-24T15:51:03Z,2017-12-01T02:20:43Z,2017-12-01T02:20:50Z,MERGED,True,80,61,3,https://github.com/metalefty,Constify color depth and capability set,5,[],https://github.com/neutrinolabs/xrdp/pull/961,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/961,Define capset constants in hex as MS-RDPBCGR does. Easier to compare with MS documents.,Define capset constants in hex as MS-RDPBCGR does. Easier to compare with MS documents.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,961,2017-11-24T15:51:03Z,2017-12-01T02:20:43Z,2017-12-01T02:20:50Z,MERGED,True,80,61,3,https://github.com/metalefty,Constify color depth and capability set,5,[],https://github.com/neutrinolabs/xrdp/pull/961,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/961#issuecomment-346910906,Define capset constants in hex as MS-RDPBCGR does. Easier to compare with MS documents.,Please check decimal to hex conversion. I've already checked but to make it doubly sure.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,961,2017-11-24T15:51:03Z,2017-12-01T02:20:43Z,2017-12-01T02:20:50Z,MERGED,True,80,61,3,https://github.com/metalefty,Constify color depth and capability set,5,[],https://github.com/neutrinolabs/xrdp/pull/961,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/961#issuecomment-348382567,Define capset constants in hex as MS-RDPBCGR does. Easier to compare with MS documents.,My colleague has checked decimal to hex conversion.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,963,2017-11-29T00:46:39Z,,2020-12-23T15:16:17Z,OPEN,False,1012,632,8,https://github.com/jsorg71,set PCSCLITE_CSOCK_NAME env var,5,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/963,https://github.com/jsorg71,1,https://github.com/neutrinolabs/xrdp/pull/963,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,963,2017-11-29T00:46:39Z,,2020-12-23T15:16:17Z,OPEN,False,1012,632,8,https://github.com/jsorg71,set PCSCLITE_CSOCK_NAME env var,5,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/963,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/963#issuecomment-349829737,,Check for PCSC sockets should be added to x_server_running_check_ports()?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,963,2017-11-29T00:46:39Z,,2020-12-23T15:16:17Z,OPEN,False,1012,632,8,https://github.com/jsorg71,set PCSCLITE_CSOCK_NAME env var,5,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/963,https://github.com/jsorg71,3,https://github.com/neutrinolabs/xrdp/pull/963#issuecomment-349830037,,"Yes, thanks",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,963,2017-11-29T00:46:39Z,,2020-12-23T15:16:17Z,OPEN,False,1012,632,8,https://github.com/jsorg71,set PCSCLITE_CSOCK_NAME env var,5,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/963,https://github.com/mvalente,4,https://github.com/neutrinolabs/xrdp/pull/963#issuecomment-351775596,,"OK, trying to test this but having some problems.
As I stated before, but restating:


I have a Ubuntu MATE 17.10 running perfectly with xrdp, latest repository update. I can use RDC on Windows and connect to it, logging in with an AD credential.


I have a working USB card reader, Windows side. On the Linux side I have overwriten the system's default pcsclite lib with xrdp's version. On a console, when I run pcsc_scan I get ""One card found"", but the card cant be read by any application.


further debugging shows this on loop from pcsc_scan



Waiting for the first reader...found one
Scanning present readers...
SCardListReaders:
SCardListReaders: mszGroups (null)
SCardListReaders: *pcchReaders 1
send_message:
0000 06 00 00 00 00 00 00 00 00 00 00 00 ............
get_message:
get_message: loop
SCardListReaders: mszReaders (nil) pcchReaders 0x7fff5e9d6858 num_readers 0
SCardListReaders: status 0x00000000
SCardListReaders:
SCardListReaders: mszGroups (null)
SCardListReaders: *pcchReaders 0
send_message:
0000 06 00 00 00 00 00 00 00 00 00 00 00 ............
get_message:
get_message: loop
SCardListReaders: mszReaders 0x5605a218f670 pcchReaders 0x7fff5e9d6858 num_readers 0
SCardListReaders: status 0x00000000


I built this devel version (the one that sets PCSCLITE_CSOCK_NAME) and installed it
replaced xrdp's pcsclite lib with the original lib
when connecting from Windows using RDC I get the following result (see screenshot); all other files, namely config files, are the same as before:


Any help on how to solve or further debug is appreciated.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,963,2017-11-29T00:46:39Z,,2020-12-23T15:16:17Z,OPEN,False,1012,632,8,https://github.com/jsorg71,set PCSCLITE_CSOCK_NAME env var,5,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/963,https://github.com/jsorg71,5,https://github.com/neutrinolabs/xrdp/pull/963#issuecomment-351843296,,"early version did that
sha1 should be 693016a
can you run xrdp and xrdp-sesman in forground to see what happens?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,963,2017-11-29T00:46:39Z,,2020-12-23T15:16:17Z,OPEN,False,1012,632,8,https://github.com/jsorg71,set PCSCLITE_CSOCK_NAME env var,5,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/963,https://github.com/mvalente,6,https://github.com/neutrinolabs/xrdp/pull/963#issuecomment-352000130,,"Here's the output of foreground xrdp --n

root@LS1710-2:~/xrdp-693016a70c60e3323a414430128596dae98646d6# xrdp -n
logging configuration:
LogFile:       /var/log/xrdp.log
LogLevel:      4
EnableSyslog:  1
SyslogLevel:   4
[20171215-12:30:46] [INFO ] starting xrdp with pid 19810
[20171215-12:30:46] [INFO ] listening to port 3389 on 0.0.0.0
[20171215-12:33:39] [INFO ] Socket 12: AF_INET connection received from 172.24.27.178 port 60991
[20171215-12:33:39] [DEBUG] Closed socket 12 (AF_INET 172.24.22.35:3389)
[20171215-12:33:39] [DEBUG] Closed socket 11 (AF_INET 0.0.0.0:3389)
[20171215-12:33:39] [INFO ] Using default X.509 certificate: /etc/xrdp/cert.pem
[20171215-12:33:39] [INFO ] Using default X.509 key file: /etc/xrdp/key.pem
[20171215-12:33:39] [DEBUG] Security layer: requested 11, selected 1
ssl_tls_accept: TLS connection accepted
ssl_tls_print_error: SSL_read: I/O error
libxrdp_force_read: error
xrdp_process_main_loop: libxrdp_process_incoming failed
got XRDP SIGPIPE(13)
got XRDP SIGPIPE(13)
ssl_tls_print_error: SSL_shutdown: I/O error
[20171215-12:33:39] [DEBUG] Closed socket 12 (AF_INET 172.24.22.35:3389)
xrdp_mcs_disconnect - socket closed
[20171215-12:33:39] [ERROR] Listening socket is in wrong state, terminating listener
[20171215-12:33:39] [CORE ] shutting down log subsystem...
[20171215-12:33:41] [INFO ] Socket 12: AF_INET connection received from 172.24.27.178 port 60992
[20171215-12:33:41] [DEBUG] Closed socket 12 (AF_INET 172.24.22.35:3389)
[20171215-12:33:41] [DEBUG] Closed socket 11 (AF_INET 0.0.0.0:3389)
[20171215-12:33:41] [INFO ] Using default X.509 certificate: /etc/xrdp/cert.pem
[20171215-12:33:41] [INFO ] Using default X.509 key file: /etc/xrdp/key.pem
[20171215-12:33:41] [DEBUG] Security layer: requested 11, selected 1
ssl_tls_accept: TLS connection accepted
colorDepth 0xca01 (0xca00 4bpp 0xca01 8bpp)
[20171215-12:33:41] [INFO ] connected client computer name: BEP-V004
postBeta2ColorDepth 0xca01 (0xca00 4bpp 0xca01 8bpp 0xca02 15bpp 0xca03 16bpp 0xca04 24bpp)
highColorDepth 0x0018 (0x0004 4bpp 0x0008 8bpp 0x000f 15bpp 0x0010 16 bpp 0x0018 24bpp)
supportedColorDepths 0x000f (0x0001 24bpp 0x0002 16bpp 0x0004 15bpp 0x0008 32bpp)
earlyCapabilityFlags 0x07ad (0x0002 want32)
got client client connection type 0x00000007
xrdp_sec_process_mcs_data_CS_SECURITY:
client supports 40 bit encryption
client supports 128 bit encryption
client supports 56 bit encryption
client supports fips encryption
error unknown xrdp_sec_process_mcs_data tag 0xc006 size 8
error unknown xrdp_sec_process_mcs_data tag 0xc00a size 8
xrdp_sec_out_mcs_data: using no security
xrdp_load_keyboard_layout: keyboard_type [7] keyboard_subtype [0]
xrdp_load_keyboard_layout: model [] variant [] layout [pt] options []
[20171215-12:33:41] [INFO ] TLS connection established from 172.24.27.178 port 60992: TLSv1.2 with cipher AES256-GCM-SHA384
xrdp_caps_process_order: bitmap cache v3 supported
xrdp_caps_process_pointer: client supports new(color) cursor
xrdp_process_offscreen_bmpcache: support level 1 cache size 7864320 MB cache entries 100
xrdp_caps_process_surface_cmds:
cmdFlags 0x00000052
xrdp_caps_process_frame_ack:
max_unacknowledged_frame_count 2
xrdp_process_capset_window wnd_support_level 2 wnd_num_icon_caches 3 wnd_num_icon_cache_entries 12
xrdp_caps_process_codecs: nscodec, codec id 1, properties len 3
xrdp_caps_process_codecs: unknown codec id 5
xrdp_caps_process_codecs: RemoteFX, codec id 3, properties len 49
yeah, up_and_running
xrdp:xrdp_bitmap [1512733752]: xrdp_bitmap_create: noorders
[20171215-12:33:41] [DEBUG] xrdp_00004d88_wm_login_mode_event_00000001
xrdp:xrdp_mm [1512733774]: xrdp_mm_create: bpp 24 mcs_connection_type 7 jpeg_codec_id 0 v3_codec_id 0 rfx_codec_id 3 h264_codec_id 0
[20171215-12:33:41] [INFO ] Loading keymap file /etc/xrdp/km-00000816.ini
[20171215-12:33:41] [WARN ] local keymap file for 0x00000816 found and doesn't match built in keymap, using local keymap file
xrdp_wm_login_mode_changed: login_mode is 0
in xrdp_wm_init:
xrdp_wm_init: no autologin / auto run detected, draw login window
xrdp:xrdp_cache [1512733805]: xrdp_cache_add_bitmap: reset detected cache_id 2
xrdp:xrdp_cache [1512733807]: xrdp_cache_add_bitmap: reset detected cache_id 1
out xrdp_wm_init:
xrdp_wm_login_mode_changed: login_mode is 1
xrdp_wm_login_mode_changed: login_mode is 2
[20171215-12:33:53] [DEBUG] xrdp_wm_log_msg: connecting to sesman ip 127.0.0.1 port 3350
connecting to sesman ip 127.0.0.1 port 3350
[20171215-12:33:54] [INFO ] xrdp_wm_log_msg: sesman connect ok
sesman connect ok
[20171215-12:33:54] [DEBUG] xrdp_wm_log_msg: sending login info to session manager, please wait...
sending login info to session manager, please wait...
[20171215-12:33:54] [DEBUG] return value from xrdp_mm_connect 0
xrdp_wm_login_mode_changed: login_mode is 3
[20171215-12:33:56] [INFO ] xrdp_wm_log_msg: login successful for display 11
login successful for display 11
loaded module 'libxup.so' ok, interface size 8456, version 3
[20171215-12:33:56] [DEBUG] xrdp_wm_log_msg: started connecting
started connecting
[20171215-12:34:00] [DEBUG] Closed socket 19 (AF_UNIX)
.....a bunch of these....
[20171215-12:37:23] [DEBUG] Closed socket 19 (AF_UNIX)
[20171215-12:37:26] [DEBUG] xrdp_wm_log_msg: connection problem, giving up
connection problem, giving up
[20171215-12:37:26] [DEBUG] Closed socket 19 (AF_UNIX)
[20171215-12:37:26] [DEBUG] xrdp_wm_log_msg: some problem
some problem
[20171215-12:37:26] [DEBUG] xrdp_mm_module_cleanup
[20171215-12:37:26] [DEBUG] Closed socket 18 (AF_INET 127.0.0.1:56578)
xrdp_wm_login_mode_changed: login_mode is 11
rdpRRGetInfo:
rdpRRGetInfo:
xrdp_wm_login_mode_changed: login_mode is 0
in xrdp_wm_init:
xrdp_wm_init: no autologin / auto run detected, draw login window
out xrdp_wm_init:
xrdp_wm_login_mode_changed: login_mode is 1
[20171215-12:52:28] [DEBUG] Closed socket 12 (AF_INET 172.24.22.35:3389)
xrdp_mcs_disconnect - socket closed
[20171215-12:52:28] [DEBUG] xrdp_mm_module_cleanup
xrdp:xrdp_encoder [1513860035]: xrdp_encoder_delete:
[20171215-12:52:28] [ERROR] Listening socket is in wrong state, terminating listener
[20171215-12:52:28] [CORE ] shutting down log subsystem...
^Cshutting down
signal 2 threadid 140589560694592
[20171215-12:52:47] [DEBUG] Closed socket 11 (AF_INET 0.0.0.0:3389)
[20171215-12:52:47] [CORE ] shutting down log subsystem...",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,963,2017-11-29T00:46:39Z,,2020-12-23T15:16:17Z,OPEN,False,1012,632,8,https://github.com/jsorg71,set PCSCLITE_CSOCK_NAME env var,5,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/963,https://github.com/mvalente,7,https://github.com/neutrinolabs/xrdp/pull/963#issuecomment-352002570,,"Here's the output of foreground xrdp-sesman -n

root@LS1710-2:~# xrdp-sesman -n
starting sesman in foreground...
sesman config:
ListenAddress:            127.0.0.1
ListenPort:               3350
EnableUserWindowManager:  1
UserWindowManager:        startwm.sh
DefaultWindowManager:     startwm.sh
AuthFilePath:             disabled
Xvnc parameters:
Parameter 00                   Xvnc
Parameter 01                   -bs
Parameter 02                   -nolisten
Parameter 03                   tcp
Parameter 04                   -localhost
Parameter 05                   -dpi
Parameter 06                   96
X11rdp parameters:
Parameter 00                   X11rdp
Parameter 01                   -bs
Parameter 02                   -nolisten
Parameter 03                   tcp
Parameter 04                   -uds
XOrg parameters:
Parameter 00                   Xorg
Parameter 01                   -config
Parameter 02                   xrdp/xorg.conf
Parameter 03                   -noreset
Parameter 04                   -nolisten
Parameter 05                   tcp
Parameter 06                   -logfile
Parameter 07                   .xorgxrdp.%s.log
security configuration:
AllowRootLogin:       1
MaxLoginRetry:        4
AlwaysGroupCheck:     0
No TSUsersGroup defined
No TSAdminsGroup defined
session configuration:
MaxSessions:                 50
X11DisplayOffset:            10
KillDisconnected:            0
IdleTimeLimit:               0
DisconnectedTimeLimit:       0
Policy:       0
SessionVariables parameters:
Parameter 00                   PULSE_SCRIPT=/etc/xrdp/pulse/default.pa
logging configuration:
LogFile:       /var/log/xrdp-sesman.log
LogLevel:      4
EnableSyslog:  1
SyslogLevel:   4
[20171215-12:31:35] [DEBUG] libscp initialized
[20171215-12:31:35] [INFO ] starting xrdp-sesman with pid 19845
[20171215-12:31:35] [INFO ] listening to port 3350 on 127.0.0.1
[20171215-12:33:53] [INFO ] A connection received from 127.0.0.1 port 56578
building the list of scripts to run
adding group Q049RnVsbElUIEFkbWluIFVzZXJzLE9VPUZ1bGxJVCxPVT1HcnVwb3MsT1U9R2VzdMOjbyxEQz1hci1zZXJ2aWNvcyxEQz1wdA==
adding group Q049RmFzdFBhc3MgTm90IFVzZXJzLE9VPUZhc3RQYXNzLE9VPUdydXBvcyxPVT1HZXN0w6NvLERDPWFyLXNlcnZpY29zLERDPXB0
adding group Q049TGVpdG9yZXMsT1U9TGVpdG9yZXMsT1U9QVJOZXQsT1U9R3J1cG9zLE9VPUdlc3TDo28sREM9YXItc2Vydmljb3MsREM9cHQ=
the filelist is  Admin:Users.sh FastPass:Not:Users.sh Leitores.sh
.... bunch of output from local scripts deleted
++ CHARSET=utf8

TAG=linuxint-scripts

(process:19937): dconf-WARNING **: failed to commit changes to dconf: Não foi possível lançar automaticamente o D-Bus sem o $DISPLAY X-11

gsettings set org.mate.background show-desktop-icons true

(process:19941): dconf-WARNING **: failed to commit changes to dconf: Não foi possível lançar automaticamente o D-Bus sem o $DISPLAY X-11


for i in $FILELIST
++ sed 's/:/ /g'


DISTRIB_RELEASE=


'[' -f /etc/lsb-release ']'


. /etc/lsb-release
++ DISTRIB_ID=Ubuntu
++ DISTRIB_RELEASE=17.10
++ DISTRIB_CODENAME=artful
++ DISTRIB_DESCRIPTION='Ubuntu 17.10'


echo 'LOGIN - OK'
.... proceeding normal run after local scripts


LOGIN - OK

exit 0
[20171215-12:33:56] [INFO ] ++ created session (access granted): username fmvalente, ip 172.24.27.178:60992 - socket: 12
[20171215-12:33:56] [INFO ] starting Xorg session...
[20171215-12:33:56] [DEBUG] Closed socket 5 (AF_INET 0.0.0.0:5911)
[20171215-12:33:56] [DEBUG] Closed socket 5 (AF_INET 0.0.0.0:6011)
[20171215-12:33:56] [DEBUG] Closed socket 5 (AF_INET 0.0.0.0:6211)
[20171215-12:33:56] [DEBUG] Closed socket 9 (AF_INET 127.0.0.1:3350)
[20171215-12:33:56] [INFO ] calling auth_start_session from pid 20097
[20171215-12:33:56] [DEBUG] Closed socket 8 (AF_INET 127.0.0.1:3350)
[20171215-12:33:56] [DEBUG] Closed socket 9 (AF_INET 127.0.0.1:3350)
[20171215-12:33:57] [INFO ] Xorg :11 -auth .Xauthority -config xrdp/xorg.conf -noreset -nolisten tcp -logfile .xorgxrdp.%s.log

X.Org X Server 1.19.5
Release Date: 2017-10-12
X Protocol Version 11, Revision 0
Build Operating System: Linux 4.4.0-97-generic x86_64 Ubuntu
Current Operating System: Linux LS1710-2 4.13.0-16-generic #19-Ubuntu SMP Wed Oct 11 18:35:14 UTC 2017 x86_64
Kernel command line: BOOT_IMAGE=/boot/vmlinuz-4.13.0-16-generic root=UUID=5f445233-ff06-4a06-961e-491669361c79 ro quiet splash
Build Date: 15 October 2017  05:51:19PM
xorg-server 2:1.19.5-0ubuntu2 (For technical support please see http://www.ubuntu.com/support)
Current version of pixman: 0.34.0
Before reporting problems, check http://wiki.x.org
to make sure that you have the latest version.
Markers: (--) probed, (**) from config file, (==) default setting,
(++) from command line, (!!) notice, (II) informational,
(WW) warning, (EE) error, (NI) not implemented, (??) unknown.
(++) Log file: "".xorgxrdp.11.log"", Time: Fri Dec 15 12:33:57 2017
(++) Using config file: ""/etc/X11/xrdp/xorg.conf""
(==) Using system config directory ""/usr/share/X11/xorg.conf.d""
xorgxrdpSetup:[20171215-12:33:57] [CORE ] waiting for window manager (pid 20100) to exit
/etc/xrdp/startwm.sh: 2: [: x: unexpected operator
/etc/xrdp/startwm.sh: 2: [: x: unexpected operator
xrdpdevSetup:
rdpmousePlug:
rdpkeybPlug:
rdpIdentify:
rdpDriverFunc: op 10
rdpProbe:
rdpPreInit:
rdpScreenInit: virtualX 800 virtualY 600 rgbBits 8 depth 24
rdpScreenInit: pfbMemory bytes 1920000
rdpScreenInit: pfbMemory 0x7f113f846010
rdpSimdInit: assigning yuv functions
rdpSimdInit: cpuid ax 1 cx 0 return ax 0x000306f0 bx 0x00010800 cx 0xfffa3203 dx 0x0fabfbff
rdpSimdInit: sse2 amd64 yuv functions assigned
rdpXvInit: depth 24
chansrv::main: using log file [/home/AR-SERVICOS/fmvalente/.local/share/xrdp/xrdp-chansrv.11.log]
rdpup_init: /var/run/xrdp/sockdir does not exist
rdpScreenInit: out
[20171215-12:33:57] [CORE ] main: app started pid 20104(0x00004e88)
[20171215-12:33:57] [INFO ] main: DISPLAY env var set to :11.0
[20171215-12:33:57] [INFO ] main: using DISPLAY 11
[20171215-12:33:57] [INFO ] channel_thread_loop: thread start
rdpmousePreInit: drv 0x5614041ff280 info 0x56140449ecb0, flags 0x0
rdpmouseControl: what 0
rdpmouseDeviceInit:
rdpmouseCtrl:
rdpRegisterInputCallback: type 1 proc 0x7f113fc1fc70
rdpmouseControl: what 1
rdpmouseDeviceOn:
rdpkeybPreInit: drv 0x561404200f70 info 0x5614044a15a0, flags 0x0
rdpkeybControl: what 0
rdpkeybDeviceInit:
rdpkeybChangeKeyboardControl:
rdpkeybChangeKeyboardControl: autoRepeat on
rdpRegisterInputCallback: type 0 proc 0x7f113fa1c530
rdpkeybControl: what 1
rdpkeybDeviceOn:
rdpSaveScreen:
rdpDeferredRandR:
rdpResizeSession: width 1024 height 768
calling RRScreenSizeSet
rdpRRScreenSetSize: width 1024 height 768 mmWidth 271 mmHeight 203
rdpRRGetInfo:
screen resized to 1024x768
RRScreenSizeSet ok 1
rdpResizeSession: width 1440 height 900
calling RRScreenSizeSet
rdpRRScreenSetSize: width 1440 height 900 mmWidth 381 mmHeight 238
rdpRRGetInfo:
screen resized to 1440x900
RRScreenSizeSet ok 1
rdpInDeferredUpdateCallback:
rdpkeybChangeKeyboardControl:
rdpkeybChangeKeyboardControl: autoRepeat off
rdpRRGetInfo:
rdpRRGetInfo:
rdpRRGetInfo:
rdpkeybChangeKeyboardControl:
rdpkeybChangeKeyboardControl: autoRepeat off
rdpRRGetInfo:
rdpRRGetInfo:
rdpRRGetInfo:
rdpkeybChangeKeyboardControl:
rdpkeybChangeKeyboardControl: autoRepeat on
rdpkeybChangeKeyboardControl:
rdpkeybChangeKeyboardControl:
rdpkeybChangeKeyboardControl: autoRepeat on
rdpmouseCtrl:
rdpInDeferredUpdateCallback:
rdpkeybChangeKeyboardControl:
rdpkeybChangeKeyboardControl: autoRepeat off
rdpRRGetInfo:
rdpRRGetInfo:
rdpRRGetInfo:
rdpSaveScreen:
^C[20171215-12:52:37] [INFO ] term_signal_handler: got signal 2
[20171215-12:52:37] [INFO ] shutting down sesman 1
[20171215-12:52:37] [INFO ] shutting down sesman 1
[20171215-12:52:37] [INFO ] channel_thread_loop: g_term_event set
xrdp-chansrv [1513869135]: scard_deinit:
chansrv:smartcard_pcsc [1513869135]: scard_pcsc_deinit:
[20171215-12:52:37] [INFO ] channel_thread_loop: thread stop
[20171215-12:52:37] [INFO ] shutting down sesman 1
[20171215-12:52:37] [INFO ] main: app exiting pid 20104(0x00004e88)
[20171215-12:52:37] [DEBUG] Closed socket 8 (AF_INET 127.0.0.1:3350)
[20171215-12:52:37] [CORE ] shutting down log subsystem...
root@LS1710-2:~# [20171215-12:52:37] [CORE ] window manager (pid 20100) did exit, cleaning up session
[20171215-12:52:37] [INFO ] calling auth_stop_session and auth_end from pid 20097
rdpmouseControl: what 2
rdpmouseDeviceOff:
rdpkeybControl: what 2
rdpkeybDeviceOff:
rdpSaveScreen:
rdpkeybControl: what 3
rdpkeybUnInit: drv 0x561404200f70 info 0x5614044a15a0, flags 0x0
rdpUnregisterInputCallback: proc 0x7f113fa1c530
rdpmouseControl: what 3
rdpmouseUnInit: drv 0x5614041ff280 info 0x56140449ecb0, flags 0x0
rdpUnregisterInputCallback: proc 0x7f113fc1fc70
rdpCloseScreen:
xorgxrdpDownDown:
xorgxrdpDownDown: 1
rdpClientConDeinit:
(II) Server terminated successfully (0). Closing log file.
[20171215-12:52:37] [DEBUG] cleanup_sockets:
root@LS1710-2:~#",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,963,2017-11-29T00:46:39Z,,2020-12-23T15:16:17Z,OPEN,False,1012,632,8,https://github.com/jsorg71,set PCSCLITE_CSOCK_NAME env var,5,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/963,https://github.com/mvalente,8,https://github.com/neutrinolabs/xrdp/pull/963#issuecomment-352002967,,"/var/log/xrdp.log

root@LS1710-2:~# cat /var/log/xrdp.log
[20171215-12:30:46] [INFO ] starting xrdp with pid 19810
[20171215-12:30:46] [INFO ] listening to port 3389 on 0.0.0.0
[20171215-12:33:39] [INFO ] Socket 12: AF_INET connection received from 172.24.27.178 port 60991
[20171215-12:33:39] [DEBUG] Closed socket 12 (AF_INET 172.24.22.35:3389)
[20171215-12:33:39] [DEBUG] Closed socket 11 (AF_INET 0.0.0.0:3389)
[20171215-12:33:39] [INFO ] Using default X.509 certificate: /etc/xrdp/cert.pem
[20171215-12:33:39] [INFO ] Using default X.509 key file: /etc/xrdp/key.pem
[20171215-12:33:39] [DEBUG] Security layer: requested 11, selected 1
[20171215-12:33:39] [DEBUG] Closed socket 12 (AF_INET 172.24.22.35:3389)
[20171215-12:33:39] [ERROR] Listening socket is in wrong state, terminating listener
[20171215-12:33:39] [CORE ] shutting down log subsystem...
[20171215-12:33:41] [INFO ] Socket 12: AF_INET connection received from 172.24.27.178 port 60992
[20171215-12:33:41] [DEBUG] Closed socket 12 (AF_INET 172.24.22.35:3389)
[20171215-12:33:41] [DEBUG] Closed socket 11 (AF_INET 0.0.0.0:3389)
[20171215-12:33:41] [INFO ] Using default X.509 certificate: /etc/xrdp/cert.pem
[20171215-12:33:41] [INFO ] Using default X.509 key file: /etc/xrdp/key.pem
[20171215-12:33:41] [DEBUG] Security layer: requested 11, selected 1
[20171215-12:33:41] [INFO ] connected client computer name: BEP-V004
[20171215-12:33:41] [INFO ] TLS connection established from 172.24.27.178 port 60992: TLSv1.2 with cipher AES256-GCM-SHA384
[20171215-12:33:41] [DEBUG] xrdp_00004d88_wm_login_mode_event_00000001
[20171215-12:33:41] [INFO ] Loading keymap file /etc/xrdp/km-00000816.ini
[20171215-12:33:41] [WARN ] local keymap file for 0x00000816 found and doesn't match built in keymap, using local keymap file
[20171215-12:33:53] [DEBUG] xrdp_wm_log_msg: connecting to sesman ip 127.0.0.1 port 3350
[20171215-12:33:54] [INFO ] xrdp_wm_log_msg: sesman connect ok
[20171215-12:33:54] [DEBUG] xrdp_wm_log_msg: sending login info to session manager, please wait...
[20171215-12:33:54] [DEBUG] return value from xrdp_mm_connect 0
[20171215-12:33:56] [INFO ] xrdp_wm_log_msg: login successful for display 11
[20171215-12:33:56] [DEBUG] xrdp_wm_log_msg: started connecting
[20171215-12:34:00] [DEBUG] Closed socket 19 (AF_UNIX)
[20171215-12:34:03] [DEBUG] Closed socket 19 (AF_UNIX)
[20171215-12:34:07] [DEBUG] Closed socket 19 (AF_UNIX)
[20171215-12:34:11] [DEBUG] Closed socket 19 (AF_UNIX)
[20171215-12:34:14] [DEBUG] Closed socket 19 (AF_UNIX)
[20171215-12:34:18] [DEBUG] Closed socket 19 (AF_UNIX)
[20171215-12:34:21] [DEBUG] Closed socket 19 (AF_UNIX)
[20171215-12:34:25] [DEBUG] Closed socket 19 (AF_UNIX)
[20171215-12:34:28] [DEBUG] Closed socket 19 (AF_UNIX)
[20171215-12:34:32] [DEBUG] Closed socket 19 (AF_UNIX)
[20171215-12:34:35] [DEBUG] Closed socket 19 (AF_UNIX)
[20171215-12:34:39] [DEBUG] Closed socket 19 (AF_UNIX)
[20171215-12:34:42] [DEBUG] Closed socket 19 (AF_UNIX)
[20171215-12:34:46] [DEBUG] Closed socket 19 (AF_UNIX)
[20171215-12:34:49] [DEBUG] Closed socket 19 (AF_UNIX)
[20171215-12:34:53] [DEBUG] Closed socket 19 (AF_UNIX)
[20171215-12:34:56] [DEBUG] Closed socket 19 (AF_UNIX)
[20171215-12:35:00] [DEBUG] Closed socket 19 (AF_UNIX)
[20171215-12:35:03] [DEBUG] Closed socket 19 (AF_UNIX)
[20171215-12:35:07] [DEBUG] Closed socket 19 (AF_UNIX)
[20171215-12:35:10] [DEBUG] Closed socket 19 (AF_UNIX)
[20171215-12:35:14] [DEBUG] Closed socket 19 (AF_UNIX)
[20171215-12:35:17] [DEBUG] Closed socket 19 (AF_UNIX)
[20171215-12:35:21] [DEBUG] Closed socket 19 (AF_UNIX)
[20171215-12:35:24] [DEBUG] Closed socket 19 (AF_UNIX)
[20171215-12:35:28] [DEBUG] Closed socket 19 (AF_UNIX)
[20171215-12:35:31] [DEBUG] Closed socket 19 (AF_UNIX)
[20171215-12:35:35] [DEBUG] Closed socket 19 (AF_UNIX)
[20171215-12:35:38] [DEBUG] Closed socket 19 (AF_UNIX)
[20171215-12:35:42] [DEBUG] Closed socket 19 (AF_UNIX)
[20171215-12:35:45] [DEBUG] Closed socket 19 (AF_UNIX)
[20171215-12:35:49] [DEBUG] Closed socket 19 (AF_UNIX)
[20171215-12:35:52] [DEBUG] Closed socket 19 (AF_UNIX)
[20171215-12:35:56] [DEBUG] Closed socket 19 (AF_UNIX)
[20171215-12:35:59] [DEBUG] Closed socket 19 (AF_UNIX)
[20171215-12:36:03] [DEBUG] Closed socket 19 (AF_UNIX)
[20171215-12:36:06] [DEBUG] Closed socket 19 (AF_UNIX)
[20171215-12:36:10] [DEBUG] Closed socket 19 (AF_UNIX)
[20171215-12:36:13] [DEBUG] Closed socket 19 (AF_UNIX)
[20171215-12:36:17] [DEBUG] Closed socket 19 (AF_UNIX)
[20171215-12:36:20] [DEBUG] Closed socket 19 (AF_UNIX)
[20171215-12:36:24] [DEBUG] Closed socket 19 (AF_UNIX)
[20171215-12:36:27] [DEBUG] Closed socket 19 (AF_UNIX)
[20171215-12:36:31] [DEBUG] Closed socket 19 (AF_UNIX)
[20171215-12:36:34] [DEBUG] Closed socket 19 (AF_UNIX)
[20171215-12:36:38] [DEBUG] Closed socket 19 (AF_UNIX)
[20171215-12:36:41] [DEBUG] Closed socket 19 (AF_UNIX)
[20171215-12:36:45] [DEBUG] Closed socket 19 (AF_UNIX)
[20171215-12:36:48] [DEBUG] Closed socket 19 (AF_UNIX)
[20171215-12:36:52] [DEBUG] Closed socket 19 (AF_UNIX)
[20171215-12:36:55] [DEBUG] Closed socket 19 (AF_UNIX)
[20171215-12:36:59] [DEBUG] Closed socket 19 (AF_UNIX)
[20171215-12:37:02] [DEBUG] Closed socket 19 (AF_UNIX)
[20171215-12:37:06] [DEBUG] Closed socket 19 (AF_UNIX)
[20171215-12:37:09] [DEBUG] Closed socket 19 (AF_UNIX)
[20171215-12:37:13] [DEBUG] Closed socket 19 (AF_UNIX)
[20171215-12:37:16] [DEBUG] Closed socket 19 (AF_UNIX)
[20171215-12:37:20] [DEBUG] Closed socket 19 (AF_UNIX)
[20171215-12:37:23] [DEBUG] Closed socket 19 (AF_UNIX)
[20171215-12:37:26] [DEBUG] xrdp_wm_log_msg: connection problem, giving up
[20171215-12:37:26] [DEBUG] Closed socket 19 (AF_UNIX)
[20171215-12:37:26] [DEBUG] xrdp_wm_log_msg: some problem
[20171215-12:37:26] [DEBUG] xrdp_mm_module_cleanup
[20171215-12:37:26] [DEBUG] Closed socket 18 (AF_INET 127.0.0.1:56578)
[20171215-12:52:28] [DEBUG] Closed socket 12 (AF_INET 172.24.22.35:3389)
[20171215-12:52:28] [DEBUG] xrdp_mm_module_cleanup
[20171215-12:52:28] [ERROR] Listening socket is in wrong state, terminating listener
[20171215-12:52:28] [CORE ] shutting down log subsystem...
[20171215-12:52:47] [DEBUG] Closed socket 11 (AF_INET 0.0.0.0:3389)
[20171215-12:52:47] [CORE ] shutting down log subsystem...",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,963,2017-11-29T00:46:39Z,,2020-12-23T15:16:17Z,OPEN,False,1012,632,8,https://github.com/jsorg71,set PCSCLITE_CSOCK_NAME env var,5,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/963,https://github.com/mvalente,9,https://github.com/neutrinolabs/xrdp/pull/963#issuecomment-352003141,,"/var/log/xrdp-sesman.log

root@LS1710-2:~# cat /var/log/xrdp-sesman.log
[20171215-12:31:35] [DEBUG] libscp initialized
[20171215-12:31:35] [INFO ] starting xrdp-sesman with pid 19845
[20171215-12:31:35] [INFO ] listening to port 3350 on 127.0.0.1
[20171215-12:33:53] [INFO ] A connection received from 127.0.0.1 port 56578
[20171215-12:33:56] [INFO ] ++ created session (access granted): username fmvalente, ip 172.24.27.178:60992 - socket: 12
[20171215-12:33:56] [INFO ] starting Xorg session...
[20171215-12:33:56] [DEBUG] Closed socket 5 (AF_INET 0.0.0.0:5911)
[20171215-12:33:56] [DEBUG] Closed socket 5 (AF_INET 0.0.0.0:6011)
[20171215-12:33:56] [DEBUG] Closed socket 5 (AF_INET 0.0.0.0:6211)
[20171215-12:33:56] [DEBUG] Closed socket 9 (AF_INET 127.0.0.1:3350)
[20171215-12:33:56] [INFO ] calling auth_start_session from pid 20097
[20171215-12:33:56] [DEBUG] Closed socket 8 (AF_INET 127.0.0.1:3350)
[20171215-12:33:56] [DEBUG] Closed socket 9 (AF_INET 127.0.0.1:3350)
[20171215-12:33:57] [INFO ] Xorg :11 -auth .Xauthority -config xrdp/xorg.conf -noreset -nolisten tcp -logfile .xorgxrdp.%s.log
[20171215-12:33:57] [CORE ] waiting for window manager (pid 20100) to exit
[20171215-12:52:37] [INFO ] shutting down sesman 1
[20171215-12:52:37] [INFO ] shutting down sesman 1
[20171215-12:52:37] [INFO ] shutting down sesman 1
[20171215-12:52:37] [DEBUG] Closed socket 8 (AF_INET 127.0.0.1:3350)
[20171215-12:52:37] [CORE ] shutting down log subsystem...
[20171215-12:52:37] [CORE ] window manager (pid 20100) did exit, cleaning up session
[20171215-12:52:37] [INFO ] calling auth_stop_session and auth_end from pid 20097
[20171215-12:52:37] [DEBUG] cleanup_sockets:",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,963,2017-11-29T00:46:39Z,,2020-12-23T15:16:17Z,OPEN,False,1012,632,8,https://github.com/jsorg71,set PCSCLITE_CSOCK_NAME env var,5,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/963,https://github.com/mvalente,10,https://github.com/neutrinolabs/xrdp/pull/963#issuecomment-352013891,,"early version did that
sha1 should be 693016a

That should be the sha1 for which version? The early one supposedly with the problem? Or the one that I should be using? For the record I'm using the one with sha1 693016a",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,963,2017-11-29T00:46:39Z,,2020-12-23T15:16:17Z,OPEN,False,1012,632,8,https://github.com/jsorg71,set PCSCLITE_CSOCK_NAME env var,5,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/963,https://github.com/mvalente,11,https://github.com/neutrinolabs/xrdp/pull/963#issuecomment-352791741,,Anyone? Any help on how to solve or further debug is appreciated.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,963,2017-11-29T00:46:39Z,,2020-12-23T15:16:17Z,OPEN,False,1012,632,8,https://github.com/jsorg71,set PCSCLITE_CSOCK_NAME env var,5,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/963,https://github.com/jsorg71,12,https://github.com/neutrinolabs/xrdp/pull/963#issuecomment-353209209,,"maybe this is a problem
/etc/xrdp/startwm.sh: 2: [: x: unexpected operator
What do you have on line 2 of this file?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,963,2017-11-29T00:46:39Z,,2020-12-23T15:16:17Z,OPEN,False,1012,632,8,https://github.com/jsorg71,set PCSCLITE_CSOCK_NAME env var,5,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/963,https://github.com/mvalente,13,https://github.com/neutrinolabs/xrdp/pull/963#issuecomment-354125100,,"Not a problem, its irrelevant.


#!/bin/sh
if [ -r /etc/default/locale ]; then
. /etc/default/locale
export LANG LANGUAGE
fi


Any other ideas?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,963,2017-11-29T00:46:39Z,,2020-12-23T15:16:17Z,OPEN,False,1012,632,8,https://github.com/jsorg71,set PCSCLITE_CSOCK_NAME env var,5,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/963,https://github.com/mvalente,14,https://github.com/neutrinolabs/xrdp/pull/963#issuecomment-354314760,,"Back to the stock release, with replacement pcsclite. Any help on how to debug? How can I find out if card info is reaching xrdp/chanserv?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,963,2017-11-29T00:46:39Z,,2020-12-23T15:16:17Z,OPEN,False,1012,632,8,https://github.com/jsorg71,set PCSCLITE_CSOCK_NAME env var,5,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/963,https://github.com/metalefty,15,https://github.com/neutrinolabs/xrdp/pull/963#issuecomment-375139290,,Coding style changes should be done in the separated commit. Excluding in the case when coding style changes are small enough.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,963,2017-11-29T00:46:39Z,,2020-12-23T15:16:17Z,OPEN,False,1012,632,8,https://github.com/jsorg71,set PCSCLITE_CSOCK_NAME env var,5,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/963,https://github.com/zorgluf,16,https://github.com/neutrinolabs/xrdp/pull/963#issuecomment-750344872,,"Hi,
I've made a few modifications on a fork to jsorg71's great work, to make it working with recent pcsclite releases (1.8.8) : https://github.com/zorgluf/xrdp/tree/pcsc.
Made it working on RHEL7.9 with a gemalto MD840 and omnikey reader.
I tried a merge on v0.9.14 : https://github.com/zorgluf/xrdp/tree/pssc_0.9.14. It works also for the smartcard part, but not 100% I didn't break any other functions.
How can I contribute to this ? Knowing that my skills in dev are low... Probably need help on that side.
Should I open a new feature request ?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,964,2017-11-29T06:03:34Z,2017-11-30T06:13:19Z,2017-11-30T06:13:22Z,MERGED,True,3,11,2,https://github.com/metalefty,Suppress some logs,3,[],https://github.com/neutrinolabs/xrdp/pull/964,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/964,See each commit message for the reasons why I removed these logs.,See each commit message for the reasons why I removed these logs.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,964,2017-11-29T06:03:34Z,2017-11-30T06:13:19Z,2017-11-30T06:13:22Z,MERGED,True,3,11,2,https://github.com/metalefty,Suppress some logs,3,[],https://github.com/neutrinolabs/xrdp/pull/964,https://github.com/jsorg71,2,https://github.com/neutrinolabs/xrdp/pull/964#issuecomment-347975137,See each commit message for the reasons why I removed these logs.,+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,972,2017-12-13T17:42:31Z,2017-12-14T05:43:05Z,2017-12-14T05:43:05Z,MERGED,True,3,0,1,https://github.com/rkantos,Add Finnish rdp_layout_ definition,1,[],https://github.com/neutrinolabs/xrdp/pull/972,https://github.com/rkantos,1,https://github.com/neutrinolabs/xrdp/pull/972,Add the missing? Finnish rdp_layout_ definitions. Makes my install work immediately with Finnish keyboard layout. (same as Swedish),Add the missing? Finnish rdp_layout_ definitions. Makes my install work immediately with Finnish keyboard layout. (same as Swedish),True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,972,2017-12-13T17:42:31Z,2017-12-14T05:43:05Z,2017-12-14T05:43:05Z,MERGED,True,3,0,1,https://github.com/rkantos,Add Finnish rdp_layout_ definition,1,[],https://github.com/neutrinolabs/xrdp/pull/972,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/972#issuecomment-351566683,Add the missing? Finnish rdp_layout_ definitions. Makes my install work immediately with Finnish keyboard layout. (same as Swedish),👍 Good catch!,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,974,2017-12-14T06:07:07Z,2017-12-15T15:27:07Z,2017-12-15T15:27:14Z,MERGED,True,27,10,2,https://github.com/metalefty,sesman: comment on non-suid Xorg in sesman.ini,3,[],https://github.com/neutrinolabs/xrdp/pull/974,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/974,Pointed out by: #923,Pointed out by: #923,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,974,2017-12-14T06:07:07Z,2017-12-15T15:27:07Z,2017-12-15T15:27:14Z,MERGED,True,27,10,2,https://github.com/metalefty,sesman: comment on non-suid Xorg in sesman.ini,3,[],https://github.com/neutrinolabs/xrdp/pull/974,https://github.com/jwmullally,2,https://github.com/neutrinolabs/xrdp/pull/974#issuecomment-351813476,Pointed out by: #923,"LGTM
(As for actually picking a sensible default: as these are different for each distro its really up to them to patch the right value into sesman.ini at packaging time)",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,974,2017-12-14T06:07:07Z,2017-12-15T15:27:07Z,2017-12-15T15:27:14Z,MERGED,True,27,10,2,https://github.com/metalefty,sesman: comment on non-suid Xorg in sesman.ini,3,[],https://github.com/neutrinolabs/xrdp/pull/974,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/974#issuecomment-351891377,Pointed out by: #923,"Yes, I expect each distro package maintainer to replace the parameter with the right value for each distro. The help text is mainly for the people installs xrdp from source.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,974,2017-12-14T06:07:07Z,2017-12-15T15:27:07Z,2017-12-15T15:27:14Z,MERGED,True,27,10,2,https://github.com/metalefty,sesman: comment on non-suid Xorg in sesman.ini,3,[],https://github.com/neutrinolabs/xrdp/pull/974,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/974#issuecomment-352033166,Pointed out by: #923,"Comment changes only, no logic change. Merging.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,975,2017-12-15T05:54:19Z,2017-12-27T14:29:22Z,2017-12-27T14:29:26Z,MERGED,True,3,3,3,https://github.com/metalefty,Bump version to v0.9.5,1,[],https://github.com/neutrinolabs/xrdp/pull/975,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/975,Do not merge yet.,Do not merge yet.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,975,2017-12-15T05:54:19Z,2017-12-27T14:29:22Z,2017-12-27T14:29:26Z,MERGED,True,3,3,3,https://github.com/metalefty,Bump version to v0.9.5,1,[],https://github.com/neutrinolabs/xrdp/pull/975,https://github.com/itamarjp,2,https://github.com/neutrinolabs/xrdp/pull/975#issuecomment-352023677,Do not merge yet.,I think xorg/X11R7.6/rdp/rdp.h version can be replaced by a macro or something thats replaced by autotools,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,975,2017-12-15T05:54:19Z,2017-12-27T14:29:22Z,2017-12-27T14:29:26Z,MERGED,True,3,3,3,https://github.com/metalefty,Bump version to v0.9.5,1,[],https://github.com/neutrinolabs/xrdp/pull/975,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/975#issuecomment-352025834,Do not merge yet.,Yes but x11rdp will be separated from xrdp repository in near future. Now it can be replaced by xorgxrdp.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,975,2017-12-15T05:54:19Z,2017-12-27T14:29:22Z,2017-12-27T14:29:26Z,MERGED,True,3,3,3,https://github.com/metalefty,Bump version to v0.9.5,1,[],https://github.com/neutrinolabs/xrdp/pull/975,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/975#issuecomment-353952077,Do not merge yet.,Time's up. I'll make a release tomorrow.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,976,2017-12-15T09:09:23Z,2018-01-11T02:26:08Z,2018-01-11T02:26:55Z,MERGED,True,32,24,3,https://github.com/metalefty,[refactor] change unclear variable name ,2,[],https://github.com/neutrinolabs/xrdp/pull/976,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/976,"The new names are used in prototype declaration of this function.
int
env_set_user(const char *username, char **passwd_file, int display,
const struct list *env_names, const struct list *env_values);","The new names are used in prototype declaration of this function.
int
env_set_user(const char *username, char **passwd_file, int display,
const struct list *env_names, const struct list *env_values);",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,979,2017-12-20T18:49:10Z,2017-12-21T05:07:53Z,2017-12-21T05:07:53Z,MERGED,True,8,8,1,https://github.com/Natureshadow,Fix memory corruption introduced by CVE-2017-16927 fix.,1,[],https://github.com/neutrinolabs/xrdp/pull/979,https://github.com/Natureshadow,1,https://github.com/neutrinolabs/xrdp/pull/979,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,979,2017-12-20T18:49:10Z,2017-12-21T05:07:53Z,2017-12-21T05:07:53Z,MERGED,True,8,8,1,https://github.com/Natureshadow,Fix memory corruption introduced by CVE-2017-16927 fix.,1,[],https://github.com/neutrinolabs/xrdp/pull/979,https://github.com/speidy,2,https://github.com/neutrinolabs/xrdp/pull/979#issuecomment-353204999,,"wow, good catch.
Thanks.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,979,2017-12-20T18:49:10Z,2017-12-21T05:07:53Z,2017-12-21T05:07:53Z,MERGED,True,8,8,1,https://github.com/Natureshadow,Fix memory corruption introduced by CVE-2017-16927 fix.,1,[],https://github.com/neutrinolabs/xrdp/pull/979,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/979#issuecomment-353218664,,Good catch. Let's ship it to v0.9.5.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,984,2017-12-25T16:32:42Z,2017-12-26T00:26:53Z,2017-12-26T00:26:56Z,MERGED,True,151,157,4,https://github.com/metalefty,Renew pulseaudio documents,2,['audio redirection'],https://github.com/neutrinolabs/xrdp/pull/984,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/984,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,985,2017-12-26T08:56:56Z,2017-12-26T10:06:37Z,2017-12-26T10:06:37Z,MERGED,True,5,33,1,https://github.com/Natureshadow,Simplify pulseaudio module build instructions,1,[],https://github.com/neutrinolabs/xrdp/pull/985,https://github.com/Natureshadow,1,https://github.com/neutrinolabs/xrdp/pull/985,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,985,2017-12-26T08:56:56Z,2017-12-26T10:06:37Z,2017-12-26T10:06:37Z,MERGED,True,5,33,1,https://github.com/Natureshadow,Simplify pulseaudio module build instructions,1,[],https://github.com/neutrinolabs/xrdp/pull/985,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/985#issuecomment-353949620,,Thanks!,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,988,2017-12-27T15:20:54Z,2018-01-09T05:04:06Z,2018-05-03T14:01:18Z,CLOSED,False,9,10,1,https://github.com/matt335672,Make listen check before daemon fork,1,[],https://github.com/neutrinolabs/xrdp/pull/988,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/988,"There seems to be a race condition related to sesman_listen_test() when  xrdp-sesman is run in daemon mode.
Because sesman_listen_test() is called after the daemon fork() call, there is a chance that it will be called in the parent at the same time as the child trying to listen. The following log was produced on a RHEL 7.4 system when this happens:-
xrdp-sesman[11958]: (11958)(139665042258048)[DEBUG] libscp initialized
xrdp-sesman[11961]: (11961)(139665042258048)[INFO ] starting xrdp-sesman with pid 11961
xrdp-sesman[11958]: (11958)(139665042258048)[DEBUG] Testing if xrdp-sesman can listen on 127.0.0.1 port 3350.
xrdp-sesman[11961]: (11961)(139665042258048)[INFO ] listening to port 3350 on 127.0.0.1
xrdp-sesman[11958]: (11958)(139665042258048)[ERROR] Failed to start xrdp-sesman daemon, possibly address already in use.
systemd[1]: xrdp-sesman.service: control process exited, code=exited status=1
xrdp-sesman[11961]: (11961)(139665042258048)[INFO ] shutting down sesman 1
xrdp-sesman[11961]: (11961)(139665042258048)[DEBUG] Closed socket 9 (AF_INET 127.0.0.1:3350)

With the attached patch, the two processes did not interfere with each other, and this log was produced:-
xrdp-sesman[11991]: (11991)(140064586561664)[DEBUG] libscp initialized
xrdp-sesman[11991]: (11991)(140064586561664)[DEBUG] Testing if xrdp-sesman can listen on 127.0.0.1 port 3350.
xrdp-sesman[11994]: (11994)(140064586561664)[INFO ] starting xrdp-sesman with pid 11994
xrdp-sesman[11991]: (11991)(140064586561664)[DEBUG] Closed socket 7 (AF_INET 127.0.0.1:3350)
xrdp-sesman[11994]: (11994)(140064586561664)[INFO ] listening to port 3350 on 127.0.0.1
systemd[1]: Started xrdp session manager.","There seems to be a race condition related to sesman_listen_test() when  xrdp-sesman is run in daemon mode.
Because sesman_listen_test() is called after the daemon fork() call, there is a chance that it will be called in the parent at the same time as the child trying to listen. The following log was produced on a RHEL 7.4 system when this happens:-
xrdp-sesman[11958]: (11958)(139665042258048)[DEBUG] libscp initialized
xrdp-sesman[11961]: (11961)(139665042258048)[INFO ] starting xrdp-sesman with pid 11961
xrdp-sesman[11958]: (11958)(139665042258048)[DEBUG] Testing if xrdp-sesman can listen on 127.0.0.1 port 3350.
xrdp-sesman[11961]: (11961)(139665042258048)[INFO ] listening to port 3350 on 127.0.0.1
xrdp-sesman[11958]: (11958)(139665042258048)[ERROR] Failed to start xrdp-sesman daemon, possibly address already in use.
systemd[1]: xrdp-sesman.service: control process exited, code=exited status=1
xrdp-sesman[11961]: (11961)(139665042258048)[INFO ] shutting down sesman 1
xrdp-sesman[11961]: (11961)(139665042258048)[DEBUG] Closed socket 9 (AF_INET 127.0.0.1:3350)

With the attached patch, the two processes did not interfere with each other, and this log was produced:-
xrdp-sesman[11991]: (11991)(140064586561664)[DEBUG] libscp initialized
xrdp-sesman[11991]: (11991)(140064586561664)[DEBUG] Testing if xrdp-sesman can listen on 127.0.0.1 port 3350.
xrdp-sesman[11994]: (11994)(140064586561664)[INFO ] starting xrdp-sesman with pid 11994
xrdp-sesman[11991]: (11991)(140064586561664)[DEBUG] Closed socket 7 (AF_INET 127.0.0.1:3350)
xrdp-sesman[11994]: (11994)(140064586561664)[INFO ] listening to port 3350 on 127.0.0.1
systemd[1]: Started xrdp session manager.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,988,2017-12-27T15:20:54Z,2018-01-09T05:04:06Z,2018-05-03T14:01:18Z,CLOSED,False,9,10,1,https://github.com/matt335672,Make listen check before daemon fork,1,[],https://github.com/neutrinolabs/xrdp/pull/988,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/988#issuecomment-354614373,"There seems to be a race condition related to sesman_listen_test() when  xrdp-sesman is run in daemon mode.
Because sesman_listen_test() is called after the daemon fork() call, there is a chance that it will be called in the parent at the same time as the child trying to listen. The following log was produced on a RHEL 7.4 system when this happens:-
xrdp-sesman[11958]: (11958)(139665042258048)[DEBUG] libscp initialized
xrdp-sesman[11961]: (11961)(139665042258048)[INFO ] starting xrdp-sesman with pid 11961
xrdp-sesman[11958]: (11958)(139665042258048)[DEBUG] Testing if xrdp-sesman can listen on 127.0.0.1 port 3350.
xrdp-sesman[11961]: (11961)(139665042258048)[INFO ] listening to port 3350 on 127.0.0.1
xrdp-sesman[11958]: (11958)(139665042258048)[ERROR] Failed to start xrdp-sesman daemon, possibly address already in use.
systemd[1]: xrdp-sesman.service: control process exited, code=exited status=1
xrdp-sesman[11961]: (11961)(139665042258048)[INFO ] shutting down sesman 1
xrdp-sesman[11961]: (11961)(139665042258048)[DEBUG] Closed socket 9 (AF_INET 127.0.0.1:3350)

With the attached patch, the two processes did not interfere with each other, and this log was produced:-
xrdp-sesman[11991]: (11991)(140064586561664)[DEBUG] libscp initialized
xrdp-sesman[11991]: (11991)(140064586561664)[DEBUG] Testing if xrdp-sesman can listen on 127.0.0.1 port 3350.
xrdp-sesman[11994]: (11994)(140064586561664)[INFO ] starting xrdp-sesman with pid 11994
xrdp-sesman[11991]: (11991)(140064586561664)[DEBUG] Closed socket 7 (AF_INET 127.0.0.1:3350)
xrdp-sesman[11994]: (11994)(140064586561664)[INFO ] listening to port 3350 on 127.0.0.1
systemd[1]: Started xrdp session manager.",I'lll look at this after new year's vacation.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,988,2017-12-27T15:20:54Z,2018-01-09T05:04:06Z,2018-05-03T14:01:18Z,CLOSED,False,9,10,1,https://github.com/matt335672,Make listen check before daemon fork,1,[],https://github.com/neutrinolabs/xrdp/pull/988,https://github.com/matt335672,3,https://github.com/neutrinolabs/xrdp/pull/988#issuecomment-355519035,"There seems to be a race condition related to sesman_listen_test() when  xrdp-sesman is run in daemon mode.
Because sesman_listen_test() is called after the daemon fork() call, there is a chance that it will be called in the parent at the same time as the child trying to listen. The following log was produced on a RHEL 7.4 system when this happens:-
xrdp-sesman[11958]: (11958)(139665042258048)[DEBUG] libscp initialized
xrdp-sesman[11961]: (11961)(139665042258048)[INFO ] starting xrdp-sesman with pid 11961
xrdp-sesman[11958]: (11958)(139665042258048)[DEBUG] Testing if xrdp-sesman can listen on 127.0.0.1 port 3350.
xrdp-sesman[11961]: (11961)(139665042258048)[INFO ] listening to port 3350 on 127.0.0.1
xrdp-sesman[11958]: (11958)(139665042258048)[ERROR] Failed to start xrdp-sesman daemon, possibly address already in use.
systemd[1]: xrdp-sesman.service: control process exited, code=exited status=1
xrdp-sesman[11961]: (11961)(139665042258048)[INFO ] shutting down sesman 1
xrdp-sesman[11961]: (11961)(139665042258048)[DEBUG] Closed socket 9 (AF_INET 127.0.0.1:3350)

With the attached patch, the two processes did not interfere with each other, and this log was produced:-
xrdp-sesman[11991]: (11991)(140064586561664)[DEBUG] libscp initialized
xrdp-sesman[11991]: (11991)(140064586561664)[DEBUG] Testing if xrdp-sesman can listen on 127.0.0.1 port 3350.
xrdp-sesman[11994]: (11994)(140064586561664)[INFO ] starting xrdp-sesman with pid 11994
xrdp-sesman[11991]: (11991)(140064586561664)[DEBUG] Closed socket 7 (AF_INET 127.0.0.1:3350)
xrdp-sesman[11994]: (11994)(140064586561664)[INFO ] listening to port 3350 on 127.0.0.1
systemd[1]: Started xrdp session manager.",Checked for other tabs - only this one found.  I've replaced it with spaces and squashed the commit.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,988,2017-12-27T15:20:54Z,2018-01-09T05:04:06Z,2018-05-03T14:01:18Z,CLOSED,False,9,10,1,https://github.com/matt335672,Make listen check before daemon fork,1,[],https://github.com/neutrinolabs/xrdp/pull/988,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/988#issuecomment-356181148,"There seems to be a race condition related to sesman_listen_test() when  xrdp-sesman is run in daemon mode.
Because sesman_listen_test() is called after the daemon fork() call, there is a chance that it will be called in the parent at the same time as the child trying to listen. The following log was produced on a RHEL 7.4 system when this happens:-
xrdp-sesman[11958]: (11958)(139665042258048)[DEBUG] libscp initialized
xrdp-sesman[11961]: (11961)(139665042258048)[INFO ] starting xrdp-sesman with pid 11961
xrdp-sesman[11958]: (11958)(139665042258048)[DEBUG] Testing if xrdp-sesman can listen on 127.0.0.1 port 3350.
xrdp-sesman[11961]: (11961)(139665042258048)[INFO ] listening to port 3350 on 127.0.0.1
xrdp-sesman[11958]: (11958)(139665042258048)[ERROR] Failed to start xrdp-sesman daemon, possibly address already in use.
systemd[1]: xrdp-sesman.service: control process exited, code=exited status=1
xrdp-sesman[11961]: (11961)(139665042258048)[INFO ] shutting down sesman 1
xrdp-sesman[11961]: (11961)(139665042258048)[DEBUG] Closed socket 9 (AF_INET 127.0.0.1:3350)

With the attached patch, the two processes did not interfere with each other, and this log was produced:-
xrdp-sesman[11991]: (11991)(140064586561664)[DEBUG] libscp initialized
xrdp-sesman[11991]: (11991)(140064586561664)[DEBUG] Testing if xrdp-sesman can listen on 127.0.0.1 port 3350.
xrdp-sesman[11994]: (11994)(140064586561664)[INFO ] starting xrdp-sesman with pid 11994
xrdp-sesman[11991]: (11991)(140064586561664)[DEBUG] Closed socket 7 (AF_INET 127.0.0.1:3350)
xrdp-sesman[11994]: (11994)(140064586561664)[INFO ] listening to port 3350 on 127.0.0.1
systemd[1]: Started xrdp session manager.","Merged, thanks!",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,990,2018-01-09T05:57:47Z,2018-01-12T00:43:45Z,2018-01-12T00:44:45Z,MERGED,True,2,0,1,https://github.com/metalefty,devredir: fix xinode leak,1,[],https://github.com/neutrinolabs/xrdp/pull/990,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/990,Pointed out by: #919,Pointed out by: #919,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,990,2018-01-09T05:57:47Z,2018-01-12T00:43:45Z,2018-01-12T00:44:45Z,MERGED,True,2,0,1,https://github.com/metalefty,devredir: fix xinode leak,1,[],https://github.com/neutrinolabs/xrdp/pull/990,https://github.com/jsorg71,2,https://github.com/neutrinolabs/xrdp/pull/990#issuecomment-357026160,Pointed out by: #919,+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,999,2018-01-17T00:40:08Z,2018-01-18T00:12:06Z,2018-01-18T00:15:00Z,MERGED,True,4,6,3,https://github.com/metalefty,fix potential fd leak,1,[],https://github.com/neutrinolabs/xrdp/pull/999,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/999,"In most cases, checking fd > 0 is not valid. open(2) returns -1 on
error, 0 on stdin, 1 on stdout, 2 on stderr, >2 . The border should be
between -1 and 0. Additionally, between 2 and 3.
Pointed out by: #919","In most cases, checking fd > 0 is not valid. open(2) returns -1 on
error, 0 on stdin, 1 on stdout, 2 on stderr, >2 . The border should be
between -1 and 0. Additionally, between 2 and 3.
Pointed out by: #919",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,999,2018-01-17T00:40:08Z,2018-01-18T00:12:06Z,2018-01-18T00:15:00Z,MERGED,True,4,6,3,https://github.com/metalefty,fix potential fd leak,1,[],https://github.com/neutrinolabs/xrdp/pull/999,https://github.com/jsorg71,2,https://github.com/neutrinolabs/xrdp/pull/999#issuecomment-358425851,"In most cases, checking fd > 0 is not valid. open(2) returns -1 on
error, 0 on stdin, 1 on stdout, 2 on stderr, >2 . The border should be
between -1 and 0. Additionally, between 2 and 3.
Pointed out by: #919","+1
Since we never leave fd 0 closed, this has never been a problem but good to fix.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1000,2018-01-17T19:10:08Z,2018-01-22T04:34:10Z,2019-12-25T14:31:24Z,MERGED,True,5,1,1,https://github.com/jsorg71,fix for zombie processes sometimes appearing,1,[],https://github.com/neutrinolabs/xrdp/pull/1000,https://github.com/jsorg71,1,https://github.com/neutrinolabs/xrdp/pull/1000,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1000,2018-01-17T19:10:08Z,2018-01-22T04:34:10Z,2019-12-25T14:31:24Z,MERGED,True,5,1,1,https://github.com/jsorg71,fix for zombie processes sometimes appearing,1,[],https://github.com/neutrinolabs/xrdp/pull/1000,https://github.com/smithAchang,2,https://github.com/neutrinolabs/xrdp/pull/1000#issuecomment-568905263,,what's the triggering condition? I have encounter this preoblem in my ubuntu18.04 LTS. Using TOP shell，sometime there will be a zombie process od xrdp,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1001,2018-01-17T19:37:45Z,2018-01-22T04:32:37Z,2018-04-12T00:35:26Z,MERGED,True,11,0,1,https://github.com/jsorg71,xrdp: fix some leaks in xrdp_encoder.c,2,[],https://github.com/neutrinolabs/xrdp/pull/1001,https://github.com/jsorg71,1,https://github.com/neutrinolabs/xrdp/pull/1001,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1002,2018-01-18T00:27:32Z,2018-01-23T02:17:57Z,2018-01-23T02:18:08Z,MERGED,True,12,0,2,https://github.com/metalefty,fix leak of SCP_DISCONNECTED_SESSION,1,[],https://github.com/neutrinolabs/xrdp/pull/1002,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1002,Pointed out by: #919,Pointed out by: #919,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1002,2018-01-18T00:27:32Z,2018-01-23T02:17:57Z,2018-01-23T02:18:08Z,MERGED,True,12,0,2,https://github.com/metalefty,fix leak of SCP_DISCONNECTED_SESSION,1,[],https://github.com/neutrinolabs/xrdp/pull/1002,https://github.com/jsorg71,2,https://github.com/neutrinolabs/xrdp/pull/1002#issuecomment-359322586,Pointed out by: #919,+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1007,2018-01-22T23:45:11Z,2018-03-23T06:48:26Z,2018-03-23T06:48:26Z,MERGED,True,17,8,1,https://github.com/jsorg71,sesman: add hostname to vnc password file,1,[],https://github.com/neutrinolabs/xrdp/pull/1007,https://github.com/jsorg71,1,https://github.com/neutrinolabs/xrdp/pull/1007,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1007,2018-01-22T23:45:11Z,2018-03-23T06:48:26Z,2018-03-23T06:48:26Z,MERGED,True,17,8,1,https://github.com/jsorg71,sesman: add hostname to vnc password file,1,[],https://github.com/neutrinolabs/xrdp/pull/1007,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1007#issuecomment-375560762,,Merge and I'll change the filename later.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1008,2018-01-23T02:02:06Z,2018-01-29T02:31:57Z,2018-10-02T08:45:54Z,CLOSED,False,2,2,2,https://github.com/metalefty,pulse: bring include path fix from Debian,1,['invalid'],https://github.com/neutrinolabs/xrdp/pull/1008,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1008,"The original patch made by Dominik George:
https://anonscm.debian.org/cgit/pkg-remote/xrdp.git/commit/debian/patches/pulse-debian.patch?id=4158025abba8fc84fb8375c9cb3b9b2e206758e7","The original patch made by Dominik George:
https://anonscm.debian.org/cgit/pkg-remote/xrdp.git/commit/debian/patches/pulse-debian.patch?id=4158025abba8fc84fb8375c9cb3b9b2e206758e7",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1008,2018-01-23T02:02:06Z,2018-01-29T02:31:57Z,2018-10-02T08:45:54Z,CLOSED,False,2,2,2,https://github.com/metalefty,pulse: bring include path fix from Debian,1,['invalid'],https://github.com/neutrinolabs/xrdp/pull/1008,https://github.com/Natureshadow,2,https://github.com/neutrinolabs/xrdp/pull/1008#issuecomment-359735813,"The original patch made by Dominik George:
https://anonscm.debian.org/cgit/pkg-remote/xrdp.git/commit/debian/patches/pulse-debian.patch?id=4158025abba8fc84fb8375c9cb3b9b2e206758e7","I don't think the patch is complete.
xrdp_socket.h is not on any include path referenced in the Makefile.
Did you make sure you understand the patch in Debian? xrdp_socket.h is copied to the package containing the pulse module code there.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1008,2018-01-23T02:02:06Z,2018-01-29T02:31:57Z,2018-10-02T08:45:54Z,CLOSED,False,2,2,2,https://github.com/metalefty,pulse: bring include path fix from Debian,1,['invalid'],https://github.com/neutrinolabs/xrdp/pull/1008,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/1008#issuecomment-359833628,"The original patch made by Dominik George:
https://anonscm.debian.org/cgit/pkg-remote/xrdp.git/commit/debian/patches/pulse-debian.patch?id=4158025abba8fc84fb8375c9cb3b9b2e206758e7","Ah, I've certainly tested the build but there's a mistake. It was false negative.
xrdp is already installed to my build environment so xrdp_sockets.h is included from  /usr/include.
I need coffee.☕️",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1014,2018-01-29T07:55:58Z,2018-02-13T07:44:38Z,2018-02-13T07:44:38Z,MERGED,True,3,13,2,https://github.com/daixj755,fix bug in common/log.c and libxrdp/libxrdp.c,4,[],https://github.com/neutrinolabs/xrdp/pull/1014,https://github.com/daixj755,1,https://github.com/neutrinolabs/xrdp/pull/1014,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1014,2018-01-29T07:55:58Z,2018-02-13T07:44:38Z,2018-02-13T07:44:38Z,MERGED,True,3,13,2,https://github.com/daixj755,fix bug in common/log.c and libxrdp/libxrdp.c,4,[],https://github.com/neutrinolabs/xrdp/pull/1014,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1014#issuecomment-361167764,,Please don't change permission. Leave it as-is.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1014,2018-01-29T07:55:58Z,2018-02-13T07:44:38Z,2018-02-13T07:44:38Z,MERGED,True,3,13,2,https://github.com/daixj755,fix bug in common/log.c and libxrdp/libxrdp.c,4,[],https://github.com/neutrinolabs/xrdp/pull/1014,https://github.com/daixj755,3,https://github.com/neutrinolabs/xrdp/pull/1014#issuecomment-361175418,,"Sorry about that. I used beyond Compare to merge the code, maybe it change the permission.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1014,2018-01-29T07:55:58Z,2018-02-13T07:44:38Z,2018-02-13T07:44:38Z,MERGED,True,3,13,2,https://github.com/daixj755,fix bug in common/log.c and libxrdp/libxrdp.c,4,[],https://github.com/neutrinolabs/xrdp/pull/1014,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/1014#issuecomment-361482666,,Good catch. Now looks good to me. Thank you for the nice first contribution!,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1015,2018-01-30T09:25:26Z,2018-01-31T15:09:09Z,2018-01-31T15:55:30Z,MERGED,True,10,0,4,https://github.com/Vraiment,Make changes to generate dylibs in mac again,1,[],https://github.com/neutrinolabs/xrdp/pull/1015,https://github.com/Vraiment,1,https://github.com/neutrinolabs/xrdp/pull/1015,"The -module prevents Mac OS' toolchain from creating .dylib files, for xrdp to work on Mac OS these files are needed. This will fix issue #790","The -module prevents Mac OS' toolchain from creating .dylib files, for xrdp to work on Mac OS these files are needed. This will fix issue #790",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1017,2018-01-31T09:20:17Z,2018-01-31T17:04:10Z,2018-01-31T17:04:10Z,CLOSED,False,150,1,4,https://github.com/Vraiment,Added /etc/xrdp.command script for Mac OS,1,[],https://github.com/neutrinolabs/xrdp/pull/1017,https://github.com/Vraiment,1,https://github.com/neutrinolabs/xrdp/pull/1017,"This commit depends on my previous pull request.
It consists of only three changes:

instfiles/xrdp.command.in: The template for the command file, based in instfiles/xrdp.sh
instfiles/Makefile.am: To add the template for the command file
.gitignore: To ignore the generated file

Everything else is from my previous pull request, as this commit depends on that one","This commit depends on my previous pull request.
It consists of only three changes:

instfiles/xrdp.command.in: The template for the command file, based in instfiles/xrdp.sh
instfiles/Makefile.am: To add the template for the command file
.gitignore: To ignore the generated file

Everything else is from my previous pull request, as this commit depends on that one",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1017,2018-01-31T09:20:17Z,2018-01-31T17:04:10Z,2018-01-31T17:04:10Z,CLOSED,False,150,1,4,https://github.com/Vraiment,Added /etc/xrdp.command script for Mac OS,1,[],https://github.com/neutrinolabs/xrdp/pull/1017,https://github.com/Vraiment,2,https://github.com/neutrinolabs/xrdp/pull/1017#issuecomment-361999987,"This commit depends on my previous pull request.
It consists of only three changes:

instfiles/xrdp.command.in: The template for the command file, based in instfiles/xrdp.sh
instfiles/Makefile.am: To add the template for the command file
.gitignore: To ignore the generated file

Everything else is from my previous pull request, as this commit depends on that one","Need to verify a bug with the script, will reopen after fix",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1021,2018-02-01T08:13:11Z,2018-02-07T12:22:00Z,2018-02-08T09:44:42Z,MERGED,True,22,0,4,https://github.com/Vraiment,Added PAM support for Mac OS,1,[],https://github.com/neutrinolabs/xrdp/pull/1021,https://github.com/Vraiment,1,https://github.com/neutrinolabs/xrdp/pull/1021,"Mac OS supports PAM, so it makes sense to add support for it, at least I can login after this commit (there are more issues down the line, but this commit fixes that).
Some notes:

I'm not sure at all if the file /etc/pam.d/authorization is unique to Mac OS, but it seems to be standard for it (is available in both machines I use)
The PAM configuration file I uploaded (xrdp-sesman.macos) is basically the same as Mac OS' default SSH's PAM configuration, I don't know how to fine tune it but it makes sense you need the same permissions as SSH","Mac OS supports PAM, so it makes sense to add support for it, at least I can login after this commit (there are more issues down the line, but this commit fixes that).
Some notes:

I'm not sure at all if the file /etc/pam.d/authorization is unique to Mac OS, but it seems to be standard for it (is available in both machines I use)
The PAM configuration file I uploaded (xrdp-sesman.macos) is basically the same as Mac OS' default SSH's PAM configuration, I don't know how to fine tune it but it makes sense you need the same permissions as SSH",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1021,2018-02-01T08:13:11Z,2018-02-07T12:22:00Z,2018-02-08T09:44:42Z,MERGED,True,22,0,4,https://github.com/Vraiment,Added PAM support for Mac OS,1,[],https://github.com/neutrinolabs/xrdp/pull/1021,https://github.com/Vraiment,2,https://github.com/neutrinolabs/xrdp/pull/1021#issuecomment-362862199,"Mac OS supports PAM, so it makes sense to add support for it, at least I can login after this commit (there are more issues down the line, but this commit fixes that).
Some notes:

I'm not sure at all if the file /etc/pam.d/authorization is unique to Mac OS, but it seems to be standard for it (is available in both machines I use)
The PAM configuration file I uploaded (xrdp-sesman.macos) is basically the same as Mac OS' default SSH's PAM configuration, I don't know how to fine tune it but it makes sense you need the same permissions as SSH",ping?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1021,2018-02-01T08:13:11Z,2018-02-07T12:22:00Z,2018-02-08T09:44:42Z,MERGED,True,22,0,4,https://github.com/Vraiment,Added PAM support for Mac OS,1,[],https://github.com/neutrinolabs/xrdp/pull/1021,https://github.com/Vraiment,3,https://github.com/neutrinolabs/xrdp/pull/1021#issuecomment-362938992,"Mac OS supports PAM, so it makes sense to add support for it, at least I can login after this commit (there are more issues down the line, but this commit fixes that).
Some notes:

I'm not sure at all if the file /etc/pam.d/authorization is unique to Mac OS, but it seems to be standard for it (is available in both machines I use)
The PAM configuration file I uploaded (xrdp-sesman.macos) is basically the same as Mac OS' default SSH's PAM configuration, I don't know how to fine tune it but it makes sense you need the same permissions as SSH",Updated comments,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1024,2018-02-02T16:45:30Z,2018-03-01T00:57:36Z,2018-03-19T15:10:42Z,MERGED,True,64,0,1,https://github.com/enricotagliavini,enable automatic ECDH and DHE when possible (openssl 1.0.2),2,['TLS'],https://github.com/neutrinolabs/xrdp/pull/1024,https://github.com/enricotagliavini,1,https://github.com/neutrinolabs/xrdp/pull/1024,"Openssl 1.1.0 and later are enabling ECDH automatically, but for older
version it must be enabled explicitly or all Perfect Forward Secrecy
ciphers will be silently ignored. See also [1]. This commit applies the
same fix as found in CnetOS 7 httpd package to enable automatic ECDH as
found in [2].
Should fix issue #1023
[1] https://wiki.openssl.org/index.php/Diffie-Hellman_parameters
[2] https://git.centos.org/blob/rpms!httpd.git/c7/SOURCES!httpd-2.4.6-ssl-ecdh-auto.patch","Openssl 1.1.0 and later are enabling ECDH automatically, but for older
version it must be enabled explicitly or all Perfect Forward Secrecy
ciphers will be silently ignored. See also [1]. This commit applies the
same fix as found in CnetOS 7 httpd package to enable automatic ECDH as
found in [2].
Should fix issue #1023
[1] https://wiki.openssl.org/index.php/Diffie-Hellman_parameters
[2] https://git.centos.org/blob/rpms!httpd.git/c7/SOURCES!httpd-2.4.6-ssl-ecdh-auto.patch",True,{'THUMBS_UP': ['https://github.com/metalefty']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1024,2018-02-02T16:45:30Z,2018-03-01T00:57:36Z,2018-03-19T15:10:42Z,MERGED,True,64,0,1,https://github.com/enricotagliavini,enable automatic ECDH and DHE when possible (openssl 1.0.2),2,['TLS'],https://github.com/neutrinolabs/xrdp/pull/1024,https://github.com/enricotagliavini,2,https://github.com/neutrinolabs/xrdp/pull/1024#issuecomment-362639250,"Openssl 1.1.0 and later are enabling ECDH automatically, but for older
version it must be enabled explicitly or all Perfect Forward Secrecy
ciphers will be silently ignored. See also [1]. This commit applies the
same fix as found in CnetOS 7 httpd package to enable automatic ECDH as
found in [2].
Should fix issue #1023
[1] https://wiki.openssl.org/index.php/Diffie-Hellman_parameters
[2] https://git.centos.org/blob/rpms!httpd.git/c7/SOURCES!httpd-2.4.6-ssl-ecdh-auto.patch",Please note I tested this only on CentOS 7 and I was able to connect with cipher ECDHE-RSA-AES256-GCM-SHA384 from xfreerdp client on Fedora 27.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1024,2018-02-02T16:45:30Z,2018-03-01T00:57:36Z,2018-03-19T15:10:42Z,MERGED,True,64,0,1,https://github.com/enricotagliavini,enable automatic ECDH and DHE when possible (openssl 1.0.2),2,['TLS'],https://github.com/neutrinolabs/xrdp/pull/1024,https://github.com/speidy,3,https://github.com/neutrinolabs/xrdp/pull/1024#issuecomment-362791237,"Openssl 1.1.0 and later are enabling ECDH automatically, but for older
version it must be enabled explicitly or all Perfect Forward Secrecy
ciphers will be silently ignored. See also [1]. This commit applies the
same fix as found in CnetOS 7 httpd package to enable automatic ECDH as
found in [2].
Should fix issue #1023
[1] https://wiki.openssl.org/index.php/Diffie-Hellman_parameters
[2] https://git.centos.org/blob/rpms!httpd.git/c7/SOURCES!httpd-2.4.6-ssl-ecdh-auto.patch","Thanks for the contribution.
I think we want ephemeral cipher suites to be enabled by default in
general. Not only the elliptic curve variants but RSA-DHE and others.

It will be better if your patch will be changed to support those.
בתאריך יום ו׳, 2 בפבר׳ 2018 ב-20:14 מאת Enrico Tagliavini <
notifications@github.com>:
 Please note I tested this only on CentOS 7 and I was able to connect with
 cipher ECDHE-RSA-AES256-GCM-SHA384 from xfreerdp client on Fedora 27.

 —
 You are receiving this because you are subscribed to this thread.
 Reply to this email directly, view it on GitHub
 <#1024 (comment)>,
 or mute the thread
 <https://github.com/notifications/unsubscribe-auth/ADTH1KfoWAVyrlAXk_HSniupwc0fgEJVks5tQzvagaJpZM4R3ddk>
 .

-- 
Idan Freiberg

PGP FP: 8108 7EC9 806E 4980 75F2  72B3 8AD3 2D04 337B 1F18",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1024,2018-02-02T16:45:30Z,2018-03-01T00:57:36Z,2018-03-19T15:10:42Z,MERGED,True,64,0,1,https://github.com/enricotagliavini,enable automatic ECDH and DHE when possible (openssl 1.0.2),2,['TLS'],https://github.com/neutrinolabs/xrdp/pull/1024,https://github.com/enricotagliavini,4,https://github.com/neutrinolabs/xrdp/pull/1024#issuecomment-362850376,"Openssl 1.1.0 and later are enabling ECDH automatically, but for older
version it must be enabled explicitly or all Perfect Forward Secrecy
ciphers will be silently ignored. See also [1]. This commit applies the
same fix as found in CnetOS 7 httpd package to enable automatic ECDH as
found in [2].
Should fix issue #1023
[1] https://wiki.openssl.org/index.php/Diffie-Hellman_parameters
[2] https://git.centos.org/blob/rpms!httpd.git/c7/SOURCES!httpd-2.4.6-ssl-ecdh-auto.patch","I understand your point. I'll have a look if I can manage. Although keep in mind DHE and co. are not recommended any longer for modern setups. For example, Mozilla recommends ECDH only [1].
I have a significant maintenance going on until Tuesday, included, so I will start looking into this after that.
[1] https://mozilla.github.io/server-side-tls/ssl-config-generator/?server=apache-2.4.6&openssl=1.0.2k&hsts=yes&profile=modern",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1024,2018-02-02T16:45:30Z,2018-03-01T00:57:36Z,2018-03-19T15:10:42Z,MERGED,True,64,0,1,https://github.com/enricotagliavini,enable automatic ECDH and DHE when possible (openssl 1.0.2),2,['TLS'],https://github.com/neutrinolabs/xrdp/pull/1024,https://github.com/metalefty,5,https://github.com/neutrinolabs/xrdp/pull/1024#issuecomment-363005322,"Openssl 1.1.0 and later are enabling ECDH automatically, but for older
version it must be enabled explicitly or all Perfect Forward Secrecy
ciphers will be silently ignored. See also [1]. This commit applies the
same fix as found in CnetOS 7 httpd package to enable automatic ECDH as
found in [2].
Should fix issue #1023
[1] https://wiki.openssl.org/index.php/Diffie-Hellman_parameters
[2] https://git.centos.org/blob/rpms!httpd.git/c7/SOURCES!httpd-2.4.6-ssl-ecdh-auto.patch","LGTM at least about ECDH.
I confirmed that this patch enables xrdp to use ECDHE-* also on FreeBSD 11-STABLE.
FreeBSD's base system OpenSSL is still 1.0.2k with some FreeBSD patches.
v0.9.5 + FreeBSD 11-STABLE (OpenSSL 1.0.2k)

Windows 10 IP build 17083:  AES256-GCM-SHA384
Windows 7 SP1: AES256-GCM-SHA384
FreeRDP 1.1.0 on macOS High Sierra (LibreSSL 2.2.7):: AES256-SHA
FreeBSD 2.0.0 on macOS High Sierra (LibreSSL 2.2.7): AES256-GCM-SHA384

this PR + FreeBSD 11-STABLE (OpenSSL 1.0.2k)

Windows 10 IP build 17083:  ECDHE-RSA-AES256-GCM-SHA384
Windows 7 SP1:    ECDHE-RSA-AES256-SHA384
FreeRDP 1.1.0 on macOS High Sierra (LibreSSL 2.2.7)::  ECDHE-RSA-AES256-SHA
FreeBSD 2.0.0 on macOS High Sierra (LibreSSL 2.2.7): ECDHE-RSA-AES256-GCM-SHA384",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1024,2018-02-02T16:45:30Z,2018-03-01T00:57:36Z,2018-03-19T15:10:42Z,MERGED,True,64,0,1,https://github.com/enricotagliavini,enable automatic ECDH and DHE when possible (openssl 1.0.2),2,['TLS'],https://github.com/neutrinolabs/xrdp/pull/1024,https://github.com/enricotagliavini,6,https://github.com/neutrinolabs/xrdp/pull/1024#issuecomment-363765589,"Openssl 1.1.0 and later are enabling ECDH automatically, but for older
version it must be enabled explicitly or all Perfect Forward Secrecy
ciphers will be silently ignored. See also [1]. This commit applies the
same fix as found in CnetOS 7 httpd package to enable automatic ECDH as
found in [2].
Should fix issue #1023
[1] https://wiki.openssl.org/index.php/Diffie-Hellman_parameters
[2] https://git.centos.org/blob/rpms!httpd.git/c7/SOURCES!httpd-2.4.6-ssl-ecdh-auto.patch","Thank you for testing the change on so many platforms!
So I added the DHE (non EC based) support. I'll be honest and say am a bit confused by the docs on it, so I hope what I did is not a giant mistake. I forced the cipher list to be only DHE-RSA-AES256-GCM-SHA384 and I was able to connect after I applied this changes. I was not with the stock version.
There are at least 3 options for the DHE support:

1 generate a random DH parameter and compile it in the application
2 make the user / admin generate one and load it at runtime
3 use a callback function

I choose option 1. because it's the simplest for developers, for users and for admins. It just works out of the box without any additional human intervention and you don't risk forgetting a file and having a potential problem hard to sort out (as logs will not mention, it will be completely silent).
I don't like 2. for the reasons explained. I think this kind of stuff should be automatic and require no user intervention like in the case of ECDH, but it's easy to conditionally load the dhparam from the file if the user specify one in the config
Option 3. is the most elaborate solution and that's what apache httpd's mod_ssl uses as far as I understand. This adds a callback function the openssl library will call when it needs a dhparam and they call the standard openssl functions like get_rfc3526_prime_2048 (see [1] and [2]).
What do you think? Would that be good enough?
Also feel free to re-generate the key, I get you might not want to trust the first random person on the internet to generate a random safe key. No offense taken if you do :)
[1] https://github.com/openssl/openssl/blob/28c0a61b3084ca05d1c590113332501e96b6175d/include/openssl/bn.h#L465
[2] https://github.com/apache/httpd/blob/8d52110d191880fd066b0af35e092a4f3320f8f9/modules/ssl/ssl_engine_init.c#L78",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1024,2018-02-02T16:45:30Z,2018-03-01T00:57:36Z,2018-03-19T15:10:42Z,MERGED,True,64,0,1,https://github.com/enricotagliavini,enable automatic ECDH and DHE when possible (openssl 1.0.2),2,['TLS'],https://github.com/neutrinolabs/xrdp/pull/1024,https://github.com/metalefty,7,https://github.com/neutrinolabs/xrdp/pull/1024#issuecomment-369437589,"Openssl 1.1.0 and later are enabling ECDH automatically, but for older
version it must be enabled explicitly or all Perfect Forward Secrecy
ciphers will be silently ignored. See also [1]. This commit applies the
same fix as found in CnetOS 7 httpd package to enable automatic ECDH as
found in [2].
Should fix issue #1023
[1] https://wiki.openssl.org/index.php/Diffie-Hellman_parameters
[2] https://git.centos.org/blob/rpms!httpd.git/c7/SOURCES!httpd-2.4.6-ssl-ecdh-auto.patch",I also tested DHE. LGTM. I'll change trivial coding styles by myself.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1024,2018-02-02T16:45:30Z,2018-03-01T00:57:36Z,2018-03-19T15:10:42Z,MERGED,True,64,0,1,https://github.com/enricotagliavini,enable automatic ECDH and DHE when possible (openssl 1.0.2),2,['TLS'],https://github.com/neutrinolabs/xrdp/pull/1024,https://github.com/enricotagliavini,8,https://github.com/neutrinolabs/xrdp/pull/1024#issuecomment-369517046,"Openssl 1.1.0 and later are enabling ECDH automatically, but for older
version it must be enabled explicitly or all Perfect Forward Secrecy
ciphers will be silently ignored. See also [1]. This commit applies the
same fix as found in CnetOS 7 httpd package to enable automatic ECDH as
found in [2].
Should fix issue #1023
[1] https://wiki.openssl.org/index.php/Diffie-Hellman_parameters
[2] https://git.centos.org/blob/rpms!httpd.git/c7/SOURCES!httpd-2.4.6-ssl-ecdh-auto.patch","Oh sorry about the space and coding style, I didn't noticed. Thank you very much!",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1030,2018-02-05T08:41:12Z,2018-02-06T07:10:21Z,2018-02-06T07:11:37Z,MERGED,True,29,11,1,https://github.com/metalefty,FreeBSD: rework setsid code,1,"['FreeBSD', 'sesman']",https://github.com/neutrinolabs/xrdp/pull/1030,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1030,"Pull request #650 is not valid to avoid run session twice.
It certainly stops running session twice but causes #1016.
In FreeBSD, sesman process will run like this. The intermediate
sesman is needed to detect session termination correctly.
xrdp-sesman (daemon)
    |
    +- xrdp-sesman (FreeBSD specific intermediate sesman)
        |
        +- xrdp-sesman (bsd sesion leader & each session)
             |
             +- Xorg
             +- startwm.sh
             +- xrdp-chansrv

To stop runninng session twice correctly, just exit before the
intermediate sesman executes Xorg, WM and chansrv.","Pull request #650 is not valid to avoid run session twice.
It certainly stops running session twice but causes #1016.
In FreeBSD, sesman process will run like this. The intermediate
sesman is needed to detect session termination correctly.
xrdp-sesman (daemon)
    |
    +- xrdp-sesman (FreeBSD specific intermediate sesman)
        |
        +- xrdp-sesman (bsd sesion leader & each session)
             |
             +- Xorg
             +- startwm.sh
             +- xrdp-chansrv

To stop runninng session twice correctly, just exit before the
intermediate sesman executes Xorg, WM and chansrv.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1036,2018-02-08T10:35:17Z,2018-02-19T02:41:57Z,2018-02-19T07:12:13Z,MERGED,True,38,8,5,https://github.com/Vraiment,Make xrdp.ini to be dynamic for each operating system,2,[],https://github.com/neutrinolabs/xrdp/pull/1036,https://github.com/Vraiment,1,https://github.com/neutrinolabs/xrdp/pull/1036,Mac OS needs libraries to be .dylib instead of .so. By using the same logic available in docs/man/Makefile.am this commit makes the xrdp/xrdp.ini file to depend on the operating system and replace the libraries extensions where necessary,Mac OS needs libraries to be .dylib instead of .so. By using the same logic available in docs/man/Makefile.am this commit makes the xrdp/xrdp.ini file to depend on the operating system and replace the libraries extensions where necessary,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1036,2018-02-08T10:35:17Z,2018-02-19T02:41:57Z,2018-02-19T07:12:13Z,MERGED,True,38,8,5,https://github.com/Vraiment,Make xrdp.ini to be dynamic for each operating system,2,[],https://github.com/neutrinolabs/xrdp/pull/1036,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1036#issuecomment-364089189,Mac OS needs libraries to be .dylib instead of .so. By using the same logic available in docs/man/Makefile.am this commit makes the xrdp/xrdp.ini file to depend on the operating system and replace the libraries extensions where necessary,"Good work! Related to this, pulse script path in sesman.ini should refer @sysconfdir@.
[SessionVariables]
PULSE_SCRIPT=/etc/xrdp/pulse/default.pa",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1036,2018-02-08T10:35:17Z,2018-02-19T02:41:57Z,2018-02-19T07:12:13Z,MERGED,True,38,8,5,https://github.com/Vraiment,Make xrdp.ini to be dynamic for each operating system,2,[],https://github.com/neutrinolabs/xrdp/pull/1036,https://github.com/Vraiment,3,https://github.com/neutrinolabs/xrdp/pull/1036#issuecomment-365351426,Mac OS needs libraries to be .dylib instead of .so. By using the same logic available in docs/man/Makefile.am this commit makes the xrdp/xrdp.ini file to depend on the operating system and replace the libraries extensions where necessary,ping,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1036,2018-02-08T10:35:17Z,2018-02-19T02:41:57Z,2018-02-19T07:12:13Z,MERGED,True,38,8,5,https://github.com/Vraiment,Make xrdp.ini to be dynamic for each operating system,2,[],https://github.com/neutrinolabs/xrdp/pull/1036,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/1036#issuecomment-365522046,Mac OS needs libraries to be .dylib instead of .so. By using the same logic available in docs/man/Makefile.am this commit makes the xrdp/xrdp.ini file to depend on the operating system and replace the libraries extensions where necessary,I'm testing this.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1037,2018-02-09T14:00:31Z,2019-03-08T02:13:18Z,2019-03-08T02:13:18Z,CLOSED,False,14,9,1,https://github.com/c0r0n3r,Log certificate/privkey readability problem,1,[],https://github.com/neutrinolabs/xrdp/pull/1037,https://github.com/c0r0n3r,1,https://github.com/neutrinolabs/xrdp/pull/1037,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1037,2018-02-09T14:00:31Z,2019-03-08T02:13:18Z,2019-03-08T02:13:18Z,CLOSED,False,14,9,1,https://github.com/c0r0n3r,Log certificate/privkey readability problem,1,[],https://github.com/neutrinolabs/xrdp/pull/1037,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1037#issuecomment-470777496,,No feedback for a long time closing.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1040,2018-02-13T06:41:05Z,2018-02-20T04:17:09Z,2018-02-21T00:14:00Z,MERGED,True,2,1,2,https://github.com/metalefty,Do not treat `!` as a comment out symbol,2,[],https://github.com/neutrinolabs/xrdp/pull/1040,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1040,The simplest fix for #1033.,The simplest fix for #1033.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1040,2018-02-13T06:41:05Z,2018-02-20T04:17:09Z,2018-02-21T00:14:00Z,MERGED,True,2,1,2,https://github.com/metalefty,Do not treat `!` as a comment out symbol,2,[],https://github.com/neutrinolabs/xrdp/pull/1040,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1040#issuecomment-366112309,The simplest fix for #1033.,"@jsorg71 @speidy If no objections, I'll apply this fix for the time being. Ideally, the config parser should be smarter.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1040,2018-02-13T06:41:05Z,2018-02-20T04:17:09Z,2018-02-21T00:14:00Z,MERGED,True,2,1,2,https://github.com/metalefty,Do not treat `!` as a comment out symbol,2,[],https://github.com/neutrinolabs/xrdp/pull/1040,https://github.com/jsorg71,3,https://github.com/neutrinolabs/xrdp/pull/1040#issuecomment-366824072,The simplest fix for #1033.,+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1049,2018-03-01T08:43:04Z,2018-03-09T05:24:18Z,2018-03-09T05:24:29Z,MERGED,True,8,1,1,https://github.com/metalefty,sesman: default startwm.sh should use bash,1,[],https://github.com/neutrinolabs/xrdp/pull/1049,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1049,"as it sources bash_profile. And add comments.
Closes #1009.","as it sources bash_profile. And add comments.
Closes #1009.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1052,2018-03-03T03:41:03Z,2018-03-20T07:05:40Z,2018-03-26T06:15:11Z,MERGED,True,4,0,1,https://github.com/metalefty,common: temporarily disable DHE,1,[],https://github.com/neutrinolabs/xrdp/pull/1052,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1052,"until make it possible to use generated DH parameters per installation.
speidy concern about using static DH parameters:
1690950#r27897446","until make it possible to use generated DH parameters per installation.
speidy concern about using static DH parameters:
1690950#r27897446",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1052,2018-03-03T03:41:03Z,2018-03-20T07:05:40Z,2018-03-26T06:15:11Z,MERGED,True,4,0,1,https://github.com/metalefty,common: temporarily disable DHE,1,[],https://github.com/neutrinolabs/xrdp/pull/1052,https://github.com/speidy,2,https://github.com/neutrinolabs/xrdp/pull/1052#issuecomment-373896851,"until make it possible to use generated DH parameters per installation.
speidy concern about using static DH parameters:
1690950#r27897446","Lets merge this for now, it also breaks compatibility becuase of OpenSSL 1.1.0 API changes
(they made the DH struct opaque)
@metalefty  can you add this to the comment after the #if 0 ?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1052,2018-03-03T03:41:03Z,2018-03-20T07:05:40Z,2018-03-26T06:15:11Z,MERGED,True,4,0,1,https://github.com/metalefty,common: temporarily disable DHE,1,[],https://github.com/neutrinolabs/xrdp/pull/1052,https://github.com/speidy,3,https://github.com/neutrinolabs/xrdp/pull/1052#issuecomment-373897362,"until make it possible to use generated DH parameters per installation.
speidy concern about using static DH parameters:
1690950#r27897446",oh and we should #if 0 the function get_dh2236() as well so xrdp builds ok with newer openssl.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1052,2018-03-03T03:41:03Z,2018-03-20T07:05:40Z,2018-03-26T06:15:11Z,MERGED,True,4,0,1,https://github.com/metalefty,common: temporarily disable DHE,1,[],https://github.com/neutrinolabs/xrdp/pull/1052,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/1052#issuecomment-373983544,"until make it possible to use generated DH parameters per installation.
speidy concern about using static DH parameters:
1690950#r27897446","Okay, will do it  later.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1052,2018-03-03T03:41:03Z,2018-03-20T07:05:40Z,2018-03-26T06:15:11Z,MERGED,True,4,0,1,https://github.com/metalefty,common: temporarily disable DHE,1,[],https://github.com/neutrinolabs/xrdp/pull/1052,https://github.com/metalefty,5,https://github.com/neutrinolabs/xrdp/pull/1052#issuecomment-373994315,"until make it possible to use generated DH parameters per installation.
speidy concern about using static DH parameters:
1690950#r27897446",@speidy done.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1052,2018-03-03T03:41:03Z,2018-03-20T07:05:40Z,2018-03-26T06:15:11Z,MERGED,True,4,0,1,https://github.com/metalefty,common: temporarily disable DHE,1,[],https://github.com/neutrinolabs/xrdp/pull/1052,https://github.com/speidy,6,https://github.com/neutrinolabs/xrdp/pull/1052#issuecomment-374097770,"until make it possible to use generated DH parameters per installation.
speidy concern about using static DH parameters:
1690950#r27897446","openssl 1.1.0 introduces SSL_CTX_set_dh_auto just like for ecdh.
maybe we can use it and add a backport.
ref: openssl/openssl@09599b5
cc: @enricotagliavini",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1052,2018-03-03T03:41:03Z,2018-03-20T07:05:40Z,2018-03-26T06:15:11Z,MERGED,True,4,0,1,https://github.com/metalefty,common: temporarily disable DHE,1,[],https://github.com/neutrinolabs/xrdp/pull/1052,https://github.com/enricotagliavini,7,https://github.com/neutrinolabs/xrdp/pull/1052#issuecomment-374145684,"until make it possible to use generated DH parameters per installation.
speidy concern about using static DH parameters:
1690950#r27897446","SSL_CTX_set_dh_auto is a good idea for openssl 1.1.0 and newer, very simple, no user interaction needed. But I don't get what do you mean with ""add a backport"". Do you mean use it with older openssl versions?
Also a small note: is SSL_CTX_set_dh_auto just going to use precomputed keys anyway? You cannot generate DH keys on the fly, it takes too long. To my best understanding even Apache httpd mod_ssl uses the builtin openssl per-generated keys, when a dhparam is not provided (note: it is provided inside the cert file, which basically means almost nobody even knows it's there). See
https://github.com/apache/httpd/blob/2b9e9b4c4226c22d9f5c489661507e7547de051c/modules/ssl/ssl_engine_init.c#L108",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1052,2018-03-03T03:41:03Z,2018-03-20T07:05:40Z,2018-03-26T06:15:11Z,MERGED,True,4,0,1,https://github.com/metalefty,common: temporarily disable DHE,1,[],https://github.com/neutrinolabs/xrdp/pull/1052,https://github.com/metalefty,8,https://github.com/neutrinolabs/xrdp/pull/1052#issuecomment-374155763,"until make it possible to use generated DH parameters per installation.
speidy concern about using static DH parameters:
1690950#r27897446","Regarding the next release, I'm going to disable non-EC DHE because speidy concerns about static DH parameters. I think static DH params are OK as I mentioned before [1] but not 100% sure.
Also, I agree with enricotagliavini overall. To make per-install DH params will resolve concern about static DH params but I don't think spending time on that is worth the effort. I don't object doing that but I don't because ECDHE is enough at least in my case.
[1] 1690950#r27899026",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1053,2018-03-05T11:17:35Z,2018-03-06T00:13:32Z,2018-03-06T00:47:05Z,MERGED,True,3,0,1,https://github.com/fbourqui,Update xrdp_keyboard.ini to handle Swiss French,1,[],https://github.com/neutrinolabs/xrdp/pull/1053,https://github.com/fbourqui,1,https://github.com/neutrinolabs/xrdp/pull/1053,"Add the missing Swiss French rdp_layout_ definitions, ch(fr) in X11","Add the missing Swiss French rdp_layout_ definitions, ch(fr) in X11",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1053,2018-03-05T11:17:35Z,2018-03-06T00:13:32Z,2018-03-06T00:47:05Z,MERGED,True,3,0,1,https://github.com/fbourqui,Update xrdp_keyboard.ini to handle Swiss French,1,[],https://github.com/neutrinolabs/xrdp/pull/1053,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1053#issuecomment-370620504,"Add the missing Swiss French rdp_layout_ definitions, ch(fr) in X11",Merged. Good work!,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1063,2018-03-17T08:01:55Z,2018-03-22T07:20:15Z,2018-03-22T07:20:16Z,MERGED,True,75,19,1,https://github.com/speidy,ssl_calls: support OpenSSL 1.1.0 API for setting DH params,2,[],https://github.com/neutrinolabs/xrdp/pull/1063,https://github.com/speidy,1,https://github.com/neutrinolabs/xrdp/pull/1063,"OpenSSL 1.1.0 makes many structs opaque now, so we can't set its values directly anymore.
Also:

fix memory leak introduced by PR #1024 in get_dh2236().
move SSL_CTX object creation check to its right place. use log_message for logging.","OpenSSL 1.1.0 makes many structs opaque now, so we can't set its values directly anymore.
Also:

fix memory leak introduced by PR #1024 in get_dh2236().
move SSL_CTX object creation check to its right place. use log_message for logging.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1063,2018-03-17T08:01:55Z,2018-03-22T07:20:15Z,2018-03-22T07:20:16Z,MERGED,True,75,19,1,https://github.com/speidy,ssl_calls: support OpenSSL 1.1.0 API for setting DH params,2,[],https://github.com/neutrinolabs/xrdp/pull/1063,https://github.com/speidy,2,https://github.com/neutrinolabs/xrdp/pull/1063#issuecomment-374835240,"OpenSSL 1.1.0 makes many structs opaque now, so we can't set its values directly anymore.
Also:

fix memory leak introduced by PR #1024 in get_dh2236().
move SSL_CTX object creation check to its right place. use log_message for logging.","Meta, can you test on OpenSSL < 1.0.x (1.0.2)?

Thx
בתאריך יום א׳, 18 במרץ 2018 ב-16:12 מאת metalefty <notifications@github.com
:
 ***@***.**** commented on this pull request.
 ------------------------------

 In common/ssl_calls.c
 <#1063 (comment)>:

 >  #if defined(SSL_CTX_set_ecdh_auto)
      SSL_CTX_set_ecdh_auto(self->ctx, 1);
  #endif

      if (g_strlen(tls_ciphers) > 1)
      {
 -        log_message(LOG_LEVEL_TRACE, ""ssl_tls_accept: tls_ciphers=%s"", tls_ciphers);
 +        log_message(LOG_LEVEL_TRACE, ""ssl_tls_accept: tls_ciphers=%s"", \

 backslash is not needed here.

 —
 You are receiving this because you were assigned.
 Reply to this email directly, view it on GitHub
 <#1063 (review)>,
 or mute the thread
 <https://github.com/notifications/unsubscribe-auth/ADTH1H_e_RHtXSjN5cG1zbypLesw6hRtks5tfms5gaJpZM4Sutmj>
 .

-- 
Idan Freiberg

PGP FP: 8108 7EC9 806E 4980 75F2  72B3 8AD3 2D04 337B 1F18",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1063,2018-03-17T08:01:55Z,2018-03-22T07:20:15Z,2018-03-22T07:20:16Z,MERGED,True,75,19,1,https://github.com/speidy,ssl_calls: support OpenSSL 1.1.0 API for setting DH params,2,[],https://github.com/neutrinolabs/xrdp/pull/1063,https://github.com/speidy,3,https://github.com/neutrinolabs/xrdp/pull/1063#issuecomment-374837182,"OpenSSL 1.1.0 makes many structs opaque now, so we can't set its values directly anymore.
Also:

fix memory leak introduced by PR #1024 in get_dh2236().
move SSL_CTX object creation check to its right place. use log_message for logging.",maybe we need to add travis builds with multi ssl versions,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1063,2018-03-17T08:01:55Z,2018-03-22T07:20:15Z,2018-03-22T07:20:16Z,MERGED,True,75,19,1,https://github.com/speidy,ssl_calls: support OpenSSL 1.1.0 API for setting DH params,2,[],https://github.com/neutrinolabs/xrdp/pull/1063,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/1063#issuecomment-374839255,"OpenSSL 1.1.0 makes many structs opaque now, so we can't set its values directly anymore.
Also:

fix memory leak introduced by PR #1024 in get_dh2236().
move SSL_CTX object creation check to its right place. use log_message for logging.","Yes. We need to switch Docker-based travis build. I already do it in RH-Matic to test multiple CentOS version. The bare travis build environment is Ubuntu 14.04. Can't test vsock, too.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1063,2018-03-17T08:01:55Z,2018-03-22T07:20:15Z,2018-03-22T07:20:16Z,MERGED,True,75,19,1,https://github.com/speidy,ssl_calls: support OpenSSL 1.1.0 API for setting DH params,2,[],https://github.com/neutrinolabs/xrdp/pull/1063,https://github.com/metalefty,5,https://github.com/neutrinolabs/xrdp/pull/1063#issuecomment-374839394,"OpenSSL 1.1.0 makes many structs opaque now, so we can't set its values directly anymore.
Also:

fix memory leak introduced by PR #1024 in get_dh2236().
move SSL_CTX object creation check to its right place. use log_message for logging.",Can you resolve conflict before I test with OpenSSL 1.0.x?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1063,2018-03-17T08:01:55Z,2018-03-22T07:20:15Z,2018-03-22T07:20:16Z,MERGED,True,75,19,1,https://github.com/speidy,ssl_calls: support OpenSSL 1.1.0 API for setting DH params,2,[],https://github.com/neutrinolabs/xrdp/pull/1063,https://github.com/speidy,6,https://github.com/neutrinolabs/xrdp/pull/1063#issuecomment-374841949,"OpenSSL 1.1.0 makes many structs opaque now, so we can't set its values directly anymore.
Also:

fix memory leak introduced by PR #1024 in get_dh2236().
move SSL_CTX object creation check to its right place. use log_message for logging.","@metalefty docker builds will be great. I'll work on that too.
About the conflict, I was thinking maybe the static DH groups are actually ok :)
But I want to have some coding style changes",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1063,2018-03-17T08:01:55Z,2018-03-22T07:20:15Z,2018-03-22T07:20:16Z,MERGED,True,75,19,1,https://github.com/speidy,ssl_calls: support OpenSSL 1.1.0 API for setting DH params,2,[],https://github.com/neutrinolabs/xrdp/pull/1063,https://github.com/speidy,7,https://github.com/neutrinolabs/xrdp/pull/1063#issuecomment-374842289,"OpenSSL 1.1.0 makes many structs opaque now, so we can't set its values directly anymore.
Also:

fix memory leak introduced by PR #1024 in get_dh2236().
move SSL_CTX object creation check to its right place. use log_message for logging.",i'll add them to this PR,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1063,2018-03-17T08:01:55Z,2018-03-22T07:20:15Z,2018-03-22T07:20:16Z,MERGED,True,75,19,1,https://github.com/speidy,ssl_calls: support OpenSSL 1.1.0 API for setting DH params,2,[],https://github.com/neutrinolabs/xrdp/pull/1063,https://github.com/speidy,8,https://github.com/neutrinolabs/xrdp/pull/1063#issuecomment-374845321,"OpenSSL 1.1.0 makes many structs opaque now, so we can't set its values directly anymore.
Also:

fix memory leak introduced by PR #1024 in get_dh2236().
move SSL_CTX object creation check to its right place. use log_message for logging.","ok, added DH groups back and changed the function name.
can you review again? if its fine we can merge.
Iv'e tested on Ubuntu 16.04 (openssl 1.0.2) and archlinux (openssl 1.1.0g)",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1063,2018-03-17T08:01:55Z,2018-03-22T07:20:15Z,2018-03-22T07:20:16Z,MERGED,True,75,19,1,https://github.com/speidy,ssl_calls: support OpenSSL 1.1.0 API for setting DH params,2,[],https://github.com/neutrinolabs/xrdp/pull/1063,https://github.com/metalefty,9,https://github.com/neutrinolabs/xrdp/pull/1063#issuecomment-374886898,"OpenSSL 1.1.0 makes many structs opaque now, so we can't set its values directly anymore.
Also:

fix memory leak introduced by PR #1024 in get_dh2236().
move SSL_CTX object creation check to its right place. use log_message for logging.","Overall, logic looks good. Let me test it later.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1063,2018-03-17T08:01:55Z,2018-03-22T07:20:15Z,2018-03-22T07:20:16Z,MERGED,True,75,19,1,https://github.com/speidy,ssl_calls: support OpenSSL 1.1.0 API for setting DH params,2,[],https://github.com/neutrinolabs/xrdp/pull/1063,https://github.com/metalefty,10,https://github.com/neutrinolabs/xrdp/pull/1063#issuecomment-375163279,"OpenSSL 1.1.0 makes many structs opaque now, so we can't set its values directly anymore.
Also:

fix memory leak introduced by PR #1024 in get_dh2236().
move SSL_CTX object creation check to its right place. use log_message for logging.","Tested, working fine. If no more concerns, let's ship it to v0.9.6.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1063,2018-03-17T08:01:55Z,2018-03-22T07:20:15Z,2018-03-22T07:20:16Z,MERGED,True,75,19,1,https://github.com/speidy,ssl_calls: support OpenSSL 1.1.0 API for setting DH params,2,[],https://github.com/neutrinolabs/xrdp/pull/1063,https://github.com/speidy,11,https://github.com/neutrinolabs/xrdp/pull/1063#issuecomment-375201561,"OpenSSL 1.1.0 makes many structs opaque now, so we can't set its values directly anymore.
Also:

fix memory leak introduced by PR #1024 in get_dh2236().
move SSL_CTX object creation check to its right place. use log_message for logging.","Lets merge
בתאריך יום ה׳, 22 במרץ 2018 ב-4:59 מאת metalefty <notifications@github.com>:
 Tested, working fine. If no more concerns, let's ship it to v0.9.6.

 —
 You are receiving this because you were assigned.
 Reply to this email directly, view it on GitHub
 <#1063 (comment)>,
 or mute the thread
 <https://github.com/notifications/unsubscribe-auth/ADTH1KL_lXIztIxUNLY8cHwQ86X2piW3ks5tgxNtgaJpZM4Sutmj>
 .

-- 
Idan Freiberg

PGP FP: 8108 7EC9 806E 4980 75F2  72B3 8AD3 2D04 337B 1F18",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1073,2018-03-22T03:46:32Z,2018-03-23T02:43:25Z,2018-03-23T02:45:52Z,MERGED,True,0,2,1,https://github.com/metalefty,"Revert ""devredir: fix xinode leak""",1,"['bug-blocker', 'drive redirection']",https://github.com/neutrinolabs/xrdp/pull/1073,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1073,"Sorry about that. I should have been careful.   After reverting this commit, drive redirection works again. This should be shipped to v0.9.6.

This reverts commit 5daa091.
Causes ""double free"":
[1271363627]: DEV_REDIR  dev_redir_proc_device_iocompletion: 738 : entered: IoStatus=0x0 CompletionId=1
[1271363627]: DEV_REDIR  dev_redir_proc_device_iocompletion: 839 : got CID_DIRECTORY_CONTROL
[1271363627]: DEV_REDIR  dev_redir_proc_query_dir_response: 933 : processing FILE_DIRECTORY_INFORMATION structs
[1271363627]: DEV_REDIR  dev_redir_proc_query_dir_response: 968 : FileName:          .
[1271363627]: DEV_REDIR  devredir_fuse_data_peek: 1335 : returning 0x7f2a9c013410
*** Error in `/usr/sbin/xrdp-chansrv': double free or corruption (out): 0x00007f2a9c13a330 ***","Sorry about that. I should have been careful.   After reverting this commit, drive redirection works again. This should be shipped to v0.9.6.

This reverts commit 5daa091.
Causes ""double free"":
[1271363627]: DEV_REDIR  dev_redir_proc_device_iocompletion: 738 : entered: IoStatus=0x0 CompletionId=1
[1271363627]: DEV_REDIR  dev_redir_proc_device_iocompletion: 839 : got CID_DIRECTORY_CONTROL
[1271363627]: DEV_REDIR  dev_redir_proc_query_dir_response: 933 : processing FILE_DIRECTORY_INFORMATION structs
[1271363627]: DEV_REDIR  dev_redir_proc_query_dir_response: 968 : FileName:          .
[1271363627]: DEV_REDIR  devredir_fuse_data_peek: 1335 : returning 0x7f2a9c013410
*** Error in `/usr/sbin/xrdp-chansrv': double free or corruption (out): 0x00007f2a9c13a330 ***",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1076,2018-03-23T07:00:50Z,2018-03-24T13:32:10Z,2018-03-24T13:38:26Z,MERGED,True,5,5,1,https://github.com/metalefty,"sesman: rename vnc password file, just a cosmetic change",1,[],https://github.com/neutrinolabs/xrdp/pull/1076,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1076,VNC password file will be like: ~/.vnc/sesman_passwd-meta@example.xrdp.org:10.,VNC password file will be like: ~/.vnc/sesman_passwd-meta@example.xrdp.org:10.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1077,2018-03-23T12:30:15Z,2021-09-22T01:46:37Z,2021-09-23T09:33:06Z,CLOSED,False,221,1,8,https://github.com/moobyfr,Wtmp,16,[],https://github.com/neutrinolabs/xrdp/pull/1077,https://github.com/moobyfr,1,https://github.com/neutrinolabs/xrdp/pull/1077,Add the utmp/wtmp support.,Add the utmp/wtmp support.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1077,2018-03-23T12:30:15Z,2021-09-22T01:46:37Z,2021-09-23T09:33:06Z,CLOSED,False,221,1,8,https://github.com/moobyfr,Wtmp,16,[],https://github.com/neutrinolabs/xrdp/pull/1077,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1077#issuecomment-375654960,Add the utmp/wtmp support.,I'll rebase the wtmp branch to current devel head after March release.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1077,2018-03-23T12:30:15Z,2021-09-22T01:46:37Z,2021-09-23T09:33:06Z,CLOSED,False,221,1,8,https://github.com/moobyfr,Wtmp,16,[],https://github.com/neutrinolabs/xrdp/pull/1077,https://github.com/speidy,3,https://github.com/neutrinolabs/xrdp/pull/1077#issuecomment-376397276,Add the utmp/wtmp support.,"can you squash some commits?
there's a WIP commits too.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1077,2018-03-23T12:30:15Z,2021-09-22T01:46:37Z,2021-09-23T09:33:06Z,CLOSED,False,221,1,8,https://github.com/moobyfr,Wtmp,16,[],https://github.com/neutrinolabs/xrdp/pull/1077,https://github.com/moobyfr,4,https://github.com/neutrinolabs/xrdp/pull/1077#issuecomment-377345607,Add the utmp/wtmp support.,"I've made the changes requested (minus the gettimeofday and the pam file because he doesn't exist in this branch), but I'm unable to push it in the current branch. the change can be chery-picked on moobyfr@9b915fc",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1077,2018-03-23T12:30:15Z,2021-09-22T01:46:37Z,2021-09-23T09:33:06Z,CLOSED,False,221,1,8,https://github.com/moobyfr,Wtmp,16,[],https://github.com/neutrinolabs/xrdp/pull/1077,https://github.com/metalefty,5,https://github.com/neutrinolabs/xrdp/pull/1077#issuecomment-377406781,Add the utmp/wtmp support.,I'll cherry-pick.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1077,2018-03-23T12:30:15Z,2021-09-22T01:46:37Z,2021-09-23T09:33:06Z,CLOSED,False,221,1,8,https://github.com/moobyfr,Wtmp,16,[],https://github.com/neutrinolabs/xrdp/pull/1077,https://github.com/metalefty,6,https://github.com/neutrinolabs/xrdp/pull/1077#issuecomment-377406867,Add the utmp/wtmp support.,and squash some commits.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1077,2018-03-23T12:30:15Z,2021-09-22T01:46:37Z,2021-09-23T09:33:06Z,CLOSED,False,221,1,8,https://github.com/moobyfr,Wtmp,16,[],https://github.com/neutrinolabs/xrdp/pull/1077,https://github.com/boppbo,7,https://github.com/neutrinolabs/xrdp/pull/1077#issuecomment-382408783,Add the utmp/wtmp support.,"Regarding the arch pam file, system-login already contains pam_loginuid.so (system-remote-login includes system-login). But it is added as optional not as required, will this cause issues?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1077,2018-03-23T12:30:15Z,2021-09-22T01:46:37Z,2021-09-23T09:33:06Z,CLOSED,False,221,1,8,https://github.com/moobyfr,Wtmp,16,[],https://github.com/neutrinolabs/xrdp/pull/1077,https://github.com/NZJourneyMan,8,https://github.com/neutrinolabs/xrdp/pull/1077#issuecomment-413507784,Add the utmp/wtmp support.,This branch now looks to be good to go? I'm interested in when it is likely to be merged as my organisation needs the wtmp changes before we can onboard xrdp in to production. We have been using a patch from this branch for testing and the results have been good.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1077,2018-03-23T12:30:15Z,2021-09-22T01:46:37Z,2021-09-23T09:33:06Z,CLOSED,False,221,1,8,https://github.com/moobyfr,Wtmp,16,[],https://github.com/neutrinolabs/xrdp/pull/1077,https://github.com/shaneforsythe,9,https://github.com/neutrinolabs/xrdp/pull/1077#issuecomment-472261212,Add the utmp/wtmp support.,What is the status of this Pull request?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1077,2018-03-23T12:30:15Z,2021-09-22T01:46:37Z,2021-09-23T09:33:06Z,CLOSED,False,221,1,8,https://github.com/moobyfr,Wtmp,16,[],https://github.com/neutrinolabs/xrdp/pull/1077,https://github.com/NZJourneyMan,10,https://github.com/neutrinolabs/xrdp/pull/1077#issuecomment-529482871,Add the utmp/wtmp support.,I see JonesB has copied this PR and added the missing reconnect functionality. The new PR can be found here: #1408. Is it possible to get this reviewed?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1077,2018-03-23T12:30:15Z,2021-09-22T01:46:37Z,2021-09-23T09:33:06Z,CLOSED,False,221,1,8,https://github.com/moobyfr,Wtmp,16,[],https://github.com/neutrinolabs/xrdp/pull/1077,https://github.com/PaulJohnson,11,https://github.com/neutrinolabs/xrdp/pull/1077#issuecomment-718698609,Add the utmp/wtmp support.,Can we get this accepted please.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1077,2018-03-23T12:30:15Z,2021-09-22T01:46:37Z,2021-09-23T09:33:06Z,CLOSED,False,221,1,8,https://github.com/moobyfr,Wtmp,16,[],https://github.com/neutrinolabs/xrdp/pull/1077,https://github.com/metalefty,12,https://github.com/neutrinolabs/xrdp/pull/1077#issuecomment-924514906,Add the utmp/wtmp support.,This should be redone after #1961. There's very few chance to get merged with current authentication architecture.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1077,2018-03-23T12:30:15Z,2021-09-22T01:46:37Z,2021-09-23T09:33:06Z,CLOSED,False,221,1,8,https://github.com/moobyfr,Wtmp,16,[],https://github.com/neutrinolabs/xrdp/pull/1077,https://github.com/matt335672,13,https://github.com/neutrinolabs/xrdp/pull/1077#issuecomment-925649637,Add the utmp/wtmp support.,"Anyone following this may find this comment useful, particularly on Red Hat and derivatives.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1078,2018-03-23T18:41:06Z,2018-03-27T03:42:53Z,2018-03-27T03:42:53Z,MERGED,True,13,2,4,https://github.com/boppbo,instfiles: Add pam.d config for arch linux.,2,[],https://github.com/neutrinolabs/xrdp/pull/1078,https://github.com/boppbo,1,https://github.com/neutrinolabs/xrdp/pull/1078,"system-auth didn't work for gnome under arch linux.
According to https://wiki.archlinux.org/index.php/PAM#PAM_base-stack system-remote-login seemed to be the right choice. Works for gnome at least.","system-auth didn't work for gnome under arch linux.
According to https://wiki.archlinux.org/index.php/PAM#PAM_base-stack system-remote-login seemed to be the right choice. Works for gnome at least.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1078,2018-03-23T18:41:06Z,2018-03-27T03:42:53Z,2018-03-27T03:42:53Z,MERGED,True,13,2,4,https://github.com/boppbo,instfiles: Add pam.d config for arch linux.,2,[],https://github.com/neutrinolabs/xrdp/pull/1078,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1078#issuecomment-375888146,"system-auth didn't work for gnome under arch linux.
According to https://wiki.archlinux.org/index.php/PAM#PAM_base-stack system-remote-login seemed to be the right choice. Works for gnome at least.",Also modify configure.ac  and instfiles/pam.d/mkpamrules to fully care Arch.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1078,2018-03-23T18:41:06Z,2018-03-27T03:42:53Z,2018-03-27T03:42:53Z,MERGED,True,13,2,4,https://github.com/boppbo,instfiles: Add pam.d config for arch linux.,2,[],https://github.com/neutrinolabs/xrdp/pull/1078,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/1078#issuecomment-375888183,"system-auth didn't work for gnome under arch linux.
According to https://wiki.archlinux.org/index.php/PAM#PAM_base-stack system-remote-login seemed to be the right choice. Works for gnome at least.","Ah, mkpamrules already modified.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1078,2018-03-23T18:41:06Z,2018-03-27T03:42:53Z,2018-03-27T03:42:53Z,MERGED,True,13,2,4,https://github.com/boppbo,instfiles: Add pam.d config for arch linux.,2,[],https://github.com/neutrinolabs/xrdp/pull/1078,https://github.com/boppbo,4,https://github.com/neutrinolabs/xrdp/pull/1078#issuecomment-375895113,"system-auth didn't work for gnome under arch linux.
According to https://wiki.archlinux.org/index.php/PAM#PAM_base-stack system-remote-login seemed to be the right choice. Works for gnome at least.",I only found it in the description for the possible values. Was this the correct place? Furthermore the macos option was missing in the description. So I added it too,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1078,2018-03-23T18:41:06Z,2018-03-27T03:42:53Z,2018-03-27T03:42:53Z,MERGED,True,13,2,4,https://github.com/boppbo,instfiles: Add pam.d config for arch linux.,2,[],https://github.com/neutrinolabs/xrdp/pull/1078,https://github.com/metalefty,5,https://github.com/neutrinolabs/xrdp/pull/1078#issuecomment-375897697,"system-auth didn't work for gnome under arch linux.
According to https://wiki.archlinux.org/index.php/PAM#PAM_base-stack system-remote-login seemed to be the right choice. Works for gnome at least.","Yes, that's the place.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1078,2018-03-23T18:41:06Z,2018-03-27T03:42:53Z,2018-03-27T03:42:53Z,MERGED,True,13,2,4,https://github.com/boppbo,instfiles: Add pam.d config for arch linux.,2,[],https://github.com/neutrinolabs/xrdp/pull/1078,https://github.com/boppbo,6,https://github.com/neutrinolabs/xrdp/pull/1078#issuecomment-375974113,"system-auth didn't work for gnome under arch linux.
According to https://wiki.archlinux.org/index.php/PAM#PAM_base-stack system-remote-login seemed to be the right choice. Works for gnome at least.",Anything else missing for merge?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1081,2018-03-26T02:15:10Z,2018-03-26T04:24:51Z,2018-03-26T06:15:17Z,MERGED,True,45,12,4,https://github.com/metalefty,Prepare release for v0.9.6,3,[],https://github.com/neutrinolabs/xrdp/pull/1081,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1081,Update NEWS and README.,Update NEWS and README.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1082,2018-03-26T12:39:14Z,2018-03-27T04:45:59Z,2018-03-27T04:45:59Z,MERGED,True,8,4,1,https://github.com/ferseiti,Corrected endianness detection on ppc64el.,1,[],https://github.com/neutrinolabs/xrdp/pull/1082,https://github.com/ferseiti,1,https://github.com/neutrinolabs/xrdp/pull/1082,"In common/arch.h, the endianness detection considers all powerpc
architectures as big endian. Since that is not true for ppc64el, I
added a verification that checks other preprocessor macros, only for
ppc cases.
Signed-off-by: Fernando Seiti Furusato ferseiti@gmail.com","In common/arch.h, the endianness detection considers all powerpc
architectures as big endian. Since that is not true for ppc64el, I
added a verification that checks other preprocessor macros, only for
ppc cases.
Signed-off-by: Fernando Seiti Furusato ferseiti@gmail.com",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1082,2018-03-26T12:39:14Z,2018-03-27T04:45:59Z,2018-03-27T04:45:59Z,MERGED,True,8,4,1,https://github.com/ferseiti,Corrected endianness detection on ppc64el.,1,[],https://github.com/neutrinolabs/xrdp/pull/1082,https://github.com/ferseiti,2,https://github.com/neutrinolabs/xrdp/pull/1082#issuecomment-376158610,"In common/arch.h, the endianness detection considers all powerpc
architectures as big endian. Since that is not true for ppc64el, I
added a verification that checks other preprocessor macros, only for
ppc cases.
Signed-off-by: Fernando Seiti Furusato ferseiti@gmail.com","This patch corrects an error ""endian wrong, edit arch.h"" when running xrdp on a ppc64el machine.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1082,2018-03-26T12:39:14Z,2018-03-27T04:45:59Z,2018-03-27T04:45:59Z,MERGED,True,8,4,1,https://github.com/ferseiti,Corrected endianness detection on ppc64el.,1,[],https://github.com/neutrinolabs/xrdp/pull/1082,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/1082#issuecomment-376169004,"In common/arch.h, the endianness detection considers all powerpc
architectures as big endian. Since that is not true for ppc64el, I
added a verification that checks other preprocessor macros, only for
ppc cases.
Signed-off-by: Fernando Seiti Furusato ferseiti@gmail.com",Good catch. I remember PPC is bi-endian. Thanks!,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1087,2018-03-30T17:52:18Z,,2018-10-19T04:33:22Z,OPEN,False,170,43,28,https://github.com/metalefty,Fix g_time3() overflow,8,[],https://github.com/neutrinolabs/xrdp/pull/1087,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1087,"CC: @moobyfr
g_time3() returns epoch time in msec. However, return type is int. The maximum value of signed int is 2147483647. Current epoch time is around 1522431329. Only 30% room remained. epoch time * 1000 overflows. To handle epoch time in msec properly, the container should have 64 bit size.
First of all, I made a test for g_time*() function.
How to test:
$ ./bootstrap && ./configure && make 
$ tests/common/os_calls/g_time

Expected
$ tests/common/os_calls/g_time
g_time1()        =       1522431329 [ sec] (epoch time)
g_time1() * 1000 =    1522431329000 [msec] (epoch time)
g_time2()        =       1011875170 [msec] (since machine was started)
g_time3()        =    1522431329792 [msec] (epoch time in msec)

Testing...
All tests passed!

Actual
$ tests/common/os_calls/g_time
g_time1()        =       1522431461 [ sec] (epoch time)
g_time1() * 1000 =    1522431461000 [msec] (epoch time)
g_time2()        =       1012043250 [msec] (since machine was started)
g_time3()        =       2013038323 [msec] (epoch time in msec)

Testing...
Assertion failed: (gTime3 >= gTime1 * 1000), function main, file g_time.c, line 58.
zsh: abort (core dumped)  tests/common/os_calls/g_time

Fix
g_time*() should be long long. I'll make a fix in addition to this PR branch. Please review the test code first.","CC: @moobyfr
g_time3() returns epoch time in msec. However, return type is int. The maximum value of signed int is 2147483647. Current epoch time is around 1522431329. Only 30% room remained. epoch time * 1000 overflows. To handle epoch time in msec properly, the container should have 64 bit size.
First of all, I made a test for g_time*() function.
How to test:
$ ./bootstrap && ./configure && make 
$ tests/common/os_calls/g_time

Expected
$ tests/common/os_calls/g_time
g_time1()        =       1522431329 [ sec] (epoch time)
g_time1() * 1000 =    1522431329000 [msec] (epoch time)
g_time2()        =       1011875170 [msec] (since machine was started)
g_time3()        =    1522431329792 [msec] (epoch time in msec)

Testing...
All tests passed!

Actual
$ tests/common/os_calls/g_time
g_time1()        =       1522431461 [ sec] (epoch time)
g_time1() * 1000 =    1522431461000 [msec] (epoch time)
g_time2()        =       1012043250 [msec] (since machine was started)
g_time3()        =       2013038323 [msec] (epoch time in msec)

Testing...
Assertion failed: (gTime3 >= gTime1 * 1000), function main, file g_time.c, line 58.
zsh: abort (core dumped)  tests/common/os_calls/g_time

Fix
g_time*() should be long long. I'll make a fix in addition to this PR branch. Please review the test code first.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1087,2018-03-30T17:52:18Z,,2018-10-19T04:33:22Z,OPEN,False,170,43,28,https://github.com/metalefty,Fix g_time3() overflow,8,[],https://github.com/neutrinolabs/xrdp/pull/1087,https://github.com/jsorg71,2,https://github.com/neutrinolabs/xrdp/pull/1087#issuecomment-377629819,"CC: @moobyfr
g_time3() returns epoch time in msec. However, return type is int. The maximum value of signed int is 2147483647. Current epoch time is around 1522431329. Only 30% room remained. epoch time * 1000 overflows. To handle epoch time in msec properly, the container should have 64 bit size.
First of all, I made a test for g_time*() function.
How to test:
$ ./bootstrap && ./configure && make 
$ tests/common/os_calls/g_time

Expected
$ tests/common/os_calls/g_time
g_time1()        =       1522431329 [ sec] (epoch time)
g_time1() * 1000 =    1522431329000 [msec] (epoch time)
g_time2()        =       1011875170 [msec] (since machine was started)
g_time3()        =    1522431329792 [msec] (epoch time in msec)

Testing...
All tests passed!

Actual
$ tests/common/os_calls/g_time
g_time1()        =       1522431461 [ sec] (epoch time)
g_time1() * 1000 =    1522431461000 [msec] (epoch time)
g_time2()        =       1012043250 [msec] (since machine was started)
g_time3()        =       2013038323 [msec] (epoch time in msec)

Testing...
Assertion failed: (gTime3 >= gTime1 * 1000), function main, file g_time.c, line 58.
zsh: abort (core dumped)  tests/common/os_calls/g_time

Fix
g_time*() should be long long. I'll make a fix in addition to this PR branch. Please review the test code first.","I think in tests/common/os_calls/g_time.c, before include os_calls.h you need to include config_ac.h",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1087,2018-03-30T17:52:18Z,,2018-10-19T04:33:22Z,OPEN,False,170,43,28,https://github.com/metalefty,Fix g_time3() overflow,8,[],https://github.com/neutrinolabs/xrdp/pull/1087,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/1087#issuecomment-378083726,"CC: @moobyfr
g_time3() returns epoch time in msec. However, return type is int. The maximum value of signed int is 2147483647. Current epoch time is around 1522431329. Only 30% room remained. epoch time * 1000 overflows. To handle epoch time in msec properly, the container should have 64 bit size.
First of all, I made a test for g_time*() function.
How to test:
$ ./bootstrap && ./configure && make 
$ tests/common/os_calls/g_time

Expected
$ tests/common/os_calls/g_time
g_time1()        =       1522431329 [ sec] (epoch time)
g_time1() * 1000 =    1522431329000 [msec] (epoch time)
g_time2()        =       1011875170 [msec] (since machine was started)
g_time3()        =    1522431329792 [msec] (epoch time in msec)

Testing...
All tests passed!

Actual
$ tests/common/os_calls/g_time
g_time1()        =       1522431461 [ sec] (epoch time)
g_time1() * 1000 =    1522431461000 [msec] (epoch time)
g_time2()        =       1012043250 [msec] (since machine was started)
g_time3()        =       2013038323 [msec] (epoch time in msec)

Testing...
Assertion failed: (gTime3 >= gTime1 * 1000), function main, file g_time.c, line 58.
zsh: abort (core dumped)  tests/common/os_calls/g_time

Fix
g_time*() should be long long. I'll make a fix in addition to this PR branch. Please review the test code first.","Indeed, thanks.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1087,2018-03-30T17:52:18Z,,2018-10-19T04:33:22Z,OPEN,False,170,43,28,https://github.com/metalefty,Fix g_time3() overflow,8,[],https://github.com/neutrinolabs/xrdp/pull/1087,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/1087#issuecomment-378137545,"CC: @moobyfr
g_time3() returns epoch time in msec. However, return type is int. The maximum value of signed int is 2147483647. Current epoch time is around 1522431329. Only 30% room remained. epoch time * 1000 overflows. To handle epoch time in msec properly, the container should have 64 bit size.
First of all, I made a test for g_time*() function.
How to test:
$ ./bootstrap && ./configure && make 
$ tests/common/os_calls/g_time

Expected
$ tests/common/os_calls/g_time
g_time1()        =       1522431329 [ sec] (epoch time)
g_time1() * 1000 =    1522431329000 [msec] (epoch time)
g_time2()        =       1011875170 [msec] (since machine was started)
g_time3()        =    1522431329792 [msec] (epoch time in msec)

Testing...
All tests passed!

Actual
$ tests/common/os_calls/g_time
g_time1()        =       1522431461 [ sec] (epoch time)
g_time1() * 1000 =    1522431461000 [msec] (epoch time)
g_time2()        =       1012043250 [msec] (since machine was started)
g_time3()        =       2013038323 [msec] (epoch time in msec)

Testing...
Assertion failed: (gTime3 >= gTime1 * 1000), function main, file g_time.c, line 58.
zsh: abort (core dumped)  tests/common/os_calls/g_time

Fix
g_time*() should be long long. I'll make a fix in addition to this PR branch. Please review the test code first.",Fixed Travis CI.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1087,2018-03-30T17:52:18Z,,2018-10-19T04:33:22Z,OPEN,False,170,43,28,https://github.com/metalefty,Fix g_time3() overflow,8,[],https://github.com/neutrinolabs/xrdp/pull/1087,https://github.com/metalefty,5,https://github.com/neutrinolabs/xrdp/pull/1087#issuecomment-378203228,"CC: @moobyfr
g_time3() returns epoch time in msec. However, return type is int. The maximum value of signed int is 2147483647. Current epoch time is around 1522431329. Only 30% room remained. epoch time * 1000 overflows. To handle epoch time in msec properly, the container should have 64 bit size.
First of all, I made a test for g_time*() function.
How to test:
$ ./bootstrap && ./configure && make 
$ tests/common/os_calls/g_time

Expected
$ tests/common/os_calls/g_time
g_time1()        =       1522431329 [ sec] (epoch time)
g_time1() * 1000 =    1522431329000 [msec] (epoch time)
g_time2()        =       1011875170 [msec] (since machine was started)
g_time3()        =    1522431329792 [msec] (epoch time in msec)

Testing...
All tests passed!

Actual
$ tests/common/os_calls/g_time
g_time1()        =       1522431461 [ sec] (epoch time)
g_time1() * 1000 =    1522431461000 [msec] (epoch time)
g_time2()        =       1012043250 [msec] (since machine was started)
g_time3()        =       2013038323 [msec] (epoch time in msec)

Testing...
Assertion failed: (gTime3 >= gTime1 * 1000), function main, file g_time.c, line 58.
zsh: abort (core dumped)  tests/common/os_calls/g_time

Fix
g_time*() should be long long. I'll make a fix in addition to this PR branch. Please review the test code first.","@jsorg71 @speidy @moobyfr
Done. Now unit tests, only g_time so var, is run by Travis. Can you review?
g_time1() still returns signed int.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1087,2018-03-30T17:52:18Z,,2018-10-19T04:33:22Z,OPEN,False,170,43,28,https://github.com/metalefty,Fix g_time3() overflow,8,[],https://github.com/neutrinolabs/xrdp/pull/1087,https://github.com/speidy,6,https://github.com/neutrinolabs/xrdp/pull/1087#issuecomment-378285950,"CC: @moobyfr
g_time3() returns epoch time in msec. However, return type is int. The maximum value of signed int is 2147483647. Current epoch time is around 1522431329. Only 30% room remained. epoch time * 1000 overflows. To handle epoch time in msec properly, the container should have 64 bit size.
First of all, I made a test for g_time*() function.
How to test:
$ ./bootstrap && ./configure && make 
$ tests/common/os_calls/g_time

Expected
$ tests/common/os_calls/g_time
g_time1()        =       1522431329 [ sec] (epoch time)
g_time1() * 1000 =    1522431329000 [msec] (epoch time)
g_time2()        =       1011875170 [msec] (since machine was started)
g_time3()        =    1522431329792 [msec] (epoch time in msec)

Testing...
All tests passed!

Actual
$ tests/common/os_calls/g_time
g_time1()        =       1522431461 [ sec] (epoch time)
g_time1() * 1000 =    1522431461000 [msec] (epoch time)
g_time2()        =       1012043250 [msec] (since machine was started)
g_time3()        =       2013038323 [msec] (epoch time in msec)

Testing...
Assertion failed: (gTime3 >= gTime1 * 1000), function main, file g_time.c, line 58.
zsh: abort (core dumped)  tests/common/os_calls/g_time

Fix
g_time*() should be long long. I'll make a fix in addition to this PR branch. Please review the test code first.","i'm not sure about that change. while it ""solves"" the truncation issue its not precise enough.
sizeof(time_t) == 4 on x86 machines, i belive it is also the case on mips, ppc archs.
sizeof(time_t) == 8 on x86-64 machines.
while sizeof(long long) == 8 anywhere.
we shall count seconds using time_t and just store the remainder in micro seconds using useconds_t. This keeps our sources 100% portable.
anyhow i'm not sure if we care about the resolution anywhere.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1087,2018-03-30T17:52:18Z,,2018-10-19T04:33:22Z,OPEN,False,170,43,28,https://github.com/metalefty,Fix g_time3() overflow,8,[],https://github.com/neutrinolabs/xrdp/pull/1087,https://github.com/metalefty,7,https://github.com/neutrinolabs/xrdp/pull/1087#issuecomment-378312274,"CC: @moobyfr
g_time3() returns epoch time in msec. However, return type is int. The maximum value of signed int is 2147483647. Current epoch time is around 1522431329. Only 30% room remained. epoch time * 1000 overflows. To handle epoch time in msec properly, the container should have 64 bit size.
First of all, I made a test for g_time*() function.
How to test:
$ ./bootstrap && ./configure && make 
$ tests/common/os_calls/g_time

Expected
$ tests/common/os_calls/g_time
g_time1()        =       1522431329 [ sec] (epoch time)
g_time1() * 1000 =    1522431329000 [msec] (epoch time)
g_time2()        =       1011875170 [msec] (since machine was started)
g_time3()        =    1522431329792 [msec] (epoch time in msec)

Testing...
All tests passed!

Actual
$ tests/common/os_calls/g_time
g_time1()        =       1522431461 [ sec] (epoch time)
g_time1() * 1000 =    1522431461000 [msec] (epoch time)
g_time2()        =       1012043250 [msec] (since machine was started)
g_time3()        =       2013038323 [msec] (epoch time in msec)

Testing...
Assertion failed: (gTime3 >= gTime1 * 1000), function main, file g_time.c, line 58.
zsh: abort (core dumped)  tests/common/os_calls/g_time

Fix
g_time*() should be long long. I'll make a fix in addition to this PR branch. Please review the test code first.","Please note g_time3() is used almost only for logs. Just for recording timestamps in msec to the log (to stdout). I intend to record the correct timestamps in the log, not to cause overflow. Other use case of g_time3()  is to get time diff in trans_connect() in common/trans.c
We already using timeval structure, time_t for seconds and suseconds_t for microseconds, in most places.  Do you mean time diff in trans_connect() should be measured using timeval  like done in xorg/tests/xdemo/xdemo.c?
/* xorg/tests/xdemo/xdemo.c: */
uint32_t time_elapsed_ms(struct timeval tv)
{
    struct timeval  tv_now;
    uint32_t        dur;

    gettimeofday(&tv_now, NULL);
    dur = ((tv_now.tv_sec - tv.tv_sec) * 1000) + ((tv_now.tv_usec - tv.tv_usec) / 1000);
    return dur;
}

uint32_t time_elapsed_us(struct timeval tv)
{
    struct timeval  tv_now;
    uint32_t        dur;

    gettimeofday(&tv_now, NULL);
    dur = ((tv_now.tv_sec - tv.tv_sec) * 1000000) + (tv_now.tv_usec - tv.tv_usec);
    return dur;
}",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1087,2018-03-30T17:52:18Z,,2018-10-19T04:33:22Z,OPEN,False,170,43,28,https://github.com/metalefty,Fix g_time3() overflow,8,[],https://github.com/neutrinolabs/xrdp/pull/1087,https://github.com/moobyfr,8,https://github.com/neutrinolabs/xrdp/pull/1087#issuecomment-378480725,"CC: @moobyfr
g_time3() returns epoch time in msec. However, return type is int. The maximum value of signed int is 2147483647. Current epoch time is around 1522431329. Only 30% room remained. epoch time * 1000 overflows. To handle epoch time in msec properly, the container should have 64 bit size.
First of all, I made a test for g_time*() function.
How to test:
$ ./bootstrap && ./configure && make 
$ tests/common/os_calls/g_time

Expected
$ tests/common/os_calls/g_time
g_time1()        =       1522431329 [ sec] (epoch time)
g_time1() * 1000 =    1522431329000 [msec] (epoch time)
g_time2()        =       1011875170 [msec] (since machine was started)
g_time3()        =    1522431329792 [msec] (epoch time in msec)

Testing...
All tests passed!

Actual
$ tests/common/os_calls/g_time
g_time1()        =       1522431461 [ sec] (epoch time)
g_time1() * 1000 =    1522431461000 [msec] (epoch time)
g_time2()        =       1012043250 [msec] (since machine was started)
g_time3()        =       2013038323 [msec] (epoch time in msec)

Testing...
Assertion failed: (gTime3 >= gTime1 * 1000), function main, file g_time.c, line 58.
zsh: abort (core dumped)  tests/common/os_calls/g_time

Fix
g_time*() should be long long. I'll make a fix in addition to this PR branch. Please review the test code first.","About the PR itself, i'm ok.
For my initial need, I must fill utmp with a time_t entry. I'm not sure casting time_t to long long to time_t is the best way. But basically, the precision for utmp isn't probably needed to be the microsecond. so I can still use g_time3 or make a g_time4() which return a time_t",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1087,2018-03-30T17:52:18Z,,2018-10-19T04:33:22Z,OPEN,False,170,43,28,https://github.com/metalefty,Fix g_time3() overflow,8,[],https://github.com/neutrinolabs/xrdp/pull/1087,https://github.com/speidy,9,https://github.com/neutrinolabs/xrdp/pull/1087#issuecomment-378835970,"CC: @moobyfr
g_time3() returns epoch time in msec. However, return type is int. The maximum value of signed int is 2147483647. Current epoch time is around 1522431329. Only 30% room remained. epoch time * 1000 overflows. To handle epoch time in msec properly, the container should have 64 bit size.
First of all, I made a test for g_time*() function.
How to test:
$ ./bootstrap && ./configure && make 
$ tests/common/os_calls/g_time

Expected
$ tests/common/os_calls/g_time
g_time1()        =       1522431329 [ sec] (epoch time)
g_time1() * 1000 =    1522431329000 [msec] (epoch time)
g_time2()        =       1011875170 [msec] (since machine was started)
g_time3()        =    1522431329792 [msec] (epoch time in msec)

Testing...
All tests passed!

Actual
$ tests/common/os_calls/g_time
g_time1()        =       1522431461 [ sec] (epoch time)
g_time1() * 1000 =    1522431461000 [msec] (epoch time)
g_time2()        =       1012043250 [msec] (since machine was started)
g_time3()        =       2013038323 [msec] (epoch time in msec)

Testing...
Assertion failed: (gTime3 >= gTime1 * 1000), function main, file g_time.c, line 58.
zsh: abort (core dumped)  tests/common/os_calls/g_time

Fix
g_time*() should be long long. I'll make a fix in addition to this PR branch. Please review the test code first.","make a g_time4() which return a time_t

i don't think you should return non primitive type from os_calls.c",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1087,2018-03-30T17:52:18Z,,2018-10-19T04:33:22Z,OPEN,False,170,43,28,https://github.com/metalefty,Fix g_time3() overflow,8,[],https://github.com/neutrinolabs/xrdp/pull/1087,https://github.com/jsorg71,10,https://github.com/neutrinolabs/xrdp/pull/1087#issuecomment-378837429,"CC: @moobyfr
g_time3() returns epoch time in msec. However, return type is int. The maximum value of signed int is 2147483647. Current epoch time is around 1522431329. Only 30% room remained. epoch time * 1000 overflows. To handle epoch time in msec properly, the container should have 64 bit size.
First of all, I made a test for g_time*() function.
How to test:
$ ./bootstrap && ./configure && make 
$ tests/common/os_calls/g_time

Expected
$ tests/common/os_calls/g_time
g_time1()        =       1522431329 [ sec] (epoch time)
g_time1() * 1000 =    1522431329000 [msec] (epoch time)
g_time2()        =       1011875170 [msec] (since machine was started)
g_time3()        =    1522431329792 [msec] (epoch time in msec)

Testing...
All tests passed!

Actual
$ tests/common/os_calls/g_time
g_time1()        =       1522431461 [ sec] (epoch time)
g_time1() * 1000 =    1522431461000 [msec] (epoch time)
g_time2()        =       1012043250 [msec] (since machine was started)
g_time3()        =       2013038323 [msec] (epoch time in msec)

Testing...
Assertion failed: (gTime3 >= gTime1 * 1000), function main, file g_time.c, line 58.
zsh: abort (core dumped)  tests/common/os_calls/g_time

Fix
g_time*() should be long long. I'll make a fix in addition to this PR branch. Please review the test code first.",@metalefty The timex() functions are returning a time val in mssec or sec that is used to compare to a later call to timex() or just to log a time value.  Also the names are just ugly.  Free free to name new functions that can be accurate and return uint64_t if that is better.  We can depreciate these.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1096,2018-04-10T15:00:10Z,2018-04-13T05:49:26Z,2018-04-13T06:02:56Z,MERGED,True,68,24,4,https://github.com/metalefty,Show OpenSSL version to --version,3,[],https://github.com/neutrinolabs/xrdp/pull/1096,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1096,"If multiple versions of OpenSSL installed to the system, it is helpful to know which OpenSSL xrdp uses in case OpenSSL have vulnerability. Also, some cleanups and improvements.

add OpenSSL version to --version
use GitHub URL rather than xrdp.org, it should be more helpful
exit with error code when unknown CLI option given
show which CLI option is unknown to xrdp

--version
before
$ xrdp --version

xrdp: A Remote Desktop Protocol server.
Copyright (C) Jay Sorg 2004-2014
See http://www.xrdp.org for more information.
Version 0.9.5


after
$ xrdp --version
xrdp 0.9.6
  A Remote Desktop Protocol Server.
  Copyright (C) 2004-2018 Jay Sorg, Neutrino Labs, and all contributors.
  See https://github.com/neutrinolabs/xrdp for more information.

  Compiled with OpenSSL 1.0.2o  27 Mar 2018

--help
before
$ xrdp --help

xrdp: A Remote Desktop Protocol server.
Copyright (C) Jay Sorg 2004-2014
See http://www.xrdp.org for more information.

Usage: xrdp [options]
   -h, --help       show help
   -n, --nodaemon   don't fork into background
   -k, --kill       shut down xrdp
   -p, --port       tcp listen port
   -f, --fork       fork on new connection


after
$ xrdp --help
xrdp 0.9.6
  A Remote Desktop Protocol Server.
  Copyright (C) 2004-2018 Jay Sorg, Neutrino Labs, and all contributors.
  See https://github.com/neutrinolabs/xrdp for more information.

  Compiled with OpenSSL 1.0.2o  27 Mar 2018

Usage: xrdp [options]
   -h, --help       show help
   -n, --nodaemon   don't fork into background
   -k, --kill       shut down xrdp
   -p, --port       tcp listen port
   -f, --fork       fork on new connection

--unknown-option
before
$ xrdp --nodaemon --unknown-option; echo $?
Unknown Parameter
xrdp -h for help

0

after
$ xrdp --nodaemon --unknown-option; echo $?
xrdp 0.9.6
  A Remote Desktop Protocol Server.
  Copyright (C) 2004-2018 Jay Sorg, Neutrino Labs, and all contributors.
  See https://github.com/neutrinolabs/xrdp for more information.

  Compiled with OpenSSL 1.0.2o  27 Mar 2018

Usage: xrdp [options]
   -h, --help       show help
   -n, --nodaemon   don't fork into background
   -k, --kill       shut down xrdp
   -p, --port       tcp listen port
   -f, --fork       fork on new connection

Unknown option: --unknown-option
1","If multiple versions of OpenSSL installed to the system, it is helpful to know which OpenSSL xrdp uses in case OpenSSL have vulnerability. Also, some cleanups and improvements.

add OpenSSL version to --version
use GitHub URL rather than xrdp.org, it should be more helpful
exit with error code when unknown CLI option given
show which CLI option is unknown to xrdp

--version
before
$ xrdp --version

xrdp: A Remote Desktop Protocol server.
Copyright (C) Jay Sorg 2004-2014
See http://www.xrdp.org for more information.
Version 0.9.5


after
$ xrdp --version
xrdp 0.9.6
  A Remote Desktop Protocol Server.
  Copyright (C) 2004-2018 Jay Sorg, Neutrino Labs, and all contributors.
  See https://github.com/neutrinolabs/xrdp for more information.

  Compiled with OpenSSL 1.0.2o  27 Mar 2018

--help
before
$ xrdp --help

xrdp: A Remote Desktop Protocol server.
Copyright (C) Jay Sorg 2004-2014
See http://www.xrdp.org for more information.

Usage: xrdp [options]
   -h, --help       show help
   -n, --nodaemon   don't fork into background
   -k, --kill       shut down xrdp
   -p, --port       tcp listen port
   -f, --fork       fork on new connection


after
$ xrdp --help
xrdp 0.9.6
  A Remote Desktop Protocol Server.
  Copyright (C) 2004-2018 Jay Sorg, Neutrino Labs, and all contributors.
  See https://github.com/neutrinolabs/xrdp for more information.

  Compiled with OpenSSL 1.0.2o  27 Mar 2018

Usage: xrdp [options]
   -h, --help       show help
   -n, --nodaemon   don't fork into background
   -k, --kill       shut down xrdp
   -p, --port       tcp listen port
   -f, --fork       fork on new connection

--unknown-option
before
$ xrdp --nodaemon --unknown-option; echo $?
Unknown Parameter
xrdp -h for help

0

after
$ xrdp --nodaemon --unknown-option; echo $?
xrdp 0.9.6
  A Remote Desktop Protocol Server.
  Copyright (C) 2004-2018 Jay Sorg, Neutrino Labs, and all contributors.
  See https://github.com/neutrinolabs/xrdp for more information.

  Compiled with OpenSSL 1.0.2o  27 Mar 2018

Usage: xrdp [options]
   -h, --help       show help
   -n, --nodaemon   don't fork into background
   -k, --kill       shut down xrdp
   -p, --port       tcp listen port
   -f, --fork       fork on new connection

Unknown option: --unknown-option
1",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1096,2018-04-10T15:00:10Z,2018-04-13T05:49:26Z,2018-04-13T06:02:56Z,MERGED,True,68,24,4,https://github.com/metalefty,Show OpenSSL version to --version,3,[],https://github.com/neutrinolabs/xrdp/pull/1096,https://github.com/jsorg71,2,https://github.com/neutrinolabs/xrdp/pull/1096#issuecomment-380634371,"If multiple versions of OpenSSL installed to the system, it is helpful to know which OpenSSL xrdp uses in case OpenSSL have vulnerability. Also, some cleanups and improvements.

add OpenSSL version to --version
use GitHub URL rather than xrdp.org, it should be more helpful
exit with error code when unknown CLI option given
show which CLI option is unknown to xrdp

--version
before
$ xrdp --version

xrdp: A Remote Desktop Protocol server.
Copyright (C) Jay Sorg 2004-2014
See http://www.xrdp.org for more information.
Version 0.9.5


after
$ xrdp --version
xrdp 0.9.6
  A Remote Desktop Protocol Server.
  Copyright (C) 2004-2018 Jay Sorg, Neutrino Labs, and all contributors.
  See https://github.com/neutrinolabs/xrdp for more information.

  Compiled with OpenSSL 1.0.2o  27 Mar 2018

--help
before
$ xrdp --help

xrdp: A Remote Desktop Protocol server.
Copyright (C) Jay Sorg 2004-2014
See http://www.xrdp.org for more information.

Usage: xrdp [options]
   -h, --help       show help
   -n, --nodaemon   don't fork into background
   -k, --kill       shut down xrdp
   -p, --port       tcp listen port
   -f, --fork       fork on new connection


after
$ xrdp --help
xrdp 0.9.6
  A Remote Desktop Protocol Server.
  Copyright (C) 2004-2018 Jay Sorg, Neutrino Labs, and all contributors.
  See https://github.com/neutrinolabs/xrdp for more information.

  Compiled with OpenSSL 1.0.2o  27 Mar 2018

Usage: xrdp [options]
   -h, --help       show help
   -n, --nodaemon   don't fork into background
   -k, --kill       shut down xrdp
   -p, --port       tcp listen port
   -f, --fork       fork on new connection

--unknown-option
before
$ xrdp --nodaemon --unknown-option; echo $?
Unknown Parameter
xrdp -h for help

0

after
$ xrdp --nodaemon --unknown-option; echo $?
xrdp 0.9.6
  A Remote Desktop Protocol Server.
  Copyright (C) 2004-2018 Jay Sorg, Neutrino Labs, and all contributors.
  See https://github.com/neutrinolabs/xrdp for more information.

  Compiled with OpenSSL 1.0.2o  27 Mar 2018

Usage: xrdp [options]
   -h, --help       show help
   -n, --nodaemon   don't fork into background
   -k, --kill       shut down xrdp
   -p, --port       tcp listen port
   -f, --fork       fork on new connection

Unknown option: --unknown-option
1",+1 nice,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1096,2018-04-10T15:00:10Z,2018-04-13T05:49:26Z,2018-04-13T06:02:56Z,MERGED,True,68,24,4,https://github.com/metalefty,Show OpenSSL version to --version,3,[],https://github.com/neutrinolabs/xrdp/pull/1096,https://github.com/speidy,3,https://github.com/neutrinolabs/xrdp/pull/1096#issuecomment-381032838,"If multiple versions of OpenSSL installed to the system, it is helpful to know which OpenSSL xrdp uses in case OpenSSL have vulnerability. Also, some cleanups and improvements.

add OpenSSL version to --version
use GitHub URL rather than xrdp.org, it should be more helpful
exit with error code when unknown CLI option given
show which CLI option is unknown to xrdp

--version
before
$ xrdp --version

xrdp: A Remote Desktop Protocol server.
Copyright (C) Jay Sorg 2004-2014
See http://www.xrdp.org for more information.
Version 0.9.5


after
$ xrdp --version
xrdp 0.9.6
  A Remote Desktop Protocol Server.
  Copyright (C) 2004-2018 Jay Sorg, Neutrino Labs, and all contributors.
  See https://github.com/neutrinolabs/xrdp for more information.

  Compiled with OpenSSL 1.0.2o  27 Mar 2018

--help
before
$ xrdp --help

xrdp: A Remote Desktop Protocol server.
Copyright (C) Jay Sorg 2004-2014
See http://www.xrdp.org for more information.

Usage: xrdp [options]
   -h, --help       show help
   -n, --nodaemon   don't fork into background
   -k, --kill       shut down xrdp
   -p, --port       tcp listen port
   -f, --fork       fork on new connection


after
$ xrdp --help
xrdp 0.9.6
  A Remote Desktop Protocol Server.
  Copyright (C) 2004-2018 Jay Sorg, Neutrino Labs, and all contributors.
  See https://github.com/neutrinolabs/xrdp for more information.

  Compiled with OpenSSL 1.0.2o  27 Mar 2018

Usage: xrdp [options]
   -h, --help       show help
   -n, --nodaemon   don't fork into background
   -k, --kill       shut down xrdp
   -p, --port       tcp listen port
   -f, --fork       fork on new connection

--unknown-option
before
$ xrdp --nodaemon --unknown-option; echo $?
Unknown Parameter
xrdp -h for help

0

after
$ xrdp --nodaemon --unknown-option; echo $?
xrdp 0.9.6
  A Remote Desktop Protocol Server.
  Copyright (C) 2004-2018 Jay Sorg, Neutrino Labs, and all contributors.
  See https://github.com/neutrinolabs/xrdp for more information.

  Compiled with OpenSSL 1.0.2o  27 Mar 2018

Usage: xrdp [options]
   -h, --help       show help
   -n, --nodaemon   don't fork into background
   -k, --kill       shut down xrdp
   -p, --port       tcp listen port
   -f, --fork       fork on new connection

Unknown option: --unknown-option
1",+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1097,2018-04-12T00:10:53Z,2018-04-12T00:35:26Z,2018-04-12T00:35:26Z,CLOSED,False,11,0,1,https://github.com/jsorg71,xrdp_encoder leaks,2,[],https://github.com/neutrinolabs/xrdp/pull/1097,https://github.com/jsorg71,1,https://github.com/neutrinolabs/xrdp/pull/1097,"when running xrdp in thread mode, these leaks can add up","when running xrdp in thread mode, these leaks can add up",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1097,2018-04-12T00:10:53Z,2018-04-12T00:35:26Z,2018-04-12T00:35:26Z,CLOSED,False,11,0,1,https://github.com/jsorg71,xrdp_encoder leaks,2,[],https://github.com/neutrinolabs/xrdp/pull/1097,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1097#issuecomment-380635250,"when running xrdp in thread mode, these leaks can add up",I think d11ee31 already merged as a64cb81.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1097,2018-04-12T00:10:53Z,2018-04-12T00:35:26Z,2018-04-12T00:35:26Z,CLOSED,False,11,0,1,https://github.com/jsorg71,xrdp_encoder leaks,2,[],https://github.com/neutrinolabs/xrdp/pull/1097,https://github.com/jsorg71,3,https://github.com/neutrinolabs/xrdp/pull/1097#issuecomment-380637282,"when running xrdp in thread mode, these leaks can add up","opps, ok I'll delete my branch",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1097,2018-04-12T00:10:53Z,2018-04-12T00:35:26Z,2018-04-12T00:35:26Z,CLOSED,False,11,0,1,https://github.com/jsorg71,xrdp_encoder leaks,2,[],https://github.com/neutrinolabs/xrdp/pull/1097,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/1097#issuecomment-380637445,"when running xrdp in thread mode, these leaks can add up",And the other commit is also merged as acd05f3.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1098,2018-04-12T00:18:24Z,2018-04-12T00:36:25Z,2018-04-12T03:29:10Z,CLOSED,False,5,1,1,https://github.com/jsorg71,fix for zombie processes sometimes appearing,1,[],https://github.com/neutrinolabs/xrdp/pull/1098,https://github.com/jsorg71,1,https://github.com/neutrinolabs/xrdp/pull/1098,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1098,2018-04-12T00:18:24Z,2018-04-12T00:36:25Z,2018-04-12T03:29:10Z,CLOSED,False,5,1,1,https://github.com/jsorg71,fix for zombie processes sometimes appearing,1,[],https://github.com/neutrinolabs/xrdp/pull/1098,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1098#issuecomment-380636690,,"Already merged as f763cb3.
Related to #987. That's the disadvantage of ""Rebase and merge"". The merged commit and the comit in your local branch has different commit hash. We cannot know if the commit merged or not by commit hash. This is the one of the reasons why I'd like to turn back to merge commits.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1098,2018-04-12T00:18:24Z,2018-04-12T00:36:25Z,2018-04-12T03:29:10Z,CLOSED,False,5,1,1,https://github.com/jsorg71,fix for zombie processes sometimes appearing,1,[],https://github.com/neutrinolabs/xrdp/pull/1098,https://github.com/jsorg71,3,https://github.com/neutrinolabs/xrdp/pull/1098#issuecomment-380639444,,"That is a good point although my house keeping is to blame here.
I'm ok with either way.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1098,2018-04-12T00:18:24Z,2018-04-12T00:36:25Z,2018-04-12T03:29:10Z,CLOSED,False,5,1,1,https://github.com/jsorg71,fix for zombie processes sometimes appearing,1,[],https://github.com/neutrinolabs/xrdp/pull/1098,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/1098#issuecomment-380645349,,"Maybe you're warned like this when you delete your branch?
error: The branch 'foobar' is not fully merged.
If you are sure you want to delete it, run 'git branch -D foobar'.

This is the side effect of rebase merging. git also cannot detect if the branch is merged as well as human because of different commit hashes.
@jsorg71 could you re-enable creating merge commit in repository config?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1098,2018-04-12T00:18:24Z,2018-04-12T00:36:25Z,2018-04-12T03:29:10Z,CLOSED,False,5,1,1,https://github.com/jsorg71,fix for zombie processes sometimes appearing,1,[],https://github.com/neutrinolabs/xrdp/pull/1098,https://github.com/jsorg71,5,https://github.com/neutrinolabs/xrdp/pull/1098#issuecomment-380666240,,Ok done.  I'll miss the clean easy to follow history.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1103,2018-04-17T02:01:43Z,2018-04-17T23:32:09Z,2018-12-14T01:49:20Z,MERGED,True,1,1,1,https://github.com/metalefty,docs: '!' is no longer a comment out symbol,1,[],https://github.com/neutrinolabs/xrdp/pull/1103,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1103,Removed in #1040.,Removed in #1040.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1103,2018-04-17T02:01:43Z,2018-04-17T23:32:09Z,2018-12-14T01:49:20Z,MERGED,True,1,1,1,https://github.com/metalefty,docs: '!' is no longer a comment out symbol,1,[],https://github.com/neutrinolabs/xrdp/pull/1103,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1103#issuecomment-382190776,Removed in #1040.,"Simple enough, merging.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1104,2018-04-17T04:55:43Z,2018-04-18T16:46:31Z,2018-04-18T16:46:40Z,MERGED,True,1,19419,89,https://github.com/metalefty,Remove x11rdp,2,[],https://github.com/neutrinolabs/xrdp/pull/1104,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1104,"As well as we did for xorgxrdp, I suggest removing x11rdp from xrdp repository.  This is a first small step to deprecate x11rdp.
I've created a separated repo for x11rdp: https://github.com/neutrinolabs/x11rdp","As well as we did for xorgxrdp, I suggest removing x11rdp from xrdp repository.  This is a first small step to deprecate x11rdp.
I've created a separated repo for x11rdp: https://github.com/neutrinolabs/x11rdp",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1104,2018-04-17T04:55:43Z,2018-04-18T16:46:31Z,2018-04-18T16:46:40Z,MERGED,True,1,19419,89,https://github.com/metalefty,Remove x11rdp,2,[],https://github.com/neutrinolabs/xrdp/pull/1104,https://github.com/speidy,2,https://github.com/neutrinolabs/xrdp/pull/1104#issuecomment-382260976,"As well as we did for xorgxrdp, I suggest removing x11rdp from xrdp repository.  This is a first small step to deprecate x11rdp.
I've created a separated repo for x11rdp: https://github.com/neutrinolabs/x11rdp",+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1104,2018-04-17T04:55:43Z,2018-04-18T16:46:31Z,2018-04-18T16:46:40Z,MERGED,True,1,19419,89,https://github.com/metalefty,Remove x11rdp,2,[],https://github.com/neutrinolabs/xrdp/pull/1104,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/1104#issuecomment-382451560,"As well as we did for xorgxrdp, I suggest removing x11rdp from xrdp repository.  This is a first small step to deprecate x11rdp.
I've created a separated repo for x11rdp: https://github.com/neutrinolabs/x11rdp",Jay also +1 ed in gitter chat.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1104,2018-04-17T04:55:43Z,2018-04-18T16:46:31Z,2018-04-18T16:46:40Z,MERGED,True,1,19419,89,https://github.com/metalefty,Remove x11rdp,2,[],https://github.com/neutrinolabs/xrdp/pull/1104,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/1104#issuecomment-382453257,"As well as we did for xorgxrdp, I suggest removing x11rdp from xrdp repository.  This is a first small step to deprecate x11rdp.
I've created a separated repo for x11rdp: https://github.com/neutrinolabs/x11rdp",Pulling the trigger.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1107,2018-04-18T16:23:11Z,2018-04-19T23:38:16Z,2018-04-19T23:38:23Z,MERGED,True,1,1,1,https://github.com/metalefty,sesman: Update Xorg help comment for Arch Linux,1,[],https://github.com/neutrinolabs/xrdp/pull/1107,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1107,"As reported in #1106, Arch Linux looks to me like using Xorg wrapper now.","As reported in #1106, Arch Linux looks to me like using Xorg wrapper now.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1107,2018-04-18T16:23:11Z,2018-04-19T23:38:16Z,2018-04-19T23:38:23Z,MERGED,True,1,1,1,https://github.com/metalefty,sesman: Update Xorg help comment for Arch Linux,1,[],https://github.com/neutrinolabs/xrdp/pull/1107,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1107#issuecomment-382608603,"As reported in #1106, Arch Linux looks to me like using Xorg wrapper now.",@nopyhe has confirmed param=/usr/lib/xorg-server/Xorg works.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1108,2018-04-19T06:01:11Z,2018-04-22T04:45:19Z,2018-04-22T04:45:19Z,MERGED,True,6,3,1,https://github.com/aiden0z,sesrun support start other session based on session_code argument,1,[],https://github.com/neutrinolabs/xrdp/pull/1108,https://github.com/aiden0z,1,https://github.com/neutrinolabs/xrdp/pull/1108,"Support sesrun to start different session based on session_code argument, like sesrun <server> <username> <password> <width> <height> <bpp> <session_cod>.
Session code 0 for Xvnc, 10 for X11RDP, 20 for Xorg.","Support sesrun to start different session based on session_code argument, like sesrun <server> <username> <password> <width> <height> <bpp> <session_cod>.
Session code 0 for Xvnc, 10 for X11RDP, 20 for Xorg.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1108,2018-04-19T06:01:11Z,2018-04-22T04:45:19Z,2018-04-22T04:45:19Z,MERGED,True,6,3,1,https://github.com/aiden0z,sesrun support start other session based on session_code argument,1,[],https://github.com/neutrinolabs/xrdp/pull/1108,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1108#issuecomment-382625328,"Support sesrun to start different session based on session_code argument, like sesrun <server> <username> <password> <width> <height> <bpp> <session_cod>.
Session code 0 for Xvnc, 10 for X11RDP, 20 for Xorg.",Good work but can you remove the merge commit?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1108,2018-04-19T06:01:11Z,2018-04-22T04:45:19Z,2018-04-22T04:45:19Z,MERGED,True,6,3,1,https://github.com/aiden0z,sesrun support start other session based on session_code argument,1,[],https://github.com/neutrinolabs/xrdp/pull/1108,https://github.com/aiden0z,3,https://github.com/neutrinolabs/xrdp/pull/1108#issuecomment-383052234,"Support sesrun to start different session based on session_code argument, like sesrun <server> <username> <password> <width> <height> <bpp> <session_cod>.
Session code 0 for Xvnc, 10 for X11RDP, 20 for Xorg.",removed,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1108,2018-04-19T06:01:11Z,2018-04-22T04:45:19Z,2018-04-22T04:45:19Z,MERGED,True,6,3,1,https://github.com/aiden0z,sesrun support start other session based on session_code argument,1,[],https://github.com/neutrinolabs/xrdp/pull/1108,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/1108#issuecomment-383355114,"Support sesrun to start different session based on session_code argument, like sesrun <server> <username> <password> <width> <height> <bpp> <session_cod>.
Session code 0 for Xvnc, 10 for X11RDP, 20 for Xorg.","Thanks for your contribution. BTW, I'm planning to improve sesrun like we can do:
xrdp-sesrun --user foobar --type xvnc|xorgxrdp",True,"{'THUMBS_UP': ['https://github.com/aiden0z'], 'HOORAY': ['https://github.com/aiden0z']}"
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1118,2018-04-30T23:31:35Z,2018-05-02T22:33:03Z,2018-05-02T22:54:35Z,MERGED,True,25,0,1,https://github.com/jsorg71,echo configure summary,1,[],https://github.com/neutrinolabs/xrdp/pull/1118,https://github.com/jsorg71,1,https://github.com/neutrinolabs/xrdp/pull/1118,echo a summary of configure setting at the end on configure,echo a summary of configure setting at the end on configure,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1118,2018-04-30T23:31:35Z,2018-05-02T22:33:03Z,2018-05-02T22:54:35Z,MERGED,True,25,0,1,https://github.com/jsorg71,echo configure summary,1,[],https://github.com/neutrinolabs/xrdp/pull/1118,https://github.com/itamarjp,2,https://github.com/neutrinolabs/xrdp/pull/1118#issuecomment-385563577,echo a summary of configure setting at the end on configure,looks good.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1118,2018-04-30T23:31:35Z,2018-05-02T22:33:03Z,2018-05-02T22:54:35Z,MERGED,True,25,0,1,https://github.com/jsorg71,echo configure summary,1,[],https://github.com/neutrinolabs/xrdp/pull/1118,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/1118#issuecomment-385597778,echo a summary of configure setting at the end on configure,"strict_locations should print yes or no. confiure.ac needs to be brushed up. Regarding this PR, LGTM.
xrdp will be compiled with:

  mp3lame         no
  opus            no
  fdkaac          no
  jpeg            no
  turbo jpeg      no
  rfxcodec        yes
  painter         yes
  pixman          no
  fuse            no
  ipv6            no
  vsock           no
  pam             yes
  kerberos        no
  debug           no

  strict_locations
  prefix                  /usr/local
  exec_prefix             ${prefix}
  libdir                  ${exec_prefix}/lib
  bindir                  ${exec_prefix}/bin
  sysconfdir              /etc",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1118,2018-04-30T23:31:35Z,2018-05-02T22:33:03Z,2018-05-02T22:54:35Z,MERGED,True,25,0,1,https://github.com/jsorg71,echo configure summary,1,[],https://github.com/neutrinolabs/xrdp/pull/1118,https://github.com/speidy,4,https://github.com/neutrinolabs/xrdp/pull/1118#issuecomment-385598019,echo a summary of configure setting at the end on configure,+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1120,2018-05-03T14:45:59Z,2018-06-14T02:04:44Z,2018-07-19T07:24:02Z,MERGED,True,6,5,3,https://github.com/matt335672,Copy the PAM session environment for the reconnect script,1,[],https://github.com/neutrinolabs/xrdp/pull/1120,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1120,"In some environments, the reconnect script can benefit from access to environment variables set during the PAM session creation. For example, in a Kerberos-based environment, the reconnect script will need KRB5CCNAME to be set to make use of network services.","In some environments, the reconnect script can benefit from access to environment variables set during the PAM session creation. For example, in a Kerberos-based environment, the reconnect script will need KRB5CCNAME to be set to make use of network services.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1120,2018-05-03T14:45:59Z,2018-06-14T02:04:44Z,2018-07-19T07:24:02Z,MERGED,True,6,5,3,https://github.com/matt335672,Copy the PAM session environment for the reconnect script,1,[],https://github.com/neutrinolabs/xrdp/pull/1120,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1120#issuecomment-386861208,"In some environments, the reconnect script can benefit from access to environment variables set during the PAM session creation. For example, in a Kerberos-based environment, the reconnect script will need KRB5CCNAME to be set to make use of network services.","Thanks, I'll look at it. BTW, please always respect our coding standard.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1120,2018-05-03T14:45:59Z,2018-06-14T02:04:44Z,2018-07-19T07:24:02Z,MERGED,True,6,5,3,https://github.com/matt335672,Copy the PAM session environment for the reconnect script,1,[],https://github.com/neutrinolabs/xrdp/pull/1120,https://github.com/matt335672,3,https://github.com/neutrinolabs/xrdp/pull/1120#issuecomment-387426779,"In some environments, the reconnect script can benefit from access to environment variables set during the PAM session creation. For example, in a Kerberos-based environment, the reconnect script will need KRB5CCNAME to be set to make use of network services.","Apologies Metalefty - I'd missed the bit about spaces after commas.
I've not squashed the commits yet. Please let me know when you'd like this doing.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1120,2018-05-03T14:45:59Z,2018-06-14T02:04:44Z,2018-07-19T07:24:02Z,MERGED,True,6,5,3,https://github.com/matt335672,Copy the PAM session environment for the reconnect script,1,[],https://github.com/neutrinolabs/xrdp/pull/1120,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/1120#issuecomment-392852668,"In some environments, the reconnect script can benefit from access to environment variables set during the PAM session creation. For example, in a Kerberos-based environment, the reconnect script will need KRB5CCNAME to be set to make use of network services.","Sorry for delay. I was busy with other things. I'm still testing & looking at your PR.
BTW, squash it in this case!",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1120,2018-05-03T14:45:59Z,2018-06-14T02:04:44Z,2018-07-19T07:24:02Z,MERGED,True,6,5,3,https://github.com/matt335672,Copy the PAM session environment for the reconnect script,1,[],https://github.com/neutrinolabs/xrdp/pull/1120,https://github.com/matt335672,5,https://github.com/neutrinolabs/xrdp/pull/1120#issuecomment-393487257,"In some environments, the reconnect script can benefit from access to environment variables set during the PAM session creation. For example, in a Kerberos-based environment, the reconnect script will need KRB5CCNAME to be set to make use of network services.",squashed and rebased.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1126,2018-05-10T09:35:26Z,2018-05-12T03:28:58Z,2018-05-12T03:29:01Z,MERGED,True,2,1,1,https://github.com/metalefty,configure: set default value for enable_strict_locations,1,[],https://github.com/neutrinolabs/xrdp/pull/1126,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1126,"This change prints yes or no to configure summary introduced in #1118.
$ ./configure --prefix=/usr/local
xrdp will be compiled with:

  mp3lame         no
  opus            no
  fdkaac          no
  jpeg            no
  turbo jpeg      no
  rfxcodec        yes
  painter         yes
  pixman          no
  fuse            no
  ipv6            no
  vsock           no
  pam             yes
  kerberos        no
  debug           no

  strict_locations        no
  prefix                  /usr/local
  exec_prefix             ${prefix}
  libdir                  ${exec_prefix}/lib
  bindir                  ${exec_prefix}/bin
  sysconfdir              /etc

$ ./configure --prefix=/usr/local --enable-strict-locations

xrdp will be compiled with:

  mp3lame         no
  opus            no
  fdkaac          no
  jpeg            no
  turbo jpeg      no
  rfxcodec        yes
  painter         yes
  pixman          no
  fuse            no
  ipv6            no
  vsock           no
  pam             yes
  kerberos        no
  debug           no

  strict_locations        yes
  prefix                  /usr/local
  exec_prefix             ${prefix}
  libdir                  ${exec_prefix}/lib
  bindir                  ${exec_prefix}/bin
  sysconfdir              ${prefix}/etc","This change prints yes or no to configure summary introduced in #1118.
$ ./configure --prefix=/usr/local
xrdp will be compiled with:

  mp3lame         no
  opus            no
  fdkaac          no
  jpeg            no
  turbo jpeg      no
  rfxcodec        yes
  painter         yes
  pixman          no
  fuse            no
  ipv6            no
  vsock           no
  pam             yes
  kerberos        no
  debug           no

  strict_locations        no
  prefix                  /usr/local
  exec_prefix             ${prefix}
  libdir                  ${exec_prefix}/lib
  bindir                  ${exec_prefix}/bin
  sysconfdir              /etc

$ ./configure --prefix=/usr/local --enable-strict-locations

xrdp will be compiled with:

  mp3lame         no
  opus            no
  fdkaac          no
  jpeg            no
  turbo jpeg      no
  rfxcodec        yes
  painter         yes
  pixman          no
  fuse            no
  ipv6            no
  vsock           no
  pam             yes
  kerberos        no
  debug           no

  strict_locations        yes
  prefix                  /usr/local
  exec_prefix             ${prefix}
  libdir                  ${exec_prefix}/lib
  bindir                  ${exec_prefix}/bin
  sysconfdir              ${prefix}/etc",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1126,2018-05-10T09:35:26Z,2018-05-12T03:28:58Z,2018-05-12T03:29:01Z,MERGED,True,2,1,1,https://github.com/metalefty,configure: set default value for enable_strict_locations,1,[],https://github.com/neutrinolabs/xrdp/pull/1126,https://github.com/jsorg71,2,https://github.com/neutrinolabs/xrdp/pull/1126#issuecomment-388114089,"This change prints yes or no to configure summary introduced in #1118.
$ ./configure --prefix=/usr/local
xrdp will be compiled with:

  mp3lame         no
  opus            no
  fdkaac          no
  jpeg            no
  turbo jpeg      no
  rfxcodec        yes
  painter         yes
  pixman          no
  fuse            no
  ipv6            no
  vsock           no
  pam             yes
  kerberos        no
  debug           no

  strict_locations        no
  prefix                  /usr/local
  exec_prefix             ${prefix}
  libdir                  ${exec_prefix}/lib
  bindir                  ${exec_prefix}/bin
  sysconfdir              /etc

$ ./configure --prefix=/usr/local --enable-strict-locations

xrdp will be compiled with:

  mp3lame         no
  opus            no
  fdkaac          no
  jpeg            no
  turbo jpeg      no
  rfxcodec        yes
  painter         yes
  pixman          no
  fuse            no
  ipv6            no
  vsock           no
  pam             yes
  kerberos        no
  debug           no

  strict_locations        yes
  prefix                  /usr/local
  exec_prefix             ${prefix}
  libdir                  ${exec_prefix}/lib
  bindir                  ${exec_prefix}/bin
  sysconfdir              ${prefix}/etc",+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1132,2018-05-21T04:03:31Z,2018-05-27T08:09:15Z,2018-05-27T08:09:15Z,MERGED,True,1,1,1,https://github.com/daixj755,fix issue #1112: set SSL object's read_ahead flag to be 0,1,[],https://github.com/neutrinolabs/xrdp/pull/1132,https://github.com/daixj755,1,https://github.com/neutrinolabs/xrdp/pull/1132,"If the SSL object's read_ahead flag is set, it is possible for no more bytes to be readable from the underlying BIO (because OpenSSL has already read them) and for SSL_pending() to return 0, even though readable application data bytes are available (because the data is in unprocessed buffered records).
In this case, ssl_tls_can_recv() return 0 and xrdp will not read the data.
https://www.openssl.org/docs/man1.1.0/ssl/SSL_pending.html","If the SSL object's read_ahead flag is set, it is possible for no more bytes to be readable from the underlying BIO (because OpenSSL has already read them) and for SSL_pending() to return 0, even though readable application data bytes are available (because the data is in unprocessed buffered records).
In this case, ssl_tls_can_recv() return 0 and xrdp will not read the data.
https://www.openssl.org/docs/man1.1.0/ssl/SSL_pending.html",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1132,2018-05-21T04:03:31Z,2018-05-27T08:09:15Z,2018-05-27T08:09:15Z,MERGED,True,1,1,1,https://github.com/daixj755,fix issue #1112: set SSL object's read_ahead flag to be 0,1,[],https://github.com/neutrinolabs/xrdp/pull/1132,https://github.com/speidy,2,https://github.com/neutrinolabs/xrdp/pull/1132#issuecomment-391594172,"If the SSL object's read_ahead flag is set, it is possible for no more bytes to be readable from the underlying BIO (because OpenSSL has already read them) and for SSL_pending() to return 0, even though readable application data bytes are available (because the data is in unprocessed buffered records).
In this case, ssl_tls_can_recv() return 0 and xrdp will not read the data.
https://www.openssl.org/docs/man1.1.0/ssl/SSL_pending.html","Thanks for the contribution!
Can you mention which issue did you see that this change resolve?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1132,2018-05-21T04:03:31Z,2018-05-27T08:09:15Z,2018-05-27T08:09:15Z,MERGED,True,1,1,1,https://github.com/daixj755,fix issue #1112: set SSL object's read_ahead flag to be 0,1,[],https://github.com/neutrinolabs/xrdp/pull/1132,https://github.com/daixj755,3,https://github.com/neutrinolabs/xrdp/pull/1132#issuecomment-391597226,"If the SSL object's read_ahead flag is set, it is possible for no more bytes to be readable from the underlying BIO (because OpenSSL has already read them) and for SSL_pending() to return 0, even though readable application data bytes are available (because the data is in unprocessed buffered records).
In this case, ssl_tls_can_recv() return 0 and xrdp will not read the data.
https://www.openssl.org/docs/man1.1.0/ssl/SSL_pending.html",#1112,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1132,2018-05-21T04:03:31Z,2018-05-27T08:09:15Z,2018-05-27T08:09:15Z,MERGED,True,1,1,1,https://github.com/daixj755,fix issue #1112: set SSL object's read_ahead flag to be 0,1,[],https://github.com/neutrinolabs/xrdp/pull/1132,https://github.com/speidy,4,https://github.com/neutrinolabs/xrdp/pull/1132#issuecomment-391597968,"If the SSL object's read_ahead flag is set, it is possible for no more bytes to be readable from the underlying BIO (because OpenSSL has already read them) and for SSL_pending() to return 0, even though readable application data bytes are available (because the data is in unprocessed buffered records).
In this case, ssl_tls_can_recv() return 0 and xrdp will not read the data.
https://www.openssl.org/docs/man1.1.0/ssl/SSL_pending.html","Thanks, let me test it a bit, then merge.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1132,2018-05-21T04:03:31Z,2018-05-27T08:09:15Z,2018-05-27T08:09:15Z,MERGED,True,1,1,1,https://github.com/daixj755,fix issue #1112: set SSL object's read_ahead flag to be 0,1,[],https://github.com/neutrinolabs/xrdp/pull/1132,https://github.com/jsorg71,5,https://github.com/neutrinolabs/xrdp/pull/1132#issuecomment-392237958,"If the SSL object's read_ahead flag is set, it is possible for no more bytes to be readable from the underlying BIO (because OpenSSL has already read them) and for SSL_pending() to return 0, even though readable application data bytes are available (because the data is in unprocessed buffered records).
In this case, ssl_tls_can_recv() return 0 and xrdp will not read the data.
https://www.openssl.org/docs/man1.1.0/ssl/SSL_pending.html","@speidy This ""read ahead"" was set from your original work I think.  I ran a few days with it off, seems ok.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1132,2018-05-21T04:03:31Z,2018-05-27T08:09:15Z,2018-05-27T08:09:15Z,MERGED,True,1,1,1,https://github.com/daixj755,fix issue #1112: set SSL object's read_ahead flag to be 0,1,[],https://github.com/neutrinolabs/xrdp/pull/1132,https://github.com/speidy,6,https://github.com/neutrinolabs/xrdp/pull/1132#issuecomment-392274515,"If the SSL object's read_ahead flag is set, it is possible for no more bytes to be readable from the underlying BIO (because OpenSSL has already read them) and for SSL_pending() to return 0, even though readable application data bytes are available (because the data is in unprocessed buffered records).
In this case, ssl_tls_can_recv() return 0 and xrdp will not read the data.
https://www.openssl.org/docs/man1.1.0/ssl/SSL_pending.html","Might be.
Let’s drop it then.

בתאריך שבת, 26 במאי 2018 ב-8:24 מאת jsorg71 <notifications@github.com>:
 @speidy <https://github.com/speidy> This ""read ahead"" was set from your
 original work I think. I ran a few days with it off, seems ok.

 —
 You are receiving this because you were mentioned.


 Reply to this email directly, view it on GitHub
 <#1132 (comment)>,
 or mute the thread
 <https://github.com/notifications/unsubscribe-auth/ADTH1DAQmBvjEd7746sSvJszRxoHCz5Zks5t2OcEgaJpZM4UGZsv>
 .

-- 
Idan Freiberg

GPG FP: 8108 7EC9 806E 4980 75F2  72B3 8AD3 2D04 337B 1F18",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1134,2018-05-24T05:11:24Z,2018-05-26T05:17:33Z,2018-06-26T08:30:06Z,MERGED,True,12,1,4,https://github.com/jsorg71,add ipv6only to configure echo and add configure parameter to xrdp -h…,2,[],https://github.com/neutrinolabs/xrdp/pull/1134,https://github.com/jsorg71,1,https://github.com/neutrinolabs/xrdp/pull/1134,… output,… output,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1137,2018-05-26T06:14:40Z,2018-05-27T08:05:09Z,2018-05-27T08:07:07Z,MERGED,True,1,1,1,https://github.com/jsorg71,"don't remove configure_params.h on make clean, only make distclean",1,[],https://github.com/neutrinolabs/xrdp/pull/1137,https://github.com/jsorg71,1,https://github.com/neutrinolabs/xrdp/pull/1137,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1140,2018-05-31T16:04:55Z,2018-07-20T00:15:19Z,2019-04-11T09:21:22Z,MERGED,True,37,5,3,https://github.com/matt335672,Add atexit() handler to unmount the filesystem on fatal X error,1,['drive redirection'],https://github.com/neutrinolabs/xrdp/pull/1140,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1140,"A couple of our guys log out of their remote sessions every night, rather than simply disconnecting and reconnecting.
I'd had reports that when this is done, the chansrv process can exit without unmounting the FUSE filesystem. When the user logs in again, the FUSE system cannot be mounted over the old one so the user loses remote drives and copy-paste.
Since this is fairly common, I attached a debugger to chansrv and set a breakpoint on _exit. Here's what I got (CentOS 7.4):-
#0  0x00007f7a1d8df4f0 in _exit () from /lib64/libc.so.6
#1  0x00007f7a1d858a2b in __run_exit_handlers () from /lib64/libc.so.6
#2  0x00007f7a1d858ab5 in exit () from /lib64/libc.so.6
#3  0x00007f7a1de65ee5 in _XDefaultIOError () from /lib64/libX11.so.6
#4  0x00007f7a1de6611e in _XIOError () from /lib64/libX11.so.6
#5  0x00007f7a1de63acd in _XEventsQueued () from /lib64/libX11.so.6
#6  0x00007f7a1de555dd in XPending () from /lib64/libX11.so.6
#7  0x00005563dd22927a in xcommon_check_wait_objs ()
#8  0x00005563dd2130bd in channel_thread_loop ()
#9  0x00007f7a1ee4ee25 in start_thread () from /lib64/libpthread.so.0
#10 0x00007f7a1d91834d in clone () from /lib64/libc.so.6

So this is clearly a fatal X error.
I've had a poke-around and there was a handler which could have been used to pick up on this which was removed by @jsorg71  in commit e11dce7 back in 2009 when the code was much simpler!
Since the original X Error handler was removed for what were good reasons at the time, I've gone for another approach and used the standard C library atexit() call to add a handler to unmount the filesystem at exit if for some reason it's still mounted.
The approach works in my testing, but I'm not completely happy with it because of the commit referred to above. Maybe a better approach might be to re-instate the standard X11 error handler and see what happens now that nearly a decade has passed.","A couple of our guys log out of their remote sessions every night, rather than simply disconnecting and reconnecting.
I'd had reports that when this is done, the chansrv process can exit without unmounting the FUSE filesystem. When the user logs in again, the FUSE system cannot be mounted over the old one so the user loses remote drives and copy-paste.
Since this is fairly common, I attached a debugger to chansrv and set a breakpoint on _exit. Here's what I got (CentOS 7.4):-
#0  0x00007f7a1d8df4f0 in _exit () from /lib64/libc.so.6
#1  0x00007f7a1d858a2b in __run_exit_handlers () from /lib64/libc.so.6
#2  0x00007f7a1d858ab5 in exit () from /lib64/libc.so.6
#3  0x00007f7a1de65ee5 in _XDefaultIOError () from /lib64/libX11.so.6
#4  0x00007f7a1de6611e in _XIOError () from /lib64/libX11.so.6
#5  0x00007f7a1de63acd in _XEventsQueued () from /lib64/libX11.so.6
#6  0x00007f7a1de555dd in XPending () from /lib64/libX11.so.6
#7  0x00005563dd22927a in xcommon_check_wait_objs ()
#8  0x00005563dd2130bd in channel_thread_loop ()
#9  0x00007f7a1ee4ee25 in start_thread () from /lib64/libpthread.so.0
#10 0x00007f7a1d91834d in clone () from /lib64/libc.so.6

So this is clearly a fatal X error.
I've had a poke-around and there was a handler which could have been used to pick up on this which was removed by @jsorg71  in commit e11dce7 back in 2009 when the code was much simpler!
Since the original X Error handler was removed for what were good reasons at the time, I've gone for another approach and used the standard C library atexit() call to add a handler to unmount the filesystem at exit if for some reason it's still mounted.
The approach works in my testing, but I'm not completely happy with it because of the commit referred to above. Maybe a better approach might be to re-instate the standard X11 error handler and see what happens now that nearly a decade has passed.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1140,2018-05-31T16:04:55Z,2018-07-20T00:15:19Z,2019-04-11T09:21:22Z,MERGED,True,37,5,3,https://github.com/matt335672,Add atexit() handler to unmount the filesystem on fatal X error,1,['drive redirection'],https://github.com/neutrinolabs/xrdp/pull/1140,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1140#issuecomment-397524814,"A couple of our guys log out of their remote sessions every night, rather than simply disconnecting and reconnecting.
I'd had reports that when this is done, the chansrv process can exit without unmounting the FUSE filesystem. When the user logs in again, the FUSE system cannot be mounted over the old one so the user loses remote drives and copy-paste.
Since this is fairly common, I attached a debugger to chansrv and set a breakpoint on _exit. Here's what I got (CentOS 7.4):-
#0  0x00007f7a1d8df4f0 in _exit () from /lib64/libc.so.6
#1  0x00007f7a1d858a2b in __run_exit_handlers () from /lib64/libc.so.6
#2  0x00007f7a1d858ab5 in exit () from /lib64/libc.so.6
#3  0x00007f7a1de65ee5 in _XDefaultIOError () from /lib64/libX11.so.6
#4  0x00007f7a1de6611e in _XIOError () from /lib64/libX11.so.6
#5  0x00007f7a1de63acd in _XEventsQueued () from /lib64/libX11.so.6
#6  0x00007f7a1de555dd in XPending () from /lib64/libX11.so.6
#7  0x00005563dd22927a in xcommon_check_wait_objs ()
#8  0x00005563dd2130bd in channel_thread_loop ()
#9  0x00007f7a1ee4ee25 in start_thread () from /lib64/libpthread.so.0
#10 0x00007f7a1d91834d in clone () from /lib64/libc.so.6

So this is clearly a fatal X error.
I've had a poke-around and there was a handler which could have been used to pick up on this which was removed by @jsorg71  in commit e11dce7 back in 2009 when the code was much simpler!
Since the original X Error handler was removed for what were good reasons at the time, I've gone for another approach and used the standard C library atexit() call to add a handler to unmount the filesystem at exit if for some reason it's still mounted.
The approach works in my testing, but I'm not completely happy with it because of the commit referred to above. Maybe a better approach might be to re-instate the standard X11 error handler and see what happens now that nearly a decade has passed.",@speidy what do you think of this? LGTM,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1140,2018-05-31T16:04:55Z,2018-07-20T00:15:19Z,2019-04-11T09:21:22Z,MERGED,True,37,5,3,https://github.com/matt335672,Add atexit() handler to unmount the filesystem on fatal X error,1,['drive redirection'],https://github.com/neutrinolabs/xrdp/pull/1140,https://github.com/speidy,3,https://github.com/neutrinolabs/xrdp/pull/1140#issuecomment-397798374,"A couple of our guys log out of their remote sessions every night, rather than simply disconnecting and reconnecting.
I'd had reports that when this is done, the chansrv process can exit without unmounting the FUSE filesystem. When the user logs in again, the FUSE system cannot be mounted over the old one so the user loses remote drives and copy-paste.
Since this is fairly common, I attached a debugger to chansrv and set a breakpoint on _exit. Here's what I got (CentOS 7.4):-
#0  0x00007f7a1d8df4f0 in _exit () from /lib64/libc.so.6
#1  0x00007f7a1d858a2b in __run_exit_handlers () from /lib64/libc.so.6
#2  0x00007f7a1d858ab5 in exit () from /lib64/libc.so.6
#3  0x00007f7a1de65ee5 in _XDefaultIOError () from /lib64/libX11.so.6
#4  0x00007f7a1de6611e in _XIOError () from /lib64/libX11.so.6
#5  0x00007f7a1de63acd in _XEventsQueued () from /lib64/libX11.so.6
#6  0x00007f7a1de555dd in XPending () from /lib64/libX11.so.6
#7  0x00005563dd22927a in xcommon_check_wait_objs ()
#8  0x00005563dd2130bd in channel_thread_loop ()
#9  0x00007f7a1ee4ee25 in start_thread () from /lib64/libpthread.so.0
#10 0x00007f7a1d91834d in clone () from /lib64/libc.so.6

So this is clearly a fatal X error.
I've had a poke-around and there was a handler which could have been used to pick up on this which was removed by @jsorg71  in commit e11dce7 back in 2009 when the code was much simpler!
Since the original X Error handler was removed for what were good reasons at the time, I've gone for another approach and used the standard C library atexit() call to add a handler to unmount the filesystem at exit if for some reason it's still mounted.
The approach works in my testing, but I'm not completely happy with it because of the commit referred to above. Maybe a better approach might be to re-instate the standard X11 error handler and see what happens now that nearly a decade has passed.","I'm not sure i like the atexit handler.
moreover, its interesting to catch those crashes,
@jsorg71 why did u remove XSetIOErrorHandler in  e11dce7 ?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1140,2018-05-31T16:04:55Z,2018-07-20T00:15:19Z,2019-04-11T09:21:22Z,MERGED,True,37,5,3,https://github.com/matt335672,Add atexit() handler to unmount the filesystem on fatal X error,1,['drive redirection'],https://github.com/neutrinolabs/xrdp/pull/1140,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/1140#issuecomment-400549647,"A couple of our guys log out of their remote sessions every night, rather than simply disconnecting and reconnecting.
I'd had reports that when this is done, the chansrv process can exit without unmounting the FUSE filesystem. When the user logs in again, the FUSE system cannot be mounted over the old one so the user loses remote drives and copy-paste.
Since this is fairly common, I attached a debugger to chansrv and set a breakpoint on _exit. Here's what I got (CentOS 7.4):-
#0  0x00007f7a1d8df4f0 in _exit () from /lib64/libc.so.6
#1  0x00007f7a1d858a2b in __run_exit_handlers () from /lib64/libc.so.6
#2  0x00007f7a1d858ab5 in exit () from /lib64/libc.so.6
#3  0x00007f7a1de65ee5 in _XDefaultIOError () from /lib64/libX11.so.6
#4  0x00007f7a1de6611e in _XIOError () from /lib64/libX11.so.6
#5  0x00007f7a1de63acd in _XEventsQueued () from /lib64/libX11.so.6
#6  0x00007f7a1de555dd in XPending () from /lib64/libX11.so.6
#7  0x00005563dd22927a in xcommon_check_wait_objs ()
#8  0x00005563dd2130bd in channel_thread_loop ()
#9  0x00007f7a1ee4ee25 in start_thread () from /lib64/libpthread.so.0
#10 0x00007f7a1d91834d in clone () from /lib64/libc.so.6

So this is clearly a fatal X error.
I've had a poke-around and there was a handler which could have been used to pick up on this which was removed by @jsorg71  in commit e11dce7 back in 2009 when the code was much simpler!
Since the original X Error handler was removed for what were good reasons at the time, I've gone for another approach and used the standard C library atexit() call to add a handler to unmount the filesystem at exit if for some reason it's still mounted.
The approach works in my testing, but I'm not completely happy with it because of the commit referred to above. Maybe a better approach might be to re-instate the standard X11 error handler and see what happens now that nearly a decade has passed.","No enough time to test, let's merge after release.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1140,2018-05-31T16:04:55Z,2018-07-20T00:15:19Z,2019-04-11T09:21:22Z,MERGED,True,37,5,3,https://github.com/matt335672,Add atexit() handler to unmount the filesystem on fatal X error,1,['drive redirection'],https://github.com/neutrinolabs/xrdp/pull/1140,https://github.com/jsorg71,5,https://github.com/neutrinolabs/xrdp/pull/1140#issuecomment-401893274,"A couple of our guys log out of their remote sessions every night, rather than simply disconnecting and reconnecting.
I'd had reports that when this is done, the chansrv process can exit without unmounting the FUSE filesystem. When the user logs in again, the FUSE system cannot be mounted over the old one so the user loses remote drives and copy-paste.
Since this is fairly common, I attached a debugger to chansrv and set a breakpoint on _exit. Here's what I got (CentOS 7.4):-
#0  0x00007f7a1d8df4f0 in _exit () from /lib64/libc.so.6
#1  0x00007f7a1d858a2b in __run_exit_handlers () from /lib64/libc.so.6
#2  0x00007f7a1d858ab5 in exit () from /lib64/libc.so.6
#3  0x00007f7a1de65ee5 in _XDefaultIOError () from /lib64/libX11.so.6
#4  0x00007f7a1de6611e in _XIOError () from /lib64/libX11.so.6
#5  0x00007f7a1de63acd in _XEventsQueued () from /lib64/libX11.so.6
#6  0x00007f7a1de555dd in XPending () from /lib64/libX11.so.6
#7  0x00005563dd22927a in xcommon_check_wait_objs ()
#8  0x00005563dd2130bd in channel_thread_loop ()
#9  0x00007f7a1ee4ee25 in start_thread () from /lib64/libpthread.so.0
#10 0x00007f7a1d91834d in clone () from /lib64/libc.so.6

So this is clearly a fatal X error.
I've had a poke-around and there was a handler which could have been used to pick up on this which was removed by @jsorg71  in commit e11dce7 back in 2009 when the code was much simpler!
Since the original X Error handler was removed for what were good reasons at the time, I've gone for another approach and used the standard C library atexit() call to add a handler to unmount the filesystem at exit if for some reason it's still mounted.
The approach works in my testing, but I'm not completely happy with it because of the commit referred to above. Maybe a better approach might be to re-instate the standard X11 error handler and see what happens now that nearly a decade has passed.",I can't quite remember why I removed them.  I think because chansrv would not exit if the Xserver exited.  We can return them as long as everything gets cleaned up ok.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1140,2018-05-31T16:04:55Z,2018-07-20T00:15:19Z,2019-04-11T09:21:22Z,MERGED,True,37,5,3,https://github.com/matt335672,Add atexit() handler to unmount the filesystem on fatal X error,1,['drive redirection'],https://github.com/neutrinolabs/xrdp/pull/1140,https://github.com/matt335672,6,https://github.com/neutrinolabs/xrdp/pull/1140#issuecomment-402739188,"A couple of our guys log out of their remote sessions every night, rather than simply disconnecting and reconnecting.
I'd had reports that when this is done, the chansrv process can exit without unmounting the FUSE filesystem. When the user logs in again, the FUSE system cannot be mounted over the old one so the user loses remote drives and copy-paste.
Since this is fairly common, I attached a debugger to chansrv and set a breakpoint on _exit. Here's what I got (CentOS 7.4):-
#0  0x00007f7a1d8df4f0 in _exit () from /lib64/libc.so.6
#1  0x00007f7a1d858a2b in __run_exit_handlers () from /lib64/libc.so.6
#2  0x00007f7a1d858ab5 in exit () from /lib64/libc.so.6
#3  0x00007f7a1de65ee5 in _XDefaultIOError () from /lib64/libX11.so.6
#4  0x00007f7a1de6611e in _XIOError () from /lib64/libX11.so.6
#5  0x00007f7a1de63acd in _XEventsQueued () from /lib64/libX11.so.6
#6  0x00007f7a1de555dd in XPending () from /lib64/libX11.so.6
#7  0x00005563dd22927a in xcommon_check_wait_objs ()
#8  0x00005563dd2130bd in channel_thread_loop ()
#9  0x00007f7a1ee4ee25 in start_thread () from /lib64/libpthread.so.0
#10 0x00007f7a1d91834d in clone () from /lib64/libc.so.6

So this is clearly a fatal X error.
I've had a poke-around and there was a handler which could have been used to pick up on this which was removed by @jsorg71  in commit e11dce7 back in 2009 when the code was much simpler!
Since the original X Error handler was removed for what were good reasons at the time, I've gone for another approach and used the standard C library atexit() call to add a handler to unmount the filesystem at exit if for some reason it's still mounted.
The approach works in my testing, but I'm not completely happy with it because of the commit referred to above. Maybe a better approach might be to re-instate the standard X11 error handler and see what happens now that nearly a decade has passed.","I'm also not keen on using atexit() if a better approach is available.
I'll rejig the patch to re-instate the XSetIOErrorHandler() call, and callback to a handler in chansrv.c. That can do any deallocating it needs to.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1140,2018-05-31T16:04:55Z,2018-07-20T00:15:19Z,2019-04-11T09:21:22Z,MERGED,True,37,5,3,https://github.com/matt335672,Add atexit() handler to unmount the filesystem on fatal X error,1,['drive redirection'],https://github.com/neutrinolabs/xrdp/pull/1140,https://github.com/matt335672,7,https://github.com/neutrinolabs/xrdp/pull/1140#issuecomment-403847227,"A couple of our guys log out of their remote sessions every night, rather than simply disconnecting and reconnecting.
I'd had reports that when this is done, the chansrv process can exit without unmounting the FUSE filesystem. When the user logs in again, the FUSE system cannot be mounted over the old one so the user loses remote drives and copy-paste.
Since this is fairly common, I attached a debugger to chansrv and set a breakpoint on _exit. Here's what I got (CentOS 7.4):-
#0  0x00007f7a1d8df4f0 in _exit () from /lib64/libc.so.6
#1  0x00007f7a1d858a2b in __run_exit_handlers () from /lib64/libc.so.6
#2  0x00007f7a1d858ab5 in exit () from /lib64/libc.so.6
#3  0x00007f7a1de65ee5 in _XDefaultIOError () from /lib64/libX11.so.6
#4  0x00007f7a1de6611e in _XIOError () from /lib64/libX11.so.6
#5  0x00007f7a1de63acd in _XEventsQueued () from /lib64/libX11.so.6
#6  0x00007f7a1de555dd in XPending () from /lib64/libX11.so.6
#7  0x00005563dd22927a in xcommon_check_wait_objs ()
#8  0x00005563dd2130bd in channel_thread_loop ()
#9  0x00007f7a1ee4ee25 in start_thread () from /lib64/libpthread.so.0
#10 0x00007f7a1d91834d in clone () from /lib64/libc.so.6

So this is clearly a fatal X error.
I've had a poke-around and there was a handler which could have been used to pick up on this which was removed by @jsorg71  in commit e11dce7 back in 2009 when the code was much simpler!
Since the original X Error handler was removed for what were good reasons at the time, I've gone for another approach and used the standard C library atexit() call to add a handler to unmount the filesystem at exit if for some reason it's still mounted.
The approach works in my testing, but I'm not completely happy with it because of the commit referred to above. Maybe a better approach might be to re-instate the standard X11 error handler and see what happens now that nearly a decade has passed.","Patch now uses a callback from xcommon.c to chansrv.c when the X server fails to allow chansrv.c to cater for this specific event.
Tested on CentOS 7.4 with an explicit kill of the X server.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1140,2018-05-31T16:04:55Z,2018-07-20T00:15:19Z,2019-04-11T09:21:22Z,MERGED,True,37,5,3,https://github.com/matt335672,Add atexit() handler to unmount the filesystem on fatal X error,1,['drive redirection'],https://github.com/neutrinolabs/xrdp/pull/1140,https://github.com/metalefty,8,https://github.com/neutrinolabs/xrdp/pull/1140#issuecomment-404439905,"A couple of our guys log out of their remote sessions every night, rather than simply disconnecting and reconnecting.
I'd had reports that when this is done, the chansrv process can exit without unmounting the FUSE filesystem. When the user logs in again, the FUSE system cannot be mounted over the old one so the user loses remote drives and copy-paste.
Since this is fairly common, I attached a debugger to chansrv and set a breakpoint on _exit. Here's what I got (CentOS 7.4):-
#0  0x00007f7a1d8df4f0 in _exit () from /lib64/libc.so.6
#1  0x00007f7a1d858a2b in __run_exit_handlers () from /lib64/libc.so.6
#2  0x00007f7a1d858ab5 in exit () from /lib64/libc.so.6
#3  0x00007f7a1de65ee5 in _XDefaultIOError () from /lib64/libX11.so.6
#4  0x00007f7a1de6611e in _XIOError () from /lib64/libX11.so.6
#5  0x00007f7a1de63acd in _XEventsQueued () from /lib64/libX11.so.6
#6  0x00007f7a1de555dd in XPending () from /lib64/libX11.so.6
#7  0x00005563dd22927a in xcommon_check_wait_objs ()
#8  0x00005563dd2130bd in channel_thread_loop ()
#9  0x00007f7a1ee4ee25 in start_thread () from /lib64/libpthread.so.0
#10 0x00007f7a1d91834d in clone () from /lib64/libc.so.6

So this is clearly a fatal X error.
I've had a poke-around and there was a handler which could have been used to pick up on this which was removed by @jsorg71  in commit e11dce7 back in 2009 when the code was much simpler!
Since the original X Error handler was removed for what were good reasons at the time, I've gone for another approach and used the standard C library atexit() call to add a handler to unmount the filesystem at exit if for some reason it's still mounted.
The approach works in my testing, but I'm not completely happy with it because of the commit referred to above. Maybe a better approach might be to re-instate the standard X11 error handler and see what happens now that nearly a decade has passed.",Looks better.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1140,2018-05-31T16:04:55Z,2018-07-20T00:15:19Z,2019-04-11T09:21:22Z,MERGED,True,37,5,3,https://github.com/matt335672,Add atexit() handler to unmount the filesystem on fatal X error,1,['drive redirection'],https://github.com/neutrinolabs/xrdp/pull/1140,https://github.com/metalefty,9,https://github.com/neutrinolabs/xrdp/pull/1140#issuecomment-406149149,"A couple of our guys log out of their remote sessions every night, rather than simply disconnecting and reconnecting.
I'd had reports that when this is done, the chansrv process can exit without unmounting the FUSE filesystem. When the user logs in again, the FUSE system cannot be mounted over the old one so the user loses remote drives and copy-paste.
Since this is fairly common, I attached a debugger to chansrv and set a breakpoint on _exit. Here's what I got (CentOS 7.4):-
#0  0x00007f7a1d8df4f0 in _exit () from /lib64/libc.so.6
#1  0x00007f7a1d858a2b in __run_exit_handlers () from /lib64/libc.so.6
#2  0x00007f7a1d858ab5 in exit () from /lib64/libc.so.6
#3  0x00007f7a1de65ee5 in _XDefaultIOError () from /lib64/libX11.so.6
#4  0x00007f7a1de6611e in _XIOError () from /lib64/libX11.so.6
#5  0x00007f7a1de63acd in _XEventsQueued () from /lib64/libX11.so.6
#6  0x00007f7a1de555dd in XPending () from /lib64/libX11.so.6
#7  0x00005563dd22927a in xcommon_check_wait_objs ()
#8  0x00005563dd2130bd in channel_thread_loop ()
#9  0x00007f7a1ee4ee25 in start_thread () from /lib64/libpthread.so.0
#10 0x00007f7a1d91834d in clone () from /lib64/libc.so.6

So this is clearly a fatal X error.
I've had a poke-around and there was a handler which could have been used to pick up on this which was removed by @jsorg71  in commit e11dce7 back in 2009 when the code was much simpler!
Since the original X Error handler was removed for what were good reasons at the time, I've gone for another approach and used the standard C library atexit() call to add a handler to unmount the filesystem at exit if for some reason it's still mounted.
The approach works in my testing, but I'm not completely happy with it because of the commit referred to above. Maybe a better approach might be to re-instate the standard X11 error handler and see what happens now that nearly a decade has passed.",Let's merge and test.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1140,2018-05-31T16:04:55Z,2018-07-20T00:15:19Z,2019-04-11T09:21:22Z,MERGED,True,37,5,3,https://github.com/matt335672,Add atexit() handler to unmount the filesystem on fatal X error,1,['drive redirection'],https://github.com/neutrinolabs/xrdp/pull/1140,https://github.com/matt335672,10,https://github.com/neutrinolabs/xrdp/pull/1140#issuecomment-406185288,"A couple of our guys log out of their remote sessions every night, rather than simply disconnecting and reconnecting.
I'd had reports that when this is done, the chansrv process can exit without unmounting the FUSE filesystem. When the user logs in again, the FUSE system cannot be mounted over the old one so the user loses remote drives and copy-paste.
Since this is fairly common, I attached a debugger to chansrv and set a breakpoint on _exit. Here's what I got (CentOS 7.4):-
#0  0x00007f7a1d8df4f0 in _exit () from /lib64/libc.so.6
#1  0x00007f7a1d858a2b in __run_exit_handlers () from /lib64/libc.so.6
#2  0x00007f7a1d858ab5 in exit () from /lib64/libc.so.6
#3  0x00007f7a1de65ee5 in _XDefaultIOError () from /lib64/libX11.so.6
#4  0x00007f7a1de6611e in _XIOError () from /lib64/libX11.so.6
#5  0x00007f7a1de63acd in _XEventsQueued () from /lib64/libX11.so.6
#6  0x00007f7a1de555dd in XPending () from /lib64/libX11.so.6
#7  0x00005563dd22927a in xcommon_check_wait_objs ()
#8  0x00005563dd2130bd in channel_thread_loop ()
#9  0x00007f7a1ee4ee25 in start_thread () from /lib64/libpthread.so.0
#10 0x00007f7a1d91834d in clone () from /lib64/libc.so.6

So this is clearly a fatal X error.
I've had a poke-around and there was a handler which could have been used to pick up on this which was removed by @jsorg71  in commit e11dce7 back in 2009 when the code was much simpler!
Since the original X Error handler was removed for what were good reasons at the time, I've gone for another approach and used the standard C library atexit() call to add a handler to unmount the filesystem at exit if for some reason it's still mounted.
The approach works in my testing, but I'm not completely happy with it because of the commit referred to above. Maybe a better approach might be to re-instate the standard X11 error handler and see what happens now that nearly a decade has passed.",rebased and squashed for merge.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1140,2018-05-31T16:04:55Z,2018-07-20T00:15:19Z,2019-04-11T09:21:22Z,MERGED,True,37,5,3,https://github.com/matt335672,Add atexit() handler to unmount the filesystem on fatal X error,1,['drive redirection'],https://github.com/neutrinolabs/xrdp/pull/1140,https://github.com/mailinglists35,11,https://github.com/neutrinolabs/xrdp/pull/1140#issuecomment-428702700,"A couple of our guys log out of their remote sessions every night, rather than simply disconnecting and reconnecting.
I'd had reports that when this is done, the chansrv process can exit without unmounting the FUSE filesystem. When the user logs in again, the FUSE system cannot be mounted over the old one so the user loses remote drives and copy-paste.
Since this is fairly common, I attached a debugger to chansrv and set a breakpoint on _exit. Here's what I got (CentOS 7.4):-
#0  0x00007f7a1d8df4f0 in _exit () from /lib64/libc.so.6
#1  0x00007f7a1d858a2b in __run_exit_handlers () from /lib64/libc.so.6
#2  0x00007f7a1d858ab5 in exit () from /lib64/libc.so.6
#3  0x00007f7a1de65ee5 in _XDefaultIOError () from /lib64/libX11.so.6
#4  0x00007f7a1de6611e in _XIOError () from /lib64/libX11.so.6
#5  0x00007f7a1de63acd in _XEventsQueued () from /lib64/libX11.so.6
#6  0x00007f7a1de555dd in XPending () from /lib64/libX11.so.6
#7  0x00005563dd22927a in xcommon_check_wait_objs ()
#8  0x00005563dd2130bd in channel_thread_loop ()
#9  0x00007f7a1ee4ee25 in start_thread () from /lib64/libpthread.so.0
#10 0x00007f7a1d91834d in clone () from /lib64/libc.so.6

So this is clearly a fatal X error.
I've had a poke-around and there was a handler which could have been used to pick up on this which was removed by @jsorg71  in commit e11dce7 back in 2009 when the code was much simpler!
Since the original X Error handler was removed for what were good reasons at the time, I've gone for another approach and used the standard C library atexit() call to add a handler to unmount the filesystem at exit if for some reason it's still mounted.
The approach works in my testing, but I'm not completely happy with it because of the commit referred to above. Maybe a better approach might be to re-instate the standard X11 error handler and see what happens now that nearly a decade has passed.","wonderful, thank you!",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1141,2018-06-04T09:31:00Z,2018-06-04T09:53:50Z,2018-06-04T09:53:50Z,CLOSED,False,0,0,0,https://github.com/FelixZhang,xrdp: corret the config file name in the comment,0,[],https://github.com/neutrinolabs/xrdp/pull/1141,https://github.com/FelixZhang,1,https://github.com/neutrinolabs/xrdp/pull/1141,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1142,2018-06-04T14:56:38Z,2018-06-11T02:56:42Z,2018-06-11T02:56:48Z,MERGED,True,130,99,3,https://github.com/metalefty,Dont spit on the console (sesman),5,[],https://github.com/neutrinolabs/xrdp/pull/1142,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1142,"synopsis
As the Debian patch[1] expresses, spitting messages on the console when a process starts in background is a bad idea.

don't print sesman config summary and any other messages
create config_dump() function rather than dumping config while config reading
config_dump() when xrdp-sesman runs in foreground
remove prototype declaration which no longer exists
adjust indent of sesman configuration summary

Logging configuration summary is still dumped on the console. I'll remove it later.
[1] https://salsa.debian.org/debian-remote-team/xrdp/blob/2751ad4d62b1f63dbc2e4b8fa1580fa54b0f5460/debian/patches/shutup-daemon.diff
before
# xrdp-sesman 
starting sesman...
sesman config:
        ListenAddress:            127.0.0.1
        ListenPort:               3350
        EnableUserWindowManager:  1
        UserWindowManager:        startwm.sh
        DefaultWindowManager:     startwm.sh
        AuthFilePath:             disabled
Xvnc parameters:
        Parameter 00                   Xvnc
        Parameter 01                   -bs
        Parameter 02                   -nolisten
        Parameter 03                   tcp
        Parameter 04                   -localhost
        Parameter 05                   -dpi
        Parameter 06                   96
X11rdp parameters:
XOrg parameters:
        Parameter 00                   Xorg
        Parameter 01                   -config
        Parameter 02                   xrdp/xorg.conf
        Parameter 03                   -noreset
        Parameter 04                   -nolisten
        Parameter 05                   tcp
security configuration:
        AllowRootLogin:       1
        MaxLoginRetry:        4
        AlwaysGroupCheck:     0
        No TSUsersGroup defined
        No TSAdminsGroup defined
session configuration:
        MaxSessions:                 50
        X11DisplayOffset:            10
        KillDisconnected:            0
        IdleTimeLimit:               0
        DisconnectedTimeLimit:       0
        Policy:       0
SessionVariables parameters:
  Parameter 00                   PULSE_SCRIPT=/usr/local/etc/xrdp/pulse/default.pa
logging configuration:
        LogFile:       /var/log/xrdp-sesman.log
        LogLevel:      4
        EnableSyslog:  1
        SyslogLevel:   4
[20180604-23:34:17] [DEBUG] libscp initialized
[20180604-23:34:17] [DEBUG] Testing if xrdp-sesman can listen on 127.0.0.1 port 3350.
[20180604-23:34:17] [DEBUG] Closed socket 5 (AF_INET6 ::1 port 3350)

after
# xrdp-sesman -ns
starting sesman in foreground...
Global configuration:
    ListenAddress:            127.0.0.1
    ListenPort:               3350
    EnableUserWindowManager:  1
    UserWindowManager:        startwm.sh
    DefaultWindowManager:     startwm.sh
    AuthFilePath:             disabled
Session configuration:
    MaxSessions:              50
    X11DisplayOffset:         10
    KillDisconnected:         0
    IdleTimeLimit:            0
    DisconnectedTimeLimit:    0
    Policy:                   0
Security configuration:
    AllowRootLogin:           1
    MaxLoginRetry:            4
    AlwaysGroupCheck:         0
    TSUsersGroup:             (not defined)
    TSAdminsGroup:            (not defined)
Xorg parameters:
    Parameter 00              Xorg
    Parameter 01              -config
    Parameter 02              xrdp/xorg.conf
    Parameter 03              -noreset
    Parameter 04              -nolisten
    Parameter 05              tcp
Xvnc parameters:
    Parameter 00              Xvnc
    Parameter 01              -bs
    Parameter 02              -nolisten
    Parameter 03              tcp
    Parameter 04              -localhost
    Parameter 05              -dpi
    Parameter 06              96
SessionVariables parameters:
    Parameter 00              PULSE_SCRIPT=/usr/local/etc/xrdp/pulse/default.pa
Logging configuration:
        LogFile:       /var/log/xrdp-sesman.log
        LogLevel:      4
        EnableSyslog:  1
        SyslogLevel:   4
[20180604-23:36:11] [DEBUG] libscp initialized
[20180604-23:36:11] [INFO ] starting xrdp-sesman with pid 32766
[20180604-23:36:11] [INFO ] listening to port 3350 on 127.0.0.1

# xrdp-sesman : in background (daemon mode)
logging configuration:
        LogFile:       /var/log/xrdp-sesman.log
        LogLevel:      4
        EnableSyslog:  1
        SyslogLevel:   4","synopsis
As the Debian patch[1] expresses, spitting messages on the console when a process starts in background is a bad idea.

don't print sesman config summary and any other messages
create config_dump() function rather than dumping config while config reading
config_dump() when xrdp-sesman runs in foreground
remove prototype declaration which no longer exists
adjust indent of sesman configuration summary

Logging configuration summary is still dumped on the console. I'll remove it later.
[1] https://salsa.debian.org/debian-remote-team/xrdp/blob/2751ad4d62b1f63dbc2e4b8fa1580fa54b0f5460/debian/patches/shutup-daemon.diff
before
# xrdp-sesman 
starting sesman...
sesman config:
        ListenAddress:            127.0.0.1
        ListenPort:               3350
        EnableUserWindowManager:  1
        UserWindowManager:        startwm.sh
        DefaultWindowManager:     startwm.sh
        AuthFilePath:             disabled
Xvnc parameters:
        Parameter 00                   Xvnc
        Parameter 01                   -bs
        Parameter 02                   -nolisten
        Parameter 03                   tcp
        Parameter 04                   -localhost
        Parameter 05                   -dpi
        Parameter 06                   96
X11rdp parameters:
XOrg parameters:
        Parameter 00                   Xorg
        Parameter 01                   -config
        Parameter 02                   xrdp/xorg.conf
        Parameter 03                   -noreset
        Parameter 04                   -nolisten
        Parameter 05                   tcp
security configuration:
        AllowRootLogin:       1
        MaxLoginRetry:        4
        AlwaysGroupCheck:     0
        No TSUsersGroup defined
        No TSAdminsGroup defined
session configuration:
        MaxSessions:                 50
        X11DisplayOffset:            10
        KillDisconnected:            0
        IdleTimeLimit:               0
        DisconnectedTimeLimit:       0
        Policy:       0
SessionVariables parameters:
  Parameter 00                   PULSE_SCRIPT=/usr/local/etc/xrdp/pulse/default.pa
logging configuration:
        LogFile:       /var/log/xrdp-sesman.log
        LogLevel:      4
        EnableSyslog:  1
        SyslogLevel:   4
[20180604-23:34:17] [DEBUG] libscp initialized
[20180604-23:34:17] [DEBUG] Testing if xrdp-sesman can listen on 127.0.0.1 port 3350.
[20180604-23:34:17] [DEBUG] Closed socket 5 (AF_INET6 ::1 port 3350)

after
# xrdp-sesman -ns
starting sesman in foreground...
Global configuration:
    ListenAddress:            127.0.0.1
    ListenPort:               3350
    EnableUserWindowManager:  1
    UserWindowManager:        startwm.sh
    DefaultWindowManager:     startwm.sh
    AuthFilePath:             disabled
Session configuration:
    MaxSessions:              50
    X11DisplayOffset:         10
    KillDisconnected:         0
    IdleTimeLimit:            0
    DisconnectedTimeLimit:    0
    Policy:                   0
Security configuration:
    AllowRootLogin:           1
    MaxLoginRetry:            4
    AlwaysGroupCheck:         0
    TSUsersGroup:             (not defined)
    TSAdminsGroup:            (not defined)
Xorg parameters:
    Parameter 00              Xorg
    Parameter 01              -config
    Parameter 02              xrdp/xorg.conf
    Parameter 03              -noreset
    Parameter 04              -nolisten
    Parameter 05              tcp
Xvnc parameters:
    Parameter 00              Xvnc
    Parameter 01              -bs
    Parameter 02              -nolisten
    Parameter 03              tcp
    Parameter 04              -localhost
    Parameter 05              -dpi
    Parameter 06              96
SessionVariables parameters:
    Parameter 00              PULSE_SCRIPT=/usr/local/etc/xrdp/pulse/default.pa
Logging configuration:
        LogFile:       /var/log/xrdp-sesman.log
        LogLevel:      4
        EnableSyslog:  1
        SyslogLevel:   4
[20180604-23:36:11] [DEBUG] libscp initialized
[20180604-23:36:11] [INFO ] starting xrdp-sesman with pid 32766
[20180604-23:36:11] [INFO ] listening to port 3350 on 127.0.0.1

# xrdp-sesman : in background (daemon mode)
logging configuration:
        LogFile:       /var/log/xrdp-sesman.log
        LogLevel:      4
        EnableSyslog:  1
        SyslogLevel:   4",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1142,2018-06-04T14:56:38Z,2018-06-11T02:56:42Z,2018-06-11T02:56:48Z,MERGED,True,130,99,3,https://github.com/metalefty,Dont spit on the console (sesman),5,[],https://github.com/neutrinolabs/xrdp/pull/1142,https://github.com/jsorg71,2,https://github.com/neutrinolabs/xrdp/pull/1142#issuecomment-395998766,"synopsis
As the Debian patch[1] expresses, spitting messages on the console when a process starts in background is a bad idea.

don't print sesman config summary and any other messages
create config_dump() function rather than dumping config while config reading
config_dump() when xrdp-sesman runs in foreground
remove prototype declaration which no longer exists
adjust indent of sesman configuration summary

Logging configuration summary is still dumped on the console. I'll remove it later.
[1] https://salsa.debian.org/debian-remote-team/xrdp/blob/2751ad4d62b1f63dbc2e4b8fa1580fa54b0f5460/debian/patches/shutup-daemon.diff
before
# xrdp-sesman 
starting sesman...
sesman config:
        ListenAddress:            127.0.0.1
        ListenPort:               3350
        EnableUserWindowManager:  1
        UserWindowManager:        startwm.sh
        DefaultWindowManager:     startwm.sh
        AuthFilePath:             disabled
Xvnc parameters:
        Parameter 00                   Xvnc
        Parameter 01                   -bs
        Parameter 02                   -nolisten
        Parameter 03                   tcp
        Parameter 04                   -localhost
        Parameter 05                   -dpi
        Parameter 06                   96
X11rdp parameters:
XOrg parameters:
        Parameter 00                   Xorg
        Parameter 01                   -config
        Parameter 02                   xrdp/xorg.conf
        Parameter 03                   -noreset
        Parameter 04                   -nolisten
        Parameter 05                   tcp
security configuration:
        AllowRootLogin:       1
        MaxLoginRetry:        4
        AlwaysGroupCheck:     0
        No TSUsersGroup defined
        No TSAdminsGroup defined
session configuration:
        MaxSessions:                 50
        X11DisplayOffset:            10
        KillDisconnected:            0
        IdleTimeLimit:               0
        DisconnectedTimeLimit:       0
        Policy:       0
SessionVariables parameters:
  Parameter 00                   PULSE_SCRIPT=/usr/local/etc/xrdp/pulse/default.pa
logging configuration:
        LogFile:       /var/log/xrdp-sesman.log
        LogLevel:      4
        EnableSyslog:  1
        SyslogLevel:   4
[20180604-23:34:17] [DEBUG] libscp initialized
[20180604-23:34:17] [DEBUG] Testing if xrdp-sesman can listen on 127.0.0.1 port 3350.
[20180604-23:34:17] [DEBUG] Closed socket 5 (AF_INET6 ::1 port 3350)

after
# xrdp-sesman -ns
starting sesman in foreground...
Global configuration:
    ListenAddress:            127.0.0.1
    ListenPort:               3350
    EnableUserWindowManager:  1
    UserWindowManager:        startwm.sh
    DefaultWindowManager:     startwm.sh
    AuthFilePath:             disabled
Session configuration:
    MaxSessions:              50
    X11DisplayOffset:         10
    KillDisconnected:         0
    IdleTimeLimit:            0
    DisconnectedTimeLimit:    0
    Policy:                   0
Security configuration:
    AllowRootLogin:           1
    MaxLoginRetry:            4
    AlwaysGroupCheck:         0
    TSUsersGroup:             (not defined)
    TSAdminsGroup:            (not defined)
Xorg parameters:
    Parameter 00              Xorg
    Parameter 01              -config
    Parameter 02              xrdp/xorg.conf
    Parameter 03              -noreset
    Parameter 04              -nolisten
    Parameter 05              tcp
Xvnc parameters:
    Parameter 00              Xvnc
    Parameter 01              -bs
    Parameter 02              -nolisten
    Parameter 03              tcp
    Parameter 04              -localhost
    Parameter 05              -dpi
    Parameter 06              96
SessionVariables parameters:
    Parameter 00              PULSE_SCRIPT=/usr/local/etc/xrdp/pulse/default.pa
Logging configuration:
        LogFile:       /var/log/xrdp-sesman.log
        LogLevel:      4
        EnableSyslog:  1
        SyslogLevel:   4
[20180604-23:36:11] [DEBUG] libscp initialized
[20180604-23:36:11] [INFO ] starting xrdp-sesman with pid 32766
[20180604-23:36:11] [INFO ] listening to port 3350 on 127.0.0.1

# xrdp-sesman : in background (daemon mode)
logging configuration:
        LogFile:       /var/log/xrdp-sesman.log
        LogLevel:      4
        EnableSyslog:  1
        SyslogLevel:   4",+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1146,2018-06-13T08:26:07Z,2018-06-14T09:43:03Z,2018-06-15T04:30:20Z,MERGED,True,1,0,1,https://github.com/metalefty,sesman: fix leak in struct config_sesman,1,[],https://github.com/neutrinolabs/xrdp/pull/1146,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1146,"We should free this too, right? It is malloc'ed char pointer.","We should free this too, right? It is malloc'ed char pointer.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1147,2018-06-14T08:16:00Z,2018-06-19T04:06:04Z,2018-06-19T04:06:10Z,MERGED,True,81,16,6,https://github.com/metalefty,Accept full path for DefaultWindowManager,6,[],https://github.com/neutrinolabs/xrdp/pull/1147,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1147,"Also,

make path of reconnectwm.sh configurable
improve documents

Solves #1143. Inspired by Fedora's patch[1].
[1] https://src.fedoraproject.org/cgit/rpms/xrdp.git/commit/xrdp-0.9.6-scripts-libexec.patch?id=02f845c1b8cea781313cf3e9efcd6d7d50341824","Also,

make path of reconnectwm.sh configurable
improve documents

Solves #1143. Inspired by Fedora's patch[1].
[1] https://src.fedoraproject.org/cgit/rpms/xrdp.git/commit/xrdp-0.9.6-scripts-libexec.patch?id=02f845c1b8cea781313cf3e9efcd6d7d50341824",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1153,2018-06-20T04:58:33Z,2018-06-21T00:24:55Z,2018-06-21T00:24:58Z,MERGED,True,85,38,4,https://github.com/metalefty,FreeBSD: separate rc script into xrdp and xrdp-sesman,1,[],https://github.com/neutrinolabs/xrdp/pull/1153,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1153,"to improve fscd(8)[1] compatibility. fscd(8) monitors daemons and
restarts after daemons crashed. We usually want to start, stop, and
restart xrdp and xrdp-sesman separately because restarting xrdp-sesman
means losing existing sessions. This change will enable fscd(8) not to
restart xrdp-sesman together when only xrdp daemon crashes.
Now rc.d/xrdp mainly has following commands:

start      - starts xrdp
stop       - stops xrdp
restart    - stops xrdp, then starts it again
allstart   - starts both xrdp and xrdp-sesman
allstop    - stops both
allrestart - stops both, then start them again
status     - returns status of xrdp

rc.d/xrdp-sesman doesn't have all- prefixed commands.
[1] https://www.freshports.org/sysutils/fsc/","to improve fscd(8)[1] compatibility. fscd(8) monitors daemons and
restarts after daemons crashed. We usually want to start, stop, and
restart xrdp and xrdp-sesman separately because restarting xrdp-sesman
means losing existing sessions. This change will enable fscd(8) not to
restart xrdp-sesman together when only xrdp daemon crashes.
Now rc.d/xrdp mainly has following commands:

start      - starts xrdp
stop       - stops xrdp
restart    - stops xrdp, then starts it again
allstart   - starts both xrdp and xrdp-sesman
allstop    - stops both
allrestart - stops both, then start them again
status     - returns status of xrdp

rc.d/xrdp-sesman doesn't have all- prefixed commands.
[1] https://www.freshports.org/sysutils/fsc/",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1156,2018-06-26T08:49:14Z,2018-06-27T06:27:12Z,2018-06-27T06:27:16Z,MERGED,True,15,7,3,https://github.com/metalefty,xrdp: print configure options to --version more pretty,2,[],https://github.com/neutrinolabs/xrdp/pull/1156,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1156,"Will be printed like this:
xrdp 0.9.6
  A Remote Desktop Protocol Server.
  Copyright (C) 2004-2018 Jay Sorg, Neutrino Labs, and all contributors.
  See https://github.com/neutrinolabs/xrdp for more information.

  Configure options:
      --enable-ipv6
      --enable-jpeg
      --disable-rfxcodec

  Compiled with OpenSSL 1.0.2k-fips  26 Jan 2017

xrdp 0.9.6
  A Remote Desktop Protocol Server.
  Copyright (C) 2004-2018 Jay Sorg, Neutrino Labs, and all contributors.
  See https://github.com/neutrinolabs/xrdp for more information.

  Configure options:
      --localstatedir=/var
      --enable-strict-locations
      --with-pkgconfigdir=/usr/local/libdata/pkgconfig
      --enable-jpeg
      --enable-pixman
      --enable-rfxcodec
      --enable-painter
      --disable-xrdpdebug
      --disable-fuse
      --enable-ipv6
      --enable-fdkaac
      --enable-mp3lame
      --enable-opus
      --x-libraries=/usr/local/lib
      --x-includes=/usr/local/include
      --prefix=/usr/local
      --mandir=/usr/local/man
      --disable-silent-rules
      --infodir=/usr/local/info/
      --build=amd64-portbld-freebsd11.2
      build_alias=amd64-portbld-freebsd11.2
      CC=cc
      CFLAGS=-O2 -pipe  -fstack-protector -isystem /usr/local/include -fno-strict-aliasing
      LDFLAGS= -lssl -Wl,-rpath,/usr/local/lib -fstack-protector
      LIBS=-L/usr/local/lib
      CPPFLAGS=-isystem /usr/local/include
      CPP=cpp
      PKG_CONFIG=pkgconf

  Compiled with OpenSSL 1.1.0h  27 Mar 2018","Will be printed like this:
xrdp 0.9.6
  A Remote Desktop Protocol Server.
  Copyright (C) 2004-2018 Jay Sorg, Neutrino Labs, and all contributors.
  See https://github.com/neutrinolabs/xrdp for more information.

  Configure options:
      --enable-ipv6
      --enable-jpeg
      --disable-rfxcodec

  Compiled with OpenSSL 1.0.2k-fips  26 Jan 2017

xrdp 0.9.6
  A Remote Desktop Protocol Server.
  Copyright (C) 2004-2018 Jay Sorg, Neutrino Labs, and all contributors.
  See https://github.com/neutrinolabs/xrdp for more information.

  Configure options:
      --localstatedir=/var
      --enable-strict-locations
      --with-pkgconfigdir=/usr/local/libdata/pkgconfig
      --enable-jpeg
      --enable-pixman
      --enable-rfxcodec
      --enable-painter
      --disable-xrdpdebug
      --disable-fuse
      --enable-ipv6
      --enable-fdkaac
      --enable-mp3lame
      --enable-opus
      --x-libraries=/usr/local/lib
      --x-includes=/usr/local/include
      --prefix=/usr/local
      --mandir=/usr/local/man
      --disable-silent-rules
      --infodir=/usr/local/info/
      --build=amd64-portbld-freebsd11.2
      build_alias=amd64-portbld-freebsd11.2
      CC=cc
      CFLAGS=-O2 -pipe  -fstack-protector -isystem /usr/local/include -fno-strict-aliasing
      LDFLAGS= -lssl -Wl,-rpath,/usr/local/lib -fstack-protector
      LIBS=-L/usr/local/lib
      CPPFLAGS=-isystem /usr/local/include
      CPP=cpp
      PKG_CONFIG=pkgconf

  Compiled with OpenSSL 1.1.0h  27 Mar 2018",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1156,2018-06-26T08:49:14Z,2018-06-27T06:27:12Z,2018-06-27T06:27:16Z,MERGED,True,15,7,3,https://github.com/metalefty,xrdp: print configure options to --version more pretty,2,[],https://github.com/neutrinolabs/xrdp/pull/1156,https://github.com/jsorg71,2,https://github.com/neutrinolabs/xrdp/pull/1156#issuecomment-400537610,"Will be printed like this:
xrdp 0.9.6
  A Remote Desktop Protocol Server.
  Copyright (C) 2004-2018 Jay Sorg, Neutrino Labs, and all contributors.
  See https://github.com/neutrinolabs/xrdp for more information.

  Configure options:
      --enable-ipv6
      --enable-jpeg
      --disable-rfxcodec

  Compiled with OpenSSL 1.0.2k-fips  26 Jan 2017

xrdp 0.9.6
  A Remote Desktop Protocol Server.
  Copyright (C) 2004-2018 Jay Sorg, Neutrino Labs, and all contributors.
  See https://github.com/neutrinolabs/xrdp for more information.

  Configure options:
      --localstatedir=/var
      --enable-strict-locations
      --with-pkgconfigdir=/usr/local/libdata/pkgconfig
      --enable-jpeg
      --enable-pixman
      --enable-rfxcodec
      --enable-painter
      --disable-xrdpdebug
      --disable-fuse
      --enable-ipv6
      --enable-fdkaac
      --enable-mp3lame
      --enable-opus
      --x-libraries=/usr/local/lib
      --x-includes=/usr/local/include
      --prefix=/usr/local
      --mandir=/usr/local/man
      --disable-silent-rules
      --infodir=/usr/local/info/
      --build=amd64-portbld-freebsd11.2
      build_alias=amd64-portbld-freebsd11.2
      CC=cc
      CFLAGS=-O2 -pipe  -fstack-protector -isystem /usr/local/include -fno-strict-aliasing
      LDFLAGS= -lssl -Wl,-rpath,/usr/local/lib -fstack-protector
      LIBS=-L/usr/local/lib
      CPPFLAGS=-isystem /usr/local/include
      CPP=cpp
      PKG_CONFIG=pkgconf

  Compiled with OpenSSL 1.1.0h  27 Mar 2018",+1,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1160,2018-06-29T07:28:50Z,2018-06-29T07:58:52Z,2018-06-29T07:58:55Z,MERGED,True,31,2,3,https://github.com/metalefty,Prepare release,3,[],https://github.com/neutrinolabs/xrdp/pull/1160,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1160,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1168,2018-07-12T09:05:46Z,2018-07-20T00:15:39Z,2018-10-02T08:45:45Z,MERGED,True,1,1,1,https://github.com/metalefty,docs: fix xrdp's LogFile path in man,1,[],https://github.com/neutrinolabs/xrdp/pull/1168,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1168,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1184,2018-08-02T18:36:46Z,2018-08-02T22:05:49Z,2018-08-02T22:19:04Z,CLOSED,False,39,7,5,https://github.com/shadoxx,Pulseaudio sink/source module Makefile fix,5,[],https://github.com/neutrinolabs/xrdp/pull/1184,https://github.com/shadoxx,1,https://github.com/neutrinolabs/xrdp/pull/1184,"This PR fixes an issue when trying to build module-xrdp-sink and module-xrdp-source for Pulseaudio support in xrdp on Ubuntu 18.04 and other OSes.
#1181 (comment)","This PR fixes an issue when trying to build module-xrdp-sink and module-xrdp-source for Pulseaudio support in xrdp on Ubuntu 18.04 and other OSes.
#1181 (comment)",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1184,2018-08-02T18:36:46Z,2018-08-02T22:05:49Z,2018-08-02T22:19:04Z,CLOSED,False,39,7,5,https://github.com/shadoxx,Pulseaudio sink/source module Makefile fix,5,[],https://github.com/neutrinolabs/xrdp/pull/1184,https://github.com/shadoxx,2,https://github.com/neutrinolabs/xrdp/pull/1184#issuecomment-410082786,"This PR fixes an issue when trying to build module-xrdp-sink and module-xrdp-source for Pulseaudio support in xrdp on Ubuntu 18.04 and other OSes.
#1181 (comment)",Closing to resubmit a more concise description of fix and remove unrelated commits.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1185,2018-08-02T22:31:13Z,2018-08-03T00:47:37Z,2018-08-03T07:52:19Z,MERGED,True,1,1,1,https://github.com/shadoxx,Corrected spacing between arguments to `cc` for Pulse chansrv Makefile,1,[],https://github.com/neutrinolabs/xrdp/pull/1185,https://github.com/shadoxx,1,https://github.com/neutrinolabs/xrdp/pull/1185,"This PR fixes #1181 where the Pulseaudio Chanserv module for xrdp fails to compile due to ""missing config.h"" on Ubuntu 18.04.
This is caused by incorrect spacing between the -I parameter and argument to cc in the Makefile.","This PR fixes #1181 where the Pulseaudio Chanserv module for xrdp fails to compile due to ""missing config.h"" on Ubuntu 18.04.
This is caused by incorrect spacing between the -I parameter and argument to cc in the Makefile.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1185,2018-08-02T22:31:13Z,2018-08-03T00:47:37Z,2018-08-03T07:52:19Z,MERGED,True,1,1,1,https://github.com/shadoxx,Corrected spacing between arguments to `cc` for Pulse chansrv Makefile,1,[],https://github.com/neutrinolabs/xrdp/pull/1185,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1185#issuecomment-410104402,"This PR fixes #1181 where the Pulseaudio Chanserv module for xrdp fails to compile due to ""missing config.h"" on Ubuntu 18.04.
This is caused by incorrect spacing between the -I parameter and argument to cc in the Makefile.","Can you provide a pointer of the issue whitespace is required after -I? Not placing whitespace after -I is not strange at all. Many people don't put a space after -I. If that is true, many software will be affected. Many software needs to change its Makefile. I don't think it makes sense.
Even if this commit fixes the issue, we should find out the true issue.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1185,2018-08-02T22:31:13Z,2018-08-03T00:47:37Z,2018-08-03T07:52:19Z,MERGED,True,1,1,1,https://github.com/shadoxx,Corrected spacing between arguments to `cc` for Pulse chansrv Makefile,1,[],https://github.com/neutrinolabs/xrdp/pull/1185,https://github.com/shadoxx,3,https://github.com/neutrinolabs/xrdp/pull/1185#issuecomment-410105495,"This PR fixes #1181 where the Pulseaudio Chanserv module for xrdp fails to compile due to ""missing config.h"" on Ubuntu 18.04.
This is caused by incorrect spacing between the -I parameter and argument to cc in the Makefile.","Can you provide a pointer of the issue whitespace is required after -I?

The syntax listed in the manpage for cc is -I <dir>. I understand that many people don't put a space after -I, but this is what fixed it.
Currently compiling this module under Ubuntu 18.04 is broken. This the what fixes it. 🤷‍♂️ I don't know what to tell you.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1185,2018-08-02T22:31:13Z,2018-08-03T00:47:37Z,2018-08-03T07:52:19Z,MERGED,True,1,1,1,https://github.com/shadoxx,Corrected spacing between arguments to `cc` for Pulse chansrv Makefile,1,[],https://github.com/neutrinolabs/xrdp/pull/1185,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/1185#issuecomment-410106385,"This PR fixes #1181 where the Pulseaudio Chanserv module for xrdp fails to compile due to ""missing config.h"" on Ubuntu 18.04.
This is caused by incorrect spacing between the -I parameter and argument to cc in the Makefile.","If Ubuntu is broken, Ubuntu should be fixed. This is a workaround to avoid the issue but not our issue.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1185,2018-08-02T22:31:13Z,2018-08-03T00:47:37Z,2018-08-03T07:52:19Z,MERGED,True,1,1,1,https://github.com/shadoxx,Corrected spacing between arguments to `cc` for Pulse chansrv Makefile,1,[],https://github.com/neutrinolabs/xrdp/pull/1185,https://github.com/shadoxx,5,https://github.com/neutrinolabs/xrdp/pull/1185#issuecomment-410107630,"This PR fixes #1181 where the Pulseaudio Chanserv module for xrdp fails to compile due to ""missing config.h"" on Ubuntu 18.04.
This is caused by incorrect spacing between the -I parameter and argument to cc in the Makefile.","I've rechecked this again and was able to get this module to compile by specifying an absolute file system path in PULSE_DIR. If PULSE_DIR is set to a relative path (~/pulseaudio-11.1), cc will complain about missing config.h. However, if PULSE_DIR is set to something like /home/user/pulseaudio-11.1 the compilation will succeed.
Still not sure why this is broken on Ubuntu 18.04, but considering the documentation suggests using a relative path to the pulse source tree, it's definitely a confusing issue.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1185,2018-08-02T22:31:13Z,2018-08-03T00:47:37Z,2018-08-03T07:52:19Z,MERGED,True,1,1,1,https://github.com/shadoxx,Corrected spacing between arguments to `cc` for Pulse chansrv Makefile,1,[],https://github.com/neutrinolabs/xrdp/pull/1185,https://github.com/metalefty,6,https://github.com/neutrinolabs/xrdp/pull/1185#issuecomment-410109059,"This PR fixes #1181 where the Pulseaudio Chanserv module for xrdp fails to compile due to ""missing config.h"" on Ubuntu 18.04.
This is caused by incorrect spacing between the -I parameter and argument to cc in the Makefile.","Okay, I understand. If it's not a real path, for example ~ as , shell doesn't expand -I~/somewhere -> -I/home/username/somewhere. To expand ~ to full path, space after -I is needed.
In this context,  your PR makes sense 😄 .",True,{'LAUGH': ['https://github.com/shadoxx']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1186,2018-08-03T02:15:47Z,2018-08-11T12:54:31Z,2018-08-11T12:54:31Z,MERGED,True,0,1355,8,https://github.com/speidy,chansrv: remove pulseaudio modules from xrdp source tree,1,[],https://github.com/neutrinolabs/xrdp/pull/1186,https://github.com/speidy,1,https://github.com/neutrinolabs/xrdp/pull/1186,"its actually an independent code which is not part of xrdp
moved to its own repoistory: https://github.com/neutrinolabs/pulseaudio-modules
Signed-off-by: Idan Freiberg speidy@gmail.com","its actually an independent code which is not part of xrdp
moved to its own repoistory: https://github.com/neutrinolabs/pulseaudio-modules
Signed-off-by: Idan Freiberg speidy@gmail.com",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1186,2018-08-03T02:15:47Z,2018-08-11T12:54:31Z,2018-08-11T12:54:31Z,MERGED,True,0,1355,8,https://github.com/speidy,chansrv: remove pulseaudio modules from xrdp source tree,1,[],https://github.com/neutrinolabs/xrdp/pull/1186,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1186#issuecomment-410124364,"its actually an independent code which is not part of xrdp
moved to its own repoistory: https://github.com/neutrinolabs/pulseaudio-modules
Signed-off-by: Idan Freiberg speidy@gmail.com",+1 but should be merged after updating references such as wiki or other documents.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1186,2018-08-03T02:15:47Z,2018-08-11T12:54:31Z,2018-08-11T12:54:31Z,MERGED,True,0,1355,8,https://github.com/speidy,chansrv: remove pulseaudio modules from xrdp source tree,1,[],https://github.com/neutrinolabs/xrdp/pull/1186,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/1186#issuecomment-410124655,"its actually an independent code which is not part of xrdp
moved to its own repoistory: https://github.com/neutrinolabs/pulseaudio-modules
Signed-off-by: Idan Freiberg speidy@gmail.com",Don't forget to remove pulse from xrdp/sesman/chansrv/Makefile.am.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1186,2018-08-03T02:15:47Z,2018-08-11T12:54:31Z,2018-08-11T12:54:31Z,MERGED,True,0,1355,8,https://github.com/speidy,chansrv: remove pulseaudio modules from xrdp source tree,1,[],https://github.com/neutrinolabs/xrdp/pull/1186,https://github.com/speidy,4,https://github.com/neutrinolabs/xrdp/pull/1186#issuecomment-410131994,"its actually an independent code which is not part of xrdp
moved to its own repoistory: https://github.com/neutrinolabs/pulseaudio-modules
Signed-off-by: Idan Freiberg speidy@gmail.com",@metalefty removed from Makefile.am - thanks,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1186,2018-08-03T02:15:47Z,2018-08-11T12:54:31Z,2018-08-11T12:54:31Z,MERGED,True,0,1355,8,https://github.com/speidy,chansrv: remove pulseaudio modules from xrdp source tree,1,[],https://github.com/neutrinolabs/xrdp/pull/1186,https://github.com/speidy,5,https://github.com/neutrinolabs/xrdp/pull/1186#issuecomment-410146902,"its actually an independent code which is not part of xrdp
moved to its own repoistory: https://github.com/neutrinolabs/pulseaudio-modules
Signed-off-by: Idan Freiberg speidy@gmail.com","@metalefty updated wiki page, updated readme in pulseaudio-modules repo (neutrinolabs/pulseaudio-module-xrdp#1)",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1186,2018-08-03T02:15:47Z,2018-08-11T12:54:31Z,2018-08-11T12:54:31Z,MERGED,True,0,1355,8,https://github.com/speidy,chansrv: remove pulseaudio modules from xrdp source tree,1,[],https://github.com/neutrinolabs/xrdp/pull/1186,https://github.com/speidy,6,https://github.com/neutrinolabs/xrdp/pull/1186#issuecomment-412255320,"its actually an independent code which is not part of xrdp
moved to its own repoistory: https://github.com/neutrinolabs/pulseaudio-modules
Signed-off-by: Idan Freiberg speidy@gmail.com",merge?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1186,2018-08-03T02:15:47Z,2018-08-11T12:54:31Z,2018-08-11T12:54:31Z,MERGED,True,0,1355,8,https://github.com/speidy,chansrv: remove pulseaudio modules from xrdp source tree,1,[],https://github.com/neutrinolabs/xrdp/pull/1186,https://github.com/metalefty,7,https://github.com/neutrinolabs/xrdp/pull/1186#issuecomment-412273029,"its actually an independent code which is not part of xrdp
moved to its own repoistory: https://github.com/neutrinolabs/pulseaudio-modules
Signed-off-by: Idan Freiberg speidy@gmail.com",yep!,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1187,2018-08-05T12:11:40Z,,2018-08-11T12:53:35Z,OPEN,False,37,1,3,https://github.com/s-k2,Fix comparison of IPv6 addresses in session_get_bydata(),4,['sesman'],https://github.com/neutrinolabs/xrdp/pull/1187,https://github.com/s-k2,1,https://github.com/neutrinolabs/xrdp/pull/1187,"I encountered a bug in sesman when UBI-policy is used and xrdp was compiled with IPv6 enabled (Debian does this for the xrdp-package). In this case sesman does not compare the IP-addresses correctly and reuses sessions from different addresses.
The problem can be located in sesman/session.c, line 144 in master. The client's address and the session-item's address are only compared up to the first colon using g_strncmp_d() to ignore the port-number. This approach works well for IPv4 but not for IPv6.
I attached a quick-and-dirty-hack to solve that problem which compares the addresses up to the last colon. It works with either IPv4 or IPv6 but assumes that a colon followed by a port-number is part of the client_ip-string.
I am not quite sure if session.c is the right place for the two new functions I added, maybe you have a better idea where to put them (or know of a better approach)","I encountered a bug in sesman when UBI-policy is used and xrdp was compiled with IPv6 enabled (Debian does this for the xrdp-package). In this case sesman does not compare the IP-addresses correctly and reuses sessions from different addresses.
The problem can be located in sesman/session.c, line 144 in master. The client's address and the session-item's address are only compared up to the first colon using g_strncmp_d() to ignore the port-number. This approach works well for IPv4 but not for IPv6.
I attached a quick-and-dirty-hack to solve that problem which compares the addresses up to the last colon. It works with either IPv4 or IPv6 but assumes that a colon followed by a port-number is part of the client_ip-string.
I am not quite sure if session.c is the right place for the two new functions I added, maybe you have a better idea where to put them (or know of a better approach)",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1187,2018-08-05T12:11:40Z,,2018-08-11T12:53:35Z,OPEN,False,37,1,3,https://github.com/s-k2,Fix comparison of IPv6 addresses in session_get_bydata(),4,['sesman'],https://github.com/neutrinolabs/xrdp/pull/1187,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1187#issuecomment-411969701,"I encountered a bug in sesman when UBI-policy is used and xrdp was compiled with IPv6 enabled (Debian does this for the xrdp-package). In this case sesman does not compare the IP-addresses correctly and reuses sessions from different addresses.
The problem can be located in sesman/session.c, line 144 in master. The client's address and the session-item's address are only compared up to the first colon using g_strncmp_d() to ignore the port-number. This approach works well for IPv4 but not for IPv6.
I attached a quick-and-dirty-hack to solve that problem which compares the addresses up to the last colon. It works with either IPv4 or IPv6 but assumes that a colon followed by a port-number is part of the client_ip-string.
I am not quite sure if session.c is the right place for the two new functions I added, maybe you have a better idea where to put them (or know of a better approach)",Good catch.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1187,2018-08-05T12:11:40Z,,2018-08-11T12:53:35Z,OPEN,False,37,1,3,https://github.com/s-k2,Fix comparison of IPv6 addresses in session_get_bydata(),4,['sesman'],https://github.com/neutrinolabs/xrdp/pull/1187,https://github.com/s-k2,3,https://github.com/neutrinolabs/xrdp/pull/1187#issuecomment-412234880,"I encountered a bug in sesman when UBI-policy is used and xrdp was compiled with IPv6 enabled (Debian does this for the xrdp-package). In this case sesman does not compare the IP-addresses correctly and reuses sessions from different addresses.
The problem can be located in sesman/session.c, line 144 in master. The client's address and the session-item's address are only compared up to the first colon using g_strncmp_d() to ignore the port-number. This approach works well for IPv4 but not for IPv6.
I attached a quick-and-dirty-hack to solve that problem which compares the addresses up to the last colon. It works with either IPv4 or IPv6 but assumes that a colon followed by a port-number is part of the client_ip-string.
I am not quite sure if session.c is the right place for the two new functions I added, maybe you have a better idea where to put them (or know of a better approach)",Would os_calls.c be the right place for it?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1187,2018-08-05T12:11:40Z,,2018-08-11T12:53:35Z,OPEN,False,37,1,3,https://github.com/s-k2,Fix comparison of IPv6 addresses in session_get_bydata(),4,['sesman'],https://github.com/neutrinolabs/xrdp/pull/1187,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/1187#issuecomment-412273255,"I encountered a bug in sesman when UBI-policy is used and xrdp was compiled with IPv6 enabled (Debian does this for the xrdp-package). In this case sesman does not compare the IP-addresses correctly and reuses sessions from different addresses.
The problem can be located in sesman/session.c, line 144 in master. The client's address and the session-item's address are only compared up to the first colon using g_strncmp_d() to ignore the port-number. This approach works well for IPv4 but not for IPv6.
I attached a quick-and-dirty-hack to solve that problem which compares the addresses up to the last colon. It works with either IPv4 or IPv6 but assumes that a colon followed by a port-number is part of the client_ip-string.
I am not quite sure if session.c is the right place for the two new functions I added, maybe you have a better idea where to put them (or know of a better approach)",os_calls.c is a possible candidate to put it on. but please don't hesitate to create a new file if needed.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1190,2018-08-13T05:36:48Z,2018-08-14T05:33:46Z,2018-08-14T05:36:02Z,MERGED,True,1,1,1,https://github.com/jsorg71,".gitignore, change configure_params.h to xrdp_configure_options.h",1,[],https://github.com/neutrinolabs/xrdp/pull/1190,https://github.com/jsorg71,1,https://github.com/neutrinolabs/xrdp/pull/1190,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1192,2018-08-15T13:05:16Z,2018-09-18T02:34:17Z,2018-09-18T02:34:17Z,MERGED,True,4,6,3,https://github.com/jsane-h8ms,xrdp: Use configured values instead of hardcoded ones in login_wnd inputs.,1,[],https://github.com/neutrinolabs/xrdp/pull/1192,https://github.com/jsane-h8ms,1,https://github.com/neutrinolabs/xrdp/pull/1192,"Configured ls_label_width and ls_input_width currently only apply to the combo label and dropdown. Other labels and inputs (username, password, port, ...) use hardcoded defaults.
Also had to change the default label width; for the previous value of 60, ""username"" ends up just a few pixels too wide.","Configured ls_label_width and ls_input_width currently only apply to the combo label and dropdown. Other labels and inputs (username, password, port, ...) use hardcoded defaults.
Also had to change the default label width; for the previous value of 60, ""username"" ends up just a few pixels too wide.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1192,2018-08-15T13:05:16Z,2018-09-18T02:34:17Z,2018-09-18T02:34:17Z,MERGED,True,4,6,3,https://github.com/jsane-h8ms,xrdp: Use configured values instead of hardcoded ones in login_wnd inputs.,1,[],https://github.com/neutrinolabs/xrdp/pull/1192,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1192#issuecomment-413376538,"Configured ls_label_width and ls_input_width currently only apply to the combo label and dropdown. Other labels and inputs (username, password, port, ...) use hardcoded defaults.
Also had to change the default label width; for the previous value of 60, ""username"" ends up just a few pixels too wide.",good catch.,True,{'THUMBS_UP': ['https://github.com/jsane-h8ms']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1193,2018-08-16T08:52:05Z,2018-09-14T07:18:34Z,2018-10-02T08:45:34Z,MERGED,True,18,3,3,https://github.com/metalefty,TLSv1.3,3,[],https://github.com/neutrinolabs/xrdp/pull/1193,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1193,"As TLSv1.3 has been released, add some code to enable TLSv1.3.
Still testing.","As TLSv1.3 has been released, add some code to enable TLSv1.3.
Still testing.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1193,2018-08-16T08:52:05Z,2018-09-14T07:18:34Z,2018-10-02T08:45:34Z,MERGED,True,18,3,3,https://github.com/metalefty,TLSv1.3,3,[],https://github.com/neutrinolabs/xrdp/pull/1193,https://github.com/speidy,2,https://github.com/neutrinolabs/xrdp/pull/1193#issuecomment-415691760,"As TLSv1.3 has been released, add some code to enable TLSv1.3.
Still testing.",is there any RDP clients that support TLS v1.3 out there?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1193,2018-08-16T08:52:05Z,2018-09-14T07:18:34Z,2018-10-02T08:45:34Z,MERGED,True,18,3,3,https://github.com/metalefty,TLSv1.3,3,[],https://github.com/neutrinolabs/xrdp/pull/1193,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/1193#issuecomment-415698526,"As TLSv1.3 has been released, add some code to enable TLSv1.3.
Still testing.","It depends on OpenSSL or alternative SSL libraries. If FreeRDP is built with SSL libraries which support TLS v1.3, FreeRDP can use TLS v1.3. OpenSSL 1.1.1 is the one. I'm trying to build FreeRDP with OpenSSL 1.1.1 and testing.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1193,2018-08-16T08:52:05Z,2018-09-14T07:18:34Z,2018-10-02T08:45:34Z,MERGED,True,18,3,3,https://github.com/metalefty,TLSv1.3,3,[],https://github.com/neutrinolabs/xrdp/pull/1193,https://github.com/speidy,4,https://github.com/neutrinolabs/xrdp/pull/1193#issuecomment-415960233,"As TLSv1.3 has been released, add some code to enable TLSv1.3.
Still testing.",So its working out of the box if new openssl installed ?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1193,2018-08-16T08:52:05Z,2018-09-14T07:18:34Z,2018-10-02T08:45:34Z,MERGED,True,18,3,3,https://github.com/metalefty,TLSv1.3,3,[],https://github.com/neutrinolabs/xrdp/pull/1193,https://github.com/metalefty,5,https://github.com/neutrinolabs/xrdp/pull/1193#issuecomment-416791452,"As TLSv1.3 has been released, add some code to enable TLSv1.3.
Still testing.","Not only installed, FreeRDP and xrdp need to be built with new OpenSSL.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1193,2018-08-16T08:52:05Z,2018-09-14T07:18:34Z,2018-10-02T08:45:34Z,MERGED,True,18,3,3,https://github.com/metalefty,TLSv1.3,3,[],https://github.com/neutrinolabs/xrdp/pull/1193,https://github.com/metalefty,6,https://github.com/neutrinolabs/xrdp/pull/1193#issuecomment-420672346,"As TLSv1.3 has been released, add some code to enable TLSv1.3.
Still testing.","Now FreeBSD has come up with OpenSSL 1.1.1, I can test TLSv1.3 right now
https://svnweb.freebsd.org/ports/head/security/openssl111/?view=log",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1193,2018-08-16T08:52:05Z,2018-09-14T07:18:34Z,2018-10-02T08:45:34Z,MERGED,True,18,3,3,https://github.com/metalefty,TLSv1.3,3,[],https://github.com/neutrinolabs/xrdp/pull/1193,https://github.com/metalefty,7,https://github.com/neutrinolabs/xrdp/pull/1193#issuecomment-421049608,"As TLSv1.3 has been released, add some code to enable TLSv1.3.
Still testing.","Got it!
OS
FreeBSD 11.2-RELEASE-p2
Server
Compiled this PR. OpenSSL version is 1.1.1.
xrdp 0.9.7
  A Remote Desktop Protocol Server.
  Copyright (C) 2004-2018 Jay Sorg, Neutrino Labs, and all contributors.
  See https://github.com/neutrinolabs/xrdp for more information.

  Configure options:
      --localstatedir=/var
      --enable-strict-locations
      --with-pkgconfigdir=/usr/local/libdata/pkgconfig
      --enable-jpeg
      --enable-pixman
      --enable-rfxcodec
      --enable-painter
      --disable-xrdpdebug
      --enable-fdkaac
      --disable-fuse
      --enable-ipv6
      --enable-mp3lame
      --enable-opus
      --x-libraries=/usr/local/lib
      --x-includes=/usr/local/include
      --prefix=/usr/local
      --mandir=/usr/local/man
      --disable-silent-rules
      --infodir=/usr/local/info/
      --build=amd64-portbld-freebsd11.2
      build_alias=amd64-portbld-freebsd11.2
      CC=cc
      CFLAGS=-O2 -pipe  -fstack-protector -isystem /usr/local/include -fno-strict-aliasing
      LDFLAGS= -lssl -Wl,-rpath,/usr/local/lib -fstack-protector
      LIBS=-L/usr/local/lib
      CPPFLAGS=-isystem /usr/local/include
      CPP=cpp
      PKG_CONFIG=pkgconf

  Compiled with OpenSSL 1.1.1  11 Sep 2018

Client
FreeRDP 2.0.0-rc3 compiled with OpenSSL 1.1.1.
Test
xfreerdp /v:localhost /log-level:DEBUG

Unfortunately,  FreeRDP doesn't print TLS version to log but I can TLSv1.3 is being used in xrdp.log.
[20180914-00:05:48] [INFO ] Socket 12: AF_INET6 connection received from ::ffff:127.0.0.1 port 44963
[20180914-00:05:48] [DEBUG] Closed socket 12 (AF_INET6 ::ffff:127.0.0.1 port 3389)
[20180914-00:05:48] [DEBUG] Closed socket 11 (AF_INET6 :: port 3389)
[20180914-00:05:48] [INFO ] Using default X.509 certificate: /usr/local/etc/xrdp/cert.pem
[20180914-00:05:48] [INFO ] Using default X.509 key file: /usr/local/etc/xrdp/key.pem
[20180914-00:05:48] [DEBUG] TLSv1.3 enabled
[20180914-00:05:48] [DEBUG] TLSv1.2 enabled
[20180914-00:05:48] [DEBUG] TLSv1.1 enabled
[20180914-00:05:48] [DEBUG] TLSv1 enabled
[20180914-00:05:48] [DEBUG] Security layer: requested 3, selected 1
[20180914-00:05:56] [INFO ] connected client computer name: tls13.example.com
[20180914-00:05:56] [INFO ] TLS connection established from ::ffff:127.0.0.1 port 44963: TLSv1.3 with cipher TLS_AES_256_GCM_SHA384
[20180914-00:05:56] [DEBUG] xrdp_00014f9c_wm_login_mode_event_00000001
[20180914-00:05:56] [INFO ] Loading keymap file /usr/local/etc/xrdp/km-00000409.ini

TLSv1.3 with cipher TLS_AES_256_GCM_SHA384",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1193,2018-08-16T08:52:05Z,2018-09-14T07:18:34Z,2018-10-02T08:45:34Z,MERGED,True,18,3,3,https://github.com/metalefty,TLSv1.3,3,[],https://github.com/neutrinolabs/xrdp/pull/1193,https://github.com/metalefty,8,https://github.com/neutrinolabs/xrdp/pull/1193#issuecomment-421052155,"As TLSv1.3 has been released, add some code to enable TLSv1.3.
Still testing.","If tls_ciphers=TLSv1, TLSv1.1, TLSv1.2, TLS1.3 will not be used.
[20180914-00:36:46] [INFO ] TLS connection established from ::ffff:127.0.0.1 port 36559: TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1193,2018-08-16T08:52:05Z,2018-09-14T07:18:34Z,2018-10-02T08:45:34Z,MERGED,True,18,3,3,https://github.com/metalefty,TLSv1.3,3,[],https://github.com/neutrinolabs/xrdp/pull/1193,https://github.com/metalefty,9,https://github.com/neutrinolabs/xrdp/pull/1193#issuecomment-421194262,"As TLSv1.3 has been released, add some code to enable TLSv1.3.
Still testing.","If xrdp is compiled with OpenSSL not capable of TLSv1.3, will be warned like this.
[20180914-09:30:38] [INFO ] Socket 12: AF_INET6 connection received from ::ffff:192.168.24.5 port 24875                
[20180914-09:30:38] [DEBUG] Closed socket 12 (AF_INET6 ::ffff:192.168.24.115 port 3389)                                
[20180914-09:30:38] [DEBUG] Closed socket 11 (AF_INET6 :: port 3389)                                                   
[20180914-09:30:38] [INFO ] Using default X.509 certificate: /usr/local/etc/xrdp/cert.pem                              
[20180914-09:30:38] [INFO ] Using default X.509 key file: /usr/local/etc/xrdp/key.pem                                  
[20180914-09:30:38] [WARN ] TLSv1.3 enabled by config, but not supported by system OpenSSL                             
[20180914-09:30:38] [DEBUG] TLSv1.2 enabled
[20180914-09:30:38] [DEBUG] Security layer: requested 3, selected 1",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1198,2018-08-27T06:14:00Z,2018-09-04T07:20:10Z,2018-09-04T07:20:14Z,MERGED,True,7,0,1,https://github.com/metalefty,sesman: pass pulse socket name via environment variable,2,[],https://github.com/neutrinolabs/xrdp/pull/1198,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1198,See also: neutrinolabs/pulseaudio-module-xrdp#15,See also: neutrinolabs/pulseaudio-module-xrdp#15,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1198,2018-08-27T06:14:00Z,2018-09-04T07:20:10Z,2018-09-04T07:20:14Z,MERGED,True,7,0,1,https://github.com/metalefty,sesman: pass pulse socket name via environment variable,2,[],https://github.com/neutrinolabs/xrdp/pull/1198,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1198#issuecomment-416843692,See also: neutrinolabs/pulseaudio-module-xrdp#15,@speidy @jsorg71 any thoughts?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1206,2018-09-11T03:00:01Z,2018-09-12T06:51:08Z,2018-09-12T06:56:57Z,MERGED,True,5,0,1,https://github.com/metalefty,show more helpful message if xrdp-dis failed,1,[],https://github.com/neutrinolabs/xrdp/pull/1206,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1206,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1216,2018-09-25T04:51:26Z,2018-09-25T06:09:23Z,2018-09-27T07:52:48Z,MERGED,True,29,2,3,https://github.com/metalefty,Prepare release v0.9.8,3,[],https://github.com/neutrinolabs/xrdp/pull/1216,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1216,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1216,2018-09-25T04:51:26Z,2018-09-25T06:09:23Z,2018-09-27T07:52:48Z,MERGED,True,29,2,3,https://github.com/metalefty,Prepare release v0.9.8,3,[],https://github.com/neutrinolabs/xrdp/pull/1216,https://github.com/FelixZhang,2,https://github.com/neutrinolabs/xrdp/pull/1216#issuecomment-424257099,,Please also add PGP signature for download. Thank you very much for the hard work.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1216,2018-09-25T04:51:26Z,2018-09-25T06:09:23Z,2018-09-27T07:52:48Z,MERGED,True,29,2,3,https://github.com/metalefty,Prepare release v0.9.8,3,[],https://github.com/neutrinolabs/xrdp/pull/1216,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/1216#issuecomment-424552421,,@FelixZhang Done. I'll put it in the repository later but I added it to release assets at this time.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1216,2018-09-25T04:51:26Z,2018-09-25T06:09:23Z,2018-09-27T07:52:48Z,MERGED,True,29,2,3,https://github.com/metalefty,Prepare release v0.9.8,3,[],https://github.com/neutrinolabs/xrdp/pull/1216,https://github.com/FelixZhang,4,https://github.com/neutrinolabs/xrdp/pull/1216#issuecomment-424994084,,Thank you!,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1224,2018-10-11T05:36:23Z,2018-10-12T05:09:21Z,2018-10-12T05:12:10Z,MERGED,True,2270,1700,16,https://github.com/jsorg71,work on drdynvc,2,[],https://github.com/neutrinolabs/xrdp/pull/1224,https://github.com/jsorg71,1,https://github.com/neutrinolabs/xrdp/pull/1224,"remove not used chansrv <-> xrdp messages
move static channel disable control into libxrdp
remove some blocking read, write chansrv calls
add drdynvc calls to libxrdp
add drdynvc calls to chansrv
channel cleanup","remove not used chansrv <-> xrdp messages
move static channel disable control into libxrdp
remove some blocking read, write chansrv calls
add drdynvc calls to libxrdp
add drdynvc calls to chansrv
channel cleanup",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1225,2018-10-11T10:16:12Z,2018-10-18T01:49:09Z,2018-10-18T01:49:09Z,MERGED,True,12,3,1,https://github.com/savisko,"Fix crash of xrdp-chansrv process, issue #1202.",2,[],https://github.com/neutrinolabs/xrdp/pull/1225,https://github.com/savisko,1,https://github.com/neutrinolabs/xrdp/pull/1225,In xfuse_create_file_in_xrdp_fs insure that xfuse_fs is properly initialized.,In xfuse_create_file_in_xrdp_fs insure that xfuse_fs is properly initialized.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1225,2018-10-11T10:16:12Z,2018-10-18T01:49:09Z,2018-10-18T01:49:09Z,MERGED,True,12,3,1,https://github.com/savisko,"Fix crash of xrdp-chansrv process, issue #1202.",2,[],https://github.com/neutrinolabs/xrdp/pull/1225,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1225#issuecomment-429229123,In xfuse_create_file_in_xrdp_fs insure that xfuse_fs is properly initialized.,"I'm looking at this. The changes are simple, looks good so far.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1227,2018-10-16T08:01:56Z,2018-10-18T01:40:13Z,2018-10-18T01:40:16Z,MERGED,True,13,0,2,https://github.com/metalefty,Ressurect IdleTimeLimit,2,[],https://github.com/neutrinolabs/xrdp/pull/1227,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1227,I'm working on implementing disconnection by idle timeout. Will be included in xorgxrdp v0.2.9.,I'm working on implementing disconnection by idle timeout. Will be included in xorgxrdp v0.2.9.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1232,2018-10-19T01:56:46Z,2018-10-26T00:24:57Z,2018-10-26T00:25:01Z,MERGED,True,0,35,2,https://github.com/metalefty,Deprecate x11rdp and simplify session types,3,[],https://github.com/neutrinolabs/xrdp/pull/1232,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1232,"Too many session type choices make users confused. I think

Xorg
Xvnc
vnc-any
rdp-any

are enough.","Too many session type choices make users confused. I think

Xorg
Xvnc
vnc-any
rdp-any

are enough.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1233,2018-10-24T07:48:20Z,2018-10-25T09:40:41Z,2018-10-25T09:40:41Z,CLOSED,False,192,7,8,https://github.com/daixj755,Fix two issues with Microsoft Remote Desktop for MAC,2,[],https://github.com/neutrinolabs/xrdp/pull/1233,https://github.com/daixj755,1,https://github.com/neutrinolabs/xrdp/pull/1233,"Fix two issues with Microsoft Remote Desktop for MAC:
1) Microsoft Remote Desktop 8.0.30030, Nothing displayed after log on to windows
2) Microsoft Remote Desktop 10.2.2(1291), No Fonts displayed, looks like https://github.com/neutrinolabs/xrdp/issues/643","Fix two issues with Microsoft Remote Desktop for MAC:
1) Microsoft Remote Desktop 8.0.30030, Nothing displayed after log on to windows
2) Microsoft Remote Desktop 10.2.2(1291), No Fonts displayed, looks like https://github.com/neutrinolabs/xrdp/issues/643",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1233,2018-10-24T07:48:20Z,2018-10-25T09:40:41Z,2018-10-25T09:40:41Z,CLOSED,False,192,7,8,https://github.com/daixj755,Fix two issues with Microsoft Remote Desktop for MAC,2,[],https://github.com/neutrinolabs/xrdp/pull/1233,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1233#issuecomment-432662482,"Fix two issues with Microsoft Remote Desktop for MAC:
1) Microsoft Remote Desktop 8.0.30030, Nothing displayed after log on to windows
2) Microsoft Remote Desktop 10.2.2(1291), No Fonts displayed, looks like https://github.com/neutrinolabs/xrdp/issues/643",Awesome! But could you create PRs separately?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1233,2018-10-24T07:48:20Z,2018-10-25T09:40:41Z,2018-10-25T09:40:41Z,CLOSED,False,192,7,8,https://github.com/daixj755,Fix two issues with Microsoft Remote Desktop for MAC,2,[],https://github.com/neutrinolabs/xrdp/pull/1233,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/1233#issuecomment-432886531,"Fix two issues with Microsoft Remote Desktop for MAC:
1) Microsoft Remote Desktop 8.0.30030, Nothing displayed after log on to windows
2) Microsoft Remote Desktop 10.2.2(1291), No Fonts displayed, looks like https://github.com/neutrinolabs/xrdp/issues/643",Confirmed fonts are properly displayed.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1233,2018-10-24T07:48:20Z,2018-10-25T09:40:41Z,2018-10-25T09:40:41Z,CLOSED,False,192,7,8,https://github.com/daixj755,Fix two issues with Microsoft Remote Desktop for MAC,2,[],https://github.com/neutrinolabs/xrdp/pull/1233,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/1233#issuecomment-432890257,"Fix two issues with Microsoft Remote Desktop for MAC:
1) Microsoft Remote Desktop 8.0.30030, Nothing displayed after log on to windows
2) Microsoft Remote Desktop 10.2.2(1291), No Fonts displayed, looks like https://github.com/neutrinolabs/xrdp/issues/643",This fix is also effective with #367.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1233,2018-10-24T07:48:20Z,2018-10-25T09:40:41Z,2018-10-25T09:40:41Z,CLOSED,False,192,7,8,https://github.com/daixj755,Fix two issues with Microsoft Remote Desktop for MAC,2,[],https://github.com/neutrinolabs/xrdp/pull/1233,https://github.com/daixj755,5,https://github.com/neutrinolabs/xrdp/pull/1233#issuecomment-432895737,"Fix two issues with Microsoft Remote Desktop for MAC:
1) Microsoft Remote Desktop 8.0.30030, Nothing displayed after log on to windows
2) Microsoft Remote Desktop 10.2.2(1291), No Fonts displayed, looks like https://github.com/neutrinolabs/xrdp/issues/643","I created another PR #1235 separately for issue #367, please check that one.
I will close this later.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1235,2018-10-25T02:46:33Z,2018-10-31T01:03:52Z,2018-11-23T03:33:56Z,MERGED,True,179,6,4,https://github.com/daixj755,"Support Cache Glyph Revison 2, issue #367",3,[],https://github.com/neutrinolabs/xrdp/pull/1235,https://github.com/daixj755,1,https://github.com/neutrinolabs/xrdp/pull/1235,"No Fonts desplayed on iOS with the Microsoft Remote Desktop 10.2.2(1291), issue #367","No Fonts desplayed on iOS with the Microsoft Remote Desktop 10.2.2(1291), issue #367",True,{'THUMBS_UP': ['https://github.com/danielperna84']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1235,2018-10-25T02:46:33Z,2018-10-31T01:03:52Z,2018-11-23T03:33:56Z,MERGED,True,179,6,4,https://github.com/daixj755,"Support Cache Glyph Revison 2, issue #367",3,[],https://github.com/neutrinolabs/xrdp/pull/1235,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1235#issuecomment-432976625,"No Fonts desplayed on iOS with the Microsoft Remote Desktop 10.2.2(1291), issue #367","Overall, LGTM.
@jsorg71 @speidy Any thoughts?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1235,2018-10-25T02:46:33Z,2018-10-31T01:03:52Z,2018-11-23T03:33:56Z,MERGED,True,179,6,4,https://github.com/daixj755,"Support Cache Glyph Revison 2, issue #367",3,[],https://github.com/neutrinolabs/xrdp/pull/1235,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/1235#issuecomment-434524661,"No Fonts desplayed on iOS with the Microsoft Remote Desktop 10.2.2(1291), issue #367","Let's merge, it actually works fine for me. If any problems, consider & fix it later.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1235,2018-10-25T02:46:33Z,2018-10-31T01:03:52Z,2018-11-23T03:33:56Z,MERGED,True,179,6,4,https://github.com/daixj755,"Support Cache Glyph Revison 2, issue #367",3,[],https://github.com/neutrinolabs/xrdp/pull/1235,https://github.com/jsorg71,4,https://github.com/neutrinolabs/xrdp/pull/1235#issuecomment-434587615,"No Fonts desplayed on iOS with the Microsoft Remote Desktop 10.2.2(1291), issue #367","Thanks @metalefty
From what I looked at, this is great.  Great to see work on caps and orders.
You're right, we can create new issue if any problems.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1236,2018-10-25T06:54:26Z,2018-10-25T07:21:45Z,2018-12-14T01:45:15Z,MERGED,True,6,0,1,https://github.com/metalefty,common: add constants of glyph support level,1,[],https://github.com/neutrinolabs/xrdp/pull/1236,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1236,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1240,2018-11-01T00:26:58Z,2018-11-02T00:30:40Z,2018-11-02T00:30:44Z,MERGED,True,1060,1,3,https://github.com/metalefty,add Spanish (Latin American) keyboard,2,[],https://github.com/neutrinolabs/xrdp/pull/1240,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1240,,,True,{'HEART': ['https://github.com/ivanbaldo']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1244,2018-11-07T09:58:54Z,2018-11-07T23:56:28Z,2018-12-14T01:45:13Z,MERGED,True,1,1,1,https://github.com/metalefty,correct latam keylayout value,1,[],https://github.com/neutrinolabs/xrdp/pull/1244,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1244,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1253,2018-11-23T09:52:00Z,2018-11-27T02:09:07Z,2018-12-12T12:07:47Z,MERGED,True,25,14,5,https://github.com/daixj755,neutrinordp: don't enable remote_app if the INFO_RAIL flag is not set,1,[],https://github.com/neutrinolabs/xrdp/pull/1253,https://github.com/daixj755,1,https://github.com/neutrinolabs/xrdp/pull/1253,"I'm trying to connect xrdp with Microsoft Remote Desktop for Mac 8(8.0.30030),
Nothing displayed after logged in with neutrinordp-any.This is the output:
lfreerdp_context_new: 0x1fae370
loaded module 'libxrdpneutrinordp.so' ok, interface size 408984, version 3
lfreerdp_pre_connect:
The colormap is all NULL
Railsupport !!!!!!!!!!!!!!!!!!
host 10.10.xx.xx port 3389
connected to 10.10.xx.xx:3389
null server certificate
lxrdp_connect: freerdp_connect returned 1
...

I think remote_app should not been enable if INFO_RAIL is not set.
MS-RDPERP 3.3.5.1.3 and 3.3.5.1.4","I'm trying to connect xrdp with Microsoft Remote Desktop for Mac 8(8.0.30030),
Nothing displayed after logged in with neutrinordp-any.This is the output:
lfreerdp_context_new: 0x1fae370
loaded module 'libxrdpneutrinordp.so' ok, interface size 408984, version 3
lfreerdp_pre_connect:
The colormap is all NULL
Railsupport !!!!!!!!!!!!!!!!!!
host 10.10.xx.xx port 3389
connected to 10.10.xx.xx:3389
null server certificate
lxrdp_connect: freerdp_connect returned 1
...

I think remote_app should not been enable if INFO_RAIL is not set.
MS-RDPERP 3.3.5.1.3 and 3.3.5.1.4",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1253,2018-11-23T09:52:00Z,2018-11-27T02:09:07Z,2018-12-12T12:07:47Z,MERGED,True,25,14,5,https://github.com/daixj755,neutrinordp: don't enable remote_app if the INFO_RAIL flag is not set,1,[],https://github.com/neutrinolabs/xrdp/pull/1253,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1253#issuecomment-441871047,"I'm trying to connect xrdp with Microsoft Remote Desktop for Mac 8(8.0.30030),
Nothing displayed after logged in with neutrinordp-any.This is the output:
lfreerdp_context_new: 0x1fae370
loaded module 'libxrdpneutrinordp.so' ok, interface size 408984, version 3
lfreerdp_pre_connect:
The colormap is all NULL
Railsupport !!!!!!!!!!!!!!!!!!
host 10.10.xx.xx port 3389
connected to 10.10.xx.xx:3389
null server certificate
lxrdp_connect: freerdp_connect returned 1
...

I think remote_app should not been enable if INFO_RAIL is not set.
MS-RDPERP 3.3.5.1.3 and 3.3.5.1.4",Good catch.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1256,2018-11-27T02:05:32Z,2018-11-29T00:35:38Z,2018-11-29T00:35:41Z,MERGED,True,118,117,2,https://github.com/metalefty,Rename constants,5,[],https://github.com/neutrinolabs/xrdp/pull/1256,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1256,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1256,2018-11-27T02:05:32Z,2018-11-29T00:35:38Z,2018-11-29T00:35:41Z,MERGED,True,118,117,2,https://github.com/metalefty,Rename constants,5,[],https://github.com/neutrinolabs/xrdp/pull/1256,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1256#issuecomment-442660008,,No logic changes except pointed out by @pomoika . Renaming has been done by IDE's refactoring feature. Ready to merge.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1257,2018-11-27T16:34:08Z,2018-11-28T01:20:06Z,2018-11-29T01:27:07Z,MERGED,True,11,0,1,https://github.com/metalefty,Fix build with FDK AAC v2,1,[],https://github.com/neutrinolabs/xrdp/pull/1257,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1257,"Original fix provided by takefu. See also:
https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=233556","Original fix provided by takefu. See also:
https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=233556",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1257,2018-11-27T16:34:08Z,2018-11-28T01:20:06Z,2018-11-29T01:27:07Z,MERGED,True,11,0,1,https://github.com/metalefty,Fix build with FDK AAC v2,1,[],https://github.com/neutrinolabs/xrdp/pull/1257,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1257#issuecomment-442125784,"Original fix provided by takefu. See also:
https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=233556",Tested with FreeBSD 12 / fdk-aac 2.0.0. It properly sounds.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1257,2018-11-27T16:34:08Z,2018-11-28T01:20:06Z,2018-11-29T01:27:07Z,MERGED,True,11,0,1,https://github.com/metalefty,Fix build with FDK AAC v2,1,[],https://github.com/neutrinolabs/xrdp/pull/1257,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/1257#issuecomment-442670604,"Original fix provided by takefu. See also:
https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=233556","The bugzilla URL in the commit message is wrong. See this:
https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=233558",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1267,2018-12-13T06:30:10Z,2018-12-14T01:29:07Z,2018-12-14T01:29:51Z,MERGED,True,176,178,6,https://github.com/metalefty,Rename constants,5,[],https://github.com/neutrinolabs/xrdp/pull/1267,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1267,"Use more standard names found in MS Document.
Before starting #1229 and #1266, just renaming.","Use more standard names found in MS Document.
Before starting #1229 and #1266, just renaming.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1268,2018-12-13T06:51:58Z,2018-12-13T08:20:48Z,2018-12-13T08:20:48Z,CLOSED,False,1,1,1,https://github.com/daixj755,xrdp_caps.c: CAPSTYPE_OFFSCREENCACHE,1,[],https://github.com/neutrinolabs/xrdp/pull/1268,https://github.com/daixj755,1,https://github.com/neutrinolabs/xrdp/pull/1268,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1268,2018-12-13T06:51:58Z,2018-12-13T08:20:48Z,2018-12-13T08:20:48Z,CLOSED,False,1,1,1,https://github.com/daixj755,xrdp_caps.c: CAPSTYPE_OFFSCREENCACHE,1,[],https://github.com/neutrinolabs/xrdp/pull/1268,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1268#issuecomment-446880874,,"Pushed as a part of #1267. Sorry for the breakage, thanks!",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1270,2018-12-13T08:25:01Z,2020-10-22T15:12:56Z,2020-10-25T10:09:18Z,MERGED,True,12,2,1,https://github.com/d-yacenko,Solve problem with run bash script with parameters on xrdp. ,11,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/1270,https://github.com/d-yacenko,1,https://github.com/neutrinolabs/xrdp/pull/1270,"Problem with start bash script with parameters on xrdp as follows - rdesktop -s ""/my/bash/script.sh parameters"" ip_address . If you try this - xrdp run startwm.sh instead you script.
This patch fixed this issue.","Problem with start bash script with parameters on xrdp as follows - rdesktop -s ""/my/bash/script.sh parameters"" ip_address . If you try this - xrdp run startwm.sh instead you script.
This patch fixed this issue.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1270,2018-12-13T08:25:01Z,2020-10-22T15:12:56Z,2020-10-25T10:09:18Z,MERGED,True,12,2,1,https://github.com/d-yacenko,Solve problem with run bash script with parameters on xrdp. ,11,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/1270,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1270#issuecomment-446884562,"Problem with start bash script with parameters on xrdp as follows - rdesktop -s ""/my/bash/script.sh parameters"" ip_address . If you try this - xrdp run startwm.sh instead you script.
This patch fixed this issue.",You must read coding_style.md first of all.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1270,2018-12-13T08:25:01Z,2020-10-22T15:12:56Z,2020-10-25T10:09:18Z,MERGED,True,12,2,1,https://github.com/d-yacenko,Solve problem with run bash script with parameters on xrdp. ,11,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/1270,https://github.com/d-yacenko,3,https://github.com/neutrinolabs/xrdp/pull/1270#issuecomment-446891345,"Problem with start bash script with parameters on xrdp as follows - rdesktop -s ""/my/bash/script.sh parameters"" ip_address . If you try this - xrdp run startwm.sh instead you script.
This patch fixed this issue.",style fixed,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1270,2018-12-13T08:25:01Z,2020-10-22T15:12:56Z,2020-10-25T10:09:18Z,MERGED,True,12,2,1,https://github.com/d-yacenko,Solve problem with run bash script with parameters on xrdp. ,11,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/1270,https://github.com/d-yacenko,4,https://github.com/neutrinolabs/xrdp/pull/1270#issuecomment-446969707,"Problem with start bash script with parameters on xrdp as follows - rdesktop -s ""/my/bash/script.sh parameters"" ip_address . If you try this - xrdp run startwm.sh instead you script.
This patch fixed this issue.",finally fixed,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1270,2018-12-13T08:25:01Z,2020-10-22T15:12:56Z,2020-10-25T10:09:18Z,MERGED,True,12,2,1,https://github.com/d-yacenko,Solve problem with run bash script with parameters on xrdp. ,11,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/1270,https://github.com/d-yacenko,5,https://github.com/neutrinolabs/xrdp/pull/1270#issuecomment-545868813,"Problem with start bash script with parameters on xrdp as follows - rdesktop -s ""/my/bash/script.sh parameters"" ip_address . If you try this - xrdp run startwm.sh instead you script.
This patch fixed this issue.","Hi.
Why was removed my code (to pass a parameter when running a script in a session)? It code works fine for me in production.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1270,2018-12-13T08:25:01Z,2020-10-22T15:12:56Z,2020-10-25T10:09:18Z,MERGED,True,12,2,1,https://github.com/d-yacenko,Solve problem with run bash script with parameters on xrdp. ,11,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/1270,https://github.com/metalefty,6,https://github.com/neutrinolabs/xrdp/pull/1270#issuecomment-546155586,"Problem with start bash script with parameters on xrdp as follows - rdesktop -s ""/my/bash/script.sh parameters"" ip_address . If you try this - xrdp run startwm.sh instead you script.
This patch fixed this issue.",What do you mean? I didn't remove anything.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1270,2018-12-13T08:25:01Z,2020-10-22T15:12:56Z,2020-10-25T10:09:18Z,MERGED,True,12,2,1,https://github.com/d-yacenko,Solve problem with run bash script with parameters on xrdp. ,11,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/1270,https://github.com/d-yacenko,7,https://github.com/neutrinolabs/xrdp/pull/1270#issuecomment-546206560,"Problem with start bash script with parameters on xrdp as follows - rdesktop -s ""/my/bash/script.sh parameters"" ip_address . If you try this - xrdp run startwm.sh instead you script.
This patch fixed this issue.","I'm sorry, I apparently misunderstood. I thought you removed my patch from the next build.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1270,2018-12-13T08:25:01Z,2020-10-22T15:12:56Z,2020-10-25T10:09:18Z,MERGED,True,12,2,1,https://github.com/d-yacenko,Solve problem with run bash script with parameters on xrdp. ,11,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/1270,https://github.com/matt335672,8,https://github.com/neutrinolabs/xrdp/pull/1270#issuecomment-705451499,"Problem with start bash script with parameters on xrdp as follows - rdesktop -s ""/my/bash/script.sh parameters"" ip_address . If you try this - xrdp run startwm.sh instead you script.
This patch fixed this issue.","Hi @d-yacenko
I've had a look at your code above, and it doesn't quite seem to be doing what I'd hoped it would be doing.
In particular more than one parameter does not seem to be being passed through to the script properly. All the parameters get clumped into a single parameter, which probably isn't what the user is expecting.
I ran a few tests on an Ubuntu 18.04 system with bash 4.4.18
Here's params.sh:-
#!/bin/bash

echo Param count : $#
declare -i n=0
echo ""$0""
for i in ""$@""; do
    ((++n))
    echo ""[$n] : $i""
done
Looking at your code, if program contains params.sh aaa bbb ccc when your code is entered, your code results in the following call:-
g_execlp3(""params.sh"", ""-c"", ""aaa bbb ccc"");

This translates into
execlp(""script.sh"", ""-c"", ""aaa bbb ccc"",NULL);

and the output of the script is:-
Param count : 1
./params.sh
[1] : aaa bbb ccc

So bash (my copy at least) is ignoring the -c.
I replaced params.sh with the equivalent C code and got very similar results.
I can suggest a couple of ways to fix this, at least one of which isn't too different from where you are now. However, I'm a bit concerned I may not have fully grasped the reasoning behind your -c parameter, so I might be going off on a bit of a tangent. Before we go any further I though I should share my findings with you and see what your comments are.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1270,2018-12-13T08:25:01Z,2020-10-22T15:12:56Z,2020-10-25T10:09:18Z,MERGED,True,12,2,1,https://github.com/d-yacenko,Solve problem with run bash script with parameters on xrdp. ,11,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/1270,https://github.com/d-yacenko,9,https://github.com/neutrinolabs/xrdp/pull/1270#issuecomment-705972896,"Problem with start bash script with parameters on xrdp as follows - rdesktop -s ""/my/bash/script.sh parameters"" ip_address . If you try this - xrdp run startwm.sh instead you script.
This patch fixed this issue.","Hi!
You're right. I solved myself problem of transferring only one parameter.
It will be my great pleasure to modify the suggested code to accept any number of parameters. Unfortunately I'm busy right now and can do it in a few days - probably over the weekend.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1270,2018-12-13T08:25:01Z,2020-10-22T15:12:56Z,2020-10-25T10:09:18Z,MERGED,True,12,2,1,https://github.com/d-yacenko,Solve problem with run bash script with parameters on xrdp. ,11,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/1270,https://github.com/matt335672,10,https://github.com/neutrinolabs/xrdp/pull/1270#issuecomment-706159407,"Problem with start bash script with parameters on xrdp as follows - rdesktop -s ""/my/bash/script.sh parameters"" ip_address . If you try this - xrdp run startwm.sh instead you script.
This patch fixed this issue.",That's great - I'll have a look at it after the weekend.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1270,2018-12-13T08:25:01Z,2020-10-22T15:12:56Z,2020-10-25T10:09:18Z,MERGED,True,12,2,1,https://github.com/d-yacenko,Solve problem with run bash script with parameters on xrdp. ,11,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/1270,https://github.com/d-yacenko,11,https://github.com/neutrinolabs/xrdp/pull/1270#issuecomment-706694654,"Problem with start bash script with parameters on xrdp as follows - rdesktop -s ""/my/bash/script.sh parameters"" ip_address . If you try this - xrdp run startwm.sh instead you script.
This patch fixed this issue.","Hi.
I am passing new code to access many parameters.
Note that in this code, the execution string is limited to 255 characters. May by is this unnecessary overhead?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1270,2018-12-13T08:25:01Z,2020-10-22T15:12:56Z,2020-10-25T10:09:18Z,MERGED,True,12,2,1,https://github.com/d-yacenko,Solve problem with run bash script with parameters on xrdp. ,11,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/1270,https://github.com/matt335672,12,https://github.com/neutrinolabs/xrdp/pull/1270#issuecomment-707071631,"Problem with start bash script with parameters on xrdp as follows - rdesktop -s ""/my/bash/script.sh parameters"" ip_address . If you try this - xrdp run startwm.sh instead you script.
This patch fixed this issue.","Thanks for that @d-yacenko
I can see what the code is doing (it's clear enough to me). However, there are quite a few stylistic issues here, and some functional issues.
Functional issues:-

Whitespace can also be tabs.
If the user accidentally uses multiple spaces, the use of strtok() picks up on this, but your counter value used for logging is incorrect.
There's no way to escape a space in a directory path. So if I have a script in '/home/Program Files', I have no way to access it easily.

Stylistic issues:-

The XRDP coding standard is here. In particular, you've got an inconsistent use of braces and indentation. Using astyle is recommended to pick up on most things.
Please make use of functions in os_calls.h where available. In particular, use g_malloc() in preference to malloc(), g_strncpy() rather than strncpy() and g_strdup() rather than strdup().
I couldn't understand why you'd use malloc()/strncpy() for the intial copy of s->command, and then use strdup() for the individual parameters. Why not use strdup() (or rather g_strdup()) for both functions?
In any case the calls you have to strdup() are not needed. The buffer you're parsing with strtok() is already a copy of s->command, so all you need is *(arg_array + idx++) = token;

Other stylistic observations. These are more personal preference than anything else.

For accessing the pointer array in arg_array, using array syntax is possibly easier to parse for humans than using pointer syntax. So for example, use arg_array[idx++] rather than *(arg_array + idx++).
This code is crying out to be wrapped in a function to limit the scope of the temporary variables you've added, and (possibly) to make use of it in other situations.

These are all pretty easily solved apart from escaping spaces I think.
I do wonder if we're over-thinking this. After all, what we're really wanting here is a non-blocking analogue of the C system(3) call for multiple parameters. The Linux manpage for system(3) is worth a read.
Something like the following pseudo-code would do the job, and be easier to test:-
IF << whitespace in s->program >>
THEN
    /* Emulate a system() call to parse whitespace */
    char *params[] = { ""sh"", ""-c"", s->program, NULL};
    g_execvp(""/bin/sh"", params);
ELSE
    g_execlp3(s->program, s->program, 0);
 END IF

There's the small overhead of a 'sh' invocation to parse the whitespace, but the big win is that s->program behaves exactly how the user expects.
There's a fair bit in here, so have a think and come back to me, particularly if you disagree with anything I've said.
Thanks again for taking the time to put this together.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1270,2018-12-13T08:25:01Z,2020-10-22T15:12:56Z,2020-10-25T10:09:18Z,MERGED,True,12,2,1,https://github.com/d-yacenko,Solve problem with run bash script with parameters on xrdp. ,11,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/1270,https://github.com/d-yacenko,13,https://github.com/neutrinolabs/xrdp/pull/1270#issuecomment-707103057,"Problem with start bash script with parameters on xrdp as follows - rdesktop -s ""/my/bash/script.sh parameters"" ip_address . If you try this - xrdp run startwm.sh instead you script.
This patch fixed this issue.","Hi.
Thanks for the answer. I agree with the indicated direction. I need to think (and work) a couple more days and I will send a new commit.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1270,2018-12-13T08:25:01Z,2020-10-22T15:12:56Z,2020-10-25T10:09:18Z,MERGED,True,12,2,1,https://github.com/d-yacenko,Solve problem with run bash script with parameters on xrdp. ,11,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/1270,https://github.com/mds99,14,https://github.com/neutrinolabs/xrdp/pull/1270#issuecomment-708451857,"Problem with start bash script with parameters on xrdp as follows - rdesktop -s ""/my/bash/script.sh parameters"" ip_address . If you try this - xrdp run startwm.sh instead you script.
This patch fixed this issue.","May i ask to check if s->program has no trailing spaces as well? sometimes we could not start the script, as the program value xrdp tries to execute is ""script """,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1270,2018-12-13T08:25:01Z,2020-10-22T15:12:56Z,2020-10-25T10:09:18Z,MERGED,True,12,2,1,https://github.com/d-yacenko,Solve problem with run bash script with parameters on xrdp. ,11,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/1270,https://github.com/d-yacenko,15,https://github.com/neutrinolabs/xrdp/pull/1270#issuecomment-708611326,"Problem with start bash script with parameters on xrdp as follows - rdesktop -s ""/my/bash/script.sh parameters"" ip_address . If you try this - xrdp run startwm.sh instead you script.
This patch fixed this issue.","Hi.
The new version looks better and easier. Additionally I removed trailing zeros as @mds99 said.
I hope /bin/ sh will be available in all linux distributives :)
WBR Dmitry",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1270,2018-12-13T08:25:01Z,2020-10-22T15:12:56Z,2020-10-25T10:09:18Z,MERGED,True,12,2,1,https://github.com/d-yacenko,Solve problem with run bash script with parameters on xrdp. ,11,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/1270,https://github.com/matt335672,16,https://github.com/neutrinolabs/xrdp/pull/1270#issuecomment-709458781,"Problem with start bash script with parameters on xrdp as follows - rdesktop -s ""/my/bash/script.sh parameters"" ip_address . If you try this - xrdp run startwm.sh instead you script.
This patch fixed this issue.","Couple of things:-

You don't need <string.h> any more if you're using g_strchr(). You seem to have included it twice.
Lines 550-553 don't seem to be necessary - sh should do this for you.
Line 559: Call to g_strchr() needs to look for spaces and tabs.
Line 559: You've now got exactly the same logging message in both if statement branches here, so it could be moved above the if statement.
Lines 561-563 : Indentation is not regular.
Line 565 : Coding standard needs opening brace on separate line from else.

Hope that's useful - let me know if I've not been clear.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1270,2018-12-13T08:25:01Z,2020-10-22T15:12:56Z,2020-10-25T10:09:18Z,MERGED,True,12,2,1,https://github.com/d-yacenko,Solve problem with run bash script with parameters on xrdp. ,11,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/1270,https://github.com/d-yacenko,17,https://github.com/neutrinolabs/xrdp/pull/1270#issuecomment-713053746,"Problem with start bash script with parameters on xrdp as follows - rdesktop -s ""/my/bash/script.sh parameters"" ip_address . If you try this - xrdp run startwm.sh instead you script.
This patch fixed this issue.","Hi.
All done.
It seems...",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1270,2018-12-13T08:25:01Z,2020-10-22T15:12:56Z,2020-10-25T10:09:18Z,MERGED,True,12,2,1,https://github.com/d-yacenko,Solve problem with run bash script with parameters on xrdp. ,11,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/1270,https://github.com/matt335672,18,https://github.com/neutrinolabs/xrdp/pull/1270#issuecomment-713454690,"Problem with start bash script with parameters on xrdp as follows - rdesktop -s ""/my/bash/script.sh parameters"" ip_address . If you try this - xrdp run startwm.sh instead you script.
This patch fixed this issue.","Thanks.
Nearly there!
The CI build has failed, you'll have noticed. This is because your char *params[] = line needs to be const char *params[] = because otherwise you're asking for a char * to be pointing to a constant string.
Once you fix this you'll find the call to g_execvp() also fails.This is more complex to explain. The actual system call execvp takes a char *const argv [] for its second parameter. This is for historical reasons explained on the OpenGroup exec manpage under 'RATIONALE'. The original XRDP developers took the decision to use a char *argv[] for this. execvp will never modify its arguments however, and so it is safe in the g_execvp() call to cast params to a char **, as is done elsewhere in this module.
That will fix the compilation issues. Then:-

Could you please remove the commented out 'old start call' line? We have git to track this sort of thing for us, so we don't need to keep old code hanging about in the source.
I appreciate this module in general is rather badly indented which certainly isn't your fault. However, our coding style line wrapping section calls for 80 character lines where possible. Could you move the ""starting program with parameters: %s "" string onto a new line and align it under LOG_LEVEL_DEBUG? I wouldn't worry about the rest of it.

When that's done, if you squash to a single commit in git we should be able to accept this.
Let me know if you have any comments or questions on the above.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1270,2018-12-13T08:25:01Z,2020-10-22T15:12:56Z,2020-10-25T10:09:18Z,MERGED,True,12,2,1,https://github.com/d-yacenko,Solve problem with run bash script with parameters on xrdp. ,11,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/1270,https://github.com/d-yacenko,19,https://github.com/neutrinolabs/xrdp/pull/1270#issuecomment-713487467,"Problem with start bash script with parameters on xrdp as follows - rdesktop -s ""/my/bash/script.sh parameters"" ip_address . If you try this - xrdp run startwm.sh instead you script.
This patch fixed this issue.","Hey.
Excuse me for the weak programming. I was just careless due to lack of time.
WBR Dmitry",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1270,2018-12-13T08:25:01Z,2020-10-22T15:12:56Z,2020-10-25T10:09:18Z,MERGED,True,12,2,1,https://github.com/d-yacenko,Solve problem with run bash script with parameters on xrdp. ,11,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/1270,https://github.com/matt335672,20,https://github.com/neutrinolabs/xrdp/pull/1270#issuecomment-713551925,"Problem with start bash script with parameters on xrdp as follows - rdesktop -s ""/my/bash/script.sh parameters"" ip_address . If you try this - xrdp run startwm.sh instead you script.
This patch fixed this issue.","Hi @d-yacenko
No worries - thanks for sticking with me.
I must apologise too - I missed the extra #include <string.h> at line 48. In my defence I was testing your patch so that I'm certain it does what we think it does.
Could you take the unnecessary include out and squash all the commits? I'll be happy to accept the PR then.
If you've not come across squashing before, I can do it from here, but it's a useful technique to be able to use when preparing a PR for any project. Let me know what you want to do.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1270,2018-12-13T08:25:01Z,2020-10-22T15:12:56Z,2020-10-25T10:09:18Z,MERGED,True,12,2,1,https://github.com/d-yacenko,Solve problem with run bash script with parameters on xrdp. ,11,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/1270,https://github.com/matt335672,21,https://github.com/neutrinolabs/xrdp/pull/1270#issuecomment-714489068,"Problem with start bash script with parameters on xrdp as follows - rdesktop -s ""/my/bash/script.sh parameters"" ip_address . If you try this - xrdp run startwm.sh instead you script.
This patch fixed this issue.","Great - ta.
Are you going to do the squash, or shall I do it from here?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1270,2018-12-13T08:25:01Z,2020-10-22T15:12:56Z,2020-10-25T10:09:18Z,MERGED,True,12,2,1,https://github.com/d-yacenko,Solve problem with run bash script with parameters on xrdp. ,11,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/1270,https://github.com/d-yacenko,22,https://github.com/neutrinolabs/xrdp/pull/1270#issuecomment-714544119,"Problem with start bash script with parameters on xrdp as follows - rdesktop -s ""/my/bash/script.sh parameters"" ip_address . If you try this - xrdp run startwm.sh instead you script.
This patch fixed this issue.",please do you,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1270,2018-12-13T08:25:01Z,2020-10-22T15:12:56Z,2020-10-25T10:09:18Z,MERGED,True,12,2,1,https://github.com/d-yacenko,Solve problem with run bash script with parameters on xrdp. ,11,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/1270,https://github.com/matt335672,23,https://github.com/neutrinolabs/xrdp/pull/1270#issuecomment-714564210,"Problem with start bash script with parameters on xrdp as follows - rdesktop -s ""/my/bash/script.sh parameters"" ip_address . If you try this - xrdp run startwm.sh instead you script.
This patch fixed this issue.","Done!
Thanks very much for your contribution to XRDP and for sticking with it.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1270,2018-12-13T08:25:01Z,2020-10-22T15:12:56Z,2020-10-25T10:09:18Z,MERGED,True,12,2,1,https://github.com/d-yacenko,Solve problem with run bash script with parameters on xrdp. ,11,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/1270,https://github.com/d-yacenko,24,https://github.com/neutrinolabs/xrdp/pull/1270#issuecomment-714569613,"Problem with start bash script with parameters on xrdp as follows - rdesktop -s ""/my/bash/script.sh parameters"" ip_address . If you try this - xrdp run startwm.sh instead you script.
This patch fixed this issue.",Thank you!,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1270,2018-12-13T08:25:01Z,2020-10-22T15:12:56Z,2020-10-25T10:09:18Z,MERGED,True,12,2,1,https://github.com/d-yacenko,Solve problem with run bash script with parameters on xrdp. ,11,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/1270,https://github.com/mds99,25,https://github.com/neutrinolabs/xrdp/pull/1270#issuecomment-715358628,"Problem with start bash script with parameters on xrdp as follows - rdesktop -s ""/my/bash/script.sh parameters"" ip_address . If you try this - xrdp run startwm.sh instead you script.
This patch fixed this issue.","Thanks for the fix.
Which code tree state i should use to make a test build? 'devel' or a specific commit? Could you advise?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1270,2018-12-13T08:25:01Z,2020-10-22T15:12:56Z,2020-10-25T10:09:18Z,MERGED,True,12,2,1,https://github.com/d-yacenko,Solve problem with run bash script with parameters on xrdp. ,11,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/1270,https://github.com/matt335672,26,https://github.com/neutrinolabs/xrdp/pull/1270#issuecomment-716122440,"Problem with start bash script with parameters on xrdp as follows - rdesktop -s ""/my/bash/script.sh parameters"" ip_address . If you try this - xrdp run startwm.sh instead you script.
This patch fixed this issue.","Use the devel branch:-
git clone https://github.com/neutrinolabs/xrdp.git
cd xrdp


git log will sohw you the most recent commits, which include the one above.
See the wiki for build instructions.

There's a possibility this may not fix your issue - see my comment in #1695. If it doesn't I'll be happy to supply you with a patch and instructions on how to apply it so you can try that.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1273,2018-12-25T04:33:27Z,2018-12-25T04:39:03Z,2018-12-25T04:39:03Z,MERGED,True,28,2,3,https://github.com/metalefty,Prepare release v0.9.9,2,[],https://github.com/neutrinolabs/xrdp/pull/1273,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1273,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1290,2019-02-05T16:03:14Z,2019-02-06T03:03:29Z,2019-02-06T03:03:29Z,MERGED,True,663,0,3,https://github.com/netromnetrom,Add Danish keyboard,3,['new keyboard layout'],https://github.com/neutrinolabs/xrdp/pull/1290,https://github.com/netromnetrom,1,https://github.com/neutrinolabs/xrdp/pull/1290,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1290,2019-02-05T16:03:14Z,2019-02-06T03:03:29Z,2019-02-06T03:03:29Z,MERGED,True,663,0,3,https://github.com/netromnetrom,Add Danish keyboard,3,['new keyboard layout'],https://github.com/neutrinolabs/xrdp/pull/1290,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1290#issuecomment-460885755,,"LGTM, thank you for your contribution.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1293,2019-02-15T01:22:22Z,2019-02-15T02:35:15Z,2019-02-15T02:35:15Z,MERGED,True,1,1,1,https://github.com/RisingWater,"libscp v1 server set height twice, and not set width. so fix it.",1,[],https://github.com/neutrinolabs/xrdp/pull/1293,https://github.com/RisingWater,1,https://github.com/neutrinolabs/xrdp/pull/1293,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1293,2019-02-15T01:22:22Z,2019-02-15T02:35:15Z,2019-02-15T02:35:15Z,MERGED,True,1,1,1,https://github.com/RisingWater,"libscp v1 server set height twice, and not set width. so fix it.",1,[],https://github.com/neutrinolabs/xrdp/pull/1293,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1293#issuecomment-463870137,,Good catch 👍,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1296,2019-02-19T14:44:01Z,2019-07-19T01:50:24Z,2019-07-19T01:50:24Z,CLOSED,False,43,2,5,https://github.com/bblackcblackc,xrdp-chansrv crashes under musl libc,8,['waiting-feedback'],https://github.com/neutrinolabs/xrdp/pull/1296,https://github.com/bblackcblackc,1,https://github.com/neutrinolabs/xrdp/pull/1296,xrdp-chansrv crashes when compiled against musl libc. This patch is preventing crash by setting stack size equals to GLIBC (8Mb) and set guard page.,xrdp-chansrv crashes when compiled against musl libc. This patch is preventing crash by setting stack size equals to GLIBC (8Mb) and set guard page.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1296,2019-02-19T14:44:01Z,2019-07-19T01:50:24Z,2019-07-19T01:50:24Z,CLOSED,False,43,2,5,https://github.com/bblackcblackc,xrdp-chansrv crashes under musl libc,8,['waiting-feedback'],https://github.com/neutrinolabs/xrdp/pull/1296,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1296#issuecomment-465427491,xrdp-chansrv crashes when compiled against musl libc. This patch is preventing crash by setting stack size equals to GLIBC (8Mb) and set guard page.,Please cleanup commits.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1296,2019-02-19T14:44:01Z,2019-07-19T01:50:24Z,2019-07-19T01:50:24Z,CLOSED,False,43,2,5,https://github.com/bblackcblackc,xrdp-chansrv crashes under musl libc,8,['waiting-feedback'],https://github.com/neutrinolabs/xrdp/pull/1296,https://github.com/bblackcblackc,3,https://github.com/neutrinolabs/xrdp/pull/1296#issuecomment-465493057,xrdp-chansrv crashes when compiled against musl libc. This patch is preventing crash by setting stack size equals to GLIBC (8Mb) and set guard page.,"Please cleanup commits.

Merge all commits to once or what?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1296,2019-02-19T14:44:01Z,2019-07-19T01:50:24Z,2019-07-19T01:50:24Z,CLOSED,False,43,2,5,https://github.com/bblackcblackc,xrdp-chansrv crashes under musl libc,8,['waiting-feedback'],https://github.com/neutrinolabs/xrdp/pull/1296,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/1296#issuecomment-465808763,xrdp-chansrv crashes when compiled against musl libc. This patch is preventing crash by setting stack size equals to GLIBC (8Mb) and set guard page.,Please do not leave your trials and errors such as 8b95cb2 and f83c60d in the pull request.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1296,2019-02-19T14:44:01Z,2019-07-19T01:50:24Z,2019-07-19T01:50:24Z,CLOSED,False,43,2,5,https://github.com/bblackcblackc,xrdp-chansrv crashes under musl libc,8,['waiting-feedback'],https://github.com/neutrinolabs/xrdp/pull/1296,https://github.com/metalefty,5,https://github.com/neutrinolabs/xrdp/pull/1296#issuecomment-466786614,xrdp-chansrv crashes when compiled against musl libc. This patch is preventing crash by setting stack size equals to GLIBC (8Mb) and set guard page.,"You add something in the PR and then you remove it.
If you finally remove it in the PR, you don't need to add it fundamentally.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1296,2019-02-19T14:44:01Z,2019-07-19T01:50:24Z,2019-07-19T01:50:24Z,CLOSED,False,43,2,5,https://github.com/bblackcblackc,xrdp-chansrv crashes under musl libc,8,['waiting-feedback'],https://github.com/neutrinolabs/xrdp/pull/1296,https://github.com/metalefty,6,https://github.com/neutrinolabs/xrdp/pull/1296#issuecomment-513058017,xrdp-chansrv crashes when compiled against musl libc. This patch is preventing crash by setting stack size equals to GLIBC (8Mb) and set guard page.,"No feedback from the submitter, closing.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1298,2019-02-26T11:53:05Z,2019-03-20T01:37:41Z,2020-12-17T02:25:11Z,MERGED,True,199,148,7,https://github.com/jaroslaw-osmanski,Restrict outbound clipboard,6,[],https://github.com/neutrinolabs/xrdp/pull/1298,https://github.com/jaroslaw-osmanski,1,https://github.com/neutrinolabs/xrdp/pull/1298,This patch adds configuration option to xrdp-chansrv that turns copying from the session to clipboard.,This patch adds configuration option to xrdp-chansrv that turns copying from the session to clipboard.,True,"{'THUMBS_UP': ['https://github.com/Whazor', 'https://github.com/krisss85', 'https://github.com/morpheyesh', 'https://github.com/verdan', 'https://github.com/jwi078', 'https://github.com/nielsdenissen', 'https://github.com/WalkerTR', 'https://github.com/metalefty', 'https://github.com/bolkedebruin', 'https://github.com/cosmo0920'], 'ROCKET': ['https://github.com/cosmo0920']}"
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1298,2019-02-26T11:53:05Z,2019-03-20T01:37:41Z,2020-12-17T02:25:11Z,MERGED,True,199,148,7,https://github.com/jaroslaw-osmanski,Restrict outbound clipboard,6,[],https://github.com/neutrinolabs/xrdp/pull/1298,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1298#issuecomment-467746632,This patch adds configuration option to xrdp-chansrv that turns copying from the session to clipboard.,Awesome! Good work!,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1298,2019-02-26T11:53:05Z,2019-03-20T01:37:41Z,2020-12-17T02:25:11Z,MERGED,True,199,148,7,https://github.com/jaroslaw-osmanski,Restrict outbound clipboard,6,[],https://github.com/neutrinolabs/xrdp/pull/1298,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/1298#issuecomment-467748624,This patch adds configuration option to xrdp-chansrv that turns copying from the session to clipboard.,"Existing codes use environment variable to pass config parameter. For example, CHANSRV_LOG_PATH.
Of course environment variable is not the best way but consider using environment variable or let's discuss.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1298,2019-02-26T11:53:05Z,2019-03-20T01:37:41Z,2020-12-17T02:25:11Z,MERGED,True,199,148,7,https://github.com/jaroslaw-osmanski,Restrict outbound clipboard,6,[],https://github.com/neutrinolabs/xrdp/pull/1298,https://github.com/jaroslaw-osmanski,4,https://github.com/neutrinolabs/xrdp/pull/1298#issuecomment-468592099,This patch adds configuration option to xrdp-chansrv that turns copying from the session to clipboard.,Should env be the only way of setting restriction on the clipboard or additional method? In my opinion config is less surprising. @metalefty,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1298,2019-02-26T11:53:05Z,2019-03-20T01:37:41Z,2020-12-17T02:25:11Z,MERGED,True,199,148,7,https://github.com/jaroslaw-osmanski,Restrict outbound clipboard,6,[],https://github.com/neutrinolabs/xrdp/pull/1298,https://github.com/metalefty,5,https://github.com/neutrinolabs/xrdp/pull/1298#issuecomment-468645651,This patch adds configuration option to xrdp-chansrv that turns copying from the session to clipboard.,One unacceptable point is chansrv is opening and reading sesman's config file sesman.ini. Please don't do that. Then you'll see how clipboard restriction flag should be passed sesman to chansrv.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1298,2019-02-26T11:53:05Z,2019-03-20T01:37:41Z,2020-12-17T02:25:11Z,MERGED,True,199,148,7,https://github.com/jaroslaw-osmanski,Restrict outbound clipboard,6,[],https://github.com/neutrinolabs/xrdp/pull/1298,https://github.com/metalefty,6,https://github.com/neutrinolabs/xrdp/pull/1298#issuecomment-468646969,This patch adds configuration option to xrdp-chansrv that turns copying from the session to clipboard.,Adding RestrictOutboundClipboard parameter to sesman.ini is OK. It's not surprising at all.  The parameter must be fetched by sesman because it is sesman.ini.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1298,2019-02-26T11:53:05Z,2019-03-20T01:37:41Z,2020-12-17T02:25:11Z,MERGED,True,199,148,7,https://github.com/jaroslaw-osmanski,Restrict outbound clipboard,6,[],https://github.com/neutrinolabs/xrdp/pull/1298,https://github.com/jaroslaw-osmanski,7,https://github.com/neutrinolabs/xrdp/pull/1298#issuecomment-468655761,This patch adds configuration option to xrdp-chansrv that turns copying from the session to clipboard.,"OK. Sesman gathers info from sesman.ini and then passes information about restriction to chansrv, right?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1298,2019-02-26T11:53:05Z,2019-03-20T01:37:41Z,2020-12-17T02:25:11Z,MERGED,True,199,148,7,https://github.com/jaroslaw-osmanski,Restrict outbound clipboard,6,[],https://github.com/neutrinolabs/xrdp/pull/1298,https://github.com/jaroslaw-osmanski,8,https://github.com/neutrinolabs/xrdp/pull/1298#issuecomment-468659290,This patch adds configuration option to xrdp-chansrv that turns copying from the session to clipboard.,"chnsrv is already reading sesman.ini here: https://github.com/neutrinolabs/xrdp/blob/devel/sesman/chansrv/chansrv.c#L1639
So it is config.c that shouldn't be used?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1298,2019-02-26T11:53:05Z,2019-03-20T01:37:41Z,2020-12-17T02:25:11Z,MERGED,True,199,148,7,https://github.com/jaroslaw-osmanski,Restrict outbound clipboard,6,[],https://github.com/neutrinolabs/xrdp/pull/1298,https://github.com/metalefty,9,https://github.com/neutrinolabs/xrdp/pull/1298#issuecomment-468867319,This patch adds configuration option to xrdp-chansrv that turns copying from the session to clipboard.,"Indeed. That should be fixed but not at this time. I'll change it later.
I'm thinking of this. Similar thing is done as CHANSRV_LOG_LEVEL to set chansrv log level. The difference is setting environment variable directly or via config parameter.
sesman

sesman read if RestrictOutboundClipboard is on/off
sesman sets env var something like RESTRICT_OUTBOUND_CLIPBOARD to something like 1, yes, true
start chansrv with that env var

chansrv

read the env var at startup
if set to 1, restrict outbound clipboard",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1298,2019-02-26T11:53:05Z,2019-03-20T01:37:41Z,2020-12-17T02:25:11Z,MERGED,True,199,148,7,https://github.com/jaroslaw-osmanski,Restrict outbound clipboard,6,[],https://github.com/neutrinolabs/xrdp/pull/1298,https://github.com/jaroslaw-osmanski,10,https://github.com/neutrinolabs/xrdp/pull/1298#issuecomment-469658401,This patch adds configuration option to xrdp-chansrv that turns copying from the session to clipboard.,@metalefty Can I do something more to improve the code?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1298,2019-02-26T11:53:05Z,2019-03-20T01:37:41Z,2020-12-17T02:25:11Z,MERGED,True,199,148,7,https://github.com/jaroslaw-osmanski,Restrict outbound clipboard,6,[],https://github.com/neutrinolabs/xrdp/pull/1298,https://github.com/metalefty,11,https://github.com/neutrinolabs/xrdp/pull/1298#issuecomment-470761256,This patch adds configuration option to xrdp-chansrv that turns copying from the session to clipboard.,@jaroslaw-osmanski Give me some time to test.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1298,2019-02-26T11:53:05Z,2019-03-20T01:37:41Z,2020-12-17T02:25:11Z,MERGED,True,199,148,7,https://github.com/jaroslaw-osmanski,Restrict outbound clipboard,6,[],https://github.com/neutrinolabs/xrdp/pull/1298,https://github.com/metalefty,12,https://github.com/neutrinolabs/xrdp/pull/1298#issuecomment-470772710,This patch adds configuration option to xrdp-chansrv that turns copying from the session to clipboard.,"I commented on some style & format issues but logic looks OK. After some test, I'll merge. I'd appreciate if you fix style & format before I merge.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1298,2019-02-26T11:53:05Z,2019-03-20T01:37:41Z,2020-12-17T02:25:11Z,MERGED,True,199,148,7,https://github.com/jaroslaw-osmanski,Restrict outbound clipboard,6,[],https://github.com/neutrinolabs/xrdp/pull/1298,https://github.com/jaroslaw-osmanski,13,https://github.com/neutrinolabs/xrdp/pull/1298#issuecomment-470844467,This patch adds configuration option to xrdp-chansrv that turns copying from the session to clipboard.,@metalefty Fixed style and format,True,{'THUMBS_UP': ['https://github.com/bolkedebruin']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1298,2019-02-26T11:53:05Z,2019-03-20T01:37:41Z,2020-12-17T02:25:11Z,MERGED,True,199,148,7,https://github.com/jaroslaw-osmanski,Restrict outbound clipboard,6,[],https://github.com/neutrinolabs/xrdp/pull/1298,https://github.com/metalefty,14,https://github.com/neutrinolabs/xrdp/pull/1298#issuecomment-474639536,This patch adds configuration option to xrdp-chansrv that turns copying from the session to clipboard.,I'm testing this today and will be merged shortly. Sorry for the delay and thank you very much for your work!,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1298,2019-02-26T11:53:05Z,2019-03-20T01:37:41Z,2020-12-17T02:25:11Z,MERGED,True,199,148,7,https://github.com/jaroslaw-osmanski,Restrict outbound clipboard,6,[],https://github.com/neutrinolabs/xrdp/pull/1298,https://github.com/metalefty,15,https://github.com/neutrinolabs/xrdp/pull/1298#issuecomment-474649633,This patch adds configuration option to xrdp-chansrv that turns copying from the session to clipboard.,Tested. Clipboard text/image/file LGTM.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1298,2019-02-26T11:53:05Z,2019-03-20T01:37:41Z,2020-12-17T02:25:11Z,MERGED,True,199,148,7,https://github.com/jaroslaw-osmanski,Restrict outbound clipboard,6,[],https://github.com/neutrinolabs/xrdp/pull/1298,https://github.com/black1220,16,https://github.com/neutrinolabs/xrdp/pull/1298#issuecomment-747162432,This patch adds configuration option to xrdp-chansrv that turns copying from the session to clipboard.,Can I only pass text copy&paste and limit file transfer ?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1299,2019-02-26T14:37:25Z,2019-03-08T02:12:43Z,2019-04-11T09:22:31Z,MERGED,True,24,1,1,https://github.com/matt335672,Reconnecting to session causes duplicate drive entries in fuse fs,1,[],https://github.com/neutrinolabs/xrdp/pull/1299,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1299,"First time I connect, I get remote drives as expected in ~/thinclient_drives :-
$ ls ~/thinclient_drives/
J:  P:  R:  S:  T:  U:

If I disconnect and reconnect immediately, these drives get duplicated, according to ls:-
$ ls ~/thinclient_drives/
J:  J:  P:  P:  R:  R:  S:  S:  T:  T:  U:  U:

Interestingly this duplication is not visible in the GNOME file manager on CentOS.
I've had a look at the code, and it seems the duplication is happening as the fuse inode cache is never cleared. When the user reconnects, the shared drives are being set up again in the fuse inode cache.
If the user reconnects with the same drives, the only visible effect is the drive letter duplication. If however the user reconnects from a differently configured Windows client, the drives may have different letters and/or device numbers. Trying to access missing drives causes the application issuing the access request to hang.
The safest thing is to clear down the fuse inode cache on a disconnect. At this point the fuse filesystem is unmounted anyway.
There's a stub routine in chansrv_fuse.c called xfuse_deinit_xrdp_fs() which is supposed to do precisely this, but has never been implemented. This PR adds an implementation and moves the call to the routine until after the fuse system has been unmounted, so that we can be sure nothing in the inode cache is relevant any more.
Does anyone have any idea why xfuse_deinit_xrdp_fs()  was never implemented?","First time I connect, I get remote drives as expected in ~/thinclient_drives :-
$ ls ~/thinclient_drives/
J:  P:  R:  S:  T:  U:

If I disconnect and reconnect immediately, these drives get duplicated, according to ls:-
$ ls ~/thinclient_drives/
J:  J:  P:  P:  R:  R:  S:  S:  T:  T:  U:  U:

Interestingly this duplication is not visible in the GNOME file manager on CentOS.
I've had a look at the code, and it seems the duplication is happening as the fuse inode cache is never cleared. When the user reconnects, the shared drives are being set up again in the fuse inode cache.
If the user reconnects with the same drives, the only visible effect is the drive letter duplication. If however the user reconnects from a differently configured Windows client, the drives may have different letters and/or device numbers. Trying to access missing drives causes the application issuing the access request to hang.
The safest thing is to clear down the fuse inode cache on a disconnect. At this point the fuse filesystem is unmounted anyway.
There's a stub routine in chansrv_fuse.c called xfuse_deinit_xrdp_fs() which is supposed to do precisely this, but has never been implemented. This PR adds an implementation and moves the call to the routine until after the fuse system has been unmounted, so that we can be sure nothing in the inode cache is relevant any more.
Does anyone have any idea why xfuse_deinit_xrdp_fs()  was never implemented?",True,{'THUMBS_UP': ['https://github.com/metalefty']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1299,2019-02-26T14:37:25Z,2019-03-08T02:12:43Z,2019-04-11T09:22:31Z,MERGED,True,24,1,1,https://github.com/matt335672,Reconnecting to session causes duplicate drive entries in fuse fs,1,[],https://github.com/neutrinolabs/xrdp/pull/1299,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1299#issuecomment-470777272,"First time I connect, I get remote drives as expected in ~/thinclient_drives :-
$ ls ~/thinclient_drives/
J:  P:  R:  S:  T:  U:

If I disconnect and reconnect immediately, these drives get duplicated, according to ls:-
$ ls ~/thinclient_drives/
J:  J:  P:  P:  R:  R:  S:  S:  T:  T:  U:  U:

Interestingly this duplication is not visible in the GNOME file manager on CentOS.
I've had a look at the code, and it seems the duplication is happening as the fuse inode cache is never cleared. When the user reconnects, the shared drives are being set up again in the fuse inode cache.
If the user reconnects with the same drives, the only visible effect is the drive letter duplication. If however the user reconnects from a differently configured Windows client, the drives may have different letters and/or device numbers. Trying to access missing drives causes the application issuing the access request to hang.
The safest thing is to clear down the fuse inode cache on a disconnect. At this point the fuse filesystem is unmounted anyway.
There's a stub routine in chansrv_fuse.c called xfuse_deinit_xrdp_fs() which is supposed to do precisely this, but has never been implemented. This PR adds an implementation and moves the call to the routine until after the fuse system has been unmounted, so that we can be sure nothing in the inode cache is relevant any more.
Does anyone have any idea why xfuse_deinit_xrdp_fs()  was never implemented?",Good catch. I'm not sure why deinit was not implemented.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1313,2019-03-25T01:49:40Z,2019-03-25T06:12:50Z,2019-03-25T06:13:11Z,MERGED,True,9,9,3,https://github.com/metalefty,docs: Put xrdp- prefix to some executables etc,2,[],https://github.com/neutrinolabs/xrdp/pull/1313,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1313,"Put xrdp- prefix to some executables etc
Eliminate sourceforge links","Put xrdp- prefix to some executables etc
Eliminate sourceforge links",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1314,2019-03-25T02:28:10Z,2019-03-25T23:38:34Z,2019-03-25T23:39:49Z,MERGED,True,2,2,1,https://github.com/metalefty,pages: refer the GitHub releases page,2,[],https://github.com/neutrinolabs/xrdp/pull/1314,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1314,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1318,2019-03-28T03:02:34Z,2019-04-03T08:24:29Z,2019-04-11T03:02:14Z,MERGED,True,17,8,1,https://github.com/metalefty,sesman: Fix default_wm and reconnect_sh refer wrong path after SIGHUP,1,[],https://github.com/neutrinolabs/xrdp/pull/1318,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1318,"Changes in #1147 had a bug. Fixes #1315.
Reported by:    Daniel Hoffend","Changes in #1147 had a bug. Fixes #1315.
Reported by:    Daniel Hoffend",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1318,2019-03-28T03:02:34Z,2019-04-03T08:24:29Z,2019-04-11T03:02:14Z,MERGED,True,17,8,1,https://github.com/metalefty,sesman: Fix default_wm and reconnect_sh refer wrong path after SIGHUP,1,[],https://github.com/neutrinolabs/xrdp/pull/1318,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1318#issuecomment-481499053,"Changes in #1147 had a bug. Fixes #1315.
Reported by:    Daniel Hoffend",@mirabilos I'd appreciate if you apply this to Debian.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1318,2019-03-28T03:02:34Z,2019-04-03T08:24:29Z,2019-04-11T03:02:14Z,MERGED,True,17,8,1,https://github.com/metalefty,sesman: Fix default_wm and reconnect_sh refer wrong path after SIGHUP,1,[],https://github.com/neutrinolabs/xrdp/pull/1318,https://github.com/mirabilos,3,https://github.com/neutrinolabs/xrdp/pull/1318#issuecomment-481741967,"Changes in #1147 had a bug. Fixes #1315.
Reported by:    Daniel Hoffend","Hi @metalefty,

@mirabilos I'd appreciate if you apply this to Debian.
we’re in deep freeze, but I can see the kind of bug this fixes
would be annoying to have in a stable release.

AFAICT the change is just s/g_cfg/cf/g in two if blocks
(and some logging we don’t need to take), so small and
easily enough reviewable to qualify.

@Natureshadow do you wish to take this up with the release
managers or should I?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1318,2019-03-28T03:02:34Z,2019-04-03T08:24:29Z,2019-04-11T03:02:14Z,MERGED,True,17,8,1,https://github.com/metalefty,sesman: Fix default_wm and reconnect_sh refer wrong path after SIGHUP,1,[],https://github.com/neutrinolabs/xrdp/pull/1318,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/1318#issuecomment-481946709,"Changes in #1147 had a bug. Fixes #1315.
Reported by:    Daniel Hoffend","I think you'll need some more information. v0.9.7, v0.9.8, v0.9.9 have this issue. The upcoming v0.9.10 includes this fix. I know Debian hardly apply version update except unstable so I want you to consider applying this fix to the branches such as stable-bpo. The original issue #1315 is reported by a Debian user. At least a Debian user is annoyed because of our bug.
This issue is a kind of availability.  New sessions cannot be started after xrdp-sesman caught SIGUP unless DefaultWindowManager in sesman.ini is specified in full path. Same with ReconnectScript. It won't be executed unless it is specified in full path.
I'm not sure Debian rotates xrdp log, the major scenario that xrdp-sesman catch SIGUP is log rotation.
For the record, I post this to the Debian bug, too.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1319,2019-03-28T07:00:35Z,2019-11-21T09:42:53Z,2019-12-11T04:21:47Z,MERGED,True,11,3,1,https://github.com/metalefty,xrdp: do not exit when caught SIGHUP,1,[],https://github.com/neutrinolabs/xrdp/pull/1319,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1319,Fixes #1316.,Fixes #1316.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1319,2019-03-28T07:00:35Z,2019-11-21T09:42:53Z,2019-12-11T04:21:47Z,MERGED,True,11,3,1,https://github.com/metalefty,xrdp: do not exit when caught SIGHUP,1,[],https://github.com/neutrinolabs/xrdp/pull/1319,https://github.com/jsorg71,2,https://github.com/neutrinolabs/xrdp/pull/1319#issuecomment-550776614,Fixes #1316.,"This looks good, maybe rebase",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1319,2019-03-28T07:00:35Z,2019-11-21T09:42:53Z,2019-12-11T04:21:47Z,MERGED,True,11,3,1,https://github.com/metalefty,xrdp: do not exit when caught SIGHUP,1,[],https://github.com/neutrinolabs/xrdp/pull/1319,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/1319#issuecomment-557002531,Fixes #1316.,"There's no problem with this. The true goal is to reload the config and reopen log files as described in #1316. Required for log rotation.  However, not to exit with SIGHUP is required sperately.
Let's implement reloading the config and reopening logs later, merge this first.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1325,2019-04-01T04:57:57Z,2019-04-02T06:14:11Z,2019-04-02T06:15:09Z,MERGED,True,26,4,2,https://github.com/jsorg71,xrdp: check term event for more responsive shutdown,1,[],https://github.com/neutrinolabs/xrdp/pull/1325,https://github.com/jsorg71,1,https://github.com/neutrinolabs/xrdp/pull/1325,Annoying when xrdp does not kill with friendly kill command.  This is better method until we have a connection complete callback in trans.,Annoying when xrdp does not kill with friendly kill command.  This is better method until we have a connection complete callback in trans.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1325,2019-04-01T04:57:57Z,2019-04-02T06:14:11Z,2019-04-02T06:15:09Z,MERGED,True,26,4,2,https://github.com/jsorg71,xrdp: check term event for more responsive shutdown,1,[],https://github.com/neutrinolabs/xrdp/pull/1325,https://github.com/jsorg71,2,https://github.com/neutrinolabs/xrdp/pull/1325#issuecomment-478726161,Annoying when xrdp does not kill with friendly kill command.  This is better method until we have a connection complete callback in trans.,"You can reproduce the issue by starting xrdp and not sesman, then try to connect and login a client.  Of course it won't work, then try to kill xrdp with
kill",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1327,2019-04-02T08:15:16Z,2019-04-11T06:56:24Z,2020-03-03T08:51:53Z,MERGED,True,843,354,5,https://github.com/matt335672,XFuse file overwrite and lookup improvements,5,['drive redirection'],https://github.com/neutrinolabs/xrdp/pull/1327,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1327,"This pull request fixes a couple of annoyances I've had with the xfuse filing system:-

When connecting for the first time, file can't be viewed without browsing down to them (e.g.):-

$ ls -l ~/thinclient_drives/U\:/Downloads/temp.txt
ls: cannot access /home/disktest/thinclient_drives/U:/Downloads/temp.txt: No such file or directory
$ ls -l ~/thinclient_drives/U\:/Downloads
ls: cannot access /home/disktest/thinclient_drives/U:/Downloads: No such file or directory
$ ls -l ~/thinclient_drives/U\:/
<snipped>
$ ls -l ~/thinclient_drives/U\:/Downloads/
<snipped>
$ ls -l ~/thinclient_drives/U\:/Downloads/temp.txt
-rw-r--r--. 0 disktest gdat_hdv_disktest 43 Feb 28 16:08 /home/disktest/thinclient_drives/U:/Downloads/temp.txt


Existing files can't be overwritten or appended (e.g.):-

$ echo ""More text"" >~/thinclient_drives/U\:/Downloads/temp.txt
bash: echo: write error: Input/output error
$ echo ""More text"" >>~/thinclient_drives/U\:/Downloads/temp.txt
bash: echo: write error: Input/output error

The first is fixed by changing the lookup functionality for remote files. The original lookup functionality only looks for file attributes in the local cache, even for remote files. Not only does this fail if the directory hasn't been read before, but long-term caching problems are introduced. This implementation always goes to the remote system to look for file attributes, relying on the fuse implementation to do any local caching.
The second of these is relatively simple; the open file functionality needs to have support added for O_WRONLY mode.
For the purpose of review and discussion, I've left this pull request as a series of four commits for now. The first two implement quite a few tidy-ups to the code, and the second two implement the features above.
I appreciate this is a fairly significant change, so I'm happy to split this up into separate pull requests if this helps.","This pull request fixes a couple of annoyances I've had with the xfuse filing system:-

When connecting for the first time, file can't be viewed without browsing down to them (e.g.):-

$ ls -l ~/thinclient_drives/U\:/Downloads/temp.txt
ls: cannot access /home/disktest/thinclient_drives/U:/Downloads/temp.txt: No such file or directory
$ ls -l ~/thinclient_drives/U\:/Downloads
ls: cannot access /home/disktest/thinclient_drives/U:/Downloads: No such file or directory
$ ls -l ~/thinclient_drives/U\:/
<snipped>
$ ls -l ~/thinclient_drives/U\:/Downloads/
<snipped>
$ ls -l ~/thinclient_drives/U\:/Downloads/temp.txt
-rw-r--r--. 0 disktest gdat_hdv_disktest 43 Feb 28 16:08 /home/disktest/thinclient_drives/U:/Downloads/temp.txt


Existing files can't be overwritten or appended (e.g.):-

$ echo ""More text"" >~/thinclient_drives/U\:/Downloads/temp.txt
bash: echo: write error: Input/output error
$ echo ""More text"" >>~/thinclient_drives/U\:/Downloads/temp.txt
bash: echo: write error: Input/output error

The first is fixed by changing the lookup functionality for remote files. The original lookup functionality only looks for file attributes in the local cache, even for remote files. Not only does this fail if the directory hasn't been read before, but long-term caching problems are introduced. This implementation always goes to the remote system to look for file attributes, relying on the fuse implementation to do any local caching.
The second of these is relatively simple; the open file functionality needs to have support added for O_WRONLY mode.
For the purpose of review and discussion, I've left this pull request as a series of four commits for now. The first two implement quite a few tidy-ups to the code, and the second two implement the features above.
I appreciate this is a fairly significant change, so I'm happy to split this up into separate pull requests if this helps.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1327,2019-04-02T08:15:16Z,2019-04-11T06:56:24Z,2020-03-03T08:51:53Z,MERGED,True,843,354,5,https://github.com/matt335672,XFuse file overwrite and lookup improvements,5,['drive redirection'],https://github.com/neutrinolabs/xrdp/pull/1327,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1327#issuecomment-478938975,"This pull request fixes a couple of annoyances I've had with the xfuse filing system:-

When connecting for the first time, file can't be viewed without browsing down to them (e.g.):-

$ ls -l ~/thinclient_drives/U\:/Downloads/temp.txt
ls: cannot access /home/disktest/thinclient_drives/U:/Downloads/temp.txt: No such file or directory
$ ls -l ~/thinclient_drives/U\:/Downloads
ls: cannot access /home/disktest/thinclient_drives/U:/Downloads: No such file or directory
$ ls -l ~/thinclient_drives/U\:/
<snipped>
$ ls -l ~/thinclient_drives/U\:/Downloads/
<snipped>
$ ls -l ~/thinclient_drives/U\:/Downloads/temp.txt
-rw-r--r--. 0 disktest gdat_hdv_disktest 43 Feb 28 16:08 /home/disktest/thinclient_drives/U:/Downloads/temp.txt


Existing files can't be overwritten or appended (e.g.):-

$ echo ""More text"" >~/thinclient_drives/U\:/Downloads/temp.txt
bash: echo: write error: Input/output error
$ echo ""More text"" >>~/thinclient_drives/U\:/Downloads/temp.txt
bash: echo: write error: Input/output error

The first is fixed by changing the lookup functionality for remote files. The original lookup functionality only looks for file attributes in the local cache, even for remote files. Not only does this fail if the directory hasn't been read before, but long-term caching problems are introduced. This implementation always goes to the remote system to look for file attributes, relying on the fuse implementation to do any local caching.
The second of these is relatively simple; the open file functionality needs to have support added for O_WRONLY mode.
For the purpose of review and discussion, I've left this pull request as a series of four commits for now. The first two implement quite a few tidy-ups to the code, and the second two implement the features above.
I appreciate this is a fairly significant change, so I'm happy to split this up into separate pull requests if this helps.",Thank you for your great work! Make sure to pass CI test.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1327,2019-04-02T08:15:16Z,2019-04-11T06:56:24Z,2020-03-03T08:51:53Z,MERGED,True,843,354,5,https://github.com/matt335672,XFuse file overwrite and lookup improvements,5,['drive redirection'],https://github.com/neutrinolabs/xrdp/pull/1327,https://github.com/matt335672,3,https://github.com/neutrinolabs/xrdp/pull/1327#issuecomment-479008100,"This pull request fixes a couple of annoyances I've had with the xfuse filing system:-

When connecting for the first time, file can't be viewed without browsing down to them (e.g.):-

$ ls -l ~/thinclient_drives/U\:/Downloads/temp.txt
ls: cannot access /home/disktest/thinclient_drives/U:/Downloads/temp.txt: No such file or directory
$ ls -l ~/thinclient_drives/U\:/Downloads
ls: cannot access /home/disktest/thinclient_drives/U:/Downloads: No such file or directory
$ ls -l ~/thinclient_drives/U\:/
<snipped>
$ ls -l ~/thinclient_drives/U\:/Downloads/
<snipped>
$ ls -l ~/thinclient_drives/U\:/Downloads/temp.txt
-rw-r--r--. 0 disktest gdat_hdv_disktest 43 Feb 28 16:08 /home/disktest/thinclient_drives/U:/Downloads/temp.txt


Existing files can't be overwritten or appended (e.g.):-

$ echo ""More text"" >~/thinclient_drives/U\:/Downloads/temp.txt
bash: echo: write error: Input/output error
$ echo ""More text"" >>~/thinclient_drives/U\:/Downloads/temp.txt
bash: echo: write error: Input/output error

The first is fixed by changing the lookup functionality for remote files. The original lookup functionality only looks for file attributes in the local cache, even for remote files. Not only does this fail if the directory hasn't been read before, but long-term caching problems are introduced. This implementation always goes to the remote system to look for file attributes, relying on the fuse implementation to do any local caching.
The second of these is relatively simple; the open file functionality needs to have support added for O_WRONLY mode.
For the purpose of review and discussion, I've left this pull request as a series of four commits for now. The first two implement quite a few tidy-ups to the code, and the second two implement the features above.
I appreciate this is a fairly significant change, so I'm happy to split this up into separate pull requests if this helps.","As an extra bit of info, I'm pretty sure, this PR addresses the issues raised in #996",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1327,2019-04-02T08:15:16Z,2019-04-11T06:56:24Z,2020-03-03T08:51:53Z,MERGED,True,843,354,5,https://github.com/matt335672,XFuse file overwrite and lookup improvements,5,['drive redirection'],https://github.com/neutrinolabs/xrdp/pull/1327,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/1327#issuecomment-479253555,"This pull request fixes a couple of annoyances I've had with the xfuse filing system:-

When connecting for the first time, file can't be viewed without browsing down to them (e.g.):-

$ ls -l ~/thinclient_drives/U\:/Downloads/temp.txt
ls: cannot access /home/disktest/thinclient_drives/U:/Downloads/temp.txt: No such file or directory
$ ls -l ~/thinclient_drives/U\:/Downloads
ls: cannot access /home/disktest/thinclient_drives/U:/Downloads: No such file or directory
$ ls -l ~/thinclient_drives/U\:/
<snipped>
$ ls -l ~/thinclient_drives/U\:/Downloads/
<snipped>
$ ls -l ~/thinclient_drives/U\:/Downloads/temp.txt
-rw-r--r--. 0 disktest gdat_hdv_disktest 43 Feb 28 16:08 /home/disktest/thinclient_drives/U:/Downloads/temp.txt


Existing files can't be overwritten or appended (e.g.):-

$ echo ""More text"" >~/thinclient_drives/U\:/Downloads/temp.txt
bash: echo: write error: Input/output error
$ echo ""More text"" >>~/thinclient_drives/U\:/Downloads/temp.txt
bash: echo: write error: Input/output error

The first is fixed by changing the lookup functionality for remote files. The original lookup functionality only looks for file attributes in the local cache, even for remote files. Not only does this fail if the directory hasn't been read before, but long-term caching problems are introduced. This implementation always goes to the remote system to look for file attributes, relying on the fuse implementation to do any local caching.
The second of these is relatively simple; the open file functionality needs to have support added for O_WRONLY mode.
For the purpose of review and discussion, I've left this pull request as a series of four commits for now. The first two implement quite a few tidy-ups to the code, and the second two implement the features above.
I appreciate this is a fairly significant change, so I'm happy to split this up into separate pull requests if this helps.",Let's ship this to the upcoming v0.9.10 release.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1330,2019-04-08T17:23:04Z,2019-04-25T22:06:13Z,2019-07-12T01:49:53Z,MERGED,True,281,61,13,https://github.com/jsorg71,handle TS_SUPPRESS_OUTPUT_PDU,7,[],https://github.com/neutrinolabs/xrdp/pull/1330,https://github.com/jsorg71,1,https://github.com/neutrinolabs/xrdp/pull/1330,Pass suppress event to xrdp modules.  Allows xrdp backends to handle the suppress,Pass suppress event to xrdp modules.  Allows xrdp backends to handle the suppress,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1330,2019-04-08T17:23:04Z,2019-04-25T22:06:13Z,2019-07-12T01:49:53Z,MERGED,True,281,61,13,https://github.com/jsorg71,handle TS_SUPPRESS_OUTPUT_PDU,7,[],https://github.com/neutrinolabs/xrdp/pull/1330,https://github.com/jsorg71,2,https://github.com/neutrinolabs/xrdp/pull/1330#issuecomment-480940945,Pass suppress event to xrdp modules.  Allows xrdp backends to handle the suppress,"I wonder if we should put in
diff --git a/libxrdp/xrdp_caps.c b/libxrdp/xrdp_caps.c
index 4d1ab45..1c0587f 100644
--- a/libxrdp/xrdp_caps.c
+++ b/libxrdp/xrdp_caps.c
@@ -810,7 +810,8 @@ xrdp_caps_send_demand_active(struct xrdp_rdp *self)
     out_uint16_le(s, 0); /* Update capability */
     out_uint16_le(s, 0); /* Remote unshare capability */
     out_uint16_le(s, 0); /* Compression level */
-    out_uint16_le(s, 0); /* Pad */
+    out_uint8(s, 1); /* refreshRectSupport */
+    out_uint8(s, 1); /* suppressOutputSupport */
 
     /* Output bitmap capability set */
     caps_count++;


The clients don't seem to require it.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1330,2019-04-08T17:23:04Z,2019-04-25T22:06:13Z,2019-07-12T01:49:53Z,MERGED,True,281,61,13,https://github.com/jsorg71,handle TS_SUPPRESS_OUTPUT_PDU,7,[],https://github.com/neutrinolabs/xrdp/pull/1330,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/1330#issuecomment-481098625,Pass suppress event to xrdp modules.  Allows xrdp backends to handle the suppress,"Just in case, please don't merge this until I make a April release.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1330,2019-04-08T17:23:04Z,2019-04-25T22:06:13Z,2019-07-12T01:49:53Z,MERGED,True,281,61,13,https://github.com/jsorg71,handle TS_SUPPRESS_OUTPUT_PDU,7,[],https://github.com/neutrinolabs/xrdp/pull/1330,https://github.com/jsorg71,4,https://github.com/neutrinolabs/xrdp/pull/1330#issuecomment-481426585,Pass suppress event to xrdp modules.  Allows xrdp backends to handle the suppress,"Ok, I'll add the above and test for a while.
Rebase or squash when ready.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1330,2019-04-08T17:23:04Z,2019-04-25T22:06:13Z,2019-07-12T01:49:53Z,MERGED,True,281,61,13,https://github.com/jsorg71,handle TS_SUPPRESS_OUTPUT_PDU,7,[],https://github.com/neutrinolabs/xrdp/pull/1330,https://github.com/jsorg71,5,https://github.com/neutrinolabs/xrdp/pull/1330#issuecomment-484277577,Pass suppress event to xrdp modules.  Allows xrdp backends to handle the suppress,Added suppress support in VNC and RDP modules for RDP to VNC and RDP to RDP proxies.  Added support in NeutrinoRDP too as a client.  Only missing suppress support in X11rdp back end currently currently.  Do we need it?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1330,2019-04-08T17:23:04Z,2019-04-25T22:06:13Z,2019-07-12T01:49:53Z,MERGED,True,281,61,13,https://github.com/jsorg71,handle TS_SUPPRESS_OUTPUT_PDU,7,[],https://github.com/neutrinolabs/xrdp/pull/1330,https://github.com/metalefty,6,https://github.com/neutrinolabs/xrdp/pull/1330#issuecomment-484371679,Pass suppress event to xrdp modules.  Allows xrdp backends to handle the suppress,"@jsorg71 I think xorgxrdp is enough.
BTW, I've released v0.9.10. Feel free to merge supress support if you think it merge ready.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1330,2019-04-08T17:23:04Z,2019-04-25T22:06:13Z,2019-07-12T01:49:53Z,MERGED,True,281,61,13,https://github.com/jsorg71,handle TS_SUPPRESS_OUTPUT_PDU,7,[],https://github.com/neutrinolabs/xrdp/pull/1330,https://github.com/metalefty,7,https://github.com/neutrinolabs/xrdp/pull/1330#issuecomment-510713603,Pass suppress event to xrdp modules.  Allows xrdp backends to handle the suppress,I confirmed suppress works fine with xorgxrdp v0.2.10. Confirmed with mstsc 10.0.17763 on Windows 10.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1331,2019-04-11T10:37:42Z,2019-04-16T00:46:58Z,2020-03-03T08:51:59Z,MERGED,True,0,2,1,https://github.com/matt335672,Remove unnecessary reference from sesman/config.c,1,[],https://github.com/neutrinolabs/xrdp/pull/1331,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1331,"Really small potential tidy-up I just spotted.
Following commit 81703c4, there are
no longer any references to g_cfg from within sesman/config.c, and so the
extern reference can be removed, reducing the coupling between these two files.","Really small potential tidy-up I just spotted.
Following commit 81703c4, there are
no longer any references to g_cfg from within sesman/config.c, and so the
extern reference can be removed, reducing the coupling between these two files.",True,{'THUMBS_UP': ['https://github.com/metalefty']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1334,2019-04-18T01:57:26Z,2019-04-18T02:14:44Z,2019-04-18T04:41:31Z,MERGED,True,38,8,3,https://github.com/metalefty,Release v0.9.10,2,[],https://github.com/neutrinolabs/xrdp/pull/1334,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1334,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1336,2019-04-18T05:28:52Z,2019-04-18T05:36:44Z,2019-04-18T05:36:48Z,MERGED,True,3,0,1,https://github.com/metalefty,Fix build after #1327,1,[],https://github.com/neutrinolabs/xrdp/pull/1336,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1336,"Fixes #1335.
In file included from ./irp.h:27:
./chansrv_fuse.h:39:5: error: unknown type name 'time_t'
    time_t          atime;             /* Time of last access.              */
    ^
./chansrv_fuse.h:40:5: error: unknown type name 'time_t'
    time_t          mtime;             /* Time of last modification.        */
    ^
./chansrv_fuse.h:41:5: error: unknown type name 'time_t'
    time_t          ctime;             /* Time of last status change.       */
    ^
3 errors generated.
*** Error code 1","Fixes #1335.
In file included from ./irp.h:27:
./chansrv_fuse.h:39:5: error: unknown type name 'time_t'
    time_t          atime;             /* Time of last access.              */
    ^
./chansrv_fuse.h:40:5: error: unknown type name 'time_t'
    time_t          mtime;             /* Time of last modification.        */
    ^
./chansrv_fuse.h:41:5: error: unknown type name 'time_t'
    time_t          ctime;             /* Time of last status change.       */
    ^
3 errors generated.
*** Error code 1",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1343,2019-05-02T10:19:45Z,2020-06-04T14:36:01Z,2020-12-23T10:47:42Z,MERGED,True,1213,210,9,https://github.com/matt335672,Add resizeable backend VNC support,1,['vnc'],https://github.com/neutrinolabs/xrdp/pull/1343,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1343,"This has been discussed in the past - see #259 and #287.
The VNC backend still seems to be with us, and still seems to have a few useful use cases.  At our place, developers working at home are are using Citrix to connect in to a Windows farm and from there are using XRDP to connect to the Linux workstations. Some of them have reported noticeably better performance using Xvnc rather than Xorg in this configuration.
This PR supports the VNC resizing and multi-screen features used by tigervnc.  I've tested both resizing and multi-screen on CentOS 7.5 (tigervnc 1.8). and resizing on xubuntu 18.04 (tigervnc 1.7).  I can't currently test multi-monitor on xubuntu due to a lack of kit.
I've made the feature optional to avoid breaking workflows used by existing users. So by default there's no change in behaviour. Users wishing to use the new feature can set ""code=1"" in xrdp.ini. This value is used to inform sesman that the VNC session is resizeable, and also to tell the VNC backend to request the ExtendedDesktopSize pseudo-encoding from Xvnc.
The module uses resize-on-reconnect in the same way that the Xorg backend does. When a single screen is used, the use can resize sessions on-the-fly by using 'xrandr -s', or by using the appropriate desktop utility.
For review purposes, I've split the PR into three commits. One is simply running astyle on the vnc module. Another is adding the extra functionality to the backend (plus removing some magic numbers), and the last is the changes to SCP and sesman. The last of these is the bit I'm least confident about. At the moment I haven't completely separated resizable VNC sessions from non-resizeable VNC sessions in sesman itself.  Would that be a better idea?","This has been discussed in the past - see #259 and #287.
The VNC backend still seems to be with us, and still seems to have a few useful use cases.  At our place, developers working at home are are using Citrix to connect in to a Windows farm and from there are using XRDP to connect to the Linux workstations. Some of them have reported noticeably better performance using Xvnc rather than Xorg in this configuration.
This PR supports the VNC resizing and multi-screen features used by tigervnc.  I've tested both resizing and multi-screen on CentOS 7.5 (tigervnc 1.8). and resizing on xubuntu 18.04 (tigervnc 1.7).  I can't currently test multi-monitor on xubuntu due to a lack of kit.
I've made the feature optional to avoid breaking workflows used by existing users. So by default there's no change in behaviour. Users wishing to use the new feature can set ""code=1"" in xrdp.ini. This value is used to inform sesman that the VNC session is resizeable, and also to tell the VNC backend to request the ExtendedDesktopSize pseudo-encoding from Xvnc.
The module uses resize-on-reconnect in the same way that the Xorg backend does. When a single screen is used, the use can resize sessions on-the-fly by using 'xrandr -s', or by using the appropriate desktop utility.
For review purposes, I've split the PR into three commits. One is simply running astyle on the vnc module. Another is adding the extra functionality to the backend (plus removing some magic numbers), and the last is the changes to SCP and sesman. The last of these is the bit I'm least confident about. At the moment I haven't completely separated resizable VNC sessions from non-resizeable VNC sessions in sesman itself.  Would that be a better idea?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1343,2019-05-02T10:19:45Z,2020-06-04T14:36:01Z,2020-12-23T10:47:42Z,MERGED,True,1213,210,9,https://github.com/matt335672,Add resizeable backend VNC support,1,['vnc'],https://github.com/neutrinolabs/xrdp/pull/1343,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1343#issuecomment-488941292,"This has been discussed in the past - see #259 and #287.
The VNC backend still seems to be with us, and still seems to have a few useful use cases.  At our place, developers working at home are are using Citrix to connect in to a Windows farm and from there are using XRDP to connect to the Linux workstations. Some of them have reported noticeably better performance using Xvnc rather than Xorg in this configuration.
This PR supports the VNC resizing and multi-screen features used by tigervnc.  I've tested both resizing and multi-screen on CentOS 7.5 (tigervnc 1.8). and resizing on xubuntu 18.04 (tigervnc 1.7).  I can't currently test multi-monitor on xubuntu due to a lack of kit.
I've made the feature optional to avoid breaking workflows used by existing users. So by default there's no change in behaviour. Users wishing to use the new feature can set ""code=1"" in xrdp.ini. This value is used to inform sesman that the VNC session is resizeable, and also to tell the VNC backend to request the ExtendedDesktopSize pseudo-encoding from Xvnc.
The module uses resize-on-reconnect in the same way that the Xorg backend does. When a single screen is used, the use can resize sessions on-the-fly by using 'xrandr -s', or by using the appropriate desktop utility.
For review purposes, I've split the PR into three commits. One is simply running astyle on the vnc module. Another is adding the extra functionality to the backend (plus removing some magic numbers), and the last is the changes to SCP and sesman. The last of these is the bit I'm least confident about. At the moment I haven't completely separated resizable VNC sessions from non-resizeable VNC sessions in sesman itself.  Would that be a better idea?","Actually, I was working on adding resizing support. Mine is still WIP. I review your implementation and combine with mine. Thank you very much for your continuous contributions.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1343,2019-05-02T10:19:45Z,2020-06-04T14:36:01Z,2020-12-23T10:47:42Z,MERGED,True,1213,210,9,https://github.com/matt335672,Add resizeable backend VNC support,1,['vnc'],https://github.com/neutrinolabs/xrdp/pull/1343,https://github.com/matt335672,3,https://github.com/neutrinolabs/xrdp/pull/1343#issuecomment-489170339,"This has been discussed in the past - see #259 and #287.
The VNC backend still seems to be with us, and still seems to have a few useful use cases.  At our place, developers working at home are are using Citrix to connect in to a Windows farm and from there are using XRDP to connect to the Linux workstations. Some of them have reported noticeably better performance using Xvnc rather than Xorg in this configuration.
This PR supports the VNC resizing and multi-screen features used by tigervnc.  I've tested both resizing and multi-screen on CentOS 7.5 (tigervnc 1.8). and resizing on xubuntu 18.04 (tigervnc 1.7).  I can't currently test multi-monitor on xubuntu due to a lack of kit.
I've made the feature optional to avoid breaking workflows used by existing users. So by default there's no change in behaviour. Users wishing to use the new feature can set ""code=1"" in xrdp.ini. This value is used to inform sesman that the VNC session is resizeable, and also to tell the VNC backend to request the ExtendedDesktopSize pseudo-encoding from Xvnc.
The module uses resize-on-reconnect in the same way that the Xorg backend does. When a single screen is used, the use can resize sessions on-the-fly by using 'xrandr -s', or by using the appropriate desktop utility.
For review purposes, I've split the PR into three commits. One is simply running astyle on the vnc module. Another is adding the extra functionality to the backend (plus removing some magic numbers), and the last is the changes to SCP and sesman. The last of these is the bit I'm least confident about. At the moment I haven't completely separated resizable VNC sessions from non-resizeable VNC sessions in sesman itself.  Would that be a better idea?","That sounds like a very good idea - I'm sure you understand the implications for the scp library and sesman better than I do.
I'll leave the PR open for now in case you've got any queries on my implementation, or you'd like me to make other changes.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1343,2019-05-02T10:19:45Z,2020-06-04T14:36:01Z,2020-12-23T10:47:42Z,MERGED,True,1213,210,9,https://github.com/matt335672,Add resizeable backend VNC support,1,['vnc'],https://github.com/neutrinolabs/xrdp/pull/1343,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/1343#issuecomment-522886067,"This has been discussed in the past - see #259 and #287.
The VNC backend still seems to be with us, and still seems to have a few useful use cases.  At our place, developers working at home are are using Citrix to connect in to a Windows farm and from there are using XRDP to connect to the Linux workstations. Some of them have reported noticeably better performance using Xvnc rather than Xorg in this configuration.
This PR supports the VNC resizing and multi-screen features used by tigervnc.  I've tested both resizing and multi-screen on CentOS 7.5 (tigervnc 1.8). and resizing on xubuntu 18.04 (tigervnc 1.7).  I can't currently test multi-monitor on xubuntu due to a lack of kit.
I've made the feature optional to avoid breaking workflows used by existing users. So by default there's no change in behaviour. Users wishing to use the new feature can set ""code=1"" in xrdp.ini. This value is used to inform sesman that the VNC session is resizeable, and also to tell the VNC backend to request the ExtendedDesktopSize pseudo-encoding from Xvnc.
The module uses resize-on-reconnect in the same way that the Xorg backend does. When a single screen is used, the use can resize sessions on-the-fly by using 'xrandr -s', or by using the appropriate desktop utility.
For review purposes, I've split the PR into three commits. One is simply running astyle on the vnc module. Another is adding the extra functionality to the backend (plus removing some magic numbers), and the last is the changes to SCP and sesman. The last of these is the bit I'm least confident about. At the moment I haven't completely separated resizable VNC sessions from non-resizeable VNC sessions in sesman itself.  Would that be a better idea?","Started working on neutrinolabs extended-vnc branch based on your work:
https://github.com/neutrinolabs/xrdp/tree/extended-vnc",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1343,2019-05-02T10:19:45Z,2020-06-04T14:36:01Z,2020-12-23T10:47:42Z,MERGED,True,1213,210,9,https://github.com/matt335672,Add resizeable backend VNC support,1,['vnc'],https://github.com/neutrinolabs/xrdp/pull/1343,https://github.com/metalefty,5,https://github.com/neutrinolabs/xrdp/pull/1343#issuecomment-523757292,"This has been discussed in the past - see #259 and #287.
The VNC backend still seems to be with us, and still seems to have a few useful use cases.  At our place, developers working at home are are using Citrix to connect in to a Windows farm and from there are using XRDP to connect to the Linux workstations. Some of them have reported noticeably better performance using Xvnc rather than Xorg in this configuration.
This PR supports the VNC resizing and multi-screen features used by tigervnc.  I've tested both resizing and multi-screen on CentOS 7.5 (tigervnc 1.8). and resizing on xubuntu 18.04 (tigervnc 1.7).  I can't currently test multi-monitor on xubuntu due to a lack of kit.
I've made the feature optional to avoid breaking workflows used by existing users. So by default there's no change in behaviour. Users wishing to use the new feature can set ""code=1"" in xrdp.ini. This value is used to inform sesman that the VNC session is resizeable, and also to tell the VNC backend to request the ExtendedDesktopSize pseudo-encoding from Xvnc.
The module uses resize-on-reconnect in the same way that the Xorg backend does. When a single screen is used, the use can resize sessions on-the-fly by using 'xrandr -s', or by using the appropriate desktop utility.
For review purposes, I've split the PR into three commits. One is simply running astyle on the vnc module. Another is adding the extra functionality to the backend (plus removing some magic numbers), and the last is the changes to SCP and sesman. The last of these is the bit I'm least confident about. At the moment I haven't completely separated resizable VNC sessions from non-resizeable VNC sessions in sesman itself.  Would that be a better idea?","@matt335672
I'm thinking of removing SCP_SESSION_TYPE_RESIZEABLE_VNC to simplify.  I don't want to care about code=0/1. It should be automatic. If VNC server supports resizing (ExtendedDesktopSize), resize the existing VNC session. If resizing is not supported, connect to the existing session with current size. I'd appreciate if you let me know concerns.
This will change curren behaviour but most people using VNC session don't want to create new session when reconnect from different size.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1343,2019-05-02T10:19:45Z,2020-06-04T14:36:01Z,2020-12-23T10:47:42Z,MERGED,True,1213,210,9,https://github.com/matt335672,Add resizeable backend VNC support,1,['vnc'],https://github.com/neutrinolabs/xrdp/pull/1343,https://github.com/matt335672,6,https://github.com/neutrinolabs/xrdp/pull/1343#issuecomment-526111224,"This has been discussed in the past - see #259 and #287.
The VNC backend still seems to be with us, and still seems to have a few useful use cases.  At our place, developers working at home are are using Citrix to connect in to a Windows farm and from there are using XRDP to connect to the Linux workstations. Some of them have reported noticeably better performance using Xvnc rather than Xorg in this configuration.
This PR supports the VNC resizing and multi-screen features used by tigervnc.  I've tested both resizing and multi-screen on CentOS 7.5 (tigervnc 1.8). and resizing on xubuntu 18.04 (tigervnc 1.7).  I can't currently test multi-monitor on xubuntu due to a lack of kit.
I've made the feature optional to avoid breaking workflows used by existing users. So by default there's no change in behaviour. Users wishing to use the new feature can set ""code=1"" in xrdp.ini. This value is used to inform sesman that the VNC session is resizeable, and also to tell the VNC backend to request the ExtendedDesktopSize pseudo-encoding from Xvnc.
The module uses resize-on-reconnect in the same way that the Xorg backend does. When a single screen is used, the use can resize sessions on-the-fly by using 'xrandr -s', or by using the appropriate desktop utility.
For review purposes, I've split the PR into three commits. One is simply running astyle on the vnc module. Another is adding the extra functionality to the backend (plus removing some magic numbers), and the last is the changes to SCP and sesman. The last of these is the bit I'm least confident about. At the moment I haven't completely separated resizable VNC sessions from non-resizeable VNC sessions in sesman itself.  Would that be a better idea?","Well, when I proposed the PR, I didn't think you'd be happy with changing existing behaviour.
If you are happy with that, I very much agree that it's worth removing SCP_SESSION_TYPE_RESIZEABLE_VNC. It makes the code simpler, and all the backends should now behave the same way. You may even be able to remove the 'D' session allocation policy from the session manager as the session manager won't need to store sizes any more - all the size information can be managed by the vnc module.
I suspect you're right in your assumption that most people would prefer to reconnect to an existing session. There may be people out there using the old behaviour, but I can't think that XRDP is adding much value for them.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1343,2019-05-02T10:19:45Z,2020-06-04T14:36:01Z,2020-12-23T10:47:42Z,MERGED,True,1213,210,9,https://github.com/matt335672,Add resizeable backend VNC support,1,['vnc'],https://github.com/neutrinolabs/xrdp/pull/1343,https://github.com/bolkedebruin,7,https://github.com/neutrinolabs/xrdp/pull/1343#issuecomment-616403669,"This has been discussed in the past - see #259 and #287.
The VNC backend still seems to be with us, and still seems to have a few useful use cases.  At our place, developers working at home are are using Citrix to connect in to a Windows farm and from there are using XRDP to connect to the Linux workstations. Some of them have reported noticeably better performance using Xvnc rather than Xorg in this configuration.
This PR supports the VNC resizing and multi-screen features used by tigervnc.  I've tested both resizing and multi-screen on CentOS 7.5 (tigervnc 1.8). and resizing on xubuntu 18.04 (tigervnc 1.7).  I can't currently test multi-monitor on xubuntu due to a lack of kit.
I've made the feature optional to avoid breaking workflows used by existing users. So by default there's no change in behaviour. Users wishing to use the new feature can set ""code=1"" in xrdp.ini. This value is used to inform sesman that the VNC session is resizeable, and also to tell the VNC backend to request the ExtendedDesktopSize pseudo-encoding from Xvnc.
The module uses resize-on-reconnect in the same way that the Xorg backend does. When a single screen is used, the use can resize sessions on-the-fly by using 'xrandr -s', or by using the appropriate desktop utility.
For review purposes, I've split the PR into three commits. One is simply running astyle on the vnc module. Another is adding the extra functionality to the backend (plus removing some magic numbers), and the last is the changes to SCP and sesman. The last of these is the bit I'm least confident about. At the moment I haven't completely separated resizable VNC sessions from non-resizeable VNC sessions in sesman itself.  Would that be a better idea?",@metalefty can this be reopened again and reconsidered? We now need to apply this patch out of bounds due to the speed difference between VNC and for the exact reasons @matt335672 stated. I don't think there was progress on the other trees so can we take this as a starting point please?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1343,2019-05-02T10:19:45Z,2020-06-04T14:36:01Z,2020-12-23T10:47:42Z,MERGED,True,1213,210,9,https://github.com/matt335672,Add resizeable backend VNC support,1,['vnc'],https://github.com/neutrinolabs/xrdp/pull/1343,https://github.com/metalefty,8,https://github.com/neutrinolabs/xrdp/pull/1343#issuecomment-617484450,"This has been discussed in the past - see #259 and #287.
The VNC backend still seems to be with us, and still seems to have a few useful use cases.  At our place, developers working at home are are using Citrix to connect in to a Windows farm and from there are using XRDP to connect to the Linux workstations. Some of them have reported noticeably better performance using Xvnc rather than Xorg in this configuration.
This PR supports the VNC resizing and multi-screen features used by tigervnc.  I've tested both resizing and multi-screen on CentOS 7.5 (tigervnc 1.8). and resizing on xubuntu 18.04 (tigervnc 1.7).  I can't currently test multi-monitor on xubuntu due to a lack of kit.
I've made the feature optional to avoid breaking workflows used by existing users. So by default there's no change in behaviour. Users wishing to use the new feature can set ""code=1"" in xrdp.ini. This value is used to inform sesman that the VNC session is resizeable, and also to tell the VNC backend to request the ExtendedDesktopSize pseudo-encoding from Xvnc.
The module uses resize-on-reconnect in the same way that the Xorg backend does. When a single screen is used, the use can resize sessions on-the-fly by using 'xrandr -s', or by using the appropriate desktop utility.
For review purposes, I've split the PR into three commits. One is simply running astyle on the vnc module. Another is adding the extra functionality to the backend (plus removing some magic numbers), and the last is the changes to SCP and sesman. The last of these is the bit I'm least confident about. At the moment I haven't completely separated resizable VNC sessions from non-resizeable VNC sessions in sesman itself.  Would that be a better idea?","Hello, actually @matt335672 did most work (thanks!). Then I make some changes to his work. However, there's no progress because of the lack of my time. So the bottleneck is certainly me. I'm really sorry about that. I should leave it to others rather than damming up the development at my place.
@matt335672 can you continue further development as I mentioned at #1343 (comment) ? Sorry about I made no progress.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1343,2019-05-02T10:19:45Z,2020-06-04T14:36:01Z,2020-12-23T10:47:42Z,MERGED,True,1213,210,9,https://github.com/matt335672,Add resizeable backend VNC support,1,['vnc'],https://github.com/neutrinolabs/xrdp/pull/1343,https://github.com/matt335672,9,https://github.com/neutrinolabs/xrdp/pull/1343#issuecomment-617685303,"This has been discussed in the past - see #259 and #287.
The VNC backend still seems to be with us, and still seems to have a few useful use cases.  At our place, developers working at home are are using Citrix to connect in to a Windows farm and from there are using XRDP to connect to the Linux workstations. Some of them have reported noticeably better performance using Xvnc rather than Xorg in this configuration.
This PR supports the VNC resizing and multi-screen features used by tigervnc.  I've tested both resizing and multi-screen on CentOS 7.5 (tigervnc 1.8). and resizing on xubuntu 18.04 (tigervnc 1.7).  I can't currently test multi-monitor on xubuntu due to a lack of kit.
I've made the feature optional to avoid breaking workflows used by existing users. So by default there's no change in behaviour. Users wishing to use the new feature can set ""code=1"" in xrdp.ini. This value is used to inform sesman that the VNC session is resizeable, and also to tell the VNC backend to request the ExtendedDesktopSize pseudo-encoding from Xvnc.
The module uses resize-on-reconnect in the same way that the Xorg backend does. When a single screen is used, the use can resize sessions on-the-fly by using 'xrandr -s', or by using the appropriate desktop utility.
For review purposes, I've split the PR into three commits. One is simply running astyle on the vnc module. Another is adding the extra functionality to the backend (plus removing some magic numbers), and the last is the changes to SCP and sesman. The last of these is the bit I'm least confident about. At the moment I haven't completely separated resizable VNC sessions from non-resizeable VNC sessions in sesman itself.  Would that be a better idea?","Hi both,
Yes, I'm happy to do some further work on this.
It'll take me a few days to get to it. When I raised this PR, I was working as a sysadmin to a bunch of software developers with twin monitor setups. At the moment I'm at home without even a twin monitor setup, so I'm going to have to work out how I can set something up for testing and the inevitable bug-fixes that will be needed after we get something out.
@bolkedebruin - if you tell me which version of XRDP you're working with at the moment I'll rebase my extended-vnc branch on https://github.com/matt335672/xrdp to that as soon as I can. If you want to pull from there it might help your existing workflows, and if you want to change versions we can rebase again. If you're happy to test and comment on the changes I'll be making before release that could be quite useful for both of us I think.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1343,2019-05-02T10:19:45Z,2020-06-04T14:36:01Z,2020-12-23T10:47:42Z,MERGED,True,1213,210,9,https://github.com/matt335672,Add resizeable backend VNC support,1,['vnc'],https://github.com/neutrinolabs/xrdp/pull/1343,https://github.com/bolkedebruin,10,https://github.com/neutrinolabs/xrdp/pull/1343#issuecomment-617698822,"This has been discussed in the past - see #259 and #287.
The VNC backend still seems to be with us, and still seems to have a few useful use cases.  At our place, developers working at home are are using Citrix to connect in to a Windows farm and from there are using XRDP to connect to the Linux workstations. Some of them have reported noticeably better performance using Xvnc rather than Xorg in this configuration.
This PR supports the VNC resizing and multi-screen features used by tigervnc.  I've tested both resizing and multi-screen on CentOS 7.5 (tigervnc 1.8). and resizing on xubuntu 18.04 (tigervnc 1.7).  I can't currently test multi-monitor on xubuntu due to a lack of kit.
I've made the feature optional to avoid breaking workflows used by existing users. So by default there's no change in behaviour. Users wishing to use the new feature can set ""code=1"" in xrdp.ini. This value is used to inform sesman that the VNC session is resizeable, and also to tell the VNC backend to request the ExtendedDesktopSize pseudo-encoding from Xvnc.
The module uses resize-on-reconnect in the same way that the Xorg backend does. When a single screen is used, the use can resize sessions on-the-fly by using 'xrandr -s', or by using the appropriate desktop utility.
For review purposes, I've split the PR into three commits. One is simply running astyle on the vnc module. Another is adding the extra functionality to the backend (plus removing some magic numbers), and the last is the changes to SCP and sesman. The last of these is the bit I'm least confident about. At the moment I haven't completely separated resizable VNC sessions from non-resizeable VNC sessions in sesman itself.  Would that be a better idea?",Awesome! We applied your patch to 0.9.10 but would like it to apply to 0.9.12. We haven't tried yet in this case. We have been running the patch for over 6 months without any issues AFAIK btw. So I would argue patch clean up would be enough.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1343,2019-05-02T10:19:45Z,2020-06-04T14:36:01Z,2020-12-23T10:47:42Z,MERGED,True,1213,210,9,https://github.com/matt335672,Add resizeable backend VNC support,1,['vnc'],https://github.com/neutrinolabs/xrdp/pull/1343,https://github.com/matt335672,11,https://github.com/neutrinolabs/xrdp/pull/1343#issuecomment-617710229,"This has been discussed in the past - see #259 and #287.
The VNC backend still seems to be with us, and still seems to have a few useful use cases.  At our place, developers working at home are are using Citrix to connect in to a Windows farm and from there are using XRDP to connect to the Linux workstations. Some of them have reported noticeably better performance using Xvnc rather than Xorg in this configuration.
This PR supports the VNC resizing and multi-screen features used by tigervnc.  I've tested both resizing and multi-screen on CentOS 7.5 (tigervnc 1.8). and resizing on xubuntu 18.04 (tigervnc 1.7).  I can't currently test multi-monitor on xubuntu due to a lack of kit.
I've made the feature optional to avoid breaking workflows used by existing users. So by default there's no change in behaviour. Users wishing to use the new feature can set ""code=1"" in xrdp.ini. This value is used to inform sesman that the VNC session is resizeable, and also to tell the VNC backend to request the ExtendedDesktopSize pseudo-encoding from Xvnc.
The module uses resize-on-reconnect in the same way that the Xorg backend does. When a single screen is used, the use can resize sessions on-the-fly by using 'xrandr -s', or by using the appropriate desktop utility.
For review purposes, I've split the PR into three commits. One is simply running astyle on the vnc module. Another is adding the extra functionality to the backend (plus removing some magic numbers), and the last is the changes to SCP and sesman. The last of these is the bit I'm least confident about. At the moment I haven't completely separated resizable VNC sessions from non-resizeable VNC sessions in sesman itself.  Would that be a better idea?","Hi @bolkedebruin
I've rebased to v0.9.12 and the branch builds cleanly. For the reasons stated above I haven't tested this yet, but you're welcome to work with it.
I think that was what you wanted - please correct me if not.
Met vriendelijke groet",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1343,2019-05-02T10:19:45Z,2020-06-04T14:36:01Z,2020-12-23T10:47:42Z,MERGED,True,1213,210,9,https://github.com/matt335672,Add resizeable backend VNC support,1,['vnc'],https://github.com/neutrinolabs/xrdp/pull/1343,https://github.com/bolkedebruin,12,https://github.com/neutrinolabs/xrdp/pull/1343#issuecomment-617726222,"This has been discussed in the past - see #259 and #287.
The VNC backend still seems to be with us, and still seems to have a few useful use cases.  At our place, developers working at home are are using Citrix to connect in to a Windows farm and from there are using XRDP to connect to the Linux workstations. Some of them have reported noticeably better performance using Xvnc rather than Xorg in this configuration.
This PR supports the VNC resizing and multi-screen features used by tigervnc.  I've tested both resizing and multi-screen on CentOS 7.5 (tigervnc 1.8). and resizing on xubuntu 18.04 (tigervnc 1.7).  I can't currently test multi-monitor on xubuntu due to a lack of kit.
I've made the feature optional to avoid breaking workflows used by existing users. So by default there's no change in behaviour. Users wishing to use the new feature can set ""code=1"" in xrdp.ini. This value is used to inform sesman that the VNC session is resizeable, and also to tell the VNC backend to request the ExtendedDesktopSize pseudo-encoding from Xvnc.
The module uses resize-on-reconnect in the same way that the Xorg backend does. When a single screen is used, the use can resize sessions on-the-fly by using 'xrandr -s', or by using the appropriate desktop utility.
For review purposes, I've split the PR into three commits. One is simply running astyle on the vnc module. Another is adding the extra functionality to the backend (plus removing some magic numbers), and the last is the changes to SCP and sesman. The last of these is the bit I'm least confident about. At the moment I haven't completely separated resizable VNC sessions from non-resizeable VNC sessions in sesman itself.  Would that be a better idea?","Thanks! Honestly what I would like is to have this in the main branch. I know your patch is working well ;-)
Dank",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1343,2019-05-02T10:19:45Z,2020-06-04T14:36:01Z,2020-12-23T10:47:42Z,MERGED,True,1213,210,9,https://github.com/matt335672,Add resizeable backend VNC support,1,['vnc'],https://github.com/neutrinolabs/xrdp/pull/1343,https://github.com/bolkedebruin,13,https://github.com/neutrinolabs/xrdp/pull/1343#issuecomment-617785148,"This has been discussed in the past - see #259 and #287.
The VNC backend still seems to be with us, and still seems to have a few useful use cases.  At our place, developers working at home are are using Citrix to connect in to a Windows farm and from there are using XRDP to connect to the Linux workstations. Some of them have reported noticeably better performance using Xvnc rather than Xorg in this configuration.
This PR supports the VNC resizing and multi-screen features used by tigervnc.  I've tested both resizing and multi-screen on CentOS 7.5 (tigervnc 1.8). and resizing on xubuntu 18.04 (tigervnc 1.7).  I can't currently test multi-monitor on xubuntu due to a lack of kit.
I've made the feature optional to avoid breaking workflows used by existing users. So by default there's no change in behaviour. Users wishing to use the new feature can set ""code=1"" in xrdp.ini. This value is used to inform sesman that the VNC session is resizeable, and also to tell the VNC backend to request the ExtendedDesktopSize pseudo-encoding from Xvnc.
The module uses resize-on-reconnect in the same way that the Xorg backend does. When a single screen is used, the use can resize sessions on-the-fly by using 'xrandr -s', or by using the appropriate desktop utility.
For review purposes, I've split the PR into three commits. One is simply running astyle on the vnc module. Another is adding the extra functionality to the backend (plus removing some magic numbers), and the last is the changes to SCP and sesman. The last of these is the bit I'm least confident about. At the moment I haven't completely separated resizable VNC sessions from non-resizeable VNC sessions in sesman itself.  Would that be a better idea?",@metalefty anything left for you to be able to merge this?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1343,2019-05-02T10:19:45Z,2020-06-04T14:36:01Z,2020-12-23T10:47:42Z,MERGED,True,1213,210,9,https://github.com/matt335672,Add resizeable backend VNC support,1,['vnc'],https://github.com/neutrinolabs/xrdp/pull/1343,https://github.com/metalefty,14,https://github.com/neutrinolabs/xrdp/pull/1343#issuecomment-617827359,"This has been discussed in the past - see #259 and #287.
The VNC backend still seems to be with us, and still seems to have a few useful use cases.  At our place, developers working at home are are using Citrix to connect in to a Windows farm and from there are using XRDP to connect to the Linux workstations. Some of them have reported noticeably better performance using Xvnc rather than Xorg in this configuration.
This PR supports the VNC resizing and multi-screen features used by tigervnc.  I've tested both resizing and multi-screen on CentOS 7.5 (tigervnc 1.8). and resizing on xubuntu 18.04 (tigervnc 1.7).  I can't currently test multi-monitor on xubuntu due to a lack of kit.
I've made the feature optional to avoid breaking workflows used by existing users. So by default there's no change in behaviour. Users wishing to use the new feature can set ""code=1"" in xrdp.ini. This value is used to inform sesman that the VNC session is resizeable, and also to tell the VNC backend to request the ExtendedDesktopSize pseudo-encoding from Xvnc.
The module uses resize-on-reconnect in the same way that the Xorg backend does. When a single screen is used, the use can resize sessions on-the-fly by using 'xrandr -s', or by using the appropriate desktop utility.
For review purposes, I've split the PR into three commits. One is simply running astyle on the vnc module. Another is adding the extra functionality to the backend (plus removing some magic numbers), and the last is the changes to SCP and sesman. The last of these is the bit I'm least confident about. At the moment I haven't completely separated resizable VNC sessions from non-resizeable VNC sessions in sesman itself.  Would that be a better idea?",@bolkedebruin Let me some time to test.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1343,2019-05-02T10:19:45Z,2020-06-04T14:36:01Z,2020-12-23T10:47:42Z,MERGED,True,1213,210,9,https://github.com/matt335672,Add resizeable backend VNC support,1,['vnc'],https://github.com/neutrinolabs/xrdp/pull/1343,https://github.com/matt335672,15,https://github.com/neutrinolabs/xrdp/pull/1343#issuecomment-617850315,"This has been discussed in the past - see #259 and #287.
The VNC backend still seems to be with us, and still seems to have a few useful use cases.  At our place, developers working at home are are using Citrix to connect in to a Windows farm and from there are using XRDP to connect to the Linux workstations. Some of them have reported noticeably better performance using Xvnc rather than Xorg in this configuration.
This PR supports the VNC resizing and multi-screen features used by tigervnc.  I've tested both resizing and multi-screen on CentOS 7.5 (tigervnc 1.8). and resizing on xubuntu 18.04 (tigervnc 1.7).  I can't currently test multi-monitor on xubuntu due to a lack of kit.
I've made the feature optional to avoid breaking workflows used by existing users. So by default there's no change in behaviour. Users wishing to use the new feature can set ""code=1"" in xrdp.ini. This value is used to inform sesman that the VNC session is resizeable, and also to tell the VNC backend to request the ExtendedDesktopSize pseudo-encoding from Xvnc.
The module uses resize-on-reconnect in the same way that the Xorg backend does. When a single screen is used, the use can resize sessions on-the-fly by using 'xrandr -s', or by using the appropriate desktop utility.
For review purposes, I've split the PR into three commits. One is simply running astyle on the vnc module. Another is adding the extra functionality to the backend (plus removing some magic numbers), and the last is the changes to SCP and sesman. The last of these is the bit I'm least confident about. At the moment I haven't completely separated resizable VNC sessions from non-resizeable VNC sessions in sesman itself.  Would that be a better idea?","Now I'm a bit confused.
@metalefty - do you want me to work on removing SCP_SESSION_TYPE_RESIZEABLE_VNC? Happy to do that or leave it as you suggest.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1343,2019-05-02T10:19:45Z,2020-06-04T14:36:01Z,2020-12-23T10:47:42Z,MERGED,True,1213,210,9,https://github.com/matt335672,Add resizeable backend VNC support,1,['vnc'],https://github.com/neutrinolabs/xrdp/pull/1343,https://github.com/metalefty,16,https://github.com/neutrinolabs/xrdp/pull/1343#issuecomment-619542064,"This has been discussed in the past - see #259 and #287.
The VNC backend still seems to be with us, and still seems to have a few useful use cases.  At our place, developers working at home are are using Citrix to connect in to a Windows farm and from there are using XRDP to connect to the Linux workstations. Some of them have reported noticeably better performance using Xvnc rather than Xorg in this configuration.
This PR supports the VNC resizing and multi-screen features used by tigervnc.  I've tested both resizing and multi-screen on CentOS 7.5 (tigervnc 1.8). and resizing on xubuntu 18.04 (tigervnc 1.7).  I can't currently test multi-monitor on xubuntu due to a lack of kit.
I've made the feature optional to avoid breaking workflows used by existing users. So by default there's no change in behaviour. Users wishing to use the new feature can set ""code=1"" in xrdp.ini. This value is used to inform sesman that the VNC session is resizeable, and also to tell the VNC backend to request the ExtendedDesktopSize pseudo-encoding from Xvnc.
The module uses resize-on-reconnect in the same way that the Xorg backend does. When a single screen is used, the use can resize sessions on-the-fly by using 'xrandr -s', or by using the appropriate desktop utility.
For review purposes, I've split the PR into three commits. One is simply running astyle on the vnc module. Another is adding the extra functionality to the backend (plus removing some magic numbers), and the last is the changes to SCP and sesman. The last of these is the bit I'm least confident about. At the moment I haven't completely separated resizable VNC sessions from non-resizeable VNC sessions in sesman itself.  Would that be a better idea?","@matt335672
Yes, I'm thinking of like this.

Remove SCP_SESSION_TYPE_RESIZEABLE_VNC
Always allow VNC to connect existing session (like xorgxrdp session)
Detect if VNC supports resizing

If VNC supports resizing, resize the session to client size
If VNC doesn't support resizing, resize the client to server size",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1343,2019-05-02T10:19:45Z,2020-06-04T14:36:01Z,2020-12-23T10:47:42Z,MERGED,True,1213,210,9,https://github.com/matt335672,Add resizeable backend VNC support,1,['vnc'],https://github.com/neutrinolabs/xrdp/pull/1343,https://github.com/matt335672,17,https://github.com/neutrinolabs/xrdp/pull/1343#issuecomment-632021784,"This has been discussed in the past - see #259 and #287.
The VNC backend still seems to be with us, and still seems to have a few useful use cases.  At our place, developers working at home are are using Citrix to connect in to a Windows farm and from there are using XRDP to connect to the Linux workstations. Some of them have reported noticeably better performance using Xvnc rather than Xorg in this configuration.
This PR supports the VNC resizing and multi-screen features used by tigervnc.  I've tested both resizing and multi-screen on CentOS 7.5 (tigervnc 1.8). and resizing on xubuntu 18.04 (tigervnc 1.7).  I can't currently test multi-monitor on xubuntu due to a lack of kit.
I've made the feature optional to avoid breaking workflows used by existing users. So by default there's no change in behaviour. Users wishing to use the new feature can set ""code=1"" in xrdp.ini. This value is used to inform sesman that the VNC session is resizeable, and also to tell the VNC backend to request the ExtendedDesktopSize pseudo-encoding from Xvnc.
The module uses resize-on-reconnect in the same way that the Xorg backend does. When a single screen is used, the use can resize sessions on-the-fly by using 'xrandr -s', or by using the appropriate desktop utility.
For review purposes, I've split the PR into three commits. One is simply running astyle on the vnc module. Another is adding the extra functionality to the backend (plus removing some magic numbers), and the last is the changes to SCP and sesman. The last of these is the bit I'm least confident about. At the moment I haven't completely separated resizable VNC sessions from non-resizeable VNC sessions in sesman itself.  Would that be a better idea?","I've just added a commit to this branch which implements the changes requested by @metalefty

Removes SCP_SESSION_TYPE_RESIZEABLE_VNC
By default VNC connects to existing session
Detect if VNC supports resizing at connect time

If VNC supports resizing, resize the session to client size
If VNC doesn't support resizing, resize the client to server size



I've also fixed a number of bugs, the most important of which are:-

Windows monitor layouts where the primary monitor was not the left-top monitor now work.
The Windows client can be resized to single monitor layout when configured as multi-monitor but connecting to a single screen VNC server.

The resize detection has been moved to a separate state machine which runs after the connect which I think makes the logic clearer. I've also added a variable to allow the ExtendedDesktop pseudo-encoding support to be disabled if a serious problem is found with either my changes or a particular VNC server.
I've tried to use doxygen-compatible function headers where required.
So far I've tested on tigervnc and an x11vnc session on the console. I'll try a few other VNC servers.
Any comments or testing are very welcome.
Edit: If you're running with a previous version of this PR, remember to remove code=1 from xrdp.ini, as this will no longer work",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1343,2019-05-02T10:19:45Z,2020-06-04T14:36:01Z,2020-12-23T10:47:42Z,MERGED,True,1213,210,9,https://github.com/matt335672,Add resizeable backend VNC support,1,['vnc'],https://github.com/neutrinolabs/xrdp/pull/1343,https://github.com/Nexarian,18,https://github.com/neutrinolabs/xrdp/pull/1343#issuecomment-632044236,"This has been discussed in the past - see #259 and #287.
The VNC backend still seems to be with us, and still seems to have a few useful use cases.  At our place, developers working at home are are using Citrix to connect in to a Windows farm and from there are using XRDP to connect to the Linux workstations. Some of them have reported noticeably better performance using Xvnc rather than Xorg in this configuration.
This PR supports the VNC resizing and multi-screen features used by tigervnc.  I've tested both resizing and multi-screen on CentOS 7.5 (tigervnc 1.8). and resizing on xubuntu 18.04 (tigervnc 1.7).  I can't currently test multi-monitor on xubuntu due to a lack of kit.
I've made the feature optional to avoid breaking workflows used by existing users. So by default there's no change in behaviour. Users wishing to use the new feature can set ""code=1"" in xrdp.ini. This value is used to inform sesman that the VNC session is resizeable, and also to tell the VNC backend to request the ExtendedDesktopSize pseudo-encoding from Xvnc.
The module uses resize-on-reconnect in the same way that the Xorg backend does. When a single screen is used, the use can resize sessions on-the-fly by using 'xrandr -s', or by using the appropriate desktop utility.
For review purposes, I've split the PR into three commits. One is simply running astyle on the vnc module. Another is adding the extra functionality to the backend (plus removing some magic numbers), and the last is the changes to SCP and sesman. The last of these is the bit I'm least confident about. At the moment I haven't completely separated resizable VNC sessions from non-resizeable VNC sessions in sesman itself.  Would that be a better idea?","So this is for VNC only, right?

What about compatibility with this:
#448?
…
On Thu, May 21, 2020 at 6:57 AM matt335672 ***@***.***> wrote:
 I've just added a commit to this branch which implements the changes
 requested by @metalefty <https://github.com/metalefty>

    - Removes SCP_SESSION_TYPE_RESIZEABLE_VNC
    - By default VNC connects to existing session
    - Detect if VNC supports resizing at connect time
       - If VNC supports resizing, resize the session to client size
       - If VNC doesn't support resizing, resize the client to server size

 I've also fixed a number of bugs, the most important of which are:-

    - Windows monitor layouts where the primary monitor was not the
    left-top monitor now work.
    - The Windows client can be resized to single monitor layout when
    configured as multi-monitor but connecting to a single screen VNC server.

 The resize detection has been moved to a separate state machine which runs
 after the connect which I think makes the logic clearer. I've also added a
 variable to allow the ExtendedDesktop pseudo-encoding support to be
 disabled if a serious problem is found with either my changes or a
 particuat VNC server.

 I've tried to use doxygen-compatible function headers where required.

 So far I've tested on tigervnc and an x11vnc session on the console. I'll
 try a few other VNC servers.

 Any comments or testing are very welcome.

 —
 You are receiving this because you are subscribed to this thread.
 Reply to this email directly, view it on GitHub
 <#1343 (comment)>,
 or unsubscribe
 <https://github.com/notifications/unsubscribe-auth/AA4UBHPIFEGKA25KI3TJWVLRSUCIFANCNFSM4HJ5BYHQ>
 .",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1343,2019-05-02T10:19:45Z,2020-06-04T14:36:01Z,2020-12-23T10:47:42Z,MERGED,True,1213,210,9,https://github.com/matt335672,Add resizeable backend VNC support,1,['vnc'],https://github.com/neutrinolabs/xrdp/pull/1343,https://github.com/matt335672,19,https://github.com/neutrinolabs/xrdp/pull/1343#issuecomment-632057358,"This has been discussed in the past - see #259 and #287.
The VNC backend still seems to be with us, and still seems to have a few useful use cases.  At our place, developers working at home are are using Citrix to connect in to a Windows farm and from there are using XRDP to connect to the Linux workstations. Some of them have reported noticeably better performance using Xvnc rather than Xorg in this configuration.
This PR supports the VNC resizing and multi-screen features used by tigervnc.  I've tested both resizing and multi-screen on CentOS 7.5 (tigervnc 1.8). and resizing on xubuntu 18.04 (tigervnc 1.7).  I can't currently test multi-monitor on xubuntu due to a lack of kit.
I've made the feature optional to avoid breaking workflows used by existing users. So by default there's no change in behaviour. Users wishing to use the new feature can set ""code=1"" in xrdp.ini. This value is used to inform sesman that the VNC session is resizeable, and also to tell the VNC backend to request the ExtendedDesktopSize pseudo-encoding from Xvnc.
The module uses resize-on-reconnect in the same way that the Xorg backend does. When a single screen is used, the use can resize sessions on-the-fly by using 'xrandr -s', or by using the appropriate desktop utility.
For review purposes, I've split the PR into three commits. One is simply running astyle on the vnc module. Another is adding the extra functionality to the backend (plus removing some magic numbers), and the last is the changes to SCP and sesman. The last of these is the bit I'm least confident about. At the moment I haven't completely separated resizable VNC sessions from non-resizeable VNC sessions in sesman itself.  Would that be a better idea?","That's a good point.
Yes, this is for VNC only. It brings resize on connect to VNC, but there's no reason why resize logic couldn't be used to implement #448 for VNC, provided the particular Xvnc server supports it.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1343,2019-05-02T10:19:45Z,2020-06-04T14:36:01Z,2020-12-23T10:47:42Z,MERGED,True,1213,210,9,https://github.com/matt335672,Add resizeable backend VNC support,1,['vnc'],https://github.com/neutrinolabs/xrdp/pull/1343,https://github.com/Nexarian,20,https://github.com/neutrinolabs/xrdp/pull/1343#issuecomment-632100808,"This has been discussed in the past - see #259 and #287.
The VNC backend still seems to be with us, and still seems to have a few useful use cases.  At our place, developers working at home are are using Citrix to connect in to a Windows farm and from there are using XRDP to connect to the Linux workstations. Some of them have reported noticeably better performance using Xvnc rather than Xorg in this configuration.
This PR supports the VNC resizing and multi-screen features used by tigervnc.  I've tested both resizing and multi-screen on CentOS 7.5 (tigervnc 1.8). and resizing on xubuntu 18.04 (tigervnc 1.7).  I can't currently test multi-monitor on xubuntu due to a lack of kit.
I've made the feature optional to avoid breaking workflows used by existing users. So by default there's no change in behaviour. Users wishing to use the new feature can set ""code=1"" in xrdp.ini. This value is used to inform sesman that the VNC session is resizeable, and also to tell the VNC backend to request the ExtendedDesktopSize pseudo-encoding from Xvnc.
The module uses resize-on-reconnect in the same way that the Xorg backend does. When a single screen is used, the use can resize sessions on-the-fly by using 'xrandr -s', or by using the appropriate desktop utility.
For review purposes, I've split the PR into three commits. One is simply running astyle on the vnc module. Another is adding the extra functionality to the backend (plus removing some magic numbers), and the last is the changes to SCP and sesman. The last of these is the bit I'm least confident about. At the moment I haven't completely separated resizable VNC sessions from non-resizeable VNC sessions in sesman itself.  Would that be a better idea?","I really want to see this happen. How can I help?
…
On Thu, May 21, 2020 at 8:25 AM matt335672 ***@***.***> wrote:
 That's a good point.

 Yes, this is for VNC only. It brings resize on connect to VNC, but there's
 no reason why resize logic couldn't be used to implement #448
 <#448> for VNC, provided the
 particular Xvnc server supports it.

 —
 You are receiving this because you commented.
 Reply to this email directly, view it on GitHub
 <#1343 (comment)>,
 or unsubscribe
 <https://github.com/notifications/unsubscribe-auth/AA4UBHL2HYDOJXBVBHWMFCDRSUMULANCNFSM4HJ5BYHQ>
 .",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1343,2019-05-02T10:19:45Z,2020-06-04T14:36:01Z,2020-12-23T10:47:42Z,MERGED,True,1213,210,9,https://github.com/matt335672,Add resizeable backend VNC support,1,['vnc'],https://github.com/neutrinolabs/xrdp/pull/1343,https://github.com/matt335672,21,https://github.com/neutrinolabs/xrdp/pull/1343#issuecomment-632618010,"This has been discussed in the past - see #259 and #287.
The VNC backend still seems to be with us, and still seems to have a few useful use cases.  At our place, developers working at home are are using Citrix to connect in to a Windows farm and from there are using XRDP to connect to the Linux workstations. Some of them have reported noticeably better performance using Xvnc rather than Xorg in this configuration.
This PR supports the VNC resizing and multi-screen features used by tigervnc.  I've tested both resizing and multi-screen on CentOS 7.5 (tigervnc 1.8). and resizing on xubuntu 18.04 (tigervnc 1.7).  I can't currently test multi-monitor on xubuntu due to a lack of kit.
I've made the feature optional to avoid breaking workflows used by existing users. So by default there's no change in behaviour. Users wishing to use the new feature can set ""code=1"" in xrdp.ini. This value is used to inform sesman that the VNC session is resizeable, and also to tell the VNC backend to request the ExtendedDesktopSize pseudo-encoding from Xvnc.
The module uses resize-on-reconnect in the same way that the Xorg backend does. When a single screen is used, the use can resize sessions on-the-fly by using 'xrandr -s', or by using the appropriate desktop utility.
For review purposes, I've split the PR into three commits. One is simply running astyle on the vnc module. Another is adding the extra functionality to the backend (plus removing some magic numbers), and the last is the changes to SCP and sesman. The last of these is the bit I'm least confident about. At the moment I haven't completely separated resizable VNC sessions from non-resizeable VNC sessions in sesman itself.  Would that be a better idea?","I think what I said was open to some misinterpretation - sorry about that.
What I meant was when #448 gets merged, getting the support into VNC too should be straightforward as all the functionality will be in the VNC library.
I can't comment on #448 - it somewhat predates my involvement. I can only suggest you ask Jay for an update on that thread. I'm happy to work on the VNC part, but I don't think that's at all critical.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1343,2019-05-02T10:19:45Z,2020-06-04T14:36:01Z,2020-12-23T10:47:42Z,MERGED,True,1213,210,9,https://github.com/matt335672,Add resizeable backend VNC support,1,['vnc'],https://github.com/neutrinolabs/xrdp/pull/1343,https://github.com/metalefty,22,https://github.com/neutrinolabs/xrdp/pull/1343#issuecomment-632677325,"This has been discussed in the past - see #259 and #287.
The VNC backend still seems to be with us, and still seems to have a few useful use cases.  At our place, developers working at home are are using Citrix to connect in to a Windows farm and from there are using XRDP to connect to the Linux workstations. Some of them have reported noticeably better performance using Xvnc rather than Xorg in this configuration.
This PR supports the VNC resizing and multi-screen features used by tigervnc.  I've tested both resizing and multi-screen on CentOS 7.5 (tigervnc 1.8). and resizing on xubuntu 18.04 (tigervnc 1.7).  I can't currently test multi-monitor on xubuntu due to a lack of kit.
I've made the feature optional to avoid breaking workflows used by existing users. So by default there's no change in behaviour. Users wishing to use the new feature can set ""code=1"" in xrdp.ini. This value is used to inform sesman that the VNC session is resizeable, and also to tell the VNC backend to request the ExtendedDesktopSize pseudo-encoding from Xvnc.
The module uses resize-on-reconnect in the same way that the Xorg backend does. When a single screen is used, the use can resize sessions on-the-fly by using 'xrandr -s', or by using the appropriate desktop utility.
For review purposes, I've split the PR into three commits. One is simply running astyle on the vnc module. Another is adding the extra functionality to the backend (plus removing some magic numbers), and the last is the changes to SCP and sesman. The last of these is the bit I'm least confident about. At the moment I haven't completely separated resizable VNC sessions from non-resizeable VNC sessions in sesman itself.  Would that be a better idea?","At first glance, it is working quite well.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1343,2019-05-02T10:19:45Z,2020-06-04T14:36:01Z,2020-12-23T10:47:42Z,MERGED,True,1213,210,9,https://github.com/matt335672,Add resizeable backend VNC support,1,['vnc'],https://github.com/neutrinolabs/xrdp/pull/1343,https://github.com/metalefty,23,https://github.com/neutrinolabs/xrdp/pull/1343#issuecomment-632698436,"This has been discussed in the past - see #259 and #287.
The VNC backend still seems to be with us, and still seems to have a few useful use cases.  At our place, developers working at home are are using Citrix to connect in to a Windows farm and from there are using XRDP to connect to the Linux workstations. Some of them have reported noticeably better performance using Xvnc rather than Xorg in this configuration.
This PR supports the VNC resizing and multi-screen features used by tigervnc.  I've tested both resizing and multi-screen on CentOS 7.5 (tigervnc 1.8). and resizing on xubuntu 18.04 (tigervnc 1.7).  I can't currently test multi-monitor on xubuntu due to a lack of kit.
I've made the feature optional to avoid breaking workflows used by existing users. So by default there's no change in behaviour. Users wishing to use the new feature can set ""code=1"" in xrdp.ini. This value is used to inform sesman that the VNC session is resizeable, and also to tell the VNC backend to request the ExtendedDesktopSize pseudo-encoding from Xvnc.
The module uses resize-on-reconnect in the same way that the Xorg backend does. When a single screen is used, the use can resize sessions on-the-fly by using 'xrandr -s', or by using the appropriate desktop utility.
For review purposes, I've split the PR into three commits. One is simply running astyle on the vnc module. Another is adding the extra functionality to the backend (plus removing some magic numbers), and the last is the changes to SCP and sesman. The last of these is the bit I'm least confident about. At the moment I haven't completely separated resizable VNC sessions from non-resizeable VNC sessions in sesman itself.  Would that be a better idea?","@matt335672
Something going wrong when -AcceptSetDesktopSize=0 (TigerVNC 1.7.0).
Regarding community maintained RFB specification, the VNC server may deny SetDesktopSize request.
[Xvnc]
param=Xvnc
param=-bs
param=-nolisten
param=tcp
param=-localhost
param=-dpi
param=96
param=-AcceptSetDesktopSize=0

[20200522-13:16:06] [DEBUG] xrdp_wm_log_msg: connecting to sesman ip 127.0.0.1 port 3350
[20200522-13:16:06] [INFO ] xrdp_wm_log_msg: sesman connect ok
[20200522-13:16:06] [DEBUG] xrdp_wm_log_msg: sending login info to session manager, please wait...
[20200522-13:16:06] [DEBUG] return value from xrdp_mm_connect 0
[20200522-13:16:06] [INFO ] xrdp_wm_log_msg: login successful for display 10
[20200522-13:16:06] [DEBUG] Layout from client_info (geom=1364x768 #screens=1) : 0:(1364x768+0+0)
[20200522-13:16:06] [DEBUG] xrdp_wm_log_msg: VNC started connecting
[20200522-13:16:06] [DEBUG] xrdp_wm_log_msg: VNC connecting to 127.0.0.1 5910
[20200522-13:16:06] [DEBUG] xrdp_wm_log_msg: VNC tcp connected
[20200522-13:16:06] [DEBUG] xrdp_wm_log_msg: VNC security level is 2 (1 = none, 2 = standard)
[20200522-13:16:06] [DEBUG] xrdp_wm_log_msg: VNC password ok
[20200522-13:16:06] [DEBUG] xrdp_wm_log_msg: VNC sending share flag
[20200522-13:16:06] [DEBUG] xrdp_wm_log_msg: VNC receiving server init
[20200522-13:16:06] [DEBUG] xrdp_wm_log_msg: VNC receiving pixel format
[20200522-13:16:06] [DEBUG] xrdp_wm_log_msg: VNC receiving name length
[20200522-13:16:06] [DEBUG] xrdp_wm_log_msg: VNC receiving name
[20200522-13:16:06] [DEBUG] xrdp_wm_log_msg: VNC sending pixel format
[20200522-13:16:06] [DEBUG] xrdp_wm_log_msg: VNC sending cursor
[20200522-13:16:06] [DEBUG] xrdp_wm_log_msg: VNC connection complete, connected ok
[20200522-13:16:06] [DEBUG] xrdp_wm_log_msg: connected ok
[20200522-13:16:06] [DEBUG] xrdp_mm_connect_chansrv: chansrv connect successful
[20200522-13:16:06] [DEBUG] Closed socket 26 (AF_INET 127.0.0.1:41098)
[20200522-13:16:06] [DEBUG] Skipping ENC_CURSOR encoding
[20200522-13:16:06] [DEBUG] VNC matched ExtendedDesktopSize rectangle x=0, y=0 geom=1920x1080
[20200522-13:16:06] [DEBUG] X server supports resizing
[20200522-13:16:06] [DEBUG] Layout from Xvnc (geom=1920x1080 #screens=1) : 1804289383:(1920x1080+0+0)
[20200522-13:16:06] [DEBUG] VNC setting screen id to 1804289383 from server
[20200522-13:16:06] [DEBUG] Sending SetDesktopSize to change server layout
[20200522-13:16:06] [DEBUG] VNC Sending SetDesktopSize
[20200522-13:16:06] [DEBUG] Skipping ENC_RAW encoding",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1343,2019-05-02T10:19:45Z,2020-06-04T14:36:01Z,2020-12-23T10:47:42Z,MERGED,True,1213,210,9,https://github.com/matt335672,Add resizeable backend VNC support,1,['vnc'],https://github.com/neutrinolabs/xrdp/pull/1343,https://github.com/matt335672,24,https://github.com/neutrinolabs/xrdp/pull/1343#issuecomment-633490257,"This has been discussed in the past - see #259 and #287.
The VNC backend still seems to be with us, and still seems to have a few useful use cases.  At our place, developers working at home are are using Citrix to connect in to a Windows farm and from there are using XRDP to connect to the Linux workstations. Some of them have reported noticeably better performance using Xvnc rather than Xorg in this configuration.
This PR supports the VNC resizing and multi-screen features used by tigervnc.  I've tested both resizing and multi-screen on CentOS 7.5 (tigervnc 1.8). and resizing on xubuntu 18.04 (tigervnc 1.7).  I can't currently test multi-monitor on xubuntu due to a lack of kit.
I've made the feature optional to avoid breaking workflows used by existing users. So by default there's no change in behaviour. Users wishing to use the new feature can set ""code=1"" in xrdp.ini. This value is used to inform sesman that the VNC session is resizeable, and also to tell the VNC backend to request the ExtendedDesktopSize pseudo-encoding from Xvnc.
The module uses resize-on-reconnect in the same way that the Xorg backend does. When a single screen is used, the use can resize sessions on-the-fly by using 'xrandr -s', or by using the appropriate desktop utility.
For review purposes, I've split the PR into three commits. One is simply running astyle on the vnc module. Another is adding the extra functionality to the backend (plus removing some magic numbers), and the last is the changes to SCP and sesman. The last of these is the bit I'm least confident about. At the moment I haven't completely separated resizable VNC sessions from non-resizeable VNC sessions in sesman itself.  Would that be a better idea?","Well this is interesting.
I agree with your reading of the spec, and I've managed to reproduce your results.
What seems to be happening is that when AcceptDesktopSize=0 is set, the tigervnc server is still responding to our initial SetEncodings message with an ExtendedDesktopSize rectangle which advertises support for SetDesktopSize.
However, when we send SetDesktopSize, the server is dropping it. The relevant code for tigervnc is here, with the message being dropped at line 624.
I think this is in violation of the spec in section 7.4.10. We should get an ExtendedDesktopSize rectangle with x set to 1 (error) and y set to 1 probably (Resize is administratively prohibited).
I'll raise an issue with tigervnc on this.
In the meantime, what do you think we should do? I can probably code around it, but it could be a bit messy.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1343,2019-05-02T10:19:45Z,2020-06-04T14:36:01Z,2020-12-23T10:47:42Z,MERGED,True,1213,210,9,https://github.com/matt335672,Add resizeable backend VNC support,1,['vnc'],https://github.com/neutrinolabs/xrdp/pull/1343,https://github.com/metalefty,25,https://github.com/neutrinolabs/xrdp/pull/1343#issuecomment-633810178,"This has been discussed in the past - see #259 and #287.
The VNC backend still seems to be with us, and still seems to have a few useful use cases.  At our place, developers working at home are are using Citrix to connect in to a Windows farm and from there are using XRDP to connect to the Linux workstations. Some of them have reported noticeably better performance using Xvnc rather than Xorg in this configuration.
This PR supports the VNC resizing and multi-screen features used by tigervnc.  I've tested both resizing and multi-screen on CentOS 7.5 (tigervnc 1.8). and resizing on xubuntu 18.04 (tigervnc 1.7).  I can't currently test multi-monitor on xubuntu due to a lack of kit.
I've made the feature optional to avoid breaking workflows used by existing users. So by default there's no change in behaviour. Users wishing to use the new feature can set ""code=1"" in xrdp.ini. This value is used to inform sesman that the VNC session is resizeable, and also to tell the VNC backend to request the ExtendedDesktopSize pseudo-encoding from Xvnc.
The module uses resize-on-reconnect in the same way that the Xorg backend does. When a single screen is used, the use can resize sessions on-the-fly by using 'xrandr -s', or by using the appropriate desktop utility.
For review purposes, I've split the PR into three commits. One is simply running astyle on the vnc module. Another is adding the extra functionality to the backend (plus removing some magic numbers), and the last is the changes to SCP and sesman. The last of these is the bit I'm least confident about. At the moment I haven't completely separated resizable VNC sessions from non-resizeable VNC sessions in sesman itself.  Would that be a better idea?","Thank you for the investigation.
I think we don't need to add a workaround if the code becomes messy.
As far as I observe, few people like the current behaviour but many people want to reconnect the existing VNC sessions. So I believe few people use AcceptDesktopSize=0. It is not worth code around than effort.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1343,2019-05-02T10:19:45Z,2020-06-04T14:36:01Z,2020-12-23T10:47:42Z,MERGED,True,1213,210,9,https://github.com/matt335672,Add resizeable backend VNC support,1,['vnc'],https://github.com/neutrinolabs/xrdp/pull/1343,https://github.com/matt335672,26,https://github.com/neutrinolabs/xrdp/pull/1343#issuecomment-633869355,"This has been discussed in the past - see #259 and #287.
The VNC backend still seems to be with us, and still seems to have a few useful use cases.  At our place, developers working at home are are using Citrix to connect in to a Windows farm and from there are using XRDP to connect to the Linux workstations. Some of them have reported noticeably better performance using Xvnc rather than Xorg in this configuration.
This PR supports the VNC resizing and multi-screen features used by tigervnc.  I've tested both resizing and multi-screen on CentOS 7.5 (tigervnc 1.8). and resizing on xubuntu 18.04 (tigervnc 1.7).  I can't currently test multi-monitor on xubuntu due to a lack of kit.
I've made the feature optional to avoid breaking workflows used by existing users. So by default there's no change in behaviour. Users wishing to use the new feature can set ""code=1"" in xrdp.ini. This value is used to inform sesman that the VNC session is resizeable, and also to tell the VNC backend to request the ExtendedDesktopSize pseudo-encoding from Xvnc.
The module uses resize-on-reconnect in the same way that the Xorg backend does. When a single screen is used, the use can resize sessions on-the-fly by using 'xrandr -s', or by using the appropriate desktop utility.
For review purposes, I've split the PR into three commits. One is simply running astyle on the vnc module. Another is adding the extra functionality to the backend (plus removing some magic numbers), and the last is the changes to SCP and sesman. The last of these is the bit I'm least confident about. At the moment I haven't completely separated resizable VNC sessions from non-resizeable VNC sessions in sesman itself.  Would that be a better idea?","Comments in xrdp.ini.in fixed.
I'll carry on looking at the tigervnc situation - I'd still like to check behaviour if a resize request is denied. I'll report back when I know more.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1343,2019-05-02T10:19:45Z,2020-06-04T14:36:01Z,2020-12-23T10:47:42Z,MERGED,True,1213,210,9,https://github.com/matt335672,Add resizeable backend VNC support,1,['vnc'],https://github.com/neutrinolabs/xrdp/pull/1343,https://github.com/matt335672,27,https://github.com/neutrinolabs/xrdp/pull/1343#issuecomment-635267528,"This has been discussed in the past - see #259 and #287.
The VNC backend still seems to be with us, and still seems to have a few useful use cases.  At our place, developers working at home are are using Citrix to connect in to a Windows farm and from there are using XRDP to connect to the Linux workstations. Some of them have reported noticeably better performance using Xvnc rather than Xorg in this configuration.
This PR supports the VNC resizing and multi-screen features used by tigervnc.  I've tested both resizing and multi-screen on CentOS 7.5 (tigervnc 1.8). and resizing on xubuntu 18.04 (tigervnc 1.7).  I can't currently test multi-monitor on xubuntu due to a lack of kit.
I've made the feature optional to avoid breaking workflows used by existing users. So by default there's no change in behaviour. Users wishing to use the new feature can set ""code=1"" in xrdp.ini. This value is used to inform sesman that the VNC session is resizeable, and also to tell the VNC backend to request the ExtendedDesktopSize pseudo-encoding from Xvnc.
The module uses resize-on-reconnect in the same way that the Xorg backend does. When a single screen is used, the use can resize sessions on-the-fly by using 'xrandr -s', or by using the appropriate desktop utility.
For review purposes, I've split the PR into three commits. One is simply running astyle on the vnc module. Another is adding the extra functionality to the backend (plus removing some magic numbers), and the last is the changes to SCP and sesman. The last of these is the bit I'm least confident about. At the moment I haven't completely separated resizable VNC sessions from non-resizeable VNC sessions in sesman itself.  Would that be a better idea?","I've built a tigervnc server here which bounces SetDesktopSize requests with a denial if AcceptSetDesktopSize=0 is set.
I've issued a PR for this, so hopefully I'll get some constructive feedback from the tigervnc project.
This has let me to make a few minor corrections which are committed above.
I've still got an unexplained problem in that the current latest remmina from the PPA (version 1.4.5+ppa202005242201.r36) on Bionic is occasionally closing on a resize with the following message:-
[ERROR][com.freerdp.core.capabilities] - unexpected MCS channel id 03ee received

It doesn't happen with any other clients. With remmina it doesn't happen all the time, so there's either uninitialised data or a race involved. In any case I think I'll need to bottom it out in case the problem is on our side.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1343,2019-05-02T10:19:45Z,2020-06-04T14:36:01Z,2020-12-23T10:47:42Z,MERGED,True,1213,210,9,https://github.com/matt335672,Add resizeable backend VNC support,1,['vnc'],https://github.com/neutrinolabs/xrdp/pull/1343,https://github.com/metalefty,28,https://github.com/neutrinolabs/xrdp/pull/1343#issuecomment-635687074,"This has been discussed in the past - see #259 and #287.
The VNC backend still seems to be with us, and still seems to have a few useful use cases.  At our place, developers working at home are are using Citrix to connect in to a Windows farm and from there are using XRDP to connect to the Linux workstations. Some of them have reported noticeably better performance using Xvnc rather than Xorg in this configuration.
This PR supports the VNC resizing and multi-screen features used by tigervnc.  I've tested both resizing and multi-screen on CentOS 7.5 (tigervnc 1.8). and resizing on xubuntu 18.04 (tigervnc 1.7).  I can't currently test multi-monitor on xubuntu due to a lack of kit.
I've made the feature optional to avoid breaking workflows used by existing users. So by default there's no change in behaviour. Users wishing to use the new feature can set ""code=1"" in xrdp.ini. This value is used to inform sesman that the VNC session is resizeable, and also to tell the VNC backend to request the ExtendedDesktopSize pseudo-encoding from Xvnc.
The module uses resize-on-reconnect in the same way that the Xorg backend does. When a single screen is used, the use can resize sessions on-the-fly by using 'xrandr -s', or by using the appropriate desktop utility.
For review purposes, I've split the PR into three commits. One is simply running astyle on the vnc module. Another is adding the extra functionality to the backend (plus removing some magic numbers), and the last is the changes to SCP and sesman. The last of these is the bit I'm least confident about. At the moment I haven't completely separated resizable VNC sessions from non-resizeable VNC sessions in sesman itself.  Would that be a better idea?","Thanks, the TigerVNC team was so constructive when I sent a PR before.
Regarding Remmina issue, is it happen with FreeRDP?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1343,2019-05-02T10:19:45Z,2020-06-04T14:36:01Z,2020-12-23T10:47:42Z,MERGED,True,1213,210,9,https://github.com/matt335672,Add resizeable backend VNC support,1,['vnc'],https://github.com/neutrinolabs/xrdp/pull/1343,https://github.com/matt335672,29,https://github.com/neutrinolabs/xrdp/pull/1343#issuecomment-635810665,"This has been discussed in the past - see #259 and #287.
The VNC backend still seems to be with us, and still seems to have a few useful use cases.  At our place, developers working at home are are using Citrix to connect in to a Windows farm and from there are using XRDP to connect to the Linux workstations. Some of them have reported noticeably better performance using Xvnc rather than Xorg in this configuration.
This PR supports the VNC resizing and multi-screen features used by tigervnc.  I've tested both resizing and multi-screen on CentOS 7.5 (tigervnc 1.8). and resizing on xubuntu 18.04 (tigervnc 1.7).  I can't currently test multi-monitor on xubuntu due to a lack of kit.
I've made the feature optional to avoid breaking workflows used by existing users. So by default there's no change in behaviour. Users wishing to use the new feature can set ""code=1"" in xrdp.ini. This value is used to inform sesman that the VNC session is resizeable, and also to tell the VNC backend to request the ExtendedDesktopSize pseudo-encoding from Xvnc.
The module uses resize-on-reconnect in the same way that the Xorg backend does. When a single screen is used, the use can resize sessions on-the-fly by using 'xrandr -s', or by using the appropriate desktop utility.
For review purposes, I've split the PR into three commits. One is simply running astyle on the vnc module. Another is adding the extra functionality to the backend (plus removing some magic numbers), and the last is the changes to SCP and sesman. The last of these is the bit I'm least confident about. At the moment I haven't completely separated resizable VNC sessions from non-resizeable VNC sessions in sesman itself.  Would that be a better idea?","Yes - I've reproduced it with FreeRDP.
That should make debugging a bit easier.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1343,2019-05-02T10:19:45Z,2020-06-04T14:36:01Z,2020-12-23T10:47:42Z,MERGED,True,1213,210,9,https://github.com/matt335672,Add resizeable backend VNC support,1,['vnc'],https://github.com/neutrinolabs/xrdp/pull/1343,https://github.com/matt335672,30,https://github.com/neutrinolabs/xrdp/pull/1343#issuecomment-635965453,"This has been discussed in the past - see #259 and #287.
The VNC backend still seems to be with us, and still seems to have a few useful use cases.  At our place, developers working at home are are using Citrix to connect in to a Windows farm and from there are using XRDP to connect to the Linux workstations. Some of them have reported noticeably better performance using Xvnc rather than Xorg in this configuration.
This PR supports the VNC resizing and multi-screen features used by tigervnc.  I've tested both resizing and multi-screen on CentOS 7.5 (tigervnc 1.8). and resizing on xubuntu 18.04 (tigervnc 1.7).  I can't currently test multi-monitor on xubuntu due to a lack of kit.
I've made the feature optional to avoid breaking workflows used by existing users. So by default there's no change in behaviour. Users wishing to use the new feature can set ""code=1"" in xrdp.ini. This value is used to inform sesman that the VNC session is resizeable, and also to tell the VNC backend to request the ExtendedDesktopSize pseudo-encoding from Xvnc.
The module uses resize-on-reconnect in the same way that the Xorg backend does. When a single screen is used, the use can resize sessions on-the-fly by using 'xrandr -s', or by using the appropriate desktop utility.
For review purposes, I've split the PR into three commits. One is simply running astyle on the vnc module. Another is adding the extra functionality to the backend (plus removing some magic numbers), and the last is the changes to SCP and sesman. The last of these is the bit I'm least confident about. At the moment I haven't completely separated resizable VNC sessions from non-resizeable VNC sessions in sesman itself.  Would that be a better idea?","FreeRDP problem has been identified.
I've raised a separate PR #1595 to discuss, as it appears to be a protocol violation on our part (if I'm reading the spec right).",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1343,2019-05-02T10:19:45Z,2020-06-04T14:36:01Z,2020-12-23T10:47:42Z,MERGED,True,1213,210,9,https://github.com/matt335672,Add resizeable backend VNC support,1,['vnc'],https://github.com/neutrinolabs/xrdp/pull/1343,https://github.com/matt335672,31,https://github.com/neutrinolabs/xrdp/pull/1343#issuecomment-636639267,"This has been discussed in the past - see #259 and #287.
The VNC backend still seems to be with us, and still seems to have a few useful use cases.  At our place, developers working at home are are using Citrix to connect in to a Windows farm and from there are using XRDP to connect to the Linux workstations. Some of them have reported noticeably better performance using Xvnc rather than Xorg in this configuration.
This PR supports the VNC resizing and multi-screen features used by tigervnc.  I've tested both resizing and multi-screen on CentOS 7.5 (tigervnc 1.8). and resizing on xubuntu 18.04 (tigervnc 1.7).  I can't currently test multi-monitor on xubuntu due to a lack of kit.
I've made the feature optional to avoid breaking workflows used by existing users. So by default there's no change in behaviour. Users wishing to use the new feature can set ""code=1"" in xrdp.ini. This value is used to inform sesman that the VNC session is resizeable, and also to tell the VNC backend to request the ExtendedDesktopSize pseudo-encoding from Xvnc.
The module uses resize-on-reconnect in the same way that the Xorg backend does. When a single screen is used, the use can resize sessions on-the-fly by using 'xrandr -s', or by using the appropriate desktop utility.
For review purposes, I've split the PR into three commits. One is simply running astyle on the vnc module. Another is adding the extra functionality to the backend (plus removing some magic numbers), and the last is the changes to SCP and sesman. The last of these is the bit I'm least confident about. At the moment I haven't completely separated resizable VNC sessions from non-resizeable VNC sessions in sesman itself.  Would that be a better idea?","For info, PR TigerVNC/tigervnc#1036 to respond to the SetDesktopSize request with a denial if -AcceptSetDesktopSize=0 has been accepted.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1343,2019-05-02T10:19:45Z,2020-06-04T14:36:01Z,2020-12-23T10:47:42Z,MERGED,True,1213,210,9,https://github.com/matt335672,Add resizeable backend VNC support,1,['vnc'],https://github.com/neutrinolabs/xrdp/pull/1343,https://github.com/metalefty,32,https://github.com/neutrinolabs/xrdp/pull/1343#issuecomment-636683133,"This has been discussed in the past - see #259 and #287.
The VNC backend still seems to be with us, and still seems to have a few useful use cases.  At our place, developers working at home are are using Citrix to connect in to a Windows farm and from there are using XRDP to connect to the Linux workstations. Some of them have reported noticeably better performance using Xvnc rather than Xorg in this configuration.
This PR supports the VNC resizing and multi-screen features used by tigervnc.  I've tested both resizing and multi-screen on CentOS 7.5 (tigervnc 1.8). and resizing on xubuntu 18.04 (tigervnc 1.7).  I can't currently test multi-monitor on xubuntu due to a lack of kit.
I've made the feature optional to avoid breaking workflows used by existing users. So by default there's no change in behaviour. Users wishing to use the new feature can set ""code=1"" in xrdp.ini. This value is used to inform sesman that the VNC session is resizeable, and also to tell the VNC backend to request the ExtendedDesktopSize pseudo-encoding from Xvnc.
The module uses resize-on-reconnect in the same way that the Xorg backend does. When a single screen is used, the use can resize sessions on-the-fly by using 'xrandr -s', or by using the appropriate desktop utility.
For review purposes, I've split the PR into three commits. One is simply running astyle on the vnc module. Another is adding the extra functionality to the backend (plus removing some magic numbers), and the last is the changes to SCP and sesman. The last of these is the bit I'm least confident about. At the moment I haven't completely separated resizable VNC sessions from non-resizeable VNC sessions in sesman itself.  Would that be a better idea?","Yup, I subscribed the PR and saw it was merged. Thank you very much for the fix.
Then, how much did you perform tests with non-resizable VNC server?
Some log messages should be promoted to INFO level.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1343,2019-05-02T10:19:45Z,2020-06-04T14:36:01Z,2020-12-23T10:47:42Z,MERGED,True,1213,210,9,https://github.com/matt335672,Add resizeable backend VNC support,1,['vnc'],https://github.com/neutrinolabs/xrdp/pull/1343,https://github.com/matt335672,33,https://github.com/neutrinolabs/xrdp/pull/1343#issuecomment-636711223,"This has been discussed in the past - see #259 and #287.
The VNC backend still seems to be with us, and still seems to have a few useful use cases.  At our place, developers working at home are are using Citrix to connect in to a Windows farm and from there are using XRDP to connect to the Linux workstations. Some of them have reported noticeably better performance using Xvnc rather than Xorg in this configuration.
This PR supports the VNC resizing and multi-screen features used by tigervnc.  I've tested both resizing and multi-screen on CentOS 7.5 (tigervnc 1.8). and resizing on xubuntu 18.04 (tigervnc 1.7).  I can't currently test multi-monitor on xubuntu due to a lack of kit.
I've made the feature optional to avoid breaking workflows used by existing users. So by default there's no change in behaviour. Users wishing to use the new feature can set ""code=1"" in xrdp.ini. This value is used to inform sesman that the VNC session is resizeable, and also to tell the VNC backend to request the ExtendedDesktopSize pseudo-encoding from Xvnc.
The module uses resize-on-reconnect in the same way that the Xorg backend does. When a single screen is used, the use can resize sessions on-the-fly by using 'xrandr -s', or by using the appropriate desktop utility.
For review purposes, I've split the PR into three commits. One is simply running astyle on the vnc module. Another is adding the extra functionality to the backend (plus removing some magic numbers), and the last is the changes to SCP and sesman. The last of these is the bit I'm least confident about. At the moment I haven't completely separated resizable VNC sessions from non-resizeable VNC sessions in sesman itself.  Would that be a better idea?","I've performed non-resizeable tests so far with:-

x11vnc on the console
A patched TigerVNC server with -AcceptSetDesktopSize=0
the new setting disabled_encodings_mask=1 in xrdp.ini

I'll try also with tight VNC and real VNC on Ubuntu 18.04. I don't know whether they support resizing or not, but I'll need to understand the behaviour before this goes live so we can support it.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1343,2019-05-02T10:19:45Z,2020-06-04T14:36:01Z,2020-12-23T10:47:42Z,MERGED,True,1213,210,9,https://github.com/matt335672,Add resizeable backend VNC support,1,['vnc'],https://github.com/neutrinolabs/xrdp/pull/1343,https://github.com/metalefty,34,https://github.com/neutrinolabs/xrdp/pull/1343#issuecomment-636750152,"This has been discussed in the past - see #259 and #287.
The VNC backend still seems to be with us, and still seems to have a few useful use cases.  At our place, developers working at home are are using Citrix to connect in to a Windows farm and from there are using XRDP to connect to the Linux workstations. Some of them have reported noticeably better performance using Xvnc rather than Xorg in this configuration.
This PR supports the VNC resizing and multi-screen features used by tigervnc.  I've tested both resizing and multi-screen on CentOS 7.5 (tigervnc 1.8). and resizing on xubuntu 18.04 (tigervnc 1.7).  I can't currently test multi-monitor on xubuntu due to a lack of kit.
I've made the feature optional to avoid breaking workflows used by existing users. So by default there's no change in behaviour. Users wishing to use the new feature can set ""code=1"" in xrdp.ini. This value is used to inform sesman that the VNC session is resizeable, and also to tell the VNC backend to request the ExtendedDesktopSize pseudo-encoding from Xvnc.
The module uses resize-on-reconnect in the same way that the Xorg backend does. When a single screen is used, the use can resize sessions on-the-fly by using 'xrandr -s', or by using the appropriate desktop utility.
For review purposes, I've split the PR into three commits. One is simply running astyle on the vnc module. Another is adding the extra functionality to the backend (plus removing some magic numbers), and the last is the changes to SCP and sesman. The last of these is the bit I'm least confident about. At the moment I haven't completely separated resizable VNC sessions from non-resizeable VNC sessions in sesman itself.  Would that be a better idea?","Thanks, that's nice. TigerVNC is the first implementation that supports resizing and AFAIK it is still the only implementation so far.
The fact the name of TigerVNC developer Pierre Ossman can be seen in RFC6143 shows that resizing is introduced to VNC by him.
https://tools.ietf.org/html/rfc6143#section-8.4.2",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1343,2019-05-02T10:19:45Z,2020-06-04T14:36:01Z,2020-12-23T10:47:42Z,MERGED,True,1213,210,9,https://github.com/matt335672,Add resizeable backend VNC support,1,['vnc'],https://github.com/neutrinolabs/xrdp/pull/1343,https://github.com/matt335672,35,https://github.com/neutrinolabs/xrdp/pull/1343#issuecomment-636820934,"This has been discussed in the past - see #259 and #287.
The VNC backend still seems to be with us, and still seems to have a few useful use cases.  At our place, developers working at home are are using Citrix to connect in to a Windows farm and from there are using XRDP to connect to the Linux workstations. Some of them have reported noticeably better performance using Xvnc rather than Xorg in this configuration.
This PR supports the VNC resizing and multi-screen features used by tigervnc.  I've tested both resizing and multi-screen on CentOS 7.5 (tigervnc 1.8). and resizing on xubuntu 18.04 (tigervnc 1.7).  I can't currently test multi-monitor on xubuntu due to a lack of kit.
I've made the feature optional to avoid breaking workflows used by existing users. So by default there's no change in behaviour. Users wishing to use the new feature can set ""code=1"" in xrdp.ini. This value is used to inform sesman that the VNC session is resizeable, and also to tell the VNC backend to request the ExtendedDesktopSize pseudo-encoding from Xvnc.
The module uses resize-on-reconnect in the same way that the Xorg backend does. When a single screen is used, the use can resize sessions on-the-fly by using 'xrandr -s', or by using the appropriate desktop utility.
For review purposes, I've split the PR into three commits. One is simply running astyle on the vnc module. Another is adding the extra functionality to the backend (plus removing some magic numbers), and the last is the changes to SCP and sesman. The last of these is the bit I'm least confident about. At the moment I haven't completely separated resizable VNC sessions from non-resizeable VNC sessions in sesman itself.  Would that be a better idea?",Happy with all those comments above.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1343,2019-05-02T10:19:45Z,2020-06-04T14:36:01Z,2020-12-23T10:47:42Z,MERGED,True,1213,210,9,https://github.com/matt335672,Add resizeable backend VNC support,1,['vnc'],https://github.com/neutrinolabs/xrdp/pull/1343,https://github.com/bolkedebruin,36,https://github.com/neutrinolabs/xrdp/pull/1343#issuecomment-636832597,"This has been discussed in the past - see #259 and #287.
The VNC backend still seems to be with us, and still seems to have a few useful use cases.  At our place, developers working at home are are using Citrix to connect in to a Windows farm and from there are using XRDP to connect to the Linux workstations. Some of them have reported noticeably better performance using Xvnc rather than Xorg in this configuration.
This PR supports the VNC resizing and multi-screen features used by tigervnc.  I've tested both resizing and multi-screen on CentOS 7.5 (tigervnc 1.8). and resizing on xubuntu 18.04 (tigervnc 1.7).  I can't currently test multi-monitor on xubuntu due to a lack of kit.
I've made the feature optional to avoid breaking workflows used by existing users. So by default there's no change in behaviour. Users wishing to use the new feature can set ""code=1"" in xrdp.ini. This value is used to inform sesman that the VNC session is resizeable, and also to tell the VNC backend to request the ExtendedDesktopSize pseudo-encoding from Xvnc.
The module uses resize-on-reconnect in the same way that the Xorg backend does. When a single screen is used, the use can resize sessions on-the-fly by using 'xrandr -s', or by using the appropriate desktop utility.
For review purposes, I've split the PR into three commits. One is simply running astyle on the vnc module. Another is adding the extra functionality to the backend (plus removing some magic numbers), and the last is the changes to SCP and sesman. The last of these is the bit I'm least confident about. At the moment I haven't completely separated resizable VNC sessions from non-resizeable VNC sessions in sesman itself.  Would that be a better idea?","@matt335672 awesome work! The code really got an upgrade. I was wondering if ""online resize"" is an option? I.e. The client resizes it's window, but without a reconnect, and the server adjusts it's viewport accordingly (xrandr).",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1343,2019-05-02T10:19:45Z,2020-06-04T14:36:01Z,2020-12-23T10:47:42Z,MERGED,True,1213,210,9,https://github.com/matt335672,Add resizeable backend VNC support,1,['vnc'],https://github.com/neutrinolabs/xrdp/pull/1343,https://github.com/metalefty,37,https://github.com/neutrinolabs/xrdp/pull/1343#issuecomment-636851419,"This has been discussed in the past - see #259 and #287.
The VNC backend still seems to be with us, and still seems to have a few useful use cases.  At our place, developers working at home are are using Citrix to connect in to a Windows farm and from there are using XRDP to connect to the Linux workstations. Some of them have reported noticeably better performance using Xvnc rather than Xorg in this configuration.
This PR supports the VNC resizing and multi-screen features used by tigervnc.  I've tested both resizing and multi-screen on CentOS 7.5 (tigervnc 1.8). and resizing on xubuntu 18.04 (tigervnc 1.7).  I can't currently test multi-monitor on xubuntu due to a lack of kit.
I've made the feature optional to avoid breaking workflows used by existing users. So by default there's no change in behaviour. Users wishing to use the new feature can set ""code=1"" in xrdp.ini. This value is used to inform sesman that the VNC session is resizeable, and also to tell the VNC backend to request the ExtendedDesktopSize pseudo-encoding from Xvnc.
The module uses resize-on-reconnect in the same way that the Xorg backend does. When a single screen is used, the use can resize sessions on-the-fly by using 'xrandr -s', or by using the appropriate desktop utility.
For review purposes, I've split the PR into three commits. One is simply running astyle on the vnc module. Another is adding the extra functionality to the backend (plus removing some magic numbers), and the last is the changes to SCP and sesman. The last of these is the bit I'm least confident about. At the moment I haven't completely separated resizable VNC sessions from non-resizeable VNC sessions in sesman itself.  Would that be a better idea?",@bolkedebruin It's out of scope of this PR. It would be done in #448 someday later. Let us focus on the VNC resizing itself.,True,{'THUMBS_UP': ['https://github.com/bolkedebruin']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1343,2019-05-02T10:19:45Z,2020-06-04T14:36:01Z,2020-12-23T10:47:42Z,MERGED,True,1213,210,9,https://github.com/matt335672,Add resizeable backend VNC support,1,['vnc'],https://github.com/neutrinolabs/xrdp/pull/1343,https://github.com/metalefty,38,https://github.com/neutrinolabs/xrdp/pull/1343#issuecomment-636876495,"This has been discussed in the past - see #259 and #287.
The VNC backend still seems to be with us, and still seems to have a few useful use cases.  At our place, developers working at home are are using Citrix to connect in to a Windows farm and from there are using XRDP to connect to the Linux workstations. Some of them have reported noticeably better performance using Xvnc rather than Xorg in this configuration.
This PR supports the VNC resizing and multi-screen features used by tigervnc.  I've tested both resizing and multi-screen on CentOS 7.5 (tigervnc 1.8). and resizing on xubuntu 18.04 (tigervnc 1.7).  I can't currently test multi-monitor on xubuntu due to a lack of kit.
I've made the feature optional to avoid breaking workflows used by existing users. So by default there's no change in behaviour. Users wishing to use the new feature can set ""code=1"" in xrdp.ini. This value is used to inform sesman that the VNC session is resizeable, and also to tell the VNC backend to request the ExtendedDesktopSize pseudo-encoding from Xvnc.
The module uses resize-on-reconnect in the same way that the Xorg backend does. When a single screen is used, the use can resize sessions on-the-fly by using 'xrandr -s', or by using the appropriate desktop utility.
For review purposes, I've split the PR into three commits. One is simply running astyle on the vnc module. Another is adding the extra functionality to the backend (plus removing some magic numbers), and the last is the changes to SCP and sesman. The last of these is the bit I'm least confident about. At the moment I haven't completely separated resizable VNC sessions from non-resizeable VNC sessions in sesman itself.  Would that be a better idea?","Wow, switching between multi screen and single screen (and plus resizing) works perfectly for me. Awesome.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1343,2019-05-02T10:19:45Z,2020-06-04T14:36:01Z,2020-12-23T10:47:42Z,MERGED,True,1213,210,9,https://github.com/matt335672,Add resizeable backend VNC support,1,['vnc'],https://github.com/neutrinolabs/xrdp/pull/1343,https://github.com/matt335672,39,https://github.com/neutrinolabs/xrdp/pull/1343#issuecomment-637671549,"This has been discussed in the past - see #259 and #287.
The VNC backend still seems to be with us, and still seems to have a few useful use cases.  At our place, developers working at home are are using Citrix to connect in to a Windows farm and from there are using XRDP to connect to the Linux workstations. Some of them have reported noticeably better performance using Xvnc rather than Xorg in this configuration.
This PR supports the VNC resizing and multi-screen features used by tigervnc.  I've tested both resizing and multi-screen on CentOS 7.5 (tigervnc 1.8). and resizing on xubuntu 18.04 (tigervnc 1.7).  I can't currently test multi-monitor on xubuntu due to a lack of kit.
I've made the feature optional to avoid breaking workflows used by existing users. So by default there's no change in behaviour. Users wishing to use the new feature can set ""code=1"" in xrdp.ini. This value is used to inform sesman that the VNC session is resizeable, and also to tell the VNC backend to request the ExtendedDesktopSize pseudo-encoding from Xvnc.
The module uses resize-on-reconnect in the same way that the Xorg backend does. When a single screen is used, the use can resize sessions on-the-fly by using 'xrandr -s', or by using the appropriate desktop utility.
For review purposes, I've split the PR into three commits. One is simply running astyle on the vnc module. Another is adding the extra functionality to the backend (plus removing some magic numbers), and the last is the changes to SCP and sesman. The last of these is the bit I'm least confident about. At the moment I haven't completely separated resizable VNC sessions from non-resizeable VNC sessions in sesman itself.  Would that be a better idea?","That's a good set of review comments - thanks very much.
I've incorporated those, and also added in the error strings for failed resizes. So now you get errors like the following:-
[20200602-16:41:00] [ERROR] VNC server resize failed - error code 1 [Resize is administratively prohibited]

As regards the Doxygen header comment, I'm thinking in the longer term Doxygen might be a good place to document some of the interfaces in the code, particularly the libraries. What do you think?
I've also done some testing with both tightvnc 1.3.10 and realVNC 4.1.1 on Ubuntu 18.04.
For both I created a single window of size 640x480, then re-connected at 800x600. With both servers I got a message like this:-
[20200602-17:27:34] [DEBUG] VNC server does not support resizing
[20200602-17:27:34] [DEBUG] Resizing client to server 640x480

which is as expected. Neither server responds to the ExtendedDesktopSize pseudo-encoding.
I had to set the Windows client to 24-bit depth rather than 32 to get tightvnc to work.
I've still got some more testing to do around colour depths - I'll get on to that tomorrow.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1343,2019-05-02T10:19:45Z,2020-06-04T14:36:01Z,2020-12-23T10:47:42Z,MERGED,True,1213,210,9,https://github.com/matt335672,Add resizeable backend VNC support,1,['vnc'],https://github.com/neutrinolabs/xrdp/pull/1343,https://github.com/metalefty,40,https://github.com/neutrinolabs/xrdp/pull/1343#issuecomment-637902260,"This has been discussed in the past - see #259 and #287.
The VNC backend still seems to be with us, and still seems to have a few useful use cases.  At our place, developers working at home are are using Citrix to connect in to a Windows farm and from there are using XRDP to connect to the Linux workstations. Some of them have reported noticeably better performance using Xvnc rather than Xorg in this configuration.
This PR supports the VNC resizing and multi-screen features used by tigervnc.  I've tested both resizing and multi-screen on CentOS 7.5 (tigervnc 1.8). and resizing on xubuntu 18.04 (tigervnc 1.7).  I can't currently test multi-monitor on xubuntu due to a lack of kit.
I've made the feature optional to avoid breaking workflows used by existing users. So by default there's no change in behaviour. Users wishing to use the new feature can set ""code=1"" in xrdp.ini. This value is used to inform sesman that the VNC session is resizeable, and also to tell the VNC backend to request the ExtendedDesktopSize pseudo-encoding from Xvnc.
The module uses resize-on-reconnect in the same way that the Xorg backend does. When a single screen is used, the use can resize sessions on-the-fly by using 'xrandr -s', or by using the appropriate desktop utility.
For review purposes, I've split the PR into three commits. One is simply running astyle on the vnc module. Another is adding the extra functionality to the backend (plus removing some magic numbers), and the last is the changes to SCP and sesman. The last of these is the bit I'm least confident about. At the moment I haven't completely separated resizable VNC sessions from non-resizeable VNC sessions in sesman itself.  Would that be a better idea?","As regards the Doxygen header comment, I'm thinking in the longer term Doxygen might be a good place to document some of the interfaces in the code, particularly the libraries. What do you think?

I totally agree. Good documentation will invite more first-time contributors.
Regarding TightVNC 32bpp issue, supporting multiple VNC implementations is definitely a good thing but I don't think we need to care about relatively tiny issues such as 32bpp if the fix is not easy. Open-source version of TightVNC has been inactive for a decade and it is the biggest reason that TigerVNC is forked from TightVNC in 2009.
Overall looks much better to me. We can make further fixes later. When you finished some more tiny fixes, let's merge.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1343,2019-05-02T10:19:45Z,2020-06-04T14:36:01Z,2020-12-23T10:47:42Z,MERGED,True,1213,210,9,https://github.com/matt335672,Add resizeable backend VNC support,1,['vnc'],https://github.com/neutrinolabs/xrdp/pull/1343,https://github.com/matt335672,41,https://github.com/neutrinolabs/xrdp/pull/1343#issuecomment-638118581,"This has been discussed in the past - see #259 and #287.
The VNC backend still seems to be with us, and still seems to have a few useful use cases.  At our place, developers working at home are are using Citrix to connect in to a Windows farm and from there are using XRDP to connect to the Linux workstations. Some of them have reported noticeably better performance using Xvnc rather than Xorg in this configuration.
This PR supports the VNC resizing and multi-screen features used by tigervnc.  I've tested both resizing and multi-screen on CentOS 7.5 (tigervnc 1.8). and resizing on xubuntu 18.04 (tigervnc 1.7).  I can't currently test multi-monitor on xubuntu due to a lack of kit.
I've made the feature optional to avoid breaking workflows used by existing users. So by default there's no change in behaviour. Users wishing to use the new feature can set ""code=1"" in xrdp.ini. This value is used to inform sesman that the VNC session is resizeable, and also to tell the VNC backend to request the ExtendedDesktopSize pseudo-encoding from Xvnc.
The module uses resize-on-reconnect in the same way that the Xorg backend does. When a single screen is used, the use can resize sessions on-the-fly by using 'xrandr -s', or by using the appropriate desktop utility.
For review purposes, I've split the PR into three commits. One is simply running astyle on the vnc module. Another is adding the extra functionality to the backend (plus removing some magic numbers), and the last is the changes to SCP and sesman. The last of these is the bit I'm least confident about. At the moment I haven't completely separated resizable VNC sessions from non-resizeable VNC sessions in sesman itself.  Would that be a better idea?","I've done some more testing this morning, and I've not hit any more issues.
@bolkedebruin - thanks for following this. Have you got anything to add before we merge, in a day or so?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1343,2019-05-02T10:19:45Z,2020-06-04T14:36:01Z,2020-12-23T10:47:42Z,MERGED,True,1213,210,9,https://github.com/matt335672,Add resizeable backend VNC support,1,['vnc'],https://github.com/neutrinolabs/xrdp/pull/1343,https://github.com/bolkedebruin,42,https://github.com/neutrinolabs/xrdp/pull/1343#issuecomment-638173709,"This has been discussed in the past - see #259 and #287.
The VNC backend still seems to be with us, and still seems to have a few useful use cases.  At our place, developers working at home are are using Citrix to connect in to a Windows farm and from there are using XRDP to connect to the Linux workstations. Some of them have reported noticeably better performance using Xvnc rather than Xorg in this configuration.
This PR supports the VNC resizing and multi-screen features used by tigervnc.  I've tested both resizing and multi-screen on CentOS 7.5 (tigervnc 1.8). and resizing on xubuntu 18.04 (tigervnc 1.7).  I can't currently test multi-monitor on xubuntu due to a lack of kit.
I've made the feature optional to avoid breaking workflows used by existing users. So by default there's no change in behaviour. Users wishing to use the new feature can set ""code=1"" in xrdp.ini. This value is used to inform sesman that the VNC session is resizeable, and also to tell the VNC backend to request the ExtendedDesktopSize pseudo-encoding from Xvnc.
The module uses resize-on-reconnect in the same way that the Xorg backend does. When a single screen is used, the use can resize sessions on-the-fly by using 'xrandr -s', or by using the appropriate desktop utility.
For review purposes, I've split the PR into three commits. One is simply running astyle on the vnc module. Another is adding the extra functionality to the backend (plus removing some magic numbers), and the last is the changes to SCP and sesman. The last of these is the bit I'm least confident about. At the moment I haven't completely separated resizable VNC sessions from non-resizeable VNC sessions in sesman itself.  Would that be a better idea?",We can test it on ca 200+ users on Monday if you are willing to wait. Can also file bugs afterwards,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1343,2019-05-02T10:19:45Z,2020-06-04T14:36:01Z,2020-12-23T10:47:42Z,MERGED,True,1213,210,9,https://github.com/matt335672,Add resizeable backend VNC support,1,['vnc'],https://github.com/neutrinolabs/xrdp/pull/1343,https://github.com/metalefty,43,https://github.com/neutrinolabs/xrdp/pull/1343#issuecomment-638600207,"This has been discussed in the past - see #259 and #287.
The VNC backend still seems to be with us, and still seems to have a few useful use cases.  At our place, developers working at home are are using Citrix to connect in to a Windows farm and from there are using XRDP to connect to the Linux workstations. Some of them have reported noticeably better performance using Xvnc rather than Xorg in this configuration.
This PR supports the VNC resizing and multi-screen features used by tigervnc.  I've tested both resizing and multi-screen on CentOS 7.5 (tigervnc 1.8). and resizing on xubuntu 18.04 (tigervnc 1.7).  I can't currently test multi-monitor on xubuntu due to a lack of kit.
I've made the feature optional to avoid breaking workflows used by existing users. So by default there's no change in behaviour. Users wishing to use the new feature can set ""code=1"" in xrdp.ini. This value is used to inform sesman that the VNC session is resizeable, and also to tell the VNC backend to request the ExtendedDesktopSize pseudo-encoding from Xvnc.
The module uses resize-on-reconnect in the same way that the Xorg backend does. When a single screen is used, the use can resize sessions on-the-fly by using 'xrandr -s', or by using the appropriate desktop utility.
For review purposes, I've split the PR into three commits. One is simply running astyle on the vnc module. Another is adding the extra functionality to the backend (plus removing some magic numbers), and the last is the changes to SCP and sesman. The last of these is the bit I'm least confident about. At the moment I haven't completely separated resizable VNC sessions from non-resizeable VNC sessions in sesman itself.  Would that be a better idea?","@bolkedebruin If you could test it, it would be nice to test devel branch after we merge this. If you find bugs, raise a new issue.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1343,2019-05-02T10:19:45Z,2020-06-04T14:36:01Z,2020-12-23T10:47:42Z,MERGED,True,1213,210,9,https://github.com/matt335672,Add resizeable backend VNC support,1,['vnc'],https://github.com/neutrinolabs/xrdp/pull/1343,https://github.com/matt335672,44,https://github.com/neutrinolabs/xrdp/pull/1343#issuecomment-638761432,"This has been discussed in the past - see #259 and #287.
The VNC backend still seems to be with us, and still seems to have a few useful use cases.  At our place, developers working at home are are using Citrix to connect in to a Windows farm and from there are using XRDP to connect to the Linux workstations. Some of them have reported noticeably better performance using Xvnc rather than Xorg in this configuration.
This PR supports the VNC resizing and multi-screen features used by tigervnc.  I've tested both resizing and multi-screen on CentOS 7.5 (tigervnc 1.8). and resizing on xubuntu 18.04 (tigervnc 1.7).  I can't currently test multi-monitor on xubuntu due to a lack of kit.
I've made the feature optional to avoid breaking workflows used by existing users. So by default there's no change in behaviour. Users wishing to use the new feature can set ""code=1"" in xrdp.ini. This value is used to inform sesman that the VNC session is resizeable, and also to tell the VNC backend to request the ExtendedDesktopSize pseudo-encoding from Xvnc.
The module uses resize-on-reconnect in the same way that the Xorg backend does. When a single screen is used, the use can resize sessions on-the-fly by using 'xrandr -s', or by using the appropriate desktop utility.
For review purposes, I've split the PR into three commits. One is simply running astyle on the vnc module. Another is adding the extra functionality to the backend (plus removing some magic numbers), and the last is the changes to SCP and sesman. The last of these is the bit I'm least confident about. At the moment I haven't completely separated resizable VNC sessions from non-resizeable VNC sessions in sesman itself.  Would that be a better idea?","This branch is currently baselined off 0.9.12.
v0.9.13 is bugfixes, and a scan of the commit log since then shows these PRs. I've checked this list once, but I wouldn't rely on it without checking yourself:-

#1529 - [bugfix] Fix Xorg path for Arch Linux
#1522 - [bugfix] workaround odd shift behaviour
#1560 - [feature] Support Slackware with pam
#1557 - [security] Check for overflow before g_malloc() calls
#1549 - [security] Address possible memory out-of-bounds accesses on connect requests
#1520 - [bugfix] Small fixes found by static analyzers
#1593 - [bugfix] Ignore TS_MULTIFRAGMENTUPDATE_CAPABILITYSET from client if fp disabled
#1595 - [bugfix] Prevent chansrv input channels being scanned during a server reset

They're all reasonably tiny. The only coupling with this PR that I'm aware of is that #1595 is required if you're using xfreerdp or Remmina clients, and you're using a non-resizing VNC server.
@bolkedebruin - we're really grateful of an offer of testing like this - thank you. Clearly we'd prefer it if you tested devel after a merge. Whether you'd be prepared to do that or not has to be your decision - you know your workflows and we don't.
I'm going to be a bit strapped for time tomorrow, so I'll do the merge into devel today. I'll leave the branch active in my repo for the time being, so you can pick whatever suits you for your testing. The branch will be squashed, but will still be based off v0.9.12.
One other minor point - if you've been using my original PR with SCP_SESSION_TYPE_RESIZEABLE_VNC, you'll need to remove the code=1 setting from xrdp.ini. I've mentioned this before, but it's worth re-iterating.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1343,2019-05-02T10:19:45Z,2020-06-04T14:36:01Z,2020-12-23T10:47:42Z,MERGED,True,1213,210,9,https://github.com/matt335672,Add resizeable backend VNC support,1,['vnc'],https://github.com/neutrinolabs/xrdp/pull/1343,https://github.com/bolkedebruin,45,https://github.com/neutrinolabs/xrdp/pull/1343#issuecomment-638783461,"This has been discussed in the past - see #259 and #287.
The VNC backend still seems to be with us, and still seems to have a few useful use cases.  At our place, developers working at home are are using Citrix to connect in to a Windows farm and from there are using XRDP to connect to the Linux workstations. Some of them have reported noticeably better performance using Xvnc rather than Xorg in this configuration.
This PR supports the VNC resizing and multi-screen features used by tigervnc.  I've tested both resizing and multi-screen on CentOS 7.5 (tigervnc 1.8). and resizing on xubuntu 18.04 (tigervnc 1.7).  I can't currently test multi-monitor on xubuntu due to a lack of kit.
I've made the feature optional to avoid breaking workflows used by existing users. So by default there's no change in behaviour. Users wishing to use the new feature can set ""code=1"" in xrdp.ini. This value is used to inform sesman that the VNC session is resizeable, and also to tell the VNC backend to request the ExtendedDesktopSize pseudo-encoding from Xvnc.
The module uses resize-on-reconnect in the same way that the Xorg backend does. When a single screen is used, the use can resize sessions on-the-fly by using 'xrandr -s', or by using the appropriate desktop utility.
For review purposes, I've split the PR into three commits. One is simply running astyle on the vnc module. Another is adding the extra functionality to the backend (plus removing some magic numbers), and the last is the changes to SCP and sesman. The last of these is the bit I'm least confident about. At the moment I haven't completely separated resizable VNC sessions from non-resizeable VNC sessions in sesman itself.  Would that be a better idea?","@matt335672 we are fine using the devel branch after merging and report bugs from there. We can revert our deployments quite easily. Note that we will just test expected behavior (happy flow) as obviously we want to keep disruption to the users low.
Our setup looks like ""browser -> guacamole -> xrdp -> tigervnc -> X -> container -> kubernetes""",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1343,2019-05-02T10:19:45Z,2020-06-04T14:36:01Z,2020-12-23T10:47:42Z,MERGED,True,1213,210,9,https://github.com/matt335672,Add resizeable backend VNC support,1,['vnc'],https://github.com/neutrinolabs/xrdp/pull/1343,https://github.com/matt335672,46,https://github.com/neutrinolabs/xrdp/pull/1343#issuecomment-638888099,"This has been discussed in the past - see #259 and #287.
The VNC backend still seems to be with us, and still seems to have a few useful use cases.  At our place, developers working at home are are using Citrix to connect in to a Windows farm and from there are using XRDP to connect to the Linux workstations. Some of them have reported noticeably better performance using Xvnc rather than Xorg in this configuration.
This PR supports the VNC resizing and multi-screen features used by tigervnc.  I've tested both resizing and multi-screen on CentOS 7.5 (tigervnc 1.8). and resizing on xubuntu 18.04 (tigervnc 1.7).  I can't currently test multi-monitor on xubuntu due to a lack of kit.
I've made the feature optional to avoid breaking workflows used by existing users. So by default there's no change in behaviour. Users wishing to use the new feature can set ""code=1"" in xrdp.ini. This value is used to inform sesman that the VNC session is resizeable, and also to tell the VNC backend to request the ExtendedDesktopSize pseudo-encoding from Xvnc.
The module uses resize-on-reconnect in the same way that the Xorg backend does. When a single screen is used, the use can resize sessions on-the-fly by using 'xrandr -s', or by using the appropriate desktop utility.
For review purposes, I've split the PR into three commits. One is simply running astyle on the vnc module. Another is adding the extra functionality to the backend (plus removing some magic numbers), and the last is the changes to SCP and sesman. The last of these is the bit I'm least confident about. At the moment I haven't completely separated resizable VNC sessions from non-resizeable VNC sessions in sesman itself.  Would that be a better idea?","Well that makes my life easier then - I've rebased the branch to devel before the merge, as this will make the history cleaner.
For the record, as well as the squash I've updated manpages:-

xrdp.ini(5) now documents the disabled_encodings_mask setting
sesman.ini(5) documents the changed behaviour to the Policy setting.

I've also added a wiki page which details the new behaviour.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1343,2019-05-02T10:19:45Z,2020-06-04T14:36:01Z,2020-12-23T10:47:42Z,MERGED,True,1213,210,9,https://github.com/matt335672,Add resizeable backend VNC support,1,['vnc'],https://github.com/neutrinolabs/xrdp/pull/1343,https://github.com/bolkedebruin,47,https://github.com/neutrinolabs/xrdp/pull/1343#issuecomment-640848117,"This has been discussed in the past - see #259 and #287.
The VNC backend still seems to be with us, and still seems to have a few useful use cases.  At our place, developers working at home are are using Citrix to connect in to a Windows farm and from there are using XRDP to connect to the Linux workstations. Some of them have reported noticeably better performance using Xvnc rather than Xorg in this configuration.
This PR supports the VNC resizing and multi-screen features used by tigervnc.  I've tested both resizing and multi-screen on CentOS 7.5 (tigervnc 1.8). and resizing on xubuntu 18.04 (tigervnc 1.7).  I can't currently test multi-monitor on xubuntu due to a lack of kit.
I've made the feature optional to avoid breaking workflows used by existing users. So by default there's no change in behaviour. Users wishing to use the new feature can set ""code=1"" in xrdp.ini. This value is used to inform sesman that the VNC session is resizeable, and also to tell the VNC backend to request the ExtendedDesktopSize pseudo-encoding from Xvnc.
The module uses resize-on-reconnect in the same way that the Xorg backend does. When a single screen is used, the use can resize sessions on-the-fly by using 'xrandr -s', or by using the appropriate desktop utility.
For review purposes, I've split the PR into three commits. One is simply running astyle on the vnc module. Another is adding the extra functionality to the backend (plus removing some magic numbers), and the last is the changes to SCP and sesman. The last of these is the bit I'm least confident about. At the moment I haven't completely separated resizable VNC sessions from non-resizeable VNC sessions in sesman itself.  Would that be a better idea?","All seems fine with testing. We had some 70 concurrent users and we didnt receive any reports that pointed to issues.
Thanks for all the work @matt335672",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1343,2019-05-02T10:19:45Z,2020-06-04T14:36:01Z,2020-12-23T10:47:42Z,MERGED,True,1213,210,9,https://github.com/matt335672,Add resizeable backend VNC support,1,['vnc'],https://github.com/neutrinolabs/xrdp/pull/1343,https://github.com/matt335672,48,https://github.com/neutrinolabs/xrdp/pull/1343#issuecomment-641186185,"This has been discussed in the past - see #259 and #287.
The VNC backend still seems to be with us, and still seems to have a few useful use cases.  At our place, developers working at home are are using Citrix to connect in to a Windows farm and from there are using XRDP to connect to the Linux workstations. Some of them have reported noticeably better performance using Xvnc rather than Xorg in this configuration.
This PR supports the VNC resizing and multi-screen features used by tigervnc.  I've tested both resizing and multi-screen on CentOS 7.5 (tigervnc 1.8). and resizing on xubuntu 18.04 (tigervnc 1.7).  I can't currently test multi-monitor on xubuntu due to a lack of kit.
I've made the feature optional to avoid breaking workflows used by existing users. So by default there's no change in behaviour. Users wishing to use the new feature can set ""code=1"" in xrdp.ini. This value is used to inform sesman that the VNC session is resizeable, and also to tell the VNC backend to request the ExtendedDesktopSize pseudo-encoding from Xvnc.
The module uses resize-on-reconnect in the same way that the Xorg backend does. When a single screen is used, the use can resize sessions on-the-fly by using 'xrandr -s', or by using the appropriate desktop utility.
For review purposes, I've split the PR into three commits. One is simply running astyle on the vnc module. Another is adding the extra functionality to the backend (plus removing some magic numbers), and the last is the changes to SCP and sesman. The last of these is the bit I'm least confident about. At the moment I haven't completely separated resizable VNC sessions from non-resizeable VNC sessions in sesman itself.  Would that be a better idea?","@bolkedebruin - thanks ever so much.
There's really no substitute for large scale testing and it was really good of you to fit us in to your schedule like this.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1363,2019-06-23T07:35:33Z,2019-06-25T05:46:35Z,2019-08-23T11:53:21Z,MERGED,True,45,55,1,https://github.com/jsorg71,chansrv: don't let audio fall behind,2,[],https://github.com/neutrinolabs/xrdp/pull/1363,https://github.com/jsorg71,1,https://github.com/neutrinolabs/xrdp/pull/1363,"When playing long audio, audio can fall behind.  This uses the acks to keep it close.","When playing long audio, audio can fall behind.  This uses the acks to keep it close.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1363,2019-06-23T07:35:33Z,2019-06-25T05:46:35Z,2019-08-23T11:53:21Z,MERGED,True,45,55,1,https://github.com/jsorg71,chansrv: don't let audio fall behind,2,[],https://github.com/neutrinolabs/xrdp/pull/1363,https://github.com/acharintsev,2,https://github.com/neutrinolabs/xrdp/pull/1363#issuecomment-524287004,"When playing long audio, audio can fall behind.  This uses the acks to keep it close.","xrdp-0.9.11.
Problem with long delay in being sent sound from server still exists. When starting audio playback on the server, a pause occurs. About 5-7 seconds. Such a feeling that for a long time the channel for redirecting sound to the RDP is established. If you start a constant sound stream (for example, a song in VLC), then system sounds and sound from YouTube begin to be transmitted from the server without pauses.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1366,2019-07-02T01:00:49Z,2019-07-03T06:58:23Z,2019-07-03T09:21:03Z,MERGED,True,893,305,9,https://github.com/jsorg71,Listen list,11,[],https://github.com/neutrinolabs/xrdp/pull/1366,https://github.com/jsorg71,1,https://github.com/neutrinolabs/xrdp/pull/1366,Allow xrdp to listen on more than one port.  Controlled by xrdp.ini.  Support old file format and -p command line option.,Allow xrdp to listen on more than one port.  Controlled by xrdp.ini.  Support old file format and -p command line option.,True,{'LAUGH': ['https://github.com/metalefty']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1366,2019-07-02T01:00:49Z,2019-07-03T06:58:23Z,2019-07-03T09:21:03Z,MERGED,True,893,305,9,https://github.com/jsorg71,Listen list,11,[],https://github.com/neutrinolabs/xrdp/pull/1366,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1366#issuecomment-508014233,Allow xrdp to listen on more than one port.  Controlled by xrdp.ini.  Support old file format and -p command line option.,Great work!,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1369,2019-07-09T01:28:47Z,2019-07-10T18:49:38Z,2019-07-10T18:50:51Z,MERGED,True,583,5,5,https://github.com/jsorg71,"implement [MS-RDPEAI], mstsc compatible audio input",8,[],https://github.com/neutrinolabs/xrdp/pull/1369,https://github.com/jsorg71,1,https://github.com/neutrinolabs/xrdp/pull/1369,,,True,{'THUMBS_UP': ['https://github.com/metalefty']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1372,2019-07-10T18:51:43Z,2019-07-12T04:04:19Z,2019-07-12T07:40:42Z,MERGED,True,5,0,1,https://github.com/jsorg71,xup: check term event for more responsive shutdown,1,[],https://github.com/neutrinolabs/xrdp/pull/1372,https://github.com/jsorg71,1,https://github.com/neutrinolabs/xrdp/pull/1372,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1386,2019-08-19T05:28:29Z,2019-08-19T06:38:59Z,2019-12-11T04:21:44Z,MERGED,True,20,11,1,https://github.com/metalefty,xrdp: reformat comments/descriptions in xrdp.ini,1,[],https://github.com/neutrinolabs/xrdp/pull/1386,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1386,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1387,2019-08-19T06:21:54Z,2019-08-19T06:33:24Z,2019-12-11T04:21:42Z,MERGED,True,1,0,1,https://github.com/metalefty,"travis: unbreak the build, libxfixed-dev is required at minimum",1,[],https://github.com/neutrinolabs/xrdp/pull/1387,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1387,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1387,2019-08-19T06:21:54Z,2019-08-19T06:33:24Z,2019-12-11T04:21:42Z,MERGED,True,1,0,1,https://github.com/metalefty,"travis: unbreak the build, libxfixed-dev is required at minimum",1,[],https://github.com/neutrinolabs/xrdp/pull/1387,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1387#issuecomment-522431482,,To fix this: https://travis-ci.org/neutrinolabs/xrdp/builds/563540580,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1387,2019-08-19T06:21:54Z,2019-08-19T06:33:24Z,2019-12-11T04:21:42Z,MERGED,True,1,0,1,https://github.com/metalefty,"travis: unbreak the build, libxfixed-dev is required at minimum",1,[],https://github.com/neutrinolabs/xrdp/pull/1387,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/1387#issuecomment-522433620,,"Oops, typo in commit message. s/libxfixed/libxfixes/",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1388,2019-08-19T07:13:57Z,2019-08-19T07:16:59Z,2019-08-19T07:17:00Z,MERGED,True,21,3,3,https://github.com/metalefty,Prepare release,2,[],https://github.com/neutrinolabs/xrdp/pull/1388,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1388,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1389,2019-08-19T15:22:53Z,2019-08-19T15:31:56Z,2019-12-11T04:21:41Z,MERGED,True,1,1,1,https://github.com/metalefty,NEWS: fix typo in version s/v1.9.11/v0.9.11/,1,[],https://github.com/neutrinolabs/xrdp/pull/1389,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1389,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1390,2019-08-19T15:26:26Z,2019-08-19T15:34:10Z,2019-08-19T15:34:16Z,MERGED,True,1,1,1,https://github.com/metalefty,update rfxcodec to the latest release,1,[],https://github.com/neutrinolabs/xrdp/pull/1390,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1390,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1393,2019-08-22T08:19:53Z,2019-11-06T06:58:38Z,2019-11-06T06:58:43Z,MERGED,True,8,0,1,https://github.com/metalefty,xrdp: skip connecting to chansrv when no channels enabled,1,[],https://github.com/neutrinolabs/xrdp/pull/1393,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1393,"For some reasons, sometimes xrdp get stuck while connecting chansrv.  Even if all channels are disabled by config (allow_channels=false), xrdp try to connect to chansrv. This doesn't fix chansrv connecting issue but at least xrdp need not to connect to chansrv at all when no channels enabled.
See also: #1288","For some reasons, sometimes xrdp get stuck while connecting chansrv.  Even if all channels are disabled by config (allow_channels=false), xrdp try to connect to chansrv. This doesn't fix chansrv connecting issue but at least xrdp need not to connect to chansrv at all when no channels enabled.
See also: #1288",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1408,2019-09-06T23:03:00Z,2021-09-22T01:46:54Z,2021-09-22T01:46:54Z,CLOSED,False,272,6,10,https://github.com/Jonesb,Merged WTMP changes back in and fixed reconnect IP logging,3,[],https://github.com/neutrinolabs/xrdp/pull/1408,https://github.com/Jonesb,1,https://github.com/neutrinolabs/xrdp/pull/1408,Merged #1077 back in to the devel and added logging on reconnection from new ipaddresses,Merged #1077 back in to the devel and added logging on reconnection from new ipaddresses,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1408,2019-09-06T23:03:00Z,2021-09-22T01:46:54Z,2021-09-22T01:46:54Z,CLOSED,False,272,6,10,https://github.com/Jonesb,Merged WTMP changes back in and fixed reconnect IP logging,3,[],https://github.com/neutrinolabs/xrdp/pull/1408,https://github.com/shaneforsythe,2,https://github.com/neutrinolabs/xrdp/pull/1408#issuecomment-548817147,Merged #1077 back in to the devel and added logging on reconnection from new ipaddresses,"All checks now show as passed, can this be merged back in?  For audit/compliance purposes this is a  greatly needed feature.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1408,2019-09-06T23:03:00Z,2021-09-22T01:46:54Z,2021-09-22T01:46:54Z,CLOSED,False,272,6,10,https://github.com/Jonesb,Merged WTMP changes back in and fixed reconnect IP logging,3,[],https://github.com/neutrinolabs/xrdp/pull/1408,https://github.com/moobyfr,3,https://github.com/neutrinolabs/xrdp/pull/1408#issuecomment-549018479,Merged #1077 back in to the devel and added logging on reconnection from new ipaddresses,"Hello,
I've tried your PR. working as excepted but I don't see ""logging on reconnection from new ipaddresses"" : Where is is logged ? in utmp/wtmp ?
(I'm unable to have xrdp-sesman running if I don't use the nodaemon switch)",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1408,2019-09-06T23:03:00Z,2021-09-22T01:46:54Z,2021-09-22T01:46:54Z,CLOSED,False,272,6,10,https://github.com/Jonesb,Merged WTMP changes back in and fixed reconnect IP logging,3,[],https://github.com/neutrinolabs/xrdp/pull/1408,https://github.com/Jonesb,4,https://github.com/neutrinolabs/xrdp/pull/1408#issuecomment-549023990,Merged #1077 back in to the devel and added logging on reconnection from new ipaddresses,"Hello, ...

@moobyfr yes you should see the new ipaddress in wtmp on reconnection.
Sent with GitHawk",True,{'THUMBS_UP': ['https://github.com/david672orford']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1408,2019-09-06T23:03:00Z,2021-09-22T01:46:54Z,2021-09-22T01:46:54Z,CLOSED,False,272,6,10,https://github.com/Jonesb,Merged WTMP changes back in and fixed reconnect IP logging,3,[],https://github.com/neutrinolabs/xrdp/pull/1408,https://github.com/kelliott55,5,https://github.com/neutrinolabs/xrdp/pull/1408#issuecomment-661774162,Merged #1077 back in to the devel and added logging on reconnection from new ipaddresses,"Hi @metalefty, can this PR be merged please?",True,"{'THUMBS_UP': ['https://github.com/david672orford', 'https://github.com/PaulJohnson', 'https://github.com/nick-george']}"
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1408,2019-09-06T23:03:00Z,2021-09-22T01:46:54Z,2021-09-22T01:46:54Z,CLOSED,False,272,6,10,https://github.com/Jonesb,Merged WTMP changes back in and fixed reconnect IP logging,3,[],https://github.com/neutrinolabs/xrdp/pull/1408,https://github.com/kickers56,6,https://github.com/neutrinolabs/xrdp/pull/1408#issuecomment-665680969,Merged #1077 back in to the devel and added logging on reconnection from new ipaddresses,"Hi all,
How exactly do I get the write to utmp to work? I am using xrdp 0.9.12 on ubuntu 20.04. Any help much appreciated as I need to get my login seen by the system so I can set a user login limit",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1408,2019-09-06T23:03:00Z,2021-09-22T01:46:54Z,2021-09-22T01:46:54Z,CLOSED,False,272,6,10,https://github.com/Jonesb,Merged WTMP changes back in and fixed reconnect IP logging,3,[],https://github.com/neutrinolabs/xrdp/pull/1408,https://github.com/maartenb,7,https://github.com/neutrinolabs/xrdp/pull/1408#issuecomment-749242896,Merged #1077 back in to the devel and added logging on reconnection from new ipaddresses,"Hi @metalefty, can this pull be merged? It's key feature for multi-user roll-out.",True,"{'HEART': ['https://github.com/jnahmias', 'https://github.com/nick-george']}"
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1408,2019-09-06T23:03:00Z,2021-09-22T01:46:54Z,2021-09-22T01:46:54Z,CLOSED,False,272,6,10,https://github.com/Jonesb,Merged WTMP changes back in and fixed reconnect IP logging,3,[],https://github.com/neutrinolabs/xrdp/pull/1408,https://github.com/metalefty,8,https://github.com/neutrinolabs/xrdp/pull/1408#issuecomment-924515027,Merged #1077 back in to the devel and added logging on reconnection from new ipaddresses,This should be redone after #1961. There's very few chance to get merged with current authentication architecture.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1425,2019-10-16T20:55:10Z,2019-10-18T03:54:22Z,2019-10-18T05:34:12Z,MERGED,True,21,30,2,https://github.com/jsorg71,sesman: fix for sesman startup without startup script,1,[],https://github.com/neutrinolabs/xrdp/pull/1425,https://github.com/jsorg71,1,https://github.com/neutrinolabs/xrdp/pull/1425,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1427,2019-10-23T05:50:00Z,2019-10-24T04:02:43Z,2019-10-24T04:07:10Z,MERGED,True,15,0,3,https://github.com/jsorg71,"default rdpsnd audin off, can enable with --enable-rdpsndaudin",1,[],https://github.com/neutrinolabs/xrdp/pull/1427,https://github.com/jsorg71,1,https://github.com/neutrinolabs/xrdp/pull/1427,Since MS-RDPEAI works disable rdpsnd audio,Since MS-RDPEAI works disable rdpsnd audio,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1427,2019-10-23T05:50:00Z,2019-10-24T04:02:43Z,2019-10-24T04:07:10Z,MERGED,True,15,0,3,https://github.com/jsorg71,"default rdpsnd audin off, can enable with --enable-rdpsndaudin",1,[],https://github.com/neutrinolabs/xrdp/pull/1427,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1427#issuecomment-545732470,Since MS-RDPEAI works disable rdpsnd audio,LGTM,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1437,2019-11-07T04:46:01Z,2019-11-08T05:47:36Z,2019-11-08T05:49:25Z,MERGED,True,31,12,2,https://github.com/jsorg71,cleanup refresh rect and check stream bounds,1,[],https://github.com/neutrinolabs/xrdp/pull/1437,https://github.com/jsorg71,1,https://github.com/neutrinolabs/xrdp/pull/1437,,,True,{'THUMBS_UP': ['https://github.com/metalefty']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1439,2019-11-08T07:32:07Z,2019-11-09T07:49:10Z,2019-11-09T07:49:10Z,MERGED,True,26,0,1,https://github.com/jsorg71,xup: fix for when shmem_id changes,1,[],https://github.com/neutrinolabs/xrdp/pull/1439,https://github.com/jsorg71,1,https://github.com/neutrinolabs/xrdp/pull/1439,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1441,2019-11-12T21:22:15Z,2019-11-14T09:20:52Z,2019-11-14T09:20:52Z,MERGED,True,49,2,1,https://github.com/Belinsky-L-V,make vsock config accept -1 for cid and port,1,[],https://github.com/neutrinolabs/xrdp/pull/1441,https://github.com/Belinsky-L-V,1,https://github.com/neutrinolabs/xrdp/pull/1441,"linux/vm_sockets.h defines VMADDR_CID_ANY and VMADDR_PORT_ANY (both
equal to -1U) for vsock cid and port respectively. This change aims to
add the capability to parse negative cid and port numbers for vsock from
the config and pass them to the kernel.
Allows for valid configurations such as port=vsock://-1:3389 to be
correctly processed, but will parse port and cid inputs like ---1 to
-, which should currently get silently turned into 0 by atoi inside
g_sck_vsock_bind_address. Inputs that do not contain - get parsed as
by xrdp_listen_parse_integer.
Addresses #1403","linux/vm_sockets.h defines VMADDR_CID_ANY and VMADDR_PORT_ANY (both
equal to -1U) for vsock cid and port respectively. This change aims to
add the capability to parse negative cid and port numbers for vsock from
the config and pass them to the kernel.
Allows for valid configurations such as port=vsock://-1:3389 to be
correctly processed, but will parse port and cid inputs like ---1 to
-, which should currently get silently turned into 0 by atoi inside
g_sck_vsock_bind_address. Inputs that do not contain - get parsed as
by xrdp_listen_parse_integer.
Addresses #1403",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1441,2019-11-12T21:22:15Z,2019-11-14T09:20:52Z,2019-11-14T09:20:52Z,MERGED,True,49,2,1,https://github.com/Belinsky-L-V,make vsock config accept -1 for cid and port,1,[],https://github.com/neutrinolabs/xrdp/pull/1441,https://github.com/Belinsky-L-V,2,https://github.com/neutrinolabs/xrdp/pull/1441#issuecomment-553126787,"linux/vm_sockets.h defines VMADDR_CID_ANY and VMADDR_PORT_ANY (both
equal to -1U) for vsock cid and port respectively. This change aims to
add the capability to parse negative cid and port numbers for vsock from
the config and pass them to the kernel.
Allows for valid configurations such as port=vsock://-1:3389 to be
correctly processed, but will parse port and cid inputs like ---1 to
-, which should currently get silently turned into 0 by atoi inside
g_sck_vsock_bind_address. Inputs that do not contain - get parsed as
by xrdp_listen_parse_integer.
Addresses #1403","May be worthwhile to add more validation to various parsers in xrdp/xrdp_listen.c (including this proposed vsock one) in a different PR. For the sake of simplicity here I just implemented the fix suggested here by @prydom and restricted it only to vsock, as opposed to port parsing in general.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1441,2019-11-12T21:22:15Z,2019-11-14T09:20:52Z,2019-11-14T09:20:52Z,MERGED,True,49,2,1,https://github.com/Belinsky-L-V,make vsock config accept -1 for cid and port,1,[],https://github.com/neutrinolabs/xrdp/pull/1441,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/1441#issuecomment-553177514,"linux/vm_sockets.h defines VMADDR_CID_ANY and VMADDR_PORT_ANY (both
equal to -1U) for vsock cid and port respectively. This change aims to
add the capability to parse negative cid and port numbers for vsock from
the config and pass them to the kernel.
Allows for valid configurations such as port=vsock://-1:3389 to be
correctly processed, but will parse port and cid inputs like ---1 to
-, which should currently get silently turned into 0 by atoi inside
g_sck_vsock_bind_address. Inputs that do not contain - get parsed as
by xrdp_listen_parse_integer.
Addresses #1403","Overall, LGTM. Nice work!",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1441,2019-11-12T21:22:15Z,2019-11-14T09:20:52Z,2019-11-14T09:20:52Z,MERGED,True,49,2,1,https://github.com/Belinsky-L-V,make vsock config accept -1 for cid and port,1,[],https://github.com/neutrinolabs/xrdp/pull/1441,https://github.com/jsorg71,4,https://github.com/neutrinolabs/xrdp/pull/1441#issuecomment-553573704,"linux/vm_sockets.h defines VMADDR_CID_ANY and VMADDR_PORT_ANY (both
equal to -1U) for vsock cid and port respectively. This change aims to
add the capability to parse negative cid and port numbers for vsock from
the config and pass them to the kernel.
Allows for valid configurations such as port=vsock://-1:3389 to be
correctly processed, but will parse port and cid inputs like ---1 to
-, which should currently get silently turned into 0 by atoi inside
g_sck_vsock_bind_address. Inputs that do not contain - get parsed as
by xrdp_listen_parse_integer.
Addresses #1403",Looks good to me.  I think it would be fine to change xrdp_listen_parse_integer too.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1441,2019-11-12T21:22:15Z,2019-11-14T09:20:52Z,2019-11-14T09:20:52Z,MERGED,True,49,2,1,https://github.com/Belinsky-L-V,make vsock config accept -1 for cid and port,1,[],https://github.com/neutrinolabs/xrdp/pull/1441,https://github.com/Belinsky-L-V,5,https://github.com/neutrinolabs/xrdp/pull/1441#issuecomment-553581905,"linux/vm_sockets.h defines VMADDR_CID_ANY and VMADDR_PORT_ANY (both
equal to -1U) for vsock cid and port respectively. This change aims to
add the capability to parse negative cid and port numbers for vsock from
the config and pass them to the kernel.
Allows for valid configurations such as port=vsock://-1:3389 to be
correctly processed, but will parse port and cid inputs like ---1 to
-, which should currently get silently turned into 0 by atoi inside
g_sck_vsock_bind_address. Inputs that do not contain - get parsed as
by xrdp_listen_parse_integer.
Addresses #1403","Looks good to me. I think it would be fine to change xrdp_listen_parse_integer too.

Not sure that'd be a good idea. xrdp_listen_parse_integer is used to parse TCP ports. Unlike vsock's unsigned int port and cids, those are supposed to be 16-bit unsigned so atoi(""-1"") inside g_tcp_bind wouldn't map to the range of valid ports and then would presumably get truncated to 65535 by the cast to short. I assume it's preferable to fail on the parsing stage, as opposed to passing that, since I don't think there are any special properties to that port.",True,{'THUMBS_UP': ['https://github.com/prydom']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1441,2019-11-12T21:22:15Z,2019-11-14T09:20:52Z,2019-11-14T09:20:52Z,MERGED,True,49,2,1,https://github.com/Belinsky-L-V,make vsock config accept -1 for cid and port,1,[],https://github.com/neutrinolabs/xrdp/pull/1441,https://github.com/prydom,6,https://github.com/neutrinolabs/xrdp/pull/1441#issuecomment-553595766,"linux/vm_sockets.h defines VMADDR_CID_ANY and VMADDR_PORT_ANY (both
equal to -1U) for vsock cid and port respectively. This change aims to
add the capability to parse negative cid and port numbers for vsock from
the config and pass them to the kernel.
Allows for valid configurations such as port=vsock://-1:3389 to be
correctly processed, but will parse port and cid inputs like ---1 to
-, which should currently get silently turned into 0 by atoi inside
g_sck_vsock_bind_address. Inputs that do not contain - get parsed as
by xrdp_listen_parse_integer.
Addresses #1403","@Belinsky-L-V, @jsorg71: I likewise agree that xrdp_listen_parse_integer should not change it's behavior and your patch LGTM. Thanks for taking the reins on this!",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1441,2019-11-12T21:22:15Z,2019-11-14T09:20:52Z,2019-11-14T09:20:52Z,MERGED,True,49,2,1,https://github.com/Belinsky-L-V,make vsock config accept -1 for cid and port,1,[],https://github.com/neutrinolabs/xrdp/pull/1441,https://github.com/jsorg71,7,https://github.com/neutrinolabs/xrdp/pull/1441#issuecomment-553603617,"linux/vm_sockets.h defines VMADDR_CID_ANY and VMADDR_PORT_ANY (both
equal to -1U) for vsock cid and port respectively. This change aims to
add the capability to parse negative cid and port numbers for vsock from
the config and pass them to the kernel.
Allows for valid configurations such as port=vsock://-1:3389 to be
correctly processed, but will parse port and cid inputs like ---1 to
-, which should currently get silently turned into 0 by atoi inside
g_sck_vsock_bind_address. Inputs that do not contain - get parsed as
by xrdp_listen_parse_integer.
Addresses #1403","@Belinsky-L-V Thanks for explaining, looks good.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1442,2019-11-13T03:18:21Z,2019-11-13T04:30:31Z,2019-11-13T04:30:32Z,MERGED,True,6,0,1,https://github.com/yifanjiang,mkpamrules: Support openSUSE's usage of /usr/etc/pam.d to contain the pam configuration files.,1,[],https://github.com/neutrinolabs/xrdp/pull/1442,https://github.com/yifanjiang,1,https://github.com/neutrinolabs/xrdp/pull/1442,Please see the details in https://lists.opensuse.org/opensuse-factory/2019-08/msg00113.html. The old directory for probing the pam configuration file is also kept for backward compatibility reason.,Please see the details in https://lists.opensuse.org/opensuse-factory/2019-08/msg00113.html. The old directory for probing the pam configuration file is also kept for backward compatibility reason.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1442,2019-11-13T03:18:21Z,2019-11-13T04:30:31Z,2019-11-13T04:30:32Z,MERGED,True,6,0,1,https://github.com/yifanjiang,mkpamrules: Support openSUSE's usage of /usr/etc/pam.d to contain the pam configuration files.,1,[],https://github.com/neutrinolabs/xrdp/pull/1442,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1442#issuecomment-553233996,Please see the details in https://lists.opensuse.org/opensuse-factory/2019-08/msg00113.html. The old directory for probing the pam configuration file is also kept for backward compatibility reason.,+1 Simple enough and no side effects with other distro.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1449,2019-12-05T12:47:39Z,2019-12-13T05:11:39Z,2019-12-30T14:52:24Z,MERGED,True,4188,3210,17,https://github.com/matt335672,Significant remote file system improvements,2,[],https://github.com/neutrinolabs/xrdp/pull/1449,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1449,"Reimplemented inode store in separate module chansrv_xfs.[hc]
Allowed atimes and mtimes to be written to Windows side
Mapped directory/file user write bit to (inverted) Windows FILE_ATTRIBUTE_READONLY bit
Mapped file user execute bit to Windows FILE_ATTRIBUTE_SYSTEM bit
Implemented improved security for remotely mounted drives (see man sesman.ini)
Implemented USB device removal, allowing hot-plug/remove of memory sticks
Fixed pagefile.sys (etc) breaking Ubuntu file browser
Fixed write offset bug
Allowed renaming of open files
Improved reported error codes
Fixed various memory leaks
Removed hardcoded buffer sizes where appropriate
Addressed valgrind/memcheck errors related to struct fuse_file_info pointers.

This improves the remote filesystem support to a point where it can even be used to support an XRDP build, although it is necessary to disable PAM support for this, as instfiles/pam.d/mkpamrules creates a soft-link which isn't supported. I used the following commands on an Ubuntu 18.04 LTS system with the XRDP 0.9.11 release tarball:-
cd ~/thinclient_drives/C\:/Users/mjb/Documents/
tar xf ~/xrdp-0.9.11.tar.gz
cd xrdp-0.9.11
./configure --enable-pixman --enable-fuse --disable-pam
make

There are a lot of code changes here. I've tried to simplify the code where possible to make it easier to follow. A lot of private stuff has been moved out of devredir.h into other places. primarily the new includes ms-erref.h, ms-fscc.h, ms-rdpefs.h and ms-smb2.h. The separate inode store in chansrv_xfs.c is significantly faster than the previous inode store, and removes a lot of complications from the code paths in chansrv_fuse.c.","Reimplemented inode store in separate module chansrv_xfs.[hc]
Allowed atimes and mtimes to be written to Windows side
Mapped directory/file user write bit to (inverted) Windows FILE_ATTRIBUTE_READONLY bit
Mapped file user execute bit to Windows FILE_ATTRIBUTE_SYSTEM bit
Implemented improved security for remotely mounted drives (see man sesman.ini)
Implemented USB device removal, allowing hot-plug/remove of memory sticks
Fixed pagefile.sys (etc) breaking Ubuntu file browser
Fixed write offset bug
Allowed renaming of open files
Improved reported error codes
Fixed various memory leaks
Removed hardcoded buffer sizes where appropriate
Addressed valgrind/memcheck errors related to struct fuse_file_info pointers.

This improves the remote filesystem support to a point where it can even be used to support an XRDP build, although it is necessary to disable PAM support for this, as instfiles/pam.d/mkpamrules creates a soft-link which isn't supported. I used the following commands on an Ubuntu 18.04 LTS system with the XRDP 0.9.11 release tarball:-
cd ~/thinclient_drives/C\:/Users/mjb/Documents/
tar xf ~/xrdp-0.9.11.tar.gz
cd xrdp-0.9.11
./configure --enable-pixman --enable-fuse --disable-pam
make

There are a lot of code changes here. I've tried to simplify the code where possible to make it easier to follow. A lot of private stuff has been moved out of devredir.h into other places. primarily the new includes ms-erref.h, ms-fscc.h, ms-rdpefs.h and ms-smb2.h. The separate inode store in chansrv_xfs.c is significantly faster than the previous inode store, and removes a lot of complications from the code paths in chansrv_fuse.c.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1449,2019-12-05T12:47:39Z,2019-12-13T05:11:39Z,2019-12-30T14:52:24Z,MERGED,True,4188,3210,17,https://github.com/matt335672,Significant remote file system improvements,2,[],https://github.com/neutrinolabs/xrdp/pull/1449,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1449#issuecomment-563016335,"Reimplemented inode store in separate module chansrv_xfs.[hc]
Allowed atimes and mtimes to be written to Windows side
Mapped directory/file user write bit to (inverted) Windows FILE_ATTRIBUTE_READONLY bit
Mapped file user execute bit to Windows FILE_ATTRIBUTE_SYSTEM bit
Implemented improved security for remotely mounted drives (see man sesman.ini)
Implemented USB device removal, allowing hot-plug/remove of memory sticks
Fixed pagefile.sys (etc) breaking Ubuntu file browser
Fixed write offset bug
Allowed renaming of open files
Improved reported error codes
Fixed various memory leaks
Removed hardcoded buffer sizes where appropriate
Addressed valgrind/memcheck errors related to struct fuse_file_info pointers.

This improves the remote filesystem support to a point where it can even be used to support an XRDP build, although it is necessary to disable PAM support for this, as instfiles/pam.d/mkpamrules creates a soft-link which isn't supported. I used the following commands on an Ubuntu 18.04 LTS system with the XRDP 0.9.11 release tarball:-
cd ~/thinclient_drives/C\:/Users/mjb/Documents/
tar xf ~/xrdp-0.9.11.tar.gz
cd xrdp-0.9.11
./configure --enable-pixman --enable-fuse --disable-pam
make

There are a lot of code changes here. I've tried to simplify the code where possible to make it easier to follow. A lot of private stuff has been moved out of devredir.h into other places. primarily the new includes ms-erref.h, ms-fscc.h, ms-rdpefs.h and ms-smb2.h. The separate inode store in chansrv_xfs.c is significantly faster than the previous inode store, and removes a lot of complications from the code paths in chansrv_fuse.c.",Brilliant!  You really make lots of contributions on drive redirection. I trust your QA. Let's ship it to the next v0.9.12 release.,True,{'CONFUSED': ['https://github.com/ChriFo']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1449,2019-12-05T12:47:39Z,2019-12-13T05:11:39Z,2019-12-30T14:52:24Z,MERGED,True,4188,3210,17,https://github.com/matt335672,Significant remote file system improvements,2,[],https://github.com/neutrinolabs/xrdp/pull/1449,https://github.com/matt335672,3,https://github.com/neutrinolabs/xrdp/pull/1449#issuecomment-563119109,"Reimplemented inode store in separate module chansrv_xfs.[hc]
Allowed atimes and mtimes to be written to Windows side
Mapped directory/file user write bit to (inverted) Windows FILE_ATTRIBUTE_READONLY bit
Mapped file user execute bit to Windows FILE_ATTRIBUTE_SYSTEM bit
Implemented improved security for remotely mounted drives (see man sesman.ini)
Implemented USB device removal, allowing hot-plug/remove of memory sticks
Fixed pagefile.sys (etc) breaking Ubuntu file browser
Fixed write offset bug
Allowed renaming of open files
Improved reported error codes
Fixed various memory leaks
Removed hardcoded buffer sizes where appropriate
Addressed valgrind/memcheck errors related to struct fuse_file_info pointers.

This improves the remote filesystem support to a point where it can even be used to support an XRDP build, although it is necessary to disable PAM support for this, as instfiles/pam.d/mkpamrules creates a soft-link which isn't supported. I used the following commands on an Ubuntu 18.04 LTS system with the XRDP 0.9.11 release tarball:-
cd ~/thinclient_drives/C\:/Users/mjb/Documents/
tar xf ~/xrdp-0.9.11.tar.gz
cd xrdp-0.9.11
./configure --enable-pixman --enable-fuse --disable-pam
make

There are a lot of code changes here. I've tried to simplify the code where possible to make it easier to follow. A lot of private stuff has been moved out of devredir.h into other places. primarily the new includes ms-erref.h, ms-fscc.h, ms-rdpefs.h and ms-smb2.h. The separate inode store in chansrv_xfs.c is significantly faster than the previous inode store, and removes a lot of complications from the code paths in chansrv_fuse.c.","Thanks for vote of confidence!
I've got a question for you. I've created four new includes ms-erref.h, ms-fscc.h, ms-rdpefs.h and ms-smb2.h in the chansrv directory containing definitions from the relevant MS docs. I did this to remove unnecessary definitions from devredir.h.
These includes could be merged with common/xrdp_constants.h, or alternatively some of the constants in common/xrdp_constants.h could be moved out to new files common/ms-rdpbcgr.h and common/ms-rdpegdi.h to slim it down a bit. It's just a bit of tidying up.
Let me know which you prefer and I'll put a separate PR together after Xmas.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1449,2019-12-05T12:47:39Z,2019-12-13T05:11:39Z,2019-12-30T14:52:24Z,MERGED,True,4188,3210,17,https://github.com/matt335672,Significant remote file system improvements,2,[],https://github.com/neutrinolabs/xrdp/pull/1449,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/1449#issuecomment-563500727,"Reimplemented inode store in separate module chansrv_xfs.[hc]
Allowed atimes and mtimes to be written to Windows side
Mapped directory/file user write bit to (inverted) Windows FILE_ATTRIBUTE_READONLY bit
Mapped file user execute bit to Windows FILE_ATTRIBUTE_SYSTEM bit
Implemented improved security for remotely mounted drives (see man sesman.ini)
Implemented USB device removal, allowing hot-plug/remove of memory sticks
Fixed pagefile.sys (etc) breaking Ubuntu file browser
Fixed write offset bug
Allowed renaming of open files
Improved reported error codes
Fixed various memory leaks
Removed hardcoded buffer sizes where appropriate
Addressed valgrind/memcheck errors related to struct fuse_file_info pointers.

This improves the remote filesystem support to a point where it can even be used to support an XRDP build, although it is necessary to disable PAM support for this, as instfiles/pam.d/mkpamrules creates a soft-link which isn't supported. I used the following commands on an Ubuntu 18.04 LTS system with the XRDP 0.9.11 release tarball:-
cd ~/thinclient_drives/C\:/Users/mjb/Documents/
tar xf ~/xrdp-0.9.11.tar.gz
cd xrdp-0.9.11
./configure --enable-pixman --enable-fuse --disable-pam
make

There are a lot of code changes here. I've tried to simplify the code where possible to make it easier to follow. A lot of private stuff has been moved out of devredir.h into other places. primarily the new includes ms-erref.h, ms-fscc.h, ms-rdpefs.h and ms-smb2.h. The separate inode store in chansrv_xfs.c is significantly faster than the previous inode store, and removes a lot of complications from the code paths in chansrv_fuse.c.","The latter plan sounds tidy and clear which constants come from which MS document for me.
+1 to the latter.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1457,2019-12-11T07:12:12Z,2019-12-12T06:04:35Z,2019-12-12T06:04:39Z,MERGED,True,0,156,3,https://github.com/metalefty,remove unmaintained xrdp.sh,2,[],https://github.com/neutrinolabs/xrdp/pull/1457,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1457,"It is not maintained since it is added and outdated now.
Closes: #1452 #1453","It is not maintained since it is added and outdated now.
Closes: #1452 #1453",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1462,2019-12-22T15:37:53Z,2019-12-23T14:00:43Z,2019-12-30T14:52:00Z,MERGED,True,3,2,2,https://github.com/matt335672,Include file tidy-up,1,[],https://github.com/neutrinolabs/xrdp/pull/1462,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1462,"Added includes for C/POSIX types referenced in chansrv_fuse.h to chansrv_fuse.h
Fixes #1461","Added includes for C/POSIX types referenced in chansrv_fuse.h to chansrv_fuse.h
Fixes #1461",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1462,2019-12-22T15:37:53Z,2019-12-23T14:00:43Z,2019-12-30T14:52:00Z,MERGED,True,3,2,2,https://github.com/matt335672,Include file tidy-up,1,[],https://github.com/neutrinolabs/xrdp/pull/1462,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1462#issuecomment-568484265,"Added includes for C/POSIX types referenced in chansrv_fuse.h to chansrv_fuse.h
Fixes #1461",You're on a roll.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1464,2019-12-27T14:03:24Z,2020-01-06T03:35:05Z,2020-01-06T03:35:05Z,MERGED,True,0,5,1,https://github.com/chipitsine,xrdpvr/xrdpvr.c: remove redundant condition,1,[],https://github.com/neutrinolabs/xrdp/pull/1464,https://github.com/chipitsine,1,https://github.com/neutrinolabs/xrdp/pull/1464,"[xrdpvr/xrdpvr.c:918] -> [xrdpvr/xrdpvr.c:926]: (warning) Identical condition 'rv==0', second condition is always false","[xrdpvr/xrdpvr.c:918] -> [xrdpvr/xrdpvr.c:926]: (warning) Identical condition 'rv==0', second condition is always false",True,"{'THUMBS_UP': ['https://github.com/metalefty'], 'EYES': ['https://github.com/chipitsine']}"
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1465,2019-12-28T12:09:44Z,2019-12-28T12:14:54Z,2019-12-28T12:14:59Z,MERGED,True,42,2,3,https://github.com/metalefty,Release v0.9.12,2,[],https://github.com/neutrinolabs/xrdp/pull/1465,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1465,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1466,2020-01-02T13:53:28Z,2020-01-04T05:39:09Z,2020-01-04T05:39:13Z,MERGED,True,23,0,1,https://github.com/metalefty,Introduce FreeBSD CI,5,[],https://github.com/neutrinolabs/xrdp/pull/1466,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1466,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1469,2020-01-06T08:39:08Z,2020-01-07T10:53:12Z,2020-01-07T10:53:12Z,MERGED,True,0,1,1,https://github.com/chipitsine,sesman/chansrv/chansrv_fuse.c: resolve double free found by cppcheck,1,[],https://github.com/neutrinolabs/xrdp/pull/1469,https://github.com/chipitsine,1,https://github.com/neutrinolabs/xrdp/pull/1469,sesman/chansrv/chansrv_fuse.c:1719:9: error: Memory pointed to by 'full_path' is freed twice. [doubleFree],sesman/chansrv/chansrv_fuse.c:1719:9: error: Memory pointed to by 'full_path' is freed twice. [doubleFree],True,{'THUMBS_UP': ['https://github.com/metalefty']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1469,2020-01-06T08:39:08Z,2020-01-07T10:53:12Z,2020-01-07T10:53:12Z,MERGED,True,0,1,1,https://github.com/chipitsine,sesman/chansrv/chansrv_fuse.c: resolve double free found by cppcheck,1,[],https://github.com/neutrinolabs/xrdp/pull/1469,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/1469#issuecomment-571107687,sesman/chansrv/chansrv_fuse.c:1719:9: error: Memory pointed to by 'full_path' is freed twice. [doubleFree],Good catch.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1469,2020-01-06T08:39:08Z,2020-01-07T10:53:12Z,2020-01-07T10:53:12Z,MERGED,True,0,1,1,https://github.com/chipitsine,sesman/chansrv/chansrv_fuse.c: resolve double free found by cppcheck,1,[],https://github.com/neutrinolabs/xrdp/pull/1469,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/1469#issuecomment-571537271,sesman/chansrv/chansrv_fuse.c:1719:9: error: Memory pointed to by 'full_path' is freed twice. [doubleFree],Oops.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1470,2020-01-06T17:16:02Z,2020-01-16T06:01:19Z,2020-03-03T08:51:07Z,MERGED,True,722,636,25,https://github.com/matt335672,Move MS-defined constants into separate includes,1,[],https://github.com/neutrinolabs/xrdp/pull/1470,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1470,"This change was discussed very briefly in PR #1449
The constants in xrdp_constants.h which can be attributed to specific MS documents have been moved out of xrdp_constants.h into include files named after the documents.  So for example, the NTSTATUS code STATUS_SUCCESS from the MS document MS-ERREF is now defined in ms-erref.h.
To avoid unnecessary coupling, I've not added nested includes for these files to xrdp_constants.h. I've simply included these file in the places where they are needed.
Some of these files were created locally to the chansrv directory for #1449 These files are now moved to the common directory.
Other notes/questions:-

The constants NT_STATUS_xxx introduced in #1449 are renamed to STATUS_xxx to correspond with the definitions in ms-erref.h
Some of the constants in xrdp_constants.h were commented TODO: to be renamed, where MS names were not actually used. I've not changed these yet, but would be happy to do so if required. Now might be a good time, straight after v0.9.12 is released.
The file X11R7.6/rdp/rdp.h in the x11rdp repository includes xrdp_constants.h, and so will not longer compile against xrdp. I'm assuming this is OK as x11rdp is now unmaintained.
The xrdp_constants.h file is part of the RHEL/CentOS xrdp-devel RPM. Presumably the new files should also be added to this RPM at some stage, although I'm not aware of anything other than x11rdp which includes this RPM.","This change was discussed very briefly in PR #1449
The constants in xrdp_constants.h which can be attributed to specific MS documents have been moved out of xrdp_constants.h into include files named after the documents.  So for example, the NTSTATUS code STATUS_SUCCESS from the MS document MS-ERREF is now defined in ms-erref.h.
To avoid unnecessary coupling, I've not added nested includes for these files to xrdp_constants.h. I've simply included these file in the places where they are needed.
Some of these files were created locally to the chansrv directory for #1449 These files are now moved to the common directory.
Other notes/questions:-

The constants NT_STATUS_xxx introduced in #1449 are renamed to STATUS_xxx to correspond with the definitions in ms-erref.h
Some of the constants in xrdp_constants.h were commented TODO: to be renamed, where MS names were not actually used. I've not changed these yet, but would be happy to do so if required. Now might be a good time, straight after v0.9.12 is released.
The file X11R7.6/rdp/rdp.h in the x11rdp repository includes xrdp_constants.h, and so will not longer compile against xrdp. I'm assuming this is OK as x11rdp is now unmaintained.
The xrdp_constants.h file is part of the RHEL/CentOS xrdp-devel RPM. Presumably the new files should also be added to this RPM at some stage, although I'm not aware of anything other than x11rdp which includes this RPM.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1470,2020-01-06T17:16:02Z,2020-01-16T06:01:19Z,2020-03-03T08:51:07Z,MERGED,True,722,636,25,https://github.com/matt335672,Move MS-defined constants into separate includes,1,[],https://github.com/neutrinolabs/xrdp/pull/1470,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1470#issuecomment-571928548,"This change was discussed very briefly in PR #1449
The constants in xrdp_constants.h which can be attributed to specific MS documents have been moved out of xrdp_constants.h into include files named after the documents.  So for example, the NTSTATUS code STATUS_SUCCESS from the MS document MS-ERREF is now defined in ms-erref.h.
To avoid unnecessary coupling, I've not added nested includes for these files to xrdp_constants.h. I've simply included these file in the places where they are needed.
Some of these files were created locally to the chansrv directory for #1449 These files are now moved to the common directory.
Other notes/questions:-

The constants NT_STATUS_xxx introduced in #1449 are renamed to STATUS_xxx to correspond with the definitions in ms-erref.h
Some of the constants in xrdp_constants.h were commented TODO: to be renamed, where MS names were not actually used. I've not changed these yet, but would be happy to do so if required. Now might be a good time, straight after v0.9.12 is released.
The file X11R7.6/rdp/rdp.h in the x11rdp repository includes xrdp_constants.h, and so will not longer compile against xrdp. I'm assuming this is OK as x11rdp is now unmaintained.
The xrdp_constants.h file is part of the RHEL/CentOS xrdp-devel RPM. Presumably the new files should also be added to this RPM at some stage, although I'm not aware of anything other than x11rdp which includes this RPM.",Looks much tidied-up. Great job.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1470,2020-01-06T17:16:02Z,2020-01-16T06:01:19Z,2020-03-03T08:51:07Z,MERGED,True,722,636,25,https://github.com/matt335672,Move MS-defined constants into separate includes,1,[],https://github.com/neutrinolabs/xrdp/pull/1470,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/1470#issuecomment-572837709,"This change was discussed very briefly in PR #1449
The constants in xrdp_constants.h which can be attributed to specific MS documents have been moved out of xrdp_constants.h into include files named after the documents.  So for example, the NTSTATUS code STATUS_SUCCESS from the MS document MS-ERREF is now defined in ms-erref.h.
To avoid unnecessary coupling, I've not added nested includes for these files to xrdp_constants.h. I've simply included these file in the places where they are needed.
Some of these files were created locally to the chansrv directory for #1449 These files are now moved to the common directory.
Other notes/questions:-

The constants NT_STATUS_xxx introduced in #1449 are renamed to STATUS_xxx to correspond with the definitions in ms-erref.h
Some of the constants in xrdp_constants.h were commented TODO: to be renamed, where MS names were not actually used. I've not changed these yet, but would be happy to do so if required. Now might be a good time, straight after v0.9.12 is released.
The file X11R7.6/rdp/rdp.h in the x11rdp repository includes xrdp_constants.h, and so will not longer compile against xrdp. I'm assuming this is OK as x11rdp is now unmaintained.
The xrdp_constants.h file is part of the RHEL/CentOS xrdp-devel RPM. Presumably the new files should also be added to this RPM at some stage, although I'm not aware of anything other than x11rdp which includes this RPM.",@jsorg71 is this fine for you?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1470,2020-01-06T17:16:02Z,2020-01-16T06:01:19Z,2020-03-03T08:51:07Z,MERGED,True,722,636,25,https://github.com/matt335672,Move MS-defined constants into separate includes,1,[],https://github.com/neutrinolabs/xrdp/pull/1470,https://github.com/jsorg71,4,https://github.com/neutrinolabs/xrdp/pull/1470#issuecomment-574912563,"This change was discussed very briefly in PR #1449
The constants in xrdp_constants.h which can be attributed to specific MS documents have been moved out of xrdp_constants.h into include files named after the documents.  So for example, the NTSTATUS code STATUS_SUCCESS from the MS document MS-ERREF is now defined in ms-erref.h.
To avoid unnecessary coupling, I've not added nested includes for these files to xrdp_constants.h. I've simply included these file in the places where they are needed.
Some of these files were created locally to the chansrv directory for #1449 These files are now moved to the common directory.
Other notes/questions:-

The constants NT_STATUS_xxx introduced in #1449 are renamed to STATUS_xxx to correspond with the definitions in ms-erref.h
Some of the constants in xrdp_constants.h were commented TODO: to be renamed, where MS names were not actually used. I've not changed these yet, but would be happy to do so if required. Now might be a good time, straight after v0.9.12 is released.
The file X11R7.6/rdp/rdp.h in the x11rdp repository includes xrdp_constants.h, and so will not longer compile against xrdp. I'm assuming this is OK as x11rdp is now unmaintained.
The xrdp_constants.h file is part of the RHEL/CentOS xrdp-devel RPM. Presumably the new files should also be added to this RPM at some stage, although I'm not aware of anything other than x11rdp which includes this RPM.","Yes, looks good.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1472,2020-01-07T10:32:27Z,2020-01-08T00:34:32Z,2020-01-08T00:34:36Z,MERGED,True,3,1,1,https://github.com/metalefty,common: flush stream in g_deinit(),2,[],https://github.com/neutrinolabs/xrdp/pull/1472,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1472,"unless flushing stream before exitting, xrdp --version | cat will
show empty output.
Fixes #1471.
Actually, I'm not sure why _exit() is called in g_exit() instead of exit().
@jsorg71 can you review if g_deinit() is a fair place to flush stream?
CC: @matt335672 I'd appreciate if you also have a look at this.","unless flushing stream before exitting, xrdp --version | cat will
show empty output.
Fixes #1471.
Actually, I'm not sure why _exit() is called in g_exit() instead of exit().
@jsorg71 can you review if g_deinit() is a fair place to flush stream?
CC: @matt335672 I'd appreciate if you also have a look at this.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1472,2020-01-07T10:32:27Z,2020-01-08T00:34:32Z,2020-01-08T00:34:36Z,MERGED,True,3,1,1,https://github.com/metalefty,common: flush stream in g_deinit(),2,[],https://github.com/neutrinolabs/xrdp/pull/1472,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1472#issuecomment-571532638,"unless flushing stream before exitting, xrdp --version | cat will
show empty output.
Fixes #1471.
Actually, I'm not sure why _exit() is called in g_exit() instead of exit().
@jsorg71 can you review if g_deinit() is a fair place to flush stream?
CC: @matt335672 I'd appreciate if you also have a look at this.","Actually, this fix is intended to show xrdp -v output in FreeBSD CI test.
Without this fix:

With this fix:",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1472,2020-01-07T10:32:27Z,2020-01-08T00:34:32Z,2020-01-08T00:34:36Z,MERGED,True,3,1,1,https://github.com/metalefty,common: flush stream in g_deinit(),2,[],https://github.com/neutrinolabs/xrdp/pull/1472,https://github.com/jsorg71,3,https://github.com/neutrinolabs/xrdp/pull/1472#issuecomment-571712855,"unless flushing stream before exitting, xrdp --version | cat will
show empty output.
Fixes #1471.
Actually, I'm not sure why _exit() is called in g_exit() instead of exit().
@jsorg71 can you review if g_deinit() is a fair place to flush stream?
CC: @matt335672 I'd appreciate if you also have a look at this.",Looks good.  It's OK to switch to exit() as well.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1474,2020-01-08T05:43:35Z,2020-01-08T07:33:42Z,2020-01-09T08:33:33Z,MERGED,True,0,4,1,https://github.com/metalefty,FreeBSD CI: simplify CI test for a while,1,[],https://github.com/neutrinolabs/xrdp/pull/1474,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1474,some tests are failing due to FreeBSD OpenSSL version change.,some tests are failing due to FreeBSD OpenSSL version change.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1474,2020-01-08T05:43:35Z,2020-01-08T07:33:42Z,2020-01-09T08:33:33Z,MERGED,True,0,4,1,https://github.com/metalefty,FreeBSD CI: simplify CI test for a while,1,[],https://github.com/neutrinolabs/xrdp/pull/1474,https://github.com/chipitsine,2,https://github.com/neutrinolabs/xrdp/pull/1474#issuecomment-571983513,some tests are failing due to FreeBSD OpenSSL version change.,"btw, I came to some (ugly) solution
https://www.mail-archive.com/haproxy@formilux.org/msg35826.html
I'd like to find something really better",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1474,2020-01-08T05:43:35Z,2020-01-08T07:33:42Z,2020-01-09T08:33:33Z,MERGED,True,0,4,1,https://github.com/metalefty,FreeBSD CI: simplify CI test for a while,1,[],https://github.com/neutrinolabs/xrdp/pull/1474,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/1474#issuecomment-572396079,some tests are failing due to FreeBSD OpenSSL version change.,"Alternatively, I believe this should also solve the package name mismatch (not tested). See /etc/pkg/FreeBSD.conf.
--- FreeBSD.conf.orig   2020-01-09 14:19:10.405306000 +0900
+++ FreeBSD.conf        2020-01-09 14:19:36.760731000 +0900
@@ -8,7 +8,7 @@
 #

 FreeBSD: {
-  url: ""pkg+http://pkg.FreeBSD.org/${ABI}/quarterly"",
+  url: ""pkg+http://pkg.FreeBSD.org/${ABI}/latest"",
   mirror_type: ""srv"",
   signature_type: ""fingerprints"",
   fingerprints: ""/usr/share/keys/pkg""
FreeBSD pkgs (binary packages) are built quarterly. There was openssl package name changes in 2019-2020 new year holidays. This changes are already applied to HEAD but not completely applied yet to quarterly (2020Q1).
OS image freebsd-12-1 refers quarterly 2020Q1 packages. OTOH, I think freebsd-11-3-snap refers HEAD (latest) because it is snapshot. This mismatch and incompleteness are causing the failure.
I believe the changes will be applied also to quarterly build shortly.  The workaround will be really short life. openssl111 will be removed from package repo shortly. So better solution I think is to use the same package repo latest or quarterly both on 12 and 11 OS image.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1474,2020-01-08T05:43:35Z,2020-01-08T07:33:42Z,2020-01-09T08:33:33Z,MERGED,True,0,4,1,https://github.com/metalefty,FreeBSD CI: simplify CI test for a while,1,[],https://github.com/neutrinolabs/xrdp/pull/1474,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/1474#issuecomment-572432163,some tests are failing due to FreeBSD OpenSSL version change.,"Performing CI test on multiple versions of the same OS will be robust but honestly I think a single version is enough. If performing CI test on multiple versions, I should have use -snap image both with 11 and 12 (and 13).
-snap works fine: https://github.com/metalefty/xrdp/runs/380799278",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1474,2020-01-08T05:43:35Z,2020-01-08T07:33:42Z,2020-01-09T08:33:33Z,MERGED,True,0,4,1,https://github.com/metalefty,FreeBSD CI: simplify CI test for a while,1,[],https://github.com/neutrinolabs/xrdp/pull/1474,https://github.com/chipitsine,5,https://github.com/neutrinolabs/xrdp/pull/1474#issuecomment-572437386,some tests are failing due to FreeBSD OpenSSL version change.,"I'm not that skilled in freebsd world. I used to run it years ago.
let me know what would be the most appropriate",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1474,2020-01-08T05:43:35Z,2020-01-08T07:33:42Z,2020-01-09T08:33:33Z,MERGED,True,0,4,1,https://github.com/metalefty,FreeBSD CI: simplify CI test for a while,1,[],https://github.com/neutrinolabs/xrdp/pull/1474,https://github.com/metalefty,6,https://github.com/neutrinolabs/xrdp/pull/1474#issuecomment-572444735,some tests are failing due to FreeBSD OpenSSL version change.,"Short answer: not to mix -snap images and other images
If we're using freebsd-11-x-snap image, FreeBSD 12 image also should be freebsd-12-x-snap. Because snapshot images are ahead of releases, there's some difference (version, name) such as openssl vs openssl111.
Of course using freebsd-11-3 and freebsd-12-1 should take the same effect. However, 11.3-RELEASE image doesn't boot properly at the moment, thus we cannot use this combination and need to use -snap image.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1478,2020-01-14T10:05:46Z,2020-01-16T00:29:11Z,2020-01-16T00:29:11Z,MERGED,True,24,4,2,https://github.com/okhowang,support mousex button 8/9,1,[],https://github.com/neutrinolabs/xrdp/pull/1478,https://github.com/okhowang,1,https://github.com/neutrinolabs/xrdp/pull/1478,"resolve #1477
do not reuse button 6/7 with button of mousex event
button 8/9 is used widely as back/forward button","resolve #1477
do not reuse button 6/7 with button of mousex event
button 8/9 is used widely as back/forward button",True,{'THUMBS_UP': ['https://github.com/paravz']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1478,2020-01-14T10:05:46Z,2020-01-16T00:29:11Z,2020-01-16T00:29:11Z,MERGED,True,24,4,2,https://github.com/okhowang,support mousex button 8/9,1,[],https://github.com/neutrinolabs/xrdp/pull/1478,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1478#issuecomment-574461088,"resolve #1477
do not reuse button 6/7 with button of mousex event
button 8/9 is used widely as back/forward button",Great. Good first-issue.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1478,2020-01-14T10:05:46Z,2020-01-16T00:29:11Z,2020-01-16T00:29:11Z,MERGED,True,24,4,2,https://github.com/okhowang,support mousex button 8/9,1,[],https://github.com/neutrinolabs/xrdp/pull/1478,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/1478#issuecomment-574462552,"resolve #1477
do not reuse button 6/7 with button of mousex event
button 8/9 is used widely as back/forward button","@okhowang BTW, what mouse do you use? I would like to buy one to test.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1478,2020-01-14T10:05:46Z,2020-01-16T00:29:11Z,2020-01-16T00:29:11Z,MERGED,True,24,4,2,https://github.com/okhowang,support mousex button 8/9,1,[],https://github.com/neutrinolabs/xrdp/pull/1478,https://github.com/okhowang,4,https://github.com/neutrinolabs/xrdp/pull/1478#issuecomment-574464551,"resolve #1477
do not reuse button 6/7 with button of mousex event
button 8/9 is used widely as back/forward button","I have test with http://www.deluxworld.com/en/product/rgzn/czsb/65.html
and apple mouse magic on windows with mstsc",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1478,2020-01-14T10:05:46Z,2020-01-16T00:29:11Z,2020-01-16T00:29:11Z,MERGED,True,24,4,2,https://github.com/okhowang,support mousex button 8/9,1,[],https://github.com/neutrinolabs/xrdp/pull/1478,https://github.com/metalefty,5,https://github.com/neutrinolabs/xrdp/pull/1478#issuecomment-574466396,"resolve #1477
do not reuse button 6/7 with button of mousex event
button 8/9 is used widely as back/forward button","Thanks, I have apple magic mouse. I would be able to test it.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1479,2020-01-15T13:24:19Z,2020-01-20T00:09:42Z,2020-01-21T10:08:40Z,MERGED,True,3,3,1,https://github.com/matt335672,xrdp_cache: Fix cppcheck 1.89+1.90 warnings,1,[],https://github.com/neutrinolabs/xrdp/pull/1479,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1479,"This PR addresses the cppcheck warning generated by cppcheck for xrdp/xrdp_cache.c mentioned in #1473
The COMPARE_WITH_CRC32() macro checks both its pointer arguments against NULL. cppcheck takes this as an indicator that either of the pointers could be NULL, and generates the warning accordingly against the 'bitmap' local variable
This variable cannot actually be NULL, and so the check performed by the macro is not needed.
In this case, the warning does not indicate an actual bug.","This PR addresses the cppcheck warning generated by cppcheck for xrdp/xrdp_cache.c mentioned in #1473
The COMPARE_WITH_CRC32() macro checks both its pointer arguments against NULL. cppcheck takes this as an indicator that either of the pointers could be NULL, and generates the warning accordingly against the 'bitmap' local variable
This variable cannot actually be NULL, and so the check performed by the macro is not needed.
In this case, the warning does not indicate an actual bug.",True,{'THUMBS_UP': ['https://github.com/metalefty']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1481,2020-01-16T12:50:09Z,2020-02-18T12:46:12Z,2020-03-03T08:51:00Z,MERGED,True,5,21,2,https://github.com/matt335672,chansrv-fuse Fix cppcheck 1.89+1.90 warnings,1,[],https://github.com/neutrinolabs/xrdp/pull/1481,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1481,"This PR addresses the cppcheck warning generated by cppcheck for xrdp/xrdp_{xfs,fuse}.c and devredir.c mentioned in #1473
The warning in chansrv_fuse.c generated by cppcheck 1.90 (but not 1.89 or 1.82) appears to be a regression in cppcheck which has already been reported - see cppcheck TRAC 9292 and 9437. Following a realloc() failure, a free() of the original region results in a false positive.
cppcheck allows for false positives to be flagged with specially formed comments. The --inline-suppr command-line flag is needed to enable these. This approach has been taken for this file.
The warning in devredir.c appears to be valid code used to generate a random number if /dev/urandom is unavailable. I've simply replaced the code with a call to g_random() in this case.
So despite the warnings, no actual bugs have been found here.
Update: After #1487 was merged, the warning which had previously been generated for chansrv_xfs.c has now gone. This file has been removed from the original PR.","This PR addresses the cppcheck warning generated by cppcheck for xrdp/xrdp_{xfs,fuse}.c and devredir.c mentioned in #1473
The warning in chansrv_fuse.c generated by cppcheck 1.90 (but not 1.89 or 1.82) appears to be a regression in cppcheck which has already been reported - see cppcheck TRAC 9292 and 9437. Following a realloc() failure, a free() of the original region results in a false positive.
cppcheck allows for false positives to be flagged with specially formed comments. The --inline-suppr command-line flag is needed to enable these. This approach has been taken for this file.
The warning in devredir.c appears to be valid code used to generate a random number if /dev/urandom is unavailable. I've simply replaced the code with a call to g_random() in this case.
So despite the warnings, no actual bugs have been found here.
Update: After #1487 was merged, the warning which had previously been generated for chansrv_xfs.c has now gone. This file has been removed from the original PR.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1481,2020-01-16T12:50:09Z,2020-02-18T12:46:12Z,2020-03-03T08:51:00Z,MERGED,True,5,21,2,https://github.com/matt335672,chansrv-fuse Fix cppcheck 1.89+1.90 warnings,1,[],https://github.com/neutrinolabs/xrdp/pull/1481,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/1481#issuecomment-580335883,"This PR addresses the cppcheck warning generated by cppcheck for xrdp/xrdp_{xfs,fuse}.c and devredir.c mentioned in #1473
The warning in chansrv_fuse.c generated by cppcheck 1.90 (but not 1.89 or 1.82) appears to be a regression in cppcheck which has already been reported - see cppcheck TRAC 9292 and 9437. Following a realloc() failure, a free() of the original region results in a false positive.
cppcheck allows for false positives to be flagged with specially formed comments. The --inline-suppr command-line flag is needed to enable these. This approach has been taken for this file.
The warning in devredir.c appears to be valid code used to generate a random number if /dev/urandom is unavailable. I've simply replaced the code with a call to g_random() in this case.
So despite the warnings, no actual bugs have been found here.
Update: After #1487 was merged, the warning which had previously been generated for chansrv_xfs.c has now gone. This file has been removed from the original PR.",Updated following commit of #1487 to devel branch. Header comment also updated.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1484,2020-01-17T11:58:39Z,2020-01-30T01:28:36Z,2020-01-30T10:21:41Z,MERGED,True,13,10,1,https://github.com/matt335672,xrdp_pcsc: Fix cppcheck 1.82 + 1.90 warnings,1,[],https://github.com/neutrinolabs/xrdp/pull/1484,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1484,"This PR addresses the warnings generated by cppcheck for xrdp_pcsc.c mentioned in #1473
The first of these relates to this code following line 1067:-
    // TODO figure out why recv pci does not work
    if (1 || (pioRecvPci == 0) || (pioRecvPci->cbPciLength < 8))
    {
        got_recv_pci = 0;
        .  . .
    }
    else
    {
        got_recv_pci = 1;
        .  .  .
        /* pioRecvPci dereferenced */
    }
    . . .
    if (got_recv_pci == 0)
    {
        . . .
    }
    else
    {
        /* pioRecvPci dereferenced again */
    }

The 1 || in the if statement was added in commit 9f8d369 for XRDP 0.8.0 and has the effect of disabling the recv pci functionality. As a result, pioRecvPci is never dereferenced. However cppcheck is not clever enough to pick up that got_recv_pci is being used as a discriminant for the second block, and so generates the warning.
I've restructured the code so that got_recv_pci is used as a discriminant for both blocks:-
    got_recv_pci = (pioRecvPci != NULL) && (pioRecvPci->cbPciLength >= 8);
    // TODO figure out why recv pci does not work
    got_recv_pci = 0;
    if (got_recv_pci == 0)
    {
        .  . .
    }
    else
    {
        .  .  .
        /* pioRecvPci dereferenced */
    }
    . . .
    if (got_recv_pci == 0)
    {
        . . .
    }
    else
    {
        /* pioRecvPci dereferenced again */
    }

And this time cppcheck can figure out the traceability. The TODO still applies, but can be removed when addressed by removing the TODO command and following line.
The second seems more straightforward. memcpy can be invoked with a NULL source pointer, but in this case the copy length is zero. This is fine, but cppcheck can't see it. The code change has an explicit codepath for a NULL source pointer which doesn't invoke memcpy.
So despite the cppcheck warnings, no actual bugs have been found here.","This PR addresses the warnings generated by cppcheck for xrdp_pcsc.c mentioned in #1473
The first of these relates to this code following line 1067:-
    // TODO figure out why recv pci does not work
    if (1 || (pioRecvPci == 0) || (pioRecvPci->cbPciLength < 8))
    {
        got_recv_pci = 0;
        .  . .
    }
    else
    {
        got_recv_pci = 1;
        .  .  .
        /* pioRecvPci dereferenced */
    }
    . . .
    if (got_recv_pci == 0)
    {
        . . .
    }
    else
    {
        /* pioRecvPci dereferenced again */
    }

The 1 || in the if statement was added in commit 9f8d369 for XRDP 0.8.0 and has the effect of disabling the recv pci functionality. As a result, pioRecvPci is never dereferenced. However cppcheck is not clever enough to pick up that got_recv_pci is being used as a discriminant for the second block, and so generates the warning.
I've restructured the code so that got_recv_pci is used as a discriminant for both blocks:-
    got_recv_pci = (pioRecvPci != NULL) && (pioRecvPci->cbPciLength >= 8);
    // TODO figure out why recv pci does not work
    got_recv_pci = 0;
    if (got_recv_pci == 0)
    {
        .  . .
    }
    else
    {
        .  .  .
        /* pioRecvPci dereferenced */
    }
    . . .
    if (got_recv_pci == 0)
    {
        . . .
    }
    else
    {
        /* pioRecvPci dereferenced again */
    }

And this time cppcheck can figure out the traceability. The TODO still applies, but can be removed when addressed by removing the TODO command and following line.
The second seems more straightforward. memcpy can be invoked with a NULL source pointer, but in this case the copy length is zero. This is fine, but cppcheck can't see it. The code change has an explicit codepath for a NULL source pointer which doesn't invoke memcpy.
So despite the cppcheck warnings, no actual bugs have been found here.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1485,2020-01-19T14:48:24Z,2020-02-18T12:46:27Z,2020-03-03T08:51:02Z,MERGED,True,2,364,5,https://github.com/matt335672,misc: Fix cppcheck 1.82 + 1.90 warnings,2,[],https://github.com/neutrinolabs/xrdp/pull/1485,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1485,"This PR addresses the warnings generated by cppcheck 1.82 and 1.90 for tests/tcp_proxy/main.c, xrdpapi/xrdp-ssh-agent.c and vrplayer/decoderthread.cpp mentioned in #1473.
The first two are trivial and are not described further.
As far as vrplayer/decoderthread.cpp goes, this file is not longer used.  It was removed from the QT project file  vrplayer/vrplayer.pro by cae2adb in December 2012 and is not referenced anywhere else.
So despite the cppcheck warnings, no actual bugs have been found here.","This PR addresses the warnings generated by cppcheck 1.82 and 1.90 for tests/tcp_proxy/main.c, xrdpapi/xrdp-ssh-agent.c and vrplayer/decoderthread.cpp mentioned in #1473.
The first two are trivial and are not described further.
As far as vrplayer/decoderthread.cpp goes, this file is not longer used.  It was removed from the QT project file  vrplayer/vrplayer.pro by cae2adb in December 2012 and is not referenced anywhere else.
So despite the cppcheck warnings, no actual bugs have been found here.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1485,2020-01-19T14:48:24Z,2020-02-18T12:46:27Z,2020-03-03T08:51:02Z,MERGED,True,2,364,5,https://github.com/matt335672,misc: Fix cppcheck 1.82 + 1.90 warnings,2,[],https://github.com/neutrinolabs/xrdp/pull/1485,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/1485#issuecomment-576618995,"This PR addresses the warnings generated by cppcheck 1.82 and 1.90 for tests/tcp_proxy/main.c, xrdpapi/xrdp-ssh-agent.c and vrplayer/decoderthread.cpp mentioned in #1473.
The first two are trivial and are not described further.
As far as vrplayer/decoderthread.cpp goes, this file is not longer used.  It was removed from the QT project file  vrplayer/vrplayer.pro by cae2adb in December 2012 and is not referenced anywhere else.
So despite the cppcheck warnings, no actual bugs have been found here.",Second commit added for vrplayer/ourinterface.cpp which I missed first time round.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1487,2020-01-25T19:13:24Z,2020-01-30T01:11:51Z,2020-03-11T02:10:23Z,MERGED,True,6,1,1,https://github.com/derekschrock,Use g_free for xfs/g_xfs in xfs_delete_xfs_fs,1,[],https://github.com/neutrinolabs/xrdp/pull/1487,https://github.com/derekschrock,1,https://github.com/neutrinolabs/xrdp/pull/1487,"It's possible for xfs (g_xfs) to be null due to fuse mounts failing.
If g_xfs is null chansrv will crash with sig. fault.","It's possible for xfs (g_xfs) to be null due to fuse mounts failing.
If g_xfs is null chansrv will crash with sig. fault.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1487,2020-01-25T19:13:24Z,2020-01-30T01:11:51Z,2020-03-11T02:10:23Z,MERGED,True,6,1,1,https://github.com/derekschrock,Use g_free for xfs/g_xfs in xfs_delete_xfs_fs,1,[],https://github.com/neutrinolabs/xrdp/pull/1487,https://github.com/derekschrock,2,https://github.com/neutrinolabs/xrdp/pull/1487#issuecomment-578514440,"It's possible for xfs (g_xfs) to be null due to fuse mounts failing.
If g_xfs is null chansrv will crash with sig. fault.",By @metalefty request @matt335672 for review.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1487,2020-01-25T19:13:24Z,2020-01-30T01:11:51Z,2020-03-11T02:10:23Z,MERGED,True,6,1,1,https://github.com/derekschrock,Use g_free for xfs/g_xfs in xfs_delete_xfs_fs,1,[],https://github.com/neutrinolabs/xrdp/pull/1487,https://github.com/matt335672,3,https://github.com/neutrinolabs/xrdp/pull/1487#issuecomment-578718027,"It's possible for xfs (g_xfs) to be null due to fuse mounts failing.
If g_xfs is null chansrv will crash with sig. fault.","Hi @derekschrock
Thanks for the PR. I've had a look at the code, and you're quite right that entering xfs_delete_xfs_fs() will cause a segfault if called with a NULL parameter. It's down to bad coding on my part which I didn't catch in my unit testing.
That said, I think your PR needs a bit of work for two reasons:-

It's valid to call free(p) with p being NULL. This has been the case for a very long time. It's even in the rather dog-eared copy of the 2nd edition K&R I have at home on page 252 (printed 1988) that [free] does nothing if P is NULL. So for XRDP, free(p) behaves identically to g_free(p), and whether to use one or the other is a question of style rather than behaviour.
To get to your patched line 400, the path of execution has to pass through the two preceding lines. These both de-reference the NULL pointer before calling free(), and so either would cause a segfault.

Assuming the above make sense, and I'm not missing something obvious could you update and re-submit the PR?
@metalefty - this code is referenced in my cppcheck PR #1481 (which co-incidentally also addresses this). Since Derek's putting some work in now, I'll happily rework that PR when we're done with this one. The other cppcheck PRs are not affected.
Thanks both",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1487,2020-01-25T19:13:24Z,2020-01-30T01:11:51Z,2020-03-11T02:10:23Z,MERGED,True,6,1,1,https://github.com/derekschrock,Use g_free for xfs/g_xfs in xfs_delete_xfs_fs,1,[],https://github.com/neutrinolabs/xrdp/pull/1487,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/1487#issuecomment-579565707,"It's possible for xfs (g_xfs) to be null due to fuse mounts failing.
If g_xfs is null chansrv will crash with sig. fault.","Thank you both.
@matt335672 can you review @derekschrock 's new patch?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1487,2020-01-25T19:13:24Z,2020-01-30T01:11:51Z,2020-03-11T02:10:23Z,MERGED,True,6,1,1,https://github.com/derekschrock,Use g_free for xfs/g_xfs in xfs_delete_xfs_fs,1,[],https://github.com/neutrinolabs/xrdp/pull/1487,https://github.com/matt335672,5,https://github.com/neutrinolabs/xrdp/pull/1487#issuecomment-579834156,"It's possible for xfs (g_xfs) to be null due to fuse mounts failing.
If g_xfs is null chansrv will crash with sig. fault.",LGTM - simplest solution to known problem. Thanks @derekschrock.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1487,2020-01-25T19:13:24Z,2020-01-30T01:11:51Z,2020-03-11T02:10:23Z,MERGED,True,6,1,1,https://github.com/derekschrock,Use g_free for xfs/g_xfs in xfs_delete_xfs_fs,1,[],https://github.com/neutrinolabs/xrdp/pull/1487,https://github.com/metalefty,6,https://github.com/neutrinolabs/xrdp/pull/1487#issuecomment-581758023,"It's possible for xfs (g_xfs) to be null due to fuse mounts failing.
If g_xfs is null chansrv will crash with sig. fault.",We need to make a release  for this fix.,True,{'THUMBS_UP': ['https://github.com/derekschrock']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1487,2020-01-25T19:13:24Z,2020-01-30T01:11:51Z,2020-03-11T02:10:23Z,MERGED,True,6,1,1,https://github.com/derekschrock,Use g_free for xfs/g_xfs in xfs_delete_xfs_fs,1,[],https://github.com/neutrinolabs/xrdp/pull/1487,https://github.com/matt335672,7,https://github.com/neutrinolabs/xrdp/pull/1487#issuecomment-582444953,"It's possible for xfs (g_xfs) to be null due to fuse mounts failing.
If g_xfs is null chansrv will crash with sig. fault.","Agreed, as it seems to be affecting other users. I can only apologise for not picking it up in my unit testing.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1487,2020-01-25T19:13:24Z,2020-01-30T01:11:51Z,2020-03-11T02:10:23Z,MERGED,True,6,1,1,https://github.com/derekschrock,Use g_free for xfs/g_xfs in xfs_delete_xfs_fs,1,[],https://github.com/neutrinolabs/xrdp/pull/1487,https://github.com/metalefty,8,https://github.com/neutrinolabs/xrdp/pull/1487#issuecomment-597407429,"It's possible for xfs (g_xfs) to be null due to fuse mounts failing.
If g_xfs is null chansrv will crash with sig. fault.",ref. #1449,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1493,2020-02-05T15:08:03Z,2020-03-09T04:27:17Z,2020-03-09T14:10:21Z,MERGED,True,190,0,3,https://github.com/matt335672,Add cppcheck to travis-ci,1,[],https://github.com/neutrinolabs/xrdp/pull/1493,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1493,"Adds a Travis CI job to run cppcheck automatically.
Since the default version of cppcheck used by the xenial image on Travis is fairly old (1.72), this PR downloads a later version of cppcheck and builds it before running it on XRDP. AFAICT travis-ci does not support a better way to do this currently - see travis-ci/travis-ci#1734. This obviously adds time to the check, but it's not enormous. My last run of this job on Travis took 3-and-a-half minutes.
The scripts used to download and run cppcheck are designed to be used by developers without needing to invoke travis-ci. TI can document this in the Wiki.
The version of cppcheck used is parameterized in .travis.yml so it can be easily updated.
Edit 4/3/20: Following the merge of #1481 and #1485, the CI job for this PR succeeds.","Adds a Travis CI job to run cppcheck automatically.
Since the default version of cppcheck used by the xenial image on Travis is fairly old (1.72), this PR downloads a later version of cppcheck and builds it before running it on XRDP. AFAICT travis-ci does not support a better way to do this currently - see travis-ci/travis-ci#1734. This obviously adds time to the check, but it's not enormous. My last run of this job on Travis took 3-and-a-half minutes.
The scripts used to download and run cppcheck are designed to be used by developers without needing to invoke travis-ci. TI can document this in the Wiki.
The version of cppcheck used is parameterized in .travis.yml so it can be easily updated.
Edit 4/3/20: Following the merge of #1481 and #1485, the CI job for this PR succeeds.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1494,2020-02-06T14:04:39Z,,2020-02-10T14:43:06Z,OPEN,False,38,11,11,https://github.com/dimapnz,Fix empty rhost in /var/log/auth.log,1,[],https://github.com/neutrinolabs/xrdp/pull/1494,https://github.com/dimapnz,1,https://github.com/neutrinolabs/xrdp/pull/1494,"I found that the service xrdp-sesman writes an empty rhost into log file /var/log/auth.log. Because of this, the rule ""pam-generic"" (/etc/fail2ban/filter.d/pam-generic.conf) in the package ""fail2ban"" does not work. This PR fixing this issue.","I found that the service xrdp-sesman writes an empty rhost into log file /var/log/auth.log. Because of this, the rule ""pam-generic"" (/etc/fail2ban/filter.d/pam-generic.conf) in the package ""fail2ban"" does not work. This PR fixing this issue.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1494,2020-02-06T14:04:39Z,,2020-02-10T14:43:06Z,OPEN,False,38,11,11,https://github.com/dimapnz,Fix empty rhost in /var/log/auth.log,1,[],https://github.com/neutrinolabs/xrdp/pull/1494,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1494#issuecomment-583230788,"I found that the service xrdp-sesman writes an empty rhost into log file /var/log/auth.log. Because of this, the rule ""pam-generic"" (/etc/fail2ban/filter.d/pam-generic.conf) in the package ""fail2ban"" does not work. This PR fixing this issue.","Thanks, I will test it.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1494,2020-02-06T14:04:39Z,,2020-02-10T14:43:06Z,OPEN,False,38,11,11,https://github.com/dimapnz,Fix empty rhost in /var/log/auth.log,1,[],https://github.com/neutrinolabs/xrdp/pull/1494,https://github.com/dimapnz,3,https://github.com/neutrinolabs/xrdp/pull/1494#issuecomment-583411607,"I found that the service xrdp-sesman writes an empty rhost into log file /var/log/auth.log. Because of this, the rule ""pam-generic"" (/etc/fail2ban/filter.d/pam-generic.conf) in the package ""fail2ban"" does not work. This PR fixing this issue.",With option --enable-ipv6 also works properly,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1504,2020-02-23T10:33:34Z,2020-02-26T16:44:48Z,2020-02-26T16:44:48Z,CLOSED,False,2,1,1,https://github.com/Smit-tay,Check before free,1,[],https://github.com/neutrinolabs/xrdp/pull/1504,https://github.com/Smit-tay,1,https://github.com/neutrinolabs/xrdp/pull/1504,-- inode table array element can be null (ex: element zero intentionally null),-- inode table array element can be null (ex: element zero intentionally null),True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1504,2020-02-23T10:33:34Z,2020-02-26T16:44:48Z,2020-02-26T16:44:48Z,CLOSED,False,2,1,1,https://github.com/Smit-tay,Check before free,1,[],https://github.com/neutrinolabs/xrdp/pull/1504,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/1504#issuecomment-590838561,-- inode table array element can be null (ex: element zero intentionally null),"I can't see the point of this check.
free(NULL) is perfectly valid C, and has been since at least K&R days. The reference from ISO/IEC 9899:1999 (which is the only one I have by my desk) is 7.20.3.2 which quotes for free(ptr):-
If ptr is a null pointer, no action occurs.
See also my comment in #1487
What am I missing? Are you getting a coredump which is pointing you in this area? Are you hitting the issue with 0.9.12 which is addressed by #1487?
Edit : Just read #1502. I think you'll find this is already addressed by #1487.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1504,2020-02-23T10:33:34Z,2020-02-26T16:44:48Z,2020-02-26T16:44:48Z,CLOSED,False,2,1,1,https://github.com/Smit-tay,Check before free,1,[],https://github.com/neutrinolabs/xrdp/pull/1504,https://github.com/Smit-tay,3,https://github.com/neutrinolabs/xrdp/pull/1504#issuecomment-591047518,-- inode table array element can be null (ex: element zero intentionally null),"Indeed.
Although because I am looking at a production server it's not so easy to debug.
The call stack led me to this quite simple function and my (naive) review caught what look(s/ed) like a potential problem.
I was unaware that free(0) is safe.
So, that implies that something that the array holds is no longer available.
For me debugging beyond this level isn't an option, not due to personal ability, but due to environmental problems.  I really don't have the resources to investige in a meaningful way",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1504,2020-02-23T10:33:34Z,2020-02-26T16:44:48Z,2020-02-26T16:44:48Z,CLOSED,False,2,1,1,https://github.com/Smit-tay,Check before free,1,[],https://github.com/neutrinolabs/xrdp/pull/1504,https://github.com/matt335672,4,https://github.com/neutrinolabs/xrdp/pull/1504#issuecomment-591322096,-- inode table array element can be null (ex: element zero intentionally null),"I might be able to do something with the stack trace you've provided in #1502 to work out whether this is indeed #1487 or something else.
Could you maybe close this PR, re-open #1502, and add some information about the server operating system and version of the XRDP package you've installed? I couldn't see that information.
Is falling back to v0.9.11 something you could do quite easily? I'm not familiar with the remmina client, but if it allows you to map a network drive, this might be a workaround you could use.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1507,2020-03-03T16:51:15Z,2020-03-11T00:33:25Z,2020-03-15T17:04:44Z,MERGED,True,141,99,7,https://github.com/matt335672,"Drive redirect fixes, including Guacamole",2,[],https://github.com/neutrinolabs/xrdp/pull/1507,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1507,"Minor bug fixes to drive redirection

Support a DeviceId of 0 in a DEVICE_ANNOUNCE header. This is required by the Guacamole client and fixes #1505
DR_CORE_DEVICE_ANNOUNCE_RSP messages are now sent to the server for unsupported devices - these were previously ignored
Read errors on remote files are now returned to the reader, rather than just a read with a length of zero.
Improved a number of returned error codes to be more standards compliant. In particular, the Linux mv command is now able to make use of EXDEV to provide move between devices. Also, the .clipboard directory cannot be modified intentionally or unintentionally by the user as it appears to be read-only.
Added additional pointer checks to xfs_get_full_path() to prevent a coredump in the event of a corrupted filesystem.

This PR contains two commits;  the #1505 fixes are in one, and the other fixes are in the other. The #1505 fix has been verified as part of that issue report.","Minor bug fixes to drive redirection

Support a DeviceId of 0 in a DEVICE_ANNOUNCE header. This is required by the Guacamole client and fixes #1505
DR_CORE_DEVICE_ANNOUNCE_RSP messages are now sent to the server for unsupported devices - these were previously ignored
Read errors on remote files are now returned to the reader, rather than just a read with a length of zero.
Improved a number of returned error codes to be more standards compliant. In particular, the Linux mv command is now able to make use of EXDEV to provide move between devices. Also, the .clipboard directory cannot be modified intentionally or unintentionally by the user as it appears to be read-only.
Added additional pointer checks to xfs_get_full_path() to prevent a coredump in the event of a corrupted filesystem.

This PR contains two commits;  the #1505 fixes are in one, and the other fixes are in the other. The #1505 fix has been verified as part of that issue report.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1509,2020-03-11T04:12:42Z,2020-03-11T04:28:54Z,2020-03-11T05:24:07Z,MERGED,True,30,3,3,https://github.com/metalefty,Prepare release,3,[],https://github.com/neutrinolabs/xrdp/pull/1509,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1509,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1520,2020-03-20T10:23:29Z,2020-05-08T06:27:18Z,2020-05-08T06:27:18Z,MERGED,True,3,3,3,https://github.com/qarmin,Small fixes found by static analyzers.,1,[],https://github.com/neutrinolabs/xrdp/pull/1520,https://github.com/qarmin,1,https://github.com/neutrinolabs/xrdp/pull/1520,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1520,2020-03-20T10:23:29Z,2020-05-08T06:27:18Z,2020-05-08T06:27:18Z,MERGED,True,3,3,3,https://github.com/qarmin,Small fixes found by static analyzers.,1,[],https://github.com/neutrinolabs/xrdp/pull/1520,https://github.com/qarmin,2,https://github.com/neutrinolabs/xrdp/pull/1520#issuecomment-601714870,,Trial version of PVS Studio(1 week).,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1522,2020-03-21T04:55:34Z,2020-04-21T02:40:39Z,2020-04-21T04:34:48Z,MERGED,True,6,0,1,https://github.com/okhowang,workaround odd shift behaviour,1,['keyboard'],https://github.com/neutrinolabs/xrdp/pull/1522,https://github.com/okhowang,1,https://github.com/neutrinolabs/xrdp/pull/1522,"Fix #397
Workaround by ignore odd shift message","Fix #397
Workaround by ignore odd shift message",True,{'THUMBS_UP': ['https://github.com/metalefty']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1522,2020-03-21T04:55:34Z,2020-04-21T02:40:39Z,2020-04-21T04:34:48Z,MERGED,True,6,0,1,https://github.com/okhowang,workaround odd shift behaviour,1,['keyboard'],https://github.com/neutrinolabs/xrdp/pull/1522,https://github.com/okhowang,2,https://github.com/neutrinolabs/xrdp/pull/1522#issuecomment-610190344,"Fix #397
Workaround by ignore odd shift message",@metalefty is there any other problem to merge?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1522,2020-03-21T04:55:34Z,2020-04-21T02:40:39Z,2020-04-21T04:34:48Z,MERGED,True,6,0,1,https://github.com/okhowang,workaround odd shift behaviour,1,['keyboard'],https://github.com/neutrinolabs/xrdp/pull/1522,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/1522#issuecomment-610191361,"Fix #397
Workaround by ignore odd shift message","Overall, LGTM but I haven't tested yet.
@jsorg71 what do you think?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1522,2020-03-21T04:55:34Z,2020-04-21T02:40:39Z,2020-04-21T04:34:48Z,MERGED,True,6,0,1,https://github.com/okhowang,workaround odd shift behaviour,1,['keyboard'],https://github.com/neutrinolabs/xrdp/pull/1522,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/1522#issuecomment-613259008,"Fix #397
Workaround by ignore odd shift message","@okhowang
Hi, thanks for your patience. I've just tested your pull request however the fix is incomplete.
Can you have a look again?
OK

Press left shift (keep pressed)
Press ""A"" multiple times

got ""AAAAAAAAA"" input


Press right shift and release right shift
Press ""A"" key multiple times  (left shift is still being pressed)

got ""AAAAAAAAA"" input (as expected)



NG (swap right and left shift)

Press right shift (keep pressed)
Press ""A"" multiple times

got ""AAAAAAAAA"" input


Press left shift and release left shift
Press ""A"" key multiple times  (right shift is still being pressed)

""a"" becomes lowercase (uppercase expected)
got ""AAAAAAAAAaaaaaaaaa""",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1522,2020-03-21T04:55:34Z,2020-04-21T02:40:39Z,2020-04-21T04:34:48Z,MERGED,True,6,0,1,https://github.com/okhowang,workaround odd shift behaviour,1,['keyboard'],https://github.com/neutrinolabs/xrdp/pull/1522,https://github.com/metalefty,5,https://github.com/neutrinolabs/xrdp/pull/1522#issuecomment-613262205,"Fix #397
Workaround by ignore odd shift message","Left shift first

Press left shift
Press right shift
Release right shift

Got this (as expected):
KeyPress event, serial 37, synthetic NO, window 0x2200001,
    root 0x25e, subw 0x2200002, time 3100008, (58,61), root:(929,516),
    state 0x0, keycode 50 (keysym 0xffe1, Shift_L), same_screen YES,
    XLookupString gives 0 bytes:
    XmbLookupString gives 0 bytes:
    XFilterEvent returns: False

KeyPress event, serial 37, synthetic NO, window 0x2200001,
    root 0x25e, subw 0x2200002, time 3101562, (58,61), root:(929,516),
    state 0x1, keycode 62 (keysym 0xffe2, Shift_R), same_screen YES,
    XLookupString gives 0 bytes:
    XmbLookupString gives 0 bytes:
    XFilterEvent returns: False

KeyRelease event, serial 37, synthetic NO, window 0x2200001,
    root 0x25e, subw 0x2200002, time 3101697, (58,61), root:(929,516),
    state 0x1, keycode 62 (keysym 0xffe2, Shift_R), same_screen YES,
    XLookupString gives 0 bytes:
    XFilterEvent returns: False

Right shift first

Press right shift
Press left shift
Release left shift

 KeyPress event, serial 37, synthetic NO, window 0x2200001,
    root 0x25e, subw 0x0, time 2931544, (-151,273), root:(720,728),
    state 0x0, keycode 62 (keysym 0xffe2, Shift_R), same_screen YES,
    XLookupString gives 0 bytes:
    XmbLookupString gives 0 bytes:
    XFilterEvent returns: False

KeyPress event, serial 37, synthetic NO, window 0x2200001,
    root 0x25e, subw 0x0, time 2933253, (-151,273), root:(720,728),
    state 0x1, keycode 50 (keysym 0xffe1, Shift_L), same_screen YES,
    XLookupString gives 0 bytes:
    XmbLookupString gives 0 bytes:
    XFilterEvent returns: False

KeyRelease event, serial 37, synthetic NO, window 0x2200001,
    root 0x25e, subw 0x0, time 2933374, (-151,273), root:(720,728),
    state 0x1, keycode 50 (keysym 0xffe1, Shift_L), same_screen YES,
    XLookupString gives 0 bytes:
    XFilterEvent returns: False

KeyRelease event, serial 37, synthetic NO, window 0x2200001,              <- this shouldn't happen
    root 0x25e, subw 0x0, time 2933374, (-151,273), root:(720,728),
    state 0x1, keycode 62 (keysym 0xffe2, Shift_R), same_screen YES,
    XLookupString gives 0 bytes:
    XFilterEvent returns: False",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1522,2020-03-21T04:55:34Z,2020-04-21T02:40:39Z,2020-04-21T04:34:48Z,MERGED,True,6,0,1,https://github.com/okhowang,workaround odd shift behaviour,1,['keyboard'],https://github.com/neutrinolabs/xrdp/pull/1522,https://github.com/okhowang,6,https://github.com/neutrinolabs/xrdp/pull/1522#issuecomment-613333318,"Fix #397
Workaround by ignore odd shift message","see #397 (comment)
the second situation is remain odd in microsoft implementation.
so I just keep same behaviour with it.
DO we need fix the second?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1522,2020-03-21T04:55:34Z,2020-04-21T02:40:39Z,2020-04-21T04:34:48Z,MERGED,True,6,0,1,https://github.com/okhowang,workaround odd shift behaviour,1,['keyboard'],https://github.com/neutrinolabs/xrdp/pull/1522,https://github.com/metalefty,7,https://github.com/neutrinolabs/xrdp/pull/1522#issuecomment-613552640,"Fix #397
Workaround by ignore odd shift message","Okay, understood.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1529,2020-04-02T07:18:55Z,2020-04-03T00:43:25Z,2020-04-03T00:45:50Z,MERGED,True,1,1,1,https://github.com/metalefty,Fix Xorg path for Arch Linux,1,[],https://github.com/neutrinolabs/xrdp/pull/1529,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1529,"It has been moved: https://www.archlinux.org/packages/extra/x86_64/xorg-server/
Fixes: #1448","It has been moved: https://www.archlinux.org/packages/extra/x86_64/xorg-server/
Fixes: #1448",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1545,2020-04-06T20:42:25Z,,2020-12-11T01:12:58Z,OPEN,False,190,25,5,https://github.com/J-W-C,Remotefx painter,11,[],https://github.com/neutrinolabs/xrdp/pull/1545,https://github.com/J-W-C,1,https://github.com/neutrinolabs/xrdp/pull/1545,"A proposed addition that make the Painter send screen image data via RDP surface commands using the RemoteFX codec instead of using RDP bitmap updates.
Makes the login screen come up a little faster, and make xrdp compatible with clients that require RemoteFX.
Work in progress, includes some to-do notes and developmental asserts.","A proposed addition that make the Painter send screen image data via RDP surface commands using the RemoteFX codec instead of using RDP bitmap updates.
Makes the login screen come up a little faster, and make xrdp compatible with clients that require RemoteFX.
Work in progress, includes some to-do notes and developmental asserts.",True,"{'HEART': ['https://github.com/jnwatson', 'https://github.com/metalefty']}"
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1545,2020-04-06T20:42:25Z,,2020-12-11T01:12:58Z,OPEN,False,190,25,5,https://github.com/J-W-C,Remotefx painter,11,[],https://github.com/neutrinolabs/xrdp/pull/1545,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1545#issuecomment-612040584,"A proposed addition that make the Painter send screen image data via RDP surface commands using the RemoteFX codec instead of using RDP bitmap updates.
Makes the login screen come up a little faster, and make xrdp compatible with clients that require RemoteFX.
Work in progress, includes some to-do notes and developmental asserts.","BTW, can you create commits as your name, not EC2 Default User?
You can redo commit and force-push.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1545,2020-04-06T20:42:25Z,,2020-12-11T01:12:58Z,OPEN,False,190,25,5,https://github.com/J-W-C,Remotefx painter,11,[],https://github.com/neutrinolabs/xrdp/pull/1545,https://github.com/J-W-C,3,https://github.com/neutrinolabs/xrdp/pull/1545#issuecomment-612043423,"A proposed addition that make the Painter send screen image data via RDP surface commands using the RemoteFX codec instead of using RDP bitmap updates.
Makes the login screen come up a little faster, and make xrdp compatible with clients that require RemoteFX.
Work in progress, includes some to-do notes and developmental asserts.","Yes, I noticed somewhat late I hadn't set my git email address on that EC2 instance.
Off to learn how to redo commits and force-push now...",True,{'THUMBS_UP': ['https://github.com/metalefty']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1545,2020-04-06T20:42:25Z,,2020-12-11T01:12:58Z,OPEN,False,190,25,5,https://github.com/J-W-C,Remotefx painter,11,[],https://github.com/neutrinolabs/xrdp/pull/1545,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/1545#issuecomment-637906024,"A proposed addition that make the Painter send screen image data via RDP surface commands using the RemoteFX codec instead of using RDP bitmap updates.
Makes the login screen come up a little faster, and make xrdp compatible with clients that require RemoteFX.
Work in progress, includes some to-do notes and developmental asserts.",Has this been finished?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1545,2020-04-06T20:42:25Z,,2020-12-11T01:12:58Z,OPEN,False,190,25,5,https://github.com/J-W-C,Remotefx painter,11,[],https://github.com/neutrinolabs/xrdp/pull/1545,https://github.com/J-W-C,5,https://github.com/neutrinolabs/xrdp/pull/1545#issuecomment-639589096,"A proposed addition that make the Painter send screen image data via RDP surface commands using the RemoteFX codec instead of using RDP bitmap updates.
Makes the login screen come up a little faster, and make xrdp compatible with clients that require RemoteFX.
Work in progress, includes some to-do notes and developmental asserts.",Trying to get back to it now.  I just noticed I should have some #ifdefs so it'll build w/ --disable-rfxcodec.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1549,2020-04-15T09:29:22Z,2020-05-08T06:17:56Z,2020-06-22T09:11:25Z,MERGED,True,91,55,3,https://github.com/matt335672,Address possible memory out-of-bounds accesses on connect requests,1,[],https://github.com/neutrinolabs/xrdp/pull/1549,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1549,"This PR addresses a couple of OOB accesses raised by @hac425xxx and contains a number of other fixes.

trans_force_read_s() The max size check does not need to be part of the read loop. This change moves the check out of the loop and uses a macro from parse.h to do it.
libxrdp_force_read() Error messages improved, plus fixed another possible unreported OOB if a length of 1-3 was passed in the TKTP header.
xrdp_iso_process_rdp_neg_req() Added check that the stream contains the rest of the RDP_NEG_REQ (MS-RDPCGR 2.2.1.1.1) before reading it.
xrdp_iso_recv_msg() Added function header explaining purpose of function (took me a while to figure it out). Added check that enough data remained on stream for TPKT + first two bytes of X.224 CR-TPDU (fixes #1531) . Removed pointless check of length in TPKT header as this has already been checked when the stream was set up. Added check for reserved length value (X.224 13.2.1)
xrdp_iso_incoming() Function header added with doc references. Checked that X.224 length indicator field is consistent with the TPKT length and rejected packet if not (See MS-RDPCGR 3.3.5.3.1). This allows us to use the stream length for the remainder of the function and fixes #1530. Checked stream contains enough data for a RDP_NEG_CORRELATION_INFO (MS-RDPCGR 2.2.1.1.2) if encountered. Simplifies parsing of routingToken / cookie fields if encountered.","This PR addresses a couple of OOB accesses raised by @hac425xxx and contains a number of other fixes.

trans_force_read_s() The max size check does not need to be part of the read loop. This change moves the check out of the loop and uses a macro from parse.h to do it.
libxrdp_force_read() Error messages improved, plus fixed another possible unreported OOB if a length of 1-3 was passed in the TKTP header.
xrdp_iso_process_rdp_neg_req() Added check that the stream contains the rest of the RDP_NEG_REQ (MS-RDPCGR 2.2.1.1.1) before reading it.
xrdp_iso_recv_msg() Added function header explaining purpose of function (took me a while to figure it out). Added check that enough data remained on stream for TPKT + first two bytes of X.224 CR-TPDU (fixes #1531) . Removed pointless check of length in TPKT header as this has already been checked when the stream was set up. Added check for reserved length value (X.224 13.2.1)
xrdp_iso_incoming() Function header added with doc references. Checked that X.224 length indicator field is consistent with the TPKT length and rejected packet if not (See MS-RDPCGR 3.3.5.3.1). This allows us to use the stream length for the remainder of the function and fixes #1530. Checked stream contains enough data for a RDP_NEG_CORRELATION_INFO (MS-RDPCGR 2.2.1.1.2) if encountered. Simplifies parsing of routingToken / cookie fields if encountered.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1549,2020-04-15T09:29:22Z,2020-05-08T06:17:56Z,2020-06-22T09:11:25Z,MERGED,True,91,55,3,https://github.com/matt335672,Address possible memory out-of-bounds accesses on connect requests,1,[],https://github.com/neutrinolabs/xrdp/pull/1549,https://github.com/hac425xxx,2,https://github.com/neutrinolabs/xrdp/pull/1549#issuecomment-613995872,"This PR addresses a couple of OOB accesses raised by @hac425xxx and contains a number of other fixes.

trans_force_read_s() The max size check does not need to be part of the read loop. This change moves the check out of the loop and uses a macro from parse.h to do it.
libxrdp_force_read() Error messages improved, plus fixed another possible unreported OOB if a length of 1-3 was passed in the TKTP header.
xrdp_iso_process_rdp_neg_req() Added check that the stream contains the rest of the RDP_NEG_REQ (MS-RDPCGR 2.2.1.1.1) before reading it.
xrdp_iso_recv_msg() Added function header explaining purpose of function (took me a while to figure it out). Added check that enough data remained on stream for TPKT + first two bytes of X.224 CR-TPDU (fixes #1531) . Removed pointless check of length in TPKT header as this has already been checked when the stream was set up. Added check for reserved length value (X.224 13.2.1)
xrdp_iso_incoming() Function header added with doc references. Checked that X.224 length indicator field is consistent with the TPKT length and rejected packet if not (See MS-RDPCGR 3.3.5.3.1). This allows us to use the stream length for the remainder of the function and fixes #1530. Checked stream contains enough data for a RDP_NEG_CORRELATION_INFO (MS-RDPCGR 2.2.1.1.2) if encountered. Simplifies parsing of routingToken / cookie fields if encountered.","could you please request some cve for these bug, you can requset in github project
https://github.com/neutrinolabs/xrdp/security/advisories
the document for requtest
https://help.github.com/en/github/managing-security-vulnerabilities/publishing-a-security-advisory
Thanks A Lot!
@matt335672
@neutrinolabs",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1551,2020-04-18T16:37:02Z,2020-04-18T18:00:23Z,2020-04-23T16:50:59Z,CLOSED,False,30,0,3,https://github.com/matt335672,Check for overflow before g_malloc() calls,1,[],https://github.com/neutrinolabs/xrdp/pull/1551,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1551,"Attempt at addressing  #1533, #1534, and #1544
This is the simplest fix I could come up with. Arguably g_malloc() should take an unsigned type of some sort (size_t even) but I think implementing this would involve a lot of minor changes to many files, given the general absence of this type in the codebase. Maybe now is a good time to do that(?) Anyone got any thoughts on that?","Attempt at addressing  #1533, #1534, and #1544
This is the simplest fix I could come up with. Arguably g_malloc() should take an unsigned type of some sort (size_t even) but I think implementing this would involve a lot of minor changes to many files, given the general absence of this type in the codebase. Maybe now is a good time to do that(?) Anyone got any thoughts on that?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1551,2020-04-18T16:37:02Z,2020-04-18T18:00:23Z,2020-04-23T16:50:59Z,CLOSED,False,30,0,3,https://github.com/matt335672,Check for overflow before g_malloc() calls,1,[],https://github.com/neutrinolabs/xrdp/pull/1551,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/1551#issuecomment-615914059,"Attempt at addressing  #1533, #1534, and #1544
This is the simplest fix I could come up with. Arguably g_malloc() should take an unsigned type of some sort (size_t even) but I think implementing this would involve a lot of minor changes to many files, given the general absence of this type in the codebase. Maybe now is a good time to do that(?) Anyone got any thoughts on that?",Just been thinking some of this through - it needs more work. I'll resubmit it when it's in a better state.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1557,2020-04-23T16:53:11Z,2020-05-04T17:49:58Z,2020-05-05T08:50:43Z,MERGED,True,78,13,4,https://github.com/matt335672,Check for overflow before g_malloc() calls,3,[],https://github.com/neutrinolabs/xrdp/pull/1557,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1557,"Here's a better attempt to replace #1551
Fixes  #1533, fixes #1534, fixes #1544
#1533 - Checked the supported strings for the group parameter (see here). They're all relatively small, so code restructured to just allow a short string here, and check for it.
#1534 - Similarly the allowed string for a virtual channel name is quite small here - see here.
#1544 - Checked for integer overflow explicitly when requesting buffer.
I've not attempted to change the argument to g_malloc() to an unsigned integer here - I think that needs more thought and a separate PR","Here's a better attempt to replace #1551
Fixes  #1533, fixes #1534, fixes #1544
#1533 - Checked the supported strings for the group parameter (see here). They're all relatively small, so code restructured to just allow a short string here, and check for it.
#1534 - Similarly the allowed string for a virtual channel name is quite small here - see here.
#1544 - Checked for integer overflow explicitly when requesting buffer.
I've not attempted to change the argument to g_malloc() to an unsigned integer here - I think that needs more thought and a separate PR",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1557,2020-04-23T16:53:11Z,2020-05-04T17:49:58Z,2020-05-05T08:50:43Z,MERGED,True,78,13,4,https://github.com/matt335672,Check for overflow before g_malloc() calls,3,[],https://github.com/neutrinolabs/xrdp/pull/1557,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/1557#issuecomment-618938627,"Here's a better attempt to replace #1551
Fixes  #1533, fixes #1534, fixes #1544
#1533 - Checked the supported strings for the group parameter (see here). They're all relatively small, so code restructured to just allow a short string here, and check for it.
#1534 - Similarly the allowed string for a virtual channel name is quite small here - see here.
#1544 - Checked for integer overflow explicitly when requesting buffer.
I've not attempted to change the argument to g_malloc() to an unsigned integer here - I think that needs more thought and a separate PR",Just realised that the change to chansrv.c can be further improved. The call to g_malloc()/g_free() for the channel name has now been replaced with a simple fixed-size stack allocation.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1557,2020-04-23T16:53:11Z,2020-05-04T17:49:58Z,2020-05-05T08:50:43Z,MERGED,True,78,13,4,https://github.com/matt335672,Check for overflow before g_malloc() calls,3,[],https://github.com/neutrinolabs/xrdp/pull/1557,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/1557#issuecomment-620454735,"Here's a better attempt to replace #1551
Fixes  #1533, fixes #1534, fixes #1544
#1533 - Checked the supported strings for the group parameter (see here). They're all relatively small, so code restructured to just allow a short string here, and check for it.
#1534 - Similarly the allowed string for a virtual channel name is quite small here - see here.
#1544 - Checked for integer overflow explicitly when requesting buffer.
I've not attempted to change the argument to g_malloc() to an unsigned integer here - I think that needs more thought and a separate PR","@matt335672
BTW, I and Jay are willing to invite you to xrdp members. We really appreciate your work not only by code but also on issue triages and answering users' questions. What about that?
After you joined xrdp members, you'll be able to close/reopen/edit issues, editing labels (issue triage), merge PRs (but usually don't) by yourself. Thank you very much for your work on xrdp!",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1557,2020-04-23T16:53:11Z,2020-05-04T17:49:58Z,2020-05-05T08:50:43Z,MERGED,True,78,13,4,https://github.com/matt335672,Check for overflow before g_malloc() calls,3,[],https://github.com/neutrinolabs/xrdp/pull/1557,https://github.com/matt335672,4,https://github.com/neutrinolabs/xrdp/pull/1557#issuecomment-620669445,"Here's a better attempt to replace #1551
Fixes  #1533, fixes #1534, fixes #1544
#1533 - Checked the supported strings for the group parameter (see here). They're all relatively small, so code restructured to just allow a short string here, and check for it.
#1534 - Similarly the allowed string for a virtual channel name is quite small here - see here.
#1544 - Checked for integer overflow explicitly when requesting buffer.
I've not attempted to change the argument to g_malloc() to an unsigned integer here - I think that needs more thought and a separate PR","Well, I'm honoured, truly.
In short, 'yes'. At the moment I've got time to work on the project, and if you're prepared to allow me to help in a more hands-on way that would be great.
Thank you.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1557,2020-04-23T16:53:11Z,2020-05-04T17:49:58Z,2020-05-05T08:50:43Z,MERGED,True,78,13,4,https://github.com/matt335672,Check for overflow before g_malloc() calls,3,[],https://github.com/neutrinolabs/xrdp/pull/1557,https://github.com/metalefty,5,https://github.com/neutrinolabs/xrdp/pull/1557#issuecomment-622288821,"Here's a better attempt to replace #1551
Fixes  #1533, fixes #1534, fixes #1544
#1533 - Checked the supported strings for the group parameter (see here). They're all relatively small, so code restructured to just allow a short string here, and check for it.
#1534 - Similarly the allowed string for a virtual channel name is quite small here - see here.
#1544 - Checked for integer overflow explicitly when requesting buffer.
I've not attempted to change the argument to g_malloc() to an unsigned integer here - I think that needs more thought and a separate PR","Anyway, you should join the gitter chatrooms.

https://gitter.im/neutrinolabs/xrdp
https://gitter.im/neutrinolabs/xrdp-questions",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1557,2020-04-23T16:53:11Z,2020-05-04T17:49:58Z,2020-05-05T08:50:43Z,MERGED,True,78,13,4,https://github.com/matt335672,Check for overflow before g_malloc() calls,3,[],https://github.com/neutrinolabs/xrdp/pull/1557,https://github.com/metalefty,6,https://github.com/neutrinolabs/xrdp/pull/1557#issuecomment-623605177,"Here's a better attempt to replace #1551
Fixes  #1533, fixes #1534, fixes #1544
#1533 - Checked the supported strings for the group parameter (see here). They're all relatively small, so code restructured to just allow a short string here, and check for it.
#1534 - Similarly the allowed string for a virtual channel name is quite small here - see here.
#1544 - Checked for integer overflow explicitly when requesting buffer.
I've not attempted to change the argument to g_malloc() to an unsigned integer here - I think that needs more thought and a separate PR",@matt335672 You've already added to xrdp team. You should now able to close or label issues. Feel free to do that.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1560,2020-04-27T19:43:49Z,2020-04-28T00:26:54Z,2020-05-05T08:51:01Z,MERGED,True,78,26,3,https://github.com/matt335672,Support Slackware with pam,1,[],https://github.com/neutrinolabs/xrdp/pull/1560,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1560,"Slackware recently acquired a pam package, which can be used with XRDP.
This PR adds an old-style PAM definition for sesman using pam_unix.so. This definition is now installed, if suitable, with make install and if no better definitions are found. The definition would work on other systems than Slackware.
The mkpamrules script has been tidied up slightly, while staying Bourne shell compatible. It will now fail if it can't install a usable PAM definition rather than installing something unusable.
This PR addresses half of the concerns raised in #1558","Slackware recently acquired a pam package, which can be used with XRDP.
This PR adds an old-style PAM definition for sesman using pam_unix.so. This definition is now installed, if suitable, with make install and if no better definitions are found. The definition would work on other systems than Slackware.
The mkpamrules script has been tidied up slightly, while staying Bourne shell compatible. It will now fail if it can't install a usable PAM definition rather than installing something unusable.
This PR addresses half of the concerns raised in #1558",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1593,2020-05-26T11:14:19Z,2020-05-27T07:03:01Z,2020-05-27T07:03:22Z,MERGED,True,4,1,1,https://github.com/matt335672,Ignore TS_MULTIFRAGMENTUPDATE_CAPABILITYSET from client if fp disabled,1,['protocol'],https://github.com/neutrinolabs/xrdp/pull/1593,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1593,"Fixes #1569
rdesktop 1.9.0 (as delivered with Ubuntu 20.04) sends a TS_MULTIFRAGMENTUPDATE_CAPABILITYSET structure ([MS-RDPBCGR] 2.2.7.2.6) with a MaxRequestSize of 65535.
If the user has disabled fastpath output using use_fastpath in xrdp.ini, the following happens:-

An output buffer is created of size 32768 in xrdp_orders_create().
Receipt of TS_MULTIFRAGMENTUPDATE_CAPABILITYSET in xrdp_caps_process_multifragmentupdate() sets client_info.max_fastpath_frag_bytes to 65535.
This value is used by xrdp_orders_check() va the MAX_ORDERS_SIZE macro to determine when to send the orders buffer. Consequently the buffer overflows when being written to.

This PR simply ignores any sent MaxRequestSize value if fastpath output is disabled.","Fixes #1569
rdesktop 1.9.0 (as delivered with Ubuntu 20.04) sends a TS_MULTIFRAGMENTUPDATE_CAPABILITYSET structure ([MS-RDPBCGR] 2.2.7.2.6) with a MaxRequestSize of 65535.
If the user has disabled fastpath output using use_fastpath in xrdp.ini, the following happens:-

An output buffer is created of size 32768 in xrdp_orders_create().
Receipt of TS_MULTIFRAGMENTUPDATE_CAPABILITYSET in xrdp_caps_process_multifragmentupdate() sets client_info.max_fastpath_frag_bytes to 65535.
This value is used by xrdp_orders_check() va the MAX_ORDERS_SIZE macro to determine when to send the orders buffer. Consequently the buffer overflows when being written to.

This PR simply ignores any sent MaxRequestSize value if fastpath output is disabled.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1593,2020-05-26T11:14:19Z,2020-05-27T07:03:01Z,2020-05-27T07:03:22Z,MERGED,True,4,1,1,https://github.com/matt335672,Ignore TS_MULTIFRAGMENTUPDATE_CAPABILITYSET from client if fp disabled,1,['protocol'],https://github.com/neutrinolabs/xrdp/pull/1593,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1593#issuecomment-634072089,"Fixes #1569
rdesktop 1.9.0 (as delivered with Ubuntu 20.04) sends a TS_MULTIFRAGMENTUPDATE_CAPABILITYSET structure ([MS-RDPBCGR] 2.2.7.2.6) with a MaxRequestSize of 65535.
If the user has disabled fastpath output using use_fastpath in xrdp.ini, the following happens:-

An output buffer is created of size 32768 in xrdp_orders_create().
Receipt of TS_MULTIFRAGMENTUPDATE_CAPABILITYSET in xrdp_caps_process_multifragmentupdate() sets client_info.max_fastpath_frag_bytes to 65535.
This value is used by xrdp_orders_check() va the MAX_ORDERS_SIZE macro to determine when to send the orders buffer. Consequently the buffer overflows when being written to.

This PR simply ignores any sent MaxRequestSize value if fastpath output is disabled.",ref. 2.2.7.2.6 Multifragment Update Capability Set (TS_MULTIFRAGMENTUPDATE_CAPABILITYSET),True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1593,2020-05-26T11:14:19Z,2020-05-27T07:03:01Z,2020-05-27T07:03:22Z,MERGED,True,4,1,1,https://github.com/matt335672,Ignore TS_MULTIFRAGMENTUPDATE_CAPABILITYSET from client if fp disabled,1,['protocol'],https://github.com/neutrinolabs/xrdp/pull/1593,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/1593#issuecomment-634077390,"Fixes #1569
rdesktop 1.9.0 (as delivered with Ubuntu 20.04) sends a TS_MULTIFRAGMENTUPDATE_CAPABILITYSET structure ([MS-RDPBCGR] 2.2.7.2.6) with a MaxRequestSize of 65535.
If the user has disabled fastpath output using use_fastpath in xrdp.ini, the following happens:-

An output buffer is created of size 32768 in xrdp_orders_create().
Receipt of TS_MULTIFRAGMENTUPDATE_CAPABILITYSET in xrdp_caps_process_multifragmentupdate() sets client_info.max_fastpath_frag_bytes to 65535.
This value is used by xrdp_orders_check() va the MAX_ORDERS_SIZE macro to determine when to send the orders buffer. Consequently the buffer overflows when being written to.

This PR simply ignores any sent MaxRequestSize value if fastpath output is disabled.",Fair enough.  Nice work.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1593,2020-05-26T11:14:19Z,2020-05-27T07:03:01Z,2020-05-27T07:03:22Z,MERGED,True,4,1,1,https://github.com/matt335672,Ignore TS_MULTIFRAGMENTUPDATE_CAPABILITYSET from client if fp disabled,1,['protocol'],https://github.com/neutrinolabs/xrdp/pull/1593,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/1593#issuecomment-634080887,"Fixes #1569
rdesktop 1.9.0 (as delivered with Ubuntu 20.04) sends a TS_MULTIFRAGMENTUPDATE_CAPABILITYSET structure ([MS-RDPBCGR] 2.2.7.2.6) with a MaxRequestSize of 65535.
If the user has disabled fastpath output using use_fastpath in xrdp.ini, the following happens:-

An output buffer is created of size 32768 in xrdp_orders_create().
Receipt of TS_MULTIFRAGMENTUPDATE_CAPABILITYSET in xrdp_caps_process_multifragmentupdate() sets client_info.max_fastpath_frag_bytes to 65535.
This value is used by xrdp_orders_check() va the MAX_ORDERS_SIZE macro to determine when to send the orders buffer. Consequently the buffer overflows when being written to.

This PR simply ignores any sent MaxRequestSize value if fastpath output is disabled.",Merge it.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1595,2020-05-29T13:11:59Z,2020-06-03T11:15:08Z,2020-06-03T11:15:17Z,MERGED,True,20,4,4,https://github.com/matt335672,Prevent chansrv input channels being scanned during a server reset,1,['protocol'],https://github.com/neutrinolabs/xrdp/pull/1595,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1595,"A server reset is used to implement  a client resize.
Currently this is done by sending a TS_DEACTIVATE_ALL_PDU and then resending capabilities with TS_DEMAND_ACTIVE_PDU by libxrdp_reset()
It's possible at the moment for channel data to be read from chansrv and sent to the RDP client between these two messages. This is because at the end of xrdp_mcs_send() for the 'deactivate all' we call xrdp_mcs_call_callback(). If there's pending chansrv data it's sent to the client.
This appears to be at odds with MS-RDPBCGR 3.2.5.5.1 which calls for the client to disable all its input handlers.
This is also what FreeRDP 2.0.0 appears to do. If a message is received between TS_DEACTIVATE_ALL_PDU and TS_DEMAND_ACTIVE_PDU for a channel other than the MCS global channel an error is reported.
This PR disables the chansrv input checks while a libxrdp_reset() is in progress.","A server reset is used to implement  a client resize.
Currently this is done by sending a TS_DEACTIVATE_ALL_PDU and then resending capabilities with TS_DEMAND_ACTIVE_PDU by libxrdp_reset()
It's possible at the moment for channel data to be read from chansrv and sent to the RDP client between these two messages. This is because at the end of xrdp_mcs_send() for the 'deactivate all' we call xrdp_mcs_call_callback(). If there's pending chansrv data it's sent to the client.
This appears to be at odds with MS-RDPBCGR 3.2.5.5.1 which calls for the client to disable all its input handlers.
This is also what FreeRDP 2.0.0 appears to do. If a message is received between TS_DEACTIVATE_ALL_PDU and TS_DEMAND_ACTIVE_PDU for a channel other than the MCS global channel an error is reported.
This PR disables the chansrv input checks while a libxrdp_reset() is in progress.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1595,2020-05-29T13:11:59Z,2020-06-03T11:15:08Z,2020-06-03T11:15:17Z,MERGED,True,20,4,4,https://github.com/matt335672,Prevent chansrv input channels being scanned during a server reset,1,['protocol'],https://github.com/neutrinolabs/xrdp/pull/1595,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1595#issuecomment-636653704,"A server reset is used to implement  a client resize.
Currently this is done by sending a TS_DEACTIVATE_ALL_PDU and then resending capabilities with TS_DEMAND_ACTIVE_PDU by libxrdp_reset()
It's possible at the moment for channel data to be read from chansrv and sent to the RDP client between these two messages. This is because at the end of xrdp_mcs_send() for the 'deactivate all' we call xrdp_mcs_call_callback(). If there's pending chansrv data it's sent to the client.
This appears to be at odds with MS-RDPBCGR 3.2.5.5.1 which calls for the client to disable all its input handlers.
This is also what FreeRDP 2.0.0 appears to do. If a message is received between TS_DEACTIVATE_ALL_PDU and TS_DEMAND_ACTIVE_PDU for a channel other than the MCS global channel an error is reported.
This PR disables the chansrv input checks while a libxrdp_reset() is in progress.","As my quick reading of the specification, the logic looks good to me but I concern some trivial points.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1595,2020-05-29T13:11:59Z,2020-06-03T11:15:08Z,2020-06-03T11:15:17Z,MERGED,True,20,4,4,https://github.com/matt335672,Prevent chansrv input channels being scanned during a server reset,1,['protocol'],https://github.com/neutrinolabs/xrdp/pull/1595,https://github.com/matt335672,3,https://github.com/neutrinolabs/xrdp/pull/1595#issuecomment-636659519,"A server reset is used to implement  a client resize.
Currently this is done by sending a TS_DEACTIVATE_ALL_PDU and then resending capabilities with TS_DEMAND_ACTIVE_PDU by libxrdp_reset()
It's possible at the moment for channel data to be read from chansrv and sent to the RDP client between these two messages. This is because at the end of xrdp_mcs_send() for the 'deactivate all' we call xrdp_mcs_call_callback(). If there's pending chansrv data it's sent to the client.
This appears to be at odds with MS-RDPBCGR 3.2.5.5.1 which calls for the client to disable all its input handlers.
This is also what FreeRDP 2.0.0 appears to do. If a message is received between TS_DEACTIVATE_ALL_PDU and TS_DEMAND_ACTIVE_PDU for a channel other than the MCS global channel an error is reported.
This PR disables the chansrv input checks while a libxrdp_reset() is in progress.","I had a think over the weekend, and there may be better ways to do this.
I could push the logic down into the MCS layer which would move it into libxrdp rather than the xrdp process itself. That might make it a bit cleaner.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1595,2020-05-29T13:11:59Z,2020-06-03T11:15:08Z,2020-06-03T11:15:17Z,MERGED,True,20,4,4,https://github.com/matt335672,Prevent chansrv input channels being scanned during a server reset,1,['protocol'],https://github.com/neutrinolabs/xrdp/pull/1595,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/1595#issuecomment-636670066,"A server reset is used to implement  a client resize.
Currently this is done by sending a TS_DEACTIVATE_ALL_PDU and then resending capabilities with TS_DEMAND_ACTIVE_PDU by libxrdp_reset()
It's possible at the moment for channel data to be read from chansrv and sent to the RDP client between these two messages. This is because at the end of xrdp_mcs_send() for the 'deactivate all' we call xrdp_mcs_call_callback(). If there's pending chansrv data it's sent to the client.
This appears to be at odds with MS-RDPBCGR 3.2.5.5.1 which calls for the client to disable all its input handlers.
This is also what FreeRDP 2.0.0 appears to do. If a message is received between TS_DEACTIVATE_ALL_PDU and TS_DEMAND_ACTIVE_PDU for a channel other than the MCS global channel an error is reported.
This PR disables the chansrv input checks while a libxrdp_reset() is in progress.","Yup, handling in libxrdp layer would be nice.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1595,2020-05-29T13:11:59Z,2020-06-03T11:15:08Z,2020-06-03T11:15:17Z,MERGED,True,20,4,4,https://github.com/matt335672,Prevent chansrv input channels being scanned during a server reset,1,['protocol'],https://github.com/neutrinolabs/xrdp/pull/1595,https://github.com/matt335672,5,https://github.com/neutrinolabs/xrdp/pull/1595#issuecomment-636681106,"A server reset is used to implement  a client resize.
Currently this is done by sending a TS_DEACTIVATE_ALL_PDU and then resending capabilities with TS_DEMAND_ACTIVE_PDU by libxrdp_reset()
It's possible at the moment for channel data to be read from chansrv and sent to the RDP client between these two messages. This is because at the end of xrdp_mcs_send() for the 'deactivate all' we call xrdp_mcs_call_callback(). If there's pending chansrv data it's sent to the client.
This appears to be at odds with MS-RDPBCGR 3.2.5.5.1 which calls for the client to disable all its input handlers.
This is also what FreeRDP 2.0.0 appears to do. If a message is received between TS_DEACTIVATE_ALL_PDU and TS_DEMAND_ACTIVE_PDU for a channel other than the MCS global channel an error is reported.
This PR disables the chansrv input checks while a libxrdp_reset() is in progress.","OK - I'll refactor it down there, retest and update the PR.
Thanks.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1595,2020-05-29T13:11:59Z,2020-06-03T11:15:08Z,2020-06-03T11:15:17Z,MERGED,True,20,4,4,https://github.com/matt335672,Prevent chansrv input channels being scanned during a server reset,1,['protocol'],https://github.com/neutrinolabs/xrdp/pull/1595,https://github.com/matt335672,6,https://github.com/neutrinolabs/xrdp/pull/1595#issuecomment-636824100,"A server reset is used to implement  a client resize.
Currently this is done by sending a TS_DEACTIVATE_ALL_PDU and then resending capabilities with TS_DEMAND_ACTIVE_PDU by libxrdp_reset()
It's possible at the moment for channel data to be read from chansrv and sent to the RDP client between these two messages. This is because at the end of xrdp_mcs_send() for the 'deactivate all' we call xrdp_mcs_call_callback(). If there's pending chansrv data it's sent to the client.
This appears to be at odds with MS-RDPBCGR 3.2.5.5.1 which calls for the client to disable all its input handlers.
This is also what FreeRDP 2.0.0 appears to do. If a message is received between TS_DEACTIVATE_ALL_PDU and TS_DEMAND_ACTIVE_PDU for a channel other than the MCS global channel an error is reported.
This PR disables the chansrv input checks while a libxrdp_reset() is in progress.","Changes now implemented in the session layer, which I'm happier with.
The variable names should be clearer now. Happy to change if necessary.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1595,2020-05-29T13:11:59Z,2020-06-03T11:15:08Z,2020-06-03T11:15:17Z,MERGED,True,20,4,4,https://github.com/matt335672,Prevent chansrv input channels being scanned during a server reset,1,['protocol'],https://github.com/neutrinolabs/xrdp/pull/1595,https://github.com/metalefty,7,https://github.com/neutrinolabs/xrdp/pull/1595#issuecomment-636877459,"A server reset is used to implement  a client resize.
Currently this is done by sending a TS_DEACTIVATE_ALL_PDU and then resending capabilities with TS_DEMAND_ACTIVE_PDU by libxrdp_reset()
It's possible at the moment for channel data to be read from chansrv and sent to the RDP client between these two messages. This is because at the end of xrdp_mcs_send() for the 'deactivate all' we call xrdp_mcs_call_callback(). If there's pending chansrv data it's sent to the client.
This appears to be at odds with MS-RDPBCGR 3.2.5.5.1 which calls for the client to disable all its input handlers.
This is also what FreeRDP 2.0.0 appears to do. If a message is received between TS_DEACTIVATE_ALL_PDU and TS_DEMAND_ACTIVE_PDU for a channel other than the MCS global channel an error is reported.
This PR disables the chansrv input checks while a libxrdp_reset() is in progress.",LGTM now but let me some more time to test.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1602,2020-06-10T08:21:37Z,,2021-01-22T11:14:35Z,OPEN,False,1022,586,27,https://github.com/jsorg71,"sesman: work on moving sesman to trans, unix domain socket",3,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/1602,https://github.com/jsorg71,1,https://github.com/neutrinolabs/xrdp/pull/1602,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1602,2020-06-10T08:21:37Z,,2021-01-22T11:14:35Z,OPEN,False,1022,586,27,https://github.com/jsorg71,"sesman: work on moving sesman to trans, unix domain socket",3,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/1602,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/1602#issuecomment-643139063,,"I see you're returning SCP_SERVER_STATE_INTERNAL_ERR for missing data (i.e. s_check_rem() fails). Would SCP_CLIENT_STATE_SIZE_ERR / SCP_SERVER_STATE_SIZE_ERR (as appropriate) be a better choice?
I ask, as it's relevant to another change I'm looking at at the moment.
Thanks,",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1602,2020-06-10T08:21:37Z,,2021-01-22T11:14:35Z,OPEN,False,1022,586,27,https://github.com/jsorg71,"sesman: work on moving sesman to trans, unix domain socket",3,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/1602,https://github.com/jsorg71,3,https://github.com/neutrinolabs/xrdp/pull/1602#issuecomment-643416221,,"@matt335672 yes, I noticed that too, I think SCP_SERVER_STATE_SIZE_ERR would be the right one.  I'll change that when I push the v1 changes.  Thanks.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1602,2020-06-10T08:21:37Z,,2021-01-22T11:14:35Z,OPEN,False,1022,586,27,https://github.com/jsorg71,"sesman: work on moving sesman to trans, unix domain socket",3,['work in progress'],https://github.com/neutrinolabs/xrdp/pull/1602,https://github.com/matt335672,4,https://github.com/neutrinolabs/xrdp/pull/1602#issuecomment-765330738,,"@jsorg71 - I'm quite keen to get the move to the UNIX domain socket completed, as I think it's a good idea to get this in before a fix to #1684 which is a big chunk of work.
When we've got the domain socket move done we can use something like getpeereid() for authentication for the management functions used by  xrdp-sesadmin which will really help usability.
I've got some effort available at the moment. Would you be happy for me to take your sesman_trans branch and work with it?
Thanks.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1604,2020-06-11T12:52:37Z,2020-06-12T00:14:16Z,2020-06-12T00:14:16Z,CLOSED,False,1,1,1,https://github.com/metalefty,xrdp: add newline at eol of PID file,1,[],https://github.com/neutrinolabs/xrdp/pull/1604,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1604,"sesman puts newline at eol of PID file but xrdp don't. I found that it
is reported by Ubuntu user 11 years ago.
Reported by:    https://bugs.launchpad.net/ubuntu/+source/xrdp/+bug/484116","sesman puts newline at eol of PID file but xrdp don't. I found that it
is reported by Ubuntu user 11 years ago.
Reported by:    https://bugs.launchpad.net/ubuntu/+source/xrdp/+bug/484116",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1604,2020-06-11T12:52:37Z,2020-06-12T00:14:16Z,2020-06-12T00:14:16Z,CLOSED,False,1,1,1,https://github.com/metalefty,xrdp: add newline at eol of PID file,1,[],https://github.com/neutrinolabs/xrdp/pull/1604,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1604#issuecomment-642678970,"sesman puts newline at eol of PID file but xrdp don't. I found that it
is reported by Ubuntu user 11 years ago.
Reported by:    https://bugs.launchpad.net/ubuntu/+source/xrdp/+bug/484116","Oops, I was insane. This code don't work at all. I need to take a break. Sorry for the noise.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1604,2020-06-11T12:52:37Z,2020-06-12T00:14:16Z,2020-06-12T00:14:16Z,CLOSED,False,1,1,1,https://github.com/metalefty,xrdp: add newline at eol of PID file,1,[],https://github.com/neutrinolabs/xrdp/pull/1604,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/1604#issuecomment-642713991,"sesman puts newline at eol of PID file but xrdp don't. I found that it
is reported by Ubuntu user 11 years ago.
Reported by:    https://bugs.launchpad.net/ubuntu/+source/xrdp/+bug/484116","As far as I read the current code, both xrdp and xrdp-sesman put no newline at eol.  However, I'm not sure which is the standard format.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1604,2020-06-11T12:52:37Z,2020-06-12T00:14:16Z,2020-06-12T00:14:16Z,CLOSED,False,1,1,1,https://github.com/metalefty,xrdp: add newline at eol of PID file,1,[],https://github.com/neutrinolabs/xrdp/pull/1604,https://github.com/matt335672,4,https://github.com/neutrinolabs/xrdp/pull/1604#issuecomment-642776184,"sesman puts newline at eol of PID file but xrdp don't. I found that it
is reported by Ubuntu user 11 years ago.
Reported by:    https://bugs.launchpad.net/ubuntu/+source/xrdp/+bug/484116","I can't find any documentation on the standard, but I expect a lot of them did have newlines as they were written (in the past) by System-V scripts using echo. I think either should be fine.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1604,2020-06-11T12:52:37Z,2020-06-12T00:14:16Z,2020-06-12T00:14:16Z,CLOSED,False,1,1,1,https://github.com/metalefty,xrdp: add newline at eol of PID file,1,[],https://github.com/neutrinolabs/xrdp/pull/1604,https://github.com/metalefty,5,https://github.com/neutrinolabs/xrdp/pull/1604#issuecomment-642992191,"sesman puts newline at eol of PID file but xrdp don't. I found that it
is reported by Ubuntu user 11 years ago.
Reported by:    https://bugs.launchpad.net/ubuntu/+source/xrdp/+bug/484116","Thanks, I misrecognized the issue. The Ubuntu issue is not exist in the current version of xrdp. Closing.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1606,2020-06-14T00:42:04Z,,2020-08-26T16:33:48Z,OPEN,False,2,0,1,https://github.com/RolKau,Read configuration for only virtual X server,2,[],https://github.com/neutrinolabs/xrdp/pull/1606,https://github.com/RolKau,1,https://github.com/neutrinolabs/xrdp/pull/1606,"When the X server is launched, only the configuration main file
xrdp/xorg.conf is specified, but the configuration directory is
retained as default, as is indicated by the output:
(==) Using config directory: ""/etc/X11/xorg.conf.d""

in ~/.xorgxrdp.10.log. If the host has an existing X server running for
the console, and this is not entirely auto-configured, configuration
files from this directory will be picked up and cause the virtual X
server that XRDP launches to attempt to load modules for it, which may
result in errors such as:
(EE) parse_vt_settings: Cannot open /dev/tty0 (Permission denied)

or
(EE) xf86OpenConsole: Cannot open virtual console 2 (Permission denied)

Searching the Internet for these errors will typically lead the user to
a myriad of non-solutions, involving added the user to the tty group, or
editing /etc/X11/Xwrapper.config.
This changeset changes the configuration of the virtual X server so that
it considers only /etc/X11/xrdp as its proper configuration directory,
and pick up the xorg.conf file by default from there.","When the X server is launched, only the configuration main file
xrdp/xorg.conf is specified, but the configuration directory is
retained as default, as is indicated by the output:
(==) Using config directory: ""/etc/X11/xorg.conf.d""

in ~/.xorgxrdp.10.log. If the host has an existing X server running for
the console, and this is not entirely auto-configured, configuration
files from this directory will be picked up and cause the virtual X
server that XRDP launches to attempt to load modules for it, which may
result in errors such as:
(EE) parse_vt_settings: Cannot open /dev/tty0 (Permission denied)

or
(EE) xf86OpenConsole: Cannot open virtual console 2 (Permission denied)

Searching the Internet for these errors will typically lead the user to
a myriad of non-solutions, involving added the user to the tty group, or
editing /etc/X11/Xwrapper.config.
This changeset changes the configuration of the virtual X server so that
it considers only /etc/X11/xrdp as its proper configuration directory,
and pick up the xorg.conf file by default from there.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1606,2020-06-14T00:42:04Z,,2020-08-26T16:33:48Z,OPEN,False,2,0,1,https://github.com/RolKau,Read configuration for only virtual X server,2,[],https://github.com/neutrinolabs/xrdp/pull/1606,https://github.com/moobyfr,2,https://github.com/neutrinolabs/xrdp/pull/1606#issuecomment-643756410,"When the X server is launched, only the configuration main file
xrdp/xorg.conf is specified, but the configuration directory is
retained as default, as is indicated by the output:
(==) Using config directory: ""/etc/X11/xorg.conf.d""

in ~/.xorgxrdp.10.log. If the host has an existing X server running for
the console, and this is not entirely auto-configured, configuration
files from this directory will be picked up and cause the virtual X
server that XRDP launches to attempt to load modules for it, which may
result in errors such as:
(EE) parse_vt_settings: Cannot open /dev/tty0 (Permission denied)

or
(EE) xf86OpenConsole: Cannot open virtual console 2 (Permission denied)

Searching the Internet for these errors will typically lead the user to
a myriad of non-solutions, involving added the user to the tty group, or
editing /etc/X11/Xwrapper.config.
This changeset changes the configuration of the virtual X server so that
it considers only /etc/X11/xrdp as its proper configuration directory,
and pick up the xorg.conf file by default from there.","I had a look some years ago with the autoloading of modules. I came to the conclusion that the HAL part of Xorg loads modules directly without having to look for configuration files. For example, the load of nv, nouveau or nvidia can be made without having to specify it in the configuration file. Does the usage of configdir stop these mecanisms ?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1606,2020-06-14T00:42:04Z,,2020-08-26T16:33:48Z,OPEN,False,2,0,1,https://github.com/RolKau,Read configuration for only virtual X server,2,[],https://github.com/neutrinolabs/xrdp/pull/1606,https://github.com/RolKau,3,https://github.com/neutrinolabs/xrdp/pull/1606#issuecomment-643971188,"When the X server is launched, only the configuration main file
xrdp/xorg.conf is specified, but the configuration directory is
retained as default, as is indicated by the output:
(==) Using config directory: ""/etc/X11/xorg.conf.d""

in ~/.xorgxrdp.10.log. If the host has an existing X server running for
the console, and this is not entirely auto-configured, configuration
files from this directory will be picked up and cause the virtual X
server that XRDP launches to attempt to load modules for it, which may
result in errors such as:
(EE) parse_vt_settings: Cannot open /dev/tty0 (Permission denied)

or
(EE) xf86OpenConsole: Cannot open virtual console 2 (Permission denied)

Searching the Internet for these errors will typically lead the user to
a myriad of non-solutions, involving added the user to the tty group, or
editing /etc/X11/Xwrapper.config.
This changeset changes the configuration of the virtual X server so that
it considers only /etc/X11/xrdp as its proper configuration directory,
and pick up the xorg.conf file by default from there.","Does the usage of configdir stop ... [automatic loading of nv through HAL]

I am not really sure, but I think that the loading code works by first reading the file specified by -config, then appending all the files found in -configdir, and in the end auto-configuring what is missing. I know that with an X server connected to real hardware, you can for instance specify mouse settings in /etc/X11/xorg.conf.d, and have the monitor hardware probed automatically.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1606,2020-06-14T00:42:04Z,,2020-08-26T16:33:48Z,OPEN,False,2,0,1,https://github.com/RolKau,Read configuration for only virtual X server,2,[],https://github.com/neutrinolabs/xrdp/pull/1606,https://github.com/RolKau,4,https://github.com/neutrinolabs/xrdp/pull/1606#issuecomment-643975900,"When the X server is launched, only the configuration main file
xrdp/xorg.conf is specified, but the configuration directory is
retained as default, as is indicated by the output:
(==) Using config directory: ""/etc/X11/xorg.conf.d""

in ~/.xorgxrdp.10.log. If the host has an existing X server running for
the console, and this is not entirely auto-configured, configuration
files from this directory will be picked up and cause the virtual X
server that XRDP launches to attempt to load modules for it, which may
result in errors such as:
(EE) parse_vt_settings: Cannot open /dev/tty0 (Permission denied)

or
(EE) xf86OpenConsole: Cannot open virtual console 2 (Permission denied)

Searching the Internet for these errors will typically lead the user to
a myriad of non-solutions, involving added the user to the tty group, or
editing /etc/X11/Xwrapper.config.
This changeset changes the configuration of the virtual X server so that
it considers only /etc/X11/xrdp as its proper configuration directory,
and pick up the xorg.conf file by default from there.","I found that there is another potential bug lurking: If -config is not specified, it will read the default /etc/X11/xorg.conf, which of course can contain whatever irrelevant to xrdp. There doesn't seem to be some way of saying that you don't want a -config or -configdir (other than setting it to an invalid directory, which leaves an error message); over-specifying by pointing both to the same destination seems to work just as fine.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1606,2020-06-14T00:42:04Z,,2020-08-26T16:33:48Z,OPEN,False,2,0,1,https://github.com/RolKau,Read configuration for only virtual X server,2,[],https://github.com/neutrinolabs/xrdp/pull/1606,https://github.com/RolKau,5,https://github.com/neutrinolabs/xrdp/pull/1606#issuecomment-680990098,"When the X server is launched, only the configuration main file
xrdp/xorg.conf is specified, but the configuration directory is
retained as default, as is indicated by the output:
(==) Using config directory: ""/etc/X11/xorg.conf.d""

in ~/.xorgxrdp.10.log. If the host has an existing X server running for
the console, and this is not entirely auto-configured, configuration
files from this directory will be picked up and cause the virtual X
server that XRDP launches to attempt to load modules for it, which may
result in errors such as:
(EE) parse_vt_settings: Cannot open /dev/tty0 (Permission denied)

or
(EE) xf86OpenConsole: Cannot open virtual console 2 (Permission denied)

Searching the Internet for these errors will typically lead the user to
a myriad of non-solutions, involving added the user to the tty group, or
editing /etc/X11/Xwrapper.config.
This changeset changes the configuration of the virtual X server so that
it considers only /etc/X11/xrdp as its proper configuration directory,
and pick up the xorg.conf file by default from there.","load of nv, nouveau or nvidia can be made without having to specify it in the configuration file. Does the usage of configdir stop these mecanisms

FWIW, if I add myself to the render group (I am on a Debian derivative):
sudo adduser $(whoami) render

then I get these lines in ~/.xorgxrdp.10.log
[598498.241] rdpProbe: found DRMDevice xorg.conf value [/dev/dri/renderD128]
[598498.241] rdpProbe: found DRI3 xorg.conf value [1]
[598498.241] (II) XRDPDEV(0): using default device
...
[598498.241] rdpPreInit: /dev/dri/renderD128 open ok, fd 10
...
[598498.241] rdpPreInit: glamor module load ok
[598498.291] (II) XRDPDEV(0): glamor X acceleration enabled on Radeon RX 580 Series (POLARIS10, DRM 3.35.0, 5.4.0-42-generic, LLVM 10.0.0)
[598498.291] rdpPreInit: glamor init ok

even if both -config and -configdir are now redirected to /etc/X11/xrdp",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1611,2020-06-18T11:24:32Z,2020-06-18T12:36:01Z,2020-06-18T12:36:09Z,MERGED,True,8,5,2,https://github.com/matt335672,Minor manpage fixes,1,[],https://github.com/neutrinolabs/xrdp/pull/1611,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1611,"Minor fixes to man pages
Also addresses #1607","Minor fixes to man pages
Also addresses #1607",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1613,2020-06-19T10:25:57Z,2020-06-22T11:42:57Z,2020-06-26T09:24:22Z,MERGED,True,70,8,5,https://github.com/matt335672,Cppcheck 2.1,2,[],https://github.com/neutrinolabs/xrdp/pull/1613,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1613,"This PR adds support for the recently-released cppcheck 2.1.
There are two commits - one to support cppcheck 2.x and one to address the additional warnings generated by this utility.
First commit
cppcheck 2.1 has an additional dependency on z3 which is apparently highly recommended, but I have no more details on exactly what it does. In any case, this is supported here.
The cppcheck code expects a header file z3_version.h which is not present in the Xenial distro used by travis. A function create_z3_version_h() has been added to the install cppcheck to create this file in the cppcheck external directory if it is not available.
Second commit
Running cppcheck 2.1 on the existing devel branch generates the following output:-
Cppcheck 2.1
Command: /home/mjb/cppcheck.local/2.1/bin/cppcheck --quiet --force --std=c11 --std=c++11 --inline-suppr --enable=warning --error-exitcode=1 .
common/log.c:578:9: warning: Either the condition 'len>1024' is redundant or the array 'buff[1055]' is accessed at index 1055, which is out of bounds. [arrayIndexOutOfBoundsCond]
    buff[len + 30] = '\0';
        ^
common/log.c:569:13: note: Assuming that condition 'len>1024' is not redundant
    if (len > LOG_BUFFER_SIZE)
            ^
common/log.c:578:9: note: Array index out of bounds
    buff[len + 30] = '\0';
        ^
common/os_calls.c:2900:14: error: Memory is allocated but not initialized: text [uninitdata]
    mbstowcs(text, str, len + 1);
             ^
common/pixman-region.c:293:1: error: There is an unknown macro here somewhere. Configuration is required. If PREFIX is a macro then please configure it. [unknownMacro]
PREFIX (_equal) (region_type_t *reg1, region_type_t *reg2)

I believe the warning in common/log.c represents an actual error. If the variable len is greater than LOG_BUFFER_SIZE, a write beyond the end of buff is made. This is a simple fix.
The warning in common/os_calls.c is not entirely correct, but it does highlight that the text buffer is malloc'd but not checked. Adding a check for malloc failure silences the error.
The warning in common/pixman-region.c is generated as cppcheck is unable to find the definition of the PREFIX macro. I've addressed this by adding a conditional definition of the macro in to the file. This is normally defined within pixman-region16.c which includes pixman-region.c","This PR adds support for the recently-released cppcheck 2.1.
There are two commits - one to support cppcheck 2.x and one to address the additional warnings generated by this utility.
First commit
cppcheck 2.1 has an additional dependency on z3 which is apparently highly recommended, but I have no more details on exactly what it does. In any case, this is supported here.
The cppcheck code expects a header file z3_version.h which is not present in the Xenial distro used by travis. A function create_z3_version_h() has been added to the install cppcheck to create this file in the cppcheck external directory if it is not available.
Second commit
Running cppcheck 2.1 on the existing devel branch generates the following output:-
Cppcheck 2.1
Command: /home/mjb/cppcheck.local/2.1/bin/cppcheck --quiet --force --std=c11 --std=c++11 --inline-suppr --enable=warning --error-exitcode=1 .
common/log.c:578:9: warning: Either the condition 'len>1024' is redundant or the array 'buff[1055]' is accessed at index 1055, which is out of bounds. [arrayIndexOutOfBoundsCond]
    buff[len + 30] = '\0';
        ^
common/log.c:569:13: note: Assuming that condition 'len>1024' is not redundant
    if (len > LOG_BUFFER_SIZE)
            ^
common/log.c:578:9: note: Array index out of bounds
    buff[len + 30] = '\0';
        ^
common/os_calls.c:2900:14: error: Memory is allocated but not initialized: text [uninitdata]
    mbstowcs(text, str, len + 1);
             ^
common/pixman-region.c:293:1: error: There is an unknown macro here somewhere. Configuration is required. If PREFIX is a macro then please configure it. [unknownMacro]
PREFIX (_equal) (region_type_t *reg1, region_type_t *reg2)

I believe the warning in common/log.c represents an actual error. If the variable len is greater than LOG_BUFFER_SIZE, a write beyond the end of buff is made. This is a simple fix.
The warning in common/os_calls.c is not entirely correct, but it does highlight that the text buffer is malloc'd but not checked. Adding a check for malloc failure silences the error.
The warning in common/pixman-region.c is generated as cppcheck is unable to find the definition of the PREFIX macro. I've addressed this by adding a conditional definition of the macro in to the file. This is normally defined within pixman-region16.c which includes pixman-region.c",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1619,2020-06-25T08:18:45Z,2020-06-25T08:48:52Z,2020-06-25T08:48:58Z,MERGED,True,14,0,1,https://github.com/metalefty,Create SECURITY.md,1,[],https://github.com/neutrinolabs/xrdp/pull/1619,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1619,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1619,2020-06-25T08:18:45Z,2020-06-25T08:48:52Z,2020-06-25T08:48:58Z,MERGED,True,14,0,1,https://github.com/metalefty,Create SECURITY.md,1,[],https://github.com/neutrinolabs/xrdp/pull/1619,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1619#issuecomment-649383118,,@matt335672 I'd like you to join the xrdp-core mailing list. Let me know your email address if you like. Gitter direct chat would be fine way.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1620,2020-06-25T09:09:01Z,,2020-06-25T12:23:30Z,OPEN,False,19,7,1,https://github.com/metalefty,gh-pages: Add security policy and gitter questions room,1,[],https://github.com/neutrinolabs/xrdp/pull/1620,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1620,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1620,2020-06-25T09:09:01Z,,2020-06-25T12:23:30Z,OPEN,False,19,7,1,https://github.com/metalefty,gh-pages: Add security policy and gitter questions room,1,[],https://github.com/neutrinolabs/xrdp/pull/1620,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/1620#issuecomment-649440070,,"Page looks good.
When I try to follow the Google group links I get this message:-
This group either doesn't exist, or you don't have permission to access it. If you're sure this group exists, contact the owner of the group and ask them to give you access.

Have the groups been set up yet?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1620,2020-06-25T09:09:01Z,,2020-06-25T12:23:30Z,OPEN,False,19,7,1,https://github.com/metalefty,gh-pages: Add security policy and gitter questions room,1,[],https://github.com/neutrinolabs/xrdp/pull/1620,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/1620#issuecomment-649508147,,Indeed. I see xrdp-devel but can't see xrdp-users. I don't remember xrdp-users surely exists.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1623,2020-06-29T11:05:19Z,2020-06-29T13:58:52Z,2020-07-06T09:30:14Z,MERGED,True,10,10,3,https://github.com/matt335672,Fixed CVE-2020-4044 CI errors,1,[],https://github.com/neutrinolabs/xrdp/pull/1623,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1623,"Fix errors identified by Travis CI in PR for above CVE.
In all cases where a tui32 has been replaced by an int, the read value is followed by a bounds check for both less-than or greater-than, so no unsigned overflows have been introduced by this change","Fix errors identified by Travis CI in PR for above CVE.
In all cases where a tui32 has been replaced by an int, the read value is followed by a bounds check for both less-than or greater-than, so no unsigned overflows have been introduced by this change",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1623,2020-06-29T11:05:19Z,2020-06-29T13:58:52Z,2020-07-06T09:30:14Z,MERGED,True,10,10,3,https://github.com/matt335672,Fixed CVE-2020-4044 CI errors,1,[],https://github.com/neutrinolabs/xrdp/pull/1623,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1623#issuecomment-651140725,"Fix errors identified by Travis CI in PR for above CVE.
In all cases where a tui32 has been replaced by an int, the read value is followed by a bounds check for both less-than or greater-than, so no unsigned overflows have been introduced by this change",Thanks!,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1624,2020-06-30T06:04:33Z,2020-06-30T06:21:30Z,2020-06-30T06:21:44Z,MERGED,True,615,268,8,https://github.com/metalefty,Release v0.9.13.1 ,4,[],https://github.com/neutrinolabs/xrdp/pull/1624,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1624,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1633,2020-07-11T20:28:36Z,2020-10-19T05:28:53Z,2020-10-24T14:26:45Z,MERGED,True,1534,1659,40,https://github.com/aquesnel,Unify chanserv logging (2020-07),1,[],https://github.com/neutrinolabs/xrdp/pull/1633,https://github.com/aquesnel,1,https://github.com/neutrinolabs/xrdp/pull/1633,"Merging pull request #792 with the most recent commit of devel.
I've created this pull request since pull request #792 seems to have been abandoned, and I am working on similar debug logging changes. Please let me know if there are still reasons why pull request #792 was not merged, so that I can address them.","Merging pull request #792 with the most recent commit of devel.
I've created this pull request since pull request #792 seems to have been abandoned, and I am working on similar debug logging changes. Please let me know if there are still reasons why pull request #792 was not merged, so that I can address them.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1633,2020-07-11T20:28:36Z,2020-10-19T05:28:53Z,2020-10-24T14:26:45Z,MERGED,True,1534,1659,40,https://github.com/aquesnel,Unify chanserv logging (2020-07),1,[],https://github.com/neutrinolabs/xrdp/pull/1633,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/1633#issuecomment-657522014,"Merging pull request #792 with the most recent commit of devel.
I've created this pull request since pull request #792 seems to have been abandoned, and I am working on similar debug logging changes. Please let me know if there are still reasons why pull request #792 was not merged, so that I can address them.","Great work @aquesnel !
I've got a few comments for you, all related to debugging:-

The log_xxx() macros in some of the files used __func__ . This is a C99 feature (section 6.4.2.2 of the C99 standard). Without it, it's pretty hard to trace some of the debug messages back to their source. I think you can take it that __func__ is available on all current platforms as otherwise the compilers we use would be complaining.
A lot of the LOG_LEVEL_DEBUG messages probably need to be LOG_LEVEL_TRACE, or even removed - running with LOG_LEVEL_DEBUG makes file redirection in particular slow to a crawl.

A relatively simple to run with LOG_LEVEL_DEBUG is:

Create a session as normal.
In a session terminal, pkill xrdp-sesman and sudo umount ~/thinclient_drives
Restart chansrv in an ssh window from the same user with DISPLAY=:<num> CHANSRV_LOG_LEVEL=LOG_LEVEL_DEBUG /path/to/xrdp-chansrv
Disconnect and reconnect the RDP client so that XRDP reconnects to chansrv.

The above isn't perfect but it gives you an idea of what's going on.
How important it is to solve this all right now is probably a question for @metalefty. It's pretty tricky for normal users to run with log level debug anyway.
Hope this is useful.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1633,2020-07-11T20:28:36Z,2020-10-19T05:28:53Z,2020-10-24T14:26:45Z,MERGED,True,1534,1659,40,https://github.com/aquesnel,Unify chanserv logging (2020-07),1,[],https://github.com/neutrinolabs/xrdp/pull/1633,https://github.com/aquesnel,3,https://github.com/neutrinolabs/xrdp/pull/1633#issuecomment-657697571,"Merging pull request #792 with the most recent commit of devel.
I've created this pull request since pull request #792 seems to have been abandoned, and I am working on similar debug logging changes. Please let me know if there are still reasons why pull request #792 was not merged, so that I can address them.","Thanks for the feedback @matt335672 . I'll likely have an update for this pull request based on your feedback next week (2020-07-20).
I'm thinking of adding the function and line numbers to the existing logging macro with something like what is described here:
http://www.decompile.com/cpp/faq/file_and_line_error_string.htm
I'm also thinking of adding the function and line numbers to the logs for all log statements when XRDP_DEBUG=true Is this a good idea?
I'm going to assume that all of the logging that used to go to the console should be at the TRACE level. I'll update the logging statements setting the level based on: DEBUG is for the sys admin to debug xrdp and TRACE is for the devs to debug xrdp. Is there any other guidance for the logging levels you want in the pull request?
next actions

add a new logging macro that will no-op for XRDP_DEBUG=false and takes in the log level
add function name and line numbers to existing log macros if XRDP_DEBUG=true
reduce the log level to TRACE for log statements that are meant for the devs to debug a server
verify logging is correct with the CHANSRV_LOG_LEVEL=LOG_LEVEL_DEBUG environment variable set (possibly set the variable based on config or from sesman logging level)",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1633,2020-07-11T20:28:36Z,2020-10-19T05:28:53Z,2020-10-24T14:26:45Z,MERGED,True,1534,1659,40,https://github.com/aquesnel,Unify chanserv logging (2020-07),1,[],https://github.com/neutrinolabs/xrdp/pull/1633,https://github.com/matt335672,4,https://github.com/neutrinolabs/xrdp/pull/1633#issuecomment-658143561,"Merging pull request #792 with the most recent commit of devel.
I've created this pull request since pull request #792 seems to have been abandoned, and I am working on similar debug logging changes. Please let me know if there are still reasons why pull request #792 was not merged, so that I can address them.","Hi @aquesnel
I think your suggested approach to move existing console output to TRACE level is exactly right. We could spend ages debating exactly what and what not should be moved around here, but I think the pragmatic thing to do is sort out the general case first and get the developer output sorted out later, maybe when we're working on a particular feature.
I don't completely understand what you're proposing with the new logging macro based on XRDP_DEBUG. Can you illustrate with an example?
I've got some other more general comments which you may find useful:-

log_message() is currently very slow. The reason is that the log file is opened with O_SYNC. This is done for good reasons, but it means there's a huge difference between writing to the unbuffered log file and writing to stdout which will be buffered.
I've found myself that when you're working on chansrv, you tend to be working on a particular feature like file redirection or cut/paste. Turning on full logging in these situations is not helpful. It's handy to be able to turn the debugging output up for a particular module, by maybe adding #define XRDP_DEBUG at the top of a file and removing it when you're done. That's a use case that would be useful to cover somehow, although there may well be better mechanisms to do it.
I apologise if you're aware of this already, but there's a bit of a complication with __func__.
It's not a macro (unlike __FILE__ and __LINE__) - it's a static const char * the compiler generates if it's asked to do so. That can restrict your options when using macros - the STRINGIFY example from your link won't work with this variable.

I hope that's useful - let me know if you've any queries.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1633,2020-07-11T20:28:36Z,2020-10-19T05:28:53Z,2020-10-24T14:26:45Z,MERGED,True,1534,1659,40,https://github.com/aquesnel,Unify chanserv logging (2020-07),1,[],https://github.com/neutrinolabs/xrdp/pull/1633,https://github.com/aquesnel,5,https://github.com/neutrinolabs/xrdp/pull/1633#issuecomment-658305458,"Merging pull request #792 with the most recent commit of devel.
I've created this pull request since pull request #792 seems to have been abandoned, and I am working on similar debug logging changes. Please let me know if there are still reasons why pull request #792 was not merged, so that I can address them.","Hi @matt335672,
I'm a Java programmer in my day job and it's been a long time since I've worked in C, so letting me know that __func__ is not like __FILE__ just saved me a lot of debugging, thanks.
My plan for adding function and line number when XRDP_DEBUG=true is to do something like:
#ifdef XRDP_DEBUG
#define LOG(args...) log_message_with_location(__func__, __LINE__, args); 
#else
#define LOG(args...) log_message(args); 
#endif

For logging from a single module, I'd normally think of filtering the logging with a config value (like the log4j logger config) but that's too complex for what's here. I'll brainstorm something and get back to you with a simpler solution. Maybe I'll add a macro like FORCE_LOGGING that can be defined in any file that to have logging enabled, or maybe add some simple config in the existing ini file.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1633,2020-07-11T20:28:36Z,2020-10-19T05:28:53Z,2020-10-24T14:26:45Z,MERGED,True,1534,1659,40,https://github.com/aquesnel,Unify chanserv logging (2020-07),1,[],https://github.com/neutrinolabs/xrdp/pull/1633,https://github.com/matt335672,6,https://github.com/neutrinolabs/xrdp/pull/1633#issuecomment-658723332,"Merging pull request #792 with the most recent commit of devel.
I've created this pull request since pull request #792 seems to have been abandoned, and I am working on similar debug logging changes. Please let me know if there are still reasons why pull request #792 was not merged, so that I can address them.","OK - that's clearer thanks.
You might also find it useful when retro-fitting the TRACE stuff to add a LOG_LOC() macro (or whatever name suits. LOGT()?) which unconditionally calls log_message_with_location(). It might make your job a little easier.
As regards reading the config file, I've just put in a PR #1635 which adds a config module to chansrv. If @metalefty 's happy with it it might make parsing the config file easier to do.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1633,2020-07-11T20:28:36Z,2020-10-19T05:28:53Z,2020-10-24T14:26:45Z,MERGED,True,1534,1659,40,https://github.com/aquesnel,Unify chanserv logging (2020-07),1,[],https://github.com/neutrinolabs/xrdp/pull/1633,https://github.com/aquesnel,7,https://github.com/neutrinolabs/xrdp/pull/1633#issuecomment-660691155,"Merging pull request #792 with the most recent commit of devel.
I've created this pull request since pull request #792 seems to have been abandoned, and I am working on similar debug logging changes. Please let me know if there are still reasons why pull request #792 was not merged, so that I can address them.","Hi @matt335672,
I think I've addressed all of your feedback, please let me know if there is anything that I missed or there is any feedback for my modifications.
Also, I've been having a hard time reproducing the errors that are causing the travisci builds to fail when I build on my dev machine. When I run with following config I get an error in code that I haven't touched, and the travisci builds don't seem to build the common/pixman-region.c file.
./configure --prefix=/home/aquesnel/xrdp-install --enable-strict-locations=yes --with-systemdsystemunitdir=no --enable-xrdpdebug --disable-pam --enable-fuse && make clean && make CFLAGS=""$CFLAGS -Wall -Wwrite-strings -Werror""

...
Making all in common
make[2]: Entering directory '/home/aquesnel/xrdp-dev/xrdp/common'
...
  CC       pixman-region16.lo
pixman-region.c: In function ‘pixman_region_fini’:
pixman-region16.c:62:19: error: implicit declaration of function ‘pixman_region_selfcheck’ [-Werror=implicit-function-declaration]
 #define PREFIX(x) pixman_region##x
                   ^
pixman-region.c:97:14: note: in expansion of macro ‘PREFIX’
         if (!PREFIX (_selfcheck (reg)))                                 \
              ^~~~~~

I've been trying to work around this issue by building only the chansrv with the warnings as errors flags, but it's a pain.
make clean && make && touch sesman/chansrv/chansrv.h && make CFLAGS=""$CFLAGS -Wall -Wwrite-strings -Werror""

Please let me know if there is a better way to reproduce the travisci builds on my dev machine.
progress report

DONE add a LOG_DBG macro that will no-op for XRDP_DEBUG=false and takes in the log level
DONE add function name and line numbers to existing log macros if XRDP_DEBUG=true
DONE migrate all LOGM, and log_xxx in chansrv to use the common LOG or LOG_DBG macros
SKIPPED reduce the log level to TRACE for log statements that are meant for the devs to debug a server

I left the log levels as is since when I went to change the log levels it there was a lot of inconsistency and the log levels looked fine as is


DONE verify logging is correct with the CHANSRV_LOG_LEVEL=LOG_LEVEL_TRACE environment variable set
SKIPPED logging from a single module

adding #define XRDP_DEBUG at the top of a file will enable all of the log macros in that file as suggested by @matt335672 or grep'ing the log file by module's file name will also filter the logging so I'm not planning to add another mechanizm to filter the logs in this pull request",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1633,2020-07-11T20:28:36Z,2020-10-19T05:28:53Z,2020-10-24T14:26:45Z,MERGED,True,1534,1659,40,https://github.com/aquesnel,Unify chanserv logging (2020-07),1,[],https://github.com/neutrinolabs/xrdp/pull/1633,https://github.com/matt335672,8,https://github.com/neutrinolabs/xrdp/pull/1633#issuecomment-660892330,"Merging pull request #792 with the most recent commit of devel.
I've created this pull request since pull request #792 seems to have been abandoned, and I am working on similar debug logging changes. Please let me know if there are still reasons why pull request #792 was not merged, so that I can address them.","Hi @aquesnel,
The compile error you're seeing is being caused by the odd way that pixman-region.c and pixman-region16.c are related and are compiled. I came across it myself a couple of weeks ago when I was getting the cppcheck 2.x stuff sorted out. It's not at all intuitive and probably needs to be fixed.
The way it currently works is:-

pixman-region.c is not a separately compilable file.
pixman-region16.c defines the PREFIX macro amongst other things, and then includes pixman-region.c. This composite file  is what the compiler sees.
The PREFIX macro simply replaces its argument x with the string pixman_regionx

I hope that's clear enough - it wasn't to me for some time!
The error you're seeing is a consequence of XRDP_DEBUG being defined which in turn causes the GOOD macro to be defined. This invokes PREFIX(_selfcheck(reg)) which expands to pixman_region_selfcheck(reg). The warning results as the pixman_region_selfcheck function isn't defined.
A simple fix is to add the function prototype to the affected codepath:-
--- a/common/pixman-region.c
+++ b/common/pixman-region.c
@@ -91,6 +91,8 @@
 
 #ifdef XRDP_DEBUG
 
+pixman_bool_t PREFIX(_selfcheck) (region_type_t *reg);
+
 #define GOOD(reg)                                                       \
     do                                                                  \
     {                                                                   \
The compilation then generates further warnings I'm afraid in the sesman directory but they look pretty trivial.
Replicating Travis CI on a local machine is quite tricky. Another way is register your own github repo with travis-ci.org directly and then any private branches you push to it with get scanned for you.
Hope that's useful.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1633,2020-07-11T20:28:36Z,2020-10-19T05:28:53Z,2020-10-24T14:26:45Z,MERGED,True,1534,1659,40,https://github.com/aquesnel,Unify chanserv logging (2020-07),1,[],https://github.com/neutrinolabs/xrdp/pull/1633,https://github.com/matt335672,9,https://github.com/neutrinolabs/xrdp/pull/1633#issuecomment-660929517,"Merging pull request #792 with the most recent commit of devel.
I've created this pull request since pull request #792 seems to have been abandoned, and I am working on similar debug logging changes. Please let me know if there are still reasons why pull request #792 was not merged, so that I can address them.","I've had a quick run of your changes, and that's certainly fixed the performance issues with setting a DEBUG level.
One comment so far - there's a bit or a name clash between LOG_DBG() and LOG_LEVEL_DEBUG. We've got a long-term goal (as yet unvoiced) to make the code more readable to non-English developers, so we're trying to avoid (and remove) things like double-negatives and unnecessary confusion.
Could I suggest replacing LOG_DBG with something like LOG_DEVEL? I like your idea of splitting debug logging between something a sysadmin might enable and something a developer might enable and I think this makes the intention more explicit.
Thanks.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1633,2020-07-11T20:28:36Z,2020-10-19T05:28:53Z,2020-10-24T14:26:45Z,MERGED,True,1534,1659,40,https://github.com/aquesnel,Unify chanserv logging (2020-07),1,[],https://github.com/neutrinolabs/xrdp/pull/1633,https://github.com/aquesnel,10,https://github.com/neutrinolabs/xrdp/pull/1633#issuecomment-661089753,"Merging pull request #792 with the most recent commit of devel.
I've created this pull request since pull request #792 seems to have been abandoned, and I am working on similar debug logging changes. Please let me know if there are still reasons why pull request #792 was not merged, so that I can address them.",@matt335672 I like the name LOG_DEVEL I'll make that change next.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1633,2020-07-11T20:28:36Z,2020-10-19T05:28:53Z,2020-10-24T14:26:45Z,MERGED,True,1534,1659,40,https://github.com/aquesnel,Unify chanserv logging (2020-07),1,[],https://github.com/neutrinolabs/xrdp/pull/1633,https://github.com/aquesnel,11,https://github.com/neutrinolabs/xrdp/pull/1633#issuecomment-661644403,"Merging pull request #792 with the most recent commit of devel.
I've created this pull request since pull request #792 seems to have been abandoned, and I am working on similar debug logging changes. Please let me know if there are still reasons why pull request #792 was not merged, so that I can address them.","Hi @matt335672,
I've registered my repo with travisci and that helped make a clean build. I didn't realize that I could register my repo for builds too, so thanks for the pointer.
I'm all for making code easier to understand. One of my first team leads had a rule for making code easier to understand that I live by now: ""an acronym or abbreviation is only allowed in the code if it is commonly used by a layman (eg. 'id' is allowed, but  ODSL is disallowed)""
I've implemented the renaming from LOG_DBG to LOG_DEVEL, and I think it's a lot clearer when each macro should be used. When I was madding LOG_DBG in the previous commits I was asking myself ""should this debug log message be LOG_DBG or LEVEL_DEBUG"" and this renaming bypasses the question quite clearly. I've added some documentation to the logging macros to try and make this usage of the macros consistent in the future. This past weekend I'd made a script to make the log renaming the changes for the various log methods, so once this pull request is merged, I plan on making another pull request for unifying the logging in the rest of the code.
Please let me know if there is any other feedback before this pull request is ready to be merged.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1633,2020-07-11T20:28:36Z,2020-10-19T05:28:53Z,2020-10-24T14:26:45Z,MERGED,True,1534,1659,40,https://github.com/aquesnel,Unify chanserv logging (2020-07),1,[],https://github.com/neutrinolabs/xrdp/pull/1633,https://github.com/matt335672,12,https://github.com/neutrinolabs/xrdp/pull/1633#issuecomment-661747999,"Merging pull request #792 with the most recent commit of devel.
I've created this pull request since pull request #792 seems to have been abandoned, and I am working on similar debug logging changes. Please let me know if there are still reasons why pull request #792 was not merged, so that I can address them.","Hi @aquesnel
Thanks again for all your work on this - it's been outstanding for a while,
I've had a quick look at the comments and that helps a lot. One thing you could do is make then Doxygen compatible (if you're familiar with the tool). I'm hoping to move in that direction eventually so we can get some better generated docs. If you're not familiar I wouldn't worry too much as we're going to need to do a bit of a retro-fit anyway to all sorts of things.
@metalefty will need to review this before it's merged, and I know he's not available for a week or two. He'll probably want you to squash your commits, but it's probably worth holding off on that until he's had a look at the history.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1633,2020-07-11T20:28:36Z,2020-10-19T05:28:53Z,2020-10-24T14:26:45Z,MERGED,True,1534,1659,40,https://github.com/aquesnel,Unify chanserv logging (2020-07),1,[],https://github.com/neutrinolabs/xrdp/pull/1633,https://github.com/aquesnel,13,https://github.com/neutrinolabs/xrdp/pull/1633#issuecomment-666902369,"Merging pull request #792 with the most recent commit of devel.
I've created this pull request since pull request #792 seems to have been abandoned, and I am working on similar debug logging changes. Please let me know if there are still reasons why pull request #792 was not merged, so that I can address them.","Hi @matt335672 ,
I've updated the documentation for the LOG and LOG_DEVEL macros so they should work with doxygen.
I've also added additional logging config options:

enable console logging
console logging level
enable pid and thread in in the logs
enable per source file log level overrides

Please let me know if there is any other feedback before this pull request is ready to be merged.
progress report

DONE logging config for logging from a single module/source file
DONE logging documentation in the doxygen format",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1633,2020-07-11T20:28:36Z,2020-10-19T05:28:53Z,2020-10-24T14:26:45Z,MERGED,True,1534,1659,40,https://github.com/aquesnel,Unify chanserv logging (2020-07),1,[],https://github.com/neutrinolabs/xrdp/pull/1633,https://github.com/matt335672,14,https://github.com/neutrinolabs/xrdp/pull/1633#issuecomment-666987464,"Merging pull request #792 with the most recent commit of devel.
I've created this pull request since pull request #792 seems to have been abandoned, and I am working on similar debug logging changes. Please let me know if there are still reasons why pull request #792 was not merged, so that I can address them.","Nothing from me - @metalefty will need to take a look at this before the merge happens.
Thanks again for all your work on this.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1633,2020-07-11T20:28:36Z,2020-10-19T05:28:53Z,2020-10-24T14:26:45Z,MERGED,True,1534,1659,40,https://github.com/aquesnel,Unify chanserv logging (2020-07),1,[],https://github.com/neutrinolabs/xrdp/pull/1633,https://github.com/metalefty,15,https://github.com/neutrinolabs/xrdp/pull/1633#issuecomment-667761385,"Merging pull request #792 with the most recent commit of devel.
I've created this pull request since pull request #792 seems to have been abandoned, and I am working on similar debug logging changes. Please let me know if there are still reasons why pull request #792 was not merged, so that I can address them.","Thanks, I'll have a look within a few days.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1633,2020-07-11T20:28:36Z,2020-10-19T05:28:53Z,2020-10-24T14:26:45Z,MERGED,True,1534,1659,40,https://github.com/aquesnel,Unify chanserv logging (2020-07),1,[],https://github.com/neutrinolabs/xrdp/pull/1633,https://github.com/metalefty,16,https://github.com/neutrinolabs/xrdp/pull/1633#issuecomment-668483375,"Merging pull request #792 with the most recent commit of devel.
I've created this pull request since pull request #792 seems to have been abandoned, and I am working on similar debug logging changes. Please let me know if there are still reasons why pull request #792 was not merged, so that I can address them.","I haven't tested your work yet however it seems a big update. So I'm thinking of merging this after the August release.
0.9.14 will be released this month.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1633,2020-07-11T20:28:36Z,2020-10-19T05:28:53Z,2020-10-24T14:26:45Z,MERGED,True,1534,1659,40,https://github.com/aquesnel,Unify chanserv logging (2020-07),1,[],https://github.com/neutrinolabs/xrdp/pull/1633,https://github.com/aquesnel,17,https://github.com/neutrinolabs/xrdp/pull/1633#issuecomment-668977497,"Merging pull request #792 with the most recent commit of devel.
I've created this pull request since pull request #792 seems to have been abandoned, and I am working on similar debug logging changes. Please let me know if there are still reasons why pull request #792 was not merged, so that I can address them.","Hi @metalefty ,
That sounds reasonable to merge this change after this month's release.
I didn't see any tests in the repo, so I've just been verifying my changes by compiling and manually running the code. Do you have another way to test changes?
When you have time, could you please let me know if these changes are ok, since these changes are different than the logging clean up that you outlined in the Reworking logs wiki page.
If the changes are ok, then I'll go ahead and work on migrating the logs in the rest of the repo to these new unified log macros while the merge is pending.
Also, as you mentioned the change being large, and I'm proposing making more large changes to migrate the other log statements, do you have a preference on how i organize the pull requests? I'm planning on submitting one pull request for the log migration of each directory in the repo. Let know if there is another way that I can make your review of the changes easier.
Thanks",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1633,2020-07-11T20:28:36Z,2020-10-19T05:28:53Z,2020-10-24T14:26:45Z,MERGED,True,1534,1659,40,https://github.com/aquesnel,Unify chanserv logging (2020-07),1,[],https://github.com/neutrinolabs/xrdp/pull/1633,https://github.com/matt335672,18,https://github.com/neutrinolabs/xrdp/pull/1633#issuecomment-687059503,"Merging pull request #792 with the most recent commit of devel.
I've created this pull request since pull request #792 seems to have been abandoned, and I am working on similar debug logging changes. Please let me know if there are still reasons why pull request #792 was not merged, so that I can address them.","@metalefty - I've got another (small) fix identified in #1658 which conflicts with this one and I think this one should go in first.
@aquesnel - could you add a quick summary of where your changes are at odds with the Reworking logs wiki page? We can then agree how to work through the differences.
Thanks both.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1633,2020-07-11T20:28:36Z,2020-10-19T05:28:53Z,2020-10-24T14:26:45Z,MERGED,True,1534,1659,40,https://github.com/aquesnel,Unify chanserv logging (2020-07),1,[],https://github.com/neutrinolabs/xrdp/pull/1633,https://github.com/aquesnel,19,https://github.com/neutrinolabs/xrdp/pull/1633#issuecomment-687133322,"Merging pull request #792 with the most recent commit of devel.
I've created this pull request since pull request #792 seems to have been abandoned, and I am working on similar debug logging changes. Please let me know if there are still reasons why pull request #792 was not merged, so that I can address them.","@matt335672
The difference between this pull request and the Reworking logs page is:

All alias macros are removed and only the log_message(log_level, message) remain
added LOG_DEVEL() which is enabled only for XRDP_DEBUG
log_trace_verbose() is replaced by LOG_DEVEL(LOG_LEVEL_TRACE, ...)
Converting table changed:




before
after




g_writeln()
LOG_DEVEL(LOG_LEVEL_TRACE, ...)


DEBUG()
LOG_DEVEL(LOG_LEVEL_TRACE, ...)


LLOGLN(0, )
LOG_DEVEL(LOG_LEVEL_INFO, ...)


LLOGLN(10, )
LOG_DEVEL(LOG_LEVEL_DEBUG, ...)


LOG_DBG()
LOG_DEVEL()


LOGM()
LOG_DEVEL()


DLOG()
LOG_DEVEL(LOG_LEVEL_TRACE, ...)


log_message()
LOG()


HEXDUMP()
LOG_DEVEL_HEXDUMP()



Also I've added a few logging features which are not conflicting with the Reworking logs page:

Added file name, line number, and function name to all log messages only when XRDP_DEBUG is enabled
Added filtering log messages with log level on a per function or file name basis from config file only when XRDP_DEBUG is enabled
Added console logging enable/disable option in the config file",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1633,2020-07-11T20:28:36Z,2020-10-19T05:28:53Z,2020-10-24T14:26:45Z,MERGED,True,1534,1659,40,https://github.com/aquesnel,Unify chanserv logging (2020-07),1,[],https://github.com/neutrinolabs/xrdp/pull/1633,https://github.com/aquesnel,20,https://github.com/neutrinolabs/xrdp/pull/1633#issuecomment-689563854,"Merging pull request #792 with the most recent commit of devel.
I've created this pull request since pull request #792 seems to have been abandoned, and I am working on similar debug logging changes. Please let me know if there are still reasons why pull request #792 was not merged, so that I can address them.","Hi @metalefty
Now that 0.9.14 has been released, can you please take a look at this pull request and let me know if you have any feedback for this change to get merged?
Thanks",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1633,2020-07-11T20:28:36Z,2020-10-19T05:28:53Z,2020-10-24T14:26:45Z,MERGED,True,1534,1659,40,https://github.com/aquesnel,Unify chanserv logging (2020-07),1,[],https://github.com/neutrinolabs/xrdp/pull/1633,https://github.com/metalefty,21,https://github.com/neutrinolabs/xrdp/pull/1633#issuecomment-689899277,"Merging pull request #792 with the most recent commit of devel.
I've created this pull request since pull request #792 seems to have been abandoned, and I am working on similar debug logging changes. Please let me know if there are still reasons why pull request #792 was not merged, so that I can address them.",Sure. There's some pending pull requests. We'll process one by one. Thank you very much for your great work.,True,{'THUMBS_UP': ['https://github.com/aquesnel']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1633,2020-07-11T20:28:36Z,2020-10-19T05:28:53Z,2020-10-24T14:26:45Z,MERGED,True,1534,1659,40,https://github.com/aquesnel,Unify chanserv logging (2020-07),1,[],https://github.com/neutrinolabs/xrdp/pull/1633,https://github.com/metalefty,22,https://github.com/neutrinolabs/xrdp/pull/1633#issuecomment-693762306,"Merging pull request #792 with the most recent commit of devel.
I've created this pull request since pull request #792 seems to have been abandoned, and I am working on similar debug logging changes. Please let me know if there are still reasons why pull request #792 was not merged, so that I can address them.",@matt335672 anything else from you?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1633,2020-07-11T20:28:36Z,2020-10-19T05:28:53Z,2020-10-24T14:26:45Z,MERGED,True,1534,1659,40,https://github.com/aquesnel,Unify chanserv logging (2020-07),1,[],https://github.com/neutrinolabs/xrdp/pull/1633,https://github.com/matt335672,23,https://github.com/neutrinolabs/xrdp/pull/1633#issuecomment-694039442,"Merging pull request #792 with the most recent commit of devel.
I've created this pull request since pull request #792 seems to have been abandoned, and I am working on similar debug logging changes. Please let me know if there are still reasons why pull request #792 was not merged, so that I can address them.","I'm just running through some additional testing, and I can see I'll have a few minor questions/queries. I'm a bit strapped for time today sadly, so I'll report back tomorrow.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1633,2020-07-11T20:28:36Z,2020-10-19T05:28:53Z,2020-10-24T14:26:45Z,MERGED,True,1534,1659,40,https://github.com/aquesnel,Unify chanserv logging (2020-07),1,[],https://github.com/neutrinolabs/xrdp/pull/1633,https://github.com/matt335672,24,https://github.com/neutrinolabs/xrdp/pull/1633#issuecomment-694774262,"Merging pull request #792 with the most recent commit of devel.
I've created this pull request since pull request #792 seems to have been abandoned, and I am working on similar debug logging changes. Please let me know if there are still reasons why pull request #792 was not merged, so that I can address them.","The only significant comments I have are around the new comment at the top of log.h:-
 * Note: when the build is configured with --disable-xrdpdebug, then 
 *      the source file name and log level can be added to the [Logging_PerLogger]
 *      section of xrdp.ini to change the logging level for logs in that source file.
 * 
 *      For example in xrdp.ini:
 *      ```     
 *      [Logging_PerLogger]
 *      xrdp.c=DEBUG
 *      ```

Two minor comments:-

Shouldn't --disable-xrdpdebug be --enable-xrdpdebug?
The ini file isn't always xrdp.ini

A more major question is that this looks like a useful feature, but it's not going to be available to chansrv, because this doesn't use log_start(). I couldn't see a simple fix for this. We could either accept this as a limitation at this stage, or look for another way to provide the feature, like parsing environ to find suitably formatted environment variables.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1633,2020-07-11T20:28:36Z,2020-10-19T05:28:53Z,2020-10-24T14:26:45Z,MERGED,True,1534,1659,40,https://github.com/aquesnel,Unify chanserv logging (2020-07),1,[],https://github.com/neutrinolabs/xrdp/pull/1633,https://github.com/aquesnel,25,https://github.com/neutrinolabs/xrdp/pull/1633#issuecomment-695687160,"Merging pull request #792 with the most recent commit of devel.
I've created this pull request since pull request #792 seems to have been abandoned, and I am working on similar debug logging changes. Please let me know if there are still reasons why pull request #792 was not merged, so that I can address them.","hi @matt335672
That's a good point that I've added log filtering, but it's not usable for the chansrv. I've fixed this up so that chansrv can initialize the logs just like sesman, from the sesman config.
fixed

fixed logging docs
refactored the logging initialization so that chansrv can initialize the logging config from the sesman.ini config

TODO

fixup the chansrv log init code so that it's backwards compatible with using the CHANSRV_LOG_LEVEL environment variable
update the docs for the CHANSRV_LOG_LEVEL variable and chansrv logging
check if sesman can stop setting the CHANSRV_LOG_LEVEL environment variable",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1633,2020-07-11T20:28:36Z,2020-10-19T05:28:53Z,2020-10-24T14:26:45Z,MERGED,True,1534,1659,40,https://github.com/aquesnel,Unify chanserv logging (2020-07),1,[],https://github.com/neutrinolabs/xrdp/pull/1633,https://github.com/aquesnel,26,https://github.com/neutrinolabs/xrdp/pull/1633#issuecomment-695859631,"Merging pull request #792 with the most recent commit of devel.
I've created this pull request since pull request #792 seems to have been abandoned, and I am working on similar debug logging changes. Please let me know if there are still reasons why pull request #792 was not merged, so that I can address them.",I think I've made the chansrv logging behaviour backwards compatible with the log level environment variable and syslog. I've also added the [Chansrv_Logging] section to the sesman.ini file to enable independent logging configuration of sesman and chansrv.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1633,2020-07-11T20:28:36Z,2020-10-19T05:28:53Z,2020-10-24T14:26:45Z,MERGED,True,1534,1659,40,https://github.com/aquesnel,Unify chanserv logging (2020-07),1,[],https://github.com/neutrinolabs/xrdp/pull/1633,https://github.com/matt335672,27,https://github.com/neutrinolabs/xrdp/pull/1633#issuecomment-696183516,"Merging pull request #792 with the most recent commit of devel.
I've created this pull request since pull request #792 seems to have been abandoned, and I am working on similar debug logging changes. Please let me know if there are still reasons why pull request #792 was not merged, so that I can address them.","That all looks great. Using --enable-xrdpdebug, I was able to just get debug output from a single module of chansrv on the console, which is a use case the old software didn't really support.
A couple of follow-on comments:-

By default, I think we need EnableConsole=false in [Chansrv_Logging], as otherwise chansrv scribbles DEBUG all over the journal in systemd-enabled systems. Or alternatively, set ConsoleLevel=INFO. That might be a better choice.
Since you've now added logging control in to sesman.ini for chansrv, personally I'd be quite happy to remove support for CHANSRV_LOG_LEVEL entirely. The log strings it uses are different, and I can't see a convincing use case for it. Any thoughts @metalefty?

As ever, thanks for all your work on this.
BTW: I'll be away until Friday after today.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1633,2020-07-11T20:28:36Z,2020-10-19T05:28:53Z,2020-10-24T14:26:45Z,MERGED,True,1534,1659,40,https://github.com/aquesnel,Unify chanserv logging (2020-07),1,[],https://github.com/neutrinolabs/xrdp/pull/1633,https://github.com/aquesnel,28,https://github.com/neutrinolabs/xrdp/pull/1633#issuecomment-703264321,"Merging pull request #792 with the most recent commit of devel.
I've created this pull request since pull request #792 seems to have been abandoned, and I am working on similar debug logging changes. Please let me know if there are still reasons why pull request #792 was not merged, so that I can address them.","@matt335672 , sorry it's been a while getting back to your comments.

I agree that the default log level should be INFO, so I've changed the default for all log destinations. I also, disabled the console logging by default since logging to a file and syslog are already enabled by default and it seems unnecessary to log in a third place by default.
I've removed CHANSRV_LOG_LEVEL from the code and documentation. There is the related CHANSRV_LOG_PATH environment variable. I didn't see an easy way to add this to the config file, since this variable is for a directory instead of a file. So I've left the CHANSRV_LOG_PATH in the code.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1633,2020-07-11T20:28:36Z,2020-10-19T05:28:53Z,2020-10-24T14:26:45Z,MERGED,True,1534,1659,40,https://github.com/aquesnel,Unify chanserv logging (2020-07),1,[],https://github.com/neutrinolabs/xrdp/pull/1633,https://github.com/matt335672,29,https://github.com/neutrinolabs/xrdp/pull/1633#issuecomment-703518080,"Merging pull request #792 with the most recent commit of devel.
I've created this pull request since pull request #792 seems to have been abandoned, and I am working on similar debug logging changes. Please let me know if there are still reasons why pull request #792 was not merged, so that I can address them.","Hi @aquesnel
It all looks fine by eye. I'll give it a proper test tomorrow, and then hopefully we can get this merged in the near future.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1633,2020-07-11T20:28:36Z,2020-10-19T05:28:53Z,2020-10-24T14:26:45Z,MERGED,True,1534,1659,40,https://github.com/aquesnel,Unify chanserv logging (2020-07),1,[],https://github.com/neutrinolabs/xrdp/pull/1633,https://github.com/matt335672,30,https://github.com/neutrinolabs/xrdp/pull/1633#issuecomment-704287043,"Merging pull request #792 with the most recent commit of devel.
I've created this pull request since pull request #792 seems to have been abandoned, and I am working on similar debug logging changes. Please let me know if there are still reasons why pull request #792 was not merged, so that I can address them.","All looks good to me, and it's a great step-up from where we are ATM.
@aquesnel - can you squish these 40 commits down to a single one?
@metalefty - I'm done.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1633,2020-07-11T20:28:36Z,2020-10-19T05:28:53Z,2020-10-24T14:26:45Z,MERGED,True,1534,1659,40,https://github.com/aquesnel,Unify chanserv logging (2020-07),1,[],https://github.com/neutrinolabs/xrdp/pull/1633,https://github.com/aquesnel,31,https://github.com/neutrinolabs/xrdp/pull/1633#issuecomment-705296073,"Merging pull request #792 with the most recent commit of devel.
I've created this pull request since pull request #792 seems to have been abandoned, and I am working on similar debug logging changes. Please let me know if there are still reasons why pull request #792 was not merged, so that I can address them.","Hi @matt335672 and @metalefty ,
I've squashed the commits on top of devel.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1633,2020-07-11T20:28:36Z,2020-10-19T05:28:53Z,2020-10-24T14:26:45Z,MERGED,True,1534,1659,40,https://github.com/aquesnel,Unify chanserv logging (2020-07),1,[],https://github.com/neutrinolabs/xrdp/pull/1633,https://github.com/metalefty,32,https://github.com/neutrinolabs/xrdp/pull/1633#issuecomment-708837260,"Merging pull request #792 with the most recent commit of devel.
I've created this pull request since pull request #792 seems to have been abandoned, and I am working on similar debug logging changes. Please let me know if there are still reasons why pull request #792 was not merged, so that I can address them.","Hi, I'm been away for a while. I'll do a quick test today.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1633,2020-07-11T20:28:36Z,2020-10-19T05:28:53Z,2020-10-24T14:26:45Z,MERGED,True,1534,1659,40,https://github.com/aquesnel,Unify chanserv logging (2020-07),1,[],https://github.com/neutrinolabs/xrdp/pull/1633,https://github.com/metalefty,33,https://github.com/neutrinolabs/xrdp/pull/1633#issuecomment-708895987,"Merging pull request #792 with the most recent commit of devel.
I've created this pull request since pull request #792 seems to have been abandoned, and I am working on similar debug logging changes. Please let me know if there are still reasons why pull request #792 was not merged, so that I can address them.","It breaks login screen.

xrdp_wm.c also needs to be cared.",True,{'THUMBS_UP': ['https://github.com/matt335672']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1633,2020-07-11T20:28:36Z,2020-10-19T05:28:53Z,2020-10-24T14:26:45Z,MERGED,True,1534,1659,40,https://github.com/aquesnel,Unify chanserv logging (2020-07),1,[],https://github.com/neutrinolabs/xrdp/pull/1633,https://github.com/aquesnel,34,https://github.com/neutrinolabs/xrdp/pull/1633#issuecomment-709450071,"Merging pull request #792 with the most recent commit of devel.
I've created this pull request since pull request #792 seems to have been abandoned, and I am working on similar debug logging changes. Please let me know if there are still reasons why pull request #792 was not merged, so that I can address them.","Sorry, I've been testing with auto login enabled, I'll make sure to test with the login screen.
I should have time this weekend to fix this.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1633,2020-07-11T20:28:36Z,2020-10-19T05:28:53Z,2020-10-24T14:26:45Z,MERGED,True,1534,1659,40,https://github.com/aquesnel,Unify chanserv logging (2020-07),1,[],https://github.com/neutrinolabs/xrdp/pull/1633,https://github.com/aquesnel,35,https://github.com/neutrinolabs/xrdp/pull/1633#issuecomment-711559501,"Merging pull request #792 with the most recent commit of devel.
I've created this pull request since pull request #792 seems to have been abandoned, and I am working on similar debug logging changes. Please let me know if there are still reasons why pull request #792 was not merged, so that I can address them.","Hi @metalefty ,
I've fixed the login screen issue and I've squashed the fix and rebased on top of devel. Please let me know if there are any other issues that I need to fix before merging.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1633,2020-07-11T20:28:36Z,2020-10-19T05:28:53Z,2020-10-24T14:26:45Z,MERGED,True,1534,1659,40,https://github.com/aquesnel,Unify chanserv logging (2020-07),1,[],https://github.com/neutrinolabs/xrdp/pull/1633,https://github.com/aquesnel,36,https://github.com/neutrinolabs/xrdp/pull/1633#issuecomment-711588067,"Merging pull request #792 with the most recent commit of devel.
I've created this pull request since pull request #792 seems to have been abandoned, and I am working on similar debug logging changes. Please let me know if there are still reasons why pull request #792 was not merged, so that I can address them.","Hi @metalefty ,
Sorry, I missed your comment about the _ in the config variable name when I submitted the previous rebase. I've updated the code to follow the camel case naming convention as you suggested and resubmitted the squash and rebased on top of devel.
Please let me know if there are any other issues that I need to fix before merging.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1633,2020-07-11T20:28:36Z,2020-10-19T05:28:53Z,2020-10-24T14:26:45Z,MERGED,True,1534,1659,40,https://github.com/aquesnel,Unify chanserv logging (2020-07),1,[],https://github.com/neutrinolabs/xrdp/pull/1633,https://github.com/metalefty,37,https://github.com/neutrinolabs/xrdp/pull/1633#issuecomment-711598478,"Merging pull request #792 with the most recent commit of devel.
I've created this pull request since pull request #792 seems to have been abandoned, and I am working on similar debug logging changes. Please let me know if there are still reasons why pull request #792 was not merged, so that I can address them.","LGTM. Let's merge it. If we found some additinal things needs to be fixed, it can be done later.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1633,2020-07-11T20:28:36Z,2020-10-19T05:28:53Z,2020-10-24T14:26:45Z,MERGED,True,1534,1659,40,https://github.com/aquesnel,Unify chanserv logging (2020-07),1,[],https://github.com/neutrinolabs/xrdp/pull/1633,https://github.com/metalefty,38,https://github.com/neutrinolabs/xrdp/pull/1633#issuecomment-711600197,"Merging pull request #792 with the most recent commit of devel.
I've created this pull request since pull request #792 seems to have been abandoned, and I am working on similar debug logging changes. Please let me know if there are still reasons why pull request #792 was not merged, so that I can address them.",@aquesnel Thank you very much for your work and spending a lot of time on xrdp!,True,{'THUMBS_UP': ['https://github.com/matt335672']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1635,2020-07-14T12:56:34Z,2020-09-09T08:59:44Z,2020-09-09T08:59:51Z,MERGED,True,453,109,8,https://github.com/matt335672,chansrv improved config support,1,[],https://github.com/neutrinolabs/xrdp/pull/1635,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1635,"This pull request:-

Creates a config module for chansrv similar to the one in sesman.
adds an optional -c (or --config) option to chansrv to allow the path to sesman.ini to be specified.
removes the CHANSRV_RESTRICT_OUTBOUND_CLIPBOARD environment variable used between sesman and chansrv to pass RestrictOutboundClipboard over - it's now read directly from the config file.

This is one of three PRs to implement #1588. This one does not depend on the other two and has two other uses:-


It could be easily expanded to read chansrv logging parameters from sesman.ini (See #1633)


Removing CHANSRV_RESTRICT_OUTBOUND_CLIPBOARD  allows for a manual chansrv restart process to be implemented as follows:-

unmount ~/thinclient_drives if mounted.
Run chansrv directly from the command line in the same session
Disconnect and reconnect so xrdp picks up the new chansrv.

At present this is only likely to be of use to developers as it allows for chansrv to be run under a debugger or valgrind, etc.


I've also tidied up the manpage and made some minor changes to the cleanup code in chansrv.c","This pull request:-

Creates a config module for chansrv similar to the one in sesman.
adds an optional -c (or --config) option to chansrv to allow the path to sesman.ini to be specified.
removes the CHANSRV_RESTRICT_OUTBOUND_CLIPBOARD environment variable used between sesman and chansrv to pass RestrictOutboundClipboard over - it's now read directly from the config file.

This is one of three PRs to implement #1588. This one does not depend on the other two and has two other uses:-


It could be easily expanded to read chansrv logging parameters from sesman.ini (See #1633)


Removing CHANSRV_RESTRICT_OUTBOUND_CLIPBOARD  allows for a manual chansrv restart process to be implemented as follows:-

unmount ~/thinclient_drives if mounted.
Run chansrv directly from the command line in the same session
Disconnect and reconnect so xrdp picks up the new chansrv.

At present this is only likely to be of use to developers as it allows for chansrv to be run under a debugger or valgrind, etc.


I've also tidied up the manpage and made some minor changes to the cleanup code in chansrv.c",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1635,2020-07-14T12:56:34Z,2020-09-09T08:59:44Z,2020-09-09T08:59:51Z,MERGED,True,453,109,8,https://github.com/matt335672,chansrv improved config support,1,[],https://github.com/neutrinolabs/xrdp/pull/1635,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1635#issuecomment-684111653,"This pull request:-

Creates a config module for chansrv similar to the one in sesman.
adds an optional -c (or --config) option to chansrv to allow the path to sesman.ini to be specified.
removes the CHANSRV_RESTRICT_OUTBOUND_CLIPBOARD environment variable used between sesman and chansrv to pass RestrictOutboundClipboard over - it's now read directly from the config file.

This is one of three PRs to implement #1588. This one does not depend on the other two and has two other uses:-


It could be easily expanded to read chansrv logging parameters from sesman.ini (See #1633)


Removing CHANSRV_RESTRICT_OUTBOUND_CLIPBOARD  allows for a manual chansrv restart process to be implemented as follows:-

unmount ~/thinclient_drives if mounted.
Run chansrv directly from the command line in the same session
Disconnect and reconnect so xrdp picks up the new chansrv.

At present this is only likely to be of use to developers as it allows for chansrv to be run under a debugger or valgrind, etc.


I've also tidied up the manpage and made some minor changes to the cleanup code in chansrv.c","Overall, I agree with this but I'm not sure giving sesman.ini for chansrv configuration is the best way.
Functionally, it has no problem but a little bit misleading.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1635,2020-07-14T12:56:34Z,2020-09-09T08:59:44Z,2020-09-09T08:59:51Z,MERGED,True,453,109,8,https://github.com/matt335672,chansrv improved config support,1,[],https://github.com/neutrinolabs/xrdp/pull/1635,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/1635#issuecomment-684863512,"This pull request:-

Creates a config module for chansrv similar to the one in sesman.
adds an optional -c (or --config) option to chansrv to allow the path to sesman.ini to be specified.
removes the CHANSRV_RESTRICT_OUTBOUND_CLIPBOARD environment variable used between sesman and chansrv to pass RestrictOutboundClipboard over - it's now read directly from the config file.

This is one of three PRs to implement #1588. This one does not depend on the other two and has two other uses:-


It could be easily expanded to read chansrv logging parameters from sesman.ini (See #1633)


Removing CHANSRV_RESTRICT_OUTBOUND_CLIPBOARD  allows for a manual chansrv restart process to be implemented as follows:-

unmount ~/thinclient_drives if mounted.
Run chansrv directly from the command line in the same session
Disconnect and reconnect so xrdp picks up the new chansrv.

At present this is only likely to be of use to developers as it allows for chansrv to be run under a debugger or valgrind, etc.


I've also tidied up the manpage and made some minor changes to the cleanup code in chansrv.c","removes the CHANSRV_RESTRICT_OUTBOUND_CLIPBOARD environment variable used between sesman and chansrv to pass RestrictOutboundClipboard over - it's now read directly from the config file.


This sounds pretty good but there is concern.
System administrator wants to RestrictOutboundClipboard not to bringing out any data from remote xrdp session to local client.  Some corporate users have such requirements.  Usually, /etc/xrdp/sesman.ini is  editable only by root user. As a result, users cannot turn off RestrictOutboundClipboard by themselves.
I think users can turn off RestrictOutboundClipboard switch, right?
cp /etc/xrdp/sesman.ini $HOME/sesman.ini
sed -i .bak -e 's/RestrictOutboundClipboard=true/RestrictOutboundClipboard=false/' sesman.ini
pkill xrdp-chansrv
xrdp-chansrv --config $HOME/sesman.ini

In short, RestrictOutboundClipboard must not be overridden by users other than system administrator.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1635,2020-07-14T12:56:34Z,2020-09-09T08:59:44Z,2020-09-09T08:59:51Z,MERGED,True,453,109,8,https://github.com/matt335672,chansrv improved config support,1,[],https://github.com/neutrinolabs/xrdp/pull/1635,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/1635#issuecomment-684866442,"This pull request:-

Creates a config module for chansrv similar to the one in sesman.
adds an optional -c (or --config) option to chansrv to allow the path to sesman.ini to be specified.
removes the CHANSRV_RESTRICT_OUTBOUND_CLIPBOARD environment variable used between sesman and chansrv to pass RestrictOutboundClipboard over - it's now read directly from the config file.

This is one of three PRs to implement #1588. This one does not depend on the other two and has two other uses:-


It could be easily expanded to read chansrv logging parameters from sesman.ini (See #1633)


Removing CHANSRV_RESTRICT_OUTBOUND_CLIPBOARD  allows for a manual chansrv restart process to be implemented as follows:-

unmount ~/thinclient_drives if mounted.
Run chansrv directly from the command line in the same session
Disconnect and reconnect so xrdp picks up the new chansrv.

At present this is only likely to be of use to developers as it allows for chansrv to be run under a debugger or valgrind, etc.


I've also tidied up the manpage and made some minor changes to the cleanup code in chansrv.c",I've just noticed environment variable is modifiable by user.  So passing via CHANSRV_RESTRICT_OUTBOUND_CLIPBOARD is a bad idea. It should be read directly from the config file. It is my design mistake.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1635,2020-07-14T12:56:34Z,2020-09-09T08:59:44Z,2020-09-09T08:59:51Z,MERGED,True,453,109,8,https://github.com/matt335672,chansrv improved config support,1,[],https://github.com/neutrinolabs/xrdp/pull/1635,https://github.com/matt335672,5,https://github.com/neutrinolabs/xrdp/pull/1635#issuecomment-685414341,"This pull request:-

Creates a config module for chansrv similar to the one in sesman.
adds an optional -c (or --config) option to chansrv to allow the path to sesman.ini to be specified.
removes the CHANSRV_RESTRICT_OUTBOUND_CLIPBOARD environment variable used between sesman and chansrv to pass RestrictOutboundClipboard over - it's now read directly from the config file.

This is one of three PRs to implement #1588. This one does not depend on the other two and has two other uses:-


It could be easily expanded to read chansrv logging parameters from sesman.ini (See #1633)


Removing CHANSRV_RESTRICT_OUTBOUND_CLIPBOARD  allows for a manual chansrv restart process to be implemented as follows:-

unmount ~/thinclient_drives if mounted.
Run chansrv directly from the command line in the same session
Disconnect and reconnect so xrdp picks up the new chansrv.

At present this is only likely to be of use to developers as it allows for chansrv to be run under a debugger or valgrind, etc.


I've also tidied up the manpage and made some minor changes to the cleanup code in chansrv.c",They're both good points. Leave it with me and I'll see what I can do.,True,{'THUMBS_UP': ['https://github.com/metalefty']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1635,2020-07-14T12:56:34Z,2020-09-09T08:59:44Z,2020-09-09T08:59:51Z,MERGED,True,453,109,8,https://github.com/matt335672,chansrv improved config support,1,[],https://github.com/neutrinolabs/xrdp/pull/1635,https://github.com/matt335672,6,https://github.com/neutrinolabs/xrdp/pull/1635#issuecomment-688253169,"This pull request:-

Creates a config module for chansrv similar to the one in sesman.
adds an optional -c (or --config) option to chansrv to allow the path to sesman.ini to be specified.
removes the CHANSRV_RESTRICT_OUTBOUND_CLIPBOARD environment variable used between sesman and chansrv to pass RestrictOutboundClipboard over - it's now read directly from the config file.

This is one of three PRs to implement #1588. This one does not depend on the other two and has two other uses:-


It could be easily expanded to read chansrv logging parameters from sesman.ini (See #1633)


Removing CHANSRV_RESTRICT_OUTBOUND_CLIPBOARD  allows for a manual chansrv restart process to be implemented as follows:-

unmount ~/thinclient_drives if mounted.
Run chansrv directly from the command line in the same session
Disconnect and reconnect so xrdp picks up the new chansrv.

At present this is only likely to be of use to developers as it allows for chansrv to be run under a debugger or valgrind, etc.


I've also tidied up the manpage and made some minor changes to the cleanup code in chansrv.c","Having had a think it seems the simplest option is simply to remove the ability for the user to easily change the sesman.ini file in use.
There's not a lot of config used by chansrv, and the things the user might want to override (logging levels) can be done by environment variable anyway.
So now this PR simply tidies up the chansrv config code, and removes the dependency on the CHANSRV_RESTRICT_OUTBOUND_CLIPBOARD variable.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1635,2020-07-14T12:56:34Z,2020-09-09T08:59:44Z,2020-09-09T08:59:51Z,MERGED,True,453,109,8,https://github.com/matt335672,chansrv improved config support,1,[],https://github.com/neutrinolabs/xrdp/pull/1635,https://github.com/metalefty,7,https://github.com/neutrinolabs/xrdp/pull/1635#issuecomment-688617599,"This pull request:-

Creates a config module for chansrv similar to the one in sesman.
adds an optional -c (or --config) option to chansrv to allow the path to sesman.ini to be specified.
removes the CHANSRV_RESTRICT_OUTBOUND_CLIPBOARD environment variable used between sesman and chansrv to pass RestrictOutboundClipboard over - it's now read directly from the config file.

This is one of three PRs to implement #1588. This one does not depend on the other two and has two other uses:-


It could be easily expanded to read chansrv logging parameters from sesman.ini (See #1633)


Removing CHANSRV_RESTRICT_OUTBOUND_CLIPBOARD  allows for a manual chansrv restart process to be implemented as follows:-

unmount ~/thinclient_drives if mounted.
Run chansrv directly from the command line in the same session
Disconnect and reconnect so xrdp picks up the new chansrv.

At present this is only likely to be of use to developers as it allows for chansrv to be run under a debugger or valgrind, etc.


I've also tidied up the manpage and made some minor changes to the cleanup code in chansrv.c","Overall, LGTM.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1635,2020-07-14T12:56:34Z,2020-09-09T08:59:44Z,2020-09-09T08:59:51Z,MERGED,True,453,109,8,https://github.com/matt335672,chansrv improved config support,1,[],https://github.com/neutrinolabs/xrdp/pull/1635,https://github.com/matt335672,8,https://github.com/neutrinolabs/xrdp/pull/1635#issuecomment-688954010,"This pull request:-

Creates a config module for chansrv similar to the one in sesman.
adds an optional -c (or --config) option to chansrv to allow the path to sesman.ini to be specified.
removes the CHANSRV_RESTRICT_OUTBOUND_CLIPBOARD environment variable used between sesman and chansrv to pass RestrictOutboundClipboard over - it's now read directly from the config file.

This is one of three PRs to implement #1588. This one does not depend on the other two and has two other uses:-


It could be easily expanded to read chansrv logging parameters from sesman.ini (See #1633)


Removing CHANSRV_RESTRICT_OUTBOUND_CLIPBOARD  allows for a manual chansrv restart process to be implemented as follows:-

unmount ~/thinclient_drives if mounted.
Run chansrv directly from the command line in the same session
Disconnect and reconnect so xrdp picks up the new chansrv.

At present this is only likely to be of use to developers as it allows for chansrv to be run under a debugger or valgrind, etc.


I've also tidied up the manpage and made some minor changes to the cleanup code in chansrv.c","Thanks. I'll look at squashing and merging.
After your comment about the logging level I've had a look at the code. It seems the standard logging code in common/log.c does indeed accept numbers, but chansrv doesn't at the moment. For now I'll just update the manpage to match what the code does. I don't want to make a lot of changes here until we've merged #1633.
I'll also make some changes to #1650 to make it clear that if the user wants to use a different config for xrdp-sesman, they will still need to provide a basic sesman.ini for xrdp and xrdp-chansrv.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1638,2020-07-22T03:57:13Z,2020-07-22T04:05:22Z,2020-07-25T15:35:58Z,CLOSED,False,27,8,7,https://github.com/aquesnel,Fixing the build with --enable-xrdpdebug and CFLAGS=-Werror -Wall,1,[],https://github.com/neutrinolabs/xrdp/pull/1638,https://github.com/aquesnel,1,https://github.com/neutrinolabs/xrdp/pull/1638,"This pull request fixes the build errors that occur when xrdp is built with --enable-xrdpdebug and CFLAGS=-Werror -Wall. This pull request also configures the build to use -Werror -Wall as the default CFLAGS for make when run on a veleopper's machine or on the build servers.
This issue was debugged by @matt335672 in #1633 (comment) and this change should prevent this issue from affecting other developers.","This pull request fixes the build errors that occur when xrdp is built with --enable-xrdpdebug and CFLAGS=-Werror -Wall. This pull request also configures the build to use -Werror -Wall as the default CFLAGS for make when run on a veleopper's machine or on the build servers.
This issue was debugged by @matt335672 in #1633 (comment) and this change should prevent this issue from affecting other developers.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1638,2020-07-22T03:57:13Z,2020-07-22T04:05:22Z,2020-07-25T15:35:58Z,CLOSED,False,27,8,7,https://github.com/aquesnel,Fixing the build with --enable-xrdpdebug and CFLAGS=-Werror -Wall,1,[],https://github.com/neutrinolabs/xrdp/pull/1638,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1638#issuecomment-662267474,"This pull request fixes the build errors that occur when xrdp is built with --enable-xrdpdebug and CFLAGS=-Werror -Wall. This pull request also configures the build to use -Werror -Wall as the default CFLAGS for make when run on a veleopper's machine or on the build servers.
This issue was debugged by @matt335672 in #1633 (comment) and this change should prevent this issue from affecting other developers.",Why closed?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1638,2020-07-22T03:57:13Z,2020-07-22T04:05:22Z,2020-07-25T15:35:58Z,CLOSED,False,27,8,7,https://github.com/aquesnel,Fixing the build with --enable-xrdpdebug and CFLAGS=-Werror -Wall,1,[],https://github.com/neutrinolabs/xrdp/pull/1638,https://github.com/aquesnel,3,https://github.com/neutrinolabs/xrdp/pull/1638#issuecomment-663865203,"This pull request fixes the build errors that occur when xrdp is built with --enable-xrdpdebug and CFLAGS=-Werror -Wall. This pull request also configures the build to use -Werror -Wall as the default CFLAGS for make when run on a veleopper's machine or on the build servers.
This issue was debugged by @matt335672 in #1633 (comment) and this change should prevent this issue from affecting other developers.","I had made this pull request too eagerly before I saw that the changes broke the i386 build. I didn't think this pull request was worth looking at yet, so I closed the pull requst. I'll make a new pull request once I figure out how I broke the bulid and I fix it.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1638,2020-07-22T03:57:13Z,2020-07-22T04:05:22Z,2020-07-25T15:35:58Z,CLOSED,False,27,8,7,https://github.com/aquesnel,Fixing the build with --enable-xrdpdebug and CFLAGS=-Werror -Wall,1,[],https://github.com/neutrinolabs/xrdp/pull/1638,https://github.com/aquesnel,4,https://github.com/neutrinolabs/xrdp/pull/1638#issuecomment-663868633,"This pull request fixes the build errors that occur when xrdp is built with --enable-xrdpdebug and CFLAGS=-Werror -Wall. This pull request also configures the build to use -Werror -Wall as the default CFLAGS for make when run on a veleopper's machine or on the build servers.
This issue was debugged by @matt335672 in #1633 (comment) and this change should prevent this issue from affecting other developers.",this pull request is a broken duplicate of pull request #1640,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1640,2020-07-25T15:34:33Z,2020-08-11T05:01:53Z,2020-09-11T02:38:11Z,MERGED,True,36,17,7,https://github.com/aquesnel,Fixing the build with --enable-xrdpdebug and CFLAGS=-Werror -Wall,1,[],https://github.com/neutrinolabs/xrdp/pull/1640,https://github.com/aquesnel,1,https://github.com/neutrinolabs/xrdp/pull/1640,"This pull request fixes the build errors that occur when xrdp is built with --enable-xrdpdebug and CFLAGS=-Werror -Wall. This pull request also configures the build to use -Werror -Wall as the default CFLAGS for make when run on a developer's machine or on the build servers.
This issue was debugged by @matt335672 in #1633 (comment) and this change should prevent this issue from affecting other developers.","This pull request fixes the build errors that occur when xrdp is built with --enable-xrdpdebug and CFLAGS=-Werror -Wall. This pull request also configures the build to use -Werror -Wall as the default CFLAGS for make when run on a developer's machine or on the build servers.
This issue was debugged by @matt335672 in #1633 (comment) and this change should prevent this issue from affecting other developers.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1645,2020-08-01T04:37:14Z,2020-08-07T12:58:27Z,2020-09-11T02:37:55Z,MERGED,True,22,0,1,https://github.com/aquesnel,Adding an FAQ entry for configuring Travis CI and Cirrus CI for a fork,1,[],https://github.com/neutrinolabs/xrdp/pull/1645,https://github.com/aquesnel,1,https://github.com/neutrinolabs/xrdp/pull/1645,This documentation is to help new contributors to the project configure continuous integration to test a change before making a pull request.,This documentation is to help new contributors to the project configure continuous integration to test a change before making a pull request.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1647,2020-08-03T01:39:46Z,2020-08-03T04:49:17Z,2020-08-03T04:49:34Z,MERGED,True,3,1,1,https://github.com/metalefty,sesman.ini: Update Xorg path for CentOS 8,1,[],https://github.com/neutrinolabs/xrdp/pull/1647,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1647,Closes #1646.,Closes #1646.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1650,2020-08-10T12:45:55Z,2020-12-09T10:31:12Z,2020-12-09T10:31:25Z,MERGED,True,466,297,7,https://github.com/matt335672,Add -c/--config option to sesman,1,[],https://github.com/neutrinolabs/xrdp/pull/1650,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1650,"This PR is the second of three required to implement #1588 (separate config file for xrdp and sesman).
The first PR is #1635, and this PR depends on that one for correct chansrv operation. The last PR (TBD) is independent of the first two and concerns xrdp only.
This PR makes the following changes:-
sesman

command-line argument parser added which adds common functionality with XRDP (--help and --version arguments)
Simplification of config.c interface. The struct config_sesman is allocated as part of the read, and unnecessary global functions are removed.
Passes --config on to chansrv when it is started (hence dependency on #1635) (8/9/2020 - no longer needed)
Manpage updated

sesrun

--config argument added here too for completeness.
Manpage updated (and corrected)","This PR is the second of three required to implement #1588 (separate config file for xrdp and sesman).
The first PR is #1635, and this PR depends on that one for correct chansrv operation. The last PR (TBD) is independent of the first two and concerns xrdp only.
This PR makes the following changes:-
sesman

command-line argument parser added which adds common functionality with XRDP (--help and --version arguments)
Simplification of config.c interface. The struct config_sesman is allocated as part of the read, and unnecessary global functions are removed.
Passes --config on to chansrv when it is started (hence dependency on #1635) (8/9/2020 - no longer needed)
Manpage updated

sesrun

--config argument added here too for completeness.
Manpage updated (and corrected)",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1651,2020-08-11T11:51:18Z,2020-10-16T10:31:56Z,2020-10-16T10:32:07Z,MERGED,True,172,122,12,https://github.com/matt335672,Added -c /--config option to xrdp,1,[],https://github.com/neutrinolabs/xrdp/pull/1651,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1651,"This is the third and last PR in a series to implement #1588  (separate config file for xrdp and sesman).
The other two are for sesman (#1650) and chansrv (#1635), and are largely independent of this PR. This PR affects xrdp and libxrdp.
This PR makes the following changes:-
common/log.c
Opened the .ini file read-only with g_file_open_ex rather than g_file_open. Without this change, the logging code creates an empty ini file if one wasn't present, which is probably not what is required!
xrdp.c

A few methods were made static where not required to be global
File run through astyle which found a few issues.
A few hard-coded string value sizes have been removed.
local variable no_daemon replaced with daemon to avoid double-negatives (i.e. !no_daemon)

xrdp (other files)

Manpage updated
Other changes made to remove hard-coded references to the location of xrdp.ini

libxrdp

Extra parameter added to libxrdp_init() which allows the location of xrdp.ini to be specified for the session. NULL can be specified for this parameter to implement the existing behaviour with the default file.","This is the third and last PR in a series to implement #1588  (separate config file for xrdp and sesman).
The other two are for sesman (#1650) and chansrv (#1635), and are largely independent of this PR. This PR affects xrdp and libxrdp.
This PR makes the following changes:-
common/log.c
Opened the .ini file read-only with g_file_open_ex rather than g_file_open. Without this change, the logging code creates an empty ini file if one wasn't present, which is probably not what is required!
xrdp.c

A few methods were made static where not required to be global
File run through astyle which found a few issues.
A few hard-coded string value sizes have been removed.
local variable no_daemon replaced with daemon to avoid double-negatives (i.e. !no_daemon)

xrdp (other files)

Manpage updated
Other changes made to remove hard-coded references to the location of xrdp.ini

libxrdp

Extra parameter added to libxrdp_init() which allows the location of xrdp.ini to be specified for the session. NULL can be specified for this parameter to implement the existing behaviour with the default file.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1651,2020-08-11T11:51:18Z,2020-10-16T10:31:56Z,2020-10-16T10:32:07Z,MERGED,True,172,122,12,https://github.com/matt335672,Added -c /--config option to xrdp,1,[],https://github.com/neutrinolabs/xrdp/pull/1651,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1651#issuecomment-708099659,"This is the third and last PR in a series to implement #1588  (separate config file for xrdp and sesman).
The other two are for sesman (#1650) and chansrv (#1635), and are largely independent of this PR. This PR affects xrdp and libxrdp.
This PR makes the following changes:-
common/log.c
Opened the .ini file read-only with g_file_open_ex rather than g_file_open. Without this change, the logging code creates an empty ini file if one wasn't present, which is probably not what is required!
xrdp.c

A few methods were made static where not required to be global
File run through astyle which found a few issues.
A few hard-coded string value sizes have been removed.
local variable no_daemon replaced with daemon to avoid double-negatives (i.e. !no_daemon)

xrdp (other files)

Manpage updated
Other changes made to remove hard-coded references to the location of xrdp.ini

libxrdp

Extra parameter added to libxrdp_init() which allows the location of xrdp.ini to be specified for the session. NULL can be specified for this parameter to implement the existing behaviour with the default file.","@matt335672  Hi, it's been a long time.  Overall, it looks good to me. Let's ship it if you're sure it works.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1651,2020-08-11T11:51:18Z,2020-10-16T10:31:56Z,2020-10-16T10:32:07Z,MERGED,True,172,122,12,https://github.com/matt335672,Added -c /--config option to xrdp,1,[],https://github.com/neutrinolabs/xrdp/pull/1651,https://github.com/matt335672,3,https://github.com/neutrinolabs/xrdp/pull/1651#issuecomment-708306972,"This is the third and last PR in a series to implement #1588  (separate config file for xrdp and sesman).
The other two are for sesman (#1650) and chansrv (#1635), and are largely independent of this PR. This PR affects xrdp and libxrdp.
This PR makes the following changes:-
common/log.c
Opened the .ini file read-only with g_file_open_ex rather than g_file_open. Without this change, the logging code creates an empty ini file if one wasn't present, which is probably not what is required!
xrdp.c

A few methods were made static where not required to be global
File run through astyle which found a few issues.
A few hard-coded string value sizes have been removed.
local variable no_daemon replaced with daemon to avoid double-negatives (i.e. !no_daemon)

xrdp (other files)

Manpage updated
Other changes made to remove hard-coded references to the location of xrdp.ini

libxrdp

Extra parameter added to libxrdp_init() which allows the location of xrdp.ini to be specified for the session. NULL can be specified for this parameter to implement the existing behaviour with the default file.","Hi @metalefty - good to hear from you.
Yes, I'm happy with it - I just wanted you to check it before a merge. I'll do that then.
The PR I'd really like to see merged in is #1633. I'm happy with it, but until it's merged it's acting as a bit of a blocker. I've got other changes to chansrv which need to be submitted but I don't want to do so until the logging is stable. I'd be grateful if you could take a look at it when you're able.
Thanks,",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1651,2020-08-11T11:51:18Z,2020-10-16T10:31:56Z,2020-10-16T10:32:07Z,MERGED,True,172,122,12,https://github.com/matt335672,Added -c /--config option to xrdp,1,[],https://github.com/neutrinolabs/xrdp/pull/1651,https://github.com/matt335672,4,https://github.com/neutrinolabs/xrdp/pull/1651#issuecomment-708324256,"This is the third and last PR in a series to implement #1588  (separate config file for xrdp and sesman).
The other two are for sesman (#1650) and chansrv (#1635), and are largely independent of this PR. This PR affects xrdp and libxrdp.
This PR makes the following changes:-
common/log.c
Opened the .ini file read-only with g_file_open_ex rather than g_file_open. Without this change, the logging code creates an empty ini file if one wasn't present, which is probably not what is required!
xrdp.c

A few methods were made static where not required to be global
File run through astyle which found a few issues.
A few hard-coded string value sizes have been removed.
local variable no_daemon replaced with daemon to avoid double-negatives (i.e. !no_daemon)

xrdp (other files)

Manpage updated
Other changes made to remove hard-coded references to the location of xrdp.ini

libxrdp

Extra parameter added to libxrdp_init() which allows the location of xrdp.ini to be specified for the session. NULL can be specified for this parameter to implement the existing behaviour with the default file.",Just find a minor issue around libxrdp initialisation. I'll fix it and re-test thoroughly before I merge.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1653,2020-08-16T11:10:27Z,2020-08-24T04:15:02Z,2020-08-24T04:15:02Z,MERGED,True,33,21,7,https://github.com/bolkedebruin,Fix buffer len for client info,4,[],https://github.com/neutrinolabs/xrdp/pull/1653,https://github.com/bolkedebruin,1,https://github.com/neutrinolabs/xrdp/pull/1653,"The MS docs state that the maximum length of a username/password/domain etc is 511. xrdp checks for this but it's internal buffers are 256. This makes it into a define and sets the maximum size to 512 (null terminator needs to be counted)
Fixes: #1648","The MS docs state that the maximum length of a username/password/domain etc is 511. xrdp checks for this but it's internal buffers are 256. This makes it into a define and sets the maximum size to 512 (null terminator needs to be counted)
Fixes: #1648",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1653,2020-08-16T11:10:27Z,2020-08-24T04:15:02Z,2020-08-24T04:15:02Z,MERGED,True,33,21,7,https://github.com/bolkedebruin,Fix buffer len for client info,4,[],https://github.com/neutrinolabs/xrdp/pull/1653,https://github.com/bolkedebruin,2,https://github.com/neutrinolabs/xrdp/pull/1653#issuecomment-675652871,"The MS docs state that the maximum length of a username/password/domain etc is 511. xrdp checks for this but it's internal buffers are 256. This makes it into a define and sets the maximum size to 512 (null terminator needs to be counted)
Fixes: #1648",Ping @metalefty,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1653,2020-08-16T11:10:27Z,2020-08-24T04:15:02Z,2020-08-24T04:15:02Z,MERGED,True,33,21,7,https://github.com/bolkedebruin,Fix buffer len for client info,4,[],https://github.com/neutrinolabs/xrdp/pull/1653,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/1653#issuecomment-676034320,"The MS docs state that the maximum length of a username/password/domain etc is 511. xrdp checks for this but it's internal buffers are 256. This makes it into a define and sets the maximum size to 512 (null terminator needs to be counted)
Fixes: #1648",@matt335672 can you also review this?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1653,2020-08-16T11:10:27Z,2020-08-24T04:15:02Z,2020-08-24T04:15:02Z,MERGED,True,33,21,7,https://github.com/bolkedebruin,Fix buffer len for client info,4,[],https://github.com/neutrinolabs/xrdp/pull/1653,https://github.com/matt335672,4,https://github.com/neutrinolabs/xrdp/pull/1653#issuecomment-676041136,"The MS docs state that the maximum length of a username/password/domain etc is 511. xrdp checks for this but it's internal buffers are 256. This makes it into a define and sets the maximum size to 512 (null terminator needs to be counted)
Fixes: #1648",Will do.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1653,2020-08-16T11:10:27Z,2020-08-24T04:15:02Z,2020-08-24T04:15:02Z,MERGED,True,33,21,7,https://github.com/bolkedebruin,Fix buffer len for client info,4,[],https://github.com/neutrinolabs/xrdp/pull/1653,https://github.com/bolkedebruin,5,https://github.com/neutrinolabs/xrdp/pull/1653#issuecomment-676136366,"The MS docs state that the maximum length of a username/password/domain etc is 511. xrdp checks for this but it's internal buffers are 256. This makes it into a define and sets the maximum size to 512 (null terminator needs to be counted)
Fixes: #1648",Done @matt335672,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1653,2020-08-16T11:10:27Z,2020-08-24T04:15:02Z,2020-08-24T04:15:02Z,MERGED,True,33,21,7,https://github.com/bolkedebruin,Fix buffer len for client info,4,[],https://github.com/neutrinolabs/xrdp/pull/1653,https://github.com/metalefty,6,https://github.com/neutrinolabs/xrdp/pull/1653#issuecomment-676982950,"The MS docs state that the maximum length of a username/password/domain etc is 511. xrdp checks for this but it's internal buffers are 256. This makes it into a define and sets the maximum size to 512 (null terminator needs to be counted)
Fixes: #1648",LGTM. I think this should be shipped to August release.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1659,2020-08-21T11:35:35Z,2020-09-02T09:44:30Z,2020-09-04T10:08:21Z,MERGED,True,1,3,1,https://github.com/matt335672,Fixed compiler warnings/errors about snprintf truncations in log.c,1,[],https://github.com/neutrinolabs/xrdp/pull/1659,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1659,"Compiling the current development wavefront on Ubuntu 20.04 (gcc 9.3.0) results in the following errors:-
log.c: In function ‘log_message’:
log.c:558:30: error: ‘%.2d’ directive output may be truncated writing between 2 and 11 bytes into a region of size between 9 and 16 [-Werror=format-truncation=]
  558 |     snprintf(buff, 21, ""[%.4d%.2d%.2d-%.2d:%.2d:%.2d] "", now->tm_year + 1900,
      |                              ^~~~
log.c:558:24: note: directive argument in the range [-2147483647, 2147483647]
  558 |     snprintf(buff, 21, ""[%.4d%.2d%.2d-%.2d:%.2d:%.2d] "", now->tm_year + 1900,
      |                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/include/stdio.h:867,
                 from log.c:28:
/usr/include/x86_64-linux-gnu/bits/stdio2.h:67:10: note: ‘__builtin___snprintf_chk’ output between 21 and 73 bytes into a destination of size 21
   67 |   return __builtin___snprintf_chk (__s, __n, __USE_FORTIFY_LEVEL - 1,
      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   68 |        __bos (__s), __fmt, __va_arg_pack ());
      |        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cc1: all warnings being treated as errors

These errors used to be warnings. However commit 7e58209 (not in the last release) applies -Werror to the compilation.
This fix simply restricts the values passed to %.2d by using the modulus operator '%'.
We possibly need this for v0.9.14 to prevent the Ubuntu 20.04 builds from breaking.
Thanks to @endofreal for raising this as a side issue in #1658","Compiling the current development wavefront on Ubuntu 20.04 (gcc 9.3.0) results in the following errors:-
log.c: In function ‘log_message’:
log.c:558:30: error: ‘%.2d’ directive output may be truncated writing between 2 and 11 bytes into a region of size between 9 and 16 [-Werror=format-truncation=]
  558 |     snprintf(buff, 21, ""[%.4d%.2d%.2d-%.2d:%.2d:%.2d] "", now->tm_year + 1900,
      |                              ^~~~
log.c:558:24: note: directive argument in the range [-2147483647, 2147483647]
  558 |     snprintf(buff, 21, ""[%.4d%.2d%.2d-%.2d:%.2d:%.2d] "", now->tm_year + 1900,
      |                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/include/stdio.h:867,
                 from log.c:28:
/usr/include/x86_64-linux-gnu/bits/stdio2.h:67:10: note: ‘__builtin___snprintf_chk’ output between 21 and 73 bytes into a destination of size 21
   67 |   return __builtin___snprintf_chk (__s, __n, __USE_FORTIFY_LEVEL - 1,
      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   68 |        __bos (__s), __fmt, __va_arg_pack ());
      |        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cc1: all warnings being treated as errors

These errors used to be warnings. However commit 7e58209 (not in the last release) applies -Werror to the compilation.
This fix simply restricts the values passed to %.2d by using the modulus operator '%'.
We possibly need this for v0.9.14 to prevent the Ubuntu 20.04 builds from breaking.
Thanks to @endofreal for raising this as a side issue in #1658",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1659,2020-08-21T11:35:35Z,2020-09-02T09:44:30Z,2020-09-04T10:08:21Z,MERGED,True,1,3,1,https://github.com/matt335672,Fixed compiler warnings/errors about snprintf truncations in log.c,1,[],https://github.com/neutrinolabs/xrdp/pull/1659,https://github.com/aquesnel,2,https://github.com/neutrinolabs/xrdp/pull/1659#issuecomment-678870514,"Compiling the current development wavefront on Ubuntu 20.04 (gcc 9.3.0) results in the following errors:-
log.c: In function ‘log_message’:
log.c:558:30: error: ‘%.2d’ directive output may be truncated writing between 2 and 11 bytes into a region of size between 9 and 16 [-Werror=format-truncation=]
  558 |     snprintf(buff, 21, ""[%.4d%.2d%.2d-%.2d:%.2d:%.2d] "", now->tm_year + 1900,
      |                              ^~~~
log.c:558:24: note: directive argument in the range [-2147483647, 2147483647]
  558 |     snprintf(buff, 21, ""[%.4d%.2d%.2d-%.2d:%.2d:%.2d] "", now->tm_year + 1900,
      |                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/include/stdio.h:867,
                 from log.c:28:
/usr/include/x86_64-linux-gnu/bits/stdio2.h:67:10: note: ‘__builtin___snprintf_chk’ output between 21 and 73 bytes into a destination of size 21
   67 |   return __builtin___snprintf_chk (__s, __n, __USE_FORTIFY_LEVEL - 1,
      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   68 |        __bos (__s), __fmt, __va_arg_pack ());
      |        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cc1: all warnings being treated as errors

These errors used to be warnings. However commit 7e58209 (not in the last release) applies -Werror to the compilation.
This fix simply restricts the values passed to %.2d by using the modulus operator '%'.
We possibly need this for v0.9.14 to prevent the Ubuntu 20.04 builds from breaking.
Thanks to @endofreal for raising this as a side issue in #1658","Hi @matt335672 ,
I reproduce the compiler error in this pull request in a Travis CI build using the same version of Ubuntu as was used in #1658 :
aquesnel@4bf3161
https://travis-ci.org/github/aquesnel/xrdp/builds/720506442
I also confirmed that your commit in this pull request fixes the build:
https://travis-ci.org/github/aquesnel/xrdp/builds/720508560
Do you think I should make a pull request for my change to include Ubuntu 20.04 in the Travis CI builds to get the newer gcc checks run on the code?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1659,2020-08-21T11:35:35Z,2020-09-02T09:44:30Z,2020-09-04T10:08:21Z,MERGED,True,1,3,1,https://github.com/matt335672,Fixed compiler warnings/errors about snprintf truncations in log.c,1,[],https://github.com/neutrinolabs/xrdp/pull/1659,https://github.com/matt335672,3,https://github.com/neutrinolabs/xrdp/pull/1659#issuecomment-679867618,"Compiling the current development wavefront on Ubuntu 20.04 (gcc 9.3.0) results in the following errors:-
log.c: In function ‘log_message’:
log.c:558:30: error: ‘%.2d’ directive output may be truncated writing between 2 and 11 bytes into a region of size between 9 and 16 [-Werror=format-truncation=]
  558 |     snprintf(buff, 21, ""[%.4d%.2d%.2d-%.2d:%.2d:%.2d] "", now->tm_year + 1900,
      |                              ^~~~
log.c:558:24: note: directive argument in the range [-2147483647, 2147483647]
  558 |     snprintf(buff, 21, ""[%.4d%.2d%.2d-%.2d:%.2d:%.2d] "", now->tm_year + 1900,
      |                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/include/stdio.h:867,
                 from log.c:28:
/usr/include/x86_64-linux-gnu/bits/stdio2.h:67:10: note: ‘__builtin___snprintf_chk’ output between 21 and 73 bytes into a destination of size 21
   67 |   return __builtin___snprintf_chk (__s, __n, __USE_FORTIFY_LEVEL - 1,
      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   68 |        __bos (__s), __fmt, __va_arg_pack ());
      |        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cc1: all warnings being treated as errors

These errors used to be warnings. However commit 7e58209 (not in the last release) applies -Werror to the compilation.
This fix simply restricts the values passed to %.2d by using the modulus operator '%'.
We possibly need this for v0.9.14 to prevent the Ubuntu 20.04 builds from breaking.
Thanks to @endofreal for raising this as a side issue in #1658","Hi @aquesnel
If you do that, you'll be dependent on this fix being pulled into devel.
Either of the two could be preferable I think:-

You could raise a separate PR to bump the distro version to focal.
I could add the version bump into this PR to demonstrate the problem has been fixed.

I've had a look at your build_ubuntu_focal branch change. The comment I would make is that I think it's worth bumping the distro version for all the builds and not just the gcc one. That way you'll get later versions of clang and g++ running too.
Thoughts?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1659,2020-08-21T11:35:35Z,2020-09-02T09:44:30Z,2020-09-04T10:08:21Z,MERGED,True,1,3,1,https://github.com/matt335672,Fixed compiler warnings/errors about snprintf truncations in log.c,1,[],https://github.com/neutrinolabs/xrdp/pull/1659,https://github.com/aquesnel,4,https://github.com/neutrinolabs/xrdp/pull/1659#issuecomment-680686410,"Compiling the current development wavefront on Ubuntu 20.04 (gcc 9.3.0) results in the following errors:-
log.c: In function ‘log_message’:
log.c:558:30: error: ‘%.2d’ directive output may be truncated writing between 2 and 11 bytes into a region of size between 9 and 16 [-Werror=format-truncation=]
  558 |     snprintf(buff, 21, ""[%.4d%.2d%.2d-%.2d:%.2d:%.2d] "", now->tm_year + 1900,
      |                              ^~~~
log.c:558:24: note: directive argument in the range [-2147483647, 2147483647]
  558 |     snprintf(buff, 21, ""[%.4d%.2d%.2d-%.2d:%.2d:%.2d] "", now->tm_year + 1900,
      |                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/include/stdio.h:867,
                 from log.c:28:
/usr/include/x86_64-linux-gnu/bits/stdio2.h:67:10: note: ‘__builtin___snprintf_chk’ output between 21 and 73 bytes into a destination of size 21
   67 |   return __builtin___snprintf_chk (__s, __n, __USE_FORTIFY_LEVEL - 1,
      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   68 |        __bos (__s), __fmt, __va_arg_pack ());
      |        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cc1: all warnings being treated as errors

These errors used to be warnings. However commit 7e58209 (not in the last release) applies -Werror to the compilation.
This fix simply restricts the values passed to %.2d by using the modulus operator '%'.
We possibly need this for v0.9.14 to prevent the Ubuntu 20.04 builds from breaking.
Thanks to @endofreal for raising this as a side issue in #1658","Hi @matt335672 ,
I don't want to block this pull request unnecessarily, so I'm happy to submit a follow up pull request with the distro version bump, or have you merge/squash the change into this pull request.
I think it's a good idea to bump the distro version for all the compilers in the build.
My only hesitation at bumping the distro version is that I don't know if there is a minimum distro or toolchain version that is being targeted that would lose coverage if we bumped the distro version for all builds. I didn't find anything about minium supported versions, but I did find wiki page for compiling on Debian 6 and RedHat 6. https://github.com/neutrinolabs/xrdp/wiki/Building-on-Debian-6
Do you know if there is a minimum toolchain or distro version that is targeted by this project?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1659,2020-08-21T11:35:35Z,2020-09-02T09:44:30Z,2020-09-04T10:08:21Z,MERGED,True,1,3,1,https://github.com/matt335672,Fixed compiler warnings/errors about snprintf truncations in log.c,1,[],https://github.com/neutrinolabs/xrdp/pull/1659,https://github.com/matt335672,5,https://github.com/neutrinolabs/xrdp/pull/1659#issuecomment-680777148,"Compiling the current development wavefront on Ubuntu 20.04 (gcc 9.3.0) results in the following errors:-
log.c: In function ‘log_message’:
log.c:558:30: error: ‘%.2d’ directive output may be truncated writing between 2 and 11 bytes into a region of size between 9 and 16 [-Werror=format-truncation=]
  558 |     snprintf(buff, 21, ""[%.4d%.2d%.2d-%.2d:%.2d:%.2d] "", now->tm_year + 1900,
      |                              ^~~~
log.c:558:24: note: directive argument in the range [-2147483647, 2147483647]
  558 |     snprintf(buff, 21, ""[%.4d%.2d%.2d-%.2d:%.2d:%.2d] "", now->tm_year + 1900,
      |                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/include/stdio.h:867,
                 from log.c:28:
/usr/include/x86_64-linux-gnu/bits/stdio2.h:67:10: note: ‘__builtin___snprintf_chk’ output between 21 and 73 bytes into a destination of size 21
   67 |   return __builtin___snprintf_chk (__s, __n, __USE_FORTIFY_LEVEL - 1,
      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   68 |        __bos (__s), __fmt, __va_arg_pack ());
      |        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cc1: all warnings being treated as errors

These errors used to be warnings. However commit 7e58209 (not in the last release) applies -Werror to the compilation.
This fix simply restricts the values passed to %.2d by using the modulus operator '%'.
We possibly need this for v0.9.14 to prevent the Ubuntu 20.04 builds from breaking.
Thanks to @endofreal for raising this as a side issue in #1658","I don't actually know what the policy is supporting older distros or toolchains. Off the top-of-my-head RHEL 6 won't actually build the latest v0.9.x version of XRDP as autoconf is too old. My suspicion is that a major feature update which would prevent building on a current platform would result in a major version bump. Is that right @metalefty?
My own thinking is that using the latest compilers possible to do the regression error checking is the best approach. It's probably unlikely that an older compiler would find a problem that a newer compiler woudn't.
Currently v0.9.14 is imminent and so at the moment I'd vote for a follow-up PR after than happens.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1659,2020-08-21T11:35:35Z,2020-09-02T09:44:30Z,2020-09-04T10:08:21Z,MERGED,True,1,3,1,https://github.com/matt335672,Fixed compiler warnings/errors about snprintf truncations in log.c,1,[],https://github.com/neutrinolabs/xrdp/pull/1659,https://github.com/metalefty,6,https://github.com/neutrinolabs/xrdp/pull/1659#issuecomment-684386856,"Compiling the current development wavefront on Ubuntu 20.04 (gcc 9.3.0) results in the following errors:-
log.c: In function ‘log_message’:
log.c:558:30: error: ‘%.2d’ directive output may be truncated writing between 2 and 11 bytes into a region of size between 9 and 16 [-Werror=format-truncation=]
  558 |     snprintf(buff, 21, ""[%.4d%.2d%.2d-%.2d:%.2d:%.2d] "", now->tm_year + 1900,
      |                              ^~~~
log.c:558:24: note: directive argument in the range [-2147483647, 2147483647]
  558 |     snprintf(buff, 21, ""[%.4d%.2d%.2d-%.2d:%.2d:%.2d] "", now->tm_year + 1900,
      |                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/include/stdio.h:867,
                 from log.c:28:
/usr/include/x86_64-linux-gnu/bits/stdio2.h:67:10: note: ‘__builtin___snprintf_chk’ output between 21 and 73 bytes into a destination of size 21
   67 |   return __builtin___snprintf_chk (__s, __n, __USE_FORTIFY_LEVEL - 1,
      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   68 |        __bos (__s), __fmt, __va_arg_pack ());
      |        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cc1: all warnings being treated as errors

These errors used to be warnings. However commit 7e58209 (not in the last release) applies -Werror to the compilation.
This fix simply restricts the values passed to %.2d by using the modulus operator '%'.
We possibly need this for v0.9.14 to prevent the Ubuntu 20.04 builds from breaking.
Thanks to @endofreal for raising this as a side issue in #1658","Sorry for the delay. We don't have explicit rules for minimum OS & toolchain. However, we would not support EoL'ed OS. Regarding RHEL6 (or CentOS 6), it will reach EoL soon so I no longer spend time on it. People who want to maintain xrdp on such OS should contribute. We accept such contributions.

My suspicion is that a major feature update which would prevent building on a current platform would result in a major version bump. Is that right @metalefty

There are no explicit rules on this too but I think it should be done like that.
The existence of building documents for older OSs not necessarily implies such OSs are supported. Wiki is community-driven knowledge base. If it is helpful for someone, I don't want to delete old pages. It old pages are noise, we should do garbage collection.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1659,2020-08-21T11:35:35Z,2020-09-02T09:44:30Z,2020-09-04T10:08:21Z,MERGED,True,1,3,1,https://github.com/matt335672,Fixed compiler warnings/errors about snprintf truncations in log.c,1,[],https://github.com/neutrinolabs/xrdp/pull/1659,https://github.com/metalefty,7,https://github.com/neutrinolabs/xrdp/pull/1659#issuecomment-684393744,"Compiling the current development wavefront on Ubuntu 20.04 (gcc 9.3.0) results in the following errors:-
log.c: In function ‘log_message’:
log.c:558:30: error: ‘%.2d’ directive output may be truncated writing between 2 and 11 bytes into a region of size between 9 and 16 [-Werror=format-truncation=]
  558 |     snprintf(buff, 21, ""[%.4d%.2d%.2d-%.2d:%.2d:%.2d] "", now->tm_year + 1900,
      |                              ^~~~
log.c:558:24: note: directive argument in the range [-2147483647, 2147483647]
  558 |     snprintf(buff, 21, ""[%.4d%.2d%.2d-%.2d:%.2d:%.2d] "", now->tm_year + 1900,
      |                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/include/stdio.h:867,
                 from log.c:28:
/usr/include/x86_64-linux-gnu/bits/stdio2.h:67:10: note: ‘__builtin___snprintf_chk’ output between 21 and 73 bytes into a destination of size 21
   67 |   return __builtin___snprintf_chk (__s, __n, __USE_FORTIFY_LEVEL - 1,
      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   68 |        __bos (__s), __fmt, __va_arg_pack ());
      |        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cc1: all warnings being treated as errors

These errors used to be warnings. However commit 7e58209 (not in the last release) applies -Werror to the compilation.
This fix simply restricts the values passed to %.2d by using the modulus operator '%'.
We possibly need this for v0.9.14 to prevent the Ubuntu 20.04 builds from breaking.
Thanks to @endofreal for raising this as a side issue in #1658","BTW, based on the knowledge developing X11RDP-RH-Matic (no longer mainteined), I know autorecon268 is needed on EL6.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1659,2020-08-21T11:35:35Z,2020-09-02T09:44:30Z,2020-09-04T10:08:21Z,MERGED,True,1,3,1,https://github.com/matt335672,Fixed compiler warnings/errors about snprintf truncations in log.c,1,[],https://github.com/neutrinolabs/xrdp/pull/1659,https://github.com/matt335672,8,https://github.com/neutrinolabs/xrdp/pull/1659#issuecomment-684770134,"Compiling the current development wavefront on Ubuntu 20.04 (gcc 9.3.0) results in the following errors:-
log.c: In function ‘log_message’:
log.c:558:30: error: ‘%.2d’ directive output may be truncated writing between 2 and 11 bytes into a region of size between 9 and 16 [-Werror=format-truncation=]
  558 |     snprintf(buff, 21, ""[%.4d%.2d%.2d-%.2d:%.2d:%.2d] "", now->tm_year + 1900,
      |                              ^~~~
log.c:558:24: note: directive argument in the range [-2147483647, 2147483647]
  558 |     snprintf(buff, 21, ""[%.4d%.2d%.2d-%.2d:%.2d:%.2d] "", now->tm_year + 1900,
      |                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/include/stdio.h:867,
                 from log.c:28:
/usr/include/x86_64-linux-gnu/bits/stdio2.h:67:10: note: ‘__builtin___snprintf_chk’ output between 21 and 73 bytes into a destination of size 21
   67 |   return __builtin___snprintf_chk (__s, __n, __USE_FORTIFY_LEVEL - 1,
      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   68 |        __bos (__s), __fmt, __va_arg_pack ());
      |        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cc1: all warnings being treated as errors

These errors used to be warnings. However commit 7e58209 (not in the last release) applies -Werror to the compilation.
This fix simply restricts the values passed to %.2d by using the modulus operator '%'.
We possibly need this for v0.9.14 to prevent the Ubuntu 20.04 builds from breaking.
Thanks to @endofreal for raising this as a side issue in #1658","I must admit I was in a bit of a rush when I put this one together.  Although it's a minimum change from where we are, I think using strftime() would be a much cleaner way to do this. I'm out of time today, but I'll look at it tomorrow.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1659,2020-08-21T11:35:35Z,2020-09-02T09:44:30Z,2020-09-04T10:08:21Z,MERGED,True,1,3,1,https://github.com/matt335672,Fixed compiler warnings/errors about snprintf truncations in log.c,1,[],https://github.com/neutrinolabs/xrdp/pull/1659,https://github.com/pdynarowski,9,https://github.com/neutrinolabs/xrdp/pull/1659#issuecomment-685108660,"Compiling the current development wavefront on Ubuntu 20.04 (gcc 9.3.0) results in the following errors:-
log.c: In function ‘log_message’:
log.c:558:30: error: ‘%.2d’ directive output may be truncated writing between 2 and 11 bytes into a region of size between 9 and 16 [-Werror=format-truncation=]
  558 |     snprintf(buff, 21, ""[%.4d%.2d%.2d-%.2d:%.2d:%.2d] "", now->tm_year + 1900,
      |                              ^~~~
log.c:558:24: note: directive argument in the range [-2147483647, 2147483647]
  558 |     snprintf(buff, 21, ""[%.4d%.2d%.2d-%.2d:%.2d:%.2d] "", now->tm_year + 1900,
      |                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/include/stdio.h:867,
                 from log.c:28:
/usr/include/x86_64-linux-gnu/bits/stdio2.h:67:10: note: ‘__builtin___snprintf_chk’ output between 21 and 73 bytes into a destination of size 21
   67 |   return __builtin___snprintf_chk (__s, __n, __USE_FORTIFY_LEVEL - 1,
      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   68 |        __bos (__s), __fmt, __va_arg_pack ());
      |        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cc1: all warnings being treated as errors

These errors used to be warnings. However commit 7e58209 (not in the last release) applies -Werror to the compilation.
This fix simply restricts the values passed to %.2d by using the modulus operator '%'.
We possibly need this for v0.9.14 to prevent the Ubuntu 20.04 builds from breaking.
Thanks to @endofreal for raising this as a side issue in #1658",same problem on archlinux (gcc 10),True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1659,2020-08-21T11:35:35Z,2020-09-02T09:44:30Z,2020-09-04T10:08:21Z,MERGED,True,1,3,1,https://github.com/matt335672,Fixed compiler warnings/errors about snprintf truncations in log.c,1,[],https://github.com/neutrinolabs/xrdp/pull/1659,https://github.com/matt335672,10,https://github.com/neutrinolabs/xrdp/pull/1659#issuecomment-685457603,"Compiling the current development wavefront on Ubuntu 20.04 (gcc 9.3.0) results in the following errors:-
log.c: In function ‘log_message’:
log.c:558:30: error: ‘%.2d’ directive output may be truncated writing between 2 and 11 bytes into a region of size between 9 and 16 [-Werror=format-truncation=]
  558 |     snprintf(buff, 21, ""[%.4d%.2d%.2d-%.2d:%.2d:%.2d] "", now->tm_year + 1900,
      |                              ^~~~
log.c:558:24: note: directive argument in the range [-2147483647, 2147483647]
  558 |     snprintf(buff, 21, ""[%.4d%.2d%.2d-%.2d:%.2d:%.2d] "", now->tm_year + 1900,
      |                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/include/stdio.h:867,
                 from log.c:28:
/usr/include/x86_64-linux-gnu/bits/stdio2.h:67:10: note: ‘__builtin___snprintf_chk’ output between 21 and 73 bytes into a destination of size 21
   67 |   return __builtin___snprintf_chk (__s, __n, __USE_FORTIFY_LEVEL - 1,
      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   68 |        __bos (__s), __fmt, __va_arg_pack ());
      |        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cc1: all warnings being treated as errors

These errors used to be warnings. However commit 7e58209 (not in the last release) applies -Werror to the compilation.
This fix simply restricts the values passed to %.2d by using the modulus operator '%'.
We possibly need this for v0.9.14 to prevent the Ubuntu 20.04 builds from breaking.
Thanks to @endofreal for raising this as a side issue in #1658","I've used strftime() instead, and the code's a lot cleaner. I've used ANSI C features only for maximum compatibility. Code builds OK on gcc 9.3.0 (Xubuntu 20) as well as the standard platforms.
@metalefty - can you give this a quick sanity check? If you're happy I'll squash and merge it.
Thanks.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1662,2020-08-24T01:38:06Z,2020-08-31T23:37:12Z,2020-09-11T02:34:00Z,MERGED,True,12,0,1,https://github.com/aquesnel,Adding checks to prevent buffer overruns during data chunk re-assembly,1,[],https://github.com/neutrinolabs/xrdp/pull/1662,https://github.com/aquesnel,1,https://github.com/neutrinolabs/xrdp/pull/1662,"Problem:
The data chunk buffer is allocated based on the total length field in a DYNVC_DATA_FIRST message. Upon receiving subsequent DYNVC_DATA messages, the data payload is appended to the chunk buffer without first checking that there is enough space remaining in the chunk buffer. This could lead to a buffer overrun in the server.
Solution:
This pull request adds a check to verify that the chunk buffer has enough remaining space to accept the received payload, and returns an error if there is not enough space in the buffer.","Problem:
The data chunk buffer is allocated based on the total length field in a DYNVC_DATA_FIRST message. Upon receiving subsequent DYNVC_DATA messages, the data payload is appended to the chunk buffer without first checking that there is enough space remaining in the chunk buffer. This could lead to a buffer overrun in the server.
Solution:
This pull request adds a check to verify that the chunk buffer has enough remaining space to accept the received payload, and returns an error if there is not enough space in the buffer.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1662,2020-08-24T01:38:06Z,2020-08-31T23:37:12Z,2020-09-11T02:34:00Z,MERGED,True,12,0,1,https://github.com/aquesnel,Adding checks to prevent buffer overruns during data chunk re-assembly,1,[],https://github.com/neutrinolabs/xrdp/pull/1662,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1662#issuecomment-683657459,"Problem:
The data chunk buffer is allocated based on the total length field in a DYNVC_DATA_FIRST message. Upon receiving subsequent DYNVC_DATA messages, the data payload is appended to the chunk buffer without first checking that there is enough space remaining in the chunk buffer. This could lead to a buffer overrun in the server.
Solution:
This pull request adds a check to verify that the chunk buffer has enough remaining space to accept the received payload, and returns an error if there is not enough space in the buffer.",I think this can be merged.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1662,2020-08-24T01:38:06Z,2020-08-31T23:37:12Z,2020-09-11T02:34:00Z,MERGED,True,12,0,1,https://github.com/aquesnel,Adding checks to prevent buffer overruns during data chunk re-assembly,1,[],https://github.com/neutrinolabs/xrdp/pull/1662,https://github.com/matt335672,3,https://github.com/neutrinolabs/xrdp/pull/1662#issuecomment-683671587,"Problem:
The data chunk buffer is allocated based on the total length field in a DYNVC_DATA_FIRST message. Upon receiving subsequent DYNVC_DATA messages, the data payload is appended to the chunk buffer without first checking that there is enough space remaining in the chunk buffer. This could lead to a buffer overrun in the server.
Solution:
This pull request adds a check to verify that the chunk buffer has enough remaining space to accept the received payload, and returns an error if there is not enough space in the buffer.",Agreed.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1663,2020-08-25T19:05:10Z,2020-08-28T01:51:39Z,2020-08-28T01:51:40Z,MERGED,True,1058,1,4,https://github.com/RolKau,Detect and setup Programmer Dvorak keyboard layout,1,['new keyboard layout'],https://github.com/neutrinolabs/xrdp/pull/1663,https://github.com/RolKau,1,https://github.com/neutrinolabs/xrdp/pull/1663,"This patch will add the keyboard layout identifier for the Programmer
Dvorak keyboard layout, so that if a Windows client has that layout
active, it will be mapped to the corresponding xkeyboard-config layout
in the X server.
An XFreeRDP client knows about this layout too, and will correspondingly
map it to the identifier given here, making the layout propagate
correctly through X-to-X connections as well.
To replicate the full Windows keyboard layout several options have to
be set as well as the main layout. To avoid having these options spill
over to other layouts that are dumped, the old settings are stored
before the dump and then restored afterwards.","This patch will add the keyboard layout identifier for the Programmer
Dvorak keyboard layout, so that if a Windows client has that layout
active, it will be mapped to the corresponding xkeyboard-config layout
in the X server.
An XFreeRDP client knows about this layout too, and will correspondingly
map it to the identifier given here, making the layout propagate
correctly through X-to-X connections as well.
To replicate the full Windows keyboard layout several options have to
be set as well as the main layout. To avoid having these options spill
over to other layouts that are dumped, the old settings are stored
before the dump and then restored afterwards.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1663,2020-08-25T19:05:10Z,2020-08-28T01:51:39Z,2020-08-28T01:51:40Z,MERGED,True,1058,1,4,https://github.com/RolKau,Detect and setup Programmer Dvorak keyboard layout,1,['new keyboard layout'],https://github.com/neutrinolabs/xrdp/pull/1663,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1663#issuecomment-680407529,"This patch will add the keyboard layout identifier for the Programmer
Dvorak keyboard layout, so that if a Windows client has that layout
active, it will be mapped to the corresponding xkeyboard-config layout
in the X server.
An XFreeRDP client knows about this layout too, and will correspondingly
map it to the identifier given here, making the layout propagate
correctly through X-to-X connections as well.
To replicate the full Windows keyboard layout several options have to
be set as well as the main layout. To avoid having these options spill
over to other layouts that are dumped, the old settings are stored
before the dump and then restored afterwards.","[20200817-18:05:31] [INFO ] TLS connection established from ::ffff:192.168.10.20 port 40455: TLSv1.3 with cipher TLS_AES_256_GCM_SHA384
[20200817-18:05:31] [DEBUG] xrdp_0000dc44_wm_login_mode_event_00000001
[20200817-18:05:31] [INFO ] Loading keymap file /usr/local/etc/xrdp/km-00000409.ini
[20200817-18:05:31] [WARN ] local keymap file for 0x00000409 found and doesn't match built in keymap, using local keymap file

Also, can you attach the log km-19360409.ini is properly loaded when your patch applied? Like above.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1663,2020-08-25T19:05:10Z,2020-08-28T01:51:39Z,2020-08-28T01:51:40Z,MERGED,True,1058,1,4,https://github.com/RolKau,Detect and setup Programmer Dvorak keyboard layout,1,['new keyboard layout'],https://github.com/neutrinolabs/xrdp/pull/1663,https://github.com/RolKau,3,https://github.com/neutrinolabs/xrdp/pull/1663#issuecomment-680973912,"This patch will add the keyboard layout identifier for the Programmer
Dvorak keyboard layout, so that if a Windows client has that layout
active, it will be mapped to the corresponding xkeyboard-config layout
in the X server.
An XFreeRDP client knows about this layout too, and will correspondingly
map it to the identifier given here, making the layout propagate
correctly through X-to-X connections as well.
To replicate the full Windows keyboard layout several options have to
be set as well as the main layout. To avoid having these options spill
over to other layouts that are dumped, the old settings are stored
before the dump and then restored afterwards.","Also, can you attach the log km-19360409.ini is properly loaded when your patch applied? Like above.

I have these four lines in my /var/log/xrdp.log when logging on with this layout specified:
[20200826-13:03:35] [DEBUG] xrdp_000cc3f5_wm_login_mode_event_00000001
[20200826-13:03:35] [INFO ] Loading keymap file /etc/xrdp/km-19360409.ini
[20200826-13:03:35] [WARN ] local keymap file for 0x19360409 found and doesn't match built in keymap, using local keymap file
[20200826-13:03:41] [DEBUG] xrdp_wm_log_msg: connecting to sesman ip 127.0.0.1 port 3350

(I read the source code but I couldn't figure out why the message was classified as ""WARN"")",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1663,2020-08-25T19:05:10Z,2020-08-28T01:51:39Z,2020-08-28T01:51:40Z,MERGED,True,1058,1,4,https://github.com/RolKau,Detect and setup Programmer Dvorak keyboard layout,1,['new keyboard layout'],https://github.com/neutrinolabs/xrdp/pull/1663,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/1663#issuecomment-682279448,"This patch will add the keyboard layout identifier for the Programmer
Dvorak keyboard layout, so that if a Windows client has that layout
active, it will be mapped to the corresponding xkeyboard-config layout
in the X server.
An XFreeRDP client knows about this layout too, and will correspondingly
map it to the identifier given here, making the layout propagate
correctly through X-to-X connections as well.
To replicate the full Windows keyboard layout several options have to
be set as well as the main layout. To avoid having these options spill
over to other layouts that are dumped, the old settings are stored
before the dump and then restored afterwards.","I read the source code but I couldn't figure out why the message was classified as ""WARN""

Indeed, that should be reconsidered.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1664,2020-08-26T09:15:15Z,2020-08-26T09:30:49Z,2020-08-26T09:40:18Z,MERGED,True,1,1,1,https://github.com/matt335672,Updated sesman.ini comment for Policy= in line with the manpage,1,[],https://github.com/neutrinolabs/xrdp/pull/1664,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1664,"Related to VNC resizing #1343.
Although I'd updated the manpage, I'd missed the actual comment for Policy= in sesman.ini","Related to VNC resizing #1343.
Although I'd updated the manpage, I'd missed the actual comment for Policy= in sesman.ini",True,{'THUMBS_UP': ['https://github.com/metalefty']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1666,2020-08-28T04:48:06Z,2020-09-10T00:05:25Z,2020-09-11T02:35:43Z,MERGED,True,28,14,1,https://github.com/aquesnel,Adding a Travis CI build using Ubuntu Focal,2,[],https://github.com/neutrinolabs/xrdp/pull/1666,https://github.com/aquesnel,1,https://github.com/neutrinolabs/xrdp/pull/1666,"Follow up for #1659 to add a CI build using the Ubuntu Focal platform version of the gcc compiler and dependencies.
This pull request depends on compiler error fixes in #1659 being merged.
Open questions

should all CI builds be updated to use the latest platform/compiler versions? Or should one/most builds use the older platform version to verify that xrdp continutes to build on the older platform?

TODO:

add/upgrade a clang build to the latest version","Follow up for #1659 to add a CI build using the Ubuntu Focal platform version of the gcc compiler and dependencies.
This pull request depends on compiler error fixes in #1659 being merged.
Open questions

should all CI builds be updated to use the latest platform/compiler versions? Or should one/most builds use the older platform version to verify that xrdp continutes to build on the older platform?

TODO:

add/upgrade a clang build to the latest version",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1666,2020-08-28T04:48:06Z,2020-09-10T00:05:25Z,2020-09-11T02:35:43Z,MERGED,True,28,14,1,https://github.com/aquesnel,Adding a Travis CI build using Ubuntu Focal,2,[],https://github.com/neutrinolabs/xrdp/pull/1666,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/1666#issuecomment-682415229,"Follow up for #1659 to add a CI build using the Ubuntu Focal platform version of the gcc compiler and dependencies.
This pull request depends on compiler error fixes in #1659 being merged.
Open questions

should all CI builds be updated to use the latest platform/compiler versions? Or should one/most builds use the older platform version to verify that xrdp continutes to build on the older platform?

TODO:

add/upgrade a clang build to the latest version","Thanks for raising this.
At the moment the benefits of this PR can be seen here, as #1659 has not been merged:-
https://travis-ci.org/github/aquesnel/xrdp/builds/721903430
My own preference would be to turn this round and make all the builds focal apart from a single xenial build. However, when I tried this myself I discovered libfdk-aac-dev seems to be missing for i386.
So another approach might be to keep i386 at xenial (for 'legacy') and move everything else forward to focal.
I hope this helps - sorry if it raises more questions than it answers.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1666,2020-08-28T04:48:06Z,2020-09-10T00:05:25Z,2020-09-11T02:35:43Z,MERGED,True,28,14,1,https://github.com/aquesnel,Adding a Travis CI build using Ubuntu Focal,2,[],https://github.com/neutrinolabs/xrdp/pull/1666,https://github.com/aquesnel,3,https://github.com/neutrinolabs/xrdp/pull/1666#issuecomment-689259394,"Follow up for #1659 to add a CI build using the Ubuntu Focal platform version of the gcc compiler and dependencies.
This pull request depends on compiler error fixes in #1659 being merged.
Open questions

should all CI builds be updated to use the latest platform/compiler versions? Or should one/most builds use the older platform version to verify that xrdp continutes to build on the older platform?

TODO:

add/upgrade a clang build to the latest version","I've updated this pull request with @matt335672 's suggestion of using the latest Ubuntu for all 64-bit builds, and only using ubuntu xenial for the 32-bit builds.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1666,2020-08-28T04:48:06Z,2020-09-10T00:05:25Z,2020-09-11T02:35:43Z,MERGED,True,28,14,1,https://github.com/aquesnel,Adding a Travis CI build using Ubuntu Focal,2,[],https://github.com/neutrinolabs/xrdp/pull/1666,https://github.com/matt335672,4,https://github.com/neutrinolabs/xrdp/pull/1666#issuecomment-689439933,"Follow up for #1659 to add a CI build using the Ubuntu Focal platform version of the gcc compiler and dependencies.
This pull request depends on compiler error fixes in #1659 being merged.
Open questions

should all CI builds be updated to use the latest platform/compiler versions? Or should one/most builds use the older platform version to verify that xrdp continutes to build on the older platform?

TODO:

add/upgrade a clang build to the latest version","I'm certainly happy with this. I just pulled the commits into a temp branch in my own repo and ran it through Travis. Results are here. Using the name: tags helps the readability I think.
What do you think @metalefty?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1666,2020-08-28T04:48:06Z,2020-09-10T00:05:25Z,2020-09-11T02:35:43Z,MERGED,True,28,14,1,https://github.com/aquesnel,Adding a Travis CI build using Ubuntu Focal,2,[],https://github.com/neutrinolabs/xrdp/pull/1666,https://github.com/metalefty,5,https://github.com/neutrinolabs/xrdp/pull/1666#issuecomment-689558570,"Follow up for #1659 to add a CI build using the Ubuntu Focal platform version of the gcc compiler and dependencies.
This pull request depends on compiler error fixes in #1659 being merged.
Open questions

should all CI builds be updated to use the latest platform/compiler versions? Or should one/most builds use the older platform version to verify that xrdp continutes to build on the older platform?

TODO:

add/upgrade a clang build to the latest version",Totally agree.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1666,2020-08-28T04:48:06Z,2020-09-10T00:05:25Z,2020-09-11T02:35:43Z,MERGED,True,28,14,1,https://github.com/aquesnel,Adding a Travis CI build using Ubuntu Focal,2,[],https://github.com/neutrinolabs/xrdp/pull/1666,https://github.com/aquesnel,6,https://github.com/neutrinolabs/xrdp/pull/1666#issuecomment-689580385,"Follow up for #1659 to add a CI build using the Ubuntu Focal platform version of the gcc compiler and dependencies.
This pull request depends on compiler error fixes in #1659 being merged.
Open questions

should all CI builds be updated to use the latest platform/compiler versions? Or should one/most builds use the older platform version to verify that xrdp continutes to build on the older platform?

TODO:

add/upgrade a clang build to the latest version","note
This pull request depends on the pull request #1659 being merged in order to not break the build. Since #1659 has been merged, this pull request is now unblocked and can be safely merged once it has been approved.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1668,2020-08-29T08:40:47Z,2020-09-09T09:10:14Z,2020-09-09T09:10:15Z,MERGED,True,80,9,10,https://github.com/bolkedebruin,Add support for token authentication,3,[],https://github.com/neutrinolabs/xrdp/pull/1668,https://github.com/bolkedebruin,1,https://github.com/neutrinolabs/xrdp/pull/1668,"This feature allows to embed a token in the username field. Tokens
are separated from the username by the ASCII field separator character
0x1F (unicode 0x001F).
See #1667
cc @metalefty @matt335672","This feature allows to embed a token in the username field. Tokens
are separated from the username by the ASCII field separator character
0x1F (unicode 0x001F).
See #1667
cc @metalefty @matt335672",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1668,2020-08-29T08:40:47Z,2020-09-09T09:10:14Z,2020-09-09T09:10:15Z,MERGED,True,80,9,10,https://github.com/bolkedebruin,Add support for token authentication,3,[],https://github.com/neutrinolabs/xrdp/pull/1668,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/1668#issuecomment-685473510,"This feature allows to embed a token in the username field. Tokens
are separated from the username by the ASCII field separator character
0x1F (unicode 0x001F).
See #1667
cc @metalefty @matt335672","I've had a look at this too, and I've got no comments - looks very readable.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1668,2020-08-29T08:40:47Z,2020-09-09T09:10:14Z,2020-09-09T09:10:15Z,MERGED,True,80,9,10,https://github.com/bolkedebruin,Add support for token authentication,3,[],https://github.com/neutrinolabs/xrdp/pull/1668,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/1668#issuecomment-685491545,"This feature allows to embed a token in the username field. Tokens
are separated from the username by the ASCII field separator character
0x1F (unicode 0x001F).
See #1667
cc @metalefty @matt335672","I haven't understood what's the benefit of this PR (just haven't read #1667 cover to cover) but the code looks very readable.
You don't need to wait until I understand the benefit. If there's no disbenefit, feel free to merge this.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1668,2020-08-29T08:40:47Z,2020-09-09T09:10:14Z,2020-09-09T09:10:15Z,MERGED,True,80,9,10,https://github.com/bolkedebruin,Add support for token authentication,3,[],https://github.com/neutrinolabs/xrdp/pull/1668,https://github.com/bolkedebruin,4,https://github.com/neutrinolabs/xrdp/pull/1668#issuecomment-685639142,"This feature allows to embed a token in the username field. Tokens
are separated from the username by the ASCII field separator character
0x1F (unicode 0x001F).
See #1667
cc @metalefty @matt335672","@metalefty sure I understand that if you read it out of context that might be the case. The PR allows you to store, for example, a JWT that is short lived in an RDP file. We deploy this together with a remote desktop gateway (https://github.com/bolkedebruin/rdpgw) that allows to embed custome tokens. We then enable ""pam_jwt"" (https://github.com/bolkedebruin/pam-jwt) for xrdp-sesman to verify such tokens. The end result for the user is that it is single sign on without the need for kerberos / network level authentication.
The challenge is that there is very limited space (255 characters / 511 bytes) hence the other PR.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1668,2020-08-29T08:40:47Z,2020-09-09T09:10:14Z,2020-09-09T09:10:15Z,MERGED,True,80,9,10,https://github.com/bolkedebruin,Add support for token authentication,3,[],https://github.com/neutrinolabs/xrdp/pull/1668,https://github.com/matt335672,5,https://github.com/neutrinolabs/xrdp/pull/1668#issuecomment-686607991,"This feature allows to embed a token in the username field. Tokens
are separated from the username by the ASCII field separator character
0x1F (unicode 0x001F).
See #1667
cc @metalefty @matt335672","Hi @bolkedebruin
One thing I missed - could you add a brief description of the extra parameters to docs/man/xrdp.ini.5.in then we can merge this.
Thanks",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1668,2020-08-29T08:40:47Z,2020-09-09T09:10:14Z,2020-09-09T09:10:15Z,MERGED,True,80,9,10,https://github.com/bolkedebruin,Add support for token authentication,3,[],https://github.com/neutrinolabs/xrdp/pull/1668,https://github.com/bolkedebruin,6,https://github.com/neutrinolabs/xrdp/pull/1668#issuecomment-686614669,"This feature allows to embed a token in the username field. Tokens
are separated from the username by the ASCII field separator character
0x1F (unicode 0x001F).
See #1667
cc @metalefty @matt335672",Absolutely. Next week most likely AFK mostly,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1668,2020-08-29T08:40:47Z,2020-09-09T09:10:14Z,2020-09-09T09:10:15Z,MERGED,True,80,9,10,https://github.com/bolkedebruin,Add support for token authentication,3,[],https://github.com/neutrinolabs/xrdp/pull/1668,https://github.com/bolkedebruin,7,https://github.com/neutrinolabs/xrdp/pull/1668#issuecomment-689358280,"This feature allows to embed a token in the username field. Tokens
are separated from the username by the ASCII field separator character
0x1F (unicode 0x001F).
See #1667
cc @metalefty @matt335672",@matt335672 ready for review/merge,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1668,2020-08-29T08:40:47Z,2020-09-09T09:10:14Z,2020-09-09T09:10:15Z,MERGED,True,80,9,10,https://github.com/bolkedebruin,Add support for token authentication,3,[],https://github.com/neutrinolabs/xrdp/pull/1668,https://github.com/matt335672,8,https://github.com/neutrinolabs/xrdp/pull/1668#issuecomment-689435141,"This feature allows to embed a token in the username field. Tokens
are separated from the username by the ASCII field separator character
0x1F (unicode 0x001F).
See #1667
cc @metalefty @matt335672",That's great - thanks.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1671,2020-08-31T05:31:59Z,2020-08-31T06:02:52Z,2020-08-31T06:05:49Z,MERGED,True,48,3,3,https://github.com/metalefty,Bump version to v0.9.14,3,[],https://github.com/neutrinolabs/xrdp/pull/1671,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1671,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1673,2020-09-01T14:15:33Z,,2022-01-05T21:49:38Z,OPEN,False,4,1,2,https://github.com/maxice8,Musl fixes,2,[],https://github.com/neutrinolabs/xrdp/pull/1673,https://github.com/maxice8,1,https://github.com/neutrinolabs/xrdp/pull/1673,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1673,2020-09-01T14:15:33Z,,2022-01-05T21:49:38Z,OPEN,False,4,1,2,https://github.com/maxice8,Musl fixes,2,[],https://github.com/neutrinolabs/xrdp/pull/1673,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/1673#issuecomment-1005589771,,"Sorry this is inline but I'm having problems with the review function right now.
Can you replace the 'Needed for putpwent' comment with 'Needed for putpwent on MUSL'?
Most of the user are expecting libc, and this won't make any sense on those platforms as the test macros are different. I can't see any platform-specific way to detect MUSL.
Also move the whole define up above all the includes. From https://www.gnu.org/software/libc/manual/html_node/Feature-Test-Macros.html:-

You should define these macros by using ‘#define’ preprocessor directives at the top of your source code files. These directives must come before any #include of a system header file. It is best to make them the very first thing in the file, preceded only by comments. You could also use the ‘-D’ option to GCC, but it’s better if you make the source files indicate their own meaning in a self-contained way.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1675,2020-09-02T11:07:45Z,2020-09-02T23:56:53Z,2020-09-08T09:23:14Z,MERGED,True,2,0,1,https://github.com/per-ok,Update xrdp_keyboard.ini for Norwegian keyboards,1,['new keyboard layout'],https://github.com/neutrinolabs/xrdp/pull/1675,https://github.com/per-ok,1,https://github.com/neutrinolabs/xrdp/pull/1675,Connecting via RDP using Norwegian keyboard always results in a default (US English?) keyboard mapping.,Connecting via RDP using Norwegian keyboard always results in a default (US English?) keyboard mapping.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1675,2020-09-02T11:07:45Z,2020-09-02T23:56:53Z,2020-09-08T09:23:14Z,MERGED,True,2,0,1,https://github.com/per-ok,Update xrdp_keyboard.ini for Norwegian keyboards,1,['new keyboard layout'],https://github.com/neutrinolabs/xrdp/pull/1675,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1675#issuecomment-685743796,Connecting via RDP using Norwegian keyboard always results in a default (US English?) keyboard mapping.,The keymap file km-00000414.ini is also needed.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1675,2020-09-02T11:07:45Z,2020-09-02T23:56:53Z,2020-09-08T09:23:14Z,MERGED,True,2,0,1,https://github.com/per-ok,Update xrdp_keyboard.ini for Norwegian keyboards,1,['new keyboard layout'],https://github.com/neutrinolabs/xrdp/pull/1675,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/1675#issuecomment-685744608,Connecting via RDP using Norwegian keyboard always results in a default (US English?) keyboard mapping.,"See also other new keyboard layout labeled PRs.
https://github.com/neutrinolabs/xrdp/pulls?q=is%3Apr+label%3A%22new+keyboard+layout%22+is%3Aclosed",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1675,2020-09-02T11:07:45Z,2020-09-02T23:56:53Z,2020-09-08T09:23:14Z,MERGED,True,2,0,1,https://github.com/per-ok,Update xrdp_keyboard.ini for Norwegian keyboards,1,['new keyboard layout'],https://github.com/neutrinolabs/xrdp/pull/1675,https://github.com/per-ok,4,https://github.com/neutrinolabs/xrdp/pull/1675#issuecomment-685774950,Connecting via RDP using Norwegian keyboard always results in a default (US English?) keyboard mapping.,"I believe it is already there:
https://github.com/neutrinolabs/xrdp/blob/devel/instfiles/km-00000414.ini",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1675,2020-09-02T11:07:45Z,2020-09-02T23:56:53Z,2020-09-08T09:23:14Z,MERGED,True,2,0,1,https://github.com/per-ok,Update xrdp_keyboard.ini for Norwegian keyboards,1,['new keyboard layout'],https://github.com/neutrinolabs/xrdp/pull/1675,https://github.com/metalefty,5,https://github.com/neutrinolabs/xrdp/pull/1675#issuecomment-686134056,Connecting via RDP using Norwegian keyboard always results in a default (US English?) keyboard mapping.,Indeed.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1680,2020-09-07T08:50:16Z,2020-09-07T09:01:36Z,2020-09-07T09:01:50Z,MERGED,True,4,1,1,https://github.com/matt335672,Fix compilation warnings/errors in xrdp-neutrinordp.c,1,[],https://github.com/neutrinolabs/xrdp/pull/1680,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1680,Resolves #1679,Resolves #1679,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1682,2020-09-08T21:13:54Z,2020-09-09T08:51:25Z,2020-09-09T13:43:19Z,MERGED,True,12,9,3,https://github.com/aquesnel,Fix warnings in chansrv_fuse.c,2,[],https://github.com/neutrinolabs/xrdp/pull/1682,https://github.com/aquesnel,1,https://github.com/neutrinolabs/xrdp/pull/1682,This pull request resolves #1678 by adding explicit int to pointer casts to resolve the compiler warnings/errors.,This pull request resolves #1678 by adding explicit int to pointer casts to resolve the compiler warnings/errors.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1682,2020-09-08T21:13:54Z,2020-09-09T08:51:25Z,2020-09-09T13:43:19Z,MERGED,True,12,9,3,https://github.com/aquesnel,Fix warnings in chansrv_fuse.c,2,[],https://github.com/neutrinolabs/xrdp/pull/1682,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1682#issuecomment-689285359,This pull request resolves #1678 by adding explicit int to pointer casts to resolve the compiler warnings/errors.,I'm OK with this. @matt335672 what do you think?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1682,2020-09-08T21:13:54Z,2020-09-09T08:51:25Z,2020-09-09T13:43:19Z,MERGED,True,12,9,3,https://github.com/aquesnel,Fix warnings in chansrv_fuse.c,2,[],https://github.com/neutrinolabs/xrdp/pull/1682,https://github.com/matt335672,3,https://github.com/neutrinolabs/xrdp/pull/1682#issuecomment-689424418,This pull request resolves #1678 by adding explicit int to pointer casts to resolve the compiler warnings/errors.,"Looks good - thanks @aquesnel
I'll do the merge.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1686,2020-09-12T22:57:12Z,2020-09-16T10:07:02Z,2020-10-04T14:43:42Z,MERGED,True,81,18,1,https://github.com/aquesnel,Use a single type for the fuse file handle callback context,1,[],https://github.com/neutrinolabs/xrdp/pull/1686,https://github.com/aquesnel,1,https://github.com/neutrinolabs/xrdp/pull/1686,"Follow up from the discussion in #1678 about the multiple types assigned to the fuse file handle callback context.
problem
fuse_file_info.fh field is used to store a pointer two different types: an xfuse_handle and a xfs_dir_handle. There is no type identifier in the handle, so without further investigation it is not clear if there type error in the code.
solution
use a single type in fuse_file_info.fh by adding a xfs_dir_handle pointer as a field of xfuse_handle and then only set the xfuse_handle pointer as the fuse_file_info.fh field.
risks

No testing performed.

I haven't setup xrdp with a client that uses the fuse file system for manual testing, nor do I know which rdp functionality to execute to exercise this code.
No unit test coverage of this functionality


I'm not an expert on the fuse callbacks, therefore there might be edge cases of memory leaks that I'm not aware of. I tried to follow the existing logic for allocation and freeing of the structs to reduce the risk of introducing a bug.","Follow up from the discussion in #1678 about the multiple types assigned to the fuse file handle callback context.
problem
fuse_file_info.fh field is used to store a pointer two different types: an xfuse_handle and a xfs_dir_handle. There is no type identifier in the handle, so without further investigation it is not clear if there type error in the code.
solution
use a single type in fuse_file_info.fh by adding a xfs_dir_handle pointer as a field of xfuse_handle and then only set the xfuse_handle pointer as the fuse_file_info.fh field.
risks

No testing performed.

I haven't setup xrdp with a client that uses the fuse file system for manual testing, nor do I know which rdp functionality to execute to exercise this code.
No unit test coverage of this functionality


I'm not an expert on the fuse callbacks, therefore there might be edge cases of memory leaks that I'm not aware of. I tried to follow the existing logic for allocation and freeing of the structs to reduce the risk of introducing a bug.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1686,2020-09-12T22:57:12Z,2020-09-16T10:07:02Z,2020-10-04T14:43:42Z,MERGED,True,81,18,1,https://github.com/aquesnel,Use a single type for the fuse file handle callback context,1,[],https://github.com/neutrinolabs/xrdp/pull/1686,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/1686#issuecomment-691856520,"Follow up from the discussion in #1678 about the multiple types assigned to the fuse file handle callback context.
problem
fuse_file_info.fh field is used to store a pointer two different types: an xfuse_handle and a xfs_dir_handle. There is no type identifier in the handle, so without further investigation it is not clear if there type error in the code.
solution
use a single type in fuse_file_info.fh by adding a xfs_dir_handle pointer as a field of xfuse_handle and then only set the xfuse_handle pointer as the fuse_file_info.fh field.
risks

No testing performed.

I haven't setup xrdp with a client that uses the fuse file system for manual testing, nor do I know which rdp functionality to execute to exercise this code.
No unit test coverage of this functionality


I'm not an expert on the fuse callbacks, therefore there might be edge cases of memory leaks that I'm not aware of. I tried to follow the existing logic for allocation and freeing of the structs to reduce the risk of introducing a bug.","Looks good, but I haven't tested it yet.
Couple of comments at this stage:-

Probably worth avoiding mixing intptr_t and tintptr in the same module. Could you stick with tintptr for now? I believe intptr_t was introduced with C99, and we don't currently require that. Personally I think we should be moving in that direction but that could be debated with a separate PR.
Please add a comment for the dir_handle member variable, as it's only required for directory operations.

Thanks again",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1686,2020-09-12T22:57:12Z,2020-09-16T10:07:02Z,2020-10-04T14:43:42Z,MERGED,True,81,18,1,https://github.com/aquesnel,Use a single type for the fuse file handle callback context,1,[],https://github.com/neutrinolabs/xrdp/pull/1686,https://github.com/matt335672,3,https://github.com/neutrinolabs/xrdp/pull/1686#issuecomment-692629722,"Follow up from the discussion in #1678 about the multiple types assigned to the fuse file handle callback context.
problem
fuse_file_info.fh field is used to store a pointer two different types: an xfuse_handle and a xfs_dir_handle. There is no type identifier in the handle, so without further investigation it is not clear if there type error in the code.
solution
use a single type in fuse_file_info.fh by adding a xfs_dir_handle pointer as a field of xfuse_handle and then only set the xfuse_handle pointer as the fuse_file_info.fh field.
risks

No testing performed.

I haven't setup xrdp with a client that uses the fuse file system for manual testing, nor do I know which rdp functionality to execute to exercise this code.
No unit test coverage of this functionality


I'm not an expert on the fuse callbacks, therefore there might be edge cases of memory leaks that I'm not aware of. I tried to follow the existing logic for allocation and freeing of the structs to reduce the risk of introducing a bug.","Thanks for the prompt response.
I've run regression checks on this by pulling and building xrdp on a redirected filesystem and it all works fine.
Can you fix the two 'dierctory' mis-spellings and squish this into a single commit? Then I think we can merge it.",True,{'THUMBS_UP': ['https://github.com/aquesnel']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1686,2020-09-12T22:57:12Z,2020-09-16T10:07:02Z,2020-10-04T14:43:42Z,MERGED,True,81,18,1,https://github.com/aquesnel,Use a single type for the fuse file handle callback context,1,[],https://github.com/neutrinolabs/xrdp/pull/1686,https://github.com/matt335672,4,https://github.com/neutrinolabs/xrdp/pull/1686#issuecomment-693307591,"Follow up from the discussion in #1678 about the multiple types assigned to the fuse file handle callback context.
problem
fuse_file_info.fh field is used to store a pointer two different types: an xfuse_handle and a xfs_dir_handle. There is no type identifier in the handle, so without further investigation it is not clear if there type error in the code.
solution
use a single type in fuse_file_info.fh by adding a xfs_dir_handle pointer as a field of xfuse_handle and then only set the xfuse_handle pointer as the fuse_file_info.fh field.
risks

No testing performed.

I haven't setup xrdp with a client that uses the fuse file system for manual testing, nor do I know which rdp functionality to execute to exercise this code.
No unit test coverage of this functionality


I'm not an expert on the fuse callbacks, therefore there might be edge cases of memory leaks that I'm not aware of. I tried to follow the existing logic for allocation and freeing of the structs to reduce the risk of introducing a bug.",Thanks for the contribution!,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1688,2020-09-15T13:25:18Z,,2020-09-16T10:15:39Z,OPEN,False,3,0,1,https://github.com/zero77,Update README.md,1,[],https://github.com/neutrinolabs/xrdp/pull/1688,https://github.com/zero77,1,https://github.com/neutrinolabs/xrdp/pull/1688,This quickly shows all package versions across different distros at a glance.,This quickly shows all package versions across different distros at a glance.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1688,2020-09-15T13:25:18Z,,2020-09-16T10:15:39Z,OPEN,False,3,0,1,https://github.com/zero77,Update README.md,1,[],https://github.com/neutrinolabs/xrdp/pull/1688,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/1688#issuecomment-693298024,This quickly shows all package versions across different distros at a glance.,"It's a nice idea.
I'd like to see some sort of disclaimer however that the link is provided by a third party which is nothing to do with project directly.
@metalefty - what do you think?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1688,2020-09-15T13:25:18Z,,2020-09-16T10:15:39Z,OPEN,False,3,0,1,https://github.com/zero77,Update README.md,1,[],https://github.com/neutrinolabs/xrdp/pull/1688,https://github.com/zero77,3,https://github.com/neutrinolabs/xrdp/pull/1688#issuecomment-693305464,This quickly shows all package versions across different distros at a glance.,"@matt335672
It may be a bit big but, this is more self explanatory.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1688,2020-09-15T13:25:18Z,,2020-09-16T10:15:39Z,OPEN,False,3,0,1,https://github.com/zero77,Update README.md,1,[],https://github.com/neutrinolabs/xrdp/pull/1688,https://github.com/matt335672,4,https://github.com/neutrinolabs/xrdp/pull/1688#issuecomment-693312041,This quickly shows all package versions across different distros at a glance.,"Thanks,
I've got a slight preference for a link rather than an image myself but I'm not that fussed personally about the presentation.
However it's done, I think it's important that we make it clear that the information is being provided by a third party which is nothing to do with us - we have no control over what is actually being presented by the website on the other end of the link.
I think it would be wrong to give an impression to the casual visitor that we're responsible for any packaging. Otherwise we'll get packaging issues raised against us which we can't do anything about directly.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1691,2020-09-18T04:18:24Z,2020-09-18T09:28:08Z,2020-09-19T10:26:15Z,MERGED,True,1,1,1,https://github.com/FelixZhang,genkeymap: Fix an array declaration conflict,1,[],https://github.com/neutrinolabs/xrdp/pull/1691,https://github.com/FelixZhang,1,https://github.com/neutrinolabs/xrdp/pull/1691,"The conflict on the size of xfree86_to_evdev between genkeymap.c and
evdev-map.c is causing build failures in openSUSE builds","The conflict on the size of xfree86_to_evdev between genkeymap.c and
evdev-map.c is causing build failures in openSUSE builds",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1691,2020-09-18T04:18:24Z,2020-09-18T09:28:08Z,2020-09-19T10:26:15Z,MERGED,True,1,1,1,https://github.com/FelixZhang,genkeymap: Fix an array declaration conflict,1,[],https://github.com/neutrinolabs/xrdp/pull/1691,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/1691#issuecomment-694761288,"The conflict on the size of xfree86_to_evdev between genkeymap.c and
evdev-map.c is causing build failures in openSUSE builds","Nice find.
I'm sure this could do with tidying up (there's a lot of magic numbers in here), but I can see why the static analysis is picking it up.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1691,2020-09-18T04:18:24Z,2020-09-18T09:28:08Z,2020-09-19T10:26:15Z,MERGED,True,1,1,1,https://github.com/FelixZhang,genkeymap: Fix an array declaration conflict,1,[],https://github.com/neutrinolabs/xrdp/pull/1691,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/1691#issuecomment-695196014,"The conflict on the size of xfree86_to_evdev between genkeymap.c and
evdev-map.c is causing build failures in openSUSE builds","Hi @FelixZhang , it's been a while. Thank you for your xrdp housekeeping for openSUSE. Nice find from me, too.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1692,2020-09-22T08:26:49Z,,2021-08-31T02:11:56Z,OPEN,False,109,4,3,https://github.com/okhowang,parse monitor/display info,1,[],https://github.com/neutrinolabs/xrdp/pull/1692,https://github.com/okhowang,1,https://github.com/neutrinolabs/xrdp/pull/1692,"add parsing monitorex pdu and display info in core data pdu,
and store it into client_info
relate #1612","add parsing monitorex pdu and display info in core data pdu,
and store it into client_info
relate #1612",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1702,2020-10-19T01:38:42Z,2020-10-19T05:33:54Z,2020-10-19T05:34:30Z,MERGED,True,3,0,1,https://github.com/yifanjiang,startwm.sh: Additionally support /usr/etc/X11/xdm/Xsession,1,[],https://github.com/neutrinolabs/xrdp/pull/1702,https://github.com/yifanjiang,1,https://github.com/neutrinolabs/xrdp/pull/1702,"SUSE distributions are switched to use /usr/etc for system configuration, Xsession startup files is involved.
https://lists.opensuse.org/opensuse-factory/2019-08/msg00113.html","SUSE distributions are switched to use /usr/etc for system configuration, Xsession startup files is involved.
https://lists.opensuse.org/opensuse-factory/2019-08/msg00113.html",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1702,2020-10-19T01:38:42Z,2020-10-19T05:33:54Z,2020-10-19T05:34:30Z,MERGED,True,3,0,1,https://github.com/yifanjiang,startwm.sh: Additionally support /usr/etc/X11/xdm/Xsession,1,[],https://github.com/neutrinolabs/xrdp/pull/1702,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1702#issuecomment-711603514,"SUSE distributions are switched to use /usr/etc for system configuration, Xsession startup files is involved.
https://lists.opensuse.org/opensuse-factory/2019-08/msg00113.html","Merged, thanks! Reference is always important.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1703,2020-10-19T16:14:22Z,2020-12-22T12:10:44Z,2020-12-22T12:10:57Z,MERGED,True,965,572,58,https://github.com/matt335672,Allow FuseMountName for chansrv to be absolute path,2,[],https://github.com/neutrinolabs/xrdp/pull/1703,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1703,"This PR primarily addresses #1048 (Drive redirection location).
It also contains:-

a fix for the first of the two issues mentioned in #1658 (xrdp-chansrv become defunct in docker while file copy)
a way to disable the FUSE filesystem at runtime if the system was built with --enable-fuse.

Documentation for the new features has been added to sesman.ini and the manpage xrdp-sesman.ini(5).
The code has been largely tested by @hmakmur, but, as ever, could do with a second pair of eyes.
An extra module string_calls.c has been added to contain the g_format_info_string() function. Over time, some other string functions which are not operating-system specific could be moved here from os_calls.c.","This PR primarily addresses #1048 (Drive redirection location).
It also contains:-

a fix for the first of the two issues mentioned in #1658 (xrdp-chansrv become defunct in docker while file copy)
a way to disable the FUSE filesystem at runtime if the system was built with --enable-fuse.

Documentation for the new features has been added to sesman.ini and the manpage xrdp-sesman.ini(5).
The code has been largely tested by @hmakmur, but, as ever, could do with a second pair of eyes.
An extra module string_calls.c has been added to contain the g_format_info_string() function. Over time, some other string functions which are not operating-system specific could be moved here from os_calls.c.",True,{'HEART': ['https://github.com/ibaldonl']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1703,2020-10-19T16:14:22Z,2020-12-22T12:10:44Z,2020-12-22T12:10:57Z,MERGED,True,965,572,58,https://github.com/matt335672,Allow FuseMountName for chansrv to be absolute path,2,[],https://github.com/neutrinolabs/xrdp/pull/1703,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1703#issuecomment-718311436,"This PR primarily addresses #1048 (Drive redirection location).
It also contains:-

a fix for the first of the two issues mentioned in #1658 (xrdp-chansrv become defunct in docker while file copy)
a way to disable the FUSE filesystem at runtime if the system was built with --enable-fuse.

Documentation for the new features has been added to sesman.ini and the manpage xrdp-sesman.ini(5).
The code has been largely tested by @hmakmur, but, as ever, could do with a second pair of eyes.
An extra module string_calls.c has been added to contain the g_format_info_string() function. Over time, some other string functions which are not operating-system specific could be moved here from os_calls.c.",I haven't tested yet but overall LGTM.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1703,2020-10-19T16:14:22Z,2020-12-22T12:10:44Z,2020-12-22T12:10:57Z,MERGED,True,965,572,58,https://github.com/matt335672,Allow FuseMountName for chansrv to be absolute path,2,[],https://github.com/neutrinolabs/xrdp/pull/1703,https://github.com/matt335672,3,https://github.com/neutrinolabs/xrdp/pull/1703#issuecomment-743159711,"This PR primarily addresses #1048 (Drive redirection location).
It also contains:-

a fix for the first of the two issues mentioned in #1658 (xrdp-chansrv become defunct in docker while file copy)
a way to disable the FUSE filesystem at runtime if the system was built with --enable-fuse.

Documentation for the new features has been added to sesman.ini and the manpage xrdp-sesman.ini(5).
The code has been largely tested by @hmakmur, but, as ever, could do with a second pair of eyes.
An extra module string_calls.c has been added to contain the g_format_info_string() function. Over time, some other string functions which are not operating-system specific could be moved here from os_calls.c.","Hadn't noticed this one was no longer mergeable - it now is.
I've squashed the original commits into 1, and added another one which moves g_text2bool() into string_calls, where it joins g_bool2text(). So that's now consistent.
@metalefty - there's a bunch of string calls in os_calls.h which could be moved in to string_calls.h:-

  
    
      xrdp/common/os_calls.h
    
    
        Lines 122 to 142
      in
      bfe76e0
    
  
  
    

        
          
           int      g_strlen(const char* text); 
        

        
          
           const char *g_strchr(const char *text, int c); 
        

        
          
           char*    g_strcpy(char* dest, const char* src); 
        

        
          
           char*    g_strncpy(char* dest, const char* src, int len); 
        

        
          
           char*    g_strcat(char* dest, const char* src); 
        

        
          
           char*    g_strncat(char* dest, const char* src, int len); 
        

        
          
           char*    g_strdup(const char* in); 
        

        
          
           char*    g_strndup(const char* in, const unsigned int maxlen); 
        

        
          
           int      g_strcmp(const char* c1, const char* c2); 
        

        
          
           int      g_strncmp(const char* c1, const char* c2, int len); 
        

        
          
           int      g_strncmp_d(const char* c1, const char* c2, const char delim, int len); 
        

        
          
           int      g_strcasecmp(const char* c1, const char* c2); 
        

        
          
           int      g_strncasecmp(const char* c1, const char* c2, int len); 
        

        
          
           int      g_atoi(const char* str); 
        

        
          
           int      g_htoi(char* str); 
        

        
          
           int      g_bytes_to_hexstr(const void *bytes, int num_bytes, char *out_str, 
        

        
          
                                             int bytes_out_str); 
        

        
          
           int      g_pos(const char* str, const char* to_find); 
        

        
          
           int      g_mbstowcs(twchar* dest, const char* src, int n); 
        

        
          
           int      g_wcstombs(char* dest, const twchar* src, int n); 
        

        
          
           int      g_strtrim(char* str, int trim_flags); 
        
    
  


I could move them now. Quite a few files might need #include ""string_calls.h"" adding, but I think that's a pretty minimal change, provided it stays as a single commit. Do you agree? A separate PR might be a good idea.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1703,2020-10-19T16:14:22Z,2020-12-22T12:10:44Z,2020-12-22T12:10:57Z,MERGED,True,965,572,58,https://github.com/matt335672,Allow FuseMountName for chansrv to be absolute path,2,[],https://github.com/neutrinolabs/xrdp/pull/1703,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/1703#issuecomment-747192975,"This PR primarily addresses #1048 (Drive redirection location).
It also contains:-

a fix for the first of the two issues mentioned in #1658 (xrdp-chansrv become defunct in docker while file copy)
a way to disable the FUSE filesystem at runtime if the system was built with --enable-fuse.

Documentation for the new features has been added to sesman.ini and the manpage xrdp-sesman.ini(5).
The code has been largely tested by @hmakmur, but, as ever, could do with a second pair of eyes.
An extra module string_calls.c has been added to contain the g_format_info_string() function. Over time, some other string functions which are not operating-system specific could be moved here from os_calls.c.","@matt335672
Hi, sorry for the delay. Of course, a separate PR is a good idea but let's add a single commit to this PR to move them.
Merge it when you finished.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1704,2020-10-19T17:07:50Z,2020-10-21T08:28:28Z,2020-10-21T08:28:51Z,MERGED,True,6,6,2,https://github.com/robertoetcheverryr,Updated man and .ini file regarding address:port parameters.,1,[],https://github.com/neutrinolabs/xrdp/pull/1704,https://github.com/robertoetcheverryr,1,https://github.com/neutrinolabs/xrdp/pull/1704,"As discussed in #1610, updated the man to clarify that the address property is no longer supported and warn users that interfaces MUST be UP for xrdp to correctly start.","As discussed in #1610, updated the man to clarify that the address property is no longer supported and warn users that interfaces MUST be UP for xrdp to correctly start.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1704,2020-10-19T17:07:50Z,2020-10-21T08:28:28Z,2020-10-21T08:28:51Z,MERGED,True,6,6,2,https://github.com/robertoetcheverryr,Updated man and .ini file regarding address:port parameters.,1,[],https://github.com/neutrinolabs/xrdp/pull/1704,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/1704#issuecomment-712674688,"As discussed in #1610, updated the man to clarify that the address property is no longer supported and warn users that interfaces MUST be UP for xrdp to correctly start.","Thanks again - just one comment above.
When we've merged this I'll create a feature request to support IP_FREEBIND where possible, and then I think we can close #1610. Does that cover things from your perspective?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1704,2020-10-19T17:07:50Z,2020-10-21T08:28:28Z,2020-10-21T08:28:51Z,MERGED,True,6,6,2,https://github.com/robertoetcheverryr,Updated man and .ini file regarding address:port parameters.,1,[],https://github.com/neutrinolabs/xrdp/pull/1704,https://github.com/robertoetcheverryr,3,https://github.com/neutrinolabs/xrdp/pull/1704#issuecomment-712825561,"As discussed in #1610, updated the man to clarify that the address property is no longer supported and warn users that interfaces MUST be UP for xrdp to correctly start.",I think so. Thanks to you as well.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1704,2020-10-19T17:07:50Z,2020-10-21T08:28:28Z,2020-10-21T08:28:51Z,MERGED,True,6,6,2,https://github.com/robertoetcheverryr,Updated man and .ini file regarding address:port parameters.,1,[],https://github.com/neutrinolabs/xrdp/pull/1704,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/1704#issuecomment-713227584,"As discussed in #1610, updated the man to clarify that the address property is no longer supported and warn users that interfaces MUST be UP for xrdp to correctly start.",It turned xrdp no longer refers address in xrdp.ini since d6229df.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1704,2020-10-19T17:07:50Z,2020-10-21T08:28:28Z,2020-10-21T08:28:51Z,MERGED,True,6,6,2,https://github.com/robertoetcheverryr,Updated man and .ini file regarding address:port parameters.,1,[],https://github.com/neutrinolabs/xrdp/pull/1704,https://github.com/matt335672,5,https://github.com/neutrinolabs/xrdp/pull/1704#issuecomment-713402115,"As discussed in #1610, updated the man to clarify that the address property is no longer supported and warn users that interfaces MUST be UP for xrdp to correctly start.",Thanks for your contribution @robertoetcheverryr !,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1706,2020-10-20T09:20:33Z,2020-11-17T09:31:14Z,2020-11-17T09:31:38Z,MERGED,True,112,35,11,https://github.com/matt335672,Fix neutrinordp buffering,1,[],https://github.com/neutrinolabs/xrdp/pull/1706,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1706,"This PR primarily addresses #1634 and #1608 where displaying a video over a slow link causes XRDP to buffer unsent packets without a limit.
The basic issue is that the neutrinordp module is not making use of the source_info mechanism which is designed to throttle inputs when they are producing too much output.
I've also made some code improvements while implementing this as follows:-

A comment has been added to the struct source_infodefinition in trans.h explaining what this structure is used for.
An enum is now used for the cur_source member variable of this struct rather than an int to help when using a symbolic debugger.
The various XRDP modules for the backends had tintptr si (i.e. void *) member definitions in their header files for the module source_info pointer. I've replaced the void * pointers with pointers to incomplete type declarations as follows:-
struct source_info;  /* Incomplete type */
. . .
struct mod
{
    . . .
    struct_source_info *si;
    . . .

This prevents the need for pointer casting and hence improves compile-time checking.","This PR primarily addresses #1634 and #1608 where displaying a video over a slow link causes XRDP to buffer unsent packets without a limit.
The basic issue is that the neutrinordp module is not making use of the source_info mechanism which is designed to throttle inputs when they are producing too much output.
I've also made some code improvements while implementing this as follows:-

A comment has been added to the struct source_infodefinition in trans.h explaining what this structure is used for.
An enum is now used for the cur_source member variable of this struct rather than an int to help when using a symbolic debugger.
The various XRDP modules for the backends had tintptr si (i.e. void *) member definitions in their header files for the module source_info pointer. I've replaced the void * pointers with pointers to incomplete type declarations as follows:-
struct source_info;  /* Incomplete type */
. . .
struct mod
{
    . . .
    struct_source_info *si;
    . . .

This prevents the need for pointer casting and hence improves compile-time checking.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1706,2020-10-20T09:20:33Z,2020-11-17T09:31:14Z,2020-11-17T09:31:38Z,MERGED,True,112,35,11,https://github.com/matt335672,Fix neutrinordp buffering,1,[],https://github.com/neutrinolabs/xrdp/pull/1706,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1706#issuecomment-728466387,"This PR primarily addresses #1634 and #1608 where displaying a video over a slow link causes XRDP to buffer unsent packets without a limit.
The basic issue is that the neutrinordp module is not making use of the source_info mechanism which is designed to throttle inputs when they are producing too much output.
I've also made some code improvements while implementing this as follows:-

A comment has been added to the struct source_infodefinition in trans.h explaining what this structure is used for.
An enum is now used for the cur_source member variable of this struct rather than an int to help when using a symbolic debugger.
The various XRDP modules for the backends had tintptr si (i.e. void *) member definitions in their header files for the module source_info pointer. I've replaced the void * pointers with pointers to incomplete type declarations as follows:-
struct source_info;  /* Incomplete type */
. . .
struct mod
{
    . . .
    struct_source_info *si;
    . . .

This prevents the need for pointer casting and hence improves compile-time checking.",I haven't tested this yet but the code looks fine. Feel free to merge.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1708,2020-10-24T18:15:21Z,2020-11-30T02:47:18Z,2020-11-30T03:12:06Z,MERGED,True,1749,1391,41,https://github.com/aquesnel,Unify logging in sesman,1,[],https://github.com/neutrinolabs/xrdp/pull/1708,https://github.com/aquesnel,1,https://github.com/neutrinolabs/xrdp/pull/1708,Follow-on pull request to #1633 which migrates all logging in sesman to use the LOG() and LOG_DEVEL() macros.,Follow-on pull request to #1633 which migrates all logging in sesman to use the LOG() and LOG_DEVEL() macros.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1708,2020-10-24T18:15:21Z,2020-11-30T02:47:18Z,2020-11-30T03:12:06Z,MERGED,True,1749,1391,41,https://github.com/aquesnel,Unify logging in sesman,1,[],https://github.com/neutrinolabs/xrdp/pull/1708,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/1708#issuecomment-716434256,Follow-on pull request to #1633 which migrates all logging in sesman to use the LOG() and LOG_DEVEL() macros.,"Hi @aquesnel
Thanks very much for this. I was half expecting it it show up soon!
I've just run a few textual modifications, and I'm pretty sure that the vast majority of this PR, with the exception of chansrv/smartcard_pcsc.c is just replacing log_message function calls with LOG macro invocations. Is that correct?
Assuming it is, we can focus the discussion on chansrv/smartcard_pcsc.c. Comments are:-

The majority of the LLOGLN(0, calls you've replaced (rather than the 10, variety) are generally reporting errors, and so should probably be replaced with LOG(LOG_LEVEL_ERROR,. Exceptions are the calls at lines 1703, 1747, 1751, 1755, 1842 and 1885 which look like they should be LOG_DEVEL.
There's a call to g_hexdump() at line 491 which is part of the error reporting / debugging mechanism. We could add similar functionality to the logging module, but given this won't be needed a lot, the simplest thing might be to comment out this line for now (as as been done elsewhere, I've just noticed).",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1708,2020-10-24T18:15:21Z,2020-11-30T02:47:18Z,2020-11-30T03:12:06Z,MERGED,True,1749,1391,41,https://github.com/aquesnel,Unify logging in sesman,1,[],https://github.com/neutrinolabs/xrdp/pull/1708,https://github.com/aquesnel,3,https://github.com/neutrinolabs/xrdp/pull/1708#issuecomment-716442004,Follow-on pull request to #1633 which migrates all logging in sesman to use the LOG() and LOG_DEVEL() macros.,"@matt335672 ,
Yes you are correct, this commit was created by running a find and replace over the code. I created a shell script to handle the weirdness of the double parenthesis of some of the old macros. I can post this script or add it to the pull request if you think it's worth it.
For this change I assumed that the previous log levels were correct, and I'm happy to fix them up.
For the hex dump, I've already written a log hex dump function and macro, but I didn't include it in pull request since I hadn't seen a hex dump used in any of the files. I'll just include the function in this pull request.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1708,2020-10-24T18:15:21Z,2020-11-30T02:47:18Z,2020-11-30T03:12:06Z,MERGED,True,1749,1391,41,https://github.com/aquesnel,Unify logging in sesman,1,[],https://github.com/neutrinolabs/xrdp/pull/1708,https://github.com/matt335672,4,https://github.com/neutrinolabs/xrdp/pull/1708#issuecomment-716456892,Follow-on pull request to #1633 which migrates all logging in sesman to use the LOG() and LOG_DEVEL() macros.,"I don't think we need the script - this particular file is easy enough to review manually in any case.
The hex dump was a surprise to me too - I've not seen it before but I can see where it would be useful.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1708,2020-10-24T18:15:21Z,2020-11-30T02:47:18Z,2020-11-30T03:12:06Z,MERGED,True,1749,1391,41,https://github.com/aquesnel,Unify logging in sesman,1,[],https://github.com/neutrinolabs/xrdp/pull/1708,https://github.com/aquesnel,5,https://github.com/neutrinolabs/xrdp/pull/1708#issuecomment-720030372,Follow-on pull request to #1633 which migrates all logging in sesman to use the LOG() and LOG_DEVEL() macros.,"Hi @matt335672 ,
I've updated the code to include the LOG_DEVEL_HEXDUMP function and I've fixed up the log levels for chansrv/smartcard_pcsc.c. Please let me know if you have more feedback.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1708,2020-10-24T18:15:21Z,2020-11-30T02:47:18Z,2020-11-30T03:12:06Z,MERGED,True,1749,1391,41,https://github.com/aquesnel,Unify logging in sesman,1,[],https://github.com/neutrinolabs/xrdp/pull/1708,https://github.com/matt335672,6,https://github.com/neutrinolabs/xrdp/pull/1708#issuecomment-720387931,Follow-on pull request to #1633 which migrates all logging in sesman to use the LOG() and LOG_DEVEL() macros.,"Hi @aquesnel,
That's great - thanks.
A couple of general points:-

I like where you're going with this. think it makes sense to concentrate on your changes here and leave some other sesman changes (#1650 #1711) until we've got this one merged - they'll probably need tweaking to fit in with this one.
Predating your involvement in this project, there's a lot of private stuff in log.h which could be moved to log.c. I'd like to get this fixed at some stage, but I think it should be done as a separate PR later on. I'd be happy to work with you on getting that done. Does that sound reasonable to you?

Also, with reference to log.c, could I ask you to look at the astyle utility? It's mentioned in the XRDP [coding standard] (/neutrinolabs/xrdp/wiki/Coding-Style) and it's very useful at tidying up shared code. As part of this PR, it would be good to get log.c formatted with it. The way it could be used here is:-
define ARTISTIC_STYLE_PROJECT_OPTIONS=astyle_config.as
astyle log.c\*

The wildcard looks a bit odd, but is necessary with a single file. One hint I'll give is around line 729 where you've got dump_line_length =, you might need to add braces () around the expression or it will line everything up on the left.
I'll get on with a review of the code now. I might be a bit pressed for time over the next couple of days with family duties.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1708,2020-10-24T18:15:21Z,2020-11-30T02:47:18Z,2020-11-30T03:12:06Z,MERGED,True,1749,1391,41,https://github.com/aquesnel,Unify logging in sesman,1,[],https://github.com/neutrinolabs/xrdp/pull/1708,https://github.com/aquesnel,7,https://github.com/neutrinolabs/xrdp/pull/1708#issuecomment-726559442,Follow-on pull request to #1633 which migrates all logging in sesman to use the LOG() and LOG_DEVEL() macros.,"Hi @matt335672 ,
I've been trying to get astyle to format the log.c file nicely but I haven't figured out a non-hacky way to get the split dump_line_length = line to line up indented.
Diff pre- vs post- astyle formatting:
     dump_line_length = 4 + 3             /* = 4 offset + 3 space */
-                       + ((2 + 1) * 16)  /* + (2 hex + 1 space) per byte for 16 bytes */
-                       + 2 + 16 + 1;     /* + 2 space + 16 bytes as chars + 1 newline */
+    + ((2 + 1) * 16)  /* + (2 hex + 1 space) per byte for 16 bytes */
+    + 2 + 16 + 1;     /* + 2 space + 16 bytes as chars + 1 newline */

My problem is similar to this stack overflow question but the links to the astyle bug report is broken.
I've done my own debugging and been able to trace this down to having the word ""enum"" in the return type of the function that is being formatted. When I replace the enum with a typedef or macro for that enum, then astyle formats the split line with the expected indentation. This looks like a bug in astyle mis-identifying the function as an enum or something. The only thing I have found in the is a reference in the astyle release notes for 2.05.1 for ""Fix error in identifying an enum return type as an enumeration""
I've tried running with astyle version 2.06 and with 3.1. The 3.1 version does a better formatting job overall, but it still lines up the split dump_line_length line to the left.
My plan is to make a typedef for enum log_config then just use that everywhere. I'll also add a note to the Coding-Style wiki page about this issue.
Do you have a different suggestion for how to workaround this astyle issue?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1708,2020-10-24T18:15:21Z,2020-11-30T02:47:18Z,2020-11-30T03:12:06Z,MERGED,True,1749,1391,41,https://github.com/aquesnel,Unify logging in sesman,1,[],https://github.com/neutrinolabs/xrdp/pull/1708,https://github.com/matt335672,8,https://github.com/neutrinolabs/xrdp/pull/1708#issuecomment-726695405,Follow-on pull request to #1633 which migrates all logging in sesman to use the LOG() and LOG_DEVEL() macros.,"Hi @aquesnel
Yes I do. I'd mentioned it above but re-reading my comment I could have been clearer. If you add parentheses around the whole expression astyle will behave differently.
Try this (adjust to taste):-
    dump_line_length = (4 + 3 +           /* = 4 offset + 3 space */
                        ((2 + 1) * 16) + /* + (2 hex + 1 space) per byte for 16 bytes */
                        2 + 16 + 1);     /* + 2 space + 16 bytes as chars + 1 newline */
I'm using astyle 3.1.
Try that and let me know how you get on.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1708,2020-10-24T18:15:21Z,2020-11-30T02:47:18Z,2020-11-30T03:12:06Z,MERGED,True,1749,1391,41,https://github.com/aquesnel,Unify logging in sesman,1,[],https://github.com/neutrinolabs/xrdp/pull/1708,https://github.com/aquesnel,9,https://github.com/neutrinolabs/xrdp/pull/1708#issuecomment-727234494,Follow-on pull request to #1633 which migrates all logging in sesman to use the LOG() and LOG_DEVEL() macros.,"Hi @matt335672 ,
I had originally tried adding braces as you suggested around the dump_line_length line, but apparently astyle 2.06 has a bug that causes it to not indent the braced split line when a function returns an enum. This bug is fixed in astyle 3.1 so I'll add a note to the Coding-Style wiki page to say that astyle 3.1 or above should be used.
I've also run astyle on all of the .c files in sesman/* since most of the formatting errors are caused by the logging changes. I skipped the following files because:

sesman/chansrv/chansrv_fuse.c: the non-logging formatting changes were non-trivial and you have recently been working on fuse, so I didn't want to introduce a bunch of changes.
sesman/chansrv/pcsc/wrapper/winscard.c: no logging changes were made to this file
sesman/chansrv/pcsc/xrdp_pcsc.c: no logging changes were made to this file

Please let me know if you have any concerns with the additional code formatting.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1708,2020-10-24T18:15:21Z,2020-11-30T02:47:18Z,2020-11-30T03:12:06Z,MERGED,True,1749,1391,41,https://github.com/aquesnel,Unify logging in sesman,1,[],https://github.com/neutrinolabs/xrdp/pull/1708,https://github.com/matt335672,10,https://github.com/neutrinolabs/xrdp/pull/1708#issuecomment-727876319,Follow-on pull request to #1633 which migrates all logging in sesman to use the LOG() and LOG_DEVEL() macros.,"Hi @aquesnel
Thanks for that.
I've approved the changes I've requested, and I've run your hexdump code through a test rig. It all looks fine to me.
One small change you might like to consider is adding a call for the g_malloc() failing. We had a security advisory CVE-2020-4044 last year which exposed a number of ways in which sesman could be caused to crash. This can then be exploited to harvest passwords.
As it stands, an attacker managing to get a large value into the log_hexdump_with_location() could cause a memory overflow and a crash. That's not a major consideration at the moment as your code is currently for debugging only. However, since it's clearly a useful function, I can see it over time being used for non-debug logging purposes, and then we might have a problem.
Personally I'm happy that you've run the rest of the sesman code through astyle. It's a good time to do it as all the logging macros are changing too, so I can't see it causing any more upheaval than this PR would anyway. It makes checking code before commit a lot easier in the future,
@metalefty - are you happy with asyle being run on sesman in this way?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1708,2020-10-24T18:15:21Z,2020-11-30T02:47:18Z,2020-11-30T03:12:06Z,MERGED,True,1749,1391,41,https://github.com/aquesnel,Unify logging in sesman,1,[],https://github.com/neutrinolabs/xrdp/pull/1708,https://github.com/aquesnel,11,https://github.com/neutrinolabs/xrdp/pull/1708#issuecomment-732653476,Follow-on pull request to #1633 which migrates all logging in sesman to use the LOG() and LOG_DEVEL() macros.,"Hi @metalefty ,
Do you have any concerns or feedback for this pull request that you think should be addressed before this can be merged?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1708,2020-10-24T18:15:21Z,2020-11-30T02:47:18Z,2020-11-30T03:12:06Z,MERGED,True,1749,1391,41,https://github.com/aquesnel,Unify logging in sesman,1,[],https://github.com/neutrinolabs/xrdp/pull/1708,https://github.com/metalefty,12,https://github.com/neutrinolabs/xrdp/pull/1708#issuecomment-735514328,Follow-on pull request to #1633 which migrates all logging in sesman to use the LOG() and LOG_DEVEL() macros.,Let's merge.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1711,2020-10-30T13:29:01Z,2020-12-01T09:31:12Z,2020-12-23T10:46:35Z,MERGED,True,79,35,3,https://github.com/matt335672,Add log_config_init_for_console() for utilities,1,[],https://github.com/neutrinolabs/xrdp/pull/1711,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1711,"This is a bit of tidy-up work for the standalone utilities in sesman/tools.
These utilities call library functions which use the logging facility.  Since they're utilities, they don't really need to log anywhere other than the current console. This change adds a function log_config_init_for_console() to the logging sub-system which allows this to be done in a straightforward manner.
The utility sesadmin has been modified to use the new facility.
Other changes to log.c:-

A log file is no longer mandatory.
A way to disable the logging config dump on startup has been added.
The logging dump to stdout generates slightly less output for the console and syslog

@aquesnel - if you have the time, I'd be interested in any comments you have as you were the last person to make significant changes to the logging.","This is a bit of tidy-up work for the standalone utilities in sesman/tools.
These utilities call library functions which use the logging facility.  Since they're utilities, they don't really need to log anywhere other than the current console. This change adds a function log_config_init_for_console() to the logging sub-system which allows this to be done in a straightforward manner.
The utility sesadmin has been modified to use the new facility.
Other changes to log.c:-

A log file is no longer mandatory.
A way to disable the logging config dump on startup has been added.
The logging dump to stdout generates slightly less output for the console and syslog

@aquesnel - if you have the time, I'd be interested in any comments you have as you were the last person to make significant changes to the logging.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1711,2020-10-30T13:29:01Z,2020-12-01T09:31:12Z,2020-12-23T10:46:35Z,MERGED,True,79,35,3,https://github.com/matt335672,Add log_config_init_for_console() for utilities,1,[],https://github.com/neutrinolabs/xrdp/pull/1711,https://github.com/aquesnel,2,https://github.com/neutrinolabs/xrdp/pull/1711#issuecomment-719989776,"This is a bit of tidy-up work for the standalone utilities in sesman/tools.
These utilities call library functions which use the logging facility.  Since they're utilities, they don't really need to log anywhere other than the current console. This change adds a function log_config_init_for_console() to the logging sub-system which allows this to be done in a straightforward manner.
The utility sesadmin has been modified to use the new facility.
Other changes to log.c:-

A log file is no longer mandatory.
A way to disable the logging config dump on startup has been added.
The logging dump to stdout generates slightly less output for the console and syslog

@aquesnel - if you have the time, I'd be interested in any comments you have as you were the last person to make significant changes to the logging.","Hi @matt335672 ,
I like the idea for this change and the code looks good to me.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1711,2020-10-30T13:29:01Z,2020-12-01T09:31:12Z,2020-12-23T10:46:35Z,MERGED,True,79,35,3,https://github.com/matt335672,Add log_config_init_for_console() for utilities,1,[],https://github.com/neutrinolabs/xrdp/pull/1711,https://github.com/matt335672,3,https://github.com/neutrinolabs/xrdp/pull/1711#issuecomment-735720787,"This is a bit of tidy-up work for the standalone utilities in sesman/tools.
These utilities call library functions which use the logging facility.  Since they're utilities, they don't really need to log anywhere other than the current console. This change adds a function log_config_init_for_console() to the logging sub-system which allows this to be done in a straightforward manner.
The utility sesadmin has been modified to use the new facility.
Other changes to log.c:-

A log file is no longer mandatory.
A way to disable the logging config dump on startup has been added.
The logging dump to stdout generates slightly less output for the console and syslog

@aquesnel - if you have the time, I'd be interested in any comments you have as you were the last person to make significant changes to the logging.","Hi @aquesnel
Following the merge of #1708, I've made a minor change to allow the logging level to be specified for log_config_init_for_console()
Output of xrdp-sesadmin is now something like:-
[20201130-11:08:19] [INFO ] [_scp_v1c_mng_check_response(libscp_v1c_mng.c:411)] [v1c_mng:411] connection ok
Session ID: 27668
	Session type: 2
	Screen size: 1364x768, color depth 32
	Idle time: 0 day(s) 0 hour(s) 0 minute(s)
	Connected: 2020/11/30 10:53

There's still a lot of work to do on this utility, but the logging is at least sane now.
Just thought I'd run it past you before I merge. Still OK with it?
Thanks.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1711,2020-10-30T13:29:01Z,2020-12-01T09:31:12Z,2020-12-23T10:46:35Z,MERGED,True,79,35,3,https://github.com/matt335672,Add log_config_init_for_console() for utilities,1,[],https://github.com/neutrinolabs/xrdp/pull/1711,https://github.com/aquesnel,4,https://github.com/neutrinolabs/xrdp/pull/1711#issuecomment-735836949,"This is a bit of tidy-up work for the standalone utilities in sesman/tools.
These utilities call library functions which use the logging facility.  Since they're utilities, they don't really need to log anywhere other than the current console. This change adds a function log_config_init_for_console() to the logging sub-system which allows this to be done in a straightforward manner.
The utility sesadmin has been modified to use the new facility.
Other changes to log.c:-

A log file is no longer mandatory.
A way to disable the logging config dump on startup has been added.
The logging dump to stdout generates slightly less output for the console and syslog

@aquesnel - if you have the time, I'd be interested in any comments you have as you were the last person to make significant changes to the logging.",yes it still looks good to me.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1713,2020-11-04T01:18:32Z,2020-11-23T02:01:53Z,2020-11-23T02:01:53Z,CLOSED,False,1,0,1,https://github.com/ivzhh,Add delay between exit of window manager and termination of Xvnc,1,[],https://github.com/neutrinolabs/xrdp/pull/1713,https://github.com/ivzhh,1,https://github.com/neutrinolabs/xrdp/pull/1713,"kwin_x11's termination is not waited by startkde. Xvnc is closed
by sesman after sesman detects exit of startkde.
kwin_x11 runs indefinitely on getTimestamp due to the display is
closed. Thus kwin_x11 cannot process exit event from event loop.
Therefore, kwin_x11 will run a loop and consume a whole core of
CPU.
The fix adds a g_sleep(1000) to allow kwin_x11 to exit gracefully.
Fix #1712 kwin_x11 runs indefinitely because Xvnc exits too early","kwin_x11's termination is not waited by startkde. Xvnc is closed
by sesman after sesman detects exit of startkde.
kwin_x11 runs indefinitely on getTimestamp due to the display is
closed. Thus kwin_x11 cannot process exit event from event loop.
Therefore, kwin_x11 will run a loop and consume a whole core of
CPU.
The fix adds a g_sleep(1000) to allow kwin_x11 to exit gracefully.
Fix #1712 kwin_x11 runs indefinitely because Xvnc exits too early",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1713,2020-11-04T01:18:32Z,2020-11-23T02:01:53Z,2020-11-23T02:01:53Z,CLOSED,False,1,0,1,https://github.com/ivzhh,Add delay between exit of window manager and termination of Xvnc,1,[],https://github.com/neutrinolabs/xrdp/pull/1713,https://github.com/ivzhh,2,https://github.com/neutrinolabs/xrdp/pull/1713#issuecomment-721812053,"kwin_x11's termination is not waited by startkde. Xvnc is closed
by sesman after sesman detects exit of startkde.
kwin_x11 runs indefinitely on getTimestamp due to the display is
closed. Thus kwin_x11 cannot process exit event from event loop.
Therefore, kwin_x11 will run a loop and consume a whole core of
CPU.
The fix adds a g_sleep(1000) to allow kwin_x11 to exit gracefully.
Fix #1712 kwin_x11 runs indefinitely because Xvnc exits too early","This is my post on kde-devel. In the post, I gave three solutions:

KDE: use a preemptive method to handle exit condition; or find a way to delay ending X server
Qt: provide a non-blocking getTimestamp() (may lead to many changes)
Xrdp-sesman: delay ending Xvnc; or use systemd slice to find active processes

In short, I am still working on patches for KDE now in my spare time.
The reason I create pull-request for Xrdp first is:

This is the minimum change that makes this problem gone.
I did not read about that startx will terminate all processes, which are created by it. So I guess maybe some other WM may have this issue some how. This is a precaution.
Xrdp is closer to downstream distros. Users can have fixes soon. Distros are slow on updating Qt and KDE.

Thank you!",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1722,2020-11-13T07:27:20Z,2020-11-17T00:04:25Z,2020-11-25T09:42:43Z,MERGED,True,6,3,1,https://github.com/jsorg71,build fix for older gcc,1,[],https://github.com/neutrinolabs/xrdp/pull/1722,https://github.com/jsorg71,1,https://github.com/neutrinolabs/xrdp/pull/1722,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1722,2020-11-13T07:27:20Z,2020-11-17T00:04:25Z,2020-11-25T09:42:43Z,MERGED,True,6,3,1,https://github.com/jsorg71,build fix for older gcc,1,[],https://github.com/neutrinolabs/xrdp/pull/1722,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/1722#issuecomment-726688884,,"Hi Jay,
This is an interesting topic.
I had a chat with @metalefty recently on gitter about which C version we should be targeting. We didn't really know the answer and the coding standards page in the Wiki didn't help us either.
Whatever we decide should (in my opinion) be enforceable by automation (i.e. a Travis job).
I've just tried building the devel branch with the gcc -ansi flag. I think that's a non-starter as lots of useful (and safe) functions were added for C99 and later like snprintf().
I've then tried building with -Wdeclaration-after-statement which picks up the mods you've made in the PR. That's more along the lines of what you're trying to achieve I think. It also picks up on the following files which contain a few declarations after statements:-

common/os_calls.c
common/ssl_calls.c
sesman/chansrv/chansrv.c
sesman/chansrv/chansrv_fuse.c
sesman/chansrv/devredir.c
sesman/chansrv/rail.c
sesman/session.c

We could either allow mixed declarations and statements, or ban them. If we go for the latter, there's a bit more to add to this PR, and we can also add a Travis job to pick up on any future ones.
I think that's really your decision. I don't have any strong feelings one way or the other.
What do you think @metalefty?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1722,2020-11-13T07:27:20Z,2020-11-17T00:04:25Z,2020-11-25T09:42:43Z,MERGED,True,6,3,1,https://github.com/jsorg71,build fix for older gcc,1,[],https://github.com/neutrinolabs/xrdp/pull/1722,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/1722#issuecomment-727667152,,"Hi,
I also think it's Jays' decision but we should decide which C standards we target. I personally like C99 at least but I'm not in a strong position on this.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1722,2020-11-13T07:27:20Z,2020-11-17T00:04:25Z,2020-11-25T09:42:43Z,MERGED,True,6,3,1,https://github.com/jsorg71,build fix for older gcc,1,[],https://github.com/neutrinolabs/xrdp/pull/1722,https://github.com/jsorg71,4,https://github.com/neutrinolabs/xrdp/pull/1722#issuecomment-727759476,,"This PR is just about a compiler that used to work and recently does not.  It's not about forcing any C version.  Lets not make it too complected.
It's the variable define in the for () part that is causing the trouble.  Not declaration after statement.
We(or I) have been purposely not stating what C standard xrdp officially support.  I've always wanted to support them all :)
We can start a new discussion about this.  Maybe something like officially support C99 but don't reject patches that expand compiles if someone wants as long as it doesn't slow code down or make it unreadable.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1722,2020-11-13T07:27:20Z,2020-11-17T00:04:25Z,2020-11-25T09:42:43Z,MERGED,True,6,3,1,https://github.com/jsorg71,build fix for older gcc,1,[],https://github.com/neutrinolabs/xrdp/pull/1722,https://github.com/jsorg71,5,https://github.com/neutrinolabs/xrdp/pull/1722#issuecomment-727805503,,I think it got broke here a9ec1eb,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1722,2020-11-13T07:27:20Z,2020-11-17T00:04:25Z,2020-11-25T09:42:43Z,MERGED,True,6,3,1,https://github.com/jsorg71,build fix for older gcc,1,[],https://github.com/neutrinolabs/xrdp/pull/1722,https://github.com/matt335672,6,https://github.com/neutrinolabs/xrdp/pull/1722#issuecomment-727844995,,"That makes sense. I'm also a fan of C99 as a basic compiler level but we can add exceptions to support other compilers.
Jay - are you able to say what the compiler is which doesn't like the variable declaration in the for loop? We can certainly add 'no variable declaration in for() statement' to the coding standard, but it would be nice to record why, so that we can justify that decision to contributors.
I'm happy for this one to be merged personally.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1722,2020-11-13T07:27:20Z,2020-11-17T00:04:25Z,2020-11-25T09:42:43Z,MERGED,True,6,3,1,https://github.com/jsorg71,build fix for older gcc,1,[],https://github.com/neutrinolabs/xrdp/pull/1722,https://github.com/metalefty,7,https://github.com/neutrinolabs/xrdp/pull/1722#issuecomment-728459312,,Let's merge.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1722,2020-11-13T07:27:20Z,2020-11-17T00:04:25Z,2020-11-25T09:42:43Z,MERGED,True,6,3,1,https://github.com/jsorg71,build fix for older gcc,1,[],https://github.com/neutrinolabs/xrdp/pull/1722,https://github.com/jsorg71,8,https://github.com/neutrinolabs/xrdp/pull/1722#issuecomment-732030575,,@matt335672 it is a SPARC machine I use for testing big endian compatibility in xrdp.  It's the last version  Debian that supports SPARC which is Debian 7.  I think there are some options for newer distros that support SPARC or SPARC64 but I haven't updated yet.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1722,2020-11-13T07:27:20Z,2020-11-17T00:04:25Z,2020-11-25T09:42:43Z,MERGED,True,6,3,1,https://github.com/jsorg71,build fix for older gcc,1,[],https://github.com/neutrinolabs/xrdp/pull/1722,https://github.com/matt335672,9,https://github.com/neutrinolabs/xrdp/pull/1722#issuecomment-732057829,,"I remember getting Wheezy running on a SunBlade 150 at my last place. Those machines were really well engineered compared to the PCs of the day. In fact I think they've still got a few running as standalone X servers.
According to this link [debian.org] that should be running gcc 4.7.x. If I'm reading the release notes for 4.7 right that should be largely feature-complete for C99. So I'm a bit confused. When you get a mo', could you see that the output of gcc--version is on that machine?
Thanks.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1722,2020-11-13T07:27:20Z,2020-11-17T00:04:25Z,2020-11-25T09:42:43Z,MERGED,True,6,3,1,https://github.com/jsorg71,build fix for older gcc,1,[],https://github.com/neutrinolabs/xrdp/pull/1722,https://github.com/jsorg71,10,https://github.com/neutrinolabs/xrdp/pull/1722#issuecomment-733508493,,"jay@deb7sparc:~$ gcc --version
gcc (Debian 4.6.3-14) 4.6.3
Copyright (C) 2011 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1722,2020-11-13T07:27:20Z,2020-11-17T00:04:25Z,2020-11-25T09:42:43Z,MERGED,True,6,3,1,https://github.com/jsorg71,build fix for older gcc,1,[],https://github.com/neutrinolabs/xrdp/pull/1722,https://github.com/matt335672,11,https://github.com/neutrinolabs/xrdp/pull/1722#issuecomment-733586320,,"Thanks for that. I'll add a note to the coding standards regarding this issue, so we can push back on PRs using declarations-in-for.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1722,2020-11-13T07:27:20Z,2020-11-17T00:04:25Z,2020-11-25T09:42:43Z,MERGED,True,6,3,1,https://github.com/jsorg71,build fix for older gcc,1,[],https://github.com/neutrinolabs/xrdp/pull/1722,https://github.com/matt335672,12,https://github.com/neutrinolabs/xrdp/pull/1722#issuecomment-733592307,,Change made to this page. Feel free to amend as appropriate.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1727,2020-11-17T03:49:40Z,2020-12-17T07:15:44Z,2020-12-17T07:15:44Z,MERGED,True,3,0,1,https://github.com/RisingWater,Update verify_user_pam.c,2,[],https://github.com/neutrinolabs/xrdp/pull/1727,https://github.com/RisingWater,1,https://github.com/neutrinolabs/xrdp/pull/1727,"when a system give a tip message in function verify_pam_conv, authenticate will fail.
so it need skip this message to make sure authenticate success.","when a system give a tip message in function verify_pam_conv, authenticate will fail.
so it need skip this message to make sure authenticate success.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1727,2020-11-17T03:49:40Z,2020-12-17T07:15:44Z,2020-12-17T07:15:44Z,MERGED,True,3,0,1,https://github.com/RisingWater,Update verify_user_pam.c,2,[],https://github.com/neutrinolabs/xrdp/pull/1727,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/1727#issuecomment-730217439,"when a system give a tip message in function verify_pam_conv, authenticate will fail.
so it need skip this message to make sure authenticate success.","Yes, I can see the point of this. I'm happy with the change as suggested. We could log the message from the stack, but I can't see there's really any point.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1728,2020-11-17T06:19:30Z,2020-11-20T05:11:24Z,2020-11-23T04:59:44Z,MERGED,True,246,173,5,https://github.com/aquesnel,Add GitHub actions,3,[],https://github.com/neutrinolabs/xrdp/pull/1728,https://github.com/aquesnel,1,https://github.com/neutrinolabs/xrdp/pull/1728,"This change adds CI builds using the GitHub actions infrastructure. The builds performed in GitHub actions is the same as the builds currently being done in Travis CI.
Example build: https://github.com/aquesnel/xrdp/actions/runs/367490998
Adding CI builds in GitHub actions because:

GitHub actions allows more concurrent builds than TravisCI
GitHub actions does not require additional configuration by forks of xrdp to enable CI builds
The announcement by TravisCI to change their open source offering and their FAQ says that TravicCI has reduced the default build limits per open source repository to 1000 minutes (lifetime limit) with the possibility to ask for recurring credits.
the TravisCI open source build queue has recently consistently had a backlog of builds and the queue size seems to be slowly decreasing
As mentioned in #1683, the TravisCI documentation says that all open source projects need to migrate from travis-ci.org to travis-ci.com

If this pull request is accepted, please let me know if you think that the TravisCI builds should be disabled.","This change adds CI builds using the GitHub actions infrastructure. The builds performed in GitHub actions is the same as the builds currently being done in Travis CI.
Example build: https://github.com/aquesnel/xrdp/actions/runs/367490998
Adding CI builds in GitHub actions because:

GitHub actions allows more concurrent builds than TravisCI
GitHub actions does not require additional configuration by forks of xrdp to enable CI builds
The announcement by TravisCI to change their open source offering and their FAQ says that TravicCI has reduced the default build limits per open source repository to 1000 minutes (lifetime limit) with the possibility to ask for recurring credits.
the TravisCI open source build queue has recently consistently had a backlog of builds and the queue size seems to be slowly decreasing
As mentioned in #1683, the TravisCI documentation says that all open source projects need to migrate from travis-ci.org to travis-ci.com

If this pull request is accepted, please let me know if you think that the TravisCI builds should be disabled.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1728,2020-11-17T06:19:30Z,2020-11-20T05:11:24Z,2020-11-23T04:59:44Z,MERGED,True,246,173,5,https://github.com/aquesnel,Add GitHub actions,3,[],https://github.com/neutrinolabs/xrdp/pull/1728,https://github.com/aquesnel,2,https://github.com/neutrinolabs/xrdp/pull/1728#issuecomment-728716000,"This change adds CI builds using the GitHub actions infrastructure. The builds performed in GitHub actions is the same as the builds currently being done in Travis CI.
Example build: https://github.com/aquesnel/xrdp/actions/runs/367490998
Adding CI builds in GitHub actions because:

GitHub actions allows more concurrent builds than TravisCI
GitHub actions does not require additional configuration by forks of xrdp to enable CI builds
The announcement by TravisCI to change their open source offering and their FAQ says that TravicCI has reduced the default build limits per open source repository to 1000 minutes (lifetime limit) with the possibility to ask for recurring credits.
the TravisCI open source build queue has recently consistently had a backlog of builds and the queue size seems to be slowly decreasing
As mentioned in #1683, the TravisCI documentation says that all open source projects need to migrate from travis-ci.org to travis-ci.com

If this pull request is accepted, please let me know if you think that the TravisCI builds should be disabled.","Note: the SSL compiler warning is needed for this change because the GitHub actions version of ubuntu-16.04 uses a different version of the OpenSSL package than the TravisCI version of ubuntu-16.04.
The different version of the OpenSSL package is because the GitHub actions version of ubuntu-16.04 includes a pre-installed PPA repository for php which has a newer version of OpenSSL than the official Ubuntu 16.04 release and updates.
I was not able to resolve / downgrade the OpenSSL package on the GitHub actions version of ubuntu-16.04, so I fixed the compiler warning instead.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1728,2020-11-17T06:19:30Z,2020-11-20T05:11:24Z,2020-11-23T04:59:44Z,MERGED,True,246,173,5,https://github.com/aquesnel,Add GitHub actions,3,[],https://github.com/neutrinolabs/xrdp/pull/1728,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/1728#issuecomment-728716135,"This change adds CI builds using the GitHub actions infrastructure. The builds performed in GitHub actions is the same as the builds currently being done in Travis CI.
Example build: https://github.com/aquesnel/xrdp/actions/runs/367490998
Adding CI builds in GitHub actions because:

GitHub actions allows more concurrent builds than TravisCI
GitHub actions does not require additional configuration by forks of xrdp to enable CI builds
The announcement by TravisCI to change their open source offering and their FAQ says that TravicCI has reduced the default build limits per open source repository to 1000 minutes (lifetime limit) with the possibility to ask for recurring credits.
the TravisCI open source build queue has recently consistently had a backlog of builds and the queue size seems to be slowly decreasing
As mentioned in #1683, the TravisCI documentation says that all open source projects need to migrate from travis-ci.org to travis-ci.com

If this pull request is accepted, please let me know if you think that the TravisCI builds should be disabled.",I was also thinking to switch to GitHub Actions from Travis CI. Good work.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1728,2020-11-17T06:19:30Z,2020-11-20T05:11:24Z,2020-11-23T04:59:44Z,MERGED,True,246,173,5,https://github.com/aquesnel,Add GitHub actions,3,[],https://github.com/neutrinolabs/xrdp/pull/1728,https://github.com/matt335672,4,https://github.com/neutrinolabs/xrdp/pull/1728#issuecomment-728832263,"This change adds CI builds using the GitHub actions infrastructure. The builds performed in GitHub actions is the same as the builds currently being done in Travis CI.
Example build: https://github.com/aquesnel/xrdp/actions/runs/367490998
Adding CI builds in GitHub actions because:

GitHub actions allows more concurrent builds than TravisCI
GitHub actions does not require additional configuration by forks of xrdp to enable CI builds
The announcement by TravisCI to change their open source offering and their FAQ says that TravicCI has reduced the default build limits per open source repository to 1000 minutes (lifetime limit) with the possibility to ask for recurring credits.
the TravisCI open source build queue has recently consistently had a backlog of builds and the queue size seems to be slowly decreasing
As mentioned in #1683, the TravisCI documentation says that all open source projects need to migrate from travis-ci.org to travis-ci.com

If this pull request is accepted, please let me know if you think that the TravisCI builds should be disabled.","I'd not been aware of the impending changes to travis-ci.com. This is great work @aquesnel
I've done a bit more reading. It looks like the date for travis-ci.org closing down is 31st December 2020.
It also looks like when the 1000 minutes on travis-ci.com expire we could ask for an allotment of OSS minutes. It's far from certain however that we'd get those minutes.
Looking at the GitHub billing page, it looks like we'd get 2000 minutes per month using actions. Given the test build above took less that 5 minutes, this would be plenty.
So based on the information we have available at the moment, and because of the excellent work above, I'm very happy for this to be merged.
I can't see why we need both Travis and Actions enabled together. Is there a good reason? If not, I suggest we update this PR to remove the travis.yml file.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1728,2020-11-17T06:19:30Z,2020-11-20T05:11:24Z,2020-11-23T04:59:44Z,MERGED,True,246,173,5,https://github.com/aquesnel,Add GitHub actions,3,[],https://github.com/neutrinolabs/xrdp/pull/1728,https://github.com/metalefty,5,https://github.com/neutrinolabs/xrdp/pull/1728#issuecomment-729316242,"This change adds CI builds using the GitHub actions infrastructure. The builds performed in GitHub actions is the same as the builds currently being done in Travis CI.
Example build: https://github.com/aquesnel/xrdp/actions/runs/367490998
Adding CI builds in GitHub actions because:

GitHub actions allows more concurrent builds than TravisCI
GitHub actions does not require additional configuration by forks of xrdp to enable CI builds
The announcement by TravisCI to change their open source offering and their FAQ says that TravicCI has reduced the default build limits per open source repository to 1000 minutes (lifetime limit) with the possibility to ask for recurring credits.
the TravisCI open source build queue has recently consistently had a backlog of builds and the queue size seems to be slowly decreasing
As mentioned in #1683, the TravisCI documentation says that all open source projects need to migrate from travis-ci.org to travis-ci.com

If this pull request is accepted, please let me know if you think that the TravisCI builds should be disabled.","Just for reference, an article written in Japanese.
""Say thank you to Travis CI and good-bye Travis CI"".
https://xuwei-k.hatenablog.com/entry/2020/11/04/161400",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1728,2020-11-17T06:19:30Z,2020-11-20T05:11:24Z,2020-11-23T04:59:44Z,MERGED,True,246,173,5,https://github.com/aquesnel,Add GitHub actions,3,[],https://github.com/neutrinolabs/xrdp/pull/1728,https://github.com/metalefty,6,https://github.com/neutrinolabs/xrdp/pull/1728#issuecomment-730854584,"This change adds CI builds using the GitHub actions infrastructure. The builds performed in GitHub actions is the same as the builds currently being done in Travis CI.
Example build: https://github.com/aquesnel/xrdp/actions/runs/367490998
Adding CI builds in GitHub actions because:

GitHub actions allows more concurrent builds than TravisCI
GitHub actions does not require additional configuration by forks of xrdp to enable CI builds
The announcement by TravisCI to change their open source offering and their FAQ says that TravicCI has reduced the default build limits per open source repository to 1000 minutes (lifetime limit) with the possibility to ask for recurring credits.
the TravisCI open source build queue has recently consistently had a backlog of builds and the queue size seems to be slowly decreasing
As mentioned in #1683, the TravisCI documentation says that all open source projects need to migrate from travis-ci.org to travis-ci.com

If this pull request is accepted, please let me know if you think that the TravisCI builds should be disabled.",Let's have a trial.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1728,2020-11-17T06:19:30Z,2020-11-20T05:11:24Z,2020-11-23T04:59:44Z,MERGED,True,246,173,5,https://github.com/aquesnel,Add GitHub actions,3,[],https://github.com/neutrinolabs/xrdp/pull/1728,https://github.com/metalefty,7,https://github.com/neutrinolabs/xrdp/pull/1728#issuecomment-730865133,"This change adds CI builds using the GitHub actions infrastructure. The builds performed in GitHub actions is the same as the builds currently being done in Travis CI.
Example build: https://github.com/aquesnel/xrdp/actions/runs/367490998
Adding CI builds in GitHub actions because:

GitHub actions allows more concurrent builds than TravisCI
GitHub actions does not require additional configuration by forks of xrdp to enable CI builds
The announcement by TravisCI to change their open source offering and their FAQ says that TravicCI has reduced the default build limits per open source repository to 1000 minutes (lifetime limit) with the possibility to ask for recurring credits.
the TravisCI open source build queue has recently consistently had a backlog of builds and the queue size seems to be slowly decreasing
As mentioned in #1683, the TravisCI documentation says that all open source projects need to migrate from travis-ci.org to travis-ci.com

If this pull request is accepted, please let me know if you think that the TravisCI builds should be disabled.",Now it's working. https://github.com/neutrinolabs/xrdp/actions,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1732,2020-11-23T05:57:23Z,2020-11-23T08:55:35Z,2020-11-24T04:41:41Z,MERGED,True,7,0,1,https://github.com/aquesnel,Add caching of cppcheck to github action CI builds,1,[],https://github.com/neutrinolabs/xrdp/pull/1732,https://github.com/aquesnel,1,https://github.com/neutrinolabs/xrdp/pull/1732,"This pull request reduces the build time of xrdp in github actions by about 2min 30sec per build by caching the cppcheck build artifacts. Caching the cppcheck build artifacts is safe because cppcheck is a a dependency and the workflow always builds cppcheck from a git tag from the cppcheck repo.
This caching is a 10% reduction in build time across all builds (current build time is approx. 21min CPU time)
Example builds:

without caching: https://github.com/neutrinolabs/xrdp/runs/1428776621
with caching cppcheck build output: https://github.com/aquesnel/xrdp/runs/1440410754","This pull request reduces the build time of xrdp in github actions by about 2min 30sec per build by caching the cppcheck build artifacts. Caching the cppcheck build artifacts is safe because cppcheck is a a dependency and the workflow always builds cppcheck from a git tag from the cppcheck repo.
This caching is a 10% reduction in build time across all builds (current build time is approx. 21min CPU time)
Example builds:

without caching: https://github.com/neutrinolabs/xrdp/runs/1428776621
with caching cppcheck build output: https://github.com/aquesnel/xrdp/runs/1440410754",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1732,2020-11-23T05:57:23Z,2020-11-23T08:55:35Z,2020-11-24T04:41:41Z,MERGED,True,7,0,1,https://github.com/aquesnel,Add caching of cppcheck to github action CI builds,1,[],https://github.com/neutrinolabs/xrdp/pull/1732,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/1732#issuecomment-732020923,"This pull request reduces the build time of xrdp in github actions by about 2min 30sec per build by caching the cppcheck build artifacts. Caching the cppcheck build artifacts is safe because cppcheck is a a dependency and the workflow always builds cppcheck from a git tag from the cppcheck repo.
This caching is a 10% reduction in build time across all builds (current build time is approx. 21min CPU time)
Example builds:

without caching: https://github.com/neutrinolabs/xrdp/runs/1428776621
with caching cppcheck build output: https://github.com/aquesnel/xrdp/runs/1440410754",Excellent work - well worth pulling in I think.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1738,2020-11-30T04:01:08Z,2020-12-23T00:59:22Z,2020-12-23T04:22:18Z,MERGED,True,1022,1053,15,https://github.com/aquesnel,Unify logging in libxrdp,4,[],https://github.com/neutrinolabs/xrdp/pull/1738,https://github.com/aquesnel,1,https://github.com/neutrinolabs/xrdp/pull/1738,Follow-on pull request to #1633 which migrates all logging in the libxrdp directory to use the LOG() and LOG_DEVEL() macros.,Follow-on pull request to #1633 which migrates all logging in the libxrdp directory to use the LOG() and LOG_DEVEL() macros.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1738,2020-11-30T04:01:08Z,2020-12-23T00:59:22Z,2020-12-23T04:22:18Z,MERGED,True,1022,1053,15,https://github.com/aquesnel,Unify logging in libxrdp,4,[],https://github.com/neutrinolabs/xrdp/pull/1738,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/1738#issuecomment-735739922,Follow-on pull request to #1633 which migrates all logging in the libxrdp directory to use the LOG() and LOG_DEVEL() macros.,"Nice work!
I'm not hugely familiar with this area of the code, but looking at your PR makes me realise this is well worth doing.
The only comment I've got is similar to one I made on #1738. Where there's currently an output produced by g_writeln and friends, I'd rather see that replaced in the short term at least by a LOG( macro rather than a LOG_DEVEL( macro. I appreciate that many of these may not make a lot of sense to a sysadmin, but at the moment there's a chance of a silent fail which is harder for us to diagnose if it happens.
Please come back to me on that if you've got a strong opinion on this. Also there are a few commented out g_writeln() calls and I absolutely think you've done the right thing there.
This looks like pretty much a straight text subs to me. I can see why you've introduced UNUSED_VAR, and I think you've got the best solution to that problem. You could use compiler variable attributes but these aren't necessarily portable.
As ever, thanks very much for your contributions.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1738,2020-11-30T04:01:08Z,2020-12-23T00:59:22Z,2020-12-23T04:22:18Z,MERGED,True,1022,1053,15,https://github.com/aquesnel,Unify logging in libxrdp,4,[],https://github.com/neutrinolabs/xrdp/pull/1738,https://github.com/aquesnel,3,https://github.com/neutrinolabs/xrdp/pull/1738#issuecomment-735839793,Follow-on pull request to #1633 which migrates all logging in the libxrdp directory to use the LOG() and LOG_DEVEL() macros.,"ok, I'll review the log changes to avoid silent failures.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1738,2020-11-30T04:01:08Z,2020-12-23T00:59:22Z,2020-12-23T04:22:18Z,MERGED,True,1022,1053,15,https://github.com/aquesnel,Unify logging in libxrdp,4,[],https://github.com/neutrinolabs/xrdp/pull/1738,https://github.com/aquesnel,4,https://github.com/neutrinolabs/xrdp/pull/1738#issuecomment-739427668,Follow-on pull request to #1633 which migrates all logging in the libxrdp directory to use the LOG() and LOG_DEVEL() macros.,"Hi @matt335672 ,
I've modified the log messages in error code paths to use LOG instead of LOG_DEVEL. Please let me know if there is additional logging lines that you think should have different log levels or log macros.
Since we are discussing log messages, I also want to mention that I've made pull request #1742 which adds on top of this pull request more detailed and clear logging messages in the libxrdp code. I created it as a separate pull request to separate the text substitution from improving the log messages.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1738,2020-11-30T04:01:08Z,2020-12-23T00:59:22Z,2020-12-23T04:22:18Z,MERGED,True,1022,1053,15,https://github.com/aquesnel,Unify logging in libxrdp,4,[],https://github.com/neutrinolabs/xrdp/pull/1738,https://github.com/matt335672,5,https://github.com/neutrinolabs/xrdp/pull/1738#issuecomment-739823110,Follow-on pull request to #1633 which migrates all logging in the libxrdp directory to use the LOG() and LOG_DEVEL() macros.,"Really good stuff BTW - I can see where some real thought has gone in to some of these.
@metalefty - given this is general substitution (plus of course the re-formatting), I'm happy to merge this. Let me know what you think.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1738,2020-11-30T04:01:08Z,2020-12-23T00:59:22Z,2020-12-23T04:22:18Z,MERGED,True,1022,1053,15,https://github.com/aquesnel,Unify logging in libxrdp,4,[],https://github.com/neutrinolabs/xrdp/pull/1738,https://github.com/aquesnel,6,https://github.com/neutrinolabs/xrdp/pull/1738#issuecomment-743788806,Follow-on pull request to #1633 which migrates all logging in the libxrdp directory to use the LOG() and LOG_DEVEL() macros.,"I've implemented @matt335672 recommendations, and I think this is ready to merge. Please let me know if there is anything else that needs to be cleaned up or squashed before merging.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1738,2020-11-30T04:01:08Z,2020-12-23T00:59:22Z,2020-12-23T04:22:18Z,MERGED,True,1022,1053,15,https://github.com/aquesnel,Unify logging in libxrdp,4,[],https://github.com/neutrinolabs/xrdp/pull/1738,https://github.com/metalefty,7,https://github.com/neutrinolabs/xrdp/pull/1738#issuecomment-749857809,Follow-on pull request to #1633 which migrates all logging in the libxrdp directory to use the LOG() and LOG_DEVEL() macros.,Let's merge.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1741,2020-12-03T11:59:05Z,2020-12-21T04:45:57Z,2020-12-23T10:46:22Z,MERGED,True,617,112,7,https://github.com/matt335672,sesrun improvements and doc fixes,1,[],https://github.com/neutrinolabs/xrdp/pull/1741,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1741,"Following a gitter chat, some fixes to the sesrun doc and code improvements.
I've gotta dash now, so there's a chance the CI will fail. In the meantime comments welcome.","Following a gitter chat, some fixes to the sesrun doc and code improvements.
I've gotta dash now, so there's a chance the CI will fail. In the meantime comments welcome.",True,{'THUMBS_UP': ['https://github.com/metalefty']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1741,2020-12-03T11:59:05Z,2020-12-21T04:45:57Z,2020-12-23T10:46:22Z,MERGED,True,617,112,7,https://github.com/matt335672,sesrun improvements and doc fixes,1,[],https://github.com/neutrinolabs/xrdp/pull/1741,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/1741#issuecomment-738889961,"Following a gitter chat, some fixes to the sesrun doc and code improvements.
I've gotta dash now, so there's a chance the CI will fail. In the meantime comments welcome.",Command line fixes implemented. manpage is still outstanding.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1741,2020-12-03T11:59:05Z,2020-12-21T04:45:57Z,2020-12-23T10:46:22Z,MERGED,True,617,112,7,https://github.com/matt335672,sesrun improvements and doc fixes,1,[],https://github.com/neutrinolabs/xrdp/pull/1741,https://github.com/matt335672,3,https://github.com/neutrinolabs/xrdp/pull/1741#issuecomment-740557374,"Following a gitter chat, some fixes to the sesrun doc and code improvements.
I've gotta dash now, so there's a chance the CI will fail. In the meantime comments welcome.","I've done local testing now.
Because I've moved to a options-based command line I've been able to add options to specify a different shell and default directory. This makes the tool a lot more flexible. Some examples have been added to the manpage - more could be added.
@metalefty - there's a conflict between this PR and #1650 as #1650 also updates sesrun. Suggest we merge #1650 first, then add a -C option to this PR. What do you think?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1741,2020-12-03T11:59:05Z,2020-12-21T04:45:57Z,2020-12-23T10:46:22Z,MERGED,True,617,112,7,https://github.com/matt335672,sesrun improvements and doc fixes,1,[],https://github.com/neutrinolabs/xrdp/pull/1741,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/1741#issuecomment-741366648,"Following a gitter chat, some fixes to the sesrun doc and code improvements.
I've gotta dash now, so there's a chance the CI will fail. In the meantime comments welcome.","Okay, I'll let's merge #1650 first. Let me some time to quick look.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1741,2020-12-03T11:59:05Z,2020-12-21T04:45:57Z,2020-12-23T10:46:22Z,MERGED,True,617,112,7,https://github.com/matt335672,sesrun improvements and doc fixes,1,[],https://github.com/neutrinolabs/xrdp/pull/1741,https://github.com/matt335672,5,https://github.com/neutrinolabs/xrdp/pull/1741#issuecomment-741729531,"Following a gitter chat, some fixes to the sesrun doc and code improvements.
I've gotta dash now, so there's a chance the CI will fail. In the meantime comments welcome.","Now compatible with the reworked config for sesman.
Couple of notes:-

I've made the config option '-c' for compatibility with xrdp and sesman
sesman was not opening the config file read-only. Since this is common code I've fixed it here.
I've tried to use the logging sub-system where possible.

This is quite a re-write, so there's a bit to look at. The utility is basically very simple though, so hopefully it should be easy to read.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1742,2020-12-05T22:47:09Z,2021-02-04T10:11:55Z,2021-02-07T20:22:01Z,MERGED,True,2754,890,17,https://github.com/aquesnel,Add detailed logging to libxrdp,34,[],https://github.com/neutrinolabs/xrdp/pull/1742,https://github.com/aquesnel,1,https://github.com/neutrinolabs/xrdp/pull/1742,"Follow up pull request from #1738 to add logs with more detailed information to the libxrdp code.
This code conflicts with #1738 and should therefore wait to to be merge until after #1738
TODO

incorporate feedback changes made in #1738
update code formatting with astyle","Follow up pull request from #1738 to add logs with more detailed information to the libxrdp code.
This code conflicts with #1738 and should therefore wait to to be merge until after #1738
TODO

incorporate feedback changes made in #1738
update code formatting with astyle",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1742,2020-12-05T22:47:09Z,2021-02-04T10:11:55Z,2021-02-07T20:22:01Z,MERGED,True,2754,890,17,https://github.com/aquesnel,Add detailed logging to libxrdp,34,[],https://github.com/neutrinolabs/xrdp/pull/1742,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1742#issuecomment-747289588,"Follow up pull request from #1738 to add logs with more detailed information to the libxrdp code.
This code conflicts with #1738 and should therefore wait to to be merge until after #1738
TODO

incorporate feedback changes made in #1738
update code formatting with astyle","Removed v0.9.15 milestone based on discussion on gitter chat.
https://gitter.im/neutrinolabs/xrdp?at=5fd83fc091e8cb3e8c00b463",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1742,2020-12-05T22:47:09Z,2021-02-04T10:11:55Z,2021-02-07T20:22:01Z,MERGED,True,2754,890,17,https://github.com/aquesnel,Add detailed logging to libxrdp,34,[],https://github.com/neutrinolabs/xrdp/pull/1742,https://github.com/aquesnel,3,https://github.com/neutrinolabs/xrdp/pull/1742#issuecomment-751743498,"Follow up pull request from #1738 to add logs with more detailed information to the libxrdp code.
This code conflicts with #1738 and should therefore wait to to be merge until after #1738
TODO

incorporate feedback changes made in #1738
update code formatting with astyle","I've rebased this change to devel, and it is now ready to be reviewed.
@matt335672 I'd like your feedback for this pull request.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1742,2020-12-05T22:47:09Z,2021-02-04T10:11:55Z,2021-02-07T20:22:01Z,MERGED,True,2754,890,17,https://github.com/aquesnel,Add detailed logging to libxrdp,34,[],https://github.com/neutrinolabs/xrdp/pull/1742,https://github.com/matt335672,4,https://github.com/neutrinolabs/xrdp/pull/1742#issuecomment-752467074,"Follow up pull request from #1738 to add logs with more detailed information to the libxrdp code.
This code conflicts with #1738 and should therefore wait to to be merge until after #1738
TODO

incorporate feedback changes made in #1738
update code formatting with astyle","Hi @aquesnel - I've started to review this, but I'm sure you appreciate it may take me a while! What you've done looks very thorough. Thanks for structuring it the way you have - it should help a lot.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1742,2020-12-05T22:47:09Z,2021-02-04T10:11:55Z,2021-02-07T20:22:01Z,MERGED,True,2754,890,17,https://github.com/aquesnel,Add detailed logging to libxrdp,34,[],https://github.com/neutrinolabs/xrdp/pull/1742,https://github.com/aquesnel,5,https://github.com/neutrinolabs/xrdp/pull/1742#issuecomment-752644135,"Follow up pull request from #1738 to add logs with more detailed information to the libxrdp code.
This code conflicts with #1738 and should therefore wait to to be merge until after #1738
TODO

incorporate feedback changes made in #1738
update code formatting with astyle","@matt335672 thank you for taking the time to review this big pull request.
That's a good point about this taking a lot of time just to review. I think for the next pull request like this I'll split the request by file instead of by directory so that it can be reviewed and merged incrementally.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1742,2020-12-05T22:47:09Z,2021-02-04T10:11:55Z,2021-02-07T20:22:01Z,MERGED,True,2754,890,17,https://github.com/aquesnel,Add detailed logging to libxrdp,34,[],https://github.com/neutrinolabs/xrdp/pull/1742,https://github.com/aquesnel,6,https://github.com/neutrinolabs/xrdp/pull/1742#issuecomment-757662124,"Follow up pull request from #1738 to add logs with more detailed information to the libxrdp code.
This code conflicts with #1738 and should therefore wait to to be merge until after #1738
TODO

incorporate feedback changes made in #1738
update code formatting with astyle","@matt335672 thank for taking the time to look at the changes.
Somehow I had missed this comment last week. I'll take a deeper look and start to implement the feedback tomorrow.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1742,2020-12-05T22:47:09Z,2021-02-04T10:11:55Z,2021-02-07T20:22:01Z,MERGED,True,2754,890,17,https://github.com/aquesnel,Add detailed logging to libxrdp,34,[],https://github.com/neutrinolabs/xrdp/pull/1742,https://github.com/aquesnel,7,https://github.com/neutrinolabs/xrdp/pull/1742#issuecomment-766186724,"Follow up pull request from #1738 to add logs with more detailed information to the libxrdp code.
This code conflicts with #1738 and should therefore wait to to be merge until after #1738
TODO

incorporate feedback changes made in #1738
update code formatting with astyle",I've implemented s_check_rem_and_log and added a message prefix to say which field is currently being parsed that is causing the error.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1742,2020-12-05T22:47:09Z,2021-02-04T10:11:55Z,2021-02-07T20:22:01Z,MERGED,True,2754,890,17,https://github.com/aquesnel,Add detailed logging to libxrdp,34,[],https://github.com/neutrinolabs/xrdp/pull/1742,https://github.com/aquesnel,8,https://github.com/neutrinolabs/xrdp/pull/1742#issuecomment-766193923,"Follow up pull request from #1738 to add logs with more detailed information to the libxrdp code.
This code conflicts with #1738 and should therefore wait to to be merge until after #1738
TODO

incorporate feedback changes made in #1738
update code formatting with astyle","@matt335672 I've finished implement the feedback you suggested. Can you please take another look and let me know if there is any additional feedback before this can be merged?
Thanks",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1742,2020-12-05T22:47:09Z,2021-02-04T10:11:55Z,2021-02-07T20:22:01Z,MERGED,True,2754,890,17,https://github.com/aquesnel,Add detailed logging to libxrdp,34,[],https://github.com/neutrinolabs/xrdp/pull/1742,https://github.com/matt335672,9,https://github.com/neutrinolabs/xrdp/pull/1742#issuecomment-766703649,"Follow up pull request from #1738 to add logs with more detailed information to the libxrdp code.
This code conflicts with #1738 and should therefore wait to to be merge until after #1738
TODO

incorporate feedback changes made in #1738
update code formatting with astyle","@aquesnel - this is really great work!
I've just reviewed your additional changes. I'm out-of-time today, but tomorrow I'll go through our previous conversation and resolve things.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1742,2020-12-05T22:47:09Z,2021-02-04T10:11:55Z,2021-02-07T20:22:01Z,MERGED,True,2754,890,17,https://github.com/aquesnel,Add detailed logging to libxrdp,34,[],https://github.com/neutrinolabs/xrdp/pull/1742,https://github.com/aquesnel,10,https://github.com/neutrinolabs/xrdp/pull/1742#issuecomment-770228534,"Follow up pull request from #1738 to add logs with more detailed information to the libxrdp code.
This code conflicts with #1738 and should therefore wait to to be merge until after #1738
TODO

incorporate feedback changes made in #1738
update code formatting with astyle","@matt335672 I've implemented the feedback you gave me, and resolved conflicts with devel. I've give you a chance to look at the minimal changes that you recommended before I rebase or squash these changes.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1742,2020-12-05T22:47:09Z,2021-02-04T10:11:55Z,2021-02-07T20:22:01Z,MERGED,True,2754,890,17,https://github.com/aquesnel,Add detailed logging to libxrdp,34,[],https://github.com/neutrinolabs/xrdp/pull/1742,https://github.com/matt335672,11,https://github.com/neutrinolabs/xrdp/pull/1742#issuecomment-770242269,"Follow up pull request from #1738 to add logs with more detailed information to the libxrdp code.
This code conflicts with #1738 and should therefore wait to to be merge until after #1738
TODO

incorporate feedback changes made in #1738
update code formatting with astyle","Thanks for that - looks good. I've made a few comments in reply. I should be able to approve this in the next few days, then it's over to @metalefty",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1742,2020-12-05T22:47:09Z,2021-02-04T10:11:55Z,2021-02-07T20:22:01Z,MERGED,True,2754,890,17,https://github.com/aquesnel,Add detailed logging to libxrdp,34,[],https://github.com/neutrinolabs/xrdp/pull/1742,https://github.com/metalefty,12,https://github.com/neutrinolabs/xrdp/pull/1742#issuecomment-770519346,"Follow up pull request from #1738 to add logs with more detailed information to the libxrdp code.
This code conflicts with #1738 and should therefore wait to to be merge until after #1738
TODO

incorporate feedback changes made in #1738
update code formatting with astyle","LGTM.
@matt335672 Feel free to merge this at your convenience.",True,{'THUMBS_UP': ['https://github.com/matt335672']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1742,2020-12-05T22:47:09Z,2021-02-04T10:11:55Z,2021-02-07T20:22:01Z,MERGED,True,2754,890,17,https://github.com/aquesnel,Add detailed logging to libxrdp,34,[],https://github.com/neutrinolabs/xrdp/pull/1742,https://github.com/aquesnel,13,https://github.com/neutrinolabs/xrdp/pull/1742#issuecomment-772965376,"Follow up pull request from #1738 to add logs with more detailed information to the libxrdp code.
This code conflicts with #1738 and should therefore wait to to be merge until after #1738
TODO

incorporate feedback changes made in #1738
update code formatting with astyle","@matt335672 I've implemented the suggestions you made. Please let me know if I missed anything.
Do you want me to squash the changes before you merge them?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1742,2020-12-05T22:47:09Z,2021-02-04T10:11:55Z,2021-02-07T20:22:01Z,MERGED,True,2754,890,17,https://github.com/aquesnel,Add detailed logging to libxrdp,34,[],https://github.com/neutrinolabs/xrdp/pull/1742,https://github.com/matt335672,14,https://github.com/neutrinolabs/xrdp/pull/1742#issuecomment-773194003,"Follow up pull request from #1738 to add logs with more detailed information to the libxrdp code.
This code conflicts with #1738 and should therefore wait to to be merge until after #1738
TODO

incorporate feedback changes made in #1738
update code formatting with astyle","That's fine - I've done a squash and merge. It results in a slightly cleaner git log.
Thanks again for this - it should make debugging quite a bit easier!",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1751,2020-12-14T11:37:12Z,2020-12-21T07:12:59Z,2020-12-23T10:46:27Z,MERGED,True,62,19,3,https://github.com/matt335672,Cosmetic fixes for minor issues,2,[],https://github.com/neutrinolabs/xrdp/pull/1751,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1751,Mainly cosmetic fixes for minor issues raised recently - see #1715 and #1749,Mainly cosmetic fixes for minor issues raised recently - see #1715 and #1749,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1751,2020-12-14T11:37:12Z,2020-12-21T07:12:59Z,2020-12-23T10:46:27Z,MERGED,True,62,19,3,https://github.com/matt335672,Cosmetic fixes for minor issues,2,[],https://github.com/neutrinolabs/xrdp/pull/1751,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1751#issuecomment-744974103,Mainly cosmetic fixes for minor issues raised recently - see #1715 and #1749,Let's ship this to v0.9.15.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1751,2020-12-14T11:37:12Z,2020-12-21T07:12:59Z,2020-12-23T10:46:27Z,MERGED,True,62,19,3,https://github.com/matt335672,Cosmetic fixes for minor issues,2,[],https://github.com/neutrinolabs/xrdp/pull/1751,https://github.com/matt335672,3,https://github.com/neutrinolabs/xrdp/pull/1751#issuecomment-745234393,Mainly cosmetic fixes for minor issues raised recently - see #1715 and #1749,If no-one adds any further comments I'll merge this in a week or so for v0.9.15,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1753,2020-12-15T04:37:02Z,2020-12-23T12:39:40Z,2020-12-28T06:28:05Z,MERGED,True,123,75,2,https://github.com/aquesnel,Fixing code location log level filtering,1,[],https://github.com/neutrinolabs/xrdp/pull/1753,https://github.com/aquesnel,1,https://github.com/neutrinolabs/xrdp/pull/1753,As part of the logging refactoring in #1708 I broke the code location based log level filtering. This pull request fixes the code location log level filtering.,As part of the logging refactoring in #1708 I broke the code location based log level filtering. This pull request fixes the code location log level filtering.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1753,2020-12-15T04:37:02Z,2020-12-23T12:39:40Z,2020-12-28T06:28:05Z,MERGED,True,123,75,2,https://github.com/aquesnel,Fixing code location log level filtering,1,[],https://github.com/neutrinolabs/xrdp/pull/1753,https://github.com/aquesnel,2,https://github.com/neutrinolabs/xrdp/pull/1753#issuecomment-748494726,As part of the logging refactoring in #1708 I broke the code location based log level filtering. This pull request fixes the code location log level filtering.,"@matt335672 I've implemented the changes you suggested.
Please let me know if more changes are needed before merging.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1753,2020-12-15T04:37:02Z,2020-12-23T12:39:40Z,2020-12-28T06:28:05Z,MERGED,True,123,75,2,https://github.com/aquesnel,Fixing code location log level filtering,1,[],https://github.com/neutrinolabs/xrdp/pull/1753,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/1753#issuecomment-748761469,As part of the logging refactoring in #1708 I broke the code location based log level filtering. This pull request fixes the code location log level filtering.,Is this should be in v0.9.15?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1753,2020-12-15T04:37:02Z,2020-12-23T12:39:40Z,2020-12-28T06:28:05Z,MERGED,True,123,75,2,https://github.com/aquesnel,Fixing code location log level filtering,1,[],https://github.com/neutrinolabs/xrdp/pull/1753,https://github.com/aquesnel,4,https://github.com/neutrinolabs/xrdp/pull/1753#issuecomment-748782682,As part of the logging refactoring in #1708 I broke the code location based log level filtering. This pull request fixes the code location log level filtering.,@metalefty Yes I think this pull request should be in v0.9.15 because the log filtering by source location in devel is broken without this pull request.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1753,2020-12-15T04:37:02Z,2020-12-23T12:39:40Z,2020-12-28T06:28:05Z,MERGED,True,123,75,2,https://github.com/aquesnel,Fixing code location log level filtering,1,[],https://github.com/neutrinolabs/xrdp/pull/1753,https://github.com/aquesnel,5,https://github.com/neutrinolabs/xrdp/pull/1753#issuecomment-749922648,As part of the logging refactoring in #1708 I broke the code location based log level filtering. This pull request fixes the code location log level filtering.,"CR feedback implemented, branch squashed and rebased to devel.
This should be ready to merge once @matt335672 reviews the changes.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1755,2020-12-18T06:25:36Z,2020-12-19T05:03:50Z,2020-12-19T05:03:54Z,MERGED,True,7,8,2,https://github.com/metalefty,man page fixes after neutrinolabs/xorgxrdp#175,1,[],https://github.com/neutrinolabs/xrdp/pull/1755,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1755,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1756,2020-12-18T09:54:03Z,2020-12-21T04:49:21Z,2020-12-21T04:49:26Z,MERGED,True,46,8,1,https://github.com/metalefty,sesman: address the issue of socket file leftovers,2,[],https://github.com/neutrinolabs/xrdp/pull/1756,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1756,"There are two points.
Make sure cleanup files happen after chansrv and Xserver exit. If these
child processes lock socket files, the deletion might fail.
Usually, cleanup of xorgxrdp related socket files is handled by
xorgxrdp. Just in case it failed, perform cleanup also in sesman.
Fixes #1740. Thanks to @matt335672.
Sponsored by:   Cybertrust Japan
Sponsored by:   HAW International","There are two points.
Make sure cleanup files happen after chansrv and Xserver exit. If these
child processes lock socket files, the deletion might fail.
Usually, cleanup of xorgxrdp related socket files is handled by
xorgxrdp. Just in case it failed, perform cleanup also in sesman.
Fixes #1740. Thanks to @matt335672.
Sponsored by:   Cybertrust Japan
Sponsored by:   HAW International",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1756,2020-12-18T09:54:03Z,2020-12-21T04:49:21Z,2020-12-21T04:49:26Z,MERGED,True,46,8,1,https://github.com/metalefty,sesman: address the issue of socket file leftovers,2,[],https://github.com/neutrinolabs/xrdp/pull/1756,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1756#issuecomment-747996682,"There are two points.
Make sure cleanup files happen after chansrv and Xserver exit. If these
child processes lock socket files, the deletion might fail.
Usually, cleanup of xorgxrdp related socket files is handled by
xorgxrdp. Just in case it failed, perform cleanup also in sesman.
Fixes #1740. Thanks to @matt335672.
Sponsored by:   Cybertrust Japan
Sponsored by:   HAW International",I would like to ship this to v0.9.15.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1759,2020-12-21T16:43:58Z,2020-12-22T06:19:38Z,2020-12-23T04:23:23Z,MERGED,True,1,1,1,https://github.com/aquesnel,Fix typo in sesman.ini man page,1,[],https://github.com/neutrinolabs/xrdp/pull/1759,https://github.com/aquesnel,1,https://github.com/neutrinolabs/xrdp/pull/1759,The ChansrvLogging section name was added and changed in #1633 but this documentation line was missed when renaming the section name.,The ChansrvLogging section name was added and changed in #1633 but this documentation line was missed when renaming the section name.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1761,2020-12-23T07:08:04Z,2020-12-23T09:40:40Z,2020-12-23T15:57:35Z,MERGED,True,3,2,2,https://github.com/kraj,riscv doesn't require pointers to be aligned,2,[],https://github.com/neutrinolabs/xrdp/pull/1761,https://github.com/kraj,1,https://github.com/neutrinolabs/xrdp/pull/1761,Signed-off-by: Khem Raj raj.khem@gmail.com,Signed-off-by: Khem Raj raj.khem@gmail.com,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1761,2020-12-23T07:08:04Z,2020-12-23T09:40:40Z,2020-12-23T15:57:35Z,MERGED,True,3,2,2,https://github.com/kraj,riscv doesn't require pointers to be aligned,2,[],https://github.com/neutrinolabs/xrdp/pull/1761,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/1761#issuecomment-750043379,Signed-off-by: Khem Raj raj.khem@gmail.com,"Hi @kraj
I've taken this as it means that v0.9.15 will now at least compile on RISC-V - thanks very much for your contribution.
Do I take it you've got xrdp running on a RISC-V board at the moment then?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1761,2020-12-23T07:08:04Z,2020-12-23T09:40:40Z,2020-12-23T15:57:35Z,MERGED,True,3,2,2,https://github.com/kraj,riscv doesn't require pointers to be aligned,2,[],https://github.com/neutrinolabs/xrdp/pull/1761,https://github.com/kraj,3,https://github.com/neutrinolabs/xrdp/pull/1761#issuecomment-750362620,Signed-off-by: Khem Raj raj.khem@gmail.com,"Hi @kraj
I've taken this as it means that v0.9.15 will now at least compile on RISC-V - thanks very much for your contribution.
Do I take it you've got xrdp running on a RISC-V board at the moment then?

I have only fixed compile this time and I have board but wemu works too",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1765,2020-12-28T11:10:25Z,2021-01-07T11:05:28Z,2021-01-07T11:05:33Z,MERGED,True,51,31,8,https://github.com/matt335672,Remove output on stdout by default on daemon startup,1,[],https://github.com/neutrinolabs/xrdp/pull/1765,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1765,"Here's an initial stab at removing the logging output on stdout by default (see #1762)
It's largely what I suggested in #1762, but :-

It was easier to retain the dump_on_start member and just add a parameter to log_start()
I've also included the config dump which is done by sesman.
I've also removed an xrdp-sesman message ""starting sesman in foreground...""

Both xrdp and xrdp-sesman take a --log-config argument which results in the old behaviour.","Here's an initial stab at removing the logging output on stdout by default (see #1762)
It's largely what I suggested in #1762, but :-

It was easier to retain the dump_on_start member and just add a parameter to log_start()
I've also included the config dump which is done by sesman.
I've also removed an xrdp-sesman message ""starting sesman in foreground...""

Both xrdp and xrdp-sesman take a --log-config argument which results in the old behaviour.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1765,2020-12-28T11:10:25Z,2021-01-07T11:05:28Z,2021-01-07T11:05:33Z,MERGED,True,51,31,8,https://github.com/matt335672,Remove output on stdout by default on daemon startup,1,[],https://github.com/neutrinolabs/xrdp/pull/1765,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/1765#issuecomment-751677042,"Here's an initial stab at removing the logging output on stdout by default (see #1762)
It's largely what I suggested in #1762, but :-

It was easier to retain the dump_on_start member and just add a parameter to log_start()
I've also included the config dump which is done by sesman.
I've also removed an xrdp-sesman message ""starting sesman in foreground...""

Both xrdp and xrdp-sesman take a --log-config argument which results in the old behaviour.",@aquesnel - I'm not able to request a review by you using the GUI but please comment.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1765,2020-12-28T11:10:25Z,2021-01-07T11:05:28Z,2021-01-07T11:05:33Z,MERGED,True,51,31,8,https://github.com/matt335672,Remove output on stdout by default on daemon startup,1,[],https://github.com/neutrinolabs/xrdp/pull/1765,https://github.com/aquesnel,3,https://github.com/neutrinolabs/xrdp/pull/1765#issuecomment-752640329,"Here's an initial stab at removing the logging output on stdout by default (see #1762)
It's largely what I suggested in #1762, but :-

It was easier to retain the dump_on_start member and just add a parameter to log_start()
I've also included the config dump which is done by sesman.
I've also removed an xrdp-sesman message ""starting sesman in foreground...""

Both xrdp and xrdp-sesman take a --log-config argument which results in the old behaviour.",@matt335672 thank you for making the command line argument consistent across xrdp and sesman.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1766,2020-12-28T13:53:30Z,2020-12-28T13:59:01Z,2020-12-28T13:59:05Z,MERGED,True,37,2,3,https://github.com/metalefty,Release v0.9.15,2,[],https://github.com/neutrinolabs/xrdp/pull/1766,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1766,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1767,2020-12-28T21:10:26Z,2021-02-23T09:59:47Z,2021-02-27T16:21:40Z,MERGED,True,1262,1210,15,https://github.com/aquesnel,Unify logging in xrdp/*,3,[],https://github.com/neutrinolabs/xrdp/pull/1767,https://github.com/aquesnel,1,https://github.com/neutrinolabs/xrdp/pull/1767,"Follow-on pull request to #1633 which migrates all logging in the xrdp directory to use the LOG() and LOG_DEVEL() macros.
Changes:

Migrate logging to the LOG() and LOG_DEVEL() macros (using text transform script)
error logs use the LOG macro
add XRDP_BOOT_LOG_LEVEL environment variable to enable run time debugging of xrdp before the logging sub-system is initialized.
update code formatting with astyle for all files in xrdp/*","Follow-on pull request to #1633 which migrates all logging in the xrdp directory to use the LOG() and LOG_DEVEL() macros.
Changes:

Migrate logging to the LOG() and LOG_DEVEL() macros (using text transform script)
error logs use the LOG macro
add XRDP_BOOT_LOG_LEVEL environment variable to enable run time debugging of xrdp before the logging sub-system is initialized.
update code formatting with astyle for all files in xrdp/*",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1767,2020-12-28T21:10:26Z,2021-02-23T09:59:47Z,2021-02-27T16:21:40Z,MERGED,True,1262,1210,15,https://github.com/aquesnel,Unify logging in xrdp/*,3,[],https://github.com/neutrinolabs/xrdp/pull/1767,https://github.com/aquesnel,2,https://github.com/neutrinolabs/xrdp/pull/1767#issuecomment-751865476,"Follow-on pull request to #1633 which migrates all logging in the xrdp directory to use the LOG() and LOG_DEVEL() macros.
Changes:

Migrate logging to the LOG() and LOG_DEVEL() macros (using text transform script)
error logs use the LOG macro
add XRDP_BOOT_LOG_LEVEL environment variable to enable run time debugging of xrdp before the logging sub-system is initialized.
update code formatting with astyle for all files in xrdp/*",This pull request is ready for review.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1767,2020-12-28T21:10:26Z,2021-02-23T09:59:47Z,2021-02-27T16:21:40Z,MERGED,True,1262,1210,15,https://github.com/aquesnel,Unify logging in xrdp/*,3,[],https://github.com/neutrinolabs/xrdp/pull/1767,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/1767#issuecomment-753769231,"Follow-on pull request to #1633 which migrates all logging in the xrdp directory to use the LOG() and LOG_DEVEL() macros.
Changes:

Migrate logging to the LOG() and LOG_DEVEL() macros (using text transform script)
error logs use the LOG macro
add XRDP_BOOT_LOG_LEVEL environment variable to enable run time debugging of xrdp before the logging sub-system is initialized.
update code formatting with astyle for all files in xrdp/*","@aquesnel
Hi, thanks again for your big contribution to the log system.  I'd appreciate it if you write up documents about the new log system on the wiki.
This is written by myself years ago. Feel free to edit and replace it.
https://github.com/neutrinolabs/xrdp/wiki/Reworking-logs",True,{'THUMBS_UP': ['https://github.com/matt335672']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1767,2020-12-28T21:10:26Z,2021-02-23T09:59:47Z,2021-02-27T16:21:40Z,MERGED,True,1262,1210,15,https://github.com/aquesnel,Unify logging in xrdp/*,3,[],https://github.com/neutrinolabs/xrdp/pull/1767,https://github.com/aquesnel,4,https://github.com/neutrinolabs/xrdp/pull/1767#issuecomment-754121080,"Follow-on pull request to #1633 which migrates all logging in the xrdp directory to use the LOG() and LOG_DEVEL() macros.
Changes:

Migrate logging to the LOG() and LOG_DEVEL() macros (using text transform script)
error logs use the LOG macro
add XRDP_BOOT_LOG_LEVEL environment variable to enable run time debugging of xrdp before the logging sub-system is initialized.
update code formatting with astyle for all files in xrdp/*","@metalefty that's a good idea, I will update the wiki with documentation about the logging system.
Since the unification of the logs is not yet complete I plan to add a new section describing the unified log system and it's capabilities. Once the log unification work is complete them I'll remove the outdated sections from the wiki.
The documentation that I'll write will be a high level overview of the logging and then link to the existing documentation in the code and the man pages


  
    
      xrdp/common/log.h
    
    
         Line 97
      in
      c76c580
    
  
  
    

        
          
           #define LOG_DEVEL(log_level, args...) \ 
        
    
  



  
    
      xrdp/docs/man/xrdp.ini.5.in
    
    
         Line 216
      in
      c76c580
    
  
  
    

        
          
           .SH ""LOGGING"" 
        
    
  



Do you know if there is a way to have the doxygen and man pages rendered and available online so that they can be referenced online?
I looked into GitHub pages and netlify but I didn't find a clear solution for making the doxygen and man pages available online.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1767,2020-12-28T21:10:26Z,2021-02-23T09:59:47Z,2021-02-27T16:21:40Z,MERGED,True,1262,1210,15,https://github.com/aquesnel,Unify logging in xrdp/*,3,[],https://github.com/neutrinolabs/xrdp/pull/1767,https://github.com/matt335672,5,https://github.com/neutrinolabs/xrdp/pull/1767#issuecomment-754580038,"Follow-on pull request to #1633 which migrates all logging in the xrdp directory to use the LOG() and LOG_DEVEL() macros.
Changes:

Migrate logging to the LOG() and LOG_DEVEL() macros (using text transform script)
error logs use the LOG macro
add XRDP_BOOT_LOG_LEVEL environment variable to enable run time debugging of xrdp before the logging sub-system is initialized.
update code formatting with astyle for all files in xrdp/*","I agree it's not immediately obvious how to link in doxygen and manpages. There are a few people using gh-pages to do this, but committing the output of doxygen to the same repo seems crazy to me.",True,{'THUMBS_UP': ['https://github.com/aquesnel']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1767,2020-12-28T21:10:26Z,2021-02-23T09:59:47Z,2021-02-27T16:21:40Z,MERGED,True,1262,1210,15,https://github.com/aquesnel,Unify logging in xrdp/*,3,[],https://github.com/neutrinolabs/xrdp/pull/1767,https://github.com/aquesnel,6,https://github.com/neutrinolabs/xrdp/pull/1767#issuecomment-755870743,"Follow-on pull request to #1633 which migrates all logging in the xrdp directory to use the LOG() and LOG_DEVEL() macros.
Changes:

Migrate logging to the LOG() and LOG_DEVEL() macros (using text transform script)
error logs use the LOG macro
add XRDP_BOOT_LOG_LEVEL environment variable to enable run time debugging of xrdp before the logging sub-system is initialized.
update code formatting with astyle for all files in xrdp/*","@metalefty I've written the Logging wiki page and updated the Reworking logs page to reference the new page. Can you please review it and let me now if you have any feedback.
@matt335672 I agree that committing the output of doxygen to the repo seems crazy.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1767,2020-12-28T21:10:26Z,2021-02-23T09:59:47Z,2021-02-27T16:21:40Z,MERGED,True,1262,1210,15,https://github.com/aquesnel,Unify logging in xrdp/*,3,[],https://github.com/neutrinolabs/xrdp/pull/1767,https://github.com/matt335672,7,https://github.com/neutrinolabs/xrdp/pull/1767#issuecomment-756054854,"Follow-on pull request to #1633 which migrates all logging in the xrdp directory to use the LOG() and LOG_DEVEL() macros.
Changes:

Migrate logging to the LOG() and LOG_DEVEL() macros (using text transform script)
error logs use the LOG macro
add XRDP_BOOT_LOG_LEVEL environment variable to enable run time debugging of xrdp before the logging sub-system is initialized.
update code formatting with astyle for all files in xrdp/*","Good work.
Minor comments/suggestions
Logging

use xrdp rather than XRDP to refer to the project (see here). @metalefty made this comment in relation to one of my PRs relatively recently, which is why I wrote the Wiki page.
Chansrv log is per-user rather than per-system. So it appears in $XDG_DATA_HOME/xrdp or $HOME/.local/share/xrdp. Alternatively you could just say that for any system, log locations are documented in the man pages.
sesman forks too to run the session leader, so the  comment under 'log files' can be expanded to incluse sesman.

Reworking logs
Might be worth saying explicitly in the g_write/g_writeln section that when xrdp and xrdp-sesman are daemonised they redirect stdout to /dev/null anyway, so some of the existing code which appears to be logging errors actually isn't. I've been caught by this a few times, lastly in #1776.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1767,2020-12-28T21:10:26Z,2021-02-23T09:59:47Z,2021-02-27T16:21:40Z,MERGED,True,1262,1210,15,https://github.com/aquesnel,Unify logging in xrdp/*,3,[],https://github.com/neutrinolabs/xrdp/pull/1767,https://github.com/aquesnel,8,https://github.com/neutrinolabs/xrdp/pull/1767#issuecomment-757660251,"Follow-on pull request to #1633 which migrates all logging in the xrdp directory to use the LOG() and LOG_DEVEL() macros.
Changes:

Migrate logging to the LOG() and LOG_DEVEL() macros (using text transform script)
error logs use the LOG macro
add XRDP_BOOT_LOG_LEVEL environment variable to enable run time debugging of xrdp before the logging sub-system is initialized.
update code formatting with astyle for all files in xrdp/*","@matt335672 I've updated the logging wiki page based on your feedback. I didn't update the reworking logs page since I didn't change any connect on that page.
Please let me know if you have more feedback.",True,{'THUMBS_UP': ['https://github.com/matt335672']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1767,2020-12-28T21:10:26Z,2021-02-23T09:59:47Z,2021-02-27T16:21:40Z,MERGED,True,1262,1210,15,https://github.com/aquesnel,Unify logging in xrdp/*,3,[],https://github.com/neutrinolabs/xrdp/pull/1767,https://github.com/aquesnel,9,https://github.com/neutrinolabs/xrdp/pull/1767#issuecomment-772995052,"Follow-on pull request to #1633 which migrates all logging in the xrdp directory to use the LOG() and LOG_DEVEL() macros.
Changes:

Migrate logging to the LOG() and LOG_DEVEL() macros (using text transform script)
error logs use the LOG macro
add XRDP_BOOT_LOG_LEVEL environment variable to enable run time debugging of xrdp before the logging sub-system is initialized.
update code formatting with astyle for all files in xrdp/*",@metalefty I've removed the bootstrap logging that you said was hacky. Let me know if you have more feedback.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1767,2020-12-28T21:10:26Z,2021-02-23T09:59:47Z,2021-02-27T16:21:40Z,MERGED,True,1262,1210,15,https://github.com/aquesnel,Unify logging in xrdp/*,3,[],https://github.com/neutrinolabs/xrdp/pull/1767,https://github.com/matt335672,10,https://github.com/neutrinolabs/xrdp/pull/1767#issuecomment-773195048,"Follow-on pull request to #1633 which migrates all logging in the xrdp directory to use the LOG() and LOG_DEVEL() macros.
Changes:

Migrate logging to the LOG() and LOG_DEVEL() macros (using text transform script)
error logs use the LOG macro
add XRDP_BOOT_LOG_LEVEL environment variable to enable run time debugging of xrdp before the logging sub-system is initialized.
update code formatting with astyle for all files in xrdp/*",Give me a couple of days to look at this - I've not managed it yet.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1767,2020-12-28T21:10:26Z,2021-02-23T09:59:47Z,2021-02-27T16:21:40Z,MERGED,True,1262,1210,15,https://github.com/aquesnel,Unify logging in xrdp/*,3,[],https://github.com/neutrinolabs/xrdp/pull/1767,https://github.com/aquesnel,11,https://github.com/neutrinolabs/xrdp/pull/1767#issuecomment-774869315,"Follow-on pull request to #1633 which migrates all logging in the xrdp directory to use the LOG() and LOG_DEVEL() macros.
Changes:

Migrate logging to the LOG() and LOG_DEVEL() macros (using text transform script)
error logs use the LOG macro
add XRDP_BOOT_LOG_LEVEL environment variable to enable run time debugging of xrdp before the logging sub-system is initialized.
update code formatting with astyle for all files in xrdp/*","@matt335672 , Thanks for reviewing and catching the signal handler issue. I've implemented the feedback that you suggested. Please let me know if you have more feedback before this can be merged.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1769,2020-12-29T09:57:31Z,2020-12-29T10:44:11Z,2020-12-29T10:44:17Z,MERGED,True,7,4,4,https://github.com/matt335672,Fix regressions in auth modules,1,[],https://github.com/neutrinolabs/xrdp/pull/1769,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1769,"This PR is prompted by #1768
Investigation showed that:-

some of the auth modules use functions now moved to the new string_calls.h module (see 0a1a8f4) and the CI doesn't check these.
The verify_user_pam_userpass.c module accessed with --enable-pamuserpass could no longer be called. This is a regression introduced with c69a26e (#1751) which made in compulsory in this instance to also specify --disable-pam.

Both of these issues are fixed with this PR.","This PR is prompted by #1768
Investigation showed that:-

some of the auth modules use functions now moved to the new string_calls.h module (see 0a1a8f4) and the CI doesn't check these.
The verify_user_pam_userpass.c module accessed with --enable-pamuserpass could no longer be called. This is a regression introduced with c69a26e (#1751) which made in compulsory in this instance to also specify --disable-pam.

Both of these issues are fixed with this PR.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1771,2020-12-30T10:48:02Z,2020-12-31T12:46:03Z,2021-01-07T11:56:47Z,MERGED,True,18,3,4,https://github.com/matt335672,Bump cppcheck version to 2.3,1,[],https://github.com/neutrinolabs/xrdp/pull/1771,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1771,"Cppcheck bumped to 2.3.
This version of cppcheck generated additional warnings:-

sesman/chansrv/chansrv_xfs.c
sesman/chansrv/chansrv_xfs.c:293:16: error: Null pointer dereference: xfs->inode_table [nullPointer]
            xfs->inode_table[0] = NULL;
               ^
sesman/chansrv/chansrv_xfs.c:272:26: note: xfs->inode_table is assigned value 0
        xfs->inode_table = NULL;
                         ^
sesman/chansrv/chansrv_xfs.c:293:16: note: Null pointer dereference
            xfs->inode_table[0] = NULL;
               ^
sesman/chansrv/chansrv_xfs.c:294:16: error: Null pointer dereference: xfs->inode_table [nullPointer]
            xfs->inode_table[FUSE_ROOT_ID] = xino1;
               ^
sesman/chansrv/chansrv_xfs.c:272:26: note: xfs->inode_table is assigned value 0
        xfs->inode_table = NULL;
                         ^
sesman/chansrv/chansrv_xfs.c:294:16: note: Null pointer dereference
            xfs->inode_table[FUSE_ROOT_ID] = xino1;
               ^
sesman/chansrv/chansrv_xfs.c:295:16: error: Null pointer dereference: xfs->inode_table [nullPointer]
            xfs->inode_table[DELETE_PENDING_ID] = xino2;
               ^
sesman/chansrv/chansrv_xfs.c:272:26: note: xfs->inode_table is assigned value 0
        xfs->inode_table = NULL;
                         ^
sesman/chansrv/chansrv_xfs.c:295:16: note: Null pointer dereference
            xfs->inode_table[DELETE_PENDING_ID] = xino2;
               ^



common/pixman_region.c
common/pixman-region.c:1802:15: error: Deallocation of an auto-variable (stack_regions) results in undefined behaviour. [autovarInvalidDeallocation]
        free (ri);
              ^
common/pixman-region.c:1638:10: note: Assignment 'ri=stack_regions', assigned value is stack_regions
    ri = stack_regions;
         ^
common/pixman-region.c:1802:15: note: Deallocating memory that was not dynamically allocated
        free (ri);
              ^


Warnings addressed as follows
sesman/chansrv/chansrv_xfs.c
This is believed to be a false positive, as grow_xfs() cannot return with xfs->inode_table == NULL. A report was raised on this for cppcheck 2.2 with the cppcheck team in the discussion forum but no response was ever received.
The simplest resolution was to add an extra guard check for xfs->inode_table being NULL. This is extremely cheap to do as this code is only called once.
common/pixman-region.c
This one is unsurprising in many ways, as the ri variable is used to point to both stack memory and heap memory. A guard check on the free() call prevents stack memory being free'd.
Code was compared with upstream at https://cgit.freedesktop.org/pixman/tree/pixman/pixman-region.c but no significant differences were found in this area. The warnings on the affected lines are simply disabled, as the code clearly works and there is nothing to be gained from deviating significantly from upstream.
Other notes
An extra check was also added to scripts/install_cppcheck.sh to provide better error reporting if the z3 development files are not installed.","Cppcheck bumped to 2.3.
This version of cppcheck generated additional warnings:-

sesman/chansrv/chansrv_xfs.c
sesman/chansrv/chansrv_xfs.c:293:16: error: Null pointer dereference: xfs->inode_table [nullPointer]
            xfs->inode_table[0] = NULL;
               ^
sesman/chansrv/chansrv_xfs.c:272:26: note: xfs->inode_table is assigned value 0
        xfs->inode_table = NULL;
                         ^
sesman/chansrv/chansrv_xfs.c:293:16: note: Null pointer dereference
            xfs->inode_table[0] = NULL;
               ^
sesman/chansrv/chansrv_xfs.c:294:16: error: Null pointer dereference: xfs->inode_table [nullPointer]
            xfs->inode_table[FUSE_ROOT_ID] = xino1;
               ^
sesman/chansrv/chansrv_xfs.c:272:26: note: xfs->inode_table is assigned value 0
        xfs->inode_table = NULL;
                         ^
sesman/chansrv/chansrv_xfs.c:294:16: note: Null pointer dereference
            xfs->inode_table[FUSE_ROOT_ID] = xino1;
               ^
sesman/chansrv/chansrv_xfs.c:295:16: error: Null pointer dereference: xfs->inode_table [nullPointer]
            xfs->inode_table[DELETE_PENDING_ID] = xino2;
               ^
sesman/chansrv/chansrv_xfs.c:272:26: note: xfs->inode_table is assigned value 0
        xfs->inode_table = NULL;
                         ^
sesman/chansrv/chansrv_xfs.c:295:16: note: Null pointer dereference
            xfs->inode_table[DELETE_PENDING_ID] = xino2;
               ^



common/pixman_region.c
common/pixman-region.c:1802:15: error: Deallocation of an auto-variable (stack_regions) results in undefined behaviour. [autovarInvalidDeallocation]
        free (ri);
              ^
common/pixman-region.c:1638:10: note: Assignment 'ri=stack_regions', assigned value is stack_regions
    ri = stack_regions;
         ^
common/pixman-region.c:1802:15: note: Deallocating memory that was not dynamically allocated
        free (ri);
              ^


Warnings addressed as follows
sesman/chansrv/chansrv_xfs.c
This is believed to be a false positive, as grow_xfs() cannot return with xfs->inode_table == NULL. A report was raised on this for cppcheck 2.2 with the cppcheck team in the discussion forum but no response was ever received.
The simplest resolution was to add an extra guard check for xfs->inode_table being NULL. This is extremely cheap to do as this code is only called once.
common/pixman-region.c
This one is unsurprising in many ways, as the ri variable is used to point to both stack memory and heap memory. A guard check on the free() call prevents stack memory being free'd.
Code was compared with upstream at https://cgit.freedesktop.org/pixman/tree/pixman/pixman-region.c but no significant differences were found in this area. The warnings on the affected lines are simply disabled, as the code clearly works and there is nothing to be gained from deviating significantly from upstream.
Other notes
An extra check was also added to scripts/install_cppcheck.sh to provide better error reporting if the z3 development files are not installed.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1778,2021-01-06T17:14:11Z,2021-01-07T10:47:43Z,2021-01-07T10:47:48Z,MERGED,True,86,80,2,https://github.com/matt335672,Support EC cryptographic keys for TLS,1,[],https://github.com/neutrinolabs/xrdp/pull/1778,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1778,"Fixes #1776
At present the certificate chain presented for TLS needs to be RSA. However, current mstsc.exe and Remmina clients can accept ECC certificates if they are presented with them.
xrdp can be made usable with non-RSA certificates and private keys by changing the call to SSL_CTX_use_RSAPrivateKey_file() (which only loads RSA keys) to SSL_CTX_use_PrivateKey_file() (which loads any private key type). This call has been present in OpenSSL since at least version 0.9.6.
During the course of investigating #1776, it was found that the error logging in ssl_calls.c is simply not working. Much of it goes to stdout which is disabled.
There are three commits in this PR:-

Move all logging to user the new macros
Run the ssl_calls files through astyle
Replace the call to load the private key.

Regression testing shows:-

the new code can read either an RSA key or an secp384r1 key (other types have not been tried).
Without the change to SSL_CTX_use_PrivateKey_file in 849a8e7, the following error is logged when trying to load a non-RSA key:-
Error loading TLS RSA private key from /etc/xrdp/ec-key.pem","Fixes #1776
At present the certificate chain presented for TLS needs to be RSA. However, current mstsc.exe and Remmina clients can accept ECC certificates if they are presented with them.
xrdp can be made usable with non-RSA certificates and private keys by changing the call to SSL_CTX_use_RSAPrivateKey_file() (which only loads RSA keys) to SSL_CTX_use_PrivateKey_file() (which loads any private key type). This call has been present in OpenSSL since at least version 0.9.6.
During the course of investigating #1776, it was found that the error logging in ssl_calls.c is simply not working. Much of it goes to stdout which is disabled.
There are three commits in this PR:-

Move all logging to user the new macros
Run the ssl_calls files through astyle
Replace the call to load the private key.

Regression testing shows:-

the new code can read either an RSA key or an secp384r1 key (other types have not been tried).
Without the change to SSL_CTX_use_PrivateKey_file in 849a8e7, the following error is logged when trying to load a non-RSA key:-
Error loading TLS RSA private key from /etc/xrdp/ec-key.pem",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1778,2021-01-06T17:14:11Z,2021-01-07T10:47:43Z,2021-01-07T10:47:48Z,MERGED,True,86,80,2,https://github.com/matt335672,Support EC cryptographic keys for TLS,1,[],https://github.com/neutrinolabs/xrdp/pull/1778,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/1778#issuecomment-755436153,"Fixes #1776
At present the certificate chain presented for TLS needs to be RSA. However, current mstsc.exe and Remmina clients can accept ECC certificates if they are presented with them.
xrdp can be made usable with non-RSA certificates and private keys by changing the call to SSL_CTX_use_RSAPrivateKey_file() (which only loads RSA keys) to SSL_CTX_use_PrivateKey_file() (which loads any private key type). This call has been present in OpenSSL since at least version 0.9.6.
During the course of investigating #1776, it was found that the error logging in ssl_calls.c is simply not working. Much of it goes to stdout which is disabled.
There are three commits in this PR:-

Move all logging to user the new macros
Run the ssl_calls files through astyle
Replace the call to load the private key.

Regression testing shows:-

the new code can read either an RSA key or an secp384r1 key (other types have not been tried).
Without the change to SSL_CTX_use_PrivateKey_file in 849a8e7, the following error is logged when trying to load a non-RSA key:-
Error loading TLS RSA private key from /etc/xrdp/ec-key.pem",@aquesnel - if you have the time I'd very much appreciate your comments on the logging changes I've made in this PR.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1778,2021-01-06T17:14:11Z,2021-01-07T10:47:43Z,2021-01-07T10:47:48Z,MERGED,True,86,80,2,https://github.com/matt335672,Support EC cryptographic keys for TLS,1,[],https://github.com/neutrinolabs/xrdp/pull/1778,https://github.com/aquesnel,3,https://github.com/neutrinolabs/xrdp/pull/1778#issuecomment-755793761,"Fixes #1776
At present the certificate chain presented for TLS needs to be RSA. However, current mstsc.exe and Remmina clients can accept ECC certificates if they are presented with them.
xrdp can be made usable with non-RSA certificates and private keys by changing the call to SSL_CTX_use_RSAPrivateKey_file() (which only loads RSA keys) to SSL_CTX_use_PrivateKey_file() (which loads any private key type). This call has been present in OpenSSL since at least version 0.9.6.
During the course of investigating #1776, it was found that the error logging in ssl_calls.c is simply not working. Much of it goes to stdout which is disabled.
There are three commits in this PR:-

Move all logging to user the new macros
Run the ssl_calls files through astyle
Replace the call to load the private key.

Regression testing shows:-

the new code can read either an RSA key or an secp384r1 key (other types have not been tried).
Without the change to SSL_CTX_use_PrivateKey_file in 849a8e7, the following error is logged when trying to load a non-RSA key:-
Error loading TLS RSA private key from /etc/xrdp/ec-key.pem",@matt335672 good work. The changes look good to me.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1778,2021-01-06T17:14:11Z,2021-01-07T10:47:43Z,2021-01-07T10:47:48Z,MERGED,True,86,80,2,https://github.com/matt335672,Support EC cryptographic keys for TLS,1,[],https://github.com/neutrinolabs/xrdp/pull/1778,https://github.com/matt335672,4,https://github.com/neutrinolabs/xrdp/pull/1778#issuecomment-756031725,"Fixes #1776
At present the certificate chain presented for TLS needs to be RSA. However, current mstsc.exe and Remmina clients can accept ECC certificates if they are presented with them.
xrdp can be made usable with non-RSA certificates and private keys by changing the call to SSL_CTX_use_RSAPrivateKey_file() (which only loads RSA keys) to SSL_CTX_use_PrivateKey_file() (which loads any private key type). This call has been present in OpenSSL since at least version 0.9.6.
During the course of investigating #1776, it was found that the error logging in ssl_calls.c is simply not working. Much of it goes to stdout which is disabled.
There are three commits in this PR:-

Move all logging to user the new macros
Run the ssl_calls files through astyle
Replace the call to load the private key.

Regression testing shows:-

the new code can read either an RSA key or an secp384r1 key (other types have not been tried).
Without the change to SSL_CTX_use_PrivateKey_file in 849a8e7, the following error is logged when trying to load a non-RSA key:-
Error loading TLS RSA private key from /etc/xrdp/ec-key.pem",Thanks both. I'll squash and merge.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1787,2021-01-20T12:57:52Z,2021-01-21T10:14:13Z,2021-01-21T10:15:29Z,MERGED,True,39,14,9,https://github.com/matt335672,Minor manpage fixes,1,[],https://github.com/neutrinolabs/xrdp/pull/1787,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1787,"Minor manpage fixes and improvements

xrdp, xrdp-sesman and xrdp-chansrv are in $(sbindir) rather than $(bindir). This change makes that clear in the pages.
The groff macros .UR and .RE are used for web urls so that HTML manpages (when we generate them) will work properly.
The repeated string 'http://www.xrdp.org/' for the xrdp homepage has been replaced with a macro.

Any other suggestions welcome.","Minor manpage fixes and improvements

xrdp, xrdp-sesman and xrdp-chansrv are in $(sbindir) rather than $(bindir). This change makes that clear in the pages.
The groff macros .UR and .RE are used for web urls so that HTML manpages (when we generate them) will work properly.
The repeated string 'http://www.xrdp.org/' for the xrdp homepage has been replaced with a macro.

Any other suggestions welcome.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1787,2021-01-20T12:57:52Z,2021-01-21T10:14:13Z,2021-01-21T10:15:29Z,MERGED,True,39,14,9,https://github.com/matt335672,Minor manpage fixes,1,[],https://github.com/neutrinolabs/xrdp/pull/1787,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1787#issuecomment-764180631,"Minor manpage fixes and improvements

xrdp, xrdp-sesman and xrdp-chansrv are in $(sbindir) rather than $(bindir). This change makes that clear in the pages.
The groff macros .UR and .RE are used for web urls so that HTML manpages (when we generate them) will work properly.
The repeated string 'http://www.xrdp.org/' for the xrdp homepage has been replaced with a macro.

Any other suggestions welcome.",LGTM.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1789,2021-01-22T10:49:53Z,2021-02-04T10:58:06Z,2021-02-04T10:58:14Z,MERGED,True,85,59,4,https://github.com/matt335672,Added libxrdp_get_channel_count(),1,[],https://github.com/neutrinolabs/xrdp/pull/1789,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1789,"Fixes #1775
The particular error focussed on here this :-
[yyyymmdd-hh:mm:ss] [ERROR] libxrdp_query_channel - Channel out of range 4

Previous to this PR, the only way that xrdp code had to iterate over the channels was to call libxrdp_query_channel() with channel ID values increasing from zero until the call failed. This method would always result in the above message being generated when the maximum channel ID was exceeded. Although the message is harmless it is misleading in the sense that no error has actually occured.
The PR adds the call libxrdp_get_channel_count() so that code which needs to iterate over the channels can use a for loop to do this. This occurs in two places:-

xrdp_mm_trans_send_channel_setup() iterates over the channels when sending them to chansrv
xrdp_wm_init() iterates over the channels when processing the [Channels] section in xrdp.ini

In both cases, the resulting code now reads more easily.
Two other cleanups have been incorporated:-

The channel ID parameter to libxrdp_query_channel() has been renamed from index to channel_id for consistency with other channel calls.
A couple of g_writeln() calls in xrdp_wm.c have been replaced with a single call to the LOG() macro.

This PR conflicts a little with #1742 - that PR also addresses these particular errors:-
[yyyymmdd-hh:mm:ss] [ERROR] libxrdp_query_channel - Channel 0 name rdpdr","Fixes #1775
The particular error focussed on here this :-
[yyyymmdd-hh:mm:ss] [ERROR] libxrdp_query_channel - Channel out of range 4

Previous to this PR, the only way that xrdp code had to iterate over the channels was to call libxrdp_query_channel() with channel ID values increasing from zero until the call failed. This method would always result in the above message being generated when the maximum channel ID was exceeded. Although the message is harmless it is misleading in the sense that no error has actually occured.
The PR adds the call libxrdp_get_channel_count() so that code which needs to iterate over the channels can use a for loop to do this. This occurs in two places:-

xrdp_mm_trans_send_channel_setup() iterates over the channels when sending them to chansrv
xrdp_wm_init() iterates over the channels when processing the [Channels] section in xrdp.ini

In both cases, the resulting code now reads more easily.
Two other cleanups have been incorporated:-

The channel ID parameter to libxrdp_query_channel() has been renamed from index to channel_id for consistency with other channel calls.
A couple of g_writeln() calls in xrdp_wm.c have been replaced with a single call to the LOG() macro.

This PR conflicts a little with #1742 - that PR also addresses these particular errors:-
[yyyymmdd-hh:mm:ss] [ERROR] libxrdp_query_channel - Channel 0 name rdpdr",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1793,2021-01-23T23:17:31Z,2021-01-25T09:12:35Z,2021-01-30T14:24:47Z,MERGED,True,3,1,1,https://github.com/aquesnel,Fixing TS_PLAY_SOUND_PDU_DATA to set the correct frequency and duration,1,[],https://github.com/neutrinolabs/xrdp/pull/1793,https://github.com/aquesnel,1,https://github.com/neutrinolabs/xrdp/pull/1793,"The libxrdp_send_bell function does not follow the MS-RDPBCGR spec for the TS_PLAY_SOUND_PDU_DATA message.
This pull request reconciles the original author's intent based on their comments with the spec.
This pull request has been tested using the VNC backend since the Xorg backend does not seem to support sending bell messages.","The libxrdp_send_bell function does not follow the MS-RDPBCGR spec for the TS_PLAY_SOUND_PDU_DATA message.
This pull request reconciles the original author's intent based on their comments with the spec.
This pull request has been tested using the VNC backend since the Xorg backend does not seem to support sending bell messages.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1793,2021-01-23T23:17:31Z,2021-01-25T09:12:35Z,2021-01-30T14:24:47Z,MERGED,True,3,1,1,https://github.com/aquesnel,Fixing TS_PLAY_SOUND_PDU_DATA to set the correct frequency and duration,1,[],https://github.com/neutrinolabs/xrdp/pull/1793,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/1793#issuecomment-766668955,"The libxrdp_send_bell function does not follow the MS-RDPBCGR spec for the TS_PLAY_SOUND_PDU_DATA message.
This pull request reconciles the original author's intent based on their comments with the spec.
This pull request has been tested using the VNC backend since the Xorg backend does not seem to support sending bell messages.",Agreed - this seems like an obvious fix. Good spot!,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1800,2021-02-05T11:51:31Z,2021-02-08T09:00:28Z,2021-02-08T09:00:35Z,MERGED,True,9,9,2,https://github.com/matt335672,Rename USE_NOPAM as USE_PAM,1,[],https://github.com/neutrinolabs/xrdp/pull/1800,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1800,"This is addressing a minor annoyance of mine.
I had a conversation with @metalefty a while ago about avoiding double negatives where possible (i.e. replace if (!no_daemon) with if (daemon)) to improve readability for developers whose first language isn't English.
This PR replaces #ifdef USE_NOPAM with #ifdef USE_PAM in the xrdp daemon code. I have to say that even as a native English speaker I find this one needs a couple of tries to parse in my head.","This is addressing a minor annoyance of mine.
I had a conversation with @metalefty a while ago about avoiding double negatives where possible (i.e. replace if (!no_daemon) with if (daemon)) to improve readability for developers whose first language isn't English.
This PR replaces #ifdef USE_NOPAM with #ifdef USE_PAM in the xrdp daemon code. I have to say that even as a native English speaker I find this one needs a couple of tries to parse in my head.",True,{'THUMBS_UP': ['https://github.com/aquesnel']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1800,2021-02-05T11:51:31Z,2021-02-08T09:00:28Z,2021-02-08T09:00:35Z,MERGED,True,9,9,2,https://github.com/matt335672,Rename USE_NOPAM as USE_PAM,1,[],https://github.com/neutrinolabs/xrdp/pull/1800,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1800#issuecomment-774953217,"This is addressing a minor annoyance of mine.
I had a conversation with @metalefty a while ago about avoiding double negatives where possible (i.e. replace if (!no_daemon) with if (daemon)) to improve readability for developers whose first language isn't English.
This PR replaces #ifdef USE_NOPAM with #ifdef USE_PAM in the xrdp daemon code. I have to say that even as a native English speaker I find this one needs a couple of tries to parse in my head.",Thank you for the good catch.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1802,2021-02-09T03:47:33Z,2021-02-11T11:26:14Z,2021-02-12T00:19:41Z,MERGED,True,175,183,2,https://github.com/aquesnel,Unify logging in xup/*,1,[],https://github.com/neutrinolabs/xrdp/pull/1802,https://github.com/aquesnel,1,https://github.com/neutrinolabs/xrdp/pull/1802,"Follow-on pull request to #1633 which migrates all logging in the xup directory to use the LOG() and LOG_DEVEL() macros.
Changes:

Migrate logging to the LOG() and LOG_DEVEL() macros (using text transform script)
error logs use the LOG macro
update code formatting with astyle for all files in xup/*","Follow-on pull request to #1633 which migrates all logging in the xup directory to use the LOG() and LOG_DEVEL() macros.
Changes:

Migrate logging to the LOG() and LOG_DEVEL() macros (using text transform script)
error logs use the LOG macro
update code formatting with astyle for all files in xup/*",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1802,2021-02-09T03:47:33Z,2021-02-11T11:26:14Z,2021-02-12T00:19:41Z,MERGED,True,175,183,2,https://github.com/aquesnel,Unify logging in xup/*,1,[],https://github.com/neutrinolabs/xrdp/pull/1802,https://github.com/aquesnel,2,https://github.com/neutrinolabs/xrdp/pull/1802#issuecomment-776429760,"Follow-on pull request to #1633 which migrates all logging in the xup directory to use the LOG() and LOG_DEVEL() macros.
Changes:

Migrate logging to the LOG() and LOG_DEVEL() macros (using text transform script)
error logs use the LOG macro
update code formatting with astyle for all files in xup/*","@matt335672, I've implemented the feedback you suggested and review the log level for the rest of the log messages.
I'm still investigating the freebsd build failure when building the latest commit.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1802,2021-02-09T03:47:33Z,2021-02-11T11:26:14Z,2021-02-12T00:19:41Z,MERGED,True,175,183,2,https://github.com/aquesnel,Unify logging in xup/*,1,[],https://github.com/neutrinolabs/xrdp/pull/1802,https://github.com/matt335672,3,https://github.com/neutrinolabs/xrdp/pull/1802#issuecomment-776565481,"Follow-on pull request to #1633 which migrates all logging in the xup directory to use the LOG() and LOG_DEVEL() macros.
Changes:

Migrate logging to the LOG() and LOG_DEVEL() macros (using text transform script)
error logs use the LOG macro
update code formatting with astyle for all files in xup/*","Thanks for that.
The FreeBSD build failure's a bit on the odd side. I've just tried re-running your job here:-
https://cirrus-ci.com/task/6336619461476352
It's still failing as of 2020-02-10 09:17 UTC
I need to find out more about FreeBSD anyway so I'll try knocking up a VM here and see what happens (it may take me a while). If it compiles fine locally we can at least carry on with other work for now. I agree that it seems very unlikely indeed to have anything to do with your PR.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1802,2021-02-09T03:47:33Z,2021-02-11T11:26:14Z,2021-02-12T00:19:41Z,MERGED,True,175,183,2,https://github.com/aquesnel,Unify logging in xup/*,1,[],https://github.com/neutrinolabs/xrdp/pull/1802,https://github.com/matt335672,4,https://github.com/neutrinolabs/xrdp/pull/1802#issuecomment-776590547,"Follow-on pull request to #1633 which migrates all logging in the xup directory to use the LOG() and LOG_DEVEL() macros.
Changes:

Migrate logging to the LOG() and LOG_DEVEL() macros (using text transform script)
error logs use the LOG macro
update code formatting with astyle for all files in xup/*","Well I can confirm that your branch cloned with the following command builds fine on FreeBSD 12.2:-
git clone -b unify_logging_xup --depth 1 https://github.com/aquesnel/xrdp.git build

@metalefty - given the circumstances are you happy for me to merge this? Or do you want to wait until you've investigated further?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1802,2021-02-09T03:47:33Z,2021-02-11T11:26:14Z,2021-02-12T00:19:41Z,MERGED,True,175,183,2,https://github.com/aquesnel,Unify logging in xup/*,1,[],https://github.com/neutrinolabs/xrdp/pull/1802,https://github.com/matt335672,5,https://github.com/neutrinolabs/xrdp/pull/1802#issuecomment-776662905,"Follow-on pull request to #1633 which migrates all logging in the xup directory to use the LOG() and LOG_DEVEL() macros.
Changes:

Migrate logging to the LOG() and LOG_DEVEL() macros (using text transform script)
error logs use the LOG macro
update code formatting with astyle for all files in xup/*","@aquesnel - please rebase to latest devel and squash. That should fix it, and then I can merge this in.
Thanks.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1802,2021-02-09T03:47:33Z,2021-02-11T11:26:14Z,2021-02-12T00:19:41Z,MERGED,True,175,183,2,https://github.com/aquesnel,Unify logging in xup/*,1,[],https://github.com/neutrinolabs/xrdp/pull/1802,https://github.com/aquesnel,6,https://github.com/neutrinolabs/xrdp/pull/1802#issuecomment-777203340,"Follow-on pull request to #1633 which migrates all logging in the xup directory to use the LOG() and LOG_DEVEL() macros.
Changes:

Migrate logging to the LOG() and LOG_DEVEL() macros (using text transform script)
error logs use the LOG macro
update code formatting with astyle for all files in xup/*","@matt335672 Thanks for fixing the issue with the FreeBSD build.
I've rebased and squashed the changes.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1802,2021-02-09T03:47:33Z,2021-02-11T11:26:14Z,2021-02-12T00:19:41Z,MERGED,True,175,183,2,https://github.com/aquesnel,Unify logging in xup/*,1,[],https://github.com/neutrinolabs/xrdp/pull/1802,https://github.com/matt335672,7,https://github.com/neutrinolabs/xrdp/pull/1802#issuecomment-777382198,"Follow-on pull request to #1633 which migrates all logging in the xup directory to use the LOG() and LOG_DEVEL() macros.
Changes:

Migrate logging to the LOG() and LOG_DEVEL() macros (using text transform script)
error logs use the LOG macro
update code formatting with astyle for all files in xup/*",Great - thanks again!,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1803,2021-02-09T10:26:20Z,2021-02-11T14:58:35Z,2021-02-11T14:58:39Z,MERGED,True,113,39,6,https://github.com/matt335672,Readability fix for WM states,1,[],https://github.com/neutrinolabs/xrdp/pull/1803,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1803,"Readability change for xrdp_wm.
Currently, a login_mode member variable is used to keep track of the state of the login box and connection state. It takes the values 0, 1, 2, 3, 10 and 11.
The PR replaces login_mode with login_state and changes the values assigned to it as follows:-



Was
Now




0
WMLS_RESET


1
WMLS_USER_PROMPT


2
WMLS_START_CONNECT


3
WMLS_CONNECT_IN_PROGRESS


10
WMLS_CLEANUP


11
WMLS_INACTIVE



These enumeration constants are documented in xrdp_types.h","Readability change for xrdp_wm.
Currently, a login_mode member variable is used to keep track of the state of the login box and connection state. It takes the values 0, 1, 2, 3, 10 and 11.
The PR replaces login_mode with login_state and changes the values assigned to it as follows:-



Was
Now




0
WMLS_RESET


1
WMLS_USER_PROMPT


2
WMLS_START_CONNECT


3
WMLS_CONNECT_IN_PROGRESS


10
WMLS_CLEANUP


11
WMLS_INACTIVE



These enumeration constants are documented in xrdp_types.h",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1803,2021-02-09T10:26:20Z,2021-02-11T14:58:35Z,2021-02-11T14:58:39Z,MERGED,True,113,39,6,https://github.com/matt335672,Readability fix for WM states,1,[],https://github.com/neutrinolabs/xrdp/pull/1803,https://github.com/aquesnel,2,https://github.com/neutrinolabs/xrdp/pull/1803#issuecomment-776415999,"Readability change for xrdp_wm.
Currently, a login_mode member variable is used to keep track of the state of the login box and connection state. It takes the values 0, 1, 2, 3, 10 and 11.
The PR replaces login_mode with login_state and changes the values assigned to it as follows:-



Was
Now




0
WMLS_RESET


1
WMLS_USER_PROMPT


2
WMLS_START_CONNECT


3
WMLS_CONNECT_IN_PROGRESS


10
WMLS_CLEANUP


11
WMLS_INACTIVE



These enumeration constants are documented in xrdp_types.h","This is change makes the login window manager code much more understandable. Thank you.
I had done an investigation about the login states when I was improving the logging, and I had come to a similar understanding of the meaning for each of those login state values, and this pull request is better than what I had come up with.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1804,2021-02-10T10:39:05Z,2021-02-10T10:49:10Z,2021-02-10T12:15:33Z,MERGED,True,1,1,1,https://github.com/matt335672,Bump FreeBSD version to 12.2,1,[],https://github.com/neutrinolabs/xrdp/pull/1804,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1804,"FreeBSD 12.1 CI builds are currently failing with the following error:-
./bootstrap
/usr/local/bin/autoconf
/usr/local/bin/automake
/usr/local/bin/libtool
/usr/local/bin/pkg-config
autoreconf-2.69: Entering directory `.'
autoreconf-2.69: configure.ac: not using Gettext
autoreconf-2.69: running: aclocal --force -I m4
autom4te-2.69: need GNU m4 1.4 or later: /usr/local/bin/gm4
aclocal: error: /usr/local/bin/autom4te-2.69 failed with exit status: 1
autoreconf-2.69: aclocal failed with exit status: 1

Installing a FreeBSD 12.1 VM replicates the problem. On further investigation:-
$ /usr/local/bin/gm4 --version
m4 (GNU M4) 1.4.18
ld-elf.so.1: /usr/local/bin/gm4: Undefined symbol ""fputs_unlocked@FBSD_1.6""

The reason is that the FreeBSD packages are provided by major version, and the FreeBSD packages now seem to be built against 12.2. On FreeBSD 12.1:-
$ readelf -a /lib/libc.so.7 | grep fputs_unlocked
$ 

On FreeBSD 12.2:-
$ readelf -a /lib/libc.so.7 | grep fputs_unlocked
   571: 000000000019dd20   139 FUNC    GLOBAL DEFAULT   12 fputs_unlocked@@FBSD_1.6 (8)
$ 

Fix is possible to bump the FreeBSD version in .cirrus.yml. This PR attempts to test that.","FreeBSD 12.1 CI builds are currently failing with the following error:-
./bootstrap
/usr/local/bin/autoconf
/usr/local/bin/automake
/usr/local/bin/libtool
/usr/local/bin/pkg-config
autoreconf-2.69: Entering directory `.'
autoreconf-2.69: configure.ac: not using Gettext
autoreconf-2.69: running: aclocal --force -I m4
autom4te-2.69: need GNU m4 1.4 or later: /usr/local/bin/gm4
aclocal: error: /usr/local/bin/autom4te-2.69 failed with exit status: 1
autoreconf-2.69: aclocal failed with exit status: 1

Installing a FreeBSD 12.1 VM replicates the problem. On further investigation:-
$ /usr/local/bin/gm4 --version
m4 (GNU M4) 1.4.18
ld-elf.so.1: /usr/local/bin/gm4: Undefined symbol ""fputs_unlocked@FBSD_1.6""

The reason is that the FreeBSD packages are provided by major version, and the FreeBSD packages now seem to be built against 12.2. On FreeBSD 12.1:-
$ readelf -a /lib/libc.so.7 | grep fputs_unlocked
$ 

On FreeBSD 12.2:-
$ readelf -a /lib/libc.so.7 | grep fputs_unlocked
   571: 000000000019dd20   139 FUNC    GLOBAL DEFAULT   12 fputs_unlocked@@FBSD_1.6 (8)
$ 

Fix is possible to bump the FreeBSD version in .cirrus.yml. This PR attempts to test that.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1806,2021-02-12T00:40:01Z,2021-02-12T12:09:42Z,2021-02-20T15:58:15Z,MERGED,True,76,77,3,https://github.com/aquesnel,Unify logging in mc/*,3,[],https://github.com/neutrinolabs/xrdp/pull/1806,https://github.com/aquesnel,1,https://github.com/neutrinolabs/xrdp/pull/1806,"Follow-on pull request to #1633 which migrates all logging in the mc directory to use the LOG() and LOG_DEVEL() macros.
Changes:

Migrate logging to the LOG() and LOG_DEVEL() macros (using text transform script)
update code formatting with astyle for all files in mc/*
removed LIB_DEBUG since it is no longer used","Follow-on pull request to #1633 which migrates all logging in the mc directory to use the LOG() and LOG_DEVEL() macros.
Changes:

Migrate logging to the LOG() and LOG_DEVEL() macros (using text transform script)
update code formatting with astyle for all files in mc/*
removed LIB_DEBUG since it is no longer used",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1807,2021-02-12T02:11:24Z,2021-02-22T09:48:55Z,2021-02-23T01:45:54Z,MERGED,True,184,192,3,https://github.com/aquesnel,Unify logging in neutrinordp/*,3,[],https://github.com/neutrinolabs/xrdp/pull/1807,https://github.com/aquesnel,1,https://github.com/neutrinolabs/xrdp/pull/1807,"Follow-on pull request to #1633 which migrates all logging in the neutrinordp directory to use the LOG() and LOG_DEVEL() macros.
Changes:

Migrate logging to the LOG() and LOG_DEVEL() macros (using text transform script)
error logs use the LOG macro
update code formatting with astyle for all files in xrdp/*","Follow-on pull request to #1633 which migrates all logging in the neutrinordp directory to use the LOG() and LOG_DEVEL() macros.
Changes:

Migrate logging to the LOG() and LOG_DEVEL() macros (using text transform script)
error logs use the LOG macro
update code formatting with astyle for all files in xrdp/*",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1807,2021-02-12T02:11:24Z,2021-02-22T09:48:55Z,2021-02-23T01:45:54Z,MERGED,True,184,192,3,https://github.com/aquesnel,Unify logging in neutrinordp/*,3,[],https://github.com/neutrinolabs/xrdp/pull/1807,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/1807#issuecomment-783244389,"Follow-on pull request to #1633 which migrates all logging in the neutrinordp directory to use the LOG() and LOG_DEVEL() macros.
Changes:

Migrate logging to the LOG() and LOG_DEVEL() macros (using text transform script)
error logs use the LOG macro
update code formatting with astyle for all files in xrdp/*","As ever, excellent work - thanks @aquesnel!",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1811,2021-02-23T02:26:48Z,2021-03-01T10:11:11Z,2021-03-06T14:36:40Z,MERGED,True,72,87,1,https://github.com/aquesnel,Unify logging in vnc/*,2,[],https://github.com/neutrinolabs/xrdp/pull/1811,https://github.com/aquesnel,1,https://github.com/neutrinolabs/xrdp/pull/1811,"Follow-on pull request to #1633 which migrates all logging in the vnc directory to use the LOG() and LOG_DEVEL() macros.
Changes:

Migrate logging to the LOG() and LOG_DEVEL() macros (using text transform script)
error logs use the LOG macro
update code formatting with astyle for all files in xrdp/*","Follow-on pull request to #1633 which migrates all logging in the vnc directory to use the LOG() and LOG_DEVEL() macros.
Changes:

Migrate logging to the LOG() and LOG_DEVEL() macros (using text transform script)
error logs use the LOG macro
update code formatting with astyle for all files in xrdp/*",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1811,2021-02-23T02:26:48Z,2021-03-01T10:11:11Z,2021-03-06T14:36:40Z,MERGED,True,72,87,1,https://github.com/aquesnel,Unify logging in vnc/*,2,[],https://github.com/neutrinolabs/xrdp/pull/1811,https://github.com/aquesnel,2,https://github.com/neutrinolabs/xrdp/pull/1811#issuecomment-787569610,"Follow-on pull request to #1633 which migrates all logging in the vnc directory to use the LOG() and LOG_DEVEL() macros.
Changes:

Migrate logging to the LOG() and LOG_DEVEL() macros (using text transform script)
error logs use the LOG macro
update code formatting with astyle for all files in xrdp/*","@matt335672 I've implemented the feedback, let me know if anything else needs to be changed before this can be merged.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1812,2021-02-23T02:39:28Z,2021-03-01T10:09:27Z,2021-03-06T14:32:35Z,MERGED,True,46,48,3,https://github.com/aquesnel,Unify logging in xrdpapi/*,3,[],https://github.com/neutrinolabs/xrdp/pull/1812,https://github.com/aquesnel,1,https://github.com/neutrinolabs/xrdp/pull/1812,"Follow-on pull request to #1633 which migrates all logging in the xrdpapi directory to use the LOG() and LOG_DEVEL() macros.
Changes:

Migrate logging to the LOG() and LOG_DEVEL() macros (using text transform script)
error logs use the LOG macro
update code formatting with astyle for all files in xrdp/*","Follow-on pull request to #1633 which migrates all logging in the xrdpapi directory to use the LOG() and LOG_DEVEL() macros.
Changes:

Migrate logging to the LOG() and LOG_DEVEL() macros (using text transform script)
error logs use the LOG macro
update code formatting with astyle for all files in xrdp/*",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1812,2021-02-23T02:39:28Z,2021-03-01T10:09:27Z,2021-03-06T14:32:35Z,MERGED,True,46,48,3,https://github.com/aquesnel,Unify logging in xrdpapi/*,3,[],https://github.com/neutrinolabs/xrdp/pull/1812,https://github.com/aquesnel,2,https://github.com/neutrinolabs/xrdp/pull/1812#issuecomment-787568689,"Follow-on pull request to #1633 which migrates all logging in the xrdpapi directory to use the LOG() and LOG_DEVEL() macros.
Changes:

Migrate logging to the LOG() and LOG_DEVEL() macros (using text transform script)
error logs use the LOG macro
update code formatting with astyle for all files in xrdp/*","@matt335672 I've implemented the feedback, let me know if anything else needs to be changed before this can be merged.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1813,2021-02-26T11:35:30Z,2021-03-09T09:21:31Z,2021-03-09T09:21:35Z,MERGED,True,145,132,2,https://github.com/matt335672,Add versioning to xrdp_client_info,1,[],https://github.com/neutrinolabs/xrdp/pull/1813,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1813,"As discussed in gitter, add a version guard to xrdp_client_info.
There's probably more that can be done here in terms of restructuring this. I notice a lot of the stuff above the line 'Private to xrdp below this line' is not actually used by xorgxrdp. Alternatively, maybe we should split this into two structures so the compiler can pick up differences. Thoughts?
BTW : the include's been run through astyle. All I've actually done is add the 'version' field and the macro and change the comment 'NO CHANGES ABOVE THIS LINE' to the (hopefully) more informative 'Private to xrdp below this line'","As discussed in gitter, add a version guard to xrdp_client_info.
There's probably more that can be done here in terms of restructuring this. I notice a lot of the stuff above the line 'Private to xrdp below this line' is not actually used by xorgxrdp. Alternatively, maybe we should split this into two structures so the compiler can pick up differences. Thoughts?
BTW : the include's been run through astyle. All I've actually done is add the 'version' field and the macro and change the comment 'NO CHANGES ABOVE THIS LINE' to the (hopefully) more informative 'Private to xrdp below this line'",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1813,2021-02-26T11:35:30Z,2021-03-09T09:21:31Z,2021-03-09T09:21:35Z,MERGED,True,145,132,2,https://github.com/matt335672,Add versioning to xrdp_client_info,1,[],https://github.com/neutrinolabs/xrdp/pull/1813,https://github.com/aquesnel,2,https://github.com/neutrinolabs/xrdp/pull/1813#issuecomment-787672374,"As discussed in gitter, add a version guard to xrdp_client_info.
There's probably more that can be done here in terms of restructuring this. I notice a lot of the stuff above the line 'Private to xrdp below this line' is not actually used by xorgxrdp. Alternatively, maybe we should split this into two structures so the compiler can pick up differences. Thoughts?
BTW : the include's been run through astyle. All I've actually done is add the 'version' field and the macro and change the comment 'NO CHANGES ABOVE THIS LINE' to the (hopefully) more informative 'Private to xrdp below this line'","Since the client info struct is being dumped onto the wire between xrdp and xorgxrdp, it seems sensible to minimize there data that is being sent to just the required fields, as long as backwards comparability can be maintained.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1813,2021-02-26T11:35:30Z,2021-03-09T09:21:31Z,2021-03-09T09:21:35Z,MERGED,True,145,132,2,https://github.com/matt335672,Add versioning to xrdp_client_info,1,[],https://github.com/neutrinolabs/xrdp/pull/1813,https://github.com/matt335672,3,https://github.com/neutrinolabs/xrdp/pull/1813#issuecomment-787826119,"As discussed in gitter, add a version guard to xrdp_client_info.
There's probably more that can be done here in terms of restructuring this. I notice a lot of the stuff above the line 'Private to xrdp below this line' is not actually used by xorgxrdp. Alternatively, maybe we should split this into two structures so the compiler can pick up differences. Thoughts?
BTW : the include's been run through astyle. All I've actually done is add the 'version' field and the macro and change the comment 'NO CHANGES ABOVE THIS LINE' to the (hopefully) more informative 'Private to xrdp below this line'","Agreed.
At the moment it's a challenge to change the client_info, as there's more in it that the xorgxrdp driver actually needs.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1815,2021-03-01T01:08:00Z,2021-04-09T08:57:15Z,2021-04-10T12:30:01Z,MERGED,True,1078,1220,27,https://github.com/aquesnel,Unify logging in tests/*,7,[],https://github.com/neutrinolabs/xrdp/pull/1815,https://github.com/aquesnel,1,https://github.com/neutrinolabs/xrdp/pull/1815,"Follow-on pull request to #1633 which migrates all logging in the tests directory to use the LOG() and LOG_DEVEL() macros.
Changes:

Migrate logging to the LOG() and LOG_DEVEL() macros (using text transform script)
error logs use the LOG macro
update code formatting with astyle for all files in tests/*
add building the tests directory when running make all and make check
refactor the hex dump code to be a string function rather than a logging function
add LOG_HEXDUMP for always logging a hexdump","Follow-on pull request to #1633 which migrates all logging in the tests directory to use the LOG() and LOG_DEVEL() macros.
Changes:

Migrate logging to the LOG() and LOG_DEVEL() macros (using text transform script)
error logs use the LOG macro
update code formatting with astyle for all files in tests/*
add building the tests directory when running make all and make check
refactor the hex dump code to be a string function rather than a logging function
add LOG_HEXDUMP for always logging a hexdump",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1815,2021-03-01T01:08:00Z,2021-04-09T08:57:15Z,2021-04-10T12:30:01Z,MERGED,True,1078,1220,27,https://github.com/aquesnel,Unify logging in tests/*,7,[],https://github.com/neutrinolabs/xrdp/pull/1815,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/1815#issuecomment-793661736,"Follow-on pull request to #1633 which migrates all logging in the tests directory to use the LOG() and LOG_DEVEL() macros.
Changes:

Migrate logging to the LOG() and LOG_DEVEL() macros (using text transform script)
error logs use the LOG macro
update code formatting with astyle for all files in tests/*
add building the tests directory when running make all and make check
refactor the hex dump code to be a string function rather than a logging function
add LOG_HEXDUMP for always logging a hexdump","While reviewing this I was thinking about this recent comment which touches on this.
I'm wondering about the structure of the tests directory now, in the context of this PR.
Now that make check does something useful and expected with the tests directory, should we move tests/tcp_proxy/ and tests/gtcp_proxy/ elsewhere?
Any thoughts on this @metalefty?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1815,2021-03-01T01:08:00Z,2021-04-09T08:57:15Z,2021-04-10T12:30:01Z,MERGED,True,1078,1220,27,https://github.com/aquesnel,Unify logging in tests/*,7,[],https://github.com/neutrinolabs/xrdp/pull/1815,https://github.com/aquesnel,3,https://github.com/neutrinolabs/xrdp/pull/1815#issuecomment-793927493,"Follow-on pull request to #1633 which migrates all logging in the tests directory to use the LOG() and LOG_DEVEL() macros.
Changes:

Migrate logging to the LOG() and LOG_DEVEL() macros (using text transform script)
error logs use the LOG macro
update code formatting with astyle for all files in tests/*
add building the tests directory when running make all and make check
refactor the hex dump code to be a string function rather than a logging function
add LOG_HEXDUMP for always logging a hexdump","@matt335672 I agree that tcp_proxy and gtcp_proxy should be moved out of the tests directory. My suggestions for new top level directory names are:

devel_tools
devutils
utils
What do you think?",True,{'THUMBS_UP': ['https://github.com/metalefty']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1815,2021-03-01T01:08:00Z,2021-04-09T08:57:15Z,2021-04-10T12:30:01Z,MERGED,True,1078,1220,27,https://github.com/aquesnel,Unify logging in tests/*,7,[],https://github.com/neutrinolabs/xrdp/pull/1815,https://github.com/matt335672,4,https://github.com/neutrinolabs/xrdp/pull/1815#issuecomment-795275277,"Follow-on pull request to #1633 which migrates all logging in the tests directory to use the LOG() and LOG_DEVEL() macros.
Changes:

Migrate logging to the LOG() and LOG_DEVEL() macros (using text transform script)
error logs use the LOG macro
update code formatting with astyle for all files in tests/*
add building the tests directory when running make all and make check
refactor the hex dump code to be a string function rather than a logging function
add LOG_HEXDUMP for always logging a hexdump","Not an easy question to answer.
We've got a couple of oddities at the top level already (tcutils, xrdpvr, vrplayer) which frankly I don't understand, together with things like fontdump, genkeymap and keygen which look more useful but possibly need a bit of work.
How about we create a utils directory as part of this PR for the proxies in tests, so that tests looks more like a proper tests directory? Than we can raise a further PR to move some of the other stuff out of the top-level into utils.
It's just a suggestion.",True,{'THUMBS_UP': ['https://github.com/aquesnel']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1815,2021-03-01T01:08:00Z,2021-04-09T08:57:15Z,2021-04-10T12:30:01Z,MERGED,True,1078,1220,27,https://github.com/aquesnel,Unify logging in tests/*,7,[],https://github.com/neutrinolabs/xrdp/pull/1815,https://github.com/aquesnel,5,https://github.com/neutrinolabs/xrdp/pull/1815#issuecomment-807902168,"Follow-on pull request to #1633 which migrates all logging in the tests directory to use the LOG() and LOG_DEVEL() macros.
Changes:

Migrate logging to the LOG() and LOG_DEVEL() macros (using text transform script)
error logs use the LOG macro
update code formatting with astyle for all files in tests/*
add building the tests directory when running make all and make check
refactor the hex dump code to be a string function rather than a logging function
add LOG_HEXDUMP for always logging a hexdump","@matt335672  I've moved the tcp_proxy programs to the utils directory, and I've added docs for g_bytes_to_hexdump. Please let me know if there is any other feedback for this change to be ready to merge.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1815,2021-03-01T01:08:00Z,2021-04-09T08:57:15Z,2021-04-10T12:30:01Z,MERGED,True,1078,1220,27,https://github.com/aquesnel,Unify logging in tests/*,7,[],https://github.com/neutrinolabs/xrdp/pull/1815,https://github.com/Nexarian,6,https://github.com/neutrinolabs/xrdp/pull/1815#issuecomment-807928733,"Follow-on pull request to #1633 which migrates all logging in the tests directory to use the LOG() and LOG_DEVEL() macros.
Changes:

Migrate logging to the LOG() and LOG_DEVEL() macros (using text transform script)
error logs use the LOG macro
update code formatting with astyle for all files in tests/*
add building the tests directory when running make all and make check
refactor the hex dump code to be a string function rather than a logging function
add LOG_HEXDUMP for always logging a hexdump","In general I don't recommend using catch-all terms like utils -- It often begs the question ""utils for what?"" And then becomes a dumping ground for all sorts of code that is unrelated, thus making it harder to maintain.",True,{'THUMBS_UP': ['https://github.com/metalefty']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1815,2021-03-01T01:08:00Z,2021-04-09T08:57:15Z,2021-04-10T12:30:01Z,MERGED,True,1078,1220,27,https://github.com/aquesnel,Unify logging in tests/*,7,[],https://github.com/neutrinolabs/xrdp/pull/1815,https://github.com/metalefty,7,https://github.com/neutrinolabs/xrdp/pull/1815#issuecomment-807948887,"Follow-on pull request to #1633 which migrates all logging in the tests directory to use the LOG() and LOG_DEVEL() macros.
Changes:

Migrate logging to the LOG() and LOG_DEVEL() macros (using text transform script)
error logs use the LOG macro
update code formatting with astyle for all files in tests/*
add building the tests directory when running make all and make check
refactor the hex dump code to be a string function rather than a logging function
add LOG_HEXDUMP for always logging a hexdump",I personally never used [g]tcp_proxy tool. socat can do the same thing as the tools. We can move them out to a separate repository.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1815,2021-03-01T01:08:00Z,2021-04-09T08:57:15Z,2021-04-10T12:30:01Z,MERGED,True,1078,1220,27,https://github.com/aquesnel,Unify logging in tests/*,7,[],https://github.com/neutrinolabs/xrdp/pull/1815,https://github.com/metalefty,8,https://github.com/neutrinolabs/xrdp/pull/1815#issuecomment-807953228,"Follow-on pull request to #1633 which migrates all logging in the tests directory to use the LOG() and LOG_DEVEL() macros.
Changes:

Migrate logging to the LOG() and LOG_DEVEL() macros (using text transform script)
error logs use the LOG macro
update code formatting with astyle for all files in tests/*
add building the tests directory when running make all and make check
refactor the hex dump code to be a string function rather than a logging function
add LOG_HEXDUMP for always logging a hexdump","Ah, the difference between tcp_proxy and socat is traffic dumping. It looks like a developer's tool to debug, not a user's tool.
As @Nexarian mentioned, the name utils is not clear. What about a name like devtool instead?
I agree that tests directory should contain proper test stuff.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1815,2021-03-01T01:08:00Z,2021-04-09T08:57:15Z,2021-04-10T12:30:01Z,MERGED,True,1078,1220,27,https://github.com/aquesnel,Unify logging in tests/*,7,[],https://github.com/neutrinolabs/xrdp/pull/1815,https://github.com/matt335672,9,https://github.com/neutrinolabs/xrdp/pull/1815#issuecomment-808077056,"Follow-on pull request to #1633 which migrates all logging in the tests directory to use the LOG() and LOG_DEVEL() macros.
Changes:

Migrate logging to the LOG() and LOG_DEVEL() macros (using text transform script)
error logs use the LOG macro
update code formatting with astyle for all files in tests/*
add building the tests directory when running make all and make check
refactor the hex dump code to be a string function rather than a logging function
add LOG_HEXDUMP for always logging a hexdump","devtools would be fine for these particular bits of code I think, but before we choose that, can we decide what should be done with some of the other oddities at the top level, i.e.:-

fontdump
genkeymap
keygen
tcutils
vrplayer
xrdpvr

Some of these are developer tools (fontdump), some are system management tools (genkeymap, keygen) and others are potentially useful user tools (tcutils, vrplayer+xrdpvr).
So how about a more nuanced directory structure:-
tools/
tools/dev/
tools/management/
tools/user/

I'm not suggesting we do all of this as part of this PR, but it would be good to have an idea where we're going with this.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1815,2021-03-01T01:08:00Z,2021-04-09T08:57:15Z,2021-04-10T12:30:01Z,MERGED,True,1078,1220,27,https://github.com/aquesnel,Unify logging in tests/*,7,[],https://github.com/neutrinolabs/xrdp/pull/1815,https://github.com/aquesnel,10,https://github.com/neutrinolabs/xrdp/pull/1815#issuecomment-808271722,"Follow-on pull request to #1633 which migrates all logging in the tests directory to use the LOG() and LOG_DEVEL() macros.
Changes:

Migrate logging to the LOG() and LOG_DEVEL() macros (using text transform script)
error logs use the LOG macro
update code formatting with astyle for all files in tests/*
add building the tests directory when running make all and make check
refactor the hex dump code to be a string function rather than a logging function
add LOG_HEXDUMP for always logging a hexdump","I've made the parent directory for the tcp_proxy tools more specific, by moving it to tools/devel. I've chosen devel instead of dev since the rest of the code uses the abbreviation devel for development/developer.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1815,2021-03-01T01:08:00Z,2021-04-09T08:57:15Z,2021-04-10T12:30:01Z,MERGED,True,1078,1220,27,https://github.com/aquesnel,Unify logging in tests/*,7,[],https://github.com/neutrinolabs/xrdp/pull/1815,https://github.com/metalefty,11,https://github.com/neutrinolabs/xrdp/pull/1815#issuecomment-815415218,"Follow-on pull request to #1633 which migrates all logging in the tests directory to use the LOG() and LOG_DEVEL() macros.
Changes:

Migrate logging to the LOG() and LOG_DEVEL() macros (using text transform script)
error logs use the LOG macro
update code formatting with astyle for all files in tests/*
add building the tests directory when running make all and make check
refactor the hex dump code to be a string function rather than a logging function
add LOG_HEXDUMP for always logging a hexdump","I'm busy at daytime job. With a quick look thru, I'm fine with this.
Shit it if it looks good to @matt335672.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1815,2021-03-01T01:08:00Z,2021-04-09T08:57:15Z,2021-04-10T12:30:01Z,MERGED,True,1078,1220,27,https://github.com/aquesnel,Unify logging in tests/*,7,[],https://github.com/neutrinolabs/xrdp/pull/1815,https://github.com/metalefty,12,https://github.com/neutrinolabs/xrdp/pull/1815#issuecomment-815421084,"Follow-on pull request to #1633 which migrates all logging in the tests directory to use the LOG() and LOG_DEVEL() macros.
Changes:

Migrate logging to the LOG() and LOG_DEVEL() macros (using text transform script)
error logs use the LOG macro
update code formatting with astyle for all files in tests/*
add building the tests directory when running make all and make check
refactor the hex dump code to be a string function rather than a logging function
add LOG_HEXDUMP for always logging a hexdump",s/Shit/Ship/  😉,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1815,2021-03-01T01:08:00Z,2021-04-09T08:57:15Z,2021-04-10T12:30:01Z,MERGED,True,1078,1220,27,https://github.com/aquesnel,Unify logging in tests/*,7,[],https://github.com/neutrinolabs/xrdp/pull/1815,https://github.com/matt335672,13,https://github.com/neutrinolabs/xrdp/pull/1815#issuecomment-815649360,"Follow-on pull request to #1633 which migrates all logging in the tests directory to use the LOG() and LOG_DEVEL() macros.
Changes:

Migrate logging to the LOG() and LOG_DEVEL() macros (using text transform script)
error logs use the LOG macro
update code formatting with astyle for all files in tests/*
add building the tests directory when running make all and make check
refactor the hex dump code to be a string function rather than a logging function
add LOG_HEXDUMP for always logging a hexdump","Sorry about missing the typo above earlier.
@aquesnel - please can you fix the typo rebase this and squash it ? Then I'll merge.
Thanks.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1815,2021-03-01T01:08:00Z,2021-04-09T08:57:15Z,2021-04-10T12:30:01Z,MERGED,True,1078,1220,27,https://github.com/aquesnel,Unify logging in tests/*,7,[],https://github.com/neutrinolabs/xrdp/pull/1815,https://github.com/aquesnel,14,https://github.com/neutrinolabs/xrdp/pull/1815#issuecomment-815918388,"Follow-on pull request to #1633 which migrates all logging in the tests directory to use the LOG() and LOG_DEVEL() macros.
Changes:

Migrate logging to the LOG() and LOG_DEVEL() macros (using text transform script)
error logs use the LOG macro
update code formatting with astyle for all files in tests/*
add building the tests directory when running make all and make check
refactor the hex dump code to be a string function rather than a logging function
add LOG_HEXDUMP for always logging a hexdump","@matt335672 the spelling mistake is fixed, and the branch is already rebased on top of devel.
The commits in this PR are all self contained logical commits, so I'd recommend not squashing them together before the merge. If you still think that the commits should be squashed, then I'll squash and update the PR.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1815,2021-03-01T01:08:00Z,2021-04-09T08:57:15Z,2021-04-10T12:30:01Z,MERGED,True,1078,1220,27,https://github.com/aquesnel,Unify logging in tests/*,7,[],https://github.com/neutrinolabs/xrdp/pull/1815,https://github.com/matt335672,15,https://github.com/neutrinolabs/xrdp/pull/1815#issuecomment-816534099,"Follow-on pull request to #1633 which migrates all logging in the tests directory to use the LOG() and LOG_DEVEL() macros.
Changes:

Migrate logging to the LOG() and LOG_DEVEL() macros (using text transform script)
error logs use the LOG macro
update code formatting with astyle for all files in tests/*
add building the tests directory when running make all and make check
refactor the hex dump code to be a string function rather than a logging function
add LOG_HEXDUMP for always logging a hexdump","No - that's fine.
Thanks again for this one, particularly making the tests usable.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1817,2021-03-02T15:04:13Z,2021-03-03T08:27:42Z,2021-03-03T08:28:10Z,MERGED,True,1,1,1,https://github.com/clebig,Add KRDC to supported client list in README.md,1,[],https://github.com/neutrinolabs/xrdp/pull/1817,https://github.com/clebig,1,https://github.com/neutrinolabs/xrdp/pull/1817,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1817,2021-03-02T15:04:13Z,2021-03-03T08:27:42Z,2021-03-03T08:28:10Z,MERGED,True,1,1,1,https://github.com/clebig,Add KRDC to supported client list in README.md,1,[],https://github.com/neutrinolabs/xrdp/pull/1817,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/1817#issuecomment-789534815,,Thanks for adding this - more people might find out about KRDC now.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1818,2021-03-03T01:57:39Z,2021-03-04T10:14:51Z,2021-03-08T10:04:34Z,MERGED,True,6,3,1,https://github.com/glaubitz,Add support for multiple currently unsupported architectures,4,[],https://github.com/neutrinolabs/xrdp/pull/1818,https://github.com/glaubitz,1,https://github.com/neutrinolabs/xrdp/pull/1818,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1818,2021-03-03T01:57:39Z,2021-03-04T10:14:51Z,2021-03-08T10:04:34Z,MERGED,True,6,3,1,https://github.com/glaubitz,Add support for multiple currently unsupported architectures,4,[],https://github.com/neutrinolabs/xrdp/pull/1818,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1818#issuecomment-789412244,,Please keep in mind that merging this PR doesn't mean we support these architectures. It may fix the build but it just fixes the build.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1818,2021-03-03T01:57:39Z,2021-03-04T10:14:51Z,2021-03-08T10:04:34Z,MERGED,True,6,3,1,https://github.com/glaubitz,Add support for multiple currently unsupported architectures,4,[],https://github.com/neutrinolabs/xrdp/pull/1818,https://github.com/glaubitz,3,https://github.com/neutrinolabs/xrdp/pull/1818#issuecomment-789550810,,Does xrdp have any other architecture-specific code that needs to be taken care of?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1818,2021-03-03T01:57:39Z,2021-03-04T10:14:51Z,2021-03-08T10:04:34Z,MERGED,True,6,3,1,https://github.com/glaubitz,Add support for multiple currently unsupported architectures,4,[],https://github.com/neutrinolabs/xrdp/pull/1818,https://github.com/matt335672,4,https://github.com/neutrinolabs/xrdp/pull/1818#issuecomment-789554367,,"Agreed - we're having trouble testing on sparc at the moment, let alone some of these others.
Another way to do this might be to use endian.h (Linux) and sys/endian.h (FreeBSD) to determine the endian-ness, and then figure out the NEED_ALIGN/NO_NEED_ALIGN using autoconf. endian.h in Linux came with glibc 2.9 (13-Nov-2008) and the FreeBSD equivalent seems to have been around longer than that, looking at https://github.com/freebsd/freebsd-src/commits/master/sys/sys/endian.h
However if we go down this route we'll end up having to add additional exceptions for things like MacOS where we need ""machine/endian.h"", and we still can't easily test this. We can of course also check for endian-ness using autoconf as well.
To sum up my rather rambling thoughts above, I'm in two minds about this PR. It's harmless enough, but the result could possibly be achieved in other ways which might reduce the overall maintenance burden moving forward.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1818,2021-03-03T01:57:39Z,2021-03-04T10:14:51Z,2021-03-08T10:04:34Z,MERGED,True,6,3,1,https://github.com/glaubitz,Add support for multiple currently unsupported architectures,4,[],https://github.com/neutrinolabs/xrdp/pull/1818,https://github.com/matt335672,5,https://github.com/neutrinolabs/xrdp/pull/1818#issuecomment-789556618,,"Hi @glaubitz - not that I'm aware of.
As I said earlier, the biggest problem I think we have with using defines in this way is that it's not testable with the resources we have available to us on the project - there may be automated ways to achieve a more general solution.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1818,2021-03-03T01:57:39Z,2021-03-04T10:14:51Z,2021-03-08T10:04:34Z,MERGED,True,6,3,1,https://github.com/glaubitz,Add support for multiple currently unsupported architectures,4,[],https://github.com/neutrinolabs/xrdp/pull/1818,https://github.com/glaubitz,6,https://github.com/neutrinolabs/xrdp/pull/1818#issuecomment-789559829,,"If you need access to a SPARC, you can use the GCC compile farm which hosts a fast SPARC (and other more obscure architectures) machine exactly for these purposes: https://gcc.gnu.org/wiki/CompileFarm
More architectures are being added in the future, I'm currently working on adding a MIPS machine running Debian. Otherwise, I can also help with access to various architectures as I have access to most architectures in Debian (either through my own hardware or hardware hosted by someone else).
Plus, Debian is regularly building the latest versions of xrdp on its build infrastructure, so there is at least a build CI:

https://buildd.debian.org/status/package.php?p=xrdp&suite=sid

If you add a testsuite, you can also make sure that basic functionality works correctly.
FWIW, we have been shipping xrdp in Debian for years and I don't remember architecture-specific issues from the tip of my head before the 0.9.15 release.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1818,2021-03-03T01:57:39Z,2021-03-04T10:14:51Z,2021-03-08T10:04:34Z,MERGED,True,6,3,1,https://github.com/glaubitz,Add support for multiple currently unsupported architectures,4,[],https://github.com/neutrinolabs/xrdp/pull/1818,https://github.com/matt335672,7,https://github.com/neutrinolabs/xrdp/pull/1818#issuecomment-789577650,,"Thanks for that @glaubitz  - that's really useful info.
The architecture-specific code is all in common/arch.h. For 0.9.15 we added a PR for RISC-V support but made no other changes in this area. For 0.9.14 we introduced commit 7e58209 which added -Werror to the gcc compile flags. I suspect this is behind experiences mentioned in your last sentence.
@metalefty - I'm minded to take this PR now to fix the Debian build farm issues linked above. What do you think?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1818,2021-03-03T01:57:39Z,2021-03-04T10:14:51Z,2021-03-08T10:04:34Z,MERGED,True,6,3,1,https://github.com/glaubitz,Add support for multiple currently unsupported architectures,4,[],https://github.com/neutrinolabs/xrdp/pull/1818,https://github.com/metalefty,8,https://github.com/neutrinolabs/xrdp/pull/1818#issuecomment-790391479,,"I'm fine with this PR itself.
Build farm ensures just xrdp code builds on each architecture. It doesn't detect runtime architecture-specific bugs.
I meant fixing architecture-specific bugs on minor architectures is still contributor-driven.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1818,2021-03-03T01:57:39Z,2021-03-04T10:14:51Z,2021-03-08T10:04:34Z,MERGED,True,6,3,1,https://github.com/glaubitz,Add support for multiple currently unsupported architectures,4,[],https://github.com/neutrinolabs/xrdp/pull/1818,https://github.com/matt335672,9,https://github.com/neutrinolabs/xrdp/pull/1818#issuecomment-790501546,,"Thanks @glaubitz - let us know if the Debian CI build needs any more changes.
Is this part of the Bullseye work that's going on right now?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1818,2021-03-03T01:57:39Z,2021-03-04T10:14:51Z,2021-03-08T10:04:34Z,MERGED,True,6,3,1,https://github.com/glaubitz,Add support for multiple currently unsupported architectures,4,[],https://github.com/neutrinolabs/xrdp/pull/1818,https://github.com/glaubitz,10,https://github.com/neutrinolabs/xrdp/pull/1818#issuecomment-790507427,,"Is this part of the Bullseye work that's going on right now?

Yes, as a backported fix. No new upstream version is allowed at this point.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1818,2021-03-03T01:57:39Z,2021-03-04T10:14:51Z,2021-03-08T10:04:34Z,MERGED,True,6,3,1,https://github.com/glaubitz,Add support for multiple currently unsupported architectures,4,[],https://github.com/neutrinolabs/xrdp/pull/1818,https://github.com/matt335672,11,https://github.com/neutrinolabs/xrdp/pull/1818#issuecomment-792628573,,"@glaubitz - I have a Bullseye-related question for you.
We occasionally come across issues which affect one particular downstream only (counting Debian/Ubuntu as a single downstream).
One such issue on our side (#1773) resulted in my raising Launchpad bug 1911435 which needs a change in the Salsa repo to address. This bug will probably also affect Bullseye.
The bug appears to be getting little attention. It's possible that I've simply reported it in the wrong place. In the past I've also tried raising PRs on Salsa directly (https://salsa.debian.org/debian-remote-team/xrdp/-/merge_requests/2), also with little effect.
If you can give me any detail of a more effective way to communicate with the xrdp packagers for Debian/Ubuntu I'd love to hear it. Or is Launchpad the best way?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1818,2021-03-03T01:57:39Z,2021-03-04T10:14:51Z,2021-03-08T10:04:34Z,MERGED,True,6,3,1,https://github.com/glaubitz,Add support for multiple currently unsupported architectures,4,[],https://github.com/neutrinolabs/xrdp/pull/1818,https://github.com/glaubitz,12,https://github.com/neutrinolabs/xrdp/pull/1818#issuecomment-792633159,,"Almost all Ubuntu packages are imported from Debian in source form, so the original maintainer of the package is in Debian.
The rule is that all packages that are in ""universe"" or ""multiverse"" in Ubuntu have no maintainer in Ubuntu, so the bug should always reported to Debian. Since xrdp is part of the ""universe"" repository, you always should report issues with that package in Debian as there is simply no one in Ubuntu to answer to your bug reports.
Since Debian itself is a volunteer project, there is unfortunately no guarantee that someone will respond to bugs for leaf packages. But if you report the bug against the xrdp package in Debian, you should get an answer if the package is still maintained.
If not, feel free to contact me via mail (@debian.org) and I will help mediating.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1818,2021-03-03T01:57:39Z,2021-03-04T10:14:51Z,2021-03-08T10:04:34Z,MERGED,True,6,3,1,https://github.com/glaubitz,Add support for multiple currently unsupported architectures,4,[],https://github.com/neutrinolabs/xrdp/pull/1818,https://github.com/matt335672,13,https://github.com/neutrinolabs/xrdp/pull/1818#issuecomment-792639992,,"That explains perfectly why the Launchpad fault is going nowhere. I will do as you suggest and see what happens.
Thanks for the lucid explanation.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1820,2021-03-04T05:38:11Z,2021-04-24T12:56:58Z,2021-04-28T08:24:01Z,MERGED,True,499,69,16,https://github.com/Nexarian,Resolution switching without reconnecting.,1,[],https://github.com/neutrinolabs/xrdp/pull/1820,https://github.com/Nexarian,1,https://github.com/neutrinolabs/xrdp/pull/1820,"Implements #448

Based on https://github.com/jsorg71/xrdp/tree/dynamic_monitor
Tested with xorgxrdp
Tested with vnc
Only works with single monitor.

Depends on neutrinolabs/xorgxrdp#183
To test either use Microsoft Remote Desktop (From the Windows or Mac OS app store) and configure to resize the screen or FreeRDP with the /dynamic-resolution flag set.","Implements #448

Based on https://github.com/jsorg71/xrdp/tree/dynamic_monitor
Tested with xorgxrdp
Tested with vnc
Only works with single monitor.

Depends on neutrinolabs/xorgxrdp#183
To test either use Microsoft Remote Desktop (From the Windows or Mac OS app store) and configure to resize the screen or FreeRDP with the /dynamic-resolution flag set.",True,"{'HEART': ['https://github.com/richlanc', 'https://github.com/bolkedebruin', 'https://github.com/Whazor', 'https://github.com/max-elastics']}"
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1820,2021-03-04T05:38:11Z,2021-04-24T12:56:58Z,2021-04-28T08:24:01Z,MERGED,True,499,69,16,https://github.com/Nexarian,Resolution switching without reconnecting.,1,[],https://github.com/neutrinolabs/xrdp/pull/1820,https://github.com/Nexarian,2,https://github.com/neutrinolabs/xrdp/pull/1820#issuecomment-790308518,"Implements #448

Based on https://github.com/jsorg71/xrdp/tree/dynamic_monitor
Tested with xorgxrdp
Tested with vnc
Only works with single monitor.

Depends on neutrinolabs/xorgxrdp#183
To test either use Microsoft Remote Desktop (From the Windows or Mac OS app store) and configure to resize the screen or FreeRDP with the /dynamic-resolution flag set.","I anticipate there will be quite a bit of discussion around this one.
@jsorg71 -- Since this is based initially on work you've done, thoughts?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1820,2021-03-04T05:38:11Z,2021-04-24T12:56:58Z,2021-04-28T08:24:01Z,MERGED,True,499,69,16,https://github.com/Nexarian,Resolution switching without reconnecting.,1,[],https://github.com/neutrinolabs/xrdp/pull/1820,https://github.com/matt335672,3,https://github.com/neutrinolabs/xrdp/pull/1820#issuecomment-796788648,"Implements #448

Based on https://github.com/jsorg71/xrdp/tree/dynamic_monitor
Tested with xorgxrdp
Tested with vnc
Only works with single monitor.

Depends on neutrinolabs/xorgxrdp#183
To test either use Microsoft Remote Desktop (From the Windows or Mac OS app store) and configure to resize the screen or FreeRDP with the /dynamic-resolution flag set.",@Nexarian - something else in the logging which @aquesnel has added is that you can selectively change log levels for LOG_DEVEL() messages per-file or per-function when running. There's a bit more info on this in the description of the LOG_DEVEL() macro. It could be handy for testing/debugging this facility.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1820,2021-03-04T05:38:11Z,2021-04-24T12:56:58Z,2021-04-28T08:24:01Z,MERGED,True,499,69,16,https://github.com/Nexarian,Resolution switching without reconnecting.,1,[],https://github.com/neutrinolabs/xrdp/pull/1820,https://github.com/bolkedebruin,4,https://github.com/neutrinolabs/xrdp/pull/1820#issuecomment-797454068,"Implements #448

Based on https://github.com/jsorg71/xrdp/tree/dynamic_monitor
Tested with xorgxrdp
Tested with vnc
Only works with single monitor.

Depends on neutrinolabs/xorgxrdp#183
To test either use Microsoft Remote Desktop (From the Windows or Mac OS app store) and configure to resize the screen or FreeRDP with the /dynamic-resolution flag set.","@Nexarian what are the conditions to trigger a resize? I'm testing this with a Mac client that has enabled ""update session on resize"". It does ""smart resize"" (aka scale on the clients side) but it doesnt do a real resize at the moment.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1820,2021-03-04T05:38:11Z,2021-04-24T12:56:58Z,2021-04-28T08:24:01Z,MERGED,True,499,69,16,https://github.com/Nexarian,Resolution switching without reconnecting.,1,[],https://github.com/neutrinolabs/xrdp/pull/1820,https://github.com/Nexarian,5,https://github.com/neutrinolabs/xrdp/pull/1820#issuecomment-797540085,"Implements #448

Based on https://github.com/jsorg71/xrdp/tree/dynamic_monitor
Tested with xorgxrdp
Tested with vnc
Only works with single monitor.

Depends on neutrinolabs/xorgxrdp#183
To test either use Microsoft Remote Desktop (From the Windows or Mac OS app store) and configure to resize the screen or FreeRDP with the /dynamic-resolution flag set.","@bolkedebruin -- The app is https://apps.apple.com/app/microsoft-remote-desktop/id1295203466?mt=12, and the option you need to enable looks like this:

Smart sizing indicates that you have a fixed resolution selected, which appears to be mutually exclusive with the resize flag. Next, double check you're using the latest version, Microsoft just released a new version, I'm using 10.5.2
Second, try connecting to a Windows 10 installation and make sure that the dynamic resolution resizing works on that, as we're 100% sure it works there.
The other option is to try FreeRDP with /dynamic-resolution
Reach out to me on Gitter, and I'm happy to help more!",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1820,2021-03-04T05:38:11Z,2021-04-24T12:56:58Z,2021-04-28T08:24:01Z,MERGED,True,499,69,16,https://github.com/Nexarian,Resolution switching without reconnecting.,1,[],https://github.com/neutrinolabs/xrdp/pull/1820,https://github.com/Nexarian,6,https://github.com/neutrinolabs/xrdp/pull/1820#issuecomment-799089232,"Implements #448

Based on https://github.com/jsorg71/xrdp/tree/dynamic_monitor
Tested with xorgxrdp
Tested with vnc
Only works with single monitor.

Depends on neutrinolabs/xorgxrdp#183
To test either use Microsoft Remote Desktop (From the Windows or Mac OS app store) and configure to resize the screen or FreeRDP with the /dynamic-resolution flag set.","@matt335672 Updated for your comments and tested with https://github.com/Nexarian/xorgxrdp/tree/resize_damage_enhancement
Works fine!",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1820,2021-03-04T05:38:11Z,2021-04-24T12:56:58Z,2021-04-28T08:24:01Z,MERGED,True,499,69,16,https://github.com/Nexarian,Resolution switching without reconnecting.,1,[],https://github.com/neutrinolabs/xrdp/pull/1820,https://github.com/bolkedebruin,7,https://github.com/neutrinolabs/xrdp/pull/1820#issuecomment-799250803,"Implements #448

Based on https://github.com/jsorg71/xrdp/tree/dynamic_monitor
Tested with xorgxrdp
Tested with vnc
Only works with single monitor.

Depends on neutrinolabs/xorgxrdp#183
To test either use Microsoft Remote Desktop (From the Windows or Mac OS app store) and configure to resize the screen or FreeRDP with the /dynamic-resolution flag set.","I have tested this and got it working. Firstly, the drdynvc channel should be enabled for this to work (we disable channels as much as we can for security reasons). Furthermore, with max_bpp=16 (we use this for speed reasons) only freerdp was working. The w10 clients fails to connect at all and the Mac client does connect but crashes quickly after. Setting it to 32 makes it work with the MS clients. I'm not sure if this is a bug or a limitation in the clients.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1820,2021-03-04T05:38:11Z,2021-04-24T12:56:58Z,2021-04-28T08:24:01Z,MERGED,True,499,69,16,https://github.com/Nexarian,Resolution switching without reconnecting.,1,[],https://github.com/neutrinolabs/xrdp/pull/1820,https://github.com/matt335672,8,https://github.com/neutrinolabs/xrdp/pull/1820#issuecomment-799354045,"Implements #448

Based on https://github.com/jsorg71/xrdp/tree/dynamic_monitor
Tested with xorgxrdp
Tested with vnc
Only works with single monitor.

Depends on neutrinolabs/xorgxrdp#183
To test either use Microsoft Remote Desktop (From the Windows or Mac OS app store) and configure to resize the screen or FreeRDP with the /dynamic-resolution flag set.","@bolkedebruin - I'm connecting to an Ubuntu 20.04 machine with max_bpp=16 in xrdp.ini from the Windows 10 client (version 10.2.1818.0) on a single-monitor setup, and it seems to be working for me.
I'm assuming you're using Xvnc on the back end(?)
I'm getting :-
$ xdpyinfo | grep 'depth of root window'
  depth of root window:    16 planes
$ Xvnc -version

Xvnc TigerVNC 1.10.0 - built Apr  9 2020 06:49:31
Copyright (C) 1999-2019 TigerVNC Team and many others (see README.rst)
See https://www.tigervnc.org for information on TigerVNC.
Underlying X server release 12008000, The X.Org Foundation


Can you post some info on your config so we can reproduce your crash? I can't do the Mac client I'm afraid.
As for your question regarding the bpp setting, in the vnc module, it isn't used because there's no way to change the monitor depth on-the-fly. The resize messages in MS-RDPEDISP don't allow for a colour depth to be part of the resize message (AFAICT), so I suspect the simplest thing to is to take the bpp parameter out of the mod_server_monitor_resize member function in struct xrdp_mod. What do you think @Nexarian?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1820,2021-03-04T05:38:11Z,2021-04-24T12:56:58Z,2021-04-28T08:24:01Z,MERGED,True,499,69,16,https://github.com/Nexarian,Resolution switching without reconnecting.,1,[],https://github.com/neutrinolabs/xrdp/pull/1820,https://github.com/bolkedebruin,9,https://github.com/neutrinolabs/xrdp/pull/1820#issuecomment-799356285,"Implements #448

Based on https://github.com/jsorg71/xrdp/tree/dynamic_monitor
Tested with xorgxrdp
Tested with vnc
Only works with single monitor.

Depends on neutrinolabs/xorgxrdp#183
To test either use Microsoft Remote Desktop (From the Windows or Mac OS app store) and configure to resize the screen or FreeRDP with the /dynamic-resolution flag set.","No we use Xorg. Havent tried Xvnc.
Interesting though you cannot merge this in RDP files. The setting seems to be ignored on the mac client (dynamic resolution:i:1) and less useful for the standard desktop client, which only resizes for full screen.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1820,2021-03-04T05:38:11Z,2021-04-24T12:56:58Z,2021-04-28T08:24:01Z,MERGED,True,499,69,16,https://github.com/Nexarian,Resolution switching without reconnecting.,1,[],https://github.com/neutrinolabs/xrdp/pull/1820,https://github.com/Nexarian,10,https://github.com/neutrinolabs/xrdp/pull/1820#issuecomment-799481768,"Implements #448

Based on https://github.com/jsorg71/xrdp/tree/dynamic_monitor
Tested with xorgxrdp
Tested with vnc
Only works with single monitor.

Depends on neutrinolabs/xorgxrdp#183
To test either use Microsoft Remote Desktop (From the Windows or Mac OS app store) and configure to resize the screen or FreeRDP with the /dynamic-resolution flag set.","I just pushed a fix. One of the functions was hard-coding the BPP to 32, even though some of the function calls directly after it were using the user-configured value! Tested with the Mac OS client that it's working.
@matt335672 One of the signals that is sent to the xorg backend that is necessary for the resize handshake includes the bpp. I'm almost certain that this is something that could be dropped in the future, but right now I don't want to go about changing the interface between xrdp and xorg. Probably we should create a backlog item here. The resize code came from a refactor of the session initialization code.
@bolkedebruin Agreed that with MSTSC, this feature is less useful. The good news is that the ""Microsoft Remote Desktop"" client that comes from the Microsoft App Store does have the same resize features as the Mac client. That's what eventually inspired me to take on this feature, knowing that there was a true Windows 10 client that could indeed do this.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1820,2021-03-04T05:38:11Z,2021-04-24T12:56:58Z,2021-04-28T08:24:01Z,MERGED,True,499,69,16,https://github.com/Nexarian,Resolution switching without reconnecting.,1,[],https://github.com/neutrinolabs/xrdp/pull/1820,https://github.com/matt335672,11,https://github.com/neutrinolabs/xrdp/pull/1820#issuecomment-801966402,"Implements #448

Based on https://github.com/jsorg71/xrdp/tree/dynamic_monitor
Tested with xorgxrdp
Tested with vnc
Only works with single monitor.

Depends on neutrinolabs/xorgxrdp#183
To test either use Microsoft Remote Desktop (From the Windows or Mac OS app store) and configure to resize the screen or FreeRDP with the /dynamic-resolution flag set.","@Nexarian - I've been looking again at the (potentially) confusing use of bpp in the argument list for  the mod_server_monitor_resize member function in struct xrdp_mod.
I fully get your reasons for needing to send this value to xorgxrdp, but given that the existing  bpp value is already part of the mod data, you don't need the bpp parameter. You can do something llke this:-
diff --git a/xup/xup.c b/xup/xup.c
index ff66a959..9711dee9 100644
--- a/xup/xup.c
+++ b/xup/xup.c
@@ -1353,7 +1353,7 @@ lib_send_server_monitor_resize(struct mod *mod, int width, int height, int bpp)
     /* send screen size message */
     struct stream *s;
     make_stream(s);
-    int rv = send_server_monitor_resize(mod, s, width, height, bpp);
+    int rv = send_server_monitor_resize(mod, s, width, height, mod->bpp);
     free_stream(s);
     return rv;
 }
That then leaves you free to remove the bpp parameter from mod_server_monitor_resize.
What do you think?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1820,2021-03-04T05:38:11Z,2021-04-24T12:56:58Z,2021-04-28T08:24:01Z,MERGED,True,499,69,16,https://github.com/Nexarian,Resolution switching without reconnecting.,1,[],https://github.com/neutrinolabs/xrdp/pull/1820,https://github.com/Nexarian,12,https://github.com/neutrinolabs/xrdp/pull/1820#issuecomment-803180452,"Implements #448

Based on https://github.com/jsorg71/xrdp/tree/dynamic_monitor
Tested with xorgxrdp
Tested with vnc
Only works with single monitor.

Depends on neutrinolabs/xorgxrdp#183
To test either use Microsoft Remote Desktop (From the Windows or Mac OS app store) and configure to resize the screen or FreeRDP with the /dynamic-resolution flag set.",@matt335672 Agreed. Pushed an update. Tested to verify it works.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1820,2021-03-04T05:38:11Z,2021-04-24T12:56:58Z,2021-04-28T08:24:01Z,MERGED,True,499,69,16,https://github.com/Nexarian,Resolution switching without reconnecting.,1,[],https://github.com/neutrinolabs/xrdp/pull/1820,https://github.com/bolkedebruin,13,https://github.com/neutrinolabs/xrdp/pull/1820#issuecomment-803430476,"Implements #448

Based on https://github.com/jsorg71/xrdp/tree/dynamic_monitor
Tested with xorgxrdp
Tested with vnc
Only works with single monitor.

Depends on neutrinolabs/xorgxrdp#183
To test either use Microsoft Remote Desktop (From the Windows or Mac OS app store) and configure to resize the screen or FreeRDP with the /dynamic-resolution flag set.",checking why we make the change to the bpp settings @matt335672 and @Nexarian. What happens if I change my BPP on the fly or switch to a monitor that has a different bpp setting?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1820,2021-03-04T05:38:11Z,2021-04-24T12:56:58Z,2021-04-28T08:24:01Z,MERGED,True,499,69,16,https://github.com/Nexarian,Resolution switching without reconnecting.,1,[],https://github.com/neutrinolabs/xrdp/pull/1820,https://github.com/Nexarian,14,https://github.com/neutrinolabs/xrdp/pull/1820#issuecomment-803511893,"Implements #448

Based on https://github.com/jsorg71/xrdp/tree/dynamic_monitor
Tested with xorgxrdp
Tested with vnc
Only works with single monitor.

Depends on neutrinolabs/xorgxrdp#183
To test either use Microsoft Remote Desktop (From the Windows or Mac OS app store) and configure to resize the screen or FreeRDP with the /dynamic-resolution flag set.","From what I understand BPP isn't something that can be changed on the fly, only resolution. I think this is a limitation of the Microsoft protocol. @matt335672 -- Can you confirm?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1820,2021-03-04T05:38:11Z,2021-04-24T12:56:58Z,2021-04-28T08:24:01Z,MERGED,True,499,69,16,https://github.com/Nexarian,Resolution switching without reconnecting.,1,[],https://github.com/neutrinolabs/xrdp/pull/1820,https://github.com/matt335672,15,https://github.com/neutrinolabs/xrdp/pull/1820#issuecomment-804000138,"Implements #448

Based on https://github.com/jsorg71/xrdp/tree/dynamic_monitor
Tested with xorgxrdp
Tested with vnc
Only works with single monitor.

Depends on neutrinolabs/xorgxrdp#183
To test either use Microsoft Remote Desktop (From the Windows or Mac OS app store) and configure to resize the screen or FreeRDP with the /dynamic-resolution flag set.","@bolkedebruin - the dynamic client resize protocol is detailed in [MS-RDPEDISP]. It doesn't contain any provision for changing bpp on the fly.
From the testing I've just done, changing the client resolution on reconnect results in unchanged behaviour (i.e. new session for Xvnc, same sesion for Xorg).
Does that answer your question, or have I missed something?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1820,2021-03-04T05:38:11Z,2021-04-24T12:56:58Z,2021-04-28T08:24:01Z,MERGED,True,499,69,16,https://github.com/Nexarian,Resolution switching without reconnecting.,1,[],https://github.com/neutrinolabs/xrdp/pull/1820,https://github.com/matt335672,16,https://github.com/neutrinolabs/xrdp/pull/1820#issuecomment-804148983,"Implements #448

Based on https://github.com/jsorg71/xrdp/tree/dynamic_monitor
Tested with xorgxrdp
Tested with vnc
Only works with single monitor.

Depends on neutrinolabs/xorgxrdp#183
To test either use Microsoft Remote Desktop (From the Windows or Mac OS app store) and configure to resize the screen or FreeRDP with the /dynamic-resolution flag set.","Hi @Nexarian
Just realised as part of another conversation that you'll need to add the extra stub functions to neutrinordp as well. My bad - I should have thought of it before.
I've built neutrinordp and used it to connect to a Win10 box using the Store client. When I resize the client, I get a SEGV here:-
https://github.com/Nexarian/xrdp/blob/52c52055432ef303407653ef352126a1edb75e9f/xrdp/xrdp_mm.c#L1136",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1820,2021-03-04T05:38:11Z,2021-04-24T12:56:58Z,2021-04-28T08:24:01Z,MERGED,True,499,69,16,https://github.com/Nexarian,Resolution switching without reconnecting.,1,[],https://github.com/neutrinolabs/xrdp/pull/1820,https://github.com/Nexarian,17,https://github.com/neutrinolabs/xrdp/pull/1820#issuecomment-805352732,"Implements #448

Based on https://github.com/jsorg71/xrdp/tree/dynamic_monitor
Tested with xorgxrdp
Tested with vnc
Only works with single monitor.

Depends on neutrinolabs/xorgxrdp#183
To test either use Microsoft Remote Desktop (From the Windows or Mac OS app store) and configure to resize the screen or FreeRDP with the /dynamic-resolution flag set.","@matt335672 Good call out! Should NeutrinoRDP also implement these functions, or is stubbing enough until we integrate with FreeRDP 2.0?
I've pushed an update for the stub functions. Since I'm not sure how to test this, if you could test it for me, I'd appreciate it.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1820,2021-03-04T05:38:11Z,2021-04-24T12:56:58Z,2021-04-28T08:24:01Z,MERGED,True,499,69,16,https://github.com/Nexarian,Resolution switching without reconnecting.,1,[],https://github.com/neutrinolabs/xrdp/pull/1820,https://github.com/matt335672,18,https://github.com/neutrinolabs/xrdp/pull/1820#issuecomment-806945938,"Implements #448

Based on https://github.com/jsorg71/xrdp/tree/dynamic_monitor
Tested with xorgxrdp
Tested with vnc
Only works with single monitor.

Depends on neutrinolabs/xorgxrdp#183
To test either use Microsoft Remote Desktop (From the Windows or Mac OS app store) and configure to resize the screen or FreeRDP with the /dynamic-resolution flag set.","Hi @Nexarian
I've tested the stubbing out, and it's not really satisfactory. The problem is I think that because the dynamic channel's been opened, the client is expecting its DISPLAYCONTROL_MONITOR_LAYOUT_PDU requests to be honoured. So if you start full screen and resize to a smaller screen, you don't get anything useful.
I've had a look through neutrinordp and frankly adding a resize to that is beyond me.
I've tried playing about with not opening the channel at all if the module doesn't support resizing. This doesn't help though. The first call to xrdp_mm_drdynvc_up() is before the user has selected a module, so at that point you don't have enough information as to whether to bring the channel up or not. The only way I can think to do that is to delay opening the dynamic channel until the module is loaded. That might work but would  prevent any resize of the login screen being possible.
Does that sound sensible at this point?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1820,2021-03-04T05:38:11Z,2021-04-24T12:56:58Z,2021-04-28T08:24:01Z,MERGED,True,499,69,16,https://github.com/Nexarian,Resolution switching without reconnecting.,1,[],https://github.com/neutrinolabs/xrdp/pull/1820,https://github.com/Nexarian,19,https://github.com/neutrinolabs/xrdp/pull/1820#issuecomment-807945346,"Implements #448

Based on https://github.com/jsorg71/xrdp/tree/dynamic_monitor
Tested with xorgxrdp
Tested with vnc
Only works with single monitor.

Depends on neutrinolabs/xorgxrdp#183
To test either use Microsoft Remote Desktop (From the Windows or Mac OS app store) and configure to resize the screen or FreeRDP with the /dynamic-resolution flag set.","I didn't know how to implement this at all when I first started either. I think we can take a crack at doing some archaeology in the codebase(s) and figure out how to implement this. It will help our understanding of how the entire ecosystem works.
As to the suggestion to delay module loading. I like it, but not as a feature for this issue. I think if we're going to implement that, we should do it right, and add a system to XRDP that determines what channels or features to activate such that they are all only turned on or off based on what module the user has selected at login. We could make this PR dependent on that feature, so as to keep them separate.
The final option is to release dynamic resize as a feature flag/experimental for now, while we work on one or both of the above two.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1820,2021-03-04T05:38:11Z,2021-04-24T12:56:58Z,2021-04-28T08:24:01Z,MERGED,True,499,69,16,https://github.com/Nexarian,Resolution switching without reconnecting.,1,[],https://github.com/neutrinolabs/xrdp/pull/1820,https://github.com/matt335672,20,https://github.com/neutrinolabs/xrdp/pull/1820#issuecomment-808189313,"Implements #448

Based on https://github.com/jsorg71/xrdp/tree/dynamic_monitor
Tested with xorgxrdp
Tested with vnc
Only works with single monitor.

Depends on neutrinolabs/xorgxrdp#183
To test either use Microsoft Remote Desktop (From the Windows or Mac OS app store) and configure to resize the screen or FreeRDP with the /dynamic-resolution flag set.",Another (still temporary) solution is to add some code to xrdp_mm_drdynvc_up() to allow the user to disable this dynamic channel. At the moment it's enabled unconditionally. Being able to turn it off gives a way forward for NeutrinoRDP users that might come across this.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1820,2021-03-04T05:38:11Z,2021-04-24T12:56:58Z,2021-04-28T08:24:01Z,MERGED,True,499,69,16,https://github.com/Nexarian,Resolution switching without reconnecting.,1,[],https://github.com/neutrinolabs/xrdp/pull/1820,https://github.com/Nexarian,21,https://github.com/neutrinolabs/xrdp/pull/1820#issuecomment-809120064,"Implements #448

Based on https://github.com/jsorg71/xrdp/tree/dynamic_monitor
Tested with xorgxrdp
Tested with vnc
Only works with single monitor.

Depends on neutrinolabs/xorgxrdp#183
To test either use Microsoft Remote Desktop (From the Windows or Mac OS app store) and configure to resize the screen or FreeRDP with the /dynamic-resolution flag set.","I'm digging into whether it's possible to add this functionality to NeutrinoRDP. I think it is, but not yet certain. I don't think FreeRDP 1.0.1 supported this functionality, so it might not be possible until it's updated to 2.0.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1820,2021-03-04T05:38:11Z,2021-04-24T12:56:58Z,2021-04-28T08:24:01Z,MERGED,True,499,69,16,https://github.com/Nexarian,Resolution switching without reconnecting.,1,[],https://github.com/neutrinolabs/xrdp/pull/1820,https://github.com/bolkedebruin,22,https://github.com/neutrinolabs/xrdp/pull/1820#issuecomment-820427328,"Implements #448

Based on https://github.com/jsorg71/xrdp/tree/dynamic_monitor
Tested with xorgxrdp
Tested with vnc
Only works with single monitor.

Depends on neutrinolabs/xorgxrdp#183
To test either use Microsoft Remote Desktop (From the Windows or Mac OS app store) and configure to resize the screen or FreeRDP with the /dynamic-resolution flag set.",We have tested this and it works well without regressions. Of course the clients do not enable it automatically so resizing testing was limited.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1820,2021-03-04T05:38:11Z,2021-04-24T12:56:58Z,2021-04-28T08:24:01Z,MERGED,True,499,69,16,https://github.com/Nexarian,Resolution switching without reconnecting.,1,[],https://github.com/neutrinolabs/xrdp/pull/1820,https://github.com/matt335672,23,https://github.com/neutrinolabs/xrdp/pull/1820#issuecomment-821082058,"Implements #448

Based on https://github.com/jsorg71/xrdp/tree/dynamic_monitor
Tested with xorgxrdp
Tested with vnc
Only works with single monitor.

Depends on neutrinolabs/xorgxrdp#183
To test either use Microsoft Remote Desktop (From the Windows or Mac OS app store) and configure to resize the screen or FreeRDP with the /dynamic-resolution flag set.",Thanks @bolkedebruin - that's really useful info with a new release coming up.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1820,2021-03-04T05:38:11Z,2021-04-24T12:56:58Z,2021-04-28T08:24:01Z,MERGED,True,499,69,16,https://github.com/Nexarian,Resolution switching without reconnecting.,1,[],https://github.com/neutrinolabs/xrdp/pull/1820,https://github.com/Nexarian,24,https://github.com/neutrinolabs/xrdp/pull/1820#issuecomment-824555053,"Implements #448

Based on https://github.com/jsorg71/xrdp/tree/dynamic_monitor
Tested with xorgxrdp
Tested with vnc
Only works with single monitor.

Depends on neutrinolabs/xorgxrdp#183
To test either use Microsoft Remote Desktop (From the Windows or Mac OS app store) and configure to resize the screen or FreeRDP with the /dynamic-resolution flag set.","I've updated this PR to include a fix for NeutrinoRDP that allows for an option to disable dynamic resizing in the configuration file.
@matt335672 -- This is largely based on the patch you sent me. I've verified it works, and I didn't see any of the errors in the logs that you referenced.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1820,2021-03-04T05:38:11Z,2021-04-24T12:56:58Z,2021-04-28T08:24:01Z,MERGED,True,499,69,16,https://github.com/Nexarian,Resolution switching without reconnecting.,1,[],https://github.com/neutrinolabs/xrdp/pull/1820,https://github.com/metalefty,25,https://github.com/neutrinolabs/xrdp/pull/1820#issuecomment-825663227,"Implements #448

Based on https://github.com/jsorg71/xrdp/tree/dynamic_monitor
Tested with xorgxrdp
Tested with vnc
Only works with single monitor.

Depends on neutrinolabs/xorgxrdp#183
To test either use Microsoft Remote Desktop (From the Windows or Mac OS app store) and configure to resize the screen or FreeRDP with the /dynamic-resolution flag set.",Can you rebase to the latest devel HEAD? Then I'll have a test before the merge.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1820,2021-03-04T05:38:11Z,2021-04-24T12:56:58Z,2021-04-28T08:24:01Z,MERGED,True,499,69,16,https://github.com/Nexarian,Resolution switching without reconnecting.,1,[],https://github.com/neutrinolabs/xrdp/pull/1820,https://github.com/Nexarian,26,https://github.com/neutrinolabs/xrdp/pull/1820#issuecomment-825680100,"Implements #448

Based on https://github.com/jsorg71/xrdp/tree/dynamic_monitor
Tested with xorgxrdp
Tested with vnc
Only works with single monitor.

Depends on neutrinolabs/xorgxrdp#183
To test either use Microsoft Remote Desktop (From the Windows or Mac OS app store) and configure to resize the screen or FreeRDP with the /dynamic-resolution flag set.","What makes you think it isn't rebased? As far as I'm aware, I did that when I force-pushed the update with the NeutrinoRDP fix.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1820,2021-03-04T05:38:11Z,2021-04-24T12:56:58Z,2021-04-28T08:24:01Z,MERGED,True,499,69,16,https://github.com/Nexarian,Resolution switching without reconnecting.,1,[],https://github.com/neutrinolabs/xrdp/pull/1820,https://github.com/metalefty,27,https://github.com/neutrinolabs/xrdp/pull/1820#issuecomment-826087773,"Implements #448

Based on https://github.com/jsorg71/xrdp/tree/dynamic_monitor
Tested with xorgxrdp
Tested with vnc
Only works with single monitor.

Depends on neutrinolabs/xorgxrdp#183
To test either use Microsoft Remote Desktop (From the Windows or Mac OS app store) and configure to resize the screen or FreeRDP with the /dynamic-resolution flag set.","My bad, it is already rebased. It is working quite well. Thank you very much for your hard work!",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1820,2021-03-04T05:38:11Z,2021-04-24T12:56:58Z,2021-04-28T08:24:01Z,MERGED,True,499,69,16,https://github.com/Nexarian,Resolution switching without reconnecting.,1,[],https://github.com/neutrinolabs/xrdp/pull/1820,https://github.com/metalefty,28,https://github.com/neutrinolabs/xrdp/pull/1820#issuecomment-826088929,"Implements #448

Based on https://github.com/jsorg71/xrdp/tree/dynamic_monitor
Tested with xorgxrdp
Tested with vnc
Only works with single monitor.

Depends on neutrinolabs/xorgxrdp#183
To test either use Microsoft Remote Desktop (From the Windows or Mac OS app store) and configure to resize the screen or FreeRDP with the /dynamic-resolution flag set.","It would be great if we can see more detailed logs when on-the-fly-resizing happens.
Display number, old size, new size. We can do that later.
Xorg
[20210424-21:52:46] [DEBUG] dynamic_monitor_data: msg_type 2 msg_length 56
[20210424-21:52:46] [DEBUG]   MonitorLayoutSize 40 NumMonitor 1
[20210424-21:52:46] [INFO ] xrdp_caps_process_pointer: client supports new(color) cursor
[20210424-21:52:46] [INFO ] xrdp_process_offscreen_bmpcache: support level 0 cache size 0 MB cache entries 0
[20210424-21:52:46] [INFO ] xrdp_caps_process_codecs: nscodec, codec id 1, properties len 3

VNC
[20210424-21:51:31] [DEBUG] dynamic_monitor_data: msg_type 2 msg_length 56
[20210424-21:51:31] [DEBUG]   MonitorLayoutSize 40 NumMonitor 1
[20210424-21:51:31] [DEBUG] Skipping ENC_RAW encoding
[20210424-21:51:31] [DEBUG] Skipping ENC_RAW encoding
[20210424-21:51:31] [DEBUG] VNC server does not support resizing
[20210424-21:51:31] [DEBUG] Resizing client to server 988x961
[20210424-21:51:31] [INFO ] xrdp_caps_process_pointer: client supports new(color) cursor
[20210424-21:51:31] [INFO ] xrdp_process_offscreen_bmpcache: support level 0 cache size 0 MB cache entries 0
[20210424-21:51:31] [INFO ] xrdp_caps_process_codecs: nscodec, codec id 1, properties len 3
[20210424-21:51:31] [INFO ] xrdp_caps_process_pointer: client supports new(color) cursor
[20210424-21:51:31] [INFO ] xrdp_process_offscreen_bmpcache: support level 0 cache size 0 MB cache entries 0
[20210424-21:51:31] [INFO ] xrdp_caps_process_codecs: nscodec, codec id 1, properties len 3
[20210424-21:51:37] [DEBUG] dynamic_monitor_data: msg_type 2 msg_length 56
[20210424-21:51:37] [DEBUG]   MonitorLayoutSize 40 NumMonitor 1
[20210424-21:51:37] [DEBUG] VNC matched ExtendedDesktopSize rectangle x=0, y=0 geom=988x961
[20210424-21:51:37] [DEBUG] VNC server supports resizing
[20210424-21:51:37] [INFO ] Layout from OldLayout (geom=988x961 #screens=1) : 33613:(988x961+0+0)
[20210424-21:51:37] [DEBUG] VNC setting screen id to 33613 from server
[20210424-21:51:37] [DEBUG] Server layout differs from the client layout. Changing server layout
[20210424-21:51:37] [DEBUG] VNC Sending SetDesktopSize
[20210424-21:51:37] [DEBUG] Skipping ENC_EXTENDED_DESKTOP_SIZE encoding x=0, y=0 geom=988x961
[20210424-21:51:37] [INFO ] xrdp_caps_process_pointer: client supports new(color) cursor
[20210424-21:51:37] [INFO ] xrdp_process_offscreen_bmpcache: support level 0 cache size 0 MB cache entries 0
[20210424-21:51:37] [INFO ] xrdp_caps_process_codecs: nscodec, codec id 1, properties len 3
[20210424-21:51:37] [DEBUG] Skipping ENC_EXTENDED_DESKTOP_SIZE encoding x=0, y=0 geom=1172x704
[20210424-21:51:37] [DEBUG] Skipping ENC_EXTENDED_DESKTOP_SIZE encoding x=0, y=0 geom=1172x704
[20210424-21:51:37] [DEBUG] Skipping ENC_EXTENDED_DESKTOP_SIZE encoding x=0, y=0 geom=1172x704
[20210424-21:51:37] [DEBUG] Skipping ENC_EXTENDED_DESKTOP_SIZE encoding x=0, y=0 geom=1172x704
[20210424-21:51:37] [DEBUG] VNC matched ExtendedDesktopSize rectangle x=1, y=0 geom=1172x704
[20210424-21:51:37] [DEBUG] VNC server successfully resized
[20210424-21:51:37] [INFO ] Layout from NewLayout (geom=1172x704 #screens=1) : 33613:(1172x704+0+0)",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1820,2021-03-04T05:38:11Z,2021-04-24T12:56:58Z,2021-04-28T08:24:01Z,MERGED,True,499,69,16,https://github.com/Nexarian,Resolution switching without reconnecting.,1,[],https://github.com/neutrinolabs/xrdp/pull/1820,https://github.com/jsorg71,29,https://github.com/neutrinolabs/xrdp/pull/1820#issuecomment-827330175,"Implements #448

Based on https://github.com/jsorg71/xrdp/tree/dynamic_monitor
Tested with xorgxrdp
Tested with vnc
Only works with single monitor.

Depends on neutrinolabs/xorgxrdp#183
To test either use Microsoft Remote Desktop (From the Windows or Mac OS app store) and configure to resize the screen or FreeRDP with the /dynamic-resolution flag set.","Thanks everyone who worked on this.
I'll delete my branch.",True,"{'HOORAY': ['https://github.com/metalefty', 'https://github.com/prg318']}"
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1820,2021-03-04T05:38:11Z,2021-04-24T12:56:58Z,2021-04-28T08:24:01Z,MERGED,True,499,69,16,https://github.com/Nexarian,Resolution switching without reconnecting.,1,[],https://github.com/neutrinolabs/xrdp/pull/1820,https://github.com/prg318,30,https://github.com/neutrinolabs/xrdp/pull/1820#issuecomment-827822812,"Implements #448

Based on https://github.com/jsorg71/xrdp/tree/dynamic_monitor
Tested with xorgxrdp
Tested with vnc
Only works with single monitor.

Depends on neutrinolabs/xorgxrdp#183
To test either use Microsoft Remote Desktop (From the Windows or Mac OS app store) and configure to resize the screen or FreeRDP with the /dynamic-resolution flag set.","I just really wanted to step in and thank everyone that put effort into this feature.  This is really awesome functionality that I have been wanting to use for quite some time. It's fantastic to see it already working flawlessly on the -devel branches.
This is awesome and you all rule! Thanks again!!",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1820,2021-03-04T05:38:11Z,2021-04-24T12:56:58Z,2021-04-28T08:24:01Z,MERGED,True,499,69,16,https://github.com/Nexarian,Resolution switching without reconnecting.,1,[],https://github.com/neutrinolabs/xrdp/pull/1820,https://github.com/Nexarian,31,https://github.com/neutrinolabs/xrdp/pull/1820#issuecomment-827891979,"Implements #448

Based on https://github.com/jsorg71/xrdp/tree/dynamic_monitor
Tested with xorgxrdp
Tested with vnc
Only works with single monitor.

Depends on neutrinolabs/xorgxrdp#183
To test either use Microsoft Remote Desktop (From the Windows or Mac OS app store) and configure to resize the screen or FreeRDP with the /dynamic-resolution flag set.","@jsorg71 @prg318 You're very welcome!
I use XRDP regularly, so this was selfishly for me as much as anyone else, but I am immensely gratified knowing it's improving the experience of everyone who uses it!
And now I want to move on to aid in other feature improvements, like #1422.  Turns out, dynamic resolution for that isn't a walk in the park, either!",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1820,2021-03-04T05:38:11Z,2021-04-24T12:56:58Z,2021-04-28T08:24:01Z,MERGED,True,499,69,16,https://github.com/Nexarian,Resolution switching without reconnecting.,1,[],https://github.com/neutrinolabs/xrdp/pull/1820,https://github.com/matt335672,32,https://github.com/neutrinolabs/xrdp/pull/1820#issuecomment-828256914,"Implements #448

Based on https://github.com/jsorg71/xrdp/tree/dynamic_monitor
Tested with xorgxrdp
Tested with vnc
Only works with single monitor.

Depends on neutrinolabs/xorgxrdp#183
To test either use Microsoft Remote Desktop (From the Windows or Mac OS app store) and configure to resize the screen or FreeRDP with the /dynamic-resolution flag set.",@prg318 - thank you for your kind words. It really does make a difference.,True,{'THUMBS_UP': ['https://github.com/metalefty']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1821,2021-03-04T12:16:42Z,2021-03-05T09:35:22Z,2021-03-05T09:35:27Z,MERGED,True,19,15,1,https://github.com/matt335672,Include OS version in github action cache for cppcheck,2,[],https://github.com/neutrinolabs/xrdp/pull/1821,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1821,"This change includes the OS version in the cppcheck cache name for the cppcheck github action.
This ensures that when ubuntu-latest is updated, we do not use the old cache - moving from 18.04 to 20.04 broke cppcheck as the symbol Z3_get_error_msg was removed from the Z3 library - see Z3Prover/z3#660","This change includes the OS version in the cppcheck cache name for the cppcheck github action.
This ensures that when ubuntu-latest is updated, we do not use the old cache - moving from 18.04 to 20.04 broke cppcheck as the symbol Z3_get_error_msg was removed from the Z3 library - see Z3Prover/z3#660",True,{'THUMBS_UP': ['https://github.com/abitmore']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1822,2021-03-04T13:15:37Z,2021-03-05T09:37:24Z,2021-03-05T09:37:24Z,MERGED,True,10,14,1,https://github.com/metalefty,README: mention platform support tier,1,[],https://github.com/neutrinolabs/xrdp/pull/1822,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1822,"and replace ""Environment"" section.","and replace ""Environment"" section.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1824,2021-03-04T22:47:16Z,2021-08-06T13:25:34Z,2021-08-06T13:25:35Z,CLOSED,False,1,2,1,https://github.com/jcarlstedt,Fix #1616 allowing clipboard to work both ways,1,[],https://github.com/neutrinolabs/xrdp/pull/1824,https://github.com/jcarlstedt,1,https://github.com/neutrinolabs/xrdp/pull/1824,"Currently the clipboard copy and paste is working to copy from a the server running xrdp and vncserver and paste to a client running Windows Remote Desktop, but it does not work to copy data from the Windows client and paste to the server running xdrp / vncserver. The code that requests the data from the client clipboard after an announcement / notification that new data is available appears to have been disabled.","Currently the clipboard copy and paste is working to copy from a the server running xrdp and vncserver and paste to a client running Windows Remote Desktop, but it does not work to copy data from the Windows client and paste to the server running xdrp / vncserver. The code that requests the data from the client clipboard after an announcement / notification that new data is available appears to have been disabled.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1824,2021-03-04T22:47:16Z,2021-08-06T13:25:34Z,2021-08-06T13:25:35Z,CLOSED,False,1,2,1,https://github.com/jcarlstedt,Fix #1616 allowing clipboard to work both ways,1,[],https://github.com/neutrinolabs/xrdp/pull/1824,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/1824#issuecomment-792638152,"Currently the clipboard copy and paste is working to copy from a the server running xrdp and vncserver and paste to a client running Windows Remote Desktop, but it does not work to copy data from the Windows client and paste to the server running xdrp / vncserver. The code that requests the data from the client clipboard after an announcement / notification that new data is available appears to have been disabled.","Hi @jcarlstedt
The code in question was disabled as part of a large PR #260 around 5 years ago. I wasn't actively involved in the project then, so I can't comment on the reasons why this happened.
On the other hand it seems unlikely it would have been removed for no reason at all.
I'm interested in trying to reproduce this fault, and I'm not seeing it at present.
I'm connecting with mstsc.exe to an Ubuntu 20.04 LTS instance (using Xvnc), and then pasting 'ls -l' from a notepad window on the Windows side into a terminal. That all seems to work OK for me.
Unlike the OP in #1616 chansrv is running here - this is required for copy-paste.
Can you be clearer about what you're doing differently from the above?
Thanks.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1824,2021-03-04T22:47:16Z,2021-08-06T13:25:34Z,2021-08-06T13:25:35Z,CLOSED,False,1,2,1,https://github.com/jcarlstedt,Fix #1616 allowing clipboard to work both ways,1,[],https://github.com/neutrinolabs/xrdp/pull/1824,https://github.com/jcarlstedt,3,https://github.com/neutrinolabs/xrdp/pull/1824#issuecomment-792754757,"Currently the clipboard copy and paste is working to copy from a the server running xrdp and vncserver and paste to a client running Windows Remote Desktop, but it does not work to copy data from the Windows client and paste to the server running xdrp / vncserver. The code that requests the data from the client clipboard after an announcement / notification that new data is available appears to have been disabled.","I am using Windows 10 Remote Desktop Connection as the client.
The headless server is running as a vmWare VM with Red Hat Enterprise Linux Server release 7.6 installed with tigervnc-server 1.8.0 and xfce4 4.12.1.
I have built xrdp-0.9.15 using
./configure
make
make install
(I have also tried with ./configure --enable-fuse)
Can connect directly using tigervnc client to the tigervnc server with copy and paste working in both directions.
I am using default settings in xrdp.ini and sesman.ini with the exception that the port for the vncserver is hardcoded using port=5901 under XVnc in xrdp.init
I am logging in using Windows 10 Remote Desktop Connection and selecting the Xvnc session type.
The following processes are running.
/usr/local/sbin/xrdp-sesman
/usr/local/sbin/xrdp
I can not see a chansrv process. Its manual states ""This program is only forked internally by xrdp-sesman"".
Copy from notepad in Windows and pasting to terminal on target server is not working.
When I re-compile with the code changes as per this merge request the copy and paste is working both ways.
So either the issue is that chansrv is not forked as expected or the code changes from PR #260 has broken the copy and paste?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1824,2021-03-04T22:47:16Z,2021-08-06T13:25:34Z,2021-08-06T13:25:35Z,CLOSED,False,1,2,1,https://github.com/jcarlstedt,Fix #1616 allowing clipboard to work both ways,1,[],https://github.com/neutrinolabs/xrdp/pull/1824,https://github.com/matt335672,4,https://github.com/neutrinolabs/xrdp/pull/1824#issuecomment-793581370,"Currently the clipboard copy and paste is working to copy from a the server running xrdp and vncserver and paste to a client running Windows Remote Desktop, but it does not work to copy data from the Windows client and paste to the server running xdrp / vncserver. The code that requests the data from the client clipboard after an announcement / notification that new data is available appears to have been disabled.","Thanks for the description - that's useful.
I've had a look at the v0.9.15 code, and chansrv should be started in the environment you describe. Another possibility is that chansrv is starting and exiting quickly.
If chansrv has started, there should be log files for it which (by default) are in ~/.local/share/xrdp, if you aren't setting XDG_DATA_HOME
Can you do the following for me?

Output of xrdp -v
See if there are any files in ~/.local/share/xrdp. If so, is there anything in them?
Try restarting chansrv manually. To do this:-


start a terminal in the xrdp session
run /usr/local/sbin/xrdp-chansrv in the terminal so it gets the right environment
(importantly) disconnect from the session and reconnect to it. This recreates the connection between xrdp and the chansrv process.

Thanks.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1824,2021-03-04T22:47:16Z,2021-08-06T13:25:34Z,2021-08-06T13:25:35Z,CLOSED,False,1,2,1,https://github.com/jcarlstedt,Fix #1616 allowing clipboard to work both ways,1,[],https://github.com/neutrinolabs/xrdp/pull/1824,https://github.com/matt335672,5,https://github.com/neutrinolabs/xrdp/pull/1824#issuecomment-850331014,"Currently the clipboard copy and paste is working to copy from a the server running xrdp and vncserver and paste to a client running Windows Remote Desktop, but it does not work to copy data from the Windows client and paste to the server running xdrp / vncserver. The code that requests the data from the client clipboard after an announcement / notification that new data is available appears to have been disabled.","Hi @jcarlstedt
Based on your PR above and other problems with this code I've produced a complete rework of the VNC cut-and-paste code in #1900. This code is only used if chansrv isn't running.
Is this of any interest/use to you?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1824,2021-03-04T22:47:16Z,2021-08-06T13:25:34Z,2021-08-06T13:25:35Z,CLOSED,False,1,2,1,https://github.com/jcarlstedt,Fix #1616 allowing clipboard to work both ways,1,[],https://github.com/neutrinolabs/xrdp/pull/1824,https://github.com/matt335672,6,https://github.com/neutrinolabs/xrdp/pull/1824#issuecomment-894259117,"Currently the clipboard copy and paste is working to copy from a the server running xrdp and vncserver and paste to a client running Windows Remote Desktop, but it does not work to copy data from the Windows client and paste to the server running xdrp / vncserver. The code that requests the data from the client clipboard after an announcement / notification that new data is available appears to have been disabled.","This should now be superseded by #1900 (modified by #1963), so I'm closing this for now.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1825,2021-03-05T16:47:10Z,,2022-04-28T11:01:23Z,OPEN,False,971,557,7,https://github.com/zorgluf,Smartcard implementation with PCSCLITE_CSOCK_NAME,11,[],https://github.com/neutrinolabs/xrdp/pull/1825,https://github.com/zorgluf,1,https://github.com/neutrinolabs/xrdp/pull/1825,"Mainly based on the great work from jsorg71 (#963).
Fix issues with recent version of pcsc (1.8.8).
Merge with a more recent version of xrdp (0.9.14).
Made it working on RHEL7.9 with a gemalto MD840 and omnikey reader.
Feel free to suggest improvement, my dev skills are pretty low.","Mainly based on the great work from jsorg71 (#963).
Fix issues with recent version of pcsc (1.8.8).
Merge with a more recent version of xrdp (0.9.14).
Made it working on RHEL7.9 with a gemalto MD840 and omnikey reader.
Feel free to suggest improvement, my dev skills are pretty low.",True,{'THUMBS_UP': ['https://github.com/EmperorArthur']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1825,2021-03-05T16:47:10Z,,2022-04-28T11:01:23Z,OPEN,False,971,557,7,https://github.com/zorgluf,Smartcard implementation with PCSCLITE_CSOCK_NAME,11,[],https://github.com/neutrinolabs/xrdp/pull/1825,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/1825#issuecomment-793600726,"Mainly based on the great work from jsorg71 (#963).
Fix issues with recent version of pcsc (1.8.8).
Merge with a more recent version of xrdp (0.9.14).
Made it working on RHEL7.9 with a gemalto MD840 and omnikey reader.
Feel free to suggest improvement, my dev skills are pretty low.","Hi @zorgluf
Thanks for taking the time to contribute this, and for getting involved.
I'll dig out a spare yubikey and take a look at this when I can. At the moment however, I'm a bit snowed under with other PRs, which is great, but means I'll take a while to get to this, for which I apologise.
I see you've got a couple of minor issues above at the moment:-

There's a conflict with a couple of files.
The FreeBSD CI check is failing

I also see you've merged in to 0.9.14 above, which is fine, but will lead to a complicated git history when this (eventually) gets to devel.
Are you able to remove the last commit above and rebase the others on the latest devel? I'll be happy to give you a hand with this if you need it.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1825,2021-03-05T16:47:10Z,,2022-04-28T11:01:23Z,OPEN,False,971,557,7,https://github.com/zorgluf,Smartcard implementation with PCSCLITE_CSOCK_NAME,11,[],https://github.com/neutrinolabs/xrdp/pull/1825,https://github.com/aquesnel,3,https://github.com/neutrinolabs/xrdp/pull/1825#issuecomment-798463491,"Mainly based on the great work from jsorg71 (#963).
Fix issues with recent version of pcsc (1.8.8).
Merge with a more recent version of xrdp (0.9.14).
Made it working on RHEL7.9 with a gemalto MD840 and omnikey reader.
Feel free to suggest improvement, my dev skills are pretty low.","Hi @zorgluf
I'd be happy to help test this out too, but I don't know how to setup xrdp and a client to use a smart card for authentication. Could you please help by writing up your server and client configuration and maybe adding it to the wiki pages?",True,{'THUMBS_UP': ['https://github.com/matt335672']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1825,2021-03-05T16:47:10Z,,2022-04-28T11:01:23Z,OPEN,False,971,557,7,https://github.com/zorgluf,Smartcard implementation with PCSCLITE_CSOCK_NAME,11,[],https://github.com/neutrinolabs/xrdp/pull/1825,https://github.com/zorgluf,4,https://github.com/neutrinolabs/xrdp/pull/1825#issuecomment-812580500,"Mainly based on the great work from jsorg71 (#963).
Fix issues with recent version of pcsc (1.8.8).
Merge with a more recent version of xrdp (0.9.14).
Made it working on RHEL7.9 with a gemalto MD840 and omnikey reader.
Feel free to suggest improvement, my dev skills are pretty low.","Hi @zorgluf
Thanks for taking the time to contribute this, and for getting involved.
I'll dig out a spare yubikey and take a look at this when I can. At the moment however, I'm a bit snowed under with other PRs, which is great, but means I'll take a while to get to this, for which I apologise.
I see you've got a couple of minor issues above at the moment:-

There's a conflict with a couple of files.
The FreeBSD CI check is failing

I also see you've merged in to 0.9.14 above, which is fine, but will lead to a complicated git history when this (eventually) gets to devel.
Are you able to remove the last commit above and rebase the others on the latest devel? I'll be happy to give you a hand with this if you need it.

Thanks for the review !
The FreeBSD CI check is now OK.
I am not familiar with complexe manipulation with git commit, so I didn't manage to remove cleanly the last commit. Instead, I merge the devel branch into mine and create a new commit. Is it enough ?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1825,2021-03-05T16:47:10Z,,2022-04-28T11:01:23Z,OPEN,False,971,557,7,https://github.com/zorgluf,Smartcard implementation with PCSCLITE_CSOCK_NAME,11,[],https://github.com/neutrinolabs/xrdp/pull/1825,https://github.com/zorgluf,5,https://github.com/neutrinolabs/xrdp/pull/1825#issuecomment-812583115,"Mainly based on the great work from jsorg71 (#963).
Fix issues with recent version of pcsc (1.8.8).
Merge with a more recent version of xrdp (0.9.14).
Made it working on RHEL7.9 with a gemalto MD840 and omnikey reader.
Feel free to suggest improvement, my dev skills are pretty low.","Hi @zorgluf
I'd be happy to help test this out too, but I don't know how to setup xrdp and a client to use a smart card for authentication. Could you please help by writing up your server and client configuration and maybe adding it to the wiki pages?

Hi @aquesnel
This pull request is not about smart card authentication against xrdp, but forwarding a smartcard reader through the rdp session to the remote host.
A basic test for this feature is to use the pcsc-tools on the server : a pcsc_scan command should detect the readers and card inserted on your client side (don't forget to activate smartcard reader forwarding on your xrdp client). But this test is so basic that it cannot test all the functionnalities.
Fully testing this feature highly depends on your smartcard, since you will need :

for some exotic readers drivers on your client side
the middleware of your smartcard installed on the server side, with the pcsc-lite package.
The pcsc-lite lib will read the PCSCLITE_CSOCK_NAME env variable, which communicate with the client reader.
The middleware on server side communicate with the pcsc-lite lib, at least all middleware I am aware of working on linux.
Hope it answer your questions. If it's still relevant, I can add this information on wiki pages, just tell me where...",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1825,2021-03-05T16:47:10Z,,2022-04-28T11:01:23Z,OPEN,False,971,557,7,https://github.com/zorgluf,Smartcard implementation with PCSCLITE_CSOCK_NAME,11,[],https://github.com/neutrinolabs/xrdp/pull/1825,https://github.com/avolkov-astra,6,https://github.com/neutrinolabs/xrdp/pull/1825#issuecomment-852923727,"Mainly based on the great work from jsorg71 (#963).
Fix issues with recent version of pcsc (1.8.8).
Merge with a more recent version of xrdp (0.9.14).
Made it working on RHEL7.9 with a gemalto MD840 and omnikey reader.
Feel free to suggest improvement, my dev skills are pretty low.","Hi.
Here are these changes rebased onto devel branch: https://github.com/avolkov-astra/xrdp/commits/pcsc_devel
This way they are easier to review.
The correctness of rebasing can be checked by comparing final source trees (e.g. with kdiff3)
The most ineteresting difference is the line ""scard_send_cancel(0, context->context, context->context_bytes);"" which was removed by a commit of jsorg71, but returned later, probably by mistake.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1825,2021-03-05T16:47:10Z,,2022-04-28T11:01:23Z,OPEN,False,971,557,7,https://github.com/zorgluf,Smartcard implementation with PCSCLITE_CSOCK_NAME,11,[],https://github.com/neutrinolabs/xrdp/pull/1825,https://github.com/matt335672,7,https://github.com/neutrinolabs/xrdp/pull/1825#issuecomment-852964232,"Mainly based on the great work from jsorg71 (#963).
Fix issues with recent version of pcsc (1.8.8).
Merge with a more recent version of xrdp (0.9.14).
Made it working on RHEL7.9 with a gemalto MD840 and omnikey reader.
Feel free to suggest improvement, my dev skills are pretty low.","Hi @avolkov-astra
Thanks for taking the trouble to do this.
@zorgluf - thank you for sticking with this. As @avolkov-astra says, it's well worth learning the basics of github rebasing as it makes it easier to communicate with folks both here and on gitlab. Furthermore, when you get the hang of that, a lot of the weirdness of git will make more sense (it did for me anyway).
There's a description of rebasing here. It's a bit dry though. I'd recommend just having a play with a copy of a repo and the git rebase -i command which helps a lot.",True,{'THUMBS_UP': ['https://github.com/SteveHespelt']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1825,2021-03-05T16:47:10Z,,2022-04-28T11:01:23Z,OPEN,False,971,557,7,https://github.com/zorgluf,Smartcard implementation with PCSCLITE_CSOCK_NAME,11,[],https://github.com/neutrinolabs/xrdp/pull/1825,https://github.com/matt335672,8,https://github.com/neutrinolabs/xrdp/pull/1825#issuecomment-858651802,"Mainly based on the great work from jsorg71 (#963).
Fix issues with recent version of pcsc (1.8.8).
Merge with a more recent version of xrdp (0.9.14).
Made it working on RHEL7.9 with a gemalto MD840 and omnikey reader.
Feel free to suggest improvement, my dev skills are pretty low.","I've just started taking a look at this, and working out where we are - I haven't tried it yet.
@zorgluf - as far as I can tell, your main changes to @jsorg71's original branch are those in commit 2fe0a4e. Is that correct?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1825,2021-03-05T16:47:10Z,,2022-04-28T11:01:23Z,OPEN,False,971,557,7,https://github.com/zorgluf,Smartcard implementation with PCSCLITE_CSOCK_NAME,11,[],https://github.com/neutrinolabs/xrdp/pull/1825,https://github.com/zorgluf,9,https://github.com/neutrinolabs/xrdp/pull/1825#issuecomment-858967585,"Mainly based on the great work from jsorg71 (#963).
Fix issues with recent version of pcsc (1.8.8).
Merge with a more recent version of xrdp (0.9.14).
Made it working on RHEL7.9 with a gemalto MD840 and omnikey reader.
Feel free to suggest improvement, my dev skills are pretty low.","@zorgluf - as far as I can tell, your main changes to @jsorg71's original branch are those in commit 2fe0a4e. Is that correct?

Correct. Not so much changes. The other commit add comments and some raw int value converted to const variables.
98d5c8b remove also a part of dead code that cannot be accessed in code logic.
Sorry for the mess with all those commit. If it's not reviewable enough, I can try to push an other pull request with less commits.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1825,2021-03-05T16:47:10Z,,2022-04-28T11:01:23Z,OPEN,False,971,557,7,https://github.com/zorgluf,Smartcard implementation with PCSCLITE_CSOCK_NAME,11,[],https://github.com/neutrinolabs/xrdp/pull/1825,https://github.com/EmperorArthur,10,https://github.com/neutrinolabs/xrdp/pull/1825#issuecomment-859216355,"Mainly based on the great work from jsorg71 (#963).
Fix issues with recent version of pcsc (1.8.8).
Merge with a more recent version of xrdp (0.9.14).
Made it working on RHEL7.9 with a gemalto MD840 and omnikey reader.
Feel free to suggest improvement, my dev skills are pretty low.","I'd git isn't working for you, here's the simple solution.

First, clone the official devel branch to a different folder.
Make a new branch in that new folder.
Use git remote to add your GitHub repository to the folder.
Now use a diff tool to find everything that's changed between your folder and the devel folder.
Either copy the files over, or manually cut and paste the changes. Committing at logical times.
Do a git push to the new branch in your GitHub repo.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1825,2021-03-05T16:47:10Z,,2022-04-28T11:01:23Z,OPEN,False,971,557,7,https://github.com/zorgluf,Smartcard implementation with PCSCLITE_CSOCK_NAME,11,[],https://github.com/neutrinolabs/xrdp/pull/1825,https://github.com/matt335672,11,https://github.com/neutrinolabs/xrdp/pull/1825#issuecomment-859607087,"Mainly based on the great work from jsorg71 (#963).
Fix issues with recent version of pcsc (1.8.8).
Merge with a more recent version of xrdp (0.9.14).
Made it working on RHEL7.9 with a gemalto MD840 and omnikey reader.
Feel free to suggest improvement, my dev skills are pretty low.","@zorgluf - I'm having trouble getting pcsc_scan working with a USB-A Yubikey 5 (which is all I've got).
Before I dive in with a debugger, I just thought I'd check with you that I'm not doing anything stupid.
I'm running off of @avolkov-astra's branch at the moment.
On a native Mint machine (pcsc-tools 1.5.5-1) I'm getting this:-
$ pcsc_scan -rv
Using reader plug'n play mechanism
Scanning present readers...
0: Yubico YubiKey OTP+FIDO+CCID 00 00

On an xrdp session to an Ubuntu 20.04 VM (pcsc-tools 1.5.5-1) the pcsc_scan -rv hangs, generating no output.

I've redirected smartcards in mstsc.exe
PCSCLITE_CSOCK_NAME is set to /tmp/.xrdp/xrdp_pcsc_socket_11 in my session.
The last lines in the chansrv log are as follows:-
[20210611-14:55:43] [DEBUG] [scard_process_msg(smartcard_pcsc.c:1972)] scard_process_msg: command 0x0013
[20210611-14:55:43] [INFO ] [scard_process_msg(smartcard_pcsc.c:2062)] scard_process_msg: CMD_WAIT_READER_STATE_CHANGE
[20210611-14:55:43] [DEBUG] [scard_process_cmd_wait_reader_state_change(smartcard_pcsc.c:1693)] scard_process_cmd_wait_reader_state_change:
[20210611-14:55:43] [DEBUG] [scard_process_cmd_wait_reader_state_change(smartcard_pcsc.c:1695)] scard_process_cmd_wait_reader_state_change: timeOut 2
[20210611-14:55:43] [DEBUG] [scard_pcsc_get_wait_objs(smartcard_pcsc.c:450)] scard_pcsc_get_wait_objs:
[20210611-14:55:43] [DEBUG] [get_timeout(chansrv.c:153)] get_timeout:



Is there anything else obvious I need to do which I haven't?
Thanks.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1825,2021-03-05T16:47:10Z,,2022-04-28T11:01:23Z,OPEN,False,971,557,7,https://github.com/zorgluf,Smartcard implementation with PCSCLITE_CSOCK_NAME,11,[],https://github.com/neutrinolabs/xrdp/pull/1825,https://github.com/matt335672,12,https://github.com/neutrinolabs/xrdp/pull/1825#issuecomment-861564512,"Mainly based on the great work from jsorg71 (#963).
Fix issues with recent version of pcsc (1.8.8).
Merge with a more recent version of xrdp (0.9.14).
Made it working on RHEL7.9 with a gemalto MD840 and omnikey reader.
Feel free to suggest improvement, my dev skills are pretty low.","@zorgluf - what platform are you running on?
I see you've added changes for pcsc-lite 1.8.8. I'm running 1.8.26 (on Ubuntu 20.04) and this won't work.
The main problem seems to be that in the pcsc-lite 1.8.26 in winscard_clnt.c, an additional CMD_WAIT_READER_STATE_CHANGE message is sent here.
Your routine which is correspondingly called here doesn't handle this well. There's no return message, and also the timeout read from the stream doesn't exist.
Are you able to try running with pcsc-lite 1.8.26? The error can then be demonstrated by running pcsc_scan with no smartcard at all attached.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1825,2021-03-05T16:47:10Z,,2022-04-28T11:01:23Z,OPEN,False,971,557,7,https://github.com/zorgluf,Smartcard implementation with PCSCLITE_CSOCK_NAME,11,[],https://github.com/neutrinolabs/xrdp/pull/1825,https://github.com/zorgluf,13,https://github.com/neutrinolabs/xrdp/pull/1825#issuecomment-861773733,"Mainly based on the great work from jsorg71 (#963).
Fix issues with recent version of pcsc (1.8.8).
Merge with a more recent version of xrdp (0.9.14).
Made it working on RHEL7.9 with a gemalto MD840 and omnikey reader.
Feel free to suggest improvement, my dev skills are pretty low.","@matt335672 thanks for the report. I was using rhel7 for my dev, and yes it's probable due to a newer pcsclite version introducing a new behavior badly handled, since my yubikey works on a 1.8.8 version.
Thanks for pinning the part of the faulty code, I will propose a fix. Unfortunatly, it will take me a few days, quite busy at the moment, but will definitively do it.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1825,2021-03-05T16:47:10Z,,2022-04-28T11:01:23Z,OPEN,False,971,557,7,https://github.com/zorgluf,Smartcard implementation with PCSCLITE_CSOCK_NAME,11,[],https://github.com/neutrinolabs/xrdp/pull/1825,https://github.com/matt335672,14,https://github.com/neutrinolabs/xrdp/pull/1825#issuecomment-862214082,"Mainly based on the great work from jsorg71 (#963).
Fix issues with recent version of pcsc (1.8.8).
Merge with a more recent version of xrdp (0.9.14).
Made it working on RHEL7.9 with a gemalto MD840 and omnikey reader.
Feel free to suggest improvement, my dev skills are pretty low.","Thanks @zorgluf
I think I owe you an apology. The faulty routine scard_process_cmd_wait_reader_state_change() isn't anything to do with you - it was added as part of commit fe60eeb.
A couple of things which may be useful to you:-

If you're happier working on RHEL/CentOS/Etc, RHEL8 has pcsc-lite 1.8.23. There are minor differences with 1.8.26 but from a first glance nothing looks that different.
If you rebase to the latest xrdp devel, or merge in the latest changes, you'll  find that the configure option --enable-xrdpdebug has been replaced with --enable-devel-all. This includes extra checks when developing which may be useful to you. The routine scard_process_cmd_wait_reader_state_change() currently reads a value timeOut from the stream which isn't there. With --enable-devel-all this is now detected at runtime.

If you're interested in the latter option, I've set up a branch in my own repository which rebases the work by @avolkov-astra onto the latest devel. You can use it in your own working repository with these commands:-
git remote add matt335672 https://github.com/matt335672/xrdp.git
git fetch matt335672
git checkout -b aa_pcsc_devel --track matt335672/aa_pcsc_devel

If you go down this route, at some point you'll be able to overwrite your existing pcsc_0.9.14 branch with these commands (reference here):-
git checkout pcsc_0.9.14
git tag old_pcsc_0.9.14  ; # So we've got a copy
git reset --hard aa_pcsc_devel

You can then update your PR in git hub using git push as normal, but specifying the -f flag.
I appreciate that's a lot to take in! If you've got any questions, please let me know.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1825,2021-03-05T16:47:10Z,,2022-04-28T11:01:23Z,OPEN,False,971,557,7,https://github.com/zorgluf,Smartcard implementation with PCSCLITE_CSOCK_NAME,11,[],https://github.com/neutrinolabs/xrdp/pull/1825,https://github.com/matt335672,15,https://github.com/neutrinolabs/xrdp/pull/1825#issuecomment-862217512,"Mainly based on the great work from jsorg71 (#963).
Fix issues with recent version of pcsc (1.8.8).
Merge with a more recent version of xrdp (0.9.14).
Made it working on RHEL7.9 with a gemalto MD840 and omnikey reader.
Feel free to suggest improvement, my dev skills are pretty low.","A quick addition to the above; at the moment my branch aa_pcsc_devel isn't passing CI checks.
That's probably something you don't need to worry about yet; we can fix that later.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1825,2021-03-05T16:47:10Z,,2022-04-28T11:01:23Z,OPEN,False,971,557,7,https://github.com/zorgluf,Smartcard implementation with PCSCLITE_CSOCK_NAME,11,[],https://github.com/neutrinolabs/xrdp/pull/1825,https://github.com/zorgluf,16,https://github.com/neutrinolabs/xrdp/pull/1825#issuecomment-882511685,"Mainly based on the great work from jsorg71 (#963).
Fix issues with recent version of pcsc (1.8.8).
Merge with a more recent version of xrdp (0.9.14).
Made it working on RHEL7.9 with a gemalto MD840 and omnikey reader.
Feel free to suggest improvement, my dev skills are pretty low.","@matt335672  thank you very much for your time on this request, it helps a lot.
I followed your instructions and add 2 commits from your rebased repo.
There was in fact two issues :

A change of behavior in pcsc lite libraries. Now the code is tracking protocol version to handle both behaviors
Redhat package of pcsc-lite has a patch to rise the PCSCLITE_MAX_READERS_CONTEXTS value of pcsc-lite. So now the code read this value form the devel version of the lib (requirement added to configure.ac). I also modified the Makefile.am in chansrv, maybe need some review (hard coded /usr/include directory).

Code tested on my original RHEL7 server and also on ubuntu 20.04.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1825,2021-03-05T16:47:10Z,,2022-04-28T11:01:23Z,OPEN,False,971,557,7,https://github.com/zorgluf,Smartcard implementation with PCSCLITE_CSOCK_NAME,11,[],https://github.com/neutrinolabs/xrdp/pull/1825,https://github.com/matt335672,17,https://github.com/neutrinolabs/xrdp/pull/1825#issuecomment-883290163,"Mainly based on the great work from jsorg71 (#963).
Fix issues with recent version of pcsc (1.8.8).
Merge with a more recent version of xrdp (0.9.14).
Made it working on RHEL7.9 with a gemalto MD840 and omnikey reader.
Feel free to suggest improvement, my dev skills are pretty low.","Hi @zorgluf
Thanks for sticking with this.
I'm not at all happy (sadly) with the 2nd of your commits I'm afraid. The reason is that if we're going to pull in the pcsc development package, we should really use the library where possible in the same way as the daemon. That's a lot of work! The current approach is a bit flaky in that it won't cope well with version changes, but we don't have a dependency.
I'd suggest (instead), just increasing the MAX_READERS value and adding a comment, e,g, :-
/* Fedora increases the MAX_READERS value from the pcsc-lite default */
# define MAX_READERS 48

You could also add a log message to the test in scard_readers_to_list() if we overrun this limit. So replace this code:-
            reader_index++;
            hold_reader = uds_client->readerStates[reader_index];
            if (reader_index > (MAX_READERS - 1))
            {
                return 0;
            }
with:-
            reader_index++;
            if (reader_index > (MAX_READERS - 1))
            {
                 LOG(LOG_LEVEL_WARNING,  ""Max smart card readers exceeded"");
                return 0;
            }
            hold_reader = uds_client->readerStates[reader_index];
I've moved the assignment to hold_reader, as if the overflow occurs at the moment the behaviour is undefined.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1825,2021-03-05T16:47:10Z,,2022-04-28T11:01:23Z,OPEN,False,971,557,7,https://github.com/zorgluf,Smartcard implementation with PCSCLITE_CSOCK_NAME,11,[],https://github.com/neutrinolabs/xrdp/pull/1825,https://github.com/zorgluf,18,https://github.com/neutrinolabs/xrdp/pull/1825#issuecomment-884230684,"Mainly based on the great work from jsorg71 (#963).
Fix issues with recent version of pcsc (1.8.8).
Merge with a more recent version of xrdp (0.9.14).
Made it working on RHEL7.9 with a gemalto MD840 and omnikey reader.
Feel free to suggest improvement, my dev skills are pretty low.","Hi @matt335672 ,
Thank you also to stick to this long pull request...
The problem is that the readerStates array (of size PCSCLITE_MAX_READERS_CONTEXTS) is send to the local pcsc lib and this lib is expecting the exact size of this array (there is no size check).
On xrdp size :
reader_state_bytes = sizeof(uds_client->readerStates);
init_stream(out_s, reader_state_bytes);
out_uint8a(out_s, uds_client->readerStates, reader_state_bytes);

and in the pcsc lib :
rv = MessageReceive(&readerStates, sizeof(readerStates), dwClientID); 
If the size of the array differs (below or over), it doesn't work (tested).
I really don't have any more idea to fix this. Even between RHEL7 and RHEL8, this value change...
Maybe make this dependency and the smartcard redirection channel optional in configure ?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1825,2021-03-05T16:47:10Z,,2022-04-28T11:01:23Z,OPEN,False,971,557,7,https://github.com/zorgluf,Smartcard implementation with PCSCLITE_CSOCK_NAME,11,[],https://github.com/neutrinolabs/xrdp/pull/1825,https://github.com/matt335672,19,https://github.com/neutrinolabs/xrdp/pull/1825#issuecomment-884788321,"Mainly based on the great work from jsorg71 (#963).
Fix issues with recent version of pcsc (1.8.8).
Merge with a more recent version of xrdp (0.9.14).
Made it working on RHEL7.9 with a gemalto MD840 and omnikey reader.
Feel free to suggest improvement, my dev skills are pretty low.","Thanks for your clear explanation of the MAX_READERS_CONTEXTS problem.
I think the situation is as follows. Please correct me if I'm wrong:-

At the moment smartcard processing doesn't work in the xrdp devel branch
The current design aims to emulate pcsd without introducing a dependency on pcsd
It's not really practical to emulate pcscd without having the pcsc-devel package installed

If that's the case, a sensible way forward seems to be to be:-

Introduce an optional dependency on pcsc-devel, so that users who do not need smartcard support (currently all of them) do not have to introduce the dependency.
Disable smartcard processing entirely if pcsc-devel is not present
Over time, replace some of the pcscd emulation code in xrdp with calls to the pcsc library, to reduce our dependency surface.

I'm not expecting you by any means to attempt this all on your own by the way - I'll be happy to help.
If that sounds reasonable to you, we can broaden this discussion out.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1825,2021-03-05T16:47:10Z,,2022-04-28T11:01:23Z,OPEN,False,971,557,7,https://github.com/zorgluf,Smartcard implementation with PCSCLITE_CSOCK_NAME,11,[],https://github.com/neutrinolabs/xrdp/pull/1825,https://github.com/EmperorArthur,20,https://github.com/neutrinolabs/xrdp/pull/1825#issuecomment-884831113,"Mainly based on the great work from jsorg71 (#963).
Fix issues with recent version of pcsc (1.8.8).
Merge with a more recent version of xrdp (0.9.14).
Made it working on RHEL7.9 with a gemalto MD840 and omnikey reader.
Feel free to suggest improvement, my dev skills are pretty low.","Might I suggest that everything except the MAX_READERS_CONTEXTS be merged.  That may give anyone using the official (non OS) release a working feature.
While I have not examined this in detail, changing a protocol implementation without adjusting a version or otherwise giving an indication to the other party is what I would consider a major bug.
As I said, I have not looked at this in detail. However, if xrdp is sending data to such a buggy program, then you will have to deal with the potential for the client and server to have different protocol versions.  And a host of other issues.
While I suggest ignoring it for this PR, you can also solve the issue by dynamically determining size at runtime.  Just start by sending one and keep incrementing the number until the recipient stops failing.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1825,2021-03-05T16:47:10Z,,2022-04-28T11:01:23Z,OPEN,False,971,557,7,https://github.com/zorgluf,Smartcard implementation with PCSCLITE_CSOCK_NAME,11,[],https://github.com/neutrinolabs/xrdp/pull/1825,https://github.com/matt335672,21,https://github.com/neutrinolabs/xrdp/pull/1825#issuecomment-884884014,"Mainly based on the great work from jsorg71 (#963).
Fix issues with recent version of pcsc (1.8.8).
Merge with a more recent version of xrdp (0.9.14).
Made it working on RHEL7.9 with a gemalto MD840 and omnikey reader.
Feel free to suggest improvement, my dev skills are pretty low.","Thanks for the suggestion @EmperorArthur
It's worth pointing out that the interface we're implementing here is not public - it's built in to the pcsc-lite project. I can see why the xrdp design has taken the route it has, but I'm personally not happy with it, hence my suggestion that we move towards using the pcsc-lite library if possible.
Also, I don't believe the approach you are also suggesting is going to work, as the data in question is sent in response to a client request. On the first failure we've lost the client.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1825,2021-03-05T16:47:10Z,,2022-04-28T11:01:23Z,OPEN,False,971,557,7,https://github.com/zorgluf,Smartcard implementation with PCSCLITE_CSOCK_NAME,11,[],https://github.com/neutrinolabs/xrdp/pull/1825,https://github.com/zorgluf,22,https://github.com/neutrinolabs/xrdp/pull/1825#issuecomment-891053907,"Mainly based on the great work from jsorg71 (#963).
Fix issues with recent version of pcsc (1.8.8).
Merge with a more recent version of xrdp (0.9.14).
Made it working on RHEL7.9 with a gemalto MD840 and omnikey reader.
Feel free to suggest improvement, my dev skills are pretty low.","I withdrew the patch with dependency against libpcsclite. Instead I suggest to fix the MAX_READERS value to 16, which is the ""official"" value PCSCLITE_MAX_READERS_CONTEXTS in libpcsclite.
For RHEL releases, this value has to be handle externaly with a patch, as what is made actually with libpcsclite.
At least it makes a ""working version"", that might interest some users.
@matt335672 : I totaly agree with you, the interface used to handle smartcard communication (internal socket protocol of libpcsclite and unsupported interface) is not a good and long term way to get the functionality. But the interface is quite close the way RDP handle smartcard redirection, maybe it was more convenient ?
An other way wight be to develop a PCSC virtual driver (like http://frankmorgner.github.io/vsmartcard/virtualsmartcard/README.html). But at first lecture, interfacing pcsc driver primitives and RDP smartcard channel need major rewrite. I will have a look... for an other pull...",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1825,2021-03-05T16:47:10Z,,2022-04-28T11:01:23Z,OPEN,False,971,557,7,https://github.com/zorgluf,Smartcard implementation with PCSCLITE_CSOCK_NAME,11,[],https://github.com/neutrinolabs/xrdp/pull/1825,https://github.com/matt335672,23,https://github.com/neutrinolabs/xrdp/pull/1825#issuecomment-894136885,"Mainly based on the great work from jsorg71 (#963).
Fix issues with recent version of pcsc (1.8.8).
Merge with a more recent version of xrdp (0.9.14).
Made it working on RHEL7.9 with a gemalto MD840 and omnikey reader.
Feel free to suggest improvement, my dev skills are pretty low.","Hi @zorgluf - thanks for sticking with this. I can't get to my Windows machine at the moment to test this, but I will do so as soon as I can.
@metalefty , @jsorg71 - I need some input from one of you on this. This PR moves us forward from where we are with smartcard support (which doesn't work at all at the moment), but more work will be needed in the future to support big-endian machines, and possibly to use pcsc-lite libraries directly to reduce the maintenance overhead (this is discussed in more detail above). Assuming the testing works out I'm happy to merge this as it is, but I'd appreciate your input before I do.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1825,2021-03-05T16:47:10Z,,2022-04-28T11:01:23Z,OPEN,False,971,557,7,https://github.com/zorgluf,Smartcard implementation with PCSCLITE_CSOCK_NAME,11,[],https://github.com/neutrinolabs/xrdp/pull/1825,https://github.com/metalefty,24,https://github.com/neutrinolabs/xrdp/pull/1825#issuecomment-904250345,"Mainly based on the great work from jsorg71 (#963).
Fix issues with recent version of pcsc (1.8.8).
Merge with a more recent version of xrdp (0.9.14).
Made it working on RHEL7.9 with a gemalto MD840 and omnikey reader.
Feel free to suggest improvement, my dev skills are pretty low.","@matt335672 Unfortunately, I've never used the smartcard feature. I can do very few things on this.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1825,2021-03-05T16:47:10Z,,2022-04-28T11:01:23Z,OPEN,False,971,557,7,https://github.com/zorgluf,Smartcard implementation with PCSCLITE_CSOCK_NAME,11,[],https://github.com/neutrinolabs/xrdp/pull/1825,https://github.com/matt335672,25,https://github.com/neutrinolabs/xrdp/pull/1825#issuecomment-904430879,"Mainly based on the great work from jsorg71 (#963).
Fix issues with recent version of pcsc (1.8.8).
Merge with a more recent version of xrdp (0.9.14).
Made it working on RHEL7.9 with a gemalto MD840 and omnikey reader.
Feel free to suggest improvement, my dev skills are pretty low.","@metalefty - understood
Would you be happy if I worked with @zorgluf on merging this straight after 0.9.17 is released? There's a lot to do here, but I think having something working for some people would be a great step forward.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1825,2021-03-05T16:47:10Z,,2022-04-28T11:01:23Z,OPEN,False,971,557,7,https://github.com/zorgluf,Smartcard implementation with PCSCLITE_CSOCK_NAME,11,[],https://github.com/neutrinolabs/xrdp/pull/1825,https://github.com/metalefty,26,https://github.com/neutrinolabs/xrdp/pull/1825#issuecomment-904433701,"Mainly based on the great work from jsorg71 (#963).
Fix issues with recent version of pcsc (1.8.8).
Merge with a more recent version of xrdp (0.9.14).
Made it working on RHEL7.9 with a gemalto MD840 and omnikey reader.
Feel free to suggest improvement, my dev skills are pretty low.","Yes, I'm happy with that.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1825,2021-03-05T16:47:10Z,,2022-04-28T11:01:23Z,OPEN,False,971,557,7,https://github.com/zorgluf,Smartcard implementation with PCSCLITE_CSOCK_NAME,11,[],https://github.com/neutrinolabs/xrdp/pull/1825,https://github.com/spstarr,27,https://github.com/neutrinolabs/xrdp/pull/1825#issuecomment-1111510483,"Mainly based on the great work from jsorg71 (#963).
Fix issues with recent version of pcsc (1.8.8).
Merge with a more recent version of xrdp (0.9.14).
Made it working on RHEL7.9 with a gemalto MD840 and omnikey reader.
Feel free to suggest improvement, my dev skills are pretty low.",What is the status of this PR?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1825,2021-03-05T16:47:10Z,,2022-04-28T11:01:23Z,OPEN,False,971,557,7,https://github.com/zorgluf,Smartcard implementation with PCSCLITE_CSOCK_NAME,11,[],https://github.com/neutrinolabs/xrdp/pull/1825,https://github.com/matt335672,28,https://github.com/neutrinolabs/xrdp/pull/1825#issuecomment-1112068786,"Mainly based on the great work from jsorg71 (#963).
Fix issues with recent version of pcsc (1.8.8).
Merge with a more recent version of xrdp (0.9.14).
Made it working on RHEL7.9 with a gemalto MD840 and omnikey reader.
Feel free to suggest improvement, my dev skills are pretty low.","It's not been looked at I'm afraid. We're looking at other things at the moment for the next major release, and there's no effort available to working on this one.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1826,2021-03-06T16:38:29Z,2021-03-15T10:41:23Z,2021-03-17T02:49:36Z,MERGED,True,977,738,24,https://github.com/aquesnel,Unify logging in common/*,3,[],https://github.com/neutrinolabs/xrdp/pull/1826,https://github.com/aquesnel,1,https://github.com/neutrinolabs/xrdp/pull/1826,"Follow-on pull request to #1633 which migrates all logging in the common directory to use the LOG() and LOG_DEVEL() macros.
Changes:

Migrate logging to the LOG() and LOG_DEVEL() macros (using text transform script)
error logs use the LOG macro
update code formatting with astyle for all files in common/*
remove DEBUG macro","Follow-on pull request to #1633 which migrates all logging in the common directory to use the LOG() and LOG_DEVEL() macros.
Changes:

Migrate logging to the LOG() and LOG_DEVEL() macros (using text transform script)
error logs use the LOG macro
update code formatting with astyle for all files in common/*
remove DEBUG macro",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1826,2021-03-06T16:38:29Z,2021-03-15T10:41:23Z,2021-03-17T02:49:36Z,MERGED,True,977,738,24,https://github.com/aquesnel,Unify logging in common/*,3,[],https://github.com/neutrinolabs/xrdp/pull/1826,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/1826#issuecomment-793682197,"Follow-on pull request to #1633 which migrates all logging in the common directory to use the LOG() and LOG_DEVEL() macros.
Changes:

Migrate logging to the LOG() and LOG_DEVEL() macros (using text transform script)
error logs use the LOG macro
update code formatting with astyle for all files in common/*
remove DEBUG macro","Apologies on the collision with xrdp_client_info.h. Since my PR also ran astyle on this file, it's a simple fix.
All looks absolutely fine, with just one question on common/pixman-region.c which is probably best answered by @metalefty
This file is originally from  https://cgit.freedesktop.org/pixman/tree/pixman/pixman-region.c, and if I understand it correctly, is intended for systems which do not necessarily have pixman installed.
If we astyle this file, it will make it harder to compare it with upstream for regressions. On the other hand, this file is pretty mature now, and if we had serious problems we'd have found them by now.
For reference, the last time this file was modified is got a review comment here.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1826,2021-03-06T16:38:29Z,2021-03-15T10:41:23Z,2021-03-17T02:49:36Z,MERGED,True,977,738,24,https://github.com/aquesnel,Unify logging in common/*,3,[],https://github.com/neutrinolabs/xrdp/pull/1826,https://github.com/aquesnel,3,https://github.com/neutrinolabs/xrdp/pull/1826#issuecomment-799077185,"Follow-on pull request to #1633 which migrates all logging in the common directory to use the LOG() and LOG_DEVEL() macros.
Changes:

Migrate logging to the LOG() and LOG_DEVEL() macros (using text transform script)
error logs use the LOG macro
update code formatting with astyle for all files in common/*
remove DEBUG macro","@matt335672 I've fixed up the merge conflicts.
For the common/pixman-region.c file, I agree that being able to compare it with upstream is valuable. The xrdp version of the file being astyle'd should not cause too much of a problem with comparing with upstream since when we compare the files, we can just run astyle on both of them before the comparison to filter out all of the formatting differences.
The build is broken because of an issue with the github action runner image (see: actions/virtual-environments#2917 ). I've verified that the root cause for the failed package install is the same for the xrdp build and the build in the issue, namely that the libx32gcc-s1 package is not available from the package archive configured in the VM (see xrdp build with apt-get debugging enabled: https://github.com/aquesnel/xrdp/runs/2109124288?check_suite_focus=true#step:4:296 )",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1826,2021-03-06T16:38:29Z,2021-03-15T10:41:23Z,2021-03-17T02:49:36Z,MERGED,True,977,738,24,https://github.com/aquesnel,Unify logging in common/*,3,[],https://github.com/neutrinolabs/xrdp/pull/1826,https://github.com/matt335672,4,https://github.com/neutrinolabs/xrdp/pull/1826#issuecomment-799313723,"Follow-on pull request to #1633 which migrates all logging in the common directory to use the LOG() and LOG_DEVEL() macros.
Changes:

Migrate logging to the LOG() and LOG_DEVEL() macros (using text transform script)
error logs use the LOG macro
update code formatting with astyle for all files in common/*
remove DEBUG macro","I'm happy with the common/pixman-region.c workaround you suggest, so I'll merge this one I think.
BTW, nice bit of detective work on the CI problem. You've made it clear that it's affecting users other than us, so I think we can leave it for a bit and see what happens. I've subscribed to the issue you've linked to above.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1833,2021-03-19T12:47:53Z,2021-03-22T10:19:21Z,2021-03-22T10:19:25Z,MERGED,True,0,1,1,https://github.com/matt335672,Remove openssl:i386 from 32-bit builds,1,[],https://github.com/neutrinolabs/xrdp/pull/1833,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1833,"We recently had an issue with 32-bit CI builds, spotted by @aquesnel in #1826.
The linked issue actions/virtual-environments#2917 which was undoubtedly a problem has been resolved, and yet our own builds were still breaking with this particular error from apt install:-
Some packages could not be installed. This may mean that you have
requested an impossible situation or if you are using the unstable
distribution that some required packages have not yet been created
or been moved out of Incoming.
The following information may help to resolve the situation:

The following packages have unmet dependencies:
 openjdk-8-jre-headless : Depends: ca-certificates-java but it is not going to be installed
E: Error, pkgProblemResolver::Resolve generated breaks, this may be caused by held packages.

A bit more triage shows the problem was related to the request to install openssl:i386 in scripts/install_xrdp_build_dependencies_with_apt.sh.
However, we shouldn't be installing this package anyway! openssl:amd64 is already installed and we are already installing the 32-bit library package libssl-dev:i386.
I've tried removing the openssl:i386 package and it seems to fix the build. Also, openssl is being used as part of the build. Actions log is here. From the log file for max features with gcc for 32-bit arch (legacy OS) :-
checking for OPENSSL... yes","We recently had an issue with 32-bit CI builds, spotted by @aquesnel in #1826.
The linked issue actions/virtual-environments#2917 which was undoubtedly a problem has been resolved, and yet our own builds were still breaking with this particular error from apt install:-
Some packages could not be installed. This may mean that you have
requested an impossible situation or if you are using the unstable
distribution that some required packages have not yet been created
or been moved out of Incoming.
The following information may help to resolve the situation:

The following packages have unmet dependencies:
 openjdk-8-jre-headless : Depends: ca-certificates-java but it is not going to be installed
E: Error, pkgProblemResolver::Resolve generated breaks, this may be caused by held packages.

A bit more triage shows the problem was related to the request to install openssl:i386 in scripts/install_xrdp_build_dependencies_with_apt.sh.
However, we shouldn't be installing this package anyway! openssl:amd64 is already installed and we are already installing the 32-bit library package libssl-dev:i386.
I've tried removing the openssl:i386 package and it seems to fix the build. Also, openssl is being used as part of the build. Actions log is here. From the log file for max features with gcc for 32-bit arch (legacy OS) :-
checking for OPENSSL... yes",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1836,2021-03-22T11:42:14Z,2021-03-22T14:28:20Z,2021-04-14T09:30:48Z,MERGED,True,1,1,1,https://github.com/matt335672,Bumped cppcheck to v2.4,1,[],https://github.com/neutrinolabs/xrdp/pull/1836,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1836,"cppcheck 2.4 was released on 2021-03-21.
A quick check showed no code changes are needed on our part to get a clean scan from cppcheck 2.3. Any reason not to upgrade anyone can think of?","cppcheck 2.4 was released on 2021-03-21.
A quick check showed no code changes are needed on our part to get a clean scan from cppcheck 2.3. Any reason not to upgrade anyone can think of?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1836,2021-03-22T11:42:14Z,2021-03-22T14:28:20Z,2021-04-14T09:30:48Z,MERGED,True,1,1,1,https://github.com/matt335672,Bumped cppcheck to v2.4,1,[],https://github.com/neutrinolabs/xrdp/pull/1836,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1836#issuecomment-804017481,"cppcheck 2.4 was released on 2021-03-21.
A quick check showed no code changes are needed on our part to get a clean scan from cppcheck 2.3. Any reason not to upgrade anyone can think of?",+1 Feel free to bump it.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1843,2021-03-26T04:40:58Z,2021-04-14T09:40:32Z,2021-04-16T09:09:37Z,MERGED,True,710,140,16,https://github.com/aquesnel,Adding logs to sesman/session.c,6,[],https://github.com/neutrinolabs/xrdp/pull/1843,https://github.com/aquesnel,1,https://github.com/neutrinolabs/xrdp/pull/1843,Adding logs to sesman/session.c to help a sys admin understand why a session failed to start.,Adding logs to sesman/session.c to help a sys admin understand why a session failed to start.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1843,2021-03-26T04:40:58Z,2021-04-14T09:40:32Z,2021-04-16T09:09:37Z,MERGED,True,710,140,16,https://github.com/aquesnel,Adding logs to sesman/session.c,6,[],https://github.com/neutrinolabs/xrdp/pull/1843,https://github.com/aquesnel,2,https://github.com/neutrinolabs/xrdp/pull/1843#issuecomment-809726953,Adding logs to sesman/session.c to help a sys admin understand why a session failed to start.,"@matt335672 , yes the plan is to use g_strnjoin in to implement the feedback I got in the pull request. I broke up my changes into several commits and then I only submitted the first commit to check that this change is working on all platforms.
I did discover that my changes are failing because of the -Wstringop-truncation warning introduced in gcc 8 which is why the build only fails on the newer platforms. The warning is definitely valid and a bug that I'm going to fix.
What I haven't figured out yet is why the makefile generated by autotools has the gcc output piped to /dev/null which seems to be the cause of there being no output in the build log.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1843,2021-03-26T04:40:58Z,2021-04-14T09:40:32Z,2021-04-16T09:09:37Z,MERGED,True,710,140,16,https://github.com/aquesnel,Adding logs to sesman/session.c,6,[],https://github.com/neutrinolabs/xrdp/pull/1843,https://github.com/aquesnel,3,https://github.com/neutrinolabs/xrdp/pull/1843#issuecomment-813069456,Adding logs to sesman/session.c to help a sys admin understand why a session failed to start.,"@metalefty and @matt335672 I've fixed up the code to address your feedback.
I did find out why the build was failing with no output. It turns out that the gcc -Wstringop-truncation check was only finding the issue when the cope was complied without -fPIC (position independent code). Libtool is what does the compilation of libraries, and libtool compiles the code both with and without -fPIC and pipes the results of compiling without -fPIC to /dev/null because the expectation is that if there is an errors from compiling the code, then there will be the same errors when compiled with and without -fPIC, so by default libtool hides the expected duplicate output. There is the libtool switch -no-suppress to change the behaviour and always show the output from both compilations.
I tried to -no-suppress to out config and makefiles, but as far as I can tell it can't be done. The -no-suppress flag is special and that it needs to be passed to libtool on the command line after the compiler path argument. The problem is that there is autotools variable which is applied to only libtool invocations which is passed after the compiler argument. The existing AM_LIBTOOLFLAGS and LIBTOOLFLAGS variables are passed to libtool before the compiler argument which makes it so that libtool fails. I also tried passing -no-suppress via AM_CFLAGS and CFLAGS which works for compiling the libraries but fails for  compiling the xrdp binaries (which don't use libtool).
Since this is a weird edge case and there is nothing clean that can be done, I'm just going to leave the compilation flags as is and hope that we don't keep seeing this weird edge case.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1843,2021-03-26T04:40:58Z,2021-04-14T09:40:32Z,2021-04-16T09:09:37Z,MERGED,True,710,140,16,https://github.com/aquesnel,Adding logs to sesman/session.c,6,[],https://github.com/neutrinolabs/xrdp/pull/1843,https://github.com/matt335672,4,https://github.com/neutrinolabs/xrdp/pull/1843#issuecomment-814017050,Adding logs to sesman/session.c to help a sys admin understand why a session failed to start.,"Nice bit of detective work on the libtool issue - that's really unexpected.
I had a quick play with this. I can suggest a partial solution, which is to build just the common library with -no-suppress:-
--- a/common/Makefile.am
+++ b/common/Makefile.am
@@ -32,7 +32,10 @@ if XRDP_DEBUG
 AM_CPPFLAGS += -DXRDP_DEBUG
 endif
 
-AM_CFLAGS = $(OPENSSL_CFLAGS)
+# -no-suppress is an automake-specific flag which is needed
+# to prevent us missing compiler errors in some circumstances
+# (see #1843)
+AM_CFLAGS = -no-suppress $(OPENSSL_CFLAGS)
 
 module_LTLIBRARIES = \
   libcommon.la
I agree it's not perfect, but given most of these problems are likely to be located in string_calls.c it might be worth considering.
Review to follow...",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1843,2021-03-26T04:40:58Z,2021-04-14T09:40:32Z,2021-04-16T09:09:37Z,MERGED,True,710,140,16,https://github.com/aquesnel,Adding logs to sesman/session.c,6,[],https://github.com/neutrinolabs/xrdp/pull/1843,https://github.com/aquesnel,5,https://github.com/neutrinolabs/xrdp/pull/1843#issuecomment-817143837,Adding logs to sesman/session.c to help a sys admin understand why a session failed to start.,"Hi @matt335672 ,
I've fixed up the code to address the feedback. There are a few of your comments that I responded to, so please let me know if you want me to make additional changes.
I've also rebased and squashed the changes onto devel.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1843,2021-03-26T04:40:58Z,2021-04-14T09:40:32Z,2021-04-16T09:09:37Z,MERGED,True,710,140,16,https://github.com/aquesnel,Adding logs to sesman/session.c,6,[],https://github.com/neutrinolabs/xrdp/pull/1843,https://github.com/aquesnel,6,https://github.com/neutrinolabs/xrdp/pull/1843#issuecomment-819225463,Adding logs to sesman/session.c to help a sys admin understand why a session failed to start.,@matt335672 I think this pull request is ready to merge now. Please let me know if there is anything else that needs to be fixed up.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1843,2021-03-26T04:40:58Z,2021-04-14T09:40:32Z,2021-04-16T09:09:37Z,MERGED,True,710,140,16,https://github.com/aquesnel,Adding logs to sesman/session.c,6,[],https://github.com/neutrinolabs/xrdp/pull/1843,https://github.com/matt335672,7,https://github.com/neutrinolabs/xrdp/pull/1843#issuecomment-819382566,Adding logs to sesman/session.c to help a sys admin understand why a session failed to start.,"@aquesnel - I managed to introduce a conflict by merging #1858 before this one! It seemed a bit rotten of me to ask you to rebase yet again, so I've added a merge commit to fix things.
Thanks so much for adding the check stuff - I think that's going to be very useful in the future.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1849,2021-03-31T10:42:00Z,2021-04-13T11:55:46Z,2021-04-13T11:55:51Z,MERGED,True,150,196,10,https://github.com/matt335672,Allow DISPLAY=:0 for chansrv,3,[],https://github.com/neutrinolabs/xrdp/pull/1849,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1849,"While triaging #1846, I noticed that chansrv won't run if the DISPLAY is :0
This prevents the following use case being possible:-

User starts console session
User runs Vino/x11vnc/whatever to expose console session on port 5900 (VNC).
User runs xrdp-chansrv in console session
User uses chansrvport=/path/to/xrdp_chansrv_socket_0  in xrdp.ini to connect to chansrv while connecting to the existing VNC session on port 5900.

This doesn't sound like a bad use-case to me. Am I missing something?
This PR allows chansrv to connect to DISPLAY 0, and also cleans up the function get_display_num_from_display().
Also, shall I add code to xrdp_mm.c to default the path to the socks dir, so the user can just specify xrdp_chansrv_socket_0 rather than needing the socks dir path which is set at compile time?
Thanks.","While triaging #1846, I noticed that chansrv won't run if the DISPLAY is :0
This prevents the following use case being possible:-

User starts console session
User runs Vino/x11vnc/whatever to expose console session on port 5900 (VNC).
User runs xrdp-chansrv in console session
User uses chansrvport=/path/to/xrdp_chansrv_socket_0  in xrdp.ini to connect to chansrv while connecting to the existing VNC session on port 5900.

This doesn't sound like a bad use-case to me. Am I missing something?
This PR allows chansrv to connect to DISPLAY 0, and also cleans up the function get_display_num_from_display().
Also, shall I add code to xrdp_mm.c to default the path to the socks dir, so the user can just specify xrdp_chansrv_socket_0 rather than needing the socks dir path which is set at compile time?
Thanks.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1849,2021-03-31T10:42:00Z,2021-04-13T11:55:46Z,2021-04-13T11:55:51Z,MERGED,True,150,196,10,https://github.com/matt335672,Allow DISPLAY=:0 for chansrv,3,[],https://github.com/neutrinolabs/xrdp/pull/1849,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1849#issuecomment-811067911,"While triaging #1846, I noticed that chansrv won't run if the DISPLAY is :0
This prevents the following use case being possible:-

User starts console session
User runs Vino/x11vnc/whatever to expose console session on port 5900 (VNC).
User runs xrdp-chansrv in console session
User uses chansrvport=/path/to/xrdp_chansrv_socket_0  in xrdp.ini to connect to chansrv while connecting to the existing VNC session on port 5900.

This doesn't sound like a bad use-case to me. Am I missing something?
This PR allows chansrv to connect to DISPLAY 0, and also cleans up the function get_display_num_from_display().
Also, shall I add code to xrdp_mm.c to default the path to the socks dir, so the user can just specify xrdp_chansrv_socket_0 rather than needing the socks dir path which is set at compile time?
Thanks.","This doesn't sound like a bad use-case to me. Am I missing something?

I think that is a valid use case.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1849,2021-03-31T10:42:00Z,2021-04-13T11:55:46Z,2021-04-13T11:55:51Z,MERGED,True,150,196,10,https://github.com/matt335672,Allow DISPLAY=:0 for chansrv,3,[],https://github.com/neutrinolabs/xrdp/pull/1849,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/1849#issuecomment-811633263,"While triaging #1846, I noticed that chansrv won't run if the DISPLAY is :0
This prevents the following use case being possible:-

User starts console session
User runs Vino/x11vnc/whatever to expose console session on port 5900 (VNC).
User runs xrdp-chansrv in console session
User uses chansrvport=/path/to/xrdp_chansrv_socket_0  in xrdp.ini to connect to chansrv while connecting to the existing VNC session on port 5900.

This doesn't sound like a bad use-case to me. Am I missing something?
This PR allows chansrv to connect to DISPLAY 0, and also cleans up the function get_display_num_from_display().
Also, shall I add code to xrdp_mm.c to default the path to the socks dir, so the user can just specify xrdp_chansrv_socket_0 rather than needing the socks dir path which is set at compile time?
Thanks.","Also, shall I add code to xrdp_mm.c to default the path to the socks dir, so the user can just specify xrdp_chansrv_socket_0 rather than needing the socks dir path which is set at compile time?

I think this is also a good idea.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1849,2021-03-31T10:42:00Z,2021-04-13T11:55:46Z,2021-04-13T11:55:51Z,MERGED,True,150,196,10,https://github.com/matt335672,Allow DISPLAY=:0 for chansrv,3,[],https://github.com/neutrinolabs/xrdp/pull/1849,https://github.com/matt335672,4,https://github.com/neutrinolabs/xrdp/pull/1849#issuecomment-811942807,"While triaging #1846, I noticed that chansrv won't run if the DISPLAY is :0
This prevents the following use case being possible:-

User starts console session
User runs Vino/x11vnc/whatever to expose console session on port 5900 (VNC).
User runs xrdp-chansrv in console session
User uses chansrvport=/path/to/xrdp_chansrv_socket_0  in xrdp.ini to connect to chansrv while connecting to the existing VNC session on port 5900.

This doesn't sound like a bad use-case to me. Am I missing something?
This PR allows chansrv to connect to DISPLAY 0, and also cleans up the function get_display_num_from_display().
Also, shall I add code to xrdp_mm.c to default the path to the socks dir, so the user can just specify xrdp_chansrv_socket_0 rather than needing the socks dir path which is set at compile time?
Thanks.","I've also moved get_display_num_from_display() to string_calls::g_get_display_num_from_display() as I realised this was common code.
chansrvport can now be set to a string (as before), or to DISPLAY(n) to connect to xrdp-chansrv for DISPLAY=:n. Manpages updated.
For testing, I've used this stanza in xrdp.ini:-
[localvnc]
name=localvnc
lib=libvnc.so
ip=localhost
port=5900
#username=ask
password=
pamusername=mjb
pampassword=ask
pamsessionmng=127.0.0.1
chansrvport=DISPLAY(0)

I then ran x11vnc -N -forever -nopw and xrdp-chansrv from the command line in an active session. I could connect to the session, and xrdp-chansrv appeared to be working normally.
One irritation I've found is that if the user ends the session, xrdp-chansrv is killed quickly and doesn't get a chance to unmount the shared filesystem. It's recoverable - the user needs to call fusermount -u to fix this before starting another session.
I'd appreciate if people think this is good enough to push into devel in this state (once reviews are done). I'll add a Wiki page for it before v0.9.16.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1849,2021-03-31T10:42:00Z,2021-04-13T11:55:46Z,2021-04-13T11:55:51Z,MERGED,True,150,196,10,https://github.com/matt335672,Allow DISPLAY=:0 for chansrv,3,[],https://github.com/neutrinolabs/xrdp/pull/1849,https://github.com/metalefty,5,https://github.com/neutrinolabs/xrdp/pull/1849#issuecomment-818398250,"While triaging #1846, I noticed that chansrv won't run if the DISPLAY is :0
This prevents the following use case being possible:-

User starts console session
User runs Vino/x11vnc/whatever to expose console session on port 5900 (VNC).
User runs xrdp-chansrv in console session
User uses chansrvport=/path/to/xrdp_chansrv_socket_0  in xrdp.ini to connect to chansrv while connecting to the existing VNC session on port 5900.

This doesn't sound like a bad use-case to me. Am I missing something?
This PR allows chansrv to connect to DISPLAY 0, and also cleans up the function get_display_num_from_display().
Also, shall I add code to xrdp_mm.c to default the path to the socks dir, so the user can just specify xrdp_chansrv_socket_0 rather than needing the socks dir path which is set at compile time?
Thanks.",Unmounting of FUSE file systems should be more robust but I think this is not a regression of this PR. I'm fine with shipping this to v0.9.16.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1856,2021-04-09T09:15:51Z,2021-04-12T09:10:10Z,2021-04-16T09:56:22Z,MERGED,True,9,4,3,https://github.com/matt335672,Enable FUSE in FreeBSD cirrus build,1,[],https://github.com/neutrinolabs/xrdp/pull/1856,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1856,"Enables FUSE for the Cirrus FreeBSD CI build.
Also partially addresses the aspects of Debian bug #983843 involving their CI build on the kfreebsd branches.
I haven't tested this code on FreeBSD yet given where it is on the platform-support-tier. Despite that, is this worth adding in to the CI system, do people think?","Enables FUSE for the Cirrus FreeBSD CI build.
Also partially addresses the aspects of Debian bug #983843 involving their CI build on the kfreebsd branches.
I haven't tested this code on FreeBSD yet given where it is on the platform-support-tier. Despite that, is this worth adding in to the CI system, do people think?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1856,2021-04-09T09:15:51Z,2021-04-12T09:10:10Z,2021-04-16T09:56:22Z,MERGED,True,9,4,3,https://github.com/matt335672,Enable FUSE in FreeBSD cirrus build,1,[],https://github.com/neutrinolabs/xrdp/pull/1856,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1856#issuecomment-817496938,"Enables FUSE for the Cirrus FreeBSD CI build.
Also partially addresses the aspects of Debian bug #983843 involving their CI build on the kfreebsd branches.
I haven't tested this code on FreeBSD yet given where it is on the platform-support-tier. Despite that, is this worth adding in to the CI system, do people think?","I'm fine with enabling FUSE in CI build. However, I confirmed FUSE is not working on FreeBSD. I still have some more things to work on.  So please keep in mind this doesn't directly mean FUSE is available on FreeBSD.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1856,2021-04-09T09:15:51Z,2021-04-12T09:10:10Z,2021-04-16T09:56:22Z,MERGED,True,9,4,3,https://github.com/matt335672,Enable FUSE in FreeBSD cirrus build,1,[],https://github.com/neutrinolabs/xrdp/pull/1856,https://github.com/matt335672,3,https://github.com/neutrinolabs/xrdp/pull/1856#issuecomment-817634390,"Enables FUSE for the Cirrus FreeBSD CI build.
Also partially addresses the aspects of Debian bug #983843 involving their CI build on the kfreebsd branches.
I haven't tested this code on FreeBSD yet given where it is on the platform-support-tier. Despite that, is this worth adding in to the CI system, do people think?",I suspected it might need a bit of work to fix it - thanks for the confirmation.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1856,2021-04-09T09:15:51Z,2021-04-12T09:10:10Z,2021-04-16T09:56:22Z,MERGED,True,9,4,3,https://github.com/matt335672,Enable FUSE in FreeBSD cirrus build,1,[],https://github.com/neutrinolabs/xrdp/pull/1856,https://github.com/matt335672,4,https://github.com/neutrinolabs/xrdp/pull/1856#issuecomment-821063285,"Enables FUSE for the Cirrus FreeBSD CI build.
Also partially addresses the aspects of Debian bug #983843 involving their CI build on the kfreebsd branches.
I haven't tested this code on FreeBSD yet given where it is on the platform-support-tier. Despite that, is this worth adding in to the CI system, do people think?","@metalefty - could you try fuse on FreeBSD again, but run this script first:-
#!/bin/sh

status=0

# Checvk the kernel module is loaded
if [ ! -c /dev/fuse ]; then
    kldload fusefs || {
	status=$?
        echo ""** Unable to load kernel module 'fusefs'"" >&2
    }
fi

# Users allowed to mount file systems?
if [ $status -eq 0 -a \
     $(sysctl -n vfs.usermount) -eq 0 ]; then
    sysctl vfs.usermount=1 >/dev/null || {
	status=$?
        echo ""** Unable to load set vfs.usermount=1"" >&2
    }
fi

exit $status
At least on FreeBSD 12.2, it seems to be working quite well.
I'm not able to run the xrdp configure script on it for some reason, but other than that it looks reasonably useful.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1858,2021-04-13T09:44:30Z,2021-04-14T08:47:25Z,2021-04-14T08:47:25Z,MERGED,True,4,4,2,https://github.com/metalefty,do not install test & development tool,1,[],https://github.com/neutrinolabs/xrdp/pull/1858,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1858,"These tools shouldn't be delivered to end-users, included in distro
packages. Also the execuable names ""memtest"" and ""tcp_proxy"" are too
general to install into sbin dir.","These tools shouldn't be delivered to end-users, included in distro
packages. Also the execuable names ""memtest"" and ""tcp_proxy"" are too
general to install into sbin dir.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1860,2021-04-15T13:40:23Z,2021-04-26T05:15:44Z,2021-04-26T05:15:48Z,MERGED,True,28,8,4,https://github.com/metalefty,Relax dependency checking on check and miscellaneous fixes for pkg-config usage,5,[],https://github.com/neutrinolabs/xrdp/pull/1860,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1860,"Fix for pkg-config usage:

rely on pkg-config when finding check
add missing CFLAGS when using check obtained via pkg-config

Adjust unit tests:

relax dependency checking on check (check is not necessary if unit tests are not run)
make distcheck should only succeed if check is installed","Fix for pkg-config usage:

rely on pkg-config when finding check
add missing CFLAGS when using check obtained via pkg-config

Adjust unit tests:

relax dependency checking on check (check is not necessary if unit tests are not run)
make distcheck should only succeed if check is installed",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1860,2021-04-15T13:40:23Z,2021-04-26T05:15:44Z,2021-04-26T05:15:48Z,MERGED,True,28,8,4,https://github.com/metalefty,Relax dependency checking on check and miscellaneous fixes for pkg-config usage,5,[],https://github.com/neutrinolabs/xrdp/pull/1860,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/1860#issuecomment-821080408,"Fix for pkg-config usage:

rely on pkg-config when finding check
add missing CFLAGS when using check obtained via pkg-config

Adjust unit tests:

relax dependency checking on check (check is not necessary if unit tests are not run)
make distcheck should only succeed if check is installed","I think this is generally a good idea, just in case some platform doesn't have check available.
The CI problem seems to be that make distcheck recurses into DIST_SUBDIRS and not just SUBDIRS. Because it runs configure with default args, and because this doesn't initialise CHECK_LIBS, the link fails.
It's a tricky one. Defaulting --enable-tests to true should fix it, as would skipping the recursion in tests/Makefile.am. I'd personally prefer the first, as make distcheck should always run the checks. What do you think?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1860,2021-04-15T13:40:23Z,2021-04-26T05:15:44Z,2021-04-26T05:15:48Z,MERGED,True,28,8,4,https://github.com/metalefty,Relax dependency checking on check and miscellaneous fixes for pkg-config usage,5,[],https://github.com/neutrinolabs/xrdp/pull/1860,https://github.com/matt335672,3,https://github.com/neutrinolabs/xrdp/pull/1860#issuecomment-821084895,"Fix for pkg-config usage:

rely on pkg-config when finding check
add missing CFLAGS when using check obtained via pkg-config

Adjust unit tests:

relax dependency checking on check (check is not necessary if unit tests are not run)
make distcheck should only succeed if check is installed",There's some more useful info here [gnu.org] which give us a few more options.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1860,2021-04-15T13:40:23Z,2021-04-26T05:15:44Z,2021-04-26T05:15:48Z,MERGED,True,28,8,4,https://github.com/metalefty,Relax dependency checking on check and miscellaneous fixes for pkg-config usage,5,[],https://github.com/neutrinolabs/xrdp/pull/1860,https://github.com/aquesnel,4,https://github.com/neutrinolabs/xrdp/pull/1860#issuecomment-821168993,"Fix for pkg-config usage:

rely on pkg-config when finding check
add missing CFLAGS when using check obtained via pkg-config

Adjust unit tests:

relax dependency checking on check (check is not necessary if unit tests are not run)
make distcheck should only succeed if check is installed",I also think that running the unit tests should be the default. To make it easier on people trying to install xrdp without libcheck I would suggest adding to the error message for a failure of PKG_CHECK_MODULES([Check]) to say that the dependency on libcheck can be removed by adding --disable-unittests to configure.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1860,2021-04-15T13:40:23Z,2021-04-26T05:15:44Z,2021-04-26T05:15:48Z,MERGED,True,28,8,4,https://github.com/metalefty,Relax dependency checking on check and miscellaneous fixes for pkg-config usage,5,[],https://github.com/neutrinolabs/xrdp/pull/1860,https://github.com/metalefty,5,https://github.com/neutrinolabs/xrdp/pull/1860#issuecomment-821173825,"Fix for pkg-config usage:

rely on pkg-config when finding check
add missing CFLAGS when using check obtained via pkg-config

Adjust unit tests:

relax dependency checking on check (check is not necessary if unit tests are not run)
make distcheck should only succeed if check is installed",@aquesnel That sounds good.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1860,2021-04-15T13:40:23Z,2021-04-26T05:15:44Z,2021-04-26T05:15:48Z,MERGED,True,28,8,4,https://github.com/metalefty,Relax dependency checking on check and miscellaneous fixes for pkg-config usage,5,[],https://github.com/neutrinolabs/xrdp/pull/1860,https://github.com/aquesnel,6,https://github.com/neutrinolabs/xrdp/pull/1860#issuecomment-821178809,"Fix for pkg-config usage:

rely on pkg-config when finding check
add missing CFLAGS when using check obtained via pkg-config

Adjust unit tests:

relax dependency checking on check (check is not necessary if unit tests are not run)
make distcheck should only succeed if check is installed","To check that installing xrdp works without the check library installed, I suggest that  distcheck should be enabled for the min builds with the unit tests disabled and the check library not installed. I'm not sure why the decision was made to have the CI min builds not run make distcheck .",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1860,2021-04-15T13:40:23Z,2021-04-26T05:15:44Z,2021-04-26T05:15:48Z,MERGED,True,28,8,4,https://github.com/metalefty,Relax dependency checking on check and miscellaneous fixes for pkg-config usage,5,[],https://github.com/neutrinolabs/xrdp/pull/1860,https://github.com/metalefty,7,https://github.com/neutrinolabs/xrdp/pull/1860#issuecomment-821204323,"Fix for pkg-config usage:

rely on pkg-config when finding check
add missing CFLAGS when using check obtained via pkg-config

Adjust unit tests:

relax dependency checking on check (check is not necessary if unit tests are not run)
make distcheck should only succeed if check is installed","This also will work. My position is default off. I think unit tests are developers' stuff. It would be enough for developers to turn on unit tests intentionally.  That will not put users in unnecessary trouble.  However, I'm not in a strong position on this. To guide users to add --disable-config in configure error message is also a preferable alternative.
diff --git a/Makefile.am b/Makefile.am
index 242615d1..1d58faa9 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -1,7 +1,8 @@
 ACLOCAL_AMFLAGS = -I m4
 AM_DISTCHECK_CONFIGURE_FLAGS = \
   --without-systemdsystemunitdir \
-  --enable-strict-locations
+  --enable-strict-locations \
+  --enable-tests

 EXTRA_DIST = \
   COPYING \
diff --git a/libpainter b/libpainter

I'm not sure why the decision was made to have the CI min builds not run make distcheck .

I'm fine with turning on make disstcheck on min builds.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1860,2021-04-15T13:40:23Z,2021-04-26T05:15:44Z,2021-04-26T05:15:48Z,MERGED,True,28,8,4,https://github.com/metalefty,Relax dependency checking on check and miscellaneous fixes for pkg-config usage,5,[],https://github.com/neutrinolabs/xrdp/pull/1860,https://github.com/matt335672,8,https://github.com/neutrinolabs/xrdp/pull/1860#issuecomment-822520075,"Fix for pkg-config usage:

rely on pkg-config when finding check
add missing CFLAGS when using check obtained via pkg-config

Adjust unit tests:

relax dependency checking on check (check is not necessary if unit tests are not run)
make distcheck should only succeed if check is installed","The GNU guidelines for make distcheck suggest that a make check should be included. I don't think we should deviate from this unless we have a good reason.
Another solution is to make --enable-tests be on off or auto, with the default being auto. If set to auto we enable tests only if we find that check is installed. That would work fine for CI builds and make distcheck. I've got no idea how easy this would be to set up in the auto tools however.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1860,2021-04-15T13:40:23Z,2021-04-26T05:15:44Z,2021-04-26T05:15:48Z,MERGED,True,28,8,4,https://github.com/metalefty,Relax dependency checking on check and miscellaneous fixes for pkg-config usage,5,[],https://github.com/neutrinolabs/xrdp/pull/1860,https://github.com/aquesnel,9,https://github.com/neutrinolabs/xrdp/pull/1860#issuecomment-822788621,"Fix for pkg-config usage:

rely on pkg-config when finding check
add missing CFLAGS when using check obtained via pkg-config

Adjust unit tests:

relax dependency checking on check (check is not necessary if unit tests are not run)
make distcheck should only succeed if check is installed","@metalefty my thought process for defaulting the tests to enabled is the following:
The tests are not just a developer facing tool to ensure that new commits don't break functionality, the tests are also a package maintainer tool in the sense of ""user acceptance tests"". For package maintainers/publishers they want to know that the package they are building will work for their users. We should endeavor to simplify the job of the package maintainer by reducing the special knowledge needed to meet their goal of delivering a working package to their users. In this case the special knowledge is the custom --enable-tests configure option. Therefore I think that the tests should be enabled by default. In the case where a user is compiling xrdp for themselves, I think they should be treated as a package maintainer with an audience of one user.
Now that I've written out my argument, I realized that I'm more concerned about something else than the default state of compiling and running the tests. I'm concerned that running make check will succeed when the tests are not compiled. The reason I'm concerned is when make check succeeds then the user should be confident that as best as we know, xrdp will work as expected. So make check not running the tests is a silent failure and there is no feedback to the user that the tests did not run, and that they should take some action to get the tests to run (eg. configure with tests enabled). I believe that we should think about the --enable-tests flag as a way to enable compilation without the libcheck dependency, but not that it will cause make check to succeed.
@matt335672 l like the idea of an auto value for the tests flag, and I think that with this auto value the issue of the tests silently not running becomes a bigger issue because of the lack of feedback to the user.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1860,2021-04-15T13:40:23Z,2021-04-26T05:15:44Z,2021-04-26T05:15:48Z,MERGED,True,28,8,4,https://github.com/metalefty,Relax dependency checking on check and miscellaneous fixes for pkg-config usage,5,[],https://github.com/neutrinolabs/xrdp/pull/1860,https://github.com/metalefty,10,https://github.com/neutrinolabs/xrdp/pull/1860#issuecomment-822949489,"Fix for pkg-config usage:

rely on pkg-config when finding check
add missing CFLAGS when using check obtained via pkg-config

Adjust unit tests:

relax dependency checking on check (check is not necessary if unit tests are not run)
make distcheck should only succeed if check is installed","@aquesnel Thanks for the follow-up. I'll go on with ""default on"".",True,{'THUMBS_UP': ['https://github.com/aquesnel']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1860,2021-04-15T13:40:23Z,2021-04-26T05:15:44Z,2021-04-26T05:15:48Z,MERGED,True,28,8,4,https://github.com/metalefty,Relax dependency checking on check and miscellaneous fixes for pkg-config usage,5,[],https://github.com/neutrinolabs/xrdp/pull/1860,https://github.com/matt335672,11,https://github.com/neutrinolabs/xrdp/pull/1860#issuecomment-823149795,"Fix for pkg-config usage:

rely on pkg-config when finding check
add missing CFLAGS when using check obtained via pkg-config

Adjust unit tests:

relax dependency checking on check (check is not necessary if unit tests are not run)
make distcheck should only succeed if check is installed","I absolutely agree that make check should only succeed if tests are run, and if they all complete successfully.
If we did go down the auto route, this should still be the case. So in this instance make distcheck will only succeed if check is installed.",True,{'THUMBS_UP': ['https://github.com/aquesnel']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1860,2021-04-15T13:40:23Z,2021-04-26T05:15:44Z,2021-04-26T05:15:48Z,MERGED,True,28,8,4,https://github.com/metalefty,Relax dependency checking on check and miscellaneous fixes for pkg-config usage,5,[],https://github.com/neutrinolabs/xrdp/pull/1860,https://github.com/metalefty,12,https://github.com/neutrinolabs/xrdp/pull/1860#issuecomment-823341961,"Fix for pkg-config usage:

rely on pkg-config when finding check
add missing CFLAGS when using check obtained via pkg-config

Adjust unit tests:

relax dependency checking on check (check is not necessary if unit tests are not run)
make distcheck should only succeed if check is installed","@matt335672 @aquesnel
Thank you both. I've updated it to auto. And make distcheck are always to be run with unit tests.
However,  I'm not sure whether make check only succeeds if tests are run, and if they all complete successfully.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1860,2021-04-15T13:40:23Z,2021-04-26T05:15:44Z,2021-04-26T05:15:48Z,MERGED,True,28,8,4,https://github.com/metalefty,Relax dependency checking on check and miscellaneous fixes for pkg-config usage,5,[],https://github.com/neutrinolabs/xrdp/pull/1860,https://github.com/metalefty,13,https://github.com/neutrinolabs/xrdp/pull/1860#issuecomment-826101503,"Fix for pkg-config usage:

rely on pkg-config when finding check
add missing CFLAGS when using check obtained via pkg-config

Adjust unit tests:

relax dependency checking on check (check is not necessary if unit tests are not run)
make distcheck should only succeed if check is installed",@matt335672 Updated the description of --enable-tests.  Anything else for this PR before the release?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1863,2021-04-24T13:09:58Z,2021-04-24T14:46:58Z,2021-04-24T14:47:02Z,MERGED,True,12,11,1,https://github.com/metalefty,revise README,2,[],https://github.com/neutrinolabs/xrdp/pull/1863,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1863,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1866,2021-04-26T03:00:41Z,2021-04-26T03:50:32Z,2021-04-26T03:51:08Z,MERGED,True,2,2,2,https://github.com/metalefty,Demote some too verbose logs to TRACE level,1,[],https://github.com/neutrinolabs/xrdp/pull/1866,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1866,Fixes #1864.,Fixes #1864.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1872,2021-04-29T13:21:15Z,2021-04-29T15:47:15Z,2021-04-29T15:48:33Z,MERGED,True,15,1,1,https://github.com/metalefty,neutrinordp: avoid pampassword leakage,2,[],https://github.com/neutrinolabs/xrdp/pull/1872,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1872,"The leakage does not occur in the most usual use case of xrdp.
It occurs in NeutrinoRDP proxy mode with PAM authentication enabled.
Reported by @TOMATO-ONE

Note: It shouldn't be a problem in the most use case of xrdp and it is not a vulnerability such as remote code execution. So I've raised the fix as a usual public PR.","The leakage does not occur in the most usual use case of xrdp.
It occurs in NeutrinoRDP proxy mode with PAM authentication enabled.
Reported by @TOMATO-ONE

Note: It shouldn't be a problem in the most use case of xrdp and it is not a vulnerability such as remote code execution. So I've raised the fix as a usual public PR.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1872,2021-04-29T13:21:15Z,2021-04-29T15:47:15Z,2021-04-29T15:48:33Z,MERGED,True,15,1,1,https://github.com/metalefty,neutrinordp: avoid pampassword leakage,2,[],https://github.com/neutrinolabs/xrdp/pull/1872,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1872#issuecomment-829234384,"The leakage does not occur in the most usual use case of xrdp.
It occurs in NeutrinoRDP proxy mode with PAM authentication enabled.
Reported by @TOMATO-ONE

Note: It shouldn't be a problem in the most use case of xrdp and it is not a vulnerability such as remote code execution. So I've raised the fix as a usual public PR.",CC: @aquesnel,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1872,2021-04-29T13:21:15Z,2021-04-29T15:47:15Z,2021-04-29T15:48:33Z,MERGED,True,15,1,1,https://github.com/metalefty,neutrinordp: avoid pampassword leakage,2,[],https://github.com/neutrinolabs/xrdp/pull/1872,https://github.com/aquesnel,3,https://github.com/neutrinolabs/xrdp/pull/1872#issuecomment-829287499,"The leakage does not occur in the most usual use case of xrdp.
It occurs in NeutrinoRDP proxy mode with PAM authentication enabled.
Reported by @TOMATO-ONE

Note: It shouldn't be a problem in the most use case of xrdp and it is not a vulnerability such as remote code execution. So I've raised the fix as a usual public PR.","Fyi: as I was making the longing changes I tried to omit explicit security sensitive data from the logs, but when logging unknown data I decided that logging with LOG_DEVEL and TRACE it was ok to log sensitive data since these settings should not be used in a production setting.
If you disagree with decision then maybe we should open an issue to revive logging for all unknown fields for potentially sensitive data.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1872,2021-04-29T13:21:15Z,2021-04-29T15:47:15Z,2021-04-29T15:48:33Z,MERGED,True,15,1,1,https://github.com/metalefty,neutrinordp: avoid pampassword leakage,2,[],https://github.com/neutrinolabs/xrdp/pull/1872,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/1872#issuecomment-829343012,"The leakage does not occur in the most usual use case of xrdp.
It occurs in NeutrinoRDP proxy mode with PAM authentication enabled.
Reported by @TOMATO-ONE

Note: It shouldn't be a problem in the most use case of xrdp and it is not a vulnerability such as remote code execution. So I've raised the fix as a usual public PR.","Thanks for the careful work on logging change.

I decided that logging with LOG_DEVEL and TRACE it was ok to log sensitive data since these settings should not be used in a production setting.

I'm happy with this method. It would be much better if we add a note that LOG_DEVEL and TRACE level might dump sensitive datum and should not be used in a production setting.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1872,2021-04-29T13:21:15Z,2021-04-29T15:47:15Z,2021-04-29T15:48:33Z,MERGED,True,15,1,1,https://github.com/metalefty,neutrinordp: avoid pampassword leakage,2,[],https://github.com/neutrinolabs/xrdp/pull/1872,https://github.com/metalefty,5,https://github.com/neutrinolabs/xrdp/pull/1872#issuecomment-829353372,"The leakage does not occur in the most usual use case of xrdp.
It occurs in NeutrinoRDP proxy mode with PAM authentication enabled.
Reported by @TOMATO-ONE

Note: It shouldn't be a problem in the most use case of xrdp and it is not a vulnerability such as remote code execution. So I've raised the fix as a usual public PR.","Merged, thanks @TOMATO-ONE !
The fix will be included in the next release 0.9.16, will be released soon. Also Thank you for the correct method of reporting security issues.",True,{'THUMBS_UP': ['https://github.com/TOMATO-ONE']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1874,2021-04-30T11:48:28Z,2021-04-30T11:57:55Z,2021-04-30T11:57:59Z,MERGED,True,47,2,3,https://github.com/metalefty,Release v0.9.16,3,[],https://github.com/neutrinolabs/xrdp/pull/1874,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1874,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1875,2021-05-03T18:13:00Z,2021-05-13T15:02:40Z,2021-05-13T16:16:02Z,MERGED,True,54,10,3,https://github.com/TOMATO-ONE,"neutrinordp: Log the IP address, port, and user name of the NeutrioRDP Proxy connection.",1,[],https://github.com/neutrinolabs/xrdp/pull/1875,https://github.com/TOMATO-ONE,1,https://github.com/neutrinolabs/xrdp/pull/1875,"#1873
I made sure to log the IP address, port, and user name of the NeutrioRDP Proxy connection.
The following will be recorded in xrdp.log.
[20210503-17:07:11] [INFO ] NeutrinoRDP: connection [Success], destination [192.168.102.101:3389], username [user], source [192.168.0.212:62118], pamusername [xrdp], pid [7443]
I don't know the C language very well.
I made the patch as an example.
If you have better code, please let me know.
I would like to log the disconnect as well.
Where should I add the code in xrdp-neutrinordp.c?
Please advise.
Best regards","#1873
I made sure to log the IP address, port, and user name of the NeutrioRDP Proxy connection.
The following will be recorded in xrdp.log.
[20210503-17:07:11] [INFO ] NeutrinoRDP: connection [Success], destination [192.168.102.101:3389], username [user], source [192.168.0.212:62118], pamusername [xrdp], pid [7443]
I don't know the C language very well.
I made the patch as an example.
If you have better code, please let me know.
I would like to log the disconnect as well.
Where should I add the code in xrdp-neutrinordp.c?
Please advise.
Best regards",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1875,2021-05-03T18:13:00Z,2021-05-13T15:02:40Z,2021-05-13T16:16:02Z,MERGED,True,54,10,3,https://github.com/TOMATO-ONE,"neutrinordp: Log the IP address, port, and user name of the NeutrioRDP Proxy connection.",1,[],https://github.com/neutrinolabs/xrdp/pull/1875,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/1875#issuecomment-832606061,"#1873
I made sure to log the IP address, port, and user name of the NeutrioRDP Proxy connection.
The following will be recorded in xrdp.log.
[20210503-17:07:11] [INFO ] NeutrinoRDP: connection [Success], destination [192.168.102.101:3389], username [user], source [192.168.0.212:62118], pamusername [xrdp], pid [7443]
I don't know the C language very well.
I made the patch as an example.
If you have better code, please let me know.
I would like to log the disconnect as well.
Where should I add the code in xrdp-neutrinordp.c?
Please advise.
Best regards","Hi @TOMATO-ONE
Firstly, thanks very much for taking the time to contribute to xrdp.
I'll add some review comments to your code shortly. Here are a couple of other things:-

We have a coding style on the wiki. Please have a look at it. In particular, we use spaces for indents rather than tabs.
You can log a disconnect in the mod_exit() function. This will be called whether or not the connect was successful. I suggest you add some logging there and see what happens. Come back to me if you have any questions.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1875,2021-05-03T18:13:00Z,2021-05-13T15:02:40Z,2021-05-13T16:16:02Z,MERGED,True,54,10,3,https://github.com/TOMATO-ONE,"neutrinordp: Log the IP address, port, and user name of the NeutrioRDP Proxy connection.",1,[],https://github.com/neutrinolabs/xrdp/pull/1875,https://github.com/aquesnel,3,https://github.com/neutrinolabs/xrdp/pull/1875#issuecomment-832683339,"#1873
I made sure to log the IP address, port, and user name of the NeutrioRDP Proxy connection.
The following will be recorded in xrdp.log.
[20210503-17:07:11] [INFO ] NeutrinoRDP: connection [Success], destination [192.168.102.101:3389], username [user], source [192.168.0.212:62118], pamusername [xrdp], pid [7443]
I don't know the C language very well.
I made the patch as an example.
If you have better code, please let me know.
I would like to log the disconnect as well.
Where should I add the code in xrdp-neutrinordp.c?
Please advise.
Best regards","Hi @TOMATO-ONE
Thanks for contributing this patch.
For your question about where to log the disconnection, you can try adding it to lxrdp_end which is always called or you can see if there is a disconnect event that is passed to lxrdp_event.
Also, since the point of this log message is to be able to correlate the connection and disconnection events, I'd suggest extracting the log message to a helper function to guarantee that all of the places (connect, failure, disconnect) that log this message log it consistently.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1875,2021-05-03T18:13:00Z,2021-05-13T15:02:40Z,2021-05-13T16:16:02Z,MERGED,True,54,10,3,https://github.com/TOMATO-ONE,"neutrinordp: Log the IP address, port, and user name of the NeutrioRDP Proxy connection.",1,[],https://github.com/neutrinolabs/xrdp/pull/1875,https://github.com/matt335672,4,https://github.com/neutrinolabs/xrdp/pull/1875#issuecomment-832732812,"#1873
I made sure to log the IP address, port, and user name of the NeutrioRDP Proxy connection.
The following will be recorded in xrdp.log.
[20210503-17:07:11] [INFO ] NeutrinoRDP: connection [Success], destination [192.168.102.101:3389], username [user], source [192.168.0.212:62118], pamusername [xrdp], pid [7443]
I don't know the C language very well.
I made the patch as an example.
If you have better code, please let me know.
I would like to log the disconnect as well.
Where should I add the code in xrdp-neutrinordp.c?
Please advise.
Best regards","I think either lxrdp_end() or mod_exit() can be used for logging the disconnect. @aquesnel - can you see any reason to prefer one or the other?
I think it makes sense to log pamusername here. All the information is available from other logs, but this gathers it all in one place for the proxy case. I can't see a better way to do this with the current architecture.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1875,2021-05-03T18:13:00Z,2021-05-13T15:02:40Z,2021-05-13T16:16:02Z,MERGED,True,54,10,3,https://github.com/TOMATO-ONE,"neutrinordp: Log the IP address, port, and user name of the NeutrioRDP Proxy connection.",1,[],https://github.com/neutrinolabs/xrdp/pull/1875,https://github.com/aquesnel,5,https://github.com/neutrinolabs/xrdp/pull/1875#issuecomment-832759226,"#1873
I made sure to log the IP address, port, and user name of the NeutrioRDP Proxy connection.
The following will be recorded in xrdp.log.
[20210503-17:07:11] [INFO ] NeutrinoRDP: connection [Success], destination [192.168.102.101:3389], username [user], source [192.168.0.212:62118], pamusername [xrdp], pid [7443]
I don't know the C language very well.
I made the patch as an example.
If you have better code, please let me know.
I would like to log the disconnect as well.
Where should I add the code in xrdp-neutrinordp.c?
Please advise.
Best regards",@matt335672 to me it seems like the intent of the function lxrdp_end() is for cleaning up at the end of the connection and mod_exit() is when the module is released. That's the only reason I can see for preferring lxrdp_end(),True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1875,2021-05-03T18:13:00Z,2021-05-13T15:02:40Z,2021-05-13T16:16:02Z,MERGED,True,54,10,3,https://github.com/TOMATO-ONE,"neutrinordp: Log the IP address, port, and user name of the NeutrioRDP Proxy connection.",1,[],https://github.com/neutrinolabs/xrdp/pull/1875,https://github.com/matt335672,6,https://github.com/neutrinolabs/xrdp/pull/1875#issuecomment-832771383,"#1873
I made sure to log the IP address, port, and user name of the NeutrioRDP Proxy connection.
The following will be recorded in xrdp.log.
[20210503-17:07:11] [INFO ] NeutrinoRDP: connection [Success], destination [192.168.102.101:3389], username [user], source [192.168.0.212:62118], pamusername [xrdp], pid [7443]
I don't know the C language very well.
I made the patch as an example.
If you have better code, please let me know.
I would like to log the disconnect as well.
Where should I add the code in xrdp-neutrinordp.c?
Please advise.
Best regards","@aquesnel - I'll go with that, particularly as the connect happens in lxrdp_connect() rather than mod_init().",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1875,2021-05-03T18:13:00Z,2021-05-13T15:02:40Z,2021-05-13T16:16:02Z,MERGED,True,54,10,3,https://github.com/TOMATO-ONE,"neutrinordp: Log the IP address, port, and user name of the NeutrioRDP Proxy connection.",1,[],https://github.com/neutrinolabs/xrdp/pull/1875,https://github.com/TOMATO-ONE,7,https://github.com/neutrinolabs/xrdp/pull/1875#issuecomment-833521869,"#1873
I made sure to log the IP address, port, and user name of the NeutrioRDP Proxy connection.
The following will be recorded in xrdp.log.
[20210503-17:07:11] [INFO ] NeutrinoRDP: connection [Success], destination [192.168.102.101:3389], username [user], source [192.168.0.212:62118], pamusername [xrdp], pid [7443]
I don't know the C language very well.
I made the patch as an example.
If you have better code, please let me know.
I would like to log the disconnect as well.
Where should I add the code in xrdp-neutrinordp.c?
Please advise.
Best regards","@aquesnel @matt335672
It is true that pamusername is not described in man xrdp.ini(5).
I am not good at English, so I am not confident to change the document.
Instead, I suggest adding a comment to xrdp.ini.in.
86c5674
If you have a better text, please let me know.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1875,2021-05-03T18:13:00Z,2021-05-13T15:02:40Z,2021-05-13T16:16:02Z,MERGED,True,54,10,3,https://github.com/TOMATO-ONE,"neutrinordp: Log the IP address, port, and user name of the NeutrioRDP Proxy connection.",1,[],https://github.com/neutrinolabs/xrdp/pull/1875,https://github.com/TOMATO-ONE,8,https://github.com/neutrinolabs/xrdp/pull/1875#issuecomment-835844102,"#1873
I made sure to log the IP address, port, and user name of the NeutrioRDP Proxy connection.
The following will be recorded in xrdp.log.
[20210503-17:07:11] [INFO ] NeutrinoRDP: connection [Success], destination [192.168.102.101:3389], username [user], source [192.168.0.212:62118], pamusername [xrdp], pid [7443]
I don't know the C language very well.
I made the patch as an example.
If you have better code, please let me know.
I would like to log the disconnect as well.
Where should I add the code in xrdp-neutrinordp.c?
Please advise.
Best regards","The reason why the LOG in neutorinordp.c was not shown in DEBUG in the disconnect log was simple: it was a binary that had not been built with the configure option --enable-xrdpdebug.
Sorry about that.
I'm checking the log again.
I have removed the wrong information as it would have caused confusion in hindsight.
I will update the PR again when I make a proposal to output the disconnection log.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1875,2021-05-03T18:13:00Z,2021-05-13T15:02:40Z,2021-05-13T16:16:02Z,MERGED,True,54,10,3,https://github.com/TOMATO-ONE,"neutrinordp: Log the IP address, port, and user name of the NeutrioRDP Proxy connection.",1,[],https://github.com/neutrinolabs/xrdp/pull/1875,https://github.com/matt335672,9,https://github.com/neutrinolabs/xrdp/pull/1875#issuecomment-836361102,"#1873
I made sure to log the IP address, port, and user name of the NeutrioRDP Proxy connection.
The following will be recorded in xrdp.log.
[20210503-17:07:11] [INFO ] NeutrinoRDP: connection [Success], destination [192.168.102.101:3389], username [user], source [192.168.0.212:62118], pamusername [xrdp], pid [7443]
I don't know the C language very well.
I made the patch as an example.
If you have better code, please let me know.
I would like to log the disconnect as well.
Where should I add the code in xrdp-neutrinordp.c?
Please advise.
Best regards","Hi @TOMATO-ONE
The --enable-xrdpdebug option is meant for developers only, so it won't be enabled by any distros. Your logging is intended for sysadmins rather than developers, and so I think it should work whether or not --enable-xrdpdebug is specified.
Thanks for your efforts so far.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1875,2021-05-03T18:13:00Z,2021-05-13T15:02:40Z,2021-05-13T16:16:02Z,MERGED,True,54,10,3,https://github.com/TOMATO-ONE,"neutrinordp: Log the IP address, port, and user name of the NeutrioRDP Proxy connection.",1,[],https://github.com/neutrinolabs/xrdp/pull/1875,https://github.com/TOMATO-ONE,10,https://github.com/neutrinolabs/xrdp/pull/1875#issuecomment-836874983,"#1873
I made sure to log the IP address, port, and user name of the NeutrioRDP Proxy connection.
The following will be recorded in xrdp.log.
[20210503-17:07:11] [INFO ] NeutrinoRDP: connection [Success], destination [192.168.102.101:3389], username [user], source [192.168.0.212:62118], pamusername [xrdp], pid [7443]
I don't know the C language very well.
I made the patch as an example.
If you have better code, please let me know.
I would like to log the disconnect as well.
Where should I add the code in xrdp-neutrinordp.c?
Please advise.
Best regards","Thank you. @matt335672
I was confused.
LOG() is the function that logs even a normal binary, and
I see that LOG_DEBUG() is the function that requires --enable-xrdpdebug.
Since the lxrdp_end: by LOG_DEBUG() in lxrdp_end() is not logged in normal binary, the
I misunderstood that lxrdp_end() is not being used.
When I used the --enable-xrdpdebug binary, lxrdp_end: was logged when the RDP connection was closed.
The misunderstanding was cleared up.
I followed @aquesnel's advice and used the LOG() function right after lxrdp_end: in lxrdp_end() to log.
5af1373
The following log will be recorded.
[20210510-15:26:50] [INFO ] [pid:27043 tid:139924764699072] NeutrinoRDP proxy connection: status [Disconnect], RDP client [192.168.0.212:65032], RDP server [192.168.102.101:3389], RDP server username [user], xrdp pamusername [xrdp], xrdp process id [27043]",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1875,2021-05-03T18:13:00Z,2021-05-13T15:02:40Z,2021-05-13T16:16:02Z,MERGED,True,54,10,3,https://github.com/TOMATO-ONE,"neutrinordp: Log the IP address, port, and user name of the NeutrioRDP Proxy connection.",1,[],https://github.com/neutrinolabs/xrdp/pull/1875,https://github.com/matt335672,11,https://github.com/neutrinolabs/xrdp/pull/1875#issuecomment-837170580,"#1873
I made sure to log the IP address, port, and user name of the NeutrioRDP Proxy connection.
The following will be recorded in xrdp.log.
[20210503-17:07:11] [INFO ] NeutrinoRDP: connection [Success], destination [192.168.102.101:3389], username [user], source [192.168.0.212:62118], pamusername [xrdp], pid [7443]
I don't know the C language very well.
I made the patch as an example.
If you have better code, please let me know.
I would like to log the disconnect as well.
Where should I add the code in xrdp-neutrinordp.c?
Please advise.
Best regards","Hi @TOMATO-ONE
That all looks fine to me now - I take it the logging as-is meets your needs?
Do you understand what 'squashing commits' is in git? It would be good to get a single commit for the above in the main-line repository.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1875,2021-05-03T18:13:00Z,2021-05-13T15:02:40Z,2021-05-13T16:16:02Z,MERGED,True,54,10,3,https://github.com/TOMATO-ONE,"neutrinordp: Log the IP address, port, and user name of the NeutrioRDP Proxy connection.",1,[],https://github.com/neutrinolabs/xrdp/pull/1875,https://github.com/TOMATO-ONE,12,https://github.com/neutrinolabs/xrdp/pull/1875#issuecomment-838732092,"#1873
I made sure to log the IP address, port, and user name of the NeutrioRDP Proxy connection.
The following will be recorded in xrdp.log.
[20210503-17:07:11] [INFO ] NeutrinoRDP: connection [Success], destination [192.168.102.101:3389], username [user], source [192.168.0.212:62118], pamusername [xrdp], pid [7443]
I don't know the C language very well.
I made the patch as an example.
If you have better code, please let me know.
I would like to log the disconnect as well.
Where should I add the code in xrdp-neutrinordp.c?
Please advise.
Best regards","Hi @matt335672
Thank you.
That satisfies my request.
I didn't know about 'squashing commits', so I learned.
I also practiced in my local environment.
Am I right in thinking that I can run the following command and squash my miscellaneous pushes together?
git rebase -i a4c7ee077c049202d73f82f518b2de958d722890
git push -f
I'm sorry to ask you such a basic question.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1875,2021-05-03T18:13:00Z,2021-05-13T15:02:40Z,2021-05-13T16:16:02Z,MERGED,True,54,10,3,https://github.com/TOMATO-ONE,"neutrinordp: Log the IP address, port, and user name of the NeutrioRDP Proxy connection.",1,[],https://github.com/neutrinolabs/xrdp/pull/1875,https://github.com/matt335672,13,https://github.com/neutrinolabs/xrdp/pull/1875#issuecomment-839584892,"#1873
I made sure to log the IP address, port, and user name of the NeutrioRDP Proxy connection.
The following will be recorded in xrdp.log.
[20210503-17:07:11] [INFO ] NeutrinoRDP: connection [Success], destination [192.168.102.101:3389], username [user], source [192.168.0.212:62118], pamusername [xrdp], pid [7443]
I don't know the C language very well.
I made the patch as an example.
If you have better code, please let me know.
I would like to log the disconnect as well.
Where should I add the code in xrdp-neutrinordp.c?
Please advise.
Best regards","Hi @TOMATO-ONE
That's fine - we've all been there with git! Speaking personally, I found it quite hard to get started coming from a background including Subversion and Sun Teamware but I think it's worth the trouble.
I'm assuming you've got a local repository on your machine which you're working on which you've cloned from your github copy.
That command you've quoted will work fine in this case. Because you're working on your devel branch I can't think of a better one.
As you get more familiar with git, you'll find it's normally better to work on a change in a separate branch. The reason is that then it makes merging, squashing, etc a lot easier as your changes can be identified as belonging together. Here are some references for you:-

https://guides.github.com/introduction/flow/
git-scm.com has a good chapter on branching and merging which is available in several languages.

Hope that helps.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1875,2021-05-03T18:13:00Z,2021-05-13T15:02:40Z,2021-05-13T16:16:02Z,MERGED,True,54,10,3,https://github.com/TOMATO-ONE,"neutrinordp: Log the IP address, port, and user name of the NeutrioRDP Proxy connection.",1,[],https://github.com/neutrinolabs/xrdp/pull/1875,https://github.com/TOMATO-ONE,14,https://github.com/neutrinolabs/xrdp/pull/1875#issuecomment-839783541,"#1873
I made sure to log the IP address, port, and user name of the NeutrioRDP Proxy connection.
The following will be recorded in xrdp.log.
[20210503-17:07:11] [INFO ] NeutrinoRDP: connection [Success], destination [192.168.102.101:3389], username [user], source [192.168.0.212:62118], pamusername [xrdp], pid [7443]
I don't know the C language very well.
I made the patch as an example.
If you have better code, please let me know.
I would like to log the disconnect as well.
Where should I add the code in xrdp-neutrinordp.c?
Please advise.
Best regards","Hi @matt335672
Thank you very much for your kind help.
I have done the 'squashing commits'. c6fcb16
I'm slowly learning more about git.
I will continue to use it in the future.
Thank you for teaching me about branch separation.
I'll try it in the next time I raise another PR.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1875,2021-05-03T18:13:00Z,2021-05-13T15:02:40Z,2021-05-13T16:16:02Z,MERGED,True,54,10,3,https://github.com/TOMATO-ONE,"neutrinordp: Log the IP address, port, and user name of the NeutrioRDP Proxy connection.",1,[],https://github.com/neutrinolabs/xrdp/pull/1875,https://github.com/matt335672,15,https://github.com/neutrinolabs/xrdp/pull/1875#issuecomment-840621965,"#1873
I made sure to log the IP address, port, and user name of the NeutrioRDP Proxy connection.
The following will be recorded in xrdp.log.
[20210503-17:07:11] [INFO ] NeutrinoRDP: connection [Success], destination [192.168.102.101:3389], username [user], source [192.168.0.212:62118], pamusername [xrdp], pid [7443]
I don't know the C language very well.
I made the patch as an example.
If you have better code, please let me know.
I would like to log the disconnect as well.
Where should I add the code in xrdp-neutrinordp.c?
Please advise.
Best regards",@TOMATO-ONE - thanks for your contribution.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1875,2021-05-03T18:13:00Z,2021-05-13T15:02:40Z,2021-05-13T16:16:02Z,MERGED,True,54,10,3,https://github.com/TOMATO-ONE,"neutrinordp: Log the IP address, port, and user name of the NeutrioRDP Proxy connection.",1,[],https://github.com/neutrinolabs/xrdp/pull/1875,https://github.com/TOMATO-ONE,16,https://github.com/neutrinolabs/xrdp/pull/1875#issuecomment-840668701,"#1873
I made sure to log the IP address, port, and user name of the NeutrioRDP Proxy connection.
The following will be recorded in xrdp.log.
[20210503-17:07:11] [INFO ] NeutrinoRDP: connection [Success], destination [192.168.102.101:3389], username [user], source [192.168.0.212:62118], pamusername [xrdp], pid [7443]
I don't know the C language very well.
I made the patch as an example.
If you have better code, please let me know.
I would like to log the disconnect as well.
Where should I add the code in xrdp-neutrinordp.c?
Please advise.
Best regards","Thank you very much for your help.
If you all had worked on this PR, you probably could have completed it in less than an hour.
However, as a beginner in git, English, and C programming, you patiently stuck with me for 10 days.
This was a very valuable experience for me.
Once again, thank you very much.
As an administrator of an RDP Proxy server, I am looking forward to #1338.
I will help with testing, etc.
Best regards.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1879,2021-05-08T16:56:17Z,2021-05-26T08:14:59Z,2021-05-26T08:15:00Z,MERGED,True,1090,853,63,https://github.com/aquesnel,Add checking the code formatting with astyle during CI builds,2,[],https://github.com/neutrinolabs/xrdp/pull/1879,https://github.com/aquesnel,1,https://github.com/neutrinolabs/xrdp/pull/1879,"Add checking the code formatting with astyle during CI builds
Example build with the code formatting failed: https://github.com/aquesnel/xrdp/runs/2535294459
Example build with the code formatting succeeded: https://github.com/neutrinolabs/xrdp/pull/1879/checks?check_run_id=2535309754
Note: the i386 builds are likely failing because of a change to the github actions runner images: actions/virtual-environments#3339 That issue says that it should be resolved next week but the github actions team.","Add checking the code formatting with astyle during CI builds
Example build with the code formatting failed: https://github.com/aquesnel/xrdp/runs/2535294459
Example build with the code formatting succeeded: https://github.com/neutrinolabs/xrdp/pull/1879/checks?check_run_id=2535309754
Note: the i386 builds are likely failing because of a change to the github actions runner images: actions/virtual-environments#3339 That issue says that it should be resolved next week but the github actions team.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1879,2021-05-08T16:56:17Z,2021-05-26T08:14:59Z,2021-05-26T08:15:00Z,MERGED,True,1090,853,63,https://github.com/aquesnel,Add checking the code formatting with astyle during CI builds,2,[],https://github.com/neutrinolabs/xrdp/pull/1879,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/1879#issuecomment-836393600,"Add checking the code formatting with astyle during CI builds
Example build with the code formatting failed: https://github.com/aquesnel/xrdp/runs/2535294459
Example build with the code formatting succeeded: https://github.com/neutrinolabs/xrdp/pull/1879/checks?check_run_id=2535309754
Note: the i386 builds are likely failing because of a change to the github actions runner images: actions/virtual-environments#3339 That issue says that it should be resolved next week but the github actions team.","Well this looks pretty reasonable to me and all looks fine. The version of astyle is controlled, so we won't be blind-sided by changes in the way astyle functions. Also, just after a release (i.e. now) is a really good time to merge this.
The one fairly big concern I'd have is this recent announcement, which I've just found:-
https://sourceforge.net/p/astyle/bugs/548/
There are alternatives to astyle, with the obvious being clang-format. That's not however a self-contained option in the same way. I haven't tried it yet myself, but there appears to be a bit of impetus behind it - it's used by the linux kernel for example.
Given the existence of clang-format, I think it unlikely that anyone else will pick up the maintenance of astyle.
Personally I'm happy to merge this as-is despite the above, as it give us definite benefits despite the odd formatting oddity. If for some reason it stops working we're no worse off anyway. I think this needs a bit of discussion, and then @metalefty will need to make a decision.",True,{'THUMBS_UP': ['https://github.com/aquesnel']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1879,2021-05-08T16:56:17Z,2021-05-26T08:14:59Z,2021-05-26T08:15:00Z,MERGED,True,1090,853,63,https://github.com/aquesnel,Add checking the code formatting with astyle during CI builds,2,[],https://github.com/neutrinolabs/xrdp/pull/1879,https://github.com/Nexarian,3,https://github.com/neutrinolabs/xrdp/pull/1879#issuecomment-848457662,"Add checking the code formatting with astyle during CI builds
Example build with the code formatting failed: https://github.com/aquesnel/xrdp/runs/2535294459
Example build with the code formatting succeeded: https://github.com/neutrinolabs/xrdp/pull/1879/checks?check_run_id=2535309754
Note: the i386 builds are likely failing because of a change to the github actions runner images: actions/virtual-environments#3339 That issue says that it should be resolved next week but the github actions team.","I'm going to wait until this is merged to merge my change here: #1895
I'd prefer that we use clang-format if astyle is being deprecated. We really don't want to bet the farm on things that aren't supported.
However, regardless, I have a recommendation on how to make sweeping changes like this in the future. Check in the linter and make it work for one file, and then blacklist all other files. Then slowly, one by one, submit smaller PRs that un-black-list each file.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1883,2021-05-11T15:14:09Z,2021-06-18T09:37:34Z,2021-06-18T09:37:34Z,MERGED,True,139,38,1,https://github.com/matt335672,PAM module minor improvements,3,[],https://github.com/neutrinolabs/xrdp/pull/1883,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1883,"This PR makes minor improvements to the PAM processing.
General

g_printf() calls for error conditions are replaced with LOG() calls.
PAM_USER is now set for (e.g.) pam_exec.so - this addresses part of #1882

Conversion function

More error logging/checking is added to the PAM conversion function
The PAM_ERROR_MSG style (see pam_conv(3) is now supported
The PAM_TEXT_INFO style now logs the message rather than ignoring it completely.
some potential memory leaks if the conv function fails have been removed.

The PAM_USER functionality was tested by adding this line to /etc/pam.d/xrdp-sesman:-
auth optional pam_exec.so log=/tmp/pam.log /usr/bin/env

After logging in, /tmp/pam.log contained:-
PAM_SERVICE=xrdp-sesman
PAM_USER=testuser
PAM_TTY=xrdp-sesman
PAM_TYPE=auth

Although the PAM_ERROR_MSG style could not easily be tested directly without writing a PAM module, the pam_echo.so was used to exercise the very similar PAM_TEXT_INFO style which now outputs to the sesman log.","This PR makes minor improvements to the PAM processing.
General

g_printf() calls for error conditions are replaced with LOG() calls.
PAM_USER is now set for (e.g.) pam_exec.so - this addresses part of #1882

Conversion function

More error logging/checking is added to the PAM conversion function
The PAM_ERROR_MSG style (see pam_conv(3) is now supported
The PAM_TEXT_INFO style now logs the message rather than ignoring it completely.
some potential memory leaks if the conv function fails have been removed.

The PAM_USER functionality was tested by adding this line to /etc/pam.d/xrdp-sesman:-
auth optional pam_exec.so log=/tmp/pam.log /usr/bin/env

After logging in, /tmp/pam.log contained:-
PAM_SERVICE=xrdp-sesman
PAM_USER=testuser
PAM_TTY=xrdp-sesman
PAM_TYPE=auth

Although the PAM_ERROR_MSG style could not easily be tested directly without writing a PAM module, the pam_echo.so was used to exercise the very similar PAM_TEXT_INFO style which now outputs to the sesman log.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1883,2021-05-11T15:14:09Z,2021-06-18T09:37:34Z,2021-06-18T09:37:34Z,MERGED,True,139,38,1,https://github.com/matt335672,PAM module minor improvements,3,[],https://github.com/neutrinolabs/xrdp/pull/1883,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/1883#issuecomment-863290923,"This PR makes minor improvements to the PAM processing.
General

g_printf() calls for error conditions are replaced with LOG() calls.
PAM_USER is now set for (e.g.) pam_exec.so - this addresses part of #1882

Conversion function

More error logging/checking is added to the PAM conversion function
The PAM_ERROR_MSG style (see pam_conv(3) is now supported
The PAM_TEXT_INFO style now logs the message rather than ignoring it completely.
some potential memory leaks if the conv function fails have been removed.

The PAM_USER functionality was tested by adding this line to /etc/pam.d/xrdp-sesman:-
auth optional pam_exec.so log=/tmp/pam.log /usr/bin/env

After logging in, /tmp/pam.log contained:-
PAM_SERVICE=xrdp-sesman
PAM_USER=testuser
PAM_TTY=xrdp-sesman
PAM_TYPE=auth

Although the PAM_ERROR_MSG style could not easily be tested directly without writing a PAM module, the pam_echo.so was used to exercise the very similar PAM_TEXT_INFO style which now outputs to the sesman log.","Was about to merge this and a final eyeball check showed a call to snprintf() which was better made g_snprintf()
Will squash and merge tomorrow now unless I get any objections.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1883,2021-05-11T15:14:09Z,2021-06-18T09:37:34Z,2021-06-18T09:37:34Z,MERGED,True,139,38,1,https://github.com/matt335672,PAM module minor improvements,3,[],https://github.com/neutrinolabs/xrdp/pull/1883,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/1883#issuecomment-863850897,"This PR makes minor improvements to the PAM processing.
General

g_printf() calls for error conditions are replaced with LOG() calls.
PAM_USER is now set for (e.g.) pam_exec.so - this addresses part of #1882

Conversion function

More error logging/checking is added to the PAM conversion function
The PAM_ERROR_MSG style (see pam_conv(3) is now supported
The PAM_TEXT_INFO style now logs the message rather than ignoring it completely.
some potential memory leaks if the conv function fails have been removed.

The PAM_USER functionality was tested by adding this line to /etc/pam.d/xrdp-sesman:-
auth optional pam_exec.so log=/tmp/pam.log /usr/bin/env

After logging in, /tmp/pam.log contained:-
PAM_SERVICE=xrdp-sesman
PAM_USER=testuser
PAM_TTY=xrdp-sesman
PAM_TYPE=auth

Although the PAM_ERROR_MSG style could not easily be tested directly without writing a PAM module, the pam_echo.so was used to exercise the very similar PAM_TEXT_INFO style which now outputs to the sesman log.","Overall, LGTM.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1887,2021-05-14T11:07:53Z,2021-05-28T10:03:01Z,2021-06-16T09:52:37Z,MERGED,True,290,100,30,https://github.com/matt335672,"Generalise development build options, and add --enable-devel-streamcheck",5,[],https://github.com/neutrinolabs/xrdp/pull/1887,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1887,"This [draft] PR which adds a new development-only option --enable-streamcheck
Essentially it adds a check after every stream operation in parse.h that all is working as expected. If not a dump is taken. So it will impact performance, but should let us catch and find stream violations relatively easily during development. I'm not intending for this to be used at runtime!
It seemed to me it would be useful when working on #1885.
I've found a few gremlins already which I'm working through so this isn't yet ready. However, at this stage I'd appreciate any thoughts people have on this.","This [draft] PR which adds a new development-only option --enable-streamcheck
Essentially it adds a check after every stream operation in parse.h that all is working as expected. If not a dump is taken. So it will impact performance, but should let us catch and find stream violations relatively easily during development. I'm not intending for this to be used at runtime!
It seemed to me it would be useful when working on #1885.
I've found a few gremlins already which I'm working through so this isn't yet ready. However, at this stage I'd appreciate any thoughts people have on this.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1887,2021-05-14T11:07:53Z,2021-05-28T10:03:01Z,2021-06-16T09:52:37Z,MERGED,True,290,100,30,https://github.com/matt335672,"Generalise development build options, and add --enable-devel-streamcheck",5,[],https://github.com/neutrinolabs/xrdp/pull/1887,https://github.com/Nexarian,2,https://github.com/neutrinolabs/xrdp/pull/1887#issuecomment-842312778,"This [draft] PR which adds a new development-only option --enable-streamcheck
Essentially it adds a check after every stream operation in parse.h that all is working as expected. If not a dump is taken. So it will impact performance, but should let us catch and find stream violations relatively easily during development. I'm not intending for this to be used at runtime!
It seemed to me it would be useful when working on #1885.
I've found a few gremlins already which I'm working through so this isn't yet ready. However, at this stage I'd appreciate any thoughts people have on this.","Might I suggest taking a page from FreeRDP's book: https://github.com/FreeRDP/FreeRDP/blob/master/cmake/ConfigOptions.cmake#L100
Essentially: Options that are for debugging are explicitly labeled so, and you also have the ability to toggle all debug options.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1887,2021-05-14T11:07:53Z,2021-05-28T10:03:01Z,2021-06-16T09:52:37Z,MERGED,True,290,100,30,https://github.com/matt335672,"Generalise development build options, and add --enable-devel-streamcheck",5,[],https://github.com/neutrinolabs/xrdp/pull/1887,https://github.com/matt335672,3,https://github.com/neutrinolabs/xrdp/pull/1887#issuecomment-843178534,"This [draft] PR which adds a new development-only option --enable-streamcheck
Essentially it adds a check after every stream operation in parse.h that all is working as expected. If not a dump is taken. So it will impact performance, but should let us catch and find stream violations relatively easily during development. I'm not intending for this to be used at runtime!
It seemed to me it would be useful when working on #1885.
I've found a few gremlins already which I'm working through so this isn't yet ready. However, at this stage I'd appreciate any thoughts people have on this.","Thanks for that.
I like the idea a lot, but we already have the --enable-xrdpdebug option which does the following (AFAICT):-

Adds extra checking and logging to the embedded pixman code.
Defines the LOG_DEVEL() etc macros to do something interesting
Replaces the compiler flag -O2 with -g -O0.

So my question is; how do we get from where we are to where we want to be?
One idea is just to use a single --enable-xrdpdebug flag for everything. I'm not keen on this, as the checking above, and also @aquesnel's sanitise suggestion cause program exits when they find problems. This might be OK when everything is bedded in, but it will take a while to get there I think. Or am I being too critical?
Here's an other idea, which can be improved on I'm sure.

Rename --enable-xrdp-debug as --enable-debug-logging (I'm not so bothered about renaming a developer-only option)
Rename the option above to --enable-debug-stream
Add a --enable-debug-all to enable all debug options. Or re-use the --enable-xrdpdebug flag for this.
If any debug option is enabled, that sets compiler debug flags.

This is more disruptive but gives an extensible system it should be easy to plug other things into (e.g. the sanitize options).
Thoughts, anyone?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1887,2021-05-14T11:07:53Z,2021-05-28T10:03:01Z,2021-06-16T09:52:37Z,MERGED,True,290,100,30,https://github.com/matt335672,"Generalise development build options, and add --enable-devel-streamcheck",5,[],https://github.com/neutrinolabs/xrdp/pull/1887,https://github.com/aquesnel,4,https://github.com/neutrinolabs/xrdp/pull/1887#issuecomment-843191826,"This [draft] PR which adds a new development-only option --enable-streamcheck
Essentially it adds a check after every stream operation in parse.h that all is working as expected. If not a dump is taken. So it will impact performance, but should let us catch and find stream violations relatively easily during development. I'm not intending for this to be used at runtime!
It seemed to me it would be useful when working on #1885.
I've found a few gremlins already which I'm working through so this isn't yet ready. However, at this stage I'd appreciate any thoughts people have on this.",I agree with your suggestion to split up the debug config flags.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1887,2021-05-14T11:07:53Z,2021-05-28T10:03:01Z,2021-06-16T09:52:37Z,MERGED,True,290,100,30,https://github.com/matt335672,"Generalise development build options, and add --enable-devel-streamcheck",5,[],https://github.com/neutrinolabs/xrdp/pull/1887,https://github.com/metalefty,5,https://github.com/neutrinolabs/xrdp/pull/1887#issuecomment-843227406,"This [draft] PR which adds a new development-only option --enable-streamcheck
Essentially it adds a check after every stream operation in parse.h that all is working as expected. If not a dump is taken. So it will impact performance, but should let us catch and find stream violations relatively easily during development. I'm not intending for this to be used at runtime!
It seemed to me it would be useful when working on #1885.
I've found a few gremlins already which I'm working through so this isn't yet ready. However, at this stage I'd appreciate any thoughts people have on this.","I'm not so bothered about renaming a developer-only option

I agree.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1887,2021-05-14T11:07:53Z,2021-05-28T10:03:01Z,2021-06-16T09:52:37Z,MERGED,True,290,100,30,https://github.com/matt335672,"Generalise development build options, and add --enable-devel-streamcheck",5,[],https://github.com/neutrinolabs/xrdp/pull/1887,https://github.com/matt335672,6,https://github.com/neutrinolabs/xrdp/pull/1887#issuecomment-844005465,"This [draft] PR which adds a new development-only option --enable-streamcheck
Essentially it adds a check after every stream operation in parse.h that all is working as expected. If not a dump is taken. So it will impact performance, but should let us catch and find stream violations relatively easily during development. I'm not intending for this to be used at runtime!
It seemed to me it would be useful when working on #1885.
I've found a few gremlins already which I'm working through so this isn't yet ready. However, at this stage I'd appreciate any thoughts people have on this.","Thanks to all for comments. This is now ready for review. I've split it into 5 commits:-

Split the existing --enable-xrdpdebug into --enable-devel-all, --enable-devel-debug, --enable-devel-logging.
Add the additional --enable-devel-streamcheck option.
Fix some unterminated buffer problems in the xrdp file I/O code found by --enable-devel-streamcheck. There's a one-liner to sesman in here too which dosn't warrant a separate commit.
Fix a couple of minor problems in the RDP layer in librdp. One was a too-small size, and the other was an unitialised sec_hdr pointer which caused an out-of-bounds (but unused) pointer when the stream was compressed.
Add some stream terminations to chansrv

Configure options are now as follows:-



Option
Meaning




--enable-devel-debug
Ensures executables are optimised for a debugger


--enable-devel-logging
Mostly enables the LOG_DEVEL() etc macros


--enable-devel-streamcheck
Forces range-checking on all stream operations


--enable-devel-all
Enables all development options



The way it's set up means that combinations like ./configure --enable-devel-all --disable-devel-streamcheck work if you just want to disable a single feature which is giving you trouble.
I've moved the necessary pre-processor options into config_ac.h, which means I've removed a lot of these kind of stanzas from Makefile.am files:-
if XRDP_DEBUG
AM_CPPFLAGS += -DXRDP_DEBUG
endif

I haven't added @aquesnel's suggested sanitiser calls yet, but it should be trivial to do so. Maybe a separate commit?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1887,2021-05-14T11:07:53Z,2021-05-28T10:03:01Z,2021-06-16T09:52:37Z,MERGED,True,290,100,30,https://github.com/matt335672,"Generalise development build options, and add --enable-devel-streamcheck",5,[],https://github.com/neutrinolabs/xrdp/pull/1887,https://github.com/aquesnel,7,https://github.com/neutrinolabs/xrdp/pull/1887#issuecomment-850133957,"This [draft] PR which adds a new development-only option --enable-streamcheck
Essentially it adds a check after every stream operation in parse.h that all is working as expected. If not a dump is taken. So it will impact performance, but should let us catch and find stream violations relatively easily during development. I'm not intending for this to be used at runtime!
It seemed to me it would be useful when working on #1885.
I've found a few gremlins already which I'm working through so this isn't yet ready. However, at this stage I'd appreciate any thoughts people have on this.","I'd say that we can add the sanitize flags later in a separate PR.
What are the next steps to get this PR merged?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1887,2021-05-14T11:07:53Z,2021-05-28T10:03:01Z,2021-06-16T09:52:37Z,MERGED,True,290,100,30,https://github.com/matt335672,"Generalise development build options, and add --enable-devel-streamcheck",5,[],https://github.com/neutrinolabs/xrdp/pull/1887,https://github.com/matt335672,8,https://github.com/neutrinolabs/xrdp/pull/1887#issuecomment-850305753,"This [draft] PR which adds a new development-only option --enable-streamcheck
Essentially it adds a check after every stream operation in parse.h that all is working as expected. If not a dump is taken. So it will impact performance, but should let us catch and find stream violations relatively easily during development. I'm not intending for this to be used at runtime!
It seemed to me it would be useful when working on #1885.
I've found a few gremlins already which I'm working through so this isn't yet ready. However, at this stage I'd appreciate any thoughts people have on this.",I could really do with this for testing the stuff I've got in #1900. Since it's developer-only I'll merge it now.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1895,2021-05-25T04:12:13Z,2022-03-29T08:32:40Z,2022-03-29T10:00:53Z,MERGED,True,1186,330,17,https://github.com/Nexarian,Unify monitor processing logic.,2,[],https://github.com/neutrinolabs/xrdp/pull/1895,https://github.com/Nexarian,1,https://github.com/neutrinolabs/xrdp/pull/1895,"There are two places where monitor descriptions are passed through the
RDP protocol:

TS_UD_CS_MONITOR
DISPLAYCONTROL_PDU_TYPE_MONITOR_LAYOUT

The processing logic for both of them is similar enough that they should
be unified.
Note that this is also the first step to making resizing work with the
Extension GFX channel.","There are two places where monitor descriptions are passed through the
RDP protocol:

TS_UD_CS_MONITOR
DISPLAYCONTROL_PDU_TYPE_MONITOR_LAYOUT

The processing logic for both of them is similar enough that they should
be unified.
Note that this is also the first step to making resizing work with the
Extension GFX channel.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1895,2021-05-25T04:12:13Z,2022-03-29T08:32:40Z,2022-03-29T10:00:53Z,MERGED,True,1186,330,17,https://github.com/Nexarian,Unify monitor processing logic.,2,[],https://github.com/neutrinolabs/xrdp/pull/1895,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/1895#issuecomment-847737534,"There are two places where monitor descriptions are passed through the
RDP protocol:

TS_UD_CS_MONITOR
DISPLAYCONTROL_PDU_TYPE_MONITOR_LAYOUT

The processing logic for both of them is similar enough that they should
be unified.
Note that this is also the first step to making resizing work with the
Extension GFX channel.","Hi @Nexarian
Thanks for this.
I've added a few review comments for you above. If there's anything you disagree with please come back at me.
As regards the coding standard, and particularly given @aquesnel's #1879, can I suggest you run the files you've modified through astyle? There's some instructions on the wiki.
Personally, all I've done in my dev environment is define ARTISTIC_STYLE_PROJECT_OPTIONS=astyle_config.as and then I run astyle on individual files. There's a bit of a trick to it in that if you don't wildcard an argument it grumbles like this:-
$ astyle os_calls.h
Recursive option with no wildcard
Did you intend quote the filename
Artistic Style has terminated
Fix by wildcarding your arg:-
$ astyle os_calls.h\*
------------------------------------------------------------
Directory  /home/mjb/xrdp/common/os_calls.h*
------------------------------------------------------------
Formatted  os_calls.h
Hope that's useful.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1895,2021-05-25T04:12:13Z,2022-03-29T08:32:40Z,2022-03-29T10:00:53Z,MERGED,True,1186,330,17,https://github.com/Nexarian,Unify monitor processing logic.,2,[],https://github.com/neutrinolabs/xrdp/pull/1895,https://github.com/Nexarian,3,https://github.com/neutrinolabs/xrdp/pull/1895#issuecomment-848455002,"There are two places where monitor descriptions are passed through the
RDP protocol:

TS_UD_CS_MONITOR
DISPLAYCONTROL_PDU_TYPE_MONITOR_LAYOUT

The processing logic for both of them is similar enough that they should
be unified.
Note that this is also the first step to making resizing work with the
Extension GFX channel.",Lets wait until #1879 to merge this then so that my change has no risk of breaking the style change.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1895,2021-05-25T04:12:13Z,2022-03-29T08:32:40Z,2022-03-29T10:00:53Z,MERGED,True,1186,330,17,https://github.com/Nexarian,Unify monitor processing logic.,2,[],https://github.com/neutrinolabs/xrdp/pull/1895,https://github.com/Nexarian,4,https://github.com/neutrinolabs/xrdp/pull/1895#issuecomment-853543591,"There are two places where monitor descriptions are passed through the
RDP protocol:

TS_UD_CS_MONITOR
DISPLAYCONTROL_PDU_TYPE_MONITOR_LAYOUT

The processing logic for both of them is similar enough that they should
be unified.
Note that this is also the first step to making resizing work with the
Extension GFX channel.","Alright, I've addressed all of the comments and then verified that the update PR works correctly and doesn't break dynamic resizing.
Take another look @metalefty @aquesnel @matt335672",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1895,2021-05-25T04:12:13Z,2022-03-29T08:32:40Z,2022-03-29T10:00:53Z,MERGED,True,1186,330,17,https://github.com/Nexarian,Unify monitor processing logic.,2,[],https://github.com/neutrinolabs/xrdp/pull/1895,https://github.com/Nexarian,5,https://github.com/neutrinolabs/xrdp/pull/1895#issuecomment-856455602,"There are two places where monitor descriptions are passed through the
RDP protocol:

TS_UD_CS_MONITOR
DISPLAYCONTROL_PDU_TYPE_MONITOR_LAYOUT

The processing logic for both of them is similar enough that they should
be unified.
Note that this is also the first step to making resizing work with the
Extension GFX channel.","Addressed comments, give it another look!",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1895,2021-05-25T04:12:13Z,2022-03-29T08:32:40Z,2022-03-29T10:00:53Z,MERGED,True,1186,330,17,https://github.com/Nexarian,Unify monitor processing logic.,2,[],https://github.com/neutrinolabs/xrdp/pull/1895,https://github.com/aquesnel,6,https://github.com/neutrinolabs/xrdp/pull/1895#issuecomment-856963723,"There are two places where monitor descriptions are passed through the
RDP protocol:

TS_UD_CS_MONITOR
DISPLAYCONTROL_PDU_TYPE_MONITOR_LAYOUT

The processing logic for both of them is similar enough that they should
be unified.
Note that this is also the first step to making resizing work with the
Extension GFX channel.","Hi @Nexarian
Thanks for addressing my comments. I haven't been able to take a look at the most recent changes yet. I'll let you know when I do.
Separately, since there is now the infrastructure for unit tests, and units tests are good for proving that refactoring hasn't broken anything, is there anything in this pr that you think would benefit from adding some unit tests?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1895,2021-05-25T04:12:13Z,2022-03-29T08:32:40Z,2022-03-29T10:00:53Z,MERGED,True,1186,330,17,https://github.com/Nexarian,Unify monitor processing logic.,2,[],https://github.com/neutrinolabs/xrdp/pull/1895,https://github.com/Nexarian,7,https://github.com/neutrinolabs/xrdp/pull/1895#issuecomment-860380099,"There are two places where monitor descriptions are passed through the
RDP protocol:

TS_UD_CS_MONITOR
DISPLAYCONTROL_PDU_TYPE_MONITOR_LAYOUT

The processing logic for both of them is similar enough that they should
be unified.
Note that this is also the first step to making resizing work with the
Extension GFX channel.","@aquesnel If we want to add unit tests to this I propose we do one of two things:

Add unit tests for the functions that are in master BEFORE we merge in this PR, so we can lock-in the behavior that's already there, and then make sure this PR doesn't break them.
Check this code in and then add unit tests in a separate PR.

I don't want to add unit tests (or at least, unit tests for new functionality) to this PR because it's already pretty big. I'm in favor of (1) but that'll take more time as I have to learn the unit test system and write them. Probably another month given the bandwidth I currently have, though that's probably OK. We want HiDPI and multi-mon done right.",True,{'THUMBS_UP': ['https://github.com/aquesnel']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1895,2021-05-25T04:12:13Z,2022-03-29T08:32:40Z,2022-03-29T10:00:53Z,MERGED,True,1186,330,17,https://github.com/Nexarian,Unify monitor processing logic.,2,[],https://github.com/neutrinolabs/xrdp/pull/1895,https://github.com/Nexarian,8,https://github.com/neutrinolabs/xrdp/pull/1895#issuecomment-860380399,"There are two places where monitor descriptions are passed through the
RDP protocol:

TS_UD_CS_MONITOR
DISPLAYCONTROL_PDU_TYPE_MONITOR_LAYOUT

The processing logic for both of them is similar enough that they should
be unified.
Note that this is also the first step to making resizing work with the
Extension GFX channel.",@matt335672 I'll get to your comments sometime this week. I spent the weekend playing Factorio as I needed a break from manic coding :),True,{'THUMBS_UP': ['https://github.com/matt335672']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1895,2021-05-25T04:12:13Z,2022-03-29T08:32:40Z,2022-03-29T10:00:53Z,MERGED,True,1186,330,17,https://github.com/Nexarian,Unify monitor processing logic.,2,[],https://github.com/neutrinolabs/xrdp/pull/1895,https://github.com/Nexarian,9,https://github.com/neutrinolabs/xrdp/pull/1895#issuecomment-869093877,"There are two places where monitor descriptions are passed through the
RDP protocol:

TS_UD_CS_MONITOR
DISPLAYCONTROL_PDU_TYPE_MONITOR_LAYOUT

The processing logic for both of them is similar enough that they should
be unified.
Note that this is also the first step to making resizing work with the
Extension GFX channel.","Take a look at #1932. Let's get that checked in before I finish this one, that way we can make sure that this PR doesn't break any functionality with the existing monitor processing.",True,{'THUMBS_UP': ['https://github.com/matt335672']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1895,2021-05-25T04:12:13Z,2022-03-29T08:32:40Z,2022-03-29T10:00:53Z,MERGED,True,1186,330,17,https://github.com/Nexarian,Unify monitor processing logic.,2,[],https://github.com/neutrinolabs/xrdp/pull/1895,https://github.com/Nexarian,10,https://github.com/neutrinolabs/xrdp/pull/1895#issuecomment-1065818949,"There are two places where monitor descriptions are passed through the
RDP protocol:

TS_UD_CS_MONITOR
DISPLAYCONTROL_PDU_TYPE_MONITOR_LAYOUT

The processing logic for both of them is similar enough that they should
be unified.
Note that this is also the first step to making resizing work with the
Extension GFX channel.","@matt335672 @aquesnel I know it's been a long time, but I've finished updating this and incorporating all the comments and rebasing off of devel. Take another look, we still need this!",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1895,2021-05-25T04:12:13Z,2022-03-29T08:32:40Z,2022-03-29T10:00:53Z,MERGED,True,1186,330,17,https://github.com/Nexarian,Unify monitor processing logic.,2,[],https://github.com/neutrinolabs/xrdp/pull/1895,https://github.com/matt335672,11,https://github.com/neutrinolabs/xrdp/pull/1895#issuecomment-1067209174,"There are two places where monitor descriptions are passed through the
RDP protocol:

TS_UD_CS_MONITOR
DISPLAYCONTROL_PDU_TYPE_MONITOR_LAYOUT

The processing logic for both of them is similar enough that they should
be unified.
Note that this is also the first step to making resizing work with the
Extension GFX channel.",Just back from a week away today. I'll get to this later in the week. Thanks for sticking with it.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1895,2021-05-25T04:12:13Z,2022-03-29T08:32:40Z,2022-03-29T10:00:53Z,MERGED,True,1186,330,17,https://github.com/Nexarian,Unify monitor processing logic.,2,[],https://github.com/neutrinolabs/xrdp/pull/1895,https://github.com/Nexarian,12,https://github.com/neutrinolabs/xrdp/pull/1895#issuecomment-1067432502,"There are two places where monitor descriptions are passed through the
RDP protocol:

TS_UD_CS_MONITOR
DISPLAYCONTROL_PDU_TYPE_MONITOR_LAYOUT

The processing logic for both of them is similar enough that they should
be unified.
Note that this is also the first step to making resizing work with the
Extension GFX channel.","@matt335672 This is still an important next step to merging in the resizing stability changes that I've made to be compatible with the EGFX layer. I haven't been idle, I continue to work on tweaking the branch that incorporates Jay's changes and merges in a lot of the resizing and stability fixes, I go in and out of motivation :)",True,{'THUMBS_UP': ['https://github.com/aquesnel']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1895,2021-05-25T04:12:13Z,2022-03-29T08:32:40Z,2022-03-29T10:00:53Z,MERGED,True,1186,330,17,https://github.com/Nexarian,Unify monitor processing logic.,2,[],https://github.com/neutrinolabs/xrdp/pull/1895,https://github.com/Nexarian,13,https://github.com/neutrinolabs/xrdp/pull/1895#issuecomment-1073380593,"There are two places where monitor descriptions are passed through the
RDP protocol:

TS_UD_CS_MONITOR
DISPLAYCONTROL_PDU_TYPE_MONITOR_LAYOUT

The processing logic for both of them is similar enough that they should
be unified.
Note that this is also the first step to making resizing work with the
Extension GFX channel.",@aquesnel Thanks for the approve! Please take a look at neutrinolabs/xorgxrdp#212 as well!,True,{'THUMBS_UP': ['https://github.com/aquesnel']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1895,2021-05-25T04:12:13Z,2022-03-29T08:32:40Z,2022-03-29T10:00:53Z,MERGED,True,1186,330,17,https://github.com/Nexarian,Unify monitor processing logic.,2,[],https://github.com/neutrinolabs/xrdp/pull/1895,https://github.com/Nexarian,14,https://github.com/neutrinolabs/xrdp/pull/1895#issuecomment-1073384253,"There are two places where monitor descriptions are passed through the
RDP protocol:

TS_UD_CS_MONITOR
DISPLAYCONTROL_PDU_TYPE_MONITOR_LAYOUT

The processing logic for both of them is similar enough that they should
be unified.
Note that this is also the first step to making resizing work with the
Extension GFX channel.","@matt335672 @metalefty I've updated to include most of the comments above. What could be discussed is:

I took the liberty of redoing xrdp_client_info to both be more compliant with the spec and to prevent duplication for monitor processing. This is an important win, but I separated it out into a separate commit for clarity.
This could probably use more unit tests to make absolutely sure I'm not regressing anything, but given that multi-mon is already in flux, that could also be done later and we can take this an important change that will help inform other important changes going forward such as neutrinolabs/xorgxrdp#172
I'm not sure what to do with the ""This value MUST be ignored if..."" -- That maybe LOG a warning and do nothing else? Don't populate the structure with the loaded value after first checking for the range? Right now, I simply load the value without checking anything... What is our standard here?

Please take another look! In concert with neutrinolabs/xorgxrdp#212, this works on my Ubuntu VM and I verified resizing still works.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1895,2021-05-25T04:12:13Z,2022-03-29T08:32:40Z,2022-03-29T10:00:53Z,MERGED,True,1186,330,17,https://github.com/Nexarian,Unify monitor processing logic.,2,[],https://github.com/neutrinolabs/xrdp/pull/1895,https://github.com/matt335672,15,https://github.com/neutrinolabs/xrdp/pull/1895#issuecomment-1075003906,"There are two places where monitor descriptions are passed through the
RDP protocol:

TS_UD_CS_MONITOR
DISPLAYCONTROL_PDU_TYPE_MONITOR_LAYOUT

The processing logic for both of them is similar enough that they should
be unified.
Note that this is also the first step to making resizing work with the
Extension GFX channel.","As regards 'MUST be ignored' values, there aren't many of them in [MS-RDPEDISP]. My suggestion is:-

PhysicalWidth/PhysicalHeight - these aren't currently used. Set to zero, and add a comment to xrdp.h that they may be zero. When/if we use them for scaling we'll have to cope with that. An alternative is to assume a particular DPI to set them, but I think that's dangerous in the long run.
Orientation - assume ORIENTATION_LANDSCAPE
DeviceScaleFactor/DesktopScaleFactor - assume 100%

That's the ignored values. Out-of-range values can just be set to the corresponding min/max value as appropriate.
How does that sound? It's only a suggestion.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1895,2021-05-25T04:12:13Z,2022-03-29T08:32:40Z,2022-03-29T10:00:53Z,MERGED,True,1186,330,17,https://github.com/Nexarian,Unify monitor processing logic.,2,[],https://github.com/neutrinolabs/xrdp/pull/1895,https://github.com/Nexarian,16,https://github.com/neutrinolabs/xrdp/pull/1895#issuecomment-1075962320,"There are two places where monitor descriptions are passed through the
RDP protocol:

TS_UD_CS_MONITOR
DISPLAYCONTROL_PDU_TYPE_MONITOR_LAYOUT

The processing logic for both of them is similar enough that they should
be unified.
Note that this is also the first step to making resizing work with the
Extension GFX channel.","I like the idea of adding defaults in for ""must ignore if"" parameters. I'm working on it, I've also decided to add more unit tests. Should be finished in a day or so more.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1895,2021-05-25T04:12:13Z,2022-03-29T08:32:40Z,2022-03-29T10:00:53Z,MERGED,True,1186,330,17,https://github.com/Nexarian,Unify monitor processing logic.,2,[],https://github.com/neutrinolabs/xrdp/pull/1895,https://github.com/metalefty,17,https://github.com/neutrinolabs/xrdp/pull/1895#issuecomment-1076073240,"There are two places where monitor descriptions are passed through the
RDP protocol:

TS_UD_CS_MONITOR
DISPLAYCONTROL_PDU_TYPE_MONITOR_LAYOUT

The processing logic for both of them is similar enough that they should
be unified.
Note that this is also the first step to making resizing work with the
Extension GFX channel.",I'm fine with other parts 'cause Matt and Aaquesnel have already reviewed well.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1895,2021-05-25T04:12:13Z,2022-03-29T08:32:40Z,2022-03-29T10:00:53Z,MERGED,True,1186,330,17,https://github.com/Nexarian,Unify monitor processing logic.,2,[],https://github.com/neutrinolabs/xrdp/pull/1895,https://github.com/Nexarian,18,https://github.com/neutrinolabs/xrdp/pull/1895#issuecomment-1081147623,"There are two places where monitor descriptions are passed through the
RDP protocol:

TS_UD_CS_MONITOR
DISPLAYCONTROL_PDU_TYPE_MONITOR_LAYOUT

The processing logic for both of them is similar enough that they should
be unified.
Note that this is also the first step to making resizing work with the
Extension GFX channel.","@matt335672 I've updated neutrinolabs/xorgxrdp#212. Let's get these checked in, and then we can move on to my state machine changes here: #2175",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1895,2021-05-25T04:12:13Z,2022-03-29T08:32:40Z,2022-03-29T10:00:53Z,MERGED,True,1186,330,17,https://github.com/Nexarian,Unify monitor processing logic.,2,[],https://github.com/neutrinolabs/xrdp/pull/1895,https://github.com/matt335672,19,https://github.com/neutrinolabs/xrdp/pull/1895#issuecomment-1081674085,"There are two places where monitor descriptions are passed through the
RDP protocol:

TS_UD_CS_MONITOR
DISPLAYCONTROL_PDU_TYPE_MONITOR_LAYOUT

The processing logic for both of them is similar enough that they should
be unified.
Note that this is also the first step to making resizing work with the
Extension GFX channel.",See also #2201,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1897,2021-05-26T08:54:10Z,2021-05-26T09:00:12Z,2021-09-09T09:15:58Z,MERGED,True,1,1,1,https://github.com/matt335672,Removed extra space which is breaking new astyle check,1,[],https://github.com/neutrinolabs/xrdp/pull/1897,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1897,"Companion to #1879. This was introduced by #1875 and I didn't spot it at the time.
My CI builds are intermittently failing ATM in the package install phase with an error like this:-
E: Failed to fetch http://azure.archive.ubuntu.com/ubuntu/pool/main/p/pam/libpam0g-dev_1.3.1-5ubuntu4.1_amd64.deb  404  Not Found [IP: 52.154.174.208 80]

I'm going to ignore this for now.","Companion to #1879. This was introduced by #1875 and I didn't spot it at the time.
My CI builds are intermittently failing ATM in the package install phase with an error like this:-
E: Failed to fetch http://azure.archive.ubuntu.com/ubuntu/pool/main/p/pam/libpam0g-dev_1.3.1-5ubuntu4.1_amd64.deb  404  Not Found [IP: 52.154.174.208 80]

I'm going to ignore this for now.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1899,2021-05-26T17:02:44Z,2021-05-28T10:22:09Z,2021-05-28T13:10:37Z,MERGED,True,9,1,2,https://github.com/TOMATO-ONE,Fixed the ability to overwrite common channel settings.,1,[],https://github.com/neutrinolabs/xrdp/pull/1899,https://github.com/TOMATO-ONE,1,https://github.com/neutrinolabs/xrdp/pull/1899,"Hi.
I have found that I cannot override the common channel settings when using the NeutrinoRDP Proxy.
I tried to write the following in xrdp.ini.
[cliprdr-ture]
name=cliprdr-true
lib=libxrdpneutrinordp.so
ip=cliprdr-true-Windows
<snip>
channel.cliprdr=true

[cliprdr-false]
name=cliprdr-false
lib=libxrdpneutrinordp.so
ip=cliprdr-false-Windows
<snip>
channel.cliprdr=false

I did some trial and error and added three lines to xrdp_mm.c.
I also added the same process as #1872 toxrdp-neutrinordp.cbecause the log shows the error lxrdp_set_param: unknown name.
I tested the behavior and confirmed that channel.cliprdr, channel.rdpsnd and channel.rdpdr work fine.
However, I did not know how to test channel.drdynvc.
Best regards.","Hi.
I have found that I cannot override the common channel settings when using the NeutrinoRDP Proxy.
I tried to write the following in xrdp.ini.
[cliprdr-ture]
name=cliprdr-true
lib=libxrdpneutrinordp.so
ip=cliprdr-true-Windows
<snip>
channel.cliprdr=true

[cliprdr-false]
name=cliprdr-false
lib=libxrdpneutrinordp.so
ip=cliprdr-false-Windows
<snip>
channel.cliprdr=false

I did some trial and error and added three lines to xrdp_mm.c.
I also added the same process as #1872 toxrdp-neutrinordp.cbecause the log shows the error lxrdp_set_param: unknown name.
I tested the behavior and confirmed that channel.cliprdr, channel.rdpsnd and channel.rdpdr work fine.
However, I did not know how to test channel.drdynvc.
Best regards.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1899,2021-05-26T17:02:44Z,2021-05-28T10:22:09Z,2021-05-28T13:10:37Z,MERGED,True,9,1,2,https://github.com/TOMATO-ONE,Fixed the ability to overwrite common channel settings.,1,[],https://github.com/neutrinolabs/xrdp/pull/1899,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/1899#issuecomment-849554049,"Hi.
I have found that I cannot override the common channel settings when using the NeutrinoRDP Proxy.
I tried to write the following in xrdp.ini.
[cliprdr-ture]
name=cliprdr-true
lib=libxrdpneutrinordp.so
ip=cliprdr-true-Windows
<snip>
channel.cliprdr=true

[cliprdr-false]
name=cliprdr-false
lib=libxrdpneutrinordp.so
ip=cliprdr-false-Windows
<snip>
channel.cliprdr=false

I did some trial and error and added three lines to xrdp_mm.c.
I also added the same process as #1872 toxrdp-neutrinordp.cbecause the log shows the error lxrdp_set_param: unknown name.
I tested the behavior and confirmed that channel.cliprdr, channel.rdpsnd and channel.rdpdr work fine.
However, I did not know how to test channel.drdynvc.
Best regards.","Nice find.
I've had a look at the code, and I think all that needs doing in xrdp_mm.c is that the existing call to xrdp_mm_update_allowed_channels() at line 1802 (or thereabouts) should be moved to line 2496 (or thereabouts) in xrdp_mm_connect(). Whereas your code looks perfectly functional to me, it does mean that xrdp_mm_update_allowed_channels() can be called twice when chansrv is started, and this will produce two lots of logging. You won't have seen this as you're not using chansrv in your configuration.
Does that make sense? Could you give that a go and report back?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1899,2021-05-26T17:02:44Z,2021-05-28T10:22:09Z,2021-05-28T13:10:37Z,MERGED,True,9,1,2,https://github.com/TOMATO-ONE,Fixed the ability to overwrite common channel settings.,1,[],https://github.com/neutrinolabs/xrdp/pull/1899,https://github.com/TOMATO-ONE,3,https://github.com/neutrinolabs/xrdp/pull/1899#issuecomment-849713524,"Hi.
I have found that I cannot override the common channel settings when using the NeutrinoRDP Proxy.
I tried to write the following in xrdp.ini.
[cliprdr-ture]
name=cliprdr-true
lib=libxrdpneutrinordp.so
ip=cliprdr-true-Windows
<snip>
channel.cliprdr=true

[cliprdr-false]
name=cliprdr-false
lib=libxrdpneutrinordp.so
ip=cliprdr-false-Windows
<snip>
channel.cliprdr=false

I did some trial and error and added three lines to xrdp_mm.c.
I also added the same process as #1872 toxrdp-neutrinordp.cbecause the log shows the error lxrdp_set_param: unknown name.
I tested the behavior and confirmed that channel.cliprdr, channel.rdpsnd and channel.rdpdr work fine.
However, I did not know how to test channel.drdynvc.
Best regards.","Thanks! @matt335672
I have moved the function xrdp_mm_update_allowed_channels() on line 1800 of xrdp_mm.c to line 2494 as you suggested.
604fa30
I have tested the operation.
It worked fine.
This fix is better.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1899,2021-05-26T17:02:44Z,2021-05-28T10:22:09Z,2021-05-28T13:10:37Z,MERGED,True,9,1,2,https://github.com/TOMATO-ONE,Fixed the ability to overwrite common channel settings.,1,[],https://github.com/neutrinolabs/xrdp/pull/1899,https://github.com/matt335672,4,https://github.com/neutrinolabs/xrdp/pull/1899#issuecomment-850272668,"Hi.
I have found that I cannot override the common channel settings when using the NeutrinoRDP Proxy.
I tried to write the following in xrdp.ini.
[cliprdr-ture]
name=cliprdr-true
lib=libxrdpneutrinordp.so
ip=cliprdr-true-Windows
<snip>
channel.cliprdr=true

[cliprdr-false]
name=cliprdr-false
lib=libxrdpneutrinordp.so
ip=cliprdr-false-Windows
<snip>
channel.cliprdr=false

I did some trial and error and added three lines to xrdp_mm.c.
I also added the same process as #1872 toxrdp-neutrinordp.cbecause the log shows the error lxrdp_set_param: unknown name.
I tested the behavior and confirmed that channel.cliprdr, channel.rdpsnd and channel.rdpdr work fine.
However, I did not know how to test channel.drdynvc.
Best regards.","Thanks for the swift reply.
I'll do some checking with chansrv and then merge this.
Also, before I do, I'll get this annoying CI problem reported - I'd hoped it was some sort of transient thing, but it appears not.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1899,2021-05-26T17:02:44Z,2021-05-28T10:22:09Z,2021-05-28T13:10:37Z,MERGED,True,9,1,2,https://github.com/TOMATO-ONE,Fixed the ability to overwrite common channel settings.,1,[],https://github.com/neutrinolabs/xrdp/pull/1899,https://github.com/matt335672,5,https://github.com/neutrinolabs/xrdp/pull/1899#issuecomment-850316255,"Hi.
I have found that I cannot override the common channel settings when using the NeutrinoRDP Proxy.
I tried to write the following in xrdp.ini.
[cliprdr-ture]
name=cliprdr-true
lib=libxrdpneutrinordp.so
ip=cliprdr-true-Windows
<snip>
channel.cliprdr=true

[cliprdr-false]
name=cliprdr-false
lib=libxrdpneutrinordp.so
ip=cliprdr-false-Windows
<snip>
channel.cliprdr=false

I did some trial and error and added three lines to xrdp_mm.c.
I also added the same process as #1872 toxrdp-neutrinordp.cbecause the log shows the error lxrdp_set_param: unknown name.
I tested the behavior and confirmed that channel.cliprdr, channel.rdpsnd and channel.rdpdr work fine.
However, I did not know how to test channel.drdynvc.
Best regards.","Looks OK to me.
I ran up with channel.cliprdr=false in a standard XRDP stanza (i.e. not NeutrinoRDP) and got the following message in the xrdp.log:-
``
[20210528-11:16:42] [INFO ] [xrdp_mm_update_allowed_channels(xrdp_mm.c:1741)] xrdp_mm_update_allowed_channels: channel cliprdr channel id 2 is disabled

And indeed the clip channel didn't work.

@TOMATO-ONE - thanks again for your contribution.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1899,2021-05-26T17:02:44Z,2021-05-28T10:22:09Z,2021-05-28T13:10:37Z,MERGED,True,9,1,2,https://github.com/TOMATO-ONE,Fixed the ability to overwrite common channel settings.,1,[],https://github.com/neutrinolabs/xrdp/pull/1899,https://github.com/TOMATO-ONE,6,https://github.com/neutrinolabs/xrdp/pull/1899#issuecomment-850408254,"Hi.
I have found that I cannot override the common channel settings when using the NeutrinoRDP Proxy.
I tried to write the following in xrdp.ini.
[cliprdr-ture]
name=cliprdr-true
lib=libxrdpneutrinordp.so
ip=cliprdr-true-Windows
<snip>
channel.cliprdr=true

[cliprdr-false]
name=cliprdr-false
lib=libxrdpneutrinordp.so
ip=cliprdr-false-Windows
<snip>
channel.cliprdr=false

I did some trial and error and added three lines to xrdp_mm.c.
I also added the same process as #1872 toxrdp-neutrinordp.cbecause the log shows the error lxrdp_set_param: unknown name.
I tested the behavior and confirmed that channel.cliprdr, channel.rdpsnd and channel.rdpdr work fine.
However, I did not know how to test channel.drdynvc.
Best regards.",Thank you too.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1900,2021-05-27T14:54:57Z,2021-07-07T08:22:58Z,2021-07-07T08:23:02Z,MERGED,True,1545,418,23,https://github.com/matt335672,Rework VNC text clipboard interface,6,[],https://github.com/neutrinolabs/xrdp/pull/1900,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1900,"This is no longer in draft.
The built-in VNC clipboard text-interface has been largely superseded by the xrdp-chansrv clipboard function. However there are still a few edge cases where this is required. For example, the user may be trying to connect to a VNC server on a platform where xrdp_chansrv is unavailable
There are a few problems with the interface at present, as reported in #1885 and #1616. To summarise:-

The clip text on the virtual channel isn't chunked into smaller virtual channel PDUs as detailed in MS-RDPBCGR 3.1.5.2. This means only a few kilobytes can be copied at most.
At times the clipboard only works one way
(Related to the above) The interface startup sequence doesn't conform to that details in MS-RDPECLIP.
Carriage returns are not always handled consistently.

On an engineering level, we're missing an ms-rdpeclip.h header for the constants. Also the modules are unaware of whether chansrv is running or not, which makes the logging difficult and means we're missing some optimisations. The actual clip functions in vnc.c use a lot of magic numbers which could be replaced with proper defines.
There are currently 5 commits in this PR:-

Add a function server_chansrv_in_use() to the module interface so modules know if chansrv is active.
2), Add a new string function g_strnchr() to look for a character in a string bounded by length.
Create an ms-rdpeclip.h include, using defines already present in the chansrv clipboard feature
Split the VNC module up, with the clip functionality in vnc_clip.h
Update vnc_clip.c to prevent refreshed RFB clip data which isn't actually a change from being communicated to the RDP client. This was useful when running autocutsel to prevent unnecessary messages to the RDP client.","This is no longer in draft.
The built-in VNC clipboard text-interface has been largely superseded by the xrdp-chansrv clipboard function. However there are still a few edge cases where this is required. For example, the user may be trying to connect to a VNC server on a platform where xrdp_chansrv is unavailable
There are a few problems with the interface at present, as reported in #1885 and #1616. To summarise:-

The clip text on the virtual channel isn't chunked into smaller virtual channel PDUs as detailed in MS-RDPBCGR 3.1.5.2. This means only a few kilobytes can be copied at most.
At times the clipboard only works one way
(Related to the above) The interface startup sequence doesn't conform to that details in MS-RDPECLIP.
Carriage returns are not always handled consistently.

On an engineering level, we're missing an ms-rdpeclip.h header for the constants. Also the modules are unaware of whether chansrv is running or not, which makes the logging difficult and means we're missing some optimisations. The actual clip functions in vnc.c use a lot of magic numbers which could be replaced with proper defines.
There are currently 5 commits in this PR:-

Add a function server_chansrv_in_use() to the module interface so modules know if chansrv is active.
2), Add a new string function g_strnchr() to look for a character in a string bounded by length.
Create an ms-rdpeclip.h include, using defines already present in the chansrv clipboard feature
Split the VNC module up, with the clip functionality in vnc_clip.h
Update vnc_clip.c to prevent refreshed RFB clip data which isn't actually a change from being communicated to the RDP client. This was useful when running autocutsel to prevent unnecessary messages to the RDP client.",True,"{'THUMBS_UP': ['https://github.com/aquesnel'], 'HEART': ['https://github.com/znestor']}"
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1900,2021-05-27T14:54:57Z,2021-07-07T08:22:58Z,2021-07-07T08:23:02Z,MERGED,True,1545,418,23,https://github.com/matt335672,Rework VNC text clipboard interface,6,[],https://github.com/neutrinolabs/xrdp/pull/1900,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/1900#issuecomment-856085679,"This is no longer in draft.
The built-in VNC clipboard text-interface has been largely superseded by the xrdp-chansrv clipboard function. However there are still a few edge cases where this is required. For example, the user may be trying to connect to a VNC server on a platform where xrdp_chansrv is unavailable
There are a few problems with the interface at present, as reported in #1885 and #1616. To summarise:-

The clip text on the virtual channel isn't chunked into smaller virtual channel PDUs as detailed in MS-RDPBCGR 3.1.5.2. This means only a few kilobytes can be copied at most.
At times the clipboard only works one way
(Related to the above) The interface startup sequence doesn't conform to that details in MS-RDPECLIP.
Carriage returns are not always handled consistently.

On an engineering level, we're missing an ms-rdpeclip.h header for the constants. Also the modules are unaware of whether chansrv is running or not, which makes the logging difficult and means we're missing some optimisations. The actual clip functions in vnc.c use a lot of magic numbers which could be replaced with proper defines.
There are currently 5 commits in this PR:-

Add a function server_chansrv_in_use() to the module interface so modules know if chansrv is active.
2), Add a new string function g_strnchr() to look for a character in a string bounded by length.
Create an ms-rdpeclip.h include, using defines already present in the chansrv clipboard feature
Split the VNC module up, with the clip functionality in vnc_clip.h
Update vnc_clip.c to prevent refreshed RFB clip data which isn't actually a change from being communicated to the RDP client. This was useful when running autocutsel to prevent unnecessary messages to the RDP client.","@aquesnel - thanks for that. I've addressed your minor review comments with the discussion about chunking still outstanding.
For the 32-bit compile fails, see #1916",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1902,2021-05-28T09:51:10Z,2021-05-28T09:56:37Z,2021-06-16T09:52:39Z,MERGED,True,4,1,3,https://github.com/matt335672,CI: Update package lists before adding packages,1,[],https://github.com/neutrinolabs/xrdp/pull/1902,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1902,"CI is currently failing (2021-05-28)
We need to update the package lists before installing build dependencies. The clue was that the 32-bit stuff was OK. so I worked back from there.
I've used the older style apt-get update rather than apt update for consistency.","CI is currently failing (2021-05-28)
We need to update the package lists before installing build dependencies. The clue was that the 32-bit stuff was OK. so I worked back from there.
I've used the older style apt-get update rather than apt update for consistency.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1903,2021-05-30T13:43:01Z,2021-06-28T09:11:41Z,2021-06-28T09:16:59Z,MERGED,True,143,0,3,https://github.com/TOMATO-ONE,neutrinordp: Allow users or administrators to configure the mstsc experience settings.,1,[],https://github.com/neutrinolabs/xrdp/pull/1903,https://github.com/TOMATO-ONE,1,https://github.com/neutrinolabs/xrdp/pull/1903,"Hi.
I am connecting to remote Windows 10 Pro with NeutrinoRDP Proxy.
I have found that when I have mouse cursor shadow enabled, the mouse cursor turns into a black square.
This is similar to what was reported in FreeRDP issue 5337.
The workaround is to disable the option to Enable pointer shadow in the mouse properties of the remote Windows.
I have confirmed that the same can be done with the xrdp-neutrinordp.c function lfreerdp_pre_connect().
b8ec98a
Best regards.","Hi.
I am connecting to remote Windows 10 Pro with NeutrinoRDP Proxy.
I have found that when I have mouse cursor shadow enabled, the mouse cursor turns into a black square.
This is similar to what was reported in FreeRDP issue 5337.
The workaround is to disable the option to Enable pointer shadow in the mouse properties of the remote Windows.
I have confirmed that the same can be done with the xrdp-neutrinordp.c function lfreerdp_pre_connect().
b8ec98a
Best regards.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1903,2021-05-30T13:43:01Z,2021-06-28T09:11:41Z,2021-06-28T09:16:59Z,MERGED,True,143,0,3,https://github.com/TOMATO-ONE,neutrinordp: Allow users or administrators to configure the mstsc experience settings.,1,[],https://github.com/neutrinolabs/xrdp/pull/1903,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/1903#issuecomment-851357306,"Hi.
I am connecting to remote Windows 10 Pro with NeutrinoRDP Proxy.
I have found that when I have mouse cursor shadow enabled, the mouse cursor turns into a black square.
This is similar to what was reported in FreeRDP issue 5337.
The workaround is to disable the option to Enable pointer shadow in the mouse properties of the remote Windows.
I have confirmed that the same can be done with the xrdp-neutrinordp.c function lfreerdp_pre_connect().
b8ec98a
Best regards.","Hi @TOMATO-ONE
Thanks for raising this.
This has been mentioned before - see #716, #1003, #1333.
Currently, I'm not comfortable with embedding a workaround in code without making an effort to figure out what is going on. I suspect that with a bit of extra effort we can probably get this working between us.
When we implemented #1807 we added some extra logging which may help with this. This logging in in v0.9.16 and the devel version so maybe that will help:-

  
    
      xrdp/neutrinordp/xrdp-neutrinordp.c
    
    
        Lines 1455 to 1457
      in
      148000c
    
  
  
    

        
          
           LOG(LOG_LEVEL_WARNING, ""lfreerdp_pointer_new: error bpp %d width %d height %d index: %d"", 
        

        
          
               pointer_new->xorBpp, pointer_new->colorPtrAttr.width, 
        

        
          
               pointer_new->colorPtrAttr.height, index); 
        
    
  


Are you seeing any messages like this in the xrdp log file?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1903,2021-05-30T13:43:01Z,2021-06-28T09:11:41Z,2021-06-28T09:16:59Z,MERGED,True,143,0,3,https://github.com/TOMATO-ONE,neutrinordp: Allow users or administrators to configure the mstsc experience settings.,1,[],https://github.com/neutrinolabs/xrdp/pull/1903,https://github.com/TOMATO-ONE,3,https://github.com/neutrinolabs/xrdp/pull/1903#issuecomment-851465242,"Hi.
I am connecting to remote Windows 10 Pro with NeutrinoRDP Proxy.
I have found that when I have mouse cursor shadow enabled, the mouse cursor turns into a black square.
This is similar to what was reported in FreeRDP issue 5337.
The workaround is to disable the option to Enable pointer shadow in the mouse properties of the remote Windows.
I have confirmed that the same can be done with the xrdp-neutrinordp.c function lfreerdp_pre_connect().
b8ec98a
Best regards.","Hi. @matt335672
The new_cursors=false mentioned in #716 did not work around this.
A fix for a similar issue was made in FreeRDP PR #4552, and the fix was beyond my understanding, so I gave up.
As you said, it was hasty to try to implement the workaround without knowing the cause.
In the normal build of xrdp v0.9.16, I got the following DEBUG log.
[20210531-20:44:28] [WARN ] lfreerdp_pointer_new: error bpp 32 width 41 height 39 index: 0
[20210531-20:44:29] [DEBUG] Request to send a message to the disabled channel drdynvc (3)
[20210531-20:44:30] [WARN ] lfreerdp_pointer_new: error bpp 32 width 41 height 39 index: 1
[20210531-20:44:30] [DEBUG] Request to send a message to the disabled channel drdynvc (3)
<snip>
[20210531-20:45:09] [DEBUG] Request to send a message to the disabled channel drdynvc (3)
[20210531-20:45:10] [WARN ] lfreerdp_pointer_new: error bpp 32 width 41 height 39 index: 2
[20210531-20:45:16] [WARN ] lfreerdp_pointer_new: error bpp 32 width 41 height 39 index: 3
[20210531-20:45:19] [WARN ] lfreerdp_pointer_new: error bpp 32 width 41 height 39 index: 4
[20210531-20:45:25] [WARN ] lfreerdp_pointer_new: error bpp 32 width 41 height 39 index: 5
[20210531-20:45:50] [WARN ] lfreerdp_pointer_new: error bpp 32 width 41 height 39 index: 7

In xrdpdebug build of xrdp devel
/ # tail -f /var/log/xrdp.log | grep lfreerdp_pointer_new
[20210531-11:14:16] [DEBUG] [lfreerdp_pointer_new(xrdp-neutrinordp.c:1399)] lfreerdp_pointer_new:
[20210531-11:14:16] [DEBUG] [lfreerdp_pointer_new(xrdp-neutrinordp.c:1400)]   bpp 32
[20210531-11:14:16] [DEBUG] [lfreerdp_pointer_new(xrdp-neutrinordp.c:1401)]   width 41 height 39
[20210531-11:14:16] [DEBUG] [lfreerdp_pointer_new(xrdp-neutrinordp.c:1404)]   lengthXorMask 6396 lengthAndMask 234
[20210531-11:14:16] [WARN ] [lfreerdp_pointer_new(xrdp-neutrinordp.c:1455)] lfreerdp_pointer_new: error bpp 32 width 41 height 39 index: 0
[20210531-11:14:18] [DEBUG] [lfreerdp_pointer_new(xrdp-neutrinordp.c:1399)] lfreerdp_pointer_new:
[20210531-11:14:18] [DEBUG] [lfreerdp_pointer_new(xrdp-neutrinordp.c:1400)]   bpp 24
[20210531-11:14:18] [DEBUG] [lfreerdp_pointer_new(xrdp-neutrinordp.c:1401)]   width 32 height 32
[20210531-11:14:18] [DEBUG] [lfreerdp_pointer_new(xrdp-neutrinordp.c:1404)]   lengthXorMask 3072 lengthAndMask 128
[20210531-11:14:18] [DEBUG] [lfreerdp_pointer_new(xrdp-neutrinordp.c:1441)] lfreerdp_pointer_new: bpp 24 Bpp 3
[20210531-11:14:19] [DEBUG] [lfreerdp_pointer_new(xrdp-neutrinordp.c:1399)] lfreerdp_pointer_new:
[20210531-11:14:19] [DEBUG] [lfreerdp_pointer_new(xrdp-neutrinordp.c:1400)]   bpp 24
[20210531-11:14:19] [DEBUG] [lfreerdp_pointer_new(xrdp-neutrinordp.c:1401)]   width 32 height 32
[20210531-11:14:19] [DEBUG] [lfreerdp_pointer_new(xrdp-neutrinordp.c:1404)]   lengthXorMask 3072 lengthAndMask 128
[20210531-11:14:19] [DEBUG] [lfreerdp_pointer_new(xrdp-neutrinordp.c:1441)] lfreerdp_pointer_new: bpp 24 Bpp 3
[20210531-11:14:21] [DEBUG] [lfreerdp_pointer_new(xrdp-neutrinordp.c:1399)] lfreerdp_pointer_new:
[20210531-11:14:21] [DEBUG] [lfreerdp_pointer_new(xrdp-neutrinordp.c:1400)]   bpp 24
[20210531-11:14:21] [DEBUG] [lfreerdp_pointer_new(xrdp-neutrinordp.c:1401)]   width 32 height 32
[20210531-11:14:21] [DEBUG] [lfreerdp_pointer_new(xrdp-neutrinordp.c:1404)]   lengthXorMask 3072 lengthAndMask 128
[20210531-11:14:21] [DEBUG] [lfreerdp_pointer_new(xrdp-neutrinordp.c:1441)] lfreerdp_pointer_new: bpp 24 Bpp 3",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1903,2021-05-30T13:43:01Z,2021-06-28T09:11:41Z,2021-06-28T09:16:59Z,MERGED,True,143,0,3,https://github.com/TOMATO-ONE,neutrinordp: Allow users or administrators to configure the mstsc experience settings.,1,[],https://github.com/neutrinolabs/xrdp/pull/1903,https://github.com/TOMATO-ONE,4,https://github.com/neutrinolabs/xrdp/pull/1903#issuecomment-851729309,"Hi.
I am connecting to remote Windows 10 Pro with NeutrinoRDP Proxy.
I have found that when I have mouse cursor shadow enabled, the mouse cursor turns into a black square.
This is similar to what was reported in FreeRDP issue 5337.
The workaround is to disable the option to Enable pointer shadow in the mouse properties of the remote Windows.
I have confirmed that the same can be done with the xrdp-neutrinordp.c function lfreerdp_pre_connect().
b8ec98a
Best regards.",Should we close this PR and continue the discussion in issue #1333?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1903,2021-05-30T13:43:01Z,2021-06-28T09:11:41Z,2021-06-28T09:16:59Z,MERGED,True,143,0,3,https://github.com/TOMATO-ONE,neutrinordp: Allow users or administrators to configure the mstsc experience settings.,1,[],https://github.com/neutrinolabs/xrdp/pull/1903,https://github.com/matt335672,5,https://github.com/neutrinolabs/xrdp/pull/1903#issuecomment-852079754,"Hi.
I am connecting to remote Windows 10 Pro with NeutrinoRDP Proxy.
I have found that when I have mouse cursor shadow enabled, the mouse cursor turns into a black square.
This is similar to what was reported in FreeRDP issue 5337.
The workaround is to disable the option to Enable pointer shadow in the mouse properties of the remote Windows.
I have confirmed that the same can be done with the xrdp-neutrinordp.c function lfreerdp_pre_connect().
b8ec98a
Best regards.","That's a useful log.
I've had a look at the code, and a pointer size of 32x32 is pretty baked in to the cursor code.
There's a bit to be done to make this work. So far I've identified the following:-

At the start of the negotiation with the RDP client, we need to send a Large pointer capability set structure to say we support pointers of up to 96x96 pixels.
The structures we store pointers in need to be made larger (or dynamically allocated) and the pointer size needs to be stored in these structures.
All the pointer caching routines need to updated to cope with variable size pointers.

It's all doable, and I think we should probably do it, but it's quite a lot of work. There's probably stuff I've left off of the above list too - it's not an area I'm that familiar with.
I'm happy to look into the above (I understand it's pretty hairy) but it'll take a bit of time to get it working and debugged I'm also conscious of the need to give you a better way forward than modifying the code.
Would you be happy to work on your PR above to make it user-controllable? You could for example add an enable_cursor_shadow=[true|false] option to the neutrinordp section. The option would default to 'true', but if set to false, you'd disable that performance option as you've done above.
So you'd add something like the following to xrdp/xrdp.ini.in:-
; By default NeutrinoRDP supports cursor shadows. If this is giving you problems
; (e.g. cursor is a black rectangle) try disabling cursor shadows by uncommenting
; the following line
#enable_cursor_shadow=false

Then you'd modify your code above to check the value of the setting and react appropriately.
Let me know what you think.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1903,2021-05-30T13:43:01Z,2021-06-28T09:11:41Z,2021-06-28T09:16:59Z,MERGED,True,143,0,3,https://github.com/TOMATO-ONE,neutrinordp: Allow users or administrators to configure the mstsc experience settings.,1,[],https://github.com/neutrinolabs/xrdp/pull/1903,https://github.com/TOMATO-ONE,6,https://github.com/neutrinolabs/xrdp/pull/1903#issuecomment-852129789,"Hi.
I am connecting to remote Windows 10 Pro with NeutrinoRDP Proxy.
I have found that when I have mouse cursor shadow enabled, the mouse cursor turns into a black square.
This is similar to what was reported in FreeRDP issue 5337.
The workaround is to disable the option to Enable pointer shadow in the mouse properties of the remote Windows.
I have confirmed that the same can be done with the xrdp-neutrinordp.c function lfreerdp_pre_connect().
b8ec98a
Best regards.","HI. @matt335672
Thank you for the detailed instruction on the cause.
I will continue to work on this PR.
I actually realized while considering this PR that the NeutrinoRDP Proxy has a fixed performance setting.
Wallpaper, menu animation, etc. are disabled by default.

  
    
      xrdp/neutrinordp/xrdp-neutrinordp.c
    
    
        Lines 1670 to 1682
      in
      148000c
    
  
  
    

        
          
               instance->settings->performance_flags = PERF_DISABLE_WALLPAPER | PERF_DISABLE_FULLWINDOWDRAG; 
        

        
          
               instance->settings->num_icon_caches = mod->client_info.wnd_num_icon_caches; 
        

        
          
               instance->settings->num_icon_cache_entries = mod->client_info.wnd_num_icon_cache_entries; 
        

        
          
            
        

        
          
            
        

        
          
           } 
        

        
          
           else 
        

        
          
           { 
        

        
          
               LOG_DEVEL(LOG_LEVEL_DEBUG, ""Special PerformanceFlags changed""); 
        

        
          
               instance->settings->performance_flags = PERF_DISABLE_WALLPAPER | 
        

        
          
                                                       PERF_DISABLE_FULLWINDOWDRAG | PERF_DISABLE_MENUANIMATIONS | 
        

        
          
                                                       PERF_DISABLE_THEMING; 
        

        
          
               // | PERF_DISABLE_CURSOR_SHADOW | PERF_DISABLE_CURSORSETTINGS; 
        
    
  


I would like to be able to make this configurable by the RDP client user.
I would also like the RDP Proxy administrator to be able to enforce the settings.
In the xrdp.ini, the following parameters can be specified in the nearinordp section.
rdpproxy.disable_wallpaper = [ default | true | false | client ]
rdpproxy.disable_fullwindowdrag = [ default | true | false | client ]
rdpproxy.disable_menuanimations = [ default | true | false | client ]
rdpproxy.disable_theming = [ default | true | false | client ]
rdpproxy.enable_font_smoothing = [ default | true | false | client ]
rdpproxy.enable_desktop_composition = [ default | true | false | client ]
rdpproxy.disable_cursorsettings = [ default | true | false | client ]
rdpproxy.disable_cursor_shadow = [ default | true | false  ] *

note: There is a value for disable_cursor_shadow in performance_flag, but I could not find a UI to control it on the RDP Client side.
The possible values for each parameter are as follows
default  : use the default value of xrdp neutrinordp proxy 
true : force  to  true 
false : force to false    
client : use the RDP client setting ( mstsc.exe -> experience )

Except for the cursor shadow , I have confirmed that I can get the RDP client settings with rdp5_performanceflags.

  
    
      xrdp/common/xrdp_client_info.h
    
    
         Line 83
      in
      148000c
    
  
  
    

        
          
           int rdp5_performanceflags; 
        
    
  


I would like to discuss the following points.

In Windows 2012R2 and later, the parameters ""theming"", ""desktop_composition"", and ""font_smoothing"" do not reduce the amount of data communication, so I am concerned that the options dedicated to NeutrinoRDP will become bloated. Should I omit them?
I thought of the context name ""rdpproxy"" for identification purposes, since the parameter cannot be used in Xorg or Xvnc. Is this appropriate?
The names of the parameters are not intuitive, but I'm referring to NeutrinoRDP's settings.h.
https://github.com/neutrinolabs/NeutrinoRDP/blob/f7832d6ce8f12f4b999a2a4edc6cc72373bc5168/include/freerdp/settings.h#L27-L37
Another idea is to match the description in the mstsc.exe configuration file (*.rdp).

disable_wallpaper
allow_font_smoothing
allow_desktop_composition
disable_full_window_drag
disable_menu_anims
disable_themes
disable_cursor_setting
disable_cursor_shadow *

note: disable_cursor_shadow is not in the *.rdp file
If you have a better parameter name, please suggest it.

I would suggest changing the name of the PR, but I can't think of a good, concise sentence. Please suggest

regards.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1903,2021-05-30T13:43:01Z,2021-06-28T09:11:41Z,2021-06-28T09:16:59Z,MERGED,True,143,0,3,https://github.com/TOMATO-ONE,neutrinordp: Allow users or administrators to configure the mstsc experience settings.,1,[],https://github.com/neutrinolabs/xrdp/pull/1903,https://github.com/matt335672,7,https://github.com/neutrinolabs/xrdp/pull/1903#issuecomment-852957134,"Hi.
I am connecting to remote Windows 10 Pro with NeutrinoRDP Proxy.
I have found that when I have mouse cursor shadow enabled, the mouse cursor turns into a black square.
This is similar to what was reported in FreeRDP issue 5337.
The workaround is to disable the option to Enable pointer shadow in the mouse properties of the remote Windows.
I have confirmed that the same can be done with the xrdp-neutrinordp.c function lfreerdp_pre_connect().
b8ec98a
Best regards.","Hi @TOMATO-ONE
You've clearly done a lot of thinking about this.
I think I can clear up one mystery above; the cursor shadow setting is possibly taken from the Windows control panel setting rather than being a separate item in the RDP client.
The performance flags are indeed sent over from the client in the TS_EXTENDED_INFO_PACKET from the client. This is documented in [MS-RDPBCGR] 2.2.1.11.1.1.1 which is well worth a read, if you haven't already. In particular there's this section:-

If the connectionType field of the Client Core Data (section 2.2.1.3.2) is set to CONNECTION_TYPE_AUTODETECT (0x07),
and the client indicates support for network characteristics detection by specifying the
RNS_UD_CS_SUPPORT_NETCHAR_AUTODETECT (0x0080) flag in the earlyCapabilityFlags field of the Client Core
Data, then the server SHOULD ignore the contents of the performanceFlags field if the connection type can be
determined (using the PDUs specified in section 2.2.14) and SHOULD instead determine an appropriate set of
performance flags to apply to the remote session based on the detected connection type.

We don't support the performance measuring PDUs, so we won't be doing any of the SHOULD items above.
Also, @metalefty has made a very valid point in the past that many xrdp users don't have English as a first language. So I don't think a mix of enable/disable options is a good way to present this, even though it's in a config file and oddly MS have decided it's a good idea.
On my Windows 10 machine (en-GB), the mstsc.exe client 'Experience' tab presents all these options as 'enable', e.g.:-


Desktop background
Font smoothing
Desktop composition
Show windows contents while dragging
Menu and Window animation
Visual Styles

I think names for these options should follow this approach. Modifying your suggestions slightly we get:-



Option (xrdp ini file)
Flag setting




perf.wallpaper
PERF_DISABLE_WALLPAPER (inverted)


perf.font_smoothing
PERF_ENABLE_FONT_SMOOTHING


perf.desktop_composition
PERF_ENABLE_DESKTOP_COMPOSITION


perf.full_window_drag
PERF_DISABLE_FULLWINDOWDRAG (inverted)


perf.menu_anims
PERF_DISABLE_MENUANIMATIONS (inverted)


perf.themes
PERF_DISABLE_THEMING (inverted)


perf.cursor_blink
PERF_DISABLE_CURSORSETTINGS (inverted)


perf.cursor_shadow
PERF_DISABLE_CURSOR_SHADOW (inverted)



One of the advantages is that a user can go through the whole set and set them to 'on' or 'off' in the same way that they can use the tick boxes on the client.
As for setting values, this could work:-

Settings above are normally commented out.
With commented-out settings, if the user sets CONNECTION_TYPE_AUTODETECT, just go with the current settings. That gives us no change in behaviour.
With commented-out settings, if auto-detect isn't set, go with the client settings in TS_EXTENDED_INFO_PACKET
Any uncommented settings override settings made above in 2 or 3. Use the function text2bool() to get the value of a setting if it's defined.

I'm sure as we work through this you'll think of a better name for the PR - I leave that to you.
BTW, thanks for the interesting discussion!",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1903,2021-05-30T13:43:01Z,2021-06-28T09:11:41Z,2021-06-28T09:16:59Z,MERGED,True,143,0,3,https://github.com/TOMATO-ONE,neutrinordp: Allow users or administrators to configure the mstsc experience settings.,1,[],https://github.com/neutrinolabs/xrdp/pull/1903,https://github.com/TOMATO-ONE,8,https://github.com/neutrinolabs/xrdp/pull/1903#issuecomment-854900254,"Hi.
I am connecting to remote Windows 10 Pro with NeutrinoRDP Proxy.
I have found that when I have mouse cursor shadow enabled, the mouse cursor turns into a black square.
This is similar to what was reported in FreeRDP issue 5337.
The workaround is to disable the option to Enable pointer shadow in the mouse properties of the remote Windows.
I have confirmed that the same can be done with the xrdp-neutrinordp.c function lfreerdp_pre_connect().
b8ec98a
Best regards.","Hi, @matt335672
Thank you for everything.
As a non-native speaker of English, I am always wondering if my idea of a word is appropriate worldwide.
Thank you for the suggestions for appropriate parameter names.
I would like to adopt your suggestion.
I am working on it now.
perf.* configuration part is working.
When I was thinking about the handling of the CONNECTION_TYPE_AUTODETECT flag, I realized that.
If we simply accept the mstsc experience setting with or without this flag, the behavior will change when we upgrade from v0.9.16.
Until now, NeutrinoRDP ignored any experience settings made by RDP client users, but after upgrading, NeutrinoRDP will enable them.
For example, the wallpaper may suddenly appear after an upgrade, and users may be confused by the change in appearance and performance, and administrators may be surprised by the increase in data transfer.
So I would like to add one more parameter to xrdp.ini neutrinordp section.
; Allow the RDP Client user to set the Experience settings.
perf.allow_experiencesettings=[false|true]

When this parameter is commented out, mstsc's experience setting will be ignored by neutrinordp as before.
Please let us know what you think.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1903,2021-05-30T13:43:01Z,2021-06-28T09:11:41Z,2021-06-28T09:16:59Z,MERGED,True,143,0,3,https://github.com/TOMATO-ONE,neutrinordp: Allow users or administrators to configure the mstsc experience settings.,1,[],https://github.com/neutrinolabs/xrdp/pull/1903,https://github.com/matt335672,9,https://github.com/neutrinolabs/xrdp/pull/1903#issuecomment-856041071,"Hi.
I am connecting to remote Windows 10 Pro with NeutrinoRDP Proxy.
I have found that when I have mouse cursor shadow enabled, the mouse cursor turns into a black square.
This is similar to what was reported in FreeRDP issue 5337.
The workaround is to disable the option to Enable pointer shadow in the mouse properties of the remote Windows.
I have confirmed that the same can be done with the xrdp-neutrinordp.c function lfreerdp_pre_connect().
b8ec98a
Best regards.","It's a very good point.
My own thinking however, is not to complicate it with an extra parameter. We can mention in the release notes that behaviour may change.
My reason is that because NeutrinoRDP users have to build NeutrinoRDP themselves, these users (like yourself) tend to be more knowledgeable than more casual users of xrdp, and are more likely to read release notes before installing updates.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1903,2021-05-30T13:43:01Z,2021-06-28T09:11:41Z,2021-06-28T09:16:59Z,MERGED,True,143,0,3,https://github.com/TOMATO-ONE,neutrinordp: Allow users or administrators to configure the mstsc experience settings.,1,[],https://github.com/neutrinolabs/xrdp/pull/1903,https://github.com/matt335672,10,https://github.com/neutrinolabs/xrdp/pull/1903#issuecomment-856041293,"Hi.
I am connecting to remote Windows 10 Pro with NeutrinoRDP Proxy.
I have found that when I have mouse cursor shadow enabled, the mouse cursor turns into a black square.
This is similar to what was reported in FreeRDP issue 5337.
The workaround is to disable the option to Enable pointer shadow in the mouse properties of the remote Windows.
I have confirmed that the same can be done with the xrdp-neutrinordp.c function lfreerdp_pre_connect().
b8ec98a
Best regards.",BTW: Nice title.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1903,2021-05-30T13:43:01Z,2021-06-28T09:11:41Z,2021-06-28T09:16:59Z,MERGED,True,143,0,3,https://github.com/TOMATO-ONE,neutrinordp: Allow users or administrators to configure the mstsc experience settings.,1,[],https://github.com/neutrinolabs/xrdp/pull/1903,https://github.com/TOMATO-ONE,11,https://github.com/neutrinolabs/xrdp/pull/1903#issuecomment-860176521,"Hi.
I am connecting to remote Windows 10 Pro with NeutrinoRDP Proxy.
I have found that when I have mouse cursor shadow enabled, the mouse cursor turns into a black square.
This is similar to what was reported in FreeRDP issue 5337.
The workaround is to disable the option to Enable pointer shadow in the mouse properties of the remote Windows.
I have confirmed that the same can be done with the xrdp-neutrinordp.c function lfreerdp_pre_connect().
b8ec98a
Best regards.","Hi @matt335672
Thank you for your suggestions!
You're right.
I think NeutrinoRDP Proxy users will read the release notes carefully.
It may not need complex logic.
However, it is much easier to add the logic and then remove the unneeded logic than to add it later.
Therefore, agreeing with your opinion, once we have included the code to determine the perf.allow_client_experiencesettings parameter, we have created the code.
If it is still inappropriate during the review process, I would like to remove it.
Regard.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1903,2021-05-30T13:43:01Z,2021-06-28T09:11:41Z,2021-06-28T09:16:59Z,MERGED,True,143,0,3,https://github.com/TOMATO-ONE,neutrinordp: Allow users or administrators to configure the mstsc experience settings.,1,[],https://github.com/neutrinolabs/xrdp/pull/1903,https://github.com/TOMATO-ONE,12,https://github.com/neutrinolabs/xrdp/pull/1903#issuecomment-864481177,"Hi.
I am connecting to remote Windows 10 Pro with NeutrinoRDP Proxy.
I have found that when I have mouse cursor shadow enabled, the mouse cursor turns into a black square.
This is similar to what was reported in FreeRDP issue 5337.
The workaround is to disable the option to Enable pointer shadow in the mouse properties of the remote Windows.
I have confirmed that the same can be done with the xrdp-neutrinordp.c function lfreerdp_pre_connect().
b8ec98a
Best regards.","HI @matt335672
I rewrote the code based on your advice.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1903,2021-05-30T13:43:01Z,2021-06-28T09:11:41Z,2021-06-28T09:16:59Z,MERGED,True,143,0,3,https://github.com/TOMATO-ONE,neutrinordp: Allow users or administrators to configure the mstsc experience settings.,1,[],https://github.com/neutrinolabs/xrdp/pull/1903,https://github.com/matt335672,13,https://github.com/neutrinolabs/xrdp/pull/1903#issuecomment-865030516,"Hi.
I am connecting to remote Windows 10 Pro with NeutrinoRDP Proxy.
I have found that when I have mouse cursor shadow enabled, the mouse cursor turns into a black square.
This is similar to what was reported in FreeRDP issue 5337.
The workaround is to disable the option to Enable pointer shadow in the mouse properties of the remote Windows.
I have confirmed that the same can be done with the xrdp-neutrinordp.c function lfreerdp_pre_connect().
b8ec98a
Best regards.","Hi @TOMATO-ONE
Thanks for implementing that.
I'd like to talk about the perf.allow_experience settings flag you've got too. I'm not entirely sure I understand what you're doing with it, and talking will help me to get there I think.
At the moment, looking at the code, I think the purpose of the flag is to allow the client to specify the experience settings. Is that right?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1903,2021-05-30T13:43:01Z,2021-06-28T09:11:41Z,2021-06-28T09:16:59Z,MERGED,True,143,0,3,https://github.com/TOMATO-ONE,neutrinordp: Allow users or administrators to configure the mstsc experience settings.,1,[],https://github.com/neutrinolabs/xrdp/pull/1903,https://github.com/TOMATO-ONE,14,https://github.com/neutrinolabs/xrdp/pull/1903#issuecomment-865063569,"Hi.
I am connecting to remote Windows 10 Pro with NeutrinoRDP Proxy.
I have found that when I have mouse cursor shadow enabled, the mouse cursor turns into a black square.
This is similar to what was reported in FreeRDP issue 5337.
The workaround is to disable the option to Enable pointer shadow in the mouse properties of the remote Windows.
I have confirmed that the same can be done with the xrdp-neutrinordp.c function lfreerdp_pre_connect().
b8ec98a
Best regards.","Hi. @matt335672
Thanks for the input.
I was lost for a long time while coding.
I thought about the users who don't want this extra feature.
I thought it would be better to not enable this feature unless the user explicitly sets it to true.
That's the only reason I left the perf.allow_experience_settings.
If your policy is to focus on eliminating complexity in your code, I think it is fine to remove it.
Please let me know your thoughts again.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1903,2021-05-30T13:43:01Z,2021-06-28T09:11:41Z,2021-06-28T09:16:59Z,MERGED,True,143,0,3,https://github.com/TOMATO-ONE,neutrinordp: Allow users or administrators to configure the mstsc experience settings.,1,[],https://github.com/neutrinolabs/xrdp/pull/1903,https://github.com/matt335672,15,https://github.com/neutrinolabs/xrdp/pull/1903#issuecomment-865719062,"Hi.
I am connecting to remote Windows 10 Pro with NeutrinoRDP Proxy.
I have found that when I have mouse cursor shadow enabled, the mouse cursor turns into a black square.
This is similar to what was reported in FreeRDP issue 5337.
The workaround is to disable the option to Enable pointer shadow in the mouse properties of the remote Windows.
I have confirmed that the same can be done with the xrdp-neutrinordp.c function lfreerdp_pre_connect().
b8ec98a
Best regards.","I think we can keep the setting, but we should modify the comments you've got in the ini file and the code to make the
intent clearer. I'll add a couple of review comments for discussion.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1903,2021-05-30T13:43:01Z,2021-06-28T09:11:41Z,2021-06-28T09:16:59Z,MERGED,True,143,0,3,https://github.com/TOMATO-ONE,neutrinordp: Allow users or administrators to configure the mstsc experience settings.,1,[],https://github.com/neutrinolabs/xrdp/pull/1903,https://github.com/TOMATO-ONE,16,https://github.com/neutrinolabs/xrdp/pull/1903#issuecomment-865954173,"Hi.
I am connecting to remote Windows 10 Pro with NeutrinoRDP Proxy.
I have found that when I have mouse cursor shadow enabled, the mouse cursor turns into a black square.
This is similar to what was reported in FreeRDP issue 5337.
The workaround is to disable the option to Enable pointer shadow in the mouse properties of the remote Windows.
I have confirmed that the same can be done with the xrdp-neutrinordp.c function lfreerdp_pre_connect().
b8ec98a
Best regards.","HI. @matt335672
I squashed it and pushed it again.
Thank you for suggesting the correct wording!",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1903,2021-05-30T13:43:01Z,2021-06-28T09:11:41Z,2021-06-28T09:16:59Z,MERGED,True,143,0,3,https://github.com/TOMATO-ONE,neutrinordp: Allow users or administrators to configure the mstsc experience settings.,1,[],https://github.com/neutrinolabs/xrdp/pull/1903,https://github.com/matt335672,17,https://github.com/neutrinolabs/xrdp/pull/1903#issuecomment-866685040,"Hi.
I am connecting to remote Windows 10 Pro with NeutrinoRDP Proxy.
I have found that when I have mouse cursor shadow enabled, the mouse cursor turns into a black square.
This is similar to what was reported in FreeRDP issue 5337.
The workaround is to disable the option to Enable pointer shadow in the mouse properties of the remote Windows.
I have confirmed that the same can be done with the xrdp-neutrinordp.c function lfreerdp_pre_connect().
b8ec98a
Best regards.","Thanks for working with me on this @TOMATO-ONE
@metalefty - I'm happy with this PR. Can you take a quick look at it please before I merge?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1903,2021-05-30T13:43:01Z,2021-06-28T09:11:41Z,2021-06-28T09:16:59Z,MERGED,True,143,0,3,https://github.com/TOMATO-ONE,neutrinordp: Allow users or administrators to configure the mstsc experience settings.,1,[],https://github.com/neutrinolabs/xrdp/pull/1903,https://github.com/matt335672,18,https://github.com/neutrinolabs/xrdp/pull/1903#issuecomment-868319366,"Hi.
I am connecting to remote Windows 10 Pro with NeutrinoRDP Proxy.
I have found that when I have mouse cursor shadow enabled, the mouse cursor turns into a black square.
This is similar to what was reported in FreeRDP issue 5337.
The workaround is to disable the option to Enable pointer shadow in the mouse properties of the remote Windows.
I have confirmed that the same can be done with the xrdp-neutrinordp.c function lfreerdp_pre_connect().
b8ec98a
Best regards.","@TOMATO-ONE - fix up @metalefty's comment above and I'll merge this.
Thanks both.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1903,2021-05-30T13:43:01Z,2021-06-28T09:11:41Z,2021-06-28T09:16:59Z,MERGED,True,143,0,3,https://github.com/TOMATO-ONE,neutrinordp: Allow users or administrators to configure the mstsc experience settings.,1,[],https://github.com/neutrinolabs/xrdp/pull/1903,https://github.com/TOMATO-ONE,19,https://github.com/neutrinolabs/xrdp/pull/1903#issuecomment-868991216,"Hi.
I am connecting to remote Windows 10 Pro with NeutrinoRDP Proxy.
I have found that when I have mouse cursor shadow enabled, the mouse cursor turns into a black square.
This is similar to what was reported in FreeRDP issue 5337.
The workaround is to disable the option to Enable pointer shadow in the mouse properties of the remote Windows.
I have confirmed that the same can be done with the xrdp-neutrinordp.c function lfreerdp_pre_connect().
b8ec98a
Best regards.","Thanks. @matt335672 , @metalefty
We have solved a problem that has been with us for a year.
I'm happy too.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1908,2021-06-02T14:54:19Z,2021-06-02T15:11:16Z,2021-06-16T09:52:32Z,MERGED,True,1,1,1,https://github.com/matt335672,Fixes --enable-devel-streamcheck,1,[],https://github.com/neutrinolabs/xrdp/pull/1908,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1908,Silly typo which I forgot to update when merging #1887,Silly typo which I forgot to update when merging #1887,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1913,2021-06-04T13:53:22Z,2021-06-07T13:38:22Z,2021-06-16T09:52:18Z,MERGED,True,9,1,2,https://github.com/matt335672,Actively prevent user from specifying --enable-xrdpdebug,1,[],https://github.com/neutrinolabs/xrdp/pull/1913,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1913,"I noticed yesterday that one of the CI jobs was still using --enable-xrdpdebug instead of the more general --enable-devel-all option (see #1887)
This minor PR addresses that and makes --enable-xrdpdebug an error to inform developers of the change.","I noticed yesterday that one of the CI jobs was still using --enable-xrdpdebug instead of the more general --enable-devel-all option (see #1887)
This minor PR addresses that and makes --enable-xrdpdebug an error to inform developers of the change.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1916,2021-06-07T15:23:52Z,2021-06-08T02:35:11Z,2021-06-16T09:52:08Z,MERGED,True,3,3,1,https://github.com/matt335672,Bump legacy OS to Ubuntu 18.04,1,[],https://github.com/neutrinolabs/xrdp/pull/1916,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1916,"16.04 Ubuntu legacy builds are broken again in Github actions. I've just merged PR #1913 which was fine 3 days ago.
It's going to become harder to fix this over the next few months as GitHub actions are deprecating 16.04 - see actions/virtual-environments#3287
Anyone object to bumping the 'legacy' build platform to 18.04 now rather than waiting 3 months until September?","16.04 Ubuntu legacy builds are broken again in Github actions. I've just merged PR #1913 which was fine 3 days ago.
It's going to become harder to fix this over the next few months as GitHub actions are deprecating 16.04 - see actions/virtual-environments#3287
Anyone object to bumping the 'legacy' build platform to 18.04 now rather than waiting 3 months until September?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1925,2021-06-18T11:22:14Z,2021-08-02T13:33:59Z,2021-08-02T13:34:05Z,MERGED,True,1390,1071,38,https://github.com/matt335672,Move scp to standard transport,7,[],https://github.com/neutrinolabs/xrdp/pull/1925,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1925,"The PR is based on part of #1602.
#1602 is in two parts:-

Move SCP away from using struct SCP_CONNECTION as a connection type to the more standard struct trans transport type used everywhere else
Add the capability to use UNIX domain sockets for SCP

Both of these are necessary moving forwards to modernise SCP. This PR focusses on the first half only.
I've taken @jsorg71's original commits and rebased them. I've then completely removed the struct SCP_CONNECTION to avoid confusion, and to ensure that the transition to struct trans is complete. This has entailed updating the utilities.
There's still a lot to do for SCP. This is only a start.","The PR is based on part of #1602.
#1602 is in two parts:-

Move SCP away from using struct SCP_CONNECTION as a connection type to the more standard struct trans transport type used everywhere else
Add the capability to use UNIX domain sockets for SCP

Both of these are necessary moving forwards to modernise SCP. This PR focusses on the first half only.
I've taken @jsorg71's original commits and rebased them. I've then completely removed the struct SCP_CONNECTION to avoid confusion, and to ensure that the transition to struct trans is complete. This has entailed updating the utilities.
There's still a lot to do for SCP. This is only a start.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1925,2021-06-18T11:22:14Z,2021-08-02T13:33:59Z,2021-08-02T13:34:05Z,MERGED,True,1390,1071,38,https://github.com/matt335672,Move scp to standard transport,7,[],https://github.com/neutrinolabs/xrdp/pull/1925,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/1925#issuecomment-882399829,"The PR is based on part of #1602.
#1602 is in two parts:-

Move SCP away from using struct SCP_CONNECTION as a connection type to the more standard struct trans transport type used everywhere else
Add the capability to use UNIX domain sockets for SCP

Both of these are necessary moving forwards to modernise SCP. This PR focusses on the first half only.
I've taken @jsorg71's original commits and rebased them. I've then completely removed the struct SCP_CONNECTION to avoid confusion, and to ensure that the transition to struct trans is complete. This has entailed updating the utilities.
There's still a lot to do for SCP. This is only a start.",Review comments addressed.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1925,2021-06-18T11:22:14Z,2021-08-02T13:33:59Z,2021-08-02T13:34:05Z,MERGED,True,1390,1071,38,https://github.com/matt335672,Move scp to standard transport,7,[],https://github.com/neutrinolabs/xrdp/pull/1925,https://github.com/jsorg71,3,https://github.com/neutrinolabs/xrdp/pull/1925#issuecomment-886419879,"The PR is based on part of #1602.
#1602 is in two parts:-

Move SCP away from using struct SCP_CONNECTION as a connection type to the more standard struct trans transport type used everywhere else
Add the capability to use UNIX domain sockets for SCP

Both of these are necessary moving forwards to modernise SCP. This PR focusses on the first half only.
I've taken @jsorg71's original commits and rebased them. I've then completely removed the struct SCP_CONNECTION to avoid confusion, and to ensure that the transition to struct trans is complete. This has entailed updating the utilities.
There's still a lot to do for SCP. This is only a start.","Thanks for this, it will be great to removing this unnecessary TCP listener.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1925,2021-06-18T11:22:14Z,2021-08-02T13:33:59Z,2021-08-02T13:34:05Z,MERGED,True,1390,1071,38,https://github.com/matt335672,Move scp to standard transport,7,[],https://github.com/neutrinolabs/xrdp/pull/1925,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/1925#issuecomment-887362933,"The PR is based on part of #1602.
#1602 is in two parts:-

Move SCP away from using struct SCP_CONNECTION as a connection type to the more standard struct trans transport type used everywhere else
Add the capability to use UNIX domain sockets for SCP

Both of these are necessary moving forwards to modernise SCP. This PR focusses on the first half only.
I've taken @jsorg71's original commits and rebased them. I've then completely removed the struct SCP_CONNECTION to avoid confusion, and to ensure that the transition to struct trans is complete. This has entailed updating the utilities.
There's still a lot to do for SCP. This is only a start.",There's 1 month until the next release. This is a breaking change so we need to triage if shipping this to August release or December release. Do you think 1 month is enough to test and debug this?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1925,2021-06-18T11:22:14Z,2021-08-02T13:33:59Z,2021-08-02T13:34:05Z,MERGED,True,1390,1071,38,https://github.com/matt335672,Move scp to standard transport,7,[],https://github.com/neutrinolabs/xrdp/pull/1925,https://github.com/matt335672,5,https://github.com/neutrinolabs/xrdp/pull/1925#issuecomment-887466249,"The PR is based on part of #1602.
#1602 is in two parts:-

Move SCP away from using struct SCP_CONNECTION as a connection type to the more standard struct trans transport type used everywhere else
Add the capability to use UNIX domain sockets for SCP

Both of these are necessary moving forwards to modernise SCP. This PR focusses on the first half only.
I've taken @jsorg71's original commits and rebased them. I've then completely removed the struct SCP_CONNECTION to avoid confusion, and to ensure that the transition to struct trans is complete. This has entailed updating the utilities.
There's still a lot to do for SCP. This is only a start.","I should point out that a fair bit of this code isn't actually used at present.
The server-side SCP V0 code is used by xrdp and sesrun, and even they aren't using the SCP client-side library at the moment. The SCP V1 admin code is used by sesadmin, and the other SCP V1 code is used by sestest which isn't shipped by default, primarily as it isn't completed yet.
I've tested all the interfaces I can. xrdp/sesrun appear to work well, as does what there is of sesadmin. The sestest code run OK, but has other (existing) problems which I'm not planning on addressing right now.
In other words, I think an August release for this is realistic, but happy to discuss this further. I'm about for most of August apart from a few days from the 15th onwards.
If we need to bounce it until December that's fine, but I'd suggest a merge straight after v0.9.17 early in September if we do that. There are other changes to make in this area, but they're dependent on this one going in.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1925,2021-06-18T11:22:14Z,2021-08-02T13:33:59Z,2021-08-02T13:34:05Z,MERGED,True,1390,1071,38,https://github.com/matt335672,Move scp to standard transport,7,[],https://github.com/neutrinolabs/xrdp/pull/1925,https://github.com/metalefty,6,https://github.com/neutrinolabs/xrdp/pull/1925#issuecomment-887996025,"The PR is based on part of #1602.
#1602 is in two parts:-

Move SCP away from using struct SCP_CONNECTION as a connection type to the more standard struct trans transport type used everywhere else
Add the capability to use UNIX domain sockets for SCP

Both of these are necessary moving forwards to modernise SCP. This PR focusses on the first half only.
I've taken @jsorg71's original commits and rebased them. I've then completely removed the struct SCP_CONNECTION to avoid confusion, and to ensure that the transition to struct trans is complete. This has entailed updating the utilities.
There's still a lot to do for SCP. This is only a start.","Then, I'm fine with shipping this to next August release.
Just to be sure, does this PR switches connection between xrdp and sesman from tcp to uds?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1925,2021-06-18T11:22:14Z,2021-08-02T13:33:59Z,2021-08-02T13:34:05Z,MERGED,True,1390,1071,38,https://github.com/matt335672,Move scp to standard transport,7,[],https://github.com/neutrinolabs/xrdp/pull/1925,https://github.com/matt335672,7,https://github.com/neutrinolabs/xrdp/pull/1925#issuecomment-888428772,"The PR is based on part of #1602.
#1602 is in two parts:-

Move SCP away from using struct SCP_CONNECTION as a connection type to the more standard struct trans transport type used everywhere else
Add the capability to use UNIX domain sockets for SCP

Both of these are necessary moving forwards to modernise SCP. This PR focusses on the first half only.
I've taken @jsorg71's original commits and rebased them. I've then completely removed the struct SCP_CONNECTION to avoid confusion, and to ensure that the transition to struct trans is complete. This has entailed updating the utilities.
There's still a lot to do for SCP. This is only a start.","No it doesn't.
That's a subsequent part of Jay's original #1602. Because that's a significantly more user-visible change however, it will be good to get some more preparation done before we make that switch, so it's clearer what's going on.
In particular, at the moment, xrdp and sesrun don't use libscp to talk to sesman. This PR doesn't address that, but I've got another one planned that will.
After what we should be able to move to UDS with a relatively simple PR.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1925,2021-06-18T11:22:14Z,2021-08-02T13:33:59Z,2021-08-02T13:34:05Z,MERGED,True,1390,1071,38,https://github.com/matt335672,Move scp to standard transport,7,[],https://github.com/neutrinolabs/xrdp/pull/1925,https://github.com/metalefty,8,https://github.com/neutrinolabs/xrdp/pull/1925#issuecomment-888776077,"The PR is based on part of #1602.
#1602 is in two parts:-

Move SCP away from using struct SCP_CONNECTION as a connection type to the more standard struct trans transport type used everywhere else
Add the capability to use UNIX domain sockets for SCP

Both of these are necessary moving forwards to modernise SCP. This PR focusses on the first half only.
I've taken @jsorg71's original commits and rebased them. I've then completely removed the struct SCP_CONNECTION to avoid confusion, and to ensure that the transition to struct trans is complete. This has entailed updating the utilities.
There's still a lot to do for SCP. This is only a start.","Okay, let's ship this to the next release.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1926,2021-06-21T17:26:30Z,2021-07-16T10:28:27Z,2021-09-09T09:14:45Z,MERGED,True,103,21,2,https://github.com/matt335672,Improve quality of TLS logging,1,[],https://github.com/neutrinolabs/xrdp/pull/1926,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1926,"This PR makes some improvements to the TLS logging.
Example PRs where this could help are #1922 and #1776.
The following improvements are made:-

The contents of the SSL error stack are dumped if an error occurs. Although the SSL stack contents are quite technical, they can help by providing more information on an error. Here's an example from #1776 (which would now be logged if #1776 hadn't been addressed):-
[20210621-18:01:26] [ERROR] [ssl_tls_accept(ssl_calls.c:799)] Error loading TLS private key from /etc/xrdp/ec-key.pem
[20210621-18:01:26] [ERROR] [dump_ssl_error_stack(ssl_calls.c:629)] SSL: error:0607907F:digital envelope routines:EVP_PKEY_get0_RSA:expecting an rsa key
[20210621-18:01:26] [ERROR] [dump_ssl_error_stack(ssl_calls.c:629)] SSL: error:140B3009:SSL routines:SSL_CTX_use_RSAPrivateKey_file:PEM lib


Only the first TLS error is logged. This prevents the log file from being polluted with additional errors related to SSL_shutdown(). The intent is to make it easier for users to report problems.
A basic check is made that the certificate and private key match. This check works for a chain as well as a self-signed cert.
An error is logged if the private key file has been encrypted, in which case we can't read it.

Other checks could be made on our end, but things like the certificate chain validity are best checked (and logged) by the client.","This PR makes some improvements to the TLS logging.
Example PRs where this could help are #1922 and #1776.
The following improvements are made:-

The contents of the SSL error stack are dumped if an error occurs. Although the SSL stack contents are quite technical, they can help by providing more information on an error. Here's an example from #1776 (which would now be logged if #1776 hadn't been addressed):-
[20210621-18:01:26] [ERROR] [ssl_tls_accept(ssl_calls.c:799)] Error loading TLS private key from /etc/xrdp/ec-key.pem
[20210621-18:01:26] [ERROR] [dump_ssl_error_stack(ssl_calls.c:629)] SSL: error:0607907F:digital envelope routines:EVP_PKEY_get0_RSA:expecting an rsa key
[20210621-18:01:26] [ERROR] [dump_ssl_error_stack(ssl_calls.c:629)] SSL: error:140B3009:SSL routines:SSL_CTX_use_RSAPrivateKey_file:PEM lib


Only the first TLS error is logged. This prevents the log file from being polluted with additional errors related to SSL_shutdown(). The intent is to make it easier for users to report problems.
A basic check is made that the certificate and private key match. This check works for a chain as well as a self-signed cert.
An error is logged if the private key file has been encrypted, in which case we can't read it.

Other checks could be made on our end, but things like the certificate chain validity are best checked (and logged) by the client.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1932,2021-06-27T03:23:06Z,2022-01-05T10:23:56Z,2022-01-05T10:23:56Z,MERGED,True,363,3,7,https://github.com/Nexarian,Add monitor processing unit tests for existing xrdp_sec function,1,[],https://github.com/neutrinolabs/xrdp/pull/1932,https://github.com/Nexarian,1,https://github.com/neutrinolabs/xrdp/pull/1932,"Based on the comments of #1895, the refactoring that PR is doing could be very fragile and potentially break some sensitive logic. Also, it's high time we start adding more unit tests to XRDP! So I decided to write these tests to lock in the logic of this function and make sure that 1895 doesn't break anything.
This is not a comprehensive set of tests for this function. I wanted to see what the feedback was before I did more.
Testing:
Here is the log snippet after running make check
Making check in libxrdp
make[2]: Entering directory '/home/christopher/xrdp/master/xrdp/tests/libxrdp'
make  test_libxrdp
make[3]: Entering directory '/home/christopher/xrdp/master/xrdp/tests/libxrdp'
  CCLD     test_libxrdp
make[3]: Leaving directory '/home/christopher/xrdp/master/xrdp/tests/libxrdp'
make  check-TESTS
make[3]: Entering directory '/home/christopher/xrdp/master/xrdp/tests/libxrdp'
make[4]: Entering directory '/home/christopher/xrdp/master/xrdp/tests/libxrdp'
PASS: test_libxrdp 1 - test_monitor_processing.c:xrdp_sec_process_mcs_data_monitors:test_process_monitors__when_flags_is_not_zero__fail: Passed
PASS: test_libxrdp 2 - test_monitor_processing.c:xrdp_sec_process_mcs_data_monitors:test_process_monitors__when_mounter_count_is_greater_than_sixteen__fail: Passed
PASS: test_libxrdp 3 - test_monitor_processing.c:xrdp_sec_process_mcs_data_monitors:test_process_monitors__with_single_monitor_happy_path: Passed
PASS: test_libxrdp 4 - test_monitor_processing.c:xrdp_sec_process_mcs_data_monitors:test_process_monitors__when_no_primary_monitor_is_specified_one_is_selected: Passed
PASS: test_libxrdp 5 - test_monitor_processing.c:xrdp_sec_process_mcs_data_monitors:test_process_monitors__when_virtual_desktop_width_is_too_large: Passed
PASS: test_libxrdp 6 - test_monitor_processing.c:xrdp_sec_process_mcs_data_monitors:test_process_monitors__when_virtual_desktop_width_is_too_small: Passed
PASS: test_libxrdp 7 - test_monitor_processing.c:xrdp_sec_process_mcs_data_monitors:test_process_monitors__when_virtual_desktop_height_is_too_large: Passed
PASS: test_libxrdp 8 - test_monitor_processing.c:xrdp_sec_process_mcs_data_monitors:test_process_monitors__when_virtual_desktop_height_is_too_small: Passed
============================================================================
Testsuite summary for xrdp 0.9.16
============================================================================
# TOTAL: 8
# PASS:  8
# SKIP:  0
# XFAIL: 0
# FAIL:  0
# XPASS: 0
# ERROR: 0
============================================================================
make[4]: Leaving directory '/home/christopher/xrdp/master/xrdp/tests/libxrdp'
make[3]: Leaving directory '/home/christopher/xrdp/master/xrdp/tests/libxrdp'
make[2]: Leaving directory '/home/christopher/xrdp/master/xrdp/tests/libxrdp'","Based on the comments of #1895, the refactoring that PR is doing could be very fragile and potentially break some sensitive logic. Also, it's high time we start adding more unit tests to XRDP! So I decided to write these tests to lock in the logic of this function and make sure that 1895 doesn't break anything.
This is not a comprehensive set of tests for this function. I wanted to see what the feedback was before I did more.
Testing:
Here is the log snippet after running make check
Making check in libxrdp
make[2]: Entering directory '/home/christopher/xrdp/master/xrdp/tests/libxrdp'
make  test_libxrdp
make[3]: Entering directory '/home/christopher/xrdp/master/xrdp/tests/libxrdp'
  CCLD     test_libxrdp
make[3]: Leaving directory '/home/christopher/xrdp/master/xrdp/tests/libxrdp'
make  check-TESTS
make[3]: Entering directory '/home/christopher/xrdp/master/xrdp/tests/libxrdp'
make[4]: Entering directory '/home/christopher/xrdp/master/xrdp/tests/libxrdp'
PASS: test_libxrdp 1 - test_monitor_processing.c:xrdp_sec_process_mcs_data_monitors:test_process_monitors__when_flags_is_not_zero__fail: Passed
PASS: test_libxrdp 2 - test_monitor_processing.c:xrdp_sec_process_mcs_data_monitors:test_process_monitors__when_mounter_count_is_greater_than_sixteen__fail: Passed
PASS: test_libxrdp 3 - test_monitor_processing.c:xrdp_sec_process_mcs_data_monitors:test_process_monitors__with_single_monitor_happy_path: Passed
PASS: test_libxrdp 4 - test_monitor_processing.c:xrdp_sec_process_mcs_data_monitors:test_process_monitors__when_no_primary_monitor_is_specified_one_is_selected: Passed
PASS: test_libxrdp 5 - test_monitor_processing.c:xrdp_sec_process_mcs_data_monitors:test_process_monitors__when_virtual_desktop_width_is_too_large: Passed
PASS: test_libxrdp 6 - test_monitor_processing.c:xrdp_sec_process_mcs_data_monitors:test_process_monitors__when_virtual_desktop_width_is_too_small: Passed
PASS: test_libxrdp 7 - test_monitor_processing.c:xrdp_sec_process_mcs_data_monitors:test_process_monitors__when_virtual_desktop_height_is_too_large: Passed
PASS: test_libxrdp 8 - test_monitor_processing.c:xrdp_sec_process_mcs_data_monitors:test_process_monitors__when_virtual_desktop_height_is_too_small: Passed
============================================================================
Testsuite summary for xrdp 0.9.16
============================================================================
# TOTAL: 8
# PASS:  8
# SKIP:  0
# XFAIL: 0
# FAIL:  0
# XPASS: 0
# ERROR: 0
============================================================================
make[4]: Leaving directory '/home/christopher/xrdp/master/xrdp/tests/libxrdp'
make[3]: Leaving directory '/home/christopher/xrdp/master/xrdp/tests/libxrdp'
make[2]: Leaving directory '/home/christopher/xrdp/master/xrdp/tests/libxrdp'",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1934,2021-06-28T16:23:21Z,2021-07-20T09:40:18Z,2021-07-21T07:38:36Z,MERGED,True,162,0,5,https://github.com/TOMATO-ONE,neutrinordp: Allow keyboard layout information to be sent to remote. (#1933),2,[],https://github.com/neutrinolabs/xrdp/pull/1934,https://github.com/TOMATO-ONE,1,https://github.com/neutrinolabs/xrdp/pull/1934,"This is a  PR for Discussions #1933.
The goal is to resolve the keyboard layout mismatch when connecting to remote Windows via NeutrinoRDP Proxy from an RDP Client with a Japanese keyboard connected.
A lot of changes are needed to make this functionality possible.
Therefore, this PR will make the following two steps possible.
1st one: NeutrinoRDP module pass such information received from the client to another server as-is.
2nd one: Allow xrdp to send fixed keyboard information to another server.
I welcome suggestions for corrections to redundant code or confusing comments.","This is a  PR for Discussions #1933.
The goal is to resolve the keyboard layout mismatch when connecting to remote Windows via NeutrinoRDP Proxy from an RDP Client with a Japanese keyboard connected.
A lot of changes are needed to make this functionality possible.
Therefore, this PR will make the following two steps possible.
1st one: NeutrinoRDP module pass such information received from the client to another server as-is.
2nd one: Allow xrdp to send fixed keyboard information to another server.
I welcome suggestions for corrections to redundant code or confusing comments.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1934,2021-06-28T16:23:21Z,2021-07-20T09:40:18Z,2021-07-21T07:38:36Z,MERGED,True,162,0,5,https://github.com/TOMATO-ONE,neutrinordp: Allow keyboard layout information to be sent to remote. (#1933),2,[],https://github.com/neutrinolabs/xrdp/pull/1934,https://github.com/TOMATO-ONE,2,https://github.com/neutrinolabs/xrdp/pull/1934#issuecomment-875704533,"This is a  PR for Discussions #1933.
The goal is to resolve the keyboard layout mismatch when connecting to remote Windows via NeutrinoRDP Proxy from an RDP Client with a Japanese keyboard connected.
A lot of changes are needed to make this functionality possible.
Therefore, this PR will make the following two steps possible.
1st one: NeutrinoRDP module pass such information received from the client to another server as-is.
2nd one: Allow xrdp to send fixed keyboard information to another server.
I welcome suggestions for corrections to redundant code or confusing comments.","I rewrote the code.
Based on @matt335672 's suggestion.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1934,2021-06-28T16:23:21Z,2021-07-20T09:40:18Z,2021-07-21T07:38:36Z,MERGED,True,162,0,5,https://github.com/TOMATO-ONE,neutrinordp: Allow keyboard layout information to be sent to remote. (#1933),2,[],https://github.com/neutrinolabs/xrdp/pull/1934,https://github.com/TOMATO-ONE,3,https://github.com/neutrinolabs/xrdp/pull/1934#issuecomment-877610806,"This is a  PR for Discussions #1933.
The goal is to resolve the keyboard layout mismatch when connecting to remote Windows via NeutrinoRDP Proxy from an RDP Client with a Japanese keyboard connected.
A lot of changes are needed to make this functionality possible.
Therefore, this PR will make the following two steps possible.
1st one: NeutrinoRDP module pass such information received from the client to another server as-is.
2nd one: Allow xrdp to send fixed keyboard information to another server.
I welcome suggestions for corrections to redundant code or confusing comments.","I have removed the 'draft' label.
Please review.
Best regards",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1934,2021-06-28T16:23:21Z,2021-07-20T09:40:18Z,2021-07-21T07:38:36Z,MERGED,True,162,0,5,https://github.com/TOMATO-ONE,neutrinordp: Allow keyboard layout information to be sent to remote. (#1933),2,[],https://github.com/neutrinolabs/xrdp/pull/1934,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/1934#issuecomment-878725042,"This is a  PR for Discussions #1933.
The goal is to resolve the keyboard layout mismatch when connecting to remote Windows via NeutrinoRDP Proxy from an RDP Client with a Japanese keyboard connected.
A lot of changes are needed to make this functionality possible.
Therefore, this PR will make the following two steps possible.
1st one: NeutrinoRDP module pass such information received from the client to another server as-is.
2nd one: Allow xrdp to send fixed keyboard information to another server.
I welcome suggestions for corrections to redundant code or confusing comments.","No, we had a discussion in our native language but I don't think the set_keyboard_overrides is necessary.
He thinks that it is not easy switching keylayout on the Windows client-side using mstsc.exe. This is the reason he's trying to implement the feature to override the client's keylayout. But actually, it is quite easy so I don't think the feature is necessary.
If we choose English here, 0x00000409 will be sent to server.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1934,2021-06-28T16:23:21Z,2021-07-20T09:40:18Z,2021-07-21T07:38:36Z,MERGED,True,162,0,5,https://github.com/TOMATO-ONE,neutrinordp: Allow keyboard layout information to be sent to remote. (#1933),2,[],https://github.com/neutrinolabs/xrdp/pull/1934,https://github.com/matt335672,5,https://github.com/neutrinolabs/xrdp/pull/1934#issuecomment-879250640,"This is a  PR for Discussions #1933.
The goal is to resolve the keyboard layout mismatch when connecting to remote Windows via NeutrinoRDP Proxy from an RDP Client with a Japanese keyboard connected.
A lot of changes are needed to make this functionality possible.
Therefore, this PR will make the following two steps possible.
1st one: NeutrinoRDP module pass such information received from the client to another server as-is.
2nd one: Allow xrdp to send fixed keyboard information to another server.
I welcome suggestions for corrections to redundant code or confusing comments.","Thanks for that, @metalefty
@TOMATO-ONE - I was unaware of the Windows language selection widget which @metalefty has pointed out above. Although I don't understand Japanese, I've installed a Dutch language pack (I can speak Dutch), and now I can set English with a UK keyboard, or Dutch with a US keyboard, or Dutch with a Dutch keyboard:-

Is there anything in this dialog box which can't be done without the mods above, or am I misunderstanding the problem?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1934,2021-06-28T16:23:21Z,2021-07-20T09:40:18Z,2021-07-21T07:38:36Z,MERGED,True,162,0,5,https://github.com/TOMATO-ONE,neutrinordp: Allow keyboard layout information to be sent to remote. (#1933),2,[],https://github.com/neutrinolabs/xrdp/pull/1934,https://github.com/TOMATO-ONE,6,https://github.com/neutrinolabs/xrdp/pull/1934#issuecomment-879381583,"This is a  PR for Discussions #1933.
The goal is to resolve the keyboard layout mismatch when connecting to remote Windows via NeutrinoRDP Proxy from an RDP Client with a Japanese keyboard connected.
A lot of changes are needed to make this functionality possible.
Therefore, this PR will make the following two steps possible.
1st one: NeutrinoRDP module pass such information received from the client to another server as-is.
2nd one: Allow xrdp to send fixed keyboard information to another server.
I welcome suggestions for corrections to redundant code or confusing comments.","@metalefty
set_keyboard_overrides itself is necessary.
Without it, we can't achieve the goal of this PR.
We are only discussing the following parts for US keyboards in Japanese.
   else if (mod->client_info.keyboard_type == 0x04)
        {
            /* When the keyboard type is 0x04 (PC101/102 keyboard) and the lower 16
               bits are a value of 0x0411(Japanese KeyLayout), the kbd_layout is set
               to 0x00000411 no matter what the upper 16 bits are. */
            if ((mod->client_info.keylayout & 0x0000FFFF) == 0x00000411)
            {
                LOG(LOG_LEVEL_INFO, ""overrode kbd_layout 0x%08X with 0x%08X""
                    "" for Japanese environment"", settings->kbd_layout,
                    0x00000411);
                settings->kbd_layout = 0x00000411;
            }
            LOG(LOG_LEVEL_INFO,
                ""keyboardLayout for PC101/102 keyboard:""
                ""[0x%08X]"", settings->kbd_layout);
        }

Please review again, including the other parts.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1934,2021-06-28T16:23:21Z,2021-07-20T09:40:18Z,2021-07-21T07:38:36Z,MERGED,True,162,0,5,https://github.com/TOMATO-ONE,neutrinordp: Allow keyboard layout information to be sent to remote. (#1933),2,[],https://github.com/neutrinolabs/xrdp/pull/1934,https://github.com/TOMATO-ONE,7,https://github.com/neutrinolabs/xrdp/pull/1934#issuecomment-879398184,"This is a  PR for Discussions #1933.
The goal is to resolve the keyboard layout mismatch when connecting to remote Windows via NeutrinoRDP Proxy from an RDP Client with a Japanese keyboard connected.
A lot of changes are needed to make this functionality possible.
Therefore, this PR will make the following two steps possible.
1st one: NeutrinoRDP module pass such information received from the client to another server as-is.
2nd one: Allow xrdp to send fixed keyboard information to another server.
I welcome suggestions for corrections to redundant code or confusing comments.","@matt335672 Thank you for everything.
It's true that we are discussing in Japanese.
We are discussing on GoogleGroups of The ""xrdp"" Users' Group Japan.
I'm sorry that my way of discussing confused him.
We will discuss more.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1934,2021-06-28T16:23:21Z,2021-07-20T09:40:18Z,2021-07-21T07:38:36Z,MERGED,True,162,0,5,https://github.com/TOMATO-ONE,neutrinordp: Allow keyboard layout information to be sent to remote. (#1933),2,[],https://github.com/neutrinolabs/xrdp/pull/1934,https://github.com/metalefty,8,https://github.com/neutrinolabs/xrdp/pull/1934#issuecomment-879496778,"This is a  PR for Discussions #1933.
The goal is to resolve the keyboard layout mismatch when connecting to remote Windows via NeutrinoRDP Proxy from an RDP Client with a Japanese keyboard connected.
A lot of changes are needed to make this functionality possible.
Therefore, this PR will make the following two steps possible.
1st one: NeutrinoRDP module pass such information received from the client to another server as-is.
2nd one: Allow xrdp to send fixed keyboard information to another server.
I welcome suggestions for corrections to redundant code or confusing comments.","Guys, I think we're mixing two or three separate issues. Let me know if I'm misunderstanding something.
First one: As far as I understand, NeutrinoRDP module is not sending keyboard info that appeared in TS_INPUT_CAPABILITYSET PDU to another server. This should be fixed. NeutrinoRDP module should pass such information received from the client to another server as-is.  Let's focus on this first.
Second one: Sometimes users might want to ignore the client's keyboard information. Allow xrdp to send fixed keyboard information to another server.
The last one: Japanese hack.
So what about separating PRs into two or three? It would make it easier to review.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1934,2021-06-28T16:23:21Z,2021-07-20T09:40:18Z,2021-07-21T07:38:36Z,MERGED,True,162,0,5,https://github.com/TOMATO-ONE,neutrinordp: Allow keyboard layout information to be sent to remote. (#1933),2,[],https://github.com/neutrinolabs/xrdp/pull/1934,https://github.com/TOMATO-ONE,9,https://github.com/neutrinolabs/xrdp/pull/1934#issuecomment-879568042,"This is a  PR for Discussions #1933.
The goal is to resolve the keyboard layout mismatch when connecting to remote Windows via NeutrinoRDP Proxy from an RDP Client with a Japanese keyboard connected.
A lot of changes are needed to make this functionality possible.
Therefore, this PR will make the following two steps possible.
1st one: NeutrinoRDP module pass such information received from the client to another server as-is.
2nd one: Allow xrdp to send fixed keyboard information to another server.
I welcome suggestions for corrections to redundant code or confusing comments.","@metalefty
I agree with the division of PR#1934.
Since parts 1) and 2) have been reviewed to some extent by @matt335672
#1934 and leave it at that.
The special support for Japanese  hack has been dropped from #1934.
I would like to propose this as another PR.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1934,2021-06-28T16:23:21Z,2021-07-20T09:40:18Z,2021-07-21T07:38:36Z,MERGED,True,162,0,5,https://github.com/TOMATO-ONE,neutrinordp: Allow keyboard layout information to be sent to remote. (#1933),2,[],https://github.com/neutrinolabs/xrdp/pull/1934,https://github.com/matt335672,10,https://github.com/neutrinolabs/xrdp/pull/1934#issuecomment-879973534,"This is a  PR for Discussions #1933.
The goal is to resolve the keyboard layout mismatch when connecting to remote Windows via NeutrinoRDP Proxy from an RDP Client with a Japanese keyboard connected.
A lot of changes are needed to make this functionality possible.
Therefore, this PR will make the following two steps possible.
1st one: NeutrinoRDP module pass such information received from the client to another server as-is.
2nd one: Allow xrdp to send fixed keyboard information to another server.
I welcome suggestions for corrections to redundant code or confusing comments.","That sounds like a good idea to me, particularly as I can't contribute much to the Japanese discussion. Thanks both.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1934,2021-06-28T16:23:21Z,2021-07-20T09:40:18Z,2021-07-21T07:38:36Z,MERGED,True,162,0,5,https://github.com/TOMATO-ONE,neutrinordp: Allow keyboard layout information to be sent to remote. (#1933),2,[],https://github.com/neutrinolabs/xrdp/pull/1934,https://github.com/TOMATO-ONE,11,https://github.com/neutrinolabs/xrdp/pull/1934#issuecomment-881899110,"This is a  PR for Discussions #1933.
The goal is to resolve the keyboard layout mismatch when connecting to remote Windows via NeutrinoRDP Proxy from an RDP Client with a Japanese keyboard connected.
A lot of changes are needed to make this functionality possible.
Therefore, this PR will make the following two steps possible.
1st one: NeutrinoRDP module pass such information received from the client to another server as-is.
2nd one: Allow xrdp to send fixed keyboard information to another server.
I welcome suggestions for corrections to redundant code or confusing comments.","I take full responsibility for this slight confusion.
I was trying to address multiple issues in one PR.
I will endeavour to keep the PR simple to help reviewers understand.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1934,2021-06-28T16:23:21Z,2021-07-20T09:40:18Z,2021-07-21T07:38:36Z,MERGED,True,162,0,5,https://github.com/TOMATO-ONE,neutrinordp: Allow keyboard layout information to be sent to remote. (#1933),2,[],https://github.com/neutrinolabs/xrdp/pull/1934,https://github.com/TOMATO-ONE,12,https://github.com/neutrinolabs/xrdp/pull/1934#issuecomment-881910669,"This is a  PR for Discussions #1933.
The goal is to resolve the keyboard layout mismatch when connecting to remote Windows via NeutrinoRDP Proxy from an RDP Client with a Japanese keyboard connected.
A lot of changes are needed to make this functionality possible.
Therefore, this PR will make the following two steps possible.
1st one: NeutrinoRDP module pass such information received from the client to another server as-is.
2nd one: Allow xrdp to send fixed keyboard information to another server.
I welcome suggestions for corrections to redundant code or confusing comments.","I have removed the Japanese keyboard hack from code so far.
I will propose the removed code in another PR.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1934,2021-06-28T16:23:21Z,2021-07-20T09:40:18Z,2021-07-21T07:38:36Z,MERGED,True,162,0,5,https://github.com/TOMATO-ONE,neutrinordp: Allow keyboard layout information to be sent to remote. (#1933),2,[],https://github.com/neutrinolabs/xrdp/pull/1934,https://github.com/matt335672,13,https://github.com/neutrinolabs/xrdp/pull/1934#issuecomment-882399276,"This is a  PR for Discussions #1933.
The goal is to resolve the keyboard layout mismatch when connecting to remote Windows via NeutrinoRDP Proxy from an RDP Client with a Japanese keyboard connected.
A lot of changes are needed to make this functionality possible.
Therefore, this PR will make the following two steps possible.
1st one: NeutrinoRDP module pass such information received from the client to another server as-is.
2nd one: Allow xrdp to send fixed keyboard information to another server.
I welcome suggestions for corrections to redundant code or confusing comments.","@TOMATO-ONE
Thanks for that.
I still don't think we're fully agreed on what should be in this PR. You have included allowing keyboard overrides in xrdp.ini, but if I'm understanding @metalefty correctly, he doesn't think this should be necessary.
Am I understanding you correctly @metalefty?
If so, can we reach agreement on this before we proceed?
Thanks both.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1934,2021-06-28T16:23:21Z,2021-07-20T09:40:18Z,2021-07-21T07:38:36Z,MERGED,True,162,0,5,https://github.com/TOMATO-ONE,neutrinordp: Allow keyboard layout information to be sent to remote. (#1933),2,[],https://github.com/neutrinolabs/xrdp/pull/1934,https://github.com/metalefty,14,https://github.com/neutrinolabs/xrdp/pull/1934#issuecomment-882553259,"This is a  PR for Discussions #1933.
The goal is to resolve the keyboard layout mismatch when connecting to remote Windows via NeutrinoRDP Proxy from an RDP Client with a Japanese keyboard connected.
A lot of changes are needed to make this functionality possible.
Therefore, this PR will make the following two steps possible.
1st one: NeutrinoRDP module pass such information received from the client to another server as-is.
2nd one: Allow xrdp to send fixed keyboard information to another server.
I welcome suggestions for corrections to redundant code or confusing comments.","Can you separate the commits into at least 2,  passing keyboard layout and keyboard overrides?
Then I'm fine with doing both in this PR.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1934,2021-06-28T16:23:21Z,2021-07-20T09:40:18Z,2021-07-21T07:38:36Z,MERGED,True,162,0,5,https://github.com/TOMATO-ONE,neutrinordp: Allow keyboard layout information to be sent to remote. (#1933),2,[],https://github.com/neutrinolabs/xrdp/pull/1934,https://github.com/TOMATO-ONE,15,https://github.com/neutrinolabs/xrdp/pull/1934#issuecomment-882556536,"This is a  PR for Discussions #1933.
The goal is to resolve the keyboard layout mismatch when connecting to remote Windows via NeutrinoRDP Proxy from an RDP Client with a Japanese keyboard connected.
A lot of changes are needed to make this functionality possible.
Therefore, this PR will make the following two steps possible.
1st one: NeutrinoRDP module pass such information received from the client to another server as-is.
2nd one: Allow xrdp to send fixed keyboard information to another server.
I welcome suggestions for corrections to redundant code or confusing comments.","@metalefty
Thank you.
I wanted to respect the arguments made so far.
Thank you for your advice.
I will try to separate the commit into two.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1934,2021-06-28T16:23:21Z,2021-07-20T09:40:18Z,2021-07-21T07:38:36Z,MERGED,True,162,0,5,https://github.com/TOMATO-ONE,neutrinordp: Allow keyboard layout information to be sent to remote. (#1933),2,[],https://github.com/neutrinolabs/xrdp/pull/1934,https://github.com/metalefty,16,https://github.com/neutrinolabs/xrdp/pull/1934#issuecomment-882559560,"This is a  PR for Discussions #1933.
The goal is to resolve the keyboard layout mismatch when connecting to remote Windows via NeutrinoRDP Proxy from an RDP Client with a Japanese keyboard connected.
A lot of changes are needed to make this functionality possible.
Therefore, this PR will make the following two steps possible.
1st one: NeutrinoRDP module pass such information received from the client to another server as-is.
2nd one: Allow xrdp to send fixed keyboard information to another server.
I welcome suggestions for corrections to redundant code or confusing comments.",ありがとうございます。なんども手間をとらせてすみません。,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1934,2021-06-28T16:23:21Z,2021-07-20T09:40:18Z,2021-07-21T07:38:36Z,MERGED,True,162,0,5,https://github.com/TOMATO-ONE,neutrinordp: Allow keyboard layout information to be sent to remote. (#1933),2,[],https://github.com/neutrinolabs/xrdp/pull/1934,https://github.com/TOMATO-ONE,17,https://github.com/neutrinolabs/xrdp/pull/1934#issuecomment-882668982,"This is a  PR for Discussions #1933.
The goal is to resolve the keyboard layout mismatch when connecting to remote Windows via NeutrinoRDP Proxy from an RDP Client with a Japanese keyboard connected.
A lot of changes are needed to make this functionality possible.
Therefore, this PR will make the following two steps possible.
1st one: NeutrinoRDP module pass such information received from the client to another server as-is.
2nd one: Allow xrdp to send fixed keyboard information to another server.
I welcome suggestions for corrections to redundant code or confusing comments.","#e0a482f
This code is intended to

1st one: NeutrinoRDP module pass such information received from the client to another server as-is.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1934,2021-06-28T16:23:21Z,2021-07-20T09:40:18Z,2021-07-21T07:38:36Z,MERGED,True,162,0,5,https://github.com/TOMATO-ONE,neutrinordp: Allow keyboard layout information to be sent to remote. (#1933),2,[],https://github.com/neutrinolabs/xrdp/pull/1934,https://github.com/TOMATO-ONE,18,https://github.com/neutrinolabs/xrdp/pull/1934#issuecomment-882674196,"This is a  PR for Discussions #1933.
The goal is to resolve the keyboard layout mismatch when connecting to remote Windows via NeutrinoRDP Proxy from an RDP Client with a Japanese keyboard connected.
A lot of changes are needed to make this functionality possible.
Therefore, this PR will make the following two steps possible.
1st one: NeutrinoRDP module pass such information received from the client to another server as-is.
2nd one: Allow xrdp to send fixed keyboard information to another server.
I welcome suggestions for corrections to redundant code or confusing comments.","#e3ffad7
This code is intended to

2nd one: Allow xrdp to send fixed keyboard information to another server.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1934,2021-06-28T16:23:21Z,2021-07-20T09:40:18Z,2021-07-21T07:38:36Z,MERGED,True,162,0,5,https://github.com/TOMATO-ONE,neutrinordp: Allow keyboard layout information to be sent to remote. (#1933),2,[],https://github.com/neutrinolabs/xrdp/pull/1934,https://github.com/matt335672,19,https://github.com/neutrinolabs/xrdp/pull/1934#issuecomment-883252992,"This is a  PR for Discussions #1933.
The goal is to resolve the keyboard layout mismatch when connecting to remote Windows via NeutrinoRDP Proxy from an RDP Client with a Japanese keyboard connected.
A lot of changes are needed to make this functionality possible.
Therefore, this PR will make the following two steps possible.
1st one: NeutrinoRDP module pass such information received from the client to another server as-is.
2nd one: Allow xrdp to send fixed keyboard information to another server.
I welcome suggestions for corrections to redundant code or confusing comments.",Thanks again both! Apologies for causing some confusion earlier.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1934,2021-06-28T16:23:21Z,2021-07-20T09:40:18Z,2021-07-21T07:38:36Z,MERGED,True,162,0,5,https://github.com/TOMATO-ONE,neutrinordp: Allow keyboard layout information to be sent to remote. (#1933),2,[],https://github.com/neutrinolabs/xrdp/pull/1934,https://github.com/TOMATO-ONE,20,https://github.com/neutrinolabs/xrdp/pull/1934#issuecomment-883307178,"This is a  PR for Discussions #1933.
The goal is to resolve the keyboard layout mismatch when connecting to remote Windows via NeutrinoRDP Proxy from an RDP Client with a Japanese keyboard connected.
A lot of changes are needed to make this functionality possible.
Therefore, this PR will make the following two steps possible.
1st one: NeutrinoRDP module pass such information received from the client to another server as-is.
2nd one: Allow xrdp to send fixed keyboard information to another server.
I welcome suggestions for corrections to redundant code or confusing comments.","@metalefty @matt335672
I'm sorry for the confusion.
Thank you!",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1934,2021-06-28T16:23:21Z,2021-07-20T09:40:18Z,2021-07-21T07:38:36Z,MERGED,True,162,0,5,https://github.com/TOMATO-ONE,neutrinordp: Allow keyboard layout information to be sent to remote. (#1933),2,[],https://github.com/neutrinolabs/xrdp/pull/1934,https://github.com/matt335672,21,https://github.com/neutrinolabs/xrdp/pull/1934#issuecomment-883333487,"This is a  PR for Discussions #1933.
The goal is to resolve the keyboard layout mismatch when connecting to remote Windows via NeutrinoRDP Proxy from an RDP Client with a Japanese keyboard connected.
A lot of changes are needed to make this functionality possible.
Therefore, this PR will make the following two steps possible.
1st one: NeutrinoRDP module pass such information received from the client to another server as-is.
2nd one: Allow xrdp to send fixed keyboard information to another server.
I welcome suggestions for corrections to redundant code or confusing comments.","@TOMATO-ONE - I had a small issue with your last commit in that it didn't compile when merged with the devel version.
Apologies for not catching it sooner.
Could you re-test against the latest devel branch please and make sure everything works for your use-case?
Thanks.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1934,2021-06-28T16:23:21Z,2021-07-20T09:40:18Z,2021-07-21T07:38:36Z,MERGED,True,162,0,5,https://github.com/TOMATO-ONE,neutrinordp: Allow keyboard layout information to be sent to remote. (#1933),2,[],https://github.com/neutrinolabs/xrdp/pull/1934,https://github.com/TOMATO-ONE,22,https://github.com/neutrinolabs/xrdp/pull/1934#issuecomment-883433231,"This is a  PR for Discussions #1933.
The goal is to resolve the keyboard layout mismatch when connecting to remote Windows via NeutrinoRDP Proxy from an RDP Client with a Japanese keyboard connected.
A lot of changes are needed to make this functionality possible.
Therefore, this PR will make the following two steps possible.
1st one: NeutrinoRDP module pass such information received from the client to another server as-is.
2nd one: Allow xrdp to send fixed keyboard information to another server.
I welcome suggestions for corrections to redundant code or confusing comments.","@matt335672
Sorry
I made a mistake with the patch when separating the code.
Tested and no problem.
Thanks again for your help.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1934,2021-06-28T16:23:21Z,2021-07-20T09:40:18Z,2021-07-21T07:38:36Z,MERGED,True,162,0,5,https://github.com/TOMATO-ONE,neutrinordp: Allow keyboard layout information to be sent to remote. (#1933),2,[],https://github.com/neutrinolabs/xrdp/pull/1934,https://github.com/matt335672,23,https://github.com/neutrinolabs/xrdp/pull/1934#issuecomment-883964336,"This is a  PR for Discussions #1933.
The goal is to resolve the keyboard layout mismatch when connecting to remote Windows via NeutrinoRDP Proxy from an RDP Client with a Japanese keyboard connected.
A lot of changes are needed to make this functionality possible.
Therefore, this PR will make the following two steps possible.
1st one: NeutrinoRDP module pass such information received from the client to another server as-is.
2nd one: Allow xrdp to send fixed keyboard information to another server.
I welcome suggestions for corrections to redundant code or confusing comments.","Great - thanks. I really should have spotted the problem with the patch, but it's all worked out OK.
Thanks again for your contributions.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1938,2021-07-05T16:16:03Z,2021-07-14T15:10:02Z,2021-09-09T09:08:36Z,MERGED,True,3,1,2,https://github.com/matt335672,Bumped cppcheck version to 2.5,1,[],https://github.com/neutrinolabs/xrdp/pull/1938,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1938,"Small change to bump cppcheck to version 2.5
A small change is also needed to tcutils/utils.h to prevent these warnings:-
utils.cpp:25:5: error: Uninitialized struct member: s.pos [uninitStructMember]
    qstream_new(s, 1024 * 8);
    ^
utils.cpp:25:5: error: Uninitialized struct member: s.size [uninitStructMember]
    qstream_new(s, 1024 * 8);
    ^
utils.cpp:111:5: error: Uninitialized struct member: s.pos [uninitStructMember]
    qstream_new(s, 1024);
    ^
utils.cpp:111:5: error: Uninitialized struct member: s.size [uninitStructMember]
    qstream_new(s, 1024);
    ^

I've managed to verify that the change I've made to tcutils will build on older systems - it doesn't build with our current CI.
The tcutils stuff is based on Qt4 and hence defunct. It's in C++, but doesn't make particularly good use of that language.
Ideally we'd update this utility for Qt5 compatibility, and also improve the C++ usage. I'm personally not that keen on learning all about Qt5 to do this however, given that this utility seems to be more of an example than anything useful.
We seem to have three choices here:-

Leave this PR as is, and ignore tcutils for now on the grounds it may be useful later.
Update tcutils to Qt5 (and presumably maintain it)
Remove the utility entirely.

Thoughts?","Small change to bump cppcheck to version 2.5
A small change is also needed to tcutils/utils.h to prevent these warnings:-
utils.cpp:25:5: error: Uninitialized struct member: s.pos [uninitStructMember]
    qstream_new(s, 1024 * 8);
    ^
utils.cpp:25:5: error: Uninitialized struct member: s.size [uninitStructMember]
    qstream_new(s, 1024 * 8);
    ^
utils.cpp:111:5: error: Uninitialized struct member: s.pos [uninitStructMember]
    qstream_new(s, 1024);
    ^
utils.cpp:111:5: error: Uninitialized struct member: s.size [uninitStructMember]
    qstream_new(s, 1024);
    ^

I've managed to verify that the change I've made to tcutils will build on older systems - it doesn't build with our current CI.
The tcutils stuff is based on Qt4 and hence defunct. It's in C++, but doesn't make particularly good use of that language.
Ideally we'd update this utility for Qt5 compatibility, and also improve the C++ usage. I'm personally not that keen on learning all about Qt5 to do this however, given that this utility seems to be more of an example than anything useful.
We seem to have three choices here:-

Leave this PR as is, and ignore tcutils for now on the grounds it may be useful later.
Update tcutils to Qt5 (and presumably maintain it)
Remove the utility entirely.

Thoughts?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1938,2021-07-05T16:16:03Z,2021-07-14T15:10:02Z,2021-09-09T09:08:36Z,MERGED,True,3,1,2,https://github.com/matt335672,Bumped cppcheck version to 2.5,1,[],https://github.com/neutrinolabs/xrdp/pull/1938,https://github.com/aquesnel,2,https://github.com/neutrinolabs/xrdp/pull/1938#issuecomment-878516467,"Small change to bump cppcheck to version 2.5
A small change is also needed to tcutils/utils.h to prevent these warnings:-
utils.cpp:25:5: error: Uninitialized struct member: s.pos [uninitStructMember]
    qstream_new(s, 1024 * 8);
    ^
utils.cpp:25:5: error: Uninitialized struct member: s.size [uninitStructMember]
    qstream_new(s, 1024 * 8);
    ^
utils.cpp:111:5: error: Uninitialized struct member: s.pos [uninitStructMember]
    qstream_new(s, 1024);
    ^
utils.cpp:111:5: error: Uninitialized struct member: s.size [uninitStructMember]
    qstream_new(s, 1024);
    ^

I've managed to verify that the change I've made to tcutils will build on older systems - it doesn't build with our current CI.
The tcutils stuff is based on Qt4 and hence defunct. It's in C++, but doesn't make particularly good use of that language.
Ideally we'd update this utility for Qt5 compatibility, and also improve the C++ usage. I'm personally not that keen on learning all about Qt5 to do this however, given that this utility seems to be more of an example than anything useful.
We seem to have three choices here:-

Leave this PR as is, and ignore tcutils for now on the grounds it may be useful later.
Update tcutils to Qt5 (and presumably maintain it)
Remove the utility entirely.

Thoughts?",I'm for removing utilities that don't work and we don't plan to make work.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1938,2021-07-05T16:16:03Z,2021-07-14T15:10:02Z,2021-09-09T09:08:36Z,MERGED,True,3,1,2,https://github.com/matt335672,Bumped cppcheck version to 2.5,1,[],https://github.com/neutrinolabs/xrdp/pull/1938,https://github.com/matt335672,3,https://github.com/neutrinolabs/xrdp/pull/1938#issuecomment-879234464,"Small change to bump cppcheck to version 2.5
A small change is also needed to tcutils/utils.h to prevent these warnings:-
utils.cpp:25:5: error: Uninitialized struct member: s.pos [uninitStructMember]
    qstream_new(s, 1024 * 8);
    ^
utils.cpp:25:5: error: Uninitialized struct member: s.size [uninitStructMember]
    qstream_new(s, 1024 * 8);
    ^
utils.cpp:111:5: error: Uninitialized struct member: s.pos [uninitStructMember]
    qstream_new(s, 1024);
    ^
utils.cpp:111:5: error: Uninitialized struct member: s.size [uninitStructMember]
    qstream_new(s, 1024);
    ^

I've managed to verify that the change I've made to tcutils will build on older systems - it doesn't build with our current CI.
The tcutils stuff is based on Qt4 and hence defunct. It's in C++, but doesn't make particularly good use of that language.
Ideally we'd update this utility for Qt5 compatibility, and also improve the C++ usage. I'm personally not that keen on learning all about Qt5 to do this however, given that this utility seems to be more of an example than anything useful.
We seem to have three choices here:-

Leave this PR as is, and ignore tcutils for now on the grounds it may be useful later.
Update tcutils to Qt5 (and presumably maintain it)
Remove the utility entirely.

Thoughts?","Thanks for that - it's a sensible thing to do I think.
Anyone else?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1938,2021-07-05T16:16:03Z,2021-07-14T15:10:02Z,2021-09-09T09:08:36Z,MERGED,True,3,1,2,https://github.com/matt335672,Bumped cppcheck version to 2.5,1,[],https://github.com/neutrinolabs/xrdp/pull/1938,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/1938#issuecomment-879504858,"Small change to bump cppcheck to version 2.5
A small change is also needed to tcutils/utils.h to prevent these warnings:-
utils.cpp:25:5: error: Uninitialized struct member: s.pos [uninitStructMember]
    qstream_new(s, 1024 * 8);
    ^
utils.cpp:25:5: error: Uninitialized struct member: s.size [uninitStructMember]
    qstream_new(s, 1024 * 8);
    ^
utils.cpp:111:5: error: Uninitialized struct member: s.pos [uninitStructMember]
    qstream_new(s, 1024);
    ^
utils.cpp:111:5: error: Uninitialized struct member: s.size [uninitStructMember]
    qstream_new(s, 1024);
    ^

I've managed to verify that the change I've made to tcutils will build on older systems - it doesn't build with our current CI.
The tcutils stuff is based on Qt4 and hence defunct. It's in C++, but doesn't make particularly good use of that language.
Ideally we'd update this utility for Qt5 compatibility, and also improve the C++ usage. I'm personally not that keen on learning all about Qt5 to do this however, given that this utility seems to be more of an example than anything useful.
We seem to have three choices here:-

Leave this PR as is, and ignore tcutils for now on the grounds it may be useful later.
Update tcutils to Qt5 (and presumably maintain it)
Remove the utility entirely.

Thoughts?",I agree with @aquesnel. LTGM regarding other part.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1943,2021-07-14T15:22:41Z,2021-07-16T10:26:21Z,2021-07-16T10:26:24Z,MERGED,True,0,1173,12,https://github.com/matt335672,Remove tcutils,1,[],https://github.com/neutrinolabs/xrdp/pull/1943,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1943,"Resulting from discussions in #1938
I can widen the scope of this if people think it's a good idea.","Resulting from discussions in #1938
I can widen the scope of this if people think it's a good idea.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1943,2021-07-14T15:22:41Z,2021-07-16T10:26:21Z,2021-07-16T10:26:24Z,MERGED,True,0,1173,12,https://github.com/matt335672,Remove tcutils,1,[],https://github.com/neutrinolabs/xrdp/pull/1943,https://github.com/jsorg71,2,https://github.com/neutrinolabs/xrdp/pull/1943#issuecomment-880861478,"Resulting from discussions in #1938
I can widen the scope of this if people think it's a good idea.","Thanks, this indeed should be removed.  I'll create a separate project for this if needed.  vrplayer is another but that can be another PR.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1947,2021-07-19T08:34:02Z,2021-07-20T09:42:12Z,2021-10-22T18:29:36Z,MERGED,True,2,0,1,https://github.com/matt335672,Log a message for failed logins,1,[],https://github.com/neutrinolabs/xrdp/pull/1947,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1947,"Fixes #1724 and #1946
Apologies for dropping this one. I was hoping to pick it up as a rework of the SCP code, but this is a much larger job than I first realised.
The following message is now logged as in sesman.log for unrecognised users or invalid passwords:-
Username or password error for user: <user>

This is very much a quick fix. If preferred. I can add more detailed logging to the PAM code, or I could pull the existing PAM detail from xrdp/xrdp_mm.c into some sort of library module and use it to generate extra info in sesman.
Thoughts?","Fixes #1724 and #1946
Apologies for dropping this one. I was hoping to pick it up as a rework of the SCP code, but this is a much larger job than I first realised.
The following message is now logged as in sesman.log for unrecognised users or invalid passwords:-
Username or password error for user: <user>

This is very much a quick fix. If preferred. I can add more detailed logging to the PAM code, or I could pull the existing PAM detail from xrdp/xrdp_mm.c into some sort of library module and use it to generate extra info in sesman.
Thoughts?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1947,2021-07-19T08:34:02Z,2021-07-20T09:42:12Z,2021-10-22T18:29:36Z,MERGED,True,2,0,1,https://github.com/matt335672,Log a message for failed logins,1,[],https://github.com/neutrinolabs/xrdp/pull/1947,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1947#issuecomment-882397417,"Fixes #1724 and #1946
Apologies for dropping this one. I was hoping to pick it up as a rework of the SCP code, but this is a much larger job than I first realised.
The following message is now logged as in sesman.log for unrecognised users or invalid passwords:-
Username or password error for user: <user>

This is very much a quick fix. If preferred. I can add more detailed logging to the PAM code, or I could pull the existing PAM detail from xrdp/xrdp_mm.c into some sort of library module and use it to generate extra info in sesman.
Thoughts?",Maybe related to #909.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1947,2021-07-19T08:34:02Z,2021-07-20T09:42:12Z,2021-10-22T18:29:36Z,MERGED,True,2,0,1,https://github.com/matt335672,Log a message for failed logins,1,[],https://github.com/neutrinolabs/xrdp/pull/1947,https://github.com/matt335672,3,https://github.com/neutrinolabs/xrdp/pull/1947#issuecomment-882407831,"Fixes #1724 and #1946
Apologies for dropping this one. I was hoping to pick it up as a rework of the SCP code, but this is a much larger job than I first realised.
The following message is now logged as in sesman.log for unrecognised users or invalid passwords:-
Username or password error for user: <user>

This is very much a quick fix. If preferred. I can add more detailed logging to the PAM code, or I could pull the existing PAM detail from xrdp/xrdp_mm.c into some sort of library module and use it to generate extra info in sesman.
Thoughts?","Also #1921 on the discussions page.
I think the approach should be:-

provide detailed information in sesman log
more information to users via the xrdp login dialog, but not enough to compromise security.

We've currently got some PAM code in xrdp_mm.c which is used for logging in gateway situations (i.e. using pamusername= and pampassword= in xrdp.ini). That code could be moved to sesman, so we can get more detailed info in the sesman log. sesman can then return a simpler code to xrdp (and the user) for display purposes.
Does that sound reasonable?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1947,2021-07-19T08:34:02Z,2021-07-20T09:42:12Z,2021-10-22T18:29:36Z,MERGED,True,2,0,1,https://github.com/matt335672,Log a message for failed logins,1,[],https://github.com/neutrinolabs/xrdp/pull/1947,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/1947#issuecomment-882557184,"Fixes #1724 and #1946
Apologies for dropping this one. I was hoping to pick it up as a rework of the SCP code, but this is a much larger job than I first realised.
The following message is now logged as in sesman.log for unrecognised users or invalid passwords:-
Username or password error for user: <user>

This is very much a quick fix. If preferred. I can add more detailed logging to the PAM code, or I could pull the existing PAM detail from xrdp/xrdp_mm.c into some sort of library module and use it to generate extra info in sesman.
Thoughts?","Yes, it looks reasonable to me. Thanks!
Also, the PR is definitely simple, and there's no reason to object.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1947,2021-07-19T08:34:02Z,2021-07-20T09:42:12Z,2021-10-22T18:29:36Z,MERGED,True,2,0,1,https://github.com/matt335672,Log a message for failed logins,1,[],https://github.com/neutrinolabs/xrdp/pull/1947,https://github.com/MikoyChinese,5,https://github.com/neutrinolabs/xrdp/pull/1947#issuecomment-884767405,"Fixes #1724 and #1946
Apologies for dropping this one. I was hoping to pick it up as a rework of the SCP code, but this is a much larger job than I first realised.
The following message is now logged as in sesman.log for unrecognised users or invalid passwords:-
Username or password error for user: <user>

This is very much a quick fix. If preferred. I can add more detailed logging to the PAM code, or I could pull the existing PAM detail from xrdp/xrdp_mm.c into some sort of library module and use it to generate extra info in sesman.
Thoughts?","Why not append the client ip to log? s->client_ip, It will be useful to ban ip from attack.
    {
        LOG(LOG_LEVEL_INFO, ""Username or password error for user: %s from %s"",
            s->username, s->client_ip);
        scp_v0s_deny_connection(c);
    }",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1947,2021-07-19T08:34:02Z,2021-07-20T09:42:12Z,2021-10-22T18:29:36Z,MERGED,True,2,0,1,https://github.com/matt335672,Log a message for failed logins,1,[],https://github.com/neutrinolabs/xrdp/pull/1947,https://github.com/matt335672,6,https://github.com/neutrinolabs/xrdp/pull/1947#issuecomment-884797078,"Fixes #1724 and #1946
Apologies for dropping this one. I was hoping to pick it up as a rework of the SCP code, but this is a much larger job than I first realised.
The following message is now logged as in sesman.log for unrecognised users or invalid passwords:-
Username or password error for user: <user>

This is very much a quick fix. If preferred. I can add more detailed logging to the PAM code, or I could pull the existing PAM detail from xrdp/xrdp_mm.c into some sort of library module and use it to generate extra info in sesman.
Thoughts?","I did think about this, and was very much in two minds.
On the positive side, it's useful information for log scraping utilities.
On the negative side, this string may well change in the future, so I didn't want to introduce user dependencies on it.
The string is created by a call to g_write_ip_address() from the xrdp daemon and then sent to sesman. I'm hoping to rework that part of the protocol between xrdp and sesman to just send the actual connection information which will then get formatted by sesman. At the moment sesman has to jump through some rather ugly hoops to parse the data from xrdp.
What's your take on it? I can see you being rather annoyed if you're provided information which could change between releases. On the other hand you may prefer that to nothing at all. If you've got a strong preference to have the info I'll happily add it in.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1947,2021-07-19T08:34:02Z,2021-07-20T09:42:12Z,2021-10-22T18:29:36Z,MERGED,True,2,0,1,https://github.com/matt335672,Log a message for failed logins,1,[],https://github.com/neutrinolabs/xrdp/pull/1947,https://github.com/timriker,7,https://github.com/neutrinolabs/xrdp/pull/1947#issuecomment-949298344,"Fixes #1724 and #1946
Apologies for dropping this one. I was hoping to pick it up as a rework of the SCP code, but this is a much larger job than I first realised.
The following message is now logged as in sesman.log for unrecognised users or invalid passwords:-
Username or password error for user: <user>

This is very much a quick fix. If preferred. I can add more detailed logging to the PAM code, or I could pull the existing PAM detail from xrdp/xrdp_mm.c into some sort of library module and use it to generate extra info in sesman.
Thoughts?","On servers with public IPs, it would be a very good idea to setup things like fail2ban that recognize failed logins and then ban the source IP for a reasonable time. This would need a message like the above in #1947 (comment)
that includes the failure state, and the IP. It would be nice to have the user they tried as well to correlate with pam logs, but for fail2ban the date, failure state, and IP are the critical pieces.
Pick a format and stick to it. With the rework, the data can come through different paths, or even be output from different code, but keep the format the same. Something like:
""Login failure for %s from %s""
would be great.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1947,2021-07-19T08:34:02Z,2021-07-20T09:42:12Z,2021-10-22T18:29:36Z,MERGED,True,2,0,1,https://github.com/matt335672,Log a message for failed logins,1,[],https://github.com/neutrinolabs/xrdp/pull/1947,https://github.com/matt335672,8,https://github.com/neutrinolabs/xrdp/pull/1947#issuecomment-949457138,"Fixes #1724 and #1946
Apologies for dropping this one. I was hoping to pick it up as a rework of the SCP code, but this is a much larger job than I first realised.
The following message is now logged as in sesman.log for unrecognised users or invalid passwords:-
Username or password error for user: <user>

This is very much a quick fix. If preferred. I can add more detailed logging to the PAM code, or I could pull the existing PAM detail from xrdp/xrdp_mm.c into some sort of library module and use it to generate extra info in sesman.
Thoughts?","@timriker - could you take a look at #1976 for me, and comment?
Thanks.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1947,2021-07-19T08:34:02Z,2021-07-20T09:42:12Z,2021-10-22T18:29:36Z,MERGED,True,2,0,1,https://github.com/matt335672,Log a message for failed logins,1,[],https://github.com/neutrinolabs/xrdp/pull/1947,https://github.com/timriker,9,https://github.com/neutrinolabs/xrdp/pull/1947#issuecomment-949870467,"Fixes #1724 and #1946
Apologies for dropping this one. I was hoping to pick it up as a rework of the SCP code, but this is a much larger job than I first realised.
The following message is now logged as in sesman.log for unrecognised users or invalid passwords:-
Username or password error for user: <user>

This is very much a quick fix. If preferred. I can add more detailed logging to the PAM code, or I could pull the existing PAM detail from xrdp/xrdp_mm.c into some sort of library module and use it to generate extra info in sesman.
Thoughts?","@timriker - could you take a look at #1976 for me, and comment?

@matt335672 - commented there. That's looking great.",True,{'THUMBS_UP': ['https://github.com/matt335672']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1949,2021-07-20T11:50:09Z,2021-07-20T11:55:59Z,2021-07-20T11:56:02Z,MERGED,True,21,25,1,https://github.com/matt335672,Move erroneous parameter processing section,1,[],https://github.com/neutrinolabs/xrdp/pull/1949,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1949,"Commit 446cdd2 introduced a parameter processing block in the wrong location in xrdp-neutrinordp.c. This wasn't caught by the CI and I didn't catch it either.
This emergency PR moves the parameter processing block to the correct location.","Commit 446cdd2 introduced a parameter processing block in the wrong location in xrdp-neutrinordp.c. This wasn't caught by the CI and I didn't catch it either.
This emergency PR moves the parameter processing block to the correct location.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1952,2021-07-23T15:01:22Z,2021-08-31T02:10:32Z,2021-08-31T02:10:32Z,MERGED,True,61,3,4,https://github.com/TOMATO-ONE,override keyboard infomation #1950 (1st),2,[],https://github.com/neutrinolabs/xrdp/pull/1952,https://github.com/TOMATO-ONE,1,https://github.com/neutrinolabs/xrdp/pull/1952,"This is a PR for Discussions #1950.
In this discussion we are considering several issues.
This is the first one.
add an option to force the RDP Client to overwrite any keyboard information sent to it with the specified value for debugging purposes.
I welcome suggestions for corrections to redundant code or confusing comments.","This is a PR for Discussions #1950.
In this discussion we are considering several issues.
This is the first one.
add an option to force the RDP Client to overwrite any keyboard information sent to it with the specified value for debugging purposes.
I welcome suggestions for corrections to redundant code or confusing comments.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1952,2021-07-23T15:01:22Z,2021-08-31T02:10:32Z,2021-08-31T02:10:32Z,MERGED,True,61,3,4,https://github.com/TOMATO-ONE,override keyboard infomation #1950 (1st),2,[],https://github.com/neutrinolabs/xrdp/pull/1952,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/1952#issuecomment-896033491,"This is a PR for Discussions #1950.
In this discussion we are considering several issues.
This is the first one.
add an option to force the RDP Client to overwrite any keyboard information sent to it with the specified value for debugging purposes.
I welcome suggestions for corrections to redundant code or confusing comments.","@metalefty - when you get a moment can you look at this? It looks like it should be useful for debugging keyboard issues.
One thing which occurs to me is that tf we merge it for 0.9.17 we'll need to update xorgxrdp too, as the client_info has changed. At the moment that isn't necessary.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1952,2021-07-23T15:01:22Z,2021-08-31T02:10:32Z,2021-08-31T02:10:32Z,MERGED,True,61,3,4,https://github.com/TOMATO-ONE,override keyboard infomation #1950 (1st),2,[],https://github.com/neutrinolabs/xrdp/pull/1952,https://github.com/TOMATO-ONE,3,https://github.com/neutrinolabs/xrdp/pull/1952#issuecomment-899066937,"This is a PR for Discussions #1950.
In this discussion we are considering several issues.
This is the first one.
add an option to force the RDP Client to overwrite any keyboard information sent to it with the specified value for debugging purposes.
I welcome suggestions for corrections to redundant code or confusing comments.","I set the initial value of the variable client_info->xrdp_keyboard_overrides.*  to -1.
Please advise if there is a better way.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1952,2021-07-23T15:01:22Z,2021-08-31T02:10:32Z,2021-08-31T02:10:32Z,MERGED,True,61,3,4,https://github.com/TOMATO-ONE,override keyboard infomation #1950 (1st),2,[],https://github.com/neutrinolabs/xrdp/pull/1952,https://github.com/matt335672,4,https://github.com/neutrinolabs/xrdp/pull/1952#issuecomment-902750974,"This is a PR for Discussions #1950.
In this discussion we are considering several issues.
This is the first one.
add an option to force the RDP Client to overwrite any keyboard information sent to it with the specified value for debugging purposes.
I welcome suggestions for corrections to redundant code or confusing comments.",I think that's a good a way as any other.,True,{'THUMBS_UP': ['https://github.com/metalefty']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1952,2021-07-23T15:01:22Z,2021-08-31T02:10:32Z,2021-08-31T02:10:32Z,MERGED,True,61,3,4,https://github.com/TOMATO-ONE,override keyboard infomation #1950 (1st),2,[],https://github.com/neutrinolabs/xrdp/pull/1952,https://github.com/metalefty,5,https://github.com/neutrinolabs/xrdp/pull/1952#issuecomment-902774653,"This is a PR for Discussions #1950.
In this discussion we are considering several issues.
This is the first one.
add an option to force the RDP Client to overwrite any keyboard information sent to it with the specified value for debugging purposes.
I welcome suggestions for corrections to redundant code or confusing comments.",LGTM. Needs to be triaged whether to include it in 0.9.17 or not.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1952,2021-07-23T15:01:22Z,2021-08-31T02:10:32Z,2021-08-31T02:10:32Z,MERGED,True,61,3,4,https://github.com/TOMATO-ONE,override keyboard infomation #1950 (1st),2,[],https://github.com/neutrinolabs/xrdp/pull/1952,https://github.com/TOMATO-ONE,6,https://github.com/neutrinolabs/xrdp/pull/1952#issuecomment-903283956,"This is a PR for Discussions #1950.
In this discussion we are considering several issues.
This is the first one.
add an option to force the RDP Client to overwrite any keyboard information sent to it with the specified value for debugging purposes.
I welcome suggestions for corrections to redundant code or confusing comments.","@matt335672 @metalefty
Thank you for being so busy with the release!
This PR is part of the discussion #1950.
So I understand that this PR will be triaged.
On the other hand, I think this PR could stand alone to help resolve issues like issue #1944 and #1576.
Either way, I respect the thoughts of the team.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1952,2021-07-23T15:01:22Z,2021-08-31T02:10:32Z,2021-08-31T02:10:32Z,MERGED,True,61,3,4,https://github.com/TOMATO-ONE,override keyboard infomation #1950 (1st),2,[],https://github.com/neutrinolabs/xrdp/pull/1952,https://github.com/matt335672,7,https://github.com/neutrinolabs/xrdp/pull/1952#issuecomment-903572723,"This is a PR for Discussions #1950.
In this discussion we are considering several issues.
This is the first one.
add an option to force the RDP Client to overwrite any keyboard information sent to it with the specified value for debugging purposes.
I welcome suggestions for corrections to redundant code or confusing comments.","I'm happy for this to go in to 0.9.17. As it stands, it doesn't cause any changes in behaviour that I can determine, so I see it as very low risk.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1954,2021-07-27T08:52:48Z,2021-08-11T08:19:16Z,2021-08-11T08:19:16Z,MERGED,True,4,0,1,https://github.com/metalefty,clipboard: log file transfer for the purpose of audit,1,[],https://github.com/neutrinolabs/xrdp/pull/1954,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1954,"Some customers want to record who took out which file from the xrdp server to the client via clipboard for the purpose of audit.
Note: chansrv logs are replaced with an empty file every time when chansrv is restarted on the same display number.  Syslog should be used instead to make the log non-volatile.","Some customers want to record who took out which file from the xrdp server to the client via clipboard for the purpose of audit.
Note: chansrv logs are replaced with an empty file every time when chansrv is restarted on the same display number.  Syslog should be used instead to make the log non-volatile.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1954,2021-07-27T08:52:48Z,2021-08-11T08:19:16Z,2021-08-11T08:19:16Z,MERGED,True,4,0,1,https://github.com/metalefty,clipboard: log file transfer for the purpose of audit,1,[],https://github.com/neutrinolabs/xrdp/pull/1954,https://github.com/danielperna84,2,https://github.com/neutrinolabs/xrdp/pull/1954#issuecomment-890494804,"Some customers want to record who took out which file from the xrdp server to the client via clipboard for the purpose of audit.
Note: chansrv logs are replaced with an empty file every time when chansrv is restarted on the same display number.  Syslog should be used instead to make the log non-volatile.","Could this also be extended (maybe with an option that can be turned on and off) to also cover transferred strings (not the content, just the event)? In terms of auditing it could be interesting if the user has transferred a password into the session.
And while at the topic of logging: has it been discussed before to use a standardized format that's easy to parse by tools like Graylog? Here's a list of a few formats Graylog supports: https://www.graylog.org/post/log-formats-a-complete-guide
I'd open an issue for that if that's of interest.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1954,2021-07-27T08:52:48Z,2021-08-11T08:19:16Z,2021-08-11T08:19:16Z,MERGED,True,4,0,1,https://github.com/metalefty,clipboard: log file transfer for the purpose of audit,1,[],https://github.com/neutrinolabs/xrdp/pull/1954,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/1954#issuecomment-896542012,"Some customers want to record who took out which file from the xrdp server to the client via clipboard for the purpose of audit.
Note: chansrv logs are replaced with an empty file every time when chansrv is restarted on the same display number.  Syslog should be used instead to make the log non-volatile.","Could this also be extended (maybe with an option that can be turned on and off) to also cover transferred strings (not the content, just the event)? In terms of auditing it could be interesting if the user has transferred a password into the session.

Yes, but in another PR.

And while at the topic of logging: has it been discussed before to use a standardized format that's easy to parse by tools like Graylog? Here's a list of a few formats Graylog supports: https://www.graylog.org/post/log-formats-a-complete-guide

We've never discussed Graylog but have discussed logging improvements. Thanks for letting us know another option.",True,{'THUMBS_UP': ['https://github.com/danielperna84']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1954,2021-07-27T08:52:48Z,2021-08-11T08:19:16Z,2021-08-11T08:19:16Z,MERGED,True,4,0,1,https://github.com/metalefty,clipboard: log file transfer for the purpose of audit,1,[],https://github.com/neutrinolabs/xrdp/pull/1954,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/1954#issuecomment-896542650,"Some customers want to record who took out which file from the xrdp server to the client via clipboard for the purpose of audit.
Note: chansrv logs are replaced with an empty file every time when chansrv is restarted on the same display number.  Syslog should be used instead to make the log non-volatile.",I would like to ship this to the next release.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1962,2021-08-05T14:04:26Z,2021-09-01T09:19:12Z,2021-09-09T09:08:42Z,MERGED,True,2316,881,25,https://github.com/matt335672,Add imlib2 support for login screen customisation,14,[],https://github.com/neutrinolabs/xrdp/pull/1962,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1962,"Fixes #1929 #1819
See also discussion #1931
This PR allows for more customization of the xrdp login screen. An example customised screen from an Ubuntu 20.04 VM is:-

This is achieved by adding the following parameters to xrdp.ini:-
ls_background_image=/usr/share/backgrounds/ryan-stone-skykomish-river.jpg
ls_background_transform=zoom

ls_logo_filename=/usr/share/icons/hicolor/256x256/apps/ubuntu-logo-icon.png
ls_logo_transform=zoom
ls_logo_width=140
ls_logo_height=140
ls_logo_x_pos=105
ls_logo_y_pos=50
File types other than bmp files are supported by way of the imlib2 library which is available on all our currently supported platforms. Imlib2 support is optional. Without it, we fall back to the existing bmp only code. The existing code has been reworked to (hopefully) make it simpler to understand, and also to fix #1819.
Alpha blending of images onto the background colour behind them is supported - this can be seen on the Ubuntu logo in the screenshot above. On multi monitor setups, the background image is displayed on the primary monitor only.
A test suite has been added for the extended xrdp_bitmap_load() call, so that the correct operation of the external library can be checked.
This is a fairly significant PR, and so I suggest we hold off merging it until after the next release.","Fixes #1929 #1819
See also discussion #1931
This PR allows for more customization of the xrdp login screen. An example customised screen from an Ubuntu 20.04 VM is:-

This is achieved by adding the following parameters to xrdp.ini:-
ls_background_image=/usr/share/backgrounds/ryan-stone-skykomish-river.jpg
ls_background_transform=zoom

ls_logo_filename=/usr/share/icons/hicolor/256x256/apps/ubuntu-logo-icon.png
ls_logo_transform=zoom
ls_logo_width=140
ls_logo_height=140
ls_logo_x_pos=105
ls_logo_y_pos=50
File types other than bmp files are supported by way of the imlib2 library which is available on all our currently supported platforms. Imlib2 support is optional. Without it, we fall back to the existing bmp only code. The existing code has been reworked to (hopefully) make it simpler to understand, and also to fix #1819.
Alpha blending of images onto the background colour behind them is supported - this can be seen on the Ubuntu logo in the screenshot above. On multi monitor setups, the background image is displayed on the primary monitor only.
A test suite has been added for the extended xrdp_bitmap_load() call, so that the correct operation of the external library can be checked.
This is a fairly significant PR, and so I suggest we hold off merging it until after the next release.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1962,2021-08-05T14:04:26Z,2021-09-01T09:19:12Z,2021-09-09T09:08:42Z,MERGED,True,2316,881,25,https://github.com/matt335672,Add imlib2 support for login screen customisation,14,[],https://github.com/neutrinolabs/xrdp/pull/1962,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/1962#issuecomment-893524605,"Fixes #1929 #1819
See also discussion #1931
This PR allows for more customization of the xrdp login screen. An example customised screen from an Ubuntu 20.04 VM is:-

This is achieved by adding the following parameters to xrdp.ini:-
ls_background_image=/usr/share/backgrounds/ryan-stone-skykomish-river.jpg
ls_background_transform=zoom

ls_logo_filename=/usr/share/icons/hicolor/256x256/apps/ubuntu-logo-icon.png
ls_logo_transform=zoom
ls_logo_width=140
ls_logo_height=140
ls_logo_x_pos=105
ls_logo_y_pos=50
File types other than bmp files are supported by way of the imlib2 library which is available on all our currently supported platforms. Imlib2 support is optional. Without it, we fall back to the existing bmp only code. The existing code has been reworked to (hopefully) make it simpler to understand, and also to fix #1819.
Alpha blending of images onto the background colour behind them is supported - this can be seen on the Ubuntu logo in the screenshot above. On multi monitor setups, the background image is displayed on the primary monitor only.
A test suite has been added for the extended xrdp_bitmap_load() call, so that the correct operation of the external library can be checked.
This is a fairly significant PR, and so I suggest we hold off merging it until after the next release.",Just re-read #1931. I've added an extra check so that wallpaper isn't loaded if the client has disabled wallpaper in the performance settings.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1962,2021-08-05T14:04:26Z,2021-09-01T09:19:12Z,2021-09-09T09:08:42Z,MERGED,True,2316,881,25,https://github.com/matt335672,Add imlib2 support for login screen customisation,14,[],https://github.com/neutrinolabs/xrdp/pull/1962,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/1962#issuecomment-894412880,"Fixes #1929 #1819
See also discussion #1931
This PR allows for more customization of the xrdp login screen. An example customised screen from an Ubuntu 20.04 VM is:-

This is achieved by adding the following parameters to xrdp.ini:-
ls_background_image=/usr/share/backgrounds/ryan-stone-skykomish-river.jpg
ls_background_transform=zoom

ls_logo_filename=/usr/share/icons/hicolor/256x256/apps/ubuntu-logo-icon.png
ls_logo_transform=zoom
ls_logo_width=140
ls_logo_height=140
ls_logo_x_pos=105
ls_logo_y_pos=50
File types other than bmp files are supported by way of the imlib2 library which is available on all our currently supported platforms. Imlib2 support is optional. Without it, we fall back to the existing bmp only code. The existing code has been reworked to (hopefully) make it simpler to understand, and also to fix #1819.
Alpha blending of images onto the background colour behind them is supported - this can be seen on the Ubuntu logo in the screenshot above. On multi monitor setups, the background image is displayed on the primary monitor only.
A test suite has been added for the extended xrdp_bitmap_load() call, so that the correct operation of the external library can be checked.
This is a fairly significant PR, and so I suggest we hold off merging it until after the next release.","I've added an extra check so that wallpaper isn't loaded if the client has disabled wallpaper in the performance settings.

Awesome.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1962,2021-08-05T14:04:26Z,2021-09-01T09:19:12Z,2021-09-09T09:08:42Z,MERGED,True,2316,881,25,https://github.com/matt335672,Add imlib2 support for login screen customisation,14,[],https://github.com/neutrinolabs/xrdp/pull/1962,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/1962#issuecomment-894414868,"Fixes #1929 #1819
See also discussion #1931
This PR allows for more customization of the xrdp login screen. An example customised screen from an Ubuntu 20.04 VM is:-

This is achieved by adding the following parameters to xrdp.ini:-
ls_background_image=/usr/share/backgrounds/ryan-stone-skykomish-river.jpg
ls_background_transform=zoom

ls_logo_filename=/usr/share/icons/hicolor/256x256/apps/ubuntu-logo-icon.png
ls_logo_transform=zoom
ls_logo_width=140
ls_logo_height=140
ls_logo_x_pos=105
ls_logo_y_pos=50
File types other than bmp files are supported by way of the imlib2 library which is available on all our currently supported platforms. Imlib2 support is optional. Without it, we fall back to the existing bmp only code. The existing code has been reworked to (hopefully) make it simpler to understand, and also to fix #1819.
Alpha blending of images onto the background colour behind them is supported - this can be seen on the Ubuntu logo in the screenshot above. On multi monitor setups, the background image is displayed on the primary monitor only.
A test suite has been added for the extended xrdp_bitmap_load() call, so that the correct operation of the external library can be checked.
This is a fairly significant PR, and so I suggest we hold off merging it until after the next release.","Overall, LGTM.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1962,2021-08-05T14:04:26Z,2021-09-01T09:19:12Z,2021-09-09T09:08:42Z,MERGED,True,2316,881,25,https://github.com/matt335672,Add imlib2 support for login screen customisation,14,[],https://github.com/neutrinolabs/xrdp/pull/1962,https://github.com/matt335672,5,https://github.com/neutrinolabs/xrdp/pull/1962#issuecomment-895136089,"Fixes #1929 #1819
See also discussion #1931
This PR allows for more customization of the xrdp login screen. An example customised screen from an Ubuntu 20.04 VM is:-

This is achieved by adding the following parameters to xrdp.ini:-
ls_background_image=/usr/share/backgrounds/ryan-stone-skykomish-river.jpg
ls_background_transform=zoom

ls_logo_filename=/usr/share/icons/hicolor/256x256/apps/ubuntu-logo-icon.png
ls_logo_transform=zoom
ls_logo_width=140
ls_logo_height=140
ls_logo_x_pos=105
ls_logo_y_pos=50
File types other than bmp files are supported by way of the imlib2 library which is available on all our currently supported platforms. Imlib2 support is optional. Without it, we fall back to the existing bmp only code. The existing code has been reworked to (hopefully) make it simpler to understand, and also to fix #1819.
Alpha blending of images onto the background colour behind them is supported - this can be seen on the Ubuntu logo in the screenshot above. On multi monitor setups, the background image is displayed on the primary monitor only.
A test suite has been added for the extended xrdp_bitmap_load() call, so that the correct operation of the external library can be checked.
This is a fairly significant PR, and so I suggest we hold off merging it until after the next release.","xrdp -v now works OK for imlib2.
I also noticed I'd not added CI support for i386 legacy. It's a small thing, but it's in now.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1962,2021-08-05T14:04:26Z,2021-09-01T09:19:12Z,2021-09-09T09:08:42Z,MERGED,True,2316,881,25,https://github.com/matt335672,Add imlib2 support for login screen customisation,14,[],https://github.com/neutrinolabs/xrdp/pull/1962,https://github.com/metalefty,6,https://github.com/neutrinolabs/xrdp/pull/1962#issuecomment-895716273,"Fixes #1929 #1819
See also discussion #1931
This PR allows for more customization of the xrdp login screen. An example customised screen from an Ubuntu 20.04 VM is:-

This is achieved by adding the following parameters to xrdp.ini:-
ls_background_image=/usr/share/backgrounds/ryan-stone-skykomish-river.jpg
ls_background_transform=zoom

ls_logo_filename=/usr/share/icons/hicolor/256x256/apps/ubuntu-logo-icon.png
ls_logo_transform=zoom
ls_logo_width=140
ls_logo_height=140
ls_logo_x_pos=105
ls_logo_y_pos=50
File types other than bmp files are supported by way of the imlib2 library which is available on all our currently supported platforms. Imlib2 support is optional. Without it, we fall back to the existing bmp only code. The existing code has been reworked to (hopefully) make it simpler to understand, and also to fix #1819.
Alpha blending of images onto the background colour behind them is supported - this can be seen on the Ubuntu logo in the screenshot above. On multi monitor setups, the background image is displayed on the primary monitor only.
A test suite has been added for the extended xrdp_bitmap_load() call, so that the correct operation of the external library can be checked.
This is a fairly significant PR, and so I suggest we hold off merging it until after the next release.","so I suggest we hold off merging it until after the next release.

I agree.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1963,2021-08-05T15:08:33Z,2021-08-09T10:02:52Z,2021-09-09T09:08:40Z,MERGED,True,22,9,1,https://github.com/matt335672,Cater for RFB clip size of zero bytes,1,[],https://github.com/neutrinolabs/xrdp/pull/1963,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1963,"Fixes #1955
If the VNC server sends over a clipboard announcement of 0 bytes, the VNC module calls malloc(0).
This PR makes an explicit test for that situation.","Fixes #1955
If the VNC server sends over a clipboard announcement of 0 bytes, the VNC module calls malloc(0).
This PR makes an explicit test for that situation.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1965,2021-08-06T14:40:12Z,2021-08-10T12:35:52Z,2021-09-27T13:45:22Z,MERGED,True,8,0,1,https://github.com/fcolista,sesman/startwm.sh : add support for Alpine Linux,1,[],https://github.com/neutrinolabs/xrdp/pull/1965,https://github.com/fcolista,1,https://github.com/neutrinolabs/xrdp/pull/1965,"Hello.
This patch adds support for Alpine Linux in order to correctly find the .xinitrc.
This patch follows up an issue in alpinelinux gitlab : https://gitlab.alpinelinux.org/alpine/aports/-/issues/12896
Credits to https://gitlab.alpinelinux.org/raidenii
Thank you!
.: Francesco","Hello.
This patch adds support for Alpine Linux in order to correctly find the .xinitrc.
This patch follows up an issue in alpinelinux gitlab : https://gitlab.alpinelinux.org/alpine/aports/-/issues/12896
Credits to https://gitlab.alpinelinux.org/raidenii
Thank you!
.: Francesco",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1965,2021-08-06T14:40:12Z,2021-08-10T12:35:52Z,2021-09-27T13:45:22Z,MERGED,True,8,0,1,https://github.com/fcolista,sesman/startwm.sh : add support for Alpine Linux,1,[],https://github.com/neutrinolabs/xrdp/pull/1965,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1965#issuecomment-894402863,"Hello.
This patch adds support for Alpine Linux in order to correctly find the .xinitrc.
This patch follows up an issue in alpinelinux gitlab : https://gitlab.alpinelinux.org/alpine/aports/-/issues/12896
Credits to https://gitlab.alpinelinux.org/raidenii
Thank you!
.: Francesco",LGTM.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1965,2021-08-06T14:40:12Z,2021-08-10T12:35:52Z,2021-09-27T13:45:22Z,MERGED,True,8,0,1,https://github.com/fcolista,sesman/startwm.sh : add support for Alpine Linux,1,[],https://github.com/neutrinolabs/xrdp/pull/1965,https://github.com/matt335672,3,https://github.com/neutrinolabs/xrdp/pull/1965#issuecomment-895098190,"Hello.
This patch adds support for Alpine Linux in order to correctly find the .xinitrc.
This patch follows up an issue in alpinelinux gitlab : https://gitlab.alpinelinux.org/alpine/aports/-/issues/12896
Credits to https://gitlab.alpinelinux.org/raidenii
Thank you!
.: Francesco","Hi @fcolista
Thanks very much for this.
Could I trouble you to move your added stanza from the front of the existing list to the end (e.g. after the SuSE section)?
There's a chance that an existing platform has both /etc/X11/xinit/xinitrc and another file in place, and on these platforms your change could introduce a change in existing behaviour. Ubuntu 20.04 has both /etc/X11/xinit/xinitrc and /etc/X11/Xsession. On that platform I don't think it makes a difference, but I'm not in a position to check every single platform out there.
Apart from that I see no reason why this shouldn't be merged at all.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1965,2021-08-06T14:40:12Z,2021-08-10T12:35:52Z,2021-09-27T13:45:22Z,MERGED,True,8,0,1,https://github.com/fcolista,sesman/startwm.sh : add support for Alpine Linux,1,[],https://github.com/neutrinolabs/xrdp/pull/1965,https://github.com/fcolista,4,https://github.com/neutrinolabs/xrdp/pull/1965#issuecomment-895291966,"Hello.
This patch adds support for Alpine Linux in order to correctly find the .xinitrc.
This patch follows up an issue in alpinelinux gitlab : https://gitlab.alpinelinux.org/alpine/aports/-/issues/12896
Credits to https://gitlab.alpinelinux.org/raidenii
Thank you!
.: Francesco","Hi @matt335672,
done as you requested. Your suggestion makes sense.
Thanks.
.: Francesco",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1965,2021-08-06T14:40:12Z,2021-08-10T12:35:52Z,2021-09-27T13:45:22Z,MERGED,True,8,0,1,https://github.com/fcolista,sesman/startwm.sh : add support for Alpine Linux,1,[],https://github.com/neutrinolabs/xrdp/pull/1965,https://github.com/matt335672,5,https://github.com/neutrinolabs/xrdp/pull/1965#issuecomment-895991346,"Hello.
This patch adds support for Alpine Linux in order to correctly find the .xinitrc.
This patch follows up an issue in alpinelinux gitlab : https://gitlab.alpinelinux.org/alpine/aports/-/issues/12896
Credits to https://gitlab.alpinelinux.org/raidenii
Thank you!
.: Francesco","Thanks for your contribution, @fcolista",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1965,2021-08-06T14:40:12Z,2021-08-10T12:35:52Z,2021-09-27T13:45:22Z,MERGED,True,8,0,1,https://github.com/fcolista,sesman/startwm.sh : add support for Alpine Linux,1,[],https://github.com/neutrinolabs/xrdp/pull/1965,https://github.com/pelepelin,6,https://github.com/neutrinolabs/xrdp/pull/1965#issuecomment-921848760,"Hello.
This patch adds support for Alpine Linux in order to correctly find the .xinitrc.
This patch follows up an issue in alpinelinux gitlab : https://gitlab.alpinelinux.org/alpine/aports/-/issues/12896
Credits to https://gitlab.alpinelinux.org/raidenii
Thank you!
.: Francesco","@fcolista @matt335672 Sorry for being late for the party, with the new block added to the end it won't be executed on Alpine because Alpine also has /etc/X11/xinit/Xsession file (which is unfortunately not suitable for the purpose of startwm.sh)",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1965,2021-08-06T14:40:12Z,2021-08-10T12:35:52Z,2021-09-27T13:45:22Z,MERGED,True,8,0,1,https://github.com/fcolista,sesman/startwm.sh : add support for Alpine Linux,1,[],https://github.com/neutrinolabs/xrdp/pull/1965,https://github.com/matt335672,7,https://github.com/neutrinolabs/xrdp/pull/1965#issuecomment-921882401,"Hello.
This patch adds support for Alpine Linux in order to correctly find the .xinitrc.
This patch follows up an issue in alpinelinux gitlab : https://gitlab.alpinelinux.org/alpine/aports/-/issues/12896
Credits to https://gitlab.alpinelinux.org/raidenii
Thank you!
.: Francesco","That's a little awkward, for the reasons posted above.
Which apk provides /etc/X11/xinit/Xsession on Alpine? I'll have a look at what it does.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1965,2021-08-06T14:40:12Z,2021-08-10T12:35:52Z,2021-09-27T13:45:22Z,MERGED,True,8,0,1,https://github.com/fcolista,sesman/startwm.sh : add support for Alpine Linux,1,[],https://github.com/neutrinolabs/xrdp/pull/1965,https://github.com/pelepelin,8,https://github.com/neutrinolabs/xrdp/pull/1965#issuecomment-922488649,"Hello.
This patch adds support for Alpine Linux in order to correctly find the .xinitrc.
This patch follows up an issue in alpinelinux gitlab : https://gitlab.alpinelinux.org/alpine/aports/-/issues/12896
Credits to https://gitlab.alpinelinux.org/raidenii
Thank you!
.: Francesco","Provided by xinit
Unlike Ubuntu where /etc/X11/Xsession finds and executes session manager itself, in Alpine /etc/X11/xinit/Xsession just sets up some env and ends with exec $@ expecting chained executable in args.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1965,2021-08-06T14:40:12Z,2021-08-10T12:35:52Z,2021-09-27T13:45:22Z,MERGED,True,8,0,1,https://github.com/fcolista,sesman/startwm.sh : add support for Alpine Linux,1,[],https://github.com/neutrinolabs/xrdp/pull/1965,https://github.com/matt335672,9,https://github.com/neutrinolabs/xrdp/pull/1965#issuecomment-923112524,"Hello.
This patch adds support for Alpine Linux in order to correctly find the .xinitrc.
This patch follows up an issue in alpinelinux gitlab : https://gitlab.alpinelinux.org/alpine/aports/-/issues/12896
Credits to https://gitlab.alpinelinux.org/raidenii
Thank you!
.: Francesco","Yes - I've just configured an Alpine XFCE desktop so I can have a look at this.
I installed the xrdp apk. The best solution I found is this:-
--- startwm.sh.old
+++ startwm.sh
@@ -70,6 +70,18 @@
     post_start
     exit 0
   fi
+                                          
+  # Alpine                                                              
+  # Don't use /etc/X11/xinit/Xsession - it doesn't work
+  if [ -f /etc/alpine-release ]; then     
+    if [ -f /etc/X11/xinit/xinitrc ]; then
+        pre_start                         
+        /etc/X11/xinit/xinitrc                          
+        post_start                                                      
+    else                                                
+        echo ""** xinit package isn't installed"" >&2     
+    fi                                                  
+  fi                                                    
 
   # el
I can add this in if you like, and revert the previous patch. If I do so I'll ask you to review it so you can test it.
One other thing;  If we go down this route, you might want to add a couple of dependencies to the apk? I've got this:-
$ apk info -R xrdp
xrdp-0.9.15-r1 depends on:
/bin/sh
so:libX11.so.6
so:libXfixes.so.3
so:libXrandr.so.2
so:libc.musl-x86_64.so.1
so:libcrypto.so.1.1
so:libfuse.so.2
so:libssl.so.1.1
so:libturbojpeg.so.0

However, if used as-is, the script introduces a dependency on bash, and xinit. So if we go ahead with the above, should you not have a depends=""bash xinit"" in your APKBUILD file?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1965,2021-08-06T14:40:12Z,2021-08-10T12:35:52Z,2021-09-27T13:45:22Z,MERGED,True,8,0,1,https://github.com/fcolista,sesman/startwm.sh : add support for Alpine Linux,1,[],https://github.com/neutrinolabs/xrdp/pull/1965,https://github.com/matt335672,10,https://github.com/neutrinolabs/xrdp/pull/1965#issuecomment-926521173,"Hello.
This patch adds support for Alpine Linux in order to correctly find the .xinitrc.
This patch follows up an issue in alpinelinux gitlab : https://gitlab.alpinelinux.org/alpine/aports/-/issues/12896
Credits to https://gitlab.alpinelinux.org/raidenii
Thank you!
.: Francesco","@pelepelin, @fcolista - I need some feedback on this. At the moment I suspect we don't want this (merged) patch at all, so it needs to be removed or replaced. I don't know which way you want to go. If I don't hear from you in a week or so, I'll unmerge this so at least we're in a sane state.
I'm happy to work with you on this.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1965,2021-08-06T14:40:12Z,2021-08-10T12:35:52Z,2021-09-27T13:45:22Z,MERGED,True,8,0,1,https://github.com/fcolista,sesman/startwm.sh : add support for Alpine Linux,1,[],https://github.com/neutrinolabs/xrdp/pull/1965,https://github.com/fcolista,11,https://github.com/neutrinolabs/xrdp/pull/1965#issuecomment-927133885,"Hello.
This patch adds support for Alpine Linux in order to correctly find the .xinitrc.
This patch follows up an issue in alpinelinux gitlab : https://gitlab.alpinelinux.org/alpine/aports/-/issues/12896
Credits to https://gitlab.alpinelinux.org/raidenii
Thank you!
.: Francesco",@matt335672 I'm fine with adding xinit to the APKBUILD. I'm not sure on why you want bash. That /bin/sh is busybox ash.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1965,2021-08-06T14:40:12Z,2021-08-10T12:35:52Z,2021-09-27T13:45:22Z,MERGED,True,8,0,1,https://github.com/fcolista,sesman/startwm.sh : add support for Alpine Linux,1,[],https://github.com/neutrinolabs/xrdp/pull/1965,https://github.com/fcolista,12,https://github.com/neutrinolabs/xrdp/pull/1965#issuecomment-927135173,"Hello.
This patch adds support for Alpine Linux in order to correctly find the .xinitrc.
This patch follows up an issue in alpinelinux gitlab : https://gitlab.alpinelinux.org/alpine/aports/-/issues/12896
Credits to https://gitlab.alpinelinux.org/raidenii
Thank you!
.: Francesco","@matt335672  ok, done. The xinit dependency has been added:  http://dup.pw/alpine/aports/e855ad6c00fd
This commit has done in edge. So if you want to test it in your environment, you should add the following community/edge repository in /etc/apk/repositories : http://dl-cdn.alpinelinux.org/alpine/edge/community
Thanks.
.: Francesco",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1965,2021-08-06T14:40:12Z,2021-08-10T12:35:52Z,2021-09-27T13:45:22Z,MERGED,True,8,0,1,https://github.com/fcolista,sesman/startwm.sh : add support for Alpine Linux,1,[],https://github.com/neutrinolabs/xrdp/pull/1965,https://github.com/matt335672,13,https://github.com/neutrinolabs/xrdp/pull/1965#issuecomment-927657834,"Hello.
This patch adds support for Alpine Linux in order to correctly find the .xinitrc.
This patch follows up an issue in alpinelinux gitlab : https://gitlab.alpinelinux.org/alpine/aports/-/issues/12896
Credits to https://gitlab.alpinelinux.org/raidenii
Thank you!
.: Francesco","@fcolista - the reason we might want to add bash is that startwm.sh as supplied by xrdp uses bash.
So as I see it, you either need to add bash as a dependency, or provide your own startwm.sh (as Fedora and Ubuntu do).",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1965,2021-08-06T14:40:12Z,2021-08-10T12:35:52Z,2021-09-27T13:45:22Z,MERGED,True,8,0,1,https://github.com/fcolista,sesman/startwm.sh : add support for Alpine Linux,1,[],https://github.com/neutrinolabs/xrdp/pull/1965,https://github.com/fcolista,14,https://github.com/neutrinolabs/xrdp/pull/1965#issuecomment-927665608,"Hello.
This patch adds support for Alpine Linux in order to correctly find the .xinitrc.
This patch follows up an issue in alpinelinux gitlab : https://gitlab.alpinelinux.org/alpine/aports/-/issues/12896
Credits to https://gitlab.alpinelinux.org/raidenii
Thank you!
.: Francesco","Ah ok, gotcha. I missed that part.
Now Alpine package has bash as dep:  https://git.alpinelinux.org/aports/commit/?id=c7a048bc510c
Thanks.
.: Francesco",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1965,2021-08-06T14:40:12Z,2021-08-10T12:35:52Z,2021-09-27T13:45:22Z,MERGED,True,8,0,1,https://github.com/fcolista,sesman/startwm.sh : add support for Alpine Linux,1,[],https://github.com/neutrinolabs/xrdp/pull/1965,https://github.com/matt335672,15,https://github.com/neutrinolabs/xrdp/pull/1965#issuecomment-927751187,"Hello.
This patch adds support for Alpine Linux in order to correctly find the .xinitrc.
This patch follows up an issue in alpinelinux gitlab : https://gitlab.alpinelinux.org/alpine/aports/-/issues/12896
Credits to https://gitlab.alpinelinux.org/raidenii
Thank you!
.: Francesco","@fcolista - I'm having testing problems at the moment with xorgxrdp:-
$ apk list -I \*xrdp
xorgxrdp-0.2.17-r0 x86_64 {xorgxrdp} (X11) [installed]
xrdp-0.9.17-r2 x86_64 {xrdp} (Apache-2.0) [installed]

xorgxrdp builds against xrdp, as they share a common file. I'm getting this error in the X server log from the xorgxrdp module:-
[   451.543] expected xrdp client_info version 20210225, got 20210723
[   451.543] (EE)                                                           
Fatal server error:                                        
[   451.543] (EE) Incompatible xrdp version detected  - please recompile(EE)
[   451.543] (EE)                             

I suspect it's because xorgxrdp 0.2.17-r0 is being built on a machine with an older version of xrdp-dev on it. Is that possible?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1965,2021-08-06T14:40:12Z,2021-08-10T12:35:52Z,2021-09-27T13:45:22Z,MERGED,True,8,0,1,https://github.com/fcolista,sesman/startwm.sh : add support for Alpine Linux,1,[],https://github.com/neutrinolabs/xrdp/pull/1965,https://github.com/fcolista,16,https://github.com/neutrinolabs/xrdp/pull/1965#issuecomment-927808254,"Hello.
This patch adds support for Alpine Linux in order to correctly find the .xinitrc.
This patch follows up an issue in alpinelinux gitlab : https://gitlab.alpinelinux.org/alpine/aports/-/issues/12896
Credits to https://gitlab.alpinelinux.org/raidenii
Thank you!
.: Francesco","You should find xorgxrdp-0.2.17-r1 built against new xrdp:
https://git.alpinelinux.org/aports/commit/?id=33a600962b8b
This will took some time before mirrors got syncd after package build.
.: Francesco",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1965,2021-08-06T14:40:12Z,2021-08-10T12:35:52Z,2021-09-27T13:45:22Z,MERGED,True,8,0,1,https://github.com/fcolista,sesman/startwm.sh : add support for Alpine Linux,1,[],https://github.com/neutrinolabs/xrdp/pull/1965,https://github.com/matt335672,17,https://github.com/neutrinolabs/xrdp/pull/1965#issuecomment-927890169,"Hello.
This patch adds support for Alpine Linux in order to correctly find the .xinitrc.
This patch follows up an issue in alpinelinux gitlab : https://gitlab.alpinelinux.org/alpine/aports/-/issues/12896
Credits to https://gitlab.alpinelinux.org/raidenii
Thank you!
.: Francesco","Thanks @fcolista - that's working now.
I've raised #2005 to cover this. Feel free to comment!",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1975,2021-08-26T15:03:37Z,2021-09-03T11:36:40Z,2021-09-03T11:36:44Z,MERGED,True,320,25,4,https://github.com/matt335672,Use text strings for security level logging at ISO layer,1,[],https://github.com/neutrinolabs/xrdp/pull/1975,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1975,"Fixes #1974
Can be merged after v0.9.17 (if people are happy with the code, that is).","Fixes #1974
Can be merged after v0.9.17 (if people are happy with the code, that is).",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1975,2021-08-26T15:03:37Z,2021-09-03T11:36:40Z,2021-09-03T11:36:44Z,MERGED,True,320,25,4,https://github.com/matt335672,Use text strings for security level logging at ISO layer,1,[],https://github.com/neutrinolabs/xrdp/pull/1975,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/1975#issuecomment-907147926,"Fixes #1974
Can be merged after v0.9.17 (if people are happy with the code, that is).","I've had a think about this overnight and it makes sense (to me at least) to move the logic to convert a bitmask to a string to the string calls module for general logging.
Thoughts?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1975,2021-08-26T15:03:37Z,2021-09-03T11:36:40Z,2021-09-03T11:36:44Z,MERGED,True,320,25,4,https://github.com/matt335672,Use text strings for security level logging at ISO layer,1,[],https://github.com/neutrinolabs/xrdp/pull/1975,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/1975#issuecomment-909947932,"Fixes #1974
Can be merged after v0.9.17 (if people are happy with the code, that is).","It makes sense to me, too.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1975,2021-08-26T15:03:37Z,2021-09-03T11:36:40Z,2021-09-03T11:36:44Z,MERGED,True,320,25,4,https://github.com/matt335672,Use text strings for security level logging at ISO layer,1,[],https://github.com/neutrinolabs/xrdp/pull/1975,https://github.com/matt335672,4,https://github.com/neutrinolabs/xrdp/pull/1975#issuecomment-910185593,"Fixes #1974
Can be merged after v0.9.17 (if people are happy with the code, that is).",I've moved the mask output stuff to the string calls module and added some unit tests.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1975,2021-08-26T15:03:37Z,2021-09-03T11:36:40Z,2021-09-03T11:36:44Z,MERGED,True,320,25,4,https://github.com/matt335672,Use text strings for security level logging at ISO layer,1,[],https://github.com/neutrinolabs/xrdp/pull/1975,https://github.com/matt335672,5,https://github.com/neutrinolabs/xrdp/pull/1975#issuecomment-910186887,"Fixes #1974
Can be merged after v0.9.17 (if people are happy with the code, that is).","Example messages:-
[20210901-12:12:56] [DEBUG] Security layer: requested RDP, selected RDP

[20210826-15:29:39] [DEBUG] Security layer: requested SSL|HYBRID|HYBRID_EX, selected SSL",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1975,2021-08-26T15:03:37Z,2021-09-03T11:36:40Z,2021-09-03T11:36:44Z,MERGED,True,320,25,4,https://github.com/matt335672,Use text strings for security level logging at ISO layer,1,[],https://github.com/neutrinolabs/xrdp/pull/1975,https://github.com/metalefty,6,https://github.com/neutrinolabs/xrdp/pull/1975#issuecomment-911118433,"Fixes #1974
Can be merged after v0.9.17 (if people are happy with the code, that is).","At least this solves the original issue.
Thoughts:

It would be very nice if also capable protocols on the server-side are logged.

requested=SSL|HYBRID|HYBRID_EX, capable=RDP|SSL, selected=SSL



We've been using the word ""security layer"" but it might not be a standard word in MS spec. ""requested protocol"" or ""security protocol"" appears in MS-RDPBCGR 2.2.1.1.1. Let's switch to such standard words for easy reference.


The current log format at least includes necessary information but I think there's some room to pursuit easy-to-read format. Can you think of anything else?


[20210826-15:29:39] [DEBUG] Security layer: requested=[SSL|HYBRID|HYBRID_EX] selected=[SSL]",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1975,2021-08-26T15:03:37Z,2021-09-03T11:36:40Z,2021-09-03T11:36:44Z,MERGED,True,320,25,4,https://github.com/matt335672,Use text strings for security level logging at ISO layer,1,[],https://github.com/neutrinolabs/xrdp/pull/1975,https://github.com/matt335672,7,https://github.com/neutrinolabs/xrdp/pull/1975#issuecomment-911792786,"Fixes #1974
Can be merged after v0.9.17 (if people are happy with the code, that is).","Example messages are now as follows. I've bumped the level to INFO, as this may be useful for users:-
[20210902-16:01:28] [INFO ] Security protocol: configured [SSL], requested [SSL|HYBRID|HYBRID_EX|RDP], selected [SSL]

[20210902-16:02:35] [INFO ] Security protocol: configured [RDP], requested [SSL|HYBRID|HYBRID_EX|RDP], selected [RDP]

[20210902-16:03:16] [INFO ] Security protocol: configured [SSL|RDP], requested [SSL|HYBRID|HYBRID_EX|RDP], selected [SSL]

I've also added a warning about the TLS certificate being unreadable if the security level is set to 'negotiate':-
[20210902-16:04:04] [WARN ] Cannot accept TLS connections because certificate or private key file is not readable. certificate file: [], private key file: []",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1976,2021-08-27T12:14:34Z,2021-11-18T10:11:13Z,2021-11-18T10:11:20Z,MERGED,True,165,52,13,https://github.com/matt335672,Fail2ban support,3,[],https://github.com/neutrinolabs/xrdp/pull/1976,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1976,"This follows on from conversations with @MikoyChinese in #1946 and @hubeny in #1973. Both of these users want the IP address of a failed login logged for use with fail2ban, which seems to make sense to me.
The stumbling block I had with this, is that the client_ip string from g_write_ip_address() contains more than just an IP address, so just logging that may introduce a dependency on the form of the output from that function. It seems to make sense to me to just log the IP address, and mark the log message as being a potential external dependency with a comment.
This PR makes the following changes over two commits.
The first commit renames g_write_ip_address() as g_write_client_description() and changes all the member variables using this value from client_ip to connection_description. This makes maintainers less likely to trip over client_ip not being an IP address at all (which I've done myself in the past).
The second commit adds a function to extract the IP address from the connection description for places where an actual IP address is required. These are:-

Messages intended for fail2ban
A chunk of code in session.c where we can match sessions based in IP address if that's selected in the policy. This code isn't used by default. Interestingly, there's a bug in the original where it fails with IPv6 addresses.

There's a change to xrdp_client_info here (member rename), but AFAICT there's no impact on xorgxrdp.
@MikoyChinese, @hubeny - if any of you are in a position to test this, please do.","This follows on from conversations with @MikoyChinese in #1946 and @hubeny in #1973. Both of these users want the IP address of a failed login logged for use with fail2ban, which seems to make sense to me.
The stumbling block I had with this, is that the client_ip string from g_write_ip_address() contains more than just an IP address, so just logging that may introduce a dependency on the form of the output from that function. It seems to make sense to me to just log the IP address, and mark the log message as being a potential external dependency with a comment.
This PR makes the following changes over two commits.
The first commit renames g_write_ip_address() as g_write_client_description() and changes all the member variables using this value from client_ip to connection_description. This makes maintainers less likely to trip over client_ip not being an IP address at all (which I've done myself in the past).
The second commit adds a function to extract the IP address from the connection description for places where an actual IP address is required. These are:-

Messages intended for fail2ban
A chunk of code in session.c where we can match sessions based in IP address if that's selected in the policy. This code isn't used by default. Interestingly, there's a bug in the original where it fails with IPv6 addresses.

There's a change to xrdp_client_info here (member rename), but AFAICT there's no impact on xorgxrdp.
@MikoyChinese, @hubeny - if any of you are in a position to test this, please do.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1976,2021-08-27T12:14:34Z,2021-11-18T10:11:13Z,2021-11-18T10:11:20Z,MERGED,True,165,52,13,https://github.com/matt335672,Fail2ban support,3,[],https://github.com/neutrinolabs/xrdp/pull/1976,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/1976#issuecomment-907161414,"This follows on from conversations with @MikoyChinese in #1946 and @hubeny in #1973. Both of these users want the IP address of a failed login logged for use with fail2ban, which seems to make sense to me.
The stumbling block I had with this, is that the client_ip string from g_write_ip_address() contains more than just an IP address, so just logging that may introduce a dependency on the form of the output from that function. It seems to make sense to me to just log the IP address, and mark the log message as being a potential external dependency with a comment.
This PR makes the following changes over two commits.
The first commit renames g_write_ip_address() as g_write_client_description() and changes all the member variables using this value from client_ip to connection_description. This makes maintainers less likely to trip over client_ip not being an IP address at all (which I've done myself in the past).
The second commit adds a function to extract the IP address from the connection description for places where an actual IP address is required. These are:-

Messages intended for fail2ban
A chunk of code in session.c where we can match sessions based in IP address if that's selected in the policy. This code isn't used by default. Interestingly, there's a bug in the original where it fails with IPv6 addresses.

There's a change to xrdp_client_info here (member rename), but AFAICT there's no impact on xorgxrdp.
@MikoyChinese, @hubeny - if any of you are in a position to test this, please do.","Example output string from sesman. This is an IPV6 development build.
20210827-12:53:48] [INFO ] [scp_v0_process(scp_v0.c:167)] Username or password error for user: testuser from ::ffff:10.1.2.3",True,{'THUMBS_UP': ['https://github.com/metalefty']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1976,2021-08-27T12:14:34Z,2021-11-18T10:11:13Z,2021-11-18T10:11:20Z,MERGED,True,165,52,13,https://github.com/matt335672,Fail2ban support,3,[],https://github.com/neutrinolabs/xrdp/pull/1976,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/1976#issuecomment-949797404,"This follows on from conversations with @MikoyChinese in #1946 and @hubeny in #1973. Both of these users want the IP address of a failed login logged for use with fail2ban, which seems to make sense to me.
The stumbling block I had with this, is that the client_ip string from g_write_ip_address() contains more than just an IP address, so just logging that may introduce a dependency on the form of the output from that function. It seems to make sense to me to just log the IP address, and mark the log message as being a potential external dependency with a comment.
This PR makes the following changes over two commits.
The first commit renames g_write_ip_address() as g_write_client_description() and changes all the member variables using this value from client_ip to connection_description. This makes maintainers less likely to trip over client_ip not being an IP address at all (which I've done myself in the past).
The second commit adds a function to extract the IP address from the connection description for places where an actual IP address is required. These are:-

Messages intended for fail2ban
A chunk of code in session.c where we can match sessions based in IP address if that's selected in the policy. This code isn't used by default. Interestingly, there's a bug in the original where it fails with IPv6 addresses.

There's a change to xrdp_client_info here (member rename), but AFAICT there's no impact on xorgxrdp.
@MikoyChinese, @hubeny - if any of you are in a position to test this, please do.","BTW, is it possible to log port knocking to RDP port?
Port knocking I mean here is a little bit different from the common use. I meant just connecting to 3389/tcp and disconnecting quickly without sending any credentials.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1976,2021-08-27T12:14:34Z,2021-11-18T10:11:13Z,2021-11-18T10:11:20Z,MERGED,True,165,52,13,https://github.com/matt335672,Fail2ban support,3,[],https://github.com/neutrinolabs/xrdp/pull/1976,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/1976#issuecomment-949805903,"This follows on from conversations with @MikoyChinese in #1946 and @hubeny in #1973. Both of these users want the IP address of a failed login logged for use with fail2ban, which seems to make sense to me.
The stumbling block I had with this, is that the client_ip string from g_write_ip_address() contains more than just an IP address, so just logging that may introduce a dependency on the form of the output from that function. It seems to make sense to me to just log the IP address, and mark the log message as being a potential external dependency with a comment.
This PR makes the following changes over two commits.
The first commit renames g_write_ip_address() as g_write_client_description() and changes all the member variables using this value from client_ip to connection_description. This makes maintainers less likely to trip over client_ip not being an IP address at all (which I've done myself in the past).
The second commit adds a function to extract the IP address from the connection description for places where an actual IP address is required. These are:-

Messages intended for fail2ban
A chunk of code in session.c where we can match sessions based in IP address if that's selected in the policy. This code isn't used by default. Interestingly, there's a bug in the original where it fails with IPv6 addresses.

There's a change to xrdp_client_info here (member rename), but AFAICT there's no impact on xorgxrdp.
@MikoyChinese, @hubeny - if any of you are in a position to test this, please do.","20210827-12:53:48] [INFO ] [scp_v0_process(scp_v0.c:167)] Username or password error for user: testuser from ::ffff:10.1.2.3

I'm fine with this log format but I'm also fine with a more machine-friendly format. Because the log is intended to be parsed by fail2ban, right?
For example:
[20210827-12:53:48] [INFO ] [scp_v0_process(scp_v0.c:167)] AUTHFAIL: time=$unixtime; username=%s; clientaddr=%s",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1976,2021-08-27T12:14:34Z,2021-11-18T10:11:13Z,2021-11-18T10:11:20Z,MERGED,True,165,52,13,https://github.com/matt335672,Fail2ban support,3,[],https://github.com/neutrinolabs/xrdp/pull/1976,https://github.com/timriker,5,https://github.com/neutrinolabs/xrdp/pull/1976#issuecomment-949861349,"This follows on from conversations with @MikoyChinese in #1946 and @hubeny in #1973. Both of these users want the IP address of a failed login logged for use with fail2ban, which seems to make sense to me.
The stumbling block I had with this, is that the client_ip string from g_write_ip_address() contains more than just an IP address, so just logging that may introduce a dependency on the form of the output from that function. It seems to make sense to me to just log the IP address, and mark the log message as being a potential external dependency with a comment.
This PR makes the following changes over two commits.
The first commit renames g_write_ip_address() as g_write_client_description() and changes all the member variables using this value from client_ip to connection_description. This makes maintainers less likely to trip over client_ip not being an IP address at all (which I've done myself in the past).
The second commit adds a function to extract the IP address from the connection description for places where an actual IP address is required. These are:-

Messages intended for fail2ban
A chunk of code in session.c where we can match sessions based in IP address if that's selected in the policy. This code isn't used by default. Interestingly, there's a bug in the original where it fails with IPv6 addresses.

There's a change to xrdp_client_info here (member rename), but AFAICT there's no impact on xorgxrdp.
@MikoyChinese, @hubeny - if any of you are in a position to test this, please do.","These log entries should go out to syslog, right? So I don't think a datestamp is required. syslog will datestamp them. A short version would be nice. This should suffice as neither username nor address should contain spaces.
[Date] hostname xrdp[process id]: AUTHFAIL user=%s ip=%s
The message could come from xrdp, or sessman or wherever it's detected.
If username is going to be optional, it might make sense to put the ip=first.
These might warrant separate tickets, or perhaps there already are tickets:
It would be nice to only get the setup stuff like cert and cipher information on first startup, not for every connection:
Using default X.509 certificate: /etc/xrdp/cert.pem
Using default X.509 key file: /etc/xrdp/key.pem
It would be nice to log the username here:
[20211022-12:17:15] [INFO ] xrdp_wm_log_msg: login successful for display 10
or here:
[20211022-12:17:17] [INFO ] lib_mod_log_peer: xrdp_pid=2924488 connected to X11rdp_pid=2924505 X11rdp_uid= X11rdp_gid= client_ip= client_port=1053
The uid will suffice, but the username would be nice.
Thanks!",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1976,2021-08-27T12:14:34Z,2021-11-18T10:11:13Z,2021-11-18T10:11:20Z,MERGED,True,165,52,13,https://github.com/matt335672,Fail2ban support,3,[],https://github.com/neutrinolabs/xrdp/pull/1976,https://github.com/matt335672,6,https://github.com/neutrinolabs/xrdp/pull/1976#issuecomment-950789340,"This follows on from conversations with @MikoyChinese in #1946 and @hubeny in #1973. Both of these users want the IP address of a failed login logged for use with fail2ban, which seems to make sense to me.
The stumbling block I had with this, is that the client_ip string from g_write_ip_address() contains more than just an IP address, so just logging that may introduce a dependency on the form of the output from that function. It seems to make sense to me to just log the IP address, and mark the log message as being a potential external dependency with a comment.
This PR makes the following changes over two commits.
The first commit renames g_write_ip_address() as g_write_client_description() and changes all the member variables using this value from client_ip to connection_description. This makes maintainers less likely to trip over client_ip not being an IP address at all (which I've done myself in the past).
The second commit adds a function to extract the IP address from the connection description for places where an actual IP address is required. These are:-

Messages intended for fail2ban
A chunk of code in session.c where we can match sessions based in IP address if that's selected in the policy. This code isn't used by default. Interestingly, there's a bug in the original where it fails with IPv6 addresses.

There's a change to xrdp_client_info here (member rename), but AFAICT there's no impact on xorgxrdp.
@MikoyChinese, @hubeny - if any of you are in a position to test this, please do.","Thanks @metalefty, @timriker
I've attempted to address the above with an additional commit.
Log message is now as follows. This is from a development build, so there's additional info on the function raising the error whoich wouldn't be in a production build:-
xrdp-sesman.log
[20211025-11:09:32] [INFO ] [scp_v0_process(scp_v0.c:167)] AUTHFAIL: user=testuser ip=::ffff:172.19.73.183 time=1635156572

syslog
Oct 25 11:09:32 xrdp-test xrdp-sesman[13319]: [INFO ] [scp_v0_process(scp_v0.c:167)] AUTHFAIL: user=testuser ip=::ffff:172.19.73.183 time=1635156572

I've added the UNIX time as @metalefty suggests. I take your @timriker that the message is timestamped, but that's in local time, whereas the timestamp is in UTC. My system is currently one hour ahead of UTC :-
$ date -d @1635156572
Mon 25 Oct 11:09:32 BST 2021

The cert connection stuff is left on every connection for the simple reason that if xrdp is running for days, the required information for the connection could be challenging to find.
I like the suggestion of adding the username to the log message for login success or failure as suggested. Since I'm there, I've also removed a display of 0, as this has proved to be confusing to user in the past
fail message (display and xrdp log)

[20211025-11:29:28] [INFO ] [add_string_to_logwindow(xrdp_wm.c:2057)] login failed for user testuser

success message (xrdp.log)
[20211025-11:32:09] [INFO ] [xrdp_wm_log_msg(xrdp_wm.c:2166)] xrdp_wm_log_msg: login successful for user testuser on display 11

@metalefty - I've looked into your port knocking issue. It can be done, but it would be logged in the xrdp.log rather than the sesman.log. Also, determining whether any data has been sent on the connection is going to need a few other changes. Maybe logging a total incoming PDU count could be useful information. What do you think?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1976,2021-08-27T12:14:34Z,2021-11-18T10:11:13Z,2021-11-18T10:11:20Z,MERGED,True,165,52,13,https://github.com/matt335672,Fail2ban support,3,[],https://github.com/neutrinolabs/xrdp/pull/1976,https://github.com/timriker,7,https://github.com/neutrinolabs/xrdp/pull/1976#issuecomment-951190693,"This follows on from conversations with @MikoyChinese in #1946 and @hubeny in #1973. Both of these users want the IP address of a failed login logged for use with fail2ban, which seems to make sense to me.
The stumbling block I had with this, is that the client_ip string from g_write_ip_address() contains more than just an IP address, so just logging that may introduce a dependency on the form of the output from that function. It seems to make sense to me to just log the IP address, and mark the log message as being a potential external dependency with a comment.
This PR makes the following changes over two commits.
The first commit renames g_write_ip_address() as g_write_client_description() and changes all the member variables using this value from client_ip to connection_description. This makes maintainers less likely to trip over client_ip not being an IP address at all (which I've done myself in the past).
The second commit adds a function to extract the IP address from the connection description for places where an actual IP address is required. These are:-

Messages intended for fail2ban
A chunk of code in session.c where we can match sessions based in IP address if that's selected in the policy. This code isn't used by default. Interestingly, there's a bug in the original where it fails with IPv6 addresses.

There's a change to xrdp_client_info here (member rename), but AFAICT there's no impact on xorgxrdp.
@MikoyChinese, @hubeny - if any of you are in a position to test this, please do.","Seems to me that if a user wants timezone info in their logs, they should add it in syslog and not configure every application to also log timestamps.
What error message is shown on dropped connections when no username has been sent?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1976,2021-08-27T12:14:34Z,2021-11-18T10:11:13Z,2021-11-18T10:11:20Z,MERGED,True,165,52,13,https://github.com/matt335672,Fail2ban support,3,[],https://github.com/neutrinolabs/xrdp/pull/1976,https://github.com/metalefty,8,https://github.com/neutrinolabs/xrdp/pull/1976#issuecomment-951507702,"This follows on from conversations with @MikoyChinese in #1946 and @hubeny in #1973. Both of these users want the IP address of a failed login logged for use with fail2ban, which seems to make sense to me.
The stumbling block I had with this, is that the client_ip string from g_write_ip_address() contains more than just an IP address, so just logging that may introduce a dependency on the form of the output from that function. It seems to make sense to me to just log the IP address, and mark the log message as being a potential external dependency with a comment.
This PR makes the following changes over two commits.
The first commit renames g_write_ip_address() as g_write_client_description() and changes all the member variables using this value from client_ip to connection_description. This makes maintainers less likely to trip over client_ip not being an IP address at all (which I've done myself in the past).
The second commit adds a function to extract the IP address from the connection description for places where an actual IP address is required. These are:-

Messages intended for fail2ban
A chunk of code in session.c where we can match sessions based in IP address if that's selected in the policy. This code isn't used by default. Interestingly, there's a bug in the original where it fails with IPv6 addresses.

There's a change to xrdp_client_info here (member rename), but AFAICT there's no impact on xorgxrdp.
@MikoyChinese, @hubeny - if any of you are in a position to test this, please do.","If you want to rely on Syslog timestamp, you can do that. Simply ignore the timestamp.
I think the UNIX timestamp is easier to convert sometimes. The timestamp is for development / debug purposes.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1976,2021-08-27T12:14:34Z,2021-11-18T10:11:13Z,2021-11-18T10:11:20Z,MERGED,True,165,52,13,https://github.com/matt335672,Fail2ban support,3,[],https://github.com/neutrinolabs/xrdp/pull/1976,https://github.com/matt335672,9,https://github.com/neutrinolabs/xrdp/pull/1976#issuecomment-951705803,"This follows on from conversations with @MikoyChinese in #1946 and @hubeny in #1973. Both of these users want the IP address of a failed login logged for use with fail2ban, which seems to make sense to me.
The stumbling block I had with this, is that the client_ip string from g_write_ip_address() contains more than just an IP address, so just logging that may introduce a dependency on the form of the output from that function. It seems to make sense to me to just log the IP address, and mark the log message as being a potential external dependency with a comment.
This PR makes the following changes over two commits.
The first commit renames g_write_ip_address() as g_write_client_description() and changes all the member variables using this value from client_ip to connection_description. This makes maintainers less likely to trip over client_ip not being an IP address at all (which I've done myself in the past).
The second commit adds a function to extract the IP address from the connection description for places where an actual IP address is required. These are:-

Messages intended for fail2ban
A chunk of code in session.c where we can match sessions based in IP address if that's selected in the policy. This code isn't used by default. Interestingly, there's a bug in the original where it fails with IPv6 addresses.

There's a change to xrdp_client_info here (member rename), but AFAICT there's no impact on xorgxrdp.
@MikoyChinese, @hubeny - if any of you are in a position to test this, please do.","The UNIX time is also consistent  between systems which is important if you're trying to work out exactly when something happened to your network, and you don't have centralised logging. Also, but less importantly, for one hour each year, a local timestamp is ambiguous and cannot be used for this purpose.
@timriker - nothing that useful is logged at the moment if a connection is lost before the initial negotiation is completed. Here are the current messages geneated in the xrdp log for an unprivileged nmap port scan:-
[20211026-09:25:59] [INFO ] [g_sck_accept(os_calls.c:1384)] Socket 12: AF_INET6 connection received from ::ffff:aaa.bbb.ccc.ddd port 47314
[20211026-09:25:59] [INFO ] [xrdp_rdp_read_config(xrdp_rdp.c:225)] Using default X.509 certificate: /etc/xrdp/cert.pem
[20211026-09:25:59] [INFO ] [xrdp_rdp_read_config(xrdp_rdp.c:257)] Using default X.509 key file: /etc/xrdp/key.pem
[20211026-09:25:59] [ERROR] [libxrdp_force_read(libxrdp.c:135)] libxrdp_force_read: header read error
[20211026-09:25:59] [ERROR] [xrdp_iso_incoming(xrdp_iso.c:488)] [ITU-T X.224] Connection Sequence: CR-TPDU (Connection Request) failed
[20211026-09:25:59] [ERROR] [xrdp_sec_incoming(xrdp_sec.c:2769)] xrdp_sec_incoming: xrdp_iso_incoming failed
[20211026-09:25:59] [ERROR] [xrdp_rdp_incoming(xrdp_rdp.c:917)] xrdp_rdp_incoming: xrdp_sec_incoming failed
[20211026-09:25:59] [ERROR] [xrdp_process_main_loop(xrdp_process.c:302)] xrdp_process_main_loop: libxrdp_process_incoming failed
[20211026-09:25:59] [ERROR] [xrdp_iso_send(xrdp_iso.c:638)] xrdp_iso_send: trans_write_copy_s failed
[20211026-09:25:59] [ERROR] [xrdp_mcs_disconnect(xrdp_mcs.c:1422)] Sending [ITU T.125] DisconnectProviderUltimatum failed",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1976,2021-08-27T12:14:34Z,2021-11-18T10:11:13Z,2021-11-18T10:11:20Z,MERGED,True,165,52,13,https://github.com/matt335672,Fail2ban support,3,[],https://github.com/neutrinolabs/xrdp/pull/1976,https://github.com/timriker,10,https://github.com/neutrinolabs/xrdp/pull/1976#issuecomment-952128992,"This follows on from conversations with @MikoyChinese in #1946 and @hubeny in #1973. Both of these users want the IP address of a failed login logged for use with fail2ban, which seems to make sense to me.
The stumbling block I had with this, is that the client_ip string from g_write_ip_address() contains more than just an IP address, so just logging that may introduce a dependency on the form of the output from that function. It seems to make sense to me to just log the IP address, and mark the log message as being a potential external dependency with a comment.
This PR makes the following changes over two commits.
The first commit renames g_write_ip_address() as g_write_client_description() and changes all the member variables using this value from client_ip to connection_description. This makes maintainers less likely to trip over client_ip not being an IP address at all (which I've done myself in the past).
The second commit adds a function to extract the IP address from the connection description for places where an actual IP address is required. These are:-

Messages intended for fail2ban
A chunk of code in session.c where we can match sessions based in IP address if that's selected in the policy. This code isn't used by default. Interestingly, there's a bug in the original where it fails with IPv6 addresses.

There's a change to xrdp_client_info here (member rename), but AFAICT there's no impact on xorgxrdp.
@MikoyChinese, @hubeny - if any of you are in a position to test this, please do.","The UNIX time is also consistent between systems which is important if you're trying to work out exactly when something happened to your network, and you don't have centralised logging. Also, but less importantly, for one hour each year, a local timestamp is ambiguous and cannot be used for this purpose.

The traditional syslog has these issues. Fortunately, this is easily remedied. As documented in rsyslog.conf for example, just comment out the indicated line to get output like this:
2021-10-26T10:46:38.267926-06:00 A-LE2009442 postfix/master[737]: terminating on signal 15
2021-10-26T10:46:39.270729-06:00 A-LE2009442 postfix/master[10551]: daemon started -- version 3.4.13, configuration /etc/postfix
Human readable, unambiguous AND more precise than a unix timestamp.

@timriker - nothing that useful is logged at the moment if a connection is lost before the initial negotiation is completed. Here are the current messages generated in the xrdp log for an unprivileged nmap port scan:-

It would be nice to have something logged at the same level as a login failure to indicate a dropped connection and the client IP. The client port might be useful in some cases.
Thanks!",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1976,2021-08-27T12:14:34Z,2021-11-18T10:11:13Z,2021-11-18T10:11:20Z,MERGED,True,165,52,13,https://github.com/matt335672,Fail2ban support,3,[],https://github.com/neutrinolabs/xrdp/pull/1976,https://github.com/matt335672,11,https://github.com/neutrinolabs/xrdp/pull/1976#issuecomment-954599801,"This follows on from conversations with @MikoyChinese in #1946 and @hubeny in #1973. Both of these users want the IP address of a failed login logged for use with fail2ban, which seems to make sense to me.
The stumbling block I had with this, is that the client_ip string from g_write_ip_address() contains more than just an IP address, so just logging that may introduce a dependency on the form of the output from that function. It seems to make sense to me to just log the IP address, and mark the log message as being a potential external dependency with a comment.
This PR makes the following changes over two commits.
The first commit renames g_write_ip_address() as g_write_client_description() and changes all the member variables using this value from client_ip to connection_description. This makes maintainers less likely to trip over client_ip not being an IP address at all (which I've done myself in the past).
The second commit adds a function to extract the IP address from the connection description for places where an actual IP address is required. These are:-

Messages intended for fail2ban
A chunk of code in session.c where we can match sessions based in IP address if that's selected in the policy. This code isn't used by default. Interestingly, there's a bug in the original where it fails with IPv6 addresses.

There's a change to xrdp_client_info here (member rename), but AFAICT there's no impact on xorgxrdp.
@MikoyChinese, @hubeny - if any of you are in a position to test this, please do.","I don't think either of us is arguing that syslog can't be configured to do what you want. Provided, of course, that you've actually configured it to do so before the event. In which case you can simply ignore the timestamp provided in the message. It's hardly an expensive addition.
As regards the logging improvement, this could do with a bit more analysis as it's more work than it appears to be at first.
Surprisingly, the Microsoft client also drops the connection mid-way through a startup if it feels the need to prompt the user regarding a TLS certificate or similar. If the user is happy to proceed a new connection attempt is started. So we'd need to determine that as a special case as I'd certainly regard that as normal operation.
Another issue of course, is that this logging will only detect a rudimentary TCP port scan where the initial SYN-SYN-ACK handshake completes. More sophisticated scans cannot be detected at the application level at all. This nmap command produces no xrdp logging on my test system, nor would I be able to make it do so from within the application:-
sudo nmap -sS -p3389 xrdp-test.test.lan

I'll move this to a separate issue I think, and we can keep this PR focussed on the changes it currently contains.",True,{'THUMBS_UP': ['https://github.com/timriker']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1976,2021-08-27T12:14:34Z,2021-11-18T10:11:13Z,2021-11-18T10:11:20Z,MERGED,True,165,52,13,https://github.com/matt335672,Fail2ban support,3,[],https://github.com/neutrinolabs/xrdp/pull/1976,https://github.com/metalefty,12,https://github.com/neutrinolabs/xrdp/pull/1976#issuecomment-972528201,"This follows on from conversations with @MikoyChinese in #1946 and @hubeny in #1973. Both of these users want the IP address of a failed login logged for use with fail2ban, which seems to make sense to me.
The stumbling block I had with this, is that the client_ip string from g_write_ip_address() contains more than just an IP address, so just logging that may introduce a dependency on the form of the output from that function. It seems to make sense to me to just log the IP address, and mark the log message as being a potential external dependency with a comment.
This PR makes the following changes over two commits.
The first commit renames g_write_ip_address() as g_write_client_description() and changes all the member variables using this value from client_ip to connection_description. This makes maintainers less likely to trip over client_ip not being an IP address at all (which I've done myself in the past).
The second commit adds a function to extract the IP address from the connection description for places where an actual IP address is required. These are:-

Messages intended for fail2ban
A chunk of code in session.c where we can match sessions based in IP address if that's selected in the policy. This code isn't used by default. Interestingly, there's a bug in the original where it fails with IPv6 addresses.

There's a change to xrdp_client_info here (member rename), but AFAICT there's no impact on xorgxrdp.
@MikoyChinese, @hubeny - if any of you are in a position to test this, please do.",Is there anything to do on this?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1980,2021-08-31T02:21:28Z,2021-09-01T00:56:14Z,2021-09-01T01:43:05Z,MERGED,True,40,2,3,https://github.com/metalefty,Release v0.9.17,2,[],https://github.com/neutrinolabs/xrdp/pull/1980,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1980,"Merged #1952 and mentioned in NEWS. I'm going to make a tag and release after merging this PR.
@matt335672 I know you're constantly updating NEWS on the Wiki. Just to be sure, is there anything we missed before making a new release?","Merged #1952 and mentioned in NEWS. I'm going to make a tag and release after merging this PR.
@matt335672 I know you're constantly updating NEWS on the Wiki. Just to be sure, is there anything we missed before making a new release?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1980,2021-08-31T02:21:28Z,2021-09-01T00:56:14Z,2021-09-01T01:43:05Z,MERGED,True,40,2,3,https://github.com/metalefty,Release v0.9.17,2,[],https://github.com/neutrinolabs/xrdp/pull/1980,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1980#issuecomment-909793830,"Merged #1952 and mentioned in NEWS. I'm going to make a tag and release after merging this PR.
@matt335672 I know you're constantly updating NEWS on the Wiki. Just to be sure, is there anything we missed before making a new release?",@matt335672 Released. Feel free to merge them.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1983,2021-09-02T10:56:52Z,2022-05-04T08:29:15Z,2022-05-04T08:29:18Z,MERGED,True,22,8,4,https://github.com/matt335672,Moved g_initgroups() call to before auth_start_session(),1,[],https://github.com/neutrinolabs/xrdp/pull/1983,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1983,"Fixes #1978
Tested on FreeBSD 13 and Ubuntu 20.04. Note that pam_group has a different function on these two operating systems:-

On FreeBSD, pam_group is used to allow or deny access based on group membership
On Ubuntu, pam_group is used to confer access to secondary groups (which is what #1978 is about)

The FreeBSD testing consisted of adding this line to /etc/pam.d/xrdp-sesman:-
auth	required	pam_group.so		luser group=games

with this line in place, only users in the games group could log in to xrdp.
The Ubuntu testing added this line to /etc/security/group.conf:-
*;*;*;Al0000-2400;floppy

with this line in place, users logging in to xrdp were added to the floppy group.","Fixes #1978
Tested on FreeBSD 13 and Ubuntu 20.04. Note that pam_group has a different function on these two operating systems:-

On FreeBSD, pam_group is used to allow or deny access based on group membership
On Ubuntu, pam_group is used to confer access to secondary groups (which is what #1978 is about)

The FreeBSD testing consisted of adding this line to /etc/pam.d/xrdp-sesman:-
auth	required	pam_group.so		luser group=games

with this line in place, only users in the games group could log in to xrdp.
The Ubuntu testing added this line to /etc/security/group.conf:-
*;*;*;Al0000-2400;floppy

with this line in place, users logging in to xrdp were added to the floppy group.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1984,2021-09-02T16:11:42Z,2021-09-09T08:53:45Z,2021-09-09T08:53:48Z,MERGED,True,31,25,2,https://github.com/matt335672,Parse DEVICE_ANNOUNCE header correctly,2,['drive redirection'],https://github.com/neutrinolabs/xrdp/pull/1984,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1984,"Fixes #327
The DEVICE_ANNOUNCE header in [MS-RDPEFS] 2.2.1.3 has DeviceDataLength and DeviceData fields. These fields are only parsed correctly for devices of type RDPDR_DTYP_FILESYSTEM
For all other device types, the fields are not read and skipped, but are left sitting in the buffer.
Consequently, when a DR_DEVICELIST_ANNOUNCE message is received with a printer before the filesystem drives, chansrv gets out of sync and fails to parse the filesystem drives correctly.
This PR skips the DeviceDataLength and DeviceData fields correctly for all device types.
Incidentally, I'm not aware of why devredir.c uses xstream macros from parse.h rather than the more usual ones. I've added another xstream macro xstream_skip_u8 to allow a number of bytes in the data stream to be skipped.
As I submit this, the CI for 32-bit builds is still broken.","Fixes #327
The DEVICE_ANNOUNCE header in [MS-RDPEFS] 2.2.1.3 has DeviceDataLength and DeviceData fields. These fields are only parsed correctly for devices of type RDPDR_DTYP_FILESYSTEM
For all other device types, the fields are not read and skipped, but are left sitting in the buffer.
Consequently, when a DR_DEVICELIST_ANNOUNCE message is received with a printer before the filesystem drives, chansrv gets out of sync and fails to parse the filesystem drives correctly.
This PR skips the DeviceDataLength and DeviceData fields correctly for all device types.
Incidentally, I'm not aware of why devredir.c uses xstream macros from parse.h rather than the more usual ones. I've added another xstream macro xstream_skip_u8 to allow a number of bytes in the data stream to be skipped.
As I submit this, the CI for 32-bit builds is still broken.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1984,2021-09-02T16:11:42Z,2021-09-09T08:53:45Z,2021-09-09T08:53:48Z,MERGED,True,31,25,2,https://github.com/matt335672,Parse DEVICE_ANNOUNCE header correctly,2,['drive redirection'],https://github.com/neutrinolabs/xrdp/pull/1984,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/1984#issuecomment-912520304,"Fixes #327
The DEVICE_ANNOUNCE header in [MS-RDPEFS] 2.2.1.3 has DeviceDataLength and DeviceData fields. These fields are only parsed correctly for devices of type RDPDR_DTYP_FILESYSTEM
For all other device types, the fields are not read and skipped, but are left sitting in the buffer.
Consequently, when a DR_DEVICELIST_ANNOUNCE message is received with a printer before the filesystem drives, chansrv gets out of sync and fails to parse the filesystem drives correctly.
This PR skips the DeviceDataLength and DeviceData fields correctly for all device types.
Incidentally, I'm not aware of why devredir.c uses xstream macros from parse.h rather than the more usual ones. I've added another xstream macro xstream_skip_u8 to allow a number of bytes in the data stream to be skipped.
As I submit this, the CI for 32-bit builds is still broken.","CI is now working again.
I've improved the logging on this a little.
On my test machine (debug logging enabled) I get the following in the chansrv log while enabling remote printer support:-
[20210903-13:55:43] [INFO ] [devredir_proc_client_devlist_announce_req(devredir.c:871)] Remote printer 'PRN2' is not supported and will be ignored
[20210903-13:55:43] [INFO ] [devredir_proc_client_devlist_announce_req(devredir.c:871)] Remote printer 'PRN6' is not supported and will be ignored
[20210903-13:55:43] [INFO ] [devredir_proc_client_devlist_announce_req(devredir.c:871)] Remote printer 'PRN5' is not supported and will be ignored
[20210903-13:55:43] [INFO ] [devredir_proc_client_devlist_announce_req(devredir.c:871)] Remote printer 'PRN4' is not supported and will be ignored
[20210903-13:55:43] [INFO ] [devredir_proc_client_devlist_announce_req(devredir.c:871)] Remote printer 'PRN3' is not supported and will be ignored
[20210903-13:55:43] [INFO ] [devredir_proc_client_devlist_announce_req(devredir.c:830)] detected remote drive C:",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1984,2021-09-02T16:11:42Z,2021-09-09T08:53:45Z,2021-09-09T08:53:48Z,MERGED,True,31,25,2,https://github.com/matt335672,Parse DEVICE_ANNOUNCE header correctly,2,['drive redirection'],https://github.com/neutrinolabs/xrdp/pull/1984,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/1984#issuecomment-913468231,"Fixes #327
The DEVICE_ANNOUNCE header in [MS-RDPEFS] 2.2.1.3 has DeviceDataLength and DeviceData fields. These fields are only parsed correctly for devices of type RDPDR_DTYP_FILESYSTEM
For all other device types, the fields are not read and skipped, but are left sitting in the buffer.
Consequently, when a DR_DEVICELIST_ANNOUNCE message is received with a printer before the filesystem drives, chansrv gets out of sync and fails to parse the filesystem drives correctly.
This PR skips the DeviceDataLength and DeviceData fields correctly for all device types.
Incidentally, I'm not aware of why devredir.c uses xstream macros from parse.h rather than the more usual ones. I've added another xstream macro xstream_skip_u8 to allow a number of bytes in the data stream to be skipped.
As I submit this, the CI for 32-bit builds is still broken.",I confirmed it fixes drive redirection. It is working fine now. LGTM except for some trivial points on logging.,True,{'THUMBS_UP': ['https://github.com/matt335672']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1984,2021-09-02T16:11:42Z,2021-09-09T08:53:45Z,2021-09-09T08:53:48Z,MERGED,True,31,25,2,https://github.com/matt335672,Parse DEVICE_ANNOUNCE header correctly,2,['drive redirection'],https://github.com/neutrinolabs/xrdp/pull/1984,https://github.com/matt335672,4,https://github.com/neutrinolabs/xrdp/pull/1984#issuecomment-915128187,"Fixes #327
The DEVICE_ANNOUNCE header in [MS-RDPEFS] 2.2.1.3 has DeviceDataLength and DeviceData fields. These fields are only parsed correctly for devices of type RDPDR_DTYP_FILESYSTEM
For all other device types, the fields are not read and skipped, but are left sitting in the buffer.
Consequently, when a DR_DEVICELIST_ANNOUNCE message is received with a printer before the filesystem drives, chansrv gets out of sync and fails to parse the filesystem drives correctly.
This PR skips the DeviceDataLength and DeviceData fields correctly for all device types.
Incidentally, I'm not aware of why devredir.c uses xstream macros from parse.h rather than the more usual ones. I've added another xstream macro xstream_skip_u8 to allow a number of bytes in the data stream to be skipped.
As I submit this, the CI for 32-bit builds is still broken.","I've also changed the 'not supported' message to look like the others.
I get the following now on log-on, with everything redirected from the client. Debug logging is enabled.
[20210908-11:45:34] [INFO ] [devredir_proc_client_devlist_announce_req(devredir.c:871)] detected remote PRINTER 'PRN3' (not supported)
[20210908-11:45:34] [INFO ] [devredir_proc_client_devlist_announce_req(devredir.c:871)] detected remote PRINTER 'PRN7' (not supported)
[20210908-11:45:34] [INFO ] [devredir_proc_client_devlist_announce_req(devredir.c:871)] detected remote PRINTER 'PRN6' (not supported)
[20210908-11:45:34] [INFO ] [devredir_proc_client_devlist_announce_req(devredir.c:871)] detected remote PRINTER 'PRN5' (not supported)
[20210908-11:45:34] [INFO ] [devredir_proc_client_devlist_announce_req(devredir.c:871)] detected remote PRINTER 'PRN4' (not supported)
[20210908-11:45:34] [INFO ] [devredir_proc_client_devlist_announce_req(devredir.c:830)] detected remote FILE_SYSTEM 'D:'
[20210908-11:45:34] [INFO ] [devredir_proc_client_devlist_announce_req(devredir.c:830)] detected remote FILE_SYSTEM 'C:'",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1984,2021-09-02T16:11:42Z,2021-09-09T08:53:45Z,2021-09-09T08:53:48Z,MERGED,True,31,25,2,https://github.com/matt335672,Parse DEVICE_ANNOUNCE header correctly,2,['drive redirection'],https://github.com/neutrinolabs/xrdp/pull/1984,https://github.com/matt335672,5,https://github.com/neutrinolabs/xrdp/pull/1984#issuecomment-915131280,"Fixes #327
The DEVICE_ANNOUNCE header in [MS-RDPEFS] 2.2.1.3 has DeviceDataLength and DeviceData fields. These fields are only parsed correctly for devices of type RDPDR_DTYP_FILESYSTEM
For all other device types, the fields are not read and skipped, but are left sitting in the buffer.
Consequently, when a DR_DEVICELIST_ANNOUNCE message is received with a printer before the filesystem drives, chansrv gets out of sync and fails to parse the filesystem drives correctly.
This PR skips the DeviceDataLength and DeviceData fields correctly for all device types.
Incidentally, I'm not aware of why devredir.c uses xstream macros from parse.h rather than the more usual ones. I've added another xstream macro xstream_skip_u8 to allow a number of bytes in the data stream to be skipped.
As I submit this, the CI for 32-bit builds is still broken.","My bad - I misunderstood what you meant by capitalisation. My fault.
Log messages are now:-
[20210908-11:52:46] [INFO ] [devredir_proc_client_devlist_announce_req(devredir.c:871)] Detected remote printer 'PRN3' (not supported)
[20210908-11:52:46] [INFO ] [devredir_proc_client_devlist_announce_req(devredir.c:871)] Detected remote printer 'PRN7' (not supported)
[20210908-11:52:46] [INFO ] [devredir_proc_client_devlist_announce_req(devredir.c:871)] Detected remote printer 'PRN6' (not supported)
[20210908-11:52:46] [INFO ] [devredir_proc_client_devlist_announce_req(devredir.c:871)] Detected remote printer 'PRN5' (not supported)
[20210908-11:52:46] [INFO ] [devredir_proc_client_devlist_announce_req(devredir.c:871)] Detected remote printer 'PRN4' (not supported)
[20210908-11:52:46] [INFO ] [devredir_proc_client_devlist_announce_req(devredir.c:830)] Detected remote drive 'D:'
[20210908-11:52:46] [INFO ] [devredir_proc_client_devlist_announce_req(devredir.c:830)] Detected remote drive 'C:'",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1984,2021-09-02T16:11:42Z,2021-09-09T08:53:45Z,2021-09-09T08:53:48Z,MERGED,True,31,25,2,https://github.com/matt335672,Parse DEVICE_ANNOUNCE header correctly,2,['drive redirection'],https://github.com/neutrinolabs/xrdp/pull/1984,https://github.com/metalefty,6,https://github.com/neutrinolabs/xrdp/pull/1984#issuecomment-915746195,"Fixes #327
The DEVICE_ANNOUNCE header in [MS-RDPEFS] 2.2.1.3 has DeviceDataLength and DeviceData fields. These fields are only parsed correctly for devices of type RDPDR_DTYP_FILESYSTEM
For all other device types, the fields are not read and skipped, but are left sitting in the buffer.
Consequently, when a DR_DEVICELIST_ANNOUNCE message is received with a printer before the filesystem drives, chansrv gets out of sync and fails to parse the filesystem drives correctly.
This PR skips the DeviceDataLength and DeviceData fields correctly for all device types.
Incidentally, I'm not aware of why devredir.c uses xstream macros from parse.h rather than the more usual ones. I've added another xstream macro xstream_skip_u8 to allow a number of bytes in the data stream to be skipped.
As I submit this, the CI for 32-bit builds is still broken.","[20210908-11:52:46] [INFO ] [devredir_proc_client_devlist_announce_req(devredir.c:871)] Detected remote printer 'PRN4' (not supported)
[20210908-11:52:46] [INFO ] [devredir_proc_client_devlist_announce_req(devredir.c:830)] Detected remote drive 'D:'

Yes, that is what I meant.  The smartcard log was capitalized and drive redirection log was not capitalized. I actually wanted to say either ""Detected"" or ""detected"" is fine but should be consistent.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1985,2021-09-03T11:20:48Z,2021-09-03T11:26:32Z,2021-09-03T11:28:15Z,MERGED,True,35,0,1,https://github.com/matt335672,32-bit CI build process : Remove some 64-bit packages,1,[],https://github.com/neutrinolabs/xrdp/pull/1985,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1985,"The 32-bit CI build process is broken again.
The reason this time appears to be that the libtiff-dev:i386 package conflicts with the libtiff-dev:amd64 package. The exact reason for this isn't clear to me. At the time of writing, both i386 and amd64 packages appear to have the same version, namely 4.0.9-5ubuntu0.4.
I've tried to come up with a more pro-active solution this time. What I've done, is for i386 builds where libxxx-dev:i386 is installed, I've removed libxxx-dev:amd64 beforehand. We shouldn't need any of these packages for a 32-bit build and removing them should greatly decrease the chances of a package version clash if the repos are out-of sync.","The 32-bit CI build process is broken again.
The reason this time appears to be that the libtiff-dev:i386 package conflicts with the libtiff-dev:amd64 package. The exact reason for this isn't clear to me. At the time of writing, both i386 and amd64 packages appear to have the same version, namely 4.0.9-5ubuntu0.4.
I've tried to come up with a more pro-active solution this time. What I've done, is for i386 builds where libxxx-dev:i386 is installed, I've removed libxxx-dev:amd64 beforehand. We shouldn't need any of these packages for a 32-bit build and removing them should greatly decrease the chances of a package version clash if the repos are out-of sync.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1985,2021-09-03T11:20:48Z,2021-09-03T11:26:32Z,2021-09-03T11:28:15Z,MERGED,True,35,0,1,https://github.com/matt335672,32-bit CI build process : Remove some 64-bit packages,1,[],https://github.com/neutrinolabs/xrdp/pull/1985,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/1985#issuecomment-912467409,"The 32-bit CI build process is broken again.
The reason this time appears to be that the libtiff-dev:i386 package conflicts with the libtiff-dev:amd64 package. The exact reason for this isn't clear to me. At the time of writing, both i386 and amd64 packages appear to have the same version, namely 4.0.9-5ubuntu0.4.
I've tried to come up with a more pro-active solution this time. What I've done, is for i386 builds where libxxx-dev:i386 is installed, I've removed libxxx-dev:amd64 beforehand. We shouldn't need any of these packages for a 32-bit build and removing them should greatly decrease the chances of a package version clash if the repos are out-of sync.","I've merged this PR without review to get the CI working again.
I'm not completely happy with doing this.
If anyone has got any better ideas on improving the 32-bit solution, or can improve my shell scripting please feel free to jump in.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1988,2021-09-06T05:10:04Z,2021-12-13T10:04:52Z,2021-12-14T03:43:49Z,MERGED,True,174,3,4,https://github.com/metalefty,tests: add test on g_file_get_size(),4,[],https://github.com/neutrinolabs/xrdp/pull/1988,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/1988,See also #1987.,See also #1987.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1988,2021-09-06T05:10:04Z,2021-12-13T10:04:52Z,2021-12-14T03:43:49Z,MERGED,True,174,3,4,https://github.com/metalefty,tests: add test on g_file_get_size(),4,[],https://github.com/neutrinolabs/xrdp/pull/1988,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1988#issuecomment-990781064,See also #1987.,@matt335672 I've finished this. I will fix g_file_get_size() in another PR.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1988,2021-09-06T05:10:04Z,2021-12-13T10:04:52Z,2021-12-14T03:43:49Z,MERGED,True,174,3,4,https://github.com/metalefty,tests: add test on g_file_get_size(),4,[],https://github.com/neutrinolabs/xrdp/pull/1988,https://github.com/matt335672,3,https://github.com/neutrinolabs/xrdp/pull/1988#issuecomment-992299994,See also #1987.,I think this is a good approach to get the basic tests in. I'll merge it.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1989,2021-09-06T09:33:53Z,2021-09-07T16:31:46Z,2021-11-03T12:14:34Z,MERGED,True,1,1,1,https://github.com/matt335672,Rename misnamed function get_eds_status_msg,1,[],https://github.com/neutrinolabs/xrdp/pull/1989,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1989,Fixes #1986,Fixes #1986,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1989,2021-09-06T09:33:53Z,2021-09-07T16:31:46Z,2021-11-03T12:14:34Z,MERGED,True,1,1,1,https://github.com/matt335672,Rename misnamed function get_eds_status_msg,1,[],https://github.com/neutrinolabs/xrdp/pull/1989,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/1989#issuecomment-958827387,Fixes #1986,"Hi @avolkov-astra
@bsmojver (from Fedora) was involved in raising this and we've communicated exactly what's going on to him. For v0.9.18 he will simply remove the patch.
This is a particular issue for Fedora as that distro disables lazy binding by default. I'm not aware of any distros apart from Fedora that do this. Is this missing symbol causing you particular trouble for another distro?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1989,2021-09-06T09:33:53Z,2021-09-07T16:31:46Z,2021-11-03T12:14:34Z,MERGED,True,1,1,1,https://github.com/matt335672,Rename misnamed function get_eds_status_msg,1,[],https://github.com/neutrinolabs/xrdp/pull/1989,https://github.com/avolkov-astra,3,https://github.com/neutrinolabs/xrdp/pull/1989#issuecomment-958864387,Fixes #1986,"Hi,
I made a package of 0.9.17 for AstraLinux and then got error messages from users:
[ERROR] xrdp_wm_log_msg: error loading libvnc.so specified in xrdp.ini, please add a valid entry like lib=libxrdp-vnc.so or similar
Perhaps someone else might have encountered this error.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1989,2021-09-06T09:33:53Z,2021-09-07T16:31:46Z,2021-11-03T12:14:34Z,MERGED,True,1,1,1,https://github.com/matt335672,Rename misnamed function get_eds_status_msg,1,[],https://github.com/neutrinolabs/xrdp/pull/1989,https://github.com/matt335672,4,https://github.com/neutrinolabs/xrdp/pull/1989#issuecomment-958910743,Fixes #1986,"It sounds like it might be the same problem. You can find out with this command:-
readelf -d /path/to/libvnc.so | grep NOW

If the shared library was built with -z now (which is what Fedora Hardening does), you'll have BIND_NOW in the output.
No-one else has mentioned this, and v0.9.18 will be out end of December which will incorporate this. I'd have though the simplest thing for you to do, if this is indeed your problem, is to incorporate ce27e25 directly into your package. It's a simpler fix than the Fedora one above.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1989,2021-09-06T09:33:53Z,2021-09-07T16:31:46Z,2021-11-03T12:14:34Z,MERGED,True,1,1,1,https://github.com/matt335672,Rename misnamed function get_eds_status_msg,1,[],https://github.com/neutrinolabs/xrdp/pull/1989,https://github.com/avolkov-astra,5,https://github.com/neutrinolabs/xrdp/pull/1989#issuecomment-958927517,Fixes #1986,"Thanks. I fixed it by adding rfb.c (it is missing in the release tarball) and then applying ce27e25 and ae45344
Just decided to warn you about the problem, cause it seems to be rather important.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1989,2021-09-06T09:33:53Z,2021-09-07T16:31:46Z,2021-11-03T12:14:34Z,MERGED,True,1,1,1,https://github.com/matt335672,Rename misnamed function get_eds_status_msg,1,[],https://github.com/neutrinolabs/xrdp/pull/1989,https://github.com/matt335672,6,https://github.com/neutrinolabs/xrdp/pull/1989#issuecomment-958936137,Fixes #1986,"Thanks for the heads up - it's appreciated.
I'm in two minds about this one. I didn't catch it during module testing, as I didn't build with -z now by default (I do now!), and it's really unlikely that the user will encounter the missing codepath. I'm also aware that Debian has taken 0.9.17 into testing now (Debian repo is here). This may be of interest to you.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1989,2021-09-06T09:33:53Z,2021-09-07T16:31:46Z,2021-11-03T12:14:34Z,MERGED,True,1,1,1,https://github.com/matt335672,Rename misnamed function get_eds_status_msg,1,[],https://github.com/neutrinolabs/xrdp/pull/1989,https://github.com/avolkov-astra,7,https://github.com/neutrinolabs/xrdp/pull/1989#issuecomment-958973990,Fixes #1986,"Thanks for the tip.
Merge request for Debian: https://salsa.debian.org/debian-remote-team/xrdp/-/merge_requests/5",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1993,2021-09-08T08:49:08Z,2021-09-08T08:57:31Z,2021-09-08T08:57:37Z,MERGED,True,3,2,1,https://github.com/matt335672,Add missing rfb.c to the VNC module makefile,1,[],https://github.com/neutrinolabs/xrdp/pull/1993,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1993,"Fixes #1986
Follow-on to #1989 - this additional change was missed. This has now been fully tested by compiling xrdp with CFLAGS=""-Wl,-z,now""","Fixes #1986
Follow-on to #1989 - this additional change was missed. This has now been fully tested by compiling xrdp with CFLAGS=""-Wl,-z,now""",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1995,2021-09-09T14:02:30Z,2021-09-10T08:54:03Z,2021-09-10T08:54:08Z,MERGED,True,24,19,2,https://github.com/matt335672,Clipboard fixes,4,[],https://github.com/neutrinolabs/xrdp/pull/1995,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1995,"Fixes #1992
There are a few other improvements in this area too, all as separate commits. In order:-

The struct clip_file_desc in clipboard_common.h is meant to hold the data sent in a CLIPRDR_FILEDESCRIPTOR. The filename is 260 Unicode characters. Since each filename could occupy up to 4 bytes, the allocated space for the cFileName member is too small.
(See #1992). The logic to skip the padding at the end of a CLIPRDR_FILEDESCRIPTOR is wrong, and only works for simple (i.e. European) filenames.
An unnecessary malloc/free pair is removed by using a stack variable instead.
A check is added that the buffer containing a CLIPRDR_FILEDESCRIPTOR has enough data before the structure is read.","Fixes #1992
There are a few other improvements in this area too, all as separate commits. In order:-

The struct clip_file_desc in clipboard_common.h is meant to hold the data sent in a CLIPRDR_FILEDESCRIPTOR. The filename is 260 Unicode characters. Since each filename could occupy up to 4 bytes, the allocated space for the cFileName member is too small.
(See #1992). The logic to skip the padding at the end of a CLIPRDR_FILEDESCRIPTOR is wrong, and only works for simple (i.e. European) filenames.
An unnecessary malloc/free pair is removed by using a stack variable instead.
A check is added that the buffer containing a CLIPRDR_FILEDESCRIPTOR has enough data before the structure is read.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1995,2021-09-09T14:02:30Z,2021-09-10T08:54:03Z,2021-09-10T08:54:08Z,MERGED,True,24,19,2,https://github.com/matt335672,Clipboard fixes,4,[],https://github.com/neutrinolabs/xrdp/pull/1995,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1995#issuecomment-916630798,"Fixes #1992
There are a few other improvements in this area too, all as separate commits. In order:-

The struct clip_file_desc in clipboard_common.h is meant to hold the data sent in a CLIPRDR_FILEDESCRIPTOR. The filename is 260 Unicode characters. Since each filename could occupy up to 4 bytes, the allocated space for the cFileName member is too small.
(See #1992). The logic to skip the padding at the end of a CLIPRDR_FILEDESCRIPTOR is wrong, and only works for simple (i.e. European) filenames.
An unnecessary malloc/free pair is removed by using a stack variable instead.
A check is added that the buffer containing a CLIPRDR_FILEDESCRIPTOR has enough data before the structure is read.",I confirmed it fixes #1992.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1996,2021-09-14T14:37:28Z,2021-09-16T09:18:53Z,2021-09-16T09:35:07Z,MERGED,True,209,52,7,https://github.com/matt335672,Some copy-paste tidyups + Nautilus 3 compatibility,3,[],https://github.com/neutrinolabs/xrdp/pull/1996,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/1996,"Fixes #1994
The reader is referred to #1994 for some background behind this.
In this description ""Nautilus 3"" means versions of Nautilus supplied with GNOME 3 3.29.92 and later.
In the process of investigating that fault, we found that using xclip to query the clipboard for a STRING or UTF8_STRING when files were selected on the Windows side could hang. This PR fixes that by emulating the behaviour of Thunar or Nautilus 3 for such queries.
In all, there are three commits here:-

The first commit adds some memory buffer overflow checking to the clipboard code we're using for files. In particular, the function clipboard_c2s_in_files() now is passed the length of the buffer it has available to write to.
The second commit provides a default STRING or UTF8_STRING response to an X client requesting it when a file list is available.
The third commit adds a variable to sesman.ini which can be used to enable Nautilus 3 compatibility if required.

The intention is to revert the 3rd commit when there is no need to support Nautilus 3. I estimate this will be in about 3 years' time, but it may be more if RHEL 8 (and clones) do not migrate to GNOME 4.
It may be that we decide the third commit is too complicated and we wish to remove it. Even so, I believe the first two commits are worth adding to the codebase.","Fixes #1994
The reader is referred to #1994 for some background behind this.
In this description ""Nautilus 3"" means versions of Nautilus supplied with GNOME 3 3.29.92 and later.
In the process of investigating that fault, we found that using xclip to query the clipboard for a STRING or UTF8_STRING when files were selected on the Windows side could hang. This PR fixes that by emulating the behaviour of Thunar or Nautilus 3 for such queries.
In all, there are three commits here:-

The first commit adds some memory buffer overflow checking to the clipboard code we're using for files. In particular, the function clipboard_c2s_in_files() now is passed the length of the buffer it has available to write to.
The second commit provides a default STRING or UTF8_STRING response to an X client requesting it when a file list is available.
The third commit adds a variable to sesman.ini which can be used to enable Nautilus 3 compatibility if required.

The intention is to revert the 3rd commit when there is no need to support Nautilus 3. I estimate this will be in about 3 years' time, but it may be more if RHEL 8 (and clones) do not migrate to GNOME 4.
It may be that we decide the third commit is too complicated and we wish to remove it. Even so, I believe the first two commits are worth adding to the codebase.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1996,2021-09-14T14:37:28Z,2021-09-16T09:18:53Z,2021-09-16T09:35:07Z,MERGED,True,209,52,7,https://github.com/matt335672,Some copy-paste tidyups + Nautilus 3 compatibility,3,[],https://github.com/neutrinolabs/xrdp/pull/1996,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/1996#issuecomment-919278245,"Fixes #1994
The reader is referred to #1994 for some background behind this.
In this description ""Nautilus 3"" means versions of Nautilus supplied with GNOME 3 3.29.92 and later.
In the process of investigating that fault, we found that using xclip to query the clipboard for a STRING or UTF8_STRING when files were selected on the Windows side could hang. This PR fixes that by emulating the behaviour of Thunar or Nautilus 3 for such queries.
In all, there are three commits here:-

The first commit adds some memory buffer overflow checking to the clipboard code we're using for files. In particular, the function clipboard_c2s_in_files() now is passed the length of the buffer it has available to write to.
The second commit provides a default STRING or UTF8_STRING response to an X client requesting it when a file list is available.
The third commit adds a variable to sesman.ini which can be used to enable Nautilus 3 compatibility if required.

The intention is to revert the 3rd commit when there is no need to support Nautilus 3. I estimate this will be in about 3 years' time, but it may be more if RHEL 8 (and clones) do not migrate to GNOME 4.
It may be that we decide the third commit is too complicated and we wish to remove it. Even so, I believe the first two commits are worth adding to the codebase.",Awesome! I'll have a look when the sun rises. It is midnight in my time zone.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1996,2021-09-14T14:37:28Z,2021-09-16T09:18:53Z,2021-09-16T09:35:07Z,MERGED,True,209,52,7,https://github.com/matt335672,Some copy-paste tidyups + Nautilus 3 compatibility,3,[],https://github.com/neutrinolabs/xrdp/pull/1996,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/1996#issuecomment-919641922,"Fixes #1994
The reader is referred to #1994 for some background behind this.
In this description ""Nautilus 3"" means versions of Nautilus supplied with GNOME 3 3.29.92 and later.
In the process of investigating that fault, we found that using xclip to query the clipboard for a STRING or UTF8_STRING when files were selected on the Windows side could hang. This PR fixes that by emulating the behaviour of Thunar or Nautilus 3 for such queries.
In all, there are three commits here:-

The first commit adds some memory buffer overflow checking to the clipboard code we're using for files. In particular, the function clipboard_c2s_in_files() now is passed the length of the buffer it has available to write to.
The second commit provides a default STRING or UTF8_STRING response to an X client requesting it when a file list is available.
The third commit adds a variable to sesman.ini which can be used to enable Nautilus 3 compatibility if required.

The intention is to revert the 3rd commit when there is no need to support Nautilus 3. I estimate this will be in about 3 years' time, but it may be more if RHEL 8 (and clones) do not migrate to GNOME 4.
It may be that we decide the third commit is too complicated and we wish to remove it. Even so, I believe the first two commits are worth adding to the codebase.","In this description ""Nautilus 3"" means versions of Nautilus supplied with GNOME 3 2.29.92 and later.

3.29.92.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1996,2021-09-14T14:37:28Z,2021-09-16T09:18:53Z,2021-09-16T09:35:07Z,MERGED,True,209,52,7,https://github.com/matt335672,Some copy-paste tidyups + Nautilus 3 compatibility,3,[],https://github.com/neutrinolabs/xrdp/pull/1996,https://github.com/matt335672,4,https://github.com/neutrinolabs/xrdp/pull/1996#issuecomment-919794922,"Fixes #1994
The reader is referred to #1994 for some background behind this.
In this description ""Nautilus 3"" means versions of Nautilus supplied with GNOME 3 3.29.92 and later.
In the process of investigating that fault, we found that using xclip to query the clipboard for a STRING or UTF8_STRING when files were selected on the Windows side could hang. This PR fixes that by emulating the behaviour of Thunar or Nautilus 3 for such queries.
In all, there are three commits here:-

The first commit adds some memory buffer overflow checking to the clipboard code we're using for files. In particular, the function clipboard_c2s_in_files() now is passed the length of the buffer it has available to write to.
The second commit provides a default STRING or UTF8_STRING response to an X client requesting it when a file list is available.
The third commit adds a variable to sesman.ini which can be used to enable Nautilus 3 compatibility if required.

The intention is to revert the 3rd commit when there is no need to support Nautilus 3. I estimate this will be in about 3 years' time, but it may be more if RHEL 8 (and clones) do not migrate to GNOME 4.
It may be that we decide the third commit is too complicated and we wish to remove it. Even so, I believe the first two commits are worth adding to the codebase.","Thanks for the quick review.
I did wonder about more flexible ways of doing this (i.e. chansrv setting per login), but it's complicated to get that in. Also, we're only doing this to support LTS distros, so I think the number of users requiring this setting will not be large.
I'm a bit short of time today. I'll fix the typo above, and merge this in tomorrow.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1996,2021-09-14T14:37:28Z,2021-09-16T09:18:53Z,2021-09-16T09:35:07Z,MERGED,True,209,52,7,https://github.com/matt335672,Some copy-paste tidyups + Nautilus 3 compatibility,3,[],https://github.com/neutrinolabs/xrdp/pull/1996,https://github.com/matt335672,5,https://github.com/neutrinolabs/xrdp/pull/1996#issuecomment-920732703,"Fixes #1994
The reader is referred to #1994 for some background behind this.
In this description ""Nautilus 3"" means versions of Nautilus supplied with GNOME 3 3.29.92 and later.
In the process of investigating that fault, we found that using xclip to query the clipboard for a STRING or UTF8_STRING when files were selected on the Windows side could hang. This PR fixes that by emulating the behaviour of Thunar or Nautilus 3 for such queries.
In all, there are three commits here:-

The first commit adds some memory buffer overflow checking to the clipboard code we're using for files. In particular, the function clipboard_c2s_in_files() now is passed the length of the buffer it has available to write to.
The second commit provides a default STRING or UTF8_STRING response to an X client requesting it when a file list is available.
The third commit adds a variable to sesman.ini which can be used to enable Nautilus 3 compatibility if required.

The intention is to revert the 3rd commit when there is no need to support Nautilus 3. I estimate this will be in about 3 years' time, but it may be more if RHEL 8 (and clones) do not migrate to GNOME 4.
It may be that we decide the third commit is too complicated and we wish to remove it. Even so, I believe the first two commits are worth adding to the codebase.","For the record, I've made a couple of minor changes before merging this.
In clipboard_file.c, this line:-
if (str_len > (last - ptr))
replaces:-
if (str_len >= (last - ptr))
which fixes an off-by-one error.
Also, the config setting for UseNautilus3FlistFormat is now logged like other config values in chansrv_config.c",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,1996,2021-09-14T14:37:28Z,2021-09-16T09:18:53Z,2021-09-16T09:35:07Z,MERGED,True,209,52,7,https://github.com/matt335672,Some copy-paste tidyups + Nautilus 3 compatibility,3,[],https://github.com/neutrinolabs/xrdp/pull/1996,https://github.com/metalefty,6,https://github.com/neutrinolabs/xrdp/pull/1996#issuecomment-920744244,"Fixes #1994
The reader is referred to #1994 for some background behind this.
In this description ""Nautilus 3"" means versions of Nautilus supplied with GNOME 3 3.29.92 and later.
In the process of investigating that fault, we found that using xclip to query the clipboard for a STRING or UTF8_STRING when files were selected on the Windows side could hang. This PR fixes that by emulating the behaviour of Thunar or Nautilus 3 for such queries.
In all, there are three commits here:-

The first commit adds some memory buffer overflow checking to the clipboard code we're using for files. In particular, the function clipboard_c2s_in_files() now is passed the length of the buffer it has available to write to.
The second commit provides a default STRING or UTF8_STRING response to an X client requesting it when a file list is available.
The third commit adds a variable to sesman.ini which can be used to enable Nautilus 3 compatibility if required.

The intention is to revert the 3rd commit when there is no need to support Nautilus 3. I estimate this will be in about 3 years' time, but it may be more if RHEL 8 (and clones) do not migrate to GNOME 4.
It may be that we decide the third commit is too complicated and we wish to remove it. Even so, I believe the first two commits are worth adding to the codebase.","I did wonder about more flexible ways of doing this (i.e. chansrv setting per login), but it's complicated to get that in. Also, we're only doing this to support LTS distros, so I think the number of users requiring this setting will not be large.

Keeping changes minimum is a good idea to get backported. Such LTS distributions only accept security fixes or critical bug fixes with minimum change. If the change includes new features there's little chance to be backported.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2001,2021-09-21T07:53:44Z,2021-09-21T09:37:36Z,2021-09-22T00:34:41Z,MERGED,True,50,4,2,https://github.com/metalefty,clipboard file: Implement MS-RDPECLIP 3.1.5.4.7 compliance,2,['clipboard'],https://github.com/neutrinolabs/xrdp/pull/2001,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/2001,"If the requested file data could not be retrieved or the sender received
an unsuccessful Format List Response PDU (section 3.1.5.2.4), then the
clipHeader field MUST contain the CB_RESPONSE_FAIL (0x0002) flag and the
requestedFileContentsData field MUST contain no data (zero-length).
https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-rdpeclip/5d3991e9-440d-4e4d-8b8d-391c324c4007
Fixes #1997.","If the requested file data could not be retrieved or the sender received
an unsuccessful Format List Response PDU (section 3.1.5.2.4), then the
clipHeader field MUST contain the CB_RESPONSE_FAIL (0x0002) flag and the
requestedFileContentsData field MUST contain no data (zero-length).
https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-rdpeclip/5d3991e9-440d-4e4d-8b8d-391c324c4007
Fixes #1997.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2001,2021-09-21T07:53:44Z,2021-09-21T09:37:36Z,2021-09-22T00:34:41Z,MERGED,True,50,4,2,https://github.com/metalefty,clipboard file: Implement MS-RDPECLIP 3.1.5.4.7 compliance,2,['clipboard'],https://github.com/neutrinolabs/xrdp/pull/2001,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/2001#issuecomment-923754856,"If the requested file data could not be retrieved or the sender received
an unsuccessful Format List Response PDU (section 3.1.5.2.4), then the
clipHeader field MUST contain the CB_RESPONSE_FAIL (0x0002) flag and the
requestedFileContentsData field MUST contain no data (zero-length).
https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-rdpeclip/5d3991e9-440d-4e4d-8b8d-391c324c4007
Fixes #1997.","If files are not readable due to insufficient permission,
-rw------- 1 root root 34520 Sep  8 04:06 /home/meta/Downloads/paper.docx

Before this PR
The client waits for file transfer infinitely.

This PR fixes
File transfer fails immediately.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2001,2021-09-21T07:53:44Z,2021-09-21T09:37:36Z,2021-09-22T00:34:41Z,MERGED,True,50,4,2,https://github.com/metalefty,clipboard file: Implement MS-RDPECLIP 3.1.5.4.7 compliance,2,['clipboard'],https://github.com/neutrinolabs/xrdp/pull/2001,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/2001#issuecomment-923801156,"If the requested file data could not be retrieved or the sender received
an unsuccessful Format List Response PDU (section 3.1.5.2.4), then the
clipHeader field MUST contain the CB_RESPONSE_FAIL (0x0002) flag and the
requestedFileContentsData field MUST contain no data (zero-length).
https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-rdpeclip/5d3991e9-440d-4e4d-8b8d-391c324c4007
Fixes #1997.",Addressed review comments.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2002,2021-09-22T01:55:36Z,2021-09-22T09:37:46Z,2021-09-22T11:34:07Z,MERGED,True,1,1,1,https://github.com/metalefty,Fix duplicated initialization #1909,1,[],https://github.com/neutrinolabs/xrdp/pull/2002,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/2002,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2005,2021-09-27T13:44:39Z,2021-10-08T09:56:46Z,2021-10-08T09:56:50Z,MERGED,True,13,8,1,https://github.com/matt335672,Rework alpine support,2,[],https://github.com/neutrinolabs/xrdp/pull/2005,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/2005,"Following comments raised against #1965, this additional PR has been raised.
This patch was tested against the following Alpine packages:-
$ apk list -I \*xrdp
xorgxrdp-0.2.17-r1 x86_64 {xorgxrdp} (X11) [installed]
xrdp-0.9.17-r2 x86_64 {xrdp} (Apache-2.0) [installed]

I've added two commits here to make it clear the previous commit has been backed out.","Following comments raised against #1965, this additional PR has been raised.
This patch was tested against the following Alpine packages:-
$ apk list -I \*xrdp
xorgxrdp-0.2.17-r1 x86_64 {xorgxrdp} (X11) [installed]
xrdp-0.9.17-r2 x86_64 {xrdp} (Apache-2.0) [installed]

I've added two commits here to make it clear the previous commit has been backed out.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2005,2021-09-27T13:44:39Z,2021-10-08T09:56:46Z,2021-10-08T09:56:50Z,MERGED,True,13,8,1,https://github.com/matt335672,Rework alpine support,2,[],https://github.com/neutrinolabs/xrdp/pull/2005,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/2005#issuecomment-938498243,"Following comments raised against #1965, this additional PR has been raised.
This patch was tested against the following Alpine packages:-
$ apk list -I \*xrdp
xorgxrdp-0.2.17-r1 x86_64 {xorgxrdp} (X11) [installed]
xrdp-0.9.17-r2 x86_64 {xrdp} (Apache-2.0) [installed]

I've added two commits here to make it clear the previous commit has been backed out.",Let's merge if it is fine for Alpine users.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2006,2021-10-01T09:05:50Z,2021-10-04T10:31:04Z,2021-10-04T10:31:04Z,MERGED,True,1,0,1,https://github.com/metalefty,ignore substituted systemd service files,1,[],https://github.com/neutrinolabs/xrdp/pull/2006,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/2006,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2008,2021-10-04T11:02:49Z,2021-10-05T04:03:55Z,2021-10-05T08:28:28Z,MERGED,True,3,8,2,https://github.com/matt335672,Bump cppcheck version to 2.6,2,[],https://github.com/neutrinolabs/xrdp/pull/2008,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/2008,"Update to latest cppcheck for CI.
The modification to xrdp_mm.c avoids these errors which don't appear with cppcheck 2.5:-
xrdp/xrdp_mm.c:2130:5: error: Found a exit path from function with non-void return type that has missing return statement [missingReturn]
    {
    ^
xrdp/xrdp_mm.c:2269:5: error: Found a exit path from function with non-void return type that has missing return statement [missingReturn]
    {
    ^

The errors relate to the functions getPAMError() and getPAMAdditionalErrorInfo(). If the system is built on a PAM stack which isn't linux-pam, or OpenPAM, these functions are defined without return values.
The change simply moves the default case for the switch outside the conditional blocks for each stack.
In the longer term, these functions probably need moving into sesman, but I think that needs to wait for #1961","Update to latest cppcheck for CI.
The modification to xrdp_mm.c avoids these errors which don't appear with cppcheck 2.5:-
xrdp/xrdp_mm.c:2130:5: error: Found a exit path from function with non-void return type that has missing return statement [missingReturn]
    {
    ^
xrdp/xrdp_mm.c:2269:5: error: Found a exit path from function with non-void return type that has missing return statement [missingReturn]
    {
    ^

The errors relate to the functions getPAMError() and getPAMAdditionalErrorInfo(). If the system is built on a PAM stack which isn't linux-pam, or OpenPAM, these functions are defined without return values.
The change simply moves the default case for the switch outside the conditional blocks for each stack.
In the longer term, these functions probably need moving into sesman, but I think that needs to wait for #1961",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2011,2021-10-07T14:58:37Z,2022-01-05T11:06:42Z,2022-01-05T11:06:45Z,MERGED,True,1340,1028,27,https://github.com/matt335672,Unify scpv0 code,11,[],https://github.com/neutrinolabs/xrdp/pull/2011,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/2011,"Update 2021-11-04 This PR is now ready for review, following my own testing.
The point of the PR is to get xrdp and sesrun to use libscp to communicate with sesman. Once this is done, it becomes a lot easier to replace SCP V0/V1 with an SCP V2 to support #1961
Most of it is relatively straightforward. The complication is within xrdp, and centres around two issues:-
1 The interface between xrdp_mm.c and xrdp_wm.c
2  Replacing the synchronous access_control() function in xrdp_mm.c with asynchronous calls to libscp.
For the first of these, I've added a function xrdp_wm_mod_connect_done() to xrdp_wm.c. The idea is that xrdp_mm.c uses this to notify the window manager of all connection results. As well as simplifying the interface, this should result in uniform behaviour when a connection attempt fails. At the moment, strange things happen when (for example) a neutrinordp proxy connection does not authenticate properly with pamusername. This is fixed by this PR.
The second of these is complicated by not moving to UDS yet. I've approached it by using a second connection to sesman to fire off the PAM authentication request. This makes the eventual move to UDS a lot easier, as the second connection can simply be removed.
There's a state machine xrdp_mm_connect_sm() in xrdp_mm.c to manage the connection request. I'm hoping this makes the steps which go into a connection easier to follow.
I haven't spent a lot of time unifying SCP V0 and SCP V1 further. At the moment I can't see the point, but I'm open to being convinced otherwise if necessary.","Update 2021-11-04 This PR is now ready for review, following my own testing.
The point of the PR is to get xrdp and sesrun to use libscp to communicate with sesman. Once this is done, it becomes a lot easier to replace SCP V0/V1 with an SCP V2 to support #1961
Most of it is relatively straightforward. The complication is within xrdp, and centres around two issues:-
1 The interface between xrdp_mm.c and xrdp_wm.c
2  Replacing the synchronous access_control() function in xrdp_mm.c with asynchronous calls to libscp.
For the first of these, I've added a function xrdp_wm_mod_connect_done() to xrdp_wm.c. The idea is that xrdp_mm.c uses this to notify the window manager of all connection results. As well as simplifying the interface, this should result in uniform behaviour when a connection attempt fails. At the moment, strange things happen when (for example) a neutrinordp proxy connection does not authenticate properly with pamusername. This is fixed by this PR.
The second of these is complicated by not moving to UDS yet. I've approached it by using a second connection to sesman to fire off the PAM authentication request. This makes the eventual move to UDS a lot easier, as the second connection can simply be removed.
There's a state machine xrdp_mm_connect_sm() in xrdp_mm.c to manage the connection request. I'm hoping this makes the steps which go into a connection easier to follow.
I haven't spent a lot of time unifying SCP V0 and SCP V1 further. At the moment I can't see the point, but I'm open to being convinced otherwise if necessary.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2011,2021-10-07T14:58:37Z,2022-01-05T11:06:42Z,2022-01-05T11:06:45Z,MERGED,True,1340,1028,27,https://github.com/matt335672,Unify scpv0 code,11,[],https://github.com/neutrinolabs/xrdp/pull/2011,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/2011#issuecomment-948716809,"Update 2021-11-04 This PR is now ready for review, following my own testing.
The point of the PR is to get xrdp and sesrun to use libscp to communicate with sesman. Once this is done, it becomes a lot easier to replace SCP V0/V1 with an SCP V2 to support #1961
Most of it is relatively straightforward. The complication is within xrdp, and centres around two issues:-
1 The interface between xrdp_mm.c and xrdp_wm.c
2  Replacing the synchronous access_control() function in xrdp_mm.c with asynchronous calls to libscp.
For the first of these, I've added a function xrdp_wm_mod_connect_done() to xrdp_wm.c. The idea is that xrdp_mm.c uses this to notify the window manager of all connection results. As well as simplifying the interface, this should result in uniform behaviour when a connection attempt fails. At the moment, strange things happen when (for example) a neutrinordp proxy connection does not authenticate properly with pamusername. This is fixed by this PR.
The second of these is complicated by not moving to UDS yet. I've approached it by using a second connection to sesman to fire off the PAM authentication request. This makes the eventual move to UDS a lot easier, as the second connection can simply be removed.
There's a state machine xrdp_mm_connect_sm() in xrdp_mm.c to manage the connection request. I'm hoping this makes the steps which go into a connection easier to follow.
I haven't spent a lot of time unifying SCP V0 and SCP V1 further. At the moment I can't see the point, but I'm open to being convinced otherwise if necessary.","Quick update : the changes to xrdp are largely tested now, but the utilities are still outstanding.
Password failures when using the PAM gateway and the neutrinordp module are a little more informative:-


I'd have liked to get more info on the neutrinordp failure, but freerdp 1.x just logs to stdout, so any really useful info is unfortunately lost.",True,{'THUMBS_UP': ['https://github.com/metalefty']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2011,2021-10-07T14:58:37Z,2022-01-05T11:06:42Z,2022-01-05T11:06:45Z,MERGED,True,1340,1028,27,https://github.com/matt335672,Unify scpv0 code,11,[],https://github.com/neutrinolabs/xrdp/pull/2011,https://github.com/matt335672,3,https://github.com/neutrinolabs/xrdp/pull/2011#issuecomment-979338096,"Update 2021-11-04 This PR is now ready for review, following my own testing.
The point of the PR is to get xrdp and sesrun to use libscp to communicate with sesman. Once this is done, it becomes a lot easier to replace SCP V0/V1 with an SCP V2 to support #1961
Most of it is relatively straightforward. The complication is within xrdp, and centres around two issues:-
1 The interface between xrdp_mm.c and xrdp_wm.c
2  Replacing the synchronous access_control() function in xrdp_mm.c with asynchronous calls to libscp.
For the first of these, I've added a function xrdp_wm_mod_connect_done() to xrdp_wm.c. The idea is that xrdp_mm.c uses this to notify the window manager of all connection results. As well as simplifying the interface, this should result in uniform behaviour when a connection attempt fails. At the moment, strange things happen when (for example) a neutrinordp proxy connection does not authenticate properly with pamusername. This is fixed by this PR.
The second of these is complicated by not moving to UDS yet. I've approached it by using a second connection to sesman to fire off the PAM authentication request. This makes the eventual move to UDS a lot easier, as the second connection can simply be removed.
There's a state machine xrdp_mm_connect_sm() in xrdp_mm.c to manage the connection request. I'm hoping this makes the steps which go into a connection easier to follow.
I haven't spent a lot of time unifying SCP V0 and SCP V1 further. At the moment I can't see the point, but I'm open to being convinced otherwise if necessary.","No functional changes - simply rebased and checked against new functionality.
@metalefty - I'd like to get this in to v0.9.18 if possible, so I can start refactoring SCP.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2013,2021-10-08T08:34:36Z,2021-10-08T09:35:14Z,2021-10-08T09:35:17Z,MERGED,True,12,9,2,https://github.com/metalefty,base64: separate license and brief of file for visibility,1,[],https://github.com/neutrinolabs/xrdp/pull/2013,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/2013,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2014,2021-10-11T18:49:48Z,2021-10-20T09:23:09Z,2022-03-19T09:10:06Z,MERGED,True,15,0,3,https://github.com/matt335672,Fix definitely lost memory leaks,1,[],https://github.com/neutrinolabs/xrdp/pull/2014,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/2014,"Fixes #1562, although it seems a lot of this has been done already.
Remove some minor 'definitely lost' memory leaks which are generating noise while testing #2011
The first of these is in common/log.c, and occurs when log_config_free() is called here as part of log_start():-

  
    
      xrdp/common/log.c
    
    
         Line 735
      in
      c11d0e3
    
  
  
    

        
          
           log_config_free(config); 
        
    
  


Memory is allocated here:-

  
    
      xrdp/common/log.c
    
    
        Lines 319 to 330
      in
      c11d0e3
    
  
  
    

        
          
           lc->log_file = g_strdup((char *)list_get_item(param_v, i)); 
        

        
          
            
        

        
          
           if (lc->log_file != NULL) 
        

        
          
           { 
        

        
          
               if (lc->log_file[0] != '/') 
        

        
          
               { 
        

        
          
                   temp_buf = (char *)g_malloc(512, 0); 
        

        
          
                   g_snprintf(temp_buf, 511, ""%s/%s"", XRDP_LOG_PATH, lc->log_file); 
        

        
          
                   g_free(lc->log_file); 
        

        
          
                   lc->log_file = temp_buf; 
        

        
          
               } 
        

        
          
           } 
        
    
  


The second change is to the VNC module where a stream is not freed after use.
The third change is simply to close the log properly in xrdp/xrdp.c if error conditions are detected during startup.
Leaks were tracked down by running xrdp as follows:-
sudo valgrind --leak-check=full --keep-debuginfo=yes xrdp -n","Fixes #1562, although it seems a lot of this has been done already.
Remove some minor 'definitely lost' memory leaks which are generating noise while testing #2011
The first of these is in common/log.c, and occurs when log_config_free() is called here as part of log_start():-

  
    
      xrdp/common/log.c
    
    
         Line 735
      in
      c11d0e3
    
  
  
    

        
          
           log_config_free(config); 
        
    
  


Memory is allocated here:-

  
    
      xrdp/common/log.c
    
    
        Lines 319 to 330
      in
      c11d0e3
    
  
  
    

        
          
           lc->log_file = g_strdup((char *)list_get_item(param_v, i)); 
        

        
          
            
        

        
          
           if (lc->log_file != NULL) 
        

        
          
           { 
        

        
          
               if (lc->log_file[0] != '/') 
        

        
          
               { 
        

        
          
                   temp_buf = (char *)g_malloc(512, 0); 
        

        
          
                   g_snprintf(temp_buf, 511, ""%s/%s"", XRDP_LOG_PATH, lc->log_file); 
        

        
          
                   g_free(lc->log_file); 
        

        
          
                   lc->log_file = temp_buf; 
        

        
          
               } 
        

        
          
           } 
        
    
  


The second change is to the VNC module where a stream is not freed after use.
The third change is simply to close the log properly in xrdp/xrdp.c if error conditions are detected during startup.
Leaks were tracked down by running xrdp as follows:-
sudo valgrind --leak-check=full --keep-debuginfo=yes xrdp -n",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2015,2021-10-12T03:28:54Z,2021-10-12T09:04:38Z,2021-10-12T09:29:13Z,MERGED,True,63,0,1,https://github.com/metalefty,tests: add tests on g_strtrim(),2,[],https://github.com/neutrinolabs/xrdp/pull/2015,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/2015,I was just learning how to write tests using libcheck. Just to share the output.,I was just learning how to write tests using libcheck. Just to share the output.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2016,2021-10-12T13:47:44Z,2021-10-13T08:36:12Z,2021-10-13T08:36:16Z,MERGED,True,58,19,8,https://github.com/matt335672,Remove unnecessary error from neutrinordp log,1,[],https://github.com/neutrinolabs/xrdp/pull/2016,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/2016,"This PR removes the following error from the xrdp.log when the neutrinordp module is being used:-
[20211012-10:08:27] [ERROR] libxrdp_query_channel: Channel index out of range. max channel index 4, received channel index 4

This was highlighted recently in a Gitter conversation with @GG668.
See also #1775, where exactly the same error was being generated. The same logic was in use, which was to get the number of channels by calling libxrdp_query_channel() with increasing indexes until an error was returned.
The fix in that case was to query the channel count directly from libxrdp. This applies the same fix, but it is also necessary to add a call to get the channel count to the module interface so that neutrinordp can access it.","This PR removes the following error from the xrdp.log when the neutrinordp module is being used:-
[20211012-10:08:27] [ERROR] libxrdp_query_channel: Channel index out of range. max channel index 4, received channel index 4

This was highlighted recently in a Gitter conversation with @GG668.
See also #1775, where exactly the same error was being generated. The same logic was in use, which was to get the number of channels by calling libxrdp_query_channel() with increasing indexes until an error was returned.
The fix in that case was to query the channel count directly from libxrdp. This applies the same fix, but it is also necessary to add a call to get the channel count to the module interface so that neutrinordp can access it.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2022,2021-10-18T07:44:33Z,2022-01-13T16:19:16Z,2022-01-13T16:19:16Z,CLOSED,False,1,0,1,https://github.com/vixie,port fix from https://sourceforge.net/p/xrdp/bugs/54/,1,[],https://github.com/neutrinolabs/xrdp/pull/2022,https://github.com/vixie,1,https://github.com/neutrinolabs/xrdp/pull/2022,meant to answer #2021,meant to answer #2021,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2028,2021-10-21T14:37:38Z,2021-10-22T09:38:52Z,2021-10-22T09:38:59Z,MERGED,True,11,22,2,https://github.com/matt335672,Minor memory leaks found with valgrind,1,[],https://github.com/neutrinolabs/xrdp/pull/2028,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/2028,"Two minor memory leaks found with:-
sudo valgrind --leak-check=full --keep-debuginfo=yes xrdp -n

The first of these is simply an unfree'd stream in the VNC module.
The second one relates to the xrdp_cache struct. When xrdp_cache_reset() is called, any memory currently allocated to offscreen bitmaps is lost permanently.
The fix is to add a common call to xrdp_cache_delete() and xrdp_cache_reset() to de-allocate all allocated memory within the structure before freeing it (in xrdp_cache_delete()) or re-initialising it (in xrdp_cache_reset())","Two minor memory leaks found with:-
sudo valgrind --leak-check=full --keep-debuginfo=yes xrdp -n

The first of these is simply an unfree'd stream in the VNC module.
The second one relates to the xrdp_cache struct. When xrdp_cache_reset() is called, any memory currently allocated to offscreen bitmaps is lost permanently.
The fix is to add a common call to xrdp_cache_delete() and xrdp_cache_reset() to de-allocate all allocated memory within the structure before freeing it (in xrdp_cache_delete()) or re-initialising it (in xrdp_cache_reset())",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2030,2021-10-22T07:34:33Z,2021-10-26T08:28:37Z,2021-10-26T08:53:09Z,MERGED,True,0,274,8,https://github.com/metalefty,Cleanup unnecessary files ,7,[],https://github.com/neutrinolabs/xrdp/pull/2030,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/2030,"Cleanup obsoleted, not up-to-date, not in-use files.
Most files are created in the SourceForge era. Now we are living GitHub era. Supplemental information can be provided by Wiki. If the deletion is too aggressive, please let me know.
To make it easier to revert, I separated deletion to multiple commits for each file.

design.txt

not updated, Architecture Overview on the wiki covers it


file-loc.txt

not updated


faq-compile.txt

covered by Wiki


faq-general.txt

(will) covered by Wiki


install.txt

not updated, covered by Wiki


*-pak

created for packaging but not used actually by distro
we should create debian/ directory for example if we add such files","Cleanup obsoleted, not up-to-date, not in-use files.
Most files are created in the SourceForge era. Now we are living GitHub era. Supplemental information can be provided by Wiki. If the deletion is too aggressive, please let me know.
To make it easier to revert, I separated deletion to multiple commits for each file.

design.txt

not updated, Architecture Overview on the wiki covers it


file-loc.txt

not updated


faq-compile.txt

covered by Wiki


faq-general.txt

(will) covered by Wiki


install.txt

not updated, covered by Wiki


*-pak

created for packaging but not used actually by distro
we should create debian/ directory for example if we add such files",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2030,2021-10-22T07:34:33Z,2021-10-26T08:28:37Z,2021-10-26T08:53:09Z,MERGED,True,0,274,8,https://github.com/metalefty,Cleanup unnecessary files ,7,[],https://github.com/neutrinolabs/xrdp/pull/2030,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/2030#issuecomment-949467837,"Cleanup obsoleted, not up-to-date, not in-use files.
Most files are created in the SourceForge era. Now we are living GitHub era. Supplemental information can be provided by Wiki. If the deletion is too aggressive, please let me know.
To make it easier to revert, I separated deletion to multiple commits for each file.

design.txt

not updated, Architecture Overview on the wiki covers it


file-loc.txt

not updated


faq-compile.txt

covered by Wiki


faq-general.txt

(will) covered by Wiki


install.txt

not updated, covered by Wiki


*-pak

created for packaging but not used actually by distro
we should create debian/ directory for example if we add such files","Personally I'm happy with this approach. I can't remember the last time I looked in a tarball for information, rather than at a project website or wiki.
The files also need removing from the top-level Makefile.am to fix the CI build:-
--- a/Makefile.am
+++ b/Makefile.am
@@ -11,15 +11,8 @@ EXTRA_DIST = \
   astyle_config.as \
   bootstrap \
   coding_style.md \
-  description-pak \
-  design.txt \
-  faq-compile.txt \
-  faq-general.txt \
-  file-loc.txt \
   fontdump \
-  install.txt \
   m4 \
-  postinstall-pak \
   vrplayer
 
 if XRDP_NEUTRINORDP
A couple of suggestions/questions:-

How about coding_style.md?
Is it worth adding a link to the Wiki to README.md?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2030,2021-10-22T07:34:33Z,2021-10-26T08:28:37Z,2021-10-26T08:53:09Z,MERGED,True,0,274,8,https://github.com/metalefty,Cleanup unnecessary files ,7,[],https://github.com/neutrinolabs/xrdp/pull/2030,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/2030#issuecomment-949781348,"Cleanup obsoleted, not up-to-date, not in-use files.
Most files are created in the SourceForge era. Now we are living GitHub era. Supplemental information can be provided by Wiki. If the deletion is too aggressive, please let me know.
To make it easier to revert, I separated deletion to multiple commits for each file.

design.txt

not updated, Architecture Overview on the wiki covers it


file-loc.txt

not updated


faq-compile.txt

covered by Wiki


faq-general.txt

(will) covered by Wiki


install.txt

not updated, covered by Wiki


*-pak

created for packaging but not used actually by distro
we should create debian/ directory for example if we add such files","Ah, I forgot to edit Makefile.am. Thanks for the catch.

How about coding_style.md?

I think astyle_config.as is the master of the coding style and coding_style.md is a human-friendly translation of astyle_config.as. So it is a supplemental document but not strongly needed because we do coding style checks during CI now.

Is it worth adding a link to the Wiki to README.md?

Yes, quick guide should be written in README.md but detailed information can be put on Wiki and linked from README.md.
I personally think the ""Compiling"" section can be minimized and replaced with a link to Wiki.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2030,2021-10-22T07:34:33Z,2021-10-26T08:28:37Z,2021-10-26T08:53:09Z,MERGED,True,0,274,8,https://github.com/metalefty,Cleanup unnecessary files ,7,[],https://github.com/neutrinolabs/xrdp/pull/2030,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/2030#issuecomment-949792945,"Cleanup obsoleted, not up-to-date, not in-use files.
Most files are created in the SourceForge era. Now we are living GitHub era. Supplemental information can be provided by Wiki. If the deletion is too aggressive, please let me know.
To make it easier to revert, I separated deletion to multiple commits for each file.

design.txt

not updated, Architecture Overview on the wiki covers it


file-loc.txt

not updated


faq-compile.txt

covered by Wiki


faq-general.txt

(will) covered by Wiki


install.txt

not updated, covered by Wiki


*-pak

created for packaging but not used actually by distro
we should create debian/ directory for example if we add such files","BTW,  the filename of coding_style.md appears odd a bit for me. Because other markdown files are named uppercase.
Personally, I would like to remove coding_style.md and add CONTRIBUTING.md for a quick guide of new contributions. Then I would like to mention running code formatter before making a pull request in that file.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2030,2021-10-22T07:34:33Z,2021-10-26T08:28:37Z,2021-10-26T08:53:09Z,MERGED,True,0,274,8,https://github.com/metalefty,Cleanup unnecessary files ,7,[],https://github.com/neutrinolabs/xrdp/pull/2030,https://github.com/matt335672,5,https://github.com/neutrinolabs/xrdp/pull/2030#issuecomment-950668568,"Cleanup obsoleted, not up-to-date, not in-use files.
Most files are created in the SourceForge era. Now we are living GitHub era. Supplemental information can be provided by Wiki. If the deletion is too aggressive, please let me know.
To make it easier to revert, I separated deletion to multiple commits for each file.

design.txt

not updated, Architecture Overview on the wiki covers it


file-loc.txt

not updated


faq-compile.txt

covered by Wiki


faq-general.txt

(will) covered by Wiki


install.txt

not updated, covered by Wiki


*-pak

created for packaging but not used actually by distro
we should create debian/ directory for example if we add such files",Agreed about the CONTRIBUTING.md. That's more useful I think than what we've got at the moment.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2030,2021-10-22T07:34:33Z,2021-10-26T08:28:37Z,2021-10-26T08:53:09Z,MERGED,True,0,274,8,https://github.com/metalefty,Cleanup unnecessary files ,7,[],https://github.com/neutrinolabs/xrdp/pull/2030,https://github.com/metalefty,6,https://github.com/neutrinolabs/xrdp/pull/2030#issuecomment-951523350,"Cleanup obsoleted, not up-to-date, not in-use files.
Most files are created in the SourceForge era. Now we are living GitHub era. Supplemental information can be provided by Wiki. If the deletion is too aggressive, please let me know.
To make it easier to revert, I separated deletion to multiple commits for each file.

design.txt

not updated, Architecture Overview on the wiki covers it


file-loc.txt

not updated


faq-compile.txt

covered by Wiki


faq-general.txt

(will) covered by Wiki


install.txt

not updated, covered by Wiki


*-pak

created for packaging but not used actually by distro
we should create debian/ directory for example if we add such files",Let's merge this and work on CONTRIBUTING.md later.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2032,2021-10-25T15:21:48Z,2021-10-29T10:11:01Z,2021-10-29T10:11:05Z,MERGED,True,235,12,7,https://github.com/matt335672,Chansrv hang fix,4,[],https://github.com/neutrinolabs/xrdp/pull/2032,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/2032,"Fixes #2031
Before chansrv adds a UN*X file system path to the Windows clipboard, it checks that the file is not already remote (i.e. on a Windows filesystem).
There is no point in adding these files to the Windows clipboard as they are already on the remote system. Note that the files are in any case still added to the UN*X clipboard, so cut-paste functionality within the remote session works as expected.
Without this fix, selecting file in the remote filesystem and hitting CTRL-C hangs chansrv hard.
With the fix, it is possible to use the Unix desktop copy-paste functionality to copy files from the remote filesystem.","Fixes #2031
Before chansrv adds a UN*X file system path to the Windows clipboard, it checks that the file is not already remote (i.e. on a Windows filesystem).
There is no point in adding these files to the Windows clipboard as they are already on the remote system. Note that the files are in any case still added to the UN*X clipboard, so cut-paste functionality within the remote session works as expected.
Without this fix, selecting file in the remote filesystem and hitting CTRL-C hangs chansrv hard.
With the fix, it is possible to use the Unix desktop copy-paste functionality to copy files from the remote filesystem.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2032,2021-10-25T15:21:48Z,2021-10-29T10:11:01Z,2021-10-29T10:11:05Z,MERGED,True,235,12,7,https://github.com/matt335672,Chansrv hang fix,4,[],https://github.com/neutrinolabs/xrdp/pull/2032,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/2032#issuecomment-953509053,"Fixes #2031
Before chansrv adds a UN*X file system path to the Windows clipboard, it checks that the file is not already remote (i.e. on a Windows filesystem).
There is no point in adding these files to the Windows clipboard as they are already on the remote system. Note that the files are in any case still added to the UN*X clipboard, so cut-paste functionality within the remote session works as expected.
Without this fix, selecting file in the remote filesystem and hitting CTRL-C hangs chansrv hard.
With the fix, it is possible to use the Unix desktop copy-paste functionality to copy files from the remote filesystem.",It makes sense. Let's go ahead.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2054,2021-11-16T11:52:03Z,2021-11-18T06:57:22Z,2021-11-18T07:06:12Z,CLOSED,False,2,1,1,https://github.com/liuxiang88,Set loongarch no-need-align-macro.,1,[],https://github.com/neutrinolabs/xrdp/pull/2054,https://github.com/liuxiang88,1,https://github.com/neutrinolabs/xrdp/pull/2054,This commit is adding support for LoongArch architecture.,This commit is adding support for LoongArch architecture.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2054,2021-11-16T11:52:03Z,2021-11-18T06:57:22Z,2021-11-18T07:06:12Z,CLOSED,False,2,1,1,https://github.com/liuxiang88,Set loongarch no-need-align-macro.,1,[],https://github.com/neutrinolabs/xrdp/pull/2054,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/2054#issuecomment-971439144,This commit is adding support for LoongArch architecture.,"Thanks for this @liuxiang88.
I have a query. I've had a look at the loongarch reference manual regarding unaligned memory access here:-
https://loongson.github.io/LoongArch-Documentation/LoongArch-Vol1-EN.html#unaligned-memory-access
My reading of this paragraph is that some implementations on loongarch may generate an address fault on unaligned access, and if so, the default implementation may be better being NEED_ALIGN.
The default for the MIPS architecture is NEED_ALIGN, and I understand loongarch is somewhat based on that.
Have I misunderstood something?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2054,2021-11-16T11:52:03Z,2021-11-18T06:57:22Z,2021-11-18T07:06:12Z,CLOSED,False,2,1,1,https://github.com/liuxiang88,Set loongarch no-need-align-macro.,1,[],https://github.com/neutrinolabs/xrdp/pull/2054,https://github.com/liuxiang88,3,https://github.com/neutrinolabs/xrdp/pull/2054#issuecomment-972593207,This commit is adding support for LoongArch architecture.,"Thanks for this @liuxiang88.
I have a query. I've had a look at the loongarch reference manual regarding unaligned memory access here:-
https://loongson.github.io/LoongArch-Documentation/LoongArch-Vol1-EN.html#unaligned-memory-access
My reading of this paragraph is that some implementations on loongarch may generate an address fault on unaligned access, and if so, the default implementation may be better being NEED_ALIGN.
The default for the MIPS architecture is NEED_ALIGN, and I understand loongarch is somewhat based on that.
Have I misunderstood something?

After I communicated with the chip developer, I got a reply to prove that you are right.It can be NO_NEED_ALIGN，but should be better to being NEED_ALIGN.
I'll close this request,then make a new request.
Thank you for yourtime.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2057,2021-11-18T07:25:51Z,2021-11-18T10:08:41Z,2021-11-18T10:08:42Z,MERGED,True,2,1,1,https://github.com/liuxiang88,Set loongarch need-align-macro.,1,[],https://github.com/neutrinolabs/xrdp/pull/2057,https://github.com/liuxiang88,1,https://github.com/neutrinolabs/xrdp/pull/2057,This commit is adding support for LoongArch architecture.,This commit is adding support for LoongArch architecture.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2061,2021-11-24T17:44:48Z,2021-11-25T10:11:50Z,2021-11-25T10:12:06Z,MERGED,True,8,7,2,https://github.com/matt335672,Make username and password case insensitive in more places,1,[],https://github.com/neutrinolabs/xrdp/pull/2061,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/2061,"Partial solution to #2059
With this, users can edit the xrdp.ini file to make Password and Username compatible with the Session string.
Without this patch, the password field is not masked, and the username won't be auto-filled in from the client.","Partial solution to #2059
With this, users can edit the xrdp.ini file to make Password and Username compatible with the Session string.
Without this patch, the password field is not masked, and the username won't be auto-filled in from the client.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2065,2021-11-30T11:01:24Z,2021-12-01T09:23:01Z,2021-12-01T09:23:05Z,MERGED,True,32,17,1,https://github.com/matt335672,Log error on failure to attach to shared memory,1,[],https://github.com/neutrinolabs/xrdp/pull/2065,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/2065,"Relates to #1928
If xrdp had logged a message when the race condition with the shared memory happened, this would have been a lot easier to find. This PR will generate this error in the log if the shared memory fails to attach:-
[20211130-10:51:00] [ERROR] Can't attach to shared memory id 32787 from id 32780 [Invalid argument]

A devel error log is also generated if the message flags value is not recognised.","Relates to #1928
If xrdp had logged a message when the race condition with the shared memory happened, this would have been a lot easier to find. This PR will generate this error in the log if the shared memory fails to attach:-
[20211130-10:51:00] [ERROR] Can't attach to shared memory id 32787 from id 32780 [Invalid argument]

A devel error log is also generated if the message flags value is not recognised.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2066,2021-11-30T11:14:44Z,2021-12-02T11:18:13Z,2021-12-02T11:18:16Z,MERGED,True,1,0,1,https://github.com/matt335672,Set stream size correctly for TS_SURFCMD_STREAM_SURF_BITS header,1,[],https://github.com/neutrinolabs/xrdp/pull/2066,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/2066,"Without this PR, the fastpath code aborts when xrdp is build with --enable-devel-streamcheck :-
[20211130-11:13:04] [CORE ] [parser_stream_overflow_check(parse.c:49)] libxrdp.c:1678 Stream output buffer overflow. Size=0, pos=7, requested=2","Without this PR, the fastpath code aborts when xrdp is build with --enable-devel-streamcheck :-
[20211130-11:13:04] [CORE ] [parser_stream_overflow_check(parse.c:49)] libxrdp.c:1678 Stream output buffer overflow. Size=0, pos=7, requested=2",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2067,2021-12-01T08:00:16Z,2021-12-01T15:52:43Z,2021-12-02T03:38:17Z,MERGED,True,5,5,2,https://github.com/metalefty,Replace `which` with `command -v`,2,[],https://github.com/neutrinolabs/xrdp/pull/2067,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/2067,"as well as neutrinolabs/xorgxrdp#204.
Reported by: @drwilly","as well as neutrinolabs/xorgxrdp#204.
Reported by: @drwilly",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2067,2021-12-01T08:00:16Z,2021-12-01T15:52:43Z,2021-12-02T03:38:17Z,MERGED,True,5,5,2,https://github.com/metalefty,Replace `which` with `command -v`,2,[],https://github.com/neutrinolabs/xrdp/pull/2067,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/2067#issuecomment-983446903,"as well as neutrinolabs/xorgxrdp#204.
Reported by: @drwilly","Good idea.
I found these ones too:-

genkeymap/dump-keymaps.sh
libpainter/bootstrap
librfxcodec/bootstrap",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2067,2021-12-01T08:00:16Z,2021-12-01T15:52:43Z,2021-12-02T03:38:17Z,MERGED,True,5,5,2,https://github.com/metalefty,Replace `which` with `command -v`,2,[],https://github.com/neutrinolabs/xrdp/pull/2067,https://github.com/matt335672,3,https://github.com/neutrinolabs/xrdp/pull/2067#issuecomment-983778570,"as well as neutrinolabs/xorgxrdp#204.
Reported by: @drwilly","@metalefty - I'll have a bit of time tomorrow to do the libpainter and librfxcodec changes.
Shall I pick that up, or will you do it?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2067,2021-12-01T08:00:16Z,2021-12-01T15:52:43Z,2021-12-02T03:38:17Z,MERGED,True,5,5,2,https://github.com/metalefty,Replace `which` with `command -v`,2,[],https://github.com/neutrinolabs/xrdp/pull/2067,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/2067#issuecomment-984263562,"as well as neutrinolabs/xorgxrdp#204.
Reported by: @drwilly",@matt335672 Can you do that?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2069,2021-12-02T10:41:21Z,2021-12-02T11:17:14Z,2021-12-02T11:17:15Z,MERGED,True,2,2,2,https://github.com/matt335672,Updates to libpainter and librfxcodec bootstrap scripts,1,[],https://github.com/neutrinolabs/xrdp/pull/2069,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/2069,Applies #2067 to git sub-modules,Applies #2067 to git sub-modules,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2070,2021-12-02T16:17:04Z,2021-12-06T10:36:06Z,2021-12-06T10:44:12Z,MERGED,True,3,1,1,https://github.com/matt335672,Fix buffer size check,1,[],https://github.com/neutrinolabs/xrdp/pull/2070,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/2070,"Another uninitialised stream buffer fix, similar to #2066
Found when investigating #2068
The send_s.size variable needs to be set to a sane value before out_uint8(&send_s, updateHeader); is called.
This one is quite tricky to follow, as the line send_s.end = send_s.p + send_len; is moved to a place where both send_s.p and send_len have different values. Since in the new place send_s.p is header_byes less and send_len is header_bytes more, the net effect is the same.","Another uninitialised stream buffer fix, similar to #2066
Found when investigating #2068
The send_s.size variable needs to be set to a sane value before out_uint8(&send_s, updateHeader); is called.
This one is quite tricky to follow, as the line send_s.end = send_s.p + send_len; is moved to a place where both send_s.p and send_len have different values. Since in the new place send_s.p is header_byes less and send_len is header_bytes more, the net effect is the same.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2074,2021-12-06T03:42:16Z,2021-12-06T10:06:05Z,2021-12-10T05:43:28Z,MERGED,True,1,1,1,https://github.com/kenhys,Fix wrong debug level log message for g_file_atom2,1,[],https://github.com/neutrinolabs/xrdp/pull/2074,https://github.com/kenhys,1,https://github.com/neutrinolabs/xrdp/pull/2074,"As g_file_atom2 is x-special/gnome-copied-files
(See g_file_atom2 definition in sesman/chansrv/clipboard.c),
it should be ""x-special/gnome-copied-files"" in this context.

  
    
      xrdp/sesman/chansrv/clipboard.c
    
    
        Lines 2062 to 2066
      in
      b557de4
    
  
  
    

        
          
           else if (lxevent->target == g_file_atom2) 
        

        
          
           { 
        

        
          
               LOG_DEVEL(LOG_LEVEL_DEBUG, ""clipboard_event_selection_notify: text/uri-list "" 
        

        
          
                         ""data_size %d"", data_size); 
        

        
          
               if ((g_clip_s2c.incr_in_progress == 0) && (data_size > 0))","As g_file_atom2 is x-special/gnome-copied-files
(See g_file_atom2 definition in sesman/chansrv/clipboard.c),
it should be ""x-special/gnome-copied-files"" in this context.

  
    
      xrdp/sesman/chansrv/clipboard.c
    
    
        Lines 2062 to 2066
      in
      b557de4
    
  
  
    

        
          
           else if (lxevent->target == g_file_atom2) 
        

        
          
           { 
        

        
          
               LOG_DEVEL(LOG_LEVEL_DEBUG, ""clipboard_event_selection_notify: text/uri-list "" 
        

        
          
                         ""data_size %d"", data_size); 
        

        
          
               if ((g_clip_s2c.incr_in_progress == 0) && (data_size > 0))",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2074,2021-12-06T03:42:16Z,2021-12-06T10:06:05Z,2021-12-10T05:43:28Z,MERGED,True,1,1,1,https://github.com/kenhys,Fix wrong debug level log message for g_file_atom2,1,[],https://github.com/neutrinolabs/xrdp/pull/2074,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/2074#issuecomment-986443645,"As g_file_atom2 is x-special/gnome-copied-files
(See g_file_atom2 definition in sesman/chansrv/clipboard.c),
it should be ""x-special/gnome-copied-files"" in this context.

  
    
      xrdp/sesman/chansrv/clipboard.c
    
    
        Lines 2062 to 2066
      in
      b557de4
    
  
  
    

        
          
           else if (lxevent->target == g_file_atom2) 
        

        
          
           { 
        

        
          
               LOG_DEVEL(LOG_LEVEL_DEBUG, ""clipboard_event_selection_notify: text/uri-list "" 
        

        
          
                         ""data_size %d"", data_size); 
        

        
          
               if ((g_clip_s2c.incr_in_progress == 0) && (data_size > 0))",Indeed. Thanks for the catch.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2078,2021-12-08T06:24:30Z,2021-12-10T11:32:29Z,2021-12-13T04:19:57Z,MERGED,True,0,1,1,https://github.com/metalefty,xrdp: don’t spit on the console when starting,1,[],https://github.com/neutrinolabs/xrdp/pull/2078,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/2078,"Picked from Debian's local patch [1].
We have worked on reducing Debian's local patches in #1762 #1765.
This is the last one left and helps to  remove shutup-daemon.diff
completely. I don't think this log to stdout is necessary.
[1] https://salsa.debian.org/debian-remote-team/xrdp/-/blob/debian/0.9.17-2/debian/patches/shutup-daemon.diff","Picked from Debian's local patch [1].
We have worked on reducing Debian's local patches in #1762 #1765.
This is the last one left and helps to  remove shutup-daemon.diff
completely. I don't think this log to stdout is necessary.
[1] https://salsa.debian.org/debian-remote-team/xrdp/-/blob/debian/0.9.17-2/debian/patches/shutup-daemon.diff",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2078,2021-12-08T06:24:30Z,2021-12-10T11:32:29Z,2021-12-13T04:19:57Z,MERGED,True,0,1,1,https://github.com/metalefty,xrdp: don’t spit on the console when starting,1,[],https://github.com/neutrinolabs/xrdp/pull/2078,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/2078#issuecomment-989487627,"Picked from Debian's local patch [1].
We have worked on reducing Debian's local patches in #1762 #1765.
This is the last one left and helps to  remove shutup-daemon.diff
completely. I don't think this log to stdout is necessary.
[1] https://salsa.debian.org/debian-remote-team/xrdp/-/blob/debian/0.9.17-2/debian/patches/shutup-daemon.diff","Yes, lets' replace them now.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2078,2021-12-08T06:24:30Z,2021-12-10T11:32:29Z,2021-12-13T04:19:57Z,MERGED,True,0,1,1,https://github.com/metalefty,xrdp: don’t spit on the console when starting,1,[],https://github.com/neutrinolabs/xrdp/pull/2078,https://github.com/matt335672,3,https://github.com/neutrinolabs/xrdp/pull/2078#issuecomment-989703392,"Picked from Debian's local patch [1].
We have worked on reducing Debian's local patches in #1762 #1765.
This is the last one left and helps to  remove shutup-daemon.diff
completely. I don't think this log to stdout is necessary.
[1] https://salsa.debian.org/debian-remote-team/xrdp/-/blob/debian/0.9.17-2/debian/patches/shutup-daemon.diff","I know you're busy these days, so let me know if you need a hand.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2078,2021-12-08T06:24:30Z,2021-12-10T11:32:29Z,2021-12-13T04:19:57Z,MERGED,True,0,1,1,https://github.com/metalefty,xrdp: don’t spit on the console when starting,1,[],https://github.com/neutrinolabs/xrdp/pull/2078,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/2078#issuecomment-990624775,"Picked from Debian's local patch [1].
We have worked on reducing Debian's local patches in #1762 #1765.
This is the last one left and helps to  remove shutup-daemon.diff
completely. I don't think this log to stdout is necessary.
[1] https://salsa.debian.org/debian-remote-team/xrdp/-/blob/debian/0.9.17-2/debian/patches/shutup-daemon.diff",@matt335672 Thanks. Let's merge this and can you make another PR on the point?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2080,2021-12-10T11:54:27Z,2021-12-13T10:07:09Z,2021-12-13T10:07:09Z,MERGED,True,13,12,1,https://github.com/matt335672,Log startup errors,2,[],https://github.com/neutrinolabs/xrdp/pull/2080,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/2080,"Follow-on from #2078

Replaces unnecessary calls to g_writeln() with standard LOG() calls.
Fixes a few exit statuses which indicate an error has occurred.","Follow-on from #2078

Replaces unnecessary calls to g_writeln() with standard LOG() calls.
Fixes a few exit statuses which indicate an error has occurred.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2082,2021-12-13T08:54:37Z,2022-01-14T11:17:49Z,2022-01-14T11:18:43Z,MERGED,True,941,95,11,https://github.com/kenhys,Extend inbound/outbound clipboard restriction,7,[],https://github.com/neutrinolabs/xrdp/pull/2082,https://github.com/kenhys,1,https://github.com/neutrinolabs/xrdp/pull/2082,"Closes: #2081
This is a follow up #1298
Based on feedback, #2081 (comment)
RestrictOutboundClipboard configuration spec is extended and
RestrictInboundClipboard parameter is also supported.
  RestrictOutboundClipboard=file            # => Restricts file
  RestrictOutboundClipboard=file,text       # => Restricts file & text
  RestrictOutboundClipboard=true            # => Restricts text,file,image

NOTE: I'm not sure what is the best behavior about combined configuration case.
So, currently in the following case, true is ignored explicitly.
  RestrictOutboundClipboard=true,text       # => Restricts text only


Supporting the above case (check priority) is out of scope in this PR.","Closes: #2081
This is a follow up #1298
Based on feedback, #2081 (comment)
RestrictOutboundClipboard configuration spec is extended and
RestrictInboundClipboard parameter is also supported.
  RestrictOutboundClipboard=file            # => Restricts file
  RestrictOutboundClipboard=file,text       # => Restricts file & text
  RestrictOutboundClipboard=true            # => Restricts text,file,image

NOTE: I'm not sure what is the best behavior about combined configuration case.
So, currently in the following case, true is ignored explicitly.
  RestrictOutboundClipboard=true,text       # => Restricts text only


Supporting the above case (check priority) is out of scope in this PR.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2082,2021-12-13T08:54:37Z,2022-01-14T11:17:49Z,2022-01-14T11:18:43Z,MERGED,True,941,95,11,https://github.com/kenhys,Extend inbound/outbound clipboard restriction,7,[],https://github.com/neutrinolabs/xrdp/pull/2082,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/2082#issuecomment-992292526,"Closes: #2081
This is a follow up #1298
Based on feedback, #2081 (comment)
RestrictOutboundClipboard configuration spec is extended and
RestrictInboundClipboard parameter is also supported.
  RestrictOutboundClipboard=file            # => Restricts file
  RestrictOutboundClipboard=file,text       # => Restricts file & text
  RestrictOutboundClipboard=true            # => Restricts text,file,image

NOTE: I'm not sure what is the best behavior about combined configuration case.
So, currently in the following case, true is ignored explicitly.
  RestrictOutboundClipboard=true,text       # => Restricts text only


Supporting the above case (check priority) is out of scope in this PR.","Thanks! Regarding the case true,text, we need to discuss. Anyway, it is a good PR to start.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2082,2021-12-13T08:54:37Z,2022-01-14T11:17:49Z,2022-01-14T11:18:43Z,MERGED,True,941,95,11,https://github.com/kenhys,Extend inbound/outbound clipboard restriction,7,[],https://github.com/neutrinolabs/xrdp/pull/2082,https://github.com/kenhys,3,https://github.com/neutrinolabs/xrdp/pull/2082#issuecomment-993322573,"Closes: #2081
This is a follow up #1298
Based on feedback, #2081 (comment)
RestrictOutboundClipboard configuration spec is extended and
RestrictInboundClipboard parameter is also supported.
  RestrictOutboundClipboard=file            # => Restricts file
  RestrictOutboundClipboard=file,text       # => Restricts file & text
  RestrictOutboundClipboard=true            # => Restricts text,file,image

NOTE: I'm not sure what is the best behavior about combined configuration case.
So, currently in the following case, true is ignored explicitly.
  RestrictOutboundClipboard=true,text       # => Restricts text only


Supporting the above case (check priority) is out of scope in this PR.","Implement g_str_to_bitmask
Changed to use g_str_to_bitmask
Updated sesman.ini
Updated sesman.ini.5 manpage
Updated inbound/outbound patch",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2082,2021-12-13T08:54:37Z,2022-01-14T11:17:49Z,2022-01-14T11:18:43Z,MERGED,True,941,95,11,https://github.com/kenhys,Extend inbound/outbound clipboard restriction,7,[],https://github.com/neutrinolabs/xrdp/pull/2082,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/2082#issuecomment-994501089,"Closes: #2081
This is a follow up #1298
Based on feedback, #2081 (comment)
RestrictOutboundClipboard configuration spec is extended and
RestrictInboundClipboard parameter is also supported.
  RestrictOutboundClipboard=file            # => Restricts file
  RestrictOutboundClipboard=file,text       # => Restricts file & text
  RestrictOutboundClipboard=true            # => Restricts text,file,image

NOTE: I'm not sure what is the best behavior about combined configuration case.
So, currently in the following case, true is ignored explicitly.
  RestrictOutboundClipboard=true,text       # => Restricts text only


Supporting the above case (check priority) is out of scope in this PR.","BTW, we'll release v0.9.18 soon. I'm fine with getting this in the next release but we need triage because we have some other ongoing PRs.
I think #2068 has a higher priority so this PR might be merged right after the 0.9.18 release.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2082,2021-12-13T08:54:37Z,2022-01-14T11:17:49Z,2022-01-14T11:18:43Z,MERGED,True,941,95,11,https://github.com/kenhys,Extend inbound/outbound clipboard restriction,7,[],https://github.com/neutrinolabs/xrdp/pull/2082,https://github.com/matt335672,5,https://github.com/neutrinolabs/xrdp/pull/2082#issuecomment-994720229,"Closes: #2081
This is a follow up #1298
Based on feedback, #2081 (comment)
RestrictOutboundClipboard configuration spec is extended and
RestrictInboundClipboard parameter is also supported.
  RestrictOutboundClipboard=file            # => Restricts file
  RestrictOutboundClipboard=file,text       # => Restricts file & text
  RestrictOutboundClipboard=true            # => Restricts text,file,image

NOTE: I'm not sure what is the best behavior about combined configuration case.
So, currently in the following case, true is ignored explicitly.
  RestrictOutboundClipboard=true,text       # => Restricts text only


Supporting the above case (check priority) is out of scope in this PR.","@kenhys - I've had to concentrate on an important issue for v0.9.18 today, and I've got family commitments for the rest of this week. I'll have to pick this up next week now. Thanks for all the work you're putting in to this.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2082,2021-12-13T08:54:37Z,2022-01-14T11:17:49Z,2022-01-14T11:18:43Z,MERGED,True,941,95,11,https://github.com/kenhys,Extend inbound/outbound clipboard restriction,7,[],https://github.com/neutrinolabs/xrdp/pull/2082,https://github.com/kenhys,6,https://github.com/neutrinolabs/xrdp/pull/2082#issuecomment-994723331,"Closes: #2081
This is a follow up #1298
Based on feedback, #2081 (comment)
RestrictOutboundClipboard configuration spec is extended and
RestrictInboundClipboard parameter is also supported.
  RestrictOutboundClipboard=file            # => Restricts file
  RestrictOutboundClipboard=file,text       # => Restricts file & text
  RestrictOutboundClipboard=true            # => Restricts text,file,image

NOTE: I'm not sure what is the best behavior about combined configuration case.
So, currently in the following case, true is ignored explicitly.
  RestrictOutboundClipboard=true,text       # => Restricts text only


Supporting the above case (check priority) is out of scope in this PR.","Thank you for sharing the status!
No problem, no need to rush into it. I'll wait for your reviews.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2082,2021-12-13T08:54:37Z,2022-01-14T11:17:49Z,2022-01-14T11:18:43Z,MERGED,True,941,95,11,https://github.com/kenhys,Extend inbound/outbound clipboard restriction,7,[],https://github.com/neutrinolabs/xrdp/pull/2082,https://github.com/matt335672,7,https://github.com/neutrinolabs/xrdp/pull/2082#issuecomment-1000817785,"Closes: #2081
This is a follow up #1298
Based on feedback, #2081 (comment)
RestrictOutboundClipboard configuration spec is extended and
RestrictInboundClipboard parameter is also supported.
  RestrictOutboundClipboard=file            # => Restricts file
  RestrictOutboundClipboard=file,text       # => Restricts file & text
  RestrictOutboundClipboard=true            # => Restricts text,file,image

NOTE: I'm not sure what is the best behavior about combined configuration case.
So, currently in the following case, true is ignored explicitly.
  RestrictOutboundClipboard=true,text       # => Restricts text only


Supporting the above case (check priority) is out of scope in this PR.","In addition to the review above, some extra code needs to be added to clipboard_event_selection_request() which relates to the formats which we advertise over X.
At the moment, if RestrictOutboundClipboard=none (for example), we're still advertising formats we won't provide to the X server. You can see this by:-

setting RestrictOutboundClipboard=none
copying some text on the Windows client
Trying to paste on the Linux side by using a menu.

On GNOME I get this context menu, containing a 'Paste' option:-

When I select 'Paste', nothing happens, as you'd expect from the code.
What I think should happen is that if the text clipboard is restricted I should get this menu instead, without 'Paste' being offered as an option:-

Here's a patch which I think will fix this:-
--- a/sesman/chansrv/clipboard.c
+++ b/sesman/chansrv/clipboard.c
@@ -2294,16 +2294,24 @@ clipboard_event_selection_request(XEvent *xevent)
         atom_buf[0] = g_targets_atom;
         atom_buf[1] = g_timestamp_atom;
         atom_buf[2] = g_multiple_atom;
-        atom_buf[3] = XA_STRING;
-        atom_buf[4] = g_utf8_atom;
-        atom_count = 5;
-        if (clipboard_find_format_id(CB_FORMAT_DIB) >= 0)
+        atom_count = 3;
+        if ((g_cfg->restrict_inbound_clipboard & CLIP_RESTRICT_TEXT) == 0)
+        {
+            atom_buf[atom_count] = XA_STRING;
+            atom_count++;
+            atom_buf[atom_count] = g_utf8_atom;
+            atom_count++;
+        }
+        if (clipboard_find_format_id(CB_FORMAT_DIB) >= 0 &&
+            (g_cfg->restrict_inbound_clipboard & CLIP_RESTRICT_IMAGE) == 0)
         {
             LOG_DEVEL(LOG_LEVEL_DEBUG, ""  reporting image/bmp"");
             atom_buf[atom_count] = g_image_bmp_atom;
             atom_count++;
         }
-        if (clipboard_find_format_id(g_file_format_id) >= 0)
+        if (clipboard_find_format_id(g_file_format_id) >= 0 &&
+            (g_cfg->restrict_inbound_clipboard & CLIP_RESTRICT_FILE) == 0)
+
         {
             LOG_DEVEL(LOG_LEVEL_DEBUG, ""  reporting text/uri-list"");
             atom_buf[atom_count] = g_file_atom1;
Happy to discuss either this, or anything else in my review.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2082,2021-12-13T08:54:37Z,2022-01-14T11:17:49Z,2022-01-14T11:18:43Z,MERGED,True,941,95,11,https://github.com/kenhys,Extend inbound/outbound clipboard restriction,7,[],https://github.com/neutrinolabs/xrdp/pull/2082,https://github.com/kenhys,8,https://github.com/neutrinolabs/xrdp/pull/2082#issuecomment-1001019120,"Closes: #2081
This is a follow up #1298
Based on feedback, #2081 (comment)
RestrictOutboundClipboard configuration spec is extended and
RestrictInboundClipboard parameter is also supported.
  RestrictOutboundClipboard=file            # => Restricts file
  RestrictOutboundClipboard=file,text       # => Restricts file & text
  RestrictOutboundClipboard=true            # => Restricts text,file,image

NOTE: I'm not sure what is the best behavior about combined configuration case.
So, currently in the following case, true is ignored explicitly.
  RestrictOutboundClipboard=true,text       # => Restricts text only


Supporting the above case (check priority) is out of scope in this PR.","@matt335672 Thanks.
I've tried suggested patch,

For c2s text, paste context menu is disabled. (expected)
For c2s file, thunar context menu is still enabled, but nothing happen when paste is clicked (without suggested patch, it shows error dialog)
For c2s image, gimp 'paste' menu is still enabled, and it shows error dialog when it is clicked.

As for c2s text, suggested patch works well, but for c2s file and image, it seems that it lacks a something.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2082,2021-12-13T08:54:37Z,2022-01-14T11:17:49Z,2022-01-14T11:18:43Z,MERGED,True,941,95,11,https://github.com/kenhys,Extend inbound/outbound clipboard restriction,7,[],https://github.com/neutrinolabs/xrdp/pull/2082,https://github.com/matt335672,9,https://github.com/neutrinolabs/xrdp/pull/2082#issuecomment-1009867305,"Closes: #2081
This is a follow up #1298
Based on feedback, #2081 (comment)
RestrictOutboundClipboard configuration spec is extended and
RestrictInboundClipboard parameter is also supported.
  RestrictOutboundClipboard=file            # => Restricts file
  RestrictOutboundClipboard=file,text       # => Restricts file & text
  RestrictOutboundClipboard=true            # => Restricts text,file,image

NOTE: I'm not sure what is the best behavior about combined configuration case.
So, currently in the following case, true is ignored explicitly.
  RestrictOutboundClipboard=true,text       # => Restricts text only


Supporting the above case (check priority) is out of scope in this PR.",@kenhys - apologies again for not getting back to you sooner. Now we've got 0.9.18 out I'll have some time to look at this (and my broken patch) later in the week.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2082,2021-12-13T08:54:37Z,2022-01-14T11:17:49Z,2022-01-14T11:18:43Z,MERGED,True,941,95,11,https://github.com/kenhys,Extend inbound/outbound clipboard restriction,7,[],https://github.com/neutrinolabs/xrdp/pull/2082,https://github.com/matt335672,10,https://github.com/neutrinolabs/xrdp/pull/2082#issuecomment-1012189711,"Closes: #2081
This is a follow up #1298
Based on feedback, #2081 (comment)
RestrictOutboundClipboard configuration spec is extended and
RestrictInboundClipboard parameter is also supported.
  RestrictOutboundClipboard=file            # => Restricts file
  RestrictOutboundClipboard=file,text       # => Restricts file & text
  RestrictOutboundClipboard=true            # => Restricts text,file,image

NOTE: I'm not sure what is the best behavior about combined configuration case.
So, currently in the following case, true is ignored explicitly.
  RestrictOutboundClipboard=true,text       # => Restricts text only


Supporting the above case (check priority) is out of scope in this PR.","@kenhys - I've had another look at the patch I suggested, and it seems OK to me.
One possible point of confusion is that when I suggested it here I was talking about RestrictOutboundClipboard, which is incorrect. It should be RestrictInboundClipboard (i.e. the c2s direction).
Here's the patch again with new line numbers after your changes:-
--- a/sesman/chansrv/clipboard.c
+++ b/sesman/chansrv/clipboard.c
@@ -2294,16 +2294,23 @@ clipboard_event_selection_request(XEvent *xevent)
         atom_buf[0] = g_targets_atom;
         atom_buf[1] = g_timestamp_atom;
         atom_buf[2] = g_multiple_atom;
-        atom_buf[3] = XA_STRING;
-        atom_buf[4] = g_utf8_atom;
-        atom_count = 5;
-        if (clipboard_find_format_id(CB_FORMAT_DIB) >= 0)
+        atom_count = 3;
+        if ((g_cfg->restrict_inbound_clipboard & CLIP_RESTRICT_TEXT) == 0)
+        {
+            atom_buf[atom_count] = XA_STRING;
+            atom_count++;
+            atom_buf[atom_count] = g_utf8_atom;
+            atom_count++;
+        }
+        if (clipboard_find_format_id(CB_FORMAT_DIB) >= 0 &&
+                (g_cfg->restrict_inbound_clipboard & CLIP_RESTRICT_IMAGE) == 0)
         {
             LOG_DEVEL(LOG_LEVEL_DEBUG, ""  reporting image/bmp"");
             atom_buf[atom_count] = g_image_bmp_atom;
             atom_count++;
         }
-        if (clipboard_find_format_id(g_file_format_id) >= 0)
+        if (clipboard_find_format_id(g_file_format_id) >= 0 &&
+                (g_cfg->restrict_inbound_clipboard & CLIP_RESTRICT_FILE) == 0)
         {
             LOG_DEVEL(LOG_LEVEL_DEBUG, ""  reporting text/uri-list"");
             atom_buf[atom_count] = g_file_atom1;
You should be able to apply this directly from the xrdp top-level directory with patch -p1 <[patchfile].
With that patch on top of your code I've got the following test results, which I'm happy with. Please have a look at these and let me know what you think, or if I haven't explained anything well enough.
I've tested in both directions, although the patch above only affects c2s.
RestrictInboundClipboard = none
Text

Copy text in Windows Notepad
Check TARGETS atom:-

$ xclip -o -t TARGETS -selection clipboard
TARGETS
TIMESTAMP
MULTIPLE
STRING
UTF8_STRING


Right-click menu in terminal; 'Paste' is allowed
Paste text - all OK

File

Copy file in Windows Explorer
Check TARGETS atom:-

$ xclip -o -t TARGETS -selection clipboard
TARGETS
TIMESTAMP
MULTIPLE
STRING
UTF8_STRING
text/uri-list
x-special/gnome-copied-files


Right-click in Thunar; 'Paste' is allowed
Paste file - all OK

Image

Copy image with Windows snipping tool
Check TARGETS atom:-

$ xclip -o -t TARGETS -selection clipboard
TARGETS
TIMESTAMP
MULTIPLE
STRING
UTF8_STRING
image/bmp


Paste in GIMP; image comes over OK

RestrictInboundClipboard = all
Text

Copy text in Windows Notepad
Check TARGETS atom:-

$ xclip -o -t TARGETS -selection clipboard
TARGETS
TIMESTAMP
MULTIPLE


Right-click menu in terminal; 'Paste' is not allowed and cannot be selected

File

Copy file in Windows Explorer
Check TARGETS atom:-

$ xclip -o -t TARGETS -selection clipboard
TARGETS
TIMESTAMP
MULTIPLE


Right-click in Thunar; 'Paste' is not allowed and cannot be selected

Image

Copy image with Windows snipping tool
Check TARGETS atom:-

$ xclip -o -t TARGETS -selection clipboard
TARGETS
TIMESTAMP
MULTIPLE


Paste in GIMP; dialog appears


The only odd thing is the Gimp dialog. However, I have never seen 'Paste' greyed out in Gimp, and xclip seems to suggest everything is OK so I think that's down to Gimp.
RestrictOutboundClipboard = none
For these I still check the TARGETS atom, but this is now set by XFCE when the copy is made, and not by xrdp.
Text

Copy text in terminal
Check TARGETS atom:-

$ xclip -o -t TARGETS -selection clipboard
TIMESTAMP
TARGETS
MULTIPLE
SAVE_TARGETS
UTF8_STRING
COMPOUND_TEXT
TEXT
STRING
text/plain;charset=utf-8
text/plain


Right-click menu in Windows notepad; 'Paste' is allowed
Paste text - all OK

File

Copy file in Thunar.
Check TARGETS atom:-

$ xclip -o -t TARGETS -selection clipboard
TIMESTAMP
TARGETS
MULTIPLE
text/uri-list
x-special/gnome-copied-files
UTF8_STRING


Right-click in Windows Explorer; 'Paste' is allowed
Paste file - all OK

Image

Copy image in Gimp with select-all/copy
Check TARGETS atom:-

$ xclip -o -t TARGETS -selection clipboard
TIMESTAMP
TARGETS
MULTIPLE
SAVE_TARGETS
image/png
image/bmp
image/x-bmp
image/x-MS-bmp
image/x-icon
image/x-ico
image/x-win-bitmap
image/vnd.microsoft.icon
application/ico
image/ico
image/icon
text/ico
image/tiff
image/jpeg


Paste in Windows Paint; image comes over OK

RestrictOutboundClipboard = all
For these I still check the TARGETS atom, but this is now set by XFCE when the copy is made, and not by xrdp.
Text

Copy text in terminal
Check TARGETS atom:-

$ xclip -o -t TARGETS -selection clipboard
TIMESTAMP
TARGETS
MULTIPLE
SAVE_TARGETS
UTF8_STRING
COMPOUND_TEXT
TEXT
STRING
text/plain;charset=utf-8
text/plain


Right-click menu in Windows notepad; 'Paste' is not allowed and cannot be selected

File

Copy file in Thunar.
Check TARGETS atom:-

$ xclip -o -t TARGETS -selection clipboard
TIMESTAMP
TARGETS
MULTIPLE
text/uri-list
x-special/gnome-copied-files
UTF8_STRING


Right-click in Windows Explorer; 'Paste' is not allowed and cannot be selected

Image

Copy image in Gimp with select-all/copy
Check TARGETS atom:-

$ xclip -o -t TARGETS -selection clipboard
TIMESTAMP
TARGETS
MULTIPLE
SAVE_TARGETS
image/png
image/bmp
image/x-bmp
image/x-MS-bmp
image/x-icon
image/x-ico
image/x-win-bitmap
image/vnd.microsoft.icon
application/ico
image/ico
image/icon
text/ico
image/tiff
image/jpeg


Paste in Windows Paint is not allowed and cannot be selected.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2082,2021-12-13T08:54:37Z,2022-01-14T11:17:49Z,2022-01-14T11:18:43Z,MERGED,True,941,95,11,https://github.com/kenhys,Extend inbound/outbound clipboard restriction,7,[],https://github.com/neutrinolabs/xrdp/pull/2082,https://github.com/kenhys,11,https://github.com/neutrinolabs/xrdp/pull/2082#issuecomment-1012655936,"Closes: #2081
This is a follow up #1298
Based on feedback, #2081 (comment)
RestrictOutboundClipboard configuration spec is extended and
RestrictInboundClipboard parameter is also supported.
  RestrictOutboundClipboard=file            # => Restricts file
  RestrictOutboundClipboard=file,text       # => Restricts file & text
  RestrictOutboundClipboard=true            # => Restricts text,file,image

NOTE: I'm not sure what is the best behavior about combined configuration case.
So, currently in the following case, true is ignored explicitly.
  RestrictOutboundClipboard=true,text       # => Restricts text only


Supporting the above case (check priority) is out of scope in this PR.","@matt335672
Thank you for the verification.
I'm happy to hear that.
Then could you commit the above additional patch and merge this PR, please?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2082,2021-12-13T08:54:37Z,2022-01-14T11:17:49Z,2022-01-14T11:18:43Z,MERGED,True,941,95,11,https://github.com/kenhys,Extend inbound/outbound clipboard restriction,7,[],https://github.com/neutrinolabs/xrdp/pull/2082,https://github.com/kenhys,12,https://github.com/neutrinolabs/xrdp/pull/2082#issuecomment-1012662742,"Closes: #2081
This is a follow up #1298
Based on feedback, #2081 (comment)
RestrictOutboundClipboard configuration spec is extended and
RestrictInboundClipboard parameter is also supported.
  RestrictOutboundClipboard=file            # => Restricts file
  RestrictOutboundClipboard=file,text       # => Restricts file & text
  RestrictOutboundClipboard=true            # => Restricts text,file,image

NOTE: I'm not sure what is the best behavior about combined configuration case.
So, currently in the following case, true is ignored explicitly.
  RestrictOutboundClipboard=true,text       # => Restricts text only


Supporting the above case (check priority) is out of scope in this PR.",I've just rebased with devel branch to keep merge history simple.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2082,2021-12-13T08:54:37Z,2022-01-14T11:17:49Z,2022-01-14T11:18:43Z,MERGED,True,941,95,11,https://github.com/kenhys,Extend inbound/outbound clipboard restriction,7,[],https://github.com/neutrinolabs/xrdp/pull/2082,https://github.com/metalefty,13,https://github.com/neutrinolabs/xrdp/pull/2082#issuecomment-1012713774,"Closes: #2081
This is a follow up #1298
Based on feedback, #2081 (comment)
RestrictOutboundClipboard configuration spec is extended and
RestrictInboundClipboard parameter is also supported.
  RestrictOutboundClipboard=file            # => Restricts file
  RestrictOutboundClipboard=file,text       # => Restricts file & text
  RestrictOutboundClipboard=true            # => Restricts text,file,image

NOTE: I'm not sure what is the best behavior about combined configuration case.
So, currently in the following case, true is ignored explicitly.
  RestrictOutboundClipboard=true,text       # => Restricts text only


Supporting the above case (check priority) is out of scope in this PR.",@kenhys @matt335672 Thanks you both. Much improved clipboard restriction.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2082,2021-12-13T08:54:37Z,2022-01-14T11:17:49Z,2022-01-14T11:18:43Z,MERGED,True,941,95,11,https://github.com/kenhys,Extend inbound/outbound clipboard restriction,7,[],https://github.com/neutrinolabs/xrdp/pull/2082,https://github.com/matt335672,14,https://github.com/neutrinolabs/xrdp/pull/2082#issuecomment-1013032157,"Closes: #2081
This is a follow up #1298
Based on feedback, #2081 (comment)
RestrictOutboundClipboard configuration spec is extended and
RestrictInboundClipboard parameter is also supported.
  RestrictOutboundClipboard=file            # => Restricts file
  RestrictOutboundClipboard=file,text       # => Restricts file & text
  RestrictOutboundClipboard=true            # => Restricts text,file,image

NOTE: I'm not sure what is the best behavior about combined configuration case.
So, currently in the following case, true is ignored explicitly.
  RestrictOutboundClipboard=true,text       # => Restricts text only


Supporting the above case (check priority) is out of scope in this PR.","As requested, patch added and merge made.
Thanks again, @kenhys",True,{'HOORAY': ['https://github.com/kenhys']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2087,2021-12-15T11:42:13Z,2022-01-05T10:22:46Z,2022-01-05T10:22:50Z,MERGED,True,161,81,5,https://github.com/matt335672,RFX : Support large screens,4,[],https://github.com/neutrinolabs/xrdp/pull/2087,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/2087,"Fixes #2068
Many thanks to @trishume for supplying the greater part of this code.
There are two commits in this code. The first makes the max size for a fastpath surface update PDU potentially much bigger if the client has a large display. This approach is taken by freerdp, and has already been validated as part of #2068. An upper limit is placed on this value to prevent runaway memory allocations.
The second is a patch supplied by @trishume. This patch also depends on a change to the librfxcodec repository, as the interface between the two packages has altered. I've tested this patch on my own setup by setting the max size for the fastpath update PDU to a small value (1MB).","Fixes #2068
Many thanks to @trishume for supplying the greater part of this code.
There are two commits in this code. The first makes the max size for a fastpath surface update PDU potentially much bigger if the client has a large display. This approach is taken by freerdp, and has already been validated as part of #2068. An upper limit is placed on this value to prevent runaway memory allocations.
The second is a patch supplied by @trishume. This patch also depends on a change to the librfxcodec repository, as the interface between the two packages has altered. I've tested this patch on my own setup by setting the max size for the fastpath update PDU to a small value (1MB).",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2087,2021-12-15T11:42:13Z,2022-01-05T10:22:46Z,2022-01-05T10:22:50Z,MERGED,True,161,81,5,https://github.com/matt335672,RFX : Support large screens,4,[],https://github.com/neutrinolabs/xrdp/pull/2087,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/2087#issuecomment-996729466,"Fixes #2068
Many thanks to @trishume for supplying the greater part of this code.
There are two commits in this code. The first makes the max size for a fastpath surface update PDU potentially much bigger if the client has a large display. This approach is taken by freerdp, and has already been validated as part of #2068. An upper limit is placed on this value to prevent runaway memory allocations.
The second is a patch supplied by @trishume. This patch also depends on a change to the librfxcodec repository, as the interface between the two packages has altered. I've tested this patch on my own setup by setting the max size for the fastpath update PDU to a small value (1MB).","This patch also depends on a change to the librfxcodec repository, as the interface between the two packages has altered.

So the version of librfxcodec and xrdp must sync?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2087,2021-12-15T11:42:13Z,2022-01-05T10:22:46Z,2022-01-05T10:22:50Z,MERGED,True,161,81,5,https://github.com/matt335672,RFX : Support large screens,4,[],https://github.com/neutrinolabs/xrdp/pull/2087,https://github.com/matt335672,3,https://github.com/neutrinolabs/xrdp/pull/2087#issuecomment-997752900,"Fixes #2068
Many thanks to @trishume for supplying the greater part of this code.
There are two commits in this code. The first makes the max size for a fastpath surface update PDU potentially much bigger if the client has a large display. This approach is taken by freerdp, and has already been validated as part of #2068. An upper limit is placed on this value to prevent runaway memory allocations.
The second is a patch supplied by @trishume. This patch also depends on a change to the librfxcodec repository, as the interface between the two packages has altered. I've tested this patch on my own setup by setting the max size for the fastpath update PDU to a small value (1MB).","Yes - the package versions need to sync.
The way this works (if my understanding of git submodules is correct) is that the change gets made to librfxcodec, and then the librfxcodec commit is added in to the main project by making a commit in that repository.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2087,2021-12-15T11:42:13Z,2022-01-05T10:22:46Z,2022-01-05T10:22:50Z,MERGED,True,161,81,5,https://github.com/matt335672,RFX : Support large screens,4,[],https://github.com/neutrinolabs/xrdp/pull/2087,https://github.com/matt335672,4,https://github.com/neutrinolabs/xrdp/pull/2087#issuecomment-999500443,"Fixes #2068
Many thanks to @trishume for supplying the greater part of this code.
There are two commits in this code. The first makes the max size for a fastpath surface update PDU potentially much bigger if the client has a large display. This approach is taken by freerdp, and has already been validated as part of #2068. An upper limit is placed on this value to prevent runaway memory allocations.
The second is a patch supplied by @trishume. This patch also depends on a change to the librfxcodec repository, as the interface between the two packages has altered. I've tested this patch on my own setup by setting the max size for the fastpath update PDU to a small value (1MB).","I found a small memory over-allocation in the RFX encoder setup, but this is now also fixed. I've also merged in a small change to librfxcodec which calculates the maximum tile size in a more explicit manner.
Barring the as-yet-unduplicated problem that @RolKau has reported in #2068 (which we can look at later) I think this is ready for v0.9.18. More testing still welcome.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2087,2021-12-15T11:42:13Z,2022-01-05T10:22:46Z,2022-01-05T10:22:50Z,MERGED,True,161,81,5,https://github.com/matt335672,RFX : Support large screens,4,[],https://github.com/neutrinolabs/xrdp/pull/2087,https://github.com/Nexarian,5,https://github.com/neutrinolabs/xrdp/pull/2087#issuecomment-999724041,"Fixes #2068
Many thanks to @trishume for supplying the greater part of this code.
There are two commits in this code. The first makes the max size for a fastpath surface update PDU potentially much bigger if the client has a large display. This approach is taken by freerdp, and has already been validated as part of #2068. An upper limit is placed on this value to prevent runaway memory allocations.
The second is a patch supplied by @trishume. This patch also depends on a change to the librfxcodec repository, as the interface between the two packages has altered. I've tested this patch on my own setup by setting the max size for the fastpath update PDU to a small value (1MB).","On comment -- You've included limits.h in some of the files, yet still hard code numbers like 1024 and 16384 -- I understand those numbers aren't in limits.h, but they still feel pretty standard to me. I wonder if we should create an ""XRDP_LIMITS.H"" file or some sort that has all of these included so we don't need to continue to be so verbose.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2087,2021-12-15T11:42:13Z,2022-01-05T10:22:46Z,2022-01-05T10:22:50Z,MERGED,True,161,81,5,https://github.com/matt335672,RFX : Support large screens,4,[],https://github.com/neutrinolabs/xrdp/pull/2087,https://github.com/matt335672,6,https://github.com/neutrinolabs/xrdp/pull/2087#issuecomment-1000317472,"Fixes #2068
Many thanks to @trishume for supplying the greater part of this code.
There are two commits in this code. The first makes the max size for a fastpath surface update PDU potentially much bigger if the client has a large display. This approach is taken by freerdp, and has already been validated as part of #2068. An upper limit is placed on this value to prevent runaway memory allocations.
The second is a patch supplied by @trishume. This patch also depends on a change to the librfxcodec repository, as the interface between the two packages has altered. I've tested this patch on my own setup by setting the max size for the fastpath update PDU to a small value (1MB).","Thanks.
Explicit constants from MS specs (e.g. [MS-RPBCGR]) should be in an include file which has the name name as the spec. There's also xrdp_constants.h where we can put things which don't belong there, if we feel there's a need.
Are you referring to the 16384 in this line?
result = x_tiles * y_tiles * 16384;
I can be more explicit about this value if you like. It's taken from this snippet in FreeRDP:-
https://github.com/FreeRDP/FreeRDP/blob/98348ef62aff75a26ee2824b96a8a196de63f273/libfreerdp/core/capabilities.c#L2495-L2510
essentially it's allowing 32 bits for each pixel of a 64x64 tile.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2088,2021-12-16T01:45:02Z,2021-12-23T05:22:19Z,2021-12-25T09:38:00Z,MERGED,True,1,1,1,https://github.com/kenhys,Use LOG instead of LOG_DEVEL,1,[],https://github.com/neutrinolabs/xrdp/pull/2088,https://github.com/kenhys,1,https://github.com/neutrinolabs/xrdp/pull/2088,"According to https://github.com/neutrinolabs/xrdp/wiki/Logging,
it may be better to emit this log message because this log is
useful for system administrator to know whether RestrictOutboundClipboard
configuration works or not","According to https://github.com/neutrinolabs/xrdp/wiki/Logging,
it may be better to emit this log message because this log is
useful for system administrator to know whether RestrictOutboundClipboard
configuration works or not",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2088,2021-12-16T01:45:02Z,2021-12-23T05:22:19Z,2021-12-25T09:38:00Z,MERGED,True,1,1,1,https://github.com/kenhys,Use LOG instead of LOG_DEVEL,1,[],https://github.com/neutrinolabs/xrdp/pull/2088,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/2088#issuecomment-995367595,"According to https://github.com/neutrinolabs/xrdp/wiki/Logging,
it may be better to emit this log message because this log is
useful for system administrator to know whether RestrictOutboundClipboard
configuration works or not",Agreed.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2088,2021-12-16T01:45:02Z,2021-12-23T05:22:19Z,2021-12-25T09:38:00Z,MERGED,True,1,1,1,https://github.com/kenhys,Use LOG instead of LOG_DEVEL,1,[],https://github.com/neutrinolabs/xrdp/pull/2088,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/2088#issuecomment-995430608,"According to https://github.com/neutrinolabs/xrdp/wiki/Logging,
it may be better to emit this log message because this log is
useful for system administrator to know whether RestrictOutboundClipboard
configuration works or not","BTW, you can also promote the log level if needed.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2088,2021-12-16T01:45:02Z,2021-12-23T05:22:19Z,2021-12-25T09:38:00Z,MERGED,True,1,1,1,https://github.com/kenhys,Use LOG instead of LOG_DEVEL,1,[],https://github.com/neutrinolabs/xrdp/pull/2088,https://github.com/matt335672,4,https://github.com/neutrinolabs/xrdp/pull/2088#issuecomment-997813052,"According to https://github.com/neutrinolabs/xrdp/wiki/Logging,
it may be better to emit this log message because this log is
useful for system administrator to know whether RestrictOutboundClipboard
configuration works or not",I agree - a level of DEBUG seems to low to me. INFO would be better I think.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2088,2021-12-16T01:45:02Z,2021-12-23T05:22:19Z,2021-12-25T09:38:00Z,MERGED,True,1,1,1,https://github.com/kenhys,Use LOG instead of LOG_DEVEL,1,[],https://github.com/neutrinolabs/xrdp/pull/2088,https://github.com/metalefty,5,https://github.com/neutrinolabs/xrdp/pull/2088#issuecomment-1000004840,"According to https://github.com/neutrinolabs/xrdp/wiki/Logging,
it may be better to emit this log message because this log is
useful for system administrator to know whether RestrictOutboundClipboard
configuration works or not",@kenhys Can you promote the log level to INFO? Then we'll merge this PR soon.,True,{'THUMBS_UP': ['https://github.com/matt335672']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2088,2021-12-16T01:45:02Z,2021-12-23T05:22:19Z,2021-12-25T09:38:00Z,MERGED,True,1,1,1,https://github.com/kenhys,Use LOG instead of LOG_DEVEL,1,[],https://github.com/neutrinolabs/xrdp/pull/2088,https://github.com/kenhys,6,https://github.com/neutrinolabs/xrdp/pull/2088#issuecomment-1000026473,"According to https://github.com/neutrinolabs/xrdp/wiki/Logging,
it may be better to emit this log message because this log is
useful for system administrator to know whether RestrictOutboundClipboard
configuration works or not","@metalefty
Fixed.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2098,2021-12-27T13:03:12Z,2022-01-05T09:25:06Z,2022-03-19T09:09:54Z,MERGED,True,0,2,1,https://github.com/matt335672,Remove unused declaration for xrdp_wm_drdynvc_up,1,[],https://github.com/neutrinolabs/xrdp/pull/2098,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/2098,"Fixes #2097
This declaration appears to be a typo, and is completely unused, both now and in the past.","Fixes #2097
This declaration appears to be a typo, and is completely unused, both now and in the past.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2099,2021-12-29T14:08:23Z,,2022-01-10T20:03:00Z,OPEN,False,104,23,13,https://github.com/hg-sepag,Added clientname to session policy and environment,1,[],https://github.com/neutrinolabs/xrdp/pull/2099,https://github.com/hg-sepag,1,https://github.com/neutrinolabs/xrdp/pull/2099,"Upon reconnect, we needed to determine the correct running session by clientname rather than by IP number because clients may connect via service with dynamic IPs or from different clients over the same IP (NAT). Also i made available the clientname as an environment variable CLIENTNAME inside the session.
The changes consist mainly of looping through of clientname from rdp into the session.","Upon reconnect, we needed to determine the correct running session by clientname rather than by IP number because clients may connect via service with dynamic IPs or from different clients over the same IP (NAT). Also i made available the clientname as an environment variable CLIENTNAME inside the session.
The changes consist mainly of looping through of clientname from rdp into the session.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2099,2021-12-29T14:08:23Z,,2022-01-10T20:03:00Z,OPEN,False,104,23,13,https://github.com/hg-sepag,Added clientname to session policy and environment,1,[],https://github.com/neutrinolabs/xrdp/pull/2099,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/2099#issuecomment-1002973465,"Upon reconnect, we needed to determine the correct running session by clientname rather than by IP number because clients may connect via service with dynamic IPs or from different clients over the same IP (NAT). Also i made available the clientname as an environment variable CLIENTNAME inside the session.
The changes consist mainly of looping through of clientname from rdp into the session.","Thanks for this, @hg-sepag
I've had a quick look through this, and it certainly like a worthwhile addition to me.
We are, however, just about to pull v0.9.18 together, and either as part of this (or shortly after) we will be merging #2011 which is going to cause some quite important changes to the SCP code. As I'm sure you're aware, this is an area of xrdp which needs quite a bit of work. #2011 is the first of a series of changes that will make SCP a lot easier to work with.
#2011 will break your code here, but it will be a simple matter to fix. At that point we can have a serious go at merging this.
A couple of other observations for you in the meantime:-

You'll need to change the value of CLIENT_INFO_CURRENT_VERSION in common/xrdp_client_info.h. There's a comment in that file here which explains that.
The comment about the Policy variable in sesman/sesman.ini.in will need updating.
The manpage template docs/man/sesman.ini.5.in will need updating.
I'm not so sure adding the CLIENTNAME to the session is a good idea, as for use-cases other than yours, the client can change between connections, or even there there at all. In the longer-term, it will be possible to query sesman to get the information directly, but we aren't there yet for the reasons I've outlined above.

Does that make sense? Happy to chat about any of the above.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2099,2021-12-29T14:08:23Z,,2022-01-10T20:03:00Z,OPEN,False,104,23,13,https://github.com/hg-sepag,Added clientname to session policy and environment,1,[],https://github.com/neutrinolabs/xrdp/pull/2099,https://github.com/hg-sepag,3,https://github.com/neutrinolabs/xrdp/pull/2099#issuecomment-1008940495,"Upon reconnect, we needed to determine the correct running session by clientname rather than by IP number because clients may connect via service with dynamic IPs or from different clients over the same IP (NAT). Also i made available the clientname as an environment variable CLIENTNAME inside the session.
The changes consist mainly of looping through of clientname from rdp into the session.","Hello @matt335672 ,
thank you for your comments. Sorry to answer so late, but immediatly after this pull request i went on holiday :-)

1. You'll need to change the value of CLIENT_INFO_CURRENT_VERSION in common/xrdp_client_info.h. There's a comment in that file here which explains that.
2. The comment about the Policy variable in sesman/sesman.ini.in will need updating.
3. The manpage template docs/man/sesman.ini.5.in will need updating.

This all is quite clear, i simply did not know and will do it in the next couple of days.

4. I'm not so sure adding the CLIENTNAME to the session is a good idea, as for use-cases other than yours, the client can change between connections, or even there there at all. In the longer-term, it will be possible to query sesman to get the information directly, but we aren't there yet for the reasons I've outlined above.

This behavior is similar to M$ Windows: here %CLIENTNAME% is also set at logon via RDP. It is true that our use case is probably special, but i think the same is true for the other session allocation policies except ""per user"".",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2099,2021-12-29T14:08:23Z,,2022-01-10T20:03:00Z,OPEN,False,104,23,13,https://github.com/hg-sepag,Added clientname to session policy and environment,1,[],https://github.com/neutrinolabs/xrdp/pull/2099,https://github.com/matt335672,4,https://github.com/neutrinolabs/xrdp/pull/2099#issuecomment-1009295236,"Upon reconnect, we needed to determine the correct running session by clientname rather than by IP number because clients may connect via service with dynamic IPs or from different clients over the same IP (NAT). Also i made available the clientname as an environment variable CLIENTNAME inside the session.
The changes consist mainly of looping through of clientname from rdp into the session.","Hi @hg-sepag
Thanks for the reply. Definitely worth putting in a PR before having a holiday - nothing much happens for a few days anyway :-)
About my comment 1 - with more thought on my part it's probably better to just more the member declaration further down in the file to somewhere below the 'private to xrdp' comment. That way, the change will work without needing to also recompile xorgxrdp, if you're using that.
I take your point about the %CLIENTNAME% compatibility - I've just reproduced this myself on a Win 10 target. I'm happy with your justification, but we can put the point to the rest of the team when the PR is re-worked.
#2011 is now merged. As a result, all the SCP V0 code is in one place so when you re-work the PR you will need to consider what to do about the sesrun utility, as this will now fail to compile when you modify SCP. You've already got the clientname string as an optional part of the protocol, so you may also need to test for a non-null value before setting the CLIENTNAME environment variable.
Hope that makes sense - it's getting late here so it may not do. Let me know if you have any questions.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2105,2022-01-04T10:17:00Z,2022-01-05T09:23:24Z,2022-03-19T09:09:50Z,MERGED,True,1,1,1,https://github.com/matt335672,Fix gcc11.1 uninitialised var warning,1,[],https://github.com/neutrinolabs/xrdp/pull/2105,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/2105,"Fixes #2103
For a discussion, see #2103","Fixes #2103
For a discussion, see #2103",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2105,2022-01-04T10:17:00Z,2022-01-05T09:23:24Z,2022-03-19T09:09:50Z,MERGED,True,1,1,1,https://github.com/matt335672,Fix gcc11.1 uninitialised var warning,1,[],https://github.com/neutrinolabs/xrdp/pull/2105,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/2105#issuecomment-1005290552,"Fixes #2103
For a discussion, see #2103",Let's ship this quite simple fix to the v0.9.18 release.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2106,2022-01-05T11:19:40Z,2022-01-05T11:27:51Z,2022-01-05T11:27:54Z,MERGED,True,1,1,1,https://github.com/matt335672,Merge in librfxcodec #49,1,[],https://github.com/neutrinolabs/xrdp/pull/2106,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/2106,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2109,2022-01-07T01:54:26Z,2022-01-11T00:19:22Z,2022-01-11T00:19:25Z,MERGED,True,58,1,2,https://github.com/metalefty,Release v0.9.18,2,[],https://github.com/neutrinolabs/xrdp/pull/2109,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/2109,TODO: Set release date,TODO: Set release date,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2109,2022-01-07T01:54:26Z,2022-01-11T00:19:22Z,2022-01-11T00:19:25Z,MERGED,True,58,1,2,https://github.com/metalefty,Release v0.9.18,2,[],https://github.com/neutrinolabs/xrdp/pull/2109,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/2109#issuecomment-1007252626,TODO: Set release date,"Since I've released librfxcodec 0.1.6, the submodule also needs to be updated to refer the commit.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2109,2022-01-07T01:54:26Z,2022-01-11T00:19:22Z,2022-01-11T00:19:25Z,MERGED,True,58,1,2,https://github.com/metalefty,Release v0.9.18,2,[],https://github.com/neutrinolabs/xrdp/pull/2109,https://github.com/matt335672,3,https://github.com/neutrinolabs/xrdp/pull/2109#issuecomment-1007362593,TODO: Set release date,All looks good to me. Submodule updated now.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2110,2022-01-07T12:08:31Z,2022-01-07T12:14:45Z,2022-01-07T12:14:48Z,MERGED,True,1,1,1,https://github.com/matt335672,Bump librfxcodec version to v0.1.6,1,[],https://github.com/neutrinolabs/xrdp/pull/2110,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/2110,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2118,2022-01-12T11:48:16Z,2022-01-13T10:23:15Z,2022-01-13T10:23:19Z,MERGED,True,1,1,1,https://github.com/matt335672,Support imlib2 on RHEL 7,1,[],https://github.com/neutrinolabs/xrdp/pull/2118,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/2118,"Slightly late here, but after this comment from @bensilea, I realised I hadn't considered the still active RHEL 7 for imlib2 support.
This PR fixes that. As an example, with these changes to /etc/xrdp/xrdp.ini on a stock CentOS 7 install:-
ls_background_image=/usr/share/backgrounds/default.jpg
ls_background_transform=zoom

ls_logo_filename=/usr/share/pixmaps/fedora-logo-sprite.png
ls_logo_transform=scale
ls_logo_width=140
ls_logo_height=140

I can get this login screen:-

As I remarked to @bensilea, you'll need to compile with CFLAGS=""-Wno-error=missing-braces"" on RHEL 7 which is something I picked up from @bsmojver
Bojan - sorry this is late. Any good to you?","Slightly late here, but after this comment from @bensilea, I realised I hadn't considered the still active RHEL 7 for imlib2 support.
This PR fixes that. As an example, with these changes to /etc/xrdp/xrdp.ini on a stock CentOS 7 install:-
ls_background_image=/usr/share/backgrounds/default.jpg
ls_background_transform=zoom

ls_logo_filename=/usr/share/pixmaps/fedora-logo-sprite.png
ls_logo_transform=scale
ls_logo_width=140
ls_logo_height=140

I can get this login screen:-

As I remarked to @bensilea, you'll need to compile with CFLAGS=""-Wno-error=missing-braces"" on RHEL 7 which is something I picked up from @bsmojver
Bojan - sorry this is late. Any good to you?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2118,2022-01-12T11:48:16Z,2022-01-13T10:23:15Z,2022-01-13T10:23:19Z,MERGED,True,1,1,1,https://github.com/matt335672,Support imlib2 on RHEL 7,1,[],https://github.com/neutrinolabs/xrdp/pull/2118,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/2118#issuecomment-1010963545,"Slightly late here, but after this comment from @bensilea, I realised I hadn't considered the still active RHEL 7 for imlib2 support.
This PR fixes that. As an example, with these changes to /etc/xrdp/xrdp.ini on a stock CentOS 7 install:-
ls_background_image=/usr/share/backgrounds/default.jpg
ls_background_transform=zoom

ls_logo_filename=/usr/share/pixmaps/fedora-logo-sprite.png
ls_logo_transform=scale
ls_logo_width=140
ls_logo_height=140

I can get this login screen:-

As I remarked to @bensilea, you'll need to compile with CFLAGS=""-Wno-error=missing-braces"" on RHEL 7 which is something I picked up from @bsmojver
Bojan - sorry this is late. Any good to you?","As a postscript, the imlib2 unit tests run on CentOS 7, but a lot of massaging is required to get them working with the old version of the check library.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2118,2022-01-12T11:48:16Z,2022-01-13T10:23:15Z,2022-01-13T10:23:19Z,MERGED,True,1,1,1,https://github.com/matt335672,Support imlib2 on RHEL 7,1,[],https://github.com/neutrinolabs/xrdp/pull/2118,https://github.com/bsmojver,3,https://github.com/neutrinolabs/xrdp/pull/2118#issuecomment-1010970948,"Slightly late here, but after this comment from @bensilea, I realised I hadn't considered the still active RHEL 7 for imlib2 support.
This PR fixes that. As an example, with these changes to /etc/xrdp/xrdp.ini on a stock CentOS 7 install:-
ls_background_image=/usr/share/backgrounds/default.jpg
ls_background_transform=zoom

ls_logo_filename=/usr/share/pixmaps/fedora-logo-sprite.png
ls_logo_transform=scale
ls_logo_width=140
ls_logo_height=140

I can get this login screen:-

As I remarked to @bensilea, you'll need to compile with CFLAGS=""-Wno-error=missing-braces"" on RHEL 7 which is something I picked up from @bsmojver
Bojan - sorry this is late. Any good to you?","I added that option to rhel7 build, because there seems to be a gcc bug present around that. I also disabled imlib2 on rhel7/8, because it was not getting detected correctly. I didn't really have time to find out why when I was building stuff.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2118,2022-01-12T11:48:16Z,2022-01-13T10:23:15Z,2022-01-13T10:23:19Z,MERGED,True,1,1,1,https://github.com/matt335672,Support imlib2 on RHEL 7,1,[],https://github.com/neutrinolabs/xrdp/pull/2118,https://github.com/matt335672,4,https://github.com/neutrinolabs/xrdp/pull/2118#issuecomment-1010997441,"Slightly late here, but after this comment from @bensilea, I realised I hadn't considered the still active RHEL 7 for imlib2 support.
This PR fixes that. As an example, with these changes to /etc/xrdp/xrdp.ini on a stock CentOS 7 install:-
ls_background_image=/usr/share/backgrounds/default.jpg
ls_background_transform=zoom

ls_logo_filename=/usr/share/pixmaps/fedora-logo-sprite.png
ls_logo_transform=scale
ls_logo_width=140
ls_logo_height=140

I can get this login screen:-

As I remarked to @bensilea, you'll need to compile with CFLAGS=""-Wno-error=missing-braces"" on RHEL 7 which is something I picked up from @bsmojver
Bojan - sorry this is late. Any good to you?","That's my mistake, for which I apologise. I should have tested with RHEL 7 as well as some ancient Debian versions. I'm pretty sure the other problem is a gcc bug which I've looked to in the conversation with @bensilea.
I tested on RHEL 7 by adding patch8 (i.e. this change) to your new spec file and running an autoreconf after the patches were applied. I removed the checks to disable imlib2 as well.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2119,2022-01-14T12:41:04Z,2022-01-14T12:47:36Z,2022-01-14T12:47:40Z,MERGED,True,1,1,1,https://github.com/matt335672,Fix typo in README.md,1,[],https://github.com/neutrinolabs/xrdp/pull/2119,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/2119,Fixes #1492,Fixes #1492,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2123,2022-01-17T10:58:41Z,2022-01-18T14:29:11Z,2022-01-18T14:29:25Z,MERGED,True,1,1,1,https://github.com/matt335672,README : Make latest version dynamic,1,[],https://github.com/neutrinolabs/xrdp/pull/2123,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/2123,"Following a comment by @TOMATO-ONE, make the version label in README.md dynamic.
Page now looks like this:-
https://github.com/matt335672/xrdp/blob/update_ver/README.md","Following a comment by @TOMATO-ONE, make the version label in README.md dynamic.
Page now looks like this:-
https://github.com/matt335672/xrdp/blob/update_ver/README.md",True,{'THUMBS_UP': ['https://github.com/TOMATO-ONE']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2124,2022-01-19T12:12:46Z,2022-01-31T09:34:52Z,2022-01-31T09:34:57Z,MERGED,True,10,5,5,https://github.com/matt335672,Fix problems with check 0.15.2 (F36),1,[],https://github.com/neutrinolabs/xrdp/pull/2124,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/2124,"While investigating #2121, I found that make check did not work on Fedora 36
The problem seems to be caused by /usr/include/check_stdint.h (included by /usr/include/check.h). This contains the following code:-
/* Imported CMake variables created during build. */
#define HAVE_STDINT_H 1

#ifdef HAVE_STDINT_H
#define _STDINT_HAVE_STDINT_H 1
#include <stdint.h>
#undef HAVE_STDINT_H
#endif /* defined HAVE_STDINT_H */

If check.h is included before common/arch.h this then leads to problems, as the latter file is expecting HAVE_STDINT_H to be defined.
This PR works around the problem by making sure check.h is defined after arch.h","While investigating #2121, I found that make check did not work on Fedora 36
The problem seems to be caused by /usr/include/check_stdint.h (included by /usr/include/check.h). This contains the following code:-
/* Imported CMake variables created during build. */
#define HAVE_STDINT_H 1

#ifdef HAVE_STDINT_H
#define _STDINT_HAVE_STDINT_H 1
#include <stdint.h>
#undef HAVE_STDINT_H
#endif /* defined HAVE_STDINT_H */

If check.h is included before common/arch.h this then leads to problems, as the latter file is expecting HAVE_STDINT_H to be defined.
This PR works around the problem by making sure check.h is defined after arch.h",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2130,2022-01-20T17:36:20Z,2022-01-31T09:39:21Z,2022-03-19T09:09:43Z,MERGED,True,1559,122,22,https://github.com/matt335672,OpenSSL3 fixes,9,[],https://github.com/neutrinolabs/xrdp/pull/2130,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/2130,"Fixes #2121
Depends on #2124 and tested on Fedora 36.
Apart from the commit which is part of #2124, there are four commits in this PR:-

the first adds const correctness to a couple of calls in the SSL module.
the second adds some missing ssl_sha1_clear() and ssl_md5_clear() calls to the main xrdp code. Not having these calls in the original code isn't causing any problems at the moment, but it will do for OpenSSL 3.x
The 3rd adds unit tests for the existing SSL calls.
The last one removes all the deprecated calls if OpenSSL 3 is being used.

There are a couple of notes regarding the new OpenSSL 3 library interfaces:-

Access to the lower-level cipher/digest-specific functions is deprecated, and will be removed in the future. Everything has to go through higher level EVP (or 'envelope') interfaces which provide a uniform interface for each family of cryptographic functions.
Ciphers and digests are provided in libraries called 'providers'. One of these providers (the 'legacy' provider) is used for algorithms now considered to be insecure. The following are significant points regarding the legacy provider:-

A distribution may choose not to provide the legacy provider at all
The legacy provider may not be loaded by default.
Once an algorithm is in the legacy provider it could be dropped in a future release.
RC4 is currently in the legacy provider. MD5 and 3DES aren't.



Because the legacy provider can't be relied on, I've provided an RC4 implementation directly within the ssl module when OpenSSL 3 is used. This probably won't be as performant as the legacy provider RC4, but it is guaranteed to be there. In any case it will only be used if a TLS connection is not established for the session. This implementation is thoroughly tested in the test suite!
Also worthy of note is that I've dropped the custom parameters used for ephemeral Diffie-Hellman for OpenSSL 3. The recommendation on this is to use SSL_CTX_set_dh_auto() rather than setting your own values.","Fixes #2121
Depends on #2124 and tested on Fedora 36.
Apart from the commit which is part of #2124, there are four commits in this PR:-

the first adds const correctness to a couple of calls in the SSL module.
the second adds some missing ssl_sha1_clear() and ssl_md5_clear() calls to the main xrdp code. Not having these calls in the original code isn't causing any problems at the moment, but it will do for OpenSSL 3.x
The 3rd adds unit tests for the existing SSL calls.
The last one removes all the deprecated calls if OpenSSL 3 is being used.

There are a couple of notes regarding the new OpenSSL 3 library interfaces:-

Access to the lower-level cipher/digest-specific functions is deprecated, and will be removed in the future. Everything has to go through higher level EVP (or 'envelope') interfaces which provide a uniform interface for each family of cryptographic functions.
Ciphers and digests are provided in libraries called 'providers'. One of these providers (the 'legacy' provider) is used for algorithms now considered to be insecure. The following are significant points regarding the legacy provider:-

A distribution may choose not to provide the legacy provider at all
The legacy provider may not be loaded by default.
Once an algorithm is in the legacy provider it could be dropped in a future release.
RC4 is currently in the legacy provider. MD5 and 3DES aren't.



Because the legacy provider can't be relied on, I've provided an RC4 implementation directly within the ssl module when OpenSSL 3 is used. This probably won't be as performant as the legacy provider RC4, but it is guaranteed to be there. In any case it will only be used if a TLS connection is not established for the session. This implementation is thoroughly tested in the test suite!
Also worthy of note is that I've dropped the custom parameters used for ephemeral Diffie-Hellman for OpenSSL 3. The recommendation on this is to use SSL_CTX_set_dh_auto() rather than setting your own values.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2130,2022-01-20T17:36:20Z,2022-01-31T09:39:21Z,2022-03-19T09:09:43Z,MERGED,True,1559,122,22,https://github.com/matt335672,OpenSSL3 fixes,9,[],https://github.com/neutrinolabs/xrdp/pull/2130,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/2130#issuecomment-1018231286,"Fixes #2121
Depends on #2124 and tested on Fedora 36.
Apart from the commit which is part of #2124, there are four commits in this PR:-

the first adds const correctness to a couple of calls in the SSL module.
the second adds some missing ssl_sha1_clear() and ssl_md5_clear() calls to the main xrdp code. Not having these calls in the original code isn't causing any problems at the moment, but it will do for OpenSSL 3.x
The 3rd adds unit tests for the existing SSL calls.
The last one removes all the deprecated calls if OpenSSL 3 is being used.

There are a couple of notes regarding the new OpenSSL 3 library interfaces:-

Access to the lower-level cipher/digest-specific functions is deprecated, and will be removed in the future. Everything has to go through higher level EVP (or 'envelope') interfaces which provide a uniform interface for each family of cryptographic functions.
Ciphers and digests are provided in libraries called 'providers'. One of these providers (the 'legacy' provider) is used for algorithms now considered to be insecure. The following are significant points regarding the legacy provider:-

A distribution may choose not to provide the legacy provider at all
The legacy provider may not be loaded by default.
Once an algorithm is in the legacy provider it could be dropped in a future release.
RC4 is currently in the legacy provider. MD5 and 3DES aren't.



Because the legacy provider can't be relied on, I've provided an RC4 implementation directly within the ssl module when OpenSSL 3 is used. This probably won't be as performant as the legacy provider RC4, but it is guaranteed to be there. In any case it will only be used if a TLS connection is not established for the session. This implementation is thoroughly tested in the test suite!
Also worthy of note is that I've dropped the custom parameters used for ephemeral Diffie-Hellman for OpenSSL 3. The recommendation on this is to use SSL_CTX_set_dh_auto() rather than setting your own values.","Thank you so much.
BTW, I remember when I tried to compile xrdp with wolfssl. wolfssl has a compatibility layer with OpenSSL however RC4 related functions are lacking. I think this PR may enable to build of xrdp with wolfssl.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2130,2022-01-20T17:36:20Z,2022-01-31T09:39:21Z,2022-03-19T09:09:43Z,MERGED,True,1559,122,22,https://github.com/matt335672,OpenSSL3 fixes,9,[],https://github.com/neutrinolabs/xrdp/pull/2130,https://github.com/matt335672,3,https://github.com/neutrinolabs/xrdp/pull/2130#issuecomment-1018411561,"Fixes #2121
Depends on #2124 and tested on Fedora 36.
Apart from the commit which is part of #2124, there are four commits in this PR:-

the first adds const correctness to a couple of calls in the SSL module.
the second adds some missing ssl_sha1_clear() and ssl_md5_clear() calls to the main xrdp code. Not having these calls in the original code isn't causing any problems at the moment, but it will do for OpenSSL 3.x
The 3rd adds unit tests for the existing SSL calls.
The last one removes all the deprecated calls if OpenSSL 3 is being used.

There are a couple of notes regarding the new OpenSSL 3 library interfaces:-

Access to the lower-level cipher/digest-specific functions is deprecated, and will be removed in the future. Everything has to go through higher level EVP (or 'envelope') interfaces which provide a uniform interface for each family of cryptographic functions.
Ciphers and digests are provided in libraries called 'providers'. One of these providers (the 'legacy' provider) is used for algorithms now considered to be insecure. The following are significant points regarding the legacy provider:-

A distribution may choose not to provide the legacy provider at all
The legacy provider may not be loaded by default.
Once an algorithm is in the legacy provider it could be dropped in a future release.
RC4 is currently in the legacy provider. MD5 and 3DES aren't.



Because the legacy provider can't be relied on, I've provided an RC4 implementation directly within the ssl module when OpenSSL 3 is used. This probably won't be as performant as the legacy provider RC4, but it is guaranteed to be there. In any case it will only be used if a TLS connection is not established for the session. This implementation is thoroughly tested in the test suite!
Also worthy of note is that I've dropped the custom parameters used for ephemeral Diffie-Hellman for OpenSSL 3. The recommendation on this is to use SSL_CTX_set_dh_auto() rather than setting your own values.",I'll have a go and see what happens.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2130,2022-01-20T17:36:20Z,2022-01-31T09:39:21Z,2022-03-19T09:09:43Z,MERGED,True,1559,122,22,https://github.com/matt335672,OpenSSL3 fixes,9,[],https://github.com/neutrinolabs/xrdp/pull/2130,https://github.com/matt335672,4,https://github.com/neutrinolabs/xrdp/pull/2130#issuecomment-1021063646,"Fixes #2121
Depends on #2124 and tested on Fedora 36.
Apart from the commit which is part of #2124, there are four commits in this PR:-

the first adds const correctness to a couple of calls in the SSL module.
the second adds some missing ssl_sha1_clear() and ssl_md5_clear() calls to the main xrdp code. Not having these calls in the original code isn't causing any problems at the moment, but it will do for OpenSSL 3.x
The 3rd adds unit tests for the existing SSL calls.
The last one removes all the deprecated calls if OpenSSL 3 is being used.

There are a couple of notes regarding the new OpenSSL 3 library interfaces:-

Access to the lower-level cipher/digest-specific functions is deprecated, and will be removed in the future. Everything has to go through higher level EVP (or 'envelope') interfaces which provide a uniform interface for each family of cryptographic functions.
Ciphers and digests are provided in libraries called 'providers'. One of these providers (the 'legacy' provider) is used for algorithms now considered to be insecure. The following are significant points regarding the legacy provider:-

A distribution may choose not to provide the legacy provider at all
The legacy provider may not be loaded by default.
Once an algorithm is in the legacy provider it could be dropped in a future release.
RC4 is currently in the legacy provider. MD5 and 3DES aren't.



Because the legacy provider can't be relied on, I've provided an RC4 implementation directly within the ssl module when OpenSSL 3 is used. This probably won't be as performant as the legacy provider RC4, but it is guaranteed to be there. In any case it will only be used if a TLS connection is not established for the session. This implementation is thoroughly tested in the test suite!
Also worthy of note is that I've dropped the custom parameters used for ephemeral Diffie-Hellman for OpenSSL 3. The recommendation on this is to use SSL_CTX_set_dh_auto() rather than setting your own values.","Hi @metalefty
That took a little longer than expected, but I've got something working:-
I'm on Ubuntu 20.04 LTS which comes with WolfSSL:-
$ dpkg -l libwolf\*
Desired=Unknown/Install/Remove/Purge/Hold
| Status=Not/Inst/Conf-files/Unpacked/halF-conf/Half-inst/trig-aWait/Trig-pend
|/ Err?=(none)/Reinst-required (Status,Err: uppercase=bad)
||/ Name                 Version      Architecture Description
+++-====================-============-============-============================>
ii  libwolfssl-dev:amd64 4.3.0+dfsg-2 amd64        Development files for the wo>
ii  libwolfssl24:amd64   4.3.0+dfsg-2 amd64        wolfSSL encryption library
mjb@wolfssl:~/xrdp$ xrdp -v
xrdp 0.9.18
  A Remote Desktop Protocol Server.
  Copyright (C) 2004-2020 Jay Sorg, Neutrino Labs, and all contributors.
  See https://github.com/neutrinolabs/xrdp for more information.

  Configure options:
      OPENSSL_CFLAGS=-I/usr/include/wolfssl -DWC_NO_HARDEN -DHAVE_WOLFSSL
      OPENSSL_LIBS=-lwolfssl

  Compiled with SSLeay wolfSSL compatibility

I can successfully make TLS and RC4-based connections to xrdp from freerdp and Windows 10 mstsc.exe. In TLS mode, freerdp uses TLS_AES_128_GCM_SHA256 (TLS 1.3) and Windows uses TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 (TLS 1.2)
Quite a few changes were needed to common/ssl_calls.c to get this to work:-

DH_set0_pqg() needs to be defined, as this isn't a default.
The options SSL_OP_NO_SSLv2, SSL_OP_TLS_BLOCK_PADDING_BUG, SSL_MODE_ENABLE_PARTIAL_WRITE are not supported.
struct ssl_st and struct ssl_ctx_st need to be replaced with SSL and SSL_CTX. This means moving the definition of struct ssl_tls out of common/ssl_calls.h into common/ssl_calls.c, and replacing it with an incomplete type declaration struct ssl_tls;

Other observations:-

There's an unnecessary dependency on openssl in common/base64.h
Access into struct ssl_tls is assumed in common/trans.h. This can be fixed pretty simply.
keygen/Makefile.am uses the openssl command to install an RSA key and certificate.
RC4 works perfectly well in this configuration - the additional code is not required.

I think it's worth fixing the base64 dependency (and adding some unit tests), and fixing the wrapping of struct ssl_tls. Both of these changes put all the openssl dependencies in one place. Then, if we think it's worth it, we could add support for WolfSSL in compatibility mode as above, or we could even write native modules to replace the OpenSSL one.
What do you think? Is there likely to be a demand for this?
Thanks",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2130,2022-01-20T17:36:20Z,2022-01-31T09:39:21Z,2022-03-19T09:09:43Z,MERGED,True,1559,122,22,https://github.com/matt335672,OpenSSL3 fixes,9,[],https://github.com/neutrinolabs/xrdp/pull/2130,https://github.com/metalefty,5,https://github.com/neutrinolabs/xrdp/pull/2130#issuecomment-1023914110,"Fixes #2121
Depends on #2124 and tested on Fedora 36.
Apart from the commit which is part of #2124, there are four commits in this PR:-

the first adds const correctness to a couple of calls in the SSL module.
the second adds some missing ssl_sha1_clear() and ssl_md5_clear() calls to the main xrdp code. Not having these calls in the original code isn't causing any problems at the moment, but it will do for OpenSSL 3.x
The 3rd adds unit tests for the existing SSL calls.
The last one removes all the deprecated calls if OpenSSL 3 is being used.

There are a couple of notes regarding the new OpenSSL 3 library interfaces:-

Access to the lower-level cipher/digest-specific functions is deprecated, and will be removed in the future. Everything has to go through higher level EVP (or 'envelope') interfaces which provide a uniform interface for each family of cryptographic functions.
Ciphers and digests are provided in libraries called 'providers'. One of these providers (the 'legacy' provider) is used for algorithms now considered to be insecure. The following are significant points regarding the legacy provider:-

A distribution may choose not to provide the legacy provider at all
The legacy provider may not be loaded by default.
Once an algorithm is in the legacy provider it could be dropped in a future release.
RC4 is currently in the legacy provider. MD5 and 3DES aren't.



Because the legacy provider can't be relied on, I've provided an RC4 implementation directly within the ssl module when OpenSSL 3 is used. This probably won't be as performant as the legacy provider RC4, but it is guaranteed to be there. In any case it will only be used if a TLS connection is not established for the session. This implementation is thoroughly tested in the test suite!
Also worthy of note is that I've dropped the custom parameters used for ephemeral Diffie-Hellman for OpenSSL 3. The recommendation on this is to use SSL_CTX_set_dh_auto() rather than setting your own values.","Thanks for the observation.
Actually, there's no actual demand for xrdp with wolfssl so far.
It was a long time ago, so I don't remember much about it. I just tried some SSL libraries when I add FreeBSD CI with CircleCI. In xrdp, OpenSSL can be replaced with LibreSSL. So I tried wolfssl as another SSL library. It is worth supporting wolfssl but nobody asked ""does xrdp support wolfssl?"" so far. We don't need to rush to support wolfssl.
Can you fix other points found by your observation?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2130,2022-01-20T17:36:20Z,2022-01-31T09:39:21Z,2022-03-19T09:09:43Z,MERGED,True,1559,122,22,https://github.com/matt335672,OpenSSL3 fixes,9,[],https://github.com/neutrinolabs/xrdp/pull/2130,https://github.com/metalefty,6,https://github.com/neutrinolabs/xrdp/pull/2130#issuecomment-1023916891,"Fixes #2121
Depends on #2124 and tested on Fedora 36.
Apart from the commit which is part of #2124, there are four commits in this PR:-

the first adds const correctness to a couple of calls in the SSL module.
the second adds some missing ssl_sha1_clear() and ssl_md5_clear() calls to the main xrdp code. Not having these calls in the original code isn't causing any problems at the moment, but it will do for OpenSSL 3.x
The 3rd adds unit tests for the existing SSL calls.
The last one removes all the deprecated calls if OpenSSL 3 is being used.

There are a couple of notes regarding the new OpenSSL 3 library interfaces:-

Access to the lower-level cipher/digest-specific functions is deprecated, and will be removed in the future. Everything has to go through higher level EVP (or 'envelope') interfaces which provide a uniform interface for each family of cryptographic functions.
Ciphers and digests are provided in libraries called 'providers'. One of these providers (the 'legacy' provider) is used for algorithms now considered to be insecure. The following are significant points regarding the legacy provider:-

A distribution may choose not to provide the legacy provider at all
The legacy provider may not be loaded by default.
Once an algorithm is in the legacy provider it could be dropped in a future release.
RC4 is currently in the legacy provider. MD5 and 3DES aren't.



Because the legacy provider can't be relied on, I've provided an RC4 implementation directly within the ssl module when OpenSSL 3 is used. This probably won't be as performant as the legacy provider RC4, but it is guaranteed to be there. In any case it will only be used if a TLS connection is not established for the session. This implementation is thoroughly tested in the test suite!
Also worthy of note is that I've dropped the custom parameters used for ephemeral Diffie-Hellman for OpenSSL 3. The recommendation on this is to use SSL_CTX_set_dh_auto() rather than setting your own values.","BTW, If we once add wolfssl support, will it be hard work to maintain compatibility both with OpenSSL and wolfssl?
See also: SoftEtherVPN/SoftEtherVPN#1421
Once I added LibreSSL CI for SoftEtherVPN however, OpenSSL and LibreSSL are walking different paths, so they decided to stick to OpenSSL rather than supporting both.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2130,2022-01-20T17:36:20Z,2022-01-31T09:39:21Z,2022-03-19T09:09:43Z,MERGED,True,1559,122,22,https://github.com/matt335672,OpenSSL3 fixes,9,[],https://github.com/neutrinolabs/xrdp/pull/2130,https://github.com/matt335672,7,https://github.com/neutrinolabs/xrdp/pull/2130#issuecomment-1024174238,"Fixes #2121
Depends on #2124 and tested on Fedora 36.
Apart from the commit which is part of #2124, there are four commits in this PR:-

the first adds const correctness to a couple of calls in the SSL module.
the second adds some missing ssl_sha1_clear() and ssl_md5_clear() calls to the main xrdp code. Not having these calls in the original code isn't causing any problems at the moment, but it will do for OpenSSL 3.x
The 3rd adds unit tests for the existing SSL calls.
The last one removes all the deprecated calls if OpenSSL 3 is being used.

There are a couple of notes regarding the new OpenSSL 3 library interfaces:-

Access to the lower-level cipher/digest-specific functions is deprecated, and will be removed in the future. Everything has to go through higher level EVP (or 'envelope') interfaces which provide a uniform interface for each family of cryptographic functions.
Ciphers and digests are provided in libraries called 'providers'. One of these providers (the 'legacy' provider) is used for algorithms now considered to be insecure. The following are significant points regarding the legacy provider:-

A distribution may choose not to provide the legacy provider at all
The legacy provider may not be loaded by default.
Once an algorithm is in the legacy provider it could be dropped in a future release.
RC4 is currently in the legacy provider. MD5 and 3DES aren't.



Because the legacy provider can't be relied on, I've provided an RC4 implementation directly within the ssl module when OpenSSL 3 is used. This probably won't be as performant as the legacy provider RC4, but it is guaranteed to be there. In any case it will only be used if a TLS connection is not established for the session. This implementation is thoroughly tested in the test suite!
Also worthy of note is that I've dropped the custom parameters used for ephemeral Diffie-Hellman for OpenSSL 3. The recommendation on this is to use SSL_CTX_set_dh_auto() rather than setting your own values.","Thanks for the update.
I think it might be hard, as if we keep the two stacks in the same module, we'll be struggling to get the macros right with each update. It might be better to look at something like GNU TLS or NSS which has a completely different API. We can then just add an extra separate module to do that.
I've now added the following:-

Improve logging of non-TLS connection levels. I needed this for testing.
Small fix to improve logging for make check
openssl module now completely wrapped.
base64 module re-implemented without openssl dependency. A test suite module has also been added for this.

I think this is probably ready for merging when you're happy with it. We can consider adding another stack later.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2138,2022-02-07T07:09:41Z,2022-02-07T07:51:14Z,2022-02-07T07:51:18Z,MERGED,True,1,1,1,https://github.com/metalefty,Fix typo in past CVE number,1,[],https://github.com/neutrinolabs/xrdp/pull/2138,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/2138,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2139,2022-02-07T08:03:32Z,2022-02-07T13:23:57Z,2022-02-07T13:24:01Z,MERGED,True,21,5,4,https://github.com/metalefty,Release v0.9.18.1,3,[],https://github.com/neutrinolabs/xrdp/pull/2139,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/2139,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2140,2022-02-07T09:48:10Z,2022-02-08T09:27:43Z,2022-03-19T09:09:41Z,MERGED,True,2,2,2,https://github.com/matt335672,Move to cppcheck 2.7 and bump default threads to 2,1,[],https://github.com/neutrinolabs/xrdp/pull/2140,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/2140,"New version of cppcheck
I've bumped the number of execution threads to 2, as this is the default number of cores for a Github runner. See https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners","New version of cppcheck
I've bumped the number of execution threads to 2, as this is the default number of cores for a Github runner. See https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2144,2022-02-09T10:29:01Z,2022-02-14T09:00:21Z,2022-02-14T09:00:25Z,MERGED,True,2,5,3,https://github.com/matt335672,Remove s_check() macro,1,[],https://github.com/neutrinolabs/xrdp/pull/2144,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/2144,"The s_check() macro in parse.h serves no useful purpose, and its two uses are actually erroneous. The PR removes the macro.
The macro is defined as:-
/******************************************************************************/
#define s_check(s) s_check_rem(s, 0)

/******************************************************************************/
#define s_check_rem(s, n) ((s)->p + (n) <= (s)->end)
In other words, it's checking that 0 or more bytes are available in the input stream. It does not promise that the input stream can be read.
Use 1) is in sesman/chansrv/clipboard.c:-
    while (s_check(s))
    {
        in_uint16_le(s, wchr);
        wtext[index] = wchr;
        if (wchr == 0)
        {
            break;
        }
        index++;
    }
    wtext[index] = 0;
In normal use, the string sent over by the client is null-terminated, and so problems do not arise. To prevent a read of uninitialised memory if the string is not terminated, the loop should be protected with while(s_check_rem(s, 2))
Use 2 is in vnc/vnc_clip.c:-
                case CF_TEXT:
                    lastc = '\0';
                    while (s_check(s))
                    {
                        in_uint8(s, c);
                        if (c == '\n' && lastc == '\r')
                        {
                            /* Overwrite the `\r' */
                            --vc->rfb_clip_s->p;
                        }
                        out_uint8(vc->rfb_clip_s, c);
                        lastc = c;
                    }
The reason this does not cause a read of uninitialised memory is because the code is almost never used. Most clients ask for CF_UNICODETEXT rather than CF_TEXT. In any case, the loop should be protrected with while (s_check_rem(s, 1))","The s_check() macro in parse.h serves no useful purpose, and its two uses are actually erroneous. The PR removes the macro.
The macro is defined as:-
/******************************************************************************/
#define s_check(s) s_check_rem(s, 0)

/******************************************************************************/
#define s_check_rem(s, n) ((s)->p + (n) <= (s)->end)
In other words, it's checking that 0 or more bytes are available in the input stream. It does not promise that the input stream can be read.
Use 1) is in sesman/chansrv/clipboard.c:-
    while (s_check(s))
    {
        in_uint16_le(s, wchr);
        wtext[index] = wchr;
        if (wchr == 0)
        {
            break;
        }
        index++;
    }
    wtext[index] = 0;
In normal use, the string sent over by the client is null-terminated, and so problems do not arise. To prevent a read of uninitialised memory if the string is not terminated, the loop should be protected with while(s_check_rem(s, 2))
Use 2 is in vnc/vnc_clip.c:-
                case CF_TEXT:
                    lastc = '\0';
                    while (s_check(s))
                    {
                        in_uint8(s, c);
                        if (c == '\n' && lastc == '\r')
                        {
                            /* Overwrite the `\r' */
                            --vc->rfb_clip_s->p;
                        }
                        out_uint8(vc->rfb_clip_s, c);
                        lastc = c;
                    }
The reason this does not cause a read of uninitialised memory is because the code is almost never used. Most clients ask for CF_UNICODETEXT rather than CF_TEXT. In any case, the loop should be protrected with while (s_check_rem(s, 1))",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2146,2022-02-10T01:54:35Z,2022-02-10T16:54:22Z,2022-02-10T16:54:38Z,MERGED,True,9,7,2,https://github.com/zbstao,Fixed possible SIGCHILD signal lost,1,[],https://github.com/neutrinolabs/xrdp/pull/2146,https://github.com/zbstao,1,https://github.com/neutrinolabs/xrdp/pull/2146,"When multiple(eg. 20) xrdp connections are disconnected at the same time(eg.  close all rdp client at the same time), zombie process will be spawned.
use xorgrdp session and set the parameter KillDisconnected to true.
I found similar code in file chansrv.c
void
child_signal_handler(int sig)
{
    int pid;

    LOG_DEVEL(LOG_LEVEL_INFO, ""child_signal_handler:"");
    do
    {
        pid = g_waitchild();
        LOG_DEVEL(LOG_LEVEL_INFO, ""child_signal_handler: child pid %d"", pid);
        if ((pid == g_exec_pid) && (pid > 0))
        {
            LOG_DEVEL(LOG_LEVEL_INFO, ""child_signal_handler: found pid %d"", pid);
            //shutdownx();
        }
    }
    while (pid >= 0);
}","When multiple(eg. 20) xrdp connections are disconnected at the same time(eg.  close all rdp client at the same time), zombie process will be spawned.
use xorgrdp session and set the parameter KillDisconnected to true.
I found similar code in file chansrv.c
void
child_signal_handler(int sig)
{
    int pid;

    LOG_DEVEL(LOG_LEVEL_INFO, ""child_signal_handler:"");
    do
    {
        pid = g_waitchild();
        LOG_DEVEL(LOG_LEVEL_INFO, ""child_signal_handler: child pid %d"", pid);
        if ((pid == g_exec_pid) && (pid > 0))
        {
            LOG_DEVEL(LOG_LEVEL_INFO, ""child_signal_handler: found pid %d"", pid);
            //shutdownx();
        }
    }
    while (pid >= 0);
}",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2146,2022-02-10T01:54:35Z,2022-02-10T16:54:22Z,2022-02-10T16:54:38Z,MERGED,True,9,7,2,https://github.com/zbstao,Fixed possible SIGCHILD signal lost,1,[],https://github.com/neutrinolabs/xrdp/pull/2146,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/2146#issuecomment-1034963192,"When multiple(eg. 20) xrdp connections are disconnected at the same time(eg.  close all rdp client at the same time), zombie process will be spawned.
use xorgrdp session and set the parameter KillDisconnected to true.
I found similar code in file chansrv.c
void
child_signal_handler(int sig)
{
    int pid;

    LOG_DEVEL(LOG_LEVEL_INFO, ""child_signal_handler:"");
    do
    {
        pid = g_waitchild();
        LOG_DEVEL(LOG_LEVEL_INFO, ""child_signal_handler: child pid %d"", pid);
        if ((pid == g_exec_pid) && (pid > 0))
        {
            LOG_DEVEL(LOG_LEVEL_INFO, ""child_signal_handler: found pid %d"", pid);
            //shutdownx();
        }
    }
    while (pid >= 0);
}","Looks great.
Can you squash your commits? I'll merge it in then.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2146,2022-02-10T01:54:35Z,2022-02-10T16:54:22Z,2022-02-10T16:54:38Z,MERGED,True,9,7,2,https://github.com/zbstao,Fixed possible SIGCHILD signal lost,1,[],https://github.com/neutrinolabs/xrdp/pull/2146,https://github.com/zbstao,3,https://github.com/neutrinolabs/xrdp/pull/2146#issuecomment-1034978860,"When multiple(eg. 20) xrdp connections are disconnected at the same time(eg.  close all rdp client at the same time), zombie process will be spawned.
use xorgrdp session and set the parameter KillDisconnected to true.
I found similar code in file chansrv.c
void
child_signal_handler(int sig)
{
    int pid;

    LOG_DEVEL(LOG_LEVEL_INFO, ""child_signal_handler:"");
    do
    {
        pid = g_waitchild();
        LOG_DEVEL(LOG_LEVEL_INFO, ""child_signal_handler: child pid %d"", pid);
        if ((pid == g_exec_pid) && (pid > 0))
        {
            LOG_DEVEL(LOG_LEVEL_INFO, ""child_signal_handler: found pid %d"", pid);
            //shutdownx();
        }
    }
    while (pid >= 0);
}","hi @matt335672
Done. In addition I will read the coding style asap.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2146,2022-02-10T01:54:35Z,2022-02-10T16:54:22Z,2022-02-10T16:54:38Z,MERGED,True,9,7,2,https://github.com/zbstao,Fixed possible SIGCHILD signal lost,1,[],https://github.com/neutrinolabs/xrdp/pull/2146,https://github.com/matt335672,4,https://github.com/neutrinolabs/xrdp/pull/2146#issuecomment-1035160531,"When multiple(eg. 20) xrdp connections are disconnected at the same time(eg.  close all rdp client at the same time), zombie process will be spawned.
use xorgrdp session and set the parameter KillDisconnected to true.
I found similar code in file chansrv.c
void
child_signal_handler(int sig)
{
    int pid;

    LOG_DEVEL(LOG_LEVEL_INFO, ""child_signal_handler:"");
    do
    {
        pid = g_waitchild();
        LOG_DEVEL(LOG_LEVEL_INFO, ""child_signal_handler: child pid %d"", pid);
        if ((pid == g_exec_pid) && (pid > 0))
        {
            LOG_DEVEL(LOG_LEVEL_INFO, ""child_signal_handler: found pid %d"", pid);
            //shutdownx();
        }
    }
    while (pid >= 0);
}",Thanks for your contribution @zbstao,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2149,2022-02-14T19:23:33Z,2022-02-14T20:32:13Z,2022-02-14T20:32:13Z,MERGED,True,20,0,1,https://github.com/Nexarian,Fix NPEs in log.c,1,[],https://github.com/neutrinolabs/xrdp/pull/2149,https://github.com/Nexarian,1,https://github.com/neutrinolabs/xrdp/pull/2149,"Multiple NPEs can happen in the internal_log_config_copy procedure, and we need to address this before we merge in changes for egfx.","Multiple NPEs can happen in the internal_log_config_copy procedure, and we need to address this before we merge in changes for egfx.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2149,2022-02-14T19:23:33Z,2022-02-14T20:32:13Z,2022-02-14T20:32:13Z,MERGED,True,20,0,1,https://github.com/Nexarian,Fix NPEs in log.c,1,[],https://github.com/neutrinolabs/xrdp/pull/2149,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/2149#issuecomment-1039527536,"Multiple NPEs can happen in the internal_log_config_copy procedure, and we need to address this before we merge in changes for egfx.",LGTM,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2150,2022-02-14T19:44:35Z,2022-02-14T20:35:02Z,2022-02-14T20:35:03Z,MERGED,True,44,13,3,https://github.com/Nexarian,Move DRDYNVC_STATUS_* to xrdp_channel.h,1,[],https://github.com/neutrinolabs/xrdp/pull/2150,https://github.com/Nexarian,1,https://github.com/neutrinolabs/xrdp/pull/2150,"These statuses are necessary for egfx resizing, as visibility to channel status is a pre-req for closing and re-opening a channel.","These statuses are necessary for egfx resizing, as visibility to channel status is a pre-req for closing and re-opening a channel.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2151,2022-02-15T01:50:29Z,2022-02-16T10:44:25Z,2022-02-16T10:44:37Z,MERGED,True,3,11,3,https://github.com/zbstao,Fixed possible infinite loop,3,[],https://github.com/neutrinolabs/xrdp/pull/2151,https://github.com/zbstao,1,https://github.com/neutrinolabs/xrdp/pull/2151,"Fixed possible infinite loop, sorry for the PR #2146 @matt335672.
If ""KillDisconnected=true"" and ""Policy=UBI"", then login same user from same IP will cause xrdp/xrdp-sesman process cost 100% CPU, xrdp server can't log in.","Fixed possible infinite loop, sorry for the PR #2146 @matt335672.
If ""KillDisconnected=true"" and ""Policy=UBI"", then login same user from same IP will cause xrdp/xrdp-sesman process cost 100% CPU, xrdp server can't log in.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2151,2022-02-15T01:50:29Z,2022-02-16T10:44:25Z,2022-02-16T10:44:37Z,MERGED,True,3,11,3,https://github.com/zbstao,Fixed possible infinite loop,3,[],https://github.com/neutrinolabs/xrdp/pull/2151,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/2151#issuecomment-1040011722,"Fixed possible infinite loop, sorry for the PR #2146 @matt335672.
If ""KillDisconnected=true"" and ""Policy=UBI"", then login same user from same IP will cause xrdp/xrdp-sesman process cost 100% CPU, xrdp server can't log in.","Hi @zbstao
Thanks for that.
I think there's some confusing code in the g_waitchild() function in os_calls.c. The g_waitchild() function looks like this:-

  
    
      xrdp/common/os_calls.c
    
    
        Lines 2949 to 2972
      in
      371c0dc
    
  
  
    

        
          
           /* does not work in win32 
        

        
          
              returns pid of process that exits or zero if signal occurred */ 
        

        
          
           int 
        

        
          
           g_waitchild(void) 
        

        
          
           { 
        

        
          
           #if defined(_WIN32) 
        

        
          
               return 0; 
        

        
          
           #else 
        

        
          
               int wstat; 
        

        
          
               int rv; 
        

        
          
            
        

        
          
               rv = waitpid(0, &wstat, WNOHANG); 
        

        
          
            
        

        
          
               if (rv == -1) 
        

        
          
               { 
        

        
          
                   if (errno == EINTR) /* signal occurred */ 
        

        
          
                   { 
        

        
          
                       rv = 0; 
        

        
          
                   } 
        

        
          
               } 
        

        
          
            
        

        
          
               return rv; 
        

        
          
           #endif 
        

        
          
           } 
        
    
  


Reading this code suggests that 0 can be legitimately returned if a signal occurs, which is why some of these loops have used '>= 0'.
I don't think however that this is the case. Because WNOHANG is specified, the operating of waitpid will not be interrupted by a signal delivery, so we don't need to test for this case.
Does that sound right to you?
If so, can I also ask you to also remove these lines from g_waitchild():-
    if (rv == -1)
    {
        if (errno == EINTR) /* signal occurred */
        {
            rv = 0;
        }
    }

Also, the comment above the function should not mention signals, but should say something like:-
/* does not work in win32
   returns pid of process that exits or <= 0 if no process was found */

If you don't agree, please come back to me.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2151,2022-02-15T01:50:29Z,2022-02-16T10:44:25Z,2022-02-16T10:44:37Z,MERGED,True,3,11,3,https://github.com/zbstao,Fixed possible infinite loop,3,[],https://github.com/neutrinolabs/xrdp/pull/2151,https://github.com/zbstao,3,https://github.com/neutrinolabs/xrdp/pull/2151#issuecomment-1040051470,"Fixed possible infinite loop, sorry for the PR #2146 @matt335672.
If ""KillDisconnected=true"" and ""Policy=UBI"", then login same user from same IP will cause xrdp/xrdp-sesman process cost 100% CPU, xrdp server can't log in.","hi @matt335672
In man waitpid, it says ""waitpid(): on success, returns the process ID of the child whose state has changed; if WNOHANG was specified and one or more child(ren) specified by pid exist, but have not yet changed state, then 0 is returned. On error, -1 is returned.""
So g_waitchild will always return 0 if no child process exits, this is the problem.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2151,2022-02-15T01:50:29Z,2022-02-16T10:44:25Z,2022-02-16T10:44:37Z,MERGED,True,3,11,3,https://github.com/zbstao,Fixed possible infinite loop,3,[],https://github.com/neutrinolabs/xrdp/pull/2151,https://github.com/matt335672,4,https://github.com/neutrinolabs/xrdp/pull/2151#issuecomment-1040067930,"Fixed possible infinite loop, sorry for the PR #2146 @matt335672.
If ""KillDisconnected=true"" and ""Policy=UBI"", then login same user from same IP will cause xrdp/xrdp-sesman process cost 100% CPU, xrdp server can't log in.","Yes, I think that's it more or less. My reading of the page is that if no children exist, -1 is returned and ECHILD is in errno. If however children exist (which haven't exited) 0 is returned as you say.
Also further down the man page we get:-
ERRORS
       . . .
       EINTR  WNOHANG  was  not  set  and an unblocked signal or a SIGCHLD was
              caught; see signal(7).


So do you agree that g_waitchild() should be modified as I suggest?
Thanks.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2151,2022-02-15T01:50:29Z,2022-02-16T10:44:25Z,2022-02-16T10:44:37Z,MERGED,True,3,11,3,https://github.com/zbstao,Fixed possible infinite loop,3,[],https://github.com/neutrinolabs/xrdp/pull/2151,https://github.com/zbstao,5,https://github.com/neutrinolabs/xrdp/pull/2151#issuecomment-1040077449,"Fixed possible infinite loop, sorry for the PR #2146 @matt335672.
If ""KillDisconnected=true"" and ""Policy=UBI"", then login same user from same IP will cause xrdp/xrdp-sesman process cost 100% CPU, xrdp server can't log in.",I agree.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2151,2022-02-15T01:50:29Z,2022-02-16T10:44:25Z,2022-02-16T10:44:37Z,MERGED,True,3,11,3,https://github.com/zbstao,Fixed possible infinite loop,3,[],https://github.com/neutrinolabs/xrdp/pull/2151,https://github.com/matt335672,6,https://github.com/neutrinolabs/xrdp/pull/2151#issuecomment-1041352301,"Fixed possible infinite loop, sorry for the PR #2146 @matt335672.
If ""KillDisconnected=true"" and ""Policy=UBI"", then login same user from same IP will cause xrdp/xrdp-sesman process cost 100% CPU, xrdp server can't log in.",Thanks @zbstao,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2152,2022-02-15T03:17:17Z,2022-02-16T10:50:35Z,2022-02-16T10:50:51Z,MERGED,True,3,2,2,https://github.com/Nexarian,Minor logging fixes in xrdp_iso.c,1,[],https://github.com/neutrinolabs/xrdp/pull/2152,https://github.com/Nexarian,1,https://github.com/neutrinolabs/xrdp/pull/2152,Two logging errors found while working in these files.,Two logging errors found while working in these files.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2152,2022-02-15T03:17:17Z,2022-02-16T10:50:35Z,2022-02-16T10:50:51Z,MERGED,True,3,2,2,https://github.com/Nexarian,Minor logging fixes in xrdp_iso.c,1,[],https://github.com/neutrinolabs/xrdp/pull/2152,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/2152#issuecomment-1041358324,Two logging errors found while working in these files.,Thanks @Nexarian!,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2153,2022-02-16T12:03:39Z,2022-02-16T12:20:49Z,2022-02-16T12:20:52Z,MERGED,True,1,1,1,https://github.com/matt335672,Remove unnecessary log message (regression),1,[],https://github.com/neutrinolabs/xrdp/pull/2153,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/2153,"Remove extra chansrv logging line introduced by bd82084
On my machine I'm getting logging like the following:-
Global configuration:
    UseUnixSocket (derived):   true

Security configuration:
    RestrictOutboundClipboard: none
    RestrictInboundClipboard:  �YUUU
    RestrictInboundClipboard:  none

Chansrv configuration:
    EnableFuseMount            true
    FuseMountName:             thinclient_drives/////
    FileMask:                  077
    Nautilus 3 Flist Format:   false","Remove extra chansrv logging line introduced by bd82084
On my machine I'm getting logging like the following:-
Global configuration:
    UseUnixSocket (derived):   true

Security configuration:
    RestrictOutboundClipboard: none
    RestrictInboundClipboard:  �YUUU
    RestrictInboundClipboard:  none

Chansrv configuration:
    EnableFuseMount            true
    FuseMountName:             thinclient_drives/////
    FileMask:                  077
    Nautilus 3 Flist Format:   false",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2163,2022-03-01T16:48:42Z,2022-03-17T11:32:19Z,2022-03-17T11:32:34Z,MERGED,True,7855,6926,76,https://github.com/matt335672,Replace SCP V0 and V1 with new IPC mechanism,12,[],https://github.com/neutrinolabs/xrdp/pull/2163,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/2163,"This PR is part of the implementation of #1961
It's also prompted by CVE-2020-4044 and CVE-2022-23613. The idea is to move most of the sensitive code into a single layer which shouldn't need to be changed a lot, and which (importantly) can also be subjected to automated testing.
The current complicated SCP architecture with V0 and V1 is replaced with a much simpler SCP V2 which sits on top of a new inter-process messaging library libipm.
The new SCP implementation can be found in libipm/scp.h / libipm/scp.c. It implements all of the currently used functionality in SCP V0 and V1 (i.e. starting sessions, PAM authentication and listing sessions). No additional features are provided yet.
libipm is responsible for :-

marshalling and de-marshalling messages
checking types
checking for buffer overflows
erasing sensitive data (e.g. passwords) from transports after use.

The library is layered on top of the standard struct trans mechanism, and uses the standard calls in parse.h to create and parse messages. It's inspired by the SD-Bus library for D-Bus messages, and re-uses the D-Bus type system (although there are no D-Bus dependencies).
Running doxygen in the libipm library will (or should) generate complete local HTML documentation for the library calls.
A comprehensive test suite is included for libipm.
There are a total of 11 commits in this PR

Add the SIZEOF_INT autotools macro. This allows the compiler to determine how big an int is at compile time.
Adds a sub-class capability to struct trans so we can provide libipm-specific data for a transport.
Adds libipm (and SCP V2)
Add the test suite
Move sesman to the new interface
Move xrdp to the new interface
Tidy up sesman tools
Ditto
Move the tools to the new interface
Remove SCP V0 and V1 files
As an illustration of the new flexibility in the library, an extra parameter is added to an SCP message to allow fail2ban logging to be implemented for the PAM authentication mechanism.

Apart from 11), there are no changes in functionality to the product.
I couldn't really think of a better way to present this. I appreciate reviewing will be tricky. Should I add a new Wiki page on using libipm?","This PR is part of the implementation of #1961
It's also prompted by CVE-2020-4044 and CVE-2022-23613. The idea is to move most of the sensitive code into a single layer which shouldn't need to be changed a lot, and which (importantly) can also be subjected to automated testing.
The current complicated SCP architecture with V0 and V1 is replaced with a much simpler SCP V2 which sits on top of a new inter-process messaging library libipm.
The new SCP implementation can be found in libipm/scp.h / libipm/scp.c. It implements all of the currently used functionality in SCP V0 and V1 (i.e. starting sessions, PAM authentication and listing sessions). No additional features are provided yet.
libipm is responsible for :-

marshalling and de-marshalling messages
checking types
checking for buffer overflows
erasing sensitive data (e.g. passwords) from transports after use.

The library is layered on top of the standard struct trans mechanism, and uses the standard calls in parse.h to create and parse messages. It's inspired by the SD-Bus library for D-Bus messages, and re-uses the D-Bus type system (although there are no D-Bus dependencies).
Running doxygen in the libipm library will (or should) generate complete local HTML documentation for the library calls.
A comprehensive test suite is included for libipm.
There are a total of 11 commits in this PR

Add the SIZEOF_INT autotools macro. This allows the compiler to determine how big an int is at compile time.
Adds a sub-class capability to struct trans so we can provide libipm-specific data for a transport.
Adds libipm (and SCP V2)
Add the test suite
Move sesman to the new interface
Move xrdp to the new interface
Tidy up sesman tools
Ditto
Move the tools to the new interface
Remove SCP V0 and V1 files
As an illustration of the new flexibility in the library, an extra parameter is added to an SCP message to allow fail2ban logging to be implemented for the PAM authentication mechanism.

Apart from 11), there are no changes in functionality to the product.
I couldn't really think of a better way to present this. I appreciate reviewing will be tricky. Should I add a new Wiki page on using libipm?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2163,2022-03-01T16:48:42Z,2022-03-17T11:32:19Z,2022-03-17T11:32:34Z,MERGED,True,7855,6926,76,https://github.com/matt335672,Replace SCP V0 and V1 with new IPC mechanism,12,[],https://github.com/neutrinolabs/xrdp/pull/2163,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/2163#issuecomment-1056328460,"This PR is part of the implementation of #1961
It's also prompted by CVE-2020-4044 and CVE-2022-23613. The idea is to move most of the sensitive code into a single layer which shouldn't need to be changed a lot, and which (importantly) can also be subjected to automated testing.
The current complicated SCP architecture with V0 and V1 is replaced with a much simpler SCP V2 which sits on top of a new inter-process messaging library libipm.
The new SCP implementation can be found in libipm/scp.h / libipm/scp.c. It implements all of the currently used functionality in SCP V0 and V1 (i.e. starting sessions, PAM authentication and listing sessions). No additional features are provided yet.
libipm is responsible for :-

marshalling and de-marshalling messages
checking types
checking for buffer overflows
erasing sensitive data (e.g. passwords) from transports after use.

The library is layered on top of the standard struct trans mechanism, and uses the standard calls in parse.h to create and parse messages. It's inspired by the SD-Bus library for D-Bus messages, and re-uses the D-Bus type system (although there are no D-Bus dependencies).
Running doxygen in the libipm library will (or should) generate complete local HTML documentation for the library calls.
A comprehensive test suite is included for libipm.
There are a total of 11 commits in this PR

Add the SIZEOF_INT autotools macro. This allows the compiler to determine how big an int is at compile time.
Adds a sub-class capability to struct trans so we can provide libipm-specific data for a transport.
Adds libipm (and SCP V2)
Add the test suite
Move sesman to the new interface
Move xrdp to the new interface
Tidy up sesman tools
Ditto
Move the tools to the new interface
Remove SCP V0 and V1 files
As an illustration of the new flexibility in the library, an extra parameter is added to an SCP message to allow fail2ban logging to be implemented for the PAM authentication mechanism.

Apart from 11), there are no changes in functionality to the product.
I couldn't really think of a better way to present this. I appreciate reviewing will be tricky. Should I add a new Wiki page on using libipm?","First off, thanks for the great work.
I would like to release v0.9.19 before merging this because some users & customers want new clipboard restriction feature implemented at#2082 but I don't want to include other big changes.
Furthermore, when this new IPC mechanism merged, there was a big leap. So the new version will be v1.0 (or v0.10).",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2163,2022-03-01T16:48:42Z,2022-03-17T11:32:19Z,2022-03-17T11:32:34Z,MERGED,True,7855,6926,76,https://github.com/matt335672,Replace SCP V0 and V1 with new IPC mechanism,12,[],https://github.com/neutrinolabs/xrdp/pull/2163,https://github.com/matt335672,3,https://github.com/neutrinolabs/xrdp/pull/2163#issuecomment-1056690815,"This PR is part of the implementation of #1961
It's also prompted by CVE-2020-4044 and CVE-2022-23613. The idea is to move most of the sensitive code into a single layer which shouldn't need to be changed a lot, and which (importantly) can also be subjected to automated testing.
The current complicated SCP architecture with V0 and V1 is replaced with a much simpler SCP V2 which sits on top of a new inter-process messaging library libipm.
The new SCP implementation can be found in libipm/scp.h / libipm/scp.c. It implements all of the currently used functionality in SCP V0 and V1 (i.e. starting sessions, PAM authentication and listing sessions). No additional features are provided yet.
libipm is responsible for :-

marshalling and de-marshalling messages
checking types
checking for buffer overflows
erasing sensitive data (e.g. passwords) from transports after use.

The library is layered on top of the standard struct trans mechanism, and uses the standard calls in parse.h to create and parse messages. It's inspired by the SD-Bus library for D-Bus messages, and re-uses the D-Bus type system (although there are no D-Bus dependencies).
Running doxygen in the libipm library will (or should) generate complete local HTML documentation for the library calls.
A comprehensive test suite is included for libipm.
There are a total of 11 commits in this PR

Add the SIZEOF_INT autotools macro. This allows the compiler to determine how big an int is at compile time.
Adds a sub-class capability to struct trans so we can provide libipm-specific data for a transport.
Adds libipm (and SCP V2)
Add the test suite
Move sesman to the new interface
Move xrdp to the new interface
Tidy up sesman tools
Ditto
Move the tools to the new interface
Remove SCP V0 and V1 files
As an illustration of the new flexibility in the library, an extra parameter is added to an SCP message to allow fail2ban logging to be implemented for the PAM authentication mechanism.

Apart from 11), there are no changes in functionality to the product.
I couldn't really think of a better way to present this. I appreciate reviewing will be tricky. Should I add a new Wiki page on using libipm?","OK - I'm fine with that.
Since we're going to change the major version, shall I also implement a move to Unix Domain Sockets? There's not a lot left to do on that when this is merged.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2163,2022-03-01T16:48:42Z,2022-03-17T11:32:19Z,2022-03-17T11:32:34Z,MERGED,True,7855,6926,76,https://github.com/matt335672,Replace SCP V0 and V1 with new IPC mechanism,12,[],https://github.com/neutrinolabs/xrdp/pull/2163,https://github.com/matt335672,4,https://github.com/neutrinolabs/xrdp/pull/2163#issuecomment-1056794085,"This PR is part of the implementation of #1961
It's also prompted by CVE-2020-4044 and CVE-2022-23613. The idea is to move most of the sensitive code into a single layer which shouldn't need to be changed a lot, and which (importantly) can also be subjected to automated testing.
The current complicated SCP architecture with V0 and V1 is replaced with a much simpler SCP V2 which sits on top of a new inter-process messaging library libipm.
The new SCP implementation can be found in libipm/scp.h / libipm/scp.c. It implements all of the currently used functionality in SCP V0 and V1 (i.e. starting sessions, PAM authentication and listing sessions). No additional features are provided yet.
libipm is responsible for :-

marshalling and de-marshalling messages
checking types
checking for buffer overflows
erasing sensitive data (e.g. passwords) from transports after use.

The library is layered on top of the standard struct trans mechanism, and uses the standard calls in parse.h to create and parse messages. It's inspired by the SD-Bus library for D-Bus messages, and re-uses the D-Bus type system (although there are no D-Bus dependencies).
Running doxygen in the libipm library will (or should) generate complete local HTML documentation for the library calls.
A comprehensive test suite is included for libipm.
There are a total of 11 commits in this PR

Add the SIZEOF_INT autotools macro. This allows the compiler to determine how big an int is at compile time.
Adds a sub-class capability to struct trans so we can provide libipm-specific data for a transport.
Adds libipm (and SCP V2)
Add the test suite
Move sesman to the new interface
Move xrdp to the new interface
Tidy up sesman tools
Ditto
Move the tools to the new interface
Remove SCP V0 and V1 files
As an illustration of the new flexibility in the library, an extra parameter is added to an SCP message to allow fail2ban logging to be implemented for the PAM authentication mechanism.

Apart from 11), there are no changes in functionality to the product.
I couldn't really think of a better way to present this. I appreciate reviewing will be tricky. Should I add a new Wiki page on using libipm?","Minor change - libipm sockets are now always non-blocking, so that a trans_force_write() does not block indefinitely.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2163,2022-03-01T16:48:42Z,2022-03-17T11:32:19Z,2022-03-17T11:32:34Z,MERGED,True,7855,6926,76,https://github.com/matt335672,Replace SCP V0 and V1 with new IPC mechanism,12,[],https://github.com/neutrinolabs/xrdp/pull/2163,https://github.com/matt335672,5,https://github.com/neutrinolabs/xrdp/pull/2163#issuecomment-1070817890,"This PR is part of the implementation of #1961
It's also prompted by CVE-2020-4044 and CVE-2022-23613. The idea is to move most of the sensitive code into a single layer which shouldn't need to be changed a lot, and which (importantly) can also be subjected to automated testing.
The current complicated SCP architecture with V0 and V1 is replaced with a much simpler SCP V2 which sits on top of a new inter-process messaging library libipm.
The new SCP implementation can be found in libipm/scp.h / libipm/scp.c. It implements all of the currently used functionality in SCP V0 and V1 (i.e. starting sessions, PAM authentication and listing sessions). No additional features are provided yet.
libipm is responsible for :-

marshalling and de-marshalling messages
checking types
checking for buffer overflows
erasing sensitive data (e.g. passwords) from transports after use.

The library is layered on top of the standard struct trans mechanism, and uses the standard calls in parse.h to create and parse messages. It's inspired by the SD-Bus library for D-Bus messages, and re-uses the D-Bus type system (although there are no D-Bus dependencies).
Running doxygen in the libipm library will (or should) generate complete local HTML documentation for the library calls.
A comprehensive test suite is included for libipm.
There are a total of 11 commits in this PR

Add the SIZEOF_INT autotools macro. This allows the compiler to determine how big an int is at compile time.
Adds a sub-class capability to struct trans so we can provide libipm-specific data for a transport.
Adds libipm (and SCP V2)
Add the test suite
Move sesman to the new interface
Move xrdp to the new interface
Tidy up sesman tools
Ditto
Move the tools to the new interface
Remove SCP V0 and V1 files
As an illustration of the new flexibility in the library, an extra parameter is added to an SCP message to allow fail2ban logging to be implemented for the PAM authentication mechanism.

Apart from 11), there are no changes in functionality to the product.
I couldn't really think of a better way to present this. I appreciate reviewing will be tricky. Should I add a new Wiki page on using libipm?",Merged now v0.9.19 is released.,True,{'THUMBS_UP': ['https://github.com/metalefty']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2168,2022-03-03T17:25:48Z,2022-03-15T09:53:17Z,2022-03-15T09:57:33Z,MERGED,True,353,254,16,https://github.com/matt335672,Fix sesman signal processing,4,[],https://github.com/neutrinolabs/xrdp/pull/2168,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/2168,"edit 2022-03-04: No longer draft.
This series of commits fixes #1729 and may also address reports of other session ending problems (e.g. #2021).
The ""self-pipe trick"" [Stevens 1992] is used to keep the processing performed in all signal handlers to a minimum. This is really simple to do in xrdp by using g_set_wait_obj() and related calls.
As a result, SIGPIPE and SIGHUP are now processed from the sesman main loop, like all other events.
Other problems with SIGHUP processing have been addressed:-

The log file was closed and re-opened. Since the log file is shared with the child processes, this will cause the parent and the children to have a different file table entries. Writes at the end of the file will not be synchronised.
The existing code does not allow for the listening port to be changed, which is a major reason why the user may have edited the config in the first place.

This series of 4 commits addresses these issues as follows:-

[tidy-up] Some of the global variables defined in sesman.c are declared in other c files as extern. This commit moves these declarations into sesman.h
[tidy-up] struct log_config contains a few members which are not always needed. For example, the per_logger_level member is only used for debug builds. This commit makes these members (and associated code) conditional.
The 3rd parameter of the log_start() call is change from a boolean dump_on_start to a more generic flags field. One of the new flags is LOG_START_DUMP_CONFIG, which provides the existing dump_on_start functionality. The other one, LOG_START_RESTART allows for logging to be restarted smoothly. Existing log files are left untouched by a restart, even if the name changes.
Finally, sesman is updated as follows:-

Signal handlers now just call g_set_wait_obj(). No significant processing is done in the signal handlers.
In the main loop, the wait objects are handled in the same way as file descriptors. All actions resulting from signals are synchronised with actions resulting from file activity.
The restart code now calls log_start() with LOG_START_RESTART, and allows the user to change the listening port dynamically.","edit 2022-03-04: No longer draft.
This series of commits fixes #1729 and may also address reports of other session ending problems (e.g. #2021).
The ""self-pipe trick"" [Stevens 1992] is used to keep the processing performed in all signal handlers to a minimum. This is really simple to do in xrdp by using g_set_wait_obj() and related calls.
As a result, SIGPIPE and SIGHUP are now processed from the sesman main loop, like all other events.
Other problems with SIGHUP processing have been addressed:-

The log file was closed and re-opened. Since the log file is shared with the child processes, this will cause the parent and the children to have a different file table entries. Writes at the end of the file will not be synchronised.
The existing code does not allow for the listening port to be changed, which is a major reason why the user may have edited the config in the first place.

This series of 4 commits addresses these issues as follows:-

[tidy-up] Some of the global variables defined in sesman.c are declared in other c files as extern. This commit moves these declarations into sesman.h
[tidy-up] struct log_config contains a few members which are not always needed. For example, the per_logger_level member is only used for debug builds. This commit makes these members (and associated code) conditional.
The 3rd parameter of the log_start() call is change from a boolean dump_on_start to a more generic flags field. One of the new flags is LOG_START_DUMP_CONFIG, which provides the existing dump_on_start functionality. The other one, LOG_START_RESTART allows for logging to be restarted smoothly. Existing log files are left untouched by a restart, even if the name changes.
Finally, sesman is updated as follows:-

Signal handlers now just call g_set_wait_obj(). No significant processing is done in the signal handlers.
In the main loop, the wait objects are handled in the same way as file descriptors. All actions resulting from signals are synchronised with actions resulting from file activity.
The restart code now calls log_start() with LOG_START_RESTART, and allows the user to change the listening port dynamically.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2168,2022-03-03T17:25:48Z,2022-03-15T09:53:17Z,2022-03-15T09:57:33Z,MERGED,True,353,254,16,https://github.com/matt335672,Fix sesman signal processing,4,[],https://github.com/neutrinolabs/xrdp/pull/2168,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/2168#issuecomment-1059109525,"edit 2022-03-04: No longer draft.
This series of commits fixes #1729 and may also address reports of other session ending problems (e.g. #2021).
The ""self-pipe trick"" [Stevens 1992] is used to keep the processing performed in all signal handlers to a minimum. This is really simple to do in xrdp by using g_set_wait_obj() and related calls.
As a result, SIGPIPE and SIGHUP are now processed from the sesman main loop, like all other events.
Other problems with SIGHUP processing have been addressed:-

The log file was closed and re-opened. Since the log file is shared with the child processes, this will cause the parent and the children to have a different file table entries. Writes at the end of the file will not be synchronised.
The existing code does not allow for the listening port to be changed, which is a major reason why the user may have edited the config in the first place.

This series of 4 commits addresses these issues as follows:-

[tidy-up] Some of the global variables defined in sesman.c are declared in other c files as extern. This commit moves these declarations into sesman.h
[tidy-up] struct log_config contains a few members which are not always needed. For example, the per_logger_level member is only used for debug builds. This commit makes these members (and associated code) conditional.
The 3rd parameter of the log_start() call is change from a boolean dump_on_start to a more generic flags field. One of the new flags is LOG_START_DUMP_CONFIG, which provides the existing dump_on_start functionality. The other one, LOG_START_RESTART allows for logging to be restarted smoothly. Existing log files are left untouched by a restart, even if the name changes.
Finally, sesman is updated as follows:-

Signal handlers now just call g_set_wait_obj(). No significant processing is done in the signal handlers.
In the main loop, the wait objects are handled in the same way as file descriptors. All actions resulting from signals are synchronised with actions resulting from file activity.
The restart code now calls log_start() with LOG_START_RESTART, and allows the user to change the listening port dynamically.","As another note, when developing with sesman, it's now really easy to change the logging level, or add entries to [LoggingPerLogger]. After editing the config, a sudo pkill -HUP xrdp-sesman causes the file to be re-read without needing to stop and start sesman.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2175,2022-03-15T05:06:38Z,,2022-05-15T15:22:21Z,OPEN,False,427,183,5,https://github.com/Nexarian,Refactoring resizing into state machine.,1,[],https://github.com/neutrinolabs/xrdp/pull/2175,https://github.com/Nexarian,1,https://github.com/neutrinolabs/xrdp/pull/2175,"Switch to a state machine that is processed at its fastest once per XRDP main loop cycle. This allows for for more flexibility in how resizing is managed, and also allows for preparation for resizing to work with the EGFX changes that require this.
This also is a stability enhancement in that by queueing up the resize changes, they are processed one at a time, and if multiple resizes were to come in at once, or duplicates were to come in, this handles them elegantly. With the older version, XRDP was more likely to crash or cause a client disconnect, especially if there was a duplicate resize that came in as it sometimes does from MSTSC.
Fixes: #1928","Switch to a state machine that is processed at its fastest once per XRDP main loop cycle. This allows for for more flexibility in how resizing is managed, and also allows for preparation for resizing to work with the EGFX changes that require this.
This also is a stability enhancement in that by queueing up the resize changes, they are processed one at a time, and if multiple resizes were to come in at once, or duplicates were to come in, this handles them elegantly. With the older version, XRDP was more likely to crash or cause a client disconnect, especially if there was a duplicate resize that came in as it sometimes does from MSTSC.
Fixes: #1928",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2175,2022-03-15T05:06:38Z,,2022-05-15T15:22:21Z,OPEN,False,427,183,5,https://github.com/Nexarian,Refactoring resizing into state machine.,1,[],https://github.com/neutrinolabs/xrdp/pull/2175,https://github.com/Nexarian,2,https://github.com/neutrinolabs/xrdp/pull/2175#issuecomment-1085395111,"Switch to a state machine that is processed at its fastest once per XRDP main loop cycle. This allows for for more flexibility in how resizing is managed, and also allows for preparation for resizing to work with the EGFX changes that require this.
This also is a stability enhancement in that by queueing up the resize changes, they are processed one at a time, and if multiple resizes were to come in at once, or duplicates were to come in, this handles them elegantly. With the older version, XRDP was more likely to crash or cause a client disconnect, especially if there was a duplicate resize that came in as it sometimes does from MSTSC.
Fixes: #1928",@matt335672 @metalefty @aquesnel Please take a look!,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2175,2022-03-15T05:06:38Z,,2022-05-15T15:22:21Z,OPEN,False,427,183,5,https://github.com/Nexarian,Refactoring resizing into state machine.,1,[],https://github.com/neutrinolabs/xrdp/pull/2175,https://github.com/matt335672,3,https://github.com/neutrinolabs/xrdp/pull/2175#issuecomment-1085716171,"Switch to a state machine that is processed at its fastest once per XRDP main loop cycle. This allows for for more flexibility in how resizing is managed, and also allows for preparation for resizing to work with the EGFX changes that require this.
This also is a stability enhancement in that by queueing up the resize changes, they are processed one at a time, and if multiple resizes were to come in at once, or duplicates were to come in, this handles them elegantly. With the older version, XRDP was more likely to crash or cause a client disconnect, especially if there was a duplicate resize that came in as it sometimes does from MSTSC.
Fixes: #1928","Good stuff - thanks @Nexarian.
I'll take a detailed look after the weekend.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2175,2022-03-15T05:06:38Z,,2022-05-15T15:22:21Z,OPEN,False,427,183,5,https://github.com/Nexarian,Refactoring resizing into state machine.,1,[],https://github.com/neutrinolabs/xrdp/pull/2175,https://github.com/Nexarian,4,https://github.com/neutrinolabs/xrdp/pull/2175#issuecomment-1086206117,"Switch to a state machine that is processed at its fastest once per XRDP main loop cycle. This allows for for more flexibility in how resizing is managed, and also allows for preparation for resizing to work with the EGFX changes that require this.
This also is a stability enhancement in that by queueing up the resize changes, they are processed one at a time, and if multiple resizes were to come in at once, or duplicates were to come in, this handles them elegantly. With the older version, XRDP was more likely to crash or cause a client disconnect, especially if there was a duplicate resize that came in as it sometimes does from MSTSC.
Fixes: #1928","@aquesnel Extremely busy this weekend, but I should start to be able to respond to your comments around  Tuesday!",True,{'THUMBS_UP': ['https://github.com/aquesnel']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2175,2022-03-15T05:06:38Z,,2022-05-15T15:22:21Z,OPEN,False,427,183,5,https://github.com/Nexarian,Refactoring resizing into state machine.,1,[],https://github.com/neutrinolabs/xrdp/pull/2175,https://github.com/Nexarian,5,https://github.com/neutrinolabs/xrdp/pull/2175#issuecomment-1089089347,"Switch to a state machine that is processed at its fastest once per XRDP main loop cycle. This allows for for more flexibility in how resizing is managed, and also allows for preparation for resizing to work with the EGFX changes that require this.
This also is a stability enhancement in that by queueing up the resize changes, they are processed one at a time, and if multiple resizes were to come in at once, or duplicates were to come in, this handles them elegantly. With the older version, XRDP was more likely to crash or cause a client disconnect, especially if there was a duplicate resize that came in as it sometimes does from MSTSC.
Fixes: #1928","@matt335672 Thanks for the review, while I work on addressing the comments from both of you, would you be able to test and verify that you don't see the MSTSC crash with this as well? I want to make sure someone else other than me can verify that it does fix what's intended here.",True,{'THUMBS_UP': ['https://github.com/matt335672']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2175,2022-03-15T05:06:38Z,,2022-05-15T15:22:21Z,OPEN,False,427,183,5,https://github.com/Nexarian,Refactoring resizing into state machine.,1,[],https://github.com/neutrinolabs/xrdp/pull/2175,https://github.com/Nexarian,6,https://github.com/neutrinolabs/xrdp/pull/2175#issuecomment-1092311435,"Switch to a state machine that is processed at its fastest once per XRDP main loop cycle. This allows for for more flexibility in how resizing is managed, and also allows for preparation for resizing to work with the EGFX changes that require this.
This also is a stability enhancement in that by queueing up the resize changes, they are processed one at a time, and if multiple resizes were to come in at once, or duplicates were to come in, this handles them elegantly. With the older version, XRDP was more likely to crash or cause a client disconnect, especially if there was a duplicate resize that came in as it sometimes does from MSTSC.
Fixes: #1928","Also I will fix the ""previous state took [very large number] MS"" log messages.
Now that you've verified that it actually fixes the issue I think it does, I'll get to work on cleanup!",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2175,2022-03-15T05:06:38Z,,2022-05-15T15:22:21Z,OPEN,False,427,183,5,https://github.com/Nexarian,Refactoring resizing into state machine.,1,[],https://github.com/neutrinolabs/xrdp/pull/2175,https://github.com/Nexarian,7,https://github.com/neutrinolabs/xrdp/pull/2175#issuecomment-1103470279,"Switch to a state machine that is processed at its fastest once per XRDP main loop cycle. This allows for for more flexibility in how resizing is managed, and also allows for preparation for resizing to work with the EGFX changes that require this.
This also is a stability enhancement in that by queueing up the resize changes, they are processed one at a time, and if multiple resizes were to come in at once, or duplicates were to come in, this handles them elegantly. With the older version, XRDP was more likely to crash or cause a client disconnect, especially if there was a duplicate resize that came in as it sometimes does from MSTSC.
Fixes: #1928",@matt335672 @aquesnel Take another look! I've updated and addressed all the comments I could find.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2175,2022-03-15T05:06:38Z,,2022-05-15T15:22:21Z,OPEN,False,427,183,5,https://github.com/Nexarian,Refactoring resizing into state machine.,1,[],https://github.com/neutrinolabs/xrdp/pull/2175,https://github.com/matt335672,8,https://github.com/neutrinolabs/xrdp/pull/2175#issuecomment-1103840035,"Switch to a state machine that is processed at its fastest once per XRDP main loop cycle. This allows for for more flexibility in how resizing is managed, and also allows for preparation for resizing to work with the EGFX changes that require this.
This also is a stability enhancement in that by queueing up the resize changes, they are processed one at a time, and if multiple resizes were to come in at once, or duplicates were to come in, this handles them elegantly. With the older version, XRDP was more likely to crash or cause a client disconnect, especially if there was a duplicate resize that came in as it sometimes does from MSTSC.
Fixes: #1928","Thanks @Nexarian - I'll take a look at this tomorrow, now.
Sorry about the conflict - I think merging #2233 was to blame.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2175,2022-03-15T05:06:38Z,,2022-05-15T15:22:21Z,OPEN,False,427,183,5,https://github.com/Nexarian,Refactoring resizing into state machine.,1,[],https://github.com/neutrinolabs/xrdp/pull/2175,https://github.com/Nexarian,9,https://github.com/neutrinolabs/xrdp/pull/2175#issuecomment-1104693957,"Switch to a state machine that is processed at its fastest once per XRDP main loop cycle. This allows for for more flexibility in how resizing is managed, and also allows for preparation for resizing to work with the EGFX changes that require this.
This also is a stability enhancement in that by queueing up the resize changes, they are processed one at a time, and if multiple resizes were to come in at once, or duplicates were to come in, this handles them elegantly. With the older version, XRDP was more likely to crash or cause a client disconnect, especially if there was a duplicate resize that came in as it sometimes does from MSTSC.
Fixes: #1928",@matt335672 The merge conflict was due to the fact that I got a little over-zealous about trying to make more lines conform to the 80 character limit as you had mentioned earlier. I've rebased and force pushed again. Should be good to go!,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2175,2022-03-15T05:06:38Z,,2022-05-15T15:22:21Z,OPEN,False,427,183,5,https://github.com/Nexarian,Refactoring resizing into state machine.,1,[],https://github.com/neutrinolabs/xrdp/pull/2175,https://github.com/aquesnel,10,https://github.com/neutrinolabs/xrdp/pull/2175#issuecomment-1105457662,"Switch to a state machine that is processed at its fastest once per XRDP main loop cycle. This allows for for more flexibility in how resizing is managed, and also allows for preparation for resizing to work with the EGFX changes that require this.
This also is a stability enhancement in that by queueing up the resize changes, they are processed one at a time, and if multiple resizes were to come in at once, or duplicates were to come in, this handles them elegantly. With the older version, XRDP was more likely to crash or cause a client disconnect, especially if there was a duplicate resize that came in as it sometimes does from MSTSC.
Fixes: #1928",@Nexarian thanks for the updates,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2175,2022-03-15T05:06:38Z,,2022-05-15T15:22:21Z,OPEN,False,427,183,5,https://github.com/Nexarian,Refactoring resizing into state machine.,1,[],https://github.com/neutrinolabs/xrdp/pull/2175,https://github.com/Nexarian,11,https://github.com/neutrinolabs/xrdp/pull/2175#issuecomment-1114530869,"Switch to a state machine that is processed at its fastest once per XRDP main loop cycle. This allows for for more flexibility in how resizing is managed, and also allows for preparation for resizing to work with the EGFX changes that require this.
This also is a stability enhancement in that by queueing up the resize changes, they are processed one at a time, and if multiple resizes were to come in at once, or duplicates were to come in, this handles them elegantly. With the older version, XRDP was more likely to crash or cause a client disconnect, especially if there was a duplicate resize that came in as it sometimes does from MSTSC.
Fixes: #1928",I'm still working on and thinking about how to address some of the feedback here. Standby for a few more days :),True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2175,2022-03-15T05:06:38Z,,2022-05-15T15:22:21Z,OPEN,False,427,183,5,https://github.com/Nexarian,Refactoring resizing into state machine.,1,[],https://github.com/neutrinolabs/xrdp/pull/2175,https://github.com/matt335672,12,https://github.com/neutrinolabs/xrdp/pull/2175#issuecomment-1114695462,"Switch to a state machine that is processed at its fastest once per XRDP main loop cycle. This allows for for more flexibility in how resizing is managed, and also allows for preparation for resizing to work with the EGFX changes that require this.
This also is a stability enhancement in that by queueing up the resize changes, they are processed one at a time, and if multiple resizes were to come in at once, or duplicates were to come in, this handles them elegantly. With the older version, XRDP was more likely to crash or cause a client disconnect, especially if there was a duplicate resize that came in as it sometimes does from MSTSC.
Fixes: #1928","Thanks @Nexarian
Please let me know if you need a hand looking at the session startup delay you've mentioned on Gitter and I'll give it a priority.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2175,2022-03-15T05:06:38Z,,2022-05-15T15:22:21Z,OPEN,False,427,183,5,https://github.com/Nexarian,Refactoring resizing into state machine.,1,[],https://github.com/neutrinolabs/xrdp/pull/2175,https://github.com/Nexarian,13,https://github.com/neutrinolabs/xrdp/pull/2175#issuecomment-1126963232,"Switch to a state machine that is processed at its fastest once per XRDP main loop cycle. This allows for for more flexibility in how resizing is managed, and also allows for preparation for resizing to work with the EGFX changes that require this.
This also is a stability enhancement in that by queueing up the resize changes, they are processed one at a time, and if multiple resizes were to come in at once, or duplicates were to come in, this handles them elegantly. With the older version, XRDP was more likely to crash or cause a client disconnect, especially if there was a duplicate resize that came in as it sometimes does from MSTSC.
Fixes: #1928","@aquesnel Your questions were really hard for me to answer! I'm working on a wiki to explain exactly what is going on, so we can review and discuss it.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2175,2022-03-15T05:06:38Z,,2022-05-15T15:22:21Z,OPEN,False,427,183,5,https://github.com/Nexarian,Refactoring resizing into state machine.,1,[],https://github.com/neutrinolabs/xrdp/pull/2175,https://github.com/Nexarian,14,https://github.com/neutrinolabs/xrdp/pull/2175#issuecomment-1126963285,"Switch to a state machine that is processed at its fastest once per XRDP main loop cycle. This allows for for more flexibility in how resizing is managed, and also allows for preparation for resizing to work with the EGFX changes that require this.
This also is a stability enhancement in that by queueing up the resize changes, they are processed one at a time, and if multiple resizes were to come in at once, or duplicates were to come in, this handles them elegantly. With the older version, XRDP was more likely to crash or cause a client disconnect, especially if there was a duplicate resize that came in as it sometimes does from MSTSC.
Fixes: #1928","Accidentally closed, hit the wrong button :)",True,{'THUMBS_UP': ['https://github.com/matt335672']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2176,2022-03-16T01:18:15Z,2022-03-17T04:01:23Z,2022-03-17T04:01:28Z,MERGED,True,52,1,2,https://github.com/metalefty,Release v0.9.19,3,[],https://github.com/neutrinolabs/xrdp/pull/2176,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/2176,I will make a release tomorrow.,I will make a release tomorrow.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2183,2022-03-20T16:16:26Z,2022-04-06T16:27:36Z,2022-04-06T16:27:37Z,CLOSED,False,1,1,1,https://github.com/t-a-k,sesman: Reorder PATH entries for xrdp session,1,[],https://github.com/neutrinolabs/xrdp/pull/2183,https://github.com/t-a-k,1,https://github.com/neutrinolabs/xrdp/pull/2183,"Hello,
In the xrdp session PATH environment variable is currently set to /sbin:/bin:/usr/bin:/usr/local/bin, but I think that such ordering is unusual, and it will be better if /usr/local/bin is searched before /usr/bin by default.","Hello,
In the xrdp session PATH environment variable is currently set to /sbin:/bin:/usr/bin:/usr/local/bin, but I think that such ordering is unusual, and it will be better if /usr/local/bin is searched before /usr/bin by default.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2183,2022-03-20T16:16:26Z,2022-04-06T16:27:36Z,2022-04-06T16:27:37Z,CLOSED,False,1,1,1,https://github.com/t-a-k,sesman: Reorder PATH entries for xrdp session,1,[],https://github.com/neutrinolabs/xrdp/pull/2183,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/2183#issuecomment-1073709872,"Hello,
In the xrdp session PATH environment variable is currently set to /sbin:/bin:/usr/bin:/usr/local/bin, but I think that such ordering is unusual, and it will be better if /usr/local/bin is searched before /usr/bin by default.","Hi @t-a-k,
Thanks for raising this.
I've had a look into the history of this line in git. It's only used for locating utilities which are used by xrdp itself. For most Linux operating systems, utilities will be in ""/bin"" or ""/usr/bin"". ""/usr/local/bin"" is used on FreeBSD for locating ports. /sbin is used on FreeBSD for locating ""/sbin/mount_fusefs"" (see #387 for the discussion on this).
For a normal user session, this setting is (or should be) irrelevant. Before the user session starts, the PATH will be set by either pam_env.so, or by the login shell scripts.
Is there a particular situation you are finding yourself in where the ordering of the components of this line is making a difference?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2183,2022-03-20T16:16:26Z,2022-04-06T16:27:36Z,2022-04-06T16:27:37Z,CLOSED,False,1,1,1,https://github.com/t-a-k,sesman: Reorder PATH entries for xrdp session,1,[],https://github.com/neutrinolabs/xrdp/pull/2183,https://github.com/t-a-k,3,https://github.com/neutrinolabs/xrdp/pull/2183#issuecomment-1076433145,"Hello,
In the xrdp session PATH environment variable is currently set to /sbin:/bin:/usr/bin:/usr/local/bin, but I think that such ordering is unusual, and it will be better if /usr/local/bin is searched before /usr/bin by default.","For most Linux operating systems, utilities will be in ""/bin"" or ""/usr/bin"". ""/usr/local/bin"" is used on FreeBSD for locating ports.

As far as I know, /usr/local/bin is also used by most Linux distributions for programs local to the site (Filesystem Hierarchy Standard also standardizes this).  And, in order to allow site admins to override standard utilities with their custom versions (or create wrapper scripts), it is important to place /usr/local/bin before standard directories like /usr/bin in PATH.

For a normal user session, this setting is (or should be) irrelevant. Before the user session starts, the PATH will be set by either pam_env.so, or by the login shell scripts.
Is there a particular situation you are finding yourself in where the ordering of the components of this line is making a difference?

Some Linux distributions like CentOS Linux 7 don't use pam_env.so to initialize PATH, and their user sessions seem to inherit PATH set by session managers like sshd or xrdp-sesman.  (CentOS 7's default login scripts also will not initialize PATH, only prepend or append directories to it.)
So, console logins (and SSH logins) will get PATH like /usr/local/bin:/usr/bin while xrdp logins will get /sbin:/bin:/usr/bin:/usr/local/bin.  When I locally installed recent version of Git as /usr/local/bin/git, plain git command is /usr/local/bin/git (as expected) on console/ssh sessions, but /bin/git on xrdp sessions, which confuses users.
Furthermore, I heard that Solaris has both /bin/sh and /sbin/sh, so with the current PATH of sesman plain sh will be /sbin/sh which is not for general use (it is statically linked for emergency shell).  From this as well, I think that /sbin should come last in PATH.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2183,2022-03-20T16:16:26Z,2022-04-06T16:27:36Z,2022-04-06T16:27:37Z,CLOSED,False,1,1,1,https://github.com/t-a-k,sesman: Reorder PATH entries for xrdp session,1,[],https://github.com/neutrinolabs/xrdp/pull/2183,https://github.com/matt335672,4,https://github.com/neutrinolabs/xrdp/pull/2183#issuecomment-1077519199,"Hello,
In the xrdp session PATH environment variable is currently set to /sbin:/bin:/usr/bin:/usr/local/bin, but I think that such ordering is unusual, and it will be better if /usr/local/bin is searched before /usr/bin by default.","There are definitely plusses and minuses to this.
From a developer/maintainer perspective, there are few positives to this PR. We're going to be juggling entries to try to satisfy all uses - there are no guarantees that a single order will satisfy all users. You're also imposing quite a testing burden on us, and also introducing the possibility of calls from Linux users who have overridden legitimate utilities with local 'specials'.
On the other hand, we've had PATH ordering issues in the past, like #1773, where polkit was refusing to authenticate programs picked up from a different place in the PATH - this is a result of UsrMerge. The Ubuntu case has ultimately been solved by the Debian package moving to pam_env.so [ see Debian BTS #996418
In summary, changing this line will address your problem, but introduces problems for other people. I think the best way forward is to fix this elsewhere, possibly in startwm.sh, where we can make platform-specific fixes with limited change effects.
There's the following line in /etc/libexec/xrdp/startwm.sh:-
# change PATH to be what your environment needs usually what is in
# /etc/environment
#PATH=""/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games""
#export PATH=$PATH

On my CentOS 7 system, if I set this to :-
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin

I get this PATH in both an XRDP session and a GNOME session:-
/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin:/home/testuser/.local/bin:/home/testuser/bin

I can't test easily in lightdm right now.
Isn't this what you want?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2183,2022-03-20T16:16:26Z,2022-04-06T16:27:36Z,2022-04-06T16:27:37Z,CLOSED,False,1,1,1,https://github.com/t-a-k,sesman: Reorder PATH entries for xrdp session,1,[],https://github.com/neutrinolabs/xrdp/pull/2183,https://github.com/t-a-k,5,https://github.com/neutrinolabs/xrdp/pull/2183#issuecomment-1090466139,"Hello,
In the xrdp session PATH environment variable is currently set to /sbin:/bin:/usr/bin:/usr/local/bin, but I think that such ordering is unusual, and it will be better if /usr/local/bin is searched before /usr/bin by default.","Sorry for delayed response, but that makes sense to me.
Please let me cancel this PR.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2185,2022-03-22T09:32:36Z,2022-03-23T09:33:19Z,2022-03-23T09:33:19Z,MERGED,True,3,0,1,https://github.com/matt335672,Explicitly link libxrdpapi with libcommon,1,[],https://github.com/neutrinolabs/xrdp/pull/2185,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/2185,"Fixes #2167
The rarely used libxrdpapi uses g_get_display_num_from_display() and log_message() from libcommon, and so should be explicitly linked against this library. PLD Linux picks this up in its extended consistency checks following the build.","Fixes #2167
The rarely used libxrdpapi uses g_get_display_num_from_display() and log_message() from libcommon, and so should be explicitly linked against this library. PLD Linux picks this up in its extended consistency checks following the build.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2198,2022-03-28T18:19:45Z,2022-03-29T08:34:17Z,2022-03-29T08:34:17Z,MERGED,True,19,13,1,https://github.com/matt335672,Open log in sesman before reading config,1,[],https://github.com/neutrinolabs/xrdp/pull/2198,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/2198,"Fixes a problem introduced with bd82084 as part of #2082.
Before this commit, the sesman config parser made no calls to the logging facility. Now it does.
sesman reads the config before starting the logging. As a consequence, if sesman.ini contains a line like this:-
RestrictOutboundClipboard=zzz

sesman outputs the following on stdout when it starts:-
The log reference is NULL - log not initialized properly when called from [config_read_security(config.c:263)]

also, the log message is lost.
It seems to me that there is no reason not to start the logging before reading the config. They both use the same file, but parse different sections. Also, logging warnings about unexpected parameters should definitely be supported.
After implementing this PR, the sesman log file contains the warning messages generated by a faulty config:-
[20220328-19:02:25] [WARN ] [config_read_security(config.c:263)] Unrecognised tokens parsing 'RestrictOutboundClipboard' zzz

@metalefty - although this is applicable to the devel branch, we may want to back-port it to V0.9.x as well, for a possible bug-fix release.","Fixes a problem introduced with bd82084 as part of #2082.
Before this commit, the sesman config parser made no calls to the logging facility. Now it does.
sesman reads the config before starting the logging. As a consequence, if sesman.ini contains a line like this:-
RestrictOutboundClipboard=zzz

sesman outputs the following on stdout when it starts:-
The log reference is NULL - log not initialized properly when called from [config_read_security(config.c:263)]

also, the log message is lost.
It seems to me that there is no reason not to start the logging before reading the config. They both use the same file, but parse different sections. Also, logging warnings about unexpected parameters should definitely be supported.
After implementing this PR, the sesman log file contains the warning messages generated by a faulty config:-
[20220328-19:02:25] [WARN ] [config_read_security(config.c:263)] Unrecognised tokens parsing 'RestrictOutboundClipboard' zzz

@metalefty - although this is applicable to the devel branch, we may want to back-port it to V0.9.x as well, for a possible bug-fix release.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2198,2022-03-28T18:19:45Z,2022-03-29T08:34:17Z,2022-03-29T08:34:17Z,MERGED,True,19,13,1,https://github.com/matt335672,Open log in sesman before reading config,1,[],https://github.com/neutrinolabs/xrdp/pull/2198,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/2198#issuecomment-1081355572,"Fixes a problem introduced with bd82084 as part of #2082.
Before this commit, the sesman config parser made no calls to the logging facility. Now it does.
sesman reads the config before starting the logging. As a consequence, if sesman.ini contains a line like this:-
RestrictOutboundClipboard=zzz

sesman outputs the following on stdout when it starts:-
The log reference is NULL - log not initialized properly when called from [config_read_security(config.c:263)]

also, the log message is lost.
It seems to me that there is no reason not to start the logging before reading the config. They both use the same file, but parse different sections. Also, logging warnings about unexpected parameters should definitely be supported.
After implementing this PR, the sesman log file contains the warning messages generated by a faulty config:-
[20220328-19:02:25] [WARN ] [config_read_security(config.c:263)] Unrecognised tokens parsing 'RestrictOutboundClipboard' zzz

@metalefty - although this is applicable to the devel branch, we may want to back-port it to V0.9.x as well, for a possible bug-fix release.","Thanks for the fix.
I'll cherry-pick this when releasing a bug-fix release for the v0.9 series. Just added a milestone to remember.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2201,2022-03-29T09:48:48Z,2022-03-29T09:59:15Z,2022-03-29T09:59:20Z,MERGED,True,9,7,1,https://github.com/matt335672,Fix neutrinordp regression caused by bd9147d1,1,[],https://github.com/neutrinolabs/xrdp/pull/2201,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/2201,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2204,2022-03-31T19:52:43Z,2022-04-15T09:33:12Z,2022-04-15T09:33:16Z,MERGED,True,201,214,12,https://github.com/matt335672,Rework transport connect logic,3,[],https://github.com/neutrinolabs/xrdp/pull/2204,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/2204,"There are a number of ways the existing transport connect logic in trans_connect could be improved for POSIX compatibility, and also slightly tidied up:-

The same socket is re-used for multiple connect attempts following failure which isn't behaviour defined by POSIX.1-2017 (although it works on Linux).
An asynchronous connect is started, and then after a short delay connect() is called again on the same socket. POSIX.1-2017 here is clear that in this situation EALREADY is returned before the connection is established, but is silent on the behaviour expected when the connection is established. Returning success is an option, but so is returning EISCONN. The current code assumes the connect() call will succeed.
The code contains two virtually identical, quite complex loops for TCP and UNIX sockets, differing only in the calls to create a socket and connect it.
trans_connect() contains looping and retry logic, but this isn't seen as sufficient by the chansrv connect code in xrdp/xrdp_mm.c and the Xorg connect code in xup/xup.c. Both of these implement their own looping and retry logic on top of the looping logic in trans_connect(), resulting in slightly unpredictable behaviour with regard to timeouts. This seems to be done to allow for program termination to be checked, but trans_connect() can do this anyway.
A socket number can technically be zero, but in a couple of places this isn't allowed for.

This PR attempts to correct the implementation of trans_connect(), and also to simplify the areas it is called from.
As part of the PR, the signature of the server_is_term member of the xrdp module interface is changed to match the signature expected by the is_term member of a struct trans. This allows for trans_connect() in xrdp modules to directly access g_is_term() within the main xrdp executable. At the moment this functionality is only used by the xup module.
I've also checked for regressions against #1325, which was a relatively recent addition to allow xrdp to shut down gracefully when requested.","There are a number of ways the existing transport connect logic in trans_connect could be improved for POSIX compatibility, and also slightly tidied up:-

The same socket is re-used for multiple connect attempts following failure which isn't behaviour defined by POSIX.1-2017 (although it works on Linux).
An asynchronous connect is started, and then after a short delay connect() is called again on the same socket. POSIX.1-2017 here is clear that in this situation EALREADY is returned before the connection is established, but is silent on the behaviour expected when the connection is established. Returning success is an option, but so is returning EISCONN. The current code assumes the connect() call will succeed.
The code contains two virtually identical, quite complex loops for TCP and UNIX sockets, differing only in the calls to create a socket and connect it.
trans_connect() contains looping and retry logic, but this isn't seen as sufficient by the chansrv connect code in xrdp/xrdp_mm.c and the Xorg connect code in xup/xup.c. Both of these implement their own looping and retry logic on top of the looping logic in trans_connect(), resulting in slightly unpredictable behaviour with regard to timeouts. This seems to be done to allow for program termination to be checked, but trans_connect() can do this anyway.
A socket number can technically be zero, but in a couple of places this isn't allowed for.

This PR attempts to correct the implementation of trans_connect(), and also to simplify the areas it is called from.
As part of the PR, the signature of the server_is_term member of the xrdp module interface is changed to match the signature expected by the is_term member of a struct trans. This allows for trans_connect() in xrdp modules to directly access g_is_term() within the main xrdp executable. At the moment this functionality is only used by the xup module.
I've also checked for regressions against #1325, which was a relatively recent addition to allow xrdp to shut down gracefully when requested.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2207,2022-04-01T12:17:30Z,2022-04-18T08:26:00Z,2022-04-20T08:57:49Z,MERGED,True,605,299,25,https://github.com/matt335672,Move to Unix Domain Socket for SCP (sesman),3,[],https://github.com/neutrinolabs/xrdp/pull/2207,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/2207,"Depends on #2204
Fixes : #1596 #1805 #1855
This draft PR implements sesman listening on a UNIX domain socket rather than TCP port 3350
It's currently in draft, as more testing is required. I thought however it was worth having visibility of this while I work on it.
Noteworthy features:-

The existing sockets directory is unsuitable for the sesman socket, as the file permissions mean anyone could create sesman.socket which is essentially what  CVE-2020-4044 was all about. So I've added another configuration value --with-sesmanruntimedir which defaults to /var/run/xrdp-sesman
I've changed the default value of the socketdir location to /var/run/xrdp rather than /tmp/.xrdp which better fits in with existing filesystem guidelines and also means polyinstantiation of /tmp works out-of-the-box (see #1482)
The server parameter has been removed from xrdp-sesrun and xrdp-sesadmin
Compatibility with the existing sesman and xrdp configs is maintained for upgrades, but the older settings are warned about and ignored if found.
I've needed to create a lock file for the UNIX domain socket, as the listen test which can be used for TCP sockets to enforce a single listener doesn't work with UNIX domain sockets.

No additional features of UNIX domain sockets are yet implemented. That is for later.
I'm not expecting anyone to review the code yet, but comments/questions on the above would be welcome.","Depends on #2204
Fixes : #1596 #1805 #1855
This draft PR implements sesman listening on a UNIX domain socket rather than TCP port 3350
It's currently in draft, as more testing is required. I thought however it was worth having visibility of this while I work on it.
Noteworthy features:-

The existing sockets directory is unsuitable for the sesman socket, as the file permissions mean anyone could create sesman.socket which is essentially what  CVE-2020-4044 was all about. So I've added another configuration value --with-sesmanruntimedir which defaults to /var/run/xrdp-sesman
I've changed the default value of the socketdir location to /var/run/xrdp rather than /tmp/.xrdp which better fits in with existing filesystem guidelines and also means polyinstantiation of /tmp works out-of-the-box (see #1482)
The server parameter has been removed from xrdp-sesrun and xrdp-sesadmin
Compatibility with the existing sesman and xrdp configs is maintained for upgrades, but the older settings are warned about and ignored if found.
I've needed to create a lock file for the UNIX domain socket, as the listen test which can be used for TCP sockets to enforce a single listener doesn't work with UNIX domain sockets.

No additional features of UNIX domain sockets are yet implemented. That is for later.
I'm not expecting anyone to review the code yet, but comments/questions on the above would be welcome.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2207,2022-04-01T12:17:30Z,2022-04-18T08:26:00Z,2022-04-20T08:57:49Z,MERGED,True,605,299,25,https://github.com/matt335672,Move to Unix Domain Socket for SCP (sesman),3,[],https://github.com/neutrinolabs/xrdp/pull/2207,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/2207#issuecomment-1100005450,"Depends on #2204
Fixes : #1596 #1805 #1855
This draft PR implements sesman listening on a UNIX domain socket rather than TCP port 3350
It's currently in draft, as more testing is required. I thought however it was worth having visibility of this while I work on it.
Noteworthy features:-

The existing sockets directory is unsuitable for the sesman socket, as the file permissions mean anyone could create sesman.socket which is essentially what  CVE-2020-4044 was all about. So I've added another configuration value --with-sesmanruntimedir which defaults to /var/run/xrdp-sesman
I've changed the default value of the socketdir location to /var/run/xrdp rather than /tmp/.xrdp which better fits in with existing filesystem guidelines and also means polyinstantiation of /tmp works out-of-the-box (see #1482)
The server parameter has been removed from xrdp-sesrun and xrdp-sesadmin
Compatibility with the existing sesman and xrdp configs is maintained for upgrades, but the older settings are warned about and ignored if found.
I've needed to create a lock file for the UNIX domain socket, as the listen test which can be used for TCP sockets to enforce a single listener doesn't work with UNIX domain sockets.

No additional features of UNIX domain sockets are yet implemented. That is for later.
I'm not expecting anyone to review the code yet, but comments/questions on the above would be welcome.","Any comments?
If not I'll merge this so it gets devel testing before our next release.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2207,2022-04-01T12:17:30Z,2022-04-18T08:26:00Z,2022-04-20T08:57:49Z,MERGED,True,605,299,25,https://github.com/matt335672,Move to Unix Domain Socket for SCP (sesman),3,[],https://github.com/neutrinolabs/xrdp/pull/2207,https://github.com/matt335672,3,https://github.com/neutrinolabs/xrdp/pull/2207#issuecomment-1101227152,"Depends on #2204
Fixes : #1596 #1805 #1855
This draft PR implements sesman listening on a UNIX domain socket rather than TCP port 3350
It's currently in draft, as more testing is required. I thought however it was worth having visibility of this while I work on it.
Noteworthy features:-

The existing sockets directory is unsuitable for the sesman socket, as the file permissions mean anyone could create sesman.socket which is essentially what  CVE-2020-4044 was all about. So I've added another configuration value --with-sesmanruntimedir which defaults to /var/run/xrdp-sesman
I've changed the default value of the socketdir location to /var/run/xrdp rather than /tmp/.xrdp which better fits in with existing filesystem guidelines and also means polyinstantiation of /tmp works out-of-the-box (see #1482)
The server parameter has been removed from xrdp-sesrun and xrdp-sesadmin
Compatibility with the existing sesman and xrdp configs is maintained for upgrades, but the older settings are warned about and ignored if found.
I've needed to create a lock file for the UNIX domain socket, as the listen test which can be used for TCP sockets to enforce a single listener doesn't work with UNIX domain sockets.

No additional features of UNIX domain sockets are yet implemented. That is for later.
I'm not expecting anyone to review the code yet, but comments/questions on the above would be welcome.","Thanks.
I've updated the NEWS page with the user-visible changes as a result of this.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2207,2022-04-01T12:17:30Z,2022-04-18T08:26:00Z,2022-04-20T08:57:49Z,MERGED,True,605,299,25,https://github.com/matt335672,Move to Unix Domain Socket for SCP (sesman),3,[],https://github.com/neutrinolabs/xrdp/pull/2207,https://github.com/jsorg71,4,https://github.com/neutrinolabs/xrdp/pull/2207#issuecomment-1102192900,"Depends on #2204
Fixes : #1596 #1805 #1855
This draft PR implements sesman listening on a UNIX domain socket rather than TCP port 3350
It's currently in draft, as more testing is required. I thought however it was worth having visibility of this while I work on it.
Noteworthy features:-

The existing sockets directory is unsuitable for the sesman socket, as the file permissions mean anyone could create sesman.socket which is essentially what  CVE-2020-4044 was all about. So I've added another configuration value --with-sesmanruntimedir which defaults to /var/run/xrdp-sesman
I've changed the default value of the socketdir location to /var/run/xrdp rather than /tmp/.xrdp which better fits in with existing filesystem guidelines and also means polyinstantiation of /tmp works out-of-the-box (see #1482)
The server parameter has been removed from xrdp-sesrun and xrdp-sesadmin
Compatibility with the existing sesman and xrdp configs is maintained for upgrades, but the older settings are warned about and ignored if found.
I've needed to create a lock file for the UNIX domain socket, as the listen test which can be used for TCP sockets to enforce a single listener doesn't work with UNIX domain sockets.

No additional features of UNIX domain sockets are yet implemented. That is for later.
I'm not expecting anyone to review the code yet, but comments/questions on the above would be welcome.","I love it.  UDS is a great security move.
I see this in log.  error - no ip set
patch that seems to fix it
diff --git a/xup/xup.c b/xup/xup.c
index ca36efc7..4ca395b9 100644
--- a/xup/xup.c
+++ b/xup/xup.c
@@ -162,12 +162,6 @@ lib_mod_connect(struct mod *mod)
         return 1;
     }
 
-    if (g_strcmp(mod->ip, """") == 0)
-    {
-        mod->server_msg(mod, ""error - no ip set"", 0);
-        return 1;
-    }
-
     make_stream(s);
     g_sprintf(con_port, ""%s"", mod->port);
 
@@ -183,6 +177,12 @@ lib_mod_connect(struct mod *mod)
     {
         socket_mode = TRANS_MODE_TCP;
         LOG(LOG_LEVEL_INFO, ""lib_mod_connect: connecting via TCP socket"");
+        if (g_strcmp(mod->ip, """") == 0)
+        {
+            mod->server_msg(mod, ""error - no ip set"", 0);
+            free_stream(s);
+            return 1;
+        }
     }
 
     mod->trans = trans_create(socket_mode, 8 * 8192, 8192);",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2207,2022-04-01T12:17:30Z,2022-04-18T08:26:00Z,2022-04-20T08:57:49Z,MERGED,True,605,299,25,https://github.com/matt335672,Move to Unix Domain Socket for SCP (sesman),3,[],https://github.com/neutrinolabs/xrdp/pull/2207,https://github.com/matt335672,5,https://github.com/neutrinolabs/xrdp/pull/2207#issuecomment-1102265605,"Depends on #2204
Fixes : #1596 #1805 #1855
This draft PR implements sesman listening on a UNIX domain socket rather than TCP port 3350
It's currently in draft, as more testing is required. I thought however it was worth having visibility of this while I work on it.
Noteworthy features:-

The existing sockets directory is unsuitable for the sesman socket, as the file permissions mean anyone could create sesman.socket which is essentially what  CVE-2020-4044 was all about. So I've added another configuration value --with-sesmanruntimedir which defaults to /var/run/xrdp-sesman
I've changed the default value of the socketdir location to /var/run/xrdp rather than /tmp/.xrdp which better fits in with existing filesystem guidelines and also means polyinstantiation of /tmp works out-of-the-box (see #1482)
The server parameter has been removed from xrdp-sesrun and xrdp-sesadmin
Compatibility with the existing sesman and xrdp configs is maintained for upgrades, but the older settings are warned about and ignored if found.
I've needed to create a lock file for the UNIX domain socket, as the listen test which can be used for TCP sockets to enforce a single listener doesn't work with UNIX domain sockets.

No additional features of UNIX domain sockets are yet implemented. That is for later.
I'm not expecting anyone to review the code yet, but comments/questions on the above would be welcome.","Thanks for that.
Sorry about the brief comment - I've got to catch a bus in a few minutes I'm afraid. I'll check the patch out tomorrow and merge it in.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2207,2022-04-01T12:17:30Z,2022-04-18T08:26:00Z,2022-04-20T08:57:49Z,MERGED,True,605,299,25,https://github.com/matt335672,Move to Unix Domain Socket for SCP (sesman),3,[],https://github.com/neutrinolabs/xrdp/pull/2207,https://github.com/Nexarian,6,https://github.com/neutrinolabs/xrdp/pull/2207#issuecomment-1102636166,"Depends on #2204
Fixes : #1596 #1805 #1855
This draft PR implements sesman listening on a UNIX domain socket rather than TCP port 3350
It's currently in draft, as more testing is required. I thought however it was worth having visibility of this while I work on it.
Noteworthy features:-

The existing sockets directory is unsuitable for the sesman socket, as the file permissions mean anyone could create sesman.socket which is essentially what  CVE-2020-4044 was all about. So I've added another configuration value --with-sesmanruntimedir which defaults to /var/run/xrdp-sesman
I've changed the default value of the socketdir location to /var/run/xrdp rather than /tmp/.xrdp which better fits in with existing filesystem guidelines and also means polyinstantiation of /tmp works out-of-the-box (see #1482)
The server parameter has been removed from xrdp-sesrun and xrdp-sesadmin
Compatibility with the existing sesman and xrdp configs is maintained for upgrades, but the older settings are warned about and ignored if found.
I've needed to create a lock file for the UNIX domain socket, as the listen test which can be used for TCP sockets to enforce a single listener doesn't work with UNIX domain sockets.

No additional features of UNIX domain sockets are yet implemented. That is for later.
I'm not expecting anyone to review the code yet, but comments/questions on the above would be welcome.","Same patch needs to be applied to the VNC backend, as it also has this check.",True,{'THUMBS_UP': ['https://github.com/matt335672']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2207,2022-04-01T12:17:30Z,2022-04-18T08:26:00Z,2022-04-20T08:57:49Z,MERGED,True,605,299,25,https://github.com/matt335672,Move to Unix Domain Socket for SCP (sesman),3,[],https://github.com/neutrinolabs/xrdp/pull/2207,https://github.com/matt335672,7,https://github.com/neutrinolabs/xrdp/pull/2207#issuecomment-1103652551,"Depends on #2204
Fixes : #1596 #1805 #1855
This draft PR implements sesman listening on a UNIX domain socket rather than TCP port 3350
It's currently in draft, as more testing is required. I thought however it was worth having visibility of this while I work on it.
Noteworthy features:-

The existing sockets directory is unsuitable for the sesman socket, as the file permissions mean anyone could create sesman.socket which is essentially what  CVE-2020-4044 was all about. So I've added another configuration value --with-sesmanruntimedir which defaults to /var/run/xrdp-sesman
I've changed the default value of the socketdir location to /var/run/xrdp rather than /tmp/.xrdp which better fits in with existing filesystem guidelines and also means polyinstantiation of /tmp works out-of-the-box (see #1482)
The server parameter has been removed from xrdp-sesrun and xrdp-sesadmin
Compatibility with the existing sesman and xrdp configs is maintained for upgrades, but the older settings are warned about and ignored if found.
I've needed to create a lock file for the UNIX domain socket, as the listen test which can be used for TCP sockets to enforce a single listener doesn't work with UNIX domain sockets.

No additional features of UNIX domain sockets are yet implemented. That is for later.
I'm not expecting anyone to review the code yet, but comments/questions on the above would be welcome.","See #2233 for the regression fix.
@Nexarian - your point about VNC is interesting. As it stands, we need the 'ip' field for 'VNC', as the module only supports TCP connections, and not UDS connections. We could possibly change this - see #2234",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2214,2022-04-06T09:07:17Z,,2022-05-31T10:20:03Z,OPEN,False,4,1,2,https://github.com/elboulangero,Increase timeouts for some tests,1,[],https://github.com/neutrinolabs/xrdp/pull/2214,https://github.com/elboulangero,1,https://github.com/neutrinolabs/xrdp/pull/2214,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2214,2022-04-06T09:07:17Z,,2022-05-31T10:20:03Z,OPEN,False,4,1,2,https://github.com/elboulangero,Increase timeouts for some tests,1,[],https://github.com/neutrinolabs/xrdp/pull/2214,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/2214#issuecomment-1141945644,,@metalefty - we're waiting for feedback on this. See #2213,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2214,2022-04-06T09:07:17Z,,2022-05-31T10:20:03Z,OPEN,False,4,1,2,https://github.com/elboulangero,Increase timeouts for some tests,1,[],https://github.com/neutrinolabs/xrdp/pull/2214,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/2214#issuecomment-1141948623,,I see. Thank you for letting me know the current status.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2216,2022-04-06T11:04:33Z,2022-04-20T11:43:37Z,2022-04-20T11:43:41Z,MERGED,True,10,1,2,https://github.com/matt335672,Fixes a stream overflow in the test suite,1,[],https://github.com/neutrinolabs/xrdp/pull/2216,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/2216,"An overflow has been found in test_libxrdp_process_monitor_stream__with_sextuple_monitor_happy_path()
This is triggered when xrdp is built with --enable-devel-logging
Also, the logging sub-system is initialised for libxrdp tests. With this change, the test program generates this line when --enable-devel-logging is used:-
[20220406-12:03:44] [CORE ] [parser_stream_overflow_check(parse.c:49)] test_libxrdp_process_monitor_stream.c:221 Stream output buffer overflow. Size=233, pos=232, requested=4","An overflow has been found in test_libxrdp_process_monitor_stream__with_sextuple_monitor_happy_path()
This is triggered when xrdp is built with --enable-devel-logging
Also, the logging sub-system is initialised for libxrdp tests. With this change, the test program generates this line when --enable-devel-logging is used:-
[20220406-12:03:44] [CORE ] [parser_stream_overflow_check(parse.c:49)] test_libxrdp_process_monitor_stream.c:221 Stream output buffer overflow. Size=233, pos=232, requested=4",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2216,2022-04-06T11:04:33Z,2022-04-20T11:43:37Z,2022-04-20T11:43:41Z,MERGED,True,10,1,2,https://github.com/matt335672,Fixes a stream overflow in the test suite,1,[],https://github.com/neutrinolabs/xrdp/pull/2216,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/2216#issuecomment-1090142784,"An overflow has been found in test_libxrdp_process_monitor_stream__with_sextuple_monitor_happy_path()
This is triggered when xrdp is built with --enable-devel-logging
Also, the logging sub-system is initialised for libxrdp tests. With this change, the test program generates this line when --enable-devel-logging is used:-
[20220406-12:03:44] [CORE ] [parser_stream_overflow_check(parse.c:49)] test_libxrdp_process_monitor_stream.c:221 Stream output buffer overflow. Size=233, pos=232, requested=4","@Nexarian - can you take a look at this? I just found it when looking at another issue. For some reason I can't add you as a reviewer.
Thanks. I'll get on to the testing you asked for tomorrow.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2219,2022-04-07T15:06:28Z,2022-04-19T08:11:58Z,2022-04-19T08:11:58Z,MERGED,True,86,86,2,https://github.com/matt335672,Fix off-by-one errors in monitor resize logic,1,[],https://github.com/neutrinolabs/xrdp/pull/2219,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/2219,"Just found this while testing PR #2175 against #1928
First thing to say is that as a reviewer of this I missed it completely.
I was running on a Windows VM with two screens at 1920x1200 and 1280x1024. I was getting messages like this in the log:-
[20220407-14:52:46] [INFO ] [advance_resize_state_machine(xrdp_mm.c:1040)] process_dynamic_monitor_description: Processing resize to: 1281 x 1025. Advancing state from QUEUED to QUEUED. Previous state took 72124435 MS.
[20220407-14:52:46] [INFO ] [advance_resize_state_machine(xrdp_mm.c:1040)] process_dynamic_monitor_description: Processing resize to: 1281 x 1025. Advancing state from SERVER_VERSION_MESSAGE to XRDP_CORE_RESIZE. Previous state took 206 MS.
[20220407-15:18:12] [INFO ] [advance_resize_state_machine(xrdp_mm.c:1040)] process_dynamic_monitor_description: Processing resize to: 1921 x 1201. Advancing state from QUEUED to QUEUED. Previous state took 73650366 MS.
[20220407-15:18:12] [INFO ] [advance_resize_state_machine(xrdp_mm.c:1040)] process_dynamic_monitor_description: Processing resize to: 1921 x 1201. Advancing state from QUEUED to WMRZ_ENCODER_DELETE. Previous state took 0 MS.

There are clearly some other issues here around the state logging, but that isn't the point of this PR. The point is all the sizes are off-by-one.
I've traced this down to 4a0db63. The code in libxrdp_process_monitor_stream() is using the monitor width as the monitor right side, and the monitor height as the monitor bottom. I think these values-are-off-by-one. The code below addresses this.
@Nexarian - your thoughts please? Sorry I missed this in the review. Also, the tests for the CI are broken. I'm happy to fix these, as it will give me a chance to review this again.","Just found this while testing PR #2175 against #1928
First thing to say is that as a reviewer of this I missed it completely.
I was running on a Windows VM with two screens at 1920x1200 and 1280x1024. I was getting messages like this in the log:-
[20220407-14:52:46] [INFO ] [advance_resize_state_machine(xrdp_mm.c:1040)] process_dynamic_monitor_description: Processing resize to: 1281 x 1025. Advancing state from QUEUED to QUEUED. Previous state took 72124435 MS.
[20220407-14:52:46] [INFO ] [advance_resize_state_machine(xrdp_mm.c:1040)] process_dynamic_monitor_description: Processing resize to: 1281 x 1025. Advancing state from SERVER_VERSION_MESSAGE to XRDP_CORE_RESIZE. Previous state took 206 MS.
[20220407-15:18:12] [INFO ] [advance_resize_state_machine(xrdp_mm.c:1040)] process_dynamic_monitor_description: Processing resize to: 1921 x 1201. Advancing state from QUEUED to QUEUED. Previous state took 73650366 MS.
[20220407-15:18:12] [INFO ] [advance_resize_state_machine(xrdp_mm.c:1040)] process_dynamic_monitor_description: Processing resize to: 1921 x 1201. Advancing state from QUEUED to WMRZ_ENCODER_DELETE. Previous state took 0 MS.

There are clearly some other issues here around the state logging, but that isn't the point of this PR. The point is all the sizes are off-by-one.
I've traced this down to 4a0db63. The code in libxrdp_process_monitor_stream() is using the monitor width as the monitor right side, and the monitor height as the monitor bottom. I think these values-are-off-by-one. The code below addresses this.
@Nexarian - your thoughts please? Sorry I missed this in the review. Also, the tests for the CI are broken. I'm happy to fix these, as it will give me a chance to review this again.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2219,2022-04-07T15:06:28Z,2022-04-19T08:11:58Z,2022-04-19T08:11:58Z,MERGED,True,86,86,2,https://github.com/matt335672,Fix off-by-one errors in monitor resize logic,1,[],https://github.com/neutrinolabs/xrdp/pull/2219,https://github.com/Nexarian,2,https://github.com/neutrinolabs/xrdp/pull/2219#issuecomment-1092274855,"Just found this while testing PR #2175 against #1928
First thing to say is that as a reviewer of this I missed it completely.
I was running on a Windows VM with two screens at 1920x1200 and 1280x1024. I was getting messages like this in the log:-
[20220407-14:52:46] [INFO ] [advance_resize_state_machine(xrdp_mm.c:1040)] process_dynamic_monitor_description: Processing resize to: 1281 x 1025. Advancing state from QUEUED to QUEUED. Previous state took 72124435 MS.
[20220407-14:52:46] [INFO ] [advance_resize_state_machine(xrdp_mm.c:1040)] process_dynamic_monitor_description: Processing resize to: 1281 x 1025. Advancing state from SERVER_VERSION_MESSAGE to XRDP_CORE_RESIZE. Previous state took 206 MS.
[20220407-15:18:12] [INFO ] [advance_resize_state_machine(xrdp_mm.c:1040)] process_dynamic_monitor_description: Processing resize to: 1921 x 1201. Advancing state from QUEUED to QUEUED. Previous state took 73650366 MS.
[20220407-15:18:12] [INFO ] [advance_resize_state_machine(xrdp_mm.c:1040)] process_dynamic_monitor_description: Processing resize to: 1921 x 1201. Advancing state from QUEUED to WMRZ_ENCODER_DELETE. Previous state took 0 MS.

There are clearly some other issues here around the state logging, but that isn't the point of this PR. The point is all the sizes are off-by-one.
I've traced this down to 4a0db63. The code in libxrdp_process_monitor_stream() is using the monitor width as the monitor right side, and the monitor height as the monitor bottom. I think these values-are-off-by-one. The code below addresses this.
@Nexarian - your thoughts please? Sorry I missed this in the review. Also, the tests for the CI are broken. I'm happy to fix these, as it will give me a chance to review this again.","Here's what I think is happening. MSTSC is ""too honest"" -- It's giving the width and height in true, 1-based terms, but when we compute sizes, we want the zero based index.
I think this works, though upon reading the spec I'm not sure there's any light shed upon this issue.
Thanks for finding this, and I'm sorry you keep finding residual bugs in my work!",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2219,2022-04-07T15:06:28Z,2022-04-19T08:11:58Z,2022-04-19T08:11:58Z,MERGED,True,86,86,2,https://github.com/matt335672,Fix off-by-one errors in monitor resize logic,1,[],https://github.com/neutrinolabs/xrdp/pull/2219,https://github.com/Nexarian,3,https://github.com/neutrinolabs/xrdp/pull/2219#issuecomment-1092310965,"Just found this while testing PR #2175 against #1928
First thing to say is that as a reviewer of this I missed it completely.
I was running on a Windows VM with two screens at 1920x1200 and 1280x1024. I was getting messages like this in the log:-
[20220407-14:52:46] [INFO ] [advance_resize_state_machine(xrdp_mm.c:1040)] process_dynamic_monitor_description: Processing resize to: 1281 x 1025. Advancing state from QUEUED to QUEUED. Previous state took 72124435 MS.
[20220407-14:52:46] [INFO ] [advance_resize_state_machine(xrdp_mm.c:1040)] process_dynamic_monitor_description: Processing resize to: 1281 x 1025. Advancing state from SERVER_VERSION_MESSAGE to XRDP_CORE_RESIZE. Previous state took 206 MS.
[20220407-15:18:12] [INFO ] [advance_resize_state_machine(xrdp_mm.c:1040)] process_dynamic_monitor_description: Processing resize to: 1921 x 1201. Advancing state from QUEUED to QUEUED. Previous state took 73650366 MS.
[20220407-15:18:12] [INFO ] [advance_resize_state_machine(xrdp_mm.c:1040)] process_dynamic_monitor_description: Processing resize to: 1921 x 1201. Advancing state from QUEUED to WMRZ_ENCODER_DELETE. Previous state took 0 MS.

There are clearly some other issues here around the state logging, but that isn't the point of this PR. The point is all the sizes are off-by-one.
I've traced this down to 4a0db63. The code in libxrdp_process_monitor_stream() is using the monitor width as the monitor right side, and the monitor height as the monitor bottom. I think these values-are-off-by-one. The code below addresses this.
@Nexarian - your thoughts please? Sorry I missed this in the review. Also, the tests for the CI are broken. I'm happy to fix these, as it will give me a chance to review this again.","Also, you're declaring width and height inside the function. I thought, due to our focus on compatibility with old-school C compilers, that we needed to declare all of our variables at the beginning of the function? Or is that just polite convention?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2219,2022-04-07T15:06:28Z,2022-04-19T08:11:58Z,2022-04-19T08:11:58Z,MERGED,True,86,86,2,https://github.com/matt335672,Fix off-by-one errors in monitor resize logic,1,[],https://github.com/neutrinolabs/xrdp/pull/2219,https://github.com/matt335672,4,https://github.com/neutrinolabs/xrdp/pull/2219#issuecomment-1092698974,"Just found this while testing PR #2175 against #1928
First thing to say is that as a reviewer of this I missed it completely.
I was running on a Windows VM with two screens at 1920x1200 and 1280x1024. I was getting messages like this in the log:-
[20220407-14:52:46] [INFO ] [advance_resize_state_machine(xrdp_mm.c:1040)] process_dynamic_monitor_description: Processing resize to: 1281 x 1025. Advancing state from QUEUED to QUEUED. Previous state took 72124435 MS.
[20220407-14:52:46] [INFO ] [advance_resize_state_machine(xrdp_mm.c:1040)] process_dynamic_monitor_description: Processing resize to: 1281 x 1025. Advancing state from SERVER_VERSION_MESSAGE to XRDP_CORE_RESIZE. Previous state took 206 MS.
[20220407-15:18:12] [INFO ] [advance_resize_state_machine(xrdp_mm.c:1040)] process_dynamic_monitor_description: Processing resize to: 1921 x 1201. Advancing state from QUEUED to QUEUED. Previous state took 73650366 MS.
[20220407-15:18:12] [INFO ] [advance_resize_state_machine(xrdp_mm.c:1040)] process_dynamic_monitor_description: Processing resize to: 1921 x 1201. Advancing state from QUEUED to WMRZ_ENCODER_DELETE. Previous state took 0 MS.

There are clearly some other issues here around the state logging, but that isn't the point of this PR. The point is all the sizes are off-by-one.
I've traced this down to 4a0db63. The code in libxrdp_process_monitor_stream() is using the monitor width as the monitor right side, and the monitor height as the monitor bottom. I think these values-are-off-by-one. The code below addresses this.
@Nexarian - your thoughts please? Sorry I missed this in the review. Also, the tests for the CI are broken. I'm happy to fix these, as it will give me a chance to review this again.","Regarding the old-school compilers - the only problem we have with Jay's old SPARC build machine is that it can't cope with this:-
for (int i = 0; <etc>)
Other than that, there are plenty of instances of declarations after statements in the codebase, and also '//' comments which came in with C99. There's more context in #1722",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2219,2022-04-07T15:06:28Z,2022-04-19T08:11:58Z,2022-04-19T08:11:58Z,MERGED,True,86,86,2,https://github.com/matt335672,Fix off-by-one errors in monitor resize logic,1,[],https://github.com/neutrinolabs/xrdp/pull/2219,https://github.com/matt335672,5,https://github.com/neutrinolabs/xrdp/pull/2219#issuecomment-1092718013,"Just found this while testing PR #2175 against #1928
First thing to say is that as a reviewer of this I missed it completely.
I was running on a Windows VM with two screens at 1920x1200 and 1280x1024. I was getting messages like this in the log:-
[20220407-14:52:46] [INFO ] [advance_resize_state_machine(xrdp_mm.c:1040)] process_dynamic_monitor_description: Processing resize to: 1281 x 1025. Advancing state from QUEUED to QUEUED. Previous state took 72124435 MS.
[20220407-14:52:46] [INFO ] [advance_resize_state_machine(xrdp_mm.c:1040)] process_dynamic_monitor_description: Processing resize to: 1281 x 1025. Advancing state from SERVER_VERSION_MESSAGE to XRDP_CORE_RESIZE. Previous state took 206 MS.
[20220407-15:18:12] [INFO ] [advance_resize_state_machine(xrdp_mm.c:1040)] process_dynamic_monitor_description: Processing resize to: 1921 x 1201. Advancing state from QUEUED to QUEUED. Previous state took 73650366 MS.
[20220407-15:18:12] [INFO ] [advance_resize_state_machine(xrdp_mm.c:1040)] process_dynamic_monitor_description: Processing resize to: 1921 x 1201. Advancing state from QUEUED to WMRZ_ENCODER_DELETE. Previous state took 0 MS.

There are clearly some other issues here around the state logging, but that isn't the point of this PR. The point is all the sizes are off-by-one.
I've traced this down to 4a0db63. The code in libxrdp_process_monitor_stream() is using the monitor width as the monitor right side, and the monitor height as the monitor bottom. I think these values-are-off-by-one. The code below addresses this.
@Nexarian - your thoughts please? Sorry I missed this in the review. Also, the tests for the CI are broken. I'm happy to fix these, as it will give me a chance to review this again.","I don't think the spec isn't consistent in describing rectangles. Some bits of [MS-RDPBCGR] describe rectangles with (left, top, width, height) and other bits use (left, top, right, bottom). One example of the latter is TS_MONITOR_DEF. It uses the word 'inclusive' for the right and bottom.
The width is a number of pixels, and 'right and 'bottom' will be inclusive. So for a 4x4 monitor:-
  0123
0 ....
1 ....
2 ....
3 ....

Width is 4, left is 0, and right is 3, Height is 4, top is 0 and bottom is 3. In symbols, right = (left + width - 1) and bottom = (top + height - 1).
As for finding bugs, I can only apologise for not spotting this in the review. I'll try to get this PR fixed up today so we can talk about it. Next week is going to be tricky for me though as it's a bit full-on with family.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2219,2022-04-07T15:06:28Z,2022-04-19T08:11:58Z,2022-04-19T08:11:58Z,MERGED,True,86,86,2,https://github.com/matt335672,Fix off-by-one errors in monitor resize logic,1,[],https://github.com/neutrinolabs/xrdp/pull/2219,https://github.com/matt335672,6,https://github.com/neutrinolabs/xrdp/pull/2219#issuecomment-1092787542,"Just found this while testing PR #2175 against #1928
First thing to say is that as a reviewer of this I missed it completely.
I was running on a Windows VM with two screens at 1920x1200 and 1280x1024. I was getting messages like this in the log:-
[20220407-14:52:46] [INFO ] [advance_resize_state_machine(xrdp_mm.c:1040)] process_dynamic_monitor_description: Processing resize to: 1281 x 1025. Advancing state from QUEUED to QUEUED. Previous state took 72124435 MS.
[20220407-14:52:46] [INFO ] [advance_resize_state_machine(xrdp_mm.c:1040)] process_dynamic_monitor_description: Processing resize to: 1281 x 1025. Advancing state from SERVER_VERSION_MESSAGE to XRDP_CORE_RESIZE. Previous state took 206 MS.
[20220407-15:18:12] [INFO ] [advance_resize_state_machine(xrdp_mm.c:1040)] process_dynamic_monitor_description: Processing resize to: 1921 x 1201. Advancing state from QUEUED to QUEUED. Previous state took 73650366 MS.
[20220407-15:18:12] [INFO ] [advance_resize_state_machine(xrdp_mm.c:1040)] process_dynamic_monitor_description: Processing resize to: 1921 x 1201. Advancing state from QUEUED to WMRZ_ENCODER_DELETE. Previous state took 0 MS.

There are clearly some other issues here around the state logging, but that isn't the point of this PR. The point is all the sizes are off-by-one.
I've traced this down to 4a0db63. The code in libxrdp_process_monitor_stream() is using the monitor width as the monitor right side, and the monitor height as the monitor bottom. I think these values-are-off-by-one. The code below addresses this.
@Nexarian - your thoughts please? Sorry I missed this in the review. Also, the tests for the CI are broken. I'm happy to fix these, as it will give me a chance to review this again.","@Nexarian - I've rejigged the code and the tests to fix the off-by-one. CI now passes.
I've added some macros to test_libxrdp_process_monitor_stream__with_sextuple_monitor_happy_path() to try to make the logic clearer. Let me know is this works for you.
As i mentioned, I'm going to be struggling for time next week. I'll keep an eye on my email though in case you want this one and #2216 merging.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2219,2022-04-07T15:06:28Z,2022-04-19T08:11:58Z,2022-04-19T08:11:58Z,MERGED,True,86,86,2,https://github.com/matt335672,Fix off-by-one errors in monitor resize logic,1,[],https://github.com/neutrinolabs/xrdp/pull/2219,https://github.com/Nexarian,7,https://github.com/neutrinolabs/xrdp/pull/2219#issuecomment-1094515070,"Just found this while testing PR #2175 against #1928
First thing to say is that as a reviewer of this I missed it completely.
I was running on a Windows VM with two screens at 1920x1200 and 1280x1024. I was getting messages like this in the log:-
[20220407-14:52:46] [INFO ] [advance_resize_state_machine(xrdp_mm.c:1040)] process_dynamic_monitor_description: Processing resize to: 1281 x 1025. Advancing state from QUEUED to QUEUED. Previous state took 72124435 MS.
[20220407-14:52:46] [INFO ] [advance_resize_state_machine(xrdp_mm.c:1040)] process_dynamic_monitor_description: Processing resize to: 1281 x 1025. Advancing state from SERVER_VERSION_MESSAGE to XRDP_CORE_RESIZE. Previous state took 206 MS.
[20220407-15:18:12] [INFO ] [advance_resize_state_machine(xrdp_mm.c:1040)] process_dynamic_monitor_description: Processing resize to: 1921 x 1201. Advancing state from QUEUED to QUEUED. Previous state took 73650366 MS.
[20220407-15:18:12] [INFO ] [advance_resize_state_machine(xrdp_mm.c:1040)] process_dynamic_monitor_description: Processing resize to: 1921 x 1201. Advancing state from QUEUED to WMRZ_ENCODER_DELETE. Previous state took 0 MS.

There are clearly some other issues here around the state logging, but that isn't the point of this PR. The point is all the sizes are off-by-one.
I've traced this down to 4a0db63. The code in libxrdp_process_monitor_stream() is using the monitor width as the monitor right side, and the monitor height as the monitor bottom. I think these values-are-off-by-one. The code below addresses this.
@Nexarian - your thoughts please? Sorry I missed this in the review. Also, the tests for the CI are broken. I'm happy to fix these, as it will give me a chance to review this again.","I'm not sure if this is now correct because it changes session_width and session_height net calculations. Take a look at what xrdp_sec_process_mcs_data_monitors did before my last refactor. The +1 behavior of session_width and session_height was present there, and I was protecting it with the unit tests. If we believe that's wrong, that makes sense but we need to be SURE we're right here.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2219,2022-04-07T15:06:28Z,2022-04-19T08:11:58Z,2022-04-19T08:11:58Z,MERGED,True,86,86,2,https://github.com/matt335672,Fix off-by-one errors in monitor resize logic,1,[],https://github.com/neutrinolabs/xrdp/pull/2219,https://github.com/matt335672,8,https://github.com/neutrinolabs/xrdp/pull/2219#issuecomment-1094746641,"Just found this while testing PR #2175 against #1928
First thing to say is that as a reviewer of this I missed it completely.
I was running on a Windows VM with two screens at 1920x1200 and 1280x1024. I was getting messages like this in the log:-
[20220407-14:52:46] [INFO ] [advance_resize_state_machine(xrdp_mm.c:1040)] process_dynamic_monitor_description: Processing resize to: 1281 x 1025. Advancing state from QUEUED to QUEUED. Previous state took 72124435 MS.
[20220407-14:52:46] [INFO ] [advance_resize_state_machine(xrdp_mm.c:1040)] process_dynamic_monitor_description: Processing resize to: 1281 x 1025. Advancing state from SERVER_VERSION_MESSAGE to XRDP_CORE_RESIZE. Previous state took 206 MS.
[20220407-15:18:12] [INFO ] [advance_resize_state_machine(xrdp_mm.c:1040)] process_dynamic_monitor_description: Processing resize to: 1921 x 1201. Advancing state from QUEUED to QUEUED. Previous state took 73650366 MS.
[20220407-15:18:12] [INFO ] [advance_resize_state_machine(xrdp_mm.c:1040)] process_dynamic_monitor_description: Processing resize to: 1921 x 1201. Advancing state from QUEUED to WMRZ_ENCODER_DELETE. Previous state took 0 MS.

There are clearly some other issues here around the state logging, but that isn't the point of this PR. The point is all the sizes are off-by-one.
I've traced this down to 4a0db63. The code in libxrdp_process_monitor_stream() is using the monitor width as the monitor right side, and the monitor height as the monitor bottom. I think these values-are-off-by-one. The code below addresses this.
@Nexarian - your thoughts please? Sorry I missed this in the review. Also, the tests for the CI are broken. I'm happy to fix these, as it will give me a chance to review this again.","Yes - good question, I take the point about the unit tests, which is a good reason to have them.
I think the key to understanding this is to start with how the widths and heights of monitors stack up with multiple arrangements. There's nothing special about monitors, in that things just add up. So if I get a deck of 52 cards, and put it on top of another deck of 52 cards, I get a total height of 104 cards. Similarly, a monitor of 2160 pixels in top of another monitor of 1024 pixels gives a total height of 3184 pixels.
Let's go with an example closer to home. I'll stick with your hex monitor test, and reduce each monitor to 5 x 3 pixels, so we can see what's going on. Please excuse the ASCII art. There are probably better tools to use!
The monitors are arranged like this, if I remember correctly.
+-----+-----+-----+
|  1  |  2  |  3  |
+-----+-----+-----+
|  4  |  5  |  6  |
+-----+-----+-----+

To my mind, the pixel counts for 5x3 monitors look like this, using (0,0) for the top left pixel of each monitor:-
      <------------15------------->
      0 1 2 3 4 0 1 2 3 4 0 1 2 3 4
^  0  . . . . . @ @ @ @ @ . . . . .
|  1  . . . . . @ @ @ @ @ . . . . .
|  2  . . . . . @ @ @ @ @ . . . . .
6  0  @ @ @ @ @ . . . . . @ @ @ @ @
|  1  @ @ @ @ @ . . . . . @ @ @ @ @
V  2  @ @ @ @ @ . . . . . @ @ @ @ @

The composite width and height is a natural consequence of summing the individual monitor widths and heights:-
CompositeWidth = Width1 + Width2 + Width3 = 5 + 5 + 5 = 15
CompositeHeight = Height1 + Height2 = 3 + 3 = 6

The individual monitor co-ordinates work out as follows:-



Monitor
Left
Right
Top
Bottom




1
0
4
0
2


2
5
9
0
2


3
10
14
0
2


4
0
4
3
5


5
5
9
3
5


6
10
14
3
5



Taking the above table and scaling up to (3840x2160) gives:-



Monitor
Left
Right
Top
Bottom




1
0
3839
0
2159


2
3840
7679
0
2159


3
7680
11519
0
2159


4
0
3839
2160
4319


5
3840
7679
2160
4319


6
7680
11520
2160
4319



Total composite size = (3840 + 3840 + 3840, 2160 + 2160) = (11520, 4320)
Does that make sense?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2219,2022-04-07T15:06:28Z,2022-04-19T08:11:58Z,2022-04-19T08:11:58Z,MERGED,True,86,86,2,https://github.com/matt335672,Fix off-by-one errors in monitor resize logic,1,[],https://github.com/neutrinolabs/xrdp/pull/2219,https://github.com/Nexarian,9,https://github.com/neutrinolabs/xrdp/pull/2219#issuecomment-1100961442,"Just found this while testing PR #2175 against #1928
First thing to say is that as a reviewer of this I missed it completely.
I was running on a Windows VM with two screens at 1920x1200 and 1280x1024. I was getting messages like this in the log:-
[20220407-14:52:46] [INFO ] [advance_resize_state_machine(xrdp_mm.c:1040)] process_dynamic_monitor_description: Processing resize to: 1281 x 1025. Advancing state from QUEUED to QUEUED. Previous state took 72124435 MS.
[20220407-14:52:46] [INFO ] [advance_resize_state_machine(xrdp_mm.c:1040)] process_dynamic_monitor_description: Processing resize to: 1281 x 1025. Advancing state from SERVER_VERSION_MESSAGE to XRDP_CORE_RESIZE. Previous state took 206 MS.
[20220407-15:18:12] [INFO ] [advance_resize_state_machine(xrdp_mm.c:1040)] process_dynamic_monitor_description: Processing resize to: 1921 x 1201. Advancing state from QUEUED to QUEUED. Previous state took 73650366 MS.
[20220407-15:18:12] [INFO ] [advance_resize_state_machine(xrdp_mm.c:1040)] process_dynamic_monitor_description: Processing resize to: 1921 x 1201. Advancing state from QUEUED to WMRZ_ENCODER_DELETE. Previous state took 0 MS.

There are clearly some other issues here around the state logging, but that isn't the point of this PR. The point is all the sizes are off-by-one.
I've traced this down to 4a0db63. The code in libxrdp_process_monitor_stream() is using the monitor width as the monitor right side, and the monitor height as the monitor bottom. I think these values-are-off-by-one. The code below addresses this.
@Nexarian - your thoughts please? Sorry I missed this in the review. Also, the tests for the CI are broken. I'm happy to fix these, as it will give me a chance to review this again.","@matt335672 It makes sense, but I think the next thing we need to do is determine what the Windows RDP server does. I suspect that it does the +1 thing. It's the reference implementation, and, logic aside, we need to make sure XRDP matches that setup.
What I can do is test a remote connection to Windows with a FreeRDP connection that has multiple monitors configured, and see what it returns. In the past I've done this to figure out how to get the egfx branch to work with the Microsoft clients.
@aquesnel @jsorg71 Any thoughts on this?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2219,2022-04-07T15:06:28Z,2022-04-19T08:11:58Z,2022-04-19T08:11:58Z,MERGED,True,86,86,2,https://github.com/matt335672,Fix off-by-one errors in monitor resize logic,1,[],https://github.com/neutrinolabs/xrdp/pull/2219,https://github.com/aquesnel,10,https://github.com/neutrinolabs/xrdp/pull/2219#issuecomment-1101145517,"Just found this while testing PR #2175 against #1928
First thing to say is that as a reviewer of this I missed it completely.
I was running on a Windows VM with two screens at 1920x1200 and 1280x1024. I was getting messages like this in the log:-
[20220407-14:52:46] [INFO ] [advance_resize_state_machine(xrdp_mm.c:1040)] process_dynamic_monitor_description: Processing resize to: 1281 x 1025. Advancing state from QUEUED to QUEUED. Previous state took 72124435 MS.
[20220407-14:52:46] [INFO ] [advance_resize_state_machine(xrdp_mm.c:1040)] process_dynamic_monitor_description: Processing resize to: 1281 x 1025. Advancing state from SERVER_VERSION_MESSAGE to XRDP_CORE_RESIZE. Previous state took 206 MS.
[20220407-15:18:12] [INFO ] [advance_resize_state_machine(xrdp_mm.c:1040)] process_dynamic_monitor_description: Processing resize to: 1921 x 1201. Advancing state from QUEUED to QUEUED. Previous state took 73650366 MS.
[20220407-15:18:12] [INFO ] [advance_resize_state_machine(xrdp_mm.c:1040)] process_dynamic_monitor_description: Processing resize to: 1921 x 1201. Advancing state from QUEUED to WMRZ_ENCODER_DELETE. Previous state took 0 MS.

There are clearly some other issues here around the state logging, but that isn't the point of this PR. The point is all the sizes are off-by-one.
I've traced this down to 4a0db63. The code in libxrdp_process_monitor_stream() is using the monitor width as the monitor right side, and the monitor height as the monitor bottom. I think these values-are-off-by-one. The code below addresses this.
@Nexarian - your thoughts please? Sorry I missed this in the review. Also, the tests for the CI are broken. I'm happy to fix these, as it will give me a chance to review this again.","@Nexarian I agree that we should match the windows RDP server behavior.
I can help with getting the values from a connection between a Windows RDP server and a client.
I've been working on an tool that does RDP mitm and pdu parsing that works with Windows RDP to be able to understand the reference implemention more easily.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2219,2022-04-07T15:06:28Z,2022-04-19T08:11:58Z,2022-04-19T08:11:58Z,MERGED,True,86,86,2,https://github.com/matt335672,Fix off-by-one errors in monitor resize logic,1,[],https://github.com/neutrinolabs/xrdp/pull/2219,https://github.com/matt335672,11,https://github.com/neutrinolabs/xrdp/pull/2219#issuecomment-1101248267,"Just found this while testing PR #2175 against #1928
First thing to say is that as a reviewer of this I missed it completely.
I was running on a Windows VM with two screens at 1920x1200 and 1280x1024. I was getting messages like this in the log:-
[20220407-14:52:46] [INFO ] [advance_resize_state_machine(xrdp_mm.c:1040)] process_dynamic_monitor_description: Processing resize to: 1281 x 1025. Advancing state from QUEUED to QUEUED. Previous state took 72124435 MS.
[20220407-14:52:46] [INFO ] [advance_resize_state_machine(xrdp_mm.c:1040)] process_dynamic_monitor_description: Processing resize to: 1281 x 1025. Advancing state from SERVER_VERSION_MESSAGE to XRDP_CORE_RESIZE. Previous state took 206 MS.
[20220407-15:18:12] [INFO ] [advance_resize_state_machine(xrdp_mm.c:1040)] process_dynamic_monitor_description: Processing resize to: 1921 x 1201. Advancing state from QUEUED to QUEUED. Previous state took 73650366 MS.
[20220407-15:18:12] [INFO ] [advance_resize_state_machine(xrdp_mm.c:1040)] process_dynamic_monitor_description: Processing resize to: 1921 x 1201. Advancing state from QUEUED to WMRZ_ENCODER_DELETE. Previous state took 0 MS.

There are clearly some other issues here around the state logging, but that isn't the point of this PR. The point is all the sizes are off-by-one.
I've traced this down to 4a0db63. The code in libxrdp_process_monitor_stream() is using the monitor width as the monitor right side, and the monitor height as the monitor bottom. I think these values-are-off-by-one. The code below addresses this.
@Nexarian - your thoughts please? Sorry I missed this in the review. Also, the tests for the CI are broken. I'm happy to fix these, as it will give me a chance to review this again.","By all means do some more investigation - we need a common understanding of what's happening.
The existing code is producing odd behaviour in a Windows 10 client VM I have with two screens. If I use this to test #1928, I get scroll bars appearing on my VM windows which suggests the Linux desktop is being sized to a bigger physical size than is available. I can produce some screenshots of this if you like.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2219,2022-04-07T15:06:28Z,2022-04-19T08:11:58Z,2022-04-19T08:11:58Z,MERGED,True,86,86,2,https://github.com/matt335672,Fix off-by-one errors in monitor resize logic,1,[],https://github.com/neutrinolabs/xrdp/pull/2219,https://github.com/Nexarian,12,https://github.com/neutrinolabs/xrdp/pull/2219#issuecomment-1101996720,"Just found this while testing PR #2175 against #1928
First thing to say is that as a reviewer of this I missed it completely.
I was running on a Windows VM with two screens at 1920x1200 and 1280x1024. I was getting messages like this in the log:-
[20220407-14:52:46] [INFO ] [advance_resize_state_machine(xrdp_mm.c:1040)] process_dynamic_monitor_description: Processing resize to: 1281 x 1025. Advancing state from QUEUED to QUEUED. Previous state took 72124435 MS.
[20220407-14:52:46] [INFO ] [advance_resize_state_machine(xrdp_mm.c:1040)] process_dynamic_monitor_description: Processing resize to: 1281 x 1025. Advancing state from SERVER_VERSION_MESSAGE to XRDP_CORE_RESIZE. Previous state took 206 MS.
[20220407-15:18:12] [INFO ] [advance_resize_state_machine(xrdp_mm.c:1040)] process_dynamic_monitor_description: Processing resize to: 1921 x 1201. Advancing state from QUEUED to QUEUED. Previous state took 73650366 MS.
[20220407-15:18:12] [INFO ] [advance_resize_state_machine(xrdp_mm.c:1040)] process_dynamic_monitor_description: Processing resize to: 1921 x 1201. Advancing state from QUEUED to WMRZ_ENCODER_DELETE. Previous state took 0 MS.

There are clearly some other issues here around the state logging, but that isn't the point of this PR. The point is all the sizes are off-by-one.
I've traced this down to 4a0db63. The code in libxrdp_process_monitor_stream() is using the monitor width as the monitor right side, and the monitor height as the monitor bottom. I think these values-are-off-by-one. The code below addresses this.
@Nexarian - your thoughts please? Sorry I missed this in the review. Also, the tests for the CI are broken. I'm happy to fix these, as it will give me a chance to review this again.","The existing code is producing odd behaviour in a Windows 10 client VM I have with two screens. If I use this to test https://github.com/neutrinolabs/xrdp/issues/1928, I get scroll bars appearing on my VM windows which suggests the Linux desktop is being sized to a bigger physical size than is available. I can produce some screenshots of this if you like.
I see this too, actually, and that's actually a good enough reason to convince me. Go ahead and merge this in, and I'll rebase my  changes off of it tomorrow and we can keep experimenting. Your reasoning is sound.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2219,2022-04-07T15:06:28Z,2022-04-19T08:11:58Z,2022-04-19T08:11:58Z,MERGED,True,86,86,2,https://github.com/matt335672,Fix off-by-one errors in monitor resize logic,1,[],https://github.com/neutrinolabs/xrdp/pull/2219,https://github.com/aquesnel,13,https://github.com/neutrinolabs/xrdp/pull/2219#issuecomment-1102121369,"Just found this while testing PR #2175 against #1928
First thing to say is that as a reviewer of this I missed it completely.
I was running on a Windows VM with two screens at 1920x1200 and 1280x1024. I was getting messages like this in the log:-
[20220407-14:52:46] [INFO ] [advance_resize_state_machine(xrdp_mm.c:1040)] process_dynamic_monitor_description: Processing resize to: 1281 x 1025. Advancing state from QUEUED to QUEUED. Previous state took 72124435 MS.
[20220407-14:52:46] [INFO ] [advance_resize_state_machine(xrdp_mm.c:1040)] process_dynamic_monitor_description: Processing resize to: 1281 x 1025. Advancing state from SERVER_VERSION_MESSAGE to XRDP_CORE_RESIZE. Previous state took 206 MS.
[20220407-15:18:12] [INFO ] [advance_resize_state_machine(xrdp_mm.c:1040)] process_dynamic_monitor_description: Processing resize to: 1921 x 1201. Advancing state from QUEUED to QUEUED. Previous state took 73650366 MS.
[20220407-15:18:12] [INFO ] [advance_resize_state_machine(xrdp_mm.c:1040)] process_dynamic_monitor_description: Processing resize to: 1921 x 1201. Advancing state from QUEUED to WMRZ_ENCODER_DELETE. Previous state took 0 MS.

There are clearly some other issues here around the state logging, but that isn't the point of this PR. The point is all the sizes are off-by-one.
I've traced this down to 4a0db63. The code in libxrdp_process_monitor_stream() is using the monitor width as the monitor right side, and the monitor height as the monitor bottom. I think these values-are-off-by-one. The code below addresses this.
@Nexarian - your thoughts please? Sorry I missed this in the review. Also, the tests for the CI are broken. I'm happy to fix these, as it will give me a chance to review this again.","@Nexarian I was able to capture an RDP session with GFX multimon and resize between a Win10 RDP server and MSTSC as the client.
The output.win10.multimon.resize.zip file contains a pcap file of the full session.
My tool was able to parse the initial monitor config, but I ran into issues trying to parse the session up to the point of the monitor resize. For reference my monitors in this session are: 1920x1080 and 3840x2160. I hope this session capture is useful anyway.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2219,2022-04-07T15:06:28Z,2022-04-19T08:11:58Z,2022-04-19T08:11:58Z,MERGED,True,86,86,2,https://github.com/matt335672,Fix off-by-one errors in monitor resize logic,1,[],https://github.com/neutrinolabs/xrdp/pull/2219,https://github.com/matt335672,14,https://github.com/neutrinolabs/xrdp/pull/2219#issuecomment-1102259491,"Just found this while testing PR #2175 against #1928
First thing to say is that as a reviewer of this I missed it completely.
I was running on a Windows VM with two screens at 1920x1200 and 1280x1024. I was getting messages like this in the log:-
[20220407-14:52:46] [INFO ] [advance_resize_state_machine(xrdp_mm.c:1040)] process_dynamic_monitor_description: Processing resize to: 1281 x 1025. Advancing state from QUEUED to QUEUED. Previous state took 72124435 MS.
[20220407-14:52:46] [INFO ] [advance_resize_state_machine(xrdp_mm.c:1040)] process_dynamic_monitor_description: Processing resize to: 1281 x 1025. Advancing state from SERVER_VERSION_MESSAGE to XRDP_CORE_RESIZE. Previous state took 206 MS.
[20220407-15:18:12] [INFO ] [advance_resize_state_machine(xrdp_mm.c:1040)] process_dynamic_monitor_description: Processing resize to: 1921 x 1201. Advancing state from QUEUED to QUEUED. Previous state took 73650366 MS.
[20220407-15:18:12] [INFO ] [advance_resize_state_machine(xrdp_mm.c:1040)] process_dynamic_monitor_description: Processing resize to: 1921 x 1201. Advancing state from QUEUED to WMRZ_ENCODER_DELETE. Previous state took 0 MS.

There are clearly some other issues here around the state logging, but that isn't the point of this PR. The point is all the sizes are off-by-one.
I've traced this down to 4a0db63. The code in libxrdp_process_monitor_stream() is using the monitor width as the monitor right side, and the monitor height as the monitor bottom. I think these values-are-off-by-one. The code below addresses this.
@Nexarian - your thoughts please? Sorry I missed this in the review. Also, the tests for the CI are broken. I'm happy to fix these, as it will give me a chance to review this again.","Thank both - I'm sure we'll be continuing this conversation later.
I'll merge this now. I'm a bit short of time today I'm afraid, but the rest of the week  is better for chatting.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2223,2022-04-12T11:44:44Z,2022-04-21T15:16:37Z,2022-04-21T15:16:37Z,CLOSED,False,208,169,19,https://github.com/matt335672,Add PAM_RHOST support,2,[],https://github.com/neutrinolabs/xrdp/pull/2223,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/2223,"Fixes #392
Also, see #2221","Fixes #392
Also, see #2221",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2223,2022-04-12T11:44:44Z,2022-04-21T15:16:37Z,2022-04-21T15:16:37Z,CLOSED,False,208,169,19,https://github.com/matt335672,Add PAM_RHOST support,2,[],https://github.com/neutrinolabs/xrdp/pull/2223,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/2223#issuecomment-1100024671,"Fixes #392
Also, see #2221","I've had a think about this PR, and whereas it should work OK, I think this is a good opportunity to remove the need for g_get_ip_from_description() in os_calls.c.
Creating a connection description including the IP address, and then sending it over the link where we extract the IP address seems like a bit of a bodge to me.
I think we should rework the existing connection_description into a remote IP address and port field and use that instead. It should make the code easier to read. I'll start working on that basis.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2223,2022-04-12T11:44:44Z,2022-04-21T15:16:37Z,2022-04-21T15:16:37Z,CLOSED,False,208,169,19,https://github.com/matt335672,Add PAM_RHOST support,2,[],https://github.com/neutrinolabs/xrdp/pull/2223,https://github.com/matt335672,3,https://github.com/neutrinolabs/xrdp/pull/2223#issuecomment-1105341137,"Fixes #392
Also, see #2221","I've reworked this to replace the connection_description string with struct peer which contains the IP address and port of the client.
This allows the g_get_ip_from_description() to be replaced with simple struct member accesses.
There are two commits in this PR. The first reworks the connection_description, and once that's in place, adding PAM_RHOST support is extremely simple.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2223,2022-04-12T11:44:44Z,2022-04-21T15:16:37Z,2022-04-21T15:16:37Z,CLOSED,False,208,169,19,https://github.com/matt335672,Add PAM_RHOST support,2,[],https://github.com/neutrinolabs/xrdp/pull/2223,https://github.com/matt335672,4,https://github.com/neutrinolabs/xrdp/pull/2223#issuecomment-1105344736,"Fixes #392
Also, see #2221","I've just realised this breaks xorgxrdp with:-
  CC       rdpDraw.lo
In file included from rdp.h:36,
                 from rdpDraw.c:46:
/home/mjb/xrdp/common/xrdp_client_info.h:117:17: error: field ‘peer_details’ has incomplete type
  117 |     struct peer peer_details; /* Details of peer on other end of connection */

I'll need to fix this.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2223,2022-04-12T11:44:44Z,2022-04-21T15:16:37Z,2022-04-21T15:16:37Z,CLOSED,False,208,169,19,https://github.com/matt335672,Add PAM_RHOST support,2,[],https://github.com/neutrinolabs/xrdp/pull/2223,https://github.com/matt335672,5,https://github.com/neutrinolabs/xrdp/pull/2223#issuecomment-1105364694,"Fixes #392
Also, see #2221","This gets worse - I've just realised xrdp_client_info.h has client_addr and client_port fields which are doing exactly the same thing as the connection description.
I'm going to abandon this PR as it stands and re-submit it when I've cleaned that up too.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2226,2022-04-15T10:03:58Z,2022-04-15T10:11:03Z,2022-04-16T04:24:13Z,MERGED,True,1,1,1,https://github.com/matt335672,Bump FreeBSD CI version to 12.3,1,[],https://github.com/neutrinolabs/xrdp/pull/2226,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/2226,"Update to latest FreeBSD 12.x version for CI to prevent these kind of errors:-
./bootstrap
/usr/local/bin/autoconf
/usr/local/bin/automake
/usr/local/bin/libtool
/usr/local/bin/pkg-config
autoreconf-2.69: Entering directory `.'
autoreconf-2.69: configure.ac: not using Gettext
autoreconf-2.69: running: aclocal --force -I m4
ld-elf.so.1: /usr/local/lib/perl5/5.32/mach/CORE/libperl.so.5.32: Undefined symbol ""strerror_l@FBSD_1.6""
aclocal: error: /usr/local/bin/autom4te-2.69 failed with exit status: 1
autoreconf-2.69: aclocal failed with exit status: 1
ld-elf.so.1: /usr/local/lib/perl5/5.32/mach/CORE/libperl.so.5.32: Undefined symbol ""strerror_l@FBSD_1.6""

See also #1804","Update to latest FreeBSD 12.x version for CI to prevent these kind of errors:-
./bootstrap
/usr/local/bin/autoconf
/usr/local/bin/automake
/usr/local/bin/libtool
/usr/local/bin/pkg-config
autoreconf-2.69: Entering directory `.'
autoreconf-2.69: configure.ac: not using Gettext
autoreconf-2.69: running: aclocal --force -I m4
ld-elf.so.1: /usr/local/lib/perl5/5.32/mach/CORE/libperl.so.5.32: Undefined symbol ""strerror_l@FBSD_1.6""
aclocal: error: /usr/local/bin/autom4te-2.69 failed with exit status: 1
autoreconf-2.69: aclocal failed with exit status: 1
ld-elf.so.1: /usr/local/lib/perl5/5.32/mach/CORE/libperl.so.5.32: Undefined symbol ""strerror_l@FBSD_1.6""

See also #1804",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2226,2022-04-15T10:03:58Z,2022-04-15T10:11:03Z,2022-04-16T04:24:13Z,MERGED,True,1,1,1,https://github.com/matt335672,Bump FreeBSD CI version to 12.3,1,[],https://github.com/neutrinolabs/xrdp/pull/2226,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/2226#issuecomment-1100016448,"Update to latest FreeBSD 12.x version for CI to prevent these kind of errors:-
./bootstrap
/usr/local/bin/autoconf
/usr/local/bin/automake
/usr/local/bin/libtool
/usr/local/bin/pkg-config
autoreconf-2.69: Entering directory `.'
autoreconf-2.69: configure.ac: not using Gettext
autoreconf-2.69: running: aclocal --force -I m4
ld-elf.so.1: /usr/local/lib/perl5/5.32/mach/CORE/libperl.so.5.32: Undefined symbol ""strerror_l@FBSD_1.6""
aclocal: error: /usr/local/bin/autom4te-2.69 failed with exit status: 1
autoreconf-2.69: aclocal failed with exit status: 1
ld-elf.so.1: /usr/local/lib/perl5/5.32/mach/CORE/libperl.so.5.32: Undefined symbol ""strerror_l@FBSD_1.6""

See also #1804",@metalefty - you'll need to cherry-pick this one for the v0.9.x branch update too.,True,{'THUMBS_UP': ['https://github.com/metalefty']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2231,2022-04-18T17:09:52Z,2022-04-18T18:53:33Z,2022-04-18T18:56:22Z,MERGED,True,35,35,2,https://github.com/jsorg71,va_list parameter passing change,1,[],https://github.com/neutrinolabs/xrdp/pull/2231,https://github.com/jsorg71,1,https://github.com/neutrinolabs/xrdp/pull/2231,,,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2233,2022-04-20T08:46:17Z,2022-04-20T08:53:39Z,2022-04-20T08:57:33Z,MERGED,True,7,6,2,https://github.com/matt335672,Fix regression introduced with UDS,1,[],https://github.com/neutrinolabs/xrdp/pull/2233,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/2233,"It seems when I tested UDS, I didn't think to check with the new config file - I just used my old ones and checked compatibility.
@jsorg71 has supplied the patch to xup. @Nexarian pointed out that I've broken VNC too.
The VNC fix is somewhat different in that at the moment VNC always uses a TCP socket, so the ip field which I'd removed is still required.","It seems when I tested UDS, I didn't think to check with the new config file - I just used my old ones and checked compatibility.
@jsorg71 has supplied the patch to xup. @Nexarian pointed out that I've broken VNC too.
The VNC fix is somewhat different in that at the moment VNC always uses a TCP socket, so the ip field which I'd removed is still required.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2235,2022-04-20T10:07:12Z,2022-05-04T08:27:03Z,2022-05-04T08:27:03Z,MERGED,True,26,13,1,https://github.com/matt335672,(UDS) Don't ask user to remove IP setting for VNC connection,1,[],https://github.com/neutrinolabs/xrdp/pull/2235,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/2235,"This is related to #2207 and #2233
With #2233, the ip parameter has been restored for VNC connections. However, the following erroneous warning is logged:-
[20220324-15:41:40] [WARN ] [xrdp_wm_log_msg(xrdp_wm.c:2183)] xrdp_wm_log_msg: Parameter 'ip' is obsolete for sesman connections. Please remove from config
[20220324-15:41:40] [INFO ] [add_string_to_logwindow(xrdp_wm.c:2074)] Parameter 'ip' is obsolete for sesman connections. Please re
[20220324-15:41:40] [INFO ] [add_string_to_logwindow(xrdp_wm.c:2074)] move from config

The ip parameter is still needed for VNC connections.
This PR retains the warning for Xorg connections, where the ip parameter is not required, but ignores it for Xvnc connections. The warning is also simplified to fit on one line.
@Nexarian, @jsorg71 - do you think this is reasonable thing to do, or am I overthinking this? I could just remove the warning entirely.","This is related to #2207 and #2233
With #2233, the ip parameter has been restored for VNC connections. However, the following erroneous warning is logged:-
[20220324-15:41:40] [WARN ] [xrdp_wm_log_msg(xrdp_wm.c:2183)] xrdp_wm_log_msg: Parameter 'ip' is obsolete for sesman connections. Please remove from config
[20220324-15:41:40] [INFO ] [add_string_to_logwindow(xrdp_wm.c:2074)] Parameter 'ip' is obsolete for sesman connections. Please re
[20220324-15:41:40] [INFO ] [add_string_to_logwindow(xrdp_wm.c:2074)] move from config

The ip parameter is still needed for VNC connections.
This PR retains the warning for Xorg connections, where the ip parameter is not required, but ignores it for Xvnc connections. The warning is also simplified to fit on one line.
@Nexarian, @jsorg71 - do you think this is reasonable thing to do, or am I overthinking this? I could just remove the warning entirely.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2241,2022-04-26T07:31:59Z,2022-05-10T08:28:02Z,2022-05-11T09:58:11Z,MERGED,True,1,1,1,https://github.com/metalefty,Change development version to 0.9.80,1,[],https://github.com/neutrinolabs/xrdp/pull/2241,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/2241,"This idea is inspired by TigerVNC.

If I build the current git head from source, xrdp -v shows like this:
xrdp 0.9.19
  A Remote Desktop Protocol Server.
  Copyright (C) 2004-2020 Jay Sorg, Neutrino Labs, and all contributors.
  See https://github.com/neutrinolabs/xrdp for more information.

This is a little bit confusing because there are lots of changes in devel branch since 0.9.19. So until we release next major version, I give git head a tentative version 0.9.80.
TigerVNC always does this thing. After 1.11.0 release, set develop version to 1.11.80 and will release 1.20.0. After 1.20.0 release set develop version to 1.20.80...

TigerVNC/tigervnc@56c50c0

What do you think?","This idea is inspired by TigerVNC.

If I build the current git head from source, xrdp -v shows like this:
xrdp 0.9.19
  A Remote Desktop Protocol Server.
  Copyright (C) 2004-2020 Jay Sorg, Neutrino Labs, and all contributors.
  See https://github.com/neutrinolabs/xrdp for more information.

This is a little bit confusing because there are lots of changes in devel branch since 0.9.19. So until we release next major version, I give git head a tentative version 0.9.80.
TigerVNC always does this thing. After 1.11.0 release, set develop version to 1.11.80 and will release 1.20.0. After 1.20.0 release set develop version to 1.20.80...

TigerVNC/tigervnc@56c50c0

What do you think?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2241,2022-04-26T07:31:59Z,2022-05-10T08:28:02Z,2022-05-11T09:58:11Z,MERGED,True,1,1,1,https://github.com/metalefty,Change development version to 0.9.80,1,[],https://github.com/neutrinolabs/xrdp/pull/2241,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/2241#issuecomment-1112062010,"This idea is inspired by TigerVNC.

If I build the current git head from source, xrdp -v shows like this:
xrdp 0.9.19
  A Remote Desktop Protocol Server.
  Copyright (C) 2004-2020 Jay Sorg, Neutrino Labs, and all contributors.
  See https://github.com/neutrinolabs/xrdp for more information.

This is a little bit confusing because there are lots of changes in devel branch since 0.9.19. So until we release next major version, I give git head a tentative version 0.9.80.
TigerVNC always does this thing. After 1.11.0 release, set develop version to 1.11.80 and will release 1.20.0. After 1.20.0 release set develop version to 1.20.80...

TigerVNC/tigervnc@56c50c0

What do you think?",Yes - that seems like a very good idea to me.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2241,2022-04-26T07:31:59Z,2022-05-10T08:28:02Z,2022-05-11T09:58:11Z,MERGED,True,1,1,1,https://github.com/metalefty,Change development version to 0.9.80,1,[],https://github.com/neutrinolabs/xrdp/pull/2241,https://github.com/matt335672,3,https://github.com/neutrinolabs/xrdp/pull/2241#issuecomment-1122133932,"This idea is inspired by TigerVNC.

If I build the current git head from source, xrdp -v shows like this:
xrdp 0.9.19
  A Remote Desktop Protocol Server.
  Copyright (C) 2004-2020 Jay Sorg, Neutrino Labs, and all contributors.
  See https://github.com/neutrinolabs/xrdp for more information.

This is a little bit confusing because there are lots of changes in devel branch since 0.9.19. So until we release next major version, I give git head a tentative version 0.9.80.
TigerVNC always does this thing. After 1.11.0 release, set develop version to 1.11.80 and will release 1.20.0. After 1.20.0 release set develop version to 1.20.80...

TigerVNC/tigervnc@56c50c0

What do you think?","@metalefty - what do you think the next major version number should be? v0.10.1 ? We'll need to start referring to it soon.
Thanks.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2241,2022-04-26T07:31:59Z,2022-05-10T08:28:02Z,2022-05-11T09:58:11Z,MERGED,True,1,1,1,https://github.com/metalefty,Change development version to 0.9.80,1,[],https://github.com/neutrinolabs/xrdp/pull/2241,https://github.com/metalefty,4,https://github.com/neutrinolabs/xrdp/pull/2241#issuecomment-1123478393,"This idea is inspired by TigerVNC.

If I build the current git head from source, xrdp -v shows like this:
xrdp 0.9.19
  A Remote Desktop Protocol Server.
  Copyright (C) 2004-2020 Jay Sorg, Neutrino Labs, and all contributors.
  See https://github.com/neutrinolabs/xrdp for more information.

This is a little bit confusing because there are lots of changes in devel branch since 0.9.19. So until we release next major version, I give git head a tentative version 0.9.80.
TigerVNC always does this thing. After 1.11.0 release, set develop version to 1.11.80 and will release 1.20.0. After 1.20.0 release set develop version to 1.20.80...

TigerVNC/tigervnc@56c50c0

What do you think?",I'll raise a discussion later.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2247,2022-05-03T10:03:58Z,2022-05-04T08:26:36Z,2022-05-04T08:26:40Z,MERGED,True,3,60,3,https://github.com/matt335672,Remove TCP socket support from chansrv,1,[],https://github.com/neutrinolabs/xrdp/pull/2247,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/2247,"The code in xrdp_mm.c to connect to chansrv over a TCP socket has been removed, with the move to UDS (see 0db849f). This PR simply removes the chansrv TCP listening code. Without doing this, some configurations result in a failure of xrdp to connect to chansrv.","The code in xrdp_mm.c to connect to chansrv over a TCP socket has been removed, with the move to UDS (see 0db849f). This PR simply removes the chansrv TCP listening code. Without doing this, some configurations result in a failure of xrdp to connect to chansrv.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2247,2022-05-03T10:03:58Z,2022-05-04T08:26:36Z,2022-05-04T08:26:40Z,MERGED,True,3,60,3,https://github.com/matt335672,Remove TCP socket support from chansrv,1,[],https://github.com/neutrinolabs/xrdp/pull/2247,https://github.com/Nexarian,2,https://github.com/neutrinolabs/xrdp/pull/2247#issuecomment-1116106779,"The code in xrdp_mm.c to connect to chansrv over a TCP socket has been removed, with the move to UDS (see 0db849f). This PR simply removes the chansrv TCP listening code. Without doing this, some configurations result in a failure of xrdp to connect to chansrv.",Is this the fix for the startup delay that we were talking about over Gitter?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2251,2022-05-05T13:18:57Z,2022-05-19T09:59:26Z,2022-05-19T09:59:27Z,MERGED,True,999,541,32,https://github.com/matt335672,Refactor ip address handling,6,[],https://github.com/neutrinolabs/xrdp/pull/2251,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/2251,"Fixes #392 #2239
Replacement for the withdrawn #2223
The main reason for withdrawing #2223 was I discovered there were two separate places in the xrdp_client_info structure which described the currently connected client:-


The connection_description field. This was originally (and confusingly) called client_ip, and introduced by commit d797b2c for xrdp v0.6.0


The client_addr and client_port fields introduced by commit 2536946 for xrdp v0.8.0


In terms of maintainability and readability, it made sense to unify these two sets of fields into a single set of fields.
Another confusion is the presence of the 'C' argument to the session allocation policy in sesman.ini. The code for this in sesman uses the connection_description field. This is explored further in #2239
This series of commits does the following:-

Replaces connection_description, client_addr and client_port with two unified fields in xrdp_client_info. These fields are
client_ip and client_description. they are used as follows:-

for AF_INET/AF_INET6 connections only, client_ip contains the IP address of the client. For other connection types (e.g. AF_UNIX and AF_VSOCK) this field is empty.
for all connection types, client_description contains a string which describes the connected client.


PAM_RHOST support is added (#392) for PAM stacks that can make use of this information.
A couple of utility functions g_bitmask_to_charstr() and g_charstr_to_bitmask() are added to string_calls.c. These are intended for parsing the Policy string in sesman.ini in a more flexible way.
Unit tests are added for the above.
The session allocation policy code is updated as discussed in #2239. Not only does this make the policy more flexible (see, for example #2099), but it makes it possible to trace the action of session matching by enabling standard debug logging.

This PR changes the public interface of the session allocation policy in sesman.ini. Effectively, the old 'C' policy is achieved by setting the policy to 'Separate'. This is I believe a little clearer, and I also think it is unlikely there are many users of the 'Separate' policy anyway. A use of the old 'C' flag is not honoured, but a warning is currently generated if it is discovered.","Fixes #392 #2239
Replacement for the withdrawn #2223
The main reason for withdrawing #2223 was I discovered there were two separate places in the xrdp_client_info structure which described the currently connected client:-


The connection_description field. This was originally (and confusingly) called client_ip, and introduced by commit d797b2c for xrdp v0.6.0


The client_addr and client_port fields introduced by commit 2536946 for xrdp v0.8.0


In terms of maintainability and readability, it made sense to unify these two sets of fields into a single set of fields.
Another confusion is the presence of the 'C' argument to the session allocation policy in sesman.ini. The code for this in sesman uses the connection_description field. This is explored further in #2239
This series of commits does the following:-

Replaces connection_description, client_addr and client_port with two unified fields in xrdp_client_info. These fields are
client_ip and client_description. they are used as follows:-

for AF_INET/AF_INET6 connections only, client_ip contains the IP address of the client. For other connection types (e.g. AF_UNIX and AF_VSOCK) this field is empty.
for all connection types, client_description contains a string which describes the connected client.


PAM_RHOST support is added (#392) for PAM stacks that can make use of this information.
A couple of utility functions g_bitmask_to_charstr() and g_charstr_to_bitmask() are added to string_calls.c. These are intended for parsing the Policy string in sesman.ini in a more flexible way.
Unit tests are added for the above.
The session allocation policy code is updated as discussed in #2239. Not only does this make the policy more flexible (see, for example #2099), but it makes it possible to trace the action of session matching by enabling standard debug logging.

This PR changes the public interface of the session allocation policy in sesman.ini. Effectively, the old 'C' policy is achieved by setting the policy to 'Separate'. This is I believe a little clearer, and I also think it is unlikely there are many users of the 'Separate' policy anyway. A use of the old 'C' flag is not honoured, but a warning is currently generated if it is discovered.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2256,2022-05-09T09:28:45Z,2022-05-09T09:35:57Z,2022-05-09T09:36:06Z,MERGED,True,1,1,1,https://github.com/matt335672,Merge rfxcodec staging changes for GFX,1,[],https://github.com/neutrinolabs/xrdp/pull/2256,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/2256,Pull neutrinolabs/librfxcodec#50 into xrdp devel,Pull neutrinolabs/librfxcodec#50 into xrdp devel,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2256,2022-05-09T09:28:45Z,2022-05-09T09:35:57Z,2022-05-09T09:36:06Z,MERGED,True,1,1,1,https://github.com/matt335672,Merge rfxcodec staging changes for GFX,1,[],https://github.com/neutrinolabs/xrdp/pull/2256,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/2256#issuecomment-1120875006,Pull neutrinolabs/librfxcodec#50 into xrdp devel,Thanks!,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2257,2022-05-10T11:15:17Z,2022-05-11T08:57:45Z,2022-05-11T08:57:51Z,MERGED,True,5,3,3,https://github.com/matt335672,Allow xrdp to be built with --disable-static,1,[],https://github.com/neutrinolabs/xrdp/pull/2257,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/2257,"Fixes #1467
This PR allows xrdp to be built with --disable-static, which prevents 'make install' installing additional unwanted .a files.","Fixes #1467
This PR allows xrdp to be built with --disable-static, which prevents 'make install' installing additional unwanted .a files.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2263,2022-05-14T08:58:04Z,,2022-05-16T10:44:04Z,OPEN,False,13056,316,42,https://github.com/unstabler,Implement VideoToolbox-powered H.264 encoder for macOS,13,[],https://github.com/neutrinolabs/xrdp/pull/2263,https://github.com/unstabler,1,https://github.com/neutrinolabs/xrdp/pull/2263,"Changes / Notes


This PR is based / depends on Nexarian/xrdp/mainline_merge


This PR adds H.264/yuv420 support for macOS.


This PR contains Obj-C codes; these codes may not meet coding convention of this repository.  (I thought it had to be written in Objective-C, but it wasn't.)


Initialization of VTCompressionSession will fail if fork=true in xrdp.ini


TODO

 add support for dynamic-sized drects
 set kVTVideoEncoderSpecification_EnableHardwareAcceleratedVideoEncoder to true
 (if possible) rewrite codes in C","Changes / Notes


This PR is based / depends on Nexarian/xrdp/mainline_merge


This PR adds H.264/yuv420 support for macOS.


This PR contains Obj-C codes; these codes may not meet coding convention of this repository.  (I thought it had to be written in Objective-C, but it wasn't.)


Initialization of VTCompressionSession will fail if fork=true in xrdp.ini


TODO

 add support for dynamic-sized drects
 set kVTVideoEncoderSpecification_EnableHardwareAcceleratedVideoEncoder to true
 (if possible) rewrite codes in C",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2263,2022-05-14T08:58:04Z,,2022-05-16T10:44:04Z,OPEN,False,13056,316,42,https://github.com/unstabler,Implement VideoToolbox-powered H.264 encoder for macOS,13,[],https://github.com/neutrinolabs/xrdp/pull/2263,https://github.com/Nexarian,2,https://github.com/neutrinolabs/xrdp/pull/2263#issuecomment-1126729416,"Changes / Notes


This PR is based / depends on Nexarian/xrdp/mainline_merge


This PR adds H.264/yuv420 support for macOS.


This PR contains Obj-C codes; these codes may not meet coding convention of this repository.  (I thought it had to be written in Objective-C, but it wasn't.)


Initialization of VTCompressionSession will fail if fork=true in xrdp.ini


TODO

 add support for dynamic-sized drects
 set kVTVideoEncoderSpecification_EnableHardwareAcceleratedVideoEncoder to true
 (if possible) rewrite codes in C","@jsorg71 and I are working on how to merge in everything into devel, but I'm afraid it might be a while. There's a lot to test and make sure is right. I suggest taking the pieces from mainline merge and working with us to build a plan on what should go first, and what can wait.",True,{'THUMBS_UP': ['https://github.com/unstabler']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2263,2022-05-14T08:58:04Z,,2022-05-16T10:44:04Z,OPEN,False,13056,316,42,https://github.com/unstabler,Implement VideoToolbox-powered H.264 encoder for macOS,13,[],https://github.com/neutrinolabs/xrdp/pull/2263,https://github.com/matt335672,3,https://github.com/neutrinolabs/xrdp/pull/2263#issuecomment-1127512247,"Changes / Notes


This PR is based / depends on Nexarian/xrdp/mainline_merge


This PR adds H.264/yuv420 support for macOS.


This PR contains Obj-C codes; these codes may not meet coding convention of this repository.  (I thought it had to be written in Objective-C, but it wasn't.)


Initialization of VTCompressionSession will fail if fork=true in xrdp.ini


TODO

 add support for dynamic-sized drects
 set kVTVideoEncoderSpecification_EnableHardwareAcceleratedVideoEncoder to true
 (if possible) rewrite codes in C","I agree with @Nexarian's comment above. I'm happy to contribute to the review when you think the time is right. In the meantime, the CI pipeline should at least now be working on this PR.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2265,2022-05-16T09:56:50Z,,2022-06-03T12:59:41Z,OPEN,False,345,76,27,https://github.com/iskunk,Hardening xrdp with AppArmor,3,[],https://github.com/neutrinolabs/xrdp/pull/2265,https://github.com/iskunk,1,https://github.com/neutrinolabs/xrdp/pull/2265,"For some time now, I've been wanting to develop AppArmor profiles to confine xrdp and its components while running. Given that the xrdp process is open to the network, and xrdp-sesman runs as root, these are good candidates for security hardening.
Code changes
I found that some modifications to the code are necessary, however, to make this feasible. These changes are in my first commit, and they are relatively minor:


The function g_file_open() is used in numerous places to read things like configuration files. However, it is also used for writing files (e.g. PID files). The meat of the function, on the POSIX side, is as follows:
    rv =  open(file_name, O_RDWR | O_CREAT, S_IRUSR | S_IWUSR);

    if (rv == -1)
    {
        /* can't open read / write, try to open read only */
        rv =  open(file_name, O_RDONLY);
    }

This ""try at first to open the file read/write"" approach does not look good in a confinement framework. With AppArmor enabled, I see messages like this in the system log:
Mar 29 17:13:05 darkstar kernel: [  494.847515] audit: type=1400 audit(1648588385.232:73): apparmor=""DENIED"" operation=""mknod"" profile=""/usr/sbin/xrdp"" name=""/etc/xrdp/xrdp_keyboard.ini"" pid=1922 comm=""xrdp"" requested_mask=""c"" denied_mask=""c"" fsuid=123 ouid=123

At first, this left me scratching my head thinking, ""Why is xrdp trying to write to the keyboard config file?"" This didn't prevent xrdp from running correctly (as can happen with AppArmor if you're not careful), but security-minded admins would look askance at this.
There is a different call in the xrdp code that is used in a few places, that gives proper read-only access:
    fd = g_file_open_ex(file_name, 1, 0, 0, 0);

The parameters are four flags, requesting any combination of read access, write access, file creation, and file truncation. Most of the time, however, the above combination is used.
The first change I made was to turn all the g_file_open() calls that appear to need only read access, to use a proper read-only call. At first, I replaced them with calls like the above g_file_open_ex() example. But I realized that this function call is not very clear as to what it's doing unless you have the function signature in front of you, and it's used in exactly this form numerous times throughout the code. So I added a new function g_file_open_ro() that wraps this specific combination, and made my edits use that instead.
(Philosophically speaking, it would probably be better to have g_file_open() return a read-only descriptor, and add a new function like g_file_open_rw() or g_file_open_write() to return a writable one, so that the request for write access is explicit. But that's beyond the scope of this change.)


When the X server is executed, xrdp uses (when available) the Linux kernel's ""no new privileges"" feature to avoid potential fallout from invoking a setuid-root X server binary. This is a good thing to do, from a security perspective---but paradoxically, it gets in the way of further security hardening via AppArmor.
As it happens, the NoNewPrivs flag on a process prevents AppArmor from changing its confinement profile at all, even if the destination profile is more restrictive than the source one. What this means for xrdp is that the X server cannot be confined using a different, narrower profile than its parent (xrdp-sesman). If I attempt to do so, I get an error like this in the system log:
Apr  1 01:26:53 darkstar kernel: [ 4711.096244] audit: type=1400 audit(1648790813.552:691): apparmor=""DENIED"" operation=""exec"" info=""no new privs"" error=-1 profile=""xrdp-sesman"" name=""/usr/lib/xorg/Xorg"" pid=32353 comm=""xrdp-sesman"" requested_mask=""x"" denied_mask=""x"" fsuid=1000 ouid=0 target=""xrdp-sesman//xorg""

This is not ideal, because the X server needs access to a lot fewer things than xrdp-sesman---and, in turn, the X server needs a few things that xrdp-sesman can do without. The two processes should not run with the same set of permissions.
I didn't want to get rid of the PR_SET_NO_NEW_PRIVS functionality, and I wanted to avoid adding a new configuration option, so what I did was add a check: If AppArmor is loaded, and the process is already confined in some way, then don't set NoNewPrivs. This is done by examining the content of /proc/self/attr/apparmor/current. The check is performed in a fail-safe way, so if anything goes wrong, the NoNewPrivs transition remains in effect.


Apparmor profiles
My second commit adds the new profiles. Some notes on these:


These profiles have been developed and tested on Ubuntu.


I tested only with Xorg and Xvnc (specifically Xtigervnc). I don't have the setup to test vnc-any or neutrinordp-any.


My changes are to the latest Git devel branch, but I tested by applying them to the Debian 0.9.19 package and compiling it on Ubuntu. (Ubuntu does not have 0.9.19 yet, as of this writing.)


I accommodated the FUSE stuff so that users can login/logout without issue, but I have no idea how to test that functionality.


The profile filenames follow the standard AppArmor convention of reflecting the absolute path of the installed binary. That said, the filenames are arbitrary, and are not parsed in any way.


The profiles themselves do contain absolute paths to various binaries, as AppArmor requires. These can be handled by parameterization (see e.g. @{Xorg} in the usr.sbin.xrdp-sesman profile), alternation (AppArmor supports {a,b,c} syntax in paths), and of course build-time substitutions @like_this@.


The profiles can be enabled by copying them into /etc/apparmor.d/, running /etc/init.d/apparmor force-reload (or rebooting), and restarting xrdp. Any prohibited actions will appear in the system log with apparmor=""DENIED"".


The profiles, as written, are in ""enforce"" mode. If you would like to experiment, you may want to enable them in ""complain"" mode. This will cause AppArmor to allow the application to do whatever it wants, but still log anything that it would have prohibited in ""enforce"" mode. All that is needed is to symlink the profiles into the /etc/apparmor.d/force-complain/ directory, and run /etc/init.d/apparmor force-reload (or reboot). Then, watch your system log for apparmor=""ALLOWED"" messages.
(Additionally, any deny AppArmor directives should be preceded with audit [if not already present] so that violations of same are logged. Normally, deny directives request ""silent deny"" behavior.)


Further work


Careful testing of the more advanced xrdp functionality will be needed, to ensure that the AppArmor profiles allow the necessary access. I've covered the basic use cases, but of course there are going to be more exotic setups that need to be supported.


Some adaptation to other Linux distributions will likely be needed. My experience is only with Debian/Ubuntu, however, so I'm not in a good position to address this.


There is one major hole in these AppArmor profiles, which will require additional work to address. It is this line in usr.sbin.xrdp-sesman:
  /etc/xrdp/startwm.sh Uxr,

This allows startwm.sh to be executed without confinement. The user session cannot run within the tightly-defined profile for xrdp-sesman; in fact, it probably can't run (or at least normally doesn't run) in any AppArmor profile at all. So this line allows that script an ""escape hatch"" out of the restrictions imposed on xrdp-sesman.
Because this is a shell script, however, there is a risk that could allow an attacker to take advantage of the ""escape hatch."" Rather than explain the issue here, I will link this excellent article that describes it in detail. (This is an old article, hence the Wayback link, but its analysis still reflects the situation today.)
The current versions of the startwm.sh script rely on xrdp-sesman setting up PATH and LANG variables (using pam_env) prior to its invocation. However, in an environment where this script represents a loosening of process confinement, at least PATH has to be treated as ""tainted"" data potentially originating from an attacker.
The simplest thing to do would be to put e.g. PATH=/bin:/usr/bin at the top of the script, and then set up PATH/LANG properly in shell space. A more complex solution would be to have a separate helper program for this: this helper would be executed unconfined, and then it does the pam_env stuff, reads DefaultWindowManager or whatever from sesman.ini, and finally exec()s the program. (Importantly, this helper cannot take arguments, as they may come from an attacker and AppArmor rules cannot match against those.)


I'll be happy to answer any questions, and revise these changes as needed.","For some time now, I've been wanting to develop AppArmor profiles to confine xrdp and its components while running. Given that the xrdp process is open to the network, and xrdp-sesman runs as root, these are good candidates for security hardening.
Code changes
I found that some modifications to the code are necessary, however, to make this feasible. These changes are in my first commit, and they are relatively minor:


The function g_file_open() is used in numerous places to read things like configuration files. However, it is also used for writing files (e.g. PID files). The meat of the function, on the POSIX side, is as follows:
    rv =  open(file_name, O_RDWR | O_CREAT, S_IRUSR | S_IWUSR);

    if (rv == -1)
    {
        /* can't open read / write, try to open read only */
        rv =  open(file_name, O_RDONLY);
    }

This ""try at first to open the file read/write"" approach does not look good in a confinement framework. With AppArmor enabled, I see messages like this in the system log:
Mar 29 17:13:05 darkstar kernel: [  494.847515] audit: type=1400 audit(1648588385.232:73): apparmor=""DENIED"" operation=""mknod"" profile=""/usr/sbin/xrdp"" name=""/etc/xrdp/xrdp_keyboard.ini"" pid=1922 comm=""xrdp"" requested_mask=""c"" denied_mask=""c"" fsuid=123 ouid=123

At first, this left me scratching my head thinking, ""Why is xrdp trying to write to the keyboard config file?"" This didn't prevent xrdp from running correctly (as can happen with AppArmor if you're not careful), but security-minded admins would look askance at this.
There is a different call in the xrdp code that is used in a few places, that gives proper read-only access:
    fd = g_file_open_ex(file_name, 1, 0, 0, 0);

The parameters are four flags, requesting any combination of read access, write access, file creation, and file truncation. Most of the time, however, the above combination is used.
The first change I made was to turn all the g_file_open() calls that appear to need only read access, to use a proper read-only call. At first, I replaced them with calls like the above g_file_open_ex() example. But I realized that this function call is not very clear as to what it's doing unless you have the function signature in front of you, and it's used in exactly this form numerous times throughout the code. So I added a new function g_file_open_ro() that wraps this specific combination, and made my edits use that instead.
(Philosophically speaking, it would probably be better to have g_file_open() return a read-only descriptor, and add a new function like g_file_open_rw() or g_file_open_write() to return a writable one, so that the request for write access is explicit. But that's beyond the scope of this change.)


When the X server is executed, xrdp uses (when available) the Linux kernel's ""no new privileges"" feature to avoid potential fallout from invoking a setuid-root X server binary. This is a good thing to do, from a security perspective---but paradoxically, it gets in the way of further security hardening via AppArmor.
As it happens, the NoNewPrivs flag on a process prevents AppArmor from changing its confinement profile at all, even if the destination profile is more restrictive than the source one. What this means for xrdp is that the X server cannot be confined using a different, narrower profile than its parent (xrdp-sesman). If I attempt to do so, I get an error like this in the system log:
Apr  1 01:26:53 darkstar kernel: [ 4711.096244] audit: type=1400 audit(1648790813.552:691): apparmor=""DENIED"" operation=""exec"" info=""no new privs"" error=-1 profile=""xrdp-sesman"" name=""/usr/lib/xorg/Xorg"" pid=32353 comm=""xrdp-sesman"" requested_mask=""x"" denied_mask=""x"" fsuid=1000 ouid=0 target=""xrdp-sesman//xorg""

This is not ideal, because the X server needs access to a lot fewer things than xrdp-sesman---and, in turn, the X server needs a few things that xrdp-sesman can do without. The two processes should not run with the same set of permissions.
I didn't want to get rid of the PR_SET_NO_NEW_PRIVS functionality, and I wanted to avoid adding a new configuration option, so what I did was add a check: If AppArmor is loaded, and the process is already confined in some way, then don't set NoNewPrivs. This is done by examining the content of /proc/self/attr/apparmor/current. The check is performed in a fail-safe way, so if anything goes wrong, the NoNewPrivs transition remains in effect.


Apparmor profiles
My second commit adds the new profiles. Some notes on these:


These profiles have been developed and tested on Ubuntu.


I tested only with Xorg and Xvnc (specifically Xtigervnc). I don't have the setup to test vnc-any or neutrinordp-any.


My changes are to the latest Git devel branch, but I tested by applying them to the Debian 0.9.19 package and compiling it on Ubuntu. (Ubuntu does not have 0.9.19 yet, as of this writing.)


I accommodated the FUSE stuff so that users can login/logout without issue, but I have no idea how to test that functionality.


The profile filenames follow the standard AppArmor convention of reflecting the absolute path of the installed binary. That said, the filenames are arbitrary, and are not parsed in any way.


The profiles themselves do contain absolute paths to various binaries, as AppArmor requires. These can be handled by parameterization (see e.g. @{Xorg} in the usr.sbin.xrdp-sesman profile), alternation (AppArmor supports {a,b,c} syntax in paths), and of course build-time substitutions @like_this@.


The profiles can be enabled by copying them into /etc/apparmor.d/, running /etc/init.d/apparmor force-reload (or rebooting), and restarting xrdp. Any prohibited actions will appear in the system log with apparmor=""DENIED"".


The profiles, as written, are in ""enforce"" mode. If you would like to experiment, you may want to enable them in ""complain"" mode. This will cause AppArmor to allow the application to do whatever it wants, but still log anything that it would have prohibited in ""enforce"" mode. All that is needed is to symlink the profiles into the /etc/apparmor.d/force-complain/ directory, and run /etc/init.d/apparmor force-reload (or reboot). Then, watch your system log for apparmor=""ALLOWED"" messages.
(Additionally, any deny AppArmor directives should be preceded with audit [if not already present] so that violations of same are logged. Normally, deny directives request ""silent deny"" behavior.)


Further work


Careful testing of the more advanced xrdp functionality will be needed, to ensure that the AppArmor profiles allow the necessary access. I've covered the basic use cases, but of course there are going to be more exotic setups that need to be supported.


Some adaptation to other Linux distributions will likely be needed. My experience is only with Debian/Ubuntu, however, so I'm not in a good position to address this.


There is one major hole in these AppArmor profiles, which will require additional work to address. It is this line in usr.sbin.xrdp-sesman:
  /etc/xrdp/startwm.sh Uxr,

This allows startwm.sh to be executed without confinement. The user session cannot run within the tightly-defined profile for xrdp-sesman; in fact, it probably can't run (or at least normally doesn't run) in any AppArmor profile at all. So this line allows that script an ""escape hatch"" out of the restrictions imposed on xrdp-sesman.
Because this is a shell script, however, there is a risk that could allow an attacker to take advantage of the ""escape hatch."" Rather than explain the issue here, I will link this excellent article that describes it in detail. (This is an old article, hence the Wayback link, but its analysis still reflects the situation today.)
The current versions of the startwm.sh script rely on xrdp-sesman setting up PATH and LANG variables (using pam_env) prior to its invocation. However, in an environment where this script represents a loosening of process confinement, at least PATH has to be treated as ""tainted"" data potentially originating from an attacker.
The simplest thing to do would be to put e.g. PATH=/bin:/usr/bin at the top of the script, and then set up PATH/LANG properly in shell space. A more complex solution would be to have a separate helper program for this: this helper would be executed unconfined, and then it does the pam_env stuff, reads DefaultWindowManager or whatever from sesman.ini, and finally exec()s the program. (Importantly, this helper cannot take arguments, as they may come from an attacker and AppArmor rules cannot match against those.)


I'll be happy to answer any questions, and revise these changes as needed.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2265,2022-05-16T09:56:50Z,,2022-06-03T12:59:41Z,OPEN,False,345,76,27,https://github.com/iskunk,Hardening xrdp with AppArmor,3,[],https://github.com/neutrinolabs/xrdp/pull/2265,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/2265#issuecomment-1128665343,"For some time now, I've been wanting to develop AppArmor profiles to confine xrdp and its components while running. Given that the xrdp process is open to the network, and xrdp-sesman runs as root, these are good candidates for security hardening.
Code changes
I found that some modifications to the code are necessary, however, to make this feasible. These changes are in my first commit, and they are relatively minor:


The function g_file_open() is used in numerous places to read things like configuration files. However, it is also used for writing files (e.g. PID files). The meat of the function, on the POSIX side, is as follows:
    rv =  open(file_name, O_RDWR | O_CREAT, S_IRUSR | S_IWUSR);

    if (rv == -1)
    {
        /* can't open read / write, try to open read only */
        rv =  open(file_name, O_RDONLY);
    }

This ""try at first to open the file read/write"" approach does not look good in a confinement framework. With AppArmor enabled, I see messages like this in the system log:
Mar 29 17:13:05 darkstar kernel: [  494.847515] audit: type=1400 audit(1648588385.232:73): apparmor=""DENIED"" operation=""mknod"" profile=""/usr/sbin/xrdp"" name=""/etc/xrdp/xrdp_keyboard.ini"" pid=1922 comm=""xrdp"" requested_mask=""c"" denied_mask=""c"" fsuid=123 ouid=123

At first, this left me scratching my head thinking, ""Why is xrdp trying to write to the keyboard config file?"" This didn't prevent xrdp from running correctly (as can happen with AppArmor if you're not careful), but security-minded admins would look askance at this.
There is a different call in the xrdp code that is used in a few places, that gives proper read-only access:
    fd = g_file_open_ex(file_name, 1, 0, 0, 0);

The parameters are four flags, requesting any combination of read access, write access, file creation, and file truncation. Most of the time, however, the above combination is used.
The first change I made was to turn all the g_file_open() calls that appear to need only read access, to use a proper read-only call. At first, I replaced them with calls like the above g_file_open_ex() example. But I realized that this function call is not very clear as to what it's doing unless you have the function signature in front of you, and it's used in exactly this form numerous times throughout the code. So I added a new function g_file_open_ro() that wraps this specific combination, and made my edits use that instead.
(Philosophically speaking, it would probably be better to have g_file_open() return a read-only descriptor, and add a new function like g_file_open_rw() or g_file_open_write() to return a writable one, so that the request for write access is explicit. But that's beyond the scope of this change.)


When the X server is executed, xrdp uses (when available) the Linux kernel's ""no new privileges"" feature to avoid potential fallout from invoking a setuid-root X server binary. This is a good thing to do, from a security perspective---but paradoxically, it gets in the way of further security hardening via AppArmor.
As it happens, the NoNewPrivs flag on a process prevents AppArmor from changing its confinement profile at all, even if the destination profile is more restrictive than the source one. What this means for xrdp is that the X server cannot be confined using a different, narrower profile than its parent (xrdp-sesman). If I attempt to do so, I get an error like this in the system log:
Apr  1 01:26:53 darkstar kernel: [ 4711.096244] audit: type=1400 audit(1648790813.552:691): apparmor=""DENIED"" operation=""exec"" info=""no new privs"" error=-1 profile=""xrdp-sesman"" name=""/usr/lib/xorg/Xorg"" pid=32353 comm=""xrdp-sesman"" requested_mask=""x"" denied_mask=""x"" fsuid=1000 ouid=0 target=""xrdp-sesman//xorg""

This is not ideal, because the X server needs access to a lot fewer things than xrdp-sesman---and, in turn, the X server needs a few things that xrdp-sesman can do without. The two processes should not run with the same set of permissions.
I didn't want to get rid of the PR_SET_NO_NEW_PRIVS functionality, and I wanted to avoid adding a new configuration option, so what I did was add a check: If AppArmor is loaded, and the process is already confined in some way, then don't set NoNewPrivs. This is done by examining the content of /proc/self/attr/apparmor/current. The check is performed in a fail-safe way, so if anything goes wrong, the NoNewPrivs transition remains in effect.


Apparmor profiles
My second commit adds the new profiles. Some notes on these:


These profiles have been developed and tested on Ubuntu.


I tested only with Xorg and Xvnc (specifically Xtigervnc). I don't have the setup to test vnc-any or neutrinordp-any.


My changes are to the latest Git devel branch, but I tested by applying them to the Debian 0.9.19 package and compiling it on Ubuntu. (Ubuntu does not have 0.9.19 yet, as of this writing.)


I accommodated the FUSE stuff so that users can login/logout without issue, but I have no idea how to test that functionality.


The profile filenames follow the standard AppArmor convention of reflecting the absolute path of the installed binary. That said, the filenames are arbitrary, and are not parsed in any way.


The profiles themselves do contain absolute paths to various binaries, as AppArmor requires. These can be handled by parameterization (see e.g. @{Xorg} in the usr.sbin.xrdp-sesman profile), alternation (AppArmor supports {a,b,c} syntax in paths), and of course build-time substitutions @like_this@.


The profiles can be enabled by copying them into /etc/apparmor.d/, running /etc/init.d/apparmor force-reload (or rebooting), and restarting xrdp. Any prohibited actions will appear in the system log with apparmor=""DENIED"".


The profiles, as written, are in ""enforce"" mode. If you would like to experiment, you may want to enable them in ""complain"" mode. This will cause AppArmor to allow the application to do whatever it wants, but still log anything that it would have prohibited in ""enforce"" mode. All that is needed is to symlink the profiles into the /etc/apparmor.d/force-complain/ directory, and run /etc/init.d/apparmor force-reload (or reboot). Then, watch your system log for apparmor=""ALLOWED"" messages.
(Additionally, any deny AppArmor directives should be preceded with audit [if not already present] so that violations of same are logged. Normally, deny directives request ""silent deny"" behavior.)


Further work


Careful testing of the more advanced xrdp functionality will be needed, to ensure that the AppArmor profiles allow the necessary access. I've covered the basic use cases, but of course there are going to be more exotic setups that need to be supported.


Some adaptation to other Linux distributions will likely be needed. My experience is only with Debian/Ubuntu, however, so I'm not in a good position to address this.


There is one major hole in these AppArmor profiles, which will require additional work to address. It is this line in usr.sbin.xrdp-sesman:
  /etc/xrdp/startwm.sh Uxr,

This allows startwm.sh to be executed without confinement. The user session cannot run within the tightly-defined profile for xrdp-sesman; in fact, it probably can't run (or at least normally doesn't run) in any AppArmor profile at all. So this line allows that script an ""escape hatch"" out of the restrictions imposed on xrdp-sesman.
Because this is a shell script, however, there is a risk that could allow an attacker to take advantage of the ""escape hatch."" Rather than explain the issue here, I will link this excellent article that describes it in detail. (This is an old article, hence the Wayback link, but its analysis still reflects the situation today.)
The current versions of the startwm.sh script rely on xrdp-sesman setting up PATH and LANG variables (using pam_env) prior to its invocation. However, in an environment where this script represents a loosening of process confinement, at least PATH has to be treated as ""tainted"" data potentially originating from an attacker.
The simplest thing to do would be to put e.g. PATH=/bin:/usr/bin at the top of the script, and then set up PATH/LANG properly in shell space. A more complex solution would be to have a separate helper program for this: this helper would be executed unconfined, and then it does the pam_env stuff, reads DefaultWindowManager or whatever from sesman.ini, and finally exec()s the program. (Importantly, this helper cannot take arguments, as they may come from an attacker and AppArmor rules cannot match against those.)


I'll be happy to answer any questions, and revise these changes as needed.","@iskunk - first thing I should say is this is a great idea, and we should definitely get something in to support this.
My biggest concern is support.
For SELinux (which is only really used by Fedora/RHEL and derivatives), we ship xrdp as SELinux-ready, and leave it to the distribution to configure. There are two reasons for this:-

We're not in a position to dictate to the distros how they should use the product.
We're also not in a position to support the testing effort which would be required to support multiple distros using this. You quite rightly allude to testing above. We don't have any AppArmor experience on the team I'm aware of - I've been a RH admin in the past, so I'm fine with a subset of SELinux issues, but not all. So we're not really in a position to fully support this in the base product. That could lead to a worst-case where we ship this and then can't maintain it. No-one would be happy with that.

What I would be happy with is getting the product AppArmor ready so that either the distros can use it by adding profiles, or securlty-conscious users with the experience to admin this could easily get it configured. Shipping example profiles would be OK I think, provided they were basic.
Anyone else want to comment on this? I'd really like to find the most productive way forward on what could be a great feature.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2265,2022-05-16T09:56:50Z,,2022-06-03T12:59:41Z,OPEN,False,345,76,27,https://github.com/iskunk,Hardening xrdp with AppArmor,3,[],https://github.com/neutrinolabs/xrdp/pull/2265,https://github.com/iskunk,3,https://github.com/neutrinolabs/xrdp/pull/2265#issuecomment-1129526479,"For some time now, I've been wanting to develop AppArmor profiles to confine xrdp and its components while running. Given that the xrdp process is open to the network, and xrdp-sesman runs as root, these are good candidates for security hardening.
Code changes
I found that some modifications to the code are necessary, however, to make this feasible. These changes are in my first commit, and they are relatively minor:


The function g_file_open() is used in numerous places to read things like configuration files. However, it is also used for writing files (e.g. PID files). The meat of the function, on the POSIX side, is as follows:
    rv =  open(file_name, O_RDWR | O_CREAT, S_IRUSR | S_IWUSR);

    if (rv == -1)
    {
        /* can't open read / write, try to open read only */
        rv =  open(file_name, O_RDONLY);
    }

This ""try at first to open the file read/write"" approach does not look good in a confinement framework. With AppArmor enabled, I see messages like this in the system log:
Mar 29 17:13:05 darkstar kernel: [  494.847515] audit: type=1400 audit(1648588385.232:73): apparmor=""DENIED"" operation=""mknod"" profile=""/usr/sbin/xrdp"" name=""/etc/xrdp/xrdp_keyboard.ini"" pid=1922 comm=""xrdp"" requested_mask=""c"" denied_mask=""c"" fsuid=123 ouid=123

At first, this left me scratching my head thinking, ""Why is xrdp trying to write to the keyboard config file?"" This didn't prevent xrdp from running correctly (as can happen with AppArmor if you're not careful), but security-minded admins would look askance at this.
There is a different call in the xrdp code that is used in a few places, that gives proper read-only access:
    fd = g_file_open_ex(file_name, 1, 0, 0, 0);

The parameters are four flags, requesting any combination of read access, write access, file creation, and file truncation. Most of the time, however, the above combination is used.
The first change I made was to turn all the g_file_open() calls that appear to need only read access, to use a proper read-only call. At first, I replaced them with calls like the above g_file_open_ex() example. But I realized that this function call is not very clear as to what it's doing unless you have the function signature in front of you, and it's used in exactly this form numerous times throughout the code. So I added a new function g_file_open_ro() that wraps this specific combination, and made my edits use that instead.
(Philosophically speaking, it would probably be better to have g_file_open() return a read-only descriptor, and add a new function like g_file_open_rw() or g_file_open_write() to return a writable one, so that the request for write access is explicit. But that's beyond the scope of this change.)


When the X server is executed, xrdp uses (when available) the Linux kernel's ""no new privileges"" feature to avoid potential fallout from invoking a setuid-root X server binary. This is a good thing to do, from a security perspective---but paradoxically, it gets in the way of further security hardening via AppArmor.
As it happens, the NoNewPrivs flag on a process prevents AppArmor from changing its confinement profile at all, even if the destination profile is more restrictive than the source one. What this means for xrdp is that the X server cannot be confined using a different, narrower profile than its parent (xrdp-sesman). If I attempt to do so, I get an error like this in the system log:
Apr  1 01:26:53 darkstar kernel: [ 4711.096244] audit: type=1400 audit(1648790813.552:691): apparmor=""DENIED"" operation=""exec"" info=""no new privs"" error=-1 profile=""xrdp-sesman"" name=""/usr/lib/xorg/Xorg"" pid=32353 comm=""xrdp-sesman"" requested_mask=""x"" denied_mask=""x"" fsuid=1000 ouid=0 target=""xrdp-sesman//xorg""

This is not ideal, because the X server needs access to a lot fewer things than xrdp-sesman---and, in turn, the X server needs a few things that xrdp-sesman can do without. The two processes should not run with the same set of permissions.
I didn't want to get rid of the PR_SET_NO_NEW_PRIVS functionality, and I wanted to avoid adding a new configuration option, so what I did was add a check: If AppArmor is loaded, and the process is already confined in some way, then don't set NoNewPrivs. This is done by examining the content of /proc/self/attr/apparmor/current. The check is performed in a fail-safe way, so if anything goes wrong, the NoNewPrivs transition remains in effect.


Apparmor profiles
My second commit adds the new profiles. Some notes on these:


These profiles have been developed and tested on Ubuntu.


I tested only with Xorg and Xvnc (specifically Xtigervnc). I don't have the setup to test vnc-any or neutrinordp-any.


My changes are to the latest Git devel branch, but I tested by applying them to the Debian 0.9.19 package and compiling it on Ubuntu. (Ubuntu does not have 0.9.19 yet, as of this writing.)


I accommodated the FUSE stuff so that users can login/logout without issue, but I have no idea how to test that functionality.


The profile filenames follow the standard AppArmor convention of reflecting the absolute path of the installed binary. That said, the filenames are arbitrary, and are not parsed in any way.


The profiles themselves do contain absolute paths to various binaries, as AppArmor requires. These can be handled by parameterization (see e.g. @{Xorg} in the usr.sbin.xrdp-sesman profile), alternation (AppArmor supports {a,b,c} syntax in paths), and of course build-time substitutions @like_this@.


The profiles can be enabled by copying them into /etc/apparmor.d/, running /etc/init.d/apparmor force-reload (or rebooting), and restarting xrdp. Any prohibited actions will appear in the system log with apparmor=""DENIED"".


The profiles, as written, are in ""enforce"" mode. If you would like to experiment, you may want to enable them in ""complain"" mode. This will cause AppArmor to allow the application to do whatever it wants, but still log anything that it would have prohibited in ""enforce"" mode. All that is needed is to symlink the profiles into the /etc/apparmor.d/force-complain/ directory, and run /etc/init.d/apparmor force-reload (or reboot). Then, watch your system log for apparmor=""ALLOWED"" messages.
(Additionally, any deny AppArmor directives should be preceded with audit [if not already present] so that violations of same are logged. Normally, deny directives request ""silent deny"" behavior.)


Further work


Careful testing of the more advanced xrdp functionality will be needed, to ensure that the AppArmor profiles allow the necessary access. I've covered the basic use cases, but of course there are going to be more exotic setups that need to be supported.


Some adaptation to other Linux distributions will likely be needed. My experience is only with Debian/Ubuntu, however, so I'm not in a good position to address this.


There is one major hole in these AppArmor profiles, which will require additional work to address. It is this line in usr.sbin.xrdp-sesman:
  /etc/xrdp/startwm.sh Uxr,

This allows startwm.sh to be executed without confinement. The user session cannot run within the tightly-defined profile for xrdp-sesman; in fact, it probably can't run (or at least normally doesn't run) in any AppArmor profile at all. So this line allows that script an ""escape hatch"" out of the restrictions imposed on xrdp-sesman.
Because this is a shell script, however, there is a risk that could allow an attacker to take advantage of the ""escape hatch."" Rather than explain the issue here, I will link this excellent article that describes it in detail. (This is an old article, hence the Wayback link, but its analysis still reflects the situation today.)
The current versions of the startwm.sh script rely on xrdp-sesman setting up PATH and LANG variables (using pam_env) prior to its invocation. However, in an environment where this script represents a loosening of process confinement, at least PATH has to be treated as ""tainted"" data potentially originating from an attacker.
The simplest thing to do would be to put e.g. PATH=/bin:/usr/bin at the top of the script, and then set up PATH/LANG properly in shell space. A more complex solution would be to have a separate helper program for this: this helper would be executed unconfined, and then it does the pam_env stuff, reads DefaultWindowManager or whatever from sesman.ini, and finally exec()s the program. (Importantly, this helper cannot take arguments, as they may come from an attacker and AppArmor rules cannot match against those.)


I'll be happy to answer any questions, and revise these changes as needed.","PR update pushed. A few notes:


g_set_no_new_privs() could use some way of checking whether the process is running in a SELinux context (as NoNewPrivileges could interfere with that as well), but I don't know enough about that world to implement this correctly.


I did away with the #define PR_SET_NO_NEW_PRIVS 38 bit. I see that it dates from 2016, in the original commit that added the NoNewPrivileges call. I don't think it should be needed any more.


I moved the NoNewPrivileges transition up to the beginning of the X server child block. This is so that the AppArmor check inside g_set_no_new_privs() occurs before the env_set_user() call, so that the /proc file (which is owned by root) is opened by a process still running as root. This allows the addition of a same-user restriction to the AppArmor rule granting access to the /proc file.
This also has the side effect of running all the different types of X servers under NoNewPrivileges (when unconfined by AppArmor), not just Xorg. I tested that this isn't a problem for Xvnc, and I don't imagine it should be one for any of the others.


The commit that renames g_file_open() was produced mechanically, by running perl -pi -e 's/\bg_file_open\b/g_file_open_rw/g' on all source files and then reviewing manually, to avoid error.


It wasn't clear if you also wanted to rename g_file_open_ro() back to g_file_open(), making RO access implicit at the same time that RW access is explicit. If this is the case, then let me know, and I'll add another commit with that change.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2265,2022-05-16T09:56:50Z,,2022-06-03T12:59:41Z,OPEN,False,345,76,27,https://github.com/iskunk,Hardening xrdp with AppArmor,3,[],https://github.com/neutrinolabs/xrdp/pull/2265,https://github.com/iskunk,4,https://github.com/neutrinolabs/xrdp/pull/2265#issuecomment-1129532315,"For some time now, I've been wanting to develop AppArmor profiles to confine xrdp and its components while running. Given that the xrdp process is open to the network, and xrdp-sesman runs as root, these are good candidates for security hardening.
Code changes
I found that some modifications to the code are necessary, however, to make this feasible. These changes are in my first commit, and they are relatively minor:


The function g_file_open() is used in numerous places to read things like configuration files. However, it is also used for writing files (e.g. PID files). The meat of the function, on the POSIX side, is as follows:
    rv =  open(file_name, O_RDWR | O_CREAT, S_IRUSR | S_IWUSR);

    if (rv == -1)
    {
        /* can't open read / write, try to open read only */
        rv =  open(file_name, O_RDONLY);
    }

This ""try at first to open the file read/write"" approach does not look good in a confinement framework. With AppArmor enabled, I see messages like this in the system log:
Mar 29 17:13:05 darkstar kernel: [  494.847515] audit: type=1400 audit(1648588385.232:73): apparmor=""DENIED"" operation=""mknod"" profile=""/usr/sbin/xrdp"" name=""/etc/xrdp/xrdp_keyboard.ini"" pid=1922 comm=""xrdp"" requested_mask=""c"" denied_mask=""c"" fsuid=123 ouid=123

At first, this left me scratching my head thinking, ""Why is xrdp trying to write to the keyboard config file?"" This didn't prevent xrdp from running correctly (as can happen with AppArmor if you're not careful), but security-minded admins would look askance at this.
There is a different call in the xrdp code that is used in a few places, that gives proper read-only access:
    fd = g_file_open_ex(file_name, 1, 0, 0, 0);

The parameters are four flags, requesting any combination of read access, write access, file creation, and file truncation. Most of the time, however, the above combination is used.
The first change I made was to turn all the g_file_open() calls that appear to need only read access, to use a proper read-only call. At first, I replaced them with calls like the above g_file_open_ex() example. But I realized that this function call is not very clear as to what it's doing unless you have the function signature in front of you, and it's used in exactly this form numerous times throughout the code. So I added a new function g_file_open_ro() that wraps this specific combination, and made my edits use that instead.
(Philosophically speaking, it would probably be better to have g_file_open() return a read-only descriptor, and add a new function like g_file_open_rw() or g_file_open_write() to return a writable one, so that the request for write access is explicit. But that's beyond the scope of this change.)


When the X server is executed, xrdp uses (when available) the Linux kernel's ""no new privileges"" feature to avoid potential fallout from invoking a setuid-root X server binary. This is a good thing to do, from a security perspective---but paradoxically, it gets in the way of further security hardening via AppArmor.
As it happens, the NoNewPrivs flag on a process prevents AppArmor from changing its confinement profile at all, even if the destination profile is more restrictive than the source one. What this means for xrdp is that the X server cannot be confined using a different, narrower profile than its parent (xrdp-sesman). If I attempt to do so, I get an error like this in the system log:
Apr  1 01:26:53 darkstar kernel: [ 4711.096244] audit: type=1400 audit(1648790813.552:691): apparmor=""DENIED"" operation=""exec"" info=""no new privs"" error=-1 profile=""xrdp-sesman"" name=""/usr/lib/xorg/Xorg"" pid=32353 comm=""xrdp-sesman"" requested_mask=""x"" denied_mask=""x"" fsuid=1000 ouid=0 target=""xrdp-sesman//xorg""

This is not ideal, because the X server needs access to a lot fewer things than xrdp-sesman---and, in turn, the X server needs a few things that xrdp-sesman can do without. The two processes should not run with the same set of permissions.
I didn't want to get rid of the PR_SET_NO_NEW_PRIVS functionality, and I wanted to avoid adding a new configuration option, so what I did was add a check: If AppArmor is loaded, and the process is already confined in some way, then don't set NoNewPrivs. This is done by examining the content of /proc/self/attr/apparmor/current. The check is performed in a fail-safe way, so if anything goes wrong, the NoNewPrivs transition remains in effect.


Apparmor profiles
My second commit adds the new profiles. Some notes on these:


These profiles have been developed and tested on Ubuntu.


I tested only with Xorg and Xvnc (specifically Xtigervnc). I don't have the setup to test vnc-any or neutrinordp-any.


My changes are to the latest Git devel branch, but I tested by applying them to the Debian 0.9.19 package and compiling it on Ubuntu. (Ubuntu does not have 0.9.19 yet, as of this writing.)


I accommodated the FUSE stuff so that users can login/logout without issue, but I have no idea how to test that functionality.


The profile filenames follow the standard AppArmor convention of reflecting the absolute path of the installed binary. That said, the filenames are arbitrary, and are not parsed in any way.


The profiles themselves do contain absolute paths to various binaries, as AppArmor requires. These can be handled by parameterization (see e.g. @{Xorg} in the usr.sbin.xrdp-sesman profile), alternation (AppArmor supports {a,b,c} syntax in paths), and of course build-time substitutions @like_this@.


The profiles can be enabled by copying them into /etc/apparmor.d/, running /etc/init.d/apparmor force-reload (or rebooting), and restarting xrdp. Any prohibited actions will appear in the system log with apparmor=""DENIED"".


The profiles, as written, are in ""enforce"" mode. If you would like to experiment, you may want to enable them in ""complain"" mode. This will cause AppArmor to allow the application to do whatever it wants, but still log anything that it would have prohibited in ""enforce"" mode. All that is needed is to symlink the profiles into the /etc/apparmor.d/force-complain/ directory, and run /etc/init.d/apparmor force-reload (or reboot). Then, watch your system log for apparmor=""ALLOWED"" messages.
(Additionally, any deny AppArmor directives should be preceded with audit [if not already present] so that violations of same are logged. Normally, deny directives request ""silent deny"" behavior.)


Further work


Careful testing of the more advanced xrdp functionality will be needed, to ensure that the AppArmor profiles allow the necessary access. I've covered the basic use cases, but of course there are going to be more exotic setups that need to be supported.


Some adaptation to other Linux distributions will likely be needed. My experience is only with Debian/Ubuntu, however, so I'm not in a good position to address this.


There is one major hole in these AppArmor profiles, which will require additional work to address. It is this line in usr.sbin.xrdp-sesman:
  /etc/xrdp/startwm.sh Uxr,

This allows startwm.sh to be executed without confinement. The user session cannot run within the tightly-defined profile for xrdp-sesman; in fact, it probably can't run (or at least normally doesn't run) in any AppArmor profile at all. So this line allows that script an ""escape hatch"" out of the restrictions imposed on xrdp-sesman.
Because this is a shell script, however, there is a risk that could allow an attacker to take advantage of the ""escape hatch."" Rather than explain the issue here, I will link this excellent article that describes it in detail. (This is an old article, hence the Wayback link, but its analysis still reflects the situation today.)
The current versions of the startwm.sh script rely on xrdp-sesman setting up PATH and LANG variables (using pam_env) prior to its invocation. However, in an environment where this script represents a loosening of process confinement, at least PATH has to be treated as ""tainted"" data potentially originating from an attacker.
The simplest thing to do would be to put e.g. PATH=/bin:/usr/bin at the top of the script, and then set up PATH/LANG properly in shell space. A more complex solution would be to have a separate helper program for this: this helper would be executed unconfined, and then it does the pam_env stuff, reads DefaultWindowManager or whatever from sesman.ini, and finally exec()s the program. (Importantly, this helper cannot take arguments, as they may come from an attacker and AppArmor rules cannot match against those.)


I'll be happy to answer any questions, and revise these changes as needed.","Some comments re support:


Shipping AppArmor profiles would give distros a clear starting point for customization, and a clear owner/target for upstreaming their changes. I don't think it would amount to dictating usage, since there is a presumption that the project is willing to accommodate reasonable variations in how the product is deployed. (E.g. if a distro wants to put the binaries under /Programs/Xrdp/0.9.19/bin/ instead of /usr/{bin,sbin}/, then while /Programs/ would not fly in a PR, they might contribute some additional parameterization to facilitate it.)
Perhaps the situation is different with SELinux, due to the complexity of the rulesets?


Testing this is less a matter of AppArmor domain expertise, and more one of just being able to run xrdp through all the unusual and ""creative"" use cases that smaller groups of users rely on. It is not unlike the problem of code-coverage testing. Running through those odd use cases generates accesses that may not have been covered in the profile, possibly leading to breakage. Finding the precise modes of such breakage then allows the profile to be revised to allow those accesses.


This form of testing is not unique to AppArmor, of course---the same is needed when developing an SELinux ruleset, or seccomp filter, or possibly other forms of security confinement. If there is not already some way of running through the odd use cases automatically, in a way that can be packaged into a CI test, then I think there would be a lot to gain in developing one.


For what it's worth, AppArmor profiles are easier to grok than SELinux rulesets, due to being conceptually simpler (and less comprehensive). It's definitely not the same animal.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2265,2022-05-16T09:56:50Z,,2022-06-03T12:59:41Z,OPEN,False,345,76,27,https://github.com/iskunk,Hardening xrdp with AppArmor,3,[],https://github.com/neutrinolabs/xrdp/pull/2265,https://github.com/iskunk,5,https://github.com/neutrinolabs/xrdp/pull/2265#issuecomment-1129581537,"For some time now, I've been wanting to develop AppArmor profiles to confine xrdp and its components while running. Given that the xrdp process is open to the network, and xrdp-sesman runs as root, these are good candidates for security hardening.
Code changes
I found that some modifications to the code are necessary, however, to make this feasible. These changes are in my first commit, and they are relatively minor:


The function g_file_open() is used in numerous places to read things like configuration files. However, it is also used for writing files (e.g. PID files). The meat of the function, on the POSIX side, is as follows:
    rv =  open(file_name, O_RDWR | O_CREAT, S_IRUSR | S_IWUSR);

    if (rv == -1)
    {
        /* can't open read / write, try to open read only */
        rv =  open(file_name, O_RDONLY);
    }

This ""try at first to open the file read/write"" approach does not look good in a confinement framework. With AppArmor enabled, I see messages like this in the system log:
Mar 29 17:13:05 darkstar kernel: [  494.847515] audit: type=1400 audit(1648588385.232:73): apparmor=""DENIED"" operation=""mknod"" profile=""/usr/sbin/xrdp"" name=""/etc/xrdp/xrdp_keyboard.ini"" pid=1922 comm=""xrdp"" requested_mask=""c"" denied_mask=""c"" fsuid=123 ouid=123

At first, this left me scratching my head thinking, ""Why is xrdp trying to write to the keyboard config file?"" This didn't prevent xrdp from running correctly (as can happen with AppArmor if you're not careful), but security-minded admins would look askance at this.
There is a different call in the xrdp code that is used in a few places, that gives proper read-only access:
    fd = g_file_open_ex(file_name, 1, 0, 0, 0);

The parameters are four flags, requesting any combination of read access, write access, file creation, and file truncation. Most of the time, however, the above combination is used.
The first change I made was to turn all the g_file_open() calls that appear to need only read access, to use a proper read-only call. At first, I replaced them with calls like the above g_file_open_ex() example. But I realized that this function call is not very clear as to what it's doing unless you have the function signature in front of you, and it's used in exactly this form numerous times throughout the code. So I added a new function g_file_open_ro() that wraps this specific combination, and made my edits use that instead.
(Philosophically speaking, it would probably be better to have g_file_open() return a read-only descriptor, and add a new function like g_file_open_rw() or g_file_open_write() to return a writable one, so that the request for write access is explicit. But that's beyond the scope of this change.)


When the X server is executed, xrdp uses (when available) the Linux kernel's ""no new privileges"" feature to avoid potential fallout from invoking a setuid-root X server binary. This is a good thing to do, from a security perspective---but paradoxically, it gets in the way of further security hardening via AppArmor.
As it happens, the NoNewPrivs flag on a process prevents AppArmor from changing its confinement profile at all, even if the destination profile is more restrictive than the source one. What this means for xrdp is that the X server cannot be confined using a different, narrower profile than its parent (xrdp-sesman). If I attempt to do so, I get an error like this in the system log:
Apr  1 01:26:53 darkstar kernel: [ 4711.096244] audit: type=1400 audit(1648790813.552:691): apparmor=""DENIED"" operation=""exec"" info=""no new privs"" error=-1 profile=""xrdp-sesman"" name=""/usr/lib/xorg/Xorg"" pid=32353 comm=""xrdp-sesman"" requested_mask=""x"" denied_mask=""x"" fsuid=1000 ouid=0 target=""xrdp-sesman//xorg""

This is not ideal, because the X server needs access to a lot fewer things than xrdp-sesman---and, in turn, the X server needs a few things that xrdp-sesman can do without. The two processes should not run with the same set of permissions.
I didn't want to get rid of the PR_SET_NO_NEW_PRIVS functionality, and I wanted to avoid adding a new configuration option, so what I did was add a check: If AppArmor is loaded, and the process is already confined in some way, then don't set NoNewPrivs. This is done by examining the content of /proc/self/attr/apparmor/current. The check is performed in a fail-safe way, so if anything goes wrong, the NoNewPrivs transition remains in effect.


Apparmor profiles
My second commit adds the new profiles. Some notes on these:


These profiles have been developed and tested on Ubuntu.


I tested only with Xorg and Xvnc (specifically Xtigervnc). I don't have the setup to test vnc-any or neutrinordp-any.


My changes are to the latest Git devel branch, but I tested by applying them to the Debian 0.9.19 package and compiling it on Ubuntu. (Ubuntu does not have 0.9.19 yet, as of this writing.)


I accommodated the FUSE stuff so that users can login/logout without issue, but I have no idea how to test that functionality.


The profile filenames follow the standard AppArmor convention of reflecting the absolute path of the installed binary. That said, the filenames are arbitrary, and are not parsed in any way.


The profiles themselves do contain absolute paths to various binaries, as AppArmor requires. These can be handled by parameterization (see e.g. @{Xorg} in the usr.sbin.xrdp-sesman profile), alternation (AppArmor supports {a,b,c} syntax in paths), and of course build-time substitutions @like_this@.


The profiles can be enabled by copying them into /etc/apparmor.d/, running /etc/init.d/apparmor force-reload (or rebooting), and restarting xrdp. Any prohibited actions will appear in the system log with apparmor=""DENIED"".


The profiles, as written, are in ""enforce"" mode. If you would like to experiment, you may want to enable them in ""complain"" mode. This will cause AppArmor to allow the application to do whatever it wants, but still log anything that it would have prohibited in ""enforce"" mode. All that is needed is to symlink the profiles into the /etc/apparmor.d/force-complain/ directory, and run /etc/init.d/apparmor force-reload (or reboot). Then, watch your system log for apparmor=""ALLOWED"" messages.
(Additionally, any deny AppArmor directives should be preceded with audit [if not already present] so that violations of same are logged. Normally, deny directives request ""silent deny"" behavior.)


Further work


Careful testing of the more advanced xrdp functionality will be needed, to ensure that the AppArmor profiles allow the necessary access. I've covered the basic use cases, but of course there are going to be more exotic setups that need to be supported.


Some adaptation to other Linux distributions will likely be needed. My experience is only with Debian/Ubuntu, however, so I'm not in a good position to address this.


There is one major hole in these AppArmor profiles, which will require additional work to address. It is this line in usr.sbin.xrdp-sesman:
  /etc/xrdp/startwm.sh Uxr,

This allows startwm.sh to be executed without confinement. The user session cannot run within the tightly-defined profile for xrdp-sesman; in fact, it probably can't run (or at least normally doesn't run) in any AppArmor profile at all. So this line allows that script an ""escape hatch"" out of the restrictions imposed on xrdp-sesman.
Because this is a shell script, however, there is a risk that could allow an attacker to take advantage of the ""escape hatch."" Rather than explain the issue here, I will link this excellent article that describes it in detail. (This is an old article, hence the Wayback link, but its analysis still reflects the situation today.)
The current versions of the startwm.sh script rely on xrdp-sesman setting up PATH and LANG variables (using pam_env) prior to its invocation. However, in an environment where this script represents a loosening of process confinement, at least PATH has to be treated as ""tainted"" data potentially originating from an attacker.
The simplest thing to do would be to put e.g. PATH=/bin:/usr/bin at the top of the script, and then set up PATH/LANG properly in shell space. A more complex solution would be to have a separate helper program for this: this helper would be executed unconfined, and then it does the pam_env stuff, reads DefaultWindowManager or whatever from sesman.ini, and finally exec()s the program. (Importantly, this helper cannot take arguments, as they may come from an attacker and AppArmor rules cannot match against those.)


I'll be happy to answer any questions, and revise these changes as needed.",Fixed a thinko in sesman/session.c; should have used foo != 0 instead of !foo. This caused an error message to be logged on success.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2265,2022-05-16T09:56:50Z,,2022-06-03T12:59:41Z,OPEN,False,345,76,27,https://github.com/iskunk,Hardening xrdp with AppArmor,3,[],https://github.com/neutrinolabs/xrdp/pull/2265,https://github.com/matt335672,6,https://github.com/neutrinolabs/xrdp/pull/2265#issuecomment-1129888800,"For some time now, I've been wanting to develop AppArmor profiles to confine xrdp and its components while running. Given that the xrdp process is open to the network, and xrdp-sesman runs as root, these are good candidates for security hardening.
Code changes
I found that some modifications to the code are necessary, however, to make this feasible. These changes are in my first commit, and they are relatively minor:


The function g_file_open() is used in numerous places to read things like configuration files. However, it is also used for writing files (e.g. PID files). The meat of the function, on the POSIX side, is as follows:
    rv =  open(file_name, O_RDWR | O_CREAT, S_IRUSR | S_IWUSR);

    if (rv == -1)
    {
        /* can't open read / write, try to open read only */
        rv =  open(file_name, O_RDONLY);
    }

This ""try at first to open the file read/write"" approach does not look good in a confinement framework. With AppArmor enabled, I see messages like this in the system log:
Mar 29 17:13:05 darkstar kernel: [  494.847515] audit: type=1400 audit(1648588385.232:73): apparmor=""DENIED"" operation=""mknod"" profile=""/usr/sbin/xrdp"" name=""/etc/xrdp/xrdp_keyboard.ini"" pid=1922 comm=""xrdp"" requested_mask=""c"" denied_mask=""c"" fsuid=123 ouid=123

At first, this left me scratching my head thinking, ""Why is xrdp trying to write to the keyboard config file?"" This didn't prevent xrdp from running correctly (as can happen with AppArmor if you're not careful), but security-minded admins would look askance at this.
There is a different call in the xrdp code that is used in a few places, that gives proper read-only access:
    fd = g_file_open_ex(file_name, 1, 0, 0, 0);

The parameters are four flags, requesting any combination of read access, write access, file creation, and file truncation. Most of the time, however, the above combination is used.
The first change I made was to turn all the g_file_open() calls that appear to need only read access, to use a proper read-only call. At first, I replaced them with calls like the above g_file_open_ex() example. But I realized that this function call is not very clear as to what it's doing unless you have the function signature in front of you, and it's used in exactly this form numerous times throughout the code. So I added a new function g_file_open_ro() that wraps this specific combination, and made my edits use that instead.
(Philosophically speaking, it would probably be better to have g_file_open() return a read-only descriptor, and add a new function like g_file_open_rw() or g_file_open_write() to return a writable one, so that the request for write access is explicit. But that's beyond the scope of this change.)


When the X server is executed, xrdp uses (when available) the Linux kernel's ""no new privileges"" feature to avoid potential fallout from invoking a setuid-root X server binary. This is a good thing to do, from a security perspective---but paradoxically, it gets in the way of further security hardening via AppArmor.
As it happens, the NoNewPrivs flag on a process prevents AppArmor from changing its confinement profile at all, even if the destination profile is more restrictive than the source one. What this means for xrdp is that the X server cannot be confined using a different, narrower profile than its parent (xrdp-sesman). If I attempt to do so, I get an error like this in the system log:
Apr  1 01:26:53 darkstar kernel: [ 4711.096244] audit: type=1400 audit(1648790813.552:691): apparmor=""DENIED"" operation=""exec"" info=""no new privs"" error=-1 profile=""xrdp-sesman"" name=""/usr/lib/xorg/Xorg"" pid=32353 comm=""xrdp-sesman"" requested_mask=""x"" denied_mask=""x"" fsuid=1000 ouid=0 target=""xrdp-sesman//xorg""

This is not ideal, because the X server needs access to a lot fewer things than xrdp-sesman---and, in turn, the X server needs a few things that xrdp-sesman can do without. The two processes should not run with the same set of permissions.
I didn't want to get rid of the PR_SET_NO_NEW_PRIVS functionality, and I wanted to avoid adding a new configuration option, so what I did was add a check: If AppArmor is loaded, and the process is already confined in some way, then don't set NoNewPrivs. This is done by examining the content of /proc/self/attr/apparmor/current. The check is performed in a fail-safe way, so if anything goes wrong, the NoNewPrivs transition remains in effect.


Apparmor profiles
My second commit adds the new profiles. Some notes on these:


These profiles have been developed and tested on Ubuntu.


I tested only with Xorg and Xvnc (specifically Xtigervnc). I don't have the setup to test vnc-any or neutrinordp-any.


My changes are to the latest Git devel branch, but I tested by applying them to the Debian 0.9.19 package and compiling it on Ubuntu. (Ubuntu does not have 0.9.19 yet, as of this writing.)


I accommodated the FUSE stuff so that users can login/logout without issue, but I have no idea how to test that functionality.


The profile filenames follow the standard AppArmor convention of reflecting the absolute path of the installed binary. That said, the filenames are arbitrary, and are not parsed in any way.


The profiles themselves do contain absolute paths to various binaries, as AppArmor requires. These can be handled by parameterization (see e.g. @{Xorg} in the usr.sbin.xrdp-sesman profile), alternation (AppArmor supports {a,b,c} syntax in paths), and of course build-time substitutions @like_this@.


The profiles can be enabled by copying them into /etc/apparmor.d/, running /etc/init.d/apparmor force-reload (or rebooting), and restarting xrdp. Any prohibited actions will appear in the system log with apparmor=""DENIED"".


The profiles, as written, are in ""enforce"" mode. If you would like to experiment, you may want to enable them in ""complain"" mode. This will cause AppArmor to allow the application to do whatever it wants, but still log anything that it would have prohibited in ""enforce"" mode. All that is needed is to symlink the profiles into the /etc/apparmor.d/force-complain/ directory, and run /etc/init.d/apparmor force-reload (or reboot). Then, watch your system log for apparmor=""ALLOWED"" messages.
(Additionally, any deny AppArmor directives should be preceded with audit [if not already present] so that violations of same are logged. Normally, deny directives request ""silent deny"" behavior.)


Further work


Careful testing of the more advanced xrdp functionality will be needed, to ensure that the AppArmor profiles allow the necessary access. I've covered the basic use cases, but of course there are going to be more exotic setups that need to be supported.


Some adaptation to other Linux distributions will likely be needed. My experience is only with Debian/Ubuntu, however, so I'm not in a good position to address this.


There is one major hole in these AppArmor profiles, which will require additional work to address. It is this line in usr.sbin.xrdp-sesman:
  /etc/xrdp/startwm.sh Uxr,

This allows startwm.sh to be executed without confinement. The user session cannot run within the tightly-defined profile for xrdp-sesman; in fact, it probably can't run (or at least normally doesn't run) in any AppArmor profile at all. So this line allows that script an ""escape hatch"" out of the restrictions imposed on xrdp-sesman.
Because this is a shell script, however, there is a risk that could allow an attacker to take advantage of the ""escape hatch."" Rather than explain the issue here, I will link this excellent article that describes it in detail. (This is an old article, hence the Wayback link, but its analysis still reflects the situation today.)
The current versions of the startwm.sh script rely on xrdp-sesman setting up PATH and LANG variables (using pam_env) prior to its invocation. However, in an environment where this script represents a loosening of process confinement, at least PATH has to be treated as ""tainted"" data potentially originating from an attacker.
The simplest thing to do would be to put e.g. PATH=/bin:/usr/bin at the top of the script, and then set up PATH/LANG properly in shell space. A more complex solution would be to have a separate helper program for this: this helper would be executed unconfined, and then it does the pam_env stuff, reads DefaultWindowManager or whatever from sesman.ini, and finally exec()s the program. (Importantly, this helper cannot take arguments, as they may come from an attacker and AppArmor rules cannot match against those.)


I'll be happy to answer any questions, and revise these changes as needed.","Thanks @iskunk
I've enabled the CI on the above, part of which is a code formatting check to see if the code more-of-less complies with the coding standard on the wiki. As a hint you can run the scripts/run_astyle.sh script before pushing.
You raise an interesting point regarding SELinux which AFAIK doesn't need to disable NNP. It's been a while since I've looked at this though, and I'm not sure I can trust my memory. I'll go away and do a bit of research and get back to you.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2265,2022-05-16T09:56:50Z,,2022-06-03T12:59:41Z,OPEN,False,345,76,27,https://github.com/iskunk,Hardening xrdp with AppArmor,3,[],https://github.com/neutrinolabs/xrdp/pull/2265,https://github.com/matt335672,7,https://github.com/neutrinolabs/xrdp/pull/2265#issuecomment-1130111492,"For some time now, I've been wanting to develop AppArmor profiles to confine xrdp and its components while running. Given that the xrdp process is open to the network, and xrdp-sesman runs as root, these are good candidates for security hardening.
Code changes
I found that some modifications to the code are necessary, however, to make this feasible. These changes are in my first commit, and they are relatively minor:


The function g_file_open() is used in numerous places to read things like configuration files. However, it is also used for writing files (e.g. PID files). The meat of the function, on the POSIX side, is as follows:
    rv =  open(file_name, O_RDWR | O_CREAT, S_IRUSR | S_IWUSR);

    if (rv == -1)
    {
        /* can't open read / write, try to open read only */
        rv =  open(file_name, O_RDONLY);
    }

This ""try at first to open the file read/write"" approach does not look good in a confinement framework. With AppArmor enabled, I see messages like this in the system log:
Mar 29 17:13:05 darkstar kernel: [  494.847515] audit: type=1400 audit(1648588385.232:73): apparmor=""DENIED"" operation=""mknod"" profile=""/usr/sbin/xrdp"" name=""/etc/xrdp/xrdp_keyboard.ini"" pid=1922 comm=""xrdp"" requested_mask=""c"" denied_mask=""c"" fsuid=123 ouid=123

At first, this left me scratching my head thinking, ""Why is xrdp trying to write to the keyboard config file?"" This didn't prevent xrdp from running correctly (as can happen with AppArmor if you're not careful), but security-minded admins would look askance at this.
There is a different call in the xrdp code that is used in a few places, that gives proper read-only access:
    fd = g_file_open_ex(file_name, 1, 0, 0, 0);

The parameters are four flags, requesting any combination of read access, write access, file creation, and file truncation. Most of the time, however, the above combination is used.
The first change I made was to turn all the g_file_open() calls that appear to need only read access, to use a proper read-only call. At first, I replaced them with calls like the above g_file_open_ex() example. But I realized that this function call is not very clear as to what it's doing unless you have the function signature in front of you, and it's used in exactly this form numerous times throughout the code. So I added a new function g_file_open_ro() that wraps this specific combination, and made my edits use that instead.
(Philosophically speaking, it would probably be better to have g_file_open() return a read-only descriptor, and add a new function like g_file_open_rw() or g_file_open_write() to return a writable one, so that the request for write access is explicit. But that's beyond the scope of this change.)


When the X server is executed, xrdp uses (when available) the Linux kernel's ""no new privileges"" feature to avoid potential fallout from invoking a setuid-root X server binary. This is a good thing to do, from a security perspective---but paradoxically, it gets in the way of further security hardening via AppArmor.
As it happens, the NoNewPrivs flag on a process prevents AppArmor from changing its confinement profile at all, even if the destination profile is more restrictive than the source one. What this means for xrdp is that the X server cannot be confined using a different, narrower profile than its parent (xrdp-sesman). If I attempt to do so, I get an error like this in the system log:
Apr  1 01:26:53 darkstar kernel: [ 4711.096244] audit: type=1400 audit(1648790813.552:691): apparmor=""DENIED"" operation=""exec"" info=""no new privs"" error=-1 profile=""xrdp-sesman"" name=""/usr/lib/xorg/Xorg"" pid=32353 comm=""xrdp-sesman"" requested_mask=""x"" denied_mask=""x"" fsuid=1000 ouid=0 target=""xrdp-sesman//xorg""

This is not ideal, because the X server needs access to a lot fewer things than xrdp-sesman---and, in turn, the X server needs a few things that xrdp-sesman can do without. The two processes should not run with the same set of permissions.
I didn't want to get rid of the PR_SET_NO_NEW_PRIVS functionality, and I wanted to avoid adding a new configuration option, so what I did was add a check: If AppArmor is loaded, and the process is already confined in some way, then don't set NoNewPrivs. This is done by examining the content of /proc/self/attr/apparmor/current. The check is performed in a fail-safe way, so if anything goes wrong, the NoNewPrivs transition remains in effect.


Apparmor profiles
My second commit adds the new profiles. Some notes on these:


These profiles have been developed and tested on Ubuntu.


I tested only with Xorg and Xvnc (specifically Xtigervnc). I don't have the setup to test vnc-any or neutrinordp-any.


My changes are to the latest Git devel branch, but I tested by applying them to the Debian 0.9.19 package and compiling it on Ubuntu. (Ubuntu does not have 0.9.19 yet, as of this writing.)


I accommodated the FUSE stuff so that users can login/logout without issue, but I have no idea how to test that functionality.


The profile filenames follow the standard AppArmor convention of reflecting the absolute path of the installed binary. That said, the filenames are arbitrary, and are not parsed in any way.


The profiles themselves do contain absolute paths to various binaries, as AppArmor requires. These can be handled by parameterization (see e.g. @{Xorg} in the usr.sbin.xrdp-sesman profile), alternation (AppArmor supports {a,b,c} syntax in paths), and of course build-time substitutions @like_this@.


The profiles can be enabled by copying them into /etc/apparmor.d/, running /etc/init.d/apparmor force-reload (or rebooting), and restarting xrdp. Any prohibited actions will appear in the system log with apparmor=""DENIED"".


The profiles, as written, are in ""enforce"" mode. If you would like to experiment, you may want to enable them in ""complain"" mode. This will cause AppArmor to allow the application to do whatever it wants, but still log anything that it would have prohibited in ""enforce"" mode. All that is needed is to symlink the profiles into the /etc/apparmor.d/force-complain/ directory, and run /etc/init.d/apparmor force-reload (or reboot). Then, watch your system log for apparmor=""ALLOWED"" messages.
(Additionally, any deny AppArmor directives should be preceded with audit [if not already present] so that violations of same are logged. Normally, deny directives request ""silent deny"" behavior.)


Further work


Careful testing of the more advanced xrdp functionality will be needed, to ensure that the AppArmor profiles allow the necessary access. I've covered the basic use cases, but of course there are going to be more exotic setups that need to be supported.


Some adaptation to other Linux distributions will likely be needed. My experience is only with Debian/Ubuntu, however, so I'm not in a good position to address this.


There is one major hole in these AppArmor profiles, which will require additional work to address. It is this line in usr.sbin.xrdp-sesman:
  /etc/xrdp/startwm.sh Uxr,

This allows startwm.sh to be executed without confinement. The user session cannot run within the tightly-defined profile for xrdp-sesman; in fact, it probably can't run (or at least normally doesn't run) in any AppArmor profile at all. So this line allows that script an ""escape hatch"" out of the restrictions imposed on xrdp-sesman.
Because this is a shell script, however, there is a risk that could allow an attacker to take advantage of the ""escape hatch."" Rather than explain the issue here, I will link this excellent article that describes it in detail. (This is an old article, hence the Wayback link, but its analysis still reflects the situation today.)
The current versions of the startwm.sh script rely on xrdp-sesman setting up PATH and LANG variables (using pam_env) prior to its invocation. However, in an environment where this script represents a loosening of process confinement, at least PATH has to be treated as ""tainted"" data potentially originating from an attacker.
The simplest thing to do would be to put e.g. PATH=/bin:/usr/bin at the top of the script, and then set up PATH/LANG properly in shell space. A more complex solution would be to have a separate helper program for this: this helper would be executed unconfined, and then it does the pam_env stuff, reads DefaultWindowManager or whatever from sesman.ini, and finally exec()s the program. (Importantly, this helper cannot take arguments, as they may come from an attacker and AppArmor rules cannot match against those.)


I'll be happy to answer any questions, and revise these changes as needed.","The NNP disable test isn't needed for SELinux - the SELinux policy included with Fedora allows a process with NNP set to pivot to the SELinux unconfined_t process type which is all that is needed.
While it would be great to have scenario-based testing for releases, we don't have any at the moment - just unit testing for new features. So given we can't regression-test these profiles easily, I don't think we can enable them as part of the base product. I'd b happy to ship examples which the destros could use as a basis - I think the upstreaming point you make is a good one.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2265,2022-05-16T09:56:50Z,,2022-06-03T12:59:41Z,OPEN,False,345,76,27,https://github.com/iskunk,Hardening xrdp with AppArmor,3,[],https://github.com/neutrinolabs/xrdp/pull/2265,https://github.com/iskunk,8,https://github.com/neutrinolabs/xrdp/pull/2265#issuecomment-1131461896,"For some time now, I've been wanting to develop AppArmor profiles to confine xrdp and its components while running. Given that the xrdp process is open to the network, and xrdp-sesman runs as root, these are good candidates for security hardening.
Code changes
I found that some modifications to the code are necessary, however, to make this feasible. These changes are in my first commit, and they are relatively minor:


The function g_file_open() is used in numerous places to read things like configuration files. However, it is also used for writing files (e.g. PID files). The meat of the function, on the POSIX side, is as follows:
    rv =  open(file_name, O_RDWR | O_CREAT, S_IRUSR | S_IWUSR);

    if (rv == -1)
    {
        /* can't open read / write, try to open read only */
        rv =  open(file_name, O_RDONLY);
    }

This ""try at first to open the file read/write"" approach does not look good in a confinement framework. With AppArmor enabled, I see messages like this in the system log:
Mar 29 17:13:05 darkstar kernel: [  494.847515] audit: type=1400 audit(1648588385.232:73): apparmor=""DENIED"" operation=""mknod"" profile=""/usr/sbin/xrdp"" name=""/etc/xrdp/xrdp_keyboard.ini"" pid=1922 comm=""xrdp"" requested_mask=""c"" denied_mask=""c"" fsuid=123 ouid=123

At first, this left me scratching my head thinking, ""Why is xrdp trying to write to the keyboard config file?"" This didn't prevent xrdp from running correctly (as can happen with AppArmor if you're not careful), but security-minded admins would look askance at this.
There is a different call in the xrdp code that is used in a few places, that gives proper read-only access:
    fd = g_file_open_ex(file_name, 1, 0, 0, 0);

The parameters are four flags, requesting any combination of read access, write access, file creation, and file truncation. Most of the time, however, the above combination is used.
The first change I made was to turn all the g_file_open() calls that appear to need only read access, to use a proper read-only call. At first, I replaced them with calls like the above g_file_open_ex() example. But I realized that this function call is not very clear as to what it's doing unless you have the function signature in front of you, and it's used in exactly this form numerous times throughout the code. So I added a new function g_file_open_ro() that wraps this specific combination, and made my edits use that instead.
(Philosophically speaking, it would probably be better to have g_file_open() return a read-only descriptor, and add a new function like g_file_open_rw() or g_file_open_write() to return a writable one, so that the request for write access is explicit. But that's beyond the scope of this change.)


When the X server is executed, xrdp uses (when available) the Linux kernel's ""no new privileges"" feature to avoid potential fallout from invoking a setuid-root X server binary. This is a good thing to do, from a security perspective---but paradoxically, it gets in the way of further security hardening via AppArmor.
As it happens, the NoNewPrivs flag on a process prevents AppArmor from changing its confinement profile at all, even if the destination profile is more restrictive than the source one. What this means for xrdp is that the X server cannot be confined using a different, narrower profile than its parent (xrdp-sesman). If I attempt to do so, I get an error like this in the system log:
Apr  1 01:26:53 darkstar kernel: [ 4711.096244] audit: type=1400 audit(1648790813.552:691): apparmor=""DENIED"" operation=""exec"" info=""no new privs"" error=-1 profile=""xrdp-sesman"" name=""/usr/lib/xorg/Xorg"" pid=32353 comm=""xrdp-sesman"" requested_mask=""x"" denied_mask=""x"" fsuid=1000 ouid=0 target=""xrdp-sesman//xorg""

This is not ideal, because the X server needs access to a lot fewer things than xrdp-sesman---and, in turn, the X server needs a few things that xrdp-sesman can do without. The two processes should not run with the same set of permissions.
I didn't want to get rid of the PR_SET_NO_NEW_PRIVS functionality, and I wanted to avoid adding a new configuration option, so what I did was add a check: If AppArmor is loaded, and the process is already confined in some way, then don't set NoNewPrivs. This is done by examining the content of /proc/self/attr/apparmor/current. The check is performed in a fail-safe way, so if anything goes wrong, the NoNewPrivs transition remains in effect.


Apparmor profiles
My second commit adds the new profiles. Some notes on these:


These profiles have been developed and tested on Ubuntu.


I tested only with Xorg and Xvnc (specifically Xtigervnc). I don't have the setup to test vnc-any or neutrinordp-any.


My changes are to the latest Git devel branch, but I tested by applying them to the Debian 0.9.19 package and compiling it on Ubuntu. (Ubuntu does not have 0.9.19 yet, as of this writing.)


I accommodated the FUSE stuff so that users can login/logout without issue, but I have no idea how to test that functionality.


The profile filenames follow the standard AppArmor convention of reflecting the absolute path of the installed binary. That said, the filenames are arbitrary, and are not parsed in any way.


The profiles themselves do contain absolute paths to various binaries, as AppArmor requires. These can be handled by parameterization (see e.g. @{Xorg} in the usr.sbin.xrdp-sesman profile), alternation (AppArmor supports {a,b,c} syntax in paths), and of course build-time substitutions @like_this@.


The profiles can be enabled by copying them into /etc/apparmor.d/, running /etc/init.d/apparmor force-reload (or rebooting), and restarting xrdp. Any prohibited actions will appear in the system log with apparmor=""DENIED"".


The profiles, as written, are in ""enforce"" mode. If you would like to experiment, you may want to enable them in ""complain"" mode. This will cause AppArmor to allow the application to do whatever it wants, but still log anything that it would have prohibited in ""enforce"" mode. All that is needed is to symlink the profiles into the /etc/apparmor.d/force-complain/ directory, and run /etc/init.d/apparmor force-reload (or reboot). Then, watch your system log for apparmor=""ALLOWED"" messages.
(Additionally, any deny AppArmor directives should be preceded with audit [if not already present] so that violations of same are logged. Normally, deny directives request ""silent deny"" behavior.)


Further work


Careful testing of the more advanced xrdp functionality will be needed, to ensure that the AppArmor profiles allow the necessary access. I've covered the basic use cases, but of course there are going to be more exotic setups that need to be supported.


Some adaptation to other Linux distributions will likely be needed. My experience is only with Debian/Ubuntu, however, so I'm not in a good position to address this.


There is one major hole in these AppArmor profiles, which will require additional work to address. It is this line in usr.sbin.xrdp-sesman:
  /etc/xrdp/startwm.sh Uxr,

This allows startwm.sh to be executed without confinement. The user session cannot run within the tightly-defined profile for xrdp-sesman; in fact, it probably can't run (or at least normally doesn't run) in any AppArmor profile at all. So this line allows that script an ""escape hatch"" out of the restrictions imposed on xrdp-sesman.
Because this is a shell script, however, there is a risk that could allow an attacker to take advantage of the ""escape hatch."" Rather than explain the issue here, I will link this excellent article that describes it in detail. (This is an old article, hence the Wayback link, but its analysis still reflects the situation today.)
The current versions of the startwm.sh script rely on xrdp-sesman setting up PATH and LANG variables (using pam_env) prior to its invocation. However, in an environment where this script represents a loosening of process confinement, at least PATH has to be treated as ""tainted"" data potentially originating from an attacker.
The simplest thing to do would be to put e.g. PATH=/bin:/usr/bin at the top of the script, and then set up PATH/LANG properly in shell space. A more complex solution would be to have a separate helper program for this: this helper would be executed unconfined, and then it does the pam_env stuff, reads DefaultWindowManager or whatever from sesman.ini, and finally exec()s the program. (Importantly, this helper cannot take arguments, as they may come from an attacker and AppArmor rules cannot match against those.)


I'll be happy to answer any questions, and revise these changes as needed.","Updated the code formatting, used != 0 on the g_strcmp() call for clarity, and rebased.
As I understand it, NNP generally prohibits security transitions on a process because there is no easy way to verify that the process permissions afterward are a subset of those before. However, there is an exception to this when transitioning from the unconfined state, because security restrictions are never going to increase the permissions of an unconfined process.
I think that's probably what's going on with the Fedora SELinux config. I suspect that if they were to take an approach similar to the one here (confine both xrdp-sesman and Xorg, but with different rulesets, thereby requiring a transition when exec'ing Xorg), then skipping NNP would likewise become necessary.
Please let me know if there's anything else you'd like to see polished further.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2265,2022-05-16T09:56:50Z,,2022-06-03T12:59:41Z,OPEN,False,345,76,27,https://github.com/iskunk,Hardening xrdp with AppArmor,3,[],https://github.com/neutrinolabs/xrdp/pull/2265,https://github.com/matt335672,9,https://github.com/neutrinolabs/xrdp/pull/2265#issuecomment-1131489949,"For some time now, I've been wanting to develop AppArmor profiles to confine xrdp and its components while running. Given that the xrdp process is open to the network, and xrdp-sesman runs as root, these are good candidates for security hardening.
Code changes
I found that some modifications to the code are necessary, however, to make this feasible. These changes are in my first commit, and they are relatively minor:


The function g_file_open() is used in numerous places to read things like configuration files. However, it is also used for writing files (e.g. PID files). The meat of the function, on the POSIX side, is as follows:
    rv =  open(file_name, O_RDWR | O_CREAT, S_IRUSR | S_IWUSR);

    if (rv == -1)
    {
        /* can't open read / write, try to open read only */
        rv =  open(file_name, O_RDONLY);
    }

This ""try at first to open the file read/write"" approach does not look good in a confinement framework. With AppArmor enabled, I see messages like this in the system log:
Mar 29 17:13:05 darkstar kernel: [  494.847515] audit: type=1400 audit(1648588385.232:73): apparmor=""DENIED"" operation=""mknod"" profile=""/usr/sbin/xrdp"" name=""/etc/xrdp/xrdp_keyboard.ini"" pid=1922 comm=""xrdp"" requested_mask=""c"" denied_mask=""c"" fsuid=123 ouid=123

At first, this left me scratching my head thinking, ""Why is xrdp trying to write to the keyboard config file?"" This didn't prevent xrdp from running correctly (as can happen with AppArmor if you're not careful), but security-minded admins would look askance at this.
There is a different call in the xrdp code that is used in a few places, that gives proper read-only access:
    fd = g_file_open_ex(file_name, 1, 0, 0, 0);

The parameters are four flags, requesting any combination of read access, write access, file creation, and file truncation. Most of the time, however, the above combination is used.
The first change I made was to turn all the g_file_open() calls that appear to need only read access, to use a proper read-only call. At first, I replaced them with calls like the above g_file_open_ex() example. But I realized that this function call is not very clear as to what it's doing unless you have the function signature in front of you, and it's used in exactly this form numerous times throughout the code. So I added a new function g_file_open_ro() that wraps this specific combination, and made my edits use that instead.
(Philosophically speaking, it would probably be better to have g_file_open() return a read-only descriptor, and add a new function like g_file_open_rw() or g_file_open_write() to return a writable one, so that the request for write access is explicit. But that's beyond the scope of this change.)


When the X server is executed, xrdp uses (when available) the Linux kernel's ""no new privileges"" feature to avoid potential fallout from invoking a setuid-root X server binary. This is a good thing to do, from a security perspective---but paradoxically, it gets in the way of further security hardening via AppArmor.
As it happens, the NoNewPrivs flag on a process prevents AppArmor from changing its confinement profile at all, even if the destination profile is more restrictive than the source one. What this means for xrdp is that the X server cannot be confined using a different, narrower profile than its parent (xrdp-sesman). If I attempt to do so, I get an error like this in the system log:
Apr  1 01:26:53 darkstar kernel: [ 4711.096244] audit: type=1400 audit(1648790813.552:691): apparmor=""DENIED"" operation=""exec"" info=""no new privs"" error=-1 profile=""xrdp-sesman"" name=""/usr/lib/xorg/Xorg"" pid=32353 comm=""xrdp-sesman"" requested_mask=""x"" denied_mask=""x"" fsuid=1000 ouid=0 target=""xrdp-sesman//xorg""

This is not ideal, because the X server needs access to a lot fewer things than xrdp-sesman---and, in turn, the X server needs a few things that xrdp-sesman can do without. The two processes should not run with the same set of permissions.
I didn't want to get rid of the PR_SET_NO_NEW_PRIVS functionality, and I wanted to avoid adding a new configuration option, so what I did was add a check: If AppArmor is loaded, and the process is already confined in some way, then don't set NoNewPrivs. This is done by examining the content of /proc/self/attr/apparmor/current. The check is performed in a fail-safe way, so if anything goes wrong, the NoNewPrivs transition remains in effect.


Apparmor profiles
My second commit adds the new profiles. Some notes on these:


These profiles have been developed and tested on Ubuntu.


I tested only with Xorg and Xvnc (specifically Xtigervnc). I don't have the setup to test vnc-any or neutrinordp-any.


My changes are to the latest Git devel branch, but I tested by applying them to the Debian 0.9.19 package and compiling it on Ubuntu. (Ubuntu does not have 0.9.19 yet, as of this writing.)


I accommodated the FUSE stuff so that users can login/logout without issue, but I have no idea how to test that functionality.


The profile filenames follow the standard AppArmor convention of reflecting the absolute path of the installed binary. That said, the filenames are arbitrary, and are not parsed in any way.


The profiles themselves do contain absolute paths to various binaries, as AppArmor requires. These can be handled by parameterization (see e.g. @{Xorg} in the usr.sbin.xrdp-sesman profile), alternation (AppArmor supports {a,b,c} syntax in paths), and of course build-time substitutions @like_this@.


The profiles can be enabled by copying them into /etc/apparmor.d/, running /etc/init.d/apparmor force-reload (or rebooting), and restarting xrdp. Any prohibited actions will appear in the system log with apparmor=""DENIED"".


The profiles, as written, are in ""enforce"" mode. If you would like to experiment, you may want to enable them in ""complain"" mode. This will cause AppArmor to allow the application to do whatever it wants, but still log anything that it would have prohibited in ""enforce"" mode. All that is needed is to symlink the profiles into the /etc/apparmor.d/force-complain/ directory, and run /etc/init.d/apparmor force-reload (or reboot). Then, watch your system log for apparmor=""ALLOWED"" messages.
(Additionally, any deny AppArmor directives should be preceded with audit [if not already present] so that violations of same are logged. Normally, deny directives request ""silent deny"" behavior.)


Further work


Careful testing of the more advanced xrdp functionality will be needed, to ensure that the AppArmor profiles allow the necessary access. I've covered the basic use cases, but of course there are going to be more exotic setups that need to be supported.


Some adaptation to other Linux distributions will likely be needed. My experience is only with Debian/Ubuntu, however, so I'm not in a good position to address this.


There is one major hole in these AppArmor profiles, which will require additional work to address. It is this line in usr.sbin.xrdp-sesman:
  /etc/xrdp/startwm.sh Uxr,

This allows startwm.sh to be executed without confinement. The user session cannot run within the tightly-defined profile for xrdp-sesman; in fact, it probably can't run (or at least normally doesn't run) in any AppArmor profile at all. So this line allows that script an ""escape hatch"" out of the restrictions imposed on xrdp-sesman.
Because this is a shell script, however, there is a risk that could allow an attacker to take advantage of the ""escape hatch."" Rather than explain the issue here, I will link this excellent article that describes it in detail. (This is an old article, hence the Wayback link, but its analysis still reflects the situation today.)
The current versions of the startwm.sh script rely on xrdp-sesman setting up PATH and LANG variables (using pam_env) prior to its invocation. However, in an environment where this script represents a loosening of process confinement, at least PATH has to be treated as ""tainted"" data potentially originating from an attacker.
The simplest thing to do would be to put e.g. PATH=/bin:/usr/bin at the top of the script, and then set up PATH/LANG properly in shell space. A more complex solution would be to have a separate helper program for this: this helper would be executed unconfined, and then it does the pam_env stuff, reads DefaultWindowManager or whatever from sesman.ini, and finally exec()s the program. (Importantly, this helper cannot take arguments, as they may come from an attacker and AppArmor rules cannot match against those.)


I'll be happy to answer any questions, and revise these changes as needed.","The default Fedora SELinux policy is as basic as you can imagine. Essentially the daemons run as process type unconfined_service_t, where they have a few restrictions on what they can do, and the session and the X server run as unconfined_t (even fewer restrictions) which is intended for interactive user sessions only.
Regarding your comment on startwm.sh, on Fedora this runs as unconfined_t as a standard user, which is in-line with how interactive sessions are treated by default.
If particular shops want to introduce a more restrictive policy, by running xrdp through their own use-cases, they are welcome to do so, and can do so by replacing the xrdp-selinux RPM. Shops which don't want to user SELinux, for whatever reason, do not have to install the xrdp-selinux RPM. AAUI, that's from the Fedora packaging guidelines.
Thanks for your changes, and the work youve put into this. I'll have a good look and a think when I've got a bit more time than I have today.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2265,2022-05-16T09:56:50Z,,2022-06-03T12:59:41Z,OPEN,False,345,76,27,https://github.com/iskunk,Hardening xrdp with AppArmor,3,[],https://github.com/neutrinolabs/xrdp/pull/2265,https://github.com/matt335672,10,https://github.com/neutrinolabs/xrdp/pull/2265#issuecomment-1137036252,"For some time now, I've been wanting to develop AppArmor profiles to confine xrdp and its components while running. Given that the xrdp process is open to the network, and xrdp-sesman runs as root, these are good candidates for security hardening.
Code changes
I found that some modifications to the code are necessary, however, to make this feasible. These changes are in my first commit, and they are relatively minor:


The function g_file_open() is used in numerous places to read things like configuration files. However, it is also used for writing files (e.g. PID files). The meat of the function, on the POSIX side, is as follows:
    rv =  open(file_name, O_RDWR | O_CREAT, S_IRUSR | S_IWUSR);

    if (rv == -1)
    {
        /* can't open read / write, try to open read only */
        rv =  open(file_name, O_RDONLY);
    }

This ""try at first to open the file read/write"" approach does not look good in a confinement framework. With AppArmor enabled, I see messages like this in the system log:
Mar 29 17:13:05 darkstar kernel: [  494.847515] audit: type=1400 audit(1648588385.232:73): apparmor=""DENIED"" operation=""mknod"" profile=""/usr/sbin/xrdp"" name=""/etc/xrdp/xrdp_keyboard.ini"" pid=1922 comm=""xrdp"" requested_mask=""c"" denied_mask=""c"" fsuid=123 ouid=123

At first, this left me scratching my head thinking, ""Why is xrdp trying to write to the keyboard config file?"" This didn't prevent xrdp from running correctly (as can happen with AppArmor if you're not careful), but security-minded admins would look askance at this.
There is a different call in the xrdp code that is used in a few places, that gives proper read-only access:
    fd = g_file_open_ex(file_name, 1, 0, 0, 0);

The parameters are four flags, requesting any combination of read access, write access, file creation, and file truncation. Most of the time, however, the above combination is used.
The first change I made was to turn all the g_file_open() calls that appear to need only read access, to use a proper read-only call. At first, I replaced them with calls like the above g_file_open_ex() example. But I realized that this function call is not very clear as to what it's doing unless you have the function signature in front of you, and it's used in exactly this form numerous times throughout the code. So I added a new function g_file_open_ro() that wraps this specific combination, and made my edits use that instead.
(Philosophically speaking, it would probably be better to have g_file_open() return a read-only descriptor, and add a new function like g_file_open_rw() or g_file_open_write() to return a writable one, so that the request for write access is explicit. But that's beyond the scope of this change.)


When the X server is executed, xrdp uses (when available) the Linux kernel's ""no new privileges"" feature to avoid potential fallout from invoking a setuid-root X server binary. This is a good thing to do, from a security perspective---but paradoxically, it gets in the way of further security hardening via AppArmor.
As it happens, the NoNewPrivs flag on a process prevents AppArmor from changing its confinement profile at all, even if the destination profile is more restrictive than the source one. What this means for xrdp is that the X server cannot be confined using a different, narrower profile than its parent (xrdp-sesman). If I attempt to do so, I get an error like this in the system log:
Apr  1 01:26:53 darkstar kernel: [ 4711.096244] audit: type=1400 audit(1648790813.552:691): apparmor=""DENIED"" operation=""exec"" info=""no new privs"" error=-1 profile=""xrdp-sesman"" name=""/usr/lib/xorg/Xorg"" pid=32353 comm=""xrdp-sesman"" requested_mask=""x"" denied_mask=""x"" fsuid=1000 ouid=0 target=""xrdp-sesman//xorg""

This is not ideal, because the X server needs access to a lot fewer things than xrdp-sesman---and, in turn, the X server needs a few things that xrdp-sesman can do without. The two processes should not run with the same set of permissions.
I didn't want to get rid of the PR_SET_NO_NEW_PRIVS functionality, and I wanted to avoid adding a new configuration option, so what I did was add a check: If AppArmor is loaded, and the process is already confined in some way, then don't set NoNewPrivs. This is done by examining the content of /proc/self/attr/apparmor/current. The check is performed in a fail-safe way, so if anything goes wrong, the NoNewPrivs transition remains in effect.


Apparmor profiles
My second commit adds the new profiles. Some notes on these:


These profiles have been developed and tested on Ubuntu.


I tested only with Xorg and Xvnc (specifically Xtigervnc). I don't have the setup to test vnc-any or neutrinordp-any.


My changes are to the latest Git devel branch, but I tested by applying them to the Debian 0.9.19 package and compiling it on Ubuntu. (Ubuntu does not have 0.9.19 yet, as of this writing.)


I accommodated the FUSE stuff so that users can login/logout without issue, but I have no idea how to test that functionality.


The profile filenames follow the standard AppArmor convention of reflecting the absolute path of the installed binary. That said, the filenames are arbitrary, and are not parsed in any way.


The profiles themselves do contain absolute paths to various binaries, as AppArmor requires. These can be handled by parameterization (see e.g. @{Xorg} in the usr.sbin.xrdp-sesman profile), alternation (AppArmor supports {a,b,c} syntax in paths), and of course build-time substitutions @like_this@.


The profiles can be enabled by copying them into /etc/apparmor.d/, running /etc/init.d/apparmor force-reload (or rebooting), and restarting xrdp. Any prohibited actions will appear in the system log with apparmor=""DENIED"".


The profiles, as written, are in ""enforce"" mode. If you would like to experiment, you may want to enable them in ""complain"" mode. This will cause AppArmor to allow the application to do whatever it wants, but still log anything that it would have prohibited in ""enforce"" mode. All that is needed is to symlink the profiles into the /etc/apparmor.d/force-complain/ directory, and run /etc/init.d/apparmor force-reload (or reboot). Then, watch your system log for apparmor=""ALLOWED"" messages.
(Additionally, any deny AppArmor directives should be preceded with audit [if not already present] so that violations of same are logged. Normally, deny directives request ""silent deny"" behavior.)


Further work


Careful testing of the more advanced xrdp functionality will be needed, to ensure that the AppArmor profiles allow the necessary access. I've covered the basic use cases, but of course there are going to be more exotic setups that need to be supported.


Some adaptation to other Linux distributions will likely be needed. My experience is only with Debian/Ubuntu, however, so I'm not in a good position to address this.


There is one major hole in these AppArmor profiles, which will require additional work to address. It is this line in usr.sbin.xrdp-sesman:
  /etc/xrdp/startwm.sh Uxr,

This allows startwm.sh to be executed without confinement. The user session cannot run within the tightly-defined profile for xrdp-sesman; in fact, it probably can't run (or at least normally doesn't run) in any AppArmor profile at all. So this line allows that script an ""escape hatch"" out of the restrictions imposed on xrdp-sesman.
Because this is a shell script, however, there is a risk that could allow an attacker to take advantage of the ""escape hatch."" Rather than explain the issue here, I will link this excellent article that describes it in detail. (This is an old article, hence the Wayback link, but its analysis still reflects the situation today.)
The current versions of the startwm.sh script rely on xrdp-sesman setting up PATH and LANG variables (using pam_env) prior to its invocation. However, in an environment where this script represents a loosening of process confinement, at least PATH has to be treated as ""tainted"" data potentially originating from an attacker.
The simplest thing to do would be to put e.g. PATH=/bin:/usr/bin at the top of the script, and then set up PATH/LANG properly in shell space. A more complex solution would be to have a separate helper program for this: this helper would be executed unconfined, and then it does the pam_env stuff, reads DefaultWindowManager or whatever from sesman.ini, and finally exec()s the program. (Importantly, this helper cannot take arguments, as they may come from an attacker and AppArmor rules cannot match against those.)


I'll be happy to answer any questions, and revise these changes as needed.","I've got two significantly larger comments in addition to the minor one above.
The first is that AppArmor support is not supported on all our target platforms (some Linux, but also notably FreeBSD), and so needs to be enabled at compile time. That's pretty simple, and I even worked out a patch for it (attached).
patch.txt
The second is a bit more of a problem, possibly a showstopper. I was looking at substituting variables in the apparmor.d instfiles. The substitution is easy enough, and renaming the files to match whatever sbindir is set to is also doable. The problem is that the files themselves are way too specific to Debian/Ubuntu in their current form.
There's a bunch of stuff in there that we have no real control over, including but not limited to:-

Paths to X servers
Paths to TLS cert + key
Paths to stuff in user XDG_DATA_HOME.
Stuff that the X server does with dbus.

I think these are going to have to be factored out into Distro-specific files somehow (which will not be maintained by us), and it's not at all clear to me how we can do that.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2265,2022-05-16T09:56:50Z,,2022-06-03T12:59:41Z,OPEN,False,345,76,27,https://github.com/iskunk,Hardening xrdp with AppArmor,3,[],https://github.com/neutrinolabs/xrdp/pull/2265,https://github.com/iskunk,11,https://github.com/neutrinolabs/xrdp/pull/2265#issuecomment-1138140786,"For some time now, I've been wanting to develop AppArmor profiles to confine xrdp and its components while running. Given that the xrdp process is open to the network, and xrdp-sesman runs as root, these are good candidates for security hardening.
Code changes
I found that some modifications to the code are necessary, however, to make this feasible. These changes are in my first commit, and they are relatively minor:


The function g_file_open() is used in numerous places to read things like configuration files. However, it is also used for writing files (e.g. PID files). The meat of the function, on the POSIX side, is as follows:
    rv =  open(file_name, O_RDWR | O_CREAT, S_IRUSR | S_IWUSR);

    if (rv == -1)
    {
        /* can't open read / write, try to open read only */
        rv =  open(file_name, O_RDONLY);
    }

This ""try at first to open the file read/write"" approach does not look good in a confinement framework. With AppArmor enabled, I see messages like this in the system log:
Mar 29 17:13:05 darkstar kernel: [  494.847515] audit: type=1400 audit(1648588385.232:73): apparmor=""DENIED"" operation=""mknod"" profile=""/usr/sbin/xrdp"" name=""/etc/xrdp/xrdp_keyboard.ini"" pid=1922 comm=""xrdp"" requested_mask=""c"" denied_mask=""c"" fsuid=123 ouid=123

At first, this left me scratching my head thinking, ""Why is xrdp trying to write to the keyboard config file?"" This didn't prevent xrdp from running correctly (as can happen with AppArmor if you're not careful), but security-minded admins would look askance at this.
There is a different call in the xrdp code that is used in a few places, that gives proper read-only access:
    fd = g_file_open_ex(file_name, 1, 0, 0, 0);

The parameters are four flags, requesting any combination of read access, write access, file creation, and file truncation. Most of the time, however, the above combination is used.
The first change I made was to turn all the g_file_open() calls that appear to need only read access, to use a proper read-only call. At first, I replaced them with calls like the above g_file_open_ex() example. But I realized that this function call is not very clear as to what it's doing unless you have the function signature in front of you, and it's used in exactly this form numerous times throughout the code. So I added a new function g_file_open_ro() that wraps this specific combination, and made my edits use that instead.
(Philosophically speaking, it would probably be better to have g_file_open() return a read-only descriptor, and add a new function like g_file_open_rw() or g_file_open_write() to return a writable one, so that the request for write access is explicit. But that's beyond the scope of this change.)


When the X server is executed, xrdp uses (when available) the Linux kernel's ""no new privileges"" feature to avoid potential fallout from invoking a setuid-root X server binary. This is a good thing to do, from a security perspective---but paradoxically, it gets in the way of further security hardening via AppArmor.
As it happens, the NoNewPrivs flag on a process prevents AppArmor from changing its confinement profile at all, even if the destination profile is more restrictive than the source one. What this means for xrdp is that the X server cannot be confined using a different, narrower profile than its parent (xrdp-sesman). If I attempt to do so, I get an error like this in the system log:
Apr  1 01:26:53 darkstar kernel: [ 4711.096244] audit: type=1400 audit(1648790813.552:691): apparmor=""DENIED"" operation=""exec"" info=""no new privs"" error=-1 profile=""xrdp-sesman"" name=""/usr/lib/xorg/Xorg"" pid=32353 comm=""xrdp-sesman"" requested_mask=""x"" denied_mask=""x"" fsuid=1000 ouid=0 target=""xrdp-sesman//xorg""

This is not ideal, because the X server needs access to a lot fewer things than xrdp-sesman---and, in turn, the X server needs a few things that xrdp-sesman can do without. The two processes should not run with the same set of permissions.
I didn't want to get rid of the PR_SET_NO_NEW_PRIVS functionality, and I wanted to avoid adding a new configuration option, so what I did was add a check: If AppArmor is loaded, and the process is already confined in some way, then don't set NoNewPrivs. This is done by examining the content of /proc/self/attr/apparmor/current. The check is performed in a fail-safe way, so if anything goes wrong, the NoNewPrivs transition remains in effect.


Apparmor profiles
My second commit adds the new profiles. Some notes on these:


These profiles have been developed and tested on Ubuntu.


I tested only with Xorg and Xvnc (specifically Xtigervnc). I don't have the setup to test vnc-any or neutrinordp-any.


My changes are to the latest Git devel branch, but I tested by applying them to the Debian 0.9.19 package and compiling it on Ubuntu. (Ubuntu does not have 0.9.19 yet, as of this writing.)


I accommodated the FUSE stuff so that users can login/logout without issue, but I have no idea how to test that functionality.


The profile filenames follow the standard AppArmor convention of reflecting the absolute path of the installed binary. That said, the filenames are arbitrary, and are not parsed in any way.


The profiles themselves do contain absolute paths to various binaries, as AppArmor requires. These can be handled by parameterization (see e.g. @{Xorg} in the usr.sbin.xrdp-sesman profile), alternation (AppArmor supports {a,b,c} syntax in paths), and of course build-time substitutions @like_this@.


The profiles can be enabled by copying them into /etc/apparmor.d/, running /etc/init.d/apparmor force-reload (or rebooting), and restarting xrdp. Any prohibited actions will appear in the system log with apparmor=""DENIED"".


The profiles, as written, are in ""enforce"" mode. If you would like to experiment, you may want to enable them in ""complain"" mode. This will cause AppArmor to allow the application to do whatever it wants, but still log anything that it would have prohibited in ""enforce"" mode. All that is needed is to symlink the profiles into the /etc/apparmor.d/force-complain/ directory, and run /etc/init.d/apparmor force-reload (or reboot). Then, watch your system log for apparmor=""ALLOWED"" messages.
(Additionally, any deny AppArmor directives should be preceded with audit [if not already present] so that violations of same are logged. Normally, deny directives request ""silent deny"" behavior.)


Further work


Careful testing of the more advanced xrdp functionality will be needed, to ensure that the AppArmor profiles allow the necessary access. I've covered the basic use cases, but of course there are going to be more exotic setups that need to be supported.


Some adaptation to other Linux distributions will likely be needed. My experience is only with Debian/Ubuntu, however, so I'm not in a good position to address this.


There is one major hole in these AppArmor profiles, which will require additional work to address. It is this line in usr.sbin.xrdp-sesman:
  /etc/xrdp/startwm.sh Uxr,

This allows startwm.sh to be executed without confinement. The user session cannot run within the tightly-defined profile for xrdp-sesman; in fact, it probably can't run (or at least normally doesn't run) in any AppArmor profile at all. So this line allows that script an ""escape hatch"" out of the restrictions imposed on xrdp-sesman.
Because this is a shell script, however, there is a risk that could allow an attacker to take advantage of the ""escape hatch."" Rather than explain the issue here, I will link this excellent article that describes it in detail. (This is an old article, hence the Wayback link, but its analysis still reflects the situation today.)
The current versions of the startwm.sh script rely on xrdp-sesman setting up PATH and LANG variables (using pam_env) prior to its invocation. However, in an environment where this script represents a loosening of process confinement, at least PATH has to be treated as ""tainted"" data potentially originating from an attacker.
The simplest thing to do would be to put e.g. PATH=/bin:/usr/bin at the top of the script, and then set up PATH/LANG properly in shell space. A more complex solution would be to have a separate helper program for this: this helper would be executed unconfined, and then it does the pam_env stuff, reads DefaultWindowManager or whatever from sesman.ini, and finally exec()s the program. (Importantly, this helper cannot take arguments, as they may come from an attacker and AppArmor rules cannot match against those.)


I'll be happy to answer any questions, and revise these changes as needed.","Re AppArmor support on target platforms: Is a configure option really necessary? The AppArmor proc-file check only occurs if HAVE_SYS_PRCTL_H and PR_SET_NO_NEW_PRIVS are defined; presumably this will only be the case on Linux. On Linux systems that are not using AppArmor, the g_file_open_ro() call will fail harmlessly.
(Also, --enable-apparmor would imply that xrdp is using the AppArmor backend library, which is way more integration than I think either of us want)
Re distro-specific bits, yes---the profiles I've submitted are particular to Debian/Ubuntu, as that is what I'm able to provide. Generalizing them to cover other distros will need contributions from those users.
The bits that are outside of our control should, in theory, be addressed by the #include <abstractions/...> lines. I made use of those as much as I could, but there were still a few required permissions that they did not cover.
However, while the profiles may not be as simple as they ought to be, the fact that they (AFAIK) exhaustively list the permissions required for the programs to run is useful. It means that a packager need only delete permissions that are made redundant by newer abstractions (or edit paths on existing permissions to match distro conventions) instead of having to hunt for new, unknown permissions. And permissions relating to XDG_DATA_HOME and DBus shouldn't need to be touched at all, as those elements are standardized across distros by freedesktop.org.
And of course, if users contribute details of the modifications that are needed to adapt the profiles to their systems, then those can be rolled in so the profiles are ready to use out-of -the-box. To give a simple example, where Debian/Ubuntu use /etc/ssl/certs/ssl-cert-snakeoil.pem, another distro might use /etc/certs/snakeoil.pem. That wouldn't even need to be substituted; the profile could safely grant read access to both. (It's unlikely that any system would use both directories, and desire to limit access to only one.)",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2265,2022-05-16T09:56:50Z,,2022-06-03T12:59:41Z,OPEN,False,345,76,27,https://github.com/iskunk,Hardening xrdp with AppArmor,3,[],https://github.com/neutrinolabs/xrdp/pull/2265,https://github.com/matt335672,12,https://github.com/neutrinolabs/xrdp/pull/2265#issuecomment-1138317702,"For some time now, I've been wanting to develop AppArmor profiles to confine xrdp and its components while running. Given that the xrdp process is open to the network, and xrdp-sesman runs as root, these are good candidates for security hardening.
Code changes
I found that some modifications to the code are necessary, however, to make this feasible. These changes are in my first commit, and they are relatively minor:


The function g_file_open() is used in numerous places to read things like configuration files. However, it is also used for writing files (e.g. PID files). The meat of the function, on the POSIX side, is as follows:
    rv =  open(file_name, O_RDWR | O_CREAT, S_IRUSR | S_IWUSR);

    if (rv == -1)
    {
        /* can't open read / write, try to open read only */
        rv =  open(file_name, O_RDONLY);
    }

This ""try at first to open the file read/write"" approach does not look good in a confinement framework. With AppArmor enabled, I see messages like this in the system log:
Mar 29 17:13:05 darkstar kernel: [  494.847515] audit: type=1400 audit(1648588385.232:73): apparmor=""DENIED"" operation=""mknod"" profile=""/usr/sbin/xrdp"" name=""/etc/xrdp/xrdp_keyboard.ini"" pid=1922 comm=""xrdp"" requested_mask=""c"" denied_mask=""c"" fsuid=123 ouid=123

At first, this left me scratching my head thinking, ""Why is xrdp trying to write to the keyboard config file?"" This didn't prevent xrdp from running correctly (as can happen with AppArmor if you're not careful), but security-minded admins would look askance at this.
There is a different call in the xrdp code that is used in a few places, that gives proper read-only access:
    fd = g_file_open_ex(file_name, 1, 0, 0, 0);

The parameters are four flags, requesting any combination of read access, write access, file creation, and file truncation. Most of the time, however, the above combination is used.
The first change I made was to turn all the g_file_open() calls that appear to need only read access, to use a proper read-only call. At first, I replaced them with calls like the above g_file_open_ex() example. But I realized that this function call is not very clear as to what it's doing unless you have the function signature in front of you, and it's used in exactly this form numerous times throughout the code. So I added a new function g_file_open_ro() that wraps this specific combination, and made my edits use that instead.
(Philosophically speaking, it would probably be better to have g_file_open() return a read-only descriptor, and add a new function like g_file_open_rw() or g_file_open_write() to return a writable one, so that the request for write access is explicit. But that's beyond the scope of this change.)


When the X server is executed, xrdp uses (when available) the Linux kernel's ""no new privileges"" feature to avoid potential fallout from invoking a setuid-root X server binary. This is a good thing to do, from a security perspective---but paradoxically, it gets in the way of further security hardening via AppArmor.
As it happens, the NoNewPrivs flag on a process prevents AppArmor from changing its confinement profile at all, even if the destination profile is more restrictive than the source one. What this means for xrdp is that the X server cannot be confined using a different, narrower profile than its parent (xrdp-sesman). If I attempt to do so, I get an error like this in the system log:
Apr  1 01:26:53 darkstar kernel: [ 4711.096244] audit: type=1400 audit(1648790813.552:691): apparmor=""DENIED"" operation=""exec"" info=""no new privs"" error=-1 profile=""xrdp-sesman"" name=""/usr/lib/xorg/Xorg"" pid=32353 comm=""xrdp-sesman"" requested_mask=""x"" denied_mask=""x"" fsuid=1000 ouid=0 target=""xrdp-sesman//xorg""

This is not ideal, because the X server needs access to a lot fewer things than xrdp-sesman---and, in turn, the X server needs a few things that xrdp-sesman can do without. The two processes should not run with the same set of permissions.
I didn't want to get rid of the PR_SET_NO_NEW_PRIVS functionality, and I wanted to avoid adding a new configuration option, so what I did was add a check: If AppArmor is loaded, and the process is already confined in some way, then don't set NoNewPrivs. This is done by examining the content of /proc/self/attr/apparmor/current. The check is performed in a fail-safe way, so if anything goes wrong, the NoNewPrivs transition remains in effect.


Apparmor profiles
My second commit adds the new profiles. Some notes on these:


These profiles have been developed and tested on Ubuntu.


I tested only with Xorg and Xvnc (specifically Xtigervnc). I don't have the setup to test vnc-any or neutrinordp-any.


My changes are to the latest Git devel branch, but I tested by applying them to the Debian 0.9.19 package and compiling it on Ubuntu. (Ubuntu does not have 0.9.19 yet, as of this writing.)


I accommodated the FUSE stuff so that users can login/logout without issue, but I have no idea how to test that functionality.


The profile filenames follow the standard AppArmor convention of reflecting the absolute path of the installed binary. That said, the filenames are arbitrary, and are not parsed in any way.


The profiles themselves do contain absolute paths to various binaries, as AppArmor requires. These can be handled by parameterization (see e.g. @{Xorg} in the usr.sbin.xrdp-sesman profile), alternation (AppArmor supports {a,b,c} syntax in paths), and of course build-time substitutions @like_this@.


The profiles can be enabled by copying them into /etc/apparmor.d/, running /etc/init.d/apparmor force-reload (or rebooting), and restarting xrdp. Any prohibited actions will appear in the system log with apparmor=""DENIED"".


The profiles, as written, are in ""enforce"" mode. If you would like to experiment, you may want to enable them in ""complain"" mode. This will cause AppArmor to allow the application to do whatever it wants, but still log anything that it would have prohibited in ""enforce"" mode. All that is needed is to symlink the profiles into the /etc/apparmor.d/force-complain/ directory, and run /etc/init.d/apparmor force-reload (or reboot). Then, watch your system log for apparmor=""ALLOWED"" messages.
(Additionally, any deny AppArmor directives should be preceded with audit [if not already present] so that violations of same are logged. Normally, deny directives request ""silent deny"" behavior.)


Further work


Careful testing of the more advanced xrdp functionality will be needed, to ensure that the AppArmor profiles allow the necessary access. I've covered the basic use cases, but of course there are going to be more exotic setups that need to be supported.


Some adaptation to other Linux distributions will likely be needed. My experience is only with Debian/Ubuntu, however, so I'm not in a good position to address this.


There is one major hole in these AppArmor profiles, which will require additional work to address. It is this line in usr.sbin.xrdp-sesman:
  /etc/xrdp/startwm.sh Uxr,

This allows startwm.sh to be executed without confinement. The user session cannot run within the tightly-defined profile for xrdp-sesman; in fact, it probably can't run (or at least normally doesn't run) in any AppArmor profile at all. So this line allows that script an ""escape hatch"" out of the restrictions imposed on xrdp-sesman.
Because this is a shell script, however, there is a risk that could allow an attacker to take advantage of the ""escape hatch."" Rather than explain the issue here, I will link this excellent article that describes it in detail. (This is an old article, hence the Wayback link, but its analysis still reflects the situation today.)
The current versions of the startwm.sh script rely on xrdp-sesman setting up PATH and LANG variables (using pam_env) prior to its invocation. However, in an environment where this script represents a loosening of process confinement, at least PATH has to be treated as ""tainted"" data potentially originating from an attacker.
The simplest thing to do would be to put e.g. PATH=/bin:/usr/bin at the top of the script, and then set up PATH/LANG properly in shell space. A more complex solution would be to have a separate helper program for this: this helper would be executed unconfined, and then it does the pam_env stuff, reads DefaultWindowManager or whatever from sesman.ini, and finally exec()s the program. (Importantly, this helper cannot take arguments, as they may come from an attacker and AppArmor rules cannot match against those.)


I'll be happy to answer any questions, and revise these changes as needed.","I believe the configure option is necessary. We've made a decision as a project to make such things explicit, so that xrdp -v is always informative, and so that distros don't have to pollute their packaging scripts by removing unnecessary stuff for them.  AppArmor is by no means a universally supported LSM.
I'll try to be a little bit clearer about my profile concerns. We really don't have the effort available on this project to spend time fixing AppArmor profiles which aren't quite right for users who have made changes to their systems without having the competence to consider the consequences. We've all been there as users ourselves, and I'm happy to help many newbies here (as my posting record will testify).  It is however important that anything we merge here doesn't impact our existing maintenance burden, which we are actively trying to reduce at the moment (with over 300 outstanding issues).
It follows that anything we ship has to be bullet-proof, either because it's been fully tested by us, or because the distros have decided it's a feature they're happy to enable and make bulletproof themselves.
Please don't misunderstand me - I think what you're doing here is a great addition.
The generalisations will need to be made before we can ship any live profiles. I'm happy for us to ship an example profile for Ubuntu, but I think even the one we have at the moment is too fragile for this.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2265,2022-05-16T09:56:50Z,,2022-06-03T12:59:41Z,OPEN,False,345,76,27,https://github.com/iskunk,Hardening xrdp with AppArmor,3,[],https://github.com/neutrinolabs/xrdp/pull/2265,https://github.com/iskunk,13,https://github.com/neutrinolabs/xrdp/pull/2265#issuecomment-1139396862,"For some time now, I've been wanting to develop AppArmor profiles to confine xrdp and its components while running. Given that the xrdp process is open to the network, and xrdp-sesman runs as root, these are good candidates for security hardening.
Code changes
I found that some modifications to the code are necessary, however, to make this feasible. These changes are in my first commit, and they are relatively minor:


The function g_file_open() is used in numerous places to read things like configuration files. However, it is also used for writing files (e.g. PID files). The meat of the function, on the POSIX side, is as follows:
    rv =  open(file_name, O_RDWR | O_CREAT, S_IRUSR | S_IWUSR);

    if (rv == -1)
    {
        /* can't open read / write, try to open read only */
        rv =  open(file_name, O_RDONLY);
    }

This ""try at first to open the file read/write"" approach does not look good in a confinement framework. With AppArmor enabled, I see messages like this in the system log:
Mar 29 17:13:05 darkstar kernel: [  494.847515] audit: type=1400 audit(1648588385.232:73): apparmor=""DENIED"" operation=""mknod"" profile=""/usr/sbin/xrdp"" name=""/etc/xrdp/xrdp_keyboard.ini"" pid=1922 comm=""xrdp"" requested_mask=""c"" denied_mask=""c"" fsuid=123 ouid=123

At first, this left me scratching my head thinking, ""Why is xrdp trying to write to the keyboard config file?"" This didn't prevent xrdp from running correctly (as can happen with AppArmor if you're not careful), but security-minded admins would look askance at this.
There is a different call in the xrdp code that is used in a few places, that gives proper read-only access:
    fd = g_file_open_ex(file_name, 1, 0, 0, 0);

The parameters are four flags, requesting any combination of read access, write access, file creation, and file truncation. Most of the time, however, the above combination is used.
The first change I made was to turn all the g_file_open() calls that appear to need only read access, to use a proper read-only call. At first, I replaced them with calls like the above g_file_open_ex() example. But I realized that this function call is not very clear as to what it's doing unless you have the function signature in front of you, and it's used in exactly this form numerous times throughout the code. So I added a new function g_file_open_ro() that wraps this specific combination, and made my edits use that instead.
(Philosophically speaking, it would probably be better to have g_file_open() return a read-only descriptor, and add a new function like g_file_open_rw() or g_file_open_write() to return a writable one, so that the request for write access is explicit. But that's beyond the scope of this change.)


When the X server is executed, xrdp uses (when available) the Linux kernel's ""no new privileges"" feature to avoid potential fallout from invoking a setuid-root X server binary. This is a good thing to do, from a security perspective---but paradoxically, it gets in the way of further security hardening via AppArmor.
As it happens, the NoNewPrivs flag on a process prevents AppArmor from changing its confinement profile at all, even if the destination profile is more restrictive than the source one. What this means for xrdp is that the X server cannot be confined using a different, narrower profile than its parent (xrdp-sesman). If I attempt to do so, I get an error like this in the system log:
Apr  1 01:26:53 darkstar kernel: [ 4711.096244] audit: type=1400 audit(1648790813.552:691): apparmor=""DENIED"" operation=""exec"" info=""no new privs"" error=-1 profile=""xrdp-sesman"" name=""/usr/lib/xorg/Xorg"" pid=32353 comm=""xrdp-sesman"" requested_mask=""x"" denied_mask=""x"" fsuid=1000 ouid=0 target=""xrdp-sesman//xorg""

This is not ideal, because the X server needs access to a lot fewer things than xrdp-sesman---and, in turn, the X server needs a few things that xrdp-sesman can do without. The two processes should not run with the same set of permissions.
I didn't want to get rid of the PR_SET_NO_NEW_PRIVS functionality, and I wanted to avoid adding a new configuration option, so what I did was add a check: If AppArmor is loaded, and the process is already confined in some way, then don't set NoNewPrivs. This is done by examining the content of /proc/self/attr/apparmor/current. The check is performed in a fail-safe way, so if anything goes wrong, the NoNewPrivs transition remains in effect.


Apparmor profiles
My second commit adds the new profiles. Some notes on these:


These profiles have been developed and tested on Ubuntu.


I tested only with Xorg and Xvnc (specifically Xtigervnc). I don't have the setup to test vnc-any or neutrinordp-any.


My changes are to the latest Git devel branch, but I tested by applying them to the Debian 0.9.19 package and compiling it on Ubuntu. (Ubuntu does not have 0.9.19 yet, as of this writing.)


I accommodated the FUSE stuff so that users can login/logout without issue, but I have no idea how to test that functionality.


The profile filenames follow the standard AppArmor convention of reflecting the absolute path of the installed binary. That said, the filenames are arbitrary, and are not parsed in any way.


The profiles themselves do contain absolute paths to various binaries, as AppArmor requires. These can be handled by parameterization (see e.g. @{Xorg} in the usr.sbin.xrdp-sesman profile), alternation (AppArmor supports {a,b,c} syntax in paths), and of course build-time substitutions @like_this@.


The profiles can be enabled by copying them into /etc/apparmor.d/, running /etc/init.d/apparmor force-reload (or rebooting), and restarting xrdp. Any prohibited actions will appear in the system log with apparmor=""DENIED"".


The profiles, as written, are in ""enforce"" mode. If you would like to experiment, you may want to enable them in ""complain"" mode. This will cause AppArmor to allow the application to do whatever it wants, but still log anything that it would have prohibited in ""enforce"" mode. All that is needed is to symlink the profiles into the /etc/apparmor.d/force-complain/ directory, and run /etc/init.d/apparmor force-reload (or reboot). Then, watch your system log for apparmor=""ALLOWED"" messages.
(Additionally, any deny AppArmor directives should be preceded with audit [if not already present] so that violations of same are logged. Normally, deny directives request ""silent deny"" behavior.)


Further work


Careful testing of the more advanced xrdp functionality will be needed, to ensure that the AppArmor profiles allow the necessary access. I've covered the basic use cases, but of course there are going to be more exotic setups that need to be supported.


Some adaptation to other Linux distributions will likely be needed. My experience is only with Debian/Ubuntu, however, so I'm not in a good position to address this.


There is one major hole in these AppArmor profiles, which will require additional work to address. It is this line in usr.sbin.xrdp-sesman:
  /etc/xrdp/startwm.sh Uxr,

This allows startwm.sh to be executed without confinement. The user session cannot run within the tightly-defined profile for xrdp-sesman; in fact, it probably can't run (or at least normally doesn't run) in any AppArmor profile at all. So this line allows that script an ""escape hatch"" out of the restrictions imposed on xrdp-sesman.
Because this is a shell script, however, there is a risk that could allow an attacker to take advantage of the ""escape hatch."" Rather than explain the issue here, I will link this excellent article that describes it in detail. (This is an old article, hence the Wayback link, but its analysis still reflects the situation today.)
The current versions of the startwm.sh script rely on xrdp-sesman setting up PATH and LANG variables (using pam_env) prior to its invocation. However, in an environment where this script represents a loosening of process confinement, at least PATH has to be treated as ""tainted"" data potentially originating from an attacker.
The simplest thing to do would be to put e.g. PATH=/bin:/usr/bin at the top of the script, and then set up PATH/LANG properly in shell space. A more complex solution would be to have a separate helper program for this: this helper would be executed unconfined, and then it does the pam_env stuff, reads DefaultWindowManager or whatever from sesman.ini, and finally exec()s the program. (Importantly, this helper cannot take arguments, as they may come from an attacker and AppArmor rules cannot match against those.)


I'll be happy to answer any questions, and revise these changes as needed.","I think a different approach to handling the ""AppArmor support"" may be more to your liking. I went the ""check the /proc file"" route because I wanted something that worked automagically. There were two other approaches I considered and rejected, but they may be worth re-evaluating:


A new configuration option on whether to execute the X server with NNP. It would default to TRUE, and have no effect outside of Linux. Users who wish to enable AppArmor confinement can set this to FALSE.


stat() the X server path, and iff the file is setuid, then enable NNP. This would not catch e.g. the X server being a shell script that then executes an actual setuid X binary, but it addresses the quasi-common case of /usr/bin/Xorg being setuid and the only available binary.


No. 1 would achieve the aim of explicitness, and no. 2 is an alternate solution to the original problem. Neither of these rely on an AppArmor-specific interface.
That aside, note that distros that don't enable the AppArmor LSM by default can still have it enabled by users (e.g. Debian used to have an apparmor=1 kernel option for this), so a compile-time option that is not used by the packager would require users to recompile xrdp in order to use these profiles. That would present a significant barrier to better security practice, especially in conjunction with a package manager that delivers occasional security updates.
With regards to profile support, I see a few possibilities for how to handle this:


Replace apparmord_DATA with noinst_DATA in instfiles/apparmor.d/Makefile.am, so that the profiles don't reach the make install tree;


Add a README file in instfiles/apparmor.d/ indicating the development status of the profiles, a request for improvements, and the ""use at your own risk"" warning;


Add the same verbiage as no. 2 to comment boilerplate at the top of both profiles.


Would some/all of these address your concerns?
Having the profiles fully generalized before contributing them is effectively a chicken-and-egg problem. One person could do that only if they regularly work with two or more distros and are able to develop AppArmor profiles from scratch and are specifically interested in xrdp enough to do so. I wouldn't hold my breath. Two or more people could do that, but they need to find each other first---and if the common point of contact (xrdp) doesn't have anything for them, they are more likely to develop their own distro-specific profiles. The opportunity for collaboration will be lost, and the fragmentation won't deliver a better end result.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2265,2022-05-16T09:56:50Z,,2022-06-03T12:59:41Z,OPEN,False,345,76,27,https://github.com/iskunk,Hardening xrdp with AppArmor,3,[],https://github.com/neutrinolabs/xrdp/pull/2265,https://github.com/matt335672,14,https://github.com/neutrinolabs/xrdp/pull/2265#issuecomment-1140262523,"For some time now, I've been wanting to develop AppArmor profiles to confine xrdp and its components while running. Given that the xrdp process is open to the network, and xrdp-sesman runs as root, these are good candidates for security hardening.
Code changes
I found that some modifications to the code are necessary, however, to make this feasible. These changes are in my first commit, and they are relatively minor:


The function g_file_open() is used in numerous places to read things like configuration files. However, it is also used for writing files (e.g. PID files). The meat of the function, on the POSIX side, is as follows:
    rv =  open(file_name, O_RDWR | O_CREAT, S_IRUSR | S_IWUSR);

    if (rv == -1)
    {
        /* can't open read / write, try to open read only */
        rv =  open(file_name, O_RDONLY);
    }

This ""try at first to open the file read/write"" approach does not look good in a confinement framework. With AppArmor enabled, I see messages like this in the system log:
Mar 29 17:13:05 darkstar kernel: [  494.847515] audit: type=1400 audit(1648588385.232:73): apparmor=""DENIED"" operation=""mknod"" profile=""/usr/sbin/xrdp"" name=""/etc/xrdp/xrdp_keyboard.ini"" pid=1922 comm=""xrdp"" requested_mask=""c"" denied_mask=""c"" fsuid=123 ouid=123

At first, this left me scratching my head thinking, ""Why is xrdp trying to write to the keyboard config file?"" This didn't prevent xrdp from running correctly (as can happen with AppArmor if you're not careful), but security-minded admins would look askance at this.
There is a different call in the xrdp code that is used in a few places, that gives proper read-only access:
    fd = g_file_open_ex(file_name, 1, 0, 0, 0);

The parameters are four flags, requesting any combination of read access, write access, file creation, and file truncation. Most of the time, however, the above combination is used.
The first change I made was to turn all the g_file_open() calls that appear to need only read access, to use a proper read-only call. At first, I replaced them with calls like the above g_file_open_ex() example. But I realized that this function call is not very clear as to what it's doing unless you have the function signature in front of you, and it's used in exactly this form numerous times throughout the code. So I added a new function g_file_open_ro() that wraps this specific combination, and made my edits use that instead.
(Philosophically speaking, it would probably be better to have g_file_open() return a read-only descriptor, and add a new function like g_file_open_rw() or g_file_open_write() to return a writable one, so that the request for write access is explicit. But that's beyond the scope of this change.)


When the X server is executed, xrdp uses (when available) the Linux kernel's ""no new privileges"" feature to avoid potential fallout from invoking a setuid-root X server binary. This is a good thing to do, from a security perspective---but paradoxically, it gets in the way of further security hardening via AppArmor.
As it happens, the NoNewPrivs flag on a process prevents AppArmor from changing its confinement profile at all, even if the destination profile is more restrictive than the source one. What this means for xrdp is that the X server cannot be confined using a different, narrower profile than its parent (xrdp-sesman). If I attempt to do so, I get an error like this in the system log:
Apr  1 01:26:53 darkstar kernel: [ 4711.096244] audit: type=1400 audit(1648790813.552:691): apparmor=""DENIED"" operation=""exec"" info=""no new privs"" error=-1 profile=""xrdp-sesman"" name=""/usr/lib/xorg/Xorg"" pid=32353 comm=""xrdp-sesman"" requested_mask=""x"" denied_mask=""x"" fsuid=1000 ouid=0 target=""xrdp-sesman//xorg""

This is not ideal, because the X server needs access to a lot fewer things than xrdp-sesman---and, in turn, the X server needs a few things that xrdp-sesman can do without. The two processes should not run with the same set of permissions.
I didn't want to get rid of the PR_SET_NO_NEW_PRIVS functionality, and I wanted to avoid adding a new configuration option, so what I did was add a check: If AppArmor is loaded, and the process is already confined in some way, then don't set NoNewPrivs. This is done by examining the content of /proc/self/attr/apparmor/current. The check is performed in a fail-safe way, so if anything goes wrong, the NoNewPrivs transition remains in effect.


Apparmor profiles
My second commit adds the new profiles. Some notes on these:


These profiles have been developed and tested on Ubuntu.


I tested only with Xorg and Xvnc (specifically Xtigervnc). I don't have the setup to test vnc-any or neutrinordp-any.


My changes are to the latest Git devel branch, but I tested by applying them to the Debian 0.9.19 package and compiling it on Ubuntu. (Ubuntu does not have 0.9.19 yet, as of this writing.)


I accommodated the FUSE stuff so that users can login/logout without issue, but I have no idea how to test that functionality.


The profile filenames follow the standard AppArmor convention of reflecting the absolute path of the installed binary. That said, the filenames are arbitrary, and are not parsed in any way.


The profiles themselves do contain absolute paths to various binaries, as AppArmor requires. These can be handled by parameterization (see e.g. @{Xorg} in the usr.sbin.xrdp-sesman profile), alternation (AppArmor supports {a,b,c} syntax in paths), and of course build-time substitutions @like_this@.


The profiles can be enabled by copying them into /etc/apparmor.d/, running /etc/init.d/apparmor force-reload (or rebooting), and restarting xrdp. Any prohibited actions will appear in the system log with apparmor=""DENIED"".


The profiles, as written, are in ""enforce"" mode. If you would like to experiment, you may want to enable them in ""complain"" mode. This will cause AppArmor to allow the application to do whatever it wants, but still log anything that it would have prohibited in ""enforce"" mode. All that is needed is to symlink the profiles into the /etc/apparmor.d/force-complain/ directory, and run /etc/init.d/apparmor force-reload (or reboot). Then, watch your system log for apparmor=""ALLOWED"" messages.
(Additionally, any deny AppArmor directives should be preceded with audit [if not already present] so that violations of same are logged. Normally, deny directives request ""silent deny"" behavior.)


Further work


Careful testing of the more advanced xrdp functionality will be needed, to ensure that the AppArmor profiles allow the necessary access. I've covered the basic use cases, but of course there are going to be more exotic setups that need to be supported.


Some adaptation to other Linux distributions will likely be needed. My experience is only with Debian/Ubuntu, however, so I'm not in a good position to address this.


There is one major hole in these AppArmor profiles, which will require additional work to address. It is this line in usr.sbin.xrdp-sesman:
  /etc/xrdp/startwm.sh Uxr,

This allows startwm.sh to be executed without confinement. The user session cannot run within the tightly-defined profile for xrdp-sesman; in fact, it probably can't run (or at least normally doesn't run) in any AppArmor profile at all. So this line allows that script an ""escape hatch"" out of the restrictions imposed on xrdp-sesman.
Because this is a shell script, however, there is a risk that could allow an attacker to take advantage of the ""escape hatch."" Rather than explain the issue here, I will link this excellent article that describes it in detail. (This is an old article, hence the Wayback link, but its analysis still reflects the situation today.)
The current versions of the startwm.sh script rely on xrdp-sesman setting up PATH and LANG variables (using pam_env) prior to its invocation. However, in an environment where this script represents a loosening of process confinement, at least PATH has to be treated as ""tainted"" data potentially originating from an attacker.
The simplest thing to do would be to put e.g. PATH=/bin:/usr/bin at the top of the script, and then set up PATH/LANG properly in shell space. A more complex solution would be to have a separate helper program for this: this helper would be executed unconfined, and then it does the pam_env stuff, reads DefaultWindowManager or whatever from sesman.ini, and finally exec()s the program. (Importantly, this helper cannot take arguments, as they may come from an attacker and AppArmor rules cannot match against those.)


I'll be happy to answer any questions, and revise these changes as needed.","That's a well-considered post - thanks.
Configuration options; I'm happy with 1). I'd considered 2) as well myself, but discounted it for precisely the reasons you suggest. I find interposing a shell script for an executable is a really handy debugging technique.
As regards the profiles, what you suggest is fine, but the README needs to go at the top-level I think so that it's more prominent. It can probably also be linked from the project README.md so it's findable from the description on Github. Maybe a README.apparmor.md?
I accept the chicken-and-egg problem is a real one. I'm less sure than you are about the benefits or possibilities of collaboration, but then I'm also less knowledgeable about AppArmor in general!
I'm very happy to work with you to get something in here. I've got a few family commitments at the moment which are going to take up quite a lot of my free time. Please don't take any long periods of silence on my part as a lack of interest.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2265,2022-05-16T09:56:50Z,,2022-06-03T12:59:41Z,OPEN,False,345,76,27,https://github.com/iskunk,Hardening xrdp with AppArmor,3,[],https://github.com/neutrinolabs/xrdp/pull/2265,https://github.com/iskunk,15,https://github.com/neutrinolabs/xrdp/pull/2265#issuecomment-1144367460,"For some time now, I've been wanting to develop AppArmor profiles to confine xrdp and its components while running. Given that the xrdp process is open to the network, and xrdp-sesman runs as root, these are good candidates for security hardening.
Code changes
I found that some modifications to the code are necessary, however, to make this feasible. These changes are in my first commit, and they are relatively minor:


The function g_file_open() is used in numerous places to read things like configuration files. However, it is also used for writing files (e.g. PID files). The meat of the function, on the POSIX side, is as follows:
    rv =  open(file_name, O_RDWR | O_CREAT, S_IRUSR | S_IWUSR);

    if (rv == -1)
    {
        /* can't open read / write, try to open read only */
        rv =  open(file_name, O_RDONLY);
    }

This ""try at first to open the file read/write"" approach does not look good in a confinement framework. With AppArmor enabled, I see messages like this in the system log:
Mar 29 17:13:05 darkstar kernel: [  494.847515] audit: type=1400 audit(1648588385.232:73): apparmor=""DENIED"" operation=""mknod"" profile=""/usr/sbin/xrdp"" name=""/etc/xrdp/xrdp_keyboard.ini"" pid=1922 comm=""xrdp"" requested_mask=""c"" denied_mask=""c"" fsuid=123 ouid=123

At first, this left me scratching my head thinking, ""Why is xrdp trying to write to the keyboard config file?"" This didn't prevent xrdp from running correctly (as can happen with AppArmor if you're not careful), but security-minded admins would look askance at this.
There is a different call in the xrdp code that is used in a few places, that gives proper read-only access:
    fd = g_file_open_ex(file_name, 1, 0, 0, 0);

The parameters are four flags, requesting any combination of read access, write access, file creation, and file truncation. Most of the time, however, the above combination is used.
The first change I made was to turn all the g_file_open() calls that appear to need only read access, to use a proper read-only call. At first, I replaced them with calls like the above g_file_open_ex() example. But I realized that this function call is not very clear as to what it's doing unless you have the function signature in front of you, and it's used in exactly this form numerous times throughout the code. So I added a new function g_file_open_ro() that wraps this specific combination, and made my edits use that instead.
(Philosophically speaking, it would probably be better to have g_file_open() return a read-only descriptor, and add a new function like g_file_open_rw() or g_file_open_write() to return a writable one, so that the request for write access is explicit. But that's beyond the scope of this change.)


When the X server is executed, xrdp uses (when available) the Linux kernel's ""no new privileges"" feature to avoid potential fallout from invoking a setuid-root X server binary. This is a good thing to do, from a security perspective---but paradoxically, it gets in the way of further security hardening via AppArmor.
As it happens, the NoNewPrivs flag on a process prevents AppArmor from changing its confinement profile at all, even if the destination profile is more restrictive than the source one. What this means for xrdp is that the X server cannot be confined using a different, narrower profile than its parent (xrdp-sesman). If I attempt to do so, I get an error like this in the system log:
Apr  1 01:26:53 darkstar kernel: [ 4711.096244] audit: type=1400 audit(1648790813.552:691): apparmor=""DENIED"" operation=""exec"" info=""no new privs"" error=-1 profile=""xrdp-sesman"" name=""/usr/lib/xorg/Xorg"" pid=32353 comm=""xrdp-sesman"" requested_mask=""x"" denied_mask=""x"" fsuid=1000 ouid=0 target=""xrdp-sesman//xorg""

This is not ideal, because the X server needs access to a lot fewer things than xrdp-sesman---and, in turn, the X server needs a few things that xrdp-sesman can do without. The two processes should not run with the same set of permissions.
I didn't want to get rid of the PR_SET_NO_NEW_PRIVS functionality, and I wanted to avoid adding a new configuration option, so what I did was add a check: If AppArmor is loaded, and the process is already confined in some way, then don't set NoNewPrivs. This is done by examining the content of /proc/self/attr/apparmor/current. The check is performed in a fail-safe way, so if anything goes wrong, the NoNewPrivs transition remains in effect.


Apparmor profiles
My second commit adds the new profiles. Some notes on these:


These profiles have been developed and tested on Ubuntu.


I tested only with Xorg and Xvnc (specifically Xtigervnc). I don't have the setup to test vnc-any or neutrinordp-any.


My changes are to the latest Git devel branch, but I tested by applying them to the Debian 0.9.19 package and compiling it on Ubuntu. (Ubuntu does not have 0.9.19 yet, as of this writing.)


I accommodated the FUSE stuff so that users can login/logout without issue, but I have no idea how to test that functionality.


The profile filenames follow the standard AppArmor convention of reflecting the absolute path of the installed binary. That said, the filenames are arbitrary, and are not parsed in any way.


The profiles themselves do contain absolute paths to various binaries, as AppArmor requires. These can be handled by parameterization (see e.g. @{Xorg} in the usr.sbin.xrdp-sesman profile), alternation (AppArmor supports {a,b,c} syntax in paths), and of course build-time substitutions @like_this@.


The profiles can be enabled by copying them into /etc/apparmor.d/, running /etc/init.d/apparmor force-reload (or rebooting), and restarting xrdp. Any prohibited actions will appear in the system log with apparmor=""DENIED"".


The profiles, as written, are in ""enforce"" mode. If you would like to experiment, you may want to enable them in ""complain"" mode. This will cause AppArmor to allow the application to do whatever it wants, but still log anything that it would have prohibited in ""enforce"" mode. All that is needed is to symlink the profiles into the /etc/apparmor.d/force-complain/ directory, and run /etc/init.d/apparmor force-reload (or reboot). Then, watch your system log for apparmor=""ALLOWED"" messages.
(Additionally, any deny AppArmor directives should be preceded with audit [if not already present] so that violations of same are logged. Normally, deny directives request ""silent deny"" behavior.)


Further work


Careful testing of the more advanced xrdp functionality will be needed, to ensure that the AppArmor profiles allow the necessary access. I've covered the basic use cases, but of course there are going to be more exotic setups that need to be supported.


Some adaptation to other Linux distributions will likely be needed. My experience is only with Debian/Ubuntu, however, so I'm not in a good position to address this.


There is one major hole in these AppArmor profiles, which will require additional work to address. It is this line in usr.sbin.xrdp-sesman:
  /etc/xrdp/startwm.sh Uxr,

This allows startwm.sh to be executed without confinement. The user session cannot run within the tightly-defined profile for xrdp-sesman; in fact, it probably can't run (or at least normally doesn't run) in any AppArmor profile at all. So this line allows that script an ""escape hatch"" out of the restrictions imposed on xrdp-sesman.
Because this is a shell script, however, there is a risk that could allow an attacker to take advantage of the ""escape hatch."" Rather than explain the issue here, I will link this excellent article that describes it in detail. (This is an old article, hence the Wayback link, but its analysis still reflects the situation today.)
The current versions of the startwm.sh script rely on xrdp-sesman setting up PATH and LANG variables (using pam_env) prior to its invocation. However, in an environment where this script represents a loosening of process confinement, at least PATH has to be treated as ""tainted"" data potentially originating from an attacker.
The simplest thing to do would be to put e.g. PATH=/bin:/usr/bin at the top of the script, and then set up PATH/LANG properly in shell space. A more complex solution would be to have a separate helper program for this: this helper would be executed unconfined, and then it does the pam_env stuff, reads DefaultWindowManager or whatever from sesman.ini, and finally exec()s the program. (Importantly, this helper cannot take arguments, as they may come from an attacker and AppArmor rules cannot match against those.)


I'll be happy to answer any questions, and revise these changes as needed.","All right, I think we have a way forward. Please let me know if any of my understanding below is at variance with yours.

I'll remove the AppArmor /proc interface code, and implement a sesman.ini configuration option that will allow users to explicitly disable the use of NNP when invoking the X server.
I'll write up a README.apparmor.md file explaining the development situation with the AppArmor profiles. As I plan on using the profiles regularly in my own site deployments, it'll probably include a request to ping me on related PRs.
I can also update the README.md file to link to the aforementioned. If you have any particular wording in mind, let me know.
Here is a draft Win32 implementation for g_file_open_ex() I've put together (needed so that g_file_open_ro() doesn't just fail on Windows). This comes purely from eyeballing Microsoft docs, and I have no way of testing it, so please let me know if this is at least passable:
int
g_file_open_ex(const char *file_name, int aread, int awrite,
               int acreate, int atrunc)
{
#if defined(_WIN32)
    DWORD aflags = 0;
    DWORD dispos = 0;

    if (aread)
    {
        aflags |= GENERIC_READ;
    }
    if (awrite)
    {
        aflags |= GENERIC_WRITE;
    }
    if (acreate)
    {
        dispos = atrunc ? CREATE_ALWAYS : OPEN_ALWAYS;
    }
    else
    {
        dispos = atrunc ? TRUNCATE_EXISTING : OPEN_EXISTING;
    }

    return (int)CreateFileA(file_name, aflags,
                            FILE_SHARE_READ | FILE_SHARE_WRITE,
                            0, dispos, FILE_ATTRIBUTE_NORMAL, 0);
#else
    ...




I accept the chicken-and-egg problem is a real one. I'm less sure than you are about the benefits or possibilities of collaboration, but then I'm also less knowledgeable about AppArmor in general!

""Collaboration"" may have been overselling it a bit, but the key point is that interested newcomers build upon the work that has already been done, rather than [feel they have no choice but to] start from scratch. The only thing worse than someone out there wasting time on redundant work is doing that oneself.

I'm very happy to work with you to get something in here. I've got a few family commitments at the moment which are going to take up quite a lot of my free time. Please don't take any long periods of silence on my part as a lack of interest.

Understood; I have my own ""extracurriculars"" as well. I'll need some more time to get all this together, but it'll come---this is ultimately my own itch I'm scratching!",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2265,2022-05-16T09:56:50Z,,2022-06-03T12:59:41Z,OPEN,False,345,76,27,https://github.com/iskunk,Hardening xrdp with AppArmor,3,[],https://github.com/neutrinolabs/xrdp/pull/2265,https://github.com/metalefty,16,https://github.com/neutrinolabs/xrdp/pull/2265#issuecomment-1144395946,"For some time now, I've been wanting to develop AppArmor profiles to confine xrdp and its components while running. Given that the xrdp process is open to the network, and xrdp-sesman runs as root, these are good candidates for security hardening.
Code changes
I found that some modifications to the code are necessary, however, to make this feasible. These changes are in my first commit, and they are relatively minor:


The function g_file_open() is used in numerous places to read things like configuration files. However, it is also used for writing files (e.g. PID files). The meat of the function, on the POSIX side, is as follows:
    rv =  open(file_name, O_RDWR | O_CREAT, S_IRUSR | S_IWUSR);

    if (rv == -1)
    {
        /* can't open read / write, try to open read only */
        rv =  open(file_name, O_RDONLY);
    }

This ""try at first to open the file read/write"" approach does not look good in a confinement framework. With AppArmor enabled, I see messages like this in the system log:
Mar 29 17:13:05 darkstar kernel: [  494.847515] audit: type=1400 audit(1648588385.232:73): apparmor=""DENIED"" operation=""mknod"" profile=""/usr/sbin/xrdp"" name=""/etc/xrdp/xrdp_keyboard.ini"" pid=1922 comm=""xrdp"" requested_mask=""c"" denied_mask=""c"" fsuid=123 ouid=123

At first, this left me scratching my head thinking, ""Why is xrdp trying to write to the keyboard config file?"" This didn't prevent xrdp from running correctly (as can happen with AppArmor if you're not careful), but security-minded admins would look askance at this.
There is a different call in the xrdp code that is used in a few places, that gives proper read-only access:
    fd = g_file_open_ex(file_name, 1, 0, 0, 0);

The parameters are four flags, requesting any combination of read access, write access, file creation, and file truncation. Most of the time, however, the above combination is used.
The first change I made was to turn all the g_file_open() calls that appear to need only read access, to use a proper read-only call. At first, I replaced them with calls like the above g_file_open_ex() example. But I realized that this function call is not very clear as to what it's doing unless you have the function signature in front of you, and it's used in exactly this form numerous times throughout the code. So I added a new function g_file_open_ro() that wraps this specific combination, and made my edits use that instead.
(Philosophically speaking, it would probably be better to have g_file_open() return a read-only descriptor, and add a new function like g_file_open_rw() or g_file_open_write() to return a writable one, so that the request for write access is explicit. But that's beyond the scope of this change.)


When the X server is executed, xrdp uses (when available) the Linux kernel's ""no new privileges"" feature to avoid potential fallout from invoking a setuid-root X server binary. This is a good thing to do, from a security perspective---but paradoxically, it gets in the way of further security hardening via AppArmor.
As it happens, the NoNewPrivs flag on a process prevents AppArmor from changing its confinement profile at all, even if the destination profile is more restrictive than the source one. What this means for xrdp is that the X server cannot be confined using a different, narrower profile than its parent (xrdp-sesman). If I attempt to do so, I get an error like this in the system log:
Apr  1 01:26:53 darkstar kernel: [ 4711.096244] audit: type=1400 audit(1648790813.552:691): apparmor=""DENIED"" operation=""exec"" info=""no new privs"" error=-1 profile=""xrdp-sesman"" name=""/usr/lib/xorg/Xorg"" pid=32353 comm=""xrdp-sesman"" requested_mask=""x"" denied_mask=""x"" fsuid=1000 ouid=0 target=""xrdp-sesman//xorg""

This is not ideal, because the X server needs access to a lot fewer things than xrdp-sesman---and, in turn, the X server needs a few things that xrdp-sesman can do without. The two processes should not run with the same set of permissions.
I didn't want to get rid of the PR_SET_NO_NEW_PRIVS functionality, and I wanted to avoid adding a new configuration option, so what I did was add a check: If AppArmor is loaded, and the process is already confined in some way, then don't set NoNewPrivs. This is done by examining the content of /proc/self/attr/apparmor/current. The check is performed in a fail-safe way, so if anything goes wrong, the NoNewPrivs transition remains in effect.


Apparmor profiles
My second commit adds the new profiles. Some notes on these:


These profiles have been developed and tested on Ubuntu.


I tested only with Xorg and Xvnc (specifically Xtigervnc). I don't have the setup to test vnc-any or neutrinordp-any.


My changes are to the latest Git devel branch, but I tested by applying them to the Debian 0.9.19 package and compiling it on Ubuntu. (Ubuntu does not have 0.9.19 yet, as of this writing.)


I accommodated the FUSE stuff so that users can login/logout without issue, but I have no idea how to test that functionality.


The profile filenames follow the standard AppArmor convention of reflecting the absolute path of the installed binary. That said, the filenames are arbitrary, and are not parsed in any way.


The profiles themselves do contain absolute paths to various binaries, as AppArmor requires. These can be handled by parameterization (see e.g. @{Xorg} in the usr.sbin.xrdp-sesman profile), alternation (AppArmor supports {a,b,c} syntax in paths), and of course build-time substitutions @like_this@.


The profiles can be enabled by copying them into /etc/apparmor.d/, running /etc/init.d/apparmor force-reload (or rebooting), and restarting xrdp. Any prohibited actions will appear in the system log with apparmor=""DENIED"".


The profiles, as written, are in ""enforce"" mode. If you would like to experiment, you may want to enable them in ""complain"" mode. This will cause AppArmor to allow the application to do whatever it wants, but still log anything that it would have prohibited in ""enforce"" mode. All that is needed is to symlink the profiles into the /etc/apparmor.d/force-complain/ directory, and run /etc/init.d/apparmor force-reload (or reboot). Then, watch your system log for apparmor=""ALLOWED"" messages.
(Additionally, any deny AppArmor directives should be preceded with audit [if not already present] so that violations of same are logged. Normally, deny directives request ""silent deny"" behavior.)


Further work


Careful testing of the more advanced xrdp functionality will be needed, to ensure that the AppArmor profiles allow the necessary access. I've covered the basic use cases, but of course there are going to be more exotic setups that need to be supported.


Some adaptation to other Linux distributions will likely be needed. My experience is only with Debian/Ubuntu, however, so I'm not in a good position to address this.


There is one major hole in these AppArmor profiles, which will require additional work to address. It is this line in usr.sbin.xrdp-sesman:
  /etc/xrdp/startwm.sh Uxr,

This allows startwm.sh to be executed without confinement. The user session cannot run within the tightly-defined profile for xrdp-sesman; in fact, it probably can't run (or at least normally doesn't run) in any AppArmor profile at all. So this line allows that script an ""escape hatch"" out of the restrictions imposed on xrdp-sesman.
Because this is a shell script, however, there is a risk that could allow an attacker to take advantage of the ""escape hatch."" Rather than explain the issue here, I will link this excellent article that describes it in detail. (This is an old article, hence the Wayback link, but its analysis still reflects the situation today.)
The current versions of the startwm.sh script rely on xrdp-sesman setting up PATH and LANG variables (using pam_env) prior to its invocation. However, in an environment where this script represents a loosening of process confinement, at least PATH has to be treated as ""tainted"" data potentially originating from an attacker.
The simplest thing to do would be to put e.g. PATH=/bin:/usr/bin at the top of the script, and then set up PATH/LANG properly in shell space. A more complex solution would be to have a separate helper program for this: this helper would be executed unconfined, and then it does the pam_env stuff, reads DefaultWindowManager or whatever from sesman.ini, and finally exec()s the program. (Importantly, this helper cannot take arguments, as they may come from an attacker and AppArmor rules cannot match against those.)


I'll be happy to answer any questions, and revise these changes as needed.",I don't think you need to spend time to support Win32. See also Platform Support Tier for the status of Win32. You can focus on Linux (and BSD) rather than taking effort for Win32.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2265,2022-05-16T09:56:50Z,,2022-06-03T12:59:41Z,OPEN,False,345,76,27,https://github.com/iskunk,Hardening xrdp with AppArmor,3,[],https://github.com/neutrinolabs/xrdp/pull/2265,https://github.com/iskunk,17,https://github.com/neutrinolabs/xrdp/pull/2265#issuecomment-1144406035,"For some time now, I've been wanting to develop AppArmor profiles to confine xrdp and its components while running. Given that the xrdp process is open to the network, and xrdp-sesman runs as root, these are good candidates for security hardening.
Code changes
I found that some modifications to the code are necessary, however, to make this feasible. These changes are in my first commit, and they are relatively minor:


The function g_file_open() is used in numerous places to read things like configuration files. However, it is also used for writing files (e.g. PID files). The meat of the function, on the POSIX side, is as follows:
    rv =  open(file_name, O_RDWR | O_CREAT, S_IRUSR | S_IWUSR);

    if (rv == -1)
    {
        /* can't open read / write, try to open read only */
        rv =  open(file_name, O_RDONLY);
    }

This ""try at first to open the file read/write"" approach does not look good in a confinement framework. With AppArmor enabled, I see messages like this in the system log:
Mar 29 17:13:05 darkstar kernel: [  494.847515] audit: type=1400 audit(1648588385.232:73): apparmor=""DENIED"" operation=""mknod"" profile=""/usr/sbin/xrdp"" name=""/etc/xrdp/xrdp_keyboard.ini"" pid=1922 comm=""xrdp"" requested_mask=""c"" denied_mask=""c"" fsuid=123 ouid=123

At first, this left me scratching my head thinking, ""Why is xrdp trying to write to the keyboard config file?"" This didn't prevent xrdp from running correctly (as can happen with AppArmor if you're not careful), but security-minded admins would look askance at this.
There is a different call in the xrdp code that is used in a few places, that gives proper read-only access:
    fd = g_file_open_ex(file_name, 1, 0, 0, 0);

The parameters are four flags, requesting any combination of read access, write access, file creation, and file truncation. Most of the time, however, the above combination is used.
The first change I made was to turn all the g_file_open() calls that appear to need only read access, to use a proper read-only call. At first, I replaced them with calls like the above g_file_open_ex() example. But I realized that this function call is not very clear as to what it's doing unless you have the function signature in front of you, and it's used in exactly this form numerous times throughout the code. So I added a new function g_file_open_ro() that wraps this specific combination, and made my edits use that instead.
(Philosophically speaking, it would probably be better to have g_file_open() return a read-only descriptor, and add a new function like g_file_open_rw() or g_file_open_write() to return a writable one, so that the request for write access is explicit. But that's beyond the scope of this change.)


When the X server is executed, xrdp uses (when available) the Linux kernel's ""no new privileges"" feature to avoid potential fallout from invoking a setuid-root X server binary. This is a good thing to do, from a security perspective---but paradoxically, it gets in the way of further security hardening via AppArmor.
As it happens, the NoNewPrivs flag on a process prevents AppArmor from changing its confinement profile at all, even if the destination profile is more restrictive than the source one. What this means for xrdp is that the X server cannot be confined using a different, narrower profile than its parent (xrdp-sesman). If I attempt to do so, I get an error like this in the system log:
Apr  1 01:26:53 darkstar kernel: [ 4711.096244] audit: type=1400 audit(1648790813.552:691): apparmor=""DENIED"" operation=""exec"" info=""no new privs"" error=-1 profile=""xrdp-sesman"" name=""/usr/lib/xorg/Xorg"" pid=32353 comm=""xrdp-sesman"" requested_mask=""x"" denied_mask=""x"" fsuid=1000 ouid=0 target=""xrdp-sesman//xorg""

This is not ideal, because the X server needs access to a lot fewer things than xrdp-sesman---and, in turn, the X server needs a few things that xrdp-sesman can do without. The two processes should not run with the same set of permissions.
I didn't want to get rid of the PR_SET_NO_NEW_PRIVS functionality, and I wanted to avoid adding a new configuration option, so what I did was add a check: If AppArmor is loaded, and the process is already confined in some way, then don't set NoNewPrivs. This is done by examining the content of /proc/self/attr/apparmor/current. The check is performed in a fail-safe way, so if anything goes wrong, the NoNewPrivs transition remains in effect.


Apparmor profiles
My second commit adds the new profiles. Some notes on these:


These profiles have been developed and tested on Ubuntu.


I tested only with Xorg and Xvnc (specifically Xtigervnc). I don't have the setup to test vnc-any or neutrinordp-any.


My changes are to the latest Git devel branch, but I tested by applying them to the Debian 0.9.19 package and compiling it on Ubuntu. (Ubuntu does not have 0.9.19 yet, as of this writing.)


I accommodated the FUSE stuff so that users can login/logout without issue, but I have no idea how to test that functionality.


The profile filenames follow the standard AppArmor convention of reflecting the absolute path of the installed binary. That said, the filenames are arbitrary, and are not parsed in any way.


The profiles themselves do contain absolute paths to various binaries, as AppArmor requires. These can be handled by parameterization (see e.g. @{Xorg} in the usr.sbin.xrdp-sesman profile), alternation (AppArmor supports {a,b,c} syntax in paths), and of course build-time substitutions @like_this@.


The profiles can be enabled by copying them into /etc/apparmor.d/, running /etc/init.d/apparmor force-reload (or rebooting), and restarting xrdp. Any prohibited actions will appear in the system log with apparmor=""DENIED"".


The profiles, as written, are in ""enforce"" mode. If you would like to experiment, you may want to enable them in ""complain"" mode. This will cause AppArmor to allow the application to do whatever it wants, but still log anything that it would have prohibited in ""enforce"" mode. All that is needed is to symlink the profiles into the /etc/apparmor.d/force-complain/ directory, and run /etc/init.d/apparmor force-reload (or reboot). Then, watch your system log for apparmor=""ALLOWED"" messages.
(Additionally, any deny AppArmor directives should be preceded with audit [if not already present] so that violations of same are logged. Normally, deny directives request ""silent deny"" behavior.)


Further work


Careful testing of the more advanced xrdp functionality will be needed, to ensure that the AppArmor profiles allow the necessary access. I've covered the basic use cases, but of course there are going to be more exotic setups that need to be supported.


Some adaptation to other Linux distributions will likely be needed. My experience is only with Debian/Ubuntu, however, so I'm not in a good position to address this.


There is one major hole in these AppArmor profiles, which will require additional work to address. It is this line in usr.sbin.xrdp-sesman:
  /etc/xrdp/startwm.sh Uxr,

This allows startwm.sh to be executed without confinement. The user session cannot run within the tightly-defined profile for xrdp-sesman; in fact, it probably can't run (or at least normally doesn't run) in any AppArmor profile at all. So this line allows that script an ""escape hatch"" out of the restrictions imposed on xrdp-sesman.
Because this is a shell script, however, there is a risk that could allow an attacker to take advantage of the ""escape hatch."" Rather than explain the issue here, I will link this excellent article that describes it in detail. (This is an old article, hence the Wayback link, but its analysis still reflects the situation today.)
The current versions of the startwm.sh script rely on xrdp-sesman setting up PATH and LANG variables (using pam_env) prior to its invocation. However, in an environment where this script represents a loosening of process confinement, at least PATH has to be treated as ""tainted"" data potentially originating from an attacker.
The simplest thing to do would be to put e.g. PATH=/bin:/usr/bin at the top of the script, and then set up PATH/LANG properly in shell space. A more complex solution would be to have a separate helper program for this: this helper would be executed unconfined, and then it does the pam_env stuff, reads DefaultWindowManager or whatever from sesman.ini, and finally exec()s the program. (Importantly, this helper cannot take arguments, as they may come from an attacker and AppArmor rules cannot match against those.)


I'll be happy to answer any questions, and revise these changes as needed.",@metalefty: Understood; thanks for the heads-up. I'll keep my changes POSIX-only.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2265,2022-05-16T09:56:50Z,,2022-06-03T12:59:41Z,OPEN,False,345,76,27,https://github.com/iskunk,Hardening xrdp with AppArmor,3,[],https://github.com/neutrinolabs/xrdp/pull/2265,https://github.com/matt335672,18,https://github.com/neutrinolabs/xrdp/pull/2265#issuecomment-1145938661,"For some time now, I've been wanting to develop AppArmor profiles to confine xrdp and its components while running. Given that the xrdp process is open to the network, and xrdp-sesman runs as root, these are good candidates for security hardening.
Code changes
I found that some modifications to the code are necessary, however, to make this feasible. These changes are in my first commit, and they are relatively minor:


The function g_file_open() is used in numerous places to read things like configuration files. However, it is also used for writing files (e.g. PID files). The meat of the function, on the POSIX side, is as follows:
    rv =  open(file_name, O_RDWR | O_CREAT, S_IRUSR | S_IWUSR);

    if (rv == -1)
    {
        /* can't open read / write, try to open read only */
        rv =  open(file_name, O_RDONLY);
    }

This ""try at first to open the file read/write"" approach does not look good in a confinement framework. With AppArmor enabled, I see messages like this in the system log:
Mar 29 17:13:05 darkstar kernel: [  494.847515] audit: type=1400 audit(1648588385.232:73): apparmor=""DENIED"" operation=""mknod"" profile=""/usr/sbin/xrdp"" name=""/etc/xrdp/xrdp_keyboard.ini"" pid=1922 comm=""xrdp"" requested_mask=""c"" denied_mask=""c"" fsuid=123 ouid=123

At first, this left me scratching my head thinking, ""Why is xrdp trying to write to the keyboard config file?"" This didn't prevent xrdp from running correctly (as can happen with AppArmor if you're not careful), but security-minded admins would look askance at this.
There is a different call in the xrdp code that is used in a few places, that gives proper read-only access:
    fd = g_file_open_ex(file_name, 1, 0, 0, 0);

The parameters are four flags, requesting any combination of read access, write access, file creation, and file truncation. Most of the time, however, the above combination is used.
The first change I made was to turn all the g_file_open() calls that appear to need only read access, to use a proper read-only call. At first, I replaced them with calls like the above g_file_open_ex() example. But I realized that this function call is not very clear as to what it's doing unless you have the function signature in front of you, and it's used in exactly this form numerous times throughout the code. So I added a new function g_file_open_ro() that wraps this specific combination, and made my edits use that instead.
(Philosophically speaking, it would probably be better to have g_file_open() return a read-only descriptor, and add a new function like g_file_open_rw() or g_file_open_write() to return a writable one, so that the request for write access is explicit. But that's beyond the scope of this change.)


When the X server is executed, xrdp uses (when available) the Linux kernel's ""no new privileges"" feature to avoid potential fallout from invoking a setuid-root X server binary. This is a good thing to do, from a security perspective---but paradoxically, it gets in the way of further security hardening via AppArmor.
As it happens, the NoNewPrivs flag on a process prevents AppArmor from changing its confinement profile at all, even if the destination profile is more restrictive than the source one. What this means for xrdp is that the X server cannot be confined using a different, narrower profile than its parent (xrdp-sesman). If I attempt to do so, I get an error like this in the system log:
Apr  1 01:26:53 darkstar kernel: [ 4711.096244] audit: type=1400 audit(1648790813.552:691): apparmor=""DENIED"" operation=""exec"" info=""no new privs"" error=-1 profile=""xrdp-sesman"" name=""/usr/lib/xorg/Xorg"" pid=32353 comm=""xrdp-sesman"" requested_mask=""x"" denied_mask=""x"" fsuid=1000 ouid=0 target=""xrdp-sesman//xorg""

This is not ideal, because the X server needs access to a lot fewer things than xrdp-sesman---and, in turn, the X server needs a few things that xrdp-sesman can do without. The two processes should not run with the same set of permissions.
I didn't want to get rid of the PR_SET_NO_NEW_PRIVS functionality, and I wanted to avoid adding a new configuration option, so what I did was add a check: If AppArmor is loaded, and the process is already confined in some way, then don't set NoNewPrivs. This is done by examining the content of /proc/self/attr/apparmor/current. The check is performed in a fail-safe way, so if anything goes wrong, the NoNewPrivs transition remains in effect.


Apparmor profiles
My second commit adds the new profiles. Some notes on these:


These profiles have been developed and tested on Ubuntu.


I tested only with Xorg and Xvnc (specifically Xtigervnc). I don't have the setup to test vnc-any or neutrinordp-any.


My changes are to the latest Git devel branch, but I tested by applying them to the Debian 0.9.19 package and compiling it on Ubuntu. (Ubuntu does not have 0.9.19 yet, as of this writing.)


I accommodated the FUSE stuff so that users can login/logout without issue, but I have no idea how to test that functionality.


The profile filenames follow the standard AppArmor convention of reflecting the absolute path of the installed binary. That said, the filenames are arbitrary, and are not parsed in any way.


The profiles themselves do contain absolute paths to various binaries, as AppArmor requires. These can be handled by parameterization (see e.g. @{Xorg} in the usr.sbin.xrdp-sesman profile), alternation (AppArmor supports {a,b,c} syntax in paths), and of course build-time substitutions @like_this@.


The profiles can be enabled by copying them into /etc/apparmor.d/, running /etc/init.d/apparmor force-reload (or rebooting), and restarting xrdp. Any prohibited actions will appear in the system log with apparmor=""DENIED"".


The profiles, as written, are in ""enforce"" mode. If you would like to experiment, you may want to enable them in ""complain"" mode. This will cause AppArmor to allow the application to do whatever it wants, but still log anything that it would have prohibited in ""enforce"" mode. All that is needed is to symlink the profiles into the /etc/apparmor.d/force-complain/ directory, and run /etc/init.d/apparmor force-reload (or reboot). Then, watch your system log for apparmor=""ALLOWED"" messages.
(Additionally, any deny AppArmor directives should be preceded with audit [if not already present] so that violations of same are logged. Normally, deny directives request ""silent deny"" behavior.)


Further work


Careful testing of the more advanced xrdp functionality will be needed, to ensure that the AppArmor profiles allow the necessary access. I've covered the basic use cases, but of course there are going to be more exotic setups that need to be supported.


Some adaptation to other Linux distributions will likely be needed. My experience is only with Debian/Ubuntu, however, so I'm not in a good position to address this.


There is one major hole in these AppArmor profiles, which will require additional work to address. It is this line in usr.sbin.xrdp-sesman:
  /etc/xrdp/startwm.sh Uxr,

This allows startwm.sh to be executed without confinement. The user session cannot run within the tightly-defined profile for xrdp-sesman; in fact, it probably can't run (or at least normally doesn't run) in any AppArmor profile at all. So this line allows that script an ""escape hatch"" out of the restrictions imposed on xrdp-sesman.
Because this is a shell script, however, there is a risk that could allow an attacker to take advantage of the ""escape hatch."" Rather than explain the issue here, I will link this excellent article that describes it in detail. (This is an old article, hence the Wayback link, but its analysis still reflects the situation today.)
The current versions of the startwm.sh script rely on xrdp-sesman setting up PATH and LANG variables (using pam_env) prior to its invocation. However, in an environment where this script represents a loosening of process confinement, at least PATH has to be treated as ""tainted"" data potentially originating from an attacker.
The simplest thing to do would be to put e.g. PATH=/bin:/usr/bin at the top of the script, and then set up PATH/LANG properly in shell space. A more complex solution would be to have a separate helper program for this: this helper would be executed unconfined, and then it does the pam_env stuff, reads DefaultWindowManager or whatever from sesman.ini, and finally exec()s the program. (Importantly, this helper cannot take arguments, as they may come from an attacker and AppArmor rules cannot match against those.)


I'll be happy to answer any questions, and revise these changes as needed.","@iskunk - that all sounds fine to me, and along the lines I'm thinking.
You'll need to add a commented-out setting for your variable to sesman/sesman.ini.in. There's also a man page in  docs/man/sesman.ini.5.in where you can add more detail - just use the examples which are already there, and feel free to as any questions you may have.
Thanks.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2266,2022-05-16T11:25:10Z,2022-05-18T11:25:47Z,2022-05-18T11:25:51Z,MERGED,True,214,76,3,https://github.com/matt335672,Improve RDS compatibility,4,[],https://github.com/neutrinolabs/xrdp/pull/2266,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/2266,"Fixes #2166
This PR improves compatibility with RDS in two ways:-

Windows 10 (and FreeRDP) set the user channel ID (see [MS-RDPBCGR] 3.3.1.2) to be one more than the last static channel ID. xrdp v0.9.19 and earlier use 1002 for the user channel ID. This is supposed to be the server channel ID ([MS-RDPBCGR] 3.3.1.5). This PR emulates Windows behaviour.
The use of MCS channel join PDUs is documented in [MS-RDPBCGR] 3.3.5.3.8 and 3.3.5.3.9. These sections do not mention what to do if too few channel join PDUs are received.



xrdp versions which support TLS (i.e. xrdp v0.9.1 and later) insist on receiving exactly the right number of channel join PDUs. This is because immediately after these, a TLS client hello' is received and the code is much simpler if this can be started cleanly.


xrdp versions which do not support TLS (i.e. previous to xrdp v0.9.1) simply accept the join requests they are given and acknowledge them. If any are missing, that's fine.


Experiments with FreeRDP and Windows 10 (see here) show that Windows RDS is fine with too few join requests in both TLS and non-TLS mode.
The move to xrdp v0.9.x broke compatibility with some older clients (see #874, #2166) as these clients do not send a channel join request for the user channel.


We can't easily make xrdp emulate Windows behaviour fully, as this would really complicate the TLS handshake. What this PR does however, is to re-instate the pre v0.9.1 behaviour for non-TLS clients only. Older clients either can't use TLS, or can only use insecure versions of it, so this at least gives users of those devices a way to keep using them.","Fixes #2166
This PR improves compatibility with RDS in two ways:-

Windows 10 (and FreeRDP) set the user channel ID (see [MS-RDPBCGR] 3.3.1.2) to be one more than the last static channel ID. xrdp v0.9.19 and earlier use 1002 for the user channel ID. This is supposed to be the server channel ID ([MS-RDPBCGR] 3.3.1.5). This PR emulates Windows behaviour.
The use of MCS channel join PDUs is documented in [MS-RDPBCGR] 3.3.5.3.8 and 3.3.5.3.9. These sections do not mention what to do if too few channel join PDUs are received.



xrdp versions which support TLS (i.e. xrdp v0.9.1 and later) insist on receiving exactly the right number of channel join PDUs. This is because immediately after these, a TLS client hello' is received and the code is much simpler if this can be started cleanly.


xrdp versions which do not support TLS (i.e. previous to xrdp v0.9.1) simply accept the join requests they are given and acknowledge them. If any are missing, that's fine.


Experiments with FreeRDP and Windows 10 (see here) show that Windows RDS is fine with too few join requests in both TLS and non-TLS mode.
The move to xrdp v0.9.x broke compatibility with some older clients (see #874, #2166) as these clients do not send a channel join request for the user channel.


We can't easily make xrdp emulate Windows behaviour fully, as this would really complicate the TLS handshake. What this PR does however, is to re-instate the pre v0.9.1 behaviour for non-TLS clients only. Older clients either can't use TLS, or can only use insecure versions of it, so this at least gives users of those devices a way to keep using them.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2266,2022-05-16T11:25:10Z,2022-05-18T11:25:47Z,2022-05-18T11:25:51Z,MERGED,True,214,76,3,https://github.com/matt335672,Improve RDS compatibility,4,[],https://github.com/neutrinolabs/xrdp/pull/2266,https://github.com/Nexarian,2,https://github.com/neutrinolabs/xrdp/pull/2266#issuecomment-1127717293,"Fixes #2166
This PR improves compatibility with RDS in two ways:-

Windows 10 (and FreeRDP) set the user channel ID (see [MS-RDPBCGR] 3.3.1.2) to be one more than the last static channel ID. xrdp v0.9.19 and earlier use 1002 for the user channel ID. This is supposed to be the server channel ID ([MS-RDPBCGR] 3.3.1.5). This PR emulates Windows behaviour.
The use of MCS channel join PDUs is documented in [MS-RDPBCGR] 3.3.5.3.8 and 3.3.5.3.9. These sections do not mention what to do if too few channel join PDUs are received.



xrdp versions which support TLS (i.e. xrdp v0.9.1 and later) insist on receiving exactly the right number of channel join PDUs. This is because immediately after these, a TLS client hello' is received and the code is much simpler if this can be started cleanly.


xrdp versions which do not support TLS (i.e. previous to xrdp v0.9.1) simply accept the join requests they are given and acknowledge them. If any are missing, that's fine.


Experiments with FreeRDP and Windows 10 (see here) show that Windows RDS is fine with too few join requests in both TLS and non-TLS mode.
The move to xrdp v0.9.x broke compatibility with some older clients (see #874, #2166) as these clients do not send a channel join request for the user channel.


We can't easily make xrdp emulate Windows behaviour fully, as this would really complicate the TLS handshake. What this PR does however, is to re-instate the pre v0.9.1 behaviour for non-TLS clients only. Older clients either can't use TLS, or can only use insecure versions of it, so this at least gives users of those devices a way to keep using them.","@matt335672 I have no objection to any of this, but only want to say: Now you understand the pains Microsoft goes through to truly make things backwards compatible. I saw this first hand when I worked there. It's insane.",True,"{'THUMBS_UP': ['https://github.com/matt335672', 'https://github.com/metalefty']}"
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2266,2022-05-16T11:25:10Z,2022-05-18T11:25:47Z,2022-05-18T11:25:51Z,MERGED,True,214,76,3,https://github.com/matt335672,Improve RDS compatibility,4,[],https://github.com/neutrinolabs/xrdp/pull/2266,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/2266#issuecomment-1129798683,"Fixes #2166
This PR improves compatibility with RDS in two ways:-

Windows 10 (and FreeRDP) set the user channel ID (see [MS-RDPBCGR] 3.3.1.2) to be one more than the last static channel ID. xrdp v0.9.19 and earlier use 1002 for the user channel ID. This is supposed to be the server channel ID ([MS-RDPBCGR] 3.3.1.5). This PR emulates Windows behaviour.
The use of MCS channel join PDUs is documented in [MS-RDPBCGR] 3.3.5.3.8 and 3.3.5.3.9. These sections do not mention what to do if too few channel join PDUs are received.



xrdp versions which support TLS (i.e. xrdp v0.9.1 and later) insist on receiving exactly the right number of channel join PDUs. This is because immediately after these, a TLS client hello' is received and the code is much simpler if this can be started cleanly.


xrdp versions which do not support TLS (i.e. previous to xrdp v0.9.1) simply accept the join requests they are given and acknowledge them. If any are missing, that's fine.


Experiments with FreeRDP and Windows 10 (see here) show that Windows RDS is fine with too few join requests in both TLS and non-TLS mode.
The move to xrdp v0.9.x broke compatibility with some older clients (see #874, #2166) as these clients do not send a channel join request for the user channel.


We can't easily make xrdp emulate Windows behaviour fully, as this would really complicate the TLS handshake. What this PR does however, is to re-instate the pre v0.9.1 behaviour for non-TLS clients only. Older clients either can't use TLS, or can only use insecure versions of it, so this at least gives users of those devices a way to keep using them.","Thanks for your hard work! This should be shipped to v0.9, too.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2268,2022-05-17T11:28:45Z,2022-05-18T08:05:35Z,2022-05-18T08:05:38Z,MERGED,True,6,1,1,https://github.com/matt335672,Cater for missing --runstatedir in autoconf 2.69,1,[],https://github.com/neutrinolabs/xrdp/pull/2268,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/2268,"Fixes #2267
Also fixes minor typo in help string
Tested on CentOS 7 autoconf","Fixes #2267
Also fixes minor typo in help string
Tested on CentOS 7 autoconf",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2273,2022-05-18T11:27:34Z,2022-05-19T00:28:43Z,2022-05-19T09:21:10Z,MERGED,True,214,76,3,https://github.com/matt335672,Improve RDS compatibility,4,[],https://github.com/neutrinolabs/xrdp/pull/2273,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/2273,"Port of #2266 to the 0.9 branch.
Is this the right place for it @metalefty? If so please merge.","Port of #2266 to the 0.9 branch.
Is this the right place for it @metalefty? If so please merge.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2273,2022-05-18T11:27:34Z,2022-05-19T00:28:43Z,2022-05-19T09:21:10Z,MERGED,True,214,76,3,https://github.com/matt335672,Improve RDS compatibility,4,[],https://github.com/neutrinolabs/xrdp/pull/2273,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/2273#issuecomment-1129897420,"Port of #2266 to the 0.9 branch.
Is this the right place for it @metalefty? If so please merge.",I think we also need #2226 porting over before this one to fix the CI.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2273,2022-05-18T11:27:34Z,2022-05-19T00:28:43Z,2022-05-19T09:21:10Z,MERGED,True,214,76,3,https://github.com/matt335672,Improve RDS compatibility,4,[],https://github.com/neutrinolabs/xrdp/pull/2273,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/2273#issuecomment-1129944165,"Port of #2266 to the 0.9 branch.
Is this the right place for it @metalefty? If so please merge.",Indeed.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2273,2022-05-18T11:27:34Z,2022-05-19T00:28:43Z,2022-05-19T09:21:10Z,MERGED,True,214,76,3,https://github.com/matt335672,Improve RDS compatibility,4,[],https://github.com/neutrinolabs/xrdp/pull/2273,https://github.com/matt335672,4,https://github.com/neutrinolabs/xrdp/pull/2273#issuecomment-1130080580,"Port of #2266 to the 0.9 branch.
Is this the right place for it @metalefty? If so please merge.","OK - for now I've just added this to the v0.9.20 milestone, like #2226. This one is however, based on v0.9.19 rather than devel.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2273,2022-05-18T11:27:34Z,2022-05-19T00:28:43Z,2022-05-19T09:21:10Z,MERGED,True,214,76,3,https://github.com/matt335672,Improve RDS compatibility,4,[],https://github.com/neutrinolabs/xrdp/pull/2273,https://github.com/matt335672,5,https://github.com/neutrinolabs/xrdp/pull/2273#issuecomment-1131454412,"Port of #2266 to the 0.9 branch.
Is this the right place for it @metalefty? If so please merge.","I've updated the NEWS page, and tried to make it clear the next major version is based on v0.9.19",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2275,2022-05-19T03:16:35Z,2022-05-28T14:01:22Z,2022-05-28T14:01:26Z,MERGED,True,24,0,5,https://github.com/metalefty,Add ulalaca ,5,[],https://github.com/neutrinolabs/xrdp/pull/2275,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/2275,"TODO:

Add macOS CI to perform build test on ulalaca","TODO:

Add macOS CI to perform build test on ulalaca",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2275,2022-05-19T03:16:35Z,2022-05-28T14:01:22Z,2022-05-28T14:01:26Z,MERGED,True,24,0,5,https://github.com/metalefty,Add ulalaca ,5,[],https://github.com/neutrinolabs/xrdp/pull/2275,https://github.com/metalefty,2,https://github.com/neutrinolabs/xrdp/pull/2275#issuecomment-1131209600,"TODO:

Add macOS CI to perform build test on ulalaca","@unstabler I'm thinking of adding ulalaca like this.
Here's our  repo:

https://github.com/neutrinolabs/ulalaca-xrdp

Keep working on your repo, sometimes we upstream fetch from your rpeo.",True,"{'THUMBS_UP': ['https://github.com/unstabler', 'https://github.com/matt335672']}"
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2275,2022-05-19T03:16:35Z,2022-05-28T14:01:22Z,2022-05-28T14:01:26Z,MERGED,True,24,0,5,https://github.com/metalefty,Add ulalaca ,5,[],https://github.com/neutrinolabs/xrdp/pull/2275,https://github.com/metalefty,3,https://github.com/neutrinolabs/xrdp/pull/2275#issuecomment-1131849669,"TODO:

Add macOS CI to perform build test on ulalaca",I'm not sure about the cppcheck error. Is it because I'm testing code written for macOS on Linux?,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2275,2022-05-19T03:16:35Z,2022-05-28T14:01:22Z,2022-05-28T14:01:26Z,MERGED,True,24,0,5,https://github.com/metalefty,Add ulalaca ,5,[],https://github.com/neutrinolabs/xrdp/pull/2275,https://github.com/matt335672,4,https://github.com/neutrinolabs/xrdp/pull/2275#issuecomment-1131882339,"TODO:

Add macOS CI to perform build test on ulalaca","The error is because int XrdpUlalaca::lib_mod_start() doesn't have a return value.
The warnings are down to missing initialisers for the specified member variables. If I understand it right this isn't a language error, but initialising member variables is one of the recommended practices in Scott Meyers' influential book ""Effective C++"".
My C++ is a little rusty I'm afraid. When I've got some time I'll see if I can think of a better way to initialise this struct.",True,{'EYES': ['https://github.com/unstabler']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2275,2022-05-19T03:16:35Z,2022-05-28T14:01:22Z,2022-05-28T14:01:26Z,MERGED,True,24,0,5,https://github.com/metalefty,Add ulalaca ,5,[],https://github.com/neutrinolabs/xrdp/pull/2275,https://github.com/metalefty,5,https://github.com/neutrinolabs/xrdp/pull/2275#issuecomment-1131934796,"TODO:

Add macOS CI to perform build test on ulalaca",@unstabler Can you have a look at this cppcheck error?,True,{'EYES': ['https://github.com/unstabler']}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2275,2022-05-19T03:16:35Z,2022-05-28T14:01:22Z,2022-05-28T14:01:26Z,MERGED,True,24,0,5,https://github.com/metalefty,Add ulalaca ,5,[],https://github.com/neutrinolabs/xrdp/pull/2275,https://github.com/unstabler,6,https://github.com/neutrinolabs/xrdp/pull/2275#issuecomment-1132544729,"TODO:

Add macOS CI to perform build test on ulalaca",@matt335672 @metalefty fixed!,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2275,2022-05-19T03:16:35Z,2022-05-28T14:01:22Z,2022-05-28T14:01:26Z,MERGED,True,24,0,5,https://github.com/metalefty,Add ulalaca ,5,[],https://github.com/neutrinolabs/xrdp/pull/2275,https://github.com/metalefty,7,https://github.com/neutrinolabs/xrdp/pull/2275#issuecomment-1132586738,"TODO:

Add macOS CI to perform build test on ulalaca",Thanks! I confirmed it's fixed!,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2275,2022-05-19T03:16:35Z,2022-05-28T14:01:22Z,2022-05-28T14:01:26Z,MERGED,True,24,0,5,https://github.com/metalefty,Add ulalaca ,5,[],https://github.com/neutrinolabs/xrdp/pull/2275,https://github.com/metalefty,8,https://github.com/neutrinolabs/xrdp/pull/2275#issuecomment-1140270838,"TODO:

Add macOS CI to perform build test on ulalaca",I'll merge this now. Let's add CI later.,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2276,2022-05-19T10:22:22Z,2022-05-19T12:32:41Z,2022-05-19T12:32:44Z,MERGED,True,39,15,2,https://github.com/matt335672,Update xrdpapi simple example to work with new logging,2,[],https://github.com/neutrinolabs/xrdp/pull/2276,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/2276,"See discussion #2143
Worth merging?","See discussion #2143
Worth merging?",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2276,2022-05-19T10:22:22Z,2022-05-19T12:32:41Z,2022-05-19T12:32:44Z,MERGED,True,39,15,2,https://github.com/matt335672,Update xrdpapi simple example to work with new logging,2,[],https://github.com/neutrinolabs/xrdp/pull/2276,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/2276#issuecomment-1131542623,"See discussion #2143
Worth merging?","I'll see if I can get in the CI too, or it will just get broken again.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2278,2022-05-23T12:06:18Z,2022-05-27T10:21:43Z,2022-05-27T10:21:47Z,MERGED,True,20,14,2,https://github.com/matt335672,Bump cppcheck version to 2.8,2,[],https://github.com/neutrinolabs/xrdp/pull/2278,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/2278,"Minor change to the (Windows) fontdump/fontdump.c was needed to prevent this error:-
fontdump/fontdump.c:80:28: error: Uninitialized variable: lpMsgBuf [uninitvar]
                   (LPSTR)&lpMsgBuf, 0, NULL);
                           ^

Message is a false positive, possibly caused by the cast and the lack of a prototype.
However, there is an error here, which is if the call to FormatMesasgeA fails, lpMsgBuf will be unititialised after the call.
Simplest fix is to initialise the variable to NULL which fixes the cppcheck error and check the call result before dereferencing the pointer.","Minor change to the (Windows) fontdump/fontdump.c was needed to prevent this error:-
fontdump/fontdump.c:80:28: error: Uninitialized variable: lpMsgBuf [uninitvar]
                   (LPSTR)&lpMsgBuf, 0, NULL);
                           ^

Message is a false positive, possibly caused by the cast and the lack of a prototype.
However, there is an error here, which is if the call to FormatMesasgeA fails, lpMsgBuf will be unititialised after the call.
Simplest fix is to initialise the variable to NULL which fixes the cppcheck error and check the call result before dereferencing the pointer.",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2278,2022-05-23T12:06:18Z,2022-05-27T10:21:43Z,2022-05-27T10:21:47Z,MERGED,True,20,14,2,https://github.com/matt335672,Bump cppcheck version to 2.8,2,[],https://github.com/neutrinolabs/xrdp/pull/2278,https://github.com/matt335672,2,https://github.com/neutrinolabs/xrdp/pull/2278#issuecomment-1137065338,"Minor change to the (Windows) fontdump/fontdump.c was needed to prevent this error:-
fontdump/fontdump.c:80:28: error: Uninitialized variable: lpMsgBuf [uninitvar]
                   (LPSTR)&lpMsgBuf, 0, NULL);
                           ^

Message is a false positive, possibly caused by the cast and the lack of a prototype.
However, there is an error here, which is if the call to FormatMesasgeA fails, lpMsgBuf will be unititialised after the call.
Simplest fix is to initialise the variable to NULL which fixes the cppcheck error and check the call result before dereferencing the pointer.",Minor update. We've used a fairly hacky way to get the OS image type in the YAML file up to now. The latest commit uses the canonical way to do this - see actions/cache#543,True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2281,2022-05-27T11:13:08Z,2022-05-27T11:37:35Z,2022-05-27T11:37:39Z,MERGED,True,7,5,1,https://github.com/matt335672,github actions: use canonical way to get ImageOS for astyle,1,[],https://github.com/neutrinolabs/xrdp/pull/2281,https://github.com/matt335672,1,https://github.com/neutrinolabs/xrdp/pull/2281,"Missed this out of #2278, as I didn't spot it.
It's another use of the same method to cache the astyle executable, and it's used further down in the same file","Missed this out of #2278, as I didn't spot it.
It's another use of the same method to cache the astyle executable, and it's used further down in the same file",True,{}
neutrinolabs/xrdp,https://github.com/neutrinolabs/xrdp,2282,2022-05-27T16:28:32Z,2022-05-28T10:05:46Z,2022-05-28T10:05:46Z,MERGED,True,1,1,1,https://github.com/metalefty,sesman: fix spacing in log,1,[],https://github.com/neutrinolabs/xrdp/pull/2282,https://github.com/metalefty,1,https://github.com/neutrinolabs/xrdp/pull/2282,"[20220301-18:25:01] [INFO ] Starting window manager on display 12from user home directory: /home/user/startwm.sh
                                                                ^^","[20220301-18:25:01] [INFO ] Starting window manager on display 12from user home directory: /home/user/startwm.sh
                                                                ^^",True,{}
