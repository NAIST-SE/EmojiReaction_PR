NetHack/NetHack,https://github.com/NetHack/NetHack,3,2016-03-09T11:44:17Z,2016-04-13T08:37:15Z,2016-04-13T08:37:15Z,MERGED,True,0,5,2,https://github.com/UniQP,Remove unreachable break statements.,1,[],https://github.com/NetHack/NetHack/pull/3,https://github.com/UniQP,1,https://github.com/NetHack/NetHack/pull/3,,,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,4,2016-03-11T07:41:38Z,2021-06-05T16:28:10Z,2021-06-05T16:28:10Z,CLOSED,False,57,37,12,https://github.com/tung,Fix C343-415: Mail daemons can be created when populating special levels with demons,1,[],https://github.com/NetHack/NetHack/pull/4,https://github.com/tung,1,https://github.com/NetHack/NetHack/pull/4,"The root cause of this was that special level creation was deliberately ignoring the G_NOGEN flag when making monsters by class, so a random & could create a mail daemon.
The mail daemon case had already been patched by commit 9e7df53 (spurious mail daemons (trunk only)), but further testing revealed that this bug also caused:

r monsters creating wererats (animal form) in the Healer quest
S monsters creating water moccasins in the Archaeologist quest and Medusa's Island levels
& monsters creating water demons

... all of which are flagged G_NOGEN and thus were not supposed to be generated randomly.
The only reason that the special level system was ignoring G_NOGEN was to allow creation of random ; (eel class) monsters which are all flagged G_NOGEN.  This fix replaces both that approach and the previous mail-daemon-only work-around patch by auto-detecting this condition and only relaxing the G_NOGEN restriction if it applies to the whole class of monsters requested; currently, only S_EEL and S_KOP fulfill this condition.
Incidentally, this is the same fix that prevents random chromatic dragons from spawning when special levels request random 'D' monsters in DynaHack (chromatic dragons are regular monsters in that variant).
Based on DynaHack commit b1532ff (Fix C343-415: Mail daemons can be created when populating special levels with demons) by me.","The root cause of this was that special level creation was deliberately ignoring the G_NOGEN flag when making monsters by class, so a random & could create a mail daemon.
The mail daemon case had already been patched by commit 9e7df53 (spurious mail daemons (trunk only)), but further testing revealed that this bug also caused:

r monsters creating wererats (animal form) in the Healer quest
S monsters creating water moccasins in the Archaeologist quest and Medusa's Island levels
& monsters creating water demons

... all of which are flagged G_NOGEN and thus were not supposed to be generated randomly.
The only reason that the special level system was ignoring G_NOGEN was to allow creation of random ; (eel class) monsters which are all flagged G_NOGEN.  This fix replaces both that approach and the previous mail-daemon-only work-around patch by auto-detecting this condition and only relaxing the G_NOGEN restriction if it applies to the whole class of monsters requested; currently, only S_EEL and S_KOP fulfill this condition.
Incidentally, this is the same fix that prevents random chromatic dragons from spawning when special levels request random 'D' monsters in DynaHack (chromatic dragons are regular monsters in that variant).
Based on DynaHack commit b1532ff (Fix C343-415: Mail daemons can be created when populating special levels with demons) by me.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,5,2016-03-11T07:42:46Z,2016-05-28T06:55:37Z,2016-05-28T06:55:37Z,CLOSED,False,36,1,1,https://github.com/tung,Fix travel moving player back and forth infinitely,1,[],https://github.com/NetHack/NetHack/pull/5,https://github.com/tung,1,https://github.com/NetHack/NetHack/pull/5,"This fixes a bug where hundreds of turns are wasted by the travel system moving the player back and forth when the player targets an unreachable space and sight-blocking obstacles occur in certain formations in-between.  The player will only be stopped if they're interrupted externally, e.g. growing hungry or being hit by a monster.  See the comment in the code for full details.
Based on DynaHack commit 02da53e (Fix travel moving player back and forth repeatedly) by me.","This fixes a bug where hundreds of turns are wasted by the travel system moving the player back and forth when the player targets an unreachable space and sight-blocking obstacles occur in certain formations in-between.  The player will only be stopped if they're interrupted externally, e.g. growing hungry or being hit by a monster.  See the comment in the code for full details.
Based on DynaHack commit 02da53e (Fix travel moving player back and forth repeatedly) by me.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,5,2016-03-11T07:42:46Z,2016-05-28T06:55:37Z,2016-05-28T06:55:37Z,CLOSED,False,36,1,1,https://github.com/tung,Fix travel moving player back and forth infinitely,1,[],https://github.com/NetHack/NetHack/pull/5,https://github.com/davecohrs,2,https://github.com/NetHack/NetHack/pull/5#issuecomment-209187662,"This fixes a bug where hundreds of turns are wasted by the travel system moving the player back and forth when the player targets an unreachable space and sight-blocking obstacles occur in certain formations in-between.  The player will only be stopped if they're interrupted externally, e.g. growing hungry or being hit by a monster.  See the comment in the code for full details.
Based on DynaHack commit 02da53e (Fix travel moving player back and forth repeatedly) by me.","This seems like one of the attempts I tried to fix this bug a few years ago, but found it did not address all situations. There was one in particular, where travel got stuck between 2 traps. Unfortunately, I no longer have that thread or I would forward it.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,6,2016-03-11T07:43:47Z,2021-06-05T16:28:10Z,2021-06-05T16:28:10Z,CLOSED,False,80,2,7,https://github.com/tung,map_coloring: L's Coloured Walls and Floor v1 patch (adapted),1,[],https://github.com/NetHack/NetHack/pull/6,https://github.com/tung,1,https://github.com/NetHack/NetHack/pull/6,"This implements the Coloured Walls and Floor v1 patch by L (Leon Arnott):

http://bilious.alt.org/?296
http://l.j-factor.com/nethack/glyphcolor.diff

This recolors various features of the dungeon:

Walls of the Wizard's Tower are magenta.
Other walls in Gehennom (except the Valley) are red.
Walls of the Gnomish Mines are brown, except for room walls.
Walls of the Astral Plane are white.
Altars are bright blue / gray / black / red depending on alignment, except on the Astral Plane, where they are all bright magenta.

This new feature can be toggled with the new map_coloring option (default on).
Compared to the original patch:

The original patch had no option and was thus unconditional.
Floors are no longer colored, since it looks ugly.
Walls of Sokoban are bright blue.
The Valley of the Dead is no longer grayscale, since it would be an interface screw.
Beehives are not colored, since it interacts poorly with the way special rooms are handled.
Lawful altars were white in the patch, but bright blue here, since white and gray are hard to distinguish.
Room preservation has been adapted for the new level compiler.
One of the tiny closets in Grotto Town is fixed to be colored as room wall instead of mine wall.
Orc Town area is considered rooms instead of mine wall.","This implements the Coloured Walls and Floor v1 patch by L (Leon Arnott):

http://bilious.alt.org/?296
http://l.j-factor.com/nethack/glyphcolor.diff

This recolors various features of the dungeon:

Walls of the Wizard's Tower are magenta.
Other walls in Gehennom (except the Valley) are red.
Walls of the Gnomish Mines are brown, except for room walls.
Walls of the Astral Plane are white.
Altars are bright blue / gray / black / red depending on alignment, except on the Astral Plane, where they are all bright magenta.

This new feature can be toggled with the new map_coloring option (default on).
Compared to the original patch:

The original patch had no option and was thus unconditional.
Floors are no longer colored, since it looks ugly.
Walls of Sokoban are bright blue.
The Valley of the Dead is no longer grayscale, since it would be an interface screw.
Beehives are not colored, since it interacts poorly with the way special rooms are handled.
Lawful altars were white in the patch, but bright blue here, since white and gray are hard to distinguish.
Room preservation has been adapted for the new level compiler.
One of the tiny closets in Grotto Town is fixed to be colored as room wall instead of mine wall.
Orc Town area is considered rooms instead of mine wall.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,6,2016-03-11T07:43:47Z,2021-06-05T16:28:10Z,2021-06-05T16:28:10Z,CLOSED,False,80,2,7,https://github.com/tung,map_coloring: L's Coloured Walls and Floor v1 patch (adapted),1,[],https://github.com/NetHack/NetHack/pull/6,https://github.com/moon-chilled,2,https://github.com/NetHack/NetHack/pull/6#issuecomment-195651679,"This implements the Coloured Walls and Floor v1 patch by L (Leon Arnott):

http://bilious.alt.org/?296
http://l.j-factor.com/nethack/glyphcolor.diff

This recolors various features of the dungeon:

Walls of the Wizard's Tower are magenta.
Other walls in Gehennom (except the Valley) are red.
Walls of the Gnomish Mines are brown, except for room walls.
Walls of the Astral Plane are white.
Altars are bright blue / gray / black / red depending on alignment, except on the Astral Plane, where they are all bright magenta.

This new feature can be toggled with the new map_coloring option (default on).
Compared to the original patch:

The original patch had no option and was thus unconditional.
Floors are no longer colored, since it looks ugly.
Walls of Sokoban are bright blue.
The Valley of the Dead is no longer grayscale, since it would be an interface screw.
Beehives are not colored, since it interacts poorly with the way special rooms are handled.
Lawful altars were white in the patch, but bright blue here, since white and gray are hard to distinguish.
Room preservation has been adapted for the new level compiler.
One of the tiny closets in Grotto Town is fixed to be colored as room wall instead of mine wall.
Orc Town area is considered rooms instead of mine wall.","IMO map_coloring should default to off, and that would probably also align more with the DT's values.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,6,2016-03-11T07:43:47Z,2021-06-05T16:28:10Z,2021-06-05T16:28:10Z,CLOSED,False,80,2,7,https://github.com/tung,map_coloring: L's Coloured Walls and Floor v1 patch (adapted),1,[],https://github.com/NetHack/NetHack/pull/6,https://github.com/paxed,3,https://github.com/NetHack/NetHack/pull/6#issuecomment-222294254,"This implements the Coloured Walls and Floor v1 patch by L (Leon Arnott):

http://bilious.alt.org/?296
http://l.j-factor.com/nethack/glyphcolor.diff

This recolors various features of the dungeon:

Walls of the Wizard's Tower are magenta.
Other walls in Gehennom (except the Valley) are red.
Walls of the Gnomish Mines are brown, except for room walls.
Walls of the Astral Plane are white.
Altars are bright blue / gray / black / red depending on alignment, except on the Astral Plane, where they are all bright magenta.

This new feature can be toggled with the new map_coloring option (default on).
Compared to the original patch:

The original patch had no option and was thus unconditional.
Floors are no longer colored, since it looks ugly.
Walls of Sokoban are bright blue.
The Valley of the Dead is no longer grayscale, since it would be an interface screw.
Beehives are not colored, since it interacts poorly with the way special rooms are handled.
Lawful altars were white in the patch, but bright blue here, since white and gray are hard to distinguish.
Room preservation has been adapted for the new level compiler.
One of the tiny closets in Grotto Town is fixed to be colored as room wall instead of mine wall.
Orc Town area is considered rooms instead of mine wall.",How does this work with tiles - especially the Wiz tower walls? The others I think already have branch-specific tiles.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,6,2016-03-11T07:43:47Z,2021-06-05T16:28:10Z,2021-06-05T16:28:10Z,CLOSED,False,80,2,7,https://github.com/tung,map_coloring: L's Coloured Walls and Floor v1 patch (adapted),1,[],https://github.com/NetHack/NetHack/pull/6,https://github.com/tung,4,https://github.com/NetHack/NetHack/pull/6#issuecomment-222296084,"This implements the Coloured Walls and Floor v1 patch by L (Leon Arnott):

http://bilious.alt.org/?296
http://l.j-factor.com/nethack/glyphcolor.diff

This recolors various features of the dungeon:

Walls of the Wizard's Tower are magenta.
Other walls in Gehennom (except the Valley) are red.
Walls of the Gnomish Mines are brown, except for room walls.
Walls of the Astral Plane are white.
Altars are bright blue / gray / black / red depending on alignment, except on the Astral Plane, where they are all bright magenta.

This new feature can be toggled with the new map_coloring option (default on).
Compared to the original patch:

The original patch had no option and was thus unconditional.
Floors are no longer colored, since it looks ugly.
Walls of Sokoban are bright blue.
The Valley of the Dead is no longer grayscale, since it would be an interface screw.
Beehives are not colored, since it interacts poorly with the way special rooms are handled.
Lawful altars were white in the patch, but bright blue here, since white and gray are hard to distinguish.
Room preservation has been adapted for the new level compiler.
One of the tiny closets in Grotto Town is fixed to be colored as room wall instead of mine wall.
Orc Town area is considered rooms instead of mine wall.","How does this work with tiles - especially the Wiz tower walls? The others I think already have branch-specific tiles.

This should have no impact on tiles. It modifies mapglyph(), which is used almost exclusively by ASCII modes (e.g. TTY windowport, Win32 pseudo-ASCII). The only places mapglyph() is used by tiles is to grab special flags to e.g. mark pets with a heart icon, which is unaffected by the color that this feature changes. To windowports that render tiles, this feature is essentially invisible, except for the ""map_coloring"" option, which makes sense for e.g. Win32 pseudo-ASCII. Windowports that render ASCII don't need to do anything they weren't already doing; Wizard Tower walls are handled entirely inside mapglyph().
Apologies if the details are hazy; I'm not at all familiar with any of the tiles code, and it's been over two months since I've even looked at this code.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,6,2016-03-11T07:43:47Z,2021-06-05T16:28:10Z,2021-06-05T16:28:10Z,CLOSED,False,80,2,7,https://github.com/tung,map_coloring: L's Coloured Walls and Floor v1 patch (adapted),1,[],https://github.com/NetHack/NetHack/pull/6,https://github.com/webbedspace,5,https://github.com/NetHack/NetHack/pull/6#issuecomment-642700522,"This implements the Coloured Walls and Floor v1 patch by L (Leon Arnott):

http://bilious.alt.org/?296
http://l.j-factor.com/nethack/glyphcolor.diff

This recolors various features of the dungeon:

Walls of the Wizard's Tower are magenta.
Other walls in Gehennom (except the Valley) are red.
Walls of the Gnomish Mines are brown, except for room walls.
Walls of the Astral Plane are white.
Altars are bright blue / gray / black / red depending on alignment, except on the Astral Plane, where they are all bright magenta.

This new feature can be toggled with the new map_coloring option (default on).
Compared to the original patch:

The original patch had no option and was thus unconditional.
Floors are no longer colored, since it looks ugly.
Walls of Sokoban are bright blue.
The Valley of the Dead is no longer grayscale, since it would be an interface screw.
Beehives are not colored, since it interacts poorly with the way special rooms are handled.
Lawful altars were white in the patch, but bright blue here, since white and gray are hard to distinguish.
Room preservation has been adapted for the new level compiler.
One of the tiny closets in Grotto Town is fixed to be colored as room wall instead of mine wall.
Orc Town area is considered rooms instead of mine wall.","I am Leon and wrote the original patch, which I've decided to no longer keep online due to being for a very old NH version, but I greatly appreciate this pullreq's gesture of support.",True,"{'HEART': ['https://github.com/moon-chilled'], 'THUMBS_UP': ['https://github.com/moon-chilled']}"
NetHack/NetHack,https://github.com/NetHack/NetHack,6,2016-03-11T07:43:47Z,2021-06-05T16:28:10Z,2021-06-05T16:28:10Z,CLOSED,False,80,2,7,https://github.com/tung,map_coloring: L's Coloured Walls and Floor v1 patch (adapted),1,[],https://github.com/NetHack/NetHack/pull/6,https://github.com/arekkusu42,6,https://github.com/NetHack/NetHack/pull/6#issuecomment-642717138,"This implements the Coloured Walls and Floor v1 patch by L (Leon Arnott):

http://bilious.alt.org/?296
http://l.j-factor.com/nethack/glyphcolor.diff

This recolors various features of the dungeon:

Walls of the Wizard's Tower are magenta.
Other walls in Gehennom (except the Valley) are red.
Walls of the Gnomish Mines are brown, except for room walls.
Walls of the Astral Plane are white.
Altars are bright blue / gray / black / red depending on alignment, except on the Astral Plane, where they are all bright magenta.

This new feature can be toggled with the new map_coloring option (default on).
Compared to the original patch:

The original patch had no option and was thus unconditional.
Floors are no longer colored, since it looks ugly.
Walls of Sokoban are bright blue.
The Valley of the Dead is no longer grayscale, since it would be an interface screw.
Beehives are not colored, since it interacts poorly with the way special rooms are handled.
Lawful altars were white in the patch, but bright blue here, since white and gray are hard to distinguish.
Room preservation has been adapted for the new level compiler.
One of the tiny closets in Grotto Town is fixed to be colored as room wall instead of mine wall.
Orc Town area is considered rooms instead of mine wall.",FWIW I’ve applied this patch as recently as 3.6.2.  Greatly improves the enjoyment of my game.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,6,2016-03-11T07:43:47Z,2021-06-05T16:28:10Z,2021-06-05T16:28:10Z,CLOSED,False,80,2,7,https://github.com/tung,map_coloring: L's Coloured Walls and Floor v1 patch (adapted),1,[],https://github.com/NetHack/NetHack/pull/6,https://github.com/copperwater,7,https://github.com/NetHack/NetHack/pull/6#issuecomment-642776997,"This implements the Coloured Walls and Floor v1 patch by L (Leon Arnott):

http://bilious.alt.org/?296
http://l.j-factor.com/nethack/glyphcolor.diff

This recolors various features of the dungeon:

Walls of the Wizard's Tower are magenta.
Other walls in Gehennom (except the Valley) are red.
Walls of the Gnomish Mines are brown, except for room walls.
Walls of the Astral Plane are white.
Altars are bright blue / gray / black / red depending on alignment, except on the Astral Plane, where they are all bright magenta.

This new feature can be toggled with the new map_coloring option (default on).
Compared to the original patch:

The original patch had no option and was thus unconditional.
Floors are no longer colored, since it looks ugly.
Walls of Sokoban are bright blue.
The Valley of the Dead is no longer grayscale, since it would be an interface screw.
Beehives are not colored, since it interacts poorly with the way special rooms are handled.
Lawful altars were white in the patch, but bright blue here, since white and gray are hard to distinguish.
Room preservation has been adapted for the new level compiler.
One of the tiny closets in Grotto Town is fixed to be colored as room wall instead of mine wall.
Orc Town area is considered rooms instead of mine wall.","SpliceHack and xNetHack, both based on 3.7, have up-to-date implementations of this patch. I can provide an updated pull request based on that if desired.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,6,2016-03-11T07:43:47Z,2021-06-05T16:28:10Z,2021-06-05T16:28:10Z,CLOSED,False,80,2,7,https://github.com/tung,map_coloring: L's Coloured Walls and Floor v1 patch (adapted),1,[],https://github.com/NetHack/NetHack/pull/6,https://github.com/bhaak,8,https://github.com/NetHack/NetHack/pull/6#issuecomment-642955216,"This implements the Coloured Walls and Floor v1 patch by L (Leon Arnott):

http://bilious.alt.org/?296
http://l.j-factor.com/nethack/glyphcolor.diff

This recolors various features of the dungeon:

Walls of the Wizard's Tower are magenta.
Other walls in Gehennom (except the Valley) are red.
Walls of the Gnomish Mines are brown, except for room walls.
Walls of the Astral Plane are white.
Altars are bright blue / gray / black / red depending on alignment, except on the Astral Plane, where they are all bright magenta.

This new feature can be toggled with the new map_coloring option (default on).
Compared to the original patch:

The original patch had no option and was thus unconditional.
Floors are no longer colored, since it looks ugly.
Walls of Sokoban are bright blue.
The Valley of the Dead is no longer grayscale, since it would be an interface screw.
Beehives are not colored, since it interacts poorly with the way special rooms are handled.
Lawful altars were white in the patch, but bright blue here, since white and gray are hard to distinguish.
Room preservation has been adapted for the new level compiler.
One of the tiny closets in Grotto Town is fixed to be colored as room wall instead of mine wall.
Orc Town area is considered rooms instead of mine wall.","I am Leon and wrote the original patch, which I've decided to no longer keep online due to being for a very old NH version, but I greatly appreciate this pullreq's gesture of support.

@webbedspace Many of your patches made it (in one form or another) into various forks. E.g. dilapidated armouries, tinfoil hat, and this colored wall patch or also some into vanilla as well, like the picture-painting demon and the polysink patch.
Even though your old website is preserved on the Internet Archive and the patches are for an older version, a live version is much more preferred to show where the original inspiration came from.",True,{'THUMBS_UP': ['https://github.com/moon-chilled']}
NetHack/NetHack,https://github.com/NetHack/NetHack,7,2016-03-11T07:44:32Z,2021-06-05T16:28:10Z,2021-06-05T16:28:10Z,CLOSED,False,44,78,6,https://github.com/tung,Fix Wizard of Yendor stealing quest artifacts,1,[],https://github.com/NetHack/NetHack/pull/7,https://github.com/tung,1,https://github.com/NetHack/NetHack/pull/7,"This removes the biggest reason that players neglect to use their role's quest artifact.  Players can now take advantage of their quest artifact's unique properties and abilities without the downside of losing it after waking Rodney, increasing the uniqueness of different roles.
Quest nemeses are still able to steal quest artifacts.","This removes the biggest reason that players neglect to use their role's quest artifact.  Players can now take advantage of their quest artifact's unique properties and abilities without the downside of losing it after waking Rodney, increasing the uniqueness of different roles.
Quest nemeses are still able to steal quest artifacts.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,8,2016-03-11T07:47:44Z,2016-04-13T08:37:15Z,2016-04-13T09:43:20Z,MERGED,True,26,17,1,https://github.com/tung,Fix paid object on bill when angering another shopkeeper,2,[],https://github.com/NetHack/NetHack/pull/8,https://github.com/tung,1,https://github.com/NetHack/NetHack/pull/8,"To test:

Get a level layout with two shops facing each other, e.g. minetn-4.
Sell a fragile object to one of the shops.
Dig a pit in the other shop's door space so its shopkeeper stays out of the way.
Pick up an object in that other shop so it appears on your bill.
Zap a wand of striking at the first shop to break the fragile object.
'p'ay for the object picked up.

Expected result: Object gets the standard prompt to pay for it.
Actual result: ""Paid object on bill??"" followed by ""Program in disorder perhaps you'd better #quit."" followed by the object being given to the player for free.
The cause?  This comment going all the way back to 2002:
/* FIXME: object handling should be limited to
   items which are on this particular shk's bill */

Originally reported by PaRaD0xx in FreeNode's #NetHack IRC channel whilst playing NAO343.
Based on DynaHack commit d995ed1 (Fix paid object on bill when angering another shkp) by me.","To test:

Get a level layout with two shops facing each other, e.g. minetn-4.
Sell a fragile object to one of the shops.
Dig a pit in the other shop's door space so its shopkeeper stays out of the way.
Pick up an object in that other shop so it appears on your bill.
Zap a wand of striking at the first shop to break the fragile object.
'p'ay for the object picked up.

Expected result: Object gets the standard prompt to pay for it.
Actual result: ""Paid object on bill??"" followed by ""Program in disorder perhaps you'd better #quit."" followed by the object being given to the player for free.
The cause?  This comment going all the way back to 2002:
/* FIXME: object handling should be limited to
   items which are on this particular shk's bill */

Originally reported by PaRaD0xx in FreeNode's #NetHack IRC channel whilst playing NAO343.
Based on DynaHack commit d995ed1 (Fix paid object on bill when angering another shkp) by me.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,9,2016-03-11T07:49:53Z,2016-04-13T08:37:16Z,2016-04-13T09:44:31Z,MERGED,True,11,11,2,https://github.com/tung,Fix billing/credit when hero nests their containers on a shop floor,3,[],https://github.com/NetHack/NetHack/pull/9,https://github.com/tung,1,https://github.com/NetHack/NetHack/pull/9,"This fixes a bug where the hero could accidentally donate the contents of their bag to a shopkeeper if they put it in another bag on the shop floor that also belonged to the hero.  To reproduce:

Drop a sack on the floor, but don't sell it.
Get another sack and put in hero-owned objects.
Put the sack with objects into the sack on the shop floor.
Take out the sack with the objects from the sack on the shop floor.

The shopkeeper will claim you owe them for the objects in the sack, and view the contents of the sack will show them as belonging to the shopkeeper.
In fixing this, this also fixes SELL_DONTSELL to do what it's supposed to for containers and contained gold.","This fixes a bug where the hero could accidentally donate the contents of their bag to a shopkeeper if they put it in another bag on the shop floor that also belonged to the hero.  To reproduce:

Drop a sack on the floor, but don't sell it.
Get another sack and put in hero-owned objects.
Put the sack with objects into the sack on the shop floor.
Take out the sack with the objects from the sack on the shop floor.

The shopkeeper will claim you owe them for the objects in the sack, and view the contents of the sack will show them as belonging to the shopkeeper.
In fixing this, this also fixes SELL_DONTSELL to do what it's supposed to for containers and contained gold.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,10,2016-03-12T03:04:13Z,2019-12-07T20:11:36Z,2019-12-07T20:11:36Z,CLOSED,False,9415,14741,251,https://github.com/MaddTheSane,ANSI-fying,39,[],https://github.com/NetHack/NetHack/pull/10,https://github.com/MaddTheSane,1,https://github.com/NetHack/NetHack/pull/10,This moves NetHack away from K&R to ANSI C calling conventions.,This moves NetHack away from K&R to ANSI C calling conventions.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,10,2016-03-12T03:04:13Z,2019-12-07T20:11:36Z,2019-12-07T20:11:36Z,CLOSED,False,9415,14741,251,https://github.com/MaddTheSane,ANSI-fying,39,[],https://github.com/NetHack/NetHack/pull/10,None,2,https://github.com/NetHack/NetHack/pull/10#issuecomment-209178748,This moves NetHack away from K&R to ANSI C calling conventions.,"This will require some discussion from the DT on whether we want to implement this and thereby drop pre-ANSI compiler support (which has, up until this point, been somewhat of a point of pride for NetHack to support so many platforms). In the meanwhile, please remove all changes that aren't strictly related to the ANSIfication if you wish to help the PR along.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,10,2016-03-12T03:04:13Z,2019-12-07T20:11:36Z,2019-12-07T20:11:36Z,CLOSED,False,9415,14741,251,https://github.com/MaddTheSane,ANSI-fying,39,[],https://github.com/NetHack/NetHack/pull/10,https://github.com/tung,3,https://github.com/NetHack/NetHack/pull/10#issuecomment-209340296,This moves NetHack away from K&R to ANSI C calling conventions.,"In case it hasn't been seen, there was also an /r/nethack submission for this PR with a lot of relevant comments. I posted in that thread, but I'll repeat what I said about this PR here too:

This is a good thing, because it's the reason NetHack has to declare arg types like this:
int FDECL(foo, (SHORT_P, CHAR_P, BOOLEAN_P));

int
foo(s, c, b)
short s;
char c;
boolean b;
{
    /* ... */
    return 0;
}

instead of this:
int foo(short, char, boolean);

int
foo(short s, char c, boolean b)
{
    /* ... */
    return 0;
}

It also thwarts the ability for git to show the containing functions of diff blocks, which makes quickly figuring out where changes were made a big pain. Good stuff!

I forgot about FDECL and related macros. I've removed most of them now.

Just as well, I think FDECL is the reason that cscope doesn't work on the NetHack source code, and cscope is essentially god mode for C programming, so on the distant chance this actually gets merged into main line, it will help a lot.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,10,2016-03-12T03:04:13Z,2019-12-07T20:11:36Z,2019-12-07T20:11:36Z,CLOSED,False,9415,14741,251,https://github.com/MaddTheSane,ANSI-fying,39,[],https://github.com/NetHack/NetHack/pull/10,None,4,https://github.com/NetHack/NetHack/pull/10#issuecomment-210116737,This moves NetHack away from K&R to ANSI C calling conventions.,"Changes to make Clang happy are definitely encouraged, but they should be a separate PR.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,10,2016-03-12T03:04:13Z,2019-12-07T20:11:36Z,2019-12-07T20:11:36Z,CLOSED,False,9415,14741,251,https://github.com/MaddTheSane,ANSI-fying,39,[],https://github.com/NetHack/NetHack/pull/10,https://github.com/MaddTheSane,5,https://github.com/NetHack/NetHack/pull/10#issuecomment-210120684,This moves NetHack away from K&R to ANSI C calling conventions.,Fair enough.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,11,2016-03-17T08:59:39Z,2021-06-05T16:28:11Z,2021-06-05T16:28:11Z,CLOSED,False,211,57,11,https://github.com/tung,attack_mode: enhanced alternative to confirm option,2,[],https://github.com/NetHack/NetHack/pull/11,https://github.com/tung,1,https://github.com/NetHack/NetHack/pull/11,"This option controls what happens when attempting to attack monsters.  The possible values are:

p - pacifist: don't fight anything
c - chat: chat with peaceful monsters, fight hostiles (default)
a - ask: ask to fight peaceful monsters, fight hostiles
f - fightall: fight peaceful and hostile monsters without asking

attack_mode replaces the old confirm option; attack_mode:a is equivalent to confirm, while attack_mode:f is equivalent to noconfirm.
attack_mode:c essentially waits a turn when the player bumps into a peaceful monster.  Note that it does NOT trigger the donation prompt of aligned priests.  Players can still accidentally hit peaceful monsters if they move into an 'I' and a peaceful monster is hiding underneath.
attack_mode:p avoids attacking any monsters knowingly.
Both pacifist and chat are overridden by stunning / confusion / hallucination, and by Stormbringer, correctly accounting for its override flag in the attack logic.
attack_mode:c should cut down on annoying prompt spam near peacefuls for most players, while attack_mode:p should be especially welcome to pacifist conduct players.","This option controls what happens when attempting to attack monsters.  The possible values are:

p - pacifist: don't fight anything
c - chat: chat with peaceful monsters, fight hostiles (default)
a - ask: ask to fight peaceful monsters, fight hostiles
f - fightall: fight peaceful and hostile monsters without asking

attack_mode replaces the old confirm option; attack_mode:a is equivalent to confirm, while attack_mode:f is equivalent to noconfirm.
attack_mode:c essentially waits a turn when the player bumps into a peaceful monster.  Note that it does NOT trigger the donation prompt of aligned priests.  Players can still accidentally hit peaceful monsters if they move into an 'I' and a peaceful monster is hiding underneath.
attack_mode:p avoids attacking any monsters knowingly.
Both pacifist and chat are overridden by stunning / confusion / hallucination, and by Stormbringer, correctly accounting for its override flag in the attack logic.
attack_mode:c should cut down on annoying prompt spam near peacefuls for most players, while attack_mode:p should be especially welcome to pacifist conduct players.",True,{'THUMBS_UP': ['https://github.com/FredrIQ']}
NetHack/NetHack,https://github.com/NetHack/NetHack,12,2016-03-17T09:02:22Z,2016-04-13T08:37:16Z,2016-04-13T08:37:16Z,MERGED,True,6,5,1,https://github.com/tung,TTY menu enhancements,3,[],https://github.com/NetHack/NetHack/pull/12,https://github.com/tung,1,https://github.com/NetHack/NetHack/pull/12,"Two minor improvements to TTY menus:

Stop > from closing TTY menus if the menu is scrolled to the last page (it can still be dismissed like this if space is used). This makes scrolling with < and > safe from the risk of accidentally closing menus.
Omit the ""a - "" part of ""a - whatever"" from menu coloring, to match NAO343.","Two minor improvements to TTY menus:

Stop > from closing TTY menus if the menu is scrolled to the last page (it can still be dismissed like this if space is used). This makes scrolling with < and > safe from the risk of accidentally closing menus.
Omit the ""a - "" part of ""a - whatever"" from menu coloring, to match NAO343.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,12,2016-03-17T09:02:22Z,2016-04-13T08:37:16Z,2016-04-13T08:37:16Z,MERGED,True,6,5,1,https://github.com/tung,TTY menu enhancements,3,[],https://github.com/NetHack/NetHack/pull/12,None,2,https://github.com/NetHack/NetHack/pull/12#issuecomment-209179616,"Two minor improvements to TTY menus:

Stop > from closing TTY menus if the menu is scrolled to the last page (it can still be dismissed like this if space is used). This makes scrolling with < and > safe from the risk of accidentally closing menus.
Omit the ""a - "" part of ""a - whatever"" from menu coloring, to match NAO343.",Note that 2. was reverted out since it was independently fixed by @paxed.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,13,2016-03-17T09:06:42Z,2021-06-05T16:28:11Z,2021-06-05T16:28:11Z,CLOSED,False,163,1,1,https://github.com/tung,Full text scrolling for TTY text windows,1,[],https://github.com/NetHack/NetHack/pull/13,https://github.com/tung,1,https://github.com/NetHack/NetHack/pull/13,"Up until now, TTY text windows could only be scrolled forward, which is really inconvenient when reading anything longer than a single screen.
This new change allows the standard menu scrolling keys (^ first page, | last page, < previous page and > next page) to work in TTY text windows, enabling e.g. message history and long-form documentation to be scrolled backwards and forwards.","Up until now, TTY text windows could only be scrolled forward, which is really inconvenient when reading anything longer than a single screen.
This new change allows the standard menu scrolling keys (^ first page, | last page, < previous page and > next page) to work in TTY text windows, enabling e.g. message history and long-form documentation to be scrolled backwards and forwards.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,13,2016-03-17T09:06:42Z,2021-06-05T16:28:11Z,2021-06-05T16:28:11Z,CLOSED,False,163,1,1,https://github.com/tung,Full text scrolling for TTY text windows,1,[],https://github.com/NetHack/NetHack/pull/13,None,2,https://github.com/NetHack/NetHack/pull/13#issuecomment-209173019,"Up until now, TTY text windows could only be scrolled forward, which is really inconvenient when reading anything longer than a single screen.
This new change allows the standard menu scrolling keys (^ first page, | last page, < previous page and > next page) to work in TTY text windows, enabling e.g. message history and long-form documentation to be scrolled backwards and forwards.",Is there a reason that it's hidden behind a feature macro?,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,13,2016-03-17T09:06:42Z,2021-06-05T16:28:11Z,2021-06-05T16:28:11Z,CLOSED,False,163,1,1,https://github.com/tung,Full text scrolling for TTY text windows,1,[],https://github.com/NetHack/NetHack/pull/13,https://github.com/tung,3,https://github.com/NetHack/NetHack/pull/13#issuecomment-209334483,"Up until now, TTY text windows could only be scrolled forward, which is really inconvenient when reading anything longer than a single screen.
This new change allows the standard menu scrolling keys (^ first page, | last page, < previous page and > next page) to work in TTY text windows, enabling e.g. message history and long-form documentation to be scrolled backwards and forwards.","Is there a reason that it's hidden behind a feature macro?

So that platforms with extremely limited memory could use the old forward-only system as an alternative. A long time ago, I remember being able to hard-lock NetHackDS (a homebrew port of NetHack for the Nintendo DS) under some circumstances by bringing up some of the longer text windows the game made available via its help menu, for example.
As for why I left that alternative in, I wrote this branch with the intent that it would be accepted by the NetHack DevTeam. To facilitate that, I have to make changes the same way the DevTeam does, with the same baseline as the DevTeam, and all I know of the DevTeam is that they try to support as many platforms as possible to the point of making technical sacrifices, e.g. the widespread use of FDECL and NDECL macros for DOS overlay support, non-standard wrapper macros for things that have existed since C89, etc.
Note that this decision was based on an assumption about how the DevTeam works, because how the DevTeam actually works is done in secret: secret development discussion and a secret bug tracker mean that I have nowhere to gauge or ask what the DevTeam's technical standards for contributions are. I could send an email, but the last email I sent the DevTeam has been ignored for about two months and counting now (it was a suggestion to make the GitHub project announce pushes to #nethack-dev, a change which takes all of five minutes), so there'd be no guarantee of a reply. IRC is a complete crapshoot: nobody DevTeam-related is ever available, except for @paxed who I might squeeze a one- or two-line reply out of before he runs off because he is perpetually busy apparently.
And that is the long-winded explanation as to why this is feature macro'd. If it were up to me, I'd have just replaced the old system wholesale, but who knows if it'd be rejected because somebody on the NetHack DevTeam wants to run it on their VMS and it doesn't work there?",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,14,2016-03-20T03:31:51Z,2016-04-13T19:57:15Z,2016-11-07T23:40:38Z,CLOSED,False,6,4,1,https://github.com/bobbydurrett,Fix panic when picking up object,1,[],https://github.com/NetHack/NetHack/pull/14,https://github.com/bobbydurrett,1,https://github.com/NetHack/NetHack/pull/14,"The new sortloop code was not properly updating the
head of the list that pointed to objects at a
location on the floor. Modified the code to pass
a pointer the where the head of the list is
stored.","The new sortloop code was not properly updating the
head of the list that pointed to objects at a
location on the floor. Modified the code to pass
a pointer the where the head of the list is
stored.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,14,2016-03-20T03:31:51Z,2016-04-13T19:57:15Z,2016-11-07T23:40:38Z,CLOSED,False,6,4,1,https://github.com/bobbydurrett,Fix panic when picking up object,1,[],https://github.com/NetHack/NetHack/pull/14,None,2,https://github.com/NetHack/NetHack/pull/14#issuecomment-209180516,"The new sortloop code was not properly updating the
head of the list that pointed to objects at a
location on the floor. Modified the code to pass
a pointer the where the head of the list is
stored.",This has been fixed in 221a73f,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,14,2016-03-20T03:31:51Z,2016-04-13T19:57:15Z,2016-11-07T23:40:38Z,CLOSED,False,6,4,1,https://github.com/bobbydurrett,Fix panic when picking up object,1,[],https://github.com/NetHack/NetHack/pull/14,https://github.com/bobbydurrett,3,https://github.com/NetHack/NetHack/pull/14#issuecomment-209621723,"The new sortloop code was not properly updating the
head of the list that pointed to objects at a
location on the floor. Modified the code to pass
a pointer the where the head of the list is
stored.",It was fixed but I think it was a different commit.  I think it was 3353ad1.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,15,2016-04-02T02:58:52Z,2016-04-13T08:37:16Z,2016-04-13T09:43:39Z,MERGED,True,2,2,1,https://github.com/tung,Use rn2() instead of Rand() for selection_do_randline(),1,[],https://github.com/NetHack/NetHack/pull/15,https://github.com/tung,1,https://github.com/NetHack/NetHack/pull/15,"That is, use NetHack's RNG instead of the direct system RNG.  This fixes maps generated with randlines to interact correctly with potential future RNG system changes e.g. switching PRNG algorithms, supporting NAO343's RNG reseeding, and even supporting replays like NetHack 4.
Based on DynaHack commit e464f63 (lev_comp: Fix system RNG use in randline) by me.","That is, use NetHack's RNG instead of the direct system RNG.  This fixes maps generated with randlines to interact correctly with potential future RNG system changes e.g. switching PRNG algorithms, supporting NAO343's RNG reseeding, and even supporting replays like NetHack 4.
Based on DynaHack commit e464f63 (lev_comp: Fix system RNG use in randline) by me.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,16,2016-04-14T21:05:51Z,2016-04-15T08:37:09Z,2017-09-14T06:59:42Z,MERGED,True,1,1,1,https://github.com/MaddTheSane,Change flag::sortloot to xchar,1,[],https://github.com/NetHack/NetHack/pull/16,https://github.com/MaddTheSane,1,https://github.com/NetHack/NetHack/pull/16,"When typedefed to C99's bool type, Clang complains in container_contents about ""comparison of constant 108 with expression of type 'boolean' (aka 'bool') is always false"".","When typedefed to C99's bool type, Clang complains in container_contents about ""comparison of constant 108 with expression of type 'boolean' (aka 'bool') is always false"".",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,17,2016-05-31T20:48:51Z,2018-04-29T18:45:42Z,2018-04-29T18:45:42Z,CLOSED,False,1,1,1,https://github.com/nikolas,doc: fix typo in fixes36.1 document,1,[],https://github.com/NetHack/NetHack/pull/17,https://github.com/nikolas,1,https://github.com/NetHack/NetHack/pull/17,,,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,17,2016-05-31T20:48:51Z,2018-04-29T18:45:42Z,2018-04-29T18:45:42Z,CLOSED,False,1,1,1,https://github.com/nikolas,doc: fix typo in fixes36.1 document,1,[],https://github.com/NetHack/NetHack/pull/17,https://github.com/nhmall,2,https://github.com/NetHack/NetHack/pull/17#issuecomment-370159634,,manually fixed upstream,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,18,2016-06-06T04:15:52Z,2016-06-18T17:40:55Z,2017-12-28T15:24:19Z,CLOSED,False,6,1,1,https://github.com/bobbydurrett,Fix crash with MAIL env variable,1,[],https://github.com/NetHack/NetHack/pull/18,https://github.com/bobbydurrett,1,https://github.com/NetHack/NetHack/pull/18,"This fix to mail.c prevents a core dump in free_maildata. I had the MAIL environment variable set to the path for my mailbox and whenever nethack exited it coredumped in free_maildata. Evidently the pointer being passed to free was not pointing to memory allocated in the heap. So, I modified the code to allocate a string off the heap for the mailbox path if this path came from an environment variable.
This issue was probably caused by the free mailbox at exit commit 3b38c75. This commit added code to free the mailbox memory but introduced a core dump because when an environment variable is set nh doesn't allocate memory off the heap.","This fix to mail.c prevents a core dump in free_maildata. I had the MAIL environment variable set to the path for my mailbox and whenever nethack exited it coredumped in free_maildata. Evidently the pointer being passed to free was not pointing to memory allocated in the heap. So, I modified the code to allocate a string off the heap for the mailbox path if this path came from an environment variable.
This issue was probably caused by the free mailbox at exit commit 3b38c75. This commit added code to free the mailbox memory but introduced a core dump because when an environment variable is set nh doesn't allocate memory off the heap.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,18,2016-06-06T04:15:52Z,2016-06-18T17:40:55Z,2017-12-28T15:24:19Z,CLOSED,False,6,1,1,https://github.com/bobbydurrett,Fix crash with MAIL env variable,1,[],https://github.com/NetHack/NetHack/pull/18,https://github.com/paxed,2,https://github.com/NetHack/NetHack/pull/18#issuecomment-226955048,"This fix to mail.c prevents a core dump in free_maildata. I had the MAIL environment variable set to the path for my mailbox and whenever nethack exited it coredumped in free_maildata. Evidently the pointer being passed to free was not pointing to memory allocated in the heap. So, I modified the code to allocate a string off the heap for the mailbox path if this path came from an environment variable.
This issue was probably caused by the free mailbox at exit commit 3b38c75. This commit added code to free the mailbox memory but introduced a core dump because when an environment variable is set nh doesn't allocate memory off the heap.",Merged. Thanks!,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,19,2016-06-11T03:55:59Z,2018-03-03T19:41:04Z,2019-05-23T22:03:12Z,CLOSED,False,2,1,1,https://github.com/bobbydurrett,Fix screen resize with Linux tty,1,[],https://github.com/NetHack/NetHack/pull/19,https://github.com/bobbydurrett,1,https://github.com/NetHack/NetHack/pull/19,This fixes the issue that I emailed the devteam about where the screen does not resize properly on NAO. In my own Linux environment I found that the screen resize worked if the SVR4 flag was set in unixconf.h and did not without it. I tracked this down to line 68 of ioctl.c. If SVR4 is set then USE_WIN_IOCTL is set and this enables the resize of the screen. My fix was just to add LINUX as one of the flags checked so you don't have to rely on SVR4 being set when it wouldn't really make sense. I tested this on Oracle Enterprise Linux 6.8 (Redhat 6.8) 32 bit.,This fixes the issue that I emailed the devteam about where the screen does not resize properly on NAO. In my own Linux environment I found that the screen resize worked if the SVR4 flag was set in unixconf.h and did not without it. I tracked this down to line 68 of ioctl.c. If SVR4 is set then USE_WIN_IOCTL is set and this enables the resize of the screen. My fix was just to add LINUX as one of the flags checked so you don't have to rely on SVR4 being set when it wouldn't really make sense. I tested this on Oracle Enterprise Linux 6.8 (Redhat 6.8) 32 bit.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,19,2016-06-11T03:55:59Z,2018-03-03T19:41:04Z,2019-05-23T22:03:12Z,CLOSED,False,2,1,1,https://github.com/bobbydurrett,Fix screen resize with Linux tty,1,[],https://github.com/NetHack/NetHack/pull/19,https://github.com/MaddTheSane,2,https://github.com/NetHack/NetHack/pull/19#issuecomment-225339406,This fixes the issue that I emailed the devteam about where the screen does not resize properly on NAO. In my own Linux environment I found that the screen resize worked if the SVR4 flag was set in unixconf.h and did not without it. I tracked this down to line 68 of ioctl.c. If SVR4 is set then USE_WIN_IOCTL is set and this enables the resize of the screen. My fix was just to add LINUX as one of the flags checked so you don't have to rely on SVR4 being set when it wouldn't really make sense. I tested this on Oracle Enterprise Linux 6.8 (Redhat 6.8) 32 bit.,"Some context might be good, especially for those who don't know what SVR4 is referring to.
SVR4 stands for System V Release 4 of UNIX. It was released in 1988.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,19,2016-06-11T03:55:59Z,2018-03-03T19:41:04Z,2019-05-23T22:03:12Z,CLOSED,False,2,1,1,https://github.com/bobbydurrett,Fix screen resize with Linux tty,1,[],https://github.com/NetHack/NetHack/pull/19,https://github.com/bobbydurrett,3,https://github.com/NetHack/NetHack/pull/19#issuecomment-225405061,This fixes the issue that I emailed the devteam about where the screen does not resize properly on NAO. In my own Linux environment I found that the screen resize worked if the SVR4 flag was set in unixconf.h and did not without it. I tracked this down to line 68 of ioctl.c. If SVR4 is set then USE_WIN_IOCTL is set and this enables the resize of the screen. My fix was just to add LINUX as one of the flags checked so you don't have to rely on SVR4 being set when it wouldn't really make sense. I tested this on Oracle Enterprise Linux 6.8 (Redhat 6.8) 32 bit.,"Sure, I can give some more context. I was playing Nethack 3.6.0 on NAO using the putty terminal emulator on my Windows 7 laptop. I accidentally resized my screen making it a little smaller. Later as I was trying to put something in my bag of holding I noticed that the screen was updated in the wrong place. It seemed to have not kept track of the fact that my screen was resized. I played with screen resizing more on NAO and find that generally the screen goes black when I shrink my putty window by a line or two as well as the original problem that I noticed. It just doesn't handle putty window resizes well.
Next I went to my own versions of Nethack that I have compiled on a Linux virtual machine. I have a 3.6.0 version and a version based on the fluid 3.6.1 code that is exposed on Github. One of these two installations showed the same behavior as NAO and the other perfectly resized the screen when I shrunk my putty window. I found that the only difference between the two that mattered in terms of whether the screen resized well was the flag called SVR4 in unixconf.h. So, the NAO code could just be recompiled with this flag set and it will resize the screen correctly. It was just random luck that I had the SVR4 flag set on one of my two installs since it didn't make sense for me to set a System 5 Unix flag on a Linux system.
The flags in unixconf.h indicate which version of unix/linux that you have and presumably which features will work on the various kinds of systems. Evidently in ioctl.c there is a function called getwindowsz which determines the number of lines and columns on your screen. But only certain versions of unix must have this ability so the developers used conditional compilation flags to determine whether to include any code in getwindowsz.  The USE_WIN_IOCTL must be set for any code to be in getwindowsz. USE_WIN_IOCTL is set in the logic that I recommend changing. This is the logic in the 3.6.0 version of ioctl.c:
#if defined(TIOCGWINSZ)                                    \
    && (defined(BSD) || defined(ULTRIX) || defined(AIX_31) \
        || defined(_BULL_SOURCE) || defined(SVR4))
#define USE_WIN_IOCTL

BSD, Ultrix, AIX, and System V Release 4 are all versions of Unix and so I assume that the code in getwindowsz would work on those types of Unix.
But, my version of Linux has this ioctl functionality just as these other forms of Unix do. So, somehow we need the conditions to evaluate to true so that USE_WIN_IOCTL will be set and the code in getwindowsz will be defined.
Long story, but the screen resize is a nice feature and it isn't there right now in the 3.6.0 version on NAO and that's a shame since all the code is in place to make it happen.
Bobby",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,19,2016-06-11T03:55:59Z,2018-03-03T19:41:04Z,2019-05-23T22:03:12Z,CLOSED,False,2,1,1,https://github.com/bobbydurrett,Fix screen resize with Linux tty,1,[],https://github.com/NetHack/NetHack/pull/19,https://github.com/FredrIQ,4,https://github.com/NetHack/NetHack/pull/19#issuecomment-225743652,This fixes the issue that I emailed the devteam about where the screen does not resize properly on NAO. In my own Linux environment I found that the screen resize worked if the SVR4 flag was set in unixconf.h and did not without it. I tracked this down to line 68 of ioctl.c. If SVR4 is set then USE_WIN_IOCTL is set and this enables the resize of the screen. My fix was just to add LINUX as one of the flags checked so you don't have to rely on SVR4 being set when it wouldn't really make sense. I tested this on Oracle Enterprise Linux 6.8 (Redhat 6.8) 32 bit.,"OK, just to make sure, but are you aware of the fact that dgamelaunch (what NAO uses as backend for user management) seems to handle resizing poorly? (Not entirely sure why, it should be none of its business, but I have noticed this myself, something that becomes weird even if I save back to the menu and re-enter).",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,19,2016-06-11T03:55:59Z,2018-03-03T19:41:04Z,2019-05-23T22:03:12Z,CLOSED,False,2,1,1,https://github.com/bobbydurrett,Fix screen resize with Linux tty,1,[],https://github.com/NetHack/NetHack/pull/19,https://github.com/bobbydurrett,5,https://github.com/NetHack/NetHack/pull/19#issuecomment-225775021,This fixes the issue that I emailed the devteam about where the screen does not resize properly on NAO. In my own Linux environment I found that the screen resize worked if the SVR4 flag was set in unixconf.h and did not without it. I tracked this down to line 68 of ioctl.c. If SVR4 is set then USE_WIN_IOCTL is set and this enables the resize of the screen. My fix was just to add LINUX as one of the flags checked so you don't have to rely on SVR4 being set when it wouldn't really make sense. I tested this on Oracle Enterprise Linux 6.8 (Redhat 6.8) 32 bit.,"I'm not aware of the dgamelaunch issues. I was able to reproduce the symptoms that I saw on NAO on my own installation on Linux so it does not seem to be related to dgamelauch. There are two symptoms that I reproduced exactly. One is choosing an item to put into a bag of holding and seeing the wrong line being updated with a plus symbol. This happens after resizing the putty window. The second symptom is that the screen goes black after the resize. I can reproduce both without setting the SVR4 flag and both problems go away with it set. So, I'm assuming it has nothing to do with dgamelaunch but haven't tested running nethack that way.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,19,2016-06-11T03:55:59Z,2018-03-03T19:41:04Z,2019-05-23T22:03:12Z,CLOSED,False,2,1,1,https://github.com/bobbydurrett,Fix screen resize with Linux tty,1,[],https://github.com/NetHack/NetHack/pull/19,https://github.com/bobbydurrett,6,https://github.com/NetHack/NetHack/pull/19#issuecomment-269105104,This fixes the issue that I emailed the devteam about where the screen does not resize properly on NAO. In my own Linux environment I found that the screen resize worked if the SVR4 flag was set in unixconf.h and did not without it. I tracked this down to line 68 of ioctl.c. If SVR4 is set then USE_WIN_IOCTL is set and this enables the resize of the screen. My fix was just to add LINUX as one of the flags checked so you don't have to rely on SVR4 being set when it wouldn't really make sense. I tested this on Oracle Enterprise Linux 6.8 (Redhat 6.8) 32 bit.,"I ran into this again today. It looks like in putty under the Window configuration I had ""Change the number of rows and columns"" chosen under ""When the window is resized"". I've changed it to ""Change the size of the font"". This should force it to always be 80x24 no matter what I do to the putty window.  This might be a good workaround for my laptop where no font size fits nicely. I miss the days of running nethack in DOS mode on Windows XP. Anyway, I still recommend this pull request and still recommend setting the SVR4 flag on NAO. It's pretty cool having the game automatically handle resizing for different numbers of rows and columns and the code is there. Just need to set the flag.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,19,2016-06-11T03:55:59Z,2018-03-03T19:41:04Z,2019-05-23T22:03:12Z,CLOSED,False,2,1,1,https://github.com/bobbydurrett,Fix screen resize with Linux tty,1,[],https://github.com/NetHack/NetHack/pull/19,https://github.com/nhmall,7,https://github.com/NetHack/NetHack/pull/19#issuecomment-370167439,This fixes the issue that I emailed the devteam about where the screen does not resize properly on NAO. In my own Linux environment I found that the screen resize worked if the SVR4 flag was set in unixconf.h and did not without it. I tracked this down to line 68 of ioctl.c. If SVR4 is set then USE_WIN_IOCTL is set and this enables the resize of the screen. My fix was just to add LINUX as one of the flags checked so you don't have to rely on SVR4 being set when it wouldn't really make sense. I tested this on Oracle Enterprise Linux 6.8 (Redhat 6.8) 32 bit.,"This should now be resolved in 27a7538
However, due to the change in logic from opt-in to opt-out, some platforms that
really do experience trouble with the resulting code that will now be included
may have to deliberately uncomment the
#define AVOID_WIN_IOCTL
in include/unixconf.h to turn it back off.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,19,2016-06-11T03:55:59Z,2018-03-03T19:41:04Z,2019-05-23T22:03:12Z,CLOSED,False,2,1,1,https://github.com/bobbydurrett,Fix screen resize with Linux tty,1,[],https://github.com/NetHack/NetHack/pull/19,https://github.com/bobbydurrett,8,https://github.com/NetHack/NetHack/pull/19#issuecomment-370174128,This fixes the issue that I emailed the devteam about where the screen does not resize properly on NAO. In my own Linux environment I found that the screen resize worked if the SVR4 flag was set in unixconf.h and did not without it. I tracked this down to line 68 of ioctl.c. If SVR4 is set then USE_WIN_IOCTL is set and this enables the resize of the screen. My fix was just to add LINUX as one of the flags checked so you don't have to rely on SVR4 being set when it wouldn't really make sense. I tested this on Oracle Enterprise Linux 6.8 (Redhat 6.8) 32 bit.,"Great. It is a minor thing but nice to get fixed.
Bobby",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,19,2016-06-11T03:55:59Z,2018-03-03T19:41:04Z,2019-05-23T22:03:12Z,CLOSED,False,2,1,1,https://github.com/bobbydurrett,Fix screen resize with Linux tty,1,[],https://github.com/NetHack/NetHack/pull/19,https://github.com/bobbydurrett,9,https://github.com/NetHack/NetHack/pull/19#issuecomment-370174148,This fixes the issue that I emailed the devteam about where the screen does not resize properly on NAO. In my own Linux environment I found that the screen resize worked if the SVR4 flag was set in unixconf.h and did not without it. I tracked this down to line 68 of ioctl.c. If SVR4 is set then USE_WIN_IOCTL is set and this enables the resize of the screen. My fix was just to add LINUX as one of the flags checked so you don't have to rely on SVR4 being set when it wouldn't really make sense. I tested this on Oracle Enterprise Linux 6.8 (Redhat 6.8) 32 bit.,Resolved in other commits,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,19,2016-06-11T03:55:59Z,2018-03-03T19:41:04Z,2019-05-23T22:03:12Z,CLOSED,False,2,1,1,https://github.com/bobbydurrett,Fix screen resize with Linux tty,1,[],https://github.com/NetHack/NetHack/pull/19,https://github.com/bobbydurrett,10,https://github.com/NetHack/NetHack/pull/19#issuecomment-370259887,This fixes the issue that I emailed the devteam about where the screen does not resize properly on NAO. In my own Linux environment I found that the screen resize worked if the SVR4 flag was set in unixconf.h and did not without it. I tracked this down to line 68 of ioctl.c. If SVR4 is set then USE_WIN_IOCTL is set and this enables the resize of the screen. My fix was just to add LINUX as one of the flags checked so you don't have to rely on SVR4 being set when it wouldn't really make sense. I tested this on Oracle Enterprise Linux 6.8 (Redhat 6.8) 32 bit.,I retested it after 27a7538e381dbc251b195d0e14fce851bea82f23t was pushed to GitHub. It fixed the problem in a different way but I think it is good. Minor fix but nice to have the resize code working on Linux.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,20,2016-06-30T12:58:51Z,2016-12-25T09:02:23Z,2016-12-25T09:04:14Z,CLOSED,False,10,15,4,https://github.com/barthouse,Nethack 3.6.0.ctype fixes,4,[],https://github.com/NetHack/NetHack/pull/20,https://github.com/barthouse,1,https://github.com/NetHack/NetHack/pull/20,"This fixes a problem with the use of ctype utility functions (e.g. isspace).  The ctype utility functions take an integer and expect them to be in a range of -1 to 255.  If the input is out of range, the ctype library will assert in debug builds of NetHack.  If we call a utility function with a signed char then we risk hitting this assert for extended characters.  All calls to the ctype functions must ensure the argument passed is a uchar to avoid passing in a value that is out of range due to sign extension.
A 100% repro example of this problem can be found by the following:

change your language settings to English UK allowing the entry of extended characters (like British pound)
Launch new game of nethack with pet using debug version
Name pet whose name starts with extended character followed by maximum number of other characters (no spaces)
Name item in inventory same as pet
Drop named item
Move one space and wait for pet to pick up item
When pet picks up item, you will assertion in update_topl() when calling isspace().

You can contact me at bart@barthouse.com.","This fixes a problem with the use of ctype utility functions (e.g. isspace).  The ctype utility functions take an integer and expect them to be in a range of -1 to 255.  If the input is out of range, the ctype library will assert in debug builds of NetHack.  If we call a utility function with a signed char then we risk hitting this assert for extended characters.  All calls to the ctype functions must ensure the argument passed is a uchar to avoid passing in a value that is out of range due to sign extension.
A 100% repro example of this problem can be found by the following:

change your language settings to English UK allowing the entry of extended characters (like British pound)
Launch new game of nethack with pet using debug version
Name pet whose name starts with extended character followed by maximum number of other characters (no spaces)
Name item in inventory same as pet
Drop named item
Move one space and wait for pet to pick up item
When pet picks up item, you will assertion in update_topl() when calling isspace().

You can contact me at bart@barthouse.com.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,20,2016-06-30T12:58:51Z,2016-12-25T09:02:23Z,2016-12-25T09:04:14Z,CLOSED,False,10,15,4,https://github.com/barthouse,Nethack 3.6.0.ctype fixes,4,[],https://github.com/NetHack/NetHack/pull/20,https://github.com/barthouse,2,https://github.com/NetHack/NetHack/pull/20#issuecomment-269115043,"This fixes a problem with the use of ctype utility functions (e.g. isspace).  The ctype utility functions take an integer and expect them to be in a range of -1 to 255.  If the input is out of range, the ctype library will assert in debug builds of NetHack.  If we call a utility function with a signed char then we risk hitting this assert for extended characters.  All calls to the ctype functions must ensure the argument passed is a uchar to avoid passing in a value that is out of range due to sign extension.
A 100% repro example of this problem can be found by the following:

change your language settings to English UK allowing the entry of extended characters (like British pound)
Launch new game of nethack with pet using debug version
Name pet whose name starts with extended character followed by maximum number of other characters (no spaces)
Name item in inventory same as pet
Drop named item
Move one space and wait for pet to pick up item
When pet picks up item, you will assertion in update_topl() when calling isspace().

You can contact me at bart@barthouse.com.",Looks like the changes have been incorporated and this pull request is no longer required.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,21,2016-06-30T14:30:35Z,2016-12-31T22:03:33Z,2017-09-16T23:04:07Z,CLOSED,False,2864,20,48,https://github.com/barthouse,Nethack 3.6.0.vs2015,11,[],https://github.com/NetHack/NetHack/pull/21,https://github.com/barthouse,1,https://github.com/NetHack/NetHack/pull/21,"This introduces a new method for building and running NetHack on Windows.  This method only requires opening a solution file, building and running.  This method is a significant improvement over the currently supported methods.
This change is generally only adding new project files to the repository with one exception.  When building with Visual Studio 2015 and the latest SDK, we now are running into a name conflict with the C standard runtime.  To avoid this conflict, terminate() was renamed nethack_terminate().","This introduces a new method for building and running NetHack on Windows.  This method only requires opening a solution file, building and running.  This method is a significant improvement over the currently supported methods.
This change is generally only adding new project files to the repository with one exception.  When building with Visual Studio 2015 and the latest SDK, we now are running into a name conflict with the C standard runtime.  To avoid this conflict, terminate() was renamed nethack_terminate().",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,21,2016-06-30T14:30:35Z,2016-12-31T22:03:33Z,2017-09-16T23:04:07Z,CLOSED,False,2864,20,48,https://github.com/barthouse,Nethack 3.6.0.vs2015,11,[],https://github.com/NetHack/NetHack/pull/21,https://github.com/barthouse,2,https://github.com/NetHack/NetHack/pull/21#issuecomment-229676953,"This introduces a new method for building and running NetHack on Windows.  This method only requires opening a solution file, building and running.  This method is a significant improvement over the currently supported methods.
This change is generally only adding new project files to the repository with one exception.  When building with Visual Studio 2015 and the latest SDK, we now are running into a name conflict with the C standard runtime.  To avoid this conflict, terminate() was renamed nethack_terminate().","One thing to note.  I placed the new project files in sys/win10.   I always thought it was odd to have the project files under win/win32 since the build method really doesn't have anything to do with windowing support.
I created the new win10 folder to isolate the new support.  Eventually, these files can be moved to be under sys/winnt (perhaps in sys/winnt/build).",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,21,2016-06-30T14:30:35Z,2016-12-31T22:03:33Z,2017-09-16T23:04:07Z,CLOSED,False,2864,20,48,https://github.com/barthouse,Nethack 3.6.0.vs2015,11,[],https://github.com/NetHack/NetHack/pull/21,https://github.com/barthouse,3,https://github.com/NetHack/NetHack/pull/21#issuecomment-269114586,"This introduces a new method for building and running NetHack on Windows.  This method only requires opening a solution file, building and running.  This method is a significant improvement over the currently supported methods.
This change is generally only adding new project files to the repository with one exception.  When building with Visual Studio 2015 and the latest SDK, we now are running into a name conflict with the C standard runtime.  To avoid this conflict, terminate() was renamed nethack_terminate().",Fixed merged conflicts.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,22,2016-08-04T20:41:03Z,2018-09-20T03:41:21Z,2018-09-20T03:41:22Z,CLOSED,False,1,1,1,https://github.com/nikolas,fix typo in comment,1,[],https://github.com/NetHack/NetHack/pull/22,https://github.com/nikolas,1,https://github.com/NetHack/NetHack/pull/22,,,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,22,2016-08-04T20:41:03Z,2018-09-20T03:41:21Z,2018-09-20T03:41:22Z,CLOSED,False,1,1,1,https://github.com/nikolas,fix typo in comment,1,[],https://github.com/NetHack/NetHack/pull/22,https://github.com/nhmall,2,https://github.com/NetHack/NetHack/pull/22#issuecomment-423030183,,Pulled upstream.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,23,2016-08-04T21:12:27Z,2016-08-22T06:29:04Z,2016-08-22T06:29:04Z,CLOSED,False,1,1,1,https://github.com/nikolas,fix typo in dat/tribute: belive -> believe,1,[],https://github.com/NetHack/NetHack/pull/23,https://github.com/nikolas,1,https://github.com/NetHack/NetHack/pull/23,,,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,23,2016-08-04T21:12:27Z,2016-08-22T06:29:04Z,2016-08-22T06:29:04Z,CLOSED,False,1,1,1,https://github.com/nikolas,fix typo in dat/tribute: belive -> believe,1,[],https://github.com/NetHack/NetHack/pull/23,https://github.com/paxed,2,https://github.com/NetHack/NetHack/pull/23#issuecomment-241324745,,I caught this in commit 20893bf,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,24,2016-09-20T23:04:42Z,2018-04-29T18:45:20Z,2018-04-29T18:45:20Z,CLOSED,False,4,4,1,https://github.com/moon-chilled,Fix ascii art in DEVEL/Developer.txt,1,[],https://github.com/NetHack/NetHack/pull/24,https://github.com/moon-chilled,1,https://github.com/NetHack/NetHack/pull/24,"The top line was aligned wrong, and there was a bunch of extraneous white space.  Not that big of a deal, just a small enhancement.","The top line was aligned wrong, and there was a bunch of extraneous white space.  Not that big of a deal, just a small enhancement.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,24,2016-09-20T23:04:42Z,2018-04-29T18:45:20Z,2018-04-29T18:45:20Z,CLOSED,False,4,4,1,https://github.com/moon-chilled,Fix ascii art in DEVEL/Developer.txt,1,[],https://github.com/NetHack/NetHack/pull/24,https://github.com/nhmall,2,https://github.com/NetHack/NetHack/pull/24#issuecomment-370159711,"The top line was aligned wrong, and there was a bunch of extraneous white space.  Not that big of a deal, just a small enhancement.",manually fixed upstream,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,25,2016-10-30T10:43:05Z,2018-03-25T14:28:06Z,2018-03-25T14:28:06Z,CLOSED,False,6,3,1,https://github.com/ericherman,docs fixup,2,[],https://github.com/NetHack/NetHack/pull/25,https://github.com/ericherman,1,https://github.com/NetHack/NetHack/pull/25,"git repository location in DEVEL/Developer.txt didn't match README
(also the ascii art is now correctly aligned)","git repository location in DEVEL/Developer.txt didn't match README
(also the ascii art is now correctly aligned)",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,25,2016-10-30T10:43:05Z,2018-03-25T14:28:06Z,2018-03-25T14:28:06Z,CLOSED,False,6,3,1,https://github.com/ericherman,docs fixup,2,[],https://github.com/NetHack/NetHack/pull/25,https://github.com/nhmall,2,https://github.com/NetHack/NetHack/pull/25#issuecomment-366740787,"git repository location in DEVEL/Developer.txt didn't match README
(also the ascii art is now correctly aligned)","Thanks, resolved in
7a0ad0f",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,26,2016-12-16T07:17:50Z,2019-10-07T04:37:25Z,2019-10-07T04:37:25Z,CLOSED,False,4,3,1,https://github.com/jackbunny,Allow #exploremode to still be used by player name even if pw is null.,1,[],https://github.com/NetHack/NetHack/pull/26,https://github.com/jackbunny,1,https://github.com/NetHack/NetHack/pull/26,I hit a problem using explore mode on my private server. For whatever reason (possibly my configuration) pw was always null and so I could never activate explore mode after starting a game. This moves the check for using the player name to be before the check for if pw is null.,I hit a problem using explore mode on my private server. For whatever reason (possibly my configuration) pw was always null and so I could never activate explore mode after starting a game. This moves the check for using the player name to be before the check for if pw is null.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,27,2016-12-20T14:32:19Z,2021-06-05T16:28:11Z,2021-06-05T16:28:11Z,CLOSED,False,5,2,1,https://github.com/bobbydurrett,Added Tony the Tiger message on food that is not a corpse.,3,[],https://github.com/NetHack/NetHack/pull/27,https://github.com/bobbydurrett,1,https://github.com/NetHack/NetHack/pull/27,Modify eat.c so that Tony the Tiger message comes out when a player polymorphed into a tiger and hallucinating eats yummy food such as a meatball. This message already came out when a hallucinating tiger player ate yummy corpses such as an orc corpse.,Modify eat.c so that Tony the Tiger message comes out when a player polymorphed into a tiger and hallucinating eats yummy food such as a meatball. This message already came out when a hallucinating tiger player ate yummy corpses such as an orc corpse.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,27,2016-12-20T14:32:19Z,2021-06-05T16:28:11Z,2021-06-05T16:28:11Z,CLOSED,False,5,2,1,https://github.com/bobbydurrett,Added Tony the Tiger message on food that is not a corpse.,3,[],https://github.com/NetHack/NetHack/pull/27,https://github.com/bobbydurrett,2,https://github.com/NetHack/NetHack/pull/27#issuecomment-415110131,Modify eat.c so that Tony the Tiger message comes out when a player polymorphed into a tiger and hallucinating eats yummy food such as a meatball. This message already came out when a hallucinating tiger player ate yummy corpses such as an orc corpse.,"I thought I should add more words to clarify the point of this pull request. When I started playing Nethack 3.6.0 I noticed that the dev team had changed the messages that come out when you eat. If you eat food that you really like it is ""delicious"". Then I noticed that the funny message that comes out when the player is polymorphed into a Tiger and hallucinating did not come out for all kinds of food that a tiger finds to be good. So, a meatball is ""delicious"" to a hallucinating tiger, but an orc corpse tastes Grrrreat! or something like that. Anyway, I think this pull request makes this very minor one off case that hardly ever happens more in line with the changes to the food eating messages that came with 3.6.0.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,27,2016-12-20T14:32:19Z,2021-06-05T16:28:11Z,2021-06-05T16:28:11Z,CLOSED,False,5,2,1,https://github.com/bobbydurrett,Added Tony the Tiger message on food that is not a corpse.,3,[],https://github.com/NetHack/NetHack/pull/27,https://github.com/bobbydurrett,3,https://github.com/NetHack/NetHack/pull/27#issuecomment-621551765,Modify eat.c so that Tony the Tiger message comes out when a player polymorphed into a tiger and hallucinating eats yummy food such as a meatball. This message already came out when a hallucinating tiger player ate yummy corpses such as an orc corpse.,I fixed two issues with this. Needed an exclamation point on the meatball case I originally added. Added case for tripe rations. Hallucinating players polymorphed into tigers is very important. :),True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,28,2017-02-04T09:19:57Z,2017-03-27T12:58:18Z,2017-03-27T12:58:18Z,CLOSED,False,376,50,32,https://github.com/NHTangles,Live logging,12,[],https://github.com/NetHack/NetHack/pull/28,https://github.com/NHTangles,1,https://github.com/NetHack/NetHack/pull/28,"Live logging patch as discussed on #nethack-dev over the last few days.

Pulled livelog_write_string(), etc from 3.4.3-nao patch set.
1a. Changed the livelog separator from ':' to '\t' for consistency with xlogfile.
Added sysconf option to control what types of messages (if any) to log, and introduced livelog types, which are passed as an additional arg to livelog_write_string(), and compared to the sysconf-configured types to determine whether or not to actually log the message.
Added LIVELOG_ENABLE to config.h to allow enable/disable at compile time.
Added livelog_printf() as a wrapper to livelog_write_string(), which does the obvious.
Added code to actually log messages as per 3.4.3-nao livelogging, and also achievements, unique kills, sacrifice gifts, crownings, broken conducts (there are a lot of these), and new levels.

Please consider :)","Live logging patch as discussed on #nethack-dev over the last few days.

Pulled livelog_write_string(), etc from 3.4.3-nao patch set.
1a. Changed the livelog separator from ':' to '\t' for consistency with xlogfile.
Added sysconf option to control what types of messages (if any) to log, and introduced livelog types, which are passed as an additional arg to livelog_write_string(), and compared to the sysconf-configured types to determine whether or not to actually log the message.
Added LIVELOG_ENABLE to config.h to allow enable/disable at compile time.
Added livelog_printf() as a wrapper to livelog_write_string(), which does the obvious.
Added code to actually log messages as per 3.4.3-nao livelogging, and also achievements, unique kills, sacrifice gifts, crownings, broken conducts (there are a lot of these), and new levels.

Please consider :)",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,28,2017-02-04T09:19:57Z,2017-03-27T12:58:18Z,2017-03-27T12:58:18Z,CLOSED,False,376,50,32,https://github.com/NHTangles,Live logging,12,[],https://github.com/NetHack/NetHack/pull/28,https://github.com/NHTangles,2,https://github.com/NetHack/NetHack/pull/28#issuecomment-289445515,"Live logging patch as discussed on #nethack-dev over the last few days.

Pulled livelog_write_string(), etc from 3.4.3-nao patch set.
1a. Changed the livelog separator from ':' to '\t' for consistency with xlogfile.
Added sysconf option to control what types of messages (if any) to log, and introduced livelog types, which are passed as an additional arg to livelog_write_string(), and compared to the sysconf-configured types to determine whether or not to actually log the message.
Added LIVELOG_ENABLE to config.h to allow enable/disable at compile time.
Added livelog_printf() as a wrapper to livelog_write_string(), which does the obvious.
Added code to actually log messages as per 3.4.3-nao livelogging, and also achievements, unique kills, sacrifice gifts, crownings, broken conducts (there are a lot of these), and new levels.

Please consider :)",Closing this one to reopen on a feature branch with some improvements.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,29,2017-02-17T13:42:51Z,2018-09-20T03:36:43Z,2018-09-20T03:36:43Z,CLOSED,False,1,1,1,https://github.com/nikolas,spelling fix: configruation -> configuration,1,[],https://github.com/NetHack/NetHack/pull/29,https://github.com/nikolas,1,https://github.com/NetHack/NetHack/pull/29,,,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,29,2017-02-17T13:42:51Z,2018-09-20T03:36:43Z,2018-09-20T03:36:43Z,CLOSED,False,1,1,1,https://github.com/nikolas,spelling fix: configruation -> configuration,1,[],https://github.com/NetHack/NetHack/pull/29,https://github.com/nhmall,2,https://github.com/NetHack/NetHack/pull/29#issuecomment-423029571,,This is not still present on 9/19/2018.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,30,2017-02-17T14:19:40Z,2020-08-18T14:57:45Z,2020-08-18T14:57:46Z,CLOSED,False,42,0,1,https://github.com/nikolas,Add hint file for tty/x11 linux build,1,[],https://github.com/NetHack/NetHack/pull/30,https://github.com/nikolas,1,https://github.com/NetHack/NetHack/pull/30,"This is a hint file that builds a version of NetHack that can use both
tty and X11 window modes.","This is a hint file that builds a version of NetHack that can use both
tty and X11 window modes.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,30,2017-02-17T14:19:40Z,2020-08-18T14:57:45Z,2020-08-18T14:57:46Z,CLOSED,False,42,0,1,https://github.com/nikolas,Add hint file for tty/x11 linux build,1,[],https://github.com/NetHack/NetHack/pull/30,https://github.com/nhmall,2,https://github.com/NetHack/NetHack/pull/30#issuecomment-675530227,"This is a hint file that builds a version of NetHack that can use both
tty and X11 window modes.","NetHack-3.7 branch can build a binary with tty, x11, Qt, and curses included, assuming the prerequisite packages are available (see sys/unix/NewInstall.unx)",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,31,2017-03-27T14:30:56Z,2021-06-05T16:28:11Z,2021-06-05T16:28:11Z,CLOSED,False,14695,8213,197,https://github.com/NHTangles,Livelog,336,[],https://github.com/NetHack/NetHack/pull/31,https://github.com/NHTangles,1,https://github.com/NetHack/NetHack/pull/31,"This is an improved version of the previous livelog submission, and is now in use on hardfought.org.","This is an improved version of the previous livelog submission, and is now in use on hardfought.org.",True,"{'THUMBS_UP': ['https://github.com/jwodder', 'https://github.com/FredrIQ', 'https://github.com/k21971', 'https://github.com/SHADOWELITE7', 'https://github.com/copperwater', 'https://github.com/NullCGT']}"
NetHack/NetHack,https://github.com/NetHack/NetHack,34,2017-05-06T09:07:43Z,2017-11-14T02:16:43Z,2017-11-14T02:16:44Z,CLOSED,False,18,5,3,https://github.com/NHTangles,Achievement recording fixes,2,[],https://github.com/NetHack/NetHack/pull/34,https://github.com/NHTangles,1,https://github.com/NetHack/NetHack/pull/34,"This properly fixes the issues with mines and soko achievement recording, as follows:

record_achieve_special is mapped to corpsenm, which has a default value of -1.  Setting to 1 on the prize item and then checking for nonzero will always mark the achievement (current workaround is to also check the level at pickup time, but this has other issues outlined below).
only checking level and otyp when setting record_achieve_special opens the possibility that a random luckstone may be generated at mine-end, and this may be interpreted as the prize (this has possibly happened though it's hard to be conclusive as monsters pick things up and move them)
checking the level at pickup time is problematic if a monster picks up the prize and takes it to another level before the hero gets his hands on it (cases of this have been recorded).","This properly fixes the issues with mines and soko achievement recording, as follows:

record_achieve_special is mapped to corpsenm, which has a default value of -1.  Setting to 1 on the prize item and then checking for nonzero will always mark the achievement (current workaround is to also check the level at pickup time, but this has other issues outlined below).
only checking level and otyp when setting record_achieve_special opens the possibility that a random luckstone may be generated at mine-end, and this may be interpreted as the prize (this has possibly happened though it's hard to be conclusive as monsters pick things up and move them)
checking the level at pickup time is problematic if a monster picks up the prize and takes it to another level before the hero gets his hands on it (cases of this have been recorded).",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,34,2017-05-06T09:07:43Z,2017-11-14T02:16:43Z,2017-11-14T02:16:44Z,CLOSED,False,18,5,3,https://github.com/NHTangles,Achievement recording fixes,2,[],https://github.com/NetHack/NetHack/pull/34,https://github.com/FredrIQ,2,https://github.com/NetHack/NetHack/pull/34#issuecomment-299654208,"This properly fixes the issues with mines and soko achievement recording, as follows:

record_achieve_special is mapped to corpsenm, which has a default value of -1.  Setting to 1 on the prize item and then checking for nonzero will always mark the achievement (current workaround is to also check the level at pickup time, but this has other issues outlined below).
only checking level and otyp when setting record_achieve_special opens the possibility that a random luckstone may be generated at mine-end, and this may be interpreted as the prize (this has possibly happened though it's hard to be conclusive as monsters pick things up and move them)
checking the level at pickup time is problematic if a monster picks up the prize and takes it to another level before the hero gets his hands on it (cases of this have been recorded).","What if the player picks up the luckstone, walks somewhere else, and is killed, and someone else finds the bones? Wouldn't your fixes make the achievement count for them? Your changes doesn't seem to address this (bones.c isn't changed)",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,34,2017-05-06T09:07:43Z,2017-11-14T02:16:43Z,2017-11-14T02:16:44Z,CLOSED,False,18,5,3,https://github.com/NHTangles,Achievement recording fixes,2,[],https://github.com/NetHack/NetHack/pull/34,https://github.com/NHTangles,3,https://github.com/NetHack/NetHack/pull/34#issuecomment-299678059,"This properly fixes the issues with mines and soko achievement recording, as follows:

record_achieve_special is mapped to corpsenm, which has a default value of -1.  Setting to 1 on the prize item and then checking for nonzero will always mark the achievement (current workaround is to also check the level at pickup time, but this has other issues outlined below).
only checking level and otyp when setting record_achieve_special opens the possibility that a random luckstone may be generated at mine-end, and this may be interpreted as the prize (this has possibly happened though it's hard to be conclusive as monsters pick things up and move them)
checking the level at pickup time is problematic if a monster picks up the prize and takes it to another level before the hero gets his hands on it (cases of this have been recorded).","Thanks for looking, FIQ.
This case is taken care of in invent.c - The player picks up the object, the achievement is recorded, and then the record_achieve_special flag is zeroed, so the object no longer has any special significance to the player, or any subsequent players that find it in bones.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,34,2017-05-06T09:07:43Z,2017-11-14T02:16:43Z,2017-11-14T02:16:44Z,CLOSED,False,18,5,3,https://github.com/NHTangles,Achievement recording fixes,2,[],https://github.com/NetHack/NetHack/pull/34,https://github.com/NHTangles,4,https://github.com/NetHack/NetHack/pull/34#issuecomment-299839778,"This properly fixes the issues with mines and soko achievement recording, as follows:

record_achieve_special is mapped to corpsenm, which has a default value of -1.  Setting to 1 on the prize item and then checking for nonzero will always mark the achievement (current workaround is to also check the level at pickup time, but this has other issues outlined below).
only checking level and otyp when setting record_achieve_special opens the possibility that a random luckstone may be generated at mine-end, and this may be interpreted as the prize (this has possibly happened though it's hard to be conclusive as monsters pick things up and move them)
checking the level at pickup time is problematic if a monster picks up the prize and takes it to another level before the hero gets his hands on it (cases of this have been recorded).","After further discussion with FIQ, it would indeed be possible for a prize item to get to another level without the player picking it up (eg by a pet or another monster) and potentially be left in bones.  Added another commit just now to address this.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,34,2017-05-06T09:07:43Z,2017-11-14T02:16:43Z,2017-11-14T02:16:44Z,CLOSED,False,18,5,3,https://github.com/NHTangles,Achievement recording fixes,2,[],https://github.com/NetHack/NetHack/pull/34,https://github.com/NHTangles,5,https://github.com/NetHack/NetHack/pull/34#issuecomment-344124068,"This properly fixes the issues with mines and soko achievement recording, as follows:

record_achieve_special is mapped to corpsenm, which has a default value of -1.  Setting to 1 on the prize item and then checking for nonzero will always mark the achievement (current workaround is to also check the level at pickup time, but this has other issues outlined below).
only checking level and otyp when setting record_achieve_special opens the possibility that a random luckstone may be generated at mine-end, and this may be interpreted as the prize (this has possibly happened though it's hard to be conclusive as monsters pick things up and move them)
checking the level at pickup time is problematic if a monster picks up the prize and takes it to another level before the hero gets his hands on it (cases of this have been recorded).","Closing this because the issues have been otherwise addressed in the following commits:
58477b3
5a50bb6",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,35,2017-05-14T00:55:01Z,2018-09-20T08:38:44Z,2018-09-20T08:38:44Z,CLOSED,False,63,13,1,https://github.com/copperwater,Add several missing entries to the encyclopedia,1,[],https://github.com/NetHack/NetHack/pull/35,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/35,"This makes several edits to the encyclopedia, mostly for some entries that aren't already in there.

Horned and barbed devils are merged since the descriptions are the same.
Spotted jelly is the same passage as blue jelly, since the passage is more about their immobility than blue jelly specifically.
Clay golem is the opening passage from Feet of Clay rather than the generic golem text.
Ochre jelly and invisible stalker are given descriptions from D&D.
Trident is the same passage as Poseidon.
Water troll is given the paragraph from The Colour of Magic describing a water troll.","This makes several edits to the encyclopedia, mostly for some entries that aren't already in there.

Horned and barbed devils are merged since the descriptions are the same.
Spotted jelly is the same passage as blue jelly, since the passage is more about their immobility than blue jelly specifically.
Clay golem is the opening passage from Feet of Clay rather than the generic golem text.
Ochre jelly and invisible stalker are given descriptions from D&D.
Trident is the same passage as Poseidon.
Water troll is given the paragraph from The Colour of Magic describing a water troll.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,36,2017-06-26T08:14:01Z,2017-11-21T09:03:32Z,2017-11-21T09:03:32Z,CLOSED,False,1,1,1,https://github.com/sebschmied,"Proper form of ""cannot"" with ""thou""",2,[],https://github.com/NetHack/NetHack/pull/36,https://github.com/sebschmied,1,https://github.com/NetHack/NetHack/pull/36,"When angered in sanctum or astral plane, your deity booms out:
Thou cannot escape my wrath, mortal!
This is not in line with other god messages. They all use the 2nd singular except this one.
I suggest replacing it with
Thou canst not escape my wrath, mortal!
Shakespearean examples:
""Thou canst not speak of that thou dost not feel."" - Romeo and Juliet 3:3
""Thou canst not say I did it"" - Macbeth 3:4
This has bugged me since I first reached the astral plane and angered my god read the code.","When angered in sanctum or astral plane, your deity booms out:
Thou cannot escape my wrath, mortal!
This is not in line with other god messages. They all use the 2nd singular except this one.
I suggest replacing it with
Thou canst not escape my wrath, mortal!
Shakespearean examples:
""Thou canst not speak of that thou dost not feel."" - Romeo and Juliet 3:3
""Thou canst not say I did it"" - Macbeth 3:4
This has bugged me since I first reached the astral plane and angered my god read the code.",True,"{'THUMBS_UP': ['https://github.com/bluebear94', 'https://github.com/vaysage', 'https://github.com/bosporos', 'https://github.com/uxmal', 'https://github.com/Thaillie', 'https://github.com/Xaleth']}"
NetHack/NetHack,https://github.com/NetHack/NetHack,37,2017-08-11T23:35:01Z,2021-06-05T16:28:12Z,2021-06-05T16:28:12Z,CLOSED,False,481,382,62,https://github.com/MaddTheSane,Quiet warnings generated by -Wcomma in Xcode 9 beta 5.,3,[],https://github.com/NetHack/NetHack/pull/37,https://github.com/MaddTheSane,1,https://github.com/NetHack/NetHack/pull/37,Note that there are a few in for loops that may be harder to quiet.,Note that there are a few in for loops that may be harder to quiet.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,39,2017-08-19T15:39:51Z,2017-10-07T14:22:03Z,2017-10-07T14:22:03Z,CLOSED,False,37,37,1,https://github.com/bosporos,Use iterative defines instead of absolute defines in skills.h,2,[],https://github.com/NetHack/NetHack/pull/39,https://github.com/bosporos,1,https://github.com/NetHack/NetHack/pull/39,,,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,40,2017-09-02T20:17:56Z,2017-09-04T09:49:00Z,2017-09-16T23:03:15Z,CLOSED,False,7,17,7,https://github.com/barthouse,Fix warnings in windows build.,7,[],https://github.com/NetHack/NetHack/pull/40,https://github.com/barthouse,1,https://github.com/NetHack/NetHack/pull/40,,,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,41,2017-09-02T21:17:56Z,2017-09-04T09:53:39Z,2017-09-16T23:03:12Z,CLOSED,False,5,0,1,https://github.com/barthouse,Fix crash that occurs when closing application window while invetory is being displayed,1,[],https://github.com/NetHack/NetHack/pull/41,https://github.com/barthouse,1,https://github.com/NetHack/NetHack/pull/41,,,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,42,2017-09-03T04:15:34Z,2017-09-04T09:58:16Z,2017-09-16T23:02:54Z,CLOSED,False,1901,0,39,https://github.com/barthouse,Added build support for Visual Studio 2017,6,[],https://github.com/NetHack/NetHack/pull/42,https://github.com/barthouse,1,https://github.com/NetHack/NetHack/pull/42,,,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,43,2017-09-04T20:42:58Z,2017-09-05T10:14:57Z,2017-09-05T10:14:57Z,CLOSED,False,104,15,4,https://github.com/barthouse,Improvements to build.bat scripts used in Windows builds.  Removed CRT warnings.,1,[],https://github.com/NetHack/NetHack/pull/43,https://github.com/barthouse,1,https://github.com/NetHack/NetHack/pull/43,,,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,45,2017-09-12T19:33:49Z,2018-03-12T08:15:46Z,2018-03-12T08:15:46Z,CLOSED,False,0,0,1,https://github.com/eyqs,Delete swap file,1,[],https://github.com/NetHack/NetHack/pull/45,https://github.com/eyqs,1,https://github.com/NetHack/NetHack/pull/45,,,True,{'THUMBS_DOWN': ['https://github.com/Xaleth']}
NetHack/NetHack,https://github.com/NetHack/NetHack,45,2017-09-12T19:33:49Z,2018-03-12T08:15:46Z,2018-03-12T08:15:46Z,CLOSED,False,0,0,1,https://github.com/eyqs,Delete swap file,1,[],https://github.com/NetHack/NetHack/pull/45,https://github.com/Xaleth,2,https://github.com/NetHack/NetHack/pull/45#issuecomment-335618165,,-1,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,45,2017-09-12T19:33:49Z,2018-03-12T08:15:46Z,2018-03-12T08:15:46Z,CLOSED,False,0,0,1,https://github.com/eyqs,Delete swap file,1,[],https://github.com/NetHack/NetHack/pull/45,https://github.com/paxed,3,https://github.com/NetHack/NetHack/pull/45#issuecomment-372225153,,This has been fixed.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,48,2017-09-15T06:13:43Z,2017-09-16T21:55:29Z,2017-09-16T21:55:29Z,CLOSED,False,1391,576,44,https://github.com/barthouse,Window ports NetHack and NetHackW changed to use a common engine.dll,8,[],https://github.com/NetHack/NetHack/pull/48,https://github.com/barthouse,1,https://github.com/NetHack/NetHack/pull/48,,,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,48,2017-09-15T06:13:43Z,2017-09-16T21:55:29Z,2017-09-16T21:55:29Z,CLOSED,False,1391,576,44,https://github.com/barthouse,Window ports NetHack and NetHackW changed to use a common engine.dll,8,[],https://github.com/NetHack/NetHack/pull/48,https://github.com/barthouse,2,https://github.com/NetHack/NetHack/pull/48#issuecomment-329997163,,Posted just for review.  Pulling out for now and will post newer version soon.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,50,2017-09-22T15:55:45Z,2018-05-19T00:44:27Z,2018-05-19T00:44:27Z,CLOSED,False,882,482,71,https://github.com/barthouse,Changes to support game engine reentrancy.,56,[],https://github.com/NetHack/NetHack/pull/50,https://github.com/barthouse,1,https://github.com/NetHack/NetHack/pull/50,Created this pull request to allow devteam to review approach.  Like to get feedback on general approach.  Very likely we will need to tweak this before accepting.,Created this pull request to allow devteam to review approach.  Like to get feedback on general approach.  Very likely we will need to tweak this before accepting.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,50,2017-09-22T15:55:45Z,2018-05-19T00:44:27Z,2018-05-19T00:44:27Z,CLOSED,False,882,482,71,https://github.com/barthouse,Changes to support game engine reentrancy.,56,[],https://github.com/NetHack/NetHack/pull/50,https://github.com/barthouse,2,https://github.com/NetHack/NetHack/pull/50#issuecomment-331722943,Created this pull request to allow devteam to review approach.  Like to get feedback on general approach.  Very likely we will need to tweak this before accepting.,"Thanks FredrIQ.  I'm still new to the engine code (most of my focus has been in port support).  I was hoping we had state to reflect when the monster actions are being carried out.  Being a newb to the engine, should we be concerned about expanding the scope of the check?  For example, I noticed that the flag was being toggled at individual calls to mbhit/buzz and was not just set for the duration of use_offensive.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,50,2017-09-22T15:55:45Z,2018-05-19T00:44:27Z,2018-05-19T00:44:27Z,CLOSED,False,882,482,71,https://github.com/barthouse,Changes to support game engine reentrancy.,56,[],https://github.com/NetHack/NetHack/pull/50,https://github.com/FredrIQ,3,https://github.com/NetHack/NetHack/pull/50#issuecomment-331723389,Created this pull request to allow devteam to review approach.  Like to get feedback on general approach.  Very likely we will need to tweak this before accepting.,"I looked at it a bit closer. m_using is completely redundant with context.mon_moving. If there is a case where one triggers and the other doesn't, then that means there's a bug. You should be able to replace m_using with context.mon_moving in the resist() check in zap.c and remove m_using completely.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,50,2017-09-22T15:55:45Z,2018-05-19T00:44:27Z,2018-05-19T00:44:27Z,CLOSED,False,882,482,71,https://github.com/barthouse,Changes to support game engine reentrancy.,56,[],https://github.com/NetHack/NetHack/pull/50,https://github.com/barthouse,4,https://github.com/NetHack/NetHack/pull/50#issuecomment-331724388,Created this pull request to allow devteam to review approach.  Like to get feedback on general approach.  Very likely we will need to tweak this before accepting.,Thanks FredrIQ.  I'll go ahead and make that change then.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,50,2017-09-22T15:55:45Z,2018-05-19T00:44:27Z,2018-05-19T00:44:27Z,CLOSED,False,882,482,71,https://github.com/barthouse,Changes to support game engine reentrancy.,56,[],https://github.com/NetHack/NetHack/pull/50,https://github.com/FredrIQ,5,https://github.com/NetHack/NetHack/pull/50#issuecomment-331725663,Created this pull request to allow devteam to review approach.  Like to get feedback on general approach.  Very likely we will need to tweak this before accepting.,You overlooked removing extern m_using in zap.c,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,50,2017-09-22T15:55:45Z,2018-05-19T00:44:27Z,2018-05-19T00:44:27Z,CLOSED,False,882,482,71,https://github.com/barthouse,Changes to support game engine reentrancy.,56,[],https://github.com/NetHack/NetHack/pull/50,https://github.com/barthouse,6,https://github.com/NetHack/NetHack/pull/50#issuecomment-390365699,Created this pull request to allow devteam to review approach.  Like to get feedback on general approach.  Very likely we will need to tweak this before accepting.,I will be incorporate this work using the windows port development branches.  This pull request is no longer needed.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,51,2017-09-22T23:19:15Z,2018-02-19T08:05:07Z,2018-02-19T08:05:07Z,CLOSED,False,7,15,1,https://github.com/David-M-Nielsen,Improved readability on a few lines of code throughout detect.c,2,[],https://github.com/NetHack/NetHack/pull/51,https://github.com/David-M-Nielsen,1,https://github.com/NetHack/NetHack/pull/51,"Hello there!
I did a quick lookover of detect.c in response to issue #38 and reformatted a few lines of code, as you can see. I hope the maintainers will let this trivial fix be my first contrib.","Hello there!
I did a quick lookover of detect.c in response to issue #38 and reformatted a few lines of code, as you can see. I hope the maintainers will let this trivial fix be my first contrib.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,52,2017-09-25T06:28:26Z,2017-10-01T11:46:46Z,2018-11-22T14:47:34Z,CLOSED,False,154,91,15,https://github.com/barthouse,Addressing bug with the use of static dieroll in uhitm.c.,11,[],https://github.com/NetHack/NetHack/pull/52,https://github.com/barthouse,1,https://github.com/NetHack/NetHack/pull/52,"In uhitm.c, we keep a module level static value “dieroll” which is used in various spots in the module.
Because the general “damage monster” routine hmon() can get called from outside uhitm.c, we can call into hmon() without actually changing the value of “dieroll”.  Hmon() in turn calls hmon_hitmon() which in turn uses “dieroll” for some decision making including calling artifact_hit() passing “dieroll”.
So, if you have a vorpal blade and you happen to chop a monsters head off (meaning that you have a “dieroll” of 1) you can then proceed to throw the vorpal blade at other monsters and assuming you hit, you will be guaranteed to chop off the monsters head since “dieroll” will not change when throwing weapons.  (“dieroll” stored in uhitm.c, only changes on certain attacks).
Not that throwing vorpal blades makes a lot of sense …. But demonstrates the bug.
This changes does beg the question in a couple of spots as to what dieroll should we use when we are dropping objects on monsters in stuck traps and when throwing cream pies.","In uhitm.c, we keep a module level static value “dieroll” which is used in various spots in the module.
Because the general “damage monster” routine hmon() can get called from outside uhitm.c, we can call into hmon() without actually changing the value of “dieroll”.  Hmon() in turn calls hmon_hitmon() which in turn uses “dieroll” for some decision making including calling artifact_hit() passing “dieroll”.
So, if you have a vorpal blade and you happen to chop a monsters head off (meaning that you have a “dieroll” of 1) you can then proceed to throw the vorpal blade at other monsters and assuming you hit, you will be guaranteed to chop off the monsters head since “dieroll” will not change when throwing weapons.  (“dieroll” stored in uhitm.c, only changes on certain attacks).
Not that throwing vorpal blades makes a lot of sense …. But demonstrates the bug.
This changes does beg the question in a couple of spots as to what dieroll should we use when we are dropping objects on monsters in stuck traps and when throwing cream pies.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,52,2017-09-25T06:28:26Z,2017-10-01T11:46:46Z,2018-11-22T14:47:34Z,CLOSED,False,154,91,15,https://github.com/barthouse,Addressing bug with the use of static dieroll in uhitm.c.,11,[],https://github.com/NetHack/NetHack/pull/52,https://github.com/FredrIQ,2,https://github.com/NetHack/NetHack/pull/52#issuecomment-332042953,"In uhitm.c, we keep a module level static value “dieroll” which is used in various spots in the module.
Because the general “damage monster” routine hmon() can get called from outside uhitm.c, we can call into hmon() without actually changing the value of “dieroll”.  Hmon() in turn calls hmon_hitmon() which in turn uses “dieroll” for some decision making including calling artifact_hit() passing “dieroll”.
So, if you have a vorpal blade and you happen to chop a monsters head off (meaning that you have a “dieroll” of 1) you can then proceed to throw the vorpal blade at other monsters and assuming you hit, you will be guaranteed to chop off the monsters head since “dieroll” will not change when throwing weapons.  (“dieroll” stored in uhitm.c, only changes on certain attacks).
Not that throwing vorpal blades makes a lot of sense …. But demonstrates the bug.
This changes does beg the question in a couple of spots as to what dieroll should we use when we are dropping objects on monsters in stuck traps and when throwing cream pies.","This bug is huge, and works in what seems to be every notable version and variant around. Nice find!",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,52,2017-09-25T06:28:26Z,2017-10-01T11:46:46Z,2018-11-22T14:47:34Z,CLOSED,False,154,91,15,https://github.com/barthouse,Addressing bug with the use of static dieroll in uhitm.c.,11,[],https://github.com/NetHack/NetHack/pull/52,https://github.com/barthouse,3,https://github.com/NetHack/NetHack/pull/52#issuecomment-332058077,"In uhitm.c, we keep a module level static value “dieroll” which is used in various spots in the module.
Because the general “damage monster” routine hmon() can get called from outside uhitm.c, we can call into hmon() without actually changing the value of “dieroll”.  Hmon() in turn calls hmon_hitmon() which in turn uses “dieroll” for some decision making including calling artifact_hit() passing “dieroll”.
So, if you have a vorpal blade and you happen to chop a monsters head off (meaning that you have a “dieroll” of 1) you can then proceed to throw the vorpal blade at other monsters and assuming you hit, you will be guaranteed to chop off the monsters head since “dieroll” will not change when throwing weapons.  (“dieroll” stored in uhitm.c, only changes on certain attacks).
Not that throwing vorpal blades makes a lot of sense …. But demonstrates the bug.
This changes does beg the question in a couple of spots as to what dieroll should we use when we are dropping objects on monsters in stuck traps and when throwing cream pies.",This is ready to go I think.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,52,2017-09-25T06:28:26Z,2017-10-01T11:46:46Z,2018-11-22T14:47:34Z,CLOSED,False,154,91,15,https://github.com/barthouse,Addressing bug with the use of static dieroll in uhitm.c.,11,[],https://github.com/NetHack/NetHack/pull/52,https://github.com/barthouse,4,https://github.com/NetHack/NetHack/pull/52#issuecomment-332071035,"In uhitm.c, we keep a module level static value “dieroll” which is used in various spots in the module.
Because the general “damage monster” routine hmon() can get called from outside uhitm.c, we can call into hmon() without actually changing the value of “dieroll”.  Hmon() in turn calls hmon_hitmon() which in turn uses “dieroll” for some decision making including calling artifact_hit() passing “dieroll”.
So, if you have a vorpal blade and you happen to chop a monsters head off (meaning that you have a “dieroll” of 1) you can then proceed to throw the vorpal blade at other monsters and assuming you hit, you will be guaranteed to chop off the monsters head since “dieroll” will not change when throwing weapons.  (“dieroll” stored in uhitm.c, only changes on certain attacks).
Not that throwing vorpal blades makes a lot of sense …. But demonstrates the bug.
This changes does beg the question in a couple of spots as to what dieroll should we use when we are dropping objects on monsters in stuck traps and when throwing cream pies.",Want to clean up branch history.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,52,2017-09-25T06:28:26Z,2017-10-01T11:46:46Z,2018-11-22T14:47:34Z,CLOSED,False,154,91,15,https://github.com/barthouse,Addressing bug with the use of static dieroll in uhitm.c.,11,[],https://github.com/NetHack/NetHack/pull/52,https://github.com/k21971,5,https://github.com/NetHack/NetHack/pull/52#issuecomment-332083071,"In uhitm.c, we keep a module level static value “dieroll” which is used in various spots in the module.
Because the general “damage monster” routine hmon() can get called from outside uhitm.c, we can call into hmon() without actually changing the value of “dieroll”.  Hmon() in turn calls hmon_hitmon() which in turn uses “dieroll” for some decision making including calling artifact_hit() passing “dieroll”.
So, if you have a vorpal blade and you happen to chop a monsters head off (meaning that you have a “dieroll” of 1) you can then proceed to throw the vorpal blade at other monsters and assuming you hit, you will be guaranteed to chop off the monsters head since “dieroll” will not change when throwing weapons.  (“dieroll” stored in uhitm.c, only changes on certain attacks).
Not that throwing vorpal blades makes a lot of sense …. But demonstrates the bug.
This changes does beg the question in a couple of spots as to what dieroll should we use when we are dropping objects on monsters in stuck traps and when throwing cream pies.","have confirmed this bug exists in GruntHack and SporkHack (will patch these two soon), as FIQ said this bug probably exists across most all variants. Good job barthouse!",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,52,2017-09-25T06:28:26Z,2017-10-01T11:46:46Z,2018-11-22T14:47:34Z,CLOSED,False,154,91,15,https://github.com/barthouse,Addressing bug with the use of static dieroll in uhitm.c.,11,[],https://github.com/NetHack/NetHack/pull/52,https://github.com/barthouse,6,https://github.com/NetHack/NetHack/pull/52#issuecomment-332316382,"In uhitm.c, we keep a module level static value “dieroll” which is used in various spots in the module.
Because the general “damage monster” routine hmon() can get called from outside uhitm.c, we can call into hmon() without actually changing the value of “dieroll”.  Hmon() in turn calls hmon_hitmon() which in turn uses “dieroll” for some decision making including calling artifact_hit() passing “dieroll”.
So, if you have a vorpal blade and you happen to chop a monsters head off (meaning that you have a “dieroll” of 1) you can then proceed to throw the vorpal blade at other monsters and assuming you hit, you will be guaranteed to chop off the monsters head since “dieroll” will not change when throwing weapons.  (“dieroll” stored in uhitm.c, only changes on certain attacks).
Not that throwing vorpal blades makes a lot of sense …. But demonstrates the bug.
This changes does beg the question in a couple of spots as to what dieroll should we use when we are dropping objects on monsters in stuck traps and when throwing cream pies.",I closed this pull-request replacing it with pull request #54.  (I had done a rebase which made it show up a bit funny here on GitHub).  Re-opening it now since folks are still commenting on it.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,54,2017-09-26T03:27:14Z,2017-10-01T11:45:56Z,2017-10-08T22:34:21Z,CLOSED,False,43,27,5,https://github.com/barthouse,Dieroll fix,3,[],https://github.com/NetHack/NetHack/pull/54,https://github.com/barthouse,1,https://github.com/NetHack/NetHack/pull/54,"In uhitm.c, we keep a module level static value dieroll which is used in various spots in the module.
Because the general damage monster routine hmon() can get called from outside uhitm.c, we can call into hmon() without actually changing the value of dieroll. Hmon() in turn calls hmon_hitmon() which in turn uses dierol” for some decision making including calling artifact_hit() passing dieroll.
So, if you have a vorpal blade and you happen to chop a monsters head off (meaning that you have a dieroll of 1) you can then proceed to throw the vorpal blade at other monsters and assuming you hit, you will be guaranteed to chop off the monsters head since dieroll will not change when throwing weapons. (dieroll stored in uhitm.c, only changes on certain attacks).
Not that throwing vorpal blades makes a lot of sense …. But demonstrates the bug.","In uhitm.c, we keep a module level static value dieroll which is used in various spots in the module.
Because the general damage monster routine hmon() can get called from outside uhitm.c, we can call into hmon() without actually changing the value of dieroll. Hmon() in turn calls hmon_hitmon() which in turn uses dierol” for some decision making including calling artifact_hit() passing dieroll.
So, if you have a vorpal blade and you happen to chop a monsters head off (meaning that you have a dieroll of 1) you can then proceed to throw the vorpal blade at other monsters and assuming you hit, you will be guaranteed to chop off the monsters head since dieroll will not change when throwing weapons. (dieroll stored in uhitm.c, only changes on certain attacks).
Not that throwing vorpal blades makes a lot of sense …. But demonstrates the bug.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,54,2017-09-26T03:27:14Z,2017-10-01T11:45:56Z,2017-10-08T22:34:21Z,CLOSED,False,43,27,5,https://github.com/barthouse,Dieroll fix,3,[],https://github.com/NetHack/NetHack/pull/54,https://github.com/paxed,2,https://github.com/NetHack/NetHack/pull/54#issuecomment-333371104,"In uhitm.c, we keep a module level static value dieroll which is used in various spots in the module.
Because the general damage monster routine hmon() can get called from outside uhitm.c, we can call into hmon() without actually changing the value of dieroll. Hmon() in turn calls hmon_hitmon() which in turn uses dierol” for some decision making including calling artifact_hit() passing dieroll.
So, if you have a vorpal blade and you happen to chop a monsters head off (meaning that you have a dieroll of 1) you can then proceed to throw the vorpal blade at other monsters and assuming you hit, you will be guaranteed to chop off the monsters head since dieroll will not change when throwing weapons. (dieroll stored in uhitm.c, only changes on certain attacks).
Not that throwing vorpal blades makes a lot of sense …. But demonstrates the bug.",Committed.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,55,2017-10-01T01:20:47Z,2017-10-01T11:32:23Z,2017-10-08T22:31:08Z,CLOSED,False,11,0,1,https://github.com/barthouse,Fix flashing issue that is seen with STATUS_HILITES in Windows port.,1,[],https://github.com/NetHack/NetHack/pull/55,https://github.com/barthouse,1,https://github.com/NetHack/NetHack/pull/55,"Without this change, tty_status_update() will end up calling putstr() multiple times for the same status line which in turn will cause tty_putstr() to call cl_end() multiple times per status update.  On the Windows port, each call into cl_end() will cause us to immediately call into the console interface.  Since we end up calling cl_end() a couple dozen times for a status update, this causes a noticeable flash flash in the status area.
There are various ways to address this but chose this approach given the various trade offs with other approaches.","Without this change, tty_status_update() will end up calling putstr() multiple times for the same status line which in turn will cause tty_putstr() to call cl_end() multiple times per status update.  On the Windows port, each call into cl_end() will cause us to immediately call into the console interface.  Since we end up calling cl_end() a couple dozen times for a status update, this causes a noticeable flash flash in the status area.
There are various ways to address this but chose this approach given the various trade offs with other approaches.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,55,2017-10-01T01:20:47Z,2017-10-01T11:32:23Z,2017-10-08T22:31:08Z,CLOSED,False,11,0,1,https://github.com/barthouse,Fix flashing issue that is seen with STATUS_HILITES in Windows port.,1,[],https://github.com/NetHack/NetHack/pull/55,https://github.com/paxed,2,https://github.com/NetHack/NetHack/pull/55#issuecomment-333370448,"Without this change, tty_status_update() will end up calling putstr() multiple times for the same status line which in turn will cause tty_putstr() to call cl_end() multiple times per status update.  On the Windows port, each call into cl_end() will cause us to immediately call into the console interface.  Since we end up calling cl_end() a couple dozen times for a status update, this causes a noticeable flash flash in the status area.
There are various ways to address this but chose this approach given the various trade offs with other approaches.",Committed.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,56,2017-10-02T11:29:40Z,2017-11-02T10:18:01Z,2017-11-02T10:18:01Z,CLOSED,False,19,7,2,https://github.com/FredrIQ,Fix pet AI not following hero as intended,1,[],https://github.com/NetHack/NetHack/pull/56,https://github.com/FredrIQ,1,https://github.com/NetHack/NetHack/pull/56,"Done by cutting down (but not eliminating) use of mtrack:

Not used for leashed pets
Not used if <=5 tiles from hero
Also, tin whistles now clear the mtrack record.","Done by cutting down (but not eliminating) use of mtrack:

Not used for leashed pets
Not used if <=5 tiles from hero
Also, tin whistles now clear the mtrack record.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,56,2017-10-02T11:29:40Z,2017-11-02T10:18:01Z,2017-11-02T10:18:01Z,CLOSED,False,19,7,2,https://github.com/FredrIQ,Fix pet AI not following hero as intended,1,[],https://github.com/NetHack/NetHack/pull/56,https://github.com/Xaleth,2,https://github.com/NetHack/NetHack/pull/56#issuecomment-334614748,"Done by cutting down (but not eliminating) use of mtrack:

Not used for leashed pets
Not used if <=5 tiles from hero
Also, tin whistles now clear the mtrack record.",+1,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,56,2017-10-02T11:29:40Z,2017-11-02T10:18:01Z,2017-11-02T10:18:01Z,CLOSED,False,19,7,2,https://github.com/FredrIQ,Fix pet AI not following hero as intended,1,[],https://github.com/NetHack/NetHack/pull/56,https://github.com/FredrIQ,3,https://github.com/NetHack/NetHack/pull/56#issuecomment-341376552,"Done by cutting down (but not eliminating) use of mtrack:

Not used for leashed pets
Not used if <=5 tiles from hero
Also, tin whistles now clear the mtrack record.",This was merged as a cherry-pick,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,57,2017-10-03T04:31:18Z,2017-10-25T07:46:42Z,2018-11-22T14:54:40Z,CLOSED,False,200,81,11,https://github.com/barthouse,Improve the handling of rawprint messages,8,[],https://github.com/NetHack/NetHack/pull/57,https://github.com/barthouse,1,https://github.com/NetHack/NetHack/pull/57,"There are several improvements in this pull request.  In particular if during program initialization you encounter problems causing multiple raw_print messages, all the messages will be displayed in a single dialog instead of getting a series of individual message dialogs for each raw_print message.
Fixed an undetected problem with building NetHack where we were defining MSWIN_GRAPHICS.
Implemented a mechanism for dynamically growing a string.  Leveraged this mechanism to reduce code complexity of splash window code.","There are several improvements in this pull request.  In particular if during program initialization you encounter problems causing multiple raw_print messages, all the messages will be displayed in a single dialog instead of getting a series of individual message dialogs for each raw_print message.
Fixed an undetected problem with building NetHack where we were defining MSWIN_GRAPHICS.
Implemented a mechanism for dynamically growing a string.  Leveraged this mechanism to reduce code complexity of splash window code.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,57,2017-10-03T04:31:18Z,2017-10-25T07:46:42Z,2018-11-22T14:54:40Z,CLOSED,False,200,81,11,https://github.com/barthouse,Improve the handling of rawprint messages,8,[],https://github.com/NetHack/NetHack/pull/57,https://github.com/paxed,2,https://github.com/NetHack/NetHack/pull/57#issuecomment-339244318,"There are several improvements in this pull request.  In particular if during program initialization you encounter problems causing multiple raw_print messages, all the messages will be displayed in a single dialog instead of getting a series of individual message dialogs for each raw_print message.
Fixed an undetected problem with building NetHack where we were defining MSWIN_GRAPHICS.
Implemented a mechanism for dynamically growing a string.  Leveraged this mechanism to reduce code complexity of splash window code.","Committed, with minor changes.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,58,2017-10-05T11:37:15Z,2021-06-05T16:28:12Z,2021-06-05T16:28:12Z,CLOSED,False,24,3,1,https://github.com/FredrIQ,Minor tweaks to Cleaver behaviour,3,[],https://github.com/NetHack/NetHack/pull/58,https://github.com/FredrIQ,1,https://github.com/NetHack/NetHack/pull/58,"Most importantly, the player will no longer attack peacefuls in an arc without a confirmation.","Most importantly, the player will no longer attack peacefuls in an arc without a confirmation.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,59,2017-10-07T02:00:42Z,2017-10-07T12:58:03Z,2017-10-08T22:32:51Z,CLOSED,False,2,0,2,https://github.com/barthouse,Fix problem with defaults.nh not being found when debugging within VS IDE,1,[],https://github.com/NetHack/NetHack/pull/59,https://github.com/barthouse,1,https://github.com/NetHack/NetHack/pull/59,"When debugging using the Visual Studio IDE, by default the working directory is the project directory.
Because of this, both NetHack and NetHackW will fail to find defaults.nh.  This change simply changes
the default working directory to $BinDir allowing defaults.nh to be found along side the executable.","When debugging using the Visual Studio IDE, by default the working directory is the project directory.
Because of this, both NetHack and NetHackW will fail to find defaults.nh.  This change simply changes
the default working directory to $BinDir allowing defaults.nh to be found along side the executable.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,59,2017-10-07T02:00:42Z,2017-10-07T12:58:03Z,2017-10-08T22:32:51Z,CLOSED,False,2,0,2,https://github.com/barthouse,Fix problem with defaults.nh not being found when debugging within VS IDE,1,[],https://github.com/NetHack/NetHack/pull/59,https://github.com/paxed,2,https://github.com/NetHack/NetHack/pull/59#issuecomment-334933401,"When debugging using the Visual Studio IDE, by default the working directory is the project directory.
Because of this, both NetHack and NetHackW will fail to find defaults.nh.  This change simply changes
the default working directory to $BinDir allowing defaults.nh to be found along side the executable.",Committed.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,60,2017-10-07T17:54:03Z,2017-10-07T22:57:33Z,2017-10-08T22:32:57Z,CLOSED,False,1,1,1,https://github.com/barthouse,Report Windows GUI WC2_HILITE_STATUS support avoiding raw_print on starutp.,1,[],https://github.com/NetHack/NetHack/pull/60,https://github.com/barthouse,1,https://github.com/NetHack/NetHack/pull/60,,,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,60,2017-10-07T17:54:03Z,2017-10-07T22:57:33Z,2017-10-08T22:32:57Z,CLOSED,False,1,1,1,https://github.com/barthouse,Report Windows GUI WC2_HILITE_STATUS support avoiding raw_print on starutp.,1,[],https://github.com/NetHack/NetHack/pull/60,https://github.com/paxed,2,https://github.com/NetHack/NetHack/pull/60#issuecomment-334971231,,Committed.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,61,2017-10-07T21:10:36Z,2017-10-07T22:26:58Z,2017-10-08T22:33:15Z,CLOSED,False,15,1,2,https://github.com/barthouse,Fix permanent inventory window going away after pick item(s) operations.,1,[],https://github.com/NetHack/NetHack/pull/61,https://github.com/barthouse,1,https://github.com/NetHack/NetHack/pull/61,"In the windows GUI when permanent inventory is being used, there is an annoying bug where any command that uses the inventory window to pick an item (or items) will cause the inventory window to become hidden requiring the user to use 'i' to redisplay the inventory.
Another side effect of this problem is that a jarring white empty space is created if the user happens to be using window backgrounds other then white (such as black).
This fix is in two parts.  First, we don't hide the permanent inventory window when destroying its as a popup.  Second, after a pick operation where we just used the permanent inventory window we restore the proper display state of the inventory window (pick type NONE and no prompt).","In the windows GUI when permanent inventory is being used, there is an annoying bug where any command that uses the inventory window to pick an item (or items) will cause the inventory window to become hidden requiring the user to use 'i' to redisplay the inventory.
Another side effect of this problem is that a jarring white empty space is created if the user happens to be using window backgrounds other then white (such as black).
This fix is in two parts.  First, we don't hide the permanent inventory window when destroying its as a popup.  Second, after a pick operation where we just used the permanent inventory window we restore the proper display state of the inventory window (pick type NONE and no prompt).",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,61,2017-10-07T21:10:36Z,2017-10-07T22:26:58Z,2017-10-08T22:33:15Z,CLOSED,False,15,1,2,https://github.com/barthouse,Fix permanent inventory window going away after pick item(s) operations.,1,[],https://github.com/NetHack/NetHack/pull/61,https://github.com/paxed,2,https://github.com/NetHack/NetHack/pull/61#issuecomment-334969951,"In the windows GUI when permanent inventory is being used, there is an annoying bug where any command that uses the inventory window to pick an item (or items) will cause the inventory window to become hidden requiring the user to use 'i' to redisplay the inventory.
Another side effect of this problem is that a jarring white empty space is created if the user happens to be using window backgrounds other then white (such as black).
This fix is in two parts.  First, we don't hide the permanent inventory window when destroying its as a popup.  Second, after a pick operation where we just used the permanent inventory window we restore the proper display state of the inventory window (pick type NONE and no prompt).",Committed.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,62,2017-10-08T20:46:24Z,2021-06-05T16:28:12Z,2021-06-05T16:28:12Z,CLOSED,False,30,14,8,https://github.com/FredrIQ,MKoT change -- detect unseen.,1,[],https://github.com/NetHack/NetHack/pull/62,https://github.com/FredrIQ,1,https://github.com/NetHack/NetHack/pull/62,"Also, make detect unseen take a range parameter. This is BOLT_LIM
(same effect as previously) with the following exceptions:

Master Key of Thievery has range 4 (cursed), 8 (uncursed),
16 (blessed). Doubled if you're a Rogue.
^E wizard mode command will find secrets on the entire level

Done as a response to the TODO on 5c77360.","Also, make detect unseen take a range parameter. This is BOLT_LIM
(same effect as previously) with the following exceptions:

Master Key of Thievery has range 4 (cursed), 8 (uncursed),
16 (blessed). Doubled if you're a Rogue.
^E wizard mode command will find secrets on the entire level

Done as a response to the TODO on 5c77360.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,63,2017-10-09T00:43:00Z,2017-10-09T11:58:26Z,2018-11-22T14:46:20Z,CLOSED,False,3,2,2,https://github.com/barthouse,Fix bug with handling of hilite color NO_COLOR,2,[],https://github.com/NetHack/NetHack/pull/63,https://github.com/barthouse,1,https://github.com/NetHack/NetHack/pull/63,"If a status hilite color is set to NO_COLOR, we will map this color to white (0xffffff) instead of using default foreground color of status window.  This can cause the unexpected result of drawing white text on white in the case that the user has set their status window background to white.
Made a change to the background brush of the main window to be black.  The main window background color is used when we are hiding/showing child windows.  This is a better choice given that the map window's background brush is black.  In the case that all window backgrounds have been set to black, this gives a pleasing consistent user experience without any flashes of white.","If a status hilite color is set to NO_COLOR, we will map this color to white (0xffffff) instead of using default foreground color of status window.  This can cause the unexpected result of drawing white text on white in the case that the user has set their status window background to white.
Made a change to the background brush of the main window to be black.  The main window background color is used when we are hiding/showing child windows.  This is a better choice given that the map window's background brush is black.  In the case that all window backgrounds have been set to black, this gives a pleasing consistent user experience without any flashes of white.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,63,2017-10-09T00:43:00Z,2017-10-09T11:58:26Z,2018-11-22T14:46:20Z,CLOSED,False,3,2,2,https://github.com/barthouse,Fix bug with handling of hilite color NO_COLOR,2,[],https://github.com/NetHack/NetHack/pull/63,https://github.com/paxed,2,https://github.com/NetHack/NetHack/pull/63#issuecomment-335136746,"If a status hilite color is set to NO_COLOR, we will map this color to white (0xffffff) instead of using default foreground color of status window.  This can cause the unexpected result of drawing white text on white in the case that the user has set their status window background to white.
Made a change to the background brush of the main window to be black.  The main window background color is used when we are hiding/showing child windows.  This is a better choice given that the map window's background brush is black.  In the case that all window backgrounds have been set to black, this gives a pleasing consistent user experience without any flashes of white.",Committed.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,65,2017-10-09T04:24:32Z,2017-10-09T18:03:15Z,2018-11-22T14:47:52Z,CLOSED,False,97,24,1,https://github.com/barthouse,Use a back buffer for all status rendering eliminating all flickering.,2,[],https://github.com/NetHack/NetHack/pull/65,https://github.com/barthouse,1,https://github.com/NetHack/NetHack/pull/65,"We are still getting some flickering of the status window.  There are two sources of the flickering.  The first is due to the setting of a background brush in the status window class.  This cause the window to be filled with the background color when BeginPaint() is called.  Because there is a gap between the fill and the eventual rendering of the status text, the desktop compositor can catch the front buffer in this intermediate state and thus causing a flicker.  The second is once again small gaps between when text is filled with the background color and the text is rendered.  This gap is smaller and is within the DrawText call itself.  This can only be eliminated through the use of back buffer rendering.
We now maintain a back buffer or all rendering.  We render the entire status window into a back buffer and this back buffer is copied to the front buffer in a single BitBlt() operation.  This eliminates the flicker as the desktop compositor will now only see a fully coherent front buffer.","We are still getting some flickering of the status window.  There are two sources of the flickering.  The first is due to the setting of a background brush in the status window class.  This cause the window to be filled with the background color when BeginPaint() is called.  Because there is a gap between the fill and the eventual rendering of the status text, the desktop compositor can catch the front buffer in this intermediate state and thus causing a flicker.  The second is once again small gaps between when text is filled with the background color and the text is rendered.  This gap is smaller and is within the DrawText call itself.  This can only be eliminated through the use of back buffer rendering.
We now maintain a back buffer or all rendering.  We render the entire status window into a back buffer and this back buffer is copied to the front buffer in a single BitBlt() operation.  This eliminates the flicker as the desktop compositor will now only see a fully coherent front buffer.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,65,2017-10-09T04:24:32Z,2017-10-09T18:03:15Z,2018-11-22T14:47:52Z,CLOSED,False,97,24,1,https://github.com/barthouse,Use a back buffer for all status rendering eliminating all flickering.,2,[],https://github.com/NetHack/NetHack/pull/65,https://github.com/alkom,2,https://github.com/NetHack/NetHack/pull/65#issuecomment-335070552,"We are still getting some flickering of the status window.  There are two sources of the flickering.  The first is due to the setting of a background brush in the status window class.  This cause the window to be filled with the background color when BeginPaint() is called.  Because there is a gap between the fill and the eventual rendering of the status text, the desktop compositor can catch the front buffer in this intermediate state and thus causing a flicker.  The second is once again small gaps between when text is filled with the background color and the text is rendered.  This gap is smaller and is within the DrawText call itself.  This can only be eliminated through the use of back buffer rendering.
We now maintain a back buffer or all rendering.  We render the entire status window into a back buffer and this back buffer is copied to the front buffer in a single BitBlt() operation.  This eliminates the flicker as the desktop compositor will now only see a fully coherent front buffer.","It may not even require back buffer. The flickering is most likely because of InvalidateRect in MSNH_MSG_UPDATE_STATUS handler that invalidates the entire window with erase background flag -> background is erased and repainted on every turn. You may want to try calling InvalidateRect(hWnd, NULL, FALSE) and then calling FillRect before DrawText in WM_PAINT. Alternatively, you can compare old and new values in MSNH_MSG_UPDATE_STATUS and call InvalidateRect only for areas that have changed (it is more work to calculate offsets though).",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,65,2017-10-09T04:24:32Z,2017-10-09T18:03:15Z,2018-11-22T14:47:52Z,CLOSED,False,97,24,1,https://github.com/barthouse,Use a back buffer for all status rendering eliminating all flickering.,2,[],https://github.com/NetHack/NetHack/pull/65,https://github.com/barthouse,3,https://github.com/NetHack/NetHack/pull/65#issuecomment-335081437,"We are still getting some flickering of the status window.  There are two sources of the flickering.  The first is due to the setting of a background brush in the status window class.  This cause the window to be filled with the background color when BeginPaint() is called.  Because there is a gap between the fill and the eventual rendering of the status text, the desktop compositor can catch the front buffer in this intermediate state and thus causing a flicker.  The second is once again small gaps between when text is filled with the background color and the text is rendered.  This gap is smaller and is within the DrawText call itself.  This can only be eliminated through the use of back buffer rendering.
We now maintain a back buffer or all rendering.  We render the entire status window into a back buffer and this back buffer is copied to the front buffer in a single BitBlt() operation.  This eliminates the flicker as the desktop compositor will now only see a fully coherent front buffer.","Thanks for the suggestions.
I think comparing values and calling InvalidRect only on those field positions would come really close to no flicker since it would significantly reduce how often we do any rendering.  However, we still have the fundamental problem that rendering could still get caught in the middle of a ""composition"" of the desktop and we occasionally would see the flicker as a result (albeit at a very low rate).  It would also add a bit of complexity and more opportunity to get something wrong.
The back buffer rendering is straight forward and just leverages the existing rendering logic with the addition of a BitBlt at the end.  The storage needed for the back buffer is relatively small.
FYI, I left the InvalidateRect() calls as is and just set hbrBackground to NULL.  Setting the background brush to NULL has the same effect as calling InvalidRect() with no erase.  (I probably should go and change the calls to InvalidateRct to pass FALSE for erase so that other see a consistent intent).",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,65,2017-10-09T04:24:32Z,2017-10-09T18:03:15Z,2018-11-22T14:47:52Z,CLOSED,False,97,24,1,https://github.com/barthouse,Use a back buffer for all status rendering eliminating all flickering.,2,[],https://github.com/NetHack/NetHack/pull/65,https://github.com/paxed,4,https://github.com/NetHack/NetHack/pull/65#issuecomment-335238336,"We are still getting some flickering of the status window.  There are two sources of the flickering.  The first is due to the setting of a background brush in the status window class.  This cause the window to be filled with the background color when BeginPaint() is called.  Because there is a gap between the fill and the eventual rendering of the status text, the desktop compositor can catch the front buffer in this intermediate state and thus causing a flicker.  The second is once again small gaps between when text is filled with the background color and the text is rendered.  This gap is smaller and is within the DrawText call itself.  This can only be eliminated through the use of back buffer rendering.
We now maintain a back buffer or all rendering.  We render the entire status window into a back buffer and this back buffer is copied to the front buffer in a single BitBlt() operation.  This eliminates the flicker as the desktop compositor will now only see a fully coherent front buffer.",Committed.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,66,2017-10-09T07:34:03Z,2017-10-11T01:52:15Z,2018-11-22T14:48:40Z,CLOSED,False,7,2,1,https://github.com/barthouse,Attempt to open defaults.nh from HACKDIR if not found for WIN32.,2,[],https://github.com/NetHack/NetHack/pull/66,https://github.com/barthouse,1,https://github.com/NetHack/NetHack/pull/66,,,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,66,2017-10-09T07:34:03Z,2017-10-11T01:52:15Z,2018-11-22T14:48:40Z,CLOSED,False,7,2,1,https://github.com/barthouse,Attempt to open defaults.nh from HACKDIR if not found for WIN32.,2,[],https://github.com/NetHack/NetHack/pull/66,https://github.com/barthouse,2,https://github.com/NetHack/NetHack/pull/66#issuecomment-335657977,,"Given that this is only fixing a developer scenario, I'm closing the commit.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,67,2017-10-09T19:47:44Z,2017-10-09T20:34:18Z,2018-11-22T14:48:28Z,CLOSED,False,2,0,1,https://github.com/barthouse,Clear selection count when reverting back to permanent inventory view.,1,[],https://github.com/NetHack/NetHack/pull/67,https://github.com/barthouse,1,https://github.com/NetHack/NetHack/pull/67,We need to clear selection counts after the permanent inventory window was used to select items.,We need to clear selection counts after the permanent inventory window was used to select items.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,67,2017-10-09T19:47:44Z,2017-10-09T20:34:18Z,2018-11-22T14:48:28Z,CLOSED,False,2,0,1,https://github.com/barthouse,Clear selection count when reverting back to permanent inventory view.,1,[],https://github.com/NetHack/NetHack/pull/67,https://github.com/paxed,2,https://github.com/NetHack/NetHack/pull/67#issuecomment-335277635,We need to clear selection counts after the permanent inventory window was used to select items.,Committed.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,68,2017-10-15T01:22:29Z,2017-10-25T07:52:19Z,2018-11-22T14:54:16Z,CLOSED,False,639,654,6,https://github.com/barthouse,Changes to player selection dialog.,4,[],https://github.com/NetHack/NetHack/pull/68,https://github.com/barthouse,1,https://github.com/NetHack/NetHack/pull/68,Significant changes to player selection dialog that attempt to match recently made changes to the Qt and X11 window ports.,Significant changes to player selection dialog that attempt to match recently made changes to the Qt and X11 window ports.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,68,2017-10-15T01:22:29Z,2017-10-25T07:52:19Z,2018-11-22T14:54:16Z,CLOSED,False,639,654,6,https://github.com/barthouse,Changes to player selection dialog.,4,[],https://github.com/NetHack/NetHack/pull/68,https://github.com/paxed,2,https://github.com/NetHack/NetHack/pull/68#issuecomment-339245652,Significant changes to player selection dialog that attempt to match recently made changes to the Qt and X11 window ports.,Committed,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,69,2017-10-21T20:44:32Z,2017-10-25T08:05:21Z,2018-11-22T14:49:08Z,CLOSED,False,232,35,3,https://github.com/barthouse,WIN32 CONSOLE: Detect when the current console font has glyphs that are too wide,2,[],https://github.com/NetHack/NetHack/pull/69,https://github.com/barthouse,1,https://github.com/NetHack/NetHack/pull/69,"For Win32 console (NetHack.exe), added support to detect when the current console font has glyphs that are too wide and will cause rendering errors in the console.  If detected, we warn the user and change the code page to 437 and the font to Consolas.  At exit, if we had changed the font and code page then we will restore to the original font and code page.
NOTE: the warning is given using raw_print().  Currently, raw_print messages are lost when we transition to displaying game windows.  We need another pull request (#57) to be completed in order for this warning to show up properly.  This will need to be tested.","For Win32 console (NetHack.exe), added support to detect when the current console font has glyphs that are too wide and will cause rendering errors in the console.  If detected, we warn the user and change the code page to 437 and the font to Consolas.  At exit, if we had changed the font and code page then we will restore to the original font and code page.
NOTE: the warning is given using raw_print().  Currently, raw_print messages are lost when we transition to displaying game windows.  We need another pull request (#57) to be completed in order for this warning to show up properly.  This will need to be tested.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,69,2017-10-21T20:44:32Z,2017-10-25T08:05:21Z,2018-11-22T14:49:08Z,CLOSED,False,232,35,3,https://github.com/barthouse,WIN32 CONSOLE: Detect when the current console font has glyphs that are too wide,2,[],https://github.com/NetHack/NetHack/pull/69,https://github.com/paxed,2,https://github.com/NetHack/NetHack/pull/69#issuecomment-339248998,"For Win32 console (NetHack.exe), added support to detect when the current console font has glyphs that are too wide and will cause rendering errors in the console.  If detected, we warn the user and change the code page to 437 and the font to Consolas.  At exit, if we had changed the font and code page then we will restore to the original font and code page.
NOTE: the warning is given using raw_print().  Currently, raw_print messages are lost when we transition to displaying game windows.  We need another pull request (#57) to be completed in order for this warning to show up properly.  This will need to be tested.",Committed,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,70,2017-10-22T23:42:10Z,2018-04-30T00:12:14Z,2018-04-30T00:12:14Z,CLOSED,False,19,12,2,https://github.com/chasonr,Add configuration for Qt 5,1,[],https://github.com/NetHack/NetHack/pull/70,https://github.com/chasonr,1,https://github.com/NetHack/NetHack/pull/70,"I called the directory Qt4, but the source code also compiles with Qt 5, with a little help from the preprocessor.
With Qt 5, at least on Fedora 26, the needed packages are Qt5Gui Qt5Widgets Qt5Multimedia, the MOC is moc-qt5 and the source must be compiled with -fPIC. The linker complains if you don't use -fPIC.
This change adjusts sys/unix/hints/linux-qt4 to provide the variables QTGUI and MOC, with an alternate configuration for Qt 5, and adjusts sys/unix/Makefile.src to accept these variables.","I called the directory Qt4, but the source code also compiles with Qt 5, with a little help from the preprocessor.
With Qt 5, at least on Fedora 26, the needed packages are Qt5Gui Qt5Widgets Qt5Multimedia, the MOC is moc-qt5 and the source must be compiled with -fPIC. The linker complains if you don't use -fPIC.
This change adjusts sys/unix/hints/linux-qt4 to provide the variables QTGUI and MOC, with an alternate configuration for Qt 5, and adjusts sys/unix/Makefile.src to accept these variables.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,70,2017-10-22T23:42:10Z,2018-04-30T00:12:14Z,2018-04-30T00:12:14Z,CLOSED,False,19,12,2,https://github.com/chasonr,Add configuration for Qt 5,1,[],https://github.com/NetHack/NetHack/pull/70,https://github.com/tux871,2,https://github.com/NetHack/NetHack/pull/70#issuecomment-339008964,"I called the directory Qt4, but the source code also compiles with Qt 5, with a little help from the preprocessor.
With Qt 5, at least on Fedora 26, the needed packages are Qt5Gui Qt5Widgets Qt5Multimedia, the MOC is moc-qt5 and the source must be compiled with -fPIC. The linker complains if you don't use -fPIC.
This change adjusts sys/unix/hints/linux-qt4 to provide the variables QTGUI and MOC, with an alternate configuration for Qt 5, and adjusts sys/unix/Makefile.src to accept these variables.","Hello, chasonr. Tell me please, is it possible to compile nethack qt 3.6.0 for windows 7? I have a small experience in compiling programs, I only know how to compile small programs into microsoft visual studio. The latest version of qt in windows is qt 5. I found your repository nethack-3.6.0-patches, it seems like it can be compiled under qt 5 in windows. But what to do next? I found no instructions for windows in the source files of nethack. The Install.Qt file only says that ""This code should also work with Qt / Windows, but support for that is not currently official.""",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,70,2017-10-22T23:42:10Z,2018-04-30T00:12:14Z,2018-04-30T00:12:14Z,CLOSED,False,19,12,2,https://github.com/chasonr,Add configuration for Qt 5,1,[],https://github.com/NetHack/NetHack/pull/70,https://github.com/chasonr,3,https://github.com/NetHack/NetHack/pull/70#issuecomment-339178692,"I called the directory Qt4, but the source code also compiles with Qt 5, with a little help from the preprocessor.
With Qt 5, at least on Fedora 26, the needed packages are Qt5Gui Qt5Widgets Qt5Multimedia, the MOC is moc-qt5 and the source must be compiled with -fPIC. The linker complains if you don't use -fPIC.
This change adjusts sys/unix/hints/linux-qt4 to provide the variables QTGUI and MOC, with an alternate configuration for Qt 5, and adjusts sys/unix/Makefile.src to accept these variables.","The nethack-3.6.0-patches repository has a means of compiling the Qt 4 branch in Windows, against either Qt 4 or 5, using MinGW-w64. That project seems to have given way to MSYS2 (and anyway the current Qt 5 ships with its own copy of MinGW). I have never set it up to work with Visual Studio, but it should be possible.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,70,2017-10-22T23:42:10Z,2018-04-30T00:12:14Z,2018-04-30T00:12:14Z,CLOSED,False,19,12,2,https://github.com/chasonr,Add configuration for Qt 5,1,[],https://github.com/NetHack/NetHack/pull/70,https://github.com/tux871,4,https://github.com/NetHack/NetHack/pull/70#issuecomment-339182693,"I called the directory Qt4, but the source code also compiles with Qt 5, with a little help from the preprocessor.
With Qt 5, at least on Fedora 26, the needed packages are Qt5Gui Qt5Widgets Qt5Multimedia, the MOC is moc-qt5 and the source must be compiled with -fPIC. The linker complains if you don't use -fPIC.
This change adjusts sys/unix/hints/linux-qt4 to provide the variables QTGUI and MOC, with an alternate configuration for Qt 5, and adjusts sys/unix/Makefile.src to accept these variables.","Did not understand which project gave way to msys2? Did not understand your phrase ""against either Qt 4 or 5, using MinGW-w64"", does this mean that I can compile only the qt 4 branch in windows? I have to use a branch: interfaces, right? What is the easiest way to compile? Without a difference, qt 4 or 5. I have little idea what to do in order to compile, what should I read to learn how to do this?",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,70,2017-10-22T23:42:10Z,2018-04-30T00:12:14Z,2018-04-30T00:12:14Z,CLOSED,False,19,12,2,https://github.com/chasonr,Add configuration for Qt 5,1,[],https://github.com/NetHack/NetHack/pull/70,https://github.com/chasonr,5,https://github.com/NetHack/NetHack/pull/70#issuecomment-339184868,"I called the directory Qt4, but the source code also compiles with Qt 5, with a little help from the preprocessor.
With Qt 5, at least on Fedora 26, the needed packages are Qt5Gui Qt5Widgets Qt5Multimedia, the MOC is moc-qt5 and the source must be compiled with -fPIC. The linker complains if you don't use -fPIC.
This change adjusts sys/unix/hints/linux-qt4 to provide the variables QTGUI and MOC, with an alternate configuration for Qt 5, and adjusts sys/unix/Makefile.src to accept these variables.","I'll open an issue on the nethack-3.6.0-patches repository, since this conversation is really about that version and not the DevTeam's work.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,70,2017-10-22T23:42:10Z,2018-04-30T00:12:14Z,2018-04-30T00:12:14Z,CLOSED,False,19,12,2,https://github.com/chasonr,Add configuration for Qt 5,1,[],https://github.com/NetHack/NetHack/pull/70,https://github.com/chasonr,6,https://github.com/NetHack/NetHack/pull/70#issuecomment-385292983,"I called the directory Qt4, but the source code also compiles with Qt 5, with a little help from the preprocessor.
With Qt 5, at least on Fedora 26, the needed packages are Qt5Gui Qt5Widgets Qt5Multimedia, the MOC is moc-qt5 and the source must be compiled with -fPIC. The linker complains if you don't use -fPIC.
This change adjusts sys/unix/hints/linux-qt4 to provide the variables QTGUI and MOC, with an alternate configuration for Qt 5, and adjusts sys/unix/Makefile.src to accept these variables.","I'm going to close this pull request and redo my fork, now that 3.6.1 is out. I hope to get a full set of configurations for Qt 5 on Linux, Windows and Mac OS X.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,71,2017-10-24T21:38:06Z,2017-10-24T21:38:25Z,2017-10-24T21:42:55Z,CLOSED,False,0,0,0,None,Mistake - wrong repos,2,[],https://github.com/NetHack/NetHack/pull/71,None,1,https://github.com/NetHack/NetHack/pull/71,,,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,73,2017-11-12T00:32:56Z,2020-08-18T14:51:11Z,2020-08-18T14:51:11Z,CLOSED,False,134,79,9,https://github.com/barthouse,Implemented window port options scr_tile_width and scr_tile_heigt for Windows GUI.,1,[],https://github.com/NetHack/NetHack/pull/73,https://github.com/barthouse,1,https://github.com/NetHack/NetHack/pull/73,,,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,76,2017-12-26T04:17:57Z,2018-02-21T02:54:31Z,2019-05-23T22:03:16Z,CLOSED,False,1,1,1,https://github.com/bobbydurrett,Fix memory error by adding byte for null string terminator.,1,[],https://github.com/NetHack/NetHack/pull/76,https://github.com/bobbydurrett,1,https://github.com/NetHack/NetHack/pull/76,"Line 95 in mail.c introduced a bug by allocating one byte less than was needed.
The call to alloc was supposed to get enough bytes to hold a string but it
used strlen() to get the number of bytes. We should have allocated strlen()+1.
This didn't cause an error on Linux on x86-64 but it showed up on the
Raspberry Pi platform.","Line 95 in mail.c introduced a bug by allocating one byte less than was needed.
The call to alloc was supposed to get enough bytes to hold a string but it
used strlen() to get the number of bytes. We should have allocated strlen()+1.
This didn't cause an error on Linux on x86-64 but it showed up on the
Raspberry Pi platform.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,76,2017-12-26T04:17:57Z,2018-02-21T02:54:31Z,2019-05-23T22:03:16Z,CLOSED,False,1,1,1,https://github.com/bobbydurrett,Fix memory error by adding byte for null string terminator.,1,[],https://github.com/NetHack/NetHack/pull/76,https://github.com/bobbydurrett,2,https://github.com/NetHack/NetHack/pull/76#issuecomment-355434225,"Line 95 in mail.c introduced a bug by allocating one byte less than was needed.
The call to alloc was supposed to get enough bytes to hold a string but it
used strlen() to get the number of bytes. We should have allocated strlen()+1.
This didn't cause an error on Linux on x86-64 but it showed up on the
Raspberry Pi platform.","This is a fix to commit 1c8f312. I fixed an issue with memory and email in the pull request for that commit but I allocated one byte too few. For some reason this did not cause a problem on the Linux x86-64 bit platform that I tested on but it causes a crash when you use the -D flag on Linux on the Raspberry Pi. I'm not sure how many people use that platform but it probably is good to fix this so we don't have some subtle memory error on other Linux platforms. The problem is that I am allocating one byte less than I need and then overwriting some other byte in memory when I copy a string into the allocated buffer. My previous pull request that this fixes was called ""Fix crash with MAIL env variable""",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,76,2017-12-26T04:17:57Z,2018-02-21T02:54:31Z,2019-05-23T22:03:16Z,CLOSED,False,1,1,1,https://github.com/bobbydurrett,Fix memory error by adding byte for null string terminator.,1,[],https://github.com/NetHack/NetHack/pull/76,https://github.com/bobbydurrett,3,https://github.com/NetHack/NetHack/pull/76#issuecomment-367197410,"Line 95 in mail.c introduced a bug by allocating one byte less than was needed.
The call to alloc was supposed to get enough bytes to hold a string but it
used strlen() to get the number of bytes. We should have allocated strlen()+1.
This didn't cause an error on Linux on x86-64 but it showed up on the
Raspberry Pi platform.",Great! I will close the pull request.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,76,2017-12-26T04:17:57Z,2018-02-21T02:54:31Z,2019-05-23T22:03:16Z,CLOSED,False,1,1,1,https://github.com/bobbydurrett,Fix memory error by adding byte for null string terminator.,1,[],https://github.com/NetHack/NetHack/pull/76,https://github.com/bobbydurrett,4,https://github.com/NetHack/NetHack/pull/76#issuecomment-367197497,"Line 95 in mail.c introduced a bug by allocating one byte less than was needed.
The call to alloc was supposed to get enough bytes to hold a string but it
used strlen() to get the number of bytes. We should have allocated strlen()+1.
This didn't cause an error on Linux on x86-64 but it showed up on the
Raspberry Pi platform.",Dev team resolved another way.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,76,2017-12-26T04:17:57Z,2018-02-21T02:54:31Z,2019-05-23T22:03:16Z,CLOSED,False,1,1,1,https://github.com/bobbydurrett,Fix memory error by adding byte for null string terminator.,1,[],https://github.com/NetHack/NetHack/pull/76,https://github.com/bobbydurrett,5,https://github.com/NetHack/NetHack/pull/76#issuecomment-367197665,"Line 95 in mail.c introduced a bug by allocating one byte less than was needed.
The call to alloc was supposed to get enough bytes to hold a string but it
used strlen() to get the number of bytes. We should have allocated strlen()+1.
This didn't cause an error on Linux on x86-64 but it showed up on the
Raspberry Pi platform.","Great. Glad that it got fixed.

Bobby

From: David Cohrs [mailto:notifications@github.com]
Sent: Tuesday, February 20, 2018 7:22 PM
To: NetHack/NetHack <NetHack@noreply.github.com>
Cc: Bobby Durrett <bobby@bobbydurrettdba.com>; Author <author@noreply.github.com>
Subject: Re: [NetHack/NetHack] Fix memory error by adding byte for null string terminator. (#76)


@davecohrs commented on this pull request.

This has been addressed in a different way as part of commit 859ef82<859ef82>.

—
You are receiving this because you authored the thread.
Reply to this email directly, view it on GitHub<#76 (review)>, or mute the thread<https://github.com/notifications/unsubscribe-auth/ALkRTsckNQ4JWUcAO_8gnfg8aVuXvRfGks5tW33igaJpZM4RMfWw>.

This email message and any attachments are for the sole use of the intended recipient(s) and may contain information that is confidential or proprietary to US Foods. If you have received this message in error, please notify the sender by reply, and delete all copies of this message and any attachments.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,77,2018-01-07T21:38:41Z,2021-01-07T20:42:07Z,2021-01-07T20:42:08Z,CLOSED,False,1137,863,20,https://github.com/FredrIQ,Refactor getobj and add the ability to handle floor items/features to it,18,[],https://github.com/NetHack/NetHack/pull/77,https://github.com/FredrIQ,1,https://github.com/NetHack/NetHack/pull/77,"This pull request refactors getobj as to allow the selection of objects, or dungeon traps/features, from the floor. This is done by supplying a "","" reply when it asks for a letter. Doing so will pick the floor item/feature (if only one choice is valid) or give a list of items + feature, if there are multiple choices. '.' can also be selected, but it is merely an alias (it doesn't display as a valid option or similar), to allow for SLASH'EM muscle memory. If menulist is set to anything other than FULL, getobj prompts will work as they did earlier and prompt individually for each object or feature on the floor.
This code is not based on code from either SLASH'EM or NetHack4, but was created from scratch for 3.6.1. It works by, instead of having a list of object classes as a parameter for getobj, and having getobj special case basically every single case, use a callback for figuring out whether or not a choice is valid. The callback is an int, takes a normal object, NULL (for bare hands check) or &zeroobj (for dungeon feature/trap, if allow_floor is enabled), and returns 2 (valid option, and encouraged by being listed), 1 (possible choice, but not listed among choices or '?'), 0 (invalid).
This allows one to do away with all the special cases that surrounded getobj, meaning it only has the actual code for doing the logic in it.
Screenshots: http://home.fiq.se/nh/getobj.html","This pull request refactors getobj as to allow the selection of objects, or dungeon traps/features, from the floor. This is done by supplying a "","" reply when it asks for a letter. Doing so will pick the floor item/feature (if only one choice is valid) or give a list of items + feature, if there are multiple choices. '.' can also be selected, but it is merely an alias (it doesn't display as a valid option or similar), to allow for SLASH'EM muscle memory. If menulist is set to anything other than FULL, getobj prompts will work as they did earlier and prompt individually for each object or feature on the floor.
This code is not based on code from either SLASH'EM or NetHack4, but was created from scratch for 3.6.1. It works by, instead of having a list of object classes as a parameter for getobj, and having getobj special case basically every single case, use a callback for figuring out whether or not a choice is valid. The callback is an int, takes a normal object, NULL (for bare hands check) or &zeroobj (for dungeon feature/trap, if allow_floor is enabled), and returns 2 (valid option, and encouraged by being listed), 1 (possible choice, but not listed among choices or '?'), 0 (invalid).
This allows one to do away with all the special cases that surrounded getobj, meaning it only has the actual code for doing the logic in it.
Screenshots: http://home.fiq.se/nh/getobj.html",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,77,2018-01-07T21:38:41Z,2021-01-07T20:42:07Z,2021-01-07T20:42:08Z,CLOSED,False,1137,863,20,https://github.com/FredrIQ,Refactor getobj and add the ability to handle floor items/features to it,18,[],https://github.com/NetHack/NetHack/pull/77,https://github.com/FredrIQ,2,https://github.com/NetHack/NetHack/pull/77#issuecomment-756371845,"This pull request refactors getobj as to allow the selection of objects, or dungeon traps/features, from the floor. This is done by supplying a "","" reply when it asks for a letter. Doing so will pick the floor item/feature (if only one choice is valid) or give a list of items + feature, if there are multiple choices. '.' can also be selected, but it is merely an alias (it doesn't display as a valid option or similar), to allow for SLASH'EM muscle memory. If menulist is set to anything other than FULL, getobj prompts will work as they did earlier and prompt individually for each object or feature on the floor.
This code is not based on code from either SLASH'EM or NetHack4, but was created from scratch for 3.6.1. It works by, instead of having a list of object classes as a parameter for getobj, and having getobj special case basically every single case, use a callback for figuring out whether or not a choice is valid. The callback is an int, takes a normal object, NULL (for bare hands check) or &zeroobj (for dungeon feature/trap, if allow_floor is enabled), and returns 2 (valid option, and encouraged by being listed), 1 (possible choice, but not listed among choices or '?'), 0 (invalid).
This allows one to do away with all the special cases that surrounded getobj, meaning it only has the actual code for doing the logic in it.
Screenshots: http://home.fiq.se/nh/getobj.html",0b63859 makes this PR obsolete.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,79,2018-01-24T20:46:42Z,2019-05-21T20:57:14Z,2019-05-21T20:57:14Z,CLOSED,False,4,0,1,https://github.com/spixi,Add two famous engravings,1,[],https://github.com/NetHack/NetHack/pull/79,https://github.com/spixi,1,https://github.com/NetHack/NetHack/pull/79,I think they perfectly fit here.,I think they perfectly fit here.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,79,2018-01-24T20:46:42Z,2019-05-21T20:57:14Z,2019-05-21T20:57:14Z,CLOSED,False,4,0,1,https://github.com/spixi,Add two famous engravings,1,[],https://github.com/NetHack/NetHack/pull/79,https://github.com/FredrIQ,2,https://github.com/NetHack/NetHack/pull/79#issuecomment-360274222,I think they perfectly fit here.,The cake is a lie is from the original Portal.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,79,2018-01-24T20:46:42Z,2019-05-21T20:57:14Z,2019-05-21T20:57:14Z,CLOSED,False,4,0,1,https://github.com/spixi,Add two famous engravings,1,[],https://github.com/NetHack/NetHack/pull/79,https://github.com/paulwinner,3,https://github.com/NetHack/NetHack/pull/79#issuecomment-360278958,I think they perfectly fit here.,"Shows my age, I thought it was from Alice In Wonderland.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,79,2018-01-24T20:46:42Z,2019-05-21T20:57:14Z,2019-05-21T20:57:14Z,CLOSED,False,4,0,1,https://github.com/spixi,Add two famous engravings,1,[],https://github.com/NetHack/NetHack/pull/79,https://github.com/spixi,4,https://github.com/NetHack/NetHack/pull/79#issuecomment-360289457,I think they perfectly fit here.,"The cake is a lie is from the original Portal.

Sorry, I fixed this.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,82,2018-03-13T01:37:32Z,2018-03-13T01:38:18Z,2018-03-13T01:39:02Z,CLOSED,False,2,1,1,https://github.com/trevortomesh,There should be more stuff about ducks.,1,[],https://github.com/NetHack/NetHack/pull/82,https://github.com/trevortomesh,1,https://github.com/NetHack/NetHack/pull/82,I added a bit about ducks because there weren't ducks. DUCKS.,I added a bit about ducks because there weren't ducks. DUCKS.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,82,2018-03-13T01:37:32Z,2018-03-13T01:38:18Z,2018-03-13T01:39:02Z,CLOSED,False,2,1,1,https://github.com/trevortomesh,There should be more stuff about ducks.,1,[],https://github.com/NetHack/NetHack/pull/82,https://github.com/trevortomesh,2,https://github.com/NetHack/NetHack/pull/82#issuecomment-372517388,I added a bit about ducks because there weren't ducks. DUCKS.,This was stupid... sorry.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,82,2018-03-13T01:37:32Z,2018-03-13T01:38:18Z,2018-03-13T01:39:02Z,CLOSED,False,2,1,1,https://github.com/trevortomesh,There should be more stuff about ducks.,1,[],https://github.com/NetHack/NetHack/pull/82,https://github.com/NESHomebrew,3,https://github.com/NetHack/NetHack/pull/82#issuecomment-372517468,I added a bit about ducks because there weren't ducks. DUCKS.,I agree.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,82,2018-03-13T01:37:32Z,2018-03-13T01:38:18Z,2018-03-13T01:39:02Z,CLOSED,False,2,1,1,https://github.com/trevortomesh,There should be more stuff about ducks.,1,[],https://github.com/NetHack/NetHack/pull/82,https://github.com/NESHomebrew,4,https://github.com/NetHack/NetHack/pull/82#issuecomment-372517500,I added a bit about ducks because there weren't ducks. DUCKS.,About more ducks.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,83,2018-03-15T18:13:48Z,2019-05-21T04:00:32Z,2019-05-21T04:00:32Z,CLOSED,False,39,5,2,https://github.com/ostrosablin,Allow user to add to the existing annotation,1,[],https://github.com/NetHack/NetHack/pull/83,https://github.com/ostrosablin,1,https://github.com/NetHack/NetHack/pull/83,"Often, it's more desirable to add to the current annotation, rather than replacing it completely. If you have some new piece of information you don't want to forget, naturally, you will probably add it to annotation.
If you add piece of information A into annotation, and then see B, you'll want to add it into annotation.
As it stands, you can only completely replace annotation, causing you to re-type both A and B. If you have even more information in annotation, it's even more tedious to maintain it.
This patch causes annotations to work similarly to engravings. If there's no annotation for current DLVL, annotation will be added as usual. But if annotation is already present, invoking #annotate will ask, whether you want to add to the existing annotation or replace it. Choosing to replace will work same way as it used to work, existing annotation is removed and new annotation is placed in it's place. If you choose to add to the current annotation, then resulting annotation will be a concatenation of existing annotation and newly typed piece of text (pretty much same way as it works for engravings).
Signed-off-by: Vitaly Ostrosablin tmp6154@yandex.ru","Often, it's more desirable to add to the current annotation, rather than replacing it completely. If you have some new piece of information you don't want to forget, naturally, you will probably add it to annotation.
If you add piece of information A into annotation, and then see B, you'll want to add it into annotation.
As it stands, you can only completely replace annotation, causing you to re-type both A and B. If you have even more information in annotation, it's even more tedious to maintain it.
This patch causes annotations to work similarly to engravings. If there's no annotation for current DLVL, annotation will be added as usual. But if annotation is already present, invoking #annotate will ask, whether you want to add to the existing annotation or replace it. Choosing to replace will work same way as it used to work, existing annotation is removed and new annotation is placed in it's place. If you choose to add to the current annotation, then resulting annotation will be a concatenation of existing annotation and newly typed piece of text (pretty much same way as it works for engravings).
Signed-off-by: Vitaly Ostrosablin tmp6154@yandex.ru",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,83,2018-03-15T18:13:48Z,2019-05-21T04:00:32Z,2019-05-21T04:00:32Z,CLOSED,False,39,5,2,https://github.com/ostrosablin,Allow user to add to the existing annotation,1,[],https://github.com/NetHack/NetHack/pull/83,https://github.com/ostrosablin,2,https://github.com/NetHack/NetHack/pull/83#issuecomment-375188158,"Often, it's more desirable to add to the current annotation, rather than replacing it completely. If you have some new piece of information you don't want to forget, naturally, you will probably add it to annotation.
If you add piece of information A into annotation, and then see B, you'll want to add it into annotation.
As it stands, you can only completely replace annotation, causing you to re-type both A and B. If you have even more information in annotation, it's even more tedious to maintain it.
This patch causes annotations to work similarly to engravings. If there's no annotation for current DLVL, annotation will be added as usual. But if annotation is already present, invoking #annotate will ask, whether you want to add to the existing annotation or replace it. Choosing to replace will work same way as it used to work, existing annotation is removed and new annotation is placed in it's place. If you choose to add to the current annotation, then resulting annotation will be a concatenation of existing annotation and newly typed piece of text (pretty much same way as it works for engravings).
Signed-off-by: Vitaly Ostrosablin tmp6154@yandex.ru",Resolved merge conflict,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,83,2018-03-15T18:13:48Z,2019-05-21T04:00:32Z,2019-05-21T04:00:32Z,CLOSED,False,39,5,2,https://github.com/ostrosablin,Allow user to add to the existing annotation,1,[],https://github.com/NetHack/NetHack/pull/83,https://github.com/paxed,3,https://github.com/NetHack/NetHack/pull/83#issuecomment-376488841,"Often, it's more desirable to add to the current annotation, rather than replacing it completely. If you have some new piece of information you don't want to forget, naturally, you will probably add it to annotation.
If you add piece of information A into annotation, and then see B, you'll want to add it into annotation.
As it stands, you can only completely replace annotation, causing you to re-type both A and B. If you have even more information in annotation, it's even more tedious to maintain it.
This patch causes annotations to work similarly to engravings. If there's no annotation for current DLVL, annotation will be added as usual. But if annotation is already present, invoking #annotate will ask, whether you want to add to the existing annotation or replace it. Choosing to replace will work same way as it used to work, existing annotation is removed and new annotation is placed in it's place. If you choose to add to the current annotation, then resulting annotation will be a concatenation of existing annotation and newly typed piece of text (pretty much same way as it works for engravings).
Signed-off-by: Vitaly Ostrosablin tmp6154@yandex.ru",See commit 94ad751,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,83,2018-03-15T18:13:48Z,2019-05-21T04:00:32Z,2019-05-21T04:00:32Z,CLOSED,False,39,5,2,https://github.com/ostrosablin,Allow user to add to the existing annotation,1,[],https://github.com/NetHack/NetHack/pull/83,https://github.com/ostrosablin,4,https://github.com/NetHack/NetHack/pull/83#issuecomment-376640950,"Often, it's more desirable to add to the current annotation, rather than replacing it completely. If you have some new piece of information you don't want to forget, naturally, you will probably add it to annotation.
If you add piece of information A into annotation, and then see B, you'll want to add it into annotation.
As it stands, you can only completely replace annotation, causing you to re-type both A and B. If you have even more information in annotation, it's even more tedious to maintain it.
This patch causes annotations to work similarly to engravings. If there's no annotation for current DLVL, annotation will be added as usual. But if annotation is already present, invoking #annotate will ask, whether you want to add to the existing annotation or replace it. Choosing to replace will work same way as it used to work, existing annotation is removed and new annotation is placed in it's place. If you choose to add to the current annotation, then resulting annotation will be a concatenation of existing annotation and newly typed piece of text (pretty much same way as it works for engravings).
Signed-off-by: Vitaly Ostrosablin tmp6154@yandex.ru","Looks good! A great solution (perhaps, even better, than mine, because you can edit line completely).
The only concern - with this being compile-time option, disabled by default - would it be enabled on NAO?",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,84,2018-04-06T00:59:03Z,2021-06-05T16:28:13Z,2021-06-05T16:28:13Z,CLOSED,False,779,88,10,https://github.com/copperwater,Documentation for the level generation code,12,[],https://github.com/NetHack/NetHack/pull/84,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/84,"The level generation code is pretty poorly documented and a lot of functions lack any comments. Many of the important algorithms that shape the dungeon don't come with any explanation, and occasionally they do something unexpected or have some questionable code.
Since I'm planning on doing some work on level generation in the future and would otherwise be lost trying to figure out what everything does, I decided to go through the level generation code and add this documentation as a reference for me and anyone else wanting to work with it.
This pull request should consist of comments only; I may possibly have changed some indentation or added a brace somewhere, I can't remember, but none of the actual code is touched. (Though reading through it really makes one want to do several refactors.)
I don't consider this entirely complete yet; I haven't really touched sp_lev.c much, and I think there are some functions in mkmaze.c that I missed.","The level generation code is pretty poorly documented and a lot of functions lack any comments. Many of the important algorithms that shape the dungeon don't come with any explanation, and occasionally they do something unexpected or have some questionable code.
Since I'm planning on doing some work on level generation in the future and would otherwise be lost trying to figure out what everything does, I decided to go through the level generation code and add this documentation as a reference for me and anyone else wanting to work with it.
This pull request should consist of comments only; I may possibly have changed some indentation or added a brace somewhere, I can't remember, but none of the actual code is touched. (Though reading through it really makes one want to do several refactors.)
I don't consider this entirely complete yet; I haven't really touched sp_lev.c much, and I think there are some functions in mkmaze.c that I missed.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,85,2018-04-26T17:31:53Z,2018-04-28T16:44:16Z,2018-11-22T14:47:21Z,CLOSED,False,10,6,1,https://github.com/barthouse,Fix bug in really_close() which can cause standard input to be closed prematurely,1,[],https://github.com/NetHack/NetHack/pull/85,https://github.com/barthouse,1,https://github.com/NetHack/NetHack/pull/85,"Fix bug where user is unable to confirm exit.  If the user chooses to quit when prompted for player name to choose, then they will find that they can not confirm the exit by hitting the return key.  This is due to a bug in really_close() which mistakenly closes the file descriptor zero which is the input stream.  really_close() needs to test lftrack.init before it attempts to access and modify lftrack state.","Fix bug where user is unable to confirm exit.  If the user chooses to quit when prompted for player name to choose, then they will find that they can not confirm the exit by hitting the return key.  This is due to a bug in really_close() which mistakenly closes the file descriptor zero which is the input stream.  really_close() needs to test lftrack.init before it attempts to access and modify lftrack state.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,85,2018-04-26T17:31:53Z,2018-04-28T16:44:16Z,2018-11-22T14:47:21Z,CLOSED,False,10,6,1,https://github.com/barthouse,Fix bug in really_close() which can cause standard input to be closed prematurely,1,[],https://github.com/NetHack/NetHack/pull/85,https://github.com/barthouse,2,https://github.com/NetHack/NetHack/pull/85#issuecomment-385189552,"Fix bug where user is unable to confirm exit.  If the user chooses to quit when prompted for player name to choose, then they will find that they can not confirm the exit by hitting the return key.  This is due to a bug in really_close() which mistakenly closes the file descriptor zero which is the input stream.  really_close() needs to test lftrack.init before it attempts to access and modify lftrack state.",This change was taken and made 3.6.1.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,86,2018-04-27T02:43:06Z,2018-04-28T16:43:51Z,2018-11-22T14:46:57Z,CLOSED,False,10,21,2,https://github.com/barthouse,Changed build to default to using latest SDK available on build machine,1,[],https://github.com/NetHack/NetHack/pull/86,https://github.com/barthouse,1,https://github.com/NetHack/NetHack/pull/86,Modified build configuration to use latest SDK available by default.  This change will eliminate the need for us to hard code an SDK version into our configuration file and will eliminate the need for developers to set the SDK version when they do not have the matching SDK version installed.  Updated the Install.nt file removing the mention of having to set the SDK version.,Modified build configuration to use latest SDK available by default.  This change will eliminate the need for us to hard code an SDK version into our configuration file and will eliminate the need for developers to set the SDK version when they do not have the matching SDK version installed.  Updated the Install.nt file removing the mention of having to set the SDK version.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,86,2018-04-27T02:43:06Z,2018-04-28T16:43:51Z,2018-11-22T14:46:57Z,CLOSED,False,10,21,2,https://github.com/barthouse,Changed build to default to using latest SDK available on build machine,1,[],https://github.com/NetHack/NetHack/pull/86,https://github.com/barthouse,2,https://github.com/NetHack/NetHack/pull/86#issuecomment-385189522,Modified build configuration to use latest SDK available by default.  This change will eliminate the need for us to hard code an SDK version into our configuration file and will eliminate the need for developers to set the SDK version when they do not have the matching SDK version installed.  Updated the Install.nt file removing the mention of having to set the SDK version.,This commit was taken and made 3.6.1.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,87,2018-04-27T16:20:09Z,2018-04-29T18:43:30Z,2018-11-22T14:48:52Z,CLOSED,False,1,1,1,https://github.com/barthouse,Specify both width and height when creating font for width testing.,1,[],https://github.com/NetHack/NetHack/pull/87,https://github.com/barthouse,1,https://github.com/NetHack/NetHack/pull/87,"When we are creating the console font for testing character widths, we were not specifying width.  Because of this, the created font's average width might be larger then what we expect and we might falsely detect that the font was inappropriate for playing Nethack.  Fix provides the width that we are expecting when creating the font.","When we are creating the console font for testing character widths, we were not specifying width.  Because of this, the created font's average width might be larger then what we expect and we might falsely detect that the font was inappropriate for playing Nethack.  Fix provides the width that we are expecting when creating the font.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,87,2018-04-27T16:20:09Z,2018-04-29T18:43:30Z,2018-11-22T14:48:52Z,CLOSED,False,1,1,1,https://github.com/barthouse,Specify both width and height when creating font for width testing.,1,[],https://github.com/NetHack/NetHack/pull/87,https://github.com/nhmall,2,https://github.com/NetHack/NetHack/pull/87#issuecomment-385272186,"When we are creating the console font for testing character widths, we were not specifying width.  Because of this, the created font's average width might be larger then what we expect and we might falsely detect that the font was inappropriate for playing Nethack.  Fix provides the width that we are expecting when creating the font.","This was fixed upstream in
331abfe",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,90,2018-05-03T11:17:52Z,2020-08-20T14:58:55Z,2020-08-21T06:44:49Z,CLOSED,False,4,4,2,https://github.com/lotheac,fix nonverbose CC on bsd make,1,[],https://github.com/NetHack/NetHack/pull/90,https://github.com/lotheac,1,https://github.com/NetHack/NetHack/pull/90,"Hi, attempting to build 3.6.1 on OpenBSD results in:
/tmp/NetHack/src 1 % CONFIG=simple-config GAMEDIR=lib/nethackdir-3.6.1 FILESDIR=/usr/ports/games/nethack/3.6/files make 
touch ../src/config.h-t
[CC] monst.c
[CC] objects.c
[CC] makedefs.c
Using $< in a non-suffix rule context is a GNUmake idiom (Makefile:268)
*** Error 2 in /tmp/NetHack/src (Makefile:643 '../util/makedefs')

This was introduced in 1ff4dfe. The simplest fix is to use $@ instead (printing ""foo.o"" instead of ""foo.c"").","Hi, attempting to build 3.6.1 on OpenBSD results in:
/tmp/NetHack/src 1 % CONFIG=simple-config GAMEDIR=lib/nethackdir-3.6.1 FILESDIR=/usr/ports/games/nethack/3.6/files make 
touch ../src/config.h-t
[CC] monst.c
[CC] objects.c
[CC] makedefs.c
Using $< in a non-suffix rule context is a GNUmake idiom (Makefile:268)
*** Error 2 in /tmp/NetHack/src (Makefile:643 '../util/makedefs')

This was introduced in 1ff4dfe. The simplest fix is to use $@ instead (printing ""foo.o"" instead of ""foo.c"").",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,90,2018-05-03T11:17:52Z,2020-08-20T14:58:55Z,2020-08-21T06:44:49Z,CLOSED,False,4,4,2,https://github.com/lotheac,fix nonverbose CC on bsd make,1,[],https://github.com/NetHack/NetHack/pull/90,https://github.com/nhmall,2,https://github.com/NetHack/NetHack/pull/90#issuecomment-677717961,"Hi, attempting to build 3.6.1 on OpenBSD results in:
/tmp/NetHack/src 1 % CONFIG=simple-config GAMEDIR=lib/nethackdir-3.6.1 FILESDIR=/usr/ports/games/nethack/3.6/files make 
touch ../src/config.h-t
[CC] monst.c
[CC] objects.c
[CC] makedefs.c
Using $< in a non-suffix rule context is a GNUmake idiom (Makefile:268)
*** Error 2 in /tmp/NetHack/src (Makefile:643 '../util/makedefs')

This was introduced in 1ff4dfe. The simplest fix is to use $@ instead (printing ""foo.o"" instead of ""foo.c"").","In the current NetHack-3.7 work-in-progress Makefile.src, the problematic section only occurs if the build sets QUIETCC=1. As long as you don't do that on OpenBSD, I don't think there's an issue.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,90,2018-05-03T11:17:52Z,2020-08-20T14:58:55Z,2020-08-21T06:44:49Z,CLOSED,False,4,4,2,https://github.com/lotheac,fix nonverbose CC on bsd make,1,[],https://github.com/NetHack/NetHack/pull/90,https://github.com/lotheac,3,https://github.com/NetHack/NetHack/pull/90#issuecomment-678073242,"Hi, attempting to build 3.6.1 on OpenBSD results in:
/tmp/NetHack/src 1 % CONFIG=simple-config GAMEDIR=lib/nethackdir-3.6.1 FILESDIR=/usr/ports/games/nethack/3.6/files make 
touch ../src/config.h-t
[CC] monst.c
[CC] objects.c
[CC] makedefs.c
Using $< in a non-suffix rule context is a GNUmake idiom (Makefile:268)
*** Error 2 in /tmp/NetHack/src (Makefile:643 '../util/makedefs')

This was introduced in 1ff4dfe. The simplest fix is to use $@ instead (printing ""foo.o"" instead of ""foo.c"").","Thanks, you are correct: the current master branch builds fine on OpenBSD.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,91,2018-05-06T08:42:35Z,2018-05-06T22:05:30Z,2018-11-22T14:45:35Z,CLOSED,False,313,82,1,https://github.com/barthouse,The following change addresses the recent lag issues with the Win32 console port,4,[],https://github.com/NetHack/NetHack/pull/91,https://github.com/barthouse,1,https://github.com/NetHack/NetHack/pull/91,,,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,91,2018-05-06T08:42:35Z,2018-05-06T22:05:30Z,2018-11-22T14:45:35Z,CLOSED,False,313,82,1,https://github.com/barthouse,The following change addresses the recent lag issues with the Win32 console port,4,[],https://github.com/NetHack/NetHack/pull/91,https://github.com/barthouse,2,https://github.com/NetHack/NetHack/pull/91#issuecomment-386920404,,Creating new pull request to reflect this work is done.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,93,2018-05-06T22:11:58Z,2018-05-19T00:42:22Z,2018-11-22T14:45:26Z,CLOSED,False,331,82,1,https://github.com/barthouse,Implemented a fix to the lag problems that are happening with the Win32 console port,3,[],https://github.com/NetHack/NetHack/pull/93,https://github.com/barthouse,1,https://github.com/NetHack/NetHack/pull/93,The fix implements a console back buffer which significantly reduces the number of calls made to WriteConsoleOutputXXX and eliminates the lag users have been experiencing.,The fix implements a console back buffer which significantly reduces the number of calls made to WriteConsoleOutputXXX and eliminates the lag users have been experiencing.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,93,2018-05-06T22:11:58Z,2018-05-19T00:42:22Z,2018-11-22T14:45:26Z,CLOSED,False,331,82,1,https://github.com/barthouse,Implemented a fix to the lag problems that are happening with the Win32 console port,3,[],https://github.com/NetHack/NetHack/pull/93,https://github.com/barthouse,2,https://github.com/NetHack/NetHack/pull/93#issuecomment-390365528,The fix implements a console back buffer which significantly reduces the number of calls made to WriteConsoleOutputXXX and eliminates the lag users have been experiencing.,This work has been incorporated by the windows port dev team.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,95,2018-05-07T16:09:24Z,2018-05-19T00:41:29Z,2018-11-22T14:46:04Z,CLOSED,False,55,45,4,https://github.com/barthouse,Introduced nhassert() macro to be used for assertions,1,[],https://github.com/NetHack/NetHack/pull/95,https://github.com/barthouse,1,https://github.com/NetHack/NetHack/pull/95,"Each port can decide to implement the macro as they see fit.  In the windows port, the macro is implemented for debug builds only.  When an assertion fails we generate a debug break point, when the debugger is present, and call error() to report the assertion failure.
Changes also include cleanup to mhdlg.c to use new macro and clean up some previously checked in debug code.","Each port can decide to implement the macro as they see fit.  In the windows port, the macro is implemented for debug builds only.  When an assertion fails we generate a debug break point, when the debugger is present, and call error() to report the assertion failure.
Changes also include cleanup to mhdlg.c to use new macro and clean up some previously checked in debug code.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,95,2018-05-07T16:09:24Z,2018-05-19T00:41:29Z,2018-11-22T14:46:04Z,CLOSED,False,55,45,4,https://github.com/barthouse,Introduced nhassert() macro to be used for assertions,1,[],https://github.com/NetHack/NetHack/pull/95,https://github.com/barthouse,2,https://github.com/NetHack/NetHack/pull/95#issuecomment-390365450,"Each port can decide to implement the macro as they see fit.  In the windows port, the macro is implemented for debug builds only.  When an assertion fails we generate a debug break point, when the debugger is present, and call error() to report the assertion failure.
Changes also include cleanup to mhdlg.c to use new macro and clean up some previously checked in debug code.",This work has been incorporated by the windows port dev team.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,96,2018-05-08T01:41:43Z,2018-05-19T00:40:47Z,2018-05-19T00:54:45Z,CLOSED,False,446,244,8,https://github.com/barthouse,General cleanup for nttty.c,3,[],https://github.com/NetHack/NetHack/pull/96,https://github.com/barthouse,1,https://github.com/NetHack/NetHack/pull/96,,,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,96,2018-05-08T01:41:43Z,2018-05-19T00:40:47Z,2018-05-19T00:54:45Z,CLOSED,False,446,244,8,https://github.com/barthouse,General cleanup for nttty.c,3,[],https://github.com/NetHack/NetHack/pull/96,https://github.com/barthouse,2,https://github.com/NetHack/NetHack/pull/96#issuecomment-390365400,,This work has been incorporated by the windows port dev team.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,97,2018-05-08T14:26:40Z,2018-05-10T04:37:24Z,2018-11-22T14:48:15Z,MERGED,True,16,8,1,https://github.com/barthouse,Fix for bug H7132 - conflict between extra choice accelerator and menu accelerator,1,[],https://github.com/NetHack/NetHack/pull/97,https://github.com/barthouse,1,https://github.com/NetHack/NetHack/pull/97,"In nethackw, there can be conflicts between menu accelerators and an extra
choice accelerator.  For example, when engraving the using fingers options
conflicts with the unselect all menu accelerator.  The extra choice
accelerator should take precedence.","In nethackw, there can be conflicts between menu accelerators and an extra
choice accelerator.  For example, when engraving the using fingers options
conflicts with the unselect all menu accelerator.  The extra choice
accelerator should take precedence.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,97,2018-05-08T14:26:40Z,2018-05-10T04:37:24Z,2018-11-22T14:48:15Z,MERGED,True,16,8,1,https://github.com/barthouse,Fix for bug H7132 - conflict between extra choice accelerator and menu accelerator,1,[],https://github.com/NetHack/NetHack/pull/97,https://github.com/nhmall,2,https://github.com/NetHack/NetHack/pull/97#issuecomment-387891196,"In nethackw, there can be conflicts between menu accelerators and an extra
choice accelerator.  For example, when engraving the using fingers options
conflicts with the unselect all menu accelerator.  The extra choice
accelerator should take precedence.","Merging upstream, thanks.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,98,2018-05-10T01:49:41Z,2018-11-22T14:46:36Z,2018-11-22T14:46:36Z,CLOSED,False,8,2,1,https://github.com/barthouse,Fix number_pad bug,1,[],https://github.com/NetHack/NetHack/pull/98,https://github.com/barthouse,1,https://github.com/NetHack/NetHack/pull/98,"When we initialize command state, we initialize the state with the assumption that the number pad is on but we had not set Cmd.num_pad to TRUE.","When we initialize command state, we initialize the state with the assumption that the number pad is on but we had not set Cmd.num_pad to TRUE.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,102,2018-05-21T10:19:35Z,2018-07-11T04:37:22Z,2018-07-11T04:37:22Z,CLOSED,False,10,7,3,https://github.com/rockola,Popeye sustain ability,2,[],https://github.com/NetHack/NetHack/pull/102,https://github.com/rockola,1,https://github.com/NetHack/NetHack/pull/102,"If the player is wearing a ring of sustain ability, eating spinach will not make strength go up. Does the player then feel like Popeye? I would think not. This patch will change the message to ""This makes you feel like Olive Oyl!"" (for female characters) or ""This makes you feel like Bluto!"" (for male characters).","If the player is wearing a ring of sustain ability, eating spinach will not make strength go up. Does the player then feel like Popeye? I would think not. This patch will change the message to ""This makes you feel like Olive Oyl!"" (for female characters) or ""This makes you feel like Bluto!"" (for male characters).",True,{'LAUGH': ['https://github.com/lsma']}
NetHack/NetHack,https://github.com/NetHack/NetHack,103,2018-05-24T01:52:29Z,2018-11-14T13:38:59Z,2019-08-15T02:17:01Z,CLOSED,False,24,29,2,https://github.com/chasonr,Changes to build for  MS-DOS,2,[],https://github.com/NetHack/NetHack/pull/103,https://github.com/chasonr,1,https://github.com/NetHack/NetHack/pull/103,"I build the MS-DOS version using FreeDOS in a VirtualBox VM, because DJGPP is painfully slow on DosBox. The changes presented here work around some FreeDOS quirks when running setup.bat.
Also, getreturn_enabled in sys/share/pcsys.c needs to be Win32-only, or the compile will fail.","I build the MS-DOS version using FreeDOS in a VirtualBox VM, because DJGPP is painfully slow on DosBox. The changes presented here work around some FreeDOS quirks when running setup.bat.
Also, getreturn_enabled in sys/share/pcsys.c needs to be Win32-only, or the compile will fail.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,103,2018-05-24T01:52:29Z,2018-11-14T13:38:59Z,2019-08-15T02:17:01Z,CLOSED,False,24,29,2,https://github.com/chasonr,Changes to build for  MS-DOS,2,[],https://github.com/NetHack/NetHack/pull/103,https://github.com/chasonr,2,https://github.com/NetHack/NetHack/pull/103#issuecomment-391562551,"I build the MS-DOS version using FreeDOS in a VirtualBox VM, because DJGPP is painfully slow on DosBox. The changes presented here work around some FreeDOS quirks when running setup.bat.
Also, getreturn_enabled in sys/share/pcsys.c needs to be Win32-only, or the compile will fail.","A further point that my commit  comment did not address: the MS-DOS version uses posixregex.c, which has a non-8.3 name, and setup.bat needs to deal with that one also.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,103,2018-05-24T01:52:29Z,2018-11-14T13:38:59Z,2019-08-15T02:17:01Z,CLOSED,False,24,29,2,https://github.com/chasonr,Changes to build for  MS-DOS,2,[],https://github.com/NetHack/NetHack/pull/103,https://github.com/nhmall,3,https://github.com/NetHack/NetHack/pull/103#issuecomment-391670407,"I build the MS-DOS version using FreeDOS in a VirtualBox VM, because DJGPP is painfully slow on DosBox. The changes presented here work around some FreeDOS quirks when running setup.bat.
Also, getreturn_enabled in sys/share/pcsys.c needs to be Win32-only, or the compile will fail.",NetHack commit 2693634 was meant to deal with the posixregex.c bit,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,103,2018-05-24T01:52:29Z,2018-11-14T13:38:59Z,2019-08-15T02:17:01Z,CLOSED,False,24,29,2,https://github.com/chasonr,Changes to build for  MS-DOS,2,[],https://github.com/NetHack/NetHack/pull/103,https://github.com/nhmall,4,https://github.com/NetHack/NetHack/pull/103#issuecomment-438664562,"I build the MS-DOS version using FreeDOS in a VirtualBox VM, because DJGPP is painfully slow on DosBox. The changes presented here work around some FreeDOS quirks when running setup.bat.
Also, getreturn_enabled in sys/share/pcsys.c needs to be Win32-only, or the compile will fail.",I think all of these were incorporated.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,104,2018-05-24T04:50:11Z,2018-09-24T17:14:14Z,2020-02-01T15:34:34Z,CLOSED,False,618,24,15,https://github.com/chasonr,"Build with Qt 5 on Linux, Windows and Mac OS X",13,[],https://github.com/NetHack/NetHack/pull/104,https://github.com/chasonr,1,https://github.com/NetHack/NetHack/pull/104,"This pull request provides needed changes to compile against Qt5 on Linux (my distribution is Fedora 28), Mac OS X and Win32.
For Mac, use the Qt 5 distribution from Homebrew.
For Win32, use the official Qt 5 installer. This comes with a MinGW distribution; the Makefile.GCC is tested against that distribution.","This pull request provides needed changes to compile against Qt5 on Linux (my distribution is Fedora 28), Mac OS X and Win32.
For Mac, use the Qt 5 distribution from Homebrew.
For Win32, use the official Qt 5 installer. This comes with a MinGW distribution; the Makefile.GCC is tested against that distribution.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,104,2018-05-24T04:50:11Z,2018-09-24T17:14:14Z,2020-02-01T15:34:34Z,CLOSED,False,618,24,15,https://github.com/chasonr,"Build with Qt 5 on Linux, Windows and Mac OS X",13,[],https://github.com/NetHack/NetHack/pull/104,https://github.com/paxed,2,https://github.com/NetHack/NetHack/pull/104#issuecomment-424053082,"This pull request provides needed changes to compile against Qt5 on Linux (my distribution is Fedora 28), Mac OS X and Win32.
For Mac, use the Qt 5 distribution from Homebrew.
For Win32, use the official Qt 5 installer. This comes with a MinGW distribution; the Makefile.GCC is tested against that distribution.",Merged.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,112,2018-07-02T01:48:30Z,2018-07-03T21:15:53Z,2018-07-03T21:15:53Z,CLOSED,False,2,1,2,https://github.com/Chris-plus-alphanumericgibberish,Fix copy-paste error causing bad shopkeeper placement in some shops,2,[],https://github.com/NetHack/NetHack/pull/112,https://github.com/Chris-plus-alphanumericgibberish,1,https://github.com/NetHack/NetHack/pull/112,"Fix copy-paste error leading to bad shopkeeper placement in irregularly-shaped shops with the door at the top.
The last case from a set of 4 very similar if statements increments sx after testing sy.  As a result, the shopkeeper is placed one space to the right of a north-facing door, instead of one space to the south (ie, the shopkeeper is placed in the wall next to the door, instead of behind it).  As noted, this was pretty clearly a copy-paste error from the first pair of if statements, which do adjust the x coordinate.
This bug is latent in vanilla NetHack, because no levels include such a shop.","Fix copy-paste error leading to bad shopkeeper placement in irregularly-shaped shops with the door at the top.
The last case from a set of 4 very similar if statements increments sx after testing sy.  As a result, the shopkeeper is placed one space to the right of a north-facing door, instead of one space to the south (ie, the shopkeeper is placed in the wall next to the door, instead of behind it).  As noted, this was pretty clearly a copy-paste error from the first pair of if statements, which do adjust the x coordinate.
This bug is latent in vanilla NetHack, because no levels include such a shop.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,112,2018-07-02T01:48:30Z,2018-07-03T21:15:53Z,2018-07-03T21:15:53Z,CLOSED,False,2,1,2,https://github.com/Chris-plus-alphanumericgibberish,Fix copy-paste error causing bad shopkeeper placement in some shops,2,[],https://github.com/NetHack/NetHack/pull/112,https://github.com/Chris-plus-alphanumericgibberish,2,https://github.com/NetHack/NetHack/pull/112#issuecomment-402294190,"Fix copy-paste error leading to bad shopkeeper placement in irregularly-shaped shops with the door at the top.
The last case from a set of 4 very similar if statements increments sx after testing sy.  As a result, the shopkeeper is placed one space to the right of a north-facing door, instead of one space to the south (ie, the shopkeeper is placed in the wall next to the door, instead of behind it).  As noted, this was pretty clearly a copy-paste error from the first pair of if statements, which do adjust the x coordinate.
This bug is latent in vanilla NetHack, because no levels include such a shop.",Closing pull request after re-organizing branch repo to enable single-bug pull requests,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,113,2018-07-03T21:16:56Z,2018-07-05T08:37:24Z,2018-07-05T08:37:24Z,CLOSED,False,1,1,1,https://github.com/Chris-plus-alphanumericgibberish,Fix error leading to bad shopkeeper placement in some shops,1,[],https://github.com/NetHack/NetHack/pull/113,https://github.com/Chris-plus-alphanumericgibberish,1,https://github.com/NetHack/NetHack/pull/113,"Fix copy-paste error leading to bad shopkeeper placement in irregularly-shaped shops with the door at the top.
The last case from a set of 4 very similar if statements increments sx after testing sy. As a result, the shopkeeper is placed one space to the right of a north-facing door, instead of one space to the south (ie, the shopkeeper is placed in the wall next to the door, instead of behind it). As noted, this was pretty clearly a copy-paste error from the first pair of if statements, which do adjust the x coordinate.
This bug is latent in vanilla NetHack, because no levels include such a shop.","Fix copy-paste error leading to bad shopkeeper placement in irregularly-shaped shops with the door at the top.
The last case from a set of 4 very similar if statements increments sx after testing sy. As a result, the shopkeeper is placed one space to the right of a north-facing door, instead of one space to the south (ie, the shopkeeper is placed in the wall next to the door, instead of behind it). As noted, this was pretty clearly a copy-paste error from the first pair of if statements, which do adjust the x coordinate.
This bug is latent in vanilla NetHack, because no levels include such a shop.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,114,2018-07-03T21:18:57Z,2018-07-04T04:37:28Z,2018-07-04T04:37:28Z,CLOSED,False,1,0,1,https://github.com/Chris-plus-alphanumericgibberish,Antholes in .des files will not be filled,1,[],https://github.com/NetHack/NetHack/pull/114,https://github.com/Chris-plus-alphanumericgibberish,1,https://github.com/NetHack/NetHack/pull/114,"This is due to a missing case in the fill_zoo section of sp_lev.c
This bug is latent in NetHack, since no special levels include antholes.","This is due to a missing case in the fill_zoo section of sp_lev.c
This bug is latent in NetHack, since no special levels include antholes.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,118,2018-07-12T02:03:07Z,2019-10-03T00:37:29Z,2019-10-03T01:04:10Z,CLOSED,False,1,1,1,https://github.com/cxd4,"proposed to link with -lncurses, not /usr/lib/libncurses.a",1,[],https://github.com/NetHack/NetHack/pull/118,https://github.com/cxd4,1,https://github.com/NetHack/NetHack/pull/118,"Following the instructions in README.linux to build the binary on Slackware 14.2 (i486) results in link-time failure.  The assumption of libncurses.a existing in /usr/lib does not appear to be a Linux-wide rule.
Following the original -lncurses suggestion specified in Makefile.src instead of trying to specify an absolute path to the library works perfectly.  I thought this change would prevent confusing anyone else on some distributions trying to build NetHack based on the README.linux instructions.","Following the instructions in README.linux to build the binary on Slackware 14.2 (i486) results in link-time failure.  The assumption of libncurses.a existing in /usr/lib does not appear to be a Linux-wide rule.
Following the original -lncurses suggestion specified in Makefile.src instead of trying to specify an absolute path to the library works perfectly.  I thought this change would prevent confusing anyone else on some distributions trying to build NetHack based on the README.linux instructions.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,119,2018-07-22T14:35:38Z,2018-09-12T23:38:47Z,2019-12-12T15:51:49Z,CLOSED,False,624,629,15,https://github.com/NullCGT,Migrate MH_RACE flags to their own field in the permonst struct,4,[],https://github.com/NetHack/NetHack/pull/119,https://github.com/NullCGT,1,https://github.com/NetHack/NetHack/pull/119,"In monflag.h, there is a comment about possibly moving MH_HUMAN, MH_ELF, MH_DWARF, MH_GNOME, and MH_ORC to their own field, instead of having them mask the corresponding M2 bitflags. This pull request implements a race field. The changes are as follows:

There is now an ""mrace"" entry in the permonst struct in order to hold the monster race bitflags.
M2_HUMAN, M2_ELF, M2_DWARF, M2_GNOME, M2_ORC, M2_UNDEAD, M2_DEMON, M2_GIANT, and M2_WERE have been changed to mrace bitflags.
All monsters in monst.c have been retagged to support the new system, and artifacts now grant warning based on mrace instead of mflags2. All relevant references to one of the mentioned flags and mflags2 have been updated.

These changes have several distinct advantages:

Most importantly, the M2 bitflags now make more sense, since they are no longer a mix of races and monster features, and instead solely correspond to monster features.
Adding new races is now much easier, since it just involves adding another race bitflag and changing ROLE_RACEMASK.
There is now room for additional M2 bitflags, which were previously all filled.
These changes can be potentially expanded in the future to clean up some of the code in mondata.h. For example, an MH_FLAYER tag could be added in order to clean up the definiton for is_mind_flayer(ptr).
Having a separate monster race field allows for interesting changes to races that were not possible before without some sort of kludge, such as making all giants hostile to dwarves.","In monflag.h, there is a comment about possibly moving MH_HUMAN, MH_ELF, MH_DWARF, MH_GNOME, and MH_ORC to their own field, instead of having them mask the corresponding M2 bitflags. This pull request implements a race field. The changes are as follows:

There is now an ""mrace"" entry in the permonst struct in order to hold the monster race bitflags.
M2_HUMAN, M2_ELF, M2_DWARF, M2_GNOME, M2_ORC, M2_UNDEAD, M2_DEMON, M2_GIANT, and M2_WERE have been changed to mrace bitflags.
All monsters in monst.c have been retagged to support the new system, and artifacts now grant warning based on mrace instead of mflags2. All relevant references to one of the mentioned flags and mflags2 have been updated.

These changes have several distinct advantages:

Most importantly, the M2 bitflags now make more sense, since they are no longer a mix of races and monster features, and instead solely correspond to monster features.
Adding new races is now much easier, since it just involves adding another race bitflag and changing ROLE_RACEMASK.
There is now room for additional M2 bitflags, which were previously all filled.
These changes can be potentially expanded in the future to clean up some of the code in mondata.h. For example, an MH_FLAYER tag could be added in order to clean up the definiton for is_mind_flayer(ptr).
Having a separate monster race field allows for interesting changes to races that were not possible before without some sort of kludge, such as making all giants hostile to dwarves.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,119,2018-07-22T14:35:38Z,2018-09-12T23:38:47Z,2019-12-12T15:51:49Z,CLOSED,False,624,629,15,https://github.com/NullCGT,Migrate MH_RACE flags to their own field in the permonst struct,4,[],https://github.com/NetHack/NetHack/pull/119,https://github.com/NullCGT,2,https://github.com/NetHack/NetHack/pull/119#issuecomment-406871473,"In monflag.h, there is a comment about possibly moving MH_HUMAN, MH_ELF, MH_DWARF, MH_GNOME, and MH_ORC to their own field, instead of having them mask the corresponding M2 bitflags. This pull request implements a race field. The changes are as follows:

There is now an ""mrace"" entry in the permonst struct in order to hold the monster race bitflags.
M2_HUMAN, M2_ELF, M2_DWARF, M2_GNOME, M2_ORC, M2_UNDEAD, M2_DEMON, M2_GIANT, and M2_WERE have been changed to mrace bitflags.
All monsters in monst.c have been retagged to support the new system, and artifacts now grant warning based on mrace instead of mflags2. All relevant references to one of the mentioned flags and mflags2 have been updated.

These changes have several distinct advantages:

Most importantly, the M2 bitflags now make more sense, since they are no longer a mix of races and monster features, and instead solely correspond to monster features.
Adding new races is now much easier, since it just involves adding another race bitflag and changing ROLE_RACEMASK.
There is now room for additional M2 bitflags, which were previously all filled.
These changes can be potentially expanded in the future to clean up some of the code in mondata.h. For example, an MH_FLAYER tag could be added in order to clean up the definiton for is_mind_flayer(ptr).
Having a separate monster race field allows for interesting changes to races that were not possible before without some sort of kludge, such as making all giants hostile to dwarves.","This should not change gameplay in any way, just the way that races are handled internally.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,119,2018-07-22T14:35:38Z,2018-09-12T23:38:47Z,2019-12-12T15:51:49Z,CLOSED,False,624,629,15,https://github.com/NullCGT,Migrate MH_RACE flags to their own field in the permonst struct,4,[],https://github.com/NetHack/NetHack/pull/119,https://github.com/NullCGT,3,https://github.com/NetHack/NetHack/pull/119#issuecomment-420833544,"In monflag.h, there is a comment about possibly moving MH_HUMAN, MH_ELF, MH_DWARF, MH_GNOME, and MH_ORC to their own field, instead of having them mask the corresponding M2 bitflags. This pull request implements a race field. The changes are as follows:

There is now an ""mrace"" entry in the permonst struct in order to hold the monster race bitflags.
M2_HUMAN, M2_ELF, M2_DWARF, M2_GNOME, M2_ORC, M2_UNDEAD, M2_DEMON, M2_GIANT, and M2_WERE have been changed to mrace bitflags.
All monsters in monst.c have been retagged to support the new system, and artifacts now grant warning based on mrace instead of mflags2. All relevant references to one of the mentioned flags and mflags2 have been updated.

These changes have several distinct advantages:

Most importantly, the M2 bitflags now make more sense, since they are no longer a mix of races and monster features, and instead solely correspond to monster features.
Adding new races is now much easier, since it just involves adding another race bitflag and changing ROLE_RACEMASK.
There is now room for additional M2 bitflags, which were previously all filled.
These changes can be potentially expanded in the future to clean up some of the code in mondata.h. For example, an MH_FLAYER tag could be added in order to clean up the definiton for is_mind_flayer(ptr).
Having a separate monster race field allows for interesting changes to races that were not possible before without some sort of kludge, such as making all giants hostile to dwarves.","Ignore this, going to clean this up.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,123,2018-08-11T02:30:42Z,2018-08-15T08:37:21Z,2018-08-20T01:27:27Z,CLOSED,False,3,0,1,https://github.com/copperwater,Fix levl buffer overflow in wallify_map,1,[],https://github.com/NetHack/NetHack/pull/123,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/123,"Normally, wallify_map iterates through x and y coordinates on the map up
until (80,21) while looking for tiles to convert into walls, even though
column 80 and row 21 don't exist on the map.  This usually does nothing
bad, because position (79,20) is never a ROOM tile on any level where
WALLIFY is used.
However, if WALLIFY without arguments happens to be used on a map which
contains a ROOM tile at (79,20), such as a large open level containing
some rock formations that the programmer desires to wallify, then
wallify_map will write an HWALL into level.locations[80][21] (and
probably into a bunch of other nonexistent coordinates). These overflow
into the level.objects pointers, which results in segfaults when the
program tries to read them.
The fix is to add a check in wallify_map which causes it to ignore any
!isok() positions, which aren't on the map anyway.","Normally, wallify_map iterates through x and y coordinates on the map up
until (80,21) while looking for tiles to convert into walls, even though
column 80 and row 21 don't exist on the map.  This usually does nothing
bad, because position (79,20) is never a ROOM tile on any level where
WALLIFY is used.
However, if WALLIFY without arguments happens to be used on a map which
contains a ROOM tile at (79,20), such as a large open level containing
some rock formations that the programmer desires to wallify, then
wallify_map will write an HWALL into level.locations[80][21] (and
probably into a bunch of other nonexistent coordinates). These overflow
into the level.objects pointers, which results in segfaults when the
program tries to read them.
The fix is to add a check in wallify_map which causes it to ignore any
!isok() positions, which aren't on the map anyway.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,126,2018-08-18T06:43:19Z,2018-08-18T06:45:03Z,2018-08-18T06:47:37Z,CLOSED,False,32,12,2,https://github.com/brian-donovan,Elf Iron patch,1,[],https://github.com/NetHack/NetHack/pull/126,https://github.com/brian-donovan,1,https://github.com/NetHack/NetHack/pull/126,,,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,126,2018-08-18T06:43:19Z,2018-08-18T06:45:03Z,2018-08-18T06:47:37Z,CLOSED,False,32,12,2,https://github.com/brian-donovan,Elf Iron patch,1,[],https://github.com/NetHack/NetHack/pull/126,https://github.com/brian-donovan,2,https://github.com/NetHack/NetHack/pull/126#issuecomment-414036785,,Rewrite of the Elf Iron patch by Pasi Kallinen.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,128,2018-08-29T03:00:40Z,2018-08-30T10:10:15Z,2019-05-23T22:03:02Z,CLOSED,False,5,2,3,https://github.com/bobbydurrett,fix issue with wiz_identify and char unsigned,2,[],https://github.com/NetHack/NetHack/pull/128,https://github.com/bobbydurrett,1,https://github.com/NetHack/NetHack/pull/128,"I emailed the dev team about a problem I had with identify in wizard mode on the Raspberry Pi. If you press control-I twice in a row it is supposed to permanently identify the objects in your inventory. The first control-I shows the identified inventory but the second control-I does nothing and after you are done if you check the inventory the items you wanted to identify are still unidentified.
This issue is caused by the C compiler on the Raspberry Pi implementing the char type as unsigned. The wiz_identify code that was introduced in 3.6.0 assumes that char is signed. According to this Stackoverflow article there is no guarantee that char is signed in C:
https://stackoverflow.com/questions/2054939/is-char-signed-or-unsigned-by-default
Here are the lines in the 3.6.0 code that assume that char is signed:
line 2083 in invent.c:
    any.a_char = -1;

line 595 in cmd.c:
    if (display_inventory((char *) 0, TRUE) == -1)

On the Raspberry Pi with char being unsigned display_inventory((char *) 0, TRUE) returned 255 instead of -1.
This pull request just casts the output of display_inventory to a signed char and the 255 is converted back to -1 and the wiz_identify works. The dev team may choose to fix this another way. Maybe we could choose a different value besides -1 such as 127 which would be the same with signed or unsigned char types.
Bobby","I emailed the dev team about a problem I had with identify in wizard mode on the Raspberry Pi. If you press control-I twice in a row it is supposed to permanently identify the objects in your inventory. The first control-I shows the identified inventory but the second control-I does nothing and after you are done if you check the inventory the items you wanted to identify are still unidentified.
This issue is caused by the C compiler on the Raspberry Pi implementing the char type as unsigned. The wiz_identify code that was introduced in 3.6.0 assumes that char is signed. According to this Stackoverflow article there is no guarantee that char is signed in C:
https://stackoverflow.com/questions/2054939/is-char-signed-or-unsigned-by-default
Here are the lines in the 3.6.0 code that assume that char is signed:
line 2083 in invent.c:
    any.a_char = -1;

line 595 in cmd.c:
    if (display_inventory((char *) 0, TRUE) == -1)

On the Raspberry Pi with char being unsigned display_inventory((char *) 0, TRUE) returned 255 instead of -1.
This pull request just casts the output of display_inventory to a signed char and the 255 is converted back to -1 and the wiz_identify works. The dev team may choose to fix this another way. Maybe we could choose a different value besides -1 such as 127 which would be the same with signed or unsigned char types.
Bobby",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,128,2018-08-29T03:00:40Z,2018-08-30T10:10:15Z,2019-05-23T22:03:02Z,CLOSED,False,5,2,3,https://github.com/bobbydurrett,fix issue with wiz_identify and char unsigned,2,[],https://github.com/NetHack/NetHack/pull/128,https://github.com/Rhialto,2,https://github.com/NetHack/NetHack/pull/128#issuecomment-417045367,"I emailed the dev team about a problem I had with identify in wizard mode on the Raspberry Pi. If you press control-I twice in a row it is supposed to permanently identify the objects in your inventory. The first control-I shows the identified inventory but the second control-I does nothing and after you are done if you check the inventory the items you wanted to identify are still unidentified.
This issue is caused by the C compiler on the Raspberry Pi implementing the char type as unsigned. The wiz_identify code that was introduced in 3.6.0 assumes that char is signed. According to this Stackoverflow article there is no guarantee that char is signed in C:
https://stackoverflow.com/questions/2054939/is-char-signed-or-unsigned-by-default
Here are the lines in the 3.6.0 code that assume that char is signed:
line 2083 in invent.c:
    any.a_char = -1;

line 595 in cmd.c:
    if (display_inventory((char *) 0, TRUE) == -1)

On the Raspberry Pi with char being unsigned display_inventory((char *) 0, TRUE) returned 255 instead of -1.
This pull request just casts the output of display_inventory to a signed char and the 255 is converted back to -1 and the wiz_identify works. The dev team may choose to fix this another way. Maybe we could choose a different value besides -1 such as 127 which would be the same with signed or unsigned char types.
Bobby","Would assigning the value 255 to a signed char not be integer overflow, and hence undefined behaviour?
Based on that, using 127 or some value like that which is valid for both signed and unsigned chars would be the only solution.
6.3.1.3 [Signed and unsigned integers]

1   When a value with integer type is converted to another integer type other than _Bool, if
    the value can be represented by the new type, it is unchanged.

2   Otherwise, if the new type is unsigned, the value is converted by repeatedly adding or
    subtracting one more than the maximum value that can be represented in the new type
    until the value is in the range of the new type.60)

Footnote 60) The rules describe arithmetic on the mathematical value, not the value of a given type of expression.

3   Otherwise, the new type is signed and the value cannot be represented in it; either the
    result is implementation-defined or an implementation-defined signal is raised.

from C11. That suggests at least that we want to avoid that.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,128,2018-08-29T03:00:40Z,2018-08-30T10:10:15Z,2019-05-23T22:03:02Z,CLOSED,False,5,2,3,https://github.com/bobbydurrett,fix issue with wiz_identify and char unsigned,2,[],https://github.com/NetHack/NetHack/pull/128,https://github.com/bobbydurrett,3,https://github.com/NetHack/NetHack/pull/128#issuecomment-417047846,"I emailed the dev team about a problem I had with identify in wizard mode on the Raspberry Pi. If you press control-I twice in a row it is supposed to permanently identify the objects in your inventory. The first control-I shows the identified inventory but the second control-I does nothing and after you are done if you check the inventory the items you wanted to identify are still unidentified.
This issue is caused by the C compiler on the Raspberry Pi implementing the char type as unsigned. The wiz_identify code that was introduced in 3.6.0 assumes that char is signed. According to this Stackoverflow article there is no guarantee that char is signed in C:
https://stackoverflow.com/questions/2054939/is-char-signed-or-unsigned-by-default
Here are the lines in the 3.6.0 code that assume that char is signed:
line 2083 in invent.c:
    any.a_char = -1;

line 595 in cmd.c:
    if (display_inventory((char *) 0, TRUE) == -1)

On the Raspberry Pi with char being unsigned display_inventory((char *) 0, TRUE) returned 255 instead of -1.
This pull request just casts the output of display_inventory to a signed char and the 255 is converted back to -1 and the wiz_identify works. The dev team may choose to fix this another way. Maybe we could choose a different value besides -1 such as 127 which would be the same with signed or unsigned char types.
Bobby",I think what is happening based on the C11 things listed above is that rule 2 is coming into play. On line 2083 in invent.c in 3.6.0 we assign -1 to an unsigned character. any.a_char = -1; The compiler adds 256 which is one more than the maximum number that an unsigned char can represent and you get 255. It probably makes sense to use some number in the range 0 to 127 instead of -1. My solution was just a one line fix that does not affect anything else but changing the number stored and checked against may be the better way to go. Doesn't matter to me how we fix it. It is just helpful to be able to use Wizard mode identify on the Raspberry Pi.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,128,2018-08-29T03:00:40Z,2018-08-30T10:10:15Z,2019-05-23T22:03:02Z,CLOSED,False,5,2,3,https://github.com/bobbydurrett,fix issue with wiz_identify and char unsigned,2,[],https://github.com/NetHack/NetHack/pull/128,https://github.com/Rhialto,4,https://github.com/NetHack/NetHack/pull/128#issuecomment-417077478,"I emailed the dev team about a problem I had with identify in wizard mode on the Raspberry Pi. If you press control-I twice in a row it is supposed to permanently identify the objects in your inventory. The first control-I shows the identified inventory but the second control-I does nothing and after you are done if you check the inventory the items you wanted to identify are still unidentified.
This issue is caused by the C compiler on the Raspberry Pi implementing the char type as unsigned. The wiz_identify code that was introduced in 3.6.0 assumes that char is signed. According to this Stackoverflow article there is no guarantee that char is signed in C:
https://stackoverflow.com/questions/2054939/is-char-signed-or-unsigned-by-default
Here are the lines in the 3.6.0 code that assume that char is signed:
line 2083 in invent.c:
    any.a_char = -1;

line 595 in cmd.c:
    if (display_inventory((char *) 0, TRUE) == -1)

On the Raspberry Pi with char being unsigned display_inventory((char *) 0, TRUE) returned 255 instead of -1.
This pull request just casts the output of display_inventory to a signed char and the 255 is converted back to -1 and the wiz_identify works. The dev team may choose to fix this another way. Maybe we could choose a different value besides -1 such as 127 which would be the same with signed or unsigned char types.
Bobby","Eh, no. I added a quote from the (draft) C11 standard (http://port70.net/~nsz/c/c11/n1570.html) which seems to describe this situation (maybe you wrote your reply before you saw that): it is implementation defined, and hence you cannot portably depend on it. Also, integer overflow on a signed value is undefined behavior (see the EXAMPLE in this paragraph):
3.4.3 [Terms, definitions, and symbols]

1   undefined behavior
    behavior, upon use of a nonportable or erroneous program construct or of erroneous data,
    for which this International Standard imposes no requirements

2   NOTE Possible undefined behavior ranges from ignoring the situation completely with unpredictable
    results, to behaving during translation or program execution in a documented manner characteristic of the
    environment (with or without the issuance of a diagnostic message), to terminating a translation or
    execution (with the issuance of a diagnostic message).

3   EXAMPLE        An example of undefined behavior is the behavior on integer overflow.

but I'm not sure if that only applies in this case; maybe and with grepping I don't find more specific references.
But I would conclude that (signed char) 255 is at least implementation-defined, and should for that reason be avoided.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,128,2018-08-29T03:00:40Z,2018-08-30T10:10:15Z,2019-05-23T22:03:02Z,CLOSED,False,5,2,3,https://github.com/bobbydurrett,fix issue with wiz_identify and char unsigned,2,[],https://github.com/NetHack/NetHack/pull/128,https://github.com/bobbydurrett,5,https://github.com/NetHack/NetHack/pull/128#issuecomment-417079310,"I emailed the dev team about a problem I had with identify in wizard mode on the Raspberry Pi. If you press control-I twice in a row it is supposed to permanently identify the objects in your inventory. The first control-I shows the identified inventory but the second control-I does nothing and after you are done if you check the inventory the items you wanted to identify are still unidentified.
This issue is caused by the C compiler on the Raspberry Pi implementing the char type as unsigned. The wiz_identify code that was introduced in 3.6.0 assumes that char is signed. According to this Stackoverflow article there is no guarantee that char is signed in C:
https://stackoverflow.com/questions/2054939/is-char-signed-or-unsigned-by-default
Here are the lines in the 3.6.0 code that assume that char is signed:
line 2083 in invent.c:
    any.a_char = -1;

line 595 in cmd.c:
    if (display_inventory((char *) 0, TRUE) == -1)

On the Raspberry Pi with char being unsigned display_inventory((char *) 0, TRUE) returned 255 instead of -1.
This pull request just casts the output of display_inventory to a signed char and the 255 is converted back to -1 and the wiz_identify works. The dev team may choose to fix this another way. Maybe we could choose a different value besides -1 such as 127 which would be the same with signed or unsigned char types.
Bobby",I'm not sure about (signed char) 255 not being portable. But it makes sense to use something other than -1 as the value stored in a char.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,128,2018-08-29T03:00:40Z,2018-08-30T10:10:15Z,2019-05-23T22:03:02Z,CLOSED,False,5,2,3,https://github.com/bobbydurrett,fix issue with wiz_identify and char unsigned,2,[],https://github.com/NetHack/NetHack/pull/128,https://github.com/bobbydurrett,6,https://github.com/NetHack/NetHack/pull/128#issuecomment-417095057,"I emailed the dev team about a problem I had with identify in wizard mode on the Raspberry Pi. If you press control-I twice in a row it is supposed to permanently identify the objects in your inventory. The first control-I shows the identified inventory but the second control-I does nothing and after you are done if you check the inventory the items you wanted to identify are still unidentified.
This issue is caused by the C compiler on the Raspberry Pi implementing the char type as unsigned. The wiz_identify code that was introduced in 3.6.0 assumes that char is signed. According to this Stackoverflow article there is no guarantee that char is signed in C:
https://stackoverflow.com/questions/2054939/is-char-signed-or-unsigned-by-default
Here are the lines in the 3.6.0 code that assume that char is signed:
line 2083 in invent.c:
    any.a_char = -1;

line 595 in cmd.c:
    if (display_inventory((char *) 0, TRUE) == -1)

On the Raspberry Pi with char being unsigned display_inventory((char *) 0, TRUE) returned 255 instead of -1.
This pull request just casts the output of display_inventory to a signed char and the 255 is converted back to -1 and the wiz_identify works. The dev team may choose to fix this another way. Maybe we could choose a different value besides -1 such as 127 which would be the same with signed or unsigned char types.
Bobby","Interesting discussion about 2's complement here:
https://stackoverflow.com/questions/12276957/are-there-any-non-twos-complement-implementations-of-c
I guess it is possible that on a Unisys system you might have a representation of -1 that doesn't equal 255. I'm not sure that there is a platform supported by nethack that doesn't use 2's complement.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,128,2018-08-29T03:00:40Z,2018-08-30T10:10:15Z,2019-05-23T22:03:02Z,CLOSED,False,5,2,3,https://github.com/bobbydurrett,fix issue with wiz_identify and char unsigned,2,[],https://github.com/NetHack/NetHack/pull/128,https://github.com/bobbydurrett,7,https://github.com/NetHack/NetHack/pull/128#issuecomment-417150664,"I emailed the dev team about a problem I had with identify in wizard mode on the Raspberry Pi. If you press control-I twice in a row it is supposed to permanently identify the objects in your inventory. The first control-I shows the identified inventory but the second control-I does nothing and after you are done if you check the inventory the items you wanted to identify are still unidentified.
This issue is caused by the C compiler on the Raspberry Pi implementing the char type as unsigned. The wiz_identify code that was introduced in 3.6.0 assumes that char is signed. According to this Stackoverflow article there is no guarantee that char is signed in C:
https://stackoverflow.com/questions/2054939/is-char-signed-or-unsigned-by-default
Here are the lines in the 3.6.0 code that assume that char is signed:
line 2083 in invent.c:
    any.a_char = -1;

line 595 in cmd.c:
    if (display_inventory((char *) 0, TRUE) == -1)

On the Raspberry Pi with char being unsigned display_inventory((char *) 0, TRUE) returned 255 instead of -1.
This pull request just casts the output of display_inventory to a signed char and the 255 is converted back to -1 and the wiz_identify works. The dev team may choose to fix this another way. Maybe we could choose a different value besides -1 such as 127 which would be the same with signed or unsigned char types.
Bobby","I changed my pull request to use 127 instead of  -1 as the value passed back to wiz_identify. I also got rid of the cast to signed char. Lastly, instead of hard coding 127 I put it in a #define with a friendlier name to make the code clearer.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,128,2018-08-29T03:00:40Z,2018-08-30T10:10:15Z,2019-05-23T22:03:02Z,CLOSED,False,5,2,3,https://github.com/bobbydurrett,fix issue with wiz_identify and char unsigned,2,[],https://github.com/NetHack/NetHack/pull/128,https://github.com/nhmall,8,https://github.com/NetHack/NetHack/pull/128#issuecomment-417266727,"I emailed the dev team about a problem I had with identify in wizard mode on the Raspberry Pi. If you press control-I twice in a row it is supposed to permanently identify the objects in your inventory. The first control-I shows the identified inventory but the second control-I does nothing and after you are done if you check the inventory the items you wanted to identify are still unidentified.
This issue is caused by the C compiler on the Raspberry Pi implementing the char type as unsigned. The wiz_identify code that was introduced in 3.6.0 assumes that char is signed. According to this Stackoverflow article there is no guarantee that char is signed in C:
https://stackoverflow.com/questions/2054939/is-char-signed-or-unsigned-by-default
Here are the lines in the 3.6.0 code that assume that char is signed:
line 2083 in invent.c:
    any.a_char = -1;

line 595 in cmd.c:
    if (display_inventory((char *) 0, TRUE) == -1)

On the Raspberry Pi with char being unsigned display_inventory((char *) 0, TRUE) returned 255 instead of -1.
This pull request just casts the output of display_inventory to a signed char and the 255 is converted back to -1 and the wiz_identify works. The dev team may choose to fix this another way. Maybe we could choose a different value besides -1 such as 127 which would be the same with signed or unsigned char types.
Bobby",Fixed in f1d0636. There was a typo reference to 124 in that commit.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,130,2018-09-06T16:48:00Z,2018-09-06T17:37:34Z,2018-09-06T17:37:34Z,CLOSED,False,25263,2082,211,https://github.com/k21971,Prevent 'Unknown command' from showing up in dumplog,556,[],https://github.com/NetHack/NetHack/pull/130,https://github.com/k21971,1,https://github.com/NetHack/NetHack/pull/130,See this commit please - tnnt-devteam/tnnt@0b8d2e4,See this commit please - tnnt-devteam/tnnt@0b8d2e4,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,130,2018-09-06T16:48:00Z,2018-09-06T17:37:34Z,2018-09-06T17:37:34Z,CLOSED,False,25263,2082,211,https://github.com/k21971,Prevent 'Unknown command' from showing up in dumplog,556,[],https://github.com/NetHack/NetHack/pull/130,https://github.com/k21971,2,https://github.com/NetHack/NetHack/pull/130#issuecomment-419179614,See this commit please - tnnt-devteam/tnnt@0b8d2e4,please ignore. sigh.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,131,2018-09-07T03:19:50Z,2021-06-05T16:26:54Z,2021-06-05T16:26:54Z,CLOSED,False,1210,1,3,https://github.com/jwt27,Add makefile to build DOS version with a cross-compiler.,5,[],https://github.com/NetHack/NetHack/pull/131,https://github.com/jwt27,1,https://github.com/NetHack/NetHack/pull/131,"This makefile is based on the original one for DOS. I made some modifications so the utilities are built for the host system, and only the game for the target system. This file should be easier to maintain since it doesn't require any workarounds for short file names or the crippled default shell in MSDOS.
Parallel build doesn't work, but I guess that's no big deal. It's already a million times faster than building on a slow DOS machine.","This makefile is based on the original one for DOS. I made some modifications so the utilities are built for the host system, and only the game for the target system. This file should be easier to maintain since it doesn't require any workarounds for short file names or the crippled default shell in MSDOS.
Parallel build doesn't work, but I guess that's no big deal. It's already a million times faster than building on a slow DOS machine.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,131,2018-09-07T03:19:50Z,2021-06-05T16:26:54Z,2021-06-05T16:26:54Z,CLOSED,False,1210,1,3,https://github.com/jwt27,Add makefile to build DOS version with a cross-compiler.,5,[],https://github.com/NetHack/NetHack/pull/131,https://github.com/chasonr,2,https://github.com/NetHack/NetHack/pull/131#issuecomment-419604960,"This makefile is based on the original one for DOS. I made some modifications so the utilities are built for the host system, and only the game for the target system. This file should be easier to maintain since it doesn't require any workarounds for short file names or the crippled default shell in MSDOS.
Parallel build doesn't work, but I guess that's no big deal. It's already a million times faster than building on a slow DOS machine.","What are you using for a host system? You need to document that. Cross-compiling NetHack is tricky, because the intermediate programs (makedefs, dlb, lev_comp, dgn_comp, tilemap) are not made for it; the structures and the options that affect monster and object sets (only MAIL, currently) have to be the same for the host system as the target. I guess mingw32 would work, but I would expect a 64 bit Linux to fail.
I might put MSDOS_CROSS in pcconf.h, as it isn't relevant to anything other than DOS, and provide it as -DMSDOS_CROSS in Makefile.CROSS.
It looks like Makefile.CROSS is based on the existing Makefile.GCC. Makefile.GCC uses a number of hacks to keep the command lines short and to avoid some FreeDOS bugs. In particular, the final link phase could be done by directly passing the .o files in a single command.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,131,2018-09-07T03:19:50Z,2021-06-05T16:26:54Z,2021-06-05T16:26:54Z,CLOSED,False,1210,1,3,https://github.com/jwt27,Add makefile to build DOS version with a cross-compiler.,5,[],https://github.com/NetHack/NetHack/pull/131,https://github.com/jwt27,3,https://github.com/NetHack/NetHack/pull/131#issuecomment-419663201,"This makefile is based on the original one for DOS. I made some modifications so the utilities are built for the host system, and only the game for the target system. This file should be easier to maintain since it doesn't require any workarounds for short file names or the crippled default shell in MSDOS.
Parallel build doesn't work, but I guess that's no big deal. It's already a million times faster than building on a slow DOS machine.","I'm building on mingw64. So, the utilities and game executable share some binary structures, that must be the same on both build and target systems? I hadn't considered that, but I see how that may cause trouble. Nevertheless, this makefile does produce a working game executable. I did have to undefine MAIL due to a compilation error, which I didn't look into any further.
That's a much better idea. I implemented that just now.
I did notice that particular hack, and removed it. See line 450.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,132,2018-09-09T15:26:48Z,2018-09-21T04:38:01Z,2018-12-09T15:32:03Z,CLOSED,False,24,16,1,https://github.com/copperwater,Fix behavior of selection_do_grow,1,[],https://github.com/NetHack/NetHack/pull/132,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/132,"The function previously had two issues. First, the directional behavior
was reversed, so specifying a grow direction of ""north"" would actually
grow the selection downwards, etc. Second, the edge-of-map checks in the
function didn't actually correspond to isok() map boundaries, enabling
the function to, for instance, grow the selection into x=0, which could
break other things in the level. This commit fixes both.
The old behavior also was implemented with ""fanning-out"" behavior; that
is, a north grow from a single point would not only grow into the point
north of it, but it would also fan out into the points northwest and
northeast of it. Since this behavior might not always be wanted, I
removed it; the selection will only grow diagonally if it's specified to
grow in both adjacent cardinal directions. (I suppose this could
ultimately be added to the level compiler as a third argument to grow,
but I doubt there's a need for it right now.)","The function previously had two issues. First, the directional behavior
was reversed, so specifying a grow direction of ""north"" would actually
grow the selection downwards, etc. Second, the edge-of-map checks in the
function didn't actually correspond to isok() map boundaries, enabling
the function to, for instance, grow the selection into x=0, which could
break other things in the level. This commit fixes both.
The old behavior also was implemented with ""fanning-out"" behavior; that
is, a north grow from a single point would not only grow into the point
north of it, but it would also fan out into the points northwest and
northeast of it. Since this behavior might not always be wanted, I
removed it; the selection will only grow diagonally if it's specified to
grow in both adjacent cardinal directions. (I suppose this could
ultimately be added to the level compiler as a third argument to grow,
but I doubt there's a need for it right now.)",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,133,2018-09-12T13:17:06Z,2018-09-15T04:37:18Z,2019-07-11T18:56:28Z,CLOSED,False,3,0,1,https://github.com/NullCGT,Make monsters reassess equipment immediately after lifesaving.,1,[],https://github.com/NetHack/NetHack/pull/133,https://github.com/NullCGT,1,https://github.com/NetHack/NetHack/pull/133,"I implemented this a while back. If a monster uses an amulet of lifesaving, they never actually reassess their inventory. So a monster might be carrying three amulets of lifesaving, but never equip a new one after being killed the first time. This commit addresses this, at the cost of a single call to m_dowear() when a monster is lifesaved. This change also allows monsters who died due to disintegration to equip other items they might have.","I implemented this a while back. If a monster uses an amulet of lifesaving, they never actually reassess their inventory. So a monster might be carrying three amulets of lifesaving, but never equip a new one after being killed the first time. This commit addresses this, at the cost of a single call to m_dowear() when a monster is lifesaved. This change also allows monsters who died due to disintegration to equip other items they might have.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,135,2018-09-19T20:50:10Z,2018-09-20T00:48:07Z,2018-09-20T01:33:06Z,CLOSED,False,1,1,1,https://github.com/mogigoma,Fix spelling mistake in README.,1,[],https://github.com/NetHack/NetHack/pull/135,https://github.com/mogigoma,1,https://github.com/NetHack/NetHack/pull/135,,,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,135,2018-09-19T20:50:10Z,2018-09-20T00:48:07Z,2018-09-20T01:33:06Z,CLOSED,False,1,1,1,https://github.com/mogigoma,Fix spelling mistake in README.,1,[],https://github.com/NetHack/NetHack/pull/135,https://github.com/nhmall,2,https://github.com/NetHack/NetHack/pull/135#issuecomment-423003353,,pulled upstream,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,135,2018-09-19T20:50:10Z,2018-09-20T00:48:07Z,2018-09-20T01:33:06Z,CLOSED,False,1,1,1,https://github.com/mogigoma,Fix spelling mistake in README.,1,[],https://github.com/NetHack/NetHack/pull/135,https://github.com/nhmall,3,https://github.com/NetHack/NetHack/pull/135#issuecomment-423003436,,upstream changes will appear in 4 hours or so,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,136,2018-09-19T22:03:54Z,2018-09-20T00:47:55Z,2018-09-20T01:32:55Z,CLOSED,False,13,13,6,https://github.com/mogigoma,Fix spelling and capitalization issues in `dat` and `DEVEL`.,1,[],https://github.com/NetHack/NetHack/pull/136,https://github.com/mogigoma,1,https://github.com/NetHack/NetHack/pull/136,"These changes are all 'obviously wrong' to me. They don't occur in any stylistic or old-style dialect instances.
nicname         -> nickname
user-writeable  -> user-writable
legibile        -> legible
parenthese      -> parentheses
Satements       -> Statements
challanges      -> challenges
escae           -> escape
retrive         -> retrieve
flexs           -> flexes
entrace         -> entrance

This change was made in a heading and nearby, not every instance was changed in the codebase.
emacs -> Emacs

This change was made to make the usage consistent with the rest of the codebase, which uses the latter.
encumberance -> encumbrance","These changes are all 'obviously wrong' to me. They don't occur in any stylistic or old-style dialect instances.
nicname         -> nickname
user-writeable  -> user-writable
legibile        -> legible
parenthese      -> parentheses
Satements       -> Statements
challanges      -> challenges
escae           -> escape
retrive         -> retrieve
flexs           -> flexes
entrace         -> entrance

This change was made in a heading and nearby, not every instance was changed in the codebase.
emacs -> Emacs

This change was made to make the usage consistent with the rest of the codebase, which uses the latter.
encumberance -> encumbrance",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,136,2018-09-19T22:03:54Z,2018-09-20T00:47:55Z,2018-09-20T01:32:55Z,CLOSED,False,13,13,6,https://github.com/mogigoma,Fix spelling and capitalization issues in `dat` and `DEVEL`.,1,[],https://github.com/NetHack/NetHack/pull/136,https://github.com/nhmall,2,https://github.com/NetHack/NetHack/pull/136#issuecomment-423003325,"These changes are all 'obviously wrong' to me. They don't occur in any stylistic or old-style dialect instances.
nicname         -> nickname
user-writeable  -> user-writable
legibile        -> legible
parenthese      -> parentheses
Satements       -> Statements
challanges      -> challenges
escae           -> escape
retrive         -> retrieve
flexs           -> flexes
entrace         -> entrance

This change was made in a heading and nearby, not every instance was changed in the codebase.
emacs -> Emacs

This change was made to make the usage consistent with the rest of the codebase, which uses the latter.
encumberance -> encumbrance",pulled upstream,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,136,2018-09-19T22:03:54Z,2018-09-20T00:47:55Z,2018-09-20T01:32:55Z,CLOSED,False,13,13,6,https://github.com/mogigoma,Fix spelling and capitalization issues in `dat` and `DEVEL`.,1,[],https://github.com/NetHack/NetHack/pull/136,https://github.com/nhmall,3,https://github.com/NetHack/NetHack/pull/136#issuecomment-423003503,"These changes are all 'obviously wrong' to me. They don't occur in any stylistic or old-style dialect instances.
nicname         -> nickname
user-writeable  -> user-writable
legibile        -> legible
parenthese      -> parentheses
Satements       -> Statements
challanges      -> challenges
escae           -> escape
retrive         -> retrieve
flexs           -> flexes
entrace         -> entrance

This change was made in a heading and nearby, not every instance was changed in the codebase.
emacs -> Emacs

This change was made to make the usage consistent with the rest of the codebase, which uses the latter.
encumberance -> encumbrance",upstream changes will appear in 4 hours or so,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,137,2018-09-20T02:04:52Z,2018-09-20T03:33:37Z,2018-09-20T03:33:37Z,CLOSED,False,21,21,15,https://github.com/mogigoma,Correct Jon Wätte's name in many places to account for encoding.,1,[],https://github.com/NetHack/NetHack/pull/137,https://github.com/mogigoma,1,https://github.com/NetHack/NetHack/pull/137,"I noticed repeated references to Jon W{tte and variations of that in various places where credit was given (e.g., guidebook, copyrights). Grepping for Jon W showed me all of those references, in addition to two for Jon Watte. This seemed like an search-and-replace gone awry or a locale issue, but nothing in the Git history went back far enough. So I pulled down the source for 3.1.0 and found Jon Watte as expected, but also Jon Wätte (in LaTeX as Jon W\""atte).
This commit restores the name to its previous representation of Jon Watte in source code and other text files, and Jon Wätte in Guidebook.tex.
Note that the name Janne Salmijärvi is also represented outside of the ASCII (and Unicode) encoding in several places, but it isn't wacky the way Jon's name was.
(Disclaimer: I've never heard of any of these people, but I'm on a proofreading spree.)","I noticed repeated references to Jon W{tte and variations of that in various places where credit was given (e.g., guidebook, copyrights). Grepping for Jon W showed me all of those references, in addition to two for Jon Watte. This seemed like an search-and-replace gone awry or a locale issue, but nothing in the Git history went back far enough. So I pulled down the source for 3.1.0 and found Jon Watte as expected, but also Jon Wätte (in LaTeX as Jon W\""atte).
This commit restores the name to its previous representation of Jon Watte in source code and other text files, and Jon Wätte in Guidebook.tex.
Note that the name Janne Salmijärvi is also represented outside of the ASCII (and Unicode) encoding in several places, but it isn't wacky the way Jon's name was.
(Disclaimer: I've never heard of any of these people, but I'm on a proofreading spree.)",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,137,2018-09-20T02:04:52Z,2018-09-20T03:33:37Z,2018-09-20T03:33:37Z,CLOSED,False,21,21,15,https://github.com/mogigoma,Correct Jon Wätte's name in many places to account for encoding.,1,[],https://github.com/NetHack/NetHack/pull/137,https://github.com/nhmall,2,https://github.com/NetHack/NetHack/pull/137#issuecomment-423017702,"I noticed repeated references to Jon W{tte and variations of that in various places where credit was given (e.g., guidebook, copyrights). Grepping for Jon W showed me all of those references, in addition to two for Jon Watte. This seemed like an search-and-replace gone awry or a locale issue, but nothing in the Git history went back far enough. So I pulled down the source for 3.1.0 and found Jon Watte as expected, but also Jon Wätte (in LaTeX as Jon W\""atte).
This commit restores the name to its previous representation of Jon Watte in source code and other text files, and Jon Wätte in Guidebook.tex.
Note that the name Janne Salmijärvi is also represented outside of the ASCII (and Unicode) encoding in several places, but it isn't wacky the way Jon's name was.
(Disclaimer: I've never heard of any of these people, but I'm on a proofreading spree.)","As I recall at the time, the man himself insisted on Jon W{tte for the ASCII representation of his own name, and Izchak Miller upheld his decision, so this won't be changed in source ASCII references.",True,{'THUMBS_UP': ['https://github.com/uxmal']}
NetHack/NetHack,https://github.com/NetHack/NetHack,137,2018-09-20T02:04:52Z,2018-09-20T03:33:37Z,2018-09-20T03:33:37Z,CLOSED,False,21,21,15,https://github.com/mogigoma,Correct Jon Wätte's name in many places to account for encoding.,1,[],https://github.com/NetHack/NetHack/pull/137,https://github.com/mogigoma,3,https://github.com/NetHack/NetHack/pull/137#issuecomment-423017978,"I noticed repeated references to Jon W{tte and variations of that in various places where credit was given (e.g., guidebook, copyrights). Grepping for Jon W showed me all of those references, in addition to two for Jon Watte. This seemed like an search-and-replace gone awry or a locale issue, but nothing in the Git history went back far enough. So I pulled down the source for 3.1.0 and found Jon Watte as expected, but also Jon Wätte (in LaTeX as Jon W\""atte).
This commit restores the name to its previous representation of Jon Watte in source code and other text files, and Jon Wätte in Guidebook.tex.
Note that the name Janne Salmijärvi is also represented outside of the ASCII (and Unicode) encoding in several places, but it isn't wacky the way Jon's name was.
(Disclaimer: I've never heard of any of these people, but I'm on a proofreading spree.)","Makes sense. Some are still erroneously Jon Watte in the ASCIIs, though. May want to update those to W{tte.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,138,2018-09-20T02:51:50Z,2018-09-20T03:33:03Z,2018-09-20T03:33:03Z,CLOSED,False,34,34,10,https://github.com/mogigoma,Fix other spelling issues.,1,[],https://github.com/NetHack/NetHack/pull/138,https://github.com/mogigoma,1,https://github.com/NetHack/NetHack/pull/138,"Another slew of spelling corrections. These corrections come from going through the doc directory, but ignoring the fixes* files since those feel less 'timeless'. Propagated fixes for issues found in doc to rest of codebase where I felt it was appropriate. Tried to mitigate spacing changes that were caused.
This is the last of the 'obvious' and automate-able spelling fixes. Going to run some grammar checkers next to see if they can detect more subtle issues. Will try not to send lame fixes or ones that seem intentional (e.g., dialog choices).","Another slew of spelling corrections. These corrections come from going through the doc directory, but ignoring the fixes* files since those feel less 'timeless'. Propagated fixes for issues found in doc to rest of codebase where I felt it was appropriate. Tried to mitigate spacing changes that were caused.
This is the last of the 'obvious' and automate-able spelling fixes. Going to run some grammar checkers next to see if they can detect more subtle issues. Will try not to send lame fixes or ones that seem intentional (e.g., dialog choices).",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,138,2018-09-20T02:51:50Z,2018-09-20T03:33:03Z,2018-09-20T03:33:03Z,CLOSED,False,34,34,10,https://github.com/mogigoma,Fix other spelling issues.,1,[],https://github.com/NetHack/NetHack/pull/138,https://github.com/nhmall,2,https://github.com/NetHack/NetHack/pull/138#issuecomment-423029066,"Another slew of spelling corrections. These corrections come from going through the doc directory, but ignoring the fixes* files since those feel less 'timeless'. Propagated fixes for issues found in doc to rest of codebase where I felt it was appropriate. Tried to mitigate spacing changes that were caused.
This is the last of the 'obvious' and automate-able spelling fixes. Going to run some grammar checkers next to see if they can detect more subtle issues. Will try not to send lame fixes or ones that seem intentional (e.g., dialog choices).",Pulled upstream. It should arrive here in 4 hours or so.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,139,2018-09-20T03:50:29Z,2018-09-20T22:05:39Z,2018-09-20T22:06:05Z,CLOSED,False,12,12,9,https://github.com/mogigoma,Grammar and punctuation fixes.,1,[],https://github.com/NetHack/NetHack/pull/139,https://github.com/mogigoma,1,https://github.com/NetHack/NetHack/pull/139,,,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,139,2018-09-20T03:50:29Z,2018-09-20T22:05:39Z,2018-09-20T22:06:05Z,CLOSED,False,12,12,9,https://github.com/mogigoma,Grammar and punctuation fixes.,1,[],https://github.com/NetHack/NetHack/pull/139,https://github.com/nhmall,2,https://github.com/NetHack/NetHack/pull/139#issuecomment-423349360,,"pushed upstream. Upstream change should arrive in 4 hours or so.
doc/tmac.n band was backed out to comply with distribution requirement.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,140,2018-09-26T03:12:42Z,2018-09-26T08:40:17Z,2018-09-26T12:30:21Z,MERGED,True,2,2,1,https://github.com/copperwater,"Fix ""would flyif you weren't levitating"" - missing space",1,[],https://github.com/NetHack/NetHack/pull/140,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/140,,,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,140,2018-09-26T03:12:42Z,2018-09-26T08:40:17Z,2018-09-26T12:30:21Z,MERGED,True,2,2,1,https://github.com/copperwater,"Fix ""would flyif you weren't levitating"" - missing space",1,[],https://github.com/NetHack/NetHack/pull/140,https://github.com/nhmall,2,https://github.com/NetHack/NetHack/pull/140#issuecomment-424573544,,pulled upstream; give it about 4 hours to show up here,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,142,2018-09-26T16:09:13Z,2018-09-27T04:37:22Z,2018-09-27T04:37:22Z,CLOSED,False,1,1,1,https://github.com/mp-t,fix out of bounds memory access,1,[],https://github.com/NetHack/NetHack/pull/142,https://github.com/mp-t,1,https://github.com/NetHack/NetHack/pull/142,Fixes Issue 141.,Fixes Issue 141.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,144,2018-10-09T04:14:24Z,2018-10-14T16:37:17Z,2018-10-14T16:37:17Z,CLOSED,False,0,2,1,https://github.com/Chris-plus-alphanumericgibberish,Starting swap weapon bugfix,2,[],https://github.com/NetHack/NetHack/pull/144,https://github.com/Chris-plus-alphanumericgibberish,1,https://github.com/NetHack/NetHack/pull/144,"Starting swap weapon bug
If the character begins play with at least two weapons and a shield, whether or not they end up beginning play with a swap weapon equipped depends on the order in which the various items appear in their role's starting equipment list.
This bug does affect vanilla, it is why knights don't begin play with their lances equipped in the swap weapon slot.","Starting swap weapon bug
If the character begins play with at least two weapons and a shield, whether or not they end up beginning play with a swap weapon equipped depends on the order in which the various items appear in their role's starting equipment list.
This bug does affect vanilla, it is why knights don't begin play with their lances equipped in the swap weapon slot.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,147,2018-10-22T19:15:28Z,2021-06-05T16:26:54Z,2021-06-05T16:26:54Z,CLOSED,False,152,0,5,https://github.com/tslug,Cygwin port,5,[],https://github.com/NetHack/NetHack/pull/147,https://github.com/tslug,1,https://github.com/NetHack/NetHack/pull/147,"I noticed people were having trouble getting nethack to compile under cygwin, so I added sys/cygwin to simplify this.  It permits playing inside a terminal emulator such as mintty instead of using a separate window.  It makes heavy use of the NewInstall-style sys/unix setup process to hopefully minimize the burden of maintaining cygwin-specific code.
Not sure I listed all the required cygwin packages in README.cygwin, so it would be great to get verification from someone else trying a build with a clean cygwin install to see if I missed anything.","I noticed people were having trouble getting nethack to compile under cygwin, so I added sys/cygwin to simplify this.  It permits playing inside a terminal emulator such as mintty instead of using a separate window.  It makes heavy use of the NewInstall-style sys/unix setup process to hopefully minimize the burden of maintaining cygwin-specific code.
Not sure I listed all the required cygwin packages in README.cygwin, so it would be great to get verification from someone else trying a build with a clean cygwin install to see if I missed anything.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,161,2018-11-21T16:23:03Z,2018-11-25T05:37:53Z,2018-11-25T05:37:53Z,CLOSED,False,2,0,1,https://github.com/NullCGT,Fixed scatter not updating the pile symbol.,1,[],https://github.com/NetHack/NetHack/pull/161,https://github.com/NullCGT,1,https://github.com/NetHack/NetHack/pull/161,"If you call scatter on a group of objects, the symbol for the pile is never actually updated, leading to an erroneous pile of objects on the screen that disappears as soon as the tile is updated. This pull request adds a call to newsym(), but only if the total number of objects scattered is greater than zero, thus fixing this bug.","If you call scatter on a group of objects, the symbol for the pile is never actually updated, leading to an erroneous pile of objects on the screen that disappears as soon as the tile is updated. This pull request adds a call to newsym(), but only if the total number of objects scattered is greater than zero, thus fixing this bug.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,162,2018-11-25T03:58:37Z,2021-06-05T16:26:54Z,2021-06-05T16:26:54Z,CLOSED,False,52,59,1,https://github.com/suokko,A few code simplifications to attribute handling,3,[],https://github.com/NetHack/NetHack/pull/162,https://github.com/suokko,1,https://github.com/NetHack/NetHack/pull/162,"I was reading the attribute code to understand how exactly training works. There was a couple of places that I tough could be simplified which makes it easier to read and improve algorithms in use. Changes keep functionally same except for attribute initialization where I considered tryct as a bug instead of feature.
More details for each change can be found from commit messages.
I did only a few quick tests for each change.

adjttrib changes were tested using a non-cursed tin of spinach, 20 cursed tins of spinach, amulet of magic breathing and two potion of restore ability. I tested restoring points after eating a tin works correctly. Then I tested raising the maximum with non-cursed spinach followed by cursed. Last I tested eating enough tins to go bellow three strength and restoring back to bellow earlier maximum.
init_attr changes I checked with breakpoint inside the branch preventing going over the racial maximum attribute (I created three orc wizards). I didn't test redistribution branch (I don't even know how to trigger that branch with a few wizard mode turns.)
role_abi changes was tested with a wizard and a #levelchange to level 17. Wizard gained warning and teleport control like excepted.","I was reading the attribute code to understand how exactly training works. There was a couple of places that I tough could be simplified which makes it easier to read and improve algorithms in use. Changes keep functionally same except for attribute initialization where I considered tryct as a bug instead of feature.
More details for each change can be found from commit messages.
I did only a few quick tests for each change.

adjttrib changes were tested using a non-cursed tin of spinach, 20 cursed tins of spinach, amulet of magic breathing and two potion of restore ability. I tested restoring points after eating a tin works correctly. Then I tested raising the maximum with non-cursed spinach followed by cursed. Last I tested eating enough tins to go bellow three strength and restoring back to bellow earlier maximum.
init_attr changes I checked with breakpoint inside the branch preventing going over the racial maximum attribute (I created three orc wizards). I didn't test redistribution branch (I don't even know how to trigger that branch with a few wizard mode turns.)
role_abi changes was tested with a wizard and a #levelchange to level 17. Wizard gained warning and teleport control like excepted.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,163,2018-11-25T06:20:52Z,2018-11-26T05:38:02Z,2018-11-26T05:38:02Z,CLOSED,False,37,18,1,https://github.com/suokko,Always warn about encumbrance when removing items from BoH,1,[],https://github.com/NetHack/NetHack/pull/163,https://github.com/suokko,1,https://github.com/NetHack/NetHack/pull/163,"BoH applies rounding to total weight which means weight change for a
single object can't be known unless we count all other items in the bag.
Change determines correct rounding using weight() twice. First call
includes the item about to be removed and second call does see the item.
Fixes #153","BoH applies rounding to total weight which means weight change for a
single object can't be known unless we count all other items in the bag.
Change determines correct rounding using weight() twice. First call
includes the item about to be removed and second call does see the item.
Fixes #153",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,167,2018-12-09T14:54:35Z,2018-12-09T21:37:53Z,2018-12-09T23:27:50Z,MERGED,True,1,1,1,https://github.com/copperwater,"Fix resurfacing of ""foxen"" pluralization bug",1,[],https://github.com/NetHack/NetHack/pull/167,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/167,"Inadvertently reintroduced in f9f1236. It was just the conditional
that was bad: due to resolving the possible buffer underflow when
comparing to ""muskox"", the pluralizer now only adds -es when the length
of the string is greater than 5. So for ""box"" and ""fox"" the pluralizer
will never add the -es ending, since they are greater than 5.
This commit checks for ""does not end in muskox"" correctly.","Inadvertently reintroduced in f9f1236. It was just the conditional
that was bad: due to resolving the possible buffer underflow when
comparing to ""muskox"", the pluralizer now only adds -es when the length
of the string is greater than 5. So for ""box"" and ""fox"" the pluralizer
will never add the -es ending, since they are greater than 5.
This commit checks for ""does not end in muskox"" correctly.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,168,2018-12-10T14:11:16Z,2019-09-16T16:23:22Z,2019-09-16T16:23:53Z,CLOSED,False,6321,3084,157,https://github.com/rufeooo,Autosearch implementation and game option,535,[],https://github.com/NetHack/NetHack/pull/168,https://github.com/rufeooo,1,https://github.com/NetHack/NetHack/pull/168,"Default key binding for toggle: '%'
'multi' and 'save_cm' are used to queue a search command on walk.
Autosearch will cost the player game turns which distinguishes it from intrinsic/extrinsic ""Searching"".","Default key binding for toggle: '%'
'multi' and 'save_cm' are used to queue a search command on walk.
Autosearch will cost the player game turns which distinguishes it from intrinsic/extrinsic ""Searching"".",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,168,2018-12-10T14:11:16Z,2019-09-16T16:23:22Z,2019-09-16T16:23:53Z,CLOSED,False,6321,3084,157,https://github.com/rufeooo,Autosearch implementation and game option,535,[],https://github.com/NetHack/NetHack/pull/168,https://github.com/rufeooo,2,https://github.com/NetHack/NetHack/pull/168#issuecomment-531852098,"Default key binding for toggle: '%'
'multi' and 'save_cm' are used to queue a search command on walk.
Autosearch will cost the player game turns which distinguishes it from intrinsic/extrinsic ""Searching"".",Moving PR to NetHack-3.6,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,174,2019-01-06T14:47:25Z,2019-12-27T18:37:49Z,2020-01-04T14:53:50Z,CLOSED,False,62754,74612,694,https://github.com/copperwater,Add hallucinatory trap names,1795,[],https://github.com/NetHack/NetHack/pull/174,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/174,"This adds many funny, realistic, and nonsensical traps to the game, to be shown when the player is hallucinating. Started as a discussion on IRC, and it was evidently a pretty popular idea since a bunch of devteam members ended up tossing in names, so I thought I would write this up as a patch versus vanilla directly.
Architecturally, the biggest change is merging the what_trap macro and
the ""defsyms[trap_to_defsym(ttyp)].explanation"" pattern into a single
function ""trapname"", which returns the name of the trap, handling the
hallucination case. There is also a second parameter used for overriding
hallucination in the occasional cases where the actual trap name should
always be returned.
In addition, the what_trap and random_trap macros are now obsolete and
not used anywhere, so they are removed.","This adds many funny, realistic, and nonsensical traps to the game, to be shown when the player is hallucinating. Started as a discussion on IRC, and it was evidently a pretty popular idea since a bunch of devteam members ended up tossing in names, so I thought I would write this up as a patch versus vanilla directly.
Architecturally, the biggest change is merging the what_trap macro and
the ""defsyms[trap_to_defsym(ttyp)].explanation"" pattern into a single
function ""trapname"", which returns the name of the trap, handling the
hallucination case. There is also a second parameter used for overriding
hallucination in the occasional cases where the actual trap name should
always be returned.
In addition, the what_trap and random_trap macros are now obsolete and
not used anywhere, so they are removed.",True,"{'THUMBS_UP': ['https://github.com/ostrosablin', 'https://github.com/tachoknight', 'https://github.com/NullCGT', 'https://github.com/red-kangaroo', 'https://github.com/Xaleth']}"
NetHack/NetHack,https://github.com/NetHack/NetHack,174,2019-01-06T14:47:25Z,2019-12-27T18:37:49Z,2020-01-04T14:53:50Z,CLOSED,False,62754,74612,694,https://github.com/copperwater,Add hallucinatory trap names,1795,[],https://github.com/NetHack/NetHack/pull/174,https://github.com/FredrIQ,2,https://github.com/NetHack/NetHack/pull/174#issuecomment-541334727,"This adds many funny, realistic, and nonsensical traps to the game, to be shown when the player is hallucinating. Started as a discussion on IRC, and it was evidently a pretty popular idea since a bunch of devteam members ended up tossing in names, so I thought I would write this up as a patch versus vanilla directly.
Architecturally, the biggest change is merging the what_trap macro and
the ""defsyms[trap_to_defsym(ttyp)].explanation"" pattern into a single
function ""trapname"", which returns the name of the trap, handling the
hallucination case. There is also a second parameter used for overriding
hallucination in the occasional cases where the actual trap name should
always be returned.
In addition, the what_trap and random_trap macros are now obsolete and
not used anywhere, so they are removed.","Missed opportunity to reference traps from other roguelikes (for example, Zot traps from DCSS).",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,174,2019-01-06T14:47:25Z,2019-12-27T18:37:49Z,2020-01-04T14:53:50Z,CLOSED,False,62754,74612,694,https://github.com/copperwater,Add hallucinatory trap names,1795,[],https://github.com/NetHack/NetHack/pull/174,https://github.com/copperwater,3,https://github.com/NetHack/NetHack/pull/174#issuecomment-541468323,"This adds many funny, realistic, and nonsensical traps to the game, to be shown when the player is hallucinating. Started as a discussion on IRC, and it was evidently a pretty popular idea since a bunch of devteam members ended up tossing in names, so I thought I would write this up as a patch versus vanilla directly.
Architecturally, the biggest change is merging the what_trap macro and
the ""defsyms[trap_to_defsym(ttyp)].explanation"" pattern into a single
function ""trapname"", which returns the name of the trap, handling the
hallucination case. There is also a second parameter used for overriding
hallucination in the occasional cases where the actual trap name should
always be returned.
In addition, the what_trap and random_trap macros are now obsolete and
not used anywhere, so they are removed.","If you want to provide additional trap names that I don't know about, add them in your comment here.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,174,2019-01-06T14:47:25Z,2019-12-27T18:37:49Z,2020-01-04T14:53:50Z,CLOSED,False,62754,74612,694,https://github.com/copperwater,Add hallucinatory trap names,1795,[],https://github.com/NetHack/NetHack/pull/174,https://github.com/chsk-uk,4,https://github.com/NetHack/NetHack/pull/174#issuecomment-565747050,"This adds many funny, realistic, and nonsensical traps to the game, to be shown when the player is hallucinating. Started as a discussion on IRC, and it was evidently a pretty popular idea since a bunch of devteam members ended up tossing in names, so I thought I would write this up as a patch versus vanilla directly.
Architecturally, the biggest change is merging the what_trap macro and
the ""defsyms[trap_to_defsym(ttyp)].explanation"" pattern into a single
function ""trapname"", which returns the name of the trap, handling the
hallucination case. There is also a second parameter used for overriding
hallucination in the occasional cases where the actual trap name should
always be returned.
In addition, the what_trap and random_trap macros are now obsolete and
not used anywhere, so they are removed.","If you want to provide additional trap names that I don't know about, add them in your comment here.

This is a pretty neat, and I'd like to propose adding (some of) the Warning Signs for Tomorrow as additional hallucinatory traps. In particular, these seem like worthwhile additions:

chaotic system
macroscale quantum system
stable strangelet
nanoparticle trap
diamondoid surface
self-replicating device
memetic hazard",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,175,2019-02-05T01:11:40Z,2019-02-05T05:38:08Z,2019-02-05T05:38:09Z,CLOSED,False,3,3,1,https://github.com/ethandicks,Update Makefile.ami,1,[],https://github.com/NetHack/NetHack/pull/175,https://github.com/ethandicks,1,https://github.com/NetHack/NetHack/pull/175,Added line continuations for dependency list for include/hack.h,Added line continuations for dependency list for include/hack.h,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,175,2019-02-05T01:11:40Z,2019-02-05T05:38:08Z,2019-02-05T05:38:09Z,CLOSED,False,3,3,1,https://github.com/ethandicks,Update Makefile.ami,1,[],https://github.com/NetHack/NetHack/pull/175,https://github.com/nhmall,2,https://github.com/NetHack/NetHack/pull/175#issuecomment-460478518,Added line continuations for dependency list for include/hack.h,"The pull request is a very useful way to do this going forward. I already applied this particular fix manually in response to your email earlier today, otherwise I would have used this pull request and therefore left it credited to you. The fix should be up on github in about 4 hours.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,176,2019-02-12T16:27:06Z,2021-06-05T16:26:55Z,2021-06-05T16:26:55Z,CLOSED,False,28,0,2,https://github.com/marceliwac,Linux installation scripts,3,[],https://github.com/NetHack/NetHack/pull/176,https://github.com/marceliwac,1,https://github.com/NetHack/NetHack/pull/176,Added the installation scripts for linux as discussed in #117 .,Added the installation scripts for linux as discussed in #117 .,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,176,2019-02-12T16:27:06Z,2021-06-05T16:26:55Z,2021-06-05T16:26:55Z,CLOSED,False,28,0,2,https://github.com/marceliwac,Linux installation scripts,3,[],https://github.com/NetHack/NetHack/pull/176,https://github.com/marceliwac,2,https://github.com/NetHack/NetHack/pull/176#issuecomment-463173175,Added the installation scripts for linux as discussed in #117 .,"@copperwater Can you review this PR and let me know if you think anything should be changed please? It seems like you've contributed to this repo previously so you might have some insight.
Thanks!",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,176,2019-02-12T16:27:06Z,2021-06-05T16:26:55Z,2021-06-05T16:26:55Z,CLOSED,False,28,0,2,https://github.com/marceliwac,Linux installation scripts,3,[],https://github.com/NetHack/NetHack/pull/176,https://github.com/copperwater,3,https://github.com/NetHack/NetHack/pull/176#issuecomment-463775331,Added the installation scripts for linux as discussed in #117 .,"Honestly, based on my experience with the devteam, I rather doubt they would show favoritism to Linux by providing a top-level install script for it (and note, this doesn't work on all linux flavors - it will only work on flavors where the default shell looks in ~/.local/bin, so someone could trip up on it not working if they assume it works on any Linux install). Either that, or the devteam wouldn't want to open up the possibility of Mac users and Windows users and VMS users, etc, all demanding their own top-level one-command installation script.
Now the script could be placed somewhere down in sys/ and have a cd .. attached to the beginning, but no place in sys/ really seems appropriate for it, since there's no Linux-specific folder. Maybe try to contact the devteam directly by email about it, but I'm not sure this is something they'd want to add support for.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,176,2019-02-12T16:27:06Z,2021-06-05T16:26:55Z,2021-06-05T16:26:55Z,CLOSED,False,28,0,2,https://github.com/marceliwac,Linux installation scripts,3,[],https://github.com/NetHack/NetHack/pull/176,https://github.com/Rhialto,4,https://github.com/NetHack/NetHack/pull/176#issuecomment-463789195,Added the installation scripts for linux as discussed in #117 .,"Adding to what @copperwater mentions, I see that the script uses apt-get, which is *buntu or Debian specific. Other distributions would have another command, and possibly different names for the packages to install. That should at least be mentioned in the README and briefly in the script, I'd think.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,177,2019-02-17T05:12:07Z,2019-02-19T01:38:58Z,2019-02-19T01:38:58Z,CLOSED,False,16,13,2,https://github.com/copperwater,Better semantics for mintrinsics (and bug fix),1,[],https://github.com/NetHack/NetHack/pull/177,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/177,"This addresses a bug I found and wrote a report for, and then decided to
provide a fix for it along with the report. The bug consists of
monster intrinsics (resistances, such as from armor) being wiped when a
monster changes form, resulting in a monster that lacks the resistances
even though it is still wearing the armor that should confer them.
This addresses the problem by disentangling the two meanings that
mintrinsics was trying to cover: resistances granted by the monster
form, and resistances from other sources like armor. Now, mintrinsics
refers only to the second one.
The resists_* macros defined in mondata.h (which are what the game
always uses to check resistances, instead of directly reading
mintrinsics) have been changed to also check the permonst directly for
its resistances. Under this system, a monster will always have the
resistances that its form conveys (the same as before), while also being
able to gain resistances from other sources (the same as before). The
difference is that since the permonst no longer affects mintrinsics,
it's no longer possible to have bugs like this one.
This removes the mintrinsic updating code from set_mon_data, and
as such it makes it irrelevant whether set_mon_data is called with a
flag of 0 or 1. The only place it's ever actually called with a flag
of 1 (which forced it to preserve the mintrinsics of the younger form as
well as taking on any new ones) is in grow_up(). Strictly speaking, this
new system won't preserve those younger form intrinsics, but I haven't
been able to locate any monsters in NetHack that lose resistances by
growing up, so I think it didn't actually matter in the first place.","This addresses a bug I found and wrote a report for, and then decided to
provide a fix for it along with the report. The bug consists of
monster intrinsics (resistances, such as from armor) being wiped when a
monster changes form, resulting in a monster that lacks the resistances
even though it is still wearing the armor that should confer them.
This addresses the problem by disentangling the two meanings that
mintrinsics was trying to cover: resistances granted by the monster
form, and resistances from other sources like armor. Now, mintrinsics
refers only to the second one.
The resists_* macros defined in mondata.h (which are what the game
always uses to check resistances, instead of directly reading
mintrinsics) have been changed to also check the permonst directly for
its resistances. Under this system, a monster will always have the
resistances that its form conveys (the same as before), while also being
able to gain resistances from other sources (the same as before). The
difference is that since the permonst no longer affects mintrinsics,
it's no longer possible to have bugs like this one.
This removes the mintrinsic updating code from set_mon_data, and
as such it makes it irrelevant whether set_mon_data is called with a
flag of 0 or 1. The only place it's ever actually called with a flag
of 1 (which forced it to preserve the mintrinsics of the younger form as
well as taking on any new ones) is in grow_up(). Strictly speaking, this
new system won't preserve those younger form intrinsics, but I haven't
been able to locate any monsters in NetHack that lose resistances by
growing up, so I think it didn't actually matter in the first place.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,197,2019-06-06T09:42:08Z,2019-06-08T20:38:01Z,2019-08-15T06:18:52Z,CLOSED,False,6,0,2,https://github.com/ostrosablin,curses: Add nonl() call after raw() call.,1,[],https://github.com/NetHack/NetHack/pull/197,https://github.com/ostrosablin,1,https://github.com/NetHack/NetHack/pull/197,"Fixes #195
Various implementations of curses may deal differently with raw() call,
but unless explicitly requested with nonl() call, curses implementation
is not obliged to disable CR-to-LF mapping. NetHack already handles \r
in input very well and it's possible to use both \r and \n for prompts.
What's this useful for: When not in prompt, line feed (Ctrl+J) is also a
command for ""go down"". This can cause frustration and YASD, because if
you accidentally hit Enter or Ctrl+J, your character will run towards
bottom edge of map. However, if you will use Ctrl+M to answer the
prompts (or use stty -icrnl to make Enter default to carriage return),
this will work for prompts, but if you accidentally hit it while on map,
it will just yield:
Unknown command: ^M","Fixes #195
Various implementations of curses may deal differently with raw() call,
but unless explicitly requested with nonl() call, curses implementation
is not obliged to disable CR-to-LF mapping. NetHack already handles \r
in input very well and it's possible to use both \r and \n for prompts.
What's this useful for: When not in prompt, line feed (Ctrl+J) is also a
command for ""go down"". This can cause frustration and YASD, because if
you accidentally hit Enter or Ctrl+J, your character will run towards
bottom edge of map. However, if you will use Ctrl+M to answer the
prompts (or use stty -icrnl to make Enter default to carriage return),
this will work for prompts, but if you accidentally hit it while on map,
it will just yield:
Unknown command: ^M",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,203,2019-07-07T00:05:52Z,,2022-01-20T01:40:12Z,OPEN,False,1,1,1,https://github.com/G7Nation,phrasing clarification,3,['3.6'],https://github.com/NetHack/NetHack/pull/203,https://github.com/G7Nation,1,https://github.com/NetHack/NetHack/pull/203,clarify message when a player displaces a monster,clarify message when a player displaces a monster,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,205,2019-07-19T00:50:53Z,2019-09-15T08:37:34Z,2019-09-15T16:57:05Z,CLOSED,False,2,2,2,https://github.com/cbracken,"Fix typo in manpage, help text",1,[],https://github.com/NetHack/NetHack/pull/205,https://github.com/cbracken,1,https://github.com/NetHack/NetHack/pull/205,"Corrects ""at last"" to ""at least"".","Corrects ""at last"" to ""at least"".",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,213,2019-08-13T18:19:54Z,,2022-01-27T17:24:25Z,OPEN,False,71,0,7,https://github.com/ostrosablin,add a new option: autosave,1,[],https://github.com/NetHack/NetHack/pull/213,https://github.com/ostrosablin,1,https://github.com/NetHack/NetHack/pull/213,"This patch adds a new compound option: autosave (as proposed in GitHub
issue #208).
The idea behind patch is to allow artificially limiting game session
duration, by automatically saving-and-quitting after playing for N turns
(where N is argument of the option). This could be useful for public
servers, where *Robin accounts are used as a form of multiplayer and
players play for N turns, and then give control to another person.
Another use case is to use this option to just keep yourself from
playing too long game sessions (e.g. during coffee-break, etc.).
Option is specified like this:
OPTIONS=autosave:500
Which would save-and-quit after playing for 500 turns.
Defaults to -1 (autosave disabled). 0 is invalid value, because game
would then quit right after starting. Any positive value is used as turn
countdown, and when it reaches 0, game is saved and quit automatically.
Signed-off-by: Vitaly Ostrosablin tmp6154@yandex.ru","This patch adds a new compound option: autosave (as proposed in GitHub
issue #208).
The idea behind patch is to allow artificially limiting game session
duration, by automatically saving-and-quitting after playing for N turns
(where N is argument of the option). This could be useful for public
servers, where *Robin accounts are used as a form of multiplayer and
players play for N turns, and then give control to another person.
Another use case is to use this option to just keep yourself from
playing too long game sessions (e.g. during coffee-break, etc.).
Option is specified like this:
OPTIONS=autosave:500
Which would save-and-quit after playing for 500 turns.
Defaults to -1 (autosave disabled). 0 is invalid value, because game
would then quit right after starting. Any positive value is used as turn
countdown, and when it reaches 0, game is saved and quit automatically.
Signed-off-by: Vitaly Ostrosablin tmp6154@yandex.ru",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,213,2019-08-13T18:19:54Z,,2022-01-27T17:24:25Z,OPEN,False,71,0,7,https://github.com/ostrosablin,add a new option: autosave,1,[],https://github.com/NetHack/NetHack/pull/213,https://github.com/ostrosablin,2,https://github.com/NetHack/NetHack/pull/213#issuecomment-522220894,"This patch adds a new compound option: autosave (as proposed in GitHub
issue #208).
The idea behind patch is to allow artificially limiting game session
duration, by automatically saving-and-quitting after playing for N turns
(where N is argument of the option). This could be useful for public
servers, where *Robin accounts are used as a form of multiplayer and
players play for N turns, and then give control to another person.
Another use case is to use this option to just keep yourself from
playing too long game sessions (e.g. during coffee-break, etc.).
Option is specified like this:
OPTIONS=autosave:500
Which would save-and-quit after playing for 500 turns.
Defaults to -1 (autosave disabled). 0 is invalid value, because game
would then quit right after starting. Any positive value is used as turn
countdown, and when it reaches 0, game is saved and quit automatically.
Signed-off-by: Vitaly Ostrosablin tmp6154@yandex.ru","Now Travis config is fixed and checks are passing.
During my testing, feature also works fine.
Note, that implementation doesn't give strict guarantee that you can't go over specified number of turns (e.g. if you use travel - it could use more turns than specified, but then game will quit after the command ends). This is intentional (to prevent interruption of pending commands), so that option will be safe and won't save the game in inconsistent state and/or with incompletely performed commands.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,213,2019-08-13T18:19:54Z,,2022-01-27T17:24:25Z,OPEN,False,71,0,7,https://github.com/ostrosablin,add a new option: autosave,1,[],https://github.com/NetHack/NetHack/pull/213,https://github.com/ostrosablin,3,https://github.com/NetHack/NetHack/pull/213#issuecomment-527843000,"This patch adds a new compound option: autosave (as proposed in GitHub
issue #208).
The idea behind patch is to allow artificially limiting game session
duration, by automatically saving-and-quitting after playing for N turns
(where N is argument of the option). This could be useful for public
servers, where *Robin accounts are used as a form of multiplayer and
players play for N turns, and then give control to another person.
Another use case is to use this option to just keep yourself from
playing too long game sessions (e.g. during coffee-break, etc.).
Option is specified like this:
OPTIONS=autosave:500
Which would save-and-quit after playing for 500 turns.
Defaults to -1 (autosave disabled). 0 is invalid value, because game
would then quit right after starting. Any positive value is used as turn
countdown, and when it reaches 0, game is saved and quit automatically.
Signed-off-by: Vitaly Ostrosablin tmp6154@yandex.ru","Updated the patch, now it's compiled conditionally, as long as AUTOSAVE define is set. Put the (commented out) define into experimental section of config.h.
This way patch won't cause any changes to the game, as long as it's not compiled in.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,213,2019-08-13T18:19:54Z,,2022-01-27T17:24:25Z,OPEN,False,71,0,7,https://github.com/ostrosablin,add a new option: autosave,1,[],https://github.com/NetHack/NetHack/pull/213,https://github.com/ostrosablin,4,https://github.com/NetHack/NetHack/pull/213#issuecomment-528917691,"This patch adds a new compound option: autosave (as proposed in GitHub
issue #208).
The idea behind patch is to allow artificially limiting game session
duration, by automatically saving-and-quitting after playing for N turns
(where N is argument of the option). This could be useful for public
servers, where *Robin accounts are used as a form of multiplayer and
players play for N turns, and then give control to another person.
Another use case is to use this option to just keep yourself from
playing too long game sessions (e.g. during coffee-break, etc.).
Option is specified like this:
OPTIONS=autosave:500
Which would save-and-quit after playing for 500 turns.
Defaults to -1 (autosave disabled). 0 is invalid value, because game
would then quit right after starting. Any positive value is used as turn
countdown, and when it reaches 0, game is saved and quit automatically.
Signed-off-by: Vitaly Ostrosablin tmp6154@yandex.ru",Updated to make it changeable from the game.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,213,2019-08-13T18:19:54Z,,2022-01-27T17:24:25Z,OPEN,False,71,0,7,https://github.com/ostrosablin,add a new option: autosave,1,[],https://github.com/NetHack/NetHack/pull/213,https://github.com/ostrosablin,5,https://github.com/NetHack/NetHack/pull/213#issuecomment-582074051,"This patch adds a new compound option: autosave (as proposed in GitHub
issue #208).
The idea behind patch is to allow artificially limiting game session
duration, by automatically saving-and-quitting after playing for N turns
(where N is argument of the option). This could be useful for public
servers, where *Robin accounts are used as a form of multiplayer and
players play for N turns, and then give control to another person.
Another use case is to use this option to just keep yourself from
playing too long game sessions (e.g. during coffee-break, etc.).
Option is specified like this:
OPTIONS=autosave:500
Which would save-and-quit after playing for 500 turns.
Defaults to -1 (autosave disabled). 0 is invalid value, because game
would then quit right after starting. Any positive value is used as turn
countdown, and when it reaches 0, game is saved and quit automatically.
Signed-off-by: Vitaly Ostrosablin tmp6154@yandex.ru",Rebased to 3.7 branch,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,215,2019-08-22T18:18:51Z,2019-09-15T08:37:33Z,2019-09-15T08:37:34Z,CLOSED,False,1,1,1,https://github.com/NullCGT,Added missing period in unmul().,1,[],https://github.com/NetHack/NetHack/pull/215,https://github.com/NullCGT,1,https://github.com/NetHack/NetHack/pull/215,"Being resurrected while polymorphed produces an orphaned phrase. For example, a lifesaved player polymorphed into a lichen will see the following phrase in the middle of the message log:

""You are a lichen""

The orphaned message immediately runs into the next sentence, making events difficult to follow. This change simply fixes the typo by adding a period.

""You are a lichen.""","Being resurrected while polymorphed produces an orphaned phrase. For example, a lifesaved player polymorphed into a lichen will see the following phrase in the middle of the message log:

""You are a lichen""

The orphaned message immediately runs into the next sentence, making events difficult to follow. This change simply fixes the typo by adding a period.

""You are a lichen.""",True,{'THUMBS_UP': ['https://github.com/mogigoma']}
NetHack/NetHack,https://github.com/NetHack/NetHack,216,2019-08-27T13:11:52Z,2019-09-15T08:37:33Z,2019-09-15T08:37:33Z,CLOSED,False,2,2,1,https://github.com/andymule,replaced hard-code url with devteam_url for junk mail message,1,[],https://github.com/NetHack/NetHack/pull/216,https://github.com/andymule,1,https://github.com/NetHack/NetHack/pull/216,"tiny, mostly meaningless fix. but it's a fix!","tiny, mostly meaningless fix. but it's a fix!",True,{'THUMBS_UP': ['https://github.com/ostrosablin']}
NetHack/NetHack,https://github.com/NetHack/NetHack,219,2019-09-09T03:42:06Z,2020-01-26T15:09:15Z,2020-02-01T15:34:26Z,CLOSED,False,253,65,5,https://github.com/chasonr,Align add_opvars formats with their parameters,2,[],https://github.com/NetHack/NetHack/pull/219,https://github.com/chasonr,1,https://github.com/NetHack/NetHack/pull/219,"This change fixes all add_opvars calls in lev_comp.y and its Yacc output, lev_yacc.c. Most of the changes consist of changing 'i' formats to 'l'.
A separate commit bears the Clang plugin that I used to find these mismatches. You may or may not want this in your tree.","This change fixes all add_opvars calls in lev_comp.y and its Yacc output, lev_yacc.c. Most of the changes consist of changing 'i' formats to 'l'.
A separate commit bears the Clang plugin that I used to find these mismatches. You may or may not want this in your tree.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,219,2019-09-09T03:42:06Z,2020-01-26T15:09:15Z,2020-02-01T15:34:26Z,CLOSED,False,253,65,5,https://github.com/chasonr,Align add_opvars formats with their parameters,2,[],https://github.com/NetHack/NetHack/pull/219,https://github.com/chasonr,2,https://github.com/NetHack/NetHack/pull/219#issuecomment-578510535,"This change fixes all add_opvars calls in lev_comp.y and its Yacc output, lev_yacc.c. Most of the changes consist of changing 'i' formats to 'l'.
A separate commit bears the Clang plugin that I used to find these mismatches. You may or may not want this in your tree.",The switch to Lua renders this change moot. Withdrawing.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,220,2019-09-13T03:22:14Z,2019-09-13T12:37:36Z,2019-09-14T15:03:52Z,MERGED,True,63,54,2,https://github.com/chasonr,Use faster method to write characters to VGA,1,[],https://github.com/NetHack/NetHack/pull/220,https://github.com/chasonr,1,https://github.com/NetHack/NetHack/pull/220,"It was necessary, when updating the MS-DOS port for 3.6, to revise the screen-clearing and character-drawing functions, because the background color is no longer zero. But the 3.6.1 method is rather slow, using write mode 2 and a lot more calls to outportb.
outportb is expensive when running under a virtual machine, the typical use case for the MS-DOS port these days, because it traps to the hypervisor rather than actually writing to hardware.
This change restores the speed of the 3.4.3 version. The adapter is left in write mode 0. Clearing is accomplished by writing zero to planes where the background color has a zero bit, and 0xFF where  the background color has a one bit. Characters are drawn by writing 0x00, 0xFF, the font data, or the inverse of the font data, as appropriate, to each plane.
When testing, be sure to use OPTIONS=videomode:vga, because autodetect will go to VESA mode if it can.","It was necessary, when updating the MS-DOS port for 3.6, to revise the screen-clearing and character-drawing functions, because the background color is no longer zero. But the 3.6.1 method is rather slow, using write mode 2 and a lot more calls to outportb.
outportb is expensive when running under a virtual machine, the typical use case for the MS-DOS port these days, because it traps to the hypervisor rather than actually writing to hardware.
This change restores the speed of the 3.4.3 version. The adapter is left in write mode 0. Clearing is accomplished by writing zero to planes where the background color has a zero bit, and 0xFF where  the background color has a one bit. Characters are drawn by writing 0x00, 0xFF, the font data, or the inverse of the font data, as appropriate, to each plane.
When testing, be sure to use OPTIONS=videomode:vga, because autodetect will go to VESA mode if it can.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,222,2019-09-18T15:15:31Z,2020-04-05T18:14:39Z,2020-04-05T18:14:40Z,CLOSED,False,41,24,2,https://github.com/copperwater,Refactor mongets to return the object it creates,3,[],https://github.com/NetHack/NetHack/pull/222,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/222,"Most cases where mongets is used discard the returned value (which used
to be the created object's spe); the only places that do use it are the
series of statements that give various human monsters armor and prevent
them from getting too much armor. These statements included hardcoded
constants representing the base AC of the armor, which would have caused
discrepancies if armor's base AC were ever changed.
With mongets now returning a pointer to the created object, it can just
be passed into ARM_BONUS instead, which covers both the base AC and the
enchantment. (It will also cover erosion, if anyone ever decides that
armor should rarely generate as pre-eroded).
The overall algorithm is not changed by this; human monsters should
receive armor with the same probabilities as before.
The impetus for this was to avoid ugly constructions such as the one
below:
mongets(mtmp, LONG_SWORD);
struct obj* sword = m_carrying(mtmp, LONG_SWORD);
if (sword)
    /* do thing to sword */
No such constructions appear in vanilla NetHack, but I did notice that there are a lot of mksobj calls followed by mpickobj, which could probably be replaced with this version of mongets. This would also cut down on some other code duplication (such as ensuring angels' gear is erodeproof and non-cursed).","Most cases where mongets is used discard the returned value (which used
to be the created object's spe); the only places that do use it are the
series of statements that give various human monsters armor and prevent
them from getting too much armor. These statements included hardcoded
constants representing the base AC of the armor, which would have caused
discrepancies if armor's base AC were ever changed.
With mongets now returning a pointer to the created object, it can just
be passed into ARM_BONUS instead, which covers both the base AC and the
enchantment. (It will also cover erosion, if anyone ever decides that
armor should rarely generate as pre-eroded).
The overall algorithm is not changed by this; human monsters should
receive armor with the same probabilities as before.
The impetus for this was to avoid ugly constructions such as the one
below:
mongets(mtmp, LONG_SWORD);
struct obj* sword = m_carrying(mtmp, LONG_SWORD);
if (sword)
    /* do thing to sword */
No such constructions appear in vanilla NetHack, but I did notice that there are a lot of mksobj calls followed by mpickobj, which could probably be replaced with this version of mongets. This would also cut down on some other code duplication (such as ensuring angels' gear is erodeproof and non-cursed).",True,{'THUMBS_UP': ['https://github.com/davidssmith']}
NetHack/NetHack,https://github.com/NetHack/NetHack,222,2019-09-18T15:15:31Z,2020-04-05T18:14:39Z,2020-04-05T18:14:40Z,CLOSED,False,41,24,2,https://github.com/copperwater,Refactor mongets to return the object it creates,3,[],https://github.com/NetHack/NetHack/pull/222,https://github.com/paxed,2,https://github.com/NetHack/NetHack/pull/222#issuecomment-609459053,"Most cases where mongets is used discard the returned value (which used
to be the created object's spe); the only places that do use it are the
series of statements that give various human monsters armor and prevent
them from getting too much armor. These statements included hardcoded
constants representing the base AC of the armor, which would have caused
discrepancies if armor's base AC were ever changed.
With mongets now returning a pointer to the created object, it can just
be passed into ARM_BONUS instead, which covers both the base AC and the
enchantment. (It will also cover erosion, if anyone ever decides that
armor should rarely generate as pre-eroded).
The overall algorithm is not changed by this; human monsters should
receive armor with the same probabilities as before.
The impetus for this was to avoid ugly constructions such as the one
below:
mongets(mtmp, LONG_SWORD);
struct obj* sword = m_carrying(mtmp, LONG_SWORD);
if (sword)
    /* do thing to sword */
No such constructions appear in vanilla NetHack, but I did notice that there are a lot of mksobj calls followed by mpickobj, which could probably be replaced with this version of mongets. This would also cut down on some other code duplication (such as ensuring angels' gear is erodeproof and non-cursed).",Committed.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,226,2019-09-25T00:56:16Z,2019-10-02T04:37:57Z,2021-11-02T02:46:11Z,MERGED,True,51,84,5,https://github.com/Vivit-R,Autopickup Exception Priority,6,[],https://github.com/NetHack/NetHack/pull/226,https://github.com/Vivit-R,1,https://github.com/NetHack/NetHack/pull/226,"One major limitation of the autopickup exception system is that you can't define an exception from an exception, despite both menucolors and msgtypes prioritizing rules based on the order they are defined in .nethackrc. This is because the ""always pickup"" and ""never pickup"" exceptions are tracked in different lists, and at runtime, when the player steps over an object, the game checks these lists seperately, with ""never pickup"" taking precedence. This means that if you want to pick up some but not all items matching a given expression, you may need to write a long and kludgy list of regexes to get the behavior you want.
I've edited the autopickup exception code to remove this necessity: now the exceptions are stored in one list, and conflicts between them are resolved based on their relative position in that list. Whether an exception was inclusive or exclusive was already tracked individually for each exception; I don't know why they were stored separately in the first place.  This edit makes the system both more convenient and more consistent with the semantics of menucolors and msgtypes.
With these changes, the 33 autopickup exception rules in the wiki article linked above may be replaced with the following 7 much simpler rules for the exact same effect:
AUTOPICKUP_EXCEPTION="">.* corpse.*""
AUTOPICKUP_EXCEPTION=""<.* newt corpse.*""
AUTOPICKUP_EXCEPTION=""<.* lichen corpse.*""
AUTOPICKUP_EXCEPTION=""<.* lizard corpse.*""
AUTOPICKUP_EXCEPTION=""<.* floating eye corpse.*""
AUTOPICKUP_EXCEPTION=""<.* wraith corpse.*
AUTOPICKUP_EXCEPTION="">.*>.*""","One major limitation of the autopickup exception system is that you can't define an exception from an exception, despite both menucolors and msgtypes prioritizing rules based on the order they are defined in .nethackrc. This is because the ""always pickup"" and ""never pickup"" exceptions are tracked in different lists, and at runtime, when the player steps over an object, the game checks these lists seperately, with ""never pickup"" taking precedence. This means that if you want to pick up some but not all items matching a given expression, you may need to write a long and kludgy list of regexes to get the behavior you want.
I've edited the autopickup exception code to remove this necessity: now the exceptions are stored in one list, and conflicts between them are resolved based on their relative position in that list. Whether an exception was inclusive or exclusive was already tracked individually for each exception; I don't know why they were stored separately in the first place.  This edit makes the system both more convenient and more consistent with the semantics of menucolors and msgtypes.
With these changes, the 33 autopickup exception rules in the wiki article linked above may be replaced with the following 7 much simpler rules for the exact same effect:
AUTOPICKUP_EXCEPTION="">.* corpse.*""
AUTOPICKUP_EXCEPTION=""<.* newt corpse.*""
AUTOPICKUP_EXCEPTION=""<.* lichen corpse.*""
AUTOPICKUP_EXCEPTION=""<.* lizard corpse.*""
AUTOPICKUP_EXCEPTION=""<.* floating eye corpse.*""
AUTOPICKUP_EXCEPTION=""<.* wraith corpse.*
AUTOPICKUP_EXCEPTION="">.*>.*""",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,227,2019-09-29T23:18:11Z,2019-10-06T04:37:32Z,2019-10-06T13:19:47Z,CLOSED,False,1,1,1,https://github.com/copperwater,Stop all forms of running when stepping over and reading engravings,1,[],https://github.com/NetHack/NetHack/pull/227,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/227,"I have been noticing that this happens with capital-letter running
(context.run = 1), but no other forms of it. I can't think of any reason
why capital-letter running should read the engraving but not stop, while
all other forms of running should behave differently and stop. It's also
weird because the ""There's some graffiti on the floor here"" message is
delivered when the character is paused on top of the engraving, and the
actual engraving text appears to be delivered after the character stops
running.  Particularly so because there's no map representation of
engravings to indicate where it was encountered.
This adjusts the case that checks context.run and stops when moving over
engravings to include capital-letter running.","I have been noticing that this happens with capital-letter running
(context.run = 1), but no other forms of it. I can't think of any reason
why capital-letter running should read the engraving but not stop, while
all other forms of running should behave differently and stop. It's also
weird because the ""There's some graffiti on the floor here"" message is
delivered when the character is paused on top of the engraving, and the
actual engraving text appears to be delivered after the character stops
running.  Particularly so because there's no map representation of
engravings to indicate where it was encountered.
This adjusts the case that checks context.run and stops when moving over
engravings to include capital-letter running.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,227,2019-09-29T23:18:11Z,2019-10-06T04:37:32Z,2019-10-06T13:19:47Z,CLOSED,False,1,1,1,https://github.com/copperwater,Stop all forms of running when stepping over and reading engravings,1,[],https://github.com/NetHack/NetHack/pull/227,https://github.com/nhmall,2,https://github.com/NetHack/NetHack/pull/227#issuecomment-538699124,"I have been noticing that this happens with capital-letter running
(context.run = 1), but no other forms of it. I can't think of any reason
why capital-letter running should read the engraving but not stop, while
all other forms of running should behave differently and stop. It's also
weird because the ""There's some graffiti on the floor here"" message is
delivered when the character is paused on top of the engraving, and the
actual engraving text appears to be delivered after the character stops
running.  Particularly so because there's no map representation of
engravings to indicate where it was encountered.
This adjusts the case that checks context.run and stops when moving over
engravings to include capital-letter running.","f7bf565
Travel, , <g|G> all stop on engravings,
but  told the player what the engraving said and
kept going.  The message output is buffered until map update or
another message, so player couldn't tell where hero was at the time
the engraving got shown.  Make  running stop on engravings.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,228,2019-10-01T01:42:38Z,2019-12-27T18:37:48Z,2020-01-04T14:52:39Z,CLOSED,False,58,18,6,https://github.com/copperwater,Port the autounlock feature from UnNetHack,1,[],https://github.com/NetHack/NetHack/pull/228,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/228,"This adds a boolean option, autounlock, defaulting to true. When this is
set to TRUE, messages stating that some door or container is locked are
automatically followed by a prompt asking if you would like to unlock
it, if you are carrying an unlocking tool (key, lock pick, or credit
card).
Architecturally, this extends the pick_lock function to take three
additional arguments (door coordinates or a box on the ground you are
autounlocking).
Because this adds a new field to struct flag, this is not a
save-compatible change. I have not adjusted EDITLEVEL or
VERSION_COMPATIBILITY, though.
The code that selects an unlocking tool will always look first for a
skeleton key, then a lock pick, then a credit card. Since curses, rust,
and other attributes don't really have an effect on the viability of the
unlocking device, it didn't seem to warrant making a more complex
function for that.","This adds a boolean option, autounlock, defaulting to true. When this is
set to TRUE, messages stating that some door or container is locked are
automatically followed by a prompt asking if you would like to unlock
it, if you are carrying an unlocking tool (key, lock pick, or credit
card).
Architecturally, this extends the pick_lock function to take three
additional arguments (door coordinates or a box on the ground you are
autounlocking).
Because this adds a new field to struct flag, this is not a
save-compatible change. I have not adjusted EDITLEVEL or
VERSION_COMPATIBILITY, though.
The code that selects an unlocking tool will always look first for a
skeleton key, then a lock pick, then a credit card. Since curses, rust,
and other attributes don't really have an effect on the viability of the
unlocking device, it didn't seem to warrant making a more complex
function for that.",True,"{'THUMBS_UP': ['https://github.com/NullCGT', 'https://github.com/Vivit-R', 'https://github.com/red-kangaroo']}"
NetHack/NetHack,https://github.com/NetHack/NetHack,228,2019-10-01T01:42:38Z,2019-12-27T18:37:48Z,2020-01-04T14:52:39Z,CLOSED,False,58,18,6,https://github.com/copperwater,Port the autounlock feature from UnNetHack,1,[],https://github.com/NetHack/NetHack/pull/228,https://github.com/copperwater,2,https://github.com/NetHack/NetHack/pull/228#issuecomment-536823563,"This adds a boolean option, autounlock, defaulting to true. When this is
set to TRUE, messages stating that some door or container is locked are
automatically followed by a prompt asking if you would like to unlock
it, if you are carrying an unlocking tool (key, lock pick, or credit
card).
Architecturally, this extends the pick_lock function to take three
additional arguments (door coordinates or a box on the ground you are
autounlocking).
Because this adds a new field to struct flag, this is not a
save-compatible change. I have not adjusted EDITLEVEL or
VERSION_COMPATIBILITY, though.
The code that selects an unlocking tool will always look first for a
skeleton key, then a lock pick, then a credit card. Since curses, rust,
and other attributes don't really have an effect on the viability of the
unlocking device, it didn't seem to warrant making a more complex
function for that.","Another feature, not strictly related to this, is removing the ""Lock/Unlock it?"" prompt when an unlocking tool is applied towards a door (more confirmation doesn't seem necessary; the player already indicated they want to use the tool on the door). Since it's not directly related, I didn't alter that behavior here, but it's something to consider. I'd keep the confirmation prompt in for autounlock, but remove it for manual use.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,228,2019-10-01T01:42:38Z,2019-12-27T18:37:48Z,2020-01-04T14:52:39Z,CLOSED,False,58,18,6,https://github.com/copperwater,Port the autounlock feature from UnNetHack,1,[],https://github.com/NetHack/NetHack/pull/228,https://github.com/PFGimenez,3,https://github.com/NetHack/NetHack/pull/228#issuecomment-542602232,"This adds a boolean option, autounlock, defaulting to true. When this is
set to TRUE, messages stating that some door or container is locked are
automatically followed by a prompt asking if you would like to unlock
it, if you are carrying an unlocking tool (key, lock pick, or credit
card).
Architecturally, this extends the pick_lock function to take three
additional arguments (door coordinates or a box on the ground you are
autounlocking).
Because this adds a new field to struct flag, this is not a
save-compatible change. I have not adjusted EDITLEVEL or
VERSION_COMPATIBILITY, though.
The code that selects an unlocking tool will always look first for a
skeleton key, then a lock pick, then a credit card. Since curses, rust,
and other attributes don't really have an effect on the viability of the
unlocking device, it didn't seem to warrant making a more complex
function for that.","I would argue that suggesting to use a credit card to unlock something is a bit of a spoiler and, as such, should not be included in the autounlock feature. Or maybe propose it only if the player already used his credit card as an unlocking tool earlier.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,228,2019-10-01T01:42:38Z,2019-12-27T18:37:48Z,2020-01-04T14:52:39Z,CLOSED,False,58,18,6,https://github.com/copperwater,Port the autounlock feature from UnNetHack,1,[],https://github.com/NetHack/NetHack/pull/228,https://github.com/copperwater,4,https://github.com/NetHack/NetHack/pull/228#issuecomment-542707148,"This adds a boolean option, autounlock, defaulting to true. When this is
set to TRUE, messages stating that some door or container is locked are
automatically followed by a prompt asking if you would like to unlock
it, if you are carrying an unlocking tool (key, lock pick, or credit
card).
Architecturally, this extends the pick_lock function to take three
additional arguments (door coordinates or a box on the ground you are
autounlocking).
Because this adds a new field to struct flag, this is not a
save-compatible change. I have not adjusted EDITLEVEL or
VERSION_COMPATIBILITY, though.
The code that selects an unlocking tool will always look first for a
skeleton key, then a lock pick, then a credit card. Since curses, rust,
and other attributes don't really have an effect on the viability of the
unlocking device, it didn't seem to warrant making a more complex
function for that.","It doesn't seem worth it to me to specially track whether a player already used a credit card, and also add some inconsistent interface behavior for a spoiled player who hasn't yet used one (think a Tourist who bumps into a locked door in the first room), all for the sake of preserving the minor spoiler of ""locks can be opened with a credit card"" for a hypothetical unspoiled player.
Not including the card as a suggestion at all would also be annoying and inconsistent to spoiled players. I don't imagine most players would be happy with an autounlock that works with keys and lock picks but makes you have to apply credit cards manually.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,228,2019-10-01T01:42:38Z,2019-12-27T18:37:48Z,2020-01-04T14:52:39Z,CLOSED,False,58,18,6,https://github.com/copperwater,Port the autounlock feature from UnNetHack,1,[],https://github.com/NetHack/NetHack/pull/228,https://github.com/bhaak,5,https://github.com/NetHack/NetHack/pull/228#issuecomment-568561326,"This adds a boolean option, autounlock, defaulting to true. When this is
set to TRUE, messages stating that some door or container is locked are
automatically followed by a prompt asking if you would like to unlock
it, if you are carrying an unlocking tool (key, lock pick, or credit
card).
Architecturally, this extends the pick_lock function to take three
additional arguments (door coordinates or a box on the ground you are
autounlocking).
Because this adds a new field to struct flag, this is not a
save-compatible change. I have not adjusted EDITLEVEL or
VERSION_COMPATIBILITY, though.
The code that selects an unlocking tool will always look first for a
skeleton key, then a lock pick, then a credit card. Since curses, rust,
and other attributes don't really have an effect on the viability of the
unlocking device, it didn't seem to warrant making a more complex
function for that.","There might be some cultural thing going on as well. I don't know how many people nowadays think about using a credit card to crack a door lock. It's likely no longer possible.
With iron safes in UnNetHack I only realized later that modern safes can't be cracked with a stethoscope. You either steal the whole safe to crack it somewhere else or get a drill.
I don't even know if stethoscopes ever were useful or if this was just a movie thing from really old movies.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,228,2019-10-01T01:42:38Z,2019-12-27T18:37:48Z,2020-01-04T14:52:39Z,CLOSED,False,58,18,6,https://github.com/copperwater,Port the autounlock feature from UnNetHack,1,[],https://github.com/NetHack/NetHack/pull/228,https://github.com/k21971,6,https://github.com/NetHack/NetHack/pull/228#issuecomment-568575184,"This adds a boolean option, autounlock, defaulting to true. When this is
set to TRUE, messages stating that some door or container is locked are
automatically followed by a prompt asking if you would like to unlock
it, if you are carrying an unlocking tool (key, lock pick, or credit
card).
Architecturally, this extends the pick_lock function to take three
additional arguments (door coordinates or a box on the ground you are
autounlocking).
Because this adds a new field to struct flag, this is not a
save-compatible change. I have not adjusted EDITLEVEL or
VERSION_COMPATIBILITY, though.
The code that selects an unlocking tool will always look first for a
skeleton key, then a lock pick, then a credit card. Since curses, rust,
and other attributes don't really have an effect on the viability of the
unlocking device, it didn't seem to warrant making a more complex
function for that.","Yes, you can use a credit card to open certain types of locked doors. Even to this day.
Older safes could be and were 'cracked' using a stethoscope, you could listen for the clicks as you turned the dial.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,230,2019-10-12T14:36:53Z,2019-10-14T08:37:25Z,2019-10-14T08:37:25Z,CLOSED,False,78,56,5,https://github.com/FredrIQ,DECgraphics in the curses windowport,3,[],https://github.com/NetHack/NetHack/pull/230,https://github.com/FredrIQ,1,https://github.com/NetHack/NetHack/pull/230,"Curses attempts (and fails) to disable DECgraphics due to incompatibilities.
Instead of fixing this, I simply just made curses able to handle DECgraphics.","Curses attempts (and fails) to disable DECgraphics due to incompatibilities.
Instead of fixing this, I simply just made curses able to handle DECgraphics.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,231,2019-10-14T22:34:50Z,2020-01-28T20:17:01Z,2020-01-28T20:17:01Z,CLOSED,False,44,12,6,https://github.com/Vivit-R,Allow Specification of Length of Sparkle Animation,6,[],https://github.com/NetHack/NetHack/pull/231,https://github.com/Vivit-R,1,https://github.com/NetHack/NetHack/pull/231,"Currently, the sparkle animation is either 21 or 0 frames long, with no in-between, which is silly. This PR makes the sparkle option accept an integer argument to specify the length in frames of the sparkle animation. Under this new definition, OPTION=nosparkle is equivalent to OPTION=sparkle:0. Config files that specify the default-redundant OPTION=sparkle will result in a missing parameter error, but game behavior will not be changed. The behavior of any config file syntactically valid as of 3.6.2 should be unchanged.","Currently, the sparkle animation is either 21 or 0 frames long, with no in-between, which is silly. This PR makes the sparkle option accept an integer argument to specify the length in frames of the sparkle animation. Under this new definition, OPTION=nosparkle is equivalent to OPTION=sparkle:0. Config files that specify the default-redundant OPTION=sparkle will result in a missing parameter error, but game behavior will not be changed. The behavior of any config file syntactically valid as of 3.6.2 should be unchanged.",True,{'THUMBS_UP': ['https://github.com/zinspire']}
NetHack/NetHack,https://github.com/NetHack/NetHack,232,2019-10-15T18:45:53Z,2019-10-17T06:39:59Z,2019-10-17T06:40:00Z,CLOSED,False,138,143,9,https://github.com/FredrIQ,Curses symset,4,[],https://github.com/NetHack/NetHack/pull/232,https://github.com/FredrIQ,1,https://github.com/NetHack/NetHack/pull/232,"This patch makes the previous ""cursesgraphics"" symset into a fully fledged symset, as well as renaming it ""curses"". It also does some minor adjustments to the graphics set to complete a few missing cases where it's likely that the developer wanted more refinements, approximating IBMgraphics as much as possible while retaining the previous limitations in terms of character availability.
It also changes default symset handling under curses, to load the curses symset by default, unless ""default"" is configured explicitly (which will cause it to use the internal graphics symbols), either in the file, or via the O menu.
This PR also fixes a bug with DECgraphics handling (commit c557998), which should probably be merged even if the rest of this is dismissed.","This patch makes the previous ""cursesgraphics"" symset into a fully fledged symset, as well as renaming it ""curses"". It also does some minor adjustments to the graphics set to complete a few missing cases where it's likely that the developer wanted more refinements, approximating IBMgraphics as much as possible while retaining the previous limitations in terms of character availability.
It also changes default symset handling under curses, to load the curses symset by default, unless ""default"" is configured explicitly (which will cause it to use the internal graphics symbols), either in the file, or via the O menu.
This PR also fixes a bug with DECgraphics handling (commit c557998), which should probably be merged even if the rest of this is dismissed.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,232,2019-10-15T18:45:53Z,2019-10-17T06:39:59Z,2019-10-17T06:40:00Z,CLOSED,False,138,143,9,https://github.com/FredrIQ,Curses symset,4,[],https://github.com/NetHack/NetHack/pull/232,https://github.com/FredrIQ,2,https://github.com/NetHack/NetHack/pull/232#issuecomment-542729170,"This patch makes the previous ""cursesgraphics"" symset into a fully fledged symset, as well as renaming it ""curses"". It also does some minor adjustments to the graphics set to complete a few missing cases where it's likely that the developer wanted more refinements, approximating IBMgraphics as much as possible while retaining the previous limitations in terms of character availability.
It also changes default symset handling under curses, to load the curses symset by default, unless ""default"" is configured explicitly (which will cause it to use the internal graphics symbols), either in the file, or via the O menu.
This PR also fixes a bug with DECgraphics handling (commit c557998), which should probably be merged even if the rest of this is dismissed.",Travis build error appears to be on their side after a quick look-over. Sorry about the confusion.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,232,2019-10-15T18:45:53Z,2019-10-17T06:39:59Z,2019-10-17T06:40:00Z,CLOSED,False,138,143,9,https://github.com/FredrIQ,Curses symset,4,[],https://github.com/NetHack/NetHack/pull/232,https://github.com/FredrIQ,3,https://github.com/NetHack/NetHack/pull/232#issuecomment-543029277,"This patch makes the previous ""cursesgraphics"" symset into a fully fledged symset, as well as renaming it ""curses"". It also does some minor adjustments to the graphics set to complete a few missing cases where it's likely that the developer wanted more refinements, approximating IBMgraphics as much as possible while retaining the previous limitations in terms of character availability.
It also changes default symset handling under curses, to load the curses symset by default, unless ""default"" is configured explicitly (which will cause it to use the internal graphics symbols), either in the file, or via the O menu.
This PR also fixes a bug with DECgraphics handling (commit c557998), which should probably be merged even if the rest of this is dismissed.",Merged in d0c4d27.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,233,2019-10-17T02:20:26Z,2019-10-18T04:38:20Z,2019-10-18T13:48:12Z,CLOSED,False,1,1,1,https://github.com/sobjornstad,Fix pluralization of Nazgûl in rumors.tru,1,[],https://github.com/NetHack/NetHack/pull/233,https://github.com/sobjornstad,1,https://github.com/NetHack/NetHack/pull/233,"Pedantic fix because it showed up in my game and made me cringe: the proper plural of Nazgûl is Nazgul, not Nazguls. A quick grep shows a note in the 3.6.0 fixes list referencing this exact issue, but the rumor was missed when correcting the game's pluralization.
A few references in case there's any doubt. :-)

http://tolkiengateway.net/wiki/Nazgûl
https://en.wikipedia.org/wiki/Nazgûl
https://scifi.stackexchange.com/questions/214683/are-all-ringwraiths-called-nazgûl-in-lotr","Pedantic fix because it showed up in my game and made me cringe: the proper plural of Nazgûl is Nazgul, not Nazguls. A quick grep shows a note in the 3.6.0 fixes list referencing this exact issue, but the rumor was missed when correcting the game's pluralization.
A few references in case there's any doubt. :-)

http://tolkiengateway.net/wiki/Nazgûl
https://en.wikipedia.org/wiki/Nazgûl
https://scifi.stackexchange.com/questions/214683/are-all-ringwraiths-called-nazgûl-in-lotr",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,234,2019-10-17T03:53:37Z,,2022-01-27T17:08:54Z,OPEN,False,56,32,3,https://github.com/Vivit-R,The Colours of Magic,15,[],https://github.com/NetHack/NetHack/pull/234,https://github.com/Vivit-R,1,https://github.com/NetHack/NetHack/pull/234,"Currently, if you want to change the colors of explosions or zapped rays, e.g., to make lightning a different color than frost, or to make magic missiles a different color than sleep rays, you have to edit global constants arrays defined in decl.c and mapglyph.c. This branch extends the configurable color palette in color.h to cover rays and explosions as well as object materials.","Currently, if you want to change the colors of explosions or zapped rays, e.g., to make lightning a different color than frost, or to make magic missiles a different color than sleep rays, you have to edit global constants arrays defined in decl.c and mapglyph.c. This branch extends the configurable color palette in color.h to cover rays and explosions as well as object materials.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,234,2019-10-17T03:53:37Z,,2022-01-27T17:08:54Z,OPEN,False,56,32,3,https://github.com/Vivit-R,The Colours of Magic,15,[],https://github.com/NetHack/NetHack/pull/234,https://github.com/FredrIQ,2,https://github.com/NetHack/NetHack/pull/234#issuecomment-543163548,"Currently, if you want to change the colors of explosions or zapped rays, e.g., to make lightning a different color than frost, or to make magic missiles a different color than sleep rays, you have to edit global constants arrays defined in decl.c and mapglyph.c. This branch extends the configurable color palette in color.h to cover rays and explosions as well as object materials.","Customizeable coloring for things in general is something I've considered implementing by means of text based tilesets so you don't need to recompile the entire game for it. Kinda like what exists now for symbols in dat/symbols.
Perhaps make something like that?",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,234,2019-10-17T03:53:37Z,,2022-01-27T17:08:54Z,OPEN,False,56,32,3,https://github.com/Vivit-R,The Colours of Magic,15,[],https://github.com/NetHack/NetHack/pull/234,https://github.com/ostrosablin,3,https://github.com/NetHack/NetHack/pull/234#issuecomment-543249107,"Currently, if you want to change the colors of explosions or zapped rays, e.g., to make lightning a different color than frost, or to make magic missiles a different color than sleep rays, you have to edit global constants arrays defined in decl.c and mapglyph.c. This branch extends the configurable color palette in color.h to cover rays and explosions as well as object materials.","Shouldn't poison and acid colors be swapped? I think going logically from dragon colors, yellow is for acid and green is for poison, not the other way around.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,234,2019-10-17T03:53:37Z,,2022-01-27T17:08:54Z,OPEN,False,56,32,3,https://github.com/Vivit-R,The Colours of Magic,15,[],https://github.com/NetHack/NetHack/pull/234,https://github.com/Vivit-R,4,https://github.com/NetHack/NetHack/pull/234#issuecomment-543488607,"Currently, if you want to change the colors of explosions or zapped rays, e.g., to make lightning a different color than frost, or to make magic missiles a different color than sleep rays, you have to edit global constants arrays defined in decl.c and mapglyph.c. This branch extends the configurable color palette in color.h to cover rays and explosions as well as object materials.","Shouldn't poison and acid colors be swapped? I think going logically from dragon colors, yellow is for acid and green is for poison, not the other way around.

I would think so too, but I kept the beam colorings the same as how they are defined in decl.x.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,234,2019-10-17T03:53:37Z,,2022-01-27T17:08:54Z,OPEN,False,56,32,3,https://github.com/Vivit-R,The Colours of Magic,15,[],https://github.com/NetHack/NetHack/pull/234,https://github.com/Vivit-R,5,https://github.com/NetHack/NetHack/pull/234#issuecomment-544108770,"Currently, if you want to change the colors of explosions or zapped rays, e.g., to make lightning a different color than frost, or to make magic missiles a different color than sleep rays, you have to edit global constants arrays defined in decl.c and mapglyph.c. This branch extends the configurable color palette in color.h to cover rays and explosions as well as object materials.",@nhcopier -- It was an accident that this branch was based on my sparkle PR. I've reverted the changes from that branch -- struct flags should back to normal.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,234,2019-10-17T03:53:37Z,,2022-01-27T17:08:54Z,OPEN,False,56,32,3,https://github.com/Vivit-R,The Colours of Magic,15,[],https://github.com/NetHack/NetHack/pull/234,https://github.com/copperwater,6,https://github.com/NetHack/NetHack/pull/234#issuecomment-544217329,"Currently, if you want to change the colors of explosions or zapped rays, e.g., to make lightning a different color than frost, or to make magic missiles a different color than sleep rays, you have to edit global constants arrays defined in decl.c and mapglyph.c. This branch extends the configurable color palette in color.h to cover rays and explosions as well as object materials.","nhcopier is a bot. You probably want @nhmall?
Also, great name for this pull request.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,234,2019-10-17T03:53:37Z,,2022-01-27T17:08:54Z,OPEN,False,56,32,3,https://github.com/Vivit-R,The Colours of Magic,15,[],https://github.com/NetHack/NetHack/pull/234,https://github.com/nhmall,7,https://github.com/NetHack/NetHack/pull/234#issuecomment-549167166,"Currently, if you want to change the colors of explosions or zapped rays, e.g., to make lightning a different color than frost, or to make magic missiles a different color than sleep rays, you have to edit global constants arrays defined in decl.c and mapglyph.c. This branch extends the configurable color palette in color.h to cover rays and explosions as well as object materials.","Shouldn't poison and acid colors be swapped? I think going logically from dragon colors, yellow is for acid and green is for poison, not the other way around.

I would think so too, but I kept the beam colorings the same as how they are defined in decl.x.

Doesn't  this  change HI_ZAP to a different color?",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,234,2019-10-17T03:53:37Z,,2022-01-27T17:08:54Z,OPEN,False,56,32,3,https://github.com/Vivit-R,The Colours of Magic,15,[],https://github.com/NetHack/NetHack/pull/234,https://github.com/Vivit-R,8,https://github.com/NetHack/NetHack/pull/234#issuecomment-564841272,"Currently, if you want to change the colors of explosions or zapped rays, e.g., to make lightning a different color than frost, or to make magic missiles a different color than sleep rays, you have to edit global constants arrays defined in decl.c and mapglyph.c. This branch extends the configurable color palette in color.h to cover rays and explosions as well as object materials.",@nhmall I don't think so? I split the color for magic missile off from HI_ZAP so different colors could be used for the resistance sparkle and for the default magic missile color if desired,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,235,2019-10-17T15:03:13Z,2019-10-18T04:38:19Z,2019-10-18T04:38:19Z,CLOSED,False,13,9,5,https://github.com/FredrIQ,Invert symset.fallback to symset.explicit and centralize handling.,2,[],https://github.com/NetHack/NetHack/pull/235,https://github.com/FredrIQ,1,https://github.com/NetHack/NetHack/pull/235,"The invert allows us to default to FALSE, which means we only need
to handle symset.explicit in a single function (read_sym_file).
This allows removing the per-case setting of it, and as a result fixes
an inconsistency where OPTIONS=DECgraphics/IBMgraphics failed to set it
correctly, causing curses to ignore the option.
Tested: result

no symset or DEC/IBMgraphics; curses
DECgraphics, no symset: DECgraphics
default symset: default
""default2"" symset (invalid): curses
DECgraphics symset: DECgraphics

Trying to load more than one symset (by using DECgraphics and symset:default, for example) will use the last entry. This also happens if the last entry is invalid and a previous one wasn't. I believe this is consistent with tty.","The invert allows us to default to FALSE, which means we only need
to handle symset.explicit in a single function (read_sym_file).
This allows removing the per-case setting of it, and as a result fixes
an inconsistency where OPTIONS=DECgraphics/IBMgraphics failed to set it
correctly, causing curses to ignore the option.
Tested: result

no symset or DEC/IBMgraphics; curses
DECgraphics, no symset: DECgraphics
default symset: default
""default2"" symset (invalid): curses
DECgraphics symset: DECgraphics

Trying to load more than one symset (by using DECgraphics and symset:default, for example) will use the last entry. This also happens if the last entry is invalid and a previous one wasn't. I believe this is consistent with tty.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,235,2019-10-17T15:03:13Z,2019-10-18T04:38:19Z,2019-10-18T04:38:19Z,CLOSED,False,13,9,5,https://github.com/FredrIQ,Invert symset.fallback to symset.explicit and centralize handling.,2,[],https://github.com/NetHack/NetHack/pull/235,https://github.com/FredrIQ,2,https://github.com/NetHack/NetHack/pull/235#issuecomment-543235678,"The invert allows us to default to FALSE, which means we only need
to handle symset.explicit in a single function (read_sym_file).
This allows removing the per-case setting of it, and as a result fixes
an inconsistency where OPTIONS=DECgraphics/IBMgraphics failed to set it
correctly, causing curses to ignore the option.
Tested: result

no symset or DEC/IBMgraphics; curses
DECgraphics, no symset: DECgraphics
default symset: default
""default2"" symset (invalid): curses
DECgraphics symset: DECgraphics

Trying to load more than one symset (by using DECgraphics and symset:default, for example) will use the last entry. This also happens if the last entry is invalid and a previous one wasn't. I believe this is consistent with tty.","Apparently ""explicit"" is reserved on Windows according to Travis, so I ended up using explicitly instead. Sorry about that.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,235,2019-10-17T15:03:13Z,2019-10-18T04:38:19Z,2019-10-18T04:38:19Z,CLOSED,False,13,9,5,https://github.com/FredrIQ,Invert symset.fallback to symset.explicit and centralize handling.,2,[],https://github.com/NetHack/NetHack/pull/235,https://github.com/FredrIQ,3,https://github.com/NetHack/NetHack/pull/235#issuecomment-543375684,"The invert allows us to default to FALSE, which means we only need
to handle symset.explicit in a single function (read_sym_file).
This allows removing the per-case setting of it, and as a result fixes
an inconsistency where OPTIONS=DECgraphics/IBMgraphics failed to set it
correctly, causing curses to ignore the option.
Tested: result

no symset or DEC/IBMgraphics; curses
DECgraphics, no symset: DECgraphics
default symset: default
""default2"" symset (invalid): curses
DECgraphics symset: DECgraphics

Trying to load more than one symset (by using DECgraphics and symset:default, for example) will use the last entry. This also happens if the last entry is invalid and a previous one wasn't. I believe this is consistent with tty.",This pull request as a file (single-commit): http://home.fiq.se/symset_fix.patch,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,236,2019-10-17T23:12:16Z,2019-10-23T04:50:16Z,2019-10-23T04:50:17Z,CLOSED,False,1,0,1,https://github.com/heiner,Keep wintty.c's maxwin up-to-date.,1,[],https://github.com/NetHack/NetHack/pull/236,https://github.com/heiner,1,https://github.com/NetHack/NetHack/pull/236,"Otherwise the check in 
  
    
      NetHack/win/tty/wintty.c
    
    
         Line 1423
      in
      2172c5e
    
  
  
    

        
          
           if (maxwin == MAXWIN) 
        
    
  

 doesn't seem to make sense.
An alternative would be to remove both the check and  maxwin altogether.","Otherwise the check in 
  
    
      NetHack/win/tty/wintty.c
    
    
         Line 1423
      in
      2172c5e
    
  
  
    

        
          
           if (maxwin == MAXWIN) 
        
    
  

 doesn't seem to make sense.
An alternative would be to remove both the check and  maxwin altogether.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,236,2019-10-17T23:12:16Z,2019-10-23T04:50:16Z,2019-10-23T04:50:17Z,CLOSED,False,1,0,1,https://github.com/heiner,Keep wintty.c's maxwin up-to-date.,1,[],https://github.com/NetHack/NetHack/pull/236,https://github.com/nhmall,2,https://github.com/NetHack/NetHack/pull/236#issuecomment-545264902,"Otherwise the check in 
  
    
      NetHack/win/tty/wintty.c
    
    
         Line 1423
      in
      2172c5e
    
  
  
    

        
          
           if (maxwin == MAXWIN) 
        
    
  

 doesn't seem to make sense.
An alternative would be to remove both the check and  maxwin altogether.",b7ca0b4,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,237,2019-10-18T13:54:43Z,2019-10-18T20:37:25Z,2019-10-18T20:37:25Z,MERGED,True,1,7,1,https://github.com/NHTangles,curses - remove unused variable in curses_str_remainder(),1,[],https://github.com/NetHack/NetHack/pull/237,https://github.com/NHTangles,1,https://github.com/NetHack/NetHack/pull/237,"I noticed a previous attempt at removing this as a larger push to silence various compiler warnings resulted in an infinite loop in the message window (the first line of a split message repeated indefinitely until ESC is pressed), so this was reverted.  The issue was that a 'for' loop which affected the value of 'count' was removed, but a subsequent check on 'substr[count]' which relied on the value of 'count' after the for loop was left in.
This PR contains the correct fix.","I noticed a previous attempt at removing this as a larger push to silence various compiler warnings resulted in an infinite loop in the message window (the first line of a split message repeated indefinitely until ESC is pressed), so this was reverted.  The issue was that a 'for' loop which affected the value of 'count' was removed, but a subsequent check on 'substr[count]' which relied on the value of 'count' after the for loop was left in.
This PR contains the correct fix.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,239,2019-10-26T10:07:43Z,,2022-01-20T01:39:31Z,OPEN,False,59,51,1,https://github.com/Leoltron,Switched to Getopt::Long,3,['3.6'],https://github.com/NetHack/NetHack/pull/239,https://github.com/Leoltron,1,https://github.com/NetHack/NetHack/pull/239,,,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,241,2019-11-04T07:20:30Z,2019-12-08T21:26:44Z,2019-12-08T21:26:44Z,CLOSED,False,46011,69076,547,https://github.com/hornlo,.gitignore: add .vimrc,925,[],https://github.com/NetHack/NetHack/pull/241,https://github.com/hornlo,1,https://github.com/NetHack/NetHack/pull/241,"I prefer a local .vimrc to incorporate the Vim settings suggested in DEVEL/code_style.txt rather than alter my global preferences -- which may not always match these suggestions.
This prevents inadvertently adding my (or others') preferences to the repo.","I prefer a local .vimrc to incorporate the Vim settings suggested in DEVEL/code_style.txt rather than alter my global preferences -- which may not always match these suggestions.
This prevents inadvertently adding my (or others') preferences to the repo.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,241,2019-11-04T07:20:30Z,2019-12-08T21:26:44Z,2019-12-08T21:26:44Z,CLOSED,False,46011,69076,547,https://github.com/hornlo,.gitignore: add .vimrc,925,[],https://github.com/NetHack/NetHack/pull/241,https://github.com/FredrIQ,2,https://github.com/NetHack/NetHack/pull/241#issuecomment-556014896,"I prefer a local .vimrc to incorporate the Vim settings suggested in DEVEL/code_style.txt rather than alter my global preferences -- which may not always match these suggestions.
This prevents inadvertently adding my (or others') preferences to the repo.",Would also be nice to ignore .dir-locals.el for similar reasons. I have it on gitignore for my own NetHack variant's repo for this reason.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,242,2019-11-04T09:10:26Z,2019-12-08T21:26:08Z,2019-12-08T21:26:08Z,CLOSED,False,46066,69076,548,https://github.com/hornlo,new unix hint: centos6-sing-tty-cur,925,[],https://github.com/NetHack/NetHack/pull/242,https://github.com/hornlo,1,https://github.com/NetHack/NetHack/pull/242,"CentOS 6 build for tty + curses, single-user
installs in $HOME:
~/lib/nethackdir
~/bin/nethack
built under:
gcc: gcc (GCC) 4.4.7 20120313 (Red Hat 4.4.7-23)
ncurses: 5.7.20090207
linux: 2.6.32-754.23.1.el6.centos.plus.x86_64","CentOS 6 build for tty + curses, single-user
installs in $HOME:
~/lib/nethackdir
~/bin/nethack
built under:
gcc: gcc (GCC) 4.4.7 20120313 (Red Hat 4.4.7-23)
ncurses: 5.7.20090207
linux: 2.6.32-754.23.1.el6.centos.plus.x86_64",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,243,2019-11-05T03:30:06Z,2019-11-05T08:37:26Z,2019-12-23T23:23:14Z,MERGED,True,15,7,1,https://github.com/chasonr,Deal with FreeDOS bugs when building pdcurses.a,1,[],https://github.com/NetHack/NetHack/pull/243,https://github.com/chasonr,1,https://github.com/NetHack/NetHack/pull/243,"There is an incompatibility between FreeDOS and DJGPP that limits the number of command line arguments. The 3.6.2 Makefile.GCC deals with this bug by building libraries in stages and then linking them to form executables, in particular the main NetHack binary.
This change provides the same workaround for pdcurses.a, allowing NetHack to build on FreeDOS.","There is an incompatibility between FreeDOS and DJGPP that limits the number of command line arguments. The 3.6.2 Makefile.GCC deals with this bug by building libraries in stages and then linking them to form executables, in particular the main NetHack binary.
This change provides the same workaround for pdcurses.a, allowing NetHack to build on FreeDOS.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,247,2019-11-27T16:12:59Z,2019-11-28T02:37:18Z,2019-11-28T02:37:19Z,MERGED,True,20,4,1,https://github.com/FredrIQ,Fix alternate number pad interpretation only working for diagonals,1,[],https://github.com/NetHack/NetHack/pull/247,https://github.com/FredrIQ,1,https://github.com/NetHack/NetHack/pull/247,"This fixes the issue brought up in https://www.reddit.com/r/nethack/comments/dv3pae/curses_and_the_numberpad/?st=k3hgply6&sh=dbc2bf7d .
I don't know why the ""regular"" (tty) method doesn't seem to work for him,
but I'm going to chalk it up to a PDCurses oddity. What I do know, however,
is that the alternate method I added a year ago or maybe longer, that allows
numpad usage even with number_pad:0 (to retain the default keybindings in case
an user is used to them, while keeping number pad behaviour making sense,
similar to NetHack4+friends) was only partially implemented, for some reason.
This adds the rest of the keys, meaning that this means of key interpretation
should be more realible. KEY_A2/B1/B3/C2 are not standard keys in the Curses
documentation, and is thus behind an ifdef -- but PDCurses, amongst other
implementations, makes use of them.
As a side effect, Home/End/PgUp/PgDn are now interpreted as diagonal movement,
since some terminals interpret number_pad keys that way. I do not consider this
a problem since they went unused in normal gameplay anyway (This does not
interfere with menus or similar).","This fixes the issue brought up in https://www.reddit.com/r/nethack/comments/dv3pae/curses_and_the_numberpad/?st=k3hgply6&sh=dbc2bf7d .
I don't know why the ""regular"" (tty) method doesn't seem to work for him,
but I'm going to chalk it up to a PDCurses oddity. What I do know, however,
is that the alternate method I added a year ago or maybe longer, that allows
numpad usage even with number_pad:0 (to retain the default keybindings in case
an user is used to them, while keeping number pad behaviour making sense,
similar to NetHack4+friends) was only partially implemented, for some reason.
This adds the rest of the keys, meaning that this means of key interpretation
should be more realible. KEY_A2/B1/B3/C2 are not standard keys in the Curses
documentation, and is thus behind an ifdef -- but PDCurses, amongst other
implementations, makes use of them.
As a side effect, Home/End/PgUp/PgDn are now interpreted as diagonal movement,
since some terminals interpret number_pad keys that way. I do not consider this
a problem since they went unused in normal gameplay anyway (This does not
interfere with menus or similar).",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,249,2019-12-07T08:16:59Z,,2022-01-20T01:39:04Z,OPEN,False,666,538,69,https://github.com/MaddTheSane,Quiet most of the -Wcomma warnings,2,['3.6'],https://github.com/NetHack/NetHack/pull/249,https://github.com/MaddTheSane,1,https://github.com/NetHack/NetHack/pull/249,"Xcode likes to enable -Wcomma warnings when upgrading projects. For the most part, just replacing the offending comma with a semicolon quiets the warning.
I'm not even going to touch those that are in a for declaration.","Xcode likes to enable -Wcomma warnings when upgrading projects. For the most part, just replacing the offending comma with a semicolon quiets the warning.
I'm not even going to touch those that are in a for declaration.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,250,2019-12-07T08:38:34Z,,2022-01-20T01:38:29Z,OPEN,False,10459,15968,259,https://github.com/MaddTheSane,ANSI-fying,62,['3.6'],https://github.com/NetHack/NetHack/pull/250,https://github.com/MaddTheSane,1,https://github.com/NetHack/NetHack/pull/250,"This moves NetHack away from K&R to ANSI C calling conventions.
This also replaces #10","This moves NetHack away from K&R to ANSI C calling conventions.
This also replaces #10",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,251,2019-12-07T23:52:36Z,,2022-01-27T17:09:16Z,OPEN,False,6,62,3,https://github.com/copperwater,Remove the mysterious force,1,[],https://github.com/NetHack/NetHack/pull/251,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/251,"The mysterious force is the single most universally hated feature in
NetHack.
Backsliding through Gehennom has proven to be so boring and tedious for
the player, while adding nothing of value to the game, that nearly every
variant removes it. (The sole exception is NetHack4, which makes very
few gameplay changes.)
To compensate for this, all horizontal teleportation within a level is
blocked when carrying the Amulet, rather than 1/3 of the time.
This makes alignments slightly less differentiated, since there is no
longer an advantage to playing chaotic to make the force less odious.
However, this behavior was already on a shaky basis flavor-wise (Moloch
and Gehennom itself have no bias against any alignment, and plenty of
lawful devils and demon lords reside there).
I would also note that in the absence of the mysterious force, there are
several other proposals and implementations of ways to make post-Amulet
Gehennom more interesting than simply backtracking through completed
levels, ranging from monster spawning behavior to a boss rush of demon
lords to the entire branch beginning to collapse.","The mysterious force is the single most universally hated feature in
NetHack.
Backsliding through Gehennom has proven to be so boring and tedious for
the player, while adding nothing of value to the game, that nearly every
variant removes it. (The sole exception is NetHack4, which makes very
few gameplay changes.)
To compensate for this, all horizontal teleportation within a level is
blocked when carrying the Amulet, rather than 1/3 of the time.
This makes alignments slightly less differentiated, since there is no
longer an advantage to playing chaotic to make the force less odious.
However, this behavior was already on a shaky basis flavor-wise (Moloch
and Gehennom itself have no bias against any alignment, and plenty of
lawful devils and demon lords reside there).
I would also note that in the absence of the mysterious force, there are
several other proposals and implementations of ways to make post-Amulet
Gehennom more interesting than simply backtracking through completed
levels, ranging from monster spawning behavior to a boss rush of demon
lords to the entire branch beginning to collapse.",True,"{'THUMBS_UP': ['https://github.com/k21971', 'https://github.com/zinspire', 'https://github.com/FredrIQ', 'https://github.com/PFGimenez', 'https://github.com/bluebear94', 'https://github.com/NullCGT', 'https://github.com/RojjaCebolla'], 'THUMBS_DOWN': ['https://github.com/Xaleth']}"
NetHack/NetHack,https://github.com/NetHack/NetHack,251,2019-12-07T23:52:36Z,,2022-01-27T17:09:16Z,OPEN,False,6,62,3,https://github.com/copperwater,Remove the mysterious force,1,[],https://github.com/NetHack/NetHack/pull/251,https://github.com/jeremyn,2,https://github.com/NetHack/NetHack/pull/251#issuecomment-751905456,"The mysterious force is the single most universally hated feature in
NetHack.
Backsliding through Gehennom has proven to be so boring and tedious for
the player, while adding nothing of value to the game, that nearly every
variant removes it. (The sole exception is NetHack4, which makes very
few gameplay changes.)
To compensate for this, all horizontal teleportation within a level is
blocked when carrying the Amulet, rather than 1/3 of the time.
This makes alignments slightly less differentiated, since there is no
longer an advantage to playing chaotic to make the force less odious.
However, this behavior was already on a shaky basis flavor-wise (Moloch
and Gehennom itself have no bias against any alignment, and plenty of
lawful devils and demon lords reside there).
I would also note that in the absence of the mysterious force, there are
several other proposals and implementations of ways to make post-Amulet
Gehennom more interesting than simply backtracking through completed
levels, ranging from monster spawning behavior to a boss rush of demon
lords to the entire branch beginning to collapse.","To maintain the current balance -- meaning, to give something back to chaotic characters -- what about making balrogs always peaceful to chaotics? This would mirror the situation with lawful characters and Archons, and making balrogs the opposite of Archons would be consistent with Tolkien lore.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,251,2019-12-07T23:52:36Z,,2022-01-27T17:09:16Z,OPEN,False,6,62,3,https://github.com/copperwater,Remove the mysterious force,1,[],https://github.com/NetHack/NetHack/pull/251,https://github.com/copperwater,3,https://github.com/NetHack/NetHack/pull/251#issuecomment-752168463,"The mysterious force is the single most universally hated feature in
NetHack.
Backsliding through Gehennom has proven to be so boring and tedious for
the player, while adding nothing of value to the game, that nearly every
variant removes it. (The sole exception is NetHack4, which makes very
few gameplay changes.)
To compensate for this, all horizontal teleportation within a level is
blocked when carrying the Amulet, rather than 1/3 of the time.
This makes alignments slightly less differentiated, since there is no
longer an advantage to playing chaotic to make the force less odious.
However, this behavior was already on a shaky basis flavor-wise (Moloch
and Gehennom itself have no bias against any alignment, and plenty of
lawful devils and demon lords reside there).
I would also note that in the absence of the mysterious force, there are
several other proposals and implementations of ways to make post-Amulet
Gehennom more interesting than simply backtracking through completed
levels, ranging from monster spawning behavior to a boss rush of demon
lords to the entire branch beginning to collapse.","Making balrogs always peaceful to chaotics would also mean making them peaceful to all elves, which is not very consistent with Tolkien. Also, balrogs aren't really in the same weight class as an Archon; the biggest threat they usually pose is generating with a bullwhip and disarming the player.
This may be a mostly moot point since vanilla has since nerfed the mysterious force in a way that makes it much more even for all alignments and though I hope they would still consider this pull request, they may not be willing to remove it entirely.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,251,2019-12-07T23:52:36Z,,2022-01-27T17:09:16Z,OPEN,False,6,62,3,https://github.com/copperwater,Remove the mysterious force,1,[],https://github.com/NetHack/NetHack/pull/251,https://github.com/jeremyn,4,https://github.com/NetHack/NetHack/pull/251#issuecomment-752272569,"The mysterious force is the single most universally hated feature in
NetHack.
Backsliding through Gehennom has proven to be so boring and tedious for
the player, while adding nothing of value to the game, that nearly every
variant removes it. (The sole exception is NetHack4, which makes very
few gameplay changes.)
To compensate for this, all horizontal teleportation within a level is
blocked when carrying the Amulet, rather than 1/3 of the time.
This makes alignments slightly less differentiated, since there is no
longer an advantage to playing chaotic to make the force less odious.
However, this behavior was already on a shaky basis flavor-wise (Moloch
and Gehennom itself have no bias against any alignment, and plenty of
lawful devils and demon lords reside there).
I would also note that in the absence of the mysterious force, there are
several other proposals and implementations of ways to make post-Amulet
Gehennom more interesting than simply backtracking through completed
levels, ranging from monster spawning behavior to a boss rush of demon
lords to the entire branch beginning to collapse.","I agree it's a micro-change that's not worth messing with.
But just to nerd out a bit: in Tolkien, balrogs were powerful ""fallen angels"" and so the natural opposites of Archons. Also NetHack elves are inconsistent since they are appear Tolkien-ish but are chaotic which Tolkien elves were not. Perhaps their alignment was inspired by Discworld elves which were evil or at least totally amoral. And I agree that balrogs are less powerful than Archons in terms of NetHack stats, but that's balanced by balrogs showing up earlier. You normally only deal with Archons after leaving Gehennom during the run up with the Amulet.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,252,2019-12-08T16:28:33Z,2019-12-08T23:37:44Z,2021-05-23T00:05:08Z,CLOSED,False,6,2,1,https://github.com/copperwater,Allow teleportation onto the Vibrating Square,1,[],https://github.com/NetHack/NetHack/pull/252,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/252,"It's a minor annoyance when you forget you can't do this in vanilla and
then get relocated somewhere random on the level. Since it's not a
harmful ""trap"", just allow the adventurer to teleport directly onto it.","It's a minor annoyance when you forget you can't do this in vanilla and
then get relocated somewhere random on the level. Since it's not a
harmful ""trap"", just allow the adventurer to teleport directly onto it.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,252,2019-12-08T16:28:33Z,2019-12-08T23:37:44Z,2021-05-23T00:05:08Z,CLOSED,False,6,2,1,https://github.com/copperwater,Allow teleportation onto the Vibrating Square,1,[],https://github.com/NetHack/NetHack/pull/252,https://github.com/copperwater,2,https://github.com/NetHack/NetHack/pull/252#issuecomment-562989457,"It's a minor annoyance when you forget you can't do this in vanilla and
then get relocated somewhere random on the level. Since it's not a
harmful ""trap"", just allow the adventurer to teleport directly onto it.","Bouncing the pull request to make Travis run on it again, since the build on this repository was broken when I opened this.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,253,2019-12-08T16:48:02Z,,2022-01-27T17:09:25Z,OPEN,False,2,4,1,https://github.com/copperwater,Make mkclass usually unable to select an out-of-difficulty monster,2,[],https://github.com/NetHack/NetHack/pull/253,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/253,"This constitutes the surprisingly small ""compromise mkclass fix"", in
which mkclass always picks an in-difficulty monster from the target
class, unless there are none eligible, in which case a monster will be
selected from the set of monsters with the next lowest difficulty within
that class. The fix consists only of removing the 50% chance that
mkclass would push forward into out-of-difficulty territory when it
didn't need to.
Specific perennial problems that this fixes:

The infamous master and arch-liches in the Castle, even when
lower-level liches are valid targets, and even though master and
arch-liches are supposed to generate only in Gehennom.
Large and giant mimics generating in shops on very low dungeon levels,
spelling pretty certain death for anyone who stumbled into them due to
their stickiness and heavy attacks.
The random h in the Gnomish Mines being a mind flayer or master mind
flayer, which also tends to mean doom for low-level characters who are
unequipped to handle them.

Basically any place mkclass is called is a possible thing fixed by this,
though most such cases are probably latent (e.g. there are no insects
that would be out of difficulty by the time the player is encountering
the summon insects spell). However, if very high difficulty monsters are
ever added to a class that mkclass is called with, this will continue to
work to prevent them from being selected.
Note that if the player manages to genocide or extinct all the
in-difficulty members of a class, the lowest out-of-difficulty one(s)
will still be chosen.
One of the concerns brought up about mkclass fixes in this vein was that
they would substantially wreck the intended difficulty of certain
levels, particularly the Healer quest's dragons. I haven't fully
reviewed all possible special levels for these types of things, but in
the case of the Healer quest the dragons are the same as before. (The
baby dragons of lower difficulty have 0 frequency and can't be chosen by
mkclass, while all of the adult dragons have the same 20 difficulty and
so get selected uniformly. This fix also avoids the bug in which the
first out-of-difficulty monster, such as gray dragon, would always be
selected. Note that if higher-difficulty dragons were added to the
end of the dragon list, those would not appear in the Healer quest
under this system unless the player were already at a very high
experience level to put them in-difficulty.)
Other proposed mkclass fixes, such as the one where if all eligible
monsters from a class are out-of-difficulty then no monster generates or
a random monster not in the desired class generates, would however throw
the balance of difficulty on those levels out of whack.
This does not change mkclass_poly, which is explicitly designed to
ignore difficulty considerations (and is only used for player polyself
or monpolycontrol in wizard mode).","This constitutes the surprisingly small ""compromise mkclass fix"", in
which mkclass always picks an in-difficulty monster from the target
class, unless there are none eligible, in which case a monster will be
selected from the set of monsters with the next lowest difficulty within
that class. The fix consists only of removing the 50% chance that
mkclass would push forward into out-of-difficulty territory when it
didn't need to.
Specific perennial problems that this fixes:

The infamous master and arch-liches in the Castle, even when
lower-level liches are valid targets, and even though master and
arch-liches are supposed to generate only in Gehennom.
Large and giant mimics generating in shops on very low dungeon levels,
spelling pretty certain death for anyone who stumbled into them due to
their stickiness and heavy attacks.
The random h in the Gnomish Mines being a mind flayer or master mind
flayer, which also tends to mean doom for low-level characters who are
unequipped to handle them.

Basically any place mkclass is called is a possible thing fixed by this,
though most such cases are probably latent (e.g. there are no insects
that would be out of difficulty by the time the player is encountering
the summon insects spell). However, if very high difficulty monsters are
ever added to a class that mkclass is called with, this will continue to
work to prevent them from being selected.
Note that if the player manages to genocide or extinct all the
in-difficulty members of a class, the lowest out-of-difficulty one(s)
will still be chosen.
One of the concerns brought up about mkclass fixes in this vein was that
they would substantially wreck the intended difficulty of certain
levels, particularly the Healer quest's dragons. I haven't fully
reviewed all possible special levels for these types of things, but in
the case of the Healer quest the dragons are the same as before. (The
baby dragons of lower difficulty have 0 frequency and can't be chosen by
mkclass, while all of the adult dragons have the same 20 difficulty and
so get selected uniformly. This fix also avoids the bug in which the
first out-of-difficulty monster, such as gray dragon, would always be
selected. Note that if higher-difficulty dragons were added to the
end of the dragon list, those would not appear in the Healer quest
under this system unless the player were already at a very high
experience level to put them in-difficulty.)
Other proposed mkclass fixes, such as the one where if all eligible
monsters from a class are out-of-difficulty then no monster generates or
a random monster not in the desired class generates, would however throw
the balance of difficulty on those levels out of whack.
This does not change mkclass_poly, which is explicitly designed to
ignore difficulty considerations (and is only used for player polyself
or monpolycontrol in wizard mode).",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,253,2019-12-08T16:48:02Z,,2022-01-27T17:09:25Z,OPEN,False,2,4,1,https://github.com/copperwater,Make mkclass usually unable to select an out-of-difficulty monster,2,[],https://github.com/NetHack/NetHack/pull/253,https://github.com/copperwater,2,https://github.com/NetHack/NetHack/pull/253#issuecomment-563001605,"This constitutes the surprisingly small ""compromise mkclass fix"", in
which mkclass always picks an in-difficulty monster from the target
class, unless there are none eligible, in which case a monster will be
selected from the set of monsters with the next lowest difficulty within
that class. The fix consists only of removing the 50% chance that
mkclass would push forward into out-of-difficulty territory when it
didn't need to.
Specific perennial problems that this fixes:

The infamous master and arch-liches in the Castle, even when
lower-level liches are valid targets, and even though master and
arch-liches are supposed to generate only in Gehennom.
Large and giant mimics generating in shops on very low dungeon levels,
spelling pretty certain death for anyone who stumbled into them due to
their stickiness and heavy attacks.
The random h in the Gnomish Mines being a mind flayer or master mind
flayer, which also tends to mean doom for low-level characters who are
unequipped to handle them.

Basically any place mkclass is called is a possible thing fixed by this,
though most such cases are probably latent (e.g. there are no insects
that would be out of difficulty by the time the player is encountering
the summon insects spell). However, if very high difficulty monsters are
ever added to a class that mkclass is called with, this will continue to
work to prevent them from being selected.
Note that if the player manages to genocide or extinct all the
in-difficulty members of a class, the lowest out-of-difficulty one(s)
will still be chosen.
One of the concerns brought up about mkclass fixes in this vein was that
they would substantially wreck the intended difficulty of certain
levels, particularly the Healer quest's dragons. I haven't fully
reviewed all possible special levels for these types of things, but in
the case of the Healer quest the dragons are the same as before. (The
baby dragons of lower difficulty have 0 frequency and can't be chosen by
mkclass, while all of the adult dragons have the same 20 difficulty and
so get selected uniformly. This fix also avoids the bug in which the
first out-of-difficulty monster, such as gray dragon, would always be
selected. Note that if higher-difficulty dragons were added to the
end of the dragon list, those would not appear in the Healer quest
under this system unless the player were already at a very high
experience level to put them in-difficulty.)
Other proposed mkclass fixes, such as the one where if all eligible
monsters from a class are out-of-difficulty then no monster generates or
a random monster not in the desired class generates, would however throw
the balance of difficulty on those levels out of whack.
This does not change mkclass_poly, which is explicitly designed to
ignore difficulty considerations (and is only used for player polyself
or monpolycontrol in wizard mode).","Bouncing the pull request to make Travis run on it again, since the build on this repository was broken when I opened this.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,254,2019-12-08T19:15:27Z,2019-12-08T20:30:06Z,2019-12-08T20:30:06Z,CLOSED,False,2,1,1,https://github.com/NullCGT,Allow teleportation onto the vibrating square in wizard mode,1,[],https://github.com/NetHack/NetHack/pull/254,https://github.com/NullCGT,1,https://github.com/NetHack/NetHack/pull/254,"The vibrating square is classified as a trap, and as such cannot be teleported onto. Testing the vibrating square in wizard mode can be frustrating, since it cannot be teleported onto directly.","The vibrating square is classified as a trap, and as such cannot be teleported onto. Testing the vibrating square in wizard mode can be frustrating, since it cannot be teleported onto directly.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,254,2019-12-08T19:15:27Z,2019-12-08T20:30:06Z,2019-12-08T20:30:06Z,CLOSED,False,2,1,1,https://github.com/NullCGT,Allow teleportation onto the vibrating square in wizard mode,1,[],https://github.com/NetHack/NetHack/pull/254,https://github.com/NullCGT,2,https://github.com/NetHack/NetHack/pull/254#issuecomment-562990127,"The vibrating square is classified as a trap, and as such cannot be teleported onto. Testing the vibrating square in wizard mode can be frustrating, since it cannot be teleported onto directly.","Closed out, since this duplicates #254.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,255,2019-12-10T09:18:10Z,2020-08-18T14:47:20Z,2020-08-18T14:47:20Z,CLOSED,False,8,2,1,https://github.com/rockola,moc-qt5 is called just moc on Ubuntu,2,[],https://github.com/NetHack/NetHack/pull/255,https://github.com/rockola,1,https://github.com/NetHack/NetHack/pull/255,"moc-qt5 is called just moc on Ubuntu (at least on a system with just qt5 and no previous install of qt4).
This patch sets MOC to moc-qt5 if it is found in PATH (old default behaviour), if not, to moc if it is found in PATH. If neither moc nor moc-qt5 is found, an error is signaled.
This patch does not address the multiple ways in which moc is called (e.g. as $(QTDIR)/bin/moc in Makefile.src and elsewhere). However, this patch is sufficient for building NetHack 3.7 (and 3.6 if backported) on Ubuntu 19.10.","moc-qt5 is called just moc on Ubuntu (at least on a system with just qt5 and no previous install of qt4).
This patch sets MOC to moc-qt5 if it is found in PATH (old default behaviour), if not, to moc if it is found in PATH. If neither moc nor moc-qt5 is found, an error is signaled.
This patch does not address the multiple ways in which moc is called (e.g. as $(QTDIR)/bin/moc in Makefile.src and elsewhere). However, this patch is sufficient for building NetHack 3.7 (and 3.6 if backported) on Ubuntu 19.10.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,255,2019-12-10T09:18:10Z,2020-08-18T14:47:20Z,2020-08-18T14:47:20Z,CLOSED,False,8,2,1,https://github.com/rockola,moc-qt5 is called just moc on Ubuntu,2,[],https://github.com/NetHack/NetHack/pull/255,https://github.com/rockola,2,https://github.com/NetHack/NetHack/pull/255#issuecomment-563943306,"moc-qt5 is called just moc on Ubuntu (at least on a system with just qt5 and no previous install of qt4).
This patch sets MOC to moc-qt5 if it is found in PATH (old default behaviour), if not, to moc if it is found in PATH. If neither moc nor moc-qt5 is found, an error is signaled.
This patch does not address the multiple ways in which moc is called (e.g. as $(QTDIR)/bin/moc in Makefile.src and elsewhere). However, this patch is sufficient for building NetHack 3.7 (and 3.6 if backported) on Ubuntu 19.10.","Actually, old default behaviour is to set MOC to moc-qt5 unconditionally.

This patch sets MOC to moc-qt5 if it is found in PATH (old default behaviour)",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,255,2019-12-10T09:18:10Z,2020-08-18T14:47:20Z,2020-08-18T14:47:20Z,CLOSED,False,8,2,1,https://github.com/rockola,moc-qt5 is called just moc on Ubuntu,2,[],https://github.com/NetHack/NetHack/pull/255,https://github.com/nhmall,3,https://github.com/NetHack/NetHack/pull/255#issuecomment-675523895,"moc-qt5 is called just moc on Ubuntu (at least on a system with just qt5 and no previous install of qt4).
This patch sets MOC to moc-qt5 if it is found in PATH (old default behaviour), if not, to moc if it is found in PATH. If neither moc nor moc-qt5 is found, an error is signaled.
This patch does not address the multiple ways in which moc is called (e.g. as $(QTDIR)/bin/moc in Makefile.src and elsewhere). However, this patch is sufficient for building NetHack 3.7 (and 3.6 if backported) on Ubuntu 19.10.",This shouldn't be an issue with hints/linux.2020 on NetHack-3.7 branch,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,257,2019-12-13T02:41:56Z,2022-02-13T14:24:52Z,2022-02-13T14:24:53Z,CLOSED,False,36,1,3,https://github.com/copperwater,Add paranoid swim for both water and lava,1,[],https://github.com/NetHack/NetHack/pull/257,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/257,"Adds ""swim"" to the list of paranoid options, which prevents you from
accidentally moving into liquids.
The mechanics are similar to what I believe NetHack4 has, where you
must use the 'm' movement prefix in order to deliberately move onto a liquid
space from a space with a different terrain type. Attempting to move into the
liquid without using 'm' will do nothing.
This behavior is suppressed if you are levitating, flying, wearing known
[fireproof] water walking boots, or have the option turned off.
I'm not sure that this fits better as a paranoid option than just a regular
option. It logically fits in, but it doesn't involve any prompts. As with all
the other paranoid options, it is settable via config file, as ""swim"". This
doesn't seem like the best name to me, but I don't have a better one.
In xNetHack, where this code comes from, the m-movement into liquids is
enforced for all players and ParanoidSwim just provides an additional failsafe,
but it turns out there are many players who want to have the ability to die by
making a typo and stepping into lava, so the implementation here allows this
current behavior by having the option off.
Final note: Since having no confirmation for walking on lava means you must
have fire resistance, there's a minor and extremely marginal exploit which
allows a player with identified fireproof water walking boots to informally
test whether an unidentified ring is fire resistance. I did not think it was
important enough to be worth adding code that figures out whether the player
knows they have fire resistance.","Adds ""swim"" to the list of paranoid options, which prevents you from
accidentally moving into liquids.
The mechanics are similar to what I believe NetHack4 has, where you
must use the 'm' movement prefix in order to deliberately move onto a liquid
space from a space with a different terrain type. Attempting to move into the
liquid without using 'm' will do nothing.
This behavior is suppressed if you are levitating, flying, wearing known
[fireproof] water walking boots, or have the option turned off.
I'm not sure that this fits better as a paranoid option than just a regular
option. It logically fits in, but it doesn't involve any prompts. As with all
the other paranoid options, it is settable via config file, as ""swim"". This
doesn't seem like the best name to me, but I don't have a better one.
In xNetHack, where this code comes from, the m-movement into liquids is
enforced for all players and ParanoidSwim just provides an additional failsafe,
but it turns out there are many players who want to have the ability to die by
making a typo and stepping into lava, so the implementation here allows this
current behavior by having the option off.
Final note: Since having no confirmation for walking on lava means you must
have fire resistance, there's a minor and extremely marginal exploit which
allows a player with identified fireproof water walking boots to informally
test whether an unidentified ring is fire resistance. I did not think it was
important enough to be worth adding code that figures out whether the player
knows they have fire resistance.",True,"{'THUMBS_UP': ['https://github.com/MishaCatskill', 'https://github.com/gebulmer', 'https://github.com/Planet-Patrick', 'https://github.com/Ardub23']}"
NetHack/NetHack,https://github.com/NetHack/NetHack,257,2019-12-13T02:41:56Z,2022-02-13T14:24:52Z,2022-02-13T14:24:53Z,CLOSED,False,36,1,3,https://github.com/copperwater,Add paranoid swim for both water and lava,1,[],https://github.com/NetHack/NetHack/pull/257,https://github.com/paxed,2,https://github.com/NetHack/NetHack/pull/257#issuecomment-1038154021,"Adds ""swim"" to the list of paranoid options, which prevents you from
accidentally moving into liquids.
The mechanics are similar to what I believe NetHack4 has, where you
must use the 'm' movement prefix in order to deliberately move onto a liquid
space from a space with a different terrain type. Attempting to move into the
liquid without using 'm' will do nothing.
This behavior is suppressed if you are levitating, flying, wearing known
[fireproof] water walking boots, or have the option turned off.
I'm not sure that this fits better as a paranoid option than just a regular
option. It logically fits in, but it doesn't involve any prompts. As with all
the other paranoid options, it is settable via config file, as ""swim"". This
doesn't seem like the best name to me, but I don't have a better one.
In xNetHack, where this code comes from, the m-movement into liquids is
enforced for all players and ParanoidSwim just provides an additional failsafe,
but it turns out there are many players who want to have the ability to die by
making a typo and stepping into lava, so the implementation here allows this
current behavior by having the option off.
Final note: Since having no confirmation for walking on lava means you must
have fire resistance, there's a minor and extremely marginal exploit which
allows a player with identified fireproof water walking boots to informally
test whether an unidentified ring is fire resistance. I did not think it was
important enough to be worth adding code that figures out whether the player
knows they have fire resistance.",Added to 3.7 in 03c715f,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,259,2019-12-14T22:55:48Z,,2022-02-11T00:08:41Z,OPEN,False,202,1,6,https://github.com/copperwater,"Add paranoid trap, which prevents accidental triggering of harmful traps",1,[],https://github.com/NetHack/NetHack/pull/259,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/259,"Primarily, this ports UnNetHack's paranoid_trap to the vanilla 3.6+
paranoid options system via xNetHack. When this option is enabled, the
player must type out ""yes"" before moving onto a known trap that apparently
poses a danger to them. When not enabled, the game behaves as it did
before, and there is no warning for moving onto traps.
If the hero is hallucinating, there is no way to determine what the trap
actually is, so they will always be prompted to confirm.  If the hero is
stunned or confused or has prefixed their movement command with 'm',
they will not be prompted regardless of the trap type (overriding
the hallucination case).
The bulk of the code in this commit is a new function, immune_to_trap,
which is how the game decides whether a given monster or the hero is
safe from a certain type of trap. This helps avoid interface annoyances
in places like levitating over the holes in the Castle (a levitating
hero can never trigger a hole just by moving onto the space, so they're
""immune"" to it). The function has three possible results: obviously
immune, obviously not immune, or immune but only by way of items or
intrinsics the hero might not have identified. Only the first case lets
you move onto that trap type freely. Since the game doesn't track your
knowledge of your own intrinsics, this is imperfect; a player with
innate fire resistance (and no other source of it) will still be
prompted before moving onto a fire trap.
I have not currently implemented logic allowing monsters to freely move
onto traps they have seen and are immune to, though this should
theoretically only require changing a couple lines in monmove.c.","Primarily, this ports UnNetHack's paranoid_trap to the vanilla 3.6+
paranoid options system via xNetHack. When this option is enabled, the
player must type out ""yes"" before moving onto a known trap that apparently
poses a danger to them. When not enabled, the game behaves as it did
before, and there is no warning for moving onto traps.
If the hero is hallucinating, there is no way to determine what the trap
actually is, so they will always be prompted to confirm.  If the hero is
stunned or confused or has prefixed their movement command with 'm',
they will not be prompted regardless of the trap type (overriding
the hallucination case).
The bulk of the code in this commit is a new function, immune_to_trap,
which is how the game decides whether a given monster or the hero is
safe from a certain type of trap. This helps avoid interface annoyances
in places like levitating over the holes in the Castle (a levitating
hero can never trigger a hole just by moving onto the space, so they're
""immune"" to it). The function has three possible results: obviously
immune, obviously not immune, or immune but only by way of items or
intrinsics the hero might not have identified. Only the first case lets
you move onto that trap type freely. Since the game doesn't track your
knowledge of your own intrinsics, this is imperfect; a player with
innate fire resistance (and no other source of it) will still be
prompted before moving onto a fire trap.
I have not currently implemented logic allowing monsters to freely move
onto traps they have seen and are immune to, though this should
theoretically only require changing a couple lines in monmove.c.",True,"{'THUMBS_UP': ['https://github.com/gebulmer', 'https://github.com/Ardub23']}"
NetHack/NetHack,https://github.com/NetHack/NetHack,259,2019-12-14T22:55:48Z,,2022-02-11T00:08:41Z,OPEN,False,202,1,6,https://github.com/copperwater,"Add paranoid trap, which prevents accidental triggering of harmful traps",1,[],https://github.com/NetHack/NetHack/pull/259,https://github.com/Planet-Patrick,2,https://github.com/NetHack/NetHack/pull/259#issuecomment-990914968,"Primarily, this ports UnNetHack's paranoid_trap to the vanilla 3.6+
paranoid options system via xNetHack. When this option is enabled, the
player must type out ""yes"" before moving onto a known trap that apparently
poses a danger to them. When not enabled, the game behaves as it did
before, and there is no warning for moving onto traps.
If the hero is hallucinating, there is no way to determine what the trap
actually is, so they will always be prompted to confirm.  If the hero is
stunned or confused or has prefixed their movement command with 'm',
they will not be prompted regardless of the trap type (overriding
the hallucination case).
The bulk of the code in this commit is a new function, immune_to_trap,
which is how the game decides whether a given monster or the hero is
safe from a certain type of trap. This helps avoid interface annoyances
in places like levitating over the holes in the Castle (a levitating
hero can never trigger a hole just by moving onto the space, so they're
""immune"" to it). The function has three possible results: obviously
immune, obviously not immune, or immune but only by way of items or
intrinsics the hero might not have identified. Only the first case lets
you move onto that trap type freely. Since the game doesn't track your
knowledge of your own intrinsics, this is imperfect; a player with
innate fire resistance (and no other source of it) will still be
prompted before moving onto a fire trap.
I have not currently implemented logic allowing monsters to freely move
onto traps they have seen and are immune to, though this should
theoretically only require changing a couple lines in monmove.c.","If you're hallucinating, shouldn't you step onto the trap if you think it's harmless?",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,259,2019-12-14T22:55:48Z,,2022-02-11T00:08:41Z,OPEN,False,202,1,6,https://github.com/copperwater,"Add paranoid trap, which prevents accidental triggering of harmful traps",1,[],https://github.com/NetHack/NetHack/pull/259,https://github.com/copperwater,3,https://github.com/NetHack/NetHack/pull/259#issuecomment-1030333096,"Primarily, this ports UnNetHack's paranoid_trap to the vanilla 3.6+
paranoid options system via xNetHack. When this option is enabled, the
player must type out ""yes"" before moving onto a known trap that apparently
poses a danger to them. When not enabled, the game behaves as it did
before, and there is no warning for moving onto traps.
If the hero is hallucinating, there is no way to determine what the trap
actually is, so they will always be prompted to confirm.  If the hero is
stunned or confused or has prefixed their movement command with 'm',
they will not be prompted regardless of the trap type (overriding
the hallucination case).
The bulk of the code in this commit is a new function, immune_to_trap,
which is how the game decides whether a given monster or the hero is
safe from a certain type of trap. This helps avoid interface annoyances
in places like levitating over the holes in the Castle (a levitating
hero can never trigger a hole just by moving onto the space, so they're
""immune"" to it). The function has three possible results: obviously
immune, obviously not immune, or immune but only by way of items or
intrinsics the hero might not have identified. Only the first case lets
you move onto that trap type freely. Since the game doesn't track your
knowledge of your own intrinsics, this is imperfect; a player with
innate fire resistance (and no other source of it) will still be
prompted before moving onto a fire trap.
I have not currently implemented logic allowing monsters to freely move
onto traps they have seen and are immune to, though this should
theoretically only require changing a couple lines in monmove.c.","If you're hallucinating, the trap will appear as various hallucinatory traps, some of which are quite dangerous! The hero wouldn't see it as harmless.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,259,2019-12-14T22:55:48Z,,2022-02-11T00:08:41Z,OPEN,False,202,1,6,https://github.com/copperwater,"Add paranoid trap, which prevents accidental triggering of harmful traps",1,[],https://github.com/NetHack/NetHack/pull/259,https://github.com/Planet-Patrick,4,https://github.com/NetHack/NetHack/pull/259#issuecomment-1030592903,"Primarily, this ports UnNetHack's paranoid_trap to the vanilla 3.6+
paranoid options system via xNetHack. When this option is enabled, the
player must type out ""yes"" before moving onto a known trap that apparently
poses a danger to them. When not enabled, the game behaves as it did
before, and there is no warning for moving onto traps.
If the hero is hallucinating, there is no way to determine what the trap
actually is, so they will always be prompted to confirm.  If the hero is
stunned or confused or has prefixed their movement command with 'm',
they will not be prompted regardless of the trap type (overriding
the hallucination case).
The bulk of the code in this commit is a new function, immune_to_trap,
which is how the game decides whether a given monster or the hero is
safe from a certain type of trap. This helps avoid interface annoyances
in places like levitating over the holes in the Castle (a levitating
hero can never trigger a hole just by moving onto the space, so they're
""immune"" to it). The function has three possible results: obviously
immune, obviously not immune, or immune but only by way of items or
intrinsics the hero might not have identified. Only the first case lets
you move onto that trap type freely. Since the game doesn't track your
knowledge of your own intrinsics, this is imperfect; a player with
innate fire resistance (and no other source of it) will still be
prompted before moving onto a fire trap.
I have not currently implemented logic allowing monsters to freely move
onto traps they have seen and are immune to, though this should
theoretically only require changing a couple lines in monmove.c.",@copperwater But it WOULD see it as harmless for some traps though right?,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,259,2019-12-14T22:55:48Z,,2022-02-11T00:08:41Z,OPEN,False,202,1,6,https://github.com/copperwater,"Add paranoid trap, which prevents accidental triggering of harmful traps",1,[],https://github.com/NetHack/NetHack/pull/259,https://github.com/copperwater,5,https://github.com/NetHack/NetHack/pull/259#issuecomment-1035664068,"Primarily, this ports UnNetHack's paranoid_trap to the vanilla 3.6+
paranoid options system via xNetHack. When this option is enabled, the
player must type out ""yes"" before moving onto a known trap that apparently
poses a danger to them. When not enabled, the game behaves as it did
before, and there is no warning for moving onto traps.
If the hero is hallucinating, there is no way to determine what the trap
actually is, so they will always be prompted to confirm.  If the hero is
stunned or confused or has prefixed their movement command with 'm',
they will not be prompted regardless of the trap type (overriding
the hallucination case).
The bulk of the code in this commit is a new function, immune_to_trap,
which is how the game decides whether a given monster or the hero is
safe from a certain type of trap. This helps avoid interface annoyances
in places like levitating over the holes in the Castle (a levitating
hero can never trigger a hole just by moving onto the space, so they're
""immune"" to it). The function has three possible results: obviously
immune, obviously not immune, or immune but only by way of items or
intrinsics the hero might not have identified. Only the first case lets
you move onto that trap type freely. Since the game doesn't track your
knowledge of your own intrinsics, this is imperfect; a player with
innate fire resistance (and no other source of it) will still be
prompted before moving onto a fire trap.
I have not currently implemented logic allowing monsters to freely move
onto traps they have seen and are immune to, though this should
theoretically only require changing a couple lines in monmove.c.","I think it's reasonable to handwave this as when a hallucinating hero sees any trap, they hallucinate it as something that's dangerous to them. I don't see the point in trying to implement ""sometimes when hallucinating you should step onto a trap anyway"" since that's less fun.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,260,2019-12-15T20:18:29Z,2020-01-06T04:37:44Z,2020-01-08T01:24:42Z,CLOSED,False,1,4,3,https://github.com/copperwater,Remove Sokoban luck penalties for things you can't cheat with,1,[],https://github.com/NetHack/NetHack/pull/260,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/260,"Jumping, Newton's 3rd Law hurtling, and throwing an iron ball:
attempting to do any of these in such a way that you would diagonally
pass between boulders/walls causes the Luck penalty. However, none of
these actually get you through the diagonal gap, thus they can't be used
to cheat and the penalty doesn't make sense.","Jumping, Newton's 3rd Law hurtling, and throwing an iron ball:
attempting to do any of these in such a way that you would diagonally
pass between boulders/walls causes the Luck penalty. However, none of
these actually get you through the diagonal gap, thus they can't be used
to cheat and the penalty doesn't make sense.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,261,2019-12-15T20:21:08Z,2020-09-28T15:28:55Z,2021-05-23T00:06:28Z,CLOSED,False,12,5,1,https://github.com/copperwater,Allow rereading spellbooks to refresh memory at any time,1,[],https://github.com/NetHack/NetHack/pull/261,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/261,"Aimed at fixing the problem where the player knows they're going to
forget a spell in a few thousand turns, so they go back and get the
book... only to find out that they ""know it quite well already"", and
need to wait an indeterminate amount of time until they are on the verge
of forgetting it (< 2000 turns) before the book will let them read it
again.
This commit simply removes that 2000 turn limit, so the player can fully
restore their memory at any time with the spellbook. Naturally, this
still consumes a read charge, so the book won't ultimately last as long
if you keep rereading it early.
If you do have more than 2000 turns left, the game will prompt you to
confirm that you do want to refresh your memory anyway. As before,
rereading with fewer turns will not prompt.","Aimed at fixing the problem where the player knows they're going to
forget a spell in a few thousand turns, so they go back and get the
book... only to find out that they ""know it quite well already"", and
need to wait an indeterminate amount of time until they are on the verge
of forgetting it (< 2000 turns) before the book will let them read it
again.
This commit simply removes that 2000 turn limit, so the player can fully
restore their memory at any time with the spellbook. Naturally, this
still consumes a read charge, so the book won't ultimately last as long
if you keep rereading it early.
If you do have more than 2000 turns left, the game will prompt you to
confirm that you do want to refresh your memory anyway. As before,
rereading with fewer turns will not prompt.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,262,2019-12-15T20:28:11Z,2021-06-17T00:58:34Z,2021-06-17T00:58:35Z,CLOSED,False,45,50,1,https://github.com/copperwater,Make the #terrain command work while impaired,1,[],https://github.com/NetHack/NetHack/pull/262,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/262,"This is an interface only command, acting just as an aid to remember
what the player has already seen, and removing its availability based on
whether the character is impaired is interface screw.
Note: This does not reveal true monster or object identities while
hallucinating; the hallucinatory glyphs will remain hallucinatory. (Even
though it shouldn't be possible to see monsters with #terrain anyway.)","This is an interface only command, acting just as an aid to remember
what the player has already seen, and removing its availability based on
whether the character is impaired is interface screw.
Note: This does not reveal true monster or object identities while
hallucinating; the hallucinatory glyphs will remain hallucinatory. (Even
though it shouldn't be possible to see monsters with #terrain anyway.)",True,"{'HEART': ['https://github.com/Luxidream', 'https://github.com/FredrIQ', 'https://github.com/ostrosablin']}"
NetHack/NetHack,https://github.com/NetHack/NetHack,262,2019-12-15T20:28:11Z,2021-06-17T00:58:34Z,2021-06-17T00:58:35Z,CLOSED,False,45,50,1,https://github.com/copperwater,Make the #terrain command work while impaired,1,[],https://github.com/NetHack/NetHack/pull/262,https://github.com/pat-rankin,2,https://github.com/NetHack/NetHack/pull/262#issuecomment-862832187,"This is an interface only command, acting just as an aid to remember
what the player has already seen, and removing its availability based on
whether the character is impaired is interface screw.
Note: This does not reveal true monster or object identities while
hallucinating; the hallucinatory glyphs will remain hallucinatory. (Even
though it shouldn't be possible to see monsters with #terrain anyway.)","The #terrain command shows the player what the hero remembers, and if the hero's mental faculties are impaired, it refuses to operate.  That's how it's designed to work.",True,{'THUMBS_DOWN': ['https://github.com/copperwater']}
NetHack/NetHack,https://github.com/NetHack/NetHack,265,2019-12-19T03:58:19Z,2022-05-28T01:06:30Z,2022-05-28T01:06:30Z,CLOSED,False,102,49,23,https://github.com/copperwater,Consolidation pull request for many minor features,23,[],https://github.com/NetHack/NetHack/pull/265,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/265,"Since there are a lot of these, it seems better to make a single pull request instead of over 20 little ones. The commits in here are more or less independent of one another and self-contained.
All of these are from xNetHack, though some originated in other variants. A lot of them are small enhancements to the interface, mostly via messages.
If I have other small feature commits to submit later on, I plan on adding them to this pull request.","Since there are a lot of these, it seems better to make a single pull request instead of over 20 little ones. The commits in here are more or less independent of one another and self-contained.
All of these are from xNetHack, though some originated in other variants. A lot of them are small enhancements to the interface, mostly via messages.
If I have other small feature commits to submit later on, I plan on adding them to this pull request.",True,"{'HEART': ['https://github.com/Luxidream'], 'THUMBS_UP': ['https://github.com/red-kangaroo', 'https://github.com/nhmall']}"
NetHack/NetHack,https://github.com/NetHack/NetHack,265,2019-12-19T03:58:19Z,2022-05-28T01:06:30Z,2022-05-28T01:06:30Z,CLOSED,False,102,49,23,https://github.com/copperwater,Consolidation pull request for many minor features,23,[],https://github.com/NetHack/NetHack/pull/265,https://github.com/copperwater,2,https://github.com/NetHack/NetHack/pull/265#issuecomment-701680777,"Since there are a lot of these, it seems better to make a single pull request instead of over 20 little ones. The commits in here are more or less independent of one another and self-contained.
All of these are from xNetHack, though some originated in other variants. A lot of them are small enhancements to the interface, mostly via messages.
If I have other small feature commits to submit later on, I plan on adding them to this pull request.","All these were incorporated except:

messages for monsters following: @bhaak, since you agree with the general idea, we should try to hash out what would be better here. One question is whether you should always be told when a monster pursues you via a non-stairs method even if you can't see it, because that produces the ""gets a grip on you"" message. I still think two boolean arguments for a function is okay whereas three would be pushing into making it a bitmask territory.
god voice funny verbs when hallucinating: I don't really agree with rejecting it on tonal grounds, but I understand the argument.
removing the ""helping you"" message from cursed remove curse: Fine, this leaves it open for a possible new cursed remove curse effect in the future, and in the meantime the interpretation of ""it removes the curse from itself"" still applies.
grease color and material: Okay, leave it as metal, but can it be a bright blue can of metal? Helps it be more recognizable and not look like a key or pick-axe.
additional cases for newcham polymorph: Not sure why this one didn't get picked up, I don't see any comments on it at all.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,265,2019-12-19T03:58:19Z,2022-05-28T01:06:30Z,2022-05-28T01:06:30Z,CLOSED,False,102,49,23,https://github.com/copperwater,Consolidation pull request for many minor features,23,[],https://github.com/NetHack/NetHack/pull/265,https://github.com/nhmall,3,https://github.com/NetHack/NetHack/pull/265#issuecomment-956452636,"Since there are a lot of these, it seems better to make a single pull request instead of over 20 little ones. The commits in here are more or less independent of one another and self-contained.
All of these are from xNetHack, though some originated in other variants. A lot of them are small enhancements to the interface, mostly via messages.
If I have other small feature commits to submit later on, I plan on adding them to this pull request.","This pull request has all been committed to NetHack-3.7, except for the following bands:
https://gist.github.com/nhmall/17646bf27be669dd151b82db9dd0e5f5",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,265,2019-12-19T03:58:19Z,2022-05-28T01:06:30Z,2022-05-28T01:06:30Z,CLOSED,False,102,49,23,https://github.com/copperwater,Consolidation pull request for many minor features,23,[],https://github.com/NetHack/NetHack/pull/265,https://github.com/copperwater,4,https://github.com/NetHack/NetHack/pull/265#issuecomment-1140126048,"Since there are a lot of these, it seems better to make a single pull request instead of over 20 little ones. The commits in here are more or less independent of one another and self-contained.
All of these are from xNetHack, though some originated in other variants. A lot of them are small enhancements to the interface, mostly via messages.
If I have other small feature commits to submit later on, I plan on adding them to this pull request.",Closing this old pull request.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,269,2019-12-22T03:11:41Z,2020-04-15T06:00:08Z,2020-04-15T14:34:23Z,CLOSED,False,36,33,3,https://github.com/copperwater,Peaceful displacement: move peaceful monsters aside just like pets,6,[],https://github.com/NetHack/NetHack/pull/269,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/269,"This is a very popular feature which has been implemented in several variants so far. It allows you to displace peaceful monsters out of the way, following the code which already exists for pets.
Specifically, this is xNetHack's implementation; there are a few other changes in xNetHack attached to the base implementation that I think work well with it.

Refactoring a bunch of identical code blocks to occur only in one place (didnt_move).
Some monsters can't be displaced at all: priests, shopkeepers, the Oracle, and your quest leader.
Peaceful and tame monsters alike will refuse to switch places with you if you are on a trap or otherwise unsafe terrain for it (such as liquid). This indirectly fixes a source of extreme aggravation where a levitating or water walking hero accidentally displaces their pet onto water, instantly drowning it. It also prevents you from trivially killing any peaceful by the same method.
Monsters can't be displaced out of a trap they are trapped in, meaning that the logic for untaming your pet by displacing it out of a trap no longer exists.
Sleeping monsters count as immobilized. Additionally, immobilized monsters can't be displaced at all; there used to be a 1/6 chance of displacing them anyway. The 1/6 chance for sessile monsters is retained.

Other notes:

I noticed when debugging that attempting to move onto a tame, disguised, mimic's space displaces and decloaks it with no message at all; this seemed weird but that appears to be the existing behavior.","This is a very popular feature which has been implemented in several variants so far. It allows you to displace peaceful monsters out of the way, following the code which already exists for pets.
Specifically, this is xNetHack's implementation; there are a few other changes in xNetHack attached to the base implementation that I think work well with it.

Refactoring a bunch of identical code blocks to occur only in one place (didnt_move).
Some monsters can't be displaced at all: priests, shopkeepers, the Oracle, and your quest leader.
Peaceful and tame monsters alike will refuse to switch places with you if you are on a trap or otherwise unsafe terrain for it (such as liquid). This indirectly fixes a source of extreme aggravation where a levitating or water walking hero accidentally displaces their pet onto water, instantly drowning it. It also prevents you from trivially killing any peaceful by the same method.
Monsters can't be displaced out of a trap they are trapped in, meaning that the logic for untaming your pet by displacing it out of a trap no longer exists.
Sleeping monsters count as immobilized. Additionally, immobilized monsters can't be displaced at all; there used to be a 1/6 chance of displacing them anyway. The 1/6 chance for sessile monsters is retained.

Other notes:

I noticed when debugging that attempting to move onto a tame, disguised, mimic's space displaces and decloaks it with no message at all; this seemed weird but that appears to be the existing behavior.",True,"{'THUMBS_DOWN': ['https://github.com/rockola'], 'THUMBS_UP': ['https://github.com/cflannagan', 'https://github.com/ostrosablin', 'https://github.com/Xaleth', 'https://github.com/NullCGT'], 'HEART': ['https://github.com/Luxidream', 'https://github.com/Xaleth']}"
NetHack/NetHack,https://github.com/NetHack/NetHack,269,2019-12-22T03:11:41Z,2020-04-15T06:00:08Z,2020-04-15T14:34:23Z,CLOSED,False,36,33,3,https://github.com/copperwater,Peaceful displacement: move peaceful monsters aside just like pets,6,[],https://github.com/NetHack/NetHack/pull/269,https://github.com/Xaleth,2,https://github.com/NetHack/NetHack/pull/269#issuecomment-576092990,"This is a very popular feature which has been implemented in several variants so far. It allows you to displace peaceful monsters out of the way, following the code which already exists for pets.
Specifically, this is xNetHack's implementation; there are a few other changes in xNetHack attached to the base implementation that I think work well with it.

Refactoring a bunch of identical code blocks to occur only in one place (didnt_move).
Some monsters can't be displaced at all: priests, shopkeepers, the Oracle, and your quest leader.
Peaceful and tame monsters alike will refuse to switch places with you if you are on a trap or otherwise unsafe terrain for it (such as liquid). This indirectly fixes a source of extreme aggravation where a levitating or water walking hero accidentally displaces their pet onto water, instantly drowning it. It also prevents you from trivially killing any peaceful by the same method.
Monsters can't be displaced out of a trap they are trapped in, meaning that the logic for untaming your pet by displacing it out of a trap no longer exists.
Sleeping monsters count as immobilized. Additionally, immobilized monsters can't be displaced at all; there used to be a 1/6 chance of displacing them anyway. The 1/6 chance for sessile monsters is retained.

Other notes:

I noticed when debugging that attempting to move onto a tame, disguised, mimic's space displaces and decloaks it with no message at all; this seemed weird but that appears to be the existing behavior.",What if you want to fight the peaceful monster? :P,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,269,2019-12-22T03:11:41Z,2020-04-15T06:00:08Z,2020-04-15T14:34:23Z,CLOSED,False,36,33,3,https://github.com/copperwater,Peaceful displacement: move peaceful monsters aside just like pets,6,[],https://github.com/NetHack/NetHack/pull/269,https://github.com/ostrosablin,3,https://github.com/NetHack/NetHack/pull/269#issuecomment-576118586,"This is a very popular feature which has been implemented in several variants so far. It allows you to displace peaceful monsters out of the way, following the code which already exists for pets.
Specifically, this is xNetHack's implementation; there are a few other changes in xNetHack attached to the base implementation that I think work well with it.

Refactoring a bunch of identical code blocks to occur only in one place (didnt_move).
Some monsters can't be displaced at all: priests, shopkeepers, the Oracle, and your quest leader.
Peaceful and tame monsters alike will refuse to switch places with you if you are on a trap or otherwise unsafe terrain for it (such as liquid). This indirectly fixes a source of extreme aggravation where a levitating or water walking hero accidentally displaces their pet onto water, instantly drowning it. It also prevents you from trivially killing any peaceful by the same method.
Monsters can't be displaced out of a trap they are trapped in, meaning that the logic for untaming your pet by displacing it out of a trap no longer exists.
Sleeping monsters count as immobilized. Additionally, immobilized monsters can't be displaced at all; there used to be a 1/6 chance of displacing them anyway. The 1/6 chance for sessile monsters is retained.

Other notes:

I noticed when debugging that attempting to move onto a tame, disguised, mimic's space displaces and decloaks it with no message at all; this seemed weird but that appears to be the existing behavior.","Then you can explicitly fight it with F command, rather than using movement keys. Actually, just like it's now with pets. You probably wouldn't want to fight a pet, but if you really want to fight it (and not displace) - you can.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,269,2019-12-22T03:11:41Z,2020-04-15T06:00:08Z,2020-04-15T14:34:23Z,CLOSED,False,36,33,3,https://github.com/copperwater,Peaceful displacement: move peaceful monsters aside just like pets,6,[],https://github.com/NetHack/NetHack/pull/269,https://github.com/paxed,4,https://github.com/NetHack/NetHack/pull/269#issuecomment-613833924,"This is a very popular feature which has been implemented in several variants so far. It allows you to displace peaceful monsters out of the way, following the code which already exists for pets.
Specifically, this is xNetHack's implementation; there are a few other changes in xNetHack attached to the base implementation that I think work well with it.

Refactoring a bunch of identical code blocks to occur only in one place (didnt_move).
Some monsters can't be displaced at all: priests, shopkeepers, the Oracle, and your quest leader.
Peaceful and tame monsters alike will refuse to switch places with you if you are on a trap or otherwise unsafe terrain for it (such as liquid). This indirectly fixes a source of extreme aggravation where a levitating or water walking hero accidentally displaces their pet onto water, instantly drowning it. It also prevents you from trivially killing any peaceful by the same method.
Monsters can't be displaced out of a trap they are trapped in, meaning that the logic for untaming your pet by displacing it out of a trap no longer exists.
Sleeping monsters count as immobilized. Additionally, immobilized monsters can't be displaced at all; there used to be a 1/6 chance of displacing them anyway. The 1/6 chance for sessile monsters is retained.

Other notes:

I noticed when debugging that attempting to move onto a tame, disguised, mimic's space displaces and decloaks it with no message at all; this seemed weird but that appears to be the existing behavior.",Merged.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,271,2019-12-23T23:05:32Z,2019-12-24T07:37:43Z,2019-12-24T16:25:37Z,MERGED,True,67,91,2,https://github.com/chasonr,Fixes to build NetHack 3.7.0 on FreeDOS,1,[],https://github.com/NetHack/NetHack/pull/271,https://github.com/chasonr,1,https://github.com/NetHack/NetHack/pull/271,"These changes produced a successful build of NetHack 3.7.0 on FreeDOS 1.2 with the following software installed:

Long file name support enabled in autoexec.bat
PDCurses installed in C:\PDCurses
Lua 5.3.5 installed in lib\lua535 under the NetHack root
Vim 7.3 installed in c:\vim
DJGPP packages bnu2331b, dif37b, djdev205, fil41br2, gcc920b and mak421b; I don't think dif37b is needed, but it is installed to work with Vim

Changes needed for successful build on FreeDOS:

PDCurses archive built in four ar calls. 3.6.4 has this already; this was partially present, but incomplete
Lua archive built in three ar calls
Conditional for dat/quest.dat corrected; GNU make does not like having an ifndef in a dependency list
sys/msdos/nhlua.h created, based on the nhlua.h created for the Unix port
Empty sysconf created

Changes for a faster build:

temp.a for the game binary built using S option to ar, so that ar does not create a symbol table over and over; ranlib added at end to build the symbol table
monstr.c removed from build
o/nethack.lnk no longer has any function and is removed","These changes produced a successful build of NetHack 3.7.0 on FreeDOS 1.2 with the following software installed:

Long file name support enabled in autoexec.bat
PDCurses installed in C:\PDCurses
Lua 5.3.5 installed in lib\lua535 under the NetHack root
Vim 7.3 installed in c:\vim
DJGPP packages bnu2331b, dif37b, djdev205, fil41br2, gcc920b and mak421b; I don't think dif37b is needed, but it is installed to work with Vim

Changes needed for successful build on FreeDOS:

PDCurses archive built in four ar calls. 3.6.4 has this already; this was partially present, but incomplete
Lua archive built in three ar calls
Conditional for dat/quest.dat corrected; GNU make does not like having an ifndef in a dependency list
sys/msdos/nhlua.h created, based on the nhlua.h created for the Unix port
Empty sysconf created

Changes for a faster build:

temp.a for the game binary built using S option to ar, so that ar does not create a symbol table over and over; ranlib added at end to build the symbol table
monstr.c removed from build
o/nethack.lnk no longer has any function and is removed",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,276,2020-01-04T17:35:11Z,2020-08-18T14:44:55Z,2020-08-19T17:28:30Z,CLOSED,False,2,1,1,https://github.com/dimkr,Use recent GCC for DOS cross-builds on Linux,1,[],https://github.com/NetHack/NetHack/pull/276,https://github.com/dimkr,1,https://github.com/NetHack/NetHack/pull/276,,,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,276,2020-01-04T17:35:11Z,2020-08-18T14:44:55Z,2020-08-19T17:28:30Z,CLOSED,False,2,1,1,https://github.com/dimkr,Use recent GCC for DOS cross-builds on Linux,1,[],https://github.com/NetHack/NetHack/pull/276,https://github.com/nhmall,2,https://github.com/NetHack/NetHack/pull/276#issuecomment-675522421,,The NetHack-3.7 branch cross-compile for msdos supports gcc 10 now.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,280,2020-01-12T03:12:29Z,,2022-01-27T17:11:08Z,OPEN,False,41,25,5,https://github.com/copperwater,Display weights of objects in inventory,2,[],https://github.com/NetHack/NetHack/pull/280,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/280,"The bulk of this pull request is the commit adding the 'invweight' option, which allows the player to see the weight of any object they are carrying. See its commit message for full details.
I also put in the complementary feature in which showing your inventory will display your total carried weight compared to your current carrying capacity, and your slots used/total.","The bulk of this pull request is the commit adding the 'invweight' option, which allows the player to see the weight of any object they are carrying. See its commit message for full details.
I also put in the complementary feature in which showing your inventory will display your total carried weight compared to your current carrying capacity, and your slots used/total.",True,"{'THUMBS_UP': ['https://github.com/zinspire', 'https://github.com/red-kangaroo', 'https://github.com/actual-nh', 'https://github.com/FredrIQ', 'https://github.com/greg-kennedy', 'https://github.com/tux3', 'https://github.com/k21971', 'https://github.com/gebulmer', 'https://github.com/ieugen'], 'HEART': ['https://github.com/Luxidream', 'https://github.com/latogato', 'https://github.com/greg-kennedy', 'https://github.com/tux3']}"
NetHack/NetHack,https://github.com/NetHack/NetHack,280,2020-01-12T03:12:29Z,,2022-01-27T17:11:08Z,OPEN,False,41,25,5,https://github.com/copperwater,Display weights of objects in inventory,2,[],https://github.com/NetHack/NetHack/pull/280,https://github.com/copperwater,2,https://github.com/NetHack/NetHack/pull/280#issuecomment-846474718,"The bulk of this pull request is the commit adding the 'invweight' option, which allows the player to see the weight of any object they are carrying. See its commit message for full details.
I also put in the complementary feature in which showing your inventory will display your total carried weight compared to your current carrying capacity, and your slots used/total.",Pushed an update to this that makes it compatible with the new optlist system (basically taking the xNetHack implementation).,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,281,2020-01-12T22:18:39Z,,2022-01-27T18:36:47Z,OPEN,False,78,9,4,https://github.com/copperwater,Add the Grudge Patch: monsters with natural enmity will fight each other,2,[],https://github.com/NetHack/NetHack/pull/281,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/281,"This ultimately derives from Nephi's Grudge Patch back in the 3.4.3 era,
plus some updates from SpliceHack and xNetHack. Its primary purpose is
to make the dungeon a richer, more interesting place by providing more
opportunities for natural monster-to-monster interactions. All of the
code necessary to support monster battling was already in place; this
merely adds more monster pairs to mm_aggression.
Monsters that will fight each other are:

Quest guardians and hostile non-guardians
Angels and demons
Elves and orcs
Hobbits and Nazguls

Monsters with a one-sided grudge (where the defending monster may
counterattack, but won't use its own turns to retaliate aggressively)
are:

Baby purple worms against shriekers (purple worms already had this)
Ravens against floating eyes
Spiders against insects (x and a)
Bats against flying insects
Cats against rats
Woodchucks against the Oracle

Pets will never attack other pets, even if they would normally be
hostile to each other.","This ultimately derives from Nephi's Grudge Patch back in the 3.4.3 era,
plus some updates from SpliceHack and xNetHack. Its primary purpose is
to make the dungeon a richer, more interesting place by providing more
opportunities for natural monster-to-monster interactions. All of the
code necessary to support monster battling was already in place; this
merely adds more monster pairs to mm_aggression.
Monsters that will fight each other are:

Quest guardians and hostile non-guardians
Angels and demons
Elves and orcs
Hobbits and Nazguls

Monsters with a one-sided grudge (where the defending monster may
counterattack, but won't use its own turns to retaliate aggressively)
are:

Baby purple worms against shriekers (purple worms already had this)
Ravens against floating eyes
Spiders against insects (x and a)
Bats against flying insects
Cats against rats
Woodchucks against the Oracle

Pets will never attack other pets, even if they would normally be
hostile to each other.",True,"{'HEART': ['https://github.com/Luxidream', 'https://github.com/NullCGT', 'https://github.com/Vivit-R', 'https://github.com/ostrosablin', 'https://github.com/red-kangaroo']}"
NetHack/NetHack,https://github.com/NetHack/NetHack,281,2020-01-12T22:18:39Z,,2022-01-27T18:36:47Z,OPEN,False,78,9,4,https://github.com/copperwater,Add the Grudge Patch: monsters with natural enmity will fight each other,2,[],https://github.com/NetHack/NetHack/pull/281,https://github.com/NullCGT,2,https://github.com/NetHack/NetHack/pull/281#issuecomment-574692343,"This ultimately derives from Nephi's Grudge Patch back in the 3.4.3 era,
plus some updates from SpliceHack and xNetHack. Its primary purpose is
to make the dungeon a richer, more interesting place by providing more
opportunities for natural monster-to-monster interactions. All of the
code necessary to support monster battling was already in place; this
merely adds more monster pairs to mm_aggression.
Monsters that will fight each other are:

Quest guardians and hostile non-guardians
Angels and demons
Elves and orcs
Hobbits and Nazguls

Monsters with a one-sided grudge (where the defending monster may
counterattack, but won't use its own turns to retaliate aggressively)
are:

Baby purple worms against shriekers (purple worms already had this)
Ravens against floating eyes
Spiders against insects (x and a)
Bats against flying insects
Cats against rats
Woodchucks against the Oracle

Pets will never attack other pets, even if they would normally be
hostile to each other.","If spiders grudge against the 'x' class, then they would attack xans, which have an high enough AC and speed that they would generally never be killed by a spider. This seems like a potential issue.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,281,2020-01-12T22:18:39Z,,2022-01-27T18:36:47Z,OPEN,False,78,9,4,https://github.com/copperwater,Add the Grudge Patch: monsters with natural enmity will fight each other,2,[],https://github.com/NetHack/NetHack/pull/281,https://github.com/copperwater,3,https://github.com/NetHack/NetHack/pull/281#issuecomment-574908517,"This ultimately derives from Nephi's Grudge Patch back in the 3.4.3 era,
plus some updates from SpliceHack and xNetHack. Its primary purpose is
to make the dungeon a richer, more interesting place by providing more
opportunities for natural monster-to-monster interactions. All of the
code necessary to support monster battling was already in place; this
merely adds more monster pairs to mm_aggression.
Monsters that will fight each other are:

Quest guardians and hostile non-guardians
Angels and demons
Elves and orcs
Hobbits and Nazguls

Monsters with a one-sided grudge (where the defending monster may
counterattack, but won't use its own turns to retaliate aggressively)
are:

Baby purple worms against shriekers (purple worms already had this)
Ravens against floating eyes
Spiders against insects (x and a)
Bats against flying insects
Cats against rats
Woodchucks against the Oracle

Pets will never attack other pets, even if they would normally be
hostile to each other.","Yeah, since x is only grid bug and xan and you won't generally see grid bugs and spiders around at the same time, that grudge might be ineffective in practice. Same deal with the bat one; the only actual flying insect is the killer bee.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,283,2020-01-15T13:59:42Z,,2022-01-27T18:37:09Z,OPEN,False,131,38,17,https://github.com/copperwater,Add more YAFMs to the game,11,[],https://github.com/NetHack/NetHack/pull/283,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/283,"YAFM - Yet Another Funny Message. This is a consolidation of ones added to xNetHack, though as described in the commit messages some were created in other variants.
Most of these happen when you are hallucinating.","YAFM - Yet Another Funny Message. This is a consolidation of ones added to xNetHack, though as described in the commit messages some were created in other variants.
Most of these happen when you are hallucinating.",True,"{'HEART': ['https://github.com/red-kangaroo', 'https://github.com/architectdrone', 'https://github.com/Xaleth', 'https://github.com/Vivit-R']}"
NetHack/NetHack,https://github.com/NetHack/NetHack,283,2020-01-15T13:59:42Z,,2022-01-27T18:37:09Z,OPEN,False,131,38,17,https://github.com/copperwater,Add more YAFMs to the game,11,[],https://github.com/NetHack/NetHack/pull/283,https://github.com/copperwater,2,https://github.com/NetHack/NetHack/pull/283#issuecomment-903197813,"YAFM - Yet Another Funny Message. This is a consolidation of ones added to xNetHack, though as described in the commit messages some were created in other variants.
Most of these happen when you are hallucinating.","Updated this PR to current and since I was rebasing and force pushing anyway, merged the fixup commit in where it belonged.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,284,2020-01-16T00:02:01Z,,2022-01-27T18:37:18Z,OPEN,False,699,309,35,https://github.com/copperwater,Consolidation pull request for more minor features,36,[],https://github.com/NetHack/NetHack/pull/284,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/284,"As with #265, the commits in here are mostly self-contained and independent of each other, with a few exceptions (small refactors needed to make the following commit work, like 07f1e54). I'm making a new pull request because it seems like #265 has already been reviewed and partially incorporated.
As before, the implementations of all of these are from xNetHack, though many are from other variants such as SpliceHack and SliceHack.","As with #265, the commits in here are mostly self-contained and independent of each other, with a few exceptions (small refactors needed to make the following commit work, like 07f1e54). I'm making a new pull request because it seems like #265 has already been reviewed and partially incorporated.
As before, the implementations of all of these are from xNetHack, though many are from other variants such as SpliceHack and SliceHack.",True,{'THUMBS_UP': ['https://github.com/red-kangaroo']}
NetHack/NetHack,https://github.com/NetHack/NetHack,284,2020-01-16T00:02:01Z,,2022-01-27T18:37:18Z,OPEN,False,699,309,35,https://github.com/copperwater,Consolidation pull request for more minor features,36,[],https://github.com/NetHack/NetHack/pull/284,https://github.com/paulwinner,2,https://github.com/NetHack/NetHack/pull/284#issuecomment-581139067,"As with #265, the commits in here are mostly self-contained and independent of each other, with a few exceptions (small refactors needed to make the following commit work, like 07f1e54). I'm making a new pull request because it seems like #265 has already been reviewed and partially incorporated.
As before, the implementations of all of these are from xNetHack, though many are from other variants such as SpliceHack and SliceHack.","We are pretty well known for anticipating what players will never actually
do!
…
On Sun, Feb 2, 2020 at 8:54 AM copperwater ***@***.***> wrote:
 ***@***.**** commented on this pull request.
 ------------------------------

 In src/zap.c
 <#284 (comment)>:

 > @@ -5320,6 +5320,13 @@ makewish()
          buf[0] = '\0'; /* for EDIT_GETLIN */
          goto retry;
      }
 +    if (buf[0] == '\0') {
 +        if (yn(""Really forfeit this wish?"") == 'y') {
 +            Strcpy(buf, ""nothing"");
 +        }
 +        else
 +            goto retry;

 There is currently no way to wish for a random object. Not that it would
 be hard to add a special case for the string ""random"", but I really don't
 expect anyone to actually want a random object when they use a wish.

 —
 You are receiving this because you are subscribed to this thread.
 Reply to this email directly, view it on GitHub
 <#284?email_source=notifications&email_token=ADJJ4RXGMWAIOW42FJPIMADRA3GAFA5CNFSM4KHLWR72YY3PNVWWK3TUL52HS4DFWFIHK3DMKJSXC5LFON2FEZLWNFSXPKTDN5WW2ZLOORPWSZGOCT5DUJQ#discussion_r373847853>,
 or unsubscribe
 <https://github.com/notifications/unsubscribe-auth/ADJJ4RTEI3SICRTQU75KFIDRA3GAFANCNFSM4KHLWR7Q>
 .",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,286,2020-01-18T03:34:23Z,2020-02-23T06:37:19Z,2021-05-23T00:04:14Z,CLOSED,False,57,100,9,https://github.com/copperwater,Refactor and simplify the rndmonst function,3,[],https://github.com/NetHack/NetHack/pull/286,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/286,"This changes rndmonst() to use a weighted reservoir sampling algorithm, rather than a unwieldy pre-computed cache of eligible monsters that needs to be updated every time the hero goes up or down a floor, gains or loses a level, or extincts or genocides a monster. It removes the rndmonst_cache global (and thus is not save compatible) and the reset_rndmonst function.
This algorithm still requires only a linear pass over the list of monsters (the same as what rndmonst() required even when not updating the cache).
Many of NetHack's loops could benefit from being rewritten using reservoir sampling, but rndmonst was one of the biggest candidates due to being able to get rid of the cache.
This is a code-only change and does not change the distribution of monsters selected by rndmonst() at all.
c1c90bb is the same commit in the consolidated pull request.","This changes rndmonst() to use a weighted reservoir sampling algorithm, rather than a unwieldy pre-computed cache of eligible monsters that needs to be updated every time the hero goes up or down a floor, gains or loses a level, or extincts or genocides a monster. It removes the rndmonst_cache global (and thus is not save compatible) and the reset_rndmonst function.
This algorithm still requires only a linear pass over the list of monsters (the same as what rndmonst() required even when not updating the cache).
Many of NetHack's loops could benefit from being rewritten using reservoir sampling, but rndmonst was one of the biggest candidates due to being able to get rid of the cache.
This is a code-only change and does not change the distribution of monsters selected by rndmonst() at all.
c1c90bb is the same commit in the consolidated pull request.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,286,2020-01-18T03:34:23Z,2020-02-23T06:37:19Z,2021-05-23T00:04:14Z,CLOSED,False,57,100,9,https://github.com/copperwater,Refactor and simplify the rndmonst function,3,[],https://github.com/NetHack/NetHack/pull/286,https://github.com/Xaleth,2,https://github.com/NetHack/NetHack/pull/286#issuecomment-575866373,"This changes rndmonst() to use a weighted reservoir sampling algorithm, rather than a unwieldy pre-computed cache of eligible monsters that needs to be updated every time the hero goes up or down a floor, gains or loses a level, or extincts or genocides a monster. It removes the rndmonst_cache global (and thus is not save compatible) and the reset_rndmonst function.
This algorithm still requires only a linear pass over the list of monsters (the same as what rndmonst() required even when not updating the cache).
Many of NetHack's loops could benefit from being rewritten using reservoir sampling, but rndmonst was one of the biggest candidates due to being able to get rid of the cache.
This is a code-only change and does not change the distribution of monsters selected by rndmonst() at all.
c1c90bb is the same commit in the consolidated pull request.",What‘s the end user benefit? Less RAM usage?,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,286,2020-01-18T03:34:23Z,2020-02-23T06:37:19Z,2021-05-23T00:04:14Z,CLOSED,False,57,100,9,https://github.com/copperwater,Refactor and simplify the rndmonst function,3,[],https://github.com/NetHack/NetHack/pull/286,https://github.com/copperwater,3,https://github.com/NetHack/NetHack/pull/286#issuecomment-575867186,"This changes rndmonst() to use a weighted reservoir sampling algorithm, rather than a unwieldy pre-computed cache of eligible monsters that needs to be updated every time the hero goes up or down a floor, gains or loses a level, or extincts or genocides a monster. It removes the rndmonst_cache global (and thus is not save compatible) and the reset_rndmonst function.
This algorithm still requires only a linear pass over the list of monsters (the same as what rndmonst() required even when not updating the cache).
Many of NetHack's loops could benefit from being rewritten using reservoir sampling, but rndmonst was one of the biggest candidates due to being able to get rid of the cache.
This is a code-only change and does not change the distribution of monsters selected by rndmonst() at all.
c1c90bb is the same commit in the consolidated pull request.","It's a refactor. It doesn't have an end user benefit, because there aren't any changes to the gameplay or the interface. Players won't see a difference - the main reason for doing this is to clean up the code, simplify it, and make it less brittle.
I suppose it does use a few hundred bytes less RAM by not needing the cache anymore, and it saves processor cycles by not needing to update the cache, but those are insignificant.",True,"{'THUMBS_UP': ['https://github.com/ostrosablin', 'https://github.com/Xaleth']}"
NetHack/NetHack,https://github.com/NetHack/NetHack,286,2020-01-18T03:34:23Z,2020-02-23T06:37:19Z,2021-05-23T00:04:14Z,CLOSED,False,57,100,9,https://github.com/copperwater,Refactor and simplify the rndmonst function,3,[],https://github.com/NetHack/NetHack/pull/286,https://github.com/ostrosablin,4,https://github.com/NetHack/NetHack/pull/286#issuecomment-575879029,"This changes rndmonst() to use a weighted reservoir sampling algorithm, rather than a unwieldy pre-computed cache of eligible monsters that needs to be updated every time the hero goes up or down a floor, gains or loses a level, or extincts or genocides a monster. It removes the rndmonst_cache global (and thus is not save compatible) and the reset_rndmonst function.
This algorithm still requires only a linear pass over the list of monsters (the same as what rndmonst() required even when not updating the cache).
Many of NetHack's loops could benefit from being rewritten using reservoir sampling, but rndmonst was one of the biggest candidates due to being able to get rid of the cache.
This is a code-only change and does not change the distribution of monsters selected by rndmonst() at all.
c1c90bb is the same commit in the consolidated pull request.","Simpler code is definitely better. From programmer perspective (either for development or code diving) I definitely find newer implementation more readable and straightforward.
Because many end users do code diving - it could be definitely considered an end user benefit. And tangled logic tends to cause nasty bugs, so you could say end users would benefit by getting less bugged game in future releases.
Performance/memory use advantage could be insignificant for modern platforms (it's a really minor improvement, given modern hardware power), but still could make a noticeable difference when compiled for outdated platforms, e.g. DOS, which are still supported.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,287,2020-01-20T03:05:20Z,2020-01-20T08:37:21Z,2020-01-20T08:37:21Z,CLOSED,False,5,5,2,https://github.com/Xaleth,Fix typo,4,[],https://github.com/NetHack/NetHack/pull/287,https://github.com/Xaleth,1,https://github.com/NetHack/NetHack/pull/287,,,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,287,2020-01-20T03:05:20Z,2020-01-20T08:37:21Z,2020-01-20T08:37:21Z,CLOSED,False,5,5,2,https://github.com/Xaleth,Fix typo,4,[],https://github.com/NetHack/NetHack/pull/287,https://github.com/nhmall,2,https://github.com/NetHack/NetHack/pull/287#issuecomment-576094367,,"For purposes of discussion, the original text states:
""Few people achieve this; most never do.  Those who have go down in history as heroes among heroes - and then they find ways of making the game even harder.""
That proposed ""fix"" leaves a seemingly incomplete sentence behind:
""Few people achieve this; most never do.  Those who have gone down in history as heroes among heroes - and then they find ways of making the game even harder.""
A possible clarification of  the original intent of the sentence, might be best achieved with the insertion of the words ""done so"" after the word ""have"" as follows:
""Few people achieve this; most never do.  Those who have done so go down in history as heroes among heroes - and then they find ways of making the game even harder.""
I think it was meant to describe what happens to ""those who have [done so]""; they ""go down in history..."", not ""those who have gone down in history...""",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,287,2020-01-20T03:05:20Z,2020-01-20T08:37:21Z,2020-01-20T08:37:21Z,CLOSED,False,5,5,2,https://github.com/Xaleth,Fix typo,4,[],https://github.com/NetHack/NetHack/pull/287,https://github.com/Xaleth,3,https://github.com/NetHack/NetHack/pull/287#issuecomment-576095044,,You betcha.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,289,2020-01-24T22:28:18Z,2020-01-27T17:42:26Z,2020-01-27T17:42:27Z,CLOSED,False,6,0,1,https://github.com/tachoknight,Added guard for definition of WIN_STATUS for Linux and GCC 10,1,[],https://github.com/NetHack/NetHack/pull/289,https://github.com/tachoknight,1,https://github.com/NetHack/NetHack/pull/289,Compiling with GCC 10 causes a duplicate definition error during linking with the WIN_STATUS definition in decl.c.,Compiling with GCC 10 causes a duplicate definition error during linking with the WIN_STATUS definition in decl.c.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,289,2020-01-24T22:28:18Z,2020-01-27T17:42:26Z,2020-01-27T17:42:27Z,CLOSED,False,6,0,1,https://github.com/tachoknight,Added guard for definition of WIN_STATUS for Linux and GCC 10,1,[],https://github.com/NetHack/NetHack/pull/289,https://github.com/jer-gentoo,2,https://github.com/NetHack/NetHack/pull/289#issuecomment-578735185,Compiling with GCC 10 causes a duplicate definition error during linking with the WIN_STATUS definition in decl.c.,"Neither GCC 10 nor Linux have anything to do with this. As laid out in #291, the problem is with the -fno-common flag which has existed in many versions of GCC prior to 10 but will be newly enabled by default in that version of the compiler.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,289,2020-01-24T22:28:18Z,2020-01-27T17:42:26Z,2020-01-27T17:42:27Z,CLOSED,False,6,0,1,https://github.com/tachoknight,Added guard for definition of WIN_STATUS for Linux and GCC 10,1,[],https://github.com/NetHack/NetHack/pull/289,https://github.com/tachoknight,3,https://github.com/NetHack/NetHack/pull/289#issuecomment-578787986,Compiling with GCC 10 causes a duplicate definition error during linking with the WIN_STATUS definition in decl.c.,"I knew about the -fno-common flag, but given one of NetHack's claims-to-fame is that it compiles and runs everywhere, I wasn't sure what unintended consequences simply adding the flag would have, so I opted for a more conservative approach. The Dev Team is free to do what they will regarding this.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,289,2020-01-24T22:28:18Z,2020-01-27T17:42:26Z,2020-01-27T17:42:27Z,CLOSED,False,6,0,1,https://github.com/tachoknight,Added guard for definition of WIN_STATUS for Linux and GCC 10,1,[],https://github.com/NetHack/NetHack/pull/289,https://github.com/nhmall,4,https://github.com/NetHack/NetHack/pull/289#issuecomment-578866292,Compiling with GCC 10 causes a duplicate definition error during linking with the WIN_STATUS definition in decl.c.,This should be resolved in 61d0d21,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,290,2020-01-26T03:04:06Z,2020-01-27T08:17:21Z,2020-02-01T15:34:44Z,CLOSED,False,1242,444,10,https://github.com/chasonr,Extensions to the MS-DOS VESA mode,11,[],https://github.com/NetHack/NetHack/pull/290,https://github.com/chasonr,1,https://github.com/NetHack/NetHack/pull/290,"The first four commits, through ""More bits for linear frame buffer,"" are incremental changes, adding working support for 8 bit color modes and a linear frame buffer.
Subsequent changes overhaul the VESA BIOS support. Tile sets are no longer limited to 16x16 in 8 colors; any tile set in BMP or GIF format is supported.","The first four commits, through ""More bits for linear frame buffer,"" are incremental changes, adding working support for 8 bit color modes and a linear frame buffer.
Subsequent changes overhaul the VESA BIOS support. Tile sets are no longer limited to 16x16 in 8 colors; any tile set in BMP or GIF format is supported.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,290,2020-01-26T03:04:06Z,2020-01-27T08:17:21Z,2020-02-01T15:34:44Z,CLOSED,False,1242,444,10,https://github.com/chasonr,Extensions to the MS-DOS VESA mode,11,[],https://github.com/NetHack/NetHack/pull/290,https://github.com/paxed,2,https://github.com/NetHack/NetHack/pull/290#issuecomment-578637471,"The first four commits, through ""More bits for linear frame buffer,"" are incremental changes, adding working support for 8 bit color modes and a linear frame buffer.
Subsequent changes overhaul the VESA BIOS support. Tile sets are no longer limited to 16x16 in 8 colors; any tile set in BMP or GIF format is supported.",Merged,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,291,2020-01-27T12:55:51Z,2020-01-27T17:41:54Z,2020-01-27T17:41:54Z,CLOSED,False,0,10,4,https://github.com/jer-gentoo,Fix compiling with -fno-common,1,[],https://github.com/NetHack/NetHack/pull/291,https://github.com/jer-gentoo,1,https://github.com/NetHack/NetHack/pull/291,"GCC 10 will enable -fno-common by default[0], which causes the linker to
fail like this [1]:
ld: windows.o:(.bss+0x0): multiple definition of `WIN_STATUS';
decl.o:(.data+0x40): first defined here
collect2: error: ld returned 1 exit status

So considering that include/decl.h has:
E NEARDATA winid WIN_STATUS;

which is correct, and that just one of the .c files should use extern, and
that src/decl.c aligns nicely with include/decl.h, keep that definition
and remove those invalid defnitions from other .c files.
Contrast this with [2] #289 which
tries to second-guess the problem by checking for GCC 10 / Linux, both
of which are incorrect assumptions.
[0] https://gcc.gnu.org/gcc-10/porting_to.html#common
[1] https://bugs.gentoo.org/706320
[2] #289","GCC 10 will enable -fno-common by default[0], which causes the linker to
fail like this [1]:
ld: windows.o:(.bss+0x0): multiple definition of `WIN_STATUS';
decl.o:(.data+0x40): first defined here
collect2: error: ld returned 1 exit status

So considering that include/decl.h has:
E NEARDATA winid WIN_STATUS;

which is correct, and that just one of the .c files should use extern, and
that src/decl.c aligns nicely with include/decl.h, keep that definition
and remove those invalid defnitions from other .c files.
Contrast this with [2] #289 which
tries to second-guess the problem by checking for GCC 10 / Linux, both
of which are incorrect assumptions.
[0] https://gcc.gnu.org/gcc-10/porting_to.html#common
[1] https://bugs.gentoo.org/706320
[2] #289",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,291,2020-01-27T12:55:51Z,2020-01-27T17:41:54Z,2020-01-27T17:41:54Z,CLOSED,False,0,10,4,https://github.com/jer-gentoo,Fix compiling with -fno-common,1,[],https://github.com/NetHack/NetHack/pull/291,https://github.com/nhmall,2,https://github.com/NetHack/NetHack/pull/291#issuecomment-578866070,"GCC 10 will enable -fno-common by default[0], which causes the linker to
fail like this [1]:
ld: windows.o:(.bss+0x0): multiple definition of `WIN_STATUS';
decl.o:(.data+0x40): first defined here
collect2: error: ld returned 1 exit status

So considering that include/decl.h has:
E NEARDATA winid WIN_STATUS;

which is correct, and that just one of the .c files should use extern, and
that src/decl.c aligns nicely with include/decl.h, keep that definition
and remove those invalid defnitions from other .c files.
Contrast this with [2] #289 which
tries to second-guess the problem by checking for GCC 10 / Linux, both
of which are incorrect assumptions.
[0] https://gcc.gnu.org/gcc-10/porting_to.html#common
[1] https://bugs.gentoo.org/706320
[2] #289",This should be resolved in 61d0d21,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,292,2020-01-28T20:31:05Z,,2022-01-27T17:11:42Z,OPEN,False,35,12,7,https://github.com/Vivit-R,Allow Specification of the Length of the Sparkle Animation,4,[],https://github.com/NetHack/NetHack/pull/292,https://github.com/Vivit-R,1,https://github.com/NetHack/NetHack/pull/292,"sparkle used to be a boolean option whether or not to show the the sparkly magic resistance animation. This branch changes it to a compound option that specifies how many frames the animation should run for. The argument to the option is optional and the default value is 21, so there will be no change in the behavior of existing .nethackrcs.
I had opened a PR about this against 3.6 a few months ago, but it couldn't be done then because it required changing the flags, which would have broken save compatibility with the rest of 3.6. Now that 3.7 is being worked on, that won't be a problem.","sparkle used to be a boolean option whether or not to show the the sparkly magic resistance animation. This branch changes it to a compound option that specifies how many frames the animation should run for. The argument to the option is optional and the default value is 21, so there will be no change in the behavior of existing .nethackrcs.
I had opened a PR about this against 3.6 a few months ago, but it couldn't be done then because it required changing the flags, which would have broken save compatibility with the rest of 3.6. Now that 3.7 is being worked on, that won't be a problem.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,294,2020-02-01T16:07:42Z,2020-02-11T08:37:21Z,2020-02-12T03:25:34Z,MERGED,True,20,10,2,https://github.com/chasonr,Update description of OPTIONS=video,2,[],https://github.com/NetHack/NetHack/pull/294,https://github.com/chasonr,1,https://github.com/NetHack/NetHack/pull/294,"A recent change to the Guidebook says that video_width and video_height work with video:vga. That setting in fact forces the 640x480x16 mode, in which video_width and video_height do not operate. The desired setting is video:vesa. Update the description of OPTIONS=video, video_width and video_height to reflect this.
Also, fix some syntax errors in Guidebook.tex encountered while trying to compile it.
Attempting to update Guidebook.txt, using the Makefile, produced many more differences than expected. I am leaving that file unchanged.","A recent change to the Guidebook says that video_width and video_height work with video:vga. That setting in fact forces the 640x480x16 mode, in which video_width and video_height do not operate. The desired setting is video:vesa. Update the description of OPTIONS=video, video_width and video_height to reflect this.
Also, fix some syntax errors in Guidebook.tex encountered while trying to compile it.
Attempting to update Guidebook.txt, using the Makefile, produced many more differences than expected. I am leaving that file unchanged.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,294,2020-02-01T16:07:42Z,2020-02-11T08:37:21Z,2020-02-12T03:25:34Z,MERGED,True,20,10,2,https://github.com/chasonr,Update description of OPTIONS=video,2,[],https://github.com/NetHack/NetHack/pull/294,https://github.com/nhmall,2,https://github.com/NetHack/NetHack/pull/294#issuecomment-584471059,"A recent change to the Guidebook says that video_width and video_height work with video:vga. That setting in fact forces the 640x480x16 mode, in which video_width and video_height do not operate. The desired setting is video:vesa. Update the description of OPTIONS=video, video_width and video_height to reflect this.
Also, fix some syntax errors in Guidebook.tex encountered while trying to compile it.
Attempting to update Guidebook.txt, using the Makefile, produced many more differences than expected. I am leaving that file unchanged.","Re: ""Attempting to update Guidebook.txt, using the Makefile, produced many more differences than expected. I am leaving that file unchanged.""
There's some automation run to generate an updated Guidebook.txt when the Guidebook.mn has changed, so no need to update Guidebook.txt in pull requests.
Thanks for going through the tedium of updating both Guidebook.mn and Guidebook.tex.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,295,2020-02-01T21:52:19Z,2020-02-02T07:37:41Z,2020-02-02T07:37:41Z,MERGED,True,1,6,2,https://github.com/chasonr,MSDOS compile error and statue glyphs,2,[],https://github.com/NetHack/NetHack/pull/295,https://github.com/chasonr,1,https://github.com/NetHack/NetHack/pull/295,"sys/msdos/Makefile1.cross: Add -DSTATUES_LOOK_LIKE_MONSTERS so the VESA mode can display statue glyphs. The 16 color mode already maps these back to the generic statue glyph.
src/options.c: A compile error I discovered while preparing this pull request. Remove a code fragment that appears to be a remnant of the ""soundcard"" option.","sys/msdos/Makefile1.cross: Add -DSTATUES_LOOK_LIKE_MONSTERS so the VESA mode can display statue glyphs. The 16 color mode already maps these back to the generic statue glyph.
src/options.c: A compile error I discovered while preparing this pull request. Remove a code fragment that appears to be a remnant of the ""soundcard"" option.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,298,2020-02-06T02:02:09Z,2020-02-11T07:37:20Z,2020-02-11T07:37:20Z,MERGED,True,12,2,3,https://github.com/NullCGT,Add Sounds for Minotaurs,2,[],https://github.com/NetHack/NetHack/pull/298,https://github.com/NullCGT,1,https://github.com/NetHack/NetHack/pull/298,"Minotaurs, by and large, are very loud and rambunctious creatures. In NetHack, however, they are treated as silent. This pull request gives minotaurs growl sounds, as well as responses when #chatted with.
Rationale are as follows:


Minotaurs are generally depicted in media as being loud.


Minotaurs are dangerous enough that being able to identify them while blind is potentially useful.


Due to their high damage output and total lack of magic resistance, minotaurs are often tamed by the player. The game will be more fun if the player can interact with their pet minotaur in some way, however limited.","Minotaurs, by and large, are very loud and rambunctious creatures. In NetHack, however, they are treated as silent. This pull request gives minotaurs growl sounds, as well as responses when #chatted with.
Rationale are as follows:


Minotaurs are generally depicted in media as being loud.


Minotaurs are dangerous enough that being able to identify them while blind is potentially useful.


Due to their high damage output and total lack of magic resistance, minotaurs are often tamed by the player. The game will be more fun if the player can interact with their pet minotaur in some way, however limited.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,300,2020-02-12T15:19:46Z,,2022-01-27T17:23:57Z,OPEN,False,1114,102,22,https://github.com/NHTangles,NetHack 3.7 htmldump,3,[],https://github.com/NetHack/NetHack/pull/300,https://github.com/NHTangles,1,https://github.com/NetHack/NetHack/pull/300,"This is my current work on HTML dump logs, for your consideration.  This code is live on the hardfought servers. (sample: https://au.hardfought.org/userdata/T/Tangles/nethack/dumplog/1580642779.nh.html)
Please let me know if I can do anything to help you get it merged.
Thanks
Tangles.","This is my current work on HTML dump logs, for your consideration.  This code is live on the hardfought servers. (sample: https://au.hardfought.org/userdata/T/Tangles/nethack/dumplog/1580642779.nh.html)
Please let me know if I can do anything to help you get it merged.
Thanks
Tangles.",True,"{'THUMBS_UP': ['https://github.com/k21971', 'https://github.com/NullCGT', 'https://github.com/actual-nh', 'https://github.com/gebulmer']}"
NetHack/NetHack,https://github.com/NetHack/NetHack,300,2020-02-12T15:19:46Z,,2022-01-27T17:23:57Z,OPEN,False,1114,102,22,https://github.com/NHTangles,NetHack 3.7 htmldump,3,[],https://github.com/NetHack/NetHack/pull/300,https://github.com/NHTangles,2,https://github.com/NetHack/NetHack/pull/300#issuecomment-585724028,"This is my current work on HTML dump logs, for your consideration.  This code is live on the hardfought servers. (sample: https://au.hardfought.org/userdata/T/Tangles/nethack/dumplog/1580642779.nh.html)
Please let me know if I can do anything to help you get it merged.
Thanks
Tangles.","This feature adds a lot of extra code to windows.c that doesn't really belong there.  I was considering moving all the dump code to a new file (dump.c?), but this would be difficult to maintain separately if it does not get merged (since it would also move a lot of existing code).  I'd definitely be prepared to do that work and PR it if this one gets merged.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,306,2020-02-29T19:27:44Z,2020-02-29T20:21:10Z,2020-02-29T20:21:10Z,CLOSED,False,101,6,6,https://github.com/copperwater,Lua enhancements,4,[],https://github.com/NetHack/NetHack/pull/306,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/306,"This adds several enhancements to the special level parsing code:

Lua scripts can now call d() to get dice results, or percent() to get a percent threshold, avoiding the necessity of using lots of math.random() calls.
In order to build the game, all lua files must pass a basic lua syntax check.
Special level functions such as terrain() or replace_terrain() cannot overwrite stairs or ladders.
Implement selection.gradient(), re-enabling the selection gradient functionality present in 3.6.","This adds several enhancements to the special level parsing code:

Lua scripts can now call d() to get dice results, or percent() to get a percent threshold, avoiding the necessity of using lots of math.random() calls.
In order to build the game, all lua files must pass a basic lua syntax check.
Special level functions such as terrain() or replace_terrain() cannot overwrite stairs or ladders.
Implement selection.gradient(), re-enabling the selection gradient functionality present in 3.6.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,307,2020-02-29T21:16:36Z,2020-09-19T03:37:20Z,2021-05-23T00:00:16Z,CLOSED,False,40,47,5,https://github.com/copperwater,Remove distance requirement for learning teleportation scroll,4,[],https://github.com/NetHack/NetHack/pull/307,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/307,"Since teleports now produce a ""materialize"" message, there is no point
in having the scroll only be automatically identified if you have
traveled a certain distance.
In the process of addressing this, I also managed to get rid of the
'telescroll' global variable, and the return value from scrolltele().
Because there's no longer a minimum distance, scrolltele can take care
of auto-identifying the scroll without having to turf the actual process
of doing that to teleds.","Since teleports now produce a ""materialize"" message, there is no point
in having the scroll only be automatically identified if you have
traveled a certain distance.
In the process of addressing this, I also managed to get rid of the
'telescroll' global variable, and the return value from scrolltele().
Because there's no longer a minimum distance, scrolltele can take care
of auto-identifying the scroll without having to turf the actual process
of doing that to teleds.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,308,2020-02-29T21:37:11Z,2020-09-05T12:13:50Z,2021-05-23T00:03:18Z,CLOSED,False,199,107,30,https://github.com/copperwater,Lua enhancements,8,[],https://github.com/NetHack/NetHack/pull/308,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/308,"This adds several enhancements to the special level parsing code:

Lua scripts can now call d() to get dice results, or percent() to get a percent threshold, avoiding the necessity of using lots of math.random() calls.
Special level functions such as terrain() or replace_terrain() cannot overwrite stairs or ladders.
Implement selection.gradient(), re-enabling the selection gradient functionality present in 3.6.","This adds several enhancements to the special level parsing code:

Lua scripts can now call d() to get dice results, or percent() to get a percent threshold, avoiding the necessity of using lots of math.random() calls.
Special level functions such as terrain() or replace_terrain() cannot overwrite stairs or ladders.
Implement selection.gradient(), re-enabling the selection gradient functionality present in 3.6.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,308,2020-02-29T21:37:11Z,2020-09-05T12:13:50Z,2021-05-23T00:03:18Z,CLOSED,False,199,107,30,https://github.com/copperwater,Lua enhancements,8,[],https://github.com/NetHack/NetHack/pull/308,https://github.com/copperwater,2,https://github.com/NetHack/NetHack/pull/308#issuecomment-593170022,"This adds several enhancements to the special level parsing code:

Lua scripts can now call d() to get dice results, or percent() to get a percent threshold, avoiding the necessity of using lots of math.random() calls.
Special level functions such as terrain() or replace_terrain() cannot overwrite stairs or ladders.
Implement selection.gradient(), re-enabling the selection gradient functionality present in 3.6.","New additions as of today:

When a lua error is encountered, print it in string form rather than error code
If not specifying a lit state in des.terrain or des.replace_terrain, the preexisting lit state will not be changed.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,308,2020-02-29T21:37:11Z,2020-09-05T12:13:50Z,2021-05-23T00:03:18Z,CLOSED,False,199,107,30,https://github.com/copperwater,Lua enhancements,8,[],https://github.com/NetHack/NetHack/pull/308,https://github.com/copperwater,3,https://github.com/NetHack/NetHack/pull/308#issuecomment-687602107,"This adds several enhancements to the special level parsing code:

Lua scripts can now call d() to get dice results, or percent() to get a percent threshold, avoiding the necessity of using lots of math.random() calls.
Special level functions such as terrain() or replace_terrain() cannot overwrite stairs or ladders.
Implement selection.gradient(), re-enabling the selection gradient functionality present in 3.6.","Individual commits from this PR have been merged, others have not. The ones remaining unmerged are:
3817edc
b620ce7
fc9db0e
d3ef1ba
Closing this PR now because the others aren't particularly related to each other, will send them individually instead.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,314,2020-03-19T23:43:30Z,2020-03-22T19:45:13Z,2020-03-22T19:45:13Z,CLOSED,False,1,1,1,https://github.com/slondr,Fix typo/spelling error in code_style.txt,1,[],https://github.com/NetHack/NetHack/pull/314,https://github.com/slondr,1,https://github.com/NetHack/NetHack/pull/314,"This fixes the incorrect spelling of ""unindented"" in DEVEL/code_style.txt","This fixes the incorrect spelling of ""unindented"" in DEVEL/code_style.txt",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,314,2020-03-19T23:43:30Z,2020-03-22T19:45:13Z,2020-03-22T19:45:13Z,CLOSED,False,1,1,1,https://github.com/slondr,Fix typo/spelling error in code_style.txt,1,[],https://github.com/NetHack/NetHack/pull/314,https://github.com/nhmall,2,https://github.com/NetHack/NetHack/pull/314#issuecomment-602186983,"This fixes the incorrect spelling of ""unindented"" in DEVEL/code_style.txt",8961331,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,324,2020-04-15T02:33:58Z,2020-04-15T03:49:03Z,2020-04-15T14:36:43Z,CLOSED,False,2,1,1,https://github.com/copperwater,Allow specifying a montype on figurines in lua files,1,[],https://github.com/NetHack/NetHack/pull/324,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/324,"This was already allowed for the other montype-compatible objects like
statues, corpses, eggs and tins. I don't see a reason why figurines
shouldn't be part of this group; perhaps it was an oversight.","This was already allowed for the other montype-compatible objects like
statues, corpses, eggs and tins. I don't see a reason why figurines
shouldn't be part of this group; perhaps it was an oversight.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,324,2020-04-15T02:33:58Z,2020-04-15T03:49:03Z,2020-04-15T14:36:43Z,CLOSED,False,2,1,1,https://github.com/copperwater,Allow specifying a montype on figurines in lua files,1,[],https://github.com/NetHack/NetHack/pull/324,https://github.com/paxed,2,https://github.com/NetHack/NetHack/pull/324#issuecomment-613799937,"This was already allowed for the other montype-compatible objects like
statues, corpses, eggs and tins. I don't see a reason why figurines
shouldn't be part of this group; perhaps it was an oversight.",Merged,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,328,2020-04-16T22:55:10Z,2020-04-18T02:37:19Z,2020-04-18T02:37:19Z,CLOSED,False,4,0,2,https://github.com/NullCGT,"Fix rnd(0) in create_gas_cloud, and blasts of fire that hit bodies of water create clouds of steam.",1,[],https://github.com/NetHack/NetHack/pull/328,https://github.com/NullCGT,1,https://github.com/NetHack/NetHack/pull/328,"This is a combination bug and feature pull request:

If create_gas_cloud() is called with a damage of zero, the game will throw a panic for calling rnd(0). This pull request fixes this.
If a bolt of fire hits a fountain or body of water, it produces a small area of clouds that fades after a few turns.

I originally wrote this feature for SpliceHack, but upon further reflection I think that it fits in well to vanilla. The messages ""you hear hissing gas"" and ""steam billows from the fountain"" imply the creation of steam, which can be easily represented using create_gas_cloud. I feel that giving the steam a visual representation increases the sense of interacting with the environment.
Fountains produce a larger area of clouds, since the message ""steam billows from the fountain"" seems to imply a greater amount of steam than ""you hear hissing gas.""
At present, this has no gameplay effects, but this feature could be extended to allow for scalding steam or blinding clouds of fog.","This is a combination bug and feature pull request:

If create_gas_cloud() is called with a damage of zero, the game will throw a panic for calling rnd(0). This pull request fixes this.
If a bolt of fire hits a fountain or body of water, it produces a small area of clouds that fades after a few turns.

I originally wrote this feature for SpliceHack, but upon further reflection I think that it fits in well to vanilla. The messages ""you hear hissing gas"" and ""steam billows from the fountain"" imply the creation of steam, which can be easily represented using create_gas_cloud. I feel that giving the steam a visual representation increases the sense of interacting with the environment.
Fountains produce a larger area of clouds, since the message ""steam billows from the fountain"" seems to imply a greater amount of steam than ""you hear hissing gas.""
At present, this has no gameplay effects, but this feature could be extended to allow for scalding steam or blinding clouds of fog.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,328,2020-04-16T22:55:10Z,2020-04-18T02:37:19Z,2020-04-18T02:37:19Z,CLOSED,False,4,0,2,https://github.com/NullCGT,"Fix rnd(0) in create_gas_cloud, and blasts of fire that hit bodies of water create clouds of steam.",1,[],https://github.com/NetHack/NetHack/pull/328,https://github.com/copperwater,2,https://github.com/NetHack/NetHack/pull/328#issuecomment-615479397,"This is a combination bug and feature pull request:

If create_gas_cloud() is called with a damage of zero, the game will throw a panic for calling rnd(0). This pull request fixes this.
If a bolt of fire hits a fountain or body of water, it produces a small area of clouds that fades after a few turns.

I originally wrote this feature for SpliceHack, but upon further reflection I think that it fits in well to vanilla. The messages ""you hear hissing gas"" and ""steam billows from the fountain"" imply the creation of steam, which can be easily represented using create_gas_cloud. I feel that giving the steam a visual representation increases the sense of interacting with the environment.
Fountains produce a larger area of clouds, since the message ""steam billows from the fountain"" seems to imply a greater amount of steam than ""you hear hissing gas.""
At present, this has no gameplay effects, but this feature could be extended to allow for scalding steam or blinding clouds of fog.","Noticing some issues with the steam clouds. When a moat is zapped over, no moat squares render the cloud. Pools and fountains do it correctly. Try this on Medusa's Island.
The clouds also don't block vision across them (while standing outside the cloud from one side, you can see things happening on the other side of the cloud whereas you can't see things inside the cloud), but this is for some reason also the case with the regular poison gas clouds, which I would call a bug in its own right.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,330,2020-04-17T23:17:55Z,2020-05-16T01:37:19Z,2020-05-16T01:37:19Z,CLOSED,False,1,1,1,https://github.com/stewartsmith,Add 'ec2' to default GENERIC_USERS,1,[],https://github.com/NetHack/NetHack/pull/330,https://github.com/stewartsmith,1,https://github.com/NetHack/NetHack/pull/330,"On Amazon Linux (1 and 2), the default user is ""ec2-user"", which due to
how NetHack will filter out dashes from usernames gets shortened to
'ec2'. The GENERIC_USERS filter is applied after this filtering (see
unixmain.c snippet below):
set_playmode(); /* sets plname to ""wizard"" for wizard mode */
if (exact_username) {
< filter out dash >
}
plnamesuffix();

So, if we add 'ec2' to the list, the net effect is that you'd be asked
for your name if launching as the generic user. This is probably better
than applying the filter twice or changing the logic of when the
filtering is done.
Signed-off-by: Stewart Smith trawets@amazon.com","On Amazon Linux (1 and 2), the default user is ""ec2-user"", which due to
how NetHack will filter out dashes from usernames gets shortened to
'ec2'. The GENERIC_USERS filter is applied after this filtering (see
unixmain.c snippet below):
set_playmode(); /* sets plname to ""wizard"" for wizard mode */
if (exact_username) {
< filter out dash >
}
plnamesuffix();

So, if we add 'ec2' to the list, the net effect is that you'd be asked
for your name if launching as the generic user. This is probably better
than applying the filter twice or changing the logic of when the
filtering is done.
Signed-off-by: Stewart Smith trawets@amazon.com",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,334,2020-04-20T17:31:23Z,2020-12-20T06:37:20Z,2020-12-20T06:37:20Z,CLOSED,False,30,5,1,https://github.com/GorillaSapiens,Sort output in discoveries list,3,[],https://github.com/NetHack/NetHack/pull/334,https://github.com/GorillaSapiens,1,https://github.com/NetHack/NetHack/pull/334,Sorts output for discoveries and class discoveries commands ( \ and ` ),Sorts output for discoveries and class discoveries commands ( \ and ` ),True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,341,2020-04-27T15:23:49Z,2020-04-27T23:41:04Z,2020-05-30T13:58:48Z,CLOSED,False,4,0,1,https://github.com/entrez,Avoid disorder caused by horseback #untrapping,1,[],https://github.com/NetHack/NetHack/pull/341,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/341,"mon_sanity_check can start spitting out error messages about contradictory steed position after a mounted hero gets ensnared by a failed #untrap attempt (#340). This is because
move_into_trap doesn't update u.usteed->mx and my like most other movement code does (e.g. domove_core, u_on_newpos), so those numbers get out of sync with the hero's new position.

  
    
      NetHack/src/hack.c
    
    
        Lines 1780 to 1789
      in
      42ffce0
    
  
  
    

        
          
           /* now move the hero */ 
        

        
          
           mtmp = m_at(x, y); 
        

        
          
           u.ux += u.dx; 
        

        
          
           u.uy += u.dy; 
        

        
          
           /* Move your steed, too */ 
        

        
          
           if (u.usteed) { 
        

        
          
               u.usteed->mx = u.ux; 
        

        
          
               u.usteed->my = u.uy; 
        

        
          
               exercise_steed(); 
        

        
          
           } 
        
    
  



  
    
      NetHack/src/dungeon.c
    
    
        Lines 1437 to 1461
      in
      42ffce0
    
  
  
    

        
          
           void 
        

        
          
           u_on_newpos(x, y) 
        

        
          
           int x, y; 
        

        
          
           { 
        

        
          
               if (!isok(x, y)) { /* validate location */ 
        

        
          
                   void VDECL((*func), (const char *, ...)) PRINTF_F(1, 2); 
        

        
          
            
        

        
          
                   func = (x < 0 || y < 0 || x > COLNO - 1 || y > ROWNO - 1) ? panic 
        

        
          
                          : impossible; 
        

        
          
                   (*func)(""u_on_newpos: trying to place hero off map <%d,%d>"", x, y); 
        

        
          
               } 
        

        
          
               u.ux = x; 
        

        
          
               u.uy = y; 
        

        
          
           #ifdef CLIPPING 
        

        
          
               cliparound(u.ux, u.uy); 
        

        
          
           #endif 
        

        
          
               u.uundetected = 0; 
        

        
          
               /* ridden steed always shares hero's location */ 
        

        
          
               if (u.usteed) 
        

        
          
                   u.usteed->mx = u.ux, u.usteed->my = u.uy; 
        

        
          
               /* when changing levels, don't leave old position set with 
        

        
          
                  stale values from previous level */ 
        

        
          
               if (!on_level(&u.uz, &u.uz0)) 
        

        
          
                   u.ux0 = u.ux, u.uy0 = u.uy; 
        

        
          
           } 
        
    
  


Unlike the above two functions, move_into_trap only modifies u.ux and u.uy, which is why reported steed and player positions weren't matching after a failed #untrap:

  
    
      NetHack/src/trap.c
    
    
        Lines 4034 to 4044
      in
      42ffce0
    
  
  
    

        
          
           /* we know there's no monster in the way, and we're not trapped */ 
        

        
          
           if (!Punished 
        

        
          
               || drag_ball(x, y, &bc, &bx, &by, &cx, &cy, &unused, TRUE)) { 
        

        
          
               u.ux0 = u.ux, u.uy0 = u.uy; 
        

        
          
               u.ux = x, u.uy = y; 
        

        
          
               u.umoved = TRUE; 
        

        
          
               newsym(u.ux0, u.uy0); 
        

        
          
               vision_recalc(1); 
        

        
          
               check_leash(u.ux0, u.uy0); 
        

        
          
               if (Punished) 
        

        
          
                   move_bc(0, bc, bx, by, cx, cy); 
        
    
  


This commit adds a check to move_into_trap to explicitly handle updating a steed's position on the map just after moving the hero, making it closer to other position-modifying functions & hopefully fixing #340.","mon_sanity_check can start spitting out error messages about contradictory steed position after a mounted hero gets ensnared by a failed #untrap attempt (#340). This is because
move_into_trap doesn't update u.usteed->mx and my like most other movement code does (e.g. domove_core, u_on_newpos), so those numbers get out of sync with the hero's new position.

  
    
      NetHack/src/hack.c
    
    
        Lines 1780 to 1789
      in
      42ffce0
    
  
  
    

        
          
           /* now move the hero */ 
        

        
          
           mtmp = m_at(x, y); 
        

        
          
           u.ux += u.dx; 
        

        
          
           u.uy += u.dy; 
        

        
          
           /* Move your steed, too */ 
        

        
          
           if (u.usteed) { 
        

        
          
               u.usteed->mx = u.ux; 
        

        
          
               u.usteed->my = u.uy; 
        

        
          
               exercise_steed(); 
        

        
          
           } 
        
    
  



  
    
      NetHack/src/dungeon.c
    
    
        Lines 1437 to 1461
      in
      42ffce0
    
  
  
    

        
          
           void 
        

        
          
           u_on_newpos(x, y) 
        

        
          
           int x, y; 
        

        
          
           { 
        

        
          
               if (!isok(x, y)) { /* validate location */ 
        

        
          
                   void VDECL((*func), (const char *, ...)) PRINTF_F(1, 2); 
        

        
          
            
        

        
          
                   func = (x < 0 || y < 0 || x > COLNO - 1 || y > ROWNO - 1) ? panic 
        

        
          
                          : impossible; 
        

        
          
                   (*func)(""u_on_newpos: trying to place hero off map <%d,%d>"", x, y); 
        

        
          
               } 
        

        
          
               u.ux = x; 
        

        
          
               u.uy = y; 
        

        
          
           #ifdef CLIPPING 
        

        
          
               cliparound(u.ux, u.uy); 
        

        
          
           #endif 
        

        
          
               u.uundetected = 0; 
        

        
          
               /* ridden steed always shares hero's location */ 
        

        
          
               if (u.usteed) 
        

        
          
                   u.usteed->mx = u.ux, u.usteed->my = u.uy; 
        

        
          
               /* when changing levels, don't leave old position set with 
        

        
          
                  stale values from previous level */ 
        

        
          
               if (!on_level(&u.uz, &u.uz0)) 
        

        
          
                   u.ux0 = u.ux, u.uy0 = u.uy; 
        

        
          
           } 
        
    
  


Unlike the above two functions, move_into_trap only modifies u.ux and u.uy, which is why reported steed and player positions weren't matching after a failed #untrap:

  
    
      NetHack/src/trap.c
    
    
        Lines 4034 to 4044
      in
      42ffce0
    
  
  
    

        
          
           /* we know there's no monster in the way, and we're not trapped */ 
        

        
          
           if (!Punished 
        

        
          
               || drag_ball(x, y, &bc, &bx, &by, &cx, &cy, &unused, TRUE)) { 
        

        
          
               u.ux0 = u.ux, u.uy0 = u.uy; 
        

        
          
               u.ux = x, u.uy = y; 
        

        
          
               u.umoved = TRUE; 
        

        
          
               newsym(u.ux0, u.uy0); 
        

        
          
               vision_recalc(1); 
        

        
          
               check_leash(u.ux0, u.uy0); 
        

        
          
               if (Punished) 
        

        
          
                   move_bc(0, bc, bx, by, cx, cy); 
        
    
  


This commit adds a check to move_into_trap to explicitly handle updating a steed's position on the map just after moving the hero, making it closer to other position-modifying functions & hopefully fixing #340.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,344,2020-05-14T02:37:26Z,2020-09-29T14:35:55Z,2021-05-22T23:57:50Z,CLOSED,False,92,54,2,https://github.com/copperwater,Enable themed rooms to be constrained by level difficulty,4,[],https://github.com/NetHack/NetHack/pull/344,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/344,"The system of themed rooms currently makes it so that any themed room
can potentially generate anywhere a themed room can be placed. This is
problematic in the long run, since it makes it difficult to design new
rooms that are an appropriate amount of challenge at all levels of the
dungeon. (A few themed rooms already have this problem: a hero starting
out on level 1 probably won't live very long when the neighboring room
is full of giant spiders, or an arch-lich has generated in a mausoleum
nearby).
This pull request adds optional ""mindiff"" and ""maxdiff"" properties for
themerooms defined as tables and exposes level_difficulty() to Lua. A
themeroom whose mindiff exceeds the current level difficulty, or whose
maxdiff is lower than the current level difficulty, is prevented from
being selected.
I've also applied minimum difficulty cutoffs to two themed rooms that
probably pose too much of a challenge on the uppermost floors. Note
that this does NOT fix the ""arch-lich in Mausoleum"" problem, which I've
confirmed in wizard mode actually does happen - the solution I would
recommend for this is pull request #253.","The system of themed rooms currently makes it so that any themed room
can potentially generate anywhere a themed room can be placed. This is
problematic in the long run, since it makes it difficult to design new
rooms that are an appropriate amount of challenge at all levels of the
dungeon. (A few themed rooms already have this problem: a hero starting
out on level 1 probably won't live very long when the neighboring room
is full of giant spiders, or an arch-lich has generated in a mausoleum
nearby).
This pull request adds optional ""mindiff"" and ""maxdiff"" properties for
themerooms defined as tables and exposes level_difficulty() to Lua. A
themeroom whose mindiff exceeds the current level difficulty, or whose
maxdiff is lower than the current level difficulty, is prevented from
being selected.
I've also applied minimum difficulty cutoffs to two themed rooms that
probably pose too much of a challenge on the uppermost floors. Note
that this does NOT fix the ""arch-lich in Mausoleum"" problem, which I've
confirmed in wizard mode actually does happen - the solution I would
recommend for this is pull request #253.",True,"{'THUMBS_UP': ['https://github.com/k21971', 'https://github.com/Luxidream', 'https://github.com/RikerW', 'https://github.com/aoeixsz4', 'https://github.com/RojjaCebolla']}"
NetHack/NetHack,https://github.com/NetHack/NetHack,344,2020-05-14T02:37:26Z,2020-09-29T14:35:55Z,2021-05-22T23:57:50Z,CLOSED,False,92,54,2,https://github.com/copperwater,Enable themed rooms to be constrained by level difficulty,4,[],https://github.com/NetHack/NetHack/pull/344,https://github.com/copperwater,2,https://github.com/NetHack/NetHack/pull/344#issuecomment-696404882,"The system of themed rooms currently makes it so that any themed room
can potentially generate anywhere a themed room can be placed. This is
problematic in the long run, since it makes it difficult to design new
rooms that are an appropriate amount of challenge at all levels of the
dungeon. (A few themed rooms already have this problem: a hero starting
out on level 1 probably won't live very long when the neighboring room
is full of giant spiders, or an arch-lich has generated in a mausoleum
nearby).
This pull request adds optional ""mindiff"" and ""maxdiff"" properties for
themerooms defined as tables and exposes level_difficulty() to Lua. A
themeroom whose mindiff exceeds the current level difficulty, or whose
maxdiff is lower than the current level difficulty, is prevented from
being selected.
I've also applied minimum difficulty cutoffs to two themed rooms that
probably pose too much of a challenge on the uppermost floors. Note
that this does NOT fix the ""arch-lich in Mausoleum"" problem, which I've
confirmed in wizard mode actually does happen - the solution I would
recommend for this is pull request #253.","Something also to consider with respect to the spider nest room is the possibility of using the nh.level_difficulty() function to do an interesting mix of monsters, combining cave spiders with giant ones as the difficulty increases, like so:
for x=0,rm.width do
   for y=0, rm.height do
      if (percent(30)) then
         -- Gradually increase the chance of giant spiders
         if (nh.level_difficulty() - 6 < nh.rn2(10)) then
            des.monster(""cave spider"", x, y)
         else
            des.trap(""web"", x, y) -- makes a giant spider
         end
      end
   end
end",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,345,2020-05-17T18:10:27Z,2020-09-24T05:37:19Z,2021-05-23T00:03:09Z,CLOSED,False,11,11,2,https://github.com/copperwater,Fix: lua exposes incorrect room width and height to contents function,1,[],https://github.com/NetHack/NetHack/pull/345,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/345,"When a room was created using des.room, with w and h specified, I
noticed that the rm.width and rm.height exposed to its contents function
were smaller than they should be by 1. For instance, if I created a room
with w = 5, h = 5, and contents = function(rm), rm.width and rm.height
would both be 4.
This seems to be because the calculations for width and height were
(hx-lx) and (hy-ly), which is 1 too small. In this commit, I adjusted
those up by 1, and adjusted the uses of rm.width and rm.height in
themerms.lua to account for this change.
This does not affect the width and height exposed to the contents
function of a des.map() call; those appear to be accurate measures of
the map's width and height.","When a room was created using des.room, with w and h specified, I
noticed that the rm.width and rm.height exposed to its contents function
were smaller than they should be by 1. For instance, if I created a room
with w = 5, h = 5, and contents = function(rm), rm.width and rm.height
would both be 4.
This seems to be because the calculations for width and height were
(hx-lx) and (hy-ly), which is 1 too small. In this commit, I adjusted
those up by 1, and adjusted the uses of rm.width and rm.height in
themerms.lua to account for this change.
This does not affect the width and height exposed to the contents
function of a des.map() call; those appear to be accurate measures of
the map's width and height.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,347,2020-05-18T01:49:15Z,2020-09-27T21:40:08Z,2021-05-23T00:02:08Z,CLOSED,False,363,334,42,https://github.com/copperwater,Allow themed room subrooms to be filled,7,[],https://github.com/NetHack/NetHack/pull/347,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/347,"I noticed that any subrooms created within a themed room were bare - they never had any monsters, objects, traps, or anything really, regardless of whether filled = 1 was set on them. As a result, they're
pretty boring, and I wanted to fix this.
Then I noticed that special rooms incorporated into themed rooms (or just themed rooms defined with a type that wasn't ""ordinary"" or ""themed"") were being left empty as well. One thing led to another and I wound up refactoring some parts of the level creation code and fixing some bugs along the way.
The broad strokes:

Non-special subrooms of themerooms can now be filled (if filled=1), and get filled using the same routine as is used to populate a regular ordinary room.
Special-type themerooms and subrooms of themerooms can now be filled.
The confusing ""prefilled"" parameter is dropped; all des.room and des.region accept a ""filled"" table option. ""filled=2"" can be specified to produce a special room that sets level flags but isn't supposed to be stocked with anything (used mostly on Quests).
Fixed bugs where monsters arriving on Ludios and wizard-1 would not be constrained properly.
Identified the cause of occasional statues embedded in walls on medusa-2 and medusa-4.
makelevel is restructured a bit; all special rooms on every level are left unstocked when they're first created, then stocked at the end of makelevel.","I noticed that any subrooms created within a themed room were bare - they never had any monsters, objects, traps, or anything really, regardless of whether filled = 1 was set on them. As a result, they're
pretty boring, and I wanted to fix this.
Then I noticed that special rooms incorporated into themed rooms (or just themed rooms defined with a type that wasn't ""ordinary"" or ""themed"") were being left empty as well. One thing led to another and I wound up refactoring some parts of the level creation code and fixing some bugs along the way.
The broad strokes:

Non-special subrooms of themerooms can now be filled (if filled=1), and get filled using the same routine as is used to populate a regular ordinary room.
Special-type themerooms and subrooms of themerooms can now be filled.
The confusing ""prefilled"" parameter is dropped; all des.room and des.region accept a ""filled"" table option. ""filled=2"" can be specified to produce a special room that sets level flags but isn't supposed to be stocked with anything (used mostly on Quests).
Fixed bugs where monsters arriving on Ludios and wizard-1 would not be constrained properly.
Identified the cause of occasional statues embedded in walls on medusa-2 and medusa-4.
makelevel is restructured a bit; all special rooms on every level are left unstocked when they're first created, then stocked at the end of makelevel.",True,{'THUMBS_UP': ['https://github.com/k21971']}
NetHack/NetHack,https://github.com/NetHack/NetHack,347,2020-05-18T01:49:15Z,2020-09-27T21:40:08Z,2021-05-23T00:02:08Z,CLOSED,False,363,334,42,https://github.com/copperwater,Allow themed room subrooms to be filled,7,[],https://github.com/NetHack/NetHack/pull/347,https://github.com/copperwater,2,https://github.com/NetHack/NetHack/pull/347#issuecomment-699691598,"I noticed that any subrooms created within a themed room were bare - they never had any monsters, objects, traps, or anything really, regardless of whether filled = 1 was set on them. As a result, they're
pretty boring, and I wanted to fix this.
Then I noticed that special rooms incorporated into themed rooms (or just themed rooms defined with a type that wasn't ""ordinary"" or ""themed"") were being left empty as well. One thing led to another and I wound up refactoring some parts of the level creation code and fixing some bugs along the way.
The broad strokes:

Non-special subrooms of themerooms can now be filled (if filled=1), and get filled using the same routine as is used to populate a regular ordinary room.
Special-type themerooms and subrooms of themerooms can now be filled.
The confusing ""prefilled"" parameter is dropped; all des.room and des.region accept a ""filled"" table option. ""filled=2"" can be specified to produce a special room that sets level flags but isn't supposed to be stocked with anything (used mostly on Quests).
Fixed bugs where monsters arriving on Ludios and wizard-1 would not be constrained properly.
Identified the cause of occasional statues embedded in walls on medusa-2 and medusa-4.
makelevel is restructured a bit; all special rooms on every level are left unstocked when they're first created, then stocked at the end of makelevel.",Merged.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,350,2020-05-28T08:27:04Z,2021-06-17T01:10:48Z,2021-06-17T01:10:48Z,CLOSED,False,1,1,1,https://github.com/G7Nation,Reverting to original phrasing for pet displacement,1,[],https://github.com/NetHack/NetHack/pull/350,https://github.com/G7Nation,1,https://github.com/NetHack/NetHack/pull/350,"Comments:

""displaced"" was the original phrasing; no reason to change it
more flexible for variants and future nethack versions:

hypothetical: perhaps a pet does not want to swap places into
lava, but rather, be displaced to a spot of its own choosing
real-world: in slashem, the ""displacer beast"" exists because
of the original wording


regardless, past tense is appropriate","Comments:

""displaced"" was the original phrasing; no reason to change it
more flexible for variants and future nethack versions:

hypothetical: perhaps a pet does not want to swap places into
lava, but rather, be displaced to a spot of its own choosing
real-world: in slashem, the ""displacer beast"" exists because
of the original wording


regardless, past tense is appropriate",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,350,2020-05-28T08:27:04Z,2021-06-17T01:10:48Z,2021-06-17T01:10:48Z,CLOSED,False,1,1,1,https://github.com/G7Nation,Reverting to original phrasing for pet displacement,1,[],https://github.com/NetHack/NetHack/pull/350,https://github.com/pat-rankin,2,https://github.com/NetHack/NetHack/pull/350#issuecomment-862837140,"Comments:

""displaced"" was the original phrasing; no reason to change it
more flexible for variants and future nethack versions:

hypothetical: perhaps a pet does not want to swap places into
lava, but rather, be displaced to a spot of its own choosing
real-world: in slashem, the ""displacer beast"" exists because
of the original wording


regardless, past tense is appropriate","The wording was changed in preparation for having displacement work for monsters (hero sees displaced monster at wrong location).  That didn't happen--or perhaps hasn't happened yet--but is still a reason to not say ""displace"" when swapping occurs.
The displacer beast in slash'em came out of the AD&D Monster Manual, where is a creature that seems to be at a different location rather than one that can swap places with anything.  Slash'EM did not implement monster displacement and just glommed on the existing pet code.  NetHack has now added displacer beast but still uses pet swapping code, plus the 'bargethrough' monster capability.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,353,2020-05-30T13:06:56Z,2020-06-01T16:40:46Z,2020-12-30T19:03:25Z,CLOSED,False,1,1,1,https://github.com/entrez,Update G_IGNORE val to avoid collision with G_UNIQ,1,[],https://github.com/NetHack/NetHack/pull/353,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/353,"The values of G_IGNORE and G_UNIQ (defined in include/monflag.h) have both been 0x1000 since the commit in which G_IGNORE was introduced (f18b5bb).

  
    
      NetHack/include/monflag.h
    
    
        Lines 187 to 204
      in
      4e67729
    
  
  
    

        
          
           /* for mons[].geno (constant during game) */ 
        

        
          
           #define G_UNIQ          0x1000 /* generated only once */ 
        

        
          
           #define G_NOHELL        0x0800 /* not generated in ""hell"" */ 
        

        
          
           #define G_HELL          0x0400 /* generated only in ""hell"" */ 
        

        
          
           #define G_NOGEN         0x0200 /* generated only specially */ 
        

        
          
           #define G_SGROUP        0x0080 /* appear in small groups normally */ 
        

        
          
           #define G_LGROUP        0x0040 /* appear in large groups normally */ 
        

        
          
           #define G_GENO          0x0020 /* can be genocided */ 
        

        
          
           #define G_NOCORPSE      0x0010 /* no corpse left ever */ 
        

        
          
           #define G_FREQ          0x0007 /* creation frequency mask */ 
        

        
          
            
        

        
          
           /* for g.mvitals[].mvflags (variant during game), along with G_NOCORPSE */ 
        

        
          
           #define G_KNOWN         0x0004 /* have been encountered */ 
        

        
          
           #define G_GENOD         0x0002 /* have been genocided */ 
        

        
          
           #define G_EXTINCT       0x0001 /* population control; create no more */ 
        

        
          
           #define G_GONE          (G_GENOD | G_EXTINCT) 
        

        
          
           #define MV_KNOWS_EGG    0x0008 /* player recognizes egg of this monster type */ 
        

        
          
           #define G_IGNORE        0x1000 /* for mkclass(), ignore G_GENOD|G_EXTINCT */ 
        
    
  


Ultimately, by way of how mkclass_aligned uses these macros, this interferes with the code in mk_gen_ok that tests for extinction, so that extinct monsters are pronounced valid targets for generation regardless of the spc bitmask value provided to mkclass.
The value of gmask is defined in mkclass_aligned to be ((G_NOGEN | G_UNIQ) & ~spc) | (G_IGNORE & spc) (where spc is an optional caller-provided bitmask for ignoring certain requirements):

  
    
      NetHack/src/makemon.c
    
    
        Lines 1699 to 1705
      in
      4e67729
    
  
  
    

        
          
           gmask = (G_NOGEN | G_UNIQ); 
        

        
          
           if (rn2(9) || class == S_LICH) 
        

        
          
               gmask |= (gehennom ? G_NOHELL : G_HELL); 
        

        
          
           gmask &= ~spc; 
        

        
          
           gmask |= (spc & G_IGNORE); 
        

        
          
            
        

        
          
           if (mk_gen_ok(last, G_GONE, gmask)) { 
        
    
  


Then that value is compared with G_IGNORE via bitwise operations, to make sure the user hasn't explicitly set the function to ignore extinction:

  
    
      NetHack/src/makemon.c
    
    
        Lines 1624 to 1632
      in
      4e67729
    
  
  
    

        
          
           /* decide whether it's ok to generate a candidate monster by mkclass() */ 
        

        
          
           static boolean 
        

        
          
           mk_gen_ok(mndx, mvflagsmask, genomask) 
        

        
          
           int mndx, mvflagsmask, genomask; 
        

        
          
           { 
        

        
          
               struct permonst *ptr = &mons[mndx]; 
        

        
          
            
        

        
          
               if ((g.mvitals[mndx].mvflags & mvflagsmask) && !(genomask & G_IGNORE)) 
        

        
          
                   return FALSE; 
        
    
  


So the full statement which must be FALSE to respect extinction is (((G_NOGEN | G_UNIQ) & ~spc) | (G_IGNORE & spc)) & G_IGNORE -- ignoring G_NOGEN, since any effect it has is disregarded by the final & G_IGNORE, and knowing that G_UNIQ = G_IGNORE = 0x1000, this statement can be simplified to ((G_IGNORE & ~spc) | (G_IGNORE & spc)) & G_IGNORE, then further to (spc | ~spc) & G_IGNORE, which always evaluates to TRUE.
To avoid this, I have changed the value of G_IGNORE from 0x1000 (0b01000000000000) to 0x2000 (0b10000000000000). This should resolve #352, as far as I can tell: with the change applied I no longer see geno'd monsters on Quest levels.","The values of G_IGNORE and G_UNIQ (defined in include/monflag.h) have both been 0x1000 since the commit in which G_IGNORE was introduced (f18b5bb).

  
    
      NetHack/include/monflag.h
    
    
        Lines 187 to 204
      in
      4e67729
    
  
  
    

        
          
           /* for mons[].geno (constant during game) */ 
        

        
          
           #define G_UNIQ          0x1000 /* generated only once */ 
        

        
          
           #define G_NOHELL        0x0800 /* not generated in ""hell"" */ 
        

        
          
           #define G_HELL          0x0400 /* generated only in ""hell"" */ 
        

        
          
           #define G_NOGEN         0x0200 /* generated only specially */ 
        

        
          
           #define G_SGROUP        0x0080 /* appear in small groups normally */ 
        

        
          
           #define G_LGROUP        0x0040 /* appear in large groups normally */ 
        

        
          
           #define G_GENO          0x0020 /* can be genocided */ 
        

        
          
           #define G_NOCORPSE      0x0010 /* no corpse left ever */ 
        

        
          
           #define G_FREQ          0x0007 /* creation frequency mask */ 
        

        
          
            
        

        
          
           /* for g.mvitals[].mvflags (variant during game), along with G_NOCORPSE */ 
        

        
          
           #define G_KNOWN         0x0004 /* have been encountered */ 
        

        
          
           #define G_GENOD         0x0002 /* have been genocided */ 
        

        
          
           #define G_EXTINCT       0x0001 /* population control; create no more */ 
        

        
          
           #define G_GONE          (G_GENOD | G_EXTINCT) 
        

        
          
           #define MV_KNOWS_EGG    0x0008 /* player recognizes egg of this monster type */ 
        

        
          
           #define G_IGNORE        0x1000 /* for mkclass(), ignore G_GENOD|G_EXTINCT */ 
        
    
  


Ultimately, by way of how mkclass_aligned uses these macros, this interferes with the code in mk_gen_ok that tests for extinction, so that extinct monsters are pronounced valid targets for generation regardless of the spc bitmask value provided to mkclass.
The value of gmask is defined in mkclass_aligned to be ((G_NOGEN | G_UNIQ) & ~spc) | (G_IGNORE & spc) (where spc is an optional caller-provided bitmask for ignoring certain requirements):

  
    
      NetHack/src/makemon.c
    
    
        Lines 1699 to 1705
      in
      4e67729
    
  
  
    

        
          
           gmask = (G_NOGEN | G_UNIQ); 
        

        
          
           if (rn2(9) || class == S_LICH) 
        

        
          
               gmask |= (gehennom ? G_NOHELL : G_HELL); 
        

        
          
           gmask &= ~spc; 
        

        
          
           gmask |= (spc & G_IGNORE); 
        

        
          
            
        

        
          
           if (mk_gen_ok(last, G_GONE, gmask)) { 
        
    
  


Then that value is compared with G_IGNORE via bitwise operations, to make sure the user hasn't explicitly set the function to ignore extinction:

  
    
      NetHack/src/makemon.c
    
    
        Lines 1624 to 1632
      in
      4e67729
    
  
  
    

        
          
           /* decide whether it's ok to generate a candidate monster by mkclass() */ 
        

        
          
           static boolean 
        

        
          
           mk_gen_ok(mndx, mvflagsmask, genomask) 
        

        
          
           int mndx, mvflagsmask, genomask; 
        

        
          
           { 
        

        
          
               struct permonst *ptr = &mons[mndx]; 
        

        
          
            
        

        
          
               if ((g.mvitals[mndx].mvflags & mvflagsmask) && !(genomask & G_IGNORE)) 
        

        
          
                   return FALSE; 
        
    
  


So the full statement which must be FALSE to respect extinction is (((G_NOGEN | G_UNIQ) & ~spc) | (G_IGNORE & spc)) & G_IGNORE -- ignoring G_NOGEN, since any effect it has is disregarded by the final & G_IGNORE, and knowing that G_UNIQ = G_IGNORE = 0x1000, this statement can be simplified to ((G_IGNORE & ~spc) | (G_IGNORE & spc)) & G_IGNORE, then further to (spc | ~spc) & G_IGNORE, which always evaluates to TRUE.
To avoid this, I have changed the value of G_IGNORE from 0x1000 (0b01000000000000) to 0x2000 (0b10000000000000). This should resolve #352, as far as I can tell: with the change applied I no longer see geno'd monsters on Quest levels.",True,{'THUMBS_UP': ['https://github.com/copperwater']}
NetHack/NetHack,https://github.com/NetHack/NetHack,355,2020-06-01T04:11:52Z,2020-07-03T13:37:21Z,2020-07-03T13:37:21Z,CLOSED,False,10,2,3,https://github.com/NullCGT,Track number of times player has cheated at Sokoban.,1,[],https://github.com/NetHack/NetHack/pull/355,https://github.com/NullCGT,1,https://github.com/NetHack/NetHack/pull/355,"Adds a conduct (u.uconduct.cheated) in order to track the number of times that the player has cheated at Sokoban. If the player receives the achievement for completing Sokoban, they are told the number of times that they cheated to do so.
Although this does not address the TODO mentioned in soko_guilt(), I think that it's a nice way of explicitly expressing that there are actions which count as cheating. Also, it feels vaguely evil, which is a plus.","Adds a conduct (u.uconduct.cheated) in order to track the number of times that the player has cheated at Sokoban. If the player receives the achievement for completing Sokoban, they are told the number of times that they cheated to do so.
Although this does not address the TODO mentioned in soko_guilt(), I think that it's a nice way of explicitly expressing that there are actions which count as cheating. Also, it feels vaguely evil, which is a plus.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,358,2020-06-11T02:18:00Z,2020-06-20T03:37:21Z,2020-06-20T03:37:21Z,CLOSED,False,1,1,1,https://github.com/jhlywa,Fix typo in Guidebook,1,[],https://github.com/NetHack/NetHack/pull/358,https://github.com/jhlywa,1,https://github.com/NetHack/NetHack/pull/358,,,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,362,2020-07-04T21:42:43Z,2020-07-06T14:46:31Z,2020-07-06T16:06:18Z,CLOSED,False,1,1,1,https://github.com/entrez,Avoid revealing mimics with mind flayer lock-on,1,[],https://github.com/NetHack/NetHack/pull/362,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/362,"Using cansee for feedback on the mind flayer psychic attack means that the message identifies the target by name, even if it's a cloaked mimic or other hiding monster, as long as you can see the square it's on. Using canseemon instead will skip printing the message if the target is concealed in some way.","Using cansee for feedback on the mind flayer psychic attack means that the message identifies the target by name, even if it's a cloaked mimic or other hiding monster, as long as you can see the square it's on. Using canseemon instead will skip printing the message if the target is concealed in some way.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,362,2020-07-04T21:42:43Z,2020-07-06T14:46:31Z,2020-07-06T16:06:18Z,CLOSED,False,1,1,1,https://github.com/entrez,Avoid revealing mimics with mind flayer lock-on,1,[],https://github.com/NetHack/NetHack/pull/362,https://github.com/entrez,2,https://github.com/NetHack/NetHack/pull/362#issuecomment-654327980,"Using cansee for feedback on the mind flayer psychic attack means that the message identifies the target by name, even if it's a cloaked mimic or other hiding monster, as long as you can see the square it's on. Using canseemon instead will skip printing the message if the target is concealed in some way.","Turns out I didn't understand how canseemon works, so this didn't do what it was supposed to and also had an unintended side effect of hiding feedback when invisible monsters are targeted.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,365,2020-07-05T18:35:03Z,2020-07-15T22:21:38Z,2020-12-30T18:55:14Z,CLOSED,False,1,1,1,https://github.com/entrez,Use <lvl>d8 + 1 instead of <lvl>d8 for mon->mhpmax,1,[],https://github.com/NetHack/NetHack/pull/365,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/365,"Monster sanity checking now raises an error when monster max hp is less than mon->m_lev + 1 (as of 7d7b98f), but newmonhp still just rolls <level>d8 to determine a monster's starting (max) hp. This means monsters can start with hp equal to their level, if every die rolled is a natural 1 (e.g. 1d8 can end up a 1, 5d8 can end up a 5, etc); to avoid tripping this new sanity check, this changes the formula for determining a monster's max hp to <lvl>d8 + 1.","Monster sanity checking now raises an error when monster max hp is less than mon->m_lev + 1 (as of 7d7b98f), but newmonhp still just rolls <level>d8 to determine a monster's starting (max) hp. This means monsters can start with hp equal to their level, if every die rolled is a natural 1 (e.g. 1d8 can end up a 1, 5d8 can end up a 5, etc); to avoid tripping this new sanity check, this changes the formula for determining a monster's max hp to <lvl>d8 + 1.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,365,2020-07-05T18:35:03Z,2020-07-15T22:21:38Z,2020-12-30T18:55:14Z,CLOSED,False,1,1,1,https://github.com/entrez,Use <lvl>d8 + 1 instead of <lvl>d8 for mon->mhpmax,1,[],https://github.com/NetHack/NetHack/pull/365,https://github.com/entrez,2,https://github.com/NetHack/NetHack/pull/365#issuecomment-654197034,"Monster sanity checking now raises an error when monster max hp is less than mon->m_lev + 1 (as of 7d7b98f), but newmonhp still just rolls <level>d8 to determine a monster's starting (max) hp. This means monsters can start with hp equal to their level, if every die rolled is a natural 1 (e.g. 1d8 can end up a 1, 5d8 can end up a 5, etc); to avoid tripping this new sanity check, this changes the formula for determining a monster's max hp to <lvl>d8 + 1.",Rebased to 68638d7 & force-pushed so that Travis build will pass.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,367,2020-07-06T15:47:16Z,2020-07-14T16:37:19Z,2020-12-30T18:54:59Z,CLOSED,False,1,1,1,https://github.com/entrez,Properly reveal mimics targeted by mind flayer psychic blast,1,[],https://github.com/NetHack/NetHack/pull/367,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/367,"Mimics targeted with a mind flayer's psychic attack are `revealed' by name (``it locks on to the small mimic'') if they are mimicking an object, but are not actually `unmimicked' with seemimic. This results in something of a disparity of information available to the player and the hero, and differs from normal monster-on-mimic attacks.
This commit reveals hidden mimics with wakeup if they are targeted & identified by a mind flayer's lock-on attack. Monsters targeted by the psychic blast are woken up anyway (currently via m2->msleeping = 0), so this behavior seems consistent with how the attack affects non-mimics already, as well as the typical logic of mimic interactions.
P.S. -- I had submitted a previous PR (#362) intended to address this issue in sort of the opposite way -- hiding the ``lock-on'' message entirely when the target is a mimic -- but not only does this seem less consistent with the way the attack works for other concealed/invisible monsters, the actual changes involved were useless, if not a step backwards (they prevented invisible monsters from being mentioned, normally ``it locks on to it'', and didn't actually affect how mimics are handled at all).","Mimics targeted with a mind flayer's psychic attack are `revealed' by name (``it locks on to the small mimic'') if they are mimicking an object, but are not actually `unmimicked' with seemimic. This results in something of a disparity of information available to the player and the hero, and differs from normal monster-on-mimic attacks.
This commit reveals hidden mimics with wakeup if they are targeted & identified by a mind flayer's lock-on attack. Monsters targeted by the psychic blast are woken up anyway (currently via m2->msleeping = 0), so this behavior seems consistent with how the attack affects non-mimics already, as well as the typical logic of mimic interactions.
P.S. -- I had submitted a previous PR (#362) intended to address this issue in sort of the opposite way -- hiding the ``lock-on'' message entirely when the target is a mimic -- but not only does this seem less consistent with the way the attack works for other concealed/invisible monsters, the actual changes involved were useless, if not a step backwards (they prevented invisible monsters from being mentioned, normally ``it locks on to it'', and didn't actually affect how mimics are handled at all).",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,370,2020-07-09T15:32:44Z,2020-07-10T06:37:21Z,2020-07-10T12:59:43Z,CLOSED,False,1,0,1,https://github.com/entrez,"Fix default epitaphs (and engravings, etc)",1,[],https://github.com/NetHack/NetHack/pull/370,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/370,"Because no newline was appended to the default messages for dat/epitaph, dat/bogusmon, and dat/engrave, the first line in each of those files effectively concatenated the output of xcrypt for deflt_content and the first line of each respective plaintext source file.
In addition to the two being combined into a single line, since xcrypt is a state cipher (I think?), the appended first line doesn't decrypt correctly and looks like random gibberish -- e.g. xcrypt(""Om$equvaz0vjazu!K$�uov((xdpa(Y!ci&Sgw|0hl$xu`aa"") returns No matter where I went, here I am.Cfux8xm&|}p`c (as seen in #369), while xcrypt(""Om$equvaz0vjazu!K$�uov((xdpa(Y!ci&"") returns No matter where I went, here I am. and xcrypt(""Sgw|0hl$xu`aa"") returns Rest in peace.
Would fix #369","Because no newline was appended to the default messages for dat/epitaph, dat/bogusmon, and dat/engrave, the first line in each of those files effectively concatenated the output of xcrypt for deflt_content and the first line of each respective plaintext source file.
In addition to the two being combined into a single line, since xcrypt is a state cipher (I think?), the appended first line doesn't decrypt correctly and looks like random gibberish -- e.g. xcrypt(""Om$equvaz0vjazu!K$�uov((xdpa(Y!ci&Sgw|0hl$xu`aa"") returns No matter where I went, here I am.Cfux8xm&|}p`c (as seen in #369), while xcrypt(""Om$equvaz0vjazu!K$�uov((xdpa(Y!ci&"") returns No matter where I went, here I am. and xcrypt(""Sgw|0hl$xu`aa"") returns Rest in peace.
Would fix #369",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,371,2020-07-11T21:59:56Z,,2022-01-27T17:12:08Z,OPEN,False,76,109,7,https://github.com/paranoidtimes,make paranoid_confirmation:pray result in yes/no,2,[],https://github.com/NetHack/NetHack/pull/371,https://github.com/paranoidtimes,1,https://github.com/NetHack/NetHack/pull/371,"This change removed the default paranoid_confirmation:pray and the special logic that goes into paranoid_pray. Instead the default is paranoid_confirmation:none, and #pray will result in being prompted y/n (as was the previous default behaviour), if a player sets OPTIONS=paranoid_confirmation:pray they will then be prompted for 'yes' or 'no' if they attempt to pray. Bringing the pray difference in line with the other paranoid options, and preserving the y/n behaviour for those who don't set it.
fixes #303","This change removed the default paranoid_confirmation:pray and the special logic that goes into paranoid_pray. Instead the default is paranoid_confirmation:none, and #pray will result in being prompted y/n (as was the previous default behaviour), if a player sets OPTIONS=paranoid_confirmation:pray they will then be prompted for 'yes' or 'no' if they attempt to pray. Bringing the pray difference in line with the other paranoid options, and preserving the y/n behaviour for those who don't set it.
fixes #303",True,"{'THUMBS_UP': ['https://github.com/copperwater', 'https://github.com/actual-nh']}"
NetHack/NetHack,https://github.com/NetHack/NetHack,373,2020-07-12T12:49:18Z,2020-07-12T12:49:41Z,2020-07-12T12:51:00Z,CLOSED,False,149,111,11,https://github.com/emalron,Test1 풀 리퀘스트,8,[],https://github.com/NetHack/NetHack/pull/373,https://github.com/emalron,1,https://github.com/NetHack/NetHack/pull/373,소소하게 수정해봤습니다,소소하게 수정해봤습니다,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,374,2020-07-13T04:39:58Z,2021-01-01T06:37:34Z,2021-01-02T19:46:52Z,MERGED,True,25,18,4,https://github.com/entrez,Check bones data directly for deja vu messages,6,[],https://github.com/NetHack/NetHack/pull/374,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/374,"After modifications to the amnesia mechanic, `deja vu' messages are now displayed upon entering a level containing bones of a previous character of the current player. This test is done simply by checking for a ghost on the level that shares a name with the current character.
However, since ghosts generated in other circumstances (for example, in the Valley of the Dead and other special levels) can have names pulled randomly from the high score list, etc, this message can be displayed on non-bones levels where a ghost has been generated with the character's name. Additionally, when a bones pile doesn't include a ghost (such as when the character in question was slimed, killed by a wraith, etc), the `deja vu' message will not be displayed when it should be. This is all described in in #322.
This pull request would change the method of testing for `familiarity' by adding a function to iterate through any bones data for the current level, searching for a match with the hero's name.
Would close #322.","After modifications to the amnesia mechanic, `deja vu' messages are now displayed upon entering a level containing bones of a previous character of the current player. This test is done simply by checking for a ghost on the level that shares a name with the current character.
However, since ghosts generated in other circumstances (for example, in the Valley of the Dead and other special levels) can have names pulled randomly from the high score list, etc, this message can be displayed on non-bones levels where a ghost has been generated with the character's name. Additionally, when a bones pile doesn't include a ghost (such as when the character in question was slimed, killed by a wraith, etc), the `deja vu' message will not be displayed when it should be. This is all described in in #322.
This pull request would change the method of testing for `familiarity' by adding a function to iterate through any bones data for the current level, searching for a match with the hero's name.
Would close #322.",True,"{'THUMBS_UP': ['https://github.com/copperwater', 'https://github.com/NullCGT', 'https://github.com/actual-nh']}"
NetHack/NetHack,https://github.com/NetHack/NetHack,374,2020-07-13T04:39:58Z,2021-01-01T06:37:34Z,2021-01-02T19:46:52Z,MERGED,True,25,18,4,https://github.com/entrez,Check bones data directly for deja vu messages,6,[],https://github.com/NetHack/NetHack/pull/374,https://github.com/copperwater,2,https://github.com/NetHack/NetHack/pull/374#issuecomment-657467712,"After modifications to the amnesia mechanic, `deja vu' messages are now displayed upon entering a level containing bones of a previous character of the current player. This test is done simply by checking for a ghost on the level that shares a name with the current character.
However, since ghosts generated in other circumstances (for example, in the Valley of the Dead and other special levels) can have names pulled randomly from the high score list, etc, this message can be displayed on non-bones levels where a ghost has been generated with the character's name. Additionally, when a bones pile doesn't include a ghost (such as when the character in question was slimed, killed by a wraith, etc), the `deja vu' message will not be displayed when it should be. This is all described in in #322.
This pull request would change the method of testing for `familiarity' by adding a function to iterate through any bones data for the current level, searching for a match with the hero's name.
Would close #322.","This will leave the find_ghost_with_name function with no callers. This function was only added for the purpose of identifying a level that should print the deja vu message, so this pull request should delete it.",True,{'THUMBS_UP': ['https://github.com/entrez']}
NetHack/NetHack,https://github.com/NetHack/NetHack,375,2020-07-31T03:12:04Z,2020-07-31T17:37:19Z,2020-08-01T03:24:46Z,MERGED,True,2,0,1,https://github.com/copperwater,Add instructions to zero mextra struct pointer in mextra documentation,1,[],https://github.com/NetHack/NetHack/pull/375,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/375,"It doesn't mention anywhere that newmextra() is responsible for
initializing struct mextra with null pointers to the various
sub-structs. So, when one follows the instructions and doesn't know or
remember to do this, they'll get segfaults when something tries to read
the uninitialized pointer to their new struct.","It doesn't mention anywhere that newmextra() is responsible for
initializing struct mextra with null pointers to the various
sub-structs. So, when one follows the instructions and doesn't know or
remember to do this, they'll get segfaults when something tries to read
the uninitialized pointer to their new struct.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,377,2020-08-07T18:58:28Z,2020-08-08T03:37:20Z,2020-12-30T18:54:14Z,CLOSED,False,1,0,1,https://github.com/entrez,Fix aborted worm placement failing sanity check,1,[],https://github.com/NetHack/NetHack/pull/377,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/377,"initworm(worm.c) sets wx and wy of wheads[worm->wormno] to worm->mx and worm->my. Because place_worm_tail_randomly reverses all the segments of the worm in the process of placing them, however, this segment with a wx and wy matching the worm ends up being the final tail segment rather than the head.
When place_worm_tail_randomly is forced to abort early, it calls toss_wsegs, which removes the g.level.monsters entry for each segment's wx and wy (based on the assumption that a segment having a wx and wy means it has been placed on the map). Since the final tail piece has a wx and wy that matches the worm itself, the worm ends up being removed from the map, and therefore causes mon_sanity_check(mon.c) to fail -- the worm is still in the list of monsters, but nothing exists on the map where it's supposed to be.
This problem can be avoided by preemptively setting the wx and wy of wheads[worm->wormno] to 0 in place_worm_tail_randomly before starting to reverse the worm's segments/place the worm.","initworm(worm.c) sets wx and wy of wheads[worm->wormno] to worm->mx and worm->my. Because place_worm_tail_randomly reverses all the segments of the worm in the process of placing them, however, this segment with a wx and wy matching the worm ends up being the final tail segment rather than the head.
When place_worm_tail_randomly is forced to abort early, it calls toss_wsegs, which removes the g.level.monsters entry for each segment's wx and wy (based on the assumption that a segment having a wx and wy means it has been placed on the map). Since the final tail piece has a wx and wy that matches the worm itself, the worm ends up being removed from the map, and therefore causes mon_sanity_check(mon.c) to fail -- the worm is still in the list of monsters, but nothing exists on the map where it's supposed to be.
This problem can be avoided by preemptively setting the wx and wy of wheads[worm->wormno] to 0 in place_worm_tail_randomly before starting to reverse the worm's segments/place the worm.",True,{'THUMBS_UP': ['https://github.com/bhaak']}
NetHack/NetHack,https://github.com/NetHack/NetHack,377,2020-08-07T18:58:28Z,2020-08-08T03:37:20Z,2020-12-30T18:54:14Z,CLOSED,False,1,0,1,https://github.com/entrez,Fix aborted worm placement failing sanity check,1,[],https://github.com/NetHack/NetHack/pull/377,https://github.com/entrez,2,https://github.com/NetHack/NetHack/pull/377#issuecomment-670668841,"initworm(worm.c) sets wx and wy of wheads[worm->wormno] to worm->mx and worm->my. Because place_worm_tail_randomly reverses all the segments of the worm in the process of placing them, however, this segment with a wx and wy matching the worm ends up being the final tail segment rather than the head.
When place_worm_tail_randomly is forced to abort early, it calls toss_wsegs, which removes the g.level.monsters entry for each segment's wx and wy (based on the assumption that a segment having a wx and wy means it has been placed on the map). Since the final tail piece has a wx and wy that matches the worm itself, the worm ends up being removed from the map, and therefore causes mon_sanity_check(mon.c) to fail -- the worm is still in the list of monsters, but nothing exists on the map where it's supposed to be.
This problem can be avoided by preemptively setting the wx and wy of wheads[worm->wormno] to 0 in place_worm_tail_randomly before starting to reverse the worm's segments/place the worm.","To be more specific about the issue that this would fix, here's the actual sequence of events laid out.

The new worm is placed into g.level.monsters[x][y]:

  
    
      NetHack/src/makemon.c
    
    
         Line 1265
      in
      46f19f8
    
  
  
    

        
          
           place_monster(mtmp, x, y); 
        
    
  


The last segment of the worm, wheads[worm->wormno],  is set to match the worm's position on the map:

  
    
      NetHack/src/worm.c
    
    
        Lines 121 to 131
      in
      46f19f8
    
  
  
    

        
          
           if (new_tail) { 
        

        
          
               wtails[wnum] = new_tail; 
        

        
          
               for (seg = new_tail; seg->nseg; seg = seg->nseg) 
        

        
          
                   continue; 
        

        
          
               wheads[wnum] = seg; 
        

        
          
           } else { 
        

        
          
               wtails[wnum] = wheads[wnum] = seg = newseg(); 
        

        
          
               seg->nseg = (struct wseg *) 0; 
        

        
          
           } 
        

        
          
           seg->wx = worm->mx; 
        

        
          
           seg->wy = worm->my; 
        
    
  


place_worm_tail_randomly uses wtails[worm->wormno] as the head, and delegates wheads[worm->wormno] to be the (eventual) final tail segment:

  
    
      NetHack/src/worm.c
    
    
        Lines 722 to 735
      in
      46f19f8
    
  
  
    

        
          
           struct wseg *curr = wtails[wnum]; 
        

        
          
           struct wseg *new_tail; 
        

        
          
           xchar ox = x, oy = y; 
        

        
          
            
        

        
          
           if (wnum && (!wtails[wnum] || !wheads[wnum])) { 
        

        
          
               impossible(""place_worm_tail_randomly: wormno is set without a tail!""); 
        

        
          
               return; 
        

        
          
           } 
        

        
          
            
        

        
          
           wheads[wnum] = new_tail = curr; 
        

        
          
           curr = curr->nseg; 
        

        
          
           new_tail->nseg = (struct wseg *) 0; 
        

        
          
           new_tail->wx = x; 
        

        
          
           new_tail->wy = y; 
        
    
  


On failure to place a segment, place_worm_tail_randomly calls toss_wsegs to delete all the unplaced segments:

  
    
      NetHack/src/worm.c
    
    
        Lines 755 to 757
      in
      46f19f8
    
  
  
    

        
          
           } else {                     /* Oops.  Truncate because there was */ 
        

        
          
               toss_wsegs(curr, FALSE); /* no place for the rest of it */ 
        

        
          
               curr = (struct wseg *) 0; 
        
    
  


toss_wsegs removes the monster at g.level.monsters[seg->wx][seg->wy], which winds up removing the worm when it hits the final unplaced segment:

  
    
      NetHack/src/worm.c
    
    
        Lines 152 to 160
      in
      46f19f8
    
  
  
    

        
          
                   /* remove from level.monsters[][]; 
        

        
          
                      need to check curr->wx for genocided while migrating_mon */ 
        

        
          
                   if (curr->wx) { 
        

        
          
                       remove_monster(curr->wx, curr->wy); 
        

        
          
            
        

        
          
                       /* update screen before deallocation */ 
        

        
          
                       if (display_update) 
        

        
          
                           newsym(curr->wx, curr->wy); 
        

        
          
                   }",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,379,2020-08-15T14:39:16Z,2020-08-28T05:37:18Z,2021-05-23T00:01:21Z,CLOSED,False,2,3,2,https://github.com/copperwater,Replace some checks on M3_DISPLACES with is_displacer(),1,[],https://github.com/NetHack/NetHack/pull/379,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/379,"There's no real reason to have it directly check M3_DISPLACES if there's
a macro that does this exact thing. No game logic is changed by this.","There's no real reason to have it directly check M3_DISPLACES if there's
a macro that does this exact thing. No game logic is changed by this.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,380,2020-08-16T02:17:35Z,2020-08-28T03:39:29Z,2021-05-23T00:01:09Z,CLOSED,False,3,2,1,https://github.com/copperwater,Fix player rendering as slime one turn early,1,[],https://github.com/NetHack/NetHack/pull/380,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/380,"This bug can be reproduced by getting Slimed, then waiting around until
the message ""You are turning into a green slime"", then moving. The
player renders as a green slime even though they have not yet become a
green slime and have one more action that could be used to negate the
sliming.
This is caused by the slime_dialogue() function causing the player to
appear as a green slime when the counter ticks down to 2, rather than 1
(which is the point at which ""You have become a green slime."" is shown
and the slime transformation actually happens). I think the original
purpose of doing it this way was because the next newsym() normally
wouldn't happen until the turn on which the timer ticks down to 1 - but
if the player forces a newsym by other means (such as moving) the bug is
exposed.
The fix here changes it so that the hero only starts rendering as a
green slime on that tick down to 1, then immediately calls newsym() to
show them as a slime during the ""You have become a green slime"" message
as originally intended.","This bug can be reproduced by getting Slimed, then waiting around until
the message ""You are turning into a green slime"", then moving. The
player renders as a green slime even though they have not yet become a
green slime and have one more action that could be used to negate the
sliming.
This is caused by the slime_dialogue() function causing the player to
appear as a green slime when the counter ticks down to 2, rather than 1
(which is the point at which ""You have become a green slime."" is shown
and the slime transformation actually happens). I think the original
purpose of doing it this way was because the next newsym() normally
wouldn't happen until the turn on which the timer ticks down to 1 - but
if the player forces a newsym by other means (such as moving) the bug is
exposed.
The fix here changes it so that the hero only starts rendering as a
green slime on that tick down to 1, then immediately calls newsym() to
show them as a slime during the ""You have become a green slime"" message
as originally intended.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,383,2020-08-26T18:03:56Z,,2022-01-27T17:05:33Z,OPEN,False,152,0,5,https://github.com/WillyHack,Cygwin port,5,[],https://github.com/NetHack/NetHack/pull/383,https://github.com/WillyHack,1,https://github.com/NetHack/NetHack/pull/383,Trying this out in a new Cygwin Install,Trying this out in a new Cygwin Install,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,385,2020-08-30T19:15:05Z,2020-10-05T04:37:22Z,2020-10-06T14:30:18Z,MERGED,True,4829,25,30,https://github.com/apowers313,libnethack,42,[],https://github.com/NetHack/NetHack/pull/385,https://github.com/apowers313,1,https://github.com/NetHack/NetHack/pull/385,"This PR has two new builds:

libnethack.a -- a unix-ish library that can be linked against
nethack.js -- a WebAssembly build of NetHack that can be run in the browser or node.js. This is also prepared to be published as a public npm module under sys/lib/npm-package.

See sys/lib/README.md for more details details about how to build and the library APIs.","This PR has two new builds:

libnethack.a -- a unix-ish library that can be linked against
nethack.js -- a WebAssembly build of NetHack that can be run in the browser or node.js. This is also prepared to be published as a public npm module under sys/lib/npm-package.

See sys/lib/README.md for more details details about how to build and the library APIs.",True,"{'THUMBS_UP': ['https://github.com/ostrosablin', 'https://github.com/winny-', 'https://github.com/larsw', 'https://github.com/k21971']}"
NetHack/NetHack,https://github.com/NetHack/NetHack,385,2020-08-30T19:15:05Z,2020-10-05T04:37:22Z,2020-10-06T14:30:18Z,MERGED,True,4829,25,30,https://github.com/apowers313,libnethack,42,[],https://github.com/NetHack/NetHack/pull/385,https://github.com/apowers313,2,https://github.com/NetHack/NetHack/pull/385#issuecomment-688064194,"This PR has two new builds:

libnethack.a -- a unix-ish library that can be linked against
nethack.js -- a WebAssembly build of NetHack that can be run in the browser or node.js. This is also prepared to be published as a public npm module under sys/lib/npm-package.

See sys/lib/README.md for more details details about how to build and the library APIs.","Published here: https://www.npmjs.com/package/@neth4ck/neth4ck
I created a new neth4ck organization on NPM. If anyone wants to be added to the organization to control packages let me know and I will happily add you.
(note: npm doesn't allow organizations or packages with hack in the name, thus h4ck)",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,385,2020-08-30T19:15:05Z,2020-10-05T04:37:22Z,2020-10-06T14:30:18Z,MERGED,True,4829,25,30,https://github.com/apowers313,libnethack,42,[],https://github.com/NetHack/NetHack/pull/385,https://github.com/moon-chilled,3,https://github.com/NetHack/NetHack/pull/385#issuecomment-703037686,"This PR has two new builds:

libnethack.a -- a unix-ish library that can be linked against
nethack.js -- a WebAssembly build of NetHack that can be run in the browser or node.js. This is also prepared to be published as a public npm module under sys/lib/npm-package.

See sys/lib/README.md for more details details about how to build and the library APIs.",WASM is better than __EMSCRIPTEN__.  Emscripten needn't be the only c compiler targeting webassembly.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,385,2020-08-30T19:15:05Z,2020-10-05T04:37:22Z,2020-10-06T14:30:18Z,MERGED,True,4829,25,30,https://github.com/apowers313,libnethack,42,[],https://github.com/NetHack/NetHack/pull/385,https://github.com/apowers313,4,https://github.com/NetHack/NetHack/pull/385#issuecomment-703315117,"This PR has two new builds:

libnethack.a -- a unix-ish library that can be linked against
nethack.js -- a WebAssembly build of NetHack that can be run in the browser or node.js. This is also prepared to be published as a public npm module under sys/lib/npm-package.

See sys/lib/README.md for more details details about how to build and the library APIs.","@moon-chilled Not sure it matters much in the context of this PR since we can treat alternate WebAssembly approaches similar to other toolchains in the Unix build. That said I'm having a hard time parsing your comment and I'd like to learn more. My understanding is that ""WASM"" is just short for ""WebAssembly"" and the alternative to creating WASM with Emscripten is a process that wouldn't scale to building NetHack.
Is there a trick or a toolchain that I'm unaware of?",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,385,2020-08-30T19:15:05Z,2020-10-05T04:37:22Z,2020-10-06T14:30:18Z,MERGED,True,4829,25,30,https://github.com/apowers313,libnethack,42,[],https://github.com/NetHack/NetHack/pull/385,https://github.com/nhmall,5,https://github.com/NetHack/NetHack/pull/385#issuecomment-703337585,"This PR has two new builds:

libnethack.a -- a unix-ish library that can be linked against
nethack.js -- a WebAssembly build of NetHack that can be run in the browser or node.js. This is also prepared to be published as a public npm module under sys/lib/npm-package.

See sys/lib/README.md for more details details about how to build and the library APIs.","I've resolved the new conflicts upstream and merged the changes (I think). They will be available later this evening.
The PR had been sitting dormant for 22 days, but was updated while merging earlier today.  The updates conflicted
because the PR was modified from original upon merge:

instead of separate new Makefiles, I adapted it to use the existing sys/unix/Makefiles and the new cross-compiler insertion and overrides, similar to how other recent cross-compiles are doing it.
In the updates that will be merged in a few hours, sys/lib/libnethackmain.c is included now, since more extensive code edits have been added in the changes today.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,385,2020-08-30T19:15:05Z,2020-10-05T04:37:22Z,2020-10-06T14:30:18Z,MERGED,True,4829,25,30,https://github.com/apowers313,libnethack,42,[],https://github.com/NetHack/NetHack/pull/385,https://github.com/nhmall,6,https://github.com/NetHack/NetHack/pull/385#issuecomment-704253704,"This PR has two new builds:

libnethack.a -- a unix-ish library that can be linked against
nethack.js -- a WebAssembly build of NetHack that can be run in the browser or node.js. This is also prepared to be published as a public npm module under sys/lib/npm-package.

See sys/lib/README.md for more details details about how to build and the library APIs.","Assuming that you have already installed emscripten on your macOS or Linux system,
cd sys/unix ; ./setup.sh hints/macOS.2020 ; cd ../..
or
cd sys/unix ; ./setup.sh hints/linux.2020 ; cd ../..
make CROSS_TO_WASM=1        (results in targets/wasm)
make WANT_LIBNH=1                (resulting libnethack.a in src)
@apowers313 : thanks for starting this. We'll see where it might eventually go.",True,{'THUMBS_UP': ['https://github.com/apowers313']}
NetHack/NetHack,https://github.com/NetHack/NetHack,386,2020-08-30T23:28:51Z,2020-09-19T03:37:19Z,2020-09-19T03:37:19Z,CLOSED,False,10,8,2,https://github.com/FredrIQ,"Fix several issues with monster interruption checks, and an info leak",1,[],https://github.com/NetHack/NetHack/pull/386,https://github.com/FredrIQ,1,https://github.com/NetHack/NetHack/pull/386,"The automatic interruption system for approaching monsters was comparing
the old tile in cases where new tile was intended. Also, the way the checks
were constructed caused monsters seen by astral vision to constantly interrupt
you. There was also an information leak where the game would reveal monsters
without any attacks even if you were hallucinating. The game also stopped
interrupting you if you were confused, which was not only confusing to the
player, but also a pointless UI screw.
The interruption conditionals was changed. This is how the new system works:
Monsters interrupt you if:

they are within 9 tiles (ball radius), can be spotted (vision or detection),
and within LOS, and...
it was outside 9 tiles ball radius, outside LOS or wasn't previously spotted.
monster is hostile, has attacks, or you're hallucinating (since it conceals
the information)","The automatic interruption system for approaching monsters was comparing
the old tile in cases where new tile was intended. Also, the way the checks
were constructed caused monsters seen by astral vision to constantly interrupt
you. There was also an information leak where the game would reveal monsters
without any attacks even if you were hallucinating. The game also stopped
interrupting you if you were confused, which was not only confusing to the
player, but also a pointless UI screw.
The interruption conditionals was changed. This is how the new system works:
Monsters interrupt you if:

they are within 9 tiles (ball radius), can be spotted (vision or detection),
and within LOS, and...
it was outside 9 tiles ball radius, outside LOS or wasn't previously spotted.
monster is hostile, has attacks, or you're hallucinating (since it conceals
the information)",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,390,2020-09-18T23:46:51Z,2020-09-27T21:39:27Z,2021-05-23T00:00:12Z,CLOSED,False,22,2,2,https://github.com/copperwater,"Fix the ""stuck pets"" bug (github issue #329)",1,[],https://github.com/NetHack/NetHack/pull/390,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/390,"This commit is intended to fix the bug where a pet will get fixated on
an unmoving monster and stop moving itself. I described the cause in the
github issue; the gist is that the pet AI chooses the unmoving monster
as its ranged target, doesn't do anything when it calls mattackm
(because it doesn't have ranged attacks), then returns a value
indicating it didn't move and can't take further actions.
I initially implemented a fix that refactored mattackm to distinguish
between ""attacker missed"" and ""attacker did nothing"", which the pet AI
could then use to determine whether the pet could continue doing things.
But then I realized that if mattackm is called with non-adjacent
monsters, a return of MM_MISS more or less unambiguously indicates that
the attacker did nothing (because the ranged functions it calls like
breamm don't actually check to see whether the target was hit, just
whether the monster initiated the attack.) So, this only really needed
to check whether mattackm returned with MM_MISS.
I also found a probable bug in mattackm, in that the thrwmm call isn't
treated the same as breamm or spitmm. In the latter two, mattackm
returns MM_HIT even though it doesn't check whether the ranged attack
actually hit its target. But there was no logic doing the same for
thrwmm, so this commit also adds that. (Otherwise, a pet could possibly
use a ranged weapon attack and then get to keep moving on its turn.)","This commit is intended to fix the bug where a pet will get fixated on
an unmoving monster and stop moving itself. I described the cause in the
github issue; the gist is that the pet AI chooses the unmoving monster
as its ranged target, doesn't do anything when it calls mattackm
(because it doesn't have ranged attacks), then returns a value
indicating it didn't move and can't take further actions.
I initially implemented a fix that refactored mattackm to distinguish
between ""attacker missed"" and ""attacker did nothing"", which the pet AI
could then use to determine whether the pet could continue doing things.
But then I realized that if mattackm is called with non-adjacent
monsters, a return of MM_MISS more or less unambiguously indicates that
the attacker did nothing (because the ranged functions it calls like
breamm don't actually check to see whether the target was hit, just
whether the monster initiated the attack.) So, this only really needed
to check whether mattackm returned with MM_MISS.
I also found a probable bug in mattackm, in that the thrwmm call isn't
treated the same as breamm or spitmm. In the latter two, mattackm
returns MM_HIT even though it doesn't check whether the ranged attack
actually hit its target. But there was no logic doing the same for
thrwmm, so this commit also adds that. (Otherwise, a pet could possibly
use a ranged weapon attack and then get to keep moving on its turn.)",True,"{'THUMBS_UP': ['https://github.com/ostrosablin', 'https://github.com/gebulmer', 'https://github.com/entrez']}"
NetHack/NetHack,https://github.com/NetHack/NetHack,390,2020-09-18T23:46:51Z,2020-09-27T21:39:27Z,2021-05-23T00:00:12Z,CLOSED,False,22,2,2,https://github.com/copperwater,"Fix the ""stuck pets"" bug (github issue #329)",1,[],https://github.com/NetHack/NetHack/pull/390,https://github.com/ostrosablin,2,https://github.com/NetHack/NetHack/pull/390#issuecomment-695188504,"This commit is intended to fix the bug where a pet will get fixated on
an unmoving monster and stop moving itself. I described the cause in the
github issue; the gist is that the pet AI chooses the unmoving monster
as its ranged target, doesn't do anything when it calls mattackm
(because it doesn't have ranged attacks), then returns a value
indicating it didn't move and can't take further actions.
I initially implemented a fix that refactored mattackm to distinguish
between ""attacker missed"" and ""attacker did nothing"", which the pet AI
could then use to determine whether the pet could continue doing things.
But then I realized that if mattackm is called with non-adjacent
monsters, a return of MM_MISS more or less unambiguously indicates that
the attacker did nothing (because the ranged functions it calls like
breamm don't actually check to see whether the target was hit, just
whether the monster initiated the attack.) So, this only really needed
to check whether mattackm returned with MM_MISS.
I also found a probable bug in mattackm, in that the thrwmm call isn't
treated the same as breamm or spitmm. In the latter two, mattackm
returns MM_HIT even though it doesn't check whether the ranged attack
actually hit its target. But there was no logic doing the same for
thrwmm, so this commit also adds that. (Otherwise, a pet could possibly
use a ranged weapon attack and then get to keep moving on its turn.)","I've been waiting for this patch for so long. A major game breaker for now, which (for me) spoils all the fun from playing 3.7.0 beta, since pets don't feel right and can get stuck at any moment.
Update: Tested for a while a build with this patch included. Works like a charm. Pets no longer get stuck and don't see any oddities. Seems like a perfect fix.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,390,2020-09-18T23:46:51Z,2020-09-27T21:39:27Z,2021-05-23T00:00:12Z,CLOSED,False,22,2,2,https://github.com/copperwater,"Fix the ""stuck pets"" bug (github issue #329)",1,[],https://github.com/NetHack/NetHack/pull/390,https://github.com/copperwater,3,https://github.com/NetHack/NetHack/pull/390#issuecomment-699691538,"This commit is intended to fix the bug where a pet will get fixated on
an unmoving monster and stop moving itself. I described the cause in the
github issue; the gist is that the pet AI chooses the unmoving monster
as its ranged target, doesn't do anything when it calls mattackm
(because it doesn't have ranged attacks), then returns a value
indicating it didn't move and can't take further actions.
I initially implemented a fix that refactored mattackm to distinguish
between ""attacker missed"" and ""attacker did nothing"", which the pet AI
could then use to determine whether the pet could continue doing things.
But then I realized that if mattackm is called with non-adjacent
monsters, a return of MM_MISS more or less unambiguously indicates that
the attacker did nothing (because the ranged functions it calls like
breamm don't actually check to see whether the target was hit, just
whether the monster initiated the attack.) So, this only really needed
to check whether mattackm returned with MM_MISS.
I also found a probable bug in mattackm, in that the thrwmm call isn't
treated the same as breamm or spitmm. In the latter two, mattackm
returns MM_HIT even though it doesn't check whether the ranged attack
actually hit its target. But there was no logic doing the same for
thrwmm, so this commit also adds that. (Otherwise, a pet could possibly
use a ranged weapon attack and then get to keep moving on its turn.)",Merged.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,393,2020-09-27T21:21:59Z,2020-09-28T14:15:52Z,2021-05-22T23:59:38Z,CLOSED,False,18,18,11,https://github.com/copperwater,Fix: missing filled flags in various levels,1,[],https://github.com/NetHack/NetHack/pull/393,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/393,"This is an omission in the filled/prefilled unification. The default for
filled on regions now being 0 meant that regions that had previously had
no need for any fill declaration at all (regions' prefilled defaulted to
0 before this, the effect being to fill them) now failed to get filled.
The rule of thumb is that all des.regions with a type for which filled
is meaningful (e.g. special rooms) should declare the fill status. I
added it to a bunch of temples even though this doesn't really seem to
affect anything there (the priest and altar come with the altar
definition). I assigned temples filled=1 and filled=2 loosely based on
if there is ever being some other generation that would put other
furniture or items in a temple, but the distinction should not affect
anything right now.
Cases fixed where non-temple regions weren't getting filled:

Barracks, a graveyard, and shops in Tou-goal
The beehive in the Wizard's Tower","This is an omission in the filled/prefilled unification. The default for
filled on regions now being 0 meant that regions that had previously had
no need for any fill declaration at all (regions' prefilled defaulted to
0 before this, the effect being to fill them) now failed to get filled.
The rule of thumb is that all des.regions with a type for which filled
is meaningful (e.g. special rooms) should declare the fill status. I
added it to a bunch of temples even though this doesn't really seem to
affect anything there (the priest and altar come with the altar
definition). I assigned temples filled=1 and filled=2 loosely based on
if there is ever being some other generation that would put other
furniture or items in a temple, but the distinction should not affect
anything right now.
Cases fixed where non-temple regions weren't getting filled:

Barracks, a graveyard, and shops in Tou-goal
The beehive in the Wizard's Tower",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,394,2020-09-28T16:56:03Z,2020-09-28T17:01:34Z,2021-05-22T23:58:56Z,CLOSED,False,8,3,3,https://github.com/copperwater,More level generation bug fixes,4,[],https://github.com/NetHack/NetHack/pull/394,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/394,"This contains a couple more fixes for bugs discovered later in xNetHack after the Lua changes in #347 were merged into it, plus a couple fixes for latent level generation bugs.","This contains a couple more fixes for bugs discovered later in xNetHack after the Lua changes in #347 were merged into it, plus a couple fixes for latent level generation bugs.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,397,2020-10-07T12:00:55Z,2020-10-07T17:37:19Z,2021-05-22T23:37:59Z,CLOSED,False,2,2,1,https://github.com/copperwater,Fix non-whirly monsters seeping through their shirts,1,[],https://github.com/NetHack/NetHack/pull/397,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/397,"Minor message bug. Checking sliparm is wrong here because that entire segment of code was already in a clause that had guaranteed sliparm. Assuming this is supposed to be a mirror of the player logic in polyself.c, the case for seeping through one's shirt should be limited to whirly monsters.
The weird message is reproducible by turning on monpolycontrol, getting some monster to pick up and put on a +5 shirt, and polymorphing it into something tiny like a newt that will trigger sliparm but is not whirly.","Minor message bug. Checking sliparm is wrong here because that entire segment of code was already in a clause that had guaranteed sliparm. Assuming this is supposed to be a mirror of the player logic in polyself.c, the case for seeping through one's shirt should be limited to whirly monsters.
The weird message is reproducible by turning on monpolycontrol, getting some monster to pick up and put on a +5 shirt, and polymorphing it into something tiny like a newt that will trigger sliparm but is not whirly.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,399,2020-10-10T15:49:03Z,2020-10-11T15:08:19Z,2020-10-11T15:08:23Z,CLOSED,False,1,1,1,https://github.com/entrez,Use simple_typename when trying to repair a broken lock,2,[],https://github.com/NetHack/NetHack/pull/399,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/399,"Using doname includes information like BUC level, so that the resulting message when applying a key on a broken box is something like ``You can't fix its broken lock with an uncursed key.'' -- this makes me feel like ``uncursed'' is being stressed, as if a blessed key would fix the lock (and so on for any other attributes doname can include). I think it's clearer to just say ``You can't fix the lock with a [skeleton key|credit card|lock pick].''","Using doname includes information like BUC level, so that the resulting message when applying a key on a broken box is something like ``You can't fix its broken lock with an uncursed key.'' -- this makes me feel like ``uncursed'' is being stressed, as if a blessed key would fix the lock (and so on for any other attributes doname can include). I think it's clearer to just say ``You can't fix the lock with a [skeleton key|credit card|lock pick].''",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,403,2020-10-19T20:26:44Z,2020-10-31T17:37:20Z,2020-10-31T17:37:21Z,MERGED,True,40,26,7,https://github.com/apowers313,wasm bug fixes,8,[],https://github.com/NetHack/NetHack/pull/403,https://github.com/apowers313,1,https://github.com/NetHack/NetHack/pull/403,"Fixes wasm bugs:

stray printf
COPYRIGHT_BANNER_C not defined for cross-compile
define NO_SIGNAL and wrap it around calls to sethanguphandler
set HACKDIR to / and include files at that location
add --profiling flag to prevent 10MBs of text dumped to screen on error
fix npm build
and more :)","Fixes wasm bugs:

stray printf
COPYRIGHT_BANNER_C not defined for cross-compile
define NO_SIGNAL and wrap it around calls to sethanguphandler
set HACKDIR to / and include files at that location
add --profiling flag to prevent 10MBs of text dumped to screen on error
fix npm build
and more :)",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,404,2020-10-21T12:40:34Z,,2022-01-27T17:13:21Z,OPEN,False,8,8,8,https://github.com/gebulmer,Prevent sokoban levels being flipped,1,[],https://github.com/NetHack/NetHack/pull/404,https://github.com/gebulmer,1,https://github.com/NetHack/NetHack/pull/404,"Sokoban levels in particular being flipped is a cause of a frustration,
particularly for long-time players whose muscle memory gets confused.
Note that the player confusion is different from if there were new levels
instead (my preferred solution) that must be done.
To a lesser extent it affects new players attempting to follow a guide,
though guides can be independently updated.","Sokoban levels in particular being flipped is a cause of a frustration,
particularly for long-time players whose muscle memory gets confused.
Note that the player confusion is different from if there were new levels
instead (my preferred solution) that must be done.
To a lesser extent it affects new players attempting to follow a guide,
though guides can be independently updated.",True,"{'THUMBS_UP': ['https://github.com/copperwater', 'https://github.com/k21971', 'https://github.com/NullCGT', 'https://github.com/Luxidream', 'https://github.com/RojjaCebolla']}"
NetHack/NetHack,https://github.com/NetHack/NetHack,404,2020-10-21T12:40:34Z,,2022-01-27T17:13:21Z,OPEN,False,8,8,8,https://github.com/gebulmer,Prevent sokoban levels being flipped,1,[],https://github.com/NetHack/NetHack/pull/404,https://github.com/ostrosablin,2,https://github.com/NetHack/NetHack/pull/404#issuecomment-713559238,"Sokoban levels in particular being flipped is a cause of a frustration,
particularly for long-time players whose muscle memory gets confused.
Note that the player confusion is different from if there were new levels
instead (my preferred solution) that must be done.
To a lesser extent it affects new players attempting to follow a guide,
though guides can be independently updated.","Agreed. In my last game, I too, reached sokoban and got a flipped 2a level, which on it's own a single most difficult sokoban level in NetHack, and it's just been made more annoying by flipping, messing with my memory.
Flipping level causes annoyance for long-time players while adding dubious value of making sokoban more difficult (not challenging, or more interesting - just plain more difficult and annoying, because it's same old levels, just flipped, causing frustration, because it feels confusing).
I propose either to revert flipping and keep with old behavior, or, like @gebulmer suggested - solve level diversity by adding true new levels (e.g. like UnNetHack did).
Personally, my preferred solution is just to undo flipping. I think, many NetHack players (me included) feel like a truly challenging and diverse Sokoban puzzles feels out of place in NetHack, because when you can get stumped for hours with a difficult level, it's just frustrating and intrusive, because it just draws you out from exploring dungeons and NetHack's gameplay. So, in my opinion, 8 default levels are perfectly fine (and can be done with muscle memory). They allow to view Sokoban as a refill branch, which allows to collect some food, rings, wands and ultimately, the Sokoban prize. And it anyway presents a challenge, even if you remember how to solve each level (which can be unfortunate monster generation,  forcing you to break boulders and incur luck penalty upon you, strong monsters that sometimes generate in Sokoban, which might provide a challenge, and even might crowd and kill you outright, if you're not prepared, this is especially true for a treasure zoo on the last level).",True,{'THUMBS_UP': ['https://github.com/gebulmer']}
NetHack/NetHack,https://github.com/NetHack/NetHack,404,2020-10-21T12:40:34Z,,2022-01-27T17:13:21Z,OPEN,False,8,8,8,https://github.com/gebulmer,Prevent sokoban levels being flipped,1,[],https://github.com/NetHack/NetHack/pull/404,https://github.com/bhaak,3,https://github.com/NetHack/NetHack/pull/404#issuecomment-713585587,"Sokoban levels in particular being flipped is a cause of a frustration,
particularly for long-time players whose muscle memory gets confused.
Note that the player confusion is different from if there were new levels
instead (my preferred solution) that must be done.
To a lesser extent it affects new players attempting to follow a guide,
though guides can be independently updated.","Level flipping was already longer in UnNetHack and over time, I tended to reduce level flipping for regular levels (a flipped mine town doesn't do much for level variation but hampers levels being recognisable or memorable).
But Sokoban levels being flipped, I still consider a good thing. But this is in UnNetHack, which has only 3 levels, additional Sokoban levels, and no luck penalties.
I'm not sure if muscle memory is a good argument here. Players didn't need to adjust their muscle memory for over a decade but if you want change, that's something that happens. With new Sokoban levels, this would also destroy their muscle memory for those new levels.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,404,2020-10-21T12:40:34Z,,2022-01-27T17:13:21Z,OPEN,False,8,8,8,https://github.com/gebulmer,Prevent sokoban levels being flipped,1,[],https://github.com/NetHack/NetHack/pull/404,https://github.com/gebulmer,4,https://github.com/NetHack/NetHack/pull/404#issuecomment-713590864,"Sokoban levels in particular being flipped is a cause of a frustration,
particularly for long-time players whose muscle memory gets confused.
Note that the player confusion is different from if there were new levels
instead (my preferred solution) that must be done.
To a lesser extent it affects new players attempting to follow a guide,
though guides can be independently updated.","There's a difference between having no muscle memory for a new level (fine, can learn and pick it up) and getting confused and frustrated by the level you 'know' being different (not fine, have to unlearn in order to progress)
This isn't a hill I'm particularly wanting to die on, but that's my personal reason for not liking it
Others have expressed similar in IRC, so I figured I'd make the PR and see if it leads anywhere",True,"{'THUMBS_UP': ['https://github.com/copperwater', 'https://github.com/nhmall', 'https://github.com/NullCGT']}"
NetHack/NetHack,https://github.com/NetHack/NetHack,404,2020-10-21T12:40:34Z,,2022-01-27T17:13:21Z,OPEN,False,8,8,8,https://github.com/gebulmer,Prevent sokoban levels being flipped,1,[],https://github.com/NetHack/NetHack/pull/404,https://github.com/copperwater,5,https://github.com/NetHack/NetHack/pull/404#issuecomment-713721895,"Sokoban levels in particular being flipped is a cause of a frustration,
particularly for long-time players whose muscle memory gets confused.
Note that the player confusion is different from if there were new levels
instead (my preferred solution) that must be done.
To a lesser extent it affects new players attempting to follow a guide,
though guides can be independently updated.","Paraphrasing my sentiment from IRC - I agree with removing the flipping, largely on the basis that the vast majority of players who have expressed an opinion about flipped sokoban have shown dislike for it. (Still waiting on bhaak to produce evidence of a player other than himself that says they like flipped sokoban for some positive reason - other than hurting their brain or giving them something to hate on 3.7 for.)
I don't think the muscle memory based argument for replacing sokoban flipping with new levels is a particularly strong one, because then players who prefer just coasting through sokoban on muscle memory get dissatisfied. Still, I'd like to see that happen, because I'd like to see flipped sokoban removed for its unpopularity, and adding new levels is the cleanest and easiest way to escape from being stuck in 3.4.3-era sokoban forever. (What I see as the proper solution to satisfy both Sokoban-lovers and Sokoban-haters who are in it only for the prize is to provide a parallel non-puzzle branch, but this would require some overhauling to make it work...)",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,404,2020-10-21T12:40:34Z,,2022-01-27T17:13:21Z,OPEN,False,8,8,8,https://github.com/gebulmer,Prevent sokoban levels being flipped,1,[],https://github.com/NetHack/NetHack/pull/404,https://github.com/k21971,6,https://github.com/NetHack/NetHack/pull/404#issuecomment-715399191,"Sokoban levels in particular being flipped is a cause of a frustration,
particularly for long-time players whose muscle memory gets confused.
Note that the player confusion is different from if there were new levels
instead (my preferred solution) that must be done.
To a lesser extent it affects new players attempting to follow a guide,
though guides can be independently updated.","Perhaps make it an option the player can toggle on/off via their config - soko_flip TRUE or FALSE, has to be set at game start. bhaak may be correct that some players enjoy the flipped sokoban levels... but I have yet to hear any positive mention of it. So, to appease both those that like it and (the vast majority) of those that do not, make it an option.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,404,2020-10-21T12:40:34Z,,2022-01-27T17:13:21Z,OPEN,False,8,8,8,https://github.com/gebulmer,Prevent sokoban levels being flipped,1,[],https://github.com/NetHack/NetHack/pull/404,https://github.com/jeremyn,7,https://github.com/NetHack/NetHack/pull/404#issuecomment-756992394,"Sokoban levels in particular being flipped is a cause of a frustration,
particularly for long-time players whose muscle memory gets confused.
Note that the player confusion is different from if there were new levels
instead (my preferred solution) that must be done.
To a lesser extent it affects new players attempting to follow a guide,
though guides can be independently updated.","I haven't tried 3.7 or encountered flipped Sokoban levels but it sounds pretty unfun to me. I don't have good muscle memory for any of the levels, just half-remembered solutions from previous plays, but most of them aside from 2a are easy enough to solve with a few moments thought, which is all right. Flipping just artificially increases the difficulty, but there are other ways to do that, like adding more boulder mimics, and I don't think that would be fun either.
If we're spitballing ideas here, I think it'd improve Sokoban to add a ""lever"" (special square) to each level that automatically fills in the pits if the player wants to skip solving the puzzle. Penalties, maybe randomly assigned, could include: a large luck or alignment hit; replacing the pits with slightly-harder-than-expected monsters; deleting remaining food/rings/wands on the level or from inventory; cursing player inventory. Put the lever at the end of a short hallway and before it add an engraving with a warning.
Adding extra, optional levels, maybe in an upstair from the current treasure zoo, could be fun. If each level has a bunch of food and one or two goodies like rings or wands, solving each could be its own reward. If we want more levels, years ago I wrote a game called Roguelike Sokoban which plays like NetHack and where I've adapted many public domain XSokoban levels, visible in my repo here. I'd be happy to help adapt them to NetHack if there's any interest. You can also use it to try out new Sokoban levels really easily, since you just type the new level map into a text file and then pass the text file as an argument to the main program.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,404,2020-10-21T12:40:34Z,,2022-01-27T17:13:21Z,OPEN,False,8,8,8,https://github.com/gebulmer,Prevent sokoban levels being flipped,1,[],https://github.com/NetHack/NetHack/pull/404,https://github.com/RojjaCebolla,8,https://github.com/NetHack/NetHack/pull/404#issuecomment-831699111,"Sokoban levels in particular being flipped is a cause of a frustration,
particularly for long-time players whose muscle memory gets confused.
Note that the player confusion is different from if there were new levels
instead (my preferred solution) that must be done.
To a lesser extent it affects new players attempting to follow a guide,
though guides can be independently updated.","Yeah, soko flipping doesn't make the level more challenging or more interesting, it's just frustration while you get the hang of reversing your usual inputs.  New levels would be approximately 400% more interesting than the minor interface screw produced by transforming existing, memorized levels.",True,{'THUMBS_UP': ['https://github.com/copperwater']}
NetHack/NetHack,https://github.com/NetHack/NetHack,406,2020-10-29T21:21:43Z,2020-11-06T04:37:25Z,2020-11-06T09:24:55Z,CLOSED,False,1,1,1,https://github.com/gebulmer,Add a guard for corpsenm in polyfodder macro,1,[],https://github.com/NetHack/NetHack/pull/406,https://github.com/gebulmer,1,https://github.com/NetHack/NetHack/pull/406,"If for example a dog eats a generic egg or a metallivore eats a
tin of spinach this will attempt to index into the mons array with a
negative index
Spotted whilst fuzzing with address sanitizer","If for example a dog eats a generic egg or a metallivore eats a
tin of spinach this will attempt to index into the mons array with a
negative index
Spotted whilst fuzzing with address sanitizer",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,407,2020-10-29T21:59:24Z,2021-07-16T20:37:19Z,2021-07-16T22:18:56Z,CLOSED,False,80,3,4,https://github.com/entrez,`Readable' Hawaiian shirt designs,1,[],https://github.com/NetHack/NetHack/pull/407,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/407,"Functionally similar to reading a t-shirt or apron, but rather than actual text printed on the shirt being read and displayed, the design of the Hawaiian shirt is instead described.","Functionally similar to reading a t-shirt or apron, but rather than actual text printed on the shirt being read and displayed, the design of the Hawaiian shirt is instead described.",True,"{'THUMBS_UP': ['https://github.com/actual-nh', 'https://github.com/winny-', 'https://github.com/copperwater', 'https://github.com/bluebear94', 'https://github.com/RojjaCebolla', 'https://github.com/davidssmith', 'https://github.com/red-kangaroo']}"
NetHack/NetHack,https://github.com/NetHack/NetHack,407,2020-10-29T21:59:24Z,2021-07-16T20:37:19Z,2021-07-16T22:18:56Z,CLOSED,False,80,3,4,https://github.com/entrez,`Readable' Hawaiian shirt designs,1,[],https://github.com/NetHack/NetHack/pull/407,https://github.com/copperwater,2,https://github.com/NetHack/NetHack/pull/407#issuecomment-755790207,"Functionally similar to reading a t-shirt or apron, but rather than actual text printed on the shirt being read and displayed, the design of the Hawaiian shirt is instead described.","I would re-add the ""sea turtles"" and ""tropical fish"" monsters even though they don't exist in NetHack, because they're very common Hawaiian shirt motifs. (Not angelfish, those are mostly tropical fish.)",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,407,2020-10-29T21:59:24Z,2021-07-16T20:37:19Z,2021-07-16T22:18:56Z,CLOSED,False,80,3,4,https://github.com/entrez,`Readable' Hawaiian shirt designs,1,[],https://github.com/NetHack/NetHack/pull/407,https://github.com/entrez,3,https://github.com/NetHack/NetHack/pull/407#issuecomment-755794069,"Functionally similar to reading a t-shirt or apron, but rather than actual text printed on the shirt being read and displayed, the design of the Hawaiian shirt is instead described.","I didn't want the list to become too biased towards generating sea creature motifs: if all the current sea creatures were kept on there, plus ""sea turtle"" and ""tropical fish"", the chance of a particular Hawaiian shirt having a sea creature of some sort on it would be ~44%. That seems pretty high to me.
But maybe it would be worth it to ditch ""electric eel"" (which is almost the same as ""giant eel"") and/or ""piranha"" (which brings jungle to mind more than tropical isle) to reintroduce those motifs.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,407,2020-10-29T21:59:24Z,2021-07-16T20:37:19Z,2021-07-16T22:18:56Z,CLOSED,False,80,3,4,https://github.com/entrez,`Readable' Hawaiian shirt designs,1,[],https://github.com/NetHack/NetHack/pull/407,https://github.com/jeremyn,4,https://github.com/NetHack/NetHack/pull/407#issuecomment-756455099,"Functionally similar to reading a t-shirt or apron, but rather than actual text printed on the shirt being read and displayed, the design of the Hawaiian shirt is instead described.","I've changed my mind from my earlier comment and think that going easy on NetHack references is for the best. What makes the shirt funny, both here and on Twoflower in the Discworld series where it originates, is that it's so wildly out of place for the setting. Making it heavily NetHack-oriented goes against that. So I agree with re-adding sea turtle etc.
You could add a minor Discworld shout-out to Twoflower's shirt's description in The Colo[u]r of Magic which is mentioned when he's introduced:

[He] was small and skinny, and dressed very oddly in a pair of knee length britches and a shirt in such a violent and vivid conflict of colors that Weasel's fastidious eye was offended even in the half-light.

For example you could return a fixed description of ""The design/It has such a violent and vivid conflict of colors that your eye is offended even in the half-light."" say, 5% of the time.
Also, and I'm sure you've considered this but just to say, if you replaced the random composition approach with a hardcoded list of ten or twenty descriptions, you could control for length and also maximize humor, such as it can be. But your random composition approach is good too.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,409,2020-11-10T09:58:46Z,,2022-01-27T17:13:29Z,OPEN,False,281,191,7,https://github.com/AndrioCelos,Spell cancelling,2,[],https://github.com/NetHack/NetHack/pull/409,https://github.com/AndrioCelos,1,https://github.com/NetHack/NetHack/pull/409,"This branch reorganises spell.c so that it is now possible to cancel casting most spells at the direction or target prompt.

tryspell checks conditions that would prevent casting, and handles Amulet energy drain.
targetspell prompts for a direction or target (for skilled fireball or cone of cold).
spelleffects now handles the actual spell effects, and assumes the spell is successful.
docastspecial is now used to cast a specific spell via a command other than Z instead of spelleffects. It can skip the direction/target prompt (for ^T).

However, there are some considerations regarding these changes:

Wands aren't changed. If you cancel at the direction prompt when zapping a wand, it does nothing but still uses a charge.
The message 'Never mind' is normally shown if you cancel at the direction prompt.
The roll for spell success is still done before the direction prompt, so you can cancel after this roll.
If you cancel after Amulet energy drain has occurred, it still uses a move. The message is replaced with 'Nothing happens' in this case.
The jumping spell hasn't been changed. With teleport away, you can cancel at the direction prompt, but not at the prompt for where to teleport to if you have teleport control (doing so still casts the spell, but you don't actually teleport).
For skilled fireball or cone of cold, picking an invalid target or casting the spell underwater or on the Plane of Water is considered the same as cancelling it. Some messages may need to be changed.

This branch also fixes a minor bug whereby unskilled fireball and cone of cold were subject to half physical damage when cast at yourself, and changes the message 'You don't have enough energy to cast that spell' to 'You no longer have enough energy to cast that spell' if you had enough energy prior to the attempt but didn't after Amulet energy drain.","This branch reorganises spell.c so that it is now possible to cancel casting most spells at the direction or target prompt.

tryspell checks conditions that would prevent casting, and handles Amulet energy drain.
targetspell prompts for a direction or target (for skilled fireball or cone of cold).
spelleffects now handles the actual spell effects, and assumes the spell is successful.
docastspecial is now used to cast a specific spell via a command other than Z instead of spelleffects. It can skip the direction/target prompt (for ^T).

However, there are some considerations regarding these changes:

Wands aren't changed. If you cancel at the direction prompt when zapping a wand, it does nothing but still uses a charge.
The message 'Never mind' is normally shown if you cancel at the direction prompt.
The roll for spell success is still done before the direction prompt, so you can cancel after this roll.
If you cancel after Amulet energy drain has occurred, it still uses a move. The message is replaced with 'Nothing happens' in this case.
The jumping spell hasn't been changed. With teleport away, you can cancel at the direction prompt, but not at the prompt for where to teleport to if you have teleport control (doing so still casts the spell, but you don't actually teleport).
For skilled fireball or cone of cold, picking an invalid target or casting the spell underwater or on the Plane of Water is considered the same as cancelling it. Some messages may need to be changed.

This branch also fixes a minor bug whereby unskilled fireball and cone of cold were subject to half physical damage when cast at yourself, and changes the message 'You don't have enough energy to cast that spell' to 'You no longer have enough energy to cast that spell' if you had enough energy prior to the attempt but didn't after Amulet energy drain.",True,"{'THUMBS_UP': ['https://github.com/gebulmer', 'https://github.com/copperwater']}"
NetHack/NetHack,https://github.com/NetHack/NetHack,409,2020-11-10T09:58:46Z,,2022-01-27T17:13:29Z,OPEN,False,281,191,7,https://github.com/AndrioCelos,Spell cancelling,2,[],https://github.com/NetHack/NetHack/pull/409,https://github.com/FredrIQ,2,https://github.com/NetHack/NetHack/pull/409#issuecomment-724597695,"This branch reorganises spell.c so that it is now possible to cancel casting most spells at the direction or target prompt.

tryspell checks conditions that would prevent casting, and handles Amulet energy drain.
targetspell prompts for a direction or target (for skilled fireball or cone of cold).
spelleffects now handles the actual spell effects, and assumes the spell is successful.
docastspecial is now used to cast a specific spell via a command other than Z instead of spelleffects. It can skip the direction/target prompt (for ^T).

However, there are some considerations regarding these changes:

Wands aren't changed. If you cancel at the direction prompt when zapping a wand, it does nothing but still uses a charge.
The message 'Never mind' is normally shown if you cancel at the direction prompt.
The roll for spell success is still done before the direction prompt, so you can cancel after this roll.
If you cancel after Amulet energy drain has occurred, it still uses a move. The message is replaced with 'Nothing happens' in this case.
The jumping spell hasn't been changed. With teleport away, you can cancel at the direction prompt, but not at the prompt for where to teleport to if you have teleport control (doing so still casts the spell, but you don't actually teleport).
For skilled fireball or cone of cold, picking an invalid target or casting the spell underwater or on the Plane of Water is considered the same as cancelling it. Some messages may need to be changed.

This branch also fixes a minor bug whereby unskilled fireball and cone of cold were subject to half physical damage when cast at yourself, and changes the message 'You don't have enough energy to cast that spell' to 'You no longer have enough energy to cast that spell' if you had enough energy prior to the attempt but didn't after Amulet energy drain.","What about making the Amulet energy drain consistent (say, 1.5x) so you can cancel spells properly while dealing with the amulet drain smoothly?",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,411,2020-11-12T19:22:43Z,2021-01-01T03:37:19Z,2021-01-01T03:37:19Z,CLOSED,False,18,1,1,https://github.com/heiner,Free hilites entries in termcap.c when ANSI_DEFAULT is set.,1,[],https://github.com/NetHack/NetHack/pull/411,https://github.com/heiner,1,https://github.com/NetHack/NetHack/pull/411,,,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,412,2020-11-18T05:21:43Z,2020-11-18T17:38:11Z,2020-11-18T17:38:12Z,MERGED,True,11,389,9,https://github.com/apowers313,"WASM refactoring, fixes",7,[],https://github.com/NetHack/NetHack/pull/412,https://github.com/apowers313,1,https://github.com/NetHack/NetHack/pull/412,"Two changes:

Set NO_EXIT_RUNTIME in the WASM build so that NetHack can run repeatedly
Pull the npm package and unnecessary out of NetHack so that it's more self-contained and easier to iterate on. I moved the code here. It might make sense to move this repo back to the NetHack organization -- let me know what you think.","Two changes:

Set NO_EXIT_RUNTIME in the WASM build so that NetHack can run repeatedly
Pull the npm package and unnecessary out of NetHack so that it's more self-contained and easier to iterate on. I moved the code here. It might make sense to move this repo back to the NetHack organization -- let me know what you think.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,412,2020-11-18T05:21:43Z,2020-11-18T17:38:11Z,2020-11-18T17:38:12Z,MERGED,True,11,389,9,https://github.com/apowers313,"WASM refactoring, fixes",7,[],https://github.com/NetHack/NetHack/pull/412,https://github.com/apowers313,2,https://github.com/NetHack/NetHack/pull/412#issuecomment-729506188,"Two changes:

Set NO_EXIT_RUNTIME in the WASM build so that NetHack can run repeatedly
Pull the npm package and unnecessary out of NetHack so that it's more self-contained and easier to iterate on. I moved the code here. It might make sense to move this repo back to the NetHack organization -- let me know what you think.",Also adds a fix for this commit. Maybe I should find a way to merge libnhmain.c back with unixmain.c to  reduce ongoing  maintenance?,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,414,2020-11-19T18:33:46Z,2020-12-11T03:59:42Z,2020-12-11T03:59:42Z,CLOSED,False,18,4,1,https://github.com/entrez,Add liquid flow to land mine explosions,1,[],https://github.com/NetHack/NetHack/pull/414,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/414,"Land mine explosions currently do not call liquid_flow(dig.c), and as a result the pit created by an exploding land mine will never fill with adjacent water or lava, as pits created by other sources -- digging, breaking a wand, and earthquake -- can do.
This commit adds the appropriate calls to liquid_flow and fillholetyp to blow_up_landmine so that land mine explosions may fill with water like other pits do.
The call to losehp in dotrap had to be moved from after to before blow_up_landmine, since waiting to call losehp when the pit can fill with water could lead to silly messages (``That was a close one. You die...'').  After this change, a land mine that killed a character would be retained unexploded in a bones file, because death would occur before the call to blow_up_landmine.  To avoid this issue, the land mine is converted to a pit before calling losehp; blow_up_landmine does not check whether the target trap is in fact a landmine so works as usual even if the trap is converted to a pit, and will delete the pit in cases where it should not exist.","Land mine explosions currently do not call liquid_flow(dig.c), and as a result the pit created by an exploding land mine will never fill with adjacent water or lava, as pits created by other sources -- digging, breaking a wand, and earthquake -- can do.
This commit adds the appropriate calls to liquid_flow and fillholetyp to blow_up_landmine so that land mine explosions may fill with water like other pits do.
The call to losehp in dotrap had to be moved from after to before blow_up_landmine, since waiting to call losehp when the pit can fill with water could lead to silly messages (``That was a close one. You die...'').  After this change, a land mine that killed a character would be retained unexploded in a bones file, because death would occur before the call to blow_up_landmine.  To avoid this issue, the land mine is converted to a pit before calling losehp; blow_up_landmine does not check whether the target trap is in fact a landmine so works as usual even if the trap is converted to a pit, and will delete the pit in cases where it should not exist.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,415,2020-11-28T07:04:15Z,2020-11-28T18:37:19Z,2020-11-28T18:37:19Z,CLOSED,False,3,3,3,https://github.com/timgates42,"docs: fix simple typo, accomodate -> accommodate",1,[],https://github.com/NetHack/NetHack/pull/415,https://github.com/timgates42,1,https://github.com/NetHack/NetHack/pull/415,"There is a small typo in include/patchlevel.h, outdated/sys/wince/mhmsgwnd.c, win/win32/mhmsgwnd.c.
Should read accommodate rather than accomodate.","There is a small typo in include/patchlevel.h, outdated/sys/wince/mhmsgwnd.c, win/win32/mhmsgwnd.c.
Should read accommodate rather than accomodate.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,417,2020-12-04T00:13:23Z,2020-12-14T15:37:19Z,2020-12-30T18:52:13Z,CLOSED,False,5,2,3,https://github.com/entrez,Add alchemy smock text to game-end disclosure,1,[],https://github.com/NetHack/NetHack/pull/417,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/417,"T-shirts and candy bars have their text listed in the end-of-game list of identified possessions, with the stated intent that it can give unspoiled players a hint that these objects can be read. Following the same logic, aprons/alchemy smocks should have their text listed as well.","T-shirts and candy bars have their text listed in the end-of-game list of identified possessions, with the stated intent that it can give unspoiled players a hint that these objects can be read. Following the same logic, aprons/alchemy smocks should have their text listed as well.",True,"{'THUMBS_UP': ['https://github.com/copperwater', 'https://github.com/NullCGT']}"
NetHack/NetHack,https://github.com/NetHack/NetHack,418,2020-12-10T17:52:42Z,2020-12-13T00:37:18Z,2020-12-30T18:56:07Z,CLOSED,False,3,2,1,https://github.com/entrez,Fix counterintuitive towel wetting/drying behavior,1,[],https://github.com/NetHack/NetHack/pull/418,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/418,"Summary
Would allow fire traps/attacks to completely dry wet towels -- which is the original intended behavior as described in the commit message of 4b8db66 -- and change towel wetting behavior so that dipping a towel in water would no longer have the potential to make it dryer.
Details
Fire traps currently never fully dry out a wet towel; although a wetness level between 0 and the towel's current wetness inclusive is chosen at random and passed to dry_a_towel(weapon.c), because dry_a_towel interprets 0 as a no-op it never actually sets the dryness to that level. As a result, the towel is twice as likely to retain its existing wetness level, and can never be fully dried by a fire trap.  Passing a negative number in the same range instead decrements the result by that amount, allowing fire traps to dry out wet towels completely.
On a similar note, wetting towels by dipping them in water (or falling in) sets their wetness to a completely random level.  This means that dipping a wet towel into water can actually dry it out relative to its previous wetness, which doesn't really make a lot of sense and can be confusing in-game (for example, dipping a wet towel into a moat can visibly turn it into a moist towel).  This commit would change the behavior of towel wetting so that the current wetness is incremented by a random amount instead.","Summary
Would allow fire traps/attacks to completely dry wet towels -- which is the original intended behavior as described in the commit message of 4b8db66 -- and change towel wetting behavior so that dipping a towel in water would no longer have the potential to make it dryer.
Details
Fire traps currently never fully dry out a wet towel; although a wetness level between 0 and the towel's current wetness inclusive is chosen at random and passed to dry_a_towel(weapon.c), because dry_a_towel interprets 0 as a no-op it never actually sets the dryness to that level. As a result, the towel is twice as likely to retain its existing wetness level, and can never be fully dried by a fire trap.  Passing a negative number in the same range instead decrements the result by that amount, allowing fire traps to dry out wet towels completely.
On a similar note, wetting towels by dipping them in water (or falling in) sets their wetness to a completely random level.  This means that dipping a wet towel into water can actually dry it out relative to its previous wetness, which doesn't really make a lot of sense and can be confusing in-game (for example, dipping a wet towel into a moat can visibly turn it into a moist towel).  This commit would change the behavior of towel wetting so that the current wetness is incremented by a random amount instead.",True,{'THUMBS_UP': ['https://github.com/copperwater']}
NetHack/NetHack,https://github.com/NetHack/NetHack,419,2020-12-10T23:10:14Z,2021-04-10T09:26:10Z,2021-04-10T09:26:14Z,CLOSED,False,1,0,1,https://github.com/RojjaCebolla,Print a message for the juiblex change,1,[],https://github.com/NetHack/NetHack/pull/419,https://github.com/RojjaCebolla,1,https://github.com/NetHack/NetHack/pull/419,To help clue people in who are using the old strategy.,To help clue people in who are using the old strategy.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,419,2020-12-10T23:10:14Z,2021-04-10T09:26:10Z,2021-04-10T09:26:14Z,CLOSED,False,1,0,1,https://github.com/RojjaCebolla,Print a message for the juiblex change,1,[],https://github.com/NetHack/NetHack/pull/419,https://github.com/copperwater,2,https://github.com/NetHack/NetHack/pull/419#issuecomment-742868062,To help clue people in who are using the old strategy.,"I think people who are using the old strategy will tend to be clued in when they dig out of Juiblex and hit him and he doesn't die instantly. One could also expect that a ""half-shredded"" monster is one hit point away from dying anyway.
Also, he's a giant mass of mostly goo; goo doesn't seem very shreddable to me.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,419,2020-12-10T23:10:14Z,2021-04-10T09:26:10Z,2021-04-10T09:26:14Z,CLOSED,False,1,0,1,https://github.com/RojjaCebolla,Print a message for the juiblex change,1,[],https://github.com/NetHack/NetHack/pull/419,https://github.com/jeremyn,3,https://github.com/NetHack/NetHack/pull/419#issuecomment-756781501,To help clue people in who are using the old strategy.,"Another problem is that if you zap Juiblex twice you're going to get ""half-shredded"" both times, when maybe the second time should be ""quarter-shredded"" (don't do that though, that's silly).
There should be some message though, to show that you've hurt it, and not just tickled it so it vomits you out. Perhaps ""You've blasted a large hole out of Juiblex!""",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,420,2020-12-11T21:12:14Z,2021-01-07T05:43:05Z,2021-01-07T13:01:14Z,CLOSED,False,18,4,1,https://github.com/entrez,Add liquid flow to land mine explosions,1,[],https://github.com/NetHack/NetHack/pull/420,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/420,"Land mine explosions currently do not call liquid_flow(dig.c), and as a result the pit created by an exploding land mine will never fill with adjacent water or lava, as pits created by other sources -- digging, breaking a wand, and earthquake -- can do.
This commit adds the appropriate calls to liquid_flow and fillholetyp to blow_up_landmine so that land mine explosions may fill with water like other pits do.
The call to losehp in dotrap had to be moved from after to before blow_up_landmine, since waiting to call losehp when the pit can fill with water could lead to silly messages (``That was a close one. You die...'').  After this change, a land mine that killed a character would be retained unexploded in a bones file, because death would occur before the call to blow_up_landmine.  To avoid this issue, the land mine is converted to a pit before calling losehp; blow_up_landmine does not check whether the target trap is in fact a landmine so works as usual even if the trap is converted to a pit, and will delete the pit in cases where it should not exist.
(I closed #414 and rebased the branch after recent changes to trap.c introduced merge conflicts that needed to be resolved manually, so this is effectively the same PR as that one)","Land mine explosions currently do not call liquid_flow(dig.c), and as a result the pit created by an exploding land mine will never fill with adjacent water or lava, as pits created by other sources -- digging, breaking a wand, and earthquake -- can do.
This commit adds the appropriate calls to liquid_flow and fillholetyp to blow_up_landmine so that land mine explosions may fill with water like other pits do.
The call to losehp in dotrap had to be moved from after to before blow_up_landmine, since waiting to call losehp when the pit can fill with water could lead to silly messages (``That was a close one. You die...'').  After this change, a land mine that killed a character would be retained unexploded in a bones file, because death would occur before the call to blow_up_landmine.  To avoid this issue, the land mine is converted to a pit before calling losehp; blow_up_landmine does not check whether the target trap is in fact a landmine so works as usual even if the trap is converted to a pit, and will delete the pit in cases where it should not exist.
(I closed #414 and rebased the branch after recent changes to trap.c introduced merge conflicts that needed to be resolved manually, so this is effectively the same PR as that one)",True,{'THUMBS_UP': ['https://github.com/actual-nh']}
NetHack/NetHack,https://github.com/NetHack/NetHack,420,2020-12-11T21:12:14Z,2021-01-07T05:43:05Z,2021-01-07T13:01:14Z,CLOSED,False,18,4,1,https://github.com/entrez,Add liquid flow to land mine explosions,1,[],https://github.com/NetHack/NetHack/pull/420,https://github.com/paxed,2,https://github.com/NetHack/NetHack/pull/420#issuecomment-755898265,"Land mine explosions currently do not call liquid_flow(dig.c), and as a result the pit created by an exploding land mine will never fill with adjacent water or lava, as pits created by other sources -- digging, breaking a wand, and earthquake -- can do.
This commit adds the appropriate calls to liquid_flow and fillholetyp to blow_up_landmine so that land mine explosions may fill with water like other pits do.
The call to losehp in dotrap had to be moved from after to before blow_up_landmine, since waiting to call losehp when the pit can fill with water could lead to silly messages (``That was a close one. You die...'').  After this change, a land mine that killed a character would be retained unexploded in a bones file, because death would occur before the call to blow_up_landmine.  To avoid this issue, the land mine is converted to a pit before calling losehp; blow_up_landmine does not check whether the target trap is in fact a landmine so works as usual even if the trap is converted to a pit, and will delete the pit in cases where it should not exist.
(I closed #414 and rebased the branch after recent changes to trap.c introduced merge conflicts that needed to be resolved manually, so this is effectively the same PR as that one)",Added in 2df4f08,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,421,2020-12-11T23:20:04Z,2020-12-13T09:06:15Z,2020-12-30T18:50:28Z,CLOSED,False,15,12,1,https://github.com/entrez,Improve consistency of polearm targeting rules,1,[],https://github.com/NetHack/NetHack/pull/421,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/421,"Multiple functions are involved in the process of targeting and attacking an enemy with a polearm or lance, and these functions currently use inconsistent tests to determine which targets are legal.  For instance, find_poleable_mon gives up immediately if the hero is blind, while neither get_valid_polearm_position nor use_pole care as long as the hero could detect a target on the square (e.g. by ESP).  find_poleable_mon considers warning symbols as potential
targets, but use_pole discards them.  get_valid_polearm_position considers moats and pools to be illegal targets, but use_pole lets the hero successfully hit a monster on those squares; on the other hand, get_valid_polearm_position marks squares that are not visible and do not contain a known monster as legal targets, while find_poleable_mon and use_pole exclude them.
Obviously this is inconsistent and could introduce confusion for polearm users, who may potentially need to explicitly target squares marked (illegal) at some point over the course of their game, among other problems.  This commit makes polearm targeting tests more consistent; the following rules are applied to positions within the appropriate range:


Monsters which are detected by any means that reveals an actual monster glyph are legal to target, even if the hero is blind


Monsters the hero cannot detect, but is aware of -- i.e. those represented by an I -- are similarly legal to target


Monsters detected via warning are not legal targets, since the hero does not have as strong a sense of where exactly they are, their shape and size, etc


Statues are legal targets, but will not be suggested by find_poleable_mon unless the hero is impaired (confused, stunned, or hallucinating); the same is true of tame/peaceful monsters


Apparently empty squares, including those containing an undetected monster, are legal to target unless they cannot be seen (whether due to blindness or a very dark room/level)


Positions which are otherwise legal but are blocked by an obstruction like a tree or pillar are not legal targets","Multiple functions are involved in the process of targeting and attacking an enemy with a polearm or lance, and these functions currently use inconsistent tests to determine which targets are legal.  For instance, find_poleable_mon gives up immediately if the hero is blind, while neither get_valid_polearm_position nor use_pole care as long as the hero could detect a target on the square (e.g. by ESP).  find_poleable_mon considers warning symbols as potential
targets, but use_pole discards them.  get_valid_polearm_position considers moats and pools to be illegal targets, but use_pole lets the hero successfully hit a monster on those squares; on the other hand, get_valid_polearm_position marks squares that are not visible and do not contain a known monster as legal targets, while find_poleable_mon and use_pole exclude them.
Obviously this is inconsistent and could introduce confusion for polearm users, who may potentially need to explicitly target squares marked (illegal) at some point over the course of their game, among other problems.  This commit makes polearm targeting tests more consistent; the following rules are applied to positions within the appropriate range:


Monsters which are detected by any means that reveals an actual monster glyph are legal to target, even if the hero is blind


Monsters the hero cannot detect, but is aware of -- i.e. those represented by an I -- are similarly legal to target


Monsters detected via warning are not legal targets, since the hero does not have as strong a sense of where exactly they are, their shape and size, etc


Statues are legal targets, but will not be suggested by find_poleable_mon unless the hero is impaired (confused, stunned, or hallucinating); the same is true of tame/peaceful monsters


Apparently empty squares, including those containing an undetected monster, are legal to target unless they cannot be seen (whether due to blindness or a very dark room/level)


Positions which are otherwise legal but are blocked by an obstruction like a tree or pillar are not legal targets",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,424,2020-12-14T10:11:08Z,2020-12-14T16:37:20Z,2020-12-15T01:31:58Z,CLOSED,False,2,2,1,https://github.com/chota,Update README.xcode to fix spelling errors,1,[],https://github.com/NetHack/NetHack/pull/424,https://github.com/chota,1,https://github.com/NetHack/NetHack/pull/424,"Two spurious instances of the letter ""g"" were vanquished.","Two spurious instances of the letter ""g"" were vanquished.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,424,2020-12-14T10:11:08Z,2020-12-14T16:37:20Z,2020-12-15T01:31:58Z,CLOSED,False,2,2,1,https://github.com/chota,Update README.xcode to fix spelling errors,1,[],https://github.com/NetHack/NetHack/pull/424,https://github.com/chota,2,https://github.com/NetHack/NetHack/pull/424#issuecomment-744333982,"Two spurious instances of the letter ""g"" were vanquished.","This is my first pull request; be gentle, please!",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,424,2020-12-14T10:11:08Z,2020-12-14T16:37:20Z,2020-12-15T01:31:58Z,CLOSED,False,2,2,1,https://github.com/chota,Update README.xcode to fix spelling errors,1,[],https://github.com/NetHack/NetHack/pull/424,https://github.com/winny-,3,https://github.com/NetHack/NetHack/pull/424#issuecomment-744691757,"Two spurious instances of the letter ""g"" were vanquished.",🤔,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,424,2020-12-14T10:11:08Z,2020-12-14T16:37:20Z,2020-12-15T01:31:58Z,CLOSED,False,2,2,1,https://github.com/chota,Update README.xcode to fix spelling errors,1,[],https://github.com/NetHack/NetHack/pull/424,https://github.com/chota,4,https://github.com/NetHack/NetHack/pull/424#issuecomment-744693792,"Two spurious instances of the letter ""g"" were vanquished.","Did I do something wrong? I thought that it was merged and done with and it
would be alright for me to close and delete my “clutter.” I only have
experience with SVN using Tortoise on Windows and now I’m using Github on a
Mac and I don’t know what I’m doing but spelling errors in open source
projects were touted as a small way an English nerd like me could help open
source and now I’m scared I look like an idiot… 😥

On Mon, Dec 14, 2020 at 2:29 PM Winston (Winny) Weinert < ***@***.***> wrote:
 🤔

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub
 <#424 (comment)>, or
 unsubscribe
 <https://github.com/notifications/unsubscribe-auth/AAG2HUTHCFTNRMUVWJPOF6LSUZYUJANCNFSM4U2P7JRA>
 .

-- 
Christopher Gautam Hota
Web: http://fb.me/chota
Email: chrishota@gmail.com
Twitter: @chrisfauxta
Voice/SMS/VM/tel:+1-424-242-4682

——
Pardon the brevity; this message sent from an iOS device.   (^_^;)",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,424,2020-12-14T10:11:08Z,2020-12-14T16:37:20Z,2020-12-15T01:31:58Z,CLOSED,False,2,2,1,https://github.com/chota,Update README.xcode to fix spelling errors,1,[],https://github.com/NetHack/NetHack/pull/424,https://github.com/ostrosablin,5,https://github.com/NetHack/NetHack/pull/424#issuecomment-744698907,"Two spurious instances of the letter ""g"" were vanquished.","Don't worry, it's perfectly fine to delete merged branches from personal forks.
Fixing spelling errors is good thing, too. Especially since there tend to be a lot of them around docs.
So, you clearly did nothing wrong or anything you should be ashamed of. 🙂",True,"{'THUMBS_UP': ['https://github.com/entrez', 'https://github.com/nhmall', 'https://github.com/winny-']}"
NetHack/NetHack,https://github.com/NetHack/NetHack,424,2020-12-14T10:11:08Z,2020-12-14T16:37:20Z,2020-12-15T01:31:58Z,CLOSED,False,2,2,1,https://github.com/chota,Update README.xcode to fix spelling errors,1,[],https://github.com/NetHack/NetHack/pull/424,https://github.com/copperwater,6,https://github.com/NetHack/NetHack/pull/424#issuecomment-744699546,"Two spurious instances of the letter ""g"" were vanquished.","I think winny doesn't like how pull requests typically get implemented as commits from one or other devteam member (nhmall in this case), rather than cherry-picks or merges which would attribute its original author. Makes it look like the devteam member did the work from the PR themselves.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,424,2020-12-14T10:11:08Z,2020-12-14T16:37:20Z,2020-12-15T01:31:58Z,CLOSED,False,2,2,1,https://github.com/chota,Update README.xcode to fix spelling errors,1,[],https://github.com/NetHack/NetHack/pull/424,https://github.com/chota,7,https://github.com/NetHack/NetHack/pull/424#issuecomment-744702888,"Two spurious instances of the letter ""g"" were vanquished.","Yeah, I wondered about that, especially since there’s no CONTRIB file to
which to add myself as in other open-source projects I have investigated. I
was giddy at the prospect of having NetHack be listed somehow on Github as
a project to which I’ve actually contributed.

😔

Let me know if there is!
On Mon, Dec 14, 2020 at 2:44 PM copperwater ***@***.***> wrote:
 I think winny doesn't like how pull requests typically get implemented as
 commits from one or other devteam member (nhmall in this case), rather than
 cherry-picks or merges which would attribute its original author. Makes it
 look like the devteam member did the work from the PR themselves.

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub
 <#424 (comment)>, or
 unsubscribe
 <https://github.com/notifications/unsubscribe-auth/AAG2HUSFJ75IUJZKYAKZS3DSUZ2L7ANCNFSM4U2P7JRA>
 .

-- 
Christopher Gautam Hota
Web: http://fb.me/chota
Email: chrishota@gmail.com
Twitter: @chrisfauxta
Voice/SMS/VM/tel:+1-424-242-4682

——
Pardon the brevity; this message sent from an iOS device.   (^_^;)",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,424,2020-12-14T10:11:08Z,2020-12-14T16:37:20Z,2020-12-15T01:31:58Z,CLOSED,False,2,2,1,https://github.com/chota,Update README.xcode to fix spelling errors,1,[],https://github.com/NetHack/NetHack/pull/424,https://github.com/ostrosablin,8,https://github.com/NetHack/NetHack/pull/424#issuecomment-744717690,"Two spurious instances of the letter ""g"" were vanquished.","It's the result of great weight of the time on the project. NetHack heavily predates git itself, and still relies heavily on historical workflow (like e-mail communication). In recent years, though, it tries to be more open and unlike some other open source projects, which still accept patches through mailing lists, DevTeam actually reads through GitHub issues and pull requests.
However, since GitHub is still a mirror of DevTeam's internal git repository, they pull community patches non-natural way (for git workflow) that looks awkward (because contributor info is lost this way).
There IS, however, a list of contributors. You can find it in guidebook under the /doc directory. E.g. Guidebook.txt. It's around the end of file (special thanks section).
P. S. I myself for a long time wanted to become a NetHack ""contributor"" myself, but neither of my pull requests to date were merged 😢.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,424,2020-12-14T10:11:08Z,2020-12-14T16:37:20Z,2020-12-15T01:31:58Z,CLOSED,False,2,2,1,https://github.com/chota,Update README.xcode to fix spelling errors,1,[],https://github.com/NetHack/NetHack/pull/424,https://github.com/nhmall,9,https://github.com/NetHack/NetHack/pull/424#issuecomment-744750779,"Two spurious instances of the letter ""g"" were vanquished.","If you check past PR merges that I have personally done, you’ll see that I almost always do the merge of the pull preserving the contributor information etc (and our work flow is in fact capable of preserving all that @tmp6154).  Not everyone may do it that way, but I certainly try to.
However, time and effort does factor into some things, and in this case the merge to correct two single-letter typos was alternatively done almost instantaneously in a text editor on my computer while reading the pull request on my phone as I was waiting for something else to compile.
@chota you did nothing wrong, and if something shows as closed by nhcopier (indicating involvement of some automation that takes place some time following a commit), it just means that your change is already incorporated (one way or another). I stated above why this particular one was done the way it was. Your contributions are welcome.",True,{'THUMBS_UP': ['https://github.com/winny-']}
NetHack/NetHack,https://github.com/NetHack/NetHack,428,2020-12-24T20:22:16Z,2021-01-07T22:00:54Z,2021-01-07T22:00:58Z,CLOSED,False,4,1,1,https://github.com/entrez,Fix some dismount loopholes,2,[],https://github.com/NetHack/NetHack/pull/428,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/428,"Dismounting doesn't currently test whether the destination spot could be moved to normally, so can be used to squeeze diagonally into a space that would normally be blocked because ""you are carrying too much to get through"". This can be abused in Sokoban to pass through gaps that are normally inaccessible, and even in normal levels can leave the hero in a spot from which they can't escape without dropping items or using a pick-axe. This patch would block dismounting through diagonals which are normally impassible by adding a successful result from test_move as a condition of choosing a dismount location.
Additionally, dismounting will opt to place the hero onto a boulder if no other appropriate spots are available. This too can be abused in Sokoban, so these changes would also add the standard luck penalty for using this behavior to pass over boulders on an unsolved Sokoban level.","Dismounting doesn't currently test whether the destination spot could be moved to normally, so can be used to squeeze diagonally into a space that would normally be blocked because ""you are carrying too much to get through"". This can be abused in Sokoban to pass through gaps that are normally inaccessible, and even in normal levels can leave the hero in a spot from which they can't escape without dropping items or using a pick-axe. This patch would block dismounting through diagonals which are normally impassible by adding a successful result from test_move as a condition of choosing a dismount location.
Additionally, dismounting will opt to place the hero onto a boulder if no other appropriate spots are available. This too can be abused in Sokoban, so these changes would also add the standard luck penalty for using this behavior to pass over boulders on an unsolved Sokoban level.",True,"{'THUMBS_UP': ['https://github.com/actual-nh', 'https://github.com/ostrosablin']}"
NetHack/NetHack,https://github.com/NetHack/NetHack,428,2020-12-24T20:22:16Z,2021-01-07T22:00:54Z,2021-01-07T22:00:58Z,CLOSED,False,4,1,1,https://github.com/entrez,Fix some dismount loopholes,2,[],https://github.com/NetHack/NetHack/pull/428,https://github.com/entrez,2,https://github.com/NetHack/NetHack/pull/428#issuecomment-756413819,"Dismounting doesn't currently test whether the destination spot could be moved to normally, so can be used to squeeze diagonally into a space that would normally be blocked because ""you are carrying too much to get through"". This can be abused in Sokoban to pass through gaps that are normally inaccessible, and even in normal levels can leave the hero in a spot from which they can't escape without dropping items or using a pick-axe. This patch would block dismounting through diagonals which are normally impassible by adding a successful result from test_move as a condition of choosing a dismount location.
Additionally, dismounting will opt to place the hero onto a boulder if no other appropriate spots are available. This too can be abused in Sokoban, so these changes would also add the standard luck penalty for using this behavior to pass over boulders on an unsolved Sokoban level.",Merged via a29b76e and e7e418c,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,430,2020-12-27T19:07:22Z,2020-12-28T03:37:20Z,2020-12-29T15:46:19Z,MERGED,True,128,128,1,https://github.com/NullCGT,Art Contribution: Differentiating gendered monster tiles.,2,[],https://github.com/NetHack/NetHack/pull/430,https://github.com/NullCGT,1,https://github.com/NetHack/NetHack/pull/430,"This pull request is a response to 0c3b964, in which nhmall expressed interest in contributions that would make gendered tiles visually distinguishable from one another. Since I've spent way too many hours editing NetHack's default tileset and the thought of trying to merge this commit into my variant gives me an absurdly massive headache, I thought I would have a go at it!
Making tiles of different genders distinct in NetHack presents an interesting problem. While it would be fun to create highly distinct tiles for every gender, doing so would reduce the accessibility of the game, since players would have to remember many more tiles, and might end up confusing one monster for another. Visual clarity is key.
Therefore, I had the following goals when creating this pull request:

If there is an interesting way to differentiate tiles by gender, do so.
Any sort of differentiation should be minor enough that a user can still tell what a monster is at a glance. Essentially, visual clarity comes before differentiation by gender.
Try to use a ""TDTTOE method"" of differentiating tiles. For example, female cats are more colorful than males, because generally male cats have only two colors of fur. Basically, I spent a lot of time on wikipedia researching sex characteristics of different species.
Try not to fall into ""female = longer hair / eyelashes."" While this feature will unfortunately require some gender-essentialist visual shorthand, this tropes is overdone and exhausting.

Please let me know what you think; I'm totally open to feedback on all of this and happy to make modifications. I've attached the resulting tiles file to this post in png form.
The alterations made in this pull request are as follows:

Female ants are slightly larger than male ants, just like in real life. I could have added wings to the male ants, but I felt that doing so would lead to some confusion.
Female wolves are slightly smaller than male wolves. There wasn't a great way to show this without making winter wolves look very similar to winter wolf cubs, so I just made the female wolves tails slightly shorter.
Calico cats are almost exclusively female, so I turned the female cats into calico cats. The other piece of logic behind this choice was that players will probably really enjoy seeing different variants of their pets.
Female hobbits, minotaurs, humans, werecreatures, and aleaxes wear slightly different clothing.
Dwarfs are not differentiated in any way whatsoever. According to Terry Pratchett (in Unseen Academicals, if I remember correctly) it is almost impossible to tell what gender a dwarf is, even for fellow dwarfs. I strongly believe that NetHack should follow this tradition.
Female leprechauns, archons, frost giants, guards, and all types of gnomes are clean-shaven. Although of course not one hundred percent accurate, it's convenient visual shorthand.
Centaur tiles have no differentiation because the different types of centaurs are already extremely difficult to tell apart from one another.
Female ogre tyrants and elven monarchs have slightly different crowns.
Female quantum mechanics have a different hairstyle and no beard. Genetic engineers look the same, because the genetic engineer tile is perfect.
Female barrow wights look like old grandmothers with flyaway hair. I kept the hair color the same and used a similar quantity of pixels so that they look similar enough to the males that you can tell they are barrow wights.
Female archeologist tile is a reference to a certain archeologist known for raiding tombs.","This pull request is a response to 0c3b964, in which nhmall expressed interest in contributions that would make gendered tiles visually distinguishable from one another. Since I've spent way too many hours editing NetHack's default tileset and the thought of trying to merge this commit into my variant gives me an absurdly massive headache, I thought I would have a go at it!
Making tiles of different genders distinct in NetHack presents an interesting problem. While it would be fun to create highly distinct tiles for every gender, doing so would reduce the accessibility of the game, since players would have to remember many more tiles, and might end up confusing one monster for another. Visual clarity is key.
Therefore, I had the following goals when creating this pull request:

If there is an interesting way to differentiate tiles by gender, do so.
Any sort of differentiation should be minor enough that a user can still tell what a monster is at a glance. Essentially, visual clarity comes before differentiation by gender.
Try to use a ""TDTTOE method"" of differentiating tiles. For example, female cats are more colorful than males, because generally male cats have only two colors of fur. Basically, I spent a lot of time on wikipedia researching sex characteristics of different species.
Try not to fall into ""female = longer hair / eyelashes."" While this feature will unfortunately require some gender-essentialist visual shorthand, this tropes is overdone and exhausting.

Please let me know what you think; I'm totally open to feedback on all of this and happy to make modifications. I've attached the resulting tiles file to this post in png form.
The alterations made in this pull request are as follows:

Female ants are slightly larger than male ants, just like in real life. I could have added wings to the male ants, but I felt that doing so would lead to some confusion.
Female wolves are slightly smaller than male wolves. There wasn't a great way to show this without making winter wolves look very similar to winter wolf cubs, so I just made the female wolves tails slightly shorter.
Calico cats are almost exclusively female, so I turned the female cats into calico cats. The other piece of logic behind this choice was that players will probably really enjoy seeing different variants of their pets.
Female hobbits, minotaurs, humans, werecreatures, and aleaxes wear slightly different clothing.
Dwarfs are not differentiated in any way whatsoever. According to Terry Pratchett (in Unseen Academicals, if I remember correctly) it is almost impossible to tell what gender a dwarf is, even for fellow dwarfs. I strongly believe that NetHack should follow this tradition.
Female leprechauns, archons, frost giants, guards, and all types of gnomes are clean-shaven. Although of course not one hundred percent accurate, it's convenient visual shorthand.
Centaur tiles have no differentiation because the different types of centaurs are already extremely difficult to tell apart from one another.
Female ogre tyrants and elven monarchs have slightly different crowns.
Female quantum mechanics have a different hairstyle and no beard. Genetic engineers look the same, because the genetic engineer tile is perfect.
Female barrow wights look like old grandmothers with flyaway hair. I kept the hair color the same and used a similar quantity of pixels so that they look similar enough to the males that you can tell they are barrow wights.
Female archeologist tile is a reference to a certain archeologist known for raiding tombs.",True,"{'THUMBS_UP': ['https://github.com/k21971', 'https://github.com/copperwater', 'https://github.com/entrez', 'https://github.com/nhmall', 'https://github.com/ostrosablin', 'https://github.com/actual-nh'], 'HOORAY': ['https://github.com/actual-nh']}"
NetHack/NetHack,https://github.com/NetHack/NetHack,430,2020-12-27T19:07:22Z,2020-12-28T03:37:20Z,2020-12-29T15:46:19Z,MERGED,True,128,128,1,https://github.com/NullCGT,Art Contribution: Differentiating gendered monster tiles.,2,[],https://github.com/NetHack/NetHack/pull/430,https://github.com/k21971,2,https://github.com/NetHack/NetHack/pull/430#issuecomment-751508771,"This pull request is a response to 0c3b964, in which nhmall expressed interest in contributions that would make gendered tiles visually distinguishable from one another. Since I've spent way too many hours editing NetHack's default tileset and the thought of trying to merge this commit into my variant gives me an absurdly massive headache, I thought I would have a go at it!
Making tiles of different genders distinct in NetHack presents an interesting problem. While it would be fun to create highly distinct tiles for every gender, doing so would reduce the accessibility of the game, since players would have to remember many more tiles, and might end up confusing one monster for another. Visual clarity is key.
Therefore, I had the following goals when creating this pull request:

If there is an interesting way to differentiate tiles by gender, do so.
Any sort of differentiation should be minor enough that a user can still tell what a monster is at a glance. Essentially, visual clarity comes before differentiation by gender.
Try to use a ""TDTTOE method"" of differentiating tiles. For example, female cats are more colorful than males, because generally male cats have only two colors of fur. Basically, I spent a lot of time on wikipedia researching sex characteristics of different species.
Try not to fall into ""female = longer hair / eyelashes."" While this feature will unfortunately require some gender-essentialist visual shorthand, this tropes is overdone and exhausting.

Please let me know what you think; I'm totally open to feedback on all of this and happy to make modifications. I've attached the resulting tiles file to this post in png form.
The alterations made in this pull request are as follows:

Female ants are slightly larger than male ants, just like in real life. I could have added wings to the male ants, but I felt that doing so would lead to some confusion.
Female wolves are slightly smaller than male wolves. There wasn't a great way to show this without making winter wolves look very similar to winter wolf cubs, so I just made the female wolves tails slightly shorter.
Calico cats are almost exclusively female, so I turned the female cats into calico cats. The other piece of logic behind this choice was that players will probably really enjoy seeing different variants of their pets.
Female hobbits, minotaurs, humans, werecreatures, and aleaxes wear slightly different clothing.
Dwarfs are not differentiated in any way whatsoever. According to Terry Pratchett (in Unseen Academicals, if I remember correctly) it is almost impossible to tell what gender a dwarf is, even for fellow dwarfs. I strongly believe that NetHack should follow this tradition.
Female leprechauns, archons, frost giants, guards, and all types of gnomes are clean-shaven. Although of course not one hundred percent accurate, it's convenient visual shorthand.
Centaur tiles have no differentiation because the different types of centaurs are already extremely difficult to tell apart from one another.
Female ogre tyrants and elven monarchs have slightly different crowns.
Female quantum mechanics have a different hairstyle and no beard. Genetic engineers look the same, because the genetic engineer tile is perfect.
Female barrow wights look like old grandmothers with flyaway hair. I kept the hair color the same and used a similar quantity of pixels so that they look similar enough to the males that you can tell they are barrow wights.
Female archeologist tile is a reference to a certain archeologist known for raiding tombs.",This is awesome.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,430,2020-12-27T19:07:22Z,2020-12-28T03:37:20Z,2020-12-29T15:46:19Z,MERGED,True,128,128,1,https://github.com/NullCGT,Art Contribution: Differentiating gendered monster tiles.,2,[],https://github.com/NetHack/NetHack/pull/430,https://github.com/k21971,3,https://github.com/NetHack/NetHack/pull/430#issuecomment-751510213,"This pull request is a response to 0c3b964, in which nhmall expressed interest in contributions that would make gendered tiles visually distinguishable from one another. Since I've spent way too many hours editing NetHack's default tileset and the thought of trying to merge this commit into my variant gives me an absurdly massive headache, I thought I would have a go at it!
Making tiles of different genders distinct in NetHack presents an interesting problem. While it would be fun to create highly distinct tiles for every gender, doing so would reduce the accessibility of the game, since players would have to remember many more tiles, and might end up confusing one monster for another. Visual clarity is key.
Therefore, I had the following goals when creating this pull request:

If there is an interesting way to differentiate tiles by gender, do so.
Any sort of differentiation should be minor enough that a user can still tell what a monster is at a glance. Essentially, visual clarity comes before differentiation by gender.
Try to use a ""TDTTOE method"" of differentiating tiles. For example, female cats are more colorful than males, because generally male cats have only two colors of fur. Basically, I spent a lot of time on wikipedia researching sex characteristics of different species.
Try not to fall into ""female = longer hair / eyelashes."" While this feature will unfortunately require some gender-essentialist visual shorthand, this tropes is overdone and exhausting.

Please let me know what you think; I'm totally open to feedback on all of this and happy to make modifications. I've attached the resulting tiles file to this post in png form.
The alterations made in this pull request are as follows:

Female ants are slightly larger than male ants, just like in real life. I could have added wings to the male ants, but I felt that doing so would lead to some confusion.
Female wolves are slightly smaller than male wolves. There wasn't a great way to show this without making winter wolves look very similar to winter wolf cubs, so I just made the female wolves tails slightly shorter.
Calico cats are almost exclusively female, so I turned the female cats into calico cats. The other piece of logic behind this choice was that players will probably really enjoy seeing different variants of their pets.
Female hobbits, minotaurs, humans, werecreatures, and aleaxes wear slightly different clothing.
Dwarfs are not differentiated in any way whatsoever. According to Terry Pratchett (in Unseen Academicals, if I remember correctly) it is almost impossible to tell what gender a dwarf is, even for fellow dwarfs. I strongly believe that NetHack should follow this tradition.
Female leprechauns, archons, frost giants, guards, and all types of gnomes are clean-shaven. Although of course not one hundred percent accurate, it's convenient visual shorthand.
Centaur tiles have no differentiation because the different types of centaurs are already extremely difficult to tell apart from one another.
Female ogre tyrants and elven monarchs have slightly different crowns.
Female quantum mechanics have a different hairstyle and no beard. Genetic engineers look the same, because the genetic engineer tile is perfect.
Female barrow wights look like old grandmothers with flyaway hair. I kept the hair color the same and used a similar quantity of pixels so that they look similar enough to the males that you can tell they are barrow wights.
Female archeologist tile is a reference to a certain archeologist known for raiding tombs.","Me nitpicking here - any worker ants or bees one would encounter are always female. In monst.c killer bees are already flagged as M2_FEMALE, any ants should be as well.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,430,2020-12-27T19:07:22Z,2020-12-28T03:37:20Z,2020-12-29T15:46:19Z,MERGED,True,128,128,1,https://github.com/NullCGT,Art Contribution: Differentiating gendered monster tiles.,2,[],https://github.com/NetHack/NetHack/pull/430,https://github.com/copperwater,4,https://github.com/NetHack/NetHack/pull/430#issuecomment-751516232,"This pull request is a response to 0c3b964, in which nhmall expressed interest in contributions that would make gendered tiles visually distinguishable from one another. Since I've spent way too many hours editing NetHack's default tileset and the thought of trying to merge this commit into my variant gives me an absurdly massive headache, I thought I would have a go at it!
Making tiles of different genders distinct in NetHack presents an interesting problem. While it would be fun to create highly distinct tiles for every gender, doing so would reduce the accessibility of the game, since players would have to remember many more tiles, and might end up confusing one monster for another. Visual clarity is key.
Therefore, I had the following goals when creating this pull request:

If there is an interesting way to differentiate tiles by gender, do so.
Any sort of differentiation should be minor enough that a user can still tell what a monster is at a glance. Essentially, visual clarity comes before differentiation by gender.
Try to use a ""TDTTOE method"" of differentiating tiles. For example, female cats are more colorful than males, because generally male cats have only two colors of fur. Basically, I spent a lot of time on wikipedia researching sex characteristics of different species.
Try not to fall into ""female = longer hair / eyelashes."" While this feature will unfortunately require some gender-essentialist visual shorthand, this tropes is overdone and exhausting.

Please let me know what you think; I'm totally open to feedback on all of this and happy to make modifications. I've attached the resulting tiles file to this post in png form.
The alterations made in this pull request are as follows:

Female ants are slightly larger than male ants, just like in real life. I could have added wings to the male ants, but I felt that doing so would lead to some confusion.
Female wolves are slightly smaller than male wolves. There wasn't a great way to show this without making winter wolves look very similar to winter wolf cubs, so I just made the female wolves tails slightly shorter.
Calico cats are almost exclusively female, so I turned the female cats into calico cats. The other piece of logic behind this choice was that players will probably really enjoy seeing different variants of their pets.
Female hobbits, minotaurs, humans, werecreatures, and aleaxes wear slightly different clothing.
Dwarfs are not differentiated in any way whatsoever. According to Terry Pratchett (in Unseen Academicals, if I remember correctly) it is almost impossible to tell what gender a dwarf is, even for fellow dwarfs. I strongly believe that NetHack should follow this tradition.
Female leprechauns, archons, frost giants, guards, and all types of gnomes are clean-shaven. Although of course not one hundred percent accurate, it's convenient visual shorthand.
Centaur tiles have no differentiation because the different types of centaurs are already extremely difficult to tell apart from one another.
Female ogre tyrants and elven monarchs have slightly different crowns.
Female quantum mechanics have a different hairstyle and no beard. Genetic engineers look the same, because the genetic engineer tile is perfect.
Female barrow wights look like old grandmothers with flyaway hair. I kept the hair color the same and used a similar quantity of pixels so that they look similar enough to the males that you can tell they are barrow wights.
Female archeologist tile is a reference to a certain archeologist known for raiding tombs.",Though you might find male bees or ants in an anthole or beehive. This is a great pull request @NullCGT!,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,430,2020-12-27T19:07:22Z,2020-12-28T03:37:20Z,2020-12-29T15:46:19Z,MERGED,True,128,128,1,https://github.com/NullCGT,Art Contribution: Differentiating gendered monster tiles.,2,[],https://github.com/NetHack/NetHack/pull/430,https://github.com/nhmall,5,https://github.com/NetHack/NetHack/pull/430#issuecomment-751530237,"This pull request is a response to 0c3b964, in which nhmall expressed interest in contributions that would make gendered tiles visually distinguishable from one another. Since I've spent way too many hours editing NetHack's default tileset and the thought of trying to merge this commit into my variant gives me an absurdly massive headache, I thought I would have a go at it!
Making tiles of different genders distinct in NetHack presents an interesting problem. While it would be fun to create highly distinct tiles for every gender, doing so would reduce the accessibility of the game, since players would have to remember many more tiles, and might end up confusing one monster for another. Visual clarity is key.
Therefore, I had the following goals when creating this pull request:

If there is an interesting way to differentiate tiles by gender, do so.
Any sort of differentiation should be minor enough that a user can still tell what a monster is at a glance. Essentially, visual clarity comes before differentiation by gender.
Try to use a ""TDTTOE method"" of differentiating tiles. For example, female cats are more colorful than males, because generally male cats have only two colors of fur. Basically, I spent a lot of time on wikipedia researching sex characteristics of different species.
Try not to fall into ""female = longer hair / eyelashes."" While this feature will unfortunately require some gender-essentialist visual shorthand, this tropes is overdone and exhausting.

Please let me know what you think; I'm totally open to feedback on all of this and happy to make modifications. I've attached the resulting tiles file to this post in png form.
The alterations made in this pull request are as follows:

Female ants are slightly larger than male ants, just like in real life. I could have added wings to the male ants, but I felt that doing so would lead to some confusion.
Female wolves are slightly smaller than male wolves. There wasn't a great way to show this without making winter wolves look very similar to winter wolf cubs, so I just made the female wolves tails slightly shorter.
Calico cats are almost exclusively female, so I turned the female cats into calico cats. The other piece of logic behind this choice was that players will probably really enjoy seeing different variants of their pets.
Female hobbits, minotaurs, humans, werecreatures, and aleaxes wear slightly different clothing.
Dwarfs are not differentiated in any way whatsoever. According to Terry Pratchett (in Unseen Academicals, if I remember correctly) it is almost impossible to tell what gender a dwarf is, even for fellow dwarfs. I strongly believe that NetHack should follow this tradition.
Female leprechauns, archons, frost giants, guards, and all types of gnomes are clean-shaven. Although of course not one hundred percent accurate, it's convenient visual shorthand.
Centaur tiles have no differentiation because the different types of centaurs are already extremely difficult to tell apart from one another.
Female ogre tyrants and elven monarchs have slightly different crowns.
Female quantum mechanics have a different hairstyle and no beard. Genetic engineers look the same, because the genetic engineer tile is perfect.
Female barrow wights look like old grandmothers with flyaway hair. I kept the hair color the same and used a similar quantity of pixels so that they look similar enough to the males that you can tell they are barrow wights.
Female archeologist tile is a reference to a certain archeologist known for raiding tombs.",Thank you for contributing this!,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,430,2020-12-27T19:07:22Z,2020-12-28T03:37:20Z,2020-12-29T15:46:19Z,MERGED,True,128,128,1,https://github.com/NullCGT,Art Contribution: Differentiating gendered monster tiles.,2,[],https://github.com/NetHack/NetHack/pull/430,https://github.com/jeremyn,6,https://github.com/NetHack/NetHack/pull/430#issuecomment-751558033,"This pull request is a response to 0c3b964, in which nhmall expressed interest in contributions that would make gendered tiles visually distinguishable from one another. Since I've spent way too many hours editing NetHack's default tileset and the thought of trying to merge this commit into my variant gives me an absurdly massive headache, I thought I would have a go at it!
Making tiles of different genders distinct in NetHack presents an interesting problem. While it would be fun to create highly distinct tiles for every gender, doing so would reduce the accessibility of the game, since players would have to remember many more tiles, and might end up confusing one monster for another. Visual clarity is key.
Therefore, I had the following goals when creating this pull request:

If there is an interesting way to differentiate tiles by gender, do so.
Any sort of differentiation should be minor enough that a user can still tell what a monster is at a glance. Essentially, visual clarity comes before differentiation by gender.
Try to use a ""TDTTOE method"" of differentiating tiles. For example, female cats are more colorful than males, because generally male cats have only two colors of fur. Basically, I spent a lot of time on wikipedia researching sex characteristics of different species.
Try not to fall into ""female = longer hair / eyelashes."" While this feature will unfortunately require some gender-essentialist visual shorthand, this tropes is overdone and exhausting.

Please let me know what you think; I'm totally open to feedback on all of this and happy to make modifications. I've attached the resulting tiles file to this post in png form.
The alterations made in this pull request are as follows:

Female ants are slightly larger than male ants, just like in real life. I could have added wings to the male ants, but I felt that doing so would lead to some confusion.
Female wolves are slightly smaller than male wolves. There wasn't a great way to show this without making winter wolves look very similar to winter wolf cubs, so I just made the female wolves tails slightly shorter.
Calico cats are almost exclusively female, so I turned the female cats into calico cats. The other piece of logic behind this choice was that players will probably really enjoy seeing different variants of their pets.
Female hobbits, minotaurs, humans, werecreatures, and aleaxes wear slightly different clothing.
Dwarfs are not differentiated in any way whatsoever. According to Terry Pratchett (in Unseen Academicals, if I remember correctly) it is almost impossible to tell what gender a dwarf is, even for fellow dwarfs. I strongly believe that NetHack should follow this tradition.
Female leprechauns, archons, frost giants, guards, and all types of gnomes are clean-shaven. Although of course not one hundred percent accurate, it's convenient visual shorthand.
Centaur tiles have no differentiation because the different types of centaurs are already extremely difficult to tell apart from one another.
Female ogre tyrants and elven monarchs have slightly different crowns.
Female quantum mechanics have a different hairstyle and no beard. Genetic engineers look the same, because the genetic engineer tile is perfect.
Female barrow wights look like old grandmothers with flyaway hair. I kept the hair color the same and used a similar quantity of pixels so that they look similar enough to the males that you can tell they are barrow wights.
Female archeologist tile is a reference to a certain archeologist known for raiding tombs.","Hi, I'm a total nobody in this project, just a long-time player, but by sheer coincidence I just made a comment on the foocubi gender issue at #368 (comment) where I suggested non-binary NPCs and used a captain as an example: ""The captain swings their silver saber! They miss!"" I'm wondering how a non-binary captain would be displayed using this tileset. Maybe pick one at random? Please don't take this as criticism, the art here is fantastic. If this question is out of scope for this PR then please let me know.
Also, I think that in Discworld female dwarves were originally totally indistinguishable from male dwarves, but due to the ""corrupting"" influence of Ankh-Morpork, some female dwarves ""scandalously"" started wearing female clothing. They stayed bearded, though. However, the underground dwarf community was more conservative and kept all-male dress for longer, and since NetHack is underground we can assume the dwarves we see are part of that culture, so not differentiating them here seems fine to me, but there is the option of creating a more female-looking dwarf tile and assigning it randomly to some of the female dwarves to reflect the cultural shift. That's probably a totally unnecessary complication though.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,430,2020-12-27T19:07:22Z,2020-12-28T03:37:20Z,2020-12-29T15:46:19Z,MERGED,True,128,128,1,https://github.com/NullCGT,Art Contribution: Differentiating gendered monster tiles.,2,[],https://github.com/NetHack/NetHack/pull/430,https://github.com/NullCGT,7,https://github.com/NetHack/NetHack/pull/430#issuecomment-752108951,"This pull request is a response to 0c3b964, in which nhmall expressed interest in contributions that would make gendered tiles visually distinguishable from one another. Since I've spent way too many hours editing NetHack's default tileset and the thought of trying to merge this commit into my variant gives me an absurdly massive headache, I thought I would have a go at it!
Making tiles of different genders distinct in NetHack presents an interesting problem. While it would be fun to create highly distinct tiles for every gender, doing so would reduce the accessibility of the game, since players would have to remember many more tiles, and might end up confusing one monster for another. Visual clarity is key.
Therefore, I had the following goals when creating this pull request:

If there is an interesting way to differentiate tiles by gender, do so.
Any sort of differentiation should be minor enough that a user can still tell what a monster is at a glance. Essentially, visual clarity comes before differentiation by gender.
Try to use a ""TDTTOE method"" of differentiating tiles. For example, female cats are more colorful than males, because generally male cats have only two colors of fur. Basically, I spent a lot of time on wikipedia researching sex characteristics of different species.
Try not to fall into ""female = longer hair / eyelashes."" While this feature will unfortunately require some gender-essentialist visual shorthand, this tropes is overdone and exhausting.

Please let me know what you think; I'm totally open to feedback on all of this and happy to make modifications. I've attached the resulting tiles file to this post in png form.
The alterations made in this pull request are as follows:

Female ants are slightly larger than male ants, just like in real life. I could have added wings to the male ants, but I felt that doing so would lead to some confusion.
Female wolves are slightly smaller than male wolves. There wasn't a great way to show this without making winter wolves look very similar to winter wolf cubs, so I just made the female wolves tails slightly shorter.
Calico cats are almost exclusively female, so I turned the female cats into calico cats. The other piece of logic behind this choice was that players will probably really enjoy seeing different variants of their pets.
Female hobbits, minotaurs, humans, werecreatures, and aleaxes wear slightly different clothing.
Dwarfs are not differentiated in any way whatsoever. According to Terry Pratchett (in Unseen Academicals, if I remember correctly) it is almost impossible to tell what gender a dwarf is, even for fellow dwarfs. I strongly believe that NetHack should follow this tradition.
Female leprechauns, archons, frost giants, guards, and all types of gnomes are clean-shaven. Although of course not one hundred percent accurate, it's convenient visual shorthand.
Centaur tiles have no differentiation because the different types of centaurs are already extremely difficult to tell apart from one another.
Female ogre tyrants and elven monarchs have slightly different crowns.
Female quantum mechanics have a different hairstyle and no beard. Genetic engineers look the same, because the genetic engineer tile is perfect.
Female barrow wights look like old grandmothers with flyaway hair. I kept the hair color the same and used a similar quantity of pixels so that they look similar enough to the males that you can tell they are barrow wights.
Female archeologist tile is a reference to a certain archeologist known for raiding tombs.","@jeremyn
You're totally right on the Pratchett lore! It's been far too long since I've read Unseen Academicals.
Not to advertise myself, but I maintain the variant SpliceHack, which offers the option for players to be nonbinary, and (currently somewhat limited) support for nonbinary monsters. I'll be pulling the gendered tiles commit into SpliceHack at some point in the future, at which point I'll have to figure out how to reconcile the changes here with existing nonbinary player tiles that I created. Feel free to pop over there and look at that implementation.
Handling nonbinary entities is definitely outside the scope of this feature, though. It required a huge amount of work in order to get the game to smoothly handle nonbinary characters in the first place, and I still handle nonbinary NPCs with only a moderate amount of success.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,430,2020-12-27T19:07:22Z,2020-12-28T03:37:20Z,2020-12-29T15:46:19Z,MERGED,True,128,128,1,https://github.com/NullCGT,Art Contribution: Differentiating gendered monster tiles.,2,[],https://github.com/NetHack/NetHack/pull/430,https://github.com/jeremyn,8,https://github.com/NetHack/NetHack/pull/430#issuecomment-752129589,"This pull request is a response to 0c3b964, in which nhmall expressed interest in contributions that would make gendered tiles visually distinguishable from one another. Since I've spent way too many hours editing NetHack's default tileset and the thought of trying to merge this commit into my variant gives me an absurdly massive headache, I thought I would have a go at it!
Making tiles of different genders distinct in NetHack presents an interesting problem. While it would be fun to create highly distinct tiles for every gender, doing so would reduce the accessibility of the game, since players would have to remember many more tiles, and might end up confusing one monster for another. Visual clarity is key.
Therefore, I had the following goals when creating this pull request:

If there is an interesting way to differentiate tiles by gender, do so.
Any sort of differentiation should be minor enough that a user can still tell what a monster is at a glance. Essentially, visual clarity comes before differentiation by gender.
Try to use a ""TDTTOE method"" of differentiating tiles. For example, female cats are more colorful than males, because generally male cats have only two colors of fur. Basically, I spent a lot of time on wikipedia researching sex characteristics of different species.
Try not to fall into ""female = longer hair / eyelashes."" While this feature will unfortunately require some gender-essentialist visual shorthand, this tropes is overdone and exhausting.

Please let me know what you think; I'm totally open to feedback on all of this and happy to make modifications. I've attached the resulting tiles file to this post in png form.
The alterations made in this pull request are as follows:

Female ants are slightly larger than male ants, just like in real life. I could have added wings to the male ants, but I felt that doing so would lead to some confusion.
Female wolves are slightly smaller than male wolves. There wasn't a great way to show this without making winter wolves look very similar to winter wolf cubs, so I just made the female wolves tails slightly shorter.
Calico cats are almost exclusively female, so I turned the female cats into calico cats. The other piece of logic behind this choice was that players will probably really enjoy seeing different variants of their pets.
Female hobbits, minotaurs, humans, werecreatures, and aleaxes wear slightly different clothing.
Dwarfs are not differentiated in any way whatsoever. According to Terry Pratchett (in Unseen Academicals, if I remember correctly) it is almost impossible to tell what gender a dwarf is, even for fellow dwarfs. I strongly believe that NetHack should follow this tradition.
Female leprechauns, archons, frost giants, guards, and all types of gnomes are clean-shaven. Although of course not one hundred percent accurate, it's convenient visual shorthand.
Centaur tiles have no differentiation because the different types of centaurs are already extremely difficult to tell apart from one another.
Female ogre tyrants and elven monarchs have slightly different crowns.
Female quantum mechanics have a different hairstyle and no beard. Genetic engineers look the same, because the genetic engineer tile is perfect.
Female barrow wights look like old grandmothers with flyaway hair. I kept the hair color the same and used a similar quantity of pixels so that they look similar enough to the males that you can tell they are barrow wights.
Female archeologist tile is a reference to a certain archeologist known for raiding tombs.","Sure, implementing is definitely outside the scope of this artwork PR. I suppose the concern is futureproofing, like if you had a set of tiles where one looked definitely masculine and the other definitely feminine, and then non-binary players/monsters were added, which tile would you assign? The Indiana Jones/Lara Croft tiles (they're the ones under Death, right?) for archaeologists are an example.
Anyway -- if this interests you and you want to take the time, I'm certainly not saying you should feel obligated -- you might want to take this opportunity to create a third less gender-coded tile for those few edge cases where the male and female tiles are both ""too"" gendered, anticipating and enabling future NetHack changes, even if the new tiles aren't used now. Maybe you could bring some over from SpliceHack, if you've already done the work there.
(I use ASCII graphics anyway, not tiles, so this wouldn't affect my play either way, full disclosure.)",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,435,2021-01-01T00:51:29Z,2021-01-01T08:37:20Z,2021-01-02T06:00:48Z,MERGED,True,2,2,1,https://github.com/actual-nh,Typo (Hogfather),2,[],https://github.com/NetHack/NetHack/pull/435,https://github.com/actual-nh,1,https://github.com/NetHack/NetHack/pull/435,"Two typos in a quotation from Hogfather; I have checked (Corgi edition (13th printing?), 1997, page 310) and corrected it to match the original.","Two typos in a quotation from Hogfather; I have checked (Corgi edition (13th printing?), 1997, page 310) and corrected it to match the original.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,437,2021-01-05T02:13:07Z,,2022-01-27T17:23:28Z,OPEN,False,193,8,8,https://github.com/copperwater,"Add the monstercolor system, letting players choose monster colors",1,[],https://github.com/NetHack/NetHack/pull/437,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/437,"This existed as one of the 3.4.3-nao patches, but rather than porting that patch to the current codebase I started from scratch, because the system as I saw it had two big drawbacks:

Mutated mons[], which is just not a great idea in my book.
Colors were only settable via config file, not in-game. I envisioned monster colors working like msgtypes or autopickup exceptions, which can be modified in-game.

To that end, monstercolors are settable in-game via a submenu in the ""Other settings"" section of the options, like autopickup exceptions or msgtypes, as well as via ""MONSTERCOLOR=monname:color"" in the config. Also like those settings, they do not persist through saving and restoring, but any config lines will be loaded as normal upon restore.
Instead of directly editing mons[], it edits a new variable 'monstercolors' in instance_globals. I thought this might be unnecessary
at first, but then realized that if it changed mons[].mcolor like the NAO patch, then it would be impossible to count the number of currently set monstercolors because there would be no default to compare against.","This existed as one of the 3.4.3-nao patches, but rather than porting that patch to the current codebase I started from scratch, because the system as I saw it had two big drawbacks:

Mutated mons[], which is just not a great idea in my book.
Colors were only settable via config file, not in-game. I envisioned monster colors working like msgtypes or autopickup exceptions, which can be modified in-game.

To that end, monstercolors are settable in-game via a submenu in the ""Other settings"" section of the options, like autopickup exceptions or msgtypes, as well as via ""MONSTERCOLOR=monname:color"" in the config. Also like those settings, they do not persist through saving and restoring, but any config lines will be loaded as normal upon restore.
Instead of directly editing mons[], it edits a new variable 'monstercolors' in instance_globals. I thought this might be unnecessary
at first, but then realized that if it changed mons[].mcolor like the NAO patch, then it would be impossible to count the number of currently set monstercolors because there would be no default to compare against.",True,"{'THUMBS_UP': ['https://github.com/entrez', 'https://github.com/actual-nh', 'https://github.com/NullCGT']}"
NetHack/NetHack,https://github.com/NetHack/NetHack,438,2021-01-05T02:26:29Z,2021-01-07T20:37:20Z,2021-05-22T23:38:18Z,MERGED,True,798,462,20,https://github.com/copperwater,Refactor getobj() to use callbacks on candidate objects,1,[],https://github.com/NetHack/NetHack/pull/438,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/438,"This replaces the arcane system previously used by getobj where the caller would pass in a ""string"" whose characters were object class numbers, with the first up to four characters being special constants that effectively acted as flags and had to be in a certain order.  Because there are many places where getobj must behave more granularly than just object class filtering, this was supplemented by over a hundred lines enumerating all these special cases and ""ugly checks"", as well as other ugly code spread around in getobj callers that formatted the ""string"".
Now, getobj callers pass in a callback which will return one of five possible values for any given object in the player's inventory. The logic of determining the eligibility of a given object is handled in the caller, which greatly simplifies the code and makes it clearer to read.  Particularly since there's no real need to cram everything into one if statement.
This is related to pull request #77 by FIQ; it's largely a reimplementation of its callbacks system, without doing a bigger than necessary refactor of getobj or adding the ability to select a floor/trap/dungeon feature with getobj. Differences in implementation are mostly minor:

using enum constants for returns instead of magic numbers
5 possible return values for callbacks instead of 3, due to trying to make it behave exactly as it did previously. PR #77 would sometimes outright exclude objects because it lacked semantics for invalid objects that should be selectable anyway, or give slightly different messages.
passing a bitmask of flags to getobj rather than booleans (easier to add more flags later - such as FIQ's ""allow floor features"" flag, if that becomes desirable)
renaming some of getobj's variables to clearer versions
naming all callbacks consistently with ""_ok""
generally more comments explaining things

The callbacks use the same logic from getobj_obj_exclude, getobj_obj_exclude_too and getobj_obj_acceptable_unlisted (and in a few cases, from special cases still within getobj). In a number of them, I added comments suggesting possible further refinements to what is and isn't eligible (e.g. should a bullwhip really be presented as a candidate for readying a thrown weapon?)
This also removed ALLOW_COUNT and ALLOW_NONE, relics of the old system, and moved ALLOW_ALL's definition into detect.c which is the only place it's used now (unrelated to getobj). The ALLOW_ALL functionality still exists as the GETOBJ_PROMPT flag, because its main use is to force getobj to prompt for input even if nothing is valid.)
I did not refactor ggetobj() as part of this change.","This replaces the arcane system previously used by getobj where the caller would pass in a ""string"" whose characters were object class numbers, with the first up to four characters being special constants that effectively acted as flags and had to be in a certain order.  Because there are many places where getobj must behave more granularly than just object class filtering, this was supplemented by over a hundred lines enumerating all these special cases and ""ugly checks"", as well as other ugly code spread around in getobj callers that formatted the ""string"".
Now, getobj callers pass in a callback which will return one of five possible values for any given object in the player's inventory. The logic of determining the eligibility of a given object is handled in the caller, which greatly simplifies the code and makes it clearer to read.  Particularly since there's no real need to cram everything into one if statement.
This is related to pull request #77 by FIQ; it's largely a reimplementation of its callbacks system, without doing a bigger than necessary refactor of getobj or adding the ability to select a floor/trap/dungeon feature with getobj. Differences in implementation are mostly minor:

using enum constants for returns instead of magic numbers
5 possible return values for callbacks instead of 3, due to trying to make it behave exactly as it did previously. PR #77 would sometimes outright exclude objects because it lacked semantics for invalid objects that should be selectable anyway, or give slightly different messages.
passing a bitmask of flags to getobj rather than booleans (easier to add more flags later - such as FIQ's ""allow floor features"" flag, if that becomes desirable)
renaming some of getobj's variables to clearer versions
naming all callbacks consistently with ""_ok""
generally more comments explaining things

The callbacks use the same logic from getobj_obj_exclude, getobj_obj_exclude_too and getobj_obj_acceptable_unlisted (and in a few cases, from special cases still within getobj). In a number of them, I added comments suggesting possible further refinements to what is and isn't eligible (e.g. should a bullwhip really be presented as a candidate for readying a thrown weapon?)
This also removed ALLOW_COUNT and ALLOW_NONE, relics of the old system, and moved ALLOW_ALL's definition into detect.c which is the only place it's used now (unrelated to getobj). The ALLOW_ALL functionality still exists as the GETOBJ_PROMPT flag, because its main use is to force getobj to prompt for input even if nothing is valid.)
I did not refactor ggetobj() as part of this change.",True,"{'THUMBS_UP': ['https://github.com/entrez', 'https://github.com/FredrIQ']}"
NetHack/NetHack,https://github.com/NetHack/NetHack,438,2021-01-05T02:26:29Z,2021-01-07T20:37:20Z,2021-05-22T23:38:18Z,MERGED,True,798,462,20,https://github.com/copperwater,Refactor getobj() to use callbacks on candidate objects,1,[],https://github.com/NetHack/NetHack/pull/438,https://github.com/copperwater,2,https://github.com/NetHack/NetHack/pull/438#issuecomment-754733503,"This replaces the arcane system previously used by getobj where the caller would pass in a ""string"" whose characters were object class numbers, with the first up to four characters being special constants that effectively acted as flags and had to be in a certain order.  Because there are many places where getobj must behave more granularly than just object class filtering, this was supplemented by over a hundred lines enumerating all these special cases and ""ugly checks"", as well as other ugly code spread around in getobj callers that formatted the ""string"".
Now, getobj callers pass in a callback which will return one of five possible values for any given object in the player's inventory. The logic of determining the eligibility of a given object is handled in the caller, which greatly simplifies the code and makes it clearer to read.  Particularly since there's no real need to cram everything into one if statement.
This is related to pull request #77 by FIQ; it's largely a reimplementation of its callbacks system, without doing a bigger than necessary refactor of getobj or adding the ability to select a floor/trap/dungeon feature with getobj. Differences in implementation are mostly minor:

using enum constants for returns instead of magic numbers
5 possible return values for callbacks instead of 3, due to trying to make it behave exactly as it did previously. PR #77 would sometimes outright exclude objects because it lacked semantics for invalid objects that should be selectable anyway, or give slightly different messages.
passing a bitmask of flags to getobj rather than booleans (easier to add more flags later - such as FIQ's ""allow floor features"" flag, if that becomes desirable)
renaming some of getobj's variables to clearer versions
naming all callbacks consistently with ""_ok""
generally more comments explaining things

The callbacks use the same logic from getobj_obj_exclude, getobj_obj_exclude_too and getobj_obj_acceptable_unlisted (and in a few cases, from special cases still within getobj). In a number of them, I added comments suggesting possible further refinements to what is and isn't eligible (e.g. should a bullwhip really be presented as a candidate for readying a thrown weapon?)
This also removed ALLOW_COUNT and ALLOW_NONE, relics of the old system, and moved ALLOW_ALL's definition into detect.c which is the only place it's used now (unrelated to getobj). The ALLOW_ALL functionality still exists as the GETOBJ_PROMPT flag, because its main use is to force getobj to prompt for input even if nothing is valid.)
I did not refactor ggetobj() as part of this change.","Updated with some feedback from FIQ:

unsqueak_ok() wasn't correctly downplaying all other potions (which would include informally identified oil)
adjust_ok() has a side effect of calling impossible, but I consider this an acceptable side effect because it will never happen during correct execution of the game, so I updated the comment about side effects accordingly.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,438,2021-01-05T02:26:29Z,2021-01-07T20:37:20Z,2021-05-22T23:38:18Z,MERGED,True,798,462,20,https://github.com/copperwater,Refactor getobj() to use callbacks on candidate objects,1,[],https://github.com/NetHack/NetHack/pull/438,https://github.com/copperwater,3,https://github.com/NetHack/NetHack/pull/438#issuecomment-756211555,"This replaces the arcane system previously used by getobj where the caller would pass in a ""string"" whose characters were object class numbers, with the first up to four characters being special constants that effectively acted as flags and had to be in a certain order.  Because there are many places where getobj must behave more granularly than just object class filtering, this was supplemented by over a hundred lines enumerating all these special cases and ""ugly checks"", as well as other ugly code spread around in getobj callers that formatted the ""string"".
Now, getobj callers pass in a callback which will return one of five possible values for any given object in the player's inventory. The logic of determining the eligibility of a given object is handled in the caller, which greatly simplifies the code and makes it clearer to read.  Particularly since there's no real need to cram everything into one if statement.
This is related to pull request #77 by FIQ; it's largely a reimplementation of its callbacks system, without doing a bigger than necessary refactor of getobj or adding the ability to select a floor/trap/dungeon feature with getobj. Differences in implementation are mostly minor:

using enum constants for returns instead of magic numbers
5 possible return values for callbacks instead of 3, due to trying to make it behave exactly as it did previously. PR #77 would sometimes outright exclude objects because it lacked semantics for invalid objects that should be selectable anyway, or give slightly different messages.
passing a bitmask of flags to getobj rather than booleans (easier to add more flags later - such as FIQ's ""allow floor features"" flag, if that becomes desirable)
renaming some of getobj's variables to clearer versions
naming all callbacks consistently with ""_ok""
generally more comments explaining things

The callbacks use the same logic from getobj_obj_exclude, getobj_obj_exclude_too and getobj_obj_acceptable_unlisted (and in a few cases, from special cases still within getobj). In a number of them, I added comments suggesting possible further refinements to what is and isn't eligible (e.g. should a bullwhip really be presented as a candidate for readying a thrown weapon?)
This also removed ALLOW_COUNT and ALLOW_NONE, relics of the old system, and moved ALLOW_ALL's definition into detect.c which is the only place it's used now (unrelated to getobj). The ALLOW_ALL functionality still exists as the GETOBJ_PROMPT flag, because its main use is to force getobj to prompt for input even if nothing is valid.)
I did not refactor ggetobj() as part of this change.",Squashed the commits and rebased on top of the current master branch from @paxed's request.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,442,2021-01-08T19:49:09Z,2021-03-20T21:42:10Z,2021-04-02T00:26:48Z,CLOSED,False,3,2,1,https://github.com/entrez,force_invmenu getobj listings,1,[],https://github.com/NetHack/NetHack/pull/442,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/442,"Instead of listing the entire inventory when force_invmenu is on and getobj flags include GETOBJ_PROMPT (as described in #441), only applicable objects will be printed as long as any exist (either suggested or alternative choices).
However, a getobj callback that returns GETOBJ_SUGGEST for every item in inventory (such as any_obj_ok, used for the drop command among other things) would produce a list of allowable objects that is in effect identical to the entire player inventory. Because of the way display_pickinv works, when this list is passed to it as a list instead of explicitly as the entire inventory, a useless ""* - (list everything)"" item is appended to it.  In order to fix this behavior, this patch would also add a test before adding the '*' item to ensure it will not be included for lists that already encompass the entire inventory.
There's more discussion of the ways (*lets || *altlets) is and isn't comparable to *let in pre-refactoring getobj in #441.","Instead of listing the entire inventory when force_invmenu is on and getobj flags include GETOBJ_PROMPT (as described in #441), only applicable objects will be printed as long as any exist (either suggested or alternative choices).
However, a getobj callback that returns GETOBJ_SUGGEST for every item in inventory (such as any_obj_ok, used for the drop command among other things) would produce a list of allowable objects that is in effect identical to the entire player inventory. Because of the way display_pickinv works, when this list is passed to it as a list instead of explicitly as the entire inventory, a useless ""* - (list everything)"" item is appended to it.  In order to fix this behavior, this patch would also add a test before adding the '*' item to ensure it will not be included for lists that already encompass the entire inventory.
There's more discussion of the ways (*lets || *altlets) is and isn't comparable to *let in pre-refactoring getobj in #441.",True,{'THUMBS_UP': ['https://github.com/copperwater']}
NetHack/NetHack,https://github.com/NetHack/NetHack,442,2021-01-08T19:49:09Z,2021-03-20T21:42:10Z,2021-04-02T00:26:48Z,CLOSED,False,3,2,1,https://github.com/entrez,force_invmenu getobj listings,1,[],https://github.com/NetHack/NetHack/pull/442,https://github.com/entrez,2,https://github.com/NetHack/NetHack/pull/442#issuecomment-803467600,"Instead of listing the entire inventory when force_invmenu is on and getobj flags include GETOBJ_PROMPT (as described in #441), only applicable objects will be printed as long as any exist (either suggested or alternative choices).
However, a getobj callback that returns GETOBJ_SUGGEST for every item in inventory (such as any_obj_ok, used for the drop command among other things) would produce a list of allowable objects that is in effect identical to the entire player inventory. Because of the way display_pickinv works, when this list is passed to it as a list instead of explicitly as the entire inventory, a useless ""* - (list everything)"" item is appended to it.  In order to fix this behavior, this patch would also add a test before adding the '*' item to ensure it will not be included for lists that already encompass the entire inventory.
There's more discussion of the ways (*lets || *altlets) is and isn't comparable to *let in pre-refactoring getobj in #441.",Fix incorporated into 81a1b9b,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,444,2021-01-11T00:56:18Z,2021-05-13T20:34:20Z,2021-05-13T20:34:20Z,CLOSED,False,199,83,3,https://github.com/theexternvoid,Fix Issue 443 - X11 Support for status_hilite Rules,13,[],https://github.com/NetHack/NetHack/pull/444,https://github.com/theexternvoid,1,https://github.com/NetHack/NetHack/pull/444,"For the X11 UI, I implemented the most important status_hilite rules: colors and invert. Bold, blinking, etc. are still not supported in this update. Also makes X11 honor the number specified in the statushilites config option.","For the X11 UI, I implemented the most important status_hilite rules: colors and invert. Bold, blinking, etc. are still not supported in this update. Also makes X11 honor the number specified in the statushilites config option.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,444,2021-01-11T00:56:18Z,2021-05-13T20:34:20Z,2021-05-13T20:34:20Z,CLOSED,False,199,83,3,https://github.com/theexternvoid,Fix Issue 443 - X11 Support for status_hilite Rules,13,[],https://github.com/NetHack/NetHack/pull/444,https://github.com/paxed,2,https://github.com/NetHack/NetHack/pull/444#issuecomment-760353049,"For the X11 UI, I implemented the most important status_hilite rules: colors and invert. Bold, blinking, etc. are still not supported in this update. Also makes X11 honor the number specified in the statushilites config option.",Setting NetHack*fancy_status: False in NetHack.ad causes a segfault.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,444,2021-01-11T00:56:18Z,2021-05-13T20:34:20Z,2021-05-13T20:34:20Z,CLOSED,False,199,83,3,https://github.com/theexternvoid,Fix Issue 443 - X11 Support for status_hilite Rules,13,[],https://github.com/NetHack/NetHack/pull/444,https://github.com/theexternvoid,3,https://github.com/NetHack/NetHack/pull/444#issuecomment-761939037,"For the X11 UI, I implemented the most important status_hilite rules: colors and invert. Bold, blinking, etc. are still not supported in this update. Also makes X11 honor the number specified in the statushilites config option.","Setting NetHack*fancy_status: False in NetHack.ad causes a segfault.

It works fine for me. Can you post a stack trace?",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,444,2021-01-11T00:56:18Z,2021-05-13T20:34:20Z,2021-05-13T20:34:20Z,CLOSED,False,199,83,3,https://github.com/theexternvoid,Fix Issue 443 - X11 Support for status_hilite Rules,13,[],https://github.com/NetHack/NetHack/pull/444,https://github.com/paxed,4,https://github.com/NetHack/NetHack/pull/444#issuecomment-762325264,"For the X11 UI, I implemented the most important status_hilite rules: colors and invert. Bold, blinking, etc. are still not supported in this update. Also makes X11 honor the number specified in the statushilites config option.","Setting NetHack*fancy_status: False in NetHack.ad causes a segfault.

It works fine for me. Can you post a stack trace?

I can do that, if necessary, but the problem is that you changed the color XtNfoo defines in xwindow.h to actual colors, when they're used as names for Xresources in init_menu_nhcolors, not as actual colors. NetHack.Ad has NetHack*map*black: grey15, but after your change, the code is trying to look up NetHack*map*grey15 instead ...",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,444,2021-01-11T00:56:18Z,2021-05-13T20:34:20Z,2021-05-13T20:34:20Z,CLOSED,False,199,83,3,https://github.com/theexternvoid,Fix Issue 443 - X11 Support for status_hilite Rules,13,[],https://github.com/NetHack/NetHack/pull/444,https://github.com/theexternvoid,5,https://github.com/NetHack/NetHack/pull/444#issuecomment-762520828,"For the X11 UI, I implemented the most important status_hilite rules: colors and invert. Bold, blinking, etc. are still not supported in this update. Also makes X11 honor the number specified in the statushilites config option.","Thanks! I thought those were unused so repurposed them. Sounds easy to fix. I'll get on it when I have some spare time, probably not this week unfortunately.
…
-David Mooter.

‐‐‐‐‐‐‐ Original Message ‐‐‐‐‐‐‐
On Monday 18 January 2021 15:38, Pasi Kallinen ***@***.***> wrote:
>> Setting NetHack*fancy_status: False in NetHack.ad causes a segfault.
>
> It works fine for me. Can you post a stack trace?

 I can do that, if necessary, but the problem is that you changed the color XtNfoo defines in xwindow.h to actual colors, when they're used as names for Xresources in init_menu_nhcolors, not as actual colors. NetHack.Ad has NetHack*map*black: grey15, but after your change, the code is trying to look up NetHack*map*grey15 instead ...

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, [view it on GitHub](#444 (comment)), or [unsubscribe](https://github.com/notifications/unsubscribe-auth/ACG6IXVPOAHIGNST3AXHMVLS2RIXZANCNFSM4V43VTOA).",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,444,2021-01-11T00:56:18Z,2021-05-13T20:34:20Z,2021-05-13T20:34:20Z,CLOSED,False,199,83,3,https://github.com/theexternvoid,Fix Issue 443 - X11 Support for status_hilite Rules,13,[],https://github.com/NetHack/NetHack/pull/444,https://github.com/theexternvoid,6,https://github.com/NetHack/NetHack/pull/444#issuecomment-764198300,"For the X11 UI, I implemented the most important status_hilite rules: colors and invert. Bold, blinking, etc. are still not supported in this update. Also makes X11 honor the number specified in the statushilites config option.","I addressed the above concerns by restoring the XtNfoo defines in xwindow.h and making my code use its own hard coded values. It'd be nice if it pulled colors from NetHack.ad via get_nhcolor(). The challenge is that winstat.c is supporting two flavors: tty and fancy. The tty code seems to be using NetHack.ad via get_nhcolor(). The fancy code doesn't, hence doesn't load the necessary data for get_nhcolor() to work without more changes. My thought for long term is it may be easier to manage by splitting the tty and fancy flavors of winstat.c into two separate files so it's clear which is what, then update the fancy code to load colors via get_nhcolor() or something similar that pulls color codes from the resource file. But this is my first time in this code, so I may be wrong due to unfamiliarity.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,444,2021-01-11T00:56:18Z,2021-05-13T20:34:20Z,2021-05-13T20:34:20Z,CLOSED,False,199,83,3,https://github.com/theexternvoid,Fix Issue 443 - X11 Support for status_hilite Rules,13,[],https://github.com/NetHack/NetHack/pull/444,https://github.com/pat-rankin,7,https://github.com/NetHack/NetHack/pull/444#issuecomment-840817619,"For the X11 UI, I implemented the most important status_hilite rules: colors and invert. Bold, blinking, etc. are still not supported in this update. Also makes X11 honor the number specified in the statushilites config option.","Issue #443 and pull request #444 were closed by
commits acbf423
and a2a9cb7
on Jan 26 2021.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,450,2021-01-18T23:42:38Z,2021-01-19T01:57:46Z,2021-01-19T01:57:46Z,CLOSED,False,2,1,1,https://github.com/mlehotay,fix issue 449 - dishwasher gender should be compatible with hero,1,[],https://github.com/NetHack/NetHack/pull/450,https://github.com/mlehotay,1,https://github.com/NetHack/NetHack/pull/450,"assuming the hero is straight
see issue 368 for related discussion","assuming the hero is straight
see issue 368 for related discussion",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,450,2021-01-18T23:42:38Z,2021-01-19T01:57:46Z,2021-01-19T01:57:46Z,CLOSED,False,2,1,1,https://github.com/mlehotay,fix issue 449 - dishwasher gender should be compatible with hero,1,[],https://github.com/NetHack/NetHack/pull/450,https://github.com/mlehotay,2,https://github.com/NetHack/NetHack/pull/450#issuecomment-762551690,"assuming the hero is straight
see issue 368 for related discussion",@nhcopier fixed this in a8f4a54,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,451,2021-01-22T04:05:51Z,2021-04-16T18:04:13Z,2021-04-16T18:04:13Z,CLOSED,False,8,12,1,https://github.com/copperwater,"Scrap xlogfile flags field, replacing it with ""mode""",1,[],https://github.com/NetHack/NetHack/pull/451,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/451,"As of the recent commit introducing a ""bones"" field in the xlogfile,
there is no more particular need for the 0x4 bit in flags. Its semantics
of ""if flags & 0x4 is set, then this game did NOT load any bones"" were
confusing and unintuitive anyway.
Then, with bones now out of the flags field, the only thing that flags
is used for is marking games as being in wizard mode or explore mode.
Despite the flags encoding function treating them as potentially
independent variables, they seem to be mutually exclusive to me: the
game doesn't allow you to start in both wizard and explore mode, and if
you do #exploremode while in wizard mode you get a warning that you are
leaving wizard mode.
Thus, this commit gets rid of flags entirely, replacing it with a
""mode="" field in the xlogfile. Possible values are ""wizard"", ""explore"",
and ""normal"".","As of the recent commit introducing a ""bones"" field in the xlogfile,
there is no more particular need for the 0x4 bit in flags. Its semantics
of ""if flags & 0x4 is set, then this game did NOT load any bones"" were
confusing and unintuitive anyway.
Then, with bones now out of the flags field, the only thing that flags
is used for is marking games as being in wizard mode or explore mode.
Despite the flags encoding function treating them as potentially
independent variables, they seem to be mutually exclusive to me: the
game doesn't allow you to start in both wizard and explore mode, and if
you do #exploremode while in wizard mode you get a warning that you are
leaving wizard mode.
Thus, this commit gets rid of flags entirely, replacing it with a
""mode="" field in the xlogfile. Possible values are ""wizard"", ""explore"",
and ""normal"".",True,"{'THUMBS_UP': ['https://github.com/NullCGT', 'https://github.com/actual-nh']}"
NetHack/NetHack,https://github.com/NetHack/NetHack,451,2021-01-22T04:05:51Z,2021-04-16T18:04:13Z,2021-04-16T18:04:13Z,CLOSED,False,8,12,1,https://github.com/copperwater,"Scrap xlogfile flags field, replacing it with ""mode""",1,[],https://github.com/NetHack/NetHack/pull/451,https://github.com/copperwater,2,https://github.com/NetHack/NetHack/pull/451#issuecomment-821372232,"As of the recent commit introducing a ""bones"" field in the xlogfile,
there is no more particular need for the 0x4 bit in flags. Its semantics
of ""if flags & 0x4 is set, then this game did NOT load any bones"" were
confusing and unintuitive anyway.
Then, with bones now out of the flags field, the only thing that flags
is used for is marking games as being in wizard mode or explore mode.
Despite the flags encoding function treating them as potentially
independent variables, they seem to be mutually exclusive to me: the
game doesn't allow you to start in both wizard and explore mode, and if
you do #exploremode while in wizard mode you get a warning that you are
leaving wizard mode.
Thus, this commit gets rid of flags entirely, replacing it with a
""mode="" field in the xlogfile. Possible values are ""wizard"", ""explore"",
and ""normal"".","Withdrawing this because devteam members have objected to breaking xlogfile backwards compatibility by removing the flags field. (My opinion remains that the xlogfile has never been constant from major version to major version anyway, and the game ossifies faster the more things are in it that aren't allowed to be changed, but it looks like there's no will on the devteam's part to take this).",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,453,2021-01-22T19:54:40Z,2021-01-22T20:38:21Z,2021-01-24T07:47:50Z,CLOSED,False,4,2,1,https://github.com/entrez,Allow custom increment amounts in #wizintrinsic,1,[],https://github.com/NetHack/NetHack/pull/453,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/453,"Let users of #wizintrinsic set a specific amount by which they want to increment each particular timeout, by entering a count/typing in numerals before selecting the item in the list.  I think doing it this way should be pretty intuitive to players who are familiar with the 'enter count -> make selection' flow of normal inventory menus in NetHack, and is simpler than using a separate prompt, as was mentioned as a possibility in a comment.
When an intrinsic is selected without entering a count, the increment will continue to default to the previous value of 30; this value is set via the DEFAULT_TIMEOUT_INCR macro.
I also deleted a redundant declaration of wiz_intrinsic; the duplicate seems to have been added by mistake in ff6139c.
(Edit: merged via 77d4b4c)","Let users of #wizintrinsic set a specific amount by which they want to increment each particular timeout, by entering a count/typing in numerals before selecting the item in the list.  I think doing it this way should be pretty intuitive to players who are familiar with the 'enter count -> make selection' flow of normal inventory menus in NetHack, and is simpler than using a separate prompt, as was mentioned as a possibility in a comment.
When an intrinsic is selected without entering a count, the increment will continue to default to the previous value of 30; this value is set via the DEFAULT_TIMEOUT_INCR macro.
I also deleted a redundant declaration of wiz_intrinsic; the duplicate seems to have been added by mistake in ff6139c.
(Edit: merged via 77d4b4c)",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,453,2021-01-22T19:54:40Z,2021-01-22T20:38:21Z,2021-01-24T07:47:50Z,CLOSED,False,4,2,1,https://github.com/entrez,Allow custom increment amounts in #wizintrinsic,1,[],https://github.com/NetHack/NetHack/pull/453,https://github.com/paxed,2,https://github.com/NetHack/NetHack/pull/453#issuecomment-765671432,"Let users of #wizintrinsic set a specific amount by which they want to increment each particular timeout, by entering a count/typing in numerals before selecting the item in the list.  I think doing it this way should be pretty intuitive to players who are familiar with the 'enter count -> make selection' flow of normal inventory menus in NetHack, and is simpler than using a separate prompt, as was mentioned as a possibility in a comment.
When an intrinsic is selected without entering a count, the increment will continue to default to the previous value of 30; this value is set via the DEFAULT_TIMEOUT_INCR macro.
I also deleted a redundant declaration of wiz_intrinsic; the duplicate seems to have been added by mistake in ff6139c.
(Edit: merged via 77d4b4c)","Good idea. Pushed, and will show up in a bit.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,454,2021-01-23T04:25:26Z,,2022-01-27T17:13:54Z,OPEN,False,53,23,6,https://github.com/entrez,Allow running over water with IDed water walking,5,[],https://github.com/NetHack/NetHack/pull/454,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/454,"Currently, only levitation or flight allow a character to run and use the travel command over water or lava.  The water walking extrinsic doesn't provide the same ability, for fear that it would give players a risk-free way to test whether something provided water walking: wear the item, run at some water, and see whether you're stopped at the edge or not:

  
    
      NetHack/src/hack.c
    
    
        Lines 2897 to 2900
      in
      96ee175
    
  
  
    

        
          
                               /* No Wwalking check; otherwise they'd be able 
        

        
          
                                * to test boots by trying to SHIFT-direction 
        

        
          
                                * into a pool and seeing if the game allowed it 
        

        
          
                                */ 
        
    
  


This risk can be defused, though, by requiring not just water walking, but water walking provided by a known source (i.e. already-identified water walking boots).  Allowing heroes with an identified source of water walking to travel/run across the water doesn't provide the same opportunity for risk-free identification, and can make it a lot more convenient to traverse watery levels.
Identified water walking boots still wouldn't allow running over lava, even if they are known to be fireproof.
This would also add transition points between water/lava and land as ""interesting"" features that will pause running started by Gk or gk (though not running by Shiftk), regardless of whether the hero can traverse the terrain on the other side of the transition.  This would allow people with water walking boots, a ring of levitation, etc, to use Gk to run within an island on Medusa's level, say, without continuing out into open water by accident.
I also changed the phrasing of the flags.mention_walls messages associated with stopping short of one of these transition points, since the previous phrasing of ""you stop at the edge of the %s"" wasn't totally clear about which side of the edge you were on -- since now these transitions between water and land can be approached from either direction, I tried to make the messages clearer about where exactly the character stopped.","Currently, only levitation or flight allow a character to run and use the travel command over water or lava.  The water walking extrinsic doesn't provide the same ability, for fear that it would give players a risk-free way to test whether something provided water walking: wear the item, run at some water, and see whether you're stopped at the edge or not:

  
    
      NetHack/src/hack.c
    
    
        Lines 2897 to 2900
      in
      96ee175
    
  
  
    

        
          
                               /* No Wwalking check; otherwise they'd be able 
        

        
          
                                * to test boots by trying to SHIFT-direction 
        

        
          
                                * into a pool and seeing if the game allowed it 
        

        
          
                                */ 
        
    
  


This risk can be defused, though, by requiring not just water walking, but water walking provided by a known source (i.e. already-identified water walking boots).  Allowing heroes with an identified source of water walking to travel/run across the water doesn't provide the same opportunity for risk-free identification, and can make it a lot more convenient to traverse watery levels.
Identified water walking boots still wouldn't allow running over lava, even if they are known to be fireproof.
This would also add transition points between water/lava and land as ""interesting"" features that will pause running started by Gk or gk (though not running by Shiftk), regardless of whether the hero can traverse the terrain on the other side of the transition.  This would allow people with water walking boots, a ring of levitation, etc, to use Gk to run within an island on Medusa's level, say, without continuing out into open water by accident.
I also changed the phrasing of the flags.mention_walls messages associated with stopping short of one of these transition points, since the previous phrasing of ""you stop at the edge of the %s"" wasn't totally clear about which side of the edge you were on -- since now these transitions between water and land can be approached from either direction, I tried to make the messages clearer about where exactly the character stopped.",True,"{'THUMBS_UP': ['https://github.com/ostrosablin', 'https://github.com/Luxidream', 'https://github.com/copperwater', 'https://github.com/NullCGT', 'https://github.com/k21971', 'https://github.com/actual-nh', 'https://github.com/gebulmer', 'https://github.com/kscheirer']}"
NetHack/NetHack,https://github.com/NetHack/NetHack,455,2021-01-25T00:22:43Z,2021-02-01T19:37:20Z,2021-05-22T23:37:28Z,MERGED,True,66,111,9,https://github.com/copperwater,Unify code for extracting an object from a monster's inventory,1,[],https://github.com/NetHack/NetHack/pull/455,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/455,"The code for doing this (basically an obj_extract_self() call plus
handling if the object was worn or wielded) was duplicated all over, and
inconsistent - for instance, though all of them updated the monster's
misc_worn_check to indicate it was no longer wearing something in
whatever slot, only one call also set the bit that flags the monster to
consider putting on other gear afterwards.
Under a new function, extract_from_minvent, all this extra handling is
checked in one function, which can simply replace the obj_extract_self
call.
A few callers (such as stealing) have some common code after the
object is extracted and some other things happen such as message
printing, such as calling mselftouch if the object was worn
gloves. extract_from_minvent does not handle these cases.","The code for doing this (basically an obj_extract_self() call plus
handling if the object was worn or wielded) was duplicated all over, and
inconsistent - for instance, though all of them updated the monster's
misc_worn_check to indicate it was no longer wearing something in
whatever slot, only one call also set the bit that flags the monster to
consider putting on other gear afterwards.
Under a new function, extract_from_minvent, all this extra handling is
checked in one function, which can simply replace the obj_extract_self
call.
A few callers (such as stealing) have some common code after the
object is extracted and some other things happen such as message
printing, such as calling mselftouch if the object was worn
gloves. extract_from_minvent does not handle these cases.",True,"{'THUMBS_UP': ['https://github.com/entrez', 'https://github.com/k21971']}"
NetHack/NetHack,https://github.com/NetHack/NetHack,455,2021-01-25T00:22:43Z,2021-02-01T19:37:20Z,2021-05-22T23:37:28Z,MERGED,True,66,111,9,https://github.com/copperwater,Unify code for extracting an object from a monster's inventory,1,[],https://github.com/NetHack/NetHack/pull/455,https://github.com/nhmall,2,https://github.com/NetHack/NetHack/pull/455#issuecomment-769082502,"The code for doing this (basically an obj_extract_self() call plus
handling if the object was worn or wielded) was duplicated all over, and
inconsistent - for instance, though all of them updated the monster's
misc_worn_check to indicate it was no longer wearing something in
whatever slot, only one call also set the bit that flags the monster to
consider putting on other gear afterwards.
Under a new function, extract_from_minvent, all this extra handling is
checked in one function, which can simply replace the obj_extract_self
call.
A few callers (such as stealing) have some common code after the
object is extracted and some other things happen such as message
printing, such as calling mselftouch if the object was worn
gloves. extract_from_minvent does not handle these cases.",update-pr455.diff.txt,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,455,2021-01-25T00:22:43Z,2021-02-01T19:37:20Z,2021-05-22T23:37:28Z,MERGED,True,66,111,9,https://github.com/copperwater,Unify code for extracting an object from a monster's inventory,1,[],https://github.com/NetHack/NetHack/pull/455,https://github.com/copperwater,3,https://github.com/NetHack/NetHack/pull/455#issuecomment-770116798,"The code for doing this (basically an obj_extract_self() call plus
handling if the object was worn or wielded) was duplicated all over, and
inconsistent - for instance, though all of them updated the monster's
misc_worn_check to indicate it was no longer wearing something in
whatever slot, only one call also set the bit that flags the monster to
consider putting on other gear afterwards.
Under a new function, extract_from_minvent, all this extra handling is
checked in one function, which can simply replace the obj_extract_self
call.
A few callers (such as stealing) have some common code after the
object is extracted and some other things happen such as message
printing, such as calling mselftouch if the object was worn
gloves. extract_from_minvent does not handle these cases.",Rebased and updated.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,456,2021-02-02T18:21:55Z,2021-02-02T20:33:58Z,2021-02-03T14:06:51Z,CLOSED,False,703,38,29,https://github.com/mlehotay,Consent,35,[],https://github.com/NetHack/NetHack/pull/456,https://github.com/mlehotay,1,https://github.com/NetHack/NetHack/pull/456,"WIP - sorry, included too many commits here. ignore the first 21 commits. consent branch starts with 1c6c45d
need to rebase branch, trying to figure out if I can preserve the comments
nope - don't think I can keep the comments if I rebase.
closing this pull request, will open another when ready for review.","WIP - sorry, included too many commits here. ignore the first 21 commits. consent branch starts with 1c6c45d
need to rebase branch, trying to figure out if I can preserve the comments
nope - don't think I can keep the comments if I rebase.
closing this pull request, will open another when ready for review.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,456,2021-02-02T18:21:55Z,2021-02-02T20:33:58Z,2021-02-03T14:06:51Z,CLOSED,False,703,38,29,https://github.com/mlehotay,Consent,35,[],https://github.com/NetHack/NetHack/pull/456,https://github.com/copperwater,2,https://github.com/NetHack/NetHack/pull/456#issuecomment-772512759,"WIP - sorry, included too many commits here. ignore the first 21 commits. consent branch starts with 1c6c45d
need to rebase branch, trying to figure out if I can preserve the comments
nope - don't think I can keep the comments if I rebase.
closing this pull request, will open another when ready for review.","FWIW, the only reason I was commenting on commits was because the branch didn't exist as a pull request at the time; I would have left pull request comments if it did (like I'm doing now).",True,{'THUMBS_UP': ['https://github.com/mlehotay']}
NetHack/NetHack,https://github.com/NetHack/NetHack,456,2021-02-02T18:21:55Z,2021-02-02T20:33:58Z,2021-02-03T14:06:51Z,CLOSED,False,703,38,29,https://github.com/mlehotay,Consent,35,[],https://github.com/NetHack/NetHack/pull/456,https://github.com/mlehotay,3,https://github.com/NetHack/NetHack/pull/456#issuecomment-772536044,"WIP - sorry, included too many commits here. ignore the first 21 commits. consent branch starts with 1c6c45d
need to rebase branch, trying to figure out if I can preserve the comments
nope - don't think I can keep the comments if I rebase.
closing this pull request, will open another when ready for review.",No worries. Thanks again!,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,458,2021-02-05T20:06:35Z,2021-07-17T06:44:33Z,2021-07-17T06:44:36Z,CLOSED,False,4,1,1,https://github.com/RojjaCebolla,Remove chaotic stormbringer peaceful penalty,1,[],https://github.com/NetHack/NetHack/pull/458,https://github.com/RojjaCebolla,1,https://github.com/NetHack/NetHack/pull/458,"Characters of all alignments, including Knights, can already remove shopkeepers
and guards without penalty. From the wiki:
""The simplest way to get rid of a peaceful human while avoiding the penalty for
murder is to let your pet do the dirty work. You can also polymorph your victims
before killing them. Note that a failed polymorph, "" shudders."" (system shock),
still counts as murder.""

When a player is chosen to ""steal souls"" for the glory of whomever is concerned,
it's a pretty big flavor glitch for stormbringer to start blasting the user for
successfully snuffing out a soul with the artifact weapon that encourages murder
(Not to mention the weird fantasy racism in which elf, orc, & dwarf deaths don't
cause nearly the same level of punishment as human deaths do.)

And in general, it's weird for chaotics to be god-penalized for any ""crime"".

So the proposed change is that chaotic stormbringer users don't lose huge chunks
of alignment for hitting peacefuls. I did not mess with the luck penalties, as
those do not cause artifact blasting. While i find them unnecessary, they don't
seem like a significant flavor glitch.","Characters of all alignments, including Knights, can already remove shopkeepers
and guards without penalty. From the wiki:
""The simplest way to get rid of a peaceful human while avoiding the penalty for
murder is to let your pet do the dirty work. You can also polymorph your victims
before killing them. Note that a failed polymorph, "" shudders."" (system shock),
still counts as murder.""

When a player is chosen to ""steal souls"" for the glory of whomever is concerned,
it's a pretty big flavor glitch for stormbringer to start blasting the user for
successfully snuffing out a soul with the artifact weapon that encourages murder
(Not to mention the weird fantasy racism in which elf, orc, & dwarf deaths don't
cause nearly the same level of punishment as human deaths do.)

And in general, it's weird for chaotics to be god-penalized for any ""crime"".

So the proposed change is that chaotic stormbringer users don't lose huge chunks
of alignment for hitting peacefuls. I did not mess with the luck penalties, as
those do not cause artifact blasting. While i find them unnecessary, they don't
seem like a significant flavor glitch.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,458,2021-02-05T20:06:35Z,2021-07-17T06:44:33Z,2021-07-17T06:44:36Z,CLOSED,False,4,1,1,https://github.com/RojjaCebolla,Remove chaotic stormbringer peaceful penalty,1,[],https://github.com/NetHack/NetHack/pull/458,https://github.com/entrez,2,https://github.com/NetHack/NetHack/pull/458#issuecomment-774291492,"Characters of all alignments, including Knights, can already remove shopkeepers
and guards without penalty. From the wiki:
""The simplest way to get rid of a peaceful human while avoiding the penalty for
murder is to let your pet do the dirty work. You can also polymorph your victims
before killing them. Note that a failed polymorph, "" shudders."" (system shock),
still counts as murder.""

When a player is chosen to ""steal souls"" for the glory of whomever is concerned,
it's a pretty big flavor glitch for stormbringer to start blasting the user for
successfully snuffing out a soul with the artifact weapon that encourages murder
(Not to mention the weird fantasy racism in which elf, orc, & dwarf deaths don't
cause nearly the same level of punishment as human deaths do.)

And in general, it's weird for chaotics to be god-penalized for any ""crime"".

So the proposed change is that chaotic stormbringer users don't lose huge chunks
of alignment for hitting peacefuls. I did not mess with the luck penalties, as
those do not cause artifact blasting. While i find them unnecessary, they don't
seem like a significant flavor glitch.","Another potential issue is that even when the logic is corrected, it is still just checking your currently wielded weapon -- not necessarily what killed the monster. So zapping a wand of death may or may not have negative consequences depending on whether you happen to be wielding Stormbringer, which seems pretty arbitrary.
Maybe Stormbringer should just be left out of it entirely, since the ""chosen to steal souls"" line doesn't explicitly say ""with Stormbringer"" -- I think it'd be more consistent to just exclude all chaotics who have been crowned Glory of Arioch, regardless of their current weapon.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,458,2021-02-05T20:06:35Z,2021-07-17T06:44:33Z,2021-07-17T06:44:36Z,CLOSED,False,4,1,1,https://github.com/RojjaCebolla,Remove chaotic stormbringer peaceful penalty,1,[],https://github.com/NetHack/NetHack/pull/458,https://github.com/RojjaCebolla,3,https://github.com/NetHack/NetHack/pull/458#issuecomment-774596534,"Characters of all alignments, including Knights, can already remove shopkeepers
and guards without penalty. From the wiki:
""The simplest way to get rid of a peaceful human while avoiding the penalty for
murder is to let your pet do the dirty work. You can also polymorph your victims
before killing them. Note that a failed polymorph, "" shudders."" (system shock),
still counts as murder.""

When a player is chosen to ""steal souls"" for the glory of whomever is concerned,
it's a pretty big flavor glitch for stormbringer to start blasting the user for
successfully snuffing out a soul with the artifact weapon that encourages murder
(Not to mention the weird fantasy racism in which elf, orc, & dwarf deaths don't
cause nearly the same level of punishment as human deaths do.)

And in general, it's weird for chaotics to be god-penalized for any ""crime"".

So the proposed change is that chaotic stormbringer users don't lose huge chunks
of alignment for hitting peacefuls. I did not mess with the luck penalties, as
those do not cause artifact blasting. While i find them unnecessary, they don't
seem like a significant flavor glitch.","Thanks for the corrections, @entrez and @dnadlinger !
To be more specific about intent, i updated the commit message. But in short, if i were making a NH fork, i would throw out all penalties for crime when the player is chaotic.  I figured a more conservative approach would be welcome in NetHack - if you're chaotic, you're generally encouraged to be more criminal, and if you're also wielding Stormy, you're being strongly encouraged to kill indiscriminately.
It's being blasted by Stormy for doing ""#StormyThings"" that feels most counterintuitive. Being crowned is simply the most common scenario in which chaotics receive stormbringer.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,460,2021-02-08T05:16:14Z,2021-02-11T05:37:19Z,2021-05-22T23:38:37Z,MERGED,True,201,81,2,https://github.com/copperwater,Make engraving an occupation,1,[],https://github.com/NetHack/NetHack/pull/460,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/460,"Instead of inexplicably paralyzing the player for the duration of their
engraving. Many a character has died by trying to engrave something and
then sitting there diligently writing it while monsters surround and
attack them. (This was especially prominent back in the 3.4.3 era when
repeated Elbereths were viable, but it still occurs today with e.g.
using a hard stone to engrave Elbereth). There were also some other
oddities - for instance, if something teleported the player away while
they were engraving, they would continue to ""engrave"" (be paralyzed) on
their new location, but would not produce any text there; the full
engraving would be placed on their initial position.
In this commit, I have converted engraving to use the occupation
framework, which treats it as an interruptible activity. This
necessitated some logical restructuring, mostly involving the engraving
being written out in chunks as the player spends more uninterrupted time
on it.
I've tried to keep this free of regressions except for those inherent to
the occupation system.
What has NOT changed:

The rate of engraving is still 10 characters per turn, or 1 character
using slow methods.
The formulas for determining how much a bladed weapon or marker can
engrave before getting exhausted are kept. Though this is a bit
convoluted, and if it's not considered important to preserve the
existing behavior, I would recommend simplifying it by decreasing the
maximum engraving length for weapons by 1 so that each point of
enchantment simply gets you 2 characters' worth of engraving (e.g. a
-2 weapon will only engrave 1 or 2 characters before dulling to -3,
rather than giving it a third ""grace character"".
The input buffer is still modified based on confusion/blindness/etc
only at the time when the player inputs it (if they gain a
debilitating status while engraving, it will not affect the text). My
personal preference is to make the text affected in scenarios like
that, but it's not strictly necessary to do here, so I didn't.
Wand messages such as ""The floor is riddled by bullet holes"", and
blinding from engraving lightning, still appear before the hero starts
to take any time engraving. As noted above, getting blinded by the
wand still has no effect on accurately engraving the text, unless the
hero was already blind or impaired.

What has changed:

Moving off the engraving or losing the object being engraved with
causes the player to stop engraving.
Wands can still engrave an arbitrary amount of text using a single
charge, but if the hero is interrupted and decides to start engraving
again, they will consume a second charge.

As it adds a new field to g.context, this is a save-breaking change.","Instead of inexplicably paralyzing the player for the duration of their
engraving. Many a character has died by trying to engrave something and
then sitting there diligently writing it while monsters surround and
attack them. (This was especially prominent back in the 3.4.3 era when
repeated Elbereths were viable, but it still occurs today with e.g.
using a hard stone to engrave Elbereth). There were also some other
oddities - for instance, if something teleported the player away while
they were engraving, they would continue to ""engrave"" (be paralyzed) on
their new location, but would not produce any text there; the full
engraving would be placed on their initial position.
In this commit, I have converted engraving to use the occupation
framework, which treats it as an interruptible activity. This
necessitated some logical restructuring, mostly involving the engraving
being written out in chunks as the player spends more uninterrupted time
on it.
I've tried to keep this free of regressions except for those inherent to
the occupation system.
What has NOT changed:

The rate of engraving is still 10 characters per turn, or 1 character
using slow methods.
The formulas for determining how much a bladed weapon or marker can
engrave before getting exhausted are kept. Though this is a bit
convoluted, and if it's not considered important to preserve the
existing behavior, I would recommend simplifying it by decreasing the
maximum engraving length for weapons by 1 so that each point of
enchantment simply gets you 2 characters' worth of engraving (e.g. a
-2 weapon will only engrave 1 or 2 characters before dulling to -3,
rather than giving it a third ""grace character"".
The input buffer is still modified based on confusion/blindness/etc
only at the time when the player inputs it (if they gain a
debilitating status while engraving, it will not affect the text). My
personal preference is to make the text affected in scenarios like
that, but it's not strictly necessary to do here, so I didn't.
Wand messages such as ""The floor is riddled by bullet holes"", and
blinding from engraving lightning, still appear before the hero starts
to take any time engraving. As noted above, getting blinded by the
wand still has no effect on accurately engraving the text, unless the
hero was already blind or impaired.

What has changed:

Moving off the engraving or losing the object being engraved with
causes the player to stop engraving.
Wands can still engrave an arbitrary amount of text using a single
charge, but if the hero is interrupted and decides to start engraving
again, they will consume a second charge.

As it adds a new field to g.context, this is a save-breaking change.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,463,2021-02-19T00:09:22Z,2021-02-19T15:29:57Z,2021-05-22T23:43:05Z,CLOSED,False,15,14,7,https://github.com/copperwater,"Make ""joined"" in Lua and level structs always take a boolean",2,[],https://github.com/NetHack/NetHack/pull/463,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/463,"It is only ever used as a boolean, and having joined=BOOL for regions and joined=INT for rooms is confusing. So this PR changes all types of joined to booleans:

g.coder->lvl_is_joined
joined in struct room
needjoining in struct mkroom
and all places that did joined=INT in lua files are changed.","It is only ever used as a boolean, and having joined=BOOL for regions and joined=INT for rooms is confusing. So this PR changes all types of joined to booleans:

g.coder->lvl_is_joined
joined in struct room
needjoining in struct mkroom
and all places that did joined=INT in lua files are changed.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,463,2021-02-19T00:09:22Z,2021-02-19T15:29:57Z,2021-05-22T23:43:05Z,CLOSED,False,15,14,7,https://github.com/copperwater,"Make ""joined"" in Lua and level structs always take a boolean",2,[],https://github.com/NetHack/NetHack/pull/463,https://github.com/paxed,2,https://github.com/NetHack/NetHack/pull/463#issuecomment-782148864,"It is only ever used as a boolean, and having joined=BOOL for regions and joined=INT for rooms is confusing. So this PR changes all types of joined to booleans:

g.coder->lvl_is_joined
joined in struct room
needjoining in struct mkroom
and all places that did joined=INT in lua files are changed.",Pushed.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,464,2021-02-19T05:26:59Z,2021-02-19T17:37:22Z,2021-05-22T23:38:32Z,MERGED,True,3,3,1,https://github.com/copperwater,Fix: engraving with non-blade dulled the weapon anyway,1,[],https://github.com/NetHack/NetHack/pull/464,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/464,"Due to a logic bug introduced when engraving became an occupation - the
code that tests to see whether the player is writing with a weapon that
will get dulled wasn't correctly checking that they were actually
carving an engraving.
Fixes an impossible that occurs when someone writes with a non-blade.","Due to a logic bug introduced when engraving became an occupation - the
code that tests to see whether the player is writing with a weapon that
will get dulled wasn't correctly checking that they were actually
carving an engraving.
Fixes an impossible that occurs when someone writes with a non-blade.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,465,2021-02-20T13:30:01Z,2021-03-29T20:37:18Z,2021-05-22T23:37:23Z,CLOSED,False,2,1,2,https://github.com/copperwater,Make player explosion attack wake monsters,1,[],https://github.com/NetHack/NetHack/pull/465,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/465,"This brings a polyselfed player's AT_EXPL attacks into line with
monsters' attacks, in terms of making noise. Previously, exploding at a
monster was entirely silent, and exploding at thin air called
wake_nearby which is an XL-dependent radius (usually much larger than
monsters' sound radius of 7).
Now, both exploding at a monster and exploding at thin air wake monsters
in the same 7 sound radius as monster explosions use.","This brings a polyselfed player's AT_EXPL attacks into line with
monsters' attacks, in terms of making noise. Previously, exploding at a
monster was entirely silent, and exploding at thin air called
wake_nearby which is an XL-dependent radius (usually much larger than
monsters' sound radius of 7).
Now, both exploding at a monster and exploding at thin air wake monsters
in the same 7 sound radius as monster explosions use.",True,"{'THUMBS_UP': ['https://github.com/entrez', 'https://github.com/ostrosablin']}"
NetHack/NetHack,https://github.com/NetHack/NetHack,467,2021-02-27T15:07:07Z,2021-03-20T21:37:18Z,2021-05-22T23:37:15Z,CLOSED,False,15,7,1,https://github.com/copperwater,Two getobj fixes,3,[],https://github.com/NetHack/NetHack/pull/467,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/467,"Discovered a bug in my refactor of getobj a couple of months ago in which the sub-GETOBJ_SUGGEST cases didn't work for selecting '-', even though they are intended to make it selectable. This, for instance, makes it impossible to select your hands at a getobj prompt if the callback returns GETOBJ_DOWNPLAY - valid but not presented outright as an option.
I also pulled qt's fix of #441 into this pull request, at his request, because why not wrap two getobj fixes together?
Fixes #441 and #442.","Discovered a bug in my refactor of getobj a couple of months ago in which the sub-GETOBJ_SUGGEST cases didn't work for selecting '-', even though they are intended to make it selectable. This, for instance, makes it impossible to select your hands at a getobj prompt if the callback returns GETOBJ_DOWNPLAY - valid but not presented outright as an option.
I also pulled qt's fix of #441 into this pull request, at his request, because why not wrap two getobj fixes together?
Fixes #441 and #442.",True,{'THUMBS_UP': ['https://github.com/entrez']}
NetHack/NetHack,https://github.com/NetHack/NetHack,468,2021-03-03T01:27:24Z,2021-03-16T22:37:17Z,2021-05-22T23:37:22Z,CLOSED,False,6,4,2,https://github.com/copperwater,Fix impossible/panic when monster dies to self-read scroll of earth,1,[],https://github.com/NetHack/NetHack/pull/468,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/468,"When a monster read a scroll of earth and died to a boulder falling on
its own head, it would immediately drop the scroll to the ground. Then
when m_useup called extract_from_minvent after that, it would see that
the scroll was now at OBJ_FLOOR instead of OBJ_MINVENT and trigger the
impossible.
The panic happens following this because extract_from_minvent gave up
and did nothing when it encountered an object not at OBJ_MINVENT, and
predictably a lot of callers of extract_from_minvent want to free the
object afterwards. This commit hardens it against that case by calling
obj_extract_self even if the object is not in a monster's inventory.
To fix the problem of the scroll falling to the ground and then having
m_useup called on it, I moved the m_useup call to before the boulders
drop. This is consistent with player use of the scroll anyway,
disappearing before the effect happens.
I also did this for the case where a monster quaffs polymorph; I think
in some rare circumstances it can die indirectly after polymorphing by
falling onto a trap or unfavorable terrain.","When a monster read a scroll of earth and died to a boulder falling on
its own head, it would immediately drop the scroll to the ground. Then
when m_useup called extract_from_minvent after that, it would see that
the scroll was now at OBJ_FLOOR instead of OBJ_MINVENT and trigger the
impossible.
The panic happens following this because extract_from_minvent gave up
and did nothing when it encountered an object not at OBJ_MINVENT, and
predictably a lot of callers of extract_from_minvent want to free the
object afterwards. This commit hardens it against that case by calling
obj_extract_self even if the object is not in a monster's inventory.
To fix the problem of the scroll falling to the ground and then having
m_useup called on it, I moved the m_useup call to before the boulders
drop. This is consistent with player use of the scroll anyway,
disappearing before the effect happens.
I also did this for the case where a monster quaffs polymorph; I think
in some rare circumstances it can die indirectly after polymorphing by
falling onto a trap or unfavorable terrain.",True,{'THUMBS_UP': ['https://github.com/entrez']}
NetHack/NetHack,https://github.com/NetHack/NetHack,469,2021-03-03T05:12:11Z,2021-03-16T23:37:17Z,2021-05-22T23:37:16Z,CLOSED,False,11,0,2,https://github.com/copperwater,Prevent obtaining multiple gold stacks,2,[],https://github.com/NetHack/NetHack/pull/469,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/469,"Two similar bugs here, both discovered with the debug fuzzer.
First split gold case is when attempting to throw a partial stack of gold at itself. throw_obj contains a similar bit of logic to re-merge a split stack for when the prompt is canceled, but it isn't canceled in the ""You cannot throw gold at yourself"" case.
Second split gold case is when attempting to quiver a partial stack of gold.
Solution in both cases is to call unsplitobj() after telling the player they can't do these things.","Two similar bugs here, both discovered with the debug fuzzer.
First split gold case is when attempting to throw a partial stack of gold at itself. throw_obj contains a similar bit of logic to re-merge a split stack for when the prompt is canceled, but it isn't canceled in the ""You cannot throw gold at yourself"" case.
Second split gold case is when attempting to quiver a partial stack of gold.
Solution in both cases is to call unsplitobj() after telling the player they can't do these things.",True,{'THUMBS_UP': ['https://github.com/entrez']}
NetHack/NetHack,https://github.com/NetHack/NetHack,470,2021-03-03T17:36:45Z,2021-03-16T22:37:17Z,2021-04-02T00:25:47Z,CLOSED,False,11,7,2,https://github.com/entrez,Two unsaddled steed fixes,2,[],https://github.com/NetHack/NetHack/pull/470,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/470,"Would fix a bug/regression introduced in ee76646 that causes a hero riding a steed which becomes unsaddled to continue riding without interruption, rather than falling from the steed (as was the previous behavior).
Also would prevent a hero with levitation or flying (from a source other than their flying steed, e.g. polymorph into a flying monster, ring of levitation...) from taking fall damage when their steed becomes unsaddled or bucks them off.","Would fix a bug/regression introduced in ee76646 that causes a hero riding a steed which becomes unsaddled to continue riding without interruption, rather than falling from the steed (as was the previous behavior).
Also would prevent a hero with levitation or flying (from a source other than their flying steed, e.g. polymorph into a flying monster, ring of levitation...) from taking fall damage when their steed becomes unsaddled or bucks them off.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,471,2021-03-07T17:14:54Z,2021-03-17T06:37:18Z,2021-05-22T23:39:27Z,CLOSED,False,3,0,1,https://github.com/copperwater,Fix: segfault after in_lua flag was left set,1,[],https://github.com/NetHack/NetHack/pull/471,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/471,"If the in_lua flag is set during normal gameplay, and the player sets
some invalid option, the config_erradd function goes into a different
block that assumes *config_error_data is valid, which is not true in
playerspace.
The proper solution is to avoid leaving is_lua set, and the place it
should be unset and currently isn't is at the end of makerooms() after
loading themed rooms for a new branch. (Reproducing this required
setting !legacy, since otherwise the com_pager call for the legacy text
will set and unset is_lua.)","If the in_lua flag is set during normal gameplay, and the player sets
some invalid option, the config_erradd function goes into a different
block that assumes *config_error_data is valid, which is not true in
playerspace.
The proper solution is to avoid leaving is_lua set, and the place it
should be unset and currently isn't is at the end of makerooms() after
loading themed rooms for a new branch. (Reproducing this required
setting !legacy, since otherwise the com_pager call for the legacy text
will set and unset is_lua.)",True,{'THUMBS_UP': ['https://github.com/entrez']}
NetHack/NetHack,https://github.com/NetHack/NetHack,472,2021-03-08T06:26:25Z,2021-03-17T13:37:19Z,2021-03-27T07:18:37Z,CLOSED,False,32,17,1,https://github.com/jonchang,Encyclopedia fixes,2,[],https://github.com/NetHack/NetHack/pull/472,https://github.com/jonchang,1,https://github.com/NetHack/NetHack/pull/472,"While going through the NetHack encyclopedia, I've gone through and fixed some consistency issues with cited sources' authors. I've also added a few entries where it makes sense (c-ration -> k-ration, shield of reflection -> perseus, ochre jelly, tin and magic whistle -> whistle, rubber hose -> kops, club, flail, etc -> weapon, most armors -> armor).
Note there are still a few monsters and items that don't have encyclopedia entries associated with them that I couldn't find a good match for:

stalker
all gauntlets
all helms
all shields
all worthless glass
some foods (pancake, eucalyptus leaf)
some gems (amethyst, aquamarine, black opal, fluorite, garnet, opal)
some tools (bell, credit card, lenses, lock pick, stethoscope, skeleton key)
T-shirt
alchemy smock
corpse
ice box
iron shoes
loadstone
novel","While going through the NetHack encyclopedia, I've gone through and fixed some consistency issues with cited sources' authors. I've also added a few entries where it makes sense (c-ration -> k-ration, shield of reflection -> perseus, ochre jelly, tin and magic whistle -> whistle, rubber hose -> kops, club, flail, etc -> weapon, most armors -> armor).
Note there are still a few monsters and items that don't have encyclopedia entries associated with them that I couldn't find a good match for:

stalker
all gauntlets
all helms
all shields
all worthless glass
some foods (pancake, eucalyptus leaf)
some gems (amethyst, aquamarine, black opal, fluorite, garnet, opal)
some tools (bell, credit card, lenses, lock pick, stethoscope, skeleton key)
T-shirt
alchemy smock
corpse
ice box
iron shoes
loadstone
novel",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,478,2021-03-30T04:32:15Z,2021-04-02T02:37:18Z,2021-05-22T23:41:13Z,CLOSED,False,4,0,1,https://github.com/copperwater,Make homemade tins never give more nutrition than the corpse does,1,[],https://github.com/NetHack/NetHack/pull/478,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/478,"This fixes an oddity in how tins work - homemade tins always gave 50
nutrition points, so if you tinned a bunch of low-nutrition monsters
such as killer bees (5 nutrition points per corpse), the resulting tins
all suddenly give 50 nutrition. Where did the extra nutrition come from?
If the corpse provided >= 50 nutrition, a homemade tin of it still gives
50. Other tins still give their regular amounts of nutrition (a tin of
pureed killer bee is not necessarily made from just one killer bee
corpse, so there's no reason why the corpse nutrition of 5 has to
constrain that).","This fixes an oddity in how tins work - homemade tins always gave 50
nutrition points, so if you tinned a bunch of low-nutrition monsters
such as killer bees (5 nutrition points per corpse), the resulting tins
all suddenly give 50 nutrition. Where did the extra nutrition come from?
If the corpse provided >= 50 nutrition, a homemade tin of it still gives
50. Other tins still give their regular amounts of nutrition (a tin of
pureed killer bee is not necessarily made from just one killer bee
corpse, so there's no reason why the corpse nutrition of 5 has to
constrain that).",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,479,2021-03-30T23:41:00Z,2021-04-01T23:37:18Z,2021-04-01T23:48:27Z,CLOSED,False,13,7,2,https://github.com/entrez,"Additional checks to prevent ""impossible"" statues",2,[],https://github.com/NetHack/NetHack/pull/479,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/479,"Although there is already a test to ensure statues on the Medusa level (which are supposed to be erstwhile victims of Medusa) do not represent stoning-resistant monsters, no such test exists to prevent poly_when_stoned creatures such as golems from showing up as Medusa statues.  This patch would add a test to ensure golem statues don't appear on Medusa's level.
It would also apply similar checks to ensure the statues created in a cockatrice nest are not stoning-resistant or poly_when_stoned mons.  Normally these statues represent players from the high score list, but when the high score list is empty, cockatrice nests will be filled with random monster statues which currently may be ""impossible"" (stoning-resistant, etc) stoning victims.","Although there is already a test to ensure statues on the Medusa level (which are supposed to be erstwhile victims of Medusa) do not represent stoning-resistant monsters, no such test exists to prevent poly_when_stoned creatures such as golems from showing up as Medusa statues.  This patch would add a test to ensure golem statues don't appear on Medusa's level.
It would also apply similar checks to ensure the statues created in a cockatrice nest are not stoning-resistant or poly_when_stoned mons.  Normally these statues represent players from the high score list, but when the high score list is empty, cockatrice nests will be filled with random monster statues which currently may be ""impossible"" (stoning-resistant, etc) stoning victims.",True,{'THUMBS_UP': ['https://github.com/copperwater']}
NetHack/NetHack,https://github.com/NetHack/NetHack,485,2021-04-02T00:25:03Z,2021-04-05T07:37:17Z,2021-04-06T19:52:45Z,CLOSED,False,3,4,2,https://github.com/entrez,Fix some issues with genetic engineer attacks,2,[],https://github.com/NetHack/NetHack/pull/485,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/485,"Genetic engineer attacks don't produce a ""the genetic engineer hits!"" message; when not magic-resistant this isn't such a big deal, because there is typically other feedback (""you are subjected to a freakish metamorphosis""), but when magic-resistant the attack does damage without any feedback at all, meaning the hero's health drops each turn without any explanation or warning.
Additionally, a sparkle shield effect is supposed to be shown when magic resistance protects a monster from the polymorph attack, but was not showing up correctly when the hero was targeted due to the use of g.youmonst.mx and g.youmonst.my when calling shieldeff instead of u.ux and u.uy.
This is a small patch to fix both these issues.","Genetic engineer attacks don't produce a ""the genetic engineer hits!"" message; when not magic-resistant this isn't such a big deal, because there is typically other feedback (""you are subjected to a freakish metamorphosis""), but when magic-resistant the attack does damage without any feedback at all, meaning the hero's health drops each turn without any explanation or warning.
Additionally, a sparkle shield effect is supposed to be shown when magic resistance protects a monster from the polymorph attack, but was not showing up correctly when the hero was targeted due to the use of g.youmonst.mx and g.youmonst.my when calling shieldeff instead of u.ux and u.uy.
This is a small patch to fix both these issues.",True,{'THUMBS_UP': ['https://github.com/copperwater']}
NetHack/NetHack,https://github.com/NetHack/NetHack,487,2021-04-02T15:14:15Z,2021-04-05T04:37:19Z,2021-04-06T19:52:47Z,CLOSED,False,6,5,1,https://github.com/entrez,Fix travel to diagonally adjacent square,1,[],https://github.com/NetHack/NetHack/pull/487,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/487,"When traveling to a square that is adjacent but cannot be moved to in a
single move, for example in this situation, where * is the travel
destination and the hero is carrying too much to squeeze between the
diagonal:
..*|.
..|@.
.....

The hero would move a single square and then stop:
..*|.
..|..
..@..

This is because when testing whether an adjacent square can be moved to
in a single move (in which case multimove travel is not necessary),
g.multi was being reset to 0 before confirming that the destination was
accessible.  Instead, set g.multi to 0 only once the adjacent target is
confirmed to be accessible in a single move.
A video of the issue:

  
    
    

    travel_bug.mp4","When traveling to a square that is adjacent but cannot be moved to in a
single move, for example in this situation, where * is the travel
destination and the hero is carrying too much to squeeze between the
diagonal:
..*|.
..|@.
.....

The hero would move a single square and then stop:
..*|.
..|..
..@..

This is because when testing whether an adjacent square can be moved to
in a single move (in which case multimove travel is not necessary),
g.multi was being reset to 0 before confirming that the destination was
accessible.  Instead, set g.multi to 0 only once the adjacent target is
confirmed to be accessible in a single move.
A video of the issue:

  
    
    

    travel_bug.mp4",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,488,2021-04-06T21:18:51Z,2021-04-19T13:02:46Z,2021-04-19T13:02:49Z,CLOSED,False,15,10,2,https://github.com/entrez,Fix some minor apply getobj prompt regressions,1,[],https://github.com/NetHack/NetHack/pull/488,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/488,"Before the getobj refactor (0b63859) it was possible to identify oil by
applying an unidentified potion and seeing whether you were able to
light it successfully; because the apply_ok callback in the refactor
returned GETOBJ_EXCLUDE by default, it became impossible to apply any
potions other than a formally identified potion of oil.  Additionally,
it became impossible to 'apply' an flint stone or luckstone once it or
a touchstone had been identified.
Another change is that prior to the refactor, attempting to apply an
inappropriate object would produce the message ""Sorry, I don't know how
to use that"" -- because of the GETOBJ_EXCLUDE default in apply_ok, this
changed to ""That is a silly thing to use or apply.""
This restores the previous behavior when attempting to apply an
unidentified potion, as well as in the other cases (which are admittedly
not as important or relevant to a normal player).  It also fixes a small
error in a comment explaining the purpose of GETOBJ_EXCLUDE_SELECTABLE.","Before the getobj refactor (0b63859) it was possible to identify oil by
applying an unidentified potion and seeing whether you were able to
light it successfully; because the apply_ok callback in the refactor
returned GETOBJ_EXCLUDE by default, it became impossible to apply any
potions other than a formally identified potion of oil.  Additionally,
it became impossible to 'apply' an flint stone or luckstone once it or
a touchstone had been identified.
Another change is that prior to the refactor, attempting to apply an
inappropriate object would produce the message ""Sorry, I don't know how
to use that"" -- because of the GETOBJ_EXCLUDE default in apply_ok, this
changed to ""That is a silly thing to use or apply.""
This restores the previous behavior when attempting to apply an
unidentified potion, as well as in the other cases (which are admittedly
not as important or relevant to a normal player).  It also fixes a small
error in a comment explaining the purpose of GETOBJ_EXCLUDE_SELECTABLE.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,489,2021-04-11T18:39:16Z,2021-04-18T04:37:19Z,2021-05-22T23:40:25Z,CLOSED,False,1,1,1,https://github.com/copperwater,"Fix: lantern-specific message called it a ""lamp""",1,[],https://github.com/NetHack/NetHack/pull/489,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/489,"Running out of power only happens and is only printed for lanterns. Call
it a lantern in the message.","Running out of power only happens and is only printed for lanterns. Call
it a lantern in the message.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,490,2021-04-14T17:00:25Z,2021-04-19T01:37:18Z,2021-04-19T02:19:32Z,CLOSED,False,17,5,1,https://github.com/entrez,Improve feedback for unseen boulder traps,1,[],https://github.com/NetHack/NetHack/pull/490,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/490,"When an unseen monster triggers a boulder trap, the only feedback given is ""you hear rumbling in the distance.""  This doesn't depend on whether the boulder itself is seen, or its distance from the hero, but only on whether the monster that triggered the trap can be seen.  Because a boulder can block line of sight, this means that a character standing immediately behind a boulder when the trap is triggered gets the ""you hear rumbling in the distance"" feedback.  This ""rumbling in the distance"" pline is also printed if a character sees the trap triggered by an invisible monster that is sensed via ESP/monster detection.
This commit would improve this feedback so that actually seeing the boulder launched would take precedence over ""hearing rumbling"", and so that the rumbling of a totally unseen boulder trap could be described as ""nearby"" or ""in the distance"" depending on how close to the hero the boulder is.  It would also change the criteria for monsters being 'seen', so that an invisible monster that is detected by other means and triggers the trap on a square that is visible to the hero would be considered 'seen'.
Also would adjust the ""Click! The foo triggers something."" message so that the ""Click!"" is only printed when the hero is not deaf.
Examples of some questionable situations where ""rumbling in the distance"" is currently used:
When the boulder itself blocks line of sight to the trap:

  
    
    

    boulder1.mp4
    
  

  

  


When a monster is invisible but detected by some other means:

  
    
    

    boulder2.mp4","When an unseen monster triggers a boulder trap, the only feedback given is ""you hear rumbling in the distance.""  This doesn't depend on whether the boulder itself is seen, or its distance from the hero, but only on whether the monster that triggered the trap can be seen.  Because a boulder can block line of sight, this means that a character standing immediately behind a boulder when the trap is triggered gets the ""you hear rumbling in the distance"" feedback.  This ""rumbling in the distance"" pline is also printed if a character sees the trap triggered by an invisible monster that is sensed via ESP/monster detection.
This commit would improve this feedback so that actually seeing the boulder launched would take precedence over ""hearing rumbling"", and so that the rumbling of a totally unseen boulder trap could be described as ""nearby"" or ""in the distance"" depending on how close to the hero the boulder is.  It would also change the criteria for monsters being 'seen', so that an invisible monster that is detected by other means and triggers the trap on a square that is visible to the hero would be considered 'seen'.
Also would adjust the ""Click! The foo triggers something."" message so that the ""Click!"" is only printed when the hero is not deaf.
Examples of some questionable situations where ""rumbling in the distance"" is currently used:
When the boulder itself blocks line of sight to the trap:

  
    
    

    boulder1.mp4
    
  

  

  


When a monster is invisible but detected by some other means:

  
    
    

    boulder2.mp4",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,491,2021-04-15T13:35:19Z,2021-04-18T04:37:19Z,2021-04-18T22:26:05Z,CLOSED,False,3,2,1,https://github.com/entrez,Fix: some converted altars did not change color,1,[],https://github.com/NetHack/NetHack/pull/491,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/491,"A comment in display.c said it was not necessary to check for the color of a glyph changing, because typically the color won't change unless the glyph itself changes as well.  This is true in most cases.
However, there is an exception to the rule: when the hero is invisible and converts an unaligned altar (which is colored red), the glyph itself doesn't change even though its color does.  When this happened, the color wouldn't be updated until the symbol was redrawn for some other reason.  This problem is even more common in versions of NetHack with a patch applied to color altars according to their alignment (this is the case on several public servers), where it could happen for any altar conversion by an invisible hero.
Check whether the color of a glyph has changed in show_glyph even if the glyph itself hasn't been updated, so that an (unaligned) altar converted by an invisible hero will change color appropriately, in line with the ""the altar glows white"", etc, altar conversion messages.","A comment in display.c said it was not necessary to check for the color of a glyph changing, because typically the color won't change unless the glyph itself changes as well.  This is true in most cases.
However, there is an exception to the rule: when the hero is invisible and converts an unaligned altar (which is colored red), the glyph itself doesn't change even though its color does.  When this happened, the color wouldn't be updated until the symbol was redrawn for some other reason.  This problem is even more common in versions of NetHack with a patch applied to color altars according to their alignment (this is the case on several public servers), where it could happen for any altar conversion by an invisible hero.
Check whether the color of a glyph has changed in show_glyph even if the glyph itself hasn't been updated, so that an (unaligned) altar converted by an invisible hero will change color appropriately, in line with the ""the altar glows white"", etc, altar conversion messages.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,492,2021-04-18T10:51:11Z,2021-04-19T01:37:18Z,2021-05-22T23:34:30Z,CLOSED,False,4,1,1,https://github.com/copperwater,Fix: use correct behavior for des.line() with one coordinate,1,[],https://github.com/NetHack/NetHack/pull/492,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/492,"One would expect that a line from e.g. (10,10) to (10,10) would contain
only that one point, but I discovered that lspo_line doesn't know what
to do with that input and slices a big diagonal line across the whole
map in both directions from that point. This corrects the behavior to
stop after selecting the one point.
This problem is latent in vanilla NetHack because des.line is never
used.","One would expect that a line from e.g. (10,10) to (10,10) would contain
only that one point, but I discovered that lspo_line doesn't know what
to do with that input and slices a big diagonal line across the whole
map in both directions from that point. This corrects the behavior to
stop after selecting the one point.
This problem is latent in vanilla NetHack because des.line is never
used.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,494,2021-04-19T01:52:03Z,2021-10-16T14:56:28Z,2021-10-16T14:56:28Z,CLOSED,False,1,1,1,https://github.com/copperwater,"Fix: encyclopedia typo of ""Galadrim""",1,[],https://github.com/NetHack/NetHack/pull/494,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/494,"Should be ""Galadhrim"", with an h.","Should be ""Galadhrim"", with an h.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,494,2021-04-19T01:52:03Z,2021-10-16T14:56:28Z,2021-10-16T14:56:28Z,CLOSED,False,1,1,1,https://github.com/copperwater,"Fix: encyclopedia typo of ""Galadrim""",1,[],https://github.com/NetHack/NetHack/pull/494,https://github.com/pat-rankin,2,https://github.com/NetHack/NetHack/pull/494#issuecomment-822898826,"Should be ""Galadhrim"", with an h.","I didn't add that quote but my copy of the Lord of the Rings spells it the way data.base already has it:  ""Galadrim"" (without 'h'), both in the ""Farewell to Lorien"" chapter in Volume I/Book II and in the index at the end of Volume III after Book VI and various appendices.
It's a boxed set of oversized softcovers from Ballantine Books in the mid 1970s, so nowhere close to the original but definitely not some cheap knockoff.
The index of names in the Silmarillion doesn't have that word at all.  The Tolkien Companion by J.E.A. Tyler has it with the 'h', but that's hardly canonical.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,494,2021-04-19T01:52:03Z,2021-10-16T14:56:28Z,2021-10-16T14:56:28Z,CLOSED,False,1,1,1,https://github.com/copperwater,"Fix: encyclopedia typo of ""Galadrim""",1,[],https://github.com/NetHack/NetHack/pull/494,https://github.com/gebulmer,3,https://github.com/NetHack/NetHack/pull/494#issuecomment-823251303,"Should be ""Galadhrim"", with an h.","According to http://tolkiengateway.net/wiki/Galadhrim#Etymology

In the first edition of The Lord of the Rings, Galadhrim was spelt Galadrim. In later editions, this was emended to the former, which Tolkien had decided was the correct Sindarin form.[10]

With a reference to The Lord of the Rings: A Reader's Companion, p. 305
Do you have a copy of that to check the reference @pat-rankin ?",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,494,2021-04-19T01:52:03Z,2021-10-16T14:56:28Z,2021-10-16T14:56:28Z,CLOSED,False,1,1,1,https://github.com/copperwater,"Fix: encyclopedia typo of ""Galadrim""",1,[],https://github.com/NetHack/NetHack/pull/494,https://github.com/nhmall,4,https://github.com/NetHack/NetHack/pull/494#issuecomment-944927544,"Should be ""Galadhrim"", with an h.","Since the spelling currently present in the source tree matches the spelling in at least one edition of the book, let the current spelling stand for now.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,496,2021-04-21T16:07:46Z,2021-04-29T00:37:18Z,2021-04-29T00:37:18Z,CLOSED,False,1,1,1,https://github.com/kscheirer,fix typo in insight.c,1,[],https://github.com/NetHack/NetHack/pull/496,https://github.com/kscheirer,1,https://github.com/NetHack/NetHack/pull/496,"typo in createure
Fixes #495","typo in createure
Fixes #495",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,497,2021-04-30T12:47:44Z,2021-05-02T06:37:19Z,2021-05-02T11:09:20Z,CLOSED,False,5,0,1,https://github.com/entrez,Fix: impossible from eating zombifying corpse,1,[],https://github.com/NetHack/NetHack/pull/497,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/497,"When eating a monster that then was revived as a zombie as you were chowing down, the total possible nutrition would be changed based on the new corpsenm, but oeaten stayed the same.  As a result, if you hadn't eaten much of the corpse when the revival happened and the zombie form had a lower nutritional value than the original form (as is the case for a frost giant turning into a giant zombie, for example), this could result in oeaten being higher than the total possible nutrition, triggering an impossible in eaten_stat().  Set the corpse's oeaten to be proportional to the new total possible nutrition to fix this.","When eating a monster that then was revived as a zombie as you were chowing down, the total possible nutrition would be changed based on the new corpsenm, but oeaten stayed the same.  As a result, if you hadn't eaten much of the corpse when the revival happened and the zombie form had a lower nutritional value than the original form (as is the case for a frost giant turning into a giant zombie, for example), this could result in oeaten being higher than the total possible nutrition, triggering an impossible in eaten_stat().  Set the corpse's oeaten to be proportional to the new total possible nutrition to fix this.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,498,2021-04-30T15:13:45Z,2021-05-04T01:37:19Z,2021-05-04T12:51:09Z,CLOSED,False,2,1,1,https://github.com/entrez,"Fix: ""it looks very angry"" on entering demon lair",1,[],https://github.com/NetHack/NetHack/pull/498,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/498,"Getting close to certain ""boss"" demons while wielding Excalibur or Demonbane angers them immediately, but the message ""%s looks very angry"" was printed regardless of whether you could actually see the demon in question -- even if the hero was blind.","Getting close to certain ""boss"" demons while wielding Excalibur or Demonbane angers them immediately, but the message ""%s looks very angry"" was printed regardless of whether you could actually see the demon in question -- even if the hero was blind.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,501,2021-05-05T22:10:41Z,2021-05-06T16:16:49Z,2021-05-06T16:19:46Z,CLOSED,False,2,2,1,https://github.com/entrez,Fix: uninitialized buffer in mhitm theft feedback,1,[],https://github.com/NetHack/NetHack/pull/501,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/501,"If a monster with a theft attack (nymph or leprechaun) stole something from an invisible monster (e.g. while under the influence of conflict), and the attacking monster was not itself invisible, the monster name buffer used when printing the ""<foo> suddenly disappears!"" message would be used while still uninitialized.  The attacking monster's name was only copied into the buffer if the defending monster was visible, but would be used regardless to print the pline if the attacking monster was visible and teleported away successfully after the attack.","If a monster with a theft attack (nymph or leprechaun) stole something from an invisible monster (e.g. while under the influence of conflict), and the attacking monster was not itself invisible, the monster name buffer used when printing the ""<foo> suddenly disappears!"" message would be used while still uninitialized.  The attacking monster's name was only copied into the buffer if the defending monster was visible, but would be used regardless to print the pline if the attacking monster was visible and teleported away successfully after the attack.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,501,2021-05-05T22:10:41Z,2021-05-06T16:16:49Z,2021-05-06T16:19:46Z,CLOSED,False,2,2,1,https://github.com/entrez,Fix: uninitialized buffer in mhitm theft feedback,1,[],https://github.com/NetHack/NetHack/pull/501,https://github.com/paxed,2,https://github.com/NetHack/NetHack/pull/501#issuecomment-833653743,"If a monster with a theft attack (nymph or leprechaun) stole something from an invisible monster (e.g. while under the influence of conflict), and the attacking monster was not itself invisible, the monster name buffer used when printing the ""<foo> suddenly disappears!"" message would be used while still uninitialized.  The attacking monster's name was only copied into the buffer if the defending monster was visible, but would be used regardless to print the pline if the attacking monster was visible and teleported away successfully after the attack.",Committed,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,502,2021-05-05T22:52:25Z,2021-05-06T15:00:57Z,2021-05-06T15:03:29Z,CLOSED,False,1,1,1,https://github.com/entrez,Fix: nymph theft vs monster,1,[],https://github.com/NetHack/NetHack/pull/502,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/502,"Nymphs' item theft attack against other monsters was broken in 1696019,
when a break used to select a particular item in the target monster's
inventory was changed to an early return.","Nymphs' item theft attack against other monsters was broken in 1696019,
when a break used to select a particular item in the target monster's
inventory was changed to an early return.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,502,2021-05-05T22:52:25Z,2021-05-06T15:00:57Z,2021-05-06T15:03:29Z,CLOSED,False,1,1,1,https://github.com/entrez,Fix: nymph theft vs monster,1,[],https://github.com/NetHack/NetHack/pull/502,https://github.com/paxed,2,https://github.com/NetHack/NetHack/pull/502#issuecomment-833593602,"Nymphs' item theft attack against other monsters was broken in 1696019,
when a break used to select a particular item in the target monster's
inventory was changed to an early return.",Committed.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,504,2021-05-06T22:25:56Z,2021-05-07T05:37:18Z,2021-05-07T13:17:04Z,CLOSED,False,2,0,1,https://github.com/entrez,Fix: 'partly eaten' 0 nutrition item,1,[],https://github.com/NetHack/NetHack/pull/504,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/504,"This was noticed by @RojjaCebolla in SpliceHack, but the problem applies to NetHack too.
Wishing for a partly eaten wraith corpse or tin caused an impossible, because its nutrition is 0 but its oeaten was being set to 1 by consume_oeaten in order to make it ""partly eaten"", causing an impossible in eaten_stat when attempting to calculate its weight.  Prevent consume_oeaten from modifying an object's oeaten value when its total possible nutrition is 0 to begin with.
I think that the only way for this to happen in-game is to wish for these items, so preventing the call to consume_oeaten in the first place would probably be enough to fix this, but adding this test to
consume_oeaten should guard against it in general.","This was noticed by @RojjaCebolla in SpliceHack, but the problem applies to NetHack too.
Wishing for a partly eaten wraith corpse or tin caused an impossible, because its nutrition is 0 but its oeaten was being set to 1 by consume_oeaten in order to make it ""partly eaten"", causing an impossible in eaten_stat when attempting to calculate its weight.  Prevent consume_oeaten from modifying an object's oeaten value when its total possible nutrition is 0 to begin with.
I think that the only way for this to happen in-game is to wish for these items, so preventing the call to consume_oeaten in the first place would probably be enough to fix this, but adding this test to
consume_oeaten should guard against it in general.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,505,2021-05-07T14:14:44Z,2021-05-07T23:37:18Z,2021-05-07T23:39:57Z,CLOSED,False,3,0,1,https://github.com/entrez,Fix: deliberate revival of cancelled monster,1,[],https://github.com/NetHack/NetHack/pull/505,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/505,"mkcorpstat(mkobj.c) adds a norevive flag to all cancelled non-rider
monsters in order to prevent spontaneous resurrection by monsters with a
revive timer (trolls).  This shouldn't be a problem because norevive is
supposed to only block timed revival, not explicit use of undead
turning, but this rule was only applied to certain scenarios (zapping
undead turning at a monster carrying a corpse in its inventory, for
example).
The more typical use of undead turning -- zapping a corpse on the ground
to revive it -- was not clearing the norevive flag before calling
revive(zap.c), and so cancelled monsters could not be revived in this
way.  Ignore norevive for explicit undead turning of a corpse on the
floor.","mkcorpstat(mkobj.c) adds a norevive flag to all cancelled non-rider
monsters in order to prevent spontaneous resurrection by monsters with a
revive timer (trolls).  This shouldn't be a problem because norevive is
supposed to only block timed revival, not explicit use of undead
turning, but this rule was only applied to certain scenarios (zapping
undead turning at a monster carrying a corpse in its inventory, for
example).
The more typical use of undead turning -- zapping a corpse on the ground
to revive it -- was not clearing the norevive flag before calling
revive(zap.c), and so cancelled monsters could not be revived in this
way.  Ignore norevive for explicit undead turning of a corpse on the
floor.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,513,2021-05-17T11:45:51Z,2021-05-19T05:37:19Z,2021-05-19T05:37:19Z,CLOSED,False,6,7,1,https://github.com/copperwater,Give different messages for flipping through a novel,1,[],https://github.com/NetHack/NetHack/pull/513,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/513,"Current behavior is when you flip through a novel, you get the standard
messages: ""You flip through the pages of the spellbook. The ink in this
spellbook is fresh."" But a novel is not a spellbook, and its ink doesn't
wear out with repeated reading.
This alters the ""flip"" message to refer to it as just a ""book"", and adds
a second novel-specific message. Attempting to flip through a novel
while hallucinating will give the same message as with regular
spellbooks.
There is also a possible minor bug I noticed here: flipping through the
Book of the Dead while blind and deaf produces ""You sense the pages glow
faintly red"", which seems wrong.","Current behavior is when you flip through a novel, you get the standard
messages: ""You flip through the pages of the spellbook. The ink in this
spellbook is fresh."" But a novel is not a spellbook, and its ink doesn't
wear out with repeated reading.
This alters the ""flip"" message to refer to it as just a ""book"", and adds
a second novel-specific message. Attempting to flip through a novel
while hallucinating will give the same message as with regular
spellbooks.
There is also a possible minor bug I noticed here: flipping through the
Book of the Dead while blind and deaf produces ""You sense the pages glow
faintly red"", which seems wrong.",True,{'THUMBS_UP': ['https://github.com/entrez']}
NetHack/NetHack,https://github.com/NetHack/NetHack,519,2021-05-25T03:53:50Z,2021-07-16T03:37:21Z,2021-07-16T03:37:21Z,CLOSED,False,16,0,1,https://github.com/NullCGT,Additional vomit effects.,3,[],https://github.com/NetHack/NetHack/pull/519,https://github.com/NullCGT,1,https://github.com/NetHack/NetHack/pull/519,"As @davidssmith mentioned in Issue #510 , vomiting on an altar currently has no effect. Given that the simple act of kicking or sitting on an altar provokes the direct intervention and wrath of a deity, this seems like an oversight. Of course, if we're adding some internal consistency to vomit, we might as well go all the way. This patch makes the following changes:

Vomiting on an altar provokes the wrath of a deity.
If the player is an acidic monster, vomiting on ice will cause the ice to melt, since they have very strong stomach acid (strong enough to reverse stoning).
If the player is a monster with an acidic breath weapon (i.e. a yellow dragon) they are treated as if they have used their breath weapon on themself.

This is, quite possibly, the worst thing I have ever written. I'm going to bed.","As @davidssmith mentioned in Issue #510 , vomiting on an altar currently has no effect. Given that the simple act of kicking or sitting on an altar provokes the direct intervention and wrath of a deity, this seems like an oversight. Of course, if we're adding some internal consistency to vomit, we might as well go all the way. This patch makes the following changes:

Vomiting on an altar provokes the wrath of a deity.
If the player is an acidic monster, vomiting on ice will cause the ice to melt, since they have very strong stomach acid (strong enough to reverse stoning).
If the player is a monster with an acidic breath weapon (i.e. a yellow dragon) they are treated as if they have used their breath weapon on themself.

This is, quite possibly, the worst thing I have ever written. I'm going to bed.",True,"{'THUMBS_UP': ['https://github.com/davidssmith', 'https://github.com/eli-darkly', 'https://github.com/yozlet', 'https://github.com/stenno', 'https://github.com/Henry-Hart'], 'HEART': ['https://github.com/actual-nh']}"
NetHack/NetHack,https://github.com/NetHack/NetHack,519,2021-05-25T03:53:50Z,2021-07-16T03:37:21Z,2021-07-16T03:37:21Z,CLOSED,False,16,0,1,https://github.com/NullCGT,Additional vomit effects.,3,[],https://github.com/NetHack/NetHack/pull/519,https://github.com/davidssmith,2,https://github.com/NetHack/NetHack/pull/519#issuecomment-847884367,"As @davidssmith mentioned in Issue #510 , vomiting on an altar currently has no effect. Given that the simple act of kicking or sitting on an altar provokes the direct intervention and wrath of a deity, this seems like an oversight. Of course, if we're adding some internal consistency to vomit, we might as well go all the way. This patch makes the following changes:

Vomiting on an altar provokes the wrath of a deity.
If the player is an acidic monster, vomiting on ice will cause the ice to melt, since they have very strong stomach acid (strong enough to reverse stoning).
If the player is a monster with an acidic breath weapon (i.e. a yellow dragon) they are treated as if they have used their breath weapon on themself.

This is, quite possibly, the worst thing I have ever written. I'm going to bed.",This is awesome. I can't wait to see the ensuing hilarious YASDs.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,521,2021-05-28T01:19:13Z,2021-06-02T04:37:18Z,2021-06-02T04:37:18Z,CLOSED,False,3,3,1,https://github.com/actual-nh,"Correct quest guardian, Valkyrie PM alignments",1,[],https://github.com/NetHack/NetHack/pull/521,https://github.com/actual-nh,1,https://github.com/NetHack/NetHack/pull/521,"Correct to neutral the alignments for Attendants (who can grow up into neutral Healer player monsters), Warriors (who can grow up into Valkyrie player monsters), and Valkyrie player monsters. The first is the most egregious problem; the second and third put them into correspondence with the Valkyrie role.","Correct to neutral the alignments for Attendants (who can grow up into neutral Healer player monsters), Warriors (who can grow up into Valkyrie player monsters), and Valkyrie player monsters. The first is the most egregious problem; the second and third put them into correspondence with the Valkyrie role.",True,"{'THUMBS_UP': ['https://github.com/copperwater', 'https://github.com/entrez']}"
NetHack/NetHack,https://github.com/NetHack/NetHack,521,2021-05-28T01:19:13Z,2021-06-02T04:37:18Z,2021-06-02T04:37:18Z,CLOSED,False,3,3,1,https://github.com/actual-nh,"Correct quest guardian, Valkyrie PM alignments",1,[],https://github.com/NetHack/NetHack/pull/521,https://github.com/copperwater,2,https://github.com/NetHack/NetHack/pull/521#issuecomment-850331198,"Correct to neutral the alignments for Attendants (who can grow up into neutral Healer player monsters), Warriors (who can grow up into Valkyrie player monsters), and Valkyrie player monsters. The first is the most egregious problem; the second and third put them into correspondence with the Valkyrie role.","Agree with this, currently the valkyrie monster and guardians are chaotic, which makes no sense.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,523,2021-05-28T21:07:59Z,2021-05-30T00:37:18Z,2021-05-30T00:37:18Z,CLOSED,False,1,1,1,https://github.com/copperwater,Fix: Baalzebub's level can randomly be lit up,1,[],https://github.com/NetHack/NetHack/pull/523,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/523,"This appears to be because unlike most other demon lairs, Baalzebub
uses a solidfill level_init, without specifying the lit state. This
means that the lit state is randomized, allowing the maze to be fully
lit, which is strange in Gehennom where usually they are dark. Force the
lit state to dark.","This appears to be because unlike most other demon lairs, Baalzebub
uses a solidfill level_init, without specifying the lit state. This
means that the lit state is randomized, allowing the maze to be fully
lit, which is strange in Gehennom where usually they are dark. Force the
lit state to dark.",True,"{'THUMBS_UP': ['https://github.com/entrez', 'https://github.com/actual-nh']}"
NetHack/NetHack,https://github.com/NetHack/NetHack,526,2021-06-04T18:17:11Z,2021-06-06T02:37:18Z,2021-06-06T17:36:11Z,CLOSED,False,7,6,1,https://github.com/entrez,Fix: menucolor help message showing at wrong time,1,[],https://github.com/NetHack/NetHack/pull/526,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/526,"Following 28b7a70, the help message that is intended to appear when you
add a menu color rule without having the 'menucolors' option enabled was
showing up even if 'menucolors' was on, as long as 'perm_invent' was not
also enabled.","Following 28b7a70, the help message that is intended to appear when you
add a menu color rule without having the 'menucolors' option enabled was
showing up even if 'menucolors' was on, as long as 'perm_invent' was not
also enabled.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,527,2021-06-04T20:54:27Z,2021-06-06T03:37:20Z,2021-06-06T17:35:59Z,CLOSED,False,2,1,1,https://github.com/entrez,"Fix: cursed levitation ""head bump"" effect",1,[],https://github.com/NetHack/NetHack/pull/527,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/527,"As of 6ec55a3, the condition leading to the ""go up the stairs"" effect of
a cursed potion of levitation was changed to check whether an up
staircase existed anywhere on the level, rather than checking whether
the hero was standing on the appropriate kind of staircase.  As a
result, quaffing a cursed potion of levitation on any level with an
upstairs would attempt to go up the stairs (leading to ""you can't go up
here"" with no further effects) rather than continuing on to the ""bump
your head on the ceiling"" case, etc.","As of 6ec55a3, the condition leading to the ""go up the stairs"" effect of
a cursed potion of levitation was changed to check whether an up
staircase existed anywhere on the level, rather than checking whether
the hero was standing on the appropriate kind of staircase.  As a
result, quaffing a cursed potion of levitation on any level with an
upstairs would attempt to go up the stairs (leading to ""you can't go up
here"" with no further effects) rather than continuing on to the ""bump
your head on the ceiling"" case, etc.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,529,2021-06-05T09:22:26Z,2021-06-28T15:45:54Z,2021-06-28T15:45:54Z,MERGED,True,1,0,1,https://github.com/reksar,Resolves missing dependency in NetHack.sln,1,[],https://github.com/NetHack/NetHack/pull/529,https://github.com/reksar,1,https://github.com/NetHack/NetHack/pull/529,"In short: the NetHack project now depends on tilemap.
When I ran
msbuild NetHack.sln /t:NetHack:rebuild /p:Configuration=Release;Platform=x64
I was getting the compilation error, because the tile.c was not found.","In short: the NetHack project now depends on tilemap.
When I ran
msbuild NetHack.sln /t:NetHack:rebuild /p:Configuration=Release;Platform=x64
I was getting the compilation error, because the tile.c was not found.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,540,2021-07-01T15:52:47Z,2021-07-11T06:37:23Z,2021-07-12T20:09:03Z,CLOSED,False,4,2,1,https://github.com/entrez,Don't autoquiver aklys that fails to return,1,[],https://github.com/NetHack/NetHack/pull/540,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/540,"Changes to the 'f' command in a71d318 have incentivized keeping an
empty quiver while wielding an aklys.  As a result, it's become more
likely that an aklys which fails to return will fall into the ""quiver
is empty"" case used to determine that a thrown weapon should be
automatically added to the quiver when picked up.
Instead of autoquivering an aklys whenever the quiver is empty,
autoquiver it only when the hero is already wielding another weapon.","Changes to the 'f' command in a71d318 have incentivized keeping an
empty quiver while wielding an aklys.  As a result, it's become more
likely that an aklys which fails to return will fall into the ""quiver
is empty"" case used to determine that a thrown weapon should be
automatically added to the quiver when picked up.
Instead of autoquivering an aklys whenever the quiver is empty,
autoquiver it only when the hero is already wielding another weapon.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,541,2021-07-01T18:13:24Z,2021-07-03T06:37:19Z,2021-07-12T20:08:51Z,CLOSED,False,1,1,1,https://github.com/entrez,Fix: itemized billing and perm_invent,1,[],https://github.com/NetHack/NetHack/pull/541,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/541,"When buying multiple items from a shop via itemized billing with
perm_invent enabled, paying for any single item would immediately
conceal the prices of all the remaining unpaid items in the inventory
pane, even those that the player declined to purchase.  In other words,
if holding three items from a shop, paying for one of them via itemized
billing would cause the other two items to be listed in the perminvent
pane as though they had already been paid for as well.
Deactivate iflags.suppress_price before the call to update_inventory in
dopayobj(shk.c) so that the inventory pane's item names accurately
reflect which items are still unpaid.","When buying multiple items from a shop via itemized billing with
perm_invent enabled, paying for any single item would immediately
conceal the prices of all the remaining unpaid items in the inventory
pane, even those that the player declined to purchase.  In other words,
if holding three items from a shop, paying for one of them via itemized
billing would cause the other two items to be listed in the perminvent
pane as though they had already been paid for as well.
Deactivate iflags.suppress_price before the call to update_inventory in
dopayobj(shk.c) so that the inventory pane's item names accurately
reflect which items are still unpaid.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,541,2021-07-01T18:13:24Z,2021-07-03T06:37:19Z,2021-07-12T20:08:51Z,CLOSED,False,1,1,1,https://github.com/entrez,Fix: itemized billing and perm_invent,1,[],https://github.com/NetHack/NetHack/pull/541,https://github.com/entrez,2,https://github.com/NetHack/NetHack/pull/541#issuecomment-872456632,"When buying multiple items from a shop via itemized billing with
perm_invent enabled, paying for any single item would immediately
conceal the prices of all the remaining unpaid items in the inventory
pane, even those that the player declined to purchase.  In other words,
if holding three items from a shop, paying for one of them via itemized
billing would cause the other two items to be listed in the perminvent
pane as though they had already been paid for as well.
Deactivate iflags.suppress_price before the call to update_inventory in
dopayobj(shk.c) so that the inventory pane's item names accurately
reflect which items are still unpaid.",This issue was reported in copperwater/xNetHack#49 but applies to NetHack as well.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,543,2021-07-03T05:50:33Z,,2022-01-27T17:22:59Z,OPEN,False,406,37,15,https://github.com/aoeixsz4,implement realtime/wallclock statusline timer,4,[],https://github.com/NetHack/NetHack/pull/543,https://github.com/aoeixsz4,1,https://github.com/NetHack/NetHack/pull/543,"this pr implements the ui clock developed by @bhaak in such a way that it can update independently of user input
for tty it uses pselect(), for curses they have their own timeout functionality
i am unsure about the portability of this, only tested on Ubuntu 20.04 with Linux kernel 5.8.0-59-generic","this pr implements the ui clock developed by @bhaak in such a way that it can update independently of user input
for tty it uses pselect(), for curses they have their own timeout functionality
i am unsure about the portability of this, only tested on Ubuntu 20.04 with Linux kernel 5.8.0-59-generic",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,544,2021-07-05T16:48:21Z,2021-07-09T18:37:18Z,2021-08-04T10:55:58Z,CLOSED,False,5,2,1,https://github.com/copperwater,Fire vortices shouldn't extinguish flaming objects in hero's inventory,1,[],https://github.com/NetHack/NetHack/pull/544,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/544,"Small change that just makes sense: if the thing whirling around you is
composed of fire that is burning you to a crisp, your candles, lamps,
and lit oil ought to stay burning instead of being snuffed out.","Small change that just makes sense: if the thing whirling around you is
composed of fire that is burning you to a crisp, your candles, lamps,
and lit oil ought to stay burning instead of being snuffed out.",True,"{'THUMBS_UP': ['https://github.com/ostrosablin', 'https://github.com/actual-nh', 'https://github.com/entrez']}"
NetHack/NetHack,https://github.com/NetHack/NetHack,544,2021-07-05T16:48:21Z,2021-07-09T18:37:18Z,2021-08-04T10:55:58Z,CLOSED,False,5,2,1,https://github.com/copperwater,Fire vortices shouldn't extinguish flaming objects in hero's inventory,1,[],https://github.com/NetHack/NetHack/pull/544,https://github.com/ostrosablin,2,https://github.com/NetHack/NetHack/pull/544#issuecomment-874308386,"Small change that just makes sense: if the thing whirling around you is
composed of fire that is burning you to a crisp, your candles, lamps,
and lit oil ought to stay burning instead of being snuffed out.",I suppose it should then light up burnable items even if they are snuffed out.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,544,2021-07-05T16:48:21Z,2021-07-09T18:37:18Z,2021-08-04T10:55:58Z,CLOSED,False,5,2,1,https://github.com/copperwater,Fire vortices shouldn't extinguish flaming objects in hero's inventory,1,[],https://github.com/NetHack/NetHack/pull/544,https://github.com/copperwater,3,https://github.com/NetHack/NetHack/pull/544#issuecomment-874316076,"Small change that just makes sense: if the thing whirling around you is
composed of fire that is burning you to a crisp, your candles, lamps,
and lit oil ought to stay burning instead of being snuffed out.","That already effectively happens; it's not automatic, but taking fire damage can light ignitables you're carrying.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,547,2021-07-10T08:50:45Z,2021-07-10T15:37:45Z,2021-07-10T15:37:45Z,MERGED,True,2,2,1,https://github.com/janne-hmp,Fixed two index out of bounds errors when eating standard eggs.,1,[],https://github.com/NetHack/NetHack/pull/547,https://github.com/janne-hmp,1,https://github.com/NetHack/NetHack/pull/547,"The corpsenm of standard eggs is -1, resulting in the index being out of bounds in mons array.","The corpsenm of standard eggs is -1, resulting in the index being out of bounds in mons array.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,548,2021-07-12T23:33:37Z,2021-07-15T06:37:19Z,2021-07-15T13:17:13Z,CLOSED,False,1,1,2,https://github.com/entrez,Fix: contradictory series of encumbrance messages,1,[],https://github.com/NetHack/NetHack/pull/548,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/548,"...when polymorphing into your base form and ""feeling like a new man"".
The use of encumber_msg in redist_attr, which is only called from
newman(polyself.c), was positioned after the hero's stats were
reconfigured but before their polyform was reset to their original race
(this may also restore attributes to the values they had before
modification by redist_attr).  Because the inventory weight cap is based
on the hero's CON and STR as well as current polyform, checking for
encumbrance immediately after changing hero attributes, then again after
resetting polyform, could cause sequences of messages like this:
You can barely move a handspan with this load!  You feel like a new
woman!  Your movements are now unencumbered.

Remove the initial encumber_msg from redist_attr and instead only call
it at the end of newman once all the steps involved in changing form are
complete.
A short video of the issue:

  
    
    

    polyself.mp4","...when polymorphing into your base form and ""feeling like a new man"".
The use of encumber_msg in redist_attr, which is only called from
newman(polyself.c), was positioned after the hero's stats were
reconfigured but before their polyform was reset to their original race
(this may also restore attributes to the values they had before
modification by redist_attr).  Because the inventory weight cap is based
on the hero's CON and STR as well as current polyform, checking for
encumbrance immediately after changing hero attributes, then again after
resetting polyform, could cause sequences of messages like this:
You can barely move a handspan with this load!  You feel like a new
woman!  Your movements are now unencumbered.

Remove the initial encumber_msg from redist_attr and instead only call
it at the end of newman once all the steps involved in changing form are
complete.
A short video of the issue:

  
    
    

    polyself.mp4",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,549,2021-07-14T11:57:22Z,2021-07-15T06:37:19Z,2021-07-15T13:17:05Z,CLOSED,False,3,0,1,https://github.com/entrez,Fix #423: Teleportation bhitpos issue,1,[],https://github.com/NetHack/NetHack/pull/549,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/549,"(m)bhit uses g.bhitpos to track the current tip of a beam.  When a
teleportation beam hits an object, flooreffects eventually gets called
on the object after it has been randomly relocated (via rloco) -- this
updates g.bhitpos to the object's new location.  g.bhitpos was not being
reset to the old 'tip of the beam' location before returning control to
(m)bhit, and as a result, a teleportation beam would continue from the
object's new location instead of the place where the object teleported
from.
This caused problems in the Astral Plane especially, where a
teleportation beam could hit one of the riders if the teleported object
landed in an unlucky spot (as described in #423), but it also
effectively limited teleportation to only hit a single object before
becoming completely unpredictable.
Reset g.bhitpos before returning control to (m)bhit.
Fixes #423
An earlier explanation of the issue that may or may not be clearer is here.","(m)bhit uses g.bhitpos to track the current tip of a beam.  When a
teleportation beam hits an object, flooreffects eventually gets called
on the object after it has been randomly relocated (via rloco) -- this
updates g.bhitpos to the object's new location.  g.bhitpos was not being
reset to the old 'tip of the beam' location before returning control to
(m)bhit, and as a result, a teleportation beam would continue from the
object's new location instead of the place where the object teleported
from.
This caused problems in the Astral Plane especially, where a
teleportation beam could hit one of the riders if the teleported object
landed in an unlucky spot (as described in #423), but it also
effectively limited teleportation to only hit a single object before
becoming completely unpredictable.
Reset g.bhitpos before returning control to (m)bhit.
Fixes #423
An earlier explanation of the issue that may or may not be clearer is here.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,551,2021-07-16T12:49:27Z,2022-05-28T01:37:20Z,2022-05-28T22:15:32Z,MERGED,True,35,14,1,https://github.com/entrez,Fix #436: writing type-named scrolls,2,[],https://github.com/NetHack/NetHack/pull/551,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/551,"When using a marker, it is possible to write a scroll based on the
type-name assigned to it by the user.  Somewhat unintuitively, this
system broke down if the assigned name was identical to the real name of
a scroll type: trying to write a scroll by its previously-assigned name
'scare mon' or 'id' would be guaranteed to succeed, but this wouldn't be
the case if the user-assigned name was 'scare monster' or 'identify'.
Revise dowrite(write.c) to prefer a user-assigned type-name to the
real name of a scroll that isn't already formally known, while
continuing to prefer the real name of an identified scroll to both.
Fixes #436","When using a marker, it is possible to write a scroll based on the
type-name assigned to it by the user.  Somewhat unintuitively, this
system broke down if the assigned name was identical to the real name of
a scroll type: trying to write a scroll by its previously-assigned name
'scare mon' or 'id' would be guaranteed to succeed, but this wouldn't be
the case if the user-assigned name was 'scare monster' or 'identify'.
Revise dowrite(write.c) to prefer a user-assigned type-name to the
real name of a scroll that isn't already formally known, while
continuing to prefer the real name of an identified scroll to both.
Fixes #436",True,"{'THUMBS_UP': ['https://github.com/ostrosablin', 'https://github.com/gebulmer', 'https://github.com/copperwater', 'https://github.com/RojjaCebolla', 'https://github.com/NullCGT'], 'HEART': ['https://github.com/stenno']}"
NetHack/NetHack,https://github.com/NetHack/NetHack,553,2021-07-21T16:19:37Z,2021-07-21T19:44:29Z,2021-07-21T21:11:15Z,CLOSED,False,1,1,1,https://github.com/entrez,Fix: off-by-one error in movecmd,1,[],https://github.com/NetHack/NetHack/pull/553,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/553,"The for loop which iterates through the list of movement keys in
movecmd(cmd.c) was updated in 5abf948 to count down to 0 instead of
up to the end of the list.  This commit inadvertently introduced an
off-by-one error which started the loop one past the actual end of the
array.  On my system this made 'H' stop working as the 'run West' key.","The for loop which iterates through the list of movement keys in
movecmd(cmd.c) was updated in 5abf948 to count down to 0 instead of
up to the end of the list.  This commit inadvertently introduced an
off-by-one error which started the loop one past the actual end of the
array.  On my system this made 'H' stop working as the 'run West' key.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,553,2021-07-21T16:19:37Z,2021-07-21T19:44:29Z,2021-07-21T21:11:15Z,CLOSED,False,1,1,1,https://github.com/entrez,Fix: off-by-one error in movecmd,1,[],https://github.com/NetHack/NetHack/pull/553,https://github.com/paxed,2,https://github.com/NetHack/NetHack/pull/553#issuecomment-884449969,"The for loop which iterates through the list of movement keys in
movecmd(cmd.c) was updated in 5abf948 to count down to 0 instead of
up to the end of the list.  This commit inadvertently introduced an
off-by-one error which started the loop one past the actual end of the
array.  On my system this made 'H' stop working as the 'run West' key.",Committed.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,554,2021-07-21T20:44:41Z,2021-07-22T04:22:09Z,2021-07-22T14:40:48Z,CLOSED,False,2,1,1,https://github.com/entrez,Fix: engraving with dry magic marker,1,[],https://github.com/NetHack/NetHack/pull/554,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/554,"Engraving with a marker can use up remaining charges to write
semi-permanently in ink, or--if the marker has no remaining charges--can
draw in the dust as with a normal blunt item.  Handling in engrave after
a recent refactor (9c6a5fc) didn't fully cover this second case, and
as a result using an empty marker to engrave would deduct a charge per
attempt and cause an impossible.  This could be exploited by repeatedly
engraving with the same empty marker to underflow the marker charges.","Engraving with a marker can use up remaining charges to write
semi-permanently in ink, or--if the marker has no remaining charges--can
draw in the dust as with a normal blunt item.  Handling in engrave after
a recent refactor (9c6a5fc) didn't fully cover this second case, and
as a result using an empty marker to engrave would deduct a charge per
attempt and cause an impossible.  This could be exploited by repeatedly
engraving with the same empty marker to underflow the marker charges.",True,{'THUMBS_UP': ['https://github.com/gebulmer']}
NetHack/NetHack,https://github.com/NetHack/NetHack,554,2021-07-21T20:44:41Z,2021-07-22T04:22:09Z,2021-07-22T14:40:48Z,CLOSED,False,2,1,1,https://github.com/entrez,Fix: engraving with dry magic marker,1,[],https://github.com/NetHack/NetHack/pull/554,https://github.com/paxed,2,https://github.com/NetHack/NetHack/pull/554#issuecomment-884647247,"Engraving with a marker can use up remaining charges to write
semi-permanently in ink, or--if the marker has no remaining charges--can
draw in the dust as with a normal blunt item.  Handling in engrave after
a recent refactor (9c6a5fc) didn't fully cover this second case, and
as a result using an empty marker to engrave would deduct a charge per
attempt and cause an impossible.  This could be exploited by repeatedly
engraving with the same empty marker to underflow the marker charges.",Committed.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,556,2021-07-22T07:47:02Z,2021-07-22T08:12:00Z,2021-07-22T08:12:01Z,CLOSED,False,16,1,1,https://github.com/heiner,termcap.c: Don't use hilites[CLR_BLACK] = NULL for ANSI_DEFAULT,1,[],https://github.com/NetHack/NetHack/pull/556,https://github.com/heiner,1,https://github.com/NetHack/NetHack/pull/556,"This didn't crash since xputs is defensive and checks if it got a NULL
string, but it also didn't display black entries (dragons, unicorns,
orcish arrows, ...) as black or otherwise different from gray entries.","This didn't crash since xputs is defensive and checks if it got a NULL
string, but it also didn't display black entries (dragons, unicorns,
orcish arrows, ...) as black or otherwise different from gray entries.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,556,2021-07-22T07:47:02Z,2021-07-22T08:12:00Z,2021-07-22T08:12:01Z,CLOSED,False,16,1,1,https://github.com/heiner,termcap.c: Don't use hilites[CLR_BLACK] = NULL for ANSI_DEFAULT,1,[],https://github.com/NetHack/NetHack/pull/556,https://github.com/paxed,2,https://github.com/NetHack/NetHack/pull/556#issuecomment-884731852,"This didn't crash since xputs is defensive and checks if it got a NULL
string, but it also didn't display black entries (dragons, unicorns,
orcish arrows, ...) as black or otherwise different from gray entries.",Merged.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,557,2021-07-22T14:59:40Z,2021-07-28T13:48:41Z,2021-07-28T13:57:06Z,CLOSED,False,17,6,1,https://github.com/entrez,Fix: crash when appending to long engraving,1,[],https://github.com/NetHack/NetHack/pull/557,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/557,"If an engraving was appended to repeatedly, it could eventually exceed
BUFSZ and cause a crash.  Add some checks to prevent this from happening
and inform the player when she runs out of space to engrave on a
particular square.","If an engraving was appended to repeatedly, it could eventually exceed
BUFSZ and cause a crash.  Add some checks to prevent this from happening
and inform the player when she runs out of space to engrave on a
particular square.",True,{'HEART': ['https://github.com/RojjaCebolla']}
NetHack/NetHack,https://github.com/NetHack/NetHack,557,2021-07-22T14:59:40Z,2021-07-28T13:48:41Z,2021-07-28T13:57:06Z,CLOSED,False,17,6,1,https://github.com/entrez,Fix: crash when appending to long engraving,1,[],https://github.com/NetHack/NetHack/pull/557,https://github.com/paxed,2,https://github.com/NetHack/NetHack/pull/557#issuecomment-888324177,"If an engraving was appended to repeatedly, it could eventually exceed
BUFSZ and cause a crash.  Add some checks to prevent this from happening
and inform the player when she runs out of space to engrave on a
particular square.",Committed.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,561,2021-07-31T09:28:49Z,2021-09-06T18:03:31Z,2021-09-06T18:03:31Z,CLOSED,False,2,1,1,https://github.com/splatpope,Non-metallic gloves protect worn rings from AD_ELEC in destroy_one_item,6,[],https://github.com/NetHack/NetHack/pull/561,https://github.com/splatpope,1,https://github.com/NetHack/NetHack/pull/561,"Based on a suggestion by luxidream (and a bunch of other good people)
The rationale behind this is that a lot of people feel that the now properly working shocking sphere explosion is imbalanced, causing a lot of grief and bitterness due to the loss of important wands and rings it causes. Even other electrical attacks are now considered under a new, harrowing light.
This is the first and the least disruptive of a series of 3 patches I've come up with to address this apparent (and admittedly minor) imbalance, the rest will be submitted if the reception on this one is favorable.
This PR makes it so that rings worn under non-metallic gloves are protected from destruction by electrical attacks. Because, you know, metals conduct electricity and all.
Since the only metallic gloves are the Gauntlets of Power, which are almost always considered the best choice for any ascension-worthy character, this introduces a new layer of tactical choices (Do I want an easy 25 str or do I want my worn rings to be safe ?).","Based on a suggestion by luxidream (and a bunch of other good people)
The rationale behind this is that a lot of people feel that the now properly working shocking sphere explosion is imbalanced, causing a lot of grief and bitterness due to the loss of important wands and rings it causes. Even other electrical attacks are now considered under a new, harrowing light.
This is the first and the least disruptive of a series of 3 patches I've come up with to address this apparent (and admittedly minor) imbalance, the rest will be submitted if the reception on this one is favorable.
This PR makes it so that rings worn under non-metallic gloves are protected from destruction by electrical attacks. Because, you know, metals conduct electricity and all.
Since the only metallic gloves are the Gauntlets of Power, which are almost always considered the best choice for any ascension-worthy character, this introduces a new layer of tactical choices (Do I want an easy 25 str or do I want my worn rings to be safe ?).",True,"{'THUMBS_UP': ['https://github.com/ostrosablin', 'https://github.com/Luxidream'], 'HEART': ['https://github.com/ostrosablin']}"
NetHack/NetHack,https://github.com/NetHack/NetHack,561,2021-07-31T09:28:49Z,2021-09-06T18:03:31Z,2021-09-06T18:03:31Z,CLOSED,False,2,1,1,https://github.com/splatpope,Non-metallic gloves protect worn rings from AD_ELEC in destroy_one_item,6,[],https://github.com/NetHack/NetHack/pull/561,https://github.com/pat-rankin,2,https://github.com/NetHack/NetHack/pull/561#issuecomment-890379008,"Based on a suggestion by luxidream (and a bunch of other good people)
The rationale behind this is that a lot of people feel that the now properly working shocking sphere explosion is imbalanced, causing a lot of grief and bitterness due to the loss of important wands and rings it causes. Even other electrical attacks are now considered under a new, harrowing light.
This is the first and the least disruptive of a series of 3 patches I've come up with to address this apparent (and admittedly minor) imbalance, the rest will be submitted if the reception on this one is favorable.
This PR makes it so that rings worn under non-metallic gloves are protected from destruction by electrical attacks. Because, you know, metals conduct electricity and all.
Since the only metallic gloves are the Gauntlets of Power, which are almost always considered the best choice for any ascension-worthy character, this introduces a new layer of tactical choices (Do I want an easy 25 str or do I want my worn rings to be safe ?).","The concise version has left out something from the first version.
The owornmask check needs to be '(obj->owornmask & W_RING) != 0'
otherwise someone could protect up to three extra rings by putting them
into the weapon, swap-weapon, and quiver slots (temporarily, if they have
enough time as a shocking monster approaches).",True,{'THUMBS_UP': ['https://github.com/splatpope']}
NetHack/NetHack,https://github.com/NetHack/NetHack,561,2021-07-31T09:28:49Z,2021-09-06T18:03:31Z,2021-09-06T18:03:31Z,CLOSED,False,2,1,1,https://github.com/splatpope,Non-metallic gloves protect worn rings from AD_ELEC in destroy_one_item,6,[],https://github.com/NetHack/NetHack/pull/561,https://github.com/splatpope,3,https://github.com/NetHack/NetHack/pull/561#issuecomment-890495531,"Based on a suggestion by luxidream (and a bunch of other good people)
The rationale behind this is that a lot of people feel that the now properly working shocking sphere explosion is imbalanced, causing a lot of grief and bitterness due to the loss of important wands and rings it causes. Even other electrical attacks are now considered under a new, harrowing light.
This is the first and the least disruptive of a series of 3 patches I've come up with to address this apparent (and admittedly minor) imbalance, the rest will be submitted if the reception on this one is favorable.
This PR makes it so that rings worn under non-metallic gloves are protected from destruction by electrical attacks. Because, you know, metals conduct electricity and all.
Since the only metallic gloves are the Gauntlets of Power, which are almost always considered the best choice for any ascension-worthy character, this introduces a new layer of tactical choices (Do I want an easy 25 str or do I want my worn rings to be safe ?).","Fixed (good of you guys to explain me how owornmask worked, I didn't figure that rings being wielded would count and thought I could just omit that check !)
Nonetheless, I feel that this line is getting increasingly ugly for no other reason that limiting the declaration of local variables and staying under 80 columns. Do you feel like there would be a good point in defining a ""ring_under_glove"" function or macro ?",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,561,2021-07-31T09:28:49Z,2021-09-06T18:03:31Z,2021-09-06T18:03:31Z,CLOSED,False,2,1,1,https://github.com/splatpope,Non-metallic gloves protect worn rings from AD_ELEC in destroy_one_item,6,[],https://github.com/NetHack/NetHack/pull/561,https://github.com/entrez,4,https://github.com/NetHack/NetHack/pull/561#issuecomment-890592847,"Based on a suggestion by luxidream (and a bunch of other good people)
The rationale behind this is that a lot of people feel that the now properly working shocking sphere explosion is imbalanced, causing a lot of grief and bitterness due to the loss of important wands and rings it causes. Even other electrical attacks are now considered under a new, harrowing light.
This is the first and the least disruptive of a series of 3 patches I've come up with to address this apparent (and admittedly minor) imbalance, the rest will be submitted if the reception on this one is favorable.
This PR makes it so that rings worn under non-metallic gloves are protected from destruction by electrical attacks. Because, you know, metals conduct electricity and all.
Since the only metallic gloves are the Gauntlets of Power, which are almost always considered the best choice for any ascension-worthy character, this introduces a new layer of tactical choices (Do I want an easy 25 str or do I want my worn rings to be safe ?).","If the glove thing came before the existing otyp check, it would fit into two lines:
if (((obj->owornmask & W_RING) && uarmg && !is_metallic(uarmg))
    || obj->otyp == RIN_SHOCK_RESISTANCE) {",True,{'THUMBS_UP': ['https://github.com/splatpope']}
NetHack/NetHack,https://github.com/NetHack/NetHack,561,2021-07-31T09:28:49Z,2021-09-06T18:03:31Z,2021-09-06T18:03:31Z,CLOSED,False,2,1,1,https://github.com/splatpope,Non-metallic gloves protect worn rings from AD_ELEC in destroy_one_item,6,[],https://github.com/NetHack/NetHack/pull/561,https://github.com/splatpope,5,https://github.com/NetHack/NetHack/pull/561#issuecomment-892003597,"Based on a suggestion by luxidream (and a bunch of other good people)
The rationale behind this is that a lot of people feel that the now properly working shocking sphere explosion is imbalanced, causing a lot of grief and bitterness due to the loss of important wands and rings it causes. Even other electrical attacks are now considered under a new, harrowing light.
This is the first and the least disruptive of a series of 3 patches I've come up with to address this apparent (and admittedly minor) imbalance, the rest will be submitted if the reception on this one is favorable.
This PR makes it so that rings worn under non-metallic gloves are protected from destruction by electrical attacks. Because, you know, metals conduct electricity and all.
Since the only metallic gloves are the Gauntlets of Power, which are almost always considered the best choice for any ascension-worthy character, this introduces a new layer of tactical choices (Do I want an easy 25 str or do I want my worn rings to be safe ?).","Should be good, hit me up if there's more stuff to fix or if you want me to squash the commits",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,561,2021-07-31T09:28:49Z,2021-09-06T18:03:31Z,2021-09-06T18:03:31Z,CLOSED,False,2,1,1,https://github.com/splatpope,Non-metallic gloves protect worn rings from AD_ELEC in destroy_one_item,6,[],https://github.com/NetHack/NetHack/pull/561,https://github.com/copperwater,6,https://github.com/NetHack/NetHack/pull/561#issuecomment-892662746,"Based on a suggestion by luxidream (and a bunch of other good people)
The rationale behind this is that a lot of people feel that the now properly working shocking sphere explosion is imbalanced, causing a lot of grief and bitterness due to the loss of important wands and rings it causes. Even other electrical attacks are now considered under a new, harrowing light.
This is the first and the least disruptive of a series of 3 patches I've come up with to address this apparent (and admittedly minor) imbalance, the rest will be submitted if the reception on this one is favorable.
This PR makes it so that rings worn under non-metallic gloves are protected from destruction by electrical attacks. Because, you know, metals conduct electricity and all.
Since the only metallic gloves are the Gauntlets of Power, which are almost always considered the best choice for any ascension-worthy character, this introduces a new layer of tactical choices (Do I want an easy 25 str or do I want my worn rings to be safe ?).","This is the first and the least disruptive of a series of 3 patches I've come up with to address this apparent (and admittedly minor) imbalance, the rest will be submitted if the reception on this one is favorable.

Do you mind sharing what the other 2 are?",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,561,2021-07-31T09:28:49Z,2021-09-06T18:03:31Z,2021-09-06T18:03:31Z,CLOSED,False,2,1,1,https://github.com/splatpope,Non-metallic gloves protect worn rings from AD_ELEC in destroy_one_item,6,[],https://github.com/NetHack/NetHack/pull/561,https://github.com/splatpope,7,https://github.com/NetHack/NetHack/pull/561#issuecomment-892998077,"Based on a suggestion by luxidream (and a bunch of other good people)
The rationale behind this is that a lot of people feel that the now properly working shocking sphere explosion is imbalanced, causing a lot of grief and bitterness due to the loss of important wands and rings it causes. Even other electrical attacks are now considered under a new, harrowing light.
This is the first and the least disruptive of a series of 3 patches I've come up with to address this apparent (and admittedly minor) imbalance, the rest will be submitted if the reception on this one is favorable.
This PR makes it so that rings worn under non-metallic gloves are protected from destruction by electrical attacks. Because, you know, metals conduct electricity and all.
Since the only metallic gloves are the Gauntlets of Power, which are almost always considered the best choice for any ascension-worthy character, this introduces a new layer of tactical choices (Do I want an easy 25 str or do I want my worn rings to be safe ?).","This is the first and the least disruptive of a series of 3 patches I've come up with to address this apparent (and admittedly minor) imbalance, the rest will be submitted if the reception on this one is favorable.

Do you mind sharing what the other 2 are?


adjust probabilities of wands exploding to 1 for cursed wands and 1/9 for blessed wands
non-metallic wands and rings flat out resist electrical damage",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,561,2021-07-31T09:28:49Z,2021-09-06T18:03:31Z,2021-09-06T18:03:31Z,CLOSED,False,2,1,1,https://github.com/splatpope,Non-metallic gloves protect worn rings from AD_ELEC in destroy_one_item,6,[],https://github.com/NetHack/NetHack/pull/561,https://github.com/FredrIQ,8,https://github.com/NetHack/NetHack/pull/561#issuecomment-893055791,"Based on a suggestion by luxidream (and a bunch of other good people)
The rationale behind this is that a lot of people feel that the now properly working shocking sphere explosion is imbalanced, causing a lot of grief and bitterness due to the loss of important wands and rings it causes. Even other electrical attacks are now considered under a new, harrowing light.
This is the first and the least disruptive of a series of 3 patches I've come up with to address this apparent (and admittedly minor) imbalance, the rest will be submitted if the reception on this one is favorable.
This PR makes it so that rings worn under non-metallic gloves are protected from destruction by electrical attacks. Because, you know, metals conduct electricity and all.
Since the only metallic gloves are the Gauntlets of Power, which are almost always considered the best choice for any ascension-worthy character, this introduces a new layer of tactical choices (Do I want an easy 25 str or do I want my worn rings to be safe ?).","Personally, the way I saw it when it comes to shock damage, I never considered wands blowing up a problem, because wands are consumables (Although there is an argument to be made that it should zap wand charges instead of the entire wand, unless a wand's charges become 0 as a result), but rings are equippables and thus shouldn't be destroyed that easily. Weapons can't be destroyed at all (except for ammo mulching) and armor can only be destroyed by ""destroy armor"" (resisted by MR) or disintegration (prevented by reflection). But even with shock resistance, rings still blow up.
This PR is a perfectly sensible solution for rings IMO. While I wouldn't mind the other 2 feature examples you brought up on a personal level, it's mostly because then I'd have less to worry about as a player, and not because I feel the current behaviour of those are unbalanced.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,561,2021-07-31T09:28:49Z,2021-09-06T18:03:31Z,2021-09-06T18:03:31Z,CLOSED,False,2,1,1,https://github.com/splatpope,Non-metallic gloves protect worn rings from AD_ELEC in destroy_one_item,6,[],https://github.com/NetHack/NetHack/pull/561,https://github.com/copperwater,9,https://github.com/NetHack/NetHack/pull/561#issuecomment-894797376,"Based on a suggestion by luxidream (and a bunch of other good people)
The rationale behind this is that a lot of people feel that the now properly working shocking sphere explosion is imbalanced, causing a lot of grief and bitterness due to the loss of important wands and rings it causes. Even other electrical attacks are now considered under a new, harrowing light.
This is the first and the least disruptive of a series of 3 patches I've come up with to address this apparent (and admittedly minor) imbalance, the rest will be submitted if the reception on this one is favorable.
This PR makes it so that rings worn under non-metallic gloves are protected from destruction by electrical attacks. Because, you know, metals conduct electricity and all.
Since the only metallic gloves are the Gauntlets of Power, which are almost always considered the best choice for any ascension-worthy character, this introduces a new layer of tactical choices (Do I want an easy 25 str or do I want my worn rings to be safe ?).","non-metallic wands and rings flat out resist electrical damage

I'd note that this interferes with a NetHack design principle some people try to adhere to - the principle of minimizing the amount of things that:

are determined at the start of the game
are hidden to the player
have an effect on the long term difficulty of the game

For instance, if I start a game in which the wand of death, wand of wishing, wand of teleportation, ring of free action, ring of conflict, ring of teleport control etc. etc. are all randomized to be metal, that game will have some difficulties that it wouldn't have if they all generated as nonmetal, and it's not really fair to the player because they had no idea what the items were randomized to.
NetHack already has some things that break this principle, so I don't think it's disqualifying of the idea, but it's an argument against adding more things like that. (Color alchemy is another proposed system along the same lines - some games will let you mix cheap common potions into powerful ones, and some just won't, and you don't learn that until well into the game.)",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,561,2021-07-31T09:28:49Z,2021-09-06T18:03:31Z,2021-09-06T18:03:31Z,CLOSED,False,2,1,1,https://github.com/splatpope,Non-metallic gloves protect worn rings from AD_ELEC in destroy_one_item,6,[],https://github.com/NetHack/NetHack/pull/561,https://github.com/paxed,10,https://github.com/NetHack/NetHack/pull/561#issuecomment-895969230,"Based on a suggestion by luxidream (and a bunch of other good people)
The rationale behind this is that a lot of people feel that the now properly working shocking sphere explosion is imbalanced, causing a lot of grief and bitterness due to the loss of important wands and rings it causes. Even other electrical attacks are now considered under a new, harrowing light.
This is the first and the least disruptive of a series of 3 patches I've come up with to address this apparent (and admittedly minor) imbalance, the rest will be submitted if the reception on this one is favorable.
This PR makes it so that rings worn under non-metallic gloves are protected from destruction by electrical attacks. Because, you know, metals conduct electricity and all.
Since the only metallic gloves are the Gauntlets of Power, which are almost always considered the best choice for any ascension-worthy character, this introduces a new layer of tactical choices (Do I want an easy 25 str or do I want my worn rings to be safe ?).","Move the || to the start of the line, and squash the commits.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,561,2021-07-31T09:28:49Z,2021-09-06T18:03:31Z,2021-09-06T18:03:31Z,CLOSED,False,2,1,1,https://github.com/splatpope,Non-metallic gloves protect worn rings from AD_ELEC in destroy_one_item,6,[],https://github.com/NetHack/NetHack/pull/561,https://github.com/entrez,11,https://github.com/NetHack/NetHack/pull/561#issuecomment-895971175,"Based on a suggestion by luxidream (and a bunch of other good people)
The rationale behind this is that a lot of people feel that the now properly working shocking sphere explosion is imbalanced, causing a lot of grief and bitterness due to the loss of important wands and rings it causes. Even other electrical attacks are now considered under a new, harrowing light.
This is the first and the least disruptive of a series of 3 patches I've come up with to address this apparent (and admittedly minor) imbalance, the rest will be submitted if the reception on this one is favorable.
This PR makes it so that rings worn under non-metallic gloves are protected from destruction by electrical attacks. Because, you know, metals conduct electricity and all.
Since the only metallic gloves are the Gauntlets of Power, which are almost always considered the best choice for any ascension-worthy character, this introduces a new layer of tactical choices (Do I want an easy 25 str or do I want my worn rings to be safe ?).","The wraparound line is also indented too much. It should look like the comment I made earlier in terms of formatting:
if (((obj->owornmask & W_RING) && uarmg && !is_metallic(uarmg))
    || obj->otyp == RIN_SHOCK_RESISTANCE) {
I tried to get a message to you on Discord (which I don't use, so I was probably unsuccessful) but there's a file in DEVEL/ called code_style.txt that describes a lot of this stuff.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,561,2021-07-31T09:28:49Z,2021-09-06T18:03:31Z,2021-09-06T18:03:31Z,CLOSED,False,2,1,1,https://github.com/splatpope,Non-metallic gloves protect worn rings from AD_ELEC in destroy_one_item,6,[],https://github.com/NetHack/NetHack/pull/561,https://github.com/paxed,12,https://github.com/NetHack/NetHack/pull/561#issuecomment-913794810,"Based on a suggestion by luxidream (and a bunch of other good people)
The rationale behind this is that a lot of people feel that the now properly working shocking sphere explosion is imbalanced, causing a lot of grief and bitterness due to the loss of important wands and rings it causes. Even other electrical attacks are now considered under a new, harrowing light.
This is the first and the least disruptive of a series of 3 patches I've come up with to address this apparent (and admittedly minor) imbalance, the rest will be submitted if the reception on this one is favorable.
This PR makes it so that rings worn under non-metallic gloves are protected from destruction by electrical attacks. Because, you know, metals conduct electricity and all.
Since the only metallic gloves are the Gauntlets of Power, which are almost always considered the best choice for any ascension-worthy character, this introduces a new layer of tactical choices (Do I want an easy 25 str or do I want my worn rings to be safe ?).",Committed.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,565,2021-08-04T20:21:13Z,2021-09-03T03:37:17Z,2021-09-03T14:02:40Z,CLOSED,False,4,2,1,https://github.com/entrez,Amplify booze effect if drinking on empty stomach,1,[],https://github.com/NetHack/NetHack/pull/565,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/565,"Ok, this is admittedly a sort of silly idea, but has basis in reality.
Drinking booze on an empty stomach will amplify its effects
(i.e. increase the duration of the resulting confusion); stuffing
yourself before drinking will have the opposite effect.","Ok, this is admittedly a sort of silly idea, but has basis in reality.
Drinking booze on an empty stomach will amplify its effects
(i.e. increase the duration of the resulting confusion); stuffing
yourself before drinking will have the opposite effect.",True,"{'THUMBS_UP': ['https://github.com/ostrosablin', 'https://github.com/k21971', 'https://github.com/gebulmer', 'https://github.com/Luxidream', 'https://github.com/splatpope', 'https://github.com/RojjaCebolla', 'https://github.com/actual-nh']}"
NetHack/NetHack,https://github.com/NetHack/NetHack,565,2021-08-04T20:21:13Z,2021-09-03T03:37:17Z,2021-09-03T14:02:40Z,CLOSED,False,4,2,1,https://github.com/entrez,Amplify booze effect if drinking on empty stomach,1,[],https://github.com/NetHack/NetHack/pull/565,https://github.com/ostrosablin,2,https://github.com/NetHack/NetHack/pull/565#issuecomment-892969122,"Ok, this is admittedly a sort of silly idea, but has basis in reality.
Drinking booze on an empty stomach will amplify its effects
(i.e. increase the duration of the resulting confusion); stuffing
yourself before drinking will have the opposite effect.","Sounds good, another little situation contributing to NetHack's TDTTOE experience.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,567,2021-08-07T15:29:12Z,,2022-01-27T17:14:39Z,OPEN,False,743,49,65,https://github.com/NullCGT,Display a permanent list of nearby characters,10,[],https://github.com/NetHack/NetHack/pull/567,https://github.com/NullCGT,1,https://github.com/NetHack/NetHack/pull/567,"Overview
This pull request adds a window in the curses window port which displays
nearby characters on the map. Pressing a key (bound to ']' by default)
changes whether the window is displaying nearby monsters or nearby
objects.
This pull request is a proof of concept; I am very happy to receive and implement feedback.
Rationale for Change
This is, first and foremost, an accessibility feature. Prospective NetHack
players are often discouraged by the interface, and the lack of explanation
of various characters and symbols. One way to combat this is by displaying
a permanent list of nearby glyphs. Displaying a list of nearby items and
monsters is a feature in many popular modern roguelikes, such as
Cataclsysm: Dark Days Ahead, Brogue, and Dungeon Crawl Stone Soup. In order
to increase its appeal to new players, NetHack should offer this as an
option as well.
Furthermore, this feature can benefit experienced players as well, allowing
them to determine at a glance whether a magenta h is a dwarf king or a
mind flayer. A nearby characters window should greatly speed up play, as well
as reduce some of the tedium of farlooking monsters in order to determine
their identities.
Technical Notes
While much of the code for this feature is taken from the look_all code in
pager.c, there are a number of differences. First, coordinates are omitted
from the window. While displaying coordinates is useful, we risk overwhelming
new players by presenting them with too much information (something NetHack
is already quite good at). Second, we visually distinguish peaceful monsters
with a different bullet point. Third, pet attributes and color are displayed
in this window, so it is easier to read at a glance.
I made the decision to deviate from the standard set by cursinvt.c and avoid
saving the text in memory, since that would greatly complicate the code for
little benefit.
I chose to implement a toggle for the type of nearby characters rather than
a scroll button like the one used in the permanent inventory. In the future,
a scroll button could potentially be added.
Considerations
There are a few considerations about this feature that are important to note.
The first is that updating the list of nearby characters is a potentially
expensive operation. While I do not believe this is of great concern, since
the window is only available in the curses window port, which is likely only
to be run on powerful computers, it is still important to note.
When the permanent inventory and permanent nearby windows are displayed at
the same time, the screen becomes rather cramped. I attempted to stack them
on top of one another, but was unable to determine how to do so.
Finally, I recognize that the existing update_nearby() calls are likely
insufficient, and there may be a number of edge cases where the window updates
late.
Ports

Curses: Enabled.
Qt: Enabled.
TTY: Functions are stubbed out so the port compiles. Strongly suggest not implementing, since the look_all() functionality accessed with the '/' key essentially duplicates the function of this window, and adding a key to display this window would be an unnecessary duplication of code and functionality.
Windows: Functions are stubbed out so the port is playable. Not implemented.
Shim: Functions are stubbed out so the port is playable. Not implemented.
X11: Functions are stubbed out so the port is playable. Not implemented.

Note that stubbed out functions are written in the manner of perm_invent functions in window ports where that option is not enabled.
Conclusion
That was a lot of words! Feedback is more than welcome.","Overview
This pull request adds a window in the curses window port which displays
nearby characters on the map. Pressing a key (bound to ']' by default)
changes whether the window is displaying nearby monsters or nearby
objects.
This pull request is a proof of concept; I am very happy to receive and implement feedback.
Rationale for Change
This is, first and foremost, an accessibility feature. Prospective NetHack
players are often discouraged by the interface, and the lack of explanation
of various characters and symbols. One way to combat this is by displaying
a permanent list of nearby glyphs. Displaying a list of nearby items and
monsters is a feature in many popular modern roguelikes, such as
Cataclsysm: Dark Days Ahead, Brogue, and Dungeon Crawl Stone Soup. In order
to increase its appeal to new players, NetHack should offer this as an
option as well.
Furthermore, this feature can benefit experienced players as well, allowing
them to determine at a glance whether a magenta h is a dwarf king or a
mind flayer. A nearby characters window should greatly speed up play, as well
as reduce some of the tedium of farlooking monsters in order to determine
their identities.
Technical Notes
While much of the code for this feature is taken from the look_all code in
pager.c, there are a number of differences. First, coordinates are omitted
from the window. While displaying coordinates is useful, we risk overwhelming
new players by presenting them with too much information (something NetHack
is already quite good at). Second, we visually distinguish peaceful monsters
with a different bullet point. Third, pet attributes and color are displayed
in this window, so it is easier to read at a glance.
I made the decision to deviate from the standard set by cursinvt.c and avoid
saving the text in memory, since that would greatly complicate the code for
little benefit.
I chose to implement a toggle for the type of nearby characters rather than
a scroll button like the one used in the permanent inventory. In the future,
a scroll button could potentially be added.
Considerations
There are a few considerations about this feature that are important to note.
The first is that updating the list of nearby characters is a potentially
expensive operation. While I do not believe this is of great concern, since
the window is only available in the curses window port, which is likely only
to be run on powerful computers, it is still important to note.
When the permanent inventory and permanent nearby windows are displayed at
the same time, the screen becomes rather cramped. I attempted to stack them
on top of one another, but was unable to determine how to do so.
Finally, I recognize that the existing update_nearby() calls are likely
insufficient, and there may be a number of edge cases where the window updates
late.
Ports

Curses: Enabled.
Qt: Enabled.
TTY: Functions are stubbed out so the port compiles. Strongly suggest not implementing, since the look_all() functionality accessed with the '/' key essentially duplicates the function of this window, and adding a key to display this window would be an unnecessary duplication of code and functionality.
Windows: Functions are stubbed out so the port is playable. Not implemented.
Shim: Functions are stubbed out so the port is playable. Not implemented.
X11: Functions are stubbed out so the port is playable. Not implemented.

Note that stubbed out functions are written in the manner of perm_invent functions in window ports where that option is not enabled.
Conclusion
That was a lot of words! Feedback is more than welcome.",True,"{'THUMBS_UP': ['https://github.com/gebulmer', 'https://github.com/copperwater', 'https://github.com/actual-nh'], 'HEART': ['https://github.com/actual-nh']}"
NetHack/NetHack,https://github.com/NetHack/NetHack,567,2021-08-07T15:29:12Z,,2022-01-27T17:14:39Z,OPEN,False,743,49,65,https://github.com/NullCGT,Display a permanent list of nearby characters,10,[],https://github.com/NetHack/NetHack/pull/567,https://github.com/paxed,2,https://github.com/NetHack/NetHack/pull/567#issuecomment-894672912,"Overview
This pull request adds a window in the curses window port which displays
nearby characters on the map. Pressing a key (bound to ']' by default)
changes whether the window is displaying nearby monsters or nearby
objects.
This pull request is a proof of concept; I am very happy to receive and implement feedback.
Rationale for Change
This is, first and foremost, an accessibility feature. Prospective NetHack
players are often discouraged by the interface, and the lack of explanation
of various characters and symbols. One way to combat this is by displaying
a permanent list of nearby glyphs. Displaying a list of nearby items and
monsters is a feature in many popular modern roguelikes, such as
Cataclsysm: Dark Days Ahead, Brogue, and Dungeon Crawl Stone Soup. In order
to increase its appeal to new players, NetHack should offer this as an
option as well.
Furthermore, this feature can benefit experienced players as well, allowing
them to determine at a glance whether a magenta h is a dwarf king or a
mind flayer. A nearby characters window should greatly speed up play, as well
as reduce some of the tedium of farlooking monsters in order to determine
their identities.
Technical Notes
While much of the code for this feature is taken from the look_all code in
pager.c, there are a number of differences. First, coordinates are omitted
from the window. While displaying coordinates is useful, we risk overwhelming
new players by presenting them with too much information (something NetHack
is already quite good at). Second, we visually distinguish peaceful monsters
with a different bullet point. Third, pet attributes and color are displayed
in this window, so it is easier to read at a glance.
I made the decision to deviate from the standard set by cursinvt.c and avoid
saving the text in memory, since that would greatly complicate the code for
little benefit.
I chose to implement a toggle for the type of nearby characters rather than
a scroll button like the one used in the permanent inventory. In the future,
a scroll button could potentially be added.
Considerations
There are a few considerations about this feature that are important to note.
The first is that updating the list of nearby characters is a potentially
expensive operation. While I do not believe this is of great concern, since
the window is only available in the curses window port, which is likely only
to be run on powerful computers, it is still important to note.
When the permanent inventory and permanent nearby windows are displayed at
the same time, the screen becomes rather cramped. I attempted to stack them
on top of one another, but was unable to determine how to do so.
Finally, I recognize that the existing update_nearby() calls are likely
insufficient, and there may be a number of edge cases where the window updates
late.
Ports

Curses: Enabled.
Qt: Enabled.
TTY: Functions are stubbed out so the port compiles. Strongly suggest not implementing, since the look_all() functionality accessed with the '/' key essentially duplicates the function of this window, and adding a key to display this window would be an unnecessary duplication of code and functionality.
Windows: Functions are stubbed out so the port is playable. Not implemented.
Shim: Functions are stubbed out so the port is playable. Not implemented.
X11: Functions are stubbed out so the port is playable. Not implemented.

Note that stubbed out functions are written in the manner of perm_invent functions in window ports where that option is not enabled.
Conclusion
That was a lot of words! Feedback is more than welcome.","What about the Windows, X11, and Qt windowports? TTY obviously can't permanently display the window, but there should have a command to show it and wait for user.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,567,2021-08-07T15:29:12Z,,2022-01-27T17:14:39Z,OPEN,False,743,49,65,https://github.com/NullCGT,Display a permanent list of nearby characters,10,[],https://github.com/NetHack/NetHack/pull/567,https://github.com/NullCGT,3,https://github.com/NetHack/NetHack/pull/567#issuecomment-894673965,"Overview
This pull request adds a window in the curses window port which displays
nearby characters on the map. Pressing a key (bound to ']' by default)
changes whether the window is displaying nearby monsters or nearby
objects.
This pull request is a proof of concept; I am very happy to receive and implement feedback.
Rationale for Change
This is, first and foremost, an accessibility feature. Prospective NetHack
players are often discouraged by the interface, and the lack of explanation
of various characters and symbols. One way to combat this is by displaying
a permanent list of nearby glyphs. Displaying a list of nearby items and
monsters is a feature in many popular modern roguelikes, such as
Cataclsysm: Dark Days Ahead, Brogue, and Dungeon Crawl Stone Soup. In order
to increase its appeal to new players, NetHack should offer this as an
option as well.
Furthermore, this feature can benefit experienced players as well, allowing
them to determine at a glance whether a magenta h is a dwarf king or a
mind flayer. A nearby characters window should greatly speed up play, as well
as reduce some of the tedium of farlooking monsters in order to determine
their identities.
Technical Notes
While much of the code for this feature is taken from the look_all code in
pager.c, there are a number of differences. First, coordinates are omitted
from the window. While displaying coordinates is useful, we risk overwhelming
new players by presenting them with too much information (something NetHack
is already quite good at). Second, we visually distinguish peaceful monsters
with a different bullet point. Third, pet attributes and color are displayed
in this window, so it is easier to read at a glance.
I made the decision to deviate from the standard set by cursinvt.c and avoid
saving the text in memory, since that would greatly complicate the code for
little benefit.
I chose to implement a toggle for the type of nearby characters rather than
a scroll button like the one used in the permanent inventory. In the future,
a scroll button could potentially be added.
Considerations
There are a few considerations about this feature that are important to note.
The first is that updating the list of nearby characters is a potentially
expensive operation. While I do not believe this is of great concern, since
the window is only available in the curses window port, which is likely only
to be run on powerful computers, it is still important to note.
When the permanent inventory and permanent nearby windows are displayed at
the same time, the screen becomes rather cramped. I attempted to stack them
on top of one another, but was unable to determine how to do so.
Finally, I recognize that the existing update_nearby() calls are likely
insufficient, and there may be a number of edge cases where the window updates
late.
Ports

Curses: Enabled.
Qt: Enabled.
TTY: Functions are stubbed out so the port compiles. Strongly suggest not implementing, since the look_all() functionality accessed with the '/' key essentially duplicates the function of this window, and adding a key to display this window would be an unnecessary duplication of code and functionality.
Windows: Functions are stubbed out so the port is playable. Not implemented.
Shim: Functions are stubbed out so the port is playable. Not implemented.
X11: Functions are stubbed out so the port is playable. Not implemented.

Note that stubbed out functions are written in the manner of perm_invent functions in window ports where that option is not enabled.
Conclusion
That was a lot of words! Feedback is more than welcome.","@paxed I was planning on porting it to X11 and Qt. (I don't have a way of testing a windows port at the moment). I wanted to get this PR out here first, in order to see if there was interest, and if the implementation was sound.
EDIT: I'll be doing my best to port this to available platforms.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,567,2021-08-07T15:29:12Z,,2022-01-27T17:14:39Z,OPEN,False,743,49,65,https://github.com/NullCGT,Display a permanent list of nearby characters,10,[],https://github.com/NetHack/NetHack/pull/567,https://github.com/NullCGT,4,https://github.com/NetHack/NetHack/pull/567#issuecomment-894699591,"Overview
This pull request adds a window in the curses window port which displays
nearby characters on the map. Pressing a key (bound to ']' by default)
changes whether the window is displaying nearby monsters or nearby
objects.
This pull request is a proof of concept; I am very happy to receive and implement feedback.
Rationale for Change
This is, first and foremost, an accessibility feature. Prospective NetHack
players are often discouraged by the interface, and the lack of explanation
of various characters and symbols. One way to combat this is by displaying
a permanent list of nearby glyphs. Displaying a list of nearby items and
monsters is a feature in many popular modern roguelikes, such as
Cataclsysm: Dark Days Ahead, Brogue, and Dungeon Crawl Stone Soup. In order
to increase its appeal to new players, NetHack should offer this as an
option as well.
Furthermore, this feature can benefit experienced players as well, allowing
them to determine at a glance whether a magenta h is a dwarf king or a
mind flayer. A nearby characters window should greatly speed up play, as well
as reduce some of the tedium of farlooking monsters in order to determine
their identities.
Technical Notes
While much of the code for this feature is taken from the look_all code in
pager.c, there are a number of differences. First, coordinates are omitted
from the window. While displaying coordinates is useful, we risk overwhelming
new players by presenting them with too much information (something NetHack
is already quite good at). Second, we visually distinguish peaceful monsters
with a different bullet point. Third, pet attributes and color are displayed
in this window, so it is easier to read at a glance.
I made the decision to deviate from the standard set by cursinvt.c and avoid
saving the text in memory, since that would greatly complicate the code for
little benefit.
I chose to implement a toggle for the type of nearby characters rather than
a scroll button like the one used in the permanent inventory. In the future,
a scroll button could potentially be added.
Considerations
There are a few considerations about this feature that are important to note.
The first is that updating the list of nearby characters is a potentially
expensive operation. While I do not believe this is of great concern, since
the window is only available in the curses window port, which is likely only
to be run on powerful computers, it is still important to note.
When the permanent inventory and permanent nearby windows are displayed at
the same time, the screen becomes rather cramped. I attempted to stack them
on top of one another, but was unable to determine how to do so.
Finally, I recognize that the existing update_nearby() calls are likely
insufficient, and there may be a number of edge cases where the window updates
late.
Ports

Curses: Enabled.
Qt: Enabled.
TTY: Functions are stubbed out so the port compiles. Strongly suggest not implementing, since the look_all() functionality accessed with the '/' key essentially duplicates the function of this window, and adding a key to display this window would be an unnecessary duplication of code and functionality.
Windows: Functions are stubbed out so the port is playable. Not implemented.
Shim: Functions are stubbed out so the port is playable. Not implemented.
X11: Functions are stubbed out so the port is playable. Not implemented.

Note that stubbed out functions are written in the manner of perm_invent functions in window ports where that option is not enabled.
Conclusion
That was a lot of words! Feedback is more than welcome.","@paxed After running into numerous headaches, I'm hesitant to port this to Qt and X11 for the following reasons:

The permanent inventory option causes a softlock followed by a segfault in X11 (tested on latest version of 3.7-Dev, not noted in X11-issues).
In Qt, the inventory display code already uses a major ""hack"" in order to work.
While this feature isn't the same, it's similar enough that I'm concerned about touching those ports. I'm interested in porting this to tty and Windows, but I don't think Qt and X11 are ready to receive new features.

EDIT: I've got Qt working, but the X11 port does not seem worth taking a look at until it is fixed.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,567,2021-08-07T15:29:12Z,,2022-01-27T17:14:39Z,OPEN,False,743,49,65,https://github.com/NullCGT,Display a permanent list of nearby characters,10,[],https://github.com/NetHack/NetHack/pull/567,https://github.com/entrez,5,https://github.com/NetHack/NetHack/pull/567#issuecomment-894807702,"Overview
This pull request adds a window in the curses window port which displays
nearby characters on the map. Pressing a key (bound to ']' by default)
changes whether the window is displaying nearby monsters or nearby
objects.
This pull request is a proof of concept; I am very happy to receive and implement feedback.
Rationale for Change
This is, first and foremost, an accessibility feature. Prospective NetHack
players are often discouraged by the interface, and the lack of explanation
of various characters and symbols. One way to combat this is by displaying
a permanent list of nearby glyphs. Displaying a list of nearby items and
monsters is a feature in many popular modern roguelikes, such as
Cataclsysm: Dark Days Ahead, Brogue, and Dungeon Crawl Stone Soup. In order
to increase its appeal to new players, NetHack should offer this as an
option as well.
Furthermore, this feature can benefit experienced players as well, allowing
them to determine at a glance whether a magenta h is a dwarf king or a
mind flayer. A nearby characters window should greatly speed up play, as well
as reduce some of the tedium of farlooking monsters in order to determine
their identities.
Technical Notes
While much of the code for this feature is taken from the look_all code in
pager.c, there are a number of differences. First, coordinates are omitted
from the window. While displaying coordinates is useful, we risk overwhelming
new players by presenting them with too much information (something NetHack
is already quite good at). Second, we visually distinguish peaceful monsters
with a different bullet point. Third, pet attributes and color are displayed
in this window, so it is easier to read at a glance.
I made the decision to deviate from the standard set by cursinvt.c and avoid
saving the text in memory, since that would greatly complicate the code for
little benefit.
I chose to implement a toggle for the type of nearby characters rather than
a scroll button like the one used in the permanent inventory. In the future,
a scroll button could potentially be added.
Considerations
There are a few considerations about this feature that are important to note.
The first is that updating the list of nearby characters is a potentially
expensive operation. While I do not believe this is of great concern, since
the window is only available in the curses window port, which is likely only
to be run on powerful computers, it is still important to note.
When the permanent inventory and permanent nearby windows are displayed at
the same time, the screen becomes rather cramped. I attempted to stack them
on top of one another, but was unable to determine how to do so.
Finally, I recognize that the existing update_nearby() calls are likely
insufficient, and there may be a number of edge cases where the window updates
late.
Ports

Curses: Enabled.
Qt: Enabled.
TTY: Functions are stubbed out so the port compiles. Strongly suggest not implementing, since the look_all() functionality accessed with the '/' key essentially duplicates the function of this window, and adding a key to display this window would be an unnecessary duplication of code and functionality.
Windows: Functions are stubbed out so the port is playable. Not implemented.
Shim: Functions are stubbed out so the port is playable. Not implemented.
X11: Functions are stubbed out so the port is playable. Not implemented.

Note that stubbed out functions are written in the manner of perm_invent functions in window ports where that option is not enabled.
Conclusion
That was a lot of words! Feedback is more than welcome.","TTY obviously can't permanently display the window, but there should have a command to show it and wait for user.

Wouldn't it be a bit redundant to have this as well as the existing ""list nearby objects"" and ""list nearby monsters"" functionality under /?  The big difference/advantage is that the list in the patch is shown in a persistent window; if that's gone, it doesn't really seem strongly differentiated from the existing options to me.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,567,2021-08-07T15:29:12Z,,2022-01-27T17:14:39Z,OPEN,False,743,49,65,https://github.com/NullCGT,Display a permanent list of nearby characters,10,[],https://github.com/NetHack/NetHack/pull/567,https://github.com/NullCGT,6,https://github.com/NetHack/NetHack/pull/567#issuecomment-894807901,"Overview
This pull request adds a window in the curses window port which displays
nearby characters on the map. Pressing a key (bound to ']' by default)
changes whether the window is displaying nearby monsters or nearby
objects.
This pull request is a proof of concept; I am very happy to receive and implement feedback.
Rationale for Change
This is, first and foremost, an accessibility feature. Prospective NetHack
players are often discouraged by the interface, and the lack of explanation
of various characters and symbols. One way to combat this is by displaying
a permanent list of nearby glyphs. Displaying a list of nearby items and
monsters is a feature in many popular modern roguelikes, such as
Cataclsysm: Dark Days Ahead, Brogue, and Dungeon Crawl Stone Soup. In order
to increase its appeal to new players, NetHack should offer this as an
option as well.
Furthermore, this feature can benefit experienced players as well, allowing
them to determine at a glance whether a magenta h is a dwarf king or a
mind flayer. A nearby characters window should greatly speed up play, as well
as reduce some of the tedium of farlooking monsters in order to determine
their identities.
Technical Notes
While much of the code for this feature is taken from the look_all code in
pager.c, there are a number of differences. First, coordinates are omitted
from the window. While displaying coordinates is useful, we risk overwhelming
new players by presenting them with too much information (something NetHack
is already quite good at). Second, we visually distinguish peaceful monsters
with a different bullet point. Third, pet attributes and color are displayed
in this window, so it is easier to read at a glance.
I made the decision to deviate from the standard set by cursinvt.c and avoid
saving the text in memory, since that would greatly complicate the code for
little benefit.
I chose to implement a toggle for the type of nearby characters rather than
a scroll button like the one used in the permanent inventory. In the future,
a scroll button could potentially be added.
Considerations
There are a few considerations about this feature that are important to note.
The first is that updating the list of nearby characters is a potentially
expensive operation. While I do not believe this is of great concern, since
the window is only available in the curses window port, which is likely only
to be run on powerful computers, it is still important to note.
When the permanent inventory and permanent nearby windows are displayed at
the same time, the screen becomes rather cramped. I attempted to stack them
on top of one another, but was unable to determine how to do so.
Finally, I recognize that the existing update_nearby() calls are likely
insufficient, and there may be a number of edge cases where the window updates
late.
Ports

Curses: Enabled.
Qt: Enabled.
TTY: Functions are stubbed out so the port compiles. Strongly suggest not implementing, since the look_all() functionality accessed with the '/' key essentially duplicates the function of this window, and adding a key to display this window would be an unnecessary duplication of code and functionality.
Windows: Functions are stubbed out so the port is playable. Not implemented.
Shim: Functions are stubbed out so the port is playable. Not implemented.
X11: Functions are stubbed out so the port is playable. Not implemented.

Note that stubbed out functions are written in the manner of perm_invent functions in window ports where that option is not enabled.
Conclusion
That was a lot of words! Feedback is more than welcome.","Funnily enough, I updated the description to say the same thing at almost the exact moment you commented that, entrez. That's where my feelings on this lie as well, now that I've done more digging into things.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,567,2021-08-07T15:29:12Z,,2022-01-27T17:14:39Z,OPEN,False,743,49,65,https://github.com/NullCGT,Display a permanent list of nearby characters,10,[],https://github.com/NetHack/NetHack/pull/567,https://github.com/ostrosablin,7,https://github.com/NetHack/NetHack/pull/567#issuecomment-894810920,"Overview
This pull request adds a window in the curses window port which displays
nearby characters on the map. Pressing a key (bound to ']' by default)
changes whether the window is displaying nearby monsters or nearby
objects.
This pull request is a proof of concept; I am very happy to receive and implement feedback.
Rationale for Change
This is, first and foremost, an accessibility feature. Prospective NetHack
players are often discouraged by the interface, and the lack of explanation
of various characters and symbols. One way to combat this is by displaying
a permanent list of nearby glyphs. Displaying a list of nearby items and
monsters is a feature in many popular modern roguelikes, such as
Cataclsysm: Dark Days Ahead, Brogue, and Dungeon Crawl Stone Soup. In order
to increase its appeal to new players, NetHack should offer this as an
option as well.
Furthermore, this feature can benefit experienced players as well, allowing
them to determine at a glance whether a magenta h is a dwarf king or a
mind flayer. A nearby characters window should greatly speed up play, as well
as reduce some of the tedium of farlooking monsters in order to determine
their identities.
Technical Notes
While much of the code for this feature is taken from the look_all code in
pager.c, there are a number of differences. First, coordinates are omitted
from the window. While displaying coordinates is useful, we risk overwhelming
new players by presenting them with too much information (something NetHack
is already quite good at). Second, we visually distinguish peaceful monsters
with a different bullet point. Third, pet attributes and color are displayed
in this window, so it is easier to read at a glance.
I made the decision to deviate from the standard set by cursinvt.c and avoid
saving the text in memory, since that would greatly complicate the code for
little benefit.
I chose to implement a toggle for the type of nearby characters rather than
a scroll button like the one used in the permanent inventory. In the future,
a scroll button could potentially be added.
Considerations
There are a few considerations about this feature that are important to note.
The first is that updating the list of nearby characters is a potentially
expensive operation. While I do not believe this is of great concern, since
the window is only available in the curses window port, which is likely only
to be run on powerful computers, it is still important to note.
When the permanent inventory and permanent nearby windows are displayed at
the same time, the screen becomes rather cramped. I attempted to stack them
on top of one another, but was unable to determine how to do so.
Finally, I recognize that the existing update_nearby() calls are likely
insufficient, and there may be a number of edge cases where the window updates
late.
Ports

Curses: Enabled.
Qt: Enabled.
TTY: Functions are stubbed out so the port compiles. Strongly suggest not implementing, since the look_all() functionality accessed with the '/' key essentially duplicates the function of this window, and adding a key to display this window would be an unnecessary duplication of code and functionality.
Windows: Functions are stubbed out so the port is playable. Not implemented.
Shim: Functions are stubbed out so the port is playable. Not implemented.
X11: Functions are stubbed out so the port is playable. Not implemented.

Note that stubbed out functions are written in the manner of perm_invent functions in window ports where that option is not enabled.
Conclusion
That was a lot of words! Feedback is more than welcome.","Interesting. Thank you, entrez, today I've learned that under / there's similar monster/object (non-permanent) listing functionality already built in. Will be very useful in crowded situations. NetHack is certainly a game that you're constantly learning and mastering for years. And even paxed seems to be unaware that such feature already exist. NetHack will never stop to surprise me. Love such ""wow, so it WAS possible?"" moments.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,567,2021-08-07T15:29:12Z,,2022-01-27T17:14:39Z,OPEN,False,743,49,65,https://github.com/NullCGT,Display a permanent list of nearby characters,10,[],https://github.com/NetHack/NetHack/pull/567,https://github.com/pat-rankin,8,https://github.com/NetHack/NetHack/pull/567#issuecomment-897229840,"Overview
This pull request adds a window in the curses window port which displays
nearby characters on the map. Pressing a key (bound to ']' by default)
changes whether the window is displaying nearby monsters or nearby
objects.
This pull request is a proof of concept; I am very happy to receive and implement feedback.
Rationale for Change
This is, first and foremost, an accessibility feature. Prospective NetHack
players are often discouraged by the interface, and the lack of explanation
of various characters and symbols. One way to combat this is by displaying
a permanent list of nearby glyphs. Displaying a list of nearby items and
monsters is a feature in many popular modern roguelikes, such as
Cataclsysm: Dark Days Ahead, Brogue, and Dungeon Crawl Stone Soup. In order
to increase its appeal to new players, NetHack should offer this as an
option as well.
Furthermore, this feature can benefit experienced players as well, allowing
them to determine at a glance whether a magenta h is a dwarf king or a
mind flayer. A nearby characters window should greatly speed up play, as well
as reduce some of the tedium of farlooking monsters in order to determine
their identities.
Technical Notes
While much of the code for this feature is taken from the look_all code in
pager.c, there are a number of differences. First, coordinates are omitted
from the window. While displaying coordinates is useful, we risk overwhelming
new players by presenting them with too much information (something NetHack
is already quite good at). Second, we visually distinguish peaceful monsters
with a different bullet point. Third, pet attributes and color are displayed
in this window, so it is easier to read at a glance.
I made the decision to deviate from the standard set by cursinvt.c and avoid
saving the text in memory, since that would greatly complicate the code for
little benefit.
I chose to implement a toggle for the type of nearby characters rather than
a scroll button like the one used in the permanent inventory. In the future,
a scroll button could potentially be added.
Considerations
There are a few considerations about this feature that are important to note.
The first is that updating the list of nearby characters is a potentially
expensive operation. While I do not believe this is of great concern, since
the window is only available in the curses window port, which is likely only
to be run on powerful computers, it is still important to note.
When the permanent inventory and permanent nearby windows are displayed at
the same time, the screen becomes rather cramped. I attempted to stack them
on top of one another, but was unable to determine how to do so.
Finally, I recognize that the existing update_nearby() calls are likely
insufficient, and there may be a number of edge cases where the window updates
late.
Ports

Curses: Enabled.
Qt: Enabled.
TTY: Functions are stubbed out so the port compiles. Strongly suggest not implementing, since the look_all() functionality accessed with the '/' key essentially duplicates the function of this window, and adding a key to display this window would be an unnecessary duplication of code and functionality.
Windows: Functions are stubbed out so the port is playable. Not implemented.
Shim: Functions are stubbed out so the port is playable. Not implemented.
X11: Functions are stubbed out so the port is playable. Not implemented.

Note that stubbed out functions are written in the manner of perm_invent functions in window ports where that option is not enabled.
Conclusion
That was a lot of words! Feedback is more than welcome.","tty could display them below the status line on terminals that have a high row count specified.  It would lose usefulness when there are too many lines of info, but the persistent inventory window already has that problem on other interfaces.
I wonder whether this feature is useful enough to justify the maintenance headache it will bring with it (across all interfaces, not just 'maybe tty').  'perm_invent' has needed a seemingly endless stream of fixes.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,567,2021-08-07T15:29:12Z,,2022-01-27T17:14:39Z,OPEN,False,743,49,65,https://github.com/NullCGT,Display a permanent list of nearby characters,10,[],https://github.com/NetHack/NetHack/pull/567,https://github.com/NullCGT,9,https://github.com/NetHack/NetHack/pull/567#issuecomment-897755091,"Overview
This pull request adds a window in the curses window port which displays
nearby characters on the map. Pressing a key (bound to ']' by default)
changes whether the window is displaying nearby monsters or nearby
objects.
This pull request is a proof of concept; I am very happy to receive and implement feedback.
Rationale for Change
This is, first and foremost, an accessibility feature. Prospective NetHack
players are often discouraged by the interface, and the lack of explanation
of various characters and symbols. One way to combat this is by displaying
a permanent list of nearby glyphs. Displaying a list of nearby items and
monsters is a feature in many popular modern roguelikes, such as
Cataclsysm: Dark Days Ahead, Brogue, and Dungeon Crawl Stone Soup. In order
to increase its appeal to new players, NetHack should offer this as an
option as well.
Furthermore, this feature can benefit experienced players as well, allowing
them to determine at a glance whether a magenta h is a dwarf king or a
mind flayer. A nearby characters window should greatly speed up play, as well
as reduce some of the tedium of farlooking monsters in order to determine
their identities.
Technical Notes
While much of the code for this feature is taken from the look_all code in
pager.c, there are a number of differences. First, coordinates are omitted
from the window. While displaying coordinates is useful, we risk overwhelming
new players by presenting them with too much information (something NetHack
is already quite good at). Second, we visually distinguish peaceful monsters
with a different bullet point. Third, pet attributes and color are displayed
in this window, so it is easier to read at a glance.
I made the decision to deviate from the standard set by cursinvt.c and avoid
saving the text in memory, since that would greatly complicate the code for
little benefit.
I chose to implement a toggle for the type of nearby characters rather than
a scroll button like the one used in the permanent inventory. In the future,
a scroll button could potentially be added.
Considerations
There are a few considerations about this feature that are important to note.
The first is that updating the list of nearby characters is a potentially
expensive operation. While I do not believe this is of great concern, since
the window is only available in the curses window port, which is likely only
to be run on powerful computers, it is still important to note.
When the permanent inventory and permanent nearby windows are displayed at
the same time, the screen becomes rather cramped. I attempted to stack them
on top of one another, but was unable to determine how to do so.
Finally, I recognize that the existing update_nearby() calls are likely
insufficient, and there may be a number of edge cases where the window updates
late.
Ports

Curses: Enabled.
Qt: Enabled.
TTY: Functions are stubbed out so the port compiles. Strongly suggest not implementing, since the look_all() functionality accessed with the '/' key essentially duplicates the function of this window, and adding a key to display this window would be an unnecessary duplication of code and functionality.
Windows: Functions are stubbed out so the port is playable. Not implemented.
Shim: Functions are stubbed out so the port is playable. Not implemented.
X11: Functions are stubbed out so the port is playable. Not implemented.

Note that stubbed out functions are written in the manner of perm_invent functions in window ports where that option is not enabled.
Conclusion
That was a lot of words! Feedback is more than welcome.",I'm planning on releasing an update for my variant fairly soon. I could take this feature and throw it in the release in order to gauge the community's reaction and determine how useful it is.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,567,2021-08-07T15:29:12Z,,2022-01-27T17:14:39Z,OPEN,False,743,49,65,https://github.com/NullCGT,Display a permanent list of nearby characters,10,[],https://github.com/NetHack/NetHack/pull/567,https://github.com/ostrosablin,10,https://github.com/NetHack/NetHack/pull/567#issuecomment-897933363,"Overview
This pull request adds a window in the curses window port which displays
nearby characters on the map. Pressing a key (bound to ']' by default)
changes whether the window is displaying nearby monsters or nearby
objects.
This pull request is a proof of concept; I am very happy to receive and implement feedback.
Rationale for Change
This is, first and foremost, an accessibility feature. Prospective NetHack
players are often discouraged by the interface, and the lack of explanation
of various characters and symbols. One way to combat this is by displaying
a permanent list of nearby glyphs. Displaying a list of nearby items and
monsters is a feature in many popular modern roguelikes, such as
Cataclsysm: Dark Days Ahead, Brogue, and Dungeon Crawl Stone Soup. In order
to increase its appeal to new players, NetHack should offer this as an
option as well.
Furthermore, this feature can benefit experienced players as well, allowing
them to determine at a glance whether a magenta h is a dwarf king or a
mind flayer. A nearby characters window should greatly speed up play, as well
as reduce some of the tedium of farlooking monsters in order to determine
their identities.
Technical Notes
While much of the code for this feature is taken from the look_all code in
pager.c, there are a number of differences. First, coordinates are omitted
from the window. While displaying coordinates is useful, we risk overwhelming
new players by presenting them with too much information (something NetHack
is already quite good at). Second, we visually distinguish peaceful monsters
with a different bullet point. Third, pet attributes and color are displayed
in this window, so it is easier to read at a glance.
I made the decision to deviate from the standard set by cursinvt.c and avoid
saving the text in memory, since that would greatly complicate the code for
little benefit.
I chose to implement a toggle for the type of nearby characters rather than
a scroll button like the one used in the permanent inventory. In the future,
a scroll button could potentially be added.
Considerations
There are a few considerations about this feature that are important to note.
The first is that updating the list of nearby characters is a potentially
expensive operation. While I do not believe this is of great concern, since
the window is only available in the curses window port, which is likely only
to be run on powerful computers, it is still important to note.
When the permanent inventory and permanent nearby windows are displayed at
the same time, the screen becomes rather cramped. I attempted to stack them
on top of one another, but was unable to determine how to do so.
Finally, I recognize that the existing update_nearby() calls are likely
insufficient, and there may be a number of edge cases where the window updates
late.
Ports

Curses: Enabled.
Qt: Enabled.
TTY: Functions are stubbed out so the port compiles. Strongly suggest not implementing, since the look_all() functionality accessed with the '/' key essentially duplicates the function of this window, and adding a key to display this window would be an unnecessary duplication of code and functionality.
Windows: Functions are stubbed out so the port is playable. Not implemented.
Shim: Functions are stubbed out so the port is playable. Not implemented.
X11: Functions are stubbed out so the port is playable. Not implemented.

Note that stubbed out functions are written in the manner of perm_invent functions in window ports where that option is not enabled.
Conclusion
That was a lot of words! Feedback is more than welcome.","@pat-rankin To be honest, perm_invent below status line in tty windowport would be (in my opinion) much more useful than list of nearby characters (as long as there's a way to scroll it like curses counterpart), and it would be a lifesaver for playing on mobile SSH client (because smartphones, even with on-screen keyboard usually still have a plenty of unused vertical screen space, while having a very limited horizontal screen space - this renders curses windowport unusable for smartphones, but perm_invent is just so useful).",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,568,2021-08-08T12:43:47Z,,2022-01-27T17:14:56Z,OPEN,False,31,2,1,https://github.com/gebulmer,Make enchant armor prompt for target item,4,[],https://github.com/NetHack/NetHack/pull/568,https://github.com/gebulmer,1,https://github.com/NetHack/NetHack/pull/568,"This prompts the player for a worn armor piece to enchant when reading a
scroll of enchant armor.
Although this is more flexible than before, the player must select a
worn piece of armor or opt out entirely - they cannot enchant something
that isn't currently equipped.
This should make it more ergonomic to enchant armor, without having
to derobe and shuffle armour pieces around","This prompts the player for a worn armor piece to enchant when reading a
scroll of enchant armor.
Although this is more flexible than before, the player must select a
worn piece of armor or opt out entirely - they cannot enchant something
that isn't currently equipped.
This should make it more ergonomic to enchant armor, without having
to derobe and shuffle armour pieces around",True,"{'THUMBS_UP': ['https://github.com/copperwater', 'https://github.com/k21971', 'https://github.com/ostrosablin', 'https://github.com/NullCGT', 'https://github.com/Planet-Patrick']}"
NetHack/NetHack,https://github.com/NetHack/NetHack,573,2021-08-10T14:40:35Z,2021-10-16T19:37:18Z,2021-10-18T22:59:08Z,CLOSED,False,5,4,1,https://github.com/entrez,Fix: m-prefix movement into warning symbol,1,[],https://github.com/NetHack/NetHack/pull/573,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/573,"Moving into a position containing a warning symbol with m-<direction> to
'safely' move would still attack as though the 'm' prefix was not
specified.  Ensure warning symbols are counted as 'detected' monsters
for this purpose, to avoid falling through to do_attack().","Moving into a position containing a warning symbol with m-<direction> to
'safely' move would still attack as though the 'm' prefix was not
specified.  Ensure warning symbols are counted as 'detected' monsters
for this purpose, to avoid falling through to do_attack().",True,"{'THUMBS_UP': ['https://github.com/gebulmer', 'https://github.com/actual-nh', 'https://github.com/copperwater']}"
NetHack/NetHack,https://github.com/NetHack/NetHack,573,2021-08-10T14:40:35Z,2021-10-16T19:37:18Z,2021-10-18T22:59:08Z,CLOSED,False,5,4,1,https://github.com/entrez,Fix: m-prefix movement into warning symbol,1,[],https://github.com/NetHack/NetHack/pull/573,https://github.com/copperwater,2,https://github.com/NetHack/NetHack/pull/573#issuecomment-898053308,"Moving into a position containing a warning symbol with m-<direction> to
'safely' move would still attack as though the 'm' prefix was not
specified.  Ensure warning symbols are counted as 'detected' monsters
for this purpose, to avoid falling through to do_attack().","For context, the specific nethackwiki example that spawned this bug report: you'll get instapetrified by m-moving into a cockatrice next to you that you can see only with warning.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,574,2021-08-11T13:02:36Z,2021-08-12T17:37:19Z,2021-08-12T20:03:15Z,MERGED,True,12,8,2,https://github.com/entrez,Trapdoor consistency,2,[],https://github.com/NetHack/NetHack/pull/574,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/574,"Some minor follow-ups to 1b7c372 intended to ensure objects which land on
trapdoors/holes without falling through are consistently treated differently
than those which fall into pits.

Permit blind feeling for objects on trapdoor
Fix up msgs when dropping obj on trapdoor","Some minor follow-ups to 1b7c372 intended to ensure objects which land on
trapdoors/holes without falling through are consistently treated differently
than those which fall into pits.

Permit blind feeling for objects on trapdoor
Fix up msgs when dropping obj on trapdoor",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,575,2021-08-11T13:33:21Z,2021-09-26T17:37:19Z,2021-10-04T21:26:39Z,MERGED,True,1,1,2,https://github.com/entrez,Fix: travel from 'interesting' position,1,[],https://github.com/NetHack/NetHack/pull/575,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/575,"(including resuming travel after being interrupted)
Attempting to travel from an 'interesting' spot that would normally
stop travel mid-attempt (next to a door, next to a monster, etc) would
fail to get off the ground, because the 'interesting thing' would halt
travel before taking the first step.
Prior to 433f0cc, initiating travel would immediately trigger a call to
domove in rhack; as part of refactoring travel, the order of events in
rhack was changed so that this didn't happen immediately as before.  Add
domove to the end of dotravel_target to produce a similar effect to the
previous arrangement.
domove also zeroes out g.domove_attempting, which I think is the reason
c0c617c seemed to mitigate some of the issues associated with this
problem (e.g. travel target selection seemingly not registering right
away).
Fixes #559
NB: This is the same thing I was talking about in a comment here a while ago; there's some additional description of the issue and test cases in that comment thread.","(including resuming travel after being interrupted)
Attempting to travel from an 'interesting' spot that would normally
stop travel mid-attempt (next to a door, next to a monster, etc) would
fail to get off the ground, because the 'interesting thing' would halt
travel before taking the first step.
Prior to 433f0cc, initiating travel would immediately trigger a call to
domove in rhack; as part of refactoring travel, the order of events in
rhack was changed so that this didn't happen immediately as before.  Add
domove to the end of dotravel_target to produce a similar effect to the
previous arrangement.
domove also zeroes out g.domove_attempting, which I think is the reason
c0c617c seemed to mitigate some of the issues associated with this
problem (e.g. travel target selection seemingly not registering right
away).
Fixes #559
NB: This is the same thing I was talking about in a comment here a while ago; there's some additional description of the issue and test cases in that comment thread.",True,"{'THUMBS_UP': ['https://github.com/gebulmer', 'https://github.com/actual-nh', 'https://github.com/copperwater']}"
NetHack/NetHack,https://github.com/NetHack/NetHack,577,2021-08-18T03:36:36Z,2021-08-22T12:54:09Z,2021-08-22T12:54:17Z,CLOSED,False,1,1,1,https://github.com/copperwater,Fix: gold dragon scale mail remains lit in bones,1,[],https://github.com/NetHack/NetHack/pull/577,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/577,"This is caused by the bones-pile-making routine using artifact_light()
as a test for whether it needs to call end_burn. Gold dragon scale mail
uses artifact_light(), but only returns true when its owornmask is set.
But owornmask was getting zeroed right before artifact_light() is
called. Fix is to move it right after instead.
Tested that Sunsword is not affected by this (created bones while
wearing gold dragon scales and wielding Sunsword in a dark area; when
returning to them, no light was emitted from the gravesite) because it
always returns true in artifact_light() irrespective of owornmask.","This is caused by the bones-pile-making routine using artifact_light()
as a test for whether it needs to call end_burn. Gold dragon scale mail
uses artifact_light(), but only returns true when its owornmask is set.
But owornmask was getting zeroed right before artifact_light() is
called. Fix is to move it right after instead.
Tested that Sunsword is not affected by this (created bones while
wearing gold dragon scales and wielding Sunsword in a dark area; when
returning to them, no light was emitted from the gravesite) because it
always returns true in artifact_light() irrespective of owornmask.",True,{'THUMBS_UP': ['https://github.com/entrez']}
NetHack/NetHack,https://github.com/NetHack/NetHack,577,2021-08-18T03:36:36Z,2021-08-22T12:54:09Z,2021-08-22T12:54:17Z,CLOSED,False,1,1,1,https://github.com/copperwater,Fix: gold dragon scale mail remains lit in bones,1,[],https://github.com/NetHack/NetHack/pull/577,https://github.com/copperwater,2,https://github.com/NetHack/NetHack/pull/577#issuecomment-903264617,"This is caused by the bones-pile-making routine using artifact_light()
as a test for whether it needs to call end_burn. Gold dragon scale mail
uses artifact_light(), but only returns true when its owornmask is set.
But owornmask was getting zeroed right before artifact_light() is
called. Fix is to move it right after instead.
Tested that Sunsword is not affected by this (created bones while
wearing gold dragon scales and wielding Sunsword in a dark area; when
returning to them, no light was emitted from the gravesite) because it
always returns true in artifact_light() irrespective of owornmask.",This was committed in 8983555,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,578,2021-08-20T23:27:59Z,2021-08-31T13:25:02Z,2021-08-31T13:25:06Z,CLOSED,False,1,1,1,https://github.com/entrez,Count all poly'ing tins as potential sliming cures,1,[],https://github.com/NetHack/NetHack/pull/578,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/578,"Popeye, used to check whether eating a particular tin is a potential
lifesaving action, considered tins of chameleon meat a cure for sliming
(since you can polymorph into a fiery monster), but didn't credit the
same possible curative power to other tins which can polymorph the hero.
Use the polyfodder macro (used elsewhere to check whether eating
something will polymorph a monster/pet) to determine whether a tin will
polymorph the hero.","Popeye, used to check whether eating a particular tin is a potential
lifesaving action, considered tins of chameleon meat a cure for sliming
(since you can polymorph into a fiery monster), but didn't credit the
same possible curative power to other tins which can polymorph the hero.
Use the polyfodder macro (used elsewhere to check whether eating
something will polymorph a monster/pet) to determine whether a tin will
polymorph the hero.",True,{'THUMBS_UP': ['https://github.com/copperwater']}
NetHack/NetHack,https://github.com/NetHack/NetHack,579,2021-08-22T15:06:51Z,2021-08-29T12:09:16Z,2021-08-29T12:09:17Z,CLOSED,False,81,86,23,https://github.com/copperwater,Remove g.monstermoves,1,[],https://github.com/NetHack/NetHack/pull/579,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/579,"It's redundant with g.moves, so there is no more need for it.
Way, way back, it looks like g.moves and g.monstermoves can and did
desync, where g.moves would track the amount of moves the player had
gotten (and would therefore increase faster if the player were hasted)
and g.monstermoves would track the amount of monster move cycles, aka
turns. But this has not been the case for a long time, and they both
increment together in the same location in allmain.c. There are no
longer any cases where they will not be the same value.
This is a save-breaking change because it changes struct
instance_globals, but I have not updated the editlevel in this commit.
Also, fixes #288 (the comment in decl.h is wrong).","It's redundant with g.moves, so there is no more need for it.
Way, way back, it looks like g.moves and g.monstermoves can and did
desync, where g.moves would track the amount of moves the player had
gotten (and would therefore increase faster if the player were hasted)
and g.monstermoves would track the amount of monster move cycles, aka
turns. But this has not been the case for a long time, and they both
increment together in the same location in allmain.c. There are no
longer any cases where they will not be the same value.
This is a save-breaking change because it changes struct
instance_globals, but I have not updated the editlevel in this commit.
Also, fixes #288 (the comment in decl.h is wrong).",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,579,2021-08-22T15:06:51Z,2021-08-29T12:09:16Z,2021-08-29T12:09:17Z,CLOSED,False,81,86,23,https://github.com/copperwater,Remove g.monstermoves,1,[],https://github.com/NetHack/NetHack/pull/579,https://github.com/pat-rankin,2,https://github.com/NetHack/NetHack/pull/579#issuecomment-903328608,"It's redundant with g.moves, so there is no more need for it.
Way, way back, it looks like g.moves and g.monstermoves can and did
desync, where g.moves would track the amount of moves the player had
gotten (and would therefore increase faster if the player were hasted)
and g.monstermoves would track the amount of monster move cycles, aka
turns. But this has not been the case for a long time, and they both
increment together in the same location in allmain.c. There are no
longer any cases where they will not be the same value.
This is a save-breaking change because it changes struct
instance_globals, but I have not updated the editlevel in this commit.
Also, fixes #288 (the comment in decl.h is wrong).","The struct 'instance_globals' is not saved and restored.  However, individual variable 'g.monstermoves' is, so this will break saves, just not for the reason mentioned.
In the fairly distant past, monstermoves was used to catch up for lost time whenever the hero returned to a previously visited level and when migrating monsters eventually arrived at their destination.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,579,2021-08-22T15:06:51Z,2021-08-29T12:09:16Z,2021-08-29T12:09:17Z,CLOSED,False,81,86,23,https://github.com/copperwater,Remove g.monstermoves,1,[],https://github.com/NetHack/NetHack/pull/579,https://github.com/copperwater,3,https://github.com/NetHack/NetHack/pull/579#issuecomment-907781524,"It's redundant with g.moves, so there is no more need for it.
Way, way back, it looks like g.moves and g.monstermoves can and did
desync, where g.moves would track the amount of moves the player had
gotten (and would therefore increase faster if the player were hasted)
and g.monstermoves would track the amount of monster move cycles, aka
turns. But this has not been the case for a long time, and they both
increment together in the same location in allmain.c. There are no
longer any cases where they will not be the same value.
This is a save-breaking change because it changes struct
instance_globals, but I have not updated the editlevel in this commit.
Also, fixes #288 (the comment in decl.h is wrong).",This has been added.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,580,2021-08-23T01:15:06Z,2021-08-28T14:08:26Z,2021-08-28T14:08:26Z,CLOSED,False,51,21,7,https://github.com/copperwater,Remove requirement of object probs adding to 1000,1,[],https://github.com/NetHack/NetHack/pull/580,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/580,"When discussing the recent commit that removed makedefs -o from the
build process, nhmall pointed out that a sanity check ensuring all
objects within one class add up to 1000 probability had been removed as
well. This requirement was a perennial thorn in the side for anyone
doing anything that touches object probabilities, because allocating
probability to something meant deciding what to take it away from,
without a good way to evenly distribute that across all the other
members of the object class.
I had gotten around this in xNetHack by removing the sanity check and
making mkobj() total up the probability within an object class and then
using that instead of 1000. This commit takes a similar approach, but
instead of inefficiently recalculating the sum every time mkobj() is
called, it instead computes it at the start of the game and stores it in
a global variable.
This fixes a slight bias problem with rings - they are all supposed to
be of equal probability, but there are 28 of them and 1000 is not evenly
divisible by that, so the old formula made the later rings slightly more
likely. Now instead of a 35/1000 or 36/1000 chance, they are all
uniformly 1/28. (Internally they have a oc_prob of 1 now, not 0).
Gems are also weird, because their oc_prob values change every level.
This ought to have still worked without a change, because the arcane
formula for assigning the probabilities would still end up with them
adding to 1000. But I added in code to reset the total gem probability
anyway; this may help make the formula less arcane in the future.
There is still a sanity check against object classes having zero total
probability, in which case the game will not start. I also downgraded
the ""probtype error"" panic in mkobj() to an impossible because it has a
reasonable failure case - return the first item in that class.","When discussing the recent commit that removed makedefs -o from the
build process, nhmall pointed out that a sanity check ensuring all
objects within one class add up to 1000 probability had been removed as
well. This requirement was a perennial thorn in the side for anyone
doing anything that touches object probabilities, because allocating
probability to something meant deciding what to take it away from,
without a good way to evenly distribute that across all the other
members of the object class.
I had gotten around this in xNetHack by removing the sanity check and
making mkobj() total up the probability within an object class and then
using that instead of 1000. This commit takes a similar approach, but
instead of inefficiently recalculating the sum every time mkobj() is
called, it instead computes it at the start of the game and stores it in
a global variable.
This fixes a slight bias problem with rings - they are all supposed to
be of equal probability, but there are 28 of them and 1000 is not evenly
divisible by that, so the old formula made the later rings slightly more
likely. Now instead of a 35/1000 or 36/1000 chance, they are all
uniformly 1/28. (Internally they have a oc_prob of 1 now, not 0).
Gems are also weird, because their oc_prob values change every level.
This ought to have still worked without a change, because the arcane
formula for assigning the probabilities would still end up with them
adding to 1000. But I added in code to reset the total gem probability
anyway; this may help make the formula less arcane in the future.
There is still a sanity check against object classes having zero total
probability, in which case the game will not start. I also downgraded
the ""probtype error"" panic in mkobj() to an impossible because it has a
reasonable failure case - return the first item in that class.",True,"{'THUMBS_UP': ['https://github.com/k21971', 'https://github.com/gebulmer']}"
NetHack/NetHack,https://github.com/NetHack/NetHack,580,2021-08-23T01:15:06Z,2021-08-28T14:08:26Z,2021-08-28T14:08:26Z,CLOSED,False,51,21,7,https://github.com/copperwater,Remove requirement of object probs adding to 1000,1,[],https://github.com/NetHack/NetHack/pull/580,https://github.com/copperwater,2,https://github.com/NetHack/NetHack/pull/580#issuecomment-903374875,"When discussing the recent commit that removed makedefs -o from the
build process, nhmall pointed out that a sanity check ensuring all
objects within one class add up to 1000 probability had been removed as
well. This requirement was a perennial thorn in the side for anyone
doing anything that touches object probabilities, because allocating
probability to something meant deciding what to take it away from,
without a good way to evenly distribute that across all the other
members of the object class.
I had gotten around this in xNetHack by removing the sanity check and
making mkobj() total up the probability within an object class and then
using that instead of 1000. This commit takes a similar approach, but
instead of inefficiently recalculating the sum every time mkobj() is
called, it instead computes it at the start of the game and stores it in
a global variable.
This fixes a slight bias problem with rings - they are all supposed to
be of equal probability, but there are 28 of them and 1000 is not evenly
divisible by that, so the old formula made the later rings slightly more
likely. Now instead of a 35/1000 or 36/1000 chance, they are all
uniformly 1/28. (Internally they have a oc_prob of 1 now, not 0).
Gems are also weird, because their oc_prob values change every level.
This ought to have still worked without a change, because the arcane
formula for assigning the probabilities would still end up with them
adding to 1000. But I added in code to reset the total gem probability
anyway; this may help make the formula less arcane in the future.
There is still a sanity check against object classes having zero total
probability, in which case the game will not start. I also downgraded
the ""probtype error"" panic in mkobj() to an impossible because it has a
reasonable failure case - return the first item in that class.","Marked draft because I thought everything in instance_globals was saved and restored, which isn't the case. The new field needs to be either added to the save file or regenerated upon restoring the game. Will take a look tomorrow.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,580,2021-08-23T01:15:06Z,2021-08-28T14:08:26Z,2021-08-28T14:08:26Z,CLOSED,False,51,21,7,https://github.com/copperwater,Remove requirement of object probs adding to 1000,1,[],https://github.com/NetHack/NetHack/pull/580,https://github.com/copperwater,3,https://github.com/NetHack/NetHack/pull/580#issuecomment-904762217,"When discussing the recent commit that removed makedefs -o from the
build process, nhmall pointed out that a sanity check ensuring all
objects within one class add up to 1000 probability had been removed as
well. This requirement was a perennial thorn in the side for anyone
doing anything that touches object probabilities, because allocating
probability to something meant deciding what to take it away from,
without a good way to evenly distribute that across all the other
members of the object class.
I had gotten around this in xNetHack by removing the sanity check and
making mkobj() total up the probability within an object class and then
using that instead of 1000. This commit takes a similar approach, but
instead of inefficiently recalculating the sum every time mkobj() is
called, it instead computes it at the start of the game and stores it in
a global variable.
This fixes a slight bias problem with rings - they are all supposed to
be of equal probability, but there are 28 of them and 1000 is not evenly
divisible by that, so the old formula made the later rings slightly more
likely. Now instead of a 35/1000 or 36/1000 chance, they are all
uniformly 1/28. (Internally they have a oc_prob of 1 now, not 0).
Gems are also weird, because their oc_prob values change every level.
This ought to have still worked without a change, because the arcane
formula for assigning the probabilities would still end up with them
adding to 1000. But I added in code to reset the total gem probability
anyway; this may help make the formula less arcane in the future.
There is still a sanity check against object classes having zero total
probability, in which case the game will not start. I also downgraded
the ""probtype error"" panic in mkobj() to an impossible because it has a
reasonable failure case - return the first item in that class.","Changed it so that the field is populated both at game start and at game restore.
Interestingly, if a game is saved, then the binary is recompiled with different oc_prob values, and then the saved game is restored, it will continue to use the original probabilities from before, because objects[] is written into the save file. I suppose the same thing happens currently, under the constraint that oc_prob must still total 1000, so this isn't really changing how that works.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,580,2021-08-23T01:15:06Z,2021-08-28T14:08:26Z,2021-08-28T14:08:26Z,CLOSED,False,51,21,7,https://github.com/copperwater,Remove requirement of object probs adding to 1000,1,[],https://github.com/NetHack/NetHack/pull/580,https://github.com/paxed,4,https://github.com/NetHack/NetHack/pull/580#issuecomment-907591940,"When discussing the recent commit that removed makedefs -o from the
build process, nhmall pointed out that a sanity check ensuring all
objects within one class add up to 1000 probability had been removed as
well. This requirement was a perennial thorn in the side for anyone
doing anything that touches object probabilities, because allocating
probability to something meant deciding what to take it away from,
without a good way to evenly distribute that across all the other
members of the object class.
I had gotten around this in xNetHack by removing the sanity check and
making mkobj() total up the probability within an object class and then
using that instead of 1000. This commit takes a similar approach, but
instead of inefficiently recalculating the sum every time mkobj() is
called, it instead computes it at the start of the game and stores it in
a global variable.
This fixes a slight bias problem with rings - they are all supposed to
be of equal probability, but there are 28 of them and 1000 is not evenly
divisible by that, so the old formula made the later rings slightly more
likely. Now instead of a 35/1000 or 36/1000 chance, they are all
uniformly 1/28. (Internally they have a oc_prob of 1 now, not 0).
Gems are also weird, because their oc_prob values change every level.
This ought to have still worked without a change, because the arcane
formula for assigning the probabilities would still end up with them
adding to 1000. But I added in code to reset the total gem probability
anyway; this may help make the formula less arcane in the future.
There is still a sanity check against object classes having zero total
probability, in which case the game will not start. I also downgraded
the ""probtype error"" panic in mkobj() to an impossible because it has a
reasonable failure case - return the first item in that class.","Has some compile warnings in o_init.c and restore.c, plz fix.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,580,2021-08-23T01:15:06Z,2021-08-28T14:08:26Z,2021-08-28T14:08:26Z,CLOSED,False,51,21,7,https://github.com/copperwater,Remove requirement of object probs adding to 1000,1,[],https://github.com/NetHack/NetHack/pull/580,https://github.com/paxed,5,https://github.com/NetHack/NetHack/pull/580#issuecomment-907631528,"When discussing the recent commit that removed makedefs -o from the
build process, nhmall pointed out that a sanity check ensuring all
objects within one class add up to 1000 probability had been removed as
well. This requirement was a perennial thorn in the side for anyone
doing anything that touches object probabilities, because allocating
probability to something meant deciding what to take it away from,
without a good way to evenly distribute that across all the other
members of the object class.
I had gotten around this in xNetHack by removing the sanity check and
making mkobj() total up the probability within an object class and then
using that instead of 1000. This commit takes a similar approach, but
instead of inefficiently recalculating the sum every time mkobj() is
called, it instead computes it at the start of the game and stores it in
a global variable.
This fixes a slight bias problem with rings - they are all supposed to
be of equal probability, but there are 28 of them and 1000 is not evenly
divisible by that, so the old formula made the later rings slightly more
likely. Now instead of a 35/1000 or 36/1000 chance, they are all
uniformly 1/28. (Internally they have a oc_prob of 1 now, not 0).
Gems are also weird, because their oc_prob values change every level.
This ought to have still worked without a change, because the arcane
formula for assigning the probabilities would still end up with them
adding to 1000. But I added in code to reset the total gem probability
anyway; this may help make the formula less arcane in the future.
There is still a sanity check against object classes having zero total
probability, in which case the game will not start. I also downgraded
the ""probtype error"" panic in mkobj() to an impossible because it has a
reasonable failure case - return the first item in that class.",Committed.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,583,2021-09-02T13:39:12Z,2021-09-03T05:28:52Z,2021-09-03T05:28:52Z,CLOSED,False,1,1,1,https://github.com/copperwater,Fix: replace_terrain used wrong y2 coordinate,1,[],https://github.com/NetHack/NetHack/pull/583,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/583,"It erroneously uses x2 again instead of the y2 value. It looks like in most cases where replace_terrain is specified with a region, the region goes to the bottom of the screen, and this effect wasn't noticed; but there are some cases like in Orcish Town where it might have been knocking down the wrong walls.","It erroneously uses x2 again instead of the y2 value. It looks like in most cases where replace_terrain is specified with a region, the region goes to the bottom of the screen, and this effect wasn't noticed; but there are some cases like in Orcish Town where it might have been knocking down the wrong walls.",True,{'THUMBS_UP': ['https://github.com/entrez']}
NetHack/NetHack,https://github.com/NetHack/NetHack,583,2021-09-02T13:39:12Z,2021-09-03T05:28:52Z,2021-09-03T05:28:52Z,CLOSED,False,1,1,1,https://github.com/copperwater,Fix: replace_terrain used wrong y2 coordinate,1,[],https://github.com/NetHack/NetHack/pull/583,https://github.com/paxed,2,https://github.com/NetHack/NetHack/pull/583#issuecomment-912266077,"It erroneously uses x2 again instead of the y2 value. It looks like in most cases where replace_terrain is specified with a region, the region goes to the bottom of the screen, and this effect wasn't noticed; but there are some cases like in Orcish Town where it might have been knocking down the wrong walls.",Committed.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,584,2021-09-03T11:35:02Z,2021-09-05T02:37:15Z,2021-09-05T02:37:15Z,CLOSED,False,3,3,1,https://github.com/copperwater,Disambiguate blunt weapons,1,[],https://github.com/NetHack/NetHack/pull/584,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/584,"Currently weapons are set up as piercing, slashing, or whacking, using
their object's oc_dir field, with the intention that certain weapons
can classify as both. However, since oc_dir is only 2 bits and WHACK is
0, there's no way to unambiguously express some of these combinations.
Certain weapons such as the lucern hammer are defined as combination
piercing/blunt weapons, but the game just sees it as a piercing weapon.
This commit adds a third bit to oc_dir and promotes the WHACK constant
to its own bit. Nothing should be affected by this (wand directions and
the like should remain working as usual) other than the
blunt-and-something-else weapons being defined properly.","Currently weapons are set up as piercing, slashing, or whacking, using
their object's oc_dir field, with the intention that certain weapons
can classify as both. However, since oc_dir is only 2 bits and WHACK is
0, there's no way to unambiguously express some of these combinations.
Certain weapons such as the lucern hammer are defined as combination
piercing/blunt weapons, but the game just sees it as a piercing weapon.
This commit adds a third bit to oc_dir and promotes the WHACK constant
to its own bit. Nothing should be affected by this (wand directions and
the like should remain working as usual) other than the
blunt-and-something-else weapons being defined properly.",True,{'THUMBS_UP': ['https://github.com/actual-nh']}
NetHack/NetHack,https://github.com/NetHack/NetHack,585,2021-09-03T21:00:59Z,2021-09-05T01:37:16Z,2021-09-06T05:17:00Z,CLOSED,False,1,1,1,https://github.com/entrez,Fix: 'Suddenly you cannot see it',1,[],https://github.com/NetHack/NetHack/pull/585,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/585,"Updates to m_dowear_type(worn.c) in 5a09a01 inadvertently reversed
the effect of an xor near the end of the function, causing it to go from
testing whether a monster's status as 'seen' or 'unseen' changed over
the course of the function to testing whether it remained the same.
As a result, whenever an unseen, invisible monster donned a piece of
armor anywhere on the map, the message 'suddenly you cannot see it'
would be printed.  Fix the xor so that it goes back to testing whether
visibility changed since the start of the function.","Updates to m_dowear_type(worn.c) in 5a09a01 inadvertently reversed
the effect of an xor near the end of the function, causing it to go from
testing whether a monster's status as 'seen' or 'unseen' changed over
the course of the function to testing whether it remained the same.
As a result, whenever an unseen, invisible monster donned a piece of
armor anywhere on the map, the message 'suddenly you cannot see it'
would be printed.  Fix the xor so that it goes back to testing whether
visibility changed since the start of the function.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,588,2021-09-07T19:15:14Z,2021-09-26T17:37:19Z,2021-09-26T18:45:21Z,MERGED,True,1,1,1,https://github.com/copperwater,Fix: running on ice sent hero in weird directions,1,[],https://github.com/NetHack/NetHack/pull/588,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/588,"It's because ice was being treated as a type of
corridor rather than a ROOM space, and running has rules for following
similar terrain. In reality it's not a corridor and should behave like
normal room for running purposes.
This was obvious in the valkyrie quest upper levels with ice fields, in
which running into the edges of the map obliquely, or into the corners
of the map, would send the hero flying around the edge in a different,
probably unintended direction.","It's because ice was being treated as a type of
corridor rather than a ROOM space, and running has rules for following
similar terrain. In reality it's not a corridor and should behave like
normal room for running purposes.
This was obvious in the valkyrie quest upper levels with ice fields, in
which running into the edges of the map obliquely, or into the corners
of the map, would send the hero flying around the edge in a different,
probably unintended direction.",True,{'THUMBS_UP': ['https://github.com/entrez']}
NetHack/NetHack,https://github.com/NetHack/NetHack,590,2021-09-22T18:35:12Z,2021-09-26T17:37:19Z,2021-09-26T18:00:36Z,MERGED,True,0,2,1,https://github.com/argrath,delete extra lines in Guidebook.mn,1,[],https://github.com/NetHack/NetHack/pull/590,https://github.com/argrath,1,https://github.com/NetHack/NetHack/pull/590,"Guidebook.mn has some extra lines.
This PR deletes them.","Guidebook.mn has some extra lines.
This PR deletes them.",True,"{'THUMBS_UP': ['https://github.com/copperwater', 'https://github.com/entrez']}"
NetHack/NetHack,https://github.com/NetHack/NetHack,591,2021-09-25T14:29:21Z,2021-09-26T17:37:19Z,2021-09-26T18:00:51Z,MERGED,True,65,33,1,https://github.com/argrath,Supply missing changes on Guidebook.tex,1,[],https://github.com/NetHack/NetHack/pull/591,https://github.com/argrath,1,https://github.com/NetHack/NetHack/pull/591,"Some changes applied to Guidebook.mn were not applied to Guidebook.tex.
This commit supplies them.","Some changes applied to Guidebook.mn were not applied to Guidebook.tex.
This commit supplies them.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,592,2021-09-26T22:05:40Z,2021-10-16T18:37:31Z,2021-10-16T18:37:31Z,MERGED,True,2,3,1,https://github.com/copperwater,Fix out-of-bounds access of xdir and ydir in farlook,1,[],https://github.com/NetHack/NetHack/pull/592,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/592,"In commit db68395, most of the instances of xdir and ydir here were
changed to u.dx and u.dy, but not all of them. The remaining ones are
out-of-bounds on xdir and ydir, because i is always set to 12 from an
earlier loop and is no longer involved in handling user input. They
should be u.dx and u.dy like the rest.","In commit db68395, most of the instances of xdir and ydir here were
changed to u.dx and u.dy, but not all of them. The remaining ones are
out-of-bounds on xdir and ydir, because i is always set to 12 from an
earlier loop and is no longer involved in handling user input. They
should be u.dx and u.dy like the rest.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,597,2021-09-30T11:55:23Z,2021-12-30T19:15:59Z,2021-12-30T21:10:33Z,CLOSED,False,1,1,1,https://github.com/entrez,Fix: chameleon quickmimic not reset after eating,1,[],https://github.com/NetHack/NetHack/pull/597,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/597,"finish_meating was checking whether the monster in question was a
chameleon/shapechanger, rather than whether it was a mimic, in deciding
which monsters should be allowed to maintain their current appearance
once they finish eating.  This meant that true mimics had their
appearance reset, while a chameleon, vampire, etc, who ate a mimic
would maintain their appearance as a tripe ration even after they had
finished eating and resumed their normal behavior.  The result?  An
amazing living tripe ration which followed the hero around throughout
the level:

  
    
    

    its___ALIIVEEEE.mp4","finish_meating was checking whether the monster in question was a
chameleon/shapechanger, rather than whether it was a mimic, in deciding
which monsters should be allowed to maintain their current appearance
once they finish eating.  This meant that true mimics had their
appearance reset, while a chameleon, vampire, etc, who ate a mimic
would maintain their appearance as a tripe ration even after they had
finished eating and resumed their normal behavior.  The result?  An
amazing living tripe ration which followed the hero around throughout
the level:

  
    
    

    its___ALIIVEEEE.mp4",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,597,2021-09-30T11:55:23Z,2021-12-30T19:15:59Z,2021-12-30T21:10:33Z,CLOSED,False,1,1,1,https://github.com/entrez,Fix: chameleon quickmimic not reset after eating,1,[],https://github.com/NetHack/NetHack/pull/597,https://github.com/k21971,2,https://github.com/NetHack/NetHack/pull/597#issuecomment-931254831,"finish_meating was checking whether the monster in question was a
chameleon/shapechanger, rather than whether it was a mimic, in deciding
which monsters should be allowed to maintain their current appearance
once they finish eating.  This meant that true mimics had their
appearance reset, while a chameleon, vampire, etc, who ate a mimic
would maintain their appearance as a tripe ration even after they had
finished eating and resumed their normal behavior.  The result?  An
amazing living tripe ration which followed the hero around throughout
the level:

  
    
    

    its___ALIIVEEEE.mp4",Noooo... don't fix this 😃,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,597,2021-09-30T11:55:23Z,2021-12-30T19:15:59Z,2021-12-30T21:10:33Z,CLOSED,False,1,1,1,https://github.com/entrez,Fix: chameleon quickmimic not reset after eating,1,[],https://github.com/NetHack/NetHack/pull/597,https://github.com/paxed,3,https://github.com/NetHack/NetHack/pull/597#issuecomment-1003151610,"finish_meating was checking whether the monster in question was a
chameleon/shapechanger, rather than whether it was a mimic, in deciding
which monsters should be allowed to maintain their current appearance
once they finish eating.  This meant that true mimics had their
appearance reset, while a chameleon, vampire, etc, who ate a mimic
would maintain their appearance as a tripe ration even after they had
finished eating and resumed their normal behavior.  The result?  An
amazing living tripe ration which followed the hero around throughout
the level:

  
    
    

    its___ALIIVEEEE.mp4",Merged,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,598,2021-09-30T13:50:45Z,2021-10-28T03:37:18Z,2021-10-28T13:48:22Z,CLOSED,False,5,4,1,https://github.com/entrez,Fix: baalz_fixup didn't account for level rotation ,1,[],https://github.com/NetHack/NetHack/pull/598,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/598,"Because some spots in the fly's 'legs' on the Baalzebub lair level are
specified as pools in the level file, then later converted to walls in a
post-generation fixup routine, monsters can be generated on those spots
and then left walled up and inaccessible, Cask of Amontillado style.
For the love of God, makemon-tresor!
Some code already existed to relocate these monsters after generating
the level, but it depends on misorientated 'leg segments' being fixed up
in a particular way.  That wasn't being triggered because it didn't
account for the possible rotation of the level; as a result, the
monsters in the leg segments wouldn't be relocated, and the leg segments
themselves would continue to have the wrong orientation.
Account for possible level rotation so that the monsters are relocated
properly (and the leg segments are 'fixed').","Because some spots in the fly's 'legs' on the Baalzebub lair level are
specified as pools in the level file, then later converted to walls in a
post-generation fixup routine, monsters can be generated on those spots
and then left walled up and inaccessible, Cask of Amontillado style.
For the love of God, makemon-tresor!
Some code already existed to relocate these monsters after generating
the level, but it depends on misorientated 'leg segments' being fixed up
in a particular way.  That wasn't being triggered because it didn't
account for the possible rotation of the level; as a result, the
monsters in the leg segments wouldn't be relocated, and the leg segments
themselves would continue to have the wrong orientation.
Account for possible level rotation so that the monsters are relocated
properly (and the leg segments are 'fixed').",True,{'THUMBS_UP': ['https://github.com/gebulmer']}
NetHack/NetHack,https://github.com/NetHack/NetHack,598,2021-09-30T13:50:45Z,2021-10-28T03:37:18Z,2021-10-28T13:48:22Z,CLOSED,False,5,4,1,https://github.com/entrez,Fix: baalz_fixup didn't account for level rotation ,1,[],https://github.com/NetHack/NetHack/pull/598,https://github.com/entrez,2,https://github.com/NetHack/NetHack/pull/598#issuecomment-931347514,"Because some spots in the fly's 'legs' on the Baalzebub lair level are
specified as pools in the level file, then later converted to walls in a
post-generation fixup routine, monsters can be generated on those spots
and then left walled up and inaccessible, Cask of Amontillado style.
For the love of God, makemon-tresor!
Some code already existed to relocate these monsters after generating
the level, but it depends on misorientated 'leg segments' being fixed up
in a particular way.  That wasn't being triggered because it didn't
account for the possible rotation of the level; as a result, the
monsters in the leg segments wouldn't be relocated, and the leg segments
themselves would continue to have the wrong orientation.
Account for possible level rotation so that the monsters are relocated
properly (and the leg segments are 'fixed').","Okay, this was a little premature -- there's already code in there that's supposed to solve this problem, but it's not working...
I think I have it figured out now, though the fix is no longer specifically about monsters stuck in the walls.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,599,2021-09-30T17:33:05Z,2021-10-26T23:37:17Z,2021-10-27T15:55:38Z,CLOSED,False,6,2,3,https://github.com/entrez,Fix: artifacts silently removed from the game ,2,[],https://github.com/NetHack/NetHack/pull/599,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/599,"Prevent some cases where artifacts may be generated and then immediately deleted, with the effect that they are permanently removed from the game (as pointed out by @copperwater).  Use artifact_exists(..., FALSE) to ""unmake"" artifacts in these scenarios, and formally prevent artifacts from showing up randomly in boxes (has effectively been the case already, but was not explicitly blocked).  This should prevent situations where an artifact is counted as ""generated"" without actually being added to the game.","Prevent some cases where artifacts may be generated and then immediately deleted, with the effect that they are permanently removed from the game (as pointed out by @copperwater).  Use artifact_exists(..., FALSE) to ""unmake"" artifacts in these scenarios, and formally prevent artifacts from showing up randomly in boxes (has effectively been the case already, but was not explicitly blocked).  This should prevent situations where an artifact is counted as ""generated"" without actually being added to the game.",True,"{'THUMBS_UP': ['https://github.com/copperwater', 'https://github.com/gebulmer', 'https://github.com/nhmall']}"
NetHack/NetHack,https://github.com/NetHack/NetHack,601,2021-10-08T19:53:09Z,,2022-01-27T17:22:24Z,OPEN,False,7,1,1,https://github.com/Vivit-R,Merge item stacks regardless of bknown,2,[],https://github.com/NetHack/NetHack/pull/601,https://github.com/Vivit-R,1,https://github.com/NetHack/NetHack/pull/601,"Currently, items that have been #named stack with items that have not, with the unnamed item stack acquiring the name of the named item stack as soon as the two meet each other in your inventory. This means that it's strictly better to have a stackable item informally BUC-identified than it is to have it formally BUC-identified, because then other items with the same beatitude you find later will stack with it and become (informally) BUC-identified as well.
This results in strategies like dropping only one dart on the altar and #naming the stack according to the results. To remove this tedium, I've tweaked the behavior so that formal BUC-identification behaves the same way as informal BUC-identification. Some variants already implement this change—I know Fourk does, but I'm not sure about 4.
A more radical possibility I considered was doing the same for the knowledge of the enchantment/fooproofing of an item, effectively removing the effect of ID status completely (except maybe dknown when the player is blind) on the stackability of items, but that's a larger change, so I'm saving it for a different PR.","Currently, items that have been #named stack with items that have not, with the unnamed item stack acquiring the name of the named item stack as soon as the two meet each other in your inventory. This means that it's strictly better to have a stackable item informally BUC-identified than it is to have it formally BUC-identified, because then other items with the same beatitude you find later will stack with it and become (informally) BUC-identified as well.
This results in strategies like dropping only one dart on the altar and #naming the stack according to the results. To remove this tedium, I've tweaked the behavior so that formal BUC-identification behaves the same way as informal BUC-identification. Some variants already implement this change—I know Fourk does, but I'm not sure about 4.
A more radical possibility I considered was doing the same for the knowledge of the enchantment/fooproofing of an item, effectively removing the effect of ID status completely (except maybe dknown when the player is blind) on the stackability of items, but that's a larger change, so I'm saving it for a different PR.",True,{'THUMBS_UP': ['https://github.com/copperwater']}
NetHack/NetHack,https://github.com/NetHack/NetHack,602,2021-10-09T03:25:20Z,2021-10-16T19:37:18Z,2021-10-16T19:37:18Z,CLOSED,False,2,2,1,https://github.com/Vivit-R,Correct the imp's period-speak,1,[],https://github.com/NetHack/NetHack/pull/602,https://github.com/Vivit-R,1,https://github.com/NetHack/NetHack/pull/602,"The imp's insults all seem to be grammatically correct Early Modern English, with one major exception: the phrase ""I wouldst fart."" The second-person modal verb wouldst does not agree with the first-person subject I. I've corrected this, and also changed the verb from would to should to conform more closely to older distinctions between should and would.
The other change I've made is more minor; I've changed thy in ""thy odor"" to thine as the word appeared before vowel sounds (consistently with ""Thou disgracest this noble court with thine impure presence""). I also changed the -or to -our because it was really bugging me to see a very modern American English spelling mixed in with Early Modern English, but that I can change back if it's a rule that all of NetHack is supposed to use American spellings.","The imp's insults all seem to be grammatically correct Early Modern English, with one major exception: the phrase ""I wouldst fart."" The second-person modal verb wouldst does not agree with the first-person subject I. I've corrected this, and also changed the verb from would to should to conform more closely to older distinctions between should and would.
The other change I've made is more minor; I've changed thy in ""thy odor"" to thine as the word appeared before vowel sounds (consistently with ""Thou disgracest this noble court with thine impure presence""). I also changed the -or to -our because it was really bugging me to see a very modern American English spelling mixed in with Early Modern English, but that I can change back if it's a rule that all of NetHack is supposed to use American spellings.",True,{'THUMBS_UP': ['https://github.com/entrez']}
NetHack/NetHack,https://github.com/NetHack/NetHack,605,2021-10-13T23:43:30Z,2021-11-30T15:03:07Z,2021-12-03T18:10:55Z,CLOSED,False,4,3,1,https://github.com/entrez,"Fix: whipping peaceful, unarmed monster",1,[],https://github.com/NetHack/NetHack/pull/605,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/605,"With the 'safedog' option enabled, applying a whip towards a peaceful
monster without a weapon wouldn't attack it, and would produce odd
messages (""You flick your whip towards Malasgirt.  You stop.  Malasgirt
is in the way!"") if the monster was undisplaceable (sleeping, in a shop,
hero is punished, etc).  Use g.context.forcefight to skip the
displacement checks if attacking with a whip, since applying a whip is a
deliberate attack already.","With the 'safedog' option enabled, applying a whip towards a peaceful
monster without a weapon wouldn't attack it, and would produce odd
messages (""You flick your whip towards Malasgirt.  You stop.  Malasgirt
is in the way!"") if the monster was undisplaceable (sleeping, in a shop,
hero is punished, etc).  Use g.context.forcefight to skip the
displacement checks if attacking with a whip, since applying a whip is a
deliberate attack already.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,607,2021-10-16T17:15:01Z,,2022-01-27T17:15:28Z,OPEN,False,8,8,7,https://github.com/Vivit-R,"Rename ""huge chunk of meat"" to ""giant meatball""",2,[],https://github.com/NetHack/NetHack/pull/607,https://github.com/Vivit-R,1,https://github.com/NetHack/NetHack/pull/607,"A number of reasons:

This makes the relationship with boulders clearer. Boulders roll, so they are clearly round, and ""chunk"" does not suggest roundness.
Its name parallels the names of the other items produced by the stone-to-flesh spell: rings become meat rings, wands become meat sticks, stones become meatballs, and boulders become giant meatballs.
""Meatball"" sounds more appetizing than ""chunk of meat"", making this more consistent with the message ""You smell a delicious smell.""
The image of a giant meatball in the dungeon is amusing in a way that's consistent with NetHack's wry sense of humor.","A number of reasons:

This makes the relationship with boulders clearer. Boulders roll, so they are clearly round, and ""chunk"" does not suggest roundness.
Its name parallels the names of the other items produced by the stone-to-flesh spell: rings become meat rings, wands become meat sticks, stones become meatballs, and boulders become giant meatballs.
""Meatball"" sounds more appetizing than ""chunk of meat"", making this more consistent with the message ""You smell a delicious smell.""
The image of a giant meatball in the dungeon is amusing in a way that's consistent with NetHack's wry sense of humor.",True,"{'THUMBS_UP': ['https://github.com/ostrosablin', 'https://github.com/copperwater', 'https://github.com/dnadlinger', 'https://github.com/RojjaCebolla', 'https://github.com/gebulmer', 'https://github.com/entrez', 'https://github.com/NullCGT', 'https://github.com/joey-scanga', 'https://github.com/nicklewis']}"
NetHack/NetHack,https://github.com/NetHack/NetHack,609,2021-10-18T16:49:26Z,,2022-02-11T01:27:34Z,OPEN,False,1,1,1,https://github.com/Vivit-R,"Have neutral sacrifices disappear in a puff, not a cloud, of smoke.",1,[],https://github.com/NetHack/NetHack/pull/609,https://github.com/Vivit-R,1,https://github.com/NetHack/NetHack/pull/609,"The other two messages, ""flash of light"" and ""burst of flame"", each have an evocative onomatopoetic noun describing a sharp, abrupt release of light and flame, respectively. If law is represented by light, chaos by flame, and balance by smoke, the natural word is puff, not cloud.","The other two messages, ""flash of light"" and ""burst of flame"", each have an evocative onomatopoetic noun describing a sharp, abrupt release of light and flame, respectively. If law is represented by light, chaos by flame, and balance by smoke, the natural word is puff, not cloud.",True,"{'THUMBS_UP': ['https://github.com/copperwater', 'https://github.com/moon-chilled', 'https://github.com/entrez']}"
NetHack/NetHack,https://github.com/NetHack/NetHack,609,2021-10-18T16:49:26Z,,2022-02-11T01:27:34Z,OPEN,False,1,1,1,https://github.com/Vivit-R,"Have neutral sacrifices disappear in a puff, not a cloud, of smoke.",1,[],https://github.com/NetHack/NetHack/pull/609,https://github.com/Planet-Patrick,2,https://github.com/NetHack/NetHack/pull/609#issuecomment-990905229,"The other two messages, ""flash of light"" and ""burst of flame"", each have an evocative onomatopoetic noun describing a sharp, abrupt release of light and flame, respectively. If law is represented by light, chaos by flame, and balance by smoke, the natural word is puff, not cloud.",Puff sounds a bit sissy; you're sacrificing an animal that you've killed for heaven's sake!,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,609,2021-10-18T16:49:26Z,,2022-02-11T01:27:34Z,OPEN,False,1,1,1,https://github.com/Vivit-R,"Have neutral sacrifices disappear in a puff, not a cloud, of smoke.",1,[],https://github.com/NetHack/NetHack/pull/609,https://github.com/Vivit-R,3,https://github.com/NetHack/NetHack/pull/609#issuecomment-991555587,"The other two messages, ""flash of light"" and ""burst of flame"", each have an evocative onomatopoetic noun describing a sharp, abrupt release of light and flame, respectively. If law is represented by light, chaos by flame, and balance by smoke, the natural word is puff, not cloud.","I think a less intense message is actually appropriate for the neutral alignment. Besides, its doesn't say how big a puff of smoke it is.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,609,2021-10-18T16:49:26Z,,2022-02-11T01:27:34Z,OPEN,False,1,1,1,https://github.com/Vivit-R,"Have neutral sacrifices disappear in a puff, not a cloud, of smoke.",1,[],https://github.com/NetHack/NetHack/pull/609,https://github.com/copperwater,4,https://github.com/NetHack/NetHack/pull/609#issuecomment-1030162044,"The other two messages, ""flash of light"" and ""burst of flame"", each have an evocative onomatopoetic noun describing a sharp, abrupt release of light and flame, respectively. If law is represented by light, chaos by flame, and balance by smoke, the natural word is puff, not cloud.","You could also use ""great puff of smoke"". Though I agree with vivit that ""puff of smoke"" is fine.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,609,2021-10-18T16:49:26Z,,2022-02-11T01:27:34Z,OPEN,False,1,1,1,https://github.com/Vivit-R,"Have neutral sacrifices disappear in a puff, not a cloud, of smoke.",1,[],https://github.com/NetHack/NetHack/pull/609,https://github.com/entrez,5,https://github.com/NetHack/NetHack/pull/609#issuecomment-1030162994,"The other two messages, ""flash of light"" and ""burst of flame"", each have an evocative onomatopoetic noun describing a sharp, abrupt release of light and flame, respectively. If law is represented by light, chaos by flame, and balance by smoke, the natural word is puff, not cloud.","""Your sacrifice disappears in a big ol' dang puff of smoke""",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,609,2021-10-18T16:49:26Z,,2022-02-11T01:27:34Z,OPEN,False,1,1,1,https://github.com/Vivit-R,"Have neutral sacrifices disappear in a puff, not a cloud, of smoke.",1,[],https://github.com/NetHack/NetHack/pull/609,https://github.com/copperwater,6,https://github.com/NetHack/NetHack/pull/609#issuecomment-1035666021,"The other two messages, ""flash of light"" and ""burst of flame"", each have an evocative onomatopoetic noun describing a sharp, abrupt release of light and flame, respectively. If law is represented by light, chaos by flame, and balance by smoke, the natural word is puff, not cloud.","You could also use ""great puff of smoke"". Though I agree with vivit that ""puff of smoke"" is fine.

The irony here is that I completely forgot I was the one who added ""cloud of smoke"" in the first place, and decided against using ""puff"" like in SpliceHack.
c578b95",True,{'LAUGH': ['https://github.com/entrez']}
NetHack/NetHack,https://github.com/NetHack/NetHack,609,2021-10-18T16:49:26Z,,2022-02-11T01:27:34Z,OPEN,False,1,1,1,https://github.com/Vivit-R,"Have neutral sacrifices disappear in a puff, not a cloud, of smoke.",1,[],https://github.com/NetHack/NetHack/pull/609,https://github.com/nhmall,7,https://github.com/NetHack/NetHack/pull/609#issuecomment-1035675191,"The other two messages, ""flash of light"" and ""burst of flame"", each have an evocative onomatopoetic noun describing a sharp, abrupt release of light and flame, respectively. If law is represented by light, chaos by flame, and balance by smoke, the natural word is puff, not cloud.","Stuff on the floor can already cause you to see a ""puff of smoke"" from fire (zap.c), and when a djinni doesn't emerge from a magic lamp, you can see ""a puff of smoke"" (apply.c). Why have the language changed to be so similar for an altar?",True,{'THUMBS_UP': ['https://github.com/Planet-Patrick']}
NetHack/NetHack,https://github.com/NetHack/NetHack,609,2021-10-18T16:49:26Z,,2022-02-11T01:27:34Z,OPEN,False,1,1,1,https://github.com/Vivit-R,"Have neutral sacrifices disappear in a puff, not a cloud, of smoke.",1,[],https://github.com/NetHack/NetHack/pull/609,https://github.com/entrez,8,https://github.com/NetHack/NetHack/pull/609#issuecomment-1035702512,"The other two messages, ""flash of light"" and ""burst of flame"", each have an evocative onomatopoetic noun describing a sharp, abrupt release of light and flame, respectively. If law is represented by light, chaos by flame, and balance by smoke, the natural word is puff, not cloud.","That's a good point.  I agree that ""puff"" matches more closely than ""cloud"" to the feel of the other alignments' sacrifice verbiage, but the distinction from the preexisting ""puff of smoke"" uses seems like a good thing.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,610,2021-10-18T19:17:06Z,2021-12-30T19:13:08Z,2021-12-30T19:13:09Z,CLOSED,False,28,6,1,https://github.com/Vivit-R,Have the '$' command include gold in your pack,1,[],https://github.com/NetHack/NetHack/pull/610,https://github.com/Vivit-R,1,https://github.com/NetHack/NetHack/pull/610,"In verbose mode, the gold in your wallet is totaled separately from that in containers in your pack, and the two are listed separately. In terse mode, just print the total of both. Only known gold is mentioned.","In verbose mode, the gold in your wallet is totaled separately from that in containers in your pack, and the two are listed separately. In terse mode, just print the total of both. Only known gold is mentioned.",True,{'THUMBS_UP': ['https://github.com/ostrosablin']}
NetHack/NetHack,https://github.com/NetHack/NetHack,610,2021-10-18T19:17:06Z,2021-12-30T19:13:08Z,2021-12-30T19:13:09Z,CLOSED,False,28,6,1,https://github.com/Vivit-R,Have the '$' command include gold in your pack,1,[],https://github.com/NetHack/NetHack/pull/610,https://github.com/paxed,2,https://github.com/NetHack/NetHack/pull/610#issuecomment-1003150874,"In verbose mode, the gold in your wallet is totaled separately from that in containers in your pack, and the two are listed separately. In terse mode, just print the total of both. Only known gold is mentioned.",Merged,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,612,2021-10-21T08:55:57Z,2021-10-21T17:37:18Z,2021-10-21T18:48:39Z,MERGED,True,1,1,1,https://github.com/argrath,Fix pointer precedence error,1,[],https://github.com/NetHack/NetHack/pull/612,https://github.com/argrath,1,https://github.com/NetHack/NetHack/pull/612,"Here, the value flagcounter pointed to should be incremented, not flagcounter itself.
(from Coverity Scan)","Here, the value flagcounter pointed to should be incremented, not flagcounter itself.
(from Coverity Scan)",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,613,2021-10-21T10:49:48Z,2021-10-21T17:37:18Z,2021-10-25T00:12:24Z,CLOSED,False,1,1,1,https://github.com/argrath,Revert MAX_RADIUS change,1,[],https://github.com/NetHack/NetHack/pull/613,https://github.com/argrath,1,https://github.com/NetHack/NetHack/pull/613,"On 59818fb, MAX_RADIUS was changed from 15 to 16 to intend to support
""radius 0"".  But MAX_RADIUS doesn't means the range but outer bound of
the radius table, so it should not be changed, and this change led
possible out-of-bound access on view_from() and do_clear_area() in
vision.c.
This commit reverts the change and avoids the problem.
(from Coverity Scan)","On 59818fb, MAX_RADIUS was changed from 15 to 16 to intend to support
""radius 0"".  But MAX_RADIUS doesn't means the range but outer bound of
the radius table, so it should not be changed, and this change led
possible out-of-bound access on view_from() and do_clear_area() in
vision.c.
This commit reverts the change and avoids the problem.
(from Coverity Scan)",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,613,2021-10-21T10:49:48Z,2021-10-21T17:37:18Z,2021-10-25T00:12:24Z,CLOSED,False,1,1,1,https://github.com/argrath,Revert MAX_RADIUS change,1,[],https://github.com/NetHack/NetHack/pull/613,https://github.com/nhmall,2,https://github.com/NetHack/NetHack/pull/613#issuecomment-950424084,"On 59818fb, MAX_RADIUS was changed from 15 to 16 to intend to support
""radius 0"".  But MAX_RADIUS doesn't means the range but outer bound of
the radius table, so it should not be changed, and this change led
possible out-of-bound access on view_from() and do_clear_area() in
vision.c.
This commit reverts the change and avoids the problem.
(from Coverity Scan)",The reference to this change from 614 was just an incorrect reference.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,615,2021-10-21T12:32:24Z,2021-10-21T17:37:18Z,2021-10-21T18:49:14Z,CLOSED,False,1,1,1,https://github.com/argrath,Initialize attknum,1,[],https://github.com/NetHack/NetHack/pull/615,https://github.com/argrath,1,https://github.com/NetHack/NetHack/pull/615,"attknum is declared without initialization, and is used on
find_roll_to_hit().  This leads unexpected result.
(from Coverity Scan)","attknum is declared without initialization, and is used on
find_roll_to_hit().  This leads unexpected result.
(from Coverity Scan)",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,616,2021-10-21T17:18:34Z,2021-10-21T21:37:16Z,2021-10-22T07:07:15Z,MERGED,True,2,1,1,https://github.com/argrath,Guard lua_close(),1,[],https://github.com/NetHack/NetHack/pull/616,https://github.com/argrath,1,https://github.com/NetHack/NetHack/pull/616,"nhl_done() can be called with L == NULL.
So lua_close() should be guarded.","nhl_done() can be called with L == NULL.
So lua_close() should be guarded.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,617,2021-10-22T18:20:24Z,2021-10-22T23:37:17Z,2021-10-24T12:33:27Z,MERGED,True,2,2,1,https://github.com/argrath,Use %lu for unsigned long,1,[],https://github.com/NetHack/NetHack/pull/617,https://github.com/argrath,1,https://github.com/NetHack/NetHack/pull/617,"curr->tid is unsigned long, so use %lu.
(from Coverity Scan)","curr->tid is unsigned long, so use %lu.
(from Coverity Scan)",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,618,2021-10-23T13:39:25Z,2021-12-30T19:05:11Z,2021-12-30T20:25:06Z,CLOSED,False,7,3,1,https://github.com/gebulmer,Make amnesia drain training to appropriate level,1,[],https://github.com/NetHack/NetHack/pull/618,https://github.com/gebulmer,1,https://github.com/NetHack/NetHack/pull/618,"When amnesia drains your skills the skill training would be set
to a random amount rather than a random valid amount for the new
level of skill.
This meant that, for example, you could have Master skill level in
martial arts but with the training amount of Basic.
Attempts to retrain to level martial arts to Grand Master would
then take an extraordinary amount of time compared to usual.
Fix taken from Evilhack","When amnesia drains your skills the skill training would be set
to a random amount rather than a random valid amount for the new
level of skill.
This meant that, for example, you could have Master skill level in
martial arts but with the training amount of Basic.
Attempts to retrain to level martial arts to Grand Master would
then take an extraordinary amount of time compared to usual.
Fix taken from Evilhack",True,"{'THUMBS_UP': ['https://github.com/ostrosablin', 'https://github.com/copperwater', 'https://github.com/entrez']}"
NetHack/NetHack,https://github.com/NetHack/NetHack,618,2021-10-23T13:39:25Z,2021-12-30T19:05:11Z,2021-12-30T20:25:06Z,CLOSED,False,7,3,1,https://github.com/gebulmer,Make amnesia drain training to appropriate level,1,[],https://github.com/NetHack/NetHack/pull/618,https://github.com/paxed,2,https://github.com/NetHack/NetHack/pull/618#issuecomment-1003148669,"When amnesia drains your skills the skill training would be set
to a random amount rather than a random valid amount for the new
level of skill.
This meant that, for example, you could have Master skill level in
martial arts but with the training amount of Basic.
Attempts to retrain to level martial arts to Grand Master would
then take an extraordinary amount of time compared to usual.
Fix taken from Evilhack",Merged.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,621,2021-10-24T22:25:37Z,2021-10-26T02:37:17Z,2021-10-26T05:50:33Z,CLOSED,False,2,2,1,https://github.com/argrath,The return value of weight_cap() should be non-zero,1,[],https://github.com/NetHack/NetHack/pull/621,https://github.com/argrath,1,https://github.com/NetHack/NetHack/pull/621,"The return value of weight_cap() should be non-zero, because
it is used as a divisor on try_lift().","The return value of weight_cap() should be non-zero, because
it is used as a divisor on try_lift().",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,624,2021-10-28T19:15:04Z,2022-01-27T16:20:28Z,2022-01-27T18:00:45Z,CLOSED,False,60,60,28,https://github.com/argrath,Add missing `const`,1,[],https://github.com/NetHack/NetHack/pull/624,https://github.com/argrath,1,https://github.com/NetHack/NetHack/pull/624,"If you want to declare a pointer which the address pointed to is constant,
you should declare it as like static const char *const var = ""..."";.
This commit supplies missing const and prevents some programming
error in the future.","If you want to declare a pointer which the address pointed to is constant,
you should declare it as like static const char *const var = ""..."";.
This commit supplies missing const and prevents some programming
error in the future.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,624,2021-10-28T19:15:04Z,2022-01-27T16:20:28Z,2022-01-27T18:00:45Z,CLOSED,False,60,60,28,https://github.com/argrath,Add missing `const`,1,[],https://github.com/NetHack/NetHack/pull/624,https://github.com/nhmall,2,https://github.com/NetHack/NetHack/pull/624#issuecomment-1023497609,"If you want to declare a pointer which the address pointed to is constant,
you should declare it as like static const char *const var = ""..."";.
This commit supplies missing const and prevents some programming
error in the future.",I'm unable to re-open this pull request after the branch work someone did on Jan 27. The Reopen button is grayed out.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,625,2021-10-28T22:06:30Z,2021-10-29T02:37:17Z,2021-10-29T17:12:58Z,MERGED,True,2,2,1,https://github.com/entrez,Fix: bad cast making sp_lev chameleon light source,1,[],https://github.com/NetHack/NetHack/pull/625,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/625,"Giving new_light_source '(genericptr_t) mtmp' leads to the light
source's id.a_monst being set to 'mtmp->nmon' rather than 'mtmp',
since that's what is stored in the initial byte of the monst struct.
When mtmp->nmon == 0x0 this can cause a segfault in do_light_sources.","Giving new_light_source '(genericptr_t) mtmp' leads to the light
source's id.a_monst being set to 'mtmp->nmon' rather than 'mtmp',
since that's what is stored in the initial byte of the monst struct.
When mtmp->nmon == 0x0 this can cause a segfault in do_light_sources.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,626,2021-10-30T03:12:14Z,,2022-01-27T17:16:34Z,OPEN,False,15,5,2,https://github.com/Vivit-R,Turn cancelled bags of holding into sacks,1,[],https://github.com/NetHack/NetHack/pull/626,https://github.com/Vivit-R,1,https://github.com/NetHack/NetHack/pull/626,"A wand or spell of cancellation zapped at a bag of holding now turns the bag into a sack. A wand of cancellation placed directly into a bag of holding now, instead of exploding the bag, just uses one charge and cancels the bag. This is not checked for recursively; you can put a wand of cancellation into a sack and then safely put the sack into a bag of holding.
The biggest consequence of this (other than making wands of cancellation less of a hassle to carry) has to do with looting cursed bags of holding from bones. Formerly, you could just cancel the bag and pick it up. You can still do this to safely retrieve the items, but you don't get to keep the bag of holding. If you want to keep the bag, you have empty it first and risk losing some of the contents. There is now an opportunity cost.","A wand or spell of cancellation zapped at a bag of holding now turns the bag into a sack. A wand of cancellation placed directly into a bag of holding now, instead of exploding the bag, just uses one charge and cancels the bag. This is not checked for recursively; you can put a wand of cancellation into a sack and then safely put the sack into a bag of holding.
The biggest consequence of this (other than making wands of cancellation less of a hassle to carry) has to do with looting cursed bags of holding from bones. Formerly, you could just cancel the bag and pick it up. You can still do this to safely retrieve the items, but you don't get to keep the bag of holding. If you want to keep the bag, you have empty it first and risk losing some of the contents. There is now an opportunity cost.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,626,2021-10-30T03:12:14Z,,2022-01-27T17:16:34Z,OPEN,False,15,5,2,https://github.com/Vivit-R,Turn cancelled bags of holding into sacks,1,[],https://github.com/NetHack/NetHack/pull/626,https://github.com/nhmall,2,https://github.com/NetHack/NetHack/pull/626#issuecomment-977862453,"A wand or spell of cancellation zapped at a bag of holding now turns the bag into a sack. A wand of cancellation placed directly into a bag of holding now, instead of exploding the bag, just uses one charge and cancels the bag. This is not checked for recursively; you can put a wand of cancellation into a sack and then safely put the sack into a bag of holding.
The biggest consequence of this (other than making wands of cancellation less of a hassle to carry) has to do with looting cursed bags of holding from bones. Formerly, you could just cancel the bag and pick it up. You can still do this to safely retrieve the items, but you don't get to keep the bag of holding. If you want to keep the bag, you have empty it first and risk losing some of the contents. There is now an opportunity cost.",It looks like commit b2d4b77 had a typo causing this PR to be closed. Re-opening.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,626,2021-10-30T03:12:14Z,,2022-01-27T17:16:34Z,OPEN,False,15,5,2,https://github.com/Vivit-R,Turn cancelled bags of holding into sacks,1,[],https://github.com/NetHack/NetHack/pull/626,https://github.com/copperwater,3,https://github.com/NetHack/NetHack/pull/626#issuecomment-984887085,"A wand or spell of cancellation zapped at a bag of holding now turns the bag into a sack. A wand of cancellation placed directly into a bag of holding now, instead of exploding the bag, just uses one charge and cancels the bag. This is not checked for recursively; you can put a wand of cancellation into a sack and then safely put the sack into a bag of holding.
The biggest consequence of this (other than making wands of cancellation less of a hassle to carry) has to do with looting cursed bags of holding from bones. Formerly, you could just cancel the bag and pick it up. You can still do this to safely retrieve the items, but you don't get to keep the bag of holding. If you want to keep the bag, you have empty it first and risk losing some of the contents. There is now an opportunity cost.","I believe I said this on IRC or elsewhere but reiterating here: I don't really like this change, not because of its own merits, but because of the door it opens. (Actually, on its own merits I kind of like the decision it sets up when you find a cursed bag of holding in bones - would you tip it and lose some contents but keep the bag as it is, or cancel it and get all the contents?)
That said: If a magic bag can be cancelled into a normal bag, then shouldn't other items turn into nonmagic counterparts whenever possible? A magic harp becomes a wooden harp, magic lamp becomes an oil lamp and so on. It seems almost like polymorph (since that's another way, albeit unpredictable, to turn a magic tool into a nonmagic counterpart) - should never-polymorph-an-item conduct be broken since the item type has changed?
Also, does it really make the game more fun to create enchanted -> nonenchanted mappings for items, without also having the ability to go the other way and enchant a nonenchanted item into the magic counterpart? (I would object to this a lot less if that were the case, and there's a commit in xNetHack that implements it: copperwater/xNetHack@05a8c26)",True,"{'THUMBS_UP': ['https://github.com/Planet-Patrick', 'https://github.com/eakaye']}"
NetHack/NetHack,https://github.com/NetHack/NetHack,627,2021-10-31T20:44:14Z,2021-12-30T18:53:48Z,2021-12-30T18:53:48Z,CLOSED,False,1,1,1,https://github.com/Vivit-R,Don't erase Elbereth when monster steps into a pit or hole dug by you,1,[],https://github.com/NetHack/NetHack/pull/627,https://github.com/Vivit-R,1,https://github.com/NetHack/NetHack/pull/627,"Elbereth was fading when offscreen monsters stepped into pits or holes dug elsewhere on the level. This was happening because monsters falling into traps set by you were calling setmangry() as if you had just attacked them. The behavior made it unsafe to use Elbereth if you've dug down anywhere else on the level, making it a bit harder to get archeologists off the ground. This branch alters that behavior.
I don't think it makes much sense for monsters to recognize a the handiwork of a newcomer to the dungeon setting a trap (let alone digging a hole with a wand of digging) in the first place, but I've opted for the more conservative change. If you agree with me, feel free to just remove lines trap.c:3114-3118 altogether instead.","Elbereth was fading when offscreen monsters stepped into pits or holes dug elsewhere on the level. This was happening because monsters falling into traps set by you were calling setmangry() as if you had just attacked them. The behavior made it unsafe to use Elbereth if you've dug down anywhere else on the level, making it a bit harder to get archeologists off the ground. This branch alters that behavior.
I don't think it makes much sense for monsters to recognize a the handiwork of a newcomer to the dungeon setting a trap (let alone digging a hole with a wand of digging) in the first place, but I've opted for the more conservative change. If you agree with me, feel free to just remove lines trap.c:3114-3118 altogether instead.",True,{'THUMBS_UP': ['https://github.com/entrez']}
NetHack/NetHack,https://github.com/NetHack/NetHack,627,2021-10-31T20:44:14Z,2021-12-30T18:53:48Z,2021-12-30T18:53:48Z,CLOSED,False,1,1,1,https://github.com/Vivit-R,Don't erase Elbereth when monster steps into a pit or hole dug by you,1,[],https://github.com/NetHack/NetHack/pull/627,https://github.com/copperwater,2,https://github.com/NetHack/NetHack/pull/627#issuecomment-955818394,"Elbereth was fading when offscreen monsters stepped into pits or holes dug elsewhere on the level. This was happening because monsters falling into traps set by you were calling setmangry() as if you had just attacked them. The behavior made it unsafe to use Elbereth if you've dug down anywhere else on the level, making it a bit harder to get archeologists off the ground. This branch alters that behavior.
I don't think it makes much sense for monsters to recognize a the handiwork of a newcomer to the dungeon setting a trap (let alone digging a hole with a wand of digging) in the first place, but I've opted for the more conservative change. If you agree with me, feel free to just remove lines trap.c:3114-3118 altogether instead.","This also applies to player-set bear traps and land mines, correct?",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,627,2021-10-31T20:44:14Z,2021-12-30T18:53:48Z,2021-12-30T18:53:48Z,CLOSED,False,1,1,1,https://github.com/Vivit-R,Don't erase Elbereth when monster steps into a pit or hole dug by you,1,[],https://github.com/NetHack/NetHack/pull/627,https://github.com/Vivit-R,3,https://github.com/NetHack/NetHack/pull/627#issuecomment-955827018,"Elbereth was fading when offscreen monsters stepped into pits or holes dug elsewhere on the level. This was happening because monsters falling into traps set by you were calling setmangry() as if you had just attacked them. The behavior made it unsafe to use Elbereth if you've dug down anywhere else on the level, making it a bit harder to get archeologists off the ground. This branch alters that behavior.
I don't think it makes much sense for monsters to recognize a the handiwork of a newcomer to the dungeon setting a trap (let alone digging a hole with a wand of digging) in the first place, but I've opted for the more conservative change. If you agree with me, feel free to just remove lines trap.c:3114-3118 altogether instead.","This also applies to player-set bear traps and land mines, correct?

It does; that is correct.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,627,2021-10-31T20:44:14Z,2021-12-30T18:53:48Z,2021-12-30T18:53:48Z,CLOSED,False,1,1,1,https://github.com/Vivit-R,Don't erase Elbereth when monster steps into a pit or hole dug by you,1,[],https://github.com/NetHack/NetHack/pull/627,https://github.com/paxed,4,https://github.com/NetHack/NetHack/pull/627#issuecomment-1003145447,"Elbereth was fading when offscreen monsters stepped into pits or holes dug elsewhere on the level. This was happening because monsters falling into traps set by you were calling setmangry() as if you had just attacked them. The behavior made it unsafe to use Elbereth if you've dug down anywhere else on the level, making it a bit harder to get archeologists off the ground. This branch alters that behavior.
I don't think it makes much sense for monsters to recognize a the handiwork of a newcomer to the dungeon setting a trap (let alone digging a hole with a wand of digging) in the first place, but I've opted for the more conservative change. If you agree with me, feel free to just remove lines trap.c:3114-3118 altogether instead.",Merged with commit msg from the issue.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,628,2021-11-01T20:09:08Z,,2022-01-27T17:16:48Z,OPEN,False,4,11,1,https://github.com/argrath,Remove duplicate code,1,[],https://github.com/NetHack/NetHack/pull/628,https://github.com/argrath,1,https://github.com/NetHack/NetHack/pull/628,"Here, then clause and else clause is identical.","Here, then clause and else clause is identical.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,628,2021-11-01T20:09:08Z,,2022-01-27T17:16:48Z,OPEN,False,4,11,1,https://github.com/argrath,Remove duplicate code,1,[],https://github.com/NetHack/NetHack/pull/628,https://github.com/pat-rankin,2,https://github.com/NetHack/NetHack/pull/628#issuecomment-956624751,"Here, then clause and else clause is identical.","I don't think this fix is correct.  It retains the current behavior, but I suspect that that behavior is not what is intended.  The code probably started with copy+paste and one side of the then or else should have been revised but wasn't.
The code is constructing a string that might be used when prompting for something like ""Pick a gender for your elven ranger:"" where the user may have already specified 'chaotic' but it is omitted from the prompt because that is the only possible choice for elf.  The various permutations for allowed role+race+alignment+gender become fairly complicated when the user can specify any of those in advance (possibly by negating values that aren't wanted rather than just by picking ones that are wanted) but isn't required to specify all of them until later.
Most likely that 'else' should just be removed.  But fixing that piecemeal is error prone.  It would probably be best for someone (other than me :-) to construct a program which generates every possible combination and for each one calls that routine and then displays the prompt plus the list of attributes that still need to be specified.  If any of the outcomes aren't right, the routine can be revised then the test can be repeated.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,632,2021-11-11T22:21:03Z,2021-12-03T17:37:18Z,2021-12-07T21:34:25Z,CLOSED,False,1,1,1,https://github.com/RojjaCebolla,Allow bullwhips to grab items when flying,1,[],https://github.com/NetHack/NetHack/pull/632,https://github.com/RojjaCebolla,1,https://github.com/NetHack/NetHack/pull/632,"Generally Flying is ""levitation, but better"", and this is reflected by it
occupying a more valuable item slot, an amulet rather than a ring. One case
where that is not yet true is when an item is submerged in water. The item
can be grabbed by a levitating player, but not a flying player.","Generally Flying is ""levitation, but better"", and this is reflected by it
occupying a more valuable item slot, an amulet rather than a ring. One case
where that is not yet true is when an item is submerged in water. The item
can be grabbed by a levitating player, but not a flying player.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,632,2021-11-11T22:21:03Z,2021-12-03T17:37:18Z,2021-12-07T21:34:25Z,CLOSED,False,1,1,1,https://github.com/RojjaCebolla,Allow bullwhips to grab items when flying,1,[],https://github.com/NetHack/NetHack/pull/632,https://github.com/entrez,2,https://github.com/NetHack/NetHack/pull/632#issuecomment-966678649,"Generally Flying is ""levitation, but better"", and this is reflected by it
occupying a more valuable item slot, an amulet rather than a ring. One case
where that is not yet true is when an item is submerged in water. The item
can be grabbed by a levitating player, but not a flying player.","One case where that is not yet true is when an item is submerged in water. The item can be grabbed by a levitating player, but not a flying player.

Doesn't trying to grab an item submerged in water with a whip hit the ""You cause a small splash."" case whether levitating or not?  It comes just before the levitation check modified by the PR.

  
    
      NetHack/src/apply.c
    
    
        Lines 2760 to 2766
      in
      90aded3
    
  
  
    

        
          
           if (is_pool_or_lava(u.ux, u.uy)) { 
        

        
          
               You(""cause a small splash.""); 
        

        
          
               if (is_lava(u.ux, u.uy)) 
        

        
          
                   (void) fire_damage(uwep, FALSE, u.ux, u.uy); 
        

        
          
               return 1; 
        

        
          
           } 
        

        
          
           if (Levitation || u.usteed) { 
        
    
  


I don't see why you shouldn't be able to whip downward while flying though, maybe just an oversight since before 3.7.0 you could only fly via your steed, so the u.usteed test was sufficient. (edit: Never mind, I forgot about polyself... Maybe it's just that whipping down while flying doesn't really benefit the player, since any item you could grab with a whip while levitating, you can also grab with , while flying.  But I don't see why it should be impossible to do.)",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,632,2021-11-11T22:21:03Z,2021-12-03T17:37:18Z,2021-12-07T21:34:25Z,CLOSED,False,1,1,1,https://github.com/RojjaCebolla,Allow bullwhips to grab items when flying,1,[],https://github.com/NetHack/NetHack/pull/632,https://github.com/RojjaCebolla,3,https://github.com/NetHack/NetHack/pull/632#issuecomment-966745114,"Generally Flying is ""levitation, but better"", and this is reflected by it
occupying a more valuable item slot, an amulet rather than a ring. One case
where that is not yet true is when an item is submerged in water. The item
can be grabbed by a levitating player, but not a flying player.","Oh, hey, you're right. I was playing on 3.6 when I noticed the discrepancy. So water whipping is no longer a thing. Still, might wanna be able to whip downwards from flight, to match levitation.
Also it might save the player a turn if they were flying over a pit?",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,633,2021-11-11T23:36:51Z,2021-11-14T17:37:17Z,2021-11-14T17:37:18Z,MERGED,True,3,3,1,https://github.com/melkersona,Update NetHackW.c,1,[],https://github.com/NetHack/NetHack/pull/633,https://github.com/melkersona,1,https://github.com/NetHack/NetHack/pull/633,Updated some comments that referred to an old file name.,Updated some comments that referred to an old file name.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,635,2021-11-16T15:17:58Z,2021-11-19T07:37:16Z,2021-11-19T18:50:40Z,CLOSED,False,4,2,2,https://github.com/entrez,Magical breathing helps fish survive out of water,1,[],https://github.com/NetHack/NetHack/pull/635,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/635,"The hero in an aquatic polyform loses HP for time spent out of the
water; allow magical breathing to prevent this, just as it allows the
hero in her non-aquatic natural form to breathe underwater.
Also add a similar rule for monster fish-out-of-water HP loss, even
though currently monsters can't use amulets of magical breathing and
there's no non-breathing fish/eel -- just in case this changes at some
point.","The hero in an aquatic polyform loses HP for time spent out of the
water; allow magical breathing to prevent this, just as it allows the
hero in her non-aquatic natural form to breathe underwater.
Also add a similar rule for monster fish-out-of-water HP loss, even
though currently monsters can't use amulets of magical breathing and
there's no non-breathing fish/eel -- just in case this changes at some
point.",True,"{'THUMBS_UP': ['https://github.com/ostrosablin', 'https://github.com/gebulmer', 'https://github.com/eakaye']}"
NetHack/NetHack,https://github.com/NetHack/NetHack,636,2021-11-18T01:05:08Z,2021-11-25T01:50:30Z,2021-11-27T15:36:48Z,CLOSED,False,7,1,1,https://github.com/entrez,Using the() with monster name,1,[],https://github.com/NetHack/NetHack/pull/636,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/636,"the() treats most capitalized words as proper names, which caused
problems when it was used to prepend 'the' to a monster name.
Using the() with monster names is intentionally avoided in most places
for this reason, but there are still quite a few spots where it's used,
e.g., formatting killer names, applying a stethoscope to a statue,
hitting something with a monster egg, attempting to polymorph into an
invalid form...  Rather than replacing all these uses of the(), have it
check whether the string is an exact match for a non-pname monster name,
and if so, ignore capitalization.","the() treats most capitalized words as proper names, which caused
problems when it was used to prepend 'the' to a monster name.
Using the() with monster names is intentionally avoided in most places
for this reason, but there are still quite a few spots where it's used,
e.g., formatting killer names, applying a stethoscope to a statue,
hitting something with a monster egg, attempting to polymorph into an
invalid form...  Rather than replacing all these uses of the(), have it
check whether the string is an exact match for a non-pname monster name,
and if so, ignore capitalization.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,636,2021-11-18T01:05:08Z,2021-11-25T01:50:30Z,2021-11-27T15:36:48Z,CLOSED,False,7,1,1,https://github.com/entrez,Using the() with monster name,1,[],https://github.com/NetHack/NetHack/pull/636,https://github.com/entrez,2,https://github.com/NetHack/NetHack/pull/636#issuecomment-972398457,"the() treats most capitalized words as proper names, which caused
problems when it was used to prepend 'the' to a monster name.
Using the() with monster names is intentionally avoided in most places
for this reason, but there are still quite a few spots where it's used,
e.g., formatting killer names, applying a stethoscope to a statue,
hitting something with a monster egg, attempting to polymorph into an
invalid form...  Rather than replacing all these uses of the(), have it
check whether the string is an exact match for a non-pname monster name,
and if so, ignore capitalization.","Some weird stuff I noticed in the game that prompted this:

Applying a stethoscope to a statue of an Archon or a Keystone Kop or a Nazgul will produce ""Nazgul (or whatever) is in fine health for a statue."" rather than ""The Nazgul...""
Attempting to polymorph into the Oracle produces ""You can't polymorph into Oracle.""

I'm not sure whether it would be a better solution to just wholesale replace all the uses of the([monster name]) with something that isn't conditional in the same way that the() is.  Obviously feel free to close this and do it the other way instead; these are the examples I noticed:

  
    
      NetHack/src/apply.c
    
    
        Lines 274 to 276
      in
      937eef4
    
  
  
    

        
          
           what = obj_pmname(statue); 
        

        
          
           if (!type_is_pname(mptr)) 
        

        
          
               what = The(what); 
        
    
  



  
    
      NetHack/src/attrib.c
    
    
        Lines 296 to 298
      in
      937eef4
    
  
  
    

        
          
           kprefix = KILLED_BY; 
        

        
          
           if (!type_is_pname(&mons[i])) 
        

        
          
               pkiller = the(pkiller); 
        
    
  



  
    
      NetHack/src/polyself.c
    
    
        Lines 498 to 499
      in
      937eef4
    
  
  
    

        
          
           if (the_unique_pm(&mons[mntmp])) 
        

        
          
               pm_name = the(pm_name); 
        
    
  



  
    
      NetHack/src/timeout.c
    
    
        Lines 610 to 612
      in
      937eef4
    
  
  
    

        
          
           } else if (mons[m_idx].geno & G_UNIQ) { 
        

        
          
               Strcpy(g.killer.name, the(g.killer.name)); 
        

        
          
               g.killer.format = KILLED_BY; 
        
    
  



  
    
      NetHack/src/uhitm.c
    
    
        Lines 995 to 998
      in
      937eef4
    
  
  
    

        
          
           const char *eggp = (obj->corpsenm != NON_PM 
        

        
          
                               && obj->known) 
        

        
          
                       ? the(mons[obj->corpsenm].pmnames[NEUTRAL]) 
        

        
          
                       : (cnt > 1L) ? ""some"" : ""an""; 
        
    
  



  
    
      NetHack/src/uhitm.c
    
    
        Lines 3306 to 3308
      in
      937eef4
    
  
  
    

        
          
           if (mtmp->data->geno & G_UNIQ) { 
        

        
          
               if (!type_is_pname(mtmp->data)) 
        

        
          
                   kname = the(kname); 
        
    
  



  
    
      NetHack/src/uhitm.c
    
    
        Lines 4362 to 4363
      in
      937eef4
    
  
  
    

        
          
           Sprintf(msgbuf, ""%s isn't sitting well with you."", 
        

        
          
                   The(pmname(pd, Mgender(mdef))));",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,637,2021-11-23T21:31:20Z,2021-11-24T02:37:18Z,2021-11-24T06:04:05Z,MERGED,True,1,1,1,https://github.com/argrath,Use %d for short,1,[],https://github.com/NetHack/NetHack/pull/637,https://github.com/argrath,1,https://github.com/NetHack/NetHack/pull/637,"obj->otyp is short, so corresponding format string is %d.
(from Coverity Scan)","obj->otyp is short, so corresponding format string is %d.
(from Coverity Scan)",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,637,2021-11-23T21:31:20Z,2021-11-24T02:37:18Z,2021-11-24T06:04:05Z,MERGED,True,1,1,1,https://github.com/argrath,Use %d for short,1,[],https://github.com/NetHack/NetHack/pull/637,https://github.com/moon-chilled,2,https://github.com/NetHack/NetHack/pull/637#issuecomment-977264568,"obj->otyp is short, so corresponding format string is %d.
(from Coverity Scan)","%hd, not %d",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,639,2021-11-30T03:22:09Z,,2022-01-27T17:17:05Z,OPEN,False,3,1,1,https://github.com/hanjianju,add loongarch support,1,[],https://github.com/NetHack/NetHack/pull/639,https://github.com/hanjianju,1,https://github.com/NetHack/NetHack/pull/639,,,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,640,2021-11-30T20:41:31Z,2021-12-01T01:37:18Z,2021-12-01T01:58:18Z,CLOSED,False,1,1,1,https://github.com/entrez,Fix: zoo monsters spawning in hallways,1,[],https://github.com/NetHack/NetHack/pull/640,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/640,"If a random G_[SL]GROUP monster was generated in a zoo, the resulting
group of monsters could spill out into nearby hallways and other
surrounding areas.  Disregard G_GROUP flags when filling a zoo with
monsters to avoid this problem.
Example of the issue:","If a random G_[SL]GROUP monster was generated in a zoo, the resulting
group of monsters could spill out into nearby hallways and other
surrounding areas.  Disregard G_GROUP flags when filling a zoo with
monsters to avoid this problem.
Example of the issue:",True,{'THUMBS_UP': ['https://github.com/k21971']}
NetHack/NetHack,https://github.com/NetHack/NetHack,642,2021-12-01T14:45:59Z,2021-12-02T07:37:17Z,2021-12-02T14:02:41Z,CLOSED,False,6,6,3,https://github.com/entrez,Fix: 'you owe It for goods lost',1,[],https://github.com/NetHack/NetHack/pull/642,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/642,"Some messages about owing a shopkeeper money would use 'it' when blind,
with weird results such as ""You owe It 267 zorkmids for goods lost.""  It
seems maybe like these were missed in 6591f8b since they were outside of
shk.c/shknam.c.  Bring those messages into alignment with most other
shopkeeper-related messages, which use the shopkeeper's name even if the
hero is blind or can't see them at the moment.
Some of the 'it gets angry' ones don't seem so bad, but similar 'gets angry' messages in shk.c use Shknam so I changed those as well for consistency's sake.","Some messages about owing a shopkeeper money would use 'it' when blind,
with weird results such as ""You owe It 267 zorkmids for goods lost.""  It
seems maybe like these were missed in 6591f8b since they were outside of
shk.c/shknam.c.  Bring those messages into alignment with most other
shopkeeper-related messages, which use the shopkeeper's name even if the
hero is blind or can't see them at the moment.
Some of the 'it gets angry' ones don't seem so bad, but similar 'gets angry' messages in shk.c use Shknam so I changed those as well for consistency's sake.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,643,2021-12-03T00:12:05Z,2021-12-18T04:37:18Z,2021-12-20T14:24:04Z,CLOSED,False,9,4,1,https://github.com/entrez,"Fix: gender, historicity of stoned monster statue",1,[],https://github.com/NetHack/NetHack/pull/643,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/643,"The way statues of stoned unique monsters were marked as ""historic"" was
not changed when mkcorpstat flags were updated in 04a8ddc, resulting in
unique statues which were no longer marked as historic and were instead
marked as female.
While fixing that, also use the gender-related mkcorpstat flags to
assign the gender of a stoned monster to the resulting statue.","The way statues of stoned unique monsters were marked as ""historic"" was
not changed when mkcorpstat flags were updated in 04a8ddc, resulting in
unique statues which were no longer marked as historic and were instead
marked as female.
While fixing that, also use the gender-related mkcorpstat flags to
assign the gender of a stoned monster to the resulting statue.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,644,2021-12-03T02:26:48Z,2021-12-04T07:37:17Z,2021-12-04T11:13:55Z,CLOSED,False,6,3,1,https://github.com/entrez,Fix: expanded-glyphs hero color regression,1,[],https://github.com/NetHack/NetHack/pull/644,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/644,"When showrace is enabled, the hero's normal glyph is forced to use the
color white, overriding the normal monster color.  Following the
expanded-glyphs changes, this color adjustment was accidentally applied
to any glyph on the hero's square, including steeds, objects, furniture,
wand zaps, explosions, etc.  Restrict the color change only to normal
monster symbols on the hero's square, as was the case prior to the
expanded-glyphs changes.","When showrace is enabled, the hero's normal glyph is forced to use the
color white, overriding the normal monster color.  Following the
expanded-glyphs changes, this color adjustment was accidentally applied
to any glyph on the hero's square, including steeds, objects, furniture,
wand zaps, explosions, etc.  Restrict the color change only to normal
monster symbols on the hero's square, as was the case prior to the
expanded-glyphs changes.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,645,2021-12-15T22:09:46Z,2021-12-28T18:37:17Z,2021-12-28T18:37:17Z,MERGED,True,14,12,2,https://github.com/dextercd,libnethack compilation with TARGETPFX,2,[],https://github.com/NetHack/NetHack/pull/645,https://github.com/dextercd,1,https://github.com/NetHack/NetHack/pull/645,"Found a couple issues when compiling libnh while using the TARGETPFX option.
I tested that these changes work when using TARGETPFX option and also when leaving the option unchanged.
Only the Linux hints file was tested, since I don't have access to a MacOS machine. Maybe someone else can test it. I could also remove the changes from the MacOS hints file if that's preferred.","Found a couple issues when compiling libnh while using the TARGETPFX option.
I tested that these changes work when using TARGETPFX option and also when leaving the option unchanged.
Only the Linux hints file was tested, since I don't have access to a MacOS machine. Maybe someone else can test it. I could also remove the changes from the MacOS hints file if that's preferred.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,645,2021-12-15T22:09:46Z,2021-12-28T18:37:17Z,2021-12-28T18:37:17Z,MERGED,True,14,12,2,https://github.com/dextercd,libnethack compilation with TARGETPFX,2,[],https://github.com/NetHack/NetHack/pull/645,https://github.com/nhmall,2,https://github.com/NetHack/NetHack/pull/645#issuecomment-996804272,"Found a couple issues when compiling libnh while using the TARGETPFX option.
I tested that these changes work when using TARGETPFX option and also when leaving the option unchanged.
Only the Linux hints file was tested, since I don't have access to a MacOS machine. Maybe someone else can test it. I could also remove the changes from the MacOS hints file if that's preferred.","A test build with macOS Monterey - the warnings listed are not new to this PR and are present in NetHack-3.7 too.
link",True,"{'THUMBS_UP': ['https://github.com/dextercd', 'https://github.com/nhmall']}"
NetHack/NetHack,https://github.com/NetHack/NetHack,645,2021-12-15T22:09:46Z,2021-12-28T18:37:17Z,2021-12-28T18:37:17Z,MERGED,True,14,12,2,https://github.com/dextercd,libnethack compilation with TARGETPFX,2,[],https://github.com/NetHack/NetHack/pull/645,https://github.com/dextercd,3,https://github.com/NetHack/NetHack/pull/645#issuecomment-996845173,"Found a couple issues when compiling libnh while using the TARGETPFX option.
I tested that these changes work when using TARGETPFX option and also when leaving the option unchanged.
Only the Linux hints file was tested, since I don't have access to a MacOS machine. Maybe someone else can test it. I could also remove the changes from the MacOS hints file if that's preferred.",That's great. Thank you for testing it,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,645,2021-12-15T22:09:46Z,2021-12-28T18:37:17Z,2021-12-28T18:37:17Z,MERGED,True,14,12,2,https://github.com/dextercd,libnethack compilation with TARGETPFX,2,[],https://github.com/NetHack/NetHack/pull/645,https://github.com/nhmall,4,https://github.com/NetHack/NetHack/pull/645#issuecomment-1002115954,"Found a couple issues when compiling libnh while using the TARGETPFX option.
I tested that these changes work when using TARGETPFX option and also when leaving the option unchanged.
Only the Linux hints file was tested, since I don't have access to a MacOS machine. Maybe someone else can test it. I could also remove the changes from the MacOS hints file if that's preferred.","In the pipeline
2b197fb",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,646,2021-12-18T08:07:23Z,2021-12-30T18:40:33Z,2021-12-30T22:21:49Z,CLOSED,False,2,2,1,https://github.com/RojjaCebolla,Correct the genders of DCSS bogusmons,1,[],https://github.com/NetHack/NetHack/pull/646,https://github.com/RojjaCebolla,1,https://github.com/NetHack/NetHack/pull/646,Reference: https://github.com/crawl/crawl/blob/master/crawl-ref/source/mon-data.h,Reference: https://github.com/crawl/crawl/blob/master/crawl-ref/source/mon-data.h,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,646,2021-12-18T08:07:23Z,2021-12-30T18:40:33Z,2021-12-30T22:21:49Z,CLOSED,False,2,2,1,https://github.com/RojjaCebolla,Correct the genders of DCSS bogusmons,1,[],https://github.com/NetHack/NetHack/pull/646,https://github.com/paxed,2,https://github.com/NetHack/NetHack/pull/646#issuecomment-1003141591,Reference: https://github.com/crawl/crawl/blob/master/crawl-ref/source/mon-data.h,Merged,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,647,2021-12-19T04:35:21Z,,2022-01-27T17:21:18Z,OPEN,False,34,1,1,https://github.com/vultur-cadens,Anti-magic field damage,1,[],https://github.com/NetHack/NetHack/pull/647,https://github.com/vultur-cadens,1,https://github.com/NetHack/NetHack/pull/647,"Make magic-resistant anti-magic field damage asymptotically approach
u.uhpmax as the ratio of drained energy to max hp increases, with a
maximum of u.uhpmax-1.
Addresses #533.
Although this takes some inspiration from @actual-nh's suggestion, ""Perhaps multiply drain if being used for HP by maxHP/max(1,maxPW)?"", I didn't quite like that idea because it would mean that a not very magical character with high HP and low Pw might be drained of a large amount of HP.  This change retains the behavior of high Pw characters taking relatively more damage, but prevents them from going from full HP to dead with no warning.
If a maximum of u.uhpmax-1 is still too harsh, the 'maxhp' argument can be changed, but I think that is not necessary.  Even at an extreme Pw/max HP ratio of 4, anti-magic traps will at worst only do around (1-exp(-2))=86% -- let's round it to 90% -- of max HP.  Still potentially quite dangerous, but instadeath is avoidable by having near max HP when running around.","Make magic-resistant anti-magic field damage asymptotically approach
u.uhpmax as the ratio of drained energy to max hp increases, with a
maximum of u.uhpmax-1.
Addresses #533.
Although this takes some inspiration from @actual-nh's suggestion, ""Perhaps multiply drain if being used for HP by maxHP/max(1,maxPW)?"", I didn't quite like that idea because it would mean that a not very magical character with high HP and low Pw might be drained of a large amount of HP.  This change retains the behavior of high Pw characters taking relatively more damage, but prevents them from going from full HP to dead with no warning.
If a maximum of u.uhpmax-1 is still too harsh, the 'maxhp' argument can be changed, but I think that is not necessary.  Even at an extreme Pw/max HP ratio of 4, anti-magic traps will at worst only do around (1-exp(-2))=86% -- let's round it to 90% -- of max HP.  Still potentially quite dangerous, but instadeath is avoidable by having near max HP when running around.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,651,2022-01-05T02:56:31Z,2022-01-06T14:37:20Z,2022-01-08T19:36:39Z,CLOSED,False,3,2,1,https://github.com/vultur-cadens,Fix single-character engraving not dulling the weapon.,1,[],https://github.com/NetHack/NetHack/pull/651,https://github.com/vultur-cadens,1,https://github.com/NetHack/NetHack/pull/651,"When engraving was made an occupation, the implementation converted the behavior of dulling the weapon by (characters/2) points rounded down, but failed to account for the case when 1 character is engraved, resulting in 1-character engravings having no cost.
First reported on NetHackWiki by Pescepalla: https://nethackwiki.com/wiki/Talk:Scroll_of_enchant_weapon#Reducing_artifact_enchantment
This change restores the cost of engraving 1 character from before it was made an occupation: https://github.com/NetHack/NetHack/blob/NetHack-3.6/src/engrave.c#L1102","When engraving was made an occupation, the implementation converted the behavior of dulling the weapon by (characters/2) points rounded down, but failed to account for the case when 1 character is engraved, resulting in 1-character engravings having no cost.
First reported on NetHackWiki by Pescepalla: https://nethackwiki.com/wiki/Talk:Scroll_of_enchant_weapon#Reducing_artifact_enchantment
This change restores the cost of engraving 1 character from before it was made an occupation: https://github.com/NetHack/NetHack/blob/NetHack-3.6/src/engrave.c#L1102",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,652,2022-01-10T12:34:58Z,2022-01-10T17:37:19Z,2022-01-10T19:51:10Z,MERGED,True,2,2,1,https://github.com/argrath,Fix typo in Guidebook.tex,1,[],https://github.com/NetHack/NetHack/pull/652,https://github.com/argrath,1,https://github.com/NetHack/NetHack/pull/652,,,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,653,2022-01-12T22:44:12Z,2022-01-15T02:37:17Z,2022-01-17T15:49:36Z,CLOSED,False,57,116,16,https://github.com/entrez,"Remove gendered mons indices from roles, races",1,[],https://github.com/NetHack/NetHack/pull/653,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/653,"There are no longer distinct gendered versions of monsters, so femalenum
is unused (i.e. set to NON_PM) for all roles and races. Take a pass at
removing all uses of/references to femalenum, and rename 'malenum' to
'mnum' since it no longer has any particular association with
gender or sex.","There are no longer distinct gendered versions of monsters, so femalenum
is unused (i.e. set to NON_PM) for all roles and races. Take a pass at
removing all uses of/references to femalenum, and rename 'malenum' to
'mnum' since it no longer has any particular association with
gender or sex.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,654,2022-01-14T14:54:41Z,2022-01-15T02:37:16Z,2022-01-17T15:50:40Z,CLOSED,False,19,12,1,https://github.com/entrez,Fix: unpaid_cost regression,1,[],https://github.com/NetHack/NetHack/pull/654,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/654,"Recent commit 5c14f3e fixed an issue with unpaid_cost when the hero is
in two shops at once (e.g. phasing through a shared wall), but
introduced new problems with finding the cost of a container with unpaid
contents -- an unpaid item in a player-owned container would generate
the same ""unpaid_cost: object wasn't on any bill"" impossible as the
issue the commit fixed.
The main issue was that finding the bill entry used to depend on finding
the shopkeeper, but after the change, finding the shopkeeper depended on
finding the bill entry; for a container with unpaid items which has a
shopkeeper, but no bill entry, this caused issues.
Revert part of 5c14f3e and tackle the problem another way, which should
correctly handle unpaid items in inventory or a container, even if they
belong to a mixture of different shops and/or the hero is on a space
shared between multiple shops.","Recent commit 5c14f3e fixed an issue with unpaid_cost when the hero is
in two shops at once (e.g. phasing through a shared wall), but
introduced new problems with finding the cost of a container with unpaid
contents -- an unpaid item in a player-owned container would generate
the same ""unpaid_cost: object wasn't on any bill"" impossible as the
issue the commit fixed.
The main issue was that finding the bill entry used to depend on finding
the shopkeeper, but after the change, finding the shopkeeper depended on
finding the bill entry; for a container with unpaid items which has a
shopkeeper, but no bill entry, this caused issues.
Revert part of 5c14f3e and tackle the problem another way, which should
correctly handle unpaid items in inventory or a container, even if they
belong to a mixture of different shops and/or the hero is on a space
shared between multiple shops.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,655,2022-01-14T16:56:31Z,2022-01-15T01:37:16Z,2022-01-15T01:38:40Z,MERGED,True,1,1,1,https://github.com/entrez,Don't 'fall' and self-stone when flying down,1,[],https://github.com/NetHack/NetHack/pull/655,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/655,"When a flying hero deliberately ""swoops"" through a trap door or hole,
consider the movement down to the next level to be controlled flight
rather than falling, preventing the sort of inadvertent touching of a
carried cockatrice corpse that happens when falling between levels.","When a flying hero deliberately ""swoops"" through a trap door or hole,
consider the movement down to the next level to be controlled flight
rather than falling, preventing the sort of inadvertent touching of a
carried cockatrice corpse that happens when falling between levels.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,656,2022-01-16T14:24:21Z,2022-01-18T11:10:33Z,2022-01-27T00:32:45Z,CLOSED,False,4,4,3,https://github.com/feiyunw,Multiple definitions of getreturn_enabled and GUILaunched,1,[],https://github.com/NetHack/NetHack/pull/656,https://github.com/feiyunw,1,https://github.com/NetHack/NetHack/pull/656,"This patch is to fix the following linking error when I was porting NetHack to MSYS2/mingw-w64:
D:/msys64/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/10.3.0/../../../../x86_64-w64-mingw32/bin/ld.exe: o/winnt.o:winnt.c:(.bss+0x160): multiple definition of getreturn_enabled'; o/windmain.o:windmain.c:(.bss+0x100): first defined here D:/msys64/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/10.3.0/../../../../x86_64-w64-mingw32/bin/ld.exe: o/guistub.o:stubs.c:(.bss+0x0): multiple definition of GUILaunched'; o/nttty.o:nttty.c:(.bss+0x24): first defined here","This patch is to fix the following linking error when I was porting NetHack to MSYS2/mingw-w64:
D:/msys64/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/10.3.0/../../../../x86_64-w64-mingw32/bin/ld.exe: o/winnt.o:winnt.c:(.bss+0x160): multiple definition of getreturn_enabled'; o/windmain.o:windmain.c:(.bss+0x100): first defined here D:/msys64/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/10.3.0/../../../../x86_64-w64-mingw32/bin/ld.exe: o/guistub.o:stubs.c:(.bss+0x0): multiple definition of GUILaunched'; o/nttty.o:nttty.c:(.bss+0x24): first defined here",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,656,2022-01-16T14:24:21Z,2022-01-18T11:10:33Z,2022-01-27T00:32:45Z,CLOSED,False,4,4,3,https://github.com/feiyunw,Multiple definitions of getreturn_enabled and GUILaunched,1,[],https://github.com/NetHack/NetHack/pull/656,https://github.com/feiyunw,2,https://github.com/NetHack/NetHack/pull/656#issuecomment-1015308074,"This patch is to fix the following linking error when I was porting NetHack to MSYS2/mingw-w64:
D:/msys64/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/10.3.0/../../../../x86_64-w64-mingw32/bin/ld.exe: o/winnt.o:winnt.c:(.bss+0x160): multiple definition of getreturn_enabled'; o/windmain.o:windmain.c:(.bss+0x100): first defined here D:/msys64/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/10.3.0/../../../../x86_64-w64-mingw32/bin/ld.exe: o/guistub.o:stubs.c:(.bss+0x0): multiple definition of GUILaunched'; o/nttty.o:nttty.c:(.bss+0x24): first defined here",I need think it further.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,657,2022-01-16T14:57:39Z,,2022-01-20T01:36:09Z,OPEN,False,2,2,1,https://github.com/feiyunw,Fix typo in Makefile.gcc,1,['3.6'],https://github.com/NetHack/NetHack/pull/657,https://github.com/feiyunw,1,https://github.com/NetHack/NetHack/pull/657,"Unmatching "")""s in Makefile.gcc.","Unmatching "")""s in Makefile.gcc.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,659,2022-01-19T16:30:47Z,2022-05-28T00:37:20Z,2022-05-28T00:37:21Z,MERGED,True,5,1,1,https://github.com/perryprog,Add option to link to Homebrew ncurses for macOS hints file,1,[],https://github.com/NetHack/NetHack/pull/659,https://github.com/perryprog,1,https://github.com/NetHack/NetHack/pull/659,"It's probably possible to conditionally check if the directory where Homebrew curses lives exists, but that feels a bit iffy for me, and also isn't very easy to do in a Makefile. This solution is simpler, albeit a bit harder to find.","It's probably possible to conditionally check if the directory where Homebrew curses lives exists, but that feels a bit iffy for me, and also isn't very easy to do in a Makefile. This solution is simpler, albeit a bit harder to find.",True,{'THUMBS_UP': ['https://github.com/NullCGT']}
NetHack/NetHack,https://github.com/NetHack/NetHack,660,2022-01-20T16:50:57Z,2022-02-23T00:37:17Z,2022-02-23T00:37:17Z,CLOSED,False,21,1,6,https://github.com/NullCGT,Indicate to players that monsters are sleeping.,1,[],https://github.com/NetHack/NetHack/pull/660,https://github.com/NullCGT,1,https://github.com/NetHack/NetHack/pull/660,"This pull request makes the following changes:

When a player looks at a monster, they can tell whether or not that monster is asleep.
Display a message when a monster wakes up within sight of the player.
Add YAFM for waking up a flesh golem.

Note that none of these changes do not consistently impact monsters put to sleep by wands of sleep, since wands of sleep alter mcanmove and mfrozen when putting a monster to sleep for a nonzero number of turns, rather than setting msleeping to 1.
The rationale for these changes is that up until this point, there has been no way to tell whether or not a monster is asleep aside from its lack of movement.","This pull request makes the following changes:

When a player looks at a monster, they can tell whether or not that monster is asleep.
Display a message when a monster wakes up within sight of the player.
Add YAFM for waking up a flesh golem.

Note that none of these changes do not consistently impact monsters put to sleep by wands of sleep, since wands of sleep alter mcanmove and mfrozen when putting a monster to sleep for a nonzero number of turns, rather than setting msleeping to 1.
The rationale for these changes is that up until this point, there has been no way to tell whether or not a monster is asleep aside from its lack of movement.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,660,2022-01-20T16:50:57Z,2022-02-23T00:37:17Z,2022-02-23T00:37:17Z,CLOSED,False,21,1,6,https://github.com/NullCGT,Indicate to players that monsters are sleeping.,1,[],https://github.com/NetHack/NetHack/pull/660,https://github.com/copperwater,2,https://github.com/NetHack/NetHack/pull/660#issuecomment-1030160718,"This pull request makes the following changes:

When a player looks at a monster, they can tell whether or not that monster is asleep.
Display a message when a monster wakes up within sight of the player.
Add YAFM for waking up a flesh golem.

Note that none of these changes do not consistently impact monsters put to sleep by wands of sleep, since wands of sleep alter mcanmove and mfrozen when putting a monster to sleep for a nonzero number of turns, rather than setting msleeping to 1.
The rationale for these changes is that up until this point, there has been no way to tell whether or not a monster is asleep aside from its lack of movement.","See also copperwater/xNetHack@fde3533 (and followup copperwater/xNetHack@4bb56a8), which aims to basically turn mtmp->msleeping = 0; into a general function for waking up (which can decide whether to tell the player the monster wakes up or not)",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,661,2022-01-23T13:15:08Z,2022-01-28T13:00:54Z,2022-01-29T20:08:31Z,CLOSED,False,946,27,7,https://github.com/feiyunw,Net hack 3.7 mingw32,6,[],https://github.com/NetHack/NetHack/pull/661,https://github.com/feiyunw,1,https://github.com/NetHack/NetHack/pull/661,"For my MSYS2/mingw32 to build properly:
wangfy@DESKTOP-8KQFTRT MINGW64 /d/prj/NetHack/src
$ mingw32-make -f Makefile.gcc all
----
NOTE: This build will include tile support.
----
gcc -c -mms-bitfields -I../include -I../sys/windows -I../lib/lua-5.4.3/src    -DTILES -DMSWIN_GRAPHICS -DWIN32CON -D_WIN32_IE=0x0400 -D_WIN32_WINNT=0x0601 -DWINVER=0x0601 -DDLB -DSAFEPROCS -DGUISTUB  -oo/guistub.o ../sys/windows/stubs.c
gcc -c -mms-bitfields -I../include -I../sys/windows -I../lib/lua-5.4.3/src    -DTILES -DMSWIN_GRAPHICS -DWIN32CON -D_WIN32_IE=0x0400 -D_WIN32_WINNT=0x0601 -DWINVER=0x0601 -DDLB -DSAFEPROCS -oo/windsys.o  ../sys/windows/windsys.c
In file included from D:/msys64/mingw64/x86_64-w64-mingw32/include/minwindef.h:163,
                 from D:/msys64/mingw64/x86_64-w64-mingw32/include/windef.h:9,
                 from D:/msys64/mingw64/x86_64-w64-mingw32/include/windows.h:69,
                 from ../sys/windows/win32api.h:40,
                 from ../sys/windows/win10.h:8,
                 from ../sys/windows/windsys.c:14:
../sys/windows/win10.h:14:16: error: redefinition of 'struct DPI_AWARENESS_CONTEXT__'
   14 | DECLARE_HANDLE(DPI_AWARENESS_CONTEXT);
      |                ^~~~~~~~~~~~~~~~~~~~~
D:/msys64/mingw64/x86_64-w64-mingw32/include/windef.h:155:1: note: originally defined here

and
Linking ../binary/NetHack.exe...
gcc   -o../binary/NetHack.exe o/windmain.o o/windsys.o o/win10.o o/safeproc.o o/nhlan.o o/ntsound.o o/dlb.o  o/allmain.o  o/alloc.o    o/apply.o    o/artifact.o o/attrib.o   o/ball.o     o/bones.o    o/botl.o o/cmd.o      o/dbridge.o  o/decl.o     o/detect.o o/dig.o      o/display.o  o/do.o       o/do_name.o o/do_wear.o  o/dog.o      o/dogmove.o  o/dokick.o o/dothrow.o  o/drawing.o  o/dungeon.o  o/eat.o o/end.o      o/engrave.o  o/exper.o    o/explode.o o/extralev.o o/files.o    o/fountain.o o/hack.o o/hacklib.o  o/insight.o  o/invent.o   o/isaac64.o o/light.o    o/lock.o     o/mail.o     o/makemon.o o/mdlib.o    o/mcastu.o   o/mhitm.o    o/mhitu.o o/minion.o   o/mklev.o    o/mkmap.o    o/mkmaze.o o/mkobj.o    o/mkroom.o   o/mon.o      o/mondata.o o/monmove.o  o/monst.o    o/mplayer.o  o/mthrowu.o o/muse.o     o/music.o    o/o_init.o   o/objects.o  o/objnam.o   o/options.o  o/pager.o    o/pickup.o o/pline.o    o/polyself.o o/potion.o   o/pray.o o/priest.o   o/quest.o    o/questpgr.o o/random.o o/read.o     o/rect.o     o/region.o   o/restore.o o/rip.o      o/rnd.o      o/role.o     o/rumors.o o/save.o     o/sfstruct.o o/shk.o      o/shknam.o o/sit.o      o/sounds.o   o/sp_lev.o   o/spell.o o/steal.o    o/steed.o    o/symbols.o  o/sys.o o/teleport.o o/timeout.o  o/topten.o   o/track.o o/trap.o     o/u_init.o   o/uhitm.o    o/vault.o o/vision.o   o/weapon.o   o/were.o     o/wield.o o/windows.o  o/wizard.o   o/worm.o     o/worn.o o/write.o    o/zap.o o/cppregex.o   o/version.o o/nhlua.o    o/nhlsel.o    o/nhlobj.o o/topl.o     o/getline.o  o/wintty.o o/consoletty.o o/tile.o \
        o/guistub.o o/date.o o/conres.o  o/lua-5.4.3.static.a \
        -lgdi32 -lwinmm -lshell32 -lole32 -luuid -lbcrypt -static -lstdc++
D:/msys64/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/11.2.0/../../../../x86_64-w64-mingw32/bin/ld.exe: o/windsys.o:windsys.c:(.bss+0x160): multiple definition of `getreturn_enabled'; o/windmain.o:windmain.c:(.bss+0x100): first defined here
D:/msys64/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/11.2.0/../../../../x86_64-w64-mingw32/bin/ld.exe: o/guistub.o:stubs.c:(.bss+0x0): multiple definition of `GUILaunched'; o/consoletty.o:consoletty.c:(.bss+0x34): first defined here
collect2.exe: error: ld returned 1 exit status
mingw32-make: *** [Makefile.gcc:895: ../binary/NetHack.exe] Error 1","For my MSYS2/mingw32 to build properly:
wangfy@DESKTOP-8KQFTRT MINGW64 /d/prj/NetHack/src
$ mingw32-make -f Makefile.gcc all
----
NOTE: This build will include tile support.
----
gcc -c -mms-bitfields -I../include -I../sys/windows -I../lib/lua-5.4.3/src    -DTILES -DMSWIN_GRAPHICS -DWIN32CON -D_WIN32_IE=0x0400 -D_WIN32_WINNT=0x0601 -DWINVER=0x0601 -DDLB -DSAFEPROCS -DGUISTUB  -oo/guistub.o ../sys/windows/stubs.c
gcc -c -mms-bitfields -I../include -I../sys/windows -I../lib/lua-5.4.3/src    -DTILES -DMSWIN_GRAPHICS -DWIN32CON -D_WIN32_IE=0x0400 -D_WIN32_WINNT=0x0601 -DWINVER=0x0601 -DDLB -DSAFEPROCS -oo/windsys.o  ../sys/windows/windsys.c
In file included from D:/msys64/mingw64/x86_64-w64-mingw32/include/minwindef.h:163,
                 from D:/msys64/mingw64/x86_64-w64-mingw32/include/windef.h:9,
                 from D:/msys64/mingw64/x86_64-w64-mingw32/include/windows.h:69,
                 from ../sys/windows/win32api.h:40,
                 from ../sys/windows/win10.h:8,
                 from ../sys/windows/windsys.c:14:
../sys/windows/win10.h:14:16: error: redefinition of 'struct DPI_AWARENESS_CONTEXT__'
   14 | DECLARE_HANDLE(DPI_AWARENESS_CONTEXT);
      |                ^~~~~~~~~~~~~~~~~~~~~
D:/msys64/mingw64/x86_64-w64-mingw32/include/windef.h:155:1: note: originally defined here

and
Linking ../binary/NetHack.exe...
gcc   -o../binary/NetHack.exe o/windmain.o o/windsys.o o/win10.o o/safeproc.o o/nhlan.o o/ntsound.o o/dlb.o  o/allmain.o  o/alloc.o    o/apply.o    o/artifact.o o/attrib.o   o/ball.o     o/bones.o    o/botl.o o/cmd.o      o/dbridge.o  o/decl.o     o/detect.o o/dig.o      o/display.o  o/do.o       o/do_name.o o/do_wear.o  o/dog.o      o/dogmove.o  o/dokick.o o/dothrow.o  o/drawing.o  o/dungeon.o  o/eat.o o/end.o      o/engrave.o  o/exper.o    o/explode.o o/extralev.o o/files.o    o/fountain.o o/hack.o o/hacklib.o  o/insight.o  o/invent.o   o/isaac64.o o/light.o    o/lock.o     o/mail.o     o/makemon.o o/mdlib.o    o/mcastu.o   o/mhitm.o    o/mhitu.o o/minion.o   o/mklev.o    o/mkmap.o    o/mkmaze.o o/mkobj.o    o/mkroom.o   o/mon.o      o/mondata.o o/monmove.o  o/monst.o    o/mplayer.o  o/mthrowu.o o/muse.o     o/music.o    o/o_init.o   o/objects.o  o/objnam.o   o/options.o  o/pager.o    o/pickup.o o/pline.o    o/polyself.o o/potion.o   o/pray.o o/priest.o   o/quest.o    o/questpgr.o o/random.o o/read.o     o/rect.o     o/region.o   o/restore.o o/rip.o      o/rnd.o      o/role.o     o/rumors.o o/save.o     o/sfstruct.o o/shk.o      o/shknam.o o/sit.o      o/sounds.o   o/sp_lev.o   o/spell.o o/steal.o    o/steed.o    o/symbols.o  o/sys.o o/teleport.o o/timeout.o  o/topten.o   o/track.o o/trap.o     o/u_init.o   o/uhitm.o    o/vault.o o/vision.o   o/weapon.o   o/were.o     o/wield.o o/windows.o  o/wizard.o   o/worm.o     o/worn.o o/write.o    o/zap.o o/cppregex.o   o/version.o o/nhlua.o    o/nhlsel.o    o/nhlobj.o o/topl.o     o/getline.o  o/wintty.o o/consoletty.o o/tile.o \
        o/guistub.o o/date.o o/conres.o  o/lua-5.4.3.static.a \
        -lgdi32 -lwinmm -lshell32 -lole32 -luuid -lbcrypt -static -lstdc++
D:/msys64/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/11.2.0/../../../../x86_64-w64-mingw32/bin/ld.exe: o/windsys.o:windsys.c:(.bss+0x160): multiple definition of `getreturn_enabled'; o/windmain.o:windmain.c:(.bss+0x100): first defined here
D:/msys64/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/11.2.0/../../../../x86_64-w64-mingw32/bin/ld.exe: o/guistub.o:stubs.c:(.bss+0x0): multiple definition of `GUILaunched'; o/consoletty.o:consoletty.c:(.bss+0x34): first defined here
collect2.exe: error: ld returned 1 exit status
mingw32-make: *** [Makefile.gcc:895: ../binary/NetHack.exe] Error 1",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,661,2022-01-23T13:15:08Z,2022-01-28T13:00:54Z,2022-01-29T20:08:31Z,CLOSED,False,946,27,7,https://github.com/feiyunw,Net hack 3.7 mingw32,6,[],https://github.com/NetHack/NetHack/pull/661,https://github.com/nhmall,2,https://github.com/NetHack/NetHack/pull/661#issuecomment-1019500988,"For my MSYS2/mingw32 to build properly:
wangfy@DESKTOP-8KQFTRT MINGW64 /d/prj/NetHack/src
$ mingw32-make -f Makefile.gcc all
----
NOTE: This build will include tile support.
----
gcc -c -mms-bitfields -I../include -I../sys/windows -I../lib/lua-5.4.3/src    -DTILES -DMSWIN_GRAPHICS -DWIN32CON -D_WIN32_IE=0x0400 -D_WIN32_WINNT=0x0601 -DWINVER=0x0601 -DDLB -DSAFEPROCS -DGUISTUB  -oo/guistub.o ../sys/windows/stubs.c
gcc -c -mms-bitfields -I../include -I../sys/windows -I../lib/lua-5.4.3/src    -DTILES -DMSWIN_GRAPHICS -DWIN32CON -D_WIN32_IE=0x0400 -D_WIN32_WINNT=0x0601 -DWINVER=0x0601 -DDLB -DSAFEPROCS -oo/windsys.o  ../sys/windows/windsys.c
In file included from D:/msys64/mingw64/x86_64-w64-mingw32/include/minwindef.h:163,
                 from D:/msys64/mingw64/x86_64-w64-mingw32/include/windef.h:9,
                 from D:/msys64/mingw64/x86_64-w64-mingw32/include/windows.h:69,
                 from ../sys/windows/win32api.h:40,
                 from ../sys/windows/win10.h:8,
                 from ../sys/windows/windsys.c:14:
../sys/windows/win10.h:14:16: error: redefinition of 'struct DPI_AWARENESS_CONTEXT__'
   14 | DECLARE_HANDLE(DPI_AWARENESS_CONTEXT);
      |                ^~~~~~~~~~~~~~~~~~~~~
D:/msys64/mingw64/x86_64-w64-mingw32/include/windef.h:155:1: note: originally defined here

and
Linking ../binary/NetHack.exe...
gcc   -o../binary/NetHack.exe o/windmain.o o/windsys.o o/win10.o o/safeproc.o o/nhlan.o o/ntsound.o o/dlb.o  o/allmain.o  o/alloc.o    o/apply.o    o/artifact.o o/attrib.o   o/ball.o     o/bones.o    o/botl.o o/cmd.o      o/dbridge.o  o/decl.o     o/detect.o o/dig.o      o/display.o  o/do.o       o/do_name.o o/do_wear.o  o/dog.o      o/dogmove.o  o/dokick.o o/dothrow.o  o/drawing.o  o/dungeon.o  o/eat.o o/end.o      o/engrave.o  o/exper.o    o/explode.o o/extralev.o o/files.o    o/fountain.o o/hack.o o/hacklib.o  o/insight.o  o/invent.o   o/isaac64.o o/light.o    o/lock.o     o/mail.o     o/makemon.o o/mdlib.o    o/mcastu.o   o/mhitm.o    o/mhitu.o o/minion.o   o/mklev.o    o/mkmap.o    o/mkmaze.o o/mkobj.o    o/mkroom.o   o/mon.o      o/mondata.o o/monmove.o  o/monst.o    o/mplayer.o  o/mthrowu.o o/muse.o     o/music.o    o/o_init.o   o/objects.o  o/objnam.o   o/options.o  o/pager.o    o/pickup.o o/pline.o    o/polyself.o o/potion.o   o/pray.o o/priest.o   o/quest.o    o/questpgr.o o/random.o o/read.o     o/rect.o     o/region.o   o/restore.o o/rip.o      o/rnd.o      o/role.o     o/rumors.o o/save.o     o/sfstruct.o o/shk.o      o/shknam.o o/sit.o      o/sounds.o   o/sp_lev.o   o/spell.o o/steal.o    o/steed.o    o/symbols.o  o/sys.o o/teleport.o o/timeout.o  o/topten.o   o/track.o o/trap.o     o/u_init.o   o/uhitm.o    o/vault.o o/vision.o   o/weapon.o   o/were.o     o/wield.o o/windows.o  o/wizard.o   o/worm.o     o/worn.o o/write.o    o/zap.o o/cppregex.o   o/version.o o/nhlua.o    o/nhlsel.o    o/nhlobj.o o/topl.o     o/getline.o  o/wintty.o o/consoletty.o o/tile.o \
        o/guistub.o o/date.o o/conres.o  o/lua-5.4.3.static.a \
        -lgdi32 -lwinmm -lshell32 -lole32 -luuid -lbcrypt -static -lstdc++
D:/msys64/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/11.2.0/../../../../x86_64-w64-mingw32/bin/ld.exe: o/windsys.o:windsys.c:(.bss+0x160): multiple definition of `getreturn_enabled'; o/windmain.o:windmain.c:(.bss+0x100): first defined here
D:/msys64/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/11.2.0/../../../../x86_64-w64-mingw32/bin/ld.exe: o/guistub.o:stubs.c:(.bss+0x0): multiple definition of `GUILaunched'; o/consoletty.o:consoletty.c:(.bss+0x34): first defined here
collect2.exe: error: ld returned 1 exit status
mingw32-make: *** [Makefile.gcc:895: ../binary/NetHack.exe] Error 1","Where are you obtaining your mingw from and what version?  Your PR fails for me with unknown type name 'DPI_AWARENESS_CONTEXT', but it is likely version mismatches with what I tried and what you are using.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,661,2022-01-23T13:15:08Z,2022-01-28T13:00:54Z,2022-01-29T20:08:31Z,CLOSED,False,946,27,7,https://github.com/feiyunw,Net hack 3.7 mingw32,6,[],https://github.com/NetHack/NetHack/pull/661,https://github.com/feiyunw,3,https://github.com/NetHack/NetHack/pull/661#issuecomment-1020789569,"For my MSYS2/mingw32 to build properly:
wangfy@DESKTOP-8KQFTRT MINGW64 /d/prj/NetHack/src
$ mingw32-make -f Makefile.gcc all
----
NOTE: This build will include tile support.
----
gcc -c -mms-bitfields -I../include -I../sys/windows -I../lib/lua-5.4.3/src    -DTILES -DMSWIN_GRAPHICS -DWIN32CON -D_WIN32_IE=0x0400 -D_WIN32_WINNT=0x0601 -DWINVER=0x0601 -DDLB -DSAFEPROCS -DGUISTUB  -oo/guistub.o ../sys/windows/stubs.c
gcc -c -mms-bitfields -I../include -I../sys/windows -I../lib/lua-5.4.3/src    -DTILES -DMSWIN_GRAPHICS -DWIN32CON -D_WIN32_IE=0x0400 -D_WIN32_WINNT=0x0601 -DWINVER=0x0601 -DDLB -DSAFEPROCS -oo/windsys.o  ../sys/windows/windsys.c
In file included from D:/msys64/mingw64/x86_64-w64-mingw32/include/minwindef.h:163,
                 from D:/msys64/mingw64/x86_64-w64-mingw32/include/windef.h:9,
                 from D:/msys64/mingw64/x86_64-w64-mingw32/include/windows.h:69,
                 from ../sys/windows/win32api.h:40,
                 from ../sys/windows/win10.h:8,
                 from ../sys/windows/windsys.c:14:
../sys/windows/win10.h:14:16: error: redefinition of 'struct DPI_AWARENESS_CONTEXT__'
   14 | DECLARE_HANDLE(DPI_AWARENESS_CONTEXT);
      |                ^~~~~~~~~~~~~~~~~~~~~
D:/msys64/mingw64/x86_64-w64-mingw32/include/windef.h:155:1: note: originally defined here

and
Linking ../binary/NetHack.exe...
gcc   -o../binary/NetHack.exe o/windmain.o o/windsys.o o/win10.o o/safeproc.o o/nhlan.o o/ntsound.o o/dlb.o  o/allmain.o  o/alloc.o    o/apply.o    o/artifact.o o/attrib.o   o/ball.o     o/bones.o    o/botl.o o/cmd.o      o/dbridge.o  o/decl.o     o/detect.o o/dig.o      o/display.o  o/do.o       o/do_name.o o/do_wear.o  o/dog.o      o/dogmove.o  o/dokick.o o/dothrow.o  o/drawing.o  o/dungeon.o  o/eat.o o/end.o      o/engrave.o  o/exper.o    o/explode.o o/extralev.o o/files.o    o/fountain.o o/hack.o o/hacklib.o  o/insight.o  o/invent.o   o/isaac64.o o/light.o    o/lock.o     o/mail.o     o/makemon.o o/mdlib.o    o/mcastu.o   o/mhitm.o    o/mhitu.o o/minion.o   o/mklev.o    o/mkmap.o    o/mkmaze.o o/mkobj.o    o/mkroom.o   o/mon.o      o/mondata.o o/monmove.o  o/monst.o    o/mplayer.o  o/mthrowu.o o/muse.o     o/music.o    o/o_init.o   o/objects.o  o/objnam.o   o/options.o  o/pager.o    o/pickup.o o/pline.o    o/polyself.o o/potion.o   o/pray.o o/priest.o   o/quest.o    o/questpgr.o o/random.o o/read.o     o/rect.o     o/region.o   o/restore.o o/rip.o      o/rnd.o      o/role.o     o/rumors.o o/save.o     o/sfstruct.o o/shk.o      o/shknam.o o/sit.o      o/sounds.o   o/sp_lev.o   o/spell.o o/steal.o    o/steed.o    o/symbols.o  o/sys.o o/teleport.o o/timeout.o  o/topten.o   o/track.o o/trap.o     o/u_init.o   o/uhitm.o    o/vault.o o/vision.o   o/weapon.o   o/were.o     o/wield.o o/windows.o  o/wizard.o   o/worm.o     o/worn.o o/write.o    o/zap.o o/cppregex.o   o/version.o o/nhlua.o    o/nhlsel.o    o/nhlobj.o o/topl.o     o/getline.o  o/wintty.o o/consoletty.o o/tile.o \
        o/guistub.o o/date.o o/conres.o  o/lua-5.4.3.static.a \
        -lgdi32 -lwinmm -lshell32 -lole32 -luuid -lbcrypt -static -lstdc++
D:/msys64/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/11.2.0/../../../../x86_64-w64-mingw32/bin/ld.exe: o/windsys.o:windsys.c:(.bss+0x160): multiple definition of `getreturn_enabled'; o/windmain.o:windmain.c:(.bss+0x100): first defined here
D:/msys64/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/11.2.0/../../../../x86_64-w64-mingw32/bin/ld.exe: o/guistub.o:stubs.c:(.bss+0x0): multiple definition of `GUILaunched'; o/consoletty.o:consoletty.c:(.bss+0x34): first defined here
collect2.exe: error: ld returned 1 exit status
mingw32-make: *** [Makefile.gcc:895: ../binary/NetHack.exe] Error 1","Try ""pacman -Syuu"" to update your MSYS2 system please.
The new two patches can bring up mingw32 64bit built NetHackW.exe in my Windows 10, so we needn't SKIP_NETHACKW any more.",True,{'THUMBS_UP': ['https://github.com/nhmall']}
NetHack/NetHack,https://github.com/NetHack/NetHack,661,2022-01-23T13:15:08Z,2022-01-28T13:00:54Z,2022-01-29T20:08:31Z,CLOSED,False,946,27,7,https://github.com/feiyunw,Net hack 3.7 mingw32,6,[],https://github.com/NetHack/NetHack/pull/661,https://github.com/feiyunw,4,https://github.com/NetHack/NetHack/pull/661#issuecomment-1020800434,"For my MSYS2/mingw32 to build properly:
wangfy@DESKTOP-8KQFTRT MINGW64 /d/prj/NetHack/src
$ mingw32-make -f Makefile.gcc all
----
NOTE: This build will include tile support.
----
gcc -c -mms-bitfields -I../include -I../sys/windows -I../lib/lua-5.4.3/src    -DTILES -DMSWIN_GRAPHICS -DWIN32CON -D_WIN32_IE=0x0400 -D_WIN32_WINNT=0x0601 -DWINVER=0x0601 -DDLB -DSAFEPROCS -DGUISTUB  -oo/guistub.o ../sys/windows/stubs.c
gcc -c -mms-bitfields -I../include -I../sys/windows -I../lib/lua-5.4.3/src    -DTILES -DMSWIN_GRAPHICS -DWIN32CON -D_WIN32_IE=0x0400 -D_WIN32_WINNT=0x0601 -DWINVER=0x0601 -DDLB -DSAFEPROCS -oo/windsys.o  ../sys/windows/windsys.c
In file included from D:/msys64/mingw64/x86_64-w64-mingw32/include/minwindef.h:163,
                 from D:/msys64/mingw64/x86_64-w64-mingw32/include/windef.h:9,
                 from D:/msys64/mingw64/x86_64-w64-mingw32/include/windows.h:69,
                 from ../sys/windows/win32api.h:40,
                 from ../sys/windows/win10.h:8,
                 from ../sys/windows/windsys.c:14:
../sys/windows/win10.h:14:16: error: redefinition of 'struct DPI_AWARENESS_CONTEXT__'
   14 | DECLARE_HANDLE(DPI_AWARENESS_CONTEXT);
      |                ^~~~~~~~~~~~~~~~~~~~~
D:/msys64/mingw64/x86_64-w64-mingw32/include/windef.h:155:1: note: originally defined here

and
Linking ../binary/NetHack.exe...
gcc   -o../binary/NetHack.exe o/windmain.o o/windsys.o o/win10.o o/safeproc.o o/nhlan.o o/ntsound.o o/dlb.o  o/allmain.o  o/alloc.o    o/apply.o    o/artifact.o o/attrib.o   o/ball.o     o/bones.o    o/botl.o o/cmd.o      o/dbridge.o  o/decl.o     o/detect.o o/dig.o      o/display.o  o/do.o       o/do_name.o o/do_wear.o  o/dog.o      o/dogmove.o  o/dokick.o o/dothrow.o  o/drawing.o  o/dungeon.o  o/eat.o o/end.o      o/engrave.o  o/exper.o    o/explode.o o/extralev.o o/files.o    o/fountain.o o/hack.o o/hacklib.o  o/insight.o  o/invent.o   o/isaac64.o o/light.o    o/lock.o     o/mail.o     o/makemon.o o/mdlib.o    o/mcastu.o   o/mhitm.o    o/mhitu.o o/minion.o   o/mklev.o    o/mkmap.o    o/mkmaze.o o/mkobj.o    o/mkroom.o   o/mon.o      o/mondata.o o/monmove.o  o/monst.o    o/mplayer.o  o/mthrowu.o o/muse.o     o/music.o    o/o_init.o   o/objects.o  o/objnam.o   o/options.o  o/pager.o    o/pickup.o o/pline.o    o/polyself.o o/potion.o   o/pray.o o/priest.o   o/quest.o    o/questpgr.o o/random.o o/read.o     o/rect.o     o/region.o   o/restore.o o/rip.o      o/rnd.o      o/role.o     o/rumors.o o/save.o     o/sfstruct.o o/shk.o      o/shknam.o o/sit.o      o/sounds.o   o/sp_lev.o   o/spell.o o/steal.o    o/steed.o    o/symbols.o  o/sys.o o/teleport.o o/timeout.o  o/topten.o   o/track.o o/trap.o     o/u_init.o   o/uhitm.o    o/vault.o o/vision.o   o/weapon.o   o/were.o     o/wield.o o/windows.o  o/wizard.o   o/worm.o     o/worn.o o/write.o    o/zap.o o/cppregex.o   o/version.o o/nhlua.o    o/nhlsel.o    o/nhlobj.o o/topl.o     o/getline.o  o/wintty.o o/consoletty.o o/tile.o \
        o/guistub.o o/date.o o/conres.o  o/lua-5.4.3.static.a \
        -lgdi32 -lwinmm -lshell32 -lole32 -luuid -lbcrypt -static -lstdc++
D:/msys64/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/11.2.0/../../../../x86_64-w64-mingw32/bin/ld.exe: o/windsys.o:windsys.c:(.bss+0x160): multiple definition of `getreturn_enabled'; o/windmain.o:windmain.c:(.bss+0x100): first defined here
D:/msys64/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/11.2.0/../../../../x86_64-w64-mingw32/bin/ld.exe: o/guistub.o:stubs.c:(.bss+0x0): multiple definition of `GUILaunched'; o/consoletty.o:consoletty.c:(.bss+0x34): first defined here
collect2.exe: error: ld returned 1 exit status
mingw32-make: *** [Makefile.gcc:895: ../binary/NetHack.exe] Error 1","Should set --target option for windres to build 64bit NetHackW.exe:
ifeq ""$(MSYSTEM)"" ""MINGW64""
rc = windres --target=pe-x86-64
endif",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,661,2022-01-23T13:15:08Z,2022-01-28T13:00:54Z,2022-01-29T20:08:31Z,CLOSED,False,946,27,7,https://github.com/feiyunw,Net hack 3.7 mingw32,6,[],https://github.com/NetHack/NetHack/pull/661,https://github.com/nhmall,5,https://github.com/NetHack/NetHack/pull/661#issuecomment-1021573738,"For my MSYS2/mingw32 to build properly:
wangfy@DESKTOP-8KQFTRT MINGW64 /d/prj/NetHack/src
$ mingw32-make -f Makefile.gcc all
----
NOTE: This build will include tile support.
----
gcc -c -mms-bitfields -I../include -I../sys/windows -I../lib/lua-5.4.3/src    -DTILES -DMSWIN_GRAPHICS -DWIN32CON -D_WIN32_IE=0x0400 -D_WIN32_WINNT=0x0601 -DWINVER=0x0601 -DDLB -DSAFEPROCS -DGUISTUB  -oo/guistub.o ../sys/windows/stubs.c
gcc -c -mms-bitfields -I../include -I../sys/windows -I../lib/lua-5.4.3/src    -DTILES -DMSWIN_GRAPHICS -DWIN32CON -D_WIN32_IE=0x0400 -D_WIN32_WINNT=0x0601 -DWINVER=0x0601 -DDLB -DSAFEPROCS -oo/windsys.o  ../sys/windows/windsys.c
In file included from D:/msys64/mingw64/x86_64-w64-mingw32/include/minwindef.h:163,
                 from D:/msys64/mingw64/x86_64-w64-mingw32/include/windef.h:9,
                 from D:/msys64/mingw64/x86_64-w64-mingw32/include/windows.h:69,
                 from ../sys/windows/win32api.h:40,
                 from ../sys/windows/win10.h:8,
                 from ../sys/windows/windsys.c:14:
../sys/windows/win10.h:14:16: error: redefinition of 'struct DPI_AWARENESS_CONTEXT__'
   14 | DECLARE_HANDLE(DPI_AWARENESS_CONTEXT);
      |                ^~~~~~~~~~~~~~~~~~~~~
D:/msys64/mingw64/x86_64-w64-mingw32/include/windef.h:155:1: note: originally defined here

and
Linking ../binary/NetHack.exe...
gcc   -o../binary/NetHack.exe o/windmain.o o/windsys.o o/win10.o o/safeproc.o o/nhlan.o o/ntsound.o o/dlb.o  o/allmain.o  o/alloc.o    o/apply.o    o/artifact.o o/attrib.o   o/ball.o     o/bones.o    o/botl.o o/cmd.o      o/dbridge.o  o/decl.o     o/detect.o o/dig.o      o/display.o  o/do.o       o/do_name.o o/do_wear.o  o/dog.o      o/dogmove.o  o/dokick.o o/dothrow.o  o/drawing.o  o/dungeon.o  o/eat.o o/end.o      o/engrave.o  o/exper.o    o/explode.o o/extralev.o o/files.o    o/fountain.o o/hack.o o/hacklib.o  o/insight.o  o/invent.o   o/isaac64.o o/light.o    o/lock.o     o/mail.o     o/makemon.o o/mdlib.o    o/mcastu.o   o/mhitm.o    o/mhitu.o o/minion.o   o/mklev.o    o/mkmap.o    o/mkmaze.o o/mkobj.o    o/mkroom.o   o/mon.o      o/mondata.o o/monmove.o  o/monst.o    o/mplayer.o  o/mthrowu.o o/muse.o     o/music.o    o/o_init.o   o/objects.o  o/objnam.o   o/options.o  o/pager.o    o/pickup.o o/pline.o    o/polyself.o o/potion.o   o/pray.o o/priest.o   o/quest.o    o/questpgr.o o/random.o o/read.o     o/rect.o     o/region.o   o/restore.o o/rip.o      o/rnd.o      o/role.o     o/rumors.o o/save.o     o/sfstruct.o o/shk.o      o/shknam.o o/sit.o      o/sounds.o   o/sp_lev.o   o/spell.o o/steal.o    o/steed.o    o/symbols.o  o/sys.o o/teleport.o o/timeout.o  o/topten.o   o/track.o o/trap.o     o/u_init.o   o/uhitm.o    o/vault.o o/vision.o   o/weapon.o   o/were.o     o/wield.o o/windows.o  o/wizard.o   o/worm.o     o/worn.o o/write.o    o/zap.o o/cppregex.o   o/version.o o/nhlua.o    o/nhlsel.o    o/nhlobj.o o/topl.o     o/getline.o  o/wintty.o o/consoletty.o o/tile.o \
        o/guistub.o o/date.o o/conres.o  o/lua-5.4.3.static.a \
        -lgdi32 -lwinmm -lshell32 -lole32 -luuid -lbcrypt -static -lstdc++
D:/msys64/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/11.2.0/../../../../x86_64-w64-mingw32/bin/ld.exe: o/windsys.o:windsys.c:(.bss+0x160): multiple definition of `getreturn_enabled'; o/windmain.o:windmain.c:(.bss+0x100): first defined here
D:/msys64/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/11.2.0/../../../../x86_64-w64-mingw32/bin/ld.exe: o/guistub.o:stubs.c:(.bss+0x0): multiple definition of `GUILaunched'; o/consoletty.o:consoletty.c:(.bss+0x34): first defined here
collect2.exe: error: ld returned 1 exit status
mingw32-make: *** [Makefile.gcc:895: ../binary/NetHack.exe] Error 1",@feiyunw I had some build success with this PR after following the suggestions.  Thanks.,True,{'THUMBS_UP': ['https://github.com/nhmall']}
NetHack/NetHack,https://github.com/NetHack/NetHack,661,2022-01-23T13:15:08Z,2022-01-28T13:00:54Z,2022-01-29T20:08:31Z,CLOSED,False,946,27,7,https://github.com/feiyunw,Net hack 3.7 mingw32,6,[],https://github.com/NetHack/NetHack/pull/661,https://github.com/feiyunw,6,https://github.com/NetHack/NetHack/pull/661#issuecomment-1022365314,"For my MSYS2/mingw32 to build properly:
wangfy@DESKTOP-8KQFTRT MINGW64 /d/prj/NetHack/src
$ mingw32-make -f Makefile.gcc all
----
NOTE: This build will include tile support.
----
gcc -c -mms-bitfields -I../include -I../sys/windows -I../lib/lua-5.4.3/src    -DTILES -DMSWIN_GRAPHICS -DWIN32CON -D_WIN32_IE=0x0400 -D_WIN32_WINNT=0x0601 -DWINVER=0x0601 -DDLB -DSAFEPROCS -DGUISTUB  -oo/guistub.o ../sys/windows/stubs.c
gcc -c -mms-bitfields -I../include -I../sys/windows -I../lib/lua-5.4.3/src    -DTILES -DMSWIN_GRAPHICS -DWIN32CON -D_WIN32_IE=0x0400 -D_WIN32_WINNT=0x0601 -DWINVER=0x0601 -DDLB -DSAFEPROCS -oo/windsys.o  ../sys/windows/windsys.c
In file included from D:/msys64/mingw64/x86_64-w64-mingw32/include/minwindef.h:163,
                 from D:/msys64/mingw64/x86_64-w64-mingw32/include/windef.h:9,
                 from D:/msys64/mingw64/x86_64-w64-mingw32/include/windows.h:69,
                 from ../sys/windows/win32api.h:40,
                 from ../sys/windows/win10.h:8,
                 from ../sys/windows/windsys.c:14:
../sys/windows/win10.h:14:16: error: redefinition of 'struct DPI_AWARENESS_CONTEXT__'
   14 | DECLARE_HANDLE(DPI_AWARENESS_CONTEXT);
      |                ^~~~~~~~~~~~~~~~~~~~~
D:/msys64/mingw64/x86_64-w64-mingw32/include/windef.h:155:1: note: originally defined here

and
Linking ../binary/NetHack.exe...
gcc   -o../binary/NetHack.exe o/windmain.o o/windsys.o o/win10.o o/safeproc.o o/nhlan.o o/ntsound.o o/dlb.o  o/allmain.o  o/alloc.o    o/apply.o    o/artifact.o o/attrib.o   o/ball.o     o/bones.o    o/botl.o o/cmd.o      o/dbridge.o  o/decl.o     o/detect.o o/dig.o      o/display.o  o/do.o       o/do_name.o o/do_wear.o  o/dog.o      o/dogmove.o  o/dokick.o o/dothrow.o  o/drawing.o  o/dungeon.o  o/eat.o o/end.o      o/engrave.o  o/exper.o    o/explode.o o/extralev.o o/files.o    o/fountain.o o/hack.o o/hacklib.o  o/insight.o  o/invent.o   o/isaac64.o o/light.o    o/lock.o     o/mail.o     o/makemon.o o/mdlib.o    o/mcastu.o   o/mhitm.o    o/mhitu.o o/minion.o   o/mklev.o    o/mkmap.o    o/mkmaze.o o/mkobj.o    o/mkroom.o   o/mon.o      o/mondata.o o/monmove.o  o/monst.o    o/mplayer.o  o/mthrowu.o o/muse.o     o/music.o    o/o_init.o   o/objects.o  o/objnam.o   o/options.o  o/pager.o    o/pickup.o o/pline.o    o/polyself.o o/potion.o   o/pray.o o/priest.o   o/quest.o    o/questpgr.o o/random.o o/read.o     o/rect.o     o/region.o   o/restore.o o/rip.o      o/rnd.o      o/role.o     o/rumors.o o/save.o     o/sfstruct.o o/shk.o      o/shknam.o o/sit.o      o/sounds.o   o/sp_lev.o   o/spell.o o/steal.o    o/steed.o    o/symbols.o  o/sys.o o/teleport.o o/timeout.o  o/topten.o   o/track.o o/trap.o     o/u_init.o   o/uhitm.o    o/vault.o o/vision.o   o/weapon.o   o/were.o     o/wield.o o/windows.o  o/wizard.o   o/worm.o     o/worn.o o/write.o    o/zap.o o/cppregex.o   o/version.o o/nhlua.o    o/nhlsel.o    o/nhlobj.o o/topl.o     o/getline.o  o/wintty.o o/consoletty.o o/tile.o \
        o/guistub.o o/date.o o/conres.o  o/lua-5.4.3.static.a \
        -lgdi32 -lwinmm -lshell32 -lole32 -luuid -lbcrypt -static -lstdc++
D:/msys64/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/11.2.0/../../../../x86_64-w64-mingw32/bin/ld.exe: o/windsys.o:windsys.c:(.bss+0x160): multiple definition of `getreturn_enabled'; o/windmain.o:windmain.c:(.bss+0x100): first defined here
D:/msys64/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/11.2.0/../../../../x86_64-w64-mingw32/bin/ld.exe: o/guistub.o:stubs.c:(.bss+0x0): multiple definition of `GUILaunched'; o/consoletty.o:consoletty.c:(.bss+0x34): first defined here
collect2.exe: error: ld returned 1 exit status
mingw32-make: *** [Makefile.gcc:895: ../binary/NetHack.exe] Error 1","Makefile.mingw32 and Makefile.mingw32.depend are intended to replace Makefile.gcc.
To use them:
cd /d/prj/NetHack/src
cp ../sys/windows/Makefile.mingw32* .
mingw32-make -f Makefile.mingw32 clean
mingw32-make -f Makefile.mingw32 depend
mingw32-make -f Makefile.mingw32

Improvements:

Add $(USE_LUADLL) to release lua-5.4.3.dll, instead of link static lua.lib into .exe files.
Add windres ""--target"" option, to fix the NetHackW.exe startup problem.
Add ""-s"" option to $(LDFLAGS) in release mode, to make exe/dll smaller.
Add $(CLEAN_DIR) and $(CLEAN_FILE) to track what to clean.
Remove *.tag, but use ""order-only prerequisites"" to make directory before any '.o' is built.
Use make variables and functions to improve readability.
Each project has its own directory to hold object files, to fix the interference problem between different projects, like NetHack.exe object files were built with ""-DTILES"".
Add ""-mconsole"" option when linking NetHack.exe, to fix that sometimes GetStdHandle returned with invalid handle error.
Add "".PHONY"" statements.
Use ""gcc -E -MM -MT"" to implement semi-auto ""Prerequisites Generating"".

FYI:

Make: order-only prerequisite
Make: Phony Targets
Make: Quick Reference
Make: Generating Prerequisites Automatically
GCC: -mconsole 
GetStdHandle
""Specifying /SUBSYSTEM:CONSOLE requests that the operating system fill the handles with a console session on startup"".
GCC: -MT target",True,{'THUMBS_UP': ['https://github.com/nhmall']}
NetHack/NetHack,https://github.com/NetHack/NetHack,661,2022-01-23T13:15:08Z,2022-01-28T13:00:54Z,2022-01-29T20:08:31Z,CLOSED,False,946,27,7,https://github.com/feiyunw,Net hack 3.7 mingw32,6,[],https://github.com/NetHack/NetHack/pull/661,https://github.com/nhmall,7,https://github.com/NetHack/NetHack/pull/661#issuecomment-1022377842,"For my MSYS2/mingw32 to build properly:
wangfy@DESKTOP-8KQFTRT MINGW64 /d/prj/NetHack/src
$ mingw32-make -f Makefile.gcc all
----
NOTE: This build will include tile support.
----
gcc -c -mms-bitfields -I../include -I../sys/windows -I../lib/lua-5.4.3/src    -DTILES -DMSWIN_GRAPHICS -DWIN32CON -D_WIN32_IE=0x0400 -D_WIN32_WINNT=0x0601 -DWINVER=0x0601 -DDLB -DSAFEPROCS -DGUISTUB  -oo/guistub.o ../sys/windows/stubs.c
gcc -c -mms-bitfields -I../include -I../sys/windows -I../lib/lua-5.4.3/src    -DTILES -DMSWIN_GRAPHICS -DWIN32CON -D_WIN32_IE=0x0400 -D_WIN32_WINNT=0x0601 -DWINVER=0x0601 -DDLB -DSAFEPROCS -oo/windsys.o  ../sys/windows/windsys.c
In file included from D:/msys64/mingw64/x86_64-w64-mingw32/include/minwindef.h:163,
                 from D:/msys64/mingw64/x86_64-w64-mingw32/include/windef.h:9,
                 from D:/msys64/mingw64/x86_64-w64-mingw32/include/windows.h:69,
                 from ../sys/windows/win32api.h:40,
                 from ../sys/windows/win10.h:8,
                 from ../sys/windows/windsys.c:14:
../sys/windows/win10.h:14:16: error: redefinition of 'struct DPI_AWARENESS_CONTEXT__'
   14 | DECLARE_HANDLE(DPI_AWARENESS_CONTEXT);
      |                ^~~~~~~~~~~~~~~~~~~~~
D:/msys64/mingw64/x86_64-w64-mingw32/include/windef.h:155:1: note: originally defined here

and
Linking ../binary/NetHack.exe...
gcc   -o../binary/NetHack.exe o/windmain.o o/windsys.o o/win10.o o/safeproc.o o/nhlan.o o/ntsound.o o/dlb.o  o/allmain.o  o/alloc.o    o/apply.o    o/artifact.o o/attrib.o   o/ball.o     o/bones.o    o/botl.o o/cmd.o      o/dbridge.o  o/decl.o     o/detect.o o/dig.o      o/display.o  o/do.o       o/do_name.o o/do_wear.o  o/dog.o      o/dogmove.o  o/dokick.o o/dothrow.o  o/drawing.o  o/dungeon.o  o/eat.o o/end.o      o/engrave.o  o/exper.o    o/explode.o o/extralev.o o/files.o    o/fountain.o o/hack.o o/hacklib.o  o/insight.o  o/invent.o   o/isaac64.o o/light.o    o/lock.o     o/mail.o     o/makemon.o o/mdlib.o    o/mcastu.o   o/mhitm.o    o/mhitu.o o/minion.o   o/mklev.o    o/mkmap.o    o/mkmaze.o o/mkobj.o    o/mkroom.o   o/mon.o      o/mondata.o o/monmove.o  o/monst.o    o/mplayer.o  o/mthrowu.o o/muse.o     o/music.o    o/o_init.o   o/objects.o  o/objnam.o   o/options.o  o/pager.o    o/pickup.o o/pline.o    o/polyself.o o/potion.o   o/pray.o o/priest.o   o/quest.o    o/questpgr.o o/random.o o/read.o     o/rect.o     o/region.o   o/restore.o o/rip.o      o/rnd.o      o/role.o     o/rumors.o o/save.o     o/sfstruct.o o/shk.o      o/shknam.o o/sit.o      o/sounds.o   o/sp_lev.o   o/spell.o o/steal.o    o/steed.o    o/symbols.o  o/sys.o o/teleport.o o/timeout.o  o/topten.o   o/track.o o/trap.o     o/u_init.o   o/uhitm.o    o/vault.o o/vision.o   o/weapon.o   o/were.o     o/wield.o o/windows.o  o/wizard.o   o/worm.o     o/worn.o o/write.o    o/zap.o o/cppregex.o   o/version.o o/nhlua.o    o/nhlsel.o    o/nhlobj.o o/topl.o     o/getline.o  o/wintty.o o/consoletty.o o/tile.o \
        o/guistub.o o/date.o o/conres.o  o/lua-5.4.3.static.a \
        -lgdi32 -lwinmm -lshell32 -lole32 -luuid -lbcrypt -static -lstdc++
D:/msys64/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/11.2.0/../../../../x86_64-w64-mingw32/bin/ld.exe: o/windsys.o:windsys.c:(.bss+0x160): multiple definition of `getreturn_enabled'; o/windmain.o:windmain.c:(.bss+0x100): first defined here
D:/msys64/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/11.2.0/../../../../x86_64-w64-mingw32/bin/ld.exe: o/guistub.o:stubs.c:(.bss+0x0): multiple definition of `GUILaunched'; o/consoletty.o:consoletty.c:(.bss+0x34): first defined here
collect2.exe: error: ld returned 1 exit status
mingw32-make: *** [Makefile.gcc:895: ../binary/NetHack.exe] Error 1","That worked well! Nice.
I'll merge this PR in the next day or two.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,661,2022-01-23T13:15:08Z,2022-01-28T13:00:54Z,2022-01-29T20:08:31Z,CLOSED,False,946,27,7,https://github.com/feiyunw,Net hack 3.7 mingw32,6,[],https://github.com/NetHack/NetHack/pull/661,https://github.com/nhmall,8,https://github.com/NetHack/NetHack/pull/661#issuecomment-1024191934,"For my MSYS2/mingw32 to build properly:
wangfy@DESKTOP-8KQFTRT MINGW64 /d/prj/NetHack/src
$ mingw32-make -f Makefile.gcc all
----
NOTE: This build will include tile support.
----
gcc -c -mms-bitfields -I../include -I../sys/windows -I../lib/lua-5.4.3/src    -DTILES -DMSWIN_GRAPHICS -DWIN32CON -D_WIN32_IE=0x0400 -D_WIN32_WINNT=0x0601 -DWINVER=0x0601 -DDLB -DSAFEPROCS -DGUISTUB  -oo/guistub.o ../sys/windows/stubs.c
gcc -c -mms-bitfields -I../include -I../sys/windows -I../lib/lua-5.4.3/src    -DTILES -DMSWIN_GRAPHICS -DWIN32CON -D_WIN32_IE=0x0400 -D_WIN32_WINNT=0x0601 -DWINVER=0x0601 -DDLB -DSAFEPROCS -oo/windsys.o  ../sys/windows/windsys.c
In file included from D:/msys64/mingw64/x86_64-w64-mingw32/include/minwindef.h:163,
                 from D:/msys64/mingw64/x86_64-w64-mingw32/include/windef.h:9,
                 from D:/msys64/mingw64/x86_64-w64-mingw32/include/windows.h:69,
                 from ../sys/windows/win32api.h:40,
                 from ../sys/windows/win10.h:8,
                 from ../sys/windows/windsys.c:14:
../sys/windows/win10.h:14:16: error: redefinition of 'struct DPI_AWARENESS_CONTEXT__'
   14 | DECLARE_HANDLE(DPI_AWARENESS_CONTEXT);
      |                ^~~~~~~~~~~~~~~~~~~~~
D:/msys64/mingw64/x86_64-w64-mingw32/include/windef.h:155:1: note: originally defined here

and
Linking ../binary/NetHack.exe...
gcc   -o../binary/NetHack.exe o/windmain.o o/windsys.o o/win10.o o/safeproc.o o/nhlan.o o/ntsound.o o/dlb.o  o/allmain.o  o/alloc.o    o/apply.o    o/artifact.o o/attrib.o   o/ball.o     o/bones.o    o/botl.o o/cmd.o      o/dbridge.o  o/decl.o     o/detect.o o/dig.o      o/display.o  o/do.o       o/do_name.o o/do_wear.o  o/dog.o      o/dogmove.o  o/dokick.o o/dothrow.o  o/drawing.o  o/dungeon.o  o/eat.o o/end.o      o/engrave.o  o/exper.o    o/explode.o o/extralev.o o/files.o    o/fountain.o o/hack.o o/hacklib.o  o/insight.o  o/invent.o   o/isaac64.o o/light.o    o/lock.o     o/mail.o     o/makemon.o o/mdlib.o    o/mcastu.o   o/mhitm.o    o/mhitu.o o/minion.o   o/mklev.o    o/mkmap.o    o/mkmaze.o o/mkobj.o    o/mkroom.o   o/mon.o      o/mondata.o o/monmove.o  o/monst.o    o/mplayer.o  o/mthrowu.o o/muse.o     o/music.o    o/o_init.o   o/objects.o  o/objnam.o   o/options.o  o/pager.o    o/pickup.o o/pline.o    o/polyself.o o/potion.o   o/pray.o o/priest.o   o/quest.o    o/questpgr.o o/random.o o/read.o     o/rect.o     o/region.o   o/restore.o o/rip.o      o/rnd.o      o/role.o     o/rumors.o o/save.o     o/sfstruct.o o/shk.o      o/shknam.o o/sit.o      o/sounds.o   o/sp_lev.o   o/spell.o o/steal.o    o/steed.o    o/symbols.o  o/sys.o o/teleport.o o/timeout.o  o/topten.o   o/track.o o/trap.o     o/u_init.o   o/uhitm.o    o/vault.o o/vision.o   o/weapon.o   o/were.o     o/wield.o o/windows.o  o/wizard.o   o/worm.o     o/worn.o o/write.o    o/zap.o o/cppregex.o   o/version.o o/nhlua.o    o/nhlsel.o    o/nhlobj.o o/topl.o     o/getline.o  o/wintty.o o/consoletty.o o/tile.o \
        o/guistub.o o/date.o o/conres.o  o/lua-5.4.3.static.a \
        -lgdi32 -lwinmm -lshell32 -lole32 -luuid -lbcrypt -static -lstdc++
D:/msys64/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/11.2.0/../../../../x86_64-w64-mingw32/bin/ld.exe: o/windsys.o:windsys.c:(.bss+0x160): multiple definition of `getreturn_enabled'; o/windmain.o:windmain.c:(.bss+0x100): first defined here
D:/msys64/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/11.2.0/../../../../x86_64-w64-mingw32/bin/ld.exe: o/guistub.o:stubs.c:(.bss+0x0): multiple definition of `GUILaunched'; o/consoletty.o:consoletty.c:(.bss+0x34): first defined here
collect2.exe: error: ld returned 1 exit status
mingw32-make: *** [Makefile.gcc:895: ../binary/NetHack.exe] Error 1","Commits 96de8d5 and some prior to it have all of this included. Thanks.
Please feel free to evolve the mingw build further if you want through new pull requests.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,662,2022-01-26T21:38:37Z,,2022-02-01T15:34:49Z,OPEN,False,410,0,3,https://github.com/heiner,cmake support for NetHack 3.7,7,[],https://github.com/NetHack/NetHack/pull/662,https://github.com/heiner,1,https://github.com/NetHack/NetHack/pull/662,"Hey!
I don't think you will want to immediately (or perhaps ever) merge this, I just thought it might be good to document somewhere how to build NetHack 3.7 via cmake out-of-source. I also have a cmake version for NetHack 3.6 (harder, as it requires dealing with dgn_comp, lvl_comp etc).
This doesn't yet include building the Guildebook or flags like WANT_LIBNH but they would be easy to add if there is interest.
To build:
mkdir build && cd build 
cmake .. -GNinja && ninja && cmake --install .
./nethack","Hey!
I don't think you will want to immediately (or perhaps ever) merge this, I just thought it might be good to document somewhere how to build NetHack 3.7 via cmake out-of-source. I also have a cmake version for NetHack 3.6 (harder, as it requires dealing with dgn_comp, lvl_comp etc).
This doesn't yet include building the Guildebook or flags like WANT_LIBNH but they would be easy to add if there is interest.
To build:
mkdir build && cd build 
cmake .. -GNinja && ninja && cmake --install .
./nethack",True,"{'THUMBS_UP': ['https://github.com/gebulmer', 'https://github.com/NullCGT']}"
NetHack/NetHack,https://github.com/NetHack/NetHack,662,2022-01-26T21:38:37Z,,2022-02-01T15:34:49Z,OPEN,False,410,0,3,https://github.com/heiner,cmake support for NetHack 3.7,7,[],https://github.com/NetHack/NetHack/pull/662,https://github.com/dextercd,2,https://github.com/NetHack/NetHack/pull/662#issuecomment-1022698916,"Hey!
I don't think you will want to immediately (or perhaps ever) merge this, I just thought it might be good to document somewhere how to build NetHack 3.7 via cmake out-of-source. I also have a cmake version for NetHack 3.6 (harder, as it requires dealing with dgn_comp, lvl_comp etc).
This doesn't yet include building the Guildebook or flags like WANT_LIBNH but they would be easy to add if there is interest.
To build:
mkdir build && cd build 
cmake .. -GNinja && ninja && cmake --install .
./nethack","For me CMake is much better than the Makefiles approach so I'm happy to see this PR. I ran into some minor issues.
I get the following error when using the CMake build:
ninja: error: 'lua/src/fetch-lua/src/liblua.a', needed by 'nethack', missing and no known rule to make it

Applying the following patch seems to help:
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 7c2678eb7..de2a4819f 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -54,6 +54,7 @@ ExternalProject_Add(
   BUILD_IN_SOURCE TRUE
   CONFIGURE_COMMAND """"
   BUILD_COMMAND make
+  BUILD_BYPRODUCTS <BINARY_DIR>/src/liblua.a
   INSTALL_COMMAND """"
   STEP_TARGETS build)
After that I get this error:
$ cmake --build . -v
[1/136] : && /usr/bin/cc   util/CMakeFiles/makedefs.dir/makedefs.c.o util/CMakeFiles/makedefs.dir/__/src/monst.c.o util/CMakeFiles/makedefs.dir/__/src/objects.c.o util/CMakeFiles/makedefs.dir/__/src/alloc.c.o util/CMakeFiles/makedefs.dir/__/src/date.c.o -o util/makedefs   && :
FAILED: util/makedefs 
: && /usr/bin/cc   util/CMakeFiles/makedefs.dir/makedefs.c.o util/CMakeFiles/makedefs.dir/__/src/monst.c.o util/CMakeFiles/makedefs.dir/__/src/objects.c.o util/CMakeFiles/makedefs.dir/__/src/alloc.c.o util/CMakeFiles/makedefs.dir/__/src/date.c.o -o util/makedefs   && :
/usr/bin/ld: util/CMakeFiles/makedefs.dir/__/src/alloc.c.o: in function `alloc':
alloc.c:(.text+0x34): undefined reference to `panic'
collect2: error: ld returned 1 exit status
ninja: build stopped: subcommand failed.

Applying the following patch seems to help:
diff --git a/util/CMakeLists.txt b/util/CMakeLists.txt
index c7ede9b38..70f1174de 100644
--- a/util/CMakeLists.txt
+++ b/util/CMakeLists.txt
@@ -1,5 +1,5 @@
 set(MAKEDEFS_SRC makedefs.c ${NH_SRC}/monst.c ${NH_SRC}/objects.c
-                 ${NH_SRC}/alloc.c ${NH_SRC}/date.c)
+                 ${NH_SRC}/alloc.c ${NH_SRC}/date.c panic.c)
 
 # TODO: Re-add onames.h once ""prob error for class 4 (28%)"" error is fixed.
 set(MAKEDEFS_HEADERS ${NH_INC_GEN}/date.h # ${NH_INC_GEN}/onames.h
After this the nethack target gets a bunch of linker errors because of liblua.a uses math functions but is not linking to libm.a. liblua.a and loadlib.c also require it to link to libdl.a for dlopen, dlclose etc.
Applying the following patch fixes the issue.
diff --git a/CMakeLists.txt b/CMakeLists.txt
index de2a4819f..c26c3ce53 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -93,7 +93,7 @@ file(
 
 # nethack executable.
 add_executable(nethack ${NETHACK_SRC})
-target_link_libraries(nethack ncurses ${TOPLUALIB})
+target_link_libraries(nethack ncurses ${TOPLUALIB} ${CMAKE_DL_LIBS} m)
 
 # TODO: Add check-dlb, Guidebook
 add_dependencies(nethack util dat lua_support)
After this nethack compiled cleanly 😄 I pushed these changes here as well: https://github.com/dextercd/NetHack/tree/NetHack-3.7-cmake",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,662,2022-01-26T21:38:37Z,,2022-02-01T15:34:49Z,OPEN,False,410,0,3,https://github.com/heiner,cmake support for NetHack 3.7,7,[],https://github.com/NetHack/NetHack/pull/662,https://github.com/heiner,3,https://github.com/NetHack/NetHack/pull/662#issuecomment-1023216915,"Hey!
I don't think you will want to immediately (or perhaps ever) merge this, I just thought it might be good to document somewhere how to build NetHack 3.7 via cmake out-of-source. I also have a cmake version for NetHack 3.6 (harder, as it requires dealing with dgn_comp, lvl_comp etc).
This doesn't yet include building the Guildebook or flags like WANT_LIBNH but they would be easy to add if there is interest.
To build:
mkdir build && cd build 
cmake .. -GNinja && ninja && cmake --install .
./nethack",Thanks @dextercd for your fixes! I'm not sure how this could work for me without this. I've merged your commits into my branch.,True,{'THUMBS_UP': ['https://github.com/dextercd']}
NetHack/NetHack,https://github.com/NetHack/NetHack,662,2022-01-26T21:38:37Z,,2022-02-01T15:34:49Z,OPEN,False,410,0,3,https://github.com/heiner,cmake support for NetHack 3.7,7,[],https://github.com/NetHack/NetHack/pull/662,https://github.com/dextercd,4,https://github.com/NetHack/NetHack/pull/662#issuecomment-1023408466,"Hey!
I don't think you will want to immediately (or perhaps ever) merge this, I just thought it might be good to document somewhere how to build NetHack 3.7 via cmake out-of-source. I also have a cmake version for NetHack 3.6 (harder, as it requires dealing with dgn_comp, lvl_comp etc).
This doesn't yet include building the Guildebook or flags like WANT_LIBNH but they would be easy to add if there is interest.
To build:
mkdir build && cd build 
cmake .. -GNinja && ninja && cmake --install .
./nethack","Looks like the NetHack-3.7 branch was deleted and recreated, which closes all pull requests targeting this branch.. That was probably not intentional 😕",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,662,2022-01-26T21:38:37Z,,2022-02-01T15:34:49Z,OPEN,False,410,0,3,https://github.com/heiner,cmake support for NetHack 3.7,7,[],https://github.com/NetHack/NetHack/pull/662,https://github.com/nhcopier,5,https://github.com/NetHack/NetHack/pull/662#issuecomment-1023410991,"Hey!
I don't think you will want to immediately (or perhaps ever) merge this, I just thought it might be good to document somewhere how to build NetHack 3.7 via cmake out-of-source. I also have a cmake version for NetHack 3.6 (harder, as it requires dealing with dgn_comp, lvl_comp etc).
This doesn't yet include building the Guildebook or flags like WANT_LIBNH but they would be easy to add if there is interest.
To build:
mkdir build && cd build 
cmake .. -GNinja && ninja && cmake --install .
./nethack","Apologies.  We had an issue we needed to clean up.
…
 On Jan 27, 2022, at 11:27 AM, Dexter Castor Döpping ***@***.***> wrote:


 Looks like the NetHack-3.7 branch was deleted and recreated, which closes all pull requests targeting this branch.. That was probably not intentional 😕

 —
 Reply to this email directly, view it on GitHub <#662 (comment)>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AD5NCFWHC7SXYIOT5JMY7A3UYFW53ANCNFSM5M4FQW6A>.
 Triage notifications on the go with GitHub Mobile for iOS <https://apps.apple.com/app/apple-store/id1477376905?ct=notification-email&mt=8&pt=524675> or Android <https://play.google.com/store/apps/details?id=com.github.android&referrer=utm_campaign%3Dnotification-email%26utm_medium%3Demail%26utm_source%3Dgithub>.
 You are receiving this because you modified the open/close state.",True,{'THUMBS_UP': ['https://github.com/dextercd']}
NetHack/NetHack,https://github.com/NetHack/NetHack,665,2022-02-02T19:28:20Z,2022-02-03T00:37:17Z,2022-02-03T00:38:19Z,CLOSED,False,3,3,1,https://github.com/entrez,Use verbalize for player monster speech,1,[],https://github.com/NetHack/NetHack/pull/665,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/665,"Attempting to chat with a player monster would inspire a witty retort,
but it was presented without quotation marks and so differed from other
types of monster speech.","Attempting to chat with a player monster would inspire a witty retort,
but it was presented without quotation marks and so differed from other
types of monster speech.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,668,2022-02-05T11:34:07Z,2022-02-05T18:37:16Z,2022-02-08T07:40:06Z,MERGED,True,3,3,1,https://github.com/argrath,Remove redundant code on find_guard_dest(),1,[],https://github.com/NetHack/NetHack/pull/668,https://github.com/argrath,1,https://github.com/NetHack/NetHack/pull/668,"The values of lx and ly are always assigned just before their usage.
So, assignments in advance are redundant.","The values of lx and ly are always assigned just before their usage.
So, assignments in advance are redundant.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,668,2022-02-05T11:34:07Z,2022-02-05T18:37:16Z,2022-02-08T07:40:06Z,MERGED,True,3,3,1,https://github.com/argrath,Remove redundant code on find_guard_dest(),1,[],https://github.com/NetHack/NetHack/pull/668,https://github.com/nhmall,2,https://github.com/NetHack/NetHack/pull/668#issuecomment-1030632239,"The values of lx and ly are always assigned just before their usage.
So, assignments in advance are redundant.","In 3.4.3, it was:
	      if(levl[x][y].typ == CORR) {
		  if(x < u.ux) lx = x + 1;
		  else if(x > u.ux) lx = x - 1;
		  else lx = x;
		  if(y < u.uy) ly = y + 1;
		  else if(y > u.uy) ly = y - 1;
		  else ly = y;
		  if(levl[lx][ly].typ != STONE && levl[lx][ly].typ != CORR)
		      goto incr_radius;

where all the assignments to lx were contained within ""if"" statements, and some compilers complain about ""potentially uninitialized local variable"" in those cases (despite the final ""else"" clause).
When the code got reworked, the code developer probably didn't go back to figure out if the initializer could safely be  removed from the declaration of the variables involved. Harmless, but as you say, redundant.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,669,2022-02-08T08:22:25Z,2022-02-08T17:37:18Z,2022-02-08T18:09:06Z,MERGED,True,4,1,1,https://github.com/argrath,Add null-check on fill_special_room(),1,[],https://github.com/NetHack/NetHack/pull/669,https://github.com/argrath,1,https://github.com/NetHack/NetHack/pull/669,Add null-check of croom before its first use.,Add null-check of croom before its first use.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,671,2022-02-08T20:55:28Z,2022-02-09T01:37:17Z,2022-02-09T05:06:40Z,MERGED,True,4,1,1,https://github.com/argrath,Add null-check on repairable_damage(),1,[],https://github.com/NetHack/NetHack/pull/671,https://github.com/argrath,1,https://github.com/NetHack/NetHack/pull/671,Add null-check of dam before its first use.,Add null-check of dam before its first use.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,673,2022-02-08T23:02:47Z,2022-02-12T19:37:17Z,2022-02-16T02:59:14Z,CLOSED,False,1,0,1,https://github.com/entrez,Fix: tty map weirdness after 'full-screen' menu,1,[],https://github.com/NetHack/NetHack/pull/673,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/673,"When a 'full-screen' (cw->offx and cw->offy both 0) menu was immediately
followed by an offset menu -- as in the case of selecting certain
options from the options menu, or using loot to take out/put in items
after using ':' to describe the contents of a very full container --
there were some odd interactions with the map.
Only certain parts of the map near/under the menu window would be
redrawn if the first offset menu was followed by another one, while
a getlin prompt would cause the entire map to be redrawn, with parts
intersecting the window being drawn on top of it and obscuring it.
Flushing the display immediately after the docrt call when closing a
full-screen menu seems to fix both these issues.
It's a little hard to describe the 'weirdness' so here are some illustrative videos:
Before:

  
    
    

    before.mp4
    
  

  

  


After:

  
    
    

    after.mp4","When a 'full-screen' (cw->offx and cw->offy both 0) menu was immediately
followed by an offset menu -- as in the case of selecting certain
options from the options menu, or using loot to take out/put in items
after using ':' to describe the contents of a very full container --
there were some odd interactions with the map.
Only certain parts of the map near/under the menu window would be
redrawn if the first offset menu was followed by another one, while
a getlin prompt would cause the entire map to be redrawn, with parts
intersecting the window being drawn on top of it and obscuring it.
Flushing the display immediately after the docrt call when closing a
full-screen menu seems to fix both these issues.
It's a little hard to describe the 'weirdness' so here are some illustrative videos:
Before:

  
    
    

    before.mp4
    
  

  

  


After:

  
    
    

    after.mp4",True,"{'THUMBS_UP': ['https://github.com/k21971', 'https://github.com/gebulmer', 'https://github.com/copperwater']}"
NetHack/NetHack,https://github.com/NetHack/NetHack,673,2022-02-08T23:02:47Z,2022-02-12T19:37:17Z,2022-02-16T02:59:14Z,CLOSED,False,1,0,1,https://github.com/entrez,Fix: tty map weirdness after 'full-screen' menu,1,[],https://github.com/NetHack/NetHack/pull/673,https://github.com/pat-rankin,2,https://github.com/NetHack/NetHack/pull/673#issuecomment-1036656544,"When a 'full-screen' (cw->offx and cw->offy both 0) menu was immediately
followed by an offset menu -- as in the case of selecting certain
options from the options menu, or using loot to take out/put in items
after using ':' to describe the contents of a very full container --
there were some odd interactions with the map.
Only certain parts of the map near/under the menu window would be
redrawn if the first offset menu was followed by another one, while
a getlin prompt would cause the entire map to be redrawn, with parts
intersecting the window being drawn on top of it and obscuring it.
Flushing the display immediately after the docrt call when closing a
full-screen menu seems to fix both these issues.
It's a little hard to describe the 'weirdness' so here are some illustrative videos:
Before:

  
    
    

    before.mp4
    
  

  

  


After:

  
    
    

    after.mp4","I reproduced this a couple of times with current code and not with 3.6.4 so I decided to try 'git bisect' to find out where it changed.  No luck; I made it all the way past the commit that was HEAD when you made your change without being able to reproduce the problem again.  I repeated the exercise, this time using ^F and possibly wand of digging to  position the hero where the smaller menu would cover that location.  Still no luck.  So either I screwed up along the way to reproducing this is tricky.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,673,2022-02-08T23:02:47Z,2022-02-12T19:37:17Z,2022-02-16T02:59:14Z,CLOSED,False,1,0,1,https://github.com/entrez,Fix: tty map weirdness after 'full-screen' menu,1,[],https://github.com/NetHack/NetHack/pull/673,https://github.com/entrez,3,https://github.com/NetHack/NetHack/pull/673#issuecomment-1036679123,"When a 'full-screen' (cw->offx and cw->offy both 0) menu was immediately
followed by an offset menu -- as in the case of selecting certain
options from the options menu, or using loot to take out/put in items
after using ':' to describe the contents of a very full container --
there were some odd interactions with the map.
Only certain parts of the map near/under the menu window would be
redrawn if the first offset menu was followed by another one, while
a getlin prompt would cause the entire map to be redrawn, with parts
intersecting the window being drawn on top of it and obscuring it.
Flushing the display immediately after the docrt call when closing a
full-screen menu seems to fix both these issues.
It's a little hard to describe the 'weirdness' so here are some illustrative videos:
Before:

  
    
    

    before.mp4
    
  

  

  


After:

  
    
    

    after.mp4","Weird -- I can reproduce both aspects of this behavior in 3.4.3, even (well, the version of 3.4.3 on hardfought, so it has some community patches applied).  They happen for me in 3.6.6 as well.  Neither the 'use ':' to make the map suddenly appear' nor the 'multiple menus in succession can cause the intersecting part of the map to be redrawn' things are happening?

  
    
    

    343-hdf.mp4
    
  

  

  


What I have done in the video (opening options, selecting 'autopickup exceptions', then 'list exceptions', spacebar, and pressing ':') is pretty consistent in reproducing it for me, at least when my terminal is small enough (e.g. something like 120 cols, 45 rows for the video in this comment).",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,675,2022-02-09T16:30:22Z,2022-02-10T01:37:19Z,2022-02-10T06:18:27Z,MERGED,True,3,2,1,https://github.com/argrath,move null-check on savelev(),1,[],https://github.com/NetHack/NetHack/pull/675,https://github.com/argrath,1,https://github.com/NetHack/NetHack/pull/675,Move null-check of nhfp before its first use.,Move null-check of nhfp before its first use.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,676,2022-02-09T20:18:36Z,2022-02-10T01:37:19Z,2022-02-10T06:18:11Z,MERGED,True,21,19,1,https://github.com/argrath,Move null-check on tin_details(),1,[],https://github.com/NetHack/NetHack/pull/676,https://github.com/argrath,1,https://github.com/NetHack/NetHack/pull/676,Move null-check of obj and buf before their first use.,Move null-check of obj and buf before their first use.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,677,2022-02-10T14:15:12Z,2022-02-12T20:37:16Z,2022-02-20T16:50:09Z,CLOSED,False,5,0,1,https://github.com/argrath,Check the return value of nhl_init() on com_pager_core(),1,[],https://github.com/NetHack/NetHack/pull/677,https://github.com/argrath,1,https://github.com/NetHack/NetHack/pull/677,nhl_init() can return NULL.,nhl_init() can return NULL.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,681,2022-02-11T07:53:26Z,2022-02-11T18:37:33Z,2022-02-11T20:20:34Z,CLOSED,False,3,2,1,https://github.com/argrath,Remove redundant null-check on christen_orc(),1,[],https://github.com/NetHack/NetHack/pull/681,https://github.com/argrath,1,https://github.com/NetHack/NetHack/pull/681,"rndorcname() returns buf2 itself, so orcname is never NULL.","rndorcname() returns buf2 itself, so orcname is never NULL.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,682,2022-02-18T22:37:21Z,2022-02-20T06:37:18Z,2022-02-20T14:41:58Z,CLOSED,False,1,1,1,https://github.com/entrez,Make ravens oviparous,1,[],https://github.com/NetHack/NetHack/pull/682,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/682,"Ravens are birds, so they should be able to lay eggs.","Ravens are birds, so they should be able to lay eggs.",True,"{'THUMBS_UP': ['https://github.com/ostrosablin', 'https://github.com/gebulmer', 'https://github.com/perryprog', 'https://github.com/PFGimenez'], 'HEART': ['https://github.com/perryprog']}"
NetHack/NetHack,https://github.com/NetHack/NetHack,683,2022-02-20T21:26:48Z,2022-02-21T03:37:16Z,2022-02-21T08:15:43Z,CLOSED,False,1,1,1,https://github.com/argrath,Add missing initializer on tally_BUCX(),1,[],https://github.com/NetHack/NetHack/pull/683,https://github.com/argrath,1,https://github.com/NetHack/NetHack/pull/683,,,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,684,2022-02-23T18:03:40Z,2022-02-24T12:59:30Z,2022-02-24T18:50:39Z,CLOSED,False,12,16,4,https://github.com/entrez,Fix: monster hurtling and liquid,1,[],https://github.com/NetHack/NetHack/pull/684,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/684,"A monster hurtling over liquid would drown immediately the instant it
touched the first square of water, even if normally it would have kept
moving (e.g. hurtling over a short moat).  Additionally, its placement
on liquid would not take into consideration other monsters, so it could
overwrite an existing monster on that spot and lead to an impossible,
and/or two monsters occupying a single position.
Fix these issues, so that liquid effects like drowning only happen if
the monster ends up in liquid at the end of the hurtle, and so that
other monsters in the way will stop it early even if they're floating
over or swimming on a pool/water/lava square.
Also use canspotmon instead of canseemon for the wiztelekinesis debug
command.","A monster hurtling over liquid would drown immediately the instant it
touched the first square of water, even if normally it would have kept
moving (e.g. hurtling over a short moat).  Additionally, its placement
on liquid would not take into consideration other monsters, so it could
overwrite an existing monster on that spot and lead to an impossible,
and/or two monsters occupying a single position.
Fix these issues, so that liquid effects like drowning only happen if
the monster ends up in liquid at the end of the hurtle, and so that
other monsters in the way will stop it early even if they're floating
over or swimming on a pool/water/lava square.
Also use canspotmon instead of canseemon for the wiztelekinesis debug
command.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,684,2022-02-23T18:03:40Z,2022-02-24T12:59:30Z,2022-02-24T18:50:39Z,CLOSED,False,12,16,4,https://github.com/entrez,Fix: monster hurtling and liquid,1,[],https://github.com/NetHack/NetHack/pull/684,https://github.com/entrez,2,https://github.com/NetHack/NetHack/pull/684#issuecomment-1049186709,"A monster hurtling over liquid would drown immediately the instant it
touched the first square of water, even if normally it would have kept
moving (e.g. hurtling over a short moat).  Additionally, its placement
on liquid would not take into consideration other monsters, so it could
overwrite an existing monster on that spot and lead to an impossible,
and/or two monsters occupying a single position.
Fix these issues, so that liquid effects like drowning only happen if
the monster ends up in liquid at the end of the hurtle, and so that
other monsters in the way will stop it early even if they're floating
over or swimming on a pool/water/lava square.
Also use canspotmon instead of canseemon for the wiztelekinesis debug
command.","I marked this as a draft because I realized I wasn't sure if 'hurtling' entails sliding across the floor (in which case it makes sense that the first square with liquid would end it) or being thrown through the air; after some discussion on IRC most people seem to think that it probably involves flying through the air, so I'm reopening it, at least for now... if it should be more like sliding on the floor, it ought to be a pretty small tweak to bring it in line with that.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,684,2022-02-23T18:03:40Z,2022-02-24T12:59:30Z,2022-02-24T18:50:39Z,CLOSED,False,12,16,4,https://github.com/entrez,Fix: monster hurtling and liquid,1,[],https://github.com/NetHack/NetHack/pull/684,https://github.com/paxed,3,https://github.com/NetHack/NetHack/pull/684#issuecomment-1049834197,"A monster hurtling over liquid would drown immediately the instant it
touched the first square of water, even if normally it would have kept
moving (e.g. hurtling over a short moat).  Additionally, its placement
on liquid would not take into consideration other monsters, so it could
overwrite an existing monster on that spot and lead to an impossible,
and/or two monsters occupying a single position.
Fix these issues, so that liquid effects like drowning only happen if
the monster ends up in liquid at the end of the hurtle, and so that
other monsters in the way will stop it early even if they're floating
over or swimming on a pool/water/lava square.
Also use canspotmon instead of canseemon for the wiztelekinesis debug
command.",Merged,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,685,2022-02-25T18:38:35Z,2022-02-26T11:37:18Z,2022-02-26T11:45:43Z,CLOSED,False,3,1,1,https://github.com/argrath,Move arguments validation on place_object() before their first use,1,[],https://github.com/NetHack/NetHack/pull/685,https://github.com/argrath,1,https://github.com/NetHack/NetHack/pull/685,,,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,692,2022-03-07T02:45:50Z,2022-03-08T03:37:18Z,2022-03-08T03:37:18Z,CLOSED,False,2,2,1,https://github.com/zomGreg,corrected spelling of metaphor,2,[],https://github.com/NetHack/NetHack/pull/692,https://github.com/zomGreg,1,https://github.com/NetHack/NetHack/pull/692,I think this is the generally accepted way of spelling these words.,I think this is the generally accepted way of spelling these words.,True,{'THUMBS_UP': ['https://github.com/copperwater']}
NetHack/NetHack,https://github.com/NetHack/NetHack,693,2022-03-09T21:12:35Z,2022-03-10T18:37:19Z,2022-03-10T22:12:56Z,MERGED,True,1,1,1,https://github.com/argrath,Add explicit cast on somexy() call,1,[],https://github.com/NetHack/NetHack/pull/693,https://github.com/argrath,1,https://github.com/NetHack/NetHack/pull/693,All other somexy() calls not using a return value have a cast.,All other somexy() calls not using a return value have a cast.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,694,2022-03-11T15:48:38Z,2022-03-11T22:37:17Z,2022-03-12T20:36:17Z,CLOSED,False,2,1,1,https://github.com/argrath,Remove redundant null-check on untrap_prob(),1,[],https://github.com/NetHack/NetHack/pull/694,https://github.com/argrath,1,https://github.com/NetHack/NetHack/pull/694,"ttmp should not be NULL here, otherwise this function will crash at earlier code.","ttmp should not be NULL here, otherwise this function will crash at earlier code.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,698,2022-03-14T13:50:08Z,2022-03-14T14:17:17Z,2022-03-14T21:01:54Z,CLOSED,False,33,54,9,https://github.com/copperwater,Externify trycall() and replace many docall() calls with it,1,[],https://github.com/NetHack/NetHack/pull/698,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/698,"trycall() is a short docall() wrapper that is a no-op if the item is
already identified or the player has called the object type already. For
some reason, many calls to docall() did those same exact checks
beforehand.
This commit eliminates that redundancy by converting those calls into
trycall(), which is now made extern rather than local to do.c. No
behavior should be changed by this commit; I've checked that none of the
affected places could take a different code path now that the
oc_name_known and oc_uname checks are removed.","trycall() is a short docall() wrapper that is a no-op if the item is
already identified or the player has called the object type already. For
some reason, many calls to docall() did those same exact checks
beforehand.
This commit eliminates that redundancy by converting those calls into
trycall(), which is now made extern rather than local to do.c. No
behavior should be changed by this commit; I've checked that none of the
affected places could take a different code path now that the
oc_name_known and oc_uname checks are removed.",True,{'THUMBS_UP': ['https://github.com/entrez']}
NetHack/NetHack,https://github.com/NetHack/NetHack,698,2022-03-14T13:50:08Z,2022-03-14T14:17:17Z,2022-03-14T21:01:54Z,CLOSED,False,33,54,9,https://github.com/copperwater,Externify trycall() and replace many docall() calls with it,1,[],https://github.com/NetHack/NetHack/pull/698,https://github.com/paxed,2,https://github.com/NetHack/NetHack/pull/698#issuecomment-1066849105,"trycall() is a short docall() wrapper that is a no-op if the item is
already identified or the player has called the object type already. For
some reason, many calls to docall() did those same exact checks
beforehand.
This commit eliminates that redundancy by converting those calls into
trycall(), which is now made extern rather than local to do.c. No
behavior should be changed by this commit; I've checked that none of the
affected places could take a different code path now that the
oc_name_known and oc_uname checks are removed.",Committed.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,699,2022-03-14T14:18:35Z,2022-03-15T05:42:55Z,2022-03-15T05:42:55Z,CLOSED,False,1,1,1,https://github.com/copperwater,Reduce eucalyptus leaf nutrition to 1,1,[],https://github.com/NetHack/NetHack/pull/699,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/699,"Eucalyptus leaves are famously inedible except by certain animals such
as koalas. I consider it very strange that a single leaf in NetHack
gives you six meatballs' worth of calories.
I considered making it 0 nutrition, but am not sure if a 0-nutrition
comestible would end up violating some assumption that all food is at
least 1 nutrition. If that's overly cautious and it's safe to do this, feel free
to make it 0 instead of 1.","Eucalyptus leaves are famously inedible except by certain animals such
as koalas. I consider it very strange that a single leaf in NetHack
gives you six meatballs' worth of calories.
I considered making it 0 nutrition, but am not sure if a 0-nutrition
comestible would end up violating some assumption that all food is at
least 1 nutrition. If that's overly cautious and it's safe to do this, feel free
to make it 0 instead of 1.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,699,2022-03-14T14:18:35Z,2022-03-15T05:42:55Z,2022-03-15T05:42:55Z,CLOSED,False,1,1,1,https://github.com/copperwater,Reduce eucalyptus leaf nutrition to 1,1,[],https://github.com/NetHack/NetHack/pull/699,https://github.com/paxed,2,https://github.com/NetHack/NetHack/pull/699#issuecomment-1067585908,"Eucalyptus leaves are famously inedible except by certain animals such
as koalas. I consider it very strange that a single leaf in NetHack
gives you six meatballs' worth of calories.
I considered making it 0 nutrition, but am not sure if a 0-nutrition
comestible would end up violating some assumption that all food is at
least 1 nutrition. If that's overly cautious and it's safe to do this, feel free
to make it 0 instead of 1.",Committed.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,700,2022-03-14T15:29:54Z,2022-03-14T17:07:54Z,2022-03-14T21:47:50Z,CLOSED,False,41,5,2,https://github.com/copperwater,Implement selection addition and difference,1,[],https://github.com/NetHack/NetHack/pull/700,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/700,"Selection difference is something I have found myself wanting a lot when
working on levels, and have had to defer to a clunkier xor-then-and
approach. This commit implements the TODO-ed addition and subtraction
operators on two sets.
I don't see how the addition operator would be any different from
logical or, so it just calls l_selection_or rather than implement a new
function.","Selection difference is something I have found myself wanting a lot when
working on levels, and have had to defer to a clunkier xor-then-and
approach. This commit implements the TODO-ed addition and subtraction
operators on two sets.
I don't see how the addition operator would be any different from
logical or, so it just calls l_selection_or rather than implement a new
function.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,700,2022-03-14T15:29:54Z,2022-03-14T17:07:54Z,2022-03-14T21:47:50Z,CLOSED,False,41,5,2,https://github.com/copperwater,Implement selection addition and difference,1,[],https://github.com/NetHack/NetHack/pull/700,https://github.com/paxed,2,https://github.com/NetHack/NetHack/pull/700#issuecomment-1067072845,"Selection difference is something I have found myself wanting a lot when
working on levels, and have had to defer to a clunkier xor-then-and
approach. This commit implements the TODO-ed addition and subtraction
operators on two sets.
I don't see how the addition operator would be any different from
logical or, so it just calls l_selection_or rather than implement a new
function.",Committed.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,701,2022-03-15T01:11:59Z,2022-03-15T05:49:24Z,2022-03-15T18:27:04Z,CLOSED,False,32,61,4,https://github.com/copperwater,"Fix selection ""random"" grow direction, and other code cleanup",1,[],https://github.com/NetHack/NetHack/pull/701,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/701,"Noticed that when I set a selection to grow in a random direction, it
instead grew in all directions, which is not what I wanted. Turns out
the -1 random dir ended up being passed straight to the code which
checks bitmasks, without any form of randomizing among directions.
So this adds code to do that, and defines W_RANDOM as -1 rather than
using a magic number. In the process I also noticed that specifying
""random"" as the wall for a door in a room made it rerandomize the
direction every iteration of its loop, essentially rolling two rn2(4)s
and only proceeding if they matched. That was pointless so I cleaned it
up a bit.
Also added safety checks in the form of an impossible for des.corridor()
being called with ""random"" as either walldir, because this is not
implemented currently.
And lastly, I noticed that create_secret_door was entirely unused
(secret door creation is handled in create_door), so I deleted it.
The only behavior change caused by this is that the Valkyrie quest lava
pools will be a little smaller, which is the only place grow is
currently used. If it's desired to keep them the same, that should be
changed to ""all"".","Noticed that when I set a selection to grow in a random direction, it
instead grew in all directions, which is not what I wanted. Turns out
the -1 random dir ended up being passed straight to the code which
checks bitmasks, without any form of randomizing among directions.
So this adds code to do that, and defines W_RANDOM as -1 rather than
using a magic number. In the process I also noticed that specifying
""random"" as the wall for a door in a room made it rerandomize the
direction every iteration of its loop, essentially rolling two rn2(4)s
and only proceeding if they matched. That was pointless so I cleaned it
up a bit.
Also added safety checks in the form of an impossible for des.corridor()
being called with ""random"" as either walldir, because this is not
implemented currently.
And lastly, I noticed that create_secret_door was entirely unused
(secret door creation is handled in create_door), so I deleted it.
The only behavior change caused by this is that the Valkyrie quest lava
pools will be a little smaller, which is the only place grow is
currently used. If it's desired to keep them the same, that should be
changed to ""all"".",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,701,2022-03-15T01:11:59Z,2022-03-15T05:49:24Z,2022-03-15T18:27:04Z,CLOSED,False,32,61,4,https://github.com/copperwater,"Fix selection ""random"" grow direction, and other code cleanup",1,[],https://github.com/NetHack/NetHack/pull/701,https://github.com/paxed,2,https://github.com/NetHack/NetHack/pull/701#issuecomment-1067588615,"Noticed that when I set a selection to grow in a random direction, it
instead grew in all directions, which is not what I wanted. Turns out
the -1 random dir ended up being passed straight to the code which
checks bitmasks, without any form of randomizing among directions.
So this adds code to do that, and defines W_RANDOM as -1 rather than
using a magic number. In the process I also noticed that specifying
""random"" as the wall for a door in a room made it rerandomize the
direction every iteration of its loop, essentially rolling two rn2(4)s
and only proceeding if they matched. That was pointless so I cleaned it
up a bit.
Also added safety checks in the form of an impossible for des.corridor()
being called with ""random"" as either walldir, because this is not
implemented currently.
And lastly, I noticed that create_secret_door was entirely unused
(secret door creation is handled in create_door), so I deleted it.
The only behavior change caused by this is that the Valkyrie quest lava
pools will be a little smaller, which is the only place grow is
currently used. If it's desired to keep them the same, that should be
changed to ""all"".",Committed,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,703,2022-03-15T22:36:32Z,2022-03-16T05:41:28Z,2022-03-16T13:45:06Z,CLOSED,False,3,2,1,https://github.com/entrez,Fix: levitating/flying monsters moving over liquid,1,[],https://github.com/NetHack/NetHack/pull/703,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/703,"Commit c1a6dd4 was meant to prevent flying, levitating, and clinging
monsters from considering walls of water as acceptable movement
destinations, even outside of the Plane of Water.  However, it was
evaluating the monster's starting position instead of possible places to
move to, and the evaluation was 'backwards' (the equivalent of
IS_WATERWALL, instead of !IS_WATERWALL).
The result was that non-swimming monsters could only move onto any kind
of water or lava square if the position they were moving from was a
WATER square.  Change this so that instead of the starting position,
each potential destination spot's status as a wall of water is evaluated
in turn, and reverse the effect of the test so that it blocks walls of
water instead of allowing them.","Commit c1a6dd4 was meant to prevent flying, levitating, and clinging
monsters from considering walls of water as acceptable movement
destinations, even outside of the Plane of Water.  However, it was
evaluating the monster's starting position instead of possible places to
move to, and the evaluation was 'backwards' (the equivalent of
IS_WATERWALL, instead of !IS_WATERWALL).
The result was that non-swimming monsters could only move onto any kind
of water or lava square if the position they were moving from was a
WATER square.  Change this so that instead of the starting position,
each potential destination spot's status as a wall of water is evaluated
in turn, and reverse the effect of the test so that it blocks walls of
water instead of allowing them.",True,{'THUMBS_UP': ['https://github.com/copperwater']}
NetHack/NetHack,https://github.com/NetHack/NetHack,703,2022-03-15T22:36:32Z,2022-03-16T05:41:28Z,2022-03-16T13:45:06Z,CLOSED,False,3,2,1,https://github.com/entrez,Fix: levitating/flying monsters moving over liquid,1,[],https://github.com/NetHack/NetHack/pull/703,https://github.com/paxed,2,https://github.com/NetHack/NetHack/pull/703#issuecomment-1068753636,"Commit c1a6dd4 was meant to prevent flying, levitating, and clinging
monsters from considering walls of water as acceptable movement
destinations, even outside of the Plane of Water.  However, it was
evaluating the monster's starting position instead of possible places to
move to, and the evaluation was 'backwards' (the equivalent of
IS_WATERWALL, instead of !IS_WATERWALL).
The result was that non-swimming monsters could only move onto any kind
of water or lava square if the position they were moving from was a
WATER square.  Change this so that instead of the starting position,
each potential destination spot's status as a wall of water is evaluated
in turn, and reverse the effect of the test so that it blocks walls of
water instead of allowing them.",Committed.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,705,2022-03-18T01:07:50Z,2022-03-18T04:44:37Z,2022-03-18T14:39:34Z,CLOSED,False,24,2,1,https://github.com/entrez,Collisions while hurtling can stone participants,1,[],https://github.com/NetHack/NetHack/pull/705,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/705,"Hurtling into a monster is described as ""bumping into"" it, so it makes
sense that hurtling willy-nilly into a cockatrice (or vice-versa) could
result in petrification.  Since hurtling for the hero usually involves
""floating in the opposite direction"" (presumably backwards) after
throwing an item, check whether the hero is wearing any body armor which
would cover their torso rather than looking for gloves.  Do the same for
monsters on the general basis that it's a bodily collision, and for the
sake of consistency.

  
    
    

    joust.mp4","Hurtling into a monster is described as ""bumping into"" it, so it makes
sense that hurtling willy-nilly into a cockatrice (or vice-versa) could
result in petrification.  Since hurtling for the hero usually involves
""floating in the opposite direction"" (presumably backwards) after
throwing an item, check whether the hero is wearing any body armor which
would cover their torso rather than looking for gloves.  Do the same for
monsters on the general basis that it's a bodily collision, and for the
sake of consistency.

  
    
    

    joust.mp4",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,705,2022-03-18T01:07:50Z,2022-03-18T04:44:37Z,2022-03-18T14:39:34Z,CLOSED,False,24,2,1,https://github.com/entrez,Collisions while hurtling can stone participants,1,[],https://github.com/NetHack/NetHack/pull/705,https://github.com/paxed,2,https://github.com/NetHack/NetHack/pull/705#issuecomment-1072026676,"Hurtling into a monster is described as ""bumping into"" it, so it makes
sense that hurtling willy-nilly into a cockatrice (or vice-versa) could
result in petrification.  Since hurtling for the hero usually involves
""floating in the opposite direction"" (presumably backwards) after
throwing an item, check whether the hero is wearing any body armor which
would cover their torso rather than looking for gloves.  Do the same for
monsters on the general basis that it's a bodily collision, and for the
sake of consistency.

  
    
    

    joust.mp4",Committed,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,707,2022-03-19T11:52:05Z,2022-03-19T20:37:24Z,2022-03-19T20:39:06Z,MERGED,True,4,4,3,https://github.com/argrath,Add explicit cast to void,1,[],https://github.com/NetHack/NetHack/pull/707,https://github.com/argrath,1,https://github.com/NetHack/NetHack/pull/707,All other these calls not using a return value have a cast.,All other these calls not using a return value have a cast.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,708,2022-03-19T19:42:28Z,2022-03-20T05:37:18Z,2022-03-22T16:19:22Z,CLOSED,False,2,0,1,https://github.com/entrez,Fix: repeated 'hit with a wielded weapon' logging,1,[],https://github.com/NetHack/NetHack/pull/708,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/708,"The ""hit with a wielded weapon for the first time"" livelog line could be
produced repeatedly: it was triggered by hitting a monster with a
wielded object of any sort, but the u.uconduct.weaphit counter was only
incremented if hitting with an actual 'weapon' (a WEAPON_CLASS or
is_weptool item).  As a result, if a non-weapon-using hero whipped out a
non-weapon item -- a cockatrice corpse, for example -- and started going
to town on some monsters, the livelog message would be repeated with
every hit.","The ""hit with a wielded weapon for the first time"" livelog line could be
produced repeatedly: it was triggered by hitting a monster with a
wielded object of any sort, but the u.uconduct.weaphit counter was only
incremented if hitting with an actual 'weapon' (a WEAPON_CLASS or
is_weptool item).  As a result, if a non-weapon-using hero whipped out a
non-weapon item -- a cockatrice corpse, for example -- and started going
to town on some monsters, the livelog message would be repeated with
every hit.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,708,2022-03-19T19:42:28Z,2022-03-20T05:37:18Z,2022-03-22T16:19:22Z,CLOSED,False,2,0,1,https://github.com/entrez,Fix: repeated 'hit with a wielded weapon' logging,1,[],https://github.com/NetHack/NetHack/pull/708,https://github.com/entrez,2,https://github.com/NetHack/NetHack/pull/708#issuecomment-1073071338,"The ""hit with a wielded weapon for the first time"" livelog line could be
produced repeatedly: it was triggered by hitting a monster with a
wielded object of any sort, but the u.uconduct.weaphit counter was only
incremented if hitting with an actual 'weapon' (a WEAPON_CLASS or
is_weptool item).  As a result, if a non-weapon-using hero whipped out a
non-weapon item -- a cockatrice corpse, for example -- and started going
to town on some monsters, the livelog message would be repeated with
every hit.","I feel like ideally, it'd be preferable to have the livelog message printed at the same time as the counter increments, rather than trying to sync the criteria for the two events as I've done here.  But after reading this comment, which sounds as though they were decoupled for a good reason, I didn't really look into that possibility any further for fear of messing things up...

  
    
      NetHack/src/uhitm.c
    
    
        Lines 747 to 750
      in
      64371dc
    
  
  
    

        
          
                * More complications:  first_weapon_hit() should be called before 
        

        
          
                * xkilled() in order to have the gamelog messages in the right order. 
        

        
          
                * So it can't be deferred until end of known_hitum() as was originally 
        

        
          
                * done.  We might call it directly or indirectly via mhurtle_to_doom().",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,709,2022-03-21T01:37:59Z,2022-03-22T09:07:42Z,2022-03-22T15:10:59Z,CLOSED,False,7,0,1,https://github.com/copperwater,Add safeguard to catch non-table coord being given in Lua,1,[],https://github.com/NetHack/NetHack/pull/709,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/709,"Frequently when working on special level lua files, I end up writing something like:
local antarea = selection.area(45,10,61,16)
des.monster({ id=""soldier ant"", coord=antarea:rndcoord(1) })

and then say ""what the heck why are the ants spawning in random places all over the map"". The correct usage is this:
des.monster({ id=""soldier ant"", coord={antarea:rndcoord(1)} })

because it expects a table and rndcoord does not return a coord, just a pair of ints. (I don't particularly think that behavior should change.) The problem is that it's a little too easy to miss this and wind up with a level not generating the way it was intended.
So to address that, this adds a lua error if coord is specified as something non-nil, but it is anything besides a table. (The existing get_coord code ensures that when it is a table, it must be a table of exactly 2 integers). In the case of forgotten braces around rndcoord, coord's type ends up as a number, so it gets caught by this.","Frequently when working on special level lua files, I end up writing something like:
local antarea = selection.area(45,10,61,16)
des.monster({ id=""soldier ant"", coord=antarea:rndcoord(1) })

and then say ""what the heck why are the ants spawning in random places all over the map"". The correct usage is this:
des.monster({ id=""soldier ant"", coord={antarea:rndcoord(1)} })

because it expects a table and rndcoord does not return a coord, just a pair of ints. (I don't particularly think that behavior should change.) The problem is that it's a little too easy to miss this and wind up with a level not generating the way it was intended.
So to address that, this adds a lua error if coord is specified as something non-nil, but it is anything besides a table. (The existing get_coord code ensures that when it is a table, it must be a table of exactly 2 integers). In the case of forgotten braces around rndcoord, coord's type ends up as a number, so it gets caught by this.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,709,2022-03-21T01:37:59Z,2022-03-22T09:07:42Z,2022-03-22T15:10:59Z,CLOSED,False,7,0,1,https://github.com/copperwater,Add safeguard to catch non-table coord being given in Lua,1,[],https://github.com/NetHack/NetHack/pull/709,https://github.com/paxed,2,https://github.com/NetHack/NetHack/pull/709#issuecomment-1074909246,"Frequently when working on special level lua files, I end up writing something like:
local antarea = selection.area(45,10,61,16)
des.monster({ id=""soldier ant"", coord=antarea:rndcoord(1) })

and then say ""what the heck why are the ants spawning in random places all over the map"". The correct usage is this:
des.monster({ id=""soldier ant"", coord={antarea:rndcoord(1)} })

because it expects a table and rndcoord does not return a coord, just a pair of ints. (I don't particularly think that behavior should change.) The problem is that it's a little too easy to miss this and wind up with a level not generating the way it was intended.
So to address that, this adds a lua error if coord is specified as something non-nil, but it is anything besides a table. (The existing get_coord code ensures that when it is a table, it must be a table of exactly 2 integers). In the case of forgotten braces around rndcoord, coord's type ends up as a number, so it gets caught by this.",Good idea! Commited a slightly different change.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,710,2022-03-22T20:59:12Z,2022-03-23T01:37:18Z,2022-03-23T13:00:19Z,CLOSED,False,9,0,1,https://github.com/entrez,"Handle spiders, cockatrices in mbodypart",1,[],https://github.com/NetHack/NetHack/pull/710,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/710,"Spiders and cockatrices were using the default animal_parts, which was
noticeably inaccurate in describing certain parts of their bodies.  Add
specific handling for both types of monsters: for spiders, add a
spider-specific body part list (the best I could figure out from online
sources, not being a spider anatomy expert), and for cockatrices, use
bird_parts with ""scales"" from snake_parts thrown in to emphasize their
unusual nature.","Spiders and cockatrices were using the default animal_parts, which was
noticeably inaccurate in describing certain parts of their bodies.  Add
specific handling for both types of monsters: for spiders, add a
spider-specific body part list (the best I could figure out from online
sources, not being a spider anatomy expert), and for cockatrices, use
bird_parts with ""scales"" from snake_parts thrown in to emphasize their
unusual nature.",True,"{'THUMBS_UP': ['https://github.com/k21971', 'https://github.com/copperwater']}"
NetHack/NetHack,https://github.com/NetHack/NetHack,711,2022-03-23T01:20:34Z,,2022-03-23T01:20:34Z,OPEN,False,14,0,1,https://github.com/copperwater,Make nh.getmap() return information relative to the most recent des.map,1,[],https://github.com/NetHack/NetHack/pull/711,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/711,"There are many possible use cases for nh.getmap during level creation,
but it's rendered mostly unusable by virtue of always returning data
about the exact x,y coordinate in g.level.locations. (In particular,
it can't currently be used in themed rooms at all, because the themed
room could be anywhere on the level.) This is inconsistent with how most
other coordinate-based functions work following a des.map, which use
coordinates relative to the 0,0 point of the map.
This changes it so that during level creation only, if nh.getmap is used
following a des.map statement, it will look up the coordinates relative
to the origin of the map, consistent with the other functions.","There are many possible use cases for nh.getmap during level creation,
but it's rendered mostly unusable by virtue of always returning data
about the exact x,y coordinate in g.level.locations. (In particular,
it can't currently be used in themed rooms at all, because the themed
room could be anywhere on the level.) This is inconsistent with how most
other coordinate-based functions work following a des.map, which use
coordinates relative to the 0,0 point of the map.
This changes it so that during level creation only, if nh.getmap is used
following a des.map statement, it will look up the coordinates relative
to the origin of the map, consistent with the other functions.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,712,2022-03-23T19:17:48Z,2022-03-25T16:37:23Z,2022-03-25T17:25:44Z,MERGED,True,4,1,1,https://github.com/argrath,Move null-check on savelev(),1,[],https://github.com/NetHack/NetHack/pull/712,https://github.com/argrath,1,https://github.com/NetHack/NetHack/pull/712,Move null-check of ttmp before its first use.,Move null-check of ttmp before its first use.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,713,2022-03-25T06:49:35Z,2022-03-25T16:37:23Z,2022-03-25T17:25:28Z,MERGED,True,1,0,1,https://github.com/argrath,Add initializer on use_tinning_kit(),1,[],https://github.com/NetHack/NetHack/pull/713,https://github.com/argrath,1,https://github.com/NetHack/NetHack/pull/713,"If poly_when_stoned() is true, an uninitialized buffer kbuf[] is passed to instapetrify().
Although instapetrify() doesn't access it in that situation for now,
it should be initialized anyway for readability.","If poly_when_stoned() is true, an uninitialized buffer kbuf[] is passed to instapetrify().
Although instapetrify() doesn't access it in that situation for now,
it should be initialized anyway for readability.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,714,2022-03-25T21:47:17Z,2022-04-08T21:37:17Z,2022-04-09T06:22:11Z,CLOSED,False,25,17,1,https://github.com/argrath,Separate function for offering too soon,1,[],https://github.com/NetHack/NetHack/pull/714,https://github.com/argrath,1,https://github.com/NetHack/NetHack/pull/714,,,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,718,2022-04-01T05:41:53Z,2022-04-01T21:37:17Z,2022-04-01T23:45:56Z,CLOSED,False,1,1,1,https://github.com/vultur-cadens,"fix ""pertrified"" typo",1,[],https://github.com/NetHack/NetHack/pull/718,https://github.com/vultur-cadens,1,https://github.com/NetHack/NetHack/pull/718,,,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,720,2022-04-05T17:19:52Z,2022-04-08T21:37:18Z,2022-04-08T21:37:18Z,CLOSED,False,13,2,1,https://github.com/copperwater,Fix: monster gender could not actually be specified in lua files,1,[],https://github.com/NetHack/NetHack/pull/720,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/720,"Noticed when I tried to create a male monster of a species that permits
both males and females (i.e. not a single-gender or neuter species),
half the time the monster ended up female anyway. This was because
get_table_montype picks a random monster gender for such species, and
lspo_monster just sets it to that, making it impossible to deliberately
have a monster of a certain gender.
This fixes that by defaulting the ""female"" table argument to random
instead of false, and then checking to see whether the level file set it
to something other than random. If so, it uses that value.
I debated whether this should allow a level designer to make a monster
of a gender that conflicts with their species, such as a male nymph, but
erred on the side of respecting the species. So attempting to specify a
male nymph, etc. will still result in a female one.","Noticed when I tried to create a male monster of a species that permits
both males and females (i.e. not a single-gender or neuter species),
half the time the monster ended up female anyway. This was because
get_table_montype picks a random monster gender for such species, and
lspo_monster just sets it to that, making it impossible to deliberately
have a monster of a certain gender.
This fixes that by defaulting the ""female"" table argument to random
instead of false, and then checking to see whether the level file set it
to something other than random. If so, it uses that value.
I debated whether this should allow a level designer to make a monster
of a gender that conflicts with their species, such as a male nymph, but
erred on the side of respecting the species. So attempting to specify a
male nymph, etc. will still result in a female one.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,721,2022-04-06T16:37:24Z,2022-04-08T21:37:18Z,2022-04-08T21:37:18Z,CLOSED,False,4,0,1,https://github.com/copperwater,Make sure xstart and ystart are always zero when not in_mklev,1,[],https://github.com/NetHack/NetHack/pull/721,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/721,"Running #wizloadlua to run Lua scripts that use coordinates in any way
would work differently if you were on certain levels for the first time
versus leaving and returning to them. This is because various bits of
level creation routines can leave xstart and ystart set to non-zero
values, which are then zeroed at some point when leaving and returning
to the level.
Since xstart and ystart are only relevant to level creation and lua
commands, this fixes the problem by zeroing them after leaving mklev
routines. (Saving them with the level doesn't work because xstart and
ystart are relative to the last used des.map, of which there could be
multiple, e.g. in Asmodeus's level or if two map-based themed rooms
happen to generate. I can envision a more complex solution in which
every des.map used in the level can be associated with an identifier,
whose xstart and ystart are saved for use by later post-level-creation
lua scripts, but currently I just want to make them consistent between
level visits.)","Running #wizloadlua to run Lua scripts that use coordinates in any way
would work differently if you were on certain levels for the first time
versus leaving and returning to them. This is because various bits of
level creation routines can leave xstart and ystart set to non-zero
values, which are then zeroed at some point when leaving and returning
to the level.
Since xstart and ystart are only relevant to level creation and lua
commands, this fixes the problem by zeroing them after leaving mklev
routines. (Saving them with the level doesn't work because xstart and
ystart are relative to the last used des.map, of which there could be
multiple, e.g. in Asmodeus's level or if two map-based themed rooms
happen to generate. I can envision a more complex solution in which
every des.map used in the level can be associated with an identifier,
whose xstart and ystart are saved for use by later post-level-creation
lua scripts, but currently I just want to make them consistent between
level visits.)",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,724,2022-04-07T17:09:15Z,2022-04-08T21:37:18Z,2022-04-08T21:45:51Z,CLOSED,False,2,1,1,https://github.com/entrez,Add message for failed fountain monster detection,1,[],https://github.com/NetHack/NetHack/pull/724,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/724,"When the fountain quaffing monster detection effect was triggered on a
level without any monsters, no message would be printed.  I think this
was the only scenario where drinking from a fountain wouldn't print
anything, so it stood out as unusual.
Print a messsage in the case monster detection fails, to make it
consistent with other fountain effects and ensure it's clear the hero
did still drink from the fountain on that turn.  I used ""the water
tastes like nothing"" for the (sort of tenuous) connection to there being
nothing living on the level, but there might be a better message to put
in there.","When the fountain quaffing monster detection effect was triggered on a
level without any monsters, no message would be printed.  I think this
was the only scenario where drinking from a fountain wouldn't print
anything, so it stood out as unusual.
Print a messsage in the case monster detection fails, to make it
consistent with other fountain effects and ensure it's clear the hero
did still drink from the fountain on that turn.  I used ""the water
tastes like nothing"" for the (sort of tenuous) connection to there being
nothing living on the level, but there might be a better message to put
in there.",True,"{'THUMBS_UP': ['https://github.com/gebulmer', 'https://github.com/k21971']}"
NetHack/NetHack,https://github.com/NetHack/NetHack,725,2022-04-07T19:00:10Z,2022-04-08T21:37:18Z,2022-04-08T21:45:35Z,CLOSED,False,2,1,1,https://github.com/entrez,Fix: object detection vs mimic statue disguise,1,[],https://github.com/NetHack/NetHack/pull/725,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/725,"Cursed potions of object detection were showing all mimics disguised as
statues as 'i' glyphs, because object_detect used PM_TENGU as the
corpsenm of any mimic disguise.  Instead, use MCORPSENM when available
so that hidden mimics will be mapped with glyphs corresponding to their
actual disguises.","Cursed potions of object detection were showing all mimics disguised as
statues as 'i' glyphs, because object_detect used PM_TENGU as the
corpsenm of any mimic disguise.  Instead, use MCORPSENM when available
so that hidden mimics will be mapped with glyphs corresponding to their
actual disguises.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,728,2022-04-11T21:41:04Z,2022-04-30T10:37:18Z,2022-05-02T14:35:24Z,CLOSED,False,19,12,1,https://github.com/argrath,Separate some codes for desecratintg high altar,1,[],https://github.com/NetHack/NetHack/pull/728,https://github.com/argrath,1,https://github.com/NetHack/NetHack/pull/728,... and remove one goto.,... and remove one goto.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,728,2022-04-11T21:41:04Z,2022-04-30T10:37:18Z,2022-05-02T14:35:24Z,CLOSED,False,19,12,1,https://github.com/argrath,Separate some codes for desecratintg high altar,1,[],https://github.com/NetHack/NetHack/pull/728,https://github.com/entrez,2,https://github.com/NetHack/NetHack/pull/728#issuecomment-1095599232,... and remove one goto.,"What did the poor gotos ever do to you, for you to hate them so?",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,728,2022-04-11T21:41:04Z,2022-04-30T10:37:18Z,2022-05-02T14:35:24Z,CLOSED,False,19,12,1,https://github.com/argrath,Separate some codes for desecratintg high altar,1,[],https://github.com/NetHack/NetHack/pull/728,https://github.com/argrath,3,https://github.com/NetHack/NetHack/pull/728#issuecomment-1097144681,... and remove one goto.,It prevents further refactoring.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,733,2022-04-15T05:01:06Z,,2022-04-15T05:01:06Z,OPEN,False,2,1,1,https://github.com/vultur-cadens,Unidentified gem selling prices,1,[],https://github.com/NetHack/NetHack/pull/733,https://github.com/vultur-cadens,1,https://github.com/NetHack/NetHack/pull/733,"Make the token selling prices for unidentified gems not depend on how
many items were defined before FIRST_GEM.  Now the unidentified gem
selling prices will depend only on the number and defined order of the
types of gems, and won't inexplicably change when objects are added,
or depend on compile-time options such as MAIL.
Also don't do the regular item price reduction for unidentified gems,
since they are already not based on the actual value.  This restores
the pre-3.6 behavior, allowing players to gain a bit more information
from the nominal selling prices of unidentified gems.
Whoever first introduced this special handling for gems probably
intended for players to be able to gain information from gem prices
this way, but probably nobody has been doing it since 3.6.

I came across this when I was looking at the wiki:
https://nethackwiki.com/wiki/Gem#By_color
As a wiki editor, I don't want unrelated changes (like adding a new object) to automatically make the information on the wiki out of date.","Make the token selling prices for unidentified gems not depend on how
many items were defined before FIRST_GEM.  Now the unidentified gem
selling prices will depend only on the number and defined order of the
types of gems, and won't inexplicably change when objects are added,
or depend on compile-time options such as MAIL.
Also don't do the regular item price reduction for unidentified gems,
since they are already not based on the actual value.  This restores
the pre-3.6 behavior, allowing players to gain a bit more information
from the nominal selling prices of unidentified gems.
Whoever first introduced this special handling for gems probably
intended for players to be able to gain information from gem prices
this way, but probably nobody has been doing it since 3.6.

I came across this when I was looking at the wiki:
https://nethackwiki.com/wiki/Gem#By_color
As a wiki editor, I don't want unrelated changes (like adding a new object) to automatically make the information on the wiki out of date.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,735,2022-04-15T22:56:42Z,2022-04-15T23:38:21Z,2022-04-15T23:38:47Z,CLOSED,False,5,1,2,https://github.com/entrez,Fix: repeating 'free' actions with ^A takes time,1,[],https://github.com/NetHack/NetHack/pull/735,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/735,"The do_repeat function returned ECMD_TIME whenever it found something to
try to repeat, including 'free' actions like checking inventory, or
even pressing a key that's not bound to any function.  Returning ECMD_OK
has the opposite problem; repeating an action never takes time, even if
it otherwise would.
Add a new return value, ECMD_PASS, which preserves the relevant
variables set by the actual action being repeated rather than resetting
or modifying them, so that actions which take time will still take time
when repeated and 'free' actions won't.","The do_repeat function returned ECMD_TIME whenever it found something to
try to repeat, including 'free' actions like checking inventory, or
even pressing a key that's not bound to any function.  Returning ECMD_OK
has the opposite problem; repeating an action never takes time, even if
it otherwise would.
Add a new return value, ECMD_PASS, which preserves the relevant
variables set by the actual action being repeated rather than resetting
or modifying them, so that actions which take time will still take time
when repeated and 'free' actions won't.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,735,2022-04-15T22:56:42Z,2022-04-15T23:38:21Z,2022-04-15T23:38:47Z,CLOSED,False,5,1,2,https://github.com/entrez,Fix: repeating 'free' actions with ^A takes time,1,[],https://github.com/NetHack/NetHack/pull/735,https://github.com/entrez,2,https://github.com/NetHack/NetHack/pull/735#issuecomment-1100471511,"The do_repeat function returned ECMD_TIME whenever it found something to
try to repeat, including 'free' actions like checking inventory, or
even pressing a key that's not bound to any function.  Returning ECMD_OK
has the opposite problem; repeating an action never takes time, even if
it otherwise would.
Add a new return value, ECMD_PASS, which preserves the relevant
variables set by the actual action being repeated rather than resetting
or modifying them, so that actions which take time will still take time
when repeated and 'free' actions won't.",Fixed another way in 12a6321,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,737,2022-04-18T03:37:10Z,,2022-04-18T03:45:54Z,OPEN,False,193,149,4,https://github.com/NullCGT,Monster AI Improvements and monmove.c refactoring.,8,[],https://github.com/NetHack/NetHack/pull/737,https://github.com/NullCGT,1,https://github.com/NetHack/NetHack/pull/737,"This pull request contains a number of minor AI tweaks and improvements:

When the player is on a set of stairs, tame monsters acts as if the player is carrying a treat. This reduces the frustration experienced by many players when they attempt to bring their pets with them, while still allowing for intentionally leaving pets behind on other dungeon levels.
Enable offensive use of wands of teleportation by monsters. While comments in the code indicate that this behavior was disabled simply because it never occurred, I have found that in practice, this is not the case. When this code is enabled, monsters zap wands of teleportation at players standing on staircases, exactly as intended.
Allow piranhas to eat corpses in the same manner that purple worms do. In pop culture, piranhas are infamous for their ability to skeletonize animals remarkably quickly, and I thought this would be nice to represent in NetHack.

This pull request also contains some significant refactoring and readability improvements for monmove.c:

Pull illithid mind blast behavior into its own function. This shouldn't create much overhead, and enormously improves the readability of dochug().
Eliminate a number of gotos in movemon.c.
Replace magic numbers in movemon.c with constants.

I'm far from done with refactoring movement code, but I think this pull request is a good place to start. Dochug() is arguable the worst spaghetti code in the entire codebase, and I think that addressing it starts with making it more legible.","This pull request contains a number of minor AI tweaks and improvements:

When the player is on a set of stairs, tame monsters acts as if the player is carrying a treat. This reduces the frustration experienced by many players when they attempt to bring their pets with them, while still allowing for intentionally leaving pets behind on other dungeon levels.
Enable offensive use of wands of teleportation by monsters. While comments in the code indicate that this behavior was disabled simply because it never occurred, I have found that in practice, this is not the case. When this code is enabled, monsters zap wands of teleportation at players standing on staircases, exactly as intended.
Allow piranhas to eat corpses in the same manner that purple worms do. In pop culture, piranhas are infamous for their ability to skeletonize animals remarkably quickly, and I thought this would be nice to represent in NetHack.

This pull request also contains some significant refactoring and readability improvements for monmove.c:

Pull illithid mind blast behavior into its own function. This shouldn't create much overhead, and enormously improves the readability of dochug().
Eliminate a number of gotos in movemon.c.
Replace magic numbers in movemon.c with constants.

I'm far from done with refactoring movement code, but I think this pull request is a good place to start. Dochug() is arguable the worst spaghetti code in the entire codebase, and I think that addressing it starts with making it more legible.",True,"{'THUMBS_UP': ['https://github.com/ostrosablin', 'https://github.com/eakaye', 'https://github.com/copperwater']}"
NetHack/NetHack,https://github.com/NetHack/NetHack,737,2022-04-18T03:37:10Z,,2022-04-18T03:45:54Z,OPEN,False,193,149,4,https://github.com/NullCGT,Monster AI Improvements and monmove.c refactoring.,8,[],https://github.com/NetHack/NetHack/pull/737,https://github.com/NullCGT,2,https://github.com/NetHack/NetHack/pull/737#issuecomment-1101063369,"This pull request contains a number of minor AI tweaks and improvements:

When the player is on a set of stairs, tame monsters acts as if the player is carrying a treat. This reduces the frustration experienced by many players when they attempt to bring their pets with them, while still allowing for intentionally leaving pets behind on other dungeon levels.
Enable offensive use of wands of teleportation by monsters. While comments in the code indicate that this behavior was disabled simply because it never occurred, I have found that in practice, this is not the case. When this code is enabled, monsters zap wands of teleportation at players standing on staircases, exactly as intended.
Allow piranhas to eat corpses in the same manner that purple worms do. In pop culture, piranhas are infamous for their ability to skeletonize animals remarkably quickly, and I thought this would be nice to represent in NetHack.

This pull request also contains some significant refactoring and readability improvements for monmove.c:

Pull illithid mind blast behavior into its own function. This shouldn't create much overhead, and enormously improves the readability of dochug().
Eliminate a number of gotos in movemon.c.
Replace magic numbers in movemon.c with constants.

I'm far from done with refactoring movement code, but I think this pull request is a good place to start. Dochug() is arguable the worst spaghetti code in the entire codebase, and I think that addressing it starts with making it more legible.","I just learned that in the time since I worked on this, 3.7 has added constants in monmove.c, meaning that this pull request will not cleanly merge.
If there is still interest, I can update the PR.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,738,2022-04-18T21:28:16Z,2022-04-20T11:37:18Z,2022-04-20T13:12:06Z,CLOSED,False,5,3,1,https://github.com/entrez,"Fix: ""in the the purple worm's entrails""",1,[],https://github.com/NetHack/NetHack/pull/738,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/738,"The message printed if the hero threw gold while swallowed by an animal
used ""the <mon_nam>'s entrails"", which produced a doubled 'the'.  It
could also use the wrong possessive form, since it doesn't take
advantage of any of the special case handling in s_suffix.  I think the
only way that could ever be a problem with the current cast of engulfers
is if the hero was swallowed by a purple worm while hallucinating, but I
changed it to use s_suffix anyway.","The message printed if the hero threw gold while swallowed by an animal
used ""the <mon_nam>'s entrails"", which produced a doubled 'the'.  It
could also use the wrong possessive form, since it doesn't take
advantage of any of the special case handling in s_suffix.  I think the
only way that could ever be a problem with the current cast of engulfers
is if the hero was swallowed by a purple worm while hallucinating, but I
changed it to use s_suffix anyway.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,739,2022-04-19T11:08:45Z,2022-04-20T11:37:17Z,2022-04-20T13:00:36Z,CLOSED,False,2,3,1,https://github.com/argrath,remove redundant condition on adj_pit_checks(),1,[],https://github.com/NetHack/NetHack/pull/739,https://github.com/argrath,1,https://github.com/NetHack/NetHack/pull/739,"supporting is never null, as outer if statement checks it.","supporting is never null, as outer if statement checks it.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,740,2022-04-20T17:21:11Z,2022-04-21T21:36:46Z,2022-04-23T05:51:27Z,CLOSED,False,0,4,1,https://github.com/argrath,remove unnecessary code,1,[],https://github.com/NetHack/NetHack/pull/740,https://github.com/argrath,1,https://github.com/NetHack/NetHack/pull/740,"mode is initialized to 0, and the codes changing it are always breaking the loop.
So, the conditions of these if statements are always false.","mode is initialized to 0, and the codes changing it are always breaking the loop.
So, the conditions of these if statements are always false.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,743,2022-04-23T09:51:31Z,2022-04-24T12:37:24Z,2022-04-24T18:19:46Z,CLOSED,False,3,3,1,https://github.com/argrath,remove unnecessary null-check on wc_set_window_colors(),1,[],https://github.com/NetHack/NetHack/pull/743,https://github.com/argrath,1,https://github.com/NetHack/NetHack/pull/743,"mungspaces() returns its argument itself, so newop is assigned to buf, and always non-null.
tfg and tbg is assigned to (some addition of) newop, so these are also always non-null.","mungspaces() returns its argument itself, so newop is assigned to buf, and always non-null.
tfg and tbg is assigned to (some addition of) newop, so these are also always non-null.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,744,2022-04-24T00:28:37Z,2022-04-24T11:37:18Z,2022-04-24T17:17:21Z,CLOSED,False,51,25,12,https://github.com/vultur-cadens,Allow specifying object classes in the object name given to des.object(),1,[],https://github.com/NetHack/NetHack/pull/744,https://github.com/vultur-cadens,1,https://github.com/NetHack/NetHack/pull/744,"Allow specifying object classes in the object name given to des.object()
and actually do so in the lua files.
Before this, it was not possible to specify (for example) ""scroll of
teleportation"" in des.object() because there is actually no object
defined in objects.h named ""scroll of teleportation"", so
find_objtype() failed to find it.  Instead, one had to request
""teleportation"", but that is ambiguous, and find_objtype() would find
the first defined item with that name instead (ring of teleportation).
In cases of ambiguity, I referred to the des files from 3.6.6 (before
the lua conversion).

I was somewhat surprised to find that the code that handles the object names from des.object() didn't use the same logic as the wish parser.  I assume there's a technical reason for that since the existing FIXME comment in find_objtype() mentioned wish handling.","Allow specifying object classes in the object name given to des.object()
and actually do so in the lua files.
Before this, it was not possible to specify (for example) ""scroll of
teleportation"" in des.object() because there is actually no object
defined in objects.h named ""scroll of teleportation"", so
find_objtype() failed to find it.  Instead, one had to request
""teleportation"", but that is ambiguous, and find_objtype() would find
the first defined item with that name instead (ring of teleportation).
In cases of ambiguity, I referred to the des files from 3.6.6 (before
the lua conversion).

I was somewhat surprised to find that the code that handles the object names from des.object() didn't use the same logic as the wish parser.  I assume there's a technical reason for that since the existing FIXME comment in find_objtype() mentioned wish handling.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,746,2022-04-27T02:53:38Z,2022-04-28T13:37:16Z,2022-04-28T13:57:10Z,CLOSED,False,10,7,1,https://github.com/entrez,Fix: force-fight 'unknown obstacle' descriptions,1,[],https://github.com/NetHack/NetHack/pull/746,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/746,"This is intended to address a couple quirks with force-fighting an
unoccupied spot that I noticed:


Now that furniture is considered 'solid', an object is much more
likely to be sitting on the square, obscuring the terrain glyph.  As
a result, the current glyph is no longer sufficient to accurately
describe the contents of the spot -- e.g., an altar with a corpse on
top of it was being described as ""an unknown obstacle"", even when the
hero knew exactly what furniture was there.


When blind and attacking an unexplored 'solid' square, the attacked
position would always be described as 'the stone', even something
like a fountain or sink which didn't seem likely to be confused with
a stone wall.


The feedback for attacking stone was previously changed from 'solid
rock' to 'stone' in order to be consistent with the feedback for
attacking an unseen wall, but they still weren't quite the same
(""stone"" vs ""the stone"").


The 'stone' feedback for all STONE/SCORR spots was incorrect on
levels flagged as arboreal, where stone is rendered and described as
trees.


This relies on back_to_glyph for positions where the hero is aware of
the terrain and certain other spots (like stone, walls, etc) for which
back_to_glyph produces good results even if they're unseen, and falls
back to the generic ""unknown terrain"" in other cases.
Pretty long commit message for such a small commit, but oh well...","This is intended to address a couple quirks with force-fighting an
unoccupied spot that I noticed:


Now that furniture is considered 'solid', an object is much more
likely to be sitting on the square, obscuring the terrain glyph.  As
a result, the current glyph is no longer sufficient to accurately
describe the contents of the spot -- e.g., an altar with a corpse on
top of it was being described as ""an unknown obstacle"", even when the
hero knew exactly what furniture was there.


When blind and attacking an unexplored 'solid' square, the attacked
position would always be described as 'the stone', even something
like a fountain or sink which didn't seem likely to be confused with
a stone wall.


The feedback for attacking stone was previously changed from 'solid
rock' to 'stone' in order to be consistent with the feedback for
attacking an unseen wall, but they still weren't quite the same
(""stone"" vs ""the stone"").


The 'stone' feedback for all STONE/SCORR spots was incorrect on
levels flagged as arboreal, where stone is rendered and described as
trees.


This relies on back_to_glyph for positions where the hero is aware of
the terrain and certain other spots (like stone, walls, etc) for which
back_to_glyph produces good results even if they're unseen, and falls
back to the generic ""unknown terrain"" in other cases.
Pretty long commit message for such a small commit, but oh well...",True,{'THUMBS_UP': ['https://github.com/k21971']}
NetHack/NetHack,https://github.com/NetHack/NetHack,747,2022-04-29T21:00:39Z,2022-04-30T10:37:17Z,2022-04-30T15:53:19Z,CLOSED,False,1,1,1,https://github.com/argrath,remove redundant condition on tty_add_menu(),1,[],https://github.com/NetHack/NetHack/pull/747,https://github.com/argrath,1,https://github.com/NetHack/NetHack/pull/747,"newstr is assigned to str or buf.
buf is an address of an array, and str is guarded,
so both are non-NULL.","newstr is assigned to str or buf.
buf is an address of an array, and str is guarded,
so both are non-NULL.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,748,2022-04-30T18:30:56Z,2022-05-09T17:37:19Z,2022-05-09T19:16:35Z,MERGED,True,25,30,7,https://github.com/entrez,"Mark high altars in altarmask, fix display of unaligned temple altars",2,[],https://github.com/NetHack/NetHack/pull/748,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/748,"I noticed I had a branch from a few months ago with this change to altarmask,
which I don't think I ever submitted to the devteam (my apologies if I did
and just forgot about it!).  I looked it over and it seemed like a decent idea
to me, so I thought I may as well send it in now -- and if there's some big
mistake or other reason I never submitted it that I've since forgotten,
hopefully that will become apparent. :)
While testing that commit, I also noticed that altars in unaligned temples
(like the one in the Valley) weren't being displayed as the right color.

Designate high altars with dedicated altarmask bit
Fix coloring of unaligned temple altars","I noticed I had a branch from a few months ago with this change to altarmask,
which I don't think I ever submitted to the devteam (my apologies if I did
and just forgot about it!).  I looked it over and it seemed like a decent idea
to me, so I thought I may as well send it in now -- and if there's some big
mistake or other reason I never submitted it that I've since forgotten,
hopefully that will become apparent. :)
While testing that commit, I also noticed that altars in unaligned temples
(like the one in the Valley) weren't being displayed as the right color.

Designate high altars with dedicated altarmask bit
Fix coloring of unaligned temple altars",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,748,2022-04-30T18:30:56Z,2022-05-09T17:37:19Z,2022-05-09T19:16:35Z,MERGED,True,25,30,7,https://github.com/entrez,"Mark high altars in altarmask, fix display of unaligned temple altars",2,[],https://github.com/NetHack/NetHack/pull/748,https://github.com/entrez,2,https://github.com/NetHack/NetHack/pull/748#issuecomment-1118620741,"I noticed I had a branch from a few months ago with this change to altarmask,
which I don't think I ever submitted to the devteam (my apologies if I did
and just forgot about it!).  I looked it over and it seemed like a decent idea
to me, so I thought I may as well send it in now -- and if there's some big
mistake or other reason I never submitted it that I've since forgotten,
hopefully that will become apparent. :)
While testing that commit, I also noticed that altars in unaligned temples
(like the one in the Valley) weren't being displayed as the right color.

Designate high altars with dedicated altarmask bit
Fix coloring of unaligned temple altars","Now that EDITLEVEL has been incremented in 44d5be6 this PR no longer modifies patchlevel.h in a meaningful way.  Since there hasn't been a great rush to get this merged, I'm just going to remove the EDITLEVEL change for now (by rebasing on 44d5be6) so I don't have to force-push it every time editlevel is increased.  I can always put it back in the future if need be.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,749,2022-05-01T18:58:48Z,2022-05-04T02:37:35Z,2022-05-04T07:28:05Z,CLOSED,False,19,7,3,https://github.com/argrath,add msghandler support for win32,2,[],https://github.com/NetHack/NetHack/pull/749,https://github.com/argrath,1,https://github.com/NetHack/NetHack/pull/749,,,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,749,2022-05-01T18:58:48Z,2022-05-04T02:37:35Z,2022-05-04T07:28:05Z,CLOSED,False,19,7,3,https://github.com/argrath,add msghandler support for win32,2,[],https://github.com/NetHack/NetHack/pull/749,https://github.com/pat-rankin,2,https://github.com/NetHack/NetHack/pull/749#issuecomment-1115486193,,This is missing an update to src/mdlib.c in the code that makedefs uses to construct dat/options which is displayed during play by nethack's '#version' command.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,749,2022-05-01T18:58:48Z,2022-05-04T02:37:35Z,2022-05-04T07:28:05Z,CLOSED,False,19,7,3,https://github.com/argrath,add msghandler support for win32,2,[],https://github.com/NetHack/NetHack/pull/749,https://github.com/argrath,3,https://github.com/NetHack/NetHack/pull/749#issuecomment-1116348823,,Updated for it.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,750,2022-05-03T23:15:06Z,2022-05-05T06:37:20Z,2022-05-05T14:13:16Z,CLOSED,False,5,5,2,https://github.com/entrez,Tie door-kick prompts to autounlock,1,[],https://github.com/NetHack/NetHack/pull/750,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/750,"Similar to the prompt to automatically #force a box when you have no
unlocking tool, toggling off 'autounlock' should disable the prompt to
kick down a locked door.
As it was, players with autounlock turned off would be prompted to kick
down every locked door they walked into, even when they had an unlocking
tool.
Also, reduce scope of unlocktool variables for autounlocking doors and
containers.","Similar to the prompt to automatically #force a box when you have no
unlocking tool, toggling off 'autounlock' should disable the prompt to
kick down a locked door.
As it was, players with autounlock turned off would be prompted to kick
down every locked door they walked into, even when they had an unlocking
tool.
Also, reduce scope of unlocktool variables for autounlocking doors and
containers.",True,{'THUMBS_UP': ['https://github.com/copperwater']}
NetHack/NetHack,https://github.com/NetHack/NetHack,751,2022-05-04T00:01:56Z,2022-05-05T06:37:20Z,2022-05-05T06:37:20Z,CLOSED,False,1,1,1,https://github.com/FredrIQ,Fix autounlock sometimes not working,1,[],https://github.com/NetHack/NetHack/pull/751,https://github.com/FredrIQ,1,https://github.com/NetHack/NetHack/pull/751,Caused by an unconditional u.dz check.,Caused by an unconditional u.dz check.,True,"{'THUMBS_UP': ['https://github.com/entrez', 'https://github.com/copperwater']}"
NetHack/NetHack,https://github.com/NetHack/NetHack,754,2022-05-07T12:17:20Z,2022-05-09T17:37:18Z,2022-05-09T20:03:26Z,MERGED,True,45,26,1,https://github.com/argrath,split kicking empty space into separate function,1,[],https://github.com/NetHack/NetHack/pull/754,https://github.com/argrath,1,https://github.com/NetHack/NetHack/pull/754,,,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,757,2022-05-09T11:44:19Z,2022-05-09T17:37:19Z,2022-05-09T20:02:47Z,MERGED,True,30,32,1,https://github.com/argrath,split adjusting attributes into separate function,1,[],https://github.com/NetHack/NetHack/pull/757,https://github.com/argrath,1,https://github.com/NetHack/NetHack/pull/757,,,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,758,2022-05-09T20:54:42Z,2022-05-10T01:37:19Z,2022-05-10T06:05:05Z,MERGED,True,74,43,1,https://github.com/argrath,split getting damages with a kick into separate function,1,[],https://github.com/NetHack/NetHack/pull/758,https://github.com/argrath,1,https://github.com/NetHack/NetHack/pull/758,,,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,760,2022-05-13T14:09:40Z,2022-05-14T03:37:17Z,2022-05-14T09:16:41Z,CLOSED,False,17,16,1,https://github.com/argrath,kickobjnam on dokick() is assigned only kicking object,1,[],https://github.com/NetHack/NetHack/pull/760,https://github.com/argrath,1,https://github.com/NetHack/NetHack/pull/760,,,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,761,2022-05-13T16:20:44Z,2022-05-14T03:37:17Z,2022-05-14T16:27:36Z,CLOSED,False,5,0,1,https://github.com/entrez,Prevent hero from writing Pratchett books,1,[],https://github.com/NetHack/NetHack/pull/761,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/761,"The hero's ability to channel Pratchett and write his books with a magic
marker once she had read or IDed at least one of them seemed strange,
especially cases like an illiterate hero doing it as her first
introduction to the written word.  Block the hero from writing random
novels with a marker.
The image of the hero sitting down in the dungeon to write a novel is
funny, so it feels like a good spot for a funny message.  I'm not
sure if what I have there is perfect, but it can always be changed.","The hero's ability to channel Pratchett and write his books with a magic
marker once she had read or IDed at least one of them seemed strange,
especially cases like an illiterate hero doing it as her first
introduction to the written word.  Block the hero from writing random
novels with a marker.
The image of the hero sitting down in the dungeon to write a novel is
funny, so it feels like a good spot for a funny message.  I'm not
sure if what I have there is perfect, but it can always be changed.",True,"{'THUMBS_UP': ['https://github.com/k21971', 'https://github.com/copperwater']}"
NetHack/NetHack,https://github.com/NetHack/NetHack,761,2022-05-13T16:20:44Z,2022-05-14T03:37:17Z,2022-05-14T16:27:36Z,CLOSED,False,5,0,1,https://github.com/entrez,Prevent hero from writing Pratchett books,1,[],https://github.com/NetHack/NetHack/pull/761,https://github.com/k21971,2,https://github.com/NetHack/NetHack/pull/761#issuecomment-1126250288,"The hero's ability to channel Pratchett and write his books with a magic
marker once she had read or IDed at least one of them seemed strange,
especially cases like an illiterate hero doing it as her first
introduction to the written word.  Block the hero from writing random
novels with a marker.
The image of the hero sitting down in the dungeon to write a novel is
funny, so it feels like a good spot for a funny message.  I'm not
sure if what I have there is perfect, but it can always be changed.","You(""prepare to write the Great Yendorian Novel, but lack %s."", Hallucination ? ""perspiration"" : ""inspiration"");",True,"{'HEART': ['https://github.com/PFGimenez', 'https://github.com/copperwater']}"
NetHack/NetHack,https://github.com/NetHack/NetHack,761,2022-05-13T16:20:44Z,2022-05-14T03:37:17Z,2022-05-14T16:27:36Z,CLOSED,False,5,0,1,https://github.com/entrez,Prevent hero from writing Pratchett books,1,[],https://github.com/NetHack/NetHack/pull/761,https://github.com/jeremyn,3,https://github.com/NetHack/NetHack/pull/761#issuecomment-1126410404,"The hero's ability to channel Pratchett and write his books with a magic
marker once she had read or IDed at least one of them seemed strange,
especially cases like an illiterate hero doing it as her first
introduction to the written word.  Block the hero from writing random
novels with a marker.
The image of the hero sitting down in the dungeon to write a novel is
funny, so it feels like a good spot for a funny message.  I'm not
sure if what I have there is perfect, but it can always be changed.","If this PR were added it would be nice to balance it out by making it easier to get a novel somewhere else. What about adding a guaranteed novel somewhere? Vlad's Tower or Mine's End would be thematically appropriate, plus an extra one in the Tourist Quest home level. I might make a PR for that if there's support for the idea here.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,761,2022-05-13T16:20:44Z,2022-05-14T03:37:17Z,2022-05-14T16:27:36Z,CLOSED,False,5,0,1,https://github.com/entrez,Prevent hero from writing Pratchett books,1,[],https://github.com/NetHack/NetHack/pull/761,https://github.com/entrez,4,https://github.com/NetHack/NetHack/pull/761#issuecomment-1126422993,"The hero's ability to channel Pratchett and write his books with a magic
marker once she had read or IDed at least one of them seemed strange,
especially cases like an illiterate hero doing it as her first
introduction to the written word.  Block the hero from writing random
novels with a marker.
The image of the hero sitting down in the dungeon to write a novel is
funny, so it feels like a good spot for a funny message.  I'm not
sure if what I have there is perfect, but it can always be changed.","Since novels aren't actively beneficial in the way a spellbook or scroll is, I doubt many people spend their limited marker charges (and blank spellbooks) on them, even if it's technically possible.  I suspect it wouldn't have a significant effect on the number of novels people encounter in-game.
There's already a guaranteed novel in the first book or scroll shop you encounter, by the way -- so they aren't guaranteed in the sense one necessarily appears in every single game, but there are definitely measures in place to make them available.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,761,2022-05-13T16:20:44Z,2022-05-14T03:37:17Z,2022-05-14T16:27:36Z,CLOSED,False,5,0,1,https://github.com/entrez,Prevent hero from writing Pratchett books,1,[],https://github.com/NetHack/NetHack/pull/761,https://github.com/jeremyn,5,https://github.com/NetHack/NetHack/pull/761#issuecomment-1126525890,"The hero's ability to channel Pratchett and write his books with a magic
marker once she had read or IDed at least one of them seemed strange,
especially cases like an illiterate hero doing it as her first
introduction to the written word.  Block the hero from writing random
novels with a marker.
The image of the hero sitting down in the dungeon to write a novel is
funny, so it feels like a good spot for a funny message.  I'm not
sure if what I have there is perfect, but it can always be changed.","@entrez It's fun trying to ascend with a novel as a silly extra challenge, and if reasonable to do it, swing by Death for a #chat. Novels are pretty rare so getting one can mean either using a wish, using some marker charges, or polypiling. Making novels impossible to write might remove a minor but potentially interesting decision from the player.
I know this sounds like a weird edge case but I actually had a fun and memorable game where I wrote a novel to prepare for the Planes, lost it in a fire attack on Astral, and ended up getting a second novel by wresting a final wish from a wand shortly before ascending. While trying to get that last wish I had been kiting Pestilence around my high altar, zapping him with a wand of death, and avoiding my high priest since I was causing conflict. I ran out of death charges and decided I needed to ascend or risk the entire game, and it was only then that I got that wish. It was awesome.
So, I'm coming at this from the perspective that maybe that fun game would have been a little less fun with this PR. I hope that makes sense.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,761,2022-05-13T16:20:44Z,2022-05-14T03:37:17Z,2022-05-14T16:27:36Z,CLOSED,False,5,0,1,https://github.com/entrez,Prevent hero from writing Pratchett books,1,[],https://github.com/NetHack/NetHack/pull/761,https://github.com/jeremyn,6,https://github.com/NetHack/NetHack/pull/761#issuecomment-1126729410,"The hero's ability to channel Pratchett and write his books with a magic
marker once she had read or IDed at least one of them seemed strange,
especially cases like an illiterate hero doing it as her first
introduction to the written word.  Block the hero from writing random
novels with a marker.
The image of the hero sitting down in the dungeon to write a novel is
funny, so it feels like a good spot for a funny message.  I'm not
sure if what I have there is perfect, but it can always be changed.","It looks like this was merged with some modifications:


with 2/3s chance you try to write a novel, otherwise you try to write fan-fiction;


with a separate 2/3s chance, you ""give up on the idea"" and keep the blank book, otherwise you ""tear up"" your attempt and lose the blank book.


You never get a novel. Not what I was hoping for but it is what it is.
It would be nice if there were feedback to the player after the first attempt that what they were trying to do will never work, particularly since it works now, unless the intention is to punish players for trying it.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,761,2022-05-13T16:20:44Z,2022-05-14T03:37:17Z,2022-05-14T16:27:36Z,CLOSED,False,5,0,1,https://github.com/entrez,Prevent hero from writing Pratchett books,1,[],https://github.com/NetHack/NetHack/pull/761,https://github.com/jeremyn,7,https://github.com/NetHack/NetHack/pull/761#issuecomment-1126771002,"The hero's ability to channel Pratchett and write his books with a magic
marker once she had read or IDed at least one of them seemed strange,
especially cases like an illiterate hero doing it as her first
introduction to the written word.  Block the hero from writing random
novels with a marker.
The image of the hero sitting down in the dungeon to write a novel is
funny, so it feels like a good spot for a funny message.  I'm not
sure if what I have there is perfect, but it can always be changed.","I should clarify that you don't waste marker charges in any case, despite some small ambiguity in the messages. (Why would you tear up a completely blank book in frustration?) Losing a blank book with a 1/3 chance is a trivial cost so the main penalty is wasting the player's time on repeated attempts.
Specific suggestion: append ""It's hopeless!"" or ""It's no use!"" to the final give/tear up message.",True,{'THUMBS_UP': ['https://github.com/ostrosablin']}
NetHack/NetHack,https://github.com/NetHack/NetHack,762,2022-05-13T18:40:56Z,2022-05-13T18:46:38Z,2022-05-13T18:48:16Z,CLOSED,False,3,3,1,https://github.com/entrez,Fix: loot not drawn on map when mon dies,1,[],https://github.com/NetHack/NetHack/pull/762,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/762,"When a monster died, any loot it carried would not be drawn onto the map
until the square was refreshed in some other way, because the newsym
call was moved (as part of the introduction of mon_leaving_level in
6880d37) to before the point its inventory items are actually placed
onto the map.  Move mon_leaving_level to after the relobj call in
m_detach so the new symbol will take into consideration any items placed
onto the map from the monster's inventory.","When a monster died, any loot it carried would not be drawn onto the map
until the square was refreshed in some other way, because the newsym
call was moved (as part of the introduction of mon_leaving_level in
6880d37) to before the point its inventory items are actually placed
onto the map.  Move mon_leaving_level to after the relobj call in
m_detach so the new symbol will take into consideration any items placed
onto the map from the monster's inventory.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,762,2022-05-13T18:40:56Z,2022-05-13T18:46:38Z,2022-05-13T18:48:16Z,CLOSED,False,3,3,1,https://github.com/entrez,Fix: loot not drawn on map when mon dies,1,[],https://github.com/NetHack/NetHack/pull/762,https://github.com/entrez,2,https://github.com/NetHack/NetHack/pull/762#issuecomment-1126348521,"When a monster died, any loot it carried would not be drawn onto the map
until the square was refreshed in some other way, because the newsym
call was moved (as part of the introduction of mon_leaving_level in
6880d37) to before the point its inventory items are actually placed
onto the map.  Move mon_leaving_level to after the relobj call in
m_detach so the new symbol will take into consideration any items placed
onto the map from the monster's inventory.","Okay, this needs reconsideration given the apparent need to reset mtrapped, etc, before the call to relobj (based on the comment, I'm guessing that's the case).",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,763,2022-05-15T15:55:56Z,2022-05-15T23:37:16Z,2022-05-16T02:11:40Z,CLOSED,False,11,1,1,https://github.com/vultur-cadens,Make some quest nemeses leave poison clouds when they die.,1,[],https://github.com/NetHack/NetHack/pull/763,https://github.com/vultur-cadens,1,https://github.com/NetHack/NetHack/pull/763,"The Archeologist, Caveman, and Priest quest texts describe the
nemesis's body producing a cloud of noxious fumes/gas when killed.

I could have implemented this by checking for the hero's role instead of the nemesis's permonst pointer, but I decided that somebody who changes the quest text will probably also rename the nemesis.  Referencing the specific nemesis makes it less likely that some variant author who revamps the quest accidentally leaves in the poison gas cloud when their replacement quest text doesn't call for it.

The relevant quest texts:
Archeologist: 
  
    
      NetHack/dat/quest.lua
    
    
        Lines 295 to 296
      in
      3a0a927
    
  
  
    

        
          
           killed_nemesis = { 
        

        
          
              text = ""The body of %n dissipates in a cloud of noxious fumes."", 
        
    
  


Caveman: 
  
    
      NetHack/dat/quest.lua
    
    
        Lines 758 to 760
      in
      3a0a927
    
  
  
    

        
          
                 killed_nemesis = { 
        

        
          
                    text = [[%nC sinks to the ground, her heads flailing about. 
        

        
          
           As she dies, a cloud of noxious fumes billows about her.]], 
        
    
  


Priest:  
  
    
      NetHack/dat/quest.lua
    
    
        Lines 1634 to 1638
      in
      3a0a927
    
  
  
    

        
          
                 killed_nemesis = { 
        

        
          
                    synopsis = ""[%nC dies.  Moloch is aware of you and angry at %n.]"", 
        

        
          
                    output = ""text"", 
        

        
          
                    text = [[You feel a wrenching shift in the ether as %ns body dissolves 
        

        
          
           into a cloud of noxious gas.","The Archeologist, Caveman, and Priest quest texts describe the
nemesis's body producing a cloud of noxious fumes/gas when killed.

I could have implemented this by checking for the hero's role instead of the nemesis's permonst pointer, but I decided that somebody who changes the quest text will probably also rename the nemesis.  Referencing the specific nemesis makes it less likely that some variant author who revamps the quest accidentally leaves in the poison gas cloud when their replacement quest text doesn't call for it.

The relevant quest texts:
Archeologist: 
  
    
      NetHack/dat/quest.lua
    
    
        Lines 295 to 296
      in
      3a0a927
    
  
  
    

        
          
           killed_nemesis = { 
        

        
          
              text = ""The body of %n dissipates in a cloud of noxious fumes."", 
        
    
  


Caveman: 
  
    
      NetHack/dat/quest.lua
    
    
        Lines 758 to 760
      in
      3a0a927
    
  
  
    

        
          
                 killed_nemesis = { 
        

        
          
                    text = [[%nC sinks to the ground, her heads flailing about. 
        

        
          
           As she dies, a cloud of noxious fumes billows about her.]], 
        
    
  


Priest:  
  
    
      NetHack/dat/quest.lua
    
    
        Lines 1634 to 1638
      in
      3a0a927
    
  
  
    

        
          
                 killed_nemesis = { 
        

        
          
                    synopsis = ""[%nC dies.  Moloch is aware of you and angry at %n.]"", 
        

        
          
                    output = ""text"", 
        

        
          
                    text = [[You feel a wrenching shift in the ether as %ns body dissolves 
        

        
          
           into a cloud of noxious gas.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,763,2022-05-15T15:55:56Z,2022-05-15T23:37:16Z,2022-05-16T02:11:40Z,CLOSED,False,11,1,1,https://github.com/vultur-cadens,Make some quest nemeses leave poison clouds when they die.,1,[],https://github.com/NetHack/NetHack/pull/763,https://github.com/copperwater,2,https://github.com/NetHack/NetHack/pull/763#issuecomment-1127060848,"The Archeologist, Caveman, and Priest quest texts describe the
nemesis's body producing a cloud of noxious fumes/gas when killed.

I could have implemented this by checking for the hero's role instead of the nemesis's permonst pointer, but I decided that somebody who changes the quest text will probably also rename the nemesis.  Referencing the specific nemesis makes it less likely that some variant author who revamps the quest accidentally leaves in the poison gas cloud when their replacement quest text doesn't call for it.

The relevant quest texts:
Archeologist: 
  
    
      NetHack/dat/quest.lua
    
    
        Lines 295 to 296
      in
      3a0a927
    
  
  
    

        
          
           killed_nemesis = { 
        

        
          
              text = ""The body of %n dissipates in a cloud of noxious fumes."", 
        
    
  


Caveman: 
  
    
      NetHack/dat/quest.lua
    
    
        Lines 758 to 760
      in
      3a0a927
    
  
  
    

        
          
                 killed_nemesis = { 
        

        
          
                    text = [[%nC sinks to the ground, her heads flailing about. 
        

        
          
           As she dies, a cloud of noxious fumes billows about her.]], 
        
    
  


Priest:  
  
    
      NetHack/dat/quest.lua
    
    
        Lines 1634 to 1638
      in
      3a0a927
    
  
  
    

        
          
                 killed_nemesis = { 
        

        
          
                    synopsis = ""[%nC dies.  Moloch is aware of you and angry at %n.]"", 
        

        
          
                    output = ""text"", 
        

        
          
                    text = [[You feel a wrenching shift in the ether as %ns body dissolves 
        

        
          
           into a cloud of noxious gas.","Not really a fan of hardcoding behavior for certain nemeses based on the quest text.
Plus, if the fumes are dangerous, one would expect the text to say ""Ahh! It hurts! You start to scramble away!"" or something.
Plus, it may not be entirely fair to drop a smoke bomb on the hero who may not be expecting it (other demons don't dissipate in fumes; why would demon nemeses be expected to?)",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,765,2022-05-18T17:44:53Z,2022-05-21T02:37:18Z,2022-05-21T07:43:32Z,MERGED,True,39,28,1,https://github.com/argrath,split fixing curse trouble into separate function,2,[],https://github.com/NetHack/NetHack/pull/765,https://github.com/argrath,1,https://github.com/NetHack/NetHack/pull/765,,,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,765,2022-05-18T17:44:53Z,2022-05-21T02:37:18Z,2022-05-21T07:43:32Z,MERGED,True,39,28,1,https://github.com/argrath,split fixing curse trouble into separate function,2,[],https://github.com/NetHack/NetHack/pull/765,https://github.com/nhmall,2,https://github.com/NetHack/NetHack/pull/765#issuecomment-1132323152,,"impossible(""fix_worst_trouble: nothing to uncurse."");


The text ""fix_worst_trouble"" represents the name of the involved function for debugging purposes. Moving the code into a function called fix_curse_trouble() and leaving the name reflecting the original function name will be misleading.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,765,2022-05-18T17:44:53Z,2022-05-21T02:37:18Z,2022-05-21T07:43:32Z,MERGED,True,39,28,1,https://github.com/argrath,split fixing curse trouble into separate function,2,[],https://github.com/NetHack/NetHack/pull/765,https://github.com/argrath,3,https://github.com/NetHack/NetHack/pull/765#issuecomment-1133366468,,Updated it.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,767,2022-05-20T21:13:28Z,2022-05-21T06:44:55Z,2022-05-21T16:03:11Z,CLOSED,False,15,5,1,https://github.com/entrez,Handle -eaux plurals in makeplural/makesingular,1,[],https://github.com/NetHack/NetHack/pull/767,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/767,"I noticed a comment about -eau pluralizing as -eaux, e.g. ""gateau"" ->
""gateaux"", was not consistent with the actual output of makeplural.
Same thing with ""VAX"" -> ""VAXen"" in the line below it; they're very old
comments, so maybe they were originally meant to point out some plurals
makeplural got wrong?  Since they predate the addition of ""oxen"" and
""geese"" to one_off[] (and the array itself), it seems like the other
special cases mentioned in the comments would also have been wrong at
the time they were written.
Address this horrifying pastry-related oversight by adding handling for
'-eaux' plurals to makeplural, with an exception for 'bureau' (plural
'bureaus'; according to the dictionary, 'bureaux' is an acceptable
variant but 'bureaus' is more common, at least in American English).
There's also an exception for 'Bordeaux' (as in a bottle of the wine),
since the singular and plural are the same.
A bit surprised this wasn't already in there, since 'gateau' is a real
food item and seems like a much more likely fruit name than some of the
inedible items makeplural has special rules for.
Also add "" au "" to compounds[] in singplur_compound, so that 'gateau au
chocolat' will pluralize correctly to 'gateaux au chocolat'.  Without
that change, the result is 'gateau au chocolats'.","I noticed a comment about -eau pluralizing as -eaux, e.g. ""gateau"" ->
""gateaux"", was not consistent with the actual output of makeplural.
Same thing with ""VAX"" -> ""VAXen"" in the line below it; they're very old
comments, so maybe they were originally meant to point out some plurals
makeplural got wrong?  Since they predate the addition of ""oxen"" and
""geese"" to one_off[] (and the array itself), it seems like the other
special cases mentioned in the comments would also have been wrong at
the time they were written.
Address this horrifying pastry-related oversight by adding handling for
'-eaux' plurals to makeplural, with an exception for 'bureau' (plural
'bureaus'; according to the dictionary, 'bureaux' is an acceptable
variant but 'bureaus' is more common, at least in American English).
There's also an exception for 'Bordeaux' (as in a bottle of the wine),
since the singular and plural are the same.
A bit surprised this wasn't already in there, since 'gateau' is a real
food item and seems like a much more likely fruit name than some of the
inedible items makeplural has special rules for.
Also add "" au "" to compounds[] in singplur_compound, so that 'gateau au
chocolat' will pluralize correctly to 'gateaux au chocolat'.  Without
that change, the result is 'gateau au chocolats'.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,768,2022-05-21T03:10:02Z,2022-06-02T18:37:17Z,2022-06-03T04:45:06Z,CLOSED,False,7,1,2,https://github.com/vultur-cadens,Livelog refused wishes and (non-cursed) genocides,1,[],https://github.com/NetHack/NetHack/pull/768,https://github.com/vultur-cadens,1,https://github.com/NetHack/NetHack/pull/768,,,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,768,2022-05-21T03:10:02Z,2022-06-02T18:37:17Z,2022-06-03T04:45:06Z,CLOSED,False,7,1,2,https://github.com/vultur-cadens,Livelog refused wishes and (non-cursed) genocides,1,[],https://github.com/NetHack/NetHack/pull/768,https://github.com/entrez,2,https://github.com/NetHack/NetHack/pull/768#issuecomment-1133526167,,"My two cents: using ""refused to perform genocide"" for a failed attempt to genocide something, not just an actual refusal, seems weird to me.  I also feel like ""refused"" can be a somewhat emotionally charged word (maybe this is just me, but ""refused to perform genocide"" sounds like the hero is taking a moral stand or something to me); in my opinion a more neutral word like ""declined"" might fit better.
I think the goto labels should not be indented at all, if you want to be consistent with the rest of the code.
Also, it seems like reusing the exact same label in the two functions could potentially be confusing: if you grep for it you might end up in the wrong place.",True,{'THUMBS_UP': ['https://github.com/vultur-cadens']}
NetHack/NetHack,https://github.com/NetHack/NetHack,768,2022-05-21T03:10:02Z,2022-06-02T18:37:17Z,2022-06-03T04:45:06Z,CLOSED,False,7,1,2,https://github.com/vultur-cadens,Livelog refused wishes and (non-cursed) genocides,1,[],https://github.com/NetHack/NetHack/pull/768,https://github.com/vultur-cadens,3,https://github.com/NetHack/NetHack/pull/768#issuecomment-1133529613,,Updated.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,768,2022-05-21T03:10:02Z,2022-06-02T18:37:17Z,2022-06-03T04:45:06Z,CLOSED,False,7,1,2,https://github.com/vultur-cadens,Livelog refused wishes and (non-cursed) genocides,1,[],https://github.com/NetHack/NetHack/pull/768,https://github.com/copperwater,4,https://github.com/NetHack/NetHack/pull/768#issuecomment-1133643144,,"Failing to spell species correctly (or attempting to genocide ungenocidable species) a sufficient number of times doesn't really constitute ""declining to perform genocide"", since by all indications the player was trying to genocide something but never landed on something that the game would accept. This should only livelog it when the player explicitly says to genocide nothing.
(You could have a separate livelog for the ""That's enough tries!"" case, but is that really interesting enough to log? I don't think so.)",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,770,2022-05-22T04:46:03Z,,2022-05-22T04:46:03Z,OPEN,False,4,3,1,https://github.com/matteverett,Move check for starting L1 spellbook to include non-random spellbooks,1,[],https://github.com/NetHack/NetHack/pull/770,https://github.com/matteverett,1,https://github.com/NetHack/NetHack/pull/770,"A wizard's starting equipment should include a blessed spellbook of force bolt and a random non-force bolt spellbook of level 3 or lower.
Currently, a wizard's second spellbook is always level 1. A previous change ensures that any character's first (random) spellbook is always level 1. Since a wizard's first spellbook is non-random, however, the got_sp1 flag is not set, and the second spellbook is always level 1 as well.
The proposed change moves the level 1 spellbook check so that it is performed on both random and non-random spellbooks, so the second spellbook is level 3 or lower as intended.","A wizard's starting equipment should include a blessed spellbook of force bolt and a random non-force bolt spellbook of level 3 or lower.
Currently, a wizard's second spellbook is always level 1. A previous change ensures that any character's first (random) spellbook is always level 1. Since a wizard's first spellbook is non-random, however, the got_sp1 flag is not set, and the second spellbook is always level 1 as well.
The proposed change moves the level 1 spellbook check so that it is performed on both random and non-random spellbooks, so the second spellbook is level 3 or lower as intended.",True,"{'THUMBS_UP': ['https://github.com/ostrosablin', 'https://github.com/Umbire', 'https://github.com/entrez']}"
NetHack/NetHack,https://github.com/NetHack/NetHack,772,2022-05-25T17:44:55Z,2022-05-26T14:59:35Z,2022-05-26T14:59:35Z,CLOSED,False,2,1,1,https://github.com/entrez,Fix: invisible pudding globs,1,[],https://github.com/NetHack/NetHack/pull/772,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/772,"When a pudding was killed by a monster (player-caused deaths were exempt
because of a 'backup' newsym call in xkilled), and the resulting glob
ended up on the pudding's square (whether because there were no adjacent
globs, or because the adjacent glob merged into the new one rather than
vice-versa), the glob wouldn't be drawn onto the map until the squre was
redrawn with ^R or similar.  This was because the early return for globs
in make_corpse skipped the typical newsym call near the end of the
function.
In this commit I just added a newsym call to the glob case in
make_corpse, but adding a newsym call to monkilled as a guard against
similar cases (equivalent to the one in xkilled) seems like a possible
extension.  I wasn't sure if there's a particular reason it's not
included in monkilled, so I didn't mess with it.
Example (using m-prefix #wizkill -- #wizkill without the m-prefix doesn't have the same problem, due to the newsym call in xkilled mentioned in the commit message):

  
    
    

    before.mp4","When a pudding was killed by a monster (player-caused deaths were exempt
because of a 'backup' newsym call in xkilled), and the resulting glob
ended up on the pudding's square (whether because there were no adjacent
globs, or because the adjacent glob merged into the new one rather than
vice-versa), the glob wouldn't be drawn onto the map until the squre was
redrawn with ^R or similar.  This was because the early return for globs
in make_corpse skipped the typical newsym call near the end of the
function.
In this commit I just added a newsym call to the glob case in
make_corpse, but adding a newsym call to monkilled as a guard against
similar cases (equivalent to the one in xkilled) seems like a possible
extension.  I wasn't sure if there's a particular reason it's not
included in monkilled, so I didn't mess with it.
Example (using m-prefix #wizkill -- #wizkill without the m-prefix doesn't have the same problem, due to the newsym call in xkilled mentioned in the commit message):

  
    
    

    before.mp4",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,773,2022-05-27T19:53:23Z,2022-05-28T00:37:19Z,2022-05-28T00:49:45Z,MERGED,True,7,2,1,https://github.com/entrez,Fix: mdisplacem stoning and gloves,1,[],https://github.com/NetHack/NetHack/pull/773,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/773,"Apparently this is a bug that's existed since mon-vs-mon displacement
was introduced in 2003 (in 89c785e): if a monster displaced a footrice,
having gloves on would make it vulnerable to being stoned, while having
bare hands would protect it.  Switch it around so wearing gloves blocks
petrification, as it does under other circumstances.
Also add a message explaining why the displacing monster was stoned (if
the displacement attempt is visible to the hero), so the ""Foo turns to
stone!"" message has some context.","Apparently this is a bug that's existed since mon-vs-mon displacement
was introduced in 2003 (in 89c785e): if a monster displaced a footrice,
having gloves on would make it vulnerable to being stoned, while having
bare hands would protect it.  Switch it around so wearing gloves blocks
petrification, as it does under other circumstances.
Also add a message explaining why the displacing monster was stoned (if
the displacement attempt is visible to the hero), so the ""Foo turns to
stone!"" message has some context.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,774,2022-05-27T23:53:41Z,2022-05-29T04:37:17Z,2022-05-30T14:43:04Z,CLOSED,False,3,1,2,https://github.com/entrez,Fix some issues with 'P'/justpicked loot category,1,[],https://github.com/NetHack/NetHack/pull/774,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/774,"When using 'A'/autopick with the 'items you just picked up' category,
instead of autoselecting all items within that category, it selected
every item in your inventory (like it used to work before 3.7).  Just
blew up a bag of holding because of this.
While testing the fix for that, I noticed 'P' wasn't working at all
with menustyle:traditional -- you could select it as a filter, but it
didn't actually get applied to anything, so it would end up prompting
you for every item in inventory.  Fix both those things.
Edit: I originally had these as two separate commits, but squashed them into one since they're dealing with such similar issues (and both are very small).","When using 'A'/autopick with the 'items you just picked up' category,
instead of autoselecting all items within that category, it selected
every item in your inventory (like it used to work before 3.7).  Just
blew up a bag of holding because of this.
While testing the fix for that, I noticed 'P' wasn't working at all
with menustyle:traditional -- you could select it as a filter, but it
didn't actually get applied to anything, so it would end up prompting
you for every item in inventory.  Fix both those things.
Edit: I originally had these as two separate commits, but squashed them into one since they're dealing with such similar issues (and both are very small).",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,775,2022-05-28T01:04:39Z,2022-05-29T04:37:17Z,2022-05-29T04:37:17Z,MERGED,True,6,6,3,https://github.com/copperwater,Have newcham() give messages when monsters polymorph in more cases,1,[],https://github.com/NetHack/NetHack/pull/775,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/775,"This is a descendent of an earlier patch I wrote. The main idea is still
to clearly communicate to the player what something is turning into,
without the need to farlook afterwards, and give them the opportunity to
add MSGTYPE for when something jumps on a polymorph trap and becomes an
arch-lich. If it happens out of sight, the player also might get a whiff
of the monster's smell, giving a bit of advance warning.
There is one new case in here, in normal_shape(), which came about
because I noticed a weird message sequence: ""The magic-absorbing blade
cancels the python!  You kill the chameleon!"" with no intervening
message indicating the python reverted to a chameleon.","This is a descendent of an earlier patch I wrote. The main idea is still
to clearly communicate to the player what something is turning into,
without the need to farlook afterwards, and give them the opportunity to
add MSGTYPE for when something jumps on a polymorph trap and becomes an
arch-lich. If it happens out of sight, the player also might get a whiff
of the monster's smell, giving a bit of advance warning.
There is one new case in here, in normal_shape(), which came about
because I noticed a weird message sequence: ""The magic-absorbing blade
cancels the python!  You kill the chameleon!"" with no intervening
message indicating the python reverted to a chameleon.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,776,2022-05-28T15:10:16Z,2022-05-28T22:37:17Z,2022-05-28T22:37:18Z,MERGED,True,19,22,7,https://github.com/copperwater,Various small fixes and code smell removals,6,[],https://github.com/NetHack/NetHack/pull/776,https://github.com/copperwater,1,https://github.com/NetHack/NetHack/pull/776,This pull request is for the small fixup items on my list of things I've noticed while browsing the code that do not affect behavior whatsoever. I hope the commits are self-explanatory.,This pull request is for the small fixup items on my list of things I've noticed while browsing the code that do not affect behavior whatsoever. I hope the commits are self-explanatory.,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,777,2022-05-28T21:43:53Z,,2022-05-28T21:43:53Z,OPEN,False,159,151,1,https://github.com/argrath,"split ""act_on_act"" into separate function",1,[],https://github.com/NetHack/NetHack/pull/777,https://github.com/argrath,1,https://github.com/NetHack/NetHack/pull/777,,,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,782,2022-06-01T12:42:31Z,2022-06-01T21:37:17Z,2022-06-01T21:41:11Z,MERGED,True,8,4,1,https://github.com/argrath,fix memory leaks related to selection_new(),1,[],https://github.com/NetHack/NetHack/pull/782,https://github.com/argrath,1,https://github.com/NetHack/NetHack/pull/782,"selection_new() returns an address of malloc()'ed buffer.
If ov is null, this value is discarded without freeing the buffer.
To avoid this, move null-checks before calling selection_new().
Also, remove null-check of the return value of selection_new()
because it always returns non-null.","selection_new() returns an address of malloc()'ed buffer.
If ov is null, this value is discarded without freeing the buffer.
To avoid this, move null-checks before calling selection_new().
Also, remove null-check of the return value of selection_new()
because it always returns non-null.",True,{'THUMBS_UP': ['https://github.com/entrez']}
NetHack/NetHack,https://github.com/NetHack/NetHack,784,2022-06-02T20:00:02Z,2022-06-04T00:37:18Z,2022-06-04T00:43:24Z,CLOSED,False,6,1,1,https://github.com/entrez,Reset justpicked only when picking up items,1,[],https://github.com/NetHack/NetHack/pull/784,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/784,"With reset_justpicked called unconditionally near the top of pickup, it
was impossible to pick up some items, walk over to a chest, and use 'P'
to deposit the items with autopickup on: pickup is called with every
move, and autopickup allowed execution to reach the reset_justpicked
call whenever the hero stepped on a square with an item in it.  As a
result, stepping onto a square with a container would clear all the
justpicked flags in inventory (pressing ',' and then declining to pick
anything up would have a similar effect).
Instead, call reset_justpicked only when the hero (or autopickup) has
actually selected an item to pick up.  This makes the code a bit more
complicated than before -- I don't think there's a way to do it with
just one reset_justpicked call any more, due to the structure of pickup
and the need to call reset_justpicked before actually putting any items
into inventory -- but it means that justpicked info will be much less
ephemeral and more useful when managing stashes, etc.","With reset_justpicked called unconditionally near the top of pickup, it
was impossible to pick up some items, walk over to a chest, and use 'P'
to deposit the items with autopickup on: pickup is called with every
move, and autopickup allowed execution to reach the reset_justpicked
call whenever the hero stepped on a square with an item in it.  As a
result, stepping onto a square with a container would clear all the
justpicked flags in inventory (pressing ',' and then declining to pick
anything up would have a similar effect).
Instead, call reset_justpicked only when the hero (or autopickup) has
actually selected an item to pick up.  This makes the code a bit more
complicated than before -- I don't think there's a way to do it with
just one reset_justpicked call any more, due to the structure of pickup
and the need to call reset_justpicked before actually putting any items
into inventory -- but it means that justpicked info will be much less
ephemeral and more useful when managing stashes, etc.",True,{'THUMBS_UP': ['https://github.com/ostrosablin']}
NetHack/NetHack,https://github.com/NetHack/NetHack,787,2022-06-03T19:03:37Z,2022-06-03T23:37:19Z,2022-06-03T23:44:22Z,MERGED,True,16,17,1,https://github.com/entrez,Fix: segfault on wizmode terrain wish,1,[],https://github.com/NetHack/NetHack/pull/787,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/787,"The new livelogging of wish results caused a segfault when attempting to
handle the results of a wizard mode terrain wish, since a successful
terrain wish returns a nonzero obj which nonetheless is just a dummy
object.  Move the existing check for that further up to skip all the
livelogging stuff entirely, since such wishes will never happen in a
real game and exist purely for debugging purposes.","The new livelogging of wish results caused a segfault when attempting to
handle the results of a wizard mode terrain wish, since a successful
terrain wish returns a nonzero obj which nonetheless is just a dummy
object.  Move the existing check for that further up to skip all the
livelogging stuff entirely, since such wishes will never happen in a
real game and exist purely for debugging purposes.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,788,2022-06-03T19:17:19Z,2022-06-03T23:37:19Z,2022-06-03T23:44:06Z,MERGED,True,3,3,1,https://github.com/entrez,Fix: wished-for doors in wizmode always vertical,1,[],https://github.com/NetHack/NetHack/pull/788,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/788,"Wishing for a door is intended to retain the existing 'horizontal' value
of the surrounding wall or door (see comment in the wizterrainwish
'door' case).  However, the field was being reset by mistake, causing
all door wishes to create vertical doors.  Preserve it as intended.","Wishing for a door is intended to retain the existing 'horizontal' value
of the surrounding wall or door (see comment in the wizterrainwish
'door' case).  However, the field was being reset by mistake, causing
all door wishes to create vertical doors.  Preserve it as intended.",True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,788,2022-06-03T19:17:19Z,2022-06-03T23:37:19Z,2022-06-03T23:44:06Z,MERGED,True,3,3,1,https://github.com/entrez,Fix: wished-for doors in wizmode always vertical,1,[],https://github.com/NetHack/NetHack/pull/788,https://github.com/entrez,2,https://github.com/NetHack/NetHack/pull/788#issuecomment-1146284942,"Wishing for a door is intended to retain the existing 'horizontal' value
of the surrounding wall or door (see comment in the wizterrainwish
'door' case).  However, the field was being reset by mistake, causing
all door wishes to create vertical doors.  Preserve it as intended.",NB: this cannot be tested without something like #787 since wishing for a door (or other terrain/furniture) segfaults as of the current HEAD (dca1cd7),True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,791,2022-06-06T20:25:41Z,,2022-06-06T20:25:41Z,OPEN,False,44,33,1,https://github.com/argrath,split cleaning-up on gd_move() into separate function,1,[],https://github.com/NetHack/NetHack/pull/791,https://github.com/argrath,1,https://github.com/NetHack/NetHack/pull/791,,,True,{}
NetHack/NetHack,https://github.com/NetHack/NetHack,792,2022-06-06T20:33:32Z,,2022-06-06T21:22:38Z,OPEN,False,1,0,1,https://github.com/entrez,Allow intrinsic gain from pet's digestion attack,1,[],https://github.com/NetHack/NetHack/pull/792,https://github.com/entrez,1,https://github.com/NetHack/NetHack/pull/792,"Add possible pet intrinsic gain from swallowing a monster in one gulp
(in situations where a corpse is created and eaten by the engulfer),
making it equivalent in this regard to eating the corpse off the floor.
One possible extension or modification would be to reduce the chance of
receiving an intrinsic when the corpse is consumed via digestion attack,
similar to how the corpse nutrition is 50% of its normal value.  I
didn't incorporate that into this commit since the chance of receiving
an intrinsic is tied to monster level rather than nutrition, so I wasn't
sure if it made sense.","Add possible pet intrinsic gain from swallowing a monster in one gulp
(in situations where a corpse is created and eaten by the engulfer),
making it equivalent in this regard to eating the corpse off the floor.
One possible extension or modification would be to reduce the chance of
receiving an intrinsic when the corpse is consumed via digestion attack,
similar to how the corpse nutrition is 50% of its normal value.  I
didn't incorporate that into this commit since the chance of receiving
an intrinsic is tied to monster level rather than nutrition, so I wasn't
sure if it made sense.",True,{}
